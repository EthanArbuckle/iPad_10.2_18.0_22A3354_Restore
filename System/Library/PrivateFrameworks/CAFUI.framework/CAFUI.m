id CAFUIFrameworkBundle()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, 8uLL, 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "objectAtIndex:", 0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend((id)GSSystemRootDirectory(), "stringByAppendingPathComponent:", v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "stringByAppendingPathComponent:", CFSTR("PrivateFrameworks/CAFUI.framework"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD1488], "bundleWithPath:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id CAFUIImageForSymbolName(void *a1)
{
  return CAFUIImageForSymbolNameWithConfiguration(a1, 0);
}

id CAFUIImageForSymbolNameWithConfiguration(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;

  v3 = a1;
  v4 = a2;
  v5 = (void *)MEMORY[0x24BEBD640];
  CAFUIFrameworkBundle();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "imageNamed:inBundle:withConfiguration:", v3, v6, v4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v7)
  {
    if (v4)
      objc_msgSend(MEMORY[0x24BEBD640], "_systemImageNamed:withConfiguration:", v3, v4);
    else
      objc_msgSend(MEMORY[0x24BEBD640], "_systemImageNamed:", v3);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v7;
}

id CAFUIStatusLogForCategory(uint64_t a1)
{
  if (a1)
    CAFUIStatusLogForCategory_cold_1();
  if (CAFUIStatusLogForCategory_onceToken != -1)
    dispatch_once(&CAFUIStatusLogForCategory_onceToken, &__block_literal_global);
  return (id)CAFUIStatusLogForCategory_logObjects_0;
}

uint64_t CAFUIStackView.__allocating_init(views:axis:minWidth:)(unint64_t a1, uint64_t a2, double a3)
{
  objc_class *v3;
  id v7;
  uint64_t v8;

  v7 = objc_allocWithZone(v3);
  v8 = specialized CAFUIStackView.init(views:axis:minWidth:)(a1, a2, a3);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t CAFUIStackView.init(views:axis:minWidth:)(unint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3;

  v3 = specialized CAFUIStackView.init(views:axis:minWidth:)(a1, a2, a3);
  swift_bridgeObjectRelease();
  return v3;
}

id CAFUIStackView.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void CAFUIStackView.init(coder:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void CAFUIStackView.init(frame:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id CAFUIStackView.__deallocating_deinit()
{
  return CAFUIStackView.__deallocating_deinit(type metadata accessor for CAFUIStackView);
}

char *CAFUISwitchView.init(value:handler:)(char a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v5;
  id v6;
  char *v7;
  id v8;
  uint64_t v9;
  uint64_t inited;
  void *v11;
  id v12;
  void *v13;
  char *v14;
  void *v15;
  uint64_t v16;
  id v17;
  void *v18;
  void *v19;
  char *v20;
  id v21;
  unint64_t v23;

  v5 = &v3[OBJC_IVAR____TtC5CAFUI15CAFUISwitchView_handler];
  *(_QWORD *)v5 = a2;
  *((_QWORD *)v5 + 1) = a3;
  v6 = objc_allocWithZone(MEMORY[0x24BEBD9B8]);
  v7 = v3;
  swift_retain();
  v8 = objc_msgSend(v6, sel_init);
  v9 = OBJC_IVAR____TtC5CAFUI15CAFUISwitchView_uiSwitch;
  *(_QWORD *)&v7[OBJC_IVAR____TtC5CAFUI15CAFUISwitchView_uiSwitch] = v8;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_237579080;
  v11 = *(void **)&v7[v9];
  *(_QWORD *)(inited + 32) = v11;
  v23 = inited;
  specialized Array._endMutation()();
  v12 = v11;
  v13 = (void *)specialized CAFUIStackView.init(views:axis:minWidth:)(v23, 0, 0.0);
  swift_bridgeObjectRelease();
  v14 = v13;
  v15 = (void *)MEMORY[0x23B812F68](0x6977534955464143, 0xEF77656956686374);
  objc_msgSend(v14, sel_setAccessibilityIdentifier_, v15);

  v16 = OBJC_IVAR____TtC5CAFUI15CAFUISwitchView_uiSwitch;
  v17 = *(id *)&v14[OBJC_IVAR____TtC5CAFUI15CAFUISwitchView_uiSwitch];
  v18 = (void *)MEMORY[0x23B812F68](0xD000000000000017, 0x800000023757BC20);
  objc_msgSend(v17, sel_setAccessibilityIdentifier_, v18);

  v19 = *(void **)&v14[v16];
  objc_msgSend(v19, sel_setOn_animated_, a1 & 1, 0);
  v20 = v14;
  v21 = v19;
  objc_msgSend(v21, sel_addTarget_action_forControlEvents_, v20, sel_switchChangedWithSender_, 4096);

  swift_release();
  return v20;
}

void CAFUISwitchView.__allocating_init(views:axis:minWidth:)()
{
  CAFUISwitchView.__allocating_init(views:axis:minWidth:)();
}

{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void CAFUISwitchView.__ivar_destroyer()
{
  uint64_t v0;

  swift_release();

}

id CAFUISwitchView.__deallocating_deinit()
{
  return CAFUIStackView.__deallocating_deinit(type metadata accessor for CAFUISwitchView);
}

id CAFUIProgressView.init(frame:)(double a1, double a2, double a3, double a4)
{
  char *v4;
  id v9;
  char *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  Class isa;
  objc_super v31;

  *(_DWORD *)&v4[OBJC_IVAR____TtC5CAFUI17CAFUIProgressView_progress] = 0;
  v9 = objc_allocWithZone((Class)CAFUIProgressBarView);
  v10 = v4;
  v11 = objc_msgSend(v9, sel_initWithFrame_, 12.0, 13.0, 80.0, 4.0);
  v12 = objc_msgSend((id)objc_opt_self(), sel__carSystemFocusColor);
  objc_msgSend(v11, sel_setBarColor_, v12);

  objc_msgSend(v11, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  *(_QWORD *)&v10[OBJC_IVAR____TtC5CAFUI17CAFUIProgressView_progressBarView] = v11;
  v13 = v11;

  v31.receiver = v10;
  v31.super_class = (Class)type metadata accessor for CAFUIProgressView();
  v14 = objc_msgSendSuper2(&v31, sel_initWithFrame_, a1, a2, a3, a4);
  v15 = (void *)MEMORY[0x23B812F68](0xD000000000000011, 0x80000002375790F0);
  objc_msgSend(v14, sel_setAccessibilityIdentifier_, v15);

  objc_msgSend(v14, sel_addSubview_, v13);
  v16 = (void *)objc_opt_self();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_237579090;
  v18 = objc_msgSend(v13, sel_heightAnchor);
  v19 = objc_msgSend(v18, sel_constraintEqualToConstant_, 4.0);

  *(_QWORD *)(v17 + 32) = v19;
  v20 = objc_msgSend(v13, sel_centerYAnchor);
  v21 = objc_msgSend(v14, sel_centerYAnchor);
  v22 = objc_msgSend(v20, sel_constraintEqualToAnchor_, v21);

  *(_QWORD *)(v17 + 40) = v22;
  v23 = objc_msgSend(v13, sel_leadingAnchor);
  v24 = objc_msgSend(v14, sel_leadingAnchor);
  v25 = objc_msgSend(v23, sel_constraintEqualToAnchor_constant_, v24, 13.0);

  *(_QWORD *)(v17 + 48) = v25;
  v26 = objc_msgSend(v13, sel_trailingAnchor);
  v27 = objc_msgSend(v14, sel_trailingAnchor);
  v28 = objc_msgSend(v26, sel_constraintEqualToAnchor_constant_, v27, -13.0);

  *(_QWORD *)(v17 + 56) = v28;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v16, sel_activateConstraints_, isa);

  return v14;
}

id CAFUIProgressView.__deallocating_deinit()
{
  return CAFUIStackView.__deallocating_deinit(type metadata accessor for CAFUIProgressView);
}

Swift::Void __swiftcall CAFUIStepperViewButton.updateColors()()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  id v8;

  switch((unint64_t)objc_msgSend(v0, sel_state))
  {
    case 1uLL:
    case 4uLL:
    case 8uLL:
      v1 = (void *)objc_opt_self();
      v2 = objc_msgSend(v1, sel__carSystemFocusLabelColor);
      objc_msgSend(v0, sel_setTintColor_, v2);

      v3 = objc_msgSend(v1, sel__carSystemFocusColor);
      goto LABEL_3;
    case 2uLL:
      v5 = (void *)objc_opt_self();
      v6 = objc_msgSend(v5, sel_secondaryLabelColor);
      objc_msgSend(v0, sel_setTintColor_, v6);

      if (*((_BYTE *)v0 + OBJC_IVAR____TtC5CAFUI22CAFUIStepperViewButton_hasCellBackground) != 1)
        goto LABEL_11;
      v4 = objc_msgSend(v5, sel_tableCellPlainBackgroundColor);
      if (v4)
        goto LABEL_4;
      __break(1u);
LABEL_8:
      v5 = (void *)objc_opt_self();
      v7 = objc_msgSend(v5, sel_labelColor);
      objc_msgSend(v0, sel_setTintColor_, v7);

      if (*((_BYTE *)v0 + OBJC_IVAR____TtC5CAFUI22CAFUIStepperViewButton_hasCellBackground) != 1)
      {
        v3 = objc_msgSend(v5, sel_secondarySystemFillColor);
LABEL_3:
        v4 = v3;
        goto LABEL_4;
      }
      v4 = objc_msgSend(v5, sel_tableCellPlainBackgroundColor);
      if (!v4)
      {
        __break(1u);
LABEL_11:
        v3 = objc_msgSend(v5, sel_secondarySystemFillColor, v4);
        goto LABEL_3;
      }
LABEL_4:
      v8 = v4;
      objc_msgSend(v0, sel_setBackgroundColor_);

      return;
    default:
      goto LABEL_8;
  }
}

id CAFUIStepperViewButton.__deallocating_deinit()
{
  return CAFUIStackView.__deallocating_deinit(type metadata accessor for CAFUIStepperViewButton);
}

void CAFUINumericInputView.init(configuration:)(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  char *v11;
  void *v12;
  id v13;
  double v14;
  double v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  double v23;
  id v24;
  id v25;
  id v26;
  id v27;
  void *v28;
  uint64_t v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  Class isa;
  void *v40;
  SEL *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  char *v46;
  id v47;
  void *v48;
  id v49;
  void *v50;
  id v51;
  id v52;
  id v53;
  void *v54;
  id v55;
  id v56;
  char *v57;
  id v58;
  id v59;
  void *v60;
  char *v61;
  id v62;
  void *v63;
  char **v64;
  id v65;
  void *v66;
  char *v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  id v72;
  id v73;
  void *v74;
  id v75;
  id v76;
  void *ObjCClassFromMetadata;
  id v78;
  id v79;
  id v80;
  void *v81;
  uint64_t v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  id v86;
  void *v87;
  id v88;
  id v89;
  id v90;
  void *v91;
  id v92;
  id v93;
  id v94;
  id v95;
  void *v96;
  uint64_t v97;
  id v98;
  id v99;
  void *v100;
  id v101;
  id v102;
  id v103;
  id v104;
  id v105;
  id v106;
  id v107;
  id v108;
  id v109;
  id v110;
  id v111;
  void *v112;
  char *v113;
  void *v114;
  uint64_t v115;
  id v116;
  char *v117;
  SEL *v118;
  uint64_t v119;
  id v120;
  void *v121;
  id v122;
  id v123;
  id v124;
  id v125;
  id v126;
  id v127;
  id v128;
  id v129;
  id v130;
  id v131;
  id v132;
  id v133;
  id v134;
  void *v135;
  void *v136;
  id v137;
  id v138;
  id v139;
  Class v140;
  SEL *v141;
  uint64_t v142;
  id v143;
  id v144;
  id v145;
  id v146;
  void *v147;
  id v148;
  id v149;
  id v150;
  Class v151;
  uint64_t v152;
  id v153;
  id v154;
  id v155;
  id v156;
  id v157;
  double v158;
  id v159;
  uint64_t v160;
  id v161;
  id v162;
  Class v163;
  uint64_t v164;
  id v165;
  id v166;
  id v167;
  id v168;
  Class v169;
  id v170;
  id v171;
  id v172;
  id v173;
  id v174;
  id v175;
  double v176;
  id v177;
  uint64_t v178;
  id v179;
  id v180;
  Class v181;
  uint64_t v182;
  void *v183;
  void *v184;
  void *v185;
  void *v186;
  uint64_t v187;
  char *v188;
  id v189;
  void *v190;
  void *v191;
  void *v192;
  id v193;
  void *v194;
  void *v195;
  id v196;
  id v197;
  id v198;
  void *v199;
  int v200;
  unint64_t v201;
  _BYTE v202[16];
  _BYTE v203[16];
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;

  v2 = v1;
  v1[OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_tracking] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_touchTimer] = 0;
  v4 = OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_barView;
  *(_QWORD *)&v1[OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_barView] = 0;
  v5 = OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_slider;
  *(_QWORD *)&v1[OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_slider] = 0;
  v6 = &v1[OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_config];
  v7 = *(_OWORD *)(a1 + 48);
  v8 = *(_OWORD *)(a1 + 80);
  v9 = *(_OWORD *)(a1 + 96);
  *((_OWORD *)v6 + 4) = *(_OWORD *)(a1 + 64);
  *((_OWORD *)v6 + 5) = v8;
  *((_OWORD *)v6 + 6) = v9;
  v10 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v6 = *(_OWORD *)a1;
  *((_OWORD *)v6 + 1) = v10;
  *((_OWORD *)v6 + 2) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v6 + 3) = v7;
  v200 = *(unsigned __int8 *)(a1 + 32);
  if (v200 != 1)
  {
    outlined init with take of String?(a1 + 72, (uint64_t)v203);
    outlined init with take of String?((uint64_t)v203, (uint64_t)&v204);
    v42 = v205;
    if (!v205)
      goto LABEL_11;
    v43 = v204;
    v44 = HIBYTE(v205) & 0xF;
    if ((v205 & 0x2000000000000000) == 0)
      v44 = v204 & 0xFFFFFFFFFFFFLL;
    if (v44)
    {
      v45 = objc_allocWithZone(MEMORY[0x24BEBD708]);
      v46 = v2;
      outlined retain of CAFUINumericConfiguration(a1);
      outlined retain of String?((uint64_t)v203);
      v47 = objc_msgSend(v45, sel_init);
      v48 = (void *)MEMORY[0x23B812F68](v43, v42);
      outlined release of String?((uint64_t)v203);
      objc_msgSend(v47, sel_setText_, v48);

      v49 = v47;
      v50 = (void *)MEMORY[0x23B812F68](0xD000000000000023, 0x800000023757BC60);
      objc_msgSend(v49, sel_setAccessibilityIdentifier_, v50);

      v41 = (SEL *)&unk_2508DF000;
      objc_msgSend(v49, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
      v51 = objc_msgSend((id)objc_opt_self(), sel_preferredFontDescriptorWithTextStyle_, *MEMORY[0x24BEBE1F0]);
      v52 = objc_msgSend((id)objc_opt_self(), sel_fontWithDescriptor_size_, v51, 0.0);

      objc_msgSend(v49, sel_setFont_, v52);
      objc_msgSend(v49, sel_setEnabled_, v6[88]);
      if ((*(_BYTE *)(a1 + 33) & 1) != 0)
      {
LABEL_9:
        if (v49)
        {
          v53 = v49;
          objc_msgSend(v53, sel_setFrame_, 39.0, 0.0, 120.0, 30.0);
          v54 = (void *)objc_opt_self();
          v55 = v53;
          v56 = objc_msgSend(v54, sel_secondarySystemFillColor);
          objc_msgSend(v55, sel_setBackgroundColor_, v56);

          objc_msgSend(v55, sel_setTextAlignment_, 1);
          v194 = 0;
          v192 = v49;
          v199 = v49;
          goto LABEL_19;
        }
        v59 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CAFUIProgressView()), sel_initWithFrame_, 39.0, 0.0, 120.0, 30.0);
        objc_msgSend(v59, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
        v60 = (void *)objc_opt_self();
        v61 = (char *)v59;
        v62 = objc_msgSend(v60, sel_secondarySystemFillColor);
        objc_msgSend(v61, sel_setBackgroundColor_, v62);

        v63 = *(void **)&v61[OBJC_IVAR____TtC5CAFUI17CAFUIProgressView_progressBarView];
        v64 = &selRef__carSystemFocusColor;
        if (!v6[88])
          v64 = &selRef_grayColor;
        v65 = objc_msgSend(v60, *v64);
        objc_msgSend(v63, sel_setBarColor_, v65);

        v66 = *(void **)&v2[v4];
        *(_QWORD *)&v2[v4] = v61;
        v199 = v61;
        v67 = v61;

LABEL_18:
        v194 = 0;
        v192 = 0;
        goto LABEL_19;
      }
    }
    else
    {
LABEL_11:
      v57 = v2;
      outlined retain of CAFUINumericConfiguration(a1);
      v49 = 0;
      v41 = (SEL *)&unk_2508DF000;
      if ((*(_BYTE *)(a1 + 33) & 1) != 0)
        goto LABEL_9;
    }
    if (v49)
    {
      v58 = v49;
      v199 = 0;
      v192 = v49;
      v194 = v49;
      goto LABEL_19;
    }
    v199 = 0;
    goto LABEL_18;
  }
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIAction);
  v11 = v1;
  outlined retain of CAFUINumericConfiguration(a1);
  v12 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD958]), sel_initWithFrame_primaryAction_, v12, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, closure #1 in CAFUINumericInputView.init(configuration:), 0);

  v14 = *(double *)(a1 + 8);
  *(float *)&v14 = v14;
  objc_msgSend(v13, sel_setMinimumValue_, v14);
  v15 = *(double *)(a1 + 16);
  *(float *)&v15 = v15;
  objc_msgSend(v13, sel_setMaximumValue_, v15);
  v16 = (void *)objc_opt_self();
  v17 = objc_msgSend(v16, sel__carSystemFocusColor);
  objc_msgSend(v13, sel_setMinimumTrackTintColor_, v17);

  v18 = objc_msgSend(v16, sel_tertiaryLabelColor);
  objc_msgSend(v13, sel_setMaximumTrackTintColor_, v18);

  v19 = v13;
  v20 = objc_msgSend(v16, sel_whiteColor);
  v21 = objc_msgSend(v20, sel_CGColor);

  v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD4B8]), sel_initWithCGColor_, v21);
  objc_msgSend(v19, sel_setTintColor_, v22);

  v23 = *(double *)a1;
  *(float *)&v23 = *(double *)a1;
  objc_msgSend(v19, sel_setValue_, v23);
  objc_msgSend(v19, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  v24 = v19;
  v25 = objc_msgSend(v16, sel_clearColor);
  objc_msgSend(v24, sel_setBackgroundColor_, v25);

  objc_msgSend(v24, sel_setEnabled_, v6[88]);
  v26 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBDB00]), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v26, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  v27 = objc_msgSend(v16, sel_tableCellPlainBackgroundColor);
  if (!v27)
  {
LABEL_67:
    __break(1u);
    return;
  }
  v28 = v27;
  objc_msgSend(v26, sel_setBackgroundColor_, v27);

  objc_msgSend(v26, sel_addSubview_, v24);
  v198 = (id)objc_opt_self();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_2375790A0;
  v30 = objc_msgSend(v24, sel_centerYAnchor);
  v31 = objc_msgSend(v26, sel_centerYAnchor);
  v32 = objc_msgSend(v30, sel_constraintEqualToAnchor_constant_, v31, -1.0);

  *(_QWORD *)(v29 + 32) = v32;
  v33 = objc_msgSend(v24, sel_leadingAnchor);
  v34 = objc_msgSend(v26, sel_leadingAnchor);
  v35 = objc_msgSend(v33, sel_constraintEqualToAnchor_constant_, v34, 13.0);

  *(_QWORD *)(v29 + 40) = v35;
  v36 = objc_msgSend(v24, sel_trailingAnchor);
  v199 = v26;
  v37 = objc_msgSend(v26, sel_trailingAnchor);
  v38 = objc_msgSend(v36, sel_constraintEqualToAnchor_constant_, v37, -13.0);

  *(_QWORD *)(v29 + 48) = v38;
  v206 = v29;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v198, sel_activateConstraints_, isa);

  v40 = *(void **)&v2[v5];
  *(_QWORD *)&v2[v5] = v24;

  v194 = 0;
  v192 = 0;
  v41 = (SEL *)&unk_2508DF000;
LABEL_19:
  v68 = objc_msgSend((id)objc_opt_self(), sel_configurationWithWeight_, 5);
  v69 = *(_QWORD *)(a1 + 48);
  if (!v69
    || (v70 = *(_QWORD *)(a1 + 40),
        swift_bridgeObjectRetain(),
        v71 = (void *)MEMORY[0x23B812F68](v70, v69),
        swift_bridgeObjectRelease(),
        v72 = CAFUIImageForSymbolNameWithConfiguration(v71, v68),
        v71,
        !v72))
  {
    v73 = v68;
    v74 = (void *)MEMORY[0x23B812F68](0x73756E696DLL, 0xE500000000000000);
    v72 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_withConfiguration_, v74, v73);

    if (!v72)
    {

      __break(1u);
LABEL_66:

      __break(1u);
      goto LABEL_67;
    }
  }
  v195 = v68;
  v75 = objc_msgSend((id)objc_opt_self(), sel_sharedApplication);
  v76 = objc_msgSend(v75, sel_userInterfaceLayoutDirection);

  type metadata accessor for CAFUIStepperViewButton();
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  v78 = objc_msgSend(ObjCClassFromMetadata, sel_buttonWithType_, 0);
  v191 = v72;
  v79 = objc_msgSend(v72, sel_imageWithRenderingMode_, 2);
  objc_msgSend(v78, sel_setImage_forState_, v79, 0);

  v80 = objc_msgSend(v78, sel_layer);
  v81 = v80;
  if (v76 == (id)1)
    v82 = 10;
  else
    v82 = 5;
  objc_msgSend(v80, sel_setMaskedCorners_, v82);

  v83 = objc_msgSend(v78, sel_layer);
  objc_msgSend(v83, sel_setCornerRadius_, 5.0);

  objc_msgSend(v78, v41[169], 0);
  *((_BYTE *)v78 + OBJC_IVAR____TtC5CAFUI22CAFUIStepperViewButton_hasCellBackground) = v200;
  *(_QWORD *)&v2[OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_decrementButton] = v78;
  outlined init with take of String?(a1 + 56, (uint64_t)v202);
  outlined init with take of String?((uint64_t)v202, (uint64_t)&v206);
  v84 = v207;
  if (v207)
  {
    v85 = v206;
    v86 = v78;
    outlined retain of String?((uint64_t)v202);
    v87 = (void *)MEMORY[0x23B812F68](v85, v84);
    outlined release of String?((uint64_t)v202);
    v88 = CAFUIImageForSymbolNameWithConfiguration(v87, v68);

    if (v88)
      goto LABEL_30;
  }
  else
  {
    v89 = v78;
  }
  v90 = v68;
  v91 = (void *)MEMORY[0x23B812F68](1937075312, 0xE400000000000000);
  v92 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_withConfiguration_, v91, v90);

  v88 = v92;
  if (!v92)
    goto LABEL_66;
LABEL_30:
  v93 = objc_msgSend(ObjCClassFromMetadata, sel_buttonWithType_, 0);
  v190 = v88;
  v94 = objc_msgSend(v88, sel_imageWithRenderingMode_, 2);
  objc_msgSend(v93, sel_setImage_forState_, v94, 0);

  v95 = objc_msgSend(v93, sel_layer);
  v96 = v95;
  if (v76 == (id)1)
    v97 = 5;
  else
    v97 = 10;
  objc_msgSend(v95, sel_setMaskedCorners_, v97);

  v98 = objc_msgSend(v93, sel_layer);
  objc_msgSend(v98, sel_setCornerRadius_, 5.0);

  objc_msgSend(v93, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  *((_BYTE *)v93 + OBJC_IVAR____TtC5CAFUI22CAFUIStepperViewButton_hasCellBackground) = v200;
  *(_QWORD *)&v2[OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_incrementButton] = v93;
  v99 = v93;

  v201 = MEMORY[0x24BEE4AF8];
  if (v194)
  {
    v100 = v199;
    v101 = v199;
    v102 = v194;
    v103 = v78;
    v104 = v99;
    v105 = v102;
    MEMORY[0x23B81301C]();
    if (*(_QWORD *)((v201 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v201 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  else
  {
    v100 = v199;
    v106 = v199;
    v107 = v78;
    v108 = v99;
  }
  v109 = v78;
  MEMORY[0x23B81301C]();
  if (*(_QWORD *)((v201 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v201 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  if (v100)
  {
    v110 = v100;
    MEMORY[0x23B81301C]();
    if (*(_QWORD *)((v201 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v201 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  v111 = v99;
  MEMORY[0x23B81301C]();
  if (*(_QWORD *)((v201 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v201 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  v112 = (void *)specialized CAFUIStackView.init(views:axis:minWidth:)(v201, 0, 0.0);
  swift_bridgeObjectRelease();
  v113 = v112;
  v114 = (void *)MEMORY[0x23B812F68](0xD000000000000015, 0x8000000237579130);
  objc_msgSend(v113, sel_setAccessibilityIdentifier_, v114);

  v115 = OBJC_IVAR____TtC5CAFUI14CAFUIStackView_stackView;
  objc_msgSend(*(id *)&v113[OBJC_IVAR____TtC5CAFUI14CAFUIStackView_stackView], sel_setSpacing_, 1.0);
  v116 = (id)objc_opt_self();
  v117 = v113;
  v187 = v115;
  v188 = v113;
  if ((v200 & 1) == 0)
    goto LABEL_49;
  v116 = objc_msgSend(v116, sel_tableBackgroundColor);
  v118 = (SEL *)&unk_2508DF000;
  if (!v116)
  {
    __break(1u);
LABEL_49:
    v116 = objc_msgSend(v116, sel_clearColor);
    v118 = (SEL *)&unk_2508DF000;
  }
  objc_msgSend(v117, v118[137], v116);

  v193 = (id)objc_opt_self();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v119 = swift_allocObject();
  *(_OWORD *)(v119 + 16) = xmmword_2375790B0;
  v120 = objc_msgSend(v109, sel_widthAnchor);
  v121 = v109;
  v122 = objc_msgSend(v120, sel_constraintEqualToConstant_, 50.0);

  *(_QWORD *)(v119 + 32) = v122;
  v123 = objc_msgSend(v111, sel_widthAnchor);
  v124 = objc_msgSend(v121, sel_widthAnchor);
  v125 = objc_msgSend(v123, sel_constraintEqualToAnchor_, v124);

  *(_QWORD *)(v119 + 40) = v125;
  v126 = objc_msgSend(v121, sel_topAnchor);
  v127 = objc_msgSend(v117, sel_topAnchor);
  v128 = objc_msgSend(v126, sel_constraintEqualToAnchor_, v127);

  *(_QWORD *)(v119 + 48) = v128;
  v129 = objc_msgSend(v111, sel_topAnchor);
  v130 = objc_msgSend(v117, sel_topAnchor);
  v131 = objc_msgSend(v129, sel_constraintEqualToAnchor_, v130);

  *(_QWORD *)(v119 + 56) = v131;
  v197 = v121;
  v132 = objc_msgSend(v121, sel_bottomAnchor);
  v133 = objc_msgSend(v117, sel_bottomAnchor);
  v134 = objc_msgSend(v132, sel_constraintEqualToAnchor_, v133);

  *(_QWORD *)(v119 + 64) = v134;
  v196 = v111;
  v135 = v111;
  v136 = v193;
  v137 = objc_msgSend(v135, sel_bottomAnchor);
  v138 = objc_msgSend(v117, sel_bottomAnchor);
  v139 = objc_msgSend(v137, sel_constraintEqualToAnchor_, v138);

  *(_QWORD *)(v119 + 72) = v139;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  v140 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v141 = (SEL *)&unk_2508DF000;
  objc_msgSend(v193, sel_activateConstraints_, v140);

  if (v199)
  {
    v142 = swift_allocObject();
    *(_OWORD *)(v142 + 16) = xmmword_2375790C0;
    v143 = v199;
    v144 = objc_msgSend(v143, sel_topAnchor);
    v145 = objc_msgSend(v117, sel_topAnchor);
    v146 = objc_msgSend(v144, sel_constraintEqualToAnchor_, v145);

    *(_QWORD *)(v142 + 32) = v146;
    v189 = v143;
    v147 = v143;
    v136 = v193;
    v148 = objc_msgSend(v147, sel_bottomAnchor);
    v149 = objc_msgSend(v117, sel_bottomAnchor);
    v150 = objc_msgSend(v148, sel_constraintEqualToAnchor_, v149);

    *(_QWORD *)(v142 + 40) = v150;
    specialized Array._endMutation()();
    v151 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v193, sel_activateConstraints_, v151);

    if (v200)
    {
      v152 = swift_allocObject();
      *(_OWORD *)(v152 + 16) = xmmword_2375790C0;
      v153 = objc_msgSend(v189, sel_leadingAnchor);
      v154 = objc_msgSend(v197, sel_trailingAnchor);
      objc_msgSend(*(id *)&v188[v187], sel_spacing);
      v155 = objc_msgSend(v153, sel_constraintEqualToAnchor_constant_, v154);

      *(_QWORD *)(v152 + 32) = v155;
      v136 = v193;
      v156 = objc_msgSend(v189, sel_trailingAnchor);
      v157 = objc_msgSend(v196, sel_leadingAnchor);
      v141 = (SEL *)&unk_2508DF000;
      objc_msgSend(*(id *)&v188[v187], sel_spacing);
      v159 = objc_msgSend(v156, sel_constraintEqualToAnchor_constant_, v157, -v158);

      *(_QWORD *)(v152 + 40) = v159;
    }
    else
    {
      v160 = swift_allocObject();
      *(_OWORD *)(v160 + 16) = xmmword_237579080;
      v161 = objc_msgSend(v189, sel_widthAnchor);
      v162 = objc_msgSend(v161, sel_constraintEqualToConstant_, 120.0);

      *(_QWORD *)(v160 + 32) = v162;
    }
    specialized Array._endMutation()();
    v163 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v136, v141[55], v163);

  }
  if (v194)
  {
    v164 = swift_allocObject();
    *(_OWORD *)(v164 + 16) = xmmword_237579080;
    v165 = v194;
    v166 = objc_msgSend(v165, sel_trailingAnchor);
    v167 = objc_msgSend(v197, sel_leadingAnchor);
    v168 = objc_msgSend(v166, sel_constraintEqualToAnchor_constant_, v167, -7.0);

    *(_QWORD *)(v164 + 32) = v168;
    specialized Array._endMutation()();
    v169 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v136, v141[55], v169);

  }
  if ((v200 & 1) == 0)
  {
    v170 = objc_msgSend(v117, sel_layer);
    objc_msgSend(v170, sel_setShadowOffset_, 0.0, 2.0);

    v171 = objc_msgSend(v117, sel_layer);
    v172 = objc_msgSend((id)objc_opt_self(), sel_blackColor);
    v173 = objc_msgSend(v172, sel_CGColor);

    objc_msgSend(v171, sel_setShadowColor_, v173);
    v174 = objc_msgSend(v117, sel_layer);
    objc_msgSend(v174, sel_setShadowRadius_, 2.0);

    v175 = objc_msgSend(v117, sel_layer);
    LODWORD(v176) = 1036831949;
    objc_msgSend(v175, sel_setShadowOpacity_, v176);

    v177 = objc_msgSend(v117, sel_layer);
    objc_msgSend(v177, sel_setMasksToBounds_, 0);

    objc_msgSend(v117, sel_setClipsToBounds_, 0);
    v178 = swift_allocObject();
    *(_OWORD *)(v178 + 16) = xmmword_237579080;
    v179 = objc_msgSend(v197, sel_heightAnchor);
    v180 = objc_msgSend(v179, sel_constraintEqualToConstant_, 32.0);

    *(_QWORD *)(v178 + 32) = v180;
    specialized Array._endMutation()();
    v181 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v193, v141[55], v181);

  }
  objc_msgSend(v197, sel_addTarget_action_forControlEvents_, v117, sel_buttonValueChangedWithSender_, 4096);
  objc_msgSend(v196, sel_addTarget_action_forControlEvents_, v117, sel_buttonValueChangedWithSender_, 4096);
  objc_msgSend(v197, sel_addTarget_action_forControlEvents_, v117, sel_buttonTouchDownWithSender_, 1);
  objc_msgSend(v196, sel_addTarget_action_forControlEvents_, v117, sel_buttonTouchDownWithSender_, 1);
  objc_msgSend(v197, sel_addTarget_action_forControlEvents_, v117, sel_buttonTouchCancelWithSender_, 416);
  objc_msgSend(v196, sel_addTarget_action_forControlEvents_, v117, sel_buttonTouchCancelWithSender_, 416);
  objc_msgSend(v197, sel_addTarget_action_forControlEvents_, v117, sel_buttonTouchUpWithSender_, 64);
  objc_msgSend(v196, sel_addTarget_action_forControlEvents_, v117, sel_buttonTouchUpWithSender_, 64);
  v182 = OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_slider;
  v183 = *(void **)&v117[OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_slider];
  if (v183)
  {
    objc_msgSend(v183, sel_addTarget_action_forControlEvents_, v117, sel_buttonTouchDownWithSender_, 1);
    v184 = *(void **)&v117[v182];
    if (v184)
    {
      objc_msgSend(v184, sel_addTarget_action_forControlEvents_, v117, sel_sliderChangedWithSender_, 4096);
      v185 = *(void **)&v117[v182];
      if (v185)
      {
        objc_msgSend(v185, sel_addTarget_action_forControlEvents_, v117, sel_buttonTouchUpWithSender_, 64);
        v186 = *(void **)&v117[v182];
        if (v186)
          objc_msgSend(v186, sel_addTarget_action_forControlEvents_, v117, sel_buttonTouchCancelWithSender_, 416);
      }
    }
  }
  CAFUINumericInputView.updateButtons()();
  outlined release of CAFUINumericConfiguration(a1);

}

id CAFUINumericInputView.updateButtons()()
{
  uint64_t v0;
  uint64_t v1;
  os_log_type_t v2;
  void *v3;
  uint64_t v4;
  _BOOL8 v5;
  _BOOL8 v6;
  uint64_t v7;
  double v8;
  float v9;
  float v10;
  id result;
  double v12;

  v1 = v0;
  v2 = static os_log_type_t.info.getter();
  specialized static CAFUILogger.log(_:message:function:file:line:)(v2, 0xD000000000000018, 0x800000023757BC40, 0x7542657461647075, 0xEF2928736E6F7474);
  v3 = *(void **)(v0 + OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_decrementButton);
  v4 = v1 + OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_config;
  v5 = *(_BYTE *)(v1 + OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_config + 88) == 1
    && *(double *)(v4 + 8) < *(double *)v4;
  objc_msgSend(v3, sel_setEnabled_, v5);
  CAFUIStepperViewButton.updateColors()();
  v6 = *(_BYTE *)(v4 + 88) == 1 && *(double *)v4 < *(double *)(v4 + 16);
  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_incrementButton), sel_setEnabled_, v6);
  CAFUIStepperViewButton.updateColors()();
  v7 = *(_QWORD *)(v1 + OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_barView);
  if (v7)
  {
    v8 = *(double *)(v4 + 8);
    v9 = *(double *)v4 - v8;
    *(float *)&v8 = *(double *)(v4 + 16) - v8;
    v10 = v9 / *(float *)&v8;
    *(float *)(v7 + OBJC_IVAR____TtC5CAFUI17CAFUIProgressView_progress) = v10;
    objc_msgSend(*(id *)(v7 + OBJC_IVAR____TtC5CAFUI17CAFUIProgressView_progressBarView), sel_setProgress_, v10);
  }
  result = *(id *)(v1 + OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_slider);
  if (result)
  {
    v12 = *(double *)v4;
    *(float *)&v12 = *(double *)v4;
    return objc_msgSend(result, sel_setValue_, v12);
  }
  return result;
}

Swift::Void __swiftcall CAFUINumericInputView.buttonTouchDown(sender:)(UIControl *sender)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  UIControl *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  UIControl *v12;
  id v13;
  void *v14;
  UIControl *v15;
  _QWORD aBlock[6];

  v2 = v1;
  type metadata accessor for CAFUIStepperViewButton();
  v4 = swift_dynamicCastClass();
  if (v4)
  {
    v5 = v4;
    v6 = OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_touchTimer;
    v7 = *(void **)(v2 + OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_touchTimer);
    if (v7)
    {
      v15 = sender;
      if ((objc_msgSend(v7, sel_isValid) & 1) != 0)
      {

        return;
      }
    }
    else
    {
      v8 = sender;
    }
    v9 = (void *)objc_opt_self();
    v10 = swift_allocObject();
    *(_QWORD *)(v10 + 16) = v5;
    aBlock[4] = partial apply for closure #1 in CAFUINumericInputView.buttonTouchDown(sender:);
    aBlock[5] = v10;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSTimer) -> ();
    aBlock[3] = &block_descriptor_7;
    v11 = _Block_copy(aBlock);
    v12 = sender;
    swift_release();
    v13 = objc_msgSend(v9, sel_scheduledTimerWithTimeInterval_repeats_block_, 1, v11, 0.1);
    _Block_release(v11);
    v14 = *(void **)(v2 + v6);
    *(_QWORD *)(v2 + v6) = v13;

    CAFUIStepperViewButton.updateColors()();
  }
  *(_BYTE *)(v2 + OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_tracking) = 1;
}

void thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSTimer) -> ()(uint64_t a1, void *a2)
{
  void (*v3)(void);
  id v4;

  v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3();
  swift_release();

}

Swift::Void __swiftcall CAFUINumericInputView.buttonTouchCancel(sender:)(UIControl *sender)
{
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  UIControl *v21;
  void *v22;
  UIControl *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  UIControl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD aBlock[6];

  v2 = v1;
  v27 = sender;
  v3 = type metadata accessor for DispatchWorkItemFlags();
  v30 = *(_QWORD *)(v3 - 8);
  ((void (*)(void))MEMORY[0x24BDAC7A8])();
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS();
  v28 = *(_QWORD *)(v6 - 8);
  v29 = v6;
  ((void (*)(void))MEMORY[0x24BDAC7A8])();
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchTime();
  v10 = *(_QWORD *)(v9 - 8);
  v26 = v9;
  v11 = ((uint64_t (*)(void))MEMORY[0x24BDAC7A8])();
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v25 - v14;
  v16 = OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_touchTimer;
  objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_touchTimer], sel_invalidate);
  v17 = *(void **)&v2[v16];
  *(_QWORD *)&v2[v16] = 0;

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  v18 = (void *)static OS_dispatch_queue.main.getter();
  static DispatchTime.now()();
  MEMORY[0x23B812EB4](v13, 0.1);
  v19 = *(void (**)(char *, uint64_t))(v10 + 8);
  v19(v13, v9);
  v20 = swift_allocObject();
  v21 = v27;
  *(_QWORD *)(v20 + 16) = v27;
  *(_QWORD *)(v20 + 24) = v2;
  aBlock[4] = partial apply for closure #1 in CAFUINumericInputView.buttonTouchCancel(sender:);
  aBlock[5] = v20;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor;
  v22 = _Block_copy(aBlock);
  v23 = v21;
  v24 = v2;
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x23B81316C](v15, v8, v5, v22);
  _Block_release(v22);

  (*(void (**)(char *, uint64_t))(v30 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v8, v29);
  v19(v15, v26);
}

uint64_t closure #1 in CAFUINumericInputView.buttonTouchCancel(sender:)(void *a1, uint64_t a2)
{
  id v4;
  double *v5;
  void (*v6)(uint64_t, double);
  double v7;
  uint64_t v8;

  type metadata accessor for CAFUIStepperViewButton();
  if (swift_dynamicCastClass())
  {
    v4 = a1;
    CAFUIStepperViewButton.updateColors()();

  }
  *(_BYTE *)(a2 + OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_tracking) = 0;
  v5 = (double *)(a2 + OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_config);
  v6 = *(void (**)(uint64_t, double))(a2 + OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_config + 96);
  v7 = *v5;
  v8 = swift_retain();
  v6(v8, v7);
  return swift_release();
}

uint64_t CAFUINumericInputView.buttonValueChanged(sender:)()
{
  uint64_t v0;
  uint64_t result;
  double *v2;
  double v3;
  double v4;
  double v5;
  double v6;

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  result = static NSObject.== infix(_:_:)();
  v2 = (double *)(v0 + OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_config);
  v3 = *(double *)(v0 + OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_config);
  if ((result & 1) != 0)
  {
    v4 = v2[1];
    if (v4 >= v3)
      return result;
    *(_BYTE *)(v0 + OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_tracking) = 1;
    v5 = v3 - v2[3];
    if (v4 > v5)
      v5 = v4;
  }
  else
  {
    v6 = v2[2];
    if (v3 >= v6)
      return result;
    *(_BYTE *)(v0 + OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_tracking) = 1;
    v5 = v3 + v2[3];
    if (v5 >= v6)
      v5 = v6;
  }
  *v2 = v5;
  return (uint64_t)CAFUINumericInputView.updateButtons()();
}

Swift::Void __swiftcall CAFUINumericInputView.sliderChanged(sender:)(UISlider *sender)
{
  uint64_t v1;
  uint64_t v2;
  float v3;
  float v4;
  double v5;
  void (*v6)(uint64_t, double);
  uint64_t v7;

  -[UISlider value](sender, sel_value);
  v2 = v1 + OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_config;
  v3 = *(double *)(v1 + OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_config + 24);
  v5 = (float)(v4 - fmodf(v4, v3));
  *(double *)v2 = v5;
  v6 = *(void (**)(uint64_t, double))(v2 + 96);
  v7 = swift_retain();
  v6(v7, v5);
  swift_release();
}

void CAFUINumericInputView.__allocating_init(views:axis:minWidth:)()
{
  CAFUISwitchView.__allocating_init(views:axis:minWidth:)();
}

void CAFUINumericInputView.__ivar_destroyer()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

id CAFUINumericInputView.__deallocating_deinit()
{
  return CAFUIStackView.__deallocating_deinit(type metadata accessor for CAFUINumericInputView);
}

void one-time initialization function for targetHeight()
{
  static CAFUISegmentedControl.targetHeight = 0x4040000000000000;
}

Swift::Void __swiftcall CAFUISegmentedControl.layoutSubviews()()
{
  void *v0;
  double v1;
  double v2;
  objc_super v3;

  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for CAFUISegmentedControl();
  objc_msgSendSuper2(&v3, sel_layoutSubviews);
  objc_msgSend(v0, sel_frame);
  v2 = v1;
  if (one-time initialization token for targetHeight != -1)
    swift_once();
  if (v2 != *(double *)&static CAFUISegmentedControl.targetHeight)
  {
    objc_msgSend(v0, sel_frame);
    objc_msgSend(v0, sel_setFrame_, 0.0, 0.0);
  }
}

id CAFUIStackView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  objc_class *v4;

  return objc_msgSend(objc_allocWithZone(v4), sel_initWithFrame_, a1, a2, a3, a4);
}

id CAFUISegmentedControl.init(frame:)(double a1, double a2, double a3, double a4)
{
  void *v4;
  objc_super v10;

  v10.receiver = v4;
  v10.super_class = (Class)type metadata accessor for CAFUISegmentedControl();
  return objc_msgSendSuper2(&v10, sel_initWithFrame_, a1, a2, a3, a4);
}

id CAFUISegmentedControl.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

id CAFUISegmentedControl.init(coder:)(void *a1)
{
  void *v1;
  id v3;
  objc_super v5;

  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for CAFUISegmentedControl();
  v3 = objc_msgSendSuper2(&v5, sel_initWithCoder_, a1);

  return v3;
}

id CAFUISegmentedControl.__allocating_init(items:)(uint64_t a1)
{
  objc_class *v1;
  NSArray v2;
  id v3;

  if (a1)
  {
    v2.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v2.super.isa = 0;
  }
  v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithItems_, v2.super.isa);

  return v3;
}

id CAFUISegmentedControl.init(items:)(uint64_t a1)
{
  void *v1;
  NSArray v2;
  id v3;
  objc_super v5;

  if (a1)
  {
    v2.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v2.super.isa = 0;
  }
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for CAFUISegmentedControl();
  v3 = objc_msgSendSuper2(&v5, sel_initWithItems_, v2.super.isa);

  return v3;
}

id CAFUISegmentedControl.__deallocating_deinit()
{
  return CAFUIStackView.__deallocating_deinit(type metadata accessor for CAFUISegmentedControl);
}

id CAFUIStackView.__deallocating_deinit(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t variable initialization expression of CAFUIAutomakerSettingCell.representable()
{
  return 0;
}

uint64_t variable initialization expression of CAFUISoundSettingsViewController.audioSettings()
{
  return 0;
}

uint64_t variable initialization expression of CAFUITileBaseCell.isParentCell()
{
  return 0;
}

uint64_t variable initialization expression of CAFUITileBaseCell.automakerSettingConfiguration@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CAFUITileBaseCell.automakerSettingConfiguration(type metadata accessor for CAFUIAutomakerSettingConfiguration, a1);
}

uint64_t variable initialization expression of CAFUIAutomakerSettingObserver.delegate()
{
  return 0;
}

id variable initialization expression of CAFUIAccountManager.accountStore()
{
  return objc_msgSend((id)objc_opt_self(), sel_defaultStore);
}

double variable initialization expression of CAFUIImageRepresentableItem.userInfo@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t variable initialization expression of CAFUIImageRepresentableItem.accentColor()
{
  return 0;
}

uint64_t variable initialization expression of CAFUIBadgeView.$__lazy_storage_$_label()
{
  return 0;
}

uint64_t variable initialization expression of CAFUICabinView.overlayView()
{
  return 0;
}

uint64_t variable initialization expression of CAFUIBalanceFadeView.hasButtons()
{
  return 0;
}

uint64_t variable initialization expression of CAFUIListItemCell.item()
{
  return 0;
}

uint64_t variable initialization expression of CAFUICollectionViewController.emptyView()
{
  return 0;
}

uint64_t variable initialization expression of CAFUICollectionViewController.itemSize()
{
  return 0;
}

uint64_t variable initialization expression of CAFUICollectionViewController.collectionViewSize()
{
  return 0;
}

uint64_t variable initialization expression of CAFUITileDataSource.collectionView()
{
  return 0;
}

uint64_t variable initialization expression of CAFUIDataListItem.symbol()
{
  return 0;
}

uint64_t variable initialization expression of CAFUIDataListItem.text()
{
  return 0;
}

uint64_t variable initialization expression of CAFUIDataListItem.secondaryText()
{
  return 0;
}

uint64_t variable initialization expression of CAFUIDataListItem.badgeText()
{
  return 0;
}

uint64_t variable initialization expression of CAFUIDataListItem.limitedUIImage()
{
  return 0;
}

uint64_t variable initialization expression of CAFUITileViewController.presentedPTIdentifier()
{
  return 0;
}

uint64_t variable initialization expression of CAFUITileViewController.focusLockIndexPath@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CAFUITileBaseCell.automakerSettingConfiguration((uint64_t (*)(_QWORD))MEMORY[0x24BDCF678], a1);
}

uint64_t variable initialization expression of CAFUITileViewController.sessionConfiguration()
{
  return 0;
}

uint64_t variable initialization expression of CAFUITileViewController.limiting()
{
  return 0;
}

unint64_t variable initialization expression of CAFUISoundSettingsViewController.cancellables()
{
  if ((MEMORY[0x24BEE4AF8] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
    return specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x24BEE4AF8]);
  else
    return MEMORY[0x24BEE4B08];
}

uint64_t variable initialization expression of CAFUITileViewController.punchThroughState()
{
  return 0;
}

uint64_t variable initialization expression of CAFUIDevicePickerViewController.delegate()
{
  return 0;
}

uint64_t variable initialization expression of CAFUIDevicePickerViewController.$__lazy_storage_$_cellSize()
{
  return 0;
}

uint64_t variable initialization expression of CAFUIDevicePickerViewController.$__lazy_storage_$_rows()
{
  return 0;
}

uint64_t variable initialization expression of CAFUIDevicePickerViewController.$__lazy_storage_$_columns()
{
  return 0;
}

uint64_t variable initialization expression of CAFUIDevicePickerViewController.$__lazy_storage_$_layoutStyle()
{
  return 4;
}

uint64_t variable initialization expression of CAFUIDevicePickerViewController.$__lazy_storage_$_isPortraitLayout()
{
  return 2;
}

uint64_t variable initialization expression of CAFUIDevicePickerViewController.limitedUIView()
{
  return 0;
}

uint64_t variable initialization expression of CAFUIDevicePickerViewController.punchThroughState()
{
  return 0;
}

uint64_t variable initialization expression of CAFUIDevicePickerViewController.ptButton()
{
  return 0;
}

uint64_t variable initialization expression of CAFUIDevicePickerViewController.pageControl()
{
  return 0;
}

uint64_t variable initialization expression of CAFUIDevicePickerViewController.pageControlHeightConstraint()
{
  return 0;
}

uint64_t variable initialization expression of CAFUIDevicePickerViewController.carSession()
{
  return 0;
}

uint64_t variable initialization expression of CAFUIDevicePickerViewController.spinnerTimer()
{
  return 0;
}

uint64_t variable initialization expression of CAFUIDevicePickerViewController.spinningCellIndexPath@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CAFUITileBaseCell.automakerSettingConfiguration((uint64_t (*)(_QWORD))MEMORY[0x24BDCF678], a1);
}

uint64_t variable initialization expression of CAFUITileBaseCell.automakerSettingConfiguration@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = a1(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(a2, 1, 1, v3);
}

uint64_t variable initialization expression of CAFUIProminentSettingCell.representable()
{
  return 0;
}

id variable initialization expression of CAFUIProminentSettingCell.imageColor()
{
  return objc_msgSend((id)objc_opt_self(), sel_systemGrayColor);
}

void protocol witness for SetAlgebra.init() in conformance UIControlEvents(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *protocol witness for SetAlgebra.intersection(_:) in conformance UIControlEvents@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance UIControlEvents(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *protocol witness for SetAlgebra.formUnion(_:) in conformance UIControlEvents(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.formIntersection(_:) in conformance UIControlEvents(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance UIPageViewControllerOptionsKey(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance UIPageViewControllerOptionsKey(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF9E0]);
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance UIPageViewControllerOptionsKey(uint64_t a1, id *a2)
{
  uint64_t result;

  result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance UIPageViewControllerOptionsKey(uint64_t a1, id *a2)
{
  char v3;

  v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance UIPageViewControllerOptionsKey@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = MEMORY[0x23B812F68](v2);
  result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance UIPageViewControllerOptionsKey(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance UIPageViewControllerOptionsKey(a1, a2, MEMORY[0x24BEE0CD8]);
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance UIPageViewControllerOptionsKey(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance UIPageViewControllerOptionsKey()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance UIPageViewControllerOptionsKey()
{
  Swift::Int v0;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CPLimitableUserInterface(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CAFImageColor(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance UIUserInterfaceStyle(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

unsigned __int8 *protocol witness for RawRepresentable.init(rawValue:) in conformance CAFDeviceAction@<X0>(unsigned __int8 *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

_QWORD *protocol witness for OptionSet.init(rawValue:) in conformance UIControlEvents@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance UIPageViewControllerOptionsKey()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3)
    v5 = 1;
  else
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance CARLimitableUserInterfaces(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance CARLimitableUserInterfaces(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance NSNotificationName@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CAFImageColor(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance UIPageViewControllerOptionsKey@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = MEMORY[0x23B812F68](*a1, a1[1]);
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance UIPageViewControllerOptionsKey()
{
  lazy protocol witness table accessor for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey(&lazy protocol witness table cache variable for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey, (uint64_t (*)(uint64_t))type metadata accessor for UIPageViewControllerOptionsKey, (uint64_t)&protocol conformance descriptor for UIPageViewControllerOptionsKey);
  lazy protocol witness table accessor for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey(&lazy protocol witness table cache variable for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey, (uint64_t (*)(uint64_t))type metadata accessor for UIPageViewControllerOptionsKey, (uint64_t)&protocol conformance descriptor for UIPageViewControllerOptionsKey);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t specialized CAFUIStackView.init(views:axis:minWidth:)(unint64_t a1, uint64_t a2, double a3)
{
  char *v3;
  id v6;
  char *v7;
  id v8;
  uint64_t v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  Class isa;
  uint64_t v27;
  uint64_t result;
  uint64_t i;
  id v30;
  void *v31;
  objc_super v32;

  *(double *)&v3[OBJC_IVAR____TtC5CAFUI14CAFUIStackView_minWidth] = a3;
  v6 = objc_allocWithZone(MEMORY[0x24BEBD978]);
  v7 = v3;
  v8 = objc_msgSend(v6, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v8, sel_setAxis_, a2);
  if (a2)
    v9 = 0;
  else
    v9 = 3;
  objc_msgSend(v8, sel_setAlignment_, v9);
  objc_msgSend(v8, sel_setDistribution_, 0);
  objc_msgSend(v8, sel_setSpacing_, 10.0);
  objc_msgSend(v8, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  *(_QWORD *)&v7[OBJC_IVAR____TtC5CAFUI14CAFUIStackView_stackView] = v8;
  v10 = v8;

  v32.receiver = v7;
  v32.super_class = (Class)type metadata accessor for CAFUIStackView();
  v11 = objc_msgSendSuper2(&v32, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v11, sel_addSubview_, v10);
  v12 = (void *)objc_opt_self();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_237579090;
  v14 = objc_msgSend(v10, sel_leadingAnchor);
  v15 = objc_msgSend(v11, sel_leadingAnchor);
  v16 = objc_msgSend(v14, sel_constraintEqualToAnchor_, v15);

  *(_QWORD *)(v13 + 32) = v16;
  v17 = objc_msgSend(v10, sel_trailingAnchor);
  v18 = objc_msgSend(v11, sel_trailingAnchor);
  v19 = objc_msgSend(v17, sel_constraintEqualToAnchor_, v18);

  *(_QWORD *)(v13 + 40) = v19;
  v20 = objc_msgSend(v10, sel_topAnchor);
  v21 = objc_msgSend(v11, sel_topAnchor);
  v22 = objc_msgSend(v20, sel_constraintEqualToAnchor_, v21);

  *(_QWORD *)(v13 + 48) = v22;
  v23 = objc_msgSend(v10, sel_bottomAnchor);
  v24 = objc_msgSend(v11, sel_bottomAnchor);
  v25 = objc_msgSend(v23, sel_constraintEqualToAnchor_, v24);

  *(_QWORD *)(v13 + 56) = v25;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v12, sel_activateConstraints_, isa);

  if (!(a1 >> 62))
  {
    v27 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v27)
      goto LABEL_6;
LABEL_13:

    swift_bridgeObjectRelease();
    return (uint64_t)v11;
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v27 = result;
  if (!result)
    goto LABEL_13;
LABEL_6:
  if (v27 >= 1)
  {
    for (i = 0; i != v27; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v30 = (id)MEMORY[0x23B813418](i, a1);
      else
        v30 = *(id *)(a1 + 8 * i + 32);
      v31 = v30;
      objc_msgSend(v10, sel_addArrangedSubview_, v30);

    }
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for CAFUIStackView()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for CAFUISegmentedControl()
{
  return objc_opt_self();
}

unint64_t specialized Set.init(_nonEmptyArrayLiteral:)(unint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t (*v8)(uint64_t);
  BOOL v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;

  v1 = result;
  v2 = result >> 62;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (v5)
    {
LABEL_3:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AnyCancellable>);
      result = static _SetStorage.allocate(capacity:)();
      v3 = result;
      v19 = v1;
      if (!v2)
        goto LABEL_4;
LABEL_8:
      swift_bridgeObjectRetain();
      v4 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (!v4)
        return v3;
      goto LABEL_9;
    }
  }
  else if (*(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  v3 = MEMORY[0x24BEE4B08];
  v19 = v1;
  if (v2)
    goto LABEL_8;
LABEL_4:
  v4 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v4)
    return v3;
LABEL_9:
  v6 = 0;
  v7 = v3 + 56;
  v8 = (uint64_t (*)(uint64_t))MEMORY[0x24BDB9B60];
  v18 = v4;
  while ((v19 & 0xC000000000000001) != 0)
  {
    result = MEMORY[0x23B813418](v6, v19);
    v9 = __OFADD__(v6++, 1);
    if (v9)
      goto LABEL_26;
LABEL_18:
    v20 = result;
    type metadata accessor for AnyCancellable();
    lazy protocol witness table accessor for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, v8, MEMORY[0x24BDB9B70]);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v10 = -1 << *(_BYTE *)(v3 + 32);
    v11 = result & ~v10;
    v12 = v11 >> 6;
    v13 = *(_QWORD *)(v7 + 8 * (v11 >> 6));
    v14 = 1 << v11;
    if (((1 << v11) & v13) != 0)
    {
      v15 = ~v10;
      lazy protocol witness table accessor for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, v8, MEMORY[0x24BDB9B78]);
      do
      {
        result = dispatch thunk of static Equatable.== infix(_:_:)();
        if ((result & 1) != 0)
        {
          result = swift_release();
          v4 = v18;
          goto LABEL_11;
        }
        v11 = (v11 + 1) & v15;
        v12 = v11 >> 6;
        v13 = *(_QWORD *)(v7 + 8 * (v11 >> 6));
        v14 = 1 << v11;
      }
      while ((v13 & (1 << v11)) != 0);
      v4 = v18;
    }
    *(_QWORD *)(v7 + 8 * v12) = v14 | v13;
    *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v11) = v20;
    v16 = *(_QWORD *)(v3 + 16);
    v9 = __OFADD__(v16, 1);
    v17 = v16 + 1;
    if (v9)
      goto LABEL_27;
    *(_QWORD *)(v3 + 16) = v17;
LABEL_11:
    v8 = (uint64_t (*)(uint64_t))MEMORY[0x24BDB9B60];
    if (v6 == v4)
      return v3;
  }
  if (v6 >= *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_28;
  result = swift_retain();
  v9 = __OFADD__(v6++, 1);
  if (!v9)
    goto LABEL_18;
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for CAFUISwitchView()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for CAFUIProgressView()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for CAFUIStepperViewButton()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for CAFUINumericInputView()
{
  return objc_opt_self();
}

void type metadata accessor for CAFDeviceAction(uint64_t a1)
{
  type metadata accessor for CAFDeviceAction(a1, &lazy cache variable for type metadata for CAFDeviceAction);
}

uint64_t initializeBufferWithCopyOfBuffer for CAFUINumericConfiguration(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for CAFUINumericConfiguration()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for CAFUINumericConfiguration(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v5;
  v6 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v6;
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v7 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for CAFUINumericConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v4 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v4;
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy112_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t assignWithTake for CAFUINumericConfiguration(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v7;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for CAFUINumericConfiguration(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 112))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 96);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CAFUINumericConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 96) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 112) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CAFUINumericConfiguration()
{
  return &type metadata for CAFUINumericConfiguration;
}

void type metadata accessor for CAFSettingsCategory(uint64_t a1)
{
  type metadata accessor for CAFDeviceAction(a1, &lazy cache variable for type metadata for CAFSettingsCategory);
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for CGSize(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CGSize(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
  type metadata accessor for CAFDeviceAction(a1, &lazy cache variable for type metadata for CGSize);
}

void type metadata accessor for UIPageViewControllerOptionsKey(uint64_t a1)
{
  type metadata accessor for CAFDeviceAction(a1, &lazy cache variable for type metadata for UIPageViewControllerOptionsKey);
}

uint64_t base witness table accessor for RawRepresentable in UIPageViewControllerOptionsKey()
{
  return lazy protocol witness table accessor for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey(&lazy protocol witness table cache variable for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey, (uint64_t (*)(uint64_t))type metadata accessor for UIPageViewControllerOptionsKey, (uint64_t)&protocol conformance descriptor for UIPageViewControllerOptionsKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in UIPageViewControllerOptionsKey()
{
  return lazy protocol witness table accessor for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey(&lazy protocol witness table cache variable for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey, (uint64_t (*)(uint64_t))type metadata accessor for UIPageViewControllerOptionsKey, (uint64_t)&protocol conformance descriptor for UIPageViewControllerOptionsKey);
}

uint64_t lazy protocol witness table accessor for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x23B813BE0](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in UIPageViewControllerOptionsKey()
{
  return lazy protocol witness table accessor for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey(&lazy protocol witness table cache variable for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey, (uint64_t (*)(uint64_t))type metadata accessor for UIPageViewControllerOptionsKey, (uint64_t)&protocol conformance descriptor for UIPageViewControllerOptionsKey);
}

uint64_t sub_23750FDC0()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CAFUINumericInputView.buttonTouchCancel(sender:)()
{
  uint64_t v0;

  return closure #1 in CAFUINumericInputView.buttonTouchCancel(sender:)(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x23B813BC8]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A];
  if (!lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    result = MEMORY[0x23B813BE0](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x23B813BD4](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_23750FEDC()
{
  uint64_t v0;

  return swift_deallocObject();
}

id partial apply for closure #1 in CAFUINumericInputView.buttonTouchDown(sender:)()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), sel_sendActionsForControlEvents_, 4096);
}

uint64_t outlined init with take of String?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined retain of CAFUINumericConfiguration(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of CAFUINumericConfiguration(uint64_t a1)
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined retain of String?(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of String?(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t type metadata accessor for NSObject(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for CGRect(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CGRect(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
  type metadata accessor for CAFDeviceAction(a1, &lazy cache variable for type metadata for CGRect);
}

void type metadata accessor for CGPoint(uint64_t a1)
{
  type metadata accessor for CAFDeviceAction(a1, (unint64_t *)&lazy cache variable for type metadata for CGPoint);
}

void type metadata accessor for CAFDeviceAction(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

void CAFUIDevicePickerViewController.ptButton.setter()
{
  swift_deletedMethodError();
  __break(1u);
}

void __swiftcall UIButton.init(alertButtonTitle:)(UIButton *__return_ptr retstr, Swift::String alertButtonTitle)
{
  void *object;
  uint64_t countAndFlagsBits;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  id v19;
  Class isa;

  object = alertButtonTitle._object;
  countAndFlagsBits = alertButtonTitle._countAndFlagsBits;
  v4 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v5 = (void *)MEMORY[0x23B812F68](countAndFlagsBits, object);
  swift_bridgeObjectRelease();
  v6 = CAFUILocalizedStringForKey(v5);

  if (!v6)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v6 = (id)MEMORY[0x23B812F68](v7);
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v4, sel_setTitle_forState_, v6, 0);

  objc_msgSend(v4, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  v8 = (void *)objc_opt_self();
  v9 = v4;
  v10 = objc_msgSend(v8, sel_tertiarySystemFillColor);
  objc_msgSend(v9, sel_setBackgroundColor_, v10);

  v11 = objc_msgSend(v8, sel__carSystemFocusColor);
  objc_msgSend(v9, sel_setTitleColor_forState_, v11, 0);

  v12 = objc_msgSend(v8, sel__carSystemFocusColor);
  v13 = objc_msgSend(v12, sel_colorWithAlphaComponent_, 0.24);

  objc_msgSend(v9, sel_setTitleColor_forState_, v13, 1);
  objc_msgSend(v9, sel__setCornerRadius_, 8.0);
  v14 = (void *)objc_opt_self();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_2375790C0;
  v16 = objc_msgSend(v9, sel_widthAnchor);
  if (one-time initialization token for size != -1)
    swift_once();
  v17 = objc_msgSend(v16, sel_constraintEqualToConstant_, *(double *)&static UIButton.Constants.size);

  *(_QWORD *)(v15 + 32) = v17;
  v18 = objc_msgSend(v9, sel_heightAnchor);
  v19 = objc_retainAutoreleasedReturnValue(objc_msgSend(v18, sel_constraintEqualToConstant_, *((double *)&static UIButton.Constants.size
                                                                                             + 1)));

  *(_QWORD *)(v15 + 40) = v19;
  specialized Array._endMutation()();
  type metadata accessor for NSLayoutConstraint();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v14, sel_activateConstraints_, isa);

}

id CAFUILocalizedStringForKey(void *a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = a1;
  CAFUIFrameworkBundle();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "localizedStringForKey:value:table:", v1, &stru_2508D53F0, CFSTR("Localizable"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

void *UIButton.Constants.cornerRadius.unsafeMutableAddressor()
{
  return &static UIButton.Constants.cornerRadius;
}

double static UIButton.Constants.cornerRadius.getter()
{
  return 8.0;
}

double one-time initialization function for size()
{
  double result;

  result = 241.0;
  static UIButton.Constants.size = xmmword_237579450;
  return result;
}

unint64_t type metadata accessor for NSLayoutConstraint()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSLayoutConstraint;
  if (!lazy cache variable for type metadata for NSLayoutConstraint)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  }
  return result;
}

ValueMetadata *type metadata accessor for UIButton.Constants()
{
  return &type metadata for UIButton.Constants;
}

id CAFPairedDevice.decoratorImage.getter()
{
  void *v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  Class isa;
  id v8;
  id v9;
  id v10;
  void *v11;
  id v12;

  v1 = objc_msgSend((id)objc_opt_self(), sel_preferredFontForTextStyle_, *MEMORY[0x24BEBE240]);
  v2 = (void *)objc_opt_self();
  v3 = objc_msgSend(v2, sel_configurationWithFont_scale_, v1, 2);

  v4 = v3;
  if (objc_msgSend(v0, sel_state) == 2)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_2375790C0;
    v6 = (void *)objc_opt_self();
    *(_QWORD *)(v5 + 32) = objc_msgSend(v6, sel_systemWhiteColor);
    *(_QWORD *)(v5 + 40) = objc_msgSend(v6, sel_systemGreenColor);
    specialized Array._endMutation()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v8 = objc_msgSend(v2, sel_configurationWithPaletteColors_, isa);

    v9 = objc_msgSend(v4, sel_configurationByApplyingConfiguration_, v8);
    v10 = v9;
    v11 = (void *)MEMORY[0x23B812F68](0xD000000000000015, 0x800000023757BD50);
    v12 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_withConfiguration_, v11, v10);

  }
  else
  {

    return 0;
  }
  return v12;
}

uint64_t CAFPairedDevicesInformation.symbolName.getter()
{
  return 0;
}

uint64_t CAFPairedDevicesInformation.prominenceInfo.getter()
{
  return 0;
}

uint64_t CAFPairedDevicesInformation.allowsMultipleSelection.getter()
{
  return 1;
}

uint64_t CAFPairedDevicesInformation.detailLabel.getter()
{
  void *v0;
  id v1;
  id v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = objc_msgSend(v0, sel_pairedDeviceList);
  v2 = objc_msgSend(v1, sel_pairedDevices);

  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CAFPairedDevice);
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v4 == 1)
  {
    v5 = (void *)MEMORY[0x23B812F68](0xD000000000000018, 0x800000023757BCB0);
    v6 = CAFUILocalizedStringForKey(v5);
    goto LABEL_7;
  }
  if (!v4)
  {
    v5 = (void *)MEMORY[0x23B812F68](0xD000000000000019, 0x800000023757BCD0);
    v6 = CAFUILocalizedStringForKey(v5);
LABEL_7:
    v7 = v6;

    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    return v8;
  }
  v10 = (void *)MEMORY[0x23B812F68](0xD000000000000018, 0x800000023757BC90);
  v11 = CAFUILocalizedStringForKey(v10);

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v12 = swift_allocObject();
  v13 = MEMORY[0x24BEE1768];
  *(_OWORD *)(v12 + 16) = xmmword_237579480;
  v14 = MEMORY[0x24BEE17F0];
  *(_QWORD *)(v12 + 56) = v13;
  *(_QWORD *)(v12 + 64) = v14;
  *(_QWORD *)(v12 + 32) = v4;
  v15 = String.init(format:_:)();
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t CAFPairedDevicesInformation.userVisibleLabel.getter()
{
  void *v0;
  id v1;
  uint64_t v2;

  v0 = (void *)MEMORY[0x23B812F68](0x495F444552494150, 0xEE0053454E4F4850);
  v1 = CAFUILocalizedStringForKey(v0);

  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v2;
}

uint64_t CAFPairedDevicesInformation.sortedPairedDevices.getter()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;

  v1 = objc_msgSend(v0, sel_pairedDeviceList);
  v2 = objc_msgSend(v1, sel_pairedDevices);

  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CAFPairedDevice);
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v3 < 0 || (v3 & 0x4000000000000000) != 0)
  {
    v6 = swift_bridgeObjectRetain();
    v4 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v6, (void (*)(_QWORD *, uint64_t, unint64_t))specialized Array._copyContents(initializing:));
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
  }
  v7 = v4;
  specialized MutableCollection<>.sort(by:)(&v7);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t CAFPairedDevicesInformation.items.getter()
{
  void *v0;
  unint64_t v1;
  id v2;
  uint64_t v3;

  v1 = CAFPairedDevicesInformation.sortedPairedDevices.getter();
  v2 = v0;
  v3 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo15CAFPairedDeviceCG_5CAFUI35CAFUIImageRepresentableItemProtocol_ps5NeverOTg506_sSo27d39DevicesInformationC5CAFUIE5itemsSayAC35ghij15_pGvgAcE_pSo0A6E6CXEfU_So0dnO0CTf1cn_nTf4ng_n(v1);
  swift_bridgeObjectRelease();

  return v3;
}

void closure #1 in CAFPairedDevicesInformation.items.getter(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id v3;
  unsigned int v4;
  void *v5;
  char **v6;
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  BOOL v15;
  _OWORD *v16;
  id v17;
  id v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[48];
  _QWORD v23[4];

  v3 = *a1;
  v4 = objc_msgSend(*a1, sel_state);
  v5 = (void *)objc_opt_self();
  v6 = &selRef_greenColor;
  if (v4 != 2)
    v6 = &selRef_grayColor;
  v7 = objc_msgSend(v5, *v6);
  v8 = objc_msgSend(v3, sel_name);
  if (!v8)
  {
    v9 = (void *)MEMORY[0x23B812F68](0xD00000000000001DLL, 0x800000023757BD30);
    v8 = CAFUILocalizedStringForKey(v9);

  }
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v12 = v11;

  v13 = specialized CAFPairedDevicesInformation.deviceImage.getter();
  v14 = CAFPairedDevice.decoratorImage.getter();
  v15 = objc_msgSend(v3, sel_state) == 2;
  v23[3] = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CAFPairedDevice);
  v23[0] = v3;
  a2[3] = &type metadata for CAFUIImageRepresentableItem;
  a2[4] = &protocol witness table for CAFUIImageRepresentableItem;
  v16 = (_OWORD *)swift_allocObject();
  *a2 = v16;
  memset(&v22[8], 0, 40);
  *(_QWORD *)&v20 = v10;
  *((_QWORD *)&v20 + 1) = v12;
  *(_QWORD *)&v21 = v13;
  *((_QWORD *)&v21 + 1) = v14;
  v22[0] = v15;
  v17 = v3;
  v18 = v7;
  outlined assign with take of Any?((uint64_t)v23, (uint64_t)&v22[8]);

  *(_QWORD *)&v22[40] = v7;
  v19 = *(_OWORD *)&v22[16];
  v16[3] = *(_OWORD *)v22;
  v16[4] = v19;
  v16[1] = v20;
  v16[2] = v21;
  v16[5] = *(_OWORD *)&v22[32];

}

uint64_t CAFPairedDevicesInformation.selectedIndices.getter()
{
  return MEMORY[0x24BEE4AF8];
}

void CAFPairedDevicesInformation.selectedIndices.setter(uint64_t a1)
{
  void *v1;
  unint64_t v2;
  unint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  os_log_type_t v9;
  void *v10;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[4];

  if (*(_QWORD *)(a1 + 16))
  {
    v2 = *(_QWORD *)(a1 + 32);
    swift_bridgeObjectRelease();
    v3 = CAFPairedDevicesInformation.sortedPairedDevices.getter();
    v4 = v1;
    v5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo15CAFPairedDeviceCG_5CAFUI35CAFUIImageRepresentableItemProtocol_ps5NeverOTg506_sSo27d39DevicesInformationC5CAFUIE5itemsSayAC35ghij15_pGvgAcE_pSo0A6E6CXEfU_So0dnO0CTf1cn_nTf4ng_n(v3);
    swift_bridgeObjectRelease();

    if ((v2 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v2 < *(_QWORD *)(v5 + 16))
    {
      outlined init with copy of CAFUIImageRepresentableItemProtocol(v5 + 40 * v2 + 32, (uint64_t)v11);
      swift_bridgeObjectRelease();
      v6 = v12;
      v7 = v13;
      __swift_project_boxed_opaque_existential_1(v11, v12);
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v7 + 40))(v14, v6, v7);
      if (v14[3])
      {
        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CAFPairedDevice);
        if ((swift_dynamicCast() & 1) != 0)
        {
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
          v8 = objc_msgSend(v10, sel_identifier);
          if (v8)
          {

            return;
          }

        }
        else
        {
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
        }
      }
      else
      {
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
        outlined destroy of Any?((uint64_t)v14);
      }
      goto LABEL_12;
    }
    __break(1u);
    return;
  }
  swift_bridgeObjectRelease();
LABEL_12:
  v9 = static os_log_type_t.info.getter();
  specialized static CAFUILogger.log(_:message:function:file:line:)(v9, 0xD000000000000037, 0x800000023757BCF0, 0x64657463656C6573, 0xEF73656369646E49);
}

void (*CAFPairedDevicesInformation.selectedIndices.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;

  *a1 = MEMORY[0x24BEE4AF8];
  a1[1] = v1;
  return CAFPairedDevicesInformation.selectedIndices.modify;
}

void CAFPairedDevicesInformation.selectedIndices.modify(uint64_t *a1, char a2)
{
  uint64_t v2;

  if ((a2 & 1) != 0)
  {
    v2 = swift_bridgeObjectRetain();
    CAFPairedDevicesInformation.selectedIndices.setter(v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    CAFPairedDevicesInformation.selectedIndices.setter(*a1);
  }
}

uint64_t CAFPairedDevicesInformation.isHighlightable.getter()
{
  return 1;
}

uint64_t CAFPairedDevicesInformation.isEnabled.getter()
{
  return 1;
}

uint64_t CAFPairedDevicesInformation.limitableUIElement.getter()
{
  return 1;
}

uint64_t CAFPairedDevicesInformation.cellSelected(isProminent:hasChildren:)()
{
  return 0;
}

uint64_t protocol witness for CAFUIImageRepresentable.allowsMultipleSelection.getter in conformance CAFPairedDevicesInformation()
{
  return 1;
}

uint64_t protocol witness for CAFUIImageRepresentable.items.getter in conformance CAFPairedDevicesInformation()
{
  void *v0;
  unint64_t v1;
  id v2;
  uint64_t v3;

  v1 = CAFPairedDevicesInformation.sortedPairedDevices.getter();
  v2 = v0;
  v3 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo15CAFPairedDeviceCG_5CAFUI35CAFUIImageRepresentableItemProtocol_ps5NeverOTg506_sSo27d39DevicesInformationC5CAFUIE5itemsSayAC35ghij15_pGvgAcE_pSo0A6E6CXEfU_So0dnO0CTf1cn_nTf4ng_n(v1);
  swift_bridgeObjectRelease();

  return v3;
}

uint64_t protocol witness for CAFUIImageRepresentable.selectedIndices.getter in conformance CAFPairedDevicesInformation()
{
  return MEMORY[0x24BEE4AF8];
}

void (*protocol witness for CAFUIImageRepresentable.selectedIndices.modify in conformance CAFPairedDevicesInformation(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;

  *a1 = MEMORY[0x24BEE4AF8];
  a1[1] = v1;
  return CAFPairedDevicesInformation.selectedIndices.modify;
}

uint64_t protocol witness for CAFListContentRepresentable.userVisibleLabel.getter in conformance CAFPairedDevicesInformation()
{
  void *v0;
  id v1;
  uint64_t v2;

  v0 = (void *)MEMORY[0x23B812F68](0x495F444552494150, 0xEE0053454E4F4850);
  v1 = CAFUILocalizedStringForKey(v0);

  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v2;
}

uint64_t protocol witness for CAFListContentRepresentable.symbolName.getter in conformance CAFPairedDevicesInformation()
{
  return 0;
}

uint64_t protocol witness for CAFListContentRepresentable.cellSelected(isProminent:hasChildren:) in conformance CAFPairedDevicesInformation()
{
  return 0;
}

uint64_t protocol witness for CAFListContentRepresentable.prominenceInfo.getter in conformance CAFPairedDevicesInformation()
{
  return 0;
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v6[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
  v4 = *(_QWORD *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  return specialized ContiguousArray._endMutation()();
}

{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v6[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  v4 = *(_QWORD *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  return specialized ContiguousArray._endMutation()();
}

{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v6[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
  v4 = *(_QWORD *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  return specialized ContiguousArray._endMutation()();
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t a1)
{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (void (*)(_QWORD *, uint64_t, unint64_t))specialized Array._copyContents(initializing:));
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t a1, void (*a2)(_QWORD *, uint64_t, unint64_t))
{
  uint64_t v4;
  _QWORD *v5;
  int64_t v6;
  uint64_t v7;
  void (*v8)(_QWORD *, uint64_t, unint64_t);

  if (a1 >> 62)
    goto LABEL_10;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v4)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    if (v4 <= 0)
    {
      v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v5 = (_QWORD *)swift_allocObject();
      v6 = _swift_stdlib_malloc_size(v5);
      v7 = v6 - 32;
      if (v6 < 32)
        v7 = v6 - 25;
      v5[2] = v4;
      v5[3] = (2 * (v7 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    a2(v5 + 4, v4, a1);
    a2 = v8;
    swift_bridgeObjectRelease();
    if (a2 == (void (*)(_QWORD *, uint64_t, unint64_t))v4)
      break;
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v4)
      return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v5;
}

void specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;
  Swift::Int v5;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  Swift::Int v11;
  uint64_t v12;
  SEL *v13;
  unint64_t v14;
  Swift::Int v15;
  void *v16;
  id v17;
  id v18;
  Swift::Int v19;
  const char *v20;
  unsigned int v21;
  unsigned int v22;
  Swift::Int v23;
  _BOOL4 v24;
  unsigned int v25;
  unsigned int v26;
  _BOOL4 v27;
  unsigned int v28;
  unsigned int v29;
  Swift::Int v30;
  void *v31;
  id v32;
  id v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  BOOL v38;
  unsigned int v39;
  unsigned int v40;
  _BOOL4 v41;
  uint64_t *v42;
  Swift::Int v43;
  Swift::Int v44;
  uint64_t *v45;
  uint64_t v46;
  Swift::Int v47;
  uint64_t v48;
  void *v49;
  Swift::Int v50;
  uint64_t v51;
  void *v52;
  id v53;
  id v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  void *v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  BOOL v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  uint64_t v87;
  char v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  uint64_t v112;
  unint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  unint64_t v119;
  char *v120;
  uint64_t *v121;
  uint64_t v122;
  Swift::Int v123;
  Swift::Int v124;
  Swift::Int v125;
  Swift::Int v126;
  void **v127;
  uint64_t v128;
  uint64_t v129;

  v2 = v1;
  v4 = a1[1];
  v5 = _minimumMergeRunLength(_:)(v4);
  if (v5 >= v4)
  {
    if (v4 < 0)
      goto LABEL_155;
    if (v4)
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v4, 1, a1);
    return;
  }
  if (v4 >= 0)
    v6 = v4;
  else
    v6 = v4 + 1;
  if (v4 < -1)
    goto LABEL_163;
  v7 = v5;
  v126 = v4;
  v121 = a1;
  if (v4 < 2)
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
    v129 = MEMORY[0x24BEE4AF8];
    v127 = (void **)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFFF8) + 32);
    if (v4 != 1)
    {
      v14 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      if (v14 < 2)
      {
LABEL_132:
        swift_bridgeObjectRelease();
        *(_QWORD *)((v129 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
        specialized Array._endMutation()();
        swift_bridgeObjectRelease();
        return;
      }
LABEL_120:
      v112 = *v121;
      while (1)
      {
        v113 = v14 - 2;
        if (v14 < 2)
          goto LABEL_150;
        if (!v112)
          goto LABEL_162;
        v114 = v10;
        v115 = v10 + 32;
        v116 = *(_QWORD *)&v10[16 * v113 + 32];
        v117 = *(_QWORD *)&v10[16 * v14 + 24];
        specialized _merge<A>(low:mid:high:buffer:by:)((id *)(v112 + 8 * v116), (id *)(v112 + 8 * *(_QWORD *)&v115[16 * v14 - 16]), v112 + 8 * v117, v127);
        if (v2)
          goto LABEL_132;
        if (v117 < v116)
          goto LABEL_151;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v114 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v114);
        if (v113 >= *((_QWORD *)v114 + 2))
          goto LABEL_152;
        v118 = &v114[16 * v113 + 32];
        *(_QWORD *)v118 = v116;
        *((_QWORD *)v118 + 1) = v117;
        v119 = *((_QWORD *)v114 + 2);
        if (v14 > v119)
          goto LABEL_153;
        v10 = v114;
        memmove(&v114[16 * v14 + 16], &v114[16 * v14 + 32], 16 * (v119 - v14));
        *((_QWORD *)v114 + 2) = v119 - 1;
        v14 = v119 - 1;
        if (v119 <= 2)
          goto LABEL_132;
      }
    }
  }
  else
  {
    v8 = v6 >> 1;
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CAFPairedDevice);
    v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) = v8;
    v4 = v126;
    v127 = (void **)((v9 & 0xFFFFFFFFFFFFFF8) + 32);
    v129 = v9;
  }
  v123 = v7;
  v11 = 0;
  v12 = *a1;
  v122 = *a1 - 8;
  v10 = (char *)MEMORY[0x24BEE4AF8];
  v13 = (SEL *)&unk_2508DF000;
  v128 = *a1;
LABEL_15:
  v15 = v11++;
  v125 = v15;
  if (v11 >= v4)
    goto LABEL_47;
  v16 = *(void **)(v12 + 8 * v15);
  v17 = *(id *)(v12 + 8 * v11);
  v18 = v16;
  v19 = v15;
  v20 = (const char *)v13;
  v21 = objc_msgSend(v17, v13[381]);
  if (v21 != objc_msgSend(v18, v20 + 2043))
  {
    v25 = objc_msgSend(v17, v20 + 2043);
    v26 = objc_msgSend(v18, v20 + 2043);

    v27 = v25 < v26;
    v23 = v19 + 2;
    v93 = v19 + 2 < v126;
    v12 = v128;
    v13 = (SEL *)v20;
    v15 = v19;
    v24 = v27;
    if (v93)
      goto LABEL_24;
LABEL_21:
    v11 = v23;
    if (v24)
      goto LABEL_38;
    goto LABEL_47;
  }
  v22 = objc_msgSend(v17, sel_state);
  if (v22 == objc_msgSend(v18, sel_state))
  {

    v15 = v125;
    v23 = v125 + 2;
    v13 = (SEL *)&unk_2508DF000;
    if (v125 + 2 >= v126)
    {
      v11 = v125 + 2;
      v12 = v128;
      goto LABEL_47;
    }
    v24 = 0;
    v12 = v128;
    goto LABEL_24;
  }
  v28 = objc_msgSend(v17, sel_state);
  v29 = objc_msgSend(v18, sel_state);

  v24 = v29 < v28;
  v15 = v125;
  v23 = v125 + 2;
  v12 = v128;
  v13 = (SEL *)&unk_2508DF000;
  if (v125 + 2 >= v126)
    goto LABEL_21;
LABEL_24:
  v30 = v23;
  while (1)
  {
    v23 = v30;
    v31 = *(void **)(v12 + 8 * v11);
    v32 = *(id *)(v12 + 8 * v30);
    v33 = v31;
    v34 = objc_msgSend(v32, v13[381]);
    if (v34 == objc_msgSend(v33, v13[381]))
    {
      v35 = objc_msgSend(v32, sel_state);
      if (v35 == objc_msgSend(v33, sel_state))
      {

        if (v24)
        {
          v12 = v128;
          if (v23 >= v15)
            goto LABEL_39;
          goto LABEL_158;
        }
        goto LABEL_26;
      }
      v36 = objc_msgSend(v32, sel_state);
      v37 = objc_msgSend(v33, sel_state);

      v38 = v37 >= v36;
    }
    else
    {
      v39 = objc_msgSend(v32, v13[381]);
      v40 = objc_msgSend(v33, v13[381]);

      v38 = v39 >= v40;
    }
    v13 = (SEL *)&unk_2508DF000;
    v41 = v38;
    if (((v24 ^ v41) & 1) == 0)
      break;
LABEL_26:
    v30 = v23 + 1;
    v11 = v23;
    v12 = v128;
    if (v23 + 1 >= v126)
    {
      ++v23;
      v11 = v30;
      if (v24)
        goto LABEL_38;
LABEL_47:
      v47 = v126;
      if (v11 >= v126)
        goto LABEL_69;
      if (__OFSUB__(v11, v15))
        goto LABEL_154;
      if (v11 - v15 >= v123)
        goto LABEL_69;
      if (__OFADD__(v15, v123))
        goto LABEL_156;
      if (v15 + v123 < v126)
        v47 = v15 + v123;
      if (v47 < v15)
      {
LABEL_157:
        __break(1u);
        goto LABEL_158;
      }
      if (v11 == v47)
        goto LABEL_69;
      v120 = v10;
      v48 = v122 + 8 * v11;
      v124 = v47;
LABEL_58:
      v49 = *(void **)(v12 + 8 * v11);
      v50 = v125;
      v51 = v48;
      while (1)
      {
        v52 = *(void **)v51;
        v53 = v49;
        v54 = v52;
        LODWORD(v52) = objc_msgSend(v53, v13[381]);
        if ((_DWORD)v52 == objc_msgSend(v54, v13[381]))
        {
          v55 = objc_msgSend(v53, sel_state);
          if (v55 == objc_msgSend(v54, sel_state))
          {

            v12 = v128;
LABEL_57:
            ++v11;
            v48 += 8;
            if (v11 != v124)
              goto LABEL_58;
            v11 = v124;
            v10 = v120;
            v15 = v125;
LABEL_69:
            if (v11 < v15)
              goto LABEL_149;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
            v62 = *((_QWORD *)v10 + 2);
            v61 = *((_QWORD *)v10 + 3);
            v14 = v62 + 1;
            v12 = v128;
            if (v62 >= v61 >> 1)
            {
              v111 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v61 > 1), v62 + 1, 1, v10);
              v12 = v128;
              v10 = v111;
            }
            *((_QWORD *)v10 + 2) = v14;
            v63 = v10 + 32;
            v64 = &v10[16 * v62 + 32];
            *(_QWORD *)v64 = v125;
            *((_QWORD *)v64 + 1) = v11;
            if (v62)
            {
              while (2)
              {
                v65 = v14 - 1;
                if (v14 >= 4)
                {
                  v70 = &v63[16 * v14];
                  v71 = *((_QWORD *)v70 - 8);
                  v72 = *((_QWORD *)v70 - 7);
                  v76 = __OFSUB__(v72, v71);
                  v73 = v72 - v71;
                  if (v76)
                    goto LABEL_138;
                  v75 = *((_QWORD *)v70 - 6);
                  v74 = *((_QWORD *)v70 - 5);
                  v76 = __OFSUB__(v74, v75);
                  v68 = v74 - v75;
                  v69 = v76;
                  if (v76)
                    goto LABEL_139;
                  v77 = v14 - 2;
                  v78 = &v63[16 * v14 - 32];
                  v80 = *(_QWORD *)v78;
                  v79 = *((_QWORD *)v78 + 1);
                  v76 = __OFSUB__(v79, v80);
                  v81 = v79 - v80;
                  if (v76)
                    goto LABEL_141;
                  v76 = __OFADD__(v68, v81);
                  v82 = v68 + v81;
                  if (v76)
                    goto LABEL_144;
                  if (v82 >= v73)
                  {
                    v100 = &v63[16 * v65];
                    v102 = *(_QWORD *)v100;
                    v101 = *((_QWORD *)v100 + 1);
                    v76 = __OFSUB__(v101, v102);
                    v103 = v101 - v102;
                    if (v76)
                      goto LABEL_148;
                    v93 = v68 < v103;
                  }
                  else
                  {
LABEL_88:
                    if ((v69 & 1) != 0)
                      goto LABEL_140;
                    v77 = v14 - 2;
                    v83 = &v63[16 * v14 - 32];
                    v85 = *(_QWORD *)v83;
                    v84 = *((_QWORD *)v83 + 1);
                    v86 = __OFSUB__(v84, v85);
                    v87 = v84 - v85;
                    v88 = v86;
                    if (v86)
                      goto LABEL_143;
                    v89 = &v63[16 * v65];
                    v91 = *(_QWORD *)v89;
                    v90 = *((_QWORD *)v89 + 1);
                    v76 = __OFSUB__(v90, v91);
                    v92 = v90 - v91;
                    if (v76)
                      goto LABEL_146;
                    if (__OFADD__(v87, v92))
                      goto LABEL_147;
                    if (v87 + v92 < v68)
                      goto LABEL_100;
                    v93 = v68 < v92;
                  }
                  if (v93)
                    v65 = v77;
                }
                else
                {
                  if (v14 == 3)
                  {
                    v67 = *((_QWORD *)v10 + 4);
                    v66 = *((_QWORD *)v10 + 5);
                    v76 = __OFSUB__(v66, v67);
                    v68 = v66 - v67;
                    v69 = v76;
                    goto LABEL_88;
                  }
                  v94 = *((_QWORD *)v10 + 4);
                  v95 = *((_QWORD *)v10 + 5);
                  v76 = __OFSUB__(v95, v94);
                  v87 = v95 - v94;
                  v88 = v76;
LABEL_100:
                  if ((v88 & 1) != 0)
                    goto LABEL_142;
                  v96 = &v63[16 * v65];
                  v98 = *(_QWORD *)v96;
                  v97 = *((_QWORD *)v96 + 1);
                  v76 = __OFSUB__(v97, v98);
                  v99 = v97 - v98;
                  if (v76)
                    goto LABEL_145;
                  if (v99 < v87)
                    goto LABEL_14;
                }
                v104 = v65 - 1;
                if (v65 - 1 >= v14)
                {
                  __break(1u);
LABEL_135:
                  __break(1u);
LABEL_136:
                  __break(1u);
LABEL_137:
                  __break(1u);
LABEL_138:
                  __break(1u);
LABEL_139:
                  __break(1u);
LABEL_140:
                  __break(1u);
LABEL_141:
                  __break(1u);
LABEL_142:
                  __break(1u);
LABEL_143:
                  __break(1u);
LABEL_144:
                  __break(1u);
LABEL_145:
                  __break(1u);
LABEL_146:
                  __break(1u);
LABEL_147:
                  __break(1u);
LABEL_148:
                  __break(1u);
LABEL_149:
                  __break(1u);
LABEL_150:
                  __break(1u);
LABEL_151:
                  __break(1u);
LABEL_152:
                  __break(1u);
LABEL_153:
                  __break(1u);
LABEL_154:
                  __break(1u);
LABEL_155:
                  __break(1u);
LABEL_156:
                  __break(1u);
                  goto LABEL_157;
                }
                if (!v12)
                  goto LABEL_160;
                v105 = v10;
                v106 = &v63[16 * v104];
                v107 = *(_QWORD *)v106;
                v108 = &v63[16 * v65];
                v109 = *((_QWORD *)v108 + 1);
                specialized _merge<A>(low:mid:high:buffer:by:)((id *)(v12 + 8 * *(_QWORD *)v106), (id *)(v12 + 8 * *(_QWORD *)v108), v12 + 8 * v109, v127);
                if (v1)
                  goto LABEL_132;
                if (v109 < v107)
                  goto LABEL_135;
                if (v65 > *((_QWORD *)v105 + 2))
                  goto LABEL_136;
                *(_QWORD *)v106 = v107;
                *(_QWORD *)&v63[16 * v104 + 8] = v109;
                v110 = *((_QWORD *)v105 + 2);
                if (v65 >= v110)
                  goto LABEL_137;
                v10 = v105;
                v14 = v110 - 1;
                memmove(&v63[16 * v65], v108 + 16, 16 * (v110 - 1 - v65));
                *((_QWORD *)v105 + 2) = v110 - 1;
                v12 = v128;
                v13 = (SEL *)&unk_2508DF000;
                if (v110 <= 2)
                  goto LABEL_14;
                continue;
              }
            }
            v14 = 1;
LABEL_14:
            v4 = v126;
            if (v11 >= v126)
            {
              v2 = v1;
              if (v14 < 2)
                goto LABEL_132;
              goto LABEL_120;
            }
            goto LABEL_15;
          }
          v56 = objc_msgSend(v53, sel_state);
          v57 = objc_msgSend(v54, sel_state);

          if (v57 >= v56)
            goto LABEL_56;
        }
        else
        {
          v58 = objc_msgSend(v53, v13[381]);
          v59 = objc_msgSend(v54, v13[381]);

          if (v58 >= v59)
          {
LABEL_56:
            v12 = v128;
            v13 = (SEL *)&unk_2508DF000;
            goto LABEL_57;
          }
        }
        v12 = v128;
        if (!v128)
          goto LABEL_159;
        v60 = *(void **)v51;
        v49 = *(void **)(v51 + 8);
        *(_QWORD *)v51 = v49;
        *(_QWORD *)(v51 + 8) = v60;
        v51 -= 8;
        ++v50;
        v13 = (SEL *)&unk_2508DF000;
        if (v11 == v50)
          goto LABEL_57;
      }
    }
  }
  v12 = v128;
  v11 = v23;
  if (!v24)
    goto LABEL_47;
LABEL_38:
  if (v23 >= v15)
  {
LABEL_39:
    if (v15 < v23)
    {
      v42 = (uint64_t *)(v122 + 8 * v23);
      v43 = v23;
      v44 = v15;
      v45 = (uint64_t *)(v12 + 8 * v15);
      do
      {
        if (v44 != --v43)
        {
          if (!v12)
            goto LABEL_161;
          v46 = *v45;
          *v45 = *v42;
          *v42 = v46;
        }
        ++v44;
        --v42;
        ++v45;
      }
      while (v44 < v43);
    }
    v11 = v23;
    goto LABEL_47;
  }
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  __break(1u);
LABEL_161:
  __break(1u);
LABEL_162:
  __break(1u);
LABEL_163:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;
  Swift::Int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  Swift::Int v10;
  uint64_t v11;
  SEL *v12;
  unint64_t v13;
  Swift::Int v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  unsigned int v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  Swift::Int v39;
  Swift::Int v40;
  void *v41;
  void *v42;
  id v43;
  id v44;
  unsigned int v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  unsigned int v64;
  unsigned int v65;
  _BOOL4 v66;
  char v67;
  uint64_t *v68;
  Swift::Int v69;
  Swift::Int v70;
  uint64_t *v71;
  uint64_t v72;
  Swift::Int v73;
  uint64_t v74;
  void *v75;
  Swift::Int v76;
  void *v77;
  id v78;
  id v79;
  unsigned int v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  char v99;
  void *v100;
  unint64_t v101;
  unint64_t v102;
  char *v103;
  char *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  BOOL v116;
  unint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  BOOL v126;
  uint64_t v127;
  char v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  BOOL v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  unint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  Swift::Int v159;
  Swift::Int v160;
  uint64_t v161;
  Swift::Int v162;
  Swift::Int v163;
  int v164;
  uint64_t v165;
  void **__dst;
  char *v167;
  uint64_t v168;
  Swift::Int v169;
  Swift::Int v170;
  Swift::Int v171;
  uint64_t v172;

  v2 = v1;
  v4 = a1[1];
  v5 = _minimumMergeRunLength(_:)(v4);
  if (v5 >= v4)
  {
    if (v4 < 0)
      goto LABEL_175;
    if (v4)
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v4, 1, a1);
    return;
  }
  if (v4 >= 0)
    v6 = v4;
  else
    v6 = v4 + 1;
  if (v4 < -1)
    goto LABEL_183;
  v159 = v5;
  v160 = v4;
  v157 = a1;
  if (v4 < 2)
  {
    v9 = (char *)MEMORY[0x24BEE4AF8];
    v172 = MEMORY[0x24BEE4AF8];
    __dst = (void **)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFFF8) + 32);
    if (v4 != 1)
    {
      v13 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_141:
      if (v13 >= 2)
      {
        v151 = *v157;
        do
        {
          v152 = v13 - 2;
          if (v13 < 2)
            goto LABEL_170;
          if (!v151)
            goto LABEL_182;
          v153 = *(_QWORD *)&v9[16 * v152 + 32];
          v154 = *(_QWORD *)&v9[16 * v13 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v151 + 8 * v153), (id *)(v151 + 8 * *(_QWORD *)&v9[16 * v13 + 16]), v151 + 8 * v154, __dst);
          if (v2)
            break;
          if (v154 < v153)
            goto LABEL_171;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v9 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v9);
          if (v152 >= *((_QWORD *)v9 + 2))
            goto LABEL_172;
          v155 = &v9[16 * v152 + 32];
          *(_QWORD *)v155 = v153;
          *((_QWORD *)v155 + 1) = v154;
          v156 = *((_QWORD *)v9 + 2);
          if (v13 > v156)
            goto LABEL_173;
          memmove(&v9[16 * v13 + 16], &v9[16 * v13 + 32], 16 * (v156 - v13));
          *((_QWORD *)v9 + 2) = v156 - 1;
          v13 = v156 - 1;
        }
        while (v156 > 2);
      }
LABEL_152:
      swift_bridgeObjectRelease();
      *(_QWORD *)((v172 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()();
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    v7 = v6 >> 1;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
    v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10) = v7;
    v4 = v160;
    __dst = (void **)((v8 & 0xFFFFFFFFFFFFFF8) + 32);
    v172 = v8;
  }
  v10 = 0;
  v11 = *a1;
  v158 = *a1 - 8;
  v9 = (char *)MEMORY[0x24BEE4AF8];
  v12 = (SEL *)&unk_2508DF000;
  v168 = *a1;
  while (1)
  {
    v14 = v10 + 1;
    v167 = v9;
    v163 = v10;
    v161 = v2;
    if (v10 + 1 >= v4)
      goto LABEL_64;
    v15 = *(void **)(v11 + 8 * v14);
    v16 = *(void **)(v11 + 8 * v10);
    if (v15 == v16)
    {
      v164 = 0;
    }
    else
    {
      v17 = v15;
      v18 = v16;
      v19 = objc_msgSend(v17, v12[381]);
      if (v19 != objc_msgSend(v18, v12[381]))
      {
        v37 = objc_msgSend(v17, v12[381]);
        v38 = objc_msgSend(v18, v12[381]);

        v164 = v37 < v38;
        v10 = v163;
        v39 = v163 + 2;
        v9 = v167;
        if (v163 + 2 < v4)
          goto LABEL_33;
        goto LABEL_54;
      }
      v20 = objc_msgSend(v17, sel_userVisibleLabel);
      v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v23 = v22;

      v24 = objc_msgSend(v18, sel_userVisibleLabel);
      v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v27 = v26;

      v28 = v21 == v25 && v23 == v27;
      if (v28 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        v169 = v14;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v29 = objc_msgSend(v17, sel_identifier);
        v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v32 = v31;

        v33 = objc_msgSend(v18, sel_identifier);
        v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v36 = v35;

        if (v30 != v34)
          goto LABEL_29;
        if (v32 == v36)
          v164 = 0;
        else
LABEL_29:
          v164 = _stringCompareWithSmolCheck(_:_:expecting:)();
        v10 = v163;
        v14 = v169;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        v9 = v167;
        v11 = v168;
        v12 = (SEL *)&unk_2508DF000;
      }
      else
      {
        v164 = _stringCompareWithSmolCheck(_:_:expecting:)();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v9 = v167;
        v11 = v168;
        v12 = (SEL *)&unk_2508DF000;
        v10 = v163;
      }
    }
    v39 = v10 + 2;
    if (v10 + 2 < v4)
    {
LABEL_33:
      v40 = v39;
      do
      {
        v39 = v40;
        v41 = *(void **)(v11 + 8 * v40);
        v42 = *(void **)(v11 + 8 * v14);
        if (v41 == v42)
        {
          if ((v164 & 1) != 0)
            goto LABEL_55;
        }
        else
        {
          v43 = v41;
          v44 = v42;
          v45 = objc_msgSend(v43, v12[381]);
          if (v45 == objc_msgSend(v44, v12[381]))
          {
            v46 = objc_msgSend(v43, sel_userVisibleLabel);
            v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            v49 = v48;

            v50 = objc_msgSend(v44, sel_userVisibleLabel);
            v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            v53 = v52;

            v54 = v47 == v51 && v49 == v53;
            if (v54 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v55 = objc_msgSend(v43, sel_identifier);
              v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              v58 = v57;

              v59 = objc_msgSend(v44, sel_identifier);
              v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              v62 = v61;

              if (v56 == v60 && v58 == v62)
                v63 = 0;
              else
                v63 = _stringCompareWithSmolCheck(_:_:expecting:)();
              v10 = v163;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

            }
            else
            {
              v63 = _stringCompareWithSmolCheck(_:_:expecting:)();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v10 = v163;
            }
            v67 = v164 ^ v63;
            v9 = v167;
            v11 = v168;
            v12 = (SEL *)&unk_2508DF000;
            if ((v67 & 1) != 0)
              goto LABEL_54;
          }
          else
          {
            v64 = objc_msgSend(v43, v12[381]);
            v65 = objc_msgSend(v44, v12[381]);

            v66 = v64 >= v65;
            v9 = v167;
            v10 = v163;
            if (((v164 ^ v66) & 1) == 0)
              goto LABEL_54;
          }
        }
        v40 = v39 + 1;
        v14 = v39;
      }
      while (v39 + 1 < v4);
      ++v39;
    }
LABEL_54:
    v14 = v39;
    if ((v164 & 1) != 0)
    {
LABEL_55:
      if (v39 < v10)
        goto LABEL_176;
      if (v10 < v39)
      {
        v68 = (uint64_t *)(v158 + 8 * v39);
        v69 = v39;
        v70 = v10;
        v71 = (uint64_t *)(v11 + 8 * v10);
        do
        {
          if (v70 != --v69)
          {
            if (!v11)
              goto LABEL_181;
            v72 = *v71;
            *v71 = *v68;
            *v68 = v72;
          }
          ++v70;
          --v68;
          ++v71;
        }
        while (v70 < v69);
      }
      v14 = v39;
    }
LABEL_64:
    if (v14 >= v4)
      goto LABEL_93;
    if (__OFSUB__(v14, v10))
      goto LABEL_174;
    if (v14 - v10 >= v159)
      goto LABEL_93;
    if (__OFADD__(v10, v159))
      goto LABEL_177;
    v73 = v10 + v159 >= v4 ? v4 : v10 + v159;
    if (v73 < v10)
      break;
    if (v14 != v73)
    {
      v74 = v158 + 8 * v14;
      v162 = v73;
      do
      {
        v75 = *(void **)(v11 + 8 * v14);
        v76 = v10;
        v165 = v74;
        v170 = v14;
        do
        {
          v77 = *(void **)v74;
          if (v75 == *(void **)v74)
            break;
          v78 = v75;
          v79 = v77;
          v80 = objc_msgSend(v78, v12[381]);
          if (v80 == objc_msgSend(v79, v12[381]))
          {
            v81 = objc_msgSend(v78, sel_userVisibleLabel);
            v82 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            v84 = v83;

            v85 = objc_msgSend(v79, sel_userVisibleLabel);
            v86 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            v88 = v87;

            if (v82 == v86 && v84 == v88 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v89 = objc_msgSend(v78, sel_identifier);
              v90 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              v92 = v91;

              v93 = objc_msgSend(v79, sel_identifier);
              v94 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              v96 = v95;

              if (v90 == v94 && v92 == v96)
              {

                swift_bridgeObjectRelease_n();
                v9 = v167;
                v11 = v168;
                v14 = v170;
                v12 = (SEL *)&unk_2508DF000;
                break;
              }
            }
            v99 = _stringCompareWithSmolCheck(_:_:expecting:)();

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v9 = v167;
            v11 = v168;
            v12 = (SEL *)&unk_2508DF000;
            if ((v99 & 1) == 0)
            {
LABEL_74:
              v14 = v170;
              break;
            }
          }
          else
          {
            v97 = objc_msgSend(v78, v12[381]);
            v98 = objc_msgSend(v79, v12[381]);

            if (v97 >= v98)
              goto LABEL_74;
          }
          v14 = v170;
          if (!v11)
            goto LABEL_179;
          v100 = *(void **)v74;
          v75 = *(void **)(v74 + 8);
          *(_QWORD *)v74 = v75;
          *(_QWORD *)(v74 + 8) = v100;
          v74 -= 8;
          ++v76;
        }
        while (v170 != v76);
        ++v14;
        v10 = v163;
        v74 = v165 + 8;
      }
      while (v14 != v162);
      v14 = v162;
    }
LABEL_93:
    if (v14 < v10)
      goto LABEL_169;
    v171 = v14;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v9 + 2) + 1, 1, v9);
    v2 = v161;
    v102 = *((_QWORD *)v9 + 2);
    v101 = *((_QWORD *)v9 + 3);
    v13 = v102 + 1;
    if (v102 >= v101 >> 1)
      v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v101 > 1), v102 + 1, 1, v9);
    *((_QWORD *)v9 + 2) = v13;
    v103 = v9 + 32;
    v104 = &v9[16 * v102 + 32];
    *(_QWORD *)v104 = v10;
    *((_QWORD *)v104 + 1) = v171;
    if (v102)
    {
      while (1)
      {
        v105 = v13 - 1;
        if (v13 >= 4)
        {
          v110 = &v103[16 * v13];
          v111 = *((_QWORD *)v110 - 8);
          v112 = *((_QWORD *)v110 - 7);
          v116 = __OFSUB__(v112, v111);
          v113 = v112 - v111;
          if (v116)
            goto LABEL_158;
          v115 = *((_QWORD *)v110 - 6);
          v114 = *((_QWORD *)v110 - 5);
          v116 = __OFSUB__(v114, v115);
          v108 = v114 - v115;
          v109 = v116;
          if (v116)
            goto LABEL_159;
          v117 = v13 - 2;
          v118 = &v103[16 * v13 - 32];
          v120 = *(_QWORD *)v118;
          v119 = *((_QWORD *)v118 + 1);
          v116 = __OFSUB__(v119, v120);
          v121 = v119 - v120;
          if (v116)
            goto LABEL_161;
          v116 = __OFADD__(v108, v121);
          v122 = v108 + v121;
          if (v116)
            goto LABEL_164;
          if (v122 >= v113)
          {
            v140 = &v103[16 * v105];
            v142 = *(_QWORD *)v140;
            v141 = *((_QWORD *)v140 + 1);
            v116 = __OFSUB__(v141, v142);
            v143 = v141 - v142;
            if (v116)
              goto LABEL_168;
            v133 = v108 < v143;
            goto LABEL_130;
          }
        }
        else
        {
          if (v13 != 3)
          {
            v134 = *((_QWORD *)v9 + 4);
            v135 = *((_QWORD *)v9 + 5);
            v116 = __OFSUB__(v135, v134);
            v127 = v135 - v134;
            v128 = v116;
            goto LABEL_124;
          }
          v107 = *((_QWORD *)v9 + 4);
          v106 = *((_QWORD *)v9 + 5);
          v116 = __OFSUB__(v106, v107);
          v108 = v106 - v107;
          v109 = v116;
        }
        if ((v109 & 1) != 0)
          goto LABEL_160;
        v117 = v13 - 2;
        v123 = &v103[16 * v13 - 32];
        v125 = *(_QWORD *)v123;
        v124 = *((_QWORD *)v123 + 1);
        v126 = __OFSUB__(v124, v125);
        v127 = v124 - v125;
        v128 = v126;
        if (v126)
          goto LABEL_163;
        v129 = &v103[16 * v105];
        v131 = *(_QWORD *)v129;
        v130 = *((_QWORD *)v129 + 1);
        v116 = __OFSUB__(v130, v131);
        v132 = v130 - v131;
        if (v116)
          goto LABEL_166;
        if (__OFADD__(v127, v132))
          goto LABEL_167;
        if (v127 + v132 >= v108)
        {
          v133 = v108 < v132;
LABEL_130:
          if (v133)
            v105 = v117;
          goto LABEL_132;
        }
LABEL_124:
        if ((v128 & 1) != 0)
          goto LABEL_162;
        v136 = &v103[16 * v105];
        v138 = *(_QWORD *)v136;
        v137 = *((_QWORD *)v136 + 1);
        v116 = __OFSUB__(v137, v138);
        v139 = v137 - v138;
        if (v116)
          goto LABEL_165;
        if (v139 < v127)
          goto LABEL_14;
LABEL_132:
        v144 = v105 - 1;
        if (v105 - 1 >= v13)
        {
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
LABEL_160:
          __break(1u);
LABEL_161:
          __break(1u);
LABEL_162:
          __break(1u);
LABEL_163:
          __break(1u);
LABEL_164:
          __break(1u);
LABEL_165:
          __break(1u);
LABEL_166:
          __break(1u);
LABEL_167:
          __break(1u);
LABEL_168:
          __break(1u);
LABEL_169:
          __break(1u);
LABEL_170:
          __break(1u);
LABEL_171:
          __break(1u);
LABEL_172:
          __break(1u);
LABEL_173:
          __break(1u);
LABEL_174:
          __break(1u);
LABEL_175:
          __break(1u);
LABEL_176:
          __break(1u);
LABEL_177:
          __break(1u);
          goto LABEL_178;
        }
        if (!v11)
          goto LABEL_180;
        v145 = v11;
        v146 = &v103[16 * v144];
        v147 = *(_QWORD *)v146;
        v148 = &v103[16 * v105];
        v149 = *((_QWORD *)v148 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v145 + 8 * *(_QWORD *)v146), (id *)(v145 + 8 * *(_QWORD *)v148), v145 + 8 * v149, __dst);
        if (v161)
          goto LABEL_152;
        if (v149 < v147)
          goto LABEL_155;
        if (v105 > *((_QWORD *)v9 + 2))
          goto LABEL_156;
        *(_QWORD *)v146 = v147;
        *(_QWORD *)&v103[16 * v144 + 8] = v149;
        v150 = *((_QWORD *)v9 + 2);
        if (v105 >= v150)
          goto LABEL_157;
        v13 = v150 - 1;
        memmove(&v103[16 * v105], v148 + 16, 16 * (v150 - 1 - v105));
        *((_QWORD *)v9 + 2) = v150 - 1;
        v11 = v168;
        v12 = (SEL *)&unk_2508DF000;
        if (v150 <= 2)
          goto LABEL_14;
      }
    }
    v13 = 1;
LABEL_14:
    v4 = v160;
    v10 = v171;
    if (v171 >= v160)
      goto LABEL_141;
  }
LABEL_178:
  __break(1u);
LABEL_179:
  __break(1u);
LABEL_180:
  __break(1u);
LABEL_181:
  __break(1u);
LABEL_182:
  __break(1u);
LABEL_183:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  Swift::Int v10;
  uint64_t v11;
  Swift::Int v12;
  Swift::Int v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  int v18;
  int v19;
  void **v20;
  Swift::Int v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  int v26;
  uint64_t *v27;
  Swift::Int v28;
  Swift::Int v29;
  uint64_t *v30;
  uint64_t v31;
  Swift::Int v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  char v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  void *v86;
  Swift::Int v87;
  uint64_t v88;
  uint64_t v89;
  Swift::Int v90;
  void *v91;
  id v92;
  id v93;
  char v94;
  char v95;
  void *v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  unint64_t v105;
  char *v106;
  Swift::Int v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  Swift::Int v111;
  Swift::Int v112;
  Swift::Int v113;
  char *v114;
  Swift::Int v115;
  char *v116;
  Swift::Int v117;
  void **__dst;
  uint64_t v119;
  void *v120;
  id v121;
  uint64_t v122;

  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if (v3 < 0)
      goto LABEL_143;
    if (v3)
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
    return;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_152;
  v6 = v4;
  v109 = a1;
  if (v3 < 2)
  {
    v9 = (char *)MEMORY[0x24BEE4AF8];
    v122 = MEMORY[0x24BEE4AF8];
    __dst = (void **)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFFF8) + 32);
    if (v3 != 1)
    {
      v36 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      goto LABEL_104;
    }
  }
  else
  {
    v7 = v5 >> 1;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
    v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10) = v7;
    __dst = (void **)((v8 & 0xFFFFFFFFFFFFFF8) + 32);
    v122 = v8;
  }
  v10 = 0;
  v11 = *a1;
  v110 = *a1 + 16;
  v108 = *a1 - 8;
  v9 = (char *)MEMORY[0x24BEE4AF8];
  v117 = v3;
  v113 = v6;
  v119 = *a1;
  while (1)
  {
    v12 = v10;
    v13 = v10 + 1;
    if (v10 + 1 < v3)
    {
      v114 = v9;
      v14 = *(void **)(v11 + 8 * v13);
      v120 = *(void **)(v11 + 8 * v10);
      v15 = v120;
      v121 = v14;
      v16 = v14;
      v17 = v15;
      v18 = closure #4 in CAFUITileDataSource.refreshProminentSection(reloadSection:)(&v121, &v120);
      if (v1)
      {
        swift_bridgeObjectRelease();

LABEL_121:
        *(_QWORD *)((v122 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
        specialized Array._endMutation()();
        swift_bridgeObjectRelease();
        return;
      }
      v19 = v18;

      v13 = v12 + 2;
      if (v12 + 2 < v3)
      {
        v111 = v12;
        v20 = (void **)(v110 + 8 * v12);
        while (1)
        {
          v21 = v13;
          v22 = *v20;
          v120 = *(v20 - 1);
          v23 = v120;
          v121 = v22;
          v24 = v22;
          v25 = v23;
          v26 = closure #4 in CAFUITileDataSource.refreshProminentSection(reloadSection:)(&v121, &v120);

          if (((v19 ^ v26) & 1) != 0)
            break;
          v13 = v21 + 1;
          ++v20;
          v3 = v117;
          if (v117 == v21 + 1)
          {
            v13 = v117;
            v6 = v113;
            goto LABEL_21;
          }
        }
        v3 = v117;
        v6 = v113;
        v13 = v21;
LABEL_21:
        v12 = v111;
      }
      v9 = v114;
      v11 = v119;
      if ((v19 & 1) != 0)
      {
        if (v13 < v12)
          goto LABEL_147;
        if (v12 < v13)
        {
          v27 = (uint64_t *)(v108 + 8 * v13);
          v28 = v13;
          v29 = v12;
          v30 = (uint64_t *)(v119 + 8 * v12);
          do
          {
            if (v29 != --v28)
            {
              if (!v119)
                goto LABEL_150;
              v31 = *v30;
              *v30 = *v27;
              *v27 = v31;
            }
            ++v29;
            --v27;
            ++v30;
          }
          while (v29 < v28);
        }
      }
    }
    if (v13 >= v3)
      goto LABEL_40;
    if (__OFSUB__(v13, v12))
      goto LABEL_144;
    if (v13 - v12 >= v6)
    {
LABEL_40:
      if (v13 < v12)
        goto LABEL_142;
      goto LABEL_41;
    }
    if (__OFADD__(v12, v6))
      goto LABEL_145;
    v32 = v12 + v6 >= v3 ? v3 : v12 + v6;
    if (v32 < v12)
      break;
    if (v13 == v32)
      goto LABEL_40;
    v116 = v9;
    v85 = v108 + 8 * v13;
    v112 = v12;
    v107 = v32;
    do
    {
      v86 = *(void **)(v11 + 8 * v13);
      v87 = v12;
      v88 = v85;
      v89 = v85;
      while (1)
      {
        v90 = v13;
        v120 = *(void **)v89;
        v91 = v120;
        v121 = v86;
        v92 = v86;
        v93 = v91;
        v94 = closure #4 in CAFUITileDataSource.refreshProminentSection(reloadSection:)(&v121, &v120);
        if (v1)
        {
          swift_bridgeObjectRelease();

          goto LABEL_121;
        }
        v95 = v94;

        if ((v95 & 1) == 0)
          break;
        v11 = v119;
        if (!v119)
          goto LABEL_149;
        v96 = *(void **)v89;
        v86 = *(void **)(v89 + 8);
        *(_QWORD *)v89 = v86;
        *(_QWORD *)(v89 + 8) = v96;
        v89 -= 8;
        ++v87;
        v13 = v90;
        if (v90 == v87)
          goto LABEL_98;
      }
      v11 = v119;
      v13 = v90;
LABEL_98:
      ++v13;
      v85 = v88 + 8;
      v12 = v112;
    }
    while (v13 != v107);
    v13 = v107;
    v9 = v116;
    if (v107 < v112)
      goto LABEL_142;
LABEL_41:
    v33 = v9;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      v9 = v33;
    else
      v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v33 + 2) + 1, 1, v33);
    v35 = *((_QWORD *)v9 + 2);
    v34 = *((_QWORD *)v9 + 3);
    v36 = v35 + 1;
    v11 = v119;
    if (v35 >= v34 >> 1)
    {
      v97 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v34 > 1), v35 + 1, 1, v9);
      v11 = v119;
      v9 = v97;
    }
    *((_QWORD *)v9 + 2) = v36;
    v37 = v9 + 32;
    v38 = &v9[16 * v35 + 32];
    *(_QWORD *)v38 = v12;
    *((_QWORD *)v38 + 1) = v13;
    v115 = v13;
    if (v35)
    {
LABEL_46:
      v39 = v36 - 1;
      if (v36 >= 4)
      {
        v44 = &v37[16 * v36];
        v45 = *((_QWORD *)v44 - 8);
        v46 = *((_QWORD *)v44 - 7);
        v50 = __OFSUB__(v46, v45);
        v47 = v46 - v45;
        if (v50)
          goto LABEL_127;
        v49 = *((_QWORD *)v44 - 6);
        v48 = *((_QWORD *)v44 - 5);
        v50 = __OFSUB__(v48, v49);
        v42 = v48 - v49;
        v43 = v50;
        if (v50)
          goto LABEL_128;
        v51 = v36 - 2;
        v52 = &v37[16 * v36 - 32];
        v54 = *(_QWORD *)v52;
        v53 = *((_QWORD *)v52 + 1);
        v50 = __OFSUB__(v53, v54);
        v55 = v53 - v54;
        if (v50)
          goto LABEL_130;
        v50 = __OFADD__(v42, v55);
        v56 = v42 + v55;
        if (v50)
          goto LABEL_133;
        if (v56 >= v47)
        {
          v74 = &v37[16 * v39];
          v76 = *(_QWORD *)v74;
          v75 = *((_QWORD *)v74 + 1);
          v50 = __OFSUB__(v75, v76);
          v77 = v75 - v76;
          if (v50)
            goto LABEL_137;
          v67 = v42 < v77;
        }
        else
        {
LABEL_59:
          if ((v43 & 1) != 0)
            goto LABEL_129;
          v51 = v36 - 2;
          v57 = &v37[16 * v36 - 32];
          v59 = *(_QWORD *)v57;
          v58 = *((_QWORD *)v57 + 1);
          v60 = __OFSUB__(v58, v59);
          v61 = v58 - v59;
          v62 = v60;
          if (v60)
            goto LABEL_132;
          v63 = &v37[16 * v39];
          v65 = *(_QWORD *)v63;
          v64 = *((_QWORD *)v63 + 1);
          v50 = __OFSUB__(v64, v65);
          v66 = v64 - v65;
          if (v50)
            goto LABEL_135;
          if (__OFADD__(v61, v66))
            goto LABEL_136;
          if (v61 + v66 < v42)
            goto LABEL_71;
          v67 = v42 < v66;
        }
        if (v67)
          v39 = v51;
      }
      else
      {
        if (v36 == 3)
        {
          v41 = *((_QWORD *)v9 + 4);
          v40 = *((_QWORD *)v9 + 5);
          v50 = __OFSUB__(v40, v41);
          v42 = v40 - v41;
          v43 = v50;
          goto LABEL_59;
        }
        v68 = *((_QWORD *)v9 + 4);
        v69 = *((_QWORD *)v9 + 5);
        v50 = __OFSUB__(v69, v68);
        v61 = v69 - v68;
        v62 = v50;
LABEL_71:
        if ((v62 & 1) != 0)
          goto LABEL_131;
        v70 = &v37[16 * v39];
        v72 = *(_QWORD *)v70;
        v71 = *((_QWORD *)v70 + 1);
        v50 = __OFSUB__(v71, v72);
        v73 = v71 - v72;
        if (v50)
          goto LABEL_134;
        if (v73 < v61)
          goto LABEL_88;
      }
      v78 = v39 - 1;
      if (v39 - 1 >= v36)
      {
        __break(1u);
LABEL_124:
        __break(1u);
LABEL_125:
        __break(1u);
LABEL_126:
        __break(1u);
LABEL_127:
        __break(1u);
LABEL_128:
        __break(1u);
LABEL_129:
        __break(1u);
LABEL_130:
        __break(1u);
LABEL_131:
        __break(1u);
LABEL_132:
        __break(1u);
LABEL_133:
        __break(1u);
LABEL_134:
        __break(1u);
LABEL_135:
        __break(1u);
LABEL_136:
        __break(1u);
LABEL_137:
        __break(1u);
LABEL_138:
        __break(1u);
LABEL_139:
        __break(1u);
LABEL_140:
        __break(1u);
LABEL_141:
        __break(1u);
LABEL_142:
        __break(1u);
LABEL_143:
        __break(1u);
LABEL_144:
        __break(1u);
LABEL_145:
        __break(1u);
        break;
      }
      if (!v11)
        goto LABEL_148;
      v79 = v9;
      v80 = &v37[16 * v78];
      v81 = *(_QWORD *)v80;
      v82 = &v37[16 * v39];
      v83 = *((_QWORD *)v82 + 1);
      specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v11 + 8 * *(_QWORD *)v80), (void **)(v11 + 8 * *(_QWORD *)v82), v11 + 8 * v83, __dst);
      if (v1)
        goto LABEL_120;
      if (v83 < v81)
        goto LABEL_124;
      if (v39 > *((_QWORD *)v79 + 2))
        goto LABEL_125;
      *(_QWORD *)v80 = v81;
      *(_QWORD *)&v37[16 * v78 + 8] = v83;
      v84 = *((_QWORD *)v79 + 2);
      if (v39 >= v84)
        goto LABEL_126;
      v36 = v84 - 1;
      memmove(&v37[16 * v39], v82 + 16, 16 * (v84 - 1 - v39));
      v9 = v79;
      *((_QWORD *)v79 + 2) = v84 - 1;
      v11 = v119;
      if (v84 <= 2)
        goto LABEL_88;
      goto LABEL_46;
    }
    v36 = 1;
LABEL_88:
    v10 = v115;
    v3 = v117;
    v6 = v113;
    if (v115 >= v117)
    {
LABEL_104:
      if (v36 >= 2)
      {
        v98 = *v109;
        do
        {
          v99 = v36 - 2;
          if (v36 < 2)
            goto LABEL_138;
          if (!v98)
            goto LABEL_151;
          v100 = (uint64_t)v9;
          v101 = *(_QWORD *)&v9[16 * v99 + 32];
          v102 = *(_QWORD *)&v9[16 * v36 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v98 + 8 * v101), (void **)(v98 + 8 * *(_QWORD *)&v9[16 * v36 + 16]), v98 + 8 * v102, __dst);
          if (v1)
            break;
          if (v102 < v101)
            goto LABEL_139;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            v103 = (char *)v100;
          else
            v103 = specialized _ArrayBuffer._consumeAndCreateNew()(v100);
          if (v99 >= *((_QWORD *)v103 + 2))
            goto LABEL_140;
          v104 = &v103[16 * v99 + 32];
          *(_QWORD *)v104 = v101;
          *((_QWORD *)v104 + 1) = v102;
          v105 = *((_QWORD *)v103 + 2);
          if (v36 > v105)
            goto LABEL_141;
          v106 = v103;
          memmove(&v103[16 * v36 + 16], &v103[16 * v36 + 32], 16 * (v105 - v36));
          v9 = v106;
          *((_QWORD *)v106 + 2) = v105 - 1;
          v36 = v105 - 1;
        }
        while (v105 > 2);
      }
LABEL_120:
      swift_bridgeObjectRelease();
      goto LABEL_121;
    }
  }
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  __break(1u);
LABEL_151:
  __break(1u);
LABEL_152:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  SEL *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  unsigned int v18;
  unsigned int v19;
  void *v20;
  uint64_t v23;

  if (a3 != a2)
  {
    v4 = a3;
    v5 = *a4;
    v6 = *a4 + 8 * a3 - 8;
    v7 = (SEL *)&unk_2508DF000;
LABEL_6:
    v8 = *(void **)(v5 + 8 * v4);
    v9 = a1;
    v23 = v6;
    while (1)
    {
      v10 = *(void **)v6;
      v11 = v8;
      v12 = v10;
      v13 = objc_msgSend(v11, sel_sortOrder);
      if (v13 == objc_msgSend(v12, sel_sortOrder))
      {
        v14 = objc_msgSend(v11, v7[319]);
        if (v14 == objc_msgSend(v12, v7[319]))
        {

LABEL_5:
          ++v4;
          v6 = v23 + 8;
          if (v4 == a2)
            return;
          goto LABEL_6;
        }
        v15 = objc_msgSend(v11, v7[319]);
        v16 = objc_msgSend(v12, v7[319]);

        v17 = v16 >= v15;
        v7 = (SEL *)&unk_2508DF000;
        if (v17)
          goto LABEL_5;
      }
      else
      {
        v18 = objc_msgSend(v11, sel_sortOrder);
        v19 = objc_msgSend(v12, sel_sortOrder);

        v17 = v18 >= v19;
        v7 = (SEL *)&unk_2508DF000;
        if (v17)
          goto LABEL_5;
      }
      if (!v5)
        break;
      v20 = *(void **)v6;
      v8 = *(void **)(v6 + 8);
      *(_QWORD *)v6 = v8;
      *(_QWORD *)(v6 + 8) = v20;
      v6 -= 8;
      if (v4 == ++v9)
        goto LABEL_5;
    }
    __break(1u);
  }
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  SEL *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  unsigned int v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  unsigned int v31;
  unsigned int v32;
  void *v33;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  if (a3 != a2)
  {
    v4 = a3;
    v5 = *a4;
    v6 = *a4 + 8 * a3 - 8;
    v7 = (SEL *)&unk_2508DF000;
    v37 = *a4;
LABEL_6:
    v8 = *(void **)(v5 + 8 * v4);
    v9 = a1;
    v36 = v6;
    v38 = v4;
    while (1)
    {
      v10 = *(void **)v6;
      if (v8 == *(void **)v6)
        goto LABEL_5;
      v11 = v8;
      v12 = v10;
      v13 = objc_msgSend(v11, v7[381]);
      if (v13 == objc_msgSend(v12, v7[381]))
      {
        v14 = objc_msgSend(v11, sel_userVisibleLabel);
        v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v17 = v16;

        v18 = objc_msgSend(v12, sel_userVisibleLabel);
        v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v21 = v20;

        if (v15 == v19 && v17 == v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v22 = objc_msgSend(v11, sel_identifier);
          v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v25 = v24;

          v26 = objc_msgSend(v12, sel_identifier);
          v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v29 = v28;

          if (v23 == v27 && v25 == v29)
          {

            swift_bridgeObjectRelease_n();
            v4 = v38;
            v5 = v37;
            v7 = (SEL *)&unk_2508DF000;
LABEL_5:
            ++v4;
            v6 = v36 + 8;
            if (v4 == a2)
              return;
            goto LABEL_6;
          }
        }
        v30 = _stringCompareWithSmolCheck(_:_:expecting:)();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v4 = v38;
        v5 = v37;
        v7 = (SEL *)&unk_2508DF000;
        if ((v30 & 1) == 0)
          goto LABEL_5;
      }
      else
      {
        v31 = objc_msgSend(v11, v7[381]);
        v32 = objc_msgSend(v12, v7[381]);

        if (v31 >= v32)
          goto LABEL_5;
      }
      if (!v5)
        break;
      v33 = *(void **)v6;
      v8 = *(void **)(v6 + 8);
      *(_QWORD *)v6 = v8;
      *(_QWORD *)(v6 + 8) = v33;
      v6 -= 8;
      if (v4 == ++v9)
        goto LABEL_5;
    }
    __break(1u);
  }
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  char v14;
  void *v15;
  void *v18;
  id v19;

  if (a3 != a2)
  {
    v5 = a3;
    v6 = a1;
    v7 = *a4;
    v8 = *a4 + 8 * a3 - 8;
LABEL_4:
    v9 = *(void **)(v7 + 8 * v5);
    v10 = v8;
    while (1)
    {
      v19 = v9;
      v18 = *(void **)v10;
      v11 = v18;
      v12 = v9;
      v13 = v11;
      v14 = closure #4 in CAFUITileDataSource.refreshProminentSection(reloadSection:)(&v19, &v18);

      if (v4)
        break;
      if ((v14 & 1) != 0)
      {
        if (!v7)
        {
          __break(1u);
          return;
        }
        v15 = *(void **)v10;
        v9 = *(void **)(v10 + 8);
        *(_QWORD *)v10 = v9;
        *(_QWORD *)(v10 + 8) = v15;
        v10 -= 8;
        if (v5 != ++v6)
          continue;
      }
      ++v5;
      v8 += 8;
      v6 = a1;
      if (v5 != a2)
        goto LABEL_4;
      return;
    }
  }
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(id *__src, id *a2, unint64_t a3, void **a4)
{
  id *v4;
  id *v5;
  int64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  SEL *v12;
  void **v13;
  void **v14;
  void *v15;
  id v16;
  id v17;
  unsigned int v18;
  unsigned int v19;
  void **v20;
  unsigned int v21;
  unsigned int v22;
  BOOL v23;
  id *v24;
  unsigned int v25;
  unsigned int v26;
  id *v27;
  id *v28;
  SEL *v29;
  id *v30;
  void *v31;
  id v32;
  id v33;
  unsigned int v34;
  unsigned int v35;
  id *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t result;
  id *v42;
  void **v44;
  id *v45;
  id *v47;
  char *v48;
  void **v49;
  id *v50;

  v4 = a2;
  v5 = __src;
  v6 = (char *)a2 - (char *)__src;
  v7 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0)
    v7 = (char *)a2 - (char *)__src;
  v8 = v7 >> 3;
  v9 = a3 - (_QWORD)a2;
  v10 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v10 = a3 - (_QWORD)a2;
  v11 = v10 >> 3;
  v50 = __src;
  v49 = a4;
  if (v8 >= v10 >> 3)
  {
    if (v9 < -7)
      goto LABEL_56;
    if (a4 != a2 || &a2[v11] <= a4)
      memmove(a4, a2, 8 * v11);
    v27 = &a4[v11];
    v48 = (char *)v27;
    v50 = v4;
    if (v5 >= v4 || v9 < 8)
    {
LABEL_55:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v50, &v49, &v48);
      return 1;
    }
    v28 = (id *)(a3 - 8);
    v29 = (SEL *)&unk_2508DF000;
    v30 = v4;
    v42 = v5;
    while (1)
    {
      v45 = v28 + 1;
      v47 = v4;
      v31 = *--v30;
      v32 = *(v27 - 1);
      v33 = v31;
      v34 = objc_msgSend(v32, v29[381]);
      if (v34 == objc_msgSend(v33, v29[381]))
      {
        v35 = objc_msgSend(v32, sel_state);
        if (v35 == objc_msgSend(v33, sel_state))
        {

          v29 = (SEL *)&unk_2508DF000;
          v36 = v47;
LABEL_49:
          v48 = (char *)(v27 - 1);
          if (v45 < v27 || v28 >= v27 || v45 != v27)
            *v28 = *(v27 - 1);
          v30 = v36;
          --v27;
          if (v36 <= v5)
            goto LABEL_55;
          goto LABEL_54;
        }
        v39 = objc_msgSend(v32, sel_state);
        v40 = objc_msgSend(v33, sel_state);

        v23 = v40 >= v39;
        v5 = v42;
        v29 = (SEL *)&unk_2508DF000;
        v36 = v47;
        if (v23)
          goto LABEL_49;
      }
      else
      {
        v37 = objc_msgSend(v32, v29[381]);
        v38 = objc_msgSend(v33, v29[381]);

        v23 = v37 >= v38;
        v5 = v42;
        v36 = v47;
        if (v23)
          goto LABEL_49;
      }
      if (v45 != v36 || v28 >= v36)
        *v28 = *v30;
      v50 = v30;
      if (v30 <= v5)
        goto LABEL_55;
LABEL_54:
      --v28;
      v4 = v30;
      if (v27 <= a4)
        goto LABEL_55;
    }
  }
  if (v6 >= -7)
  {
    if (a4 != __src || &__src[v8] <= a4)
      memmove(a4, __src, 8 * v8);
    v44 = &a4[v8];
    v48 = (char *)v44;
    if ((unint64_t)v4 < a3 && v6 >= 8)
    {
      v12 = (SEL *)&unk_2508DF000;
      v13 = a4;
      while (1)
      {
        v14 = v5;
        v15 = *v13;
        v16 = *v4;
        v17 = v15;
        v18 = objc_msgSend(v16, sel_sortOrder);
        if (v18 == objc_msgSend(v17, sel_sortOrder))
        {
          v19 = objc_msgSend(v16, v12[319]);
          if (v19 == objc_msgSend(v17, v12[319]))
          {

            v20 = v14;
LABEL_23:
            if (v20 != v13)
              *v20 = *v13;
            v49 = ++v13;
            v24 = v4;
            goto LABEL_27;
          }
          v25 = objc_msgSend(v16, v12[319]);
          v26 = objc_msgSend(v17, v12[319]);

          v23 = v26 >= v25;
          v20 = v14;
          if (v23)
            goto LABEL_23;
        }
        else
        {
          v21 = objc_msgSend(v16, sel_sortOrder);
          v22 = objc_msgSend(v17, sel_sortOrder);

          v23 = v21 >= v22;
          v20 = v14;
          if (v23)
            goto LABEL_23;
        }
        v24 = v4 + 1;
        if (v20 >= v4 && v20 < v24)
        {
          v12 = (SEL *)&unk_2508DF000;
          if (v20 != v4)
            *v20 = *v4;
          goto LABEL_28;
        }
        *v20 = *v4;
LABEL_27:
        v12 = (SEL *)&unk_2508DF000;
LABEL_28:
        v5 = v20 + 1;
        if (v13 < v44)
        {
          v4 = v24;
          if ((unint64_t)v24 < a3)
            continue;
        }
        v50 = v5;
        goto LABEL_55;
      }
    }
    goto LABEL_55;
  }
LABEL_56:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized CAFPairedDevicesInformation.deviceImage.getter()
{
  id v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  uint64_t result;

  v0 = objc_msgSend((id)objc_opt_self(), sel__preferredFontForTextStyle_variant_, 0, 0x10000);
  if (v0)
  {
    v1 = v0;
    v2 = (void *)objc_opt_self();
    v3 = objc_msgSend(v2, sel_configurationWithFont_scale_, v1, 2);
    v4 = objc_msgSend(v2, sel_configurationWithPointSize_, 40.0);
    v5 = objc_msgSend(v3, sel_configurationByApplyingConfiguration_, v4);

    v6 = v5;
    v7 = (void *)MEMORY[0x23B812F68](0x672E656E6F687069, 0xEB00000000336E65);
    v8 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_withConfiguration_, v7, v6);

    if (v8)
    {

      return (uint64_t)v8;
    }
    __break(1u);
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo15CAFPairedDeviceCG_5CAFUI35CAFUIImageRepresentableItemProtocol_ps5NeverOTg506_sSo27d39DevicesInformationC5CAFUIE5itemsSayAC35ghij15_pGvgAcE_pSo0A6E6CXEfU_So0dnO0CTf1cn_nTf4ng_n(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  id v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  id v12;
  __int128 v13[2];
  uint64_t v14;

  v2 = v1;
  if (a1 >> 62)
    goto LABEL_18;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v5 = MEMORY[0x24BEE4AF8];
    if (!v4)
      return v5;
    v14 = MEMORY[0x24BEE4AF8];
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 & ~(v4 >> 63), 0);
    if (v4 < 0)
      break;
    v7 = 0;
    v5 = v14;
    while (v4 != v7)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v8 = (id)MEMORY[0x23B813418](v7, a1);
      else
        v8 = *(id *)(a1 + 8 * v7 + 32);
      v9 = v8;
      v12 = v8;
      closure #1 in CAFPairedDevicesInformation.items.getter(&v12, v13);
      if (v2)
      {
        swift_release();

        return v5;
      }
      v2 = 0;

      v14 = v5;
      v11 = *(_QWORD *)(v5 + 16);
      v10 = *(_QWORD *)(v5 + 24);
      if (v11 >= v10 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
        v5 = v14;
      }
      ++v7;
      *(_QWORD *)(v5 + 16) = v11 + 1;
      outlined init with take of CAFUIImageRepresentableItemProtocol(v13, v5 + 40 * v11 + 32);
      if (v4 == v7)
        return v5;
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t outlined init with copy of CAFUIImageRepresentableItemProtocol(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of CAFUIImageRepresentableItemProtocol(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_2375125F0()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  if (*(_QWORD *)(v0 + 80))
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);

  return swift_deallocObject();
}

uint64_t __swift_destroy_boxed_opaque_existential_1Tm(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t outlined assign with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

BOOL static CAFUIAutomakerSettingConfiguration.AccessoryType.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void CAFUIAutomakerSettingConfiguration.AccessoryType.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int CAFUIAutomakerSettingConfiguration.AccessoryType.hashValue.getter(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CAFUIAutomakerSettingConfiguration.AccessoryType()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance CAFUIAutomakerSettingConfiguration.AccessoryType()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CAFUIAutomakerSettingConfiguration.AccessoryType()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t CAFUIAutomakerSettingConfiguration.listContentConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of UIListContentConfiguration?(v1, a1, &demangling cache variable for type metadata for UIListContentConfiguration?);
}

void *CAFUIAutomakerSettingConfiguration.detailView.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + *(int *)(type metadata accessor for CAFUIAutomakerSettingConfiguration(0) + 20));
  v2 = v1;
  return v1;
}

uint64_t type metadata accessor for CAFUIAutomakerSettingConfiguration(uint64_t a1)
{
  return type metadata accessor for CAFUIAutomakerSettingConfiguration(a1, (uint64_t *)&type metadata singleton initialization cache for CAFUIAutomakerSettingConfiguration);
}

uint64_t CAFUIAutomakerSettingConfiguration.accessory.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CAFUIAutomakerSettingConfiguration(0) + 24));
}

uint64_t CAFUIAutomakerSettingConfiguration.showLimitedUISymbol.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CAFUIAutomakerSettingConfiguration(0) + 28));
}

id CAFUIAutomakerSettingCell.primaryTextColor.getter()
{
  char *v0;
  void *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t (*v6)(uint64_t, uint64_t);
  id v7;
  uint64_t v8;
  id v9;

  v1 = v0;
  v2 = &v0[OBJC_IVAR____TtC5CAFUI25CAFUIAutomakerSettingCell_representable];
  swift_beginAccess();
  v3 = *(_QWORD *)v2;
  if (*(_QWORD *)v2)
  {
    v4 = *((_QWORD *)v2 + 1);
    ObjectType = swift_getObjectType();
    v6 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 16);
    swift_unknownObjectRetain();
    if ((v6(ObjectType, v4) & 1) == 0)
    {
      v7 = objc_msgSend((id)objc_opt_self(), sel_grayColor);
      goto LABEL_13;
    }
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v4 + 32))(ObjectType, v4) & 1) != 0
      && ((objc_msgSend(v1, sel_isSelected) & 1) != 0 || objc_msgSend(v1, sel_isHighlighted)))
    {
      v7 = objc_msgSend((id)objc_opt_self(), sel__carSystemFocusLabelColor);
LABEL_13:
      v9 = v7;
      swift_unknownObjectRelease();
      return v9;
    }
    swift_getObjectType();
    if (swift_conformsToProtocol2())
      v8 = v3;
    else
      v8 = 0;
    if (v8)
    {
      v7 = objc_msgSend((id)objc_opt_self(), sel__carSystemFocusColor);
      goto LABEL_13;
    }
    swift_unknownObjectRelease();
  }
  return objc_msgSend((id)objc_opt_self(), sel_labelColor);
}

uint64_t CAFUIAutomakerSettingCell.isHighlightable.getter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  char v8;

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC5CAFUI25CAFUIAutomakerSettingCell_representable);
  swift_beginAccess();
  if (*v1)
  {
    v2 = v1[1];
    ObjectType = swift_getObjectType();
    v4 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 32);
    swift_unknownObjectRetain();
    if ((v4(ObjectType, v2) & 1) != 0)
    {
      if (*v1)
      {
        v5 = v1[1];
        v6 = swift_getObjectType();
        v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 16);
        swift_unknownObjectRetain();
        v8 = v7(v6, v5);
        swift_unknownObjectRelease();
      }
      else
      {
        v8 = 1;
      }
    }
    else
    {
      v8 = 0;
    }
    swift_unknownObjectRelease();
  }
  else
  {
    v8 = 1;
  }
  return v8 & 1;
}

uint64_t CAFUIAutomakerSettingCell.isCellEnabled.getter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t (*v4)(uint64_t, uint64_t);
  char v5;

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC5CAFUI25CAFUIAutomakerSettingCell_representable);
  swift_beginAccess();
  if (*v1)
  {
    v2 = v1[1];
    ObjectType = swift_getObjectType();
    v4 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 16);
    swift_unknownObjectRetain();
    v5 = v4(ObjectType, v2);
    swift_unknownObjectRelease();
  }
  else
  {
    v5 = 1;
  }
  return v5 & 1;
}

uint64_t key path setter for CAFUIAutomakerSettingCell.representable : CAFUIAutomakerSettingCell(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = swift_unknownObjectRetain();
  specialized CAFUIAutomakerSettingCell.representable.setter(v2, v1);
  return swift_unknownObjectRelease();
}

uint64_t CAFUIAutomakerSettingCell.representable.getter()
{
  swift_beginAccess();
  return swift_unknownObjectRetain();
}

uint64_t CAFUIAutomakerSettingCell.configure(for:isParentCell:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  char v6;
  _BYTE *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t ObjectType;
  void (*v11)(uint64_t, uint64_t, uint64_t);

  v6 = a3 & (a1 != 0);
  v7 = (_BYTE *)(v3 + OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_isParentCell);
  swift_beginAccess();
  *v7 = v6;
  v8 = (_QWORD *)(v3 + OBJC_IVAR____TtC5CAFUI25CAFUIAutomakerSettingCell_representable);
  swift_beginAccess();
  *v8 = a1;
  v8[1] = a2;
  swift_unknownObjectRetain_n();
  swift_unknownObjectRelease();
  if (*v8)
  {
    v9 = v8[1];
    ObjectType = swift_getObjectType();
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 64);
    swift_unknownObjectRetain();
    v11(v3, ObjectType, v9);
    swift_unknownObjectRelease();
  }
  else
  {
    *v7 = 0;
  }
  return swift_unknownObjectRelease();
}

Swift::Void __swiftcall CAFUIAutomakerSettingCell.prepareForReuse()()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE *v6;
  objc_class *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char *v12;
  uint64_t v13;
  uint64_t ObjectType;
  void (*v15)(char *, uint64_t, uint64_t);
  char *v16;
  _BYTE v17[24];
  objc_super v18;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  v2 = MEMORY[0x24BDAC7A8](v1);
  v4 = &v17[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v2);
  v6 = &v17[-v5];
  v7 = (objc_class *)type metadata accessor for CAFUIAutomakerSettingCell(0);
  v18.receiver = v0;
  v18.super_class = v7;
  objc_msgSendSuper2(&v18, sel_prepareForReuse);
  v8 = type metadata accessor for CAFUIAutomakerSettingConfiguration(0);
  v9 = *(_QWORD *)(v8 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v6, 1, 1, v8);
  v10 = (uint64_t)&v0[OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_automakerSettingConfiguration];
  swift_beginAccess();
  outlined assign with copy of CAFUIAutomakerSettingConfiguration?((uint64_t)v6, v10);
  swift_endAccess();
  outlined init with copy of UIListContentConfiguration?(v10, (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  v11 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v9 + 48))(v4, 1, v8);
  outlined destroy of CAFUIAutomakerSettingConfiguration?((uint64_t)v4);
  if (v11 != 1)
    CAFUITileBaseCell.setupViews()();
  outlined destroy of CAFUIAutomakerSettingConfiguration?((uint64_t)v6);
  v12 = &v0[OBJC_IVAR____TtC5CAFUI25CAFUIAutomakerSettingCell_representable];
  swift_beginAccess();
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  swift_unknownObjectRelease();
  if (*(_QWORD *)v12)
  {
    v13 = *((_QWORD *)v12 + 1);
    ObjectType = swift_getObjectType();
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 64);
    swift_unknownObjectRetain();
    v15(v0, ObjectType, v13);
    swift_unknownObjectRelease();
  }
  else
  {
    v16 = &v0[OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_isParentCell];
    swift_beginAccess();
    *v16 = 0;
  }
}

uint64_t CAFUIAutomakerSettingCell.__ivar_destroyer()
{
  return swift_unknownObjectRelease();
}

id CAFUIAutomakerSettingCell.__deallocating_deinit()
{
  return CAFUIAutomakerSettingCell.__deallocating_deinit(0, (uint64_t (*)(void))type metadata accessor for CAFUIAutomakerSettingCell);
}

uint64_t type metadata accessor for CAFUIAutomakerSettingCell(uint64_t a1)
{
  return type metadata accessor for CAFUIAutomakerSettingConfiguration(a1, (uint64_t *)&type metadata singleton initialization cache for CAFUIAutomakerSettingCell);
}

uint64_t type metadata accessor for CAFUIAutomakerSettingConfiguration(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t outlined assign with copy of CAFUIAutomakerSettingConfiguration?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of UIListContentConfiguration?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of CAFUIAutomakerSettingConfiguration?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type CAFUIAutomakerSettingConfiguration.AccessoryType and conformance CAFUIAutomakerSettingConfiguration.AccessoryType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CAFUIAutomakerSettingConfiguration.AccessoryType and conformance CAFUIAutomakerSettingConfiguration.AccessoryType;
  if (!lazy protocol witness table cache variable for type CAFUIAutomakerSettingConfiguration.AccessoryType and conformance CAFUIAutomakerSettingConfiguration.AccessoryType)
  {
    result = MEMORY[0x23B813BE0](&protocol conformance descriptor for CAFUIAutomakerSettingConfiguration.AccessoryType, &type metadata for CAFUIAutomakerSettingConfiguration.AccessoryType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFUIAutomakerSettingConfiguration.AccessoryType and conformance CAFUIAutomakerSettingConfiguration.AccessoryType);
  }
  return result;
}

uint64_t sub_23751312C@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  _OWORD *v3;

  v3 = (_OWORD *)(*a1 + OBJC_IVAR____TtC5CAFUI25CAFUIAutomakerSettingCell_representable);
  swift_beginAccess();
  *a2 = *v3;
  return swift_unknownObjectRetain();
}

uint64_t *initializeBufferWithCopyOfBuffer for CAFUIAutomakerSettingConfiguration(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UIListContentConfiguration();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIListContentConfiguration?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = a3[5];
    v12 = a3[6];
    v13 = *(void **)((char *)a2 + v11);
    *(uint64_t *)((char *)a1 + v11) = (uint64_t)v13;
    *((_BYTE *)a1 + v12) = *((_BYTE *)a2 + v12);
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    v14 = v13;
  }
  return a1;
}

void destroy for CAFUIAutomakerSettingConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for UIListContentConfiguration();
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);

}

char *initializeWithCopy for CAFUIAutomakerSettingConfiguration(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;

  v6 = type metadata accessor for UIListContentConfiguration();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIListContentConfiguration?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[5];
  v10 = a3[6];
  v11 = *(void **)&a2[v9];
  *(_QWORD *)&a1[v9] = v11;
  a1[v10] = a2[v10];
  a1[a3[7]] = a2[a3[7]];
  v12 = v11;
  return a1;
}

char *assignWithCopy for CAFUIAutomakerSettingConfiguration(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;

  v6 = type metadata accessor for UIListContentConfiguration();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIListContentConfiguration?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = a3[5];
  v13 = *(void **)&a1[v12];
  v14 = *(void **)&a2[v12];
  *(_QWORD *)&a1[v12] = v14;
  v15 = v14;

  a1[a3[6]] = a2[a3[6]];
  a1[a3[7]] = a2[a3[7]];
  return a1;
}

char *initializeWithTake for CAFUIAutomakerSettingConfiguration(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UIListContentConfiguration();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIListContentConfiguration?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[6];
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  a1[v9] = a2[v9];
  a1[a3[7]] = a2[a3[7]];
  return a1;
}

char *assignWithTake for CAFUIAutomakerSettingConfiguration(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;

  v6 = type metadata accessor for UIListContentConfiguration();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIListContentConfiguration?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = a3[5];
  v13 = *(void **)&a1[v12];
  *(_QWORD *)&a1[v12] = *(_QWORD *)&a2[v12];

  v14 = a3[7];
  a1[a3[6]] = a2[a3[6]];
  a1[v14] = a2[v14];
  return a1;
}

uint64_t getEnumTagSinglePayload for CAFUIAutomakerSettingConfiguration()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2375136F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIListContentConfiguration?);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for CAFUIAutomakerSettingConfiguration()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237513788(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIListContentConfiguration?);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2;
  return result;
}

void type metadata completion function for CAFUIAutomakerSettingConfiguration()
{
  unint64_t v0;

  type metadata accessor for UIListContentConfiguration?();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void type metadata accessor for UIListContentConfiguration?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for UIListContentConfiguration?)
  {
    type metadata accessor for UIListContentConfiguration();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIListContentConfiguration?);
  }
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for CAFUIAutomakerSettingConfiguration.AccessoryType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CAFUIAutomakerSettingConfiguration.AccessoryType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_2375139C4 + 4 * byte_2375794E5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_2375139F8 + 4 * byte_2375794E0[v4]))();
}

uint64_t sub_2375139F8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_237513A00(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x237513A08);
  return result;
}

uint64_t sub_237513A14(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x237513A1CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_237513A20(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_237513A28(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for CAFUIAutomakerSettingConfiguration.AccessoryType(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for CAFUIAutomakerSettingConfiguration.AccessoryType(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for CAFUIAutomakerSettingConfiguration.AccessoryType()
{
  return &type metadata for CAFUIAutomakerSettingConfiguration.AccessoryType;
}

uint64_t ObjC metadata update function for CAFUIAutomakerSettingCell()
{
  return type metadata accessor for CAFUIAutomakerSettingCell(0);
}

uint64_t type metadata completion function for CAFUIAutomakerSettingCell()
{
  return swift_updateClassMetadata2();
}

char *CAFUICollectionHeaderView.init(frame:)(double a1, double a2, double a3, double a4)
{
  char *v4;
  uint64_t v9;
  id v10;
  char *v11;
  char *v12;
  char *v13;
  void *v14;
  uint64_t v15;
  id v16;
  void *v17;
  void *v18;
  uint64_t v19;
  double v20;
  void *v21;
  id v22;
  id v23;
  double v24;
  double v25;
  id v26;
  id v27;
  id v28;
  void *v29;
  void *v30;
  id v31;
  id v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  double v40;
  double v41;
  uint64_t v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  Class isa;
  id v55;
  objc_super v56;

  v9 = OBJC_IVAR____TtC5CAFUI25CAFUICollectionHeaderView_titleLabel;
  v10 = objc_allocWithZone(MEMORY[0x24BEBD708]);
  v11 = v4;
  *(_QWORD *)&v4[v9] = objc_msgSend(v10, sel_init);
  v12 = &v11[OBJC_IVAR____TtC5CAFUI25CAFUICollectionHeaderView_title];
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;

  v56.receiver = v11;
  v56.super_class = (Class)type metadata accessor for CAFUICollectionHeaderView();
  v13 = (char *)objc_msgSendSuper2(&v56, sel_initWithFrame_, a1, a2, a3, a4);
  v14 = (void *)MEMORY[0x23B812F68](0xD000000000000019, 0x8000000237579600);
  objc_msgSend(v13, sel_setAccessibilityIdentifier_, v14);

  v15 = OBJC_IVAR____TtC5CAFUI25CAFUICollectionHeaderView_titleLabel;
  v16 = *(id *)&v13[OBJC_IVAR____TtC5CAFUI25CAFUICollectionHeaderView_titleLabel];
  v17 = (void *)MEMORY[0x23B812F68](0xD00000000000001ELL, 0x800000023757BF90);
  objc_msgSend(v16, sel_setAccessibilityIdentifier_, v17);

  v18 = *(void **)&v13[v15];
  v19 = *MEMORY[0x24BEBE1F0];
  v20 = *MEMORY[0x24BEBB608];
  v21 = (void *)objc_opt_self();
  v22 = v18;
  v23 = objc_msgSend(v21, sel_preferredFontDescriptorWithTextStyle_, v19);
  objc_msgSend(v23, sel_pointSize);
  v25 = v24;

  v26 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD5F0]), sel_initForTextStyle_, v19);
  v27 = objc_msgSend((id)objc_opt_self(), sel_systemFontOfSize_weight_, v25, v20);
  v28 = objc_msgSend(v26, sel_scaledFontForFont_, v27);

  objc_msgSend(v22, sel_setFont_, v28);
  v29 = *(void **)&v13[v15];
  v30 = (void *)objc_opt_self();
  v31 = v29;
  v32 = objc_msgSend(v30, sel_secondaryLabelColor);
  objc_msgSend(v31, sel_setTextColor_, v32);

  v33 = *(void **)&v13[v15];
  objc_msgSend(v33, sel_setNumberOfLines_, 1);
  objc_msgSend(v33, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v13, sel_addSubview_, v33);
  v34 = objc_msgSend(v13, sel_topAnchor);
  v35 = objc_msgSend(v33, sel_topAnchor);
  v36 = objc_msgSend(v34, sel_constraintEqualToAnchor_constant_, v35, 0.0);

  v37 = objc_msgSend(v13, sel_bottomAnchor);
  v38 = objc_msgSend(*(id *)&v13[v15], sel_bottomAnchor);
  v39 = objc_msgSend(v37, sel_constraintEqualToAnchor_constant_, v38, 4.0);

  LODWORD(v40) = 1148846080;
  objc_msgSend(v36, sel_setPriority_, v40);
  LODWORD(v41) = 1148846080;
  objc_msgSend(v39, sel_setPriority_, v41);
  v55 = (id)objc_opt_self();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v42 = swift_allocObject();
  *(_OWORD *)(v42 + 16) = xmmword_237579090;
  v43 = objc_msgSend(*(id *)&v13[v15], sel_leadingAnchor);
  v44 = objc_msgSend(v13, sel_layoutMarginsGuide);
  v45 = objc_msgSend(v44, sel_leadingAnchor);

  v46 = objc_msgSend(v43, sel_constraintEqualToAnchor_, v45);
  *(_QWORD *)(v42 + 32) = v46;
  v47 = objc_msgSend(*(id *)&v13[v15], sel_trailingAnchor);
  v48 = objc_msgSend(v13, sel_layoutMarginsGuide);
  v49 = objc_msgSend(v48, sel_trailingAnchor);

  v50 = objc_msgSend(v47, sel_constraintEqualToAnchor_, v49);
  *(_QWORD *)(v42 + 40) = v50;
  *(_QWORD *)(v42 + 48) = v36;
  *(_QWORD *)(v42 + 56) = v39;
  specialized Array._endMutation()();
  type metadata accessor for NSLayoutConstraint();
  v51 = v36;
  v52 = v39;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v55, sel_activateConstraints_, isa);

  return v13;
}

id CAFUICollectionHeaderView.__deallocating_deinit(uint64_t a1)
{
  return CAFUIAutomakerSettingCell.__deallocating_deinit(a1, type metadata accessor for CAFUICollectionHeaderView);
}

id CAFUIAutomakerSettingCell.__deallocating_deinit(uint64_t a1, uint64_t (*a2)(void))
{
  void *v2;
  objc_super v4;

  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, sel_dealloc);
}

uint64_t type metadata accessor for CAFUICollectionHeaderView()
{
  return objc_opt_self();
}

char *CAFUICollectionFooterView.init(frame:)(double a1, double a2, double a3, double a4)
{
  char *v4;
  uint64_t v9;
  id v10;
  char *v11;
  char *v12;
  char *v13;
  void *v14;
  uint64_t v15;
  id v16;
  void *v17;
  void *v18;
  uint64_t v19;
  double v20;
  void *v21;
  id v22;
  id v23;
  double v24;
  double v25;
  id v26;
  id v27;
  id v28;
  void *v29;
  void *v30;
  id v31;
  id v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  double v40;
  double v41;
  uint64_t v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  Class isa;
  id v55;
  objc_super v56;

  v9 = OBJC_IVAR____TtC5CAFUI25CAFUICollectionFooterView_titleLabel;
  v10 = objc_allocWithZone(MEMORY[0x24BEBD708]);
  v11 = v4;
  *(_QWORD *)&v4[v9] = objc_msgSend(v10, sel_init);
  v12 = &v11[OBJC_IVAR____TtC5CAFUI25CAFUICollectionFooterView_title];
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;

  v56.receiver = v11;
  v56.super_class = (Class)type metadata accessor for CAFUICollectionFooterView();
  v13 = (char *)objc_msgSendSuper2(&v56, sel_initWithFrame_, a1, a2, a3, a4);
  v14 = (void *)MEMORY[0x23B812F68](0xD000000000000019, 0x8000000237579620);
  objc_msgSend(v13, sel_setAccessibilityIdentifier_, v14);

  v15 = OBJC_IVAR____TtC5CAFUI25CAFUICollectionFooterView_titleLabel;
  v16 = *(id *)&v13[OBJC_IVAR____TtC5CAFUI25CAFUICollectionFooterView_titleLabel];
  v17 = (void *)MEMORY[0x23B812F68](0xD00000000000001ELL, 0x800000023757BF70);
  objc_msgSend(v16, sel_setAccessibilityIdentifier_, v17);

  v18 = *(void **)&v13[v15];
  v19 = *MEMORY[0x24BEBE1F0];
  v20 = *MEMORY[0x24BEBB608];
  v21 = (void *)objc_opt_self();
  v22 = v18;
  v23 = objc_msgSend(v21, sel_preferredFontDescriptorWithTextStyle_, v19);
  objc_msgSend(v23, sel_pointSize);
  v25 = v24;

  v26 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD5F0]), sel_initForTextStyle_, v19);
  v27 = objc_msgSend((id)objc_opt_self(), sel_systemFontOfSize_weight_, v25, v20);
  v28 = objc_msgSend(v26, sel_scaledFontForFont_, v27);

  objc_msgSend(v22, sel_setFont_, v28);
  v29 = *(void **)&v13[v15];
  v30 = (void *)objc_opt_self();
  v31 = v29;
  v32 = objc_msgSend(v30, sel_secondaryLabelColor);
  objc_msgSend(v31, sel_setTextColor_, v32);

  v33 = *(void **)&v13[v15];
  objc_msgSend(v33, sel_setNumberOfLines_, 6);
  objc_msgSend(v33, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v13, sel_addSubview_, v33);
  v34 = objc_msgSend(v13, sel_topAnchor);
  v35 = objc_msgSend(v33, sel_topAnchor);
  v36 = objc_msgSend(v34, sel_constraintEqualToAnchor_constant_, v35, -4.0);

  v37 = objc_msgSend(v13, sel_bottomAnchor);
  v38 = objc_msgSend(*(id *)&v13[v15], sel_bottomAnchor);
  v39 = objc_msgSend(v37, sel_constraintEqualToAnchor_constant_, v38, 0.0);

  LODWORD(v40) = 1148846080;
  objc_msgSend(v36, sel_setPriority_, v40);
  LODWORD(v41) = 1148846080;
  objc_msgSend(v39, sel_setPriority_, v41);
  v55 = (id)objc_opt_self();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v42 = swift_allocObject();
  *(_OWORD *)(v42 + 16) = xmmword_237579090;
  v43 = objc_msgSend(*(id *)&v13[v15], sel_leadingAnchor);
  v44 = objc_msgSend(v13, sel_layoutMarginsGuide);
  v45 = objc_msgSend(v44, sel_leadingAnchor);

  v46 = objc_msgSend(v43, sel_constraintEqualToAnchor_, v45);
  *(_QWORD *)(v42 + 32) = v46;
  v47 = objc_msgSend(*(id *)&v13[v15], sel_trailingAnchor);
  v48 = objc_msgSend(v13, sel_layoutMarginsGuide);
  v49 = objc_msgSend(v48, sel_trailingAnchor);

  v50 = objc_msgSend(v47, sel_constraintEqualToAnchor_, v49);
  *(_QWORD *)(v42 + 40) = v50;
  *(_QWORD *)(v42 + 48) = v36;
  *(_QWORD *)(v42 + 56) = v39;
  specialized Array._endMutation()();
  type metadata accessor for NSLayoutConstraint();
  v51 = v36;
  v52 = v39;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v55, sel_activateConstraints_, isa);

  return v13;
}

void @objc CAFUICollectionHeaderView.init(coder:)(char *a1, uint64_t a2, void *a3, uint64_t *a4, _QWORD *a5)
{
  uint64_t v8;
  id v9;
  id v10;
  char *v11;

  v8 = *a4;
  v9 = objc_allocWithZone(MEMORY[0x24BEBD708]);
  v10 = a3;
  *(_QWORD *)&a1[v8] = objc_msgSend(v9, sel_init);
  v11 = &a1[*a5];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void @objc CAFUICollectionHeaderView.prepareForReuse()(void *a1, uint64_t a2, uint64_t (*a3)(void), _QWORD *a4)
{
  char *v5;
  objc_super v6;

  v6.receiver = a1;
  v6.super_class = (Class)a3();
  v5 = (char *)v6.receiver;
  objc_msgSendSuper2(&v6, sel_prepareForReuse);
  objc_msgSend(*(id *)&v5[*a4], sel_setText_, 0, v6.receiver, v6.super_class);

}

id CAFUICollectionFooterView.__deallocating_deinit(uint64_t a1)
{
  return CAFUIAutomakerSettingCell.__deallocating_deinit(a1, type metadata accessor for CAFUICollectionFooterView);
}

uint64_t @objc CAFUICollectionHeaderView.__ivar_destroyer(uint64_t a1, uint64_t a2, _QWORD *a3)
{

  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for CAFUICollectionFooterView()
{
  return objc_opt_self();
}

uint64_t specialized CAFUIAutomakerSettingCell.representable.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t ObjectType;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  _BYTE *v10;

  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC5CAFUI25CAFUIAutomakerSettingCell_representable);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  if (*v5)
  {
    v6 = v5[1];
    ObjectType = swift_getObjectType();
    v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 64);
    swift_unknownObjectRetain();
    v8(v2, ObjectType, v6);
    return swift_unknownObjectRelease();
  }
  else
  {
    v10 = (_BYTE *)(v2 + OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_isParentCell);
    result = swift_beginAccess();
    *v10 = 0;
  }
  return result;
}

_QWORD *SoundSettingPage.init(title:viewController:canReset:resetAction:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  id v10;
  uint64_t v11;
  _QWORD *result;
  void *v13;
  void *v14;

  v7[2] = a1;
  v7[3] = a2;
  v7[4] = a3;
  v7[5] = 0;
  v7[6] = 0;
  v7[7] = a4;
  v7[8] = a5;
  v10 = a3;
  swift_retain();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(0);
  v11 = v7[5];
  v7[5] = a6;
  v7[6] = a7;
  swift_retain();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v11);
  result = objc_msgSend(v10, sel_view);
  if (result)
  {
    v13 = result;
    result = objc_msgSend((id)objc_opt_self(), sel_tableBackgroundColor);
    if (result)
    {
      v14 = result;
      objc_msgSend(v13, sel_setBackgroundColor_, result);

      swift_release();
      swift_release();
      return v7;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t SoundSettingPage.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 40));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 56));
  return swift_deallocClassInstance();
}

unint64_t CAFUISoundSettingsViewController.activePage.getter()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  unint64_t result;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC5CAFUI32CAFUISoundSettingsViewController_pages);
  v2 = v1 >> 62;
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v3)
      return v3;
  }
  else
  {
    v3 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v3)
      return v3;
  }
  v4 = *(void **)(v0 + OBJC_IVAR____TtC5CAFUI32CAFUISoundSettingsViewController_segmentedControl);
  if (!v4)
  {
    if (v2)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v5 = (id)result;
      if (result)
        goto LABEL_10;
    }
    else
    {
      v5 = *(id *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v5)
      {
LABEL_10:
        if ((v1 & 0xC000000000000001) != 0)
        {
          v3 = MEMORY[0x23B813418](0, v1);
        }
        else
        {
          if (!*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_27;
          }
          v3 = *(_QWORD *)(v1 + 32);
          swift_retain();
        }
        swift_bridgeObjectRelease();
        return v3;
      }
    }
    swift_bridgeObjectRelease();
    return 0;
  }
  v5 = v4;
  if (((unint64_t)objc_msgSend(v5, sel_selectedSegmentIndex) & 0x8000000000000000) != 0)
  {
LABEL_7:

    return 0;
  }
  v6 = objc_msgSend(v5, sel_selectedSegmentIndex);
  v7 = (uint64_t)v6;
  if (v2)
  {
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v7 >= v9)
      goto LABEL_7;
  }
  else if ((uint64_t)v6 >= *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_7;
  }
  result = (unint64_t)objc_msgSend(v5, sel_selectedSegmentIndex);
  if ((v1 & 0xC000000000000001) != 0)
  {
LABEL_27:
    v3 = MEMORY[0x23B813418](result, v1);

    return v3;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v3 = *(_QWORD *)(v1 + 8 * result + 32);
    swift_retain();

    return v3;
  }
  __break(1u);
  return result;
}

char *CAFUISoundSettingsViewController.__allocating_init(audioSettings:audioLogo:)(void *a1, void *a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  return CAFUISoundSettingsViewController.init(audioSettings:audioLogo:)(a1, a2);
}

char *CAFUISoundSettingsViewController.init(audioSettings:audioLogo:)(void *a1, void *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  id v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  SEL *v30;
  id v31;
  void *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  void *v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  char *v52;
  id v53;
  void *v54;
  id v55;
  uint64_t v56;
  id v57;
  void *v58;
  uint64_t v59;
  id v60;
  id v61;
  uint64_t v62;
  id v63;
  id v64;
  id v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  __int128 v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  id v81;
  id v82;
  Class isa;
  id v84;
  void *v85;
  id v86;
  id v87;
  void *v88;
  void *v89;
  id v90;
  void *v91;
  void *v92;
  void *v93;
  Swift::String_optional v94;
  void *v95;
  char *v96;
  objc_class *v97;
  char *v98;
  id v99;
  void *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  void *v122;
  id v123;
  void *v124;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  id v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  char *v142;
  id v143;
  id v144;
  char *v145;
  uint64_t v146;
  id v147;
  id v148;
  __int128 v149;
  char v150;
  SEL *v151;
  uint64_t v152;
  _QWORD *v153;
  objc_super v154;
  unint64_t v155;
  UIImage_optional v156;
  UIAction_optional v157;
  UIMenu_optional v158;

  v141 = a2;
  v148 = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<Int8, Never>, NSRunLoop>);
  v139 = *(_QWORD *)(v3 - 8);
  v140 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v138 = (char *)&v126 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);
  MEMORY[0x24BDAC7A8](v5);
  v145 = (char *)&v126 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<Int8?, Never>, NSRunLoop>);
  v128 = *(_QWORD *)(v129 - 8);
  MEMORY[0x24BDAC7A8](v129);
  v127 = (char *)&v126 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.MergeMany<AnyPublisher<Int8, Never>>);
  v131 = *(_QWORD *)(v132 - 8);
  MEMORY[0x24BDAC7A8](v132);
  v130 = (char *)&v126 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v135 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.RemoveDuplicates<Publishers.MergeMany<AnyPublisher<Int8, Never>>>);
  v134 = *(_QWORD *)(v135 - 8);
  MEMORY[0x24BDAC7A8](v135);
  v133 = (char *)&v126 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_unknownObjectWeakInit();
  v10 = v2;
  v11 = MEMORY[0x24BEE4AF8];
  if ((MEMORY[0x24BEE4AF8] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
    v12 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x24BEE4AF8]);
  else
    v12 = MEMORY[0x24BEE4B08];
  v142 = v10;
  *(_QWORD *)&v10[OBJC_IVAR____TtC5CAFUI32CAFUISoundSettingsViewController_cancellables] = v12;
  v13 = v148;
  swift_unknownObjectWeakAssign();
  v155 = v11;
  v14 = objc_msgSend(v13, sel_soundDistribution);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFSoundDistribution);
  lazy protocol witness table accessor for type CAFSoundDistribution and conformance CAFSoundDistribution((unint64_t *)&lazy protocol witness table cache variable for type CAFSoundDistribution and conformance CAFSoundDistribution, (unint64_t *)&lazy cache variable for type metadata for CAFSoundDistribution, 0x24BE15000, MEMORY[0x24BE100F0]);
  v15 = (void *)CAFObserved<>.observable.getter();
  type metadata accessor for CAFSoundDistributionObservable();
  lazy protocol witness table accessor for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey(&lazy protocol witness table cache variable for type CAFSoundDistributionObservable and conformance CAFSoundDistributionObservable, (uint64_t (*)(uint64_t))MEMORY[0x24BE100C0], MEMORY[0x24BE10090]);
  v144 = v15;
  v16 = ObservedObject.init(wrappedValue:)();
  v18 = v17;
  v19 = (void *)MEMORY[0x23B812F68](0xD000000000000015, 0x800000023757BFB0);
  v20 = CAFUILocalizedStringForKey(v19);

  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v23 = v22;

  *(_QWORD *)&v149 = v16;
  *((_QWORD *)&v149 + 1) = v18;
  v150 = 0;
  v24 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIHostingController<CAFUIBalanceFadeView>));
  v143 = v18;
  v25 = (void *)UIHostingController.init(rootView:)();
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = v14;
  v27 = swift_allocObject();
  *(_QWORD *)(v27 + 16) = v14;
  type metadata accessor for SoundSettingPage();
  v28 = swift_allocObject();
  v29 = v14;
  v146 = v28;
  v147 = v29;
  SoundSettingPage.init(title:viewController:canReset:resetAction:)(v21, v23, v25, (uint64_t)partial apply for closure #1 in CAFUISoundSettingsViewController.init(audioSettings:audioLogo:), v26, (uint64_t)partial apply for closure #2 in CAFUISoundSettingsViewController.init(audioSettings:audioLogo:), v27);
  v30 = (SEL *)&unk_2508DF000;
  v31 = objc_msgSend(v13, sel_equalizers);
  if (!v31)
    goto LABEL_18;
  v32 = v31;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFEqualizer);
  v33 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v33 >> 62)
  {
    swift_bridgeObjectRetain();
    v68 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v34 = v33;
    if (v68)
      goto LABEL_6;
    goto LABEL_17;
  }
  v34 = v33;
  if (!*(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_17:
    swift_bridgeObjectRelease();
LABEL_18:
    v69 = swift_retain();
    MEMORY[0x23B81301C](v69);
    if (*(_QWORD *)((v155 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v155 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    v51 = (void *)MEMORY[0x24BEE4AF8];
    v52 = v142;
    goto LABEL_21;
  }
LABEL_6:
  v35 = specialized CAFUIEqualizerGroup.init(equalizers:)(v34);
  v37 = v36;
  if (*(_QWORD *)(v36 + 16) > 3uLL)
  {
    v38 = (void *)MEMORY[0x23B812F68](0xD000000000000012, 0x800000023757BFF0);
    v39 = CAFUILocalizedStringForKey(v38);

    v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v42 = v41;

    *(_QWORD *)&v149 = v35;
    *((_QWORD *)&v149 + 1) = v37;
    v43 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIHostingController<CAFUIEqualizerGroup>));
    v44 = (void *)UIHostingController.init(rootView:)();
    v45 = swift_allocObject();
    v46 = v148;
    *(_QWORD *)(v45 + 16) = v148;
    v47 = swift_allocObject();
    *(_QWORD *)(v47 + 16) = v46;
    swift_allocObject();
    v48 = v46;
    SoundSettingPage.init(title:viewController:canReset:resetAction:)(v40, v42, v44, (uint64_t)partial apply for closure #5 in CAFUISoundSettingsViewController.init(audioSettings:audioLogo:), v45, (uint64_t)partial apply for closure #6 in CAFUISoundSettingsViewController.init(audioSettings:audioLogo:), v47);
    v49 = swift_retain();
    MEMORY[0x23B81301C](v49);
    if (*(_QWORD *)((v155 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(_QWORD *)((v155 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_8;
    goto LABEL_63;
  }
  v53 = v143;
  v54 = (void *)MEMORY[0x23B812F68](0x53474E4954544553, 0xEE00444E554F535FLL);
  v55 = CAFUILocalizedStringForKey(v54);

  v136 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v126 = v56;

  *(_QWORD *)&v149 = v16;
  *((_QWORD *)&v149 + 1) = v53;
  v150 = 0;
  v151 = (SEL *)v35;
  v152 = v37;
  v57 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIHostingController<CAFUISoundView>));
  v137 = v53;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v58 = (void *)UIHostingController.init(rootView:)();
  v59 = swift_allocObject();
  v61 = v147;
  v60 = v148;
  *(_QWORD *)(v59 + 16) = v148;
  *(_QWORD *)(v59 + 24) = v61;
  v62 = swift_allocObject();
  *(_QWORD *)(v62 + 16) = v61;
  *(_QWORD *)(v62 + 24) = v60;
  swift_allocObject();
  v63 = v61;
  v64 = v60;
  v65 = v63;
  v66 = v64;
  SoundSettingPage.init(title:viewController:canReset:resetAction:)(v136, v126, v58, (uint64_t)partial apply for closure #3 in CAFUISoundSettingsViewController.init(audioSettings:audioLogo:), v59, (uint64_t)partial apply for closure #4 in CAFUISoundSettingsViewController.init(audioSettings:audioLogo:), v62);
  v67 = swift_retain();
  MEMORY[0x23B81301C](v67);
  if (*(_QWORD *)((v155 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v155 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v51 = (void *)MEMORY[0x24BEE4AF8];
  v52 = v142;
  v30 = (SEL *)&unk_2508DF000;
LABEL_21:
  v70 = v155;
  v71 = OBJC_IVAR____TtC5CAFUI32CAFUISoundSettingsViewController_pages;
  *(_QWORD *)&v52[OBJC_IVAR____TtC5CAFUI32CAFUISoundSettingsViewController_pages] = v155;
  if (v70 >> 62)
  {
    while (1)
    {
      swift_bridgeObjectRetain_n();
      v80 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v80 < 2)
        break;
LABEL_23:
      v73 = *(_QWORD *)&v52[v71];
      if (v73 >> 62)
      {
        swift_bridgeObjectRetain();
        v74 = _CocoaArrayWrapper.endIndex.getter();
        if (!v74)
        {
LABEL_39:
          swift_bridgeObjectRelease();
LABEL_40:
          v82 = objc_allocWithZone((Class)type metadata accessor for CAFUISegmentedControl());
          isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          v84 = objc_msgSend(v82, sel_initWithItems_, isa);

          v85 = (void *)objc_opt_self();
          v86 = v84;
          v87 = objc_msgSend(v85, sel_secondarySystemFillColor);
          objc_msgSend(v86, sel_setSelectedSegmentTintColor_, v87);

          v81 = v86;
          v88 = (void *)MEMORY[0x23B812F68](0xD00000000000001DLL, 0x800000023757BFD0);
          objc_msgSend(v81, sel_setAccessibilityIdentifier_, v88);

          v30 = (SEL *)&unk_2508DF000;
          goto LABEL_41;
        }
      }
      else
      {
        v74 = *(_QWORD *)((v73 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v74)
          goto LABEL_39;
      }
      v153 = v51;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v74 & ~(v74 >> 63), 0);
      if (v74 < 0)
      {
        __break(1u);
LABEL_63:
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_8:
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        v50 = swift_retain();
        MEMORY[0x23B81301C](v50);
        v51 = (void *)MEMORY[0x24BEE4AF8];
        v52 = v142;
        if (*(_QWORD *)((v155 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v155 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        swift_release();
        v30 = (SEL *)&unk_2508DF000;
        goto LABEL_21;
      }
      v51 = 0;
      v75 = v153;
      v71 = v73 & 0xC000000000000001;
      v30 = (SEL *)MEMORY[0x24BEE0D00];
      while ((void *)v74 != v51)
      {
        if (v71)
        {
          v76 = MEMORY[0x23B813418](v51, v73);
        }
        else
        {
          v76 = *(_QWORD *)(v73 + 8 * (_QWORD)v51 + 32);
          swift_retain();
        }
        outlined init with copy of String(v76 + 16, (uint64_t)&v149);
        v77 = v149;
        v151 = v30;
        swift_release();
        v149 = v77;
        v153 = v75;
        v79 = v75[2];
        v78 = v75[3];
        if (v79 >= v78 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v78 > 1, v79 + 1, 1);
          v75 = v153;
        }
        v51 = (char *)v51 + 1;
        v75[2] = v79 + 1;
        outlined init with take of Any(&v149, &v75[4 * v79 + 4]);
        if ((void *)v74 == v51)
        {
          swift_bridgeObjectRelease();
          v51 = (void *)MEMORY[0x24BEE4AF8];
          goto LABEL_40;
        }
      }
      __break(1u);
    }
  }
  else
  {
    v72 = *(_QWORD *)((v70 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v72 >= 2)
      goto LABEL_23;
  }
  v81 = 0;
LABEL_41:
  *(_QWORD *)&v52[OBJC_IVAR____TtC5CAFUI32CAFUISoundSettingsViewController_segmentedControl] = v81;
  v89 = (void *)MEMORY[0x23B812F68](0x53474E4954544553, 0xEE0054455345525FLL);
  v90 = CAFUILocalizedStringForKey(v89);

  v91 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
  v93 = v92;

  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIBarButtonItem);
  swift_bridgeObjectRetain();
  v94.value._countAndFlagsBits = (uint64_t)v91;
  v136 = (uint64_t)v93;
  v94.value._object = v93;
  v156.value.super.isa = 0;
  v156.is_nil = 0;
  v157.value.super.super.isa = 0;
  *(UIBarButtonItem *)&v52[OBJC_IVAR____TtC5CAFUI32CAFUISoundSettingsViewController_resetButton] = UIBarButtonItem.init(title:image:primaryAction:menu:)(v94, v156, v157, v158);
  v95 = v141;
  *(_QWORD *)&v52[OBJC_IVAR____TtC5CAFUI32CAFUISoundSettingsViewController_audioLogo] = v141;
  v96 = v95;

  v97 = (objc_class *)type metadata accessor for CAFUISoundSettingsViewController();
  v154.receiver = v52;
  v154.super_class = v97;
  v98 = (char *)objc_msgSendSuper2(&v154, sel_initWithTransitionStyle_navigationOrientation_options_, 1, 0, 0);
  v99 = objc_msgSend(v148, v30[395]);
  v142 = v96;
  v137 = v91;
  if (v99)
  {
    v100 = v99;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFEqualizer);
    v101 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    swift_getKeyPath();
    *(_QWORD *)&v149 = v51;
    if (v101 >> 62)
      goto LABEL_56;
    v102 = *(_QWORD *)((v101 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
    swift_bridgeObjectRetain();
    for (; v102; v102 = _CocoaArrayWrapper.endIndex.getter())
    {
      v103 = 4;
      while (1)
      {
        v104 = v103 - 4;
        if ((v101 & 0xC000000000000001) == 0)
          break;
        v105 = (_QWORD *)MEMORY[0x23B813418](v103 - 4, v101);
        v106 = v103 - 3;
        if (__OFADD__(v104, 1))
          goto LABEL_55;
LABEL_50:
        v153 = v105;
        v107 = v105;
        swift_getAtKeyPath();

        MEMORY[0x23B81301C]();
        if (*(_QWORD *)(v149 + 16) >= *(_QWORD *)(v149 + 24) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        ++v103;
        if (v106 == v102)
        {
          swift_bridgeObjectRelease();
          v108 = v149;
          goto LABEL_58;
        }
      }
      v105 = *(id *)(v101 + 8 * v103);
      v106 = v103 - 3;
      if (!__OFADD__(v104, 1))
        goto LABEL_50;
LABEL_55:
      __break(1u);
LABEL_56:
      swift_retain();
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    v108 = MEMORY[0x24BEE4AF8];
LABEL_58:
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v149 = v108;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<Int8, Never>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyPublisher<Int8, Never>]);
    lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<Int8, Never>, MEMORY[0x24BDB9AF8]);
    lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type [AnyPublisher<Int8, Never>] and conformance [A], &demangling cache variable for type metadata for [AnyPublisher<Int8, Never>], MEMORY[0x24BEE12C8]);
    v109 = v130;
    Publishers.MergeMany.init<A>(_:)();
    lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type Publishers.MergeMany<AnyPublisher<Int8, Never>> and conformance Publishers.MergeMany<A>, &demangling cache variable for type metadata for Publishers.MergeMany<AnyPublisher<Int8, Never>>, MEMORY[0x24BDB99D8]);
    v110 = v133;
    v111 = v132;
    Publisher<>.removeDuplicates()();
    (*(void (**)(char *, uint64_t))(v131 + 8))(v109, v111);
    swift_allocObject();
    swift_unknownObjectWeakInit();
    lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type Publishers.RemoveDuplicates<Publishers.MergeMany<AnyPublisher<Int8, Never>>> and conformance Publishers.RemoveDuplicates<A>, &demangling cache variable for type metadata for Publishers.RemoveDuplicates<Publishers.MergeMany<AnyPublisher<Int8, Never>>>, MEMORY[0x24BDB9658]);
    v112 = v135;
    Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v134 + 8))(v110, v112);
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  if (objc_msgSend(v147, sel_hasFade))
  {
    *(_QWORD *)&v149 = dispatch thunk of CAFSoundDistributionObservable.$fade.getter();
    v153 = objc_msgSend((id)objc_opt_self(), sel_mainRunLoop);
    v113 = type metadata accessor for NSRunLoop.SchedulerOptions();
    v114 = (uint64_t)v145;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v113 - 8) + 56))(v145, 1, 1, v113);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<Int8?, Never>);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSRunLoop);
    lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type AnyPublisher<Int8?, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<Int8?, Never>, MEMORY[0x24BDB9AF8]);
    lazy protocol witness table accessor for type CAFSoundDistribution and conformance CAFSoundDistribution(&lazy protocol witness table cache variable for type NSRunLoop and conformance NSRunLoop, (unint64_t *)&lazy cache variable for type metadata for NSRunLoop, 0x24BDBCF18, MEMORY[0x24BDD0408]);
    v115 = v127;
    Publisher.receive<A>(on:options:)();
    outlined destroy of NSRunLoop.SchedulerOptions?(v114);

    swift_release();
    swift_allocObject();
    swift_unknownObjectWeakInit();
    lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type Publishers.ReceiveOn<AnyPublisher<Int8?, Never>, NSRunLoop> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<Int8?, Never>, NSRunLoop>, MEMORY[0x24BDB9A08]);
    v116 = v129;
    Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v128 + 8))(v115, v116);
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
  }
  v117 = v144;
  *(_QWORD *)&v149 = dispatch thunk of CAFSoundDistributionObservable.$balance.getter();
  v153 = objc_msgSend((id)objc_opt_self(), sel_mainRunLoop);
  v118 = type metadata accessor for NSRunLoop.SchedulerOptions();
  v119 = (uint64_t)v145;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v118 - 8) + 56))(v145, 1, 1, v118);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<Int8, Never>);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSRunLoop);
  lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<Int8, Never>, MEMORY[0x24BDB9AF8]);
  lazy protocol witness table accessor for type CAFSoundDistribution and conformance CAFSoundDistribution(&lazy protocol witness table cache variable for type NSRunLoop and conformance NSRunLoop, (unint64_t *)&lazy cache variable for type metadata for NSRunLoop, 0x24BDBCF18, MEMORY[0x24BDD0408]);
  v120 = v138;
  Publisher.receive<A>(on:options:)();
  outlined destroy of NSRunLoop.SchedulerOptions?(v119);

  swift_release();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type Publishers.ReceiveOn<AnyPublisher<Int8, Never>, NSRunLoop> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<Int8, Never>, NSRunLoop>, MEMORY[0x24BDB9A08]);
  v121 = v140;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v139 + 8))(v120, v121);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  v122 = *(void **)&v98[OBJC_IVAR____TtC5CAFUI32CAFUISoundSettingsViewController_resetButton];
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIAction);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  v123 = v122;
  v124 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  objc_msgSend(v123, sel_setPrimaryAction_, v124);

  swift_release();
  return v98;
}

uint64_t key path getter for CAFObserved<>.observable : CAFEqualizer@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFEqualizer);
  lazy protocol witness table accessor for type CAFSoundDistribution and conformance CAFSoundDistribution(&lazy protocol witness table cache variable for type CAFEqualizer and conformance CAFEqualizer, (unint64_t *)&lazy cache variable for type metadata for CAFEqualizer, 0x24BE14EC8, MEMORY[0x24BE100D0]);
  result = CAFObserved<>.observable.getter();
  *a1 = result;
  return result;
}

void closure #8 in CAFUISoundSettingsViewController.init(audioSettings:audioLogo:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = a2 + 16;
  swift_beginAccess();
  v3 = MEMORY[0x23B813CDC](v2);
  if (v3)
  {
    v4 = (void *)v3;
    CAFUISoundSettingsViewController.updateResetButton()();

  }
}

void closure #10 in CAFUISoundSettingsViewController.init(audioSettings:audioLogo:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  unint64_t v5;
  void (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v2 = a2 + 16;
  swift_beginAccess();
  v3 = MEMORY[0x23B813CDC](v2);
  if (v3)
  {
    v4 = (void *)v3;
    v5 = CAFUISoundSettingsViewController.activePage.getter();
    if (v5)
    {
      v6 = *(void (**)(uint64_t))(v5 + 40);
      if (v6)
      {
        v7 = swift_retain();
        v6(v7);
        outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v6);
      }

      swift_release();
    }
    else
    {

    }
  }
  swift_beginAccess();
  v8 = MEMORY[0x23B813CDC](v2);
  if (v8)
  {
    v9 = (void *)v8;
    CAFUISoundSettingsViewController.updateResetButton()();

  }
}

void CAFUISoundSettingsViewController.init(coder:)(void *a1)
{
  char *v1;
  unint64_t v2;

  swift_unknownObjectWeakInit();
  if ((MEMORY[0x24BEE4AF8] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
    v2 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x24BEE4AF8]);
  else
    v2 = MEMORY[0x24BEE4B08];
  *(_QWORD *)&v1[OBJC_IVAR____TtC5CAFUI32CAFUISoundSettingsViewController_cancellables] = v2;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall CAFUISoundSettingsViewController.viewDidLoad()()
{
  char *v0;
  void *v1;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFUISoundSettingsViewController();
  objc_msgSendSuper2(&v2, sel_viewDidLoad);
  v1 = *(void **)&v0[OBJC_IVAR____TtC5CAFUI32CAFUISoundSettingsViewController_segmentedControl];
  if (v1)
    objc_msgSend(v1, sel_addTarget_action_forControlEvents_, v0, sel_segmentedControlChangedWithSender_, 4096);
  CAFUISoundSettingsViewController.updateBarButtons()();
  CAFUISoundSettingsViewController.changePage(index:animated:)(0, 1);
}

void CAFUISoundSettingsViewController.updateBarButtons()()
{
  char *v0;
  void *v1;
  id v2;
  id v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  v1 = *(void **)&v0[OBJC_IVAR____TtC5CAFUI32CAFUISoundSettingsViewController_segmentedControl];
  if (v1)
  {
    v2 = v1;
    v3 = objc_msgSend(v0, sel_navigationItem);
    objc_msgSend(v3, sel_setTitle_, 0);

    v9 = objc_msgSend(v0, sel_navigationItem);
    objc_msgSend(v9, sel_setTitleView_, v2);
LABEL_12:

    return;
  }
  v2 = objc_msgSend(v0, sel_navigationItem);
  v4 = *(_QWORD *)&v0[OBJC_IVAR____TtC5CAFUI32CAFUISoundSettingsViewController_pages];
  if (!(v4 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v5)
      goto LABEL_5;
LABEL_10:
    v9 = 0;
    goto LABEL_11;
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter())
    goto LABEL_10;
LABEL_5:
  if ((v4 & 0xC000000000000001) != 0)
  {
    v6 = MEMORY[0x23B813418](0, v4);
    goto LABEL_8;
  }
  if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v6 = *(_QWORD *)(v4 + 32);
    swift_retain();
LABEL_8:
    swift_bridgeObjectRelease();
    v8 = *(_QWORD *)(v6 + 16);
    v7 = *(_QWORD *)(v6 + 24);
    swift_bridgeObjectRetain();
    swift_release();
    v9 = (id)MEMORY[0x23B812F68](v8, v7);
LABEL_11:
    swift_bridgeObjectRelease();
    objc_msgSend(v2, sel_setTitle_, v9);
    goto LABEL_12;
  }
  __break(1u);
}

void CAFUISoundSettingsViewController.updateResetButton()()
{
  char *v0;
  char *v1;
  unint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  char v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  Class isa;
  uint64_t v15;
  uint64_t v16;

  v1 = v0;
  v2 = CAFUISoundSettingsViewController.activePage.getter();
  if (v2)
  {
    v3 = *(uint64_t (**)(uint64_t))(v2 + 56);
    if (v3)
    {
      v4 = swift_retain();
      v5 = v3(v4);
      outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v3);
      swift_release();
      if ((v5 & 1) != 0)
      {
        v6 = objc_msgSend(v0, sel_navigationItem);
        v7 = *(void **)&v0[OBJC_IVAR____TtC5CAFUI32CAFUISoundSettingsViewController_resetButton];
        v8 = *(void **)&v1[OBJC_IVAR____TtC5CAFUI32CAFUISoundSettingsViewController_audioLogo];
        v15 = MEMORY[0x24BEE4AF8];
        v9 = v8;
        v10 = v7;
        MEMORY[0x23B81301C]();
        if (*(_QWORD *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        if (v8)
        {
          v11 = v9;
          MEMORY[0x23B81301C]();
          if (*(_QWORD *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }

        goto LABEL_17;
      }
    }
    else
    {
      swift_release();
    }
  }
  v6 = objc_msgSend(v0, sel_navigationItem);
  v12 = *(void **)&v0[OBJC_IVAR____TtC5CAFUI32CAFUISoundSettingsViewController_audioLogo];
  v16 = MEMORY[0x24BEE4AF8];
  if (v12)
  {
    v13 = v12;
    MEMORY[0x23B81301C]();
    if (*(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }

LABEL_17:
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIBarButtonItem);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v6, sel_setRightBarButtonItems_, isa);

}

void CAFUISoundSettingsViewController.changePage(index:animated:)(uint64_t a1, char a2)
{
  char *v2;
  char *v3;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  Class isa;
  void *v11;
  uint64_t v12;

  v3 = v2;
  v6 = *(_QWORD *)&v2[OBJC_IVAR____TtC5CAFUI32CAFUISoundSettingsViewController_pages];
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v12 <= a1)
      return;
  }
  else if (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10) <= a1)
  {
    return;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_237579080;
  if ((v6 & 0xC000000000000001) != 0)
  {
    v8 = MEMORY[0x23B813418](a1, v6);
    goto LABEL_7;
  }
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10) <= (unint64_t)a1)
  {
LABEL_14:
    __break(1u);
    return;
  }
  v8 = *(_QWORD *)(v6 + 8 * a1 + 32);
  swift_retain();
LABEL_7:
  v9 = *(id *)(v8 + 32);
  swift_release();
  *(_QWORD *)(v7 + 32) = v9;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIViewController);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v3, sel_setViewControllers_direction_animated_completion_, isa, 0, a2 & 1, 0);

  v11 = *(void **)&v3[OBJC_IVAR____TtC5CAFUI32CAFUISoundSettingsViewController_segmentedControl];
  if (v11)
    objc_msgSend(v11, sel_setSelectedSegmentIndex_, a1);
  CAFUISoundSettingsViewController.updateResetButton()();
}

id CAFUISoundSettingsViewController.__allocating_init(transitionStyle:navigationOrientation:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  objc_class *v3;
  objc_class *v4;
  NSDictionary v7;
  id v8;

  v4 = v3;
  if (a3)
  {
    type metadata accessor for UIPageViewControllerOptionsKey(0);
    lazy protocol witness table accessor for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey(&lazy protocol witness table cache variable for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey, (uint64_t (*)(uint64_t))type metadata accessor for UIPageViewControllerOptionsKey, (uint64_t)&protocol conformance descriptor for UIPageViewControllerOptionsKey);
    v7.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v7.super.isa = 0;
  }
  v8 = objc_msgSend(objc_allocWithZone(v4), sel_initWithTransitionStyle_navigationOrientation_options_, a1, a2, v7.super.isa);

  return v8;
}

void CAFUISoundSettingsViewController.init(transitionStyle:navigationOrientation:options:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id CAFUISoundSettingsViewController.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFUISoundSettingsViewController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_237516B88()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CAFUISoundSettingsViewController.init(audioSettings:audioLogo:)()
{
  return CAFSoundDistribution.resettable.getter() & 1;
}

void partial apply for closure #2 in CAFUISoundSettingsViewController.init(audioSettings:audioLogo:)()
{
  CAFSoundDistribution.reset()();
}

uint64_t type metadata accessor for SoundSettingPage()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for CAFUISoundSettingsViewController()
{
  return objc_opt_self();
}

uint64_t lazy protocol witness table accessor for type CAFSoundDistribution and conformance CAFSoundDistribution(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = type metadata accessor for NSObject(255, a2);
    result = MEMORY[0x23B813BE0](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined destroy of NSRunLoop.SchedulerOptions?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_237516CB0()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #9 in CAFUISoundSettingsViewController.init(audioSettings:audioLogo:)(uint64_t a1)
{
  uint64_t v1;

  closure #8 in CAFUISoundSettingsViewController.init(audioSettings:audioLogo:)(a1, v1);
}

void partial apply for closure #10 in CAFUISoundSettingsViewController.init(audioSettings:audioLogo:)(uint64_t a1)
{
  uint64_t v1;

  closure #10 in CAFUISoundSettingsViewController.init(audioSettings:audioLogo:)(a1, v1);
}

void partial apply for closure #8 in CAFUISoundSettingsViewController.init(audioSettings:audioLogo:)(uint64_t a1)
{
  uint64_t v1;

  closure #8 in CAFUISoundSettingsViewController.init(audioSettings:audioLogo:)(a1, v1);
}

uint64_t sub_237516CFC()
{
  return lazy protocol witness table accessor for type CAFSoundDistribution and conformance CAFSoundDistribution(&lazy protocol witness table cache variable for type CAFEqualizer and conformance CAFEqualizer, (unint64_t *)&lazy cache variable for type metadata for CAFEqualizer, 0x24BE14EC8, MEMORY[0x24BE100D0]);
}

uint64_t sub_237516D30@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFEqualizer);
  lazy protocol witness table accessor for type CAFSoundDistribution and conformance CAFSoundDistribution(&lazy protocol witness table cache variable for type CAFEqualizer and conformance CAFEqualizer, (unint64_t *)&lazy cache variable for type metadata for CAFEqualizer, 0x24BE14EC8, MEMORY[0x24BE100D0]);
  result = CAFObserved<>.observable.getter();
  *a1 = result;
  return result;
}

uint64_t sub_237516DB0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = dispatch thunk of CAFEqualizerObservable.$value.getter();
  *a1 = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x23B813BE0](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of String(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x24BEE0D00] - 8) + 16))(a2, a1);
  return a2;
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_237516E64()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in CAFUISoundSettingsViewController.init(audioSettings:audioLogo:)()
{
  char v0;

  CAFAudioSettings.equalizersResettable.getter();
  if ((v0 & 1) != 0)
    return 1;
  else
    return CAFSoundDistribution.resettable.getter() & 1;
}

void partial apply for closure #4 in CAFUISoundSettingsViewController.init(audioSettings:audioLogo:)()
{
  CAFSoundDistribution.reset()();
  CAFAudioSettings.resetEqualizers()();
}

uint64_t partial apply for closure #5 in CAFUISoundSettingsViewController.init(audioSettings:audioLogo:)()
{
  char v0;

  CAFAudioSettings.equalizersResettable.getter();
  return v0 & 1;
}

void partial apply for closure #6 in CAFUISoundSettingsViewController.init(audioSettings:audioLogo:)()
{
  CAFAudioSettings.resetEqualizers()();
}

uint64_t outlined consume of (@escaping @callee_guaranteed () -> ())?(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

id CAFUIHeaderFooterView.__allocating_init(reuseIdentifier:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  void *v3;
  id v4;

  if (a2)
  {
    v3 = (void *)MEMORY[0x23B812F68]();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = 0;
  }
  v4 = objc_msgSend(objc_allocWithZone(v2), sel_initWithReuseIdentifier_, v3);

  return v4;
}

id CAFUIHeaderFooterView.init(reuseIdentifier:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  id v4;
  objc_super v6;

  if (a2)
  {
    v3 = (void *)MEMORY[0x23B812F68]();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = 0;
  }
  v6.receiver = v2;
  v6.super_class = (Class)type metadata accessor for CAFUIHeaderFooterView();
  v4 = objc_msgSendSuper2(&v6, sel_initWithReuseIdentifier_, v3);

  return v4;
}

uint64_t type metadata accessor for CAFUIHeaderFooterView()
{
  return objc_opt_self();
}

id CAFUIHeaderFooterView.init(coder:)(void *a1)
{
  void *v1;
  id v3;
  objc_super v5;

  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for CAFUIHeaderFooterView();
  v3 = objc_msgSendSuper2(&v5, sel_initWithCoder_, a1);

  return v3;
}

id CAFUIHeaderFooterView.__deallocating_deinit()
{
  return CAFUIStackView.__deallocating_deinit(type metadata accessor for CAFUIHeaderFooterView);
}

uint64_t CAFUIHeaderView.__ivar_destroyer()
{
  return swift_bridgeObjectRelease();
}

id CAFUIHeaderView.__deallocating_deinit()
{
  return CAFUIStackView.__deallocating_deinit(type metadata accessor for CAFUIHeaderView);
}

uint64_t CAFUIFooterView.title.didset()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  id v6;
  void (*v7)(uint64_t *, _QWORD);
  id v8;
  void (*v9)(uint64_t *, _QWORD);
  uint64_t *boxed_opaque_existential_1;
  uint64_t v13[5];

  v0 = type metadata accessor for UIListContentConfiguration();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = MEMORY[0x24BDAC7A8](v0);
  v4 = (char *)&v13[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x23B8130C4](v2);
  v5 = objc_msgSend((id)objc_opt_self(), sel_preferredFontDescriptorWithTextStyle_, *MEMORY[0x24BEBE1F0]);
  v6 = objc_msgSend((id)objc_opt_self(), sel_fontWithDescriptor_size_, v5, 0.0);

  v7 = (void (*)(uint64_t *, _QWORD))UIListContentConfiguration.textProperties.modify();
  UIListContentConfiguration.TextProperties.font.setter();
  v7(v13, 0);
  v8 = objc_msgSend((id)objc_opt_self(), sel_secondaryLabelColor);
  v9 = (void (*)(uint64_t *, _QWORD))UIListContentConfiguration.textProperties.modify();
  UIListContentConfiguration.TextProperties.color.setter();
  v9(v13, 0);
  swift_bridgeObjectRetain();
  UIListContentConfiguration.text.setter();
  v13[3] = v0;
  v13[4] = MEMORY[0x24BEBC5F0];
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v13);
  (*(void (**)(uint64_t *, char *, uint64_t))(v1 + 16))(boxed_opaque_existential_1, v4, v0);
  MEMORY[0x23B8130B8](v13);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

id @objc CAFUIHeaderView.init(reuseIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t (*a5)(uint64_t))
{
  char *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  _QWORD *v11;
  id v12;
  objc_super v14;

  v7 = (char *)a1;
  if (a3)
  {
    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v9 = &v7[*a4];
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    v10 = (void *)MEMORY[0x23B812F68](v8);
    a1 = swift_bridgeObjectRelease();
  }
  else
  {
    v10 = 0;
    v11 = (_QWORD *)(a1 + *a4);
    *v11 = 0;
    v11[1] = 0;
  }
  v14.receiver = v7;
  v14.super_class = (Class)a5(a1);
  v12 = objc_msgSendSuper2(&v14, sel_initWithReuseIdentifier_, v10);

  return v12;
}

id @objc CAFUIHeaderView.init(coder:)(char *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t (*a5)(void))
{
  char *v7;
  objc_class *v8;
  objc_super v10;

  v7 = &a1[*a4];
  v8 = (objc_class *)a5();
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  v10.receiver = a1;
  v10.super_class = v8;
  return objc_msgSendSuper2(&v10, sel_initWithCoder_, a3);
}

uint64_t CAFUIFooterView.__ivar_destroyer()
{
  return swift_bridgeObjectRelease();
}

id CAFUIFooterView.__deallocating_deinit()
{
  return CAFUIStackView.__deallocating_deinit(type metadata accessor for CAFUIFooterView);
}

id CAFUITableCell.__allocating_init(style:reuseIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  objc_class *v3;
  objc_class *v4;
  void *v6;
  id v7;

  v4 = v3;
  if (a3)
  {
    v6 = (void *)MEMORY[0x23B812F68](a2, a3);
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = 0;
  }
  v7 = objc_msgSend(objc_allocWithZone(v4), sel_initWithStyle_reuseIdentifier_, a1, v6);

  return v7;
}

id CAFUITableCell.init(style:reuseIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized CAFUITableCell.init(style:reuseIdentifier:)(a2, a3);
}

id CAFUITableCell.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void CAFUITableCell.init(coder:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void CAFUITableCell.__allocating_init(reuseIdentifier:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void CAFUITableCell.init(reuseIdentifier:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t CAFUITableCell.isHighlightable.getter()
{
  return 1;
}

uint64_t CAFUITableCell.isCellEnabled.getter()
{
  return 1;
}

uint64_t CAFUITableCell.canBecomeFocused.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x60))();
}

Swift::Void __swiftcall CAFUITableCell.prepareForReuse()()
{
  void *v0;
  id v1;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFUITableCell();
  objc_msgSendSuper2(&v2, sel_prepareForReuse);
  objc_msgSend(v0, sel_setSelectionStyle_, 1);
  objc_msgSend(v0, sel_setAccessoryType_, 0);
  v1 = objc_msgSend(v0, sel_accessoryView);
  objc_msgSend(v1, sel_removeFromSuperview);

  objc_msgSend(v0, sel_setAccessoryView_, 0);
}

id CAFUITableCell.updateConfiguration(using:)(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  void *v24;
  char v25;
  void *v26;
  char **v27;
  id v28;
  int v29;
  int v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v35;
  uint64_t *v36;
  void (*v37)(uint64_t, uint64_t);
  char *v38;
  uint64_t v39;
  id result;
  uint64_t v41;
  uint64_t *v42;
  char *v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52[3];
  uint64_t v53;
  uint64_t v54;

  v51 = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UIBackgroundConfiguration?);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v45 - v6;
  v8 = type metadata accessor for UIBackgroundConfiguration();
  v50 = *(_QWORD *)(v8 - 8);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v48 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v45 - v11;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIListContentConfiguration?);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for UIListContentConfiguration();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v46 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v47 = (char *)&v45 - v20;
  v21 = objc_msgSend(v1, sel_accessoryView);
  v49 = v12;
  if (v21)
  {
    v22 = v21;
    objc_opt_self();
    v23 = swift_dynamicCastObjCClass();
    if (v23)
    {
      v24 = (void *)v23;
      v25 = UICellConfigurationState.isHighlighted.getter();
      v26 = (void *)objc_opt_self();
      v27 = &selRef__carSystemFocusLabelColor;
      if ((v25 & 1) == 0)
        v27 = &selRef__carSystemFocusColor;
      v28 = objc_msgSend(v26, *v27);
      objc_msgSend(v24, sel_setTintColor_, v28);

      v22 = v28;
    }

    v12 = v49;
  }
  MEMORY[0x23B813124](v52);
  if (v53)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIContentConfiguration);
    v29 = swift_dynamicCast();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v15, v29 ^ 1u, 1, v16);
    v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16);
    v31 = v50;
    if (v30 != 1)
    {
      v32 = v47;
      (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v47, v15, v16);
      v33 = type metadata accessor for UICellConfigurationState();
      v53 = v33;
      v54 = MEMORY[0x24BEBC358];
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v52);
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(boxed_opaque_existential_1, v51, v33);
      v35 = (uint64_t)v46;
      UIListContentConfiguration.updated(for:)();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v52);
      v53 = v16;
      v54 = MEMORY[0x24BEBC5F0];
      v36 = __swift_allocate_boxed_opaque_existential_1(v52);
      specialized CAFUICellProtocol.updateContentConfigurationProperties(_:)(v35, (uint64_t)v36);
      v37 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
      v37(v35, v16);
      MEMORY[0x23B813130](v52);
      v38 = v32;
      v12 = v49;
      v39 = ((uint64_t (*)(char *, uint64_t))v37)(v38, v16);
      goto LABEL_12;
    }
  }
  else
  {
    outlined destroy of UIContentConfiguration?((uint64_t)v52, &demangling cache variable for type metadata for UIContentConfiguration?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v15, 1, 1, v16);
    v31 = v50;
  }
  v39 = outlined destroy of UIContentConfiguration?((uint64_t)v15, &demangling cache variable for type metadata for UIListContentConfiguration?);
LABEL_12:
  MEMORY[0x23B81313C](v39);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v7, 1, v8) == 1)
    return (id)outlined destroy of UIContentConfiguration?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for UIBackgroundConfiguration?);
  (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v12, v7, v8);
  v41 = type metadata accessor for UICellConfigurationState();
  v53 = v41;
  v54 = MEMORY[0x24BEBC358];
  v42 = __swift_allocate_boxed_opaque_existential_1(v52);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v42, v51, v41);
  v43 = v48;
  UIBackgroundConfiguration.updated(for:)();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v52);
  (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v5, v43, v8);
  result = objc_msgSend((id)objc_opt_self(), sel_tableCellPlainBackgroundColor);
  if (result)
  {
    UIBackgroundConfiguration.backgroundColor.setter();
    v44 = *(void (**)(char *, uint64_t))(v31 + 8);
    v44(v43, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v5, 0, 1, v8);
    MEMORY[0x23B813148](v5);
    return (id)((uint64_t (*)(char *, uint64_t))v44)(v12, v8);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t CAFUITableCell.cafui_contentConfiguration()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v2 = type metadata accessor for UIListContentConfiguration();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x23B813154](v4);
  specialized CAFUICellProtocol.updateContentConfigurationProperties(_:)((uint64_t)v6, a1);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

id CAFUITableCell.cafui_backgroundConfiguration()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id result;
  uint64_t v8;

  v2 = type metadata accessor for UIBackgroundConfiguration();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x23B813160](v4);
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 16))(a1, v6, v2);
  result = objc_msgSend((id)objc_opt_self(), sel_tableCellPlainBackgroundColor);
  if (result)
  {
    UIBackgroundConfiguration.backgroundColor.setter();
    return (id)(*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
  else
  {
    __break(1u);
  }
  return result;
}

id specialized CAFUICellProtocol.defaultPrimaryTextColor.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  char **v2;

  v1 = (_QWORD *)MEMORY[0x24BEE4EA0];
  if (((*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x60))() & 1) != 0)
  {
    if (((*(uint64_t (**)(void))((*v1 & *v0) + 0x58))() & 1) != 0
      && ((objc_msgSend(v0, sel_isSelected) & 1) != 0 || objc_msgSend(v0, sel_isHighlighted)))
    {
      v2 = &selRef__carSystemFocusLabelColor;
    }
    else
    {
      v2 = &selRef_labelColor;
    }
  }
  else
  {
    v2 = &selRef_grayColor;
  }
  return objc_msgSend((id)objc_opt_self(), *v2);
}

{
  _QWORD *v0;
  _QWORD *v1;
  char **v2;

  v1 = (_QWORD *)MEMORY[0x24BEE4EA0];
  if (((*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC0))() & 1) != 0)
  {
    if (((*(uint64_t (**)(void))((*v1 & *v0) + 0xB8))() & 1) != 0
      && ((objc_msgSend(v0, sel_isSelected) & 1) != 0 || objc_msgSend(v0, sel_isHighlighted)))
    {
      v2 = &selRef__carSystemFocusLabelColor;
    }
    else
    {
      v2 = &selRef_labelColor;
    }
  }
  else
  {
    v2 = &selRef_grayColor;
  }
  return objc_msgSend((id)objc_opt_self(), *v2);
}

Swift::Void __swiftcall CAFUITableCell.setHighlighted(_:animated:)(Swift::Bool _, Swift::Bool animated)
{
  _QWORD *v2;
  uint64_t (*v4)(void);
  char v5;
  char v6;
  objc_super v7;

  v4 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v2) + 0x58);
  v5 = v4() & _;
  v6 = v4() & animated;
  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for CAFUITableCell();
  objc_msgSendSuper2(&v7, sel_setHighlighted_animated_, v5 & 1, v6 & 1);
}

Swift::Void __swiftcall CAFUITableCell.setSelected(_:animated:)(Swift::Bool _, Swift::Bool animated)
{
  _QWORD *v2;
  uint64_t (*v4)(void);
  char v5;
  char v6;
  objc_super v7;

  v4 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v2) + 0x60);
  v5 = v4() & _;
  v6 = v4() & animated;
  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for CAFUITableCell();
  objc_msgSendSuper2(&v7, sel_setSelected_animated_, v5 & 1, v6 & 1);
}

id CAFUITableCell.__deallocating_deinit()
{
  return CAFUIStackView.__deallocating_deinit(type metadata accessor for CAFUITableCell);
}

uint64_t protocol witness for CAFUICellProtocol.primaryTextColor.getter in conformance CAFUITableCell()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x90))();
}

uint64_t protocol witness for CAFUICellProtocol.secondaryTextColor.getter in conformance CAFUITableCell()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x88))();
}

uint64_t protocol witness for CAFUICellProtocol.imageColor.getter in conformance CAFUITableCell()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x78))();
}

uint64_t protocol witness for CAFUICellProtocol.accessoryColor.getter in conformance CAFUITableCell()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x80))();
}

uint64_t protocol witness for CAFUICellProtocol.isHighlightable.getter in conformance CAFUITableCell()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x58))();
}

id protocol witness for CAFUICellProtocol.isHighlighted.getter in conformance CAFUITableCell()
{
  void *v0;

  return objc_msgSend(v0, sel_isHighlighted);
}

id protocol witness for CAFUICellProtocol.isSelected.getter in conformance CAFUITableCell()
{
  void *v0;

  return objc_msgSend(v0, sel_isSelected);
}

uint64_t protocol witness for CAFUICellProtocol.isCellEnabled.getter in conformance CAFUITableCell()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x60))();
}

uint64_t @objc CAFUITableCell.init(style:reuseIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;

  if (a4)
  {
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  return a5(v6, v7);
}

void CAFUIFocusRingTableCell.__allocating_init(reuseIdentifier:)()
{
  objc_class *v0;
  _BYTE *v1;

  v1 = objc_allocWithZone(v0);
  *(_QWORD *)&v1[OBJC_IVAR____TtC5CAFUI23CAFUIFocusRingTableCell_focusRing] = 0;
  v1[OBJC_IVAR____TtC5CAFUI23CAFUIFocusRingTableCell_showsFocusRing] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id @objc CAFUIFocusRingTableCell.setHighlighted(_:animated:)(id result, uint64_t a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  objc_super v8;

  if ((*((_BYTE *)result + OBJC_IVAR____TtC5CAFUI23CAFUIFocusRingTableCell_showsFocusRing) & 1) == 0)
  {
    v8.receiver = result;
    v8.super_class = (Class)type metadata accessor for CAFUIFocusRingTableCell();
    return objc_msgSendSuper2(&v8, *a5, a3, a4);
  }
  return result;
}

void CAFUIFocusRingTableCell.__ivar_destroyer()
{
  uint64_t v0;

}

id CAFUIFocusRingTableCell.__deallocating_deinit()
{
  return CAFUIStackView.__deallocating_deinit(type metadata accessor for CAFUIFocusRingTableCell);
}

unint64_t one-time initialization function for cellsByIdentifiers(uint64_t a1)
{
  return one-time initialization function for cellsByIdentifiers(a1, type metadata accessor for CAFUITableCell, type metadata accessor for CAFUIFocusRingTableCell, (unint64_t *)&static CAFUITableCells.cellsByIdentifiers);
}

unint64_t one-time initialization function for viewsByIdentifiers(uint64_t a1)
{
  return one-time initialization function for cellsByIdentifiers(a1, type metadata accessor for CAFUIHeaderView, type metadata accessor for CAFUIFooterView, (unint64_t *)&static CAFUITableHeaderFooterViews.viewsByIdentifiers);
}

unint64_t one-time initialization function for cellsByIdentifiers(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(void), unint64_t *a4)
{
  uint64_t inited;
  uint64_t v8;
  objc_class *ObjCClassFromMetadata;
  NSString *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  objc_class *v15;
  NSString *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Swift.AnyObject.Type)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_237579730;
  v8 = a2();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  v10 = NSStringFromClass(ObjCClassFromMetadata);
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v13 = v12;

  *(_QWORD *)(inited + 32) = v11;
  *(_QWORD *)(inited + 40) = v13;
  *(_QWORD *)(inited + 48) = v8;
  v14 = a3();
  v15 = (objc_class *)swift_getObjCClassFromMetadata();
  v16 = NSStringFromClass(v15);
  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v19 = v18;

  *(_QWORD *)(inited + 56) = v17;
  *(_QWORD *)(inited + 64) = v19;
  *(_QWORD *)(inited + 72) = v14;
  result = specialized Dictionary.init(dictionaryLiteral:)(inited);
  *a4 = result;
  return result;
}

id specialized CAFUITableCell.init(style:reuseIdentifier:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  void *v6;
  id result;
  void *v8;
  objc_super v9;

  if (a2)
  {
    v3 = (void *)MEMORY[0x23B812F68]();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = 0;
  }
  v9.receiver = v2;
  v9.super_class = (Class)type metadata accessor for CAFUITableCell();
  v4 = objc_msgSendSuper2(&v9, sel_initWithStyle_reuseIdentifier_, 1, v3);

  v5 = v4;
  v6 = (void *)MEMORY[0x23B812F68](0x6261544955464143, 0xEE006C6C6543656CLL);
  objc_msgSend(v5, sel_setAccessibilityIdentifier_, v6);

  result = objc_msgSend((id)objc_opt_self(), sel_tableCellPlainBackgroundColor);
  if (result)
  {
    v8 = result;
    objc_msgSend(v5, sel_setBackgroundColor_, result);

    objc_msgSend(v5, sel_setSelectionStyle_, 1);
    return v5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for CAFUITableCell()
{
  return objc_opt_self();
}

uint64_t outlined destroy of UIContentConfiguration?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t type metadata accessor for CAFUIHeaderView()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for CAFUIFooterView()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for CAFUIFocusRingTableCell()
{
  return objc_opt_self();
}

id specialized CAFUIFocusRingTableCell.init(style:reuseIdentifier:)(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  void *v3;
  id v4;
  id v5;
  void *v6;
  objc_super v8;

  *(_QWORD *)&v2[OBJC_IVAR____TtC5CAFUI23CAFUIFocusRingTableCell_focusRing] = 0;
  v2[OBJC_IVAR____TtC5CAFUI23CAFUIFocusRingTableCell_showsFocusRing] = 0;
  if (a2)
  {
    v3 = (void *)MEMORY[0x23B812F68]();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = 0;
  }
  v8.receiver = v2;
  v8.super_class = (Class)type metadata accessor for CAFUIFocusRingTableCell();
  v4 = objc_msgSendSuper2(&v8, sel_initWithStyle_reuseIdentifier_, 1, v3);

  v5 = v4;
  v6 = (void *)MEMORY[0x23B812F68](0xD000000000000017, 0x8000000237579790);
  objc_msgSend(v5, sel_setAccessibilityIdentifier_, v6);

  return v5;
}

uint64_t CAFSettingsCategory.name.getter(char a1)
{
  const char *v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;

  switch(a1)
  {
    case 1:
      v2 = 0x53474E4954544553;
      v3 = 0x414944454D5FLL;
      goto LABEL_7;
    case 2:
      v1 = "SETTINGS_CLIMATE";
      goto LABEL_5;
    case 3:
      v2 = 0x53474E4954544553;
      v3 = 0x4F494455415FLL;
LABEL_7:
      v4 = v3 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
      goto LABEL_8;
    default:
      v1 = "SETTINGS_GENERAL";
LABEL_5:
      v4 = (unint64_t)(v1 - 32) | 0x8000000000000000;
      v2 = 0xD000000000000010;
LABEL_8:
      v5 = (void *)MEMORY[0x23B812F68](v2, v4);
      v6 = CAFUILocalizedStringForKey(v5);

      v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      return v7;
  }
}

id CAFSettingsCategory.symbol.getter(char a1)
{
  void *v1;
  id v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id result;

  switch(a1)
  {
    case 0:
      v1 = (void *)MEMORY[0x23B812F68](1918985575, 0xE400000000000000);
      v2 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_, v1);

      if (!v2)
      {
        __break(1u);
        goto LABEL_4;
      }
      break;
    case 1:
LABEL_4:
      v3 = (void *)MEMORY[0x23B812F68](0x69662E6F69646172, 0xEA00000000006C6CLL);
      v2 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_, v3);

      if (!v2)
      {
        __break(1u);
        goto LABEL_6;
      }
      break;
    case 2:
LABEL_6:
      v4 = (void *)MEMORY[0x23B812F68](0x6564616C626E6166, 0xEE006C6C69662E73);
      v2 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_, v4);

      if (!v2)
      {
        __break(1u);
        goto LABEL_8;
      }
      break;
    case 3:
LABEL_8:
      v5 = (void *)MEMORY[0x23B812F68](0xD000000000000013, 0x800000023757C360);
      v2 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_, v5);

      if (!v2)
      {
        __break(1u);
        goto LABEL_10;
      }
      break;
    default:
LABEL_10:
      v6 = (void *)MEMORY[0x23B812F68](1918985575, 0xE400000000000000);
      v2 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_, v6);

      if (!v2)
      {
        __break(1u);
        JUMPOUT(0x237518C30);
      }
      return result;
  }
  return v2;
}

BOOL static CAFUINumericDisplayKind.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void CAFUINumericDisplayKind.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

Swift::Int CAFUINumericDisplayKind.hashValue.getter(char a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CAFUINumericDisplayKind(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t CAFUINumericRepresentable.cell.getter()
{
  void *v0;
  id v1;
  uint64_t v3;
  _OWORD v4[2];
  _BYTE v5[24];
  uint64_t v6;

  swift_beginAccess();
  v1 = objc_getAssociatedObject(v0, &static CAFUIAssociatedObjects.CellValue);
  swift_endAccess();
  if (v1)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  outlined init with take of Any?((uint64_t)v4, (uint64_t)v5);
  if (v6)
  {
    type metadata accessor for CAFUIAutomakerSettingCell(0);
    if (swift_dynamicCast())
      return v3;
    else
      return 0;
  }
  else
  {
    outlined destroy of UIContentConfiguration?((uint64_t)v5, &demangling cache variable for type metadata for Any?);
    return 0;
  }
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void CAFUINumericRepresentable.cell.setter(void *a1)
{
  specialized CAFUINumericRepresentable.cell.setter(a1);

}

void (*CAFUINumericRepresentable.cell.modify(uint64_t *a1, uint64_t a2, uint64_t a3))(void **a1, char a2)
{
  uint64_t v3;

  a1[2] = a3;
  a1[3] = v3;
  a1[1] = a2;
  *a1 = CAFUINumericRepresentable.cell.getter();
  return CAFUINumericRepresentable.cell.modify;
}

void CAFUINumericRepresentable.cell.modify(void **a1, char a2)
{
  id v2;
  void *v3;
  id v4;

  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    v2 = v4;
    specialized CAFUINumericRepresentable.cell.setter(v4);

    v3 = v2;
  }
  else
  {
    specialized CAFUINumericRepresentable.cell.setter(*a1);
    v3 = v4;
  }

}

void CAFUINumericRepresentable.configureCell(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t AssociatedTypeWitness;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  void (*v30)(void *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t (*v34)(uint64_t, uint64_t);
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  id v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  void *v72;
  void *v73;
  uint64_t v74;
  id v75;
  unsigned __int8 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  id v109;
  uint64_t v110;
  unint64_t v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;

  v4 = v3;
  v111 = 0xED00006C65656877;
  v98 = type metadata accessor for UIBackgroundConfiguration();
  v97 = *(_QWORD *)(v98 - 8);
  MEMORY[0x24BDAC7A8](v98);
  v96 = (char *)&v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UIBackgroundConfiguration?);
  MEMORY[0x24BDAC7A8](v9);
  v95 = (char *)&v89 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = type metadata accessor for UIListContentConfiguration();
  v101 = *(_QWORD **)(v99 - 8);
  MEMORY[0x24BDAC7A8](v99);
  v92 = (char *)&v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIListContentConfiguration?);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v91 = (uint64_t)&v89 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v103 = (uint64_t)&v89 - v15;
  v107 = type metadata accessor for CAFUIAutomakerSettingConfiguration(0);
  v106 = *(_QWORD *)(v107 - 8);
  v16 = MEMORY[0x24BDAC7A8](v107);
  v102 = (uint64_t)&v89 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v90 = (uint64_t)&v89 - v18;
  v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  v20 = MEMORY[0x24BDAC7A8](v19);
  v93 = (uint64_t)&v89 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v20);
  v94 = (uint64_t)&v89 - v23;
  MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)&v89 - v24;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v27 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v29 = (char *)&v89 - v28;
  v30 = *(void (**)(void *, uint64_t, uint64_t))(a3 + 88);
  v109 = a1;
  v30(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(a3 + 40))(a2, a3);
  specialized CAFUINumericRepresentable.settings_asDouble(_:)((uint64_t)v29);
  v32 = v31;
  v33 = *(void (**)(char *, uint64_t))(v27 + 8);
  v33(v29, AssociatedTypeWitness);
  v34 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 64);
  v35 = (void *)v34(a2, a3);
  swift_getAssociatedConformanceWitness();
  CAFRange.minimumValue<A>()();

  specialized CAFUINumericRepresentable.settings_asDouble(_:)((uint64_t)v29);
  v37 = v36;
  v33(v29, AssociatedTypeWitness);
  v38 = (void *)v34(a2, a3);
  CAFRange.maximumValue<A>()();

  specialized CAFUINumericRepresentable.settings_asDouble(_:)((uint64_t)v29);
  v40 = v39;
  v33(v29, AssociatedTypeWitness);
  v41 = (void *)v34(a2, a3);
  CAFRange.stepValue<A>()();

  specialized CAFUINumericRepresentable.settings_asDouble(_:)((uint64_t)v29);
  v43 = v42;
  v33(v29, AssociatedTypeWitness);
  LOBYTE(v108) = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3) & 1;
  LODWORD(v108) = v108;
  v44 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 72))(a2, a3);
  v110 = *(_QWORD *)(a3 + 8);
  v45 = 0x676E697265657473;
  v46 = 0xED00006C65656877;
  if ((CAFListContentRepresentable.isUILimited.getter(a2, v110) & 1) == 0)
  {
    v45 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 104))(a2, a3);
    v46 = v47;
  }
  v100 = v44;
  v48 = 0x676E697265657473;
  if ((CAFListContentRepresentable.isUILimited.getter(a2, v110) & 1) == 0)
  {
    v48 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 112))(a2, a3);
    v111 = v49;
  }
  v50 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 120))(a2, a3);
  v52 = v51;
  v53 = (*(uint64_t (**)(uint64_t))(v110 + 16))(a2);
  v54 = (_QWORD *)swift_allocObject();
  v54[2] = a2;
  v54[3] = a3;
  v54[4] = v4;
  *(_QWORD *)&v112 = v32;
  *((_QWORD *)&v112 + 1) = v37;
  *(_QWORD *)&v113 = v40;
  *((_QWORD *)&v113 + 1) = v43;
  LOBYTE(v114) = v108;
  BYTE1(v114) = v100 & 1;
  *((_QWORD *)&v114 + 1) = v45;
  *(_QWORD *)&v115 = v46;
  v105 = v46;
  *((_QWORD *)&v115 + 1) = v48;
  *(_QWORD *)&v116 = v111;
  *((_QWORD *)&v116 + 1) = v50;
  *(_QWORD *)&v117 = v52;
  BYTE8(v117) = v53 & 1;
  *(_QWORD *)&v118 = partial apply for closure #1 in CAFUINumericRepresentable.configureCell(_:);
  *((_QWORD *)&v118 + 1) = v54;
  v104 = v54;
  v55 = (uint64_t)v109 + OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_automakerSettingConfiguration;
  swift_beginAccess();
  outlined init with copy of UIListContentConfiguration?(v55, (uint64_t)v25, (uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  v56 = *(_QWORD **)(v106 + 48);
  v57 = v107;
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v56)(v25, 1, v107))
  {
    swift_unknownObjectRetain();
    outlined destroy of UIContentConfiguration?((uint64_t)v25, (uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
    v58 = v99;
LABEL_13:
    v62 = v101;
LABEL_14:
    v65 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v62[7];
    v66 = v103;
    v65(v103, 1, 1, v58);
    if (!(_DWORD)v108)
    {
LABEL_15:
      v67 = (uint64_t)v92;
      static UIListContentConfiguration.valueCell()();
      v101 = v56;
      v68 = v55;
      v69 = v91;
      v108 = v52;
      specialized CAFUICellProtocol.updateContentConfigurationProperties(_:)(v67, v91);
      ((void (*)(uint64_t, uint64_t))v62[1])(v67, v58);
      v65(v69, 0, 1, v58);
      v70 = v69;
      v55 = v68;
      v56 = v101;
      outlined assign with take of UIListContentConfiguration?(v70, v66);
      if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t))v62[6])(v66, 1, v58))
      {
        (*(void (**)(uint64_t))(v110 + 8))(a2);
        UIListContentConfiguration.text.setter();
      }
      goto LABEL_17;
    }
    goto LABEL_17;
  }
  v59 = v90;
  outlined init with copy of CAFUIAutomakerSettingConfiguration((uint64_t)v25, v90);
  swift_unknownObjectRetain();
  outlined destroy of UIContentConfiguration?((uint64_t)v25, (uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  v60 = *(void **)(v59 + *(int *)(v57 + 20));
  v61 = v60;
  outlined destroy of CAFUIAutomakerSettingConfiguration(v59);
  v58 = v99;
  v62 = v101;
  if (!v60)
    goto LABEL_14;
  type metadata accessor for CAFUINumericInputView();
  v63 = swift_dynamicCastClass();
  if (!v63
    || (v64 = v63 + OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_config,
        *(_BYTE *)(v63 + OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_config + 32) != 1))
  {

    goto LABEL_13;
  }
  if (!(_DWORD)v108)
  {

    v62 = v101;
    v65 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v101[7];
    v66 = v103;
    v65(v103, 1, 1, v58);
    goto LABEL_15;
  }
  if ((v100 & 1) == *(_BYTE *)(v64 + 33))
  {
    v86 = v113;
    *(_OWORD *)v64 = v112;
    *(_OWORD *)(v64 + 16) = v86;
    v87 = v115;
    *(_OWORD *)(v64 + 32) = v114;
    *(_OWORD *)(v64 + 48) = v87;
    v88 = v117;
    *(_OWORD *)(v64 + 64) = v116;
    *(_OWORD *)(v64 + 80) = v88;
    *(_OWORD *)(v64 + 96) = v118;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    CAFUINumericInputView.updateButtons()();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    return;
  }

  v66 = v103;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v101[7])(v103, 1, 1, v58);
LABEL_17:
  v71 = objc_allocWithZone((Class)type metadata accessor for CAFUINumericInputView());
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  CAFUINumericInputView.init(configuration:)((uint64_t)&v112);
  v73 = v72;
  v74 = v102;
  outlined init with copy of UIListContentConfiguration?(v66, v102, &demangling cache variable for type metadata for UIListContentConfiguration?);
  v75 = v73;
  v76 = CAFListContentRepresentable.isUILimited.getter(a2, v110);
  v77 = v107;
  *(_QWORD *)(v74 + *(int *)(v107 + 20)) = v73;
  *(_BYTE *)(v74 + *(int *)(v77 + 24)) = 0;
  *(_BYTE *)(v74 + *(int *)(v77 + 28)) = v76 & 1;
  v78 = v94;
  outlined init with copy of CAFUIAutomakerSettingConfiguration(v74, v94);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v106 + 56))(v78, 0, 1, v77);
  swift_beginAccess();
  outlined assign with copy of CAFUIAutomakerSettingConfiguration?(v78, v55);
  swift_endAccess();
  v79 = v55;
  v80 = v93;
  outlined init with copy of UIListContentConfiguration?(v79, v93, (uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  LODWORD(v74) = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v56)(v80, 1, v77);
  outlined destroy of UIContentConfiguration?(v80, (uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  if ((_DWORD)v74 != 1)
    CAFUITileBaseCell.setupViews()();
  v81 = outlined destroy of UIContentConfiguration?(v78, (uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  v82 = v96;
  MEMORY[0x23B8131A8](v81);
  v83 = v97;
  v84 = v95;
  v85 = v98;
  (*(void (**)(char *, char *, uint64_t))(v97 + 16))(v95, v82, v98);
  if (objc_msgSend((id)objc_opt_self(), sel_tableCellPlainBackgroundColor))
  {
    UIBackgroundConfiguration.backgroundColor.setter();
    (*(void (**)(char *, uint64_t))(v83 + 8))(v82, v85);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v83 + 56))(v84, 0, 1, v85);
    MEMORY[0x23B81319C](v84);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    outlined destroy of CAFUIAutomakerSettingConfiguration(v102);
    outlined destroy of UIContentConfiguration?(v103, &demangling cache variable for type metadata for UIListContentConfiguration?);
  }
  else
  {
    __break(1u);
  }
}

uint64_t closure #1 in CAFUINumericRepresentable.configureCell(_:)(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t AssociatedConformanceWitness;
  unint64_t v12;
  uint64_t result;
  uint64_t v14;
  double v15;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = type metadata accessor for Optional();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v14 - v9;
  v15 = a1;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v12 = lazy protocol witness table accessor for type Double and conformance Double();
  MEMORY[0x23B8132D4](&v15, MEMORY[0x24BEE13C8], v12, AssociatedTypeWitness, AssociatedConformanceWitness);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 48))(v10, 1, AssociatedTypeWitness);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(a4 + 48))(v10, a3, a4);
  __break(1u);
  return result;
}

uint64_t CAFUINumericRepresentable.cellSelected(isProminent:hasChildren:)(char a1)
{
  if ((a1 & 1) != 0)
    return 1;
  else
    return 3;
}

uint64_t CAFUINumericRepresentable.isTracking(in:)(uint64_t a1)
{
  return specialized CAFUINumericRepresentable.isTracking(in:)(a1) & 1;
}

void CAFUIFloatingPointRepresentable.configureCell(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t AssociatedTypeWitness;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  double v23;
  void (*v24)(char *, uint64_t);
  uint64_t (*v25)(uint64_t, uint64_t);
  void *v26;
  double v27;
  void *v28;
  double v29;
  uint64_t v30;
  double v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t (*v39)(uint64_t);
  _QWORD *v40;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  unsigned int (*v44)(uint64_t, uint64_t, int *);
  id v45;
  void *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  id v62;
  uint64_t v63;
  _OWORD *v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;

  v4 = v3;
  v78 = a1;
  v75 = type metadata accessor for UIBackgroundConfiguration();
  v74 = *(_QWORD *)(v75 - 8);
  MEMORY[0x24BDAC7A8](v75);
  v73 = (char *)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UIBackgroundConfiguration?);
  MEMORY[0x24BDAC7A8](v8);
  v72 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = type metadata accessor for CAFUIAutomakerSettingConfiguration(0);
  v82 = *(_QWORD *)(v77 - 8);
  v10 = MEMORY[0x24BDAC7A8](v77);
  v79 = (uint64_t)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v68 = (uint64_t)&v68 - v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v70 = (uint64_t)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v71 = (uint64_t)&v68 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v76 = (char *)&v68 - v18;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v20 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v22 = (char *)&v68 - v21;
  (*(void (**)(uint64_t, uint64_t))(a3 + 48))(a2, a3);
  v23 = specialized CAFUIFloatingPointRepresentable.settings_asDouble(_:)((uint64_t)v22);
  v24 = *(void (**)(char *, uint64_t))(v20 + 8);
  v24(v22, AssociatedTypeWitness);
  v25 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 72);
  v26 = (void *)v25(a2, a3);
  swift_getAssociatedConformanceWitness();
  CAFRange.minimumValue<A>()();

  v27 = specialized CAFUIFloatingPointRepresentable.settings_asDouble(_:)((uint64_t)v22);
  v24(v22, AssociatedTypeWitness);
  v28 = (void *)v25(a2, a3);
  CAFRange.maximumValue<A>()();

  v29 = specialized CAFUIFloatingPointRepresentable.settings_asDouble(_:)((uint64_t)v22);
  v24(v22, AssociatedTypeWitness);
  v30 = v25(a2, a3);
  CAFRange.stepValue<A>()();

  v31 = specialized CAFUIFloatingPointRepresentable.settings_asDouble(_:)((uint64_t)v22);
  v24(v22, AssociatedTypeWitness);
  LOBYTE(AssociatedTypeWitness) = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3) & 1;
  v32 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 40))(a2, a3);
  v33 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 80))(a2, a3);
  v35 = v34;
  v36 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 88))(a2, a3);
  v38 = v37;
  v39 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(a3 + 8) + 16);
  v69 = *(_QWORD *)(a3 + 8);
  LOBYTE(v30) = v39(a2);
  v40 = (_QWORD *)swift_allocObject();
  v40[2] = a2;
  v40[3] = a3;
  v40[4] = v4;
  *(double *)&v83 = v23;
  *((double *)&v83 + 1) = v27;
  *(double *)&v84 = v29;
  *((double *)&v84 + 1) = v31;
  LOBYTE(v85) = AssociatedTypeWitness;
  v41 = (uint64_t)v76;
  BYTE1(v85) = v32 & 1;
  *((_QWORD *)&v85 + 1) = v33;
  *(_QWORD *)&v86 = v35;
  v42 = (int *)v77;
  v81 = v35;
  *((_QWORD *)&v86 + 1) = v36;
  v87 = v38;
  *(_QWORD *)&v88 = 0;
  BYTE8(v88) = v30 & 1;
  *(_QWORD *)&v89 = partial apply for closure #1 in CAFUIFloatingPointRepresentable.configureCell(_:);
  *((_QWORD *)&v89 + 1) = v40;
  v80 = v40;
  v43 = v78 + OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_automakerSettingConfiguration;
  swift_beginAccess();
  outlined init with copy of UIListContentConfiguration?(v43, v41, (uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  v44 = *(unsigned int (**)(uint64_t, uint64_t, int *))(v82 + 48);
  if (v44(v41, 1, v42))
  {
    swift_unknownObjectRetain();
    outlined destroy of UIContentConfiguration?(v41, (uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  }
  else
  {
    v60 = v68;
    outlined init with copy of CAFUIAutomakerSettingConfiguration(v41, v68);
    swift_unknownObjectRetain();
    outlined destroy of UIContentConfiguration?(v41, (uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
    v61 = *(void **)(v60 + v42[5]);
    v62 = v61;
    outlined destroy of CAFUIAutomakerSettingConfiguration(v60);
    if (v61)
    {
      type metadata accessor for CAFUINumericInputView();
      v63 = swift_dynamicCastClass();
      if (v63)
      {
        v64 = (_OWORD *)(v63 + OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_config);
        v65 = v84;
        *v64 = v83;
        v64[1] = v65;
        v66 = v86;
        v64[2] = v85;
        v64[3] = v66;
        v67 = v88;
        v64[4] = v87;
        v64[5] = v67;
        v64[6] = v89;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        CAFUINumericInputView.updateButtons()();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return;
      }

    }
  }
  v45 = objc_allocWithZone((Class)type metadata accessor for CAFUINumericInputView());
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  CAFUINumericInputView.init(configuration:)((uint64_t)&v83);
  v47 = v46;
  v48 = type metadata accessor for UIListContentConfiguration();
  v49 = v79;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(v79, 1, 1, v48);
  v76 = v47;
  v50 = CAFListContentRepresentable.isUILimited.getter(a2, v69);
  *(_QWORD *)(v49 + v42[5]) = v47;
  *(_BYTE *)(v49 + v42[6]) = 0;
  *(_BYTE *)(v49 + v42[7]) = v50 & 1;
  v51 = v71;
  outlined init with copy of CAFUIAutomakerSettingConfiguration(v49, v71);
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v82 + 56))(v51, 0, 1, v42);
  swift_beginAccess();
  outlined assign with copy of CAFUIAutomakerSettingConfiguration?(v51, v43);
  swift_endAccess();
  v52 = v43;
  v53 = v70;
  outlined init with copy of UIListContentConfiguration?(v52, v70, (uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  v54 = v44(v53, 1, v42);
  outlined destroy of UIContentConfiguration?(v53, (uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  if (v54 != 1)
    CAFUITileBaseCell.setupViews()();
  v55 = outlined destroy of UIContentConfiguration?(v51, (uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  v56 = v73;
  MEMORY[0x23B8131A8](v55);
  v57 = v74;
  v58 = v72;
  v59 = v75;
  (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v72, v56, v75);
  if (objc_msgSend((id)objc_opt_self(), sel_tableCellPlainBackgroundColor))
  {
    UIBackgroundConfiguration.backgroundColor.setter();
    (*(void (**)(char *, uint64_t))(v57 + 8))(v56, v59);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v58, 0, 1, v59);
    MEMORY[0x23B81319C](v58);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    outlined destroy of CAFUIAutomakerSettingConfiguration(v79);
  }
  else
  {
    __break(1u);
  }
}

uint64_t closure #1 in CAFUIFloatingPointRepresentable.configureCell(_:)(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  _QWORD v12[2];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = type metadata accessor for Optional();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v12 - v9;
  *(double *)&v12[1] = a1;
  swift_getAssociatedConformanceWitness();
  lazy protocol witness table accessor for type Double and conformance Double();
  dispatch thunk of BinaryFloatingPoint.init<A>(exactly:)();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 48))(v10, 1, AssociatedTypeWitness);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(a4 + 56))(v10, a3, a4);
  __break(1u);
  return result;
}

void protocol witness for CAFUINumericRepresentable.cell.setter in conformance CAFIntegerSetting(void *a1)
{
  specialized CAFUINumericRepresentable.cell.setter(a1);

}

uint64_t (*protocol witness for CAFUINumericRepresentable.cell.modify in conformance CAFIntegerSetting(uint64_t *a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v3;

  a1[2] = a2;
  a1[3] = a3;
  a1[1] = v3;
  *a1 = CAFUINumericRepresentable.cell.getter();
  return protocol witness for CAFUINumericRepresentable.cell.modify in conformance CAFIntegerSetting;
}

uint64_t protocol witness for CAFListContentRepresentable.isTracking(in:) in conformance CAFIntegerSetting(uint64_t a1)
{
  return specialized CAFUINumericRepresentable.isTracking(in:)(a1) & 1;
}

void protocol witness for CAFListContentRepresentable.configureCell(_:) in conformance CAFIntegerSetting(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = MEMORY[0x23B813BE0](&protocol conformance descriptor for CAFIntegerSetting);
  CAFUINumericRepresentable.configureCell(_:)(a1, a2, v4);
}

uint64_t protocol witness for CAFListContentRepresentable.cellSelected(isProminent:hasChildren:) in conformance CAFIntegerSetting(char a1)
{
  if ((a1 & 1) != 0)
    return 1;
  else
    return 3;
}

uint64_t protocol witness for CAFListContentRepresentable.isTracking(in:) in conformance CAFFloatSetting(uint64_t a1)
{
  return specialized CAFUINumericRepresentable.isTracking(in:)(a1) & 1;
}

void protocol witness for CAFListContentRepresentable.configureCell(_:) in conformance CAFFloatSetting(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = MEMORY[0x23B813BE0](&protocol conformance descriptor for CAFFloatSetting);
  CAFUIFloatingPointRepresentable.configureCell(_:)(a1, a2, v4);
}

uint64_t protocol witness for CAFListContentRepresentable.cellSelected(isProminent:hasChildren:) in conformance CAFFloatSetting(char a1)
{
  return a1 & 1;
}

void protocol witness for CAFUINumericRepresentable.cell.modify in conformance CAFIntegerSetting(void **a1, char a2)
{
  id v2;
  void *v3;
  id v4;

  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    v2 = v4;
    specialized CAFUINumericRepresentable.cell.setter(v4);

    v3 = v2;
  }
  else
  {
    specialized CAFUINumericRepresentable.cell.setter(*a1);
    v3 = v4;
  }

}

void protocol witness for CAFListContentRepresentable.configureCell(_:) in conformance CAFVolume(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = MEMORY[0x23B813BE0](&protocol conformance descriptor for CAFVolume);
  CAFUINumericRepresentable.configureCell(_:)(a1, a2, v4);
}

double specialized CAFUIFloatingPointRepresentable.settings_asDouble(_:)(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  float v6[4];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)v6 - v4, a1, AssociatedTypeWitness);
  swift_dynamicCast();
  return v6[3];
}

uint64_t specialized CAFUINumericRepresentable.cell.setter(void *a1)
{
  void *v1;

  swift_beginAccess();
  objc_setAssociatedObject(v1, &static CAFUIAssociatedObjects.CellValue, a1, 0);
  return swift_endAccess();
}

uint64_t specialized CAFUINumericRepresentable.settings_asDouble(_:)(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t result;
  uint64_t v7;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v5 = (char *)&v7 - v4;
  if (swift_dynamicCastMetatype()
    || swift_dynamicCastMetatype()
    || swift_dynamicCastMetatype()
    || swift_dynamicCastMetatype()
    || swift_dynamicCastMetatype()
    || swift_dynamicCastMetatype()
    || swift_dynamicCastMetatype()
    || swift_dynamicCastMetatype()
    || swift_dynamicCastMetatype())
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, AssociatedTypeWitness);
    return swift_dynamicCast();
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_23751ABBC()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CAFUINumericRepresentable.configureCell(_:)(double a1)
{
  uint64_t *v1;

  return closure #1 in CAFUINumericRepresentable.configureCell(_:)(a1, v1[4], v1[2], v1[3]);
}

uint64_t outlined assign with take of UIListContentConfiguration?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIListContentConfiguration?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of CAFUIAutomakerSettingConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CAFUIAutomakerSettingConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of CAFUIAutomakerSettingConfiguration(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CAFUIAutomakerSettingConfiguration(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t specialized CAFUINumericRepresentable.isTracking(in:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;

  v2 = type metadata accessor for CAFUIAutomakerSettingConfiguration(0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1 + OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_automakerSettingConfiguration;
  swift_beginAccess();
  outlined init with copy of UIListContentConfiguration?(v9, (uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2))
  {
    outlined destroy of UIContentConfiguration?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  }
  else
  {
    outlined init with copy of CAFUIAutomakerSettingConfiguration((uint64_t)v8, (uint64_t)v5);
    outlined destroy of UIContentConfiguration?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
    v12 = *(void **)&v5[*(int *)(v2 + 20)];
    v13 = v12;
    outlined destroy of CAFUIAutomakerSettingConfiguration((uint64_t)v5);
    if (v12)
    {
      type metadata accessor for CAFUINumericInputView();
      v14 = swift_dynamicCastClass();
      if (v14)
      {
        v10 = *(unsigned __int8 *)(v14 + OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_tracking);

        return v10;
      }

    }
  }
  return 0;
}

unint64_t lazy protocol witness table accessor for type CAFUINumericDisplayKind and conformance CAFUINumericDisplayKind()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CAFUINumericDisplayKind and conformance CAFUINumericDisplayKind;
  if (!lazy protocol witness table cache variable for type CAFUINumericDisplayKind and conformance CAFUINumericDisplayKind)
  {
    result = MEMORY[0x23B813BE0](&protocol conformance descriptor for CAFUINumericDisplayKind, &type metadata for CAFUINumericDisplayKind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFUINumericDisplayKind and conformance CAFUINumericDisplayKind);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CAFUINumericDisplayKind(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CAFUINumericDisplayKind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23751AF54 + 4 * byte_2375797D5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23751AF88 + 4 * asc_2375797D0[v4]))();
}

uint64_t sub_23751AF88(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23751AF90(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23751AF98);
  return result;
}

uint64_t sub_23751AFA4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23751AFACLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23751AFB0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23751AFB8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *destructiveInjectEnumTag for CAFUINumericDisplayKind(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for CAFUINumericDisplayKind()
{
  return &type metadata for CAFUINumericDisplayKind;
}

uint64_t partial apply for closure #1 in CAFUIFloatingPointRepresentable.configureCell(_:)(double a1)
{
  uint64_t *v1;

  return closure #1 in CAFUIFloatingPointRepresentable.configureCell(_:)(a1, v1[4], v1[2], v1[3]);
}

unint64_t lazy protocol witness table accessor for type Double and conformance Double()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Double and conformance Double;
  if (!lazy protocol witness table cache variable for type Double and conformance Double)
  {
    result = MEMORY[0x23B813BE0](MEMORY[0x24BEE13D0], MEMORY[0x24BEE13C8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Double and conformance Double);
  }
  return result;
}

void CAFUIColorConfig.backgroundColor.setter(void *a1)
{
  id *v1;

  *v1 = a1;
}

uint64_t (*CAFUIColorConfig.backgroundColor.modify())()
{
  return closure #1 in CAFUINumericInputView.init(configuration:);
}

void CAFUIColorConfig.tintColor.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = a1;
}

uint64_t (*CAFUIColorConfig.tintColor.modify())()
{
  return closure #1 in CAFUINumericInputView.init(configuration:);
}

_QWORD *initializeBufferWithCopyOfBuffer for CAFUIColorConfig(_QWORD *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = v3;
  v6 = v4;
  return a1;
}

void destroy for CAFUIColorConfig(id *a1)
{

}

uint64_t assignWithCopy for CAFUIColorConfig(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(void **)(a2 + 8);
  v8 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  v9 = v7;

  return a1;
}

uint64_t assignWithTake for CAFUIColorConfig(uint64_t a1, _OWORD *a2)
{
  void *v4;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for CAFUIColorConfig(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CAFUIColorConfig(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CAFUIColorConfig()
{
  return &type metadata for CAFUIColorConfig;
}

UIColor __swiftcall CAFImageColor.convertToUIColor()()
{
  char v0;
  UIColor result;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  os_log_type_t v5;

  switch(v0)
  {
    case 1:
      result.super.isa = (Class)objc_msgSend((id)objc_opt_self(), sel_systemWhiteColor);
      break;
    case 2:
      result.super.isa = (Class)objc_msgSend((id)objc_opt_self(), sel_systemBlackColor);
      break;
    case 3:
      result.super.isa = (Class)objc_msgSend((id)objc_opt_self(), sel_systemGrayColor);
      break;
    case 4:
      result.super.isa = (Class)objc_msgSend((id)objc_opt_self(), sel_systemRedColor);
      break;
    case 5:
      result.super.isa = (Class)objc_msgSend((id)objc_opt_self(), sel_systemYellowColor);
      break;
    case 6:
      result.super.isa = (Class)objc_msgSend((id)objc_opt_self(), sel_systemBlueColor);
      break;
    case 7:
      result.super.isa = (Class)objc_msgSend((id)objc_opt_self(), sel_systemGreenColor);
      break;
    case 9:
      result.super.isa = (Class)objc_msgSend((id)objc_opt_self(), sel_systemOrangeColor);
      break;
    case 10:
      result.super.isa = (Class)objc_msgSend((id)objc_opt_self(), sel_systemTealColor);
      break;
    case 11:
      result.super.isa = (Class)objc_msgSend((id)objc_opt_self(), sel_systemCyanColor);
      break;
    case 12:
      result.super.isa = (Class)objc_msgSend((id)objc_opt_self(), sel_systemIndigoColor);
      break;
    case 13:
      result.super.isa = (Class)objc_msgSend((id)objc_opt_self(), sel_systemPurpleColor);
      break;
    case 14:
      result.super.isa = (Class)objc_msgSend((id)objc_opt_self(), sel_systemPinkColor);
      break;
    case 15:
      result.super.isa = (Class)objc_msgSend((id)objc_opt_self(), sel_systemBrownColor);
      break;
    default:
      _StringGuts.grow(_:)(62);
      v2._countAndFlagsBits = 40;
      v2._object = (void *)0xE100000000000000;
      String.append(_:)(v2);
      v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v3);
      swift_bridgeObjectRelease();
      v4._countAndFlagsBits = 0xD00000000000003BLL;
      v4._object = (void *)0x800000023757C3D0;
      String.append(_:)(v4);
      v5 = static os_log_type_t.error.getter();
      specialized static CAFUILogger.log(_:message:function:file:line:)(v5, 0, 0xE000000000000000, 0xD000000000000012, 0x800000023757C410);
      swift_bridgeObjectRelease();
      result.super.isa = (Class)objc_msgSend((id)objc_opt_self(), sel_labelColor);
      break;
  }
  return result;
}

uint64_t static CAFAutomakerSetting.== infix(_:_:)(void *a1, void *a2)
{
  unsigned int v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v14;
  char v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (a1 == a2)
  {
    v15 = 1;
  }
  else
  {
    v4 = objc_msgSend(a1, sel_sortOrder);
    if (v4 == objc_msgSend(a2, sel_sortOrder))
    {
      v5 = objc_msgSend(a1, sel_userVisibleLabel);
      v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v8 = v7;

      v9 = objc_msgSend(a2, sel_userVisibleLabel);
      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v12 = v11;

      if (v6 == v10 && v8 == v12)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v15 = 0;
        if ((v14 & 1) == 0)
          return v15 & 1;
      }
      v16 = objc_msgSend(a1, sel_identifier);
      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v19 = v18;

      v20 = objc_msgSend(a2, sel_identifier);
      v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v23 = v22;

      if (v17 == v21 && v19 == v23)
        v15 = 1;
      else
        v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      v15 = 0;
    }
  }
  return v15 & 1;
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance CAFAutomakerSetting(void **a1, void **a2)
{
  return specialized static CAFAutomakerSetting.< infix(_:_:)(*a1, *a2);
}

BOOL specialized static CAFAutomakerSetting.< infix(_:_:)(void *a1, void *a2)
{
  unsigned int v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v23;
  char v24;
  char v25;

  if (a1 == a2)
    return 0;
  v4 = objc_msgSend(a1, sel_sortOrder);
  if (v4 == objc_msgSend(a2, sel_sortOrder))
  {
    v5 = objc_msgSend(a1, sel_userVisibleLabel);
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v8 = v7;

    v9 = objc_msgSend(a2, sel_userVisibleLabel);
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v12 = v11;

    v13 = v6 == v10 && v8 == v12;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = objc_msgSend(a1, sel_identifier);
      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v17 = v16;

      v18 = objc_msgSend(a2, sel_identifier);
      v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v21 = v20;

      if (v15 == v19 && v17 == v21)
      {
        swift_bridgeObjectRelease_n();
        return 0;
      }
      v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v24 & 1;
    }
    else
    {
      v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v25 & 1;
    }
  }
  else
  {
    v23 = objc_msgSend(a1, sel_sortOrder);
    return v23 < objc_msgSend(a2, sel_sortOrder);
  }
}

unint64_t lazy protocol witness table accessor for type CAFAutomakerSetting and conformance NSObject()
{
  unint64_t result;
  unint64_t v1;

  result = lazy protocol witness table cache variable for type CAFAutomakerSetting and conformance NSObject;
  if (!lazy protocol witness table cache variable for type CAFAutomakerSetting and conformance NSObject)
  {
    v1 = type metadata accessor for CAFAutomakerSetting();
    result = MEMORY[0x23B813BE0](MEMORY[0x24BEE5BE0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFAutomakerSetting and conformance NSObject);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CAFAutomakerSetting and conformance NSObject;
  if (!lazy protocol witness table cache variable for type CAFAutomakerSetting and conformance NSObject)
  {
    v1 = type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
    result = MEMORY[0x23B813BE0](MEMORY[0x24BEE5BD8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFAutomakerSetting and conformance NSObject);
  }
  return result;
}

unint64_t type metadata accessor for CAFAutomakerSetting()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CAFAutomakerSetting;
  if (!lazy cache variable for type metadata for CAFAutomakerSetting)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
  }
  return result;
}

id static UIColor.cafui_carSystemFocus.getter()
{
  return static UIColor.cafui_carSystemFocus.getter((SEL *)&selRef__carSystemFocusColor);
}

id static UIColor.cafui_tableCellPlainBackground.getter()
{
  return static UIColor.cafui_tableCellPlainBackground.getter((SEL *)&selRef_tableCellPlainBackgroundColor);
}

id static UIColor.cafui_carSystemFocusLabel.getter()
{
  return static UIColor.cafui_carSystemFocus.getter((SEL *)&selRef__carSystemFocusLabelColor);
}

id static UIColor.cafui_tableBackground.getter()
{
  return static UIColor.cafui_tableCellPlainBackground.getter((SEL *)&selRef_tableBackgroundColor);
}

id static UIColor.cafui_tableCellPlainBackground.getter(SEL *a1)
{
  id result;

  result = objc_msgSend((id)objc_opt_self(), *a1);
  if (!result)
    __break(1u);
  return result;
}

id static UIColor.cafui_carSystemFocusSecondary.getter()
{
  return static UIColor.cafui_carSystemFocus.getter((SEL *)&selRef__carSystemFocusSecondaryColor);
}

id static UIColor.cafui_carSystemFocus.getter(SEL *a1)
{
  return objc_msgSend((id)objc_opt_self(), *a1);
}

id CAFUISwitchRepresentable.configureCell(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t (*v27)(char *, uint64_t);
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t);
  uint64_t v33;
  unsigned int (*v34)(char *, uint64_t, int *);
  char v35;
  char *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t ObjectType;
  unsigned int (*v41)(char *, uint64_t, int *);
  uint64_t (*v42)(uint64_t, uint64_t);
  char v43;
  char v44;
  uint64_t v45;
  void *v46;
  id v47;
  uint64_t v48;
  char v49;
  uint64_t (**v50)(uint64_t);
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  unsigned __int8 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  id result;
  uint64_t v63;
  uint64_t v64;
  uint64_t (*v65)(char *, uint64_t);
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t (*v70)(uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v68 = a3;
  v77 = type metadata accessor for UIBackgroundConfiguration();
  v67 = *(_QWORD *)(v77 - 8);
  MEMORY[0x24BDAC7A8](v77);
  v66 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UIBackgroundConfiguration?);
  MEMORY[0x24BDAC7A8](v6);
  v74 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (int *)type metadata accessor for CAFUIAutomakerSettingConfiguration(0);
  v9 = *((_QWORD *)v8 - 1);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v78 = (uint64_t)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v64 = (uint64_t)&v64 - v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v72 = (uint64_t)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v73 = (uint64_t)&v64 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v64 - v18;
  v20 = type metadata accessor for UIListContentConfiguration();
  v21 = *(_QWORD *)(v20 - 8);
  v22 = MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v64 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v26 = (char *)&v64 - v25;
  static UIListContentConfiguration.valueCell()();
  specialized CAFUICellProtocol.updateContentConfigurationProperties(_:)((uint64_t)v24, (uint64_t)v26);
  v69 = v21;
  v27 = *(uint64_t (**)(char *, uint64_t))(v21 + 8);
  v28 = v68;
  v29 = v24;
  v30 = v80;
  v76 = v20;
  v65 = v27;
  v27(v29, v20);
  v31 = *(_QWORD *)(v28 + 8);
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(a2, v31);
  UIListContentConfiguration.text.setter();
  (*(void (**)(uint64_t, uint64_t))(v31 + 48))(a2, v31);
  v75 = v26;
  UIListContentConfiguration.image.setter();
  v32 = (uint64_t (*)(uint64_t))swift_allocObject();
  v79 = a2;
  *((_QWORD *)v32 + 2) = a2;
  *((_QWORD *)v32 + 3) = v28;
  *((_QWORD *)v32 + 4) = v30;
  v81 = a1;
  v33 = a1 + OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_automakerSettingConfiguration;
  swift_beginAccess();
  outlined init with copy of CAFUIAutomakerSettingConfiguration?(v33, (uint64_t)v19);
  v71 = v9;
  v34 = *(unsigned int (**)(char *, uint64_t, int *))(v9 + 48);
  if (v34(v19, 1, v8))
  {
    swift_unknownObjectRetain();
    outlined destroy of CAFUIAutomakerSettingConfiguration?((uint64_t)v19);
LABEL_3:
    v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 16))(v79, v28);
    objc_allocWithZone((Class)type metadata accessor for CAFUISwitchView());
    swift_retain();
    v36 = CAFUISwitchView.init(value:handler:)(v35 & 1, (uint64_t)partial apply for closure #1 in CAFUISwitchRepresentable.configureCell(_:), (uint64_t)v32);
    goto LABEL_4;
  }
  v45 = v64;
  outlined init with copy of CAFUIAutomakerSettingConfiguration((uint64_t)v19, v64);
  swift_unknownObjectRetain();
  outlined destroy of CAFUIAutomakerSettingConfiguration?((uint64_t)v19);
  v46 = *(void **)(v45 + v8[5]);
  v47 = v46;
  outlined destroy of CAFUIAutomakerSettingConfiguration(v45);
  if (!v46)
    goto LABEL_3;
  type metadata accessor for CAFUISwitchView();
  v48 = swift_dynamicCastClass();
  if (!v48)
  {

    goto LABEL_3;
  }
  v36 = (char *)v48;
  v49 = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 16))(v79, v28);
  v50 = (uint64_t (**)(uint64_t))&v36[OBJC_IVAR____TtC5CAFUI15CAFUISwitchView_handler];
  *v50 = partial apply for closure #1 in CAFUISwitchRepresentable.configureCell(_:);
  v50[1] = v32;
  swift_retain();
  swift_release();
  objc_msgSend(*(id *)&v36[OBJC_IVAR____TtC5CAFUI15CAFUISwitchView_uiSwitch], sel_setOn_animated_, v49 & 1, 0);
LABEL_4:
  v37 = (uint64_t *)(v81 + OBJC_IVAR____TtC5CAFUI25CAFUIAutomakerSettingCell_representable);
  swift_beginAccess();
  v38 = *v37;
  v70 = v32;
  if (v38)
  {
    v39 = v37[1];
    ObjectType = swift_getObjectType();
    v41 = v34;
    v42 = *(uint64_t (**)(uint64_t, uint64_t))(v39 + 16);
    swift_unknownObjectRetain();
    v43 = v42(ObjectType, v39);
    v34 = v41;
    v44 = v43;
    swift_unknownObjectRelease();
  }
  else
  {
    v44 = 1;
  }
  v51 = v67;
  v52 = v66;
  objc_msgSend(*(id *)&v36[OBJC_IVAR____TtC5CAFUI15CAFUISwitchView_uiSwitch], sel_setEnabled_, v44 & 1);
  v53 = v69;
  v54 = v78;
  v55 = v76;
  (*(void (**)(uint64_t, char *, uint64_t))(v69 + 16))(v78, v75, v76);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v53 + 56))(v54, 0, 1, v55);
  v56 = v36;
  v57 = CAFListContentRepresentable.isUILimited.getter(v79, v31);
  *(_QWORD *)(v54 + v8[5]) = v36;
  *(_BYTE *)(v54 + v8[6]) = 0;
  *(_BYTE *)(v54 + v8[7]) = v57 & 1;
  v58 = v73;
  outlined init with copy of CAFUIAutomakerSettingConfiguration(v54, v73);
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v71 + 56))(v58, 0, 1, v8);
  swift_beginAccess();
  outlined assign with copy of CAFUIAutomakerSettingConfiguration?(v58, v33);
  swift_endAccess();
  v59 = v72;
  outlined init with copy of CAFUIAutomakerSettingConfiguration?(v33, v72);
  LODWORD(v55) = v34((char *)v59, 1, v8);
  outlined destroy of CAFUIAutomakerSettingConfiguration?(v59);
  if ((_DWORD)v55 != 1)
    CAFUITileBaseCell.setupViews()();
  v60 = outlined destroy of CAFUIAutomakerSettingConfiguration?(v58);
  MEMORY[0x23B8131A8](v60);
  v61 = v74;
  (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v74, v52, v77);
  result = objc_msgSend((id)objc_opt_self(), sel_tableCellPlainBackgroundColor);
  if (result)
  {
    UIBackgroundConfiguration.backgroundColor.setter();
    v63 = v77;
    (*(void (**)(char *, uint64_t))(v51 + 8))(v52, v77);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v61, 0, 1, v63);
    MEMORY[0x23B81319C](v61);

    swift_release();
    outlined destroy of CAFUIAutomakerSettingConfiguration(v78);
    return (id)v65(v75, v76);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_23751C0D8()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CAFUISwitchRepresentable.configureCell(_:)(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 + 24) + 24))(a1, *(_QWORD *)(v1 + 16));
}

uint64_t outlined init with copy of CAFUIAutomakerSettingConfiguration?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t CAFUISwitchRepresentable.cellSelected(isProminent:hasChildren:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized CAFUISwitchRepresentable.cellSelected(isProminent:hasChildren:)(a3, a4);
}

id protocol witness for CAFListContentRepresentable.configureCell(_:) in conformance CAFBooleanSetting(uint64_t a1, uint64_t a2)
{
  return CAFUISwitchRepresentable.configureCell(_:)(a1, a2, (uint64_t)&protocol witness table for CAFBooleanSetting);
}

uint64_t protocol witness for CAFListContentRepresentable.cellSelected(isProminent:hasChildren:) in conformance CAFBooleanSetting(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized CAFUISwitchRepresentable.cellSelected(isProminent:hasChildren:)(a3, (uint64_t)&protocol witness table for CAFBooleanSetting);
}

uint64_t specialized CAFUISwitchRepresentable.cellSelected(isProminent:hasChildren:)(uint64_t a1, uint64_t a2)
{
  void (*v2)(_BYTE *, _QWORD);
  BOOL *v3;
  _BYTE v5[32];

  v2 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, uint64_t))(a2 + 32))(v5, a1);
  *v3 = !*v3;
  v2(v5, 0);
  return 0;
}

UIImage_optional __swiftcall UIImage.imageByScaling(targetHeight:)(Swift::Double targetHeight)
{
  void *v1;
  id v2;
  SEL *v4;
  double v5;
  double v6;
  Swift::Double v7;
  id v8;
  double v9;
  double v10;
  double v11;
  double v12;
  id v13;
  double *v14;
  uint64_t v15;
  id v16;
  Swift::Bool v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  os_log_type_t v24;
  objc_class *v25;
  uint64_t v26;
  unint64_t v27;
  void (*v28)(uint64_t, void *);
  void *v29;
  uint64_t (*v30)();
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  UIImage_optional result;

  v2 = v1;
  v4 = (SEL *)&unk_2508DF000;
  if (targetHeight <= 0.0)
    goto LABEL_5;
  objc_msgSend(v1, sel_size);
  if (v5 <= 0.0)
    goto LABEL_5;
  objc_msgSend(v1, sel_size);
  v7 = targetHeight / v6;
  v8 = objc_msgSend(v1, sel_size);
  v10 = closure #1 in CAFUINumericInputView.init(configuration:)(v8, v7 * v9, targetHeight);
  v12 = v11;
  v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD618]), sel_initWithSize_, v10, v11);
  v14 = (double *)swift_allocObject();
  *((_QWORD *)v14 + 2) = v2;
  v14[3] = v10;
  v14[4] = v12;
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = partial apply for closure #1 in UIImage.imageByScaling(targetHeight:);
  *(_QWORD *)(v15 + 24) = v14;
  v30 = partial apply for thunk for @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ();
  v31 = v15;
  v26 = MEMORY[0x24BDAC760];
  v27 = 1107296256;
  v28 = thunk for @escaping @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ();
  v29 = &block_descriptor_0;
  v4 = (SEL *)_Block_copy(&v26);
  v16 = v2;
  swift_retain();
  swift_release();
  v2 = objc_msgSend(v13, sel_imageWithActions_, v4);

  _Block_release(v4);
  LOBYTE(v13) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if ((v13 & 1) != 0)
  {
    __break(1u);
LABEL_5:
    v26 = 0;
    v27 = 0xE000000000000000;
    _StringGuts.grow(_:)(30);
    v18._countAndFlagsBits = 0x6548746567726174;
    v18._object = (void *)0xED00003D74686769;
    String.append(_:)(v18);
    Double.write<A>(to:)();
    v19._countAndFlagsBits = 0x20656372756F7320;
    v19._object = (void *)0xED00003D657A6973;
    String.append(_:)(v19);
    objc_msgSend(v2, v4[430]);
    v32 = v20;
    v33 = v21;
    type metadata accessor for CGSize(0);
    _print_unlocked<A, B>(_:_:)();
    v22 = v26;
    v23 = v27;
    v24 = static os_log_type_t.error.getter();
    specialized static CAFUILogger.log(_:message:function:file:line:)(v24, v22, v23, 0xD00000000000001DLL, 0x800000023757C430);
    swift_bridgeObjectRelease();
    v2 = 0;
  }
  v25 = (objc_class *)v2;
  result.value.super.isa = v25;
  result.is_nil = v17;
  return result;
}

uint64_t thunk for @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ()(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

void thunk for @escaping @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ()(uint64_t a1, void *a2)
{
  void (*v2)(void);
  id v3;

  v2 = *(void (**)(void))(a1 + 32);
  v3 = a2;
  v2();

}

id UIImage.fit(to:)@<X0>(double *a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  void *v3;
  double v7;
  id result;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;

  v7 = 0.0;
  if (a2 == 0.0 && a3 == 0.0 || (result = objc_msgSend(v3, sel_size), v10 == 0.0) && v9 == 0.0)
  {
    v11 = 0.0;
    v12 = 0.0;
    v13 = 0.0;
    v14 = 0.0;
  }
  else
  {
    v15 = a2 / a3;
    objc_msgSend(v3, sel_size);
    v17 = v16;
    objc_msgSend(v3, sel_size);
    v19 = v17 / v18;
    objc_msgSend(v3, sel_size);
    if (v19 >= a2 / a3)
      v14 = a2 / v20;
    else
      v14 = a3 / v21;
    objc_msgSend(v3, sel_size);
    v12 = v14 * v22;
    result = objc_msgSend(v3, sel_size);
    v13 = v14 * v23;
    if (v19 >= v15)
    {
      if (v15 < v19)
        v7 = a3 * 0.5 - v13 * 0.5;
      v11 = 0.0;
    }
    else
    {
      v11 = a2 * 0.5 - v12 * 0.5;
    }
  }
  *a1 = v11;
  a1[1] = v7;
  a1[2] = v12;
  a1[3] = v13;
  a1[4] = v14;
  return result;
}

uint64_t sub_23751C638()
{
  uint64_t v0;

  return swift_deallocObject();
}

id partial apply for closure #1 in UIImage.imageByScaling(targetHeight:)()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), sel_drawInRect_, 0.0, 0.0, *(double *)(v0 + 24), *(double *)(v0 + 32));
}

uint64_t sub_23751C678()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t CAFUISymbol.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_23751C6FC
                                                                     + 4 * asc_23757998A[a1]))(0xD000000000000010, 0x800000023757C860);
}

unint64_t sub_23751C6FC()
{
  return 0xD000000000000024;
}

uint64_t sub_23751C744()
{
  uint64_t v0;

  return v0 + 20;
}

uint64_t sub_23751C754()
{
  uint64_t v0;

  return v0 + 15;
}

uint64_t sub_23751C764()
{
  uint64_t v0;

  return v0 + 29;
}

uint64_t sub_23751C774()
{
  uint64_t v0;

  return v0 + 7;
}

uint64_t sub_23751C784()
{
  uint64_t v0;

  return v0 + 27;
}

uint64_t sub_23751C794()
{
  uint64_t v0;

  return v0 + 28;
}

uint64_t sub_23751C7A4()
{
  uint64_t v0;

  return v0 + 36;
}

uint64_t sub_23751C7B4()
{
  uint64_t v0;

  return v0 + 27;
}

uint64_t sub_23751C7C4()
{
  uint64_t v0;

  return v0 + 35;
}

uint64_t sub_23751C7D4()
{
  uint64_t v0;

  return v0 + 36;
}

void sub_23751C7E4()
{
  JUMPOUT(0x23751C7F0);
}

unint64_t CAFUISymbol.symbolName.getter(unsigned __int8 a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char v11;
  char *v12;
  char v13;
  Swift::String v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;

  v2 = type metadata accessor for Unicode.Scalar.Properties();
  v21 = *(_QWORD *)(v2 - 8);
  v22 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v20 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  CAFUISymbol.rawValue.getter(a1);
  v4 = String.count.getter();
  if (!v4)
  {
    swift_bridgeObjectRelease();
    v15 = MEMORY[0x24BEE4AF8];
LABEL_20:
    v23 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    v19 = BidirectionalCollection<>.joined(separator:)();
    swift_bridgeObjectRelease();
    return v19;
  }
  v5 = v4;
  v25 = MEMORY[0x24BEE4AF8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 & ~(v4 >> 63), 0);
  if ((v5 & 0x8000000000000000) == 0)
  {
    do
    {
      v7 = String.subscript.getter();
      v9 = v8;
      if ((Character._isSingleScalar.getter() & 1) == 0)
        goto LABEL_11;
      result = specialized Collection.first.getter(v7, v9);
      if ((result & 0x100000000) != 0)
        goto LABEL_22;
      v10 = v20;
      Unicode.Scalar.properties.getter();
      v11 = Unicode.Scalar.Properties.isLowercase.getter();
      (*(void (**)(char *, uint64_t))(v21 + 8))(v10, v22);
      if ((v11 & 1) == 0)
      {
LABEL_11:
        if ((Character._isLowercased.getter() & 1) == 0)
          goto LABEL_12;
        if ((Character._isSingleScalar.getter() & 1) == 0)
          goto LABEL_26;
        result = specialized Collection.first.getter(v7, v9);
        if ((result & 0x100000000) != 0)
          goto LABEL_23;
        v12 = v20;
        Unicode.Scalar.properties.getter();
        v13 = Unicode.Scalar.Properties.isCased.getter();
        (*(void (**)(char *, uint64_t))(v21 + 8))(v12, v22);
        if ((v13 & 1) == 0)
        {
LABEL_26:
          if ((Character._isUppercased.getter() & 1) != 0 && (Character._isLowercased.getter() & 1) != 0)
          {
LABEL_12:
            v14 = String.lowercased()();
            v23 = 46;
            v24 = 0xE100000000000000;
            String.append(_:)(v14);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v7 = v23;
            v9 = v24;
          }
        }
      }
      v15 = v25;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v15 + 16) + 1, 1);
        v15 = v25;
      }
      v17 = *(_QWORD *)(v15 + 16);
      v16 = *(_QWORD *)(v15 + 24);
      if (v17 >= v16 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
        v15 = v25;
      }
      *(_QWORD *)(v15 + 16) = v17 + 1;
      v18 = v15 + 16 * v17;
      *(_QWORD *)(v18 + 32) = v7;
      *(_QWORD *)(v18 + 40) = v9;
      String.index(after:)();
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    result = MEMORY[0x23B813BE0](MEMORY[0x24BEE12B0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }
  return result;
}

unint64_t specialized Collection.first.getter(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unsigned int v5;

  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    _StringGuts.validateScalarIndex(_:)(0xFuLL, a1, a2);
    if ((a2 & 0x1000000000000000) != 0)
    {
      v5 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((a2 & 0x2000000000000000) == 0 && (a1 & 0x1000000000000000) == 0)
        _StringObject.sharedUTF8.getter();
      v5 = _decodeScalar(_:startingAt:)();
    }
  }
  else
  {
    v5 = 0;
  }
  return v5 | ((unint64_t)(v2 == 0) << 32);
}

unint64_t _StringGuts.validateScalarIndex(_:)(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result & 1) == 0 || (result & 0xC) == 4 << v5)
    goto LABEL_9;
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 <= result >> 16)
  {
    __break(1u);
LABEL_9:
    result = _StringGuts.validateSubscalarIndex(_:)(result, a2, a3);
    if ((result & 1) == 0)
      return result & 0xC | _StringGuts.scalarAlignSlow(_:)(result, a2, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
  }
  return result;
}

unint64_t _StringGuts.validateSubscalarIndex(_:)(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result & 0xC) == 4 << v5)
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a2, a3);
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 <= result >> 16)
    __break(1u);
  return result;
}

unint64_t _StringGuts.scalarAlignSlow(_:)(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  _QWORD v13[4];

  if ((result & 0xC000) != 0 || result < 0x10000)
  {
    result &= 0xFFFFFFFFFFFF0000;
  }
  else
  {
    v5 = result >> 16;
    if ((a3 & 0x1000000000000000) == 0)
    {
      v13[2] = v3;
      v13[3] = v4;
      if ((a3 & 0x2000000000000000) != 0)
      {
        v13[0] = a2;
        v13[1] = a3 & 0xFFFFFFFFFFFFFFLL;
        if (v5 != (HIBYTE(a3) & 0xF) && (*((_BYTE *)v13 + v5) & 0xC0) == 0x80)
        {
          do
          {
            v7 = v5 - 1;
            v11 = *((_BYTE *)&v12 + v5-- + 7) & 0xC0;
          }
          while (v11 == 128);
          return v7 << 16;
        }
        goto LABEL_14;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        v6 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if (v5 == (a2 & 0xFFFFFFFFFFFFLL))
          goto LABEL_14;
      }
      else
      {
        v12 = result >> 16;
        v6 = _StringObject.sharedUTF8.getter();
        v5 = v12;
        if (v12 == v10)
          goto LABEL_14;
      }
      if ((*(_BYTE *)(v6 + v5) & 0xC0) == 0x80)
      {
        do
        {
          v7 = v5 - 1;
          v8 = *(_BYTE *)(v6 - 1 + v5--) & 0xC0;
        }
        while (v8 == 128);
        return v7 << 16;
      }
LABEL_14:
      v7 = v5;
      return v7 << 16;
    }
    v9 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0)
      v9 = a2 & 0xFFFFFFFFFFFFLL;
    if (v5 != v9)
      return _StringGuts.foreignScalarAlign(_:)();
  }
  return result;
}

uint64_t CAFSoundDistribution.resettable.getter()
{
  void *v0;
  char v1;
  char v2;
  char v3;
  uint64_t result;
  void *v5;
  __int16 v6;
  unsigned __int8 v7;

  type metadata accessor for CAFSoundDistribution();
  lazy protocol witness table accessor for type CAFSoundDistribution and conformance CAFSoundDistribution();
  v0 = (void *)CAFObserved<>.observable.getter();
  v1 = dispatch thunk of CAFSoundDistributionObservable.balance.getter();

  CAFSoundDistribution.balanceCenter.getter();
  if (v2 < 0)
    goto LABEL_14;
  v3 = v2;
  result = 1;
  if (v1 < 0 || v1 != v3)
    return result;
  v5 = (void *)CAFObserved<>.observable.getter();
  v6 = dispatch thunk of CAFSoundDistributionObservable.fade.getter();

  if ((v6 & 0x100) != 0)
    return 0;
  CAFSoundDistribution.fadeCenter.getter();
  if ((v7 & 0x80) != 0)
  {
LABEL_14:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  return (v6 & 0x80u) != 0 || v7 != v6;
}

Swift::Void __swiftcall CAFSoundDistribution.reset()()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;

  if (objc_msgSend(v0, sel_hasFade))
  {
    type metadata accessor for CAFSoundDistribution();
    lazy protocol witness table accessor for type CAFSoundDistribution and conformance CAFSoundDistribution();
    v1 = (void *)CAFObserved<>.observable.getter();
    v2 = (void *)CAFObserved<>.observable.getter();
    v3 = (void *)CAFSoundDistributionObservable.observed.getter();

    CAFSoundDistribution.fadeCenter.getter();
    dispatch thunk of CAFSoundDistributionObservable.fade.setter();

  }
  type metadata accessor for CAFSoundDistribution();
  lazy protocol witness table accessor for type CAFSoundDistribution and conformance CAFSoundDistribution();
  v6 = (id)CAFObserved<>.observable.getter();
  v4 = (void *)CAFObserved<>.observable.getter();
  v5 = (void *)CAFSoundDistributionObservable.observed.getter();

  CAFSoundDistribution.balanceCenter.getter();
  dispatch thunk of CAFSoundDistributionObservable.balance.setter();

}

void CAFSoundDistribution.balanceCenter.getter()
{
  void *v0;
  id v1;
  unsigned int v2;
  id v3;
  unsigned int v4;
  int v5;
  double v6;
  id v7;
  int v8;
  double v9;
  uint64_t v10;
  id v11;

  v1 = objc_msgSend(v0, sel_balanceRange);
  v2 = objc_msgSend(v1, sel_maximumValue);

  v3 = objc_msgSend(v0, sel_balanceRange);
  v4 = objc_msgSend(v3, sel_minimumValue);

  v5 = (char)(v2 - v4);
  if (v5 != v2 - v4)
  {
    __break(1u);
    goto LABEL_7;
  }
  v6 = (double)v5;
  v7 = objc_msgSend(v0, sel_balanceRange);
  v8 = objc_msgSend(v7, sel_minimumValue);

  v9 = v6 * 0.5 + (double)v8;
  if ((~*(_QWORD *)&v9 & 0x7FF0000000000000) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (v9 <= -129.0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v9 < 128.0)
  {
    v10 = (int)v9;
    v11 = objc_msgSend(v0, sel_balanceRange);
    objc_msgSend(v11, sel_valueRoundedToNearestStepValue_, v10);

    return;
  }
LABEL_9:
  __break(1u);
}

void CAFSoundDistribution.fadeCenter.getter()
{
  void *v0;
  id v1;
  unsigned int v2;
  id v3;
  unsigned int v4;
  int v5;
  double v6;
  id v7;
  int v8;
  double v9;
  uint64_t v10;
  id v11;

  if (objc_msgSend(v0, sel_hasFade))
  {
    v1 = objc_msgSend(v0, sel_fadeRange);
    v2 = objc_msgSend(v1, sel_maximumValue);

    v3 = objc_msgSend(v0, sel_fadeRange);
    v4 = objc_msgSend(v3, sel_minimumValue);

    v5 = (char)(v2 - v4);
    if (v5 == v2 - v4)
    {
      v6 = (double)v5;
      v7 = objc_msgSend(v0, sel_fadeRange);
      v8 = objc_msgSend(v7, sel_minimumValue);

      v9 = v6 * 0.5 + (double)v8;
      if ((~*(_QWORD *)&v9 & 0x7FF0000000000000) != 0)
      {
        if (v9 > -129.0)
        {
          if (v9 < 128.0)
          {
            v10 = (int)v9;
            v11 = objc_msgSend(v0, sel_fadeRange);
            objc_msgSend(v11, sel_valueRoundedToNearestStepValue_, v10);

            return;
          }
          goto LABEL_11;
        }
LABEL_10:
        __break(1u);
LABEL_11:
        __break(1u);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_10;
  }
}

void CAFSoundDistribution.balanceScale.getter()
{
  void *v0;
  id v1;
  unsigned int v2;
  id v3;
  unsigned int v4;
  unsigned int v5;
  id v6;
  unsigned int v7;

  v1 = objc_msgSend(v0, sel_balanceRange);
  v2 = objc_msgSend(v1, sel_maximumValue);

  v3 = objc_msgSend(v0, sel_balanceRange);
  v4 = objc_msgSend(v3, sel_minimumValue);

  if ((char)(v2 - v4) != v2 - v4)
  {
    __break(1u);
    goto LABEL_5;
  }
  v5 = objc_msgSend(v0, sel_balance);
  v6 = objc_msgSend(v0, sel_balanceRange);
  v7 = objc_msgSend(v6, sel_minimumValue);

  if ((char)(v5 - v7) != v5 - v7)
LABEL_5:
    __break(1u);
}

void CAFSoundDistribution.balanceScale.setter(double a1)
{
  void *v1;
  Swift::String v4;
  os_log_type_t v5;
  id v6;
  unsigned int v7;
  id v8;
  unsigned int v9;
  int v10;
  double v11;
  id v12;
  unsigned int v13;
  double v14;

  if (a1 < 0.0 || a1 > 1.0)
  {
    _StringGuts.grow(_:)(61);
    v4._object = (void *)0x800000023757C8C0;
    v4._countAndFlagsBits = 0xD00000000000003BLL;
    String.append(_:)(v4);
    Double.write<A>(to:)();
    v5 = static os_log_type_t.error.getter();
    specialized static CAFUILogger.log(_:message:function:file:line:)(v5, 0, 0xE000000000000000, 0x5365636E616C6162, 0xEC000000656C6163);
    swift_bridgeObjectRelease();
    return;
  }
  v6 = objc_msgSend(v1, sel_balanceRange);
  v7 = objc_msgSend(v6, sel_maximumValue);

  v8 = objc_msgSend(v1, sel_balanceRange);
  v9 = objc_msgSend(v8, sel_minimumValue);

  v10 = (char)(v7 - v9);
  if (v10 != v7 - v9)
  {
    __break(1u);
    goto LABEL_14;
  }
  v11 = (double)v10;
  v12 = objc_msgSend(v1, sel_balanceRange);
  v13 = objc_msgSend(v12, sel_minimumValue);

  v14 = v11 * a1;
  if ((~COERCE__INT64(v11 * a1) & 0x7FF0000000000000) == 0)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v14 <= -129.0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v14 >= 128.0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if ((char)(v13 + (int)v14) == v13 + (int)v14)
  {
    objc_msgSend(v1, sel_setBalance_);
    return;
  }
LABEL_17:
  __break(1u);
}

void CAFSoundDistribution.fadeScale.getter()
{
  void *v0;
  id v1;
  unsigned int v2;
  id v3;
  unsigned int v4;
  unsigned int v5;
  id v6;
  unsigned int v7;

  if (objc_msgSend(v0, sel_hasFade))
  {
    v1 = objc_msgSend(v0, sel_fadeRange, 0.5);
    v2 = objc_msgSend(v1, sel_maximumValue);

    v3 = objc_msgSend(v0, sel_fadeRange);
    v4 = objc_msgSend(v3, sel_minimumValue);

    if ((char)(v2 - v4) == v2 - v4)
    {
      v5 = objc_msgSend(v0, sel_fade);
      v6 = objc_msgSend(v0, sel_fadeRange);
      v7 = objc_msgSend(v6, sel_minimumValue);

      if ((char)(v5 - v7) == v5 - v7)
        return;
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
}

void CAFSoundDistribution.fadeScale.setter(double a1)
{
  void *v1;
  Swift::String v4;
  os_log_type_t v5;
  id v6;
  unsigned int v7;
  id v8;
  unsigned int v9;
  int v10;
  double v11;
  id v12;
  unsigned int v13;
  double v14;

  if (a1 < 0.0 || a1 > 1.0)
  {
    _StringGuts.grow(_:)(58);
    v4._object = (void *)0x800000023757C880;
    v4._countAndFlagsBits = 0xD000000000000038;
    String.append(_:)(v4);
    Double.write<A>(to:)();
    v5 = static os_log_type_t.error.getter();
    specialized static CAFUILogger.log(_:message:function:file:line:)(v5, 0, 0xE000000000000000, 0x6C61635365646166, 0xE900000000000065);
    swift_bridgeObjectRelease();
    return;
  }
  v6 = objc_msgSend(v1, sel_fadeRange);
  v7 = objc_msgSend(v6, sel_maximumValue);

  v8 = objc_msgSend(v1, sel_fadeRange);
  v9 = objc_msgSend(v8, sel_minimumValue);

  v10 = (char)(v7 - v9);
  if (v10 != v7 - v9)
  {
    __break(1u);
    goto LABEL_14;
  }
  v11 = (double)v10;
  v12 = objc_msgSend(v1, sel_fadeRange);
  v13 = objc_msgSend(v12, sel_minimumValue);

  v14 = v11 * a1;
  if ((~COERCE__INT64(v11 * a1) & 0x7FF0000000000000) == 0)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v14 <= -129.0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v14 >= 128.0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if ((char)(v13 + (int)v14) == v13 + (int)v14)
  {
    objc_msgSend(v1, sel_setFade_);
    return;
  }
LABEL_17:
  __break(1u);
}

unint64_t type metadata accessor for CAFSoundDistribution()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CAFSoundDistribution;
  if (!lazy cache variable for type metadata for CAFSoundDistribution)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFSoundDistribution);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CAFSoundDistribution and conformance CAFSoundDistribution()
{
  unint64_t result;
  unint64_t v1;

  result = lazy protocol witness table cache variable for type CAFSoundDistribution and conformance CAFSoundDistribution;
  if (!lazy protocol witness table cache variable for type CAFSoundDistribution and conformance CAFSoundDistribution)
  {
    v1 = type metadata accessor for CAFSoundDistribution();
    result = MEMORY[0x23B813BE0](MEMORY[0x24BE100F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFSoundDistribution and conformance CAFSoundDistribution);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8NSNumberCG_Sis5NeverOTg5068_sSo29CAFMultipleSelectImageSettingC5CAFUIE15selectedIndicesSaySiGvgp3So8D54Ccfu_33_5bdac5b40c7411f20a64c1277f8fd44fAGSiTf3nnnpk_nTf1cn_nTm(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (a1 >> 62)
    goto LABEL_15;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v3 = MEMORY[0x24BEE4AF8];
    if (!v2)
      return v3;
    v11 = MEMORY[0x24BEE4AF8];
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0)
      break;
    v5 = 0;
    v3 = v11;
    while (v2 != v5)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v6 = (id)MEMORY[0x23B813418](v5, a1);
      else
        v6 = *(id *)(a1 + 8 * v5 + 32);
      v7 = v6;
      v8 = objc_msgSend(v6, sel_integerValue);

      v10 = *(_QWORD *)(v11 + 16);
      v9 = *(_QWORD *)(v11 + 24);
      if (v10 >= v9 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
      ++v5;
      *(_QWORD *)(v11 + 16) = v10 + 1;
      *(_QWORD *)(v11 + 8 * v10 + 32) = v8;
      if (v2 == v5)
        return v3;
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

id specialized CAFListContentRepresentable.symbolImage.getter()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  id v12;

  v1 = objc_msgSend(v0, sel_symbolName);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5 = v4;

  v6 = *MEMORY[0x24BEBE1D8];
  v7 = (void *)objc_opt_self();
  v8 = objc_msgSend(v7, sel_configurationWithTextStyle_scale_, v6, 2);
  v9 = objc_msgSend(v7, sel_configurationWithWeight_, 6);
  v10 = objc_msgSend(v8, sel_configurationByApplyingConfiguration_, v9);

  v11 = (void *)MEMORY[0x23B812F68](v3, v5);
  swift_bridgeObjectRelease();
  v12 = CAFUIImageForSymbolNameWithConfiguration(v11, v10);

  return v12;
}

id CAFSingleSelectImageSetting.detailLabel.getter()
{
  void *v0;
  unsigned int v1;
  id v2;
  uint64_t v3;
  unint64_t v4;
  id v5;
  uint64_t v6;
  id result;
  uint64_t v8;

  v1 = objc_msgSend(v0, sel_currentUserVisibleValue);
  v2 = objc_msgSend(v0, sel_listUserVisibleValue);
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v4 = *(_QWORD *)(v3 + 16);
  swift_bridgeObjectRelease();
  if (v4 <= v1)
    return 0;
  v5 = objc_msgSend(v0, sel_listUserVisibleValue);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  result = objc_msgSend(v0, sel_currentUserVisibleValue);
  if (*(_QWORD *)(v6 + 16) > (unint64_t)result)
  {
    v8 = *(_QWORD *)(v6 + 16 * result + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    return (id)v8;
  }
  __break(1u);
  return result;
}

id CAFSingleSelectImageSetting.detailImage.getter()
{
  void *v0;
  unsigned int v1;
  id v2;
  uint64_t v3;
  unint64_t v4;
  id v5;
  uint64_t v6;
  id result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  Class isa;
  id v13;

  v1 = objc_msgSend(v0, sel_currentUserVisibleValue);
  v2 = objc_msgSend(v0, sel_images);
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v4 = *(_QWORD *)(v3 + 16);
  swift_bridgeObjectRelease();
  if (v4 <= v1)
    return 0;
  v5 = objc_msgSend(v0, sel_images);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  result = objc_msgSend(v0, sel_currentUserVisibleValue);
  if (*(_QWORD *)(v6 + 16) > (unint64_t)result)
  {
    v8 = v6 + 16 * result;
    v9 = *(_QWORD *)(v8 + 32);
    v10 = *(_QWORD *)(v8 + 40);
    outlined copy of Data._Representation(v9, v10);
    swift_bridgeObjectRelease();
    v11 = objc_allocWithZone(MEMORY[0x24BEBD640]);
    isa = Data._bridgeToObjectiveC()().super.isa;
    v13 = objc_msgSend(v11, sel_initWithData_, isa);
    outlined consume of Data._Representation(v9, v10);

    return v13;
  }
  __break(1u);
  return result;
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t CAFSingleSelectImageSetting.selectedIndices.getter()
{
  void *v0;
  unsigned int v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;

  v1 = objc_msgSend(v0, sel_currentUserVisibleValue);
  v2 = objc_msgSend(v0, sel_listUserVisibleValue);
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v4 = *(_QWORD *)(v3 + 16);
  swift_bridgeObjectRelease();
  v5 = v0;
  v6 = specialized Sequence.compactMap<A>(_:)(0, v4, v5);

  v7 = v6[2];
  swift_bridgeObjectRelease();
  if (v7 <= v1)
    return MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_237579480;
  *(_QWORD *)(v8 + 32) = objc_msgSend(v5, sel_currentUserVisibleValue);
  return v8;
}

id CAFSingleSelectImageSetting.selectedIndices.setter(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  Class isa;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  __int128 v27;
  __int128 v28;
  unint64_t v29;
  unint64_t v30;
  Swift::String v31;
  __int128 v32;
  os_log_type_t v33;
  id result;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[48];
  _OWORD v43[2];
  __int128 v44;
  ValueMetadata *v45;
  _UNKNOWN **v46;

  v2 = a1;
  v37 = *(_QWORD *)(a1 + 16);
  if (!v37)
    goto LABEL_20;
  v36 = a1 + 32;
  swift_bridgeObjectRetain();
  v3 = 0;
  while (1)
  {
    if ((*(_QWORD *)(v36 + 8 * v3) & 0x8000000000000000) == 0)
    {
      v38 = *(_QWORD *)(v36 + 8 * v3);
      v7 = objc_msgSend(v1, sel_listUserVisibleValue);
      v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      v9 = *(_QWORD *)(v8 + 16);
      swift_bridgeObjectRelease();
      v39 = v3;
      if (v9)
      {
        v10 = 0;
        v11 = 0;
        v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
        while (1)
        {
          v12 = objc_msgSend(v1, sel_images);
          v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          v14 = *(_QWORD *)(v13 + 16);
          swift_bridgeObjectRelease();
          if (v11 < v14)
          {
            v15 = objc_msgSend(v1, sel_images);
            v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

            if (v11 >= *(_QWORD *)(v16 + 16))
            {
              __break(1u);
LABEL_24:
              __break(1u);
LABEL_25:
              result = (id)_assertionFailure(_:_:file:line:flags:)();
              __break(1u);
              return result;
            }
            v17 = *(_QWORD *)(v16 + v10 + 32);
            v18 = *(_QWORD *)(v16 + v10 + 40);
            outlined copy of Data._Representation(v17, v18);
            swift_bridgeObjectRelease();
            v19 = objc_allocWithZone(MEMORY[0x24BEBD640]);
            isa = Data._bridgeToObjectiveC()().super.isa;
            v21 = objc_msgSend(v19, sel_initWithData_, isa);
            outlined consume of Data._Representation(v17, v18);

            if (v21)
            {
              v22 = objc_msgSend(v1, sel_listUserVisibleValue);
              v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

              if (v11 >= *(_QWORD *)(v23 + 16))
                goto LABEL_24;
              v25 = *(_QWORD *)(v23 + v10 + 32);
              v24 = *(_QWORD *)(v23 + v10 + 40);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              memset(v43, 0, sizeof(v43));
              v45 = &type metadata for CAFUIImageRepresentableItem;
              v46 = &protocol witness table for CAFUIImageRepresentableItem;
              v26 = (_OWORD *)swift_allocObject();
              *(_QWORD *)&v44 = v26;
              memset(&v42[8], 0, 40);
              *(_QWORD *)&v40 = v25;
              *((_QWORD *)&v40 + 1) = v24;
              v41 = (unint64_t)v21;
              v42[0] = 1;
              outlined assign with take of Any?((uint64_t)v43, (uint64_t)&v42[8]);

              *(_QWORD *)&v42[40] = 0;
              v27 = *(_OWORD *)&v42[16];
              v26[3] = *(_OWORD *)v42;
              v26[4] = v27;
              v28 = v41;
              v26[1] = v40;
              v26[2] = v28;
              v26[5] = *(_OWORD *)&v42[32];
              outlined init with take of CAFUIImageRepresentableItemProtocol(&v44, (uint64_t)&v40);
              outlined init with take of CAFUIImageRepresentableItemProtocol(&v40, (uint64_t)&v44);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
              v30 = v4[2];
              v29 = v4[3];
              if (v30 >= v29 >> 1)
                v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v29 > 1), v30 + 1, 1, v4);
              v4[2] = v30 + 1;
              outlined init with take of CAFUIImageRepresentableItemProtocol(&v44, (uint64_t)&v4[5 * v30 + 4]);
            }
          }
          ++v11;
          v10 += 16;
          if (v9 == v11)
            goto LABEL_4;
        }
      }
      v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_4:
      v5 = v4[2];
      swift_bridgeObjectRelease();
      v6 = v38 < v5;
      v3 = v39;
      if (v6)
        break;
    }
    if (++v3 == v37)
    {
      v2 = a1;
      swift_bridgeObjectRelease();
LABEL_20:
      *(_QWORD *)&v40 = 0;
      *((_QWORD *)&v40 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(37);
      swift_bridgeObjectRelease();
      *(_QWORD *)&v40 = 0xD000000000000023;
      *((_QWORD *)&v40 + 1) = 0x800000023757C950;
      v31._countAndFlagsBits = MEMORY[0x23B813040](v2, MEMORY[0x24BEE1768]);
      String.append(_:)(v31);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v32 = v40;
      v33 = static os_log_type_t.info.getter();
      specialized static CAFUILogger.log(_:message:function:file:line:)(v33, v32, *((unint64_t *)&v32 + 1), 0x64657463656C6573, 0xEF73656369646E49);
      return (id)swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease_n();
  if (v38 >= 256)
    goto LABEL_25;
  return objc_msgSend(v1, sel_setCurrentUserVisibleValue_, v38);
}

uint64_t (*CAFSingleSelectImageSetting.selectedIndices.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  void *v1;
  unsigned int v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;

  a1[1] = (uint64_t)v1;
  v3 = objc_msgSend(v1, sel_currentUserVisibleValue);
  v4 = objc_msgSend(v1, sel_listUserVisibleValue);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v6 = *(_QWORD *)(v5 + 16);
  swift_bridgeObjectRelease();
  v7 = v1;
  v8 = specialized Sequence.compactMap<A>(_:)(0, v6, v7);

  v9 = v8[2];
  swift_bridgeObjectRelease();
  if (v9 <= v3)
  {
    v10 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_237579480;
    *(_QWORD *)(v10 + 32) = objc_msgSend(v7, sel_currentUserVisibleValue);
  }
  *a1 = v10;
  return CAFSingleSelectImageSetting.selectedIndices.modify;
}

uint64_t CAFSingleSelectImageSetting.selectedIndices.modify(uint64_t *a1, char a2)
{
  return CAFSingleSelectImageSetting.selectedIndices.modify(a1, a2, (uint64_t (*)(uint64_t))CAFSingleSelectImageSetting.selectedIndices.setter);
}

uint64_t CAFSingleSelectImageSetting.cellSelected(isProminent:hasChildren:)()
{
  return specialized CAFSingleSelectImageSetting.cellSelected(isProminent:hasChildren:)((uint64_t (*)(void *, id, id))specialized CAFUICollectionViewController.init(setting:isRHD:));
}

uint64_t CAFSingleSelectImageSetting.isHighlightable.getter()
{
  return 1;
}

uint64_t CAFSingleSelectImageSetting.isEnabled.getter()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  id v4;
  unsigned int v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;
  os_log_type_t v13;

  v1 = v0;
  if (!objc_msgSend(v0, sel_limitableUIElement))
    return objc_msgSend(v1, sel_disabled) ^ 1;
  v2 = (void *)specialized CAFListContentRepresentable.session.getter();
  if (!v2)
    return objc_msgSend(v1, sel_disabled) ^ 1;
  v3 = v2;
  v4 = objc_msgSend(v2, sel_limitUserInterfaces);

  if (!v4)
    return objc_msgSend(v1, sel_disabled) ^ 1;
  v5 = objc_msgSend(v4, sel_BOOLValue);

  if (!v5)
    return objc_msgSend(v1, sel_disabled) ^ 1;
  _StringGuts.grow(_:)(47);
  swift_bridgeObjectRelease();
  v6 = v1;
  v7 = objc_msgSend(v6, sel_description);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v10 = v9;

  v11._countAndFlagsBits = v8;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 46;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  v13 = static os_log_type_t.info.getter();
  specialized static CAFUILogger.log(_:message:function:file:line:)(v13, 0xD00000000000002CLL, 0x800000023757C9B0, 0x656C62616E457369, 0xE900000000000064);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t (*protocol witness for CAFUIImageRepresentable.selectedIndices.modify in conformance CAFSingleSelectImageSetting(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = CAFSingleSelectImageSetting.selectedIndices.getter();
  return CAFSingleSelectImageSetting.selectedIndices.modify;
}

uint64_t protocol witness for CAFListContentRepresentable.symbolName.getter in conformance CAFSingleSelectImageSetting(uint64_t a1, uint64_t a2)
{
  return protocol witness for CAFListContentRepresentable.symbolName.getter in conformance CAFSingleSelectImageSetting(a1, a2, (SEL *)&selRef_symbolName);
}

uint64_t protocol witness for CAFListContentRepresentable.cellSelected(isProminent:hasChildren:) in conformance CAFSingleSelectImageSetting()
{
  return specialized CAFSingleSelectImageSetting.cellSelected(isProminent:hasChildren:)((uint64_t (*)(void *, id, id))specialized CAFUICollectionViewController.init(setting:isRHD:));
}

uint64_t CAFMultipleSelectImageSetting.allowsMultipleSelection.getter()
{
  return 1;
}

unint64_t CAFMultipleSelectImageSetting.detailLabel.getter()
{
  void *v0;
  id v1;
  unint64_t v2;
  uint64_t v3;
  id v4;
  unint64_t v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  unint64_t result;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  id v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;

  v1 = objc_msgSend(v0, sel_indicesUserVisibleValue);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v3 != 1)
  {
    if (!v3)
      goto LABEL_14;
    v12 = (void *)MEMORY[0x23B812F68](0xD000000000000015, 0x800000023757C9E0);
    v13 = CAFUILocalizedStringForKey(v12);

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_237579480;
    v15 = objc_msgSend(v0, sel_indicesUserVisibleValue);
    v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v16 >> 62)
    {
      swift_bridgeObjectRetain();
      v17 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v17 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v18 = MEMORY[0x24BEE17F0];
    *(_QWORD *)(v14 + 56) = MEMORY[0x24BEE1768];
    *(_QWORD *)(v14 + 64) = v18;
    *(_QWORD *)(v14 + 32) = v17;
    v11 = String.init(format:_:)();
LABEL_13:
    swift_bridgeObjectRelease();
    return v11;
  }
  v4 = objc_msgSend(v0, sel_indicesUserVisibleValue);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v6 = v0;
  v7 = specialized Sequence.first(where:)(v5, v6);
  swift_bridgeObjectRelease();

  if (!v7)
  {
LABEL_14:
    v19 = (void *)MEMORY[0x23B812F68](0x44455443454C4553, 0xED0000454E4F4E5FLL);
    v20 = CAFUILocalizedStringForKey(v19);

    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    return v11;
  }
  v8 = objc_msgSend(v6, sel_listUserVisibleValue);
  v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  result = (unint64_t)objc_msgSend(v7, sel_integerValue);
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(_QWORD *)(v9 + 16))
  {
    v11 = *(_QWORD *)(v9 + 16 * result + 32);
    swift_bridgeObjectRetain();

    goto LABEL_13;
  }
  __break(1u);
  return result;
}

void CAFMultipleSelectImageSetting.detailImage.getter()
{
  void *v0;
  id v1;
  unint64_t v2;
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  id v14;
  Class isa;
  uint64_t v16;

  v1 = objc_msgSend(v0, sel_indicesUserVisibleValue);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v16)
      goto LABEL_3;
LABEL_11:
    swift_bridgeObjectRelease();
    return;
  }
  if (!*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_11;
LABEL_3:
  if ((v2 & 0xC000000000000001) != 0)
  {
    v3 = (id)MEMORY[0x23B813418](0, v2);
  }
  else
  {
    if (!*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_15;
    }
    v3 = *(id *)(v2 + 32);
  }
  v4 = v3;
  swift_bridgeObjectRelease();
  v5 = (uint64_t)objc_msgSend(v4, sel_integerValue);

  v6 = objc_msgSend(v0, sel_images);
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v8 = *(_QWORD *)(v7 + 16);
  swift_bridgeObjectRelease();
  if (v5 < v8)
  {
    v9 = objc_msgSend(v0, sel_images);
    v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if ((v5 & 0x8000000000000000) == 0)
    {
      if ((unint64_t)v5 < *(_QWORD *)(v10 + 16))
      {
        v11 = v10 + 16 * v5;
        v12 = *(_QWORD *)(v11 + 32);
        v13 = *(_QWORD *)(v11 + 40);
        outlined copy of Data._Representation(v12, v13);
        swift_bridgeObjectRelease();
        v14 = objc_allocWithZone(MEMORY[0x24BEBD640]);
        isa = Data._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v14, sel_initWithData_, isa);
        outlined consume of Data._Representation(v12, v13);

        return;
      }
      goto LABEL_16;
    }
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
  }
}

_QWORD *CAFSingleSelectImageSetting.items.getter()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  _QWORD *v5;

  v1 = objc_msgSend(v0, sel_listUserVisibleValue);
  v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v3 = *(_QWORD *)(v2 + 16);
  swift_bridgeObjectRelease();
  v4 = v0;
  v5 = specialized Sequence.compactMap<A>(_:)(0, v3, v4);

  return v5;
}

void closure #1 in CAFSingleSelectImageSetting.items.getter(id a1@<X1>, unint64_t *a2@<X0>, uint64_t a3@<X8>)
{
  unint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  id v14;
  Class isa;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[48];
  _OWORD v26[2];

  v5 = *a2;
  v6 = objc_msgSend(a1, sel_images);
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v8 = *(_QWORD *)(v7 + 16);
  swift_bridgeObjectRelease();
  if ((uint64_t)v5 >= v8)
    goto LABEL_7;
  v9 = objc_msgSend(a1, sel_images);
  v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if ((v5 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (v5 >= *(_QWORD *)(v10 + 16))
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    return;
  }
  v11 = v10 + 16 * v5;
  v12 = *(_QWORD *)(v11 + 32);
  v13 = *(_QWORD *)(v11 + 40);
  outlined copy of Data._Representation(v12, v13);
  swift_bridgeObjectRelease();
  v14 = objc_allocWithZone(MEMORY[0x24BEBD640]);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v16 = objc_msgSend(v14, sel_initWithData_, isa);
  outlined consume of Data._Representation(v12, v13);

  if (v16)
  {
    v17 = objc_msgSend(a1, sel_listUserVisibleValue);
    v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v5 < *(_QWORD *)(v18 + 16))
    {
      v19 = v18 + 16 * v5;
      v21 = *(_QWORD *)(v19 + 32);
      v20 = *(_QWORD *)(v19 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      memset(v26, 0, sizeof(v26));
      *(_QWORD *)(a3 + 24) = &type metadata for CAFUIImageRepresentableItem;
      *(_QWORD *)(a3 + 32) = &protocol witness table for CAFUIImageRepresentableItem;
      v22 = (_OWORD *)swift_allocObject();
      *(_QWORD *)a3 = v22;
      memset(&v25[8], 0, 40);
      *(_QWORD *)&v24 = v21;
      *((_QWORD *)&v24 + 1) = v20;
      v25[0] = 1;
      outlined assign with take of Any?((uint64_t)v26, (uint64_t)&v25[8]);

      *(_QWORD *)&v25[40] = 0;
      v23 = *(_OWORD *)&v25[16];
      v22[3] = *(_OWORD *)v25;
      v22[4] = v23;
      v22[1] = v24;
      v22[2] = (unint64_t)v16;
      v22[5] = *(_OWORD *)&v25[32];
      return;
    }
    goto LABEL_11;
  }
LABEL_7:
  *(_QWORD *)(a3 + 32) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
}

uint64_t CAFMultipleSelectImageSetting.selectedIndices.getter()
{
  return CAFMultipleSelectImageSetting.selectedIndices.getter((SEL *)&selRef_indicesUserVisibleValue, (uint64_t (*)(uint64_t, id))specialized _ArrayProtocol.filter(_:));
}

void CAFMultipleSelectImageSetting.selectedIndices.setter(uint64_t a1)
{
  void *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Class isa;

  v3 = v1;
  specialized _ArrayProtocol.filter(_:)(a1, v3);
  v5 = v4;
  swift_bridgeObjectRelease();

  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    v7 = 0;
    do
    {
      v8 = v7 + 1;
      objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithInteger_, *(_QWORD *)(v5 + 8 * v7 + 32));
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v7 = v8;
    }
    while (v6 != v8);
  }
  swift_bridgeObjectRelease();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v3, sel_setIndicesUserVisibleValue_, isa);

}

uint64_t (*CAFMultipleSelectImageSetting.selectedIndices.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  void *v1;
  id v3;
  unint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  a1[2] = v1;
  v3 = objc_msgSend(v1, sel_indicesUserVisibleValue);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8NSNumberCG_Sis5NeverOTg5068_sSo29CAFMultipleSelectImageSettingC5CAFUIE15selectedIndicesSaySiGvgp3So8D54Ccfu_33_5bdac5b40c7411f20a64c1277f8fd44fAGSiTf3nnnpk_nTf1cn_nTm(v4);
  swift_bridgeObjectRelease();
  v6 = v1;
  specialized _ArrayProtocol.filter(_:)(v5, v6);
  v8 = v7;

  swift_bridgeObjectRelease();
  *a1 = v8;
  return CAFMultipleSelectImageSetting.selectedIndices.modify;
}

uint64_t CAFMultipleSelectImageSetting.selectedIndices.modify(uint64_t *a1, char a2)
{
  return CAFMultipleSelectImageSetting.selectedIndices.modify(a1, a2, (uint64_t (*)(uint64_t))CAFMultipleSelectImageSetting.selectedIndices.setter);
}

uint64_t CAFMultipleSelectImageSetting.cellSelected(isProminent:hasChildren:)()
{
  return specialized CAFSingleSelectImageSetting.cellSelected(isProminent:hasChildren:)((uint64_t (*)(void *, id, id))specialized CAFUICollectionViewController.init(setting:isRHD:));
}

uint64_t CAFMultipleSelectImageSetting.isHighlightable.getter()
{
  return 1;
}

uint64_t CAFMultipleSelectImageSetting.isEnabled.getter()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  id v4;
  unsigned int v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;
  os_log_type_t v13;

  v1 = v0;
  if (!objc_msgSend(v0, sel_limitableUIElement))
    return objc_msgSend(v1, sel_disabled) ^ 1;
  v2 = (void *)specialized CAFListContentRepresentable.session.getter();
  if (!v2)
    return objc_msgSend(v1, sel_disabled) ^ 1;
  v3 = v2;
  v4 = objc_msgSend(v2, sel_limitUserInterfaces);

  if (!v4)
    return objc_msgSend(v1, sel_disabled) ^ 1;
  v5 = objc_msgSend(v4, sel_BOOLValue);

  if (!v5)
    return objc_msgSend(v1, sel_disabled) ^ 1;
  _StringGuts.grow(_:)(47);
  swift_bridgeObjectRelease();
  v6 = v1;
  v7 = objc_msgSend(v6, sel_description);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v10 = v9;

  v11._countAndFlagsBits = v8;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 46;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  v13 = static os_log_type_t.info.getter();
  specialized static CAFUILogger.log(_:message:function:file:line:)(v13, 0xD00000000000002CLL, 0x800000023757C9B0, 0x656C62616E457369, 0xE900000000000064);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t protocol witness for CAFUIImageRepresentable.selectedIndices.getter in conformance CAFMultipleSelectImageSetting(uint64_t a1, uint64_t a2)
{
  return protocol witness for CAFUIImageRepresentable.selectedIndices.getter in conformance CAFMultipleSelectImageSetting(a1, a2, (SEL *)&selRef_indicesUserVisibleValue, (uint64_t (*)(uint64_t, id))specialized _ArrayProtocol.filter(_:));
}

uint64_t (*protocol witness for CAFUIImageRepresentable.selectedIndices.modify in conformance CAFMultipleSelectImageSetting(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = CAFMultipleSelectImageSetting.selectedIndices.modify(v2);
  return protocol witness for CAFUIImageRepresentable.selectedIndices.modify in conformance CAFMultipleSelectImageSetting;
}

uint64_t protocol witness for CAFListContentRepresentable.cellSelected(isProminent:hasChildren:) in conformance CAFMultipleSelectImageSetting()
{
  return specialized CAFSingleSelectImageSetting.cellSelected(isProminent:hasChildren:)((uint64_t (*)(void *, id, id))specialized CAFUICollectionViewController.init(setting:isRHD:));
}

void CAFIntegerSetting.numericDisplayKind.getter()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;

  v1 = objc_msgSend(v0, sel_valueRange);
  v2 = objc_msgSend(v1, sel_maximum);

  v3 = objc_msgSend(v2, sel_longLongValue);
  v4 = objc_msgSend(v0, sel_valueRange);
  v5 = objc_msgSend(v4, sel_minimum);

  v6 = objc_msgSend(v5, sel_longLongValue);
  if (__OFSUB__(v3, v6))
  {
    __break(1u);
  }
  else
  {
    v7 = objc_msgSend(v0, sel_valueRange);
    v8 = objc_msgSend(v7, sel_step);

    objc_msgSend(v8, sel_longLongValue);
  }
}

uint64_t CAFIntegerSetting.isEnabled.getter()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  id v4;
  unsigned int v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;
  os_log_type_t v13;

  v1 = v0;
  if (!objc_msgSend(v0, sel_limitableUIElement))
    return objc_msgSend(v1, sel_disabled) ^ 1;
  v2 = (void *)specialized CAFListContentRepresentable.session.getter();
  if (!v2)
    return objc_msgSend(v1, sel_disabled) ^ 1;
  v3 = v2;
  v4 = objc_msgSend(v2, sel_limitUserInterfaces);

  if (!v4)
    return objc_msgSend(v1, sel_disabled) ^ 1;
  v5 = objc_msgSend(v4, sel_BOOLValue);

  if (!v5)
    return objc_msgSend(v1, sel_disabled) ^ 1;
  _StringGuts.grow(_:)(47);
  swift_bridgeObjectRelease();
  v6 = v1;
  v7 = objc_msgSend(v6, sel_description);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v10 = v9;

  v11._countAndFlagsBits = v8;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 46;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  v13 = static os_log_type_t.info.getter();
  specialized static CAFUILogger.log(_:message:function:file:line:)(v13, 0xD00000000000002CLL, 0x800000023757C9B0, 0x656C62616E457369, 0xE900000000000064);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t CAFIntegerSetting.isHighlightable.getter()
{
  return 0;
}

uint64_t CAFIntegerSetting.showStepperBar.getter()
{
  void *v0;

  if (objc_msgSend(v0, sel_hasStepperBarHidden))
    return objc_msgSend(v0, sel_stepperBarHidden) ^ 1;
  else
    return 1;
}

id protocol witness for CAFUINumericRepresentable.value.getter in conformance CAFIntegerSetting@<X0>(_DWORD *a1@<X8>)
{
  void *v1;
  id result;

  result = objc_msgSend(v1, sel_value);
  *a1 = (_DWORD)result;
  return result;
}

id protocol witness for CAFUINumericRepresentable.value.setter in conformance CAFIntegerSetting(unsigned int *a1)
{
  void *v1;

  return objc_msgSend(v1, sel_setValue_, *a1);
}

id (*protocol witness for CAFUINumericRepresentable.value.modify in conformance CAFIntegerSetting(uint64_t a1))(uint64_t a1)
{
  void *v1;

  *(_QWORD *)a1 = v1;
  *(_DWORD *)(a1 + 8) = objc_msgSend(v1, sel_value);
  return protocol witness for CAFUINumericRepresentable.value.modify in conformance CAFIntegerSetting;
}

id protocol witness for CAFUINumericRepresentable.value.modify in conformance CAFIntegerSetting(uint64_t a1)
{
  return objc_msgSend(*(id *)a1, sel_setValue_, *(unsigned int *)(a1 + 8));
}

uint64_t protocol witness for CAFUINumericRepresentable.showStepperBar.getter in conformance CAFIntegerSetting()
{
  void *v0;

  if (objc_msgSend(v0, sel_hasStepperBarHidden))
    return objc_msgSend(v0, sel_stepperBarHidden) ^ 1;
  else
    return 1;
}

uint64_t protocol witness for CAFUINumericRepresentable.minimumSymbolName.getter in conformance CAFIntegerSetting(uint64_t a1, uint64_t a2)
{
  return protocol witness for CAFListContentRepresentable.symbolName.getter in conformance CAFSingleSelectImageSetting(a1, a2, (SEL *)&selRef_minimumSymbolName);
}

uint64_t protocol witness for CAFUINumericRepresentable.maximumSymbolName.getter in conformance CAFIntegerSetting(uint64_t a1, uint64_t a2)
{
  return protocol witness for CAFListContentRepresentable.symbolName.getter in conformance CAFSingleSelectImageSetting(a1, a2, (SEL *)&selRef_maximumSymbolName);
}

uint64_t protocol witness for CAFUINumericRepresentable.userVisibleValue.getter in conformance CAFIntegerSetting(uint64_t a1, uint64_t a2)
{
  return protocol witness for CAFListContentRepresentable.symbolName.getter in conformance CAFSingleSelectImageSetting(a1, a2, (SEL *)&selRef_userVisibleValue);
}

uint64_t protocol witness for CAFListContentRepresentable.isHighlightable.getter in conformance CAFIntegerSetting()
{
  return 0;
}

uint64_t CAFBooleanSetting.isHighlightable.getter()
{
  return 1;
}

uint64_t CAFBooleanSetting.isEnabled.getter()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  id v4;
  unsigned int v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;
  os_log_type_t v13;

  v1 = v0;
  if (!objc_msgSend(v0, sel_limitableUIElement))
    return objc_msgSend(v1, sel_disabled) ^ 1;
  v2 = (void *)specialized CAFListContentRepresentable.session.getter();
  if (!v2)
    return objc_msgSend(v1, sel_disabled) ^ 1;
  v3 = v2;
  v4 = objc_msgSend(v2, sel_limitUserInterfaces);

  if (!v4)
    return objc_msgSend(v1, sel_disabled) ^ 1;
  v5 = objc_msgSend(v4, sel_BOOLValue);

  if (!v5)
    return objc_msgSend(v1, sel_disabled) ^ 1;
  _StringGuts.grow(_:)(47);
  swift_bridgeObjectRelease();
  v6 = v1;
  v7 = objc_msgSend(v6, sel_description);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v10 = v9;

  v11._countAndFlagsBits = v8;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 46;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  v13 = static os_log_type_t.info.getter();
  specialized static CAFUILogger.log(_:message:function:file:line:)(v13, 0xD00000000000002CLL, 0x800000023757C9B0, 0x656C62616E457369, 0xE900000000000064);
  swift_bridgeObjectRelease();
  return 0;
}

id protocol witness for CAFUISwitchRepresentable.on.getter in conformance CAFBooleanSetting()
{
  void *v0;

  return objc_msgSend(v0, sel_on);
}

id protocol witness for CAFUISwitchRepresentable.on.setter in conformance CAFBooleanSetting(char a1)
{
  void *v1;

  return objc_msgSend(v1, sel_setOn_, a1 & 1);
}

id (*protocol witness for CAFUISwitchRepresentable.on.modify in conformance CAFBooleanSetting(uint64_t a1))(uint64_t a1)
{
  void *v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = objc_msgSend(v1, sel_on);
  return protocol witness for CAFUISwitchRepresentable.on.modify in conformance CAFBooleanSetting;
}

id protocol witness for CAFUISwitchRepresentable.on.modify in conformance CAFBooleanSetting(uint64_t a1)
{
  return objc_msgSend(*(id *)a1, sel_setOn_, *(unsigned __int8 *)(a1 + 8));
}

uint64_t CAFButtonSetting.isHighlightable.getter()
{
  return 1;
}

BOOL CAFButtonSetting.isEnabled.getter()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  id v4;
  unsigned int v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;
  os_log_type_t v13;

  v1 = v0;
  if (objc_msgSend(v0, sel_limitableUIElement)
    && (v2 = (void *)specialized CAFListContentRepresentable.session.getter()) != 0
    && (v3 = v2, v4 = objc_msgSend(v2, sel_limitUserInterfaces),
                 v3,
                 v4)
    && (v5 = objc_msgSend(v4, sel_BOOLValue), v4, v5))
  {
    _StringGuts.grow(_:)(47);
    swift_bridgeObjectRelease();
    v6 = v1;
    v7 = objc_msgSend(v6, sel_description);
    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v10 = v9;

    v11._countAndFlagsBits = v8;
    v11._object = v10;
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v12._countAndFlagsBits = 46;
    v12._object = (void *)0xE100000000000000;
    String.append(_:)(v12);
    v13 = static os_log_type_t.info.getter();
    specialized static CAFUILogger.log(_:message:function:file:line:)(v13, 0xD00000000000002CLL, 0x800000023757C9B0, 0x656C62616E457369, 0xE900000000000064);
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    return (objc_msgSend(v1, sel_disabled) & 1) == 0
        && objc_msgSend(v1, sel_buttonAction) == 0;
  }
}

id protocol witness for CAFUIButtonRepresentable.buttonAction.getter in conformance CAFButtonSetting()
{
  void *v0;

  return objc_msgSend(v0, sel_buttonAction);
}

id protocol witness for CAFUIButtonRepresentable.buttonAction.setter in conformance CAFButtonSetting(unsigned __int8 a1)
{
  void *v1;

  return objc_msgSend(v1, sel_setButtonAction_, a1);
}

id (*protocol witness for CAFUIButtonRepresentable.buttonAction.modify in conformance CAFButtonSetting(uint64_t a1))(uint64_t a1)
{
  void *v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = objc_msgSend(v1, sel_buttonAction);
  return protocol witness for CAFUIButtonRepresentable.buttonAction.modify in conformance CAFButtonSetting;
}

id protocol witness for CAFUIButtonRepresentable.buttonAction.modify in conformance CAFButtonSetting(uint64_t a1)
{
  return objc_msgSend(*(id *)a1, sel_setButtonAction_, *(unsigned __int8 *)(a1 + 8));
}

id CAFDeepLinkSetting.configureCell(_:)(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t (*v26)(char *, void *);
  id v27;
  id v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  void *v35;
  char *v36;
  char *v37;
  void *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id result;
  uint64_t (*v47)(char *, void *);
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;

  v2 = v1;
  v4 = type metadata accessor for UIBackgroundConfiguration();
  v52 = *(_QWORD *)(v4 - 8);
  v53 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v51 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UIBackgroundConfiguration?);
  MEMORY[0x24BDAC7A8](v6);
  v50 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v49 = (uint64_t)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v47 - v11;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIListContentConfiguration?);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (int *)type metadata accessor for CAFUIAutomakerSettingConfiguration(0);
  v48 = *((_QWORD *)v16 - 1);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for UIListContentConfiguration();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)&v47 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v25 = (char *)&v47 - v24;
  static UIListContentConfiguration.valueCell()();
  v54 = a1;
  specialized CAFUICellProtocol.updateContentConfigurationProperties(_:)((uint64_t)v23, (uint64_t)v25);
  v26 = *(uint64_t (**)(char *, void *))(v20 + 8);
  v55 = (void *)v19;
  v47 = v26;
  v26(v23, (void *)v19);
  v27 = objc_msgSend(v2, sel_userVisibleLabel);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  UIListContentConfiguration.text.setter();
  specialized CAFListContentRepresentable.symbolImage.getter();
  UIListContentConfiguration.image.setter();
  if (objc_msgSend(v2, sel_hasUserVisibleValue))
  {
    v28 = objc_msgSend(v2, sel_userVisibleValue);
    if (v28)
    {
      v29 = v28;
      v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v32 = v31;

      v33 = HIBYTE(v32) & 0xF;
      if ((v32 & 0x2000000000000000) == 0)
        v33 = v30 & 0xFFFFFFFFFFFFLL;
      if (v33)
        UIListContentConfiguration.secondaryText.setter();
      else
        swift_bridgeObjectRelease();
    }
  }
  v35 = v55;
  (*(void (**)(char *, char *, void *))(v20 + 16))(v15, v25, v55);
  (*(void (**)(char *, _QWORD, uint64_t, void *))(v20 + 56))(v15, 0, 1, v35);
  v34 = objc_msgSend(v2, sel_limitableUIElement);
  LOBYTE(v35) = 0;
  v37 = v50;
  v36 = v51;
  if (v34)
  {
    v38 = (void *)specialized CAFListContentRepresentable.session.getter();
    v35 = v38;
    if (v38)
    {
      v39 = objc_msgSend(v38, sel_limitUserInterfaces);

      if (v39)
      {
        LOBYTE(v35) = objc_msgSend(v39, sel_BOOLValue);

      }
      else
      {
        LOBYTE(v35) = 0;
      }
    }
  }
  outlined init with take of UIListContentConfiguration?((uint64_t)v15, (uint64_t)v18, &demangling cache variable for type metadata for UIListContentConfiguration?);
  *(_QWORD *)&v18[v16[5]] = 0;
  v18[v16[6]] = 2;
  v18[v16[7]] = (char)v35;
  outlined init with copy of CAFUIAutomakerSettingConfiguration((uint64_t)v18, (uint64_t)v12);
  v40 = v48;
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v48 + 56))(v12, 0, 1, v16);
  v41 = v54 + OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_automakerSettingConfiguration;
  swift_beginAccess();
  outlined assign with copy of CAFUIAutomakerSettingConfiguration?((uint64_t)v12, v41);
  swift_endAccess();
  v42 = v49;
  outlined init with copy of CAFUIAutomakerSettingConfiguration?(v41, v49);
  LODWORD(v41) = (*(uint64_t (**)(uint64_t, uint64_t, int *))(v40 + 48))(v42, 1, v16);
  outlined destroy of UIContentConfiguration?(v42, (uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  if ((_DWORD)v41 != 1)
    CAFUITileBaseCell.setupViews()();
  v43 = outlined destroy of UIContentConfiguration?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  MEMORY[0x23B8131A8](v43);
  v45 = v52;
  v44 = v53;
  (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v37, v36, v53);
  result = objc_msgSend((id)objc_opt_self(), sel_tableCellPlainBackgroundColor);
  if (result)
  {
    UIBackgroundConfiguration.backgroundColor.setter();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v36, v44);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v37, 0, 1, v44);
    MEMORY[0x23B81319C](v37);
    outlined destroy of CAFUIAutomakerSettingConfiguration((uint64_t)v18);
    return (id)v47(v25, v55);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t CAFDeepLinkSetting.requestContentManager.getter()
{
  void *v0;
  id v1;
  uint64_t v3;
  _OWORD v4[2];
  _BYTE v5[24];
  uint64_t v6;

  swift_beginAccess();
  v1 = objc_getAssociatedObject(v0, &static CAFUIListContentAssociatedObjects.CellValue);
  swift_endAccess();
  if (v1)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  outlined init with take of UIListContentConfiguration?((uint64_t)v4, (uint64_t)v5, &demangling cache variable for type metadata for Any?);
  if (v6)
  {
    type metadata accessor for CAFUIRequestContentManager();
    if (swift_dynamicCast())
      return v3;
    else
      return 0;
  }
  else
  {
    outlined destroy of UIContentConfiguration?((uint64_t)v5, &demangling cache variable for type metadata for Any?);
    return 0;
  }
}

uint64_t CAFDeepLinkSetting.requestContentManager.setter(void *a1)
{
  void *v1;

  swift_beginAccess();
  objc_setAssociatedObject(v1, &static CAFUIListContentAssociatedObjects.CellValue, a1, 0);
  swift_endAccess();
  return swift_release();
}

void (*CAFDeepLinkSetting.requestContentManager.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v3[3] = CAFDeepLinkSetting.requestContentManager.getter();
  return CAFDeepLinkSetting.requestContentManager.modify;
}

void CAFDeepLinkSetting.requestContentManager.modify(uint64_t a1, char a2)
{
  void *v3;
  void *v4;
  void *v5;

  v3 = *(void **)a1;
  v4 = *(void **)(*(_QWORD *)a1 + 24);
  v5 = *(void **)(*(_QWORD *)a1 + 32);
  swift_beginAccess();
  if ((a2 & 1) != 0)
  {
    swift_retain();
    objc_setAssociatedObject(v5, &static CAFUIListContentAssociatedObjects.CellValue, v4, 0);
    swift_endAccess();
    swift_release();
  }
  else
  {
    objc_setAssociatedObject(v5, &static CAFUIListContentAssociatedObjects.CellValue, v4, 0);
    swift_endAccess();
  }
  swift_release();
  free(v3);
}

uint64_t CAFDeepLinkSetting.isHighlightable.getter()
{
  return 1;
}

uint64_t CAFDeepLinkSetting.isEnabled.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  unsigned int v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  Swift::String v12;
  Swift::String v13;
  os_log_type_t v14;
  uint64_t v15;
  unint64_t v16;
  id v17;
  uint64_t v18;
  void *v19;
  void *v20;
  Swift::String v21;
  CAFUI::CAFUIPunchthroughState v22;
  id v23;
  uint64_t v24;
  void *v25;
  void *v26;
  Swift::String v27;
  unint64_t v28;
  unint64_t v29;
  os_log_type_t v30;
  id v31;
  uint64_t v32;
  void *v33;
  void *v34;
  Swift::String v35;
  Swift::String v36;
  uint64_t result;
  id v38;
  uint64_t v39;
  void *v40;
  void *v41;
  Swift::String v42;
  unsigned int v43;

  v1 = v0;
  v2 = CAFDeepLinkSetting.requestContentManager.getter();
  if (v2)
  {
    v3 = v2;
    if (objc_msgSend(v0, sel_limitableUIElement))
    {
      v4 = objc_msgSend(*(id *)(v3 + 16), sel_session);
      v5 = objc_msgSend(v4, sel_limitUserInterfaces);

      if (v5)
      {
        v6 = objc_msgSend(v5, sel_BOOLValue);

        if (v6)
        {
          _StringGuts.grow(_:)(47);
          swift_bridgeObjectRelease();
          v7 = v1;
          v8 = objc_msgSend(v7, sel_description);
          v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v11 = v10;

          v12._countAndFlagsBits = v9;
          v12._object = v11;
          String.append(_:)(v12);
          swift_bridgeObjectRelease();
          v13._countAndFlagsBits = 46;
          v13._object = (void *)0xE100000000000000;
          String.append(_:)(v13);
          v14 = static os_log_type_t.info.getter();
          v15 = 0xD00000000000002CLL;
          v16 = 0x800000023757C9B0;
LABEL_10:
          specialized static CAFUILogger.log(_:message:function:file:line:)(v14, v15, v16, 0x656C62616E457369, 0xE900000000000064);
          swift_bridgeObjectRelease();
          swift_release();
          return 0;
        }
      }
    }
    v17 = objc_msgSend(v1, sel_contentURLAction);
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v20 = v19;

    v21._countAndFlagsBits = v18;
    v21._object = v20;
    v22 = CAFUIRequestContentManager.state(for:)(v21);
    swift_bridgeObjectRelease();
    if (v22 == CAFUI_CAFUIPunchthroughState_unavailable)
    {
      _StringGuts.grow(_:)(23);
      swift_bridgeObjectRelease();
      v31 = objc_msgSend(v1, sel_contentURLAction);
      v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v34 = v33;

      v35._countAndFlagsBits = v32;
      v35._object = v34;
      String.append(_:)(v35);
      swift_bridgeObjectRelease();
      v36._object = (void *)0x800000023757CA70;
      v36._countAndFlagsBits = 0xD000000000000012;
      String.append(_:)(v36);
      v14 = static os_log_type_t.info.getter();
      v15 = 2118736;
      v16 = 0xE300000000000000;
      goto LABEL_10;
    }
    if (v22 == CAFUI_CAFUIPunchthroughState_available)
    {
      _StringGuts.grow(_:)(19);
      swift_bridgeObjectRelease();
      v23 = objc_msgSend(v1, sel_contentURLAction);
      v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v26 = v25;

      v27._countAndFlagsBits = v24;
      v27._object = v26;
      String.append(_:)(v27);
      swift_bridgeObjectRelease();
      v28 = 0x6961766120736920;
      v29 = 0xEE002E656C62616CLL;
    }
    else
    {
      _StringGuts.grow(_:)(24);
      swift_bridgeObjectRelease();
      v38 = objc_msgSend(v1, sel_contentURLAction);
      v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v41 = v40;

      v42._countAndFlagsBits = v39;
      v42._object = v41;
      String.append(_:)(v42);
      swift_bridgeObjectRelease();
      v28 = 0xD000000000000013;
      v29 = 0x800000023757CA50;
    }
    String.append(_:)(*(Swift::String *)&v28);
    v30 = static os_log_type_t.info.getter();
    specialized static CAFUILogger.log(_:message:function:file:line:)(v30, 2118736, 0xE300000000000000, 0x656C62616E457369, 0xE900000000000064);
    swift_bridgeObjectRelease();
    v43 = objc_msgSend(v1, sel_disabled);
    swift_release();
    return v43 ^ 1;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t CAFDeepLinkSetting.cellSelected(isProminent:hasChildren:)()
{
  void *v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(v0, sel_contentURLAction);
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t protocol witness for CAFListContentRepresentable.cellSelected(isProminent:hasChildren:) in conformance CAFDeepLinkSetting()
{
  void *v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(v0, sel_contentURLAction);
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

id CAFStaticSetting.configureCell(_:)(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  id v23;
  id v24;
  void (*v25)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v26;
  char *v27;
  char v28;
  unsigned int v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  id result;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;

  v44 = a1;
  v2 = type metadata accessor for UIBackgroundConfiguration();
  v50 = *(_QWORD *)(v2 - 8);
  v51 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v49 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UIBackgroundConfiguration?);
  MEMORY[0x24BDAC7A8](v4);
  v48 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v46 = (uint64_t)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v47 = (uint64_t)&v42 - v9;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIListContentConfiguration?);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (int *)type metadata accessor for CAFUIAutomakerSettingConfiguration(0);
  v45 = *((_QWORD *)v13 - 1);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for UIListContentConfiguration();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v42 - v21;
  static UIListContentConfiguration.valueCell()();
  specialized CAFUICellProtocol.updateContentConfigurationProperties(_:)((uint64_t)v20, (uint64_t)v22);
  v43 = *(void (**)(char *, uint64_t))(v17 + 8);
  v43(v20, v16);
  v23 = objc_msgSend(v1, sel_userVisibleLabel);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  UIListContentConfiguration.text.setter();
  v24 = objc_msgSend(v1, sel_userVisibleValue);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  UIListContentConfiguration.secondaryText.setter();
  specialized CAFListContentRepresentable.symbolImage.getter();
  UIListContentConfiguration.image.setter();
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v12, v22, v16);
  v25 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56);
  v26 = v44;
  v25(v12, 0, 1, v16);
  v27 = (char *)(v26 + OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_isParentCell);
  swift_beginAccess();
  v28 = *v27;
  v29 = objc_msgSend(v1, sel_limitableUIElement);
  LOBYTE(v1) = 0;
  if (v29)
  {
    v30 = (void *)specialized CAFListContentRepresentable.session.getter();
    v1 = v30;
    if (v30)
    {
      v31 = objc_msgSend(v30, sel_limitUserInterfaces);

      if (v31)
      {
        LOBYTE(v1) = objc_msgSend(v31, sel_BOOLValue);

      }
      else
      {
        LOBYTE(v1) = 0;
      }
    }
  }
  outlined init with take of UIListContentConfiguration?((uint64_t)v12, (uint64_t)v15, &demangling cache variable for type metadata for UIListContentConfiguration?);
  *(_QWORD *)&v15[v13[5]] = 0;
  v15[v13[6]] = v28;
  v15[v13[7]] = (char)v1;
  v32 = v47;
  outlined init with copy of CAFUIAutomakerSettingConfiguration((uint64_t)v15, v47);
  v33 = v45;
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v45 + 56))(v32, 0, 1, v13);
  v34 = v26 + OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_automakerSettingConfiguration;
  swift_beginAccess();
  outlined assign with copy of CAFUIAutomakerSettingConfiguration?(v32, v34);
  swift_endAccess();
  v35 = v46;
  outlined init with copy of CAFUIAutomakerSettingConfiguration?(v34, v46);
  LODWORD(v34) = (*(uint64_t (**)(uint64_t, uint64_t, int *))(v33 + 48))(v35, 1, v13);
  outlined destroy of UIContentConfiguration?(v35, (uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  if ((_DWORD)v34 != 1)
    CAFUITileBaseCell.setupViews()();
  v36 = outlined destroy of UIContentConfiguration?(v32, (uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  v37 = v49;
  MEMORY[0x23B8131A8](v36);
  v39 = v50;
  v38 = v51;
  v40 = v48;
  (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v48, v37, v51);
  result = objc_msgSend((id)objc_opt_self(), sel_tableCellPlainBackgroundColor);
  if (result)
  {
    UIBackgroundConfiguration.backgroundColor.setter();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v37, v38);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v40, 0, 1, v38);
    MEMORY[0x23B81319C](v40);
    outlined destroy of CAFUIAutomakerSettingConfiguration((uint64_t)v15);
    return (id)((uint64_t (*)(char *, uint64_t))v43)(v22, v16);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *CAFStaticSetting.cellSelected(isProminent:hasChildren:)(uint64_t a1, char a2)
{
  void *v2;
  id v3;

  if ((a2 & 1) == 0)
    return 0;
  v3 = v2;
  return v2;
}

id CAFStaticSetting.isHighlightable.getter()
{
  void *v0;
  id result;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  result = objc_msgSend(v0, sel_childrenSettingsIdentifiers);
  if (result)
  {
    v2 = result;
    v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v4 = *(_QWORD *)(v3 + 16);
    swift_bridgeObjectRelease();
    return (id)(v4 != 0);
  }
  return result;
}

uint64_t CAFStaticSetting.isEnabled.getter()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  id v4;
  unsigned int v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;
  os_log_type_t v13;

  v1 = v0;
  if (!objc_msgSend(v0, sel_limitableUIElement))
    return objc_msgSend(v1, sel_disabled) ^ 1;
  v2 = (void *)specialized CAFListContentRepresentable.session.getter();
  if (!v2)
    return objc_msgSend(v1, sel_disabled) ^ 1;
  v3 = v2;
  v4 = objc_msgSend(v2, sel_limitUserInterfaces);

  if (!v4)
    return objc_msgSend(v1, sel_disabled) ^ 1;
  v5 = objc_msgSend(v4, sel_BOOLValue);

  if (!v5)
    return objc_msgSend(v1, sel_disabled) ^ 1;
  _StringGuts.grow(_:)(47);
  swift_bridgeObjectRelease();
  v6 = v1;
  v7 = objc_msgSend(v6, sel_description);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v10 = v9;

  v11._countAndFlagsBits = v8;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 46;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  v13 = static os_log_type_t.info.getter();
  specialized static CAFUILogger.log(_:message:function:file:line:)(v13, 0xD00000000000002CLL, 0x800000023757C9B0, 0x656C62616E457369, 0xE900000000000064);
  swift_bridgeObjectRelease();
  return 0;
}

id protocol witness for CAFListContentRepresentable.isHighlightable.getter in conformance CAFStaticSetting()
{
  void *v0;
  id result;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  result = objc_msgSend(v0, sel_childrenSettingsIdentifiers);
  if (result)
  {
    v2 = result;
    v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v4 = *(_QWORD *)(v3 + 16);
    swift_bridgeObjectRelease();
    return (id)(v4 != 0);
  }
  return result;
}

void *protocol witness for CAFListContentRepresentable.cellSelected(isProminent:hasChildren:) in conformance CAFStaticSetting(uint64_t a1, char a2)
{
  void *v2;
  id v3;

  if ((a2 & 1) == 0)
    return 0;
  v3 = v2;
  return v2;
}

id CAFFloatSetting.rangeValues.getter()
{
  void *v0;

  return objc_msgSend(v0, sel_valueRange);
}

uint64_t CAFFloatSetting.isHighlightable.getter()
{
  return 0;
}

uint64_t CAFFloatSetting.isEnabled.getter()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  id v4;
  unsigned int v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;
  os_log_type_t v13;

  v1 = v0;
  if (!objc_msgSend(v0, sel_limitableUIElement))
    return objc_msgSend(v1, sel_disabled) ^ 1;
  v2 = (void *)specialized CAFListContentRepresentable.session.getter();
  if (!v2)
    return objc_msgSend(v1, sel_disabled) ^ 1;
  v3 = v2;
  v4 = objc_msgSend(v2, sel_limitUserInterfaces);

  if (!v4)
    return objc_msgSend(v1, sel_disabled) ^ 1;
  v5 = objc_msgSend(v4, sel_BOOLValue);

  if (!v5)
    return objc_msgSend(v1, sel_disabled) ^ 1;
  _StringGuts.grow(_:)(47);
  swift_bridgeObjectRelease();
  v6 = v1;
  v7 = objc_msgSend(v6, sel_description);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v10 = v9;

  v11._countAndFlagsBits = v8;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 46;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  v13 = static os_log_type_t.info.getter();
  specialized static CAFUILogger.log(_:message:function:file:line:)(v13, 0xD00000000000002CLL, 0x800000023757C9B0, 0x656C62616E457369, 0xE900000000000064);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t CAFFloatSetting.showStepperBar.getter()
{
  return 1;
}

id protocol witness for CAFUIFloatingPointRepresentable.value.getter in conformance CAFFloatSetting@<X0>(_DWORD *a1@<X8>)
{
  void *v1;
  id result;
  int v4;

  result = objc_msgSend(v1, sel_value);
  *a1 = v4;
  return result;
}

id protocol witness for CAFUIFloatingPointRepresentable.value.setter in conformance CAFFloatSetting(_DWORD *a1, double a2)
{
  void *v2;

  LODWORD(a2) = *a1;
  return objc_msgSend(v2, sel_setValue_, a2);
}

id protocol witness for CAFUIFloatingPointRepresentable.rangeValues.getter in conformance CAFFloatSetting()
{
  void *v0;

  return objc_msgSend(v0, sel_valueRange);
}

id protocol witness for CAFListContentRepresentable.limitableUIElement.getter in conformance CAFFloatSetting()
{
  void *v0;

  return objc_msgSend(v0, sel_limitableUIElement);
}

id protocol witness for CAFListContentRepresentable.prominenceInfo.getter in conformance CAFFloatSetting()
{
  void *v0;

  return objc_msgSend(v0, sel_prominenceInfo);
}

uint64_t CAFSingleSelectSetting.selectedIndices.getter()
{
  void *v0;
  unsigned int v1;
  id v2;
  id v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = objc_msgSend(v0, sel_selectedEntryIndex);
  v2 = objc_msgSend(v0, sel_selectSettingEntryList);
  v3 = objc_msgSend(v2, sel_selectSettingEntrys);

  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CAFSelectSettingEntry);
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v5 <= v1)
    return MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_237579480;
  *(_QWORD *)(v6 + 32) = objc_msgSend(v0, sel_selectedEntryIndex);
  return v6;
}

id CAFSingleSelectSetting.selectedIndices.setter(uint64_t a1)
{
  void *v1;
  unint64_t v2;
  id result;

  if (!*(_QWORD *)(a1 + 16))
  {
    swift_bridgeObjectRelease();
    LOBYTE(v2) = 0;
    return objc_msgSend(v1, sel_setSelectedEntryIndex_, v2);
  }
  v2 = *(_QWORD *)(a1 + 32);
  swift_bridgeObjectRelease();
  if ((v2 & 0x8000000000000000) == 0 && v2 < 0x100)
    return objc_msgSend(v1, sel_setSelectedEntryIndex_, v2);
  result = (id)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t (*CAFSingleSelectSetting.selectedIndices.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = CAFSingleSelectSetting.selectedIndices.getter();
  return CAFSingleSelectSetting.selectedIndices.modify;
}

uint64_t CAFSingleSelectSetting.selectedIndices.modify(uint64_t *a1, char a2)
{
  return CAFSingleSelectImageSetting.selectedIndices.modify(a1, a2, (uint64_t (*)(uint64_t))CAFSingleSelectSetting.selectedIndices.setter);
}

uint64_t CAFSingleSelectImageSetting.selectedIndices.modify(uint64_t *a1, char a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;

  if ((a2 & 1) == 0)
    return a3(*a1);
  v4 = swift_bridgeObjectRetain();
  a3(v4);
  return swift_bridgeObjectRelease();
}

uint64_t CAFSingleSelectSetting.titleForFooter.getter()
{
  return 0;
}

uint64_t CAFSingleSelectSetting.cellSelected(isProminent:hasChildren:)()
{
  return specialized CAFSingleSelectSetting.cellSelected(isProminent:hasChildren:)((uint64_t (*)(void *, id))specialized CAFUIPickerViewController.init(pickerRepresentable:));
}

uint64_t CAFSingleSelectSetting.isHighlightable.getter()
{
  return 1;
}

uint64_t CAFSingleSelectSetting.isEnabled.getter()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  id v4;
  unsigned int v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;
  os_log_type_t v13;

  v1 = v0;
  if (!objc_msgSend(v0, sel_limitableUIElement))
    return objc_msgSend(v1, sel_disabled) ^ 1;
  v2 = (void *)specialized CAFListContentRepresentable.session.getter();
  if (!v2)
    return objc_msgSend(v1, sel_disabled) ^ 1;
  v3 = v2;
  v4 = objc_msgSend(v2, sel_limitUserInterfaces);

  if (!v4)
    return objc_msgSend(v1, sel_disabled) ^ 1;
  v5 = objc_msgSend(v4, sel_BOOLValue);

  if (!v5)
    return objc_msgSend(v1, sel_disabled) ^ 1;
  _StringGuts.grow(_:)(47);
  swift_bridgeObjectRelease();
  v6 = v1;
  v7 = objc_msgSend(v6, sel_description);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v10 = v9;

  v11._countAndFlagsBits = v8;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 46;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  v13 = static os_log_type_t.info.getter();
  specialized static CAFUILogger.log(_:message:function:file:line:)(v13, 0xD00000000000002CLL, 0x800000023757C9B0, 0x656C62616E457369, 0xE900000000000064);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t (*protocol witness for CAFUIPickerRepresentable.selectedIndices.modify in conformance CAFSingleSelectSetting(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = CAFSingleSelectSetting.selectedIndices.getter();
  return CAFSingleSelectSetting.selectedIndices.modify;
}

uint64_t protocol witness for CAFListContentRepresentable.cellSelected(isProminent:hasChildren:) in conformance CAFSingleSelectSetting()
{
  return specialized CAFSingleSelectSetting.cellSelected(isProminent:hasChildren:)((uint64_t (*)(void *, id))specialized CAFUIPickerViewController.init(pickerRepresentable:));
}

uint64_t CAFSingleSelectSetting.availableItems.getter()
{
  void *v0;
  id v1;
  id v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = objc_msgSend(v0, sel_selectSettingEntryList);
  v2 = objc_msgSend(v1, sel_selectSettingEntrys);

  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CAFSelectSettingEntry);
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v3 >> 62))
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v4)
      goto LABEL_3;
LABEL_16:
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRetain();
  v4 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v4)
    goto LABEL_16;
LABEL_3:
  v18 = MEMORY[0x24BEE4AF8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 & ~(v4 >> 63), 0);
  if ((v4 & 0x8000000000000000) == 0)
  {
    v6 = 0;
    v7 = v18;
    do
    {
      if ((v3 & 0xC000000000000001) != 0)
        v8 = (id)MEMORY[0x23B813418](v6, v3);
      else
        v8 = *(id *)(v3 + 8 * v6 + 32);
      v9 = v8;
      v10 = objc_msgSend(v8, sel_userVisibleLabel);
      if (v10)
      {
        v11 = v10;
        v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v14 = v13;

      }
      else
      {

        v12 = 0;
        v14 = 0xE000000000000000;
      }
      v16 = *(_QWORD *)(v18 + 16);
      v15 = *(_QWORD *)(v18 + 24);
      if (v16 >= v15 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
      ++v6;
      *(_QWORD *)(v18 + 16) = v16 + 1;
      v17 = v18 + 16 * v16;
      *(_QWORD *)(v17 + 32) = v12;
      *(_QWORD *)(v17 + 40) = v14;
    }
    while (v4 != v6);
    swift_bridgeObjectRelease();
    return v7;
  }
  __break(1u);
  return result;
}

uint64_t CAFSingleSelectSetting.title.getter()
{
  void *v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(v0, sel_userVisibleLabel);
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t CAFMultipleSelectSetting.titleForFooter.getter()
{
  return 0;
}

uint64_t CAFMultipleSelectSetting.allowsMultipleSelection.getter()
{
  return 1;
}

uint64_t CAFMultipleSelectSetting.selectedIndices.getter()
{
  return CAFMultipleSelectImageSetting.selectedIndices.getter((SEL *)&selRef_selectedEntryIndices, specialized _ArrayProtocol.filter(_:));
}

uint64_t CAFMultipleSelectImageSetting.selectedIndices.getter(SEL *a1, uint64_t (*a2)(uint64_t, id))
{
  void *v2;
  id v4;
  unint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;

  v4 = objc_msgSend(v2, *a1);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v6 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8NSNumberCG_Sis5NeverOTg5068_sSo29CAFMultipleSelectImageSettingC5CAFUIE15selectedIndicesSaySiGvgp3So8D54Ccfu_33_5bdac5b40c7411f20a64c1277f8fd44fAGSiTf3nnnpk_nTf1cn_nTm(v5);
  swift_bridgeObjectRelease();
  v7 = v2;
  v8 = a2(v6, v7);
  swift_bridgeObjectRelease();

  return v8;
}

void CAFMultipleSelectSetting.selectedIndices.setter(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Class isa;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    v4 = 0;
    do
    {
      v5 = v4 + 1;
      objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithInteger_, *(_QWORD *)(a1 + 8 * v4 + 32));
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v4 = v5;
    }
    while (v3 != v5);
  }
  swift_bridgeObjectRelease();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_setSelectedEntryIndices_, isa);

}

uint64_t (*CAFMultipleSelectSetting.selectedIndices.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  void *v1;
  id v3;
  unint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;

  a1[2] = (uint64_t)v1;
  v3 = objc_msgSend(v1, sel_selectedEntryIndices);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8NSNumberCG_Sis5NeverOTg5068_sSo29CAFMultipleSelectImageSettingC5CAFUIE15selectedIndicesSaySiGvgp3So8D54Ccfu_33_5bdac5b40c7411f20a64c1277f8fd44fAGSiTf3nnnpk_nTf1cn_nTm(v4);
  swift_bridgeObjectRelease();
  v6 = v1;
  v7 = specialized _ArrayProtocol.filter(_:)(v5, v6);

  swift_bridgeObjectRelease();
  *a1 = v7;
  return CAFMultipleSelectSetting.selectedIndices.modify;
}

uint64_t CAFMultipleSelectSetting.selectedIndices.modify(uint64_t *a1, char a2)
{
  return CAFMultipleSelectImageSetting.selectedIndices.modify(a1, a2, (uint64_t (*)(uint64_t))CAFMultipleSelectSetting.selectedIndices.setter);
}

uint64_t CAFMultipleSelectImageSetting.selectedIndices.modify(uint64_t *a1, char a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;

  if ((a2 & 1) == 0)
    return a3(*a1);
  v4 = swift_bridgeObjectRetain();
  a3(v4);
  return swift_bridgeObjectRelease();
}

uint64_t CAFMultipleSelectSetting.cellSelected(isProminent:hasChildren:)()
{
  return specialized CAFSingleSelectSetting.cellSelected(isProminent:hasChildren:)((uint64_t (*)(void *, id))specialized CAFUIPickerViewController.init(pickerRepresentable:));
}

uint64_t CAFMultipleSelectSetting.isHighlightable.getter()
{
  return 1;
}

uint64_t CAFMultipleSelectSetting.isEnabled.getter()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  id v4;
  unsigned int v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;
  os_log_type_t v13;

  v1 = v0;
  if (!objc_msgSend(v0, sel_limitableUIElement))
    return objc_msgSend(v1, sel_disabled) ^ 1;
  v2 = (void *)specialized CAFListContentRepresentable.session.getter();
  if (!v2)
    return objc_msgSend(v1, sel_disabled) ^ 1;
  v3 = v2;
  v4 = objc_msgSend(v2, sel_limitUserInterfaces);

  if (!v4)
    return objc_msgSend(v1, sel_disabled) ^ 1;
  v5 = objc_msgSend(v4, sel_BOOLValue);

  if (!v5)
    return objc_msgSend(v1, sel_disabled) ^ 1;
  _StringGuts.grow(_:)(47);
  swift_bridgeObjectRelease();
  v6 = v1;
  v7 = objc_msgSend(v6, sel_description);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v10 = v9;

  v11._countAndFlagsBits = v8;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 46;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  v13 = static os_log_type_t.info.getter();
  specialized static CAFUILogger.log(_:message:function:file:line:)(v13, 0xD00000000000002CLL, 0x800000023757C9B0, 0x656C62616E457369, 0xE900000000000064);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t protocol witness for CAFUIPickerRepresentable.selectedIndices.getter in conformance CAFMultipleSelectSetting(uint64_t a1, uint64_t a2)
{
  return protocol witness for CAFUIImageRepresentable.selectedIndices.getter in conformance CAFMultipleSelectImageSetting(a1, a2, (SEL *)&selRef_selectedEntryIndices, specialized _ArrayProtocol.filter(_:));
}

uint64_t protocol witness for CAFUIImageRepresentable.selectedIndices.getter in conformance CAFMultipleSelectImageSetting(uint64_t a1, uint64_t a2, SEL *a3, uint64_t (*a4)(uint64_t, id))
{
  void *v4;
  id v6;
  unint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;

  v6 = objc_msgSend(v4, *a3);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v8 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8NSNumberCG_Sis5NeverOTg5068_sSo29CAFMultipleSelectImageSettingC5CAFUIE15selectedIndicesSaySiGvgp3So8D54Ccfu_33_5bdac5b40c7411f20a64c1277f8fd44fAGSiTf3nnnpk_nTf1cn_nTm(v7);
  swift_bridgeObjectRelease();
  v9 = v4;
  v10 = a4(v8, v9);
  swift_bridgeObjectRelease();

  return v10;
}

uint64_t (*protocol witness for CAFUIPickerRepresentable.selectedIndices.modify in conformance CAFMultipleSelectSetting(uint64_t **a1))()
{
  uint64_t *v2;

  v2 = (uint64_t *)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = (uint64_t)CAFMultipleSelectSetting.selectedIndices.modify(v2);
  return protocol witness for CAFUIImageRepresentable.selectedIndices.modify in conformance CAFMultipleSelectImageSetting;
}

void protocol witness for CAFUIImageRepresentable.selectedIndices.modify in conformance CAFMultipleSelectImageSetting(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t protocol witness for CAFListContentRepresentable.symbolName.getter in conformance CAFSingleSelectImageSetting(uint64_t a1, uint64_t a2, SEL *a3)
{
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;

  v4 = objc_msgSend(v3, *a3);
  if (!v4)
    return 0;
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v6;
}

uint64_t protocol witness for CAFListContentRepresentable.cellSelected(isProminent:hasChildren:) in conformance CAFMultipleSelectSetting()
{
  return specialized CAFSingleSelectSetting.cellSelected(isProminent:hasChildren:)((uint64_t (*)(void *, id))specialized CAFUIPickerViewController.init(pickerRepresentable:));
}

uint64_t specialized CAFListContentRepresentable.session.getter()
{
  void *v0;
  id v1;
  uint64_t v3;
  _OWORD v4[2];
  _BYTE v5[24];
  uint64_t v6;

  swift_beginAccess();
  v1 = objc_getAssociatedObject(v0, &static CAFUIListContentAssociatedObjects.CARSession);
  swift_endAccess();
  if (v1)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  outlined init with take of UIListContentConfiguration?((uint64_t)v4, (uint64_t)v5, &demangling cache variable for type metadata for Any?);
  if (v6)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CARSession);
    if (swift_dynamicCast())
      return v3;
    else
      return 0;
  }
  else
  {
    outlined destroy of UIContentConfiguration?((uint64_t)v5, &demangling cache variable for type metadata for Any?);
    return 0;
  }
}

char *specialized CAFUIPickerViewController.init(pickerRepresentable:)(void *a1, char *a2)
{
  char *v4;
  id v5;
  id v6;
  char *v7;
  id v8;
  char *v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t (*v12)(uint64_t, uint64_t);
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  objc_super v18;

  v4 = &a2[OBJC_IVAR____TtC5CAFUI25CAFUIPickerViewController_representable];
  *(_QWORD *)v4 = a1;
  *((_QWORD *)v4 + 1) = &protocol witness table for CAFSingleSelectSetting;
  v5 = objc_allocWithZone((Class)type metadata accessor for CAFUIHeaderFooterTableView());
  v6 = a1;
  v7 = a2;
  v8 = objc_msgSend(v5, sel_initWithFrame_style_, 0, 0.0, 0.0, 0.0, 0.0);
  *(_QWORD *)&v7[OBJC_IVAR____TtC5CAFUI24CAFUITableViewController_tableView] = v8;

  v18.receiver = v7;
  v18.super_class = (Class)type metadata accessor for CAFUITableViewController();
  v9 = (char *)objc_msgSendSuper2(&v18, sel_initWithNibName_bundle_, 0, 0);
  v10 = *(_QWORD *)&v9[OBJC_IVAR____TtC5CAFUI25CAFUIPickerViewController_representable + 8];
  ObjectType = swift_getObjectType();
  v12 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 56);
  v13 = v9;
  v14 = v12(ObjectType, v10);
  if (v15)
  {
    v16 = (void *)MEMORY[0x23B812F68](v14);
    swift_bridgeObjectRelease();
  }
  else
  {
    v16 = 0;
  }
  objc_msgSend(v13, sel_setTitle_, v16);

  return v13;
}

{
  char *v4;
  id v5;
  id v6;
  char *v7;
  id v8;
  char *v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t (*v12)(uint64_t, uint64_t);
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  objc_super v18;

  v4 = &a2[OBJC_IVAR____TtC5CAFUI25CAFUIPickerViewController_representable];
  *(_QWORD *)v4 = a1;
  *((_QWORD *)v4 + 1) = &protocol witness table for CAFMultipleSelectSetting;
  v5 = objc_allocWithZone((Class)type metadata accessor for CAFUIHeaderFooterTableView());
  v6 = a1;
  v7 = a2;
  v8 = objc_msgSend(v5, sel_initWithFrame_style_, 0, 0.0, 0.0, 0.0, 0.0);
  *(_QWORD *)&v7[OBJC_IVAR____TtC5CAFUI24CAFUITableViewController_tableView] = v8;

  v18.receiver = v7;
  v18.super_class = (Class)type metadata accessor for CAFUITableViewController();
  v9 = (char *)objc_msgSendSuper2(&v18, sel_initWithNibName_bundle_, 0, 0);
  v10 = *(_QWORD *)&v9[OBJC_IVAR____TtC5CAFUI25CAFUIPickerViewController_representable + 8];
  ObjectType = swift_getObjectType();
  v12 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 56);
  v13 = v9;
  v14 = v12(ObjectType, v10);
  if (v15)
  {
    v16 = (void *)MEMORY[0x23B812F68](v14);
    swift_bridgeObjectRelease();
  }
  else
  {
    v16 = 0;
  }
  objc_msgSend(v13, sel_setTitle_, v16);

  return v13;
}

_QWORD *specialized Sequence.compactMap<A>(_:)(_QWORD *a1, uint64_t a2, void *a3)
{
  return specialized Sequence.compactMap<A>(_:)(a1, a2, a3);
}

uint64_t sub_237522454()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  if (*(_QWORD *)(v0 + 80))
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);

  return swift_deallocObject();
}

_QWORD *specialized Sequence.compactMap<A>(_:)(_QWORD *result, uint64_t a2, id a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12[2];
  uint64_t v13;

  if (result == (_QWORD *)a2)
  {
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  else
  {
    v6 = (uint64_t)result;
    if (a2 >= (uint64_t)result)
    {
      v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
      while (v6 < a2)
      {
        v13 = v6;
        closure #1 in CAFSingleSelectImageSetting.items.getter(a3, (unint64_t *)&v13, (uint64_t)&v10);
        if (v3)
        {
          swift_bridgeObjectRelease();
          return v4;
        }
        if (v11)
        {
          outlined init with take of CAFUIImageRepresentableItemProtocol(&v10, (uint64_t)v12);
          outlined init with take of CAFUIImageRepresentableItemProtocol(v12, (uint64_t)&v10);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
          v9 = v4[2];
          v8 = v4[3];
          if (v9 >= v8 >> 1)
            v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v8 > 1), v9 + 1, 1, v4);
          v4[2] = v9 + 1;
          result = (_QWORD *)outlined init with take of CAFUIImageRepresentableItemProtocol(&v10, (uint64_t)&v4[5 * v9 + 4]);
        }
        else
        {
          result = (_QWORD *)outlined destroy of UIContentConfiguration?((uint64_t)&v10, &demangling cache variable for type metadata for CAFUIImageRepresentableItemProtocol?);
        }
        if (a2 == ++v6)
          return v4;
      }
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

void specialized _ArrayProtocol.filter(_:)(uint64_t a1, id a2)
{
  unint64_t v2;
  id v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  id v24;
  Class isa;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  __int128 v32;
  __int128 v33;
  unint64_t v34;
  unint64_t v35;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  _BYTE v48[48];
  _OWORD v49[2];
  __int128 v50;
  ValueMetadata *v51;
  _UNKNOWN **v52;
  uint64_t v53;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return;
  v3 = a2;
  v4 = 0;
  v5 = a1 + 32;
  v6 = MEMORY[0x24BEE4AF8];
  v40 = *(_QWORD *)(a1 + 16);
  v39 = a1 + 32;
LABEL_3:
  if (v4 <= v2)
    v7 = v2;
  else
    v7 = v4;
  v44 = v7;
  v42 = v6;
  while (1)
  {
    if (v4 == v44)
      goto LABEL_34;
    v9 = *(_QWORD *)(v5 + 8 * v4++);
    if (v9 < 0)
      goto LABEL_9;
    v45 = v9;
    v10 = objc_msgSend(v3, sel_listUserVisibleValue);
    v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v12 = *(_QWORD *)(v11 + 16);
    swift_bridgeObjectRelease();
    if (v12)
      break;
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_8:
    v8 = v16[2];
    swift_bridgeObjectRelease();
    v6 = v42;
    if (v45 < v8)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v53 = v42;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v42 + 16) + 1, 1);
        v6 = v53;
      }
      v38 = *(_QWORD *)(v6 + 16);
      v37 = *(_QWORD *)(v6 + 24);
      if (v38 >= v37 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1, v38 + 1, 1);
        v6 = v53;
      }
      *(_QWORD *)(v6 + 16) = v38 + 1;
      *(_QWORD *)(v6 + 8 * v38 + 32) = v45;
      if (v4 == v2)
        return;
      goto LABEL_3;
    }
LABEL_9:
    if (v4 == v2)
      return;
  }
  v43 = v4;
  v13 = v3;
  v14 = 0;
  v15 = 0;
  v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    v17 = objc_msgSend(v13, sel_images);
    v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v19 = *(_QWORD *)(v18 + 16);
    swift_bridgeObjectRelease();
    if (v15 >= v19)
      goto LABEL_15;
    v20 = objc_msgSend(v13, sel_images);
    v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v15 >= *(_QWORD *)(v21 + 16))
      break;
    v22 = *(_QWORD *)(v21 + v14 + 32);
    v23 = *(_QWORD *)(v21 + v14 + 40);
    outlined copy of Data._Representation(v22, v23);
    swift_bridgeObjectRelease();
    v24 = objc_allocWithZone(MEMORY[0x24BEBD640]);
    isa = Data._bridgeToObjectiveC()().super.isa;
    v26 = objc_msgSend(v24, sel_initWithData_, isa);
    outlined consume of Data._Representation(v22, v23);

    if (v26)
    {
      v27 = objc_msgSend(v13, sel_listUserVisibleValue);
      v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v15 >= *(_QWORD *)(v28 + 16))
        goto LABEL_33;
      v30 = *(_QWORD *)(v28 + v14 + 32);
      v29 = *(_QWORD *)(v28 + v14 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      memset(v49, 0, sizeof(v49));
      v51 = &type metadata for CAFUIImageRepresentableItem;
      v52 = &protocol witness table for CAFUIImageRepresentableItem;
      v31 = (_OWORD *)swift_allocObject();
      *(_QWORD *)&v50 = v31;
      memset(&v48[8], 0, 40);
      *(_QWORD *)&v46 = v30;
      *((_QWORD *)&v46 + 1) = v29;
      v47 = (unint64_t)v26;
      v48[0] = 1;
      outlined assign with take of Any?((uint64_t)v49, (uint64_t)&v48[8]);

      *(_QWORD *)&v48[40] = 0;
      v32 = *(_OWORD *)&v48[16];
      v31[3] = *(_OWORD *)v48;
      v31[4] = v32;
      v33 = v47;
      v31[1] = v46;
      v31[2] = v33;
      v31[5] = *(_OWORD *)&v48[32];
      outlined init with take of CAFUIImageRepresentableItemProtocol(&v50, (uint64_t)&v46);
      outlined init with take of CAFUIImageRepresentableItemProtocol(&v46, (uint64_t)&v50);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
      v35 = v16[2];
      v34 = v16[3];
      if (v35 >= v34 >> 1)
        v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v34 > 1), v35 + 1, 1, v16);
      v16[2] = v35 + 1;
      outlined init with take of CAFUIImageRepresentableItemProtocol(&v50, (uint64_t)&v16[5 * v35 + 4]);
    }
LABEL_15:
    ++v15;
    v14 += 16;
    if (v12 == v15)
    {

      v2 = v40;
      v3 = a2;
      v4 = v43;
      v5 = v39;
      goto LABEL_8;
    }
  }
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
}

{
  id v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  id v22;
  Class isa;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  __int128 v30;
  __int128 v31;
  unint64_t v32;
  unint64_t v33;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[48];
  _OWORD v47[2];
  __int128 v48;
  ValueMetadata *v49;
  _UNKNOWN **v50;
  uint64_t v51;

  v2 = a2;
  v3 = 0;
  v4 = *(_QWORD *)(a1 + 16);
  v40 = a1 + 32;
  v5 = MEMORY[0x24BEE4AF8];
  v37 = v4;
LABEL_2:
  if (v3 <= v4)
    v6 = v4;
  else
    v6 = v3;
  v41 = v6;
  v39 = v5;
  while (1)
  {
    if (v3 == v4)
      return;
    if (v3 == v41)
      goto LABEL_31;
    v43 = *(_QWORD *)(v40 + 8 * v3);
    v8 = objc_msgSend(v2, sel_listUserVisibleValue);
    v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v10 = *(_QWORD *)(v9 + 16);
    swift_bridgeObjectRelease();
    if (v10)
      break;
    v14 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_7:
    ++v3;
    v7 = v14[2];
    swift_bridgeObjectRelease();
    if (v43 < v7)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v51 = v5;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v5 + 16) + 1, 1);
        v5 = v51;
      }
      v36 = *(_QWORD *)(v5 + 16);
      v35 = *(_QWORD *)(v5 + 24);
      if (v36 >= v35 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1);
        v5 = v51;
      }
      *(_QWORD *)(v5 + 16) = v36 + 1;
      *(_QWORD *)(v5 + 8 * v36 + 32) = v43;
      goto LABEL_2;
    }
  }
  v42 = v3;
  v11 = v2;
  v12 = 0;
  v13 = 0;
  v14 = (_QWORD *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    v15 = objc_msgSend(v11, sel_images);
    v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v17 = *(_QWORD *)(v16 + 16);
    swift_bridgeObjectRelease();
    if (v13 >= v17)
      goto LABEL_13;
    v18 = objc_msgSend(v11, sel_images);
    v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v13 >= *(_QWORD *)(v19 + 16))
      break;
    v20 = *(_QWORD *)(v19 + v12 + 32);
    v21 = *(_QWORD *)(v19 + v12 + 40);
    outlined copy of Data._Representation(v20, v21);
    swift_bridgeObjectRelease();
    v22 = objc_allocWithZone(MEMORY[0x24BEBD640]);
    isa = Data._bridgeToObjectiveC()().super.isa;
    v24 = objc_msgSend(v22, sel_initWithData_, isa);
    outlined consume of Data._Representation(v20, v21);

    if (v24)
    {
      v25 = objc_msgSend(v11, sel_listUserVisibleValue);
      v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v13 >= *(_QWORD *)(v26 + 16))
        goto LABEL_30;
      v28 = *(_QWORD *)(v26 + v12 + 32);
      v27 = *(_QWORD *)(v26 + v12 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      memset(v47, 0, sizeof(v47));
      v49 = &type metadata for CAFUIImageRepresentableItem;
      v50 = &protocol witness table for CAFUIImageRepresentableItem;
      v29 = (_OWORD *)swift_allocObject();
      *(_QWORD *)&v48 = v29;
      memset(&v46[8], 0, 40);
      *(_QWORD *)&v44 = v28;
      *((_QWORD *)&v44 + 1) = v27;
      v45 = (unint64_t)v24;
      v46[0] = 1;
      outlined assign with take of Any?((uint64_t)v47, (uint64_t)&v46[8]);

      *(_QWORD *)&v46[40] = 0;
      v30 = *(_OWORD *)&v46[16];
      v29[3] = *(_OWORD *)v46;
      v29[4] = v30;
      v31 = v45;
      v29[1] = v44;
      v29[2] = v31;
      v29[5] = *(_OWORD *)&v46[32];
      outlined init with take of CAFUIImageRepresentableItemProtocol(&v48, (uint64_t)&v44);
      outlined init with take of CAFUIImageRepresentableItemProtocol(&v44, (uint64_t)&v48);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
      v33 = v14[2];
      v32 = v14[3];
      if (v33 >= v32 >> 1)
        v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v32 > 1), v33 + 1, 1, v14);
      v14[2] = v33 + 1;
      outlined init with take of CAFUIImageRepresentableItemProtocol(&v48, (uint64_t)&v14[5 * v33 + 4]);
    }
LABEL_13:
    ++v13;
    v12 += 16;
    if (v10 == v13)
    {

      v4 = v37;
      v2 = a2;
      v3 = v42;
      v5 = v39;
      goto LABEL_7;
    }
  }
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
}

void *specialized Sequence.first(where:)(unint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  SEL *v5;
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  SEL *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;

  if (a1 >> 62)
    goto LABEL_15;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    v4 = 4;
    v5 = (SEL *)&unk_2508DF000;
    while (1)
    {
      v6 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x23B813418](v4 - 4, a1) : *(id *)(a1 + 8 * v4);
      v7 = v6;
      v8 = v4 - 3;
      if (__OFADD__(v4 - 4, 1))
        break;
      if (((unint64_t)objc_msgSend(v6, v5[454]) & 0x8000000000000000) == 0)
      {
        v9 = objc_msgSend(v7, v5[454]);
        v10 = v3;
        v11 = v5;
        v12 = objc_msgSend(a2, sel_listUserVisibleValue);
        v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        v14 = *(_QWORD *)(v13 + 16);
        swift_bridgeObjectRelease();
        v15 = (uint64_t)v9 < v14;
        v5 = v11;
        v3 = v10;
        if (v15)
        {
          swift_bridgeObjectRelease();
          return v7;
        }
      }

      ++v4;
      if (v8 == v3)
        goto LABEL_16;
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
  }
LABEL_16:
  swift_bridgeObjectRelease();
  return 0;
}

{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;

  v2 = a1;
  if (a1 >> 62)
    goto LABEL_19;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    v20 = v2;
    v21 = v2 & 0xC000000000000001;
    v4 = 4;
    while (1)
    {
      v5 = v21 ? (id)MEMORY[0x23B813418](v4 - 4, v2) : *(id *)(v2 + 8 * v4);
      v6 = v5;
      v7 = v4 - 3;
      if (__OFADD__(v4 - 4, 1))
        break;
      v8 = objc_msgSend(v5, sel_identifier);
      v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v11 = v10;

      v12 = objc_msgSend(a2, sel_sectionIdentifier);
      if (v12)
      {
        v13 = v12;
        v14 = v3;
        v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v17 = v16;

        if (v9 == v15 && v11 == v17)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_17:
          swift_bridgeObjectRelease();
          return v6;
        }
        v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v18 & 1) != 0)
          goto LABEL_17;

        v3 = v14;
        v2 = v20;
      }
      else
      {

        swift_bridgeObjectRelease();
      }
      ++v4;
      if (v7 == v3)
        goto LABEL_20;
    }
    __break(1u);
LABEL_19:
    swift_bridgeObjectRetain();
  }
LABEL_20:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t result, id a2)
{
  unint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v2 = *(_QWORD *)(result + 16);
  if (!v2)
    return MEMORY[0x24BEE4AF8];
  v4 = 0;
  v5 = result + 32;
  v6 = MEMORY[0x24BEE4AF8];
  do
  {
    v16 = v6;
    if (v4 <= v2)
      v7 = v2;
    else
      v7 = v4;
    v8 = v4;
    while (1)
    {
      if (v7 == v8)
      {
        __break(1u);
        return result;
      }
      v9 = *(_QWORD *)(v5 + 8 * v8);
      if ((v9 & 0x8000000000000000) == 0)
      {
        v10 = objc_msgSend(a2, sel_selectSettingEntryList);
        v11 = objc_msgSend(v10, sel_selectSettingEntrys);

        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CAFSelectSettingEntry);
        v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (v12 >> 62)
        {
          swift_bridgeObjectRetain();
          v13 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        result = swift_bridgeObjectRelease();
        if (v9 < v13)
          break;
      }
      if (v2 == ++v8)
        return v16;
    }
    v6 = v16;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v16 + 16) + 1, 1);
    v15 = *(_QWORD *)(v16 + 16);
    v14 = *(_QWORD *)(v16 + 24);
    if (v15 >= v14 >> 1)
    {
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
      v6 = v16;
    }
    v4 = v8 + 1;
    *(_QWORD *)(v6 + 16) = v15 + 1;
    *(_QWORD *)(v6 + 8 * v15 + 32) = v9;
  }
  while (v2 - 1 != v8);
  return v6;
}

uint64_t specialized CAFSingleSelectImageSetting.cellSelected(isProminent:hasChildren:)(uint64_t (*a1)(void *, id, id))
{
  void *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  id v9;

  v3 = objc_msgSend(v1, sel_images);
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v5 = *(_QWORD *)(v4 + 16);
  swift_bridgeObjectRelease();
  if (!v5)
    return 0;
  v6 = (void *)specialized CAFListContentRepresentable.session.getter();
  v7 = v6;
  if (v6)
  {
    v8 = objc_msgSend(v6, sel_configuration);

    v7 = objc_msgSend(v8, sel_rightHandDrive);
  }
  v9 = objc_allocWithZone((Class)type metadata accessor for CAFUICollectionViewController());
  return a1(v1, v7, v9);
}

uint64_t outlined init with take of UIListContentConfiguration?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t specialized CAFSingleSelectSetting.cellSelected(isProminent:hasChildren:)(uint64_t (*a1)(void *, id))
{
  void *v1;
  id v3;
  id v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  id v8;

  v3 = objc_msgSend(v1, sel_selectSettingEntryList);
  v4 = objc_msgSend(v3, sel_selectSettingEntrys);

  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CAFSelectSettingEntry);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  result = 0;
  if (v6)
  {
    v8 = objc_allocWithZone((Class)type metadata accessor for CAFUIPickerViewController());
    return a1(v1, v8);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Int32 and conformance Int32()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Int32 and conformance Int32;
  if (!lazy protocol witness table cache variable for type Int32 and conformance Int32)
  {
    result = MEMORY[0x23B813BE0](MEMORY[0x24BEE3FC8], MEMORY[0x24BEE3F88]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int32 and conformance Int32);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Float and conformance Float()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Float and conformance Float;
  if (!lazy protocol witness table cache variable for type Float and conformance Float)
  {
    result = MEMORY[0x23B813BE0](MEMORY[0x24BEE14F0], MEMORY[0x24BEE14E8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Float and conformance Float);
  }
  return result;
}

void CAFAudioSettings.equalizersResettable.getter()
{
  void *v0;
  id v1;
  void *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t i;
  id v6;
  void *v7;
  unsigned int v8;
  id v9;
  int v10;
  double v11;
  id v12;
  int v13;
  long double v14;
  id v15;
  int v16;
  double v17;
  uint64_t v18;
  uint64_t v19;

  v1 = objc_msgSend(v0, sel_equalizers);
  if (v1)
  {
    v2 = v1;
    type metadata accessor for CAFEqualizer();
    v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v19 = MEMORY[0x24BEE4AF8];
    if (v3 >> 62)
    {
LABEL_21:
      swift_bridgeObjectRetain();
      v4 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v4)
        goto LABEL_4;
    }
    else
    {
      v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v4)
      {
LABEL_4:
        if (v4 < 1)
        {
          __break(1u);
          return;
        }
        for (i = 0; i != v4; ++i)
        {
          if ((v3 & 0xC000000000000001) != 0)
            v6 = (id)MEMORY[0x23B813418](i, v3);
          else
            v6 = *(id *)(v3 + 8 * i + 32);
          v7 = v6;
          v8 = objc_msgSend(v6, sel_value);
          v9 = objc_msgSend(v7, sel_valueRange);
          v10 = objc_msgSend(v9, sel_maximumValue);

          v11 = (double)v10;
          v12 = objc_msgSend(v7, sel_valueRange);
          v13 = objc_msgSend(v12, sel_minimumValue);

          v14 = (v11 + (double)v13) * 0.5;
          v15 = objc_msgSend(v7, sel_valueRange);
          v16 = objc_msgSend(v15, sel_stepValue);

          v17 = v14 - fmod(v14, (double)v16);
          if ((~*(_QWORD *)&v17 & 0x7FF0000000000000) == 0)
          {
            __break(1u);
LABEL_19:
            __break(1u);
LABEL_20:
            __break(1u);
            goto LABEL_21;
          }
          if (v17 <= -129.0)
            goto LABEL_19;
          if (v17 >= 128.0)
            goto LABEL_20;
          if (v8 == (int)v17)
          {

          }
          else
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
          }
        }
        swift_bridgeObjectRelease();
        v18 = v19;
        if ((v19 & 0x8000000000000000) == 0)
          goto LABEL_23;
        goto LABEL_26;
      }
    }
    swift_bridgeObjectRelease();
    v18 = MEMORY[0x24BEE4AF8];
    if ((MEMORY[0x24BEE4AF8] & 0x8000000000000000) == 0)
    {
LABEL_23:
      if ((v18 & 0x4000000000000000) == 0)
      {
LABEL_24:
        swift_release();
        return;
      }
    }
LABEL_26:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    goto LABEL_24;
  }
}

Swift::Void __swiftcall CAFAudioSettings.resetEqualizers()()
{
  void *v0;
  id v1;
  void *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  unsigned int v8;
  id v9;
  int v10;
  double v11;
  id v12;
  int v13;
  long double v14;
  id v15;
  int v16;
  double v17;
  char v18;

  v1 = objc_msgSend(v0, sel_equalizers);
  if (v1)
  {
    v2 = v1;
    type metadata accessor for CAFEqualizer();
    v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v3 >> 62)
      goto LABEL_19;
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v4)
    {
      while (v4 >= 1)
      {
        v5 = 0;
        while (1)
        {
          v6 = (v3 & 0xC000000000000001) != 0
             ? (id)MEMORY[0x23B813418](v5, v3)
             : *(id *)(v3 + 8 * v5 + 32);
          v7 = v6;
          v8 = objc_msgSend(v6, sel_value);
          v9 = objc_msgSend(v7, sel_valueRange);
          v10 = objc_msgSend(v9, sel_maximumValue);

          v11 = (double)v10;
          v12 = objc_msgSend(v7, sel_valueRange);
          v13 = objc_msgSend(v12, sel_minimumValue);

          v14 = (v11 + (double)v13) * 0.5;
          v15 = objc_msgSend(v7, sel_valueRange);
          v16 = objc_msgSend(v15, sel_stepValue);

          v17 = v14 - fmod(v14, (double)v16);
          if ((~*(_QWORD *)&v17 & 0x7FF0000000000000) == 0)
            break;
          if (v17 <= -129.0)
            goto LABEL_17;
          if (v17 >= 128.0)
            goto LABEL_18;
          if (v8 != (int)v17)
          {
            CAFEqualizer.centerValue.getter();
            objc_msgSend(v7, sel_setValue_, v18);
          }
          ++v5;

          if (v4 == v5)
            goto LABEL_20;
        }
        __break(1u);
LABEL_17:
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        swift_bridgeObjectRetain();
        v4 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v4)
          goto LABEL_20;
      }
      __break(1u);
    }
    else
    {
LABEL_20:
      swift_bridgeObjectRelease();
    }
  }
}

unint64_t type metadata accessor for CAFEqualizer()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CAFEqualizer;
  if (!lazy cache variable for type metadata for CAFEqualizer)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFEqualizer);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySSSaySo19CAFAutomakerSettingCGG_AHs5NeverOTg5011_sSSSaySo19de30CGACIgggo_SS3key_AC5valuetACs5F188OIegnrzr_TR087_s5CAFUI18CAFUISettingsCacheV8sections33_C136C7576C945FF13298128793D0FFCELL3for13parentb46SayAA29CAFUIAutomakerSettingsSectionVGSaySo012A25M0CG_ALSgtFAMSS_AMtXEfU0_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;
  int64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (!v1)
    return v2;
  v28 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  v2 = v28;
  v5 = specialized Dictionary.startIndex.getter(a1);
  v6 = 0;
  v7 = a1 + 64;
  v8 = *(_BYTE *)(a1 + 32);
  v23 = v1;
  v24 = v4;
  v25 = a1 + 64;
  while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << v8)
  {
    v11 = (unint64_t)v5 >> 6;
    if ((*(_QWORD *)(v7 + 8 * ((unint64_t)v5 >> 6)) & (1 << v5)) == 0)
      goto LABEL_28;
    if (*(_DWORD *)(a1 + 36) != v4)
      goto LABEL_29;
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v5);
    if ((v12 & 0x8000000000000000) != 0 || (v12 & 0x4000000000000000) != 0)
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      v13 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v12);
      swift_bridgeObjectRelease();
    }
    else
    {
      v13 = v12 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
    }
    v27 = v13;
    specialized MutableCollection<>.sort(by:)(&v27);
    if (v26)
      goto LABEL_33;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v14 = v27;
    v28 = v2;
    v16 = *(_QWORD *)(v2 + 16);
    v15 = *(_QWORD *)(v2 + 24);
    if (v16 >= v15 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
      v2 = v28;
    }
    *(_QWORD *)(v2 + 16) = v16 + 1;
    *(_QWORD *)(v2 + 8 * v16 + 32) = v14;
    v8 = *(_BYTE *)(a1 + 32);
    v9 = 1 << v8;
    if (v5 >= 1 << v8)
      goto LABEL_30;
    v7 = a1 + 64;
    v17 = *(_QWORD *)(v25 + 8 * v11);
    if ((v17 & (1 << v5)) == 0)
      goto LABEL_31;
    v4 = v24;
    if (*(_DWORD *)(a1 + 36) != v24)
      goto LABEL_32;
    v18 = v17 & (-2 << (v5 & 0x3F));
    if (v18)
    {
      v9 = __clz(__rbit64(v18)) | v5 & 0xFFFFFFFFFFFFFFC0;
      v10 = v23;
    }
    else
    {
      v19 = v11 + 1;
      v20 = (v9 + 63) >> 6;
      v10 = v23;
      if (v11 + 1 < v20)
      {
        v21 = *(_QWORD *)(v25 + 8 * v19);
        if (v21)
        {
LABEL_24:
          v9 = __clz(__rbit64(v21)) + (v19 << 6);
        }
        else
        {
          while (v20 - 2 != v11)
          {
            v21 = *(_QWORD *)(a1 + 80 + 8 * v11++);
            if (v21)
            {
              v19 = v11 + 1;
              goto LABEL_24;
            }
          }
        }
      }
    }
    ++v6;
    v5 = v9;
    if (v6 == v10)
      return v2;
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  result = swift_release();
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Swift.AnyObject.Type>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  v2 = static _DictionaryStorage.allocate(capacity:)();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (AnyHashable, Any)(v6, (uint64_t)v15);
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v15);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v9 = v3[6] + 40 * result;
    v10 = v15[0];
    v11 = v15[1];
    *(_QWORD *)(v9 + 32) = v16;
    *(_OWORD *)v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, CAFAutomakerSetting>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (void **)(a1 + 48);
  while (1)
  {
    v5 = (uint64_t)*(v4 - 2);
    v6 = (uint64_t)*(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    v8 = v7;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v8;
    v12 = v2[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t CAFUISettingsCache.settings.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CAFUISettingsCache.rootSettings.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CAFUISettingsCache.settingsByIdentifiers.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CAFUISettingsCache.parentToChildrenIdentifiers.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CAFUISettingsCache.childToParentIdentifiers.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CAFUISettingsCache.settingsSections.getter()
{
  return swift_bridgeObjectRetain();
}

void __swiftcall CAFUISettingsCache.init(settings:sections:)(CAFUI::CAFUISettingsCache *__return_ptr retstr, Swift::OpaquePointer settings, Swift::OpaquePointer_optional sections)
{
  int64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t i;
  uint64_t j;
  void *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t k;
  id v27;
  void *v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  id v41;
  int64_t v42;
  uint64_t v43;
  id v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  _QWORD *v49;
  id v50;
  unint64_t v51;
  uint64_t v52;
  void *v53;
  CAFUI::CAFUISettingsCache *v54;
  uint64_t v55;
  unint64_t v56;
  void *rawValue;
  CAFUI::CAFUISettingsCache *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  int64_t v62;
  _QWORD *v63;
  unint64_t v64;

  rawValue = sections.value._rawValue;
  v58 = retstr;
  v3 = (int64_t)settings._rawValue;
  v60 = (unint64_t)settings._rawValue >> 62;
  if ((unint64_t)settings._rawValue >> 62)
  {
    swift_bridgeObjectRetain_n();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = *(_QWORD *)(((unint64_t)settings._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  v5 = MEMORY[0x24BEE4AF8];
  v62 = v3;
  if (v4)
  {
    v64 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 & ~(v4 >> 63), 0);
    if (v4 < 0)
    {
      __break(1u);
      goto LABEL_87;
    }
    v6 = 0;
    v7 = (_QWORD *)v64;
    v8 = v3 & 0xC000000000000001;
    do
    {
      if (v8)
        v9 = (id)MEMORY[0x23B813418](v6, v3);
      else
        v9 = *(id *)(v3 + 8 * v6 + 32);
      v10 = v9;
      v11 = objc_msgSend(v9, sel_identifier);
      v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v14 = v13;

      v64 = (unint64_t)v7;
      v16 = v7[2];
      v15 = v7[3];
      if (v16 >= v15 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
        v7 = (_QWORD *)v64;
      }
      ++v6;
      v7[2] = v16 + 1;
      v17 = &v7[3 * v16];
      v17[4] = v12;
      v17[5] = v14;
      v17[6] = v10;
      v3 = v62;
    }
    while (v4 != v6);
    v5 = MEMORY[0x24BEE4AF8];
    goto LABEL_15;
  }
  if (*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
  {
    v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_15:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, CAFAutomakerSetting>);
    v18 = static _DictionaryStorage.allocate(capacity:)();
    goto LABEL_16;
  }
  v18 = MEMORY[0x24BEE4B00];
  v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_16:
  v64 = v18;
  v19 = 0;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v7, 1, &v64);
  swift_bridgeObjectRelease();
  v59 = v64;
  v64 = v5;
  if (!v60)
  {
    v20 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v20)
      goto LABEL_18;
LABEL_28:
    swift_bridgeObjectRelease();
    goto LABEL_36;
  }
  swift_bridgeObjectRetain();
  v20 = _CocoaArrayWrapper.endIndex.getter();
  if (!v20)
    goto LABEL_28;
LABEL_18:
  if (v20 < 1)
  {
LABEL_87:
    __break(1u);
    goto LABEL_88;
  }
  if ((v3 & 0xC000000000000001) != 0)
  {
    for (i = 0; i != v20; ++i)
    {
      MEMORY[0x23B813418](i, v3);
      objc_opt_self();
      if (swift_dynamicCastObjCClass())
      {
        MEMORY[0x23B81301C]();
        if (*(_QWORD *)((v64 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v64 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
  }
  else
  {
    for (j = 0; j != v20; ++j)
    {
      v23 = *(void **)(v3 + 8 * j + 32);
      objc_opt_self();
      if (swift_dynamicCastObjCClass())
      {
        MEMORY[0x23B81301C](v23);
        if (*(_QWORD *)((v64 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v64 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
  }
  swift_bridgeObjectRelease();
  v5 = MEMORY[0x24BEE4AF8];
LABEL_36:
  v24 = v64;
  v64 = v5;
  if (!(v24 >> 62))
  {
    v25 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v25)
      goto LABEL_38;
LABEL_52:
    swift_bridgeObjectRelease();
    v33 = MEMORY[0x24BEE4AF8];
    goto LABEL_53;
  }
  swift_bridgeObjectRetain();
  v25 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v25)
    goto LABEL_52;
LABEL_38:
  if (v25 < 1)
  {
LABEL_88:
    __break(1u);
    swift_release();
    __break(1u);
    swift_release();
    __break(1u);
    goto LABEL_89;
  }
  for (k = 0; k != v25; ++k)
  {
    if ((v24 & 0xC000000000000001) != 0)
      v27 = (id)MEMORY[0x23B813418](k, v24);
    else
      v27 = *(id *)(v24 + 8 * k + 32);
    v28 = v27;
    v29 = objc_msgSend(v27, sel_childrenSettingsIdentifiers);
    if (v29
      && (v30 = v29,
          v31 = static Array._unconditionallyBridgeFromObjectiveC(_:)(),
          v30,
          v32 = *(_QWORD *)(v31 + 16),
          swift_bridgeObjectRelease(),
          v32))
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    else
    {

    }
  }
  swift_bridgeObjectRelease();
  v33 = v64;
  v3 = v62;
LABEL_53:
  v34 = v59;
  swift_retain();
  v35 = (_QWORD *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo16CAFStaticSettingCG_SS_SaySo012CAFAutomakerE0CGts5NeverOTg5056_s5CAFUI18CAFUISettingsCacheV8settings8sectionsACSaySo19fe46CG_SaySo18CAFSettingsSectionCGSgtcfcSS_AHtSo09D9G0CXEfU3_SDySSAJGTf1cn_nTf4ng_n(v33, v59);
  swift_release();
  swift_release();
  if (v35[2])
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [CAFAutomakerSetting]>);
    v36 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v36 = MEMORY[0x24BEE4B00];
  }
  v64 = v36;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v35, 1, &v64);
  swift_bridgeObjectRelease();
  v37 = v64;
  v38 = MEMORY[0x24BEE4AF8];
  v39 = (unint64_t)&v55;
  v64 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  MEMORY[0x24BDAC7A8](v64);
  specialized Sequence.forEach(_:)(v37, (void (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #7 in CAFUISettingsCache.init(settings:sections:));
  v63 = (_QWORD *)v38;
  v61 = v64;
  if (v60)
  {
    if (v3 < 0)
      v39 = v3;
    else
      v39 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v40 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    v40 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v41 = (id)MEMORY[0x24BEE4AF8];
  if (v40)
  {
    v56 = 0;
    v60 = v37;
    v42 = v3;
    v3 = 0;
    v19 = v42 & 0xC000000000000001;
    v43 = v42 & 0xFFFFFFFFFFFFFF8;
    while (1)
    {
      if (v19)
      {
        v44 = (id)MEMORY[0x23B813418](v3, v62);
      }
      else
      {
        if ((unint64_t)v3 >= *(_QWORD *)(v43 + 16))
          goto LABEL_84;
        v44 = *(id *)(v62 + 8 * v3 + 32);
      }
      v45 = v44;
      v37 = v3 + 1;
      if (__OFADD__(v3, 1))
        break;
      v41 = objc_msgSend(v44, sel_identifier);
      v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v34 = v47;

      v39 = v61;
      if (*(_QWORD *)(v61 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(v46, v34), (v48 & 1) != 0))
      {

        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        v39 = (unint64_t)&v63;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        v41 = (id)v63[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      ++v3;
      if (v37 == v40)
      {
        v3 = v62;
        v39 = (unint64_t)v63;
        v34 = v59;
        v37 = v60;
        v19 = v56;
        v41 = (id)MEMORY[0x24BEE4AF8];
        goto LABEL_76;
      }
    }
    __break(1u);
LABEL_84:
    __break(1u);
    goto LABEL_85;
  }
  v39 = MEMORY[0x24BEE4AF8];
LABEL_76:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  if ((v39 & 0x8000000000000000) != 0 || (v49 = (_QWORD *)v39, (v39 & 0x4000000000000000) != 0))
  {
LABEL_85:
    v49 = specialized _copyCollectionToContiguousArray<A>(_:)(v39);
    swift_release();
  }
  v63 = v49;
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v63);
  if (v19)
  {
LABEL_89:
    swift_release();
    __break(1u);
    return;
  }
  swift_release();
  if (rawValue)
    v50 = rawValue;
  else
    v50 = v41;
  v51 = (unint64_t)v63;
  swift_retain();
  v52 = specialized _ArrayProtocol.filter(_:)(v3, v51);
  v53 = (void *)v61;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  v54 = v58;
  v58->settings._rawValue = (void *)v3;
  v54->rootSettings._rawValue = (void *)v51;
  v54->prominentSettings._rawValue = (void *)v52;
  v54->settingsByIdentifiers._rawValue = (void *)v34;
  v54->parentToChildrenIdentifiers._rawValue = (void *)v37;
  v54->childToParentIdentifiers._rawValue = v53;
  v54->settingsSections._rawValue = v50;
}

uint64_t closure #7 in CAFUISettingsCache.init(settings:sections:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4, unint64_t a5)
{
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  char v28;
  char v29;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t *v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t result;
  unint64_t v40;
  id v41;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v7 = a3;
  if (a3 >> 62)
  {
LABEL_33:
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter();
    if (v9)
      goto LABEL_3;
    return swift_bridgeObjectRelease();
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v9)
    return swift_bridgeObjectRelease();
LABEL_3:
  v45 = v7;
  v46 = v7 & 0xC000000000000001;
  v10 = 4;
  v43 = v9;
  v44 = a2;
  v40 = a5;
  while (1)
  {
    if (v46)
      v11 = (id)MEMORY[0x23B813418](v10 - 4, v7);
    else
      v11 = *(id *)(v7 + 8 * v10);
    v12 = v11;
    v13 = v10 - 3;
    if (__OFADD__(v10 - 4, 1))
    {
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    v14 = objc_msgSend(v11, sel_identifier);
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v17 = v16;

    if (!*(_QWORD *)(a5 + 16))
      goto LABEL_19;
    swift_bridgeObjectRetain();
    v18 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if ((v19 & 1) == 0)
    {
      swift_bridgeObjectRelease();
LABEL_19:
      swift_bridgeObjectRetain();
      v27 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v17);
      v29 = v28;
      swift_bridgeObjectRelease();
      if ((v29 & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v31 = *a4;
        v48 = *a4;
        *a4 = 0x8000000000000000;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized _NativeDictionary.copy()();
          v31 = v48;
        }
        swift_bridgeObjectRelease();
        v32 = *(void **)(*(_QWORD *)(v31 + 56) + 8 * v27);
        specialized _NativeDictionary._delete(at:)(v27, v31);
        *a4 = v31;

        swift_bridgeObjectRelease();
      }
      else
      {

      }
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    v41 = *(id *)(*(_QWORD *)(a5 + 56) + 8 * v18);
    swift_bridgeObjectRelease();
    a2 = swift_isUniquelyReferenced_nonNull_native();
    v20 = *a4;
    v47 = *a4;
    *a4 = 0x8000000000000000;
    a5 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v17);
    v22 = *(_QWORD *)(v20 + 16);
    v23 = (v21 & 1) == 0;
    v24 = v22 + v23;
    if (__OFADD__(v22, v23))
      goto LABEL_31;
    v7 = v21;
    if (*(_QWORD *)(v20 + 24) < v24)
      break;
    if ((a2 & 1) != 0)
    {
      a2 = v47;
      if ((v21 & 1) == 0)
        goto LABEL_27;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      a2 = v47;
      if ((v7 & 1) == 0)
      {
LABEL_27:
        *(_QWORD *)(a2 + 8 * (a5 >> 6) + 64) |= 1 << a5;
        v35 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * a5);
        *v35 = v15;
        v35[1] = v17;
        *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * a5) = v41;
        v36 = *(_QWORD *)(a2 + 16);
        v37 = __OFADD__(v36, 1);
        v38 = v36 + 1;
        if (v37)
          goto LABEL_32;
        *(_QWORD *)(a2 + 16) = v38;
        swift_bridgeObjectRetain();
        goto LABEL_29;
      }
    }
LABEL_25:
    v33 = *(_QWORD *)(a2 + 56);
    v34 = *(void **)(v33 + 8 * a5);
    *(_QWORD *)(v33 + 8 * a5) = v41;

LABEL_29:
    *a4 = a2;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a5 = v40;
LABEL_6:
    a2 = v44;
    v7 = v45;
    ++v10;
    if (v13 == v43)
      return swift_bridgeObjectRelease();
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v24, a2);
  v25 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v17);
  if ((v7 & 1) == (v26 & 1))
  {
    a5 = v25;
    a2 = v47;
    if ((v7 & 1) == 0)
      goto LABEL_27;
    goto LABEL_25;
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t CAFUISettingsCache.hasShowAudioLogo.getter()
{
  unint64_t *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v1 = *v0;
  v11 = v1;
  v10 = MEMORY[0x24BEE4AF8];
  if (!(v1 >> 62))
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v2)
      goto LABEL_3;
LABEL_18:
    outlined release of [CAFSettingsSection]((uint64_t)&v11);
    v8 = MEMORY[0x24BEE4AF8];
    if ((MEMORY[0x24BEE4AF8] & 0x8000000000000000) != 0)
      goto LABEL_22;
    goto LABEL_19;
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v2 = result;
  if (!result)
    goto LABEL_18;
LABEL_3:
  if (v2 >= 1)
  {
    v4 = 0;
    v5 = v1 & 0xC000000000000001;
    do
    {
      if (v5)
        v6 = (id)MEMORY[0x23B813418](v4, v1);
      else
        v6 = *(id *)(v1 + 8 * v4 + 32);
      v7 = v6;
      if (objc_msgSend(v6, sel_hasHidden) && (objc_msgSend(v7, sel_hidden) & 1) != 0
        || objc_msgSend(v7, sel_category) != 3
        || (objc_msgSend(v7, sel_showAudioBrandLogo) & 1) == 0)
      {

      }
      else
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v5 = v1 & 0xC000000000000001;
      }
      ++v4;
    }
    while (v2 != v4);
    outlined release of [CAFSettingsSection]((uint64_t)&v11);
    v8 = v10;
    if (v10 < 0)
      goto LABEL_22;
LABEL_19:
    if ((v8 & 0x4000000000000000) == 0)
    {
      v9 = *(_QWORD *)(v8 + 16);
LABEL_21:
      swift_release();
      return v9 != 0;
    }
LABEL_22:
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

id CAFAutomakerSetting.isHidden.getter()
{
  return CAFAutomakerSetting.isHidden.getter((SEL *)&selRef_hasHidden, (SEL *)&selRef_hidden);
}

uint64_t CAFUISettingsCache.rootSettings(in:visibleOnly:)(unsigned __int8 a1, char a2)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t i;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_QWORD *)(v2 + 8);
  v12 = v5;
  v11 = MEMORY[0x24BEE4AF8];
  if (!(v5 >> 62))
  {
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v6)
      goto LABEL_3;
LABEL_17:
    outlined release of [CAFSettingsSection]((uint64_t)&v12);
    return MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v6 = result;
  if (!result)
    goto LABEL_17;
LABEL_3:
  if (v6 < 1)
  {
    __break(1u);
  }
  else
  {
    for (i = 0; i != v6; ++i)
    {
      if ((v5 & 0xC000000000000001) != 0)
        v9 = (id)MEMORY[0x23B813418](i, v5);
      else
        v9 = *(id *)(v5 + 8 * i + 32);
      v10 = v9;
      if (objc_msgSend(v9, sel_category, v11, v12) != a1
        || (a2 & 1) != 0
        && objc_msgSend(v10, sel_hasHidden)
        && objc_msgSend(v10, sel_hidden))
      {

      }
      else
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
    }
    outlined release of [CAFSettingsSection]((uint64_t)&v12);
    return v11;
  }
  return result;
}

unint64_t CAFUISettingsCache.prominentSettings(in:visibleOnly:)(uint64_t a1, char a2)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(v2 + 16);
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRetain();
  if (v6)
  {
    swift_bridgeObjectRetain();
    v7 = specialized _ArrayProtocol.filter(_:)(v5, a1, a2 & 1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v7;
  }
  return v5;
}

uint64_t CAFUISettingsCache.visibleChildren(of:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t i;
  id v14;
  void *v15;
  uint64_t v16;

  v2 = *(_QWORD *)(v1 + 32);
  v3 = objc_msgSend(a1, sel_identifier);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = v5;

  v7 = MEMORY[0x24BEE4AF8];
  if (*(_QWORD *)(v2 + 16))
  {
    v8 = specialized __RawDictionaryStorage.find<A>(_:)(v4, v6);
    if ((v9 & 1) != 0)
    {
      v10 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v8);
      swift_bridgeObjectRetain();
    }
    else
    {
      v10 = MEMORY[0x24BEE4AF8];
    }
  }
  else
  {
    v10 = MEMORY[0x24BEE4AF8];
  }
  result = swift_bridgeObjectRelease();
  v16 = v7;
  if (!(v10 >> 62))
  {
    v12 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v12)
      goto LABEL_8;
LABEL_20:
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRetain();
  v12 = _CocoaArrayWrapper.endIndex.getter();
  result = swift_bridgeObjectRelease();
  if (!v12)
    goto LABEL_20;
LABEL_8:
  if (v12 < 1)
  {
    __break(1u);
  }
  else
  {
    for (i = 0; i != v12; ++i)
    {
      if ((v10 & 0xC000000000000001) != 0)
        v14 = (id)MEMORY[0x23B813418](i, v10);
      else
        v14 = *(id *)(v10 + 8 * i + 32);
      v15 = v14;
      if (objc_msgSend(v14, sel_hasHidden) && (objc_msgSend(v15, sel_hidden) & 1) != 0)
      {

      }
      else
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
    }
    swift_bridgeObjectRelease();
    return v16;
  }
  return result;
}

uint64_t CAFUISettingsCache.sections(for:)(void *a1)
{
  uint64_t v1;
  id v3;
  unint64_t v4;
  uint64_t v5;

  if (a1)
  {
    v3 = a1;
    v4 = CAFUISettingsCache.childSettings(of:)(v3);

  }
  else
  {
    v4 = *(_QWORD *)(v1 + 8);
    swift_bridgeObjectRetain();
  }
  v5 = CAFUISettingsCache.sections(for:parentSetting:)(v4, a1);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t CAFUISettingsCache.childSettings(of:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;

  v2 = *(_QWORD *)(v1 + 32);
  v3 = objc_msgSend(a1, sel_identifier);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = v5;

  if (*(_QWORD *)(v2 + 16) && (v7 = specialized __RawDictionaryStorage.find<A>(_:)(v4, v6), (v8 & 1) != 0))
  {
    v9 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v7);
    swift_bridgeObjectRetain();
  }
  else
  {
    v9 = MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t CAFUISettingsCache.sections(for:parentSetting:)(unint64_t a1, void *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;

  v38 = (_QWORD *)MEMORY[0x24BEE4B00];
  if (a1 >> 62)
  {
LABEL_25:
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    if (v3)
      goto LABEL_3;
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v3)
    {
LABEL_3:
      v4 = (_QWORD *)MEMORY[0x24BEE4B00];
      v5 = 4;
      v36 = v3;
      while (1)
      {
        if ((a1 & 0xC000000000000001) != 0)
          v8 = (id)MEMORY[0x23B813418](v5 - 4, a1);
        else
          v8 = *(id *)(a1 + 8 * v5);
        v9 = v8;
        v10 = v5 - 3;
        if (__OFADD__(v5 - 4, 1))
        {
          __break(1u);
LABEL_23:
          __break(1u);
LABEL_24:
          __break(1u);
          goto LABEL_25;
        }
        v11 = objc_msgSend(v8, sel_sectionIdentifier);
        if (v11)
        {
          v12 = v11;
          v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v15 = v14;

        }
        else
        {
          v13 = 0;
          v15 = 0xE000000000000000;
        }
        v17 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v15);
        v18 = v4[2];
        v19 = (v16 & 1) == 0;
        v20 = v18 + v19;
        if (__OFADD__(v18, v19))
          goto LABEL_23;
        v21 = v16;
        if (v4[3] < v20)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v20, 1);
          v4 = v38;
          v22 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v15);
          if ((v21 & 1) != (v23 & 1))
          {
            result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            return result;
          }
          v17 = v22;
        }
        if ((v21 & 1) != 0)
        {
          v6 = swift_bridgeObjectRelease();
          v7 = (_QWORD *)(v4[7] + 8 * v17);
          MEMORY[0x23B81301C](v6);
          if (*(_QWORD *)((*v7 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        else
        {
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
          v24 = swift_allocObject();
          *(_OWORD *)(v24 + 16) = xmmword_237579080;
          *(_QWORD *)(v24 + 32) = v9;
          v37 = v24;
          specialized Array._endMutation()();
          v4[(v17 >> 6) + 8] |= 1 << v17;
          v25 = (uint64_t *)(v4[6] + 16 * v17);
          *v25 = v13;
          v25[1] = v15;
          *(_QWORD *)(v4[7] + 8 * v17) = v37;
          v26 = v4[2];
          v27 = __OFADD__(v26, 1);
          v28 = v26 + 1;
          if (v27)
            goto LABEL_24;
          v4[2] = v28;
        }
        ++v5;
        if (v10 == v36)
          goto LABEL_27;
      }
    }
  }
  v4 = (_QWORD *)MEMORY[0x24BEE4B00];
LABEL_27:
  swift_bridgeObjectRelease();
  v29 = (_QWORD *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySSSaySo19CAFAutomakerSettingCGG_AHs5NeverOTg5011_sSSSaySo19de30CGACIgggo_SS3key_AC5valuetACs5F188OIegnrzr_TR087_s5CAFUI18CAFUISettingsCacheV8sections33_C136C7576C945FF13298128793D0FFCELL3for13parentb46SayAA29CAFUIAutomakerSettingsSectionVGSaySo012A25M0CG_ALSgtFAMSS_AMtXEfU0_Tf3nnnpf_nTf1cn_n((uint64_t)v4);
  swift_release();
  v38 = v29;
  outlined retain of CAFUISettingsCache(v35);
  specialized MutableCollection<>.sort(by:)(&v38, v35);
  outlined release of CAFUISettingsCache(v35);
  outlined retain of CAFUISettingsCache(v35);
  v30 = a2;
  v31 = swift_bridgeObjectRetain();
  v32 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySaySo19CAFAutomakerSettingCGG_5CAFUI29CAFUIAutomakerSettingsSectionVs5NeverOTg5087_s5CAFUI18CAFUISettingsCacheV8sections33_C136C7576C945FF13298128793D0FFCELL3for13parente7SayAA29ghi10VGSaySo012D20M0CG_ALSgtFAiMXEfU2_AJ0mN0VAGSgTf1cn_nTf4ngg_n(v31, v35, a2);

  outlined release of CAFUISettingsCache(v35);
  swift_bridgeObjectRelease_n();
  return v32;
}

void *CAFUISettingsCache.section(for:)(void *a1)
{
  id v1;
  unint64_t v2;
  void *v3;

  v1 = a1;
  v2 = swift_bridgeObjectRetain();
  v3 = specialized Sequence.first(where:)(v2, v1);
  swift_bridgeObjectRelease();

  return v3;
}

uint64_t CAFUISettingsCache.categorySettings(for:)(unsigned __int8 a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t i;
  id v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v3 = *(_QWORD *)(v1 + 8);
  v12 = v3;
  v11 = MEMORY[0x24BEE4AF8];
  if (!(v3 >> 62))
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v4)
      goto LABEL_3;
LABEL_14:
    outlined release of [CAFSettingsSection]((uint64_t)&v12);
    v9 = MEMORY[0x24BEE4AF8];
LABEL_15:
    v10 = CAFUISettingsCache.sections(for:parentSetting:)(v9, 0);
    swift_release();
    return v10;
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v4 = result;
  if (!result)
    goto LABEL_14;
LABEL_3:
  if (v4 >= 1)
  {
    for (i = 0; i != v4; ++i)
    {
      if ((v3 & 0xC000000000000001) != 0)
        v7 = (id)MEMORY[0x23B813418](i, v3);
      else
        v7 = *(id *)(v3 + 8 * i + 32);
      v8 = v7;
      if (objc_msgSend(v7, sel_category, v11, v12) == a1)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {

      }
    }
    outlined release of [CAFSettingsSection]((uint64_t)&v12);
    v9 = v11;
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

uint64_t CAFUISettingsCache.settings(excludingLayoutKeys:)(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;

  swift_bridgeObjectRetain();
  v2 = swift_bridgeObjectRetain();
  v3 = specialized _ArrayProtocol.filter(_:)(v2, a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t CAFUISettingsCache.settings(for:)(unsigned __int8 a1)
{
  unint64_t *v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t i;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v10 = v3;
  v9 = MEMORY[0x24BEE4AF8];
  if (!(v3 >> 62))
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v4)
      goto LABEL_3;
LABEL_14:
    outlined release of [CAFSettingsSection]((uint64_t)&v10);
    return MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v4 = result;
  if (!result)
    goto LABEL_14;
LABEL_3:
  if (v4 < 1)
  {
    __break(1u);
  }
  else
  {
    for (i = 0; i != v4; ++i)
    {
      if ((v3 & 0xC000000000000001) != 0)
        v7 = (id)MEMORY[0x23B813418](i, v3);
      else
        v7 = *(id *)(v3 + 8 * i + 32);
      v8 = v7;
      if (objc_msgSend(v7, sel_category, v9, v10) == a1)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {

      }
    }
    outlined release of [CAFSettingsSection]((uint64_t)&v10);
    return v9;
  }
  return result;
}

uint64_t CAFUISettingsCache.setting(_:isAncestorOf:)(void *a1, void *a2)
{
  uint64_t v2;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v14;
  uint64_t result;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;

  v5 = objc_msgSend(a1, sel_identifier);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v8 = v7;

  v9 = objc_msgSend(a2, sel_identifier);
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v12 = v11;

  if (v6 == v10 && v8 == v12)
  {
    swift_bridgeObjectRelease_n();
    return 0;
  }
  v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = 0;
  if ((v14 & 1) != 0)
    return result;
  v16 = *(_QWORD *)(v2 + 40);
  v17 = objc_msgSend(a2, sel_identifier);
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v20 = v19;

  if (!*(_QWORD *)(v16 + 16) || (v21 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v20), (v22 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  v23 = *(id *)(*(_QWORD *)(v16 + 56) + 8 * v21);
  swift_bridgeObjectRelease();
  while (1)
  {
    v24 = v23;
    v25 = objc_msgSend(a1, sel_identifier);
    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v28 = v27;

    v29 = objc_msgSend(v24, sel_identifier);
    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v32 = v31;

    if (v26 == v30 && v28 == v32)
    {

      swift_bridgeObjectRelease_n();
      return 1;
    }
    v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v34 & 1) != 0)
      break;
    v35 = objc_msgSend(v24, sel_identifier);
    v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v38 = v37;

    if (!*(_QWORD *)(v16 + 16) || (v39 = specialized __RawDictionaryStorage.find<A>(_:)(v36, v38), (v40 & 1) == 0))
    {
      swift_bridgeObjectRelease();

      return 0;
    }
    v23 = *(id *)(*(_QWORD *)(v16 + 56) + 8 * v39);
    swift_bridgeObjectRelease();

  }
  return 1;
}

void CAFUISettingsCache.ancestors(of:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  id v23;
  uint64_t v24;
  id v25;
  id v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;

  v31 = MEMORY[0x24BEE4AF8];
  v2 = *(_QWORD *)(v1 + 40);
  v3 = objc_msgSend(a1, sel_identifier);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = v5;

  if (*(_QWORD *)(v2 + 16) && (v7 = specialized __RawDictionaryStorage.find<A>(_:)(v4, v6), (v8 & 1) != 0))
  {
    v9 = *(id *)(*(_QWORD *)(v2 + 56) + 8 * v7);
    swift_bridgeObjectRelease();
    while (1)
    {
      v10 = v9;
      MEMORY[0x23B81301C]();
      if (*(_QWORD *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      v11 = objc_msgSend(v10, sel_identifier);
      v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v14 = v13;

      if (!*(_QWORD *)(v2 + 16))
        break;
      v15 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v14);
      if ((v16 & 1) == 0)
        break;
      v9 = *(id *)(*(_QWORD *)(v2 + 56) + 8 * v15);
      swift_bridgeObjectRelease();

    }
    swift_bridgeObjectRelease();

  }
  else
  {
    swift_bridgeObjectRelease();
  }
  if (v31 >> 62)
    goto LABEL_38;
  v17 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v17)
  {
    for (i = v17 - 1; !__OFSUB__(v17, 1); i = v17 - 1)
    {
      if (i < 1)
        return;
      v19 = 0;
      v20 = v17 + 0x7FFFFFFFFFFFFFFFLL;
      while (1)
      {
        v21 = v17 - 1;
        if ((v31 & 0xC000000000000001) != 0)
        {
          v24 = MEMORY[0x23B813418](v19, v31);
          v25 = (id)MEMORY[0x23B813418](v17 - 1, v31);
          goto LABEL_20;
        }
        v22 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v19 >= v22)
          break;
        v23 = *(id *)(v31 + 8 * v19 + 32);
        if (v21 >= v22)
          goto LABEL_35;
        v24 = (uint64_t)v23;
        v25 = *(id *)(v31 + 8 * v17 + 24);
LABEL_20:
        v26 = v25;
        if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
          || (v31 & 0x8000000000000000) != 0
          || (v31 & 0x4000000000000000) != 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew()(v31);
        }
        v27 = *(void **)((v31 & 0xFFFFFFFFFFFFFF8) + 8 * v19 + 0x20);
        *(_QWORD *)((v31 & 0xFFFFFFFFFFFFFF8) + 8 * v19 + 0x20) = v26;

        specialized Array._endMutation()();
        if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
          || (v31 & 0x8000000000000000) != 0
          || (v31 & 0x4000000000000000) != 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew()(v31);
        }
        if (v21 >= *(_QWORD *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_36;
        v28 = *(void **)((v31 & 0xFFFFFFFFFFFFFF8) + 8 * v17 + 0x18);
        *(_QWORD *)((v31 & 0xFFFFFFFFFFFFFF8) + 8 * v17 + 0x18) = v24;

        specialized Array._endMutation()();
        if (v20 == v19)
          goto LABEL_37;
        ++v19;
        v29 = v17 - 2;
        --v17;
        if (v19 >= v29)
          return;
      }
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      swift_bridgeObjectRetain();
      v30 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v30)
        return;
      swift_bridgeObjectRetain();
      v17 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    __break(1u);
  }
}

uint64_t CAFUISettingsCache.hasAnyHiddenAncestor(_:)(void *a1)
{
  return CAFUISettingsCache.hasAnyHiddenAncestor(_:)(a1, (SEL *)&selRef_hasHidden, (SEL *)&selRef_hidden);
}

uint64_t CAFUISettingsCache.hasLimitableUIAncestor(_:)(void *a1)
{
  return CAFUISettingsCache.hasAnyHiddenAncestor(_:)(a1, (SEL *)&selRef_hasLimitableUIElement, (SEL *)&selRef_limitableUIElement);
}

uint64_t CAFUISettingsCache.hasAnyHiddenAncestor(_:)(void *a1, SEL *a2, SEL *a3)
{
  uint64_t v3;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;

  v6 = *(_QWORD *)(v3 + 40);
  v7 = objc_msgSend(a1, sel_identifier);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v10 = v9;

  if (*(_QWORD *)(v6 + 16) && (v11 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v10), (v12 & 1) != 0))
  {
    v13 = *(id *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    swift_bridgeObjectRelease();
    while (1)
    {
      v14 = v13;
      if (objc_msgSend(v14, *a2))
      {
        if (objc_msgSend(v14, *a3))
          break;
      }
      v15 = objc_msgSend(v14, sel_identifier);
      v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v18 = v17;

      if (!*(_QWORD *)(v6 + 16) || (v19 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v18), (v20 & 1) == 0))
      {
        swift_bridgeObjectRelease();

        return 0;
      }
      v13 = *(id *)(*(_QWORD *)(v6 + 56) + 8 * v19);
      swift_bridgeObjectRelease();

    }
    return 1;
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
}

id CAFAutomakerSetting.isLimitableUIElement.getter()
{
  return CAFAutomakerSetting.isHidden.getter((SEL *)&selRef_hasLimitableUIElement, (SEL *)&selRef_limitableUIElement);
}

uint64_t closure #3 in CAFUISettingsCache.sections(for:parentSetting:)(uint64_t *a1, unint64_t *a2, uint64_t a3)
{
  void *v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t result;
  id v11;
  void *v12;
  unint64_t v13;
  id v14;
  unint64_t v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  unsigned int v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  unsigned int v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;

  v5 = *a1;
  v6 = *a2;
  if ((unint64_t)*a1 >> 62)
  {
    swift_bridgeObjectRetain();
    if (!_CocoaArrayWrapper.endIndex.getter())
      goto LABEL_34;
  }
  else
  {
    v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v7)
      goto LABEL_34;
  }
  if ((v5 & 0xC000000000000001) != 0)
  {
    v8 = (id)MEMORY[0x23B813418](0, v5);
  }
  else
  {
    if (!*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_32;
    }
    v8 = *(id *)(v5 + 32);
  }
  v3 = v8;
  swift_bridgeObjectRelease();
  if (!(v6 >> 62))
  {
    v9 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
    goto LABEL_33;
  }
LABEL_32:
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  if (!result)
  {
LABEL_33:

LABEL_34:
    swift_bridgeObjectRelease();
    goto LABEL_35;
  }
LABEL_8:
  if ((v6 & 0xC000000000000001) != 0)
  {
    v11 = (id)MEMORY[0x23B813418](0, v6);
    goto LABEL_11;
  }
  if (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v11 = *(id *)(v6 + 32);
LABEL_11:
    v12 = v11;
    swift_bridgeObjectRelease();
    v13 = *(_QWORD *)(a3 + 48);
    v14 = v3;
    v15 = swift_bridgeObjectRetain();
    v16 = specialized Sequence.first(where:)(v15, v14);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRetain();
    v17 = v12;
    v18 = specialized Sequence.first(where:)(v13, v17);
    swift_bridgeObjectRelease();

    if (v16)
    {
      if (v18)
      {
        v19 = v16;
        v20 = v18;
        v21 = objc_msgSend(v19, sel_sortOrder);
        if (v21 == objc_msgSend(v20, sel_sortOrder))
        {
          v22 = objc_msgSend(v19, sel_identifier);
          v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v24 = v23;

          v25 = objc_msgSend(v20, sel_identifier);
          v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v28 = v27;

          if (v26 == v42 && v28 == v24)
          {

            v29 = 1;
          }
          else
          {
            v40 = _stringCompareWithSmolCheck(_:_:expecting:)();

            v29 = v40 ^ 1;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

        }
        else
        {
          v30 = objc_msgSend(v19, sel_sortOrder);
          v31 = objc_msgSend(v20, sel_sortOrder);

          v29 = v30 < v31;
        }
      }
      else
      {

        v29 = 0;
      }
      return v29 & 1;
    }
    if (!v18)
    {
      v32 = objc_msgSend(v14, sel_identifier);
      v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v35 = v34;

      v36 = objc_msgSend(v17, sel_identifier);
      v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v39 = v38;

      if (v37 == v33 && v39 == v35)
      {

        v29 = 1;
      }
      else
      {
        v41 = _stringCompareWithSmolCheck(_:_:expecting:)();

        v29 = v41 ^ 1;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v29 & 1;
    }

LABEL_35:
    v29 = 1;
    return v29 & 1;
  }
  __break(1u);
  return result;
}

uint64_t closure #4 in CAFUISettingsCache.sections(for:parentSetting:)@<X0>(uint64_t *a1@<X0>, void *a2@<X2>, uint64_t *a3@<X8>)
{
  void *v3;
  void *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  id v15;
  void *v16;
  id v17;
  unint64_t v18;
  void *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  Swift::String v40;
  uint64_t v41;
  unint64_t v42;
  os_log_type_t v43;
  id v44;
  id v45[2];
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  void *v50;

  v4 = v3;
  v8 = type metadata accessor for CharacterSet();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *a1;
  if (!((unint64_t)*a1 >> 62))
  {
    v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v13)
      goto LABEL_3;
LABEL_26:
    swift_bridgeObjectRelease();
    goto LABEL_27;
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  if (!result)
    goto LABEL_26;
LABEL_3:
  v50 = a2;
  v47 = v9;
  if ((v12 & 0xC000000000000001) != 0)
  {
    v15 = (id)MEMORY[0x23B813418](0, v12);
    goto LABEL_6;
  }
  if (*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v15 = *(id *)(v12 + 32);
LABEL_6:
    v16 = v15;
    swift_bridgeObjectRelease();
    v17 = v16;
    v18 = swift_bridgeObjectRetain();
    v19 = specialized Sequence.first(where:)(v18, v17);
    swift_bridgeObjectRelease();

    if (v19)
    {
      v46 = v8;
      v20 = (unint64_t)objc_msgSend(v19, sel_userVisibleSectionName);
      v45[1] = v4;
      if (v20)
      {
        v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v23 = v22;

        v48 = v21;
        v49 = v23;
        static CharacterSet.whitespaces.getter();
        lazy protocol witness table accessor for type String and conformance String();
        v24 = StringProtocol.trimmingCharacters(in:)();
        v20 = v25;
        (*(void (**)(char *, uint64_t))(v47 + 8))(v11, v46);
        swift_bridgeObjectRelease();
        v26 = HIBYTE(v20) & 0xF;
        if ((v20 & 0x2000000000000000) == 0)
          v26 = v24 & 0xFFFFFFFFFFFFLL;
        if (!v26)
        {
          swift_bridgeObjectRelease();
          v24 = 0;
          v20 = 0;
        }
      }
      else
      {
        v24 = 0;
      }
      v32 = (uint64_t)objc_msgSend(v19, sel_userVisibleFooter);
      if (v32)
      {
        v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v45[0] = v17;
        v34 = v33;
        v36 = v35;

        v48 = v34;
        v49 = v36;
        static CharacterSet.whitespaces.getter();
        lazy protocol witness table accessor for type String and conformance String();
        v32 = StringProtocol.trimmingCharacters(in:)();
        v38 = v37;
        (*(void (**)(char *, uint64_t))(v47 + 8))(v11, v46);
        swift_bridgeObjectRelease();

        v39 = HIBYTE(v38) & 0xF;
        if ((v38 & 0x2000000000000000) == 0)
          v39 = v32 & 0xFFFFFFFFFFFFLL;
        if (v39)
          goto LABEL_22;
        swift_bridgeObjectRelease();
        v32 = 0;
      }
      else
      {

      }
      v38 = 0;
LABEL_22:
      a2 = v50;
LABEL_28:
      *a3 = v24;
      a3[1] = v20;
      a3[2] = v32;
      a3[3] = v38;
      a3[4] = (uint64_t)a2;
      a3[5] = v12;
      v44 = a2;
      return swift_bridgeObjectRetain();
    }
    v48 = 0;
    v49 = 0xE000000000000000;
    _StringGuts.grow(_:)(36);
    swift_bridgeObjectRelease();
    v48 = 0xD000000000000022;
    v49 = 0x800000023757CA90;
    v27 = objc_msgSend(v17, sel_sectionIdentifier);
    if (v27)
    {
      v28 = v27;
      v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v31 = v30;

    }
    else
    {
      v31 = (void *)0xE600000000000000;
      v29 = 0x29656E6F6E28;
    }
    a2 = v50;
    v40._countAndFlagsBits = v29;
    v40._object = v31;
    String.append(_:)(v40);
    swift_bridgeObjectRelease();
    v41 = v48;
    v42 = v49;
    v43 = static os_log_type_t.debug.getter();
    specialized static CAFUILogger.log(_:message:function:file:line:)(v43, v41, v42, 0xD00000000000001CLL, 0x800000023757CAC0);
    swift_bridgeObjectRelease();

LABEL_27:
    v32 = 0;
    v38 = 0;
    v24 = 0;
    v20 = 0;
    goto LABEL_28;
  }
  __break(1u);
  return result;
}

uint64_t CAFAutomakerSettings.allSettings.getter()
{
  void *v0;
  void *v1;
  id v2;
  void *v3;
  unint64_t v4;
  unint64_t v5;
  id v6;
  void *v7;
  unint64_t v8;
  unint64_t v9;
  id v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  id v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  id v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  id v22;
  void *v23;
  unint64_t v24;
  unint64_t v25;
  id v26;
  void *v27;
  unint64_t v28;
  unint64_t v29;
  id v30;
  void *v31;
  unint64_t v32;
  unint64_t v33;
  id v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  id v38;
  void *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v43;

  v1 = v0;
  v43 = MEMORY[0x24BEE4AF8];
  v2 = objc_msgSend(v0, sel_BOOLeanSettings);
  if (v2)
  {
    v3 = v2;
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CAFBooleanSetting);
    v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v4 >> 62)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
      swift_bridgeObjectRetain();
      v5 = _bridgeCocoaArray<A>(_:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
      v5 = v4;
    }
    swift_bridgeObjectRelease();
    specialized Array.append<A>(contentsOf:)(v5);
  }
  v6 = objc_msgSend(v1, sel_buttonSettings);
  if (v6)
  {
    v7 = v6;
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CAFButtonSetting);
    v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v8 >> 62)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
      swift_bridgeObjectRetain();
      v9 = _bridgeCocoaArray<A>(_:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
      v9 = v8;
    }
    swift_bridgeObjectRelease();
    specialized Array.append<A>(contentsOf:)(v9);
  }
  v10 = objc_msgSend(v1, sel_deepLinkSettings);
  if (v10)
  {
    v11 = v10;
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CAFDeepLinkSetting);
    v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v12 >> 62)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
      swift_bridgeObjectRetain();
      v13 = _bridgeCocoaArray<A>(_:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
      v13 = v12;
    }
    swift_bridgeObjectRelease();
    specialized Array.append<A>(contentsOf:)(v13);
  }
  v14 = objc_msgSend(v1, sel_floatSettings);
  if (v14)
  {
    v15 = v14;
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CAFFloatSetting);
    v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v16 >> 62)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
      swift_bridgeObjectRetain();
      v17 = _bridgeCocoaArray<A>(_:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
      v17 = v16;
    }
    swift_bridgeObjectRelease();
    specialized Array.append<A>(contentsOf:)(v17);
  }
  v18 = objc_msgSend(v1, sel_integerSettings);
  if (v18)
  {
    v19 = v18;
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CAFIntegerSetting);
    v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v20 >> 62)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
      swift_bridgeObjectRetain();
      v21 = _bridgeCocoaArray<A>(_:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
      v21 = v20;
    }
    swift_bridgeObjectRelease();
    specialized Array.append<A>(contentsOf:)(v21);
  }
  v22 = objc_msgSend(v1, sel_multipleSelectSettings);
  if (v22)
  {
    v23 = v22;
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CAFMultipleSelectSetting);
    v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v24 >> 62)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
      swift_bridgeObjectRetain();
      v25 = _bridgeCocoaArray<A>(_:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
      v25 = v24;
    }
    swift_bridgeObjectRelease();
    specialized Array.append<A>(contentsOf:)(v25);
  }
  v26 = objc_msgSend(v1, sel_multipleSelectImageSettings);
  if (v26)
  {
    v27 = v26;
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CAFMultipleSelectImageSetting);
    v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v28 >> 62)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
      swift_bridgeObjectRetain();
      v29 = _bridgeCocoaArray<A>(_:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
      v29 = v28;
    }
    swift_bridgeObjectRelease();
    specialized Array.append<A>(contentsOf:)(v29);
  }
  v30 = objc_msgSend(v1, sel_singleSelectSettings);
  if (v30)
  {
    v31 = v30;
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CAFSingleSelectSetting);
    v32 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v32 >> 62)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
      swift_bridgeObjectRetain();
      v33 = _bridgeCocoaArray<A>(_:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
      v33 = v32;
    }
    swift_bridgeObjectRelease();
    specialized Array.append<A>(contentsOf:)(v33);
  }
  v34 = objc_msgSend(v1, sel_singleSelectImageSettings);
  if (v34)
  {
    v35 = v34;
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CAFSingleSelectImageSetting);
    v36 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v36 >> 62)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
      swift_bridgeObjectRetain();
      v37 = _bridgeCocoaArray<A>(_:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
      v37 = v36;
    }
    swift_bridgeObjectRelease();
    specialized Array.append<A>(contentsOf:)(v37);
  }
  v38 = objc_msgSend(v1, sel_staticSettings);
  if (v38)
  {
    v39 = v38;
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CAFStaticSetting);
    v40 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v40 >> 62)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
      swift_bridgeObjectRetain();
      v41 = _bridgeCocoaArray<A>(_:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
      v41 = v40;
    }
    swift_bridgeObjectRelease();
    specialized Array.append<A>(contentsOf:)(v41);
  }
  return v43;
}

id CAFAutomakerSetting.isDisabled.getter()
{
  return CAFAutomakerSetting.isHidden.getter((SEL *)&selRef_hasDisabled, (SEL *)&selRef_disabled);
}

id CAFAutomakerSetting.isHidden.getter(SEL *a1, SEL *a2)
{
  void *v2;
  id result;

  result = objc_msgSend(v2, *a1);
  if ((_DWORD)result)
    return objc_msgSend(v2, *a2);
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(void **__src, id *a2, unint64_t a3, void **__dst)
{
  void **v4;
  unint64_t v5;
  id *v6;
  void **v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  SEL *v15;
  void *v16;
  void **v17;
  id v18;
  id v19;
  unsigned int v20;
  void **v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  id *v42;
  char v43;
  char v44;
  void **v45;
  id *v46;
  id *v47;
  id *v48;
  void *v49;
  void **v50;
  void *v51;
  void *v52;
  id v53;
  id v54;
  unsigned int v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  char v74;
  char v75;
  uint64_t result;
  void **v77;
  void **v78;
  id v79;
  void **v80;
  void **v81;
  unint64_t v82;
  id *v83;
  id *v84;
  void **v85;
  void **v86;
  id *v87;

  v4 = __dst;
  v5 = a3;
  v6 = a2;
  v7 = __src;
  v8 = (char *)a2 - (char *)__src;
  v9 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0)
    v9 = (char *)a2 - (char *)__src;
  v10 = v9 >> 3;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 3;
  v87 = __src;
  v86 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 < -7)
      goto LABEL_68;
    if (__dst != a2 || &a2[v13] <= __dst)
      memmove(__dst, a2, 8 * v13);
    v45 = &v4[v13];
    v85 = v45;
    v87 = v6;
    if (v7 >= v6 || v11 < 8)
    {
LABEL_67:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v87, &v86, &v85);
      return 1;
    }
    v46 = (id *)(v5 - 8);
    v47 = v6;
    v77 = v7;
    v78 = v4;
    while (1)
    {
      v48 = v46 + 1;
      v50 = v45 - 1;
      v49 = *(v45 - 1);
      v52 = *--v47;
      v51 = v52;
      if (v49 == v52)
        goto LABEL_57;
      v81 = v45;
      v84 = v6;
      v53 = v49;
      v54 = v51;
      v55 = objc_msgSend(v53, sel_sortOrder);
      if (v55 == objc_msgSend(v54, sel_sortOrder))
      {
        v79 = v53;
        v56 = objc_msgSend(v53, sel_userVisibleLabel);
        v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v59 = v58;

        v60 = objc_msgSend(v54, sel_userVisibleLabel);
        v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v63 = v62;

        if (v57 == v61 && v59 == v63 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v64 = objc_msgSend(v79, sel_identifier);
          v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v67 = v66;

          v68 = objc_msgSend(v54, sel_identifier);
          v69 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v71 = v70;

          if (v65 == v69 && v67 == v71)
          {

            swift_bridgeObjectRelease_n();
            v7 = v77;
            v4 = v78;
            v48 = v46 + 1;
            v6 = v84;
            v45 = v81;
LABEL_57:
            v85 = v50;
            if (v48 < v45 || v46 >= v45 || v48 != v45)
              *v46 = *v50;
            v47 = v6;
            v45 = v50;
            if (v6 <= v7)
              goto LABEL_67;
            goto LABEL_62;
          }
          v74 = _stringCompareWithSmolCheck(_:_:expecting:)();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v7 = v77;
          v4 = v78;
          v48 = v46 + 1;
          v6 = v84;
          v45 = v81;
          if ((v74 & 1) == 0)
            goto LABEL_57;
        }
        else
        {
          v75 = _stringCompareWithSmolCheck(_:_:expecting:)();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v7 = v77;
          v4 = v78;
          v48 = v46 + 1;
          v6 = v84;
          v45 = v81;
          if ((v75 & 1) == 0)
            goto LABEL_57;
        }
      }
      else
      {
        v72 = objc_msgSend(v53, sel_sortOrder);
        v73 = objc_msgSend(v54, sel_sortOrder);

        v48 = v46 + 1;
        v6 = v84;
        v45 = v81;
        if (v72 >= v73)
          goto LABEL_57;
      }
      if (v48 != v6 || v46 >= v6)
        *v46 = *v47;
      v87 = v47;
      if (v47 <= v7)
        goto LABEL_67;
LABEL_62:
      --v46;
      v6 = v47;
      if (v45 <= v4)
        goto LABEL_67;
    }
  }
  if (v8 >= -7)
  {
    if (__dst != __src || &__src[v10] <= __dst)
      memmove(__dst, __src, 8 * v10);
    v14 = &v4[v10];
    v85 = v14;
    if ((unint64_t)v6 < v5 && v8 >= 8)
    {
      v15 = (SEL *)&unk_2508DF000;
      v80 = &v4[v10];
      v82 = v5;
      while (1)
      {
        v16 = *v4;
        if (*v6 != *v4)
        {
          v83 = v6;
          v17 = v7;
          v18 = *v6;
          v19 = v16;
          v20 = objc_msgSend(v18, v15[381]);
          if (v20 == objc_msgSend(v19, v15[381]))
          {
            v21 = v4;
            v22 = objc_msgSend(v18, sel_userVisibleLabel);
            v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            v25 = v24;

            v26 = v23;
            v27 = objc_msgSend(v19, sel_userVisibleLabel);
            v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            v30 = v29;

            if (v26 == v28 && v25 == v30 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v31 = objc_msgSend(v18, sel_identifier);
              v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              v34 = v33;

              v35 = v34;
              v36 = objc_msgSend(v19, sel_identifier);
              v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              v39 = v38;

              if (v32 == v37 && v35 == v39)
              {

                swift_bridgeObjectRelease_n();
                v4 = v21;
                v7 = v17;
                v5 = v82;
                v6 = v83;
                v14 = v80;
                v15 = (SEL *)&unk_2508DF000;
              }
              else
              {
                v43 = _stringCompareWithSmolCheck(_:_:expecting:)();

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v4 = v21;
                v7 = v17;
                v5 = v82;
                v6 = v83;
                v14 = v80;
                v15 = (SEL *)&unk_2508DF000;
                if ((v43 & 1) != 0)
                  goto LABEL_22;
              }
            }
            else
            {
              v4 = v21;
              v44 = _stringCompareWithSmolCheck(_:_:expecting:)();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v7 = v17;
              v5 = v82;
              v6 = v83;
              v14 = v80;
              v15 = (SEL *)&unk_2508DF000;
              if ((v44 & 1) != 0)
              {
LABEL_22:
                v42 = v6 + 1;
                if (v7 < v6 || v7 >= v42 || v7 != v6)
                  *v7 = *v6;
                goto LABEL_30;
              }
            }
          }
          else
          {
            v40 = objc_msgSend(v18, v15[381]);
            v41 = objc_msgSend(v19, v15[381]);

            v7 = v17;
            v6 = v83;
            if (v40 < v41)
              goto LABEL_22;
          }
        }
        if (v7 != v4)
          *v7 = *v4;
        v86 = ++v4;
        v42 = v6;
LABEL_30:
        ++v7;
        if (v4 < v14)
        {
          v6 = v42;
          if ((unint64_t)v42 < v5)
            continue;
        }
        v87 = v7;
        goto LABEL_67;
      }
    }
    goto LABEL_67;
  }
LABEL_68:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(uint64_t *a1, uint64_t *__src, unint64_t a3, unint64_t *__dst, uint64_t a5)
{
  uint64_t v5;
  unint64_t *v6;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  uint64_t *v16;
  unint64_t *v17;
  char v18;
  char v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  char v30;
  char v31;
  uint64_t *v32;
  uint64_t result;
  unint64_t *v34;
  uint64_t *__srca;
  unint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t *v40;
  uint64_t *v41;

  v6 = __dst;
  v8 = __src;
  v9 = (char *)__src - (char *)a1;
  v10 = (char *)__src - (char *)a1 + 7;
  if ((char *)__src - (char *)a1 >= 0)
    v10 = (char *)__src - (char *)a1;
  v11 = v10 >> 3;
  v12 = a3 - (_QWORD)__src;
  v13 = a3 - (_QWORD)__src + 7;
  if ((uint64_t)(a3 - (_QWORD)__src) >= 0)
    v13 = a3 - (_QWORD)__src;
  v14 = v13 >> 3;
  v41 = a1;
  v40 = __dst;
  __srca = a1;
  if (v11 >= v13 >> 3)
  {
    if (v12 >= -7)
    {
      v22 = v5;
      if (__dst != (unint64_t *)__src || &__src[v14] <= (uint64_t *)__dst)
      {
        memmove(__dst, __src, 8 * v14);
        a1 = __srca;
      }
      v23 = &v6[v14];
      v39 = v23;
      v41 = v8;
      if (a1 >= v8 || v12 < 8)
        goto LABEL_48;
      v24 = (uint64_t *)(a3 - 8);
      v25 = v8;
      v34 = v6;
      while (1)
      {
        v27 = (unint64_t)v23;
        v28 = v23 - 1;
        v38 = *(v23 - 1);
        v29 = *--v25;
        v37 = v29;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v30 = closure #3 in CAFUISettingsCache.sections(for:parentSetting:)(&v38, &v37, a5);
        if (v22)
          goto LABEL_47;
        v31 = v30;
        v32 = v24 + 1;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v31 & 1) != 0)
        {
          if (v32 != v8 || v24 >= v8)
            *v24 = *v25;
          v41 = v25;
          v22 = 0;
          v26 = v34;
          v23 = (unint64_t *)v27;
          if (v25 <= __srca)
            goto LABEL_48;
        }
        else
        {
          v39 = v28;
          if ((unint64_t)v32 < v27 || (unint64_t)v24 >= v27 || v32 != (uint64_t *)v27)
            *v24 = *v28;
          v25 = v8;
          v23 = v28;
          v22 = 0;
          v26 = v34;
          if (v8 <= __srca)
            goto LABEL_48;
        }
        --v24;
        v8 = v25;
        if (v23 <= v26)
          goto LABEL_48;
      }
    }
  }
  else if (v9 >= -7)
  {
    if (__dst != (unint64_t *)a1 || &a1[v11] <= (uint64_t *)__dst)
    {
      memmove(__dst, a1, 8 * v11);
      a1 = __srca;
    }
    v15 = &v6[v11];
    v39 = v15;
    if ((unint64_t)v8 >= a3 || v9 < 8)
      goto LABEL_48;
    while (1)
    {
      v16 = a1;
      v38 = *v8;
      v17 = v6;
      v37 = *v6;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v18 = closure #3 in CAFUISettingsCache.sections(for:parentSetting:)(&v38, &v37, a5);
      if (v5)
        break;
      v19 = v18;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v19 & 1) != 0)
      {
        v20 = v8 + 1;
        v21 = v16;
        if (v16 < v8 || v16 >= v20 || v16 != v8)
          *v16 = *v8;
        v6 = v17;
      }
      else
      {
        v21 = v16;
        if (v16 != (uint64_t *)v17)
          *v16 = *v17;
        v6 = v17 + 1;
        v40 = v17 + 1;
        v20 = v8;
      }
      a1 = v21 + 1;
      v41 = a1;
      if (v6 < v15)
      {
        v8 = v20;
        if ((unint64_t)v20 < a3)
          continue;
      }
      goto LABEL_48;
    }
LABEL_47:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_48:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v41, (const void **)&v40, &v39);
    outlined release of CAFUISettingsCache(a5);
    return 1;
  }
  outlined release of CAFUISettingsCache(a5);
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;

  Hasher.init(_seed:)();
  String.hash(into:)();
  v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      outlined init with copy of AnyHashable(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = MEMORY[0x23B8133A0](v9, a1);
      outlined destroy of AnyHashable((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

void *specialized _NativeDictionary.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [CAFAutomakerSetting]>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id specialized _NativeDictionary.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, CAFAutomakerSetting>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(void **)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = v20;
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [CAFAutomakerSetting]>);
  v36 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v34)
        goto LABEL_33;
      v23 = *(_QWORD *)(v35 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v34)
              goto LABEL_33;
            v23 = *(_QWORD *)(v35 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v22 = (_QWORD *)(v5 + 64);
  if ((v36 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, CAFAutomakerSetting>);
  v38 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v35 = v2;
  v36 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v36)
        goto LABEL_33;
      v23 = *(_QWORD *)(v37 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v36)
              goto LABEL_33;
            v23 = *(_QWORD *)(v37 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      v33 = v32;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v22 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v9 = Hasher._finalize()();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_OWORD *)(v11 + 16 * v3);
          v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_QWORD *)(v14 + 8 * v3);
          v16 = (_QWORD *)(v14 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A](void (**a1)(id *a1), unint64_t a2, uint64_t a3))()
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for CAFUIImageRepresentable.selectedIndices.modify in conformance CAFMultipleSelectImageSetting;
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A](uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for CAFUIImageRepresentable.selectedIndices.modify in conformance CAFMultipleSelectImageSetting;
}

void (*specialized Array.subscript.read(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)MEMORY[0x23B813418](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

void Array.subscript.readspecialized (id *a1)
{

}

uint64_t (*specialized Array.subscript.read(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t (*v3)();
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)MEMORY[0x23B813418](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

uint64_t specialized Dictionary.startIndex.getter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v10 = 0;
  while (1)
  {
    if (v7)
    {
      v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v12 = v11 | (v10 << 6);
      goto LABEL_5;
    }
    v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v17 >= v8)
      return swift_release();
    v18 = *(_QWORD *)(v4 + 8 * v17);
    ++v10;
    if (!v18)
    {
      v10 = v17 + 1;
      if (v17 + 1 >= v8)
        return swift_release();
      v18 = *(_QWORD *)(v4 + 8 * v10);
      if (!v18)
      {
        v10 = v17 + 2;
        if (v17 + 2 >= v8)
          return swift_release();
        v18 = *(_QWORD *)(v4 + 8 * v10);
        if (!v18)
        {
          v10 = v17 + 3;
          if (v17 + 3 >= v8)
            return swift_release();
          v18 = *(_QWORD *)(v4 + 8 * v10);
          if (!v18)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v18 - 1) & v18;
    v12 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_5:
    v13 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v12);
    v14 = *v13;
    v15 = v13[1];
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v12);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a2(v14, v15, v16);
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
  }
  v19 = v17 + 4;
  if (v19 >= v8)
    return swift_release();
  v18 = *(_QWORD *)(v4 + 8 * v19);
  if (v18)
  {
    v10 = v19;
    goto LABEL_22;
  }
  while (1)
  {
    v10 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v10 >= v8)
      return swift_release();
    v18 = *(_QWORD *)(v4 + 8 * v10);
    ++v19;
    if (v18)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v10 = 0;
  while (1)
  {
    if (v7)
    {
      v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v12 = v11 | (v10 << 6);
      goto LABEL_5;
    }
    v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v17 >= v8)
      return swift_release();
    v18 = *(_QWORD *)(v4 + 8 * v17);
    ++v10;
    if (!v18)
    {
      v10 = v17 + 1;
      if (v17 + 1 >= v8)
        return swift_release();
      v18 = *(_QWORD *)(v4 + 8 * v10);
      if (!v18)
      {
        v10 = v17 + 2;
        if (v17 + 2 >= v8)
          return swift_release();
        v18 = *(_QWORD *)(v4 + 8 * v10);
        if (!v18)
        {
          v10 = v17 + 3;
          if (v17 + 3 >= v8)
            return swift_release();
          v18 = *(_QWORD *)(v4 + 8 * v10);
          if (!v18)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v18 - 1) & v18;
    v12 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_5:
    v13 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v12);
    v14 = *v13;
    v15 = v13[1];
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v12);
    swift_bridgeObjectRetain();
    a2(v14, v15, v16);
    result = swift_bridgeObjectRelease();
  }
  v19 = v17 + 4;
  if (v19 >= v8)
    return swift_release();
  v18 = *(_QWORD *)(v4 + 8 * v19);
  if (v18)
  {
    v10 = v19;
    goto LABEL_22;
  }
  while (1)
  {
    v10 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v10 >= v8)
      return swift_release();
    v18 = *(_QWORD *)(v4 + 8 * v10);
    ++v19;
    if (v18)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  id v11;
  uint64_t v12;
  uint64_t v13;

  result = MEMORY[0x24BEE4AF8];
  v13 = MEMORY[0x24BEE4AF8];
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    v6 = (uint64_t *)(a1 + 40);
    do
    {
      if (*(_QWORD *)(a2 + 16))
      {
        v7 = *(v6 - 1);
        v8 = *v6;
        swift_bridgeObjectRetain_n();
        v9 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8);
        if ((v10 & 1) != 0)
        {
          v11 = *(id *)(*(_QWORD *)(a2 + 56) + 8 * v9);
          v12 = swift_bridgeObjectRelease_n();
          MEMORY[0x23B81301C](v12);
          if (*(_QWORD *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }
      }
      v6 += 2;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    return v13;
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo16CAFStaticSettingCG_SS_SaySo012CAFAutomakerE0CGts5NeverOTg5056_s5CAFUI18CAFUISettingsCacheV8settings8sectionsACSaySo19fe46CG_SaySo18CAFSettingsSectionCGSgtcfcSS_AHtSo09D9G0CXEfU3_SDySSAJGTf1cn_nTf4ng_n(unint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v3 = a1;
  if (a1 >> 62)
    goto LABEL_18;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v5 = MEMORY[0x24BEE4AF8];
    if (!v4)
      return v5;
    v23 = MEMORY[0x24BEE4AF8];
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 & ~(v4 >> 63), 0);
    if (v4 < 0)
      break;
    v22 = v3;
    v7 = 0;
    v5 = v23;
    v21 = v3 & 0xC000000000000001;
    while (v4 != v7)
    {
      if (v21)
        v8 = (id)MEMORY[0x23B813418](v7, v3);
      else
        v8 = *(id *)(v3 + 8 * v7 + 32);
      v9 = v8;
      v10 = objc_msgSend(v8, sel_identifier);
      v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v13 = v12;

      v14 = objc_msgSend(v9, sel_childrenSettingsIdentifiers);
      if (v14)
      {
        v15 = v14;
        v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        swift_bridgeObjectRetain();
        v17 = specialized Sequence.compactMap<A>(_:)(v16, a2);

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {

        v17 = MEMORY[0x24BEE4AF8];
      }
      v19 = *(_QWORD *)(v23 + 16);
      v18 = *(_QWORD *)(v23 + 24);
      if (v19 >= v18 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
      ++v7;
      *(_QWORD *)(v23 + 16) = v19 + 1;
      v20 = (_QWORD *)(v23 + 24 * v19);
      v20[4] = v11;
      v20[5] = v13;
      v20[6] = v17;
      v3 = v22;
      if (v4 == v7)
        return v5;
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySaySo19CAFAutomakerSettingCGG_5CAFUI29CAFUIAutomakerSettingsSectionVs5NeverOTg5087_s5CAFUI18CAFUISettingsCacheV8sections33_C136C7576C945FF13298128793D0FFCELL3for13parente7SayAA29ghi10VGSaySo012D20M0CG_ALSgtFAiMXEfU2_AJ0mN0VAGSgTf1cn_nTf4ngg_n(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t *i;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v17;
  __int128 v18;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = v3;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = MEMORY[0x24BEE4AF8];
  if (v5)
  {
    v25 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    v6 = v25;
    for (i = (uint64_t *)(a1 + 32); ; ++i)
    {
      v20 = *i;
      swift_bridgeObjectRetain();
      closure #4 in CAFUISettingsCache.sections(for:parentSetting:)(&v20, a3, (uint64_t *)&v21);
      if (v4)
        break;
      v4 = 0;
      swift_bridgeObjectRelease();
      v9 = v21;
      v10 = v22;
      v12 = v23;
      v11 = v24;
      v25 = v6;
      v14 = *(_QWORD *)(v6 + 16);
      v13 = *(_QWORD *)(v6 + 24);
      if (v14 >= v13 >> 1)
      {
        v17 = v22;
        v18 = v21;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        v10 = v17;
        v9 = v18;
        v6 = v25;
      }
      *(_QWORD *)(v6 + 16) = v14 + 1;
      v15 = v6 + 48 * v14;
      *(_OWORD *)(v15 + 32) = v9;
      *(_OWORD *)(v15 + 48) = v10;
      *(_QWORD *)(v15 + 64) = v12;
      *(_QWORD *)(v15 + 72) = v11;
      if (!--v5)
        return v6;
    }
    swift_release();
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;

  if (a3 != a2)
  {
    v7 = a3;
    v8 = result;
    v9 = *a4;
    v10 = (unint64_t *)(*a4 + 8 * a3 - 8);
    v14 = result;
LABEL_4:
    v11 = *(_QWORD *)(v9 + 8 * v7);
    v16 = v10;
    while (1)
    {
      v18 = v11;
      v17 = *v10;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v12 = closure #3 in CAFUISettingsCache.sections(for:parentSetting:)(&v18, &v17, a5);
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      if (v5)
        break;
      if ((v12 & 1) != 0)
      {
        if (!v9)
        {
          __break(1u);
          return result;
        }
        v13 = *v10;
        v11 = v10[1];
        *v10 = v11;
        v10[1] = v13;
        --v10;
        if (v7 != ++v8)
          continue;
      }
      ++v7;
      v10 = v16 + 1;
      v8 = v14;
      if (v7 != a2)
        goto LABEL_4;
      return result;
    }
  }
  return result;
}

uint64_t specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  Swift::Int v4;
  Swift::Int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  char *v12;
  Swift::Int v13;
  Swift::Int v14;
  uint64_t v15;
  Swift::Int v16;
  int v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  Swift::Int v22;
  uint64_t *v23;
  Swift::Int v24;
  uint64_t *v25;
  uint64_t v26;
  Swift::Int v27;
  Swift::Int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  char v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  Swift::Int v83;
  unint64_t v84;
  Swift::Int v85;
  uint64_t v86;
  id v87;
  uint64_t v88;
  id v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  id v93;
  uint64_t v94;
  id v95;
  void *v96;
  uint64_t v97;
  id v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  id v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  void *v109;
  Swift::Int v110;
  uint64_t v111;
  id v112;
  uint64_t v113;
  id v114;
  uint64_t v115;
  BOOL v116;
  id v117;
  void *v118;
  uint64_t v119;
  id v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  id v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  id v130;
  id v131;
  id v132;
  unsigned int v133;
  id v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  id v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int v142;
  unsigned int v143;
  char v144;
  id v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  id v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  unint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t *v159;
  unint64_t v160;
  char *v161;
  char *v162;
  char *v163;
  unint64_t v164;
  uint64_t result;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  Swift::Int v169;
  uint64_t v170;
  Swift::Int v171;
  Swift::Int v173;
  Swift::Int v174;
  unint64_t *__dst;
  Swift::Int v176;
  char *v177;
  char *v178;
  uint64_t v179;
  Swift::Int v180;
  uint64_t v181;
  uint64_t v182;
  Swift::Int v183;
  Swift::Int v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  void *v189;
  void *v190;
  unint64_t v191;
  void *v192;
  uint64_t v193;
  uint64_t *v194;
  void *v195;
  uint64_t *v196;
  unint64_t v197;
  uint64_t v198[2];
  unint64_t v199;

  v3 = a2;
  v4 = a1[1];
  outlined retain of CAFUISettingsCache(a2);
  outlined retain of CAFUISettingsCache(v3);
  v182 = v3;
  outlined retain of CAFUISettingsCache(v3);
  v5 = _minimumMergeRunLength(_:)(v4);
  if (v5 >= v4)
  {
    if (v4 < 0)
      goto LABEL_220;
    if (v4)
    {
      outlined retain of CAFUISettingsCache(v3);
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v4, 1, a1, v3);
      outlined release of CAFUISettingsCache(v3);
    }
    else
    {
LABEL_193:
      v3 = v182;
    }
    outlined release of CAFUISettingsCache(v3);
    outlined release of CAFUISettingsCache(v3);
    return outlined release of CAFUISettingsCache(v3);
  }
  v169 = v5;
  if (v4 >= 0)
    v6 = v4;
  else
    v6 = v4 + 1;
  if (v4 < -1)
    goto LABEL_229;
  v179 = v2;
  if (v4 < 2)
  {
    __dst = (unint64_t *)(MEMORY[0x24BEE4AF8] + 32);
    v170 = MEMORY[0x24BEE4AF8];
    if (v4 == 1)
      goto LABEL_12;
    v31 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    v12 = (char *)MEMORY[0x24BEE4AF8];
    v9 = v3;
LABEL_179:
    if (v31 >= 2)
    {
      v154 = *a1;
      v193 = *a1;
      do
      {
        v155 = v31 - 2;
        if (v31 < 2)
          goto LABEL_215;
        if (!v154)
          goto LABEL_228;
        v156 = v12;
        v157 = *(_QWORD *)&v12[16 * v155 + 32];
        v158 = *(_QWORD *)&v12[16 * v31 + 24];
        v196 = (uint64_t *)(v154 + 8 * v157);
        v159 = (uint64_t *)(v154 + 8 * *(_QWORD *)&v12[16 * v31 + 16]);
        v160 = v154 + 8 * v158;
        outlined retain of CAFUISettingsCache(v182);
        specialized _merge<A>(low:mid:high:buffer:by:)(v196, v159, v160, __dst, v182);
        if (v179)
          goto LABEL_192;
        if (v158 < v157)
          goto LABEL_216;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v156 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v156);
        if (v155 >= *((_QWORD *)v156 + 2))
          goto LABEL_217;
        v161 = v156 + 32;
        v162 = v156;
        v163 = &v156[16 * v155 + 32];
        *(_QWORD *)v163 = v157;
        *((_QWORD *)v163 + 1) = v158;
        v164 = *((_QWORD *)v156 + 2);
        if (v31 > v164)
          goto LABEL_218;
        memmove(&v161[16 * v31 - 16], &v161[16 * v31], 16 * (v164 - v31));
        v12 = v162;
        *((_QWORD *)v162 + 2) = v164 - 1;
        v31 = v164 - 1;
        v9 = v182;
        v154 = v193;
      }
      while (v164 > 2);
    }
    v3 = v9;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v170 + 16) = 0;
    swift_bridgeObjectRelease();
    outlined release of CAFUISettingsCache(v9);
    outlined release of CAFUISettingsCache(v9);
    return outlined release of CAFUISettingsCache(v3);
  }
  v7 = v6 >> 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CAFAutomakerSetting]);
  v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(v8 + 16) = v7;
  v170 = v8;
  __dst = (unint64_t *)(v8 + 32);
LABEL_12:
  v9 = v182;
  v10 = 0;
  v11 = *a1;
  v167 = *a1 - 8;
  v168 = *a1 + 16;
  v12 = (char *)MEMORY[0x24BEE4AF8];
  v176 = v4;
  v181 = *a1;
  while (1)
  {
    v177 = v12;
    v13 = v10;
    v14 = v10 + 1;
    v180 = v10;
    if (v10 + 1 < v4)
    {
      v15 = *(_QWORD *)(v11 + 8 * v14);
      v197 = *(_QWORD *)(v11 + 8 * v10);
      v198[0] = v15;
      v16 = v10;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v17 = closure #3 in CAFUISettingsCache.sections(for:parentSetting:)(v198, &v197, v9);
      if (v179)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_192:
        swift_bridgeObjectRelease();
        *(_QWORD *)(v170 + 16) = 0;
        swift_bridgeObjectRelease();
        goto LABEL_193;
      }
      v18 = v17;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = v16 + 2;
      v4 = v176;
      v13 = v16;
      if (v16 + 2 < v176)
      {
        v19 = (uint64_t *)(v168 + 8 * v16);
        while (1)
        {
          v20 = *v19;
          v197 = *(v19 - 1);
          v198[0] = v20;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v21 = closure #3 in CAFUISettingsCache.sections(for:parentSetting:)(v198, &v197, v182);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (((v18 ^ v21) & 1) != 0)
            break;
          ++v14;
          ++v19;
          v4 = v176;
          if (v176 == v14)
          {
            v14 = v176;
            goto LABEL_21;
          }
        }
        v4 = v176;
LABEL_21:
        v13 = v180;
      }
      v11 = v181;
      if ((v18 & 1) != 0)
      {
        if (v14 < v13)
          goto LABEL_224;
        v22 = v14;
        if (v13 < v14)
        {
          v23 = (uint64_t *)(v167 + 8 * v14);
          v24 = v13;
          v25 = (uint64_t *)(v181 + 8 * v13);
          do
          {
            if (v24 != --v22)
            {
              if (!v181)
                goto LABEL_227;
              v26 = *v25;
              *v25 = *v23;
              *v23 = v26;
            }
            ++v24;
            --v23;
            ++v25;
          }
          while (v24 < v22);
        }
      }
    }
    v27 = v14;
    if (v14 >= v4)
      goto LABEL_42;
    if (__OFSUB__(v14, v13))
      goto LABEL_221;
    if (v14 - v13 >= v169)
    {
      v27 = v14;
LABEL_42:
      if (v27 < v13)
        goto LABEL_219;
      goto LABEL_43;
    }
    if (__OFADD__(v13, v169))
      goto LABEL_222;
    v28 = v13 + v169 >= v4 ? v4 : v13 + v169;
    if (v28 < v13)
      break;
    v27 = v14;
    v171 = v28;
    if (v14 == v28)
      goto LABEL_42;
    while (2)
    {
      v84 = *(_QWORD *)(v11 + 8 * v27);
      v174 = v27;
      do
      {
        v184 = v27;
        v85 = v27 - 1;
        v185 = *(_QWORD *)(v11 + 8 * (v27 - 1));
        v186 = v84;
        if (v84 >> 62)
        {
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          v183 = v85;
          if (!_CocoaArrayWrapper.endIndex.getter())
          {
LABEL_122:
            swift_bridgeObjectRelease();
            goto LABEL_126;
          }
        }
        else
        {
          v86 = *(_QWORD *)((v84 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          v183 = v85;
          if (!v86)
            goto LABEL_122;
        }
        if ((v186 & 0xC000000000000001) != 0)
        {
          v87 = (id)MEMORY[0x23B813418](0, v186);
        }
        else
        {
          if (!*(_QWORD *)((v186 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_198;
          v87 = *(id *)(v186 + 32);
        }
        v195 = v87;
        swift_bridgeObjectRelease();
        if (v185 >> 62)
        {
          swift_bridgeObjectRetain();
          if (!_CocoaArrayWrapper.endIndex.getter())
          {
LABEL_125:
            swift_bridgeObjectRelease();

LABEL_126:
            swift_bridgeObjectRelease_n();
LABEL_127:
            v83 = v180;
            v11 = v181;
            v110 = v184;
            goto LABEL_128;
          }
        }
        else
        {
          v88 = *(_QWORD *)((v185 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (!v88)
            goto LABEL_125;
        }
        if ((v185 & 0xC000000000000001) != 0)
        {
          v89 = (id)MEMORY[0x23B813418](0, v185);
        }
        else
        {
          if (!*(_QWORD *)((v185 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_199;
          v89 = *(id *)(v185 + 32);
        }
        v192 = v89;
        swift_bridgeObjectRelease();
        v90 = *(_QWORD *)(v182 + 48);
        v199 = v90;
        v91 = v90 >> 62;
        if (v90 >> 62)
        {
          swift_bridgeObjectRetain();
          outlined retain of [CAFSettingsSection]((uint64_t)&v199);
          v112 = v195;
          v92 = _CocoaArrayWrapper.endIndex.getter();
          if (!v92)
          {
LABEL_133:
            outlined release of [CAFSettingsSection]((uint64_t)&v199);

            v109 = 0;
            goto LABEL_134;
          }
        }
        else
        {
          v92 = *(_QWORD *)((v90 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          outlined retain of [CAFSettingsSection]((uint64_t)&v199);
          v93 = v195;
          if (!v92)
            goto LABEL_133;
        }
        v94 = 4;
        while (1)
        {
          if ((v90 & 0xC000000000000001) != 0)
            v95 = (id)MEMORY[0x23B813418](v94 - 4, v90);
          else
            v95 = *(id *)(v90 + 8 * v94);
          v96 = v95;
          v97 = v94 - 3;
          if (__OFADD__(v94 - 4, 1))
          {
            __break(1u);
LABEL_197:
            __break(1u);
LABEL_198:
            __break(1u);
LABEL_199:
            __break(1u);
LABEL_200:
            __break(1u);
LABEL_201:
            __break(1u);
LABEL_202:
            __break(1u);
LABEL_203:
            __break(1u);
LABEL_204:
            __break(1u);
LABEL_205:
            __break(1u);
LABEL_206:
            __break(1u);
LABEL_207:
            __break(1u);
LABEL_208:
            __break(1u);
LABEL_209:
            __break(1u);
LABEL_210:
            __break(1u);
LABEL_211:
            __break(1u);
LABEL_212:
            __break(1u);
LABEL_213:
            __break(1u);
LABEL_214:
            __break(1u);
LABEL_215:
            __break(1u);
LABEL_216:
            __break(1u);
LABEL_217:
            __break(1u);
LABEL_218:
            __break(1u);
LABEL_219:
            __break(1u);
LABEL_220:
            __break(1u);
LABEL_221:
            __break(1u);
LABEL_222:
            __break(1u);
            goto LABEL_223;
          }
          v98 = objc_msgSend(v95, sel_identifier);
          v99 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v101 = v100;

          v102 = objc_msgSend(v195, sel_sectionIdentifier);
          if (v102)
            break;

          swift_bridgeObjectRelease();
LABEL_108:
          ++v94;
          if (v97 == v92)
          {
            outlined release of [CAFSettingsSection]((uint64_t)&v199);

            v109 = 0;
            v91 = v90 >> 62;
            goto LABEL_134;
          }
        }
        v103 = v102;
        v189 = v96;
        v104 = v92;
        v105 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v107 = v106;

        if (v99 != v105 || v101 != v107)
        {
          v108 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v108 & 1) != 0)
            goto LABEL_120;

          v92 = v104;
          goto LABEL_108;
        }
        swift_bridgeObjectRelease_n();
LABEL_120:
        outlined release of [CAFSettingsSection]((uint64_t)&v199);

        v91 = v90 >> 62;
        v109 = v189;
LABEL_134:
        outlined release of [CAFSettingsSection]((uint64_t)&v199);
        if (!v91)
        {
          v113 = *(_QWORD *)((v90 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          outlined retain of [CAFSettingsSection]((uint64_t)&v199);
          v114 = v192;
          if (v113)
            goto LABEL_136;
LABEL_149:
          outlined release of [CAFSettingsSection]((uint64_t)&v199);

          v118 = 0;
          goto LABEL_154;
        }
        swift_bridgeObjectRetain();
        outlined retain of [CAFSettingsSection]((uint64_t)&v199);
        v130 = v192;
        v113 = _CocoaArrayWrapper.endIndex.getter();
        if (!v113)
          goto LABEL_149;
LABEL_136:
        v188 = v90 & 0xC000000000000001;
        v190 = v109;
        v115 = 4;
        v187 = v90;
        while (2)
        {
          if (v188)
            v117 = (id)MEMORY[0x23B813418](v115 - 4, v90);
          else
            v117 = *(id *)(v90 + 8 * v115);
          v118 = v117;
          v119 = v115 - 3;
          if (__OFADD__(v115 - 4, 1))
            goto LABEL_197;
          v120 = objc_msgSend(v117, sel_identifier);
          v121 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v123 = v122;

          v124 = objc_msgSend(v192, sel_sectionIdentifier);
          if (!v124)
          {

            swift_bridgeObjectRelease();
            goto LABEL_138;
          }
          v125 = v124;
          v126 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v128 = v127;

          if (v121 != v126 || v123 != v128)
          {
            v129 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v129 & 1) != 0)
              goto LABEL_152;

LABEL_138:
            ++v115;
            v116 = v119 == v113;
            v90 = v187;
            if (v116)
            {
              outlined release of [CAFSettingsSection]((uint64_t)&v199);

              v118 = 0;
              goto LABEL_153;
            }
            continue;
          }
          break;
        }
        swift_bridgeObjectRelease_n();
LABEL_152:
        outlined release of [CAFSettingsSection]((uint64_t)&v199);

LABEL_153:
        v109 = v190;
LABEL_154:
        outlined release of [CAFSettingsSection]((uint64_t)&v199);
        if (!v109)
        {
          if (v118)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

          }
          else
          {
            v145 = objc_msgSend(v195, sel_identifier);
            v146 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            v148 = v147;

            v149 = objc_msgSend(v192, sel_identifier);
            v150 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            v152 = v151;

            if (v150 != v146 || v152 != v148)
            {
              v144 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              goto LABEL_170;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();

LABEL_168:
          }
          goto LABEL_127;
        }
        if (!v118)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          v83 = v180;
          v11 = v181;
          break;
        }
        v131 = v109;
        v132 = v118;
        v133 = objc_msgSend(v131, sel_sortOrder);
        if (v133 != objc_msgSend(v132, sel_sortOrder))
        {
          v142 = objc_msgSend(v131, sel_sortOrder);
          v143 = objc_msgSend(v132, sel_sortOrder);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          v83 = v180;
          v11 = v181;
          v110 = v184;
          if (v142 >= v143)
            break;
          goto LABEL_128;
        }
        v134 = objc_msgSend(v131, sel_identifier);
        v135 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v137 = v136;

        v138 = objc_msgSend(v132, sel_identifier);
        v139 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v141 = v140;

        if (v139 == v135 && v141 == v137)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();

          goto LABEL_168;
        }
        v144 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

LABEL_170:
        v83 = v180;
        v11 = v181;
        v110 = v184;
        if ((v144 & 1) != 0)
          break;
LABEL_128:
        if (!v11)
          goto LABEL_225;
        v111 = 8 * v110;
        v84 = *(_QWORD *)(v11 + v111);
        *(_QWORD *)(v11 + v111) = *(_QWORD *)(v11 + 8 * v183);
        *(_QWORD *)(v11 + 8 * v183) = v84;
        v27 = v183;
      }
      while (v183 != v83);
      v27 = v174 + 1;
      if (v174 + 1 != v171)
        continue;
      break;
    }
    v27 = v171;
    if (v171 < v83)
      goto LABEL_219;
LABEL_43:
    v173 = v27;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      v12 = v177;
    else
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v177 + 2) + 1, 1, v177);
    v30 = *((_QWORD *)v12 + 2);
    v29 = *((_QWORD *)v12 + 3);
    v31 = v30 + 1;
    v11 = v181;
    v9 = v182;
    v4 = v176;
    if (v30 >= v29 >> 1)
    {
      v153 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v29 > 1), v30 + 1, 1, v12);
      v11 = v181;
      v9 = v182;
      v12 = v153;
    }
    *((_QWORD *)v12 + 2) = v31;
    v32 = v12 + 32;
    v33 = &v12[16 * v30 + 32];
    *(_QWORD *)v33 = v180;
    *((_QWORD *)v33 + 1) = v173;
    if (v30)
    {
      v178 = v12;
      while (1)
      {
        v34 = v31 - 1;
        if (v31 >= 4)
        {
          v39 = &v32[16 * v31];
          v40 = *((_QWORD *)v39 - 8);
          v41 = *((_QWORD *)v39 - 7);
          v45 = __OFSUB__(v41, v40);
          v42 = v41 - v40;
          if (v45)
            goto LABEL_204;
          v44 = *((_QWORD *)v39 - 6);
          v43 = *((_QWORD *)v39 - 5);
          v45 = __OFSUB__(v43, v44);
          v37 = v43 - v44;
          v38 = v45;
          if (v45)
            goto LABEL_205;
          v46 = v31 - 2;
          v47 = &v32[16 * v31 - 32];
          v49 = *(_QWORD *)v47;
          v48 = *((_QWORD *)v47 + 1);
          v45 = __OFSUB__(v48, v49);
          v50 = v48 - v49;
          if (v45)
            goto LABEL_207;
          v45 = __OFADD__(v37, v50);
          v51 = v37 + v50;
          if (v45)
            goto LABEL_210;
          if (v51 >= v42)
          {
            v69 = &v32[16 * v34];
            v71 = *(_QWORD *)v69;
            v70 = *((_QWORD *)v69 + 1);
            v45 = __OFSUB__(v70, v71);
            v72 = v70 - v71;
            if (v45)
              goto LABEL_214;
            v62 = v37 < v72;
            goto LABEL_80;
          }
        }
        else
        {
          if (v31 != 3)
          {
            v63 = *((_QWORD *)v12 + 4);
            v64 = *((_QWORD *)v12 + 5);
            v45 = __OFSUB__(v64, v63);
            v56 = v64 - v63;
            v57 = v45;
            goto LABEL_74;
          }
          v36 = *((_QWORD *)v12 + 4);
          v35 = *((_QWORD *)v12 + 5);
          v45 = __OFSUB__(v35, v36);
          v37 = v35 - v36;
          v38 = v45;
        }
        if ((v38 & 1) != 0)
          goto LABEL_206;
        v46 = v31 - 2;
        v52 = &v32[16 * v31 - 32];
        v54 = *(_QWORD *)v52;
        v53 = *((_QWORD *)v52 + 1);
        v55 = __OFSUB__(v53, v54);
        v56 = v53 - v54;
        v57 = v55;
        if (v55)
          goto LABEL_209;
        v58 = &v32[16 * v34];
        v60 = *(_QWORD *)v58;
        v59 = *((_QWORD *)v58 + 1);
        v45 = __OFSUB__(v59, v60);
        v61 = v59 - v60;
        if (v45)
          goto LABEL_212;
        if (__OFADD__(v56, v61))
          goto LABEL_213;
        if (v56 + v61 >= v37)
        {
          v62 = v37 < v61;
LABEL_80:
          if (v62)
            v34 = v46;
          goto LABEL_82;
        }
LABEL_74:
        if ((v57 & 1) != 0)
          goto LABEL_208;
        v65 = &v32[16 * v34];
        v67 = *(_QWORD *)v65;
        v66 = *((_QWORD *)v65 + 1);
        v45 = __OFSUB__(v66, v67);
        v68 = v66 - v67;
        if (v45)
          goto LABEL_211;
        if (v68 < v56)
        {
          v9 = v182;
          v12 = v178;
          goto LABEL_172;
        }
LABEL_82:
        v73 = v34 - 1;
        v74 = v182;
        if (v34 - 1 >= v31)
          goto LABEL_200;
        if (!v11)
          goto LABEL_226;
        v75 = &v32[16 * v73];
        v76 = *(_QWORD *)v75;
        v77 = v34;
        v78 = &v32[16 * v34];
        v79 = *((_QWORD *)v78 + 1);
        v80 = (uint64_t *)(v11 + 8 * *(_QWORD *)v78);
        v191 = v11 + 8 * v79;
        v194 = (uint64_t *)(v11 + 8 * *(_QWORD *)v75);
        outlined retain of CAFUISettingsCache(v182);
        specialized _merge<A>(low:mid:high:buffer:by:)(v194, v80, v191, __dst, v182);
        if (v179)
          goto LABEL_192;
        if (v79 < v76)
          goto LABEL_201;
        if (v77 > *((_QWORD *)v178 + 2))
          goto LABEL_202;
        v81 = v77;
        *(_QWORD *)v75 = v76;
        *(_QWORD *)&v32[16 * v73 + 8] = v79;
        v82 = *((_QWORD *)v178 + 2);
        if (v81 >= v82)
          goto LABEL_203;
        v179 = 0;
        v31 = v82 - 1;
        memmove(v78, v78 + 16, 16 * (v82 - 1 - v81));
        v12 = v178;
        *((_QWORD *)v178 + 2) = v82 - 1;
        v62 = v82 > 2;
        v11 = v181;
        v9 = v182;
        v4 = v176;
        if (!v62)
          goto LABEL_172;
      }
    }
    v31 = 1;
LABEL_172:
    v10 = v173;
    if (v173 >= v4)
      goto LABEL_179;
  }
LABEL_223:
  __break(1u);
LABEL_224:
  __break(1u);
LABEL_225:
  outlined release of CAFUISettingsCache(v182);
  outlined release of CAFUISettingsCache(v182);
  v74 = outlined release of CAFUISettingsCache(v182);
  __break(1u);
LABEL_226:
  v166 = v74;
  outlined release of CAFUISettingsCache(v74);
  outlined release of CAFUISettingsCache(v166);
  outlined release of CAFUISettingsCache(v166);
  __break(1u);
LABEL_227:
  outlined release of CAFUISettingsCache(v182);
  outlined release of CAFUISettingsCache(v182);
  outlined release of CAFUISettingsCache(v182);
  __break(1u);
LABEL_228:
  outlined release of CAFUISettingsCache(v182);
  outlined release of CAFUISettingsCache(v182);
  outlined release of CAFUISettingsCache(v182);
  __break(1u);
LABEL_229:
  outlined release of CAFUISettingsCache(v182);
  outlined release of CAFUISettingsCache(v182);
  outlined release of CAFUISettingsCache(v182);
  outlined release of CAFUISettingsCache(v182);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized MutableCollection<>.sort(by:)(_QWORD **a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7[2];

  v4 = *a1;
  outlined retain of CAFUISettingsCache(a2);
  outlined retain of CAFUISettingsCache(a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = specialized _ArrayBuffer._consumeAndCreateNew()(v4);
  v5 = v4[2];
  v7[0] = (uint64_t)(v4 + 4);
  v7[1] = v5;
  outlined retain of CAFUISettingsCache(a2);
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v7, a2);
  outlined release of CAFUISettingsCache(a2);
  *a1 = v4;
  outlined release of CAFUISettingsCache(a2);
  return outlined release of CAFUISettingsCache(a2);
}

uint64_t specialized _ArrayProtocol.filter(_:)(unint64_t a1, uint64_t a2, char a3)
{
  unint64_t v4;
  uint64_t i;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  void *v11;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v18;
  char *v19;
  uint64_t v21;

  v4 = a1;
  v21 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
    goto LABEL_27;
  for (i = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10); i; i = _CocoaArrayWrapper.endIndex.getter())
  {
    v18 = v4;
    v6 = 0;
    v7 = v4 & 0xC000000000000001;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    v9 = (char *)(v4 + 32);
    v4 = (unint64_t)&unk_2508DF000;
    v19 = v9;
    while (1)
    {
      if (v7)
      {
        v10 = (id)MEMORY[0x23B813418](v6, v18);
      }
      else
      {
        if (v6 >= *(_QWORD *)(v8 + 16))
          goto LABEL_25;
        v10 = *(id *)&v9[8 * v6];
      }
      v11 = v10;
      if (__OFADD__(v6++, 1))
        goto LABEL_26;
      v13 = objc_msgSend(v10, sel_category);
      v14 = *(_QWORD *)(a2 + 16);
      if (!v14)
        goto LABEL_4;
      if (*(unsigned __int8 *)(a2 + 32) != v13)
        break;
LABEL_12:
      if ((a3 & 1) == 0
        || !objc_msgSend(v11, sel_hasHidden)
        || (objc_msgSend(v11, sel_hidden) & 1) == 0)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v9 = v19;
        goto LABEL_5;
      }
LABEL_4:

LABEL_5:
      if (v6 == i)
        return v21;
    }
    if (v14 == 1)
      goto LABEL_4;
    v15 = 33;
    while (1)
    {
      v16 = v15 - 31;
      if (__OFADD__(v15 - 32, 1))
        break;
      if (*(unsigned __int8 *)(a2 + v15) == v13)
        goto LABEL_12;
      ++v15;
      if (v16 == v14)
        goto LABEL_4;
    }
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    ;
  }
  return MEMORY[0x24BEE4AF8];
}

uint64_t specialized _ArrayProtocol.filter(_:)(unint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t i;
  unint64_t v5;
  id v6;
  void *v7;
  uint64_t v9;
  id v10;
  void *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  char v19;
  void *v20;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;

  v3 = a1;
  v28 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
    goto LABEL_45;
  for (i = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10); i; i = _CocoaArrayWrapper.endIndex.getter())
  {
    v22 = v3;
    v5 = 0;
    v26 = v3 & 0xFFFFFFFFFFFFFF8;
    v27 = v3 & 0xC000000000000001;
    v23 = i;
    v24 = a2 & 0xC000000000000001;
    v25 = v3 + 32;
    while (1)
    {
      if (v27)
      {
        v6 = (id)MEMORY[0x23B813418](v5, v22);
      }
      else
      {
        if (v5 >= *(_QWORD *)(v26 + 16))
        {
          __break(1u);
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          goto LABEL_44;
        }
        v6 = *(id *)(v25 + 8 * v5);
      }
      v7 = v6;
      if (__OFADD__(v5++, 1))
        goto LABEL_42;
      v3 = (uint64_t)objc_msgSend(v6, sel_prominenceInfo);

      if (!v3)
        goto LABEL_4;
      if (a2 >> 62)
      {
        swift_bridgeObjectRetain();
        v9 = _CocoaArrayWrapper.endIndex.getter();
        if (!v9)
          goto LABEL_18;
      }
      else
      {
        v9 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v9)
          goto LABEL_18;
      }
      v10 = v24 ? (id)MEMORY[0x23B813418](0, a2) : *(id *)(a2 + 32);
      v11 = v10;
      v3 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
      v12 = static NSObject.== infix(_:_:)();

      if ((v12 & 1) == 0)
        break;
      swift_bridgeObjectRelease();
LABEL_31:
      swift_getObjectType();
      if (swift_conformsToProtocol2())
        v20 = v7;
      else
        v20 = 0;
      if (!v20)
        goto LABEL_35;
LABEL_4:

LABEL_5:
      if (v5 == i)
        return v28;
    }
    if (v9 == 1)
    {
LABEL_18:
      swift_bridgeObjectRelease();
LABEL_35:
      v3 = (uint64_t)&v28;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      goto LABEL_5;
    }
    if (v24)
    {
      v13 = 1;
      while (1)
      {
        MEMORY[0x23B813418](v13, a2);
        v14 = v13 + 1;
        if (__OFADD__(v13, 1))
          goto LABEL_43;
        v15 = static NSObject.== infix(_:_:)();
        swift_unknownObjectRelease();
        if ((v15 & 1) != 0)
          goto LABEL_30;
        ++v13;
        if (v14 == v9)
          goto LABEL_29;
      }
    }
    v16 = 5;
    while (1)
    {
      v17 = v16 - 3;
      if (__OFADD__(v16 - 4, 1))
        break;
      v18 = *(id *)(a2 + 8 * v16);
      v19 = static NSObject.== infix(_:_:)();

      if ((v19 & 1) != 0)
      {
LABEL_30:
        swift_bridgeObjectRelease();
        i = v23;
        goto LABEL_31;
      }
      ++v16;
      if (v17 == v9)
      {
LABEL_29:
        swift_bridgeObjectRelease();
        i = v23;
        goto LABEL_35;
      }
    }
LABEL_44:
    __break(1u);
LABEL_45:
    ;
  }
  return MEMORY[0x24BEE4AF8];
}

uint64_t specialized _ArrayProtocol.filter(_:)(unint64_t a1, _QWORD *a2)
{
  unint64_t v3;
  uint64_t i;
  unint64_t v5;
  id v6;
  void *v7;
  id v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = a1;
  v26 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
    goto LABEL_36;
  for (i = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10); i; i = _CocoaArrayWrapper.endIndex.getter())
  {
    v20 = v3;
    v5 = 0;
    v23 = v3 & 0xFFFFFFFFFFFFFF8;
    v24 = v3 & 0xC000000000000001;
    v21 = a2 + 7;
    v22 = (_QWORD *)(v3 + 32);
    while (1)
    {
      if (v24)
      {
        v6 = (id)MEMORY[0x23B813418](v5, v20);
      }
      else
      {
        if (v5 >= *(_QWORD *)(v23 + 16))
        {
          __break(1u);
LABEL_34:
          __break(1u);
          goto LABEL_35;
        }
        v6 = (id)v22[v5];
      }
      v7 = v6;
      if (__OFADD__(v5++, 1))
        goto LABEL_34;
      v9 = objc_msgSend(v6, sel_vehicleLayoutKey);
      if (!v9)
        goto LABEL_5;
      v10 = v9;
      v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v3 = (unint64_t)v12;

      v25 = a2[2];
      if (v25)
      {
        v13 = a2[4] == v11 && a2[5] == v3;
        if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {

          swift_bridgeObjectRelease();
          goto LABEL_6;
        }
        if (v25 != 1)
          break;
      }
LABEL_4:
      swift_bridgeObjectRelease();
LABEL_5:
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      v3 = (unint64_t)&v26;
      specialized ContiguousArray._endMutation()();
LABEL_6:
      if (v5 == i)
        return v26;
    }
    v14 = v21;
    v15 = 1;
    while (1)
    {
      v16 = a2;
      a2 = (_QWORD *)i;
      v17 = v15 + 1;
      if (__OFADD__(v15, 1))
        break;
      v18 = *(v14 - 1) == v11 && *v14 == v3;
      if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {

        swift_bridgeObjectRelease();
        i = (uint64_t)a2;
        a2 = v16;
        goto LABEL_6;
      }
      v14 += 2;
      ++v15;
      v13 = v17 == v25;
      i = (uint64_t)a2;
      a2 = v16;
      if (v13)
        goto LABEL_4;
    }
LABEL_35:
    __break(1u);
LABEL_36:
    ;
  }
  return MEMORY[0x24BEE4AF8];
}

_QWORD *specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(_QWORD *result, char a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  void **i;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  _QWORD *v31;
  id v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  char v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  id v45;

  v3 = result[2];
  if (v3)
  {
    v6 = result;
    v8 = result[4];
    v7 = result[5];
    v9 = (void *)result[6];
    v10 = (_QWORD *)*a3;
    swift_bridgeObjectRetain();
    v45 = v9;
    swift_bridgeObjectRetain();
    v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v7);
    v13 = v10[2];
    v14 = (v11 & 1) == 0;
    v15 = v13 + v14;
    if (__OFADD__(v13, v14))
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v16 = v11;
    if (v10[3] < v15)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a2 & 1);
      v17 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v7);
      if ((v16 & 1) != (v18 & 1))
      {
LABEL_28:
        result = (_QWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return result;
      }
      v12 = v17;
      v19 = (_QWORD *)*a3;
      if ((v16 & 1) == 0)
        goto LABEL_12;
LABEL_9:
      swift_bridgeObjectRelease();
      v20 = v19[7];

      *(_QWORD *)(v20 + 8 * v12) = v45;
      v21 = v3 - 1;
      if (v3 == 1)
        return (_QWORD *)swift_bridgeObjectRelease();
LABEL_16:
      for (i = (void **)(v6 + 9); ; i += 3)
      {
        v29 = (uint64_t)*(i - 2);
        v28 = (uint64_t)*(i - 1);
        v30 = *i;
        v31 = (_QWORD *)*a3;
        swift_bridgeObjectRetain();
        v32 = v30;
        v34 = specialized __RawDictionaryStorage.find<A>(_:)(v29, v28);
        v35 = v31[2];
        v36 = (v33 & 1) == 0;
        v37 = v35 + v36;
        if (__OFADD__(v35, v36))
          break;
        v38 = v33;
        if (v31[3] < v37)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v37, 1);
          v39 = specialized __RawDictionaryStorage.find<A>(_:)(v29, v28);
          if ((v38 & 1) != (v40 & 1))
            goto LABEL_28;
          v34 = v39;
        }
        v41 = (_QWORD *)*a3;
        if ((v38 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          v27 = v41[7];

          *(_QWORD *)(v27 + 8 * v34) = v32;
        }
        else
        {
          v41[(v34 >> 6) + 8] |= 1 << v34;
          v42 = (uint64_t *)(v41[6] + 16 * v34);
          *v42 = v29;
          v42[1] = v28;
          *(_QWORD *)(v41[7] + 8 * v34) = v32;
          v43 = v41[2];
          v24 = __OFADD__(v43, 1);
          v44 = v43 + 1;
          if (v24)
            goto LABEL_27;
          v41[2] = v44;
        }
        if (!--v21)
          return (_QWORD *)swift_bridgeObjectRelease();
      }
      goto LABEL_26;
    }
    if ((a2 & 1) != 0)
    {
      v19 = (_QWORD *)*a3;
      if ((v11 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      v19 = (_QWORD *)*a3;
      if ((v16 & 1) != 0)
        goto LABEL_9;
    }
LABEL_12:
    v19[(v12 >> 6) + 8] |= 1 << v12;
    v22 = (uint64_t *)(v19[6] + 16 * v12);
    *v22 = v8;
    v22[1] = v7;
    *(_QWORD *)(v19[7] + 8 * v12) = v45;
    v23 = v19[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
    {
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v19[2] = v25;
    v21 = v3 - 1;
    if (v3 == 1)
      return (_QWORD *)swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  return result;
}

{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *i;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  char v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;

  v3 = result[2];
  if (v3)
  {
    v6 = result;
    v8 = result[4];
    v7 = result[5];
    v9 = result[6];
    v10 = (_QWORD *)*a3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v7);
    v13 = v10[2];
    v14 = (v11 & 1) == 0;
    v15 = v13 + v14;
    if (__OFADD__(v13, v14))
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v16 = v11;
    if (v10[3] < v15)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a2 & 1);
      v17 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v7);
      if ((v16 & 1) != (v18 & 1))
      {
LABEL_28:
        result = (_QWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return result;
      }
      v12 = v17;
      v19 = (_QWORD *)*a3;
      if ((v16 & 1) == 0)
        goto LABEL_12;
LABEL_9:
      swift_bridgeObjectRelease();
      v20 = v19[7];
      swift_bridgeObjectRelease();
      *(_QWORD *)(v20 + 8 * v12) = v9;
      v21 = v3 - 1;
      if (v3 == 1)
        return (_QWORD *)swift_bridgeObjectRelease();
LABEL_16:
      for (i = v6 + 9; ; i += 3)
      {
        v29 = *(i - 2);
        v28 = *(i - 1);
        v30 = *i;
        v31 = (_QWORD *)*a3;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v33 = specialized __RawDictionaryStorage.find<A>(_:)(v29, v28);
        v34 = v31[2];
        v35 = (v32 & 1) == 0;
        v36 = v34 + v35;
        if (__OFADD__(v34, v35))
          break;
        v37 = v32;
        if (v31[3] < v36)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v36, 1);
          v38 = specialized __RawDictionaryStorage.find<A>(_:)(v29, v28);
          if ((v37 & 1) != (v39 & 1))
            goto LABEL_28;
          v33 = v38;
        }
        v40 = (_QWORD *)*a3;
        if ((v37 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          v27 = v40[7];
          swift_bridgeObjectRelease();
          *(_QWORD *)(v27 + 8 * v33) = v30;
        }
        else
        {
          v40[(v33 >> 6) + 8] |= 1 << v33;
          v41 = (uint64_t *)(v40[6] + 16 * v33);
          *v41 = v29;
          v41[1] = v28;
          *(_QWORD *)(v40[7] + 8 * v33) = v30;
          v42 = v40[2];
          v24 = __OFADD__(v42, 1);
          v43 = v42 + 1;
          if (v24)
            goto LABEL_27;
          v40[2] = v43;
        }
        if (!--v21)
          return (_QWORD *)swift_bridgeObjectRelease();
      }
      goto LABEL_26;
    }
    if ((a2 & 1) != 0)
    {
      v19 = (_QWORD *)*a3;
      if ((v11 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      v19 = (_QWORD *)*a3;
      if ((v16 & 1) != 0)
        goto LABEL_9;
    }
LABEL_12:
    v19[(v12 >> 6) + 8] |= 1 << v12;
    v22 = (uint64_t *)(v19[6] + 16 * v12);
    *v22 = v8;
    v22[1] = v7;
    *(_QWORD *)(v19[7] + 8 * v12) = v9;
    v23 = v19[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
    {
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v19[2] = v25;
    v21 = v3 - 1;
    if (v3 == 1)
      return (_QWORD *)swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  return result;
}

uint64_t partial apply for closure #7 in CAFUISettingsCache.init(settings:sections:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;

  return closure #7 in CAFUISettingsCache.init(settings:sections:)(a1, a2, a3, *(uint64_t **)(v3 + 16), *(_QWORD *)(v3 + 24));
}

uint64_t destroy for CAFUISettingsCache()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for CAFUISettingsCache(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for CAFUISettingsCache(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for CAFUISettingsCache(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CAFUISettingsCache(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CAFUISettingsCache(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CAFUISettingsCache()
{
  return &type metadata for CAFUISettingsCache;
}

uint64_t outlined init with copy of (AnyHashable, Any)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AnyHashable, Any));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of AnyHashable(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 16))(a2, a1);
  return a2;
}

uint64_t outlined destroy of AnyHashable(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 8))();
  return a1;
}

uint64_t outlined retain of CAFUISettingsCache(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of CAFUISettingsCache(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x23B813BE0](MEMORY[0x24BEE0D50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x23B813BE0](MEMORY[0x24BDCFB50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

uint64_t outlined retain of [CAFSettingsSection](uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of [CAFSettingsSection](uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t CAFVolume.title.getter()
{
  void *v0;
  unsigned int v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;

  while (2)
  {
    v1 = objc_msgSend(v0, sel_volumeType);
    switch(v1)
    {
      case 0u:
        v6 = 0x4D5F454D554C4F56;
        v7 = 1095320645;
        goto LABEL_13;
      case 1u:
        v6 = 0x4E5F454D554C4F56;
        v8 = 0xEA00000000005641;
        goto LABEL_14;
      case 2u:
        v6 = 0x505F454D554C4F56;
        v7 = 1162760008;
        goto LABEL_13;
      case 3u:
        v6 = 0x535F454D554C4F56;
        v8 = 0xE900000000000052;
        goto LABEL_14;
      case 4u:
        v6 = 0x525F454D554C4F56;
        v8 = 0xED00005245474E49;
        goto LABEL_14;
      case 5u:
        v6 = 0x4E5F454D554C4F56;
        v7 = 1381193281;
        goto LABEL_13;
      default:
        v2 = CAFVolume.title.getter();
        v4 = v3;
        swift_bridgeObjectRelease();
        v5 = HIBYTE(v4) & 0xF;
        if ((v4 & 0x2000000000000000) == 0)
          v5 = v2 & 0xFFFFFFFFFFFFLL;
        if (v5)
          continue;
        v6 = 0x4F5F454D554C4F56;
        v7 = 1380272212;
LABEL_13:
        v8 = v7 & 0xFFFFFFFFFFFFLL | 0xEC00000000000000;
LABEL_14:
        v9 = (void *)MEMORY[0x23B812F68](v6, v8);
        v10 = CAFUILocalizedStringForKey(v9);

        v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        return v11;
    }
  }
}

id closure #1 in variable initialization expression of CAFUIDevicePickerLimitedUIView.button()
{
  id v0;
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  id v10;
  Class isa;

  v0 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CAFUIAlertButton()), sel_init);
  v1 = objc_msgSend((id)objc_opt_self(), sel__carSystemFocusColor);
  objc_msgSend(v0, sel_setTitleColor_forState_, v1, 0);

  objc_msgSend(v0, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  v2 = (void *)MEMORY[0x23B812F68](1262698818, 0xE400000000000000);
  v3 = CAFUILocalizedStringForKey(v2);

  if (!v3)
  {
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v3 = (id)MEMORY[0x23B812F68](v4);
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v0, sel_setTitle_forState_, v3, 0);

  objc_msgSend(v0, sel__setContinuousCornerRadius_, 8.0);
  v5 = (void *)objc_opt_self();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_2375790C0;
  v7 = objc_msgSend(v0, sel_heightAnchor);
  v8 = objc_msgSend(v7, sel_constraintEqualToConstant_, 40.0);

  *(_QWORD *)(v6 + 32) = v8;
  v9 = objc_msgSend(v0, sel_widthAnchor);
  v10 = objc_msgSend(v9, sel_constraintEqualToConstant_, 241.0);

  *(_QWORD *)(v6 + 40) = v10;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v5, sel_activateConstraints_, isa);

  return v0;
}

id closure #1 in variable initialization expression of CAFUIDevicePickerLimitedUIView.label()
{
  id v0;
  id v1;
  void *v2;
  id v3;
  uint64_t v4;

  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD708]), sel_init);
  v1 = objc_msgSend((id)objc_opt_self(), sel_systemFontOfSize_, 28.0);
  objc_msgSend(v0, sel_setFont_, v1);

  objc_msgSend(v0, sel_setTextAlignment_, 1);
  objc_msgSend(v0, sel_setLineBreakMode_, 0);
  objc_msgSend(v0, sel_setNumberOfLines_, 0);
  objc_msgSend(v0, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  v2 = (void *)MEMORY[0x23B812F68](0xD000000000000019, 0x800000023757CB50);
  v3 = CAFUILocalizedStringForKey(v2);

  if (!v3)
  {
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v3 = (id)MEMORY[0x23B812F68](v4);
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v0, sel_setText_, v3);

  return v0;
}

char *CAFUIDevicePickerLimitedUIView.init(presentedAction:dismissAction:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  char *result;
  char *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  Class isa;
  id v31;
  void *v32;
  uint64_t v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  Class v48;
  uint64_t v49;
  objc_super v50;

  v9 = (uint64_t *)&v4[OBJC_IVAR____TtC5CAFUI30CAFUIDevicePickerLimitedUIView_presentedAction];
  *v9 = 0;
  v9[1] = 0;
  v10 = (uint64_t *)&v4[OBJC_IVAR____TtC5CAFUI30CAFUIDevicePickerLimitedUIView_dismissAction];
  *v10 = 0;
  v10[1] = 0;
  v11 = OBJC_IVAR____TtC5CAFUI30CAFUIDevicePickerLimitedUIView_button;
  v12 = v4;
  *(_QWORD *)&v4[v11] = closure #1 in variable initialization expression of CAFUIDevicePickerLimitedUIView.button();
  v13 = OBJC_IVAR____TtC5CAFUI30CAFUIDevicePickerLimitedUIView_label;
  *(_QWORD *)&v12[v13] = closure #1 in variable initialization expression of CAFUIDevicePickerLimitedUIView.label();
  v14 = *v9;
  *v9 = a1;
  v9[1] = a2;
  v49 = a1;
  outlined copy of (@escaping @callee_guaranteed () -> ())?(a1);
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v14);
  v15 = *v10;
  *v10 = a3;
  v10[1] = a4;
  outlined copy of (@escaping @callee_guaranteed () -> ())?(a3);
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v15);

  v50.receiver = v12;
  v50.super_class = (Class)type metadata accessor for CAFUIDevicePickerLimitedUIView();
  v16 = (char *)objc_msgSendSuper2(&v50, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v17 = OBJC_IVAR____TtC5CAFUI30CAFUIDevicePickerLimitedUIView_button;
  v18 = *(void **)&v16[OBJC_IVAR____TtC5CAFUI30CAFUIDevicePickerLimitedUIView_button];
  v19 = v16;
  objc_msgSend(v18, sel_addTarget_action_forControlEvents_, v19, sel_buttonPressed, 64);
  objc_msgSend(v19, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  v20 = (void *)objc_opt_self();
  v21 = v19;
  result = (char *)objc_msgSend(v20, sel_tableBackgroundColor);
  if (result)
  {
    v23 = result;
    objc_msgSend(v21, sel_setBackgroundColor_, result);

    objc_msgSend(v21, sel_setAlpha_, 0.95);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_2375790C0;
    v25 = *(void **)&v21[OBJC_IVAR____TtC5CAFUI30CAFUIDevicePickerLimitedUIView_label];
    *(_QWORD *)(v24 + 32) = v25;
    v26 = *(void **)&v16[v17];
    *(_QWORD *)(v24 + 40) = v26;
    specialized Array._endMutation()();
    v27 = objc_allocWithZone(MEMORY[0x24BEBD978]);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
    v28 = v25;
    v29 = v26;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v31 = objc_msgSend(v27, sel_initWithArrangedSubviews_, isa);

    objc_msgSend(v31, sel_setAxis_, 1);
    objc_msgSend(v31, sel_setAlignment_, 3);
    objc_msgSend(v31, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    objc_msgSend(v31, sel_setSpacing_, 24.0);
    objc_msgSend(v21, sel_addSubview_, v31);
    v32 = (void *)objc_opt_self();
    v33 = swift_allocObject();
    *(_OWORD *)(v33 + 16) = xmmword_237579090;
    v34 = objc_msgSend(v31, sel_centerXAnchor);
    v35 = objc_msgSend(v21, sel_centerXAnchor);
    v36 = objc_msgSend(v34, sel_constraintEqualToAnchor_, v35);

    *(_QWORD *)(v33 + 32) = v36;
    v37 = objc_msgSend(v31, sel_centerYAnchor);
    v38 = objc_msgSend(v21, sel_centerYAnchor);
    v39 = objc_msgSend(v37, sel_constraintEqualToAnchor_, v38);

    *(_QWORD *)(v33 + 40) = v39;
    v40 = objc_msgSend(v31, sel_leadingAnchor);
    v41 = objc_msgSend(v21, sel_safeAreaLayoutGuide);
    v42 = objc_msgSend(v41, sel_leadingAnchor);

    v43 = objc_msgSend(v40, sel_constraintEqualToAnchor_, v42);
    *(_QWORD *)(v33 + 48) = v43;
    v44 = objc_msgSend(v31, sel_trailingAnchor);
    v45 = objc_msgSend(v21, sel_safeAreaLayoutGuide);
    v46 = objc_msgSend(v45, sel_trailingAnchor);

    v47 = objc_msgSend(v44, sel_constraintEqualToAnchor_, v46);
    *(_QWORD *)(v33 + 56) = v47;
    specialized Array._endMutation()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
    v48 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v32, sel_activateConstraints_, v48);
    outlined consume of (@escaping @callee_guaranteed () -> ())?(a3);
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v49);

    return v21;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void @objc CAFUIDevicePickerLimitedUIView.layoutSubviews()(char *a1, uint64_t a2, _QWORD *a3)
{
  void (*v3)(uint64_t);
  uint64_t v4;
  char *v5;

  v3 = *(void (**)(uint64_t))&a1[*a3];
  if (v3)
  {
    v5 = a1;
    v4 = outlined copy of (@escaping @callee_guaranteed () -> ())?((uint64_t)v3);
    v3(v4);
    outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v3);

  }
}

id CAFUIDevicePickerLimitedUIView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFUIDevicePickerLimitedUIView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for CAFUIDevicePickerLimitedUIView()
{
  return objc_opt_self();
}

uint64_t outlined copy of (@escaping @callee_guaranteed () -> ())?(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

int64x2_t one-time initialization function for size()
{
  int64x2_t result;

  result = vdupq_n_s64(0x4054000000000000uLL);
  static CAFUIDevicePickerViewCell.Constants.Avatar.size = (__int128)result;
  return result;
}

{
  int64x2_t result;

  result = vdupq_n_s64(0x4055800000000000uLL);
  static CAFUIDevicePickerViewCell.Constants.FocusRing.size = (__int128)result;
  return result;
}

void one-time initialization function for portraitRequiredHeight()
{
  static CAFUIDevicePickerViewController.Constants.portraitRequiredHeight = 0x4074800000000000;
}

void one-time initialization function for tallPortraitRequiredHeight()
{
  static CAFUIDevicePickerViewController.Constants.tallPortraitRequiredHeight = 0x4080500000000000;
}

unint64_t CAFVent.symbolName.getter()
{
  void *v0;
  unsigned int v1;
  id v2;
  unint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  unint64_t result;
  id v8;
  void *v9;
  unsigned int v10;
  unsigned __int8 v11;

  v1 = objc_msgSend(v0, sel_currentIndex);
  v2 = objc_msgSend(v0, sel_combinations);
  type metadata accessor for NSNumber();
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v4 <= v1)
    goto LABEL_9;
  v5 = objc_msgSend(v0, sel_combinations);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  result = objc_msgSend(v0, sel_currentIndex);
  if ((v6 & 0xC000000000000001) != 0)
  {
    v8 = (id)MEMORY[0x23B813418]();
LABEL_7:
    v9 = v8;
    swift_bridgeObjectRelease();
    v10 = objc_msgSend(v9, sel_intValue);

    if (v10 - 1 <= 0x16)
    {
      v11 = byte_237579C56[v10 - 1];
      return CAFUISymbol.symbolName.getter(v11);
    }
LABEL_9:
    v11 = 0;
    return CAFUISymbol.symbolName.getter(v11);
  }
  if (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10) > (unint64_t)result)
  {
    v8 = *(id *)(v6 + 8 * result + 32);
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

unint64_t type metadata accessor for NSNumber()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSNumber;
  if (!lazy cache variable for type metadata for NSNumber)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  }
  return result;
}

void CAFUIDevicePickerViewCell.selectedImage.didset()
{
  char *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  Class v19;
  Class isa;

  v1 = OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_selectedImageView;
  v2 = *(void **)&v0[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_selectedImageView];
  if (v2)
    objc_msgSend(v2, sel_removeFromSuperview);
  v3 = *(void **)&v0[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_selectedImage];
  if (v3)
  {
    v4 = objc_allocWithZone(MEMORY[0x24BEBD668]);
    v5 = v3;
    v6 = objc_msgSend(v4, sel_initWithImage_, v5);
    objc_msgSend(v6, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    v7 = objc_msgSend(v0, sel_contentView);
    objc_msgSend(v7, sel_addSubview_, v6);

    v8 = *(void **)&v0[v1];
    *(_QWORD *)&v0[v1] = v6;
    v9 = v6;

    v10 = (void *)objc_opt_self();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_2375790C0;
    v12 = objc_msgSend(v9, sel_topAnchor);
    v13 = *(void **)&v0[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_avatarView];
    v14 = objc_msgSend(v13, sel_topAnchor);
    v15 = objc_msgSend(v12, sel_constraintEqualToAnchor_constant_, v14, 50.0);

    *(_QWORD *)(v11 + 32) = v15;
    v16 = objc_msgSend(v9, sel_leadingAnchor);
    v17 = objc_msgSend(v13, sel_leadingAnchor);
    v18 = objc_msgSend(v16, sel_constraintEqualToAnchor_constant_, v17, 50.0);

    *(_QWORD *)(v11 + 40) = v18;
    specialized Array._endMutation()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v10, sel_activateConstraints_, isa);

    v19 = isa;
  }
  else
  {
    v19 = *(Class *)&v0[v1];
    *(_QWORD *)&v0[v1] = 0;
  }

}

void CAFUIDevicePickerViewCell.showSpinner.didset(char a1)
{
  char *v1;
  uint64_t v2;
  char *v3;
  id v4;
  uint64_t v5;
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  Class isa;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  uint64_t v22;

  v2 = OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_showSpinner;
  if (v1[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_showSpinner] != (a1 & 1))
  {
    v3 = v1;
    v4 = objc_msgSend(v1, sel_backgroundView);
    if (v4)
    {
      v21 = v4;
      v5 = OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_spinner;
      if (!*(_QWORD *)&v1[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_spinner])
      {
        v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD398]), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
        v7 = objc_msgSend((id)objc_opt_self(), sel_labelColor);
        objc_msgSend(v6, sel_setColor_, v7);

        objc_msgSend(v6, sel_setActivityIndicatorViewStyle_, 101);
        objc_msgSend(v6, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
        objc_msgSend(v21, sel_addSubview_, v6);
        v8 = (void *)objc_opt_self();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        v9 = swift_allocObject();
        *(_OWORD *)(v9 + 16) = xmmword_2375790C0;
        v10 = objc_msgSend(v6, sel_centerXAnchor);
        v11 = objc_msgSend(v21, sel_centerXAnchor);
        v12 = objc_msgSend(v10, sel_constraintEqualToAnchor_, v11);

        *(_QWORD *)(v9 + 32) = v12;
        v13 = objc_msgSend(v6, sel_centerYAnchor);
        v14 = objc_msgSend(v21, sel_centerYAnchor);
        v15 = objc_msgSend(v13, sel_constraintEqualToAnchor_, v14);

        *(_QWORD *)(v9 + 40) = v15;
        v22 = v9;
        specialized Array._endMutation()();
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        objc_msgSend(v8, sel_activateConstraints_, isa);

        v17 = *(void **)&v3[v5];
        *(_QWORD *)&v3[v5] = v6;

      }
      if (v3[v2] == 1)
      {
        objc_msgSend(*(id *)&v3[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_avatarView], sel_setHidden_, 1);
        objc_msgSend(*(id *)&v3[v5], sel_startAnimating);
        v18 = *(void **)&v3[v5];
        if (v18)
        {
          v19 = v18;
          objc_msgSend(v19, sel_setHidden_, 0);

        }
      }
      else
      {
        v20 = *(void **)&v3[v5];
        if (v20)
        {
          objc_msgSend(v20, sel_setHidden_, 1);
          v20 = *(void **)&v3[v5];
        }
        objc_msgSend(v20, sel_stopAnimating, v21, v22);
        objc_msgSend(*(id *)&v3[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_avatarView], sel_setHidden_, 0);
      }

    }
  }
}

char *CAFUIDevicePickerViewCell.init(frame:)(double a1, double a2, double a3, double a4)
{
  char *v4;
  char *v9;
  id v10;
  char *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  char *v17;
  id v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  void *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  id v27;
  id v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  id v33;
  id v34;
  void *v35;
  id v36;
  id v37;
  id v38;
  id v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  uint64_t v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  id v93;
  id v94;
  id v95;
  id v96;
  id v97;
  id v98;
  Class isa;
  uint64_t v101;
  uint64_t v102;
  id v103;
  objc_super v104;

  *(_QWORD *)&v4[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_selectedImageView] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_selectedImage] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_spinner] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_focusRingView] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_widthConstraint] = 0;
  v9 = &v4[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_deviceIdentifier];
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0xE000000000000000;
  v10 = objc_allocWithZone(MEMORY[0x24BEBD668]);
  v11 = v4;
  v12 = objc_msgSend(v10, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  *(_QWORD *)&v11[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_avatarView] = v12;
  v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD708]), sel_init);
  *(_QWORD *)&v11[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_label] = v13;
  v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD708]), sel_init);
  *(_QWORD *)&v11[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_sublabel] = v14;
  v11[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_showSpinner] = 0;

  v104.receiver = v11;
  v104.super_class = (Class)type metadata accessor for CAFUIDevicePickerViewCell();
  v15 = objc_msgSendSuper2(&v104, sel_initWithFrame_, a1, a2, a3, a4);
  v16 = objc_allocWithZone(MEMORY[0x24BEBDB00]);
  v17 = (char *)v15;
  v18 = objc_msgSend(v16, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v18, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  if (one-time initialization token for size != -1)
    swift_once();
  objc_msgSend(v18, sel__setCornerRadius_, *(double *)&static CAFUIDevicePickerViewCell.Constants.Avatar.size * 0.5);
  v19 = objc_msgSend(v18, sel_layer);
  objc_msgSend(v19, sel_setMasksToBounds_, 1);

  v20 = (void *)objc_opt_self();
  v21 = objc_msgSend(v20, sel_secondarySystemFillColor);
  objc_msgSend(v18, sel_setBackgroundColor_, v21);

  v22 = objc_msgSend(v20, sel_labelColor);
  objc_msgSend(v18, sel_setTintColor_, v22);

  objc_msgSend(v17, sel_setBackgroundView_, v18);
  v23 = *(void **)&v17[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_avatarView];
  v24 = OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_avatarView;
  objc_msgSend(v23, (SEL)&selRef_floatSettingService_didUpdateValue_, 0);
  objc_msgSend(v23, sel_setContentMode_, 4);
  v25 = objc_msgSend(v23, sel_layer);
  objc_msgSend(v25, sel_setMasksToBounds_, 1);

  v26 = v24;
  v101 = v24;
  v27 = *(id *)&v17[v24];
  v28 = objc_msgSend(v20, sel_labelColor);
  objc_msgSend(v27, sel_setTintColor_, v28);

  objc_msgSend(v18, sel_addSubview_, *(_QWORD *)&v17[v26]);
  v29 = OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_label;
  v30 = *(void **)&v17[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_label];
  objc_msgSend(v30, (SEL)&selRef_floatSettingService_didUpdateValue_, 0);
  objc_msgSend(v30, sel_setTextAlignment_, 1);
  v31 = (void *)objc_opt_self();
  v32 = *MEMORY[0x24BEBE1D8];
  v33 = v30;
  v34 = objc_msgSend(v31, sel_preferredFontDescriptorWithTextStyle_, v32);
  v35 = (void *)objc_opt_self();
  v36 = objc_msgSend(v35, sel_fontWithDescriptor_size_, v34, 0.0);

  objc_msgSend(v33, sel_setFont_, v36);
  v37 = *(id *)&v17[v29];
  v38 = objc_msgSend(v20, sel_labelColor);
  objc_msgSend(v37, sel_setTextColor_, v38);

  v39 = objc_msgSend(v17, sel_contentView);
  objc_msgSend(v39, sel_addSubview_, *(_QWORD *)&v17[v29]);

  v40 = OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_sublabel;
  v41 = *(void **)&v17[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_sublabel];
  objc_msgSend(v41, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v41, sel_setTextAlignment_, 1);
  objc_msgSend(v41, sel_setNumberOfLines_, 1);
  v42 = *MEMORY[0x24BEBE1F0];
  v43 = v41;
  v44 = objc_msgSend(v31, sel_preferredFontDescriptorWithTextStyle_, v42);
  v45 = objc_msgSend(v35, sel_fontWithDescriptor_size_, v44, 0.0);

  objc_msgSend(v43, sel_setFont_, v45);
  v102 = v40;
  v46 = *(id *)&v17[v40];
  v47 = objc_msgSend(v20, sel__carSystemFocusColor);
  objc_msgSend(v46, sel_setTextColor_, v47);

  v48 = objc_msgSend(v17, sel_contentView);
  objc_msgSend(v48, sel_addSubview_, *(_QWORD *)&v17[v40]);

  v103 = (id)objc_opt_self();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v49 = swift_allocObject();
  *(_OWORD *)(v49 + 16) = xmmword_237579C70;
  v50 = objc_msgSend(v18, sel_topAnchor);
  v51 = objc_msgSend(v17, sel_contentView);
  v52 = objc_msgSend(v51, (SEL)&selRef_integerSettingService_didUpdateName_ + 4);

  v53 = objc_msgSend(v50, sel_constraintEqualToAnchor_constant_, v52, 4.0);
  *(_QWORD *)(v49 + 32) = v53;
  v54 = objc_msgSend(v18, sel_widthAnchor);
  v55 = objc_msgSend(v54, sel_constraintEqualToConstant_, *(double *)&static CAFUIDevicePickerViewCell.Constants.Avatar.size);

  *(_QWORD *)(v49 + 40) = v55;
  v56 = objc_msgSend(v18, sel_heightAnchor);
  v57 = objc_msgSend(v56, (SEL)&selRef_buttonPressed + 2, *((double *)&static CAFUIDevicePickerViewCell.Constants.Avatar.size + 1));

  *(_QWORD *)(v49 + 48) = v57;
  v58 = objc_msgSend(v18, sel_centerXAnchor);
  v59 = objc_msgSend(v17, sel_contentView);
  v60 = objc_msgSend(v59, sel_centerXAnchor);

  v61 = objc_msgSend(v58, sel_constraintEqualToAnchor_, v60);
  *(_QWORD *)(v49 + 56) = v61;
  v62 = objc_msgSend(*(id *)&v17[v101], sel_leadingAnchor);
  v63 = objc_msgSend(v18, (SEL)&ResourceBundleClass.weak_ivar_lyt + 6);
  v64 = objc_msgSend(v62, (SEL)&selRef_hidden + 6, v63);

  *(_QWORD *)(v49 + 64) = v64;
  v65 = objc_msgSend(*(id *)&v17[v101], sel_trailingAnchor);
  v66 = objc_msgSend(v18, (SEL)&selRef_automakerSettingService_didUpdateIdentifier_);
  v67 = objc_msgSend(v65, (SEL)&selRef_hidden + 6, v66);

  *(_QWORD *)(v49 + 72) = v67;
  v68 = objc_msgSend(*(id *)&v17[v101], sel_topAnchor);
  v69 = objc_msgSend(v18, sel_topAnchor);
  v70 = objc_msgSend(v68, (SEL)&selRef_hidden + 6, v69);

  *(_QWORD *)(v49 + 80) = v70;
  v71 = objc_msgSend(*(id *)&v17[v101], sel_bottomAnchor);
  v72 = objc_msgSend(v18, sel_bottomAnchor);
  v73 = objc_msgSend(v71, (SEL)&selRef_hidden + 6, v72);

  *(_QWORD *)(v49 + 88) = v73;
  v74 = objc_msgSend(*(id *)&v17[v29], sel_topAnchor);
  v75 = objc_msgSend(*(id *)&v17[v101], sel_bottomAnchor);
  v76 = objc_msgSend(v74, sel_constraintEqualToAnchor_constant_, v75, 12.0);

  *(_QWORD *)(v49 + 96) = v76;
  v77 = objc_msgSend(*(id *)&v17[v29], sel_leadingAnchor);
  v78 = objc_msgSend(v17, sel_contentView);
  v79 = objc_msgSend(v78, sel_leadingAnchor);

  v80 = objc_msgSend(v77, sel_constraintEqualToAnchor_, v79);
  *(_QWORD *)(v49 + 104) = v80;
  v81 = objc_msgSend(*(id *)&v17[v29], sel_trailingAnchor);
  v82 = objc_msgSend(v17, sel_contentView);
  v83 = objc_msgSend(v82, sel_trailingAnchor);

  v84 = objc_msgSend(v81, sel_constraintEqualToAnchor_, v83);
  *(_QWORD *)(v49 + 112) = v84;
  v85 = objc_msgSend(*(id *)&v17[v102], sel_bottomAnchor);
  v86 = objc_msgSend(v17, sel_contentView);
  v87 = objc_msgSend(v86, sel_bottomAnchor);

  v88 = objc_msgSend(v85, sel_constraintEqualToAnchor_, v87);
  *(_QWORD *)(v49 + 120) = v88;
  v89 = objc_msgSend(*(id *)&v17[v102], sel_leadingAnchor);
  v90 = objc_msgSend(v17, sel_contentView);
  v91 = objc_msgSend(v90, sel_leadingAnchor);

  v92 = objc_msgSend(v89, sel_constraintEqualToAnchor_, v91);
  *(_QWORD *)(v49 + 128) = v92;
  v93 = objc_msgSend(*(id *)&v17[v102], sel_trailingAnchor);
  v94 = objc_msgSend(v17, sel_contentView);
  v95 = objc_msgSend(v94, sel_trailingAnchor);

  v96 = objc_msgSend(v93, sel_constraintEqualToAnchor_, v95);
  *(_QWORD *)(v49 + 136) = v96;
  v97 = objc_msgSend(v17, sel_heightAnchor);
  v98 = objc_msgSend(v97, sel_constraintEqualToConstant_, 134.0);

  *(_QWORD *)(v49 + 144) = v98;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v103, sel_activateConstraints_, isa);

  return v17;
}

void CAFUIDevicePickerViewCell.showsFocusRing.setter(char a1)
{
  char *v1;
  id v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  Class v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  Class isa;

  if ((a1 & 1) != 0)
  {
    v2 = objc_msgSend(objc_allocWithZone((Class)CAFUIFocusRingView), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
    objc_msgSend(v2, sel_setCornerRadius_, 42.0);
    objc_msgSend(v2, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    v3 = *(void **)&v1[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_selectedImageView];
    if (v3)
    {
      v4 = v3;
      v5 = objc_msgSend(v1, sel_contentView);
      objc_msgSend(v5, sel_insertSubview_belowSubview_, v2, v4);

    }
    else
    {
      v5 = objc_msgSend(v1, sel_contentView);
      objc_msgSend(v5, sel_addSubview_, v2);
    }

    v8 = *(void **)&v1[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_focusRingView];
    *(_QWORD *)&v1[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_focusRingView] = v2;
    v9 = v2;

    v10 = (void *)objc_opt_self();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_237579090;
    v12 = objc_msgSend(v9, sel_centerXAnchor);
    v13 = *(void **)&v1[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_avatarView];
    v14 = objc_msgSend(v13, sel_centerXAnchor);
    v15 = objc_msgSend(v12, sel_constraintEqualToAnchor_, v14);

    *(_QWORD *)(v11 + 32) = v15;
    v16 = objc_msgSend(v9, sel_centerYAnchor);
    v17 = objc_msgSend(v13, sel_centerYAnchor);
    v18 = objc_msgSend(v16, sel_constraintEqualToAnchor_, v17);

    *(_QWORD *)(v11 + 40) = v18;
    v19 = objc_msgSend(v9, sel_widthAnchor);
    if (one-time initialization token for size != -1)
      swift_once();
    v20 = objc_msgSend(v19, sel_constraintEqualToConstant_, *(double *)&static CAFUIDevicePickerViewCell.Constants.FocusRing.size);

    *(_QWORD *)(v11 + 48) = v20;
    v21 = objc_msgSend(v9, sel_heightAnchor);
    v22 = objc_msgSend(v21, sel_constraintEqualToConstant_, *((double *)&static CAFUIDevicePickerViewCell.Constants.FocusRing.size + 1));

    *(_QWORD *)(v11 + 56) = v22;
    specialized Array._endMutation()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v10, sel_activateConstraints_, isa);

    v7 = isa;
  }
  else
  {
    v6 = OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_focusRingView;
    v7 = *(Class *)&v1[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_focusRingView];
    if (v7)
    {
      -[objc_class removeFromSuperview](v7, sel_removeFromSuperview);
      v7 = *(Class *)&v1[v6];
    }
    *(_QWORD *)&v1[v6] = 0;
  }

}

void CAFUIDevicePickerViewCell.configure(with:selectedImage:for:device:)(_QWORD *a1, void *a2, char a3, void *a4)
{
  char *v4;
  char *v5;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  uint64_t v28;
  void *v29;
  char *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  id v42;
  id v43;
  void *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  double v49;
  id v50;
  id v51;
  char v52;
  uint64_t v54;
  _QWORD v55[3];
  uint64_t v56;
  uint64_t v57;
  CGRect v58;

  v5 = v4;
  if (one-time initialization token for default != -1)
    swift_once();
  v9 = static OS_os_log.default;
  outlined init with copy of CAFUIImageRepresentableItemProtocol((uint64_t)a1, (uint64_t)v55);
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    v52 = a3;
    v12 = swift_slowAlloc();
    v54 = v12;
    *(_DWORD *)v11 = 136315138;
    v13 = a4;
    v14 = v56;
    v15 = v57;
    __swift_project_boxed_opaque_existential_1(v55, v56);
    v16 = v14;
    a4 = v13;
    v5 = v4;
    v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v16, v15);
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v55);
    _os_log_impl(&dword_237505000, v9, v10, "Configuring item: %s", v11, 0xCu);
    swift_arrayDestroy();
    v19 = v12;
    a3 = v52;
    MEMORY[0x23B813C70](v19, -1, -1);
    MEMORY[0x23B813C70](v11, -1, -1);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v55);
  }
  if (objc_msgSend(a4, sel_state) == 2)
  {
    v20 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CAFUIAccountManager()), sel_init);
    if (one-time initialization token for size != -1)
      swift_once();
    v21 = a1;
    v22 = *(void **)&v20[OBJC_IVAR____TtC5CAFUI19CAFUIAccountManager_pictureStore];
    objc_msgSend(v22, sel_setPictureDiameter_, *(double *)&static CAFUIDevicePickerViewCell.Constants.Avatar.size);
    v23 = objc_msgSend(v22, sel_profilePictureForAccountOwner);

    if (v23)
    {
      objc_msgSend(*(id *)&v5[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_avatarView], sel_setImage_, v23);

    }
    v24 = *(void **)&v5[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_label];
    objc_msgSend(v24, sel_setNumberOfLines_, 1);
    v25 = *(void **)&v5[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_sublabel];
    v26 = (void *)MEMORY[0x23B812F68](0xD000000000000016, 0x800000023757CCD0);
    v27 = CAFUILocalizedStringForKey(v26);

    if (!v27)
    {
      v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v27 = (id)MEMORY[0x23B812F68](v28);
      swift_bridgeObjectRelease();
    }
    objc_msgSend(v25, sel_setText_, v27);

    a1 = v21;
  }
  else
  {
    v29 = *(void **)&v5[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_avatarView];
    v30 = v5;
    v31 = a4;
    v32 = a1[3];
    v33 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v32);
    v34 = *(uint64_t (**)(uint64_t, uint64_t))(v33 + 16);
    v35 = v33;
    a4 = v31;
    v5 = v30;
    v36 = (void *)v34(v32, v35);
    objc_msgSend(v29, sel_setImage_, v36);

    v24 = *(void **)&v30[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_label];
    objc_msgSend(v24, sel_setNumberOfLines_, 2);
    objc_msgSend(*(id *)&v5[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_sublabel], sel_setText_, 0);
  }
  v37 = a1[3];
  v38 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v37);
  v39 = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 8))(v37, v38);
  v40 = (void *)MEMORY[0x23B812F68](v39);
  swift_bridgeObjectRelease();
  objc_msgSend(v24, sel_setText_, v40);

  v41 = *(void **)&v5[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_selectedImage];
  *(_QWORD *)&v5[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_selectedImage] = a2;
  v42 = a2;

  CAFUIDevicePickerViewCell.selectedImage.didset();
  v43 = objc_msgSend(a4, sel_identifier);
  if (v43)
  {
    v44 = v43;
    v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v47 = v46;

  }
  else
  {
    v45 = 0;
    v47 = 0xE000000000000000;
  }
  v48 = (uint64_t *)&v5[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_deviceIdentifier];
  *v48 = v45;
  v48[1] = v47;
  swift_bridgeObjectRelease();
  v49 = dbl_237579CB0[a3];
  objc_msgSend(v5, sel_bounds);
  if (v49 != CGRectGetWidth(v58))
  {
    v50 = objc_msgSend(v5, sel_widthAnchor);
    v51 = objc_msgSend(v50, sel_constraintEqualToConstant_, v49);

    specialized CAFUIDevicePickerViewCell.widthConstraint.setter(v51);
  }
}

Swift::Void __swiftcall CAFUIDevicePickerViewCell.didUpdateFocus(in:with:)(UIFocusUpdateContext in, UIFocusAnimationCoordinator with)
{
  char *v2;
  char *v3;
  id v6;
  void *v7;
  char v8;
  uint64_t v9;
  void *v10;
  objc_super v11;

  v3 = v2;
  v11.receiver = v3;
  v11.super_class = (Class)type metadata accessor for CAFUIDevicePickerViewCell();
  objc_msgSendSuper2(&v11, sel_didUpdateFocusInContext_withAnimationCoordinator_, in.super.isa, with.super.isa);
  v6 = -[objc_class nextFocusedView](in.super.isa, sel_nextFocusedView);
  if (v6)
  {
    v7 = v6;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    v8 = static NSObject.== infix(_:_:)();
    CAFUIDevicePickerViewCell.showsFocusRing.setter(v8 & 1);
  }
  else
  {
    v9 = OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_focusRingView;
    v10 = *(void **)&v3[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_focusRingView];
    if (v10)
    {
      objc_msgSend(v10, sel_removeFromSuperview);
      v7 = *(void **)&v3[v9];
    }
    else
    {
      v7 = 0;
    }
    *(_QWORD *)&v3[v9] = 0;
  }

}

id CAFUIDevicePickerViewCell.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFUIDevicePickerViewCell();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for CAFUIDevicePickerViewCell()
{
  return objc_opt_self();
}

void specialized CAFUIDevicePickerViewCell.widthConstraint.setter(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;
  Class isa;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  uint64_t v14;
  id v15;
  Class v16;

  v2 = v1;
  v4 = OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_widthConstraint;
  v5 = *(void **)(v1 + OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_widthConstraint);
  if (v5)
  {
    v6 = (void *)objc_opt_self();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_237579080;
    *(_QWORD *)(v7 + 32) = v5;
    specialized Array._endMutation()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
    v8 = v5;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v6, sel_deactivateConstraints_, isa);

    v10 = *(void **)(v1 + v4);
  }
  else
  {
    v10 = 0;
  }
  *(_QWORD *)(v2 + v4) = a1;
  v11 = a1;

  v12 = *(void **)(v2 + v4);
  if (v12)
  {
    v13 = (void *)objc_opt_self();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_237579080;
    *(_QWORD *)(v14 + 32) = v12;
    specialized Array._endMutation()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
    v15 = v12;
    v16 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v13, sel_activateConstraints_, v16);

  }
}

void specialized CAFUIDevicePickerViewCell.init(coder:)()
{
  char *v0;
  char *v1;

  *(_QWORD *)&v0[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_selectedImageView] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_selectedImage] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_spinner] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_focusRingView] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_widthConstraint] = 0;
  v1 = &v0[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_deviceIdentifier];
  *(_QWORD *)v1 = 0;
  *((_QWORD *)v1 + 1) = 0xE000000000000000;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t CAFMediaSourceSemanticType.title.getter(char a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unsigned __int16 v5;
  void *v6;
  id v7;

  switch(a1)
  {
    case 1:
      v1 = 0x49544154535F4D41;
      goto LABEL_7;
    case 2:
      v1 = 0x49544154535F4D46;
      goto LABEL_7;
    case 3:
      v3 = 1598904403;
      goto LABEL_12;
    case 4:
      v1 = 0x49544154535F5442;
LABEL_7:
      v4 = 0xEB00000000534E4FLL;
      goto LABEL_14;
    case 5:
      v3 = 1599624513;
      goto LABEL_12;
    case 6:
      v5 = 16708;
      goto LABEL_11;
    case 7:
      v5 = 21333;
LABEL_11:
      v3 = v5 | 0x5F420000;
LABEL_12:
      v1 = v3 | 0x5441545300000000;
      v4 = 0xEC000000534E4F49;
      goto LABEL_14;
    case 8:
      v1 = 0x54535F4241444D46;
      v4 = 0xEE00534E4F495441;
LABEL_14:
      v6 = (void *)MEMORY[0x23B812F68](v1, v4);
      v7 = CAFUILocalizedStringForKey(v6);

      v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      break;
    default:
      v2 = 0;
      break;
  }
  return v2;
}

uint64_t CAFUITileBaseCell.isHighlightable.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC0))();
}

uint64_t CAFUITileBaseCell.isCellEnabled.getter()
{
  return 1;
}

uint64_t CAFUITileBaseCell.isParentCell.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_isParentCell);
  swift_beginAccess();
  return *v1;
}

void *CAFUITileBaseCell.detailView.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v12;

  v1 = type metadata accessor for CAFUIAutomakerSettingConfiguration(0);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v0 + OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_automakerSettingConfiguration;
  swift_beginAccess();
  outlined init with copy of UIListContentConfiguration?(v8, (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1))
  {
    outlined destroy of UIContentConfiguration?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
    return 0;
  }
  else
  {
    outlined init with copy of CAFUIAutomakerSettingConfiguration((uint64_t)v7, (uint64_t)v4);
    outlined destroy of UIContentConfiguration?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
    v9 = *(void **)&v4[*(int *)(v1 + 20)];
    v10 = v9;
    outlined destroy of CAFUIAutomakerSettingConfiguration((uint64_t)v4);
  }
  return v9;
}

uint64_t CAFUITileBaseCell.automakerSettingConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_automakerSettingConfiguration;
  swift_beginAccess();
  return outlined init with copy of UIListContentConfiguration?(v3, a1, (uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
}

uint64_t CAFUITileBaseCell.automakerSettingConfiguration.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v1 + OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_automakerSettingConfiguration;
  swift_beginAccess();
  outlined assign with copy of CAFUIAutomakerSettingConfiguration?(a1, v6);
  swift_endAccess();
  outlined init with copy of UIListContentConfiguration?(v6, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  v7 = type metadata accessor for CAFUIAutomakerSettingConfiguration(0);
  LODWORD(v6) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7);
  outlined destroy of UIContentConfiguration?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  if ((_DWORD)v6 != 1)
    CAFUITileBaseCell.setupViews()();
  return outlined destroy of UIContentConfiguration?(a1, (uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
}

void (*CAFUITileBaseCell.automakerSettingConfiguration.modify(_QWORD *a1))(_QWORD *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v6 = OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_automakerSettingConfiguration;
  v3[4] = v5;
  v3[5] = v6;
  swift_beginAccess();
  return CAFUITileBaseCell.automakerSettingConfiguration.modify;
}

void CAFUITileBaseCell.automakerSettingConfiguration.modify(_QWORD *a1, char a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = (_QWORD *)*a1;
  swift_endAccess();
  if ((a2 & 1) == 0)
  {
    v4 = v3[4];
    outlined init with copy of UIListContentConfiguration?(v3[3] + v3[5], v4, (uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
    v5 = type metadata accessor for CAFUIAutomakerSettingConfiguration(0);
    v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5);
    outlined destroy of UIContentConfiguration?(v4, (uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
    if (v6 != 1)
      CAFUITileBaseCell.setupViews()();
  }
  free((void *)v3[4]);
  free(v3);
}

uint64_t CAFUITileBaseCell.cafui_contentConfiguration()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = type metadata accessor for UIListContentConfiguration();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UIListContentConfiguration.valueCell()();
  specialized CAFUICellProtocol.updateContentConfigurationProperties(_:)((uint64_t)v5, a1);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

id CAFUITileBaseCell.cafui_backgroundConfiguration()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id result;
  uint64_t v8;

  v2 = type metadata accessor for UIBackgroundConfiguration();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x23B8131A8](v4);
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 16))(a1, v6, v2);
  result = objc_msgSend((id)objc_opt_self(), sel_tableCellPlainBackgroundColor);
  if (result)
  {
    UIBackgroundConfiguration.backgroundColor.setter();
    return (id)(*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
  else
  {
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall CAFUITileBaseCell.setupViews()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t i;
  id v29;
  void *v30;
  char *v31;
  char *v32;
  int *v33;
  uint64_t v34;
  id v35;
  void *v36;
  uint64_t (**v37)();
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int (*v45)(id, uint64_t, uint64_t);
  SEL *v46;
  char *v47;
  void *v48;
  id v49;
  void *v50;
  id v51;
  char *v52;
  uint64_t v53;
  id v54;
  char *v55;
  void *v56;
  id v57;
  char *v58;
  void *v59;
  id v60;
  id v61;
  void *v62;
  id v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  id v69;
  void *v70;
  id v71;
  void *v72;
  id v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  void *v78;
  void (*v79)(char *, uint64_t);
  uint64_t v80;
  void *v81;
  void *v82;
  id v83;
  uint64_t v84;
  void *v85;
  void *v86;
  id v87;
  id v88;
  char *v89;
  uint64_t v90;
  void *v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  id v96;
  id v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  unsigned int (*v123)(uint64_t, uint64_t, uint64_t);
  uint64_t v124;
  char *v125;
  uint64_t v126;
  char *v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  char *v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;

  v1 = type metadata accessor for UIBackgroundConfiguration();
  v130 = *(_QWORD *)(v1 - 8);
  v131 = v1;
  MEMORY[0x24BDAC7A8](v1);
  v129 = (char *)&v115 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UIBackgroundConfiguration?);
  MEMORY[0x24BDAC7A8](v3);
  v128 = (char *)&v115 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = type metadata accessor for CharacterSet();
  v117 = *(_QWORD *)(v118 - 8);
  MEMORY[0x24BDAC7A8](v118);
  v116 = (char *)&v115 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126 = type metadata accessor for UIListContentConfiguration.TextProperties();
  v124 = *(_QWORD *)(v126 - 8);
  MEMORY[0x24BDAC7A8](v126);
  v125 = (char *)&v115 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIListContentConfiguration?);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v115 = (uint64_t)&v115 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v127 = (char *)&v115 - v10;
  v11 = type metadata accessor for UIListContentConfiguration();
  v132 = *(_QWORD *)(v11 - 8);
  v133 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v135 = (char *)&v115 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UICellAccessory.LayoutDimension?);
  MEMORY[0x24BDAC7A8](v13);
  v121 = (char *)&v115 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = type metadata accessor for UICellAccessory.Placement();
  v119 = *(_QWORD *)(v120 - 8);
  MEMORY[0x24BDAC7A8](v120);
  v16 = (char *)&v115 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v123 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UICellAccessory.CustomViewConfiguration();
  v122 = *((_QWORD *)v123 - 1);
  MEMORY[0x24BDAC7A8](v123);
  v18 = (char *)&v115 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v115 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v136 = type metadata accessor for CAFUIAutomakerSettingConfiguration(0);
  v22 = *(_QWORD *)(v136 - 8);
  MEMORY[0x24BDAC7A8](v136);
  v134 = (uint64_t)&v115 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = objc_msgSend(v0, sel_contentView);
  v25 = objc_msgSend(v24, sel_subviews);

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v26 >> 62)
  {
    swift_bridgeObjectRetain();
    v27 = _CocoaArrayWrapper.endIndex.getter();
    if (!v27)
      goto LABEL_10;
  }
  else
  {
    v27 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v27)
      goto LABEL_10;
  }
  if (v27 < 1)
  {
    __break(1u);
LABEL_64:
    __break(1u);
    return;
  }
  for (i = 0; i != v27; ++i)
  {
    if ((v26 & 0xC000000000000001) != 0)
      v29 = (id)MEMORY[0x23B813418](i, v26);
    else
      v29 = *(id *)(v26 + 8 * i + 32);
    v30 = v29;
    objc_msgSend(v29, sel_removeFromSuperview);

  }
LABEL_10:
  swift_bridgeObjectRelease_n();
  v31 = v137;
  v32 = &v137[OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_automakerSettingConfiguration];
  swift_beginAccess();
  outlined init with copy of UIListContentConfiguration?((uint64_t)v32, (uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  v33 = (int *)v136;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v21, 1, v136) == 1)
  {
    outlined destroy of UIContentConfiguration?((uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
    UICollectionViewListCell.accessories.setter();
    return;
  }
  v34 = v134;
  outlined init with take of CAFUIAutomakerSettingConfiguration((uint64_t)v21, v134);
  if (*(_BYTE *)(v34 + v33[6]))
  {
    if (*(_BYTE *)(v34 + v33[6]) == 1)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UICellAccessory>);
      type metadata accessor for UICellAccessory();
      *(_OWORD *)(swift_allocObject() + 16) = xmmword_237579480;
      v35 = specialized static CAFUITileBaseCell.chevronImageView(cell:)();
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UICellAccessory>);
      type metadata accessor for UICellAccessory();
      *(_OWORD *)(swift_allocObject() + 16) = xmmword_237579480;
      specialized static CAFUITileBaseCell.arrowUpImageView(cell:)();
    }
    v36 = v35;
    v37 = (uint64_t (**)())&v16[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (displayed: UICellAccessory.DisplayedState, at: ()))
                                      + 48)];
    v38 = *MEMORY[0x24BEBC058];
    v39 = type metadata accessor for UICellAccessory.DisplayedState();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 104))(v16, v38, v39);
    *v37 = protocol witness for CAFListContentRepresentable.prominenceInfo.getter in conformance CAFPairedDevicesInformation;
    v37[1] = 0;
    (*(void (**)(char *, _QWORD, uint64_t))(v119 + 104))(v16, *MEMORY[0x24BEBC0D0], v120);
    v40 = type metadata accessor for UICellAccessory.LayoutDimension();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v121, 1, 1, v40);
    v41 = v36;
    UICellAccessory.CustomViewConfiguration.init(customView:placement:isHidden:reservedLayoutWidth:tintColor:maintainsFixedSize:)();
    static UICellAccessory.customView(configuration:)();

    (*(void (**)(char *, unsigned int (*)(uint64_t, uint64_t, uint64_t)))(v122 + 8))(v18, v123);
  }
  UICollectionViewListCell.accessories.setter();
  v42 = v127;
  outlined init with copy of UIListContentConfiguration?(v34, (uint64_t)v127, &demangling cache variable for type metadata for UIListContentConfiguration?);
  v44 = v132;
  v43 = v133;
  v45 = *(unsigned int (**)(id, uint64_t, uint64_t))(v132 + 48);
  v46 = (SEL *)&unk_2508DF000;
  if (v45(v42, 1, v133) == 1)
  {
    outlined destroy of UIContentConfiguration?((uint64_t)v42, &demangling cache variable for type metadata for UIListContentConfiguration?);
    goto LABEL_47;
  }
  (*(void (**)(char *, id, uint64_t))(v44 + 32))(v135, v42, v43);
  if (*(_BYTE *)(v34 + v33[7]) == 1)
  {
    v47 = v125;
    UIListContentConfiguration.textProperties.getter();
    v48 = (void *)UIListContentConfiguration.TextProperties.color.getter();
    (*(void (**)(char *, uint64_t))(v124 + 8))(v47, v126);
    v49 = objc_msgSend((id)objc_opt_self(), sel_configurationWithHierarchicalColor_, v48);

    v50 = (void *)MEMORY[0x23B812F68](0x676E697265657473, 0xED00006C65656877);
    v51 = CAFUIImageForSymbolNameWithConfiguration(v50, v49);

    if (v51)
    {
      v52 = (char *)objc_msgSend((id)objc_opt_self(), sel_textAttachmentWithImage_, v51);

      goto LABEL_25;
    }

  }
  v52 = 0;
LABEL_25:
  v53 = UIListContentConfiguration.attributedText.getter();
  v127 = v52;
  v123 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v45;
  if (v53)
  {
    v54 = (id)v53;
    if (v52)
    {
      v55 = v52;
      objc_msgSend(v54, sel_mutableCopy);
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSMutableAttributedString);
      swift_dynamicCast();
      v56 = v138;
      v57 = objc_allocWithZone(MEMORY[0x24BDD1458]);
      v58 = v31;
      v59 = (void *)MEMORY[0x23B812F68](8224, 0xE200000000000000);
      v60 = objc_msgSend(v57, sel_initWithString_, v59);

      objc_msgSend(v56, sel_appendAttributedString_, v60);
      v61 = objc_msgSend((id)objc_opt_self(), sel_attributedStringWithAttachment_, v55);
      objc_msgSend(v56, sel_appendAttributedString_, v61);

      v62 = *(void **)&v58[OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_titleLabel];
      objc_msgSend(v62, sel_setLineBreakMode_, 5);
      v63 = v56;
      objc_msgSend(v62, sel_setAttributedText_, v63);

    }
    else
    {
      v58 = v31;
      v62 = *(void **)&v31[OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_titleLabel];
      objc_msgSend(v62, sel_setLineBreakMode_, 4);
      objc_msgSend(v62, sel_setAttributedText_, v54);
    }
  }
  else if (v52)
  {
    v64 = v52;
    v65 = UIListContentConfiguration.text.getter();
    if (v66)
      v67 = v65;
    else
      v67 = 0;
    if (v66)
      v68 = v66;
    else
      v68 = 0xE000000000000000;
    v58 = v31;
    v69 = objc_allocWithZone(MEMORY[0x24BDD1688]);
    v70 = (void *)MEMORY[0x23B812F68](v67, v68);
    swift_bridgeObjectRelease();
    v54 = objc_msgSend(v69, sel_initWithString_, v70);

    v71 = objc_allocWithZone(MEMORY[0x24BDD1458]);
    v72 = (void *)MEMORY[0x23B812F68](8224, 0xE200000000000000);
    v73 = objc_msgSend(v71, sel_initWithString_, v72);

    objc_msgSend(v54, sel_appendAttributedString_, v73);
    v74 = objc_msgSend((id)objc_opt_self(), sel_attributedStringWithAttachment_, v64);
    objc_msgSend(v54, sel_appendAttributedString_, v74);

    v62 = *(void **)&v58[OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_titleLabel];
    objc_msgSend(v62, sel_setLineBreakMode_, 5);
    objc_msgSend(v62, sel_setAttributedText_, v54);

  }
  else
  {
    v62 = *(void **)&v31[OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_titleLabel];
    objc_msgSend(v62, sel_setLineBreakMode_, 4);
    v75 = UIListContentConfiguration.text.getter();
    if (v76)
    {
      v54 = (id)MEMORY[0x23B812F68](v75);
      swift_bridgeObjectRelease();
    }
    else
    {
      v54 = 0;
    }
    objc_msgSend(v62, sel_setText_, v54);
    v58 = v137;
  }

  v77 = v125;
  UIListContentConfiguration.textProperties.getter();
  v78 = (void *)UIListContentConfiguration.TextProperties.color.getter();
  v79 = *(void (**)(char *, uint64_t))(v124 + 8);
  v80 = v126;
  v79(v77, v126);
  objc_msgSend(v62, sel_setTextColor_, v78);

  v81 = *(void **)&v58[OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_subtitleLabel];
  UIListContentConfiguration.secondaryTextProperties.getter();
  v82 = (void *)UIListContentConfiguration.TextProperties.color.getter();
  v79(v77, v80);
  objc_msgSend(v81, sel_setTextColor_, v82);

  v83 = objc_msgSend(v58, sel_contentView);
  v46 = (SEL *)&unk_2508DF000;
  objc_msgSend(v83, sel_addSubview_, v62);

  v84 = UIListContentConfiguration.image.getter();
  if (v84)
  {
    v85 = (void *)v84;
    v86 = *(void **)&v58[OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_symbolView];
    objc_msgSend(v86, sel_setImage_, v84);
    v87 = specialized CAFUICellProtocol.defaultImageColor.getter();
    objc_msgSend(v86, sel_setTintColor_, v87);

    v88 = objc_msgSend(v58, sel_contentView);
    objc_msgSend(v88, sel_addSubview_, v86);

  }
  v89 = v135;
  v90 = UIListContentConfiguration.secondaryAttributedText.getter();
  if (v90)
  {
    v91 = (void *)v90;
    objc_msgSend(v81, sel_setAttributedText_, v90);
    v31 = v137;
    v92 = objc_msgSend(v137, sel_contentView);
    objc_msgSend(v92, sel_addSubview_, v81);

    v93 = v133;
    v34 = v134;
    v94 = v132;
  }
  else
  {
    v102 = UIListContentConfiguration.secondaryText.getter();
    v31 = v137;
    v93 = v133;
    v34 = v134;
    v94 = v132;
    if (!v103)
      goto LABEL_46;
    v139 = v102;
    v140 = v103;
    v104 = v116;
    static CharacterSet.whitespaces.getter();
    lazy protocol witness table accessor for type String and conformance String();
    v105 = StringProtocol.trimmingCharacters(in:)();
    v107 = v106;
    (*(void (**)(char *, uint64_t))(v117 + 8))(v104, v118);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v108 = HIBYTE(v107) & 0xF;
    if ((v107 & 0x2000000000000000) == 0)
      v108 = v105 & 0xFFFFFFFFFFFFLL;
    if (!v108)
      goto LABEL_46;
    v109 = v115;
    outlined init with copy of UIListContentConfiguration?(v34, v115, &demangling cache variable for type metadata for UIListContentConfiguration?);
    if (v123(v109, 1, v93) == 1)
    {
      outlined destroy of UIContentConfiguration?(v109, &demangling cache variable for type metadata for UIListContentConfiguration?);
      v110 = 0;
    }
    else
    {
      v111 = v109;
      v112 = UIListContentConfiguration.secondaryText.getter();
      v114 = v113;
      (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v111, v93);
      if (v114)
      {
        v110 = (void *)MEMORY[0x23B812F68](v112, v114);
        swift_bridgeObjectRelease();
      }
      else
      {
        v110 = 0;
      }
      v46 = (SEL *)&unk_2508DF000;
    }
    objc_msgSend(v81, sel_setText_, v110);

    v92 = objc_msgSend(v31, sel_contentView);
    objc_msgSend(v92, sel_addSubview_, v81);
  }

LABEL_46:
  (*(void (**)(char *, uint64_t))(v94 + 8))(v89, v93);
  v33 = (int *)v136;
LABEL_47:
  v95 = *(void **)(v34 + v33[5]);
  if (v95)
  {
    v96 = v95;
    v97 = objc_msgSend(v31, sel_contentView);
    objc_msgSend(v97, v46[59], v96);

  }
  CAFUITileBaseCell.setupConstraints()();
  v98 = v129;
  MEMORY[0x23B8131A8]();
  v100 = v130;
  v99 = v131;
  v101 = v128;
  (*(void (**)(char *, char *, uint64_t))(v130 + 16))(v128, v98, v131);
  if (!objc_msgSend((id)objc_opt_self(), sel_tableCellPlainBackgroundColor))
    goto LABEL_64;
  UIBackgroundConfiguration.backgroundColor.setter();
  (*(void (**)(char *, uint64_t))(v100 + 8))(v98, v99);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v100 + 56))(v101, 0, 1, v99);
  MEMORY[0x23B81319C](v101);
  outlined destroy of CAFUIAutomakerSettingConfiguration(v34);
}

Swift::Void __swiftcall CAFUITileBaseCell.setupConstraints()()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  void *v25;
  char *v26;
  uint64_t v27;
  Class isa;
  id v29;
  char *v30;
  uint64_t v31;
  uint64_t (*v32)(char *, uint64_t, uint64_t);
  int v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  int v38;
  void *v39;
  uint64_t v40;
  char *v41;
  id v42;
  id v43;
  id v44;
  id v45;
  char *v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  double v55;
  CGFloat v56;
  double v57;
  CGFloat v58;
  double v59;
  CGFloat v60;
  double v61;
  CGFloat v62;
  id v63;
  char *v64;
  void *v65;
  uint64_t v66;
  id v67;
  id v68;
  id v69;
  id v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  Class v74;
  void *v75;
  id v76;
  char **v77;
  SEL *v78;
  char *v79;
  void *v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  id v89;
  id v90;
  char *v91;
  id v92;
  id v93;
  id v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  id v99;
  id v100;
  id v101;
  char *v102;
  uint64_t v103;
  id v104;
  id v105;
  id v106;
  id v107;
  id v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  int v119;
  id v120;
  char *v121;
  id v122;
  id v123;
  id v124;
  void *v125;
  id v126;
  id v127;
  char **v128;
  void *v129;
  id v130;
  id v131;
  id v132;
  id v133;
  id v134;
  id v135;
  id v136;
  id v137;
  id v138;
  id v139;
  id v140;
  id v141;
  id v142;
  unint64_t *v143;
  unint64_t v144;
  uint64_t v145;
  id v146;
  id v147;
  id v148;
  id v149;
  char *v150;
  double v151;
  double v152;
  id v153;
  uint64_t v154;
  double v155;
  id v156;
  double v157;
  double v158;
  id v159;
  id v160;
  id v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  id v165;
  id v166;
  id v167;
  id v168;
  id v169;
  id v170;
  id v171;
  id v172;
  id v173;
  unint64_t *v174;
  unint64_t v175;
  uint64_t v176;
  id v177;
  double v178;
  char *v179;
  id v180;
  id v181;
  id v182;
  id v183;
  id v184;
  id v185;
  id v186;
  id v187;
  id v188;
  id *v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  id v193;
  uint64_t v194;
  void *v195;
  id v196;
  id v197;
  void *v198;
  id v199;
  char *v200;
  void *v201;
  double v202;
  double v203;
  double v204;
  double v205;
  double v206;
  double v207;
  double v208;
  double v209;
  uint64_t v210;
  double v211;
  id v212;
  id v213;
  id v214;
  id v215;
  id v216;
  id v217;
  id v218;
  id v219;
  uint64_t v220;
  id v221;
  id v222;
  char *v223;
  char *v224;
  void *v225;
  id v226;
  id v227;
  id v228;
  id v229;
  id v230;
  char *v231;
  id v232;
  id v233;
  id v234;
  unint64_t *v235;
  unint64_t v236;
  uint64_t v237;
  id v238;
  double v239;
  double v240;
  char *v241;
  void *v242;
  id v243;
  id v244;
  const char *v245;
  char **v246;
  char *v247;
  id v248;
  SEL *v249;
  void *v250;
  id v251;
  void *v252;
  id v253;
  id v254;
  id v255;
  id v256;
  id v257;
  char *v258;
  id v259;
  id v260;
  id v261;
  id v262;
  id v263;
  id v264;
  id v265;
  unint64_t *v266;
  unint64_t v267;
  uint64_t v268;
  uint64_t v269;
  id v270;
  id v271;
  char *v272;
  id v273;
  char *v274;
  double v275;
  double v276;
  double v277;
  id v278;
  uint64_t v279;
  double v280;
  id v281;
  double v282;
  double v283;
  id v284;
  id v285;
  id v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  id v291;
  id v292;
  uint64_t (*v293)(char *, uint64_t, uint64_t);
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  char *v297;
  uint64_t v298;
  uint64_t v299;
  char *v300;
  char *v301;
  char *v302;
  char *v303;
  uint64_t v304;
  char *v305;
  char *v306;
  uint64_t v307;
  uint64_t v308;
  char *v309;
  uint64_t v310;
  uint64_t v311;
  CGRect v312;

  v299 = type metadata accessor for CharacterSet();
  v298 = *(_QWORD *)(v299 - 8);
  MEMORY[0x24BDAC7A8](v299);
  v297 = (char *)&v290 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for UIListContentConfiguration();
  v3 = *(_QWORD *)(v2 - 8);
  v307 = v2;
  v308 = v3;
  MEMORY[0x24BDAC7A8](v2);
  v302 = (char *)&v290 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIListContentConfiguration?);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v305 = (char *)&v290 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v300 = (char *)&v290 - v8;
  v9 = type metadata accessor for CAFUIAutomakerSettingConfiguration(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v290 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v296 = (uint64_t)&v290 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v295 = (uint64_t)&v290 - v17;
  v18 = MEMORY[0x24BDAC7A8](v16);
  v306 = (char *)&v290 - v19;
  v20 = MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v290 - v21;
  MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v290 - v23;
  v25 = (void *)objc_opt_self();
  v26 = &v0[OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_modifiableTitleConstraints];
  swift_beginAccess();
  v27 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  swift_bridgeObjectRetain();
  v304 = v27;
  isa = Array._bridgeToObjectiveC()().super.isa;
  v29 = v25;
  swift_bridgeObjectRelease();
  objc_msgSend(v25, sel_deactivateConstraints_, isa);

  v309 = v26;
  *(_QWORD *)v26 = MEMORY[0x24BEE4AF8];
  v30 = (char *)v9;
  swift_bridgeObjectRelease();
  v303 = v0;
  v31 = (uint64_t)&v0[OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_automakerSettingConfiguration];
  swift_beginAccess();
  outlined init with copy of UIListContentConfiguration?(v31, (uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v33 = v32(v24, 1, v9);
  v301 = v12;
  if (v33)
  {
    outlined destroy of UIContentConfiguration?((uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
    v35 = v307;
    v34 = v308;
    goto LABEL_18;
  }
  outlined init with copy of CAFUIAutomakerSettingConfiguration((uint64_t)v24, (uint64_t)v12);
  outlined destroy of UIContentConfiguration?((uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  v36 = *(void **)&v12[*(int *)(v9 + 20)];
  v37 = v36;
  outlined destroy of CAFUIAutomakerSettingConfiguration((uint64_t)v12);
  v35 = v307;
  v34 = v308;
  if (v36)
  {
    objc_msgSend(v37, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    outlined init with copy of UIListContentConfiguration?(v31, (uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
    v293 = v32;
    v38 = v32(v22, 1, (uint64_t)v30);
    v39 = v37;
    v294 = v31;
    if (v38)
    {
      outlined destroy of UIContentConfiguration?((uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v34 + 56))(v300, 1, 1, v35);
      goto LABEL_7;
    }
    v40 = (uint64_t)v301;
    outlined init with copy of CAFUIAutomakerSettingConfiguration((uint64_t)v22, (uint64_t)v301);
    outlined destroy of UIContentConfiguration?((uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
    v41 = v300;
    outlined init with copy of UIListContentConfiguration?(v40, (uint64_t)v300, &demangling cache variable for type metadata for UIListContentConfiguration?);
    outlined destroy of CAFUIAutomakerSettingConfiguration(v40);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v41, 1, v35) == 1)
    {
LABEL_7:
      outlined destroy of UIContentConfiguration?((uint64_t)v300, &demangling cache variable for type metadata for UIListContentConfiguration?);
      v42 = objc_msgSend(v37, sel_centerYAnchor);
      v43 = v303;
      v44 = objc_msgSend(v303, sel_contentView);
      v45 = objc_msgSend(v44, sel_centerYAnchor);

      v46 = (char *)&unk_2508DF000;
      v300 = (char *)objc_msgSend(v42, sel_constraintEqualToAnchor_, v45);

      v47 = objc_msgSend(v39, sel_leadingAnchor);
      v48 = objc_msgSend(v43, sel_contentView);
      v49 = objc_msgSend(v48, sel_leadingAnchor);

      v292 = objc_msgSend(v47, sel_constraintEqualToAnchor_, v49);
      v50 = objc_msgSend(v39, sel_trailingAnchor);
      v51 = objc_msgSend(v43, sel_contentView);
      v52 = objc_msgSend(v51, sel_trailingAnchor);

      v291 = objc_msgSend(v50, sel_constraintEqualToAnchor_, v52);
      v53 = objc_msgSend(v39, sel_heightAnchor);
      v54 = objc_msgSend(v43, sel_contentView);
      objc_msgSend(v54, sel_bounds);
      v56 = v55;
      v58 = v57;
      v60 = v59;
      v62 = v61;

      v312.origin.x = v56;
      v312.origin.y = v58;
      v312.size.width = v60;
      v312.size.height = v62;
      v63 = objc_msgSend(v53, sel_constraintGreaterThanOrEqualToConstant_, CGRectGetHeight(v312));

      v64 = v309;
      swift_beginAccess();
      if (*(_QWORD *)v64 >> 62)
      {
        swift_bridgeObjectRetain();
        v65 = (void *)_CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        v66 = (uint64_t)v65 + 4;
        if (!__OFADD__(v65, 4))
        {
LABEL_9:
          v65 = v63;
          specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v66, 1);
          specialized Array._endMutation()();
          v46 = v300;
          MEMORY[0x23B81301C]();
          if (*(_QWORD *)((*(_QWORD *)v64 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(_QWORD *)((*(_QWORD *)v64 & 0xFFFFFFFFFFFFFF8)
                                                                                      + 0x18) >> 1)
          {
LABEL_10:
            v67 = v29;
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            v68 = v292;
            MEMORY[0x23B81301C]();
            if (*(_QWORD *)((*(_QWORD *)v64 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)v64 & 0xFFFFFFFFFFFFFF8)
                                                                                         + 0x18) >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            v69 = v291;
            MEMORY[0x23B81301C]();
            if (*(_QWORD *)((*(_QWORD *)v64 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)v64 & 0xFFFFFFFFFFFFFF8)
                                                                                         + 0x18) >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            v70 = v65;
            MEMORY[0x23B81301C]();
            if (*(_QWORD *)((*(_QWORD *)v64 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)v64 & 0xFFFFFFFFFFFFFF8)
                                                                                         + 0x18) >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            swift_endAccess();

            v34 = v308;
            v29 = v67;
            goto LABEL_17;
          }
LABEL_129:
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          goto LABEL_10;
        }
      }
      else
      {
        v65 = *(void **)((*(_QWORD *)v64 & 0xFFFFFFFFFFFFF8) + 0x10);
        v66 = (uint64_t)v65 + 4;
        if (!__OFADD__(v65, 4))
          goto LABEL_9;
      }
      __break(1u);
      goto LABEL_129;
    }
    v179 = v30;
    v292 = v29;
    outlined destroy of UIContentConfiguration?((uint64_t)v300, &demangling cache variable for type metadata for UIListContentConfiguration?);
    v180 = objc_msgSend(v37, sel_centerYAnchor);
    v181 = v303;
    v182 = objc_msgSend(v303, sel_contentView);
    v183 = objc_msgSend(v182, sel_centerYAnchor);

    v184 = objc_msgSend(v180, sel_constraintEqualToAnchor_, v183);
    v185 = objc_msgSend(v37, sel_trailingAnchor);
    v186 = objc_msgSend(v181, sel_contentView);
    v187 = objc_msgSend(v186, sel_trailingAnchor);

    v188 = objc_msgSend(v185, sel_constraintEqualToAnchor_constant_, v187, -8.0);
    v189 = (id *)v309;
    swift_beginAccess();
    v190 = (unint64_t)*v189;
    if ((unint64_t)*v189 >> 62)
    {
      swift_bridgeObjectRetain();
      v288 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      v192 = v288 + 2;
      if (!__OFADD__(v288, 2))
      {
LABEL_68:
        specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v192, 1);
        specialized Array._endMutation()();
        v190 = (unint64_t)v184;
        MEMORY[0x23B81301C]();
        if (*(_QWORD *)(((unint64_t)*v189 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(_QWORD *)(((unint64_t)*v189 & 0xFFFFFFFFFFFFFF8)
                                                                                             + 0x18) >> 1)
          goto LABEL_69;
        goto LABEL_143;
      }
    }
    else
    {
      v191 = *(_QWORD *)((v190 & 0xFFFFFFFFFFFFF8) + 0x10);
      v192 = v191 + 2;
      if (!__OFADD__(v191, 2))
        goto LABEL_68;
    }
    __break(1u);
LABEL_143:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_69:
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    v193 = v188;
    MEMORY[0x23B81301C]();
    if (*(_QWORD *)(((unint64_t)*v189 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)(((unint64_t)*v189 & 0xFFFFFFFFFFFFFF8)
                                                                                          + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();

    objc_opt_self();
    v194 = swift_dynamicCastObjCClass();
    if (v194)
    {
      v195 = (void *)v194;
      v196 = v39;
      v197 = objc_msgSend(v195, sel_image);
      if (v197)
      {
        v198 = v197;
        objc_msgSend(v195, sel__setContinuousCornerRadius_, 6.0);
        v199 = objc_msgSend(v195, sel_layer);
        objc_msgSend(v199, sel_setMasksToBounds_, 1);

        v200 = (char *)v196;
        v201 = (void *)MEMORY[0x23B812F68](0xD000000000000020, 0x800000023757CD00);
        objc_msgSend(v195, sel_setAccessibilityIdentifier_, v201);
        v300 = v200;

        objc_msgSend(v198, sel_size);
        if (v202 <= 78.0)
          v203 = v202;
        else
          v203 = 78.0;
        objc_msgSend(v198, sel_size);
        v205 = v204;
        objc_msgSend(v198, sel_size);
        if (v205 > 78.0)
        {
          v207 = v206 * 78.0;
          objc_msgSend(v198, sel_size);
          v206 = v207 / v208;
        }
        if (v203 > 50.0)
          v209 = v203;
        else
          v209 = 50.0;
        if (v206 >= 50.0)
          v210 = 1;
        else
          v210 = 2;
        if (v206 >= 50.0)
          v211 = v206;
        else
          v211 = v209;
        if (v206 < 50.0)
          v203 = v209;
        objc_msgSend(v195, sel_setContentMode_, v210);
        v212 = objc_msgSend(v303, sel_contentView);
        v213 = objc_msgSend(v212, sel_heightAnchor);

        v214 = objc_msgSend(v195, sel_heightAnchor);
        v215 = objc_msgSend(v213, sel_constraintGreaterThanOrEqualToAnchor_constant_, v214, 12.0);

        v216 = objc_msgSend(v195, sel_heightAnchor);
        v217 = objc_msgSend(v216, sel_constraintEqualToConstant_, v203);

        v218 = objc_msgSend(v195, sel_widthAnchor);
        v219 = objc_msgSend(v218, sel_constraintEqualToConstant_, v211);

        swift_beginAccess();
        if ((unint64_t)*v189 >> 62)
        {
          swift_bridgeObjectRetain();
          v220 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          v220 = *(_QWORD *)(((unint64_t)*v189 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        v30 = v179;
        v31 = v294;
        if (__OFADD__(v220, 3))
        {
          __break(1u);
        }
        else
        {
          specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v220 + 3, 1);
          specialized Array._endMutation()();
          v215 = v215;
          MEMORY[0x23B81301C]();
          if (*(_QWORD *)(((unint64_t)*v189 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(_QWORD *)(((unint64_t)*v189 & 0xFFFFFFFFFFFFFF8)
                                                                                               + 0x18) >> 1)
          {
LABEL_93:
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            v221 = v217;
            MEMORY[0x23B81301C]();
            if (*(_QWORD *)(((unint64_t)*v189 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)(((unint64_t)*v189 & 0xFFFFFFFFFFFFFF8)
                                                                                                  + 0x18) >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            v222 = v219;
            MEMORY[0x23B81301C]();
            if (*(_QWORD *)(((unint64_t)*v189 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)(((unint64_t)*v189 & 0xFFFFFFFFFFFFFF8)
                                                                                                  + 0x18) >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            swift_endAccess();

            v223 = v300;
            v34 = v308;
            v29 = v292;
            v32 = v293;
            goto LABEL_18;
          }
        }
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        goto LABEL_93;
      }

    }
    else
    {

    }
    v34 = v308;
    v29 = v292;
    v30 = v179;
LABEL_17:
    v32 = v293;
    v31 = v294;
  }
LABEL_18:
  v71 = (uint64_t)v306;
  outlined init with copy of UIListContentConfiguration?(v31, (uint64_t)v306, (uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  if (!v32((char *)v71, 1, (uint64_t)v30))
  {
    v73 = (uint64_t)v301;
    outlined init with copy of CAFUIAutomakerSettingConfiguration(v71, (uint64_t)v301);
    outlined destroy of UIContentConfiguration?(v71, (uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
    v72 = v305;
    outlined init with copy of UIListContentConfiguration?(v73, (uint64_t)v305, &demangling cache variable for type metadata for UIListContentConfiguration?);
    outlined destroy of CAFUIAutomakerSettingConfiguration(v73);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v72, 1, v35) == 1)
      goto LABEL_21;
    v294 = v31;
    v293 = v32;
    v306 = v30;
    v292 = v29;
    (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v302, v72, v35);
    v75 = (void *)UIListContentConfiguration.image.getter();

    v76 = &unk_2508DF000;
    v77 = &selRef__setContinuousCornerRadius_;
    v78 = (SEL *)&unk_2508DF000;
    if (!v75)
    {
      v104 = v303;
      v102 = *(char **)&v303[OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_titleLabel];
      v105 = objc_msgSend(v102, sel_leadingAnchor);
      v106 = objc_msgSend(v104, sel_contentView);
      v107 = objc_msgSend(v106, sel_leadingAnchor);

      v108 = objc_msgSend(v105, sel_constraintEqualToAnchor_constant_, v107, 12.0);
      v109 = v309;
      swift_beginAccess();
      v99 = v108;
      MEMORY[0x23B81301C]();
      if (*(_QWORD *)((*(_QWORD *)v109 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)v109 & 0xFFFFFFFFFFFFFF8)
                                                                                    + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();
      v103 = v294;
LABEL_37:

      v110 = UIListContentConfiguration.secondaryText.getter();
      if (v111)
      {
        v310 = v110;
        v311 = v111;
        v112 = v297;
        static CharacterSet.whitespaces.getter();
        lazy protocol witness table accessor for type String and conformance String();
        v113 = StringProtocol.trimmingCharacters(in:)();
        v115 = v114;
        (*(void (**)(char *, uint64_t))(v298 + 8))(v112, v299);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v116 = HIBYTE(v115) & 0xF;
        if ((v115 & 0x2000000000000000) == 0)
          v116 = v113 & 0xFFFFFFFFFFFFLL;
        if (v116)
        {
          v117 = v295;
          outlined init with copy of UIListContentConfiguration?(v103, v295, (uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
          v118 = v306;
          v119 = v293((char *)v117, 1, (uint64_t)v306);
          v305 = v102;
          if (v119)
          {
            outlined destroy of UIContentConfiguration?(v117, (uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
            goto LABEL_43;
          }
          v241 = v301;
          outlined init with copy of CAFUIAutomakerSettingConfiguration(v117, (uint64_t)v301);
          outlined destroy of UIContentConfiguration?(v117, (uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
          v242 = *(void **)&v241[*((int *)v118 + 5)];
          v243 = v242;
          outlined destroy of CAFUIAutomakerSettingConfiguration((uint64_t)v241);
          if (v242)
          {
            objc_opt_self();
            if (swift_dynamicCastObjCClass())
            {
              v244 = objc_msgSend(v102, sel_bottomAnchor);
              v245 = v77[4];
              v246 = v77;
              v247 = v303;
              v248 = objc_msgSend(v303, v245);
              v249 = v78;
              v250 = v102;
              v251 = objc_msgSend(v248, sel_centerYAnchor);

              v306 = (char *)objc_msgSend(v244, sel_constraintEqualToAnchor_, v251);
              v252 = *(void **)&v247[OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_subtitleLabel];
              v253 = objc_msgSend(v252, sel_topAnchor);
              v254 = objc_msgSend(v247, (SEL)v246 + 2632);
              v255 = objc_msgSend(v254, (SEL)&selRef_automakerSettingService_didUpdateDisabled_ + 4);

              v256 = objc_msgSend(v253, sel_constraintEqualToAnchor_, v255);
              v257 = objc_msgSend(v250, (SEL)v249 + 1608);
              v258 = (char *)&unk_2508DF000;
              v259 = objc_msgSend(v243, sel_leadingAnchor);
              v260 = objc_msgSend(v257, sel_constraintEqualToAnchor_constant_, v259, -12.0);

              v261 = objc_msgSend(v252, sel_leadingAnchor);
              v262 = objc_msgSend(v250, sel_leadingAnchor);
              v301 = (char *)objc_msgSend(v261, sel_constraintEqualToAnchor_, v262);

              v263 = objc_msgSend(v252, (SEL)v249 + 1608);
              v264 = objc_msgSend(v250, (SEL)v249 + 1608);
              v265 = objc_msgSend(v263, sel_constraintEqualToAnchor_, v264);

              v266 = (unint64_t *)v309;
              swift_beginAccess();
              v267 = *v266;
              if (v267 >> 62)
              {
                swift_bridgeObjectRetain();
                v289 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
                v269 = v289 + 5;
                if (!__OFADD__(v289, 5))
                {
LABEL_112:
                  v267 = (unint64_t)v309;
                  specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v269, 1);
                  specialized Array._endMutation()();
                  v258 = v306;
                  MEMORY[0x23B81301C]();
                  if (*(_QWORD *)((*(_QWORD *)v267 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(_QWORD *)((*(_QWORD *)v267 & 0xFFFFFFFFFFFFFF8)
                                                                                               + 0x18) >> 1)
                  {
LABEL_113:
                    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                    specialized Array._endMutation()();
                    v270 = v256;
                    MEMORY[0x23B81301C]();
                    if (*(_QWORD *)((*(_QWORD *)v267 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)v267 & 0xFFFFFFFFFFFFFF8)
                                                                                                  + 0x18) >> 1)
                      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                    specialized Array._endMutation()();
                    v271 = v260;
                    MEMORY[0x23B81301C]();
                    if (*(_QWORD *)((*(_QWORD *)v267 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)v267 & 0xFFFFFFFFFFFFFF8)
                                                                                                  + 0x18) >> 1)
                      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                    specialized Array._endMutation()();
                    v272 = v301;
                    MEMORY[0x23B81301C]();
                    if (*(_QWORD *)((*(_QWORD *)v267 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)v267 & 0xFFFFFFFFFFFFFF8)
                                                                                                  + 0x18) >> 1)
                      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                    specialized Array._endMutation()();
                    v273 = v265;
                    MEMORY[0x23B81301C]();
                    if (*(_QWORD *)((*(_QWORD *)v267 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)v267 & 0xFFFFFFFFFFFFFF8)
                                                                                                  + 0x18) >> 1)
                      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                    specialized Array._endMutation()();
                    swift_endAccess();

                    v274 = v305;
                    objc_msgSend(v305, sel_setNumberOfLines_, 1);
                    LODWORD(v275) = 1144750080;
                    objc_msgSend(v243, sel_setContentCompressionResistancePriority_forAxis_, 0, v275);
                    LODWORD(v276) = 1132068864;
                    objc_msgSend(v274, sel_setContentCompressionResistancePriority_forAxis_, 0, v276);
                    LODWORD(v277) = 1132068864;
                    objc_msgSend(v252, sel_setContentCompressionResistancePriority_forAxis_, 0, v277);
                    v278 = objc_msgSend(v303, sel_contentView);
                    LODWORD(v274) = objc_msgSend(v278, sel_effectiveUserInterfaceLayoutDirection) != 0;

                    objc_msgSend(v252, sel_setTextAlignment_, 2 * v274);
                    v279 = *MEMORY[0x24BEBE1E0];
                    v280 = *MEMORY[0x24BEBB608];
                    v281 = objc_msgSend((id)objc_opt_self(), sel_preferredFontDescriptorWithTextStyle_, *MEMORY[0x24BEBE1E0]);
                    objc_msgSend(v281, sel_pointSize);
                    v283 = v282;

                    v284 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD5F0]), sel_initForTextStyle_, v279);
                    v285 = objc_msgSend((id)objc_opt_self(), sel_systemFontOfSize_weight_, v283, v280);
                    v286 = objc_msgSend(v284, sel_scaledFontForFont_, v285);

                    objc_msgSend(v252, sel_setFont_, v286);
                    v35 = v307;
                    goto LABEL_56;
                  }
LABEL_153:
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                  goto LABEL_113;
                }
              }
              else
              {
                v268 = *(_QWORD *)((v267 & 0xFFFFFFFFFFFFF8) + 0x10);
                v269 = v268 + 5;
                if (!__OFADD__(v268, 5))
                  goto LABEL_112;
              }
              __break(1u);
              goto LABEL_153;
            }

          }
LABEL_43:
          v120 = objc_msgSend(v102, sel_centerYAnchor);
          v121 = v303;
          v122 = objc_msgSend(v303, v77[4]);
          v123 = objc_msgSend(v122, sel_centerYAnchor);

          v124 = objc_msgSend(v120, sel_constraintEqualToAnchor_, v123);
          v125 = *(void **)&v121[OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_subtitleLabel];
          v126 = objc_msgSend(v125, sel_centerYAnchor);
          v127 = objc_msgSend(v121, v77[4]);
          v128 = v77;
          v129 = v102;
          v130 = objc_msgSend(v127, sel_centerYAnchor);

          v131 = objc_msgSend(v126, sel_constraintEqualToAnchor_, v130);
          v132 = objc_msgSend(v129, v78[187]);
          v133 = objc_msgSend(v125, sel_leadingAnchor);
          v134 = objc_msgSend(v132, sel_constraintEqualToAnchor_constant_, v133, -12.0);

          v135 = objc_msgSend(v125, v78[187]);
          v136 = objc_msgSend(v121, (SEL)v128 + 2632);
          v137 = objc_msgSend(v136, v78[187]);

          v138 = objc_msgSend(v135, sel_constraintEqualToAnchor_constant_, v137, -12.0);
          v139 = objc_msgSend(v125, sel_widthAnchor);
          v140 = objc_msgSend(v121, (SEL)v128 + 2632);
          v141 = objc_msgSend(v140, sel_widthAnchor);

          v142 = objc_msgSend(v139, sel_constraintLessThanOrEqualToAnchor_multiplier_, v141, 0.5);
          v143 = (unint64_t *)v309;
          swift_beginAccess();
          v144 = *v143;
          if (v144 >> 62)
          {
            swift_bridgeObjectRetain();
            v145 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            v145 = *(_QWORD *)((v144 & 0xFFFFFFFFFFFFF8) + 0x10);
          }
          v35 = v307;
          if (__OFADD__(v145, 5))
          {
            __break(1u);
          }
          else
          {
            v144 = (unint64_t)v309;
            specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v145 + 5, 1);
            specialized Array._endMutation()();
            v124 = v124;
            MEMORY[0x23B81301C]();
            if (*(_QWORD *)((*(_QWORD *)v144 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(_QWORD *)((*(_QWORD *)v144 & 0xFFFFFFFFFFFFFF8)
                                                                                         + 0x18) >> 1)
            {
LABEL_47:
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();
              v146 = v131;
              MEMORY[0x23B81301C]();
              if (*(_QWORD *)((*(_QWORD *)v144 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)v144 & 0xFFFFFFFFFFFFFF8)
                                                                                            + 0x18) >> 1)
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();
              v147 = v134;
              MEMORY[0x23B81301C]();
              if (*(_QWORD *)((*(_QWORD *)v144 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)v144 & 0xFFFFFFFFFFFFFF8)
                                                                                            + 0x18) >> 1)
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();
              v148 = v138;
              MEMORY[0x23B81301C]();
              if (*(_QWORD *)((*(_QWORD *)v144 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)v144 & 0xFFFFFFFFFFFFFF8)
                                                                                            + 0x18) >> 1)
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();
              v149 = v142;
              MEMORY[0x23B81301C]();
              if (*(_QWORD *)((*(_QWORD *)v144 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)v144 & 0xFFFFFFFFFFFFFF8)
                                                                                            + 0x18) >> 1)
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();
              swift_endAccess();

              v150 = v305;
              objc_msgSend(v305, sel_setNumberOfLines_, 2);
              LODWORD(v151) = 1132068864;
              objc_msgSend(v150, sel_setContentCompressionResistancePriority_forAxis_, 0, v151);
              LODWORD(v152) = 1144750080;
              objc_msgSend(v125, sel_setContentCompressionResistancePriority_forAxis_, 0, v152);
              v153 = objc_msgSend(v303, sel_contentView);
              LODWORD(v150) = objc_msgSend(v153, sel_effectiveUserInterfaceLayoutDirection) == 0;

              objc_msgSend(v125, sel_setTextAlignment_, 2 * v150);
              v154 = *MEMORY[0x24BEBE1D8];
              v155 = *MEMORY[0x24BEBB608];
              v156 = objc_msgSend((id)objc_opt_self(), sel_preferredFontDescriptorWithTextStyle_, *MEMORY[0x24BEBE1D8]);
              objc_msgSend(v156, sel_pointSize);
              v158 = v157;

              v159 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD5F0]), sel_initForTextStyle_, v154);
              v160 = objc_msgSend((id)objc_opt_self(), sel_systemFontOfSize_weight_, v158, v155);
              v161 = objc_msgSend(v159, sel_scaledFontForFont_, v160);

              objc_msgSend(v125, sel_setFont_, v161);
LABEL_56:
              v162 = v308;
              v29 = v292;
LABEL_107:
              (*(void (**)(char *, uint64_t))(v162 + 8))(v302, v35);
              goto LABEL_22;
            }
          }
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          goto LABEL_47;
        }
      }
      v163 = v296;
      outlined init with copy of UIListContentConfiguration?(v103, v296, (uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
      v164 = v306;
      if (v293((char *)v163, 1, (uint64_t)v306))
      {
        outlined destroy of UIContentConfiguration?(v163, (uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
        goto LABEL_59;
      }
      v224 = v301;
      outlined init with copy of CAFUIAutomakerSettingConfiguration(v163, (uint64_t)v301);
      outlined destroy of UIContentConfiguration?(v163, (uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
      v225 = *(void **)&v224[*((int *)v164 + 5)];
      v226 = v225;
      outlined destroy of CAFUIAutomakerSettingConfiguration((uint64_t)v224);
      if (!v225)
      {
LABEL_59:
        v165 = objc_msgSend(v102, sel_centerYAnchor);
        v166 = v303;
        v167 = objc_msgSend(v303, v77[4]);
        v168 = objc_msgSend(v167, sel_centerYAnchor);

        v169 = objc_msgSend(v165, sel_constraintEqualToAnchor_, v168);
        v170 = objc_msgSend(v102, v78[187]);
        v171 = objc_msgSend(v166, v77[4]);
        v172 = objc_msgSend(v171, v78[187]);

        v173 = objc_msgSend(v170, sel_constraintEqualToAnchor_constant_, v172, -12.0);
        v174 = (unint64_t *)v309;
        swift_beginAccess();
        v175 = *v174;
        if (v175 >> 62)
        {
          swift_bridgeObjectRetain();
          v176 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          v176 = *(_QWORD *)((v175 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        v162 = v308;
        v29 = v292;
        if (__OFADD__(v176, 2))
        {
          __break(1u);
        }
        else
        {
          v175 = (unint64_t)v309;
          specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v176 + 2, 1);
          specialized Array._endMutation()();
          v169 = v169;
          MEMORY[0x23B81301C]();
          if (*(_QWORD *)((*(_QWORD *)v175 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(_QWORD *)((*(_QWORD *)v175 & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
          {
LABEL_63:
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            v177 = v173;
            MEMORY[0x23B81301C]();
            if (*(_QWORD *)((*(_QWORD *)v175 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)v175 & 0xFFFFFFFFFFFFFF8)
                                                                                          + 0x18) >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            swift_endAccess();

            LODWORD(v178) = 1144750080;
            objc_msgSend(v102, sel_setContentCompressionResistancePriority_forAxis_, 0, v178);
LABEL_106:
            objc_msgSend(v102, sel_setNumberOfLines_, 2);
            goto LABEL_107;
          }
        }
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        goto LABEL_63;
      }
      v227 = objc_msgSend(v102, sel_centerYAnchor);
      v228 = objc_msgSend(v303, v77[4]);
      v229 = objc_msgSend(v228, sel_centerYAnchor);

      v230 = objc_msgSend(v227, sel_constraintEqualToAnchor_, v229);
      v231 = v102;
      v232 = objc_msgSend(v102, v78[187]);
      v233 = objc_msgSend(v226, sel_leadingAnchor);
      v234 = objc_msgSend(v232, sel_constraintEqualToAnchor_constant_, v233, -12.0);

      v235 = (unint64_t *)v309;
      swift_beginAccess();
      v236 = *v235;
      if (v236 >> 62)
      {
        swift_bridgeObjectRetain();
        v237 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        v237 = *(_QWORD *)((v236 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v162 = v308;
      v29 = v292;
      if (__OFADD__(v237, 2))
      {
        __break(1u);
      }
      else
      {
        v236 = (unint64_t)v309;
        specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v237 + 2, 1);
        specialized Array._endMutation()();
        v230 = v230;
        MEMORY[0x23B81301C]();
        if (*(_QWORD *)((*(_QWORD *)v236 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(_QWORD *)((*(_QWORD *)v236 & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
        {
LABEL_103:
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          v238 = v234;
          MEMORY[0x23B81301C]();
          if (*(_QWORD *)((*(_QWORD *)v236 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)v236 & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          swift_endAccess();

          LODWORD(v239) = 1144750080;
          objc_msgSend(v226, sel_setContentCompressionResistancePriority_forAxis_, 0, v239);
          LODWORD(v240) = 1132068864;
          v102 = v231;
          objc_msgSend(v231, sel_setContentCompressionResistancePriority_forAxis_, 0, v240);

          goto LABEL_106;
        }
      }
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      goto LABEL_103;
    }
    v79 = v303;
    v80 = *(void **)&v303[OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_symbolView];
    v81 = objc_msgSend(v80, sel_leadingAnchor);
    v82 = objc_msgSend(v79, sel_contentView);
    v83 = objc_msgSend(v82, sel_leadingAnchor);

    v84 = objc_msgSend(v81, sel_constraintEqualToAnchor_, v83);
    v85 = objc_msgSend(v80, sel_centerYAnchor);
    v86 = objc_msgSend(v79, sel_contentView);
    v87 = objc_msgSend(v86, sel_centerYAnchor);

    v88 = objc_msgSend(v85, sel_constraintEqualToAnchor_, v87);
    v89 = objc_msgSend(v80, sel_widthAnchor);
    v90 = objc_msgSend(v89, sel_constraintEqualToConstant_, 52.0);

    v91 = *(char **)&v79[OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_titleLabel];
    v92 = objc_msgSend(v91, sel_leadingAnchor);
    v93 = objc_msgSend(v80, sel_trailingAnchor);
    v94 = objc_msgSend(v92, sel_constraintEqualToAnchor_, v93);

    v95 = (unint64_t *)v309;
    swift_beginAccess();
    v96 = *v95;
    if (*v95 >> 62)
    {
      swift_bridgeObjectRetain();
      v287 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      v98 = v287 + 4;
      if (!__OFADD__(v287, 4))
      {
LABEL_26:
        v96 = (unint64_t)v309;
        specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v98, 1);
        specialized Array._endMutation()();
        v76 = v84;
        MEMORY[0x23B81301C]();
        if (*(_QWORD *)((*(_QWORD *)v96 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(_QWORD *)((*(_QWORD *)v96 & 0xFFFFFFFFFFFFFF8)
                                                                                    + 0x18) >> 1)
        {
LABEL_27:
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          v99 = v88;
          MEMORY[0x23B81301C]();
          if (*(_QWORD *)((*(_QWORD *)v96 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)v96 & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          v100 = v90;
          MEMORY[0x23B81301C]();
          v35 = v307;
          if (*(_QWORD *)((*(_QWORD *)v96 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)v96 & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          v101 = v94;
          MEMORY[0x23B81301C]();
          if (*(_QWORD *)((*(_QWORD *)v96 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)v96 & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          swift_endAccess();

          v102 = v91;
          v103 = v294;
          v77 = &selRef__setContinuousCornerRadius_;
          v78 = (SEL *)&unk_2508DF000;
          goto LABEL_37;
        }
LABEL_133:
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        goto LABEL_27;
      }
    }
    else
    {
      v97 = *(_QWORD *)((v96 & 0xFFFFFFFFFFFFF8) + 0x10);
      v98 = v97 + 4;
      if (!__OFADD__(v97, 4))
        goto LABEL_26;
    }
    __break(1u);
    goto LABEL_133;
  }
  outlined destroy of UIContentConfiguration?(v71, (uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  v72 = v305;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v34 + 56))(v305, 1, 1, v35);
LABEL_21:
  outlined destroy of UIContentConfiguration?((uint64_t)v72, &demangling cache variable for type metadata for UIListContentConfiguration?);
LABEL_22:
  swift_bridgeObjectRetain();
  v74 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v29, sel_activateConstraints_, v74);

}

id specialized CAFUICellProtocol.defaultImageColor.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  char **v2;

  v1 = (_QWORD *)MEMORY[0x24BEE4EA0];
  if (((*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x60))() & 1) != 0)
  {
    if (((*(uint64_t (**)(void))((*v1 & *v0) + 0x58))() & 1) != 0
      && ((objc_msgSend(v0, sel_isSelected) & 1) != 0 || objc_msgSend(v0, sel_isHighlighted)))
    {
      v2 = &selRef__carSystemFocusLabelColor;
    }
    else
    {
      v2 = &selRef__carSystemFocusColor;
    }
  }
  else
  {
    v2 = &selRef_grayColor;
  }
  return objc_msgSend((id)objc_opt_self(), *v2);
}

{
  _QWORD *v0;
  _QWORD *v1;
  char **v2;

  v1 = (_QWORD *)MEMORY[0x24BEE4EA0];
  if (((*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC0))() & 1) != 0)
  {
    if (((*(uint64_t (**)(void))((*v1 & *v0) + 0xB8))() & 1) != 0
      && ((objc_msgSend(v0, sel_isSelected) & 1) != 0 || objc_msgSend(v0, sel_isHighlighted)))
    {
      v2 = &selRef__carSystemFocusLabelColor;
    }
    else
    {
      v2 = &selRef__carSystemFocusColor;
    }
  }
  else
  {
    v2 = &selRef_grayColor;
  }
  return objc_msgSend((id)objc_opt_self(), *v2);
}

id specialized CAFUICellProtocol.defaultAccessoryColor.getter()
{
  _QWORD *v0;
  char **v1;

  if (((*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC0))() & 1) != 0)
  {
    if ((objc_msgSend(v0, sel_isSelected) & 1) != 0 || objc_msgSend(v0, sel_isHighlighted))
      v1 = &selRef__carSystemFocusLabelColor;
    else
      v1 = &selRef_secondaryLabelColor;
  }
  else
  {
    v1 = &selRef_secondarySystemFillColor;
  }
  return objc_msgSend((id)objc_opt_self(), *v1);
}

{
  _QWORD *v0;
  char **v1;

  if (((*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x60))() & 1) != 0)
  {
    if ((objc_msgSend(v0, sel_isSelected) & 1) != 0 || objc_msgSend(v0, sel_isHighlighted))
      v1 = &selRef__carSystemFocusLabelColor;
    else
      v1 = &selRef_secondaryLabelColor;
  }
  else
  {
    v1 = &selRef_secondarySystemFillColor;
  }
  return objc_msgSend((id)objc_opt_self(), *v1);
}

id specialized CAFUICellProtocol.defaultSecondaryTextColor.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  char **v2;

  v1 = (_QWORD *)MEMORY[0x24BEE4EA0];
  if (((*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x60))() & 1) != 0)
  {
    if (((*(uint64_t (**)(void))((*v1 & *v0) + 0x58))() & 1) != 0
      && ((objc_msgSend(v0, sel_isSelected) & 1) != 0 || objc_msgSend(v0, sel_isHighlighted)))
    {
      v2 = &selRef__carSystemFocusLabelColor;
    }
    else
    {
      v2 = &selRef_secondaryLabelColor;
    }
  }
  else
  {
    v2 = &selRef_grayColor;
  }
  return objc_msgSend((id)objc_opt_self(), *v2);
}

{
  _QWORD *v0;
  _QWORD *v1;
  char **v2;

  v1 = (_QWORD *)MEMORY[0x24BEE4EA0];
  if (((*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC0))() & 1) != 0)
  {
    if (((*(uint64_t (**)(void))((*v1 & *v0) + 0xB8))() & 1) != 0
      && ((objc_msgSend(v0, sel_isSelected) & 1) != 0 || objc_msgSend(v0, sel_isHighlighted)))
    {
      v2 = &selRef__carSystemFocusLabelColor;
    }
    else
    {
      v2 = &selRef_secondaryLabelColor;
    }
  }
  else
  {
    v2 = &selRef_grayColor;
  }
  return objc_msgSend((id)objc_opt_self(), *v2);
}

id CAFUITileBaseCell.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void CAFUITileBaseCell.init(coder:)()
{
  _BYTE *v0;
  char *v1;
  uint64_t v2;

  v0[OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_isParentCell] = 0;
  v1 = &v0[OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_automakerSettingConfiguration];
  v2 = type metadata accessor for CAFUIAutomakerSettingConfiguration(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

_QWORD *CAFUITileBaseCell.init(frame:)(double a1, double a2, double a3, double a4)
{
  _BYTE *v4;
  char *v9;
  uint64_t v10;
  id v11;
  char *v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  void *v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t (*v26)(void);
  id v27;
  void *v28;
  void *v29;
  uint64_t v30;
  double v31;
  void *v32;
  id v33;
  id v34;
  double v35;
  double v36;
  id v37;
  void *v38;
  id v39;
  id v40;
  uint64_t v41;
  id v42;
  id v43;
  uint64_t v44;
  double v45;
  id v46;
  id v47;
  double v48;
  double v49;
  id v50;
  id v51;
  id v52;
  objc_super v54;

  v4[OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_isParentCell] = 0;
  v9 = &v4[OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_automakerSettingConfiguration];
  v10 = type metadata accessor for CAFUIAutomakerSettingConfiguration(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = objc_allocWithZone(MEMORY[0x24BEBD668]);
  v12 = v4;
  v13 = objc_msgSend(v11, sel_init);
  *(_QWORD *)&v12[OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_symbolView] = v13;
  objc_msgSend(v13, sel_setContentMode_, 4);
  objc_msgSend(v13, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  v14 = v13;
  v15 = (void *)MEMORY[0x23B812F68](0xD00000000000001FLL, 0x800000023757CE70);
  objc_msgSend(v14, sel_setAccessibilityIdentifier_, v15);

  v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD708]), sel_init);
  *(_QWORD *)&v12[OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_titleLabel] = v16;
  objc_msgSend(v16, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  v17 = v16;
  v18 = (void *)MEMORY[0x23B812F68](0xD00000000000001ALL, 0x800000023757CE90);
  objc_msgSend(v17, sel_setAccessibilityIdentifier_, v18);

  v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD708]), sel_init);
  *(_QWORD *)&v12[OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_subtitleLabel] = v19;
  objc_msgSend(v19, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  v20 = v19;
  v21 = (void *)MEMORY[0x23B812F68](0xD00000000000001DLL, 0x800000023757CEB0);
  objc_msgSend(v20, sel_setAccessibilityIdentifier_, v21);

  *(_QWORD *)&v12[OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_modifiableTitleConstraints] = MEMORY[0x24BEE4AF8];
  v54.receiver = v12;
  v54.super_class = (Class)type metadata accessor for CAFUITileBaseCell();
  v22 = objc_msgSendSuper2(&v54, sel_initWithFrame_, a1, a2, a3, a4);
  v23 = (void *)MEMORY[0x23B812F68](0xD000000000000019, 0x800000023757CED0);
  objc_msgSend(v22, sel_setAccessibilityIdentifier_, v23);

  v24 = OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_titleLabel;
  v25 = *(void **)((char *)v22 + OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_titleLabel);
  objc_msgSend(v25, sel_setNumberOfLines_, 2);
  v26 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v22) + 0xB0);
  v27 = v25;
  v28 = (void *)v26();
  objc_msgSend(v27, sel_setTextColor_, v28);

  v29 = *(void **)((char *)v22 + v24);
  v30 = *MEMORY[0x24BEBE1D8];
  v31 = *MEMORY[0x24BEBB600];
  v32 = (void *)objc_opt_self();
  v33 = v29;
  v34 = objc_msgSend(v32, sel_preferredFontDescriptorWithTextStyle_, v30);
  objc_msgSend(v34, sel_pointSize);
  v36 = v35;

  v37 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD5F0]), sel_initForTextStyle_, v30);
  v38 = (void *)objc_opt_self();
  v39 = objc_msgSend(v38, sel_systemFontOfSize_weight_, v36, v31);
  v40 = objc_msgSend(v37, sel_scaledFontForFont_, v39);

  objc_msgSend(v33, sel_setFont_, v40);
  v41 = OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_subtitleLabel;
  v42 = *(id *)((char *)v22 + OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_subtitleLabel);
  v43 = specialized CAFUICellProtocol.defaultSecondaryTextColor.getter();
  objc_msgSend(v42, sel_setTextColor_, v43);

  v44 = *MEMORY[0x24BEBE1E0];
  v45 = *MEMORY[0x24BEBB608];
  v46 = *(id *)((char *)v22 + v41);
  v47 = objc_msgSend(v32, sel_preferredFontDescriptorWithTextStyle_, v44);
  objc_msgSend(v47, sel_pointSize);
  v49 = v48;

  v50 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD5F0]), sel_initForTextStyle_, v44);
  v51 = objc_msgSend(v38, sel_systemFontOfSize_weight_, v49, v45);
  v52 = objc_msgSend(v50, sel_scaledFontForFont_, v51);

  objc_msgSend(v46, sel_setFont_, v52);
  return v22;
}

id CAFUITileBaseCell.updateConfiguration(using:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  id result;
  uint64_t v26;
  uint64_t *boxed_opaque_existential_1;
  void (*v28)(uint64_t *, uint64_t, uint64_t);
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  char v31;
  char *v32;
  uint64_t v33;
  char *v34;
  void (*v35)(char *, char *, uint64_t);
  char v36;
  id v37;
  uint64_t v38;
  id v39;
  char *v40;
  void (*v41)(char *, char *, uint64_t);
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47[5];

  v2 = v1;
  v45 = a1;
  v44 = type metadata accessor for UICellConfigurationState();
  v46 = *(_QWORD *)(v44 - 8);
  MEMORY[0x24BDAC7A8](v44);
  v42 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UIBackgroundConfiguration?);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v43 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v38 - v7;
  v9 = type metadata accessor for UIBackgroundConfiguration();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)&v38 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v38 - v17;
  v19 = *(void **)((char *)v1 + OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_symbolView);
  v20 = specialized CAFUICellProtocol.defaultImageColor.getter();
  objc_msgSend(v19, sel_setTintColor_, v20);

  v21 = *(void **)((char *)v2 + OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_titleLabel);
  v22 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v2) + 0xB0))();
  objc_msgSend(v21, sel_setTextColor_, v22);

  v23 = *(void **)((char *)v2 + OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_subtitleLabel);
  v24 = specialized CAFUICellProtocol.defaultSecondaryTextColor.getter();
  objc_msgSend(v23, sel_setTextColor_, v24);

  MEMORY[0x23B813190]();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return (id)outlined destroy of UIContentConfiguration?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for UIBackgroundConfiguration?);
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v18, v8, v9);
  v26 = v44;
  v47[3] = v44;
  v47[4] = MEMORY[0x24BEBC358];
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v47);
  v28 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v46 + 16);
  v28(boxed_opaque_existential_1, v45, v26);
  UIBackgroundConfiguration.updated(for:)();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v47);
  v41 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v41(v16, v13, v9);
  v39 = (id)objc_opt_self();
  result = objc_msgSend(v39, sel_tableCellPlainBackgroundColor);
  if (!result)
  {
    __break(1u);
    return result;
  }
  v40 = v18;
  UIBackgroundConfiguration.backgroundColor.setter();
  v29 = *(void (**)(char *, uint64_t))(v10 + 8);
  v29(v13, v9);
  v30 = v45;
  v31 = UICellConfigurationState.isHighlighted.getter();
  v32 = v42;
  v28((uint64_t *)v42, v30, v26);
  if ((v31 & 1) != 0)
  {
    v33 = (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v32, v26);
    v34 = v43;
    v35 = v41;
    goto LABEL_7;
  }
  v36 = UICellConfigurationState.isSelected.getter();
  v33 = (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v32, v26);
  v34 = v43;
  v35 = v41;
  if ((v36 & 1) != 0)
  {
LABEL_7:
    if (((*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v2) + 0xB8))(v33) & 1) != 0)
    {
      v37 = objc_msgSend(v39, sel__carSystemFocusColor);
      UIBackgroundConfiguration.backgroundColor.setter();
    }
  }
  v35(v34, v16, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v34, 0, 1, v9);
  MEMORY[0x23B81319C](v34);
  v29(v16, v9);
  return (id)((uint64_t (*)(char *, uint64_t))v29)(v40, v9);
}

uint64_t static CAFUITileBaseCell.disclosureAccessory(cell:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return static CAFUITileBaseCell.disclosureAccessory(cell:)(a1, (uint64_t (*)(uint64_t))specialized static CAFUITileBaseCell.chevronImageView(cell:), a2);
}

uint64_t outlined init with take of CAFUIAutomakerSettingConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CAFUIAutomakerSettingConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t static CAFUITileBaseCell.arrowUpAccessory(cell:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return static CAFUITileBaseCell.disclosureAccessory(cell:)(a1, (uint64_t (*)(uint64_t))specialized static CAFUITileBaseCell.arrowUpImageView(cell:), a2);
}

uint64_t static CAFUITileBaseCell.disclosureAccessory(cell:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  uint64_t (**v17)();
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  _QWORD v23[2];

  v23[1] = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UICellAccessory.LayoutDimension?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UICellAccessory.Placement();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UICellAccessory.CustomViewConfiguration();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (void *)a2(a1);
  v17 = (uint64_t (**)())&v11[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (displayed: UICellAccessory.DisplayedState, at: ()))
                                    + 48)];
  v18 = *MEMORY[0x24BEBC058];
  v19 = type metadata accessor for UICellAccessory.DisplayedState();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v11, v18, v19);
  *v17 = protocol witness for CAFListContentRepresentable.prominenceInfo.getter in conformance CAFPairedDevicesInformation;
  v17[1] = 0;
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x24BEBC0D0], v8);
  v20 = type metadata accessor for UICellAccessory.LayoutDimension();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v7, 1, 1, v20);
  v21 = v16;
  UICellAccessory.CustomViewConfiguration.init(customView:placement:isHidden:reservedLayoutWidth:tintColor:maintainsFixedSize:)();
  static UICellAccessory.customView(configuration:)();

  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

Swift::Void __swiftcall CAFUITileBaseCell.prepareForReuse()()
{
  void *v0;
  objc_super v1;

  v1.receiver = v0;
  v1.super_class = (Class)type metadata accessor for CAFUITileBaseCell();
  objc_msgSendSuper2(&v1, sel_prepareForReuse);
  UICollectionViewListCell.accessories.setter();
}

id closure #1 in static CAFUITileBaseCell.chevronImageView(cell:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  v2 = a2 + 16;
  swift_beginAccess();
  v3 = MEMORY[0x23B813CDC](v2);
  if (!v3)
    return objc_msgSend((id)objc_opt_self(), sel_secondaryLabelColor);
  v4 = (void *)v3;
  v5 = specialized CAFUICellProtocol.defaultSecondaryTextColor.getter();

  return v5;
}

id closure #1 in static CAFUITileBaseCell.arrowUpImageView(cell:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;

  v2 = a2 + 16;
  swift_beginAccess();
  v3 = (_QWORD *)MEMORY[0x23B813CDC](v2);
  if (!v3)
    return objc_msgSend((id)objc_opt_self(), sel_labelColor);
  v4 = v3;
  v5 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v3) + 0xB0))();

  return (id)v5;
}

id CAFUITileBaseCell.__deallocating_deinit()
{
  return CAFUIAutomakerSettingCell.__deallocating_deinit(0, type metadata accessor for CAFUITileBaseCell);
}

uint64_t protocol witness for CAFUICellProtocol.primaryTextColor.getter in conformance CAFUITileBaseCell()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB0))();
}

uint64_t protocol witness for CAFUICellProtocol.isHighlightable.getter in conformance CAFUITileBaseCell()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB8))();
}

uint64_t protocol witness for CAFUICellProtocol.isCellEnabled.getter in conformance CAFUITileBaseCell()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC0))();
}

uint64_t CAFUIAutomakerSettingObserver.delegate.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC5CAFUI29CAFUIAutomakerSettingObserver_delegate;
  swift_beginAccess();
  return MEMORY[0x23B813CDC](v1);
}

uint64_t CAFUIAutomakerSettingObserver.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = v2 + OBJC_IVAR____TtC5CAFUI29CAFUIAutomakerSettingObserver_delegate;
  swift_beginAccess();
  *(_QWORD *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*CAFUIAutomakerSettingObserver.delegate.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC5CAFUI29CAFUIAutomakerSettingObserver_delegate;
  v3[5] = v1;
  v3[6] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v6 = MEMORY[0x23B813CDC](v5);
  v7 = *(_QWORD *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return CAFUIAutomakerSettingObserver.delegate.modify;
}

void CAFUIAutomakerSettingObserver.delegate.modify(uint64_t a1, char a2)
{
  void *v3;

  v3 = *(void **)a1;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + *(_QWORD *)(*(_QWORD *)a1 + 48) + 8) = *(_QWORD *)(*(_QWORD *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

uint64_t CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_2508D37A8, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_254);
}

uint64_t CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateDisabled:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_2508D3758, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_247);
}

uint64_t CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateLimitableUIElement:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_2508D3708, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_240);
}

uint64_t CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateHidden:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_2508D36B8, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_233);
}

uint64_t CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateShowAudioBrandLogo:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_2508D3668, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_226);
}

uint64_t CAFUIAutomakerSettingObserver.BOOLeanSettingService(_:didUpdateOn:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_2508D3618, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_219);
}

uint64_t CAFUIAutomakerSettingObserver.BOOLeanSettingService(_:didUpdateName:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_2508D35C8, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_212);
}

uint64_t CAFUIAutomakerSettingObserver.buttonSettingService(_:didUpdateButtonAction:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_2508D3578, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_205);
}

uint64_t CAFUIAutomakerSettingObserver.buttonSettingService(_:didUpdateName:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_2508D3528, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_198);
}

uint64_t CAFUIAutomakerSettingObserver.deepLinkSettingService(_:didUpdateName:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_2508D34D8, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_191);
}

uint64_t CAFUIAutomakerSettingObserver.deepLinkSettingService(_:didUpdateUserVisibleValue:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_2508D3488, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_184);
}

uint64_t CAFUIAutomakerSettingObserver.floatSettingService(_:didUpdateValue:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_2508D3438, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_177);
}

uint64_t CAFUIAutomakerSettingObserver.floatSettingService(_:didUpdateName:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_2508D33E8, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_170);
}

uint64_t CAFUIAutomakerSettingObserver.floatSettingService(_:didUpdateMaximumSymbolName:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_2508D3398, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_163);
}

uint64_t CAFUIAutomakerSettingObserver.floatSettingService(_:didUpdateMinimumSymbolName:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_2508D3348, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_156);
}

uint64_t CAFUIAutomakerSettingObserver.integerSettingService(_:didUpdateValue:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_2508D32F8, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_149);
}

uint64_t CAFUIAutomakerSettingObserver.integerSettingService(_:didUpdateName:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_2508D32A8, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_142);
}

uint64_t CAFUIAutomakerSettingObserver.integerSettingService(_:didUpdateStepperBarHidden:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_2508D3258, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_135);
}

uint64_t CAFUIAutomakerSettingObserver.integerSettingService(_:didUpdateMaximumSymbolName:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_2508D3208, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_128);
}

uint64_t CAFUIAutomakerSettingObserver.integerSettingService(_:didUpdateMinimumSymbolName:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_2508D31B8, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_121);
}

uint64_t CAFUIAutomakerSettingObserver.integerSettingService(_:didUpdateUserVisibleValue:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_2508D3168, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_114);
}

uint64_t @objc CAFUIAutomakerSettingObserver.deepLinkSettingService(_:didUpdateUserVisibleValue:)(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  id v12;
  id v13;

  if (a4)
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  v12 = a3;
  v13 = a1;
  specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(v12, a5, a6, a7);

  return swift_bridgeObjectRelease();
}

uint64_t CAFUIAutomakerSettingObserver.singleSelectSettingService(_:didUpdateSelectedEntryIndex:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_2508D3118, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_107);
}

uint64_t CAFUIAutomakerSettingObserver.singleSelectSettingService(_:didUpdateSelectSettingEntryList:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_2508D30C8, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_100);
}

uint64_t CAFUIAutomakerSettingObserver.singleSelectSettingService(_:didUpdateName:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_2508D3078, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_93);
}

uint64_t CAFUIAutomakerSettingObserver.singleSelectImageSettingService(_:didUpdateCurrentUserVisibleValue:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_2508D3028, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_86);
}

uint64_t CAFUIAutomakerSettingObserver.singleSelectImageSettingService(_:didUpdateListUserVisibleValue:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_2508D2FD8, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_79);
}

uint64_t CAFUIAutomakerSettingObserver.singleSelectImageSettingService(_:didUpdateImages:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_2508D2F88, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_72);
}

uint64_t CAFUIAutomakerSettingObserver.singleSelectImageSettingService(_:didUpdateName:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_2508D2F38, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_65);
}

uint64_t CAFUIAutomakerSettingObserver.staticSettingService(_:didUpdateUserVisibleValue:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_2508D2EE8, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_58);
}

uint64_t CAFUIAutomakerSettingObserver.staticSettingService(_:didUpdateName:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_2508D2E98, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_51);
}

uint64_t CAFUIAutomakerSettingObserver.multipleSelectSettingService(_:didUpdateSelectedEntryIndices:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_2508D2E48, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_44);
}

uint64_t CAFUIAutomakerSettingObserver.multipleSelectSettingService(_:didUpdateSelectSettingEntryList:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_2508D2DF8, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_37);
}

uint64_t CAFUIAutomakerSettingObserver.multipleSelectSettingService(_:didUpdateName:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_2508D2DA8, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_30);
}

uint64_t CAFUIAutomakerSettingObserver.multipleSelectImageSettingService(_:didUpdateIndicesUserVisibleValue:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_2508D2D58, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_23);
}

uint64_t CAFUIAutomakerSettingObserver.multipleSelectImageSettingService(_:didUpdateListUserVisibleValue:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_2508D2D08, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_16);
}

uint64_t CAFUIAutomakerSettingObserver.multipleSelectImageSettingService(_:didUpdateImages:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_2508D2CB8, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_9);
}

uint64_t CAFUIAutomakerSettingObserver.multipleSelectImageSettingService(_:didUpdateName:)(void *a1)
{
  return specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(a1, (uint64_t)&unk_2508D2C68, (uint64_t)partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:), (uint64_t)&block_descriptor_1);
}

id CAFUIAutomakerSettingObserver.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id CAFUIAutomakerSettingObserver.init()()
{
  char *v0;
  objc_super v2;

  *(_QWORD *)&v0[OBJC_IVAR____TtC5CAFUI29CAFUIAutomakerSettingObserver_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFUIAutomakerSettingObserver();
  return objc_msgSendSuper2(&v2, sel_init);
}

id CAFUIAutomakerSettingObserver.__deallocating_deinit(uint64_t a1)
{
  return CAFUIAutomakerSettingCell.__deallocating_deinit(a1, type metadata accessor for CAFUIAutomakerSettingObserver);
}

uint64_t specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(uint64_t a1, char a2)
{
  uint64_t *v2;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *v2;
  result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v2 = v5;
  v7 = 0;
  if ((result & 1) != 0 && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    if (a1 <= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x18) >> 1)
      return result;
    v7 = 1;
  }
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v8 <= a1)
    v9 = a1;
  else
    v9 = v8;
  result = MEMORY[0x23B813424](v7, v9, a2 & 1, v5);
  *v2 = result;
  return result;
}

id specialized static CAFUITileBaseCell.chevronImageView(cell:)()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  id v13;
  void *v14;
  id v15;
  _QWORD v17[6];

  v0 = *MEMORY[0x24BEBE1D8];
  v1 = (void *)objc_opt_self();
  v2 = objc_msgSend(v1, sel_configurationWithTextStyle_scale_, v0, 1);
  v3 = objc_msgSend(v1, sel_configurationWithWeight_, 6);
  v4 = objc_msgSend(v2, sel_configurationByApplyingConfiguration_, v3);

  v5 = v4;
  v6 = (void *)MEMORY[0x23B812F68](0x2E6E6F7276656863, 0xEF64726177726F66);
  v7 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_withConfiguration_, v6, v5);

  if (v7)
  {
    v8 = objc_msgSend(v7, sel_imageWithRenderingMode_, 2);

  }
  else
  {
    v8 = 0;
  }
  v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD668]), sel_initWithImage_, v8);
  objc_msgSend(v9, sel_setContentMode_, 4);
  v10 = v9;
  v11 = (void *)MEMORY[0x23B812F68](0xD000000000000015, 0x800000023757CEF0);
  objc_msgSend(v10, sel_setAccessibilityIdentifier_, v11);

  v12 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v13 = objc_allocWithZone(MEMORY[0x24BEBD4B8]);
  v17[4] = partial apply for closure #1 in static CAFUITileBaseCell.chevronImageView(cell:);
  v17[5] = v12;
  v17[0] = MEMORY[0x24BDAC760];
  v17[1] = 1107296256;
  v17[2] = thunk for @escaping @callee_guaranteed (@guaranteed UITraitCollection) -> (@owned UIColor);
  v17[3] = &block_descriptor_260;
  v14 = _Block_copy(v17);
  swift_retain();
  v15 = objc_msgSend(v13, sel_initWithDynamicProvider_, v14);
  _Block_release(v14);
  swift_release();
  swift_release();
  objc_msgSend(v10, sel_setTintColor_, v15);

  return v10;
}

void specialized static CAFUITileBaseCell.arrowUpImageView(cell:)()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  id v13;
  void *v14;
  id v15;
  _QWORD v16[6];

  v0 = *MEMORY[0x24BEBE1D8];
  v1 = (void *)objc_opt_self();
  v2 = objc_msgSend(v1, sel_configurationWithTextStyle_scale_, v0, 2);
  v3 = objc_msgSend(v1, sel_configurationWithWeight_, 5);
  v4 = objc_msgSend(v2, sel_configurationByApplyingConfiguration_, v3);

  v5 = v4;
  v6 = (void *)MEMORY[0x23B812F68](0xD000000000000019, 0x800000023757CF40);
  v7 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_withConfiguration_, v6, v5);

  if (v7)
  {
    v8 = objc_msgSend(v7, sel_imageWithRenderingMode_, 2);

    v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD668]), sel_initWithImage_, v8);
    objc_msgSend(v9, sel_setContentMode_, 4);
    v10 = v9;
    v11 = (void *)MEMORY[0x23B812F68](0xD000000000000015, 0x800000023757CF60);
    objc_msgSend(v10, sel_setAccessibilityIdentifier_, v11);

    v12 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v13 = objc_allocWithZone(MEMORY[0x24BEBD4B8]);
    v16[4] = partial apply for closure #1 in static CAFUITileBaseCell.arrowUpImageView(cell:);
    v16[5] = v12;
    v16[0] = MEMORY[0x24BDAC760];
    v16[1] = 1107296256;
    v16[2] = thunk for @escaping @callee_guaranteed (@guaranteed UITraitCollection) -> (@owned UIColor);
    v16[3] = &block_descriptor_264;
    v14 = _Block_copy(v16);
    swift_retain();
    v15 = objc_msgSend(v13, sel_initWithDynamicProvider_, v14);
    _Block_release(v14);
    swift_release();
    swift_release();
    objc_msgSend(v10, sel_setTintColor_, v15);

  }
  else
  {
    __break(1u);
  }
}

uint64_t type metadata accessor for CAFUITileBaseCell()
{
  uint64_t result;

  result = type metadata singleton initialization cache for CAFUITileBaseCell;
  if (!type metadata singleton initialization cache for CAFUITileBaseCell)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t specialized CAFUIAutomakerSettingObserver.automakerSettingService(_:didUpdateProminenceInfo:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  _QWORD *v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD aBlock[6];

  v26 = a3;
  v27 = a4;
  v6 = type metadata accessor for DispatchWorkItemFlags();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = v4 + OBJC_IVAR____TtC5CAFUI29CAFUIAutomakerSettingObserver_delegate;
  swift_beginAccess();
  result = MEMORY[0x23B813CDC](v14);
  if (result)
  {
    v16 = result;
    v25 = v7;
    v17 = *(_QWORD *)(v14 + 8);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    v18 = static OS_dispatch_queue.main.getter();
    v24 = v10;
    v19 = (void *)v18;
    v20 = (_QWORD *)swift_allocObject();
    v20[2] = v16;
    v20[3] = v17;
    v20[4] = a1;
    aBlock[4] = v26;
    aBlock[5] = v20;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = v27;
    v21 = _Block_copy(aBlock);
    swift_unknownObjectRetain();
    v22 = a1;
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock[0] = MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x23B813184](0, v13, v9, v21);
    _Block_release(v21);
    swift_unknownObjectRelease();

    (*(void (**)(char *, uint64_t))(v25 + 8))(v9, v6);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v24);
  }
  return result;
}

uint64_t type metadata accessor for CAFUIAutomakerSettingObserver()
{
  return objc_opt_self();
}

uint64_t sub_237536574@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(*a1 + OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_isParentCell);
  result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

uint64_t sub_2375365C4(char *a1, _QWORD *a2)
{
  char v2;
  _BYTE *v3;
  uint64_t result;

  v2 = *a1;
  v3 = (_BYTE *)(*a2 + OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_isParentCell);
  result = swift_beginAccess();
  *v3 = v2;
  return result;
}

uint64_t ObjC metadata update function for CAFUITileBaseCell()
{
  return type metadata accessor for CAFUITileBaseCell();
}

void type metadata completion function for CAFUITileBaseCell()
{
  unint64_t v0;

  type metadata accessor for CAFUIAutomakerSettingConfiguration?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

void type metadata accessor for CAFUIAutomakerSettingConfiguration?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for CAFUIAutomakerSettingConfiguration?)
  {
    type metadata accessor for CAFUIAutomakerSettingConfiguration(255);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  }
}

uint64_t outlined destroy of weak CAFUIAutomakerSettingObserverDelegate?(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags;
  if (!lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags();
    result = MEMORY[0x23B813BE0](MEMORY[0x24BEE5468], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags);
  }
  return result;
}

uint64_t objectdestroyTm()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CAFUIAutomakerSettingObserver.settingUpdated(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 8))(v2, ObjectType, v1);
}

uint64_t sub_237536894()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

id partial apply for closure #1 in static CAFUITileBaseCell.chevronImageView(cell:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in static CAFUITileBaseCell.chevronImageView(cell:)(a1, v1);
}

id partial apply for closure #1 in static CAFUITileBaseCell.arrowUpImageView(cell:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in static CAFUITileBaseCell.arrowUpImageView(cell:)(a1, v1);
}

id CAFUIAccountManager.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

uint64_t CAFUIAccountManager.firstName.getter()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC5CAFUI19CAFUIAccountManager_account);
  if (!v1)
    return 0;
  v2 = objc_msgSend(v1, sel_aa_firstName);
  if (!v2)
    return 0;
  v3 = v2;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

id CAFUIAccountManager.init()()
{
  char *v0;
  uint64_t v1;
  void *v2;
  char *v3;
  id v4;
  id v5;
  id v6;
  objc_super v8;

  v1 = OBJC_IVAR____TtC5CAFUI19CAFUIAccountManager_accountStore;
  v2 = (void *)objc_opt_self();
  v3 = v0;
  v4 = objc_msgSend(v2, sel_defaultStore);
  *(_QWORD *)&v0[v1] = v4;
  v5 = objc_msgSend(v4, sel_aa_primaryAppleAccount);
  *(_QWORD *)&v3[OBJC_IVAR____TtC5CAFUI19CAFUIAccountManager_account] = v5;
  v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE04D48]), sel_initWithAppleAccount_grandSlamAccount_accountStore_, v5, 0, v4);
  *(_QWORD *)&v3[OBJC_IVAR____TtC5CAFUI19CAFUIAccountManager_pictureStore] = v6;

  v8.receiver = v3;
  v8.super_class = (Class)type metadata accessor for CAFUIAccountManager();
  return objc_msgSendSuper2(&v8, sel_init);
}

uint64_t type metadata accessor for CAFUIAccountManager()
{
  return objc_opt_self();
}

id CAFUIAccountManager.avatarImage(diameter:)()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC5CAFUI19CAFUIAccountManager_pictureStore);
  objc_msgSend(v1, sel_setPictureDiameter_);
  return objc_msgSend(v1, sel_profilePictureForAccountOwner);
}

id CAFUIAccountManager.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFUIAccountManager();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void CAFUIImageRepresentableItem.init(name:image:decoratorImage:enabled:userInfo:accentColor:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  *(_QWORD *)(a8 + 72) = 0;
  *(_OWORD *)(a8 + 40) = 0u;
  *(_OWORD *)(a8 + 56) = 0u;
  *(_QWORD *)a8 = a1;
  *(_QWORD *)(a8 + 8) = a2;
  *(_QWORD *)(a8 + 16) = a3;
  *(_QWORD *)(a8 + 24) = a4;
  *(_BYTE *)(a8 + 32) = a5;
  outlined assign with take of Any?(a6, a8 + 40);

  *(_QWORD *)(a8 + 72) = a7;
}

uint64_t CAFUIImageRepresentable.toggle(index:)(unint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v23;
  unint64_t v24;
  os_log_type_t v25;
  char *v26;
  _QWORD *v27;
  char v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t result;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;

  v7 = type metadata accessor for IndexPath();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v48 - v13;
  v15 = MEMORY[0x24BEE4AF8];
  v56 = MEMORY[0x24BEE4AF8];
  if ((a1 & 0x8000000000000000) != 0)
    return v15;
  v51 = v12;
  v16 = *(_QWORD *)((*(uint64_t (**)(char *, uint64_t))(a3 + 40))(a2, a3) + 16);
  swift_bridgeObjectRelease();
  if (v16 <= a1)
    return v15;
  v50 = v11;
  v54 = 0;
  v55 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v52 = v3;
  v17 = (*(uint64_t (**)(char *))(*(_QWORD *)(a3 + 8) + 8))(a2);
  v49 = a3;
  v19 = v18;
  swift_bridgeObjectRelease();
  v54 = v17;
  v55 = v19;
  v20 = v49;
  v21._object = (void *)0x800000023757CFD0;
  v21._countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v21);
  v53 = a1;
  v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23 = v54;
  v24 = v55;
  v25 = static os_log_type_t.info.getter();
  specialized static CAFUILogger.log(_:message:function:file:line:)(v25, v23, v24, 0x6928656C67676F74, 0xEE00293A7865646ELL);
  swift_bridgeObjectRelease();
  v26 = a2;
  v27 = (_QWORD *)(*(uint64_t (**)(char *, uint64_t))(v20 + 48))(a2, v20);
  v54 = (uint64_t)v27;
  v28 = specialized Sequence<>.contains(_:)(a1, (uint64_t)v27);
  v29 = *(char **)(v20 + 32);
  if ((v28 & 1) == 0 || (((uint64_t (*)(char *, uint64_t))v29)(v26, v20) & 1) == 0)
  {
LABEL_12:
    v48 = v26;
    if ((((uint64_t (*)(char *, uint64_t))v29)(v26, v20) & 1) == 0)
    {
      if ((specialized Sequence<>.contains(_:)(a1, (uint64_t)v27) & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return v15;
      }
      v34 = v27[2];
      if (v34)
      {
        v53 = v15;
        swift_bridgeObjectRetain();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v34, 0);
        v35 = 0;
        v15 = v53;
        v36 = v51;
        do
        {
          MEMORY[0x23B812638](v27[v35 + 4], 0);
          v53 = v15;
          v38 = *(_QWORD *)(v15 + 16);
          v37 = *(_QWORD *)(v15 + 24);
          if (v38 >= v37 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1, v38 + 1, 1);
            v36 = v51;
            v15 = v53;
          }
          ++v35;
          *(_QWORD *)(v15 + 16) = v38 + 1;
          (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v15+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v38, v14, v36);
        }
        while (v34 != v35);
        swift_bridgeObjectRelease_n();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      specialized Array.append<A>(contentsOf:)(v15);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      v39 = swift_allocObject();
      *(_OWORD *)(v39 + 16) = xmmword_237579480;
      *(_QWORD *)(v39 + 32) = a1;
      v54 = v39;
      v20 = v49;
LABEL_30:
      v29 = v48;
      goto LABEL_49;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
LABEL_14:
      v33 = v27[2];
      v32 = v27[3];
      if (v33 >= v32 >> 1)
        v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v32 > 1), v33 + 1, 1, v27);
      v27[2] = v33 + 1;
      v27[v33 + 4] = a1;
      v54 = (uint64_t)v27;
      goto LABEL_30;
    }
LABEL_59:
    v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27[2] + 1, 1, v27);
    goto LABEL_14;
  }
  v14 = v26;
  v30 = v27[2];
  if (!v30)
  {
    v15 = 0;
    goto LABEL_48;
  }
  if (v27[4] != a1)
  {
    if (v30 == 1)
    {
      v15 = 1;
      goto LABEL_48;
    }
    v43 = 5;
    while (1)
    {
      v15 = v43 - 4;
      if (v27[v43] == a1)
        goto LABEL_8;
      v44 = v43 - 3;
      if (__OFADD__(v15, 1))
        break;
      ++v43;
      if (v44 == v30)
      {
        v15 = v27[2];
LABEL_48:
        specialized Array.replaceSubrange<A>(_:with:)(v15, v30);
        v29 = v14;
LABEL_49:
        MEMORY[0x23B812638](a1, 0);
        v15 = v56;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_56:
          v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v15 + 16) + 1, 1, v15);
        v46 = *(_QWORD *)(v15 + 16);
        v45 = *(_QWORD *)(v15 + 24);
        if (v46 >= v45 >> 1)
          v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v45 > 1, v46 + 1, 1, v15);
        *(_QWORD *)(v15 + 16) = v46 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v15+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v46, v50, v51);
        v53 = v54;
        swift_bridgeObjectRetain();
        specialized MutableCollection<>.sort(by:)(&v53);
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, char *, uint64_t))(v20 + 56))(v53, v29, v20);
        return v15;
      }
    }
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  v15 = 0;
LABEL_8:
  v31 = v15 + 1;
  if (__OFADD__(v15, 1))
    goto LABEL_61;
  if (v31 == v30)
  {
LABEL_10:
    if ((uint64_t)v30 >= v15)
      goto LABEL_48;
    __break(1u);
    goto LABEL_12;
  }
  v40 = v15 + 5;
  while (1)
  {
    if (v31 < 0)
    {
      __break(1u);
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    if (v40 - 4 >= v30)
      goto LABEL_55;
    v26 = (char *)v27[v40];
    if (v26 == (char *)a1)
      goto LABEL_32;
    if (v40 - 4 != v15)
      break;
LABEL_41:
    if (__OFADD__(v15++, 1))
    {
      __break(1u);
      goto LABEL_58;
    }
    v30 = v27[2];
LABEL_32:
    v41 = v40 - 3;
    ++v40;
    if (v41 == v30)
      goto LABEL_10;
  }
  if (v15 < v30)
  {
    v29 = (char *)v27[v15 + 4];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v27 = specialized _ArrayBuffer._consumeAndCreateNew()(v27);
    v27[v15 + 4] = v26;
    v27[v40] = v29;
    v54 = (uint64_t)v27;
    goto LABEL_41;
  }
  __break(1u);
LABEL_61:
  __break(1u);
  result = swift_release();
  __break(1u);
  return result;
}

id protocol witness for CAFListContentRepresentable.configureCell(_:) in conformance CAFPairedDevicesInformation(uint64_t a1, uint64_t a2)
{
  return CAFUIImageRepresentable.configureCell(_:)(a1, a2, (uint64_t)&protocol witness table for CAFPairedDevicesInformation);
}

id CAFUIImageRepresentable.configureCell(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  uint64_t v30;
  void *v31;
  id v32;
  char *v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  id result;
  id v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;

  v6 = type metadata accessor for UIBackgroundConfiguration();
  v57 = *(_QWORD *)(v6 - 8);
  v58 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v56 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UIBackgroundConfiguration?);
  MEMORY[0x24BDAC7A8](v8);
  v55 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v51 = (uint64_t)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v52 = (uint64_t)&v48 - v13;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIListContentConfiguration?);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (int *)type metadata accessor for CAFUIAutomakerSettingConfiguration(0);
  v50 = *((_QWORD *)v17 - 1);
  MEMORY[0x24BDAC7A8](v17);
  v54 = (uint64_t)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for UIListContentConfiguration();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)&v48 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v25 = (char *)&v48 - v24;
  static UIListContentConfiguration.subtitleCell()();
  v59 = a1;
  specialized CAFUICellProtocol.updateContentConfigurationProperties(_:)((uint64_t)v23, (uint64_t)v25);
  v49 = *(void (**)(char *, uint64_t))(v20 + 8);
  v49(v23, v19);
  v26 = *(_QWORD *)(a3 + 8);
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(a2, v26);
  UIListContentConfiguration.text.setter();
  (*(void (**)(uint64_t, uint64_t))(v26 + 48))(a2, v26);
  v60 = v25;
  UIListContentConfiguration.image.setter();
  v27 = *(_QWORD *)((*(uint64_t (**)(uint64_t, uint64_t))(a3 + 48))(a2, a3) + 16);
  swift_bridgeObjectRelease();
  v53 = v19;
  if (v27 == 1)
  {
    v30 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
    if (v30)
    {
      v31 = (void *)v30;
      v32 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD668]), sel_initWithImage_, v30);

    }
    else
    {
      v32 = 0;
    }
    (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  }
  else
  {
    if (v27)
    {
      (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
    }
    else
    {
      v28 = (void *)MEMORY[0x23B812F68](0x44455443454C4553, 0xED0000454E4F4E5FLL);
      v29 = CAFUILocalizedStringForKey(v28);

      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    v32 = 0;
  }
  v33 = v60;
  UIListContentConfiguration.secondaryText.setter();
  v34 = v53;
  (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v16, v33, v53);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v16, 0, 1, v34);
  v35 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 40);
  v48 = v32;
  v36 = *(_QWORD *)(v35(a2, a3) + 16);
  swift_bridgeObjectRelease();
  LOBYTE(v35) = v36 != 0;
  LOBYTE(v36) = CAFListContentRepresentable.isUILimited.getter(a2, v26);
  v37 = v54;
  outlined init with take of UIListContentConfiguration?((uint64_t)v16, v54);
  *(_QWORD *)(v37 + v17[5]) = v32;
  *(_BYTE *)(v37 + v17[6]) = (_BYTE)v35;
  *(_BYTE *)(v37 + v17[7]) = v36 & 1;
  v38 = v52;
  outlined init with copy of CAFUIAutomakerSettingConfiguration(v37, v52);
  v39 = v50;
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v50 + 56))(v38, 0, 1, v17);
  v40 = v59 + OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_automakerSettingConfiguration;
  swift_beginAccess();
  outlined assign with copy of CAFUIAutomakerSettingConfiguration?(v38, v40);
  swift_endAccess();
  v41 = v51;
  outlined init with copy of UIListContentConfiguration?(v40, v51, (uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  LODWORD(v40) = (*(uint64_t (**)(uint64_t, uint64_t, int *))(v39 + 48))(v41, 1, v17);
  outlined destroy of CAFUIAutomakerSettingConfiguration?(v41);
  if ((_DWORD)v40 != 1)
    CAFUITileBaseCell.setupViews()();
  v42 = outlined destroy of CAFUIAutomakerSettingConfiguration?(v38);
  v43 = v56;
  MEMORY[0x23B8131A8](v42);
  v45 = v57;
  v44 = v58;
  v46 = v55;
  (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v55, v43, v58);
  result = objc_msgSend((id)objc_opt_self(), sel_tableCellPlainBackgroundColor);
  if (result)
  {
    UIBackgroundConfiguration.backgroundColor.setter();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v43, v44);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v46, 0, 1, v44);
    MEMORY[0x23B81319C](v46);

    outlined destroy of CAFUIAutomakerSettingConfiguration(v37);
    return (id)((uint64_t (*)(char *, uint64_t))v49)(v60, v34);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized CAFUICellProtocol.updateContentConfigurationProperties(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  void (*v5)(_BYTE *, _QWORD);
  void *v6;
  id v7;
  void *v8;
  id v9;
  void (*v10)(_BYTE *, _QWORD);
  void (*v11)(_BYTE *, _QWORD);
  id v12;
  id v13;
  void (*v14)(_BYTE *, _QWORD);
  void (*v15)(_BYTE *, _QWORD);
  uint64_t (*v16)(_BYTE *, _QWORD);
  _BYTE v18[32];

  v4 = type metadata accessor for UIListContentConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  CAFUIAutomakerSettingCell.primaryTextColor.getter();
  v5 = (void (*)(_BYTE *, _QWORD))UIListContentConfiguration.textProperties.modify();
  UIListContentConfiguration.TextProperties.color.setter();
  v5(v18, 0);
  v6 = (void *)objc_opt_self();
  v7 = objc_msgSend(v6, sel_preferredFontDescriptorWithTextStyle_, *MEMORY[0x24BEBE1D8]);
  v8 = (void *)objc_opt_self();
  v9 = objc_msgSend(v8, sel_fontWithDescriptor_size_, v7, 0.0);

  v10 = (void (*)(_BYTE *, _QWORD))UIListContentConfiguration.textProperties.modify();
  UIListContentConfiguration.TextProperties.font.setter();
  v10(v18, 0);
  specialized CAFUICellProtocol.defaultSecondaryTextColor.getter();
  v11 = (void (*)(_BYTE *, _QWORD))UIListContentConfiguration.secondaryTextProperties.modify();
  UIListContentConfiguration.TextProperties.color.setter();
  v11(v18, 0);
  v12 = objc_msgSend(v6, sel_preferredFontDescriptorWithTextStyle_, *MEMORY[0x24BEBE1F0]);
  v13 = objc_msgSend(v8, sel_fontWithDescriptor_size_, v12, 0.0);

  v14 = (void (*)(_BYTE *, _QWORD))UIListContentConfiguration.secondaryTextProperties.modify();
  UIListContentConfiguration.TextProperties.font.setter();
  v14(v18, 0);
  UIListContentConfiguration.imageToTextPadding.setter();
  static UIListContentConfiguration.ImageProperties.standardDimension.getter();
  static UIListContentConfiguration.ImageProperties.standardDimension.getter();
  v15 = (void (*)(_BYTE *, _QWORD))UIListContentConfiguration.imageProperties.modify();
  UIListContentConfiguration.ImageProperties.reservedLayoutSize.setter();
  v15(v18, 0);
  specialized CAFUICellProtocol.defaultImageColor.getter();
  v16 = (uint64_t (*)(_BYTE *, _QWORD))UIListContentConfiguration.imageProperties.modify();
  UIListContentConfiguration.ImageProperties.tintColor.setter();
  return v16(v18, 0);
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(_BYTE *, _QWORD);
  void *v9;
  id v10;
  void *v11;
  id v12;
  void (*v13)(_BYTE *, _QWORD);
  void (*v14)(_BYTE *, _QWORD);
  id v15;
  id v16;
  void (*v17)(_BYTE *, _QWORD);
  void (*v18)(_BYTE *, _QWORD);
  uint64_t (*v19)(_BYTE *, _QWORD);
  _BYTE v21[32];

  v3 = v2;
  v6 = type metadata accessor for UIListContentConfiguration();
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v3) + 0xB0))(v7);
  v8 = (void (*)(_BYTE *, _QWORD))UIListContentConfiguration.textProperties.modify();
  UIListContentConfiguration.TextProperties.color.setter();
  v8(v21, 0);
  v9 = (void *)objc_opt_self();
  v10 = objc_msgSend(v9, sel_preferredFontDescriptorWithTextStyle_, *MEMORY[0x24BEBE1D8]);
  v11 = (void *)objc_opt_self();
  v12 = objc_msgSend(v11, sel_fontWithDescriptor_size_, v10, 0.0);

  v13 = (void (*)(_BYTE *, _QWORD))UIListContentConfiguration.textProperties.modify();
  UIListContentConfiguration.TextProperties.font.setter();
  v13(v21, 0);
  specialized CAFUICellProtocol.defaultSecondaryTextColor.getter();
  v14 = (void (*)(_BYTE *, _QWORD))UIListContentConfiguration.secondaryTextProperties.modify();
  UIListContentConfiguration.TextProperties.color.setter();
  v14(v21, 0);
  v15 = objc_msgSend(v9, sel_preferredFontDescriptorWithTextStyle_, *MEMORY[0x24BEBE1F0]);
  v16 = objc_msgSend(v11, sel_fontWithDescriptor_size_, v15, 0.0);

  v17 = (void (*)(_BYTE *, _QWORD))UIListContentConfiguration.secondaryTextProperties.modify();
  UIListContentConfiguration.TextProperties.font.setter();
  v17(v21, 0);
  UIListContentConfiguration.imageToTextPadding.setter();
  static UIListContentConfiguration.ImageProperties.standardDimension.getter();
  static UIListContentConfiguration.ImageProperties.standardDimension.getter();
  v18 = (void (*)(_BYTE *, _QWORD))UIListContentConfiguration.imageProperties.modify();
  UIListContentConfiguration.ImageProperties.reservedLayoutSize.setter();
  v18(v21, 0);
  specialized CAFUICellProtocol.defaultImageColor.getter();
  v19 = (uint64_t (*)(_BYTE *, _QWORD))UIListContentConfiguration.imageProperties.modify();
  UIListContentConfiguration.ImageProperties.tintColor.setter();
  return v19(v21, 0);
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void (*v9)(_BYTE *, _QWORD);
  void *v10;
  id v11;
  void *v12;
  id v13;
  uint64_t (*v14)(_BYTE *, _QWORD);
  uint64_t v15;
  void (*v16)(_BYTE *, _QWORD);
  id v17;
  id v18;
  void (*v19)(_BYTE *, _QWORD);
  uint64_t (*v20)(_BYTE *, _QWORD);
  uint64_t v21;
  uint64_t (*v22)(_BYTE *, _QWORD);
  _BYTE v24[32];

  v3 = v2;
  v6 = type metadata accessor for UIListContentConfiguration();
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  v8 = (_QWORD *)MEMORY[0x24BEE4EA0];
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v3) + 0x90))(v7);
  v9 = (void (*)(_BYTE *, _QWORD))UIListContentConfiguration.textProperties.modify();
  UIListContentConfiguration.TextProperties.color.setter();
  v9(v24, 0);
  v10 = (void *)objc_opt_self();
  v11 = objc_msgSend(v10, sel_preferredFontDescriptorWithTextStyle_, *MEMORY[0x24BEBE1D8]);
  v12 = (void *)objc_opt_self();
  v13 = objc_msgSend(v12, sel_fontWithDescriptor_size_, v11, 0.0);

  v14 = (uint64_t (*)(_BYTE *, _QWORD))UIListContentConfiguration.textProperties.modify();
  UIListContentConfiguration.TextProperties.font.setter();
  v15 = v14(v24, 0);
  (*(void (**)(uint64_t))((*v8 & *v3) + 0x88))(v15);
  v16 = (void (*)(_BYTE *, _QWORD))UIListContentConfiguration.secondaryTextProperties.modify();
  UIListContentConfiguration.TextProperties.color.setter();
  v16(v24, 0);
  v17 = objc_msgSend(v10, sel_preferredFontDescriptorWithTextStyle_, *MEMORY[0x24BEBE1F0]);
  v18 = objc_msgSend(v12, sel_fontWithDescriptor_size_, v17, 0.0);

  v19 = (void (*)(_BYTE *, _QWORD))UIListContentConfiguration.secondaryTextProperties.modify();
  UIListContentConfiguration.TextProperties.font.setter();
  v19(v24, 0);
  UIListContentConfiguration.imageToTextPadding.setter();
  static UIListContentConfiguration.ImageProperties.standardDimension.getter();
  static UIListContentConfiguration.ImageProperties.standardDimension.getter();
  v20 = (uint64_t (*)(_BYTE *, _QWORD))UIListContentConfiguration.imageProperties.modify();
  UIListContentConfiguration.ImageProperties.reservedLayoutSize.setter();
  v21 = v20(v24, 0);
  (*(void (**)(uint64_t))((*v8 & *v3) + 0x78))(v21);
  v22 = (uint64_t (*)(_BYTE *, _QWORD))UIListContentConfiguration.imageProperties.modify();
  UIListContentConfiguration.ImageProperties.tintColor.setter();
  return v22(v24, 0);
}

uint64_t CAFUIImageRepresentable.allowsMultipleSelection.getter()
{
  return 0;
}

id protocol witness for CAFListContentRepresentable.configureCell(_:) in conformance CAFSingleSelectImageSetting(uint64_t a1, uint64_t a2)
{
  return CAFUIImageRepresentable.configureCell(_:)(a1, a2, (uint64_t)&protocol witness table for CAFSingleSelectImageSetting);
}

id protocol witness for CAFListContentRepresentable.configureCell(_:) in conformance CAFMultipleSelectImageSetting(uint64_t a1, uint64_t a2)
{
  return CAFUIImageRepresentable.configureCell(_:)(a1, a2, (uint64_t)&protocol witness table for CAFMultipleSelectImageSetting);
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  _BOOL8 v5;
  BOOL v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  if (*(_QWORD *)(a2 + 32) == result)
    return 1;
  if (v2 == 1)
    return 0;
  for (i = 5; ; ++i)
  {
    v4 = i - 3;
    if (__OFADD__(i - 4, 1))
      break;
    v6 = *(_QWORD *)(a2 + 8 * i) == result;
    v5 = v6;
    v6 = v6 || v4 == v2;
    if (v6)
      return v5;
  }
  __break(1u);
  return result;
}

Swift::Int specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  Swift::Int result;
  _QWORD v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  int64_t v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  int64_t v23;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v23 = v4 + v2;
  else
    v23 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v23, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = *(_QWORD *)(v3 + 16);
  v9 = (*(_QWORD *)(v3 + 24) >> 1) - v8;
  v10 = type metadata accessor for IndexPath();
  if (v9 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v11 = *(_QWORD *)(v10 - 8);
  v12 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v13 = *(_QWORD *)(v11 + 72);
  v14 = v3 + v12 + v13 * v8;
  v15 = a1 + v12;
  v16 = v13 * v2;
  v17 = v14 + v16;
  v18 = v15 + v16;
  if (v15 < v17 && v14 < v18)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v20 = *(_QWORD *)(v3 + 16);
  v21 = __OFADD__(v20, v2);
  v22 = v20 + v2;
  if (!v21)
  {
    *(_QWORD *)(v3 + 16) = v22;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1)
{
  unint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v6 = v5 + v3;
    if (!__OFADD__(v5, v3))
      goto LABEL_5;
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
    goto LABEL_23;
LABEL_5:
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v5 = 1;
  }
  if (v4 >> 62)
    goto LABEL_25;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    swift_bridgeObjectRetain();
    v4 = MEMORY[0x23B813424](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = specialized Array._copyContents(initializing:)(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1);
    if (v11 >= v3)
      break;
LABEL_24:
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 < 1)
    goto LABEL_19;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_19:
    swift_bridgeObjectRelease();
    return specialized Array._endMutation()();
  }
  __break(1u);
  return result;
}

{
  unint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v6 = v5 + v3;
    if (!__OFADD__(v5, v3))
      goto LABEL_5;
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
    goto LABEL_23;
LABEL_5:
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v5 = 1;
  }
  if (v4 >> 62)
    goto LABEL_25;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    swift_bridgeObjectRetain();
    v4 = MEMORY[0x23B813424](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = specialized Array._copyContents(initializing:)(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1);
    if (v11 >= v3)
      break;
LABEL_24:
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 < 1)
    goto LABEL_19;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_19:
    swift_bridgeObjectRelease();
    return specialized Array._endMutation()();
  }
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t result)
{
  int64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  unint64_t v30;
  unint64_t v31;
  id v32;
  int64_t v33;
  int64_t v34;
  unint64_t v35;
  int64_t v36;
  uint64_t v37;
  int64_t v38;
  int64_t v39;
  unint64_t v40;
  int64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  unint64_t v48;

  v4 = v2;
  v5 = result;
  if ((result & 0xC000000000000001) != 0)
  {
    result = __CocoaSet.count.getter();
    v6 = result;
  }
  else
  {
    v6 = *(_QWORD *)(result + 16);
  }
  if ((unint64_t)*v4 >> 62)
  {
    swift_bridgeObjectRetain();
    v20 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    v8 = v20 + v6;
    if (!__OFADD__(v20, v6))
      goto LABEL_6;
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v7 = *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  v8 = v7 + v6;
  if (__OFADD__(v7, v6))
    goto LABEL_24;
LABEL_6:
  v9 = *v4;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v4 = v9;
  v11 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v9 & 0x8000000000000000) == 0 && (v9 & 0x4000000000000000) == 0)
  {
    v12 = v9 & 0xFFFFFFFFFFFFFF8;
    if (v8 <= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_16;
    v11 = 1;
  }
  if (v9 >> 62)
  {
    swift_bridgeObjectRetain();
    v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v13 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v13 <= v8)
    v13 = v8;
  swift_bridgeObjectRetain();
  v14 = MEMORY[0x23B813424](v11, v13, 1, v9);
  swift_bridgeObjectRelease();
  *v4 = v14;
  v12 = v14 & 0xFFFFFFFFFFFFFF8;
LABEL_16:
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (*(_QWORD *)(v12 + 24) >> 1) - v15;
  result = (uint64_t)specialized Sequence._copySequenceContents(initializing:)(&v44, (_QWORD *)(v12 + 8 * v15 + 32), v16, v5);
  if (result < v6)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (result >= 1)
  {
    v17 = *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v18 = __OFADD__(v17, result);
    v19 = v17 + result;
    if (v18)
    {
      __break(1u);
LABEL_33:
      if (!__CocoaSet.Iterator.next()())
        goto LABEL_21;
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      v24 = v43;
      swift_unknownObjectRelease();
      while (2)
      {
        if (!v24)
          goto LABEL_21;
        while (1)
        {
          v26 = *v4 & 0xFFFFFFFFFFFFFF8;
          if (v3 + 1 > *(_QWORD *)(v26 + 0x18) >> 1)
          {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            v26 = *v4 & 0xFFFFFFFFFFFFFF8;
          }
          v27 = *(_QWORD *)(v26 + 24) >> 1;
          if (v3 < v27)
            break;
LABEL_37:
          *(_QWORD *)(v26 + 16) = v3;
        }
        v28 = v26 + 32;
        while (1)
        {
          *(_QWORD *)(v28 + 8 * v3++) = v24;
          v29 = v47;
          if (v44 < 0)
          {
            if (!__CocoaSet.Iterator.next()())
              goto LABEL_74;
            type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
            swift_unknownObjectRetain();
            swift_dynamicCast();
            v24 = v43;
            swift_unknownObjectRelease();
            goto LABEL_49;
          }
          if (!v48)
            break;
          v30 = (v48 - 1) & v48;
          v31 = __clz(__rbit64(v48)) | (v47 << 6);
LABEL_45:
          v24 = *(void **)(*(_QWORD *)(v44 + 48) + 8 * v31);
          v32 = v24;
LABEL_46:
          v47 = v29;
          v48 = v30;
LABEL_49:
          if (!v24)
          {
LABEL_74:
            *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFF8) + 0x10) = v3;
            goto LABEL_21;
          }
          if (v3 >= v27)
          {
            v26 = *v4 & 0xFFFFFFFFFFFFFF8;
            goto LABEL_37;
          }
        }
        v33 = v47 + 1;
        if (__OFADD__(v47, 1))
        {
          __break(1u);
LABEL_98:
          v24 = 0;
          v22 = 0;
          v21 = v1;
LABEL_30:
          v47 = v21;
          v48 = v22;
          continue;
        }
        break;
      }
      v34 = (unint64_t)(v46 + 64) >> 6;
      if (v33 >= v34)
      {
        v24 = 0;
        v30 = 0;
        goto LABEL_46;
      }
      v35 = *(_QWORD *)(v45 + 8 * v33);
      if (!v35)
      {
        v36 = v47 + 2;
        if (v47 + 2 >= v34)
          goto LABEL_71;
        v35 = *(_QWORD *)(v45 + 8 * v36);
        if (!v35)
        {
          v1 = v47 + 3;
          if (v47 + 3 >= v34)
            goto LABEL_72;
          v35 = *(_QWORD *)(v45 + 8 * v1);
          if (v35)
          {
            v33 = v47 + 3;
            goto LABEL_55;
          }
          v36 = v47 + 4;
          if (v47 + 4 >= v34)
          {
            v24 = 0;
            v30 = 0;
            v29 = v47 + 3;
            goto LABEL_46;
          }
          v35 = *(_QWORD *)(v45 + 8 * v36);
          if (!v35)
          {
            v33 = v47 + 5;
            if (v47 + 5 >= v34)
            {
LABEL_72:
              v24 = 0;
              v30 = 0;
              v29 = v36;
              goto LABEL_46;
            }
            v35 = *(_QWORD *)(v45 + 8 * v33);
            if (!v35)
            {
              v33 = v34 - 1;
              v37 = v47 + 6;
              while (v34 != v37)
              {
                v35 = *(_QWORD *)(v45 + 8 * v37++);
                if (v35)
                {
                  v33 = v37 - 1;
                  goto LABEL_55;
                }
              }
LABEL_71:
              v24 = 0;
              v30 = 0;
              v29 = v33;
              goto LABEL_46;
            }
            goto LABEL_55;
          }
        }
        v33 = v36;
      }
LABEL_55:
      v30 = (v35 - 1) & v35;
      v31 = __clz(__rbit64(v35)) + (v33 << 6);
      v29 = v33;
      goto LABEL_45;
    }
    *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10) = v19;
  }
  if (result != v16)
  {
LABEL_21:
    outlined consume of Set<CAFAutomakerSetting>.Iterator._Variant();
    return specialized Array._endMutation()();
  }
LABEL_26:
  v3 = *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  v21 = v47;
  if (v44 < 0)
    goto LABEL_33;
  if (v48)
  {
    v22 = (v48 - 1) & v48;
    v23 = __clz(__rbit64(v48)) | (v47 << 6);
LABEL_29:
    v24 = *(void **)(*(_QWORD *)(v44 + 48) + 8 * v23);
    v25 = v24;
    goto LABEL_30;
  }
  v38 = v47 + 1;
  if (!__OFADD__(v47, 1))
  {
    v39 = (unint64_t)(v46 + 64) >> 6;
    if (v38 >= v39)
    {
      v24 = 0;
      v22 = 0;
      goto LABEL_30;
    }
    v40 = *(_QWORD *)(v45 + 8 * v38);
    if (v40)
      goto LABEL_79;
    v41 = v47 + 2;
    if (v47 + 2 >= v39)
    {
LABEL_95:
      v24 = 0;
      v22 = 0;
      v21 = v38;
      goto LABEL_30;
    }
    v40 = *(_QWORD *)(v45 + 8 * v41);
    if (v40)
      goto LABEL_83;
    v1 = v47 + 3;
    if (v47 + 3 < v39)
    {
      v40 = *(_QWORD *)(v45 + 8 * v1);
      if (v40)
      {
        v38 = v47 + 3;
        goto LABEL_79;
      }
      v41 = v47 + 4;
      if (v47 + 4 >= v39)
        goto LABEL_98;
      v40 = *(_QWORD *)(v45 + 8 * v41);
      if (v40)
      {
LABEL_83:
        v38 = v41;
LABEL_79:
        v22 = (v40 - 1) & v40;
        v23 = __clz(__rbit64(v40)) + (v38 << 6);
        v21 = v38;
        goto LABEL_29;
      }
      v38 = v47 + 5;
      if (v47 + 5 < v39)
      {
        v40 = *(_QWORD *)(v45 + 8 * v38);
        if (!v40)
        {
          v38 = v39 - 1;
          v42 = v47 + 6;
          do
          {
            if (v39 == v42)
              goto LABEL_95;
            v40 = *(_QWORD *)(v45 + 8 * v42++);
          }
          while (!v40);
          v38 = v42 - 1;
        }
        goto LABEL_79;
      }
    }
    v24 = 0;
    v22 = 0;
    v21 = v41;
    goto LABEL_30;
  }
  __break(1u);
  return result;
}

uint64_t CAFUIImageRepresentableItem.name.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

id CAFUIImageRepresentableItem.image.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

void *CAFUIImageRepresentableItem.decoratorImage.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 24);
  v2 = v1;
  return v1;
}

uint64_t CAFUIImageRepresentableItem.enabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t CAFUIImageRepresentableItem.userInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of UIListContentConfiguration?(v1 + 40, a1, &demangling cache variable for type metadata for Any?);
}

uint64_t CAFUIImageRepresentableItem.userInfo.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of Any?(a1, v1 + 40);
}

uint64_t (*CAFUIImageRepresentableItem.userInfo.modify())()
{
  return closure #1 in CAFUINumericInputView.init(configuration:);
}

void *CAFUIImageRepresentableItem.accentColor.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 72);
  v2 = v1;
  return v1;
}

void CAFUIImageRepresentableItem.accentColor.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 72) = a1;
}

uint64_t (*CAFUIImageRepresentableItem.accentColor.modify())()
{
  return closure #1 in CAFUINumericInputView.init(configuration:);
}

uint64_t protocol witness for CAFUIImageRepresentableItemProtocol.name.getter in conformance CAFUIImageRepresentableItem()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

id protocol witness for CAFUIImageRepresentableItemProtocol.image.getter in conformance CAFUIImageRepresentableItem()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

void *protocol witness for CAFUIImageRepresentableItemProtocol.decoratorImage.getter in conformance CAFUIImageRepresentableItem()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 24);
  v2 = v1;
  return v1;
}

uint64_t protocol witness for CAFUIImageRepresentableItemProtocol.enabled.getter in conformance CAFUIImageRepresentableItem()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t protocol witness for CAFUIImageRepresentableItemProtocol.userInfo.getter in conformance CAFUIImageRepresentableItem@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of UIListContentConfiguration?(v1 + 40, a1, &demangling cache variable for type metadata for Any?);
}

void *protocol witness for CAFUIImageRepresentableItemProtocol.accentColor.getter in conformance CAFUIImageRepresentableItem()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 72);
  v2 = v1;
  return v1;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CAFUIImageRepresentableItemProtocol>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4])
          memmove(v12, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[CAFAutomakerSetting]>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CAFUIAutomakerSettingsSection>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4])
          memmove(v12, a4 + 4, 48 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  size_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<IndexPath>);
  v10 = *(_QWORD *)(type metadata accessor for IndexPath() - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  v14 = _swift_stdlib_malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (v15 = v11 == -1) : (v15 = 0), v15))
  {
LABEL_29:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  v16 = *(_QWORD *)(type metadata accessor for IndexPath() - 8);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = (unint64_t)v13 + v17;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(_QWORD *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CAFDeviceAction>);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * v11 - 64;
      v12 = v10 + 32;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32])
          memmove(v12, a4 + 32, v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (char *)MEMORY[0x24BEE4AF8];
      v12 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  Swift::Int v19;
  uint64_t v20;
  Swift::Int v21;
  uint64_t *v22;
  uint64_t v23;
  Swift::Int v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  char v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t i;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  unint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  Swift::Int v95;
  Swift::Int v96;
  uint64_t v97;
  char *__dst;

  v2 = a1;
  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_137;
    if ((unint64_t)v3 >= 2)
    {
      v78 = 0;
      v79 = *v2;
      for (i = 1; i != v3; ++i)
      {
        v81 = *(_QWORD *)(v79 + 8 * i);
        v82 = v78;
        do
        {
          v83 = *(_QWORD *)(v79 + v82);
          if (v81 >= v83)
            break;
          if (!v79)
            goto LABEL_141;
          *(_QWORD *)(v79 + v82 + 8) = v83;
          *(_QWORD *)(v79 + v82) = v81;
          v82 -= 8;
        }
        while (v82 != -8);
        v78 += 8;
      }
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_146;
  v95 = result;
  v96 = v3;
  if (v3 < 2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    __dst = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v11 = (char *)MEMORY[0x24BEE4AF8];
LABEL_103:
      v94 = v8;
      if (v12 >= 2)
      {
        v84 = *v2;
        do
        {
          v85 = v12 - 2;
          if (v12 < 2)
            goto LABEL_132;
          if (!v84)
            goto LABEL_145;
          v86 = v11;
          v87 = v11 + 32;
          v88 = *(_QWORD *)&v11[16 * v85 + 32];
          v89 = *(_QWORD *)&v11[16 * v12 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v84 + 8 * v88), (char *)(v84 + 8 * *(_QWORD *)&v87[16 * v12 - 16]), v84 + 8 * v89, __dst);
          if (v1)
            break;
          if (v89 < v88)
            goto LABEL_133;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v86 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v86);
          if (v85 >= *((_QWORD *)v86 + 2))
            goto LABEL_134;
          v90 = &v86[16 * v85 + 32];
          *(_QWORD *)v90 = v88;
          *((_QWORD *)v90 + 1) = v89;
          v91 = *((_QWORD *)v86 + 2);
          if (v12 > v91)
            goto LABEL_135;
          memmove(&v86[16 * v12 + 16], &v86[16 * v12 + 32], 16 * (v91 - v12));
          v11 = v86;
          *((_QWORD *)v86 + 2) = v91 - 1;
          v12 = v91 - 1;
        }
        while (v91 > 2);
      }
LABEL_114:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v94 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v94 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v7 + 16) = v6;
    v3 = v96;
    v94 = v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *v2;
  v92 = v2;
  v93 = *v2 - 8;
  v11 = (char *)MEMORY[0x24BEE4AF8];
  v97 = *v2;
  while (1)
  {
    v13 = v9++;
    if (v9 < v3)
    {
      v14 = *(_QWORD *)(v10 + 8 * v9);
      v15 = *(_QWORD *)(v10 + 8 * v13);
      v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        v16 = v14;
        while (1)
        {
          v17 = *(_QWORD *)(v10 + 8 * v9);
          if (v14 < v15 == v17 >= v16)
            break;
          ++v9;
          v16 = v17;
          if (v3 == v9)
          {
            v9 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v9 < v13)
          goto LABEL_138;
        if (v13 < v9)
        {
          v18 = v9 - 1;
          v19 = v13;
          do
          {
            if (v19 != v18)
            {
              if (!v10)
                goto LABEL_144;
              v20 = *(_QWORD *)(v10 + 8 * v19);
              *(_QWORD *)(v10 + 8 * v19) = *(_QWORD *)(v10 + 8 * v18);
              *(_QWORD *)(v10 + 8 * v18) = v20;
            }
            v59 = ++v19 < v18--;
          }
          while (v59);
        }
      }
    }
    if (v9 >= v3)
      goto LABEL_47;
    if (__OFSUB__(v9, v13))
      goto LABEL_136;
    if (v9 - v13 >= v95)
      goto LABEL_47;
    v21 = v13 + v95;
    if (__OFADD__(v13, v95))
      goto LABEL_139;
    if (v21 >= v3)
      v21 = v3;
    if (v21 < v13)
      break;
    if (v9 != v21)
    {
      v22 = (uint64_t *)(v93 + 8 * v9);
      do
      {
        v23 = *(_QWORD *)(v10 + 8 * v9);
        v24 = v13;
        v25 = v22;
        do
        {
          v26 = *v25;
          if (v23 >= *v25)
            break;
          if (!v10)
            goto LABEL_142;
          *v25 = v23;
          v25[1] = v26;
          --v25;
          ++v24;
        }
        while (v9 != v24);
        ++v9;
        ++v22;
      }
      while (v9 != v21);
      v9 = v21;
    }
LABEL_47:
    if (v9 < v13)
      goto LABEL_131;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v28 = *((_QWORD *)v11 + 2);
    v27 = *((_QWORD *)v11 + 3);
    v12 = v28 + 1;
    v10 = v97;
    if (v28 >= v27 >> 1)
    {
      v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v27 > 1), v28 + 1, 1, v11);
      v10 = v97;
      v11 = v77;
    }
    *((_QWORD *)v11 + 2) = v12;
    v29 = v11 + 32;
    v30 = &v11[16 * v28 + 32];
    *(_QWORD *)v30 = v13;
    *((_QWORD *)v30 + 1) = v9;
    if (v28)
    {
      while (1)
      {
        v31 = v12 - 1;
        if (v12 >= 4)
        {
          v36 = &v29[16 * v12];
          v37 = *((_QWORD *)v36 - 8);
          v38 = *((_QWORD *)v36 - 7);
          v42 = __OFSUB__(v38, v37);
          v39 = v38 - v37;
          if (v42)
            goto LABEL_120;
          v41 = *((_QWORD *)v36 - 6);
          v40 = *((_QWORD *)v36 - 5);
          v42 = __OFSUB__(v40, v41);
          v34 = v40 - v41;
          v35 = v42;
          if (v42)
            goto LABEL_121;
          v43 = v12 - 2;
          v44 = &v29[16 * v12 - 32];
          v46 = *(_QWORD *)v44;
          v45 = *((_QWORD *)v44 + 1);
          v42 = __OFSUB__(v45, v46);
          v47 = v45 - v46;
          if (v42)
            goto LABEL_123;
          v42 = __OFADD__(v34, v47);
          v48 = v34 + v47;
          if (v42)
            goto LABEL_126;
          if (v48 >= v39)
          {
            v66 = &v29[16 * v31];
            v68 = *(_QWORD *)v66;
            v67 = *((_QWORD *)v66 + 1);
            v42 = __OFSUB__(v67, v68);
            v69 = v67 - v68;
            if (v42)
              goto LABEL_130;
            v59 = v34 < v69;
            goto LABEL_84;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v60 = *((_QWORD *)v11 + 4);
            v61 = *((_QWORD *)v11 + 5);
            v42 = __OFSUB__(v61, v60);
            v53 = v61 - v60;
            v54 = v42;
            goto LABEL_78;
          }
          v33 = *((_QWORD *)v11 + 4);
          v32 = *((_QWORD *)v11 + 5);
          v42 = __OFSUB__(v32, v33);
          v34 = v32 - v33;
          v35 = v42;
        }
        if ((v35 & 1) != 0)
          goto LABEL_122;
        v43 = v12 - 2;
        v49 = &v29[16 * v12 - 32];
        v51 = *(_QWORD *)v49;
        v50 = *((_QWORD *)v49 + 1);
        v52 = __OFSUB__(v50, v51);
        v53 = v50 - v51;
        v54 = v52;
        if (v52)
          goto LABEL_125;
        v55 = &v29[16 * v31];
        v57 = *(_QWORD *)v55;
        v56 = *((_QWORD *)v55 + 1);
        v42 = __OFSUB__(v56, v57);
        v58 = v56 - v57;
        if (v42)
          goto LABEL_128;
        if (__OFADD__(v53, v58))
          goto LABEL_129;
        if (v53 + v58 >= v34)
        {
          v59 = v34 < v58;
LABEL_84:
          if (v59)
            v31 = v43;
          goto LABEL_86;
        }
LABEL_78:
        if ((v54 & 1) != 0)
          goto LABEL_124;
        v62 = &v29[16 * v31];
        v64 = *(_QWORD *)v62;
        v63 = *((_QWORD *)v62 + 1);
        v42 = __OFSUB__(v63, v64);
        v65 = v63 - v64;
        if (v42)
          goto LABEL_127;
        if (v65 < v53)
          goto LABEL_15;
LABEL_86:
        v70 = v31 - 1;
        if (v31 - 1 >= v12)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v10)
          goto LABEL_143;
        v71 = &v29[16 * v70];
        v72 = *(_QWORD *)v71;
        v73 = v29;
        v74 = &v29[16 * v31];
        v75 = *((_QWORD *)v74 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v10 + 8 * *(_QWORD *)v71), (char *)(v10 + 8 * *(_QWORD *)v74), v10 + 8 * v75, __dst);
        if (v1)
          goto LABEL_114;
        if (v75 < v72)
          goto LABEL_117;
        if (v31 > *((_QWORD *)v11 + 2))
          goto LABEL_118;
        *(_QWORD *)v71 = v72;
        *(_QWORD *)&v73[16 * v70 + 8] = v75;
        v76 = *((_QWORD *)v11 + 2);
        if (v31 >= v76)
          goto LABEL_119;
        v12 = v76 - 1;
        memmove(v74, v74 + 16, 16 * (v76 - 1 - v31));
        v29 = v73;
        *((_QWORD *)v11 + 2) = v76 - 1;
        v10 = v97;
        if (v76 <= 2)
          goto LABEL_15;
      }
    }
    v12 = 1;
LABEL_15:
    v3 = v96;
    if (v9 >= v96)
    {
      v8 = v94;
      v2 = v92;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t result;
  char *v22;
  char *v23;
  char *v24;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 7;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 3;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 3;
  v24 = __src;
  v23 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[8 * v13] <= __dst)
        memmove(__dst, a2, 8 * v13);
      v16 = &v4[8 * v13];
      v22 = v16;
      v24 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        v17 = (char *)(a3 - 8);
        while (1)
        {
          v18 = v17 + 8;
          v19 = v6 - 8;
          v20 = *((_QWORD *)v6 - 1);
          if (*((_QWORD *)v16 - 1) >= v20)
          {
            v22 = v16 - 8;
            if (v18 < v16 || v17 >= v16 || v18 != v16)
              *(_QWORD *)v17 = *((_QWORD *)v16 - 1);
            v16 -= 8;
            if (v6 <= v7)
              goto LABEL_42;
          }
          else
          {
            if (v18 != v6 || v17 >= v6)
              *(_QWORD *)v17 = v20;
            v24 = v6 - 8;
            v6 -= 8;
            if (v19 <= v7)
              goto LABEL_42;
          }
          v17 -= 8;
          if (v16 <= v4)
            goto LABEL_42;
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[8 * v10] <= __dst)
      memmove(__dst, __src, 8 * v10);
    v14 = &v4[8 * v10];
    v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        if (*(_QWORD *)v6 >= *(_QWORD *)v4)
        {
          if (v7 != v4)
            *(_QWORD *)v7 = *(_QWORD *)v4;
          v4 += 8;
          v23 = v4;
          v15 = v6;
        }
        else
        {
          v15 = v6 + 8;
          if (v7 < v6 || v7 >= v15 || v7 != v6)
            *(_QWORD *)v7 = *(_QWORD *)v6;
        }
        v7 += 8;
        if (v4 >= v14)
          break;
        v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      v24 = v7;
    }
LABEL_42:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<IndexPath>, (uint64_t (*)(_QWORD))MEMORY[0x24BDCF678]);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<CAFUIEqualizerSlider>, type metadata accessor for CAFUIEqualizerSlider);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CAFUIImageRepresentableItemProtocol>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8)
      memmove(v10 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFUIImageRepresentableItemProtocol);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [CAFAutomakerSetting])>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8)
      memmove(v10 + 4, a4 + 4, 24 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, [CAFAutomakerSetting]));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, CAFAutomakerSetting)>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8)
      memmove(v10 + 4, a4 + 4, 24 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, CAFAutomakerSetting));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[CAFAutomakerSetting]>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 8 * v8)
      memmove(v10 + 4, a4 + 4, 8 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CAFAutomakerSetting]);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CAFUIAutomakerSettingsSection>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[48 * v8])
      memmove(v12, v13, 48 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[48 * v8] || v12 >= &v13[48 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1)
    goto LABEL_34;
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v16 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v16 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v11;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array._copyContents(initializing:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  id *v13;
  id v14;
  uint64_t result;
  void (*v16[4])(id *);

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type [UIViewController] and conformance [A](&lazy protocol witness table cache variable for type [CAFPairedDevice] and conformance [A], &demangling cache variable for type metadata for [CAFPairedDevice]);
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CAFPairedDevice]);
          v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          v14 = *v13;
          ((void (*)(void (**)(id *), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CAFPairedDevice);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  id *v13;
  id v14;
  uint64_t result;
  uint64_t (*v16[4])();

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type [UIViewController] and conformance [A](&lazy protocol witness table cache variable for type [CAFAutomakerSetting] and conformance [A], &demangling cache variable for type metadata for [CAFAutomakerSetting]);
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CAFAutomakerSetting]);
          v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          v14 = *v13;
          ((void (*)(uint64_t (**)(), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  id *v13;
  id v14;
  uint64_t result;
  uint64_t (*v16[4])();

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type [UIViewController] and conformance [A](&lazy protocol witness table cache variable for type [UIViewController] and conformance [A], &demangling cache variable for type metadata for [UIViewController]);
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UIViewController]);
          v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          v14 = *v13;
          ((void (*)(uint64_t (**)(), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIViewController);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_QWORD *specialized Sequence._copySequenceContents(initializing:)(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  int64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;

  v4 = a4;
  v6 = a2;
  v7 = result;
  if ((a4 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
    lazy protocol witness table accessor for type CAFAutomakerSetting and conformance NSObject();
    result = (_QWORD *)Set.Iterator.init(_cocoa:)();
    v4 = v27;
    v8 = v28;
    v9 = v29;
    v10 = v30;
    v11 = v31;
    v24 = v7;
    if (v6)
      goto LABEL_3;
LABEL_36:
    v12 = 0;
LABEL_46:
    *v24 = v4;
    v24[1] = v8;
    v24[2] = v9;
    v24[3] = v10;
    v24[4] = v11;
    return (_QWORD *)v12;
  }
  v10 = 0;
  v20 = -1 << *(_BYTE *)(a4 + 32);
  v8 = a4 + 56;
  v9 = ~v20;
  v21 = -v20;
  if (v21 < 64)
    v22 = ~(-1 << v21);
  else
    v22 = -1;
  v11 = v22 & *(_QWORD *)(a4 + 56);
  v24 = result;
  if (!a2)
    goto LABEL_36;
LABEL_3:
  if (!a3)
  {
    v12 = 0;
    goto LABEL_46;
  }
  if (a3 < 0)
    goto LABEL_48;
  v12 = 0;
  v25 = (unint64_t)(v9 + 64) >> 6;
  v23 = v9;
  while (1)
  {
    if (v4 < 0)
    {
      if (!__CocoaSet.Iterator.next()())
        goto LABEL_45;
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      v15 = v26;
      result = (_QWORD *)swift_unknownObjectRelease();
      if (!v26)
        goto LABEL_45;
      goto LABEL_8;
    }
    if (v11)
    {
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v14 = v13 | (v10 << 6);
      goto LABEL_7;
    }
    v16 = v10 + 1;
    if (__OFADD__(v10, 1))
      break;
    if (v16 >= v25)
    {
      v11 = 0;
      goto LABEL_45;
    }
    v17 = *(_QWORD *)(v8 + 8 * v16);
    if (v17)
      goto LABEL_23;
    v18 = v10 + 2;
    if (v10 + 2 >= v25)
    {
      v11 = 0;
      ++v10;
      goto LABEL_45;
    }
    v17 = *(_QWORD *)(v8 + 8 * v18);
    if (!v17)
    {
      if (v10 + 3 >= v25)
        goto LABEL_42;
      v17 = *(_QWORD *)(v8 + 8 * (v10 + 3));
      if (v17)
      {
        v16 = v10 + 3;
        goto LABEL_23;
      }
      v18 = v10 + 4;
      if (v10 + 4 >= v25)
      {
        v11 = 0;
        v10 += 3;
        goto LABEL_45;
      }
      v17 = *(_QWORD *)(v8 + 8 * v18);
      if (!v17)
      {
        v16 = v10 + 5;
        if (v10 + 5 >= v25)
        {
LABEL_42:
          v11 = 0;
          v10 = v18;
          goto LABEL_45;
        }
        v17 = *(_QWORD *)(v8 + 8 * v16);
        if (!v17)
        {
          v19 = v10 + 6;
          while (v25 != v19)
          {
            v17 = *(_QWORD *)(v8 + 8 * v19++);
            if (v17)
            {
              v16 = v19 - 1;
              goto LABEL_23;
            }
          }
          v11 = 0;
          v10 = v25 - 1;
          goto LABEL_45;
        }
        goto LABEL_23;
      }
    }
    v16 = v18;
LABEL_23:
    v11 = (v17 - 1) & v17;
    v14 = __clz(__rbit64(v17)) + (v16 << 6);
    v10 = v16;
LABEL_7:
    result = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v14);
    v15 = result;
    if (!result)
      goto LABEL_45;
LABEL_8:
    ++v12;
    *v6++ = v15;
    if (v12 == a3)
    {
      v12 = a3;
LABEL_45:
      v9 = v23;
      goto LABEL_46;
    }
  }
  __break(1u);
LABEL_48:
  __break(1u);
  return result;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew()(_QWORD *a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

void specialized _ArrayBuffer._consumeAndCreateNew()(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  JUMPOUT(0x23B813424);
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFUIImageRepresentableItemProtocol);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 8 * a1 + 32;
    v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CAFAutomakerSetting]);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 48 * a1 + 32;
    v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v8 = *(_QWORD *)(type metadata accessor for IndexPath() - 8);
    v9 = *(unsigned __int8 *)(v8 + 80);
    v10 = *(_QWORD *)(v8 + 72);
    v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
    v12 = v10 * v4;
    v13 = a3 + v12;
    v14 = v11 + v12;
    if (v11 >= v13 || v14 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + a1 + 32);
    v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2)
{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *result;
  int64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  v4 = *v2;
  v5 = *((_QWORD *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v9 <= *((_QWORD *)v4 + 3) >> 1)
  {
    if (!v8)
      goto LABEL_21;
  }
  else
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    result = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v11, 1, v4);
    v4 = result;
    if (!v8)
      goto LABEL_21;
  }
  v12 = *((_QWORD *)v4 + 2);
  v13 = __OFSUB__(v12, a2);
  v14 = v12 - a2;
  if (v13)
    goto LABEL_27;
  if ((v14 & 0x8000000000000000) == 0)
  {
    result = &v4[8 * a1 + 32];
    v15 = &v4[8 * a2 + 32];
    if (a1 != a2 || result >= &v15[8 * v14])
      result = (char *)memmove(result, v15, 8 * v14);
    v16 = *((_QWORD *)v4 + 2);
    v13 = __OFADD__(v16, v8);
    v17 = v16 + v8;
    if (!v13)
    {
      *((_QWORD *)v4 + 2) = v17;
LABEL_21:
      *v2 = v4;
      return result;
    }
    goto LABEL_28;
  }
LABEL_29:
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined init with take of UIListContentConfiguration?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIListContentConfiguration?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void destroy for CAFUIImageRepresentableItem(uint64_t a1)
{
  swift_bridgeObjectRelease();

  if (*(_QWORD *)(a1 + 64))
    __swift_destroy_boxed_opaque_existential_1Tm(a1 + 40);

}

uint64_t initializeWithCopy for CAFUIImageRepresentableItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  _OWORD *v7;
  uint64_t v8;
  id v9;
  id v10;
  __int128 v11;
  void *v12;
  id v13;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(void **)(a2 + 16);
  v6 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v7 = (_OWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  v9 = v5;
  v10 = v6;
  if (v8)
  {
    *(_QWORD *)(a1 + 64) = v8;
    (**(void (***)(uint64_t, _OWORD *, uint64_t))(v8 - 8))(a1 + 40, v7, v8);
  }
  else
  {
    v11 = v7[1];
    *(_OWORD *)(a1 + 40) = *v7;
    *(_OWORD *)(a1 + 56) = v11;
  }
  v12 = *(void **)(a2 + 72);
  *(_QWORD *)(a1 + 72) = v12;
  v13 = v12;
  return a1;
}

uint64_t assignWithCopy for CAFUIImageRepresentableItem(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  __int128 v11;
  void *v12;
  void *v13;
  id v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(void **)(a2 + 16);
  v5 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  v6 = v4;

  v7 = *(void **)(a1 + 24);
  v8 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  v9 = v8;

  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 64);
  if (!*(_QWORD *)(a1 + 64))
  {
    if (v10)
    {
      *(_QWORD *)(a1 + 64) = v10;
      (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 40, a2 + 40);
      goto LABEL_8;
    }
LABEL_7:
    v11 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v11;
    goto LABEL_8;
  }
  if (!v10)
  {
    __swift_destroy_boxed_opaque_existential_1Tm(a1 + 40);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)(a1 + 40), (uint64_t *)(a2 + 40));
LABEL_8:
  v12 = *(void **)(a1 + 72);
  v13 = *(void **)(a2 + 72);
  *(_QWORD *)(a1 + 72) = v13;
  v14 = v13;

  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_0(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for CAFUIImageRepresentableItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  __int128 v7;
  void *v8;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);

  v6 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);

  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  if (*(_QWORD *)(a1 + 64))
    __swift_destroy_boxed_opaque_existential_1Tm(a1 + 40);
  v7 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v7;
  v8 = *(void **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);

  return a1;
}

uint64_t getEnumTagSinglePayload for CAFUIImageRepresentableItem(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CAFUIImageRepresentableItem(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CAFUIImageRepresentableItem()
{
  return &type metadata for CAFUIImageRepresentableItem;
}

uint64_t outlined consume of Set<CAFAutomakerSetting>.Iterator._Variant()
{
  return swift_release();
}

uint64_t lazy protocol witness table accessor for type [UIViewController] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x23B813BE0](MEMORY[0x24BEE12E0], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo12CAFEqualizerCG_10CAFCombine0D10ObservableCs5NeverOTg5051_s5CAFUI19CAFUIEqualizerGroupV10equalizersACSaySo12d23CG_tcfc10CAFCombine0E10F55CAFcfu_33_1de7a1dc5ccbaa2477a1dc197ae15632AfJTf3nnnpk_nTf1cn_n(unint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;

  if (a1 >> 62)
    goto LABEL_14;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    result = MEMORY[0x24BEE4AF8];
    if (!v2)
      break;
    v8 = MEMORY[0x24BEE4AF8];
    result = specialized ContiguousArray.reserveCapacity(_:)();
    if (v2 < 0)
    {
      __break(1u);
      return result;
    }
    v4 = 0;
    while (v2 != v4)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v5 = (id)MEMORY[0x23B813418](v4, a1);
      else
        v5 = *(id *)(a1 + 8 * v4 + 32);
      v6 = v5;
      ++v4;
      swift_getKeyPath();
      v7 = v6;
      swift_getAtKeyPath();
      swift_release();

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v2 == v4)
        return v8;
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall SliderView.Coordinator.valueChanged(_:)(UISlider *a1)
{
  uint64_t v1;
  int v2;
  int v3;
  void *v4;
  double v5;

  -[UISlider value](a1, sel_value);
  v3 = v2;
  v4 = *(void **)(v1 + OBJC_IVAR____TtCV5CAFUI10SliderView11Coordinator_range);
  swift_retain();
  swift_retain();
  LODWORD(v5) = v3;
  objc_msgSend(v4, sel_valueRoundedToNearestStepValue_, v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Float>);
  Binding.wrappedValue.setter();
  swift_release();
  swift_release();
}

Swift::Void __swiftcall SliderView.Coordinator.sliderTapped(_:)(UITapGestureRecognizer a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  double v5;
  double v6;
  float v7;
  int v8;
  float v9;
  void *v10;
  double v11;
  id v12;
  CGRect v13;

  v12 = -[objc_class view](a1.super.super.isa, sel_view);
  if (v12)
  {
    objc_opt_self();
    v3 = swift_dynamicCastObjCClass();
    if (v3)
    {
      v4 = (void *)v3;
      -[objc_class locationInView:](a1.super.super.isa, sel_locationInView_, v3);
      v6 = v5;
      objc_msgSend(v4, sel_frame);
      v7 = v6 / CGRectGetHeight(v13);
      objc_msgSend(v4, sel_maximumValue);
      LODWORD(v6) = v8;
      objc_msgSend(v4, sel_minimumValue);
      *(float *)&v6 = (float)(*(float *)&v6 - v9) * v7;
      v10 = *(void **)(v1 + OBJC_IVAR____TtCV5CAFUI10SliderView11Coordinator_range);
      swift_retain();
      swift_retain();
      LODWORD(v11) = LODWORD(v6);
      objc_msgSend(v10, sel_valueRoundedToNearestStepValue_, v11);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Float>);
      Binding.wrappedValue.setter();

      swift_release();
      swift_release();
    }
    else
    {

    }
  }
}

id SliderView.Coordinator.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for SliderView.Coordinator()
{
  return objc_opt_self();
}

char *SliderView.VerticalSlider.init(frame:)(double a1, double a2, double a3, double a4)
{
  char *v4;
  uint64_t v9;
  id v10;
  char *v11;
  char *v12;
  void *v13;
  char *v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  CGAffineTransform v19;
  objc_super v20;

  v9 = OBJC_IVAR____TtCV5CAFUI10SliderView14VerticalSlider_slider;
  v10 = objc_allocWithZone(MEMORY[0x24BEBD958]);
  v11 = v4;
  *(_QWORD *)&v4[v9] = objc_msgSend(v10, sel_init);

  v20.receiver = v11;
  v20.super_class = (Class)type metadata accessor for SliderView.VerticalSlider();
  v12 = (char *)objc_msgSendSuper2(&v20, sel_initWithFrame_, a1, a2, a3, a4);
  v13 = *(void **)&v12[OBJC_IVAR____TtCV5CAFUI10SliderView14VerticalSlider_slider];
  CGAffineTransformMakeRotation(&v19, -1.57079633);
  v17 = *(_OWORD *)&v19.c;
  v18 = *(_OWORD *)&v19.a;
  v16 = *(_OWORD *)&v19.tx;
  v14 = v12;
  *(_OWORD *)&v19.a = v18;
  *(_OWORD *)&v19.c = v17;
  *(_OWORD *)&v19.tx = v16;
  objc_msgSend(v13, sel_setTransform_, &v19);
  objc_msgSend(v14, sel_addSubview_, v13);

  return v14;
}

Swift::Void __swiftcall SliderView.VerticalSlider.layoutSubviews()()
{
  char *v0;
  void *v1;
  double MidX;
  objc_super v3;
  CGRect v4;
  CGRect v5;
  CGRect v6;

  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for SliderView.VerticalSlider();
  objc_msgSendSuper2(&v3, sel_layoutSubviews);
  v1 = *(void **)&v0[OBJC_IVAR____TtCV5CAFUI10SliderView14VerticalSlider_slider];
  objc_msgSend(v0, sel_bounds);
  CGRectGetHeight(v4);
  objc_msgSend(v1, sel_bounds);
  objc_msgSend(v1, sel_setBounds_);
  objc_msgSend(v0, sel_bounds);
  MidX = CGRectGetMidX(v5);
  objc_msgSend(v1, sel_center);
  objc_msgSend(v1, sel_setCenter_, MidX);
  objc_msgSend(v0, sel_bounds);
  CGRectGetMidY(v6);
  objc_msgSend(v1, sel_center);
  objc_msgSend(v1, sel_setCenter_);
}

id SliderView.VerticalSlider.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SliderView.VerticalSlider();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for SliderView.VerticalSlider()
{
  return objc_opt_self();
}

uint64_t destroy for CAFUIEqualizerGroup()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeBufferWithCopyOfBuffer for CAFUIEqualizerGroup(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for CAFUIEqualizerGroup(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for CAFUIEqualizerGroup(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for CAFUIEqualizerGroup()
{
  return &type metadata for CAFUIEqualizerGroup;
}

uint64_t associated type witness table accessor for View.Body : View in CAFUIEqualizerGroup()
{
  return swift_getOpaqueTypeConformance2();
}

char *protocol witness for UIViewRepresentable.makeUIView(context:) in conformance SliderView(uint64_t a1)
{
  uint64_t v1;

  return specialized SliderView.makeUIView(context:)(a1, *(void **)v1, *(_QWORD *)(v1 + 8), *(void **)(v1 + 40));
}

void protocol witness for UIViewRepresentable.updateUIView(_:context:) in conformance SliderView(uint64_t a1)
{
  specialized SliderView.updateUIView(_:context:)(a1);
}

id protocol witness for UIViewRepresentable.makeCoordinator() in conformance SliderView@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  int v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  objc_class *v9;
  _BYTE *v10;
  char *v11;
  id v12;
  id result;
  objc_super v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;

  v3 = v1[1];
  v4 = *((_DWORD *)v1 + 4);
  v5 = (void *)v1[5];
  v15 = *v1;
  v16 = v3;
  v17 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Float>);
  Binding.projectedValue.getter();
  v6 = v18;
  v7 = v19;
  v8 = v20;
  v9 = (objc_class *)type metadata accessor for SliderView.Coordinator();
  v10 = objc_allocWithZone(v9);
  v10[OBJC_IVAR____TtCV5CAFUI10SliderView11Coordinator_isTracking] = 0;
  v11 = &v10[OBJC_IVAR____TtCV5CAFUI10SliderView11Coordinator_value];
  *(_QWORD *)v11 = v6;
  *((_QWORD *)v11 + 1) = v7;
  *((_DWORD *)v11 + 4) = v8;
  *(_QWORD *)&v10[OBJC_IVAR____TtCV5CAFUI10SliderView11Coordinator_range] = v5;
  v14.receiver = v10;
  v14.super_class = v9;
  v12 = v5;
  result = objc_msgSendSuper2(&v14, sel_init);
  *a1 = result;
  return result;
}

uint64_t protocol witness for UIViewRepresentable.sizeThatFits(_:uiView:context:) in conformance SliderView()
{
  return UIViewRepresentable.sizeThatFits(_:uiView:context:)();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance SliderView()
{
  lazy protocol witness table accessor for type SliderView and conformance SliderView();
  return static UIViewRepresentable._makeView(view:inputs:)();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance SliderView()
{
  lazy protocol witness table accessor for type SliderView and conformance SliderView();
  return static UIViewRepresentable._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance SliderView()
{
  return static View._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance SliderView()
{
  lazy protocol witness table accessor for type SliderView and conformance SliderView();
  UIViewRepresentable.body.getter();
  __break(1u);
}

uint64_t closure #1 in CAFUISliderView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t OpaqueTypeConformance2;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  int *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  int *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  int *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  char v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  void (*v97)(char *, uint64_t);
  unsigned int *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  double v105;
  id v106;
  id v107;
  id v108;
  uint64_t v109;
  uint64_t KeyPath;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  id v135;
  id v136;
  _QWORD v138[2];
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  int *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  int v190;

  v177 = a2;
  v3 = type metadata accessor for _BlendModeEffect();
  MEMORY[0x24BDAC7A8](v3);
  v166 = (char *)v138 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v162 = type metadata accessor for ColorScheme();
  v161 = *(_QWORD *)(v162 - 8);
  v5 = MEMORY[0x24BDAC7A8](v162);
  v160 = (char *)v138 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v159 = (uint64_t)v138 - v7;
  v165 = type metadata accessor for BlendMode();
  v164 = *(_QWORD *)(v165 - 8);
  MEMORY[0x24BDAC7A8](v165);
  v163 = (char *)v138 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v158 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<Text, _BlendModeEffect>);
  MEMORY[0x24BDAC7A8](v158);
  v170 = (char *)v138 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v168 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Text, _BlendModeEffect>, _EnvironmentKeyWritingModifier<Font?>>);
  MEMORY[0x24BDAC7A8](v168);
  v173 = (uint64_t)v138 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v169 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Text, _BlendModeEffect>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>);
  MEMORY[0x24BDAC7A8](v169);
  v174 = (uint64_t)v138 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v172 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _BlendModeEffect>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, _PaddingLayout>);
  v12 = MEMORY[0x24BDAC7A8](v172);
  v176 = (uint64_t)v138 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v171 = (uint64_t)v138 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v175 = (uint64_t)v138 - v16;
  v153 = type metadata accessor for ButtonRepeatBehavior();
  v152 = *(_QWORD *)(v153 - 8);
  MEMORY[0x24BDAC7A8](v153);
  v146 = (char *)v138 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for PlainButtonStyle();
  v151 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)v138 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = (int *)type metadata accessor for CAFUISliderView(0);
  v22 = *((_QWORD *)v21 - 1);
  v23 = *(_QWORD *)(v22 + 64);
  MEMORY[0x24BDAC7A8](v21);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<ModifiedContent<ModifiedContent<Text, _FrameLayout>, _OffsetEffect>>);
  v147 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v157 = (char *)v138 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v156 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.buttonStyle<A>(_:)>>.0);
  v149 = *(_QWORD *)(v156 - 8);
  MEMORY[0x24BDAC7A8](v156);
  v155 = (char *)v138 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v154 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.buttonRepeatBehavior(_:)>>.0);
  v150 = *(_QWORD *)(v154 - 8);
  MEMORY[0x24BDAC7A8](v154);
  v28 = (char *)v138 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v179 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.buttonRepeatBehavior(_:)>>.0, AccessibilityAttachmentModifier>);
  v145 = *(_QWORD *)(v179 - 8);
  MEMORY[0x24BDAC7A8](v179);
  v148 = (char *)v138 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.buttonRepeatBehavior(_:)>>.0, AccessibilityAttachmentModifier>?);
  v31 = MEMORY[0x24BDAC7A8](v30);
  v167 = (uint64_t)v138 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = MEMORY[0x24BDAC7A8](v31);
  v182 = (uint64_t)v138 - v34;
  v35 = MEMORY[0x24BDAC7A8](v33);
  v181 = (uint64_t)v138 - v36;
  MEMORY[0x24BDAC7A8](v35);
  v180 = v21;
  v144 = v21[8];
  v38 = *(_BYTE *)(a1 + v144) == 1;
  v183 = (uint64_t)v138 - v37;
  v178 = a1;
  v143 = v18;
  v142 = v20;
  v141 = v28;
  v140 = v24;
  v139 = (uint64_t)v138 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138[1] = v23;
  v138[0] = v22;
  if (v38)
  {
    outlined init with copy of CAFUIEqualizerSlider(a1, (uint64_t)v138 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for CAFUISliderView);
    v39 = (*(unsigned __int8 *)(v22 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
    v40 = swift_allocObject();
    outlined init with take of CAFUIEqualizerSlider((uint64_t)v138 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0), v40 + v39, type metadata accessor for CAFUISliderView);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Text, _FrameLayout>, _OffsetEffect>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Text, _FrameLayout>, _OffsetEffect> and conformance <> ModifiedContent<A, B>();
    v41 = v157;
    Button.init(action:label:)();
    PlainButtonStyle.init()();
    v42 = lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type Button<ModifiedContent<ModifiedContent<Text, _FrameLayout>, _OffsetEffect>> and conformance Button<A>, &demangling cache variable for type metadata for Button<ModifiedContent<ModifiedContent<Text, _FrameLayout>, _OffsetEffect>>, MEMORY[0x24BDF43B0]);
    v43 = lazy protocol witness table accessor for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey(&lazy protocol witness table cache variable for type PlainButtonStyle and conformance PlainButtonStyle, (uint64_t (*)(uint64_t))MEMORY[0x24BDED868], MEMORY[0x24BDED858]);
    v44 = v155;
    View.buttonStyle<A>(_:)();
    (*(void (**)(char *, uint64_t))(v151 + 8))(v20, v18);
    (*(void (**)(char *, uint64_t))(v147 + 8))(v41, v24);
    v45 = v146;
    static ButtonRepeatBehavior.enabled.getter();
    v184 = (char *)v24;
    v185 = v18;
    v186 = v42;
    v187 = v43;
    v46 = (uint64_t)v148;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    v50 = v156;
    View.buttonRepeatBehavior(_:)();
    (*(void (**)(char *, uint64_t))(v152 + 8))(v45, v153);
    (*(void (**)(char *, uint64_t))(v149 + 8))(v44, v50);
    v184 = (char *)v50;
    v185 = OpaqueTypeConformance2;
    a1 = v178;
    swift_getOpaqueTypeConformance2();
    v49 = v154;
    View.accessibilityIdentifier(_:)();
    (*(void (**)(char *, uint64_t))(v150 + 8))(v28, v49);
    v48 = v183;
    outlined init with take of UIListContentConfiguration?(v46, v183, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.buttonRepeatBehavior(_:)>>.0, AccessibilityAttachmentModifier>);
    v145 = *(_QWORD *)(v145 + 56);
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v145)(v48, 0, 1, v179);
    v51 = v44;
    v52 = v41;
  }
  else
  {
    v145 = *(_QWORD *)(v145 + 56);
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v145)((char *)v138 - v37, 1, 1, v179);
    v49 = v154;
    v50 = v156;
    v51 = v155;
    v52 = v157;
  }
  v53 = v180;
  v54 = a1 + v180[5];
  v55 = *(_QWORD *)(v54 + 8);
  v56 = *(_DWORD *)(v54 + 16);
  v188 = *(_QWORD *)v54;
  v189 = v55;
  v190 = v56;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Float>);
  Binding.projectedValue.getter();
  v157 = v184;
  v156 = v185;
  v57 = v186;
  v58 = v53[7];
  v59 = (uint64_t *)(a1 + v53[6]);
  v60 = (char *)v59[1];
  v154 = *v59;
  v180 = *(int **)(a1 + v58);
  v38 = *(_BYTE *)(a1 + v144) == 1;
  v155 = v60;
  if (v38)
  {
    v61 = v139;
    outlined init with copy of CAFUIEqualizerSlider(a1, v139, type metadata accessor for CAFUISliderView);
    v62 = (*(unsigned __int8 *)(v138[0] + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v138[0] + 80);
    v63 = swift_allocObject();
    outlined init with take of CAFUIEqualizerSlider(v61, v63 + v62, type metadata accessor for CAFUISliderView);
    swift_bridgeObjectRetain();
    v64 = v180;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Text, _FrameLayout>, _OffsetEffect>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Text, _FrameLayout>, _OffsetEffect> and conformance <> ModifiedContent<A, B>();
    Button.init(action:label:)();
    v65 = v52;
    v66 = v142;
    PlainButtonStyle.init()();
    v67 = lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type Button<ModifiedContent<ModifiedContent<Text, _FrameLayout>, _OffsetEffect>> and conformance Button<A>, &demangling cache variable for type metadata for Button<ModifiedContent<ModifiedContent<Text, _FrameLayout>, _OffsetEffect>>, MEMORY[0x24BDF43B0]);
    v68 = lazy protocol witness table accessor for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey(&lazy protocol witness table cache variable for type PlainButtonStyle and conformance PlainButtonStyle, (uint64_t (*)(uint64_t))MEMORY[0x24BDED868], MEMORY[0x24BDED858]);
    v69 = v49;
    v70 = v51;
    v71 = (char *)v140;
    v72 = v143;
    View.buttonStyle<A>(_:)();
    (*(void (**)(char *, uint64_t))(v151 + 8))(v66, v72);
    (*(void (**)(char *, char *))(v147 + 8))(v65, v71);
    v73 = v146;
    static ButtonRepeatBehavior.enabled.getter();
    v184 = v71;
    v185 = v72;
    v186 = v67;
    v187 = v68;
    v74 = swift_getOpaqueTypeConformance2();
    v75 = v141;
    View.buttonRepeatBehavior(_:)();
    (*(void (**)(char *, uint64_t))(v152 + 8))(v73, v153);
    (*(void (**)(char *, uint64_t))(v149 + 8))(v70, v50);
    v184 = (char *)v50;
    v185 = v74;
    swift_getOpaqueTypeConformance2();
    v76 = (uint64_t)v148;
    View.accessibilityIdentifier(_:)();
    (*(void (**)(char *, uint64_t))(v150 + 8))(v75, v69);
    v77 = v181;
    outlined init with take of UIListContentConfiguration?(v76, v181, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.buttonRepeatBehavior(_:)>>.0, AccessibilityAttachmentModifier>);
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v145)(v77, 0, 1, v179);
  }
  else
  {
    v77 = v181;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v145)(v181, 1, 1, v179);
    swift_bridgeObjectRetain();
    v78 = v180;
  }
  v79 = v59[1];
  v184 = (char *)*v59;
  v185 = v79;
  lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain();
  v80 = Text.init<A>(_:)();
  v82 = v81;
  v84 = v83 & 1;
  v85 = objc_msgSend((id)objc_opt_self(), sel_secondaryLabelColor);
  MEMORY[0x23B812D58](v85);
  v86 = Text.foregroundColor(_:)();
  v88 = v87;
  v90 = v89;
  v92 = v91;
  swift_release();
  outlined consume of Text.Storage(v80, v82, v84);
  swift_bridgeObjectRelease();
  v93 = v159;
  specialized Environment.wrappedValue.getter(v159);
  v94 = v161;
  v95 = v160;
  v96 = v162;
  (*(void (**)(char *, _QWORD, uint64_t))(v161 + 104))(v160, *MEMORY[0x24BDEB3F0], v162);
  LOBYTE(v80) = static ColorScheme.== infix(_:_:)();
  v97 = *(void (**)(char *, uint64_t))(v94 + 8);
  v97(v95, v96);
  v97((char *)v93, v96);
  v98 = (unsigned int *)MEMORY[0x24BDF5098];
  v99 = v164;
  if ((v80 & 1) == 0)
    v98 = (unsigned int *)MEMORY[0x24BDF5080];
  v100 = v163;
  v101 = v165;
  (*(void (**)(char *, _QWORD, uint64_t))(v164 + 104))(v163, *v98, v165);
  v102 = v90 & 1;
  v103 = (uint64_t)v166;
  (*(void (**)(char *, char *, uint64_t))(v99 + 16))(v166, v100, v101);
  v104 = (uint64_t)v170;
  outlined init with copy of CAFUIEqualizerSlider(v103, (uint64_t)&v170[*(int *)(v158 + 36)], (uint64_t (*)(_QWORD))MEMORY[0x24BDEDB60]);
  *(_QWORD *)v104 = v86;
  *(_QWORD *)(v104 + 8) = v88;
  *(_BYTE *)(v104 + 16) = v102;
  *(_QWORD *)(v104 + 24) = v92;
  outlined copy of Text.Storage(v86, v88, v102);
  swift_bridgeObjectRetain();
  outlined destroy of _BlendModeEffect(v103);
  (*(void (**)(char *, uint64_t))(v99 + 8))(v100, v101);
  outlined consume of Text.Storage(v86, v88, v102);
  swift_bridgeObjectRelease();
  v105 = *MEMORY[0x24BEBB610];
  v106 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD5F0]), sel_initForTextStyle_, *MEMORY[0x24BEBE1E8]);
  v107 = objc_msgSend((id)objc_opt_self(), sel_systemFontOfSize_weight_, 10.0, v105);
  v108 = objc_msgSend(v106, sel_scaledFontForFont_, v107);

  v109 = Font.init(_:)();
  KeyPath = swift_getKeyPath();
  v111 = v173;
  outlined init with copy of UIListContentConfiguration?(v104, v173, &demangling cache variable for type metadata for ModifiedContent<Text, _BlendModeEffect>);
  v112 = (uint64_t *)(v111 + *(int *)(v168 + 36));
  *v112 = KeyPath;
  v112[1] = v109;
  outlined destroy of UIContentConfiguration?(v104, &demangling cache variable for type metadata for ModifiedContent<Text, _BlendModeEffect>);
  v113 = swift_getKeyPath();
  v114 = v174;
  outlined init with copy of UIListContentConfiguration?(v111, v174, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Text, _BlendModeEffect>, _EnvironmentKeyWritingModifier<Font?>>);
  v115 = v114 + *(int *)(v169 + 36);
  *(_QWORD *)v115 = v113;
  *(_QWORD *)(v115 + 8) = 1;
  *(_BYTE *)(v115 + 16) = 0;
  outlined destroy of UIContentConfiguration?(v111, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Text, _BlendModeEffect>, _EnvironmentKeyWritingModifier<Font?>>);
  LOBYTE(v113) = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  v117 = v116;
  v119 = v118;
  v121 = v120;
  v123 = v122;
  v124 = v171;
  outlined init with copy of UIListContentConfiguration?(v114, v171, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Text, _BlendModeEffect>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>);
  v125 = v124 + *(int *)(v172 + 36);
  *(_BYTE *)v125 = v113;
  *(_QWORD *)(v125 + 8) = v117;
  *(_QWORD *)(v125 + 16) = v119;
  *(_QWORD *)(v125 + 24) = v121;
  *(_QWORD *)(v125 + 32) = v123;
  *(_BYTE *)(v125 + 40) = 0;
  outlined destroy of UIContentConfiguration?(v114, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Text, _BlendModeEffect>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>);
  v126 = v175;
  outlined init with take of UIListContentConfiguration?(v124, v175, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _BlendModeEffect>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, _PaddingLayout>);
  v127 = v182;
  outlined init with copy of UIListContentConfiguration?(v183, v182, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.buttonRepeatBehavior(_:)>>.0, AccessibilityAttachmentModifier>?);
  v128 = v167;
  outlined init with copy of UIListContentConfiguration?(v77, v167, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.buttonRepeatBehavior(_:)>>.0, AccessibilityAttachmentModifier>?);
  v129 = v176;
  outlined init with copy of UIListContentConfiguration?(v126, v176, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _BlendModeEffect>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, _PaddingLayout>);
  v130 = v177;
  outlined init with copy of UIListContentConfiguration?(v127, v177, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.buttonRepeatBehavior(_:)>>.0, AccessibilityAttachmentModifier>?);
  v131 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ModifiedContent<<<opaque return type of View.buttonRepeatBehavior(_:)>>.0, AccessibilityAttachmentModifier>?, SliderView, ModifiedContent<<<opaque return type of View.buttonRepeatBehavior(_:)>>.0, AccessibilityAttachmentModifier>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _BlendModeEffect>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, _PaddingLayout>));
  v132 = v130 + v131[12];
  v133 = v156;
  *(_QWORD *)v132 = v157;
  *(_QWORD *)(v132 + 8) = v133;
  *(_DWORD *)(v132 + 16) = v57;
  v134 = v155;
  *(_QWORD *)(v132 + 24) = v154;
  *(_QWORD *)(v132 + 32) = v134;
  v135 = v180;
  *(_QWORD *)(v132 + 40) = v180;
  outlined init with copy of UIListContentConfiguration?(v128, v130 + v131[16], &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.buttonRepeatBehavior(_:)>>.0, AccessibilityAttachmentModifier>?);
  outlined init with copy of UIListContentConfiguration?(v129, v130 + v131[20], &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _BlendModeEffect>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, _PaddingLayout>);
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  v136 = v135;
  outlined destroy of UIContentConfiguration?(v126, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _BlendModeEffect>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, _PaddingLayout>);
  outlined destroy of UIContentConfiguration?(v181, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.buttonRepeatBehavior(_:)>>.0, AccessibilityAttachmentModifier>?);

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined destroy of UIContentConfiguration?(v183, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.buttonRepeatBehavior(_:)>>.0, AccessibilityAttachmentModifier>?);
  outlined destroy of UIContentConfiguration?(v129, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _BlendModeEffect>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, _PaddingLayout>);
  outlined destroy of UIContentConfiguration?(v128, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.buttonRepeatBehavior(_:)>>.0, AccessibilityAttachmentModifier>?);

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return outlined destroy of UIContentConfiguration?(v182, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.buttonRepeatBehavior(_:)>>.0, AccessibilityAttachmentModifier>?);
}

uint64_t closure #1 in closure #1 in CAFUISliderView.body.getter(uint64_t a1)
{
  uint64_t v2;
  float v3;
  void *v4;
  float v5;
  float v6;
  float v7;
  uint64_t v9;

  v2 = type metadata accessor for CAFUISliderView(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Float>);
  MEMORY[0x23B812E0C](&v9);
  v3 = *(float *)&v9;
  v4 = *(void **)(a1 + *(int *)(v2 + 28));
  objc_msgSend(v4, sel_stepValue);
  v6 = v3 + v5;
  objc_msgSend(v4, sel_maximumValue);
  if (v7 >= v6)
    v7 = v6;
  *(float *)&v9 = v7;
  return Binding.wrappedValue.setter();
}

double closure #2 in closure #1 in CAFUISliderView.body.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  double result;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  __int128 v27;

  LocalizedStringKey.init(stringLiteral:)();
  LOWORD(v22) = 256;
  v2 = Text.init(_:tableName:bundle:comment:)();
  v4 = v3;
  v6 = v5 & 1;
  specialized static UIFont.cafui_preferredFont(for:weight:size:rounded:)(*MEMORY[0x24BEBE1D8], 0x403A000000000000, 0, 1, *MEMORY[0x24BEBB600]);
  Font.init(_:)();
  v7 = Text.font(_:)();
  v9 = v8;
  v11 = v10;
  swift_release();
  v12 = v11 & 1;
  outlined consume of Text.Storage(v2, v4, v6);
  swift_bridgeObjectRelease();
  v13 = objc_msgSend((id)objc_opt_self(), sel__carSystemFocusColor, 0, v22);
  MEMORY[0x23B812D58](v13);
  v14 = Text.foregroundColor(_:)();
  v16 = v15;
  v18 = v17;
  v20 = v19;
  swift_release();
  outlined consume of Text.Storage(v7, v9, v12);
  swift_bridgeObjectRelease();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  *(_QWORD *)a1 = v14;
  *(_QWORD *)(a1 + 8) = v16;
  *(_BYTE *)(a1 + 16) = v18 & 1;
  *(_QWORD *)(a1 + 24) = v20;
  *(_QWORD *)(a1 + 32) = v23;
  *(_BYTE *)(a1 + 40) = v24;
  *(_QWORD *)(a1 + 48) = v25;
  *(_BYTE *)(a1 + 56) = v26;
  result = *(double *)&v27;
  *(_OWORD *)(a1 + 64) = v27;
  *(_OWORD *)(a1 + 80) = xmmword_237579E40;
  return result;
}

uint64_t closure #3 in closure #1 in CAFUISliderView.body.getter(uint64_t a1)
{
  uint64_t v2;
  float v3;
  void *v4;
  float v5;
  float v6;
  float v7;
  uint64_t v9;

  v2 = type metadata accessor for CAFUISliderView(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Float>);
  MEMORY[0x23B812E0C](&v9);
  v3 = *(float *)&v9;
  v4 = *(void **)(a1 + *(int *)(v2 + 28));
  objc_msgSend(v4, sel_stepValue);
  v6 = v3 - v5;
  objc_msgSend(v4, sel_minimumValue);
  if (v6 > v7)
    v7 = v6;
  *(float *)&v9 = v7;
  return Binding.wrappedValue.setter();
}

double closure #4 in closure #1 in CAFUISliderView.body.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  double result;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  __int128 v27;

  LocalizedStringKey.init(stringLiteral:)();
  LOWORD(v22) = 256;
  v2 = Text.init(_:tableName:bundle:comment:)();
  v4 = v3;
  v6 = v5 & 1;
  specialized static UIFont.cafui_preferredFont(for:weight:size:rounded:)(*MEMORY[0x24BEBE1D8], 0x403C000000000000, 0, 1, *MEMORY[0x24BEBB600]);
  Font.init(_:)();
  v7 = Text.font(_:)();
  v9 = v8;
  v11 = v10;
  swift_release();
  v12 = v11 & 1;
  outlined consume of Text.Storage(v2, v4, v6);
  swift_bridgeObjectRelease();
  v13 = objc_msgSend((id)objc_opt_self(), sel__carSystemFocusColor, 0, v22);
  MEMORY[0x23B812D58](v13);
  v14 = Text.foregroundColor(_:)();
  v16 = v15;
  v18 = v17;
  v20 = v19;
  swift_release();
  outlined consume of Text.Storage(v7, v9, v12);
  swift_bridgeObjectRelease();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  *(_QWORD *)a1 = v14;
  *(_QWORD *)(a1 + 8) = v16;
  *(_BYTE *)(a1 + 16) = v18 & 1;
  *(_QWORD *)(a1 + 24) = v20;
  *(_QWORD *)(a1 + 32) = v23;
  *(_BYTE *)(a1 + 40) = v24;
  *(_QWORD *)(a1 + 48) = v25;
  *(_BYTE *)(a1 + 56) = v26;
  result = *(double *)&v27;
  *(_OWORD *)(a1 + 64) = v27;
  *(_OWORD *)(a1 + 80) = xmmword_237579E50;
  return result;
}

uint64_t protocol witness for View.body.getter in conformance CAFUISliderView@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = static HorizontalAlignment.center.getter();
  *(_QWORD *)(a1 + 8) = 0x4000000000000000;
  *(_BYTE *)(a1 + 16) = 0;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_VStackLayout, TupleView<(ModifiedContent<<<opaque return type of View.buttonRepeatBehavior(_:)>>.0, AccessibilityAttachmentModifier>?, SliderView, ModifiedContent<<<opaque return type of View.buttonRepeatBehavior(_:)>>.0, AccessibilityAttachmentModifier>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _BlendModeEffect>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, _PaddingLayout>)>>);
  return closure #1 in CAFUISliderView.body.getter(v1, a1 + *(int *)(v3 + 44));
}

int *CAFUIEqualizerSlider.body.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  int *result;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  type metadata accessor for CAFEqualizerObservable();
  lazy protocol witness table accessor for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey(&lazy protocol witness table cache variable for type CAFEqualizerObservable and conformance CAFEqualizerObservable, (uint64_t (*)(uint64_t))MEMORY[0x24BE10038], MEMORY[0x24BE10028]);
  v3 = (void *)ObservedObject.projectedValue.getter();
  swift_getKeyPath();
  ObservedObject.Wrapper.subscript.getter();
  swift_release();

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = v21;
  *(_QWORD *)(v4 + 40) = v22;
  *(_BYTE *)(v4 + 48) = v23;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 32) = v21;
  *(_QWORD *)(v5 + 40) = v22;
  *(_BYTE *)(v5 + 48) = v23;
  swift_retain();
  swift_retain();
  Binding.init(get:set:)();
  v6 = *(id *)(v1 + 8);
  v7 = (void *)CAFEqualizerObservable.observed.getter();

  v8 = CAFEqualizer.title.getter();
  v10 = v9;

  v11 = v6;
  v12 = (void *)CAFEqualizerObservable.observed.getter();
  v13 = objc_msgSend(v12, sel_valueRange);

  v14 = objc_msgSend(v13, sel_floatRange);
  *a1 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  swift_storeEnumTagMultiPayload();
  result = (int *)type metadata accessor for CAFUISliderView(0);
  v16 = (char *)a1 + result[5];
  *(_QWORD *)v16 = v18;
  *((_QWORD *)v16 + 1) = v19;
  *((_DWORD *)v16 + 4) = v20;
  v17 = (uint64_t *)((char *)a1 + result[6]);
  *v17 = v8;
  v17[1] = v10;
  *(uint64_t *)((char *)a1 + result[7]) = (uint64_t)v14;
  *((_BYTE *)a1 + result[8]) = 0;
  return result;
}

uint64_t protocol witness for Identifiable.id.getter in conformance CAFUIEqualizerSlider@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 20);
  v5 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

double closure #1 in closure #1 in CAFUIEqualizerGroup.body.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _OWORD *v4;
  double result;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  outlined init with copy of CAFUIEqualizerSlider(a1, a2, type metadata accessor for CAFUIEqualizerSlider);
  v4 = (_OWORD *)(a2
                + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<CAFUIEqualizerSlider, _FrameLayout>)
                         + 36));
  *v4 = v6;
  v4[1] = v7;
  result = *(double *)&v8;
  v4[2] = v8;
  return result;
}

uint64_t protocol witness for View.body.getter in conformance CAFUIEqualizerGroup@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = static VerticalAlignment.center.getter();
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_HStackLayout, ForEach<[CAFUIEqualizerSlider], UUID, ModifiedContent<CAFUIEqualizerSlider, _FrameLayout>>>);
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CAFUIEqualizerSlider]);
  type metadata accessor for UUID();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<CAFUIEqualizerSlider, _FrameLayout>);
  lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type [CAFUIEqualizerSlider] and conformance [A], &demangling cache variable for type metadata for [CAFUIEqualizerSlider], MEMORY[0x24BEE12D8]);
  lazy protocol witness table accessor for type ModifiedContent<CAFUIEqualizerSlider, _FrameLayout> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey(&lazy protocol witness table cache variable for type CAFUIEqualizerSlider and conformance CAFUIEqualizerSlider, type metadata accessor for CAFUIEqualizerSlider, (uint64_t)&protocol conformance descriptor for CAFUIEqualizerSlider);
  return ForEach<>.init(_:content:)();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<CAFUIEqualizerSlider, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<CAFUIEqualizerSlider, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<CAFUIEqualizerSlider, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<CAFUIEqualizerSlider, _FrameLayout>);
    v2[0] = lazy protocol witness table accessor for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey(&lazy protocol witness table cache variable for type CAFUIEqualizerSlider and conformance CAFUIEqualizerSlider, type metadata accessor for CAFUIEqualizerSlider, (uint64_t)&protocol conformance descriptor for CAFUIEqualizerSlider);
    v2[1] = MEMORY[0x24BDEBEE0];
    result = MEMORY[0x23B813BE0](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<CAFUIEqualizerSlider, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t type metadata accessor for CAFUIEqualizerSlider(uint64_t a1)
{
  return type metadata accessor for CAFUIAutomakerSettingConfiguration(a1, (uint64_t *)&type metadata singleton initialization cache for CAFUIEqualizerSlider);
}

float *closure #2 in Binding<A>.floatBinding()(float *result)
{
  float v1;

  v1 = *result;
  if ((~*(_DWORD *)result & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v1 <= -129.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v1 < 128.0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Int8>);
    return (float *)Binding.wrappedValue.setter();
  }
LABEL_7:
  __break(1u);
  return result;
}

void closure #1 in static UIImage.thumbImage(withDiameter:thumbColor:)(void *a1, id a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  CGContext *v11;
  id v12;
  id v13;
  CGContext *v14;
  CGColor *v15;
  CGFloat Alpha;
  CGColor *v17;
  id v18;
  CGSize v19;
  CGSize v20;
  CGRect v21;
  CGRect v22;

  objc_msgSend(a2, sel_set);
  v11 = (CGContext *)objc_msgSend(a1, sel_CGContext);
  v21.origin.x = a3;
  v21.origin.y = a4;
  v21.size.width = a5;
  v21.size.height = a6;
  CGContextFillEllipseInRect(v11, v21);

  v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD4B8]), sel_initWithWhite_alpha_, 0.0, 0.15);
  v13 = objc_msgSend((id)objc_opt_self(), sel_bezierPathWithOvalInRect_, a3, a4, a5, a6);
  v14 = (CGContext *)objc_msgSend(a1, sel_CGContext);
  objc_msgSend(v13, sel_bounds);
  CGContextClipToRect(v14, v22);
  v19.width = 0.0;
  v19.height = 0.0;
  CGContextSetShadow(v14, v19, 0.0);
  v15 = (CGColor *)objc_msgSend(v12, sel_CGColor);
  Alpha = CGColorGetAlpha(v15);

  CGContextSetAlpha(v14, Alpha);
  CGContextBeginTransparencyLayer(v14, 0);
  v18 = objc_msgSend(v12, sel_colorWithAlphaComponent_, 1.0);
  v17 = (CGColor *)objc_msgSend(v18, sel_CGColor);
  v20.width = 0.5;
  v20.height = 0.0;
  CGContextSetShadowWithColor(v14, v20, 1.0, v17);

  CGContextSetBlendMode(v14, kCGBlendModeSourceOut);
  CGContextBeginTransparencyLayer(v14, 0);
  objc_msgSend(v18, sel_setFill);
  objc_msgSend(v13, sel_fill);
  CGContextEndTransparencyLayer(v14);
  CGContextEndTransparencyLayer(v14);

}

uint64_t specialized CAFUIEqualizerGroup.init(equalizers:)(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = type metadata accessor for CAFUIEqualizerSlider(0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (uint64_t *)((char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo12CAFEqualizerCG_10CAFCombine0D10ObservableCs5NeverOTg5051_s5CAFUI19CAFUIEqualizerGroupV10equalizersACSaySo12d23CG_tcfc10CAFCombine0E10F55CAFcfu_33_1de7a1dc5ccbaa2477a1dc197ae15632AfJTf3nnnpk_nTf1cn_n(a1);
  swift_bridgeObjectRelease();
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v7)
    return v6;
  v16 = MEMORY[0x24BEE4AF8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7 & ~(v7 >> 63), 0);
  if ((v7 & 0x8000000000000000) == 0)
  {
    v9 = 0;
    v10 = v16;
    do
    {
      if ((v6 & 0xC000000000000001) != 0)
        MEMORY[0x23B813418](v9, v6);
      else
        v11 = *(id *)(v6 + 8 * v9 + 32);
      type metadata accessor for CAFEqualizerObservable();
      lazy protocol witness table accessor for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey(&lazy protocol witness table cache variable for type CAFEqualizerObservable and conformance CAFEqualizerObservable, (uint64_t (*)(uint64_t))MEMORY[0x24BE10038], MEMORY[0x24BE10028]);
      *v5 = ObservedObject.init(wrappedValue:)();
      v5[1] = v12;
      UUID.init()();
      v16 = v10;
      v14 = *(_QWORD *)(v10 + 16);
      v13 = *(_QWORD *)(v10 + 24);
      if (v14 >= v13 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        v10 = v16;
      }
      ++v9;
      *(_QWORD *)(v10 + 16) = v14 + 1;
      outlined init with take of CAFUIEqualizerSlider((uint64_t)v5, v10+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v14, type metadata accessor for CAFUIEqualizerSlider);
    }
    while (v7 != v9);
    return v6;
  }
  __break(1u);
  return result;
}

uint64_t sub_23753EEDC()
{
  return lazy protocol witness table accessor for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey(&lazy protocol witness table cache variable for type CAFEqualizer and conformance CAFEqualizer, (uint64_t (*)(uint64_t))type metadata accessor for CAFEqualizer, MEMORY[0x24BE100D0]);
}

uint64_t *initializeBufferWithCopyOfBuffer for CAFUIEqualizerSlider(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  void *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  id v11;
  uint64_t v12;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v12 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = (void *)a2[1];
    *a1 = *a2;
    a1[1] = (uint64_t)v5;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for UUID();
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    v11 = v5;
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for CAFUIEqualizerSlider(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for CAFUIEqualizerSlider(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  id v10;

  v4 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for UUID();
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  v10 = v4;
  v9(v6, v7, v8);
  return a1;
}

_QWORD *assignWithCopy for CAFUIEqualizerSlider(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  *a1 = *a2;
  v6 = (void *)a2[1];
  v7 = (void *)a1[1];
  a1[1] = v6;
  v8 = v6;

  v9 = *(int *)(a3 + 20);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 24))(v10, v11, v12);
  return a1;
}

_OWORD *initializeWithTake for CAFUIEqualizerSlider(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithTake for CAFUIEqualizerSlider(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = (void *)a1[1];
  *a1 = *a2;
  a1[1] = v6;

  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for CAFUIEqualizerSlider()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23753F1A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for CAFUIEqualizerSlider()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23753F22C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for CAFUIEqualizerSlider()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_23753F314()
{
  return lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type HStack<ForEach<[CAFUIEqualizerSlider], UUID, ModifiedContent<CAFUIEqualizerSlider, _FrameLayout>>> and conformance HStack<A>, &demangling cache variable for type metadata for HStack<ForEach<[CAFUIEqualizerSlider], UUID, ModifiedContent<CAFUIEqualizerSlider, _FrameLayout>>>, MEMORY[0x24BDF4498]);
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in CAFUIEqualizerSlider()
{
  return lazy protocol witness table accessor for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
}

uint64_t associated type witness table accessor for View.Body : View in CAFUIEqualizerSlider()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23753F37C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = dispatch thunk of CAFEqualizerObservable.value.getter();
  *a1 = result;
  return result;
}

uint64_t sub_23753F3A4()
{
  return dispatch thunk of CAFEqualizerObservable.value.setter();
}

float partial apply for closure #1 in Binding<A>.floatBinding()@<S0>(float *a1@<X8>)
{
  uint64_t v2;
  int8x8_t v3;
  float result;
  uint64_t v5;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Int8>);
  MEMORY[0x23B812E0C](&v5, v2);
  v3.i8[0] = v5;
  result = (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v3)).i32[0];
  *a1 = result;
  return result;
}

uint64_t objectdestroyTm_0()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

float *partial apply for closure #2 in Binding<A>.floatBinding()(float *result)
{
  return closure #2 in Binding<A>.floatBinding()(result);
}

uint64_t type metadata accessor for CAFUISliderView(uint64_t a1)
{
  return type metadata accessor for CAFUIAutomakerSettingConfiguration(a1, (uint64_t *)&type metadata singleton initialization cache for CAFUISliderView);
}

_QWORD *initializeBufferWithCopyOfBuffer for CAFUISliderView(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = type metadata accessor for ColorScheme();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v9 = a3[5];
    v10 = a3[6];
    v11 = (char *)a1 + v9;
    v12 = (char *)a2 + v9;
    v13 = *((_QWORD *)v12 + 1);
    *(_QWORD *)v11 = *(_QWORD *)v12;
    *((_QWORD *)v11 + 1) = v13;
    *((_DWORD *)v11 + 4) = *((_DWORD *)v12 + 4);
    v14 = (_QWORD *)((char *)a1 + v10);
    v15 = (_QWORD *)((char *)a2 + v10);
    v16 = v15[1];
    *v14 = *v15;
    v14[1] = v16;
    v17 = a3[7];
    v18 = a3[8];
    v19 = *(void **)((char *)a2 + v17);
    *(_QWORD *)((char *)a1 + v17) = v19;
    *((_BYTE *)a1 + v18) = *((_BYTE *)a2 + v18);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v20 = v19;
  }
  return a1;
}

void destroy for CAFUISliderView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

}

_QWORD *initializeWithCopy for CAFUISliderView(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = type metadata accessor for ColorScheme();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v7 = a3[5];
  v8 = a3[6];
  v9 = (char *)a1 + v7;
  v10 = (char *)a2 + v7;
  v11 = *((_QWORD *)v10 + 1);
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *((_QWORD *)v9 + 1) = v11;
  *((_DWORD *)v9 + 4) = *((_DWORD *)v10 + 4);
  v12 = (_QWORD *)((char *)a1 + v8);
  v13 = (_QWORD *)((char *)a2 + v8);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v15 = a3[7];
  v16 = a3[8];
  v17 = *(void **)((char *)a2 + v15);
  *(_QWORD *)((char *)a1 + v15) = v17;
  *((_BYTE *)a1 + v16) = *((_BYTE *)a2 + v16);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v18 = v17;
  return a1;
}

_QWORD *assignWithCopy for CAFUISliderView(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;

  if (a1 != a2)
  {
    outlined destroy of UIContentConfiguration?((uint64_t)a1, &demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for ColorScheme();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  *(_QWORD *)((char *)a1 + v7) = *(_QWORD *)((char *)a2 + v7);
  swift_retain();
  swift_release();
  *((_QWORD *)v8 + 1) = *((_QWORD *)v9 + 1);
  swift_retain();
  swift_release();
  *((_DWORD *)v8 + 4) = *((_DWORD *)v9 + 4);
  v10 = a3[6];
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13 = a3[7];
  v14 = *(void **)((char *)a2 + v13);
  v15 = *(void **)((char *)a1 + v13);
  *(_QWORD *)((char *)a1 + v13) = v14;
  v16 = v14;

  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  return a1;
}

char *initializeWithTake for CAFUISliderView(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = type metadata accessor for ColorScheme();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = a3[6];
  v10 = &a1[v8];
  v11 = &a2[v8];
  v12 = *(_OWORD *)v11;
  *((_DWORD *)v10 + 4) = *((_DWORD *)v11 + 4);
  *(_OWORD *)v10 = v12;
  *(_OWORD *)&a1[v9] = *(_OWORD *)&a2[v9];
  v13 = a3[8];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  a1[v13] = a2[v13];
  return a1;
}

char *assignWithTake for CAFUISliderView(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;

  if (a1 != a2)
  {
    outlined destroy of UIContentConfiguration?((uint64_t)a1, &demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = type metadata accessor for ColorScheme();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  *(_QWORD *)&a1[v8] = *(_QWORD *)&a2[v8];
  swift_release();
  *((_QWORD *)v9 + 1) = *((_QWORD *)v10 + 1);
  swift_release();
  *((_DWORD *)v9 + 4) = *((_DWORD *)v10 + 4);
  v11 = a3[6];
  v12 = &a1[v11];
  v13 = &a2[v11];
  v15 = *(_QWORD *)v13;
  v14 = *((_QWORD *)v13 + 1);
  *(_QWORD *)v12 = v15;
  *((_QWORD *)v12 + 1) = v14;
  swift_bridgeObjectRelease();
  v16 = a3[7];
  v17 = *(void **)&a1[v16];
  *(_QWORD *)&a1[v16] = *(_QWORD *)&a2[v16];

  a1[a3[8]] = a2[a3[8]];
  return a1;
}

uint64_t getEnumTagSinglePayload for CAFUISliderView()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23753FABC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for CAFUISliderView()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23753FB4C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

void type metadata completion function for CAFUISliderView()
{
  unint64_t v0;

  type metadata accessor for Environment<ColorScheme>.Content();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void type metadata accessor for Environment<ColorScheme>.Content()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Environment<ColorScheme>.Content)
  {
    type metadata accessor for ColorScheme();
    v0 = type metadata accessor for Environment.Content();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Environment<ColorScheme>.Content);
  }
}

uint64_t sub_23753FCB4()
{
  return lazy protocol witness table accessor for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey(&lazy protocol witness table cache variable for type CAFUISliderView and conformance CAFUISliderView, type metadata accessor for CAFUISliderView, (uint64_t)&protocol conformance descriptor for CAFUISliderView);
}

uint64_t associated type witness table accessor for View.Body : View in CAFUISliderView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t outlined consume of Text.Storage(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_release();
  else
    return swift_bridgeObjectRelease();
}

uint64_t outlined init with copy of CAFUIEqualizerSlider(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined copy of Text.Storage(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_retain();
  else
    return swift_bridgeObjectRetain();
}

uint64_t outlined destroy of _BlendModeEffect(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for _BlendModeEffect();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23753FD98@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_23753FDC8()
{
  return EnvironmentValues.lineLimit.setter();
}

uint64_t outlined init with take of CAFUIEqualizerSlider(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for closure #3 in closure #1 in CAFUISliderView.body.getter()
{
  return partial apply for closure #3 in closure #1 in CAFUISliderView.body.getter(closure #3 in closure #1 in CAFUISliderView.body.getter);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Text, _FrameLayout>, _OffsetEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Text, _FrameLayout>, _OffsetEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Text, _FrameLayout>, _OffsetEffect> and conformance <> ModifiedContent<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Text, _FrameLayout>, _OffsetEffect>);
    v2[0] = lazy protocol witness table accessor for type ModifiedContent<Text, _FrameLayout> and conformance <> ModifiedContent<A, B>();
    v2[1] = MEMORY[0x24BDEC438];
    result = MEMORY[0x23B813BE0](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Text, _FrameLayout>, _OffsetEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Text, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Text, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Text, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<Text, _FrameLayout>);
    v2[0] = MEMORY[0x24BDF1F80];
    v2[1] = MEMORY[0x24BDEBEE0];
    result = MEMORY[0x23B813BE0](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Text, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t objectdestroy_25Tm()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = type metadata accessor for CAFUISliderView(0);
  v2 = (*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v3 = type metadata accessor for ColorScheme();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v0 + v2, v3);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in CAFUISliderView.body.getter()
{
  return partial apply for closure #3 in closure #1 in CAFUISliderView.body.getter(closure #1 in closure #1 in CAFUISliderView.body.getter);
}

uint64_t partial apply for closure #3 in closure #1 in CAFUISliderView.body.getter(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CAFUISliderView(0) - 8) + 80);
  return a1(v1 + ((v2 + 16) & ~v2));
}

void destroy for SliderView(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

}

uint64_t initializeWithCopy for SliderView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v5;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v6 = v5;
  return a1;
}

uint64_t assignWithCopy for SliderView(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(void **)(a2 + 40);
  v5 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  v6 = v4;

  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for SliderView(uint64_t a1, uint64_t a2)
{
  void *v4;

  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);

  return a1;
}

uint64_t getEnumTagSinglePayload for SliderView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SliderView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SliderView()
{
  return &type metadata for SliderView;
}

uint64_t sub_23754028C()
{
  return lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type VStack<TupleView<(ModifiedContent<<<opaque return type of View.buttonRepeatBehavior(_:)>>.0, AccessibilityAttachmentModifier>?, SliderView, ModifiedContent<<<opaque return type of View.buttonRepeatBehavior(_:)>>.0, AccessibilityAttachmentModifier>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _BlendModeEffect>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, _PaddingLayout>)>> and conformance VStack<A>, &demangling cache variable for type metadata for VStack<TupleView<(ModifiedContent<<<opaque return type of View.buttonRepeatBehavior(_:)>>.0, AccessibilityAttachmentModifier>?, SliderView, ModifiedContent<<<opaque return type of View.buttonRepeatBehavior(_:)>>.0, AccessibilityAttachmentModifier>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _BlendModeEffect>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, _PaddingLayout>)>>, MEMORY[0x24BDF4700]);
}

uint64_t associated type witness table accessor for View.Body : View in SliderView()
{
  return MEMORY[0x24BDF5560];
}

unint64_t lazy protocol witness table accessor for type SliderView and conformance SliderView()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SliderView and conformance SliderView;
  if (!lazy protocol witness table cache variable for type SliderView and conformance SliderView)
  {
    result = MEMORY[0x23B813BE0](&protocol conformance descriptor for SliderView, &type metadata for SliderView);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SliderView and conformance SliderView);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SliderView and conformance SliderView;
  if (!lazy protocol witness table cache variable for type SliderView and conformance SliderView)
  {
    result = MEMORY[0x23B813BE0](&protocol conformance descriptor for SliderView, &type metadata for SliderView);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SliderView and conformance SliderView);
  }
  return result;
}

uint64_t specialized static UIImage.thumbImage(withDiameter:thumbColor:)(void *a1, double a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  uint64_t result;
  _QWORD v11[6];

  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD618]), sel_initWithSize_, a2, a2);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 16) = a1;
  *(double *)(v5 + 40) = a2;
  *(double *)(v5 + 48) = a2;
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = partial apply for closure #1 in static UIImage.thumbImage(withDiameter:thumbColor:);
  *(_QWORD *)(v6 + 24) = v5;
  v11[4] = _sSo30UIGraphicsImageRendererContextCIgg_ABIegg_TRTA_0;
  v11[5] = v6;
  v11[0] = MEMORY[0x24BDAC760];
  v11[1] = 1107296256;
  v11[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ();
  v11[3] = &block_descriptor_2;
  v7 = _Block_copy(v11);
  v8 = a1;
  swift_retain();
  swift_release();
  v9 = objc_msgSend(v4, sel_imageWithActions_, v7);

  _Block_release(v7);
  LOBYTE(v4) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((v4 & 1) == 0)
    return (uint64_t)v9;
  __break(1u);
  return result;
}

char *specialized SliderView.makeUIView(context:)(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  char *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  double v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  void *v24;
  uint64_t v25;

  type metadata accessor for SliderView.VerticalSlider();
  v6 = (char *)objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  v7 = OBJC_IVAR____TtCV5CAFUI10SliderView14VerticalSlider_slider;
  v8 = *(void **)&v6[OBJC_IVAR____TtCV5CAFUI10SliderView14VerticalSlider_slider];
  v9 = (void *)objc_opt_self();
  v10 = v8;
  v11 = objc_msgSend(v9, sel_whiteColor);
  v12 = (void *)specialized static UIImage.thumbImage(withDiameter:thumbColor:)(v11, 20.0);

  objc_msgSend(v10, sel_setThumbImage_forState_, v12, 0);
  v13 = *(void **)&v6[v7];
  objc_msgSend(v13, sel_setContinuous_, 1);
  v14 = v13;
  objc_msgSend(a4, sel_minimumValue);
  objc_msgSend(v14, sel_setMinimumValue_);

  v15 = *(id *)&v6[v7];
  objc_msgSend(a4, sel_maximumValue);
  objc_msgSend(v15, sel_setMaximumValue_);

  v24 = a2;
  v16 = *(id *)&v6[v7];
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Float>);
  MEMORY[0x23B812E0C](&v25, v17);
  LODWORD(v18) = v25;
  objc_msgSend(v16, sel_setValue_, v18);

  v19 = *(id *)&v6[v7];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIViewRepresentableContext<SliderView>);
  UIViewRepresentableContext.coordinator.getter();
  objc_msgSend(v19, sel_addTarget_action_forControlEvents_, v24, sel_valueChanged_, 4096);

  v20 = *(id *)&v6[v7];
  UIViewRepresentableContext.coordinator.getter();
  objc_msgSend(v20, sel_addTarget_action_forControlEvents_, v24, sel_trackingEnter_, 1);

  v21 = *(void **)&v6[v7];
  UIViewRepresentableContext.coordinator.getter();
  objc_msgSend(v21, sel_addTarget_action_forControlEvents_, v24, sel_trackingExit_, 192);

  UIViewRepresentableContext.coordinator.getter();
  v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBDA20]), sel_initWithTarget_action_, v24, sel_sliderTapped_);

  objc_msgSend(*(id *)&v6[v7], sel_addGestureRecognizer_, v22);
  return v6;
}

void specialized SliderView.updateUIView(_:context:)(uint64_t a1)
{
  char v2;
  void *v3;
  uint64_t v4;
  double v5;
  _BYTE *v6;
  uint64_t v7;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIViewRepresentableContext<SliderView>);
  UIViewRepresentableContext.coordinator.getter();
  v2 = v6[OBJC_IVAR____TtCV5CAFUI10SliderView11Coordinator_isTracking];

  if ((v2 & 1) == 0)
  {
    v3 = *(void **)(a1 + OBJC_IVAR____TtCV5CAFUI10SliderView14VerticalSlider_slider);
    v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Float>);
    MEMORY[0x23B812E0C](&v7, v4);
    LODWORD(v5) = v7;
    objc_msgSend(v3, sel_setValue_animated_, 1, v5);
  }
}

uint64_t sub_237540804()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in static UIImage.thumbImage(withDiameter:thumbColor:)(void *a1)
{
  uint64_t v1;

  closure #1 in static UIImage.thumbImage(withDiameter:thumbColor:)(a1, *(id *)(v1 + 16), *(CGFloat *)(v1 + 24), *(CGFloat *)(v1 + 32), *(CGFloat *)(v1 + 40), *(CGFloat *)(v1 + 48));
}

uint64_t sub_237540838()
{
  return swift_deallocObject();
}

uint64_t _sSo30UIGraphicsImageRendererContextCIgg_ABIegg_TRTA_0(uint64_t a1)
{
  uint64_t v1;

  return thunk for @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ()(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t CAFUIRoundedButton.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  __int128 v15;
  char *v16;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t *v19;
  _OWORD v21[3];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout>);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout>, _BackgroundStyleModifier<HierarchicalShapeStyle>>);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout>, _BackgroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Color?>>);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ViewModifier_Content<CAFUIRoundedButton>);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v6, a1, v13);
  v14 = &v6[*(int *)(v4 + 36)];
  v15 = v21[1];
  *(_OWORD *)v14 = v21[0];
  *((_OWORD *)v14 + 1) = v15;
  *((_OWORD *)v14 + 2) = v21[2];
  LODWORD(v4) = static HierarchicalShapeStyle.tertiary.getter();
  LOBYTE(a1) = static Edge.Set.all.getter();
  outlined init with copy of UIListContentConfiguration?((uint64_t)v6, (uint64_t)v9, &demangling cache variable for type metadata for ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout>);
  v16 = &v9[*(int *)(v7 + 36)];
  *(_DWORD *)v16 = v4;
  v16[4] = a1;
  outlined destroy of UIContentConfiguration?((uint64_t)v6, &demangling cache variable for type metadata for ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout>);
  v17 = static Color.primary.getter();
  KeyPath = swift_getKeyPath();
  outlined init with copy of UIListContentConfiguration?((uint64_t)v9, (uint64_t)v12, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout>, _BackgroundStyleModifier<HierarchicalShapeStyle>>);
  v19 = (uint64_t *)&v12[*(int *)(v10 + 36)];
  *v19 = KeyPath;
  v19[1] = v17;
  outlined destroy of UIContentConfiguration?((uint64_t)v9, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout>, _BackgroundStyleModifier<HierarchicalShapeStyle>>);
  outlined init with copy of UIListContentConfiguration?((uint64_t)v12, a2, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout>, _BackgroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Color?>>);
  *(_WORD *)(a2
           + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout>, _BackgroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Color?>>, _ClipEffect<Circle>>)
                    + 36)) = 256;
  return outlined destroy of UIContentConfiguration?((uint64_t)v12, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout>, _BackgroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Color?>>);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance CAFUIRoundedButton()
{
  return static ViewModifier._viewListCount(inputs:body:)();
}

uint64_t key path getter for EnvironmentValues.foregroundColor : EnvironmentValues, serialized@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_237540B18@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.foregroundColor : EnvironmentValues, serialized()
{
  swift_retain();
  return EnvironmentValues.foregroundColor.setter();
}

uint64_t sub_237540B68()
{
  swift_retain();
  return EnvironmentValues.foregroundColor.setter();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in CAFUIRoundedButton()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for CAFUIRoundedButton()
{
  return &type metadata for CAFUIRoundedButton;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout>, _BackgroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Color?>>, _ClipEffect<Circle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout>, _BackgroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Color?>>, _ClipEffect<Circle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout>, _BackgroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Color?>>, _ClipEffect<Circle>> and conformance <> ModifiedContent<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout>, _BackgroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Color?>>, _ClipEffect<Circle>>);
    v2[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout>, _BackgroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>();
    v2[1] = lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type _ClipEffect<Circle> and conformance _ClipEffect<A>, &demangling cache variable for type metadata for _ClipEffect<Circle>, MEMORY[0x24BDEB950]);
    result = MEMORY[0x23B813BE0](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout>, _BackgroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Color?>>, _ClipEffect<Circle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout>, _BackgroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout>, _BackgroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout>, _BackgroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout>, _BackgroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Color?>>);
    v2[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout>, _BackgroundStyleModifier<HierarchicalShapeStyle>> and conformance <> ModifiedContent<A, B>();
    v2[1] = lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, MEMORY[0x24BDF1028]);
    result = MEMORY[0x23B813BE0](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout>, _BackgroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout>, _BackgroundStyleModifier<HierarchicalShapeStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout>, _BackgroundStyleModifier<HierarchicalShapeStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout>, _BackgroundStyleModifier<HierarchicalShapeStyle>> and conformance <> ModifiedContent<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout>, _BackgroundStyleModifier<HierarchicalShapeStyle>>);
    v2[0] = lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout> and conformance <> ModifiedContent<A, B>();
    v2[1] = lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type _BackgroundStyleModifier<HierarchicalShapeStyle> and conformance _BackgroundStyleModifier<A>, &demangling cache variable for type metadata for _BackgroundStyleModifier<HierarchicalShapeStyle>, MEMORY[0x24BDF06D0]);
    result = MEMORY[0x23B813BE0](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout>, _BackgroundStyleModifier<HierarchicalShapeStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout>);
    v2[0] = lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type _ViewModifier_Content<CAFUIRoundedButton> and conformance _ViewModifier_Content<A>, &demangling cache variable for type metadata for _ViewModifier_Content<CAFUIRoundedButton>, MEMORY[0x24BDEFB78]);
    v2[1] = MEMORY[0x24BDEBEE0];
    result = MEMORY[0x23B813BE0](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<CAFUIRoundedButton>, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

UIBarButtonItem_optional __swiftcall CAUAssetLibraryManager.createAudioLogoBarButton()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  Swift::Bool v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  objc_class *v15;
  objc_class *v16;
  uint64_t v17;
  UIBarButtonItem_optional result;

  v0 = type metadata accessor for CAUResource();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = dispatch thunk of CAUAssetLibraryManager.assetLibrary.getter();
  if (v4)
  {
    v6 = (void *)v4;
    (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x24BE150F0], v0);
    v7 = (void *)CAUAssetLibrary.asset(for:)();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    v8 = objc_msgSend(v7, sel_imageWithRenderingMode_, 2);
    v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD668]), sel_initWithImage_, v8);
    objc_msgSend(v9, sel_setContentMode_, 1);
    objc_msgSend(v9, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    v10 = objc_msgSend(v9, sel_heightAnchor);
    v11 = objc_msgSend(v10, sel_constraintEqualToConstant_, 28.0);

    objc_msgSend(v11, sel_setActive_, 1);
    v12 = objc_msgSend(v9, sel_widthAnchor);
    v13 = objc_msgSend(v12, sel_constraintLessThanOrEqualToConstant_, 112.0);

    objc_msgSend(v13, sel_setActive_, 1);
    v14 = objc_msgSend((id)objc_opt_self(), sel_systemGrayColor);
    objc_msgSend(v9, sel_setTintColor_, v14);

    v15 = (objc_class *)objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD410]), sel_initWithCustomView_, v9);
  }
  else
  {
    v15 = 0;
  }
  v16 = v15;
  result.value.super.super.isa = v16;
  result.is_nil = v5;
  return result;
}

double one-time initialization function for badgePadding()
{
  double result;

  result = 10.0;
  static CAFUIBadgeView.badgePadding = xmmword_23757A2E0;
  return result;
}

id CAFUIBadgeView.__allocating_init(text:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  return CAFUIBadgeView.init(text:)(a1, a2);
}

id CAFUIBadgeView.init(text:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  id v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v10;
  double v11;
  double v12;
  id v13;
  void *v14;
  void *v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  Class isa;
  objc_super v35;

  *(_QWORD *)&v2[OBJC_IVAR____TtC5CAFUI14CAFUIBadgeView____lazy_storage___label] = 0;
  v35.receiver = v2;
  v35.super_class = (Class)type metadata accessor for CAFUIBadgeView();
  v5 = objc_msgSendSuper2(&v35, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v6 = (void *)objc_opt_self();
  v7 = v5;
  v8 = objc_msgSend(v6, sel_systemRedColor);
  objc_msgSend(v7, sel_setBackgroundColor_, v8);

  v9 = v7;
  v10 = CAFUIBadgeView.label.getter();
  objc_msgSend(v9, sel_addSubview_, v10);

  LODWORD(v11) = 1148846080;
  objc_msgSend(v9, sel_setContentHuggingPriority_forAxis_, 0, v11);
  LODWORD(v12) = 1148846080;
  objc_msgSend(v9, sel_setContentCompressionResistancePriority_forAxis_, 0, v12);
  v13 = CAFUIBadgeView.label.getter();
  if (a2)
  {
    v14 = (void *)MEMORY[0x23B812F68](a1, a2);
    swift_bridgeObjectRelease();
  }
  else
  {
    v14 = 0;
  }
  objc_msgSend(v13, sel_setText_, v14);

  v15 = (void *)objc_opt_self();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_237579090;
  v17 = CAFUIBadgeView.label.getter();
  v18 = objc_msgSend(v17, sel_topAnchor);

  v19 = objc_msgSend(v9, sel_topAnchor);
  v20 = objc_msgSend(v18, sel_constraintEqualToAnchor_, v19);

  *(_QWORD *)(v16 + 32) = v20;
  v21 = CAFUIBadgeView.label.getter();
  v22 = objc_msgSend(v21, sel_leadingAnchor);

  v23 = objc_msgSend(v9, sel_leadingAnchor);
  v24 = objc_msgSend(v22, sel_constraintEqualToAnchor_, v23);

  *(_QWORD *)(v16 + 40) = v24;
  v25 = CAFUIBadgeView.label.getter();
  v26 = objc_msgSend(v25, sel_bottomAnchor);

  v27 = objc_msgSend(v9, sel_bottomAnchor);
  v28 = objc_msgSend(v26, sel_constraintEqualToAnchor_, v27);

  *(_QWORD *)(v16 + 48) = v28;
  v29 = CAFUIBadgeView.label.getter();
  v30 = objc_msgSend(v29, sel_trailingAnchor);

  v31 = objc_msgSend(v9, sel_trailingAnchor);
  v32 = objc_msgSend(v30, sel_constraintEqualToAnchor_, v31);

  *(_QWORD *)(v16 + 56) = v32;
  specialized Array._endMutation()();
  type metadata accessor for NSLayoutConstraint();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v15, sel_activateConstraints_, isa);

  return v9;
}

uint64_t type metadata accessor for CAFUIBadgeView()
{
  return objc_opt_self();
}

id CAFUIBadgeView.label.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC5CAFUI14CAFUIBadgeView____lazy_storage___label;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC5CAFUI14CAFUIBadgeView____lazy_storage___label);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC5CAFUI14CAFUIBadgeView____lazy_storage___label);
  }
  else
  {
    v4 = closure #1 in CAFUIBadgeView.label.getter();
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

id closure #1 in CAFUIBadgeView.label.getter()
{
  id v0;
  id v1;
  id v2;
  void *v3;
  id v4;
  _QWORD v6[6];

  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD708]), sel_init);
  v1 = objc_msgSend((id)objc_opt_self(), sel_boldSystemFontOfSize_, 12.0);
  objc_msgSend(v0, sel_setFont_, v1);

  v2 = objc_allocWithZone(MEMORY[0x24BEBD4B8]);
  v6[4] = closure #1 in closure #1 in CAFUIBadgeView.label.getter;
  v6[5] = 0;
  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 1107296256;
  v6[2] = thunk for @escaping @callee_guaranteed (@guaranteed UITraitCollection) -> (@owned UIColor);
  v6[3] = &block_descriptor_3;
  v3 = _Block_copy(v6);
  v4 = objc_msgSend(v2, sel_initWithDynamicProvider_, v3);
  _Block_release(v3);
  swift_release();
  objc_msgSend(v0, sel_setTextColor_, v4);

  objc_msgSend(v0, sel_setTextAlignment_, 1);
  objc_msgSend(v0, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  return v0;
}

id closure #1 in closure #1 in CAFUIBadgeView.label.getter()
{
  return objc_msgSend((id)objc_opt_self(), sel_whiteColor);
}

double CAFUIBadgeView.intrinsicContentSize.getter()
{
  id v0;
  double v1;
  double v2;

  v0 = CAFUIBadgeView.label.getter();
  objc_msgSend(v0, sel_intrinsicContentSize);
  v2 = v1;

  if (one-time initialization token for badgePadding != -1)
    swift_once();
  return v2 + *(double *)&static CAFUIBadgeView.badgePadding;
}

CGSize __swiftcall CAFUIBadgeView.sizeThatFits(_:)(CGSize a1)
{
  double height;
  double width;
  id v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  CGSize result;

  height = a1.height;
  width = a1.width;
  v3 = CAFUIBadgeView.label.getter();
  objc_msgSend(v3, sel_sizeThatFits_, width, height);
  v5 = v4;
  v7 = v6;

  if (one-time initialization token for badgePadding != -1)
    swift_once();
  v8 = v5 + *(double *)&static CAFUIBadgeView.badgePadding;
  v9 = v7 + *((double *)&static CAFUIBadgeView.badgePadding + 1);
  result.height = v9;
  result.width = v8;
  return result;
}

Swift::Void __swiftcall CAFUIBadgeView.layoutSubviews()()
{
  void *v0;
  id v1;
  double v2;
  objc_super v3;

  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for CAFUIBadgeView();
  objc_msgSendSuper2(&v3, sel_layoutSubviews);
  v1 = objc_msgSend(v0, sel_layer);
  objc_msgSend(v0, sel_bounds);
  objc_msgSend(v1, sel_setCornerRadius_, v2 * 0.5);

}

id CAFUIBadgeView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  objc_class *v4;

  return objc_msgSend(objc_allocWithZone(v4), sel_initWithFrame_, a1, a2, a3, a4);
}

void CAFUIBadgeView.init(frame:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id CAFUIBadgeView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFUIBadgeView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id thunk for @escaping @callee_guaranteed (@guaranteed UITraitCollection) -> (@owned UIColor)(uint64_t a1, void *a2)
{
  uint64_t (*v3)(void);
  id v4;
  void *v5;

  v3 = *(uint64_t (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  v5 = (void *)v3();
  swift_release();

  return v5;
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

uint64_t CAFUICabinAssetCoordinator.cabinImage.getter()
{
  uint64_t v1;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

id CAFUICabinAssetCoordinator.init()()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  objc_class *v18;
  id v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  objc_super v28;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAUAssetLibrary?>.Publisher);
  v25 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<Published<CAUAssetLibrary?>.Publisher, NSRunLoop>);
  v26 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<UIImage?>);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = OBJC_IVAR____TtC5CAFUI26CAFUICabinAssetCoordinator_assetManager;
  type metadata accessor for CAUAssetLibraryManager();
  swift_allocObject();
  v13 = v0;
  *(_QWORD *)&v0[v12] = CAUAssetLibraryManager.init()();
  v14 = &v13[OBJC_IVAR____TtC5CAFUI26CAFUICabinAssetCoordinator__cabinImage];
  v27 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIImage?);
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v11, v8);
  if ((MEMORY[0x24BEE4AF8] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
    v15 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x24BEE4AF8]);
  else
    v15 = MEMORY[0x24BEE4B08];
  v17 = v23;
  v16 = v24;
  *(_QWORD *)&v13[OBJC_IVAR____TtC5CAFUI26CAFUICabinAssetCoordinator_cancellables] = v15;

  v18 = (objc_class *)type metadata accessor for CAFUICabinAssetCoordinator();
  v28.receiver = v13;
  v28.super_class = v18;
  v19 = objc_msgSendSuper2(&v28, sel_init);
  dispatch thunk of CAUAssetLibraryManager.$assetLibrary.getter();
  v27 = objc_msgSend((id)objc_opt_self(), sel_mainRunLoop);
  v20 = type metadata accessor for NSRunLoop.SchedulerOptions();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v3, 1, 1, v20);
  type metadata accessor for NSRunLoop();
  lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type Published<CAUAssetLibrary?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<CAUAssetLibrary?>.Publisher, MEMORY[0x24BDB9EE8]);
  lazy protocol witness table accessor for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey(&lazy protocol witness table cache variable for type NSRunLoop and conformance NSRunLoop, (uint64_t (*)(uint64_t))type metadata accessor for NSRunLoop, MEMORY[0x24BDD0408]);
  Publisher.receive<A>(on:options:)();
  outlined destroy of NSRunLoop.SchedulerOptions?((uint64_t)v3);

  (*(void (**)(char *, uint64_t))(v25 + 8))(v5, v17);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type Publishers.ReceiveOn<Published<CAUAssetLibrary?>.Publisher, NSRunLoop> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<Published<CAUAssetLibrary?>.Publisher, NSRunLoop>, MEMORY[0x24BDB9A08]);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v7, v16);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();

  return v19;
}

void closure #1 in CAFUICabinAssetCoordinator.init()(void **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  _QWORD v15[3];

  v4 = type metadata accessor for CAUResource();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *a1;
  swift_beginAccess();
  v9 = (void *)MEMORY[0x23B813CDC](a2 + 16);
  if (v9)
  {
    v10 = v9;
    if (v8)
    {
      (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x24BE150F8], v4);
      v11 = v8;
      v12 = (void *)CAUAssetLibrary.asset(for:)();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      swift_getKeyPath();
      swift_getKeyPath();
      v15[1] = v12;
      v13 = v12;
      v14 = v10;
      static Published.subscript.setter();

    }
    else
    {

    }
  }
}

id CAFUICabinAssetCoordinator.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFUICabinAssetCoordinator();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFUICabinAssetCoordinator@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CAFUICabinAssetCoordinator();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

id (*variable initialization expression of CAFUICabinView._cabinCoordinator())()
{
  return implicit closure #2 in implicit closure #1 in variable initialization expression of CAFUICabinView._cabinCoordinator;
}

id implicit closure #2 in implicit closure #1 in variable initialization expression of CAFUICabinView._cabinCoordinator()
{
  return objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CAFUICabinAssetCoordinator()), sel_init);
}

__n128 CAFUICabinView.body.getter@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __n128 result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD v13[4];
  uint64_t v14;
  char v15;

  v4 = static Alignment.center.getter();
  v6 = v5;
  closure #1 in CAFUICabinView.body.getter(a1, (uint64_t)v13);
  v7 = v14;
  v8 = v15;
  result = (__n128)v13[0];
  v10 = v13[1];
  v11 = v13[2];
  v12 = v13[3];
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v6;
  *(__n128 *)(a2 + 16) = result;
  *(_OWORD *)(a2 + 32) = v10;
  *(_OWORD *)(a2 + 48) = v11;
  *(_OWORD *)(a2 + 64) = v12;
  *(_QWORD *)(a2 + 80) = v7;
  *(_BYTE *)(a2 + 88) = v8;
  return result;
}

double closure #1 in CAFUICabinView.body.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t KeyPath;
  uint64_t v17;
  uint64_t v18;
  double result;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  _BYTE v25[24];
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  char v37;

  v4 = type metadata accessor for Image.ResizingMode();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = &v25[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for CAFUICabinAssetCoordinator();
  lazy protocol witness table accessor for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey(&lazy protocol witness table cache variable for type CAFUICabinAssetCoordinator and conformance CAFUICabinAssetCoordinator, (uint64_t (*)(uint64_t))type metadata accessor for CAFUICabinAssetCoordinator, (uint64_t)&protocol conformance descriptor for CAFUICabinAssetCoordinator);
  v8 = (void *)StateObject.wrappedValue.getter();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();

  swift_release();
  swift_release();
  v9 = (void *)v32;
  if ((_QWORD)v32)
  {
    v10 = static HorizontalAlignment.center.getter();
    v11 = v9;
    Image.init(uiImage:)();
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x24BDF3FD0], v4);
    v12 = Image.resizable(capInsets:resizingMode:)();
    swift_release();
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
    swift_retain();
    v13 = static Alignment.center.getter();
    *(_QWORD *)v25 = v10;
    *(_OWORD *)&v25[8] = xmmword_23757A310;
    v26 = v12;
    v27 = xmmword_23757A310;
    v28 = a1;
    v29 = v13;
    v30 = v14;
    v31 = 0;
    swift_retain();
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VStack<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _OverlayModifier<AnyView?>>>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Rectangle, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<Color?>>, _OverlayModifier<AnyView?>>);
    lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type VStack<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _OverlayModifier<AnyView?>>> and conformance VStack<A>, &demangling cache variable for type metadata for VStack<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _OverlayModifier<AnyView?>>>, MEMORY[0x24BDF4700]);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Rectangle, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<Color?>>, _OverlayModifier<AnyView?>> and conformance <> ModifiedContent<A, B>();
    _ConditionalContent<>.init(storage:)();
    swift_release();
    swift_release();

  }
  else
  {
    v15 = static Color.clear.getter();
    KeyPath = swift_getKeyPath();
    swift_retain();
    v17 = static Alignment.center.getter();
    *(_OWORD *)v25 = xmmword_23757A320;
    *(_QWORD *)&v25[16] = KeyPath;
    v26 = v15;
    *(_QWORD *)&v27 = a1;
    *((_QWORD *)&v27 + 1) = v17;
    v29 = 0;
    v30 = 0;
    v28 = v18;
    v31 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VStack<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _OverlayModifier<AnyView?>>>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Rectangle, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<Color?>>, _OverlayModifier<AnyView?>>);
    lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type VStack<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _OverlayModifier<AnyView?>>> and conformance VStack<A>, &demangling cache variable for type metadata for VStack<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _OverlayModifier<AnyView?>>>, MEMORY[0x24BDF4700]);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Rectangle, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<Color?>>, _OverlayModifier<AnyView?>> and conformance <> ModifiedContent<A, B>();
    _ConditionalContent<>.init(storage:)();
  }
  result = *(double *)&v32;
  v20 = v33;
  v21 = v34;
  v22 = v35;
  v23 = v36;
  v24 = v37;
  *(_OWORD *)a2 = v32;
  *(_OWORD *)(a2 + 16) = v20;
  *(_OWORD *)(a2 + 32) = v21;
  *(_OWORD *)(a2 + 48) = v22;
  *(_QWORD *)(a2 + 64) = v23;
  *(_BYTE *)(a2 + 72) = v24;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in CAFUICabinView()
{
  return swift_getOpaqueTypeConformance2();
}

__n128 protocol witness for View.body.getter in conformance CAFUICabinView@<Q0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __n128 result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD v13[4];
  uint64_t v14;
  char v15;

  v3 = *v1;
  v4 = static Alignment.center.getter();
  v6 = v5;
  closure #1 in CAFUICabinView.body.getter(v3, (uint64_t)v13);
  v7 = v14;
  v8 = v15;
  result = (__n128)v13[0];
  v10 = v13[1];
  v11 = v13[2];
  v12 = v13[3];
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v6;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v10;
  *(_OWORD *)(a1 + 48) = v11;
  *(_OWORD *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 80) = v7;
  *(_BYTE *)(a1 + 88) = v8;
  return result;
}

uint64_t ObjC metadata update function for CAFUICabinAssetCoordinator()
{
  return type metadata accessor for CAFUICabinAssetCoordinator();
}

uint64_t type metadata accessor for CAFUICabinAssetCoordinator()
{
  uint64_t result;

  result = type metadata singleton initialization cache for CAFUICabinAssetCoordinator;
  if (!type metadata singleton initialization cache for CAFUICabinAssetCoordinator)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for CAFUICabinAssetCoordinator()
{
  unint64_t v0;

  type metadata accessor for Published<UIImage?>();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

void type metadata accessor for Published<UIImage?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Published<UIImage?>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for UIImage?);
    v0 = type metadata accessor for Published();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Published<UIImage?>);
  }
}

id outlined copy of StateObject<CAFUICabinAssetCoordinator>.Storage(uint64_t a1, void *a2, char a3)
{
  if ((a3 & 1) != 0)
    return a2;
  else
    return (id)swift_retain();
}

void destroy for CAFUICabinView(uint64_t a1)
{
  swift_release();
  outlined consume of StateObject<CAFUICabinAssetCoordinator>.Storage(*(_QWORD *)(a1 + 8), *(void **)(a1 + 16), *(_BYTE *)(a1 + 24));
}

void outlined consume of StateObject<CAFUICabinAssetCoordinator>.Storage(uint64_t a1, void *a2, char a3)
{
  if ((a3 & 1) != 0)

  else
    swift_release();
}

uint64_t initializeWithCopy for CAFUICabinView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  char v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(void **)(a2 + 16);
  v5 = *(_BYTE *)(a2 + 24);
  swift_retain();
  outlined copy of StateObject<CAFUICabinAssetCoordinator>.Storage(v3, v4, v5);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = v5;
  return a1;
}

uint64_t assignWithCopy for CAFUICabinView(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  char v8;

  v2 = a2;
  *(_QWORD *)a1 = *a2;
  swift_retain();
  swift_release();
  v4 = v2[1];
  v5 = (void *)v2[2];
  LOBYTE(v2) = *((_BYTE *)v2 + 24);
  outlined copy of StateObject<CAFUICabinAssetCoordinator>.Storage(v4, v5, (char)v2);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(void **)(a1 + 16);
  v8 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = (_BYTE)v2;
  outlined consume of StateObject<CAFUICabinAssetCoordinator>.Storage(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for CAFUICabinView(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  void *v6;
  char v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(void **)(a1 + 16);
  v7 = *(_BYTE *)(a1 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = v4;
  outlined consume of StateObject<CAFUICabinAssetCoordinator>.Storage(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for CAFUICabinView(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 25))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CAFUICabinView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for CAFUICabinView()
{
  return &type metadata for CAFUICabinView;
}

uint64_t sub_23754299C()
{
  return lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type ZStack<_ConditionalContent<VStack<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _OverlayModifier<AnyView?>>>, ModifiedContent<ModifiedContent<ModifiedContent<Rectangle, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<Color?>>, _OverlayModifier<AnyView?>>>> and conformance ZStack<A>, &demangling cache variable for type metadata for ZStack<_ConditionalContent<VStack<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _OverlayModifier<AnyView?>>>, ModifiedContent<ModifiedContent<ModifiedContent<Rectangle, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<Color?>>, _OverlayModifier<AnyView?>>>>, MEMORY[0x24BDF4750]);
}

uint64_t associated type witness table accessor for ObservableObject.ObjectWillChangePublisher : Publisher in CAFUICabinAssetCoordinator()
{
  return MEMORY[0x24BDB9D70];
}

uint64_t key path getter for CAFUICabinAssetCoordinator.cabinImage : CAFUICabinAssetCoordinator@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t key path setter for CAFUICabinAssetCoordinator.cabinImage : CAFUICabinAssetCoordinator(void **a1, void **a2)
{
  void *v2;
  void *v3;
  id v4;
  id v5;

  v2 = *a1;
  v3 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  v4 = v2;
  v5 = v3;
  return static Published.subscript.setter();
}

unint64_t type metadata accessor for NSRunLoop()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSRunLoop;
  if (!lazy cache variable for type metadata for NSRunLoop)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSRunLoop);
  }
  return result;
}

uint64_t sub_237542B04()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in CAFUICabinAssetCoordinator.init()(void **a1)
{
  uint64_t v1;

  closure #1 in CAFUICabinAssetCoordinator.init()(a1, v1);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Rectangle, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<Color?>>, _OverlayModifier<AnyView?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Rectangle, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<Color?>>, _OverlayModifier<AnyView?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Rectangle, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<Color?>>, _OverlayModifier<AnyView?>> and conformance <> ModifiedContent<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Rectangle, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<Color?>>, _OverlayModifier<AnyView?>>);
    v2[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Rectangle, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>();
    v2[1] = lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type _OverlayModifier<AnyView?> and conformance _OverlayModifier<A>, &demangling cache variable for type metadata for _OverlayModifier<AnyView?>, MEMORY[0x24BDEDC10]);
    result = MEMORY[0x23B813BE0](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Rectangle, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<Color?>>, _OverlayModifier<AnyView?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Rectangle, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Rectangle, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Rectangle, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Rectangle, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<Color?>>);
    v2[0] = lazy protocol witness table accessor for type ModifiedContent<Rectangle, _AspectRatioLayout> and conformance <> ModifiedContent<A, B>();
    v2[1] = lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, MEMORY[0x24BDF1028]);
    result = MEMORY[0x23B813BE0](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Rectangle, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Rectangle, _AspectRatioLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Rectangle, _AspectRatioLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Rectangle, _AspectRatioLayout> and conformance <> ModifiedContent<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<Rectangle, _AspectRatioLayout>);
    v2[0] = lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
    v2[1] = MEMORY[0x24BDEEC40];
    result = MEMORY[0x23B813BE0](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Rectangle, _AspectRatioLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Rectangle and conformance Rectangle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Rectangle and conformance Rectangle;
  if (!lazy protocol witness table cache variable for type Rectangle and conformance Rectangle)
  {
    result = MEMORY[0x23B813BE0](MEMORY[0x24BDF52D0], MEMORY[0x24BDF52F8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Rectangle and conformance Rectangle);
  }
  return result;
}

uint64_t CAFUIBalanceFadeView.init(soundDistributionObservable:)()
{
  type metadata accessor for CAFSoundDistributionObservable();
  lazy protocol witness table accessor for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey(&lazy protocol witness table cache variable for type CAFSoundDistributionObservable and conformance CAFSoundDistributionObservable, (uint64_t (*)(uint64_t))MEMORY[0x24BE100C0], MEMORY[0x24BE10090]);
  return ObservedObject.init(wrappedValue:)();
}

void CAFUIBalanceFadeCrosshair.path(in:)(char a1@<W0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D4>, double a5@<D5>, double a6@<D6>)
{
  double v14;
  double v15;
  double v16;
  id v17;
  id v18;
  char v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char v24;
  CGRect v25;

  v25 = CGRectInset(*(CGRect *)&a3, a6 + 1.0, a6 + 1.0);
  v14 = v25.origin.x + v25.size.width * a4;
  v15 = v25.origin.y + v25.size.height * a5;
  if ((a1 & 1) != 0)
  {
    v16 = a6 + -2.0 + -1.0;
    v17 = objc_msgSend((id)objc_opt_self(), sel_bezierPathWithRoundedRect_cornerRadius_, v14 - v16, v15 - v16, v16 + v16, v16 + v16, 12.0);
    v18 = objc_msgSend(v17, sel_CGPath);
    Path.init(_:)();
    v19 = v24;

    v21 = v23;
    v20 = v22;
  }
  else
  {
    CAFUIBalanceFadeCrosshair.crosshairPath(rect:centerPoint:)((uint64_t)&v22, v25.origin.x, v25.origin.y, v25.size.width, v25.size.height, v14, v15, a6);
    v20 = v22;
    v21 = v23;
    v19 = v24;
  }
  *(_OWORD *)a2 = v20;
  *(_OWORD *)(a2 + 16) = v21;
  *(_BYTE *)(a2 + 32) = v19;
}

double CAFUIBalanceFadeCrosshair.crosshairPath(rect:centerPoint:)@<D0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>, double a6@<D4>, double a7@<D5>, double a8)
{
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  double v23;
  id v24;
  id v25;
  double result;
  __int128 v27;
  __int128 v28;
  char v29;
  _BYTE v30[40];
  _BYTE v31[40];
  _BYTE v32[40];
  _BYTE v33[40];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  CGRect v58;
  CGRect v59;
  CGRect v60;
  CGRect v61;
  CGRect v62;
  CGRect v63;
  CGRect v64;

  v15 = objc_msgSend((id)objc_opt_self(), sel_bezierPathWithArcCenter_radius_startAngle_endAngle_clockwise_, 1, a6, a7, a8, -1.57079633, 4.71238898);
  v16 = objc_msgSend(v15, sel_CGPath);
  Path.init(_:)();
  if (a6 > 26.0)
  {
    v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD420]), sel_init);
    v58.origin.x = a2;
    v58.origin.y = a3;
    v58.size.width = a4;
    v58.size.height = a5;
    objc_msgSend(v17, sel_moveToPoint_, CGRectGetMinX(v58), a7);
    v59.origin.x = a2;
    v59.origin.y = a3;
    v59.size.width = a4;
    v59.size.height = a5;
    objc_msgSend(v17, sel_addLineToPoint_, a6 - a2 - a8 + CGRectGetMinX(v59), a7);
    v18 = objc_msgSend(v17, sel_CGPath);
    Path.init(_:)();
    v52 = 0x3FF0000000000000;
    v53 = 0;
    v54 = 0;
    v55 = 0x3FF0000000000000;
    v56 = 0;
    v57 = 0;
    Path.addPath(_:transform:)();
    outlined release of Path((uint64_t)v30);

  }
  v60.origin.x = a2;
  v60.origin.y = a3;
  v60.size.width = a4;
  v60.size.height = a5;
  if (a6 + a8 < CGRectGetMaxX(v60))
  {
    v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD420]), sel_init);
    objc_msgSend(v19, sel_moveToPoint_, a6 + a8, a7);
    v61.origin.x = a2;
    v61.origin.y = a3;
    v61.size.width = a4;
    v61.size.height = a5;
    objc_msgSend(v19, sel_addLineToPoint_, CGRectGetMaxX(v61), a7);
    v20 = objc_msgSend(v19, sel_CGPath);
    Path.init(_:)();
    v46 = 0x3FF0000000000000;
    v47 = 0;
    v48 = 0;
    v49 = 0x3FF0000000000000;
    v50 = 0;
    v51 = 0;
    Path.addPath(_:transform:)();
    outlined release of Path((uint64_t)v31);

  }
  if (a7 > 26.0)
  {
    v21 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD420]), sel_init);
    v62.origin.x = a2;
    v62.origin.y = a3;
    v62.size.width = a4;
    v62.size.height = a5;
    objc_msgSend(v21, sel_moveToPoint_, a6, CGRectGetMinY(v62));
    objc_msgSend(v21, sel_addLineToPoint_, a6, a7 - a8);
    v22 = objc_msgSend(v21, sel_CGPath);
    Path.init(_:)();
    v40 = 0x3FF0000000000000;
    v41 = 0;
    v42 = 0;
    v43 = 0x3FF0000000000000;
    v44 = 0;
    v45 = 0;
    Path.addPath(_:transform:)();
    outlined release of Path((uint64_t)v32);

  }
  v23 = a7 + a8;
  v63.origin.x = a2;
  v63.origin.y = a3;
  v63.size.width = a4;
  v63.size.height = a5;
  if (v23 < CGRectGetMaxY(v63))
  {
    v24 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD420]), sel_init);
    v64.origin.x = a2;
    v64.origin.y = a3;
    v64.size.width = a4;
    v64.size.height = a5;
    objc_msgSend(v24, sel_moveToPoint_, a6, CGRectGetMaxY(v64));
    objc_msgSend(v24, sel_addLineToPoint_, a6, v23);
    v25 = objc_msgSend(v24, sel_CGPath);
    Path.init(_:)();
    v34 = 0x3FF0000000000000;
    v35 = 0;
    v36 = 0;
    v37 = 0x3FF0000000000000;
    v38 = 0;
    v39 = 0;
    Path.addPath(_:transform:)();

    outlined release of Path((uint64_t)v33);
    v15 = v24;
  }

  result = *(double *)&v27;
  *(_OWORD *)a1 = v27;
  *(_OWORD *)(a1 + 16) = v28;
  *(_BYTE *)(a1 + 32) = v29;
  return result;
}

double protocol witness for Shape.path(in:) in conformance CAFUIBalanceFadeCrosshair@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  char v7;

  CAFUIBalanceFadeCrosshair.path(in:)(*(_BYTE *)(v2 + 16), (uint64_t)v6, a2, *(double *)v2, *(double *)(v2 + 8), *(double *)(v2 + 24));
  result = *(double *)v6;
  v5 = v6[1];
  *(_OWORD *)a1 = v6[0];
  *(_OWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 32) = v7;
  return result;
}

uint64_t protocol witness for Shape.sizeThatFits(_:) in conformance CAFUIBalanceFadeCrosshair()
{
  return Shape.sizeThatFits(_:)();
}

void (*protocol witness for Animatable.animatableData.modify in conformance CAFUIBalanceFadeCrosshair(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = Animatable<>.animatableData.modify();
  return protocol witness for CAFUIImageRepresentable.selectedIndices.modify in conformance CAFMultipleSelectImageSetting;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance CAFUIBalanceFadeCrosshair()
{
  lazy protocol witness table accessor for type CAFUIBalanceFadeCrosshair and conformance CAFUIBalanceFadeCrosshair();
  return static Shape._makeView(view:inputs:)();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance CAFUIBalanceFadeCrosshair()
{
  lazy protocol witness table accessor for type CAFUIBalanceFadeCrosshair and conformance CAFUIBalanceFadeCrosshair();
  return static Shape._makeViewList(view:inputs:)();
}

uint64_t protocol witness for View.body.getter in conformance CAFUIBalanceFadeCrosshair()
{
  lazy protocol witness table accessor for type CAFUIBalanceFadeCrosshair and conformance CAFUIBalanceFadeCrosshair();
  return Shape.body.getter();
}

uint64_t property wrapper backing initializer of CAFUIBalanceFadeView.soundDistributionObservable()
{
  type metadata accessor for CAFSoundDistributionObservable();
  lazy protocol witness table accessor for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey(&lazy protocol witness table cache variable for type CAFSoundDistributionObservable and conformance CAFSoundDistributionObservable, (uint64_t (*)(uint64_t))MEMORY[0x24BE100C0], MEMORY[0x24BE10090]);
  return ObservedObject.init(wrappedValue:)();
}

uint64_t CAFUIBalanceFadeView.body.getter@<X0>(uint64_t a1@<X0>, void *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ZStack<TupleView<(ZStack<GeometryReader<ModifiedContent<<<opaque return type of View.simultaneousGesture<A>(_:including:)>>.0, AccessibilityAttachmentModifier>>>, TupleView<(HStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>, VStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>)>?)>>);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (uint64_t *)((char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = static HorizontalAlignment.center.getter();
  *v10 = static Alignment.center.getter();
  v10[1] = v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_ZStackLayout, TupleView<(ZStack<GeometryReader<ModifiedContent<<<opaque return type of View.simultaneousGesture<A>(_:including:)>>.0, AccessibilityAttachmentModifier>>>, TupleView<(HStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>, VStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>)>?)>>);
  closure #1 in closure #1 in CAFUIBalanceFadeView.body.getter(a1, a2, a3, (uint64_t *)((char *)v10 + *(int *)(v13 + 44)));
  lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type ZStack<TupleView<(ZStack<GeometryReader<ModifiedContent<<<opaque return type of View.simultaneousGesture<A>(_:including:)>>.0, AccessibilityAttachmentModifier>>>, TupleView<(HStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>, VStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>)>?)>> and conformance ZStack<A>, &demangling cache variable for type metadata for ZStack<TupleView<(ZStack<GeometryReader<ModifiedContent<<<opaque return type of View.simultaneousGesture<A>(_:including:)>>.0, AccessibilityAttachmentModifier>>>, TupleView<(HStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>, VStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>)>?)>>, MEMORY[0x24BDF4750]);
  v14 = AnyView.init<A>(_:)();
  LOBYTE(a2) = static Edge.Set.bottom.getter();
  result = EdgeInsets.init(_all:)();
  *(_QWORD *)a4 = v11;
  *(_QWORD *)(a4 + 8) = 0;
  *(_BYTE *)(a4 + 16) = 1;
  *(_QWORD *)(a4 + 24) = v14;
  *(_QWORD *)(a4 + 32) = implicit closure #2 in implicit closure #1 in variable initialization expression of CAFUICabinView._cabinCoordinator;
  *(_QWORD *)(a4 + 40) = 0;
  *(_BYTE *)(a4 + 48) = 0;
  *(_BYTE *)(a4 + 56) = (_BYTE)a2;
  *(_QWORD *)(a4 + 64) = v16;
  *(_QWORD *)(a4 + 72) = v17;
  *(_QWORD *)(a4 + 80) = v18;
  *(_QWORD *)(a4 + 88) = v19;
  *(_BYTE *)(a4 + 96) = 0;
  return result;
}

uint64_t closure #1 in closure #1 in CAFUIBalanceFadeView.body.getter@<X0>(uint64_t a1@<X0>, void *a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v40 = (uint64_t)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v39 - v11;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v39 - v17;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(HStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>, VStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>)>?);
  v20 = MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v39 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v39 - v23;
  v25 = static Alignment.center.getter();
  v41 = v26;
  v42 = v25;
  v27 = swift_allocObject();
  *(_QWORD *)(v27 + 16) = a1;
  *(_QWORD *)(v27 + 24) = a2;
  *(_BYTE *)(v27 + 32) = a3;
  if ((a3 & 1) != 0)
  {
    v28 = a2;
    *(_QWORD *)v18 = static VerticalAlignment.center.getter();
    *((_QWORD *)v18 + 1) = 0;
    v18[16] = 1;
    v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_HStackLayout, TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>);
    closure #2 in closure #1 in closure #1 in CAFUIBalanceFadeView.body.getter(a1, v28, 1, (uint64_t)&v18[*(int *)(v29 + 44)]);
    *(_QWORD *)v12 = static HorizontalAlignment.center.getter();
    *((_QWORD *)v12 + 1) = 0;
    v12[16] = 1;
    v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_VStackLayout, TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>);
    closure #3 in closure #1 in closure #1 in CAFUIBalanceFadeView.body.getter(a1, v28, 1, (uint64_t)&v12[*(int *)(v30 + 44)]);
    outlined init with copy of UIListContentConfiguration?((uint64_t)v18, (uint64_t)v16, &demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>);
    v31 = v40;
    outlined init with copy of UIListContentConfiguration?((uint64_t)v12, v40, &demangling cache variable for type metadata for VStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>);
    outlined init with copy of UIListContentConfiguration?((uint64_t)v16, (uint64_t)v22, &demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>);
    v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (HStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>, VStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>));
    outlined init with copy of UIListContentConfiguration?(v31, (uint64_t)&v22[*(int *)(v32 + 48)], &demangling cache variable for type metadata for VStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>);
    outlined destroy of UIContentConfiguration?((uint64_t)v12, &demangling cache variable for type metadata for VStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>);
    outlined destroy of UIContentConfiguration?((uint64_t)v18, &demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>);
    outlined destroy of UIContentConfiguration?(v31, &demangling cache variable for type metadata for VStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>);
    outlined destroy of UIContentConfiguration?((uint64_t)v16, &demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>);
    v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(HStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>, VStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>)>);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v22, 0, 1, v33);
    outlined init with take of UIListContentConfiguration?((uint64_t)v22, (uint64_t)v24, &demangling cache variable for type metadata for TupleView<(HStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>, VStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>)>?);
  }
  else
  {
    v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(HStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>, VStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>)>);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v24, 1, 1, v34);
    v35 = a2;
  }
  outlined init with copy of UIListContentConfiguration?((uint64_t)v24, (uint64_t)v22, &demangling cache variable for type metadata for TupleView<(HStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>, VStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>)>?);
  v36 = v41;
  *a4 = v42;
  a4[1] = v36;
  a4[2] = (uint64_t)partial apply for closure #1 in closure #1 in closure #1 in closure #1 in CAFUIBalanceFadeView.body.getter;
  a4[3] = v27;
  v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ZStack<GeometryReader<ModifiedContent<<<opaque return type of View.simultaneousGesture<A>(_:including:)>>.0, AccessibilityAttachmentModifier>>>, TupleView<(HStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>, VStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>)>?));
  outlined init with copy of UIListContentConfiguration?((uint64_t)v22, (uint64_t)a4 + *(int *)(v37 + 48), &demangling cache variable for type metadata for TupleView<(HStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>, VStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>)>?);
  swift_retain();
  outlined destroy of UIContentConfiguration?((uint64_t)v24, &demangling cache variable for type metadata for TupleView<(HStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>, VStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>)>?);
  outlined destroy of UIContentConfiguration?((uint64_t)v22, &demangling cache variable for type metadata for TupleView<(HStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>, VStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>)>?);
  return swift_release();
}

uint64_t associated type witness table accessor for View.Body : View in CAFUIBalanceFadeView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t closure #1 in closure #1 in closure #1 in closure #1 in CAFUIBalanceFadeView.body.getter@<X0>(uint64_t a1@<X1>, void *a2@<X2>, int a3@<W3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  id v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;

  v50 = a3;
  v49 = a1;
  v59 = a4;
  v5 = type metadata accessor for DragGesture();
  v51 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ChangedGesture<DragGesture>);
  v55 = *(_QWORD *)(v52 - 8);
  MEMORY[0x24BDAC7A8](v52);
  v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _EndedGesture<_ChangedGesture<DragGesture>>);
  v56 = *(_QWORD *)(v53 - 8);
  MEMORY[0x24BDAC7A8](v53);
  v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.simultaneousGesture<A>(_:including:)>>.0);
  v13 = *(_QWORD *)(v12 - 8);
  v57 = v12;
  v58 = v13;
  MEMORY[0x24BDAC7A8](v12);
  v54 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for LocalCoordinateSpace();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  static CoordinateSpaceProtocol<>.local.getter();
  GeometryProxy.frame<A>(in:)();
  v20 = v19;
  v22 = v21;
  v24 = v23;
  v26 = v25;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  v27 = a2;
  v28 = (void *)CAFSoundDistributionObservable.observed.getter();

  CAFSoundDistribution.balanceScale.getter();
  v30 = v29;

  v31 = v27;
  v32 = (void *)CAFSoundDistributionObservable.observed.getter();

  CAFSoundDistribution.fadeScale.getter();
  v34 = v33;

  v60 = v30;
  v61 = v34;
  LOBYTE(v62) = 0;
  static CoordinateSpaceProtocol<>.local.getter();
  DragGesture.init<A>(minimumDistance:coordinateSpace:)();
  v35 = swift_allocObject();
  v36 = v49;
  *(_QWORD *)(v35 + 16) = v49;
  *(_QWORD *)(v35 + 24) = v31;
  v37 = v50;
  *(_BYTE *)(v35 + 32) = v50;
  *(_QWORD *)(v35 + 40) = v20;
  *(_QWORD *)(v35 + 48) = v22;
  *(_QWORD *)(v35 + 56) = v24;
  *(_QWORD *)(v35 + 64) = v26;
  lazy protocol witness table accessor for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey(&lazy protocol witness table cache variable for type DragGesture and conformance DragGesture, (uint64_t (*)(uint64_t))MEMORY[0x24BDEB540], MEMORY[0x24BDEB530]);
  lazy protocol witness table accessor for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey(&lazy protocol witness table cache variable for type DragGesture.Value and conformance DragGesture.Value, MEMORY[0x24BDEB500], MEMORY[0x24BDEB520]);
  v38 = v31;
  Gesture<>.onChanged(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v51 + 8))(v7, v5);
  v39 = swift_allocObject();
  *(_QWORD *)(v39 + 16) = v36;
  *(_QWORD *)(v39 + 24) = v38;
  *(_BYTE *)(v39 + 32) = v37;
  *(_QWORD *)(v39 + 40) = v20;
  *(_QWORD *)(v39 + 48) = v22;
  *(_QWORD *)(v39 + 56) = v24;
  *(_QWORD *)(v39 + 64) = v26;
  lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type _ChangedGesture<DragGesture> and conformance _ChangedGesture<A>, &demangling cache variable for type metadata for _ChangedGesture<DragGesture>, MEMORY[0x24BDED570]);
  v40 = v38;
  v41 = v52;
  Gesture.onEnded(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v55 + 8))(v9, v41);
  static GestureMask.all.getter();
  v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<AudioSettingsCrosshairView, _ContentShapeModifier<Rectangle>>);
  v43 = lazy protocol witness table accessor for type ModifiedContent<AudioSettingsCrosshairView, _ContentShapeModifier<Rectangle>> and conformance <> ModifiedContent<A, B>();
  v44 = lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type _EndedGesture<_ChangedGesture<DragGesture>> and conformance _EndedGesture<A>, &demangling cache variable for type metadata for _EndedGesture<_ChangedGesture<DragGesture>>, MEMORY[0x24BDEC410]);
  v45 = v54;
  v46 = v53;
  View.simultaneousGesture<A>(_:including:)();
  (*(void (**)(char *, uint64_t))(v56 + 8))(v11, v46);
  v60 = v42;
  v61 = v46;
  v62 = v43;
  v63 = v44;
  swift_getOpaqueTypeConformance2();
  v47 = v57;
  View.accessibilityIdentifier(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v45, v47);
}

void closure #1 in closure #1 in closure #1 in closure #1 in closure #1 in CAFUIBalanceFadeView.body.getter(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, void *a7)
{
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  id v15;
  void *v16;
  double v17;
  id v18;
  double v19;
  id v20;

  DragGesture.Value.location.getter();
  v11 = v10 + -32.0;
  v13 = v12 + -32.0;
  v14 = a4 + -64.0;
  v15 = a7;
  v16 = (void *)CAFSoundDistributionObservable.observed.getter();

  v17 = v11 / (a3 + -64.0);
  if (v17 < 0.0)
    v17 = 0.0;
  CAFSoundDistribution.balanceScale.setter(fmin(v17, 1.0));

  v18 = v15;
  v20 = (id)CAFSoundDistributionObservable.observed.getter();

  v19 = v13 / v14;
  if (v13 / v14 < 0.0)
    v19 = 0.0;
  CAFSoundDistribution.fadeScale.setter(fmin(v19, 1.0));

}

uint64_t closure #2 in closure #1 in closure #1 in CAFUIBalanceFadeView.body.getter@<X0>(uint64_t a1@<X0>, void *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  char v4;
  int *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  id v27;
  void (**v28)();
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  void (**v39)();
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;

  v4 = a3;
  v52 = a3;
  v51 = a1;
  v56 = a4;
  v7 = (int *)type metadata accessor for AudioSettingsButton();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (uint64_t *)((char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v55 = (uint64_t)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v54 = (char *)&v47 - v14;
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v47 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v53 = (uint64_t)&v47 - v18;
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = a1;
  *(_QWORD *)(v19 + 24) = a2;
  *(_BYTE *)(v19 + 32) = v4;
  *v9 = swift_getKeyPath();
  v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  swift_storeEnumTagMultiPayload();
  v20 = v7[7];
  v49 = *MEMORY[0x24BEBE248];
  v21 = v49;
  v22 = *MEMORY[0x24BEBB610];
  v23 = objc_allocWithZone(MEMORY[0x24BEBD5F0]);
  v48 = a2;
  v24 = objc_msgSend(v23, sel_initForTextStyle_, v21);
  v25 = (void *)objc_opt_self();
  v26 = objc_msgSend(v25, sel_systemFontOfSize_weight_, 16.0, v22);
  v27 = objc_msgSend(v24, sel_scaledFontForFont_, v26);

  *(uint64_t *)((char *)v9 + v20) = Font.init(_:)();
  v28 = (void (**)())((char *)v9 + v7[6]);
  *v28 = partial apply for closure #1 in closure #2 in closure #1 in closure #1 in CAFUIBalanceFadeView.body.getter;
  v28[1] = (void (*)())v19;
  v29 = (char *)v9 + v7[5];
  strcpy(v29, "chevron.left");
  v29[13] = 0;
  *((_WORD *)v29 + 7) = -5120;
  lazy protocol witness table accessor for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey(&lazy protocol witness table cache variable for type AudioSettingsButton and conformance AudioSettingsButton, (uint64_t (*)(uint64_t))type metadata accessor for AudioSettingsButton, (uint64_t)&protocol conformance descriptor for AudioSettingsButton);
  View.accessibilityIdentifier(_:)();
  outlined destroy of AudioSettingsButton((uint64_t)v9);
  v30 = v53;
  outlined init with take of UIListContentConfiguration?((uint64_t)v17, v53, &demangling cache variable for type metadata for ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>);
  v31 = swift_allocObject();
  v32 = v48;
  *(_QWORD *)(v31 + 16) = v51;
  *(_QWORD *)(v31 + 24) = v32;
  *(_BYTE *)(v31 + 32) = v52;
  *v9 = swift_getKeyPath();
  swift_storeEnumTagMultiPayload();
  v33 = v7[7];
  v34 = objc_allocWithZone(MEMORY[0x24BEBD5F0]);
  v35 = v32;
  v36 = objc_msgSend(v34, sel_initForTextStyle_, v49);
  v37 = objc_msgSend(v25, sel_systemFontOfSize_weight_, 16.0, v22);
  v38 = objc_msgSend(v36, sel_scaledFontForFont_, v37);

  *(uint64_t *)((char *)v9 + v33) = Font.init(_:)();
  v39 = (void (**)())((char *)v9 + v7[6]);
  *v39 = partial apply for closure #2 in closure #2 in closure #1 in closure #1 in CAFUIBalanceFadeView.body.getter;
  v39[1] = (void (*)())v31;
  v40 = (char *)v9 + v7[5];
  strcpy(v40, "chevron.right");
  *((_WORD *)v40 + 7) = -4864;
  v41 = (uint64_t)v54;
  View.accessibilityIdentifier(_:)();
  outlined destroy of AudioSettingsButton((uint64_t)v9);
  outlined init with take of UIListContentConfiguration?(v41, (uint64_t)v17, &demangling cache variable for type metadata for ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>);
  outlined init with copy of UIListContentConfiguration?(v30, v41, &demangling cache variable for type metadata for ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>);
  v42 = v55;
  outlined init with copy of UIListContentConfiguration?((uint64_t)v17, v55, &demangling cache variable for type metadata for ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>);
  v43 = v56;
  outlined init with copy of UIListContentConfiguration?(v41, v56, &demangling cache variable for type metadata for ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>);
  v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>));
  v45 = v43 + *(int *)(v44 + 48);
  *(_QWORD *)v45 = 0;
  *(_BYTE *)(v45 + 8) = 1;
  outlined init with copy of UIListContentConfiguration?(v42, v43 + *(int *)(v44 + 64), &demangling cache variable for type metadata for ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>);
  outlined destroy of UIContentConfiguration?((uint64_t)v17, &demangling cache variable for type metadata for ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>);
  outlined destroy of UIContentConfiguration?(v30, &demangling cache variable for type metadata for ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>);
  outlined destroy of UIContentConfiguration?(v42, &demangling cache variable for type metadata for ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>);
  return outlined destroy of UIContentConfiguration?(v41, &demangling cache variable for type metadata for ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>);
}

void closure #1 in closure #2 in closure #1 in closure #1 in CAFUIBalanceFadeView.body.getter(uint64_t a1, void *a2)
{
  id v2;
  char v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  void (*v10)(uint64_t *, _QWORD);
  _BYTE *v11;
  int v12;
  uint64_t v13;

  v2 = a2;
  v3 = dispatch thunk of CAFSoundDistributionObservable.balance.getter();

  v4 = v2;
  v5 = (void *)CAFSoundDistributionObservable.observed.getter();

  v6 = objc_msgSend(v5, sel_balanceRange);
  LODWORD(v5) = objc_msgSend(v6, sel_minimumValue);

  if ((int)v5 < v3)
  {
    v7 = v4;
    v8 = (void *)CAFSoundDistributionObservable.observed.getter();
    v9 = objc_msgSend(v8, sel_balanceRange);

    LODWORD(v8) = objc_msgSend(v9, sel_stepValue);
    v10 = (void (*)(uint64_t *, _QWORD))dispatch thunk of CAFSoundDistributionObservable.balance.modify();
    v12 = (char)*v11 - (_DWORD)v8;
    if ((char)(*v11 - (_BYTE)v8) == v12)
    {
      *v11 = v12;
      v10(&v13, 0);

    }
    else
    {
      __break(1u);
    }
  }
}

void closure #2 in closure #2 in closure #1 in closure #1 in CAFUIBalanceFadeView.body.getter(uint64_t a1, void *a2)
{
  id v2;
  char v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  void (*v10)(uint64_t *, _QWORD);
  _BYTE *v11;
  int v12;
  uint64_t v13;

  v2 = a2;
  v3 = dispatch thunk of CAFSoundDistributionObservable.balance.getter();

  v4 = v2;
  v5 = (void *)CAFSoundDistributionObservable.observed.getter();

  v6 = objc_msgSend(v5, sel_balanceRange);
  LODWORD(v5) = objc_msgSend(v6, sel_maximumValue);

  if ((int)v5 > v3)
  {
    v7 = v4;
    v8 = (void *)CAFSoundDistributionObservable.observed.getter();
    v9 = objc_msgSend(v8, sel_balanceRange);

    LODWORD(v8) = objc_msgSend(v9, sel_stepValue);
    v10 = (void (*)(uint64_t *, _QWORD))dispatch thunk of CAFSoundDistributionObservable.balance.modify();
    v12 = (char)*v11 + (_DWORD)v8;
    if ((char)(*v11 + (_BYTE)v8) == v12)
    {
      *v11 = v12;
      v10(&v13, 0);

    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t closure #3 in closure #1 in closure #1 in CAFUIBalanceFadeView.body.getter@<X0>(uint64_t a1@<X0>, void *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  char v4;
  int *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  id v27;
  void (**v28)();
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  void (**v39)();
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;

  v4 = a3;
  v52 = a3;
  v51 = a1;
  v56 = a4;
  v7 = (int *)type metadata accessor for AudioSettingsButton();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (uint64_t *)((char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v55 = (uint64_t)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v54 = (char *)&v47 - v14;
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v47 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v53 = (uint64_t)&v47 - v18;
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = a1;
  *(_QWORD *)(v19 + 24) = a2;
  *(_BYTE *)(v19 + 32) = v4;
  *v9 = swift_getKeyPath();
  v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  swift_storeEnumTagMultiPayload();
  v20 = v7[7];
  v49 = *MEMORY[0x24BEBE248];
  v21 = v49;
  v22 = *MEMORY[0x24BEBB610];
  v23 = objc_allocWithZone(MEMORY[0x24BEBD5F0]);
  v48 = a2;
  v24 = objc_msgSend(v23, sel_initForTextStyle_, v21);
  v25 = (void *)objc_opt_self();
  v26 = objc_msgSend(v25, sel_systemFontOfSize_weight_, 16.0, v22);
  v27 = objc_msgSend(v24, sel_scaledFontForFont_, v26);

  *(uint64_t *)((char *)v9 + v20) = Font.init(_:)();
  v28 = (void (**)())((char *)v9 + v7[6]);
  *v28 = partial apply for closure #1 in closure #3 in closure #1 in closure #1 in CAFUIBalanceFadeView.body.getter;
  v28[1] = (void (*)())v19;
  v29 = (uint64_t *)((char *)v9 + v7[5]);
  *v29 = 0x2E6E6F7276656863;
  v29[1] = 0xEA00000000007075;
  lazy protocol witness table accessor for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey(&lazy protocol witness table cache variable for type AudioSettingsButton and conformance AudioSettingsButton, (uint64_t (*)(uint64_t))type metadata accessor for AudioSettingsButton, (uint64_t)&protocol conformance descriptor for AudioSettingsButton);
  View.accessibilityIdentifier(_:)();
  outlined destroy of AudioSettingsButton((uint64_t)v9);
  v30 = v53;
  outlined init with take of UIListContentConfiguration?((uint64_t)v17, v53, &demangling cache variable for type metadata for ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>);
  v31 = swift_allocObject();
  v32 = v48;
  *(_QWORD *)(v31 + 16) = v51;
  *(_QWORD *)(v31 + 24) = v32;
  *(_BYTE *)(v31 + 32) = v52;
  *v9 = swift_getKeyPath();
  swift_storeEnumTagMultiPayload();
  v33 = v7[7];
  v34 = objc_allocWithZone(MEMORY[0x24BEBD5F0]);
  v35 = v32;
  v36 = objc_msgSend(v34, sel_initForTextStyle_, v49);
  v37 = objc_msgSend(v25, sel_systemFontOfSize_weight_, 16.0, v22);
  v38 = objc_msgSend(v36, sel_scaledFontForFont_, v37);

  *(uint64_t *)((char *)v9 + v33) = Font.init(_:)();
  v39 = (void (**)())((char *)v9 + v7[6]);
  *v39 = partial apply for closure #2 in closure #3 in closure #1 in closure #1 in CAFUIBalanceFadeView.body.getter;
  v39[1] = (void (*)())v31;
  v40 = (char *)v9 + v7[5];
  strcpy(v40, "chevron.down");
  v40[13] = 0;
  *((_WORD *)v40 + 7) = -5120;
  v41 = (uint64_t)v54;
  View.accessibilityIdentifier(_:)();
  outlined destroy of AudioSettingsButton((uint64_t)v9);
  outlined init with take of UIListContentConfiguration?(v41, (uint64_t)v17, &demangling cache variable for type metadata for ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>);
  outlined init with copy of UIListContentConfiguration?(v30, v41, &demangling cache variable for type metadata for ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>);
  v42 = v55;
  outlined init with copy of UIListContentConfiguration?((uint64_t)v17, v55, &demangling cache variable for type metadata for ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>);
  v43 = v56;
  outlined init with copy of UIListContentConfiguration?(v41, v56, &demangling cache variable for type metadata for ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>);
  v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>));
  v45 = v43 + *(int *)(v44 + 48);
  *(_QWORD *)v45 = 0;
  *(_BYTE *)(v45 + 8) = 1;
  outlined init with copy of UIListContentConfiguration?(v42, v43 + *(int *)(v44 + 64), &demangling cache variable for type metadata for ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>);
  outlined destroy of UIContentConfiguration?((uint64_t)v17, &demangling cache variable for type metadata for ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>);
  outlined destroy of UIContentConfiguration?(v30, &demangling cache variable for type metadata for ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>);
  outlined destroy of UIContentConfiguration?(v42, &demangling cache variable for type metadata for ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>);
  return outlined destroy of UIContentConfiguration?(v41, &demangling cache variable for type metadata for ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>);
}

void closure #1 in closure #3 in closure #1 in closure #1 in CAFUIBalanceFadeView.body.getter(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  unsigned int v4;
  id v5;
  __int16 v6;
  char v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  unsigned int v14;
  void (*v15)(uint64_t *, _QWORD);
  char *v16;
  unsigned int v17;
  uint64_t v18;

  v2 = a2;
  v3 = (void *)CAFSoundDistributionObservable.observed.getter();

  v4 = objc_msgSend(v3, sel_hasFade);
  if (v4)
  {
    v5 = v2;
    v6 = dispatch thunk of CAFSoundDistributionObservable.fade.getter();

    v7 = (v6 & 0x100) != 0 ? 0 : v6;
    v8 = v5;
    v9 = (void *)CAFSoundDistributionObservable.observed.getter();

    v10 = objc_msgSend(v9, sel_fadeRange);
    LODWORD(v9) = objc_msgSend(v10, sel_minimumValue);

    if ((int)v9 < v7)
    {
      v11 = v8;
      v12 = (void *)CAFSoundDistributionObservable.observed.getter();
      v13 = objc_msgSend(v12, sel_fadeRange);

      v14 = objc_msgSend(v13, sel_stepValue);
      v15 = (void (*)(uint64_t *, _QWORD))dispatch thunk of CAFSoundDistributionObservable.fade.modify();
      if ((v16[1] & 1) == 0)
      {
        v17 = *v16 - v14;
        if ((char)(*v16 - v14) == v17)
        {
          *v16 = v17;
          v15(&v18, 0);

          return;
        }
        __break(1u);
      }
      __break(1u);
    }
  }
}

void closure #2 in closure #3 in closure #1 in closure #1 in CAFUIBalanceFadeView.body.getter(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  unsigned int v4;
  id v5;
  __int16 v6;
  char v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  unsigned int v14;
  void (*v15)(uint64_t *, _QWORD);
  char *v16;
  unsigned int v17;
  uint64_t v18;

  v2 = a2;
  v3 = (void *)CAFSoundDistributionObservable.observed.getter();

  v4 = objc_msgSend(v3, sel_hasFade);
  if (v4)
  {
    v5 = v2;
    v6 = dispatch thunk of CAFSoundDistributionObservable.fade.getter();

    v7 = (v6 & 0x100) != 0 ? 0 : v6;
    v8 = v5;
    v9 = (void *)CAFSoundDistributionObservable.observed.getter();

    v10 = objc_msgSend(v9, sel_fadeRange);
    LODWORD(v9) = objc_msgSend(v10, sel_maximumValue);

    if ((int)v9 > v7)
    {
      v11 = v8;
      v12 = (void *)CAFSoundDistributionObservable.observed.getter();
      v13 = objc_msgSend(v12, sel_fadeRange);

      v14 = objc_msgSend(v13, sel_stepValue);
      v15 = (void (*)(uint64_t *, _QWORD))dispatch thunk of CAFSoundDistributionObservable.fade.modify();
      if ((v16[1] & 1) == 0)
      {
        v17 = *v16 + v14;
        if ((char)(*v16 + v14) == v17)
        {
          *v16 = v17;
          v15(&v18, 0);

          return;
        }
        __break(1u);
      }
      __break(1u);
    }
  }
}

uint64_t protocol witness for View.body.getter in conformance CAFUIBalanceFadeView@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ZStack<TupleView<(ZStack<GeometryReader<ModifiedContent<<<opaque return type of View.simultaneousGesture<A>(_:including:)>>.0, AccessibilityAttachmentModifier>>>, TupleView<(HStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>, VStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>)>?)>>);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (uint64_t *)((char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(_QWORD *)v1;
  v7 = *(void **)(v1 + 8);
  v8 = *(_BYTE *)(v1 + 16);
  v9 = static HorizontalAlignment.center.getter();
  *v5 = static Alignment.center.getter();
  v5[1] = v10;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_ZStackLayout, TupleView<(ZStack<GeometryReader<ModifiedContent<<<opaque return type of View.simultaneousGesture<A>(_:including:)>>.0, AccessibilityAttachmentModifier>>>, TupleView<(HStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>, VStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>)>?)>>);
  closure #1 in closure #1 in CAFUIBalanceFadeView.body.getter(v6, v7, v8, (uint64_t *)((char *)v5 + *(int *)(v11 + 44)));
  lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type ZStack<TupleView<(ZStack<GeometryReader<ModifiedContent<<<opaque return type of View.simultaneousGesture<A>(_:including:)>>.0, AccessibilityAttachmentModifier>>>, TupleView<(HStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>, VStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>)>?)>> and conformance ZStack<A>, &demangling cache variable for type metadata for ZStack<TupleView<(ZStack<GeometryReader<ModifiedContent<<<opaque return type of View.simultaneousGesture<A>(_:including:)>>.0, AccessibilityAttachmentModifier>>>, TupleView<(HStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>, VStack<TupleView<(ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>, Spacer, ModifiedContent<AudioSettingsButton, AccessibilityAttachmentModifier>)>>)>?)>>, MEMORY[0x24BDF4750]);
  v12 = AnyView.init<A>(_:)();
  v13 = static Edge.Set.bottom.getter();
  result = EdgeInsets.init(_all:)();
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 24) = v12;
  *(_QWORD *)(a1 + 32) = implicit closure #2 in implicit closure #1 in variable initialization expression of CAFUICabinView._cabinCoordinator;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = v13;
  *(_QWORD *)(a1 + 64) = v15;
  *(_QWORD *)(a1 + 72) = v16;
  *(_QWORD *)(a1 + 80) = v17;
  *(_QWORD *)(a1 + 88) = v18;
  *(_BYTE *)(a1 + 96) = 0;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for CAFUIBalanceFadeView(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  v3 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = v3;
  return a1;
}

void destroy for CAFUIBalanceFadeView(uint64_t a1)
{

}

uint64_t assignWithCopy for CAFUIBalanceFadeView(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  v6 = v4;

  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for CAFUIBalanceFadeView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(void **)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;

  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for CAFUIBalanceFadeView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 17))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CAFUIBalanceFadeView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CAFUIBalanceFadeView()
{
  return &type metadata for CAFUIBalanceFadeView;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<VStack<CAFUICabinView>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<VStack<CAFUICabinView>, _PaddingLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<VStack<CAFUICabinView>, _PaddingLayout> and conformance <> ModifiedContent<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<VStack<CAFUICabinView>, _PaddingLayout>);
    v2[0] = lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type VStack<CAFUICabinView> and conformance VStack<A>, &demangling cache variable for type metadata for VStack<CAFUICabinView>, MEMORY[0x24BDF4700]);
    v2[1] = MEMORY[0x24BDECC60];
    result = MEMORY[0x23B813BE0](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<VStack<CAFUICabinView>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AudioSettingsButton(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = type metadata accessor for ColorScheme();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v4, a2, v7);
    }
    else
    {
      *v4 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v9 = a3[5];
    v10 = a3[6];
    v11 = (uint64_t *)((char *)v4 + v9);
    v12 = (uint64_t *)((char *)a2 + v9);
    v13 = v12[1];
    *v11 = *v12;
    v11[1] = v13;
    v14 = (uint64_t *)((char *)v4 + v10);
    v15 = (uint64_t *)((char *)a2 + v10);
    v16 = v15[1];
    *v14 = *v15;
    v14[1] = v16;
    *(uint64_t *)((char *)v4 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    swift_bridgeObjectRetain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for AudioSettingsButton(uint64_t a1)
{
  uint64_t v2;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v2 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  }
  else
  {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

_QWORD *initializeWithCopy for AudioSettingsButton(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = type metadata accessor for ColorScheme();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v7 = a3[5];
  v8 = a3[6];
  v9 = (_QWORD *)((char *)a1 + v7);
  v10 = (_QWORD *)((char *)a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = (_QWORD *)((char *)a1 + v8);
  v13 = (_QWORD *)((char *)a2 + v8);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for AudioSettingsButton(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;

  if (a1 != a2)
  {
    outlined destroy of UIContentConfiguration?((uint64_t)a1, &demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for ColorScheme();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  v7 = a3[5];
  v8 = (_QWORD *)((char *)a1 + v7);
  v9 = (_QWORD *)((char *)a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = a3[6];
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  v13 = v12[1];
  *v11 = *v12;
  v11[1] = v13;
  swift_retain();
  swift_release();
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_retain();
  swift_release();
  return a1;
}

char *initializeWithTake for AudioSettingsButton(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = type metadata accessor for ColorScheme();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[6];
  *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
  *(_OWORD *)&a1[v8] = *(_OWORD *)&a2[v8];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  return a1;
}

char *assignWithTake for AudioSettingsButton(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 != a2)
  {
    outlined destroy of UIContentConfiguration?((uint64_t)a1, &demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = type metadata accessor for ColorScheme();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v12 = *(_QWORD *)v10;
  v11 = *((_QWORD *)v10 + 1);
  *(_QWORD *)v9 = v12;
  *((_QWORD *)v9 + 1) = v11;
  swift_bridgeObjectRelease();
  *(_OWORD *)&a1[a3[6]] = *(_OWORD *)&a2[a3[6]];
  swift_release();
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AudioSettingsButton()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23754550C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for AudioSettingsButton()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23754559C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for AudioSettingsButton()
{
  uint64_t result;

  result = type metadata singleton initialization cache for AudioSettingsButton;
  if (!type metadata singleton initialization cache for AudioSettingsButton)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for AudioSettingsButton()
{
  unint64_t v0;

  type metadata accessor for Environment<ColorScheme>.Content();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

ValueMetadata *type metadata accessor for AudioSettingsCrosshairView()
{
  return &type metadata for AudioSettingsCrosshairView;
}

uint64_t associated type witness table accessor for View.Body : View in AudioSettingsCrosshairView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t AudioSettingsButton.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v20 = a1;
  v21 = type metadata accessor for ButtonRepeatBehavior();
  v19 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for PlainButtonStyle();
  v17 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _ClipEffect<Circle>>>);
  v16 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.buttonStyle<A>(_:)>>.0);
  v18 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AudioSettingsButton();
  v22 = v1;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _ClipEffect<Circle>>);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _ClipEffect<Circle>> and conformance <> ModifiedContent<A, B>();
  Button.init(action:label:)();
  PlainButtonStyle.init()();
  v13 = lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _ClipEffect<Circle>>> and conformance Button<A>, &demangling cache variable for type metadata for Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _ClipEffect<Circle>>>, MEMORY[0x24BDF43B0]);
  v14 = lazy protocol witness table accessor for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey(&lazy protocol witness table cache variable for type PlainButtonStyle and conformance PlainButtonStyle, (uint64_t (*)(uint64_t))MEMORY[0x24BDED868], MEMORY[0x24BDED858]);
  View.buttonStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v9, v7);
  static ButtonRepeatBehavior.enabled.getter();
  v23 = v7;
  v24 = v4;
  v25 = v13;
  v26 = v14;
  swift_getOpaqueTypeConformance2();
  View.buttonRepeatBehavior(_:)();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v3, v21);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v12, v10);
}

uint64_t closure #1 in AudioSettingsButton.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  __n128 v20;
  __n128 v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t KeyPath;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 v38;
  uint64_t v39;
  unsigned __int8 v40;
  uint64_t v41;
  uint64_t v42;

  v4 = type metadata accessor for Color.RGBColorSpace();
  v35 = *(_QWORD *)(v4 - 8);
  v36 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ColorScheme();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v27 - v12;
  v14 = type metadata accessor for AudioSettingsButton();
  swift_bridgeObjectRetain();
  v34 = Image.init(systemName:)();
  v15 = *(_QWORD *)(a1 + *(int *)(v14 + 28));
  KeyPath = swift_getKeyPath();
  swift_retain();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  v32 = v37;
  v31 = v38;
  v30 = v39;
  v29 = v40;
  v27 = v42;
  v28 = v41;
  v16 = objc_msgSend((id)objc_opt_self(), sel__carSystemFocusColor);
  v17 = MEMORY[0x23B812D58](v16);
  v18 = swift_getKeyPath();
  specialized Environment.wrappedValue.getter((uint64_t)v13);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v11, *MEMORY[0x24BDEB3F0], v7);
  LOBYTE(a1) = static ColorScheme.== infix(_:_:)();
  v19 = *(void (**)(char *, uint64_t))(v8 + 8);
  v19(v11, v7);
  v19(v13, v7);
  (*(void (**)(char *, _QWORD, uint64_t))(v35 + 104))(v6, *MEMORY[0x24BDF3C28], v36);
  if ((a1 & 1) != 0)
  {
    v20.n128_u64[0] = 0x3FD4141414141414;
    v21.n128_u64[0] = 0x3FD6D6D6D6D6D6D7;
  }
  else
  {
    v20.n128_u64[0] = 0x3FE8B8B8B8B8B8B9;
    v21.n128_u64[0] = 0x3FE9191919191919;
  }
  v22 = MEMORY[0x23B812D4C](v6, v20, v20.n128_f64[0], v21, 1.0);
  result = static Edge.Set.all.getter();
  v24 = KeyPath;
  *(_QWORD *)a2 = v34;
  *(_QWORD *)(a2 + 8) = v24;
  v25 = v32;
  *(_QWORD *)(a2 + 16) = v15;
  *(_QWORD *)(a2 + 24) = v25;
  *(_BYTE *)(a2 + 32) = v31;
  *(_QWORD *)(a2 + 40) = v30;
  *(_BYTE *)(a2 + 48) = v29;
  v26 = v27;
  *(_QWORD *)(a2 + 56) = v28;
  *(_QWORD *)(a2 + 64) = v26;
  *(_QWORD *)(a2 + 72) = v18;
  *(_QWORD *)(a2 + 80) = v17;
  *(_QWORD *)(a2 + 88) = v22;
  *(_BYTE *)(a2 + 96) = result;
  *(_WORD *)(a2 + 97) = 256;
  return result;
}

uint64_t closure #1 in AudioSettingsCrosshairView.body.getter@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = objc_msgSend((id)objc_opt_self(), sel__carSystemFocusColor);
  v7 = MEMORY[0x23B812D58](v6);
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  v8 = static Alignment.center.getter();
  v10 = v9;
  v11 = static Color.white.getter();
  KeyPath = swift_getKeyPath();
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0x4028000000000000;
  *(_QWORD *)(a1 + 32) = v14;
  *(_QWORD *)(a1 + 40) = v15;
  *(_QWORD *)(a1 + 48) = v16;
  *(_QWORD *)(a1 + 56) = v17;
  *(_QWORD *)(a1 + 64) = v18;
  *(_QWORD *)(a1 + 72) = v7;
  *(_WORD *)(a1 + 80) = 256;
  *(_QWORD *)(a1 + 88) = v8;
  *(_QWORD *)(a1 + 96) = v10;
  *(double *)(a1 + 104) = a2;
  *(double *)(a1 + 112) = a3;
  *(_BYTE *)(a1 + 120) = 1;
  *(_QWORD *)(a1 + 128) = 0x4028000000000000;
  *(_QWORD *)(a1 + 136) = KeyPath;
  *(_QWORD *)(a1 + 144) = v11;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for View.body.getter in conformance AudioSettingsCrosshairView@<X0>(uint64_t a1@<X8>)
{
  double *v1;
  double v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD v18[9];
  uint64_t v19;

  v3 = *v1;
  v4 = v1[1];
  v5 = static Alignment.center.getter();
  v7 = v6;
  closure #1 in AudioSettingsCrosshairView.body.getter((uint64_t)v18, v3, v4);
  v8 = static Edge.Set.all.getter();
  result = EdgeInsets.init(_all:)();
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v7;
  v10 = v18[7];
  *(_OWORD *)(a1 + 112) = v18[6];
  *(_OWORD *)(a1 + 128) = v10;
  *(_OWORD *)(a1 + 144) = v18[8];
  *(_QWORD *)(a1 + 160) = v19;
  v11 = v18[3];
  *(_OWORD *)(a1 + 48) = v18[2];
  *(_OWORD *)(a1 + 64) = v11;
  v12 = v18[5];
  *(_OWORD *)(a1 + 80) = v18[4];
  *(_OWORD *)(a1 + 96) = v12;
  v13 = v18[1];
  *(_OWORD *)(a1 + 16) = v18[0];
  *(_OWORD *)(a1 + 32) = v13;
  *(_BYTE *)(a1 + 168) = v8;
  *(_QWORD *)(a1 + 176) = v14;
  *(_QWORD *)(a1 + 184) = v15;
  *(_QWORD *)(a1 + 192) = v16;
  *(_QWORD *)(a1 + 200) = v17;
  *(_BYTE *)(a1 + 208) = 0;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in AudioSettingsButton()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t partial apply for closure #1 in AudioSettingsButton.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in AudioSettingsButton.body.getter(*(_QWORD *)(v1 + 16), a1);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _ClipEffect<Circle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _ClipEffect<Circle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _ClipEffect<Circle>> and conformance <> ModifiedContent<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _ClipEffect<Circle>>);
    v2[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>();
    v2[1] = lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type _ClipEffect<Circle> and conformance _ClipEffect<A>, &demangling cache variable for type metadata for _ClipEffect<Circle>, MEMORY[0x24BDEB950]);
    result = MEMORY[0x23B813BE0](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _ClipEffect<Circle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>);
    v2[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>();
    v2[1] = lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type _BackgroundStyleModifier<Color> and conformance _BackgroundStyleModifier<A>, &demangling cache variable for type metadata for _BackgroundStyleModifier<Color>, MEMORY[0x24BDF06D0]);
    result = MEMORY[0x23B813BE0](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Color?>>);
    v2[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout> and conformance <> ModifiedContent<A, B>();
    v2[1] = lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, MEMORY[0x24BDF1028]);
    result = MEMORY[0x23B813BE0](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>);
    v2[0] = lazy protocol witness table accessor for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>();
    v2[1] = MEMORY[0x24BDEBEE0];
    result = MEMORY[0x23B813BE0](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>);
    v2 = lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, MEMORY[0x24BDF1028]);
    v3[0] = MEMORY[0x24BDF40E8];
    v3[1] = v2;
    result = MEMORY[0x23B813BE0](MEMORY[0x24BDED308], v1, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t specialized Environment.wrappedValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  os_log_type_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[3];
  uint64_t v20;

  v2 = v1;
  v4 = type metadata accessor for EnvironmentValues();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of UIListContentConfiguration?(v2, (uint64_t)v10, &demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v11 = type metadata accessor for ColorScheme();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, v10, v11);
  }
  else
  {
    v13 = static os_log_type_t.fault.getter();
    v14 = static Log.runtimeIssuesLog.getter();
    v15 = v13;
    if (os_log_type_enabled(v14, v13))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      v17 = swift_slowAlloc();
      v19[1] = a1;
      v18 = v17;
      v20 = v17;
      *(_DWORD *)v16 = 136315138;
      v19[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x686353726F6C6F43, 0xEB00000000656D65, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_237505000, v14, v15, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B813C70](v18, -1, -1);
      MEMORY[0x23B813C70](v16, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t key path getter for EnvironmentValues.colorScheme : EnvironmentValues()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t key path setter for EnvironmentValues.colorScheme : EnvironmentValues(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = type metadata accessor for ColorScheme();
  MEMORY[0x24BDAC7A8](v2);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return EnvironmentValues.colorScheme.setter();
}

uint64_t key path getter for EnvironmentValues.font : EnvironmentValues, serialized@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_2375463BC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.font : EnvironmentValues, serialized()
{
  swift_retain();
  return EnvironmentValues.font.setter();
}

uint64_t sub_23754640C()
{
  swift_retain();
  return EnvironmentValues.font.setter();
}

uint64_t sub_23754643C()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #1 in CAFUIBalanceFadeView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in closure #1 in closure #1 in closure #1 in CAFUIBalanceFadeView.body.getter(*(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(unsigned __int8 *)(v1 + 32), a1);
}

void partial apply for closure #1 in closure #3 in closure #1 in closure #1 in CAFUIBalanceFadeView.body.getter()
{
  uint64_t v0;

  closure #1 in closure #3 in closure #1 in closure #1 in CAFUIBalanceFadeView.body.getter(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_237546478()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t outlined destroy of AudioSettingsButton(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AudioSettingsButton();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void partial apply for closure #2 in closure #3 in closure #1 in closure #1 in CAFUIBalanceFadeView.body.getter()
{
  uint64_t v0;

  closure #2 in closure #3 in closure #1 in closure #1 in CAFUIBalanceFadeView.body.getter(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

void partial apply for closure #1 in closure #2 in closure #1 in closure #1 in CAFUIBalanceFadeView.body.getter()
{
  uint64_t v0;

  closure #1 in closure #2 in closure #1 in closure #1 in CAFUIBalanceFadeView.body.getter(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

void partial apply for closure #2 in closure #2 in closure #1 in closure #1 in CAFUIBalanceFadeView.body.getter()
{
  uint64_t v0;

  closure #2 in closure #2 in closure #1 in closure #1 in CAFUIBalanceFadeView.body.getter(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_2375464FC()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in closure #1 in closure #1 in closure #1 in CAFUIBalanceFadeView.body.getter(uint64_t a1)
{
  uint64_t v1;

  closure #1 in closure #1 in closure #1 in closure #1 in closure #1 in CAFUIBalanceFadeView.body.getter(*(double *)(v1 + 40), *(double *)(v1 + 48), *(double *)(v1 + 56), *(double *)(v1 + 64), a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24));
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<AudioSettingsCrosshairView, _ContentShapeModifier<Rectangle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<AudioSettingsCrosshairView, _ContentShapeModifier<Rectangle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<AudioSettingsCrosshairView, _ContentShapeModifier<Rectangle>> and conformance <> ModifiedContent<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<AudioSettingsCrosshairView, _ContentShapeModifier<Rectangle>>);
    v2[0] = lazy protocol witness table accessor for type AudioSettingsCrosshairView and conformance AudioSettingsCrosshairView();
    v2[1] = lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type _ContentShapeModifier<Rectangle> and conformance _ContentShapeModifier<A>, &demangling cache variable for type metadata for _ContentShapeModifier<Rectangle>, MEMORY[0x24BDEFAD8]);
    result = MEMORY[0x23B813BE0](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<AudioSettingsCrosshairView, _ContentShapeModifier<Rectangle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AudioSettingsCrosshairView and conformance AudioSettingsCrosshairView()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AudioSettingsCrosshairView and conformance AudioSettingsCrosshairView;
  if (!lazy protocol witness table cache variable for type AudioSettingsCrosshairView and conformance AudioSettingsCrosshairView)
  {
    result = MEMORY[0x23B813BE0](&protocol conformance descriptor for AudioSettingsCrosshairView, &type metadata for AudioSettingsCrosshairView);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioSettingsCrosshairView and conformance AudioSettingsCrosshairView);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CAFUIBalanceFadeCrosshair(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for CAFUIBalanceFadeCrosshair(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for CAFUIBalanceFadeCrosshair()
{
  return &type metadata for CAFUIBalanceFadeCrosshair;
}

uint64_t sub_2375466B8()
{
  uint64_t (*v0)(uint64_t);

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for <<opaque return type of View.buttonStyle<A>(_:)>>.0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _ClipEffect<Circle>>>);
  type metadata accessor for PlainButtonStyle();
  v0 = (uint64_t (*)(uint64_t))MEMORY[0x24BDED868];
  lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _ClipEffect<Circle>>> and conformance Button<A>, &demangling cache variable for type metadata for Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _ClipEffect<Circle>>>, MEMORY[0x24BDF43B0]);
  lazy protocol witness table accessor for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey(&lazy protocol witness table cache variable for type PlainButtonStyle and conformance PlainButtonStyle, v0, MEMORY[0x24BDED858]);
  swift_getOpaqueTypeConformance2();
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ZStack<TupleView<(StrokeShapeView<CAFUIBalanceFadeCrosshair, Color, EmptyView>, ModifiedContent<CAFUIBalanceFadeCrosshair, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ZStack<TupleView<(StrokeShapeView<CAFUIBalanceFadeCrosshair, Color, EmptyView>, ModifiedContent<CAFUIBalanceFadeCrosshair, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ZStack<TupleView<(StrokeShapeView<CAFUIBalanceFadeCrosshair, Color, EmptyView>, ModifiedContent<CAFUIBalanceFadeCrosshair, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ZStack<TupleView<(StrokeShapeView<CAFUIBalanceFadeCrosshair, Color, EmptyView>, ModifiedContent<CAFUIBalanceFadeCrosshair, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>);
    v2[0] = lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type ZStack<TupleView<(StrokeShapeView<CAFUIBalanceFadeCrosshair, Color, EmptyView>, ModifiedContent<CAFUIBalanceFadeCrosshair, _EnvironmentKeyWritingModifier<Color?>>)>> and conformance ZStack<A>, &demangling cache variable for type metadata for ZStack<TupleView<(StrokeShapeView<CAFUIBalanceFadeCrosshair, Color, EmptyView>, ModifiedContent<CAFUIBalanceFadeCrosshair, _EnvironmentKeyWritingModifier<Color?>>)>>, MEMORY[0x24BDF4750]);
    v2[1] = MEMORY[0x24BDECC60];
    result = MEMORY[0x23B813BE0](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ZStack<TupleView<(StrokeShapeView<CAFUIBalanceFadeCrosshair, Color, EmptyView>, ModifiedContent<CAFUIBalanceFadeCrosshair, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in CAFUIBalanceFadeCrosshair()
{
  return lazy protocol witness table accessor for type AnyPublisher<Int8, Never> and conformance AnyPublisher<A, B>(&lazy protocol witness table cache variable for type _ShapeView<CAFUIBalanceFadeCrosshair, ForegroundStyle> and conformance _ShapeView<A, B>, &demangling cache variable for type metadata for _ShapeView<CAFUIBalanceFadeCrosshair, ForegroundStyle>, MEMORY[0x24BDEB358]);
}

unint64_t lazy protocol witness table accessor for type EmptyAnimatableData and conformance EmptyAnimatableData()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EmptyAnimatableData and conformance EmptyAnimatableData;
  if (!lazy protocol witness table cache variable for type EmptyAnimatableData and conformance EmptyAnimatableData)
  {
    result = MEMORY[0x23B813BE0](MEMORY[0x24BDEEF18], MEMORY[0x24BDEEF38]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmptyAnimatableData and conformance EmptyAnimatableData);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CAFUIBalanceFadeCrosshair and conformance CAFUIBalanceFadeCrosshair()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CAFUIBalanceFadeCrosshair and conformance CAFUIBalanceFadeCrosshair;
  if (!lazy protocol witness table cache variable for type CAFUIBalanceFadeCrosshair and conformance CAFUIBalanceFadeCrosshair)
  {
    result = MEMORY[0x23B813BE0](&protocol conformance descriptor for CAFUIBalanceFadeCrosshair, &type metadata for CAFUIBalanceFadeCrosshair);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFUIBalanceFadeCrosshair and conformance CAFUIBalanceFadeCrosshair);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CAFUIBalanceFadeCrosshair and conformance CAFUIBalanceFadeCrosshair;
  if (!lazy protocol witness table cache variable for type CAFUIBalanceFadeCrosshair and conformance CAFUIBalanceFadeCrosshair)
  {
    result = MEMORY[0x23B813BE0](&protocol conformance descriptor for CAFUIBalanceFadeCrosshair, &type metadata for CAFUIBalanceFadeCrosshair);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFUIBalanceFadeCrosshair and conformance CAFUIBalanceFadeCrosshair);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CAFUIBalanceFadeCrosshair and conformance CAFUIBalanceFadeCrosshair;
  if (!lazy protocol witness table cache variable for type CAFUIBalanceFadeCrosshair and conformance CAFUIBalanceFadeCrosshair)
  {
    result = MEMORY[0x23B813BE0](&protocol conformance descriptor for CAFUIBalanceFadeCrosshair, &type metadata for CAFUIBalanceFadeCrosshair);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFUIBalanceFadeCrosshair and conformance CAFUIBalanceFadeCrosshair);
  }
  return result;
}

uint64_t outlined release of Path(uint64_t a1)
{
  outlined consume of Path.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  return a1;
}

uint64_t outlined consume of Path.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t result;

  if (a5 - 2 <= 3)
    return swift_release();
  return result;
}

id CAFUILoadingViewController.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id CAFUILoadingViewController.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFUILoadingViewController();
  return objc_msgSendSuper2(&v2, sel_initWithNibName_bundle_, 0, 0);
}

uint64_t type metadata accessor for CAFUILoadingViewController()
{
  return objc_opt_self();
}

Swift::Void __swiftcall CAFUILoadingViewController.viewDidLoad()()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  Class isa;
  objc_super v20;

  v20.receiver = v0;
  v20.super_class = (Class)type metadata accessor for CAFUILoadingViewController();
  objc_msgSendSuper2(&v20, sel_viewDidLoad);
  v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD398]), sel_initWithActivityIndicatorStyle_, 21);
  v2 = objc_msgSend((id)objc_opt_self(), sel_labelColor);
  objc_msgSend(v1, sel_setColor_, v2);

  objc_msgSend(v1, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  v3 = objc_msgSend(v0, sel_view);
  if (!v3)
  {
    __break(1u);
    goto LABEL_6;
  }
  v4 = v3;
  objc_msgSend(v3, sel_addSubview_, v1);

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2375790C0;
  v6 = objc_msgSend(v1, sel_centerXAnchor);
  v7 = objc_msgSend(v0, sel_view);
  if (!v7)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v8 = v7;
  v9 = objc_msgSend(v7, sel_safeAreaLayoutGuide);

  v10 = objc_msgSend(v9, sel_centerXAnchor);
  v11 = objc_msgSend(v6, sel_constraintEqualToAnchor_, v10);

  *(_QWORD *)(v5 + 32) = v11;
  v12 = objc_msgSend(v1, sel_centerYAnchor);
  v13 = objc_msgSend(v0, sel_view);
  if (v13)
  {
    v14 = v13;
    v15 = (void *)objc_opt_self();
    v16 = objc_msgSend(v14, sel_safeAreaLayoutGuide);

    v17 = objc_msgSend(v16, sel_centerYAnchor);
    v18 = objc_msgSend(v12, sel_constraintEqualToAnchor_, v17);

    *(_QWORD *)(v5 + 40) = v18;
    specialized Array._endMutation()();
    type metadata accessor for NSLayoutConstraint();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v15, sel_activateConstraints_, isa);

    objc_msgSend(v1, sel_startAnimating);
    return;
  }
LABEL_7:
  __break(1u);
}

id CAFUILoadingViewController.__allocating_init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v3;
  objc_class *v4;
  void *v6;
  id v7;

  v4 = v3;
  if (a2)
  {
    v6 = (void *)MEMORY[0x23B812F68]();
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = 0;
  }
  v7 = objc_msgSend(objc_allocWithZone(v4), sel_initWithNibName_bundle_, v6, a3);

  return v7;
}

void CAFUILoadingViewController.init(nibName:bundle:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id CAFUILoadingViewController.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFUILoadingViewController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFUIAlertButton.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id CAFUIAlertButton.init()()
{
  void *v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  objc_super v8;

  v8.receiver = v0;
  v8.super_class = (Class)type metadata accessor for CAFUIAlertButton();
  v1 = objc_msgSendSuper2(&v8, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v2 = (void *)objc_opt_self();
  v3 = v1;
  v4 = objc_msgSend(v2, sel_tintColor);
  objc_msgSend(v3, sel_setTitleColor_forState_, v4, 0);

  v5 = v3;
  v6 = objc_msgSend(v2, sel__carSystemQuaternaryColor);
  objc_msgSend(v5, sel_setBackgroundColor_, v6);

  return v5;
}

uint64_t type metadata accessor for CAFUIAlertButton()
{
  return objc_opt_self();
}

Swift::Void __swiftcall CAFUIAlertButton.didUpdateFocus(in:with:)(UIFocusUpdateContext in, UIFocusAnimationCoordinator with)
{
  void *v2;
  void *v3;
  id v6;
  void *v7;
  char v8;
  char **v9;
  char **v10;
  id v11;
  id v12;
  objc_super v13;

  v3 = v2;
  v13.receiver = v3;
  v13.super_class = (Class)type metadata accessor for CAFUIAlertButton();
  objc_msgSendSuper2(&v13, sel_didUpdateFocusInContext_withAnimationCoordinator_, in.super.isa, with.super.isa);
  v6 = -[objc_class nextFocusedView](in.super.isa, sel_nextFocusedView);
  if (v6
    && (v7 = v6,
        type metadata accessor for NSObject(),
        v8 = static NSObject.== infix(_:_:)(),
        v7,
        (v8 & 1) != 0))
  {
    v9 = &selRef__carSystemFocusColor;
    v10 = &selRef__carSystemFocusLabelColor;
  }
  else
  {
    v9 = &selRef__carSystemQuaternaryColor;
    v10 = &selRef_tintColor;
  }
  v11 = objc_msgSend((id)objc_opt_self(), *v10);
  objc_msgSend(v3, sel_setTitleColor_forState_, v11, 0);

  v12 = objc_msgSend((id)objc_opt_self(), *v9);
  objc_msgSend(v3, sel_setBackgroundColor_, v12);

}

unint64_t type metadata accessor for NSObject()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSObject;
  if (!lazy cache variable for type metadata for NSObject)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  }
  return result;
}

id CAFUIAlertButton.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  objc_class *v4;

  return objc_msgSend(objc_allocWithZone(v4), sel_initWithFrame_, a1, a2, a3, a4);
}

void CAFUIAlertButton.init(frame:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id CAFUIAlertButton.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFUIAlertButton();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t destroy for CAFUISoundView(uint64_t a1)
{

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CAFUISoundView(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CAFUISoundView(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  v6 = v4;

  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for CAFUISoundView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(void **)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;

  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CAFUISoundView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CAFUISoundView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CAFUISoundView()
{
  return &type metadata for CAFUISoundView;
}

uint64_t associated type witness table accessor for View.Body : View in CAFUISoundView()
{
  return swift_getOpaqueTypeConformance2();
}

void closure #1 in CAFUISoundView.body.getter(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  char v5;
  id v6;
  __int128 v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *((_QWORD *)a1 + 3);
  v9 = *((_QWORD *)a1 + 4);
  v3 = v9;
  v10 = v2;
  v7 = *a1;
  v8 = *((_BYTE *)a1 + 16);
  v4 = v7;
  v5 = v8 & 1;
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 1;
  *(_QWORD *)(a2 + 16) = v2;
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_OWORD *)(a2 + 48) = v4;
  *(_BYTE *)(a2 + 64) = v5;
  *(_QWORD *)(a2 + 72) = 0;
  *(_BYTE *)(a2 + 80) = 1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = *((id *)&v4 + 1);
  outlined retain of [CAFSettingsSection]((uint64_t)&v10);
  outlined retain of [CAFSettingsSection]((uint64_t)&v9);
  outlined retain of CAFUIBalanceFadeView((uint64_t)&v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

__n128 protocol witness for View.body.getter in conformance CAFUISoundView@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  __n128 result;
  uint64_t v15;
  char v16;
  __n128 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  __int128 v25[2];
  uint64_t v26;

  v3 = *(_OWORD *)(v1 + 16);
  v25[0] = *(_OWORD *)v1;
  v25[1] = v3;
  v26 = *(_QWORD *)(v1 + 32);
  v4 = static VerticalAlignment.center.getter();
  closure #1 in CAFUISoundView.body.getter(v25, (uint64_t)&v15);
  v5 = v15;
  v6 = v16;
  v7 = v18;
  v8 = v19;
  v9 = v20;
  v10 = v21;
  v11 = v22;
  v12 = v23;
  v13 = v24;
  result = v17;
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = v6;
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a1 + 56) = v7;
  *(_BYTE *)(a1 + 64) = v8;
  *(_QWORD *)(a1 + 72) = v9;
  *(_QWORD *)(a1 + 80) = v10;
  *(_BYTE *)(a1 + 88) = v11;
  *(_QWORD *)(a1 + 96) = v12;
  *(_BYTE *)(a1 + 104) = v13;
  return result;
}

uint64_t outlined retain of CAFUIBalanceFadeView(uint64_t a1)
{
  id v2;

  v2 = *(id *)(a1 + 8);
  return a1;
}

unint64_t lazy protocol witness table accessor for type HStack<TupleView<(Spacer, CAFUIEqualizerGroup, Spacer, CAFUIBalanceFadeView, Spacer)>> and conformance HStack<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type HStack<TupleView<(Spacer, CAFUIEqualizerGroup, Spacer, CAFUIBalanceFadeView, Spacer)>> and conformance HStack<A>;
  if (!lazy protocol witness table cache variable for type HStack<TupleView<(Spacer, CAFUIEqualizerGroup, Spacer, CAFUIBalanceFadeView, Spacer)>> and conformance HStack<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for HStack<TupleView<(Spacer, CAFUIEqualizerGroup, Spacer, CAFUIBalanceFadeView, Spacer)>>);
    result = MEMORY[0x23B813BE0](MEMORY[0x24BDF4498], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HStack<TupleView<(Spacer, CAFUIEqualizerGroup, Spacer, CAFUIBalanceFadeView, Spacer)>> and conformance HStack<A>);
  }
  return result;
}

id CAFUIPunchthroughState.stateImage.getter(char a1)
{
  void *v1;
  id v2;
  id v3;
  id v4;
  id v5;

  if (!a1)
    return 0;
  v1 = (void *)MEMORY[0x23B812F68](0xD00000000000001ALL, 0x800000023757D430);
  v2 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_, v1);

  if (!v2)
    return 0;
  v3 = objc_msgSend((id)objc_opt_self(), sel_systemFontOfSize_, 16.0);
  v4 = objc_msgSend((id)objc_opt_self(), sel_configurationWithFont_scale_, v3, 3);

  v5 = objc_msgSend(v2, sel_imageWithConfiguration_, v4);
  return v5;
}

BOOL CAFUIPunchthroughState.enabled.getter(char a1)
{
  return a1 != 0;
}

void __swiftcall CAFUIPunchthroughState.buttonForCurrentState(title:)(UIButton_optional *__return_ptr retstr, Swift::String_optional title)
{
  unsigned __int8 v2;
  char v3;
  void *object;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;

  v3 = v2;
  object = title.value._object;
  v5 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIConfigurationTextAttributesTransformer?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UIButton.Configuration();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v23 - v14;
  if (v5)
  {
    v16 = (void *)MEMORY[0x23B812F68](0xD00000000000001ALL, 0x800000023757D430);
    v17 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_, v16);

    if (v17)
    {
      v18 = objc_msgSend((id)objc_opt_self(), sel_systemFontOfSize_, 16.0);
      v19 = objc_msgSend((id)objc_opt_self(), sel_configurationWithFont_scale_, v18, 3);
      v24 = object;
      v20 = v19;

      v21 = objc_msgSend(v17, sel_imageWithConfiguration_, v20);
      object = v24;

      if (v21)
        goto LABEL_5;
    }
  }
  if (object)
  {
LABEL_5:
    static UIButton.Configuration.plain()();
    swift_bridgeObjectRetain();
    UIButton.Configuration.title.setter();
    *(_BYTE *)(swift_allocObject() + 16) = v3;
    UIConfigurationTextAttributesTransformer.init(_:)();
    v22 = type metadata accessor for UIConfigurationTextAttributesTransformer();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v8, 0, 1, v22);
    UIButton.Configuration.titleTextAttributesTransformer.setter();
    CAFUIPunchthroughState.stateImage.getter(v3);
    UIButton.Configuration.image.setter();
    UIButton.Configuration.imagePadding.setter();
    UIButton.Configuration.imagePlacement.setter();
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIButton);
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v15, v9);
    UIButton.init(configuration:primaryAction:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
  }
}

uint64_t closure #1 in CAFUIPunchthroughState.buttonForCurrentState(title:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t KeyPath;

  v4 = type metadata accessor for AttributeContainer();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  KeyPath = swift_getKeyPath();
  swift_getKeyPath();
  objc_msgSend((id)objc_opt_self(), sel_systemFontOfSize_, 16.0, KeyPath);
  lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes.FontAttribute and conformance AttributeScopes.UIKitAttributes.FontAttribute();
  return AttributeContainer.subscript.setter();
}

uint64_t key path index equality operator for (KeyPath<AttributeScopes.UIKitAttributes, AttributeScopes.UIKitAttributes.FontAttribute>)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyPath<AttributeScopes.UIKitAttributes, AttributeScopes.UIKitAttributes.FontAttribute>);
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

BOOL static CAFUIPunchthroughState.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t sub_237547C00()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CAFUIPunchthroughState.buttonForCurrentState(title:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in CAFUIPunchthroughState.buttonForCurrentState(title:)(a1, a2);
}

void CAFUIPunchthroughState.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int CAFUIPunchthroughState.hashValue.getter(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

id CAFUIRequestContentManager.controller.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

uint64_t CAFUIRequestContentManager.supportsTouch.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t CAFUIRequestContentManager.__allocating_init(session:)(void *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  CAFUIRequestContentManager.init(session:)(a1);
  return v2;
}

void CAFUIRequestContentManager.init(session:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  id v5;
  id v6;
  id v7;
  unint64_t v8;
  id v9;
  void *v10;
  unsigned __int8 v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  Swift::String v20;
  os_log_type_t v21;

  v2 = v1;
  v4 = objc_msgSend(objc_allocWithZone((Class)CAFUIPunchThroughController), sel_initWithSession_, a1);
  *(_QWORD *)(v1 + 16) = v4;
  v5 = objc_msgSend(v4, sel_session);
  v6 = objc_msgSend(v5, sel_configuration);

  v7 = objc_msgSend(v6, sel_screens);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CARScreenInfo);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v8 >> 62)
  {
    swift_bridgeObjectRetain();
    v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v12)
      goto LABEL_3;
LABEL_8:
    swift_bridgeObjectRelease();
    *(_BYTE *)(v2 + 24) = 0;
    goto LABEL_9;
  }
  if (!*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_8;
LABEL_3:
  if ((v8 & 0xC000000000000001) != 0)
  {
    v9 = (id)MEMORY[0x23B813418](0, v8);
  }
  else
  {
    if (!*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    v9 = *(id *)(v8 + 32);
  }
  v10 = v9;
  swift_bridgeObjectRelease();
  v11 = objc_msgSend(v10, sel_availableInteractionModels);

  *(_BYTE *)(v2 + 24) = (v11 & 2) != 0;
LABEL_9:
  v13 = objc_msgSend(*(id *)(v2 + 16), sel_availablePunchThroughIdentifiers);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  v14 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  CAFUIRequestContentManager.mainDisplayIdentifier.getter();
  if (*(_QWORD *)(v14 + 16) && (v17 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16), (v18 & 1) != 0))
  {
    v19 = *(_QWORD *)(*(_QWORD *)(v14 + 56) + 8 * v17);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _StringGuts.grow(_:)(28);
    swift_bridgeObjectRelease();
    v20._countAndFlagsBits = MEMORY[0x23B813040](v19, MEMORY[0x24BEE0D00]);
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v21 = static os_log_type_t.info.getter();
    specialized static CAFUILogger.log(_:message:function:file:line:)(v21, 0xD00000000000001ALL, 0x800000023757D450, 0x7365732874696E69, 0xEE00293A6E6F6973);
    swift_bridgeObjectRelease();

  }
  else
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

id CAFUIRequestContentManager.isLimiting.getter()
{
  uint64_t v0;
  id v1;
  id v2;
  id v3;

  v1 = objc_msgSend(*(id *)(v0 + 16), sel_session);
  v2 = objc_msgSend(v1, sel_limitUserInterfaces);

  if (!v2)
    return 0;
  v3 = objc_msgSend(v2, sel_BOOLValue);

  return v3;
}

uint64_t CAFUIRequestContentManager.open(contentURLString:in:completion:)(uint64_t a1, void *a2, void *a3, uint64_t (*a4)(_QWORD), uint64_t a5)
{
  void *v5;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  Swift::String v19;
  char v21;
  uint64_t v22;
  Swift::String v23;
  uint64_t v24;
  unint64_t v25;
  os_log_type_t v26;
  NSURL *v27;
  void *v28;
  void *v29;
  void *v30;
  Swift::String v31;
  uint64_t v32;
  unint64_t v33;
  os_log_type_t v34;
  uint64_t v36;
  uint64_t v37;
  Swift::String v38;
  Swift::String v39;
  uint64_t v40;
  unint64_t v41;
  os_log_type_t v42;
  id v43[2];
  unint64_t aBlock;
  unint64_t v45;
  uint64_t (*v46)(uint64_t, uint64_t);
  void *v47;
  uint64_t (*v48)(_QWORD);
  uint64_t v49;

  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for URL();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.init(string:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    outlined destroy of UIContentConfiguration?((uint64_t)v13, &demangling cache variable for type metadata for URL?);
LABEL_11:
    aBlock = 0;
    v45 = 0xE000000000000000;
    _StringGuts.grow(_:)(27);
    swift_bridgeObjectRelease();
    aBlock = 0xD000000000000019;
    v45 = 0x800000023757D470;
    v31._countAndFlagsBits = a1;
    v31._object = a2;
    String.append(_:)(v31);
    v32 = aBlock;
    v33 = v45;
    v34 = static os_log_type_t.error.getter();
    specialized static CAFUILogger.log(_:message:function:file:line:)(v34, v32, v33, 0xD000000000000025, 0x800000023757D490);
    swift_bridgeObjectRelease();
    return a4(0);
  }
  v43[1] = v5;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v13, v14);
  URL.scheme.getter();
  if (!v18)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    goto LABEL_11;
  }
  v43[0] = a3;
  v19 = String.lowercased()();
  swift_bridgeObjectRelease();
  if (v19._countAndFlagsBits == 0x7274737475706E69 && v19._object == (void *)0xEB000000006D6165)
  {
    swift_bridgeObjectRelease();
    v22 = a5;
LABEL_13:
    v36 = specialized static CAFUIRequestContentManager.inputStreamIdentifier(from:)(a1, (uint64_t)a2);
    if (v37)
    {
      CAFUIRequestContentManager.present(identifier:completion:)(v36, v37, (uint64_t)a4, v22);
      swift_bridgeObjectRelease();
    }
    else
    {
      aBlock = 0;
      v45 = 0xE000000000000000;
      _StringGuts.grow(_:)(44);
      swift_bridgeObjectRelease();
      aBlock = 541872725;
      v45 = 0xE400000000000000;
      v38._countAndFlagsBits = a1;
      v38._object = a2;
      String.append(_:)(v38);
      v39._countAndFlagsBits = 0xD000000000000026;
      v39._object = (void *)0x800000023757D4E0;
      String.append(_:)(v39);
      v40 = aBlock;
      v41 = v45;
      v42 = static os_log_type_t.error.getter();
      specialized static CAFUILogger.log(_:message:function:file:line:)(v42, v40, v41, 0xD000000000000025, 0x800000023757D490);
      swift_bridgeObjectRelease();
      a4(0);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }
  v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  v22 = a5;
  if ((v21 & 1) != 0)
    goto LABEL_13;
  aBlock = 0;
  v45 = 0xE000000000000000;
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  aBlock = 0xD000000000000014;
  v45 = 0x800000023757D4C0;
  lazy protocol witness table accessor for type URL and conformance URL();
  v23._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24 = aBlock;
  v25 = v45;
  v26 = static os_log_type_t.error.getter();
  specialized static CAFUILogger.log(_:message:function:file:line:)(v26, v24, v25, 0xD000000000000025, 0x800000023757D490);
  swift_bridgeObjectRelease();
  URL._bridgeToObjectiveC()(v27);
  v29 = v28;
  v48 = a4;
  v49 = a5;
  aBlock = MEMORY[0x24BDAC760];
  v45 = 1107296256;
  v46 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  v47 = &block_descriptor_4;
  v30 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v43[0], sel_openURL_options_completionHandler_, v29, 0, v30);
  _Block_release(v30);

  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned Bool) -> ()(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);
  return swift_release();
}

void CAFUIRequestContentManager.present(identifier:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CAFUIRequestContentManager.present(identifier:completion:)(a1, a2, a3, a4, (uint64_t)&block_descriptor_3, (SEL *)&selRef_requestActivationOfPunchThroughWithIdentifier_displayIdentifier_completion_);
}

void CAFUIRequestContentManager.dismiss(identifier:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CAFUIRequestContentManager.present(identifier:completion:)(a1, a2, a3, a4, (uint64_t)&block_descriptor_6, (SEL *)&selRef_requestDismissalOfPunchThroughWithIdentifier_displayIdentifier_completion_);
}

void CAFUIRequestContentManager.present(identifier:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, SEL *a6)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  _QWORD v19[6];

  v11 = a2;
  v12 = a1;
  v13 = specialized static CAFUIRequestContentManager.inputStreamIdentifier(from:)(a1, a2);
  if (v14)
  {
    v12 = v13;
    v11 = v14;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  v15 = *(void **)(v6 + 16);
  v16 = (void *)MEMORY[0x23B812F68](v12, v11);
  swift_bridgeObjectRelease();
  CAFUIRequestContentManager.mainDisplayIdentifier.getter();
  v17 = (void *)MEMORY[0x23B812F68]();
  swift_bridgeObjectRelease();
  v19[4] = a3;
  v19[5] = a4;
  v19[0] = MEMORY[0x24BDAC760];
  v19[1] = 1107296256;
  v19[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  v19[3] = a5;
  v18 = _Block_copy(v19);
  swift_retain();
  swift_release();
  objc_msgSend(v15, *a6, v16, v17, v18);
  _Block_release(v18);

}

CAFUI::CAFUIPunchthroughState __swiftcall CAFUIRequestContentManager.state(for:)(Swift::String a1)
{
  uint64_t v1;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  unsigned int v10;
  void *v11;
  void *v12;
  unsigned int v13;
  Swift::String v15;
  os_log_type_t v16;
  uint64_t v17;
  unint64_t v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;

  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  v4 = specialized static CAFUIRequestContentManager.inputStreamIdentifier(from:)(a1._countAndFlagsBits, (uint64_t)a1._object);
  if (!v5)
  {
    _StringGuts.grow(_:)(38);
    swift_bridgeObjectRelease();
    v15._countAndFlagsBits = countAndFlagsBits;
    v15._object = object;
    String.append(_:)(v15);
    v16 = static os_log_type_t.info.getter();
    v17 = 0xD000000000000024;
    v18 = 0x800000023757D510;
LABEL_8:
    specialized static CAFUILogger.log(_:message:function:file:line:)(v16, v17, v18, 0x6F66286574617473, 0xEB00000000293A72);
    swift_bridgeObjectRelease();
    return 0;
  }
  v6 = v4;
  v7 = v5;
  v8 = *(void **)(v1 + 16);
  v9 = (void *)MEMORY[0x23B812F68]();
  v10 = objc_msgSend(v8, sel_hasPunchThroughWithIdentifier_, v9);

  if (!v10)
  {
    _StringGuts.grow(_:)(52);
    v19._object = (void *)0x800000023757D540;
    v19._countAndFlagsBits = 0xD000000000000013;
    String.append(_:)(v19);
    v20._countAndFlagsBits = v6;
    v20._object = v7;
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    v21._countAndFlagsBits = 0xD00000000000001DLL;
    v21._object = (void *)0x800000023757D560;
    String.append(_:)(v21);
    CAFUIRequestContentManager.mainDisplayIdentifier.getter();
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    v16 = static os_log_type_t.info.getter();
    v17 = 0;
    v18 = 0xE000000000000000;
    goto LABEL_8;
  }
  CAFUIRequestContentManager.mainDisplayIdentifier.getter();
  v11 = (void *)MEMORY[0x23B812F68]();
  swift_bridgeObjectRelease();
  v12 = (void *)MEMORY[0x23B812F68](v6, v7);
  swift_bridgeObjectRelease();
  v13 = objc_msgSend(v8, sel_displayIdentifier_isDisplayingPunchThroughWithIdentifier_, v11, v12);

  if (v13)
    return 2;
  else
    return 1;
}

void CAFUIRequestContentManager.mainDisplayIdentifier.getter()
{
  uint64_t v0;
  id v1;
  id v2;
  id v3;
  unint64_t v4;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;

  v1 = objc_msgSend(*(id *)(v0 + 16), sel_session);
  v2 = objc_msgSend(v1, sel_configuration);

  v3 = objc_msgSend(v2, sel_displays);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CARDisplayInfo);
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v4 >> 62))
  {
    if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_3;
LABEL_8:
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  v8 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v8)
    goto LABEL_8;
LABEL_3:
  if ((v4 & 0xC000000000000001) != 0)
  {
LABEL_9:
    v5 = (id)MEMORY[0x23B813418](0, v4);
    goto LABEL_6;
  }
  if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v5 = *(id *)(v4 + 32);
LABEL_6:
    v6 = v5;
    swift_bridgeObjectRelease();
    v7 = objc_msgSend(v6, sel_identifier);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    return;
  }
  __break(1u);
}

uint64_t CAFUIRequestContentManager.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t CAFUIRequestContentManager.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t specialized static CAFUIRequestContentManager.inputStreamIdentifier(from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(char *, unint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  Swift::String v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  void (*v52)(char *, unint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v55 = a1;
  v56 = a2;
  v2 = type metadata accessor for URLQueryItem();
  v53 = *(_QWORD *)(v2 - 8);
  v54 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URLQueryItem?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URLComponents?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (void (*)(char *, unint64_t, uint64_t))((char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = type metadata accessor for URLComponents();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for URL();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v45 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.init(string:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
  {
    outlined destroy of UIContentConfiguration?((uint64_t)v17, &demangling cache variable for type metadata for URL?);
    return 0;
  }
  v51 = v14;
  v52 = v10;
  v49 = v4;
  v50 = v7;
  v55 = v12;
  v56 = v11;
  v22 = v54;
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v21, v17, v18);
  URL.scheme.getter();
  v23 = v21;
  if (!v24)
    goto LABEL_10;
  v25 = String.lowercased()();
  swift_bridgeObjectRelease();
  if (v25._countAndFlagsBits == 0x7274737475706E69 && v25._object == (void *)0xEB000000006D6165)
  {
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v26 & 1) == 0)
  {
LABEL_10:
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
    return 0;
  }
LABEL_8:
  v27 = (uint64_t)v52;
  URLComponents.init(url:resolvingAgainstBaseURL:)();
  v29 = v55;
  v28 = v56;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v27, 1, v56) == 1)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v23, v18);
    outlined destroy of UIContentConfiguration?(v27, &demangling cache variable for type metadata for URLComponents?);
    return 0;
  }
  v47 = v19;
  v31 = v51;
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 32))(v51, v27, v28);
  v32 = URLComponents.queryItems.getter();
  if (!v32)
  {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v31, v28);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v23, v18);
    return 0;
  }
  v33 = *(_QWORD *)(v32 + 16);
  v46 = v23;
  if (v33)
  {
    v34 = v53;
    v35 = v32 + ((*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80));
    v48 = *(_QWORD *)(v53 + 72);
    v52 = *(void (**)(char *, unint64_t, uint64_t))(v53 + 16);
    v45 = v32;
    swift_bridgeObjectRetain();
    v36 = v22;
    v37 = v49;
    while (1)
    {
      v52(v37, v35, v36);
      if (URLQueryItem.name.getter() == 0x696669746E656469 && v38 == 0xEA00000000007265)
        break;
      v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v39 & 1) != 0)
        goto LABEL_24;
      (*(void (**)(char *, uint64_t))(v34 + 8))(v37, v36);
      v35 += v48;
      if (!--v33)
      {
        swift_bridgeObjectRelease();
        v40 = 1;
        v41 = (uint64_t)v50;
        goto LABEL_25;
      }
    }
    swift_bridgeObjectRelease();
LABEL_24:
    swift_bridgeObjectRelease();
    v41 = (uint64_t)v50;
    (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v50, v37, v36);
    v40 = 0;
  }
  else
  {
    v40 = 1;
    v34 = v53;
    v41 = (uint64_t)v50;
    v36 = v22;
  }
LABEL_25:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 56))(v41, v40, 1, v36);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v41, 1, v36) == 1)
  {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v31, v56);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v46, v18);
    outlined destroy of UIContentConfiguration?(v41, &demangling cache variable for type metadata for URLQueryItem?);
    return 0;
  }
  v42 = URLQueryItem.value.getter();
  v44 = v43;
  (*(void (**)(char *, uint64_t))(v29 + 8))(v31, v56);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v46, v18);
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v41, v36);
  if (v44)
    return v42;
  else
    return 0;
}

unint64_t lazy protocol witness table accessor for type URL and conformance URL()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type URL and conformance URL;
  if (!lazy protocol witness table cache variable for type URL and conformance URL)
  {
    v1 = type metadata accessor for URL();
    result = MEMORY[0x23B813BE0](MEMORY[0x24BDCDB28], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL);
  }
  return result;
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type CAFUIPunchthroughState and conformance CAFUIPunchthroughState()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CAFUIPunchthroughState and conformance CAFUIPunchthroughState;
  if (!lazy protocol witness table cache variable for type CAFUIPunchthroughState and conformance CAFUIPunchthroughState)
  {
    result = MEMORY[0x23B813BE0](&protocol conformance descriptor for CAFUIPunchthroughState, &type metadata for CAFUIPunchthroughState);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFUIPunchthroughState and conformance CAFUIPunchthroughState);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CAFUIPunchthroughState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_237549074 + 4 * byte_23757A875[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_2375490A8 + 4 * byte_23757A870[v4]))();
}

uint64_t sub_2375490A8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2375490B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2375490B8);
  return result;
}

uint64_t sub_2375490C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2375490CCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_2375490D0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2375490D8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CAFUIPunchthroughState()
{
  return &type metadata for CAFUIPunchthroughState;
}

uint64_t type metadata accessor for CAFUIRequestContentManager()
{
  return objc_opt_self();
}

uint64_t specialized CAFUIRequestContentManager.open(contentURLString:in:completion:)(uint64_t a1, void *a2, void *a3, uint64_t a4, int a5, void *a6, uint64_t a7, void *a8)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  id v24;
  void *v25;
  id v26;
  uint64_t v27;
  Swift::String v28;
  BOOL v29;
  char v30;
  char *v31;
  Swift::String v32;
  uint64_t v33;
  unint64_t v34;
  os_log_type_t v35;
  NSURL *v36;
  void *v37;
  void *v38;
  void *v39;
  Swift::String v40;
  uint64_t v41;
  unint64_t v42;
  os_log_type_t v43;
  uint64_t v44;
  uint64_t v45;
  Swift::String v46;
  Swift::String v47;
  uint64_t v48;
  unint64_t v49;
  os_log_type_t v50;
  char *v52;
  id v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  int v57;
  unint64_t aBlock;
  unint64_t v59;
  uint64_t (*v60)(uint64_t, uint64_t);
  void *v61;
  uint64_t (*v62)(char);
  uint64_t v63;

  v55 = a3;
  v56 = a4;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for URL();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = swift_allocObject();
  v57 = a5;
  *(_BYTE *)(v21 + 16) = a5;
  v22 = a8;
  *(_QWORD *)(v21 + 24) = a6;
  *(_QWORD *)(v21 + 32) = a7;
  v23 = v21;
  *(_QWORD *)(v21 + 40) = v22;
  v24 = a6;
  v25 = a2;
  v26 = v24;
  swift_bridgeObjectRetain();
  URL.init(string:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    outlined destroy of UIContentConfiguration?((uint64_t)v16, &demangling cache variable for type metadata for URL?);
LABEL_11:
    aBlock = 0;
    v59 = 0xE000000000000000;
    _StringGuts.grow(_:)(27);
    swift_bridgeObjectRelease();
    aBlock = 0xD000000000000019;
    v59 = 0x800000023757D470;
    v40._countAndFlagsBits = a1;
    v40._object = v25;
    String.append(_:)(v40);
    v41 = aBlock;
    v42 = v59;
    v43 = static os_log_type_t.error.getter();
    specialized static CAFUILogger.log(_:message:function:file:line:)(v43, v41, v42, 0xD000000000000025, 0x800000023757D490);
    swift_bridgeObjectRelease();
    closure #1 in CAFUITileViewController.collectionView(_:didSelectItemAt:)(0, v57 & 1, (uint64_t)v26, a7, v22);
    return swift_release();
  }
  v53 = v26;
  v54 = a7;
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v20, v16, v17);
  URL.scheme.getter();
  if (!v27)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    v26 = v53;
    a7 = v54;
    goto LABEL_11;
  }
  v28 = String.lowercased()();
  swift_bridgeObjectRelease();
  v29 = v28._countAndFlagsBits == 0x7274737475706E69 && v28._object == (void *)0xEB000000006D6165;
  v52 = v20;
  if (v29)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v30 & 1) == 0)
    {
      aBlock = 0;
      v59 = 0xE000000000000000;
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease();
      aBlock = 0xD000000000000014;
      v59 = 0x800000023757D4C0;
      lazy protocol witness table accessor for type URL and conformance URL();
      v31 = v52;
      v32._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v32);
      swift_bridgeObjectRelease();
      v33 = aBlock;
      v34 = v59;
      v35 = static os_log_type_t.error.getter();
      specialized static CAFUILogger.log(_:message:function:file:line:)(v35, v33, v34, 0xD000000000000025, 0x800000023757D490);
      swift_bridgeObjectRelease();
      URL._bridgeToObjectiveC()(v36);
      v38 = v37;
      v62 = partial apply for closure #1 in CAFUITileViewController.collectionView(_:didSelectItemAt:);
      v63 = v23;
      aBlock = MEMORY[0x24BDAC760];
      v59 = 1107296256;
      v60 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
      v61 = &block_descriptor_12;
      v39 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      objc_msgSend(v55, sel_openURL_options_completionHandler_, v38, 0, v39);
      _Block_release(v39);

      (*(void (**)(char *, uint64_t))(v18 + 8))(v31, v17);
      return swift_release();
    }
  }
  v44 = specialized static CAFUIRequestContentManager.inputStreamIdentifier(from:)(a1, (uint64_t)v25);
  if (v45)
  {
    CAFUIRequestContentManager.present(identifier:completion:)(v44, v45, (uint64_t)partial apply for closure #1 in CAFUITileViewController.collectionView(_:didSelectItemAt:), v23);
    swift_bridgeObjectRelease();
  }
  else
  {
    aBlock = 0;
    v59 = 0xE000000000000000;
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    aBlock = 541872725;
    v59 = 0xE400000000000000;
    v46._countAndFlagsBits = a1;
    v46._object = v25;
    String.append(_:)(v46);
    v47._countAndFlagsBits = 0xD000000000000026;
    v47._object = (void *)0x800000023757D4E0;
    String.append(_:)(v47);
    v48 = aBlock;
    v49 = v59;
    v50 = static os_log_type_t.error.getter();
    specialized static CAFUILogger.log(_:message:function:file:line:)(v50, v48, v49, 0xD000000000000025, 0x800000023757D490);
    swift_bridgeObjectRelease();
    closure #1 in CAFUITileViewController.collectionView(_:didSelectItemAt:)(0, v57 & 1, (uint64_t)v53, v54, v22);
  }
  (*(void (**)(char *, uint64_t))(v18 + 8))(v52, v17);
  return swift_release();
}

uint64_t sub_237549604()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CAFUITileViewController.collectionView(_:didSelectItemAt:)(char a1)
{
  uint64_t v1;

  return closure #1 in CAFUITileViewController.collectionView(_:didSelectItemAt:)(a1, *(_BYTE *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(void **)(v1 + 40));
}

void sub_237549640()
{
  AttributeScopes.UIKitAttributes.font.getter();
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes.FontAttribute and conformance AttributeScopes.UIKitAttributes.FontAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.FontAttribute and conformance AttributeScopes.UIKitAttributes.FontAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.FontAttribute and conformance AttributeScopes.UIKitAttributes.FontAttribute)
  {
    result = MEMORY[0x23B813BE0](MEMORY[0x24BEBBE20], MEMORY[0x24BEBBE30]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.FontAttribute and conformance AttributeScopes.UIKitAttributes.FontAttribute);
  }
  return result;
}

void sub_2375496A0()
{
  lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes.FontAttribute and conformance AttributeScopes.UIKitAttributes.FontAttribute();
  AttributeDynamicLookup.subscript.getter();
  __break(1u);
}

uint64_t sub_2375496C4()
{
  return 8;
}

uint64_t sub_2375496D0()
{
  return swift_release();
}

uint64_t sub_2375496D8(_QWORD *a1, _QWORD *a2)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t sub_2375496E8()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyPath<AttributeScopes.UIKitAttributes, AttributeScopes.UIKitAttributes.FontAttribute>);
  return dispatch thunk of Hashable.hashValue.getter();
}

_QWORD *sub_23754972C(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t CAFUIListItemCell.item.didset()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t *v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  id v25;
  void *v26;
  id v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  id v33;
  id v34;
  void *v35;
  id v36;
  id v37;
  void *v38;
  id v39;
  void *v40;
  void *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  id v50;
  double v51;
  double v52;
  double v53;
  double v54;
  uint64_t v55;
  id v56;
  id v57;
  uint64_t v58;
  char *v59;
  id v60;
  id v61;
  id v62;
  Class isa;
  uint64_t v64;
  char v65;
  int *v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  char *v74;
  uint64_t v75;
  uint64_t (*v76)(char *, uint64_t);
  char *v77;
  uint64_t v78;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIListContentConfiguration?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v72 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v72 - v9;
  v11 = type metadata accessor for UIListContentConfiguration();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v72 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v72 - v16;
  v18 = (uint64_t *)(v0 + OBJC_IVAR____TtC5CAFUI17CAFUIListItemCell_item);
  result = swift_beginAccess();
  v20 = *v18;
  if (!*v18)
    return result;
  swift_retain();
  static UIListContentConfiguration.valueCell()();
  specialized CAFUICellProtocol.updateContentConfigurationProperties(_:)((uint64_t)v15, (uint64_t)v17);
  v76 = *(uint64_t (**)(char *, uint64_t))(v12 + 8);
  v21 = v76(v15, v11);
  (*(void (**)(uint64_t))(*(_QWORD *)v20 + 168))(v21);
  v22 = UIListContentConfiguration.image.setter();
  (*(void (**)(uint64_t))(*(_QWORD *)v20 + 216))(v22);
  v23 = UIListContentConfiguration.secondaryText.setter();
  v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 336))(v23);
  v77 = v8;
  if ((v24 & 1) != 0)
  {
    v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBB4B8]), sel_init);
    v73 = v25;
    v26 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v20 + 360))();
    objc_msgSend(v25, sel_setImage_, v26);

    v27 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1688]), sel_init);
    v75 = v1;
    v28 = v27;
    v29 = (*(uint64_t (**)(void))(*(_QWORD *)v20 + 192))();
    if (v30)
      v31 = v29;
    else
      v31 = 0;
    if (v30)
      v32 = v30;
    else
      v32 = 0xE000000000000000;
    v33 = objc_allocWithZone(MEMORY[0x24BDD1458]);
    v74 = v4;
    v34 = v33;
    v35 = (void *)MEMORY[0x23B812F68](v31, v32);
    swift_bridgeObjectRelease();
    v36 = objc_msgSend(v34, sel_initWithString_, v35);

    objc_msgSend(v28, sel_appendAttributedString_, v36);
    v37 = objc_allocWithZone(MEMORY[0x24BDD1458]);
    v38 = (void *)MEMORY[0x23B812F68](8224, 0xE200000000000000);
    v39 = objc_msgSend(v37, sel_initWithString_, v38);

    objc_msgSend(v28, sel_appendAttributedString_, v39);
    v40 = (void *)objc_opt_self();
    v41 = v73;
    v42 = objc_msgSend(v40, sel_attributedStringWithAttachment_, v73);
    v4 = v74;
    objc_msgSend(v28, sel_appendAttributedString_, v42);

    v1 = v75;
    UIListContentConfiguration.attributedText.setter();

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)v20 + 192))();
    v43 = UIListContentConfiguration.text.setter();
  }
  v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 240))(v43);
  if (!v45)
    goto LABEL_17;
  v46 = v44;
  v47 = v45;
  v48 = HIBYTE(v45) & 0xF;
  if ((v45 & 0x2000000000000000) == 0)
    v48 = v44 & 0xFFFFFFFFFFFFLL;
  if (!v48)
  {
    swift_bridgeObjectRelease();
LABEL_17:
    v50 = 0;
    goto LABEL_18;
  }
  v49 = objc_allocWithZone((Class)type metadata accessor for CAFUIBadgeView());
  v50 = CAFUIBadgeView.init(text:)(v46, v47);
  objc_msgSend(v50, sel_sizeToFit);
  objc_msgSend(v50, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v50, sel_intrinsicContentSize);
  v52 = v51;
  v54 = v53;
  v74 = (char *)objc_opt_self();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v55 = swift_allocObject();
  *(_OWORD *)(v55 + 16) = xmmword_2375790C0;
  v56 = objc_msgSend(v50, sel_widthAnchor);
  v57 = objc_msgSend(v56, sel_constraintEqualToConstant_, v52);
  v75 = v12;
  v58 = v11;
  v59 = v4;
  v60 = v57;

  *(_QWORD *)(v55 + 32) = v60;
  v61 = objc_msgSend(v50, sel_heightAnchor);
  v62 = objc_msgSend(v61, sel_constraintEqualToConstant_, v54);

  *(_QWORD *)(v55 + 40) = v62;
  v4 = v59;
  v11 = v58;
  v12 = v75;
  v78 = v55;
  specialized Array._endMutation()();
  type metadata accessor for NSLayoutConstraint();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v74, sel_activateConstraints_, isa);

LABEL_18:
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v4, v17, v11);
  v64 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v4, 0, 1, v11);
  v65 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 264))(v64) & 1;
  outlined init with take of UIListContentConfiguration?((uint64_t)v4, (uint64_t)v10);
  v66 = (int *)type metadata accessor for CAFUIAutomakerSettingConfiguration(0);
  *(_QWORD *)&v10[v66[5]] = v50;
  v10[v66[6]] = v65;
  v10[v66[7]] = 0;
  v67 = *((_QWORD *)v66 - 1);
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v67 + 56))(v10, 0, 1, v66);
  v68 = v1 + OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_automakerSettingConfiguration;
  swift_beginAccess();
  v69 = v50;
  outlined assign with copy of CAFUIAutomakerSettingConfiguration?((uint64_t)v10, v68);
  swift_endAccess();
  v70 = v68;
  v71 = (uint64_t)v77;
  outlined init with copy of CAFUIAutomakerSettingConfiguration?(v70, (uint64_t)v77);
  LODWORD(v66) = (*(uint64_t (**)(uint64_t, uint64_t, int *))(v67 + 48))(v71, 1, v66);
  outlined destroy of CAFUIAutomakerSettingConfiguration?(v71);
  if ((_DWORD)v66 != 1)
    CAFUITileBaseCell.setupViews()();
  outlined destroy of CAFUIAutomakerSettingConfiguration?((uint64_t)v10);

  swift_release();
  return v76(v17, v11);
}

uint64_t CAFUIListItemCell.item.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t CAFUIListItemCell.item.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC5CAFUI17CAFUIListItemCell_item);
  swift_beginAccess();
  *v3 = a1;
  swift_retain();
  swift_release();
  CAFUIListItemCell.item.didset();
  return swift_release();
}

uint64_t (*CAFUIListItemCell.item.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return CAFUIListItemCell.item.modify;
}

uint64_t CAFUIListItemCell.item.modify(uint64_t a1, char a2)
{
  uint64_t result;

  result = swift_endAccess();
  if ((a2 & 1) == 0)
    return CAFUIListItemCell.item.didset();
  return result;
}

uint64_t CAFUIListItemCell.isCellEnabled.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  char v4;

  v1 = v0 + OBJC_IVAR____TtC5CAFUI17CAFUIListItemCell_item;
  swift_beginAccess();
  if (*(_QWORD *)v1)
  {
    v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)v1 + 288);
    v3 = swift_retain();
    v4 = v2(v3);
    swift_release();
  }
  else
  {
    v4 = 1;
  }
  return v4 & 1;
}

void CAFUIListItemCell.__allocating_init(coder:)()
{
  objc_class *v0;
  char *v1;

  v1 = (char *)objc_allocWithZone(v0);
  *(_QWORD *)&v1[OBJC_IVAR____TtC5CAFUI17CAFUIListItemCell_item] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void CAFUIListItemCell.init(coder:)()
{
  char *v0;

  *(_QWORD *)&v0[OBJC_IVAR____TtC5CAFUI17CAFUIListItemCell_item] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall CAFUIListItemCell.prepareForReuse()()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  objc_class *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  objc_super v13;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  v2 = MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v12 - v5;
  v7 = (objc_class *)type metadata accessor for CAFUIListItemCell();
  v13.receiver = v0;
  v13.super_class = v7;
  objc_msgSendSuper2(&v13, sel_prepareForReuse);
  v8 = type metadata accessor for CAFUIAutomakerSettingConfiguration(0);
  v9 = *(_QWORD *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v6, 1, 1, v8);
  v10 = (uint64_t)&v0[OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_automakerSettingConfiguration];
  swift_beginAccess();
  outlined assign with copy of CAFUIAutomakerSettingConfiguration?((uint64_t)v6, v10);
  swift_endAccess();
  outlined init with copy of CAFUIAutomakerSettingConfiguration?(v10, (uint64_t)v4);
  LODWORD(v8) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v4, 1, v8);
  outlined destroy of CAFUIAutomakerSettingConfiguration?((uint64_t)v4);
  if ((_DWORD)v8 != 1)
    CAFUITileBaseCell.setupViews()();
  outlined destroy of CAFUIAutomakerSettingConfiguration?((uint64_t)v6);
  v11 = &v0[OBJC_IVAR____TtC5CAFUI17CAFUIListItemCell_item];
  swift_beginAccess();
  *(_QWORD *)v11 = 0;
  swift_release();
  CAFUIListItemCell.item.didset();
}

uint64_t type metadata accessor for CAFUIListItemCell()
{
  uint64_t result;

  result = type metadata singleton initialization cache for CAFUIListItemCell;
  if (!type metadata singleton initialization cache for CAFUIListItemCell)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t CAFUIListItemCell.__ivar_destroyer()
{
  return swift_release();
}

id CAFUIListItemCell.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFUIListItemCell();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t ObjC metadata update function for CAFUIListItemCell()
{
  return type metadata accessor for CAFUIListItemCell();
}

uint64_t type metadata completion function for CAFUIListItemCell()
{
  return swift_updateClassMetadata2();
}

id CAFUICollectionViewController.__allocating_init(setting:isRHD:)(uint64_t a1, uint64_t a2, char a3)
{
  objc_class *v3;
  char *v7;
  uint64_t ObjectType;

  v7 = (char *)objc_allocWithZone(v3);
  ObjectType = swift_getObjectType();
  return specialized CAFUICollectionViewController.init(setting:isRHD:)(a1, a3, v7, ObjectType, a2);
}

__n128 one-time initialization function for checkImageInsets()
{
  __n128 result;

  static CAFUIImageCollectionViewCell.CellSettings.checkImageInsets = 0;
  *(_QWORD *)algn_2567F9A98 = 0;
  __asm { FMOV            V0.2D, #-6.0 }
  xmmword_2567F9AA0 = (__int128)result;
  return result;
}

double one-time initialization function for decoratorInsets()
{
  double result;

  result = -8.0;
  static CAFUIImageCollectionViewCell.CellSettings.decoratorInsets = xmmword_23757A9F0;
  unk_2567F9AC0 = xmmword_23757AA00;
  return result;
}

__n128 one-time initialization function for checkImageSize()
{
  __n128 result;

  __asm { FMOV            V0.2D, #21.0 }
  static CAFUIImageCollectionViewCell.CellSettings.checkImageSize = (__int128)result;
  return result;
}

char *CAFUIImageCollectionViewCell.init(frame:)(double a1, double a2, double a3, double a4)
{
  _BYTE *v4;
  id v9;
  char *v10;
  id v11;
  id v12;
  char *v13;
  id v14;
  id v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  Class isa;
  id v60;
  objc_super v61;

  *(_QWORD *)&v4[OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_checkImageView] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_decoratorImageView] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_focusRingView] = 0;
  v4[OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_enabled] = 1;
  v9 = objc_allocWithZone(MEMORY[0x24BEBD668]);
  v10 = v4;
  v11 = objc_msgSend(v9, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  *(_QWORD *)&v10[OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_imageView] = v11;
  v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD708]), sel_init);
  *(_QWORD *)&v10[OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_label] = v12;

  v61.receiver = v10;
  v61.super_class = (Class)type metadata accessor for CAFUIImageCollectionViewCell();
  v13 = (char *)objc_msgSendSuper2(&v61, sel_initWithFrame_, a1, a2, a3, a4);
  v14 = objc_msgSend(v13, sel_contentView);
  v15 = objc_msgSend((id)objc_opt_self(), sel_clearColor);
  objc_msgSend(v14, sel_setBackgroundColor_, v15);

  v16 = OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_imageView;
  v17 = *(void **)&v13[OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_imageView];
  objc_msgSend(v17, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v17, sel_setContentMode_, 2);
  v18 = objc_msgSend(v17, sel_layer);
  objc_msgSend(v18, sel_setMasksToBounds_, 1);

  objc_msgSend(*(id *)&v13[v16], sel__setContinuousCornerRadius_, 6.0);
  v19 = OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_label;
  v20 = *(void **)&v13[OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_label];
  objc_msgSend(v20, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v20, sel_setTextAlignment_, 1);
  objc_msgSend(v20, sel_setNumberOfLines_, 1);
  v21 = (void *)objc_opt_self();
  v22 = *MEMORY[0x24BEBE1F0];
  v23 = v20;
  v24 = objc_msgSend(v21, sel_preferredFontDescriptorWithTextStyle_, v22);
  v25 = objc_msgSend((id)objc_opt_self(), sel_fontWithDescriptor_size_, v24, 0.0);

  objc_msgSend(v23, sel_setFont_, v25);
  v26 = objc_msgSend(v13, sel_contentView);
  objc_msgSend(v26, sel_addSubview_, *(_QWORD *)&v13[v16]);

  v27 = objc_msgSend(v13, sel_contentView);
  objc_msgSend(v27, sel_addSubview_, *(_QWORD *)&v13[v19]);

  v60 = (id)objc_opt_self();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_23757AA10;
  v29 = objc_msgSend(*(id *)&v13[v16], sel_leadingAnchor);
  v30 = objc_msgSend(v13, sel_contentView);
  v31 = objc_msgSend(v30, (SEL)&ResourceBundleClass.weak_ivar_lyt + 6);

  v32 = objc_msgSend(v29, sel_constraintEqualToAnchor_, v31);
  *(_QWORD *)(v28 + 32) = v32;
  v33 = objc_msgSend(*(id *)&v13[v16], sel_trailingAnchor);
  v34 = objc_msgSend(v13, sel_contentView);
  v35 = objc_msgSend(v34, (SEL)&selRef_automakerSettingService_didUpdateIdentifier_);

  v36 = objc_msgSend(v33, sel_constraintEqualToAnchor_, v35);
  *(_QWORD *)(v28 + 40) = v36;
  v37 = objc_msgSend(*(id *)&v13[v16], sel_topAnchor);
  v38 = objc_msgSend(v13, sel_contentView);
  v39 = objc_msgSend(v38, sel_topAnchor);

  v40 = objc_msgSend(v37, sel_constraintEqualToAnchor_, v39);
  *(_QWORD *)(v28 + 48) = v40;
  v41 = objc_msgSend(*(id *)&v13[v16], sel_bottomAnchor);
  v42 = objc_msgSend(*(id *)&v13[v19], sel_topAnchor);
  v43 = objc_msgSend(v41, sel_constraintEqualToAnchor_, v42);

  *(_QWORD *)(v28 + 56) = v43;
  v44 = objc_msgSend(*(id *)&v13[v19], sel_heightAnchor);
  v45 = objc_msgSend(v44, sel_constraintEqualToConstant_, 24.0);

  *(_QWORD *)(v28 + 64) = v45;
  v46 = objc_msgSend(*(id *)&v13[v19], sel_leadingAnchor);
  v47 = objc_msgSend(v13, sel_contentView);
  v48 = objc_msgSend(v47, sel_leadingAnchor);

  v49 = objc_msgSend(v46, sel_constraintEqualToAnchor_, v48);
  *(_QWORD *)(v28 + 72) = v49;
  v50 = objc_msgSend(*(id *)&v13[v19], sel_trailingAnchor);
  v51 = objc_msgSend(v13, sel_contentView);
  v52 = objc_msgSend(v51, sel_trailingAnchor);

  v53 = objc_msgSend(v50, sel_constraintEqualToAnchor_, v52);
  *(_QWORD *)(v28 + 80) = v53;
  v54 = objc_msgSend(*(id *)&v13[v19], sel_bottomAnchor);
  v55 = objc_msgSend(v13, sel_contentView);
  v56 = objc_msgSend(v55, sel_bottomAnchor);

  v57 = objc_msgSend(v54, sel_constraintEqualToAnchor_, v56);
  *(_QWORD *)(v28 + 88) = v57;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v60, sel_activateConstraints_, isa);

  return v13;
}

void CAFUIImageCollectionViewCell.checked.setter(char a1)
{
  char *v1;
  char *v2;
  uint64_t v3;
  void *v4;
  Class isa;
  id v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  uint64_t v21;
  id v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  Class v33;
  id v34;

  v2 = v1;
  if ((a1 & 1) == 0)
  {
    v13 = OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_checkImageView;
    v14 = *(void **)&v1[OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_checkImageView];
    if (v14)
    {
      objc_msgSend(v14, sel_removeFromSuperview);
      v14 = *(void **)&v1[v13];
    }
    *(_QWORD *)&v1[v13] = 0;
    goto LABEL_15;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_2375790C0;
  v4 = (void *)objc_opt_self();
  *(_QWORD *)(v3 + 32) = objc_msgSend(v4, sel_systemBlackColor);
  *(_QWORD *)(v3 + 40) = objc_msgSend(v4, sel_systemCyanColor);
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v6 = objc_msgSend((id)objc_opt_self(), sel_configurationWithPaletteColors_, isa);

  v34 = v6;
  v7 = (void *)MEMORY[0x23B812F68](0xD000000000000015, 0x800000023757BD50);
  v8 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_withConfiguration_, v7, v34);

  if (v8)
  {
    v9 = objc_msgSend(v8, sel_imageWithRenderingMode_, 2);

    if (v9)
    {
      v10 = OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_checkImageView;
      v11 = *(void **)&v2[OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_checkImageView];
      if (v11)
      {
        v12 = v11;
        v9 = v9;
        objc_msgSend(v12, sel_setImage_, v9);

      }
      else
      {
        v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD668]), sel_initWithImage_, v9);
        v16 = objc_msgSend(v4, sel__carSystemFocusColor);
        objc_msgSend(v15, sel_setTintColor_, v16);

        objc_msgSend(v15, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
        v17 = objc_msgSend(v2, sel_contentView);
        objc_msgSend(v17, sel_addSubview_, v15);

        v18 = *(void **)&v2[v10];
        *(_QWORD *)&v2[v10] = v15;
        v19 = v15;

        v20 = (void *)objc_opt_self();
        v21 = swift_allocObject();
        *(_OWORD *)(v21 + 16) = xmmword_237579090;
        v22 = objc_msgSend(v19, sel_bottomAnchor);
        v23 = *(void **)&v2[OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_imageView];
        v24 = objc_msgSend(v23, sel_bottomAnchor);
        if (one-time initialization token for checkImageInsets != -1)
          swift_once();
        v25 = objc_msgSend(v22, sel_constraintEqualToAnchor_constant_, v24, *(double *)&xmmword_2567F9AA0);

        *(_QWORD *)(v21 + 32) = v25;
        v26 = objc_msgSend(v19, sel_trailingAnchor);
        v27 = objc_msgSend(v23, sel_trailingAnchor);
        v28 = objc_msgSend(v26, sel_constraintEqualToAnchor_constant_, v27, *((double *)&xmmword_2567F9AA0 + 1));

        *(_QWORD *)(v21 + 40) = v28;
        v29 = objc_msgSend(v19, sel_widthAnchor);
        if (one-time initialization token for checkImageSize != -1)
          swift_once();
        v30 = objc_msgSend(v29, sel_constraintEqualToConstant_, *(double *)&static CAFUIImageCollectionViewCell.CellSettings.checkImageSize);

        *(_QWORD *)(v21 + 48) = v30;
        v31 = objc_msgSend(v19, sel_heightAnchor);
        v32 = objc_msgSend(v31, sel_constraintEqualToConstant_, *((double *)&static CAFUIImageCollectionViewCell.CellSettings.checkImageSize + 1));

        *(_QWORD *)(v21 + 56) = v32;
        specialized Array._endMutation()();
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
        v33 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        objc_msgSend(v20, sel_activateConstraints_, v33);

      }
      v14 = v34;
LABEL_15:

      return;
    }
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void CAFUIImageCollectionViewCell.showsFocusRing.setter(char a1)
{
  char *v1;
  id v2;
  id v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  void *v25;
  Class isa;

  if ((a1 & 1) != 0)
  {
    v2 = objc_msgSend(objc_allocWithZone((Class)CAFUIFocusRingView), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
    objc_msgSend(v2, sel_setCornerRadius_, 8.0);
    objc_msgSend(v2, sel_setRingWidth_, 3.0);
    objc_msgSend(v2, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    v3 = objc_msgSend(v1, sel_contentView);
    objc_msgSend(v3, sel_addSubview_, v2);

    v4 = *(void **)&v1[OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_focusRingView];
    *(_QWORD *)&v1[OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_focusRingView] = v2;
    v5 = v2;

    v6 = (void *)objc_opt_self();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_237579090;
    v8 = objc_msgSend(v5, sel_bottomAnchor);
    v9 = objc_msgSend(v1, sel_contentView);
    v10 = objc_msgSend(v9, sel_bottomAnchor);

    v11 = objc_msgSend(v8, sel_constraintEqualToAnchor_, v10);
    *(_QWORD *)(v7 + 32) = v11;
    v12 = objc_msgSend(v5, sel_topAnchor);
    v13 = objc_msgSend(v1, sel_contentView);
    v14 = objc_msgSend(v13, sel_topAnchor);

    v15 = objc_msgSend(v12, sel_constraintEqualToAnchor_, v14);
    *(_QWORD *)(v7 + 40) = v15;
    v16 = objc_msgSend(v5, sel_leadingAnchor);
    v17 = objc_msgSend(v1, sel_contentView);
    v18 = objc_msgSend(v17, sel_leadingAnchor);

    v19 = objc_msgSend(v16, sel_constraintEqualToAnchor_, v18);
    *(_QWORD *)(v7 + 48) = v19;
    v20 = objc_msgSend(v5, sel_trailingAnchor);
    v21 = objc_msgSend(v1, sel_contentView);
    v22 = objc_msgSend(v21, sel_trailingAnchor);

    v23 = objc_msgSend(v20, sel_constraintEqualToAnchor_, v22);
    *(_QWORD *)(v7 + 56) = v23;
    specialized Array._endMutation()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v6, sel_activateConstraints_, isa);

  }
  else
  {
    v24 = OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_focusRingView;
    v25 = *(void **)&v1[OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_focusRingView];
    if (v25)
    {
      objc_msgSend(v25, sel_removeFromSuperview);
      v25 = *(void **)&v1[v24];
    }
    *(_QWORD *)&v1[v24] = 0;

  }
}

void CAFUIImageCollectionViewCell.decoratorImage.setter(uint64_t a1)
{
  char *v1;
  id v2;
  id v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  Class isa;
  uint64_t v24;
  void *v25;
  id v27;

  if (a1)
  {
    v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD668]), sel_initWithImage_, a1);
    objc_msgSend(v2, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    v3 = objc_msgSend(v2, sel_layer);
    objc_msgSend(v3, sel_setBorderWidth_, 3.0);

    v4 = objc_msgSend(v2, sel_layer);
    objc_msgSend(v4, sel_setCornerRadius_, 12.0);

    v5 = objc_msgSend(v1, sel_contentView);
    objc_msgSend(v5, sel_addSubview_, v2);

    v6 = *(void **)&v1[OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_decoratorImageView];
    *(_QWORD *)&v1[OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_decoratorImageView] = v2;
    v7 = v2;

    v8 = (void *)objc_opt_self();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_237579090;
    v10 = objc_msgSend(v7, sel_topAnchor);
    v11 = objc_msgSend(v1, sel_contentView);
    v12 = objc_msgSend(v11, sel_topAnchor);

    if (one-time initialization token for decoratorInsets != -1)
      swift_once();
    v13 = objc_msgSend(v10, sel_constraintEqualToAnchor_constant_, v12, *(double *)&static CAFUIImageCollectionViewCell.CellSettings.decoratorInsets, a1);

    *(_QWORD *)(v9 + 32) = v13;
    v14 = objc_msgSend(v7, sel_trailingAnchor);
    v15 = objc_msgSend(v1, sel_contentView);
    v16 = objc_msgSend(v15, sel_trailingAnchor);

    v17 = objc_msgSend(v14, sel_constraintEqualToAnchor_constant_, v16, *(double *)&qword_2567F9AC8);
    *(_QWORD *)(v9 + 40) = v17;
    v18 = objc_msgSend(v7, sel_heightAnchor);
    v19 = objc_msgSend(v18, sel_constraintEqualToConstant_, 24.0);

    *(_QWORD *)(v9 + 48) = v19;
    v20 = objc_msgSend(v7, sel_widthAnchor);
    v21 = objc_msgSend(v7, sel_heightAnchor);
    v22 = objc_msgSend(v20, sel_constraintEqualToAnchor_, v21);

    *(_QWORD *)(v9 + 56) = v22;
    specialized Array._endMutation()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v8, sel_activateConstraints_, isa);

  }
  else
  {
    v24 = OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_decoratorImageView;
    v25 = *(void **)&v1[OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_decoratorImageView];
    if (v25)
    {
      objc_msgSend(v25, sel_removeFromSuperview);
      v25 = *(void **)&v1[v24];
    }
    *(_QWORD *)&v1[v24] = 0;

  }
}

id CAFUIImageCollectionViewCell.configure(with:selected:)(_QWORD *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t);
  id v34;
  void *v35;
  int v36;
  void *v37;
  char **v38;
  id v39;
  double v40;

  v3 = v2;
  v6 = *(void **)(v2 + OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_imageView);
  v7 = a1[3];
  v8 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  v9 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 16))(v7, v8);
  objc_msgSend(v6, sel_setImage_, v9);

  v10 = *(void **)(v3 + OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_label);
  v11 = a1[3];
  v12 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
  v14 = (void *)MEMORY[0x23B812F68](v13);
  swift_bridgeObjectRelease();
  objc_msgSend(v10, sel_setText_, v14);

  CAFUIImageCollectionViewCell.checked.setter(a2);
  v15 = a1[3];
  v16 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v15);
  v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 32))(v15, v16);
  v18 = OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_enabled;
  *(_BYTE *)(v3 + OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_enabled) = v17 & 1;
  v19 = a1[3];
  v20 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v19);
  v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 24))(v19, v20);
  CAFUIImageCollectionViewCell.decoratorImage.setter(v21);
  v22 = OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_decoratorImageView;
  v23 = *(void **)(v3 + OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_decoratorImageView);
  if (v23)
  {
    v24 = objc_msgSend(v23, sel_layer);
    v25 = a1[3];
    v26 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v25);
    v27 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v26 + 48))(v25, v26);
    if (v27)
    {
      v28 = v27;
      v29 = objc_msgSend(v27, sel_CGColor);

    }
    else
    {
      v29 = 0;
    }
    objc_msgSend(v24, sel_setBorderColor_, v29);

    v30 = *(void **)(v3 + v22);
    if (v30)
    {
      v31 = a1[3];
      v32 = a1[4];
      __swift_project_boxed_opaque_existential_1(a1, v31);
      v33 = *(uint64_t (**)(uint64_t, uint64_t))(v32 + 48);
      v34 = v30;
      v35 = (void *)v33(v31, v32);
      objc_msgSend(v34, sel_setTintColor_, v35);

    }
  }
  v36 = *(unsigned __int8 *)(v3 + v18);
  v37 = (void *)objc_opt_self();
  v38 = &selRef_labelColor;
  if (!v36)
    v38 = &selRef_secondaryLabelColor;
  v39 = objc_msgSend(v37, *v38);
  objc_msgSend(v10, sel_setTextColor_, v39);

  v40 = 0.5;
  if (*(_BYTE *)(v3 + v18))
    v40 = 1.0;
  return objc_msgSend(v6, sel_setAlpha_, v40);
}

Swift::Void __swiftcall CAFUIImageCollectionViewCell.didUpdateFocus(in:with:)(UIFocusUpdateContext in, UIFocusAnimationCoordinator with)
{
  char *v2;
  char *v3;
  id v6;
  void *v7;
  char v8;
  uint64_t v9;
  void *v10;
  objc_super v11;

  v3 = v2;
  v11.receiver = v3;
  v11.super_class = (Class)type metadata accessor for CAFUIImageCollectionViewCell();
  objc_msgSendSuper2(&v11, sel_didUpdateFocusInContext_withAnimationCoordinator_, in.super.isa, with.super.isa);
  v6 = -[objc_class nextFocusedView](in.super.isa, sel_nextFocusedView);
  if (v6)
  {
    v7 = v6;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    v8 = static NSObject.== infix(_:_:)();
    CAFUIImageCollectionViewCell.showsFocusRing.setter(v8 & 1);
  }
  else
  {
    v9 = OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_focusRingView;
    v10 = *(void **)&v3[OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_focusRingView];
    if (v10)
    {
      objc_msgSend(v10, sel_removeFromSuperview);
      v7 = *(void **)&v3[v9];
    }
    else
    {
      v7 = 0;
    }
    *(_QWORD *)&v3[v9] = 0;
  }

}

id CAFUIImageCollectionViewCell.isHighlighted.setter(char a1)
{
  char *v1;
  double v3;
  objc_super v5;

  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for CAFUIImageCollectionViewCell();
  objc_msgSendSuper2(&v5, sel_setHighlighted_, a1 & 1);
  if ((objc_msgSend(v1, sel_isHighlighted) & 1) != 0
    || (v3 = 1.0, (v1[OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_enabled] & 1) == 0))
  {
    v3 = 0.5;
  }
  return objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC5CAFUI28CAFUIImageCollectionViewCell_imageView], sel_setAlpha_, v3);
}

id CAFUIImageCollectionViewCell.__deallocating_deinit()
{
  return CAFUIStackView.__deallocating_deinit(type metadata accessor for CAFUIImageCollectionViewCell);
}

uint64_t CAFUICollectionViewController.setting.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t CAFUICollectionViewController.items.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t CAFUICollectionViewController.items.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_items);
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*CAFUICollectionViewController.items.modify())()
{
  swift_beginAccess();
  return CAFUICollectionViewController.items.modify;
}

uint64_t CAFUICollectionViewController.cellIdentifier.getter()
{
  objc_class *ObjCClassFromMetadata;
  NSString *v1;
  uint64_t v2;

  type metadata accessor for CAFUIImageCollectionViewCell();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  v1 = NSStringFromClass(ObjCClassFromMetadata);
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

id CAFUICollectionViewController.init(setting:isRHD:)(uint64_t a1, uint64_t a2, char a3)
{
  char *v3;
  uint64_t ObjectType;

  ObjectType = swift_getObjectType();
  return specialized CAFUICollectionViewController.init(setting:isRHD:)(a1, a3, v3, ObjectType, a2);
}

id CAFUICollectionViewController.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void CAFUICollectionViewController.init(coder:)()
{
  char *v0;
  char *v1;
  char *v2;

  *(_QWORD *)&v0[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_emptyView] = 0;
  v1 = &v0[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_itemSize];
  *(_QWORD *)v1 = 0;
  *((_QWORD *)v1 + 1) = 0;
  v1[16] = 1;
  v2 = &v0[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_collectionViewSize];
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 1) = 0;
  v2[16] = 1;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall CAFUICollectionViewController.viewDidLoad()()
{
  _QWORD *v0;
  _QWORD *v1;
  id v2;
  void *v3;
  _QWORD *v4;
  uint64_t ObjCClassFromMetadata;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  id v27;
  void *v28;
  id v29;
  id v30;
  void *v31;
  id v32;
  id v33;
  id v34;
  id v35;
  void *v36;
  id v37;
  id v38;
  void *v39;
  id v40;
  id v41;
  id v42;
  id v43;
  void *v44;
  id v45;
  id v46;
  void *v47;
  void *v48;
  id v49;
  id v50;
  id v51;
  Class isa;
  objc_super v53;

  v1 = v0;
  v53.receiver = v0;
  v53.super_class = (Class)type metadata accessor for CAFUICollectionViewController();
  objc_msgSendSuper2(&v53, sel_viewDidLoad);
  v2 = objc_msgSend(v0, sel_collectionView);
  if (!v2)
  {
    __break(1u);
    goto LABEL_17;
  }
  v3 = v2;
  v4 = (_QWORD *)MEMORY[0x24BEE4EA0];
  (*(void (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB8))();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v6 = (*(uint64_t (**)(void))((*v4 & *v0) + 0xB0))();
  v7 = (void *)MEMORY[0x23B812F68](v6);
  swift_bridgeObjectRelease();
  objc_msgSend(v3, sel_registerClass_forCellWithReuseIdentifier_, ObjCClassFromMetadata, v7);

  v8 = objc_msgSend(v0, sel_collectionView);
  if (!v8)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v9 = v8;
  objc_msgSend(v8, sel_setDataSource_, v1);

  v10 = objc_msgSend(v1, sel_collectionView);
  if (!v10)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v11 = v10;
  objc_msgSend(v10, sel_setDelegate_, v1);

  v12 = objc_msgSend(v1, sel_collectionView);
  if (!v12)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v13 = v12;
  objc_msgSend(v12, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

  v14 = objc_msgSend(v1, sel_collectionView);
  if (!v14)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v15 = v14;
  v16 = objc_msgSend((id)objc_opt_self(), sel_tableBackgroundColor);
  if (!v16)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v17 = v16;
  objc_msgSend(v15, sel_setBackgroundColor_, v16);

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_237579090;
  v19 = objc_msgSend(v1, sel_collectionView);
  if (!v19)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v20 = v19;
  v21 = objc_msgSend(v19, sel_topAnchor);

  v22 = objc_msgSend(v1, sel_view);
  if (!v22)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v23 = v22;
  v24 = objc_msgSend(v22, sel_safeAreaLayoutGuide);

  v25 = objc_msgSend(v24, sel_topAnchor);
  v26 = objc_msgSend(v21, sel_constraintEqualToAnchor_, v25);

  *(_QWORD *)(v18 + 32) = v26;
  v27 = objc_msgSend(v1, sel_collectionView);
  if (!v27)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v28 = v27;
  v29 = objc_msgSend(v27, sel_leadingAnchor);

  v30 = objc_msgSend(v1, sel_view);
  if (!v30)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v31 = v30;
  v32 = objc_msgSend(v30, sel_safeAreaLayoutGuide);

  v33 = objc_msgSend(v32, sel_leadingAnchor);
  v34 = objc_msgSend(v29, sel_constraintEqualToAnchor_, v33);

  *(_QWORD *)(v18 + 40) = v34;
  v35 = objc_msgSend(v1, sel_collectionView);
  if (!v35)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v36 = v35;
  v37 = objc_msgSend(v35, sel_trailingAnchor);

  v38 = objc_msgSend(v1, sel_view);
  if (!v38)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v39 = v38;
  v40 = objc_msgSend(v38, sel_safeAreaLayoutGuide);

  v41 = objc_msgSend(v40, sel_trailingAnchor);
  v42 = objc_msgSend(v37, sel_constraintEqualToAnchor_, v41);

  *(_QWORD *)(v18 + 48) = v42;
  v43 = objc_msgSend(v1, sel_collectionView);
  if (!v43)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v44 = v43;
  v45 = objc_msgSend(v43, sel_bottomAnchor);

  v46 = objc_msgSend(v1, sel_view);
  if (v46)
  {
    v47 = v46;
    v48 = (void *)objc_opt_self();
    v49 = objc_msgSend(v47, sel_safeAreaLayoutGuide);

    v50 = objc_msgSend(v49, sel_bottomAnchor);
    v51 = objc_msgSend(v45, sel_constraintEqualToAnchor_, v50);

    *(_QWORD *)(v18 + 56) = v51;
    specialized Array._endMutation()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v48, sel_activateConstraints_, isa);

    (*(void (**)(_QWORD, _QWORD))((*MEMORY[0x24BEE4EA0] & *v1) + 0xD8))(0, 0);
    return;
  }
LABEL_29:
  __break(1u);
}

Swift::Void __swiftcall CAFUICollectionViewController.viewWillDisappear(_:)(Swift::Bool a1)
{
  void *v1;
  id v3;
  objc_super v4;

  v4.receiver = v1;
  v4.super_class = (Class)type metadata accessor for CAFUICollectionViewController();
  objc_msgSendSuper2(&v4, sel_viewWillDisappear_, a1);
  v3 = objc_msgSend(v1, sel_navigationItem);
  objc_msgSend(v3, sel_setRightBarButtonItem_, 0);

}

Swift::Void __swiftcall CAFUICollectionViewController.toggle(index:)(Swift::Int index)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  Class isa;

  v2 = v1;
  v4 = *(_QWORD *)&v2[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_setting + 8];
  ObjectType = swift_getObjectType();
  v6 = (*(uint64_t (**)(Swift::Int, uint64_t, uint64_t))(v4 + 72))(index, ObjectType, v4);
  v7 = objc_msgSend(v2, sel_collectionView);
  if (v7)
  {
    v8 = v7;
    v9 = objc_msgSend(v7, sel_indexPathsForVisibleItems);

    type metadata accessor for IndexPath();
    v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v11 = specialized _ArrayProtocol.filter(_:)(v10, v6);
    swift_bridgeObjectRelease();
    if (!*(_QWORD *)(v11 + 16))
    {
      swift_bridgeObjectRelease();
      return;
    }
    v12 = objc_msgSend(v2, sel_collectionView);
    if (v12)
    {
      v13 = v12;
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v13, sel_reconfigureItemsAtIndexPaths_, isa);

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

Swift::Void __swiftcall CAFUICollectionViewController.updateEmptyView(title:)(Swift::String_optional title)
{
  char *v1;
  void *object;
  uint64_t countAndFlagsBits;
  id v4;
  void *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  Class isa;
  id v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  void *v33;
  void *v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;

  object = title.value._object;
  countAndFlagsBits = title.value._countAndFlagsBits;
  v4 = objc_msgSend(v1, sel_collectionView);
  if (!v4)
  {
    __break(1u);
    goto LABEL_15;
  }
  v5 = v4;
  objc_msgSend(v4, sel_reloadData);

  v6 = &v1[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_items];
  swift_beginAccess();
  v7 = *(_QWORD *)(*(_QWORD *)v6 + 16);
  v8 = OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_emptyView;
  v9 = *(void **)&v1[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_emptyView];
  if ((v7 == 0) != (v9 == 0))
    return;
  if (!v7)
  {
    v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD708]), sel_init);
    objc_msgSend(v11, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    if (object)
    {
      v12 = object;
    }
    else
    {
      v13 = (void *)MEMORY[0x23B812F68](0x534D4554495F4F4ELL, 0xE800000000000000);
      v14 = CAFUILocalizedStringForKey(v13);

      countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v12 = v15;

    }
    swift_bridgeObjectRetain();
    v16 = (void *)MEMORY[0x23B812F68](countAndFlagsBits, v12);
    swift_bridgeObjectRelease();
    objc_msgSend(v11, sel_setText_, v16);

    v17 = objc_msgSend((id)objc_opt_self(), sel_secondaryLabelColor);
    objc_msgSend(v11, sel_setTextColor_, v17);

    v18 = objc_msgSend((id)objc_opt_self(), sel_preferredFontDescriptorWithTextStyle_, *MEMORY[0x24BEBE1D8]);
    v19 = objc_msgSend((id)objc_opt_self(), sel_fontWithDescriptor_size_, v18, 0.0);

    objc_msgSend(v11, sel_setFont_, v19);
    objc_msgSend(v11, sel_setTextAlignment_, 1);
    v20 = objc_msgSend(v1, sel_collectionView);
    if (v20)
    {
      v21 = v20;
      objc_msgSend(v20, sel_addSubview_, v11);

      v22 = *(void **)&v1[v8];
      *(_QWORD *)&v1[v8] = v11;
      v23 = v11;

      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v24 = swift_allocObject();
      *(_OWORD *)(v24 + 16) = xmmword_2375790C0;
      v25 = objc_msgSend(v23, sel_centerXAnchor);
      v26 = objc_msgSend(v1, sel_view);
      if (v26)
      {
        v27 = v26;
        v28 = objc_msgSend(v26, sel_safeAreaLayoutGuide);

        v29 = objc_msgSend(v28, sel_centerXAnchor);
        v30 = objc_msgSend(v25, sel_constraintEqualToAnchor_, v29);

        *(_QWORD *)(v24 + 32) = v30;
        v31 = objc_msgSend(v23, sel_centerYAnchor);
        v32 = objc_msgSend(v1, sel_view);
        if (v32)
        {
          v33 = v32;
          v34 = (void *)objc_opt_self();
          v35 = objc_msgSend(v33, sel_safeAreaLayoutGuide);

          v36 = objc_msgSend(v35, sel_centerYAnchor);
          v37 = objc_msgSend(v31, sel_constraintEqualToAnchor_, v36);

          *(_QWORD *)(v24 + 40) = v37;
          v38 = v24;
          specialized Array._endMutation()();
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
          isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          objc_msgSend(v34, sel_activateConstraints_, isa, v38);

          goto LABEL_12;
        }
LABEL_17:
        __break(1u);
        return;
      }
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  objc_msgSend(v9, sel_removeFromSuperview);
  isa = *(Class *)&v1[v8];
  *(_QWORD *)&v1[v8] = 0;
LABEL_12:

}

Swift::Int __swiftcall CAFUICollectionViewController.numberOfSections(in:)(UICollectionView *in)
{
  return 1;
}

Swift::Int __swiftcall CAFUICollectionViewController.collectionView(_:numberOfItemsInSection:)(UICollectionView *_, Swift::Int numberOfItemsInSection)
{
  uint64_t v2;
  uint64_t v3;

  v3 = v2 + OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_items;
  swift_beginAccess();
  return *(_QWORD *)(*(_QWORD *)v3 + 16);
}

uint64_t CAFUICollectionViewController.collectionView(_:cellForItemAt:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  objc_class *ObjCClassFromMetadata;
  NSString *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  Class isa;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjectType;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t result;
  _QWORD v21[5];

  v2 = v1;
  type metadata accessor for CAFUIImageCollectionViewCell();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  v5 = NSStringFromClass(ObjCClassFromMetadata);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v8 = v7;

  v9 = (void *)MEMORY[0x23B812F68](v6, v8);
  swift_bridgeObjectRelease();
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v11 = (unint64_t)objc_msgSend(a1, sel_dequeueReusableCellWithReuseIdentifier_forIndexPath_, v9, isa);

  v12 = swift_dynamicCastClass();
  if (v12)
  {
    v13 = v12;
    v11 = IndexPath.row.getter();
    v14 = v2 + OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_items;
    swift_beginAccess();
    if ((v11 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v11 < *(_QWORD *)(*(_QWORD *)v14 + 16))
    {
      outlined init with copy of CAFUIImageRepresentableItemProtocol(*(_QWORD *)v14 + 40 * v11 + 32, (uint64_t)v21);
      v15 = *(_QWORD *)(v2 + OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_setting + 8);
      ObjectType = swift_getObjectType();
      v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 48))(ObjectType, v15);
      v18 = IndexPath.row.getter();
      v19 = specialized Sequence<>.contains(_:)(v18, v17);
      swift_bridgeObjectRelease();
      CAFUIImageCollectionViewCell.configure(with:selected:)(v21, v19 & 1);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v21);
      return v13;
    }
    __break(1u);
  }

  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t CAFUICollectionViewController.collectionView(_:canEditItemAt:)()
{
  return 0;
}

uint64_t @objc CAFUICollectionViewController.collectionView(_:canEditItemAt:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;

  v0 = type metadata accessor for IndexPath();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return 0;
}

uint64_t CAFUICollectionViewController.collectionView(_:shouldSelectItemAt:)()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  v1 = IndexPath.row.getter();
  v2 = v0 + OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_items;
  result = swift_beginAccess();
  if ((v1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v1 < *(_QWORD *)(*(_QWORD *)v2 + 16))
  {
    outlined init with copy of CAFUIImageRepresentableItemProtocol(*(_QWORD *)v2 + 40 * v1 + 32, (uint64_t)v6);
    v4 = v7;
    v5 = v8;
    __swift_project_boxed_opaque_existential_1(v6, v7);
    LOBYTE(v4) = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 32))(v4, v5);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v6);
    return v4 & 1;
  }
  __break(1u);
  return result;
}

void CAFUICollectionViewController.collectionView(_:didSelectItemAt:)()
{
  specialized CAFUICollectionViewController.collectionView(_:didSelectItemAt:)();
}

UIEdgeInsets __swiftcall CAFUICollectionViewController.collectionView(_:layout:insetForSectionAt:)(UICollectionView *_, UICollectionViewLayout *layout, Swift::Int insetForSectionAt)
{
  uint64_t v4;
  void *v5;
  UICollectionViewLayout *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  UIEdgeInsets result;

  objc_opt_self();
  v4 = swift_dynamicCastObjCClass();
  if (v4)
  {
    v5 = (void *)v4;
    v6 = layout;
    objc_msgSend(v5, sel_scrollDirection);

  }
  v7 = 45.0;
  v8 = 2.0;
  v9 = 6.0;
  v10 = 45.0;
  result.right = v10;
  result.bottom = v9;
  result.left = v7;
  result.top = v8;
  return result;
}

id CAFUICollectionViewController.collectionView(_:layout:sizeForItemAt:)(id a1)
{
  return specialized CAFUICollectionViewController.collectionView(_:layout:sizeForItemAt:)(a1);
}

id CAFUICollectionViewController.__allocating_init(collectionViewLayout:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCollectionViewLayout_, a1);

  return v3;
}

void CAFUICollectionViewController.init(collectionViewLayout:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id CAFUICollectionViewController.__allocating_init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v3;
  objc_class *v4;
  void *v6;
  id v7;

  v4 = v3;
  if (a2)
  {
    v6 = (void *)MEMORY[0x23B812F68]();
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = 0;
  }
  v7 = objc_msgSend(objc_allocWithZone(v4), sel_initWithNibName_bundle_, v6, a3);

  return v7;
}

void CAFUICollectionViewController.init(nibName:bundle:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id CAFUICollectionViewController.__deallocating_deinit()
{
  return CAFUIStackView.__deallocating_deinit(type metadata accessor for CAFUICollectionViewController);
}

id specialized CAFUICollectionViewController.init(setting:isRHD:)(uint64_t a1, char a2, char *a3, uint64_t a4, uint64_t a5)
{
  char *v8;
  char *v9;
  char *v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  char *v12;
  id v13;
  uint64_t inited;
  uint64_t v15;
  Class isa;
  id v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  id v20;
  uint64_t v21;
  void *v22;
  objc_super v24;
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)&a3[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_emptyView] = 0;
  v8 = &a3[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_itemSize];
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  v8[16] = 1;
  v9 = &a3[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_collectionViewSize];
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  v9[16] = 1;
  v10 = &a3[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_setting];
  *(_QWORD *)v10 = a1;
  *((_QWORD *)v10 + 1) = a5;
  v11 = *(uint64_t (**)(uint64_t, uint64_t))(a5 + 40);
  v12 = a3;
  swift_unknownObjectRetain();
  *(_QWORD *)&v12[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_items] = v11(a4, a5);
  v12[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_isRHD] = a2;

  v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD488]), sel_init);
  objc_msgSend(v13, sel_setItemSize_, 175.0, 91.0);
  objc_msgSend(v13, sel_setMinimumInteritemSpacing_, 10.0);
  objc_msgSend(v13, sel_setMinimumLineSpacing_, 8.0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_237579480;
  v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v26 = v15;
  AnyHashable.init<A>(_:)();
  *(_QWORD *)(inited + 96) = MEMORY[0x24BEE44F0];
  *(_DWORD *)(inited + 72) = 3;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v13, sel__setRowAlignmentsOptions_, isa);

  v24.receiver = v12;
  v24.super_class = (Class)type metadata accessor for CAFUICollectionViewController();
  v17 = objc_msgSendSuper2(&v24, sel_initWithCollectionViewLayout_, v13);
  v18 = *(_QWORD *)(a5 + 8);
  v19 = *(uint64_t (**)(uint64_t, uint64_t))(v18 + 8);
  v20 = v17;
  v21 = v19(a4, v18);
  v22 = (void *)MEMORY[0x23B812F68](v21);
  swift_bridgeObjectRelease();
  objc_msgSend(v20, sel_setTitle_, v22);

  swift_unknownObjectRelease();
  return v20;
}

uint64_t type metadata accessor for CAFUIImageCollectionViewCell()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for CAFUICollectionViewController()
{
  return objc_opt_self();
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t result;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  void (*v21)(char *, unint64_t, uint64_t);
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  void (*v23)(char *, char *, uint64_t);
  char *v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  void (*v43)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v44;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IndexPath?);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v31 - v8;
  v10 = type metadata accessor for IndexPath();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v32 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v31 - v15;
  result = MEMORY[0x24BDAC7A8](v14);
  v36 = (char *)&v31 - v18;
  v44 = MEMORY[0x24BEE4AF8];
  v35 = *(_QWORD *)(a1 + 16);
  if (v35)
  {
    v19 = 0;
    v37 = a2;
    v33 = v9;
    v34 = a1;
    v41 = v11;
    while (v19 < *(_QWORD *)(a1 + 16))
    {
      v38 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
      v39 = v19;
      v40 = *(_QWORD *)(v11 + 72);
      v21 = *(void (**)(char *, unint64_t, uint64_t))(v11 + 16);
      v21(v9, a1 + v38 + v40 * v19, v10);
      v43 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
      v43(v9, 0, 1, v10);
      v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
      if (v22(v9, 1, v10) == 1)
        goto LABEL_22;
      v23 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
      v24 = v36;
      v42 = v23;
      v23(v36, v9, v10);
      v25 = *(_QWORD *)(a2 + 16);
      if (v25)
      {
        v26 = a2 + v38;
        swift_bridgeObjectRetain();
        while (1)
        {
          v21(v7, v26, v10);
          v43(v7, 0, 1, v10);
          if (v22(v7, 1, v10) == 1)
            break;
          v42(v16, v7, v10);
          lazy protocol witness table accessor for type IndexPath and conformance IndexPath(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x24BDCF6A0]);
          v27 = dispatch thunk of static Equatable.== infix(_:_:)();
          (*(void (**)(char *, uint64_t))(v41 + 8))(v16, v10);
          if ((v27 & 1) != 0)
          {
            swift_bridgeObjectRelease();
            v42(v32, v24, v10);
            v28 = v44;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v28 + 16) + 1, 1);
              v28 = v44;
            }
            v11 = v41;
            v30 = *(_QWORD *)(v28 + 16);
            v29 = *(_QWORD *)(v28 + 24);
            if (v30 >= v29 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
              v28 = v44;
            }
            *(_QWORD *)(v28 + 16) = v30 + 1;
            result = ((uint64_t (*)(unint64_t, char *, uint64_t))v42)(v28 + v38 + v30 * v40, v32, v10);
            v44 = v28;
            a2 = v37;
            goto LABEL_6;
          }
          v26 += v40;
          if (!--v25)
            goto LABEL_4;
        }
      }
      else
      {
        swift_bridgeObjectRetain();
LABEL_4:
        v43(v7, 1, 1, v10);
      }
      a2 = v37;
      swift_bridgeObjectRelease();
      v20 = v24;
      v11 = v41;
      result = (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v20, v10);
LABEL_6:
      v19 = v39 + 1;
      a1 = v34;
      v9 = v33;
      if (v39 + 1 == v35)
        goto LABEL_21;
    }
    __break(1u);
  }
  else
  {
    v43 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
LABEL_21:
    v43(v9, 1, 1, v10);
LABEL_22:
    swift_bridgeObjectRelease();
    outlined destroy of IndexPath?((uint64_t)v9);
    return v44;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;

  v26 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IndexPath?);
  MEMORY[0x24BDAC7A8](v3);
  v27 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for IndexPath();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v25 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x24BDAC7A8](v7);
  v28 = MEMORY[0x24BEE4AF8];
  v24 = *(_QWORD *)(a1 + 16);
  if (v24)
  {
    v23 = (char *)&v20 - v10;
    v11 = 0;
    v21 = a1;
    v12 = (uint64_t)v27;
    while (v11 < *(_QWORD *)(a1 + 16))
    {
      v13 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
      v14 = *(_QWORD *)(v6 + 72);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16))(v12, a1 + v13 + v14 * v11, v5);
      v22 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56);
      v22(v12, 0, 1, v5);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v12, 1, v5) == 1)
        goto LABEL_15;
      v15 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 32);
      v16 = v23;
      v15(v23, v12, v5);
      if ((CAFUITileDataSource.validate(indexPath:)() & 1) != 0)
      {
        v15(v25, (uint64_t)v16, v5);
        v17 = v28;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v17 + 16) + 1, 1);
          v17 = v28;
        }
        v19 = *(_QWORD *)(v17 + 16);
        v18 = *(_QWORD *)(v17 + 24);
        if (v19 >= v18 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
          v17 = v28;
        }
        *(_QWORD *)(v17 + 16) = v19 + 1;
        result = ((uint64_t (*)(unint64_t, char *, uint64_t))v15)(v17 + v13 + v19 * v14, v25, v5);
        v28 = v17;
        a1 = v21;
      }
      else
      {
        result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v16, v5);
      }
      ++v11;
      v12 = (uint64_t)v27;
      if (v24 == v11)
      {
        v22((uint64_t)v27, 1, 1, v5);
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
    v12 = (uint64_t)v27;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v27, 1, 1, v5);
LABEL_15:
    swift_bridgeObjectRelease();
    outlined destroy of IndexPath?(v12);
    return v28;
  }
  return result;
}

void specialized CAFUICollectionViewController.collectionView(_:didSelectItemAt:)()
{
  Swift::String v0;
  os_log_type_t v1;
  Swift::Int v2;

  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  type metadata accessor for IndexPath();
  lazy protocol witness table accessor for type IndexPath and conformance IndexPath((unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x24BDCF6B8]);
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1 = static os_log_type_t.info.getter();
  specialized static CAFUILogger.log(_:message:function:file:line:)(v1, 0xD000000000000017, 0x800000023757D8A0, 0xD000000000000022, 0x800000023757D8C0);
  swift_bridgeObjectRelease();
  v2 = IndexPath.row.getter();
  CAFUICollectionViewController.toggle(index:)(v2);
}

id specialized CAFUICollectionViewController.collectionView(_:layout:sizeForItemAt:)(id a1)
{
  uint64_t v1;
  uint64_t v3;
  double v4;
  double v5;
  char v6;
  id result;
  double v8;
  double v9;
  BOOL v10;
  double Width;
  double v12;
  CGFloat v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  CGRect v20;
  CGRect v21;
  CGRect v22;
  CGRect v23;

  v3 = v1 + OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_itemSize;
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_itemSize + 16) & 1) != 0
    || (v4 = *(double *)(v1 + OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_collectionViewSize),
        v5 = *(double *)(v1 + OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_collectionViewSize + 8),
        v6 = *(_BYTE *)(v1 + OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_collectionViewSize + 16),
        result = objc_msgSend(a1, sel_bounds),
        (v6 & 1) != 0)
    || (v4 == v8 ? (v10 = v5 == v9) : (v10 = 0), !v10))
  {
    objc_msgSend(a1, sel_bounds);
    Width = CGRectGetWidth(v20);
    objc_msgSend(a1, sel_bounds);
    v12 = Width / CGRectGetHeight(v21);
    objc_msgSend(a1, sel_bounds);
    v13 = CGRectGetHeight(v22) + -6.0 + -2.0;
    objc_msgSend(a1, sel_bounds);
    v14 = CGRectGetWidth(v23) + -45.0;
    v15 = (v13 + -24.0 + -24.0 + -8.0) * 0.5;
    v16 = v12 * v15;
    if (v14 <= v12 * v15)
    {
      v16 = v14 + -10.0;
      v15 = (v14 + -10.0) / v12;
    }
    result = objc_msgSend(a1, sel_bounds);
    v17 = v1 + OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_collectionViewSize;
    *(_QWORD *)v17 = v18;
    *(_QWORD *)(v17 + 8) = v19;
    *(_BYTE *)(v17 + 16) = 0;
    *(double *)v3 = v16;
    *(double *)(v3 + 8) = v15 + 24.0;
    *(_BYTE *)(v3 + 16) = 0;
  }
  else if ((*(_BYTE *)(v3 + 16) & 1) != 0)
  {
    __break(1u);
  }
  return result;
}

uint64_t outlined destroy of IndexPath?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IndexPath?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t lazy protocol witness table accessor for type IndexPath and conformance IndexPath(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for IndexPath();
    result = MEMORY[0x23B813BE0](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t CAUAssetLibrary.asset(for:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = type metadata accessor for URL();
  MEMORY[0x24BDAC7A8](v2);
  dispatch thunk of CAUAssetLibrary.path(for:)();
  if (!v1)
  {
    Data.init(contentsOf:options:)();
    __asm { BR              X10 }
  }
  return v0;
}

uint64_t CAFEqualizer.title.getter()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  uint64_t v4;
  id v5;
  void *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  switch(objc_msgSend(v0, sel_type))
  {
    case 0u:
      v1 = (void *)MEMORY[0x23B812F68](0xD000000000000019, 0x800000023757D9D0);
      v2 = CAFUILocalizedStringForKey(v1);
      goto LABEL_5;
    case 1u:
      v1 = (void *)MEMORY[0x23B812F68](0xD000000000000016, 0x800000023757D9F0);
      v2 = CAFUILocalizedStringForKey(v1);
      goto LABEL_5;
    case 2u:
      v1 = (void *)MEMORY[0x23B812F68](0xD000000000000017, 0x800000023757DA10);
      v2 = CAFUILocalizedStringForKey(v1);
LABEL_5:
      v3 = v2;

      v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      return v4;
    case 3u:
      v5 = objc_msgSend(v0, sel_userVisibleLabel);
      if (!v5)
        return 0;
      v6 = v5;
      v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v8 = v7;

      v9 = HIBYTE(v8) & 0xF;
      if ((v8 & 0x2000000000000000) == 0)
        v9 = v4 & 0xFFFFFFFFFFFFLL;
      if (!v9)
      {
        swift_bridgeObjectRelease();
        return 0;
      }
      return v4;
    default:
      return 0;
  }
}

id CAFEqualizerObservable.valueRange.getter()
{
  return CAFEqualizerObservable.valueRange.getter(MEMORY[0x24BE10030], (SEL *)&selRef_valueRange);
}

void CAFEqualizer.centerValue.getter()
{
  void *v0;
  id v1;
  int v2;
  double v3;
  id v4;
  int v5;
  id v6;
  int v7;
  double v8;

  v1 = objc_msgSend(v0, sel_valueRange);
  v2 = objc_msgSend(v1, sel_maximumValue);

  v3 = (double)v2;
  v4 = objc_msgSend(v0, sel_valueRange);
  v5 = objc_msgSend(v4, sel_minimumValue);

  v6 = objc_msgSend(v0, sel_valueRange);
  v7 = objc_msgSend(v6, sel_stepValue);

  v8 = (v3 + (double)v5) * 0.5 - fmod((v3 + (double)v5) * 0.5, (double)v7);
  if ((~*(_QWORD *)&v8 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v8 <= -129.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v8 >= 128.0)
LABEL_7:
    __break(1u);
}

id CAFVolumeObservable.volumeRange.getter()
{
  return CAFEqualizerObservable.valueRange.getter(MEMORY[0x24BE0FFF8], (SEL *)&selRef_volumeRange);
}

id CAFEqualizerObservable.valueRange.getter(uint64_t (*a1)(void), SEL *a2)
{
  void *v3;
  id v4;

  v3 = (void *)a1();
  v4 = objc_msgSend(v3, *a2);

  return v4;
}

uint64_t static CAFUICellProtocol.reuseIdentifier.getter()
{
  objc_class *ObjCClassFromMetadata;
  NSString *v1;
  uint64_t v2;

  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  v1 = NSStringFromClass(ObjCClassFromMetadata);
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t CAFUIAutomakerSettingsSection.header.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CAFUIAutomakerSettingsSection.footer.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

void *CAFUIAutomakerSettingsSection.parentSetting.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 32);
  v2 = v1;
  return v1;
}

uint64_t CAFUIAutomakerSettingsSection.settings.getter()
{
  return swift_bridgeObjectRetain();
}

unint64_t one-time initialization function for cellsByIdentifiers()
{
  uint64_t inited;
  uint64_t v1;
  objc_class *ObjCClassFromMetadata;
  NSString *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  objc_class *v8;
  NSString *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  objc_class *v14;
  NSString *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Swift.AnyObject.Type)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23757AAB0;
  v1 = type metadata accessor for CAFUIAutomakerSettingCell(0);
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  v3 = NSStringFromClass(ObjCClassFromMetadata);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = v5;

  *(_QWORD *)(inited + 32) = v4;
  *(_QWORD *)(inited + 40) = v6;
  *(_QWORD *)(inited + 48) = v1;
  v7 = type metadata accessor for CAFUIProminentSettingCell();
  v8 = (objc_class *)swift_getObjCClassFromMetadata();
  v9 = NSStringFromClass(v8);
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v12 = v11;

  *(_QWORD *)(inited + 56) = v10;
  *(_QWORD *)(inited + 64) = v12;
  *(_QWORD *)(inited + 72) = v7;
  v13 = type metadata accessor for CAFUIListItemCell();
  v14 = (objc_class *)swift_getObjCClassFromMetadata();
  v15 = NSStringFromClass(v14);
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v18 = v17;

  *(_QWORD *)(inited + 80) = v16;
  *(_QWORD *)(inited + 88) = v18;
  *(_QWORD *)(inited + 96) = v13;
  result = specialized Dictionary.init(dictionaryLiteral:)(inited);
  static CAFUICollectionViewCells.cellsByIdentifiers = result;
  return result;
}

uint64_t CAFUITileDataSource.numSections.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t result;

  v1 = CAFUITileDataSource.firstSettingsSection.getter();
  v2 = *(_QWORD *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleSettingsSections) + 16);
  v3 = __OFADD__(v1, v2);
  result = v1 + v2;
  if (v3)
    __break(1u);
  return result;
}

uint64_t CAFUITileDataSource.prominentCategories.getter()
{
  return swift_bridgeObjectRetain();
}

void CAFUITileDataSource.listItems.didset(unint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  id v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSIndexSet *v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = type metadata accessor for IndexSet();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(void **)(v1 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_collectionView);
  if (v7)
  {
    if (a1 >> 62)
    {
      v18 = v7;
      swift_bridgeObjectRetain();
      v19 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v19)
        goto LABEL_14;
    }
    else
    {
      v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
      v9 = v7;
      if (!v8)
        goto LABEL_14;
    }
    v10 = (unint64_t *)(v1 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_listItems);
    swift_beginAccess();
    if (*v10 >> 62)
    {
      swift_bridgeObjectRetain();
      v20 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v20)
      {
LABEL_6:
        v11 = *v10;
        if (v11 >> 62)
        {
          swift_bridgeObjectRetain();
          v21 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v21)
          {
LABEL_8:
            v12 = *(_QWORD *)(v1 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleProminentSettings);
            if (!(v12 >> 62))
            {
              v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_10:
              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
              v14 = swift_allocObject();
              *(_OWORD *)(v14 + 16) = xmmword_237579480;
              *(_QWORD *)(v14 + 32) = v13 != 0;
              v22 = v14;
              lazy protocol witness table accessor for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], MEMORY[0x24BDCF468]);
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
              lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [Int] and conformance [A], &demangling cache variable for type metadata for [Int]);
              dispatch thunk of SetAlgebra.init<A>(_:)();
              IndexSet._bridgeToObjectiveC()(v15);
              v17 = v16;
              (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
              objc_msgSend(v7, sel_reloadSections_, v17);

LABEL_15:
              return;
            }
LABEL_19:
            swift_bridgeObjectRetain();
            v13 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            goto LABEL_10;
          }
        }
        else if (*(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          goto LABEL_8;
        }
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        goto LABEL_19;
      }
    }
    else if (*(_QWORD *)((*v10 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_6;
    }
LABEL_14:
    CAFUITileDataSource.reloadView()();
    goto LABEL_15;
  }
}

uint64_t CAFUITileDataSource.listItems.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t CAFUITileDataSource.listItems.setter(unint64_t a1)
{
  uint64_t v1;
  unint64_t *v3;
  unint64_t v4;

  v3 = (unint64_t *)(v1 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_listItems);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;
  CAFUITileDataSource.listItems.didset(v4);
  return swift_bridgeObjectRelease();
}

void (*CAFUITileDataSource.listItems.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_listItems;
  v3[4] = v1;
  v3[5] = v4;
  v5 = (_QWORD *)(v1 + v4);
  swift_beginAccess();
  v3[3] = *v5;
  swift_bridgeObjectRetain();
  return CAFUITileDataSource.listItems.modify;
}

void CAFUITileDataSource.listItems.modify(uint64_t a1, char a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = *(void **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  v5 = *(_QWORD *)(v4 + v3);
  *(_QWORD *)(v4 + v3) = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    CAFUITileDataSource.listItems.didset(v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    CAFUITileDataSource.listItems.didset(v5);
  }
  swift_bridgeObjectRelease();
  free(v2);
}

uint64_t CAFUITileDataSource.prominentSettings.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CAFUITileDataSource.viewSettingSet.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CAFUITileDataSource.settingsSections.getter()
{
  return swift_bridgeObjectRetain();
}

void CAFUITileDataSource.collectionView.didset()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  void *v4;
  uint64_t v5;
  objc_class *ObjCClassFromMetadata;
  id v7;
  NSString *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  objc_class *v13;
  id v14;
  NSString *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_collectionView);
  if (v1)
  {
    v2 = one-time initialization token for cellsByIdentifiers;
    v3 = v1;
    v4 = v3;
    if (v2 != -1)
      v3 = (id)swift_once();
    MEMORY[0x24BDAC7A8](v3);
    v5 = swift_bridgeObjectRetain();
    specialized Sequence.forEach(_:)(v5, partial apply for closure #1 in CAFUITileDataSource.collectionView.didset);
    swift_bridgeObjectRelease();
    type metadata accessor for CAFUICollectionHeaderView();
    ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
    v7 = (id)*MEMORY[0x24BEBE050];
    v8 = NSStringFromClass(ObjCClassFromMetadata);
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v11 = v10;

    v12 = (void *)MEMORY[0x23B812F68](v9, v11);
    swift_bridgeObjectRelease();
    objc_msgSend(v4, sel_registerClass_forSupplementaryViewOfKind_withReuseIdentifier_, ObjCClassFromMetadata, v7, v12);

    type metadata accessor for CAFUICollectionFooterView();
    v13 = (objc_class *)swift_getObjCClassFromMetadata();
    v14 = (id)*MEMORY[0x24BEBE048];
    v15 = NSStringFromClass(v13);
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v18 = v17;

    v19 = (void *)MEMORY[0x23B812F68](v16, v18);
    swift_bridgeObjectRelease();
    objc_msgSend(v4, sel_registerClass_forSupplementaryViewOfKind_withReuseIdentifier_, v13, v14, v19);

    objc_msgSend(v4, sel_setDataSource_, v0);
  }
}

void closure #1 in CAFUITileDataSource.collectionView.didset(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t ObjCClassFromMetadata;
  id v8;

  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v8 = (id)MEMORY[0x23B812F68](a1, a2);
  objc_msgSend(a4, sel_registerClass_forCellWithReuseIdentifier_, ObjCClassFromMetadata, v8);

}

uint64_t CAFUITileDataSource.__allocating_init(prominentCategories:listItems:settingsSections:settingsCache:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  objc_class *v4;
  id v9;

  v9 = objc_allocWithZone(v4);
  return CAFUITileDataSource.init(prominentCategories:listItems:settingsSections:settingsCache:)(a1, a2, a3, a4);
}

uint64_t CAFUITileDataSource.init(prominentCategories:listItems:settingsSections:settingsCache:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  int64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  char *v17;
  __int128 v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  id v27;
  void *v28;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  SEL *v34;
  uint64_t v35;
  id v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t result;
  uint64_t i;
  uint64_t j;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t k;
  uint64_t v49;
  id v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t m;
  id v55;
  void *v56;
  uint64_t v57;
  unint64_t *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  unint64_t v63;
  char *v64;
  unint64_t v65;
  id v66;
  _QWORD *v67;
  unint64_t v68;
  _QWORD *v69;
  unint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v80;
  id v82;
  objc_super v83;
  uint64_t v84;

  *(uint64_t *)((char *)v4 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_collectionView) = 0;
  v7 = *(_QWORD *)(a3 + 16);
  v8 = MEMORY[0x24BEE4AF8];
  if (v7)
  {
    v84 = MEMORY[0x24BEE4AF8];
    v9 = v4;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0);
    v10 = v84;
    v11 = (uint64_t *)(a3 + 72);
    do
    {
      v12 = *v11;
      v84 = v10;
      v13 = *(_QWORD *)(v10 + 16);
      v14 = *(_QWORD *)(v10 + 24);
      swift_bridgeObjectRetain();
      if (v13 >= v14 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v13 + 1, 1);
        v10 = v84;
      }
      *(_QWORD *)(v10 + 16) = v13 + 1;
      *(_QWORD *)(v10 + 8 * v13 + 32) = v12;
      v11 += 6;
      --v7;
    }
    while (v7);
    v4 = v77;
    v15 = a2;
    v8 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v15 = a2;
    v16 = v4;
    v10 = MEMORY[0x24BEE4AF8];
  }
  specialized Set.init<A>(_:)(v10);
  *(uint64_t *)((char *)v4 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_prominentCategories) = a1;
  v17 = (char *)v4 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_settingsCache;
  v18 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)v17 = *(_OWORD *)a4;
  *((_OWORD *)v17 + 1) = v18;
  *((_OWORD *)v17 + 2) = *(_OWORD *)(a4 + 32);
  *((_QWORD *)v17 + 6) = *(_QWORD *)(a4 + 48);
  *(uint64_t *)((char *)v4 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_listItems) = v15;
  v19 = (unint64_t)&demangling cache variable for type metadata for VStack<TupleView<(ModifiedContent<<<opaque return type of View.buttonRepeatBehavior(_:)>>.0, AccessibilityAttachmentModifier>?, SliderView, ModifiedContent<<<opaque return type of View.buttonRepeatBehavior(_:)>>.0, AccessibilityAttachmentModifier>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _BlendModeEffect>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, _PaddingLayout>)>>;
  *(uint64_t *)((char *)v4 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_settingsSections) = a3;
  v21 = v20;
  *(uint64_t *)((char *)v4 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleSettingsSections) = v8;
  *(uint64_t *)((char *)v4 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleProminentSettings) = v8;
  v22 = objc_allocWithZone((Class)type metadata accessor for CAFUIProminentAncestorObserver());
  swift_bridgeObjectRetain();
  outlined retain of CAFUISettingsCache(a4);
  swift_bridgeObjectRetain();
  v23 = objc_msgSend(v22, sel_init);
  *(uint64_t *)((char *)v4 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_prominentAncestorObserver) = (uint64_t)v23;
  *(uint64_t *)((char *)v4 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_viewSettingSet) = v21;
  v24 = *(_QWORD *)(a4 + 16);
  if (v24 >> 62)
    goto LABEL_33;
  v25 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v25)
  {
LABEL_36:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    outlined release of CAFUISettingsCache(a4);
    v34 = (SEL *)&unk_2508DF000;
    goto LABEL_37;
  }
  v84 = v8;
  swift_bridgeObjectRetain();
  do
  {
    v73 = v21;
    v75 = v24;
    v19 = 0;
    v26 = v24 & 0xC000000000000001;
    v21 = v24 & 0xFFFFFFFFFFFFFF8;
    v8 = v24 + 32;
    v15 = (unint64_t)&unk_2508DF000;
    while (1)
    {
      if (v26)
      {
        v27 = (id)MEMORY[0x23B813418](v19, v75);
      }
      else
      {
        if (v19 >= *(_QWORD *)(v21 + 16))
          goto LABEL_31;
        v27 = *(id *)(v8 + 8 * v19);
      }
      v28 = v27;
      if (__OFADD__(v19++, 1))
        goto LABEL_32;
      v30 = objc_msgSend(v27, sel_category);
      v31 = *(_QWORD *)(a1 + 16);
      if (v31)
      {
        if (*(unsigned __int8 *)(a1 + 32) == v30)
        {
LABEL_20:
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          v24 = *(_QWORD *)(v84 + 16);
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          v4 = &v84;
          specialized ContiguousArray._endMutation()();
          goto LABEL_13;
        }
        if (v31 != 1)
          break;
      }
LABEL_12:

LABEL_13:
      if (v19 == v25)
      {
        v24 = v84;
        v19 = 0x2567F7000;
        v4 = v77;
        v15 = a2;
        v21 = v73;
        goto LABEL_29;
      }
    }
    v32 = 33;
    while (1)
    {
      v33 = v32 - 31;
      if (__OFADD__(v32 - 32, 1))
        break;
      if (*(unsigned __int8 *)(a1 + v32) == v30)
        goto LABEL_20;
      ++v32;
      if (v33 == v31)
        goto LABEL_12;
    }
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v35 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v35)
      goto LABEL_36;
    v84 = v8;
    swift_bridgeObjectRetain();
    v25 = _CocoaArrayWrapper.endIndex.getter();
  }
  while (v25);
  v24 = v8;
LABEL_29:
  v34 = (SEL *)&unk_2508DF000;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined release of CAFUISettingsCache(a4);
LABEL_37:
  *(uint64_t *)((char *)v4 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_prominentSettings) = v24;

  v83.receiver = v4;
  v83.super_class = (Class)type metadata accessor for CAFUITileDataSource();
  v36 = objc_msgSendSuper2(&v83, v34[300]);
  v37 = swift_bridgeObjectRetain();
  v38 = specialized Set.union<A>(_:)(v37, v21);
  swift_bridgeObjectRelease();
  v39 = (char *)v36;
  specialized Sequence.forEach(_:)(v38, (uint64_t)v39, (SEL *)&selRef_registerObserver_);
  swift_bridgeObjectRelease();

  v40 = MEMORY[0x24BEE4AF8];
  v84 = MEMORY[0x24BEE4AF8];
  if (!(v15 >> 62))
  {
    v41 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v41)
      goto LABEL_39;
LABEL_56:
    swift_bridgeObjectRelease();
    goto LABEL_57;
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v41 = result;
  if (!result)
    goto LABEL_56;
LABEL_39:
  if (v41 < 1)
  {
    __break(1u);
LABEL_96:
    __break(1u);
LABEL_97:
    __break(1u);
    return result;
  }
  if ((v15 & 0xC000000000000001) != 0)
  {
    for (i = 0; i != v41; ++i)
    {
      MEMORY[0x23B813418](i, v15);
      type metadata accessor for CAFUIServiceListItem();
      if (swift_dynamicCastClass())
      {
        MEMORY[0x23B81301C]();
        if (*(_QWORD *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
    goto LABEL_56;
  }
  type metadata accessor for CAFUIServiceListItem();
  for (j = 0; j != v41; ++j)
  {
    if (swift_dynamicCastClass())
    {
      v45 = swift_retain();
      MEMORY[0x23B81301C](v45);
      if (*(_QWORD *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
  }
  swift_bridgeObjectRelease();
  v40 = MEMORY[0x24BEE4AF8];
LABEL_57:
  v46 = v84;
  swift_bridgeObjectRelease();
  v84 = v40;
  if (v46 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v47 = result;
    if (!result)
      goto LABEL_69;
LABEL_59:
    if (v47 >= 1)
    {
      for (k = 0; k != v47; ++k)
      {
        if ((v46 & 0xC000000000000001) != 0)
        {
          v49 = MEMORY[0x23B813418](k, v46);
        }
        else
        {
          v49 = *(_QWORD *)(v46 + 8 * k + 32);
          swift_retain();
        }
        v50 = *(id *)(v49 + 112);
        v51 = swift_release();
        MEMORY[0x23B81301C](v51);
        if (*(_QWORD *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      swift_bridgeObjectRelease();
      v52 = v84;
      goto LABEL_70;
    }
    goto LABEL_96;
  }
  v47 = *(_QWORD *)((v46 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain();
  if (v47)
    goto LABEL_59;
LABEL_69:
  swift_bridgeObjectRelease();
  v52 = MEMORY[0x24BEE4AF8];
LABEL_70:
  swift_bridgeObjectRelease();
  if (v52 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v53 = result;
    if (!result)
      goto LABEL_79;
LABEL_72:
    if (v53 >= 1)
    {
      for (m = 0; m != v53; ++m)
      {
        if ((v52 & 0xC000000000000001) != 0)
          v55 = (id)MEMORY[0x23B813418](m, v52);
        else
          v55 = *(id *)(v52 + 8 * m + 32);
        v56 = v55;
        objc_msgSend(v55, sel_registerObserver_, v39);

      }
      goto LABEL_79;
    }
    goto LABEL_97;
  }
  v53 = *(_QWORD *)((v52 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain();
  if (v53)
    goto LABEL_72;
LABEL_79:
  swift_bridgeObjectRelease_n();
  *(_QWORD *)(*(_QWORD *)&v39[OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_prominentAncestorObserver]
            + OBJC_IVAR____TtC5CAFUIP33_0E4D121C5C9C3A69D68EDC06FF2740D730CAFUIProminentAncestorObserver_delegate
            + 8) = &protocol witness table for CAFUITileDataSource;
  swift_unknownObjectWeakAssign();
  CAFUITileDataSource.refreshProminentSection(reloadSection:)(0);
  v74 = *(_QWORD *)&v39[*(_QWORD *)(v19 + 2104)];
  v57 = *(_QWORD *)(v74 + 16);
  if (v57)
  {
    swift_bridgeObjectRetain_n();
    v58 = (unint64_t *)(v74 + 72);
    v59 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v76 = v39;
    while (1)
    {
      v60 = *(v58 - 4);
      v61 = *(v58 - 2);
      v78 = *(v58 - 3);
      v80 = *(v58 - 5);
      v62 = (void *)*(v58 - 1);
      v63 = *v58;
      v82 = v62;
      swift_bridgeObjectRetain_n();
      v64 = v39;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v65 = specialized _ArrayProtocol.filter(_:)(v63, (uint64_t)v64);
      swift_bridgeObjectRelease();

      if (v65 >> 62)
      {
        swift_bridgeObjectRetain();
        v72 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v72)
        {
LABEL_85:
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v66 = v82;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v59[2] + 1, 1, v59);
          v67 = v59;
          v68 = v59[2];
          v69 = v67;
          v70 = v67[3];
          if (v68 >= v70 >> 1)
            v69 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v70 > 1), v68 + 1, 1, v69);
          v69[2] = v68 + 1;
          v71 = &v69[6 * v68];
          v59 = v69;
          v71[4] = v80;
          v71[5] = v60;
          v71[6] = v78;
          v71[7] = v61;
          v71[8] = v62;
          v71[9] = v65;
          goto LABEL_82;
        }
      }
      else if (*(_QWORD *)((v65 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_85;
      }
      swift_bridgeObjectRelease();
LABEL_82:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      v58 += 6;
      --v57;
      v39 = v76;
      if (!v57)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_94;
      }
    }
  }
  v59 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_94:
  *(_QWORD *)&v39[OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleSettingsSections] = v59;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  CAFUITileDataSource.reloadView()();

  swift_bridgeObjectRelease();
  return (uint64_t)v39;
}

void specialized Set.init<A>(_:)(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  id v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  id v9[2];

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
  lazy protocol witness table accessor for type CAFAutomakerSetting and conformance NSObject();
  v2 = 0;
  v9[1] = (id)Set.init(minimumCapacity:)();
LABEL_12:
  while (1)
  {
    v6 = *(_QWORD *)(a1 + 16);
    if (v2 == v6)
      break;
    if (v2 >= v6)
      goto LABEL_19;
    v7 = *(_QWORD *)(a1 + 32 + 8 * v2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v8 = v7;
    ++v2;
    if (v7)
    {
      v3 = 0;
      if (v7 >> 62)
        goto LABEL_9;
      while (v3 != *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        while (1)
        {
          if ((v8 & 0xC000000000000001) != 0)
          {
            v4 = (id)MEMORY[0x23B813418](v3, v8);
          }
          else
          {
            if (v3 >= *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
            {
              __break(1u);
LABEL_18:
              __break(1u);
LABEL_19:
              __break(1u);
              return;
            }
            v4 = *(id *)(v8 + 8 * v3 + 32);
          }
          if (__OFADD__(v3, 1))
            goto LABEL_18;
          specialized Set._Variant.insert(_:)(v9, v4);

          ++v3;
          if (!(v8 >> 62))
            break;
LABEL_9:
          swift_bridgeObjectRetain();
          v5 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v3 == v5)
            goto LABEL_12;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

uint64_t CAFUITileDataSource.firstSettingsSection.getter()
{
  uint64_t v0;
  unint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = (unint64_t *)(v0 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_listItems);
  swift_beginAccess();
  v2 = *v1;
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *(_QWORD *)(v0 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleProminentSettings);
  v5 = v4 >> 62;
  if (v3)
  {
    if (v5)
    {
      swift_bridgeObjectRetain();
      v6 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v6 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    if (v6)
      return 2;
    else
      return 1;
  }
  else
  {
    if (v5)
    {
      swift_bridgeObjectRetain();
      v8 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v8 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    return v8 != 0;
  }
}

uint64_t CAFUITileDataSource.reloadView()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char *v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD aBlock[6];

  v1 = type metadata accessor for DispatchWorkItemFlags();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS();
  v6 = *(_QWORD *)(v5 - 8);
  result = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(void **)(v0 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_collectionView);
  if (v10)
  {
    v17 = result;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    v11 = v10;
    v12 = static OS_dispatch_queue.main.getter();
    v16 = v2;
    v13 = (void *)v12;
    v14 = swift_allocObject();
    swift_unknownObjectWeakInit();
    aBlock[4] = partial apply for closure #1 in CAFUITileDataSource.reloadView();
    aBlock[5] = v14;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_21;
    v15 = _Block_copy(aBlock);
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock[0] = MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x23B813184](0, v9, v4, v15);
    _Block_release(v15);

    (*(void (**)(char *, uint64_t))(v16 + 8))(v4, v1);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v17);
  }
  return result;
}

uint64_t closure #1 in CAFUITileDataSource.reloadView()(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  _QWORD aBlock[6];

  v1 = a1 + 16;
  swift_beginAccess();
  result = MEMORY[0x23B813CDC](v1);
  if (result)
  {
    v3 = (void *)result;
    v4 = objc_opt_self();
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = partial apply for closure #1 in closure #1 in CAFUITileDataSource.reloadView();
    *(_QWORD *)(v6 + 24) = v5;
    aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
    aBlock[5] = v6;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_31;
    v7 = _Block_copy(aBlock);
    v8 = v3;
    swift_retain();
    swift_release();
    objc_msgSend((id)v4, sel_performWithoutAnimation_, v7);

    _Block_release(v7);
    LOBYTE(v4) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    result = swift_release();
    if ((v4 & 1) != 0)
      __break(1u);
  }
  return result;
}

uint64_t closure #1 in closure #1 in CAFUITileDataSource.reloadView()(void *a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id (*v12)(int);
  uint64_t v13;

  objc_msgSend(a1, sel_reloadData);
  v12 = (id (*)(int))closure #1 in CAFUINumericInputView.init(configuration:);
  v13 = 0;
  v2 = MEMORY[0x24BDAC760];
  v8 = MEMORY[0x24BDAC760];
  v9 = 1107296256;
  v10 = thunk for @escaping @callee_guaranteed () -> ();
  v11 = &block_descriptor_34;
  v3 = _Block_copy(&v8);
  swift_release();
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  v12 = partial apply for closure #2 in closure #1 in closure #1 in CAFUITileDataSource.reloadView();
  v13 = v4;
  v8 = v2;
  v9 = 1107296256;
  v10 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  v11 = &block_descriptor_40;
  v5 = _Block_copy(&v8);
  v6 = a1;
  swift_release();
  objc_msgSend(v6, sel_performBatchUpdates_completion_, v3, v5);
  _Block_release(v5);
  _Block_release(v3);
  result = swift_isEscapingClosureAtFileLocation();
  if ((result & 1) != 0)
    __break(1u);
  return result;
}

id closure #2 in closure #1 in closure #1 in CAFUITileDataSource.reloadView()(int a1, id a2)
{
  id v3;

  v3 = objc_msgSend(a2, sel_collectionViewLayout);
  objc_msgSend(v3, sel_invalidateLayout);

  objc_msgSend(a2, sel_setNeedsLayout);
  return objc_msgSend(a2, sel_layoutIfNeeded);
}

Swift::Int __swiftcall CAFUITileDataSource.numberOfSections(in:)(UICollectionView *in)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  Swift::Int result;

  v2 = CAFUITileDataSource.firstSettingsSection.getter();
  v3 = *(_QWORD *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleSettingsSections) + 16);
  v4 = __OFADD__(v2, v3);
  result = v2 + v3;
  if (v4)
    __break(1u);
  return result;
}

Swift::Int __swiftcall CAFUITileDataSource.collectionView(_:numberOfItemsInSection:)(UICollectionView *_, Swift::Int numberOfItemsInSection)
{
  return specialized CAFUITileDataSource.collectionView(_:numberOfItemsInSection:)(numberOfItemsInSection);
}

char *CAFUITileDataSource.collectionView(_:cellForItemAt:)(char *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  objc_class *ObjCClassFromMetadata;
  _OWORD *v23;
  NSString *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  Class isa;
  uint64_t v30;
  _QWORD *v31;
  _OWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  id v39;
  unint64_t v40;
  _OWORD *v41;
  uint64_t v42;
  objc_class *v43;
  NSString *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  Class v49;
  uint64_t v50;
  __int128 v51;
  unint64_t v52;
  uint64_t v53;
  BOOL v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  objc_class *v62;
  _OWORD *v63;
  NSString *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  Class v69;
  uint64_t v70;
  _BYTE *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t ObjectType;
  void (*v75)(char *, uint64_t, uint64_t);
  BOOL *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(char *, uint64_t, uint64_t);
  objc_class *v82;
  NSString *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  Class v88;
  uint64_t v89;
  uint64_t *v90;
  Swift::String v91;
  _OWORD v93[3];
  uint64_t v94;

  v5 = v2;
  v8 = type metadata accessor for IndexPath();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (unint64_t)v93 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0) + 64;
  if ((CAFUITileDataSource.validate(indexPath:)() & 1) == 0)
    goto LABEL_91;
  v12 = IndexPath.section.getter();
  v13 = OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleProminentSettings;
  v8 = *(_QWORD *)(v5 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleProminentSettings);
  if (v8 >> 62)
  {
    swift_bridgeObjectRetain();
    v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v11)
    v14 = v12 == 0;
  else
    v14 = 0;
  if (v14)
  {
    v16 = IndexPath.item.getter();
    v15 = v16;
    v5 = *(_QWORD *)(v5 + v13);
    if ((v5 & 0xC000000000000001) == 0)
    {
      if ((v16 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v16 < *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        v17 = *(_OWORD **)(v5 + 8 * v16 + 32);
        swift_getObjectType();
        v18 = swift_conformsToProtocol2();
        if (v18)
          v19 = v18;
        else
          v19 = 0;
        if (v18)
          v20 = v17;
        else
          v20 = 0;
        v21 = v17;
        if (!v20)
          goto LABEL_93;
        v17 = v21;
LABEL_25:
        type metadata accessor for CAFUIProminentSettingCell();
        ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
        v23 = v17;
        v24 = NSStringFromClass(ObjCClassFromMetadata);
        v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v27 = v26;

        v28 = (void *)MEMORY[0x23B812F68](v25, v27);
        swift_bridgeObjectRelease();
        isa = IndexPath._bridgeToObjectiveC()().super.isa;
        v17 = objc_msgSend(a1, sel_dequeueReusableCellWithReuseIdentifier_forIndexPath_, v28, isa);

        v30 = swift_dynamicCastClass();
        if (!v30)
          goto LABEL_94;
        a1 = (char *)v30;
        v31 = (_QWORD *)(v30 + OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_representable);
        swift_beginAccess();
        *v31 = v20;
        v31[1] = v19;
        v32 = v23;
        swift_unknownObjectRelease();
        if (*v31)
          CAFUIProminentSettingCell.configureCell()();
        goto LABEL_74;
      }
      __break(1u);
      goto LABEL_41;
    }
    swift_bridgeObjectRetain();
    v17 = (_OWORD *)MEMORY[0x23B813418](v15, v5);
    swift_bridgeObjectRelease();
    swift_getObjectType();
    v34 = swift_conformsToProtocol2();
    if (v34)
      v19 = v34;
    else
      v19 = 0;
    if (v34)
      v20 = v17;
    else
      v20 = 0;
    if (!v20)
      goto LABEL_93;
    goto LABEL_25;
  }
  v15 = IndexPath.section.getter();
  v8 = v5 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_listItems;
  swift_beginAccess();
  if (*(_QWORD *)v8 >> 62)
  {
    swift_bridgeObjectRetain();
    v33 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v33)
      goto LABEL_43;
  }
  else if (!*(_QWORD *)((*(_QWORD *)v8 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_43;
  }
  v11 = *(_QWORD *)(v5 + v13);
  if (!(v11 >> 62))
  {
    v9 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v9)
      goto LABEL_12;
    goto LABEL_42;
  }
LABEL_41:
  swift_bridgeObjectRetain();
  v9 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v9)
  {
LABEL_12:
    if (v15 == 1)
      goto LABEL_62;
    goto LABEL_43;
  }
LABEL_42:
  if (!v15)
  {
LABEL_62:
    v55 = IndexPath.item.getter();
    v56 = v55;
    v57 = *(_QWORD *)v8;
    if ((*(_QWORD *)v8 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      v58 = MEMORY[0x23B813418](v56, v57);
      swift_bridgeObjectRelease();
      type metadata accessor for CAFUIServiceListItem();
      v59 = swift_dynamicCastClass();
      if (v59)
      {
LABEL_66:
        v17 = *(_OWORD **)(v59 + 112);
        objc_opt_self();
        v60 = swift_dynamicCastObjCClass();
        if (!v60)
          goto LABEL_93;
        v61 = v60;
        type metadata accessor for CAFUIAutomakerSettingCell(0);
        v62 = (objc_class *)swift_getObjCClassFromMetadata();
        swift_retain();
        v63 = v17;
        v64 = NSStringFromClass(v62);
        v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v67 = v66;

        v68 = (void *)MEMORY[0x23B812F68](v65, v67);
        swift_bridgeObjectRelease();
        v69 = IndexPath._bridgeToObjectiveC()().super.isa;
        v17 = objc_msgSend(a1, sel_dequeueReusableCellWithReuseIdentifier_forIndexPath_, v68, v69);

        v70 = swift_dynamicCastClass();
        if (v70)
        {
          a1 = (char *)v70;
          v71 = (_BYTE *)(v70 + OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_isParentCell);
          swift_beginAccess();
          *v71 = 0;
          v72 = (uint64_t *)&a1[OBJC_IVAR____TtC5CAFUI25CAFUIAutomakerSettingCell_representable];
          swift_beginAccess();
          *v72 = v61;
          v72[1] = (uint64_t)&protocol witness table for CAFVolume;
          v32 = v63;
          swift_unknownObjectRetain_n();
          swift_unknownObjectRelease();
          if (*v72)
          {
            v73 = v72[1];
            ObjectType = swift_getObjectType();
            v75 = *(void (**)(char *, uint64_t, uint64_t))(v73 + 64);
            swift_unknownObjectRetain();
            v75(a1, ObjectType, v73);
            swift_release();

            swift_unknownObjectRelease();
          }
          else
          {
            *v71 = 0;
            swift_release();

          }
          swift_release();
          goto LABEL_75;
        }
        while (1)
        {
LABEL_94:

LABEL_93:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
        }
      }
LABEL_87:
      type metadata accessor for CAFUIListItemCell();
      v82 = (objc_class *)swift_getObjCClassFromMetadata();
      v83 = NSStringFromClass(v82);
      v84 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v86 = v85;

      v87 = (void *)MEMORY[0x23B812F68](v84, v86);
      swift_bridgeObjectRelease();
      v88 = IndexPath._bridgeToObjectiveC()().super.isa;
      v17 = objc_msgSend(a1, sel_dequeueReusableCellWithReuseIdentifier_forIndexPath_, v87, v88);

      v89 = swift_dynamicCastClass();
      if (v89)
      {
        a1 = (char *)v89;
        v90 = (uint64_t *)(v89 + OBJC_IVAR____TtC5CAFUI17CAFUIListItemCell_item);
        swift_beginAccess();
        *v90 = v58;
        swift_retain_n();
        swift_release();
        CAFUIListItemCell.item.didset();
        swift_release_n();
        return a1;
      }
      goto LABEL_94;
    }
    if ((v55 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v55 < *(_QWORD *)((v57 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v58 = *(_QWORD *)(v57 + 8 * v55 + 32);
      type metadata accessor for CAFUIServiceListItem();
      v59 = swift_dynamicCastClass();
      swift_retain();
      if (v59)
        goto LABEL_66;
      goto LABEL_87;
    }
    __break(1u);
LABEL_91:
    (*(void (**)(unint64_t, uint64_t, unint64_t))(v9 + 16))(v11, a2, v8);
    *(_QWORD *)&v93[0] = 0;
    *((_QWORD *)&v93[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v93[0] = 0xD000000000000013;
    *((_QWORD *)&v93[0] + 1) = 0x800000023757DA60;
    lazy protocol witness table accessor for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey((unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF678], MEMORY[0x24BDCF6B8]);
    v91._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    v17 = v93;
    String.append(_:)(v91);
    swift_bridgeObjectRelease();
    goto LABEL_93;
  }
LABEL_43:
  v35 = IndexPath.section.getter();
  v36 = CAFUITileDataSource.firstSettingsSection.getter();
  v37 = v35 - v36;
  if (__OFSUB__(v35, v36))
  {
    __break(1u);
    goto LABEL_80;
  }
  if ((v37 & 0x8000000000000000) != 0)
  {
LABEL_80:
    __break(1u);
    goto LABEL_81;
  }
  v38 = *(_QWORD *)(v5 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleSettingsSections);
  if (v37 >= *(_QWORD *)(v38 + 16))
  {
LABEL_81:
    __break(1u);
    goto LABEL_82;
  }
  v39 = *(id *)(v38 + 48 * v37 + 72);
  swift_bridgeObjectRetain();
  v40 = IndexPath.item.getter();
  if (((unint64_t)v39 & 0xC000000000000001) == 0)
  {
    if ((v40 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v40 < *(_QWORD *)(((unint64_t)v39 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v41 = *((id *)v39 + v40 + 4);
      goto LABEL_50;
    }
    __break(1u);
    goto LABEL_85;
  }
LABEL_82:
  v41 = (_OWORD *)MEMORY[0x23B813418]();
LABEL_50:
  v17 = v41;
  swift_bridgeObjectRelease();
  swift_getObjectType();
  v42 = swift_conformsToProtocol2();
  if (v42)
    v3 = v42;
  else
    v3 = 0;
  if (v42)
    v4 = v17;
  else
    v4 = 0;
  if (!v4)
    goto LABEL_93;
  type metadata accessor for CAFUIAutomakerSettingCell(0);
  v43 = (objc_class *)swift_getObjCClassFromMetadata();
  v39 = v17;
  v44 = NSStringFromClass(v43);
  v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v47 = v46;

  v48 = (void *)MEMORY[0x23B812F68](v45, v47);
  swift_bridgeObjectRelease();
  v49 = IndexPath._bridgeToObjectiveC()().super.isa;
  v17 = objc_msgSend(a1, sel_dequeueReusableCellWithReuseIdentifier_forIndexPath_, v48, v49);

  v50 = swift_dynamicCastClass();
  if (!v50)
    goto LABEL_94;
  a1 = (char *)v50;
  objc_opt_self();
  if (swift_dynamicCastObjCClass())
  {
    v51 = *(_OWORD *)(v5 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_settingsCache + 16);
    v93[0] = *(_OWORD *)(v5 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_settingsCache);
    v93[1] = v51;
    v93[2] = *(_OWORD *)(v5 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_settingsCache + 32);
    v94 = *(_QWORD *)(v5 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_settingsCache + 48);
    v52 = CAFUISettingsCache.visibleChildren(of:)(v39);
    if (!(v52 >> 62))
    {
      v53 = *(_QWORD *)((v52 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_61:
      swift_bridgeObjectRelease();
      v54 = v53 != 0;
      goto LABEL_71;
    }
LABEL_85:
    v53 = _CocoaArrayWrapper.endIndex.getter();
    goto LABEL_61;
  }
  v54 = 0;
LABEL_71:
  v76 = (BOOL *)&a1[OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_isParentCell];
  swift_beginAccess();
  *v76 = v54;
  v77 = &a1[OBJC_IVAR____TtC5CAFUI25CAFUIAutomakerSettingCell_representable];
  swift_beginAccess();
  *(_QWORD *)v77 = v4;
  *((_QWORD *)v77 + 1) = v3;
  v32 = v39;
  swift_unknownObjectRelease();
  if (!*(_QWORD *)v77)
  {
    *v76 = 0;

LABEL_74:
    goto LABEL_75;
  }
  v78 = *((_QWORD *)v77 + 1);
  v79 = swift_getObjectType();
  v80 = *(void (**)(char *, uint64_t, uint64_t))(v78 + 64);
  swift_unknownObjectRetain();
  v80(a1, v79, v78);

  swift_unknownObjectRelease();
LABEL_75:

  return a1;
}

uint64_t CAFUITileDataSource.collectionView(_:viewForSupplementaryElementOfKind:at:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  void (**v11)(_QWORD, _QWORD, _QWORD);
  uint64_t v12;
  char *v13;
  void *v14;
  char v16;
  void *v17;
  char v19;
  objc_class *ObjCClassFromMetadata;
  NSString *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Class isa;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  void *v36;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String v39;
  objc_class *v40;
  NSString *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  Class v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  void *v54;
  uint64_t v55;
  void *v56;
  uint64_t result;
  Swift::String v58;
  Swift::String v59;
  Swift::String v60;
  unint64_t v61;
  unint64_t v62;

  v5 = v4;
  v10 = type metadata accessor for IndexPath();
  v11 = *(void (***)(_QWORD, _QWORD, _QWORD))(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((CAFUITileDataSource.validate(indexPath:)() & 1) == 0)
    goto LABEL_36;
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == a2 && v14 == a3)
  {
    swift_bridgeObjectRelease();
LABEL_14:
    v13 = (char *)MEMORY[0x23B812F68](a2, a3);
    v10 = type metadata accessor for CAFUICollectionHeaderView();
    ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
    v21 = NSStringFromClass(ObjCClassFromMetadata);
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v24 = v23;

    v11 = (void (**)(_QWORD, _QWORD, _QWORD))MEMORY[0x23B812F68](v22, v24);
    swift_bridgeObjectRelease();
    isa = IndexPath._bridgeToObjectiveC()().super.isa;
    v26 = objc_msgSend(a1, sel_dequeueReusableSupplementaryViewOfKind_withReuseIdentifier_forIndexPath_, v13, v11, isa);

    v27 = swift_dynamicCastClass();
    if (!v27)
      goto LABEL_37;
    v28 = v27;
    v29 = IndexPath.section.getter();
    v30 = CAFUITileDataSource.firstSettingsSection.getter();
    v31 = v29 - v30;
    if (__OFSUB__(v29, v30))
    {
      __break(1u);
    }
    else if ((v31 & 0x8000000000000000) == 0)
    {
      v32 = *(_QWORD *)(v5 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleSettingsSections);
      if (v31 < *(_QWORD *)(v32 + 16))
      {
        v33 = v32 + 48 * v31;
        v34 = *(_QWORD *)(v33 + 40);
        v35 = (_QWORD *)(v28 + OBJC_IVAR____TtC5CAFUI25CAFUICollectionHeaderView_title);
        *v35 = *(_QWORD *)(v33 + 32);
        v35[1] = v34;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v36 = *(void **)(v28 + OBJC_IVAR____TtC5CAFUI25CAFUICollectionHeaderView_titleLabel);
        if (v35[1])
        {
          v39 = String.uppercased()();
          object = v39._object;
          countAndFlagsBits = v39._countAndFlagsBits;
LABEL_27:
          v56 = (void *)MEMORY[0x23B812F68](countAndFlagsBits, object);
          swift_bridgeObjectRelease();
LABEL_29:
          objc_msgSend(v36, sel_setText_, v56);

          return v28;
        }
LABEL_28:
        v56 = 0;
        goto LABEL_29;
      }
      goto LABEL_32;
    }
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v16 & 1) != 0)
    goto LABEL_14;
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == a2 && v17 == a3)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v19 & 1) == 0)
      goto LABEL_38;
  }
  v13 = (char *)MEMORY[0x23B812F68](a2, a3);
  v10 = type metadata accessor for CAFUICollectionFooterView();
  v40 = (objc_class *)swift_getObjCClassFromMetadata();
  v41 = NSStringFromClass(v40);
  v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v44 = v43;

  v11 = (void (**)(_QWORD, _QWORD, _QWORD))MEMORY[0x23B812F68](v42, v44);
  swift_bridgeObjectRelease();
  v45 = IndexPath._bridgeToObjectiveC()().super.isa;
  v26 = objc_msgSend(a1, sel_dequeueReusableSupplementaryViewOfKind_withReuseIdentifier_forIndexPath_, v13, v11, v45);

  v46 = swift_dynamicCastClass();
  if (!v46)
  {
LABEL_37:

LABEL_38:
    v61 = 0;
    v62 = 0xE000000000000000;
    _StringGuts.grow(_:)(49);
    swift_bridgeObjectRelease();
    v61 = 0xD000000000000023;
    v62 = 0x800000023757DBA0;
    v59._countAndFlagsBits = a2;
    v59._object = a3;
    String.append(_:)(v59);
    v60._countAndFlagsBits = 0x6E6B6E7520736920;
    v60._object = (void *)0xEC0000002E6E776FLL;
    String.append(_:)(v60);
    goto LABEL_39;
  }
  v28 = v46;
  v47 = IndexPath.section.getter();
  v48 = CAFUITileDataSource.firstSettingsSection.getter();
  v49 = v47 - v48;
  if (__OFSUB__(v47, v48))
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if ((v49 & 0x8000000000000000) == 0)
  {
    v50 = *(_QWORD *)(v5 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleSettingsSections);
    if (v49 < *(_QWORD *)(v50 + 16))
    {
      v51 = v50 + 48 * v49;
      v52 = *(_QWORD *)(v51 + 56);
      v53 = (uint64_t *)(v28 + OBJC_IVAR____TtC5CAFUI25CAFUICollectionFooterView_title);
      *v53 = *(_QWORD *)(v51 + 48);
      v53[1] = v52;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v36 = *(void **)(v28 + OBJC_IVAR____TtC5CAFUI25CAFUICollectionFooterView_titleLabel);
      v54 = (void *)v53[1];
      if (v54)
      {
        v55 = *v53;
        swift_bridgeObjectRetain();
        countAndFlagsBits = v55;
        object = v54;
        goto LABEL_27;
      }
      goto LABEL_28;
    }
    goto LABEL_35;
  }
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  ((void (**)(char *, uint64_t, uint64_t))v11)[2](v13, a4, v10);
  v61 = 0;
  v62 = 0xE000000000000000;
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  v61 = 0xD000000000000013;
  v62 = 0x800000023757DA60;
  lazy protocol witness table accessor for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey((unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF678], MEMORY[0x24BDCF6B8]);
  v58._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v58);
  swift_bridgeObjectRelease();
LABEL_39:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t CAFUITileDataSource.limitableIndexPaths.getter()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  id v7;
  SEL *v8;
  id v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t i;
  id v13;
  void *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int isUniquelyReferenced_nonNull_native;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  id v41;
  uint64_t result;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;

  v1 = v0;
  v2 = MEMORY[0x24BEE4AF8];
  v53 = MEMORY[0x24BEE4AF8];
  v3 = *(void **)(v1 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_collectionView);
  if (!v3)
    return v2;
  v4 = OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleProminentSettings;
  v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleProminentSettings);
  v43 = *(id *)(v1 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_collectionView);
  if (!(v5 >> 62))
  {
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    v7 = v3;
    v8 = (SEL *)&unk_2508DF000;
    if (!v6)
      goto LABEL_19;
LABEL_4:
    v9 = objc_msgSend(v43, sel_numberOfItemsInSection_, 0);
    v10 = *(_QWORD *)(v1 + v4);
    if (v10 >> 62)
    {
      swift_bridgeObjectRetain();
      v11 = _CocoaArrayWrapper.endIndex.getter();
      if (v11)
        goto LABEL_6;
    }
    else
    {
      v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v11)
      {
LABEL_6:
        if (v11 < 1)
          goto LABEL_51;
        for (i = 0; i != v11; ++i)
        {
          if ((v10 & 0xC000000000000001) != 0)
            v13 = (id)MEMORY[0x23B813418](i, v10);
          else
            v13 = *(id *)(v10 + 8 * i + 32);
          v14 = v13;
          if (i < (uint64_t)v9 && (objc_msgSend(v13, v8[448]) & 1) != 0)
          {
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<IndexPath>);
            type metadata accessor for IndexPath();
            v15 = swift_allocObject();
            *(_OWORD *)(v15 + 16) = xmmword_237579480;
            v8 = (SEL *)&unk_2508DF000;
            MEMORY[0x23B812638](i, 0);
            specialized Array.append<A>(contentsOf:)(v15);
          }

        }
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  v16 = v3;
  swift_bridgeObjectRetain();
  v17 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v8 = (SEL *)&unk_2508DF000;
  if (v17)
    goto LABEL_4;
LABEL_19:
  v44 = CAFUITileDataSource.firstSettingsSection.getter();
  v18 = *(_QWORD *)(v1 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleSettingsSections);
  v47 = *(_QWORD *)(v18 + 16);
  if (v47)
  {
    v46 = v18 + 32;
    swift_bridgeObjectRetain();
    v19 = 0;
    v2 = v53;
    v45 = v18;
    do
    {
      if (v19 >= *(_QWORD *)(v18 + 16))
        goto LABEL_49;
      v20 = v46 + 48 * v19;
      v21 = *(void **)(v20 + 32);
      v22 = *(_QWORD *)(v20 + 40);
      v52 = v22;
      if (v22 >> 62)
      {
        v41 = v21;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v23 = _CocoaArrayWrapper.endIndex.getter();
      }
      else
      {
        v23 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
        v24 = v21;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      v48 = v21;
      v49 = v19;
      if (v23)
      {
        if (v23 < 1)
          goto LABEL_50;
        v25 = 0;
        v26 = v22 & 0xC000000000000001;
        v50 = v22 & 0xC000000000000001;
        v51 = v19 + v44;
        do
        {
          if (v26)
            v27 = (id)MEMORY[0x23B813418](v25, v22);
          else
            v27 = *(id *)(v22 + 8 * v25 + 32);
          v28 = v27;
          if ((objc_msgSend(v27, v8[448]) & 1) != 0)
          {
            v29 = v23;
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<IndexPath>);
            v30 = *(_QWORD *)(type metadata accessor for IndexPath() - 8);
            v31 = *(_QWORD *)(v30 + 72);
            v32 = (*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
            v33 = swift_allocObject();
            *(_OWORD *)(v33 + 16) = xmmword_237579480;
            v34 = v33 + v32;
            MEMORY[0x23B812638](v25, v51);
            v35 = *(_QWORD *)(v2 + 16);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            if (!isUniquelyReferenced_nonNull_native || (v37 = *(_QWORD *)(v2 + 24) >> 1, v37 <= v35))
            {
              v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v35 + 1, 1, v2);
              v37 = *(_QWORD *)(v2 + 24) >> 1;
            }
            v38 = *(_QWORD *)(v2 + 16);
            if (v37 <= v38)
            {
              __break(1u);
LABEL_49:
              __break(1u);
LABEL_50:
              __break(1u);
LABEL_51:
              __break(1u);
            }
            v39 = v2 + v32 + v38 * v31;
            if (v34 < v39 + v31 && v39 < v34 + v31)
            {
              result = _fatalErrorMessage(_:_:file:line:flags:)();
              __break(1u);
              return result;
            }
            v23 = v29;
            swift_arrayInitWithCopy();
            ++*(_QWORD *)(v2 + 16);

            swift_bridgeObjectRelease();
            v8 = (SEL *)&unk_2508DF000;
            v22 = v52;
            v26 = v50;
          }
          else
          {

          }
          ++v25;
        }
        while (v23 != v25);
      }
      v19 = v49 + 1;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();

      v18 = v45;
    }
    while (v49 + 1 != v47);

    swift_bridgeObjectRelease();
  }
  else
  {

    return v53;
  }
  return v2;
}

unint64_t CAFUITileDataSource.indexPaths(for:)(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t ObjectType;

  ObjectType = swift_getObjectType();
  return specialized CAFUITileDataSource.indexPaths(for:)(a1, v2, ObjectType, a2);
}

uint64_t CAFUITileDataSource.validate(indexPath:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  Swift::String v15;
  Swift::String v16;
  os_log_type_t v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  Swift::String v29;
  Swift::String v30;
  os_log_type_t v31;
  uint64_t v32;

  v2 = v0;
  v3 = (void *)IndexPath.section.getter();
  v4 = CAFUITileDataSource.firstSettingsSection.getter();
  v5 = OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleSettingsSections;
  v6 = *(_QWORD *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleSettingsSections) + 16);
  v7 = __OFADD__(v4, v6);
  v8 = v4 + v6;
  if (v7)
  {
    __break(1u);
LABEL_16:
    v19 = v3;
    swift_bridgeObjectRetain();
    v20 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v20)
      goto LABEL_7;
    goto LABEL_6;
  }
  if ((uint64_t)v3 >= v8)
  {
    _StringGuts.grow(_:)(37);
    swift_bridgeObjectRelease();
    type metadata accessor for IndexPath();
    lazy protocol witness table accessor for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey((unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF678], MEMORY[0x24BDCF6B8]);
    v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._countAndFlagsBits = 0xD000000000000018;
    v16._object = (void *)0x800000023757DBD0;
    String.append(_:)(v16);
    v17 = static os_log_type_t.info.getter();
    specialized static CAFUILogger.log(_:message:function:file:line:)(v17, 0x7461507865646E69, 0xEB00000000203A68, 0xD000000000000014, 0x800000023757DBF0);
    swift_bridgeObjectRelease();
    return 0;
  }
  v3 = *(void **)(v0 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_collectionView);
  if (!v3)
    return 0;
  v1 = OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleProminentSettings;
  v9 = *(_QWORD *)(v0 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleProminentSettings);
  if (v9 >> 62)
    goto LABEL_16;
  v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
  v11 = v3;
  if (!v10)
    goto LABEL_7;
LABEL_6:
  if (!IndexPath.section.getter())
  {
    v18 = objc_msgSend(v3, sel_numberOfItemsInSection_, 0);
LABEL_27:
    if (IndexPath.item.getter() < (uint64_t)v18)
    {

      return 1;
    }
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease();
    type metadata accessor for IndexPath();
    lazy protocol witness table accessor for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey((unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF678], MEMORY[0x24BDCF6B8]);
    v29._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    v30._countAndFlagsBits = 0xD000000000000015;
    v30._object = (void *)0x800000023757DC10;
    String.append(_:)(v30);
    v31 = static os_log_type_t.info.getter();
    specialized static CAFUILogger.log(_:message:function:file:line:)(v31, 0x7461507865646E69, 0xEB00000000203A68, 0xD000000000000014, 0x800000023757DBF0);
    swift_bridgeObjectRelease();

    return 0;
  }
LABEL_7:
  v12 = IndexPath.section.getter();
  v13 = (unint64_t *)(v2 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_listItems);
  swift_beginAccess();
  if (*v13 >> 62)
  {
    v32 = v1;
    swift_bridgeObjectRetain();
    v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v22 = v21;
    v1 = v32;
    if (!v22)
      goto LABEL_22;
  }
  else if (!*(_QWORD *)((*v13 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_22;
  }
  v14 = *(_QWORD *)(v2 + v1);
  if (!(v14 >> 62))
  {
    if (*(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_11;
LABEL_21:
    if (!v12)
      goto LABEL_31;
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  v23 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v23)
    goto LABEL_21;
LABEL_11:
  if (v12 == 1)
  {
LABEL_31:
    v28 = *v13;
    if (v28 >> 62)
      goto LABEL_32;
LABEL_26:
    v18 = *(id *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_27;
  }
LABEL_22:
  v24 = IndexPath.section.getter();
  result = CAFUITileDataSource.firstSettingsSection.getter();
  v26 = v24 - result;
  if (__OFSUB__(v24, result))
  {
    __break(1u);
    goto LABEL_34;
  }
  if ((v26 & 0x8000000000000000) != 0)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v27 = *(_QWORD *)(v2 + v5);
  if (v26 < *(_QWORD *)(v27 + 16))
  {
    v28 = *(_QWORD *)(v27 + 48 * v26 + 72);
    if (v28 >> 62)
    {
LABEL_32:
      swift_bridgeObjectRetain();
      v18 = (id)_CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      goto LABEL_27;
    }
    goto LABEL_26;
  }
LABEL_35:
  __break(1u);
  return result;
}

unint64_t CAFUITileDataSource.setting(at:)(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  id v21;
  void *v22;
  unint64_t result;
  id v24;
  uint64_t v25;

  v2 = v1;
  v4 = IndexPath.section.getter();
  v5 = (unint64_t *)(v2 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_listItems);
  swift_beginAccess();
  v6 = *v5;
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    v25 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v25)
      goto LABEL_6;
  }
  else if (!*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_6;
  }
  v7 = *(_QWORD *)(v2 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleProminentSettings);
  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v4 == (v8 != 0))
    return 0;
LABEL_6:
  if ((CAFUITileDataSource.validate(indexPath:)() & 1) == 0)
    return 0;
  v9 = IndexPath.section.getter();
  v10 = OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleProminentSettings;
  v11 = *(_QWORD *)(v2 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleProminentSettings);
  if (v11 >> 62)
  {
    swift_bridgeObjectRetain();
    v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v12)
    v13 = v9 == 0;
  else
    v13 = 0;
  if (!v13)
  {
    v14 = IndexPath.section.getter();
    v15 = CAFUITileDataSource.firstSettingsSection.getter();
    v16 = v14 - v15;
    if (__OFSUB__(v14, v15))
    {
      __break(1u);
    }
    else if ((v16 & 0x8000000000000000) == 0)
    {
      v17 = *(_QWORD *)(v2 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleSettingsSections);
      if (v16 < *(_QWORD *)(v17 + 16))
      {
        v18 = *(_QWORD *)(v17 + 48 * v16 + 72);
        swift_bridgeObjectRetain();
        v19 = a1;
        v20 = IndexPath.item.getter();
        if ((v18 & 0xC000000000000001) == 0)
        {
          if ((v20 & 0x8000000000000000) != 0)
          {
            __break(1u);
          }
          else if (v20 < *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            v21 = *(id *)(v18 + 8 * v20 + 32);
LABEL_20:
            v22 = v21;
LABEL_21:
            swift_bridgeObjectRelease();
            return (unint64_t)v22;
          }
          __break(1u);
LABEL_38:
          swift_bridgeObjectRetain();
          v22 = (void *)MEMORY[0x23B813418](a1, v19);
          goto LABEL_21;
        }
LABEL_35:
        v21 = (id)MEMORY[0x23B813418]();
        goto LABEL_20;
      }
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    __break(1u);
    goto LABEL_34;
  }
  result = IndexPath.item.getter();
  a1 = result;
  v19 = *(_QWORD *)(v2 + v10);
  if ((v19 & 0xC000000000000001) != 0)
    goto LABEL_38;
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v22 = *(void **)(v19 + 8 * result + 32);
    v24 = v22;
    return (unint64_t)v22;
  }
  __break(1u);
  return result;
}

uint64_t CAFUITileDataSource.settingsSection(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  __int128 v15;

  result = CAFUITileDataSource.firstSettingsSection.getter();
  v6 = a1 - result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
  }
  else
  {
    v7 = 0uLL;
    if ((v6 & 0x8000000000000000) != 0
      || (v8 = *(_QWORD *)(v2 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleSettingsSections),
          v6 >= *(_QWORD *)(v8 + 16)))
    {
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v13 = 0;
    }
    else
    {
      v9 = v8 + 48 * v6;
      v10 = *(_QWORD *)(v9 + 32);
      v15 = *(_OWORD *)(v9 + 40);
      v11 = *(_QWORD *)(v9 + 56);
      v12 = *(void **)(v9 + 64);
      v13 = *(_QWORD *)(v9 + 72);
      v14 = v12;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      result = swift_bridgeObjectRetain();
      v7 = v15;
    }
    *(_QWORD *)a2 = v10;
    *(_OWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 24) = v11;
    *(_QWORD *)(a2 + 32) = v12;
    *(_QWORD *)(a2 + 40) = v13;
  }
  return result;
}

unint64_t CAFUITileDataSource.listItem(at:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  os_log_type_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;

  v1 = v0;
  v2 = IndexPath.section.getter();
  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_listItems);
  swift_beginAccess();
  if ((unint64_t)*v3 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v5)
      goto LABEL_11;
  }
  else if (!*(_QWORD *)((*v3 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_11;
  }
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleProminentSettings);
  if (!(v4 >> 62))
  {
    if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_5;
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  v6 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v6)
  {
LABEL_10:
    if (!v2)
      goto LABEL_14;
LABEL_11:
    _StringGuts.grow(_:)(38);
    swift_bridgeObjectRelease();
    IndexPath.section.getter();
    v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v8._object = (void *)0x800000023757DC30;
    v8._countAndFlagsBits = 0xD00000000000001CLL;
    String.append(_:)(v8);
    v9 = static os_log_type_t.info.getter();
    v10 = 0x206E6F6974636553;
    v11 = 0xE800000000000000;
LABEL_12:
    specialized static CAFUILogger.log(_:message:function:file:line:)(v9, v10, v11, 0x6D6574497473696CLL, 0xED0000293A746128);
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_5:
  if (v2 != 1)
    goto LABEL_11;
LABEL_14:
  v14 = IndexPath.item.getter();
  v15 = v14;
  if (!((unint64_t)*v3 >> 62))
  {
    if (v14 < *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_16;
    goto LABEL_21;
  }
  swift_bridgeObjectRetain();
  v18 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v15 >= v18)
  {
LABEL_21:
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    IndexPath.item.getter();
    v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._object = (void *)0x800000023757DC30;
    v20._countAndFlagsBits = 0xD00000000000001CLL;
    String.append(_:)(v20);
    v9 = static os_log_type_t.info.getter();
    v10 = 0x206D657449;
    v11 = 0xE500000000000000;
    goto LABEL_12;
  }
LABEL_16:
  result = IndexPath.item.getter();
  v16 = result;
  v17 = *v3;
  if ((*v3 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    v12 = MEMORY[0x23B813418](v16, v17);
    swift_bridgeObjectRelease();
    return v12;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v12 = *(_QWORD *)(v17 + 8 * result + 32);
    swift_retain();
    return v12;
  }
  __break(1u);
  return result;
}

void CAFUITileDataSource.refreshProminentSection(reloadSection:)(int a1)
{
  char *v1;
  char *v2;
  uint64_t v3;
  unint64_t v4;
  char **v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t i;
  id v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  id v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  id v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  unint64_t v42;
  NSIndexSet *v43;
  void *v44;
  void *v45;
  unint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char **v52;
  unint64_t v53;
  int v54;
  void *v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;

  v2 = v1;
  LODWORD(v3) = a1;
  v4 = type metadata accessor for IndexSet();
  v5 = *(char ***)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)&v1[OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_prominentSettings];
  if (v8 >> 62)
  {
    swift_bridgeObjectRetain();
    v23 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v23)
      return;
    *(_QWORD *)&v57 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    v24 = _CocoaArrayWrapper.endIndex.getter();
    if (!v24)
      goto LABEL_47;
    i = v24;
    if (v24 < 1)
    {
      __break(1u);
      goto LABEL_28;
    }
    v54 = v3;
    v51 = v7;
    v52 = v5;
    v53 = v4;
  }
  else
  {
    i = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!i)
      return;
    v54 = v3;
    v51 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    v52 = v5;
    v53 = v4;
    *(_QWORD *)&v57 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
  }
  v3 = 0;
  v4 = v8 & 0xC000000000000001;
  v7 = (char *)&unk_2508DF000;
  v5 = &selRef__setContinuousCornerRadius_;
  do
  {
    if (v4)
      v10 = (id)MEMORY[0x23B813418](v3, v8);
    else
      v10 = *(id *)(v8 + 8 * v3 + 32);
    v11 = v10;
    v12 = objc_msgSend(v10, sel_prominenceInfo);
    if (v12 && (v13 = v12, v14 = objc_msgSend(v12, sel_prominenceLevel), v13, v14 == (id)1))
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    else
    {

    }
    ++v3;
  }
  while (i != v3);
  swift_bridgeObjectRelease();
  for (i = v57; ; i = MEMORY[0x24BEE4AF8])
  {
    v56 = MEMORY[0x24BEE4B08];
    if ((i & 0x8000000000000000) != 0 || (i & 0x4000000000000000) != 0)
    {
LABEL_28:
      swift_retain();
      v15 = _CocoaArrayWrapper.endIndex.getter();
      if (!v15)
      {
LABEL_29:
        swift_release();
        v22 = MEMORY[0x24BEE4B08];
        goto LABEL_30;
      }
    }
    else
    {
      v15 = *(_QWORD *)(i + 16);
      swift_retain();
      if (!v15)
        goto LABEL_29;
    }
    v16 = *(_OWORD *)&v2[OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_settingsCache + 16];
    v57 = *(_OWORD *)&v2[OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_settingsCache];
    v58 = v16;
    v59 = *(_OWORD *)&v2[OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_settingsCache + 32];
    v60 = *(_QWORD *)&v2[OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_settingsCache + 48];
    if (v15 >= 1)
      break;
    __break(1u);
LABEL_47:
    v54 = v3;
    v51 = v7;
    v52 = v5;
    v53 = v4;
    swift_bridgeObjectRelease();
  }
  v17 = 0;
  do
  {
    if ((i & 0xC000000000000001) != 0)
      v18 = (id)MEMORY[0x23B813418](v17, i);
    else
      v18 = *(id *)(i + 8 * v17 + 32);
    v19 = v18;
    ++v17;
    CAFUISettingsCache.ancestors(of:)(v18);
    v21 = specialized Set.init<A>(_:)(v20);
    swift_bridgeObjectRelease();
    specialized Set.formUnion<A>(_:)(v21);

  }
  while (v15 != v17);
  swift_release();
  v22 = v56;
LABEL_30:
  v25 = *(char **)&v2[OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_prominentAncestorObserver];
  v26 = OBJC_IVAR____TtC5CAFUIP33_0E4D121C5C9C3A69D68EDC06FF2740D730CAFUIProminentAncestorObserver_observedAncestors;
  v27 = v25;
  swift_bridgeObjectRetain();
  v28 = swift_bridgeObjectRetain();
  specialized Sequence.forEach(_:)(v28, (uint64_t)v27, (SEL *)&selRef_unregisterObserver_);
  swift_bridgeObjectRelease();

  *(_QWORD *)&v25[v26] = v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v29 = v27;
  v30 = swift_bridgeObjectRetain();
  specialized Sequence.forEach(_:)(v30, (uint64_t)v29, (SEL *)&selRef_registerObserver_);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v31 = OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleProminentSettings;
  v32 = *(_QWORD *)&v2[OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleProminentSettings];
  v33 = v2;
  swift_bridgeObjectRetain();
  v34 = specialized _ArrayProtocol.filter(_:)(i, v33);
  swift_release();

  if (v34 < 0 || (v34 & 0x4000000000000000) != 0)
  {
    v46 = swift_bridgeObjectRetain();
    v35 = specialized _copyCollectionToContiguousArray<A>(_:)(v46);
    swift_bridgeObjectRelease();
  }
  else
  {
    v35 = (void *)(v34 & 0xFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
  }
  v55 = v35;
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v55);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v2[v31] = v55;
  swift_bridgeObjectRelease();
  if ((v54 & 1) == 0
    || (v36 = *(void **)((char *)v33 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_collectionView)) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_44;
  }
  if (v32 >> 62)
  {
    swift_bridgeObjectRetain();
    v47 = v36;
    v37 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v37 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10);
    v38 = v36;
  }
  swift_bridgeObjectRelease();
  if (v37)
  {
    v39 = *(_QWORD *)&v2[v31];
    if (v39 >> 62)
    {
      swift_bridgeObjectRetain();
      v48 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v48)
      {
LABEL_40:
        v40 = *(_QWORD *)&v2[v31];
        if (v40 >> 62)
        {
          swift_bridgeObjectRetain();
          v49 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v49)
            goto LABEL_42;
        }
        else if (*(_QWORD *)((v40 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
LABEL_42:
          v55 = &outlined read-only object #0 of CAFUITileDataSource.refreshProminentSection(reloadSection:);
          lazy protocol witness table accessor for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], MEMORY[0x24BDCF468]);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
          lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [Int] and conformance [A], &demangling cache variable for type metadata for [Int]);
          v41 = v51;
          v42 = v53;
          dispatch thunk of SetAlgebra.init<A>(_:)();
          IndexSet._bridgeToObjectiveC()(v43);
          v45 = v44;
          ((void (*)(char *, unint64_t))v52[1])(v41, v42);
          objc_msgSend(v36, sel_reloadSections_, v45);

LABEL_44:
          swift_bridgeObjectRelease();
          return;
        }
      }
    }
    else if (*(_QWORD *)((v39 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_40;
    }
  }
  swift_bridgeObjectRelease();

}

void specialized Set.formUnion<A>(_:)(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  id v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  id v17[6];

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
    lazy protocol witness table accessor for type CAFAutomakerSetting and conformance NSObject();
    Set.Iterator.init(_cocoa:)();
    v1 = (unint64_t)v17[1];
    v16 = v17[2];
    v2 = (uint64_t)v17[3];
    v3 = v17[4];
    v4 = (unint64_t)v17[5];
  }
  else
  {
    v3 = 0;
    v5 = -1 << *(_BYTE *)(a1 + 32);
    v16 = (_QWORD *)(a1 + 56);
    v2 = ~v5;
    v6 = -v5;
    if (v6 < 64)
      v7 = ~(-1 << v6);
    else
      v7 = -1;
    v4 = v7 & *(_QWORD *)(a1 + 56);
  }
  v8 = (unint64_t)(v2 + 64) >> 6;
  if ((v1 & 0x8000000000000000) != 0)
    goto LABEL_10;
  while (1)
  {
    if (v4)
    {
      v9 = (v4 - 1) & v4;
      v10 = __clz(__rbit64(v4)) | ((_QWORD)v3 << 6);
      v11 = (char *)v3;
      goto LABEL_29;
    }
    v13 = (uint64_t)v3 + 1;
    if (__OFADD__(v3, 1))
      break;
    if (v13 >= v8)
      goto LABEL_32;
    v14 = v16[v13];
    v11 = (char *)v3 + 1;
    if (!v14)
    {
      v11 = (char *)v3 + 2;
      if ((uint64_t)v3 + 2 >= v8)
        goto LABEL_32;
      v14 = v16[(_QWORD)v11];
      if (!v14)
      {
        v11 = (char *)v3 + 3;
        if ((uint64_t)v3 + 3 >= v8)
          goto LABEL_32;
        v14 = v16[(_QWORD)v11];
        if (!v14)
        {
          v11 = (char *)v3 + 4;
          if ((uint64_t)v3 + 4 >= v8)
            goto LABEL_32;
          v14 = v16[(_QWORD)v11];
          if (!v14)
          {
            v11 = (char *)v3 + 5;
            if ((uint64_t)v3 + 5 >= v8)
              goto LABEL_32;
            v14 = v16[(_QWORD)v11];
            if (!v14)
            {
              v15 = (char *)v3 + 6;
              while ((char *)v8 != v15)
              {
                v14 = v16[(_QWORD)v15++];
                if (v14)
                {
                  v11 = v15 - 1;
                  goto LABEL_28;
                }
              }
LABEL_32:
              outlined consume of Set<CAFAutomakerSetting>.Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    v9 = (v14 - 1) & v14;
    v10 = __clz(__rbit64(v14)) + ((_QWORD)v11 << 6);
LABEL_29:
    v12 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v10);
    if (!v12)
      goto LABEL_32;
    while (1)
    {
      specialized Set._Variant.insert(_:)(v17, v12);

      v3 = v11;
      v4 = v9;
      if ((v1 & 0x8000000000000000) == 0)
        break;
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v12 = v17[0];
        swift_unknownObjectRelease();
        v11 = (char *)v3;
        v9 = v4;
        if (v12)
          continue;
      }
      goto LABEL_32;
    }
  }
  __break(1u);
}

uint64_t closure #4 in CAFUITileDataSource.refreshProminentSection(reloadSection:)(id *a1, void **a2)
{
  id v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  unsigned int v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  uint64_t result;
  char v30;

  v2 = *a1;
  v3 = *a2;
  v4 = objc_msgSend(*a1, sel_prominenceInfo);
  if (!v4)
    goto LABEL_19;
  v5 = v4;
  v6 = objc_msgSend(v3, sel_prominenceInfo);
  if (!v6)
  {

LABEL_19:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v7 = v6;
  v8 = objc_msgSend(v5, sel_sortOrder);
  if (v8 != objc_msgSend(v7, sel_sortOrder))
  {
    v26 = objc_msgSend(v5, sel_sortOrder);
    v27 = objc_msgSend(v7, sel_sortOrder);

    v25 = v26 < v27;
    return v25 & 1;
  }
  v9 = objc_msgSend(v5, sel_userVisibleLabel);
  if (!v9)
    v9 = objc_msgSend(v2, sel_userVisibleLabel);
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v12 = v11;

  v13 = objc_msgSend(v7, sel_userVisibleLabel);
  if (!v13)
    v13 = objc_msgSend(v3, sel_userVisibleLabel);
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v16 = v15;

  if (v10 == v14 && v12 == v16 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v17 = objc_msgSend(v2, sel_identifier);
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v20 = v19;

    v21 = objc_msgSend(v3, sel_identifier);
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v24 = v23;

    if (v22 == v18 && v24 == v20)
    {
      swift_bridgeObjectRelease_n();

      v25 = 1;
    }
    else
    {
      v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      v25 = v28 ^ 1;
    }
    return v25 & 1;
  }
  v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v30 & 1;
}

id CAFUITileDataSource.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CAFUITileDataSource.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id CAFUITileDataSource.__deallocating_deinit(uint64_t a1)
{
  return CAFUIAutomakerSettingCell.__deallocating_deinit(a1, type metadata accessor for CAFUITileDataSource);
}

uint64_t CAFUITileDataSource.updated(setting:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  _QWORD *v14;
  id v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t, uint64_t);
  Class isa;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t ObjectType;
  os_log_type_t v26;
  uint64_t result;
  id v28;
  uint64_t v29;
  void *v30;
  void *v31;
  Swift::String v32;
  uint64_t v33;
  unint64_t v34;
  os_log_type_t v35;
  unint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  _QWORD *v41;
  id v42;
  Swift::String v43;
  Swift::String v44;
  id v45;
  id v46;
  uint64_t v47;
  void *v48;
  void *v49;
  Swift::String v50;
  unint64_t v51;
  uint64_t v52;
  os_log_type_t v53;
  _QWORD *v54;
  Swift::String v55;
  id v56;
  uint64_t v57;
  void *v58;
  void *v59;
  Swift::String v60;
  void *v61;
  unint64_t v62;
  id v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  id v67;
  void (*v68)(char *, unint64_t, uint64_t);
  unint64_t aBlock;
  unint64_t v70;
  uint64_t (*v71)(uint64_t);
  void *v72;
  uint64_t (*v73)();
  void *v74;

  v3 = type metadata accessor for IndexPath();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IndexPath?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD **)(v1 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_collectionView);
  if (!v10)
  {
    v26 = static os_log_type_t.info.getter();
    return specialized static CAFUILogger.log(_:message:function:file:line:)(v26, 0xD000000000000020, 0x800000023757DE20, 0xD000000000000011, 0x800000023757DE50);
  }
  swift_getObjectType();
  v11 = swift_conformsToProtocol2();
  if (v11)
    v12 = v11;
  else
    v12 = 0;
  if (v11)
    v13 = a1;
  else
    v13 = 0;
  v65 = v13;
  v66 = v12;
  if (!v13)
    goto LABEL_26;
  v14 = v10;
  v15 = a1;
  v16 = specialized CAFUITileDataSource.indexPaths(for:)(v15, v1);
  v17 = *(_QWORD *)(v16 + 16);
  if (!v17)
  {
    swift_bridgeObjectRelease();
    aBlock = 0;
    v70 = 0xE000000000000000;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    aBlock = 0xD000000000000027;
    v70 = 0x800000023757DEF0;
    v28 = objc_msgSend(v15, sel_description);
    v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v31 = v30;

    v32._countAndFlagsBits = v29;
    v32._object = v31;
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    v33 = aBlock;
    v34 = v70;
    v35 = static os_log_type_t.info.getter();
    specialized static CAFUILogger.log(_:message:function:file:line:)(v35, v33, v34, 0xD000000000000011, 0x800000023757DE50);

    return swift_bridgeObjectRelease();
  }
  v61 = (void *)v1;
  v62 = v16;
  v63 = v15;
  v18 = v16 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  v19 = *(_QWORD *)(v4 + 72);
  v68 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
  swift_bridgeObjectRetain();
  v67 = v14;
  v64 = v4;
  while (1)
  {
    v68(v9, v18, v3);
    v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
    v20(v9, 0, 1, v3);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) == 1)
      break;
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v9, v3);
    isa = IndexPath._bridgeToObjectiveC()().super.isa;
    v22 = objc_msgSend(v14, sel_cellForItemAtIndexPath_, isa);

    if (v22)
    {
      type metadata accessor for CAFUIAutomakerSettingCell(0);
      v23 = swift_dynamicCastClass();
      if (v23)
      {
        v24 = v23;
        ObjectType = swift_getObjectType();
        if (((*(uint64_t (**)(uint64_t, uint64_t))(v66 + 56))(v24, ObjectType) & 1) != 0)
        {
          swift_bridgeObjectRelease_n();
          aBlock = 0;
          v70 = 0xE000000000000000;
          _StringGuts.grow(_:)(49);
          swift_bridgeObjectRelease();
          aBlock = 0xD000000000000028;
          v70 = 0x800000023757DEC0;
          lazy protocol witness table accessor for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey((unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF678], MEMORY[0x24BDCF6B8]);
          v43._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v43);
          swift_bridgeObjectRelease();
          v44._countAndFlagsBits = 0x20726F6620;
          v44._object = (void *)0xE500000000000000;
          String.append(_:)(v44);
          v45 = v63;
          v46 = objc_msgSend(v63, sel_description);
          v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v49 = v48;

          v50._countAndFlagsBits = v47;
          v50._object = v49;
          String.append(_:)(v50);
          swift_bridgeObjectRelease();
          v52 = aBlock;
          v51 = v70;
          v53 = static os_log_type_t.info.getter();
          specialized static CAFUILogger.log(_:message:function:file:line:)(v53, v52, v51, 0xD000000000000011, 0x800000023757DE50);

          swift_bridgeObjectRelease();
          return (*(uint64_t (**)(char *, uint64_t))(v64 + 8))(v6, v3);
        }
        v4 = v64;
        (*(void (**)(char *, uint64_t))(v64 + 8))(v6, v3);

        goto LABEL_13;
      }

    }
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
LABEL_13:
    v18 += v19;
    --v17;
    v14 = v67;
    if (!v17)
    {
      v20(v9, 1, 1, v3);
      break;
    }
  }
  v36 = v62;
  swift_bridgeObjectRelease();
  v37 = (void *)objc_opt_self();
  v10 = (_QWORD *)swift_allocObject();
  v38 = v61;
  v10[2] = v36;
  v10[3] = v38;
  v10[4] = v14;
  v39 = swift_allocObject();
  *(_QWORD *)(v39 + 16) = partial apply for closure #1 in CAFUITileDataSource.updated(setting:);
  *(_QWORD *)(v39 + 24) = v10;
  v73 = thunk for @callee_guaranteed () -> ()partial apply;
  v74 = (void *)v39;
  aBlock = MEMORY[0x24BDAC760];
  v70 = 1107296256;
  v71 = thunk for @escaping @callee_guaranteed () -> ();
  v72 = &block_descriptor_15;
  v40 = _Block_copy(&aBlock);
  a1 = v74;
  v41 = v14;
  v42 = v38;
  swift_retain();
  swift_release();
  objc_msgSend(v37, sel_performWithoutAnimation_, v40);

  _Block_release(v40);
  LOBYTE(v41) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((v41 & 1) == 0)
    return result;
  __break(1u);
LABEL_26:
  aBlock = 0;
  v70 = 0xE000000000000000;
  v54 = v10;
  _StringGuts.grow(_:)(80);
  v55._countAndFlagsBits = 0xD00000000000004ELL;
  v55._object = (void *)0x800000023757DE70;
  String.append(_:)(v55);
  v56 = objc_msgSend(a1, sel_identifier);
  v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v59 = v58;

  v60._countAndFlagsBits = v57;
  v60._object = v59;
  String.append(_:)(v60);
  swift_bridgeObjectRelease();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void closure #1 in CAFUITileDataSource.updated(setting:)(uint64_t a1, void *a2, void *a3)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  Class isa;

  v4 = a2;
  v5 = swift_bridgeObjectRetain();
  v6 = specialized _ArrayProtocol.filter(_:)(v5, (uint64_t)v4);

  if (*(_QWORD *)(v6 + 16))
  {
    type metadata accessor for IndexPath();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(a3, sel_reconfigureItemsAtIndexPaths_, isa);

  }
  else
  {
    swift_bridgeObjectRelease();
  }
}

uint64_t CAFUITileDataSource.automakerSettingService(_:didUpdateProminenceInfo:)()
{
  return specialized CAFUITileDataSource.automakerSettingService(_:didUpdateProminenceInfo:)();
}

uint64_t CAFUITileDataSource.automakerSettingService(_:didUpdateHidden:)()
{
  return specialized CAFUITileDataSource.automakerSettingService(_:didUpdateProminenceInfo:)();
}

void @objc CAFUITileDataSource.singleSelectSettingService(_:didUpdateSelectSettingEntryList:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  id v8;

  v6 = a3;
  v7 = a4;
  v8 = a1;
  CAFUITileDataSource.updated(setting:)(v6);

}

id CAFUIProminentAncestorObserver.__deallocating_deinit()
{
  return CAFUIAutomakerSettingCell.__deallocating_deinit(0, type metadata accessor for CAFUIProminentAncestorObserver);
}

uint64_t CAFVolume.identifier.getter()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  uint64_t v6;
  uint64_t v8;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = objc_msgSend(v0, sel_uniqueIdentifier);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  v6 = UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v6;
}

uint64_t protocol witness for CAFUITileIdentifiable.identifier.getter in conformance CAFVolume()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  uint64_t v6;
  uint64_t v8;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = objc_msgSend(v0, sel_uniqueIdentifier);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  v6 = UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v6;
}

uint64_t protocol witness for CAFUITileIdentifiable.identifier.getter in conformance CAFUIServiceListItem()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  uint64_t v6;
  uint64_t v8;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = objc_msgSend(*(id *)(v0 + 112), sel_uniqueIdentifier);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  v6 = UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v6;
}

uint64_t protocol witness for CAFUITileIdentifiable.identifier.getter in conformance CAFAutomakerSetting()
{
  void *v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(v0, sel_identifier);
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

void CAFUITileDataSource.updated(setting:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  id v9;
  unint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _BOOL8 v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  _BOOL8 v34;
  id v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  _QWORD aBlock[6];

  v40 = a1;
  v2 = type metadata accessor for UUID();
  v3 = *(_QWORD *)(v2 - 8);
  v38 = v2;
  v39 = v3;
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(void **)(v1 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_collectionView);
  if (!v6)
  {
    v16 = static os_log_type_t.info.getter();
    specialized static CAFUILogger.log(_:message:function:file:line:)(v16, 0xD000000000000020, 0x800000023757DE20, 0xD000000000000011, 0x800000023757DE50);
    return;
  }
  v7 = (uint64_t *)(v1 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_listItems);
  swift_beginAccess();
  if ((unint64_t)*v7 >> 62)
    goto LABEL_30;
  v8 = *(_QWORD *)((*v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  v9 = v6;
  if (v8)
  {
LABEL_4:
    v10 = *(_QWORD *)(v1 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleProminentSettings);
    if (v10 >> 62)
    {
      swift_bridgeObjectRetain();
      v1 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v1 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v11 = v1 != 0;
    v12 = *v7;
    if (!((unint64_t)*v7 >> 62))
    {
      v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_8:
      if (!v13)
        goto LABEL_31;
      v34 = v11;
      v35 = v6;
      v14 = 0;
      v36 = v13;
      v37 = v7;
      v15 = v38;
      while (1)
      {
        if (v13 == v14)
        {
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
LABEL_30:
          v32 = v6;
          swift_bridgeObjectRetain();
          v33 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v33)
            goto LABEL_31;
          goto LABEL_4;
        }
        v1 = *v7;
        if ((*v7 & 0xC000000000000001) != 0)
        {
          swift_bridgeObjectRetain();
          MEMORY[0x23B813418](v14, v1);
          swift_bridgeObjectRelease();
          type metadata accessor for CAFUIServiceListItem();
          v26 = swift_dynamicCastClass();
          if (!v26)
          {
            swift_unknownObjectRelease();
            goto LABEL_12;
          }
          v18 = v26;
        }
        else
        {
          if (v14 >= *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_29;
          type metadata accessor for CAFUIServiceListItem();
          v17 = swift_dynamicCastClass();
          if (!v17)
            goto LABEL_12;
          v18 = v17;
          swift_retain();
        }
        v19 = objc_msgSend(*(id *)(v18 + 112), sel_uniqueIdentifier);
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        v20 = UUID.uuidString.getter();
        v7 = v21;
        v6 = *(void **)(v39 + 8);
        ((void (*)(char *, uint64_t))v6)(v5, v15);
        v22 = objc_msgSend(v40, sel_uniqueIdentifier);
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        v23 = UUID.uuidString.getter();
        v1 = v24;
        ((void (*)(char *, uint64_t))v6)(v5, v15);
        if (v20 == v23 && v7 == (uint64_t *)v1)
        {
          swift_bridgeObjectRelease_n();
LABEL_26:
          v27 = objc_opt_self();
          v28 = (_QWORD *)swift_allocObject();
          v29 = v34;
          v30 = v35;
          v28[2] = v35;
          v28[3] = v14;
          v28[4] = v29;
          v1 = swift_allocObject();
          *(_QWORD *)(v1 + 16) = partial apply for closure #1 in CAFUITileDataSource.updated(setting:);
          *(_QWORD *)(v1 + 24) = v28;
          aBlock[4] = partial apply for thunk for @callee_guaranteed () -> ();
          aBlock[5] = v1;
          aBlock[0] = MEMORY[0x24BDAC760];
          aBlock[1] = 1107296256;
          aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
          aBlock[3] = &block_descriptor_5;
          v6 = _Block_copy(aBlock);
          v31 = v30;
          swift_retain();
          swift_release();
          objc_msgSend((id)v27, sel_performWithoutAnimation_, v6);
          swift_release();

          _Block_release(v6);
          LOBYTE(v27) = swift_isEscapingClosureAtFileLocation();
          swift_release();
          swift_release();
          if ((v27 & 1) == 0)
            return;
          __break(1u);
          goto LABEL_28;
        }
        v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v25 & 1) != 0)
          goto LABEL_26;
        swift_release();
        v13 = v36;
        v7 = v37;
LABEL_12:
        if (v13 == ++v14)
        {

          return;
        }
      }
    }
    if (v12 < 0)
      v1 = *v7;
    else
      v1 = v12 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if ((v13 & 0x8000000000000000) == 0)
      goto LABEL_8;
    __break(1u);
  }
  else
  {
LABEL_31:

  }
}

void closure #1 in CAFUITileDataSource.updated(setting:)(void *a1, uint64_t a2, uint64_t a3)
{
  Class isa;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<IndexPath>);
  type metadata accessor for IndexPath();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_237579480;
  MEMORY[0x23B812638](a2, a3);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(a1, sel_reconfigureItemsAtIndexPaths_, isa);

}

uint64_t @objc CAFUITileDataSource.automakerSettingService(_:didUpdateSymbolName:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(id))
{
  id v8;
  id v9;

  if (a4)
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  v8 = a3;
  v9 = a1;
  a5(v8);

  return swift_bridgeObjectRelease();
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(void **__src, void **a2, unint64_t a3, void **__dst)
{
  id *v5;
  void **v6;
  int64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  void **v14;
  void *v15;
  id v16;
  id v17;
  char v18;
  char v19;
  id *v20;
  void **v21;
  id *v22;
  id *v23;
  id *v24;
  void *v25;
  void *v26;
  id v27;
  id v28;
  char v29;
  char v30;
  id *v31;
  void **v32;
  uint64_t result;
  void **v34;
  void **v35;
  uint64_t v36;
  void *v37;
  id v38;
  void **v39;
  void **v40;
  void **v41;

  v35 = __dst;
  v5 = a2;
  v6 = __src;
  v7 = (char *)a2 - (char *)__src;
  v8 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0)
    v8 = (char *)a2 - (char *)__src;
  v9 = v8 >> 3;
  v10 = a3 - (_QWORD)a2;
  v11 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v11 = a3 - (_QWORD)a2;
  v12 = v11 >> 3;
  v41 = __src;
  v40 = __dst;
  if (v9 >= v11 >> 3)
  {
    if (v10 >= -7)
    {
      if (__dst != a2 || &a2[v12] <= __dst)
      {
        memmove(__dst, a2, 8 * v12);
        __dst = v35;
      }
      v21 = &__dst[v12];
      v39 = v21;
      v41 = v5;
      if (v6 < v5 && v10 >= 8)
      {
        v22 = (id *)(a3 - 8);
        v23 = v5;
        v34 = v6;
        while (1)
        {
          v24 = v21;
          v25 = *--v21;
          v38 = v25;
          v26 = *--v23;
          v37 = v26;
          v27 = v38;
          v28 = v26;
          v29 = closure #4 in CAFUITileDataSource.refreshProminentSection(reloadSection:)(&v38, &v37);
          if (v36)
            break;
          v30 = v29;
          v36 = 0;
          v31 = v22 + 1;

          if ((v30 & 1) != 0)
          {
            v32 = v35;
            if (v31 != v5 || v22 >= v5)
              *v22 = *v23;
            v41 = v23;
            v21 = v24;
          }
          else
          {
            v39 = v21;
            v32 = v35;
            if (v31 < v24 || v22 >= v24 || v31 != v24)
              *v22 = *v21;
            v23 = v5;
          }
          if (v23 > v34)
          {
            --v22;
            v5 = v23;
            if (v21 > v32)
              continue;
          }
          goto LABEL_48;
        }

      }
      goto LABEL_48;
    }
  }
  else if (v7 >= -7)
  {
    if (__dst != __src || &__src[v9] <= __dst)
    {
      memmove(__dst, __src, 8 * v9);
      __dst = v35;
    }
    v13 = &__dst[v9];
    v39 = v13;
    if ((unint64_t)v5 < a3 && v7 >= 8)
    {
      while (1)
      {
        v38 = *v5;
        v14 = __dst;
        v37 = *__dst;
        v15 = v37;
        v16 = v38;
        v17 = v15;
        v18 = closure #4 in CAFUITileDataSource.refreshProminentSection(reloadSection:)(&v38, &v37);
        if (v36)
          break;
        v19 = v18;

        if ((v19 & 1) != 0)
        {
          v20 = v5 + 1;
          if (v6 < v5 || v6 >= v20 || v6 != v5)
            *v6 = *v5;
          __dst = v14;
        }
        else
        {
          if (v6 != v14)
            *v6 = *v14;
          __dst = v14 + 1;
          v40 = v14 + 1;
          v20 = v5;
        }
        v36 = 0;
        v41 = ++v6;
        if (__dst < v13)
        {
          v5 = v20;
          if ((unint64_t)v20 < a3)
            continue;
        }
        goto LABEL_48;
      }

    }
LABEL_48:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v41, (const void **)&v40, &v39);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 7;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -8)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
      return (char *)memmove(result, v3, 8 * v7);
  }
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t specialized Set._Variant.insert(_:)(_QWORD *a1, void *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t result;
  Swift::Int v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  char v16;
  uint64_t v17;
  id v18;
  char v19;
  void *v20;
  id v21;
  Swift::Int v22;
  _QWORD *v23;
  id v24;
  char isUniquelyReferenced_nonNull_native;
  id v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v8 = a2;
    v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease();

      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v27;
      swift_unknownObjectRelease();
      return 0;
    }
    result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v22 = specialized _NativeSet.init(_:capacity:)(v7, result + 1);
    v28 = (_QWORD *)v22;
    if (*(_QWORD *)(v22 + 24) <= *(_QWORD *)(v22 + 16))
    {
      v26 = v8;
      specialized _NativeSet.resize(capacity:)();
      v23 = v28;
    }
    else
    {
      v23 = (_QWORD *)v22;
      v24 = v8;
    }
    specialized _NativeSet._unsafeInsertNew(_:)((uint64_t)v8, v23);
    *v3 = (uint64_t)v23;
  }
  else
  {
    v11 = *(_QWORD *)(v6 + 40);
    swift_bridgeObjectRetain();
    v12 = NSObject._rawHashValue(seed:)(v11);
    v13 = -1 << *(_BYTE *)(v6 + 32);
    v14 = v12 & ~v13;
    if (((*(_QWORD *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
      v15 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v14);
      v16 = static NSObject.== infix(_:_:)();

      if ((v16 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        v20 = *(void **)(*(_QWORD *)(*v3 + 48) + 8 * v14);
        *a1 = v20;
        v21 = v20;
        return 0;
      }
      v17 = ~v13;
      while (1)
      {
        v14 = (v14 + 1) & v17;
        if (((*(_QWORD *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
          break;
        v18 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v14);
        v19 = static NSObject.== infix(_:_:)();

        if ((v19 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v29 = *v3;
    *v3 = 0x8000000000000000;
    v8 = a2;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v8, v14, isUniquelyReferenced_nonNull_native);
    *v3 = v29;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

Swift::Int specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<CAFAutomakerSetting>);
    v2 = static _SetStorage.convert(_:capacity:)();
    v14 = v2;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
      do
      {
        swift_dynamicCast();
        v2 = v14;
        if (*(_QWORD *)(v14 + 24) <= *(_QWORD *)(v14 + 16))
        {
          specialized _NativeSet.resize(capacity:)();
          v2 = v14;
        }
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
        v4 = v2 + 56;
        v5 = -1 << *(_BYTE *)(v2 + 32);
        v6 = result & ~v5;
        v7 = v6 >> 6;
        if (((-1 << v6) & ~*(_QWORD *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          v8 = __clz(__rbit64((-1 << v6) & ~*(_QWORD *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v9 = 0;
          v10 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v10 && (v9 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v11 = v7 == v10;
            if (v7 == v10)
              v7 = 0;
            v9 |= v11;
            v12 = *(_QWORD *)(v4 + 8 * v7);
          }
          while (v12 == -1);
          v8 = __clz(__rbit64(~v12)) + (v7 << 6);
        }
        *(_QWORD *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v8) = v13;
        ++*(_QWORD *)(v2 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x24BEE4B08];
  }
  return v2;
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<CAFAutomakerSetting>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v28 = v0;
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v6 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v7 = ~(-1 << v5);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(v2 + 56);
    v9 = (unint64_t)(v5 + 63) >> 6;
    v10 = v3 + 56;
    result = swift_retain();
    v12 = 0;
    while (1)
    {
      if (v8)
      {
        v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v15 = v14 | (v12 << 6);
      }
      else
      {
        v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v9)
          goto LABEL_33;
        v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          v12 = v16 + 1;
          if (v16 + 1 >= v9)
            goto LABEL_33;
          v17 = v6[v12];
          if (!v17)
          {
            v12 = v16 + 2;
            if (v16 + 2 >= v9)
              goto LABEL_33;
            v17 = v6[v12];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_33:
                swift_release();
                v1 = v28;
                v27 = 1 << *(_BYTE *)(v2 + 32);
                if (v27 > 63)
                  bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v6 = -1 << v27;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  v12 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v12 >= v9)
                    goto LABEL_33;
                  v17 = v6[v12];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v12 = v18;
            }
          }
        }
LABEL_23:
        v8 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      v19 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
      result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v4 + 40));
      v20 = -1 << *(_BYTE *)(v4 + 32);
      v21 = result & ~v20;
      v22 = v21 >> 6;
      if (((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v25 = v22 == v24;
          if (v22 == v24)
            v22 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v10 + 8 * v22);
        }
        while (v26 == -1);
        v13 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v13) = v19;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

unint64_t specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, _QWORD *a2)
{
  unint64_t result;

  NSObject._rawHashValue(seed:)(a2[5]);
  result = _HashTable.nextHole(atOrAfter:)();
  *(_QWORD *)((char *)a2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 56) |= 1 << result;
  *(_QWORD *)(a2[6] + 8 * result) = a1;
  ++a2[2];
  return result;
}

void specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  id v11;
  char v12;
  uint64_t v13;
  id v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v8 = *v3;
  v9 = NSObject._rawHashValue(seed:)(*(_QWORD *)(*v3 + 40));
  v10 = -1 << *(_BYTE *)(v8 + 32);
  a2 = v9 & ~v10;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
    v11 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * a2);
    v12 = static NSObject.== infix(_:_:)();

    if ((v12 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v13 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v14 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * a2);
        v15 = static NSObject.== infix(_:_:)();

        if ((v15 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v16 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v16 + 48) + 8 * a2) = a1;
  v17 = *(_QWORD *)(v16 + 16);
  v18 = __OFADD__(v17, 1);
  v19 = v17 + 1;
  if (v18)
    __break(1u);
  else
    *(_QWORD *)(v16 + 16) = v19;
}

id specialized _NativeSet.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<CAFAutomakerSetting>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_28;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
      {
        v9 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_28;
        v19 = *(_QWORD *)(v6 + 8 * v9);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = v17;
  }
  v20 = v18 + 3;
  if (v20 >= v13)
    goto LABEL_28;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  Swift::Int v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<CAFAutomakerSetting>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v28 = v0;
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v9 = (unint64_t)(v5 + 63) >> 6;
  v10 = v3 + 56;
  result = swift_retain();
  v12 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v9)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      v12 = v16 + 1;
      if (v16 + 1 >= v9)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v12);
      if (!v17)
      {
        v12 = v16 + 2;
        if (v16 + 2 >= v9)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v12);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    v19 = *(_QWORD *)(v4 + 40);
    v20 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    result = NSObject._rawHashValue(seed:)(v19);
    v21 = -1 << *(_BYTE *)(v4 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v10 + 8 * (v22 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v10 + 8 * v23);
      }
      while (v27 == -1);
      v13 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v13) = v20;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v28;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v12 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v12 >= v9)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v12);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew()()
{
  JUMPOUT(0x23B813508);
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(_QWORD *a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

unint64_t specialized CAFUITileDataSource.indexPaths(for:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v61;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v75 = a3;
  v76 = a4;
  v74 = a1;
  v71 = type metadata accessor for UUID();
  v67 = *(_QWORD *)(v71 - 8);
  MEMORY[0x24BDAC7A8](v71);
  v8 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for IndexPath();
  v68 = *(_QWORD *)(v9 - 8);
  v69 = v9;
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v10);
  MEMORY[0x24BDAC7A8](v13);
  v70 = (char *)&v64 - v15;
  v16 = *(char **)(a2 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_collectionView);
  if (v16)
  {
    v65 = v14;
    v17 = OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleProminentSettings;
    v18 = *(_QWORD *)(a2 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleProminentSettings);
    if (v18 >> 62)
      goto LABEL_25;
    v19 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
    v20 = v16;
    v73 = (char *)a2;
    if (v19)
    {
      do
      {
        v21 = (unint64_t)objc_msgSend(v16, sel_numberOfItemsInSection_, 0);
        if ((v21 & 0x8000000000000000) != 0)
        {
          __break(1u);
          goto LABEL_97;
        }
        v22 = v21;
        if (!v21)
          break;
        v72 = v12;
        v4 = 0;
        v12 = *(char **)(v76 + 8);
        while (v22 != v4)
        {
          v23 = *(_QWORD *)(a2 + v17);
          if ((v23 & 0xC000000000000001) != 0)
          {
            swift_bridgeObjectRetain();
            a2 = MEMORY[0x23B813418](v4, v23);
            swift_bridgeObjectRelease();
          }
          else
          {
            if (v4 >= *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_24;
            a2 = (unint64_t)*(id *)(v23 + 8 * v4 + 32);
          }
          v24 = objc_msgSend((id)a2, sel_identifier);
          v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v27 = v26;

          if (v25 == ((uint64_t (*)(uint64_t, uint64_t))v12)(v75, v76) && v27 == v28)
          {
            swift_bridgeObjectRelease_n();
LABEL_21:
            v30 = (uint64_t)v72;
            MEMORY[0x23B812638](v4, 0);
            v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
            v32 = *(_QWORD *)(v4 + 16);
            v31 = *(_QWORD *)(v4 + 24);
            v33 = v32 + 1;
            if (v32 >= v31 >> 1)
              goto LABEL_103;
            while (2)
            {
              *(_QWORD *)(v4 + 16) = v33;
              (*(void (**)(unint64_t, uint64_t, uint64_t))(v68 + 32))(v4+ ((*(unsigned __int8 *)(v68 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80))+ *(_QWORD *)(v68 + 72) * v32, v30, v69);

              a2 = (unint64_t)v73;
LABEL_27:
              v36 = (char *)(a2 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_listItems);
              swift_beginAccess();
              v5 = (uint64_t)v36;
              if (*(_QWORD *)v36 >> 62)
                goto LABEL_94;
              v37 = *(_QWORD *)((*(_QWORD *)v36 & 0xFFFFFFFFFFFFF8) + 0x10);
              v66 = v16;
              if (!v37)
              {
                do
                {
LABEL_55:
                  v67 = CAFUITileDataSource.firstSettingsSection.getter();
                  v16 = (char *)OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleSettingsSections;
                  v71 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleSettingsSections)
                                  + 16);
                  if (!v71)
                  {
LABEL_85:

                    return v4;
                  }
                  v17 = 0;
                  while (1)
                  {
                    v50 = *(_QWORD *)&v16[a2];
                    if (v17 >= *(_QWORD *)(v50 + 16))
                      break;
                    v72 = (char *)v4;
                    v51 = *(_QWORD *)(v50 + 48 * v17 + 72);
                    if (v51 >> 62)
                    {
                      swift_bridgeObjectRetain();
                      v4 = _CocoaArrayWrapper.endIndex.getter();
                      swift_bridgeObjectRelease();
                      if ((v4 & 0x8000000000000000) != 0)
                        goto LABEL_91;
                    }
                    else
                    {
                      v4 = *(_QWORD *)((v51 & 0xFFFFFFFFFFFFF8) + 0x10);
                    }
                    if (v4)
                    {
                      v52 = 0;
                      v8 = *(char **)(v76 + 8);
                      while (1)
                      {
                        if (v4 == v52)
                        {
                          __break(1u);
LABEL_88:
                          __break(1u);
LABEL_89:
                          __break(1u);
                          goto LABEL_90;
                        }
                        v53 = *(_QWORD *)&v16[a2];
                        if (v17 >= *(_QWORD *)(v53 + 16))
                          goto LABEL_88;
                        v54 = *(_QWORD *)(v53 + 48 * v17 + 72);
                        if ((v54 & 0xC000000000000001) != 0)
                        {
                          swift_bridgeObjectRetain();
                          v55 = (id)MEMORY[0x23B813418](v52, v54);
                          swift_bridgeObjectRelease();
                        }
                        else
                        {
                          if (v52 >= *(_QWORD *)((v54 & 0xFFFFFFFFFFFFF8) + 0x10))
                            goto LABEL_89;
                          v55 = *(id *)(v54 + 8 * v52 + 32);
                        }
                        v56 = objc_msgSend(v55, sel_identifier, v64);
                        v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                        v58 = v57;

                        if (v5 == ((uint64_t (*)(uint64_t, uint64_t))v8)(v75, v76) && v58 == v59)
                          break;
                        v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        if ((v5 & 1) != 0)
                          goto LABEL_78;
                        ++v52;

                        a2 = (unint64_t)v73;
                        if (v4 == v52)
                          goto LABEL_57;
                      }
                      swift_bridgeObjectRelease_n();
LABEL_78:
                      MEMORY[0x23B812638](v52, v17 + v67);
                      v4 = (unint64_t)v72;
                      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                        v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v4 + 16) + 1, 1, v4);
                      v8 = *(char **)(v4 + 16);
                      v61 = *(_QWORD *)(v4 + 24);
                      if ((unint64_t)v8 >= v61 >> 1)
                        v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v61 > 1, (int64_t)(v8 + 1), 1, v4);
                      *(_QWORD *)(v4 + 16) = v8 + 1;
                      (*(void (**)(unint64_t, char *, uint64_t))(v68 + 32))(v4+ ((*(unsigned __int8 *)(v68 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80))+ *(_QWORD *)(v68 + 72) * (_QWORD)v8, v70, v69);

                      a2 = (unint64_t)v73;
                    }
                    else
                    {
LABEL_57:
                      v4 = (unint64_t)v72;
                    }
                    if (++v17 == v71)
                      goto LABEL_85;
                  }
LABEL_90:
                  __break(1u);
LABEL_91:
                  __break(1u);
LABEL_92:
                  __break(1u);
LABEL_93:
                  __break(1u);
LABEL_94:
                  swift_bridgeObjectRetain();
                  v63 = _CocoaArrayWrapper.endIndex.getter();
                  swift_bridgeObjectRelease();
                  v66 = v16;
                }
                while (!v63);
              }
              v38 = *(_QWORD *)(a2 + v17);
              if (v38 >> 62)
              {
LABEL_97:
                swift_bridgeObjectRetain();
                v39 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
              }
              else
              {
                v39 = *(_QWORD *)((v38 & 0xFFFFFFFFFFFFF8) + 0x10);
              }
              v17 = v5;
              v72 = (char *)v4;
              v32 = v39 != 0;
              v33 = *(_QWORD *)v5;
              if (!(*(_QWORD *)v5 >> 62))
              {
                v4 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_33:
                if (!v4)
                  goto LABEL_48;
                v64 = v32;
                a2 = 0;
                while (2)
                {
                  if (v4 == a2)
                    goto LABEL_92;
                  v40 = *(_QWORD *)v17;
                  if ((*(_QWORD *)v17 & 0xC000000000000001) != 0)
                  {
                    swift_bridgeObjectRetain();
                    MEMORY[0x23B813418](a2, v40);
                    swift_bridgeObjectRelease();
                    type metadata accessor for CAFUIServiceListItem();
                    v47 = swift_dynamicCastClass();
                    if (v47)
                    {
                      v42 = v47;
                      goto LABEL_42;
                    }
                    swift_unknownObjectRelease();
                  }
                  else
                  {
                    if (a2 >= *(_QWORD *)((v40 & 0xFFFFFFFFFFFFF8) + 0x10))
                      goto LABEL_93;
                    type metadata accessor for CAFUIServiceListItem();
                    v41 = swift_dynamicCastClass();
                    if (v41)
                    {
                      v42 = v41;
                      swift_retain();
LABEL_42:
                      v43 = objc_msgSend(*(id *)(v42 + 112), sel_uniqueIdentifier, v64);
                      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

                      v5 = UUID.uuidString.getter();
                      v45 = v44;
                      (*(void (**)(char *, uint64_t))(v67 + 8))(v8, v71);
                      if (v5 == (*(uint64_t (**)(uint64_t))(v76 + 8))(v75) && v45 == v46)
                      {
                        swift_bridgeObjectRelease_n();
LABEL_50:
                        v8 = v65;
                        MEMORY[0x23B812638](a2, v64);
                        v4 = (unint64_t)v72;
                        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                          v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v4 + 16) + 1, 1, v4);
                        a2 = (unint64_t)v73;
                        v49 = *(_QWORD *)(v4 + 16);
                        v48 = *(_QWORD *)(v4 + 24);
                        if (v49 >= v48 >> 1)
                          v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v48 > 1, v49 + 1, 1, v4);
                        *(_QWORD *)(v4 + 16) = v49 + 1;
                        (*(void (**)(unint64_t, char *, uint64_t))(v68 + 32))(v4+ ((*(unsigned __int8 *)(v68 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80))+ *(_QWORD *)(v68 + 72) * v49, v8, v69);
                        swift_release();
                        goto LABEL_55;
                      }
                      v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      if ((v5 & 1) != 0)
                        goto LABEL_50;
                      swift_release();
                    }
                  }
                  if (v4 == ++a2)
                  {
LABEL_48:
                    v4 = (unint64_t)v72;
                    a2 = (unint64_t)v73;
                    goto LABEL_55;
                  }
                  continue;
                }
              }
              if (v33 < 0)
                v30 = *(_QWORD *)v5;
              else
                v30 = v33 & 0xFFFFFFFFFFFFFF8;
              swift_bridgeObjectRetain();
              v4 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if ((v4 & 0x8000000000000000) == 0)
                goto LABEL_33;
              __break(1u);
LABEL_103:
              v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v33, 1, v4);
              continue;
            }
          }
          v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v5 & 1) != 0)
            goto LABEL_21;
          ++v4;

          a2 = (unint64_t)v73;
          if (v22 == v4)
            goto LABEL_26;
        }
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        v34 = v16;
        swift_bridgeObjectRetain();
        v35 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        v73 = (char *)a2;
      }
      while (v35);
    }
LABEL_26:
    v4 = MEMORY[0x24BEE4AF8];
    goto LABEL_27;
  }
  return MEMORY[0x24BEE4AF8];
}

void specialized Sequence.forEach(_:)(uint64_t a1, uint64_t a2, SEL *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  id v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;

  v5 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
    lazy protocol witness table accessor for type CAFAutomakerSetting and conformance NSObject();
    Set.Iterator.init(_cocoa:)();
    v5 = v22;
    v21 = v23;
    v6 = v24;
    v7 = v25;
    v8 = v26;
  }
  else
  {
    v9 = -1 << *(_BYTE *)(a1 + 32);
    v21 = a1 + 56;
    v10 = ~v9;
    v11 = -v9;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v8 = v12 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain();
    v6 = v10;
    v7 = 0;
  }
  v20 = (unint64_t)(v6 + 64) >> 6;
  if (v5 < 0)
    goto LABEL_10;
  while (1)
  {
    if (v8)
    {
      v13 = (v8 - 1) & v8;
      v14 = __clz(__rbit64(v8)) | (v7 << 6);
      v15 = v7;
      goto LABEL_29;
    }
    v17 = v7 + 1;
    if (__OFADD__(v7, 1))
      break;
    if (v17 >= v20)
      goto LABEL_32;
    v18 = *(_QWORD *)(v21 + 8 * v17);
    v15 = v7 + 1;
    if (!v18)
    {
      v15 = v7 + 2;
      if (v7 + 2 >= v20)
        goto LABEL_32;
      v18 = *(_QWORD *)(v21 + 8 * v15);
      if (!v18)
      {
        v15 = v7 + 3;
        if (v7 + 3 >= v20)
          goto LABEL_32;
        v18 = *(_QWORD *)(v21 + 8 * v15);
        if (!v18)
        {
          v15 = v7 + 4;
          if (v7 + 4 >= v20)
            goto LABEL_32;
          v18 = *(_QWORD *)(v21 + 8 * v15);
          if (!v18)
          {
            v15 = v7 + 5;
            if (v7 + 5 >= v20)
              goto LABEL_32;
            v18 = *(_QWORD *)(v21 + 8 * v15);
            if (!v18)
            {
              v19 = v7 + 6;
              while (v20 != v19)
              {
                v18 = *(_QWORD *)(v21 + 8 * v19++);
                if (v18)
                {
                  v15 = v19 - 1;
                  goto LABEL_28;
                }
              }
LABEL_32:
              outlined consume of Set<CAFAutomakerSetting>.Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    v13 = (v18 - 1) & v18;
    v14 = __clz(__rbit64(v18)) + (v15 << 6);
LABEL_29:
    v16 = *(id *)(*(_QWORD *)(v5 + 48) + 8 * v14);
    if (!v16)
      goto LABEL_32;
    while (1)
    {
      objc_msgSend(v16, *a3, a2);

      v7 = v15;
      v8 = v13;
      if ((v5 & 0x8000000000000000) == 0)
        break;
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v16 = v27;
        swift_unknownObjectRelease();
        v15 = v7;
        v13 = v8;
        if (v27)
          continue;
      }
      goto LABEL_32;
    }
  }
  __break(1u);
}

uint64_t type metadata accessor for CAFUIProminentAncestorObserver()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for CAFUITileDataSource()
{
  return objc_opt_self();
}

unint64_t specialized Set.union<A>(_:)(unint64_t result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v5;
  void **v6;
  void *v7;
  id v8;
  uint64_t v9;

  v2 = result;
  v9 = a2;
  if (!(result >> 62))
  {
    v3 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v3)
      goto LABEL_3;
    return v9;
  }
  result = _CocoaArrayWrapper.endIndex.getter();
  v3 = result;
  if (!result)
    return v9;
LABEL_3:
  if (v3 >= 1)
  {
    if ((v2 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v3; ++i)
      {
        v5 = (void *)MEMORY[0x23B813418](i, v2);
        specialized Set._Variant.insert(_:)(&v8, v5);

      }
    }
    else
    {
      v6 = (void **)(v2 + 32);
      do
      {
        v7 = *v6++;
        specialized Set._Variant.insert(_:)(&v8, v7);

        --v3;
      }
      while (v3);
    }
    return v9;
  }
  __break(1u);
  return result;
}

uint64_t specialized _ArrayProtocol.filter(_:)(unint64_t a1, uint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  id v6;
  void *v7;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;

  v3 = a1;
  v29 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
    goto LABEL_28;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    while (1)
    {
      v5 = 0;
      v25 = (char *)a2 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_settingsCache;
      v27 = v3 & 0xFFFFFFFFFFFFFF8;
      v28 = v3 & 0xC000000000000001;
      v24 = v3;
      v26 = (char *)(v3 + 32);
      v3 = (unint64_t)&unk_2508DF000;
      while (v28)
      {
        v6 = (id)MEMORY[0x23B813418](v5, v24);
LABEL_9:
        v7 = v6;
        if (__OFADD__(v5++, 1))
          goto LABEL_27;
        if (objc_msgSend(v6, sel_hasHidden) && objc_msgSend(v7, sel_hidden))
        {

        }
        else
        {
          a2 = (uint64_t *)*((_QWORD *)v25 + 5);
          v9 = objc_msgSend(v7, sel_identifier, v24);
          v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v12 = v11;

          if (a2[2] && (v13 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v12), (v14 & 1) != 0))
          {
            v15 = *(id *)(a2[7] + 8 * v13);
            swift_bridgeObjectRelease();
            while (1)
            {
              v16 = v15;
              if (objc_msgSend(v16, sel_hasHidden))
              {
                if (objc_msgSend(v16, sel_hidden))
                  break;
              }
              v17 = objc_msgSend(v16, sel_identifier);
              v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              v20 = v19;

              if (!a2[2] || (v21 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v20), (v22 & 1) == 0))
              {
                swift_bridgeObjectRelease();

                goto LABEL_22;
              }
              v15 = *(id *)(a2[7] + 8 * v21);
              swift_bridgeObjectRelease();

            }
          }
          else
          {
            swift_bridgeObjectRelease();
LABEL_22:
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            a2 = &v29;
            specialized ContiguousArray._endMutation()();
          }
        }
        if (v5 == v4)
          return v29;
      }
      if (v5 < *(_QWORD *)(v27 + 16))
        break;
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      v4 = _CocoaArrayWrapper.endIndex.getter();
      if (!v4)
        return MEMORY[0x24BEE4AF8];
    }
    v6 = *(id *)&v26[8 * v5];
    goto LABEL_9;
  }
  return MEMORY[0x24BEE4AF8];
}

uint64_t specialized Set.init<A>(_:)(unint64_t a1)
{
  unint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t i;
  void *v6;
  void **v7;
  void *v8;
  id v9;
  uint64_t v10;

  v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
  lazy protocol witness table accessor for type CAFAutomakerSetting and conformance NSObject();
  result = Set.init(minimumCapacity:)();
  v10 = result;
  if (v2)
  {
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (!v4)
      return v10;
  }
  else
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v4)
      return v10;
  }
  if (v4 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v4; ++i)
      {
        v6 = (void *)MEMORY[0x23B813418](i, a1);
        specialized Set._Variant.insert(_:)(&v9, v6);

      }
    }
    else
    {
      v7 = (void **)(a1 + 32);
      do
      {
        v8 = *v7++;
        specialized Set._Variant.insert(_:)(&v9, v8);

        --v4;
      }
      while (v4);
    }
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t specialized _ArrayProtocol.filter(_:)(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  unint64_t v4;
  id v5;
  void *v6;
  unint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;

  v2 = a1;
  v28 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
    goto LABEL_41;
  for (i = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10); i; i = _CocoaArrayWrapper.endIndex.getter())
  {
    v21 = v2;
    v4 = 0;
    v22 = i;
    v23 = OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleProminentSettings;
    v26 = v2 & 0xFFFFFFFFFFFFFF8;
    v27 = v2 & 0xC000000000000001;
    v25 = v2 + 32;
    while (1)
    {
      if (v27)
      {
        v5 = (id)MEMORY[0x23B813418](v4, v21);
      }
      else
      {
        if (v4 >= *(_QWORD *)(v26 + 16))
          goto LABEL_38;
        v5 = *(id *)(v25 + 8 * v4);
      }
      v6 = v5;
      if (__OFADD__(v4++, 1))
        goto LABEL_39;
      if (objc_msgSend(v5, sel_hasHidden) && objc_msgSend(v6, sel_hidden))
      {

        goto LABEL_6;
      }
      v8 = *(_QWORD *)(a2 + v23);
      if (v8 >> 62)
      {
        swift_bridgeObjectRetain_n();
        v9 = _CocoaArrayWrapper.endIndex.getter();
        if (!v9)
          goto LABEL_4;
      }
      else
      {
        v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain_n();
        if (!v9)
          goto LABEL_4;
      }
      if ((v8 & 0xC000000000000001) != 0)
        v10 = (id)MEMORY[0x23B813418](0, v8);
      else
        v10 = *(id *)(v8 + 32);
      v11 = v10;
      v2 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
      v12 = static NSObject.== infix(_:_:)();

      if ((v12 & 1) != 0)
      {
LABEL_19:

        swift_bridgeObjectRelease_n();
        goto LABEL_5;
      }
      if (v9 != 1)
        break;
LABEL_4:
      swift_bridgeObjectRelease_n();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      v2 = (uint64_t)&v28;
      specialized ContiguousArray._endMutation()();
LABEL_5:
      i = v22;
LABEL_6:
      if (v4 == i)
        return v28;
    }
    if ((v8 & 0xC000000000000001) != 0)
    {
      v13 = 1;
      while (1)
      {
        MEMORY[0x23B813418](v13, v8);
        v14 = v13 + 1;
        if (__OFADD__(v13, 1))
          break;
        v15 = static NSObject.== infix(_:_:)();
        swift_unknownObjectRelease();
        if ((v15 & 1) != 0)
          goto LABEL_19;
        ++v13;
        if (v14 == v9)
          goto LABEL_4;
      }
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    v16 = 5;
    while (1)
    {
      v17 = v16 - 3;
      if (__OFADD__(v16 - 4, 1))
        break;
      v18 = *(id *)(v8 + 8 * v16);
      v19 = static NSObject.== infix(_:_:)();

      if ((v19 & 1) != 0)
        goto LABEL_19;
      ++v16;
      if (v17 == v9)
        goto LABEL_4;
    }
LABEL_40:
    __break(1u);
LABEL_41:
    ;
  }
  return MEMORY[0x24BEE4AF8];
}

uint64_t specialized CAFUITileDataSource.collectionView(_:numberOfItemsInSection:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;

  v4 = CAFUITileDataSource.firstSettingsSection.getter();
  v5 = OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleSettingsSections;
  v6 = *(_QWORD *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleSettingsSections) + 16);
  v7 = __OFADD__(v4, v6);
  v8 = v4 + v6;
  if (v7)
  {
    __break(1u);
    goto LABEL_18;
  }
  if (v8 > a1)
  {
    v2 = OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleProminentSettings;
    v9 = *(_QWORD *)(v1 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleProminentSettings);
    if (!(v9 >> 62))
    {
      v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_5;
    }
LABEL_18:
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
LABEL_5:
    if (v10)
      v11 = a1 == 0;
    else
      v11 = 0;
    if (v11)
    {
      v14 = *(_QWORD *)(v1 + v2);
      if (v14 >> 62)
      {
        swift_bridgeObjectRetain();
        v17 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        return v17;
      }
      v15 = v14 & 0xFFFFFFFFFFFFF8;
      return *(_QWORD *)(v15 + 16);
    }
    v12 = (unint64_t *)(v1 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_listItems);
    swift_beginAccess();
    if (*v12 >> 62)
    {
      swift_bridgeObjectRetain();
      v16 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v16)
        goto LABEL_24;
    }
    else if (!*(_QWORD *)((*v12 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_24;
    }
    v13 = *(_QWORD *)(v1 + v2);
    if (v13 >> 62)
    {
      swift_bridgeObjectRetain();
      v19 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v19)
      {
LABEL_13:
        if (a1 == 1)
        {
LABEL_31:
          v23 = *v12;
          if (*v12 >> 62)
            goto LABEL_32;
LABEL_28:
          v15 = v23 & 0xFFFFFFFFFFFFF8;
          return *(_QWORD *)(v15 + 16);
        }
LABEL_24:
        v20 = CAFUITileDataSource.firstSettingsSection.getter();
        v21 = a1 - v20;
        if (__OFSUB__(a1, v20))
        {
          __break(1u);
        }
        else if ((v21 & 0x8000000000000000) == 0)
        {
          v22 = *(_QWORD *)(v1 + v5);
          if (v21 < *(_QWORD *)(v22 + 16))
          {
            v23 = *(_QWORD *)(v22 + 48 * v21 + 72);
            if (v23 >> 62)
            {
LABEL_32:
              swift_bridgeObjectRetain();
              v24 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              return v24;
            }
            goto LABEL_28;
          }
          goto LABEL_35;
        }
        __break(1u);
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
    }
    else if (*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_13;
    }
    if (!a1)
      goto LABEL_31;
    goto LABEL_24;
  }
LABEL_36:
  _StringGuts.grow(_:)(53);
  v25._object = (void *)0x800000023757DF20;
  v25._countAndFlagsBits = 0xD000000000000032;
  String.append(_:)(v25);
  v26._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27._countAndFlagsBits = 46;
  v27._object = (void *)0xE100000000000000;
  String.append(_:)(v27);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized CAFUITileDataSource.automakerSettingService(_:didUpdateProminenceInfo:)()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  id v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;

  CAFUITileDataSource.refreshProminentSection(reloadSection:)(0);
  v19 = v0;
  v1 = *(_QWORD *)&v0[OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_settingsSections];
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
  {
    v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_16;
  }
  swift_bridgeObjectRetain_n();
  v3 = (unint64_t *)(v1 + 72);
  v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
  do
  {
    v5 = *(v3 - 4);
    v6 = *(v3 - 2);
    v20 = *(v3 - 3);
    v21 = *(v3 - 5);
    v7 = (void *)*(v3 - 1);
    v8 = *v3;
    v22 = v7;
    swift_bridgeObjectRetain_n();
    v9 = v19;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10 = specialized _ArrayProtocol.filter(_:)(v8, (uint64_t)v9);
    swift_bridgeObjectRelease();

    if (v10 >> 62)
    {
      swift_bridgeObjectRetain();
      v17 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v17)
      {
LABEL_3:
        swift_bridgeObjectRelease();
        goto LABEL_4;
      }
    }
    else if (!*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_3;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11 = v22;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
    v12 = v4;
    v13 = v4[2];
    v14 = v12;
    v15 = v12[3];
    if (v13 >= v15 >> 1)
      v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v13 + 1, 1, v14);
    v14[2] = v13 + 1;
    v16 = &v14[6 * v13];
    v4 = v14;
    v16[4] = v21;
    v16[5] = v5;
    v16[6] = v20;
    v16[7] = v6;
    v16[8] = v7;
    v16[9] = v10;
LABEL_4:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    v3 += 6;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease_n();
LABEL_16:
  *(_QWORD *)&v19[OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleSettingsSections] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  CAFUITileDataSource.reloadView()();
  return swift_bridgeObjectRelease();
}

uint64_t destroy for CAFUIAutomakerSettingsSection(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for CAFUIAutomakerSettingsSection(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v6 = (void *)a2[4];
  v5 = a2[5];
  a1[4] = v6;
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v7 = v6;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for CAFUIAutomakerSettingsSection(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (void *)a1[4];
  v5 = (void *)a2[4];
  a1[4] = v5;
  v6 = v5;

  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for CAFUIAutomakerSettingsSection(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v5 = *(void **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);

  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CAFUIAutomakerSettingsSection(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CAFUIAutomakerSettingsSection(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CAFUIAutomakerSettingsSection()
{
  return &type metadata for CAFUIAutomakerSettingsSection;
}

uint64_t specialized CAFUIProminentAncestorObserver.automakerSettingService(_:didUpdateHidden:)()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  id v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  id v22;

  result = MEMORY[0x23B813CDC](v0 + OBJC_IVAR____TtC5CAFUIP33_0E4D121C5C9C3A69D68EDC06FF2740D730CAFUIProminentAncestorObserver_delegate);
  if (result)
  {
    v2 = result;
    CAFUITileDataSource.refreshProminentSection(reloadSection:)(0);
    v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_settingsSections);
    v4 = *(_QWORD *)(v3 + 16);
    if (v4)
    {
      swift_bridgeObjectRetain_n();
      v5 = (unint64_t *)(v3 + 72);
      v21 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v18 = v2;
      while (1)
      {
        v6 = *(v5 - 4);
        v7 = *(v5 - 2);
        v19 = *(v5 - 3);
        v20 = *(v5 - 5);
        v8 = (void *)*(v5 - 1);
        v9 = *v5;
        v22 = v8;
        swift_bridgeObjectRetain_n();
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v10 = specialized _ArrayProtocol.filter(_:)(v9, v2);
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        if (v10 >> 62)
        {
          swift_bridgeObjectRetain();
          v16 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v16)
          {
LABEL_8:
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v11 = v22;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
              v12 = v21;
            else
              v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, v21);
            v14 = v12[2];
            v13 = v12[3];
            if (v14 >= v13 >> 1)
              v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v14 + 1, 1, v12);
            v12[2] = v14 + 1;
            v21 = v12;
            v15 = &v12[6 * v14];
            v15[4] = v20;
            v15[5] = v6;
            v2 = v18;
            v15[6] = v19;
            v15[7] = v7;
            v15[8] = v8;
            v15[9] = v10;
            goto LABEL_5;
          }
        }
        else if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          goto LABEL_8;
        }
        swift_bridgeObjectRelease();
LABEL_5:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        v5 += 6;
        if (!--v4)
        {
          swift_bridgeObjectRelease_n();
          v17 = v21;
          goto LABEL_19;
        }
      }
    }
    v17 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_19:
    *(_QWORD *)(v2 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleSettingsSections) = v17;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    CAFUITileDataSource.reloadView()();
    swift_unknownObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void partial apply for closure #1 in CAFUITileDataSource.collectionView.didset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  closure #1 in CAFUITileDataSource.collectionView.didset(a1, a2, a3, *(void **)(v3 + 16));
}

uint64_t sub_23755881C()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in CAFUITileDataSource.updated(setting:)()
{
  uint64_t v0;

  closure #1 in CAFUITileDataSource.updated(setting:)(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

{
  uint64_t v0;

  closure #1 in CAFUITileDataSource.updated(setting:)(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_23755884C()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed () -> ()()
{
  uint64_t v0;

  return thunk for @callee_guaranteed () -> ()(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

uint64_t sub_23755887C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_2375588BC()
{
  return swift_deallocObject();
}

uint64_t sub_2375588CC()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CAFUITileDataSource.reloadView()()
{
  uint64_t v0;

  return closure #1 in CAFUITileDataSource.reloadView()(v0);
}

uint64_t sub_2375588F8()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in CAFUITileDataSource.reloadView()()
{
  uint64_t v0;

  return closure #1 in closure #1 in CAFUITileDataSource.reloadView()(*(void **)(v0 + 16));
}

uint64_t sub_237558924()
{
  return swift_deallocObject();
}

id partial apply for closure #2 in closure #1 in closure #1 in CAFUITileDataSource.reloadView()(int a1)
{
  uint64_t v1;

  return closure #2 in closure #1 in closure #1 in CAFUITileDataSource.reloadView()(a1, *(id *)(v1 + 16));
}

uint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x23B813BE0](MEMORY[0x24BEE12C8], v4);
    atomic_store(result, a1);
  }
  return result;
}

Swift::Bool __swiftcall CAFUIHeaderFooterTableView._shouldShowHeadersAndFooters()()
{
  return 1;
}

id CAFUIHeaderFooterTableView.__allocating_init(frame:style:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  objc_class *v5;

  return objc_msgSend(objc_allocWithZone(v5), sel_initWithFrame_style_, a1, a2, a3, a4, a5);
}

id CAFUIHeaderFooterTableView.init(frame:style:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  void *v5;
  objc_super v12;

  v12.receiver = v5;
  v12.super_class = (Class)type metadata accessor for CAFUIHeaderFooterTableView();
  return objc_msgSendSuper2(&v12, sel_initWithFrame_style_, a1, a2, a3, a4, a5);
}

uint64_t type metadata accessor for CAFUIHeaderFooterTableView()
{
  return objc_opt_self();
}

id CAFUIHeaderFooterTableView.init(coder:)(void *a1)
{
  void *v1;
  id v3;
  objc_super v5;

  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for CAFUIHeaderFooterTableView();
  v3 = objc_msgSendSuper2(&v5, sel_initWithCoder_, a1);

  return v3;
}

id CAFUIHeaderFooterTableView.__deallocating_deinit()
{
  return CAFUIStackView.__deallocating_deinit(type metadata accessor for CAFUIHeaderFooterTableView);
}

id CAFUITableViewController.tableView.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC5CAFUI24CAFUITableViewController_tableView);
}

id CAFUITableViewController.__allocating_init(style:)(uint64_t a1)
{
  objc_class *v1;
  id v3;
  id v4;
  char *v5;
  id v6;
  objc_super v8;

  v3 = objc_allocWithZone(v1);
  v4 = objc_allocWithZone((Class)type metadata accessor for CAFUIHeaderFooterTableView());
  v5 = (char *)v3;
  v6 = objc_msgSend(v4, sel_initWithFrame_style_, a1, 0.0, 0.0, 0.0, 0.0);
  *(_QWORD *)&v5[OBJC_IVAR____TtC5CAFUI24CAFUITableViewController_tableView] = v6;

  v8.receiver = v5;
  v8.super_class = v1;
  return objc_msgSendSuper2(&v8, sel_initWithNibName_bundle_, 0, 0);
}

id CAFUITableViewController.init(style:)(uint64_t a1)
{
  void *v1;
  id v3;
  char *v4;
  id v5;
  objc_super v7;

  v3 = objc_allocWithZone((Class)type metadata accessor for CAFUIHeaderFooterTableView());
  v4 = v1;
  v5 = objc_msgSend(v3, sel_initWithFrame_style_, a1, 0.0, 0.0, 0.0, 0.0);
  *(_QWORD *)&v4[OBJC_IVAR____TtC5CAFUI24CAFUITableViewController_tableView] = v5;

  v7.receiver = v4;
  v7.super_class = (Class)type metadata accessor for CAFUITableViewController();
  return objc_msgSendSuper2(&v7, sel_initWithNibName_bundle_, 0, 0);
}

uint64_t type metadata accessor for CAFUITableViewController()
{
  return objc_opt_self();
}

Swift::Void __swiftcall CAFUITableViewController.viewDidLoad()()
{
  char *v0;
  void *v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  id v35;
  Class isa;
  objc_super v37;

  v37.receiver = v0;
  v37.super_class = (Class)type metadata accessor for CAFUITableViewController();
  objc_msgSendSuper2(&v37, sel_viewDidLoad);
  v1 = *(void **)&v0[OBJC_IVAR____TtC5CAFUI24CAFUITableViewController_tableView];
  objc_msgSend(v1, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  v2 = (void *)objc_opt_self();
  v3 = objc_msgSend(v2, sel_tableBackgroundColor);
  if (!v3)
  {
    __break(1u);
    goto LABEL_11;
  }
  v4 = v3;
  objc_msgSend(v1, sel_setBackgroundColor_, v3);

  objc_msgSend(v1, sel__setHeaderAndFooterViewsFloat_, 0);
  v5 = objc_msgSend(v0, sel_view);
  if (!v5)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v6 = v5;
  v7 = objc_msgSend(v2, sel_tableBackgroundColor);
  if (!v7)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v8 = v7;
  objc_msgSend(v6, sel_setBackgroundColor_, v7);

  v9 = objc_msgSend(v0, sel_view);
  if (!v9)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v10 = v9;
  objc_msgSend(v9, sel_addSubview_, v1);

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_237579090;
  v12 = objc_msgSend(v1, sel_topAnchor);
  v13 = objc_msgSend(v0, sel_view);
  if (!v13)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v13;
  v15 = objc_msgSend(v13, sel_topAnchor);

  v16 = objc_msgSend(v12, sel_constraintEqualToAnchor_, v15);
  *(_QWORD *)(v11 + 32) = v16;
  v17 = objc_msgSend(v1, sel_bottomAnchor);
  v18 = objc_msgSend(v0, sel_view);
  if (!v18)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v19 = v18;
  v20 = objc_msgSend(v18, sel_safeAreaLayoutGuide);

  v21 = objc_msgSend(v20, sel_bottomAnchor);
  v22 = objc_msgSend(v17, sel_constraintEqualToAnchor_, v21);

  *(_QWORD *)(v11 + 40) = v22;
  v23 = objc_msgSend(v1, sel_leadingAnchor);
  v24 = objc_msgSend(v0, sel_view);
  if (!v24)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v25 = v24;
  v26 = objc_msgSend(v24, sel_safeAreaLayoutGuide);

  v27 = objc_msgSend(v26, sel_leadingAnchor);
  v28 = objc_msgSend(v23, sel_constraintEqualToAnchor_, v27);

  *(_QWORD *)(v11 + 48) = v28;
  v29 = objc_msgSend(v1, sel_trailingAnchor);
  v30 = objc_msgSend(v0, sel_view);
  if (v30)
  {
    v31 = v30;
    v32 = (void *)objc_opt_self();
    v33 = objc_msgSend(v31, sel_safeAreaLayoutGuide);

    v34 = objc_msgSend(v33, sel_trailingAnchor);
    v35 = objc_msgSend(v29, sel_constraintEqualToAnchor_, v34);

    *(_QWORD *)(v11 + 56) = v35;
    specialized Array._endMutation()();
    type metadata accessor for NSLayoutConstraint();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v32, sel_activateConstraints_, isa);

    return;
  }
LABEL_17:
  __break(1u);
}

Swift::Void __swiftcall CAFUITableViewController.viewWillAppear(_:)(Swift::Bool a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  objc_class *v13;
  void *v14;
  id v15;
  void *v16;
  void (*v17)(char *, char *, uint64_t);
  Class isa;
  objc_super v19;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IndexPath?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for IndexPath();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v19 - v11;
  v13 = (objc_class *)type metadata accessor for CAFUITableViewController();
  v19.receiver = v1;
  v19.super_class = v13;
  objc_msgSendSuper2(&v19, sel_viewWillAppear_, a1);
  v14 = *(void **)&v1[OBJC_IVAR____TtC5CAFUI24CAFUITableViewController_tableView];
  v15 = objc_msgSend(v14, sel_indexPathForSelectedRow);
  if (v15)
  {
    v16 = v15;
    static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();

    v17 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    v17(v5, v10, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) != 1)
    {
      v17(v12, v5, v6);
      isa = IndexPath._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v14, sel_deselectRowAtIndexPath_animated_, isa, a1);

      (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
      return;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
  }
  outlined destroy of IndexPath?((uint64_t)v5);
}

id CAFUITableViewController.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void CAFUITableViewController.init(coder:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id CAFUITableViewController.__allocating_init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v3;
  objc_class *v4;
  void *v6;
  id v7;

  v4 = v3;
  if (a2)
  {
    v6 = (void *)MEMORY[0x23B812F68]();
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = 0;
  }
  v7 = objc_msgSend(objc_allocWithZone(v4), sel_initWithNibName_bundle_, v6, a3);

  return v7;
}

void CAFUITableViewController.init(nibName:bundle:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id CAFUITableViewController.__deallocating_deinit()
{
  return CAFUIStackView.__deallocating_deinit(type metadata accessor for CAFUITableViewController);
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t specialized Collection.first.getter(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v2 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    v3 = __CocoaSet.startIndex.getter();
    v5 = v4;
    v6 = __CocoaSet.endIndex.getter();
    v8 = MEMORY[0x23B813328](v3, v5, v6, v7);
    swift_bridgeObjectRelease();
    if ((v8 & 1) != 0)
    {
LABEL_3:
      outlined consume of Set<CAFAutomakerSetting>.Index._Variant(v3, v5, v2 != 0);
      return 0;
    }
LABEL_7:
    specialized Set.subscript.getter(v3, v5, v2 != 0, a1);
    v9 = v13;
    outlined consume of Set<CAFAutomakerSetting>.Index._Variant(v3, v5, v2 != 0);
    return v9;
  }
  result = specialized _NativeSet.startIndex.getter(a1);
  if ((v12 & 1) == 0)
  {
    v5 = v11;
    if (*(_DWORD *)(a1 + 36) == (_DWORD)v11)
    {
      v3 = result;
      if (result == 1 << *(_BYTE *)(a1 + 32))
        goto LABEL_3;
      goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

void specialized Sequence.first(where:)(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  void (*v15)(char *, uint64_t, uint64_t, uint64_t);
  char *v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  _QWORD v29[2];
  char *v30;
  id v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  char *v34;
  void **v35;
  void (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;

  v30 = a3;
  v5 = type metadata accessor for IndexPath();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IndexPath?);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a1 + 16);
  v31 = a2;
  v29[1] = a1;
  if (v12)
  {
    v13 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v14 = (void **)&a2[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_dataSource];
    swift_bridgeObjectRetain();
    v35 = v14;
    swift_beginAccess();
    v33 = *(_QWORD *)(v6 + 72);
    v34 = v8;
    v36 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    v36(v11, v13, v5);
    while (1)
    {
      v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
      v15(v11, 0, 1, v5);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v5) == 1)
        break;
      v32 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
      v32(v8, v11, v5);
      v37 = IndexPath.section.getter();
      v16 = (char *)*v35;
      v17 = (char *)*v35 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_listItems;
      swift_beginAccess();
      if (*v17 >> 62)
      {
        v25 = v16;
        swift_bridgeObjectRetain();
        v18 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        v18 = *(_QWORD *)((*v17 & 0xFFFFFFFFFFFFF8) + 0x10);
        v19 = v16;
      }
      v20 = *(_QWORD *)&v16[OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleProminentSettings];
      v21 = v20 >> 62;
      if (v18)
      {
        if (v21)
        {
          swift_bridgeObjectRetain();
          v22 = _CocoaArrayWrapper.endIndex.getter();

          swift_bridgeObjectRelease();
        }
        else
        {
          v22 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);

        }
        v8 = v34;
        v23 = 1;
        if (v22)
          v23 = 2;
        if (v37 >= v23)
        {
LABEL_27:
          swift_bridgeObjectRelease();
          v28 = v30;
          v32(v30, v8, v5);
          v26 = v28;
          v27 = 0;
          goto LABEL_28;
        }
      }
      else
      {
        if (v21)
        {
          swift_bridgeObjectRetain();
          v24 = _CocoaArrayWrapper.endIndex.getter();

          swift_bridgeObjectRelease();
        }
        else
        {
          v24 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);

        }
        v8 = v34;
        if (v24)
        {
          if (v37 >= 1)
            goto LABEL_27;
        }
        else if ((v37 & 0x8000000000000000) == 0)
        {
          goto LABEL_27;
        }
      }
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      v13 += v33;
      if (!--v12)
        goto LABEL_25;
      v36(v11, v13, v5);
    }
  }
  else
  {
    v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
    swift_bridgeObjectRetain();
LABEL_25:
    v15(v11, 1, 1, v5);
  }
  swift_bridgeObjectRelease();
  v26 = v30;
  v27 = 1;
LABEL_28:
  v15(v26, v27, 1, v5);

}

uint64_t thunk for @callee_guaranteed () -> ()(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t CAFUIDataListItem.__allocating_init(symbol:text:secondaryText:badgeText:showChevron:enabled:settingsCategory:limitedUI:limitedUIImage:selectionAction:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, char a9, __int16 a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v19;
  char v21;

  v19 = swift_allocObject();
  CAFUIDataListItem.init(symbol:text:secondaryText:badgeText:showChevron:enabled:settingsCategory:limitedUI:limitedUIImage:selectionAction:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, v21, a10, (unsigned __int16)(a10 & 0x1FF) >> 8, a11, a12, a13, a14);
  return v19;
}

uint64_t CAFUIDataListItem.init(symbol:text:secondaryText:badgeText:showChevron:enabled:settingsCategory:limitedUI:limitedUIImage:selectionAction:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, char a9, char a10, char a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  void *v20;
  void *v21;

  *(_QWORD *)(v16 + 104) = 0;
  *(_OWORD *)(v16 + 32) = 0u;
  *(_OWORD *)(v16 + 48) = 0u;
  *(_QWORD *)(v16 + 64) = 0;
  *(_OWORD *)(v16 + 16) = 0u;
  swift_beginAccess();
  v20 = *(void **)(v16 + 16);
  *(_QWORD *)(v16 + 16) = a1;

  swift_beginAccess();
  *(_QWORD *)(v16 + 24) = a2;
  *(_QWORD *)(v16 + 32) = a3;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(_QWORD *)(v16 + 40) = a4;
  *(_QWORD *)(v16 + 48) = a5;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(_QWORD *)(v16 + 56) = a6;
  *(_QWORD *)(v16 + 64) = a7;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v16 + 72) = a8;
  *(_QWORD *)(v16 + 80) = a15;
  *(_QWORD *)(v16 + 88) = a16;
  swift_beginAccess();
  v21 = *(void **)(v16 + 104);
  *(_QWORD *)(v16 + 104) = a14;

  *(_BYTE *)(v16 + 96) = a13;
  *(_BYTE *)(v16 + 73) = a9;
  *(_BYTE *)(v16 + 74) = a11;
  *(_BYTE *)(v16 + 75) = a12 & 1;
  return v16;
}

void key path setter for CAFUIDataListItem.symbol : CAFUIDataListItem(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  v4 = *(void **)(v3 + 16);
  *(_QWORD *)(v3 + 16) = v2;
  v5 = v2;

}

void *CAFUIDataListItem.symbol.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  swift_beginAccess();
  v1 = *(void **)(v0 + 16);
  v2 = v1;
  return v1;
}

uint64_t key path setter for CAFUIDataListItem.text : CAFUIDataListItem(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v2 = a1[1];
  v4 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v4 + 24) = v3;
  *(_QWORD *)(v4 + 32) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t CAFUIDataListItem.text.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t key path setter for CAFUIDataListItem.secondaryText : CAFUIDataListItem(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v2 = a1[1];
  v4 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v4 + 40) = v3;
  *(_QWORD *)(v4 + 48) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t CAFUIDataListItem.secondaryText.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t key path setter for CAFUIDataListItem.badgeText : CAFUIDataListItem(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v2 = a1[1];
  v4 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v4 + 56) = v3;
  *(_QWORD *)(v4 + 64) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t CAFUIDataListItem.badgeText.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CAFUIDataListItem.showChevron.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 72);
}

uint64_t CAFUIDataListItem.enabled.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 73);
}

uint64_t CAFUIDataListItem.settingsCategory.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 74) | (*(unsigned __int8 *)(v0 + 75) << 8);
}

uint64_t key path setter for CAFUIDataListItem.selectionAction : CAFUIDataListItem(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  v6 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v6 + 80) = partial apply for thunk for @escaping @callee_guaranteed () -> (@out CAFUICellSelectionAction);
  *(_QWORD *)(v6 + 88) = v5;
  swift_retain();
  return swift_release();
}

uint64_t CAFUIDataListItem.selectionAction.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 80);
  swift_retain();
  return v1;
}

uint64_t CAFUIDataListItem.limitedUI.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 96);
}

void key path setter for CAFUIDataListItem.limitedUIImage : CAFUIDataListItem(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  v4 = *(void **)(v3 + 104);
  *(_QWORD *)(v3 + 104) = v2;
  v5 = v2;

}

void *CAFUIDataListItem.limitedUIImage.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  swift_beginAccess();
  v1 = *(void **)(v0 + 104);
  v2 = v1;
  return v1;
}

uint64_t CAFUIDataListItem.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return v0;
}

uint64_t CAFUIDataListItem.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

void *CAFUITileViewController.collapseCategoryThreshold.unsafeMutableAddressor()
{
  return &static CAFUITileViewController.collapseCategoryThreshold;
}

uint64_t static CAFUITileViewController.collapseCategoryThreshold.getter()
{
  return 9999;
}

_QWORD *CAFUITileViewController.settingsCache.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of CAFUISettingsCache((_QWORD *)(v1 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache), a1);
}

_QWORD *outlined init with copy of CAFUISettingsCache(_QWORD *a1, _QWORD *a2)
{
  initializeWithCopy for CAFUISettingsCache(a2, a1);
  return a2;
}

uint64_t CAFUITileViewController.requestContentManager.getter()
{
  return swift_retain();
}

void key path setter for CAFUITileViewController.dataSource : CAFUITileViewController(void **a1, _QWORD *a2)
{
  void *v2;
  void **v3;
  void *v4;
  id v5;

  v2 = *a1;
  v3 = (void **)(*a2 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_dataSource);
  swift_beginAccess();
  v4 = *v3;
  *v3 = v2;
  v5 = v2;

}

id CAFUITileViewController.dataSource.getter()
{
  uint64_t v0;
  id *v1;

  v1 = (id *)(v0 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_dataSource);
  swift_beginAccess();
  return *v1;
}

id CAFUITileViewController.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

_BYTE *CAFUITileViewController.__allocating_init(isRHD:prominentCategories:listItems:settingsSections:settingsCache:assetManager:requestContentManager:preventVolumeNotification:)(char a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  objc_class *v8;
  id v17;

  v17 = objc_allocWithZone(v8);
  return CAFUITileViewController.init(isRHD:prominentCategories:listItems:settingsSections:settingsCache:assetManager:requestContentManager:preventVolumeNotification:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

_BYTE *CAFUITileViewController.init(isRHD:prominentCategories:listItems:settingsSections:settingsCache:assetManager:requestContentManager:preventVolumeNotification:)(char a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  _BYTE *v8;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  id v26;
  uint64_t v27;
  id v28;
  id v29;
  Class isa;
  id v31;
  id v32;
  id v33;
  Class v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  _BYTE *v41;
  id v42;
  uint64_t v43;
  void *v44;
  void *v45;
  BOOL v46;
  id v47;
  _BYTE *v48;
  objc_super v50;
  uint64_t v51;

  v17 = &v8[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_presentedPTIdentifier];
  *v17 = 0;
  v17[1] = 0;
  v18 = &v8[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_focusLockIndexPath];
  v19 = type metadata accessor for IndexPath();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
  *(_QWORD *)&v8[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_sessionConfiguration] = 0;
  v8[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_limiting] = 0;
  v20 = v8;
  if ((MEMORY[0x24BEE4AF8] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
    v21 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x24BEE4AF8]);
  else
    v21 = MEMORY[0x24BEE4B08];
  *(_QWORD *)&v20[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_cancellables] = v21;
  v20[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_punchThroughState] = 0;
  v20[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_isRHD] = a1 & 1;
  v22 = &v20[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache];
  v24 = *(_OWORD *)(a5 + 16);
  v23 = *(_OWORD *)(a5 + 32);
  v25 = *(_OWORD *)a5;
  *((_QWORD *)v22 + 6) = *(_QWORD *)(a5 + 48);
  *((_OWORD *)v22 + 1) = v24;
  *((_OWORD *)v22 + 2) = v23;
  *(_OWORD *)v22 = v25;
  *(_QWORD *)&v20[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_assetManager] = a6;
  *(_QWORD *)&v20[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_requestContentManager] = a7;
  v26 = objc_allocWithZone((Class)type metadata accessor for CAFUITileDataSource());
  outlined retain of CAFUISettingsCache(a5);
  swift_retain();
  swift_retain();
  *(_QWORD *)&v20[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_dataSource] = CAFUITileDataSource.init(prominentCategories:listItems:settingsSections:settingsCache:)(a2, a3, a4, a5);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_237579080;
  *(_QWORD *)(v27 + 32) = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithInteger_, 2);
  v51 = v27;
  specialized Array._endMutation()();
  v28 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD740]), sel_init);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  v29 = v28;
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v29, sel_setAllowedPressTypes_, isa);

  *(_QWORD *)&v20[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_nudgeLongGestureRecognizer] = v29;
  v31 = objc_allocWithZone(MEMORY[0x24BEBDA20]);
  v32 = v29;
  v33 = objc_msgSend(v31, sel_init);
  v34 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v33, sel_setAllowedPressTypes_, v34);

  objc_msgSend(v33, sel_requireGestureRecognizerToFail_, v32);
  *(_QWORD *)&v20[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_nudgeGestureRecognizer] = v33;
  if ((a8 & 1) != 0)
  {
    v35 = objc_allocWithZone(MEMORY[0x24BE15440]);
    v36 = v33;
    v37 = objc_msgSend(v35, sel_init);
  }
  else
  {
    v38 = v33;
    v37 = 0;
  }
  *(_QWORD *)&v20[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_volumeNotificationAssertion] = v37;

  v50.receiver = v20;
  v50.super_class = (Class)type metadata accessor for CAFUITileViewController();
  v39 = objc_msgSendSuper2(&v50, sel_initWithNibName_bundle_, 0, 0);
  v40 = objc_allocWithZone(MEMORY[0x24BDB7A70]);
  v41 = v39;
  v42 = objc_msgSend(v40, sel_initWithDelegate_, v41);
  v43 = OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_sessionConfiguration;
  v44 = *(void **)&v41[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_sessionConfiguration];
  *(_QWORD *)&v41[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_sessionConfiguration] = v42;

  v45 = *(void **)&v41[v43];
  if (v45)
    v46 = objc_msgSend(v45, sel_limitedUserInterfaces) != 0;
  else
    v46 = 1;
  v41[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_limiting] = v46;
  objc_msgSend(v33, sel_setDelegate_, v41);
  v47 = v32;
  v48 = v41;
  objc_msgSend(v47, sel_setDelegate_, v48);

  swift_release();
  swift_release();
  return v48;
}

Swift::Void __swiftcall CAFUITileViewController.viewDidLoad()()
{
  char *v0;
  void *v1;
  id *v2;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  char v15;
  id v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  void *v24;
  id v25;
  void *v26;
  id v27;
  void *v28;
  id v29;
  void *v30;
  uint64_t v31;
  id v32;
  id v33;
  void *v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  void *v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  void *v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  void *v52;
  void *v53;
  id v54;
  id v55;
  id v56;
  Class isa;
  id v58;
  void *v59;
  id v60;
  id v61;
  uint64_t v62;
  objc_super v63;

  v1 = v0;
  v63.receiver = v0;
  v63.super_class = (Class)type metadata accessor for CAFUITileViewController();
  objc_msgSendSuper2(&v63, sel_viewDidLoad);
  CAFUITileViewController.setupRequestContentManager()();
  v2 = (id *)&v0[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_dataSource];
  swift_beginAccess();
  v3 = *(_QWORD *)((char *)*v2 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_settingsSections);
  v4 = *(_QWORD *)(v3 + 16);
  v5 = MEMORY[0x24BEE4AF8];
  if (v4)
  {
    v62 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
    v6 = 72;
    v5 = v62;
    do
    {
      v7 = *(_QWORD *)(v3 + v6);
      v8 = *(_QWORD *)(v62 + 16);
      v9 = *(_QWORD *)(v62 + 24);
      swift_bridgeObjectRetain();
      if (v8 >= v9 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v8 + 1, 1);
      *(_QWORD *)(v62 + 16) = v8 + 1;
      *(_QWORD *)(v62 + 8 * v8 + 32) = v7;
      v6 += 48;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
  }
  specialized Set.init<A>(_:)(v5);
  v11 = v10;
  v12 = v1;
  specialized Sequence.forEach(_:)(v11, (uint64_t)v12);
  swift_bridgeObjectRelease();

  v13 = *(void **)&v12[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_nudgeGestureRecognizer];
  objc_msgSend(v13, sel_addTarget_action_, v12, sel_nudgeGestureRecognized_);
  v14 = *(void **)&v12[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_nudgeLongGestureRecognizer];
  objc_msgSend(v14, sel_addTarget_action_, v12, sel_nudgeGestureRecognized_);
  v15 = v12[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_isRHD];
  v16 = *v2;
  v17 = specialized static CAFUITileViewController.compositionalLayout(isRHD:dataSource:)(v15);

  v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD450]), sel_initWithFrame_collectionViewLayout_, v17, 0.0, 0.0, 0.0, 0.0);
  v19 = v18;
  v20 = (void *)MEMORY[0x23B812F68](0xD000000000000017, 0x800000023757E100);
  objc_msgSend(v19, sel_setAccessibilityIdentifier_, v20);

  objc_msgSend(v19, sel_setContentInset_, 2.0, 0.0, 16.0, 0.0);
  objc_msgSend(v19, sel_setDelegate_, v12);
  objc_msgSend(v19, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  v21 = (void *)objc_opt_self();
  v22 = v19;
  v23 = objc_msgSend(v21, sel_tableBackgroundColor);
  if (!v23)
  {
    __break(1u);
    goto LABEL_17;
  }
  v24 = v23;
  objc_msgSend(v22, sel_setBackgroundColor_, v23);

  objc_msgSend(v22, sel_addGestureRecognizer_, v13);
  objc_msgSend(v22, sel_addGestureRecognizer_, v14);
  v25 = objc_msgSend(v12, sel_view);
  if (!v25)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v26 = v25;
  v27 = objc_msgSend(v21, sel_tableBackgroundColor);
  if (!v27)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v28 = v27;
  objc_msgSend(v26, sel_setBackgroundColor_, v27);

  v29 = objc_msgSend(v12, sel_view);
  if (!v29)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v30 = v29;
  objc_msgSend(v29, sel_addSubview_, v22);

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_237579090;
  v32 = objc_msgSend(v22, sel_topAnchor);
  v33 = objc_msgSend(v12, sel_view);
  if (!v33)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v34 = v33;
  v35 = objc_msgSend(v33, sel_safeAreaLayoutGuide);

  v36 = objc_msgSend(v35, sel_topAnchor);
  v37 = objc_msgSend(v32, sel_constraintEqualToAnchor_, v36);

  *(_QWORD *)(v31 + 32) = v37;
  v38 = objc_msgSend(v22, sel_bottomAnchor);
  v39 = objc_msgSend(v12, sel_view);
  if (!v39)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v40 = v39;
  v41 = objc_msgSend(v39, sel_safeAreaLayoutGuide);

  v42 = objc_msgSend(v41, sel_bottomAnchor);
  v43 = objc_msgSend(v38, sel_constraintEqualToAnchor_, v42);

  *(_QWORD *)(v31 + 40) = v43;
  v44 = objc_msgSend(v22, sel_leadingAnchor);
  v45 = objc_msgSend(v12, sel_view);
  if (!v45)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v46 = v45;
  v47 = objc_msgSend(v45, sel_safeAreaLayoutGuide);

  v48 = objc_msgSend(v47, sel_leadingAnchor);
  v49 = objc_msgSend(v44, sel_constraintEqualToAnchor_, v48);

  *(_QWORD *)(v31 + 48) = v49;
  v50 = objc_msgSend(v22, sel_trailingAnchor);
  v51 = objc_msgSend(v12, sel_view);
  if (v51)
  {
    v52 = v51;
    v53 = (void *)objc_opt_self();
    v54 = objc_msgSend(v52, sel_safeAreaLayoutGuide);

    v55 = objc_msgSend(v54, sel_trailingAnchor);
    v56 = objc_msgSend(v50, sel_constraintEqualToAnchor_, v55);

    *(_QWORD *)(v31 + 56) = v56;
    specialized Array._endMutation()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v53, sel_activateConstraints_, isa);

    v58 = *v2;
    v59 = *(void **)((char *)*v2 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_collectionView);
    *(_QWORD *)((char *)*v2 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_collectionView) = v22;
    v60 = v22;
    v61 = v58;

    CAFUITileDataSource.collectionView.didset();
    return;
  }
LABEL_23:
  __break(1u);
}

Swift::Void __swiftcall CAFUITileViewController.viewWillAppear(_:)(Swift::Bool a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  objc_class *v10;
  char *v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  void (*v22)(char *, uint64_t, uint64_t, uint64_t);
  Class isa;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  id v28;
  objc_super v29;

  v3 = type metadata accessor for IndexPath();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IndexPath?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (objc_class *)type metadata accessor for CAFUITileViewController();
  v29.receiver = v1;
  v29.super_class = v10;
  objc_msgSendSuper2(&v29, sel_viewWillAppear_, a1);
  v11 = &v1[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_dataSource];
  swift_beginAccess();
  v12 = *(void **)(*(_QWORD *)v11 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_collectionView);
  if (v12)
  {
    v13 = v12;
    v14 = objc_msgSend(v13, sel_indexPathsForSelectedItems);
    if (v14)
    {
      v15 = v14;
      v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      v17 = v16;
      v18 = *(_QWORD *)(v16 + 16);
      v25 = v1;
      if (v18)
      {
        v19 = *(unsigned __int8 *)(v4 + 80);
        v24 = v17;
        v20 = v17 + ((v19 + 32) & ~v19);
        v26 = *(_QWORD *)(v4 + 72);
        v27 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
        v28 = v13;
        v21 = a1;
        while (1)
        {
          v27(v9, v20, v3);
          v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
          v22(v9, 0, 1, v3);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) == 1)
            break;
          (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v9, v3);
          isa = IndexPath._bridgeToObjectiveC()().super.isa;
          (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
          objc_msgSend(v28, sel_deselectItemAtIndexPath_animated_, isa, v21);

          v20 += v26;
          if (!--v18)
          {
            v13 = v28;
            goto LABEL_10;
          }
        }

      }
      else
      {
        v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
LABEL_10:
        v22(v9, 1, 1, v3);

      }
      swift_bridgeObjectRelease();
      v1 = v25;
    }
    else
    {

    }
  }
  objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_volumeNotificationAssertion], sel_suspendNotifications, v24);
}

Swift::Void __swiftcall CAFUITileViewController.viewWillDisappear(_:)(Swift::Bool a1)
{
  char *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for CAFUITileViewController();
  objc_msgSendSuper2(&v3, sel_viewWillDisappear_, a1);
  objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_volumeNotificationAssertion], sel_cancelSuspension);
}

Swift::Bool __swiftcall CAFUITileViewController.collectionView(_:shouldUpdateFocusIn:)(UICollectionView *_, UICollectionViewFocusUpdateContext shouldUpdateFocusIn)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IndexPath?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v2 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_focusLockIndexPath;
  swift_beginAccess();
  outlined init with copy of UIListContentConfiguration?(v6, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for IndexPath?);
  v7 = type metadata accessor for IndexPath();
  LOBYTE(v6) = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) == 1;
  outlined destroy of UIContentConfiguration?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for IndexPath?);
  return v6;
}

Swift::Void __swiftcall CAFUITileViewController.setListItems(_:)(Swift::OpaquePointer a1)
{
  uint64_t v1;
  void **v3;
  void *v4;
  unint64_t *v5;
  unint64_t v6;
  id v7;

  v3 = (void **)(v1 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_dataSource);
  swift_beginAccess();
  v4 = *v3;
  v5 = (unint64_t *)((char *)*v3 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_listItems);
  swift_beginAccess();
  v6 = *v5;
  *v5 = (unint64_t)a1._rawValue;
  v7 = v4;
  swift_bridgeObjectRetain();
  CAFUITileDataSource.listItems.didset(v6);

  swift_bridgeObjectRelease();
}

unint64_t CAFUITileViewController.listItem(at:)()
{
  uint64_t v0;
  id *v1;
  id v2;
  unint64_t v3;

  v1 = (id *)(v0 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_dataSource);
  swift_beginAccess();
  v2 = *v1;
  v3 = CAFUITileDataSource.listItem(at:)();

  return v3;
}

uint64_t CAFUITileViewController.validate(indexPath:)()
{
  uint64_t v0;
  id *v1;
  id v2;
  char v3;

  v1 = (id *)(v0 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_dataSource);
  swift_beginAccess();
  v2 = *v1;
  v3 = CAFUITileDataSource.validate(indexPath:)();

  return v3 & 1;
}

Swift::Void __swiftcall CAFUITileViewController.reloadListItem(item:)(Swift::Int item)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void **v11;
  char *v12;
  void *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  id v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  Swift::Int v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  void *v29;
  id v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Swift::Int v35;
  _QWORD aBlock[6];

  v3 = type metadata accessor for DispatchWorkItemFlags();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (void **)(v1 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_dataSource);
  swift_beginAccess();
  v12 = (char *)*v11;
  v13 = *(void **)((char *)*v11 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_collectionView);
  if (!v13)
    return;
  v34 = v4;
  v35 = item;
  v14 = &v12[OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_listItems];
  swift_beginAccess();
  v15 = *(_QWORD *)v14;
  if (v15 >> 62)
  {
    v30 = v13;
    v31 = v12;
    swift_bridgeObjectRetain();
    v32 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v32)
      goto LABEL_4;
LABEL_12:

    return;
  }
  v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
  v17 = v13;
  v18 = v12;
  if (!v16)
    goto LABEL_12;
LABEL_4:
  v19 = *(_QWORD *)&v12[OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleProminentSettings];
  if (v19 >> 62)
  {
    swift_bridgeObjectRetain();
    v20 = _CocoaArrayWrapper.endIndex.getter();

    swift_bridgeObjectRelease();
  }
  else
  {
    v20 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);

  }
  v21 = v20 != 0;
  v22 = (unint64_t *)((char *)*v11 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_listItems);
  swift_beginAccess();
  v23 = *v22;
  if (v23 >> 62)
  {
    swift_bridgeObjectRetain();
    v24 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v24 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v25 = v35;
  if (v24 <= v35)
  {

  }
  else
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    v26 = (void *)static OS_dispatch_queue.main.getter();
    v27 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v28 = (_QWORD *)swift_allocObject();
    v28[2] = v27;
    v28[3] = v25;
    v28[4] = v21;
    aBlock[4] = partial apply for closure #1 in CAFUITileViewController.reloadListItem(item:);
    aBlock[5] = v28;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_6;
    v29 = _Block_copy(aBlock);
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock[0] = MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x23B813184](0, v10, v6, v29);
    _Block_release(v29);

    (*(void (**)(char *, uint64_t))(v34 + 8))(v6, v3);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
}

uint64_t closure #1 in CAFUITileViewController.reloadListItem(item:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  uint64_t result;
  _QWORD v11[6];

  v6 = objc_opt_self();
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = a1;
  v7[3] = a2;
  v7[4] = a3;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = partial apply for closure #1 in closure #1 in CAFUITileViewController.reloadListItem(item:);
  *(_QWORD *)(v8 + 24) = v7;
  v11[4] = partial apply for thunk for @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ();
  v11[5] = v8;
  v11[0] = MEMORY[0x24BDAC760];
  v11[1] = 1107296256;
  v11[2] = thunk for @escaping @callee_guaranteed () -> ();
  v11[3] = &block_descriptor_59;
  v9 = _Block_copy(v11);
  swift_retain();
  swift_retain();
  swift_release();
  objc_msgSend((id)v6, sel_performWithoutAnimation_, v9);
  _Block_release(v9);
  LOBYTE(v6) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((v6 & 1) != 0)
    __break(1u);
  return result;
}

void closure #1 in closure #1 in CAFUITileViewController.reloadListItem(item:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  Class isa;

  v5 = a1 + 16;
  swift_beginAccess();
  v6 = MEMORY[0x23B813CDC](v5);
  if (v6)
  {
    v7 = (void *)v6;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<IndexPath>);
    type metadata accessor for IndexPath();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_237579480;
    MEMORY[0x23B812638](a2, a3);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v7, sel_reconfigureItemsAtIndexPaths_, isa);

  }
}

Swift::Void __swiftcall CAFUITileViewController._wheelChanged(with:)(UIEvent_optional with)
{
  char *v1;
  char *v2;
  Class isa;
  int *v4;
  unsigned int (**v5)(char *, uint64_t, id);
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  objc_class *v19;
  objc_class *v20;
  uint64_t v21;
  id *v22;
  unint64_t v23;
  char *v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  objc_class *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  id v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  char *v40;
  objc_class *v41;
  os_log_type_t v42;
  uint64_t v43;
  os_log_type_t v44;
  id v45;
  unsigned int (**v46)(char *, uint64_t, id);
  uint64_t ObjectType;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  int *v51;
  os_log_type_t v52;
  objc_class *v53;
  uint64_t v54;
  int *v55;
  void *v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  double v61;
  double v62;
  double v63;
  void (*v64)(uint64_t, double);
  double v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  int *v70;
  unsigned int (**v71)(char *, uint64_t, id);
  objc_super v72;
  objc_super v73;
  objc_super v74;
  objc_super v75;
  objc_super v76;

  v2 = v1;
  isa = with.value.super.isa;
  v4 = (int *)type metadata accessor for CAFUIAutomakerSettingConfiguration(0);
  v5 = (unsigned int (**)(char *, uint64_t, id))*((_QWORD *)v4 - 1);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IndexPath?);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for IndexPath();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!isa)
  {
    __break(1u);
    return;
  }
  if (-[objc_class type](isa, sel_type) != (id)7)
  {
    v20 = (objc_class *)type metadata accessor for CAFUITileViewController();
    v76.receiver = v2;
    v76.super_class = v20;
    objc_msgSendSuper2(&v76, sel__wheelChangedWithEvent_, isa);
    return;
  }
  v71 = v5;
  v18 = (uint64_t)&v2[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_focusLockIndexPath];
  swift_beginAccess();
  outlined init with copy of UIListContentConfiguration?(v18, (uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for IndexPath?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    outlined destroy of UIContentConfiguration?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for IndexPath?);
    v19 = (objc_class *)type metadata accessor for CAFUITileViewController();
    v75.receiver = v2;
    v75.super_class = v19;
    objc_msgSendSuper2(&v75, sel__wheelChangedWithEvent_, isa);
    return;
  }
  v69 = v7;
  v70 = v4;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v13, v14);
  v21 = IndexPath.section.getter();
  v22 = (id *)&v2[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_dataSource];
  swift_beginAccess();
  v23 = *(_QWORD *)((char *)*v22 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleProminentSettings);
  if (v23 >> 62)
  {
    v68 = (uint64_t)*v22;
    swift_bridgeObjectRetain();
    v32 = _CocoaArrayWrapper.endIndex.getter();

    swift_bridgeObjectRelease();
    if (!v32)
      goto LABEL_9;
  }
  else if (!*(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_9;
  }
  if (!v21)
  {
LABEL_14:
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    v31 = (objc_class *)type metadata accessor for CAFUITileViewController();
    v72.receiver = v2;
    v72.super_class = v31;
    objc_msgSendSuper2(&v72, sel__wheelChangedWithEvent_, isa);
    return;
  }
LABEL_9:
  v68 = IndexPath.section.getter();
  v24 = (char *)*v22;
  v25 = (char *)*v22 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_listItems;
  swift_beginAccess();
  if (!(*v25 >> 62))
  {
    v26 = *(_QWORD *)((*v25 & 0xFFFFFFFFFFFFF8) + 0x10);
    v27 = v24;
    v28 = &demangling cache variable for type metadata for VStack<TupleView<(ModifiedContent<<<opaque return type of View.buttonRepeatBehavior(_:)>>.0, AccessibilityAttachmentModifier>?, SliderView, ModifiedContent<<<opaque return type of View.buttonRepeatBehavior(_:)>>.0, AccessibilityAttachmentModifier>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _BlendModeEffect>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, _PaddingLayout>)>>;
    if (v26)
      goto LABEL_11;
LABEL_18:

    goto LABEL_19;
  }
  v33 = v24;
  swift_bridgeObjectRetain();
  v34 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v28 = &demangling cache variable for type metadata for VStack<TupleView<(ModifiedContent<<<opaque return type of View.buttonRepeatBehavior(_:)>>.0, AccessibilityAttachmentModifier>?, SliderView, ModifiedContent<<<opaque return type of View.buttonRepeatBehavior(_:)>>.0, AccessibilityAttachmentModifier>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _BlendModeEffect>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, _PaddingLayout>)>>;
  if (!v34)
    goto LABEL_18;
LABEL_11:
  v29 = *(_QWORD *)&v24[v28[266]];
  if (v29 >> 62)
  {
    swift_bridgeObjectRetain();
    v30 = _CocoaArrayWrapper.endIndex.getter();

    swift_bridgeObjectRelease();
  }
  else
  {
    v30 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10);

  }
  if (v68 == (v30 != 0))
    goto LABEL_14;
LABEL_19:
  v35 = *v22;
  v36 = (void *)CAFUITileDataSource.setting(at:)((unint64_t)v17);

  if (!v36)
  {
LABEL_30:
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    v41 = (objc_class *)type metadata accessor for CAFUITileViewController();
    v74.receiver = v2;
    v74.super_class = v41;
    objc_msgSendSuper2(&v74, sel__wheelChangedWithEvent_, isa);
    return;
  }
  swift_getObjectType();
  v37 = swift_conformsToProtocol2();
  if (v37)
    v38 = v37;
  else
    v38 = 0;
  if (v37)
    v39 = v36;
  else
    v39 = 0;
  if (!v39)
  {

    goto LABEL_30;
  }
  v40 = (char *)-[objc_class subtype](isa, sel_subtype);
  if ((unint64_t)(v40 - 202) < 4)
  {
LABEL_28:
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);

    return;
  }
  if (v40 == (char *)201)
  {
    v44 = static os_log_type_t.info.getter();
    specialized static CAFUILogger.log(_:message:function:file:line:)(v44, 0xD000000000000023, 0x800000023757E160, 0xD000000000000014, 0x800000023757E140);
    v43 = 1;
LABEL_35:
    v45 = objc_msgSend((id)objc_opt_self(), sel_sharedApplication);
    v46 = (unsigned int (**)(char *, uint64_t, id))objc_msgSend(v45, sel_userInterfaceLayoutDirection);

    ObjectType = swift_getObjectType();
    v48 = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 80))(ObjectType, v38);
    if (!v48)
      goto LABEL_28;
    v49 = (void *)v48;
    v50 = v48 + OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_automakerSettingConfiguration;
    swift_beginAccess();
    outlined init with copy of UIListContentConfiguration?(v50, (uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
    v51 = v70;
    if (v71[6](v10, 1, v70))
    {
      outlined destroy of UIContentConfiguration?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
LABEL_38:

LABEL_39:
      (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
      return;
    }
    v71 = (unsigned int (**)(char *, uint64_t, id))v43;
    v54 = (uint64_t)v69;
    outlined init with copy of CAFUIAutomakerSettingConfiguration((uint64_t)v10, (uint64_t)v69);
    v55 = v49;
    outlined destroy of UIContentConfiguration?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
    v56 = *(void **)(v54 + v51[5]);
    v57 = v56;
    outlined destroy of CAFUIAutomakerSettingConfiguration(v54);
    v70 = v55;

    if (!v56)
      goto LABEL_38;
    type metadata accessor for CAFUINumericInputView();
    v58 = swift_dynamicCastClass();
    if (!v58)
    {

      goto LABEL_38;
    }
    v59 = v58 + OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_config;
    v60 = *(double *)(v58 + OBJC_IVAR____TtC5CAFUI21CAFUINumericInputView_config);
    if (v46 == v71)
    {
      v61 = *(double *)(v59 + 16);
      if (v60 < v61)
      {
        v62 = v60 + *(double *)(v59 + 24);
        if (v62 >= v61)
          v62 = *(double *)(v59 + 16);
LABEL_52:
        *(double *)v59 = v62;
        CAFUINumericInputView.updateButtons()();
        CAFUIStepperViewButton.updateColors()();
        v64 = *(void (**)(uint64_t, double))(v59 + 96);
        v65 = *(double *)v59;
        v66 = swift_retain();
        v64(v66, v65);

        swift_release();
        goto LABEL_39;
      }
    }
    else
    {
      v63 = *(double *)(v59 + 8);
      if (v63 < v60)
      {
        v62 = v60 - *(double *)(v59 + 24);
        if (v63 > v62)
          v62 = *(double *)(v59 + 8);
        goto LABEL_52;
      }
    }

    goto LABEL_39;
  }
  if (v40 == (char *)200)
  {
    v42 = static os_log_type_t.info.getter();
    specialized static CAFUILogger.log(_:message:function:file:line:)(v42, 0xD00000000000001BLL, 0x800000023757E190, 0xD000000000000014, 0x800000023757E140);
    v43 = 0;
    goto LABEL_35;
  }
  v52 = static os_log_type_t.info.getter();
  specialized static CAFUILogger.log(_:message:function:file:line:)(v52, 0xD00000000000001FLL, 0x800000023757E120, 0xD000000000000014, 0x800000023757E140);

  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  v53 = (objc_class *)type metadata accessor for CAFUITileViewController();
  v73.receiver = v2;
  v73.super_class = v53;
  objc_msgSendSuper2(&v73, sel__wheelChangedWithEvent_, isa);
}

Swift::Bool __swiftcall CAFUITileViewController.gestureRecognizerShouldBegin(_:)(UIGestureRecognizer a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Bool v7;
  uint64_t v9;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IndexPath?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  if ((static NSObject.== infix(_:_:)() & 1) == 0 && (static NSObject.== infix(_:_:)() & 1) == 0)
    return 1;
  v5 = v1 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_focusLockIndexPath;
  swift_beginAccess();
  outlined init with copy of UIListContentConfiguration?(v5, (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for IndexPath?);
  v6 = type metadata accessor for IndexPath();
  v7 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v4, 1, v6) != 1;
  outlined destroy of UIContentConfiguration?((uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for IndexPath?);
  return v7;
}

Swift::Bool __swiftcall CAFUITileViewController.gestureRecognizer(_:shouldBeRequiredToFailBy:)(UIGestureRecognizer _, UIGestureRecognizer shouldBeRequiredToFailBy)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  char v14;
  uint64_t v16;

  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IndexPath?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  if ((static NSObject.== infix(_:_:)() & 1) == 0 && (static NSObject.== infix(_:_:)() & 1) == 0)
    goto LABEL_7;
  v8 = v2 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_focusLockIndexPath;
  swift_beginAccess();
  outlined init with copy of UIListContentConfiguration?(v8, (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for IndexPath?);
  v9 = type metadata accessor for IndexPath();
  LODWORD(v8) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v7, 1, v9);
  outlined destroy of UIContentConfiguration?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for IndexPath?);
  if ((_DWORD)v8 == 1)
    goto LABEL_7;
  v10 = -[objc_class view](_.super.isa, sel_view);
  if (v10
    && (v11 = v10,
        v12 = objc_msgSend(v10, sel__focusGesturesForFailureRequirements),
        v11,
        v12))
  {
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIGestureRecognizer);
    lazy protocol witness table accessor for type CAFAutomakerSetting and conformance NSObject(&lazy protocol witness table cache variable for type UIGestureRecognizer and conformance NSObject, &lazy cache variable for type metadata for UIGestureRecognizer);
    v13 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    v14 = specialized Set.contains(_:)(shouldBeRequiredToFailBy.super.isa, v13);
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_7:
    v14 = 0;
  }
  return v14 & 1;
}

uint64_t specialized Set.contains(_:)(void *a1, uint64_t a2)
{
  id v3;
  char v4;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  id v10;
  char v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  id v15;

  if ((a2 & 0xC000000000000001) != 0)
  {
    v3 = a1;
    v4 = __CocoaSet.contains(_:)();

    return v4 & 1;
  }
  if (!*(_QWORD *)(a2 + 16)
    || (v6 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a2 + 40)),
        v7 = -1 << *(_BYTE *)(a2 + 32),
        v8 = v6 & ~v7,
        v9 = a2 + 56,
        ((*(_QWORD *)(a2 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0))
  {
LABEL_11:
    v12 = 0;
    return v12 & 1;
  }
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIGestureRecognizer);
  v10 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v8);
  v11 = static NSObject.== infix(_:_:)();

  if ((v11 & 1) == 0)
  {
    v13 = ~v7;
    v14 = (v8 + 1) & v13;
    if (((*(_QWORD *)(v9 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
    {
      do
      {
        v15 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v14);
        v12 = static NSObject.== infix(_:_:)();

        if ((v12 & 1) != 0)
          break;
        v14 = (v14 + 1) & v13;
      }
      while (((*(_QWORD *)(v9 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0);
      return v12 & 1;
    }
    goto LABEL_11;
  }
  v12 = 1;
  return v12 & 1;
}

uint64_t closure #1 in static CAFUITileViewController.compositionalLayout(isRHD:dataSource:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, char a5)
{
  double v5;
  double v6;
  double v7;
  double v8;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  BOOL v35;
  unint64_t v36;
  double v37;
  double v38;
  uint64_t v39;
  void *v40;
  id v41;
  id v42;
  void *v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  uint64_t result;
  uint64_t v53;
  id v54;
  unint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  void *v58;
  uint64_t v59;
  id v60;
  id v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  char *v70;

  v14 = type metadata accessor for UICollectionLayoutListConfiguration.FooterMode();
  v65 = *(_QWORD *)(v14 - 8);
  v66 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v64 = (char *)&v62 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = type metadata accessor for UICollectionLayoutListConfiguration.HeaderMode();
  v16 = *(_QWORD *)(v62 - 8);
  MEMORY[0x24BDAC7A8](v62);
  v63 = (char *)&v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v62 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for UICollectionLayoutListConfiguration();
  v67 = *(_QWORD *)(v22 - 8);
  v68 = v22;
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v62 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v25 = (char *)MEMORY[0x23B813CDC](a3 + 16);
  if (!v25)
    return 0;
  v69 = a2;
  v70 = v25;
  v26 = CAFUITileDataSource.firstSettingsSection.getter();
  v27 = v70;
  v28 = OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleSettingsSections;
  v29 = *(_QWORD *)(*(_QWORD *)&v70[OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleSettingsSections] + 16);
  v30 = __OFADD__(v26, v29);
  v31 = v26 + v29;
  if (v30)
  {
    __break(1u);
    goto LABEL_27;
  }
  if (v31 <= a1)
  {

    return 0;
  }
  v32 = *(double *)(a4 + 24);
  objc_msgSend(objc_msgSend(v69, sel_container), sel_effectiveContentSize);
  v34 = v33;
  swift_unknownObjectRelease();
  if ((a5 & 1) != 0)
    v7 = 45.0;
  else
    v7 = 12.0;
  if ((a5 & 1) != 0)
    v8 = 12.0;
  else
    v8 = 45.0;
  v35 = v34 < v32;
  if (v34 >= v32)
    v5 = 12.0;
  else
    v5 = v7;
  if (v35)
    v6 = v8;
  else
    v6 = 12.0;
  v36 = *(_QWORD *)&v27[OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleProminentSettings];
  if (v36 >> 62)
  {
LABEL_27:
    swift_bridgeObjectRetain();
    v53 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v53)
      goto LABEL_28;
    goto LABEL_18;
  }
  if (!*(_QWORD *)((v36 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_28;
LABEL_18:
  if (!a1)
  {
    objc_msgSend(objc_msgSend(v69, sel_container), sel_contentSize);
    v38 = v37;
    swift_unknownObjectRelease();
    if (v38 - v8 - v7 >= 496.0)
      v39 = 3;
    else
      v39 = 2;
    v40 = (void *)objc_opt_self();
    v41 = objc_msgSend(v40, sel_fractionalWidthDimension_, 1.0 / (double)v39);
    v42 = objc_msgSend(v40, sel_fractionalHeightDimension_, 1.0);
    v43 = (void *)objc_opt_self();
    v44 = objc_msgSend(v43, sel_sizeWithWidthDimension_heightDimension_, v41, v42);

    v45 = objc_msgSend((id)objc_opt_self(), sel_itemWithLayoutSize_, v44);
    v46 = objc_msgSend(v40, sel_fractionalWidthDimension_, 1.0);
    v47 = objc_msgSend(v40, sel_estimatedDimension_, 52.0);
    v48 = objc_msgSend(v43, sel_sizeWithWidthDimension_heightDimension_, v46, v47);

    v49 = objc_msgSend((id)objc_opt_self(), sel_horizontalGroupWithLayoutSize_repeatingSubitem_count_, v48, v45, v39);
    v50 = objc_msgSend((id)objc_opt_self(), sel_fixedSpacing_, 8.0);
    objc_msgSend(v49, sel_setInterItemSpacing_, v50);

    v51 = objc_msgSend((id)objc_opt_self(), sel_sectionWithGroup_, v49);
    objc_msgSend(v51, sel_setInterGroupSpacing_, 8.0);
    objc_msgSend(v51, sel_setContentInsets_, 0.0, v5, 0.0, v6);

    return (uint64_t)v51;
  }
LABEL_28:
  (*(void (**)(char *, _QWORD, uint64_t))(v19 + 104))(v21, *MEMORY[0x24BEBCA88], v18);
  UICollectionLayoutListConfiguration.init(appearance:)();
  v54 = objc_msgSend((id)objc_opt_self(), sel_clearColor);
  UICollectionLayoutListConfiguration.backgroundColor.setter();
  result = CAFUITileDataSource.firstSettingsSection.getter();
  v55 = a1 - result;
  if (!__OFSUB__(a1, result))
  {
    if ((v55 & 0x8000000000000000) != 0)
      goto LABEL_37;
    v56 = *(_QWORD *)&v70[v28];
    if (v55 >= *(_QWORD *)(v56 + 16))
      goto LABEL_37;
    v57 = (_QWORD *)(v56 + 48 * v55);
    v59 = v57[7];
    v58 = (void *)v57[8];
    if (v57[5])
    {
      (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v63, *MEMORY[0x24BEBCAC8], v62);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v60 = v58;
      swift_bridgeObjectRetain();
      UICollectionLayoutListConfiguration.headerMode.setter();
      if (v59)
      {
LABEL_33:
        (*(void (**)(char *, _QWORD, uint64_t))(v65 + 104))(v64, *MEMORY[0x24BEBCAB8], v66);
        UICollectionLayoutListConfiguration.footerMode.setter();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_36:
        swift_bridgeObjectRelease();

LABEL_37:
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSCollectionLayoutSection);
        v51 = (id)static NSCollectionLayoutSection.list(using:layoutEnvironment:)();
        objc_msgSend(v51, sel_setInterGroupSpacing_, 2.0);
        objc_msgSend(v51, sel_setContentInsets_, 0.0, v5, 0.0, v6);

        (*(void (**)(char *, uint64_t))(v67 + 8))(v24, v68);
        return (uint64_t)v51;
      }
    }
    else
    {
      v61 = v58;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v59)
        goto LABEL_33;
    }
    swift_bridgeObjectRelease();
    goto LABEL_36;
  }
  __break(1u);
  return result;
}

uint64_t CAFUITileViewController.setupRequestContentManager()()
{
  uint64_t v0;
  unint64_t v1;
  _QWORD *v2;
  os_log_type_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t i;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  void *v21;
  id v22;
  unint64_t v23;

  v2 = *(_QWORD **)(v0 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_requestContentManager);
  if (!v2)
  {
    v3 = static os_log_type_t.info.getter();
    specialized static CAFUILogger.log(_:message:function:file:line:)(v3, 0xD000000000000057, 0x800000023757ECC0, 0xD00000000000001CLL, 0x800000023757ED20);
  }
  v4 = (_QWORD *)(v0 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_dataSource);
  swift_beginAccess();
  v5 = *(_QWORD *)(*v4 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_viewSettingSet);
  v6 = *(_QWORD *)(*v4 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_prominentSettings);
  v23 = MEMORY[0x24BEE4AF8];
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if ((v5 & 0xC000000000000001) != 0)
    {
LABEL_5:
      if (!__OFADD__(v7, __CocoaSet.count.getter()))
        goto LABEL_6;
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
  }
  else
  {
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((v5 & 0xC000000000000001) != 0)
      goto LABEL_5;
  }
  if (__OFADD__(v7, *(_QWORD *)(v5 + 16)))
    goto LABEL_28;
LABEL_6:
  specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)();
  specialized Array._endMutation()();
  v8 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v8);
  v9 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v9);
  v1 = v23;
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (!(v23 >> 62))
  {
    v11 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v11)
      goto LABEL_8;
    return swift_bridgeObjectRelease();
  }
LABEL_29:
  swift_bridgeObjectRetain();
  v11 = _CocoaArrayWrapper.endIndex.getter();
  result = swift_bridgeObjectRelease();
  if (!v11)
    return swift_bridgeObjectRelease();
LABEL_8:
  if (v11 >= 1)
  {
    for (i = 0; i != v11; ++i)
    {
      if ((v1 & 0xC000000000000001) != 0)
        v13 = (id)MEMORY[0x23B813418](i, v1);
      else
        v13 = *(id *)(v1 + 8 * i + 32);
      v14 = v13;
      swift_getObjectType();
      if (swift_conformsToProtocol2())
        v15 = v14;
      else
        v15 = 0;
      if (v15)
      {
        if (v2)
        {
          v16 = (void *)v2[2];
          v17 = v14;
          v18 = objc_msgSend(v16, sel_session);
        }
        else
        {
          v19 = v14;
          v18 = 0;
        }
        swift_getObjectType();
        specialized CAFListContentRepresentable.session.setter(v18);

      }
      objc_opt_self();
      v20 = swift_dynamicCastObjCClass();
      if (v20)
      {
        v21 = (void *)v20;
        swift_beginAccess();
        v22 = v14;
        swift_retain();
        objc_setAssociatedObject(v21, &static CAFUIListContentAssociatedObjects.CellValue, v2, 0);
        swift_endAccess();

        swift_release();
      }
      else
      {

      }
    }
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

id CAFUITileViewController.__allocating_init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v3;
  objc_class *v4;
  void *v6;
  id v7;

  v4 = v3;
  if (a2)
  {
    v6 = (void *)MEMORY[0x23B812F68]();
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = 0;
  }
  v7 = objc_msgSend(objc_allocWithZone(v4), sel_initWithNibName_bundle_, v6, a3);

  return v7;
}

void CAFUITileViewController.init(nibName:bundle:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id CAFUITileViewController.__deallocating_deinit()
{
  return CAFUITileViewController.__deallocating_deinit((uint64_t (*)(_QWORD))type metadata accessor for CAFUITileViewController);
}

void CAFUITileViewController.collectionView(_:didSelectItemAt:)(void *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id *v13;
  id v14;
  char v15;
  Class isa;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  unint64_t v29;
  void (*v30)(void);
  char v31;
  char v32;
  uint64_t *v33;
  id v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t ObjectType;
  uint64_t (*v40)(uint64_t, uint64_t);
  id v41;
  Swift::String v42;
  __int128 v43;
  os_log_type_t v44;
  uint64_t v45;
  id v46;
  unint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  __int128 v51;
  unint64_t v52;
  uint64_t v53;
  Swift::String v55;
  Swift::String v56;
  __int128 v57;
  os_log_type_t v58;
  id v59;
  Swift::String v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  char *v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;

  v3 = v2;
  v6 = type metadata accessor for IndexPath();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IndexPath?);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v66 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (id *)(v2 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_dataSource);
  swift_beginAccess();
  v14 = *v13;
  v15 = CAFUITileDataSource.validate(indexPath:)();

  if ((v15 & 1) == 0)
    return;
  v65 = v7;
  v62 = v6;
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v64 = a1;
  objc_msgSend(a1, sel_deselectItemAtIndexPath_animated_, isa, 1);

  v17 = IndexPath.section.getter();
  v18 = (char *)*v13;
  v19 = (char *)*v13 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_listItems;
  swift_beginAccess();
  if (!(*v19 >> 62))
  {
    v20 = *(_QWORD *)((*v19 & 0xFFFFFFFFFFFFF8) + 0x10);
    v21 = v18;
    v22 = &demangling cache variable for type metadata for VStack<TupleView<(ModifiedContent<<<opaque return type of View.buttonRepeatBehavior(_:)>>.0, AccessibilityAttachmentModifier>?, SliderView, ModifiedContent<<<opaque return type of View.buttonRepeatBehavior(_:)>>.0, AccessibilityAttachmentModifier>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _BlendModeEffect>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, _PaddingLayout>)>>;
    if (v20)
      goto LABEL_4;
LABEL_9:

    goto LABEL_14;
  }
  v25 = v18;
  swift_bridgeObjectRetain();
  v26 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v22 = &demangling cache variable for type metadata for VStack<TupleView<(ModifiedContent<<<opaque return type of View.buttonRepeatBehavior(_:)>>.0, AccessibilityAttachmentModifier>?, SliderView, ModifiedContent<<<opaque return type of View.buttonRepeatBehavior(_:)>>.0, AccessibilityAttachmentModifier>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _BlendModeEffect>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, _PaddingLayout>)>>;
  if (!v26)
    goto LABEL_9;
LABEL_4:
  v23 = *(_QWORD *)&v18[v22[266]];
  if (v23 >> 62)
  {
    swift_bridgeObjectRetain();
    v27 = _CocoaArrayWrapper.endIndex.getter();

    swift_bridgeObjectRelease();
    if (v27)
    {
LABEL_6:
      if (v17 != 1)
        goto LABEL_14;
      goto LABEL_12;
    }
  }
  else
  {
    v24 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);

    if (v24)
      goto LABEL_6;
  }
  if (v17)
    goto LABEL_14;
LABEL_12:
  v28 = *v13;
  v29 = CAFUITileDataSource.listItem(at:)();

  if (v29)
  {
    v30 = (void (*)(void))(*(uint64_t (**)(void))(*(_QWORD *)v29 + 312))();
    v30();
    v32 = v31;
    swift_release();
    __asm { BR              X10 }
  }
LABEL_14:
  v33 = v22;
  v34 = *v13;
  v35 = (void *)CAFUITileDataSource.setting(at:)(a2);

  if (!v35)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v65 + 16))(v9, a2, v62);
    *(_QWORD *)&v67 = 0;
    *((_QWORD *)&v67 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(43);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v67 = 0xD000000000000029;
    *((_QWORD *)&v67 + 1) = 0x800000023757E200;
    lazy protocol witness table accessor for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey((unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF678], MEMORY[0x24BDCF6B8]);
    v60._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v60);
    swift_bridgeObjectRelease();
LABEL_39:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  v63 = v3;
  swift_getObjectType();
  v36 = swift_conformsToProtocol2();
  if (v36)
    v37 = v36;
  else
    v37 = 0;
  if (v36)
    v38 = v35;
  else
    v38 = 0;
  if (!v38)
    goto LABEL_39;
  ObjectType = swift_getObjectType();
  v40 = *(uint64_t (**)(uint64_t, uint64_t))(v37 + 16);
  v41 = v35;
  if ((v40(ObjectType, v37) & 1) != 0)
  {
    *(_QWORD *)&v67 = 0;
    *((_QWORD *)&v67 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v67 = 0xD00000000000001ELL;
    *((_QWORD *)&v67 + 1) = 0x800000023757E2A0;
    v42._countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 8))(ObjectType, v37);
    String.append(_:)(v42);
    swift_bridgeObjectRelease();
    v43 = v67;
    v44 = static os_log_type_t.info.getter();
    v61 = "Toggling item at index ";
    specialized static CAFUILogger.log(_:message:function:file:line:)(v44, v43, *((unint64_t *)&v43 + 1), 0xD000000000000022, 0x800000023757D8C0);
    swift_bridgeObjectRelease();
    v45 = IndexPath.section.getter();
    v46 = *v13;
    v47 = *(_QWORD *)((char *)*v13 + v33[266]);
    if (v47 >> 62)
    {
      v59 = v46;
      swift_bridgeObjectRetain();
      v48 = _CocoaArrayWrapper.endIndex.getter();

      swift_bridgeObjectRelease();
    }
    else
    {
      v48 = *(_QWORD *)((v47 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    if (v48)
      v49 = v45 == 0;
    else
      v49 = 0;
    v50 = v49;
    v51 = *(_OWORD *)(v63 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 16);
    v67 = *(_OWORD *)(v63 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache);
    v68 = v51;
    v69 = *(_OWORD *)(v63 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 32);
    v70 = *(_QWORD *)(v63 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 48);
    v52 = CAFUISettingsCache.visibleChildren(of:)(v41);
    if (v52 >> 62)
      v53 = _CocoaArrayWrapper.endIndex.getter();
    else
      v53 = *(_QWORD *)((v52 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, BOOL, uint64_t, uint64_t))(v37 + 72))(v50, v53 != 0, ObjectType, v37);
    __asm { BR              X10 }
  }
  *(_QWORD *)&v67 = 0;
  *((_QWORD *)&v67 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(40);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v67 = 0x206D657449;
  *((_QWORD *)&v67 + 1) = 0xE500000000000000;
  v55._countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 8))(ObjectType, v37);
  String.append(_:)(v55);
  swift_bridgeObjectRelease();
  v56._countAndFlagsBits = 0xD000000000000021;
  v56._object = (void *)0x800000023757E270;
  String.append(_:)(v56);
  v57 = v67;
  v58 = static os_log_type_t.info.getter();
  specialized static CAFUILogger.log(_:message:function:file:line:)(v58, v57, *((unint64_t *)&v57 + 1), 0xD000000000000022, 0x800000023757D8C0);

  swift_bridgeObjectRelease();
}

void sub_23755E280()
{
  void *v0;
  uint64_t v1;

  outlined consume of CAFUICellSelectionAction(v0, v1, 1u);
  JUMPOUT(0x23755E24CLL);
}

void sub_23755E2B8()
{
  void *v0;
  uint64_t v1;

  outlined consume of CAFUICellSelectionAction(v0, v1, 2u);
  JUMPOUT(0x23755E24CLL);
}

void sub_23755E2F0()
{
  JUMPOUT(0x23755E24CLL);
}

uint64_t closure #1 in CAFUITileViewController.collectionView(_:didSelectItemAt:)(char a1, char a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t *v7;
  Swift::String v8;
  Swift::String v9;
  os_log_type_t v10;
  Swift::String v11;
  Swift::String v12;

  if ((a1 & 1) != 0)
  {
    if ((a2 & 1) != 0)
    {
      *(_BYTE *)(a3 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_punchThroughState) = 2;
      v7 = (uint64_t *)(a3 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_presentedPTIdentifier);
      *v7 = a4;
      v7[1] = (uint64_t)a5;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    _StringGuts.grow(_:)(42);
    swift_bridgeObjectRelease();
    v8._countAndFlagsBits = a4;
    v8._object = a5;
    String.append(_:)(v8);
    v9._countAndFlagsBits = 0xD000000000000010;
    v9._object = (void *)0x800000023757EB20;
    String.append(_:)(v9);
    v10 = static os_log_type_t.info.getter();
  }
  else
  {
    _StringGuts.grow(_:)(46);
    swift_bridgeObjectRelease();
    v11._countAndFlagsBits = a4;
    v11._object = a5;
    String.append(_:)(v11);
    v12._countAndFlagsBits = 0xD000000000000014;
    v12._object = (void *)0x800000023757EB00;
    String.append(_:)(v12);
    v10 = static os_log_type_t.info.getter();
  }
  specialized static CAFUILogger.log(_:message:function:file:line:)(v10, 0xD000000000000018, 0x800000023757EAE0, 0xD000000000000022, 0x800000023757D8C0);
  return swift_bridgeObjectRelease();
}

void CAFUITileViewController.showSettingAndSiblings(_:)(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  unint64_t v4;
  void *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  Class isa;
  id v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  void **v27;
  void *v28;
  void *v29;
  id v30;
  id v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  Class v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;

  v5 = v1;
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IndexPath?);
  MEMORY[0x24BDAC7A8](v7);
  v42 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for IndexPath();
  v43 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v41 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = objc_msgSend(v1, sel_navigationController);
  if (!v11)
    goto LABEL_32;
  v2 = v11;
  v12 = objc_msgSend(v11, sel_viewControllers);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIViewController);
  v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v44 = v9;
  if (v13 >> 62)
    goto LABEL_30;
  v4 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v4)
  {
LABEL_31:
    swift_bridgeObjectRelease_n();
    while (1)
    {
LABEL_32:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_33:
      swift_bridgeObjectRetain();
      v39 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v39)
        goto LABEL_36;
LABEL_15:

      v17 = objc_msgSend(v2, sel_viewControllers);
      v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      v46 = v18;
      specialized Array.append<A>(contentsOf:)(v4);
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v2, sel_setViewControllers_animated_, isa, 1);

      v20 = objc_msgSend(v2, sel_viewControllers);
      v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v21 >> 62)
      {
        swift_bridgeObjectRetain();
        v22 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v22)
          goto LABEL_36;
      }
      else
      {
        v22 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (!v22)
          goto LABEL_36;
      }
      v23 = v22 - 1;
      if (__OFSUB__(v22, 1))
        break;
      if ((v21 & 0xC000000000000001) != 0)
        goto LABEL_38;
      if ((v23 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v23 < *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        v24 = *(id *)(v21 + 8 * v23 + 32);
        goto LABEL_22;
      }
      __break(1u);
    }
    __break(1u);
LABEL_38:
    v24 = (id)MEMORY[0x23B813418](v23, v21);
LABEL_22:
    v25 = v24;
    swift_bridgeObjectRelease();
    v26 = swift_dynamicCastClass();
    if (v26
      && (v27 = (void **)(v26 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_dataSource),
          swift_beginAccess(),
          v28 = *v27,
          (v29 = *(void **)((char *)*v27 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_collectionView)) != 0))
    {
      v30 = v29;
      v31 = v28;
      v32 = specialized CAFUITileDataSource.indexPaths(for:)(v3, (uint64_t)v31);

      v33 = v5;
      v34 = v42;
      specialized Sequence.first(where:)(v32, v33, v42);
      swift_bridgeObjectRelease();
      v36 = v43;
      v35 = v44;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v34, 1, v44) == 1)
      {

        outlined destroy of UIContentConfiguration?((uint64_t)v34, (uint64_t *)&demangling cache variable for type metadata for IndexPath?);
      }
      else
      {
        v37 = v41;
        (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v41, v34, v35);
        v38 = IndexPath._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v30, sel_scrollToItemAtIndexPath_atScrollPosition_animated_, v38, 2, 0);

        (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v35);
      }
    }
    else
    {

    }
    return;
  }
LABEL_4:
  v14 = 4;
  while (1)
  {
    v15 = v14 - 4;
    if ((v13 & 0xC000000000000001) != 0)
    {
      v16 = (id)MEMORY[0x23B813418](v14 - 4, v13);
      v3 = (void *)(v14 - 3);
      if (__OFADD__(v15, 1))
        goto LABEL_29;
    }
    else
    {
      v16 = *(id *)(v13 + 8 * v14);
      v3 = (void *)(v14 - 3);
      if (__OFADD__(v15, 1))
      {
LABEL_29:
        __break(1u);
LABEL_30:
        swift_bridgeObjectRetain();
        v4 = _CocoaArrayWrapper.endIndex.getter();
        if (!v4)
          goto LABEL_31;
        goto LABEL_4;
      }
    }
    v45 = v16;
    type metadata accessor for CAFUITileViewController();
    if (swift_dynamicCastClass())
      break;

    ++v14;
    if (v3 == (void *)v4)
      goto LABEL_31;
  }
  swift_bridgeObjectRelease_n();
  v3 = a1;
  v4 = CAFUITileViewController.hierarchicalControllers(to:)(a1);
  if (v4 >> 62)
    goto LABEL_33;
  if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_15;
LABEL_36:

  swift_bridgeObjectRelease();
}

void CAFUITileViewController.showChildren(_:isProminent:)(void *a1, char a2)
{
  char *v2;
  char *v3;
  id v6;
  void *v7;
  unint64_t v8;
  id v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  id v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  id v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  Class isa;
  uint64_t v29;
  _OWORD v30[3];
  uint64_t v31;

  v3 = v2;
  v6 = objc_msgSend(v3, sel_navigationController);
  if (v6)
  {
    v7 = v6;
    if ((a2 & 1) != 0)
    {
      v8 = CAFUITileViewController.hierarchicalControllers(to:)(a1);
      if (v8 >> 62)
        goto LABEL_21;
      if (*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        do
        {
          v9 = objc_msgSend(v7, sel_viewControllers);
          type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIViewController);
          v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          if (v10 >> 62)
          {
            swift_bridgeObjectRetain();
            v11 = _CocoaArrayWrapper.endIndex.getter();
            if (!v11)
            {
LABEL_14:
              swift_bridgeObjectRelease_n();
              break;
            }
          }
          else
          {
            v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain();
            if (!v11)
              goto LABEL_14;
          }
          v12 = 4;
          while (1)
          {
            v13 = (v10 & 0xC000000000000001) != 0
                ? (id)MEMORY[0x23B813418](v12 - 4, v10)
                : *(id *)(v10 + 8 * v12);
            v14 = v13;
            v15 = v12 - 3;
            if (__OFADD__(v12 - 4, 1))
              break;
            type metadata accessor for CAFUITileViewController();
            if (swift_dynamicCastClass())
            {
              swift_bridgeObjectRelease_n();

              v26 = objc_msgSend(v7, sel_viewControllers);
              v27 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

              *(_QWORD *)&v30[0] = v27;
              specialized Array.append<A>(contentsOf:)(v8);
              isa = Array._bridgeToObjectiveC()().super.isa;
              swift_bridgeObjectRelease();
              objc_msgSend(v7, sel_setViewControllers_animated_, isa, 0);

              goto LABEL_16;
            }

            ++v12;
            if (v15 == v11)
              goto LABEL_14;
          }
          __break(1u);
LABEL_21:
          swift_bridgeObjectRetain();
          v29 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        while (v29);
      }
      swift_bridgeObjectRelease();
    }
LABEL_16:
    v16 = v3[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_isRHD];
    v17 = *(_OWORD *)&v3[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 16];
    v30[0] = *(_OWORD *)&v3[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache];
    v30[1] = v17;
    v30[2] = *(_OWORD *)&v3[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 32];
    v31 = *(_QWORD *)&v3[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 48];
    v18 = a1;
    v19 = CAFUISettingsCache.childSettings(of:)(v18);

    v20 = CAFUISettingsCache.sections(for:parentSetting:)(v19, a1);
    swift_bridgeObjectRelease();
    v21 = *(_QWORD *)&v3[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_assetManager];
    v22 = *(_QWORD *)&v3[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_requestContentManager];
    objc_allocWithZone((Class)type metadata accessor for CAFUITileViewController());
    swift_retain();
    outlined retain of CAFUISettingsCache((uint64_t)v30);
    swift_retain();
    v23 = CAFUITileViewController.init(isRHD:prominentCategories:listItems:settingsSections:settingsCache:assetManager:requestContentManager:preventVolumeNotification:)(v16, MEMORY[0x24BEE4AF8], MEMORY[0x24BEE4AF8], v20, (uint64_t)v30, v21, v22, 0);
    v24 = objc_msgSend(v18, sel_userVisibleLabel);
    if (!v24)
    {
      v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v24 = (id)MEMORY[0x23B812F68](v25);
      swift_bridgeObjectRelease();
    }
    objc_msgSend(v23, sel_setTitle_, v24);

    objc_msgSend(v7, sel_pushViewController_animated_, v23, 1);
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

void CAFUITileViewController.resetAndReload()()
{
  void *v0;
  id v1;
  void *v2;
  id v3;
  unint64_t v4;
  char *v5;
  id v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  unsigned __int8 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  os_log_type_t v17;
  os_log_type_t v18;
  void *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  id v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  id v32;
  _OWORD v33[3];
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v1 = objc_msgSend(v0, sel_navigationController);
  if (!v1)
    goto LABEL_11;
  v2 = v1;
  v3 = objc_msgSend(v1, sel_viewControllers);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIViewController);
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v5 = v0;
  v6 = specialized Sequence.first(where:)(v4, v5);
  swift_bridgeObjectRelease();

  if (!v6)
  {

LABEL_11:
    v17 = static os_log_type_t.info.getter();
    specialized static CAFUILogger.log(_:message:function:file:line:)(v17, 0xD00000000000002ALL, 0x800000023757E960, 0xD00000000000001FLL, 0x800000023757E990);
    v18 = static os_log_type_t.info.getter();
    specialized static CAFUILogger.log(_:message:function:file:line:)(v18, 0xD000000000000019, 0x800000023757E9B0, 0xD000000000000010, 0x800000023757E9D0);
    return;
  }

  v7 = (uint64_t *)&v5[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_dataSource];
  swift_beginAccess();
  v8 = *(_QWORD *)(*v7 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_settingsSections);
  if (!*(_QWORD *)(v8 + 16))
  {
LABEL_14:
    v16 = MEMORY[0x24BEE4AF8];
    goto LABEL_15;
  }
  v9 = *(_QWORD *)(v8 + 72);
  if (!(v9 >> 62))
  {
    v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v10)
      goto LABEL_6;
    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter())
  {
LABEL_13:
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
LABEL_6:
  if ((v9 & 0xC000000000000001) != 0)
  {
    v11 = (id)MEMORY[0x23B813418](0, v9);
    goto LABEL_9;
  }
  if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v11 = *(id *)(v9 + 32);
LABEL_9:
    v12 = v11;
    swift_bridgeObjectRelease();
    v13 = objc_msgSend(v12, sel_category);

    v14 = *(_OWORD *)&v5[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 16];
    v35 = *(_OWORD *)&v5[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache];
    v15 = *(_OWORD *)&v5[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 32];
    v36 = v14;
    v37 = v15;
    v38 = *(_QWORD *)&v5[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 48];
    v16 = CAFUISettingsCache.categorySettings(for:)(v13);
LABEL_15:
    v19 = *(void **)(*v7 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_collectionView);
    v20 = *(_QWORD *)(*v7 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_prominentCategories);
    v21 = (unint64_t *)(*v7 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_listItems);
    swift_beginAccess();
    v22 = *v21;
    v24 = *(_OWORD *)&v5[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 16];
    v23 = *(_OWORD *)&v5[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 32];
    v25 = *(_OWORD *)&v5[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache];
    v34 = *(_QWORD *)&v5[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 48];
    v33[1] = v24;
    v33[2] = v23;
    v33[0] = v25;
    objc_allocWithZone((Class)type metadata accessor for CAFUITileDataSource());
    v26 = v19;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined retain of CAFUISettingsCache((uint64_t)v33);
    v27 = CAFUITileDataSource.init(prominentCategories:listItems:settingsSections:settingsCache:)(v20, v22, v16, (uint64_t)v33);
    v28 = (void *)*v7;
    *v7 = v27;

    v29 = (void *)*v7;
    v30 = *(void **)(*v7 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_collectionView);
    *(_QWORD *)(*v7 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_collectionView) = v19;
    v31 = v26;
    v32 = v29;

    CAFUITileDataSource.collectionView.didset();
    return;
  }
  __break(1u);
}

Swift::Void __swiftcall CAFUITileViewController.dismissIfModal()()
{
  void *v0;
  id v1;
  id v2;

  v1 = objc_msgSend(v0, sel_presentingViewController);
  if (v1)
  {
    v2 = v1;
    objc_msgSend(v1, sel_dismissViewControllerAnimated_completion_, 1, 0);

  }
}

uint64_t CAFUITileViewController.hierarchicalControllers(to:)(void *a1)
{
  char *v1;
  void *v2;
  os_log_type_t v4;
  uint64_t v5;
  unint64_t v6;
  id v7;
  void *v8;
  id v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  void *v23;
  id v24;
  uint64_t v25;
  void *v26;
  unsigned int v27;
  unsigned int v28;
  os_log_type_t v29;
  unsigned int v30;
  id v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(void);
  void *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 v38;
  unsigned __int8 v39;
  int v40;
  id v41;
  unint64_t v42;
  unint64_t v43;
  id v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  __int128 v48;

  v2 = v1;
  v48 = *(_OWORD *)&v1[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 32];
  if ((CAFUISettingsCache.hasAnyHiddenAncestor(_:)(a1) & 1) != 0)
  {
    v4 = static os_log_type_t.error.getter();
    v5 = 0xD000000000000025;
    v6 = 0x800000023757EC40;
    goto LABEL_15;
  }
  v7 = objc_msgSend(v1, sel_navigationController);
  if (v7)
  {
    v8 = v7;
    v9 = objc_msgSend(v7, sel_viewControllers);

    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIViewController);
    v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v10 >> 62)
    {
LABEL_39:
      swift_bridgeObjectRetain();
      v11 = _CocoaArrayWrapper.endIndex.getter();
      if (v11)
        goto LABEL_6;
    }
    else
    {
      v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v11)
      {
LABEL_6:
        v12 = 4;
        while (1)
        {
          if ((v10 & 0xC000000000000001) != 0)
            v13 = (id)MEMORY[0x23B813418](v12 - 4, v10);
          else
            v13 = *(id *)(v10 + 8 * v12);
          v14 = v13;
          v15 = v12 - 3;
          if (__OFADD__(v12 - 4, 1))
          {
            __break(1u);
            goto LABEL_39;
          }
          type metadata accessor for CAFUITileViewController();
          if (swift_dynamicCastClass())
            break;

          ++v12;
          if (v15 == v11)
            goto LABEL_13;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v17 = objc_msgSend(a1, sel_identifier);
        v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v20 = v19;

        if (*(_QWORD *)(*((_QWORD *)&v48 + 1) + 16)
          && (v21 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v20), (v22 & 1) != 0))
        {
          v23 = *(void **)(*(_QWORD *)(*((_QWORD *)&v48 + 1) + 56) + 8 * v21);
          v24 = v23;
        }
        else
        {
          v23 = 0;
        }
        swift_bridgeObjectRelease();
        swift_beginAccess();
        v25 = swift_bridgeObjectRetain();
        v26 = (void *)specialized Collection.first.getter(v25);
        swift_bridgeObjectRelease();
        if (v26)
        {
          v27 = objc_msgSend(v26, sel_category);

          if (!v23)
            goto LABEL_25;
        }
        else
        {
          v27 = 0;
          if (!v23)
          {
LABEL_25:
            v28 = objc_msgSend(a1, sel_category);
            if (v26 && v28 == v27)
            {
              v29 = static os_log_type_t.debug.getter();
              specialized static CAFUILogger.log(_:message:function:file:line:)(v29, 0xD00000000000003ELL, 0x800000023757EC00, 0xD00000000000001CLL, 0x800000023757EBE0);

              return MEMORY[0x24BEE4AF8];
            }
          }
        }
        v47 = MEMORY[0x24BEE4AF8];
        v30 = objc_msgSend(a1, sel_category);
        if (!v26 || v30 != v27)
        {
          swift_beginAccess();
          v31 = a1;
          v32 = swift_bridgeObjectRetain();
          v33 = specialized Sequence.first(where:)(v32, v31);
          swift_bridgeObjectRelease();

          if (v33)
          {
            v46 = v23;
            v34 = (uint64_t (*)(void))(*(uint64_t (**)(void))(*(_QWORD *)v33 + 312))();
            v35 = (void *)v34();
            v37 = v36;
            v39 = v38;
            v40 = v38;
            swift_release();
            if (v40)
            {
              outlined consume of CAFUICellSelectionAction(v35, v37, v39);
              swift_release();
            }
            else
            {
              v41 = v35;
              MEMORY[0x23B81301C]();
              if (*(_QWORD *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();
              swift_release();
              outlined consume of CAFUICellSelectionAction(v35, v37, 0);
            }
            v23 = v46;
          }
        }
        CAFUISettingsCache.ancestors(of:)(a1);
        v43 = v42;
        v44 = v2;
        v45 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo19CAFAutomakerSettingCG_So16UIViewControllerCs5NeverOTg5023_s5CAFUI23CAFUITileViewg73C23hierarchicalControllers33_81CEDCC541A633F7CC5FD11DB3C3FABCLL2toSaySo06f8D0CGSo19dE13C_tFAhKXEfU1_5CAFUI0klG0CTf1cn_nTf4ng_n(v43, (uint64_t)v44);
        swift_bridgeObjectRelease();

        swift_bridgeObjectRetain();
        specialized Array.append<A>(contentsOf:)(v45);
        swift_bridgeObjectRelease();

        return v47;
      }
    }
LABEL_13:
    swift_bridgeObjectRelease_n();
  }
  v4 = static os_log_type_t.info.getter();
  v5 = 0xD00000000000002ELL;
  v6 = 0x800000023757EBB0;
LABEL_15:
  specialized static CAFUILogger.log(_:message:function:file:line:)(v4, v5, v6, 0xD00000000000001CLL, 0x800000023757EBE0);
  return MEMORY[0x24BEE4AF8];
}

void CAFUITileViewController.handleSettingHiddenDisabled(_:)(void *a1)
{
  char *v1;
  unint64_t v2;
  id v3;
  char *v4;
  SEL *v5;
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  unint64_t v19;
  SEL *v21;
  uint64_t v22;
  SEL *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  id v32;
  void *v33;
  id v34;
  void *v35;
  void *v36;
  id v37;
  unint64_t v38;
  char *v39;
  id v40;
  id v41;
  id v42;
  void *v43;
  id v44;
  unint64_t v45;
  char *v46;
  id v47;
  id v48;
  id v49;
  unint64_t v50;
  id v51;
  id v52;
  os_log_type_t v53;
  os_log_type_t v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  id v60;
  id v61;
  uint64_t v62;
  char *v63;
  SEL *v64;
  void *v65;
  void *v66;

  v4 = v1;
  v5 = (SEL *)&selRef__setContinuousCornerRadius_;
  v6 = objc_msgSend(v1, sel_navigationController);
  if (!v6)
    goto LABEL_85;
  v7 = v6;
  v8 = (uint64_t)&selRef__setContinuousCornerRadius_;
  v9 = objc_msgSend(v6, sel_viewControllers);

  v10 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIViewController);
  v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v11 >> 62)
    goto LABEL_57;
  v13 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v13)
  {
LABEL_58:
    swift_bridgeObjectRelease();
    goto LABEL_85;
  }
  while (1)
  {
    v14 = v13 - 1;
    if (__OFSUB__(v13, 1))
    {
      __break(1u);
LABEL_61:
      v15 = (id)MEMORY[0x23B813418](v14, v11);
      goto LABEL_9;
    }
    if ((v11 & 0xC000000000000001) != 0)
      goto LABEL_61;
    if ((v14 & 0x8000000000000000) != 0)
      break;
    if (v14 >= *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_66:
      v55 = v12;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v56 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      v23 = (SEL *)&selRef__setContinuousCornerRadius_;
      if (!v56)
        goto LABEL_67;
LABEL_33:
      swift_bridgeObjectRelease_n();
      if (v10 >> 62)
        goto LABEL_78;
      v31 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v31)
        goto LABEL_35;
LABEL_79:

      swift_bridgeObjectRelease_n();
LABEL_80:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = v66;
      goto LABEL_81;
    }
    v15 = *(id *)(v11 + 8 * v14 + 32);
LABEL_9:
    v3 = v15;
    swift_bridgeObjectRelease();
    v16 = objc_msgSend(v4, v5[137]);
    if (!v16)
      goto LABEL_85;
    v17 = v16;
    v18 = objc_msgSend(v16, *(SEL *)(v8 + 1128));

    v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    if (v11 >> 62)
      goto LABEL_63;
    v19 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v19)
      goto LABEL_21;
LABEL_12:
    v8 = v11 & 0xFFFFFFFFFFFFFF8;
    v2 = v11 + 32;
    while (!__OFSUB__(v19--, 1))
    {
      if ((v11 & 0xC000000000000001) != 0)
      {
        v21 = (SEL *)MEMORY[0x23B813418](v19, v11);
      }
      else
      {
        if ((v19 & 0x8000000000000000) != 0)
          goto LABEL_55;
        if (v19 >= *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_56;
        v21 = (SEL *)*(id *)(v2 + 8 * v19);
      }
      v5 = v21;
      type metadata accessor for CAFUITileViewController();
      v22 = swift_dynamicCastClass();

      if (v22)
      {
        v23 = (SEL *)specialized closure #1 in BidirectionalCollection.last(where:)(v19, v11);
        goto LABEL_23;
      }
      if (!v19)
        goto LABEL_21;
    }
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    swift_bridgeObjectRetain();
    v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v13)
      goto LABEL_58;
  }
  __break(1u);
LABEL_63:
  swift_bridgeObjectRetain();
  v19 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v19)
    goto LABEL_12;
LABEL_21:
  v23 = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  v8 = (uint64_t)&selRef__setContinuousCornerRadius_;
  if (!v23)
    goto LABEL_85;
  type metadata accessor for CAFUITileViewController();
  v24 = swift_dynamicCastClass();
  if (!v24)
    goto LABEL_84;
  v25 = (char *)v24;
  type metadata accessor for CAFUIPickerViewController();
  v26 = swift_dynamicCastClass();
  if (v26 && *(void **)(v26 + OBJC_IVAR____TtC5CAFUI25CAFUIPickerViewController_representable) == a1)
  {
    v3 = v3;
    v42 = objc_msgSend(v4, sel_navigationController);
    if (v42)
    {
      v43 = v42;
      v44 = objc_msgSend(v42, sel_viewControllers);
      v45 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      v46 = v4;
      v47 = specialized Sequence.first(where:)(v45, v46);
      swift_bridgeObjectRelease();

      if (v47)
        goto LABEL_48;
LABEL_49:

    }
LABEL_50:
    v53 = static os_log_type_t.info.getter();
    specialized static CAFUILogger.log(_:message:function:file:line:)(v53, 0xD00000000000002ALL, 0x800000023757E960, 0xD00000000000001FLL, 0x800000023757E990);

    goto LABEL_81;
  }
  type metadata accessor for CAFUICollectionViewController();
  v27 = swift_dynamicCastClass();
  if (v27 && *(void **)(v27 + OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_setting) == a1)
  {
    v3 = v3;
    v48 = objc_msgSend(v4, sel_navigationController);
    if (v48)
    {
      v43 = v48;
      v49 = objc_msgSend(v48, sel_viewControllers);
      v50 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      v46 = v4;
      v51 = specialized Sequence.first(where:)(v50, v46);
      swift_bridgeObjectRelease();

      if (v51)
      {
LABEL_48:
        v52 = objc_msgSend(v43, sel_popToViewController_animated_, v46, 1);

        v3 = v43;
        goto LABEL_81;
      }
      goto LABEL_49;
    }
    goto LABEL_50;
  }
  if (v25 == v4
    || (v28 = &v25[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_dataSource],
        swift_beginAccess(),
        v11 = *(_QWORD *)(*(_QWORD *)v28 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_settingsSections),
        (v2 = *(_QWORD *)(v11 + 16)) == 0))
  {

LABEL_81:
    return;
  }
  v63 = v4;
  v64 = v23;
  v65 = v3;
  v12 = *(void **)(v11 + 64);
  v10 = *(_QWORD *)(v11 + 72);
  v66 = v12;
  if (v10 >> 62)
    goto LABEL_66;
  v29 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  v30 = v12;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v23 = (SEL *)&selRef__setContinuousCornerRadius_;
  if (v29)
    goto LABEL_33;
LABEL_67:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if (v2 == 1)
  {
LABEL_68:
    swift_bridgeObjectRelease_n();

    v3 = v65;
    goto LABEL_81;
  }
  v23 = (SEL *)(v11 + 120);
  v8 = 1;
  while (1)
  {
    v57 = v8 + 1;
    if (__OFADD__(v8, 1))
      break;
    v58 = (void *)*(v23 - 1);
    v10 = (unint64_t)*v23;
    v66 = v58;
    if ((unint64_t)*v23 >> 62)
    {
      v61 = v58;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v62 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v62)
      {
LABEL_76:
        v8 = 0x2508E0000;
        v23 = (SEL *)&selRef__setContinuousCornerRadius_;
        goto LABEL_33;
      }
    }
    else
    {
      v59 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
      v60 = v58;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v59)
        goto LABEL_76;
    }
    v23 += 6;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    ++v8;
    if (v57 == v2)
      goto LABEL_68;
  }
  __break(1u);
LABEL_78:
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter())
    goto LABEL_79;
LABEL_35:
  if ((v10 & 0xC000000000000001) != 0)
  {
    v32 = (id)MEMORY[0x23B813418](0, v10);
LABEL_38:
    v33 = v32;
    swift_bridgeObjectRelease();
    if ((CAFUISettingsCache.setting(_:isAncestorOf:)(a1, v33) & 1) != 0)
    {
      v34 = objc_msgSend(v63, v23[137]);
      if (v34)
      {
        v35 = v34;
        v36 = v33;
        v37 = objc_msgSend(v34, *(SEL *)(v8 + 1128));
        v38 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        v39 = v63;
        v40 = specialized Sequence.first(where:)(v38, v39);
        swift_bridgeObjectRelease();

        if (v40)
        {
          v41 = objc_msgSend(v35, sel_popToViewController_animated_, v39, 1);
          swift_bridgeObjectRelease();

          goto LABEL_80;
        }

        v33 = v36;
      }
      v54 = static os_log_type_t.info.getter();
      specialized static CAFUILogger.log(_:message:function:file:line:)(v54, 0xD00000000000002ALL, 0x800000023757E960, 0xD00000000000001FLL, 0x800000023757E990);
    }
    swift_bridgeObjectRelease();

    goto LABEL_80;
  }
  if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v32 = *(id *)(v10 + 32);
    goto LABEL_38;
  }
  __break(1u);
LABEL_84:

LABEL_85:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall CAFUITileViewController.punchThroughController(_:didDismissPunchThroughWithIdentifier:)(CAFUIPunchThroughController *_, Swift::String didDismissPunchThroughWithIdentifier)
{
  specialized CAFUITileViewController.punchThroughController(_:didDismissPunchThroughWithIdentifier:)(didDismissPunchThroughWithIdentifier._countAndFlagsBits, didDismissPunchThroughWithIdentifier._object);
}

Swift::Void __swiftcall CAFUITileViewController.sessionConfiguration(_:limitedUserInterfacesChanged:)(CPSessionConfiguration _, CPLimitableUserInterface limitedUserInterfacesChanged)
{
  specialized CAFUITileViewController.sessionConfiguration(_:limitedUserInterfacesChanged:)(limitedUserInterfacesChanged);
}

void CAFUITileViewController.automakerSettingService(_:didUpdateHidden:)(void *a1, char a2)
{
  char *v2;
  id v4;
  id v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;

  if ((a2 & 1) != 0)
  {
    CAFUITileViewController.handleSettingHiddenDisabled(_:)(a1);
    v4 = objc_msgSend(v2, sel_navigationController);
    if (v4)
    {
      v19 = v4;
      v5 = objc_msgSend(v4, sel_viewControllers);
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIViewController);
      v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v6 >> 62)
      {
        swift_bridgeObjectRetain();
        v7 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      if (v7 < 2)
      {

      }
      else
      {
        v8 = *(_QWORD *)&v2[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 40];
        v9 = objc_msgSend(a1, sel_identifier);
        v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v12 = v11;

        if (*(_QWORD *)(v8 + 16) && (v13 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v12), (v14 & 1) != 0))
        {
          v18 = *(id *)(*(_QWORD *)(v8 + 56) + 8 * v13);
          swift_bridgeObjectRelease();
          v15 = CAFUISettingsCache.visibleChildren(of:)(v18);
          if (v15 >> 62)
            v16 = _CocoaArrayWrapper.endIndex.getter();
          else
            v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRelease();
          if (v16)
          {

          }
          else
          {
            v17 = objc_msgSend(v19, sel_popViewControllerAnimated_, 1);

          }
        }
        else
        {

          swift_bridgeObjectRelease();
        }
      }
    }
  }
}

void CAFUITileViewController.automakerSettingService(_:didUpdateDisabled:)(void *a1, char a2)
{
  if ((a2 & 1) != 0)
    CAFUITileViewController.handleSettingHiddenDisabled(_:)(a1);
}

void CAFUITileViewController.createGeneralListItem()()
{
  unint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v0 = CAFUISettingsCache.settings(for:)(0);
  if (v0 >> 62)
    v1 = _CocoaArrayWrapper.endIndex.getter();
  else
    v1 = *(_QWORD *)((v0 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRelease();
  if (v1)
  {
    v2 = (void *)MEMORY[0x23B812F68](1918985575, 0xE400000000000000);
    v3 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_, v2);

    if (v3)
    {
      v4 = (void *)MEMORY[0x23B812F68](0xD000000000000010, 0x800000023757C320);
      v5 = CAFUILocalizedStringForKey(v4);

      v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v8 = v7;

      v9 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v10 = swift_allocObject();
      *(_QWORD *)(v10 + 16) = v9;
      *(_BYTE *)(v10 + 24) = 0;
      type metadata accessor for CAFUIDataListItem();
      swift_allocObject();
      CAFUIDataListItem.init(symbol:text:secondaryText:badgeText:showChevron:enabled:settingsCategory:limitedUI:limitedUIImage:selectionAction:)((uint64_t)v3, v6, v8, 0, 0, 0, 0, 1, 1, v11, 0, 0, 0, 0, (uint64_t)partial apply for closure #1 in CAFUITileViewController.createGeneralListItem(), v10);
    }
    else
    {
      __break(1u);
    }
  }
}

void CAFUITileViewController.createAudioListItem(audioSettings:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  id v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t i;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  unint64_t v29;

  v2 = v1;
  v4 = MEMORY[0x24BEE4AF8];
  v29 = MEMORY[0x24BEE4AF8];
  if (CAFUITileViewController.createSoundItem(audioSettings:)(a1))
  {
    v5 = swift_retain();
    MEMORY[0x23B81301C](v5);
    if (*(_QWORD *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_release();
  }
  v6 = objc_msgSend(a1, sel_volumes);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CAFVolume);
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v8 = CAFUITileViewController.createVolumeListItem(volumes:)(v7);
  swift_bridgeObjectRelease();
  if (v8)
  {
    v9 = swift_retain();
    MEMORY[0x23B81301C](v9);
    if (*(_QWORD *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_release();
  }
  if (!(v29 >> 62))
  {
    if (!*(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_11;
LABEL_33:
    v18 = (void *)MEMORY[0x23B812F68](0xD000000000000013, 0x800000023757C360);
    v19 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_, v18);

    if (v19)
    {
      v20 = (void *)MEMORY[0x23B812F68](0x53474E4954544553, 0xEE004F494455415FLL);
      v21 = CAFUILocalizedStringForKey(v20);

      v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v24 = v23;

      v25 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v26 = swift_allocObject();
      *(_QWORD *)(v26 + 16) = v25;
      *(_QWORD *)(v26 + 24) = v29;
      *(_BYTE *)(v26 + 32) = 3;
      type metadata accessor for CAFUIDataListItem();
      swift_allocObject();
      CAFUIDataListItem.init(symbol:text:secondaryText:badgeText:showChevron:enabled:settingsCategory:limitedUI:limitedUIImage:selectionAction:)((uint64_t)v19, v22, v24, 0, 0, 0, 0, 1, 1, v27, 3, 0, 0, 0, (uint64_t)partial apply for specialized closure #1 in CAFUITileViewController.createAudioListItem(audioSettings:), v26);
      return;
    }
    goto LABEL_38;
  }
  swift_bridgeObjectRetain();
  v16 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v16)
    goto LABEL_33;
LABEL_11:
  v10 = *(_QWORD *)(v2 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 8);
  v28 = v4;
  if (!(v10 >> 62))
  {
    v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v11)
      goto LABEL_13;
LABEL_29:
    swift_bridgeObjectRelease();
    v15 = MEMORY[0x24BEE4AF8];
    if ((MEMORY[0x24BEE4AF8] & 0x8000000000000000) != 0)
      goto LABEL_36;
    goto LABEL_30;
  }
  swift_bridgeObjectRetain();
  v11 = _CocoaArrayWrapper.endIndex.getter();
  if (!v11)
    goto LABEL_29;
LABEL_13:
  if (v11 >= 1)
  {
    for (i = 0; i != v11; ++i)
    {
      if ((v10 & 0xC000000000000001) != 0)
        v13 = (id)MEMORY[0x23B813418](i, v10);
      else
        v13 = *(id *)(v10 + 8 * i + 32);
      v14 = v13;
      if (objc_msgSend(v13, sel_category) != 3
        || objc_msgSend(v14, sel_hasHidden) && objc_msgSend(v14, sel_hidden))
      {

      }
      else
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
    }
    swift_bridgeObjectRelease();
    v15 = v28;
    if (v28 < 0)
      goto LABEL_36;
LABEL_30:
    if ((v15 & 0x4000000000000000) == 0)
    {
      v17 = *(_QWORD *)(v15 + 16);
      goto LABEL_32;
    }
LABEL_36:
    swift_bridgeObjectRetain();
    v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
LABEL_32:
    swift_release();
    if (!v17)
    {
      swift_bridgeObjectRelease();
      return;
    }
    goto LABEL_33;
  }
  __break(1u);
LABEL_38:
  __break(1u);
}

uint64_t CAFUITileViewController.createSoundItem(audioSettings:)(void *a1)
{
  void *v2;
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  char v14;

  v2 = (void *)MEMORY[0x23B812F68](0xD000000000000011, 0x800000023757E460);
  v3 = objc_msgSend((id)objc_opt_self(), sel__systemImageNamed_, v2);

  v4 = (void *)MEMORY[0x23B812F68](0x53474E4954544553, 0xEE00444E554F535FLL);
  v5 = CAFUILocalizedStringForKey(v4);

  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v8 = v7;

  v9 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = a1;
  type metadata accessor for CAFUIDataListItem();
  v11 = swift_allocObject();
  v12 = a1;
  CAFUIDataListItem.init(symbol:text:secondaryText:badgeText:showChevron:enabled:settingsCategory:limitedUI:limitedUIImage:selectionAction:)((uint64_t)v3, v6, v8, 0, 0, 0, 0, 1, 1, v14, 0, 1, 0, 0, (uint64_t)partial apply for closure #1 in CAFUITileViewController.createSoundItem(audioSettings:), v10);
  return v11;
}

uint64_t CAFUITileViewController.createVolumeListItem(volumes:)(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;

  v1 = a1;
  if (!(a1 >> 62))
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v2)
    {
      v30 = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray.reserveCapacity(_:)();
      goto LABEL_4;
    }
    return 0;
  }
  swift_bridgeObjectRetain();
  v24 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v24)
    return 0;
  swift_bridgeObjectRetain();
  v2 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v13 = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v30 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray.reserveCapacity(_:)();
    if ((v2 & 0x8000000000000000) == 0)
    {
LABEL_4:
      v3 = 0;
      v27 = v1 & 0xC000000000000001;
      v28 = v2;
      v29 = v1;
      do
      {
        if (v27)
          v7 = (id)MEMORY[0x23B813418](v3, v1);
        else
          v7 = *(id *)(v1 + 8 * v3 + 32);
        v8 = v7;
        type metadata accessor for CAFUIServiceListItem();
        v9 = swift_allocObject();
        *(_QWORD *)(v9 + 112) = v8;
        objc_opt_self();
        v10 = swift_dynamicCastObjCClass();
        v11 = v8;
        if (v10)
        {
          v10 = CAFVolume.title.getter();
          v4 = v12;
        }
        else
        {
          v4 = 0xE000000000000000;
        }
        ++v3;
        *(_QWORD *)(v9 + 104) = 0;
        *(_OWORD *)(v9 + 32) = 0u;
        *(_OWORD *)(v9 + 48) = 0u;
        *(_QWORD *)(v9 + 64) = 0;
        *(_OWORD *)(v9 + 16) = 0u;
        swift_beginAccess();
        v5 = *(void **)(v9 + 16);
        *(_QWORD *)(v9 + 16) = 0;

        swift_beginAccess();
        *(_QWORD *)(v9 + 24) = v10;
        *(_QWORD *)(v9 + 32) = v4;
        swift_bridgeObjectRelease();
        swift_beginAccess();
        *(_QWORD *)(v9 + 40) = 0;
        *(_QWORD *)(v9 + 48) = 0;
        swift_bridgeObjectRelease();
        swift_beginAccess();
        *(_QWORD *)(v9 + 56) = 0;
        *(_QWORD *)(v9 + 64) = 0;
        swift_bridgeObjectRelease();
        *(_BYTE *)(v9 + 72) = 0;
        *(_QWORD *)(v9 + 80) = protocol witness for CAFListContentRepresentable.cellSelected(isProminent:hasChildren:) in conformance CAFPairedDevicesInformation;
        *(_QWORD *)(v9 + 88) = 0;
        swift_beginAccess();
        v6 = *(void **)(v9 + 104);
        *(_QWORD *)(v9 + 104) = 0;

        *(_BYTE *)(v9 + 96) = 0;
        *(_WORD *)(v9 + 73) = 1;
        *(_BYTE *)(v9 + 75) = 1;

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v1 = v29;
      }
      while (v28 != v3);
      v13 = v30;
      goto LABEL_13;
    }
    __break(1u);
    return 0;
  }
LABEL_13:
  v14 = (void *)MEMORY[0x23B812F68](0xD000000000000013, 0x800000023757C360);
  v15 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_, v14);

  v16 = (void *)MEMORY[0x23B812F68](0x53474E4954544553, 0xEF454D554C4F565FLL);
  v17 = CAFUILocalizedStringForKey(v16);

  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v20 = v19;

  v21 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = v21;
  *(_WORD *)(v22 + 24) = 256;
  *(_QWORD *)(v22 + 32) = v13;
  type metadata accessor for CAFUIDataListItem();
  v23 = swift_allocObject();
  CAFUIDataListItem.init(symbol:text:secondaryText:badgeText:showChevron:enabled:settingsCategory:limitedUI:limitedUIImage:selectionAction:)((uint64_t)v15, v18, v20, 0, 0, 0, 0, 1, 1, v26, 0, 1, 0, 0, (uint64_t)partial apply for closure #2 in CAFUITileViewController.createVolumeListItem(volumes:), v22);
  return v23;
}

_BYTE *specialized closure #1 in CAFUITileViewController.createAudioListItem(audioSettings:)(uint64_t a1, unint64_t a2, unsigned __int8 a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  void *v20;
  id v21;
  uint64_t v22;
  id v23;
  void *v24;
  _OWORD v26[3];
  uint64_t v27;
  _OWORD v28[3];
  uint64_t v29;

  v5 = a1 + 16;
  swift_beginAccess();
  v6 = MEMORY[0x23B813CDC](v5);
  if (!v6)
    return 0;
  v7 = (char *)v6;
  v8 = *(_BYTE *)(v6 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_isRHD);
  v9 = v6 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache;
  v11 = *(_OWORD *)(v6 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 16);
  v10 = *(_OWORD *)(v6 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 32);
  v12 = *(_OWORD *)(v6 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache);
  v29 = *(_QWORD *)(v6 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 48);
  v28[1] = v11;
  v28[2] = v10;
  v28[0] = v12;
  swift_bridgeObjectRetain();
  outlined retain of CAFUISettingsCache((uint64_t)v28);
  v13 = CAFUISettingsCache.categorySettings(for:)(a3);
  outlined release of CAFUISettingsCache((uint64_t)v28);
  v15 = *(_OWORD *)(v9 + 16);
  v14 = *(_OWORD *)(v9 + 32);
  v16 = *(_OWORD *)v9;
  v27 = *(_QWORD *)(v9 + 48);
  v26[0] = v16;
  v26[1] = v15;
  v26[2] = v14;
  v17 = *(_QWORD *)&v7[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_assetManager];
  v18 = *(_QWORD *)&v7[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_requestContentManager];
  objc_allocWithZone((Class)type metadata accessor for CAFUITileViewController());
  swift_retain();
  outlined retain of CAFUISettingsCache((uint64_t)v26);
  swift_retain();
  v19 = CAFUITileViewController.init(isRHD:prominentCategories:listItems:settingsSections:settingsCache:assetManager:requestContentManager:preventVolumeNotification:)(v8, MEMORY[0x24BEE4AF8], a2, v13, (uint64_t)v26, v17, v18, 0);
  v20 = (void *)MEMORY[0x23B812F68](0x53474E4954544553, 0xEE004F494455415FLL);
  v21 = CAFUILocalizedStringForKey(v20);

  if (!v21)
  {
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v21 = (id)MEMORY[0x23B812F68](v22);
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v19, sel_setTitle_, v21);

  v23 = objc_msgSend(v19, sel_navigationItem);
  if ((CAFUISettingsCache.hasShowAudioLogo.getter() & 1) != 0)
    v24 = (void *)CAUAssetLibraryManager.createAudioLogoBarButton()();
  else
    v24 = 0;
  objc_msgSend(v23, sel_setRightBarButtonItem_, v24);

  return v19;
}

UIBarButtonItem_optional __swiftcall CAFUITileViewController.createAudioLogoButtonIfApplicable()()
{
  UIBarButtonItem_optional v0;

  if ((CAFUISettingsCache.hasShowAudioLogo.getter() & 1) != 0)
    return CAUAssetLibraryManager.createAudioLogoBarButton()();
  v0.value.super.super.isa = 0;
  return v0;
}

void CAFUITileViewController.createRadioListItem()()
{
  unint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v0 = CAFUISettingsCache.settings(for:)(1u);
  if (v0 >> 62)
    v1 = _CocoaArrayWrapper.endIndex.getter();
  else
    v1 = *(_QWORD *)((v0 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRelease();
  if (v1)
  {
    v2 = (void *)MEMORY[0x23B812F68](0x69662E6F69646172, 0xEA00000000006C6CLL);
    v3 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_, v2);

    if (v3)
    {
      v4 = (void *)MEMORY[0x23B812F68](0x53474E4954544553, 0xEE00414944454D5FLL);
      v5 = CAFUILocalizedStringForKey(v4);

      v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v8 = v7;

      v9 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v10 = swift_allocObject();
      *(_QWORD *)(v10 + 16) = v9;
      *(_BYTE *)(v10 + 24) = 1;
      type metadata accessor for CAFUIDataListItem();
      swift_allocObject();
      CAFUIDataListItem.init(symbol:text:secondaryText:badgeText:showChevron:enabled:settingsCategory:limitedUI:limitedUIImage:selectionAction:)((uint64_t)v3, v6, v8, 0, 0, 0, 0, 1, 1, v11, 1, 0, 0, 0, (uint64_t)partial apply for closure #1 in CAFUITileViewController.createRadioListItem(), v10);
    }
    else
    {
      __break(1u);
    }
  }
}

_BYTE *closure #1 in CAFUITileViewController.createGeneralListItem()(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  void *v22;
  id v23;
  uint64_t v24;
  _OWORD v26[3];
  uint64_t v27;
  _OWORD v28[3];
  uint64_t v29;

  v7 = a1 + 16;
  swift_beginAccess();
  v8 = MEMORY[0x23B813CDC](v7);
  if (!v8)
    return 0;
  v9 = (char *)v8;
  v10 = *(_BYTE *)(v8 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_isRHD);
  v11 = v8 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache;
  v13 = *(_OWORD *)(v8 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 16);
  v12 = *(_OWORD *)(v8 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 32);
  v14 = *(_OWORD *)(v8 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache);
  v29 = *(_QWORD *)(v8 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 48);
  v28[1] = v13;
  v28[2] = v12;
  v28[0] = v14;
  outlined retain of CAFUISettingsCache((uint64_t)v28);
  v15 = CAFUISettingsCache.categorySettings(for:)(a2);
  outlined release of CAFUISettingsCache((uint64_t)v28);
  v17 = *(_OWORD *)(v11 + 16);
  v16 = *(_OWORD *)(v11 + 32);
  v18 = *(_OWORD *)v11;
  v27 = *(_QWORD *)(v11 + 48);
  v26[0] = v18;
  v26[1] = v17;
  v26[2] = v16;
  v19 = *(_QWORD *)&v9[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_assetManager];
  v20 = *(_QWORD *)&v9[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_requestContentManager];
  objc_allocWithZone((Class)type metadata accessor for CAFUITileViewController());
  swift_retain();
  outlined retain of CAFUISettingsCache((uint64_t)v26);
  swift_retain();
  v21 = CAFUITileViewController.init(isRHD:prominentCategories:listItems:settingsSections:settingsCache:assetManager:requestContentManager:preventVolumeNotification:)(v10, MEMORY[0x24BEE4AF8], MEMORY[0x24BEE4AF8], v15, (uint64_t)v26, v19, v20, 0);
  v22 = (void *)MEMORY[0x23B812F68](a3, a4);
  v23 = CAFUILocalizedStringForKey(v22);

  if (!v23)
  {
    v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v23 = (id)MEMORY[0x23B812F68](v24);
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v21, sel_setTitle_, v23);

  return v21;
}

_BYTE *closure #2 in CAFUITileViewController.createVolumeListItem(volumes:)(uint64_t a1, __int16 a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _BYTE *v12;
  char v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v23;
  _OWORD v24[3];
  uint64_t v25;
  _OWORD v26[3];
  uint64_t v27;

  v5 = a1 + 16;
  swift_beginAccess();
  v6 = MEMORY[0x23B813CDC](v5);
  if (!v6)
    return 0;
  v7 = (_BYTE *)v6;
  if ((a2 & 0x100) != 0)
  {
    v11 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v9 = *(_OWORD *)(v6 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 16);
    v8 = *(_OWORD *)(v6 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 32);
    v10 = *(_OWORD *)(v6 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache);
    v27 = *(_QWORD *)(v6 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 48);
    v26[1] = v9;
    v26[2] = v8;
    v26[0] = v10;
    outlined retain of CAFUISettingsCache((uint64_t)v26);
    v11 = CAFUISettingsCache.categorySettings(for:)(a2);
    outlined release of CAFUISettingsCache((uint64_t)v26);
  }
  v13 = v7[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_isRHD];
  if (a3 >> 62)
  {
    type metadata accessor for CAFUIDataListItem();
    swift_bridgeObjectRetain();
    v23 = _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
    a3 = v23;
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for CAFUIDataListItem();
  }
  v15 = *(_OWORD *)&v7[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 16];
  v14 = *(_OWORD *)&v7[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 32];
  v16 = *(_OWORD *)&v7[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache];
  v25 = *(_QWORD *)&v7[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 48];
  v24[1] = v15;
  v24[2] = v14;
  v24[0] = v16;
  v17 = *(_QWORD *)&v7[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_assetManager];
  v18 = *(_QWORD *)&v7[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_requestContentManager];
  objc_allocWithZone((Class)type metadata accessor for CAFUITileViewController());
  swift_retain();
  outlined retain of CAFUISettingsCache((uint64_t)v24);
  swift_retain();
  v12 = CAFUITileViewController.init(isRHD:prominentCategories:listItems:settingsSections:settingsCache:assetManager:requestContentManager:preventVolumeNotification:)(v13, MEMORY[0x24BEE4AF8], a3, v11, (uint64_t)v24, v17, v18, 1);
  v19 = (void *)MEMORY[0x23B812F68](0x53474E4954544553, 0xEF454D554C4F565FLL);
  v20 = CAFUILocalizedStringForKey(v19);

  if (!v20)
  {
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v20 = (id)MEMORY[0x23B812F68](v21);
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v12, sel_setTitle_, v20);

  return v12;
}

char *closure #1 in CAFUITileViewController.createSoundItem(audioSettings:)(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  char *v8;
  id v9;

  v3 = a1 + 16;
  swift_beginAccess();
  v4 = MEMORY[0x23B813CDC](v3);
  if (!v4)
    return 0;
  v5 = (void *)v4;
  v6 = a2;
  if ((CAFUISettingsCache.hasShowAudioLogo.getter() & 1) != 0)
    v7 = (void *)CAUAssetLibraryManager.createAudioLogoBarButton()();
  else
    v7 = 0;
  v9 = objc_allocWithZone((Class)type metadata accessor for CAFUISoundSettingsViewController());
  v8 = CAFUISoundSettingsViewController.init(audioSettings:audioLogo:)(v6, v7);

  return v8;
}

UIBarButtonItem_optional __swiftcall CAFUITileViewController.createAudioLogoBarButton()()
{
  return CAUAssetLibraryManager.createAudioLogoBarButton()();
}

id thunk for @escaping @callee_guaranteed (@unowned Int, @guaranteed NSCollectionLayoutEnvironment) -> (@owned NSCollectionLayoutSection?)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(uint64_t, uint64_t);
  void *v6;

  v5 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  swift_unknownObjectRetain();
  v6 = (void *)v5(a2, a3);
  swift_release();
  swift_unknownObjectRelease();
  return v6;
}

double CAFUITileViewCompositionalLayout.collectionViewContentSize.getter()
{
  char *v0;
  double v1;
  double v2;
  double v3;
  double v4;
  uint64_t v5;
  double v6;
  double v7;
  objc_super v10;

  v10.receiver = v0;
  v10.super_class = (Class)type metadata accessor for CAFUITileViewCompositionalLayout();
  objc_msgSendSuper2(&v10, sel_collectionViewContentSize);
  v2 = v1;
  v4 = v3 + 16.0 + 2.0;
  v5 = *(_QWORD *)&v0[OBJC_IVAR____TtC5CAFUIP33_81CEDCC541A633F7CC5FD11DB3C3FABC32CAFUITileViewCompositionalLayout_data];
  v7 = *(double *)(v5 + 16);
  v6 = *(double *)(v5 + 24);
  if (v7 != v2 || v6 != v4)
  {
    if (v7 == 0.0 && v6 == 0.0)
      objc_msgSend(v0, sel_invalidateLayout);
    *(double *)(v5 + 16) = v2;
    *(double *)(v5 + 24) = v4;
  }
  return v2;
}

id CAFUITileViewCompositionalLayout.__deallocating_deinit()
{
  return CAFUITileViewController.__deallocating_deinit((uint64_t (*)(_QWORD))type metadata accessor for CAFUITileViewCompositionalLayout);
}

id CAFUITileViewController.__deallocating_deinit(uint64_t (*a1)(_QWORD))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1(0);
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t CAFUITileViewCollectionViewData.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

unint64_t specialized closure #1 in BidirectionalCollection.last(where:)(unint64_t result, uint64_t a2)
{
  if ((a2 & 0xC000000000000001) != 0)
    return MEMORY[0x23B813418]();
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10) > result)
  {
    return (unint64_t)*(id *)(a2 + 8 * result + 32);
  }
  __break(1u);
  return result;
}

unint64_t specialized CAFUITileDataSource.indexPaths(for:)(void *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  int64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  id v18;
  unint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  int64_t *v23;
  id v24;
  uint64_t v25;
  int64_t *v26;
  int64_t *v27;
  char v29;
  unint64_t v30;
  unint64_t v31;
  int64_t v32;
  unint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  char *v39;
  uint64_t v40;
  int64_t *v41;
  id v42;
  uint64_t v43;
  int64_t *v44;
  int64_t *v45;
  char v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  id v53;
  id v54;
  int64_t *v55;
  id v56;
  uint64_t v57;
  int64_t *v58;
  int64_t *v59;
  char v61;
  unint64_t v62;
  unint64_t v63;
  id v65;
  uint64_t v66;
  char *v67;
  id v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  id v77;

  v77 = a1;
  v74 = type metadata accessor for UUID();
  v70 = *(_QWORD *)(v74 - 8);
  MEMORY[0x24BDAC7A8](v74);
  v69 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for IndexPath();
  v71 = *(_QWORD *)(v7 - 8);
  v72 = v7;
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (unint64_t)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)&v67 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v73 = (char *)&v67 - v14;
  v15 = *(_QWORD *)(a2 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_collectionView);
  if (v15)
  {
    v75 = OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleProminentSettings;
    v16 = *(_QWORD *)(a2 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleProminentSettings);
    if (v16 >> 62)
      goto LABEL_94;
    v17 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
    v18 = (id)v15;
LABEL_4:
    v76 = a2;
    v68 = (id)v15;
    if (!v17)
      goto LABEL_20;
    v67 = (char *)v10;
    v19 = (unint64_t)objc_msgSend((id)v15, sel_numberOfItemsInSection_, 0);
    if ((v19 & 0x8000000000000000) != 0)
    {
      __break(1u);
      goto LABEL_98;
    }
    v3 = v19;
    if (!v19)
      goto LABEL_20;
    v15 = 0;
    v10 = (unint64_t)&unk_2508DF000;
    while (v3 != v15)
    {
      v20 = *(_QWORD *)(a2 + v75);
      if ((v20 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        v17 = MEMORY[0x23B813418](v15, v20);
        swift_bridgeObjectRelease();
      }
      else
      {
        if (v15 >= *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_34;
        v17 = (unint64_t)*(id *)(v20 + 8 * v15 + 32);
      }
      v21 = objc_msgSend((id)v17, sel_identifier);
      v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v4 = v23;

      v24 = objc_msgSend(v77, sel_identifier);
      v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v27 = v26;

      if (v22 == v25 && v4 == v27)
      {
        swift_bridgeObjectRelease_n();
LABEL_23:
        v3 = (unint64_t)v67;
        MEMORY[0x23B812638](v15, 0);
        v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
        v31 = *(_QWORD *)(v2 + 16);
        v30 = *(_QWORD *)(v2 + 24);
        v32 = v31 + 1;
        a2 = v76;
        if (v31 >= v30 >> 1)
          goto LABEL_104;
        while (1)
        {
          *(_QWORD *)(v2 + 16) = v32;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v71 + 32))(v2+ ((*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80))+ *(_QWORD *)(v71 + 72) * v31, v3, v72);

LABEL_25:
          v4 = (int64_t *)(a2 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_listItems);
          swift_beginAccess();
          if ((unint64_t)*v4 >> 62)
          {
            swift_bridgeObjectRetain();
            v66 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (!v66)
              goto LABEL_54;
          }
          else if (!*(_QWORD *)((*v4 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            goto LABEL_54;
          }
          v33 = *(_QWORD *)(a2 + v75);
          if (v33 >> 62)
          {
LABEL_98:
            swift_bridgeObjectRetain();
            v34 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            v34 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10);
          }
          v75 = (uint64_t)v13;
          v31 = v34 != 0;
          v32 = *v4;
          if (!((unint64_t)*v4 >> 62))
            break;
          if (v32 < 0)
            v17 = *v4;
          else
            v17 = v32 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain();
          v15 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if ((v15 & 0x8000000000000000) == 0)
            goto LABEL_31;
          __break(1u);
LABEL_104:
          v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v32, 1, v2);
        }
        v15 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_31:
        if (v15)
        {
          v67 = (char *)v31;
          v17 = 0;
          v10 = (unint64_t)v4;
          goto LABEL_37;
        }
        goto LABEL_54;
      }
      v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v29 & 1) != 0)
        goto LABEL_23;
      ++v15;

      a2 = v76;
      if (v3 == v15)
      {
LABEL_20:
        v2 = MEMORY[0x24BEE4AF8];
        goto LABEL_25;
      }
    }
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    swift_unknownObjectRelease();
    while (1)
    {
      while (1)
      {
        ++v17;
        v2 = (unint64_t)v13;
        if (v15 == v17)
          goto LABEL_54;
LABEL_37:
        if (v15 == v17)
          goto LABEL_92;
        v35 = *v4;
        if ((*v4 & 0xC000000000000001) == 0)
          break;
        v13 = (char *)v2;
        swift_bridgeObjectRetain();
        v3 = MEMORY[0x23B813418](v17, v35);
        swift_bridgeObjectRelease();
        type metadata accessor for CAFUIServiceListItem();
        v47 = swift_dynamicCastClass();
        if (!v47)
          goto LABEL_35;
        v37 = v47;
LABEL_42:
        v38 = objc_msgSend(*(id *)(v37 + 112), sel_uniqueIdentifier, v67, v68);
        v39 = v69;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        v40 = UUID.uuidString.getter();
        v4 = v41;
        (*(void (**)(char *, uint64_t))(v70 + 8))(v39, v74);
        v42 = objc_msgSend(v77, sel_identifier);
        v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v45 = v44;

        if (v40 == v43 && v4 == v45)
        {
          swift_bridgeObjectRelease_n();
          a2 = v76;
LABEL_49:
          v15 = v75;
          MEMORY[0x23B812638](v17, v67);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v13 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v13 + 2) + 1, 1, (unint64_t)v13);
          v49 = *((_QWORD *)v13 + 2);
          v48 = *((_QWORD *)v13 + 3);
          if (v49 >= v48 >> 1)
            v13 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v48 > 1, v49 + 1, 1, (unint64_t)v13);
          *((_QWORD *)v13 + 2) = v49 + 1;
          (*(void (**)(char *, unint64_t, uint64_t))(v71 + 32))(&v13[((*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80))+ *(_QWORD *)(v71 + 72) * v49], v15, v72);
          v2 = (unint64_t)v13;
          swift_release();
LABEL_54:
          v70 = CAFUITileDataSource.firstSettingsSection.getter();
          v13 = (char *)OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleSettingsSections;
          v74 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_visibleSettingsSections) + 16);
          if (!v74)
          {
LABEL_84:

            return v2;
          }
          v10 = 0;
          while (1)
          {
            v50 = *(_QWORD *)&v13[a2];
            if (v10 >= *(_QWORD *)(v50 + 16))
              break;
            v51 = *(_QWORD *)(v50 + 48 * v10 + 72);
            if (v51 >> 62)
            {
              swift_bridgeObjectRetain();
              v15 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if ((v15 & 0x8000000000000000) != 0)
                goto LABEL_90;
            }
            else
            {
              v15 = *(_QWORD *)((v51 & 0xFFFFFFFFFFFFF8) + 0x10);
            }
            if (v15)
            {
              v75 = v2;
              v3 = 0;
              while (1)
              {
                if (v15 == v3)
                {
                  __break(1u);
LABEL_87:
                  __break(1u);
LABEL_88:
                  __break(1u);
                  goto LABEL_89;
                }
                v52 = *(_QWORD *)&v13[a2];
                if (v10 >= *(_QWORD *)(v52 + 16))
                  goto LABEL_87;
                v2 = *(_QWORD *)(v52 + 48 * v10 + 72);
                if ((v2 & 0xC000000000000001) != 0)
                {
                  swift_bridgeObjectRetain();
                  v53 = (id)MEMORY[0x23B813418](v3, v2);
                  swift_bridgeObjectRelease();
                }
                else
                {
                  if (v3 >= *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
                    goto LABEL_88;
                  v53 = *(id *)(v2 + 8 * v3 + 32);
                }
                v54 = objc_msgSend(v53, sel_identifier, v67);
                v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                v4 = v55;

                v56 = objc_msgSend(v77, sel_identifier);
                v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                v59 = v58;

                if (v2 == v57 && v4 == v59)
                  break;
                v61 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                a2 = v76;
                if ((v61 & 1) != 0)
                  goto LABEL_76;
                ++v3;

                if (v15 == v3)
                {
                  v2 = v75;
                  goto LABEL_56;
                }
              }
              swift_bridgeObjectRelease_n();
              a2 = v76;
LABEL_76:
              if (__OFADD__(v10, v70))
                goto LABEL_91;
              MEMORY[0x23B812638](v3, v10 + v70);
              v2 = v75;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1, v2);
              v63 = *(_QWORD *)(v2 + 16);
              v62 = *(_QWORD *)(v2 + 24);
              v15 = v63 + 1;
              if (v63 >= v62 >> 1)
                v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v62 > 1, v63 + 1, 1, v2);
              *(_QWORD *)(v2 + 16) = v15;
              (*(void (**)(unint64_t, char *, uint64_t))(v71 + 32))(v2+ ((*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80))+ *(_QWORD *)(v71 + 72) * v63, v73, v72);

            }
LABEL_56:
            if (++v10 == v74)
              goto LABEL_84;
          }
LABEL_89:
          __break(1u);
LABEL_90:
          __break(1u);
LABEL_91:
          __break(1u);
LABEL_92:
          __break(1u);
LABEL_93:
          __break(1u);
LABEL_94:
          v65 = (id)v15;
          swift_bridgeObjectRetain();
          v17 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        a2 = v76;
        if ((v46 & 1) != 0)
          goto LABEL_49;
        swift_release();
        v4 = (int64_t *)v10;
      }
      if (v17 >= *(_QWORD *)((v35 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_93;
      v13 = (char *)v2;
      v3 = *(_QWORD *)(v35 + 8 * v17 + 32);
      type metadata accessor for CAFUIServiceListItem();
      v36 = swift_dynamicCastClass();
      if (v36)
      {
        v37 = v36;
        swift_retain();
        goto LABEL_42;
      }
    }
  }
  return MEMORY[0x24BEE4AF8];
}

void specialized Set.subscript.getter(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  void *v4;
  unint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  id v10;
  char v11;
  uint64_t v12;
  id v13;
  char v14;
  id v15;
  void *v16;

  v6 = a1;
  if ((a4 & 0xC000000000000001) == 0)
  {
    if ((a3 & 1) != 0)
      goto LABEL_13;
    if (a1 < 0 || 1 << *(_BYTE *)(a4 + 32) <= a1)
    {
      __break(1u);
    }
    else if (((*(_QWORD *)(a4 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> a1) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2)
        goto LABEL_20;
      __break(1u);
LABEL_13:
      if (__CocoaSet.Index.age.getter() == *(_DWORD *)(a4 + 36))
      {
        __CocoaSet.Index.element.getter();
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v4 = v16;
        swift_unknownObjectRelease();
        v8 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a4 + 40));
        v9 = -1 << *(_BYTE *)(a4 + 32);
        v6 = v8 & ~v9;
        if (((*(_QWORD *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
        {
          v10 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v6);
          v11 = static NSObject.== infix(_:_:)();

          if ((v11 & 1) == 0)
          {
            v12 = ~v9;
            do
            {
              v6 = (v6 + 1) & v12;
              if (((*(_QWORD *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
                goto LABEL_24;
              v13 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v6);
              v14 = static NSObject.== infix(_:_:)();

            }
            while ((v14 & 1) == 0);
          }

LABEL_20:
          v15 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v6);
          return;
        }
LABEL_24:

        __break(1u);
        goto LABEL_25;
      }
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    __break(1u);
    goto LABEL_23;
  }
  if ((a3 & 1) == 0)
  {
LABEL_25:
    __break(1u);
    return;
  }
  if (a4 < 0)
    v7 = a4;
  else
    v7 = a4 & 0xFFFFFFFFFFFFFF8;
  MEMORY[0x23B813364](a1, a2, v7);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  swift_unknownObjectRelease();
}

uint64_t specialized _NativeSet.startIndex.getter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 72);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

void specialized Sequence.forEach(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  id v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void *v24;

  v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
    lazy protocol witness table accessor for type CAFAutomakerSetting and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type CAFAutomakerSetting and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
    Set.Iterator.init(_cocoa:)();
    v3 = v19;
    v18 = v20;
    v4 = v21;
    v5 = v22;
    v6 = v23;
  }
  else
  {
    v7 = -1 << *(_BYTE *)(a1 + 32);
    v18 = a1 + 56;
    v4 = ~v7;
    v8 = -v7;
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v6 = v9 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain();
    v5 = 0;
  }
  v17 = (unint64_t)(v4 + 64) >> 6;
  if (v3 < 0)
    goto LABEL_10;
  while (1)
  {
    if (v6)
    {
      v10 = (v6 - 1) & v6;
      v11 = __clz(__rbit64(v6)) | (v5 << 6);
      v12 = v5;
      goto LABEL_29;
    }
    v14 = v5 + 1;
    if (__OFADD__(v5, 1))
      break;
    if (v14 >= v17)
      goto LABEL_32;
    v15 = *(_QWORD *)(v18 + 8 * v14);
    v12 = v5 + 1;
    if (!v15)
    {
      v12 = v5 + 2;
      if (v5 + 2 >= v17)
        goto LABEL_32;
      v15 = *(_QWORD *)(v18 + 8 * v12);
      if (!v15)
      {
        v12 = v5 + 3;
        if (v5 + 3 >= v17)
          goto LABEL_32;
        v15 = *(_QWORD *)(v18 + 8 * v12);
        if (!v15)
        {
          v12 = v5 + 4;
          if (v5 + 4 >= v17)
            goto LABEL_32;
          v15 = *(_QWORD *)(v18 + 8 * v12);
          if (!v15)
          {
            v12 = v5 + 5;
            if (v5 + 5 >= v17)
              goto LABEL_32;
            v15 = *(_QWORD *)(v18 + 8 * v12);
            if (!v15)
            {
              v16 = v5 + 6;
              while (v17 != v16)
              {
                v15 = *(_QWORD *)(v18 + 8 * v16++);
                if (v15)
                {
                  v12 = v16 - 1;
                  goto LABEL_28;
                }
              }
LABEL_32:
              outlined consume of Set<CAFAutomakerSetting>.Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    v10 = (v15 - 1) & v15;
    v11 = __clz(__rbit64(v15)) + (v12 << 6);
LABEL_29:
    v13 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v11);
    if (!v13)
      goto LABEL_32;
    while (1)
    {
      objc_msgSend(v13, sel_registerObserver_, a2);

      v5 = v12;
      v6 = v10;
      if ((v3 & 0x8000000000000000) == 0)
        break;
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CAFAutomakerSetting);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v13 = v24;
        swift_unknownObjectRelease();
        v12 = v5;
        v10 = v6;
        if (v24)
          continue;
      }
      goto LABEL_32;
    }
  }
  __break(1u);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo19CAFAutomakerSettingCG_So16UIViewControllerCs5NeverOTg5023_s5CAFUI23CAFUITileViewg73C23hierarchicalControllers33_81CEDCC541A633F7CC5FD11DB3C3FABCLL2toSaySo06f8D0CGSo19dE13C_tFAhKXEfU1_5CAFUI0klG0CTf1cn_nTf4ng_n(unint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  void *v12;
  id v13;
  unint64_t v14;
  uint64_t v15;
  id v16;
  _BYTE *v17;
  id v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  _OWORD v22[3];
  uint64_t v23;
  uint64_t v24;

  v3 = a1;
  if (a1 >> 62)
    goto LABEL_16;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    result = MEMORY[0x24BEE4AF8];
    if (!v4)
      break;
    v24 = MEMORY[0x24BEE4AF8];
    result = specialized ContiguousArray.reserveCapacity(_:)();
    if (v4 < 0)
    {
      __break(1u);
      return result;
    }
    v6 = 0;
    v21 = v3 & 0xC000000000000001;
    v20 = *(_BYTE *)(a2 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_isRHD);
    v7 = *(_OWORD *)(a2 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 16);
    v22[0] = *(_OWORD *)(a2 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache);
    v22[1] = v7;
    v22[2] = *(_OWORD *)(a2 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 32);
    v23 = *(_QWORD *)(a2 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_settingsCache + 48);
    v8 = *(_QWORD *)(a2 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_assetManager);
    v9 = *(_QWORD *)(a2 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_requestContentManager);
    v10 = v3;
    while (v4 != v6)
    {
      if (v21)
        v11 = (id)MEMORY[0x23B813418](v6, v3);
      else
        v11 = *(id *)(v3 + 8 * v6 + 32);
      v12 = v11;
      v13 = v11;
      v14 = CAFUISettingsCache.childSettings(of:)(v13);

      v15 = CAFUISettingsCache.sections(for:parentSetting:)(v14, v12);
      swift_bridgeObjectRelease();
      v16 = objc_allocWithZone((Class)type metadata accessor for CAFUITileViewController());
      swift_retain();
      outlined retain of CAFUISettingsCache((uint64_t)v22);
      swift_retain();
      v17 = CAFUITileViewController.init(isRHD:prominentCategories:listItems:settingsSections:settingsCache:assetManager:requestContentManager:preventVolumeNotification:)(v20, MEMORY[0x24BEE4AF8], MEMORY[0x24BEE4AF8], v15, (uint64_t)v22, v8, v9, 0);
      v18 = objc_msgSend(v13, sel_userVisibleLabel);
      if (!v18)
      {
        v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v18 = (id)MEMORY[0x23B812F68](v19);
        swift_bridgeObjectRelease();
      }
      ++v6;
      objc_msgSend(v17, sel_setTitle_, v18);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      a2 = *(_QWORD *)(v24 + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v3 = v10;
      if (v4 == v6)
        return v24;
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return result;
}

id specialized Sequence.first(where:)(unint64_t a1, id a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  BOOL v8;
  uint64_t v9;

  if (a1 >> 62)
  {
LABEL_15:
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4)
      goto LABEL_3;
  }
  else
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
    {
LABEL_3:
      v5 = 4;
      do
      {
        v6 = v5 - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          v7 = (id)MEMORY[0x23B813418](v5 - 4, a1);
          v8 = __OFADD__(v6, 1);
          v9 = v5 - 3;
          if (v8)
            goto LABEL_14;
        }
        else
        {
          v7 = *(id *)(a1 + 8 * v5);
          v8 = __OFADD__(v6, 1);
          v9 = v5 - 3;
          if (v8)
          {
LABEL_14:
            __break(1u);
            goto LABEL_15;
          }
        }
        if (v7 == a2)
        {
          swift_bridgeObjectRelease();
          return a2;
        }

        ++v5;
      }
      while (v9 != v4);
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized Sequence.first(where:)(unint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int v10;
  char v11;
  unsigned int v12;

  if (a1 >> 62)
  {
LABEL_15:
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4)
      goto LABEL_3;
  }
  else
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
    {
LABEL_3:
      v5 = 4;
      do
      {
        v6 = v5 - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          v7 = MEMORY[0x23B813418](v5 - 4, a1);
          v8 = __OFADD__(v6, 1);
          v9 = v5 - 3;
          if (v8)
            goto LABEL_14;
        }
        else
        {
          v7 = *(_QWORD *)(a1 + 8 * v5);
          swift_retain();
          v8 = __OFADD__(v6, 1);
          v9 = v5 - 3;
          if (v8)
          {
LABEL_14:
            __break(1u);
            goto LABEL_15;
          }
        }
        v10 = *(unsigned __int8 *)(v7 + 74);
        v11 = *(_BYTE *)(v7 + 75);
        v12 = objc_msgSend(a2, sel_category);
        if ((v11 & 1) == 0 && v10 == v12)
        {
          swift_bridgeObjectRelease();
          return v7;
        }
        swift_release();
        ++v5;
      }
      while (v9 != v4);
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized Sequence.first(where:)(unint64_t a1, id a2)
{
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;

  if (a1 >> 62)
  {
LABEL_15:
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4)
      goto LABEL_3;
  }
  else
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
    {
LABEL_3:
      v5 = 0;
      do
      {
        if ((a1 & 0xC000000000000001) != 0)
        {
          v6 = (id)MEMORY[0x23B813418](v5, a1);
          v7 = v5 + 1;
          if (__OFADD__(v5, 1))
            goto LABEL_14;
        }
        else
        {
          v6 = *(id *)(a1 + 8 * v5 + 32);
          v7 = v5 + 1;
          if (__OFADD__(v5, 1))
          {
LABEL_14:
            __break(1u);
            goto LABEL_15;
          }
        }
        if (v6 == a2)
        {
          swift_bridgeObjectRelease();
          return v5;
        }

        ++v5;
      }
      while (v7 != v4);
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

void specialized CAFUITileViewController.init(coder:)()
{
  _BYTE *v0;
  _QWORD *v1;
  char *v2;
  uint64_t v3;
  unint64_t v4;

  v1 = &v0[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_presentedPTIdentifier];
  *v1 = 0;
  v1[1] = 0;
  v2 = &v0[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_focusLockIndexPath];
  v3 = type metadata accessor for IndexPath();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  *(_QWORD *)&v0[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_sessionConfiguration] = 0;
  v0[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_limiting] = 0;
  if ((MEMORY[0x24BEE4AF8] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
    v4 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x24BEE4AF8]);
  else
    v4 = MEMORY[0x24BEE4B08];
  *(_QWORD *)&v0[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_cancellables] = v4;
  v0[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_punchThroughState] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t type metadata accessor for CAFUITileViewController()
{
  uint64_t result;

  result = type metadata singleton initialization cache for CAFUITileViewController;
  if (!type metadata singleton initialization cache for CAFUITileViewController)
    return swift_getSingletonMetadata();
  return result;
}

id specialized static CAFUITileViewController.compositionalLayout(isRHD:dataSource:)(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  objc_class *v7;
  char *v8;
  void *v9;
  id v10;
  objc_super v12;
  _QWORD aBlock[6];

  type metadata accessor for CAFUITileViewCollectionViewData();
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  v3 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v3;
  *(_QWORD *)(v4 + 24) = v2;
  *(_BYTE *)(v4 + 32) = a1;
  v5 = objc_allocWithZone(MEMORY[0x24BEBD470]);
  swift_retain();
  v6 = objc_msgSend(v5, sel_init);
  objc_msgSend(v6, sel_setInterSectionSpacing_, 16.0);
  objc_msgSend(v6, sel_setContentInsetsReference_, 2);
  v7 = (objc_class *)type metadata accessor for CAFUITileViewCompositionalLayout();
  v8 = (char *)objc_allocWithZone(v7);
  *(_QWORD *)&v8[OBJC_IVAR____TtC5CAFUIP33_81CEDCC541A633F7CC5FD11DB3C3FABC32CAFUITileViewCompositionalLayout_data] = v2;
  aBlock[4] = partial apply for closure #1 in static CAFUITileViewController.compositionalLayout(isRHD:dataSource:);
  aBlock[5] = v4;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Int, @guaranteed NSCollectionLayoutEnvironment) -> (@owned NSCollectionLayoutSection?);
  aBlock[3] = &block_descriptor_68;
  v9 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  v12.receiver = v8;
  v12.super_class = v7;
  v10 = objc_msgSendSuper2(&v12, sel_initWithSectionProvider_configuration_, v9, v6);
  swift_release();
  swift_release();

  _Block_release(v9);
  return v10;
}

uint64_t sub_237563854()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_237563878()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CAFUITileViewController.reloadListItem(item:)()
{
  uint64_t *v0;

  return closure #1 in CAFUITileViewController.reloadListItem(item:)(v0[2], v0[3], v0[4]);
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

uint64_t lazy protocol witness table accessor for type CAFAutomakerSetting and conformance NSObject(unint64_t *a1, unint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = type metadata accessor for NSObject(255, a2);
    result = MEMORY[0x23B813BE0](MEMORY[0x24BEE5BD8], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined assign with take of IndexPath?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IndexPath?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void outlined consume of CAFUICellSelectionAction(void *a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 == 2)
  {
    swift_bridgeObjectRelease();
  }
  else if (a3 <= 1u)
  {

  }
}

id outlined copy of CAFUICellSelectionAction(id result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 == 2)
    return (id)swift_bridgeObjectRetain();
  if (a3 <= 1u)
    return result;
  return result;
}

uint64_t specialized CAFUITileViewController.punchThroughController(_:didDismissPunchThroughWithIdentifier:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  _QWORD *v5;
  void *v6;
  BOOL v7;
  Swift::String v8;
  Swift::String v9;
  os_log_type_t v10;
  Swift::String v11;
  Swift::String v12;
  os_log_type_t v13;
  uint64_t v15[2];

  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_presentedPTIdentifier);
  v6 = *(void **)(v2 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_presentedPTIdentifier + 8);
  if (v6 && (*v5 == a1 ? (v7 = v6 == a2) : (v7 = 0), v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease();
    strcpy((char *)v15, "Dismissed PT ");
    HIWORD(v15[1]) = -4864;
    v8._countAndFlagsBits = a1;
    v8._object = a2;
    String.append(_:)(v8);
    v9._countAndFlagsBits = 33;
    v9._object = (void *)0xE100000000000000;
    String.append(_:)(v9);
    v10 = static os_log_type_t.info.getter();
    specialized static CAFUILogger.log(_:message:function:file:line:)(v10, v15[0], v15[1], 0xD00000000000003FLL, 0x800000023757EAA0);
    swift_bridgeObjectRelease();
    *(_BYTE *)(v2 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_punchThroughState) = 1;
    *v5 = 0;
    v5[1] = 0;
  }
  else
  {
    _StringGuts.grow(_:)(19);
    swift_bridgeObjectRelease();
    v11._countAndFlagsBits = a1;
    v11._object = a2;
    String.append(_:)(v11);
    v12._countAndFlagsBits = 0x20746F6E20736920;
    v12._object = (void *)0xEE002E6E776F6E6BLL;
    String.append(_:)(v12);
    v13 = static os_log_type_t.info.getter();
    specialized static CAFUILogger.log(_:message:function:file:line:)(v13, 2118736, 0xE300000000000000, 0xD00000000000003FLL, 0x800000023757EAA0);
  }
  return swift_bridgeObjectRelease();
}

void specialized CAFUITileViewController.sessionConfiguration(_:limitedUserInterfacesChanged:)(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  Swift::String v8;
  os_log_type_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  unint64_t v13;
  id v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  id v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  id v23;
  uint64_t v24;
  id v25;
  void *v26;
  id v27;
  void *v28;
  id v29;
  unint64_t v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t ObjectType;
  uint64_t v36;
  id v37;
  id v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  void *v45;
  os_log_type_t v46;
  id *v47;
  id v48;
  uint64_t v49;
  void *v50;
  id v51;
  Class isa;
  Swift::String v53;
  Swift::String v54;

  v2 = OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_limiting;
  if ((a1 != 0) == v1[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_limiting])
    return;
  v3 = v1;
  _StringGuts.grow(_:)(48);
  swift_bridgeObjectRelease();
  if (a1)
    v5 = 1702195828;
  else
    v5 = 0x65736C6166;
  if (a1)
    v6 = 0xE400000000000000;
  else
    v6 = 0xE500000000000000;
  v7 = v6;
  String.append(_:)(*(Swift::String *)&v5);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0xD000000000000015;
  v8._object = (void *)0x800000023757EA10;
  String.append(_:)(v8);
  v9 = static os_log_type_t.info.getter();
  specialized static CAFUILogger.log(_:message:function:file:line:)(v9, 0xD000000000000019, 0x800000023757E9F0, 0xD000000000000035, 0x800000023757EA30);
  swift_bridgeObjectRelease();
  v1[v2] = a1 != 0;
  if (a1)
  {
    swift_beginAccess();
    v10 = swift_bridgeObjectRetain();
    v11 = (void *)specialized Collection.first.getter(v10);
    swift_bridgeObjectRelease();
    if (v11)
    {
      if ((CAFUISettingsCache.hasLimitableUIAncestor(_:)(v11) & 1) != 0)
      {
        v12 = objc_msgSend(v1, sel_navigationController);
        if (v12)
        {
          v13 = (unint64_t)v12;
          v14 = objc_msgSend(v12, sel_viewControllers);
          type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIViewController);
          v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          v16 = v3;
          v17 = specialized Sequence.first(where:)(v15, v16);
          v3 = v18;
          swift_bridgeObjectRelease();

          if (v3)
          {
            if (v17 <= 0)
            {
LABEL_58:
              _StringGuts.grow(_:)(47);
              swift_bridgeObjectRelease();
              v53._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
              String.append(_:)(v53);
              swift_bridgeObjectRelease();
              v54._countAndFlagsBits = 0xD000000000000027;
              v54._object = (void *)0x800000023757EA70;
              String.append(_:)(v54);
              _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
              return;
            }
            v19 = objc_msgSend((id)v13, sel_viewControllers);
            v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

            if (!(v20 >> 62))
            {
              v21 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
              goto LABEL_16;
            }
LABEL_55:
            swift_bridgeObjectRetain();
            v21 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
LABEL_16:
            swift_bridgeObjectRelease();
            if (v17 < v21)
            {
              v22 = v17 - 1;
              v23 = objc_msgSend((id)v13, sel_viewControllers);
              v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

              if ((v24 & 0xC000000000000001) != 0)
              {
                v25 = (id)MEMORY[0x23B813418](v22, v24);
                goto LABEL_20;
              }
              if (v22 < *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10))
              {
                v25 = *(id *)(v24 + 8 * v22 + 32);
LABEL_20:
                v26 = v25;
                swift_bridgeObjectRelease();

                return;
              }
              __break(1u);
            }
            goto LABEL_58;
          }

        }
        v46 = static os_log_type_t.info.getter();
        specialized static CAFUILogger.log(_:message:function:file:line:)(v46, 0xD00000000000002ALL, 0x800000023757E960, 0xD000000000000035, 0x800000023757EA30);

        return;
      }

    }
    v27 = objc_msgSend(v1, sel_navigationController);
    if (v27)
    {
      v28 = v27;
      v29 = objc_msgSend(v27, sel_viewControllers);

      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIViewController);
      v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v13 >> 62)
      {
        swift_bridgeObjectRetain();
        v17 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v17)
        {
LABEL_25:
          v30 = v17 - 1;
          if (__OFSUB__(v17, 1))
          {
            __break(1u);
          }
          else if ((v13 & 0xC000000000000001) == 0)
          {
            if ((v30 & 0x8000000000000000) != 0)
            {
              __break(1u);
            }
            else if (v30 < *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
            {
              v31 = *(id *)(v13 + 8 * v30 + 32);
              goto LABEL_30;
            }
            __break(1u);
            goto LABEL_55;
          }
          v31 = (id)MEMORY[0x23B813418](v30, v13);
LABEL_30:
          v32 = v31;
          swift_bridgeObjectRelease();
          type metadata accessor for CAFUIPickerViewController();
          v33 = swift_dynamicCastClass();
          if (v33)
          {
            v34 = *(_QWORD *)(v33 + OBJC_IVAR____TtC5CAFUI25CAFUIPickerViewController_representable + 8);
            ObjectType = swift_getObjectType();
            v36 = *(_QWORD *)(v34 + 8);
            v37 = v32;
            swift_unknownObjectRetain();
            LOBYTE(ObjectType) = CAFListContentRepresentable.isUILimited.getter(ObjectType, v36);
            swift_unknownObjectRelease();
            if ((ObjectType & 1) != 0)
            {
              v38 = objc_msgSend(v3, sel_navigationController);
              if (v38)
              {
                v39 = v38;

              }
              goto LABEL_46;
            }

          }
          type metadata accessor for CAFUICollectionViewController();
          v40 = swift_dynamicCastClass();
          if (v40)
          {
            v41 = *(_QWORD *)(v40 + OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_setting + 8);
            v42 = swift_getObjectType();
            v43 = *(_QWORD *)(v41 + 8);
            v32 = v32;
            swift_unknownObjectRetain();
            LOBYTE(v42) = CAFListContentRepresentable.isUILimited.getter(v42, v43);
            swift_unknownObjectRelease();
            if ((v42 & 1) != 0)
            {
              v44 = objc_msgSend(v3, sel_navigationController);
              if (v44)
              {
                v45 = v44;

              }
            }

          }
          goto LABEL_46;
        }
      }
      else
      {
        v17 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v17)
          goto LABEL_25;
      }
      swift_bridgeObjectRelease();
    }
  }
LABEL_46:
  v47 = (id *)&v3[OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_dataSource];
  swift_beginAccess();
  v48 = *v47;
  v49 = CAFUITileDataSource.limitableIndexPaths.getter();

  v50 = *(void **)((char *)*v47 + OBJC_IVAR____TtC5CAFUI19CAFUITileDataSource_collectionView);
  if (v50 && *(_QWORD *)(v49 + 16))
  {
    type metadata accessor for IndexPath();
    v51 = v50;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v51, sel_reloadItemsAtIndexPaths_, isa);

  }
  else
  {
    swift_bridgeObjectRelease();
  }
}

_BYTE *partial apply for closure #1 in CAFUITileViewController.createGeneralListItem()()
{
  uint64_t v0;

  return closure #1 in CAFUITileViewController.createGeneralListItem()(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24), 0xD000000000000010, 0x800000023757C320);
}

uint64_t type metadata accessor for CAFUIDataListItem()
{
  return objc_opt_self();
}

uint64_t sub_237564324()
{
  return objectdestroy_12Tm((void (*)(_QWORD))MEMORY[0x24BEE4BC0]);
}

_BYTE *partial apply for specialized closure #1 in CAFUITileViewController.createAudioListItem(audioSettings:)()
{
  uint64_t v0;

  return specialized closure #1 in CAFUITileViewController.createAudioListItem(audioSettings:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
}

uint64_t sub_23756433C()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

char *partial apply for closure #1 in CAFUITileViewController.createSoundItem(audioSettings:)()
{
  uint64_t v0;

  return closure #1 in CAFUITileViewController.createSoundItem(audioSettings:)(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_237564370()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

_BYTE *partial apply for closure #2 in CAFUITileViewController.createVolumeListItem(volumes:)()
{
  uint64_t v0;

  return closure #2 in CAFUITileViewController.createVolumeListItem(volumes:)(*(_QWORD *)(v0 + 16), *(unsigned __int8 *)(v0 + 24) | (unsigned __int16)(*(unsigned __int8 *)(v0 + 25) << 8), *(_QWORD *)(v0 + 32));
}

uint64_t sub_2375643BC()
{
  swift_release();
  return swift_deallocObject();
}

_BYTE *partial apply for closure #1 in CAFUITileViewController.createRadioListItem()()
{
  uint64_t v0;

  return closure #1 in CAFUITileViewController.createGeneralListItem()(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24), 0x53474E4954544553, 0xEE00414944454D5FLL);
}

uint64_t sub_23756441C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 168))();
  *a2 = result;
  return result;
}

uint64_t sub_237564450@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 192))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_237564484@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 216))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_2375644B8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 240))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_2375644EC@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 264))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_237564520(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_BYTE *)(v3 + 72) = v2;
  return result;
}

uint64_t sub_237564560@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 288))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_237564594(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_BYTE *)(v3 + 73) = v2;
  return result;
}

uint64_t sub_2375645D4@<X0>(uint64_t a1@<X0>, uint64_t (**a2)@<X0>(uint64_t a1@<X8>)@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 312))();
  v5 = v4;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v3;
  *(_QWORD *)(result + 24) = v5;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed () -> (@owned CAFUICellSelectionAction);
  a2[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))result;
  return result;
}

uint64_t sub_237564638@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 336))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_23756466C(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_BYTE *)(v3 + 96) = v2;
  return result;
}

uint64_t sub_2375646AC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 360))();
  *a2 = result;
  return result;
}

id sub_2375646E0@<X0>(_QWORD *a1@<X0>, void **a2@<X8>)
{
  void **v3;
  void *v4;

  v3 = (void **)(*a1 + OBJC_IVAR____TtC5CAFUI23CAFUITileViewController_dataSource);
  swift_beginAccess();
  v4 = *v3;
  *a2 = *v3;
  return v4;
}

uint64_t ObjC metadata update function for CAFUITileViewController()
{
  return type metadata accessor for CAFUITileViewController();
}

void type metadata completion function for CAFUITileViewController()
{
  unint64_t v0;

  type metadata accessor for IndexPath?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

void type metadata accessor for IndexPath?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for IndexPath?)
  {
    type metadata accessor for IndexPath();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for IndexPath?);
  }
}

uint64_t type metadata accessor for CAFUITileViewCompositionalLayout()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for CAFUITileViewCollectionViewData()
{
  return objc_opt_self();
}

uint64_t sub_2375648A4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@out CAFUICellSelectionAction)()
{
  uint64_t v0;
  uint64_t v2;

  (*(void (**)(uint64_t *__return_ptr))(v0 + 16))(&v2);
  return v2;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@owned CAFUICellSelectionAction)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  char v5;

  result = (*(uint64_t (**)(void))(v1 + 16))();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return result;
}

uint64_t outlined consume of Set<CAFAutomakerSetting>.Index._Variant(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

void partial apply for closure #1 in closure #1 in CAFUITileViewController.reloadListItem(item:)()
{
  uint64_t *v0;

  closure #1 in closure #1 in CAFUITileViewController.reloadListItem(item:)(v0[2], v0[3], v0[4]);
}

uint64_t sub_237564940()
{
  return swift_deallocObject();
}

uint64_t sub_237564950()
{
  return objectdestroy_12Tm((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

uint64_t objectdestroy_12Tm(void (*a1)(_QWORD))
{
  uint64_t v1;

  swift_release();
  a1(*(_QWORD *)(v1 + 24));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static CAFUITileViewController.compositionalLayout(isRHD:dataSource:)(uint64_t a1, void *a2)
{
  uint64_t v2;

  return closure #1 in static CAFUITileViewController.compositionalLayout(isRHD:dataSource:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_BYTE *)(v2 + 32));
}

void specialized == infix<A>(_:_:)(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_237564A20(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_237564A78 + 4 * byte_23757ADA4[a2]))(0x6D756964656DLL);
}

uint64_t sub_237564A78(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6D756964656DLL && v1 == 0xE600000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

id closure #1 in CAFUIDevicePickerController.presentDevicePickerLimitedUI(for:navigationController:)(void *a1)
{
  id result;

  result = objc_msgSend(a1, sel_isNavigationBarHidden);
  if ((result & 1) == 0)
    return objc_msgSend(a1, sel_setNavigationBarHidden_animated_, 1, 1);
  return result;
}

id closure #2 in CAFUIDevicePickerController.presentDevicePickerLimitedUI(for:navigationController:)(void *a1)
{

  return objc_msgSend(a1, sel_setNavigationBarHidden_animated_, 0, 1);
}

uint64_t CAFUIDevicePickerViewController.delegate.getter()
{
  swift_beginAccess();
  return swift_unknownObjectRetain();
}

uint64_t CAFUIDevicePickerViewController.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_delegate);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  return swift_unknownObjectRelease();
}

uint64_t (*CAFUIDevicePickerViewController.delegate.modify())()
{
  swift_beginAccess();
  return CAFUICollectionViewController.items.modify;
}

double CAFUIDevicePickerViewController.cellSize.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = v0 + OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___cellSize;
  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___cellSize + 16) & 1) == 0)
    return *(double *)v1;
  result = dbl_23757AFD0[(char)CAFUIDevicePickerViewController.layoutStyle.getter()];
  *(double *)v1 = result;
  *(_QWORD *)(v1 + 8) = 0x4060C00000000000;
  *(_BYTE *)(v1 + 16) = 0;
  return result;
}

uint64_t CAFUIDevicePickerViewController.rows.getter()
{
  _BYTE *v0;
  _BYTE *v1;
  uint64_t result;
  void *v3;
  double v4;
  CGFloat v5;
  double v6;
  CGFloat v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  double Height;
  double v13;
  CGRect v14;

  v1 = &v0[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___rows];
  if (v0[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___rows + 8] != 1)
    return *(_QWORD *)v1;
  if ((CAFUIDevicePickerViewController.isPortraitLayout.getter() & 1) == 0)
  {
    result = 1;
LABEL_11:
    *(_QWORD *)v1 = result;
    v1[8] = 0;
    return result;
  }
  result = (uint64_t)objc_msgSend(v0, sel_collectionView);
  if (result)
  {
    v3 = (void *)result;
    objc_msgSend((id)result, sel_bounds);
    v5 = v4;
    v7 = v6;
    v9 = v8;
    v11 = v10;

    v14.origin.x = v5;
    v14.origin.y = v7;
    v14.size.width = v9;
    v14.size.height = v11;
    Height = CGRectGetHeight(v14);
    if (one-time initialization token for tallPortraitRequiredHeight != -1)
    {
      v13 = Height;
      swift_once();
      Height = v13;
    }
    if (*(double *)&static CAFUIDevicePickerViewController.Constants.tallPortraitRequiredHeight > Height)
      result = 2;
    else
      result = 3;
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t CAFUIDevicePickerViewController.columns.getter()
{
  uint64_t v0;
  _BYTE *v1;
  int v2;
  uint64_t result;

  v1 = (_BYTE *)(v0 + OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___columns);
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___columns + 8) != 1)
    return *(_QWORD *)v1;
  v2 = CAFUIDevicePickerViewController.layoutStyle.getter();
  if (v2 == 3 || v2 == 0)
    result = 2;
  else
    result = 3;
  *(_QWORD *)v1 = result;
  v1[8] = 0;
  return result;
}

uint64_t CAFUIDevicePickerViewController.layoutStyle.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v1 = OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___layoutStyle;
  result = *(unsigned __int8 *)(v0
                              + OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___layoutStyle);
  if ((_DWORD)result == 4)
  {
    result = CAFUIDevicePickerViewController.calculateLayoutStyle()();
    *(_BYTE *)(v0 + v1) = result;
  }
  return result;
}

uint64_t CAFUIDevicePickerViewController.calculateLayoutStyle()()
{
  void *v0;
  uint64_t result;
  void *v2;
  double v3;
  double v4;
  void *v5;
  double v6;
  double v7;

  if ((CAFUIDevicePickerViewController.isPortraitLayout.getter() & 1) != 0)
    return 3;
  result = (uint64_t)objc_msgSend(v0, sel_collectionView);
  if (result)
  {
    v2 = (void *)result;
    objc_msgSend((id)result, sel_bounds);
    v4 = v3;

    if (v4 >= 800.0)
      return 2;
    result = (uint64_t)objc_msgSend(v0, sel_collectionView);
    if (result)
    {
      v5 = (void *)result;
      objc_msgSend((id)result, sel_bounds);
      v7 = v6;

      return v7 >= 527.0;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t CAFUIDevicePickerViewController.isPortraitLayout.getter()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  unsigned __int8 v3;

  v1 = OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___isPortraitLayout;
  v2 = *(unsigned __int8 *)(v0
                          + OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___isPortraitLayout);
  if (v2 == 2)
  {
    v3 = CAFUIDevicePickerViewController.checkIfIsPortraitLayout()();
    *(_BYTE *)(v0 + v1) = v3 & 1;
  }
  else
  {
    v3 = v2 & 1;
  }
  return v3 & 1;
}

id CAFUIDevicePickerViewController.checkIfIsPortraitLayout()()
{
  void *v0;
  id result;
  void *v2;
  double v3;
  double v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  double v9;
  double v10;
  void *v11;
  double v12;
  double v13;

  result = objc_msgSend(v0, sel_view);
  if (!result)
  {
    __break(1u);
    goto LABEL_12;
  }
  v2 = result;
  objc_msgSend(result, sel_bounds);
  v4 = v3;

  result = objc_msgSend(v0, sel_view);
  if (!result)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v5 = result;
  objc_msgSend(result, sel_bounds);
  v7 = v6;

  if (v7 >= v4)
    return 0;
  result = objc_msgSend(v0, sel_collectionView);
  if (!result)
    goto LABEL_13;
  v8 = result;
  objc_msgSend(result, sel_bounds);
  v10 = v9;

  if (one-time initialization token for portraitRequiredHeight != -1)
    swift_once();
  if (*(double *)&static CAFUIDevicePickerViewController.Constants.portraitRequiredHeight > v10)
    return 0;
  result = objc_msgSend(v0, sel_collectionView, *(double *)&static CAFUIDevicePickerViewController.Constants.portraitRequiredHeight);
  if (result)
  {
    v11 = result;
    objc_msgSend(result, sel_bounds);
    v13 = v12;

    return (id)(v13 >= 460.0);
  }
LABEL_14:
  __break(1u);
  return result;
}

Swift::Void __swiftcall CAFUIDevicePickerViewController.viewWillDisappear(_:)(Swift::Bool a1)
{
  char *v1;
  uint64_t v3;
  void *v4;
  void *v5;
  objc_super v6;

  v6.receiver = v1;
  v6.super_class = (Class)type metadata accessor for CAFUIDevicePickerViewController();
  objc_msgSendSuper2(&v6, sel_viewWillDisappear_, a1);
  v3 = OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_ptButton;
  v4 = *(void **)&v1[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_ptButton];
  if (v4)
  {
    objc_msgSend(v4, sel_removeFromSuperview);
    v5 = *(void **)&v1[v3];
  }
  else
  {
    v5 = 0;
  }
  *(_QWORD *)&v1[v3] = 0;

}

uint64_t type metadata accessor for CAFUIDevicePickerViewController()
{
  uint64_t result;

  result = type metadata singleton initialization cache for CAFUIDevicePickerViewController;
  if (!type metadata singleton initialization cache for CAFUIDevicePickerViewController)
    return swift_getSingletonMetadata();
  return result;
}

Swift::Void __swiftcall CAFUIDevicePickerViewController.viewWillAppear(_:)(Swift::Bool a1)
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for CAFUIDevicePickerViewController();
  objc_msgSendSuper2(&v3, sel_viewWillAppear_, a1);
  CAFUIDevicePickerViewController.updatePTButton()();
}

void CAFUIDevicePickerViewController.pageControlHeightConstraint.setter(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;
  Class isa;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  Class v12;
  Class v13;
  uint64_t v14;

  v2 = OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_pageControlHeightConstraint;
  v3 = *(void **)(v1 + OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_pageControlHeightConstraint);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_pageControlHeightConstraint) = a1;
  v13 = a1;
  if (v3)
  {
    v4 = (void *)objc_opt_self();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_237579080;
    *(_QWORD *)(v5 + 32) = v3;
    v14 = v5;
    specialized Array._endMutation()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
    v6 = v3;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v4, sel_deactivateConstraints_, isa, v13, v14);

  }
  v8 = *(void **)(v1 + v2);
  if (v8)
  {
    v9 = (void *)objc_opt_self();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_237579080;
    *(_QWORD *)(v10 + 32) = v8;
    specialized Array._endMutation()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
    v11 = v8;
    v12 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v9, sel_activateConstraints_, v12);

    v3 = v11;
    v13 = v12;
  }

}

uint64_t CAFUIDevicePickerViewController.cellClass.getter()
{
  return type metadata accessor for CAFUIDevicePickerViewCell();
}

uint64_t CAFUIDevicePickerViewController.cellIdentifier.getter()
{
  objc_class *ObjCClassFromMetadata;
  NSString *v1;
  uint64_t v2;

  type metadata accessor for CAFUIDevicePickerViewCell();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  v1 = NSStringFromClass(ObjCClassFromMetadata);
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

char *CAFUIDevicePickerViewController.__allocating_init(requestContentManager:pairedDevices:carSession:)(uint64_t a1, void *a2, void *a3)
{
  objc_class *v3;
  id v7;

  v7 = objc_allocWithZone(v3);
  return CAFUIDevicePickerViewController.init(requestContentManager:pairedDevices:carSession:)(a1, a2, a3);
}

char *CAFUIDevicePickerViewController.init(requestContentManager:pairedDevices:carSession:)(uint64_t a1, void *a2, void *a3)
{
  _BYTE *v3;
  _QWORD *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  char *v15;
  id v16;
  id v17;
  id v18;
  char *v19;
  char *v20;
  void *v21;
  char *v22;
  id v23;
  id v24;
  Swift::String v25;
  int v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  id v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  void *v37;
  id v38;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t aBlock[6];

  v7 = &v3[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_delegate];
  *v7 = 0;
  v7[1] = 0;
  v8 = &v3[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___cellSize];
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  v8[16] = 1;
  v9 = &v3[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___rows];
  *(_QWORD *)v9 = 0;
  v9[8] = 1;
  v10 = &v3[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___columns];
  *(_QWORD *)v10 = 0;
  v10[8] = 1;
  v3[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___layoutStyle] = 4;
  v3[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___isPortraitLayout] = 2;
  *(_QWORD *)&v3[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_limitedUIView] = 0;
  v3[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_punchThroughState] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_ptButton] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_pageControl] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_pageControlHeightConstraint] = 0;
  v11 = OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_carSession;
  *(_QWORD *)&v3[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_carSession] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_spinnerTimer] = 0;
  v12 = &v3[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_spinningCellIndexPath];
  v13 = type metadata accessor for IndexPath();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  v14 = *(void **)&v3[v11];
  *(_QWORD *)&v3[v11] = a3;
  v15 = v3;
  v16 = a3;

  *(_QWORD *)&v15[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_requestContentManager] = a1;
  *(_QWORD *)&v15[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_pairedDevices] = a2;
  swift_retain();
  v17 = a2;
  v18 = objc_msgSend(v17, sel_pairedDevicesAction);
  v19 = specialized static CAFUIDevicePickerViewController.connectedDeviceSupportedActions(for:)(v18);

  *(_QWORD *)&v15[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_connectedDeviceSupportedActions] = v19;
  v20 = (char *)specialized CAFUICollectionViewController.init(setting:isRHD:)(objc_msgSend(v17, sel_pairedDevicesInformation), 0, v15);
  v21 = *(void **)&v20[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_pairedDevices];
  v22 = v20;
  v23 = objc_msgSend(v21, sel_pairedDevicesInformation);
  objc_msgSend(v23, sel_registerObserver_, v22);

  v24 = objc_msgSend(v17, sel_pairedDevicesAction);
  objc_msgSend(v24, sel_registerObserver_, v22);

  if (*(_QWORD *)&v22[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_requestContentManager]
    && (v25._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(),
        v26 = CAFUIRequestContentManager.state(for:)(v25),
        swift_bridgeObjectRelease(),
        !v26))
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v40 = static OS_os_log.default;
    v41 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc();
      v43 = swift_slowAlloc();
      aBlock[0] = v43;
      *(_DWORD *)v42 = 136315138;
      v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v45, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_237505000, v40, v41, "AutoSettings has no available PT with identifier %s.", v42, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B813C70](v43, -1, -1);
      MEMORY[0x23B813C70](v42, -1, -1);
    }
  }
  else
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v27 = static OS_os_log.default;
    v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc();
      v30 = swift_slowAlloc();
      aBlock[0] = v30;
      *(_DWORD *)v29 = 136315138;
      v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_237505000, v27, v28, "Setting up PT with identifier %s.", v29, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B813C70](v30, -1, -1);
      MEMORY[0x23B813C70](v29, -1, -1);
    }
    if (a1)
      objc_msgSend(*(id *)(a1 + 16), sel_addObserver_, v22);
    v22[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_punchThroughState] = 1;
  }
  v33 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  v34 = *MEMORY[0x24BE151B8];
  v35 = objc_msgSend((id)objc_opt_self(), sel_mainQueue);
  v36 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = (uint64_t)partial apply for closure #1 in CAFUIDevicePickerViewController.init(requestContentManager:pairedDevices:carSession:);
  aBlock[5] = v36;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Notification) -> ();
  aBlock[3] = (uint64_t)&block_descriptor_7;
  v37 = _Block_copy(aBlock);
  swift_release();
  v38 = objc_msgSend(v33, sel_addObserverForName_object_queue_usingBlock_, v34, 0, v35, v37);

  swift_release();
  _Block_release(v37);
  swift_unknownObjectRelease();

  return v22;
}

void closure #1 in CAFUIDevicePickerViewController.init(requestContentManager:pairedDevices:carSession:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = a2 + 16;
  swift_beginAccess();
  v3 = MEMORY[0x23B813CDC](v2);
  if (v3)
  {
    v4 = (void *)v3;
    CAFUIDevicePickerViewController.updateDevicePickerLimitedUI()();

  }
}

Swift::Void __swiftcall CAFUIDevicePickerViewController.updateDevicePickerLimitedUI()()
{
  char *v0;
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;
  char *v5;
  id v6;
  id v7;
  void *v8;
  unsigned __int8 v9;
  id v10;
  unsigned __int8 v11;
  _BOOL8 v12;
  id v13;
  void *v14;
  void *v15;
  char *v16;
  id v17;
  id v18;
  void *v19;
  unsigned int v20;
  id v21;
  unsigned __int8 v22;
  id v23;
  id v24;
  void *v25;
  char *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  id v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;

  v1 = objc_msgSend(v0, sel_collectionView);
  if (!v1)
  {
    __break(1u);
    goto LABEL_29;
  }
  v2 = v1;
  v3 = OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_carSession;
  v4 = *(void **)&v0[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_carSession];
  if (v4)
  {
    v5 = v0;
    v6 = v4;
    v7 = objc_msgSend(v6, sel_limitUserInterfaces);
    if (v7)
    {
      v8 = v7;
      v9 = objc_msgSend(v7, sel_BOOLValue);

      if ((v9 & 1) != 0)
      {
        v10 = objc_msgSend(v6, sel_configuration);
        v11 = objc_msgSend(v10, sel_limitableUserInterfaces);

        v12 = (v11 & 0x40) == 0;
        goto LABEL_8;
      }
    }

  }
  v12 = 1;
LABEL_8:
  objc_msgSend(v2, sel_setAllowsFocus_, v12);

  v13 = objc_msgSend(v0, sel_collectionView);
  if (!v13)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v14 = v13;
  objc_msgSend(v13, sel_setNeedsFocusUpdate);

  v15 = *(void **)&v0[v3];
  if (!v15)
  {
LABEL_18:
    v30 = objc_msgSend(v0, sel_navigationController);
    if (v30)
    {
      v31 = v30;
      objc_msgSend(v30, sel_setNavigationBarHidden_animated_, 0, 0);

    }
    v32 = OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_limitedUIView;
    v33 = *(void **)&v0[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_limitedUIView];
    if (v33)
    {
      objc_msgSend(v33, sel_removeFromSuperview);
      v33 = *(void **)&v0[v32];
    }
    *(_QWORD *)&v0[v32] = 0;
    goto LABEL_23;
  }
  v16 = v0;
  v17 = v15;
  v18 = objc_msgSend(v17, sel_limitUserInterfaces);
  if (!v18 || (v19 = v18, v20 = objc_msgSend(v18, sel_BOOLValue), v19, !v20))
  {

    goto LABEL_18;
  }
  v21 = objc_msgSend(v17, sel_configuration);
  v22 = objc_msgSend(v21, sel_limitableUserInterfaces);

  if ((v22 & 0x40) == 0)
    goto LABEL_18;
  v23 = objc_msgSend(v16, sel_navigationController);
  if (!v23)
    goto LABEL_18;
  v36 = v23;
  v24 = objc_msgSend(v16, sel_view);
  if (v24)
  {
    v25 = v24;
    v26 = specialized CAFUIDevicePickerController.presentDevicePickerLimitedUI(for:navigationController:)(v24, v36);

    v27 = OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_limitedUIView;
    v28 = *(void **)&v16[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_limitedUIView];
    if (v28)
    {
      objc_msgSend(v28, sel_removeFromSuperview);
      v29 = *(void **)&v16[v27];
    }
    else
    {
      v29 = 0;
    }
    *(_QWORD *)&v16[v27] = v26;

    if (*(_QWORD *)&v16[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_requestContentManager])
    {
      v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      CAFUIRequestContentManager.dismiss(identifier:completion:)(v34, v35, (uint64_t)closure #1 in CAFUIDevicePickerViewController.updateDevicePickerLimitedUI(), 0);
      swift_bridgeObjectRelease();
    }
    v33 = v36;
LABEL_23:

    return;
  }
LABEL_30:
  __break(1u);
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Notification) -> ()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void (*v6)(char *);
  uint64_t v8;

  v2 = type metadata accessor for Notification();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(void (**)(char *))(a1 + 32);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v6(v5);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

void CAFUIDevicePickerViewController.__allocating_init(coder:)()
{
  objc_class *v0;
  id v1;

  v1 = objc_allocWithZone(v0);
  specialized CAFUIDevicePickerViewController.init(coder:)();
}

uint64_t CAFUIDevicePickerViewController.__ivar_destroyer()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();

  outlined destroy of IndexPath?(v0 + OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_spinningCellIndexPath);
  return swift_bridgeObjectRelease();
}

id CAFUIDevicePickerViewController.__deallocating_deinit()
{
  void *v0;
  id v1;
  uint64_t v2;
  void *v3;
  objc_super v5;

  v1 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = (void *)MEMORY[0x23B812F68](v2);
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_removeObserver_, v3);

  v5.receiver = v0;
  v5.super_class = (Class)type metadata accessor for CAFUIDevicePickerViewController();
  return objc_msgSendSuper2(&v5, sel_dealloc);
}

Swift::Void __swiftcall CAFUIDevicePickerViewController.viewDidLoad()()
{
  void *v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  char v8;
  double v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  uint64_t inited;
  Class isa;
  id v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  id v27;
  void *v28;
  id v29;
  void *v30;
  id v31;
  void *v32;
  objc_super v33;

  v33.receiver = v0;
  v33.super_class = (Class)type metadata accessor for CAFUIDevicePickerViewController();
  objc_msgSendSuper2(&v33, sel_viewDidLoad);
  v1 = objc_msgSend(v0, sel_collectionView);
  if (!v1)
  {
    __break(1u);
    goto LABEL_16;
  }
  v2 = v1;
  v3 = objc_msgSend(v1, sel_collectionViewLayout);

  objc_opt_self();
  objc_msgSend((id)swift_dynamicCastObjCClassUnconditional(), sel_setScrollDirection_, 1);

  v4 = objc_msgSend(v0, sel_collectionView);
  if (!v4)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4;
  v6 = objc_msgSend(v4, sel_collectionViewLayout);

  objc_opt_self();
  v7 = (void *)swift_dynamicCastObjCClassUnconditional();
  v8 = CAFUIDevicePickerViewController.isPortraitLayout.getter();
  v9 = 60.0;
  if ((v8 & 1) == 0)
    v9 = 20.0;
  objc_msgSend(v7, sel_setMinimumInteritemSpacing_, v9);

  v10 = objc_msgSend(v0, sel_collectionView);
  if (!v10)
    goto LABEL_17;
  v11 = v10;
  v12 = objc_msgSend(v10, sel_collectionViewLayout);

  objc_opt_self();
  objc_msgSend((id)swift_dynamicCastObjCClassUnconditional(), sel_setMinimumLineSpacing_, 20.0);

  v13 = objc_msgSend(v0, sel_collectionView);
  if (!v13)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v14 = v13;
  v15 = objc_msgSend(v13, sel_collectionViewLayout);

  objc_opt_self();
  v16 = (void *)swift_dynamicCastObjCClassUnconditional();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_237579480;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  AnyHashable.init<A>(_:)();
  *(_QWORD *)(inited + 96) = MEMORY[0x24BEE44F0];
  *(_DWORD *)(inited + 72) = 0;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v16, sel__setRowAlignmentsOptions_, isa);

  v19 = objc_msgSend(v0, sel_collectionView);
  if (!v19)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v20 = v19;
  objc_msgSend(v19, sel_setShowsVerticalScrollIndicator_, 0);

  v21 = objc_msgSend(v0, sel_collectionView);
  if (!v21)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v22 = v21;
  objc_msgSend(v21, sel_setPagingEnabled_, 1);

  v23 = objc_msgSend(v0, sel_collectionView);
  if (!v23)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v24 = v23;
  v25 = (void *)objc_opt_self();
  v26 = objc_msgSend(v25, sel_clearColor);
  objc_msgSend(v24, sel_setBackgroundColor_, v26);

  v27 = objc_msgSend(v0, sel_view);
  if (!v27)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v28 = v27;
  v29 = objc_msgSend(v25, sel_tableBackgroundColor);
  if (!v29)
  {
LABEL_23:
    __break(1u);
    return;
  }
  v30 = v29;
  objc_msgSend(v28, sel_setBackgroundColor_, v29);

  CAFUIDevicePickerViewController.updateDevicePickerLimitedUI()();
  v31 = objc_msgSend(v0, sel_navigationController);
  if (v31)
  {
    v32 = v31;
    objc_msgSend(v31, sel_setDelegate_, v0);

  }
}

Swift::Void __swiftcall CAFUIDevicePickerViewController.viewDidLayoutSubviews()()
{
  void *v0;
  objc_super v1;

  v1.receiver = v0;
  v1.super_class = (Class)type metadata accessor for CAFUIDevicePickerViewController();
  objc_msgSendSuper2(&v1, sel_viewDidLayoutSubviews);
  CAFUIDevicePickerViewController.updateFlowLayout()();
  CAFUIDevicePickerViewController.updatePageControl()();
}

void CAFUIDevicePickerViewController.updateFlowLayout()()
{
  unsigned __int8 *v0;
  void *v1;
  uint64_t v2;
  os_log_type_t v3;
  uint8_t *v4;
  id v5;
  void *v6;
  id v7;
  double v8;
  double v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  int v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  double v24;
  char v25;
  NSObject *v26;
  unsigned __int8 *v27;
  os_log_type_t v28;
  _DWORD *v29;
  id v30;
  uint64_t v31;
  void *v32;
  NSObject *v33;
  unsigned __int8 *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  double v39;
  CGFloat v40;
  double v41;
  CGFloat v42;
  double v43;
  CGFloat v44;
  double v45;
  CGFloat v46;
  double Height;
  NSObject *v48;
  os_log_type_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  id v65;
  id v66;
  double v67;
  double v68;
  double v69;
  double v70;
  NSObject *v71;
  os_log_type_t v72;
  uint64_t v73;
  id v74;
  void *v75;
  id v76;
  double v77;
  CGFloat v78;
  double v79;
  CGFloat v80;
  NSString *v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  NSString *v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  id v89;
  id v90;
  id v91;
  void *v92;
  uint64_t v93;
  double v94;
  CGSize v95;
  CGSize v96;
  CGRect v97;

  if (one-time initialization token for default != -1)
    swift_once();
  v1 = &unk_2567F9000;
  v2 = static OS_os_log.default;
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled((os_log_t)v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_237505000, (os_log_t)v2, v3, "Updating flow layout", v4, 2u);
    MEMORY[0x23B813C70](v4, -1, -1);
  }
  v5 = objc_msgSend(v0, sel_collectionView);
  if (!v5)
  {
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
    goto LABEL_69;
  }
  v6 = v5;
  v7 = objc_msgSend(v5, sel_collectionViewLayout);

  objc_opt_self();
  objc_msgSend((id)swift_dynamicCastObjCClassUnconditional(), sel_minimumInteritemSpacing);
  v9 = v8;

  if ((CAFUIDevicePickerViewController.isPortraitLayout.getter() & 1) == 0)
  {
    if (v9 != 20.0)
      goto LABEL_8;
LABEL_14:
    v19 = 0;
    goto LABEL_20;
  }
  if (v9 == 60.0)
    goto LABEL_14;
LABEL_8:
  v10 = static OS_os_log.default;
  v2 = v0;
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc();
    *(_DWORD *)v12 = 134218240;
    v13 = objc_msgSend((id)v2, sel_collectionView);
    if (!v13)
    {
LABEL_73:

      __break(1u);
      JUMPOUT(0x23756741CLL);
    }
    v14 = v13;
    v15 = objc_msgSend(v13, sel_collectionViewLayout);

    objc_opt_self();
    objc_msgSend((id)swift_dynamicCastObjCClassUnconditional(), sel_minimumInteritemSpacing);
    v17 = v16;

    v94 = *(double *)&v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    *(_WORD *)(v12 + 12) = 2048;
    v18 = 60.0;
    if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___isPortraitLayout) & 1) == 0)
      v18 = 20.0;
    v94 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl(&dword_237505000, v10, v11, "Interitem spacing updated from: %f to %f", (uint8_t *)v12, 0x16u);
    MEMORY[0x23B813C70](v12, -1, -1);
    v1 = &unk_2567F9000;
  }
  else
  {

  }
  v20 = objc_msgSend((id)v2, sel_collectionView);
  if (!v20)
    goto LABEL_71;
  v21 = v20;
  v22 = objc_msgSend(v20, sel_collectionViewLayout);

  objc_opt_self();
  v23 = (void *)swift_dynamicCastObjCClassUnconditional();
  v24 = 60.0;
  if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___isPortraitLayout) & 1) == 0)
    v24 = 20.0;
  objc_msgSend(v23, sel_setMinimumInteritemSpacing_, v24);

  v19 = 1;
LABEL_20:
  v2 = CAFUIDevicePickerViewController.calculateLayoutStyle()();
  CAFUIDevicePickerViewController.layoutStyle.getter();
  specialized == infix<A>(_:_:)(v2);
  if ((v25 & 1) == 0)
  {
    v26 = *((_QWORD *)v1 + 353);
    v27 = v0;
    v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, v28))
    {
      v29 = (_DWORD *)swift_slowAlloc();
      v94 = COERCE_DOUBLE(swift_slowAlloc());
      *v29 = 136315394;
      __asm { BR              X10 }
    }

    v27[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___layoutStyle] = v2;
    v19 = 1;
  }
  v30 = CAFUIDevicePickerViewController.checkIfIsPortraitLayout()();
  v31 = OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___isPortraitLayout;
  if ((v30 & 1) != (v0[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___isPortraitLayout] & 1))
  {
    v2 = (uint64_t)v30;
    v32 = v1;
    v33 = *((_QWORD *)v1 + 353);
    v34 = v0;
    v35 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v33, v35))
    {
      v36 = swift_slowAlloc();
      *(_DWORD *)v36 = 67109376;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      *(_WORD *)(v36 + 8) = 1024;
      LODWORD(v94) = v2 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_237505000, v33, v35, "Is portrait layout updated from: %{BOOL}d to %{BOOL}d", (uint8_t *)v36, 0xEu);
      MEMORY[0x23B813C70](v36, -1, -1);
    }
    else
    {

    }
    v0[v31] = v2 & 1;
    v19 = 1;
    v1 = v32;
    if ((v2 & 1) != 0)
      goto LABEL_31;
LABEL_28:
    v37 = 1;
    goto LABEL_37;
  }
  if ((v0[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___isPortraitLayout] & 1) == 0)
    goto LABEL_28;
LABEL_31:
  v38 = objc_msgSend(v0, sel_collectionView);
  if (!v38)
  {
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
  v2 = (uint64_t)v38;
  objc_msgSend(v38, sel_bounds);
  v40 = v39;
  v42 = v41;
  v44 = v43;
  v46 = v45;

  v97.origin.x = v40;
  v97.origin.y = v42;
  v97.size.width = v44;
  v97.size.height = v46;
  Height = CGRectGetHeight(v97);
  if (one-time initialization token for tallPortraitRequiredHeight != -1)
    swift_once();
  if (*(double *)&static CAFUIDevicePickerViewController.Constants.tallPortraitRequiredHeight > Height)
    v37 = 2;
  else
    v37 = 3;
LABEL_37:
  if (v37 != CAFUIDevicePickerViewController.rows.getter())
  {
    v48 = *((_QWORD *)v1 + 353);
    v2 = v0;
    v49 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v48, v49))
    {
      v50 = v1;
      v51 = swift_slowAlloc();
      *(_DWORD *)v51 = 134218240;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      *(_WORD *)(v51 + 12) = 2048;
      v94 = *(double *)&v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_237505000, v48, v49, "Amount of rows updated from: %ld to %ld", (uint8_t *)v51, 0x16u);
      v52 = v51;
      v1 = v50;
      MEMORY[0x23B813C70](v52, -1, -1);
    }
    else
    {

    }
    v53 = v2 + OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___rows;
    *(_QWORD *)v53 = v37;
    *(_BYTE *)(v53 + 8) = 0;
    v19 = 1;
  }
  v54 = OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___layoutStyle;
  v55 = v0[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___layoutStyle];
  if (v55 == 3 || v55 == 0)
    v57 = 2;
  else
    v57 = 3;
  if (v57 != CAFUIDevicePickerViewController.columns.getter())
  {
    v58 = *((_QWORD *)v1 + 353);
    v2 = v0;
    v59 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v58, v59))
    {
      v60 = v1;
      v61 = swift_slowAlloc();
      *(_DWORD *)v61 = 134218240;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      *(_WORD *)(v61 + 12) = 2048;
      v94 = *(double *)&v57;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_237505000, v58, v59, "Amount of columns updated from: %ld to %ld", (uint8_t *)v61, 0x16u);
      v62 = v61;
      v1 = v60;
      MEMORY[0x23B813C70](v62, -1, -1);
    }
    else
    {

    }
    v63 = v2 + OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___columns;
    *(_QWORD *)v63 = v57;
    *(_BYTE *)(v63 + 8) = 0;
    v19 = 1;
  }
  v64 = dbl_23757AFD0[(char)v0[v54]];
  v65 = objc_msgSend(v0, sel_collectionView);
  if (!v65)
    goto LABEL_67;
  v2 = (uint64_t)v65;
  v66 = objc_msgSend(v65, sel_collectionViewLayout);

  objc_opt_self();
  objc_msgSend((id)swift_dynamicCastObjCClassUnconditional(), sel_itemSize);
  v68 = v67;
  v70 = v69;

  if (v68 != v64 || v70 != 134.0)
  {
    v71 = *((_QWORD *)v1 + 353);
    v2 = v0;
    v72 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v71, v72))
    {
      v73 = swift_slowAlloc();
      v93 = swift_slowAlloc();
      v94 = *(double *)&v93;
      *(_DWORD *)v73 = 136315394;
      v74 = objc_msgSend((id)v2, sel_collectionView);
      if (!v74)
      {
LABEL_72:

        __break(1u);
        goto LABEL_73;
      }
      v75 = v74;
      v76 = objc_msgSend(v74, sel_collectionViewLayout);

      objc_opt_self();
      objc_msgSend((id)swift_dynamicCastObjCClassUnconditional(), sel_itemSize);
      v78 = v77;
      v80 = v79;

      v95.width = v78;
      v95.height = v80;
      v81 = NSStringFromCGSize(v95);
      v82 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v84 = v83;

      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v82, v84, (uint64_t *)&v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v73 + 12) = 2080;
      v96.height = 134.0;
      v96.width = v64;
      v85 = NSStringFromCGSize(v96);
      v86 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v88 = v87;

      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v86, v88, (uint64_t *)&v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_237505000, v71, v72, "Flow layout item size updated from: %s to: %s", (uint8_t *)v73, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x23B813C70](v93, -1, -1);
      MEMORY[0x23B813C70](v73, -1, -1);
    }
    else
    {

    }
    v89 = objc_msgSend((id)v2, sel_collectionView);
    if (!v89)
      goto LABEL_70;
    v2 = (uint64_t)v89;
    v90 = objc_msgSend(v89, sel_collectionViewLayout);

    objc_opt_self();
    objc_msgSend((id)swift_dynamicCastObjCClassUnconditional(), sel_setItemSize_, v64, 134.0);

    goto LABEL_64;
  }
  if (v19)
  {
LABEL_64:
    v91 = objc_msgSend(v0, sel_collectionView);
    if (v91)
    {
      v92 = v91;
      objc_msgSend(v91, sel_reloadData);

      return;
    }
    goto LABEL_68;
  }
}

void CAFUIDevicePickerViewController.updatePageControl()()
{
  char *v0;
  char *v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  id v5;
  void *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  BOOL v23;
  double v24;
  void *v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  void *v32;
  id v33;
  void *v34;
  void *v35;
  id v36;
  uint64_t v37;
  id v38;
  id v39;
  void *v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  void *v46;
  void *v47;
  id v48;
  id v49;
  id v50;
  Class isa;
  uint64_t v52;
  uint64_t v53;
  double v54;
  char v55;
  void *v56;
  double v57;
  id v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  id v62;

  v1 = v0;
  if (one-time initialization token for default != -1)
    swift_once();
  v2 = static OS_os_log.default;
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_237505000, v2, v3, "Updating page control", v4, 2u);
    MEMORY[0x23B813C70](v4, -1, -1);
  }
  v5 = objc_msgSend(v1, sel_collectionView);
  if (!v5)
    goto LABEL_55;
  v6 = v5;
  v7 = &v1[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_items];
  swift_beginAccess();
  v8 = *(_QWORD *)(*(_QWORD *)v7 + 16);
  v9 = CAFUIDevicePickerViewController.rows.getter();
  v10 = CAFUIDevicePickerViewController.columns.getter();
  if ((unsigned __int128)(v9 * (__int128)v10) >> 64 != (v9 * v10) >> 63)
  {
    __break(1u);
    goto LABEL_40;
  }
  v11 = ceil((double)v8 / (double)(v9 * v10));
  if ((~*(_QWORD *)&v11 & 0x7FF0000000000000) == 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (v11 <= -9.22337204e18)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (v11 >= 9.22337204e18)
  {
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  objc_msgSend(v6, sel_setScrollEnabled_, (uint64_t)v11 > 1);

  v12 = OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_pageControl;
  v13 = *(void **)&v1[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_pageControl];
  if (v13)
  {
    v14 = *(_QWORD *)&v1[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___rows];
    v15 = *(_QWORD *)&v1[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___columns];
    if ((unsigned __int128)(v14 * (__int128)v15) >> 64 != (v14 * v15) >> 63)
    {
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    v16 = ceil((double)*(uint64_t *)(*(_QWORD *)v7 + 16) / (double)(v14 * v15));
    if ((~*(_QWORD *)&v16 & 0x7FF0000000000000) == 0)
    {
LABEL_48:
      __break(1u);
      goto LABEL_49;
    }
    if (v16 <= -9.22337204e18)
    {
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }
    if (v16 >= 9.22337204e18)
    {
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }
    objc_msgSend(v13, sel_setHidden_, (uint64_t)v16 < 2);
  }
  v17 = OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___rows;
  v18 = *(_QWORD *)&v1[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___rows];
  v19 = *(_QWORD *)&v1[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___columns];
  v20 = v18 * v19;
  v21 = (unsigned __int128)(v18 * (__int128)v19) >> 64;
  v22 = v21 == v20 >> 63;
  v23 = v21 != v20 >> 63;
  if (!v22)
    goto LABEL_43;
  v24 = ceil((double)*(uint64_t *)(*(_QWORD *)v7 + 16) / (double)v20);
  if ((~*(_QWORD *)&v24 & 0x7FF0000000000000) == 0)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  if (v24 <= -9.22337204e18)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  if (v24 >= 9.22337204e18)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  if ((uint64_t)v24 >= 2)
  {
    v25 = *(void **)&v1[v12];
    if (!v25)
    {
      v61 = OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___columns;
      v26 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD7D0]), sel_init);
      v27 = (void *)objc_opt_self();
      v28 = objc_msgSend(v27, sel_labelColor);
      objc_msgSend(v26, sel_setCurrentPageIndicatorTintColor_, v28);

      v29 = objc_msgSend(v27, sel_labelColor);
      v30 = objc_msgSend(v29, sel_colorWithAlphaComponent_, 0.3);

      objc_msgSend(v26, sel_setPageIndicatorTintColor_, v30);
      objc_msgSend(v26, sel_setUserInteractionEnabled_, 0);
      objc_msgSend(v26, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
      v31 = objc_msgSend(v1, sel_view);
      if (!v31)
      {
LABEL_57:
        __break(1u);
        goto LABEL_58;
      }
      v32 = v31;
      v33 = objc_msgSend(v1, sel_collectionView);
      if (!v33)
      {
LABEL_58:
        __break(1u);
        goto LABEL_59;
      }
      v34 = v33;
      v60 = v17;
      objc_msgSend(v32, sel_insertSubview_belowSubview_, v26, v33);

      v35 = *(void **)&v1[v12];
      *(_QWORD *)&v1[v12] = v26;
      v36 = v26;

      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v37 = swift_allocObject();
      *(_OWORD *)(v37 + 16) = xmmword_2375790C0;
      v62 = v36;
      v38 = objc_msgSend(v36, sel_centerXAnchor);
      v39 = objc_msgSend(v1, sel_view);
      if (!v39)
      {
LABEL_59:
        __break(1u);
        goto LABEL_60;
      }
      v40 = v39;
      v41 = objc_msgSend(v39, sel_safeAreaLayoutGuide);

      v42 = objc_msgSend(v41, sel_centerXAnchor);
      v43 = objc_msgSend(v38, sel_constraintEqualToAnchor_, v42);

      *(_QWORD *)(v37 + 32) = v43;
      v44 = objc_msgSend(v62, sel_bottomAnchor);
      v45 = objc_msgSend(v1, sel_view);
      if (!v45)
      {
LABEL_60:
        __break(1u);
        goto LABEL_61;
      }
      v46 = v45;
      v47 = (void *)objc_opt_self();
      v48 = objc_msgSend(v46, sel_safeAreaLayoutGuide);

      v49 = objc_msgSend(v48, sel_bottomAnchor);
      v50 = objc_msgSend(v44, sel_constraintEqualToAnchor_, v49);

      *(_QWORD *)(v37 + 40) = v50;
      specialized Array._endMutation()();
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v47, sel_activateConstraints_, isa);

      v25 = *(void **)&v1[v12];
      if (!v25)
      {
LABEL_61:
        __break(1u);
        return;
      }
      v52 = *(_QWORD *)&v1[v60];
      v53 = *(_QWORD *)&v1[v61];
      v20 = v52 * v53;
      v23 = (unsigned __int128)(v52 * (__int128)v53) >> 64 != (v52 * v53) >> 63;
    }
    if (v23)
      goto LABEL_51;
    v54 = ceil((double)*(uint64_t *)(*(_QWORD *)v7 + 16) / (double)v20);
    if ((~*(_QWORD *)&v54 & 0x7FF0000000000000) == 0)
    {
LABEL_52:
      __break(1u);
      goto LABEL_53;
    }
    if (v54 <= -9.22337204e18)
    {
LABEL_53:
      __break(1u);
      goto LABEL_54;
    }
    if (v54 >= 9.22337204e18)
    {
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    objc_msgSend(v25, sel_setNumberOfPages_, (uint64_t)v54);
    v55 = CAFUIDevicePickerViewController.isPortraitLayout.getter();
    v56 = *(void **)&v1[v12];
    if (!v56)
    {
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
    if ((v55 & 1) != 0)
      v57 = 20.0;
    else
      v57 = 40.0;
    v58 = objc_msgSend(v56, sel_heightAnchor);
    v59 = objc_msgSend(v58, sel_constraintEqualToConstant_, v57);

    CAFUIDevicePickerViewController.pageControlHeightConstraint.setter(v59);
  }
}

Swift::Void __swiftcall CAFUIDevicePickerViewController.updateEmptyView(title:)(Swift::String_optional title)
{
  void *v1;
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  Swift::String_optional v6;

  v1 = (void *)MEMORY[0x23B812F68](0x43495645445F4F4ELL, 0xEA00000000005345);
  v2 = CAFUILocalizedStringForKey(v1);

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5 = v4;

  v6.value._countAndFlagsBits = v3;
  v6.value._object = v5;
  CAFUICollectionViewController.updateEmptyView(title:)(v6);
  swift_bridgeObjectRelease();
}

uint64_t CAFUIDevicePickerViewController.collectionView(_:shouldSelectItemAt:)()
{
  return 1;
}

uint64_t CAFUIDevicePickerViewController.collectionView(_:cellForItemAt:)(void *a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  objc_class *ObjCClassFromMetadata;
  NSString *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  Class isa;
  id v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  id v30;
  uint64_t v31;
  char *v32;
  id v33;
  void *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  char v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  id v52;
  NSObject *v53;
  char *v54;
  char *v55;
  int v56;
  uint64_t v57;
  id v58;
  void *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  id v67;
  unsigned __int8 v68;
  char *v69;
  id v70;
  id v71;
  id v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  char *v79;
  NSObject *v80;
  os_log_type_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t result;
  char v92;
  uint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100[3];
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104[3];
  uint64_t v105;
  uint64_t v106;

  v3 = v2;
  v6 = type metadata accessor for IndexPath();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v93 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v8);
  v96 = (char *)&v93 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v95 = (char *)&v93 - v13;
  v14 = type metadata accessor for CAFUIDevicePickerViewCell();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  v16 = NSStringFromClass(ObjCClassFromMetadata);
  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v19 = v18;

  v20 = (void *)MEMORY[0x23B812F68](v17, v19);
  swift_bridgeObjectRelease();
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v22 = objc_msgSend(a1, sel_dequeueReusableCellWithReuseIdentifier_forIndexPath_, v20, isa);

  v23 = swift_dynamicCastClass();
  if (v23)
  {
    v24 = (char *)v23;
    v98 = (uint64_t)a2;
    v25 = CAFUIDevicePickerViewController.adjustedIndex(for:)((uint64_t)a2);
    v26 = (uint64_t *)(v3 + OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_items);
    swift_beginAccess();
    v27 = *v26;
    if (v25 >= *(_QWORD *)(*v26 + 16))
    {
      v95 = (char *)v25;
      v14 = v7;
      if (one-time initialization token for default == -1)
      {
LABEL_15:
        v46 = static OS_os_log.default;
        (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v10, v98, v6);
        v47 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v46, v47))
        {
          v48 = swift_slowAlloc();
          v49 = swift_slowAlloc();
          v104[0] = v49;
          *(_DWORD *)v48 = 136315394;
          v98 = v48 + 4;
          lazy protocol witness table accessor for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey((unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF678], MEMORY[0x24BDCF6B8]);
          v50 = dispatch thunk of CustomStringConvertible.description.getter();
          v100[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, v104);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v14 + 8))(v10, v6);
          *(_WORD *)(v48 + 12) = 2048;
          v100[0] = (uint64_t)v95;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_237505000, v46, v47, "Hiding cell for index path: %s, with adjusted index: %ld", (uint8_t *)v48, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x23B813C70](v49, -1, -1);
          MEMORY[0x23B813C70](v48, -1, -1);
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v14 + 8))(v10, v6);
        }
        objc_msgSend(v24, sel_setHidden_, 1);
        return (uint64_t)v24;
      }
    }
    else
    {
      v97 = v7;
      if ((v25 & 0x8000000000000000) == 0)
      {
        v28 = v25;
        outlined init with copy of CAFUIImageRepresentableItemProtocol(v27 + 40 * v25 + 32, (uint64_t)v104);
        v29 = *(void **)(v3 + OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_pairedDevices);
        v30 = objc_msgSend(v29, sel_pairedDevicesInformation);
        v31 = CAFPairedDevicesInformation.sortedPairedDevices.getter();

        if ((v31 & 0xC000000000000001) != 0)
        {
          v32 = (char *)MEMORY[0x23B813418](v28, v31);
        }
        else
        {
          if (v28 >= *(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_57;
          }
          v32 = (char *)*(id *)(v31 + 8 * v28 + 32);
        }
        a2 = v32;
        swift_bridgeObjectRelease();
        v33 = objc_msgSend(a2, sel_identifier);
        if (v33)
        {
          v34 = v33;
          v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v37 = v36;

          v38 = HIBYTE(v37) & 0xF;
          v93 = v35;
          if ((v37 & 0x2000000000000000) == 0)
            v38 = v35 & 0xFFFFFFFFFFFFLL;
          if (v38)
          {
            v96 = a2;
            v39 = v105;
            v40 = v106;
            __swift_project_boxed_opaque_existential_1(v104, v105);
            v41 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v40 + 24))(v39, v40);
            v42 = CAFUIDevicePickerViewController.layoutStyle.getter();
            CAFUIDevicePickerViewCell.configure(with:selectedImage:for:device:)(v104, v41, v42, v96);

            v43 = v96;
            objc_msgSend(v24, sel_setSelected_, 0);
            v94 = v24;
            objc_msgSend(v24, sel_setHidden_, 0);
            if (objc_msgSend(v43, sel_state) == 2
              && *(_QWORD *)(*(_QWORD *)(v3
                                       + OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_connectedDeviceSupportedActions)
                           + 16))
            {
              v44 = 1;
              v45 = 1;
              goto LABEL_34;
            }
            if (objc_msgSend(v43, sel_state, v93) != 2)
            {
              v52 = objc_msgSend(v29, sel_pairedDevicesAction);
              if (objc_msgSend(v52, sel_hasPairedDeviceActionRequest))
              {

LABEL_32:
                v45 = 1;
                v44 = 1;
                goto LABEL_34;
              }
              v68 = objc_msgSend(v52, sel_hasConnectDevice);

              if ((v68 & 1) != 0)
                goto LABEL_32;
            }
            v44 = 0;
            v45 = 2;
LABEL_34:
            v69 = v94;
            objc_msgSend(v94, sel_setUserInteractionEnabled_, v44, v93);
            objc_msgSend(*(id *)&v69[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_label], sel_setEnabled_, v44);
            objc_msgSend(*(id *)&v69[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_avatarView], sel_setTintAdjustmentMode_, v45);
            v70 = objc_msgSend(v29, sel_pairedDevicesAction);
            v71 = objc_msgSend(v70, sel_pairedDeviceActionRequest);

            if (v71)
            {
              if (objc_msgSend(v71, sel_deviceAction))
              {
                v72 = objc_msgSend(v71, sel_identifier);
                if (v72)
                {
                  v73 = v72;
                  v74 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                  v76 = v75;

                  if (v74 == v93 && v76 == v37)
                  {
                    swift_bridgeObjectRelease_n();
                    v24 = v94;
                    v77 = v98;
LABEL_51:
                    CAFUIDevicePickerViewController.setProcessingUI(for:at:)((uint64_t)v24, v77);

                    goto LABEL_43;
                  }
                  v92 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  v24 = v94;
                  v77 = v98;
                  if ((v92 & 1) != 0)
                    goto LABEL_51;

LABEL_42:
                  v78 = v24[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_showSpinner];
                  v24[OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_showSpinner] = 0;
                  CAFUIDevicePickerViewCell.showSpinner.didset(v78);
LABEL_43:
                  v79 = v95;
                  if (one-time initialization token for default != -1)
                    swift_once();
                  v80 = static OS_os_log.default;
                  (*(void (**)(char *, uint64_t, uint64_t))(v97 + 16))(v79, v77, v6);
                  outlined init with copy of CAFUIImageRepresentableItemProtocol((uint64_t)v104, (uint64_t)v100);
                  v81 = static os_log_type_t.default.getter();
                  if (os_log_type_enabled(v80, v81))
                  {
                    v82 = v28;
                    v83 = swift_slowAlloc();
                    v98 = swift_slowAlloc();
                    v103 = (char *)v98;
                    *(_DWORD *)v83 = 136315650;
                    lazy protocol witness table accessor for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey((unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF678], MEMORY[0x24BDCF6B8]);
                    v84 = dispatch thunk of CustomStringConvertible.description.getter();
                    v99 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v84, v85, (uint64_t *)&v103);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    swift_bridgeObjectRelease();
                    (*(void (**)(char *, uint64_t))(v97 + 8))(v79, v6);
                    *(_WORD *)(v83 + 12) = 2048;
                    v99 = v82;
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    *(_WORD *)(v83 + 22) = 2080;
                    v86 = v101;
                    v87 = v102;
                    __swift_project_boxed_opaque_existential_1(v100, v101);
                    v88 = (*(uint64_t (**)(uint64_t, uint64_t))(v87 + 8))(v86, v87);
                    v99 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v88, v89, (uint64_t *)&v103);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    swift_bridgeObjectRelease();
                    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v100);
                    _os_log_impl(&dword_237505000, v80, v81, "Returning cell for index path: %s, with adjusted index: %ld, item: %s)", (uint8_t *)v83, 0x20u);
                    v90 = v98;
                    swift_arrayDestroy();
                    MEMORY[0x23B813C70](v90, -1, -1);
                    MEMORY[0x23B813C70](v83, -1, -1);

                  }
                  else
                  {

                    (*(void (**)(char *, uint64_t))(v97 + 8))(v79, v6);
                    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v100);
                  }
LABEL_48:
                  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v104);
                  return (uint64_t)v24;
                }
              }

            }
            swift_bridgeObjectRelease();
            v24 = v94;
            v77 = v98;
            goto LABEL_42;
          }
          swift_bridgeObjectRelease();
        }
        if (one-time initialization token for default == -1)
        {
LABEL_24:
          v53 = static OS_os_log.default;
          v54 = v96;
          (*(void (**)(char *, uint64_t, uint64_t))(v97 + 16))(v96, v98, v6);
          v55 = a2;
          v56 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v53, (os_log_type_t)v56))
          {
            LODWORD(v98) = v56;
            v95 = (char *)v28;
            v57 = swift_slowAlloc();
            v94 = (char *)swift_slowAlloc();
            v100[0] = (uint64_t)v94;
            *(_DWORD *)v57 = 136315650;
            v58 = objc_msgSend(v55, sel_name);
            if (v58)
            {
              v59 = v58;
              v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              v62 = v61;

            }
            else
            {
              v62 = 0xE300000000000000;
              v60 = 7104878;
            }
            v103 = (char *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v62, v100);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            *(_WORD *)(v57 + 12) = 2080;
            lazy protocol witness table accessor for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey((unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF678], MEMORY[0x24BDCF6B8]);
            v63 = v96;
            v64 = dispatch thunk of CustomStringConvertible.description.getter();
            v103 = (char *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v65, v100);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v97 + 8))(v63, v6);
            *(_WORD *)(v57 + 22) = 2048;
            v103 = v95;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl(&dword_237505000, v53, (os_log_type_t)v98, "No device identifier for device name: %s at indexPath: %s, with adjusted index: %ld", (uint8_t *)v57, 0x20u);
            v66 = v94;
            swift_arrayDestroy();
            MEMORY[0x23B813C70](v66, -1, -1);
            MEMORY[0x23B813C70](v57, -1, -1);
          }
          else
          {

            (*(void (**)(char *, uint64_t))(v97 + 8))(v54, v6);
          }
          v67 = v22;
          objc_msgSend(v24, sel_setHidden_, 1);

          goto LABEL_48;
        }
LABEL_57:
        swift_once();
        goto LABEL_24;
      }
      __break(1u);
    }
    swift_once();
    goto LABEL_15;
  }

  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t CAFUIDevicePickerViewController.adjustedIndex(for:)(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  char *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v3 = type metadata accessor for IndexPath();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((CAFUIDevicePickerViewController.isPortraitLayout.getter() & 1) == 0)
    goto LABEL_15;
  v7 = IndexPath.item.getter();
  result = CAFUIDevicePickerViewController.rows.getter();
  if (!result)
  {
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = result;
  if (v7 == 0x8000000000000000 && result == -1)
    goto LABEL_33;
  result = IndexPath.item.getter();
  v10 = OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___rows;
  v11 = *(_QWORD *)&v1[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___rows];
  if (!v11)
    goto LABEL_25;
  if (result == 0x8000000000000000 && v11 == -1)
    goto LABEL_34;
  v12 = result % v11;
  result = CAFUIDevicePickerViewController.columns.getter();
  v13 = v12 * result;
  if ((unsigned __int128)(v12 * (__int128)result) >> 64 != (v12 * result) >> 63)
    goto LABEL_29;
  v14 = __OFADD__(v13, v7 / v9);
  v15 = v13 + v7 / v9;
  if (v14)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  result = IndexPath.section.getter();
  v16 = *(_QWORD *)&v1[v10];
  v17 = *(_QWORD *)&v1[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___columns];
  v18 = v16 * v17;
  if ((unsigned __int128)(v16 * (__int128)v17) >> 64 != (v16 * v17) >> 63)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v19 = result * v18;
  if ((unsigned __int128)(result * (__int128)v18) >> 64 != (result * v18) >> 63)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    return result;
  }
  v20 = v15 + v19;
  if (!__OFADD__(v15, v19))
    goto LABEL_18;
  __break(1u);
LABEL_15:
  v21 = IndexPath.row.getter();
  v22 = IndexPath.section.getter();
  v23 = CAFUIDevicePickerViewController.rows.getter();
  result = CAFUIDevicePickerViewController.columns.getter();
  v24 = v23 * result;
  if ((unsigned __int128)(v23 * (__int128)result) >> 64 != (v23 * result) >> 63)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v25 = v22 * v24;
  if ((unsigned __int128)(v22 * (__int128)v24) >> 64 != (v22 * v24) >> 63)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v20 = v21 + v25;
  if (__OFADD__(v21, v25))
  {
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
LABEL_18:
  if (one-time initialization token for default != -1)
    swift_once();
  v26 = static OS_os_log.default;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  v27 = v1;
  v28 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v26, v28))
  {
    v29 = swift_slowAlloc();
    v35 = swift_slowAlloc();
    v36 = v20;
    v37 = v35;
    *(_DWORD *)v29 = 134218498;
    v34 = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v29 + 12) = 2080;
    lazy protocol witness table accessor for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey((unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF678], MEMORY[0x24BDCF6B8]);
    v30 = dispatch thunk of CustomStringConvertible.description.getter();
    v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v6, v3);
    *(_WORD *)(v29 + 22) = 1024;
    v32 = v27[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___isPortraitLayout];

    LODWORD(v36) = v32 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl(&dword_237505000, v26, v28, "Returning adjusted index: %ld for indexPath: %s. isPortraitLayout: %{BOOL}d", (uint8_t *)v29, 0x1Cu);
    v33 = v35;
    swift_arrayDestroy();
    MEMORY[0x23B813C70](v33, -1, -1);
    MEMORY[0x23B813C70](v29, -1, -1);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  return v20;
}

id CAFUIDevicePickerViewController.setProcessingUI(for:at:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id result;
  void *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IndexPath?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = objc_msgSend(v3, sel_collectionView);
  if (result)
  {
    v10 = result;
    objc_msgSend(result, sel_setUserInteractionEnabled_, 0);

    objc_msgSend(v3, sel_setNeedsFocusUpdate);
    v11 = *(_BYTE *)(a1 + OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_showSpinner);
    *(_BYTE *)(a1 + OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_showSpinner) = 1;
    CAFUIDevicePickerViewCell.showSpinner.didset(v11);
    v12 = type metadata accessor for IndexPath();
    v13 = *(_QWORD *)(v12 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v8, a2, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v8, 0, 1, v12);
    v14 = (uint64_t)v3 + OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_spinningCellIndexPath;
    swift_beginAccess();
    outlined assign with take of IndexPath?((uint64_t)v8, v14);
    return (id)swift_endAccess();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void CAFUIDevicePickerViewController.collectionView(_:didSelectItemAt:)(char *a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  id v22;
  void *v23;
  Class isa;
  id v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  id v36;
  id v37;
  id v38;
  char *v39;
  id v40;
  id v41;
  void *v42;
  Class v43;
  id v44;
  char *v45;
  uint64_t v46;
  uint64_t ObjectType;
  void (*v48)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD v49[2];
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53[3];

  v3 = v2;
  v6 = type metadata accessor for IndexPath();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for default != -1)
    swift_once();
  v10 = static OS_os_log.default;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = swift_slowAlloc();
    v50 = v3;
    v14 = v13;
    v53[0] = v13;
    v51 = a2;
    *(_DWORD *)v12 = 136315138;
    v49[1] = v12 + 4;
    lazy protocol witness table accessor for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey((unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF678], MEMORY[0x24BDCF6B8]);
    v15 = dispatch thunk of CustomStringConvertible.description.getter();
    v52 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, v53);
    a2 = v51;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    _os_log_impl(&dword_237505000, v10, v11, "Selecting item at index %s", v12, 0xCu);
    swift_arrayDestroy();
    v17 = v14;
    v3 = v50;
    MEMORY[0x23B813C70](v17, -1, -1);
    MEMORY[0x23B813C70](v12, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  v18 = CAFUIDevicePickerViewController.adjustedIndex(for:)(a2);
  v19 = *(void **)&v3[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_pairedDevices];
  v20 = objc_msgSend(v19, sel_pairedDevicesInformation);
  v21 = CAFPairedDevicesInformation.sortedPairedDevices.getter();

  if ((v21 & 0xC000000000000001) != 0)
  {
    v22 = (id)MEMORY[0x23B813418](v18, v21);
    goto LABEL_10;
  }
  if ((v18 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v18 >= *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_28:
    __break(1u);
    return;
  }
  v22 = *(id *)(v21 + 8 * v18 + 32);
LABEL_10:
  v23 = v22;
  swift_bridgeObjectRelease();
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v25 = objc_msgSend(a1, sel_cellForItemAtIndexPath_, isa);

  if (v25)
  {
    type metadata accessor for CAFUIDevicePickerViewCell();
    v26 = swift_dynamicCastClass();
    if (v26
      && (v27 = v26, v51 = a2, (v28 = objc_msgSend(v23, sel_identifier)) != 0))
    {
      v29 = v28;
      v50 = a1;
      v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v32 = v31;

      if (objc_msgSend(v23, sel_state) == 2)
      {
        swift_bridgeObjectRelease();
        v33 = *(_QWORD *)&v3[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_connectedDeviceSupportedActions];
        v34 = *(void **)&v3[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_carSession];
        v35 = objc_allocWithZone((Class)type metadata accessor for CAFUIDevicePickerDetailViewController());
        v36 = v34;
        v37 = v23;
        v38 = v19;
        swift_bridgeObjectRetain();
        v39 = v3;
        v40 = CAFUIDevicePickerDetailViewController.init(device:pairedDevices:actions:carSession:delegate:)(v37, v38, v33, v34, (uint64_t)v3, (uint64_t)&protocol witness table for CAFUIDevicePickerViewController);
        v41 = objc_msgSend(v39, sel_navigationController);
        if (v41)
        {
          v42 = v41;
          objc_msgSend(v41, sel_pushViewController_animated_, v40, 1);

        }
        v43 = IndexPath._bridgeToObjectiveC()().super.isa;
        v44 = objc_msgSend(v50, sel_cellForItemAtIndexPath_, v43);

        if (v44)
        {
          objc_msgSend(v44, sel_setSelected_, 0);

        }
      }
      else
      {
        CAFUIDevicePickerViewController.setProcessingUI(for:at:)(v27, v51);
        v45 = &v3[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_delegate];
        swift_beginAccess();
        if (*(_QWORD *)v45)
        {
          v46 = *((_QWORD *)v45 + 1);
          ObjectType = swift_getObjectType();
          v48 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v46 + 8);
          swift_unknownObjectRetain();
          v48(1, v30, v32, ObjectType, v46);
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        v37 = v23;
      }
    }
    else
    {
      v37 = v25;
      v25 = v23;
    }

    v23 = v25;
  }

}

void CAFUIDevicePickerViewController.pairedDevicesInformationService(_:didUpdatePairedDeviceList:)(void *a1, void *a2)
{
  char *v2;
  char *v3;
  NSObject *v6;
  id v7;
  id v8;
  id v9;
  id v10;
  os_log_type_t v11;
  uint64_t v12;
  id v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t *v25;
  void *v26;
  id v27;
  uint64_t v28;
  void *v29;
  void *v30;
  Swift::String_optional v31;
  id v32;
  void *v33;
  _QWORD *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37[3];

  v3 = v2;
  if (one-time initialization token for default != -1)
    swift_once();
  v6 = static OS_os_log.default;
  v7 = a2;
  v8 = a1;
  v9 = v7;
  v10 = v8;
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v11))
  {
    v36 = v3;
    v12 = swift_slowAlloc();
    v34 = (_QWORD *)swift_slowAlloc();
    v35 = swift_slowAlloc();
    v37[0] = v35;
    *(_DWORD *)v12 = 138412546;
    v13 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v34 = v9;

    *(_WORD *)(v12 + 12) = 2080;
    v14 = CAFPairedDevicesInformation.sortedPairedDevices.getter();
    v15 = v10;
    v16 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo15CAFPairedDeviceCG_5CAFUI35CAFUIImageRepresentableItemProtocol_ps5NeverOTg506_sSo27d39DevicesInformationC5CAFUIE5itemsSayAC35ghij15_pGvgAcE_pSo0A6E6CXEfU_So0dnO0CTf1cn_nTf4ng_n(v14);
    swift_bridgeObjectRelease();

    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFUIImageRepresentableItemProtocol);
    v18 = MEMORY[0x23B813040](v16, v17);
    v20 = v19;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v20, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_237505000, v6, v11, "Paired device list updated: %@, items: %s", (uint8_t *)v12, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x23B813C70](v34, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x23B813C70](v35, -1, -1);
    v21 = v12;
    v3 = v36;
    MEMORY[0x23B813C70](v21, -1, -1);
  }
  else
  {

  }
  v22 = CAFPairedDevicesInformation.sortedPairedDevices.getter();
  v23 = v10;
  v24 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo15CAFPairedDeviceCG_5CAFUI35CAFUIImageRepresentableItemProtocol_ps5NeverOTg506_sSo27d39DevicesInformationC5CAFUIE5itemsSayAC35ghij15_pGvgAcE_pSo0A6E6CXEfU_So0dnO0CTf1cn_nTf4ng_n(v22);
  swift_bridgeObjectRelease();

  v25 = (uint64_t *)&v3[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_items];
  swift_beginAccess();
  *v25 = v24;
  swift_bridgeObjectRelease();
  v26 = (void *)MEMORY[0x23B812F68](0x43495645445F4F4ELL, 0xEA00000000005345);
  v27 = CAFUILocalizedStringForKey(v26);

  v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v30 = v29;

  v31.value._countAndFlagsBits = v28;
  v31.value._object = v30;
  CAFUICollectionViewController.updateEmptyView(title:)(v31);
  swift_bridgeObjectRelease();
  v32 = objc_msgSend(v3, sel_collectionView);
  if (v32)
  {
    v33 = v32;
    objc_msgSend(v32, sel_reloadData);

  }
  else
  {
    __break(1u);
  }
}

void CAFUIDevicePickerViewController.updatePTButton()()
{
  char *v0;
  char *v1;
  Swift::String v2;
  int v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  Swift::String_optional v10;
  UIButton_optional *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  Class isa;
  void *v27;
  id v28;
  id v29;

  v1 = v0;
  if (!*(_QWORD *)&v0[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_requestContentManager]
    || (v2._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(),
        v3 = CAFUIRequestContentManager.state(for:)(v2),
        swift_bridgeObjectRelease(),
        v3))
  {
    v4 = OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_punchThroughState;
    if (!v1[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_punchThroughState])
    {
      v29 = objc_msgSend(v1, sel_navigationItem);
      objc_msgSend(v29, sel_setRightBarButtonItem_, 0);
LABEL_12:

      return;
    }
    v5 = (void *)MEMORY[0x23B812F68](0x445F4547414E414DLL, 0xEE00534543495645);
    v6 = CAFUILocalizedStringForKey(v5);

    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v9 = v8;

    v10.value._countAndFlagsBits = v7;
    v10.value._object = v9;
    CAFUIPunchthroughState.buttonForCurrentState(title:)(v11, v10);
    v28 = v12;
    swift_bridgeObjectRelease();
    if (v28)
    {
      v13 = OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_ptButton;
      v14 = *(void **)&v1[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_ptButton];
      if (v14)
        objc_msgSend(v14, sel_removeFromSuperview);
      v15 = objc_msgSend(v1, sel_navigationController, v28);
      if (v15)
      {
        v16 = v15;
        v17 = objc_msgSend(v15, sel_navigationBar);

        if (v17)
        {
          objc_msgSend(v29, sel_addTarget_action_forControlEvents_, v1, sel_devicePickerButtonTapped, 64);
          objc_msgSend(v17, sel_addSubview_, v29);
          objc_msgSend(v29, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
          v18 = (void *)objc_opt_self();
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
          v19 = swift_allocObject();
          *(_OWORD *)(v19 + 16) = xmmword_2375790C0;
          v20 = objc_msgSend(v29, sel_trailingAnchor);
          v21 = objc_msgSend(v17, sel_trailingAnchor);
          v22 = objc_msgSend(v20, sel_constraintEqualToAnchor_, v21);

          *(_QWORD *)(v19 + 32) = v22;
          v23 = objc_msgSend(v29, sel_centerYAnchor);
          v24 = objc_msgSend(v17, sel_centerYAnchor);
          v25 = objc_msgSend(v23, sel_constraintEqualToAnchor_, v24);

          *(_QWORD *)(v19 + 40) = v25;
          specialized Array._endMutation()();
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
          isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          objc_msgSend(v18, sel_activateConstraints_, isa);

          objc_msgSend(v29, sel_setEnabled_, v1[v4] != 0);
          v27 = *(void **)&v1[v13];
          *(_QWORD *)&v1[v13] = v29;

          return;
        }
      }
      goto LABEL_12;
    }
  }
}

Swift::Void __swiftcall CAFUIDevicePickerViewController.devicePickerButtonTapped()()
{
  char *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;

  if (one-time initialization token for default != -1)
    swift_once();
  v1 = static OS_os_log.default;
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_237505000, v1, v2, "Requesting presentation of device picker PT!", v3, 2u);
    MEMORY[0x23B813C70](v3, -1, -1);
  }
  if (*(_QWORD *)&v0[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_requestContentManager])
  {
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v6 = v5;
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = v0;
    v8 = v0;
    CAFUIRequestContentManager.present(identifier:completion:)(v4, v6, (uint64_t)partial apply for closure #1 in CAFUIDevicePickerViewController.devicePickerButtonTapped(), v7);
    swift_bridgeObjectRelease();
    swift_release();
  }
}

BOOL closure #1 in CAFUIDevicePickerViewController.devicePickerButtonTapped()(char a1, uint64_t a2)
{
  NSObject *v2;
  os_log_type_t v3;
  _BOOL8 result;
  uint8_t *v5;
  const char *v6;

  if ((a1 & 1) != 0)
  {
    *(_BYTE *)(a2 + OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_punchThroughState) = 2;
    CAFUIDevicePickerViewController.updatePTButton()();
    if (one-time initialization token for default != -1)
      swift_once();
    v2 = static OS_os_log.default;
    v3 = static os_log_type_t.default.getter();
    result = os_log_type_enabled(v2, v3);
    if (result)
    {
      v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v5 = 0;
      v6 = "Presentation of device picker PT was successful!";
LABEL_10:
      _os_log_impl(&dword_237505000, v2, v3, v6, v5, 2u);
      JUMPOUT(0x23B813C70);
    }
  }
  else
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v2 = static OS_os_log.default;
    v3 = static os_log_type_t.default.getter();
    result = os_log_type_enabled(v2, v3);
    if (result)
    {
      v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v5 = 0;
      v6 = "Presentation of device picker PT was not successful.";
      goto LABEL_10;
    }
  }
  return result;
}

Swift::Void __swiftcall CAFUIDevicePickerViewController.punchThroughController(_:didDismissPunchThroughWithIdentifier:)(CAFUIPunchThroughController *_, Swift::String didDismissPunchThroughWithIdentifier)
{
  uint64_t v2;

  *(_BYTE *)(v2 + OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_punchThroughState) = 1;
  CAFUIDevicePickerViewController.updatePTButton()();
}

void CAFUIDevicePickerViewController.__allocating_init(setting:isRHD:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void CAFUIDevicePickerViewController.init(setting:isRHD:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void closure #1 in CAFUIDevicePickerViewController.updateDevicePickerLimitedUI()(char a1)
{
  id v1;

  if ((a1 & 1) != 0)
    static os_log_type_t.default.getter();
  else
    static os_log_type_t.error.getter();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  v1 = (id)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();

}

Swift::Void __swiftcall CAFUIDevicePickerViewController.resetSpinningCellAndUserInteraction()()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  _QWORD aBlock[6];

  v0 = type metadata accessor for DispatchWorkItemFlags();
  v1 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458];
  v2 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v4 = (char *)aBlock - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  v9 = (void *)static OS_dispatch_queue.main.getter();
  v10 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = partial apply for closure #1 in CAFUIDevicePickerViewController.resetSpinningCellAndUserInteraction();
  aBlock[5] = v10;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_4;
  v11 = _Block_copy(aBlock);
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type UIPageViewControllerOptionsKey and conformance UIPageViewControllerOptionsKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, v1, MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x23B813184](0, v8, v4, v11);
  _Block_release(v11);

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v0);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

id closure #1 in CAFUIDevicePickerViewController.resetSpinningCellAndUserInteraction()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id result;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  Class isa;
  uint64_t v20;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IndexPath?);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v20 - v6;
  v8 = type metadata accessor for IndexPath();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  result = (id)MEMORY[0x23B813CDC](a1 + 16);
  if (result)
  {
    v13 = result;
    result = objc_msgSend(result, sel_collectionView);
    if (result)
    {
      v14 = result;
      objc_msgSend(result, sel_setUserInteractionEnabled_, 1);

      v15 = (uint64_t)v13 + OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_spinningCellIndexPath;
      swift_beginAccess();
      outlined init with copy of IndexPath?(v15, (uint64_t)v7);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
      {

        return (id)outlined destroy of IndexPath?((uint64_t)v7);
      }
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5, 1, 1, v8);
      swift_beginAccess();
      outlined assign with take of IndexPath?((uint64_t)v5, v15);
      swift_endAccess();
      result = objc_msgSend(v13, sel_collectionView);
      if (result)
      {
        v16 = result;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<IndexPath>);
        v17 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
        v18 = swift_allocObject();
        *(_OWORD *)(v18 + 16) = xmmword_237579480;
        (*(void (**)(unint64_t, char *, uint64_t))(v9 + 16))(v18 + v17, v11, v8);
        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        objc_msgSend(v16, sel_reconfigureItemsAtIndexPaths_, isa);

        return (id)(*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

void CAFUIDevicePickerViewController.pairedDevicesActionService(_:didUpdatePairedDeviceActionRequest:)(uint64_t a1, void *a2)
{
  specialized CAFUIDevicePickerViewController.pairedDevicesActionService(_:didUpdatePairedDeviceActionRequest:)(a2);
}

void CAFUIDevicePickerViewController.shouldRequest(action:for:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t ObjectType;
  void (*v20)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t);
  id v21;
  void *v22;
  id v23;
  void *v24;
  id v25;
  unint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  id v34;
  void *v35;
  id v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  void (*v41)(uint64_t, char *, unint64_t);
  uint64_t v42;
  os_log_type_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v4 = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IndexPath?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (uint64_t)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for IndexPath();
  v54 = *(_QWORD *)(v11 - 8);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v53 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v52 = (char *)&v48 - v14;
  v15 = objc_msgSend(v4, sel_collectionView);
  if (v15)
  {
    v16 = v15;
    objc_msgSend(v15, sel_setUserInteractionEnabled_, 0);

    objc_msgSend(v4, sel_setNeedsFocusUpdate);
    v17 = (uint64_t *)((char *)v4 + OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_delegate);
    swift_beginAccess();
    if (*v17)
    {
      v18 = v17[1];
      ObjectType = swift_getObjectType();
      v20 = *(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v18 + 8);
      swift_unknownObjectRetain();
      v20(a1, a2, a3, ObjectType, v18);
      swift_unknownObjectRelease();
    }
    v21 = objc_msgSend(v4, sel_navigationController);
    if (v21)
    {
      v22 = v21;

    }
    v23 = objc_msgSend(v4, sel_collectionView);
    if (v23)
    {
      v24 = v23;
      v25 = objc_msgSend(v23, sel_visibleCells);

      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UICollectionViewCell);
      v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v26 >> 62)
      {
LABEL_28:
        swift_bridgeObjectRetain();
        v27 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v27)
        {
LABEL_9:
          v49 = v11;
          v50 = v10;
          v51 = v4;
          v11 = v26 & 0xC000000000000001;
          v10 = 4;
          v4 = &OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_deviceIdentifier;
          while (1)
          {
            if (v11)
              v28 = (id)MEMORY[0x23B813418](v10 - 4, v26);
            else
              v28 = *(id *)(v26 + 8 * v10);
            v29 = v28;
            v30 = v10 - 3;
            if (__OFADD__(v10 - 4, 1))
            {
              __break(1u);
              goto LABEL_28;
            }
            type metadata accessor for CAFUIDevicePickerViewCell();
            v31 = swift_dynamicCastClass();
            if (v31)
            {
              v32 = v31;
              v33 = *(_QWORD *)(v31 + OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_deviceIdentifier) == a2
                 && *(_QWORD *)(v31 + OBJC_IVAR____TtC5CAFUI25CAFUIDevicePickerViewCell_deviceIdentifier + 8) == a3;
              if (v33 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                break;
            }

            ++v10;
            if (v30 == v27)
              goto LABEL_29;
          }
          swift_bridgeObjectRelease();
          v34 = objc_msgSend(v51, sel_collectionView);
          if (!v34)
            goto LABEL_37;
          v35 = v34;
          v36 = objc_msgSend(v34, sel_indexPathForCell_, v32);

          v38 = v49;
          v37 = v50;
          if (v36)
          {
            v39 = v53;
            static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();

            v40 = v54;
            v41 = *(void (**)(uint64_t, char *, unint64_t))(v54 + 32);
            v41(v37, v39, v38);
            (*(void (**)(uint64_t, _QWORD, uint64_t, unint64_t))(v40 + 56))(v37, 0, 1, v38);
            if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t))(v40 + 48))(v37, 1, v38) != 1)
            {
              v42 = (uint64_t)v52;
              v41((uint64_t)v52, (char *)v37, v38);
              CAFUIDevicePickerViewController.setProcessingUI(for:at:)(v32, v42);

              (*(void (**)(uint64_t, unint64_t))(v40 + 8))(v42, v38);
              return;
            }
          }
          else
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v54 + 56))(v50, 1, 1, v49);
          }

          outlined destroy of IndexPath?(v37);
          goto LABEL_30;
        }
      }
      else
      {
        v27 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v27)
          goto LABEL_9;
      }
LABEL_29:
      swift_bridgeObjectRelease();
LABEL_30:
      v43 = static os_log_type_t.error.getter();
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
      swift_bridgeObjectRetain_n();
      v44 = static OS_os_log.default.getter();
      v45 = v43;
      if (os_log_type_enabled(v44, v43))
      {
        v46 = (uint8_t *)swift_slowAlloc();
        v47 = swift_slowAlloc();
        v56 = v47;
        *(_DWORD *)v46 = 136315138;
        swift_bridgeObjectRetain();
        v55 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v56);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_237505000, v44, v45, "Cell not visible for deviceID: %s", v46, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x23B813C70](v47, -1, -1);
        MEMORY[0x23B813C70](v46, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_37:
  __break(1u);
}

Swift::Void __swiftcall CAFUIDevicePickerViewController.navigationController(_:didShow:animated:)(UINavigationController *_, UIViewController *didShow, Swift::Bool animated)
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void (*v18)(char *, unint64_t, uint64_t);
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  id v20;
  void *v21;
  Class isa;
  _QWORD v23[2];
  uint64_t v24;
  id v25;

  v4 = v3;
  v5 = type metadata accessor for IndexPath();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IndexPath?);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = v4;
  v12 = objc_msgSend(v4, sel_collectionView);
  if (v12)
  {
    v13 = v12;
    v14 = objc_msgSend(v12, sel_indexPathsForSelectedItems);

    if (v14)
    {
      v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      v16 = *(_QWORD *)(v15 + 16);
      v23[1] = v15;
      if (v16)
      {
        v17 = v15 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
        v24 = *(_QWORD *)(v6 + 72);
        v18 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
        swift_bridgeObjectRetain();
        while (1)
        {
          v18(v11, v17, v5);
          v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
          v19(v11, 0, 1, v5);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v5) == 1)
            break;
          (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v5);
          v20 = objc_msgSend(v25, sel_collectionView);
          if (!v20)
          {
            __break(1u);
            goto LABEL_14;
          }
          v21 = v20;
          isa = IndexPath._bridgeToObjectiveC()().super.isa;
          objc_msgSend(v21, sel_deselectItemAtIndexPath_animated_, isa, 1);

          (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
          v17 += v24;
          if (!--v16)
            goto LABEL_10;
        }
      }
      else
      {
        v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
        swift_bridgeObjectRetain();
LABEL_10:
        v19(v11, 1, 1, v5);
      }
      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
LABEL_14:
    __break(1u);
  }
}

void protocol witness for static Equatable.== infix(_:_:) in conformance CAFUIDevicePickerViewController.LayoutStyle(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

void protocol witness for Hashable.hashValue.getter in conformance CAFUIDevicePickerViewController.LayoutStyle()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_23756B014()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance CAFUIDevicePickerViewController.LayoutStyle()
{
  __asm { BR              X10 }
}

uint64_t sub_23756B0B0()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance CAFUIDevicePickerViewController.LayoutStyle()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_23756B144()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CAFUIDevicePickerViewController.LayoutStyle@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized CAFUIDevicePickerViewController.LayoutStyle.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CAFUIDevicePickerViewController.LayoutStyle()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_23756B200 + 4 * byte_23757ADB4[*v0]))();
}

void sub_23756B200(_QWORD *a1@<X8>)
{
  *a1 = 0x6D756964656DLL;
  a1[1] = 0xE600000000000000;
}

void sub_23756B218(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x656772616CLL;
  a1[1] = v1;
}

void sub_23756B22C(_QWORD *a1@<X8>)
{
  *a1 = 0x7469617274726F70;
  a1[1] = 0xE800000000000000;
}

uint64_t serialize(_:at:)(uint64_t result, _BYTE **a2)
{
  _BYTE *v2;

  v2 = *a2;
  *v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t closure #1 in osLogInternal(_:log:type:)(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t closure #1 in OSLogArguments.append(_:)(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;

  v6 = a4();
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, a3);
  v8 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x24BEE2520];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = _StringGuts.copyUTF8(into:)();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      v2 = String.UTF8View._foreignCount()();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

_QWORD *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t _StringGuts._slowEnsureMatchingEncoding(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v3 = a1;
  v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v10 = String.UTF16View.index(_:offsetBy:)();
    v11 = v10 + (v4 << 16);
    v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v13 = v12;
    return v13 | 4;
  }
  else
  {
    v5 = MEMORY[0x23B812FF8](15, a1 >> 16);
    v6 = v5 + (v4 << 16);
    v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v8 = v7;
    return v8 | 8;
  }
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_BYTE **closure #1 in OSLogArguments.append(_:)(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE *v4;

  v4 = *result;
  *v4 = a4;
  *result = v4 + 1;
  return result;
}

void *closure #1 in serialize<A>(_:at:)(void *__src, uint64_t a2, void *__dst, uint64_t a4)
{
  uint64_t v4;

  if (__src)
    v4 = a2 - (_QWORD)__src;
  else
    v4 = 0;
  if (!__dst)
  {
    if (v4 <= 0)
      return __src;
LABEL_10:
    __src = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return __src;
  }
  if (a4 - (uint64_t)__dst < v4)
    goto LABEL_10;
  if (__src)
    return memmove(__dst, __src, a2 - (_QWORD)__src);
  return __src;
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Int)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result;
  return result;
}

id specialized CAFUICollectionViewController.init(setting:isRHD:)(void *a1, char a2, char *a3)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  _QWORD *v14;
  id v15;
  uint64_t inited;
  uint64_t v17;
  Class isa;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  objc_super v26;
  uint64_t v27;
  uint64_t v28;

  *(_QWORD *)&a3[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_emptyView] = 0;
  v5 = &a3[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_itemSize];
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;
  v5[16] = 1;
  v6 = &a3[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_collectionViewSize];
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 1;
  v7 = &a3[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_setting];
  *(_QWORD *)v7 = a1;
  *((_QWORD *)v7 + 1) = &protocol witness table for CAFSingleSelectImageSetting;
  v8 = a3;
  v9 = a1;
  v10 = objc_msgSend(v9, sel_listUserVisibleValue);
  v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v12 = *(_QWORD *)(v11 + 16);
  swift_bridgeObjectRelease();
  v13 = v9;
  v14 = specialized Sequence.compactMap<A>(_:)(0, v12, v13);

  *(_QWORD *)&v8[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_items] = v14;
  v8[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_isRHD] = a2;

  v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD488]), sel_init);
  objc_msgSend(v15, sel_setItemSize_, 175.0, 91.0);
  objc_msgSend(v15, sel_setMinimumInteritemSpacing_, 10.0);
  objc_msgSend(v15, sel_setMinimumLineSpacing_, 8.0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_237579480;
  v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v28 = v17;
  AnyHashable.init<A>(_:)();
  *(_QWORD *)(inited + 96) = MEMORY[0x24BEE44F0];
  *(_DWORD *)(inited + 72) = 3;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v15, sel__setRowAlignmentsOptions_, isa);

  v26.receiver = v8;
  v26.super_class = (Class)type metadata accessor for CAFUICollectionViewController();
  v19 = objc_msgSendSuper2(&v26, sel_initWithCollectionViewLayout_, v15);
  v20 = objc_msgSend(v13, sel_userVisibleLabel);
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v23 = v22;

  v24 = (void *)MEMORY[0x23B812F68](v21, v23);
  swift_bridgeObjectRelease();
  objc_msgSend(v19, sel_setTitle_, v24);

  return v19;
}

{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  _QWORD *v14;
  id v15;
  uint64_t inited;
  uint64_t v17;
  Class isa;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  objc_super v26;
  uint64_t v27;
  uint64_t v28;

  *(_QWORD *)&a3[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_emptyView] = 0;
  v5 = &a3[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_itemSize];
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;
  v5[16] = 1;
  v6 = &a3[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_collectionViewSize];
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 1;
  v7 = &a3[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_setting];
  *(_QWORD *)v7 = a1;
  *((_QWORD *)v7 + 1) = &protocol witness table for CAFMultipleSelectImageSetting;
  v8 = a3;
  v9 = a1;
  v10 = objc_msgSend(v9, sel_listUserVisibleValue);
  v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v12 = *(_QWORD *)(v11 + 16);
  swift_bridgeObjectRelease();
  v13 = v9;
  v14 = specialized Sequence.compactMap<A>(_:)(0, v12, v13);

  *(_QWORD *)&v8[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_items] = v14;
  v8[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_isRHD] = a2;

  v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD488]), sel_init);
  objc_msgSend(v15, sel_setItemSize_, 175.0, 91.0);
  objc_msgSend(v15, sel_setMinimumInteritemSpacing_, 10.0);
  objc_msgSend(v15, sel_setMinimumLineSpacing_, 8.0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_237579480;
  v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v28 = v17;
  AnyHashable.init<A>(_:)();
  *(_QWORD *)(inited + 96) = MEMORY[0x24BEE44F0];
  *(_DWORD *)(inited + 72) = 3;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v15, sel__setRowAlignmentsOptions_, isa);

  v26.receiver = v8;
  v26.super_class = (Class)type metadata accessor for CAFUICollectionViewController();
  v19 = objc_msgSendSuper2(&v26, sel_initWithCollectionViewLayout_, v15);
  v20 = objc_msgSend(v13, sel_userVisibleLabel);
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v23 = v22;

  v24 = (void *)MEMORY[0x23B812F68](v21, v23);
  swift_bridgeObjectRelease();
  objc_msgSend(v19, sel_setTitle_, v24);

  return v19;
}

{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  id v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  id v13;
  uint64_t inited;
  uint64_t v15;
  Class isa;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  objc_super v25;
  uint64_t v26;
  uint64_t v27;

  *(_QWORD *)&a3[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_emptyView] = 0;
  v5 = &a3[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_itemSize];
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;
  v5[16] = 1;
  v6 = &a3[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_collectionViewSize];
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 1;
  v7 = &a3[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_setting];
  *(_QWORD *)v7 = a1;
  *((_QWORD *)v7 + 1) = &protocol witness table for CAFPairedDevicesInformation;
  v8 = a3;
  v9 = a1;
  v10 = CAFPairedDevicesInformation.sortedPairedDevices.getter();
  v11 = v9;
  v12 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo15CAFPairedDeviceCG_5CAFUI35CAFUIImageRepresentableItemProtocol_ps5NeverOTg506_sSo27d39DevicesInformationC5CAFUIE5itemsSayAC35ghij15_pGvgAcE_pSo0A6E6CXEfU_So0dnO0CTf1cn_nTf4ng_n(v10);
  swift_bridgeObjectRelease();

  *(_QWORD *)&v8[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_items] = v12;
  v8[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_isRHD] = a2;

  v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD488]), sel_init);
  objc_msgSend(v13, sel_setItemSize_, 175.0, 91.0);
  objc_msgSend(v13, sel_setMinimumInteritemSpacing_, 10.0);
  objc_msgSend(v13, sel_setMinimumLineSpacing_, 8.0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_237579480;
  v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v27 = v15;
  AnyHashable.init<A>(_:)();
  *(_QWORD *)(inited + 96) = MEMORY[0x24BEE44F0];
  *(_DWORD *)(inited + 72) = 3;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v13, sel__setRowAlignmentsOptions_, isa);

  v25.receiver = v8;
  v25.super_class = (Class)type metadata accessor for CAFUICollectionViewController();
  v17 = objc_msgSendSuper2(&v25, sel_initWithCollectionViewLayout_, v13);
  v18 = (void *)MEMORY[0x23B812F68](0x495F444552494150, 0xEE0053454E4F4850);
  v19 = CAFUILocalizedStringForKey(v18);

  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v22 = v21;

  v23 = (void *)MEMORY[0x23B812F68](v20, v22);
  swift_bridgeObjectRelease();
  objc_msgSend(v17, sel_setTitle_, v23);

  return v17;
}

id specialized Sequence.forEach(_:)(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  void (*v13)(char *, uint64_t, uint64_t, uint64_t);
  id result;
  void *v15;
  Class isa;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  id v20;

  v20 = a2;
  v3 = type metadata accessor for IndexPath();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IndexPath?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a1 + 16);
  v17 = a1;
  if (v10)
  {
    v11 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v12 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    v18 = *(_QWORD *)(v4 + 72);
    v19 = v12;
    swift_bridgeObjectRetain();
    while (1)
    {
      v19(v9, v11, v3);
      v13 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
      v13(v9, 0, 1, v3);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v9, v3);
      result = objc_msgSend(v20, sel_collectionView, v17);
      if (!result)
      {
        __break(1u);
        return result;
      }
      v15 = result;
      isa = IndexPath._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v15, sel_deselectItemAtIndexPath_animated_, isa, 1);

      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      v11 += v18;
      if (!--v10)
        goto LABEL_8;
    }
  }
  else
  {
    v13 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
    swift_bridgeObjectRetain();
LABEL_8:
    v13(v9, 1, 1, v3);
  }
  return (id)swift_bridgeObjectRelease();
}

char *specialized static CAFUIDevicePickerViewController.connectedDeviceSupportedActions(for:)(void *a1)
{
  char *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  if ((objc_msgSend(a1, sel_hasPairedDeviceActionRequest) & 1) != 0
    || objc_msgSend(a1, sel_hasDisconnectDevice))
  {
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
    v4 = *((_QWORD *)v2 + 2);
    v3 = *((_QWORD *)v2 + 3);
    if (v4 >= v3 >> 1)
      v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v3 > 1), v4 + 1, 1, v2);
    *((_QWORD *)v2 + 2) = v4 + 1;
    v2[v4 + 32] = 2;
  }
  else
  {
    v2 = (char *)MEMORY[0x24BEE4AF8];
  }
  if ((objc_msgSend(a1, sel_hasPairedDeviceActionRequest) & 1) != 0
    || objc_msgSend(a1, sel_hasForgetDevice))
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
    v6 = *((_QWORD *)v2 + 2);
    v5 = *((_QWORD *)v2 + 3);
    if (v6 >= v5 >> 1)
      v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v5 > 1), v6 + 1, 1, v2);
    *((_QWORD *)v2 + 2) = v6 + 1;
    v2[v6 + 32] = 3;
  }
  return v2;
}

uint64_t sub_23756C640()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in CAFUIDevicePickerViewController.init(requestContentManager:pairedDevices:carSession:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in CAFUIDevicePickerViewController.init(requestContentManager:pairedDevices:carSession:)(a1, v1);
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

void specialized CAFUIDevicePickerViewController.init(coder:)()
{
  _BYTE *v0;
  _QWORD *v1;
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;

  v1 = &v0[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_delegate];
  *v1 = 0;
  v1[1] = 0;
  v2 = &v0[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___cellSize];
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 1) = 0;
  v2[16] = 1;
  v3 = &v0[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___rows];
  *(_QWORD *)v3 = 0;
  v3[8] = 1;
  v4 = &v0[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___columns];
  *(_QWORD *)v4 = 0;
  v4[8] = 1;
  v0[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___layoutStyle] = 4;
  v0[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___isPortraitLayout] = 2;
  *(_QWORD *)&v0[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_limitedUIView] = 0;
  v0[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_punchThroughState] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_ptButton] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_pageControl] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_pageControlHeightConstraint] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_carSession] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_spinnerTimer] = 0;
  v5 = &v0[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_spinningCellIndexPath];
  v6 = type metadata accessor for IndexPath();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized CAFUIDevicePickerViewController.collectionView(_:layout:insetForSectionAt:)(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  double v19;
  CGFloat v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  double v25;
  CGFloat v26;
  double v27;
  CGFloat v28;
  double v29;
  CGFloat v30;
  double v31;
  CGFloat v32;
  id v33;
  void *v34;
  _QWORD v35[4];
  CGRect v36;
  CGRect v37;
  CGRect v38;
  CGRect v39;

  v2 = v1;
  v4 = type metadata accessor for FloatingPointRoundingRule();
  v5 = MEMORY[0x24BDAC7A8](v4);
  v35[1] = (char *)v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v35[2] = (char *)v35 - v8;
  v9 = MEMORY[0x24BDAC7A8](v7);
  v35[3] = (char *)v35 - v10;
  MEMORY[0x24BDAC7A8](v9);
  objc_msgSend(a1, sel_bounds);
  CGRectGetWidth(v36);
  objc_msgSend(a1, sel_bounds);
  CGRectGetHeight(v37);
  CAFUIDevicePickerViewController.rows.getter();
  CAFUIDevicePickerViewController.cellSize.getter();
  v35[0] = OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___rows;
  if ((CAFUIDevicePickerViewController.isPortraitLayout.getter() & 1) == 0)
  {
    v11 = objc_msgSend(v2, sel_view);
    if (!v11)
    {
LABEL_10:
      __break(1u);
      goto LABEL_11;
    }
    v12 = v11;
    objc_msgSend(v11, sel_bounds);
    v14 = v13;
    v16 = v15;
    v18 = v17;
    v20 = v19;

    v38.origin.x = v14;
    v38.origin.y = v16;
    v38.size.width = v18;
    v38.size.height = v20;
    CGRectGetHeight(v38);
    v21 = objc_msgSend(v2, sel_view);
    if (!v21)
    {
LABEL_11:
      __break(1u);
      JUMPOUT(0x23756D064);
    }
    v22 = v21;
    objc_msgSend(v21, sel_safeAreaInsets);

  }
  v23 = objc_msgSend(v2, sel_view);
  if (v23)
  {
    v24 = v23;
    objc_msgSend(v23, sel_bounds);
    v26 = v25;
    v28 = v27;
    v30 = v29;
    v32 = v31;

    v39.origin.x = v26;
    v39.origin.y = v28;
    v39.size.width = v30;
    v39.size.height = v32;
    CGRectGetHeight(v39);
    v33 = objc_msgSend(v2, sel_view);
    if (v33)
    {
      v34 = v33;
      objc_msgSend(v33, sel_safeAreaInsets);

      CAFUIDevicePickerViewController.layoutStyle.getter();
      __asm { BR              X10 }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  goto LABEL_10;
}

uint64_t specialized CAFUIDevicePickerViewController.collectionView(_:numberOfItemsInSection:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  v0 = CAFUIDevicePickerViewController.columns.getter();
  v1 = CAFUIDevicePickerViewController.rows.getter();
  v2 = v0 * v1;
  if ((unsigned __int128)(v0 * (__int128)v1) >> 64 == (v0 * v1) >> 63)
  {
    if (one-time initialization token for default == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v3 = static OS_os_log.default;
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v5 = 134217984;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_237505000, v3, v4, "number of items in section: %ld", v5, 0xCu);
    MEMORY[0x23B813C70](v5, -1, -1);
  }
  return v2;
}

uint64_t specialized CAFUIDevicePickerViewController.numberOfSections(in:)()
{
  void *v0;
  NSObject *v1;
  char *v2;
  os_log_type_t v3;
  uint8_t *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  double v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;

  if (one-time initialization token for default != -1)
    swift_once();
  v1 = static OS_os_log.default;
  v2 = v0;
  v3 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v1, v3))
  {

LABEL_10:
    v10 = &v2[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_items];
    swift_beginAccess();
    v11 = *(_QWORD *)(*(_QWORD *)v10 + 16);
    v12 = CAFUIDevicePickerViewController.rows.getter();
    result = CAFUIDevicePickerViewController.columns.getter();
    if ((unsigned __int128)(v12 * (__int128)result) >> 64 == (v12 * result) >> 63)
    {
      v13 = ceil((double)v11 / (double)(v12 * result));
      if ((~*(_QWORD *)&v13 & 0x7FF0000000000000) != 0)
      {
        if (v13 > -9.22337204e18)
        {
          if (v13 < 9.22337204e18)
            return (uint64_t)v13;
          goto LABEL_18;
        }
LABEL_17:
        __break(1u);
LABEL_18:
        __break(1u);
        goto LABEL_19;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_17;
  }
  v4 = (uint8_t *)swift_slowAlloc();
  *(_DWORD *)v4 = 134217984;
  v5 = &v2[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_items];
  swift_beginAccess();
  v6 = *(_QWORD *)(*(_QWORD *)v5 + 16);
  v7 = CAFUIDevicePickerViewController.rows.getter();
  result = CAFUIDevicePickerViewController.columns.getter();
  if ((unsigned __int128)(v7 * (__int128)result) >> 64 != (v7 * result) >> 63)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = ceil((double)v6 / (double)(v7 * result));
  if ((~*(_QWORD *)&v9 & 0x7FF0000000000000) == 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v9 <= -9.22337204e18)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v9 < 9.22337204e18)
  {
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl(&dword_237505000, v1, v3, "number of sections: %ld", v4, 0xCu);
    MEMORY[0x23B813C70](v4, -1, -1);
    goto LABEL_10;
  }
LABEL_22:
  __break(1u);
  return result;
}

void specialized CAFUIDevicePickerViewController.scrollViewDidScroll(_:)()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  id v18;
  void *v19;
  double v20;
  double v21;
  id v22;
  void *v23;
  double v24;
  CGFloat v25;
  double v26;
  CGFloat v27;
  double v28;
  CGFloat v29;
  double v30;
  CGFloat v31;
  double v32;
  NSObject *v33;
  char *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  _QWORD *v41;
  void *v42;
  id v43;
  CGRect v44;
  CGRect v45;

  v1 = &v0[OBJC_IVAR____TtC5CAFUI29CAFUICollectionViewController_items];
  swift_beginAccess();
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v3 = CAFUIDevicePickerViewController.rows.getter();
  v4 = CAFUIDevicePickerViewController.columns.getter();
  if ((unsigned __int128)(v3 * (__int128)v4) >> 64 != (v3 * v4) >> 63)
  {
    __break(1u);
    goto LABEL_27;
  }
  v5 = ceil((double)v2 / (double)(v3 * v4));
  if ((~*(_QWORD *)&v5 & 0x7FF0000000000000) == 0)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (v5 <= -9.22337204e18)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v5 >= 9.22337204e18)
  {
LABEL_29:
    __break(1u);
LABEL_30:
    swift_once();
    goto LABEL_17;
  }
  if ((uint64_t)v5 >= 2)
  {
    v6 = *(void **)&v0[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_pageControl];
    if (v6)
    {
      v7 = v6;
      v8 = objc_msgSend(v0, sel_collectionView);
      if (!v8)
      {
        __break(1u);
        goto LABEL_39;
      }
      v9 = v8;
      objc_msgSend(v8, sel_frame);
      v11 = v10;
      v13 = v12;
      v15 = v14;
      v17 = v16;

      v44.origin.x = v11;
      v44.origin.y = v13;
      v44.size.width = v15;
      v44.size.height = v17;
      if (CGRectGetWidth(v44) > 0.0)
      {
        v18 = objc_msgSend(v0, sel_collectionView);
        if (v18)
        {
          v19 = v18;
          objc_msgSend(v18, sel_contentOffset);
          v21 = v20;

          v22 = objc_msgSend(v0, sel_collectionView);
          if (v22)
          {
            v23 = v22;
            objc_msgSend(v22, sel_frame);
            v25 = v24;
            v27 = v26;
            v29 = v28;
            v31 = v30;

            v45.origin.x = v25;
            v45.origin.y = v27;
            v45.size.width = v29;
            v45.size.height = v31;
            v32 = round(v21 / CGRectGetWidth(v45));
            if ((~*(_QWORD *)&v32 & 0x7FF0000000000000) != 0)
            {
              if (v32 > -9.22337204e18)
              {
                if (v32 < 9.22337204e18)
                {
                  objc_msgSend(v7, sel_setCurrentPage_, (uint64_t)v32);

                  return;
                }
LABEL_37:
                __break(1u);
              }
LABEL_36:
              __break(1u);
              goto LABEL_37;
            }
LABEL_35:
            __break(1u);
            goto LABEL_36;
          }
          goto LABEL_40;
        }
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return;
      }

    }
  }
  if (one-time initialization token for default != -1)
    goto LABEL_30;
LABEL_17:
  v33 = static OS_os_log.default;
  v34 = v0;
  v35 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v33, v35))
  {

    return;
  }
  v36 = swift_slowAlloc();
  v37 = swift_slowAlloc();
  *(_DWORD *)v36 = 67109378;
  v38 = *(_QWORD *)&v34[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___rows];
  v39 = *(_QWORD *)&v34[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController____lazy_storage___columns];
  if ((unsigned __int128)(v38 * (__int128)v39) >> 64 != (v38 * v39) >> 63)
  {
    __break(1u);
    goto LABEL_32;
  }
  v40 = ceil((double)*(uint64_t *)(*(_QWORD *)v1 + 16) / (double)(v38 * v39));
  if ((~*(_QWORD *)&v40 & 0x7FF0000000000000) == 0)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if (v40 <= -9.22337204e18)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (v40 >= 9.22337204e18)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v41 = (_QWORD *)v37;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *(_WORD *)(v36 + 8) = 2112;
  v42 = *(void **)&v34[OBJC_IVAR____TtC5CAFUI31CAFUIDevicePickerViewController_pageControl];
  if (v42)
    v43 = v42;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *v41 = v42;

  _os_log_impl(&dword_237505000, v33, v35, "Early exit scroll view did scroll method. isPaginationActive: %{BOOL}d, pageControl: %@", (uint8_t *)v36, 0x12u);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
  swift_arrayDestroy();
  MEMORY[0x23B813C70](v41, -1, -1);
  MEMORY[0x23B813C70](v36, -1, -1);
}

id partial apply for closure #1 in CAFUIDevicePickerViewController.resetSpinningCellAndUserInteraction()()
{
  uint64_t v0;

  return closure #1 in CAFUIDevicePickerViewController.resetSpinningCellAndUserInteraction()(v0);
}

void specialized CAFUIDevicePickerViewController.pairedDevicesActionService(_:didUpdatePairedDeviceActionRequest:)(void *a1)
{
  id v1;
  id v2;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!a1)
    goto LABEL_9;
  v1 = a1;
  if (!objc_msgSend(v1, sel_deviceAction)
    || (v2 = objc_msgSend(v1, sel_identifier)) == 0)
  {

LABEL_9:
    CAFUIDevicePickerViewController.resetSpinningCellAndUserInteraction()();
    return;
  }
  v3 = v2;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = v5;

  swift_bridgeObjectRelease();
  v7 = HIBYTE(v6) & 0xF;
  if ((v6 & 0x2000000000000000) == 0)
    v7 = v4 & 0xFFFFFFFFFFFFLL;
  if (!v7)
    goto LABEL_9;
}

uint64_t ObjC metadata update function for CAFUIDevicePickerViewController()
{
  return type metadata accessor for CAFUIDevicePickerViewController();
}

void type metadata completion function for CAFUIDevicePickerViewController()
{
  unint64_t v0;

  type metadata accessor for IndexPath?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t getEnumTagSinglePayload for CAFUIDevicePickerViewController.LayoutStyle(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CAFUIDevicePickerViewController.LayoutStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23756DAB0 + 4 * byte_23757ADBD[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23756DAE4 + 4 * byte_23757ADB8[v4]))();
}

uint64_t sub_23756DAE4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23756DAEC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23756DAF4);
  return result;
}

uint64_t sub_23756DB00(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23756DB08);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23756DB0C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23756DB14(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CAFUIDevicePickerViewController.LayoutStyle()
{
  return &type metadata for CAFUIDevicePickerViewController.LayoutStyle;
}

unint64_t lazy protocol witness table accessor for type CAFUIDevicePickerViewController.LayoutStyle and conformance CAFUIDevicePickerViewController.LayoutStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CAFUIDevicePickerViewController.LayoutStyle and conformance CAFUIDevicePickerViewController.LayoutStyle;
  if (!lazy protocol witness table cache variable for type CAFUIDevicePickerViewController.LayoutStyle and conformance CAFUIDevicePickerViewController.LayoutStyle)
  {
    result = MEMORY[0x23B813BE0](&protocol conformance descriptor for CAFUIDevicePickerViewController.LayoutStyle, &type metadata for CAFUIDevicePickerViewController.LayoutStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFUIDevicePickerViewController.LayoutStyle and conformance CAFUIDevicePickerViewController.LayoutStyle);
  }
  return result;
}

unint64_t specialized CAFUIDevicePickerViewController.LayoutStyle.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of CAFUIDevicePickerViewController.LayoutStyle.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

uint64_t sub_23756DBC0()
{
  uint64_t v0;

  return swift_deallocObject();
}

BOOL partial apply for closure #1 in CAFUIDevicePickerViewController.devicePickerButtonTapped()(char a1)
{
  uint64_t v1;

  return closure #1 in CAFUIDevicePickerViewController.devicePickerButtonTapped()(a1, *(_QWORD *)(v1 + 16));
}

uint64_t outlined init with copy of IndexPath?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IndexPath?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t CAFUIPickerRepresentable.allowsMultipleSelection.getter()
{
  return 0;
}

unint64_t CAFUIPickerRepresentable.toggle(index:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t v25;
  unint64_t v26;
  os_log_type_t v27;
  uint64_t (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  unint64_t *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  void (*v34)(uint64_t *, _QWORD);
  _QWORD **v35;
  _QWORD *v36;
  _QWORD *v37;
  char v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v58;
  char *v59;
  char *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;

  v6 = type metadata accessor for IndexPath();
  v62 = *(_QWORD *)(v6 - 8);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v59 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v58 - v10;
  v12 = MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v58 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v60 = (char *)&v58 - v15;
  v16 = *(_QWORD *)(a3 + 48);
  if ((((uint64_t (*)(uint64_t, uint64_t))v16)(a2, a3) & 1) == 0)
  {
    v17 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
    v18 = specialized Sequence<>.contains(_:)(a1, v17);
    swift_bridgeObjectRelease();
    if ((v18 & 1) != 0)
      return MEMORY[0x24BEE4AF8];
  }
  v61 = (_QWORD *)v6;
  v63 = 0;
  v64 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a3 + 8) + 8))(a2);
  v22 = v21;
  swift_bridgeObjectRelease();
  v63 = v20;
  v64 = v22;
  v23._object = (void *)0x800000023757CFD0;
  v23._countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v23);
  v65 = a1;
  v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  v25 = v63;
  v26 = v64;
  v27 = static os_log_type_t.info.getter();
  specialized static CAFUILogger.log(_:message:function:file:line:)(v27, v25, v26, 0x6928656C67676F74, 0xEE00293A7865646ELL);
  swift_bridgeObjectRelease();
  v28 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 24);
  v29 = v28(a2, a3);
  LOBYTE(v26) = specialized Sequence<>.contains(_:)(a1, v29);
  swift_bridgeObjectRelease();
  if ((v26 & 1) != 0)
  {
    v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(a3 + 40))(&v63, a2, a3);
    v31 = v30;
    v28 = (uint64_t (*)(uint64_t, uint64_t))*v30;
    v32 = *(_QWORD *)(*v30 + 16);
    if (!v32)
    {
      a3 = 0;
      goto LABEL_49;
    }
    v33 = *((_QWORD *)v28 + 4);
    if (v33 == a1)
    {
      a3 = 0;
    }
    else
    {
      if (v32 == 1)
      {
        a3 = 1;
        goto LABEL_49;
      }
      v33 = 5;
      while (1)
      {
        a3 = v33 - 4;
        if (*((_QWORD *)v28 + v33) == a1)
          break;
        v54 = v33 - 3;
        if (__OFADD__(a3, 1))
          goto LABEL_55;
        ++v33;
        if (v54 == v32)
        {
          a3 = v32;
          goto LABEL_49;
        }
      }
    }
    v16 = a3 + 1;
    if (__OFADD__(a3, 1))
    {
      __break(1u);
LABEL_59:
      v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, (int64_t)v31, 1, v19);
      goto LABEL_22;
    }
    if (v16 != v32)
    {
      a2 = a3 + 5;
      while ((v16 & 0x8000000000000000) == 0)
      {
        v33 = a2 - 4;
        if (a2 - 4 >= v32)
          goto LABEL_53;
        v47 = *((_QWORD *)v28 + a2);
        if (v47 != a1)
        {
          if (v33 != a3)
          {
            if (a3 >= v32)
              goto LABEL_56;
            v14 = (char *)*((_QWORD *)v28 + a3 + 4);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *v31 = (unint64_t)v28;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              v28 = (uint64_t (*)(uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew()(v28);
              *v31 = (unint64_t)v28;
            }
            *((_QWORD *)v28 + a3 + 4) = v47;
            v33 = *v31;
            *(_QWORD *)(*v31 + 8 * a2) = v14;
            v28 = (uint64_t (*)(uint64_t, uint64_t))*v31;
          }
          if (__OFADD__(a3++, 1))
            goto LABEL_54;
          v32 = *((_QWORD *)v28 + 2);
        }
        v33 = a2 - 3;
        ++a2;
        if (v33 == v32)
          goto LABEL_10;
      }
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
LABEL_10:
    if ((uint64_t)v32 < a3)
    {
      __break(1u);
      goto LABEL_12;
    }
LABEL_49:
    specialized Array.replaceSubrange<A>(_:with:)(a3, v32);
    ((void (*)(uint64_t *, _QWORD))v19)(&v63, 0);
    v16 = (unint64_t)v60;
    MEMORY[0x23B812638](a1, 0);
    v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
    a1 = *(_QWORD *)(v19 + 16);
    v33 = *(_QWORD *)(v19 + 24);
    v31 = (unint64_t *)(a1 + 1);
    if (a1 < v33 >> 1)
    {
LABEL_50:
      v55 = v61;
      v56 = v62;
      *(_QWORD *)(v19 + 16) = v31;
      (*(void (**)(unint64_t, unint64_t, _QWORD *))(v56 + 32))(v19+ ((*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80))+ *(_QWORD *)(v56 + 72) * a1, v16, v55);
      return v19;
    }
LABEL_57:
    v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, (int64_t)v31, 1, v19);
    goto LABEL_50;
  }
LABEL_12:
  if ((((uint64_t (*)(uint64_t, uint64_t))v16)(a2, a3) & 1) != 0)
  {
    v34 = (void (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(a3 + 40))(&v63, a2, a3);
    v36 = v35;
    v37 = *v35;
    v38 = swift_isUniquelyReferenced_nonNull_native();
    *v36 = v37;
    if ((v38 & 1) == 0)
    {
      v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v37[2] + 1, 1, v37);
      *v36 = v37;
    }
    v40 = v37[2];
    v39 = v37[3];
    if (v40 >= v39 >> 1)
    {
      v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v39 > 1), v40 + 1, 1, v37);
      *v36 = v37;
    }
    v37[2] = v40 + 1;
    v37[v40 + 4] = a1;
    v34(&v63, 0);
    MEMORY[0x23B812638](a1, 0);
    v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
    v42 = *(_QWORD *)(v19 + 16);
    v41 = *(_QWORD *)(v19 + 24);
    if (v42 >= v41 >> 1)
      v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v41 > 1, v42 + 1, 1, v19);
    v43 = v61;
    v44 = v62;
    *(_QWORD *)(v19 + 16) = v42 + 1;
    (*(void (**)(unint64_t, char *, _QWORD *))(v44 + 32))(v19+ ((*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80))+ *(_QWORD *)(v44 + 72) * v42, v14, v43);
    return v19;
  }
  v45 = v28(a2, a3);
  if (!*(_QWORD *)(v45 + 16))
  {
    swift_bridgeObjectRelease();
    v19 = MEMORY[0x24BEE4AF8];
    v28 = (uint64_t (*)(uint64_t, uint64_t))v61;
    goto LABEL_39;
  }
  v46 = *(_QWORD *)(v45 + 32);
  swift_bridgeObjectRelease();
  MEMORY[0x23B812638](v46, 0);
  v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
  v16 = *(_QWORD *)(v19 + 16);
  v33 = *(_QWORD *)(v19 + 24);
  v31 = (unint64_t *)(v16 + 1);
  v28 = (uint64_t (*)(uint64_t, uint64_t))v61;
  if (v16 >= v33 >> 1)
    goto LABEL_59;
LABEL_22:
  *(_QWORD *)(v19 + 16) = v31;
  (*(void (**)(unint64_t, char *, uint64_t (*)(uint64_t, uint64_t)))(v62 + 32))(v19+ ((*(unsigned __int8 *)(v62 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80))+ *(_QWORD *)(v62 + 72) * v16, v11, v28);
LABEL_39:
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  v50 = swift_allocObject();
  *(_OWORD *)(v50 + 16) = xmmword_237579480;
  *(_QWORD *)(v50 + 32) = a1;
  (*(void (**)(void))(a3 + 32))();
  v51 = v59;
  MEMORY[0x23B812638](a1, 0);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v19 + 16) + 1, 1, v19);
  v53 = *(_QWORD *)(v19 + 16);
  v52 = *(_QWORD *)(v19 + 24);
  if (v53 >= v52 >> 1)
    v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v52 > 1, v53 + 1, 1, v19);
  *(_QWORD *)(v19 + 16) = v53 + 1;
  (*(void (**)(unint64_t, char *, uint64_t (*)(uint64_t, uint64_t)))(v62 + 32))(v19+ ((*(unsigned __int8 *)(v62 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80))+ *(_QWORD *)(v62 + 72) * v53, v51, v28);
  return v19;
}

id protocol witness for CAFListContentRepresentable.configureCell(_:) in conformance CAFSingleSelectSetting(uint64_t a1, uint64_t a2)
{
  return CAFUIPickerRepresentable.configureCell(_:)(a1, a2, (uint64_t)&protocol witness table for CAFSingleSelectSetting);
}

id CAFUIPickerRepresentable.configureCell(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  Swift::OpaquePointer v24;
  Swift::OpaquePointer v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  id result;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;

  v45 = a1;
  v5 = type metadata accessor for UIBackgroundConfiguration();
  v51 = *(_QWORD *)(v5 - 8);
  v52 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v50 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UIBackgroundConfiguration?);
  MEMORY[0x24BDAC7A8](v7);
  v49 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v48 = (uint64_t)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v46 = (char *)&v42 - v12;
  v13 = (int *)type metadata accessor for CAFUIAutomakerSettingConfiguration(0);
  v47 = *((_QWORD *)v13 - 1);
  MEMORY[0x24BDAC7A8](v13);
  v44 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for UIListContentConfiguration();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v42 - v20;
  static UIListContentConfiguration.valueCell()();
  specialized CAFUICellProtocol.updateContentConfigurationProperties(_:)((uint64_t)v19, (uint64_t)v21);
  v42 = *(void (**)(char *, uint64_t))(v16 + 8);
  v42(v19, v15);
  v22 = *(_QWORD *)(a3 + 8);
  (*(void (**)(uint64_t, uint64_t))(v22 + 48))(a2, v22);
  UIListContentConfiguration.image.setter();
  v23 = *(void (**)(uint64_t, uint64_t))(a3 + 56);
  v43 = a2;
  v23(a2, a3);
  UIListContentConfiguration.text.setter();
  v24._rawValue = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  v25._rawValue = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
  CAFUILocalizedValues(for:selectedValues:)(v24, v25);
  v26 = v21;
  v27 = (uint64_t)v44;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v28 = v15;
  v29 = (uint64_t)v46;
  UIListContentConfiguration.secondaryText.setter();
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 16))(v27, v26, v28);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v27, 0, 1, v28);
  v30 = CAFListContentRepresentable.isUILimited.getter(v43, v22);
  *(_QWORD *)(v27 + v13[5]) = 0;
  *(_BYTE *)(v27 + v13[6]) = 1;
  v31 = v45;
  *(_BYTE *)(v27 + v13[7]) = v30 & 1;
  outlined init with copy of CAFUIAutomakerSettingConfiguration(v27, v29);
  v32 = v47;
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v47 + 56))(v29, 0, 1, v13);
  v33 = v31 + OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_automakerSettingConfiguration;
  swift_beginAccess();
  outlined assign with copy of CAFUIAutomakerSettingConfiguration?(v29, v33);
  swift_endAccess();
  v34 = v33;
  v35 = v48;
  outlined init with copy of CAFUIAutomakerSettingConfiguration?(v34, v48);
  LODWORD(v13) = (*(uint64_t (**)(uint64_t, uint64_t, int *))(v32 + 48))(v35, 1, v13);
  outlined destroy of CAFUIAutomakerSettingConfiguration?(v35);
  if ((_DWORD)v13 != 1)
    CAFUITileBaseCell.setupViews()();
  v36 = outlined destroy of CAFUIAutomakerSettingConfiguration?(v29);
  v37 = v50;
  MEMORY[0x23B8131A8](v36);
  v39 = v51;
  v38 = v52;
  v40 = v49;
  (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v49, v37, v52);
  result = objc_msgSend((id)objc_opt_self(), sel_tableCellPlainBackgroundColor);
  if (result)
  {
    UIBackgroundConfiguration.backgroundColor.setter();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v37, v38);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v40, 0, 1, v38);
    MEMORY[0x23B81319C](v40);
    outlined destroy of CAFUIAutomakerSettingConfiguration(v27);
    return (id)((uint64_t (*)(char *, uint64_t))v42)(v26, v28);
  }
  else
  {
    __break(1u);
  }
  return result;
}

id protocol witness for CAFListContentRepresentable.configureCell(_:) in conformance CAFMultipleSelectSetting(uint64_t a1, uint64_t a2)
{
  return CAFUIPickerRepresentable.configureCell(_:)(a1, a2, (uint64_t)&protocol witness table for CAFMultipleSelectSetting);
}

id protocol witness for CAFListContentRepresentable.configureCell(_:) in conformance CAFButtonSetting(uint64_t a1, uint64_t a2)
{
  return CAFUIButtonRepresentable.configureCell(_:)(a1, a2, (uint64_t)&protocol witness table for CAFButtonSetting);
}

id CAFUIButtonRepresentable.configureCell(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, int *);
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  id result;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;

  v43 = a3;
  v41 = a1;
  v4 = type metadata accessor for UIBackgroundConfiguration();
  v47 = *(_QWORD *)(v4 - 8);
  v48 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v46 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UIBackgroundConfiguration?);
  MEMORY[0x24BDAC7A8](v6);
  v45 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFUIAutomakerSettingConfiguration?);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v44 = (uint64_t)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v40 - v11;
  v13 = (int *)type metadata accessor for CAFUIAutomakerSettingConfiguration(0);
  v42 = *((_QWORD *)v13 - 1);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for UIListContentConfiguration();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v40 - v21;
  static UIListContentConfiguration.valueCell()();
  specialized CAFUICellProtocol.updateContentConfigurationProperties(_:)((uint64_t)v20, (uint64_t)v22);
  v40 = *(void (**)(char *, uint64_t))(v17 + 8);
  v40(v20, v16);
  v23 = *(_QWORD *)(v43 + 8);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(a2, v23);
  UIListContentConfiguration.text.setter();
  (*(void (**)(uint64_t, uint64_t))(v23 + 48))(a2, v23);
  UIListContentConfiguration.image.setter();
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v15, v22, v16);
  v24 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56);
  v43 = v16;
  v24(v15, 0, 1, v16);
  v25 = v23;
  v26 = v41;
  v27 = CAFListContentRepresentable.isUILimited.getter(a2, v25);
  *(_QWORD *)&v15[v13[5]] = 0;
  v15[v13[6]] = 0;
  v15[v13[7]] = v27 & 1;
  outlined init with copy of CAFUIAutomakerSettingConfiguration((uint64_t)v15, (uint64_t)v12);
  v28 = v42;
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v42 + 56))(v12, 0, 1, v13);
  v29 = v26 + OBJC_IVAR____TtC5CAFUI17CAFUITileBaseCell_automakerSettingConfiguration;
  swift_beginAccess();
  outlined assign with copy of CAFUIAutomakerSettingConfiguration?((uint64_t)v12, v29);
  swift_endAccess();
  v30 = v29;
  v31 = v44;
  outlined init with copy of CAFUIAutomakerSettingConfiguration?(v30, v44);
  v32 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v28 + 48);
  v33 = v31;
  LODWORD(v31) = v32(v31, 1, v13);
  outlined destroy of CAFUIAutomakerSettingConfiguration?(v33);
  if ((_DWORD)v31 != 1)
    CAFUITileBaseCell.setupViews()();
  v34 = outlined destroy of CAFUIAutomakerSettingConfiguration?((uint64_t)v12);
  v35 = v46;
  MEMORY[0x23B8131A8](v34);
  v37 = v47;
  v36 = v48;
  v38 = v45;
  (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v45, v35, v48);
  result = objc_msgSend((id)objc_opt_self(), sel_tableCellPlainBackgroundColor);
  if (result)
  {
    UIBackgroundConfiguration.backgroundColor.setter();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v35, v36);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v38, 0, 1, v36);
    MEMORY[0x23B81319C](v38);
    outlined destroy of CAFUIAutomakerSettingConfiguration((uint64_t)v15);
    return (id)((uint64_t (*)(char *, uint64_t))v40)(v22, v43);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for CAFListContentRepresentable.cellSelected(isProminent:hasChildren:) in conformance CAFButtonSetting(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized CAFUIButtonRepresentable.cellSelected(isProminent:hasChildren:)(a3, (uint64_t)&protocol witness table for CAFButtonSetting);
}

uint64_t CAFUIButtonRepresentable.cellSelected(isProminent:hasChildren:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized CAFUIButtonRepresentable.cellSelected(isProminent:hasChildren:)(a3, a4);
}

uint64_t specialized CAFUIButtonRepresentable.cellSelected(isProminent:hasChildren:)(uint64_t a1, uint64_t a2)
{
  Swift::String v4;
  os_log_type_t v5;
  Swift::String v6;
  Swift::String v7;
  os_log_type_t v8;

  if ((*(unsigned __int8 (**)(void))(a2 + 16))())
  {
    _StringGuts.grow(_:)(38);
    swift_bridgeObjectRelease();
    v4._countAndFlagsBits = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a2 + 8) + 8))(a1);
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    v5 = static os_log_type_t.info.getter();
    specialized static CAFUILogger.log(_:message:function:file:line:)(v5, 0xD000000000000024, 0x800000023757F270, 0xD000000000000026, 0x800000023757F2A0);
    swift_bridgeObjectRelease();
  }
  else
  {
    _StringGuts.grow(_:)(45);
    swift_bridgeObjectRelease();
    v6._countAndFlagsBits = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a2 + 8) + 8))(a1);
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._countAndFlagsBits = 0xD000000000000011;
    v7._object = (void *)0x800000023757F2F0;
    String.append(_:)(v7);
    v8 = static os_log_type_t.info.getter();
    specialized static CAFUILogger.log(_:message:function:file:line:)(v8, 0xD00000000000001ALL, 0x800000023757F2D0, 0xD000000000000026, 0x800000023757F2A0);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(a2 + 24))(1, a1, a2);
  }
  return 2;
}

Swift::Void __swiftcall CAFUIPickerViewController.viewDidLoad()()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  objc_super v6;

  v6.receiver = v0;
  v6.super_class = (Class)type metadata accessor for CAFUIPickerViewController();
  v1 = (uint64_t)objc_msgSendSuper2(&v6, sel_viewDidLoad);
  if (one-time initialization token for cellsByIdentifiers != -1)
    v1 = swift_once();
  MEMORY[0x24BDAC7A8](v1);
  v2 = swift_bridgeObjectRetain();
  specialized Sequence.forEach(_:)(v2, partial apply for closure #1 in CAFUIPickerViewController.viewDidLoad());
  v3 = swift_bridgeObjectRelease();
  if (one-time initialization token for viewsByIdentifiers != -1)
    v3 = swift_once();
  MEMORY[0x24BDAC7A8](v3);
  v4 = swift_bridgeObjectRetain();
  specialized Sequence.forEach(_:)(v4, partial apply for closure #2 in CAFUIPickerViewController.viewDidLoad());
  swift_bridgeObjectRelease();
  v5 = *(void **)&v0[OBJC_IVAR____TtC5CAFUI24CAFUITableViewController_tableView];
  objc_msgSend(v5, sel_setDataSource_, v0);
  objc_msgSend(v5, sel_setDelegate_, v0);
}

void closure #1 in CAFUIPickerViewController.viewDidLoad()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  void *v8;
  uint64_t ObjCClassFromMetadata;
  id v10;

  v8 = *(void **)(a4 + OBJC_IVAR____TtC5CAFUI24CAFUITableViewController_tableView);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v10 = (id)MEMORY[0x23B812F68](a1, a2);
  objc_msgSend(v8, *a5, ObjCClassFromMetadata, v10);

}

uint64_t CAFUIPickerViewController.tableView(_:cellForRowAt:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  objc_class *ObjCClassFromMetadata;
  NSString *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  Class isa;
  id v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  SEL *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  void *v32;
  id v33;
  id v34;
  id v35;
  void *v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t result;
  id v47;

  v2 = v1;
  type metadata accessor for CAFUITableCell();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  v5 = NSStringFromClass(ObjCClassFromMetadata);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v8 = v7;

  v9 = (void *)MEMORY[0x23B812F68](v6, v8);
  swift_bridgeObjectRelease();
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v11 = objc_msgSend(a1, sel_dequeueReusableCellWithIdentifier_forIndexPath_, v9, isa);

  v12 = (void *)swift_dynamicCastClass();
  if (!v12)
    goto LABEL_15;
  v13 = v12;
  v14 = objc_msgSend(v12, sel_textLabel);
  if (v14)
  {
    v15 = v14;
    v16 = *(_QWORD *)(v2 + OBJC_IVAR____TtC5CAFUI25CAFUIPickerViewController_representable + 8);
    ObjectType = swift_getObjectType();
    v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 16))(ObjectType, v16);
    v19 = IndexPath.row.getter();
    if ((v19 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v19 < *(_QWORD *)(v18 + 16))
    {
      v20 = v18 + 16 * v19;
      v21 = *(_QWORD *)(v20 + 32);
      v22 = *(_QWORD *)(v20 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v23 = (void *)MEMORY[0x23B812F68](v21, v22);
      swift_bridgeObjectRelease();
      objc_msgSend(v15, sel_setText_, v23);

      goto LABEL_6;
    }
    __break(1u);
LABEL_15:

    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_6:
  v24 = (SEL *)&unk_2508DF000;
  objc_msgSend(v13, sel_setAccessoryType_, 0);
  v25 = *(_QWORD *)(v2 + OBJC_IVAR____TtC5CAFUI25CAFUIPickerViewController_representable + 8);
  v26 = swift_getObjectType();
  v27 = *(uint64_t (**)(uint64_t, uint64_t))(v25 + 24);
  v28 = v27(v26, v25);
  v29 = IndexPath.row.getter();
  v30 = specialized Sequence<>.contains(_:)(v29, v28);
  swift_bridgeObjectRelease();
  if ((v30 & 1) != 0)
  {
    v31 = *MEMORY[0x24BEBE1D8];
    v32 = (void *)objc_opt_self();
    v47 = objc_msgSend(v32, sel_configurationWithTextStyle_scale_, v31, 2);
    v33 = objc_msgSend(v32, sel_configurationWithWeight_, 6);
    v34 = objc_msgSend(v47, sel_configurationByApplyingConfiguration_, v33);

    v35 = v34;
    v36 = (void *)MEMORY[0x23B812F68](0x72616D6B63656863, 0xE90000000000006BLL);
    v37 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_withConfiguration_, v36, v35);

    v38 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD668]), sel_initWithImage_, v37);
    v39 = v11;
    v40 = objc_msgSend((id)objc_opt_self(), sel__carSystemFocusColor);
    objc_msgSend(v38, sel_setTintColor_, v40);

    v11 = v39;
    objc_msgSend(v13, sel_setAccessoryView_, v38);

    v24 = (SEL *)&unk_2508DF000;
  }
  else
  {
    objc_msgSend(v13, sel_setAccessoryView_, 0);
  }
  v41 = v11;
  v42 = v27(v26, v25);
  v43 = IndexPath.row.getter();
  v44 = specialized Sequence<>.contains(_:)(v43, v42);
  swift_bridgeObjectRelease();
  if ((v44 & 1) != 0)
    v45 = 3;
  else
    v45 = 0;
  objc_msgSend(v13, v24[412], v45);

  return (uint64_t)v13;
}

void CAFUIPickerViewController.tableView(_:didSelectRowAt:)(void *a1)
{
  uint64_t v1;
  Class isa;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;
  Class v7;

  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a1, sel_deselectRowAtIndexPath_animated_, isa, 1);

  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC5CAFUI25CAFUIPickerViewController_representable + 8);
  ObjectType = swift_getObjectType();
  v6 = IndexPath.row.getter();
  if (*(_QWORD *)((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 72))(v6, ObjectType, v4) + 16))
  {
    type metadata accessor for IndexPath();
    v7 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(a1, sel_reloadRowsAtIndexPaths_withRowAnimation_, v7, 100);

  }
  else
  {
    swift_bridgeObjectRelease();
  }
}

void CAFUIPickerViewController.__allocating_init(style:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t CAFUIPickerViewController.__ivar_destroyer()
{
  return swift_unknownObjectRelease();
}

id CAFUIPickerViewController.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFUIPickerViewController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for CAFUIPickerViewController()
{
  return objc_opt_self();
}

double specialized CAFUIPickerViewController.tableView(_:heightForFooterInSection:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  double result;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC5CAFUI25CAFUIPickerViewController_representable + 8);
  ObjectType = swift_getObjectType();
  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 64))(ObjectType, v1);
  if (!v4)
    return 0.0;
  v5 = v3;
  v6 = v4;
  swift_bridgeObjectRelease();
  v7 = HIBYTE(v6) & 0xF;
  if ((v6 & 0x2000000000000000) == 0)
    v7 = v5 & 0xFFFFFFFFFFFFLL;
  result = *MEMORY[0x24BEBE770];
  if (!v7)
    return 0.0;
  return result;
}

uint64_t specialized CAFUIPickerViewController.tableView(_:viewForFooterInSection:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  objc_class *ObjCClassFromMetadata;
  NSString *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC5CAFUI25CAFUIPickerViewController_representable + 8);
  ObjectType = swift_getObjectType();
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 64))(ObjectType, v3);
  if (!v6)
    return 0;
  v7 = v5;
  v8 = v6;
  v9 = HIBYTE(v6) & 0xF;
  if ((v6 & 0x2000000000000000) == 0)
    v9 = v5 & 0xFFFFFFFFFFFFLL;
  if (!v9)
    goto LABEL_8;
  type metadata accessor for CAFUIFooterView();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  v11 = NSStringFromClass(ObjCClassFromMetadata);
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v14 = v13;

  v15 = (void *)MEMORY[0x23B812F68](v12, v14);
  swift_bridgeObjectRelease();
  v16 = objc_msgSend(a1, sel_dequeueReusableHeaderFooterViewWithIdentifier_, v15);

  if (!v16)
  {
LABEL_8:
    swift_bridgeObjectRelease();
    return 0;
  }
  v17 = swift_dynamicCastClass();
  v18 = v17;
  if (v17)
  {
    v19 = (uint64_t *)(v17 + OBJC_IVAR____TtC5CAFUI15CAFUIFooterView_title);
    *v19 = v7;
    v19[1] = v8;
    swift_bridgeObjectRelease();
    CAFUIFooterView.title.didset();
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  return v18;
}

void partial apply for closure #1 in CAFUIPickerViewController.viewDidLoad()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  closure #1 in CAFUIPickerViewController.viewDidLoad()(a1, a2, a3, *(_QWORD *)(v3 + 16), (SEL *)&selRef_registerClass_forCellReuseIdentifier_);
}

void partial apply for closure #2 in CAFUIPickerViewController.viewDidLoad()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  closure #1 in CAFUIPickerViewController.viewDidLoad()(a1, a2, a3, *(_QWORD *)(v3 + 16), (SEL *)&selRef_registerClass_forHeaderFooterViewReuseIdentifier_);
}

id static UIFont.cafui_subtitleFont.getter()
{
  return static UIFont.cafui_subtitleFont.getter(MEMORY[0x24BEBE1F0]);
}

id static UIFont.cafui_preferredFontRoundedVariant(forTextStyle:)(uint64_t a1)
{
  return objc_msgSend((id)swift_getObjCClassFromMetadata(), sel__preferredFontForTextStyle_variant_, a1, 0x10000);
}

id static UIFont.cafui_preferredFont(for:weight:size:rounded:)(uint64_t a1, uint64_t a2, char a3, char a4, double a5)
{
  return specialized static UIFont.cafui_preferredFont(for:weight:size:rounded:)(a1, a2, a3 & 1, a4, a5);
}

id static UIFont.cafui_headerFont.getter()
{
  return static UIFont.cafui_subtitleFont.getter(MEMORY[0x24BEBE200]);
}

id static UIFont.cafui_titleFont.getter()
{
  return static UIFont.cafui_subtitleFont.getter(MEMORY[0x24BEBE1D8]);
}

id static UIFont.cafui_subtitleFont.getter(_QWORD *a1)
{
  id v1;
  id v2;

  v1 = objc_msgSend((id)objc_opt_self(), sel_preferredFontDescriptorWithTextStyle_, *a1);
  v2 = objc_msgSend((id)objc_opt_self(), sel_fontWithDescriptor_size_, v1, 0.0);

  return v2;
}

id specialized static UIFont.cafui_preferredFont(for:weight:size:rounded:)(uint64_t a1, uint64_t a2, char a3, char a4, double a5)
{
  id v9;
  id v10;
  uint64_t v11;
  id result;
  void *v13;
  id v14;
  id v15;

  if ((a3 & 1) != 0)
  {
    v10 = objc_msgSend((id)objc_opt_self(), sel_preferredFontDescriptorWithTextStyle_, a1);
    objc_msgSend(v10, sel_pointSize);
    a2 = v11;

    if ((a4 & 1) == 0)
      goto LABEL_3;
  }
  else if ((a4 & 1) == 0)
  {
LABEL_3:
    v9 = 0;
    goto LABEL_7;
  }
  result = objc_msgSend((id)objc_opt_self(), sel__preferredFontForTextStyle_design_variant_, a1, *MEMORY[0x24BEBB5C8], 8);
  if (!result)
  {
    __break(1u);
    return result;
  }
  v13 = result;
  v9 = objc_msgSend(result, sel_fontWithSize_, *(double *)&a2);

LABEL_7:
  v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD5F0]), sel_initForTextStyle_, a1);
  if (!v9)
    v9 = objc_msgSend((id)objc_opt_self(), sel_systemFontOfSize_weight_, *(double *)&a2, a5);
  v15 = objc_msgSend(v14, sel_scaledFontForFont_, v9);

  return v15;
}

uint64_t Image.init(automakerSymbolName:)(uint64_t a1, uint64_t a2)
{
  id v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;

  swift_bridgeObjectRetain();
  v4 = CAFUIFrameworkBundle();
  v5 = (void *)MEMORY[0x23B812F68](a1, a2);
  swift_bridgeObjectRelease();
  v6 = objc_msgSend((id)objc_opt_self(), sel_imageNamed_inBundle_, v5, v4);

  if (!v6)
    return Image.init(_internalSystemName:)();
  v7 = CAFUIFrameworkBundle();
  v8 = Image.init(_:bundle:)();

  return v8;
}

void *CAFUIProminentSettingCell.Constants.Cell.symbolViewWidth.unsafeMutableAddressor()
{
  return &static CAFUIProminentSettingCell.Constants.Cell.symbolViewWidth;
}

void *CAFUIProminentSettingCell.Constants.Cell.minimumWidth.unsafeMutableAddressor()
{
  return &static CAFUIProminentSettingCell.Constants.Cell.minimumWidth;
}

void *CAFUIProminentSettingCell.Constants.Cell.height.unsafeMutableAddressor()
{
  return &static CAFUIProminentSettingCell.Constants.Cell.height;
}

double static CAFUIProminentSettingCell.Constants.Cell.height.getter()
{
  return 52.0;
}

double static CAFUIProminentSettingCell.Constants.Cell.symbolViewWidth.getter()
{
  return 52.0;
}

double static CAFUIProminentSettingCell.Constants.Cell.minimumWidth.getter()
{
  return 160.0;
}

void *CAFUIProminentSettingCell.Constants.Cell.prominentCellCornerRadius.unsafeMutableAddressor()
{
  return &static CAFUIProminentSettingCell.Constants.Cell.prominentCellCornerRadius;
}

double static CAFUIProminentSettingCell.Constants.Cell.prominentCellCornerRadius.getter()
{
  return 10.0;
}

uint64_t CAFUIProminentSettingCell.representable.getter()
{
  swift_beginAccess();
  return swift_unknownObjectRetain();
}

uint64_t CAFUIProminentSettingCell.representable.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_representable);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  if (*v5)
    CAFUIProminentSettingCell.configureCell()();
  return swift_unknownObjectRelease();
}

void (*CAFUIProminentSettingCell.representable.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_representable;
  v3[3] = v1;
  v3[4] = v4;
  swift_beginAccess();
  return CAFUIProminentSettingCell.representable.modify;
}

void CAFUIProminentSettingCell.representable.modify(_QWORD **a1, char a2)
{
  _QWORD *v3;

  v3 = *a1;
  swift_endAccess();
  if ((a2 & 1) == 0 && *(_QWORD *)(v3[3] + v3[4]))
    CAFUIProminentSettingCell.configureCell()();
  free(v3);
}

id CAFUIProminentSettingCell.accessoryColor.getter()
{
  return objc_msgSend((id)objc_opt_self(), sel_clearColor);
}

id CAFUIProminentSettingCell.primaryTextColor.getter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t (*v4)(uint64_t, uint64_t);
  char **v5;

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_representable);
  swift_beginAccess();
  if (*v1
    && (v2 = v1[1],
        ObjectType = swift_getObjectType(),
        v4 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 16),
        swift_unknownObjectRetain(),
        LOBYTE(v2) = v4(ObjectType, v2),
        swift_unknownObjectRelease(),
        (v2 & 1) == 0))
  {
    v5 = &selRef_grayColor;
  }
  else
  {
    v5 = &selRef_labelColor;
  }
  return objc_msgSend((id)objc_opt_self(), *v5);
}

id CAFUIProminentSettingCell.secondaryTextColor.getter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t (*v4)(uint64_t, uint64_t);
  char **v5;

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_representable);
  swift_beginAccess();
  if (*v1
    && (v2 = v1[1],
        ObjectType = swift_getObjectType(),
        v4 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 16),
        swift_unknownObjectRetain(),
        LOBYTE(v2) = v4(ObjectType, v2),
        swift_unknownObjectRelease(),
        (v2 & 1) == 0))
  {
    v5 = &selRef_grayColor;
  }
  else
  {
    v5 = &selRef_secondaryLabelColor;
  }
  return objc_msgSend((id)objc_opt_self(), *v5);
}

id CAFUIProminentSettingCell.imageColor.getter()
{
  uint64_t v0;
  id *v1;

  v1 = (id *)(v0 + OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_imageColor);
  swift_beginAccess();
  return *v1;
}

void CAFUIProminentSettingCell.imageColor.setter(void *a1)
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  id v5;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_imageColor);
  swift_beginAccess();
  v4 = (void *)*v3;
  *v3 = a1;
  v5 = a1;

  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_imageButton), sel_setTintColor_, *v3);
}

void (*CAFUIProminentSettingCell.imageColor.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_imageColor;
  v3[3] = v1;
  v3[4] = v4;
  swift_beginAccess();
  return CAFUIProminentSettingCell.imageColor.modify;
}

void CAFUIProminentSettingCell.imageColor.modify(_QWORD **a1, char a2)
{
  _QWORD *v3;

  v3 = *a1;
  swift_endAccess();
  if ((a2 & 1) == 0)
    objc_msgSend(*(id *)(v3[3] + OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_imageButton), sel_setTintColor_, *(_QWORD *)(v3[3] + v3[4]));
  free(v3);
}

char *CAFUIProminentSettingCell.init(frame:)(double a1, double a2, double a3, double a4)
{
  char *v4;
  char *v9;
  uint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  void *v24;
  id v25;
  id v26;
  double v27;
  double v28;
  id v29;
  void *v30;
  id v31;
  id v32;
  void *v33;
  id v34;
  void *v35;
  id v36;
  uint64_t v37;
  double v38;
  id v39;
  id v40;
  double v41;
  double v42;
  id v43;
  id v44;
  id v45;
  void *v46;
  id v47;
  void *v48;
  uint64_t v49;
  char *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  void *v67;
  uint64_t v68;
  id v69;
  id v70;
  id v71;
  id v72;
  void *v73;
  Class isa;
  objc_super v76;

  v9 = &v4[OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_representable];
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  v10 = OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_imageColor;
  v11 = (void *)objc_opt_self();
  v12 = v4;
  *(_QWORD *)&v4[v10] = objc_msgSend(v11, sel_systemGrayColor);
  v13 = (void *)objc_opt_self();
  v14 = objc_msgSend(v13, sel_buttonWithType_, 0);
  *(_QWORD *)&v12[OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_clickableButton] = v14;
  objc_msgSend(v14, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  v15 = v14;
  v16 = (void *)MEMORY[0x23B812F68](0xD000000000000016, 0x800000023757F490);
  objc_msgSend(v15, sel_setAccessibilityIdentifier_, v16);

  v17 = objc_msgSend(v13, sel_buttonWithType_, 0);
  *(_QWORD *)&v12[OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_imageButton] = v17;
  objc_msgSend(v17, sel__setCornerRadius_, 18.0);
  objc_msgSend(v17, (SEL)&selRef_floatSettingService_didUpdateValue_, 0);
  v18 = v17;
  v19 = (void *)MEMORY[0x23B812F68](0xD00000000000001BLL, 0x800000023757F4B0);
  objc_msgSend(v18, (SEL)&selRef_sendActionsForControlEvents_, v19);

  v20 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD708]), sel_init);
  v21 = OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_titleLabel;
  *(_QWORD *)&v12[OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_titleLabel] = v20;
  v22 = *MEMORY[0x24BEBE1D8];
  v23 = *MEMORY[0x24BEBB600];
  v24 = (void *)objc_opt_self();
  v25 = v20;
  v26 = objc_msgSend(v24, sel_preferredFontDescriptorWithTextStyle_, v22);
  objc_msgSend(v26, sel_pointSize);
  v28 = v27;

  v29 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD5F0]), sel_initForTextStyle_, v22);
  v30 = (void *)objc_opt_self();
  v31 = objc_msgSend(v30, sel_systemFontOfSize_weight_, v28, v23);
  v32 = objc_msgSend(v29, sel_scaledFontForFont_, v31);

  objc_msgSend(v25, sel_setFont_, v32);
  v33 = *(void **)&v12[v21];
  objc_msgSend(v33, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  v34 = v33;
  v35 = (void *)MEMORY[0x23B812F68](0xD000000000000015, 0x800000023757F4D0);
  objc_msgSend(v34, sel_setAccessibilityIdentifier_, v35);

  v36 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD708]), sel_init);
  v37 = OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_subtitleLabel;
  *(_QWORD *)&v12[OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_subtitleLabel] = v36;
  v38 = *MEMORY[0x24BEBB608];
  v39 = v36;
  v40 = objc_msgSend(v24, sel_preferredFontDescriptorWithTextStyle_, v22);
  objc_msgSend(v40, sel_pointSize);
  v42 = v41;

  v43 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD5F0]), sel_initForTextStyle_, v22);
  v44 = objc_msgSend(v30, sel_systemFontOfSize_weight_, v42, v38);
  v45 = objc_msgSend(v43, sel_scaledFontForFont_, v44);

  objc_msgSend(v39, sel_setFont_, v45);
  v46 = *(void **)&v12[v37];
  objc_msgSend(v46, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  v47 = v46;
  v48 = (void *)MEMORY[0x23B812F68](0xD000000000000018, 0x800000023757F4F0);
  objc_msgSend(v47, sel_setAccessibilityIdentifier_, v48);

  v49 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)&v12[OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_titleCenterYConstaint] = MEMORY[0x24BEE4AF8];
  *(_QWORD *)&v12[OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_modifiableContstraints] = v49;

  v76.receiver = v12;
  v76.super_class = (Class)type metadata accessor for CAFUIProminentSettingCell();
  v50 = (char *)objc_msgSendSuper2(&v76, sel_initWithFrame_, a1, a2, a3, a4);
  v51 = (void *)MEMORY[0x23B812F68](0xD000000000000019, 0x800000023757B120);
  objc_msgSend(v50, sel_setAccessibilityIdentifier_, v51);

  v52 = OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_clickableButton;
  objc_msgSend(*(id *)&v50[OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_clickableButton], sel_addTarget_action_forControlEvents_, v50, sel_buttonClicked, 64);
  v53 = OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_imageButton;
  objc_msgSend(*(id *)&v50[OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_imageButton], sel_addTarget_action_forControlEvents_, v50, sel_buttonClicked, 64);
  v54 = objc_msgSend(v50, sel_layer);
  objc_msgSend(v54, sel_setCornerRadius_, 10.0);

  v55 = objc_msgSend(v50, sel_layer);
  objc_msgSend(v55, sel_setMasksToBounds_, 1);

  v56 = objc_msgSend(v50, sel_contentView);
  objc_msgSend(v56, sel_addSubview_, *(_QWORD *)&v50[v52]);

  v57 = objc_msgSend(v50, sel_contentView);
  objc_msgSend(v57, sel_addSubview_, *(_QWORD *)&v50[v53]);

  v58 = objc_msgSend(v50, sel_contentView);
  v59 = OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_titleLabel;
  objc_msgSend(v58, sel_addSubview_, *(_QWORD *)&v50[OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_titleLabel]);

  v60 = objc_msgSend(v50, sel_contentView);
  v61 = OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_subtitleLabel;
  objc_msgSend(v60, sel_addSubview_, *(_QWORD *)&v50[OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_subtitleLabel]);

  v62 = *(void **)&v50[v53];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UITraitDefinition.Type>);
  v63 = swift_allocObject();
  *(_OWORD *)(v63 + 16) = xmmword_237579480;
  v64 = type metadata accessor for UITraitUserInterfaceStyle();
  v65 = MEMORY[0x24BEBC428];
  *(_QWORD *)(v63 + 32) = v64;
  *(_QWORD *)(v63 + 40) = v65;
  swift_allocObject();
  swift_unknownObjectWeakInit();
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIButton);
  v66 = v62;
  UIView.registerForTraitChanges<A>(_:handler:)();
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();
  objc_msgSend(*(id *)&v50[v61], sel_setNumberOfLines_, 1);
  v67 = *(void **)&v50[v59];
  objc_msgSend(v67, sel_setNumberOfLines_, 2);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v68 = swift_allocObject();
  *(_OWORD *)(v68 + 16) = xmmword_237579080;
  v69 = objc_msgSend(v67, sel_centerYAnchor);
  v70 = objc_msgSend(v50, sel_contentView);
  v71 = objc_msgSend(v70, sel_centerYAnchor);

  v72 = objc_msgSend(v69, sel_constraintEqualToAnchor_, v71);
  *(_QWORD *)(v68 + 32) = v72;
  specialized Array._endMutation()();
  *(_QWORD *)&v50[OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_titleCenterYConstaint] = v68;
  swift_bridgeObjectRelease();
  v73 = (void *)objc_opt_self();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  swift_bridgeObjectRetain();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v73, sel_activateConstraints_, isa);

  return v50;
}

void closure #1 in CAFUIProminentSettingCell.init(frame:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;

  v3 = a3 + 16;
  swift_beginAccess();
  v4 = MEMORY[0x23B813CDC](v3);
  if (v4)
  {
    v5 = (void *)v4;
    v6 = (_QWORD *)(v4 + OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_representable);
    swift_beginAccess();
    if (*v6 && (objc_opt_self(), swift_dynamicCastObjCClass()))
    {
      swift_unknownObjectRetain();
      CAFUIProminentSettingCell.configureButtonColors()();

      swift_unknownObjectRelease();
    }
    else
    {

    }
  }
}

uint64_t CAFUIProminentSettingCell.isHighlightable.getter()
{
  return 0;
}

uint64_t CAFUIProminentSettingCell.isCellEnabled.getter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t (*v4)(uint64_t, uint64_t);
  char v5;

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_representable);
  swift_beginAccess();
  if (*v1)
  {
    v2 = v1[1];
    ObjectType = swift_getObjectType();
    v4 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 16);
    swift_unknownObjectRetain();
    v5 = v4(ObjectType, v2);
    swift_unknownObjectRelease();
  }
  else
  {
    v5 = 1;
  }
  return v5 & 1;
}

Swift::Void __swiftcall CAFUIProminentSettingCell.prepareForReuse()()
{
  char *v0;
  char *v1;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFUIProminentSettingCell();
  objc_msgSendSuper2(&v2, sel_prepareForReuse);
  v1 = &v0[OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_representable];
  swift_beginAccess();
  *(_QWORD *)v1 = 0;
  *((_QWORD *)v1 + 1) = 0;
  swift_unknownObjectRelease();
  if (*(_QWORD *)v1)
    CAFUIProminentSettingCell.configureCell()();
}

Swift::Void __swiftcall CAFUIProminentSettingCell.configureCell()()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  uint64_t *v18;
  uint64_t v19;
  Class isa;
  uint64_t v21;
  char *v22;
  void *v23;
  uint64_t v24;
  uint64_t ObjectType;
  uint64_t (*v26)(uint64_t, uint64_t);
  char v27;
  char *v28;
  void *v29;
  id v30;
  id v31;
  void *v32;
  id v33;
  uint64_t v34;
  int v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t);
  char **v40;
  id v41;
  id v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, uint64_t);
  char v47;
  char **v48;
  id v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t (*v52)(uint64_t, _QWORD *);
  uint64_t v53;
  void *v54;
  char *v55;
  void *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(uint64_t, uint64_t);
  char v61;
  id v62;
  double v63;
  id v64;
  double v65;
  id v66;
  uint64_t v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;
  double v78;
  double v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t (*v82)(uint64_t, uint64_t);
  char v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t (*v87)(uint64_t, uint64_t);
  id v88;
  uint64_t v89;
  id v90;
  id v91;
  id v92;
  id v93;
  id v94;
  id v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  id v102;
  id v103;
  id v104;
  id v105;
  id v106;
  id v107;
  id v108;
  id v109;
  id v110;
  id v111;
  id v112;
  id v113;
  id v114;
  id v115;
  id v116;
  id v117;
  id v118;
  id v119;
  uint64_t (**v120)(uint64_t, id);
  uint64_t (*v121)(char *, _QWORD *);
  uint64_t v122;
  void *v123;
  void *v124;
  id v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  id v136;
  void *v137;
  id v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t (*v141)(uint64_t, uint64_t);
  char v142;
  char **v143;
  id v144;
  id v145;
  id v146;
  void *v147;
  id v148;
  id v149;
  id v150;
  void *v151;
  id v152;
  id v153;
  id v154;
  void *v155;
  void *v156;
  void *v157;
  id v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t (*v173)(uint64_t, uint64_t);
  Swift::OpaquePointer v174;
  Swift::OpaquePointer v175;
  Swift::String v176;
  void *v177;
  id v178;
  id v179;
  id v180;
  id v181;
  id v182;
  id v183;
  id v184;
  void *v185;
  id v186;
  id v187;
  id v188;
  id v189;
  id v190;
  id v191;
  id v192;
  id v193;
  id v194;
  id v195;
  id v196;
  id v197;
  id v198;
  id v199;
  id v200;
  _QWORD *v201;
  char *v202;
  id v203;
  id v204;
  id v205;
  id v206;
  void *v207;
  id v208;
  id v209;
  id v210;
  id v211;
  id v212;
  id v213;
  id v214;
  id v215;
  id v216;
  id v217;
  Class v218;
  id v219;
  char *v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  id v225;
  void *v226;
  id v227;
  char *v228;
  char *v229;
  _QWORD *v230;
  uint64_t v231;
  id v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;

  v1 = v0;
  v223 = type metadata accessor for CharacterSet();
  v222 = *(_QWORD *)(v223 - 8);
  MEMORY[0x24BDAC7A8](v223);
  v221 = (char *)&v220 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for UIBackgroundConfiguration();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v220 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UIBackgroundConfiguration?);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v220 = (char *)&v220 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v228 = (char *)&v220 - v11;
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v220 - v12;
  v14 = &v0[OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_representable];
  swift_beginAccess();
  v15 = *(_QWORD *)v14;
  if (*(_QWORD *)v14)
  {
    v16 = (_QWORD *)*((_QWORD *)v14 + 1);
    v229 = v14;
    v230 = v16;
    v17 = (void *)objc_opt_self();
    v18 = (uint64_t *)&v0[OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_modifiableContstraints];
    swift_beginAccess();
    v19 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    v224 = v19;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v225 = v17;
    objc_msgSend(v17, sel_deactivateConstraints_, isa);

    MEMORY[0x23B8131A8]();
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v13, v6, v3);
    v227 = (id)objc_opt_self();
    if (objc_msgSend(v227, sel_tableCellPlainBackgroundColor))
    {
      UIBackgroundConfiguration.backgroundColor.setter();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v13, 0, 1, v3);
      MEMORY[0x23B81319C](v13);
      objc_opt_self();
      v21 = swift_dynamicCastObjCClass();
      v231 = v15;
      v233 = v1;
      v22 = v229;
      if (v21)
      {
        v23 = (void *)v21;
        swift_unknownObjectRetain();
        if (objc_msgSend(v23, sel_on))
        {
          if (!*(_QWORD *)v22)
            goto LABEL_7;
          v24 = *((_QWORD *)v22 + 1);
          ObjectType = swift_getObjectType();
          v26 = *(uint64_t (**)(uint64_t, uint64_t))(v24 + 16);
          swift_unknownObjectRetain();
          v27 = v26(ObjectType, v24);
          v15 = v231;
          LOBYTE(v24) = v27;
          swift_unknownObjectRelease();
          if ((v24 & 1) != 0)
          {
LABEL_7:
            v28 = v233;
            v29 = *(void **)&v233[OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_titleLabel];
            v30 = v227;
            v31 = objc_msgSend(v227, sel_systemBlackColor);
            v232 = v29;
            objc_msgSend(v29, sel_setTextColor_, v31);

            v32 = *(void **)&v28[OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_subtitleLabel];
            v33 = objc_msgSend(v30, sel_systemGrayColor);
            objc_msgSend(v32, sel_setTextColor_, v33);

            v34 = (uint64_t)v228;
            MEMORY[0x23B813190]();
            v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v34, 1, v3);
            v226 = v32;
            if (v35)
            {
              v36 = v220;
              outlined init with copy of UIBackgroundConfiguration?(v34, (uint64_t)v220);
              MEMORY[0x23B81319C](v36);
              swift_unknownObjectRelease();
              outlined destroy of UIBackgroundConfiguration?(v34);
            }
            else
            {
              v219 = objc_msgSend(v30, sel_systemWhiteColor);
              UIBackgroundConfiguration.backgroundColor.setter();
              MEMORY[0x23B81319C](v34);
              swift_unknownObjectRelease();
            }
LABEL_19:
            v50 = v230;
            v51 = swift_getObjectType();
            v52 = (uint64_t (*)(uint64_t, _QWORD *))v50[6];
            v228 = (char *)v51;
            v53 = v52(v51, v50);
            v54 = *(void **)&v233[OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_clickableButton];
            if (v53)
            {
              v55 = (char *)v53;
              objc_msgSend(*(id *)&v233[OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_clickableButton], sel_setHidden_, 0);
              v56 = *(void **)&v233[OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_imageButton];
              objc_msgSend(v56, sel_setHidden_, 0);
              v220 = v55;
              objc_msgSend(v56, sel_setImage_forState_, v55, 0);
              v57 = v229;
              if (!*(_QWORD *)v229)
                goto LABEL_22;
              v58 = *((_QWORD *)v229 + 1);
              v59 = swift_getObjectType();
              v60 = *(uint64_t (**)(uint64_t, uint64_t))(v58 + 16);
              swift_unknownObjectRetain();
              v61 = v60(v59, v58);
              v57 = v229;
              LOBYTE(v58) = v61;
              swift_unknownObjectRelease();
              if ((v58 & 1) == 0)
              {
                v77 = objc_msgSend(v56, sel_layer);
                LODWORD(v78) = 1050253722;
                objc_msgSend(v77, sel_setOpacity_, v78);

                v64 = objc_msgSend(v54, sel_layer);
                LODWORD(v79) = 1050253722;
                objc_msgSend(v64, sel_setOpacity_, v79);
              }
              else
              {
LABEL_22:
                v62 = objc_msgSend(v56, sel_layer);
                LODWORD(v63) = 1.0;
                objc_msgSend(v62, sel_setOpacity_, v63);

                v64 = objc_msgSend(v54, sel_layer);
                LODWORD(v65) = 1.0;
                objc_msgSend(v64, sel_setOpacity_, v65);
              }

              objc_opt_self();
              if (swift_dynamicCastObjCClass())
              {
                if (*(_QWORD *)v57)
                {
                  v80 = *((_QWORD *)v57 + 1);
                  v81 = swift_getObjectType();
                  v82 = *(uint64_t (**)(uint64_t, uint64_t))(v80 + 16);
                  swift_unknownObjectRetain();
                  v83 = v82(v81, v80);
                  swift_unknownObjectRelease();
                }
                else
                {
                  v83 = 1;
                }
                objc_msgSend(v56, sel_setUserInteractionEnabled_, v83 & 1);
                if (*(_QWORD *)v57)
                {
                  v85 = *((_QWORD *)v57 + 1);
                  v86 = swift_getObjectType();
                  v87 = *(uint64_t (**)(uint64_t, uint64_t))(v85 + 16);
                  swift_unknownObjectRetain();
                  v84 = v87(v86, v85);
                  swift_unknownObjectRelease();
                }
                else
                {
                  v84 = 1;
                }
              }
              else
              {
                objc_msgSend(v56, sel_setUserInteractionEnabled_, 0);
                v84 = 0;
              }
              objc_msgSend(v54, sel_setUserInteractionEnabled_, v84 & 1);
              v88 = v233;
              CAFUIProminentSettingCell.configureButtonColors()();
              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
              v89 = swift_allocObject();
              *(_OWORD *)(v89 + 16) = xmmword_23757B0E0;
              v90 = objc_msgSend(v54, sel_leadingAnchor);
              v91 = objc_msgSend(v88, sel_contentView);
              v92 = objc_msgSend(v91, (SEL)&ResourceBundleClass.weak_ivar_lyt + 6);

              v93 = objc_msgSend(v90, sel_constraintEqualToAnchor_, v92);
              *(_QWORD *)(v89 + 32) = v93;
              v94 = objc_msgSend(v54, sel_centerYAnchor);
              v95 = objc_msgSend(v88, (SEL)0x2508E0A48);
              v96 = objc_msgSend(v95, sel_centerYAnchor);

              v97 = objc_msgSend(v94, sel_constraintEqualToAnchor_, v96);
              *(_QWORD *)(v89 + 40) = v97;
              v98 = objc_msgSend(v54, sel_widthAnchor);
              v99 = objc_msgSend(v98, sel_constraintEqualToConstant_, 52.0);

              *(_QWORD *)(v89 + 48) = v99;
              v100 = objc_msgSend(v54, sel_heightAnchor);
              v101 = objc_msgSend(v100, sel_constraintEqualToConstant_, 52.0);

              *(_QWORD *)(v89 + 56) = v101;
              v102 = objc_msgSend(v56, sel_centerXAnchor);
              v103 = objc_msgSend(v54, sel_centerXAnchor);
              v104 = objc_msgSend(v102, sel_constraintEqualToAnchor_, v103);

              *(_QWORD *)(v89 + 64) = v104;
              v105 = objc_msgSend(v56, sel_centerYAnchor);
              v106 = objc_msgSend(v54, sel_centerYAnchor);
              v107 = objc_msgSend(v105, sel_constraintEqualToAnchor_, v106);

              *(_QWORD *)(v89 + 72) = v107;
              v108 = objc_msgSend(v56, sel_widthAnchor);
              v109 = objc_msgSend(v108, sel_constraintEqualToConstant_, 36.0);

              *(_QWORD *)(v89 + 80) = v109;
              v110 = objc_msgSend(v56, sel_heightAnchor);
              v111 = objc_msgSend(v110, sel_constraintEqualToConstant_, 36.0);

              *(_QWORD *)(v89 + 88) = v111;
              v112 = v232;
              v113 = objc_msgSend(v232, sel_leadingAnchor);
              v114 = objc_msgSend(v54, sel_trailingAnchor);
              v115 = objc_msgSend(v113, sel_constraintEqualToAnchor_, v114);

              *(_QWORD *)(v89 + 96) = v115;
              v116 = objc_msgSend(v112, sel_trailingAnchor);
              v117 = objc_msgSend(v88, sel_contentView);
              v118 = objc_msgSend(v117, sel_trailingAnchor);

              v119 = objc_msgSend(v116, sel_constraintEqualToAnchor_constant_, v118, -12.0);
              *(_QWORD *)(v89 + 104) = v119;
              v234 = v89;
              specialized Array._endMutation()();
              *v18 = v234;

              v15 = v231;
            }
            else
            {
              objc_msgSend(*(id *)&v233[OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_clickableButton], sel_setHidden_, 1);
              v66 = v233;
              objc_msgSend(*(id *)&v233[OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_imageButton], sel_setHidden_, 1);
              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
              v67 = swift_allocObject();
              *(_OWORD *)(v67 + 16) = xmmword_2375790C0;
              v68 = v232;
              v69 = objc_msgSend(v232, sel_leadingAnchor);
              v70 = objc_msgSend(v66, sel_contentView);
              v71 = objc_msgSend(v70, (SEL)&ResourceBundleClass.weak_ivar_lyt + 6);

              v72 = objc_msgSend(v69, sel_constraintEqualToAnchor_constant_, v71, 12.0);
              *(_QWORD *)(v67 + 32) = v72;
              v73 = objc_msgSend(v68, sel_trailingAnchor);
              v74 = objc_msgSend(v66, sel_contentView);
              v75 = objc_msgSend(v74, sel_trailingAnchor);

              v76 = objc_msgSend(v73, sel_constraintEqualToAnchor_constant_, v75, -12.0);
              *(_QWORD *)(v67 + 40) = v76;
              v234 = v67;
              specialized Array._endMutation()();
              *v18 = v234;
            }
            swift_bridgeObjectRelease();
            v120 = (uint64_t (**)(uint64_t, id))v230;
            v121 = (uint64_t (*)(char *, _QWORD *))v230[10];
            v122 = (uint64_t)v228;
            v123 = (void *)v121(v228, v230);
            if (v123)
            {
              v124 = v123;
              v125 = objc_msgSend(v123, sel_userVisibleLabel);
              if (v125)
              {
                v126 = v125;
                v127 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                v129 = v128;

                v234 = v127;
                v235 = v129;
                v130 = v221;
                static CharacterSet.whitespaces.getter();
                lazy protocol witness table accessor for type String and conformance String();
                v131 = StringProtocol.trimmingCharacters(in:)();
                v133 = v132;
                (*(void (**)(char *, uint64_t))(v222 + 8))(v130, v223);
                swift_bridgeObjectRelease();

                v134 = HIBYTE(v133) & 0xF;
                if ((v133 & 0x2000000000000000) == 0)
                  v134 = v131 & 0xFFFFFFFFFFFFLL;
                if (v134)
                {
                  v122 = (uint64_t)v228;
                  goto LABEL_43;
                }
                swift_bridgeObjectRelease();
                v122 = (uint64_t)v228;
              }
              else
              {

              }
            }
            v131 = v120[1](v122, v120);
            v133 = v135;
LABEL_43:
            if ((CAFListContentRepresentable.isUILimited.getter(v122, (uint64_t)v120) & 1) != 0)
            {
              v136 = objc_allocWithZone(MEMORY[0x24BDD1688]);
              v137 = (void *)MEMORY[0x23B812F68](v131, v133);
              swift_bridgeObjectRelease();
              v138 = objc_msgSend(v136, sel_initWithString_, v137);

              if (!*(_QWORD *)v229)
                goto LABEL_46;
              v139 = *((_QWORD *)v229 + 1);
              v140 = swift_getObjectType();
              v141 = *(uint64_t (**)(uint64_t, uint64_t))(v139 + 16);
              swift_unknownObjectRetain();
              v142 = v141(v140, v139);
              v120 = (uint64_t (**)(uint64_t, id))v230;
              LOBYTE(v139) = v142;
              swift_unknownObjectRelease();
              if ((v139 & 1) == 0)
                v143 = &selRef_grayColor;
              else
LABEL_46:
                v143 = &selRef_labelColor;
              v146 = objc_msgSend(v227, *v143);
              v145 = objc_msgSend((id)objc_opt_self(), sel_configurationWithHierarchicalColor_, v146);

              v147 = (void *)MEMORY[0x23B812F68](0x676E697265657473, 0xED00006C65656877);
              v148 = CAFUIImageForSymbolNameWithConfiguration(v147, v145);

              if (v148)
              {
                v149 = objc_msgSend((id)objc_opt_self(), sel_textAttachmentWithImage_, v148);
                v150 = objc_allocWithZone(MEMORY[0x24BDD1458]);
                v151 = (void *)MEMORY[0x23B812F68](8224, 0xE200000000000000);
                v152 = objc_msgSend(v150, sel_initWithString_, v151);

                objc_msgSend(v138, sel_appendAttributedString_, v152);
                v153 = objc_msgSend((id)objc_opt_self(), sel_attributedStringWithAttachment_, v149);
                objc_msgSend(v138, sel_appendAttributedString_, v153);

                v120 = (uint64_t (**)(uint64_t, id))v230;
              }
              v154 = v232;
              objc_msgSend(v232, sel_setLineBreakMode_, 5);
              objc_msgSend(v154, sel_setAttributedText_, v138);

              v15 = v231;
            }
            else
            {
              v144 = v232;
              objc_msgSend(v232, sel_setLineBreakMode_, 4);
              v145 = (id)MEMORY[0x23B812F68](v131, v133);
              swift_bridgeObjectRelease();
              objc_msgSend(v144, sel_setText_, v145);
            }
            v155 = v226;

            v156 = (void *)v121(v228, v120);
            if (v156)
            {
              v157 = v156;
              v158 = objc_msgSend(v156, sel_userVisibleValue);
              if (v158)
              {
                v159 = v158;
                v160 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                v162 = v161;

                v234 = v160;
                v235 = v162;
                v163 = v221;
                static CharacterSet.whitespaces.getter();
                lazy protocol witness table accessor for type String and conformance String();
                v164 = StringProtocol.trimmingCharacters(in:)();
                v166 = v165;
                (*(void (**)(char *, uint64_t))(v222 + 8))(v163, v223);
                swift_bridgeObjectRelease();
                v167 = HIBYTE(v166) & 0xF;
                if ((v166 & 0x2000000000000000) == 0)
                  v167 = v164 & 0xFFFFFFFFFFFFLL;
                if (v167)
                {
                  v168 = (void *)MEMORY[0x23B812F68](v164, v166);
                  swift_bridgeObjectRelease();
                  objc_msgSend(v155, sel_setText_, v168);

                  goto LABEL_68;
                }

                swift_bridgeObjectRelease();
              }
              else
              {

              }
            }
            swift_getObjectType();
            v169 = swift_conformsToProtocol2();
            if (v169)
              v170 = v169;
            else
              v170 = 0;
            if (v169)
              v171 = v15;
            else
              v171 = 0;
            if (v171)
            {
              v172 = swift_getObjectType();
              v173 = *(uint64_t (**)(uint64_t, uint64_t))(v170 + 16);
              swift_unknownObjectRetain();
              v174._rawValue = (void *)v173(v172, v170);
              v175._rawValue = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v170 + 24))(v172, v170);
              v176 = CAFUILocalizedValues(for:selectedValues:)(v174, v175);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v177 = (void *)MEMORY[0x23B812F68](v176._countAndFlagsBits, v176._object);
              swift_bridgeObjectRelease();
              objc_msgSend(v155, sel_setText_, v177);

              swift_unknownObjectRelease();
LABEL_68:
              v178 = v232;
              objc_msgSend(v232, sel_setNumberOfLines_, 1);
              objc_msgSend(v155, sel_setHidden_, 0);
              v179 = objc_msgSend(v178, sel_topAnchor);
              v180 = v233;
              v181 = objc_msgSend(v233, sel_contentView);
              v182 = objc_msgSend(v181, (SEL)&selRef_integerSettingService_didUpdateName_ + 4);

              v230 = objc_msgSend(v179, sel_constraintEqualToAnchor_, v182);
              v183 = objc_msgSend(v178, sel_bottomAnchor);
              v184 = objc_msgSend(v180, (SEL)0x2508E0A48);
              v185 = v155;
              v186 = objc_msgSend(v184, sel_centerYAnchor);

              v229 = (char *)objc_msgSend(v183, sel_constraintEqualToAnchor_constant_, v186, 7.0);
              v187 = objc_msgSend(v185, sel_topAnchor);
              v188 = objc_msgSend(v180, (SEL)0x2508E0A48);
              v189 = objc_msgSend(v188, sel_centerYAnchor);

              v190 = objc_msgSend(v187, sel_constraintEqualToAnchor_constant_, v189, -7.0);
              v191 = objc_msgSend(v185, sel_leadingAnchor);
              v192 = objc_msgSend(v178, sel_leadingAnchor);
              v193 = objc_msgSend(v191, sel_constraintEqualToAnchor_, v192);

              v194 = objc_msgSend(v185, sel_trailingAnchor);
              v195 = objc_msgSend(v178, sel_trailingAnchor);
              v196 = objc_msgSend(v194, sel_constraintEqualToAnchor_, v195);

              v197 = objc_msgSend(v185, sel_bottomAnchor);
              v198 = objc_msgSend(v180, sel_contentView);
              v199 = objc_msgSend(v198, sel_bottomAnchor);

              v200 = objc_msgSend(v197, (SEL)&selRef_hidden + 6, v199);
              swift_beginAccess();
              if ((unint64_t)*v18 >> 62)
              {
                swift_bridgeObjectRetain();
                v201 = (_QWORD *)_CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
                if (!__OFADD__(v201, 6))
                {
LABEL_70:
                  specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)();
                  specialized Array._endMutation()();
                  v201 = v230;
                  MEMORY[0x23B81301C]();
                  if (*(_QWORD *)((*v18 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(_QWORD *)((*v18 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
                  {
LABEL_71:
                    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                    specialized Array._endMutation()();
                    v202 = v229;
                    MEMORY[0x23B81301C]();
                    if (*(_QWORD *)((*v18 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v18 & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
                      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                    specialized Array._endMutation()();
                    v203 = v190;
                    MEMORY[0x23B81301C]();
                    if (*(_QWORD *)((*v18 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v18 & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
                      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                    specialized Array._endMutation()();
                    v204 = v193;
                    MEMORY[0x23B81301C]();
                    if (*(_QWORD *)((*v18 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v18 & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
                      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                    specialized Array._endMutation()();
                    v205 = v196;
                    MEMORY[0x23B81301C]();
                    if (*(_QWORD *)((*v18 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v18 & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
                      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                    specialized Array._endMutation()();
                    v206 = v200;
                    MEMORY[0x23B81301C]();
                    if (*(_QWORD *)((*v18 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v18 & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
                      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                    specialized Array._endMutation()();
                    swift_endAccess();

LABEL_88:
                    swift_bridgeObjectRetain();
                    v218 = Array._bridgeToObjectiveC()().super.isa;
                    swift_bridgeObjectRelease();
                    objc_msgSend(v225, sel_activateConstraints_, v218);

                    swift_unknownObjectRelease();
                    return;
                  }
LABEL_93:
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                  goto LABEL_71;
                }
              }
              else
              {
                v201 = *(_QWORD **)((*v18 & 0xFFFFFFFFFFFFF8) + 0x10);
                if (!__OFADD__(v201, 6))
                  goto LABEL_70;
              }
              __break(1u);
              goto LABEL_93;
            }
            objc_msgSend(v155, sel_setText_, 0);
            v207 = v155;
            v208 = v232;
            objc_msgSend(v232, sel_setNumberOfLines_, 2);
            objc_msgSend(v207, sel_setHidden_, 1);
            v209 = objc_msgSend(v208, sel_topAnchor);
            v210 = v233;
            v211 = objc_msgSend(v233, sel_contentView);
            v212 = objc_msgSend(v211, sel_topAnchor);

            v213 = objc_msgSend(v209, sel_constraintEqualToAnchor_, v212);
            v214 = objc_msgSend(v208, sel_bottomAnchor);
            v215 = objc_msgSend(v210, sel_contentView);
            v216 = objc_msgSend(v215, sel_bottomAnchor);

            v217 = objc_msgSend(v214, sel_constraintEqualToAnchor_, v216);
            swift_beginAccess();
            if ((unint64_t)*v18 >> 62)
            {
              swift_bridgeObjectRetain();
              v203 = (id)_CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (!__OFADD__(v203, 2))
              {
LABEL_84:
                specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)();
                specialized Array._endMutation()();
                v203 = v213;
                MEMORY[0x23B81301C]();
                if (*(_QWORD *)((*v18 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(_QWORD *)((*v18 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
                {
LABEL_85:
                  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                  specialized Array._endMutation()();
                  v202 = (char *)v217;
                  MEMORY[0x23B81301C]();
                  if (*(_QWORD *)((*v18 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v18 & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
                    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                  specialized Array._endMutation()();
                  swift_endAccess();
                  goto LABEL_88;
                }
LABEL_97:
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                goto LABEL_85;
              }
            }
            else
            {
              v203 = *(id *)((*v18 & 0xFFFFFFFFFFFFF8) + 0x10);
              if (!__OFADD__(v203, 2))
                goto LABEL_84;
            }
            __break(1u);
            goto LABEL_97;
          }
        }
        swift_unknownObjectRelease();
      }
      v232 = *(id *)&v233[OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_titleLabel];
      if (*(_QWORD *)v22
        && (v37 = *((_QWORD *)v22 + 1),
            v38 = swift_getObjectType(),
            v39 = *(uint64_t (**)(uint64_t, uint64_t))(v37 + 16),
            swift_unknownObjectRetain(),
            LOBYTE(v37) = v39(v38, v37),
            swift_unknownObjectRelease(),
            (v37 & 1) == 0))
      {
        v40 = &selRef_grayColor;
      }
      else
      {
        v40 = &selRef_labelColor;
      }
      v41 = v227;
      v42 = objc_msgSend(v227, *v40);
      objc_msgSend(v232, sel_setTextColor_, v42);

      v43 = *(void **)&v233[OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_subtitleLabel];
      if (!*(_QWORD *)v22)
        goto LABEL_16;
      v44 = *((_QWORD *)v22 + 1);
      v45 = swift_getObjectType();
      v46 = *(uint64_t (**)(uint64_t, uint64_t))(v44 + 16);
      swift_unknownObjectRetain();
      v47 = v46(v45, v44);
      v15 = v231;
      LOBYTE(v44) = v47;
      swift_unknownObjectRelease();
      if ((v44 & 1) == 0)
        v48 = &selRef_grayColor;
      else
LABEL_16:
        v48 = &selRef_secondaryLabelColor;
      v49 = objc_msgSend(v41, *v48);
      v226 = v43;
      objc_msgSend(v43, sel_setTextColor_, v49);

      goto LABEL_19;
    }
    __break(1u);
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void CAFUIProminentSettingCell.configureButtonColors()()
{
  char *v0;
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  UIColor v8;
  void *v9;
  uint64_t ObjectType;
  uint64_t (*v11)(uint64_t, uint64_t);
  char v12;
  char **v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t);
  char v26;
  id v27;
  unsigned int v28;
  void *v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  void *v35;
  id v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  void *v43;
  id v44;

  v1 = v0;
  v2 = &v0[OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_representable];
  swift_beginAccess();
  if (!*(_QWORD *)v2)
  {
    v9 = *(void **)&v1[OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_imageButton];
    goto LABEL_8;
  }
  v3 = *((_QWORD *)v2 + 1);
  objc_opt_self();
  v4 = swift_dynamicCastObjCClass();
  if (!v4)
  {
    v9 = *(void **)&v1[OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_imageButton];
    ObjectType = swift_getObjectType();
    v11 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 16);
    swift_unknownObjectRetain();
    v12 = v11(ObjectType, v3);
    swift_unknownObjectRelease();
    if ((v12 & 1) == 0)
    {
      v13 = &selRef_grayColor;
      goto LABEL_9;
    }
LABEL_8:
    v13 = &selRef__carSystemFocusColor;
LABEL_9:
    v14 = objc_msgSend((id)objc_opt_self(), *v13);
    objc_msgSend(v9, sel_setTintColor_, v14);

    v15 = objc_msgSend((id)objc_opt_self(), sel_clearColor);
    objc_msgSend(v9, sel_setBackgroundColor_, v15);

    v16 = objc_msgSend(v9, sel_layer);
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v19 = v18;
    v20 = objc_allocWithZone(MEMORY[0x24BDE56B0]);
    v21 = (void *)MEMORY[0x23B812F68](v17, v19);
    swift_bridgeObjectRelease();
    v22 = objc_msgSend(v20, sel_initWithType_, v21);

    objc_msgSend(v16, sel_setCompositingFilter_, v22);
    return;
  }
  v5 = (void *)v4;
  swift_unknownObjectRetain();
  v6 = objc_msgSend(v5, sel_prominenceInfo);
  if (v6)
  {
    v7 = v6;
    if (objc_msgSend(v6, sel_color))
    {
      objc_msgSend(v7, sel_color);
      v8.super.isa = CAFImageColor.convertToUIColor()().super.isa;

      goto LABEL_17;
    }

  }
  if (*(_QWORD *)v2
    && (v23 = *((_QWORD *)v2 + 1),
        v24 = swift_getObjectType(),
        v25 = *(uint64_t (**)(uint64_t, uint64_t))(v23 + 16),
        swift_unknownObjectRetain(),
        v26 = v25(v24, v23),
        swift_unknownObjectRelease(),
        (v26 & 1) == 0))
  {
    v27 = objc_msgSend((id)objc_opt_self(), sel_grayColor);
  }
  else
  {
    v27 = objc_msgSend((id)objc_opt_self(), sel__carSystemFocusColor);
  }
  v8.super.isa = (Class)v27;
LABEL_17:
  v28 = objc_msgSend(v5, sel_on);
  v29 = *(void **)&v1[OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_imageButton];
  if (v28)
  {
    v30 = objc_msgSend((id)objc_opt_self(), sel_systemWhiteColor);
    objc_msgSend(v29, sel_setTintColor_, v30);

    objc_msgSend(v29, sel_setBackgroundColor_, v8.super.isa);
    v31 = objc_msgSend(v29, sel_layer);
LABEL_22:
    v37 = v31;
    goto LABEL_23;
  }
  objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_imageButton], sel_setTintColor_, v8.super.isa);
  v32 = objc_msgSend(v1, sel_traitCollection);
  v33 = objc_msgSend(v32, sel_userInterfaceStyle);

  v34 = objc_msgSend((id)objc_opt_self(), sel_systemBlackColor);
  v35 = v34;
  if (v33 != (id)1)
  {
    v38 = objc_msgSend(v34, sel_colorWithAlphaComponent_, 0.17);

    objc_msgSend(v29, sel_setBackgroundColor_, v38);
    v31 = objc_msgSend(v29, sel_layer);
    goto LABEL_22;
  }
  v36 = objc_msgSend(v34, sel_colorWithAlphaComponent_, 0.07);

  objc_msgSend(v29, sel_setBackgroundColor_, v36);
  v37 = objc_msgSend(v29, sel_layer);
LABEL_23:
  v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v41 = v40;
  v42 = objc_allocWithZone(MEMORY[0x24BDE56B0]);
  v43 = (void *)MEMORY[0x23B812F68](v39, v41);
  swift_bridgeObjectRelease();
  v44 = objc_msgSend(v42, sel_initWithType_, v43);

  objc_msgSend(v37, sel_setCompositingFilter_, v44);
  swift_unknownObjectRelease();
}

uint64_t CAFUIProminentSettingCell.buttonClicked()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t result;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  void *v7;

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_representable);
  result = swift_beginAccess();
  if (*v1)
  {
    v3 = v1[1];
    ObjectType = swift_getObjectType();
    v5 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 16);
    swift_unknownObjectRetain();
    if ((v5(ObjectType, v3) & 1) != 0)
    {
      objc_opt_self();
      v6 = swift_dynamicCastObjCClass();
      if (v6)
      {
        v7 = (void *)v6;
        swift_unknownObjectRetain();
        objc_msgSend(v7, sel_setOn_, objc_msgSend(v7, sel_on) ^ 1);
        swift_unknownObjectRelease();
      }
    }
    return swift_unknownObjectRelease();
  }
  return result;
}

id CAFUIProminentSettingCell.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFUIProminentSettingCell();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id protocol witness for CAFUICellProtocol.imageColor.getter in conformance CAFUIProminentSettingCell()
{
  uint64_t v0;
  id *v1;

  v1 = (id *)(v0 + OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_imageColor);
  swift_beginAccess();
  return *v1;
}

id protocol witness for CAFUICellProtocol.accessoryColor.getter in conformance CAFUIProminentSettingCell()
{
  return objc_msgSend((id)objc_opt_self(), sel_clearColor);
}

uint64_t protocol witness for CAFUICellProtocol.isCellEnabled.getter in conformance CAFUIProminentSettingCell()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t (*v4)(uint64_t, uint64_t);
  char v5;

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC5CAFUI25CAFUIProminentSettingCell_representable);
  swift_beginAccess();
  if (*v1)
  {
    v2 = v1[1];
    ObjectType = swift_getObjectType();
    v4 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 16);
    swift_unknownObjectRetain();
    v5 = v4(ObjectType, v2);
    swift_unknownObjectRelease();
  }
  else
  {
    v5 = 1;
  }
  return v5 & 1;
}

uint64_t type metadata accessor for CAFUIProminentSettingCell()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for CAFUIProminentSettingCell.Constants()
{
  return &type metadata for CAFUIProminentSettingCell.Constants;
}

ValueMetadata *type metadata accessor for CAFUIProminentSettingCell.Constants.Cell()
{
  return &type metadata for CAFUIProminentSettingCell.Constants.Cell;
}

uint64_t sub_237573230()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in CAFUIProminentSettingCell.init(frame:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  closure #1 in CAFUIProminentSettingCell.init(frame:)(a1, a2, v2);
}

uint64_t outlined init with copy of UIBackgroundConfiguration?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UIBackgroundConfiguration?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of UIBackgroundConfiguration?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UIBackgroundConfiguration?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t static CAFUILogger.default(_:function:file:line:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return static CAFUILogger.default(_:function:file:line:)(a1, a2, a3, a4, a5, a6, a7, MEMORY[0x24BEE78F0]);
}

uint64_t static CAFUILogger.error(_:function:file:line:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return static CAFUILogger.default(_:function:file:line:)(a1, a2, a3, a4, a5, a6, a7, MEMORY[0x24BEE7910]);
}

uint64_t static CAFUILogger.debug(_:function:file:line:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return static CAFUILogger.default(_:function:file:line:)(a1, a2, a3, a4, a5, a6, a7, MEMORY[0x24BEE7908]);
}

uint64_t static CAFUILogger.info(_:function:file:line:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return static CAFUILogger.default(_:function:file:line:)(a1, a2, a3, a4, a5, a6, a7, MEMORY[0x24BEE78F0]);
}

uint64_t one-time initialization function for default()
{
  id v0;
  id v1;
  uint64_t result;

  v0 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v1 = objc_msgSend(v0, sel_bundleIdentifier);

  if (v1)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

  }
  type metadata accessor for OS_os_log();
  result = OS_os_log.init(subsystem:category:)();
  static OS_os_log.default = result;
  return result;
}

uint64_t static CAFUILogger.fault(_:function:file:line:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return static CAFUILogger.default(_:function:file:line:)(a1, a2, a3, a4, a5, a6, a7, MEMORY[0x24BEE7920]);
}

uint64_t static CAFUILogger.default(_:function:file:line:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(void))
{
  os_log_type_t v12;

  v12 = a8();
  return specialized static CAFUILogger.log(_:message:function:file:line:)(v12, a1, a2, a3, a4);
}

uint64_t specialized static CAFUILogger.log(_:message:function:file:line:)(os_log_type_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  NSObject *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (one-time initialization token for default != -1)
    swift_once();
  v10 = static OS_os_log.default;
  result = os_log_type_enabled((os_log_t)static OS_os_log.default, a1);
  if ((_DWORD)result)
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v12 = swift_slowAlloc();
    v13 = swift_slowAlloc();
    v14 = v13;
    *(_DWORD *)v12 = 136315650;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a4, a5, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v12 + 12) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 22) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_237505000, v10, a1, "%s: %ld  %s", (uint8_t *)v12, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x23B813C70](v13, -1, -1);
    return MEMORY[0x23B813C70](v12, -1, -1);
  }
  return result;
}

ValueMetadata *type metadata accessor for CAFUILogger()
{
  return &type metadata for CAFUILogger;
}

unint64_t type metadata accessor for OS_os_log()
{
  unint64_t result;

  result = lazy cache variable for type metadata for OS_os_log;
  if (!lazy cache variable for type metadata for OS_os_log)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  }
  return result;
}

uint64_t CAFVolume.numericDisplayKind.getter()
{
  return 0;
}

id CAFVolume.rangeValues.getter()
{
  void *v0;

  return objc_msgSend(v0, sel_volumeRange);
}

uint64_t CAFVolume.showStepperBar.getter()
{
  return 1;
}

uint64_t CAFVolume.minimumSymbolName.getter()
{
  return 0x73756E696DLL;
}

uint64_t CAFVolume.maximumSymbolName.getter()
{
  return 1937075312;
}

uint64_t CAFVolume.userVisibleValue.getter()
{
  return 0;
}

uint64_t CAFVolume.symbolName.getter()
{
  return 0;
}

uint64_t CAFVolume.prominenceInfo.getter()
{
  return 0;
}

id CAFVolume.value.getter()
{
  void *v0;

  return objc_msgSend(v0, sel_volume);
}

id CAFVolume.value.setter(unsigned __int8 a1)
{
  void *v1;

  return objc_msgSend(v1, sel_setVolume_, a1);
}

id (*CAFVolume.value.modify(uint64_t a1))(uint64_t a1)
{
  void *v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = objc_msgSend(v1, sel_volume);
  return CAFVolume.value.modify;
}

id CAFVolume.value.modify(uint64_t a1)
{
  return objc_msgSend(*(id *)a1, sel_setVolume_, *(unsigned __int8 *)(a1 + 8));
}

uint64_t CAFVolume.limitableUIElement.getter()
{
  return 0;
}

uint64_t CAFVolume.isEnabled.getter()
{
  return 1;
}

uint64_t CAFVolume.isHighlightable.getter()
{
  return 0;
}

unint64_t lazy protocol witness table accessor for type UInt8 and conformance UInt8()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UInt8 and conformance UInt8;
  if (!lazy protocol witness table cache variable for type UInt8 and conformance UInt8)
  {
    result = MEMORY[0x23B813BE0](MEMORY[0x24BEE4298], MEMORY[0x24BEE4260]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt8 and conformance UInt8);
  }
  return result;
}

id protocol witness for CAFUINumericRepresentable.value.getter in conformance CAFVolume@<X0>(_BYTE *a1@<X8>)
{
  void *v1;
  id result;

  result = objc_msgSend(v1, sel_volume);
  *a1 = (_BYTE)result;
  return result;
}

id protocol witness for CAFUINumericRepresentable.value.setter in conformance CAFVolume(unsigned __int8 *a1)
{
  void *v1;

  return objc_msgSend(v1, sel_setVolume_, *a1);
}

id (*protocol witness for CAFUINumericRepresentable.value.modify in conformance CAFVolume(uint64_t a1))(uint64_t a1)
{
  void *v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = objc_msgSend(v1, sel_volume);
  return CAFVolume.value.modify;
}

id protocol witness for CAFUINumericRepresentable.rangeValues.getter in conformance CAFVolume()
{
  void *v0;

  return objc_msgSend(v0, sel_volumeRange);
}

uint64_t protocol witness for CAFUINumericRepresentable.minimumSymbolName.getter in conformance CAFVolume()
{
  return 0x73756E696DLL;
}

uint64_t protocol witness for CAFUINumericRepresentable.maximumSymbolName.getter in conformance CAFVolume()
{
  return 1937075312;
}

void CAFUIServiceListItem.__allocating_init(symbol:text:secondaryText:badgeText:showChevron:enabled:settingsCategory:limitedUI:limitedUIImage:selectionAction:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void CAFUIServiceListItem.__ivar_destroyer()
{
  uint64_t v0;

}

id *CAFUIServiceListItem.deinit()
{
  id *v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return v0;
}

uint64_t CAFUIServiceListItem.__deallocating_deinit()
{
  CAFUIServiceListItem.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CAFUIServiceListItem()
{
  return objc_opt_self();
}

id CAFListContentRepresentable.symbolImage.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  void *v11;

  v2 = (*(uint64_t (**)(void))(a2 + 40))();
  v4 = v3;
  if (v3)
  {
    v5 = v2;
    v6 = *MEMORY[0x24BEBE1D8];
    v7 = (void *)objc_opt_self();
    v8 = objc_msgSend(v7, sel_configurationWithTextStyle_scale_, v6, 2);
    v9 = objc_msgSend(v7, sel_configurationWithWeight_, 6);
    v10 = objc_msgSend(v8, sel_configurationByApplyingConfiguration_, v9);

    v11 = (void *)MEMORY[0x23B812F68](v5, v4);
    swift_bridgeObjectRelease();
    v4 = CAFUIImageForSymbolNameWithConfiguration(v11, v10);

  }
  return v4;
}

uint64_t CAFListContentRepresentable.isTracking(in:)()
{
  return 0;
}

id CAFListContentRepresentable.isUILimited.getter(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v3;
  id v4;

  if (((*(uint64_t (**)(void))(a2 + 24))() & 1) == 0)
    return 0;
  v2 = (void *)CAFListContentRepresentable.session.getter();
  v3 = v2;
  if (v2)
  {
    v4 = objc_msgSend(v2, sel_limitUserInterfaces);

    if (v4)
    {
      v3 = objc_msgSend(v4, sel_BOOLValue);

      return v3;
    }
    return 0;
  }
  return v3;
}

id CAFListContentRepresentable.isRHD.getter()
{
  void *v0;
  id v1;
  id v2;

  v0 = (void *)CAFListContentRepresentable.session.getter();
  v1 = v0;
  if (v0)
  {
    v2 = objc_msgSend(v0, sel_configuration);

    v1 = objc_msgSend(v2, sel_rightHandDrive);
  }
  return v1;
}

void CAFListContentRepresentable.session.setter(void *a1)
{
  specialized CAFListContentRepresentable.session.setter(a1);

}

uint64_t CAFListContentRepresentable.session.getter()
{
  void *v0;
  id v1;
  uint64_t v3;
  _OWORD v4[2];
  _BYTE v5[24];
  uint64_t v6;

  swift_beginAccess();
  v1 = objc_getAssociatedObject(v0, &static CAFUIListContentAssociatedObjects.CARSession);
  swift_endAccess();
  if (v1)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  outlined init with take of Any?((uint64_t)v4, (uint64_t)v5);
  if (v6)
  {
    type metadata accessor for CARSession();
    if (swift_dynamicCast())
      return v3;
    else
      return 0;
  }
  else
  {
    outlined destroy of Any?((uint64_t)v5);
    return 0;
  }
}

void (*CAFListContentRepresentable.session.modify(uint64_t *a1, uint64_t a2, uint64_t a3))(void **a1, char a2)
{
  uint64_t v3;

  a1[2] = a3;
  a1[3] = v3;
  a1[1] = a2;
  *a1 = CAFListContentRepresentable.session.getter();
  return CAFListContentRepresentable.session.modify;
}

void CAFListContentRepresentable.session.modify(void **a1, char a2)
{
  id v2;
  void *v3;
  id v4;

  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    v2 = v4;
    specialized CAFListContentRepresentable.session.setter(v4);

    v3 = v2;
  }
  else
  {
    specialized CAFListContentRepresentable.session.setter(*a1);
    v3 = v4;
  }

}

uint64_t specialized CAFListContentRepresentable.session.setter(void *a1)
{
  void *v1;

  swift_beginAccess();
  objc_setAssociatedObject(v1, &static CAFUIListContentAssociatedObjects.CARSession, a1, 0);
  return swift_endAccess();
}

unint64_t type metadata accessor for CARSession()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CARSession;
  if (!lazy cache variable for type metadata for CARSession)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CARSession);
  }
  return result;
}

void destroy for CAFUICellSelectionAction(uint64_t a1)
{
  outlined consume of CAFUICellSelectionAction(*(void **)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for CAFUICellSelectionAction(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of CAFUICellSelectionAction(*(id *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for CAFUICellSelectionAction(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  unsigned __int8 v5;
  void *v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of CAFUICellSelectionAction(*(id *)a2, v4, v5);
  v6 = *(void **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of CAFUICellSelectionAction(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for CAFUICellSelectionAction(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(void **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of CAFUICellSelectionAction(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for CAFUICellSelectionAction(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CAFUICellSelectionAction(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for CAFUICellSelectionAction(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 2u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 3);
}

uint64_t destructiveInjectEnumTag for CAFUICellSelectionAction(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(_QWORD *)result = a2 - 3;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 3;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for CAFUICellSelectionAction()
{
  return &type metadata for CAFUICellSelectionAction;
}

id UIStackView.init(axis:spacing:arrangedSubviews:)(uint64_t a1, double a2)
{
  id v4;
  Class isa;
  id v6;
  id v7;

  v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  type metadata accessor for UIView();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v6 = objc_msgSend(v4, sel_initWithArrangedSubviews_, isa);

  v7 = v6;
  objc_msgSend(v7, sel_setSpacing_, a2);
  objc_msgSend(v7, sel_setAxis_, a1);
  objc_msgSend(v7, sel_setContentMode_, 4);
  objc_msgSend(v7, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

  return v7;
}

unint64_t type metadata accessor for UIView()
{
  unint64_t result;

  result = lazy cache variable for type metadata for UIView;
  if (!lazy cache variable for type metadata for UIView)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIView);
  }
  return result;
}

id CAFUIDevicePickerDetailViewController.init(device:pairedDevices:actions:carSession:delegate:)(void *a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  char *v6;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  char *v19;
  id v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  void *v28;
  id v29;
  _QWORD v31[6];
  objc_super v32;

  *(_QWORD *)&v6[OBJC_IVAR____TtC5CAFUI37CAFUIDevicePickerDetailViewController_delegate + 8] = 0;
  v12 = swift_unknownObjectWeakInit();
  *(_QWORD *)&v6[OBJC_IVAR____TtC5CAFUI37CAFUIDevicePickerDetailViewController_limitedUIView] = 0;
  v13 = OBJC_IVAR____TtC5CAFUI37CAFUIDevicePickerDetailViewController_carSession;
  *(_QWORD *)&v6[OBJC_IVAR____TtC5CAFUI37CAFUIDevicePickerDetailViewController_carSession] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC5CAFUI37CAFUIDevicePickerDetailViewController_device] = a1;
  *(_QWORD *)&v6[OBJC_IVAR____TtC5CAFUI37CAFUIDevicePickerDetailViewController_pairedDevices] = a2;
  *(_QWORD *)(v12 + 8) = a6;
  swift_unknownObjectWeakAssign();
  *(_QWORD *)&v6[OBJC_IVAR____TtC5CAFUI37CAFUIDevicePickerDetailViewController_actions] = a3;
  v14 = *(void **)&v6[v13];
  *(_QWORD *)&v6[v13] = a4;
  v15 = a1;
  v16 = a2;
  v17 = a4;

  v18 = objc_allocWithZone((Class)type metadata accessor for CAFUIHeaderFooterTableView());
  v19 = v6;
  v20 = objc_msgSend(v18, sel_initWithFrame_style_, 0, 0.0, 0.0, 0.0, 0.0);
  *(_QWORD *)&v19[OBJC_IVAR____TtC5CAFUI24CAFUITableViewController_tableView] = v20;

  v32.receiver = v19;
  v32.super_class = (Class)type metadata accessor for CAFUITableViewController();
  v21 = objc_msgSendSuper2(&v32, sel_initWithNibName_bundle_, 0, 0);
  v22 = (void *)objc_opt_self();
  v23 = v21;
  v24 = objc_msgSend(v22, sel_defaultCenter);
  v25 = *MEMORY[0x24BE151B8];
  v26 = objc_msgSend((id)objc_opt_self(), sel_mainQueue);
  v27 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v31[4] = partial apply for closure #1 in CAFUIDevicePickerDetailViewController.init(device:pairedDevices:actions:carSession:delegate:);
  v31[5] = v27;
  v31[0] = MEMORY[0x24BDAC760];
  v31[1] = 1107296256;
  v31[2] = thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Notification) -> ();
  v31[3] = &block_descriptor_14;
  v28 = _Block_copy(v31);
  swift_release();
  v29 = objc_msgSend(v24, sel_addObserverForName_object_queue_usingBlock_, v25, 0, v26, v28);

  swift_unknownObjectRelease();
  _Block_release(v28);
  swift_unknownObjectRelease();

  return v23;
}

void closure #1 in CAFUIDevicePickerDetailViewController.init(device:pairedDevices:actions:carSession:delegate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = a2 + 16;
  swift_beginAccess();
  v3 = MEMORY[0x23B813CDC](v2);
  if (v3)
  {
    v4 = (void *)v3;
    CAFUIDevicePickerDetailViewController.updateDevicePickerLimitedUI()();

  }
}

Swift::Void __swiftcall CAFUIDevicePickerDetailViewController.updateDevicePickerLimitedUI()()
{
  char *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  char *v4;
  id v5;
  id v6;
  void *v7;
  unsigned __int8 v8;
  id v9;
  unsigned __int8 v10;
  _BOOL8 v11;
  void *v12;
  char *v13;
  id v14;
  id v15;
  void *v16;
  unsigned int v17;
  id v18;
  unsigned __int8 v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  char *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  id v30;
  id v31;

  v1 = *(void **)&v0[OBJC_IVAR____TtC5CAFUI24CAFUITableViewController_tableView];
  v2 = OBJC_IVAR____TtC5CAFUI37CAFUIDevicePickerDetailViewController_carSession;
  v3 = *(void **)&v0[OBJC_IVAR____TtC5CAFUI37CAFUIDevicePickerDetailViewController_carSession];
  if (v3)
  {
    v4 = v0;
    v5 = v3;
    v6 = objc_msgSend(v5, sel_limitUserInterfaces);
    if (v6)
    {
      v7 = v6;
      v8 = objc_msgSend(v6, sel_BOOLValue);

      if ((v8 & 1) != 0)
      {
        v9 = objc_msgSend(v5, sel_configuration);
        v10 = objc_msgSend(v9, sel_limitableUserInterfaces);

        v11 = (v10 & 0x40) == 0;
        goto LABEL_7;
      }
    }

  }
  v11 = 1;
LABEL_7:
  objc_msgSend(v1, sel_setAllowsFocus_, v11);
  objc_msgSend(v1, sel_reloadData);
  v12 = *(void **)&v0[v2];
  if (v12)
  {
    v13 = v0;
    v14 = v12;
    v15 = objc_msgSend(v14, sel_limitUserInterfaces);
    if (v15 && (v16 = v15, v17 = objc_msgSend(v15, sel_BOOLValue), v16, v17))
    {
      v18 = objc_msgSend(v14, sel_configuration);
      v19 = objc_msgSend(v18, sel_limitableUserInterfaces);

      if ((v19 & 0x40) != 0)
      {
        v20 = objc_msgSend(v13, sel_navigationController);
        if (v20)
        {
          v21 = v20;
          v22 = objc_msgSend(v13, sel_view);
          if (v22)
          {
            v23 = v22;
            v24 = specialized CAFUIDevicePickerController.presentDevicePickerLimitedUI(for:navigationController:)(v22, v21, (uint64_t)&unk_2508D4F28, (uint64_t)&unk_2508D4F50, (uint64_t)partial apply for closure #1 in CAFUIDevicePickerController.presentDevicePickerLimitedUI(for:navigationController:), (uint64_t)partial apply for closure #2 in CAFUIDevicePickerController.presentDevicePickerLimitedUI(for:navigationController:));

            v25 = OBJC_IVAR____TtC5CAFUI37CAFUIDevicePickerDetailViewController_limitedUIView;
            v26 = *(void **)&v13[OBJC_IVAR____TtC5CAFUI37CAFUIDevicePickerDetailViewController_limitedUIView];
            if (v26)
            {
              objc_msgSend(v26, sel_removeFromSuperview);
              v31 = *(id *)&v13[v25];
            }
            else
            {
              v31 = 0;
            }
            *(_QWORD *)&v13[v25] = v24;

            goto LABEL_21;
          }
          __break(1u);
          return;
        }
      }
    }
    else
    {

    }
  }
  v27 = OBJC_IVAR____TtC5CAFUI37CAFUIDevicePickerDetailViewController_limitedUIView;
  v28 = *(void **)&v0[OBJC_IVAR____TtC5CAFUI37CAFUIDevicePickerDetailViewController_limitedUIView];
  if (v28)
  {
    objc_msgSend(v28, sel_removeFromSuperview);
    v29 = *(void **)&v0[v27];
  }
  else
  {
    v29 = 0;
  }
  *(_QWORD *)&v0[v27] = 0;

  v30 = objc_msgSend(v0, sel_navigationController);
  if (v30)
  {
    v31 = v30;
    objc_msgSend(v30, sel_setNavigationBarHidden_animated_, 0, 1);
LABEL_21:

  }
}

void CAFUIDevicePickerDetailViewController.__ivar_destroyer()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  outlined destroy of weak CAFUIAutomakerSettingObserverDelegate?(v0 + OBJC_IVAR____TtC5CAFUI37CAFUIDevicePickerDetailViewController_delegate);

}

id CAFUIDevicePickerDetailViewController.__deallocating_deinit()
{
  void *v0;
  id v1;
  uint64_t v2;
  void *v3;
  objc_super v5;

  v1 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = (void *)MEMORY[0x23B812F68](v2);
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_removeObserver_, v3);

  v5.receiver = v0;
  v5.super_class = (Class)type metadata accessor for CAFUIDevicePickerDetailViewController();
  return objc_msgSendSuper2(&v5, sel_dealloc);
}

Swift::Void __swiftcall CAFUIDevicePickerDetailViewController.viewDidLoad()()
{
  char *v0;
  void *v1;
  objc_class *ObjCClassFromMetadata;
  NSString *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  objc_super v10;

  v10.receiver = v0;
  v10.super_class = (Class)type metadata accessor for CAFUIDevicePickerDetailViewController();
  objc_msgSendSuper2(&v10, sel_viewDidLoad);
  v1 = *(void **)&v0[OBJC_IVAR____TtC5CAFUI24CAFUITableViewController_tableView];
  type metadata accessor for CAFUIDevicePickerDetailTableCell();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  v3 = NSStringFromClass(ObjCClassFromMetadata);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = v5;

  v7 = (void *)MEMORY[0x23B812F68](v4, v6);
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_registerClass_forCellReuseIdentifier_, ObjCClassFromMetadata, v7);

  objc_msgSend(v1, sel_setDataSource_, v0);
  objc_msgSend(v1, sel_setDelegate_, v0);
  v8 = objc_msgSend(v0, sel_navigationItem);
  v9 = objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC5CAFUI37CAFUIDevicePickerDetailViewController_device], sel_name);
  objc_msgSend(v8, sel_setTitle_, v9);

  CAFUIDevicePickerDetailViewController.updateDevicePickerLimitedUI()();
}

uint64_t CAFUIDevicePickerDetailViewController.tableView(_:cellForRowAt:)(void *a1)
{
  uint64_t v1;
  objc_class *ObjCClassFromMetadata;
  NSString *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  Class isa;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  unint64_t v13;
  uint64_t result;

  type metadata accessor for CAFUIDevicePickerDetailTableCell();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  v4 = NSStringFromClass(ObjCClassFromMetadata);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v7 = v6;

  v8 = (void *)MEMORY[0x23B812F68](v5, v7);
  swift_bridgeObjectRelease();
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v10 = objc_msgSend(a1, sel_dequeueReusableCellWithIdentifier_forIndexPath_, v8, isa);

  v11 = swift_dynamicCastClass();
  if (v11)
  {
    v12 = (void *)v11;
    v10 = *(_QWORD **)(v1 + OBJC_IVAR____TtC5CAFUI37CAFUIDevicePickerDetailViewController_actions);
    if (IndexPath.row.getter() >= v10[2])
      return (uint64_t)v12;
    v13 = IndexPath.row.getter();
    if ((v13 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v13 < v10[2])
    {
      CAFUIDevicePickerDetailViewController.setup(cell:forAction:)(v12, *((_BYTE *)v10 + v13 + 32));
      return (uint64_t)v12;
    }
    __break(1u);
  }

  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void CAFUIDevicePickerDetailViewController.setup(cell:forAction:)(void *a1, char a2)
{
  char *v2;
  id v5;
  void *v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  char *v16;
  id v17;
  id v18;
  void *v19;
  unsigned __int8 v20;
  id v21;
  unsigned __int8 v22;
  BOOL v23;

  v5 = objc_msgSend(a1, sel_textLabel);
  if (v5)
  {
    v6 = v5;
    if (a2 == 2)
    {
      v7 = 0x800000023757F7F0;
      v8 = 0xD000000000000019;
    }
    else
    {
      if (a2 != 3)
      {
        v14 = 0;
        goto LABEL_8;
      }
      v7 = 0xEF5241435F534948;
      v8 = 0x545F544547524F46;
    }
    v9 = (void *)MEMORY[0x23B812F68](v8, v7);
    swift_bridgeObjectRelease();
    v10 = CAFUILocalizedStringForKey(v9);

    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v13 = v12;

    v14 = (void *)MEMORY[0x23B812F68](v11, v13);
    swift_bridgeObjectRelease();
LABEL_8:
    objc_msgSend(v6, sel_setText_, v14);

  }
  v15 = *(void **)&v2[OBJC_IVAR____TtC5CAFUI37CAFUIDevicePickerDetailViewController_carSession];
  if (!v15)
  {
LABEL_14:
    v23 = 1;
    goto LABEL_15;
  }
  v16 = v2;
  v17 = v15;
  v18 = objc_msgSend(v17, sel_limitUserInterfaces);
  if (!v18 || (v19 = v18, v20 = objc_msgSend(v18, sel_BOOLValue), v19, (v20 & 1) == 0))
  {

    goto LABEL_14;
  }
  v21 = objc_msgSend(v17, sel_configuration);
  v22 = objc_msgSend(v21, sel_limitableUserInterfaces);

  v23 = (v22 & 0x40) == 0;
LABEL_15:
  *((_BYTE *)a1 + OBJC_IVAR____TtC5CAFUI32CAFUIDevicePickerDetailTableCell_isEnabled) = v23;
  specialized CAFUIDevicePickerDetailViewController.updateTitleColor(cell:forAction:)(a1, a2);
}

void CAFUIDevicePickerDetailViewController.tableView(_:didUnhighlightRowAt:)(void *a1)
{
  uint64_t v1;
  Class isa;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  id v8;

  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v8 = objc_msgSend(a1, sel_cellForRowAtIndexPath_, isa);

  if (v8)
  {
    type metadata accessor for CAFUIDevicePickerDetailTableCell();
    v4 = swift_dynamicCastClass();
    if (!v4)
      goto LABEL_7;
    v5 = (void *)v4;
    v6 = *(_QWORD *)(v1 + OBJC_IVAR____TtC5CAFUI37CAFUIDevicePickerDetailViewController_actions);
    if (IndexPath.row.getter() >= *(_QWORD *)(v6 + 16))
      goto LABEL_7;
    v7 = IndexPath.row.getter();
    if ((v7 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v7 < *(_QWORD *)(v6 + 16))
    {
      specialized CAFUIDevicePickerDetailViewController.updateTitleColor(cell:forAction:)(v5, *(_BYTE *)(v6 + v7 + 32));
LABEL_7:

      return;
    }
    __break(1u);
  }
}

void CAFUIDevicePickerDetailViewController.tableView(_:didSelectRowAt:)(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  Class isa;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  id v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  id v39;
  uint64_t inited;
  unint64_t v41;
  id v42;
  id v43;
  id v44;
  Class v45;
  void *v46;
  uint64_t aBlock[6];

  v3 = v2;
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v7 = objc_msgSend(a1, sel_cellForRowAtIndexPath_, isa);

  if (!v7)
    goto LABEL_17;
  type metadata accessor for CAFUIDevicePickerDetailTableCell();
  v8 = swift_dynamicCastClass();
  if (!v8
    || (v9 = v8,
        v10 = *(_QWORD *)(v3 + OBJC_IVAR____TtC5CAFUI37CAFUIDevicePickerDetailViewController_actions),
        IndexPath.row.getter() >= *(_QWORD *)(v10 + 16)))
  {

LABEL_17:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  v11 = a2;
  v12 = IndexPath.row.getter();
  if ((v12 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (v12 >= *(_QWORD *)(v10 + 16))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v11 = *(unsigned __int8 *)(v10 + v12 + 32);
  if (one-time initialization token for default != -1)
LABEL_15:
    swift_once();
  v13 = static OS_os_log.default;
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    v46 = a1;
    v16 = swift_slowAlloc();
    aBlock[0] = v16;
    *(_DWORD *)v15 = 136315138;
    v17 = CAFDeviceAction.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_237505000, v13, v14, "Did select action: %s.", v15, 0xCu);
    swift_arrayDestroy();
    v19 = v16;
    a1 = v46;
    MEMORY[0x23B813C70](v19, -1, -1);
    MEMORY[0x23B813C70](v15, -1, -1);
  }
  if ((_DWORD)v11 == 3)
  {
    v20 = (void *)MEMORY[0x23B812F68](0x544547524F46, 0xE600000000000000);
    v21 = CAFUILocalizedStringForKey(v20);

    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v24 = v23;

    v25 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v26 = swift_allocObject();
    *(_QWORD *)(v26 + 16) = v25;
    *(_QWORD *)(v26 + 24) = v9;
    *(_BYTE *)(v26 + 32) = 3;
    swift_retain();
    v27 = v7;
    v28 = (void *)MEMORY[0x23B812F68](v22, v24);
    swift_bridgeObjectRelease();
    aBlock[4] = (uint64_t)partial apply for closure #1 in CAFUIDevicePickerDetailViewController.tableView(_:didSelectRowAt:);
    aBlock[5] = v26;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSTimer) -> ();
    aBlock[3] = (uint64_t)&block_descriptor_8;
    v29 = _Block_copy(aBlock);
    swift_release();
    v30 = (void *)objc_opt_self();
    v31 = v7;
    v32 = objc_msgSend(v30, sel_actionWithTitle_style_handler_, v28, 2, v29);
    _Block_release(v29);
    swift_release();

    v33 = (void *)MEMORY[0x23B812F68](0x4C45434E4143, 0xE600000000000000);
    v34 = CAFUILocalizedStringForKey(v33);

    v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v37 = v36;

    v38 = (void *)MEMORY[0x23B812F68](v35, v37);
    swift_bridgeObjectRelease();
    v39 = objc_msgSend(v30, sel_actionWithTitle_style_handler_, v38, 1, 0);

    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2375790C0;
    *(_QWORD *)(inited + 32) = v32;
    *(_QWORD *)(inited + 40) = v39;
    aBlock[0] = inited;
    specialized Array._endMutation()();
    v41 = aBlock[0];
    v42 = v32;
    v7 = v31;
    v43 = v42;
    v44 = v39;
    CAFUIDevicePickerDetailViewController.displayAlert(actions:)(v41);
    swift_bridgeObjectRelease();

  }
  else
  {
    specialized CAFUIDevicePickerDetailViewController.prepareRequest(for:action:)(v11);
  }
  v45 = IndexPath._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a1, sel_deselectRowAtIndexPath_animated_, v45, 1);

}

void closure #1 in CAFUIDevicePickerDetailViewController.tableView(_:didSelectRowAt:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v5 = a2 + 16;
  swift_beginAccess();
  v6 = MEMORY[0x23B813CDC](v5);
  if (v6)
  {
    v7 = (void *)v6;
    specialized CAFUIDevicePickerDetailViewController.prepareRequest(for:action:)(a4);

  }
}

void CAFUIDevicePickerDetailViewController.displayAlert(actions:)(unint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t i;
  id v5;
  void *v6;
  id v7;

  v7 = objc_msgSend((id)objc_opt_self(), sel_alertControllerWithTitle_message_preferredStyle_, 0, 0, 0);
  if (!(a1 >> 62))
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v3)
      goto LABEL_3;
LABEL_10:
    swift_bridgeObjectRelease();
    objc_msgSend(v1, sel_presentViewController_animated_completion_, v7, 1, 0);

    return;
  }
  swift_bridgeObjectRetain();
  v3 = _CocoaArrayWrapper.endIndex.getter();
  if (!v3)
    goto LABEL_10;
LABEL_3:
  if (v3 >= 1)
  {
    for (i = 0; i != v3; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v5 = (id)MEMORY[0x23B813418](i, a1);
      else
        v5 = *(id *)(a1 + 8 * i + 32);
      v6 = v5;
      objc_msgSend(v7, sel_addAction_, v5);

    }
    goto LABEL_10;
  }
  __break(1u);
}

uint64_t @objc CAFUIDevicePickerDetailViewController.tableView(_:didUnhighlightRowAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(id, char *))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  id v13;
  uint64_t v15;

  v8 = type metadata accessor for IndexPath();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  v12 = a3;
  v13 = a1;
  a5(v12, v11);

  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t type metadata accessor for CAFUIDevicePickerDetailViewController()
{
  return objc_opt_self();
}

void CAFUIDevicePickerDetailViewController.__allocating_init(style:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t CAFUIDevicePickerDetailTableCell.isCellEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC5CAFUI32CAFUIDevicePickerDetailTableCell_isEnabled);
}

void CAFUIDevicePickerDetailTableCell.__allocating_init(reuseIdentifier:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id CAFUIDevicePickerDetailTableCell.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFUIDevicePickerDetailTableCell();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for CAFUIDevicePickerDetailTableCell()
{
  return objc_opt_self();
}

char *specialized CAFUIDevicePickerController.presentDevicePickerLimitedUI(for:navigationController:)(void *a1, void *a2)
{
  return specialized CAFUIDevicePickerController.presentDevicePickerLimitedUI(for:navigationController:)(a1, a2, (uint64_t)&unk_2508D4FA0, (uint64_t)&unk_2508D4FC8, (uint64_t)closure #1 in CAFUIDevicePickerController.presentDevicePickerLimitedUI(for:navigationController:)partial apply, (uint64_t)closure #2 in CAFUIDevicePickerController.presentDevicePickerLimitedUI(for:navigationController:)partial apply);
}

char *specialized CAFUIDevicePickerController.presentDevicePickerLimitedUI(for:navigationController:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  char *v14;
  void *v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  Class isa;

  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a2;
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a2;
  v12 = objc_allocWithZone((Class)type metadata accessor for CAFUIDevicePickerLimitedUIView());
  v13 = a2;
  v14 = CAFUIDevicePickerLimitedUIView.init(presentedAction:dismissAction:)(a5, v10, a6, v11);
  objc_msgSend(a1, sel_addSubview_, v14);
  v15 = (void *)objc_opt_self();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_237579090;
  v17 = objc_msgSend(v14, sel_leadingAnchor);
  v18 = objc_msgSend(a1, sel_leadingAnchor);
  v19 = objc_msgSend(v17, sel_constraintEqualToAnchor_, v18);

  *(_QWORD *)(v16 + 32) = v19;
  v20 = objc_msgSend(v14, sel_trailingAnchor);
  v21 = objc_msgSend(a1, sel_trailingAnchor);
  v22 = objc_msgSend(v20, sel_constraintEqualToAnchor_, v21);

  *(_QWORD *)(v16 + 40) = v22;
  v23 = objc_msgSend(v14, sel_topAnchor);
  v24 = objc_msgSend(a1, sel_topAnchor);
  v25 = objc_msgSend(v23, sel_constraintEqualToAnchor_, v24);

  *(_QWORD *)(v16 + 48) = v25;
  v26 = objc_msgSend(v14, sel_bottomAnchor);
  v27 = objc_msgSend(a1, sel_bottomAnchor);
  v28 = objc_msgSend(v26, sel_constraintEqualToAnchor_, v27);

  *(_QWORD *)(v16 + 56) = v28;
  specialized Array._endMutation()();
  type metadata accessor for NSLayoutConstraint();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v15, sel_activateConstraints_, isa);

  return v14;
}

void specialized CAFUIDevicePickerDetailViewController.updateTitleColor(cell:forAction:)(void *a1, char a2)
{
  id v3;
  void *v4;
  void *v5;
  char **v6;
  id v7;

  v3 = objc_msgSend(a1, sel_textLabel);
  if (v3)
  {
    v4 = v3;
    v5 = (void *)objc_opt_self();
    v6 = &selRef_systemRedColor;
    if (a2 != 3)
      v6 = &selRef__carSystemFocusColor;
    v7 = objc_msgSend(v5, *v6);
    objc_msgSend(v4, sel_setTextColor_, v7);

  }
}

void specialized CAFUIDevicePickerDetailViewController.prepareRequest(for:action:)(uint64_t a1)
{
  char *v1;
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t ObjectType;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;

  v3 = *(void **)&v1[OBJC_IVAR____TtC5CAFUI37CAFUIDevicePickerDetailViewController_device];
  v4 = objc_msgSend(v3, sel_identifier);
  if (v4)
  {
    v5 = v4;
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v8 = v7;

    v9 = HIBYTE(v8) & 0xF;
    if ((v8 & 0x2000000000000000) == 0)
      v9 = v6 & 0xFFFFFFFFFFFFLL;
    if (v9)
    {
      objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC5CAFUI24CAFUITableViewController_tableView], sel_setUserInteractionEnabled_, 0);
      v10 = &v1[OBJC_IVAR____TtC5CAFUI37CAFUIDevicePickerDetailViewController_delegate];
      if (MEMORY[0x23B813CDC](&v1[OBJC_IVAR____TtC5CAFUI37CAFUIDevicePickerDetailViewController_delegate]))
      {
        v11 = *((_QWORD *)v10 + 1);
        ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v11 + 8))(a1, v6, v8, ObjectType, v11);
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      return;
    }
    swift_bridgeObjectRelease();
  }
  if (one-time initialization token for default != -1)
    swift_once();
  v13 = static OS_os_log.default;
  v22 = v1;
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    v16 = swift_slowAlloc();
    v23 = v16;
    *(_DWORD *)v15 = 136315138;
    v17 = objc_msgSend(v3, sel_identifier);
    if (v17)
    {
      v18 = v17;
      v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v21 = v20;

    }
    else
    {
      v21 = 0xE300000000000000;
      v19 = 7104878;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_237505000, v13, v14, "Unable to perform request, missing deviceIdentifier: %s.", v15, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B813C70](v16, -1, -1);
    MEMORY[0x23B813C70](v15, -1, -1);
  }
  else
  {

  }
}

uint64_t sub_237575E50()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_237575E74()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #1 in CAFUIDevicePickerDetailViewController.tableView(_:didSelectRowAt:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in CAFUIDevicePickerDetailViewController.tableView(_:didSelectRowAt:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(unsigned __int8 *)(v1 + 32));
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_8()
{
  return swift_release();
}

id partial apply for closure #1 in CAFUIDevicePickerController.presentDevicePickerLimitedUI(for:navigationController:)()
{
  uint64_t v0;

  return closure #1 in CAFUIDevicePickerController.presentDevicePickerLimitedUI(for:navigationController:)(*(void **)(v0 + 16));
}

id partial apply for closure #2 in CAFUIDevicePickerController.presentDevicePickerLimitedUI(for:navigationController:)()
{
  uint64_t v0;

  return closure #2 in CAFUIDevicePickerController.presentDevicePickerLimitedUI(for:navigationController:)(*(void **)(v0 + 16));
}

void partial apply for closure #1 in CAFUIDevicePickerDetailViewController.init(device:pairedDevices:actions:carSession:delegate:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in CAFUIDevicePickerDetailViewController.init(device:pairedDevices:actions:carSession:delegate:)(a1, v1);
}

uint64_t sub_237575EDC()
{
  uint64_t v0;

  return swift_deallocObject();
}

Swift::String __swiftcall CAFUILocalizedValues(for:selectedValues:)(Swift::OpaquePointer a1, Swift::OpaquePointer selectedValues)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  Swift::String result;

  v2 = *((_QWORD *)a1._rawValue + 2);
  if (!v2)
    goto LABEL_6;
  v3 = *((_QWORD *)selectedValues._rawValue + 2);
  if (!v3)
    goto LABEL_6;
  if (v3 != 1)
  {
    v11 = (void *)MEMORY[0x23B812F68](0xD000000000000015, 0x800000023757C9E0);
    v12 = CAFUILocalizedStringForKey(v11);

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_237579480;
    v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v16 = v15;
    *(_QWORD *)(v13 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v13 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v13 + 32) = v14;
    *(_QWORD *)(v13 + 40) = v16;
    v6 = String.init(format:_:)();
    v7 = v17;
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  v4 = *((_QWORD *)selectedValues._rawValue + 4);
  if (v4 < v2)
  {
    v5 = (char *)a1._rawValue + 16 * v4;
    v6 = *((_QWORD *)v5 + 4);
    v7 = (void *)*((_QWORD *)v5 + 5);
    swift_bridgeObjectRetain();
  }
  else
  {
LABEL_6:
    v8 = (void *)MEMORY[0x23B812F68](0x44455443454C4553, 0xED0000454E4F4E5FLL);
    v9 = CAFUILocalizedStringForKey(v8);

    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v7 = v10;

  }
LABEL_8:
  v18 = v6;
  v19 = v7;
  result._object = v19;
  result._countAndFlagsBits = v18;
  return result;
}

id CAFSeatHeatingCooling.isHeating.getter()
{
  void *v0;
  id result;

  if (!objc_msgSend(v0, sel_hasOn))
    return (id)((int)objc_msgSend(v0, sel_heatingCoolingLevel) > 0);
  result = objc_msgSend(v0, sel_on);
  if ((_DWORD)result)
    return (id)((int)objc_msgSend(v0, sel_heatingCoolingLevel) > 0);
  return result;
}

id CAFSeatHeatingCooling.isCooling.getter()
{
  void *v0;
  id result;

  if (!objc_msgSend(v0, sel_hasOn))
    return (id)(objc_msgSend(v0, sel_heatingCoolingLevel) >> 31);
  result = objc_msgSend(v0, sel_on);
  if ((_DWORD)result)
    return (id)(objc_msgSend(v0, sel_heatingCoolingLevel) >> 31);
  return result;
}

id CAFSeatFan.isVenting.getter()
{
  void *v0;
  id result;

  if (!objc_msgSend(v0, sel_hasOn))
    return (id)(objc_msgSend(v0, sel_fanLevel) != 0);
  result = objc_msgSend(v0, sel_on);
  if ((_DWORD)result)
    return (id)(objc_msgSend(v0, sel_fanLevel) != 0);
  return result;
}

uint64_t ResourceBundleClass.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return objc_opt_self();
}

void CAFUIStatusLogForCategory_cold_1()
{
  __assert_rtn("CAFUIStatusLogForCategory", "CAFUIStatusViewController.m", 23, "category < CAFUIStatusLoggingCategoryCount");
}

uint64_t CAFObserved<>.observable.getter()
{
  return MEMORY[0x24BE0FFE8]();
}

uint64_t dispatch thunk of CAFEqualizerObservable.value.getter()
{
  return MEMORY[0x24BE10000]();
}

uint64_t dispatch thunk of CAFEqualizerObservable.value.setter()
{
  return MEMORY[0x24BE10010]();
}

uint64_t dispatch thunk of CAFEqualizerObservable.$value.getter()
{
  return MEMORY[0x24BE10018]();
}

uint64_t CAFEqualizerObservable.observed.getter()
{
  return MEMORY[0x24BE10030]();
}

uint64_t type metadata accessor for CAFEqualizerObservable()
{
  return MEMORY[0x24BE10038]();
}

uint64_t dispatch thunk of CAFSoundDistributionObservable.fade.modify()
{
  return MEMORY[0x24BE10070]();
}

uint64_t dispatch thunk of CAFSoundDistributionObservable.fade.getter()
{
  return MEMORY[0x24BE10078]();
}

uint64_t dispatch thunk of CAFSoundDistributionObservable.fade.setter()
{
  return MEMORY[0x24BE10080]();
}

uint64_t dispatch thunk of CAFSoundDistributionObservable.$fade.getter()
{
  return MEMORY[0x24BE10088]();
}

uint64_t dispatch thunk of CAFSoundDistributionObservable.balance.modify()
{
  return MEMORY[0x24BE10098]();
}

uint64_t dispatch thunk of CAFSoundDistributionObservable.balance.getter()
{
  return MEMORY[0x24BE100A0]();
}

uint64_t dispatch thunk of CAFSoundDistributionObservable.balance.setter()
{
  return MEMORY[0x24BE100A8]();
}

uint64_t dispatch thunk of CAFSoundDistributionObservable.$balance.getter()
{
  return MEMORY[0x24BE100B0]();
}

uint64_t CAFSoundDistributionObservable.observed.getter()
{
  return MEMORY[0x24BE100B8]();
}

uint64_t type metadata accessor for CAFSoundDistributionObservable()
{
  return MEMORY[0x24BE100C0]();
}

uint64_t static CharacterSet.whitespaces.getter()
{
  return MEMORY[0x24BDCB620]();
}

uint64_t type metadata accessor for CharacterSet()
{
  return MEMORY[0x24BDCB750]();
}

uint64_t static Notification._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCB8E8]();
}

uint64_t type metadata accessor for Notification()
{
  return MEMORY[0x24BDCB930]();
}

uint64_t URLQueryItem.name.getter()
{
  return MEMORY[0x24BDCB960]();
}

uint64_t URLQueryItem.value.getter()
{
  return MEMORY[0x24BDCB980]();
}

uint64_t type metadata accessor for URLQueryItem()
{
  return MEMORY[0x24BDCB988]();
}

uint64_t URLComponents.queryItems.getter()
{
  return MEMORY[0x24BDCBA58]();
}

uint64_t URLComponents.init(url:resolvingAgainstBaseURL:)()
{
  return MEMORY[0x24BDCBAB0]();
}

uint64_t type metadata accessor for URLComponents()
{
  return MEMORY[0x24BDCBB78]();
}

uint64_t AttributeScopes.UIKitAttributes.font.getter()
{
  return MEMORY[0x24BEBBE48]();
}

uint64_t AttributeContainer.subscript.setter()
{
  return MEMORY[0x24BDCC848]();
}

uint64_t type metadata accessor for AttributeContainer()
{
  return MEMORY[0x24BDCC898]();
}

uint64_t AttributeDynamicLookup.subscript.getter()
{
  return MEMORY[0x24BEBBE70]();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
  MEMORY[0x24BDCD8D0](retstr);
}

Swift::String __swiftcall URL.path(percentEncoded:)(Swift::Bool percentEncoded)
{
  uint64_t v1;
  void *v2;
  Swift::String result;

  v1 = MEMORY[0x24BDCD9E8](percentEncoded);
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

uint64_t URL.scheme.getter()
{
  return MEMORY[0x24BDCDA48]();
}

uint64_t URL.init(string:)()
{
  return MEMORY[0x24BDCDA68]();
}

uint64_t type metadata accessor for URL()
{
  return MEMORY[0x24BDCDAC0]();
}

uint64_t Data.init(contentsOf:options:)()
{
  return MEMORY[0x24BDCDB78]();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)MEMORY[0x24BDCDCA0]();
}

uint64_t UUID.uuidString.getter()
{
  return MEMORY[0x24BDCE9B0]();
}

uint64_t static UUID._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCE9F8]();
}

uint64_t UUID.init()()
{
  return MEMORY[0x24BDCEA40]();
}

uint64_t type metadata accessor for UUID()
{
  return MEMORY[0x24BDCEA58]();
}

void __swiftcall IndexSet._bridgeToObjectiveC()(NSIndexSet *__return_ptr retstr)
{
  MEMORY[0x24BDCF368](retstr);
}

uint64_t type metadata accessor for IndexSet()
{
  return MEMORY[0x24BDCF428]();
}

NSIndexPath __swiftcall IndexPath._bridgeToObjectiveC()()
{
  return (NSIndexPath)MEMORY[0x24BDCF638]();
}

uint64_t static IndexPath._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCF650]();
}

uint64_t IndexPath.row.getter()
{
  return MEMORY[0x24BEBBE88]();
}

uint64_t IndexPath.init(item:section:)()
{
  return MEMORY[0x24BEBBE90]();
}

uint64_t IndexPath.item.getter()
{
  return MEMORY[0x24BEBBEA0]();
}

uint64_t IndexPath.section.getter()
{
  return MEMORY[0x24BEBBEB8]();
}

uint64_t type metadata accessor for IndexPath()
{
  return MEMORY[0x24BDCF678]();
}

uint64_t type metadata accessor for CAUResource()
{
  return MEMORY[0x24BE15100]();
}

uint64_t dispatch thunk of CAUAssetLibrary.path(for:)()
{
  return MEMORY[0x24BE15110]();
}

uint64_t dispatch thunk of CAUAssetLibraryManager.assetLibrary.getter()
{
  return MEMORY[0x24BE15168]();
}

uint64_t dispatch thunk of CAUAssetLibraryManager.$assetLibrary.getter()
{
  return MEMORY[0x24BE15170]();
}

uint64_t CAUAssetLibraryManager.init()()
{
  return MEMORY[0x24BE15178]();
}

uint64_t type metadata accessor for CAUAssetLibraryManager()
{
  return MEMORY[0x24BE15180]();
}

uint64_t type metadata accessor for CAUError()
{
  return MEMORY[0x24BE15198]();
}

uint64_t static CAULogger.error(_:function:file:line:)()
{
  return MEMORY[0x24BE151A8]();
}

uint64_t os_log(_:dso:log:_:_:)()
{
  return MEMORY[0x24BEE76F0]();
}

uint64_t static UICellAccessory.customView(configuration:)()
{
  return MEMORY[0x24BEBC030]();
}

uint64_t type metadata accessor for UICellAccessory.DisplayedState()
{
  return MEMORY[0x24BEBC060]();
}

uint64_t type metadata accessor for UICellAccessory.LayoutDimension()
{
  return MEMORY[0x24BEBC088]();
}

uint64_t UICellAccessory.CustomViewConfiguration.init(customView:placement:isHidden:reservedLayoutWidth:tintColor:maintainsFixedSize:)()
{
  return MEMORY[0x24BEBC0A0]();
}

uint64_t type metadata accessor for UICellAccessory.CustomViewConfiguration()
{
  return MEMORY[0x24BEBC0A8]();
}

uint64_t type metadata accessor for UICellAccessory.Placement()
{
  return MEMORY[0x24BEBC0D8]();
}

uint64_t type metadata accessor for UICellAccessory()
{
  return MEMORY[0x24BEBC0E0]();
}

uint64_t UICellConfigurationState.isSelected.getter()
{
  return MEMORY[0x24BEBC328]();
}

uint64_t UICellConfigurationState.isHighlighted.getter()
{
  return MEMORY[0x24BEBC338]();
}

uint64_t static UICellConfigurationState._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BEBC348]();
}

uint64_t type metadata accessor for UICellConfigurationState()
{
  return MEMORY[0x24BEBC360]();
}

uint64_t UIBackgroundConfiguration.backgroundColor.setter()
{
  return MEMORY[0x24BEBC3C0]();
}

uint64_t UIBackgroundConfiguration.updated(for:)()
{
  return MEMORY[0x24BEBC3F8]();
}

uint64_t type metadata accessor for UIBackgroundConfiguration()
{
  return MEMORY[0x24BEBC408]();
}

uint64_t type metadata accessor for UITraitUserInterfaceStyle()
{
  return MEMORY[0x24BEBC430]();
}

uint64_t static UIListContentConfiguration.subtitleCell()()
{
  return MEMORY[0x24BEBC458]();
}

uint64_t UIListContentConfiguration.secondaryText.getter()
{
  return MEMORY[0x24BEBC470]();
}

uint64_t UIListContentConfiguration.secondaryText.setter()
{
  return MEMORY[0x24BEBC478]();
}

uint64_t UIListContentConfiguration.TextProperties.font.setter()
{
  return MEMORY[0x24BEBC4D0]();
}

uint64_t UIListContentConfiguration.TextProperties.color.getter()
{
  return MEMORY[0x24BEBC4D8]();
}

uint64_t UIListContentConfiguration.TextProperties.color.setter()
{
  return MEMORY[0x24BEBC4E0]();
}

uint64_t type metadata accessor for UIListContentConfiguration.TextProperties()
{
  return MEMORY[0x24BEBC4F0]();
}

uint64_t UIListContentConfiguration.attributedText.getter()
{
  return MEMORY[0x24BEBC4F8]();
}

uint64_t UIListContentConfiguration.attributedText.setter()
{
  return MEMORY[0x24BEBC500]();
}

uint64_t UIListContentConfiguration.textProperties.modify()
{
  return MEMORY[0x24BEBC508]();
}

uint64_t UIListContentConfiguration.textProperties.getter()
{
  return MEMORY[0x24BEBC510]();
}

uint64_t static UIListContentConfiguration.ImageProperties.standardDimension.getter()
{
  return MEMORY[0x24BEBC528]();
}

uint64_t UIListContentConfiguration.ImageProperties.reservedLayoutSize.setter()
{
  return MEMORY[0x24BEBC530]();
}

uint64_t UIListContentConfiguration.ImageProperties.tintColor.setter()
{
  return MEMORY[0x24BEBC538]();
}

uint64_t UIListContentConfiguration.imageProperties.modify()
{
  return MEMORY[0x24BEBC540]();
}

uint64_t UIListContentConfiguration.imageToTextPadding.setter()
{
  return MEMORY[0x24BEBC548]();
}

uint64_t UIListContentConfiguration.secondaryAttributedText.getter()
{
  return MEMORY[0x24BEBC550]();
}

uint64_t UIListContentConfiguration.secondaryTextProperties.modify()
{
  return MEMORY[0x24BEBC560]();
}

uint64_t UIListContentConfiguration.secondaryTextProperties.getter()
{
  return MEMORY[0x24BEBC568]();
}

uint64_t UIListContentConfiguration.text.getter()
{
  return MEMORY[0x24BEBC5B8]();
}

uint64_t UIListContentConfiguration.text.setter()
{
  return MEMORY[0x24BEBC5C0]();
}

uint64_t UIListContentConfiguration.image.getter()
{
  return MEMORY[0x24BEBC5C8]();
}

uint64_t UIListContentConfiguration.image.setter()
{
  return MEMORY[0x24BEBC5D0]();
}

uint64_t UIListContentConfiguration.updated(for:)()
{
  return MEMORY[0x24BEBC5E0]();
}

uint64_t static UIListContentConfiguration.valueCell()()
{
  return MEMORY[0x24BEBC5E8]();
}

uint64_t type metadata accessor for UIListContentConfiguration()
{
  return MEMORY[0x24BEBC5F8]();
}

uint64_t type metadata accessor for UICollectionLayoutListConfiguration.Appearance()
{
  return MEMORY[0x24BEBCAA0]();
}

uint64_t type metadata accessor for UICollectionLayoutListConfiguration.FooterMode()
{
  return MEMORY[0x24BEBCAC0]();
}

uint64_t type metadata accessor for UICollectionLayoutListConfiguration.HeaderMode()
{
  return MEMORY[0x24BEBCAD8]();
}

uint64_t UICollectionLayoutListConfiguration.init(appearance:)()
{
  return MEMORY[0x24BEBCAE0]();
}

uint64_t UICollectionLayoutListConfiguration.footerMode.setter()
{
  return MEMORY[0x24BEBCAE8]();
}

uint64_t UICollectionLayoutListConfiguration.headerMode.setter()
{
  return MEMORY[0x24BEBCAF0]();
}

uint64_t UICollectionLayoutListConfiguration.backgroundColor.setter()
{
  return MEMORY[0x24BEBCAF8]();
}

uint64_t type metadata accessor for UICollectionLayoutListConfiguration()
{
  return MEMORY[0x24BEBCB10]();
}

uint64_t type metadata accessor for UIConfigurationTextAttributesTransformer()
{
  return MEMORY[0x24BEBCB48]();
}

uint64_t UIConfigurationTextAttributesTransformer.init(_:)()
{
  return MEMORY[0x24BEBCB58]();
}

uint64_t Publishers.MergeMany.init<A>(_:)()
{
  return MEMORY[0x24BDB99C8]();
}

uint64_t AnyCancellable.store(in:)()
{
  return MEMORY[0x24BDB9B40]();
}

uint64_t type metadata accessor for AnyCancellable()
{
  return MEMORY[0x24BDB9B60]();
}

uint64_t ObservableObject<>.objectWillChange.getter()
{
  return MEMORY[0x24BDB9C48]();
}

uint64_t Published.init(initialValue:)()
{
  return MEMORY[0x24BDB9E98]();
}

uint64_t static Published.subscript.getter()
{
  return MEMORY[0x24BDB9EC8]();
}

uint64_t static Published.subscript.setter()
{
  return MEMORY[0x24BDB9ED0]();
}

uint64_t type metadata accessor for Published()
{
  return MEMORY[0x24BDB9EF0]();
}

uint64_t Publisher.receive<A>(on:options:)()
{
  return MEMORY[0x24BDBA090]();
}

uint64_t Publisher<>.removeDuplicates()()
{
  return MEMORY[0x24BDBA0E8]();
}

uint64_t Publisher<>.sink(receiveValue:)()
{
  return MEMORY[0x24BDBA110]();
}

uint64_t Animatable<>.animatableData.modify()
{
  return MEMORY[0x24BDEAE98]();
}

uint64_t static Animatable<>._makeAnimatable(value:inputs:)()
{
  return MEMORY[0x24BDEAEB0]();
}

uint64_t EdgeInsets.init(_all:)()
{
  return MEMORY[0x24BDEB040]();
}

uint64_t static ColorScheme.== infix(_:_:)()
{
  return MEMORY[0x24BDEB3E0]();
}

uint64_t type metadata accessor for ColorScheme()
{
  return MEMORY[0x24BDEB418]();
}

uint64_t DragGesture.init<A>(minimumDistance:coordinateSpace:)()
{
  return MEMORY[0x24BDEB4C0]();
}

uint64_t DragGesture.Value.location.getter()
{
  return MEMORY[0x24BDEB4F8]();
}

uint64_t type metadata accessor for DragGesture()
{
  return MEMORY[0x24BDEB540]();
}

uint64_t type metadata accessor for Environment.Content()
{
  return MEMORY[0x24BDEB560]();
}

uint64_t static GestureMask.all.getter()
{
  return MEMORY[0x24BDEB5B8]();
}

uint64_t StateObject.wrappedValue.getter()
{
  return MEMORY[0x24BDEB790]();
}

uint64_t StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)()
{
  return MEMORY[0x24BDEB7B8]();
}

uint64_t static ViewModifier._makeView(modifier:inputs:body:)()
{
  return MEMORY[0x24BDEBDE0]();
}

uint64_t static ViewModifier._makeViewList(modifier:inputs:body:)()
{
  return MEMORY[0x24BDEBDF0]();
}

uint64_t static ViewModifier._viewListCount(inputs:body:)()
{
  return MEMORY[0x24BDEBE00]();
}

uint64_t _FrameLayout.init(width:height:alignment:)()
{
  return MEMORY[0x24BDEBED0]();
}

uint64_t GeometryProxy.frame<A>(in:)()
{
  return MEMORY[0x24BDEC138]();
}

uint64_t ObservedObject.init(wrappedValue:)()
{
  return MEMORY[0x24BDEC998]();
}

uint64_t ObservedObject.projectedValue.getter()
{
  return MEMORY[0x24BDEC9A0]();
}

uint64_t ObservedObject.Wrapper.subscript.getter()
{
  return MEMORY[0x24BDEC9B0]();
}

uint64_t PlainButtonStyle.init()()
{
  return MEMORY[0x24BDED860]();
}

uint64_t type metadata accessor for PlainButtonStyle()
{
  return MEMORY[0x24BDED868]();
}

uint64_t type metadata accessor for _BlendModeEffect()
{
  return MEMORY[0x24BDEDB60]();
}

uint64_t EnvironmentValues.colorScheme.getter()
{
  return MEMORY[0x24BDEDEE8]();
}

uint64_t EnvironmentValues.colorScheme.setter()
{
  return MEMORY[0x24BDEDEF8]();
}

uint64_t EnvironmentValues.foregroundColor.getter()
{
  return MEMORY[0x24BDEE038]();
}

uint64_t EnvironmentValues.foregroundColor.setter()
{
  return MEMORY[0x24BDEE048]();
}

uint64_t EnvironmentValues.font.getter()
{
  return MEMORY[0x24BDEE390]();
}

uint64_t EnvironmentValues.font.setter()
{
  return MEMORY[0x24BDEE3A0]();
}

uint64_t EnvironmentValues.lineLimit.getter()
{
  return MEMORY[0x24BDEE490]();
}

uint64_t EnvironmentValues.lineLimit.setter()
{
  return MEMORY[0x24BDEE4A0]();
}

uint64_t EnvironmentValues.init()()
{
  return MEMORY[0x24BDEE4E0]();
}

uint64_t type metadata accessor for EnvironmentValues()
{
  return MEMORY[0x24BDEE4F8]();
}

uint64_t static VerticalAlignment.center.getter()
{
  return MEMORY[0x24BDEE730]();
}

uint64_t LocalizedStringKey.init(stringLiteral:)()
{
  return MEMORY[0x24BDEEA50]();
}

uint64_t static HorizontalAlignment.center.getter()
{
  return MEMORY[0x24BDEEF60]();
}

uint64_t UIHostingController.init(rootView:)()
{
  return MEMORY[0x24BDEF1D0]();
}

uint64_t UIViewRepresentable._resetUIView(_:coordinator:destroy:)()
{
  return MEMORY[0x24BDEF228]();
}

uint64_t static UIViewRepresentable.dismantleUIView(_:coordinator:)()
{
  return MEMORY[0x24BDEF238]();
}

uint64_t UIViewRepresentable.sizeThatFits(_:uiView:context:)()
{
  return MEMORY[0x24BDEF248]();
}

uint64_t static UIViewRepresentable._makeViewList(view:inputs:)()
{
  return MEMORY[0x24BDEF260]();
}

uint64_t static UIViewRepresentable._layoutOptions(_:)()
{
  return MEMORY[0x24BDEF270]();
}

uint64_t UIViewRepresentable._identifiedViewTree(in:)()
{
  return MEMORY[0x24BDEF278]();
}

uint64_t UIViewRepresentable._overrideLayoutTraits(_:for:)()
{
  return MEMORY[0x24BDEF288]();
}

uint64_t UIViewRepresentable._overrideSizeThatFits(_:in:uiView:)()
{
  return MEMORY[0x24BDEF298]();
}

uint64_t static UIViewRepresentable._modifyBridgedViewInputs(_:)()
{
  return MEMORY[0x24BDEF2A8]();
}

uint64_t UIViewRepresentable.body.getter()
{
  return MEMORY[0x24BDEF2C0]();
}

uint64_t static UIViewRepresentable._makeView(view:inputs:)()
{
  return MEMORY[0x24BDEF2C8]();
}

uint64_t _ConditionalContent<>.init(storage:)()
{
  return MEMORY[0x24BDEF3A0]();
}

uint64_t static ButtonRepeatBehavior.enabled.getter()
{
  return MEMORY[0x24BDEF460]();
}

uint64_t type metadata accessor for ButtonRepeatBehavior()
{
  return MEMORY[0x24BDEF470]();
}

uint64_t type metadata accessor for LocalCoordinateSpace()
{
  return MEMORY[0x24BDEF540]();
}

uint64_t static HierarchicalShapeStyle.tertiary.getter()
{
  return MEMORY[0x24BDEFCB8]();
}

uint64_t static CoordinateSpaceProtocol<>.local.getter()
{
  return MEMORY[0x24BDF0138]();
}

uint64_t UIViewRepresentableContext.coordinator.getter()
{
  return MEMORY[0x24BDF0AF0]();
}

uint64_t static Log.runtimeIssuesLog.getter()
{
  return MEMORY[0x24BDF1430]();
}

uint64_t static Edge.Set.all.getter()
{
  return MEMORY[0x24BDF14A8]();
}

uint64_t static Edge.Set.bottom.getter()
{
  return MEMORY[0x24BDF14C8]();
}

uint64_t Font.init(_:)()
{
  return MEMORY[0x24BDF1950]();
}

uint64_t Path.addPath(_:transform:)()
{
  return MEMORY[0x24BDF1A80]();
}

uint64_t Path.init(_:)()
{
  return MEMORY[0x24BDF1BC8]();
}

uint64_t Text.foregroundColor(_:)()
{
  return MEMORY[0x24BDF1D08]();
}

uint64_t Text.font(_:)()
{
  return MEMORY[0x24BDF1DC8]();
}

uint64_t Text.init(_:tableName:bundle:comment:)()
{
  return MEMORY[0x24BDF1FC0]();
}

uint64_t Text.init<A>(_:)()
{
  return MEMORY[0x24BDF1FF0]();
}

uint64_t static View._makeView(view:inputs:)()
{
  return MEMORY[0x24BDF2088]();
}

uint64_t static View._makeViewList(view:inputs:)()
{
  return MEMORY[0x24BDF20A0]();
}

uint64_t View.buttonStyle<A>(_:)()
{
  return MEMORY[0x24BDF22B0]();
}

uint64_t static View._viewListCount(inputs:)()
{
  return MEMORY[0x24BDF2698]();
}

uint64_t View.simultaneousGesture<A>(_:including:)()
{
  return MEMORY[0x24BDF2E80]();
}

uint64_t View.buttonRepeatBehavior(_:)()
{
  return MEMORY[0x24BDF2F60]();
}

uint64_t View.accessibilityIdentifier(_:)()
{
  return MEMORY[0x24BDF3178]();
}

uint64_t type metadata accessor for Color.RGBColorSpace()
{
  return MEMORY[0x24BDF3C40]();
}

uint64_t static Color.clear.getter()
{
  return MEMORY[0x24BDF3D10]();
}

uint64_t static Color.white.getter()
{
  return MEMORY[0x24BDF3D30]();
}

uint64_t static Color.primary.getter()
{
  return MEMORY[0x24BDF3D88]();
}

uint64_t Color.init(_:red:green:blue:opacity:)()
{
  return MEMORY[0x24BDF3E70]();
}

uint64_t Color.init(_:)()
{
  return MEMORY[0x24BDF3EB0]();
}

uint64_t Image.init(uiImage:)()
{
  return MEMORY[0x24BDF3F58]();
}

uint64_t Image.init(systemName:)()
{
  return MEMORY[0x24BDF3F80]();
}

uint64_t type metadata accessor for Image.ResizingMode()
{
  return MEMORY[0x24BDF3FE8]();
}

uint64_t Image.init(_internalSystemName:)()
{
  return MEMORY[0x24BDF4048]();
}

uint64_t Image.resizable(capInsets:resizingMode:)()
{
  return MEMORY[0x24BDF40D8]();
}

uint64_t Image.init(_:bundle:)()
{
  return MEMORY[0x24BDF4130]();
}

uint64_t Shape.sizeThatFits(_:)()
{
  return MEMORY[0x24BDF4208]();
}

uint64_t static Shape._makeViewList(view:inputs:)()
{
  return MEMORY[0x24BDF4218]();
}

uint64_t Shape.layoutDirectionBehavior.getter()
{
  return MEMORY[0x24BDF4230]();
}

uint64_t Shape.body.getter()
{
  return MEMORY[0x24BDF4238]();
}

uint64_t static Shape.role.getter()
{
  return MEMORY[0x24BDF4248]();
}

uint64_t static Shape._makeView(view:inputs:)()
{
  return MEMORY[0x24BDF4278]();
}

uint64_t Button.init(action:label:)()
{
  return MEMORY[0x24BDF4340]();
}

uint64_t AnyView.init<A>(_:)()
{
  return MEMORY[0x24BDF4790]();
}

uint64_t Binding.wrappedValue.getter()
{
  return MEMORY[0x24BDF47B0]();
}

uint64_t Binding.wrappedValue.setter()
{
  return MEMORY[0x24BDF47B8]();
}

uint64_t Binding.projectedValue.getter()
{
  return MEMORY[0x24BDF47E0]();
}

uint64_t Binding.init(get:set:)()
{
  return MEMORY[0x24BDF47F8]();
}

uint64_t ForEach<>.init(_:content:)()
{
  return MEMORY[0x24BDF49B8]();
}

uint64_t Gesture.onEnded(_:)()
{
  return MEMORY[0x24BDF4A28]();
}

uint64_t Gesture<>.onChanged(_:)()
{
  return MEMORY[0x24BDF4A40]();
}

uint64_t static Alignment.center.getter()
{
  return MEMORY[0x24BDF4F18]();
}

uint64_t type metadata accessor for BlendMode()
{
  return MEMORY[0x24BDF5118]();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return MEMORY[0x24BEE5458]();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return MEMORY[0x24BEE54C8]();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return MEMORY[0x24BEE5500]();
}

uint64_t static DispatchTime.now()()
{
  return MEMORY[0x24BEE5570]();
}

uint64_t type metadata accessor for DispatchTime()
{
  return MEMORY[0x24BEE5590]();
}

uint64_t + infix(_:_:)()
{
  return MEMORY[0x24BEE5628]();
}

uint64_t dispatch thunk of BinaryFloatingPoint.init<A>(exactly:)()
{
  return MEMORY[0x24BEE0200]();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)MEMORY[0x24BDCF808]();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCF830]();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return MEMORY[0x24BEE0610]();
}

uint64_t dispatch thunk of Hashable.hashValue.getter()
{
  return MEMORY[0x24BEE0620]();
}

Swift::String __swiftcall Character.lowercased()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = MEMORY[0x24BEE0680]();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t Character._isLowercased.getter()
{
  return MEMORY[0x24BEE06A8]();
}

uint64_t Character._isUppercased.getter()
{
  return MEMORY[0x24BEE06B0]();
}

uint64_t Character._isSingleScalar.getter()
{
  return MEMORY[0x24BEE06C8]();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return MEMORY[0x24BEE07D0]();
}

uint64_t static Comparable.> infix(_:_:)()
{
  return MEMORY[0x24BEE07F8]();
}

uint64_t static Comparable.>= infix(_:_:)()
{
  return MEMORY[0x24BEE0800]();
}

uint64_t static Comparable.<= infix(_:_:)()
{
  return MEMORY[0x24BEE0808]();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return MEMORY[0x24BEE0980]();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)MEMORY[0x24BDCF9E0]();
}

uint64_t static String._forceBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x24BDCFA08]();
}

uint64_t static String._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x24BDCFA18]();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCFA28]();
}

uint64_t String.init(format:_:)()
{
  return MEMORY[0x24BDCFA78]();
}

Swift::String __swiftcall String.lowercased()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = MEMORY[0x24BEE0A08]();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

Swift::String __swiftcall String.uppercased()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = MEMORY[0x24BEE0A20]();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t String.hash(into:)()
{
  return MEMORY[0x24BEE0B20]();
}

uint64_t String.count.getter()
{
  return MEMORY[0x24BEE0B68]();
}

uint64_t String.index(after:)()
{
  return MEMORY[0x24BEE0B70]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
  MEMORY[0x24BEE0BC0](a1._countAndFlagsBits, a1._object);
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return MEMORY[0x24BEE0C10]();
}

uint64_t String.UTF8View._foreignIndex(_:offsetBy:)()
{
  return MEMORY[0x24BEE0C30]();
}

uint64_t String.UTF16View.index(_:offsetBy:)()
{
  return MEMORY[0x24BEE0CA0]();
}

uint64_t String.subscript.getter()
{
  return MEMORY[0x24BEE0D98]();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x24BEE1110]();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)MEMORY[0x24BDCFBA8]();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCFBC8]();
}

uint64_t Array.description.getter()
{
  return MEMORY[0x24BEE1120]();
}

uint64_t specialized Array._endMutation()()
{
  return MEMORY[0x24BEE1128]();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x24BEE1160]();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return MEMORY[0x24BEE1190]();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x24BEE11B8]();
}

uint64_t Double._roundSlowPath(_:)()
{
  return MEMORY[0x24BEE1380]();
}

uint64_t Double.write<A>(to:)()
{
  return MEMORY[0x24BEE13A8]();
}

uint64_t static Set._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCFCE8]();
}

uint64_t Set.init(minimumCapacity:)()
{
  return MEMORY[0x24BEE15D8]();
}

uint64_t Set.Iterator.init(_cocoa:)()
{
  return MEMORY[0x24BEE1678]();
}

uint64_t UITableViewHeaderFooterView.contentConfiguration.setter()
{
  return MEMORY[0x24BEBCB80]();
}

uint64_t UITableViewHeaderFooterView.defaultContentConfiguration()()
{
  return MEMORY[0x24BEBCB88]();
}

uint64_t static os_log_type_t.info.getter()
{
  return MEMORY[0x24BEE78F0]();
}

uint64_t static os_log_type_t.debug.getter()
{
  return MEMORY[0x24BEE7908]();
}

uint64_t static os_log_type_t.error.getter()
{
  return MEMORY[0x24BEE7910]();
}

uint64_t static os_log_type_t.fault.getter()
{
  return MEMORY[0x24BEE7920]();
}

uint64_t static os_log_type_t.default.getter()
{
  return MEMORY[0x24BEE7928]();
}

uint64_t CAFDeviceAction.description.getter()
{
  return MEMORY[0x24BE100E8]();
}

UIBarButtonItem __swiftcall UIBarButtonItem.init(title:image:primaryAction:menu:)(Swift::String_optional title, UIImage_optional image, UIAction_optional primaryAction, UIMenu_optional menu)
{
  return (UIBarButtonItem)MEMORY[0x24BEBCBD8](title.value._countAndFlagsBits, title.value._object, image.value.super.isa, *(_QWORD *)&image.is_nil, primaryAction.value.super.super.isa, *(_QWORD *)&primaryAction.is_nil, menu.value.super.super.isa, *(_QWORD *)&menu.is_nil);
}

uint64_t UITableViewCell.contentConfiguration.getter()
{
  return MEMORY[0x24BEBCBE8]();
}

uint64_t UITableViewCell.contentConfiguration.setter()
{
  return MEMORY[0x24BEBCBF0]();
}

uint64_t UITableViewCell.backgroundConfiguration.getter()
{
  return MEMORY[0x24BEBCBF8]();
}

uint64_t UITableViewCell.backgroundConfiguration.setter()
{
  return MEMORY[0x24BEBCC00]();
}

uint64_t UITableViewCell.defaultContentConfiguration()()
{
  return MEMORY[0x24BEBCC08]();
}

uint64_t UITableViewCell.defaultBackgroundConfiguration()()
{
  return MEMORY[0x24BEBCC10]();
}

uint64_t OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)()
{
  return MEMORY[0x24BEE56B8]();
}

uint64_t static OS_dispatch_queue.main.getter()
{
  return MEMORY[0x24BEE5770]();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return MEMORY[0x24BEE5790]();
}

uint64_t UICollectionViewCell.backgroundConfiguration.getter()
{
  return MEMORY[0x24BEBCD28]();
}

uint64_t UICollectionViewCell.backgroundConfiguration.setter()
{
  return MEMORY[0x24BEBCD30]();
}

uint64_t UICollectionViewCell.defaultBackgroundConfiguration()()
{
  return MEMORY[0x24BEBCD40]();
}

uint64_t UICollectionViewListCell.accessories.setter()
{
  return MEMORY[0x24BEBCD98]();
}

uint64_t static NSCollectionLayoutSection.list(using:layoutEnvironment:)()
{
  return MEMORY[0x24BEBCDD8]();
}

uint64_t UIView.registerForTraitChanges<A>(_:handler:)()
{
  return MEMORY[0x24BEBCFC0]();
}

uint64_t CAFRange.maximumValue<A>()()
{
  return MEMORY[0x24BE10108]();
}

uint64_t CAFRange.minimumValue<A>()()
{
  return MEMORY[0x24BE10110]();
}

uint64_t CAFRange.stepValue<A>()()
{
  return MEMORY[0x24BE10118]();
}

Swift::Int __swiftcall NSObject._rawHashValue(seed:)(Swift::Int seed)
{
  return MEMORY[0x24BEE5BB8](seed);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return MEMORY[0x24BEE5BC0]();
}

uint64_t UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)()
{
  return MEMORY[0x24BEBD030]();
}

uint64_t UIButton.Configuration.imagePadding.setter()
{
  return MEMORY[0x24BEBD098]();
}

uint64_t UIButton.Configuration.imagePlacement.setter()
{
  return MEMORY[0x24BEBD0D8]();
}

uint64_t UIButton.Configuration.titleTextAttributesTransformer.setter()
{
  return MEMORY[0x24BEBD168]();
}

uint64_t UIButton.Configuration.image.setter()
{
  return MEMORY[0x24BEBD1A8]();
}

uint64_t static UIButton.Configuration.plain()()
{
  return MEMORY[0x24BEBD1B0]();
}

uint64_t UIButton.Configuration.title.setter()
{
  return MEMORY[0x24BEBD1C0]();
}

uint64_t type metadata accessor for UIButton.Configuration()
{
  return MEMORY[0x24BEBD1F8]();
}

uint64_t UIButton.init(configuration:primaryAction:)()
{
  return MEMORY[0x24BEBD208]();
}

uint64_t type metadata accessor for NSRunLoop.SchedulerOptions()
{
  return MEMORY[0x24BDD03C0]();
}

uint64_t static OS_os_log.default.getter()
{
  return MEMORY[0x24BEE7978]();
}

uint64_t OS_os_log.init(subsystem:category:)()
{
  return MEMORY[0x24BEE79A0]();
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x24BEE1C68]();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return MEMORY[0x24BEE1F00]();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return MEMORY[0x24BEE1F48]();
}

uint64_t StringProtocol.trimmingCharacters(in:)()
{
  return MEMORY[0x24BDD0548]();
}

uint64_t dispatch thunk of BinaryInteger.init<A>(exactly:)()
{
  return MEMORY[0x24BEE2060]();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return MEMORY[0x24BEE20A8]();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return MEMORY[0x24BEE22C0]();
}

uint64_t _HashTable.previousHole(before:)()
{
  return MEMORY[0x24BEE22D0]();
}

uint64_t _HashTable.nextHole(atOrAfter:)()
{
  return MEMORY[0x24BEE22E0]();
}

uint64_t __CocoaSet.startIndex.getter()
{
  return MEMORY[0x24BEE22F8]();
}

uint64_t __CocoaSet.makeIterator()()
{
  return MEMORY[0x24BEE2300]();
}

uint64_t static __CocoaSet.Index.== infix(_:_:)()
{
  return MEMORY[0x24BEE2318]();
}

uint64_t __CocoaSet.Index.age.getter()
{
  return MEMORY[0x24BEE2320]();
}

uint64_t __CocoaSet.Index.element.getter()
{
  return MEMORY[0x24BEE2328]();
}

uint64_t __CocoaSet.count.getter()
{
  return MEMORY[0x24BEE2330]();
}

uint64_t __CocoaSet.member(for:)()
{
  return MEMORY[0x24BEE2340]();
}

uint64_t __CocoaSet.element(at:)()
{
  return MEMORY[0x24BEE2348]();
}

uint64_t __CocoaSet.Iterator.next()()
{
  return MEMORY[0x24BEE2358]();
}

uint64_t __CocoaSet.contains(_:)()
{
  return MEMORY[0x24BEE2360]();
}

uint64_t __CocoaSet.endIndex.getter()
{
  return MEMORY[0x24BEE2368]();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return MEMORY[0x24BEE23A0](seed);
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return MEMORY[0x24BEE23A8]();
}

uint64_t AnyHashable.init<A>(_:)()
{
  return MEMORY[0x24BEE23E8]();
}

uint64_t static _SetStorage.copy(original:)()
{
  return MEMORY[0x24BEE24B8]();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x24BEE24C0]();
}

uint64_t static _SetStorage.convert(_:capacity:)()
{
  return MEMORY[0x24BEE24C8]();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return MEMORY[0x24BEE24D0]();
}

uint64_t _StringGuts.foreignScalarAlign(_:)()
{
  return MEMORY[0x24BEE2500]();
}

uint64_t _StringGuts.foreignErrorCorrectedScalar(startingAt:)()
{
  return MEMORY[0x24BEE2508]();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
  MEMORY[0x24BEE2510](a1);
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return MEMORY[0x24BEE2518]();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x24BEE2658]();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x24BEE2660]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x24BEE2838]();
}

uint64_t _decodeScalar(_:startingAt:)()
{
  return MEMORY[0x24BEE2840]();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x24BEE2908]();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return MEMORY[0x24BEE2938]();
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return MEMORY[0x24BEE2958]();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return MEMORY[0x24BEE2980]();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x24BEE2988]();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return MEMORY[0x24BEE2BE0]();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x24BEE2F40]();
}

{
  return MEMORY[0x24BEE2F48]();
}

uint64_t _bridgeCocoaArray<A>(_:)()
{
  return MEMORY[0x24BEE2F58]();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return MEMORY[0x24BEE3068]();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return MEMORY[0x24BEE3080]();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x24BEE3088]();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return MEMORY[0x24BEE3098]();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return MEMORY[0x24BEE30B0]();
}

uint64_t _SwiftNewtypeWrapper<>._toCustomAnyHashable()()
{
  return MEMORY[0x24BEE31D0]();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return MEMORY[0x24BEE3290](cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x24BEE3540]();
}

Swift::Int __swiftcall _minimumMergeRunLength(_:)(Swift::Int a1)
{
  return MEMORY[0x24BEE3548](a1);
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x24BEE3568]();
}

uint64_t type metadata accessor for FloatingPointRoundingRule()
{
  return MEMORY[0x24BEE38F0]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x24BEE3A30]();
}

uint64_t dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter()
{
  return MEMORY[0x24BEE3B90]();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x24BEE3ED0]();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x24BEE3ED8]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x24BEE42E0]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
  MEMORY[0x24BEE42F8](a1);
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x24BEE4328]();
}

uint64_t Unicode.Scalar.Properties.isLowercase.getter()
{
  return MEMORY[0x24BEE4770]();
}

uint64_t Unicode.Scalar.Properties.isCased.getter()
{
  return MEMORY[0x24BEE47C0]();
}

uint64_t type metadata accessor for Unicode.Scalar.Properties()
{
  return MEMORY[0x24BEE47D0]();
}

uint64_t Unicode.Scalar.properties.getter()
{
  return MEMORY[0x24BEE47E0]();
}

CGAffineTransform *__cdecl CGAffineTransformMakeRotation(CGAffineTransform *__return_ptr retstr, CGFloat angle)
{
  return (CGAffineTransform *)MEMORY[0x24BDBD8D8](retstr, angle);
}

CGFloat CGColorGetAlpha(CGColorRef color)
{
  CGFloat result;

  MEMORY[0x24BDBDAE8](color);
  return result;
}

void CGContextBeginTransparencyLayer(CGContextRef c, CFDictionaryRef auxiliaryInfo)
{
  MEMORY[0x24BDBDD08](c, auxiliaryInfo);
}

void CGContextClipToRect(CGContextRef c, CGRect rect)
{
  MEMORY[0x24BDBDD38](c, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextEndTransparencyLayer(CGContextRef c)
{
  MEMORY[0x24BDBDE58](c);
}

void CGContextFillEllipseInRect(CGContextRef c, CGRect rect)
{
  MEMORY[0x24BDBDE60](c, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextSetAlpha(CGContextRef c, CGFloat alpha)
{
  MEMORY[0x24BDBDFA0](c, alpha);
}

void CGContextSetBlendMode(CGContextRef c, CGBlendMode mode)
{
  MEMORY[0x24BDBDFB0](c, *(_QWORD *)&mode);
}

void CGContextSetShadow(CGContextRef c, CGSize offset, CGFloat blur)
{
  MEMORY[0x24BDBE078](c, (__n128)offset, *(__n128 *)&offset.height, blur);
}

void CGContextSetShadowWithColor(CGContextRef c, CGSize offset, CGFloat blur, CGColorRef color)
{
  MEMORY[0x24BDBE080](c, color, (__n128)offset, *(__n128 *)&offset.height, blur);
}

CGFloat CGRectGetHeight(CGRect rect)
{
  CGFloat result;

  MEMORY[0x24BDBEFE8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x24BDBEFF0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x24BDBEFF8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x24BDBF000]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x24BDBF008]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x24BDBF010]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x24BDBF018]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetWidth(CGRect rect)
{
  CGFloat result;

  MEMORY[0x24BDBF020]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGRect CGRectInset(CGRect rect, CGFloat dx, CGFloat dy)
{
  double v3;
  double v4;
  double v5;
  double v6;
  CGRect result;

  MEMORY[0x24BDBF030]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, dx, dy);
  result.size.height = v6;
  result.size.width = v5;
  result.origin.y = v4;
  result.origin.x = v3;
  return result;
}

uint64_t GSSystemRootDirectory()
{
  return MEMORY[0x24BE3D630]();
}

NSArray *__cdecl NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory directory, NSSearchPathDomainMask domainMask, BOOL expandTilde)
{
  return (NSArray *)MEMORY[0x24BDD1208](directory, domainMask, expandTilde);
}

NSString *__cdecl NSStringFromCGSize(CGSize size)
{
  return (NSString *)MEMORY[0x24BEBD2C8]((__n128)size, *(__n128 *)&size.height);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x24BDD1240](aClass);
}

NSString *__cdecl NSStringFromUIEdgeInsets(UIEdgeInsets insets)
{
  return (NSString *)MEMORY[0x24BEBD2D0](*(__n128 *)&insets.top, *(__n128 *)&insets.left, *(__n128 *)&insets.bottom, *(__n128 *)&insets.right);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x24BDAC720](aBlock);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x24BDAC738](aBlock);
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x24BDAC7A0](a1, a2, *(_QWORD *)&a3, a4);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x24BEE4B38]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
  MEMORY[0x24BDADCA8](queue);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADCC0](queue, block);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x24BDADE98](predicate, block);
}

long double fmod(long double __x, long double __y)
{
  long double result;

  MEMORY[0x24BDAE3F0](__x, __y);
  return result;
}

float fmodf(float a1, float a2)
{
  float result;

  MEMORY[0x24BDAE3F8](a1, a2);
  return result;
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x24BDAED08](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x24BDAED60](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x24BEDCF68](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x24BEDCF78](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x24BEDCF88]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDCFD0](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x24BEDCFE8]();
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x24BEDD038](location);
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x24BEDD068](obj);
}

id objc_getAssociatedObject(id object, const void *key)
{
  return (id)MEMORY[0x24BEDD080](object, key);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x24BEDD0E8](location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD108](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD120](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x24BEDD130]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x24BEDD148]();
}

uint64_t objc_opt_self()
{
  return MEMORY[0x24BEDD168]();
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B8](a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
  MEMORY[0x24BEDD3C0](object, key, value, policy);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x24BEDD410](location, obj);
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x24BEDD420](location, obj);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x24BDAF368](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x24BEE4B58]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x24BEE4B68]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x24BEE4B70]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x24BEE4B98]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x24BEE4BA0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x24BEE4BA8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x24BEE4BB0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x24BEE4BB8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x24BEE4BC0]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x24BEE4BC8]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x24BEE4BD0]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x24BEE4BD8]();
}

uint64_t swift_conformsToProtocol2()
{
  return MEMORY[0x24BEE4BF0]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x24BEE4C00]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x24BEE4C10]();
}

uint64_t swift_deletedMethodError()
{
  return MEMORY[0x24BEE4C28]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x24BEE4C38]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x24BEE4C40]();
}

uint64_t swift_dynamicCastMetatype()
{
  return MEMORY[0x24BEE4C50]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x24BEE4C60]();
}

uint64_t swift_dynamicCastObjCClassUnconditional()
{
  return MEMORY[0x24BEE4C68]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x24BEE4C98]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x24BEE4CA0]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x24BEE4CD0]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x24BEE4CD8]();
}

uint64_t swift_getAtKeyPath()
{
  return MEMORY[0x24BEE4CE8]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x24BEE4D08]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4D10]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x24BEE4D40]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x24BEE4D88]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x24BEE4DA0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x24BEE4DB0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x24BEE4DB8]();
}

uint64_t swift_getOpaqueTypeConformance2()
{
  return MEMORY[0x24BEE4DC0]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x24BEE4DD0]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x24BEE4E10]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x24BEE4E18]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x24BEE4E20]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x24BEE4E48]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x24BEE4E58]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x24BEE4E68]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x24BEE4E90]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x24BEE4E98]();
}

uint64_t swift_once()
{
  return MEMORY[0x24BEE4EC8]();
}

uint64_t swift_release()
{
  return MEMORY[0x24BEE4EF8]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x24BEE4F00]();
}

uint64_t swift_retain()
{
  return MEMORY[0x24BEE4F08]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x24BEE4F10]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x24BEE4F38]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x24BEE4F40]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x24BEE4F58]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4F60]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x24BEE4F70]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x24BEE4F80]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x24BEE4F88]();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return MEMORY[0x24BEE4FB0]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x24BEE4FC8]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x24BEE4FD0]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x24BEE4FD8]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x24BEE5008]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x24BEE5050]();
}

