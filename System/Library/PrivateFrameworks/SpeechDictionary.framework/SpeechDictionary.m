void SLCartDict::SLCartDict(SLCartDict *this, _DWORD *a2)
{
  uint64_t v4;
  __int128 v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unsigned int v13;
  int v14;
  int v15;
  unsigned int v16;
  BOOL v17;
  _WORD *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  float v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  char *v29;

  SLDictionary::SLDictionary(this);
  *(_QWORD *)v4 = &off_24D670B20;
  v5 = *(_OWORD *)a2;
  *(_DWORD *)(v4 + 56) = a2[4];
  *(_OWORD *)(v4 + 40) = v5;
  *(_QWORD *)(v4 + 64) = a2 + 5;
  v6 = *(_DWORD *)(v4 + 56);
  v7 = bswap32(v6);
  if (*(_DWORD *)(v4 + 16) == *(_DWORD *)(v4 + 20))
    v8 = v6;
  else
    v8 = v7;
  v29 = (char *)a2 + v8 + 21;
  SLCartDict::SymtabRead((SLCartDict *)v4, &v29, (SLCartDict::Symtab *)(v4 + 80));
  SLCartDict::SymtabRead(this, &v29, (SLCartDict *)((char *)this + 96));
  v9 = 32 * v8;
  v10 = operator new[]();
  *((_QWORD *)this + 9) = v10;
  if ((_DWORD)v8)
  {
    v11 = 0;
    v12 = v29;
    do
    {
      v13 = *(unsigned __int16 *)v12;
      v14 = *((_DWORD *)this + 4);
      v15 = *((_DWORD *)this + 5);
      v16 = bswap32(v13) >> 16;
      v17 = v14 == v15;
      if (v14 != v15)
        LOWORD(v13) = v16;
      v18 = (_WORD *)(v10 + v11);
      *(_WORD *)(v10 + v11) = v13;
      v19 = *((unsigned __int16 *)v12 + 2);
      v20 = bswap32(v19) >> 16;
      if (!v17)
        LOWORD(v19) = v20;
      v18[1] = v19;
      v18[2] = v19;
      v21 = *((unsigned __int16 *)v12 + 3);
      v22 = bswap32(v21) >> 16;
      if (!v17)
        LOWORD(v21) = v22;
      v18[3] = v21;
      v23 = SLDictionary::SmartSwapFloat32Value(this, *((float *)v12 + 2));
      v10 = *((_QWORD *)this + 9);
      v24 = v10 + v11;
      *(float *)(v24 + 8) = v23;
      *(_BYTE *)(v24 + 12) = v12[12];
      if (*(_WORD *)(v10 + v11 + 4))
        v25 = v12 + 13;
      else
        v25 = 0;
      v26 = (uint64_t)&v12[6 * *(__int16 *)(v10 + v11 + 4) + 13];
      v27 = *(__int16 *)(v24 + 6);
      if (*(_WORD *)(v24 + 6))
        v28 = (uint64_t)&v12[6 * *(__int16 *)(v10 + v11 + 4) + 13];
      else
        v28 = 0;
      *(_QWORD *)(v24 + 16) = v25;
      *(_QWORD *)(v24 + 24) = v28;
      v12 = (char *)(v26 + 6 * v27);
      v11 += 32;
    }
    while (v9 != v11);
  }
}

void sub_216FA2A00(_Unwind_Exception *a1)
{
  SLDictionary *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *((_QWORD *)v1 + 13);
  if (v3)
    MEMORY[0x219A06484](v3, 0x1010C8082113244);
  v4 = *((_QWORD *)v1 + 11);
  if (v4)
    MEMORY[0x219A06484](v4, 0x1010C8082113244);
  SLDictionary::~SLDictionary(v1);
  _Unwind_Resume(a1);
}

uint64_t SLCartDict::SymtabRead(SLCartDict *this, char **a2, SLCartDict::Symtab *a3)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  char *v15;
  char *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;

  v6 = (uint64_t)*a2;
  v7 = *(_DWORD *)(*a2 + 13);
  v8 = bswap32(v7);
  if (*((_DWORD *)this + 4) != *((_DWORD *)this + 5))
    v7 = v8;
  *(_DWORD *)a3 = v7;
  *a2 = (char *)(v6 + 21);
  result = operator new[]();
  *((_QWORD *)a3 + 1) = result;
  v10 = *(unsigned int *)a3;
  if ((int)v10 >= 1)
  {
    v11 = 0;
    v12 = *((_DWORD *)this + 4);
    v13 = *((_DWORD *)this + 5);
    v14 = 16 * v10;
    v15 = *a2;
    do
    {
      v18 = *(_DWORD *)v15;
      v16 = v15 + 4;
      v17 = v18;
      v19 = *((_QWORD *)a3 + 1) + v11;
      v20 = bswap32(v18);
      if (v12 != v13)
        v17 = v20;
      *(_DWORD *)v19 = v17;
      *(_QWORD *)(v19 + 8) = v16;
      v15 = &(*a2)[v17 + 4];
      *a2 = v15;
      v11 += 16;
    }
    while (v14 != v11);
  }
  return result;
}

void SLCartDict::Symtab::~Symtab(SLCartDict::Symtab *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1);
  if (v1)
    MEMORY[0x219A06484](v1, 0x1010C8082113244);
}

{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1);
  if (v1)
    MEMORY[0x219A06484](v1, 0x1010C8082113244);
}

void SLCartDict::~SLCartDict(SLCartDict *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24D670B20;
  v2 = *((_QWORD *)this + 9);
  if (v2)
    MEMORY[0x219A06484](v2, 0x1020C80FD9D5386);
  v3 = *((_QWORD *)this + 13);
  if (v3)
    MEMORY[0x219A06484](v3, 0x1010C8082113244);
  v4 = *((_QWORD *)this + 11);
  if (v4)
    MEMORY[0x219A06484](v4, 0x1010C8082113244);
  SLDictionary::~SLDictionary(this);
}

{
  SLCartDict::~SLCartDict(this);
  JUMPOUT(0x219A0649CLL);
}

uint64_t SLCartDict::Lookup(SLCartDict *this, const char *a2, uint64_t a3, SLWordBuilder *a4, SLDictionary *a5)
{
  uint64_t result;
  _BYTE *v10;
  char *v11;
  unsigned int v12;
  unsigned __int16 *v13;
  char *v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  size_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  size_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  char v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unint64_t __p;
  char *v44;
  char *v45;

  result = SLCartDict::LTGenResultRaw(this, a2, a3);
  if ((_DWORD)result)
  {
    v42 = result;
    SLCartDict::LTCleanupLabels((uint64_t)this);
    (**(void (***)(SLWordBuilder *, const char *))a4)(a4, "CART");
    (*(void (**)(SLWordBuilder *))(*(_QWORD *)a4 + 8))(a4);
    (*(void (**)(SLWordBuilder *, const char *, uint64_t))(*(_QWORD *)a4 + 16))(a4, a2, a3);
    (*(void (**)(SLWordBuilder *))(*(_QWORD *)a4 + 56))(a4);
    v10 = operator new(1uLL);
    *v10 = 2;
    v11 = v10 + 1;
    v44 = v10 + 1;
    v45 = v10 + 1;
    __p = (unint64_t)v10;
    v13 = (unsigned __int16 *)((char *)this + 240);
    v12 = *((unsigned __int16 *)this + 120);
    if ((v12 & 0x8000) == 0)
    {
      v14 = 0;
      v15 = 0;
      while (v12 < *((unsigned __int8 *)this + 32) || v12 > *((unsigned __int8 *)this + 33))
      {
        v16 = *((_QWORD *)this + 3);
        v17 = *(unsigned __int8 *)(v16 + v12);
        if (*(_BYTE *)(v16 + v12))
        {
          if (v15 == 0xFF)
          {
            v15 = -1;
          }
          else
          {
            v18 = (*(uint64_t (**)(SLCartDict *, uint64_t))(*(_QWORD *)this + 24))(this, v17);
            v11 = v44;
            if (v18 > v15)
            {
              v14 = &v44[-__p];
              v15 = v18;
            }
          }
LABEL_29:
          if (v11 >= v45)
          {
            v30 = &v11[-__p];
            v31 = (uint64_t)&v11[-__p + 1];
            if (v31 < 0)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v32 = (unint64_t)&v45[-__p];
            if (2 * (uint64_t)&v45[-__p] > (unint64_t)v31)
              v31 = 2 * v32;
            if (v32 >= 0x3FFFFFFFFFFFFFFFLL)
              v33 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v33 = v31;
            if (v33)
              v34 = (char *)operator new(v33);
            else
              v34 = 0;
            v35 = &v30[(_QWORD)v34];
            v36 = &v30[(_QWORD)v34];
            *v36 = v17;
            v29 = v36 + 1;
            if (v11 != (char *)__p)
            {
              v37 = &v11[~__p];
              do
              {
                v38 = *--v11;
                (v37--)[(_QWORD)v34] = v38;
              }
              while (v11 != (char *)__p);
              v11 = (char *)__p;
              v35 = v34;
            }
            __p = (unint64_t)v35;
            v45 = &v34[v33];
            if (v11)
              operator delete(v11);
          }
          else
          {
            *v11 = v17;
            v29 = v11 + 1;
          }
          v44 = v29;
          v11 = v29;
        }
LABEL_47:
        v39 = (__int16)v13[1];
        ++v13;
        v12 = (unsigned __int16)v39;
        if (v39 < 0)
        {
          v10 = (_BYTE *)__p;
          if (v11 == (char *)__p)
            goto LABEL_57;
          goto LABEL_51;
        }
      }
      if (v11 >= v45)
      {
        v20 = &v11[-__p];
        v21 = (uint64_t)&v11[-__p + 1];
        if (v21 < 0)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v22 = (unint64_t)&v45[-__p];
        if (2 * (uint64_t)&v45[-__p] > (unint64_t)v21)
          v21 = 2 * v22;
        if (v22 >= 0x3FFFFFFFFFFFFFFFLL)
          v23 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v23 = v21;
        if (v23)
          v24 = (char *)operator new(v23);
        else
          v24 = 0;
        v25 = &v20[(_QWORD)v24];
        v26 = &v20[(_QWORD)v24];
        *v26 = 1;
        v19 = v26 + 1;
        if (v11 != (char *)__p)
        {
          v27 = &v11[~__p];
          do
          {
            v28 = *--v11;
            (v27--)[(_QWORD)v24] = v28;
          }
          while (v11 != (char *)__p);
          v11 = (char *)__p;
          v25 = v24;
        }
        __p = (unint64_t)v25;
        v45 = &v24[v23];
        if (v11)
          operator delete(v11);
      }
      else
      {
        *v11 = 1;
        v19 = v11 + 1;
      }
      v44 = v19;
      LOBYTE(v17) = *(_BYTE *)(*((_QWORD *)this + 3) + *v13);
      v15 = -1;
      v11 = v19;
      if (!(_BYTE)v17)
        goto LABEL_47;
      goto LABEL_29;
    }
    v14 = 0;
    v15 = 0;
LABEL_51:
    v40 = 0;
    do
    {
      if (v14 != (char *)v40 || v15 == 0xFF)
      {
        v41 = v10[v40];
      }
      else
      {
        (*(void (**)(SLWordBuilder *, uint64_t))(*(_QWORD *)a4 + 72))(a4, 1);
        v41 = (*(uint64_t (**)(SLCartDict *, _QWORD))(*(_QWORD *)this + 32))(this, v14[__p]);
      }
      (*(void (**)(SLWordBuilder *, uint64_t))(*(_QWORD *)a4 + 72))(a4, v41);
      ++v40;
      v10 = (_BYTE *)__p;
    }
    while (v40 < (unint64_t)&v44[-__p]);
LABEL_57:
    SLWordBuilder::SetPartOfSpeech((uint64_t)a4, *((_DWORD *)this + 9));
    (*(void (**)(SLWordBuilder *))(*(_QWORD *)a4 + 96))(a4);
    (*(void (**)(SLWordBuilder *))(*(_QWORD *)a4 + 48))(a4);
    if (__p)
      operator delete((void *)__p);
    return v42;
  }
  return result;
}

void sub_216FA3004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  _Unwind_Resume(exception_object);
}

uint64_t SLCartDict::LTGenResultRaw(SLCartDict *this, const char *a2, uint64_t a3)
{
  SLCartDict *v5;
  unsigned int v6;
  unsigned int v7;
  size_t v8;
  unint64_t v9;
  __darwin_ct_rune_t v10;
  __darwin_ct_rune_t v11;
  size_t v12;
  char *v13;
  char v14;
  uint64_t result;
  unint64_t v16;
  uint64_t v17;
  char v18;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *__s;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  _BYTE __b[160];
  uint64_t v30;

  v5 = this;
  v30 = *MEMORY[0x24BDAC8D0];
  v6 = *((_DWORD *)this + 12);
  v7 = bswap32(v6);
  if (*((_DWORD *)this + 4) != *((_DWORD *)this + 5))
    v6 = v7;
  v8 = (unint64_t)(v6 - 1) >> 1;
  memset(__b, 33, v8);
  if (!a3)
    goto LABEL_16;
  v9 = 0;
  do
  {
    v11 = *(unsigned __int8 *)a2++;
    v10 = v11;
    if ((v11 - 97) >= 0x1A)
    {
      if ((v10 - 65) > 0x19)
        goto LABEL_9;
      LOBYTE(v10) = __tolower(v10);
    }
    v12 = v9 + v8;
    ++v9;
    __b[v12] = v10;
LABEL_9:
    --a3;
  }
  while (a3);
  v28 = &__b[v8];
  memset(&__b[v8 + v9], 33, v8);
  if (!v9)
  {
LABEL_16:
    v24 = 0;
    goto LABEL_17;
  }
  v13 = (char *)*((_QWORD *)v5 + 8);
  v14 = __b[v8];
  result = (uint64_t)strchr(v13, v14);
  if (result)
  {
    v16 = 0;
    v17 = 0;
    v27 = (uint64_t)v5;
    __s = v13;
    v26 = (uint64_t)v5 + 80;
    v18 = v14;
    v19 = &__b[v8];
    v20 = &__b[v8];
    while (1)
    {
      v21 = *(_QWORD *)(v27 + 72) + 32 * (result - (_QWORD)v13);
      *(_BYTE *)(v27 + 112 + v17) = v16;
      v19[v16] = 43;
      v22 = (uint64_t)&v20[-v8];
      *(_WORD *)(v27 + 240 + 2 * v17) = SLCartDict::LTGenLabelConfusions(v27, v21, v22, v26);
      v23 = v17 | 1;
      *(_BYTE *)(v27 + 112 + (v17 | 1)) = v16;
      v28[v16] = 45;
      v17 += 2;
      *(_WORD *)(v27 + 240 + 2 * v23) = SLCartDict::LTGenLabelConfusions(v27, v21, v22, v26);
      v19 = &__b[v8];
      v28[v16++] = v18;
      if (v16 == v9)
        break;
      v20 = &v28[v16];
      v18 = v28[v16];
      v13 = __s;
      result = (uint64_t)strchr(__s, v18);
      if (!result)
        return v16 >= v9;
    }
    v24 = v17 & 0xFFFFFFFE;
    v5 = (SLCartDict *)v27;
LABEL_17:
    *((_WORD *)v5 + v24 + 120) = -1;
    *((_BYTE *)v5 + v24 + 112) = -1;
    return 1;
  }
  return result;
}

uint64_t SLCartDict::LTCleanupLabels(uint64_t this)
{
  unsigned int v1;
  unsigned int v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  uint64_t v8;
  int v9;

  v1 = *(_DWORD *)(this + 44);
  v2 = bswap32(v1);
  if (*(_DWORD *)(this + 16) != *(_DWORD *)(this + 20))
    v1 = v2;
  if ((*(__int16 *)(this + 240) & 0x80000000) == 0)
  {
    v3 = 0;
    v4 = 0;
    v5 = *(unsigned __int16 *)(this + 240);
    do
    {
      v6 = *(unsigned __int16 *)(this + 2 * v3 + 242);
      if (v6 == v5 || v1 == v6)
      {
        v8 = v4;
      }
      else
      {
        v8 = v4 + 1;
        *(_WORD *)(this + 2 * v8 + 240) = v6;
        *(_BYTE *)(this + v8 + 112) = *(_BYTE *)(this + v3 + 113);
        ++v4;
      }
      v9 = *(__int16 *)(this + 2 * v8 + 240);
      v5 = *(unsigned __int16 *)(this + 2 * v8 + 240);
      ++v3;
    }
    while ((v9 & 0x80000000) == 0);
  }
  return this;
}

uint64_t SLCartDict::LTGenLabelConfusions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 *v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned __int8 *v9;
  void **v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;

  if (*(_WORD *)(a2 + 4))
  {
    v5 = *(unsigned __int8 **)(a2 + 16);
    v6 = *(_QWORD *)(a4 + 8);
    v7 = *(_DWORD *)(a1 + 16);
    v8 = *(_DWORD *)(a1 + 20);
    v9 = v5;
    do
    {
      v10 = (void **)(v6 + 16 * v9[1]);
      if (memchr(v10[1], *(char *)(a3 + *v9), *(int *)v10))
        v11 = 2;
      else
        v11 = 4;
      v12 = *(unsigned __int16 *)&v9[v11];
      v13 = bswap32(v12) >> 16;
      if (v7 != v8)
        LOWORD(v12) = v13;
      v9 = &v5[6 * (unsigned __int16)v12];
    }
    while ((v12 & 0x8000) == 0);
    return (unsigned __int16)(v12 ^ 0x8000);
  }
  else
  {
    return *(unsigned __int8 *)(a2 + 12);
  }
}

void SLCartDictEng::SLCartDictEng(SLCartDictEng *this, const __CFURL *a2, SLMMapHint *a3)
{
  uint64_t v3;

  SLCartMappedFileDict::SLCartMappedFileDict(this, a2, a3);
  *(_QWORD *)v3 = &off_24D670B58;
  *(_QWORD *)(v3 + 24) = &SLCartDictEng::sPhon;
  *(_WORD *)(v3 + 32) = 7952;
  *(_DWORD *)(v3 + 36) = 3;
}

void SLCartMappedFileDict::SLCartMappedFileDict(SLCartMappedFileDict *this, const __CFURL *a2, SLMMapHint *a3)
{
  _DWORD *v4;

  *(_QWORD *)this = &unk_24D670F78;
  v4 = (_DWORD *)SLMappedFileDict::SetMappedFile((SLCartMappedFileDict *)((char *)this + 496), a2, a3);
  SLCartDict::SLCartDict(this, v4);
  *(_QWORD *)this = &unk_24D670F78;
}

void sub_216FA3434(_Unwind_Exception *a1, void *a2)
{
  SLMMapCache **v2;

  SLMappedFileDict::~SLMappedFileDict(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t SLCartDictEng::VowelQuality(SLCartDictEng *this, int a2)
{
  int v3;

  if (a2 == 25 || a2 == 11)
    v3 = 1;
  else
    v3 = 2;
  return ((int)(SLPhonEng::sFlags[a2] << 31) >> 31) & v3;
}

uint64_t SLCartDictEng::PimpMySchwa(SLCartDictEng *this, unsigned int a2)
{
  unsigned int v2;

  if (a2 == 25)
    v2 = 4;
  else
    v2 = a2;
  if (a2 == 11)
    return 8;
  else
    return v2;
}

uint64_t SLCartDict::Create(SLCartDict *this, const __CFLocale *a2, const __CFURL *a3)
{
  const __CFString *Value;
  uint64_t v5;
  SLMMapHint *v6;

  Value = (const __CFString *)CFLocaleGetValue(this, (CFLocaleKey)*MEMORY[0x24BDBD418]);
  if (CFStringCompare(Value, CFSTR("en"), 0))
    SLCartDict::Create();
  v5 = operator new();
  SLCartMappedFileDict::SLCartMappedFileDict((SLCartMappedFileDict *)v5, a2, v6);
  *(_QWORD *)v5 = &off_24D670B58;
  *(_QWORD *)(v5 + 24) = &SLCartDictEng::sPhon;
  *(_WORD *)(v5 + 32) = 7952;
  *(_DWORD *)(v5 + 36) = 3;
  return v5;
}

void sub_216FA3520(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A0649C](v1, 0x10F1C40323799D2);
  _Unwind_Resume(a1);
}

uint64_t SLCartDict::VowelQuality(SLCartDict *this)
{
  return 0;
}

uint64_t SLCartDict::PimpMySchwa(SLCartDict *this, uint64_t a2)
{
  return a2;
}

void SLCartDictEng::~SLCartDictEng(SLCartDictEng *this)
{
  SLCartMappedFileDict::~SLCartMappedFileDict(this);
  JUMPOUT(0x219A0649CLL);
}

void std::vector<unsigned char>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24D6708E8, MEMORY[0x24BEDAAF0]);
}

void sub_216FA35CC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

uint64_t SLCompressedDict::CompareEntry(SLCompressedDict *this, const char *a2, size_t a3, unsigned __int8 *a4)
{
  int v4;
  unsigned __int8 *v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  _BYTE *v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  char v14;
  unsigned __int8 v17;
  _QWORD v18[5];

  v18[4] = *MEMORY[0x24BDAC8D0];
  v4 = -(int)a4;
  v6 = *a4;
  v5 = a4 + 1;
  v7 = v6 >> 3;
  v8 = v6 << 10;
  v9 = v18;
  v17 = v6 >> 3;
  v10 = 10;
  do
  {
    v11 = v4 + (_DWORD)v5;
    while (v10 > 8)
    {
      v12 = *v5++;
      v8 |= v12 << (v10 - 8);
      ++v11;
      v10 -= 8;
    }
    v13 = (v8 >> 8) & 0x1F;
    if (v13 >= 3)
      v14 = v13 + 62;
    else
      v14 = 0x272E2Du >> (8 * (BYTE1(v8) & 0x1F));
    *v9++ = v14;
    v8 = 32 * v8;
    v10 += 5;
  }
  while (v7-- >= 2);
  *((_DWORD *)this + 8) = v11;
  return SLUncompressedDict::CompareEntry(this, a2, a3, &v17);
}

uint64_t SLCompressedDict::EntryLength(SLCompressedDict *this, unsigned __int8 *a2)
{
  return *((unsigned int *)this + 8);
}

void SLCompressedDict::~SLCompressedDict(SLCompressedDict *this)
{
  SLDictionary::~SLDictionary(this);
  JUMPOUT(0x219A0649CLL);
}

uint64_t SLWordBuilder::BeginHomograph(uint64_t this)
{
  *(_BYTE *)(this + 8) = 0;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

uint64_t SLWordBuilder::BeginSyllable(uint64_t this)
{
  *(_BYTE *)(this + 8) = 1;
  return this;
}

uint64_t SLWordBuilder::AddPhonemes(uint64_t this, const unsigned __int8 *a2, int a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  if (a3 >= 1)
  {
    v4 = this;
    v5 = a3 + 1;
    do
    {
      v6 = *a2++;
      this = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 72))(v4, v6);
      --v5;
    }
    while (v5 > 1);
  }
  return this;
}

uint64_t SLWordBuilder::AddPartOfSpeech(uint64_t this, char a2)
{
  *(_DWORD *)(this + 12) |= 1 << a2;
  return this;
}

uint64_t SLWordBuilder::SetPartOfSpeech(uint64_t this, int a2)
{
  *(_DWORD *)(this + 12) = a2;
  return this;
}

void SLWordBuilder::SLWordBuilder(SLWordBuilder *this)
{
  *(_QWORD *)this = &off_24D670C90;
}

{
  *(_QWORD *)this = &off_24D670C90;
}

void SLWordBuilder::~SLWordBuilder(SLWordBuilder *this)
{
  JUMPOUT(0x219A0649CLL);
}

uint64_t SLWordBuilderProxy::SetDictionary(SLWordBuilderProxy *this, const char *a2)
{
  return (***((uint64_t (****)(_QWORD, const char *))this + 2))(*((_QWORD *)this + 2), a2);
}

uint64_t SLWordBuilderProxy::BeginWord(SLWordBuilderProxy *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 8))(*((_QWORD *)this + 2));
}

uint64_t SLWordBuilderProxy::SetText(SLWordBuilderProxy *this, const char *a2)
{
  return (*(uint64_t (**)(_QWORD, const char *))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2), a2);
}

uint64_t SLWordBuilderProxy::SetBoundary(SLWordBuilderProxy *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2));
}

uint64_t SLWordBuilderProxy::SetEmphasis(SLWordBuilderProxy *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2));
}

uint64_t SLWordBuilderProxy::SetPosition(SLWordBuilderProxy *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
}

uint64_t SLWordBuilderProxy::EndWord(SLWordBuilderProxy *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 48))(*((_QWORD *)this + 2));
}

uint64_t SLWordBuilderProxy::BeginHomograph(SLWordBuilderProxy *this)
{
  *((_BYTE *)this + 8) = 0;
  *((_DWORD *)this + 3) = 0;
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 56))(*((_QWORD *)this + 2));
}

uint64_t SLWordBuilderProxy::BeginSyllable(SLWordBuilderProxy *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
}

uint64_t SLWordBuilderProxy::AddPhoneme(SLWordBuilderProxy *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
}

uint64_t SLWordBuilderProxy::AddPhonemes(SLWordBuilderProxy *this, const unsigned __int8 *a2)
{
  return (*(uint64_t (**)(_QWORD, const unsigned __int8 *))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2), a2);
}

uint64_t SLWordBuilderProxy::SetTags(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 88))(*(_QWORD *)(a1 + 16));
}

uint64_t SLWordBuilderProxy::EndHomograph(SLWordBuilderProxy *this)
{
  _DWORD *v1;

  v1 = (_DWORD *)*((_QWORD *)this + 2);
  v1[3] = *((_DWORD *)this + 3);
  return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v1 + 96))(v1);
}

uint64_t SLWordBuilderPhonemeProxy::AddPhoneme(SLWordBuilderPhonemeProxy *this, char a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  *((_BYTE *)this + 24) = a2;
  return result;
}

uint64_t SLWordBuilderPhonemeProxy::AddPhonemes(SLWordBuilderPhonemeProxy *this, const unsigned __int8 *a2, int a3)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
  if (a3)
    *((_BYTE *)this + 24) = a2[a3 - 1];
  return result;
}

void SLDictionary::SLDictionary(SLDictionary *this)
{
  *(_QWORD *)this = &unk_24D670D28;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0x100000002;
}

float SLDictionary::SmartSwapFloat32Value(SLDictionary *this, float result)
{
  float v2;

  v2 = COERCE_FLOAT(bswap32(LODWORD(result)));
  if (*((_DWORD *)this + 4) != *((_DWORD *)this + 5))
    return v2;
  return result;
}

uint64_t SLEncyclopedia::Lookup(SLEncyclopedia *this, const char *a2, uint64_t a3, SLWordBuilder *a4, SLDictionary *a5)
{
  uint64_t v5;
  uint64_t result;

  v5 = *((_QWORD *)this + 3);
  if (!v5)
    return 0;
  do
  {
    result = (**(uint64_t (***)(uint64_t, const char *, uint64_t, SLWordBuilder *, SLDictionary *))v5)(v5, a2, a3, a4, a5);
    if ((_DWORD)result)
      break;
    v5 = *(_QWORD *)(v5 + 8);
  }
  while (v5);
  return result;
}

uint64_t SLEncyclopedia::PushFront(uint64_t this, SLDictionary *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 24);
  if (!v2)
    *(_QWORD *)(this + 32) = a2;
  *((_QWORD *)a2 + 1) = v2;
  *(_QWORD *)(this + 24) = a2;
  return this;
}

uint64_t SLEncyclopedia::PushBack(uint64_t this, SLDictionary *a2)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(this + 32);
  if (v2)
    v3 = (_QWORD *)(v2 + 8);
  else
    v3 = (_QWORD *)(this + 24);
  *v3 = a2;
  *((_QWORD *)a2 + 1) = 0;
  *(_QWORD *)(this + 32) = a2;
  return this;
}

void SLEncyclopedia::~SLEncyclopedia(SLEncyclopedia *this)
{
  _QWORD *i;

  *(_QWORD *)this = &off_24D670D50;
  for (i = (_QWORD *)*((_QWORD *)this + 3); i; i = (_QWORD *)*((_QWORD *)this + 3))
  {
    *((_QWORD *)this + 3) = i[1];
    if (*((_QWORD **)this + 4) == i)
      *((_QWORD *)this + 4) = 0;
    (*(void (**)(_QWORD *))(*i + 16))(i);
  }
}

{
  SLEncyclopedia::~SLEncyclopedia(this);
  JUMPOUT(0x219A0649CLL);
}

uint64_t SLEncyclopedia::Remove(uint64_t this, SLDictionary *a2)
{
  _QWORD *v2;
  SLDictionary *v3;
  SLDictionary *v4;
  SLDictionary *v5;

  v2 = (_QWORD *)(this + 24);
  v3 = *(SLDictionary **)(this + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      v5 = 0;
LABEL_7:
      if (v5)
        v2 = (_QWORD *)((char *)v5 + 8);
      *v2 = *((_QWORD *)a2 + 1);
      if (*(SLDictionary **)(this + 32) == a2)
        *(_QWORD *)(this + 32) = v5;
    }
    else
    {
      while (1)
      {
        v4 = (SLDictionary *)*((_QWORD *)v3 + 1);
        if (!v4)
          break;
        v5 = v3;
        v3 = (SLDictionary *)*((_QWORD *)v3 + 1);
        if (v4 == a2)
          goto LABEL_7;
      }
    }
  }
  return this;
}

void SLDictionaryRecursion::SLDictionaryRecursion(SLDictionaryRecursion *this, SLDictionary *a2, uint64_t a3)
{
  *((_QWORD *)this + 2) = 0x100000002;
  *(_QWORD *)this = &off_24D670D78;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 3) = a2;
  *((_QWORD *)this + 4) = a3;
}

{
  *((_QWORD *)this + 2) = 0x100000002;
  *(_QWORD *)this = &off_24D670D78;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 3) = a2;
  *((_QWORD *)this + 4) = a3;
}

uint64_t SLDictionaryRecursion::Lookup(SLDictionaryRecursion *this, const char *a2, uint64_t a3, SLWordBuilder *a4, SLDictionary *a5)
{
  uint64_t v5;
  uint64_t result;

  v5 = *((_QWORD *)this + 4);
  if (!v5)
    return 0;
  *((_QWORD *)this + 4) = v5 - 1;
  result = (***((uint64_t (****)(_QWORD, const char *, uint64_t, SLWordBuilder *, SLDictionary *))this + 3))(*((_QWORD *)this + 3), a2, a3, a4, a5);
  ++*((_QWORD *)this + 4);
  return result;
}

CFBundleRef SLGetSpeechDictionaryBundle(void)
{
  return CFBundleGetBundleWithIdentifier(CFSTR("com.apple.speech.SpeechDictionary"));
}

uint64_t SLWordBuilder::WrappedToken(SLWordBuilder *this)
{
  return 0;
}

uint64_t SLWordBuilder::AllowShortcut(SLWordBuilder *this)
{
  return 0;
}

void SLWordBuilderProxy::~SLWordBuilderProxy(SLWordBuilderProxy *this)
{
  JUMPOUT(0x219A0649CLL);
}

void SLWordBuilderPhonemeProxy::~SLWordBuilderPhonemeProxy(SLWordBuilderPhonemeProxy *this)
{
  JUMPOUT(0x219A0649CLL);
}

void SLDictionaryRecursion::~SLDictionaryRecursion(SLDictionaryRecursion *this)
{
  JUMPOUT(0x219A0649CLL);
}

uint64_t SLMappedFileDict::SetMappedFile(SLMappedFileDict *this, const __CFURL *a2, SLMMapHint *a3)
{
  uint64_t result;

  result = SLMMapCache::Map(a2, 0, a3);
  *(_QWORD *)this = result;
  return result;
}

void SLMappedFileDict::~SLMappedFileDict(SLMMapCache **this, void *a2)
{
  SLMMapCache::Unmap(*this, a2);
}

{
  SLMMapCache::Unmap(*this, a2);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void SLCartMappedFileDict::~SLCartMappedFileDict(SLCartMappedFileDict *this)
{
  uint64_t v1;
  void *v2;

  SLCartDict::~SLCartDict(this);
  SLMMapCache::Unmap(*(SLMMapCache **)(v1 + 496), v2);
}

{
  SLCartMappedFileDict::~SLCartMappedFileDict(this);
  JUMPOUT(0x219A0649CLL);
}

void SLPrefixMappedFileDict::~SLPrefixMappedFileDict(SLMMapCache **this, void *a2)
{
  SLMMapCache::Unmap(this[7], a2);
  SLPrefixDict::~SLPrefixDict((SLPrefixDict *)this);
}

{
  SLPrefixMappedFileDict::~SLPrefixMappedFileDict(this, a2);
  JUMPOUT(0x219A0649CLL);
}

void SLPrefixMappedFileDict::SLPrefixMappedFileDict(SLPrefixMappedFileDict *this, const __CFURL *a2)
{
  _QWORD *v4;
  SLMMapHint *v5;
  _DWORD *v6;
  uint64_t (**v7)(SLPrefixDictMapHint *__hidden);
  int v8;
  unint64_t v9;
  uint64_t v10;

  SLDictionary::SLDictionary(this);
  *v4 = &off_24D670F50;
  v7 = &off_24D671030;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v6 = (_DWORD *)SLMMapCache::Map(a2, 0, v5);
  SLPrefixDict::SetFileInfo((uint64_t)this, v6, 0, 0);
  SLMMapHint::~SLMMapHint((SLMMapHint *)&v7);
}

void sub_216FA3DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  SLMMapCache **v9;
  void *v11;

  SLMMapHint::~SLMMapHint((SLMMapHint *)&a9);
  SLMappedFileDict::~SLMappedFileDict(v9 + 7, v11);
  SLPrefixDict::~SLPrefixDict((SLPrefixDict *)v9);
  _Unwind_Resume(a1);
}

uint64_t SLPrefixDictMapHint::MappedSize(SLPrefixDictMapHint *this)
{
  return *((_QWORD *)this + 3);
}

void SLPrefixDictMapHint::~SLPrefixDictMapHint(SLPrefixDictMapHint *this)
{
  SLMMapHint::~SLMMapHint(this);
  JUMPOUT(0x219A0649CLL);
}

void SLMorphTraits::SLMorphTraits(SLMorphTraits *this, const char *a2, int a3)
{
  *(_DWORD *)this = a3;
  *((_QWORD *)this + 1) = newlocale(63, a2, 0);
}

void SLMorphTraits::~SLMorphTraits(locale_t *this)
{
  freelocale(this[1]);
}

{
  freelocale(this[1]);
}

uint64_t SLMorph::SLMorph(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v16;
  __int16 v17;

  SLDictionary::SLDictionary((SLDictionary *)a1);
  *v16 = &off_24D671070;
  v16[3] = a2;
  *(_QWORD *)(a1 + 32) = strlen(a2);
  *(_QWORD *)(a1 + 40) = a4;
  v17 = *(_WORD *)(a3 + 8);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)a3;
  *(_WORD *)(a1 + 56) = v17;
  *(_DWORD *)(a1 + 60) = a5;
  *(_DWORD *)(a1 + 64) = a6;
  *(_QWORD *)(a1 + 68) = a7;
  *(_QWORD *)(a1 + 76) = a8;
  return a1;
}

uint64_t SLMorph::Lookup(SLMorph *this, const char *a2, uint64_t a3, SLWordBuilder *a4, SLDictionary *a5)
{
  uint64_t v10;
  _BYTE v12[40];
  uint64_t v13;

  if (!(*(unsigned int (**)(SLMorph *))(*(_QWORD *)this + 24))(this))
    return 0;
  SLTokenBuilder::SLTokenBuilder((SLTokenBuilder *)v12, a4, 0);
  v10 = (*(uint64_t (**)(SLMorph *, const char *, uint64_t, SLDictionary *, _BYTE *))(*(_QWORD *)this + 32))(this, a2, a3, a5, v12);
  if ((_DWORD)v10)
  {
    (*(void (**)(SLMorph *, uint64_t))(*(_QWORD *)this + 56))(this, v13);
    *(_QWORD *)(v13 + 24) = "Dictionary+Morph";
    SLTokenBuilder::Forward((SLTokenBuilder *)v12);
  }
  SLTokenBuilder::~SLTokenBuilder((SLTokenBuilder *)v12);
  return v10;
}

void sub_216FA4020(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  SLTokenBuilder::~SLTokenBuilder((SLTokenBuilder *)va);
  _Unwind_Resume(a1);
}

BOOL SLMorph::Match(SLMorph *this, const char *a2, unint64_t a3)
{
  size_t v4;
  const char *v5;

  v4 = *((_QWORD *)this + 4);
  if (a3 > v4 && ((v5 = (const char *)*((_QWORD *)this + 3), a3 - v4 > 1) || *v5 == 39))
    return strncasecmp_l(&a2[a3 - v4], v5, v4, *(locale_t *)(*((_QWORD *)this + 5) + 8)) == 0;
  else
    return 0;
}

uint64_t SLMorph::MarkAllCaps(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((*(_BYTE *)(*(_QWORD *)(a2 + 40) + 16) & 8) != 0)
  {
    v4 = result;
    v5 = *(char *)(a2 + 39) < 0 ? *(_QWORD *)(a2 + 24) : *(unsigned __int8 *)(a2 + 39);
    v6 = a3 - v5;
    if (a3 != v5)
    {
      v7 = 0;
      v8 = 0;
      v9 = (uint64_t *)(a2 + 16);
      v10 = MEMORY[0x24BDAC740];
LABEL_7:
      ++v7;
      do
      {
        v11 = a2 + 16;
        if (*(char *)(a2 + 39) < 0)
          v11 = *v9;
        result = *(char *)(v11 + v7 - 1);
        if ((result & 0x80000000) != 0)
        {
          result = __maskrune_l(result, 0x8000uLL, *(locale_t *)(*(_QWORD *)(v4 + 40) + 8));
          if ((_DWORD)result)
          {
LABEL_22:
            v8 = 1;
            if (v6 + v7)
              goto LABEL_7;
            goto LABEL_25;
          }
        }
        else if ((*(_DWORD *)(v10 + 4 * result + 60) & 0x8000) != 0)
        {
          goto LABEL_22;
        }
        v12 = a2 + 16;
        if (*(char *)(a2 + 39) < 0)
          v12 = *v9;
        result = *(char *)(v12 + v7 - 1);
        if ((result & 0x80000000) != 0)
        {
          result = __maskrune_l(result, 0x1000uLL, *(locale_t *)(*(_QWORD *)(v4 + 40) + 8));
          if ((_DWORD)result)
            return result;
        }
        else if ((*(_DWORD *)(v10 + 4 * result + 60) & 0x1000) != 0)
        {
          return result;
        }
        ++v7;
      }
      while (v6 + v7 != 1);
      if ((v8 & 1) == 0)
        return result;
LABEL_25:
      *(_DWORD *)(*(_QWORD *)(a2 + 40) + 16) = *(_DWORD *)(*(_QWORD *)(a2 + 40) + 16) & 0xFFFFFFE7 | 0x10;
    }
  }
  return result;
}

uint64_t SLMorph::RestoreSuffix(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  const std::string::value_type *v8;
  std::string::size_type v9;

  v6 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 48))(a1, *(_QWORD *)(a2 + 40));
  if ((_DWORD)v6)
  {
    SLMorph::MarkAllCaps(a1, a2, 0);
    v7 = *(char *)(a3 + 23);
    if (v7 >= 0)
      v8 = (const std::string::value_type *)a3;
    else
      v8 = *(const std::string::value_type **)a3;
    if (v7 >= 0)
      v9 = *(unsigned __int8 *)(a3 + 23);
    else
      v9 = *(_QWORD *)(a3 + 8);
    std::string::append((std::string *)(a2 + 16), v8, v9);
  }
  return v6;
}

uint64_t SLMorph::RestoreSuffix(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;

  v8 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 48))(a1, *(_QWORD *)(a2 + 40));
  if ((_DWORD)v8)
  {
    SLMorph::MarkAllCaps(a1, a2, a4);
    if (*(char *)(a2 + 39) < 0)
      v9 = *(_QWORD *)(a2 + 24);
    else
      v9 = *(unsigned __int8 *)(a2 + 39);
    v10 = *(char *)(a3 + 23);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)a3;
    else
      v11 = *(const std::string::value_type **)a3;
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(a3 + 23);
    else
      v12 = *(_QWORD *)(a3 + 8);
    std::string::replace((std::string *)(a2 + 16), v9 - a4, a4, v11, v12);
  }
  return v8;
}

uint64_t SLMorph::MorphLookup(SLMorph *this, const char *a2, uint64_t a3, SLDictionary *a4, SLTokenBuilder *a5)
{
  size_t v9;
  size_t v10;
  uint64_t v11;
  std::string __p;
  std::string __dst;

  v9 = *((_QWORD *)this + 4);
  v10 = a3 - v9;
  std::string::basic_string[abi:ne180100](&__dst, (void *)&a2[a3 - v9], v9);
  if ((**(unsigned int (***)(SLDictionary *, const char *, size_t, SLTokenBuilder *, SLDictionary *))a4)(a4, a2, v10, a5, a4))
  {
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    else
      __p = __dst;
    v11 = SLMorph::RestoreSuffix((uint64_t)this, (uint64_t)a5, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v11 = 0;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return v11;
}

void sub_216FA43D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

BOOL SLMorph::POSFromSuffix(SLMorph *this, SLToken *a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v8;
  SLWordTagSet *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v3 = *((_QWORD *)a2 + 10);
  v4 = *((_QWORD *)a2 + 11);
  if (v4 != v3)
  {
    v8 = 0;
    v9 = (SLMorph *)((char *)this + 68);
    while (1)
    {
      v10 = *(_QWORD *)(v3 + 8 * v8);
      if ((*((_DWORD *)this + 16) & *(_DWORD *)v10) == 0
        || SLWordTagSet::find((SLWordTagSet *)(v10 + 4), 68) && !SLWordTagSet::find(v9, 68)
        || (a3 & 1) == 0 && SLWordTagSet::find((SLWordTagSet *)(v10 + 4), 64) && !SLWordTagSet::find(v9, 64)
        || SLWordTagSet::find((SLWordTagSet *)(v10 + 4), 72))
      {
        v11 = *((_QWORD *)a2 + 10);
        v12 = *((_QWORD *)a2 + 11);
        v13 = v11 + 8 * v8;
        v14 = v12 - (v13 + 8);
        if (v12 != v13 + 8)
          memmove((void *)(v11 + 8 * v8), (const void *)(v13 + 8), v12 - (v13 + 8));
        *((_QWORD *)a2 + 11) = v13 + v14;
        SLHomograph::~SLHomograph((SLHomograph *)v10);
        MEMORY[0x219A0649C]();
        goto LABEL_18;
      }
      v15 = *((_DWORD *)this + 15);
      if (v15 != **((_DWORD **)this + 5))
        goto LABEL_16;
      if ((*(_DWORD *)v10 & v15) == 0)
        break;
LABEL_17:
      ++v8;
LABEL_18:
      v3 = *((_QWORD *)a2 + 10);
      v4 = *((_QWORD *)a2 + 11);
      if (v8 >= (v4 - v3) >> 3)
        return v3 != v4;
    }
    v15 = 1;
LABEL_16:
    *(_DWORD *)v10 = v15;
    goto LABEL_17;
  }
  v3 = *((_QWORD *)a2 + 11);
  return v3 != v4;
}

char *SLMorph::AddAffix(char *this, SLToken *a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  char *v6;

  v2 = *((_QWORD *)a2 + 10);
  if (*((_QWORD *)a2 + 11) != v2)
  {
    v4 = (uint64_t)this;
    v5 = 0;
    v6 = this + 50;
    do
    {
      this = std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(*(_QWORD *)(v2 + 8 * v5) + 32, *(char **)(*(_QWORD *)(v2 + 8 * v5) + 40), v6, &v6[*(__int16 *)(v4 + 48)], *(__int16 *)(v4 + 48));
      ++v5;
      v2 = *((_QWORD *)a2 + 10);
    }
    while (v5 < (*((_QWORD *)a2 + 11) - v2) >> 3);
  }
  return this;
}

BOOL SLMorph::PrefixMatch(SLMorph *this, const char *a2, size_t a3)
{
  size_t v4;
  BOOL v5;
  unint64_t v6;

  v4 = *((_QWORD *)this + 4);
  v5 = a3 > v4;
  v6 = a3 - v4;
  return v5
      && v6 >= 3
      && strncasecmp_l(a2, *((const char **)this + 3), v4, *(locale_t *)(*((_QWORD *)this + 5) + 8)) == 0;
}

uint64_t SLMorph::PrefixMorphLookup(SLMorph *this, char *a2, uint64_t a3, uint64_t a4, SLDictionary *a5, SLTokenBuilder *a6)
{
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  std::string *p_dst;
  std::string::size_type size;
  uint64_t v17;
  std::string __dst;

  std::string::basic_string[abi:ne180100](&__dst, a2, *((_QWORD *)this + 4));
  v12 = *((_QWORD *)this + 4);
  v13 = &a2[v12];
  v14 = a3 - v12;
  if ((_DWORD)a4)
  {
    if (*v13 == 45)
    {
      std::string::push_back(&__dst, 45);
      ++v13;
      --v14;
      a4 = 1;
    }
    else
    {
      a4 = 0;
    }
  }
  if ((**(unsigned int (***)(SLDictionary *, const char *, uint64_t, SLTokenBuilder *, SLDictionary *))a5)(a5, v13, v14, a6, a5))
  {
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_dst = &__dst;
    else
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      size = __dst.__r_.__value_.__l.__size_;
    std::string::insert((std::string *)((char *)a6 + 16), 0, (const std::string::value_type *)p_dst, size);
    v17 = (*(uint64_t (**)(SLMorph *, _QWORD, uint64_t))(*(_QWORD *)this + 40))(this, *((_QWORD *)a6 + 5), a4);
  }
  else
  {
    v17 = 0;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return v17;
}

void sub_216FA4728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *SLMorph::PrefixAddAffix(char *this, SLToken *a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  char *v6;

  v2 = *((_QWORD *)a2 + 10);
  if (*((_QWORD *)a2 + 11) != v2)
  {
    v4 = (uint64_t)this;
    v5 = 0;
    v6 = this + 50;
    do
    {
      this = std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(*(_QWORD *)(v2 + 8 * v5) + 32, (char *)(*(_QWORD *)(*(_QWORD *)(v2 + 8 * v5) + 32) + 1), v6, &v6[*(__int16 *)(v4 + 48)], *(__int16 *)(v4 + 48));
      ++v5;
      v2 = *((_QWORD *)a2 + 10);
    }
    while (v5 < (*((_QWORD *)a2 + 11) - v2) >> 3);
  }
  return this;
}

uint64_t SLMorph_Apostrophe::MorphLookup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD), uint64_t a5)
{
  uint64_t result;

  result = (**a4)(a4, a2, a3 - 1, a5, a4);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 48))(a1, *(_QWORD *)(a5 + 40));
  return result;
}

SLMorphRulesEng *SLMorphRules::Create(SLMorphRules *this, const __CFLocale *a2)
{
  char v2;
  const __CFString *Value;

  v2 = (char)a2;
  Value = (const __CFString *)CFLocaleGetValue(this, (CFLocaleKey)*MEMORY[0x24BDBD418]);
  if (CFStringCompare(Value, CFSTR("en"), 0))
    SLMorphRules::Create();
  return SLCreateMorphRulesEng(v2);
}

SLFlatMorphRulesEng *SLMorphRules::CreateFlat(SLMorphRules *this, const __CFLocale *a2, SLDictionary *a3)
{
  char v3;
  const __CFString *Value;

  v3 = (char)a3;
  Value = (const __CFString *)CFLocaleGetValue(this, (CFLocaleKey)*MEMORY[0x24BDBD418]);
  if (CFStringCompare(Value, CFSTR("en"), 0))
    SLMorphRules::CreateFlat();
  return SLCreateFlatMorphRulesEng(a2, v3);
}

void SLMorphRules::~SLMorphRules(SLMorphRules *this)
{
  SLEncyclopedia::~SLEncyclopedia(this);
  JUMPOUT(0x219A0649CLL);
}

uint64_t SLFlatMorphRules::Lookup(SLFlatMorphRules *this, const char *a2, uint64_t a3, SLWordBuilder *a4, SLDictionary *a5)
{
  uint64_t v5;
  uint64_t result;

  v5 = *((_QWORD *)this + 3);
  if (!v5)
    return 0;
  do
  {
    result = (**(uint64_t (***)(uint64_t, const char *, uint64_t, SLWordBuilder *, _QWORD))v5)(v5, a2, a3, a4, *((_QWORD *)this + 5));
    if ((_DWORD)result)
      break;
    v5 = *(_QWORD *)(v5 + 8);
  }
  while (v5);
  return result;
}

void SLFlatMorphRules::~SLFlatMorphRules(SLFlatMorphRules *this)
{
  SLEncyclopedia::~SLEncyclopedia(this);
  JUMPOUT(0x219A0649CLL);
}

void SLMorph::~SLMorph(SLMorph *this)
{
  SLDictionary::~SLDictionary(this);
  JUMPOUT(0x219A0649CLL);
}

uint64_t SLMorph::POSFromSuffix(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 40))(a1, a2, 0);
}

void SLMorph_Apostrophe::~SLMorph_Apostrophe(SLMorph_Apostrophe *this)
{
  SLDictionary::~SLDictionary(this);
  JUMPOUT(0x219A0649CLL);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

char *std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(uint64_t a1, char *__dst, char *__src, char *a4, int64_t a5)
{
  char *v5;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  size_t v15;
  size_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  int64_t v25;
  char v26;
  char *v27;
  char *v28;
  size_t v29;
  char *v30;
  char *v31;
  char *v32;

  v5 = __dst;
  if (a5 < 1)
    return v5;
  v10 = *(char **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    v11 = *(char **)a1;
    v12 = (uint64_t)&v10[a5 - *(_QWORD *)a1];
    if (v12 < 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v13 = (char *)(__dst - v11);
    v14 = v9 - (_QWORD)v11;
    if (2 * v14 > v12)
      v12 = 2 * v14;
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
      v15 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v15 = v12;
    if (v15)
    {
      v16 = v15;
      v17 = (char *)operator new(v15);
    }
    else
    {
      v16 = 0;
      v17 = 0;
    }
    v27 = &v13[(_QWORD)v17];
    memcpy(&v13[(_QWORD)v17], __src, a5);
    v28 = &v13[(_QWORD)v17];
    v29 = v16;
    if (v11 != v5)
    {
      do
      {
        v13[(_QWORD)v17 - 1] = v13[(_QWORD)(v11 - 1)];
        --v13;
      }
      while (v13);
      v10 = *(char **)(a1 + 8);
      v28 = v17;
    }
    v30 = &v27[a5];
    v31 = &v17[v29];
    if (v10 != v5)
      memmove(v30, v5, v10 - v5);
    v32 = *(char **)a1;
    *(_QWORD *)a1 = v28;
    *(_QWORD *)(a1 + 8) = &v30[v10 - v5];
    *(_QWORD *)(a1 + 16) = v31;
    if (v32)
      operator delete(v32);
    return v27;
  }
  v18 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    v19 = &__src[a5];
    v21 = *(char **)(a1 + 8);
LABEL_17:
    v22 = &v5[a5];
    v23 = &v21[-a5];
    v24 = v21;
    if (&v21[-a5] < v10)
    {
      v25 = &v10[a5] - v21;
      v24 = v21;
      do
      {
        v26 = *v23++;
        *v24++ = v26;
        --v25;
      }
      while (v25);
    }
    *(_QWORD *)(a1 + 8) = v24;
    if (v21 != v22)
      memmove(&v5[a5], v5, v21 - v22);
    if (v19 != __src)
      memmove(v5, __src, v19 - __src);
    return v5;
  }
  v19 = &__src[v18];
  v20 = a4 - &__src[v18];
  if (a4 != &__src[v18])
    memmove(*(void **)(a1 + 8), &__src[v18], a4 - &__src[v18]);
  v21 = &v10[v20];
  *(_QWORD *)(a1 + 8) = &v10[v20];
  if (v18 >= 1)
    goto LABEL_17;
  return v5;
}

uint64_t SLUncompressedDict::CompareEntry(SLUncompressedDict *this, const char *a2, size_t a3, unsigned __int8 *a4)
{
  unsigned __int8 *v4;
  size_t v5;
  uint64_t result;

  v4 = a4 + 1;
  v5 = *a4;
  if (v5 >= a3)
  {
    LODWORD(result) = memcmp(v4, a2, a3);
    if ((_DWORD)result)
      return result;
    else
      return v5 > a3;
  }
  else
  {
    LODWORD(result) = memcmp(v4, a2, *a4);
    if ((_DWORD)result)
      return result;
    else
      return 0xFFFFFFFFLL;
  }
}

uint64_t SLUncompressedDict::EntryLength(SLUncompressedDict *this, unsigned __int8 *a2)
{
  return *a2 + 1;
}

uint64_t SLUncompressedDict::FindEntry(SLUncompressedDict *this, const char *a2, uint64_t a3)
{
  unsigned int *v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  int v24;

  v6 = (unsigned int *)*((_QWORD *)this + 3);
  LODWORD(v7) = v6[288];
  v8 = *((_DWORD *)this + 4);
  v9 = *((_DWORD *)this + 5);
  v10 = bswap32(v7);
  if (v8 == v9)
    v7 = v7;
  else
    v7 = v10;
  v11 = *(unsigned __int8 *)a2;
  if ((v11 - 65) > 0x19)
  {
    if ((char)v11 > 64)
    {
      v15 = bswap32(v6[29]);
      if (v8 == v9)
        v13 = v6[29];
      else
        v13 = v15;
      v14 = v6 + 3;
    }
    else
    {
      v13 = 0;
      v14 = v6 + 4;
    }
  }
  else
  {
    v12 = bswap32(v6[v11 - 65 + 4]);
    if (v8 == v9)
      v13 = v6[v11 - 65 + 4];
    else
      v13 = v12;
    v14 = &v6[v11 - 64 + 4];
  }
  v16 = *v14;
  v17 = bswap32(v16);
  if (v8 == v9)
    v18 = v16;
  else
    v18 = v17;
  if (v13 < v18)
  {
    v19 = (char *)v6 + v7;
    do
    {
      v20 = (v13 + v18) >> 1;
      LODWORD(v21) = *(_DWORD *)&v19[4 * v20];
      v22 = bswap32(v21);
      if (*((_DWORD *)this + 4) == *((_DWORD *)this + 5))
        v21 = v21;
      else
        v21 = v22;
      v23 = *((_QWORD *)this + 3) + v21;
      v24 = (*(uint64_t (**)(SLUncompressedDict *, const char *, uint64_t, uint64_t))(*(_QWORD *)this + 24))(this, a2, a3, v23);
      if (v24 <= 0)
      {
        if ((v24 & 0x80000000) == 0)
          return v23;
        v13 = v20 + 1;
        v20 = v18;
      }
      v18 = v20;
    }
    while (v13 < v20);
  }
  return 0;
}

uint64_t SLUncompressedDict::ExtractPOS(uint64_t this, int a2, SLWordBuilder *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;

  v4 = this;
  v5 = 0;
  v6 = 8 * a2 + 124;
  do
  {
    v7 = *(_WORD *)(*(_QWORD *)(v4 + 24) + v6 + v5);
    if (*(_DWORD *)(v4 + 16) != *(_DWORD *)(v4 + 20))
      LOBYTE(v7) = HIBYTE(*(_WORD *)(*(_QWORD *)(v4 + 24) + v6 + v5));
    if ((v7 > 0x20u || ((1 << v7) & 0x118000000) == 0) && v7 != 255)
      this = SLWordBuilder::AddPartOfSpeech((uint64_t)a3, v7 & 0x1F);
    v5 += 2;
  }
  while (v5 != 8);
  return this;
}

char *SLUncompressedDict::ExtractHomograph(SLUncompressedDict *this, char *a2, SLWordBuilder *a3)
{
  unsigned __int8 v6;
  int v7;
  char v8;

  (*(void (**)(SLWordBuilder *))(*(_QWORD *)a3 + 56))(a3);
  (*(void (**)(SLWordBuilder *, uint64_t))(*(_QWORD *)a3 + 72))(a3, 2);
  while (1)
  {
    v7 = *a2++;
    v6 = v7;
    v8 = v7;
    if (v7 < 0)
      break;
    if ((v8 & 0x40) != 0)
    {
      (*(void (**)(SLWordBuilder *, uint64_t))(*(_QWORD *)a3 + 72))(a3, 1);
      v6 &= ~0x40u;
    }
    (*(void (**)(SLWordBuilder *, _QWORD))(*(_QWORD *)a3 + 72))(a3, v6);
  }
  (*(void (**)(SLUncompressedDict *, _QWORD, SLWordBuilder *))(*(_QWORD *)this + 56))(this, v8 & 0x7F, a3);
  (*(void (**)(SLWordBuilder *))(*(_QWORD *)a3 + 96))(a3);
  return a2;
}

BOOL SLUncompressedDict::Lookup(SLUncompressedDict *this, const char *a2, uint64_t a3, SLWordBuilder *a4, SLDictionary *a5)
{
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;

  v9 = (*(uint64_t (**)(SLUncompressedDict *, const char *, uint64_t, SLWordBuilder *, SLDictionary *))(*(_QWORD *)this + 40))(this, a2, a3, a4, a5);
  if (v9)
  {
    v10 = v9 + (*(int (**)(SLUncompressedDict *, uint64_t))(*(_QWORD *)this + 32))(this, v9);
    (**(void (***)(SLWordBuilder *, const char *))a4)(a4, "Dictionary");
    (*(void (**)(SLWordBuilder *))(*(_QWORD *)a4 + 8))(a4);
    (*(void (**)(SLWordBuilder *, const char *, uint64_t))(*(_QWORD *)a4 + 16))(a4, a2, a3);
    v11 = (unsigned __int8 *)(*(uint64_t (**)(SLUncompressedDict *, uint64_t, SLWordBuilder *))(*(_QWORD *)this + 48))(this, v10, a4);
    if (*v11 == 255)
      (*(void (**)(SLUncompressedDict *, unsigned __int8 *, SLWordBuilder *))(*(_QWORD *)this + 48))(this, v11 + 1, a4);
    (*(void (**)(SLWordBuilder *))(*(_QWORD *)a4 + 48))(a4);
  }
  return v9 != 0;
}

void SLUncompressedDict::~SLUncompressedDict(SLUncompressedDict *this)
{
  SLDictionary::~SLDictionary(this);
  JUMPOUT(0x219A0649CLL);
}

_QWORD *SLPronouncer::Create(SLPronouncer *this, const __CFLocale *a2, const SLDictLookup *a3)
{
  const __CFString *Value;

  Value = (const __CFString *)CFLocaleGetValue(this, (CFLocaleKey)*MEMORY[0x24BDBD418]);
  if (CFStringCompare(Value, CFSTR("en"), 0))
    SLPronouncer::Create();
  return SLCreatePronouncerEng(a2);
}

void SLPronouncerImpl::MakePluralUnit(SLPronouncerImpl *this, SLToken *a2, SLToken *a3)
{
  if (a3)
  {
    SLToken::~SLToken(a3);
    JUMPOUT(0x219A0649CLL);
  }
}

uint64_t SLPronouncerImpl::AppendUnit(uint64_t a1, char **a2, _BYTE *a3, int a4, uint64_t a5, uint64_t a6)
{
  _QWORD **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD **v15;
  SLToken *v16;
  uint64_t v17;
  int v18;
  char *v19;
  uint64_t result;
  void *__p[2];
  uint64_t v22;
  _QWORD v23[2];

  if (a4)
  {
    SLTokenList::SLTokenList((SLTokenList *)__p);
    (*(void (**)(uint64_t, char **, void **, _QWORD, _QWORD))(*(_QWORD *)a1 + 232))(a1, a2, __p, 0, 0);
    v11 = (_QWORD **)__p[0];
    v12 = *((_QWORD *)__p[0] + 2);
    v13 = *(_QWORD *)__p[0];
    *(_QWORD *)(v13 + 8) = *((_QWORD *)__p[0] + 1);
    *v11[1] = v13;
    --v22;
    operator delete(v11);
    while (1)
    {
      v14 = v22;
      if (!v22)
        break;
      v15 = (_QWORD **)__p[0];
      v16 = (SLToken *)*((_QWORD *)__p[0] + 2);
      v17 = *(_QWORD *)__p[0];
      *(_QWORD *)(v17 + 8) = *((_QWORD *)__p[0] + 1);
      *v15[1] = v17;
      v22 = v14 - 1;
      operator delete(v15);
      if (v16)
      {
        SLToken::~SLToken(v16);
        MEMORY[0x219A0649C]();
      }
    }
    v19 = strpbrk(*a2, "|;");
    if (v19 && *v19 == 124)
    {
      v18 = 0;
      v23[1] = a2[1];
      v23[0] = v19 + 1;
      a2 = (char **)v23;
    }
    else
    {
      v18 = 1;
    }
    std::__list_imp<SLToken *>::clear(__p);
  }
  else
  {
    v18 = 0;
    v12 = 0;
  }
  a3[24] = 2;
  result = (*(uint64_t (**)(uint64_t, char **, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)a1 + 232))(a1, a2, a3, a5, a6);
  if (v18)
    result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 184))(a1, *(_QWORD *)(*(_QWORD *)a3 + 16));
  if (v12)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 264))(a1, *(_QWORD *)(*(_QWORD *)a3 + 16), v12);
  return result;
}

void sub_216FA5338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__list_imp<SLToken *>::clear(&a9);
  _Unwind_Resume(a1);
}

uint64_t SLPronouncerImpl::AppendUnitModifier(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void);

  v12 = result;
  if (a3 == 51)
  {
    v15 = *(uint64_t (**)(void))(*(_QWORD *)result + 216);
    goto LABEL_8;
  }
  if (a3 == 50)
  {
    v15 = *(uint64_t (**)(void))(*(_QWORD *)result + 216);
LABEL_8:
    result = v15();
    v13 = result;
    v14 = a6;
    if (!result)
      goto LABEL_10;
    goto LABEL_9;
  }
  if (a3 != 47)
    goto LABEL_10;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 216))(result, 228);
  v13 = result;
  v14 = a6 - 1;
  if (!result)
    goto LABEL_10;
LABEL_9:
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 232))(v12, v13, a5, v14, 1);
LABEL_10:
  if (a2)
  {
    *(_BYTE *)(a5 + 24) = 2;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 240))(v12, a2, a5, a4, a6, a7);
  }
  return result;
}

uint64_t SLPronouncerImpl::SymbolLookup(uint64_t a1, uint64_t a2, unint64_t a3, char *__s1)
{
  unint64_t v5;
  uint64_t v8;
  int v9;

  if (!a3)
    return 0;
  v5 = a3;
  while (1)
  {
    v8 = a2 + 16 * (v5 >> 1);
    v9 = strcmp(__s1, *(const char **)v8);
    if (!v9)
      break;
    if (v9 <= 0)
    {
      v5 >>= 1;
    }
    else
    {
      a2 = v8 + 16;
      v5 = (uint64_t)(16 * v5 - (16 * (v5 >> 1) + 16)) >> 4;
    }
    if (!v5)
      return 0;
  }
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 216))(a1, *(_QWORD *)(v8 + 8));
}

uint64_t SLPronouncerImpl::AppendSymbol(uint64_t result, uint64_t a2, SLTokenList *a3, void *a4, uint64_t a5)
{
  uint64_t v8;
  char *i;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __int16 v20;
  char *v21;
  void **v22;
  _WORD *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  __int16 v32;
  char *v33;
  char *v34;
  size_t v35;
  _BOOL4 v36;
  uint64_t v37;
  SLTokenList *v38;
  void *v39;
  SLToken *v40;
  void **v41;
  int v42;
  __int16 v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  __int16 v48;
  _DWORD v50[4];

  if (a2)
  {
    v8 = result;
    for (i = *(char **)a2; !*i || *i == 33; ++i)
      ;
    while (1)
    {
      v33 = strpbrk(i, " ;|");
      v34 = v33;
      if (v33)
      {
        v35 = v33 - i;
        v36 = *v33 != 32;
      }
      else
      {
        v35 = strlen(i);
        v36 = 1;
      }
      if (v35 != 1 || (*i & 0xFE) != 0x28)
        break;
      v37 = v8;
      v38 = a3;
      v39 = a4;
      v40 = (SLToken *)operator new();
      v41 = (void **)v40;
      if (*i == 40)
        v42 = 2;
      else
        v42 = 4;
      SLToken::SLToken(v40, 5, v42);
      v21 = (char *)v41[9];
      v22 = v41 + 7;
      v43 = *i;
      v17 = (char *)v41[8];
      if (v17 >= v21)
      {
        v10 = (char *)*v22;
        v11 = v17 - (_BYTE *)*v22;
        if (v11 <= -3)
          goto LABEL_66;
        v12 = v11 >> 1;
        v13 = v21 - v10;
        if (v13 <= (v11 >> 1) + 1)
          v14 = v12 + 1;
        else
          v14 = v13;
        if (v13 >= 0x7FFFFFFFFFFFFFFELL)
          v15 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (v15)
        {
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)(v41 + 9), v15);
          v10 = (char *)v41[7];
          v17 = (char *)v41[8];
        }
        else
        {
          v16 = 0;
        }
        v18 = &v16[2 * v12];
        *(_WORD *)v18 = v43;
        v19 = v18 + 2;
        while (v17 != v10)
        {
          v20 = *((_WORD *)v17 - 1);
          v17 -= 2;
          *((_WORD *)v18 - 1) = v20;
          v18 -= 2;
        }
        v21 = &v16[2 * v15];
        v41[7] = v18;
        v41[8] = v19;
        v41[9] = v21;
        if (v10)
        {
          operator delete(v10);
          v21 = (char *)v41[9];
        }
        v22 = v41 + 7;
      }
      else
      {
        *(_WORD *)v17 = v43;
        v19 = v17 + 2;
      }
      v41[8] = v19;
      if (v19 >= v21)
      {
        v24 = (char *)*v22;
        v25 = v19 - (_BYTE *)*v22;
        if (v25 <= -3)
LABEL_66:
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v26 = v25 >> 1;
        v27 = v21 - v24;
        if (v27 <= (v25 >> 1) + 1)
          v28 = v26 + 1;
        else
          v28 = v27;
        if (v27 >= 0x7FFFFFFFFFFFFFFELL)
          v29 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v29 = v28;
        if (v29)
        {
          v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)(v41 + 9), v29);
          v24 = (char *)v41[7];
          v19 = (char *)v41[8];
        }
        else
        {
          v30 = 0;
        }
        v31 = &v30[2 * v26];
        *(_WORD *)v31 = 0;
        v23 = v31 + 2;
        while (v19 != v24)
        {
          v32 = *((_WORD *)v19 - 1);
          v19 -= 2;
          *((_WORD *)v31 - 1) = v32;
          v31 -= 2;
        }
        v41[7] = v31;
        v41[8] = v23;
        v41[9] = &v30[2 * v29];
        if (v24)
          operator delete(v24);
      }
      else
      {
        *(_WORD *)v19 = 0;
        v23 = v19 + 2;
      }
      v41[8] = v23;
      a4 = v39;
      v41[4] = v39;
      v41[5] = 0;
      a3 = v38;
      result = (uint64_t)SLTokenList::push_back(v38, (SLToken *)v41);
      v8 = v37;
      if (v36)
        return result;
LABEL_44:
      i = v34 + 1;
    }
    v44 = operator new();
    SLToken::SLToken((SLToken *)v44, 0, !v36 | 8);
    if ((SLDictLookup::Lookup(*(SLDictLookup **)(v8 + 8), *(SLDictionary **)(*(_QWORD *)(v8 + 8) + 8), i, v35, (SLToken *)v44, 1) & 1) == 0)
    {
      result = SLDictLookup::Lookup(*(SLDictLookup **)(v8 + 8), *(SLDictionary **)(*(_QWORD *)(v8 + 8) + 16), i, v35, (SLToken *)v44, 0);
      if ((result & 1) == 0)
      {
LABEL_64:
        if (v36)
          return result;
        a5 = 0;
        goto LABEL_44;
      }
    }
    *(_QWORD *)(v44 + 32) = a4;
    *(_QWORD *)(v44 + 40) = a5;
    *(_BYTE *)(v44 + 3) = 1;
    v50[0] = 5046273;
    SLToken::SelectHomographs((SLToken *)v44, 0x7FFFFFFF, (const SLWordTagSet *)v50);
    v45 = *(_DWORD *)(a2 + 8);
    LOWORD(v50[0]) = 0;
    v46 = *(unsigned __int16 *)(a2 + 12);
    if (*(_WORD *)(a2 + 12))
    {
      LOWORD(v50[0]) = 1;
      HIWORD(v50[0]) = v46;
      v47 = 2;
    }
    else
    {
      v47 = 1;
    }
    v48 = *(_WORD *)(a2 + 14);
    if (v48)
    {
      LOWORD(v50[0]) = v47;
      *((_WORD *)v50 + v47) = v48;
    }
    else if (v45 == 0x7FFFFFFF && !v46)
    {
      goto LABEL_63;
    }
    SLToken::SelectHomographs((SLToken *)v44, v45, (const SLWordTagSet *)v50);
LABEL_63:
    result = (uint64_t)SLTokenList::push_back(a3, (SLToken *)v44);
    goto LABEL_64;
  }
  return result;
}

void sub_216FA588C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A0649C](v1, 0x10F0C4034644DEDLL);
  _Unwind_Resume(a1);
}

uint64_t SLPronouncerImpl::AppendAccentedCharacterSpelling(SLPronouncerImpl *this, unsigned int a2, SLTokenList *a3, uint64_t a4, uint64_t a5)
{
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;

  v7 = a2 & 0x3F | (SLChar::sUniMap[(unint64_t)a2 >> 6] << 6);
  v8 = (unsigned __int16)SLChar::sCharClass[v7];
  SLPronouncerImpl::AppendCharacterSpelling(this, SLChar::sFoldAll[v7] + a2, a3, a4, a5, (v8 & 0x9F) == 129);
  v9 = ((v8 >> 8) & 7) - 1;
  if (v9 > 6)
    v10 = 0;
  else
    v10 = (*(uint64_t (**)(SLPronouncerImpl *, uint64_t))(*(_QWORD *)this + 216))(this, v9 + 119);
  return (*(uint64_t (**)(SLPronouncerImpl *, uint64_t, SLTokenList *, _QWORD, _QWORD))(*(_QWORD *)this + 232))(this, v10, a3, 0, 0);
}

void SLPronouncerImpl::AppendCharacterSpelling(SLDictLookup **this, uint64_t a2, SLTokenList *a3, uint64_t a4, uint64_t a5, int a6)
{
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  std::string *p_p;
  uint64_t v15;
  uint64_t v16;
  std::string *v17;
  std::string::size_type size;
  int v20[4];
  std::string __p;

  v11 = (unint64_t)a2 >> 6;
  if (a6)
    v12 = 1;
  else
    v12 = (SLChar::sCharClass[a2 & 0x3F | (SLChar::sUniMap[v11] << 6)] & 0x9F) == 129;
  memset(&__p, 0, sizeof(__p));
  v13 = a2 & 0x3F | (SLChar::sUniMap[v11] << 6);
  SLChar::PushUTF8(&__p, (unsigned __int16)(SLChar::sToUpper[v13] + a2));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v15 = (*((uint64_t (**)(SLDictLookup **, std::string *))*this + 26))(this, p_p);
  if (v15)
  {
    (*((void (**)(SLDictLookup **, uint64_t, SLTokenList *, uint64_t, uint64_t))*this + 29))(this, v15, a3, a4, a5);
  }
  else
  {
    v16 = operator new();
    SLToken::SLToken((SLToken *)v16, 0, 0);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v17 = &__p;
    else
      v17 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    if (SLDictLookup::Lookup(this[1], *((SLDictionary **)this[1] + 1), (const char *)v17, size, (SLToken *)v16, 1))
    {
      *(_QWORD *)(v16 + 32) = a4;
      *(_QWORD *)(v16 + 40) = a5;
      v20[0] = 4980737;
      SLToken::SelectHomographs((SLToken *)v16, 0x7FFFFFFF, (const SLWordTagSet *)v20);
      if (!v12 && (SLChar::sCharClass[v13] & 0x1F) == 1)
        *(_DWORD *)(v16 + 16) |= 0x10u;
      SLTokenList::push_back(a3, (SLToken *)v16);
    }
    else
    {
      SLToken::~SLToken((SLToken *)v16);
      MEMORY[0x219A0649C]();
      if ((SLChar::sCharClass[v13] & 0x1F) != 1 || (SLChar::sCharClass[v13] & 0x700) == 0)
        (*((void (**)(SLDictLookup **, uint64_t, SLTokenList *, uint64_t, uint64_t))*this + 32))(this, a2, a3, a4, a5);
      else
        SLPronouncerImpl::AppendAccentedCharacterSpelling((SLPronouncerImpl *)this, a2, a3, a4, a5);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_216FA5BBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SLPronouncerImpl::PronounceCharByChar(SLDictLookup **this, SLToken *a2, SLTokenList *a3, char a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  SLTokenList *i;
  unint64_t v19;
  uint64_t v20;

  if ((a4 & 0x20) != 0)
    v7 = 2;
  else
    v7 = 1;
  v8 = -4;
  if ((*((_BYTE *)a2 + 18) & 8) == 0)
    v8 = -2;
  v9 = *((_QWORD *)a2 + 7);
  v10 = *((_QWORD *)a2 + 8) + v8;
  if (v9 != v10)
  {
    v12 = 0;
    v13 = 0;
    v14 = 2;
    if ((a4 & 0x20) != 0)
      v14 = 4;
    v19 = v14;
    v20 = *((_QWORD *)a2 + 4);
    do
    {
      v15 = *(unsigned __int16 *)(v9 + 2 * v13);
      if ((a4 & 0x40) != 0 || v15 >= 0x20)
      {
        if (v7 == v13
          && (v19 < ((uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 1) - 1 || (*((_BYTE *)a2 + 18) & 0x20) != 0)
          && *((_BYTE *)a2 + 2) != 4)
        {
          *((_BYTE *)a3 + 25) = 4;
        }
        if (a4 < 0 && (_DWORD)v15 == 38)
        {
          v16 = (*((uint64_t (**)(SLDictLookup **, uint64_t))*this + 27))(this, 118);
          (*((void (**)(SLDictLookup **, uint64_t, SLTokenList *, uint64_t, uint64_t))*this + 29))(this, v16, a3, v20 + v13, 1);
        }
        else if ((a4 & 0x20) == 0 || (v13 & 1) == 0)
        {
          SLPronouncerImpl::AppendCharacterSpelling(this, v15, a3, v20 + v13, v7, 0);
        }
      }
      ++v13;
      v12 += 2;
    }
    while (v9 + v12 != v10);
  }
  if (*((_QWORD *)a3 + 2))
  {
    v17 = *((_QWORD *)a3 + 1);
    *(_WORD *)(*(_QWORD *)(v17 + 16) + 1) = *(_WORD *)((char *)a2 + 1);
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 16) + 16) |= *((_DWORD *)a2 + 4) & 1;
    for (i = *(SLTokenList **)(v17 + 8); i != a3; i = (SLTokenList *)*((_QWORD *)i + 1))
      *(_BYTE *)(*((_QWORD *)i + 2) + 1) = 1;
    if ((*((_BYTE *)a2 + 18) & 8) != 0)
      (*((void (**)(SLDictLookup **))*this + 23))(this);
  }
}

uint64_t SLPronouncerImpl::PronouncePhoneNumber(SLDictLookup **this, SLToken *a2, SLTokenList *a3)
{
  unsigned __int16 *v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  SLDictLookup *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  *((_BYTE *)a3 + 24) = (*((uint64_t (**)(SLDictLookup **, uint64_t))*this + 21))(this, 1);
  v6 = (unsigned __int16 *)*((_QWORD *)a2 + 7);
  v7 = *((_QWORD *)a2 + 8) - 2;
  if (v6 != (unsigned __int16 *)v7)
  {
    v8 = 0;
    v9 = *((_QWORD *)a2 + 4);
    do
    {
      v10 = *v6;
      v11 = SLChar::sCharClass[v10 & 0x3F | (SLChar::sUniMap[v10 >> 6] << 6)] & 0x1F;
      if (v11 == 1)
      {
        SLPronouncerImpl::AppendCharacterSpelling(this, v10, a3, v9, 1, 0);
        *((_BYTE *)a3 + 24) = 1;
      }
      else if (v11 == 2)
      {
        if ((_DWORD)v10 == 56 && v8 <= 1 && (unint64_t)(v6 + 2) < v7 && v6[1] == 48 && v6[2] == 48)
        {
          v12 = (*((uint64_t (**)(SLDictLookup **, uint64_t))*this + 27))(this, 134);
          (*((void (**)(SLDictLookup **, uint64_t, SLTokenList *, uint64_t, uint64_t))*this + 29))(this, v12, a3, v9, 1);
          *((_BYTE *)a3 + 24) = 1;
          v13 = (*((uint64_t (**)(SLDictLookup **, uint64_t))*this + 27))(this, 155);
          (*((void (**)(SLDictLookup **, uint64_t, SLTokenList *, uint64_t, uint64_t))*this + 29))(this, v13, a3, v9 + 1, 2);
          *((_BYTE *)a3 + 24) = (*((uint64_t (**)(SLDictLookup **, _QWORD))*this + 21))(this, 0);
          v9 += 2;
          v8 += 2;
          v6 += 2;
        }
        else
        {
          v16 = (*((uint64_t (**)(SLDictLookup **, unint64_t))*this + 27))(this, v10 + 78);
          (*((void (**)(SLDictLookup **, uint64_t, SLTokenList *, uint64_t, uint64_t))*this + 29))(this, v16, a3, v9, 1);
          *((_BYTE *)a3 + 24) = 1;
        }
        ++v8;
      }
      else
      {
        v14 = *this;
        if ((_DWORD)v10 == 43)
        {
          v15 = (*((uint64_t (**)(SLDictLookup **, uint64_t))v14 + 27))(this, 218);
          (*((void (**)(SLDictLookup **, uint64_t, SLTokenList *, uint64_t, uint64_t))*this + 29))(this, v15, a3, v9, 1);
        }
        else
        {
          *((_BYTE *)a3 + 24) = (*((uint64_t (**)(SLDictLookup **, _QWORD))v14 + 21))(this, 0);
        }
      }
      ++v6;
      ++v9;
    }
    while (v6 != (unsigned __int16 *)v7);
  }
  result = (*((uint64_t (**)(SLDictLookup **, uint64_t))*this + 21))(this, 1);
  *((_BYTE *)a3 + 24) = result;
  return result;
}

SLDictLookup **SLPronouncerImpl::PronounceWordByWord(SLDictLookup **this, SLToken *a2, SLTokenList *a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  __int16 v22;
  _WORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  SLToken *v29;
  std::string *v30;
  std::string::size_type size;
  int v32;
  char v33;
  int v34;
  uint64_t v35;
  char v36;
  void **v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  __int16 v51;
  unint64_t v52;
  _WORD *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  __int16 v63;
  unint64_t v64;
  uint64_t v65;
  SLDictLookup **v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  std::string v73;

  v66 = this;
  v3 = (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 1;
  v4 = v3 - 1;
  if (v3 != 1)
  {
    v6 = 0;
    v7 = 0;
    v8 = v3 - 2;
    v64 = v3 - 3;
    v65 = v3 - 4;
    v67 = v3 - 1;
    v68 = v3 - 2;
    while (1)
    {
      if (v4 - v6 < 2)
      {
        v10 = 0;
      }
      else
      {
        v9 = *((_QWORD *)a2 + 7);
        if ((SLChar::sCharClass[*(_WORD *)(v9 + 2 * v6) & 0x3F | (SLChar::sUniMap[(unint64_t)*(unsigned __int16 *)(v9 + 2 * v6) >> 6] << 6)] & 0x9F) == 0x81)
        {
          v10 = 1;
        }
        else
        {
          v11 = *(unsigned __int16 *)(v9 + 2 * v6 + 2);
          v10 = (SLChar::sCharClass[v11 & 0x3F | (SLChar::sUniMap[v11 >> 6] << 6)] & 0x9F) == 129;
        }
      }
      if (v6 + 1 >= v4)
      {
        LOBYTE(v12) = 0;
        v19 = 0;
        v20 = 0;
        v14 = v6 + 1;
        goto LABEL_37;
      }
      v12 = 0;
      v13 = *((_QWORD *)a2 + 7);
      v14 = v6;
      while (1)
      {
        v15 = *(unsigned __int16 *)(v13 + 2 * v14 + 2);
        v16 = (unsigned __int16)SLChar::sCharClass[v15 & 0x3F | (SLChar::sUniMap[v15 >> 6] << 6)];
        if (v16 == 4)
          break;
        v17 = v16 & 0x9F;
        if (v10)
        {
          if (v17 != 129)
          {
            v19 = 0;
            v20 = 0;
            ++v14;
            goto LABEL_37;
          }
          v12 |= (v16 & 0x20) >> 5;
        }
        else if (v17 == 129)
        {
          if ((_DWORD)v15 == 115)
          {
            if (v64 == v14)
            {
              v19 = 0;
              goto LABEL_36;
            }
            v21 = *(unsigned __int16 *)(v13 + 2 * v14 + 4);
            v22 = SLChar::sCharClass[v21 & 0x3F | (SLChar::sUniMap[v21 >> 6] << 6)];
            if (v22 == 4)
            {
              v19 = 1;
              goto LABEL_36;
            }
            v19 = 0;
            if ((v22 & 0x9F) == 1)
            {
LABEL_36:
              v14 += 2;
              v20 = 1;
              goto LABEL_37;
            }
          }
          else
          {
            v19 = 0;
          }
          v20 = 0;
          goto LABEL_37;
        }
        if (v8 == ++v14)
        {
          v19 = 0;
          v20 = 0;
          v14 = v4;
          goto LABEL_37;
        }
      }
      if (v65 != v14)
      {
        v20 = 0;
        ++v14;
LABEL_30:
        v19 = 1;
        goto LABEL_37;
      }
      if (*(_WORD *)(v13 + 2 * v8) != 115)
      {
        v20 = 0;
        v14 = v64;
        goto LABEL_30;
      }
      v18 = (*((uint64_t (**)(SLDictLookup **))*v66 + 22))(v66);
      v20 = 0;
      v14 = v18 ? v4 : v64;
      v19 = v18 ^ 1u;
LABEL_37:
      if (v7 == 1)
        *((_BYTE *)a3 + 25) = 4;
      if (v6 || v14 != 2)
        break;
      v23 = (_WORD *)*((_QWORD *)a2 + 7);
      if (*v23 != 77 || v23[v6 + 1] != 99)
      {
        v6 = 0;
        v14 = 2;
LABEL_61:
        v32 = 0;
        if (v10)
          v33 = 0;
        else
          v33 = 11;
        if (v14 == v4)
          v32 = *((_DWORD *)a2 + 4) & 1;
        if ((v12 & 1) != 0)
          v34 = v32;
        else
          v34 = v32 | 0x100;
        if (v10)
          v32 = v34;
        if (v20)
          v32 |= 0x80000u;
        if (!v10)
        {
          if (v19 + v14 < v4 || (v34 = v32, (*((_BYTE *)a2 + 18) & 0x20) != 0))
            v34 = v32 | 0x200000;
        }
        v35 = operator new();
        SLToken::SLToken((SLToken *)v35, v33, v34);
        if (v6)
        {
          v36 = 1;
        }
        else
        {
          v36 = *((_BYTE *)a2 + 1);
          *(_BYTE *)(v35 + 2) = *((_BYTE *)a2 + 2);
        }
        v70 = v7;
        v72 = v19;
        *(_BYTE *)(v35 + 1) = v36;
        if (v14 <= v6)
        {
          v40 = *(char **)(v35 + 64);
        }
        else
        {
          v37 = (void **)(v35 + 56);
          v38 = (_QWORD *)(v35 + 72);
          v39 = *((_QWORD *)a2 + 7);
          v40 = *(char **)(v35 + 64);
          v41 = v6;
          do
          {
            if ((unint64_t)v40 >= *v38)
            {
              v42 = (char *)*v37;
              v43 = v40 - (_BYTE *)*v37;
              if (v43 <= -3)
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              v44 = v43 >> 1;
              v45 = *v38 - (_QWORD)v42;
              if (v45 <= (v43 >> 1) + 1)
                v46 = v44 + 1;
              else
                v46 = *v38 - (_QWORD)v42;
              if (v45 >= 0x7FFFFFFFFFFFFFFELL)
                v47 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v47 = v46;
              if (v47)
              {
                v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v35 + 72, v47);
                v42 = *(char **)(v35 + 56);
                v40 = *(char **)(v35 + 64);
              }
              else
              {
                v48 = 0;
              }
              v49 = &v48[2 * v44];
              *(_WORD *)v49 = *(_WORD *)(v39 + 2 * v41);
              v50 = v49 + 2;
              while (v40 != v42)
              {
                v51 = *((_WORD *)v40 - 1);
                v40 -= 2;
                *((_WORD *)v49 - 1) = v51;
                v49 -= 2;
              }
              *(_QWORD *)(v35 + 56) = v49;
              *(_QWORD *)(v35 + 64) = v50;
              *(_QWORD *)(v35 + 72) = &v48[2 * v47];
              if (v42)
                operator delete(v42);
              v40 = v50;
            }
            else
            {
              *(_WORD *)v40 = *(_WORD *)(v39 + 2 * v41);
              v40 += 2;
            }
            *(_QWORD *)(v35 + 64) = v40;
            v39 = *((_QWORD *)a2 + 7);
            if ((SLChar::sCharClass[*(_WORD *)(v39 + 2 * v41) & 0x3F | (SLChar::sUniMap[(unint64_t)*(unsigned __int16 *)(v39 + 2 * v41) >> 6] << 6)] & 0x5F) == 0x41)
              *(_DWORD *)(v35 + 16) |= 0x20u;
            ++v41;
          }
          while (v41 != v14);
        }
        v52 = *(_QWORD *)(v35 + 72);
        if ((unint64_t)v40 >= v52)
        {
          v55 = *(char **)(v35 + 56);
          v56 = v40 - v55;
          v54 = v70;
          v19 = v72;
          if (v40 - v55 <= -3)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v57 = v56 >> 1;
          v58 = v52 - (_QWORD)v55;
          if (v58 <= (v56 >> 1) + 1)
            v59 = v57 + 1;
          else
            v59 = v58;
          if (v58 >= 0x7FFFFFFFFFFFFFFELL)
            v60 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v60 = v59;
          if (v60)
          {
            v61 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v35 + 72, v60);
            v55 = *(char **)(v35 + 56);
            v40 = *(char **)(v35 + 64);
          }
          else
          {
            v61 = 0;
          }
          v62 = &v61[2 * v57];
          *(_WORD *)v62 = 0;
          v53 = v62 + 2;
          while (v40 != v55)
          {
            v63 = *((_WORD *)v40 - 1);
            v40 -= 2;
            *((_WORD *)v62 - 1) = v63;
            v62 -= 2;
          }
          *(_QWORD *)(v35 + 56) = v62;
          *(_QWORD *)(v35 + 64) = v53;
          *(_QWORD *)(v35 + 72) = &v61[2 * v60];
          if (v55)
            operator delete(v55);
        }
        else
        {
          *(_WORD *)v40 = 0;
          v53 = v40 + 2;
          v54 = v70;
          v19 = v72;
        }
        *(_QWORD *)(v35 + 64) = v53;
        *(_BYTE *)(v35 + 3) = 1;
        *(_QWORD *)(v35 + 32) = *((_QWORD *)a2 + 4) + v6;
        *(_QWORD *)(v35 + 40) = v14 - v6;
        this = (SLDictLookup **)SLTokenList::push_back(a3, (SLToken *)v35);
        if (v10)
          v7 = v54 + 1;
        else
          v7 = *(_QWORD *)(v35 + 40) + v54;
        v4 = v67;
        goto LABEL_126;
      }
      v24 = (*((uint64_t (**)(SLDictLookup **, uint64_t))*v66 + 27))(v66, 231);
      this = (SLDictLookup **)(*((uint64_t (**)(SLDictLookup **, uint64_t, SLTokenList *, _QWORD, uint64_t))*v66
                               + 29))(v66, v24, a3, *((_QWORD *)a2 + 4), 2);
      v25 = *(_QWORD *)(*(_QWORD *)a3 + 16);
      *(_DWORD *)(v25 + 16) &= ~8u;
      *(_BYTE *)(v25 + 5) = 1;
      v14 = 2;
LABEL_126:
      v6 = v19 + v14;
      v8 = v68;
      if (v19 + v14 >= v4)
        return this;
    }
    if (v6 && v14 < v4 && v14 - v6 == 1)
    {
      v71 = v19;
      v26 = *((_QWORD *)a2 + 7);
      v27 = *(unsigned __int16 *)(v26 + 2 * (v6 - 1));
      if (SLChar::sCharClass[v27 & 0x3F | (SLChar::sUniMap[v27 >> 6] << 6)] == 4
        && SLChar::sCharClass[*(_WORD *)(v26 + 2 * v14) & 0x3F | (SLChar::sUniMap[(unint64_t)*(unsigned __int16 *)(v26 + 2 * v14) >> 6] << 6)] == 4)
      {
        std::string::basic_string[abi:ne180100]<0>(&v73, "'");
        v28 = *(unsigned __int16 *)(*((_QWORD *)a2 + 7) + 2 * v6);
        SLChar::PushUTF8(&v73, (unsigned __int16)(SLChar::sToUpper[v28 & 0x3F | (SLChar::sUniMap[v28 >> 6] << 6)] + v28));
        std::string::push_back(&v73, 39);
        v29 = (SLToken *)operator new();
        SLToken::SLToken(v29, 0, 0);
        if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v30 = &v73;
        else
          v30 = (std::string *)v73.__r_.__value_.__r.__words[0];
        if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v73.__r_.__value_.__r.__words[2]);
        else
          size = v73.__r_.__value_.__l.__size_;
        if (SLDictLookup::Lookup(v66[1], *((SLDictionary **)v66[1] + 3), (const char *)v30, size, v29, 0))
        {
          v71 = 0;
          ++v14;
          v10 = 1;
          --v6;
        }
        SLToken::~SLToken(v29);
        MEMORY[0x219A0649C]();
        if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v73.__r_.__value_.__l.__data_);
      }
      v19 = v71;
    }
    goto LABEL_61;
  }
  return this;
}

void sub_216FA67DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  MEMORY[0x219A0649C](v23, 0x10F0C4034644DEDLL);
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void SLPronouncerImpl::PronounceURL(SLDictLookup **this, SLToken *a2, SLTokenList *a3)
{
  void **v5;
  char *v6;
  void **v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int16 v18;
  _WORD *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  CFIndex v34;
  uint64_t v35;
  CFIndex v36;
  unint64_t v37;
  unint64_t v38;
  __int16 v39;
  int v40;
  BOOL v41;
  std::string *p_str;
  int data;
  int v44;
  std::string::size_type size;
  std::string::size_type v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  SLToken *v56;
  uint64_t v57;
  SLToken *v58;
  SLToken *v59;
  uint64_t v60;
  SLToken *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  void **v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  __int16 v76;
  _WORD *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  __int16 v87;
  SLTokenList *i;
  _QWORD *v89;
  void **v90;
  uint64_t v91;
  unsigned __int16 v92;
  char v93;
  uint64_t v95;
  void *__p;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  std::string __str;
  std::string v101;
  CFRange v102;
  CFRange v103;
  CFRange v104;
  CFRange v105;

  v5 = (void **)operator new();
  SLToken::SLToken((SLToken *)v5, 15, 2);
  v6 = (char *)v5[9];
  v7 = v5 + 7;
  v8 = (char *)v5[8];
  if (v8 >= v6)
  {
    v10 = (char *)*v7;
    v11 = v8 - (_BYTE *)*v7;
    if (v11 <= -3)
      goto LABEL_150;
    v12 = v11 >> 1;
    v13 = v6 - v10;
    if (v13 <= (v11 >> 1) + 1)
      v14 = v12 + 1;
    else
      v14 = v13;
    if (v13 >= 0x7FFFFFFFFFFFFFFELL)
      v15 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    if (v15)
    {
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)(v5 + 9), v15);
      v10 = (char *)v5[7];
      v8 = (char *)v5[8];
    }
    else
    {
      v16 = 0;
    }
    v17 = &v16[2 * v12];
    v6 = &v16[2 * v15];
    *(_WORD *)v17 = 60;
    v9 = v17 + 2;
    while (v8 != v10)
    {
      v18 = *((_WORD *)v8 - 1);
      v8 -= 2;
      *((_WORD *)v17 - 1) = v18;
      v17 -= 2;
    }
    v5[7] = v17;
    v5[8] = v9;
    v5[9] = v6;
    if (v10)
    {
      operator delete(v10);
      v6 = (char *)v5[9];
    }
  }
  else
  {
    *(_WORD *)v8 = 60;
    v9 = v8 + 2;
  }
  v5[8] = v9;
  if (v9 < v6)
  {
    *(_WORD *)v9 = 0;
    v19 = v9 + 2;
    goto LABEL_35;
  }
  v20 = (char *)*v7;
  v21 = v9 - (_BYTE *)*v7;
  if (v21 <= -3)
LABEL_150:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v22 = v21 >> 1;
  v23 = v6 - v20;
  if (v23 <= (v21 >> 1) + 1)
    v24 = v22 + 1;
  else
    v24 = v23;
  if (v23 >= 0x7FFFFFFFFFFFFFFELL)
    v25 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v25 = v24;
  if (v25)
  {
    v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)(v5 + 9), v25);
    v20 = (char *)v5[7];
    v9 = (char *)v5[8];
  }
  else
  {
    v26 = 0;
  }
  v27 = &v26[2 * v22];
  v28 = &v26[2 * v25];
  *(_WORD *)v27 = 0;
  v19 = v27 + 2;
  while (v9 != v20)
  {
    v29 = *((_WORD *)v9 - 1);
    v9 -= 2;
    *((_WORD *)v27 - 1) = v29;
    v27 -= 2;
  }
  v5[7] = v27;
  v5[8] = v19;
  v5[9] = v28;
  if (v20)
    operator delete(v20);
LABEL_35:
  v5[8] = v19;
  v90 = v5;
  SLTokenList::push_back(a3, (SLToken *)v5);
  v31 = *((_QWORD *)a2 + 7);
  v30 = *((_QWORD *)a2 + 8);
  memset(&v101, 0, sizeof(v101));
  memset(&__str, 0, sizeof(__str));
  v32 = v30 - v31;
  if (v32)
  {
    v33 = 0;
    v34 = 0;
    v92 = 0;
    v89 = 0;
    v35 = v32 >> 1;
    v91 = (v32 >> 1) - 1;
    v93 = 1;
    v36 = v32 >> 1;
    while (1)
    {
      v37 = *(unsigned __int16 *)(*((_QWORD *)a2 + 7) + 2 * v34);
      v38 = v37 & 0x3F | (SLChar::sUniMap[v37 >> 6] << 6);
      v39 = SLChar::sCharClass[v38];
      v40 = v39 & 0x1F;
      if (v40 == 1)
      {
        SLChar::PushUTF8(&__str, (unsigned __int16)(SLChar::sToUpper[v38] + v37));
        v33 = 0;
        v41 = v36 == v35;
        if (v36 == v35)
          v36 = v34;
        v93 = ((v39 & 0x9F) != 1) & (v41 | v93);
        goto LABEL_104;
      }
      if (v36 != v35)
        break;
LABEL_86:
      if ((int)v37 > 46)
      {
        if ((_DWORD)v37 == 47)
        {
          if (v33 & 1 | (v92 == 58))
            goto LABEL_96;
          v62 = 2;
        }
        else
        {
          if ((_DWORD)v37 != 64)
            goto LABEL_96;
          v62 = 1;
        }
LABEL_95:
        *((_BYTE *)a3 + 24) = (*((uint64_t (**)(SLDictLookup **, uint64_t))*this + 35))(this, v62);
        goto LABEL_96;
      }
      if ((_DWORD)v37)
      {
        if ((_DWORD)v37 == 46)
        {
          v62 = 0;
          goto LABEL_95;
        }
LABEL_96:
        if (v40 != 2)
          *((_BYTE *)a3 + 25) = 4;
        SLPronouncerImpl::PronounceURLSymbol(this, v37, a3, v34 + *((_QWORD *)a2 + 4));
        if ((_DWORD)v37 == 47)
        {
          if ((v33 & 1) != 0)
            *((_BYTE *)a3 + 24) = (*((uint64_t (**)(SLDictLookup **, uint64_t))*this + 35))(this, 3);
          v33 = 1;
          v92 = 47;
        }
        else
        {
          v33 = 0;
          v92 = v37;
        }
      }
      v36 = v35;
LABEL_104:
      if (v35 == ++v34)
        goto LABEL_105;
    }
    v99 = 0;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      if (__str.__r_.__value_.__l.__size_ != 6)
        goto LABEL_51;
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) != 6)
        goto LABEL_51;
      p_str = &__str;
    }
    data = (int)p_str->__r_.__value_.__l.__data_;
    v44 = WORD2(p_str->__r_.__value_.__r.__words[0]);
    if (data == 1329807693 && v44 == 22611)
    {
      v58 = (SLToken *)operator new();
      SLToken::SLToken(v58, 0, 33024);
      v103.length = ~v36 + v34;
      v103.location = v36;
      SLToken::SetTokenRange(v58, a2, v103);
      SLTokenList::push_back(a3, v58);
      v59 = (SLToken *)operator new();
      SLToken::SLToken(v59, 11, 0);
      v104.location = v34 - 1;
      v104.length = 1;
      SLToken::SetTokenRange(v59, a2, v104);
      SLTokenList::push_back(a3, v59);
LABEL_83:
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        *__str.__r_.__value_.__l.__data_ = 0;
        __str.__r_.__value_.__l.__size_ = 0;
      }
      else
      {
        __str.__r_.__value_.__s.__data_[0] = 0;
        *((_BYTE *)&__str.__r_.__value_.__s + 23) = 0;
      }
      goto LABEL_86;
    }
LABEL_51:
    if (SLPronouncerImpl::IsURLDomain((uint64_t)this, (uint64_t)&__str, v92, v37, &v99))
    {
      if (v92 == 46)
      {
        size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = __str.__r_.__value_.__l.__size_;
        if (size == 2)
        {
          v47 = HIBYTE(v101.__r_.__value_.__r.__words[2]);
          if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v47 = v101.__r_.__value_.__l.__size_;
          if (v47)
          {
            v98 = 0;
            if (SLPronouncerImpl::IsURLDomain((uint64_t)this, (uint64_t)&v101, 46, 0, &v98))
            {
              v48 = v98;
              if (v98)
              {
                SLTokenList::SLTokenList((SLTokenList *)&v95);
                std::list<SLToken *>::splice((uint64_t)&v95, &v95, (uint64_t)a3, v89, a3);
                (*((void (**)(SLDictLookup **, uint64_t, SLTokenList *, _QWORD, _QWORD))*this + 29))(this, v48, a3, *(_QWORD *)(*((_QWORD *)__p + 2) + 32), *(_QWORD *)(*((_QWORD *)__p + 2) + 40));
                v49 = (uint64_t *)__p;
                if (*((_QWORD *)__p + 2))
                {
                  SLToken::~SLToken(*((SLToken **)__p + 2));
                  MEMORY[0x219A0649C]();
                  v49 = (uint64_t *)__p;
                }
                v50 = *v49;
                *(_QWORD *)(v50 + 8) = v49[1];
                *(_QWORD *)v49[1] = v50;
                --v97;
                operator delete(v49);
                v51 = v97;
                if (v97)
                {
                  v53 = v95;
                  v52 = __p;
                  v54 = *(_QWORD *)__p;
                  *(_QWORD *)(v54 + 8) = *(_QWORD *)(v95 + 8);
                  **(_QWORD **)(v53 + 8) = v54;
                  v55 = *(_QWORD *)a3;
                  *(_QWORD *)(v55 + 8) = v52;
                  *v52 = v55;
                  *(_QWORD *)a3 = v53;
                  *(_QWORD *)(v53 + 8) = a3;
                  *((_QWORD *)a3 + 2) += v51;
                  v97 = 0;
                }
                std::__list_imp<SLToken *>::clear(&v95);
              }
              else
              {
                v60 = v89[2];
                *(_BYTE *)v60 = 11;
                *(_DWORD *)(v60 + 16) = *(_DWORD *)(v60 + 16) & 0xFFDF7EFF | 0x200000;
              }
            }
          }
        }
      }
      if (v99)
      {
        (*((void (**)(SLDictLookup **, uint64_t, SLTokenList *, CFIndex, CFIndex))*this + 29))(this, v99, a3, *((_QWORD *)a2 + 4) + v36, v34 - v36);
      }
      else
      {
        v61 = (SLToken *)operator new();
        SLToken::SLToken(v61, 11, 0);
        v105.location = v36;
        v105.length = v34 - v36;
        SLToken::SetTokenRange(v61, a2, v105);
        if (v91 != v34)
          *((_DWORD *)v61 + 4) |= 0x200000u;
        SLTokenList::push_back(a3, v61);
      }
    }
    else
    {
      v56 = (SLToken *)operator new();
      SLToken::SLToken(v56, 0, 33024);
      v57 = 2;
      if ((v93 & 1) == 0)
        v57 = 3;
      if (v34 - v36 < v57)
      {
        SLToken::SetType(v56, 11);
        if (v91 != v34)
          *((_DWORD *)v56 + 4) |= 0x200000u;
      }
      v102.location = v36;
      v102.length = v34 - v36;
      SLToken::SetTokenRange(v56, a2, v102);
      SLTokenList::push_back(a3, v56);
      if (v92 == 46)
      {
        v89 = *(_QWORD **)a3;
        std::string::operator=(&v101, &__str);
      }
      else if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
      {
        *v101.__r_.__value_.__l.__data_ = 0;
        v101.__r_.__value_.__l.__size_ = 0;
      }
      else
      {
        v101.__r_.__value_.__s.__data_[0] = 0;
        *((_BYTE *)&v101.__r_.__value_.__s + 23) = 0;
      }
    }
    goto LABEL_83;
  }
LABEL_105:
  v63 = operator new();
  SLToken::SLToken((SLToken *)v63, 15, 4);
  v64 = *(char **)(v63 + 72);
  v65 = (void **)(v63 + 56);
  v66 = *(char **)(v63 + 64);
  if (v66 >= v64)
  {
    v68 = (char *)*v65;
    v69 = v66 - (_BYTE *)*v65;
    if (v69 <= -3)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v70 = v69 >> 1;
    v71 = v64 - v68;
    if (v71 <= (v69 >> 1) + 1)
      v72 = v70 + 1;
    else
      v72 = v71;
    if (v71 >= 0x7FFFFFFFFFFFFFFELL)
      v73 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v73 = v72;
    if (v73)
    {
      v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v63 + 72, v73);
      v68 = *(char **)(v63 + 56);
      v66 = *(char **)(v63 + 64);
    }
    else
    {
      v74 = 0;
    }
    v75 = &v74[2 * v70];
    v64 = &v74[2 * v73];
    *(_WORD *)v75 = 62;
    v67 = v75 + 2;
    while (v66 != v68)
    {
      v76 = *((_WORD *)v66 - 1);
      v66 -= 2;
      *((_WORD *)v75 - 1) = v76;
      v75 -= 2;
    }
    *(_QWORD *)(v63 + 56) = v75;
    *(_QWORD *)(v63 + 64) = v67;
    *(_QWORD *)(v63 + 72) = v64;
    if (v68)
    {
      operator delete(v68);
      v64 = *(char **)(v63 + 72);
    }
  }
  else
  {
    *(_WORD *)v66 = 62;
    v67 = v66 + 2;
  }
  *(_QWORD *)(v63 + 64) = v67;
  if (v67 >= v64)
  {
    v78 = (char *)*v65;
    v79 = v67 - (_BYTE *)*v65;
    if (v79 <= -3)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v80 = v79 >> 1;
    v81 = v64 - v78;
    if (v81 <= (v79 >> 1) + 1)
      v82 = v80 + 1;
    else
      v82 = v81;
    if (v81 >= 0x7FFFFFFFFFFFFFFELL)
      v83 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v83 = v82;
    if (v83)
    {
      v84 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v63 + 72, v83);
      v78 = *(char **)(v63 + 56);
      v67 = *(char **)(v63 + 64);
    }
    else
    {
      v84 = 0;
    }
    v85 = &v84[2 * v80];
    v86 = &v84[2 * v83];
    *(_WORD *)v85 = 0;
    v77 = v85 + 2;
    while (v67 != v78)
    {
      v87 = *((_WORD *)v67 - 1);
      v67 -= 2;
      *((_WORD *)v85 - 1) = v87;
      v85 -= 2;
    }
    *(_QWORD *)(v63 + 56) = v85;
    *(_QWORD *)(v63 + 64) = v77;
    *(_QWORD *)(v63 + 72) = v86;
    if (v78)
      operator delete(v78);
  }
  else
  {
    *(_WORD *)v67 = 0;
    v77 = v67 + 2;
  }
  *(_QWORD *)(v63 + 64) = v77;
  SLTokenList::push_back(a3, (SLToken *)v63);
  if (*((_QWORD *)a3 + 2) <= 5uLL)
  {
    *((_DWORD *)v90 + 4) |= 0x400u;
    *(_DWORD *)(v63 + 16) |= 0x400u;
    for (i = *(SLTokenList **)(*((_QWORD *)a3 + 1) + 8); i != a3; i = (SLTokenList *)*((_QWORD *)i + 1))
    {
      if (*(unsigned __int8 *)(*((_QWORD *)i + 2) + 1) >= 3u)
        *(_BYTE *)(*((_QWORD *)i + 2) + 1) = (*((uint64_t (**)(SLDictLookup **, uint64_t))*this + 35))(this, 4);
    }
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v101.__r_.__value_.__l.__data_);
}

void sub_216FA71F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  std::__list_imp<SLToken *>::clear(&a15);
  if (a26 < 0)
    operator delete(__p);
  if (*(char *)(v26 - 81) < 0)
    operator delete(*(void **)(v26 - 104));
  _Unwind_Resume(a1);
}

uint64_t SLPronouncerImpl::IsURLDomain(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t *a5)
{
  void **v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v18[2];
  uint64_t v19;
  void *__p[2];
  uint64_t v21;

  *a5 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v21 = 0;
  if (a4 != 46)
  {
LABEL_13:
    if (a3 != 46 || ((a4 - 33) > 0x1F || ((1 << (a4 - 33)) & 0x82004011) == 0) && a4)
      goto LABEL_30;
    std::operator+<char>();
    if (SHIBYTE(v21) < 0)
      operator delete(__p[0]);
    v21 = v19;
    *(_OWORD *)__p = *(_OWORD *)v18;
    v13 = v19 >= 0 ? __p : (void **)__p[0];
    v14 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 208))(a1, v13);
    *a5 = v14;
    if (!v14)
    {
      v15 = *(unsigned __int8 *)(a2 + 23);
      if ((v15 & 0x80u) != 0)
        v15 = *(_QWORD *)(a2 + 8);
      if (v15 >= 3)
        goto LABEL_30;
    }
LABEL_28:
    v16 = 1;
    goto LABEL_31;
  }
  if ((a3 - 33) <= 0x1F && ((1 << (a3 - 33)) & 0x82004011) != 0 || !a3)
  {
    std::operator+<char>();
    if (SHIBYTE(v21) < 0)
      operator delete(__p[0]);
    v21 = v19;
    *(_OWORD *)__p = *(_OWORD *)v18;
    HIBYTE(v19) = 0;
    LOBYTE(v18[0]) = 0;
    if (v21 >= 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    v11 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 208))(a1, v10);
    *a5 = v11;
    if (v11)
      goto LABEL_28;
    v12 = *(unsigned __int8 *)(a2 + 23);
    if ((v12 & 0x80u) != 0)
      v12 = *(_QWORD *)(a2 + 8);
    if (v12 < 3)
      goto LABEL_28;
    goto LABEL_13;
  }
LABEL_30:
  v16 = 0;
LABEL_31:
  if (SHIBYTE(v21) < 0)
    operator delete(__p[0]);
  return v16;
}

void sub_216FA74D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t std::list<SLToken *>::splice(uint64_t result, uint64_t *a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  if (a4 != a5)
  {
    v5 = (_QWORD *)*a5;
    if (result != a3)
    {
      v6 = 1;
      if (v5 != a4)
      {
        v7 = a4;
        do
        {
          v7 = (_QWORD *)v7[1];
          ++v6;
        }
        while (v7 != v5);
      }
      *(_QWORD *)(a3 + 16) -= v6;
      *(_QWORD *)(result + 16) += v6;
    }
    v8 = *a4;
    *(_QWORD *)(v8 + 8) = v5[1];
    *(_QWORD *)v5[1] = v8;
    v9 = *a2;
    *(_QWORD *)(v9 + 8) = a4;
    *a4 = v9;
    *a2 = (uint64_t)v5;
    v5[1] = a2;
  }
  return result;
}

void SLPronouncerImpl::PronounceURLSymbol(SLDictLookup **this, uint64_t a2, SLTokenList *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  _BYTE v9[4];

  v6 = a2;
  if (a2 >= 0x80)
  {
    if (SLChar::sCharClass[a2 & 0x3F | (SLChar::sUniMap[(unint64_t)a2 >> 6] << 6)] != 6)
      goto LABEL_6;
    v6 = 45;
  }
  v9[0] = 47;
  v9[2] = 0;
  v9[1] = v6;
  v8 = (*((uint64_t (**)(SLDictLookup **, _BYTE *))*this + 26))(this, v9);
  if (v8)
  {
    (*((void (**)(SLDictLookup **, uint64_t, SLTokenList *, uint64_t, uint64_t))*this + 29))(this, v8, a3, a4, 1);
    return;
  }
LABEL_6:
  SLPronouncerImpl::AppendCharacterSpelling(this, v6, a3, a4, 1, 0);
}

_QWORD *SLPronouncerImpl::PronounceNumber(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  _QWORD *result;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v9 = *(unsigned __int8 *)a4;
  v10 = 10 * *(unsigned __int8 *)a4 + 20;
  v11 = a4[2];
  if (v11 > v10 || (v12 = a4[6], v12 > 5) || (v15 = a4[4], v16 = v15 | v12, !v9) && !v16 && a4[7] >= 0xF4241uLL)
  {
    v17 = operator new();
    SLToken::SLToken((SLToken *)v17, 11, 0);
    *(_DWORD *)(v17 + 16) = *(_DWORD *)(a2 + 16) & 1;
    v18 = *(_OWORD *)(v17 + 56);
    *(_OWORD *)(v17 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a2 + 56) = v18;
    v19 = *(_QWORD *)(v17 + 72);
    *(_QWORD *)(v17 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a2 + 72) = v19;
    *(_OWORD *)(v17 + 32) = *(_OWORD *)(a2 + 32);
    result = operator new(0x18uLL);
    v21 = *(_QWORD **)(a3 + 8);
    v22 = *(_QWORD *)(a3 + 16);
    *result = a3;
    result[1] = v21;
    result[2] = v17;
    *v21 = result;
    *(_QWORD *)(a3 + 8) = result;
    *(_QWORD *)(a3 + 16) = v22 + 1;
    return result;
  }
  if (v9)
    v23 = a5 | 0x20;
  else
    v23 = a5;
  if (v16)
  {
    v24 = v23 | 0x100;
    *(_WORD *)(a3 + 24) = *(_WORD *)(a2 + 1);
    v25 = (_BYTE *)(a3 + 24);
    if (v15)
    {
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 56))(a1, a2, a4[1]);
      v26 = a4[7];
      if (v26 > 0x14 || (uint64_t)a4[4] >= 5)
        *v25 = (*(uint64_t (**)(uint64_t, BOOL))(*(_QWORD *)a1 + 168))(a1, v26 > 0x4E20);
      v27 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 216))(a1, 209);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 232))(a1, v27, a3, *(_QWORD *)(a2 + 32) + a4[3] - 1, 1);
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, a2, a4[3], a4[4], a3, v24, a6);
      goto LABEL_24;
    }
  }
  else
  {
    if (v23 & 3 | a6)
    {
      v24 = v23 | 0x100;
      *(_BYTE *)(a3 + 24) = *(_BYTE *)(a2 + 1);
      v25 = (_BYTE *)(a3 + 24);
    }
    else
    {
      *(_BYTE *)(a3 + 24) = *(_BYTE *)(a2 + 1);
      v25 = (_BYTE *)(a3 + 24);
      v24 = v23;
    }
    *(_BYTE *)(a3 + 25) = *(_BYTE *)(a2 + 2);
  }
  if ((v24 & 0x200) != 0)
  {
    v28 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 216))(a1, 219);
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 232))(a1, v28, a3, 0, 0);
    (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, a2, a4[1], a4[2], a3, v24, a6);
    v29 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 216))(a1, 227);
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 232))(a1, v29, a3, 0, 0);
  }
  else
  {
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, a2, a4[1], v11, a3, v24, a6);
  }
LABEL_24:
  if (a4[6])
  {
    *(_BYTE *)(a3 + 24) = (*(uint64_t (**)(uint64_t, BOOL))(*(_QWORD *)a1 + 168))(a1, a4[7] > 0x4E20uLL);
    v30 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 216))(a1, 213);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 232))(a1, v30, a3, *(_QWORD *)(a2 + 32) + a4[5] - 1, 1);
    v31 = a4[5];
    if (*(_WORD *)(*(_QWORD *)(a2 + 56) + 2 * v31) == 43)
      v32 = v31 + 1;
    else
      v32 = a4[5];
    v33 = a4[6] - (*(_WORD *)(*(_QWORD *)(a2 + 56) + 2 * v31) == 43);
    v24 = v24 & 2 | (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1);
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 56))(a1, a2, v32, v33, a3, v24 | 0x100, 0);
  }
  if ((v24 & 2) != 0)
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 184))(a1, *(_QWORD *)(*(_QWORD *)a3 + 16));
  if (a4[7] > 0x3E7uLL || (uint64_t)a4[4] > 1 || a4[6])
  {
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 168))(a1, 0);
    *v25 = (_BYTE)result;
  }
  return result;
}

void sub_216FA7A68(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A0649C](v1, 0x10F0C4034644DEDLL);
  _Unwind_Resume(a1);
}

void SLPronouncerImpl::PronounceFraction(SLPronouncerImpl *this, SLToken *a2, SLTokenList *a3)
{
  uint64_t v6;
  std::string *p_p;
  char **v8;
  char **v9;
  char *v10;
  _QWORD v11[3];
  std::string __p;

  if ((*((_BYTE *)a2 + 17) & 4) != 0)
  {
    v6 = (*(uint64_t (**)(SLPronouncerImpl *, uint64_t))(*(_QWORD *)this + 216))(this, 210);
    (*(void (**)(SLPronouncerImpl *, uint64_t, SLTokenList *, _QWORD, _QWORD))(*(_QWORD *)this + 232))(this, v6, a3, 0, 0);
  }
  memset(&__p, 0, sizeof(__p));
  SLChar::PushUTF8(&__p, **((unsigned __int16 **)a2 + 7));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v8 = (char **)(*(uint64_t (**)(SLPronouncerImpl *, std::string *))(*(_QWORD *)this + 208))(this, p_p);
  v9 = v8;
  if ((*((_BYTE *)a2 + 17) & 4) != 0)
  {
    v10 = strchr(*v8, 59);
    if (v10)
    {
      v11[1] = v9[1];
      v11[0] = v10 + 1;
      v9 = (char **)v11;
    }
  }
  (*(void (**)(SLPronouncerImpl *, char **, SLTokenList *, _QWORD, uint64_t))(*(_QWORD *)this + 232))(this, v9, a3, *((_QWORD *)a2 + 4), 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_216FA7B98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *SLPronouncerImpl::PronounceRoman(SLPronouncerImpl *this, SLToken *a2, CFRange a3, unint64_t a4, SLTokenList *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  void **v14;
  char *v15;
  __int16 v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  _WORD *v26;
  __int16 v27;
  __int16 v28;
  unint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  __int16 v40;
  unsigned int v41;
  unint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  __int16 v53;
  __int16 v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  __int16 v65;
  _WORD *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  __int16 v76;
  uint64_t v77;
  CFIndex v78;
  uint64_t v79;
  _QWORD **v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  CFIndex v84;
  CFIndex length;
  uint64_t v87;
  void *__p;
  uint64_t v89;

  length = a3.length;
  if ((*((_BYTE *)a2 + 18) & 0x40) != 0)
  {
    v13 = (*(uint64_t (**)(SLPronouncerImpl *, uint64_t, CFIndex))(*(_QWORD *)this + 216))(this, 219, a3.location);
    (*(void (**)(SLPronouncerImpl *, uint64_t, SLTokenList *, _QWORD, _QWORD))(*(_QWORD *)this + 232))(this, v13, a5, 0, 0);
  }
  v14 = (void **)((char *)a2 + 56);
  v15 = (char *)*((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 8) = v15;
  if (a4 < 0x3E8)
  {
    v18 = a4;
  }
  else
  {
    v16 = (char)(a4 / 0x3E8 + 48);
    v17 = *((_QWORD *)a2 + 9);
    if ((unint64_t)v15 >= v17)
    {
      v19 = v17 - (_QWORD)v15;
      if (v19 <= 1)
        v20 = 1;
      else
        v20 = v19;
      if (v19 >= 0x7FFFFFFFFFFFFFFELL)
        v21 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v21 = v20;
      v22 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)a2 + 72, v21);
      v23 = (char *)*((_QWORD *)a2 + 7);
      v24 = (char *)*((_QWORD *)a2 + 8);
      v26 = &v22[v25];
      *v22 = v16;
      v15 = (char *)(v22 + 1);
      while (v24 != v23)
      {
        v27 = *((_WORD *)v24 - 1);
        v24 -= 2;
        *--v22 = v27;
      }
      *((_QWORD *)a2 + 7) = v22;
      *((_QWORD *)a2 + 8) = v15;
      *((_QWORD *)a2 + 9) = v26;
      if (v23)
        operator delete(v23);
    }
    else
    {
      *(_WORD *)v15 = v16;
      v15 += 2;
    }
    *((_QWORD *)a2 + 8) = v15;
    v18 = a4 % 0x3E8;
  }
  if (a4 > 0x3E7 || v18 >= 0x64)
  {
    v28 = ((unsigned __int16)v18 / 0x64u) | 0x30;
    v29 = *((_QWORD *)a2 + 9);
    if ((unint64_t)v15 >= v29)
    {
      v31 = (char *)*v14;
      v32 = v15 - (_BYTE *)*v14;
      if (v32 <= -3)
        goto LABEL_100;
      v33 = v32 >> 1;
      v34 = v29 - (_QWORD)v31;
      if (v34 <= (v32 >> 1) + 1)
        v35 = v33 + 1;
      else
        v35 = v34;
      if (v34 >= 0x7FFFFFFFFFFFFFFELL)
        v36 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v36 = v35;
      if (v36)
      {
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)a2 + 72, v36);
        v31 = (char *)*((_QWORD *)a2 + 7);
        v15 = (char *)*((_QWORD *)a2 + 8);
      }
      else
      {
        v37 = 0;
      }
      v38 = &v37[2 * v33];
      v39 = &v37[2 * v36];
      *(_WORD *)v38 = v28;
      v30 = v38 + 2;
      while (v15 != v31)
      {
        v40 = *((_WORD *)v15 - 1);
        v15 -= 2;
        *((_WORD *)v38 - 1) = v40;
        v38 -= 2;
      }
      *((_QWORD *)a2 + 7) = v38;
      *((_QWORD *)a2 + 8) = v30;
      *((_QWORD *)a2 + 9) = v39;
      if (v31)
        operator delete(v31);
    }
    else
    {
      *(_WORD *)v15 = v28;
      v30 = v15 + 2;
    }
    *((_QWORD *)a2 + 8) = v30;
    v18 %= 0x64uLL;
    v15 = v30;
  }
  else if (v18 < 0xA)
  {
    goto LABEL_59;
  }
  v41 = v18 / 0xAu + 48;
  v42 = *((_QWORD *)a2 + 9);
  if ((unint64_t)v15 >= v42)
  {
    v44 = (char *)*v14;
    v45 = v15 - (_BYTE *)*v14;
    if (v45 <= -3)
      goto LABEL_100;
    v46 = v45 >> 1;
    v47 = v42 - (_QWORD)v44;
    if (v47 <= (v45 >> 1) + 1)
      v48 = v46 + 1;
    else
      v48 = v47;
    if (v47 >= 0x7FFFFFFFFFFFFFFELL)
      v49 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v49 = v48;
    if (v49)
    {
      v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)a2 + 72, v49);
      v44 = (char *)*((_QWORD *)a2 + 7);
      v15 = (char *)*((_QWORD *)a2 + 8);
    }
    else
    {
      v50 = 0;
    }
    v51 = &v50[2 * v46];
    v52 = &v50[2 * v49];
    *(_WORD *)v51 = v41;
    v43 = v51 + 2;
    while (v15 != v44)
    {
      v53 = *((_WORD *)v15 - 1);
      v15 -= 2;
      *((_WORD *)v51 - 1) = v53;
      v51 -= 2;
    }
    *((_QWORD *)a2 + 7) = v51;
    *((_QWORD *)a2 + 8) = v43;
    *((_QWORD *)a2 + 9) = v52;
    if (v44)
      operator delete(v44);
  }
  else
  {
    *(_WORD *)v15 = v41;
    v43 = v15 + 2;
  }
  *((_QWORD *)a2 + 8) = v43;
  v18 %= 0xAuLL;
  v15 = v43;
LABEL_59:
  v54 = v18 | 0x30;
  v55 = (char *)*((_QWORD *)a2 + 9);
  if (v15 >= v55)
  {
    v57 = (char *)*v14;
    v58 = v15 - (_BYTE *)*v14;
    if (v58 <= -3)
      goto LABEL_100;
    v59 = v58 >> 1;
    v60 = v55 - v57;
    if (v60 <= (v58 >> 1) + 1)
      v61 = v59 + 1;
    else
      v61 = v60;
    if (v60 >= 0x7FFFFFFFFFFFFFFELL)
      v62 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v62 = v61;
    if (v62)
    {
      v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)a2 + 72, v62);
      v57 = (char *)*((_QWORD *)a2 + 7);
      v15 = (char *)*((_QWORD *)a2 + 8);
    }
    else
    {
      v63 = 0;
    }
    v64 = &v63[2 * v59];
    v55 = &v63[2 * v62];
    *(_WORD *)v64 = v54;
    v56 = v64 + 2;
    while (v15 != v57)
    {
      v65 = *((_WORD *)v15 - 1);
      v15 -= 2;
      *((_WORD *)v64 - 1) = v65;
      v64 -= 2;
    }
    *((_QWORD *)a2 + 7) = v64;
    *((_QWORD *)a2 + 8) = v56;
    *((_QWORD *)a2 + 9) = v55;
    if (v57)
    {
      operator delete(v57);
      v55 = (char *)*((_QWORD *)a2 + 9);
    }
  }
  else
  {
    *(_WORD *)v15 = v54;
    v56 = v15 + 2;
  }
  *((_QWORD *)a2 + 8) = v56;
  if (v56 < v55)
  {
    *(_WORD *)v56 = 0;
    v66 = v56 + 2;
    goto LABEL_93;
  }
  v67 = (char *)*v14;
  v68 = v56 - (_BYTE *)*v14;
  if (v68 <= -3)
LABEL_100:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v69 = v68 >> 1;
  v70 = v55 - v67;
  if (v70 <= (v68 >> 1) + 1)
    v71 = v69 + 1;
  else
    v71 = v70;
  if (v70 >= 0x7FFFFFFFFFFFFFFELL)
    v72 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v72 = v71;
  if (v72)
  {
    v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)a2 + 72, v72);
    v67 = (char *)*((_QWORD *)a2 + 7);
    v56 = (char *)*((_QWORD *)a2 + 8);
  }
  else
  {
    v73 = 0;
  }
  v74 = &v73[2 * v69];
  v75 = &v73[2 * v72];
  *(_WORD *)v74 = 0;
  v66 = v74 + 2;
  while (v56 != v67)
  {
    v76 = *((_WORD *)v56 - 1);
    v56 -= 2;
    *((_WORD *)v74 - 1) = v76;
    v74 -= 2;
  }
  *((_QWORD *)a2 + 7) = v74;
  *((_QWORD *)a2 + 8) = v66;
  *((_QWORD *)a2 + 9) = v75;
  if (v67)
    operator delete(v67);
LABEL_93:
  *((_QWORD *)a2 + 8) = v66;
  v77 = (((uint64_t)v66 - *((_QWORD *)a2 + 7)) >> 1) - 1;
  SLTokenList::SLTokenList((SLTokenList *)&v87);
  (*(void (**)(SLPronouncerImpl *, SLToken *, _QWORD, uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)this + 56))(this, a2, 0, v77, &v87, a6, a7);
  v78 = length + a7;
  while (1)
  {
    v79 = v89;
    if (!v89)
      break;
    v80 = (_QWORD **)__p;
    v81 = *((_QWORD *)__p + 2);
    v82 = *(_QWORD *)__p;
    *(_QWORD *)(v82 + 8) = *((_QWORD *)__p + 1);
    *v80[1] = v82;
    v89 = v79 - 1;
    operator delete(v80);
    *(_DWORD *)(v81 + 16) |= 0x10u;
    if (v89)
    {
      v83 = 0;
      v84 = 0;
    }
    else
    {
      v83 = *((_QWORD *)a2 + 4);
      v84 = v78;
    }
    *(_QWORD *)(v81 + 32) = v83;
    *(_QWORD *)(v81 + 40) = v84;
    SLTokenList::push_back(a5, (SLToken *)v81);
  }
  return std::__list_imp<SLToken *>::clear(&v87);
}

void sub_216FA80F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::__list_imp<SLToken *>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t SLPronouncerImpl::PronounceInteger(uint64_t this, SLToken *a2, CFRange a3, SLTokenList *a4, unint64_t a5, uint64_t a6)
{
  CFIndex length;
  CFIndex location;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CFIndex v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  CFIndex v18;
  SLTokenList *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, SLTokenList *, uint64_t, uint64_t);
  uint64_t v27;
  SLTokenList *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  int v35;
  SLTokenList *v36;
  uint64_t v37;
  CFIndex v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  char *v52;
  uint64_t v53;
  int v55;
  uint64_t v56;
  uint64_t v57;
  _BOOL4 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  CFIndex v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  int v86;
  char v87;
  unint64_t v88;

  length = a3.length;
  location = a3.location;
  v10 = this;
  if (a3.length < 1)
  {
    v19 = a4;
    v18 = a3.location;
    goto LABEL_13;
  }
  v11 = 0;
  v12 = 0;
  v13 = 2 * a3.location;
  v14 = 1;
  while (1)
  {
    v15 = *((_QWORD *)a2 + 7);
    v16 = *(unsigned __int16 *)(v15 + v13 + 2 * v11);
    switch(v16)
    {
      case '#':
        v17 = 217;
        break;
      case '-':
        v17 = 214;
        break;
      case '+':
        v17 = 216;
        break;
      default:
        goto LABEL_22;
    }
    this = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 216))(v10, v17);
    if (!this)
      break;
    this = (*(uint64_t (**)(uint64_t, uint64_t, SLTokenList *, CFIndex, uint64_t))(*(_QWORD *)v10 + 232))(v10, this, a4, location + v11 + *((_QWORD *)a2 + 4), 1);
    v12 -= 2;
    ++v11;
    --v14;
    if (length + v14 <= 1)
    {
      length = 0;
      v18 = location + v11;
      v19 = a4;
LABEL_13:
      v87 = a5;
      v20 = *((_QWORD *)a2 + 7);
      goto LABEL_14;
    }
  }
  v15 = *((_QWORD *)a2 + 7);
  v16 = *(unsigned __int16 *)(v15 + v13 + 2 * v11);
LABEL_22:
  v31 = length - v11;
  v32 = location + v11;
  if ((a5 & 0x100) == 0 && v16 == 48)
  {
    v33 = (a5 & 0x10) == 0 && length - 2 == v11;
    v34 = (a5 >> 3) & 1;
    if (v33)
      LODWORD(v34) = 1;
    if (v31 >= 2 && (_DWORD)v34)
    {
      v35 = *(unsigned __int16 *)(v15 + v13 + 2 * v11 + 2);
      v36 = a4;
      if (v35 != 48)
      {
        v32 = location + v11 + 1;
        v37 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 216))(v10, 136);
        v36 = a4;
        (*(void (**)(uint64_t, uint64_t, SLTokenList *, CFIndex, uint64_t))(*(_QWORD *)v10 + 232))(v10, v37, a4, location + v11 + *((_QWORD *)a2 + 4), 1);
        v31 = ~v11 + length;
      }
    }
    else
    {
      v36 = a4;
    }
    do
    {
      v73 = v32 + *((_QWORD *)a2 + 4);
      v74 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 216))(v10, *(char *)(*((_QWORD *)a2 + 7) + 2 * v32) + 78);
      this = (*(uint64_t (**)(uint64_t, uint64_t, SLTokenList *, uint64_t, uint64_t))(*(_QWORD *)v10 + 232))(v10, v74, v36, v73, 1);
      ++v32;
      --v31;
    }
    while (v31);
    return this;
  }
  v38 = v13 - v12;
  v39 = -v11;
  v20 = *((_QWORD *)a2 + 7);
  v18 = v32 + v31;
  v19 = a4;
  v87 = a5;
  while (*(_WORD *)(v20 + v38) == 48)
  {
    --v39;
    v38 += 2;
    if (length + v39 + 1 <= 1)
    {
      length = 0;
LABEL_14:
      v21 = (char *)(v20 + 2 * v18);
      v22 = *((_QWORD *)a2 + 4) + v18;
LABEL_15:
      LOBYTE(v23) = 0;
      switch(length)
      {
        case 0:
          if ((v87 & 4) != 0)
            return this;
          if ((v87 & 1) != 0)
            v24 = 167;
          else
            v24 = 126;
          v25 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 216))(v10, v24);
          v26 = *(uint64_t (**)(uint64_t, uint64_t, SLTokenList *, uint64_t, uint64_t))(*(_QWORD *)v10 + 232);
          v27 = v10;
          v28 = v19;
          v29 = v22 - 1;
          v30 = a6 + 1;
          return v26(v27, v25, v28, v29, v30);
        case 1:
          v61 = v87 & 1;
          v62 = a6 + 1;
          goto LABEL_77;
        case 2:
          v64 = *(unsigned __int16 *)v21;
          if (v64 != 48)
            goto LABEL_111;
          if (*((_WORD *)v21 + 1) == 48)
            return this;
          LOBYTE(v64) = 48;
          goto LABEL_111;
        case 3:
          goto LABEL_98;
        default:
          v23 = 0;
          v40 = (unint64_t)(v87 & 0x20) >> 5;
          v41 = (v40 + 3);
          break;
      }
      while (1)
      {
        v42 = 48;
        v43 = 48;
        switch(length % v41)
        {
          case 0:
          case 3:
            v44 = *v21;
            v21 += 2;
            v42 = v44;
            ++v22;
            goto LABEL_41;
          case 1:
            goto LABEL_42;
          case 2:
LABEL_41:
            v45 = *v21;
            v21 += 2;
            v43 = v45;
            ++v22;
LABEL_42:
            v47 = *v21;
            v21 += 2;
            v46 = v47;
            v48 = v22 + 1;
            break;
          default:
            v48 = v22;
            v43 = 48;
            v46 = 48;
            break;
        }
        v49 = (length - 1) / v41;
        v21 += 2 * v40;
        v22 = v48 + v40;
        length = (int)v41 * (int)v49 - (int)v40;
        if (v42 != 48 || v43 != 48 || v46 != 48)
        {
          v86 = v23;
          v88 = v48 + v40;
          v50 = v42;
          v51 = v43;
          SLPronouncerImpl::PronounceThreeDigits(v10, v42, v43, v46, v48 - 3, (uint64_t)v19, 0, 0);
          if ((int)length < 1)
          {
LABEL_56:
            *((_BYTE *)v19 + 24) = 2;
            if ((v87 & 1) != 0)
            {
              v56 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 216))(v10, (int)v49 + 195);
LABEL_97:
              v22 = v48 + v40;
              (*(void (**)(uint64_t, uint64_t, SLTokenList *, unint64_t, CFIndex))(*(_QWORD *)v10 + 232))(v10, v56, v19, v88, length + a6);
              LOBYTE(v23) = v86;
LABEL_98:
              v75 = *((unsigned __int16 *)v21 + 1);
              if (v75 == 48 && *((_WORD *)v21 + 2) == 48)
                return SLPronouncerImpl::PronounceThreeDigits(v10, *v21, 48, 48, v22, (uint64_t)v19, v87, a6);
              v76 = *(unsigned __int16 *)v21;
              if (v76 == 48)
              {
                if ((v23 & 1) == 0)
                  goto LABEL_109;
              }
              else
              {
                v77 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 216))(v10, (char)v76 + 78);
                (*(void (**)(uint64_t, uint64_t, SLTokenList *, uint64_t, uint64_t))(*(_QWORD *)v10 + 232))(v10, v77, v19, v22, 1);
                *((_BYTE *)v19 + 24) = 2;
                v78 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 216))(v10, 155);
                (*(void (**)(uint64_t, uint64_t, SLTokenList *, uint64_t, _QWORD))(*(_QWORD *)v10 + 232))(v10, v78, v19, -1, 0);
                v75 = *((unsigned __int16 *)v21 + 1);
              }
              if (v75 == 48)
                v79 = 211;
              else
                v79 = 1167;
              v80 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 216))(v10, v79);
              (*(void (**)(uint64_t, uint64_t, SLTokenList *, uint64_t, _QWORD))(*(_QWORD *)v10 + 232))(v10, v80, v19, -1, 0);
              LOBYTE(v75) = v21[2];
LABEL_109:
              v81 = v21[4];
              v82 = v22 + 1;
              v83 = (char)v75;
              v84 = v10;
              return SLPronouncerImpl::PronounceTwoDigits(v84, v83, v81, v82, (uint64_t)v19, v87, a6);
            }
            v55 = 0;
          }
          else
          {
            v52 = v21;
            while (1)
            {
              v53 = *(unsigned __int16 *)v52;
              if (v53 <= 0xFF
                && (_DWORD)v53 != 48
                && (*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v53 + 60) & 0x400) != 0)
              {
                break;
              }
              v52 += 2;
              if (v52 >= &v21[2 * length])
                goto LABEL_56;
            }
            *((_BYTE *)v19 + 24) = 2;
            v55 = 1;
          }
          v56 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 216))(v10, (int)v49 + 155);
          if (!v55)
          {
            v19 = a4;
            goto LABEL_97;
          }
          v19 = a4;
          if ((v87 & 0x20) != 0)
            v57 = v88 - 1;
          else
            v57 = v48;
          (*(void (**)(uint64_t, uint64_t, SLTokenList *, uint64_t, unint64_t))(*(_QWORD *)v10 + 232))(v10, v56, a4, v57, v40);
          v60 = (int)v49 > 1 || v50 > 48 || v51 > 49;
          if (((v60 | v86) & 1) != 0)
            *((_BYTE *)a4 + 24) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 168))(v10, 0);
          v23 = 1;
          v22 = v48 + v40;
        }
        if ((int)length <= 3)
          goto LABEL_98;
      }
    }
  }
  v65 = a5;
  v21 = (char *)(v20 + v38);
  v66 = *((_QWORD *)a2 + 4);
  v22 = location + v66 - v39;
  length += v39;
  if ((v65 & 0x80) == 0 || length != 3)
    goto LABEL_15;
  if (*(_WORD *)(v20 + v38 + 2) == 48 && !*(_WORD *)(v20 + v38 + 4))
  {
    LOBYTE(v23) = 0;
    goto LABEL_98;
  }
  v67 = *v21;
  v68 = location + v66 - v39;
  v69 = v68 + 1;
  v61 = v87 & 1;
  v62 = a6 + 1;
  v70 = 119;
  if ((v87 & 1) == 0)
    v70 = 78;
  v71 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 216))(v10, v67 + v70);
  (*(void (**)(uint64_t, uint64_t, SLTokenList *, uint64_t, uint64_t))(*(_QWORD *)v10 + 232))(v10, v71, a4, v22, v62);
  v64 = *(unsigned __int16 *)(v20 + v38 + 2);
  if (v64 != 48)
  {
    v21 = (char *)(v20 + v38 + 2);
    v22 = v69;
LABEL_111:
    v81 = v21[2];
    v83 = (char)v64;
    v84 = v10;
    v82 = v22;
    return SLPronouncerImpl::PronounceTwoDigits(v84, v83, v81, v82, (uint64_t)v19, v87, a6);
  }
  v72 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 216))(v10, 136);
  v22 = v68 + 2;
  (*(void (**)(uint64_t, uint64_t, SLTokenList *, CFIndex, uint64_t))(*(_QWORD *)v10 + 232))(v10, v72, a4, v68 + 1, 1);
  v21 = (char *)(v20 + v38 + 4);
LABEL_77:
  v63 = 119;
  if (!v61)
    v63 = 78;
  v25 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 216))(v10, *v21 + v63);
  v26 = *(uint64_t (**)(uint64_t, uint64_t, SLTokenList *, uint64_t, uint64_t))(*(_QWORD *)v10 + 232);
  v27 = v10;
  v28 = v19;
  v29 = v22;
  v30 = v62;
  return v26(v27, v25, v28, v29, v30);
}

uint64_t SLPronouncerImpl::PronounceOneDigit(uint64_t a1, int a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v9 = a6 + 1;
  v10 = 119;
  if ((a5 & 1) == 0)
    v10 = 78;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 216))(a1, v10 + a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 232))(a1, v11, a4, a3, v9);
}

uint64_t SLPronouncerImpl::PronounceTwoDigits(uint64_t result, int a2, int a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, _QWORD);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v12 = result;
  if (a2 != 48)
  {
    if (a2 == 49)
    {
      v13 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 216);
      v14 = a7 + 2;
      if ((a6 & 1) != 0)
        v15 = a3 + 129;
      else
        v15 = a3 + 89;
      goto LABEL_17;
    }
    v16 = *(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 216);
    if (a3 == 48 && (a6 & 1) != 0)
    {
      v17 = v16(result, (a2 + 137));
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 232))(v12, v17, a5, a4, a7 + 2);
    }
    v18 = v16(result, a2 + 97);
    if (a3 == 48)
      v19 = a7 + 2;
    else
      v19 = 1;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 232))(v12, v18, a5, a4, v19);
  }
  if (a3 == 48)
    return result;
  *(_BYTE *)(a5 + 24) = 2;
  ++a4;
  v13 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 216);
  v14 = a7 + 1;
  v20 = 119;
  if ((a6 & 1) == 0)
    v20 = 78;
  v15 = v20 + a3;
LABEL_17:
  v21 = v13(v12, v15);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 232))(v12, v21, a5, a4, v14);
}

uint64_t SLPronouncerImpl::PronounceThreeDigits(uint64_t result, int a2, int a3, int a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v14;
  _BOOL4 v16;
  uint64_t v17;
  char v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v14 = result;
  v16 = a3 != 48 || a4 != 48;
  if (a2 >= 49)
  {
    v17 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 216))(result, a2 + 78);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 232))(v14, v17, a6, a5, 1);
    *(_BYTE *)(a6 + 24) = 2;
    v18 = (a7 & 1) == 0 || v16;
    v19 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 216);
    if ((v18 & 1) == 0)
    {
      v26 = v19(v14, 195);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 232))(v14, v26, a6, a5 + 1, a8 + 2);
    }
    v20 = v19(v14, 155);
    if (v16)
      v21 = 0;
    else
      v21 = a8 + 2;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 232))(v14, v20, a6, a5 + 1, v21);
  }
  if (a3 != 48)
    return SLPronouncerImpl::PronounceTwoDigits(v14, a3, a4, a5 + 1, a6, a7, a8);
  if (a4 != 48)
  {
    v22 = a5 + 2;
    v23 = a8 + 1;
    v24 = 119;
    if ((a7 & 1) == 0)
      v24 = 78;
    v25 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 216))(v14, v24 + a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 232))(v14, v25, a6, v22, v23);
  }
  return result;
}

uint64_t SLPronouncerImpl::PronounceDigits(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  char *v17;
  BOOL v18;
  __int16 v19;
  BOOL v20;
  char v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  char v29;

  v29 = 0;
  v28 = 0;
  v7 = a4 - 1;
  if (a4 >= 1)
  {
    v11 = result;
    v12 = 0;
    v13 = *(_QWORD *)(a2 + 56) + 2 * a3;
    v14 = 119;
    if ((a6 & 1) == 0)
      v14 = 78;
    v26 = v14;
    v27 = a7 + 1;
    while (1)
    {
      v15 = v12 % 3;
      if ((_DWORD)v12)
      {
        if (!v15 && v7 != v12)
          *(_BYTE *)(a5 + 24) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 168))(v11, 0);
      }
      v17 = (char *)&v28 - 3 * (v12 / 3);
      v18 = !v15 && v7 == v12;
      v19 = *(_WORD *)(v13 + 2 * v12);
      v20 = !v18 && *(unsigned __int16 *)(v13 + 2 * v12) == v17[v12];
      v21 = v20 ? 2 : 3;
      *(_BYTE *)(a5 + 25) = v21;
      v17[v12] = v19;
      v22 = a3 + v12 + *(_QWORD *)(a2 + 32);
      v23 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 216);
      if (v7 == v12)
        break;
      v24 = v23(v11, (char)v19 + 78);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 232))(v11, v24, a5, v22, 1);
      ++v12;
    }
    v25 = v23(v11, v26 + (char)v19);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 232))(v11, v25, a5, v22, v27);
  }
  return result;
}

_QWORD *SLPronouncerImpl::PronounceMoney(uint64_t a1, char **a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t *a10)
{
  unsigned int v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD v35[4];
  __int128 v36;

  v17 = *a5;
  v36 = *(_OWORD *)a2;
  v18 = strchr(*a2, 59);
  SLTokenList::SLTokenList((SLTokenList *)v35);
  if (a5[3])
  {
    if (!v18)
      goto LABEL_9;
  }
  else
  {
    *((_QWORD *)a5 + 4) = 0;
    if (!v18)
      goto LABEL_9;
  }
  if (*((_QWORD *)a5 + 4) == 2 && !a6 && !*((_QWORD *)a5 + 6) && *((_QWORD *)a5 + 2) <= 10 * v17 + 20)
  {
    if (*((_QWORD *)a5 + 7))
    {
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 56))(a1, a4, *((_QWORD *)a5 + 1));
      (*(void (**)(uint64_t, __int128 *, uint64_t *, BOOL, _QWORD, _QWORD))(*(_QWORD *)a1 + 240))(a1, &v36, a10, *((_QWORD *)a5 + 7) != 1, *(_QWORD *)(a3 + 32), *(_QWORD *)(a3 + 40));
      *((_BYTE *)a10 + 24) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 168))(a1, 0);
      v27 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 216))(a1, 339);
      (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)a1 + 232))(a1, v27, a10, *(_QWORD *)(a4 + 32) + *((_QWORD *)a5 + 4) - 1, 1);
      v28 = *((_QWORD *)a5 + 4);
    }
    else
    {
      v28 = 2;
    }
    if (*a5)
      v29 = 32;
    else
      v29 = 256;
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)a1 + 56))(a1, a4, *((_QWORD *)a5 + 3), v28, a10, v29, 0);
    *(_QWORD *)&v36 = v18 + 1;
    if (*((_QWORD *)a5 + 7))
    {
      v30 = 0;
      v31 = 0;
    }
    else
    {
      v30 = *(_QWORD *)(a3 + 32);
      v31 = *(_QWORD *)(a3 + 40);
    }
    (*(void (**)(uint64_t, __int128 *, uint64_t *, BOOL, uint64_t, uint64_t))(*(_QWORD *)a1 + 240))(a1, &v36, a10, a5[1] == 0, v30, v31);
    goto LABEL_21;
  }
LABEL_9:
  (*(void (**)(uint64_t, uint64_t, uint64_t *, unsigned __int8 *, uint64_t, _QWORD))(*(_QWORD *)a1 + 48))(a1, a4, a10, a5, 256, 0);
  if (a6)
  {
    SLTokenList::SLTokenList((SLTokenList *)&v32);
    (*(void (**)(uint64_t, uint64_t, uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 240))(a1, a6, &v32, 0, a7, a8);
    if (v34)
    {
      SLToken::SetCapitalization(v33[2], a9);
      v19 = v34;
      if (v34)
      {
        v21 = v32;
        v20 = v33;
        v22 = *v33;
        *(_QWORD *)(v22 + 8) = *(_QWORD *)(v32 + 8);
        **(_QWORD **)(v21 + 8) = v22;
        v23 = *a10;
        *(_QWORD *)(v23 + 8) = v20;
        *v20 = v23;
        *a10 = v21;
        *(_QWORD *)(v21 + 8) = a10;
        a10[2] += v19;
        v34 = 0;
      }
    }
    std::__list_imp<SLToken *>::clear(&v32);
  }
  if (a6)
    v24 = 1;
  else
    v24 = a5[2] == 0;
  v25 = v24;
  (*(void (**)(uint64_t, __int128 *, uint64_t *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 240))(a1, &v36, a10, v25, *(_QWORD *)(a3 + 32), *(_QWORD *)(a3 + 40));
LABEL_21:
  *((_BYTE *)a10 + 24) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 168))(a1, 0);
  return std::__list_imp<SLToken *>::clear(v35);
}

void sub_216FA9198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::__list_imp<SLToken *>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t SLPronouncerImpl::PronounceYear(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  __int16 *v11;
  uint64_t v12;
  _BOOL4 v13;
  int v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;

  v11 = (__int16 *)(*(_QWORD *)(a2 + 56) + 2 * a4);
  v12 = *(_QWORD *)(a2 + 32) + a4;
  v13 = v11[2] == 48 && v11[3] == 48;
  v14 = (unsigned __int16)v11[1];
  v15 = *v11;
  if (v14 == 48)
  {
    v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 216))(a1, (char)v15 + 78);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 232))(a1, v16, a3, v12, 1);
    v17 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 216))(a1, 156);
    if (v13)
      v18 = a7 + 3;
    else
      v18 = 1;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 232))(a1, v17, a3, v12 + 1, v18);
    if (!v13)
    {
      v20 = *((char *)v11 + 4);
      v21 = *((char *)v11 + 6);
      v22 = v12 + 2;
      v23 = a1;
      goto LABEL_18;
    }
  }
  else
  {
    SLPronouncerImpl::PronounceTwoDigits(a1, (char)v15, (char)v14, v12, a3, 0, 0);
    if (v13)
    {
      v24 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 216))(a1, 155);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 232))(a1, v24, a3, v12 + 2, a7 + 2);
      if ((a6 & 2) != 0)
        return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 184))(a1, *(_QWORD *)(*(_QWORD *)a3 + 16));
      return result;
    }
    v25 = (unsigned __int16)v11[2];
    if (v25 != 48)
    {
      v21 = *((char *)v11 + 6);
      v20 = (char)v25;
      v23 = a1;
      v22 = v12 + 2;
LABEL_18:
      result = SLPronouncerImpl::PronounceTwoDigits(v23, v20, v21, v22, a3, 0, a7);
      if ((a6 & 2) != 0)
        return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 184))(a1, *(_QWORD *)(*(_QWORD *)a3 + 16));
      return result;
    }
    v26 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 216))(a1, 136);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 232))(a1, v26, a3, v12 + 2, 1);
    v27 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 216))(a1, *((char *)v11 + 6) + 78);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 232))(a1, v27, a3, v12 + 3, a7 + 1);
  }
  if ((a6 & 2) != 0)
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 184))(a1, *(_QWORD *)(*(_QWORD *)a3 + 16));
  return result;
}

uint64_t SLPronouncerImpl::PronounceDate(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = (*(uint64_t (**)(uint64_t *, _QWORD))(*a1 + 296))(a1, *(unsigned __int8 *)(a4 + 4));
  (*(void (**)(uint64_t *, uint64_t, uint64_t, _QWORD, _QWORD))(*a1 + 232))(a1, v8, a3, *(_QWORD *)(a4 + 24) + *(_QWORD *)(a2 + 32), *(_QWORD *)(a4 + 32));
  (*(void (**)(uint64_t *, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD))(*a1 + 56))(a1, a2, *(_QWORD *)(a4 + 40), *(_QWORD *)(a4 + 48), a3, 257, 0);
  *(_BYTE *)(a3 + 24) = (*(uint64_t (**)(uint64_t *, _QWORD))(*a1 + 168))(a1, 0);
  v9 = *(_QWORD *)(a4 + 16);
  v10 = *a1;
  if (v9 == 4)
  {
    v11 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(v10 + 96);
    v12 = a1;
    v13 = a2;
    v14 = a3;
    v9 = *(_QWORD *)(a4 + 8);
    v15 = 4;
  }
  else
  {
    v11 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(v10 + 56);
    v12 = a1;
    v13 = a2;
    v14 = *(_QWORD *)(a4 + 8);
    v15 = a3;
  }
  return v11(v12, v13, v14, v9, v15, 0, 0);
}

uint64_t SLPronouncerImpl::PronounceTime(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  if (*(_BYTE *)(a2 + 1) == 2)
    v8 = 2;
  else
    v8 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 288))(a1, 0);
  *(_BYTE *)(a3 + 24) = v8;
  if (*(_BYTE *)(a4 + 3) == 32)
    v9 = 16;
  else
    v9 = 256;
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 56))(a1, a2, *(_QWORD *)(a4 + 8), *(_QWORD *)(a4 + 16), a3, v9, 0);
  if (*(_BYTE *)(a4 + 1) || *(_BYTE *)(a4 + 2) || (v10 = *(unsigned __int8 *)(a4 + 3), v10 == 32))
  {
    *(_BYTE *)(a3 + 24) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 288))(a1, 1);
    (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 56))(a1, a2, *(_QWORD *)(a4 + 24), *(_QWORD *)(a4 + 32), a3, 0, 0);
    v10 = *(unsigned __int8 *)(a4 + 3);
  }
  if (*(_QWORD *)(a4 + 48))
  {
    if (!*(_BYTE *)(a4 + 2) && v10 != 32)
    {
      v11 = 1;
      goto LABEL_18;
    }
    *(_BYTE *)(a3 + 24) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 288))(a1, 1);
    (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 56))(a1, a2, *(_QWORD *)(a4 + 40), *(_QWORD *)(a4 + 48), a3, 0, 0);
    v10 = *(unsigned __int8 *)(a4 + 3);
  }
  if (v10 == 32)
    goto LABEL_25;
  v11 = *(_BYTE *)(a4 + 2) == 0;
LABEL_18:
  if (*(_BYTE *)(a4 + 1) || !v11)
  {
    *(_BYTE *)(a3 + 24) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 288))(a1, 1);
    v10 = *(unsigned __int8 *)(a4 + 3);
  }
  if (v10 == 65)
    v12 = 220;
  else
    v12 = 221;
  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 216))(a1, v12);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 232))(a1, v13, a3, *(_QWORD *)(a4 + 72) + *(_QWORD *)(a2 + 32), *(_QWORD *)(a4 + 80));
LABEL_25:
  result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 288))(a1, 0);
  *(_BYTE *)(a3 + 24) = result;
  return result;
}

uint64_t SLPronouncerImpl::PronounceElapsedTime(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  char v8;
  uint64_t v9;
  uint64_t result;

  if (*(_BYTE *)(a2 + 1) == 2)
    v8 = 2;
  else
    v8 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 288))(a1, 0);
  *(_BYTE *)(a3 + 24) = v8;
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 56))(a1, a2, a4[1], a4[2], a3, 16, 0);
  *(_BYTE *)(a3 + 24) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 288))(a1, 1);
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 56))(a1, a2, a4[3], a4[4], a3, 0, 0);
  if (a4[6])
  {
    *(_BYTE *)(a3 + 24) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 288))(a1, 1);
    (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 56))(a1, a2, a4[5], a4[6], a3, 0, 0);
  }
  if (a4[8])
  {
    *(_BYTE *)(a3 + 24) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 168))(a1, 0);
    v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 216))(a1, 209);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 232))(a1, v9, a3, *(_QWORD *)(a2 + 32) + a4[7] - 1, 1);
    (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 64))(a1, a2, a4[7], a4[8], a3, 0, 0);
  }
  result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 288))(a1, 0);
  *(_BYTE *)(a3 + 24) = result;
  return result;
}

uint64_t SLPronouncerImpl::PronounceNumericPair(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t result;

  v6 = 0;
  v7 = *(_QWORD *)(a2 + 56);
  do
    v8 = *(unsigned __int16 *)(v7 + 2 * v6++);
  while (v8 != 58);
  v9 = ~v6 + ((*(_QWORD *)(a2 + 64) - v7) >> 1);
  *(_BYTE *)(a3 + 24) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 288))(a1, 0);
  (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 56))(a1, a2, 0, v6 - 1, a3, 0, 0);
  *(_BYTE *)(a3 + 24) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 288))(a1, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 56))(a1, a2, v6, v9, a3, 0, 0);
  result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 288))(a1, 0);
  *(_BYTE *)(a3 + 24) = result;
  return result;
}

uint64_t SLPronouncerImpl::PronounceDimensions(SLPronouncerImpl *this, SLToken *a2, SLTokenList *a3)
{
  uint64_t v5;
  unint64_t v6;
  CFIndex v8;
  unint64_t v9;
  SLToken *v10;
  uint64_t v11;
  uint64_t result;
  CFRange v13;

  v5 = *((_QWORD *)a2 + 7);
  v6 = ((*((_QWORD *)a2 + 8) - v5) >> 1) - 1;
  if ((*((_QWORD *)a2 + 8) - v5) >> 1 != 1)
  {
    v8 = 0;
    do
    {
      if (v6 <= v8 + 1)
        v6 = v8 + 1;
      v9 = v8;
      while (*(_WORD *)(v5 + 2 * v9) != 120)
      {
        if (v6 == ++v9)
        {
          v9 = v6;
          break;
        }
      }
      v10 = (SLToken *)operator new();
      SLToken::SLToken(v10, 1, 0);
      v13.length = v9 - v8;
      v13.location = v8;
      SLToken::SetTokenRange(v10, a2, v13);
      SLTokenList::push_back(a3, v10);
      v5 = *((_QWORD *)a2 + 7);
      v6 = ((*((_QWORD *)a2 + 8) - v5) >> 1) - 1;
      if (v9 < v6)
      {
        v11 = (*(uint64_t (**)(SLPronouncerImpl *, uint64_t))(*(_QWORD *)this + 216))(this, 212);
        (*(void (**)(SLPronouncerImpl *, uint64_t, SLTokenList *, unint64_t, uint64_t))(*(_QWORD *)this + 232))(this, v11, a3, *((_QWORD *)a2 + 4) + v9, 1);
        v5 = *((_QWORD *)a2 + 7);
        v6 = ((*((_QWORD *)a2 + 8) - v5) >> 1) - 1;
      }
      v8 = v9 + 1;
    }
    while (v9 + 1 < v6);
  }
  result = (*(uint64_t (**)(SLPronouncerImpl *, _QWORD))(*(_QWORD *)this + 168))(this, 0);
  *((_BYTE *)a3 + 24) = result;
  return result;
}

void sub_216FA9AA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A0649C](v1, 0x10F0C4034644DEDLL);
  _Unwind_Resume(a1);
}

_QWORD *SLPronouncerImpl::PronounceLegalSection(SLPronouncerImpl *this, SLToken *a2, SLTokenList *a3)
{
  uint64_t v5;
  int v6;
  SLToken *v7;
  unint64_t v8;
  _QWORD *result;
  uint64_t i;
  CFIndex v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  SLToken *v15;
  SLToken *v16;
  unint64_t v17;
  char v18;
  CFRange v19;
  CFRange v20;

  v5 = 0;
  do
  {
    v6 = (unsigned __int16)SLChar::sCharClass[*(_WORD *)(*((_QWORD *)a2 + 7) + 2 * v5) & 0x3F | (SLChar::sUniMap[(unint64_t)*(unsigned __int16 *)(*((_QWORD *)a2 + 7) + 2 * v5) >> 6] << 6)];
    ++v5;
  }
  while (v6 == 2);
  v7 = (SLToken *)operator new();
  SLToken::SLToken(v7, 1, (v5 == 4) << 10);
  v8 = v5 - 1;
  v19.location = 0;
  v19.length = v8;
  SLToken::SetTokenRange(v7, a2, v19);
  result = SLTokenList::push_back(a3, v7);
  for (i = *((_QWORD *)a2 + 7); v8 < ((*((_QWORD *)a2 + 8) - i) >> 1) - 1; i = *((_QWORD *)a2 + 7))
  {
    v11 = v8 + 1;
    v12 = i + 2 * v8;
    v13 = 1;
    do
      v14 = *(unsigned __int16 *)(v12 + 2 * v13++);
    while (v14 != 41);
    v15 = (SLToken *)operator new();
    v16 = v15;
    v17 = *(unsigned __int16 *)(*((_QWORD *)a2 + 7) + 2 * v11);
    if (SLChar::sCharClass[v17 & 0x3F | (SLChar::sUniMap[v17 >> 6] << 6)] == 2)
      v18 = 1;
    else
      v18 = 11;
    SLToken::SLToken(v15, v18, 0);
    v8 += v13;
    v20.length = v13 - 2;
    v20.location = v11;
    SLToken::SetTokenRange(v16, a2, v20);
    result = SLTokenList::push_back(a3, v16);
  }
  return result;
}

void sub_216FA9C54(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A0649C](v1, 0x10F0C4034644DEDLL);
  _Unwind_Resume(a1);
}

_QWORD *SLPronouncerImpl::PronounceGeoLoc(_QWORD *result, uint64_t a2, SLTokenList *a3, uint64_t a4)
{
  _QWORD *v7;
  int v8;
  SLToken *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  SLToken *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  SLToken *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  SLToken *v23;

  v7 = result;
  v8 = (*(_QWORD *)(a4 + 112) == 0) & (*(unsigned __int8 *)(a2 + 17) >> 2);
  if (*(_QWORD *)(a4 + 16))
  {
    v9 = (SLToken *)operator new();
    SLToken::SLToken(v9, 1, 0);
    SLToken::SetTokenRange(v9, (SLToken *)a2, *(CFRange *)(a4 + 8));
    SLTokenList::push_back(a3, v9);
    v10 = *(_QWORD *)(a4 + 32);
    v11 = *(_QWORD *)(a2 + 32) + *(_QWORD *)(a4 + 24);
    v12 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v7 + 216))(v7, 222);
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, SLTokenList *, BOOL, uint64_t, uint64_t))(*v7 + 240))(v7, v12, a3, *(_BYTE *)a4 == 0, v11, v10);
    if (!*(_QWORD *)(a4 + 48))
      return result;
    goto LABEL_5;
  }
  if (*(_QWORD *)(a4 + 48))
  {
LABEL_5:
    v13 = (SLToken *)operator new();
    SLToken::SLToken(v13, 1, 0);
    SLToken::SetTokenRange(v13, (SLToken *)a2, *(CFRange *)(a4 + 40));
    SLTokenList::push_back(a3, v13);
    v14 = *(_QWORD *)(a4 + 64);
    v15 = *(_QWORD *)(a2 + 32) + *(_QWORD *)(a4 + 56);
    if (v8)
      v16 = 225;
    else
      v16 = 223;
    v17 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v7 + 216))(v7, v16);
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, SLTokenList *, BOOL, uint64_t, uint64_t))(*v7 + 240))(v7, v17, a3, *(_BYTE *)a4 == 0, v15, v14);
  }
  if (*(_QWORD *)(a4 + 80))
  {
    v18 = (SLToken *)operator new();
    SLToken::SLToken(v18, 1, 0);
    SLToken::SetTokenRange(v18, (SLToken *)a2, *(CFRange *)(a4 + 72));
    SLTokenList::push_back(a3, v18);
    v19 = *(_QWORD *)(a4 + 96);
    v20 = *(_QWORD *)(a2 + 32) + *(_QWORD *)(a4 + 88);
    if (v8)
      v21 = 226;
    else
      v21 = 224;
    v22 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v7 + 216))(v7, v21);
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, SLTokenList *, BOOL, uint64_t, uint64_t))(*v7 + 240))(v7, v22, a3, *(_BYTE *)a4 == 0, v20, v19);
  }
  if (*(_QWORD *)(a4 + 112))
  {
    v23 = (SLToken *)operator new();
    SLToken::SLToken(v23, 1, 0);
    SLToken::SetTokenRange(v23, (SLToken *)a2, *(CFRange *)(a4 + 104));
    return SLTokenList::push_back(a3, v23);
  }
  return result;
}

void sub_216FA9F1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A0649C](v1, 0x10F0C4034644DEDLL);
  _Unwind_Resume(a1);
}

uint64_t SLPronouncerImpl::PronounceDottedNumber(uint64_t a1, uint64_t a2, SLTokenList *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  SLToken *v14;
  SLToken *v15;
  int v16;
  uint64_t result;
  uint64_t v18;

  *((_BYTE *)a3 + 24) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 168))(a1, 1);
  if (((*(_BYTE *)a4 == 0) & (*(_DWORD *)(a2 + 16) >> 10)) != 0)
    v8 = 81;
  else
    v8 = 209;
  v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 216))(a1, v8);
  v9 = *(_QWORD *)(a4 + 16) - *(_QWORD *)(a4 + 8);
  if (v9)
  {
    v10 = 0;
    v11 = v9 >> 4;
    v12 = v11 - 1;
    if (v11 <= 1)
      v13 = 1;
    else
      v13 = v11;
    do
    {
      v14 = (SLToken *)operator new();
      v15 = v14;
      if (*(_QWORD *)(*(_QWORD *)(a4 + 8) + 16 * v10 + 8) == 3)
        v16 = 33792;
      else
        v16 = 0x8000;
      SLToken::SLToken(v14, 1, v16);
      SLToken::SetTokenRange(v15, (SLToken *)a2, *(CFRange *)(*(_QWORD *)(a4 + 8) + 16 * v10));
      SLTokenList::push_back(a3, v15);
      if (v10 >= v12)
      {
        *((_BYTE *)v15 + 2) = 3;
        ++v10;
      }
      else
      {
        *((_BYTE *)a3 + 24) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 280))(a1, 0);
        *((_BYTE *)a3 + 25) = 2;
        ++v10;
        (*(void (**)(uint64_t, uint64_t, SLTokenList *, uint64_t, uint64_t))(*(_QWORD *)a1 + 232))(a1, v18, a3, *(_QWORD *)(a2 + 32) + *(_QWORD *)(*(_QWORD *)(a4 + 8) + 16 * v10) - 1, 1);
      }
    }
    while (v10 != v13);
  }
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 168))(a1, 1);
  *((_BYTE *)a3 + 24) = result;
  return result;
}

void sub_216FAA0F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A0649C](v1, 0x10F0C4034644DEDLL);
  _Unwind_Resume(a1);
}

uint64_t SLPronouncerImpl::HasApostropheS(SLPronouncerImpl *this)
{
  return 1;
}

uint64_t SLPronouncerImpl::MonthBeforeDay(SLPronouncerImpl *this)
{
  return 1;
}

uint64_t SLPronouncerImpl::ExponentIsOrdinal(SLPronouncerImpl *this)
{
  return 1;
}

_QWORD *std::__list_imp<SLToken *>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (result[2])
  {
    v1 = result;
    result = (_QWORD *)result[1];
    v2 = *v1;
    v3 = *result;
    *(_QWORD *)(v3 + 8) = *(_QWORD *)(*v1 + 8);
    **(_QWORD **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        v4 = (_QWORD *)result[1];
        operator delete(result);
        result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(2 * a2);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB748], MEMORY[0x24BEDABB8]);
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

uint64_t SLSplitCartDict::Lookup(SLSplitCartDict *this, const char *a2, uint64_t a3, SLWordBuilder *a4, SLDictionary *a5)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  _WORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  _BYTE v31[40];
  _QWORD *v32;

  SLTokenBuilder::SLTokenBuilder((SLTokenBuilder *)v31, a4, 1);
  v8 = (***((uint64_t (****)(_QWORD, const char *, uint64_t, _BYTE *, _QWORD))this + 3))(*((_QWORD *)this + 3), a2, a3, v31, 0);
  if ((v8 & 1) != 0)
  {
    v9 = (uint64_t *)v32[10];
    v10 = *v9;
    v32[11] = v9;
    *(_DWORD *)v10 = 1;
    v11 = (_WORD *)(v10 + 4);
    v12 = *(unsigned __int16 *)(v10 + 4);
    if (v12 <= 6)
    {
      v13 = v12 + 1;
      *v11 = v13;
      v11[v13] = 64;
    }
    (***((void (****)(_QWORD, const char *, uint64_t, _BYTE *, _QWORD))this + 4))(*((_QWORD *)this + 4), a2, a3, v31, 0);
    v14 = v32;
    v15 = (_QWORD *)v32[11];
    v16 = v32[12];
    if ((unint64_t)v15 >= v16)
    {
      v18 = (void **)(v32 + 10);
      v19 = v32[10];
      v20 = ((uint64_t)v15 - v19) >> 3;
      if ((unint64_t)(v20 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v21 = v16 - v19;
      v22 = v21 >> 2;
      if (v21 >> 2 <= (unint64_t)(v20 + 1))
        v22 = v20 + 1;
      if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
        v23 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v23 = v22;
      if (v23)
        v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SLHomograph *>>((uint64_t)(v32 + 12), v23);
      else
        v24 = 0;
      v25 = &v24[8 * v20];
      v26 = &v24[8 * v23];
      *(_QWORD *)v25 = v10;
      v17 = v25 + 8;
      v28 = (char *)v14[10];
      v27 = (char *)v14[11];
      if (v27 != v28)
      {
        do
        {
          v29 = *((_QWORD *)v27 - 1);
          v27 -= 8;
          *((_QWORD *)v25 - 1) = v29;
          v25 -= 8;
        }
        while (v27 != v28);
        v27 = (char *)*v18;
      }
      v14[10] = v25;
      v14[11] = v17;
      v14[12] = v26;
      if (v27)
        operator delete(v27);
    }
    else
    {
      *v15 = v10;
      v17 = v15 + 1;
    }
    v14[11] = v17;
    SLTokenBuilder::Forward((SLTokenBuilder *)v31);
  }
  SLTokenBuilder::~SLTokenBuilder((SLTokenBuilder *)v31);
  return v8;
}

void sub_216FAA43C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  SLTokenBuilder::~SLTokenBuilder((SLTokenBuilder *)va);
  _Unwind_Resume(a1);
}

void SLSplitCartDict::~SLSplitCartDict(SLSplitCartDict *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24D6714D0;
  v2 = *((_QWORD *)this + 3);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  v3 = *((_QWORD *)this + 4);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  SLDictionary::~SLDictionary(this);
}

{
  SLSplitCartDict::~SLSplitCartDict(this);
  JUMPOUT(0x219A0649CLL);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<SLHomograph *>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

uint64_t SLPrefixDict::SLPDFindPage(int a1, uint64_t a2, uint64_t a3, void *__s1, unint64_t a5, size_t *a6)
{
  uint64_t v8;
  size_t v9;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  size_t *v18;

  v8 = a3 + *(unsigned int *)(a2 + 28);
  if (a5 >= 5)
    v9 = 5;
  else
    v9 = a5;
  if (v9)
  {
    v18 = a6;
    v11 = *(unsigned __int16 *)(a2 + 2 * v9 + 12);
    do
    {
      v12 = v9 - 1;
      v13 = *(unsigned __int16 *)(a2 + 2 * (v9 - 1) + 12);
      if (v13 < v11)
      {
        v14 = *(unsigned __int16 *)(a2 + 2 * (v9 - 1) + 12);
        do
        {
          v15 = (v11 + v14) >> 1;
          v16 = memcmp(__s1, (const void *)(v8 + 8 * v15), v9);
          if ((v16 & 0x80000000) == 0)
          {
            if (!v16)
              goto LABEL_14;
            v14 = v15 + 1;
            v15 = v11;
          }
          v11 = v15;
        }
        while (v14 < v15);
      }
      v11 = v13;
      --v9;
    }
    while (v12);
    v15 = 0;
LABEL_14:
    a6 = v18;
  }
  else
  {
    v15 = 0;
  }
  *a6 = v9;
  return a3 + *(unsigned int *)(a2 + 32) + 4 * bswap32(*(_DWORD *)(v8 + 8 * v15 + 4) & 0xFFFFFF00);
}

uint64_t SLPrefixDict::SetFileInfo(uint64_t this, _DWORD *a2, int a3, uint64_t a4)
{
  _OWORD *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;

  v4 = a2;
  v5 = this;
  *(_QWORD *)(this + 24) = a2;
  *(_DWORD *)(this + 44) = a3;
  *(_QWORD *)(this + 48) = a4;
  if (*a2 == 1146113107)
  {
    *(_BYTE *)(this + 40) = 1;
    this = operator new();
    v6 = v4[1];
    v7 = *(_OWORD *)((char *)v4 + 28);
    *(_OWORD *)this = *v4;
    *(_OWORD *)(this + 16) = v6;
    *(_OWORD *)(this + 28) = v7;
    *(_WORD *)(this + 4) = bswap32(*(unsigned __int16 *)(this + 4)) >> 16;
    *(_WORD *)(this + 6) = bswap32(*(unsigned __int16 *)(this + 6)) >> 16;
    *(int8x8_t *)(this + 12) = vrev16_s8(*(int8x8_t *)(this + 12));
    *(_WORD *)(this + 20) = bswap32(*(unsigned __int16 *)(this + 20)) >> 16;
    *(_WORD *)(this + 22) = bswap32(*(unsigned __int16 *)(this + 22)) >> 16;
    *(int8x16_t *)(this + 24) = vrev32q_s8(*(int8x16_t *)(this + 24));
    *(_DWORD *)(this + 40) = bswap32(*(_DWORD *)(this + 40));
    v4 = (_OWORD *)this;
  }
  else
  {
    if (*a2 != 1397510212)
      return this;
    *(_BYTE *)(this + 40) = 0;
  }
  *(_QWORD *)(v5 + 32) = v4;
  return this;
}

void SLPrefixDict::~SLPrefixDict(SLPrefixDict *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24D671510;
  if (*((_BYTE *)this + 40))
  {
    v2 = *((_QWORD *)this + 4);
    if (v2)
      MEMORY[0x219A0649C](v2, 0x1000C40F3912DEFLL);
  }
  SLDictionary::~SLDictionary(this);
}

{
  SLPrefixDict::~SLPrefixDict(this);
  JUMPOUT(0x219A0649CLL);
}

BOOL SLPrefixDict::Decoder::DecodePhoneme(SLPrefixDict::Decoder *this, char a2)
{
  _BOOL8 v3;
  uint64_t v4;

  v3 = a2 < 0;
  v4 = a2 & 0x3F;
  if ((a2 & 0x40) != 0)
    (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 3) + 72))(*((_QWORD *)this + 3), *((unsigned __int8 *)this + 16));
  if ((_DWORD)v4 == 63)
    return 1;
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 3) + 72))(*((_QWORD *)this + 3), v4);
  return v3;
}

char *SLPrefixDict::Decoder::DecodePhonemes(SLPrefixDict::Decoder *this, char *a2)
{
  char v4;

  do
    v4 = *a2++;
  while (!SLPrefixDict::Decoder::DecodePhoneme(this, v4));
  return a2;
}

uint64_t SLPrefixDict::Decoder::FoundWord(SLPrefixDict::Decoder *this, const char *a2, uint64_t a3, char *a4, const unsigned __int8 *a5, const unsigned __int16 *a6, const unsigned int *a7, const unsigned __int16 *a8)
{
  unint64_t v16;
  const unsigned __int8 *v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  char *v21;
  char v22;
  char v23;
  unint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  _WORD v39[8];

  (*(void (**)(_QWORD))(**((_QWORD **)this + 3) + 8))(*((_QWORD *)this + 3));
  (***((void (****)(_QWORD, _QWORD))this + 3))(*((_QWORD *)this + 3), *((_QWORD *)this + 1));
  (*(void (**)(_QWORD, const char *, uint64_t))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3), a2, a3);
  do
  {
    (*(void (**)(_QWORD))(**((_QWORD **)this + 3) + 56))(*((_QWORD *)this + 3));
    (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 3) + 72))(*((_QWORD *)this + 3), 2);
    v16 = *a4;
    v17 = a5;
    if (v16 >= 0x40)
    {
      v18 = a6[(v16 >> 6) - 1];
      v19 = bswap32(v18) >> 16;
      if (*(_BYTE *)this)
        LOWORD(v18) = v19;
      v17 = &a5[(unsigned __int16)v18];
    }
    do
      v20 = *v17++;
    while (!SLPrefixDict::Decoder::DecodePhoneme(this, v20));
    v22 = *a4;
    v21 = a4 + 1;
    if (!SLPrefixDict::Decoder::DecodePhoneme(this, v22 & 0x3F))
    {
      do
        v23 = *v21++;
      while (!SLPrefixDict::Decoder::DecodePhoneme(this, v23));
    }
    v24 = *v21;
    if (*v21 < 0)
    {
      v26 = v21[1];
      v25 = (unsigned __int8 *)(v21 + 2);
      v24 = ((v24 & 0x7F) << 7) | v26;
    }
    else
    {
      v25 = (unsigned __int8 *)(v21 + 1);
    }
    v27 = a7[v24];
    v28 = bswap32(v27);
    if (*(_BYTE *)this)
      v29 = v28;
    else
      v29 = v27;
    SLWordBuilder::SetPartOfSpeech(*((_QWORD *)this + 3), v29);
    v39[0] = 0;
    v30 = *v25;
    if ((v30 & 0x7F) != 0)
    {
      v31 = 0;
      v32 = *(unsigned __int8 *)this;
      do
      {
        v33 = v30;
        if ((v30 & 0x80) != 0)
        {
          v34 = v25[1];
          v25 += 2;
          v33 = ((unint64_t)(v30 & 0x7F) << 7) | v34;
        }
        else
        {
          ++v25;
        }
        if (v31 <= 6)
        {
          v35 = a8[v33];
          v36 = bswap32(v35) >> 16;
          if (v32)
            LOWORD(v35) = v36;
          v39[0] = ++v31;
          v39[v31] = v35;
        }
        v30 = *v25;
      }
      while ((v30 & 0x7F) != 0);
    }
    (*(void (**)(_QWORD, _WORD *))(**((_QWORD **)this + 3) + 88))(*((_QWORD *)this + 3), v39);
    (*(void (**)(_QWORD))(**((_QWORD **)this + 3) + 96))(*((_QWORD *)this + 3));
    v37 = *v25;
    a4 = (char *)(v25 + 1);
  }
  while (v37 != 128);
  (*(void (**)(_QWORD))(**((_QWORD **)this + 3) + 48))(*((_QWORD *)this + 3));
  return 1;
}

uint64_t SLPrefixDict::Lookup(SLPrefixDict *this, char *__s1, unint64_t a3, SLWordBuilder *a4, SLDictionary *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  const unsigned __int16 *v15;
  unint64_t v16;
  unint64_t v17;
  const unsigned __int8 *v18;
  const char *v19;
  size_t v20;
  unint64_t v21;
  unsigned int v22;
  unsigned int v23;
  const unsigned __int8 *v24;
  int v25;
  uint64_t v27;
  char v28;
  unsigned __int16 *v29;
  const unsigned int *v30;
  uint64_t v31;
  SLWordBuilder *v32;
  const char *v33;
  unint64_t v34;
  char v35[8];
  uint64_t v36;
  char v37;
  SLWordBuilder *v38;
  size_t v39;

  v39 = 0;
  v10 = *((_QWORD *)this + 3);
  v9 = *((_QWORD *)this + 4);
  v11 = SLPrefixDict::SLPDFindPage((int)this, v9, v10, __s1, a3, &v39);
  v12 = *((unsigned __int8 *)this + 40);
  v13 = *(unsigned __int16 *)(v11 + 6);
  v14 = bswap32(v13) >> 16;
  if (*((_BYTE *)this + 40))
    LOWORD(v13) = v14;
  if (!(_WORD)v13)
    return 0;
  v15 = (const unsigned __int16 *)v11;
  v31 = v10;
  v32 = a4;
  v16 = 0;
  v17 = (unsigned __int16)v13;
  v18 = (const unsigned __int8 *)(v11 + 2 * (unsigned __int16)v13 + 8);
  v30 = (const unsigned int *)(v10 + *(unsigned int *)(v9 + 36));
  v29 = (unsigned __int16 *)(v10 + *(unsigned int *)(v9 + 40));
  v33 = __s1;
  v34 = a3;
  v19 = &__s1[v39];
  v20 = a3 - v39;
  while (1)
  {
    v21 = (v17 + v16) >> 1;
    v22 = v15[v21 + 4];
    v23 = bswap32(v22) >> 16;
    if (v12)
      LOWORD(v22) = v23;
    v24 = &v18[(unsigned __int16)v22];
    v25 = memcmp(v19, v24, v20);
    if (v25 < 1)
      break;
    v16 = v21 + 1;
    v21 = v17;
LABEL_11:
    v17 = v21;
    if (v16 >= v21)
      return 0;
  }
  if (v25 < 0 || v24[v20])
    goto LABEL_11;
  v27 = v31 + *(unsigned int *)(v9 + 24);
  v28 = *(_BYTE *)(v9 + 8);
  v35[0] = v12;
  v36 = v27;
  v37 = v28;
  v38 = v32;
  SLPrefixDict::Decoder::FoundWord((SLPrefixDict::Decoder *)v35, v33, v34, (char *)&v24[v20 + 1], v18, v15, v30, v29);
  return 1;
}

uint64_t SLMMapHint::MappedSize(SLMMapHint *this)
{
  return *((_QWORD *)this + 2);
}

void SLMMapHint::~SLMMapHint(SLMMapHint *this)
{
  JUMPOUT(0x219A0649CLL);
}

uint64_t SLMMapCache::Map(SLMMapCache *this, const __CFURL *a2, SLMMapHint *a3)
{
  const __CFString *v4;
  const __CFString *v5;
  CFIndex MaximumSizeOfFileSystemRepresentation;
  char *v7;
  SLMMapHint *v8;
  uint64_t v9;

  v4 = CFURLCopyFileSystemPath(this, kCFURLPOSIXPathStyle);
  if (!v4)
    return -1;
  v5 = v4;
  MaximumSizeOfFileSystemRepresentation = CFStringGetMaximumSizeOfFileSystemRepresentation(v4);
  v7 = (char *)operator new[]();
  LODWORD(MaximumSizeOfFileSystemRepresentation) = CFStringGetFileSystemRepresentation(v5, v7, MaximumSizeOfFileSystemRepresentation);
  CFRelease(v5);
  if ((_DWORD)MaximumSizeOfFileSystemRepresentation)
    v9 = SLMMapCache::Map((SLMMapCache *)v7, (const char *)a2, v8);
  else
    v9 = -1;
  MEMORY[0x219A0649C](v7, 0x1000C4077774924);
  return v9;
}

void sub_216FAAC84(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A0649C](v1, 0x1000C4077774924);
  _Unwind_Resume(a1);
}

uint64_t SLMMapCache::Map(SLMMapCache *this, const char *a2, SLMMapHint *a3)
{
  uint64_t v5;
  int v6;
  int v7;
  size_t st_size;
  size_t v9;
  void *v10;
  stat v12;

  if (stat((const char *)this, &v12) < 0)
    return -1;
  pthread_mutex_lock(&sMapCacheMutex);
  v5 = sMappedFiles;
  if (sMappedFiles)
  {
    while (*(_DWORD *)(v5 + 8) != v12.st_dev || *(_QWORD *)(v5 + 16) != v12.st_ino)
    {
      v5 = *(_QWORD *)v5;
      if (!v5)
        goto LABEL_6;
    }
    ++*(_DWORD *)(v5 + 48);
    if (a2)
    {
      *((_DWORD *)a2 + 2) = open((const char *)this, 0);
      *((_OWORD *)a2 + 1) = *(_OWORD *)(v5 + 32);
    }
    goto LABEL_13;
  }
LABEL_6:
  v5 = operator new();
  v6 = open((const char *)this, 0);
  v7 = v6;
  st_size = v12.st_size;
  *(_QWORD *)(v5 + 32) = v12.st_size;
  *(_QWORD *)(v5 + 40) = st_size;
  if (!a2)
  {
    *(_QWORD *)(v5 + 24) = mmap(0, st_size, 1, 1, v6, 0);
    close(v7);
    if (*(_QWORD *)(v5 + 24) == -1)
    {
      MEMORY[0x219A0649C](v5, 0x10A0C40695E290ELL);
      goto LABEL_15;
    }
LABEL_10:
    *(_QWORD *)v5 = sMappedFiles;
    *(_DWORD *)(v5 + 8) = v12.st_dev;
    *(_QWORD *)(v5 + 16) = v12.st_ino;
    *(_DWORD *)(v5 + 48) = 1;
    sMappedFiles = v5;
LABEL_13:
    pthread_mutex_unlock(&sMapCacheMutex);
    return *(_QWORD *)(v5 + 24);
  }
  *((_DWORD *)a2 + 2) = v6;
  *((_QWORD *)a2 + 2) = st_size;
  v9 = (**(uint64_t (***)(const char *))a2)(a2);
  *((_QWORD *)a2 + 3) = v9;
  *(_QWORD *)(v5 + 40) = v9;
  v10 = mmap(0, v9, 1, 1, v7, 0);
  *(_QWORD *)(v5 + 24) = v10;
  if (v10 != (void *)-1)
    goto LABEL_10;
  MEMORY[0x219A0649C](v5, 0x10A0C40695E290ELL);
  close(v7);
  *((_DWORD *)a2 + 2) = -1;
LABEL_15:
  pthread_mutex_unlock(&sMapCacheMutex);
  return -1;
}

uint64_t SLMMapCache::Unmap(SLMMapCache *this, void *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  int v5;

  pthread_mutex_lock(&sMapCacheMutex);
  v3 = &sMappedFiles;
  while (1)
  {
    v4 = v3;
    v3 = (uint64_t *)*v3;
    if (!v3)
      break;
    if ((SLMMapCache *)v3[3] == this)
    {
      v5 = *((_DWORD *)v3 + 12) - 1;
      *((_DWORD *)v3 + 12) = v5;
      if (!v5)
      {
        munmap(this, v3[5]);
        *v4 = *v3;
        MEMORY[0x219A0649C](v3, 0x10A0C40695E290ELL);
      }
      return pthread_mutex_unlock(&sMapCacheMutex);
    }
  }
  return pthread_mutex_unlock(&sMapCacheMutex);
}

uint64_t SLMMapCache::IsFileAlreadyMapped(SLMMapCache *this, const char *a2)
{
  uint64_t v2;
  char v3;
  stat v5;

  if (stat((const char *)this, &v5) < 0)
  {
    v3 = 0;
  }
  else
  {
    pthread_mutex_lock(&sMapCacheMutex);
    v2 = sMappedFiles;
    if (sMappedFiles)
    {
      v3 = 0;
      do
      {
        if (*(_DWORD *)(v2 + 8) == v5.st_dev)
          v3 |= *(_QWORD *)(v2 + 16) == v5.st_ino;
        v2 = *(_QWORD *)v2;
      }
      while (v2);
    }
    else
    {
      v3 = 0;
    }
    pthread_mutex_unlock(&sMapCacheMutex);
  }
  return v3 & 1;
}

SLTuplesImpl *SLTuples::Create(SLTuples *this, CFLocaleRef locale, const __CFLocale *a3)
{
  const __CFString *Value;

  Value = (const __CFString *)CFLocaleGetValue(locale, (CFLocaleKey)*MEMORY[0x24BDBD418]);
  if (CFStringCompare(Value, CFSTR("en"), 0))
    SLTuples::Create();
  return SLCreateTuplesEng(this);
}

void SLTuplesImpl::SLTuplesImpl(SLTuplesImpl *this, SLLexer *a2, const __CFString *a3)
{
  __CFBundle *v5;

  *(_QWORD *)this = &unk_24D671678;
  SLLexerBuffer::SLLexerBuffer((SLTuplesImpl *)((char *)this + 8), a2, 1);
  *(_QWORD *)this = off_24D671588;
  *((_QWORD *)this + 1) = &unk_24D671608;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 18, ".");
  v5 = SLGetSpeechDictionaryBundle();
  if (v5)
    *((_QWORD *)this + 13) = CFBundleCopyResourceURL(v5, a3, 0, 0);
}

void sub_216FAB0A8(_Unwind_Exception *a1)
{
  char *v1;
  SLLexerBuffer *v2;
  void **v3;

  if (v1[103] < 0)
    operator delete(*v3);
  SLLexerBuffer::~SLLexerBuffer(v2);
  SLLexer::~SLLexer((SLLexer *)v1);
  _Unwind_Resume(a1);
}

uint64_t SLTuplesImpl::HasTupleDB(SLTuplesImpl *this)
{
  sqlite3 **v1;
  uint64_t v2;
  const __CFURL *v4;
  const __CFString *v5;
  CFIndex MaximumSizeOfFileSystemRepresentation;
  char *v7;
  sqlite3 *v9;
  sqlite3_stmt **v10;
  char *pzTail;

  v1 = (sqlite3 **)((char *)this + 112);
  if (*((_QWORD *)this + 14))
    return 1;
  v4 = (const __CFURL *)*((_QWORD *)this + 13);
  if (!v4)
    return 0;
  v5 = CFURLCopyFileSystemPath(v4, kCFURLPOSIXPathStyle);
  CFRelease(*((CFTypeRef *)this + 13));
  *((_QWORD *)this + 13) = 0;
  if (!v5)
    return 0;
  MaximumSizeOfFileSystemRepresentation = CFStringGetMaximumSizeOfFileSystemRepresentation(v5);
  v7 = (char *)operator new[]();
  LODWORD(MaximumSizeOfFileSystemRepresentation) = CFStringGetFileSystemRepresentation(v5, v7, MaximumSizeOfFileSystemRepresentation);
  CFRelease(v5);
  if (!(_DWORD)MaximumSizeOfFileSystemRepresentation
    || (pzTail = 0, sqlite3_open_v2(v7, v1, 1, 0))
    || sqlite3_prepare_v2(*((sqlite3 **)this + 14), "SELECT flags FROM tuples WHERE words = ?;",
         -1,
         (sqlite3_stmt **)this + 15,
         (const char **)&pzTail))
  {
    v2 = 0;
  }
  else
  {
    v9 = (sqlite3 *)*((_QWORD *)this + 14);
    v10 = (sqlite3_stmt **)((char *)this + 128);
    if (sqlite3_prepare_v2(v9, "SELECT flags,constraints FROM gtuples WHERE words = ?;",
           -1,
           v10,
           (const char **)&pzTail))
    {
      *v10 = 0;
    }
    v2 = 1;
  }
  MEMORY[0x219A0649C](v7, 0x1000C4077774924);
  return v2;
}

void sub_216FAB240(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A0649C](v1, 0x1000C4077774924);
  _Unwind_Resume(a1);
}

sqlite3_int64 SLTuplesImpl::TupleLookup(sqlite3_stmt **this, const char *a2)
{
  int v4;
  sqlite3_int64 v5;

  if (!SLTuplesImpl::HasTupleDB((SLTuplesImpl *)this))
    return 0;
  v4 = sqlite3_bind_text(this[15], 1, a2, -1, 0);
  v5 = 0;
  if (!v4)
  {
    if (sqlite3_step(this[15]) == 100)
      v5 = sqlite3_column_int64(this[15], 0);
    else
      v5 = 0;
    sqlite3_reset(this[15]);
  }
  return v5;
}

sqlite3_int64 SLTuplesImpl::AbstractTupleLookup(sqlite3_stmt **this, const char *a2)
{
  sqlite3_stmt *v4;
  sqlite3_int64 v5;
  int v6;
  int v7;
  char *v8;
  char *v9;
  unint64_t v10;
  char *v11;
  SLToken *v12;
  SLToken *v13;
  int v14;
  int64_t v15;
  char *v16;
  int v17;
  int64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  int64_t v24;

  if (!SLTuplesImpl::HasTupleDB((SLTuplesImpl *)this))
    return 0;
  v4 = this[16];
  if (!v4)
    return 0;
  if (a2)
  {
    v5 = 0;
    if (sqlite3_bind_text(v4, 1, a2, -1, 0))
      return v5;
    v4 = this[16];
  }
  if (sqlite3_step(v4) != 100)
  {
LABEL_41:
    sqlite3_reset(this[16]);
    return 0;
  }
  while (1)
  {
    v5 = sqlite3_column_int64(this[16], 0);
    v6 = sqlite3_column_bytes(this[16], 1);
    if (!v6)
      return v5;
    v7 = v6;
    v8 = (char *)sqlite3_column_blob(this[16], 1);
    if (v7 < 1)
      return v5;
    v9 = v8;
    v10 = 0;
    v11 = &v8[v7];
    while (1)
    {
      v12 = (SLToken *)SLLexerBuffer::operator[](this + 1, v10);
      if (!v12)
        break;
      v13 = v12;
      v14 = 0;
      v15 = v11 - v9;
      v16 = v9 + 1;
      while (1)
      {
        v14 |= *(v16 - 1) & 0x7F;
        if ((*(v16 - 1) & 0x80) == 0)
          break;
        ++v16;
        v14 <<= 7;
        if (!--v15)
        {
          v16 = v11;
          break;
        }
      }
      if (v14 && !SLToken::HasPOS(v12, v14))
        break;
      if (v16 < v11)
      {
        v17 = 0;
        v18 = v11 - v16++;
        while (1)
        {
          v17 |= *(v16 - 1) & 0x7F;
          if ((*(v16 - 1) & 0x80) == 0)
            break;
          ++v16;
          v17 <<= 7;
          if (!--v18)
          {
            v16 = v11;
            break;
          }
        }
        if (v17 && SLToken::HasPOS(v13, v17))
          break;
      }
LABEL_24:
      while (v16 < v11)
      {
        v19 = *v16;
        if (!*v16)
          break;
        v20 = v19 & 0x7F;
        ++v16;
        v21 = v19 >> 7;
        while (1)
        {
          v22 = v20;
          if (!v20)
            break;
          if (v16 >= v11)
          {
            LOWORD(v23) = 0;
          }
          else
          {
            v23 = 0;
            v24 = v11 - v16++;
            while (1)
            {
              v23 |= *(v16 - 1) & 0x7F;
              if ((*(v16 - 1) & 0x80) == 0)
                break;
              ++v16;
              v23 <<= 7;
              if (!--v24)
              {
                v16 = v11;
                break;
              }
            }
          }
          --v20;
          if (v21 == SLToken::HasTag(v13, (unsigned __int16)v23))
          {
            if (!v22)
              goto LABEL_24;
            goto LABEL_40;
          }
        }
      }
      v9 = v16 + 1;
      ++v10;
      if (v9 >= v11)
        return v5;
    }
LABEL_40:
    if (sqlite3_step(this[16]) != 100)
      goto LABEL_41;
  }
}

void SLTuplesImpl::~SLTuplesImpl(SLTuplesImpl *this)
{
  SLLexerBuffer *v2;
  const void *v3;
  sqlite3_stmt *v4;
  sqlite3_stmt *v5;
  sqlite3 *v6;

  *(_QWORD *)this = off_24D671588;
  *((_QWORD *)this + 1) = &unk_24D671608;
  v2 = (SLTuplesImpl *)((char *)this + 8);
  v3 = (const void *)*((_QWORD *)this + 13);
  if (v3)
    CFRelease(v3);
  v4 = (sqlite3_stmt *)*((_QWORD *)this + 15);
  if (v4)
    sqlite3_finalize(v4);
  v5 = (sqlite3_stmt *)*((_QWORD *)this + 16);
  if (v5)
    sqlite3_finalize(v5);
  v6 = (sqlite3 *)*((_QWORD *)this + 14);
  if (v6)
    sqlite3_close(v6);
  if (*((char *)this + 167) < 0)
    operator delete(*((void **)this + 18));
  if (*((char *)this + 103) < 0)
    operator delete(*((void **)this + 10));
  SLLexerBuffer::~SLLexerBuffer(v2);
  SLLexer::~SLLexer(this);
}

SLToken *SLTuplesImpl::NextToken(int64x2_t *this)
{
  uint64_t v2;
  uint64_t *v3;
  unsigned __int8 *v4;
  std::string *v5;
  _QWORD *v6;
  uint64_t v7;
  std::string::size_type v8;
  std::string *v9;
  _QWORD *v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  sqlite3_int64 v14;
  int first_high;
  unsigned __int8 *v16;
  BOOL v17;
  SLTuplesImpl *Class;
  char *v19;
  std::vector<std::string>::pointer end;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  unint64_t v25;
  const __CFString *Text;
  char *CStringPtr;
  std::vector<std::string>::pointer v28;
  __int128 v29;
  std::string *v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  std::__split_buffer<std::string>::pointer value_high;
  uint64_t v35;
  int v36;
  std::string *v37;
  int v38;
  std::string *v39;
  std::string::size_type size;
  const char *p_begin;
  sqlite3_int64 v42;
  std::string *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  std::string *v47;
  uint64_t v48;
  void **v49;
  uint64_t v50;
  uint64_t v51;
  void **v52;
  std::vector<std::string>::pointer v53;
  __int128 v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  std::string *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  std::string *v62;
  std::string *v63;
  __int128 v64;
  std::string *v65;
  unint64_t v66;
  std::string *v67;
  __int128 v68;
  std::string *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t (***v72)(_QWORD);
  uint64_t (***v73)(_QWORD);
  std::vector<std::string>::pointer begin;
  char v75;
  uint64_t (***v76)(_QWORD);
  unint64_t v77;
  unint64_t v78;
  uint64_t (***v79)(_QWORD);
  SLToken *v80;
  SLToken *v81;
  int v82;
  SLTuplesImpl *v83;
  const char *v84;
  const std::string::value_type **v86;
  SLToken *v87;
  unsigned __int8 v88;
  void *__p[2];
  std::string::size_type v90;
  std::vector<std::string> v91;
  char v92[4];
  int v93;
  void *v94;
  char v95;
  __int128 v96;
  uint64_t v97;
  void *v98[2];
  uint64_t v99;
  std::__split_buffer<std::string> __v;
  void **buffer;
  std::string v102;
  uint64_t v103;

  v103 = *MEMORY[0x24BDAC8D0];
  v2 = this[8].i64[1];
  if (v2)
    goto LABEL_169;
  v3 = &this->i64[1];
  v4 = (unsigned __int8 *)SLLexerBuffer::operator[](&this->i64[1], 0);
  if (!v4 || SLTokenGetClass(v4) != 32)
  {
    v2 = 1;
    this[8].i64[1] = 1;
    goto LABEL_169;
  }
  v2 = this[8].i64[1];
  if (v2)
    goto LABEL_169;
  v86 = (const std::string::value_type **)&this[9];
  do
  {
    v98[0] = v98;
    v98[1] = v98;
    v99 = 0;
    *(_QWORD *)&v96 = &v96;
    *((_QWORD *)&v96 + 1) = &v96;
    v97 = 0;
    v92[0] = 0;
    v93 = 0;
    std::string::basic_string[abi:ne180100]<0>(&v94, "");
    v5 = std::__list_imp<SLTupleHypothesis>::__create_node[abi:ne180100]<SLTupleHypothesis const&>((uint64_t)v98, 0, 0, (uint64_t)v92);
    v6 = v98[0];
    v5->__r_.__value_.__l.__data_ = (std::string::pointer)v98[0];
    v5->__r_.__value_.__l.__size_ = (std::string::size_type)v98;
    v6[1] = v5;
    v98[0] = v5;
    v7 = ++v99;
    if (this[10].i8[7] < 0)
    {
      v8 = this[9].u64[1];
      if (!v8)
        goto LABEL_12;
      LOBYTE(buffer) = 0;
      HIDWORD(buffer) = 10000;
      std::string::__init_copy_ctor_external(&v102, *v86, v8);
    }
    else
    {
      if (!this[10].i8[7])
        goto LABEL_12;
      LOBYTE(buffer) = 0;
      HIDWORD(buffer) = 10000;
      *(_OWORD *)&v102.__r_.__value_.__l.__data_ = *(_OWORD *)v86;
      v102.__r_.__value_.__r.__words[2] = this[10].u64[0];
    }
    v9 = std::__list_imp<SLTupleHypothesis>::__create_node[abi:ne180100]<SLTupleHypothesis const&>((uint64_t)v98, 0, 0, (uint64_t)&buffer);
    v10 = v98[0];
    v9->__r_.__value_.__l.__data_ = (std::string::pointer)v98[0];
    v9->__r_.__value_.__l.__size_ = (std::string::size_type)v98;
    v10[1] = v9;
    v98[0] = v9;
    v7 = ++v99;
    if ((SHIBYTE(v102.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_12:
      if (!v7)
        goto LABEL_155;
      goto LABEL_13;
    }
    operator delete(v102.__r_.__value_.__l.__data_);
    if (!v99)
      goto LABEL_155;
LABEL_13:
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    first_high = -1;
    while (1)
    {
      v16 = (unsigned __int8 *)SLLexerBuffer::operator[](v3, v11);
      memset(&v91, 0, sizeof(v91));
      v17 = v16 == 0;
      v87 = (SLToken *)v16;
      if (!v16)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, ".");
        end = v91.__end_;
        if (v91.__end_ < v91.__end_cap_.__value_)
          goto LABEL_28;
        v21 = 0xAAAAAAAAAAAAAAABLL * (((char *)v91.__end_ - (char *)v91.__begin_) >> 3);
        v25 = v21 + 1;
        if (v21 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * (((char *)v91.__end_cap_.__value_ - (char *)v91.__begin_) >> 3) > v25)
          v25 = 0x5555555555555556 * (((char *)v91.__end_cap_.__value_ - (char *)v91.__begin_) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v91.__end_cap_.__value_ - (char *)v91.__begin_) >> 3) >= 0x555555555555555)
          v23 = 0xAAAAAAAAAAAAAAALL;
        else
          v23 = v25;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v91.__end_cap_;
        if (!v23)
        {
          v30 = 0;
          goto LABEL_42;
        }
        goto LABEL_135;
      }
      Class = (SLTuplesImpl *)SLTokenGetClass(v16);
      if (((_DWORD)Class - 46) < 2)
        goto LABEL_18;
      if ((_DWORD)Class != 32)
      {
        if ((_DWORD)Class != 43)
          goto LABEL_44;
LABEL_18:
        v19 = (char *)SLTuplesImpl::TokenContext(Class, v87);
        std::string::basic_string[abi:ne180100]<0>(__p, v19);
        end = v91.__end_;
        if (v91.__end_ < v91.__end_cap_.__value_)
          goto LABEL_28;
        v21 = 0xAAAAAAAAAAAAAAABLL * (((char *)v91.__end_ - (char *)v91.__begin_) >> 3);
        v22 = v21 + 1;
        if (v21 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * (((char *)v91.__end_cap_.__value_ - (char *)v91.__begin_) >> 3) > v22)
          v22 = 0x5555555555555556 * (((char *)v91.__end_cap_.__value_ - (char *)v91.__begin_) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v91.__end_cap_.__value_ - (char *)v91.__begin_) >> 3) >= 0x555555555555555)
          v23 = 0xAAAAAAAAAAAAAAALL;
        else
          v23 = v22;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v91.__end_cap_;
        if (!v23)
        {
          v30 = 0;
          goto LABEL_42;
        }
LABEL_135:
        v30 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v91.__end_cap_, v23);
        goto LABEL_42;
      }
      Text = SLTokenGetText(v87);
      CStringPtr = (char *)CFStringGetCStringPtr(Text, 0x8000100u);
      if (CStringPtr)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, CStringPtr);
        v28 = v91.__end_;
        if (v91.__end_ >= v91.__end_cap_.__value_)
        {
          v55 = 0xAAAAAAAAAAAAAAABLL * (((char *)v91.__end_ - (char *)v91.__begin_) >> 3);
          v56 = v55 + 1;
          if (v55 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * (((char *)v91.__end_cap_.__value_ - (char *)v91.__begin_) >> 3) > v56)
            v56 = 0x5555555555555556 * (((char *)v91.__end_cap_.__value_ - (char *)v91.__begin_) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v91.__end_cap_.__value_ - (char *)v91.__begin_) >> 3) >= 0x555555555555555)
            v57 = 0xAAAAAAAAAAAAAAALL;
          else
            v57 = v56;
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v91.__end_cap_;
          if (v57)
            v58 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v91.__end_cap_, v57);
          else
            v58 = 0;
          v63 = v58 + v55;
          __v.__first_ = v58;
          __v.__begin_ = v63;
          __v.__end_cap_.__value_ = &v58[v57];
          v64 = *(_OWORD *)__p;
          v63->__r_.__value_.__r.__words[2] = v90;
          *(_OWORD *)&v63->__r_.__value_.__l.__data_ = v64;
          __p[1] = 0;
          v90 = 0;
          __p[0] = 0;
          __v.__end_ = v63 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&v91, &__v);
          v65 = v91.__end_;
          std::__split_buffer<std::string>::~__split_buffer(&__v);
          v91.__end_ = v65;
          if (SHIBYTE(v90) < 0)
            operator delete(__p[0]);
        }
        else
        {
          v29 = *(_OWORD *)__p;
          v91.__end_->__r_.__value_.__r.__words[2] = v90;
          *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v29;
          v91.__end_ = v28 + 1;
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "*");
        end = v91.__end_;
        if (v91.__end_ < v91.__end_cap_.__value_)
          goto LABEL_28;
        v21 = 0xAAAAAAAAAAAAAAABLL * (((char *)v91.__end_ - (char *)v91.__begin_) >> 3);
        v66 = v21 + 1;
        if (v21 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * (((char *)v91.__end_cap_.__value_ - (char *)v91.__begin_) >> 3) > v66)
          v66 = 0x5555555555555556 * (((char *)v91.__end_cap_.__value_ - (char *)v91.__begin_) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v91.__end_cap_.__value_ - (char *)v91.__begin_) >> 3) >= 0x555555555555555)
          v23 = 0xAAAAAAAAAAAAAAALL;
        else
          v23 = v66;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v91.__end_cap_;
        if (!v23)
        {
          v30 = 0;
          goto LABEL_42;
        }
        goto LABEL_135;
      }
      if (!CFStringGetCString(Text, (char *)&buffer, 64, 0x8000100u))
        goto LABEL_44;
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&buffer);
      v53 = v91.__end_;
      if (v91.__end_ >= v91.__end_cap_.__value_)
      {
        v59 = 0xAAAAAAAAAAAAAAABLL * (((char *)v91.__end_ - (char *)v91.__begin_) >> 3);
        v60 = v59 + 1;
        if (v59 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * (((char *)v91.__end_cap_.__value_ - (char *)v91.__begin_) >> 3) > v60)
          v60 = 0x5555555555555556 * (((char *)v91.__end_cap_.__value_ - (char *)v91.__begin_) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v91.__end_cap_.__value_ - (char *)v91.__begin_) >> 3) >= 0x555555555555555)
          v61 = 0xAAAAAAAAAAAAAAALL;
        else
          v61 = v60;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v91.__end_cap_;
        if (v61)
          v62 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v91.__end_cap_, v61);
        else
          v62 = 0;
        v67 = v62 + v59;
        __v.__first_ = v62;
        __v.__begin_ = v67;
        __v.__end_cap_.__value_ = &v62[v61];
        v68 = *(_OWORD *)__p;
        v67->__r_.__value_.__r.__words[2] = v90;
        *(_OWORD *)&v67->__r_.__value_.__l.__data_ = v68;
        __p[1] = 0;
        v90 = 0;
        __p[0] = 0;
        __v.__end_ = v67 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v91, &__v);
        v69 = v91.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        v91.__end_ = v69;
        if (SHIBYTE(v90) < 0)
          operator delete(__p[0]);
      }
      else
      {
        v54 = *(_OWORD *)__p;
        v91.__end_->__r_.__value_.__r.__words[2] = v90;
        *(_OWORD *)&v53->__r_.__value_.__l.__data_ = v54;
        v91.__end_ = v53 + 1;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "*");
      end = v91.__end_;
      if (v91.__end_ < v91.__end_cap_.__value_)
      {
LABEL_28:
        v24 = *(_OWORD *)__p;
        end->__r_.__value_.__r.__words[2] = v90;
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v24;
        v91.__end_ = end + 1;
        goto LABEL_44;
      }
      v21 = 0xAAAAAAAAAAAAAAABLL * (((char *)v91.__end_ - (char *)v91.__begin_) >> 3);
      v70 = v21 + 1;
      if (v21 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)v91.__end_cap_.__value_ - (char *)v91.__begin_) >> 3) > v70)
        v70 = 0x5555555555555556 * (((char *)v91.__end_cap_.__value_ - (char *)v91.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v91.__end_cap_.__value_ - (char *)v91.__begin_) >> 3) >= 0x555555555555555)
        v23 = 0xAAAAAAAAAAAAAAALL;
      else
        v23 = v70;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v91.__end_cap_;
      if (v23)
        goto LABEL_135;
      v30 = 0;
LABEL_42:
      v31 = v30 + v21;
      __v.__first_ = v30;
      __v.__begin_ = v31;
      __v.__end_cap_.__value_ = &v30[v23];
      v32 = *(_OWORD *)__p;
      v31->__r_.__value_.__r.__words[2] = v90;
      *(_OWORD *)&v31->__r_.__value_.__l.__data_ = v32;
      __p[1] = 0;
      v90 = 0;
      __p[0] = 0;
      __v.__end_ = v31 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v91, &__v);
      v33 = v91.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v91.__end_ = v33;
      if (SHIBYTE(v90) < 0)
        operator delete(__p[0]);
LABEL_44:
      if (v91.__begin_ == v91.__end_)
        break;
      if (v99)
      {
        while (1)
        {
          __v.__first_ = (std::__split_buffer<std::string>::pointer)*((_QWORD *)v98[1] + 2);
          if (*((char *)v98[1] + 47) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&__v.__begin_, *((const std::string::value_type **)v98[1] + 3), *((_QWORD *)v98[1] + 4));
          }
          else
          {
            *(_OWORD *)&__v.__begin_ = *(_OWORD *)((char *)v98[1] + 24);
            __v.__end_cap_.__value_ = (std::string *)*((_QWORD *)v98[1] + 5);
          }
          value_high = __v.__end_;
          if (SHIBYTE(__v.__end_cap_.__value_) >= 0)
            value_high = (std::__split_buffer<std::string>::pointer)HIBYTE(__v.__end_cap_.__value_);
          if (value_high)
            break;
          if (v91.__end_ != v91.__begin_)
          {
            v45 = 0;
            v46 = 0;
            do
            {
              __v.__first_ = (std::__split_buffer<std::string>::pointer)*((_QWORD *)v98[1] + 2);
              std::string::operator=((std::string *)&__v.__begin_, (const std::string *)v98[1] + 1);
              std::string::operator=((std::string *)&__v.__begin_, &v91.__begin_[v45]);
              if (v46)
              {
                LOBYTE(__v.__first_) = 1;
                --HIDWORD(__v.__first_);
              }
              v47 = std::__list_imp<SLTupleHypothesis>::__create_node[abi:ne180100]<SLTupleHypothesis const&>((uint64_t)&v96, 0, 0, (uint64_t)&__v);
              v48 = v96;
              v47->__r_.__value_.__r.__words[0] = v96;
              v47->__r_.__value_.__l.__size_ = (std::string::size_type)&v96;
              *(_QWORD *)(v48 + 8) = v47;
              *(_QWORD *)&v96 = v47;
              ++v97;
              ++v46;
              ++v45;
            }
            while (v46 < 0xAAAAAAAAAAAAAAABLL * (((char *)v91.__end_ - (char *)v91.__begin_) >> 3));
          }
LABEL_84:
          v49 = (void **)v98[1];
          v50 = *(_QWORD *)v98[1];
          *(_QWORD *)(v50 + 8) = *((_QWORD *)v98[1] + 1);
          *(_QWORD *)v49[1] = v50;
          --v99;
          std::__list_imp<SLTupleHypothesis>::__delete_node[abi:ne180100]<>((int)v98, v49);
          if (SHIBYTE(__v.__end_cap_.__value_) < 0)
            operator delete(__v.__begin_);
          if (!v99)
            goto LABEL_87;
        }
        if (v91.__end_ == v91.__begin_)
          goto LABEL_84;
        v35 = 0;
LABEL_54:
        __v.__first_ = (std::__split_buffer<std::string>::pointer)*((_QWORD *)v98[1] + 2);
        std::string::operator=((std::string *)&__v.__begin_, (const std::string *)v98[1] + 1);
        if (v35)
        {
          LOBYTE(__v.__first_) = 1;
          v36 = 99;
        }
        else
        {
          v36 = 100;
        }
        HIDWORD(__v.__first_) += v36;
        std::string::push_back((std::string *)&__v.__begin_, 95);
        v37 = &v91.__begin_[v35];
        v38 = SHIBYTE(v37->__r_.__value_.__r.__words[2]);
        if (v38 >= 0)
          v39 = &v91.__begin_[v35];
        else
          v39 = (std::string *)v37->__r_.__value_.__r.__words[0];
        if (v38 >= 0)
          size = HIBYTE(v37->__r_.__value_.__r.__words[2]);
        else
          size = v37->__r_.__value_.__l.__size_;
        std::string::append((std::string *)&__v.__begin_, (const std::string::value_type *)v39, size);
        if (SHIBYTE(__v.__end_cap_.__value_) >= 0)
          p_begin = (const char *)&__v.__begin_;
        else
          p_begin = (const char *)__v.__begin_;
        if (LOBYTE(__v.__first_))
          v42 = SLTuplesImpl::AbstractTupleLookup((sqlite3_stmt **)this, p_begin);
        else
          v42 = SLTuplesImpl::TupleLookup((sqlite3_stmt **)this, p_begin);
        while (1)
        {
          if (v42 == 2)
            goto LABEL_74;
          if (!v42)
          {
            if (++v35 >= 0xAAAAAAAAAAAAAAABLL * (((char *)v91.__end_ - (char *)v91.__begin_) >> 3))
              goto LABEL_84;
            goto LABEL_54;
          }
          if (SHIDWORD(__v.__first_) > first_high)
          {
            v14 = v42;
            first_high = HIDWORD(__v.__first_);
            v13 = v11 + 1;
            v12 = v17;
          }
          if ((v42 & 2) != 0)
          {
LABEL_74:
            v43 = std::__list_imp<SLTupleHypothesis>::__create_node[abi:ne180100]<SLTupleHypothesis const&>((uint64_t)&v96, 0, 0, (uint64_t)&__v);
            v44 = v96;
            v43->__r_.__value_.__r.__words[0] = v96;
            v43->__r_.__value_.__l.__size_ = (std::string::size_type)&v96;
            *(_QWORD *)(v44 + 8) = v43;
            *(_QWORD *)&v96 = v43;
            ++v97;
          }
          v42 = 0;
          if (LOBYTE(__v.__first_))
            v42 = SLTuplesImpl::AbstractTupleLookup((sqlite3_stmt **)this, 0);
        }
      }
LABEL_87:
      v51 = v97;
      v99 = v97;
      v97 = 0;
      *(_OWORD *)v98 = v96;
      if (v51)
      {
        *(_QWORD *)v98[1] = v98;
        v52 = (void **)((char *)v98[0] + 8);
      }
      else
      {
        v98[0] = v98;
        v52 = &v98[1];
      }
      v3 = &this->i64[1];
      *v52 = v98;
      *(_QWORD *)&v96 = &v96;
      *((_QWORD *)&v96 + 1) = &v96;
      buffer = (void **)&v91;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&buffer);
      if (v87)
      {
        ++v11;
        if (v99)
          continue;
      }
      goto LABEL_138;
    }
    buffer = (void **)&v91;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&buffer);
    v3 = &this->i64[1];
LABEL_138:
    if (v13)
    {
      __v.__first_ = (std::__split_buffer<std::string>::pointer)(v13 - v12);
      LODWORD(__p[0]) = 0;
      v88 = 0;
      (*(void (**)(int64x2_t *, sqlite3_int64, void **, unsigned __int8 *))(this->i64[0] + 72))(this, v14, __p, &v88);
      v91.__begin_ = 0;
      if (__v.__first_)
      {
        v71 = 0;
        do
        {
          v72 = SLLexerBuffer::operator[](v3, v71);
          v73 = v72;
          if (v91.__begin_ && ((uint64_t)__p[0] & 1) != 0 && (*((unsigned __int8 *)v72 + 1) | 2) != 3)
            *((_BYTE *)v72 + 1) = 2;
          (*(void (**)(int64x2_t *))(this->i64[0] + 80))(this);
          *((_DWORD *)v73 + 4) |= 0x100000u;
          LOWORD(buffer) = 0;
          SLToken::SelectHomographs((SLToken *)v73, 0, (const SLWordTagSet *)&buffer);
          begin = v91.__begin_;
          if (v88 != 255)
          {
            *((_BYTE *)v73 + 20) = v88;
            if (begin >= (std::vector<std::string>::pointer)((char *)&__v.__first_[-1].__r_.__value_.__r.__words[2] + 7))
              v75 = 62;
            else
              v75 = 45;
            if (!begin)
              v75 = 60;
            *((_BYTE *)v73 + 6) = v75;
          }
          v71 = (unint64_t)begin->__r_.__value_.__r.__words + 1;
          v91.__begin_ = (std::vector<std::string>::pointer)((char *)&begin->__r_.__value_.__l.__data_ + 1);
        }
        while ((std::__split_buffer<std::string>::pointer)((unint64_t)begin->__r_.__value_.__r.__words + 1) < __v.__first_);
      }
      (*(void (**)(int64x2_t *, std::__split_buffer<std::string> *, _QWORD))(this->i64[0] + 88))(this, &__v, LODWORD(__p[0]));
      this[8].i64[1] = (uint64_t)__v.__first_;
      goto LABEL_164;
    }
LABEL_155:
    v76 = SLLexerBuffer::operator[](v3, 0);
    if (!v76 || *((_BYTE *)v76 + 1) == 1)
      goto LABEL_162;
    v77 = 1;
    do
    {
      v78 = v77;
      v79 = SLLexerBuffer::operator[](v3, v77);
      if (!v79)
        break;
      v77 = v78 + 1;
    }
    while (*((_BYTE *)v79 + 1) == 1);
    if (v78 < 2
      || ((*(uint64_t (**)(int64x2_t *, unint64_t))(this->i64[0] + 104))(this, v78) & 1) == 0)
    {
LABEL_162:
      v78 = 1;
    }
    this[8].i64[1] = v78;
LABEL_164:
    if (v95 < 0)
      operator delete(v94);
    std::__list_imp<SLTupleHypothesis>::clear(&v96);
    std::__list_imp<SLTupleHypothesis>::clear(v98);
    v2 = this[8].i64[1];
  }
  while (!v2);
LABEL_169:
  this[8].i64[1] = v2 - 1;
  v80 = (SLToken *)SLLexerBuffer::operator[](&this->i64[1], 0);
  v81 = v80;
  if (v80)
  {
    if (*((_QWORD *)v80 + 8) - *((_QWORD *)v80 + 7) == 4)
    {
      v82 = *((_DWORD *)v80 + 4);
      if ((v82 & 0x10) == 0)
      {
        if ((v82 & 0x400) == 0)
        {
          LODWORD(buffer) = 4784129;
          SLToken::SelectHomographs(v80, 0x7FFFFFFF, (const SLWordTagSet *)&buffer);
        }
        LODWORD(buffer) = 5046273;
        SLToken::SelectHomographs(v81, 0x7FFFFFFF, (const SLWordTagSet *)&buffer);
      }
    }
    this[4] = vaddq_s64(this[4], (int64x2_t)xmmword_21701CDA0);
    std::deque<SLToken *>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)this[2].i64, 1);
    v83 = (SLTuplesImpl *)SLTokenGetClass((unsigned __int8 *)v81);
    if (((_DWORD)v83 - 35) > 0x38 || ((1 << (v83 - 35)) & 0x100000010000001) == 0)
    {
      v84 = SLTuplesImpl::TokenContext(v83, v81);
      MEMORY[0x219A063F4](&this[9], v84);
    }
  }
  else
  {
    SLLexerBuffer::clear((SLLexerBuffer *)&this->u64[1]);
  }
  return v81;
}

void sub_216FAC440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char *a48)
{
  uint64_t v48;

  if (a25 < 0)
    operator delete(__p);
  a48 = &a26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v48 - 168));
  if (a35 < 0)
    operator delete(a30);
  std::__list_imp<SLTupleHypothesis>::clear(&a36);
  std::__list_imp<SLTupleHypothesis>::clear(&a39);
  _Unwind_Resume(a1);
}

const char *SLTuplesImpl::TokenContext(SLTuplesImpl *this, SLToken *a2)
{
  int Class;
  const __CFString *Text;
  int CharacterAtIndex;
  const char *result;

  if (!a2)
    return ".";
  Class = SLTokenGetClass((unsigned __int8 *)a2);
  if (Class == 43 || Class == 47)
    return ".";
  if (Class != 46 || *((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7) != 6)
    return "";
  Text = SLTokenGetText(a2);
  CharacterAtIndex = CFStringGetCharacterAtIndex(Text, 0);
  result = ".";
  if (CharacterAtIndex <= 57)
  {
    if (CharacterAtIndex != 33 && CharacterAtIndex != 46)
      return ",";
  }
  else
  {
    if (CharacterAtIndex == 8212)
      return ":";
    if (CharacterAtIndex != 63)
    {
      if (CharacterAtIndex == 58)
        return ":";
      return ",";
    }
  }
  return result;
}

void SLLexerBuffer::clear(SLLexerBuffer *this)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (void **)*((_QWORD *)this + 4);
  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 8) = 0;
  v4 = v3 - (_QWORD)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v5 = *((_QWORD *)this + 5);
      v2 = (void **)(*((_QWORD *)this + 4) + 8);
      *((_QWORD *)this + 4) = v2;
      v4 = v5 - (_QWORD)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    v6 = 256;
  }
  else
  {
    if (v4 >> 3 != 2)
      return;
    v6 = 512;
  }
  *((_QWORD *)this + 7) = v6;
}

BOOL SLTuplesImpl::HasTuple(sqlite3_stmt **this, char *a2, ...)
{
  const std::string::value_type *v3;
  std::string *v4;
  sqlite3_int64 v5;
  va_list v7;
  std::string v8;
  va_list va;

  va_start(va, a2);
  std::string::basic_string[abi:ne180100]<0>(&v8, a2);
  va_copy(v7, va);
  while (1)
  {
    v3 = va_arg(v7, const std::string::value_type *);
    if (!v3)
      break;
    std::string::push_back(&v8, 95);
    std::string::append(&v8, v3);
  }
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = &v8;
  else
    v4 = (std::string *)v8.__r_.__value_.__r.__words[0];
  v5 = SLTuplesImpl::TupleLookup(this, (const char *)v4);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  return v5 != 0;
}

void sub_216FAC77C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SLTuplesImpl::LexerBehavior(SLTuplesImpl *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 8))(*((_QWORD *)this + 2));
}

uint64_t SLTuplesImpl::SetLexerBehavior(SLTuplesImpl *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2));
}

uint64_t SLTuplesImpl::SetDelim(SLTuplesImpl *this, const unsigned __int16 *a2)
{
  return (*(uint64_t (**)(_QWORD, const unsigned __int16 *))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2), a2);
}

uint64_t SLTuplesImpl::Delim(SLTuplesImpl *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2));
}

uint64_t SLTuplesImpl::SetErrorHandler(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
}

uint64_t SLTuples::HasTuple(SLTuples *this, const char *a2, ...)
{
  return 0;
}

void std::__list_imp<SLTupleHypothesis>::clear(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  if (a1[2])
  {
    v3 = *a1;
    v2 = a1[1];
    v4 = *(_QWORD **)v2;
    v4[1] = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v3 + 8) = v4;
    a1[2] = 0;
    while ((_QWORD *)v2 != a1)
    {
      v5 = *(_QWORD *)(v2 + 8);
      std::__list_imp<SLTupleHypothesis>::__delete_node[abi:ne180100]<>((int)a1, (void **)v2);
      v2 = v5;
    }
  }
}

void std::__list_imp<SLTupleHypothesis>::__delete_node[abi:ne180100]<>(int a1, void **__p)
{
  if (*((char *)__p + 47) < 0)
    operator delete(__p[3]);
  operator delete(__p);
}

uint64_t std::deque<SLToken *>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x200)
    a2 = 1;
  if (v2 < 0x400)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 512;
  }
  return v4 ^ 1u;
}

std::string *std::__list_imp<SLTupleHypothesis>::__create_node[abi:ne180100]<SLTupleHypothesis const&>(uint64_t a1, std::string::size_type a2, std::string::size_type a3, uint64_t a4)
{
  std::string *v7;
  std::string *v8;

  v7 = (std::string *)operator new(0x30uLL);
  v7->__r_.__value_.__r.__words[0] = a2;
  v7->__r_.__value_.__l.__size_ = a3;
  v7->__r_.__value_.__r.__words[2] = *(_QWORD *)a4;
  v8 = v7 + 1;
  if (*(char *)(a4 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a4 + 8), *(_QWORD *)(a4 + 16));
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)(a4 + 8);
    v7[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(a4 + 24);
  }
  return v7;
}

void sub_216FAC954(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::string *v4;
  std::string *begin;
  std::string *end;
  std::string *value;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100]((uint64_t)this, (void **)&this->__begin_->__r_.__value_.__l.__data_);
  if (this->__first_)
    operator delete(this->__first_);
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

void SLToken::SLToken(SLToken *this, char a2, int a3)
{
  *(_BYTE *)this = a2;
  *(_DWORD *)((char *)this + 1) = 0;
  *(_WORD *)((char *)this + 5) = 0x2000;
  *((_DWORD *)this + 4) = a3;
  *((_BYTE *)this + 20) = -1;
  *((_QWORD *)this + 3) = "(None)";
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_QWORD *)this + 12) = 0;
}

{
  *(_BYTE *)this = a2;
  *(_DWORD *)((char *)this + 1) = 0;
  *(_WORD *)((char *)this + 5) = 0x2000;
  *((_DWORD *)this + 4) = a3;
  *((_BYTE *)this + 20) = -1;
  *((_QWORD *)this + 3) = "(None)";
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_QWORD *)this + 12) = 0;
}

void SLToken::~SLToken(SLToken *this)
{
  void *v2;
  void *v3;

  SLToken::clear(this);
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 7);
  if (v3)
  {
    *((_QWORD *)this + 8) = v3;
    operator delete(v3);
  }
}

void SLToken::clear(SLToken *this)
{
  const void *v2;
  uint64_t v3;
  uint64_t v4;
  SLHomograph *v5;
  SLHomograph *v6;

  v2 = (const void *)*((_QWORD *)this + 6);
  if (v2)
  {
    CFRelease(v2);
    *((_QWORD *)this + 6) = 0;
  }
LABEL_3:
  v4 = *((_QWORD *)this + 10);
  v3 = *((_QWORD *)this + 11);
  while (v3 != v4)
  {
    v6 = *(SLHomograph **)(v3 - 8);
    v3 -= 8;
    v5 = v6;
    *((_QWORD *)this + 11) = v3;
    if (v6)
    {
      SLHomograph::~SLHomograph(v5);
      MEMORY[0x219A0649C]();
      goto LABEL_3;
    }
  }
}

void SLToken::SetType(SLToken *this, char a2)
{
  *(_BYTE *)this = a2;
  *((_DWORD *)this + 4) &= ~0x40u;
  SLToken::clear(this);
}

void SLToken::ChooseHomograph(SLToken *this, SLHomograph *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  SLHomograph *v6;
  SLHomograph *v7;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v5 = (_QWORD *)*((_QWORD *)this + 10);
  v4 = (_QWORD *)*((_QWORD *)this + 11);
  if (v4 == v5)
  {
    v5 = (_QWORD *)*((_QWORD *)this + 11);
  }
  else
  {
    do
    {
      v7 = (SLHomograph *)*--v4;
      v6 = v7;
      *((_QWORD *)this + 11) = v4;
      if (v7 != a2 && v6 != 0)
      {
        SLHomograph::~SLHomograph(v6);
        MEMORY[0x219A0649C]();
        v5 = (_QWORD *)*((_QWORD *)this + 10);
        v4 = (_QWORD *)*((_QWORD *)this + 11);
      }
    }
    while (v4 != v5);
  }
  v9 = *((_QWORD *)this + 12);
  if ((unint64_t)v5 >= v9)
  {
    v11 = v9 - (_QWORD)v5;
    v12 = v11 >> 2;
    if ((unint64_t)(v11 >> 2) <= 1)
      v12 = 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v14 = std::__allocate_at_least[abi:ne180100]<std::allocator<SLHomograph *>>((uint64_t)this + 96, v13);
    v16 = &v14[v15];
    *v14 = a2;
    v10 = v14 + 1;
    v18 = (char *)*((_QWORD *)this + 10);
    v17 = (char *)*((_QWORD *)this + 11);
    if (v17 != v18)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *--v14 = v19;
      }
      while (v17 != v18);
      v17 = (char *)*((_QWORD *)this + 10);
    }
    *((_QWORD *)this + 10) = v14;
    *((_QWORD *)this + 11) = v10;
    *((_QWORD *)this + 12) = v16;
    if (v17)
      operator delete(v17);
  }
  else
  {
    *v5 = a2;
    v10 = v5 + 1;
  }
  *((_QWORD *)this + 11) = v10;
}

uint64_t SLToken::SelectHomographs(SLToken *this, int a2, const SLWordTagSet *a3)
{
  uint64_t v3;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int *v10;
  int v11;
  unint64_t v12;
  SLWordTagSet *v13;
  int v14;
  unint64_t v15;
  char *v16;
  _BOOL4 v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  SLHomograph *v21;
  char *v23;

  v3 = *((_QWORD *)this + 10);
  if (*((_QWORD *)this + 11) == v3)
    return 0;
  v23 = (char *)this + 80;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  do
  {
    v10 = *(int **)(v3 + 8 * v7);
    v11 = *v10 & a2;
    if (v11)
    {
      v12 = 0;
      *v10 = v11;
      v13 = (SLWordTagSet *)(v10 + 1);
      v14 = 1;
      while (v12 < *(unsigned __int16 *)a3)
      {
        v15 = v12 + 1;
        v16 = (char *)a3 + 2 * v12;
        v14 &= SLWordTagSet::find(v13, *((unsigned __int16 *)v16 + 1));
        v17 = SLWordTagSet::find(v13, *((unsigned __int16 *)v16 + 1) ^ 1);
        v12 = v15;
        if (v17)
        {
          if ((v14 & 1) == 0)
            goto LABEL_12;
          goto LABEL_10;
        }
      }
      if ((v14 & 1) != 0)
      {
LABEL_10:
        v8 |= 1 << v7;
        goto LABEL_12;
      }
      v9 |= 1 << v7;
    }
LABEL_12:
    ++v7;
    v3 = *((_QWORD *)this + 10);
    v18 = *((_QWORD *)this + 11);
  }
  while (v7 < (v18 - v3) >> 3);
  if (!v8)
  {
    v8 = v9;
    if (!v9)
      return 0;
  }
  if (v8 != ~(-1 << ((unint64_t)(v18 - v3) >> 3)))
  {
    if (v18 == v3)
    {
      v20 = 0;
    }
    else
    {
      v19 = 0;
      v20 = 0;
      do
      {
        v21 = *(SLHomograph **)(v3 + 8 * v19);
        if (((v8 >> v19) & 1) != 0)
        {
          *(_QWORD *)(v3 + 8 * v20++) = v21;
        }
        else if (v21)
        {
          SLHomograph::~SLHomograph(v21);
          MEMORY[0x219A0649C]();
        }
        ++v19;
        v3 = *((_QWORD *)this + 10);
      }
      while (v19 < (*((_QWORD *)this + 11) - v3) >> 3);
    }
    std::vector<SLHomograph *>::resize((uint64_t)v23, v20);
  }
  return 1;
}

void std::vector<SLHomograph *>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<SLHomograph *>::__append((void **)a1, a2 - v2);
  }
}

uint64_t SLToken::ExcludeHomographs(SLToken *this, const SLWordTagSet *a2)
{
  uint64_t v2;
  unint64_t v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _BOOL4 v10;
  uint64_t v11;

  v2 = *((_QWORD *)this + 10);
  if (*((_QWORD *)this + 11) == v2)
    goto LABEL_13;
  v5 = 0;
  v6 = 0;
  do
  {
    v7 = 0;
    v8 = *(_QWORD *)(v2 + 8 * v5);
    do
    {
      if (v7 >= *(unsigned __int16 *)a2)
      {
        v11 = *((_QWORD *)this + 11);
        goto LABEL_10;
      }
      v9 = v7 + 1;
      v10 = SLWordTagSet::find((SLWordTagSet *)(v8 + 4), *((unsigned __int16 *)a2 + v7 + 1));
      v7 = v9;
    }
    while (!v10);
    if (v8)
    {
      SLHomograph::~SLHomograph((SLHomograph *)v8);
      MEMORY[0x219A0649C]();
    }
    *(_QWORD *)(*((_QWORD *)this + 10) + 8 * v5) = *(_QWORD *)(*((_QWORD *)this + 11) - 8);
    v11 = *((_QWORD *)this + 11) - 8;
    *((_QWORD *)this + 11) = v11;
    v6 = 1;
LABEL_10:
    ++v5;
    v2 = *((_QWORD *)this + 10);
  }
  while (v5 < (v11 - v2) >> 3);
  if (v11 == v2)
LABEL_13:
    SLToken::ExcludeHomographs();
  return v6 & 1;
}

BOOL SLToken::HasTag(SLToken *this, int a2)
{
  uint64_t v2;
  unint64_t v5;
  _BOOL8 result;

  v2 = *((_QWORD *)this + 10);
  if (*((_QWORD *)this + 11) == v2)
    return 0;
  v5 = 0;
  do
  {
    result = SLWordTagSet::find((SLWordTagSet *)(*(_QWORD *)(v2 + 8 * v5) + 4), a2);
    if (result)
      break;
    ++v5;
    v2 = *((_QWORD *)this + 10);
  }
  while (v5 < (*((_QWORD *)this + 11) - v2) >> 3);
  return result;
}

BOOL SLToken::HasPOS(SLToken *this, int a2)
{
  _DWORD **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  int v9;

  v2 = (_DWORD **)*((_QWORD *)this + 10);
  v3 = *((_QWORD *)this + 11) - (_QWORD)v2;
  if (!v3)
    return 0;
  v4 = v3 >> 3;
  if (v4 <= 1)
    v5 = 1;
  else
    v5 = v4;
  if ((**v2 & a2) != 0)
    return 1;
  v7 = 1;
  do
  {
    v8 = v7;
    if (v5 == v7)
      break;
    v9 = *v2[v7++];
  }
  while ((v9 & a2) == 0);
  return v8 < v4;
}

void SLToken::SetText(SLToken *this, char *a2)
{
  void **v4;
  const void *v5;
  char v6;
  __int16 v7;
  __int16 v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  char *v13;
  _WORD *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  __int16 v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  __int16 v35;
  unint64_t v36;
  _WORD *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  __int16 v47;

  v4 = (void **)((char *)this + 56);
  *((_QWORD *)this + 8) = *((_QWORD *)this + 7);
  v5 = (const void *)*((_QWORD *)this + 6);
  if (v5)
  {
    CFRelease(v5);
    *((_QWORD *)this + 6) = 0;
  }
  v6 = *a2;
  if (*a2)
  {
    while (1)
    {
      v7 = v6;
      if (v6 < 0)
      {
        if ((v6 & 0xE0) == 0xC0)
        {
          v8 = a2[1] & 0x3F | ((v6 & 0x1F) << 6);
          a2 += 2;
          v7 = v8;
          goto LABEL_32;
        }
        if ((v6 & 0xF0) == 0xE0)
        {
          v7 = (v6 << 12) | ((a2[1] & 0x3F) << 6) | a2[2] & 0x3F;
          a2 += 3;
          goto LABEL_32;
        }
        if ((v6 & 0xF8) == 0xF0)
        {
          v9 = ((v6 & 0xF) << 18) | ((a2[1] & 0x3F) << 12) | ((a2[2] & 0x3F) << 6);
          v10 = v9 | a2[3] & 0x3F;
          v7 = ((a2[1] & 0x3F) << 12) | ((a2[2] & 0x3F) << 6) | a2[3] & 0x3F;
          if (v10 >= 0x10000)
          {
            v11 = ((v9 + 67043328) >> 10) - 10240;
            v13 = (char *)*((_QWORD *)this + 8);
            v12 = *((_QWORD *)this + 9);
            if ((unint64_t)v13 >= v12)
            {
              v15 = (char *)*v4;
              v16 = v13 - (_BYTE *)*v4;
              if (v16 <= -3)
                goto LABEL_70;
              v17 = v16 >> 1;
              v18 = v12 - (_QWORD)v15;
              if (v18 <= (v16 >> 1) + 1)
                v19 = v17 + 1;
              else
                v19 = v18;
              if (v18 >= 0x7FFFFFFFFFFFFFFELL)
                v20 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v20 = v19;
              if (v20)
              {
                v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)this + 72, v20);
                v15 = (char *)*((_QWORD *)this + 7);
                v13 = (char *)*((_QWORD *)this + 8);
              }
              else
              {
                v21 = 0;
              }
              v22 = &v21[2 * v17];
              *(_WORD *)v22 = v11;
              v14 = v22 + 2;
              while (v13 != v15)
              {
                v23 = *((_WORD *)v13 - 1);
                v13 -= 2;
                *((_WORD *)v22 - 1) = v23;
                v22 -= 2;
              }
              *((_QWORD *)this + 7) = v22;
              *((_QWORD *)this + 8) = v14;
              *((_QWORD *)this + 9) = &v21[2 * v20];
              if (v15)
                operator delete(v15);
            }
            else
            {
              *(_WORD *)v13 = v11;
              v14 = v13 + 2;
            }
            *((_QWORD *)this + 8) = v14;
            v7 = v10 & 0x3FF | 0xDC00;
          }
          a2 += 4;
          goto LABEL_32;
        }
        v7 = 0;
      }
      ++a2;
LABEL_32:
      v25 = (char *)*((_QWORD *)this + 8);
      v24 = *((_QWORD *)this + 9);
      if ((unint64_t)v25 >= v24)
      {
        v27 = (char *)*v4;
        v28 = v25 - (_BYTE *)*v4;
        if (v28 <= -3)
          goto LABEL_70;
        v29 = v28 >> 1;
        v30 = v24 - (_QWORD)v27;
        if (v30 <= (v28 >> 1) + 1)
          v31 = v29 + 1;
        else
          v31 = v30;
        if (v30 >= 0x7FFFFFFFFFFFFFFELL)
          v32 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v32 = v31;
        if (v32)
        {
          v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)this + 72, v32);
          v27 = (char *)*((_QWORD *)this + 7);
          v25 = (char *)*((_QWORD *)this + 8);
        }
        else
        {
          v33 = 0;
        }
        v34 = &v33[2 * v29];
        *(_WORD *)v34 = v7;
        v26 = v34 + 2;
        while (v25 != v27)
        {
          v35 = *((_WORD *)v25 - 1);
          v25 -= 2;
          *((_WORD *)v34 - 1) = v35;
          v34 -= 2;
        }
        *((_QWORD *)this + 7) = v34;
        *((_QWORD *)this + 8) = v26;
        *((_QWORD *)this + 9) = &v33[2 * v32];
        if (v27)
          operator delete(v27);
      }
      else
      {
        *(_WORD *)v25 = v7;
        v26 = v25 + 2;
      }
      *((_QWORD *)this + 8) = v26;
      v6 = *a2;
      if (!*a2)
        goto LABEL_52;
    }
  }
  v26 = (char *)*((_QWORD *)this + 8);
LABEL_52:
  v36 = *((_QWORD *)this + 9);
  if ((unint64_t)v26 >= v36)
  {
    v38 = (char *)*v4;
    v39 = v26 - (_BYTE *)*v4;
    if (v39 <= -3)
LABEL_70:
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v40 = v39 >> 1;
    v41 = v36 - (_QWORD)v38;
    if (v41 <= (v39 >> 1) + 1)
      v42 = v40 + 1;
    else
      v42 = v41;
    if (v41 >= 0x7FFFFFFFFFFFFFFELL)
      v43 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v43 = v42;
    if (v43)
    {
      v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)this + 72, v43);
      v38 = (char *)*((_QWORD *)this + 7);
      v26 = (char *)*((_QWORD *)this + 8);
    }
    else
    {
      v44 = 0;
    }
    v45 = &v44[2 * v40];
    v46 = &v44[2 * v43];
    *(_WORD *)v45 = 0;
    v37 = v45 + 2;
    while (v26 != v38)
    {
      v47 = *((_WORD *)v26 - 1);
      v26 -= 2;
      *((_WORD *)v45 - 1) = v47;
      v45 -= 2;
    }
    *((_QWORD *)this + 7) = v45;
    *((_QWORD *)this + 8) = v37;
    *((_QWORD *)this + 9) = v46;
    if (v38)
      operator delete(v38);
  }
  else
  {
    *(_WORD *)v26 = 0;
    v37 = v26 + 2;
  }
  *((_QWORD *)this + 8) = v37;
}

char *SLToken::AppendToken(SLToken *this, char **a2)
{
  char *result;
  uint64_t v5;

  result = std::vector<unsigned short>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned short *>,std::__wrap_iter<unsigned short *>>((uint64_t)this + 56, *((_QWORD *)this + 8) - 2, a2[7], a2[8] - 2, (a2[8] - 2 - a2[7]) >> 1);
  *((_DWORD *)this + 4) = (_DWORD)a2[2] & 0x1001 | *((_DWORD *)this + 4) & 0xFFFFEFFE;
  v5 = *((_QWORD *)this + 5);
  if (a2[4] == (char *)(v5 + *((_QWORD *)this + 4)))
    *((_QWORD *)this + 5) = &a2[5][v5];
  return result;
}

void SLToken::SetTokenRange(SLToken *this, SLToken *a2, CFRange a3)
{
  CFIndex length;
  CFIndex location;
  void **v7;
  unint64_t v8;
  char *v9;
  _WORD *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int16 v20;

  length = a3.length;
  location = a3.location;
  v7 = (void **)((char *)this + 56);
  std::vector<unsigned short>::__assign_with_size[abi:ne180100]<std::__wrap_iter<unsigned short *>,std::__wrap_iter<unsigned short *>>((char *)this + 56, (char *)(*((_QWORD *)a2 + 7) + 2 * a3.location), *((_QWORD *)a2 + 7) + 2 * a3.location + 2 * a3.length, a3.length);
  v8 = *((_QWORD *)this + 9);
  v9 = (char *)*((_QWORD *)this + 8);
  if ((unint64_t)v9 >= v8)
  {
    v11 = (char *)*v7;
    v12 = v9 - (_BYTE *)*v7;
    if (v12 <= -3)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v13 = v12 >> 1;
    v14 = v8 - (_QWORD)v11;
    if (v14 <= (v12 >> 1) + 1)
      v15 = v13 + 1;
    else
      v15 = v14;
    if (v14 >= 0x7FFFFFFFFFFFFFFELL)
      v16 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    if (v16)
    {
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)this + 72, v16);
      v11 = (char *)*((_QWORD *)this + 7);
      v9 = (char *)*((_QWORD *)this + 8);
    }
    else
    {
      v17 = 0;
    }
    v18 = &v17[2 * v13];
    v19 = &v17[2 * v16];
    *(_WORD *)v18 = 0;
    v10 = v18 + 2;
    while (v9 != v11)
    {
      v20 = *((_WORD *)v9 - 1);
      v9 -= 2;
      *((_WORD *)v18 - 1) = v20;
      v18 -= 2;
    }
    *((_QWORD *)this + 7) = v18;
    *((_QWORD *)this + 8) = v10;
    *((_QWORD *)this + 9) = v19;
    if (v11)
      operator delete(v11);
  }
  else
  {
    *(_WORD *)v9 = 0;
    v10 = v9 + 2;
  }
  *((_QWORD *)this + 8) = v10;
  *((_QWORD *)this + 4) = location;
  *((_QWORD *)this + 5) = length;
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4) + location;
}

_QWORD *SLToken::RemoveRange(_QWORD *this, CFRange a2)
{
  CFIndex length;
  uint64_t v3;
  _BYTE *v4;
  char *v5;
  char *v6;
  uint64_t v7;

  length = a2.length;
  v3 = (uint64_t)this;
  if (a2.length)
  {
    v4 = (_BYTE *)this[8];
    v5 = (char *)(this[7] + 2 * a2.location);
    v6 = &v5[2 * a2.length];
    v7 = v4 - v6;
    if (v4 != v6)
      this = memmove(v5, v6, v4 - v6);
    *(_QWORD *)(v3 + 64) = &v5[v7];
  }
  *(_QWORD *)(v3 + 40) -= length;
  return this;
}

void SLToken::TransferTokenRange(SLToken *this, SLToken *a2, CFRange a3)
{
  CFIndex length;
  CFIndex location;
  _BYTE *v6;
  char *v7;
  char *v8;
  uint64_t v9;

  length = a3.length;
  location = a3.location;
  SLToken::SetTokenRange(this, a2, a3);
  if (length)
  {
    v6 = (_BYTE *)*((_QWORD *)a2 + 8);
    v7 = (char *)(*((_QWORD *)a2 + 7) + 2 * location);
    v8 = &v7[2 * length];
    v9 = v6 - v8;
    if (v6 != v8)
      memmove(v7, v8, v6 - v8);
    *((_QWORD *)a2 + 8) = &v7[v9];
  }
  *((_QWORD *)a2 + 5) -= length;
}

uint64_t SLToken::Capitalization(SLToken *this)
{
  int v1;
  uint64_t result;
  _WORD *v3;
  unint64_t v4;

  v1 = *((_DWORD *)this + 4);
  if ((v1 & 0x10) != 0)
    return 33;
  if (*((_BYTE *)this + 5) == 1)
  {
    if (*((_QWORD *)this + 8) - *((_QWORD *)this + 7) == 4)
      return 33;
    else
      return 43;
  }
  else if ((v1 & 8) != 0)
  {
    return 63;
  }
  else
  {
    v3 = (_WORD *)*((_QWORD *)this + 7);
    v4 = *((_QWORD *)this + 8) - (_QWORD)v3;
    result = 63;
    if (v4 >= 4)
    {
      if ((SLChar::sCharClass[*v3 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v3 >> 6] << 6)] & 0x1F) == 1)
        return 45;
      else
        return 63;
    }
  }
  return result;
}

uint64_t SLToken::SetCapitalization(uint64_t result, int a2)
{
  int v2;
  unsigned int v3;

  v2 = *(_DWORD *)(result + 16);
  *(_DWORD *)(result + 16) = v2 & 0xFFFFFFF7;
  if (a2 != 45)
  {
    if (a2 == 43)
    {
      *(_BYTE *)(result + 5) = 1;
    }
    else
    {
      if (a2 == 33)
        v3 = v2 & 0xFFFFFFE7 | 0x10;
      else
        v3 = v2 | 8;
      *(_DWORD *)(result + 16) = v3;
    }
  }
  return result;
}

char *SLToken::TypeName(SLToken *this)
{
  return sTypeName[this];
}

char *SLToken::FlagName(SLToken *this)
{
  return sFlagName[(_QWORD)this];
}

void SLPhonTune::SLPhonTune(SLPhonTune *this)
{
  *(_DWORD *)this = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 1) = 0;
}

{
  *(_DWORD *)this = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 1) = 0;
}

void SLHomograph::SLHomograph(SLHomograph *this)
{
  *(_DWORD *)this = 0;
  *((_WORD *)this + 2) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
}

{
  *(_DWORD *)this = 0;
  *((_WORD *)this + 2) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
}

void SLHomograph::~SLHomograph(SLHomograph *this)
{
  const void *v2;
  void *v3;
  void **v4;

  v2 = (const void *)*((_QWORD *)this + 3);
  if (v2)
    CFRelease(v2);
  v4 = (void **)((char *)this + 56);
  std::vector<SLPhonTune>::__destroy_vector::operator()[abi:ne180100](&v4);
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
}

double SLTokenCreateTemp()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  *(_DWORD *)v0 = 0;
  *(_WORD *)(v0 + 4) = 0;
  *(_BYTE *)(v0 + 6) = 32;
  *(_DWORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 20) = -1;
  *(_QWORD *)(v0 + 24) = "(None)";
  result = 0.0;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_QWORD *)(v0 + 96) = 0;
  return result;
}

uint64_t SLTokenCreateFromBuffer(_QWORD *a1)
{
  _QWORD *i;
  SLToken *v2;
  uint64_t v3;
  _QWORD *v5;
  SLToken *v6;
  SLToken *v7;
  char v8;
  int v9;
  uint64_t (**v10)(_QWORD);
  const __CFString *Text;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(_QWORD);
  const void *v20;
  size_t v21;
  uint64_t (*v22)(_QWORD);
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  char **v26;
  unint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  char *v41;
  unint64_t v42;
  uint64_t (*v43)(_QWORD);
  uint64_t v44;
  const void *v45;
  size_t v46;
  uint64_t (*v47)(_QWORD);
  const void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t *v65;
  SLHomograph *v66;
  SLHomograph *v67;
  char *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  const void *v75;
  size_t v76;
  uint64_t v77;
  const void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  SLHomograph *v94;
  SLHomograph *v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  __CFString *theString;
  uint64_t v100;
  _QWORD *v101;
  char **v102;
  UniChar chars;
  char *v104;
  uint64_t *v105;
  char *v106;

  i = a1;
  if (!SLLexerBuffer::operator[](a1, 0))
    return 0;
  if (*(_BYTE *)SLLexerBuffer::operator[](i, 0) == 36 || *(_BYTE *)SLLexerBuffer::operator[](i, 0) == 34)
  {
    v2 = (SLToken *)SLLexerBuffer::operator[](i, 0);
    *(int64x2_t *)(i + 7) = vaddq_s64(*(int64x2_t *)(i + 7), (int64x2_t)xmmword_21701CDA0);
    std::deque<SLToken *>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)(i + 3), 1);
    if (v2)
    {
      SLToken::~SLToken(v2);
      MEMORY[0x219A0649C]();
    }
    return 0;
  }
  if (!SLLexerBuffer::operator[](i, 1uLL))
  {
    v3 = (uint64_t)SLLexerBuffer::operator[](i, 0);
    *(int64x2_t *)(i + 7) = vaddq_s64(*(int64x2_t *)(i + 7), (int64x2_t)xmmword_21701CDA0);
    std::deque<SLToken *>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)(i + 3), 1);
    v104 = 0;
    v105 = 0;
    v106 = 0;
    v68 = *(char **)(v3 + 80);
    v69 = *(uint64_t **)(v3 + 88);
    if (v69 == (uint64_t *)v68)
    {
      v92 = 0;
      v71 = 0;
      v91 = 0;
      v68 = *(char **)(v3 + 88);
    }
    else
    {
      v70 = v3;
      v71 = 0;
      v72 = 0;
      do
      {
        if (v72)
        {
          v73 = 0;
          v74 = *(_QWORD *)&v68[8 * v72];
          v75 = *(const void **)(v74 + 32);
          v76 = *(_QWORD *)(v74 + 40) - (_QWORD)v75;
          while (1)
          {
            v77 = *(_QWORD *)&v68[8 * v73];
            v78 = *(const void **)(v77 + 32);
            if (*(_QWORD *)(v77 + 40) - (_QWORD)v78 == v76 && !memcmp(v78, v75, v76))
              break;
            if (v72 == ++v73)
              goto LABEL_102;
          }
        }
        else
        {
LABEL_102:
          v79 = operator new();
          v80 = v79;
          *(_DWORD *)v79 = 0;
          *(_WORD *)(v79 + 4) = 0;
          *(_OWORD *)(v79 + 24) = 0u;
          *(_OWORD *)(v79 + 40) = 0u;
          *(_OWORD *)(v79 + 56) = 0u;
          *(_QWORD *)(v79 + 72) = 0;
          v81 = *(_QWORD *)(*(_QWORD *)(v70 + 80) + 8 * v72);
          if (v79 != v81)
            std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)(v79 + 32), *(char **)(v81 + 32), *(char **)(v81 + 40), *(_QWORD *)(v81 + 40) - *(_QWORD *)(v81 + 32));
          v82 = v105;
          if (v105 >= (uint64_t *)v106)
          {
            v83 = ((char *)v105 - v104) >> 3;
            if ((unint64_t)(v83 + 1) >> 61)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v84 = (v106 - v104) >> 2;
            if (v84 <= v83 + 1)
              v84 = v83 + 1;
            if ((unint64_t)(v106 - v104) >= 0x7FFFFFFFFFFFFFF8)
              v85 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v85 = v84;
            if (v85)
              v86 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SLHomograph *>>((uint64_t)&v106, v85);
            else
              v86 = 0;
            v87 = (uint64_t *)&v86[8 * v83];
            *v87 = v80;
            v71 = v87 + 1;
            v89 = v104;
            v88 = (char *)v105;
            if (v105 != (uint64_t *)v104)
            {
              do
              {
                v90 = *((_QWORD *)v88 - 1);
                v88 -= 8;
                *--v87 = v90;
              }
              while (v88 != v89);
              v88 = v104;
            }
            v104 = (char *)v87;
            v105 = v71;
            v106 = &v86[8 * v85];
            if (v88)
              operator delete(v88);
          }
          else
          {
            *v105 = v80;
            v71 = v82 + 1;
          }
          v105 = v71;
          v68 = *(char **)(v70 + 80);
          v69 = *(uint64_t **)(v70 + 88);
        }
        ++v72;
      }
      while (v72 < ((char *)v69 - v68) >> 3);
      v91 = v104;
      v92 = v106;
      v3 = v70;
    }
    *(_QWORD *)(v3 + 80) = v91;
    *(_QWORD *)(v3 + 88) = v71;
    v104 = v68;
    v105 = v69;
    v93 = *(char **)(v3 + 96);
    *(_QWORD *)(v3 + 96) = v92;
    v106 = v93;
    if (v69 == (uint64_t *)v68)
    {
      v68 = (char *)v69;
      if (!v69)
        return v3;
    }
    else
    {
      do
      {
        v95 = (SLHomograph *)*--v69;
        v94 = v95;
        v105 = v69;
        if (v95)
        {
          SLHomograph::~SLHomograph(v94);
          MEMORY[0x219A0649C]();
          v68 = v104;
          v69 = v105;
        }
      }
      while (v69 != (uint64_t *)v68);
      if (!v68)
        return v3;
    }
    v105 = (uint64_t *)v68;
    operator delete(v68);
    return v3;
  }
  v3 = operator new();
  *(_DWORD *)v3 = 0;
  *(_WORD *)(v3 + 4) = 0;
  *(_BYTE *)(v3 + 6) = 32;
  *(_DWORD *)(v3 + 16) = 64;
  *(_BYTE *)(v3 + 20) = -1;
  *(_QWORD *)(v3 + 24) = "(None)";
  *(_OWORD *)(v3 + 32) = 0u;
  v5 = (_QWORD *)(v3 + 32);
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_QWORD *)(v3 + 96) = 0;
  theString = CFStringCreateMutable(0, 0);
  *(_QWORD *)(v3 + 48) = theString;
  chars = 32;
  v6 = (SLToken *)SLLexerBuffer::operator[](i, 0);
  if (!v6)
    return v3;
  v7 = v6;
  v98 = (uint64_t)(i + 3);
  v102 = (char **)(v3 + 80);
  v100 = v3 + 96;
  v8 = 1;
  v101 = (_QWORD *)v3;
  v96 = (_QWORD *)(v3 + 32);
  v97 = i;
  while (1)
  {
    *(int64x2_t *)(i + 7) = vaddq_s64(*(int64x2_t *)(i + 7), (int64x2_t)xmmword_21701CDA0);
    std::deque<SLToken *>::__maybe_remove_front_spare[abi:ne180100](v98, 1);
    v9 = *(unsigned __int8 *)v7;
    if (v9 == 35)
    {
      SLToken::~SLToken(v7);
      MEMORY[0x219A0649C]();
      v7 = (SLToken *)SLTokenCreateFromBuffer(i);
      if ((v8 & 1) != 0)
        goto LABEL_15;
      goto LABEL_17;
    }
    if (v9 == 34)
      break;
    if (v9 == 36)
      goto LABEL_133;
    if ((v8 & 1) != 0)
    {
LABEL_15:
      v10 = (uint64_t (**)(_QWORD))*((_QWORD *)v7 + 4);
      *v5 = v10;
      goto LABEL_18;
    }
LABEL_17:
    v10 = (uint64_t (**)(_QWORD))*v5;
LABEL_18:
    *(_QWORD *)(v3 + 40) = *((_QWORD *)v7 + 5) + *((_QWORD *)v7 + 4) - (_QWORD)v10;
    *(_DWORD *)(v3 + 16) = *((_DWORD *)v7 + 4) & 1 | 0x40;
    if ((v8 & 1) == 0)
      CFStringAppendCharacters(theString, &chars, 1);
    Text = SLTokenGetText(v7);
    CFStringAppend(theString, Text);
    v12 = *(char **)(v3 + 80);
    v13 = *(char **)(v3 + 88);
    v14 = (char *)*((_QWORD *)v7 + 10);
    v15 = (char *)*((_QWORD *)v7 + 11);
    if (v13 == v12)
    {
      if (v15 != v14)
      {
        v17 = 0;
        do
        {
          if (v17)
          {
            v18 = 0;
            v19 = *(uint64_t (**)(_QWORD))&v14[8 * v17];
            v20 = (const void *)*((_QWORD *)v19 + 4);
            v21 = *((_QWORD *)v19 + 5) - (_QWORD)v20;
            while (1)
            {
              v22 = *(uint64_t (**)(_QWORD))&v14[8 * v18];
              v23 = (const void *)*((_QWORD *)v22 + 4);
              if (*((_QWORD *)v22 + 5) - (_QWORD)v23 == v21 && !memcmp(v23, v20, v21))
                break;
              if (v17 == ++v18)
                goto LABEL_32;
            }
          }
          else
          {
LABEL_32:
            v24 = operator new();
            v25 = v24;
            *(_DWORD *)v24 = 0;
            *(_WORD *)(v24 + 4) = 0;
            *(_OWORD *)(v24 + 24) = 0u;
            *(_OWORD *)(v24 + 40) = 0u;
            *(_OWORD *)(v24 + 56) = 0u;
            *(_QWORD *)(v24 + 72) = 0;
            v26 = *(char ***)(*((_QWORD *)v7 + 10) + 8 * v17);
            if ((char **)v24 != v26)
              std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)(v24 + 32), v26[4], v26[5], v26[5] - v26[4]);
            v28 = *(uint64_t **)(v3 + 88);
            v27 = *(_QWORD *)(v3 + 96);
            if ((unint64_t)v28 >= v27)
            {
              v30 = ((char *)v28 - *v102) >> 3;
              if ((unint64_t)(v30 + 1) >> 61)
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              v31 = v27 - (_QWORD)*v102;
              v32 = v31 >> 2;
              if (v31 >> 2 <= (unint64_t)(v30 + 1))
                v32 = v30 + 1;
              if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
                v33 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v33 = v32;
              if (v33)
                v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SLHomograph *>>(v100, v33);
              else
                v34 = 0;
              v35 = (uint64_t *)&v34[8 * v30];
              *v35 = v25;
              v29 = v35 + 1;
              v37 = *(char **)(v3 + 80);
              v36 = *(char **)(v3 + 88);
              if (v36 != v37)
              {
                do
                {
                  v38 = *((_QWORD *)v36 - 1);
                  v36 -= 8;
                  *--v35 = v38;
                }
                while (v36 != v37);
                v36 = *v102;
              }
              *(_QWORD *)(v3 + 80) = v35;
              *(_QWORD *)(v3 + 88) = v29;
              *(_QWORD *)(v3 + 96) = &v34[8 * v33];
              if (v36)
                operator delete(v36);
            }
            else
            {
              *v28 = v25;
              v29 = v28 + 1;
            }
            *(_QWORD *)(v3 + 88) = v29;
            v14 = (char *)*((_QWORD *)v7 + 10);
            v15 = (char *)*((_QWORD *)v7 + 11);
          }
          ++v17;
        }
        while (v17 < (v15 - v14) >> 3);
      }
    }
    else if (v15 - v14 == 8)
    {
      v16 = 0;
      do
      {
        std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(*(_QWORD *)&v12[8 * v16] + 32, *(char **)(*(_QWORD *)&v12[8 * v16] + 40), *(char **)(**((_QWORD **)v7 + 10) + 32), *(char **)(**((_QWORD **)v7 + 10) + 40), *(_QWORD *)(**((_QWORD **)v7 + 10) + 40) - *(_QWORD *)(**((_QWORD **)v7 + 10) + 32));
        ++v16;
        v12 = *(char **)(v3 + 80);
      }
      while (v16 < (uint64_t)(*(_QWORD *)(v3 + 88) - (_QWORD)v12) >> 3);
    }
    else
    {
      v39 = 0;
      v40 = 0;
      v104 = 0;
      v105 = 0;
      v41 = v15;
      v106 = 0;
      do
      {
        if (v41 == v14)
        {
          v41 = v14;
        }
        else
        {
          v42 = 0;
          do
          {
            v43 = *(uint64_t (**)(_QWORD))&v14[8 * v42];
            if (v42)
            {
              v44 = 0;
              v45 = (const void *)*((_QWORD *)v43 + 4);
              v46 = *((_QWORD *)v43 + 5) - (_QWORD)v45;
              while (1)
              {
                v47 = *(uint64_t (**)(_QWORD))&v14[8 * v44];
                v48 = (const void *)*((_QWORD *)v47 + 4);
                if (*((_QWORD *)v47 + 5) - (_QWORD)v48 == v46 && !memcmp(v48, v45, v46))
                  break;
                if (v42 == ++v44)
                  goto LABEL_61;
              }
            }
            else
            {
LABEL_61:
              v49 = operator new();
              v50 = v49;
              *(_DWORD *)v49 = 0;
              *(_WORD *)(v49 + 4) = 0;
              *(_OWORD *)(v49 + 24) = 0u;
              *(_OWORD *)(v49 + 40) = 0u;
              *(_OWORD *)(v49 + 56) = 0u;
              *(_QWORD *)(v49 + 72) = 0;
              v51 = *(_QWORD *)&(*v102)[8 * v40];
              v52 = v49 + 32;
              if (v49 == v51)
              {
                v53 = 0;
              }
              else
              {
                std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)(v49 + 32), *(char **)(v51 + 32), *(char **)(v51 + 40), *(_QWORD *)(v51 + 40) - *(_QWORD *)(v51 + 32));
                v53 = *(char **)(v50 + 40);
              }
              std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(v52, v53, *((char **)v43 + 4), *((char **)v43 + 5), *((_QWORD *)v43 + 5) - *((_QWORD *)v43 + 4));
              v54 = v105;
              if (v105 >= (uint64_t *)v106)
              {
                v55 = ((char *)v105 - v104) >> 3;
                if ((unint64_t)(v55 + 1) >> 61)
                  std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                v56 = (v106 - v104) >> 2;
                if (v56 <= v55 + 1)
                  v56 = v55 + 1;
                if ((unint64_t)(v106 - v104) >= 0x7FFFFFFFFFFFFFF8)
                  v57 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v57 = v56;
                if (v57)
                  v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SLHomograph *>>((uint64_t)&v106, v57);
                else
                  v58 = 0;
                v59 = (uint64_t *)&v58[8 * v55];
                *v59 = v50;
                v39 = v59 + 1;
                v61 = v104;
                v60 = (char *)v105;
                if (v105 != (uint64_t *)v104)
                {
                  do
                  {
                    v62 = *((_QWORD *)v60 - 1);
                    v60 -= 8;
                    *--v59 = v62;
                  }
                  while (v60 != v61);
                  v60 = v104;
                }
                v104 = (char *)v59;
                v105 = v39;
                v106 = &v58[8 * v57];
                if (v60)
                  operator delete(v60);
              }
              else
              {
                *v105 = v50;
                v39 = v54 + 1;
              }
              v105 = v39;
              v14 = (char *)*((_QWORD *)v7 + 10);
              v15 = (char *)*((_QWORD *)v7 + 11);
            }
            ++v42;
          }
          while (v42 < (v15 - v14) >> 3);
          v12 = (char *)v101[10];
          v13 = (char *)v101[11];
          v41 = v15;
        }
        ++v40;
      }
      while (v40 < (v13 - v12) >> 3);
      v63 = v106;
      v3 = (uint64_t)v101;
      v101[10] = v104;
      v101[11] = v39;
      v104 = v12;
      v105 = (uint64_t *)v13;
      v64 = (char *)v101[12];
      v101[12] = v63;
      v106 = v64;
      v65 = (uint64_t *)v13;
      v5 = v96;
      for (i = v97; v13 != v12; v65 = (uint64_t *)v12)
      {
        v67 = (SLHomograph *)*((_QWORD *)v13 - 1);
        v13 -= 8;
        v66 = v67;
        v105 = (uint64_t *)v13;
        if (v67)
        {
          SLHomograph::~SLHomograph(v66);
          MEMORY[0x219A0649C]();
          v12 = v104;
          v13 = (char *)v105;
        }
      }
      if (v65)
      {
        v105 = v65;
        operator delete(v65);
      }
      if (!v7)
        goto LABEL_93;
    }
    SLToken::~SLToken(v7);
    MEMORY[0x219A0649C]();
LABEL_93:
    v7 = (SLToken *)SLLexerBuffer::operator[](i, 0);
    v8 = 0;
    if (!v7)
      return v3;
  }
  SLToken::~SLToken(v7);
  MEMORY[0x219A0649C]();
  v7 = (SLToken *)SLTokenCreateFromBuffer(i);
  std::vector<SLHomograph *>::__insert_with_size[abi:ne180100]<std::__wrap_iter<SLHomograph **>,std::__wrap_iter<SLHomograph **>>((uint64_t)v102, *(_QWORD *)(v3 + 88), *((char **)v7 + 10), *((char **)v7 + 11), (uint64_t)(*((_QWORD *)v7 + 11) - *((_QWORD *)v7 + 10)) >> 3);
  *((_QWORD *)v7 + 11) = *((_QWORD *)v7 + 10);
LABEL_133:
  SLToken::~SLToken(v7);
  MEMORY[0x219A0649C]();
  return v3;
}

void sub_216FAE2E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

CFStringRef SLTokenGetText(_QWORD *a1)
{
  CFStringRef result;
  const UniChar *v3;
  const UniChar *v4;

  result = (CFStringRef)a1[6];
  if (!result)
  {
    v3 = (const UniChar *)a1[7];
    v4 = (const UniChar *)a1[8];
    if (v3 == v4)
      result = &stru_24D683CF8;
    else
      result = CFStringCreateWithCharactersNoCopy(0, v3, v4 - v3 - 1, (CFAllocatorRef)*MEMORY[0x24BDBD258]);
    a1[6] = result;
  }
  return result;
}

char *SLTokenAddHomographs(uint64_t a1, uint64_t a2)
{
  char *result;

  result = std::vector<SLHomograph *>::__insert_with_size[abi:ne180100]<std::__wrap_iter<SLHomograph **>,std::__wrap_iter<SLHomograph **>>(a1 + 80, *(_QWORD *)(a1 + 88), *(char **)(a2 + 80), *(char **)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 3);
  *(_QWORD *)(a2 + 88) = *(_QWORD *)(a2 + 80);
  return result;
}

SLToken *SLTokenRelease(SLToken *result)
{
  if (result)
  {
    SLToken::~SLToken(result);
    JUMPOUT(0x219A0649CLL);
  }
  return result;
}

uint64_t SLTokenGetClass(unsigned __int8 *a1)
{
  int v2;
  uint64_t result;
  _DWORD **v4;
  unsigned __int8 *v5;

  v2 = *a1;
  result = 32;
  switch(v2)
  {
    case 0:
    case 1:
    case 2:
    case 7:
    case 8:
      return result;
    case 3:
      return 91;
    case 4:
    case 5:
    case 10:
    case 11:
    case 12:
    case 14:
      goto LABEL_4;
    case 6:
      return 47;
    case 9:
      v5 = a1 + 80;
      v4 = (_DWORD **)*((_QWORD *)a1 + 10);
      if (*((_DWORD ***)v5 + 1) != v4 && (**v4 & 0x80000000) != 0)
        goto LABEL_9;
      return result;
    case 13:
LABEL_9:
      result = 46;
      break;
    case 15:
      result = 43;
      break;
    case 16:
      result = 35;
      break;
    default:
      if (v2 != 33)
LABEL_4:
        result = 63;
      break;
  }
  return result;
}

uint64_t SLTokenGetInfo(SLToken *this, int a2, _WORD *a3)
{
  uint64_t result;
  char v5;
  int v6;

  result = 0;
  if (a2 <= 1668577647)
  {
    if (a2 <= 1667330110)
    {
      if (a2 == 1634759278)
      {
        if ((*((_BYTE *)this + 17) & 4) == 0)
        {
          result = 0;
          *a3 = 73;
          return result;
        }
        *a3 = 72;
        return 1;
      }
      if (a2 != 1651863140)
        return result;
      v5 = *((_BYTE *)this + 1);
      goto LABEL_31;
    }
    switch(a2)
    {
      case 1667330111:
        *(_DWORD *)a3 = SLToken::Capitalization(this);
        return 1;
      case 1667657315:
        return (*((unsigned __int8 *)this + 17) >> 3) & 1;
      case 1668313709:
        if (*(_BYTE *)this == 3)
        {
          v6 = *((_DWORD *)this + 3);
LABEL_28:
          *(_DWORD *)a3 = v6;
          return 1;
        }
        return 0;
    }
  }
  else
  {
    if (a2 <= 1802071651)
    {
      if (a2 != 1668577648)
      {
        if (a2 != 1684628340)
        {
          if (a2 != 1701671016)
            return result;
          v5 = *((_BYTE *)this + 2);
          goto LABEL_31;
        }
        *(_QWORD *)a3 = *((_QWORD *)this + 3);
        return 1;
      }
      if (*(_BYTE *)this == 3)
      {
        v6 = *((_DWORD *)this + 2);
        goto LABEL_28;
      }
      return 0;
    }
    switch(a2)
    {
      case 1802071652:
        if ((*(unsigned __int8 *)this | 2) == 0xF)
        {
          v5 = **((_BYTE **)this + 7);
LABEL_31:
          *(_BYTE *)a3 = v5;
          return 1;
        }
        return 0;
      case 1886352161:
        return (*((unsigned __int8 *)this + 18) >> 4) & 1;
      case 2003330418:
        *(_OWORD *)a3 = *((_OWORD *)this + 2);
        return 1;
    }
  }
  return result;
}

uint64_t SLTokenGetTupleGroup(uint64_t a1, _BYTE *a2)
{
  if (a2)
    *a2 = *(_BYTE *)(a1 + 20);
  return *(unsigned __int8 *)(a1 + 6);
}

uint64_t SLTokenCountHomographs(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 3;
}

uint64_t SLTokenGetHomograph(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * a2);
}

uint64_t SLHomographGetPOS(unsigned int *a1)
{
  return *a1;
}

uint64_t SLHomographGetTags(uint64_t a1)
{
  return *(_QWORD *)(a1 + 4);
}

CFDataRef SLHomographGetPhonemes(uint64_t a1)
{
  CFDataRef result;

  result = *(CFDataRef *)(a1 + 24);
  if (!result)
  {
    result = CFDataCreateWithBytesNoCopy(0, *(const UInt8 **)(a1 + 32), *(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32), (CFAllocatorRef)*MEMORY[0x24BDBD258]);
    *(_QWORD *)(a1 + 24) = result;
  }
  return result;
}

void SLTokenList::SLTokenList(SLTokenList *this)
{
  *(_QWORD *)this = this;
  *((_QWORD *)this + 1) = this;
  *((_QWORD *)this + 2) = 0;
  *((_WORD *)this + 12) = 0;
}

{
  *(_QWORD *)this = this;
  *((_QWORD *)this + 1) = this;
  *((_QWORD *)this + 2) = 0;
  *((_WORD *)this + 12) = 0;
}

_QWORD *SLTokenList::push_back(SLTokenList *this, SLToken *a2)
{
  _QWORD *result;
  uint64_t v5;

  if (*((_BYTE *)this + 24))
  {
    *((_BYTE *)a2 + 1) = *((_BYTE *)this + 24);
    *((_BYTE *)this + 24) = 0;
  }
  if (*((_BYTE *)this + 25))
  {
    *((_BYTE *)a2 + 2) = *((_BYTE *)this + 25);
    *((_BYTE *)this + 25) = 0;
  }
  result = operator new(0x18uLL);
  result[1] = this;
  result[2] = a2;
  v5 = *(_QWORD *)this;
  *result = *(_QWORD *)this;
  *(_QWORD *)(v5 + 8) = result;
  *(_QWORD *)this = result;
  ++*((_QWORD *)this + 2);
  return result;
}

CFArrayRef SLHomographCopyTune(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  const void *v3;
  CFNumberRef v4;
  unint64_t v5;
  unint64_t v6;
  const void *v7;
  CFNumberRef v8;
  const void *v9;
  CFNumberRef v10;
  CFDictionaryRef Dictionary;
  CFDictionaryRef v12;
  const void **v13;
  const void **v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  const void **v19;
  const void **v20;
  const void **v21;
  const void *v22;
  const void *v23;
  CFArrayRef v24;
  CFDictionaryRef v25;
  CFDictionaryRef v26;
  const void **v27;
  const void **v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  const void **v33;
  const void **v34;
  const void **v35;
  const void *v36;
  CFArrayRef v37;
  __int128 v39;
  void *__p[2];
  __int128 v41;
  const void **v42;
  const void **v43;
  const void **v44;
  __int128 v45;
  void *v46[2];
  __int128 v47;
  const void **v48;
  const void **v49;
  const void **i;

  v1 = *(_QWORD **)(a1 + 56);
  v2 = *(_QWORD **)(a1 + 64);
  if (v1 == v2)
    return 0;
  v48 = 0;
  v49 = 0;
  for (i = 0; v1 < v2; v1 += 4)
  {
    *(_OWORD *)v46 = 0u;
    v47 = 0u;
    v45 = 0u;
    v3 = (const void *)kCFTuneDurationKey;
    v4 = CFNumberCreate(0, kCFNumberFloat32Type, v1);
    SLCFDictionaryBuilder::push_back((SLCFDictionaryBuilder *)&v45, v3, v4);
    v5 = v1[1];
    v6 = v1[2];
    if (v5 != v6)
    {
      v42 = 0;
      v43 = 0;
      v44 = 0;
      while (v5 < v6)
      {
        *(_OWORD *)__p = 0u;
        v41 = 0u;
        v39 = 0u;
        v7 = (const void *)kCFTunePitchKey;
        v8 = CFNumberCreate(0, kCFNumberFloat32Type, (const void *)v5);
        SLCFDictionaryBuilder::push_back((SLCFDictionaryBuilder *)&v39, v7, v8);
        v9 = (const void *)kCFTuneLocationKey;
        v10 = CFNumberCreate(0, kCFNumberFloat32Type, (const void *)(v5 + 4));
        SLCFDictionaryBuilder::push_back((SLCFDictionaryBuilder *)&v39, v9, v10);
        Dictionary = SLCFDictionaryBuilder::CreateDictionary((const void ***)&v39);
        v12 = Dictionary;
        v13 = v43;
        if (v43 >= v44)
        {
          v15 = v43 - v42;
          if ((unint64_t)(v15 + 1) >> 61)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v16 = ((char *)v44 - (char *)v42) >> 2;
          if (v16 <= v15 + 1)
            v16 = v15 + 1;
          if ((unint64_t)((char *)v44 - (char *)v42) >= 0x7FFFFFFFFFFFFFF8)
            v17 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v17 = v16;
          if (v17)
            v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SLHomograph *>>((uint64_t)&v44, v17);
          else
            v18 = 0;
          v19 = (const void **)&v18[8 * v15];
          *v19 = v12;
          v14 = v19 + 1;
          v21 = v42;
          v20 = v43;
          if (v43 != v42)
          {
            do
            {
              v22 = *--v20;
              *--v19 = v22;
            }
            while (v20 != v21);
            v20 = v42;
          }
          v42 = v19;
          v43 = v14;
          v44 = (const void **)&v18[8 * v17];
          if (v20)
            operator delete(v20);
        }
        else
        {
          *v43 = Dictionary;
          v14 = v13 + 1;
        }
        v43 = v14;
        if (__p[1])
        {
          *(void **)&v41 = __p[1];
          operator delete(__p[1]);
        }
        SLCFArrayBuilder::~SLCFArrayBuilder((SLCFArrayBuilder *)&v39);
        v5 += 8;
      }
      v23 = (const void *)kCFTunePitchTargetsKey;
      v24 = SLCFArrayBuilder::CreateArray(&v42);
      SLCFDictionaryBuilder::push_back((SLCFDictionaryBuilder *)&v45, v23, v24);
      SLCFArrayBuilder::~SLCFArrayBuilder((SLCFArrayBuilder *)&v42);
    }
    v25 = SLCFDictionaryBuilder::CreateDictionary((const void ***)&v45);
    v26 = v25;
    v27 = v49;
    if (v49 >= i)
    {
      v29 = v49 - v48;
      if ((unint64_t)(v29 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v30 = ((char *)i - (char *)v48) >> 2;
      if (v30 <= v29 + 1)
        v30 = v29 + 1;
      if ((unint64_t)((char *)i - (char *)v48) >= 0x7FFFFFFFFFFFFFF8)
        v31 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v31 = v30;
      if (v31)
        v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SLHomograph *>>((uint64_t)&i, v31);
      else
        v32 = 0;
      v33 = (const void **)&v32[8 * v29];
      *v33 = v26;
      v28 = v33 + 1;
      v35 = v48;
      v34 = v49;
      if (v49 != v48)
      {
        do
        {
          v36 = *--v34;
          *--v33 = v36;
        }
        while (v34 != v35);
        v34 = v48;
      }
      v48 = v33;
      v49 = v28;
      i = (const void **)&v32[8 * v31];
      if (v34)
        operator delete(v34);
    }
    else
    {
      *v49 = v25;
      v28 = v27 + 1;
    }
    v49 = v28;
    if (v46[1])
    {
      *(void **)&v47 = v46[1];
      operator delete(v46[1]);
    }
    SLCFArrayBuilder::~SLCFArrayBuilder((SLCFArrayBuilder *)&v45);
  }
  v37 = SLCFArrayBuilder::CreateArray(&v48);
  SLCFArrayBuilder::~SLCFArrayBuilder((SLCFArrayBuilder *)&v48);
  return v37;
}

void sub_216FAEA5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  SLCFArrayBuilder::~SLCFArrayBuilder((SLCFArrayBuilder *)(v1 - 112));
  _Unwind_Resume(a1);
}

void SLCFDictionaryBuilder::~SLCFDictionaryBuilder(SLCFDictionaryBuilder *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  SLCFArrayBuilder::~SLCFArrayBuilder(this);
}

void std::vector<SLHomograph *>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 3);
    if (v9 >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 2 > v9)
      v9 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SLHomograph *>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v10];
    v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    v16 = &v14[8 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

char *std::vector<unsigned short>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned short *>,std::__wrap_iter<unsigned short *>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;
  char *v30;
  __int16 v31;
  void *__p;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 1)
  {
    v13 = *(void **)a1;
    if (a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 1) < 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v14 = (__dst - (uint64_t)v13) >> 1;
    v15 = v10 - (_QWORD)v13;
    if (v15 <= a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 1))
      v16 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 1);
    else
      v16 = v15;
    if (v15 >= 0x7FFFFFFFFFFFFFFELL)
      v17 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v17 = v16;
    v37 = v9;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v9, v17);
    else
      v18 = 0;
    v28 = &v18[2 * v14];
    __p = v18;
    v34 = v28;
    v36 = &v18[2 * v17];
    v29 = 2 * a5;
    v30 = &v28[2 * a5];
    do
    {
      v31 = *(_WORD *)v7;
      v7 += 2;
      *(_WORD *)v28 = v31;
      v28 += 2;
      v29 -= 2;
    }
    while (v29);
    v35 = v30;
    v5 = std::vector<unsigned short>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34)
      v35 += (v34 - v35 + 1) & 0xFFFFFFFFFFFFFFFELL;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 1;
  if (v20 >= a5)
  {
    v21 = &__src[2 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_18:
    v24 = &v5[2 * a5];
    v25 = &v23[-2 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_WORD *)v25;
        v25 += 2;
        *(_WORD *)v26 = v27;
        v26 += 2;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-2 * ((v23 - v24) >> 1)], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[2 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[2 * v20], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_18;
  return v5;
}

void sub_216FAEDAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned short>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  __int16 v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_WORD *)v8 - 1);
      v8 -= 2;
      *((_WORD *)v7 - 1) = v9;
      v7 -= 2;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

char *std::vector<unsigned short>::__assign_with_size[abi:ne180100]<std::__wrap_iter<unsigned short *>,std::__wrap_iter<unsigned short *>>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (uint64_t)(v8 - *(_QWORD *)result) >> 1)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    if (v8 <= a4)
      v10 = a4;
    else
      v10 = v8;
    if (v8 >= 0x7FFFFFFFFFFFFFFELL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<unsigned short>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_17:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_19;
    }
    goto LABEL_20;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 1;
  if (v15 >= a4)
    goto LABEL_17;
  v16 = &__src[2 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, 2 * v15);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_19:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_20:
  *v12 = &v9[v17];
  return result;
}

char *std::vector<unsigned short>::__vallocate[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

void std::vector<SLPhonTune>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<SLPhonTune>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<SLPhonTune>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 32)
  {
    v4 = *(void **)(i - 24);
    if (v4)
    {
      *(_QWORD *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

_QWORD *std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  size_t v11;
  _BYTE *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;

  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v10 = 2 * v8;
    if (2 * v8 <= a4)
      v10 = a4;
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<unsigned char>::__vallocate[abi:ne180100](v7, v11);
    v9 = (char *)v7[1];
    goto LABEL_17;
  }
  v12 = (_BYTE *)result[1];
  v13 = v12 - v9;
  if (v12 - v9 >= a4)
  {
LABEL_17:
    v16 = a3 - __src;
    if (v16)
      result = memmove(v9, __src, v16);
    v15 = &v9[v16];
    goto LABEL_20;
  }
  v14 = &__src[v13];
  if (v12 != v9)
  {
    result = memmove((void *)*result, __src, v13);
    v9 = (char *)v7[1];
  }
  if (a3 != v14)
    result = memmove(v9, v14, a3 - v14);
  v15 = &v9[a3 - v14];
LABEL_20:
  v7[1] = v15;
  return result;
}

char *std::vector<unsigned char>::__vallocate[abi:ne180100](_QWORD *a1, size_t __sz)
{
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

char *std::vector<SLHomograph *>::__insert_with_size[abi:ne180100]<std::__wrap_iter<SLHomograph **>,std::__wrap_iter<SLHomograph **>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void *__p;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    v13 = *(void **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 3);
    if (v14 >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v15 = (__dst - (uint64_t)v13) >> 3;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 2 > v14)
      v14 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v37 = v9;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SLHomograph *>>(v9, v17);
    else
      v18 = 0;
    v28 = &v18[8 * v15];
    __p = v18;
    v34 = v28;
    v36 = &v18[8 * v17];
    v29 = 8 * a5;
    v30 = &v28[8 * a5];
    do
    {
      v31 = *(_QWORD *)v7;
      v7 += 8;
      *(_QWORD *)v28 = v31;
      v28 += 8;
      v29 -= 8;
    }
    while (v29);
    v35 = v30;
    v5 = std::vector<SLHomograph *>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34)
      v35 += (v34 - v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 3;
  if (v20 >= a5)
  {
    v21 = &__src[8 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[8 * a5];
    v25 = &v23[-8 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_QWORD *)v25;
        v25 += 8;
        *(_QWORD *)v26 = v27;
        v26 += 8;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-8 * ((v23 - v24) >> 3)], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[8 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[8 * v20], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_216FAF394(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::vector<SLHomograph *>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_QWORD *)v8 - 1);
      v8 -= 8;
      *((_QWORD *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

char *std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(uint64_t a1, char *__dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  char *v18;
  int64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  int64_t v24;
  char v25;
  char *v26;
  char *v27;
  char *v28;
  char v29;
  char *v30;
  char *v31;
  char *v32;
  char v33;
  char *v34;
  char *v35;

  v5 = __dst;
  if (a5 < 1)
    return v5;
  v6 = a5;
  v7 = __src;
  v10 = *(char **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    v11 = *(char **)a1;
    v12 = (uint64_t)&v10[a5 - *(_QWORD *)a1];
    if (v12 < 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v13 = (char *)(__dst - v11);
    v14 = v9 - (_QWORD)v11;
    if (2 * v14 > v12)
      v12 = 2 * v14;
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
      v15 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v15 = v12;
    if (v15)
      v16 = operator new(v15);
    else
      v16 = 0;
    v26 = &v13[(_QWORD)v16];
    v27 = &v13[(_QWORD)v16 + v6];
    v28 = v26;
    do
    {
      v29 = *v7++;
      *v28++ = v29;
      --v6;
    }
    while (v6);
    v30 = *(char **)a1;
    if (*(char **)a1 == v5)
    {
      v32 = v26;
    }
    else
    {
      v31 = v5;
      v32 = v26;
      do
      {
        v33 = *--v31;
        *--v32 = v33;
      }
      while (v31 != v30);
      v10 = *(char **)(a1 + 8);
    }
    v34 = (char *)v16 + v15;
    if (v10 != v5)
      memmove(v27, v5, v10 - v5);
    v35 = *(char **)a1;
    *(_QWORD *)a1 = v32;
    *(_QWORD *)(a1 + 8) = &v27[v10 - v5];
    *(_QWORD *)(a1 + 16) = v34;
    if (v35)
      operator delete(v35);
    return v26;
  }
  v17 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    v18 = &__src[a5];
    v20 = *(char **)(a1 + 8);
LABEL_17:
    v21 = &v5[v6];
    v22 = &v20[-v6];
    v23 = v20;
    if (&v20[-v6] < v10)
    {
      v24 = &v10[v6] - v20;
      v23 = v20;
      do
      {
        v25 = *v22++;
        *v23++ = v25;
        --v24;
      }
      while (v24);
    }
    *(_QWORD *)(a1 + 8) = v23;
    if (v20 != v21)
      memmove(&v5[v6], v5, v20 - v21);
    if (v18 != v7)
      memmove(v5, v7, v18 - v7);
    return v5;
  }
  v18 = &__src[v17];
  v19 = a4 - &__src[v17];
  if (a4 != &__src[v17])
    memmove(*(void **)(a1 + 8), &__src[v17], a4 - &__src[v17]);
  v20 = &v10[v19];
  *(_QWORD *)(a1 + 8) = &v10[v19];
  if (v17 >= 1)
    goto LABEL_17;
  return v5;
}

uint64_t SLFirstPOSInSet(unsigned int a1)
{
  unsigned __int8 v1;

  v1 = __clz(__rbit32(a1));
  if (!a1)
    return -1;
  return v1;
}

const char *SLTag::Name(SLTag *this)
{
  if (((_DWORD)this - 154) >= 0xFFFFFFA6)
    return SLTag::sName[(int)this - 64];
  else
    return "";
}

BOOL SLWordTagSet::find(SLWordTagSet *this, int a2)
{
  unint64_t v2;
  char *v3;
  unint64_t v4;
  unsigned int v5;
  unint64_t v6;

  v2 = 0;
  v5 = *(unsigned __int16 *)this;
  v3 = (char *)this + 2;
  v4 = v5;
  do
  {
    v6 = v2;
    if (v4 == v2)
      break;
    ++v2;
  }
  while (*(unsigned __int16 *)&v3[2 * v6] != a2);
  return v6 < v4;
}

unsigned __int16 *SLWordTagSet::erase(unsigned __int16 *this, int a2)
{
  unsigned __int16 v2;
  unint64_t v3;
  unsigned __int16 *v4;

  v2 = *this;
  if (*this)
  {
    v3 = 0;
    do
    {
      v4 = &this[v3];
      if (v4[1] == a2)
      {
        *this = v2 - 1;
        v4[1] = this[v2--];
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return this;
}

_WORD *operator+=(_WORD *result, _WORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  unint64_t v8;

  v2 = (unsigned __int16)*a2;
  if (*a2)
  {
    v3 = (unsigned __int16)*result;
    do
    {
      v4 = 0;
      v5 = (unsigned __int16)a2[v2--];
      while (v3 != v4)
      {
        v6 = v4 + 1;
        v7 = (unsigned __int16)result[++v4];
        if (v7 == v5)
        {
          v8 = v6 - 1;
          goto LABEL_8;
        }
      }
      v8 = v3;
LABEL_8:
      if (v3 <= 6 && v8 >= v3)
      {
        *result = ++v3;
        result[v3] = v5;
      }
    }
    while (v2);
  }
  return result;
}

void SLElementNames::~SLElementNames(SLElementNames *this)
{
  JUMPOUT(0x219A0649CLL);
}

_QWORD *SLElementNames::Create(SLElementNames *this, const __CFLocale *a2)
{
  const __CFString *Value;

  Value = (const __CFString *)CFLocaleGetValue(this, (CFLocaleKey)*MEMORY[0x24BDBD418]);
  if (CFStringCompare(Value, CFSTR("en"), 0))
    SLElementNames::Create();
  return SLCreateElementNamesEng();
}

const char *SLElementNames::PhonName(SLElementNames *this, int a2)
{
  const char *v2;

  v2 = "Stress1";
  if (!a2)
    v2 = "SIL";
  if (a2 == 255)
    return "None";
  else
    return v2;
}

const char *SLElementNames::PhonText(SLElementNames *this, int a2)
{
  const char *v2;

  v2 = "1";
  if (!a2)
    v2 = "%";
  if (a2 == 255)
    return "???";
  else
    return v2;
}

const char *SLElementNames::POSName(SLElementNames *this, int a2)
{
  if (a2)
    return "Undef";
  else
    return "Noun";
}

const char *SLElementNames::TagName(SLElementNames *this, int a2)
{
  if ((a2 - 154) >= 0xFFFFFFA6)
    return SLTag::sName[a2 - 64];
  else
    return "";
}

char *SLElementNames::BndName(SLElementNames *this, int a2)
{
  return SLBnd::sName[a2];
}

uint64_t SLElementNames::EmphName(SLElementNames *this, unsigned int a2)
{
  return *((_QWORD *)&SLEmph::sName + a2);
}

void SLCFStringTextSource::SLCFStringTextSource(SLCFStringTextSource *this, const __CFString *a2)
{
  *(_QWORD *)this = &off_24D671C40;
  *((_BYTE *)this + 8) = 1;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = CFStringCreateCopy(0, a2);
  *((_WORD *)this + 144) = 0;
}

{
  *(_QWORD *)this = &off_24D671C40;
  *((_BYTE *)this + 8) = 1;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = CFStringCreateCopy(0, a2);
  *((_WORD *)this + 144) = 0;
}

uint64_t SLCFStringTextSource::CreateMoreText(SLCFStringTextSource *this)
{
  return 0;
}

void SLCFStringTextSource::~SLCFStringTextSource(SLCFStringTextSource *this)
{
  const void *v1;

  *(_QWORD *)this = &off_24D671C40;
  v1 = (const void *)*((_QWORD *)this + 3);
  if (v1)
    CFRelease(v1);
}

{
  SLCFStringTextSource::~SLCFStringTextSource(this);
  JUMPOUT(0x219A0649CLL);
}

uint64_t SLCFStringTextSource::Refill(SLCFStringTextSource *this, char **a2, unsigned __int16 **a3, const unsigned __int16 *a4)
{
  char *v8;
  int64_t v9;
  uint64_t v10;
  unsigned __int16 *v11;
  unsigned __int16 *v12;
  const __CFString *v13;
  _BOOL4 v14;
  CFIndex Length;
  CFRange v16;
  CFIndex v17;
  unsigned __int16 *v18;
  unsigned __int16 *i;
  int v20;
  unsigned __int16 *v21;
  char *v23;

  v8 = *a2;
  if (v8)
  {
    v9 = (char *)*a3 - v8;
    if (v9 <= -2)
      SLCFStringTextSource::Refill();
    v10 = v9 >> 1;
    v23 = v8;
    memmove((char *)this + 32, v8, v9);
  }
  else
  {
    v23 = (char *)this + 32;
    if (*((_BYTE *)this + 8))
    {
      *((_WORD *)this + 16) = 10;
      *((_BYTE *)this + 8) = 0;
      v10 = 1;
    }
    else
    {
      v10 = 0;
    }
  }
  v11 = (unsigned __int16 *)((char *)this + 32);
  v12 = (unsigned __int16 *)((char *)this + 2 * v10 + 32);
  *a2 = (char *)this + 32;
  *a3 = v12;
  v13 = (const __CFString *)*((_QWORD *)this + 3);
  if (!v13)
  {
    *((_BYTE *)this + 8) = 0;
    v13 = (const __CFString *)(*(uint64_t (**)(SLCFStringTextSource *))(*(_QWORD *)this + 24))(this);
    *((_QWORD *)this + 3) = v13;
  }
  v14 = v10 < 128;
  if (v13 && v10 <= 127)
  {
    do
    {
      Length = CFStringGetLength(v13);
      v16.location = *((_QWORD *)this + 2);
      if (Length - v16.location >= 128 - v10)
        v17 = 128 - v10;
      else
        v17 = Length - v16.location;
      if (v17)
      {
        v16.length = v17;
        CFStringGetCharacters(*((CFStringRef *)this + 3), v16, &v11[v10]);
        v10 += v17;
        v18 = &v11[v10];
        *a3 = v18;
        *((_QWORD *)this + 2) += v17;
      }
      else
      {
        v18 = *a3;
      }
      v13 = (const __CFString *)*((_QWORD *)this + 3);
      if (v18 < (unsigned __int16 *)this + 144)
      {
        CFRelease(v13);
        *((_BYTE *)this + 8) = 0;
        v13 = (const __CFString *)(*(uint64_t (**)(SLCFStringTextSource *))(*(_QWORD *)this + 24))(this);
        *((_QWORD *)this + 2) = 0;
        *((_QWORD *)this + 3) = v13;
      }
      v14 = v10 < 128;
    }
    while (v13 && v10 < 128);
  }
  for (i = *a3; v11 < i; ++v11)
  {
    v20 = *v11;
    if ((v20 | 0x10) == 0x10)
    {
      if (v11 >= v12)
      {
        *v11 = 32;
      }
      else if (v11 == i - 1 && !*v11)
      {
        *a3 = v11;
        i = v11;
      }
      continue;
    }
    if (v20 == *a4)
    {
      if (!a4[1])
      {
        v21 = v11;
        goto LABEL_35;
      }
      v21 = v11 + 1;
      if (v11 + 1 == (unsigned __int16 *)((char *)this + 288))
      {
        *a3 = --i;
        --*((_QWORD *)this + 2);
        break;
      }
      if (v21 == i)
        break;
      if (*v21 == a4[1])
      {
        *v11++ = 32;
LABEL_35:
        *v21 = 16;
        a4 = (const unsigned __int16 *)&SLLexerInstance::sNoDelim;
      }
    }
  }
  if (*((_QWORD *)this + 3))
    v14 = 0;
  if (v14)
  {
    *i = 0;
    *a3 = i + 1;
  }
  return (v23 - *a2) >> 1;
}

void SLTokenTextSource::SLTokenTextSource(SLTokenTextSource *this, SLToken *a2)
{
  *(_QWORD *)this = &off_24D671C70;
  *((_QWORD *)this + 1) = a2;
}

{
  *(_QWORD *)this = &off_24D671C70;
  *((_QWORD *)this + 1) = a2;
}

uint64_t SLTokenTextSource::Refill(SLTokenTextSource *this, unsigned __int16 **a2, unsigned __int16 **a3, const unsigned __int16 *a4)
{
  unsigned __int16 *v4;

  v4 = *(unsigned __int16 **)(*((_QWORD *)this + 1) + 56);
  *a2 = v4;
  *a3 = (unsigned __int16 *)((char *)v4
                           + *(_QWORD *)(*((_QWORD *)this + 1) + 64)
                           - *(_QWORD *)(*((_QWORD *)this + 1) + 56));
  return 0;
}

void SLLexerInstance::SLLexerInstance(SLLexerInstance *this, SLTextSource *a2, int a3)
{
  *(_QWORD *)this = &unk_24D671C98;
  *((_QWORD *)this + 1) = a2;
  *((_DWORD *)this + 4) = a3;
  *((_QWORD *)this + 3) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = &SLLexerInstance::sNoDelim;
  *((_WORD *)this + 44) = 256;
}

uint64_t SLLexerInstance::Refill(SLLexerInstance *this)
{
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (uint64_t *)((char *)this + 64);
  result = (***((uint64_t (****)(_QWORD, char *, char *, _QWORD))this + 1))(*((_QWORD *)this + 1), (char *)this + 64, (char *)this + 40, *((_QWORD *)this + 9));
  v4 = *((_QWORD *)this + 3);
  if (v4)
  {
    v5 = v4 - 2 * result;
    v6 = *((_QWORD *)this + 7) - 2 * result;
    *((_QWORD *)this + 6) -= 2 * result;
    *((_QWORD *)this + 7) = v6;
    *((_DWORD *)this + 4) += result;
    v7 = *((_QWORD *)this + 8);
  }
  else
  {
    v7 = *v2;
    v5 = *v2;
  }
  *((_QWORD *)this + 3) = v5;
  *((_QWORD *)this + 4) = v7;
  return result;
}

uint64_t SLLexerInstance::CreateToken(SLLexerInstance *this, char a2, int a3)
{
  char *v3;

  v3 = (char *)*((_QWORD *)this + 8);
  if ((*((_DWORD *)this + 4) & 0x80000000) != 0 && v3 == *((char **)this + 4))
  {
    v3 += 2;
    *((_QWORD *)this + 8) = v3;
  }
  return SLLexerInstance::CreateToken<unsigned short>((uint64_t)this, a2, a3, v3, *((_QWORD *)this + 3));
}

uint64_t SLLexerInstance::CreateToken(SLLexerInstance *this, char a2, int a3, char *__s)
{
  char *v8;

  v8 = &__s[strlen(__s)];
  return SLLexerInstance::CreateToken<char>((uint64_t)this, a2, a3, __s, v8);
}

uint64_t SLLexerInstance::CreateToken<char>(uint64_t a1, char a2, int a3, char *a4, char *a5)
{
  int v7;
  _WORD *v10;
  unsigned int v11;
  BOOL v13;
  __int16 v14;
  uint64_t v15;
  void **v16;
  unint64_t v17;
  char *v18;
  _WORD *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v7 = a3;
  *(_BYTE *)(a1 + 89) = 0;
  v10 = *(_WORD **)(a1 + 24);
  v11 = (unsigned __int16)(SLChar::sLexFold[*v10 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v10 >> 6] << 6)]
                         + *v10);
  v13 = v11 <= 0x20
     && ((1 << (LOBYTE(SLChar::sLexFold[*v10 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v10 >> 6] << 6)])
                + *(_BYTE *)v10)) & 0x100002601) != 0
     || v11 == 8239;
  if (v13 || v11 == 160)
  {
    v7 = a3 | 1;
    *(_BYTE *)(a1 + 89) = 1;
    v14 = 32;
  }
  else
  {
    v14 = *(v10 - 1);
  }
  *(_WORD *)(a1 + 90) = v14;
  v15 = operator new();
  SLToken::SLToken((SLToken *)v15, a2, v7);
  v16 = (void **)(v15 + 56);
  std::vector<unsigned short>::__assign_with_size[abi:ne180100]<char const*,char const*>((_QWORD *)(v15 + 56), a4, a5, a5 - a4);
  v17 = *(_QWORD *)(v15 + 72);
  v18 = *(char **)(v15 + 64);
  if ((unint64_t)v18 >= v17)
  {
    v20 = (char *)*v16;
    v21 = v18 - (_BYTE *)*v16;
    if (v21 <= -3)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v22 = v21 >> 1;
    v23 = v17 - (_QWORD)v20;
    if (v23 <= (v21 >> 1) + 1)
      v24 = v22 + 1;
    else
      v24 = v23;
    if (v23 >= 0x7FFFFFFFFFFFFFFELL)
      v25 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v25 = v24;
    if (v25)
    {
      v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v15 + 72, v25);
      v20 = *(char **)(v15 + 56);
      v18 = *(char **)(v15 + 64);
    }
    else
    {
      v26 = 0;
    }
    v27 = &v26[2 * v22];
    v28 = &v26[2 * v25];
    *(_WORD *)v27 = 0;
    v19 = v27 + 2;
    while (v18 != v20)
    {
      v29 = *((_WORD *)v18 - 1);
      v18 -= 2;
      *((_WORD *)v27 - 1) = v29;
      v27 -= 2;
    }
    *(_QWORD *)(v15 + 56) = v27;
    *(_QWORD *)(v15 + 64) = v19;
    *(_QWORD *)(v15 + 72) = v28;
    if (v20)
      operator delete(v20);
  }
  else
  {
    *(_WORD *)v18 = 0;
    v19 = v18 + 2;
  }
  *(_QWORD *)(v15 + 64) = v19;
  v30 = *(_QWORD *)(a1 + 64);
  v31 = (v30 + 2 * *(int *)(a1 + 16) - *(_QWORD *)(a1 + 32)) >> 1;
  v32 = (*(_QWORD *)(a1 + 24) - v30) >> 1;
  *(_QWORD *)(v15 + 32) = v31;
  *(_QWORD *)(v15 + 40) = v32;
  *(_BYTE *)(v15 + 2) = *(_BYTE *)(a1 + 88);
  *(_BYTE *)(a1 + 88) = 0;
  return v15;
}

void sub_216FAFF6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A0649C](v1, 0x10F0C4034644DEDLL);
  _Unwind_Resume(a1);
}

uint64_t SLLexerInstance::CreateToken(SLLexerInstance *this, char a2, int a3, __int16 a4)
{
  __int16 v5;
  uint64_t vars0;

  v5 = a4;
  return SLLexerInstance::CreateToken<unsigned short>((uint64_t)this, a2, a3, (char *)&v5, (uint64_t)&vars0);
}

uint64_t SLLexerInstance::CreateToken<unsigned short>(uint64_t a1, char a2, int a3, char *a4, uint64_t a5)
{
  int v7;
  _WORD *v10;
  unsigned int v11;
  BOOL v13;
  __int16 v14;
  uint64_t v15;
  void **v16;
  unint64_t v17;
  char *v18;
  _WORD *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v7 = a3;
  *(_BYTE *)(a1 + 89) = 0;
  v10 = *(_WORD **)(a1 + 24);
  v11 = (unsigned __int16)(SLChar::sLexFold[*v10 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v10 >> 6] << 6)]
                         + *v10);
  v13 = v11 <= 0x20
     && ((1 << (LOBYTE(SLChar::sLexFold[*v10 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v10 >> 6] << 6)])
                + *(_BYTE *)v10)) & 0x100002601) != 0
     || v11 == 8239;
  if (v13 || v11 == 160)
  {
    v7 = a3 | 1;
    *(_BYTE *)(a1 + 89) = 1;
    v14 = 32;
  }
  else
  {
    v14 = *(v10 - 1);
  }
  *(_WORD *)(a1 + 90) = v14;
  v15 = operator new();
  SLToken::SLToken((SLToken *)v15, a2, v7);
  v16 = (void **)(v15 + 56);
  std::vector<unsigned short>::__assign_with_size[abi:ne180100]<unsigned short const*,unsigned short const*>((char *)(v15 + 56), a4, a5, (a5 - (uint64_t)a4) >> 1);
  v17 = *(_QWORD *)(v15 + 72);
  v18 = *(char **)(v15 + 64);
  if ((unint64_t)v18 >= v17)
  {
    v20 = (char *)*v16;
    v21 = v18 - (_BYTE *)*v16;
    if (v21 <= -3)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v22 = v21 >> 1;
    v23 = v17 - (_QWORD)v20;
    if (v23 <= (v21 >> 1) + 1)
      v24 = v22 + 1;
    else
      v24 = v23;
    if (v23 >= 0x7FFFFFFFFFFFFFFELL)
      v25 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v25 = v24;
    if (v25)
    {
      v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v15 + 72, v25);
      v20 = *(char **)(v15 + 56);
      v18 = *(char **)(v15 + 64);
    }
    else
    {
      v26 = 0;
    }
    v27 = &v26[2 * v22];
    v28 = &v26[2 * v25];
    *(_WORD *)v27 = 0;
    v19 = v27 + 2;
    while (v18 != v20)
    {
      v29 = *((_WORD *)v18 - 1);
      v18 -= 2;
      *((_WORD *)v27 - 1) = v29;
      v27 -= 2;
    }
    *(_QWORD *)(v15 + 56) = v27;
    *(_QWORD *)(v15 + 64) = v19;
    *(_QWORD *)(v15 + 72) = v28;
    if (v20)
      operator delete(v20);
  }
  else
  {
    *(_WORD *)v18 = 0;
    v19 = v18 + 2;
  }
  *(_QWORD *)(v15 + 64) = v19;
  v30 = *(_QWORD *)(a1 + 64);
  v31 = (v30 + 2 * *(int *)(a1 + 16) - *(_QWORD *)(a1 + 32)) >> 1;
  v32 = (*(_QWORD *)(a1 + 24) - v30) >> 1;
  *(_QWORD *)(v15 + 32) = v31;
  *(_QWORD *)(v15 + 40) = v32;
  *(_BYTE *)(v15 + 2) = *(_BYTE *)(a1 + 88);
  *(_BYTE *)(a1 + 88) = 0;
  return v15;
}

void sub_216FB01A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A0649C](v1, 0x10F0C4034644DEDLL);
  _Unwind_Resume(a1);
}

uint64_t SLLexerInstance::CreateCommandToken(SLLexerInstance *this, int a2, int a3)
{
  uint64_t result;

  result = SLLexerInstance::CreateToken(this, 3, 0);
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  return result;
}

uint64_t SLLexerImpl::CreateBehaviorToken(SLLexerImpl *this)
{
  uint64_t result;

  result = SLLexerInstance::CreateToken(this, 25, 0);
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_DWORD *)(result + 12) = *((_DWORD *)this + 23);
  return result;
}

double SLLexerImpl::SLLexerImpl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_DWORD *)(a1 + 16) = -1;
  *(_QWORD *)(a1 + 24) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = &SLLexerInstance::sNoDelim;
  *(_WORD *)(a1 + 88) = 256;
  *(_QWORD *)a1 = off_24D671CE8;
  *(_QWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 92) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = a3;
  return result;
}

void SLLexerImpl::~SLLexerImpl(SLLexerImpl *this)
{
  const void *v2;
  uint64_t v3;

  *(_QWORD *)this = off_24D671CE8;
  v2 = (const void *)*((_QWORD *)this + 14);
  if (v2)
    _Block_release(v2);
  v3 = *((_QWORD *)this + 16);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

{
  SLLexerImpl::~SLLexerImpl(this);
  JUMPOUT(0x219A0649CLL);
}

uint64_t SLLexerImpl::SetDelim(SLLexerImpl *this, const unsigned __int16 *a2)
{
  uint64_t result;

  *((_QWORD *)this + 10) = *(_QWORD *)a2;
  result = (uint64_t)this + 80;
  *(_QWORD *)(result - 8) = result;
  return result;
}

void *SLLexerImpl::SetErrorHandler(uint64_t a1, void *aBlock)
{
  const void *v4;
  void *result;

  v4 = *(const void **)(a1 + 112);
  if (v4)
    _Block_release(v4);
  result = _Block_copy(aBlock);
  *(_QWORD *)(a1 + 112) = result;
  return result;
}

uint64_t SLLexerImpl::Error(SLLexerImpl *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 14);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, ((*((_QWORD *)this + 3) + 2 * *((int *)this + 4) - *((_QWORD *)this + 4)) >> 1) - 1);
  return result;
}

unsigned __int16 *SLLexerImpl::SpaceDelimitedToken(SLLexerImpl *this, unsigned __int16 *a2, unsigned __int16 *a3, unsigned int *a4)
{
  unsigned __int16 *result;
  unsigned int v5;
  unsigned int v6;
  unsigned __int16 *v7;
  unsigned int v8;

  result = a2;
  for (*a4 = 0; result < a3; ++result)
  {
    v5 = *result;
    if (v5 > 0x9F)
    {
      if (v5 != 8239 && v5 != 160)
        break;
    }
    else if (v5 != 9 && v5 != 32)
    {
      break;
    }
  }
  if (result < a3)
  {
    v6 = 1;
    v7 = result;
    do
    {
      v8 = *v7;
      if (v8 > 0x9F)
      {
        if (v8 == 160 || v8 == 8239)
          return result;
      }
      else if (v8 == 9 || v8 == 32)
      {
        return result;
      }
      ++v7;
      *a4 = v6++;
    }
    while (v7 < a3);
  }
  return result;
}

void SLLexerBuffer::SLLexerBuffer(SLLexerBuffer *this, SLLexer *a2, char a3)
{
  *(_QWORD *)this = &off_24D671D38;
  *((_QWORD *)this + 1) = a2;
  *((_BYTE *)this + 16) = a3;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
}

{
  *(_QWORD *)this = &off_24D671D38;
  *((_QWORD *)this + 1) = a2;
  *((_BYTE *)this + 16) = a3;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
}

void SLLexerBuffer::~SLLexerBuffer(SLLexerBuffer *this)
{
  uint64_t v2;
  uint64_t v3;
  SLToken *v4;

  *(_QWORD *)this = &off_24D671D38;
  if (*((_BYTE *)this + 16))
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
  }
  while (1)
  {
    v3 = *((_QWORD *)this + 8);
    if (!v3)
      break;
    v4 = *(SLToken **)(*(_QWORD *)(*((_QWORD *)this + 4) + ((*((_QWORD *)this + 7) >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * (*((_QWORD *)this + 7) & 0x1FFLL));
    ++*((_QWORD *)this + 7);
    *((_QWORD *)this + 8) = v3 - 1;
    std::deque<SLToken *>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)this + 24, 1);
    if (v4)
    {
      SLToken::~SLToken(v4);
      MEMORY[0x219A0649C]();
    }
  }
  std::deque<SLToken *>::~deque[abi:ne180100]((_QWORD *)this + 3);
}

{
  SLLexerBuffer::~SLLexerBuffer(this);
  JUMPOUT(0x219A0649CLL);
}

_QWORD *SLLexerBuffer::push_front(SLLexerBuffer *this, const SLTokenList *a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  const SLTokenList *v6;
  unint64_t v7;
  const SLTokenList *v8;

  v3 = *((_QWORD *)this + 4);
  v4 = (char *)(v3 + 8 * (*((_QWORD *)this + 7) >> 9));
  if (*((_QWORD *)this + 5) == v3)
    v5 = 0;
  else
    v5 = *(_QWORD *)v4 + 8 * (*((_QWORD *)this + 7) & 0x1FFLL);
  v6 = (const SLTokenList *)*((_QWORD *)a2 + 1);
  if (v6 == a2)
  {
    v7 = 0;
  }
  else
  {
    v7 = 0;
    v8 = (const SLTokenList *)*((_QWORD *)a2 + 1);
    do
    {
      ++v7;
      v8 = (const SLTokenList *)*((_QWORD *)v8 + 1);
    }
    while (v8 != a2);
  }
  return std::deque<SLToken *>::__insert_bidirectional[abi:ne180100]<std::__list_const_iterator<SLToken *,void *>>((uint64_t)this + 24, v4, v5, v6, a2, v7);
}

uint64_t (***SLLexerBuffer::operator[](_QWORD *a1, unint64_t a2))(_QWORD)
{
  uint64_t (***result)(_QWORD);
  uint64_t v5;
  uint64_t v6;

  if (a1[8] > a2)
    return *(uint64_t (****)(_QWORD))(*(_QWORD *)(a1[4] + (((a1[7] + a2) >> 6) & 0x3FFFFFFFFFFFFF8))
                                              + 8 * ((a1[7] + a2) & 0x1FF));
  while (1)
  {
    result = (uint64_t (***)(_QWORD))a1[1];
    if (!result)
      break;
    v6 = 0;
    v6 = (**result)(result);
    if (v6)
    {
      std::deque<SLToken *>::push_back(a1 + 3, &v6);
    }
    else
    {
      if (a1[8] != a2
        || a2
        && !*(_QWORD *)(*(_QWORD *)(a1[4] + (((a2 - 1 + a1[7]) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * ((a2 - 1 + a1[7]) & 0x1FF)))
      {
        return 0;
      }
      v5 = 0;
      std::deque<SLToken *>::push_back(a1 + 3, &v5);
    }
    if (a1[8] > a2)
      return *(uint64_t (****)(_QWORD))(*(_QWORD *)(a1[4] + (((a1[7] + a2) >> 6) & 0x3FFFFFFFFFFFFF8))
                                                + 8 * ((a1[7] + a2) & 0x1FF));
  }
  return result;
}

void std::deque<SLToken *>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<SLToken *>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

SLTuplesImpl *SLLexer::Create(SLLexer *this, SLTextSource *a2, SLDictLookup *a3, SLPronouncer *a4, const __CFLocale *a5)
{
  _QWORD *v10;
  uint64_t v11;
  SLLexer *v12;
  SLLexer *v13;
  SLTuples *v14;
  const __CFLocale *v15;
  SLTuplesImpl *v16;
  _QWORD *v17;

  v10 = SLPhonemeParser::Create(a4, a2);
  v11 = operator new();
  *(_DWORD *)(v11 + 16) = -1;
  *(_QWORD *)(v11 + 24) = 0;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_QWORD *)(v11 + 72) = &SLLexerInstance::sNoDelim;
  *(_WORD *)(v11 + 88) = 256;
  *(_QWORD *)v11 = off_24D671CE8;
  *(_QWORD *)(v11 + 8) = this;
  *(_DWORD *)(v11 + 92) = 0;
  *(_QWORD *)(v11 + 112) = 0;
  *(_BYTE *)(v11 + 120) = 0;
  *(_QWORD *)(v11 + 128) = v10;
  v12 = SLPostLexer::Create((SLPostLexer *)v11, a2, a3, a4, a5);
  v14 = SLStemTracker::Create(a4, a2, (SLDictLookup *)0x1E, v12, v13);
  v16 = SLTuples::Create(v14, a4, v15);
  (*(void (**)(SLLexer *, SLTuplesImpl *))(*(_QWORD *)v12 + 64))(v12, v16);
  if ((a5 & 3) != 0)
  {
    v17 = (_QWORD *)operator new();
    *v17 = off_24D671E60;
    v17[1] = v16;
    v17[2] = v12;
    return (SLTuplesImpl *)v17;
  }
  return v16;
}

void SLTokenTextSource::~SLTokenTextSource(SLTokenTextSource *this)
{
  JUMPOUT(0x219A0649CLL);
}

uint64_t SLLexerImpl::LexerBehavior(SLLexerImpl *this)
{
  return *((unsigned int *)this + 23);
}

uint64_t SLLexerImpl::SetLexerBehavior(uint64_t this, int a2)
{
  *(_DWORD *)(this + 92) = a2;
  return this;
}

uint64_t SLLexerImpl::Delim(SLLexerImpl *this)
{
  return *((_QWORD *)this + 9);
}

uint64_t SLLexerChain::NextToken(SLLexerChain *this)
{
  return (***((uint64_t (****)(_QWORD))this + 2))(*((_QWORD *)this + 2));
}

uint64_t SLLexerChain::LexerBehavior(SLLexerChain *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 8))(*((_QWORD *)this + 2));
}

uint64_t SLLexerChain::SetLexerBehavior(SLLexerChain *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2));
}

uint64_t SLLexerChain::SetDelim(SLLexerChain *this, const unsigned __int16 *a2)
{
  return (*(uint64_t (**)(_QWORD, const unsigned __int16 *))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2), a2);
}

uint64_t SLLexerChain::Delim(SLLexerChain *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2));
}

uint64_t SLLexerChain::SetErrorHandler(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
}

void SLLexerChain::~SLLexerChain(SLLexerChain *this)
{
  uint64_t v1;

  *(_QWORD *)this = off_24D671E60;
  v1 = *((_QWORD *)this + 1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 56))(v1);
}

{
  uint64_t v1;

  *(_QWORD *)this = off_24D671E60;
  v1 = *((_QWORD *)this + 1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 56))(v1);
  JUMPOUT(0x219A0649CLL);
}

char *std::vector<unsigned short>::__assign_with_size[abi:ne180100]<unsigned short const*,unsigned short const*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (uint64_t)(v8 - *(_QWORD *)result) >> 1)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    if (v8 <= a4)
      v10 = a4;
    else
      v10 = v8;
    if (v8 >= 0x7FFFFFFFFFFFFFFELL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<unsigned short>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_17:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_19;
    }
    goto LABEL_20;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 1;
  if (v15 >= a4)
    goto LABEL_17;
  v16 = &__src[2 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_19:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_20:
  *v12 = &v9[v17];
  return result;
}

char *std::vector<unsigned short>::__assign_with_size[abi:ne180100]<char const*,char const*>(_QWORD *a1, char *a2, char *a3, unint64_t a4)
{
  char *v6;
  unint64_t v8;
  char *result;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  __int16 v16;
  char *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  __int16 v21;
  char *v22;
  char *v23;
  __int16 v24;
  uint64_t v25;
  char *v26;
  __int16 v27;

  v6 = a2;
  v8 = a1[2];
  result = (char *)*a1;
  if (a4 <= (uint64_t)(v8 - (_QWORD)result) >> 1)
  {
    v18 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v18;
    v19 = (v18 - result) >> 1;
    if (v19 >= a4)
    {
      if (a2 == a3)
      {
        v25 = (uint64_t)result;
      }
      else
      {
        v25 = (uint64_t)&result[2 * (_QWORD)a3 + -2 * (_QWORD)a2];
        v26 = result;
        do
        {
          v27 = *v6++;
          *(_WORD *)v26 = v27;
          v26 += 2;
        }
        while (v6 != a3);
      }
      v17 = (char *)(v25 - (_QWORD)result);
      v12 = result;
    }
    else
    {
      v20 = &a2[v19];
      if (v12 != result)
      {
        do
        {
          v21 = *v6++;
          *(_WORD *)result = v21;
          result += 2;
          --v19;
        }
        while (v19);
      }
      v22 = v12;
      if (v20 != a3)
      {
        v23 = v12;
        do
        {
          v24 = *v20++;
          *(_WORD *)v23 = v24;
          v23 += 2;
          v22 += 2;
        }
        while (v20 != a3);
      }
      v17 = (char *)(v22 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    if (v8 <= a4)
      v10 = a4;
    else
      v10 = v8;
    if (v8 >= 0x7FFFFFFFFFFFFFFELL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<unsigned short>::__vallocate[abi:ne180100](a1, v11);
    v14 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v14;
    v15 = v14;
    if (v6 != a3)
    {
      v15 = v12;
      do
      {
        v16 = *v6++;
        *(_WORD *)v15 = v16;
        v15 += 2;
      }
      while (v6 != a3);
    }
    v17 = (char *)(v15 - v12);
  }
  *v13 = &v17[(_QWORD)v12];
  return result;
}

uint64_t std::deque<SLToken *>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 512;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<SLToken **>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<SLToken **>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

_QWORD *std::deque<SLToken *>::__insert_bidirectional[abi:ne180100]<std::__list_const_iterator<SLToken *,void *>>(uint64_t a1, char *a2, uint64_t a3, _QWORD *a4, _QWORD *a5, unint64_t a6)
{
  unint64_t v6;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  char **v39;
  char *v40;
  char **v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  char **v45;
  char *v46;
  _QWORD *v47;
  char *v48;
  char **v49;
  char *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  char **v56;
  char *v57;
  char **v58;
  char *v59;
  _QWORD *v60;
  int64x2_t v61;
  char **v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char **v67;
  char *v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  __n128 v74;
  __n128 v75;
  __n128 v76;

  v6 = a6;
  v10 = *(_QWORD *)(a1 + 32);
  v11 = v10 >> 9;
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = (char *)(v12 + 8 * (v10 >> 9));
  if (v13 == v12)
    v15 = 0;
  else
    v15 = *(_QWORD *)v14 + 8 * (*(_QWORD *)(a1 + 32) & 0x1FFLL);
  if (a3 == v15)
    v16 = 0;
  else
    v16 = ((a3 - *(_QWORD *)a2) >> 3) + ((a2 - v14) << 6) - ((v15 - *(_QWORD *)v14) >> 3);
  v17 = *(_QWORD *)(a1 + 40);
  if (v16 < v17 - v16)
  {
    if (a6 > v10)
    {
      std::deque<SLToken *>::__add_front_capacity((void **)a1, a6 - v10);
      v10 = *(_QWORD *)(a1 + 32);
      v12 = *(_QWORD *)(a1 + 8);
      v13 = *(_QWORD *)(a1 + 16);
      v11 = v10 >> 9;
    }
    v18 = (_QWORD *)(v12 + 8 * v11);
    if (v13 == v12)
      v19 = 0;
    else
      v19 = *v18 + 8 * (v10 & 0x1FF);
    v74.n128_u64[0] = v12 + 8 * v11;
    v74.n128_u64[1] = v19;
    v25 = v16 - v6;
    if (v16 >= v6)
    {
      v27 = a4;
      if (!v6)
        goto LABEL_108;
      goto LABEL_93;
    }
    if (v16 >= v6 >> 1)
    {
      v32 = v6 - v16;
      if ((uint64_t)(v6 - v16) < 0)
      {
        v27 = a4;
        do
        {
          v27 = (_QWORD *)*v27;
          --v25;
        }
        while (v25);
      }
      else
      {
        if (!v32)
          goto LABEL_91;
        v33 = v32 + 1;
        v27 = a4;
        do
        {
          v27 = (_QWORD *)v27[1];
          --v33;
        }
        while (v33 > 1);
      }
    }
    else if ((uint64_t)v16 < 1)
    {
      if (v16)
      {
        v34 = 1 - v16;
        v27 = a5;
        do
        {
          v27 = (_QWORD *)v27[1];
          --v34;
        }
        while (v34 > 1);
      }
      else
      {
        v27 = a5;
      }
    }
    else
    {
      v26 = v16;
      v27 = a5;
      do
      {
        v27 = (_QWORD *)*v27;
        --v26;
      }
      while (v26);
    }
    if (v27 != a4)
    {
      v53 = *(_QWORD *)(a1 + 40);
      v54 = v27;
      do
      {
        if (v19 == *v18)
        {
          v55 = *--v18;
          v19 = v55 + 4096;
        }
        v54 = (_QWORD *)*v54;
        *(_QWORD *)(v19 - 8) = v54[2];
        v19 -= 8;
        --v10;
        ++v53;
      }
      while (v54 != a4);
      *(_QWORD *)(a1 + 32) = v10;
      *(_QWORD *)(a1 + 40) = v53;
LABEL_92:
      v6 = v16;
      if (!v16)
        goto LABEL_108;
LABEL_93:
      v56 = (char **)std::__deque_iterator<SLToken *,SLToken **,SLToken *&,SLToken ***,long,512l>::operator+[abi:ne180100]((uint64_t)&v74, v6);
      v58 = v56;
      v59 = v57;
      v60 = (_QWORD *)v74.n128_u64[1];
      if ((char *)v74.n128_u64[1] != v57)
      {
        v61 = *(int64x2_t *)(a1 + 32);
        v62 = v56;
        v63 = v57;
        do
        {
          if (v19 == *v18)
          {
            v64 = *--v18;
            v19 = v64 + 4096;
          }
          if (v63 == *v62)
          {
            v65 = (uint64_t)*--v62;
            v63 = (char *)(v65 + 4096);
          }
          v66 = *((_QWORD *)v63 - 1);
          v63 -= 8;
          *(_QWORD *)(v19 - 8) = v66;
          v19 -= 8;
          v61 = vaddq_s64(v61, (int64x2_t)xmmword_21701CE10);
          v60 = (_QWORD *)v74.n128_u64[1];
        }
        while (v63 != (char *)v74.n128_u64[1]);
        *(int64x2_t *)(a1 + 32) = v61;
      }
      if (v6 >= v16)
      {
        v69 = (_QWORD *)v74.n128_u64[0];
      }
      else
      {
        v67 = (char **)std::__deque_iterator<SLToken *,SLToken **,SLToken *&,SLToken ***,long,512l>::operator+[abi:ne180100]((uint64_t)&v74, v16);
        v75 = v74;
        std::__for_each_segment[abi:ne180100]<std::__deque_iterator<SLToken *,SLToken **,SLToken *&,SLToken ***,long,512l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<SLToken *,SLToken **,SLToken *&,SLToken ***,long,512l>,std::__deque_iterator<SLToken *,SLToken **,SLToken *&,SLToken ***,long,512l>>>(v58, v59, v67, v68, (uint64_t)&v75);
        v60 = (_QWORD *)v75.n128_u64[1];
        v69 = (_QWORD *)v75.n128_u64[0];
        v74 = v75;
      }
      while (v27 != a5)
      {
        *v60++ = v27[2];
        if ((_QWORD *)((char *)v60 - *v69) == (_QWORD *)4096)
        {
          v70 = (_QWORD *)v69[1];
          ++v69;
          v60 = v70;
        }
        v27 = (_QWORD *)v27[1];
      }
      goto LABEL_108;
    }
LABEL_91:
    v27 = a4;
    goto LABEL_92;
  }
  v20 = ((v13 - v12) << 6) - 1;
  if (v13 == v12)
    v20 = 0;
  v21 = v10 + v17;
  v22 = v20 - v21;
  if (a6 > v22)
  {
    std::deque<SLToken *>::__add_back_capacity((_QWORD *)a1, a6 - v22);
    v17 = *(_QWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 8);
    v13 = *(_QWORD *)(a1 + 16);
    v21 = *(_QWORD *)(a1 + 32) + v17;
  }
  v23 = (_QWORD *)(v12 + 8 * (v21 >> 9));
  if (v13 == v12)
    v24 = 0;
  else
    v24 = (_QWORD *)(*v23 + 8 * (v21 & 0x1FF));
  v74.n128_u64[0] = v12 + 8 * (v21 >> 9);
  v74.n128_u64[1] = (unint64_t)v24;
  v28 = v17 - v16;
  v29 = v6 - (v17 - v16);
  if (v6 <= v17 - v16)
  {
    v31 = a5;
    if (!v6)
      goto LABEL_108;
    goto LABEL_68;
  }
  if (v28 >= v6 >> 1)
  {
    if (v29 < 1)
    {
      v36 = v28 - v6 + 1;
      v31 = a5;
      do
      {
        v31 = (_QWORD *)v31[1];
        --v36;
      }
      while (v36 > 1);
    }
    else
    {
      v31 = a5;
      do
      {
        v31 = (_QWORD *)*v31;
        --v29;
      }
      while (v29);
    }
  }
  else if ((v28 & 0x8000000000000000) != 0)
  {
    v35 = v16 - v17;
    v31 = a4;
    do
    {
      v31 = (_QWORD *)*v31;
      --v35;
    }
    while (v35);
  }
  else if (v28)
  {
    v30 = v28 + 1;
    v31 = a4;
    do
    {
      v31 = (_QWORD *)v31[1];
      --v30;
    }
    while (v30 > 1);
  }
  else
  {
    v31 = a4;
  }
  if (v31 == a5)
  {
    v31 = a5;
  }
  else
  {
    v37 = v31;
    do
    {
      *v24++ = v37[2];
      if ((_QWORD *)((char *)v24 - *v23) == (_QWORD *)4096)
      {
        v38 = (_QWORD *)v23[1];
        ++v23;
        v24 = v38;
      }
      v37 = (_QWORD *)v37[1];
      ++v17;
    }
    while (v37 != a5);
    *(_QWORD *)(a1 + 40) = v17;
  }
  v6 = v28;
  if (v28)
  {
LABEL_68:
    v39 = (char **)std::__deque_iterator<SLToken *,SLToken **,SLToken *&,SLToken ***,long,512l>::operator-[abi:ne180100]((uint64_t)&v74, v6);
    v41 = v39;
    v42 = v40;
    v43 = v74.n128_u64[1];
    if ((char *)v74.n128_u64[1] != v40)
    {
      v44 = *(_QWORD *)(a1 + 40);
      v45 = v39;
      v46 = v40;
      do
      {
        *v24++ = *(_QWORD *)v46;
        if ((_QWORD *)((char *)v24 - *v23) == (_QWORD *)4096)
        {
          v47 = (_QWORD *)v23[1];
          ++v23;
          v24 = v47;
        }
        v46 += 8;
        if (v46 - *v45 == 4096)
        {
          v48 = v45[1];
          ++v45;
          v46 = v48;
        }
        ++v44;
        v43 = v74.n128_u64[1];
      }
      while (v46 != (char *)v74.n128_u64[1]);
      *(_QWORD *)(a1 + 40) = v44;
    }
    if (v6 < v28)
    {
      v49 = (char **)std::__deque_iterator<SLToken *,SLToken **,SLToken *&,SLToken ***,long,512l>::operator-[abi:ne180100]((uint64_t)&v74, v28);
      std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<SLToken *,SLToken **,SLToken *&,SLToken ***,long,512l>,std::__deque_iterator<SLToken *,SLToken **,SLToken *&,SLToken ***,long,512l>,0>(v49, v50, v41, v42, v74.n128_u64[0], (char *)v74.n128_u64[1], &v75);
      v43 = v76.n128_u64[1];
      v74 = v76;
    }
    if (v31 != a4)
    {
      v51 = (_QWORD *)v74.n128_u64[0];
      do
      {
        if (v43 == *v51)
        {
          v52 = *--v51;
          v43 = v52 + 4096;
        }
        v31 = (_QWORD *)*v31;
        *(_QWORD *)(v43 - 8) = v31[2];
        v43 -= 8;
      }
      while (v31 != a4);
    }
  }
LABEL_108:
  v71 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(a1 + 16) == v71)
    v72 = 0;
  else
    v72 = *(_QWORD *)(v71 + 8 * (*(_QWORD *)(a1 + 32) >> 9)) + 8 * (*(_QWORD *)(a1 + 32) & 0x1FFLL);
  v75.n128_u64[0] = v71 + 8 * (*(_QWORD *)(a1 + 32) >> 9);
  v75.n128_u64[1] = v72;
  return std::__deque_iterator<SLToken *,SLToken **,SLToken *&,SLToken ***,long,512l>::operator+[abi:ne180100]((uint64_t)&v75, v16);
}

void std::deque<SLToken *>::__add_front_capacity(void **a1, unint64_t a2)
{
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  void **v19;
  _BYTE *v20;
  uint64_t v21;
  unint64_t v22;
  void **v23;
  unint64_t v24;
  char *v25;
  char *i;
  int64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  int64_t v33;
  char *v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void *v43;
  char *v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  int64_t v50;
  char *v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  void *v65;
  void *v66;
  void *__p[2];
  char *v68;
  char *v69;
  _QWORD *v70;

  v3 = a1[1];
  v4 = a1[2];
  v5 = v4 - v3;
  if (v4 == v3)
    v6 = a2 + 1;
  else
    v6 = a2;
  if (v4 == v3)
    v7 = 0;
  else
    v7 = ((v4 - v3) << 6) - 1;
  if ((v6 & 0x1FF) != 0)
    v8 = (v6 >> 9) + 1;
  else
    v8 = v6 >> 9;
  v9 = (uint64_t)a1[4];
  v10 = v7 - ((_QWORD)a1[5] + v9);
  if (v8 >= v10 >> 9)
    v11 = v10 >> 9;
  else
    v11 = v8;
  if (v8 <= v10 >> 9)
  {
    for (a1[4] = (void *)(v9 + (v11 << 9)); v11; --v11)
    {
      v19 = (void **)a1[2];
      __p[0] = *(v19 - 1);
      a1[2] = v19 - 1;
      std::__split_buffer<SLToken **>::push_front((uint64_t)a1, __p);
    }
  }
  else
  {
    v12 = (uint64_t)(a1 + 3);
    v13 = v8 - v11;
    v14 = (_BYTE *)a1[3] - (_BYTE *)*a1;
    if (v8 - v11 <= (v14 >> 3) - (v5 >> 3))
    {
      if (v13)
      {
        if (v3 == *a1)
        {
LABEL_30:
          v22 = v13;
          do
          {
            __p[0] = operator new(0x1000uLL);
            std::__split_buffer<SLToken **>::push_back(a1, __p);
            --v22;
          }
          while (v22);
          v11 += v13;
          v9 = (uint64_t)a1[4];
        }
        else
        {
          while (1)
          {
            __p[0] = operator new(0x1000uLL);
            std::__split_buffer<SLToken **>::push_front((uint64_t)a1, __p);
            v20 = a1[1];
            v21 = (_BYTE *)a1[2] - v20 == 8 ? 511 : 512;
            v9 = (uint64_t)a1[4] + v21;
            a1[4] = (void *)v9;
            if (!--v13)
              break;
            if (v20 == *a1)
              goto LABEL_30;
          }
        }
      }
      for (a1[4] = (void *)(v9 + (v11 << 9)); v11; --v11)
      {
        v23 = (void **)a1[2];
        __p[0] = *(v23 - 1);
        a1[2] = v23 - 1;
        std::__split_buffer<SLToken **>::push_front((uint64_t)a1, __p);
      }
    }
    else
    {
      v15 = v4 == v3;
      v16 = v8 << 9;
      if (v14 >> 2 <= v13 + (v5 >> 3))
        v17 = v13 + (v5 >> 3);
      else
        v17 = v14 >> 2;
      v70 = a1 + 3;
      if (v17)
        v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SLHomograph *>>(v12, v17);
      else
        v18 = 0;
      v24 = v16 - v15;
      __p[0] = v18;
      __p[1] = v18;
      v68 = v18;
      v69 = &v18[8 * v17];
      do
      {
        v66 = operator new(0x1000uLL);
        std::__split_buffer<SLToken **>::push_back(__p, &v66);
        --v13;
      }
      while (v13);
      v25 = (char *)a1[2];
      for (i = v68; v11; --v11)
      {
        if (i == v69)
        {
          v27 = (char *)__p[1] - (char *)__p[0];
          if (__p[1] <= __p[0])
          {
            if (i == __p[0])
              v35 = 1;
            else
              v35 = (i - (char *)__p[0]) >> 2;
            v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SLHomograph *>>((uint64_t)v70, v35);
            v38 = (uint64_t *)__p[1];
            i = &v36[8 * (v35 >> 2)];
            v39 = v68 - (char *)__p[1];
            if (v68 != __p[1])
            {
              i = &v36[8 * (v35 >> 2) + (v39 & 0xFFFFFFFFFFFFFFF8)];
              v40 = 8 * (v39 >> 3);
              v41 = &v36[8 * (v35 >> 2)];
              do
              {
                v42 = *v38++;
                *(_QWORD *)v41 = v42;
                v41 += 8;
                v40 -= 8;
              }
              while (v40);
            }
            v43 = __p[0];
            __p[0] = v36;
            __p[1] = &v36[8 * (v35 >> 2)];
            v68 = i;
            v69 = &v36[8 * v37];
            if (v43)
            {
              operator delete(v43);
              i = v68;
            }
          }
          else
          {
            v28 = v27 >> 3;
            v29 = v27 >> 3 < -1;
            v30 = (v27 >> 3) + 2;
            if (v29)
              v31 = v30;
            else
              v31 = v28 + 1;
            v32 = (char *)__p[1] - 8 * (v31 >> 1);
            v33 = i - (char *)__p[1];
            if (i != __p[1])
            {
              memmove((char *)__p[1] - 8 * (v31 >> 1), __p[1], i - (char *)__p[1]);
              i = (char *)__p[1];
            }
            v34 = &i[-8 * (v31 >> 1)];
            i = &v32[v33];
            __p[1] = v34;
            v68 = &v32[v33];
          }
        }
        *(_QWORD *)i = *((_QWORD *)v25 - 1);
        i = v68 + 8;
        v68 += 8;
        v25 = (char *)a1[2] - 8;
        a1[2] = v25;
      }
      v44 = (char *)a1[1];
      if (v44 == v25)
      {
        v44 = v25;
      }
      else
      {
        do
        {
          if (i == v69)
          {
            v45 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (i == __p[0])
                v52 = 1;
              else
                v52 = (i - (char *)__p[0]) >> 2;
              v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SLHomograph *>>((uint64_t)v70, v52);
              v55 = (uint64_t *)__p[1];
              i = &v53[8 * (v52 >> 2)];
              v56 = v68 - (char *)__p[1];
              if (v68 != __p[1])
              {
                i = &v53[8 * (v52 >> 2) + (v56 & 0xFFFFFFFFFFFFFFF8)];
                v57 = 8 * (v56 >> 3);
                v58 = &v53[8 * (v52 >> 2)];
                do
                {
                  v59 = *v55++;
                  *(_QWORD *)v58 = v59;
                  v58 += 8;
                  v57 -= 8;
                }
                while (v57);
              }
              v60 = __p[0];
              __p[0] = v53;
              __p[1] = &v53[8 * (v52 >> 2)];
              v68 = i;
              v69 = &v53[8 * v54];
              if (v60)
              {
                operator delete(v60);
                i = v68;
              }
            }
            else
            {
              v46 = v45 >> 3;
              v29 = v45 >> 3 < -1;
              v47 = (v45 >> 3) + 2;
              if (v29)
                v48 = v47;
              else
                v48 = v46 + 1;
              v49 = (char *)__p[1] - 8 * (v48 >> 1);
              v50 = i - (char *)__p[1];
              if (i != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v48 >> 1), __p[1], i - (char *)__p[1]);
                i = (char *)__p[1];
              }
              v51 = &i[-8 * (v48 >> 1)];
              i = &v49[v50];
              __p[1] = v51;
              v68 = &v49[v50];
            }
          }
          v61 = *(_QWORD *)v44;
          v44 += 8;
          *(_QWORD *)i = v61;
          i = v68 + 8;
          v68 += 8;
        }
        while (v44 != a1[2]);
        v25 = (char *)a1[1];
      }
      v62 = v69;
      v63 = (char *)a1[3];
      v64 = (char *)a1[4];
      a1[2] = i;
      a1[3] = v62;
      v65 = *a1;
      *(_OWORD *)a1 = *(_OWORD *)__p;
      __p[0] = v65;
      __p[1] = v25;
      v68 = v44;
      v69 = v63;
      a1[4] = &v64[v24];
      if (v44 != v25)
        v68 = &v44[(v25 - v44 + 7) & 0xFFFFFFFFFFFFFFF8];
      if (v65)
        operator delete(v65);
    }
  }
}

void sub_216FB1630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__deque_iterator<SLToken *,SLToken **,SLToken *&,SLToken ***,long,512l>::operator+[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = *(_QWORD **)a1;
  if (a2)
  {
    v4 = a2 + ((uint64_t)(*(_QWORD *)(a1 + 8) - *result) >> 3);
    if (v4 < 1)
      result -= (unint64_t)(511 - v4) >> 9;
    else
      result += (unint64_t)v4 >> 9;
  }
  return result;
}

void std::deque<SLToken *>::__add_back_capacity(_QWORD *a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t i;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int64_t v76;
  char *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  void *v88;
  void *__p[2];
  __int128 v90;
  _QWORD *v91;

  v3 = (char *)a1[2];
  v4 = (uint64_t)&v3[-a1[1]];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if ((v5 & 0x1FF) != 0)
    v6 = (v5 >> 9) + 1;
  else
    v6 = v5 >> 9;
  v7 = a1[4];
  if (v6 >= v7 >> 9)
    v8 = v7 >> 9;
  else
    v8 = v6;
  if (v6 <= v7 >> 9)
  {
    for (a1[4] = v7 - (v8 << 9); v8; --v8)
    {
      v16 = (_QWORD *)a1[1];
      v19 = *v16;
      v17 = (char *)(v16 + 1);
      v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1)
            v28 = 1;
          else
            v28 = (uint64_t)&v3[-*a1] >> 2;
          v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SLHomograph *>>((uint64_t)(a1 + 3), v28);
          v31 = &v29[8 * (v28 >> 2)];
          v32 = (uint64_t *)a1[1];
          v3 = v31;
          v33 = a1[2] - (_QWORD)v32;
          if (v33)
          {
            v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            v34 = 8 * (v33 >> 3);
            v35 = &v29[8 * (v28 >> 2)];
            do
            {
              v36 = *v32++;
              *(_QWORD *)v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            v3 = (char *)a1[2];
          }
        }
        else
        {
          v21 = v20 >> 3;
          v22 = v20 >> 3 < -1;
          v23 = (v20 >> 3) + 2;
          if (v22)
            v24 = v23;
          else
            v24 = v21 + 1;
          v25 = &v17[-8 * (v24 >> 1)];
          v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            v3 = (char *)a1[1];
          }
          v27 = &v3[-8 * (v24 >> 1)];
          v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(_QWORD *)v3 = v18;
      v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    v9 = v6 - v8;
    v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          std::__split_buffer<SLToken **>::push_back(a1, __p);
          --v6;
          if (!--v9)
            goto LABEL_75;
        }
        for (i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          std::__split_buffer<SLToken **>::push_front((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8)
            v64 = 511;
          else
            v64 = 512;
          v65 = v64 + a1[4];
          a1[4] = v65;
        }
        v8 = v6;
      }
      else
      {
LABEL_75:
        v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 9);
      if (v8)
      {
        v66 = (char *)a1[2];
        do
        {
          v67 = (_QWORD *)a1[1];
          v70 = *v67;
          v68 = (char *)(v67 + 1);
          v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1)
                v78 = 1;
              else
                v78 = (uint64_t)&v66[-*a1] >> 2;
              v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SLHomograph *>>((uint64_t)(a1 + 3), v78);
              v81 = &v79[8 * (v78 >> 2)];
              v82 = (uint64_t *)a1[1];
              v66 = v81;
              v83 = a1[2] - (_QWORD)v82;
              if (v83)
              {
                v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                v84 = 8 * (v83 >> 3);
                v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  v86 = *v82++;
                  *(_QWORD *)v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                v66 = (char *)a1[2];
              }
            }
            else
            {
              v72 = v71 >> 3;
              v22 = v71 >> 3 < -1;
              v73 = (v71 >> 3) + 2;
              if (v22)
                v74 = v73;
              else
                v74 = v72 + 1;
              v75 = &v68[-8 * (v74 >> 1)];
              v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                v66 = (char *)a1[1];
              }
              v77 = &v66[-8 * (v74 >> 1)];
              v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(_QWORD *)v66 = v69;
          v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v11 = v4 >> 3;
      v12 = v10 >> 2;
      if (v12 <= v9 + v11)
        v13 = v9 + v11;
      else
        v13 = v12;
      v14 = v11 - v8;
      v91 = a1 + 3;
      if (v13)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SLHomograph *>>((uint64_t)(a1 + 3), v13);
      else
        v15 = 0;
      v38 = v8 << 9;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&v90 = __p[1];
      *((_QWORD *)&v90 + 1) = &v15[8 * v13];
      do
      {
        v88 = operator new(0x1000uLL);
        std::__split_buffer<SLToken **>::push_back(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        v39 = (_QWORD *)a1[1];
        v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0])
                v48 = 1;
              else
                v48 = (v40 - (char *)__p[0]) >> 2;
              v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SLHomograph *>>((uint64_t)v91, v48);
              v51 = (uint64_t *)__p[1];
              v40 = &v49[8 * (v48 >> 2)];
              v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                v53 = 8 * (v52 >> 3);
                v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  v55 = *v51++;
                  *(_QWORD *)v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(_QWORD *)&v90 = v40;
              *((_QWORD *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                v40 = (char *)v90;
              }
            }
            else
            {
              v42 = v41 >> 3;
              v22 = v41 >> 3 < -1;
              v43 = (v41 >> 3) + 2;
              if (v22)
                v44 = v43;
              else
                v44 = v42 + 1;
              v45 = (char *)__p[1] - 8 * (v44 >> 1);
              v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                v40 = (char *)__p[1];
              }
              v47 = &v40[-8 * (v44 >> 1)];
              v40 = &v45[v46];
              __p[1] = v47;
              *(_QWORD *)&v90 = &v45[v46];
            }
          }
          *(_QWORD *)v40 = *v39;
          v40 = (char *)(v90 + 8);
          *(_QWORD *)&v90 = v90 + 8;
          v39 = (_QWORD *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      v57 = (_QWORD *)a1[2];
      v58 = -7 - (_QWORD)v57;
      while (v57 != (_QWORD *)a1[1])
      {
        --v57;
        v58 += 8;
        std::__split_buffer<SLToken **>::push_front((uint64_t)__p, v57);
      }
      v59 = (char *)*a1;
      v60 = *(_OWORD *)__p;
      v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      v90 = v62;
      a1[4] -= v38;
      if (v57 != (_QWORD *)v62)
        *(_QWORD *)&v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      if (v59)
        operator delete(v59);
    }
  }
}

void sub_216FB1C1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__deque_iterator<SLToken *,SLToken **,SLToken *&,SLToken ***,long,512l>::operator-[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = *(_QWORD **)a1;
  if (a2)
  {
    v4 = ((uint64_t)(*(_QWORD *)(a1 + 8) - *result) >> 3) - a2;
    if (v4 < 1)
      result -= (unint64_t)(511 - v4) >> 9;
    else
      result += (unint64_t)v4 >> 9;
  }
  return result;
}

void std::__split_buffer<SLToken **>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SLHomograph *>>(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SLHomograph *>>(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

void std::__split_buffer<SLToken **>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SLHomograph *>>(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SLHomograph *>>(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

double std::__for_each_segment[abi:ne180100]<std::__deque_iterator<SLToken *,SLToken **,SLToken *&,SLToken ***,long,512l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<SLToken *,SLToken **,SLToken *&,SLToken ***,long,512l>,std::__deque_iterator<SLToken *,SLToken **,SLToken *&,SLToken ***,long,512l>>>(char **a1, char *__src, char **a3, char *a4, uint64_t a5)
{
  char **v8;
  char *v9;
  char *v10;
  void **v11;
  char *v12;
  double result;
  char *v14;
  __int128 v15;

  if (a1 == a3)
  {
    v11 = *(void ***)a5;
    v12 = *(char **)(a5 + 8);
    v10 = __src;
  }
  else
  {
    v8 = a1 + 1;
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,SLToken **,SLToken **,std::__deque_iterator<SLToken *,SLToken **,SLToken *&,SLToken ***,long,512l>,0>(__src, *(char **)(a5 + 8), *a1 + 4096, *(void ***)a5, &v14);
    for (*(_OWORD *)a5 = v15; v8 != a3; *(_OWORD *)a5 = v15)
    {
      v9 = *v8++;
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,SLToken **,SLToken **,std::__deque_iterator<SLToken *,SLToken **,SLToken *&,SLToken ***,long,512l>,0>(v9, *(char **)(a5 + 8), v9 + 4096, *(void ***)a5, &v14);
    }
    v10 = *a3;
    v11 = *(void ***)a5;
    v12 = *(char **)(a5 + 8);
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,SLToken **,SLToken **,std::__deque_iterator<SLToken *,SLToken **,SLToken *&,SLToken ***,long,512l>,0>(v10, v12, a4, v11, &v14);
  result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

char *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,SLToken **,SLToken **,std::__deque_iterator<SLToken *,SLToken **,SLToken *&,SLToken ***,long,512l>,0>@<X0>(char *__src@<X0>, char *__dst@<X3>, char *a3@<X1>, void **a4@<X2>, char **a5@<X8>)
{
  void **v6;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;

  v6 = a4;
  if (__src != a3)
  {
    v9 = __src;
    v6 = a4 + 1;
    v10 = (char *)*a4;
    while (1)
    {
      v11 = v10 - __dst + 4096;
      v12 = (a3 - v9) >> 3 >= v11 >> 3 ? v11 >> 3 : (a3 - v9) >> 3;
      if (v12)
        __src = (char *)memmove(__dst, v9, 8 * v12);
      v9 += 8 * v12;
      if (v9 == a3)
        break;
      v13 = (char *)*v6++;
      v10 = v13;
      __dst = v13;
    }
    __dst += 8 * v12;
    if ((char *)*(v6 - 1) + 4096 == __dst)
      __dst = (char *)*v6;
    else
      --v6;
  }
  *a5 = a3;
  a5[1] = (char *)v6;
  a5[2] = __dst;
  return __src;
}

__n128 std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<SLToken *,SLToken **,SLToken *&,SLToken ***,long,512l>,std::__deque_iterator<SLToken *,SLToken **,SLToken *&,SLToken ***,long,512l>,0>@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, _QWORD *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  char *v12;
  char **v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __n128 result;
  uint64_t v21;
  __n128 v22;

  if (a1 == a3)
  {
    v19 = a2;
    v18 = a4;
    v15 = a5;
    v16 = a6;
  }
  else
  {
    v13 = a3 - 1;
    v12 = *a3;
    v14 = a4;
    v15 = a5;
    v16 = a6;
    while (1)
    {
      std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<SLToken **,std::__deque_iterator<SLToken *,SLToken **,SLToken *&,SLToken ***,long,512l>,0>(v12, v14, v15, v16, &v21);
      v16 = (char *)v22.n128_u64[1];
      v15 = (_QWORD *)v22.n128_u64[0];
      if (v13 == a1)
        break;
      v17 = *v13--;
      v12 = v17;
      v14 = v17 + 4096;
    }
    v18 = *a1 + 4096;
    v19 = a2;
  }
  std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<SLToken **,std::__deque_iterator<SLToken *,SLToken **,SLToken *&,SLToken ***,long,512l>,0>(v19, v18, v15, v16, &v21);
  result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<SLToken **,std::__deque_iterator<SLToken *,SLToken **,SLToken *&,SLToken ***,long,512l>,0>@<X0>(char *a1@<X1>, char *a2@<X2>, _QWORD *a3@<X3>, char *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v6;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *result;
  uint64_t v15;
  char *v16;

  v6 = a3;
  if (a1 == a2)
  {
    v9 = a1;
  }
  else
  {
    v9 = a2;
    v10 = *a3;
    v11 = a2;
    while (1)
    {
      v12 = (uint64_t)&a4[-v10];
      if ((v11 - a1) >> 3 >= v12 >> 3)
        v13 = v12 >> 3;
      else
        v13 = (v11 - a1) >> 3;
      v11 -= 8 * v13;
      a4 -= 8 * v13;
      if (v13)
        result = memmove(a4, v11, 8 * v13);
      if (v11 == a1)
        break;
      v15 = *--v6;
      v10 = v15;
      a4 = (char *)(v15 + 4096);
    }
    if ((char *)(*v6 + 4096) == a4)
    {
      v16 = (char *)v6[1];
      ++v6;
      a4 = v16;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

void std::deque<SLToken *>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SLHomograph *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<SLToken **>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<SLToken **>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SLHomograph *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<SLHomograph *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<SLToken **>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<SLToken **>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_216FB2728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

__CFBundle *SLDictLookup::Create(SLDictLookup *this, const __CFLocale *a2)
{
  const __CFString *Value;
  __CFBundle *result;
  const __CFString *v5;
  __CFBundle *v6;
  const __CFURL *v7;
  const __CFString *v8;
  const __CFLocale *v9;
  const __CFString *v10;
  const __CFLocale *v11;
  SLDictionary *v12;
  SLDictionary *v13;
  SLPrefixMappedFileDict *v14;
  SLDictionary *v15;
  SLDictionary *v16;
  SLDictionary *Flat;
  _BOOL4 v18;
  SLDictionary *v19;
  const __CFURL *v20;
  uint64_t v21;
  const __CFURL *v22;
  uint64_t v23;
  SLAgglomerate *v24;

  Value = (const __CFString *)CFLocaleGetValue(this, (CFLocaleKey)*MEMORY[0x24BDBD418]);
  if (CFStringCompare(Value, CFSTR("en"), 0))
    SLDictLookup::Create();
  result = SLGetSpeechDictionaryBundle();
  if (result)
  {
    v6 = result;
    v7 = CopyLocalizedResourceURL(result, CFSTR("PrefixDictionary"), v5);
    v9 = CopyLocalizedResourceURL(v6, CFSTR("CartLite"), v8);
    v11 = CopyLocalizedResourceURL(v6, CFSTR("CartNames"), v10);
    v12 = (SLDictionary *)operator new();
    SLDictionary::SLDictionary(v12);
    *(_QWORD *)v12 = &off_24D670D50;
    *((_QWORD *)v12 + 3) = 0;
    *((_QWORD *)v12 + 4) = 0;
    v13 = (SLDictionary *)operator new();
    SLDictionary::SLDictionary(v13);
    *(_QWORD *)v13 = &off_24D670D50;
    *((_QWORD *)v13 + 3) = 0;
    *((_QWORD *)v13 + 4) = 0;
    if (v7)
    {
      v14 = (SLPrefixMappedFileDict *)operator new();
      SLPrefixMappedFileDict::SLPrefixMappedFileDict(v14, v7);
      SLEncyclopedia::PushFront((uint64_t)v12, v14);
    }
    else
    {
      v14 = 0;
    }
    v15 = SLMorphRules::Create(this, 0);
    SLEncyclopedia::PushBack((uint64_t)v12, v15);
    if (v14)
    {
      Flat = SLMorphRules::CreateFlat(this, v14, 0);
      SLEncyclopedia::PushBack((uint64_t)v12, Flat);
    }
    v18 = 1;
    if (v9 && v11)
    {
      v19 = (SLDictionary *)operator new();
      v21 = SLCartDict::Create(this, v11, v20);
      v23 = SLCartDict::Create(this, v9, v22);
      SLDictionary::SLDictionary(v19);
      *(_QWORD *)v19 = &off_24D6714D0;
      *((_QWORD *)v19 + 3) = v21;
      *((_QWORD *)v19 + 4) = v23;
      SLEncyclopedia::PushBack((uint64_t)v13, v19);
      v18 = v7 == 0;
    }
    if (v7)
      CFRelease(v7);
    if (v9)
      CFRelease(v9);
    if (v11)
      CFRelease(v11);
    if (v18)
    {
      (*(void (**)(SLDictionary *))(*(_QWORD *)v13 + 16))(v13);
      return 0;
    }
    else
    {
      v24 = SLAgglomerate::Create(this, v12, v16);
      result = (__CFBundle *)operator new();
      *(_QWORD *)result = &off_24D671EC8;
      *((_QWORD *)result + 1) = v12;
      *((_QWORD *)result + 2) = v13;
      *((_QWORD *)result + 3) = v14;
      *((_QWORD *)result + 4) = v24;
    }
  }
  return result;
}

void sub_216FB29F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A0649C](v1, 0x10F1C40125E1C2CLL);
  _Unwind_Resume(a1);
}

CFURLRef CopyLocalizedResourceURL(__CFBundle *a1, const __CFString *a2, const __CFString *a3)
{
  const __CFString *v4;
  CFURLRef v5;

  v4 = CFStringCreateWithFormat(0, 0, CFSTR("%@Eng"), a2);
  v5 = CFBundleCopyResourceURL(a1, v4, 0, 0);
  CFRelease(v4);
  return v5;
}

CFArrayRef SLDictLookup::CreatePhonemeSymbols(SLDictLookup *this, const __CFLocale *a2)
{
  const __CFString *Value;
  __CFBundle *v3;
  const __CFString *v4;
  SLMMapCache *v5;
  SLMMapHint *v6;
  SLMMapCache *v7;
  SLMMapCache *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  CFNumberRef v12;
  CFStringRef v13;
  CFStringRef v14;
  CFNumberRef v15;
  CFNumberRef v16;
  CFDictionaryRef Dictionary;
  CFDictionaryRef v18;
  const void **v19;
  const void **v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  const void **v25;
  const void **v26;
  const void **v27;
  const void *v28;
  CFArrayRef v29;
  __int16 valuePtr;
  __int128 v32;
  void *__p[2];
  __int128 v34;
  const void **v35;
  const void **v36;
  const void **v37;

  Value = (const __CFString *)CFLocaleGetValue(this, (CFLocaleKey)*MEMORY[0x24BDBD418]);
  if (CFStringCompare(Value, CFSTR("en"), 0))
    SLDictLookup::CreatePhonemeSymbols();
  v3 = SLGetSpeechDictionaryBundle();
  if (!v3)
    return 0;
  v5 = CopyLocalizedResourceURL(v3, CFSTR("PhonemeSymbols"), v4);
  if (!v5)
    return 0;
  v7 = v5;
  v8 = (SLMMapCache *)SLMMapCache::Map(v5, 0, v6);
  CFRelease(v7);
  if (v8 == (SLMMapCache *)-1)
    return 0;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  if (*(_WORD *)v8)
  {
    v10 = 0;
    v11 = __rev16(*(unsigned __int16 *)v8);
    do
    {
      *(_OWORD *)__p = 0u;
      v34 = 0u;
      v32 = 0u;
      valuePtr = bswap32(*((unsigned __int16 *)v8 + 27 * v10 + 1)) >> 16;
      v12 = CFNumberCreate(0, kCFNumberSInt16Type, &valuePtr);
      SLCFDictionaryBuilder::push_back((SLCFDictionaryBuilder *)&v32, CFSTR("Opcode"), v12);
      v13 = CFStringCreateWithPascalString(0, (ConstStr255Param)v8 + 54 * v10 + 4, 0x8000100u);
      SLCFDictionaryBuilder::push_back((SLCFDictionaryBuilder *)&v32, CFSTR("Symbol"), v13);
      v14 = CFStringCreateWithPascalString(0, (ConstStr255Param)v8 + 54 * v10 + 20, 0x8000100u);
      SLCFDictionaryBuilder::push_back((SLCFDictionaryBuilder *)&v32, CFSTR("Example"), v14);
      valuePtr = bswap32(*((unsigned __int16 *)v8 + 27 * v10 + 26)) >> 16;
      v15 = CFNumberCreate(0, kCFNumberSInt16Type, &valuePtr);
      SLCFDictionaryBuilder::push_back((SLCFDictionaryBuilder *)&v32, CFSTR("HiliteStart"), v15);
      valuePtr = bswap32(*((unsigned __int16 *)v8 + 27 * v10 + 27)) >> 16;
      v16 = CFNumberCreate(0, kCFNumberSInt16Type, &valuePtr);
      SLCFDictionaryBuilder::push_back((SLCFDictionaryBuilder *)&v32, CFSTR("HiliteEnd"), v16);
      Dictionary = SLCFDictionaryBuilder::CreateDictionary((const void ***)&v32);
      v18 = Dictionary;
      v19 = v36;
      if (v36 >= v37)
      {
        v21 = v36 - v35;
        if ((unint64_t)(v21 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v22 = ((char *)v37 - (char *)v35) >> 2;
        if (v22 <= v21 + 1)
          v22 = v21 + 1;
        if ((unint64_t)((char *)v37 - (char *)v35) >= 0x7FFFFFFFFFFFFFF8)
          v23 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v23 = v22;
        if (v23)
          v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SLHomograph *>>((uint64_t)&v37, v23);
        else
          v24 = 0;
        v25 = (const void **)&v24[8 * v21];
        *v25 = v18;
        v20 = v25 + 1;
        v27 = v35;
        v26 = v36;
        if (v36 != v35)
        {
          do
          {
            v28 = *--v26;
            *--v25 = v28;
          }
          while (v26 != v27);
          v26 = v35;
        }
        v35 = v25;
        v36 = v20;
        v37 = (const void **)&v24[8 * v23];
        if (v26)
          operator delete(v26);
      }
      else
      {
        *v36 = Dictionary;
        v20 = v19 + 1;
      }
      v36 = v20;
      if (__p[1])
      {
        *(void **)&v34 = __p[1];
        operator delete(__p[1]);
      }
      SLCFArrayBuilder::~SLCFArrayBuilder((SLCFArrayBuilder *)&v32);
      ++v10;
    }
    while (v10 != v11);
  }
  SLMMapCache::Unmap(v8, v9);
  v29 = SLCFArrayBuilder::CreateArray(&v35);
  SLCFArrayBuilder::~SLCFArrayBuilder((SLCFArrayBuilder *)&v35);
  return v29;
}

void sub_216FB2D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  SLCFArrayBuilder::~SLCFArrayBuilder((SLCFArrayBuilder *)va);
  _Unwind_Resume(a1);
}

void SLDictLookup::~SLDictLookup(SLDictLookup *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24D671EC8;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  v3 = *((_QWORD *)this + 2);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

{
  SLDictLookup::~SLDictLookup(this);
  JUMPOUT(0x219A0649CLL);
}

uint64_t SLDictLookup::Lookup(SLDictLookup *this, SLDictionary *a2, const char *a3, uint64_t a4, SLToken *a5, int a6)
{
  SLDictionaryRecursion *v11;
  uint64_t v12;
  _QWORD v14[8];
  char v15;

  SLWordBuilder::SLWordBuilder((SLWordBuilder *)v14);
  v11 = 0;
  v14[0] = &off_24D671EE8;
  memset(&v14[2], 0, 24);
  v14[5] = a5;
  v14[7] = 0;
  v15 = 1;
  if (a6)
  {
    v11 = (SLDictionaryRecursion *)operator new();
    SLDictionaryRecursion::SLDictionaryRecursion(v11, a2, 10);
  }
  v12 = (**(uint64_t (***)(SLDictionary *, const char *, uint64_t, _QWORD *, SLDictionaryRecursion *))a2)(a2, a3, a4, v14, v11);
  if ((_DWORD)v12)
    SLTokenBuilder::Build((SLTokenBuilder *)v14);
  if (v11)
    (*(void (**)(SLDictionaryRecursion *))(*(_QWORD *)v11 + 16))(v11);
  SLTokenBuilder::~SLTokenBuilder((SLTokenBuilder *)v14);
  return v12;
}

void sub_216FB2F44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x219A0649C](v2, 0x10A1C40DD1828A3);
  SLTokenBuilder::~SLTokenBuilder((SLTokenBuilder *)va);
  _Unwind_Resume(a1);
}

void SLTokenBuilder::SLTokenBuilder(SLTokenBuilder *this, SLToken *a2)
{
  uint64_t v3;

  SLWordBuilder::SLWordBuilder(this);
  *(_QWORD *)v3 = &off_24D671EE8;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = a2;
  *(_QWORD *)(v3 + 56) = 0;
  *(_BYTE *)(v3 + 64) = 1;
}

{
  uint64_t v3;

  SLWordBuilder::SLWordBuilder(this);
  *(_QWORD *)v3 = &off_24D671EE8;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = a2;
  *(_QWORD *)(v3 + 56) = 0;
  *(_BYTE *)(v3 + 64) = 1;
}

void SLTokenBuilder::Build(SLTokenBuilder *this)
{
  char *v2;

  v2 = (char *)this + 16;
  if ((*((char *)this + 39) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)this + 39))
      goto LABEL_7;
    goto LABEL_6;
  }
  if (*((_QWORD *)this + 3))
  {
    v2 = *(char **)v2;
LABEL_6:
    SLToken::SetText(*((SLToken **)this + 5), v2);
  }
LABEL_7:
  *(_DWORD *)(*((_QWORD *)this + 5) + 16) |= 0x40u;
}

void SLTokenBuilder::SLTokenBuilder(SLTokenBuilder *this, SLWordBuilder *a2, int a3)
{
  _QWORD *v6;
  uint64_t v7;
  SLToken *v8;
  SLToken *v9;
  int v10;

  SLWordBuilder::SLWordBuilder(this);
  *v6 = &off_24D671EE8;
  v6[2] = 0;
  v6[3] = 0;
  v6[4] = 0;
  v7 = (*(uint64_t (**)(SLWordBuilder *))(*(_QWORD *)a2 + 104))(a2);
  if (a3 && (*(unsigned int (**)(SLWordBuilder *))(*(_QWORD *)a2 + 112))(a2))
  {
    *((_BYTE *)this + 64) = v7 != 0;
    if (v7)
    {
      *((_QWORD *)this + 5) = v7;
      *((_QWORD *)this + 7) = 0;
      return;
    }
  }
  else
  {
    *((_BYTE *)this + 64) = 0;
  }
  *((_QWORD *)this + 7) = a2;
  v8 = (SLToken *)operator new();
  v9 = v8;
  if (v7)
    v10 = *(_DWORD *)(v7 + 16) & 0x18;
  else
    v10 = 0;
  SLToken::SLToken(v8, 0, v10);
  *((_QWORD *)this + 5) = v9;
}

void sub_216FB3150(_Unwind_Exception *a1)
{
  char *v1;
  uint64_t v2;
  void **v3;

  MEMORY[0x219A0649C](v2, 0x10F0C4034644DEDLL);
  if (v1[39] < 0)
    operator delete(*v3);
  SLWordBuilder::~SLWordBuilder((SLWordBuilder *)v1);
  _Unwind_Resume(a1);
}

void SLTokenBuilder::~SLTokenBuilder(SLTokenBuilder *this)
{
  SLToken *v2;

  *(_QWORD *)this = &off_24D671EE8;
  if (*((_QWORD *)this + 7))
  {
    v2 = (SLToken *)*((_QWORD *)this + 5);
    if (v2)
    {
      SLToken::~SLToken(v2);
      MEMORY[0x219A0649C]();
    }
  }
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
  SLWordBuilder::~SLWordBuilder(this);
}

{
  SLTokenBuilder::~SLTokenBuilder(this);
  JUMPOUT(0x219A0649CLL);
}

uint64_t SLTokenBuilder::Forward(SLTokenBuilder *this)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v2 = *((_QWORD *)this + 7);
  if (!v2)
    return (*(uint64_t (**)(SLTokenBuilder *))(*(_QWORD *)this + 136))(this);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  (***((void (****)(_QWORD, _QWORD))this + 7))(*((_QWORD *)this + 7), *(_QWORD *)(*((_QWORD *)this + 5) + 24));
  if (*((char *)this + 39) < 0)
  {
    v3 = (char *)*((_QWORD *)this + 2);
    v4 = *((_QWORD *)this + 3);
  }
  else
  {
    v3 = (char *)this + 16;
    v4 = *((unsigned __int8 *)this + 39);
  }
  (*(void (**)(_QWORD, char *, uint64_t))(**((_QWORD **)this + 7) + 16))(*((_QWORD *)this + 7), v3, v4);
  v6 = *((_QWORD *)this + 5);
  if (*(_BYTE *)(v6 + 1))
  {
    (*(void (**)(_QWORD))(**((_QWORD **)this + 7) + 24))(*((_QWORD *)this + 7));
    v6 = *((_QWORD *)this + 5);
  }
  if (*(_BYTE *)(v6 + 2))
  {
    (*(void (**)(_QWORD))(**((_QWORD **)this + 7) + 24))(*((_QWORD *)this + 7));
    v6 = *((_QWORD *)this + 5);
  }
  if (*(_QWORD *)(v6 + 40))
  {
    (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 7) + 40))(*((_QWORD *)this + 7), *(_QWORD *)(v6 + 32));
    v6 = *((_QWORD *)this + 5);
  }
  v8 = v6 + 80;
  v7 = *(_QWORD *)(v6 + 80);
  if (*(_QWORD *)(v8 + 8) != v7)
  {
    v9 = 0;
    do
    {
      v10 = *(_QWORD *)(v7 + 8 * v9);
      (*(void (**)(_QWORD))(**((_QWORD **)this + 7) + 56))(*((_QWORD *)this + 7));
      v11 = *(_QWORD *)(v10 + 32);
      if (*(_QWORD *)(v10 + 40) != v11)
      {
        v12 = 0;
        do
        {
          (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 7) + 72))(*((_QWORD *)this + 7), *(unsigned __int8 *)(v11 + v12++));
          v11 = *(_QWORD *)(v10 + 32);
        }
        while (v12 < *(_QWORD *)(v10 + 40) - v11);
      }
      SLWordBuilder::SetPartOfSpeech(*((_QWORD *)this + 7), *(_DWORD *)v10);
      (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 7) + 88))(*((_QWORD *)this + 7), v10 + 4);
      (*(void (**)(_QWORD))(**((_QWORD **)this + 7) + 96))(*((_QWORD *)this + 7));
      ++v9;
      v7 = *(_QWORD *)(*((_QWORD *)this + 5) + 80);
    }
    while (v9 < (*(_QWORD *)(*((_QWORD *)this + 5) + 88) - v7) >> 3);
  }
  (*(void (**)(_QWORD))(**((_QWORD **)this + 7) + 48))(*((_QWORD *)this + 7));
  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 7) + 104))(*((_QWORD *)this + 7));
  if (result)
    *(_DWORD *)(result + 16) = *(_DWORD *)(result + 16) & 0xFFFFFFE7 | (8
                                                                      * ((*(_DWORD *)(*((_QWORD *)this + 5) + 16) >> 3) & 3));
  return result;
}

uint64_t SLTokenBuilder::SetDictionary(uint64_t this, const char *a2)
{
  *(_QWORD *)(*(_QWORD *)(this + 40) + 24) = a2;
  return this;
}

void SLTokenBuilder::BeginWord(SLToken **this)
{
  SLToken::clear(this[5]);
}

void SLTokenBuilder::SetText(SLTokenBuilder *this, const char *a2)
{
  JUMPOUT(0x219A06400);
}

uint64_t SLTokenBuilder::SetBoundary(uint64_t this, char a2)
{
  *(_BYTE *)(*(_QWORD *)(this + 40) + 1) = a2;
  return this;
}

uint64_t SLTokenBuilder::SetEmphasis(uint64_t this, char a2)
{
  *(_BYTE *)(*(_QWORD *)(this + 40) + 2) = a2;
  return this;
}

uint64_t SLTokenBuilder::SetPosition(uint64_t this, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 40);
  *(_QWORD *)(v3 + 32) = a2;
  *(_QWORD *)(v3 + 40) = a3;
  return this;
}

void SLTokenBuilder::BeginHomograph(SLTokenBuilder *this)
{
  SLHomograph *v2;

  SLWordBuilder::BeginHomograph((uint64_t)this);
  v2 = (SLHomograph *)operator new();
  SLHomograph::SLHomograph(v2);
  *((_QWORD *)this + 6) = v2;
}

void sub_216FB3478(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A0649C](v1, 0x1070C40CEE27CEALL);
  _Unwind_Resume(a1);
}

void SLTokenBuilder::AddPhoneme(SLTokenBuilder *this, char a2)
{
  _QWORD *v3;
  unint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  _BYTE *v12;
  char *v13;
  _BYTE *v14;
  char v15;

  v3 = (_QWORD *)*((_QWORD *)this + 6);
  v5 = (_BYTE *)v3[5];
  v4 = v3[6];
  if ((unint64_t)v5 >= v4)
  {
    v7 = v3[4];
    v8 = &v5[-v7];
    v9 = (uint64_t)&v5[-v7 + 1];
    if (v9 < 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v10 = v4 - v7;
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
      v12 = operator new(v11);
    else
      v12 = 0;
    v13 = &v12[v11];
    v8[(_QWORD)v12] = a2;
    v6 = (uint64_t)&v8[(_QWORD)v12 + 1];
    if (v5 == (_BYTE *)v7)
    {
      v12 = &v8[(_QWORD)v12];
    }
    else
    {
      v14 = &v5[~v7];
      do
      {
        v15 = *--v5;
        (v14--)[(_QWORD)v12] = v15;
      }
      while (v5 != (_BYTE *)v7);
      v5 = (_BYTE *)v3[4];
    }
    v3[4] = v12;
    v3[5] = v6;
    v3[6] = v13;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *v5 = a2;
    v6 = (uint64_t)(v5 + 1);
  }
  v3[5] = v6;
}

__n128 SLTokenBuilder::SetTags(SLTokenBuilder *this, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *(__n128 *)(*((_QWORD *)this + 6) + 4) = *a2;
  return result;
}

void SLTokenBuilder::EndHomograph(SLTokenBuilder *this)
{
  _DWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v3 = (_QWORD *)*((_QWORD *)this + 5);
  v2 = (_DWORD *)*((_QWORD *)this + 6);
  *v2 = *((_DWORD *)this + 3);
  v4 = (_QWORD *)v3[11];
  v5 = v3[12];
  if ((unint64_t)v4 >= v5)
  {
    v7 = v3[10];
    v8 = ((uint64_t)v4 - v7) >> 3;
    if ((unint64_t)(v8 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v9 = v5 - v7;
    v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1))
      v10 = v8 + 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
    {
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SLHomograph *>>((uint64_t)(v3 + 12), v11);
      v2 = (_DWORD *)*((_QWORD *)this + 6);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[8 * v8];
    v14 = &v12[8 * v11];
    *(_QWORD *)v13 = v2;
    v6 = v13 + 8;
    v16 = (char *)v3[10];
    v15 = (char *)v3[11];
    if (v15 != v16)
    {
      do
      {
        v17 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        *((_QWORD *)v13 - 1) = v17;
        v13 -= 8;
      }
      while (v15 != v16);
      v15 = (char *)v3[10];
    }
    v3[10] = v13;
    v3[11] = v6;
    v3[12] = v14;
    if (v15)
      operator delete(v15);
  }
  else
  {
    *v4 = v2;
    v6 = v4 + 1;
  }
  v3[11] = v6;
}

uint64_t SLTmpLookup::SLTmpLookup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  SLToken *v6;
  SLDictLookup *v7;
  int v8;
  const char *v9;
  uint64_t v10;

  v6 = (SLToken *)operator new();
  SLToken::SLToken(v6, 0, 0);
  *(_QWORD *)(a1 + 8) = v6;
  v8 = *(char *)(a2 + 23);
  if (v8 >= 0)
    v9 = (const char *)a2;
  else
    v9 = *(const char **)a2;
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(a2 + 23);
  else
    v10 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)a1 = SLDictLookup::Lookup(v7, *(SLDictionary **)(a3 + 24), v9, v10, v6, 0);
  return a1;
}

void sub_216FB3714(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A0649C](v1, 0x10F0C4034644DEDLL);
  _Unwind_Resume(a1);
}

void SLTmpLookup::~SLTmpLookup(SLTmpLookup *this)
{
  SLToken *v1;

  v1 = (SLToken *)*((_QWORD *)this + 1);
  if (v1)
  {
    SLToken::~SLToken(v1);
    MEMORY[0x219A0649C]();
  }
}

uint64_t SLTokenBuilder::WrappedToken(SLTokenBuilder *this)
{
  return *((_QWORD *)this + 5);
}

uint64_t SLTokenBuilder::AllowShortcut(SLTokenBuilder *this)
{
  return *((unsigned __int8 *)this + 64);
}

SLMorphRulesEng *SLCreateMorphRulesEng(char a1)
{
  SLMorphRulesEng *v2;

  v2 = (SLMorphRulesEng *)operator new();
  SLMorphRulesEng::SLMorphRulesEng(v2, a1);
  return v2;
}

void sub_216FB37D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A0649C](v1, 0x10A1C4006A16F6ELL);
  _Unwind_Resume(a1);
}

SLFlatMorphRulesEng *SLCreateFlatMorphRulesEng(SLDictionary *a1, char a2)
{
  SLFlatMorphRulesEng *v4;

  v4 = (SLFlatMorphRulesEng *)operator new();
  SLFlatMorphRulesEng::SLFlatMorphRulesEng(v4, a1, a2);
  return v4;
}

void sub_216FB3850(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A0649C](v1, 0x10A1C40532DF389);
  _Unwind_Resume(a1);
}

void SLMorphEng::Store_S_or_Z(SLMorphEng *this, SLToken *a2)
{
  uint64_t v2;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  char *v7;
  int v8;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  char *v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  void *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  void *v26;
  char *v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  size_t v31;
  char *v32;
  char *v33;
  char v34;
  unint64_t v35;
  char *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  size_t v40;
  void *v41;
  char *v42;
  char *v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  size_t v51;
  char *v52;
  char *v53;
  char *v54;
  char v55;
  char *v56;
  char v57;
  char *v58;
  char v59;

  v2 = *((_QWORD *)a2 + 10);
  if (*((_QWORD *)a2 + 11) != v2)
  {
    v4 = 0;
    while (1)
    {
      v5 = *(_QWORD **)(v2 + 8 * v4);
      v6 = v5 + 4;
      v7 = (char *)v5[5];
      v8 = SLPhonEng::sFlags[*(v7 - 1)];
      if ((*(v7 - 1) & 0xFE) == 0x2A || (*(_QWORD *)&v8 & 0x20000) != 0)
        break;
      v12 = v8 & 6;
      v13 = v5[6];
      if (v12 != 2)
      {
        if ((unint64_t)v7 >= v13)
        {
          v21 = (char *)*v6;
          v22 = &v7[-*v6];
          v23 = (unint64_t)(v22 + 1);
          if ((uint64_t)(v22 + 1) < 0)
            goto LABEL_94;
          v24 = v13 - (_QWORD)v21;
          if (2 * v24 > v23)
            v23 = 2 * v24;
          if (v24 >= 0x3FFFFFFFFFFFFFFFLL)
            v25 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v25 = v23;
          if (v25)
            v26 = operator new(v25);
          else
            v26 = 0;
          v52 = &v22[(_QWORD)v26];
          v53 = (char *)v26 + v25;
          v22[(_QWORD)v26] = 43;
          v46 = (uint64_t)&v22[(_QWORD)v26 + 1];
          if (v7 != v21)
          {
            v56 = &v7[~(unint64_t)v21];
            do
            {
              v57 = *--v7;
              (v56--)[(_QWORD)v26] = v57;
            }
            while (v7 != v21);
            goto LABEL_88;
          }
          goto LABEL_90;
        }
        goto LABEL_64;
      }
      if ((unint64_t)v7 >= v13)
      {
        v27 = (char *)*v6;
        v28 = &v7[-*v6];
        v29 = (unint64_t)(v28 + 1);
        if ((uint64_t)(v28 + 1) < 0)
          goto LABEL_94;
        v30 = v13 - (_QWORD)v27;
        if (2 * v30 > v29)
          v29 = 2 * v30;
        if (v30 >= 0x3FFFFFFFFFFFFFFFLL)
          v31 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v31 = v29;
        if (v31)
          v26 = operator new(v31);
        else
          v26 = 0;
        v52 = &v28[(_QWORD)v26];
        v53 = (char *)v26 + v31;
        v28[(_QWORD)v26] = 42;
        v46 = (uint64_t)&v28[(_QWORD)v26 + 1];
        if (v7 != v27)
        {
          v58 = &v7[~(unint64_t)v27];
          do
          {
            v59 = *--v7;
            (v58--)[(_QWORD)v26] = v59;
          }
          while (v7 != v27);
          goto LABEL_88;
        }
        goto LABEL_90;
      }
      v14 = 42;
LABEL_65:
      *v7 = v14;
      v46 = (uint64_t)(v7 + 1);
LABEL_92:
      v5[5] = v46;
      ++v4;
      v2 = *((_QWORD *)a2 + 10);
      if (v4 >= (*((_QWORD *)a2 + 11) - v2) >> 3)
        return;
    }
    v10 = v5[6];
    if ((unint64_t)v7 < v10)
    {
      *v7 = 60;
      v11 = v7 + 1;
      goto LABEL_45;
    }
    v15 = (char *)*v6;
    v16 = &v7[-*v6];
    v17 = (unint64_t)(v16 + 1);
    if ((uint64_t)(v16 + 1) < 0)
      goto LABEL_94;
    v18 = v10 - (_QWORD)v15;
    if (2 * v18 > v17)
      v17 = 2 * v18;
    if (v18 >= 0x3FFFFFFFFFFFFFFFLL)
      v19 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
      v20 = operator new(v19);
    else
      v20 = 0;
    v32 = (char *)v20 + v19;
    v16[(_QWORD)v20] = 60;
    v11 = &v16[(_QWORD)v20 + 1];
    if (v7 == v15)
    {
      v5[4] = &v16[(_QWORD)v20];
      v5[5] = v11;
      v5[6] = v32;
    }
    else
    {
      v33 = &v7[~(unint64_t)v15];
      do
      {
        v34 = *--v7;
        (v33--)[(_QWORD)v20] = v34;
      }
      while (v7 != v15);
      v7 = (char *)v5[4];
      v5[4] = v20;
      v5[5] = v11;
      v5[6] = v32;
      if (!v7)
      {
LABEL_45:
        v5[5] = v11;
        v35 = v5[6];
        if ((unint64_t)v11 < v35)
        {
          *v11 = 25;
          v7 = v11 + 1;
          goto LABEL_63;
        }
        v36 = (char *)*v6;
        v37 = &v11[-*v6];
        v38 = (unint64_t)(v37 + 1);
        if ((uint64_t)(v37 + 1) < 0)
          goto LABEL_94;
        v39 = v35 - (_QWORD)v36;
        if (2 * v39 > v38)
          v38 = 2 * v39;
        if (v39 >= 0x3FFFFFFFFFFFFFFFLL)
          v40 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v40 = v38;
        if (v40)
          v41 = operator new(v40);
        else
          v41 = 0;
        v42 = (char *)v41 + v40;
        v37[(_QWORD)v41] = 25;
        v7 = &v37[(_QWORD)v41 + 1];
        if (v11 == v36)
        {
          v5[4] = &v37[(_QWORD)v41];
          v5[5] = v7;
          v5[6] = v42;
        }
        else
        {
          v43 = &v11[~(unint64_t)v36];
          do
          {
            v44 = *--v11;
            (v43--)[(_QWORD)v41] = v44;
          }
          while (v11 != v36);
          v11 = (char *)v5[4];
          v5[4] = v41;
          v5[5] = v7;
          v5[6] = v42;
          if (!v11)
          {
LABEL_63:
            v5[5] = v7;
            v45 = v5[6];
            if ((unint64_t)v7 >= v45)
            {
              v47 = (char *)*v6;
              v48 = &v7[-*v6];
              v49 = (unint64_t)(v48 + 1);
              if ((uint64_t)(v48 + 1) < 0)
LABEL_94:
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              v50 = v45 - (_QWORD)v47;
              if (2 * v50 > v49)
                v49 = 2 * v50;
              if (v50 >= 0x3FFFFFFFFFFFFFFFLL)
                v51 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v51 = v49;
              if (v51)
                v26 = operator new(v51);
              else
                v26 = 0;
              v52 = &v48[(_QWORD)v26];
              v53 = (char *)v26 + v51;
              v48[(_QWORD)v26] = 43;
              v46 = (uint64_t)&v48[(_QWORD)v26 + 1];
              if (v7 != v47)
              {
                v54 = &v7[~(unint64_t)v47];
                do
                {
                  v55 = *--v7;
                  (v54--)[(_QWORD)v26] = v55;
                }
                while (v7 != v47);
LABEL_88:
                v7 = (char *)v5[4];
                v5[4] = v26;
                v5[5] = v46;
                v5[6] = v53;
                if (!v7)
                  goto LABEL_92;
LABEL_91:
                operator delete(v7);
                goto LABEL_92;
              }
LABEL_90:
              v5[4] = v52;
              v5[5] = v46;
              v5[6] = v53;
              goto LABEL_91;
            }
LABEL_64:
            v14 = 43;
            goto LABEL_65;
          }
        }
        operator delete(v11);
        goto LABEL_63;
      }
    }
    operator delete(v7);
    goto LABEL_45;
  }
}

void SLMorphEng::Store_T_or_D(SLMorphEng *this, SLToken *a2)
{
  uint64_t v2;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  int v11;
  unint64_t v12;
  char v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  void *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  void *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  size_t v30;
  char *v31;
  char *v32;
  char v33;
  unint64_t v34;
  char *v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  size_t v39;
  void *v40;
  char *v41;
  char *v42;
  char v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  unint64_t v48;
  unint64_t v49;
  size_t v50;
  char *v51;
  char *v52;
  char *v53;
  char v54;
  char *v55;
  char v56;
  char *v57;
  char v58;

  v2 = *((_QWORD *)a2 + 10);
  if (*((_QWORD *)a2 + 11) != v2)
  {
    v4 = 0;
    while (1)
    {
      v5 = *(_QWORD **)(v2 + 8 * v4);
      v6 = v5 + 4;
      v7 = (char *)v5[5];
      v8 = *(v7 - 1);
      if ((v8 & 0xFE) == 0x30)
        break;
      v11 = SLPhonEng::sFlags[v8] & 6;
      v12 = v5[6];
      if (v11 != 2)
      {
        if ((unint64_t)v7 >= v12)
        {
          v20 = (char *)*v6;
          v21 = &v7[-*v6];
          v22 = (unint64_t)(v21 + 1);
          if ((uint64_t)(v21 + 1) < 0)
            goto LABEL_91;
          v23 = v12 - (_QWORD)v20;
          if (2 * v23 > v22)
            v22 = 2 * v23;
          if (v23 >= 0x3FFFFFFFFFFFFFFFLL)
            v24 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v24 = v22;
          if (v24)
            v25 = operator new(v24);
          else
            v25 = 0;
          v51 = &v21[(_QWORD)v25];
          v52 = (char *)v25 + v24;
          v21[(_QWORD)v25] = 49;
          v45 = (uint64_t)&v21[(_QWORD)v25 + 1];
          if (v7 != v20)
          {
            v55 = &v7[~(unint64_t)v20];
            do
            {
              v56 = *--v7;
              (v55--)[(_QWORD)v25] = v56;
            }
            while (v7 != v20);
            goto LABEL_85;
          }
          goto LABEL_87;
        }
        goto LABEL_61;
      }
      if ((unint64_t)v7 >= v12)
      {
        v26 = (char *)*v6;
        v27 = &v7[-*v6];
        v28 = (unint64_t)(v27 + 1);
        if ((uint64_t)(v27 + 1) < 0)
          goto LABEL_91;
        v29 = v12 - (_QWORD)v26;
        if (2 * v29 > v28)
          v28 = 2 * v29;
        if (v29 >= 0x3FFFFFFFFFFFFFFFLL)
          v30 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v30 = v28;
        if (v30)
          v25 = operator new(v30);
        else
          v25 = 0;
        v51 = &v27[(_QWORD)v25];
        v52 = (char *)v25 + v30;
        v27[(_QWORD)v25] = 48;
        v45 = (uint64_t)&v27[(_QWORD)v25 + 1];
        if (v7 != v26)
        {
          v57 = &v7[~(unint64_t)v26];
          do
          {
            v58 = *--v7;
            (v57--)[(_QWORD)v25] = v58;
          }
          while (v7 != v26);
          goto LABEL_85;
        }
        goto LABEL_87;
      }
      v13 = 48;
LABEL_62:
      *v7 = v13;
      v45 = (uint64_t)(v7 + 1);
LABEL_89:
      v5[5] = v45;
      ++v4;
      v2 = *((_QWORD *)a2 + 10);
      if (v4 >= (*((_QWORD *)a2 + 11) - v2) >> 3)
        return;
    }
    v9 = v5[6];
    if ((unint64_t)v7 < v9)
    {
      *v7 = 60;
      v10 = v7 + 1;
      goto LABEL_42;
    }
    v14 = (char *)*v6;
    v15 = &v7[-*v6];
    v16 = (unint64_t)(v15 + 1);
    if ((uint64_t)(v15 + 1) < 0)
      goto LABEL_91;
    v17 = v9 - (_QWORD)v14;
    if (2 * v17 > v16)
      v16 = 2 * v17;
    if (v17 >= 0x3FFFFFFFFFFFFFFFLL)
      v18 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
      v19 = operator new(v18);
    else
      v19 = 0;
    v31 = (char *)v19 + v18;
    v15[(_QWORD)v19] = 60;
    v10 = &v15[(_QWORD)v19 + 1];
    if (v7 == v14)
    {
      v5[4] = &v15[(_QWORD)v19];
      v5[5] = v10;
      v5[6] = v31;
    }
    else
    {
      v32 = &v7[~(unint64_t)v14];
      do
      {
        v33 = *--v7;
        (v32--)[(_QWORD)v19] = v33;
      }
      while (v7 != v14);
      v7 = (char *)v5[4];
      v5[4] = v19;
      v5[5] = v10;
      v5[6] = v31;
      if (!v7)
      {
LABEL_42:
        v5[5] = v10;
        v34 = v5[6];
        if ((unint64_t)v10 < v34)
        {
          *v10 = 25;
          v7 = v10 + 1;
          goto LABEL_60;
        }
        v35 = (char *)*v6;
        v36 = &v10[-*v6];
        v37 = (unint64_t)(v36 + 1);
        if ((uint64_t)(v36 + 1) < 0)
          goto LABEL_91;
        v38 = v34 - (_QWORD)v35;
        if (2 * v38 > v37)
          v37 = 2 * v38;
        if (v38 >= 0x3FFFFFFFFFFFFFFFLL)
          v39 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v39 = v37;
        if (v39)
          v40 = operator new(v39);
        else
          v40 = 0;
        v41 = (char *)v40 + v39;
        v36[(_QWORD)v40] = 25;
        v7 = &v36[(_QWORD)v40 + 1];
        if (v10 == v35)
        {
          v5[4] = &v36[(_QWORD)v40];
          v5[5] = v7;
          v5[6] = v41;
        }
        else
        {
          v42 = &v10[~(unint64_t)v35];
          do
          {
            v43 = *--v10;
            (v42--)[(_QWORD)v40] = v43;
          }
          while (v10 != v35);
          v10 = (char *)v5[4];
          v5[4] = v40;
          v5[5] = v7;
          v5[6] = v41;
          if (!v10)
          {
LABEL_60:
            v5[5] = v7;
            v44 = v5[6];
            if ((unint64_t)v7 >= v44)
            {
              v46 = (char *)*v6;
              v47 = &v7[-*v6];
              v48 = (unint64_t)(v47 + 1);
              if ((uint64_t)(v47 + 1) < 0)
LABEL_91:
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              v49 = v44 - (_QWORD)v46;
              if (2 * v49 > v48)
                v48 = 2 * v49;
              if (v49 >= 0x3FFFFFFFFFFFFFFFLL)
                v50 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v50 = v48;
              if (v50)
                v25 = operator new(v50);
              else
                v25 = 0;
              v51 = &v47[(_QWORD)v25];
              v52 = (char *)v25 + v50;
              v47[(_QWORD)v25] = 49;
              v45 = (uint64_t)&v47[(_QWORD)v25 + 1];
              if (v7 != v46)
              {
                v53 = &v7[~(unint64_t)v46];
                do
                {
                  v54 = *--v7;
                  (v53--)[(_QWORD)v25] = v54;
                }
                while (v7 != v46);
LABEL_85:
                v7 = (char *)v5[4];
                v5[4] = v25;
                v5[5] = v45;
                v5[6] = v52;
                if (!v7)
                  goto LABEL_89;
LABEL_88:
                operator delete(v7);
                goto LABEL_89;
              }
LABEL_87:
              v5[4] = v51;
              v5[5] = v45;
              v5[6] = v52;
              goto LABEL_88;
            }
LABEL_61:
            v13 = 49;
            goto LABEL_62;
          }
        }
        operator delete(v10);
        goto LABEL_60;
      }
    }
    operator delete(v7);
    goto LABEL_42;
  }
}

uint64_t SLMorphEng::MorphLookup_Y(SLMorphEng *this, const char *a2, uint64_t a3, SLDictionary *a4, SLTokenBuilder *a5)
{
  size_t v9;
  size_t v10;
  char *v11;
  std::string *p_dst;
  unsigned int v13;
  int v14;
  std::string::value_type v15;
  uint64_t v16;
  uint64_t v17;
  std::string __p;
  std::string __dst;

  v9 = *((_QWORD *)this + 4);
  v10 = a3 - v9;
  std::string::basic_string[abi:ne180100](&__dst, (void *)&a2[a3 - v9], v9);
  v11 = (char *)a5 + 16;
  MEMORY[0x219A06400]((char *)a5 + 16, a2, v10);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_dst = &__dst;
  else
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  v13 = p_dst->__r_.__value_.__s.__data_[0];
  if ((v13 & 0x80000000) != 0)
    v14 = __maskrune(v13, 0x8000uLL);
  else
    v14 = *(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v13 + 60) & 0x8000;
  if (v14)
    v15 = 89;
  else
    v15 = 121;
  std::string::append((std::string *)((char *)a5 + 16), 1uLL, v15);
  if (*((char *)a5 + 39) < 0)
  {
    v11 = (char *)*((_QWORD *)a5 + 2);
    v16 = *((_QWORD *)a5 + 3);
  }
  else
  {
    v16 = *((unsigned __int8 *)a5 + 39);
  }
  if ((**(unsigned int (***)(SLDictionary *, char *, uint64_t, SLTokenBuilder *, SLDictionary *))a4)(a4, v11, v16, a5, a4))
  {
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    else
      __p = __dst;
    v17 = SLMorph::RestoreSuffix((uint64_t)this, (uint64_t)a5, (uint64_t)&__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v17 = 0;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return v17;
}

void sub_216FB419C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t SLMorphEng_S::MorphLookup(SLMorphEng_S *this, const char *a2, uint64_t a3, SLDictionary *a4, SLTokenBuilder *a5)
{
  size_t v9;
  size_t v10;
  char *v11;
  unsigned int v12;
  __darwin_ct_rune_t v13;
  uint64_t v14;
  std::string __p;
  std::string __dst;

  v9 = *((_QWORD *)this + 4);
  v10 = a3 - v9;
  v11 = (char *)&a2[a3 - v9];
  std::string::basic_string[abi:ne180100](&__dst, v11, v9);
  v12 = *(v11 - 1);
  if ((v12 & 0x80000000) != 0)
    v13 = ___toupper_l(v12, *(locale_t *)(*((_QWORD *)this + 5) + 8));
  else
    v13 = *(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v12 + 2108);
  if (v13 == 83 && **((_BYTE **)this + 3) == 83
    || !(**(unsigned int (***)(SLDictionary *, const char *, size_t, SLTokenBuilder *, SLDictionary *))a4)(a4, a2, v10, a5, a4))
  {
    v14 = 0;
  }
  else
  {
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    else
      __p = __dst;
    v14 = SLMorph::RestoreSuffix((uint64_t)this, (uint64_t)a5, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return v14;
}

void sub_216FB42F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void SLMorphEng_S::AddAffix(SLMorphEng_S *this, SLToken *a2)
{
  uint64_t v4;
  unint64_t v5;
  SLWordTagSet *v6;
  uint64_t v7;
  uint64_t v8;
  int v9[4];

  SLMorphEng::Store_S_or_Z(this, a2);
  if (**((_BYTE **)this + 3) == 39)
  {
    v4 = *((_QWORD *)a2 + 10);
    if (*((_QWORD *)a2 + 11) != v4)
    {
      v5 = 0;
      while (1)
      {
        v6 = (SLWordTagSet *)(*(_QWORD *)(v4 + 8 * v5) + 4);
        if (!SLWordTagSet::find(v6, 84))
        {
          v7 = *(unsigned __int16 *)v6;
          if (v7 <= 6)
          {
            v8 = v7 + 1;
            *(_WORD *)v6 = v8;
            *((_WORD *)v6 + v8) = 84;
          }
        }
        if (SLWordTagSet::find((SLWordTagSet *)(*(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v5) + 4), 76))
          break;
        ++v5;
        v4 = *((_QWORD *)a2 + 10);
        if (v5 >= (*((_QWORD *)a2 + 11) - v4) >> 3)
          return;
      }
      v9[0] = 4980737;
      SLToken::SelectHomographs(a2, 0x7FFFFFFF, (const SLWordTagSet *)v9);
    }
  }
}

uint64_t SLMorphEng_ES::MorphLookup(SLMorphEng_ES *this, const char *a2, uint64_t a3, SLDictionary *a4, SLTokenBuilder *a5)
{
  size_t v9;
  unint64_t v10;
  unsigned int v11;
  __darwin_ct_rune_t v12;
  unsigned int v13;
  __darwin_ct_rune_t v14;
  unsigned int v15;
  __darwin_ct_rune_t v16;
  uint64_t v17;
  std::string *v18;
  std::string v20;
  std::string v21;
  std::string __str;
  char v23;

  v9 = *((_QWORD *)this + 4);
  v10 = a3 - v9;
  std::string::basic_string[abi:ne180100](&__str, (void *)&a2[a3 - v9], v9);
  if (v10 >= 3)
  {
    v11 = a2[v10 - 1];
    if ((v11 & 0x80000000) != 0)
      v12 = ___toupper_l(v11, *(locale_t *)(*((_QWORD *)this + 5) + 8));
    else
      v12 = *(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v11 + 2108);
    switch(v12)
    {
      case 'H':
        v13 = a2[v10 - 2];
        if ((v13 & 0x80000000) != 0)
          v14 = ___toupper_l(v13, *(locale_t *)(*((_QWORD *)this + 5) + 8));
        else
          v14 = *(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v13 + 2108);
        if ((v14 | 0x10) == 0x53)
          goto LABEL_21;
        break;
      case 'S':
        v15 = a2[v10 - 2];
        if ((v15 & 0x80000000) != 0)
          v16 = ___toupper_l(v15, *(locale_t *)(*((_QWORD *)this + 5) + 8));
        else
          v16 = *(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v15 + 2108);
        if (v16 == 83)
          goto LABEL_21;
        break;
      case 'X':
        goto LABEL_21;
    }
  }
  if ((**(unsigned int (***)(SLDictionary *, const char *, uint64_t, SLTokenBuilder *, SLDictionary *))a4)(a4, a2, v10 + 1, a5, a4))
  {
    std::string::basic_string(&v21, &__str, 1uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v23);
    v17 = SLMorph::RestoreSuffix((uint64_t)this, (uint64_t)a5, (uint64_t)&v21);
    if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_29;
    v18 = &v21;
    goto LABEL_28;
  }
LABEL_21:
  if (!(**(unsigned int (***)(SLDictionary *, const char *, unint64_t, SLTokenBuilder *, SLDictionary *))a4)(a4, a2, v10, a5, a4))
  {
    v17 = 0;
    goto LABEL_29;
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v20, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
  else
    v20 = __str;
  v17 = SLMorph::RestoreSuffix((uint64_t)this, (uint64_t)a5, (uint64_t)&v20);
  if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_29;
  v18 = &v20;
LABEL_28:
  operator delete(v18->__r_.__value_.__l.__data_);
LABEL_29:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return v17;
}

void sub_216FB4608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

uint64_t SLMorphEng_ES::POSFromSuffix(SLMorphEng_ES *this, SLToken *a2)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;

  v2 = *((_QWORD *)a2 + 10);
  if (*((_QWORD *)a2 + 11) == v2)
    return 0;
  v5 = 0;
  while (1)
  {
    v6 = *(_QWORD *)(v2 + 8 * v5);
    if (!SLWordTagSet::find((SLWordTagSet *)(v6 + 4), 68))
      break;
    ++v5;
    v2 = *((_QWORD *)a2 + 10);
    if (v5 >= (*((_QWORD *)a2 + 11) - v2) >> 3)
      return 0;
  }
  v7 = 1;
  if (*(_DWORD *)v6 == 2)
    v8 = 2;
  else
    v8 = 1;
  *((_DWORD *)this + 15) = v8;
  SLToken::ChooseHomograph(a2, (SLHomograph *)v6);
  v9 = *((_DWORD *)this + 15);
  if (v9 != 16499)
    *(_DWORD *)v6 = v9;
  return v7;
}

uint64_t SLMorphEng_IES::MorphLookup(SLMorphEng_IES *this, const char *a2, uint64_t a3, SLDictionary *a4, SLTokenBuilder *a5)
{
  uint64_t v10;
  size_t v11;
  size_t v12;
  std::string __p;
  std::string __dst;

  if ((SLMorphEng::MorphLookup_Y(this, a2, a3, a4, a5) & 1) != 0)
    return 1;
  v11 = *((_QWORD *)this + 4) - 2;
  v12 = a3 - v11;
  std::string::basic_string[abi:ne180100](&__dst, (void *)&a2[v12], v11);
  if ((**(unsigned int (***)(SLDictionary *, const char *, size_t, SLTokenBuilder *, SLDictionary *))a4)(a4, a2, v12, a5, a4))
  {
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    else
      __p = __dst;
    v10 = SLMorph::RestoreSuffix((uint64_t)this, (uint64_t)a5, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v10 = 0;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return v10;
}

void sub_216FB47E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t SLMorphEng_E::MorphLookup(SLMorphEng_E *this, const char *a2, uint64_t a3, SLDictionary *a4, SLTokenBuilder *a5)
{
  size_t v9;
  unint64_t v10;
  char *v11;
  std::string *p_dst;
  unsigned int v13;
  uint64_t v14;
  int v15;
  std::string::value_type v16;
  unint64_t v17;
  unsigned int v18;
  __darwin_ct_rune_t v19;
  unsigned int v20;
  unint64_t v21;
  BOOL v22;
  int v23;
  unsigned int v25;
  __darwin_ct_rune_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  __darwin_ct_rune_t v30;
  char v31;
  char v32;
  std::string __p;
  std::string v35;
  std::string __dst;

  v9 = *((_QWORD *)this + 4);
  v10 = a3 - v9;
  std::string::basic_string[abi:ne180100](&__dst, (void *)&a2[a3 - v9], v9);
  v11 = (char *)a5 + 16;
  MEMORY[0x219A06400]((char *)a5 + 16, a2, v10);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_dst = &__dst;
  else
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  v13 = p_dst->__r_.__value_.__s.__data_[0];
  v14 = MEMORY[0x24BDAC740];
  if ((v13 & 0x80000000) != 0)
    v15 = __maskrune(v13, 0x8000uLL);
  else
    v15 = *(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v13 + 60) & 0x8000;
  if (v15)
    v16 = 69;
  else
    v16 = 101;
  std::string::append((std::string *)((char *)a5 + 16), 1uLL, v16);
  v17 = v10 - 1;
  v18 = a2[v10 - 1];
  if ((v18 & 0x80000000) != 0)
    v19 = ___toupper_l(v18, *(locale_t *)(*((_QWORD *)this + 5) + 8));
  else
    v19 = *(_DWORD *)(v14 + 4 * v18 + 2108);
  HIDWORD(v21) = v19 - 65;
  LODWORD(v21) = v19 - 65;
  v20 = v21 >> 1;
  v22 = v20 > 0xA;
  v23 = (1 << v20) & 0x495;
  if (v22 || v23 == 0)
  {
    if (*((char *)a5 + 39) < 0)
    {
      v11 = (char *)*((_QWORD *)a5 + 2);
      v28 = *((_QWORD *)a5 + 3);
    }
    else
    {
      v28 = *((unsigned __int8 *)a5 + 39);
    }
    if ((**(unsigned int (***)(SLDictionary *, char *, uint64_t, SLTokenBuilder *, SLDictionary *))a4)(a4, v11, v28, a5, a4))
    {
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v35, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      else
        v35 = __dst;
      v31 = SLMorph::RestoreSuffix((uint64_t)this, (uint64_t)a5, (uint64_t)&v35, 1);
      v32 = v31;
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v35.__r_.__value_.__l.__data_);
        if ((v32 & 1) != 0)
        {
LABEL_46:
          v27 = 1;
          goto LABEL_52;
        }
      }
      else if ((v31 & 1) != 0)
      {
        goto LABEL_46;
      }
    }
  }
  v25 = a2[v17];
  if ((v25 & 0x80000000) != 0)
    v26 = ___toupper_l(a2[v17], *(locale_t *)(*((_QWORD *)this + 5) + 8));
  else
    v26 = *(_DWORD *)(v14 + 4 * v25 + 2108);
  if ((v26 - 65) > 0x14)
    goto LABEL_35;
  if (((1 << (v26 - 65)) & 0x104931) != 0)
    goto LABEL_22;
  if (v26 == 83)
  {
    if (v10 >= 2)
    {
      v29 = a2[v10 - 2];
      v30 = (v29 & 0x80000000) != 0
          ? ___toupper_l(v29, *(locale_t *)(*((_QWORD *)this + 5) + 8))
          : *(_DWORD *)(v14 + 4 * v29 + 2108);
      if (v30 != 83 && (v30 != 85 || v10 <= 2))
        goto LABEL_51;
    }
  }
  else
  {
LABEL_35:
    if (v10 >= 3 && a2[v10 - 2] == v25)
    {
      std::string::insert(&__dst, 0, 1uLL, v25);
      --v10;
    }
  }
LABEL_22:
  if (!(**(unsigned int (***)(SLDictionary *, const char *, unint64_t, SLTokenBuilder *, SLDictionary *))a4)(a4, a2, v10, a5, a4))
  {
LABEL_51:
    v27 = 0;
    goto LABEL_52;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  else
    __p = __dst;
  v27 = SLMorph::RestoreSuffix((uint64_t)this, (uint64_t)a5, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_52:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return v27;
}

void sub_216FB4B1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t SLMorphEng_ED::POSFromSuffix(SLMorphEng_ED *this, SLToken *a2)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v2 = *((_QWORD *)a2 + 10);
  if (*((_QWORD *)a2 + 11) == v2)
    return 0;
  v5 = 0;
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD *)(v2 + 8 * v5);
    if (!SLWordTagSet::find((SLWordTagSet *)(v7 + 4), 68) && !SLWordTagSet::find((SLWordTagSet *)(v7 + 4), 64))
    {
      if (!v6)
        v6 = v7;
      if ((*(_BYTE *)v7 & 2) != 0)
        break;
    }
    ++v5;
    v2 = *((_QWORD *)a2 + 10);
    if (v5 >= (*((_QWORD *)a2 + 11) - v2) >> 3)
    {
      v7 = v6;
      if (!v6)
        return 0;
      break;
    }
  }
  SLToken::ChooseHomograph(a2, (SLHomograph *)v7);
  v8 = *((_DWORD *)this + 15);
  if (v8 != 16499)
    *(_DWORD *)v7 = v8;
  return 1;
}

void SLMorphEng_ISH::SLMorphEng_ISH(SLMorphEng_ISH *this, const SLMorphTraits *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v8 = 423362563;
  v9 = 44;
  *(_QWORD *)SLMorph::SLMorph((uint64_t)this, "ISH", (uint64_t)&v8, (uint64_t)a2, 64, 16499, 0, a8) = &off_24D671FB8;
}

void SLMorphEng_ISH::~SLMorphEng_ISH(SLMorphEng_ISH *this)
{
  SLDictionary::~SLDictionary(this);
  JUMPOUT(0x219A0649CLL);
}

uint64_t SLMorphEng_IER::POSFromSuffix(SLMorphEng_IER *this, SLToken *a2)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  int v8;
  int v9;

  v2 = *((_QWORD *)a2 + 10);
  if (*((_QWORD *)a2 + 11) == v2)
    return 0;
  v5 = 0;
  while (1)
  {
    v6 = *(_QWORD *)(v2 + 8 * v5);
    if (!SLWordTagSet::find((SLWordTagSet *)(v6 + 4), 68) && !SLWordTagSet::find((SLWordTagSet *)(v6 + 4), 64))
      break;
    ++v5;
    v2 = *((_QWORD *)a2 + 10);
    if (v5 >= (*((_QWORD *)a2 + 11) - v2) >> 3)
      return 0;
  }
  if ((*(_DWORD *)v6 & 2) == 0 || (*(_DWORD *)v6 & 1) != 0)
    v8 = 64;
  else
    v8 = 1;
  *((_DWORD *)this + 15) = v8;
  SLToken::ChooseHomograph(a2, (SLHomograph *)v6);
  v9 = *((_DWORD *)this + 15);
  if (v9 != 16499)
    *(_DWORD *)v6 = v9;
  return 1;
}

char *SLMorphEng_ILY::AddAffix(char *this, SLToken *a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;

  v2 = *((_QWORD *)a2 + 10);
  if (*((_QWORD *)a2 + 11) != v2)
  {
    v4 = (uint64_t)this;
    v5 = 0;
    v6 = this + 50;
    do
    {
      v7 = *(_QWORD *)(v2 + 8 * v5);
      v8 = *(char **)(v7 + 40);
      if (*(v8 - 1) == 3)
      {
        *(v8 - 1) = 25;
        v8 = *(char **)(v7 + 40);
      }
      this = std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(v7 + 32, v8, v6, &v6[*(__int16 *)(v4 + 48)], *(__int16 *)(v4 + 48));
      ++v5;
      v2 = *((_QWORD *)a2 + 10);
    }
    while (v5 < (*((_QWORD *)a2 + 11) - v2) >> 3);
  }
  return this;
}

uint64_t SLMorphEng_BLY::MorphLookup(SLMorphEng_BLY *this, const char *a2, uint64_t a3, SLDictionary *a4, SLTokenBuilder *a5)
{
  char *v10;
  unsigned int v11;
  int v12;
  char v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char v17;
  uint64_t v18;
  char *v19;
  uint64_t result;
  uint64_t v21;

  v10 = (char *)a5 + 16;
  MEMORY[0x219A06400]((char *)a5 + 16);
  v11 = a2[a3 - 1];
  if ((v11 & 0x80000000) != 0)
    v12 = __maskrune(v11, 0x8000uLL);
  else
    v12 = *(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v11 + 60) & 0x8000;
  if (v12)
    v13 = 69;
  else
    v13 = 101;
  if (*((char *)a5 + 39) < 0)
  {
    v15 = (char *)*((_QWORD *)a5 + 2);
    v14 = *((_QWORD *)a5 + 3);
  }
  else
  {
    v14 = *((unsigned __int8 *)a5 + 39);
    v15 = v10;
  }
  v16 = &v15[v14];
  v17 = *(v16 - 1);
  *(v16 - 1) = v13;
  if (*((char *)a5 + 39) < 0)
  {
    v19 = (char *)*((_QWORD *)a5 + 2);
    v18 = *((_QWORD *)a5 + 3);
  }
  else
  {
    v18 = *((unsigned __int8 *)a5 + 39);
    v19 = v10;
  }
  result = (**(uint64_t (***)(SLDictionary *, char *, uint64_t, SLTokenBuilder *, SLDictionary *))a4)(a4, v19, v18, a5, a4);
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(SLMorphEng_BLY *, _QWORD))(*(_QWORD *)this + 48))(this, *((_QWORD *)a5 + 5));
    if ((_DWORD)result)
    {
      if (*((char *)a5 + 39) < 0)
      {
        v10 = (char *)*((_QWORD *)a5 + 2);
        v21 = *((_QWORD *)a5 + 3);
      }
      else
      {
        v21 = *((unsigned __int8 *)a5 + 39);
      }
      v10[v21 - 1] = v17;
      return 1;
    }
  }
  return result;
}

char *SLMorphEng_BLY::AddAffix(char *this, SLToken *a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;

  v2 = *((_QWORD *)a2 + 10);
  if (*((_QWORD *)a2 + 11) != v2)
  {
    v4 = (uint64_t)this;
    v5 = 0;
    v6 = this + 50;
    do
    {
      v7 = *(_QWORD *)(v2 + 8 * v5);
      v8 = *(char **)(v7 + 40);
      if ((unint64_t)&v8[-*(_QWORD *)(v7 + 32)] >= 2 && *(v8 - 2) == 11)
      {
        *(v8 - 2) = 60;
        v8 = *(char **)(v7 + 40);
      }
      this = std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(v7 + 32, v8, v6, &v6[*(__int16 *)(v4 + 48)], *(__int16 *)(v4 + 48));
      ++v5;
      v2 = *((_QWORD *)a2 + 10);
    }
    while (v5 < (*((_QWORD *)a2 + 11) - v2) >> 3);
  }
  return this;
}

uint64_t SLMorphEng_UM::MorphLookup(SLMorphEng_UM *this, const char *a2, uint64_t a3, SLDictionary *a4, SLTokenBuilder *a5)
{
  size_t v9;
  size_t v10;
  char *v11;
  std::string *p_dst;
  unsigned int v13;
  int v14;
  const std::string::value_type *v15;
  uint64_t v16;
  uint64_t v17;
  std::string __p;
  std::string __dst;

  v9 = *((_QWORD *)this + 4);
  v10 = a3 - v9;
  std::string::basic_string[abi:ne180100](&__dst, (void *)&a2[a3 - v9], v9);
  v11 = (char *)a5 + 16;
  MEMORY[0x219A06400]((char *)a5 + 16, a2, v10);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_dst = &__dst;
  else
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  v13 = p_dst->__r_.__value_.__s.__data_[0];
  if ((v13 & 0x80000000) != 0)
    v14 = __maskrune(v13, 0x8000uLL);
  else
    v14 = *(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v13 + 60) & 0x8000;
  if (v14)
    v15 = "UM";
  else
    v15 = "um";
  std::string::append((std::string *)((char *)a5 + 16), v15);
  if (*((char *)a5 + 39) < 0)
  {
    v11 = (char *)*((_QWORD *)a5 + 2);
    v16 = *((_QWORD *)a5 + 3);
  }
  else
  {
    v16 = *((unsigned __int8 *)a5 + 39);
  }
  if ((**(unsigned int (***)(SLDictionary *, char *, uint64_t, SLTokenBuilder *, SLDictionary *))a4)(a4, v11, v16, a5, a4))
  {
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    else
      __p = __dst;
    v17 = SLMorph::RestoreSuffix((uint64_t)this, (uint64_t)a5, (uint64_t)&__p, 2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v17 = 0;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return v17;
}

void sub_216FB5154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

char *SLMorphEng_UM::AddAffix(char *this, SLToken *a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *((_QWORD *)a2 + 10);
  v2 = *((_QWORD *)a2 + 11);
  if (v2 != v3)
  {
    v5 = this;
    v6 = 0;
    v7 = this + 50;
    do
    {
      v8 = *(_QWORD *)(v3 + 8 * v6);
      this = (char *)(v8 + 32);
      v9 = *(_QWORD *)(v8 + 40);
      if ((unint64_t)(v9 - *(_QWORD *)(v8 + 32)) >= 2)
      {
        *(_QWORD *)(v8 + 40) = v9 - 2;
        this = std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>((uint64_t)this, (char *)(v9 - 2), v7, &v7[*((__int16 *)v5 + 24)], *((__int16 *)v5 + 24));
        v3 = *((_QWORD *)a2 + 10);
        v2 = *((_QWORD *)a2 + 11);
      }
      ++v6;
    }
    while (v6 < (v2 - v3) >> 3);
  }
  return this;
}

uint64_t SLMorphEng_CALLY::MorphLookup(SLMorphEng_CALLY *this, const char *a2, uint64_t a3, SLDictionary *a4, SLTokenBuilder *a5)
{
  size_t v9;
  size_t v10;
  uint64_t v11;
  std::string __p;
  std::string __dst;

  v9 = *((_QWORD *)this + 4) - 1;
  v10 = a3 - v9;
  std::string::basic_string[abi:ne180100](&__dst, (void *)&a2[a3 - v9], v9);
  if ((**(unsigned int (***)(SLDictionary *, const char *, size_t, SLTokenBuilder *, SLDictionary *))a4)(a4, a2, v10, a5, a4))
  {
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    else
      __p = __dst;
    v11 = SLMorph::RestoreSuffix((uint64_t)this, (uint64_t)a5, (uint64_t)&__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v11 = 0;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return v11;
}

void sub_216FB52F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t SLMorphEng_OR::MorphLookup(SLMorphEng_OR *this, const char *a2, uint64_t a3, SLDictionary *a4, SLTokenBuilder *a5)
{
  size_t v9;
  size_t v10;
  char *v11;
  std::string *p_dst;
  unsigned int v13;
  int v14;
  std::string::value_type v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  std::string __p;
  std::string v22;
  std::string __dst;

  v9 = *((_QWORD *)this + 4);
  v10 = a3 - v9;
  std::string::basic_string[abi:ne180100](&__dst, (void *)&a2[a3 - v9], v9);
  v11 = (char *)a5 + 16;
  MEMORY[0x219A06400]((char *)a5 + 16, a2, v10);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_dst = &__dst;
  else
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  v13 = p_dst->__r_.__value_.__s.__data_[0];
  if ((v13 & 0x80000000) != 0)
    v14 = __maskrune(v13, 0x8000uLL);
  else
    v14 = *(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v13 + 60) & 0x8000;
  if (v14)
    v15 = 69;
  else
    v15 = 101;
  std::string::append((std::string *)((char *)a5 + 16), 1uLL, v15);
  if (*((char *)a5 + 39) < 0)
  {
    v11 = (char *)*((_QWORD *)a5 + 2);
    v16 = *((_QWORD *)a5 + 3);
  }
  else
  {
    v16 = *((unsigned __int8 *)a5 + 39);
  }
  if ((**(unsigned int (***)(SLDictionary *, char *, uint64_t, SLTokenBuilder *, SLDictionary *))a4)(a4, v11, v16, a5, a4))
  {
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v22, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    else
      v22 = __dst;
    v17 = SLMorph::RestoreSuffix((uint64_t)this, (uint64_t)a5, (uint64_t)&v22, 1);
    v18 = v17;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v22.__r_.__value_.__l.__data_);
      if ((v18 & 1) != 0)
        goto LABEL_19;
    }
    else if ((v17 & 1) != 0)
    {
LABEL_19:
      v19 = 1;
      goto LABEL_28;
    }
  }
  if ((**(unsigned int (***)(SLDictionary *, const char *, size_t, SLTokenBuilder *, SLDictionary *))a4)(a4, a2, v10, a5, a4))
  {
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    else
      __p = __dst;
    v19 = SLMorph::RestoreSuffix((uint64_t)this, (uint64_t)a5, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v19 = 0;
  }
LABEL_28:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return v19;
}

void sub_216FB5518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a14 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t SLMorphEng_Elvis::MorphLookup(SLMorphEng_Elvis *this, const char *a2, unint64_t a3, SLDictionary *a4, SLTokenBuilder *a5)
{
  std::string *v9;
  std::string::value_type v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  std::string *v14;
  uint64_t result;
  uint64_t v16;

  v9 = (std::string *)((char *)a5 + 16);
  MEMORY[0x219A06400]((char *)a5 + 16, a2, a3 - 1);
  if (a3 >= 2)
  {
    v11 = a2[a3 - 2];
    if ((v11 & 0x80000000) != 0)
      v12 = __maskrune(v11, 0x8000uLL);
    else
      v12 = *(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v11 + 60) & 0x8000;
    if (v12)
      v10 = 71;
    else
      v10 = 103;
  }
  else
  {
    v10 = 71;
  }
  std::string::append(v9, 1uLL, v10);
  if (*((char *)a5 + 39) < 0)
  {
    v14 = (std::string *)*((_QWORD *)a5 + 2);
    v13 = *((_QWORD *)a5 + 3);
  }
  else
  {
    v13 = *((unsigned __int8 *)a5 + 39);
    v14 = v9;
  }
  result = (**(uint64_t (***)(SLDictionary *, std::string *, uint64_t, SLTokenBuilder *, SLDictionary *))a4)(a4, v14, v13, a5, a4);
  if ((_DWORD)result)
  {
    if (*((char *)a5 + 39) < 0)
    {
      v9 = (std::string *)*((_QWORD *)a5 + 2);
      v16 = *((_QWORD *)a5 + 3);
    }
    else
    {
      v16 = *((unsigned __int8 *)a5 + 39);
    }
    v9->__r_.__value_.__s.__data_[v16 - 1] = 39;
  }
  return result;
}

uint64_t SLMorphEng_Elvis::POSFromSuffix(SLMorphEng_Elvis *this, SLToken *a2)
{
  return 1;
}

void SLMorphEng_Elvis::AddAffix(SLMorphEng_Elvis *this, SLToken *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  int v8;

  v2 = *((_QWORD *)a2 + 10);
  if (*((_QWORD *)a2 + 11) != v2)
  {
    v3 = 0;
    do
    {
      v4 = *(_QWORD *)(v2 + 8 * v3);
      v5 = *(_QWORD *)(v4 + 40);
      if ((unint64_t)(v5 - *(_QWORD *)(v4 + 32)) >= 2 && *(_BYTE *)(v5 - 1) == 37)
      {
        *(_BYTE *)(v5 - 1) = 36;
        v6 = *(_QWORD *)(v4 + 40);
        v8 = *(unsigned __int8 *)(v6 - 2);
        v7 = (_BYTE *)(v6 - 2);
        if (v8 == 4)
          *v7 = 25;
      }
      ++v3;
      v2 = *((_QWORD *)a2 + 10);
    }
    while (v3 < (*((_QWORD *)a2 + 11) - v2) >> 3);
  }
}

uint64_t SLMorphEng_Apostrophe::AddAffix(uint64_t this, SLToken *a2)
{
  uint64_t v3;
  unint64_t v4;
  SLWordTagSet *v5;
  uint64_t v6;
  uint64_t v7;

  if (**(_BYTE **)(this + 24) == 83)
  {
    v3 = *((_QWORD *)a2 + 10);
    if (*((_QWORD *)a2 + 11) != v3)
    {
      v4 = 0;
      do
      {
        v5 = (SLWordTagSet *)(*(_QWORD *)(v3 + 8 * v4) + 4);
        this = SLWordTagSet::find(v5, 84);
        if ((this & 1) == 0)
        {
          v6 = *(unsigned __int16 *)v5;
          if (v6 <= 6)
          {
            v7 = v6 + 1;
            *(_WORD *)v5 = v7;
            *((_WORD *)v5 + v7) = 84;
          }
        }
        ++v4;
        v3 = *((_QWORD *)a2 + 10);
      }
      while (v4 < (*((_QWORD *)a2 + 11) - v3) >> 3);
    }
  }
  return this;
}

BOOL SLMorphEng_Saur::Match(SLMorphEng_Saur *this, const char *a2, unint64_t a3)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 4);
  return v3 + 4 <= a3 && *(_DWORD *)&a2[a3 - v3 - 4] == 1381318995 && SLMorph::Match(this, a2, a3);
}

char *SLMorphEng_Saur::AddAffix(char *this, SLToken *a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char v11;

  v2 = *((_QWORD *)a2 + 10);
  if (*((_QWORD *)a2 + 11) != v2)
  {
    v4 = (uint64_t)this;
    v5 = 0;
    v6 = this + 50;
    do
    {
      v7 = *(_QWORD *)(v2 + 8 * v5);
      v8 = *(char **)(v7 + 40);
      if (*(v8 - 2) == 9)
      {
        v9 = (char *)memchr(*(void **)(v7 + 32), 1, (size_t)&v8[-*(_QWORD *)(v7 + 32) - 2]);
        if (v9)
          v10 = v9;
        else
          v10 = v8 - 2;
        if (v10 != v8)
        {
          *v10 = 58;
          v8 = *(char **)(v7 + 40);
        }
        v11 = 1;
        std::vector<unsigned char>::insert((_QWORD *)(v7 + 32), v8 - 2, &v11);
        v8 = *(char **)(v7 + 40);
      }
      this = std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(v7 + 32, v8, v6, &v6[*(__int16 *)(v4 + 48)], *(__int16 *)(v4 + 48));
      ++v5;
      v2 = *((_QWORD *)a2 + 10);
    }
    while (v5 < (*((_QWORD *)a2 + 11) - v2) >> 3);
  }
  return this;
}

char *std::vector<unsigned char>::insert(_QWORD *a1, char *__src, char *a3)
{
  char *v4;
  char *v6;
  unint64_t v7;
  char *v8;
  _BYTE *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char v20;
  _BYTE *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v27;
  char *v28;
  void *__dst;
  char *v30;
  _QWORD *v31;

  v4 = __src;
  v6 = (char *)a1[1];
  v7 = a1[2];
  if ((unint64_t)v6 >= v7)
  {
    v10 = (char *)*a1;
    v11 = (uint64_t)&v6[-*a1 + 1];
    if (v11 < 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v12 = (char *)(__src - v10);
    v13 = v7 - (_QWORD)v10;
    if (2 * v13 > v11)
      v11 = 2 * v13;
    if (v13 >= 0x3FFFFFFFFFFFFFFFLL)
      v14 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    v31 = a1 + 2;
    if (v14)
      v15 = (char *)operator new(v14);
    else
      v15 = 0;
    v27 = v15;
    v28 = &v12[(_QWORD)v15];
    __dst = &v12[(_QWORD)v15];
    v30 = &v15[v14];
    std::__split_buffer<unsigned char>::push_back((uint64_t)&v27, a3);
    v16 = v28;
    v17 = (char *)*a1;
    v18 = v28;
    if ((char *)*a1 != v4)
    {
      v19 = v4;
      v18 = v28;
      do
      {
        v20 = *--v19;
        *--v18 = v20;
      }
      while (v19 != v17);
    }
    v28 = v18;
    v21 = (_BYTE *)a1[1];
    v22 = (char *)__dst;
    v23 = v21 - v4;
    if (v21 != v4)
    {
      memmove(__dst, v4, v21 - v4);
      v18 = v28;
      v4 = (char *)a1[1];
    }
    v24 = (char *)*a1;
    *a1 = v18;
    a1[1] = &v22[v23];
    v25 = (char *)a1[2];
    a1[2] = v30;
    __dst = v4;
    v30 = v25;
    v27 = v24;
    v28 = v24;
    if (v4 != v24)
      __dst = v24;
    if (v24)
      operator delete(v24);
    return v16;
  }
  else if (__src == v6)
  {
    *__src = *a3;
    a1[1] = __src + 1;
  }
  else
  {
    v8 = __src + 1;
    if (v6)
    {
      *v6 = *(v6 - 1);
      v9 = v6 + 1;
    }
    else
    {
      v9 = 0;
    }
    a1[1] = v9;
    if (v6 != v8)
      memmove(__src + 1, __src, v6 - v8);
    *v4 = *a3;
  }
  return v4;
}

void sub_216FB5A38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SLMorphEng_BILITY::MorphLookup(SLMorphEng_BILITY *this, const char *a2, uint64_t a3, SLDictionary *a4, SLTokenBuilder *a5)
{
  size_t v9;
  size_t v10;
  char *v11;
  const char *v12;
  unsigned int v13;
  int v14;
  std::string::value_type v15;
  uint64_t v16;
  uint64_t v17;
  std::string __p;
  std::string __dst;

  v9 = *((_QWORD *)this + 4) - 1;
  v10 = a3 - v9;
  std::string::basic_string[abi:ne180100](&__dst, (void *)&a2[a3 - v9], v9);
  v11 = (char *)a5 + 16;
  MEMORY[0x219A06400]((char *)a5 + 16, a2, v10);
  v12 = &a2[v10];
  std::string::append((std::string *)((char *)a5 + 16), 1uLL, v12[1]);
  v13 = v12[2];
  if ((v13 & 0x80000000) != 0)
    v14 = __maskrune(v13, 0x8000uLL);
  else
    v14 = *(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v13 + 60) & 0x8000;
  if (v14)
    v15 = 69;
  else
    v15 = 101;
  std::string::append((std::string *)((char *)a5 + 16), 1uLL, v15);
  if (*((char *)a5 + 39) < 0)
  {
    v11 = (char *)*((_QWORD *)a5 + 2);
    v16 = *((_QWORD *)a5 + 3);
  }
  else
  {
    v16 = *((unsigned __int8 *)a5 + 39);
  }
  if ((**(unsigned int (***)(SLDictionary *, char *, uint64_t, SLTokenBuilder *, SLDictionary *))a4)(a4, v11, v16, a5, a4))
  {
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    else
      __p = __dst;
    v17 = SLMorph::RestoreSuffix((uint64_t)this, (uint64_t)a5, (uint64_t)&__p, 2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v17 = 0;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return v17;
}

void sub_216FB5BC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

BOOL SLMorphEng_BILITY::POSFromSuffix(SLMorphEng_BILITY *this, SLToken *a2)
{
  char *v2;
  char *v3;
  unint64_t v6;
  char *v7;
  SLHomograph *v8;
  uint64_t v9;
  _BYTE *v10;
  int v11;
  int v12;
  BOOL v13;
  int64_t v14;

  v3 = (char *)*((_QWORD *)a2 + 10);
  v2 = (char *)*((_QWORD *)a2 + 11);
  if (v2 == v3)
  {
    v3 = (char *)*((_QWORD *)a2 + 11);
  }
  else
  {
    v6 = 0;
    do
    {
      v7 = &v3[8 * v6];
      v8 = *(SLHomograph **)v7;
      if ((*((_DWORD *)this + 16) & **(_DWORD **)v7) != 0
        && *((_QWORD *)v8 + 5) - *((_QWORD *)v8 + 4) > 5uLL
        && ((v9 = *((_QWORD *)v8 + 5), v12 = *(unsigned __int8 *)(v9 - 4), v10 = (_BYTE *)(v9 - 4), v11 = v12, v12 != 25)
          ? (v13 = v11 == 11)
          : (v13 = 1),
            v13 && v10[1] == 47 && v10[2] == 11 && v10[3] == 33))
      {
        *(_DWORD *)v8 = *((_DWORD *)this + 15);
        ++v6;
      }
      else
      {
        v14 = v2 - (v7 + 8);
        if (v2 != v7 + 8)
          memmove(v7, v7 + 8, v2 - (v7 + 8));
        *((_QWORD *)a2 + 11) = &v7[v14];
        SLHomograph::~SLHomograph(v8);
        MEMORY[0x219A0649C]();
      }
      v3 = (char *)*((_QWORD *)a2 + 10);
      v2 = (char *)*((_QWORD *)a2 + 11);
    }
    while (v6 < (v2 - v3) >> 3);
  }
  return v3 != v2;
}

char *SLMorphEng_BILITY::AddAffix(char *this, SLToken *a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  v2 = *((_QWORD *)a2 + 10);
  if (*((_QWORD *)a2 + 11) != v2)
  {
    v4 = (uint64_t)this;
    v5 = 0;
    v6 = this + 50;
    do
    {
      v7 = *(_QWORD *)(v2 + 8 * v5);
      v8 = *(_QWORD *)(v7 + 32);
      v9 = *(_QWORD *)(v7 + 40);
      v10 = v9;
      while (v10 != v8)
      {
        v11 = *(unsigned __int8 *)--v10;
        if (v11 == 1)
        {
          v12 = v10 + 1;
          goto LABEL_8;
        }
      }
      v12 = *(_QWORD *)(v7 + 32);
LABEL_8:
      if (v12 != v8)
      {
        *(_BYTE *)(v12 - 1) = 58;
        v9 = *(_QWORD *)(v7 + 40);
      }
      *(_QWORD *)(v7 + 40) = v9 - 3;
      this = std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(v7 + 32, (char *)(v9 - 3), v6, &v6[*(__int16 *)(v4 + 48)], *(__int16 *)(v4 + 48));
      ++v5;
      v2 = *((_QWORD *)a2 + 10);
    }
    while (v5 < (*((_QWORD *)a2 + 11) - v2) >> 3);
  }
  return this;
}

uint64_t SLMorphEng_ITOUS::MorphLookup(SLMorphEng_ITOUS *this, const char *a2, uint64_t a3, SLDictionary *a4, SLTokenBuilder *a5)
{
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  unsigned int v13;
  int v14;
  std::string::value_type v15;
  uint64_t v16;
  uint64_t v17;
  std::string __p;
  std::string __dst;

  v9 = *((_QWORD *)this + 4) - 2;
  v10 = a3 - v9;
  v11 = (char *)&a2[a3 - v9];
  std::string::basic_string[abi:ne180100](&__dst, v11, v9);
  v12 = (char *)a5 + 16;
  MEMORY[0x219A06400]((char *)a5 + 16, a2, v10);
  v13 = *v11;
  if ((v13 & 0x80000000) != 0)
    v14 = __maskrune(v13, 0x8000uLL);
  else
    v14 = *(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v13 + 60) & 0x8000;
  if (v14)
    v15 = 89;
  else
    v15 = 121;
  std::string::append((std::string *)((char *)a5 + 16), 1uLL, v15);
  if (*((char *)a5 + 39) < 0)
  {
    v12 = (char *)*((_QWORD *)a5 + 2);
    v16 = *((_QWORD *)a5 + 3);
  }
  else
  {
    v16 = *((unsigned __int8 *)a5 + 39);
  }
  if ((**(unsigned int (***)(SLDictionary *, char *, uint64_t, SLTokenBuilder *, SLDictionary *))a4)(a4, v12, v16, a5, a4))
  {
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    else
      __p = __dst;
    v17 = SLMorph::RestoreSuffix((uint64_t)this, (uint64_t)a5, (uint64_t)&__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v17 = 0;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return v17;
}

void sub_216FB5F5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void SLMorphEng_ITOUS::AddAffix(SLMorphEng_ITOUS *this, SLToken *a2)
{
  uint64_t v2;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  unint64_t v12;
  size_t v13;
  char *v14;
  char *v15;
  _BYTE *v16;
  _BYTE *v17;
  char v18;

  v2 = *((_QWORD *)a2 + 10);
  if (*((_QWORD *)a2 + 11) != v2)
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD **)(v2 + 8 * v4);
      *(_BYTE *)(v5[5] - 1) = 25;
      v7 = (_BYTE *)v5[5];
      v6 = v5[6];
      if ((unint64_t)v7 >= v6)
      {
        v9 = v5[4];
        v10 = &v7[-v9];
        v11 = (uint64_t)&v7[-v9 + 1];
        if (v11 < 0)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v12 = v6 - v9;
        if (2 * v12 > v11)
          v11 = 2 * v12;
        if (v12 >= 0x3FFFFFFFFFFFFFFFLL)
          v13 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v13 = v11;
        if (v13)
          v14 = (char *)operator new(v13);
        else
          v14 = 0;
        v15 = &v10[(_QWORD)v14];
        v16 = &v10[(_QWORD)v14];
        *v16 = 42;
        v8 = v16 + 1;
        if (v7 != (_BYTE *)v9)
        {
          v17 = &v7[~v9];
          do
          {
            v18 = *--v7;
            (v17--)[(_QWORD)v14] = v18;
          }
          while (v7 != (_BYTE *)v9);
          v7 = (_BYTE *)v5[4];
          v15 = v14;
        }
        v5[4] = v15;
        v5[5] = v8;
        v5[6] = &v14[v13];
        if (v7)
          operator delete(v7);
      }
      else
      {
        *v7 = 42;
        v8 = v7 + 1;
      }
      v5[5] = v8;
      ++v4;
      v2 = *((_QWORD *)a2 + 10);
    }
    while (v4 < (*((_QWORD *)a2 + 11) - v2) >> 3);
  }
}

uint64_t SLMorphEng_Tion::SLMorphEng_Tion(uint64_t a1, const char *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  _QWORD *v11;
  __int16 v12;

  v11 = (_QWORD *)SLMorph::SLMorph(a1, a2, a3, a6, 1, a7, 0, a8);
  *v11 = &off_24D672020;
  v11[11] = a4;
  *(_QWORD *)(a1 + 96) = strlen(a4);
  v12 = *(_WORD *)(a5 + 8);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)a5;
  *(_WORD *)(a1 + 112) = v12;
  *(_BYTE *)(a1 + 114) = memchr((void *)(a1 + 50), 1, *(__int16 *)(a1 + 48)) != 0;
  return a1;
}

BOOL SLMorphEng_Tion::Match(SLMorphEng_Tion *this, const char *a2, unint64_t a3)
{
  unint64_t v3;

  v3 = *((_QWORD *)this + 4);
  return v3 < a3
      && strncasecmp_l(&a2[a3 - v3], *((const char **)this + 3), v3 - 4, *(locale_t *)(*((_QWORD *)this + 5) + 8)) == 0;
}

uint64_t SLMorphEng_Tion::MorphLookup(SLMorphEng_Tion *this, const char *a2, uint64_t a3, SLDictionary *a4, SLTokenBuilder *a5)
{
  size_t v9;
  size_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  std::string __p;
  std::string __dst;

  v9 = *((_QWORD *)this + 4);
  v10 = a3 - v9;
  std::string::basic_string[abi:ne180100](&__dst, (void *)&a2[a3 - v9], v9);
  v11 = (char *)a5 + 16;
  MEMORY[0x219A06400]((char *)a5 + 16, a2, v10);
  std::string::append((std::string *)((char *)a5 + 16), *((const std::string::value_type **)this + 11), *((_QWORD *)this + 12));
  if (*((char *)a5 + 39) < 0)
  {
    v11 = (char *)*((_QWORD *)a5 + 2);
    v12 = *((_QWORD *)a5 + 3);
  }
  else
  {
    v12 = *((unsigned __int8 *)a5 + 39);
  }
  if ((**(unsigned int (***)(SLDictionary *, char *, uint64_t, SLTokenBuilder *, SLDictionary *))a4)(a4, v11, v12, a5, a4))
  {
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    else
      __p = __dst;
    v13 = SLMorph::RestoreSuffix((uint64_t)this, (uint64_t)a5, (uint64_t)&__p, *((_DWORD *)this + 24));
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v13 = 0;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return v13;
}

void sub_216FB62B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

BOOL SLMorphEng_Tion::POSFromSuffix(SLMorphEng_Tion *this, SLToken *a2)
{
  char *v2;
  char *v3;
  unint64_t v6;
  char *v7;
  SLHomograph **v8;
  SLHomograph *v9;

  v2 = (char *)*((_QWORD *)a2 + 10);
  v3 = (char *)*((_QWORD *)a2 + 11);
  if (v3 == v2)
  {
    v2 = (char *)*((_QWORD *)a2 + 11);
  }
  else
  {
    v6 = 0;
    v7 = (char *)this + 106;
    do
    {
      v8 = (SLHomograph **)&v2[8 * v6];
      v9 = *v8;
      if ((*((_DWORD *)this + 16) & *(_DWORD *)*v8) != 0
        && !memcmp((const void *)(*((_QWORD *)v9 + 5) - *((__int16 *)this + 52)), v7, *((__int16 *)this + 52)))
      {
        *(_DWORD *)v9 = *((_DWORD *)this + 15);
        ++v6;
      }
      else
      {
        if (v3 != (char *)(v8 + 1))
          memmove(v8, v8 + 1, v3 - (char *)(v8 + 1));
        *((_QWORD *)a2 + 11) = v3 - 8;
        SLHomograph::~SLHomograph(v9);
        MEMORY[0x219A0649C]();
        v2 = (char *)*((_QWORD *)a2 + 10);
        v3 = (char *)*((_QWORD *)a2 + 11);
      }
    }
    while (v6 < (v3 - v2) >> 3);
  }
  return v3 != v2;
}

char *SLMorphEng_Tion::AddAffix(char *this, SLToken *a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  size_t v14;

  v2 = *((_QWORD *)a2 + 10);
  if (*((_QWORD *)a2 + 11) != v2)
  {
    v4 = (uint64_t)this;
    v5 = 0;
    v6 = this + 50;
    do
    {
      v7 = *(_QWORD *)(v2 + 8 * v5);
      v8 = *(_BYTE **)(v7 + 40);
      if (*(_BYTE *)(v4 + 114))
      {
        v9 = memchr(*(void **)(v7 + 32), 1, (size_t)&v8[-*(_QWORD *)(v7 + 32)]);
        if (!v9)
          v9 = v8;
        v10 = v8;
        if (v9 != v8)
        {
          do
          {
            *v9 = 58;
            v9 = memchr(v9 + 1, 1, v8 - (v9 + 1));
            if (!v9)
              v9 = v8;
          }
          while (v9 != v8);
          v10 = *(char **)(v7 + 40);
        }
      }
      else
      {
        v10 = *(char **)(v7 + 40);
      }
      v11 = *(__int16 *)(v4 + 104);
      if (*(_WORD *)(v4 + 104))
      {
        v12 = &v8[-v11];
        v13 = &v12[v11];
        v14 = v10 - v13;
        if (v10 != v13)
          memmove(v12, v13, v14);
        v10 = &v12[v14];
        *(_QWORD *)(v7 + 40) = &v12[v14];
      }
      if (*(v10 - 1) == 58)
        *(_QWORD *)(v7 + 40) = --v10;
      this = std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(v7 + 32, v10, v6, &v6[*(__int16 *)(v4 + 48)], *(__int16 *)(v4 + 48));
      ++v5;
      v2 = *((_QWORD *)a2 + 10);
    }
    while (v5 < (*((_QWORD *)a2 + 11) - v2) >> 3);
  }
  return this;
}

void SLMorphEng_Brit::SLMorphEng_Brit(SLMorphEng_Brit *this, const char *a2, const char *a3, const SLMorphTraits *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _WORD v10[5];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v10[0] = 0;
  SLMorph::SLMorph((uint64_t)this, a2, (uint64_t)v10, (uint64_t)a4, 16499, 16499, 0, a8);
  *(_QWORD *)this = &off_24D672088;
  *((_QWORD *)this + 11) = a3;
  *((_QWORD *)this + 12) = strlen(a3);
}

uint64_t SLMorphEng_Brit::MorphLookup(SLMorphEng_Brit *this, const char *a2, uint64_t a3, SLDictionary *a4, SLTokenBuilder *a5)
{
  std::string *v8;
  uint64_t v9;

  v8 = (std::string *)((char *)a5 + 16);
  MEMORY[0x219A06400]((char *)a5 + 16, a2, a3 - *((_QWORD *)this + 4));
  std::string::append(v8, *((const std::string::value_type **)this + 11), *((_QWORD *)this + 12));
  if (*((char *)a5 + 39) < 0)
  {
    v8 = (std::string *)*((_QWORD *)a5 + 2);
    v9 = *((_QWORD *)a5 + 3);
  }
  else
  {
    v9 = *((unsigned __int8 *)a5 + 39);
  }
  return (**(uint64_t (***)(SLDictionary *, std::string *, uint64_t, SLTokenBuilder *, SLDictionary *))a4)(a4, v8, v9, a5, a4);
}

BOOL SLMorphEng_Brit::POSFromSuffix(SLMorphEng_Brit *this, SLToken *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *((_QWORD *)a2 + 10);
  v3 = *((_QWORD *)a2 + 11);
  if (v3 == v2)
  {
    v2 = *((_QWORD *)a2 + 11);
  }
  else
  {
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(v2 + 8 * v5);
      if (SLWordTagSet::find((SLWordTagSet *)(v6 + 4), 68) || SLWordTagSet::find((SLWordTagSet *)(v6 + 4), 64))
      {
        v7 = *((_QWORD *)a2 + 10);
        v8 = *((_QWORD *)a2 + 11);
        v9 = v7 + 8 * v5;
        v10 = v8 - (v9 + 8);
        if (v8 != v9 + 8)
          memmove((void *)(v7 + 8 * v5), (const void *)(v9 + 8), v8 - (v9 + 8));
        *((_QWORD *)a2 + 11) = v9 + v10;
        if (v6)
        {
          SLHomograph::~SLHomograph((SLHomograph *)v6);
          MEMORY[0x219A0649C]();
        }
      }
      else
      {
        ++v5;
      }
      v2 = *((_QWORD *)a2 + 10);
      v3 = *((_QWORD *)a2 + 11);
    }
    while (v5 < (v3 - v2) >> 3);
  }
  return v3 != v2;
}

uint64_t SLTionRules::Lookup(SLTionRules *this, const char *a2, unint64_t a3, SLWordBuilder *a4, SLDictionary *a5)
{
  if (a3 < 5 || strncasecmp_l(&a2[a3 - 4], "TION", 4uLL, *(locale_t *)(*((_QWORD *)this + 5) + 8)))
    return 0;
  else
    return SLEncyclopedia::Lookup(this, a2, a3, a4, a5);
}

uint64_t SLMorphEng_NameEnding::Lookup(SLMorphEng_NameEnding *this, const char *a2, unint64_t a3, SLWordBuilder *a4, SLDictionary *a5)
{
  unint64_t v9;
  __darwin_ct_rune_t v10;
  __darwin_ct_rune_t v11;
  int v12;
  uint64_t result;
  unsigned int v14;
  unint64_t v15;
  char *v16;
  char v17;
  char v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  _BYTE v33[16];
  _QWORD v34[2];
  unsigned __int8 v35;
  _QWORD *v36;

  if (a3 < 4)
    return 0;
  v9 = a3 - 2;
  v10 = __toupper(a2[a3 - 2]);
  if (a2[a3 - 1] != 78)
    return 0;
  v11 = v10;
  v12 = (char)v10;
  result = (uint64_t)memchr("AEIO", (char)v10, 5uLL);
  if (!result)
    return result;
  result = (uint64_t)memchr("DLNST", a2[a3 - 3], 6uLL);
  if (!result)
    return result;
  SLTokenBuilder::SLTokenBuilder((SLTokenBuilder *)v33, a4, 1);
  MEMORY[0x219A06400](v34, a2, a3);
  HIDWORD(v15) = v12 - 65;
  LODWORD(v15) = v12 - 65;
  v14 = v15 >> 1;
  if (v14 >= 8)
    v16 = 0;
  else
    v16 = (&off_24D672C58)[v14];
  v17 = *v16;
  if (!*v16)
  {
LABEL_36:
    SLTokenBuilder::~SLTokenBuilder((SLTokenBuilder *)v33);
    return 0;
  }
  if (v11 << 24 == 1325400064 || v11 << 24 == 1090519040)
    v19 = 11;
  else
    v19 = 25;
  while (1)
  {
    v20 = (v35 & 0x80u) == 0 ? v34 : (_QWORD *)v34[0];
    *((_BYTE *)v20 + v9) = v17;
    v21 = (v35 & 0x80u) == 0 ? v34 : (_QWORD *)v34[0];
    v22 = (v35 & 0x80u) == 0 ? v35 : v34[1];
    if ((**(unsigned int (***)(SLDictionary *, _QWORD *, uint64_t, _BYTE *, SLDictionary *))a5)(a5, v21, v22, v33, a5))
    {
      v23 = v36[10];
      if (v36[11] != v23)
      {
        v24 = 0;
        do
        {
          v25 = *(_QWORD **)(v23 + 8 * v24);
          if (SLWordTagSet::find((SLWordTagSet *)((char *)v25 + 4), 64))
          {
            *(_BYTE *)(v25[5] - 2) = v19;
            ++v24;
          }
          else
          {
            v26 = v36;
            v27 = v36[10];
            v28 = v36[11];
            v29 = v27 + 8 * v24;
            v30 = v28 - (v29 + 8);
            if (v28 != v29 + 8)
              memmove((void *)(v27 + 8 * v24), (const void *)(v29 + 8), v28 - (v29 + 8));
            v26[11] = v29 + v30;
            if (v25)
            {
              SLHomograph::~SLHomograph((SLHomograph *)v25);
              MEMORY[0x219A0649C]();
            }
          }
          v23 = v36[10];
          v31 = v36[11];
        }
        while (v24 < (v31 - v23) >> 3);
        if (v23 != v31)
          break;
      }
    }
    v32 = *++v16;
    v17 = v32;
    if (!v32)
      goto LABEL_36;
  }
  v36[3] = "Dictionary+Morph";
  SLTokenBuilder::Forward((SLTokenBuilder *)v33);
  SLTokenBuilder::~SLTokenBuilder((SLTokenBuilder *)v33);
  return 1;
}

void sub_216FB69BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  SLTokenBuilder::~SLTokenBuilder((SLTokenBuilder *)va);
  _Unwind_Resume(a1);
}

void SLMorphRulesEng::SLMorphRulesEng(SLMorphRulesEng *this, char a2)
{
  _QWORD *v4;
  int *v5;
  SLDictionary *v6;
  uint64_t v7;
  SLDictionary *v8;
  uint64_t v9;
  SLDictionary *v10;
  uint64_t v11;
  SLDictionary *v12;
  uint64_t v13;
  SLDictionary *v14;
  uint64_t v15;
  SLDictionary *v16;
  uint64_t v17;
  SLDictionary *v18;
  uint64_t v19;
  SLDictionary *v20;
  uint64_t v21;
  SLDictionary *v22;
  uint64_t v23;
  SLDictionary *v24;
  uint64_t v25;
  SLDictionary *v26;
  uint64_t v27;
  SLDictionary *v28;
  uint64_t v29;
  SLDictionary *v30;
  uint64_t v31;
  SLDictionary *v32;
  uint64_t v33;
  SLDictionary *v34;
  uint64_t v35;
  SLDictionary *v36;
  uint64_t v37;
  SLDictionary *v38;
  uint64_t v39;
  SLDictionary *v40;
  uint64_t v41;
  SLDictionary *v42;
  uint64_t v43;
  SLDictionary *v44;
  uint64_t v45;
  SLDictionary *v46;
  uint64_t v47;
  SLDictionary *v48;
  uint64_t v49;
  SLDictionary *v50;
  uint64_t v51;
  SLDictionary *v52;
  uint64_t v53;
  SLDictionary *v54;
  uint64_t v55;
  SLDictionary *v56;
  uint64_t v57;
  SLDictionary *v58;
  uint64_t v59;
  SLDictionary *v60;
  uint64_t v61;
  SLDictionary *v62;
  uint64_t v63;
  SLDictionary *v64;
  uint64_t v65;
  SLDictionary *v66;
  uint64_t v67;
  SLDictionary *v68;
  uint64_t v69;
  SLDictionary *v70;
  uint64_t v71;
  SLDictionary *v72;
  uint64_t v73;
  SLDictionary *v74;
  uint64_t v75;
  SLDictionary *v76;
  uint64_t v77;
  SLDictionary *v78;
  uint64_t v79;
  SLDictionary *v80;
  uint64_t v81;
  SLDictionary *v82;
  uint64_t v83;
  SLDictionary *v84;
  uint64_t v85;
  SLDictionary *v86;
  uint64_t v87;
  SLDictionary *v88;
  uint64_t v89;
  SLDictionary *v90;
  uint64_t v91;
  SLDictionary *v92;
  uint64_t v93;
  SLDictionary *v94;
  uint64_t v95;
  SLDictionary *v96;
  uint64_t v97;
  SLDictionary *v98;
  uint64_t v99;
  SLDictionary *v100;
  uint64_t v101;
  SLMorphEng_BILITY *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  SLDictionary *v109;
  uint64_t v110;
  SLDictionary *v111;
  uint64_t v112;
  SLDictionary *v113;
  uint64_t v114;
  SLDictionary *v115;
  uint64_t v116;
  SLDictionary *v117;
  uint64_t v118;
  SLDictionary *v119;
  uint64_t v120;
  SLDictionary *v121;
  uint64_t v122;
  SLDictionary *v123;
  uint64_t v124;
  SLDictionary *v125;
  uint64_t v126;
  SLDictionary *v127;
  SLDictionary *v128;
  uint64_t v129;
  SLDictionary *v130;
  uint64_t v131;
  SLDictionary *v132;
  uint64_t v133;
  SLDictionary *v134;
  uint64_t v135;
  SLDictionary *v136;
  uint64_t v137;
  SLDictionary *v138;
  uint64_t v139;
  SLDictionary *v140;
  uint64_t v141;
  SLDictionary *v142;
  uint64_t v143;
  SLDictionary *v144;
  uint64_t v145;
  SLDictionary *v146;
  uint64_t v147;
  SLDictionary *v148;
  uint64_t v149;
  SLDictionary *v150;
  uint64_t v151;
  SLDictionary *v152;
  uint64_t v153;
  SLDictionary *v154;
  uint64_t v155;
  SLDictionary *v156;
  uint64_t v157;
  SLDictionary *v158;
  uint64_t v159;
  SLMorphEng_Brit *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  SLMorphEng_Brit *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  SLMorphEng_Brit *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  SLMorphEng_Brit *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  SLMorphEng_Brit *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  SLMorphEng_Brit *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  SLMorphEng_Brit *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  SLMorphEng_Brit *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  SLMorphEng_Brit *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  SLMorphEng_Brit *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  SLMorphEng_Brit *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  SLMorphEng_Brit *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  SLMorphEng_Brit *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  SLMorphEng_Brit *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  SLMorphEng_Brit *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  SLMorphEng_Brit *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  SLMorphEng_Brit *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  SLMorphEng_Brit *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  SLMorphEng_Brit *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  SLMorphEng_Brit *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  SLMorphEng_Brit *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  _BYTE v265[6];
  _BYTE v266[10];
  uint64_t v267;

  v267 = *MEMORY[0x24BDAC8D0];
  SLDictionary::SLDictionary(this);
  v4[3] = 0;
  v4[4] = 0;
  *v4 = &off_24D6720F0;
  v5 = (int *)(v4 + 5);
  SLMorphTraits::SLMorphTraits((SLMorphTraits *)(v4 + 5), "en_US.UTF-8", 16499);
  v6 = (SLDictionary *)operator new();
  *(_WORD *)v266 = 0;
  SLMorph::SLMorph((uint64_t)v6, "'S", (uint64_t)v266, (uint64_t)v5, 1, 0x7FFFFFFF, 0x4400400002, v7);
  *(_QWORD *)v6 = &off_24D672140;
  SLEncyclopedia::PushBack((uint64_t)this, v6);
  v8 = (SLDictionary *)operator new();
  *(_WORD *)v266 = 0;
  SLMorph::SLMorph((uint64_t)v8, "S'", (uint64_t)v266, (uint64_t)v5, *v5, *v5, 0x4400400002, v9);
  *(_QWORD *)v8 = &off_24D671130;
  SLEncyclopedia::PushBack((uint64_t)this, v8);
  v10 = (SLDictionary *)operator new();
  *(_WORD *)v266 = 0;
  SLMorph::SLMorph((uint64_t)v10, "S", (uint64_t)v266, (uint64_t)v5, 16499, 0x7FFFFFFF, 0x56004400400003, v11);
  *(_QWORD *)v10 = &off_24D672140;
  SLEncyclopedia::PushBack((uint64_t)this, v10);
  v12 = (SLDictionary *)operator new();
  *(_WORD *)v266 = 0;
  SLMorph::SLMorph((uint64_t)v12, "IN'", (uint64_t)v266, (uint64_t)v5, 0x7FFFFFFF, 0x7FFFFFFF, 0, v13);
  *(_QWORD *)v12 = &off_24D6727A0;
  SLEncyclopedia::PushBack((uint64_t)this, v12);
  if ((a2 & 1) == 0)
  {
    v14 = (SLDictionary *)operator new();
    *(_WORD *)v266 = 5;
    *(_DWORD *)&v266[2] = 707921153;
    v266[6] = 60;
    SLMorph::SLMorph((uint64_t)v14, "X", (uint64_t)v266, (uint64_t)v5, 16499, 0x7FFFFFFF, 0, v15);
    *(_QWORD *)v14 = &off_24D672BE8;
    *((_BYTE *)v14 + 84) = 1;
    SLEncyclopedia::PushBack((uint64_t)this, v14);
    v16 = (SLDictionary *)operator new();
    *(_WORD *)v266 = 4;
    *(_DWORD *)&v266[2] = 1008994305;
    SLMorph::SLMorph((uint64_t)v16, "UN", (uint64_t)v266, (uint64_t)v5, 16499, 0x7FFFFFFF, 0, v17);
    *(_QWORD *)v16 = &off_24D672BE8;
    *((_BYTE *)v16 + 84) = 1;
    SLEncyclopedia::PushBack((uint64_t)this, v16);
    v18 = (SLDictionary *)operator new();
    *(_WORD *)v266 = 4;
    *(_DWORD *)&v266[2] = 1006829856;
    SLMorph::SLMorph((uint64_t)v18, "RE", (uint64_t)v266, (uint64_t)v5, 16499, 0x7FFFFFFF, 0, v19);
    *(_QWORD *)v18 = &off_24D672BE8;
    *((_BYTE *)v18 + 84) = 1;
    SLEncyclopedia::PushBack((uint64_t)this, v18);
    v20 = (SLDictionary *)operator new();
    *(_WORD *)v266 = 5;
    *(_DWORD *)&v266[2] = 604438820;
    v266[6] = 60;
    SLMorph::SLMorph((uint64_t)v20, "NON", (uint64_t)v266, (uint64_t)v5, 16499, 0x7FFFFFFF, 0, v21);
    *(_QWORD *)v20 = &off_24D672BE8;
    *((_BYTE *)v20 + 84) = 1;
    SLEncyclopedia::PushBack((uint64_t)this, v20);
    v22 = (SLDictionary *)operator new();
    *(_DWORD *)v266 = 1007353858;
    SLMorph::SLMorph((uint64_t)v22, "A-", (uint64_t)v266, (uint64_t)v5, 16, 16, 0, v23);
    *(_QWORD *)v22 = &off_24D672BE8;
    *((_BYTE *)v22 + 84) = 0;
    SLEncyclopedia::PushBack((uint64_t)this, v22);
    v24 = (SLDictionary *)operator new();
    *(_WORD *)v266 = 4;
    *(_DWORD *)&v266[2] = 1007747378;
    SLMorph::SLMorph((uint64_t)v24, "CO-", (uint64_t)v266, (uint64_t)v5, 16499, 0x7FFFFFFF, 0, v25);
    *(_QWORD *)v24 = &off_24D672BE8;
    *((_BYTE *)v24 + 84) = 0;
    SLEncyclopedia::PushBack((uint64_t)this, v24);
    v26 = (SLDictionary *)operator new();
    *(_WORD *)v266 = 5;
    *(_DWORD *)&v266[2] = 704905521;
    v266[6] = 60;
    SLMorph::SLMorph((uint64_t)v26, "DIS", (uint64_t)v266, (uint64_t)v5, 16499, 0x7FFFFFFF, 0, v27);
    *(_QWORD *)v26 = &off_24D672BE8;
    *((_BYTE *)v26 + 84) = 1;
    SLEncyclopedia::PushBack((uint64_t)this, v26);
    v28 = (SLDictionary *)operator new();
    *(_WORD *)v266 = 6;
    *(_DWORD *)&v266[2] = 822935850;
    *(_WORD *)&v266[6] = 15377;
    SLMorph::SLMorph((uint64_t)v28, "SADO", (uint64_t)v266, (uint64_t)v5, 16499, 0x7FFFFFFF, 0, v29);
    *(_QWORD *)v28 = &off_24D672BE8;
    *((_BYTE *)v28 + 84) = 1;
    SLEncyclopedia::PushBack((uint64_t)this, v28);
    v30 = (SLDictionary *)operator new();
    *(_WORD *)v266 = 6;
    *(_DWORD *)&v266[2] = 824444161;
    *(_WORD *)&v266[6] = 15377;
    SLMorph::SLMorph((uint64_t)v30, "ENDO", (uint64_t)v266, (uint64_t)v5, 16499, 0x7FFFFFFF, 0, v31);
    *(_QWORD *)v30 = &off_24D672BE8;
    *((_BYTE *)v30 + 84) = 1;
    SLEncyclopedia::PushBack((uint64_t)this, v30);
    v32 = (SLDictionary *)operator new();
    *(_WORD *)v266 = 6;
    *(_DWORD *)&v266[2] = 506594049;
    *(_WORD *)&v266[6] = 15363;
    SLMorph::SLMorph((uint64_t)v32, "EQUI", (uint64_t)v266, (uint64_t)v5, 16499, 0x7FFFFFFF, 0, v33);
    *(_QWORD *)v32 = &off_24D672BE8;
    *((_BYTE *)v32 + 84) = 1;
    SLEncyclopedia::PushBack((uint64_t)this, v32);
    v34 = (SLDictionary *)operator new();
    *(_WORD *)v266 = 5;
    *(_DWORD *)&v266[2] = 422446337;
    v266[6] = 60;
    SLMorph::SLMorph((uint64_t)v34, "EPI", (uint64_t)v266, (uint64_t)v5, 16499, 0x7FFFFFFF, 0, v35);
    *(_QWORD *)v34 = &off_24D672BE8;
    *((_BYTE *)v34 + 84) = 1;
    SLEncyclopedia::PushBack((uint64_t)this, v34);
    v36 = (SLDictionary *)operator new();
    *(_WORD *)v266 = 6;
    *(_DWORD *)&v266[2] = 772669730;
    *(_WORD *)&v266[6] = 15377;
    SLMorph::SLMorph((uint64_t)v36, "HYPO", (uint64_t)v266, (uint64_t)v5, 16499, 0x7FFFFFFF, 0, v37);
    *(_QWORD *)v36 = &off_24D672BE8;
    *((_BYTE *)v36 + 84) = 1;
    SLEncyclopedia::PushBack((uint64_t)this, v36);
    v38 = (SLDictionary *)operator new();
    strcpy(v266, "\a");
    *(_DWORD *)&v266[2] = 807666689;
    *(_WORD *)&v266[6] = 2848;
    v266[8] = 60;
    SLMorph::SLMorph((uint64_t)v38, "INTRA", (uint64_t)v266, (uint64_t)v5, 16499, 0x7FFFFFFF, 0, v39);
    *(_QWORD *)v38 = &off_24D672BE8;
    *((_BYTE *)v38 + 84) = 1;
    SLEncyclopedia::PushBack((uint64_t)this, v38);
    v40 = (SLDictionary *)operator new();
    *(_WORD *)v266 = 6;
    *(_DWORD *)&v266[2] = 721748259;
    *(_WORD *)&v266[6] = 15385;
    SLMorph::SLMorph((uint64_t)v40, "MESO", (uint64_t)v266, (uint64_t)v5, 16499, 0x7FFFFFFF, 0, v41);
    *(_QWORD *)v40 = &off_24D672BE8;
    *((_BYTE *)v40 + 84) = 1;
    SLEncyclopedia::PushBack((uint64_t)this, v40);
    v42 = (SLDictionary *)operator new();
    *(_WORD *)v266 = 6;
    *(_DWORD *)&v266[2] = 537264430;
    *(_WORD *)&v266[6] = 15371;
    SLMorph::SLMorph((uint64_t)v42, "PARA", (uint64_t)v266, (uint64_t)v5, 16499, 0x7FFFFFFF, 0, v43);
    *(_QWORD *)v42 = &off_24D672BE8;
    *((_BYTE *)v42 + 84) = 1;
    SLEncyclopedia::PushBack((uint64_t)this, v42);
    v44 = (SLDictionary *)operator new();
    *(_WORD *)v266 = 4;
    *(_DWORD *)&v266[2] = 1008732974;
    SLMorph::SLMorph((uint64_t)v44, "PER", (uint64_t)v266, (uint64_t)v5, 16499, 0x7FFFFFFF, 0, v45);
    *(_QWORD *)v44 = &off_24D672BE8;
    *((_BYTE *)v44 + 84) = 0;
    SLEncyclopedia::PushBack((uint64_t)this, v44);
    v46 = (SLDictionary *)operator new();
    *(_WORD *)v266 = 4;
    *(_DWORD *)&v266[2] = 1006829873;
    SLMorph::SLMorph((uint64_t)v46, "DE", (uint64_t)v266, (uint64_t)v5, 16499, 0x7FFFFFFF, 0, v47);
    *(_QWORD *)v46 = &off_24D672BE8;
    *((_BYTE *)v46 + 84) = 1;
    SLEncyclopedia::PushBack((uint64_t)this, v46);
  }
  v48 = (SLDictionary *)operator new();
  *(_WORD *)v266 = 0;
  SLMorph::SLMorph((uint64_t)v48, "ES", (uint64_t)v266, (uint64_t)v5, 16499, 0x7FFFFFFF, 0x56004400400003, v49);
  *(_QWORD *)v48 = &off_24D672208;
  SLEncyclopedia::PushBack((uint64_t)this, v48);
  v50 = (SLDictionary *)operator new();
  *(_WORD *)v266 = 0;
  SLMorph::SLMorph((uint64_t)v50, "IES", (uint64_t)v266, (uint64_t)v5, 1, 1, 0, v51);
  *(_QWORD *)v50 = &off_24D672288;
  SLEncyclopedia::PushBack((uint64_t)this, v50);
  if ((a2 & 1) == 0)
  {
    v52 = (SLDictionary *)operator new();
    *(_WORD *)v266 = 4;
    *(_DWORD *)&v266[2] = 706290748;
    SLMorph::SLMorph((uint64_t)v52, "INESS", (uint64_t)v266, (uint64_t)v5, 1, 16499, 0, v53);
    *(_QWORD *)v52 = &off_24D672420;
    SLEncyclopedia::PushBack((uint64_t)this, v52);
    v54 = (SLDictionary *)operator new();
    *(_WORD *)v266 = 6;
    *(_DWORD *)&v266[2] = 604184892;
    *(_WORD *)&v266[6] = 10777;
    SLMorph::SLMorph((uint64_t)v54, "LINESS", (uint64_t)v266, (uint64_t)v5, 1, 16499, 0, v55);
    *(_QWORD *)v54 = &off_24D672B80;
    SLEncyclopedia::PushBack((uint64_t)this, v54);
    v56 = (SLDictionary *)operator new();
    *(_WORD *)v266 = 4;
    *(_DWORD *)&v266[2] = 706290748;
    SLMorph::SLMorph((uint64_t)v56, "NESS", (uint64_t)v266, (uint64_t)v5, 1, 16499, 0, v57);
    *(_QWORD *)v56 = &off_24D672B80;
    SLEncyclopedia::PushBack((uint64_t)this, v56);
    v58 = (SLDictionary *)operator new();
    *(_WORD *)v266 = 4;
    *(_DWORD *)&v266[2] = 706289980;
    SLMorph::SLMorph((uint64_t)v58, "LESS", (uint64_t)v266, (uint64_t)v5, 64, 3, 0, v59);
    *(_QWORD *)v58 = &off_24D672B80;
    SLEncyclopedia::PushBack((uint64_t)this, v58);
    v60 = (SLDictionary *)operator new();
    *(_WORD *)v266 = 4;
    *(_DWORD *)&v266[2] = 554378812;
    SLMorph::SLMorph((uint64_t)v60, "FUL", (uint64_t)v266, (uint64_t)v5, 64, 3, 0, v61);
    *(_QWORD *)v60 = &off_24D672B80;
    SLEncyclopedia::PushBack((uint64_t)this, v60);
  }
  v62 = (SLDictionary *)operator new();
  *(_DWORD *)v266 = 423362563;
  v266[4] = 37;
  SLMorph::SLMorph((uint64_t)v62, "ING", (uint64_t)v266, (uint64_t)v5, 81, 16499, 0, v63);
  *(_QWORD *)v62 = &off_24D672308;
  SLEncyclopedia::PushBack((uint64_t)this, v62);
  v64 = (SLDictionary *)operator new();
  *(_DWORD *)v266 = 423362563;
  v266[4] = 37;
  SLMorph::SLMorph((uint64_t)v64, "-ING", (uint64_t)v266, (uint64_t)v5, 81, 16499, 0, v65);
  *(_QWORD *)v64 = &off_24D672B80;
  SLEncyclopedia::PushBack((uint64_t)this, v64);
  v66 = (SLDictionary *)operator new();
  *(_WORD *)v266 = 5;
  *(_DWORD *)&v266[2] = 69930556;
  v266[6] = 37;
  SLMorph::SLMorph((uint64_t)v66, "IZING", (uint64_t)v266, (uint64_t)v5, 81, 16499, 0, v67);
  *(_QWORD *)v66 = &off_24D672308;
  SLEncyclopedia::PushBack((uint64_t)this, v66);
  v68 = (SLDictionary *)operator new();
  *(_DWORD *)v266 = 188481539;
  v266[4] = 32;
  SLMorph::SLMorph((uint64_t)v68, "ER", (uint64_t)v266, (uint64_t)v5, 1, 16499, 0, v69);
  *(_QWORD *)v68 = &off_24D672308;
  SLEncyclopedia::PushBack((uint64_t)this, v68);
  v70 = (SLDictionary *)operator new();
  *(_WORD *)v266 = 5;
  *(_DWORD *)&v266[2] = 187371068;
  v266[6] = 32;
  SLMorph::SLMorph((uint64_t)v70, "IZER", (uint64_t)v266, (uint64_t)v5, 1, 16499, 0, v71);
  *(_QWORD *)v70 = &off_24D672308;
  SLEncyclopedia::PushBack((uint64_t)this, v70);
  v72 = (SLDictionary *)operator new();
  *(_WORD *)v266 = 0;
  SLMorph::SLMorph((uint64_t)v72, "ED", (uint64_t)v266, (uint64_t)v5, 66, 16499, 0, v73);
  *(_QWORD *)v72 = &off_24D672388;
  SLEncyclopedia::PushBack((uint64_t)this, v72);
  v74 = (SLDictionary *)operator new();
  *(_WORD *)v266 = 0;
  SLMorph::SLMorph((uint64_t)v74, "'D", (uint64_t)v266, (uint64_t)v5, 66, 16499, 0, v75);
  *(_QWORD *)v74 = &off_24D672388;
  SLEncyclopedia::PushBack((uint64_t)this, v74);
  if ((a2 & 1) == 0)
  {
    v76 = (SLDictionary *)operator new();
    *(_WORD *)v266 = 4;
    *(_DWORD *)&v266[2] = 808065340;
    SLMorph::SLMorph((uint64_t)v76, "IEST", (uint64_t)v266, (uint64_t)v5, 64, 16499, 0, v77);
    *(_QWORD *)v76 = &off_24D672420;
    SLEncyclopedia::PushBack((uint64_t)this, v76);
    v78 = (SLDictionary *)operator new();
    *(_WORD *)v266 = 6;
    *(_DWORD *)&v266[2] = 419635516;
    *(_WORD *)&v266[6] = 12330;
    SLMorph::SLMorph((uint64_t)v78, "LIEST", (uint64_t)v266, (uint64_t)v5, 64, 16499, 0, v79);
    *(_QWORD *)v78 = &off_24D672B80;
    SLEncyclopedia::PushBack((uint64_t)this, v78);
    v80 = (SLDictionary *)operator new();
    *(_WORD *)v266 = 4;
    *(_DWORD *)&v266[2] = 808065340;
    SLMorph::SLMorph((uint64_t)v80, "EST", (uint64_t)v266, (uint64_t)v5, 64, 16499, 0, v81);
    *(_QWORD *)v80 = &off_24D672B80;
    SLEncyclopedia::PushBack((uint64_t)this, v80);
    v82 = (SLDictionary *)operator new();
    *(_WORD *)v266 = 1;
    v266[2] = 49;
    SLMorph::SLMorph((uint64_t)v82, "IED", (uint64_t)v266, (uint64_t)v5, 66, 16499, 0, v83);
    *(_QWORD *)v82 = &off_24D672420;
    SLEncyclopedia::PushBack((uint64_t)this, v82);
    v84 = (SLDictionary *)operator new();
    *(_DWORD *)v266 = 188481539;
    v266[4] = 32;
    SLMorph::SLMorph((uint64_t)v84, "IER", (uint64_t)v266, (uint64_t)v5, 16499, 16499, 0, v85);
    *(_QWORD *)v84 = &off_24D6724A0;
    SLEncyclopedia::PushBack((uint64_t)this, v84);
    v86 = (SLDictionary *)operator new();
    *(_WORD *)v266 = 5;
    *(_DWORD *)&v266[2] = 604709692;
    v266[6] = 48;
    SLMorph::SLMorph((uint64_t)v86, "IMENT", (uint64_t)v266, (uint64_t)v5, 1, 16499, 0, v87);
    *(_QWORD *)v86 = &off_24D672420;
    SLEncyclopedia::PushBack((uint64_t)this, v86);
    v88 = (SLDictionary *)operator new();
    *(_WORD *)v266 = 5;
    *(_DWORD *)&v266[2] = 604709692;
    v266[6] = 48;
    SLMorph::SLMorph((uint64_t)v88, "MENT", (uint64_t)v266, (uint64_t)v5, 1, 16499, 0, v89);
    *(_QWORD *)v88 = &off_24D672B80;
    SLEncyclopedia::PushBack((uint64_t)this, v88);
    v90 = (SLDictionary *)operator new();
    *(_WORD *)v266 = 1;
    v266[2] = 3;
    SLMorph::SLMorph((uint64_t)v90, "BLY", (uint64_t)v266, (uint64_t)v5, 0x4000, 16499, 0, v91);
    *(_QWORD *)v90 = &off_24D6725A0;
    SLEncyclopedia::PushBack((uint64_t)this, v90);
    v92 = (SLDictionary *)operator new();
    *(_DWORD *)v266 = 557580291;
    v266[4] = 3;
    SLMorph::SLMorph((uint64_t)v92, "CALLY", (uint64_t)v266, (uint64_t)v5, 0x4000, 16499, 0, v93);
    *(_QWORD *)v92 = &off_24D6726A0;
    SLEncyclopedia::PushBack((uint64_t)this, v92);
    v94 = (SLDictionary *)operator new();
    *(_DWORD *)v266 = 557580291;
    v266[4] = 3;
    SLMorph::SLMorph((uint64_t)v94, "LY", (uint64_t)v266, (uint64_t)v5, 0x4000, 16499, 0, v95);
    *(_QWORD *)v94 = &off_24D672B80;
    SLEncyclopedia::PushBack((uint64_t)this, v94);
    v96 = (SLDictionary *)operator new();
    *(_DWORD *)v266 = 188481539;
    v266[4] = 32;
    SLMorph::SLMorph((uint64_t)v96, "OR", (uint64_t)v266, (uint64_t)v5, 1, 16499, 0, v97);
    *(_QWORD *)v96 = &off_24D672720;
    SLEncyclopedia::PushBack((uint64_t)this, v96);
    v98 = (SLDictionary *)operator new();
    *(_DWORD *)v266 = 238813187;
    v266[4] = 43;
    SLMorph::SLMorph((uint64_t)v98, "IZE", (uint64_t)v266, (uint64_t)v5, 2, 16499, 0, v99);
    *(_QWORD *)v98 = &off_24D672308;
    SLEncyclopedia::PushBack((uint64_t)this, v98);
    v100 = (SLDictionary *)operator new();
    *(_WORD *)v266 = 4;
    *(_DWORD *)&v266[2] = 824905276;
    SLMorph::SLMorph((uint64_t)v100, "IZED", (uint64_t)v266, (uint64_t)v5, 66, 16499, 0, v101);
    *(_QWORD *)v100 = &off_24D672308;
    SLEncyclopedia::PushBack((uint64_t)this, v100);
    v102 = (SLMorphEng_BILITY *)operator new();
    SLMorphEng_BILITY::SLMorphEng_BILITY(v102, (const SLMorphTraits *)v5, v103, v104, v105, v106, v107, v108);
    SLEncyclopedia::PushBack((uint64_t)this, v102);
  }
  v109 = (SLDictionary *)operator new();
  *(_DWORD *)v266 = 423362563;
  v266[4] = 42;
  SLMorph::SLMorph((uint64_t)v109, "US", (uint64_t)v266, (uint64_t)v5, 1, 1, 4194305, v110);
  *(_QWORD *)v109 = &off_24D6728A0;
  SLEncyclopedia::PushBack((uint64_t)this, v109);
  v111 = (SLDictionary *)operator new();
  *(_DWORD *)v266 = 71041027;
  v266[4] = 49;
  SLMorph::SLMorph((uint64_t)v111, "ID", (uint64_t)v266, (uint64_t)v5, 64, 1, 4194305, v112);
  *(_QWORD *)v111 = &off_24D6728A0;
  SLEncyclopedia::PushBack((uint64_t)this, v111);
  v113 = (SLDictionary *)operator new();
  *(_DWORD *)v266 = 554369026;
  SLMorph::SLMorph((uint64_t)v113, "AL", (uint64_t)v266, (uint64_t)v5, 64, 16499, 0, v114);
  *(_QWORD *)v113 = &off_24D672B80;
  SLEncyclopedia::PushBack((uint64_t)this, v113);
  v115 = (SLDictionary *)operator new();
  *(_WORD *)v266 = 1;
  v266[2] = 11;
  SLMorph::SLMorph((uint64_t)v115, "A", (uint64_t)v266, (uint64_t)v5, 1, 1, 0, v116);
  *(_QWORD *)v115 = &off_24D672620;
  SLEncyclopedia::PushBack((uint64_t)this, v115);
  if ((a2 & 1) == 0)
  {
    v117 = (SLDictionary *)operator new();
    *(_WORD *)v266 = 5;
    *(_DWORD *)&v266[2] = 187373884;
    v266[6] = 35;
    SLMorph::SLMorph((uint64_t)v117, "ISM", (uint64_t)v266, (uint64_t)v5, 1, 16499, 0, v118);
    *(_QWORD *)v117 = &off_24D672308;
    SLEncyclopedia::PushBack((uint64_t)this, v117);
    v119 = (SLDictionary *)operator new();
    *(_WORD *)v266 = 5;
    *(_DWORD *)&v266[2] = 187632444;
    v266[6] = 33;
    SLMorph::SLMorph((uint64_t)v119, "ABLE", (uint64_t)v266, (uint64_t)v5, 64, 2, 0, v120);
    *(_QWORD *)v119 = &off_24D672308;
    SLEncyclopedia::PushBack((uint64_t)this, v119);
    v121 = (SLDictionary *)operator new();
    *(_DWORD *)v266 = 423362563;
    v266[4] = 44;
    SLMorph::SLMorph((uint64_t)v121, "ISH", (uint64_t)v266, (uint64_t)v5, 64, 16499, 0, v122);
    *(_QWORD *)v121 = &off_24D671FB8;
    SLEncyclopedia::PushBack((uint64_t)this, v121);
    v123 = (SLDictionary *)operator new();
    *(_DWORD *)v266 = 557580291;
    v266[4] = 3;
    SLMorph::SLMorph((uint64_t)v123, "ILY", (uint64_t)v266, (uint64_t)v5, 0x4000, 64, 0, v124);
    *(_QWORD *)v123 = &off_24D672520;
    SLEncyclopedia::PushBack((uint64_t)this, v123);
    v125 = (SLDictionary *)operator new();
    *(_WORD *)v266 = 0;
    SLMorph::SLMorph((uint64_t)v125, "ITOUS", (uint64_t)v266, (uint64_t)v5, 64, 1, 0, v126);
    *(_QWORD *)v125 = &off_24D6729A0;
    SLEncyclopedia::PushBack((uint64_t)this, v125);
    v127 = (SLDictionary *)operator new();
    SLDictionary::SLDictionary(v127);
    *((_QWORD *)v127 + 3) = 0;
    *((_QWORD *)v127 + 4) = 0;
    *(_QWORD *)v127 = &off_24D672A50;
    *((_QWORD *)v127 + 5) = v5;
    SLEncyclopedia::PushBack((uint64_t)this, v127);
    v128 = (SLDictionary *)operator new();
    strcpy(v266, "\a");
    *(_DWORD *)&v266[2] = 67185433;
    *(_WORD *)&v266[6] = 6444;
    v266[8] = 36;
    *(_DWORD *)v265 = 185466883;
    v265[4] = 32;
    SLMorphEng_Tion::SLMorphEng_Tion((uint64_t)v128, "ISITION", (uint64_t)v266, "IRE", (uint64_t)v265, (uint64_t)v5, 2, v129);
    SLEncyclopedia::PushBack((uint64_t)v127, v128);
    v130 = (SLDictionary *)operator new();
    strcpy(v266, "\a");
    *(_DWORD *)&v266[2] = 774047745;
    *(_WORD *)&v266[6] = 6444;
    v266[8] = 36;
    *(_DWORD *)v265 = 588382210;
    SLMorphEng_Tion::SLMorphEng_Tion((uint64_t)v130, "UMPTION", (uint64_t)v266, "UME", (uint64_t)v265, (uint64_t)v5, 2, v131);
    SLEncyclopedia::PushBack((uint64_t)v127, v130);
    v132 = (SLDictionary *)operator new();
    strcpy(v266, "\a");
    *(_DWORD *)&v266[2] = 218180377;
    *(_WORD *)&v266[6] = 6444;
    v266[8] = 36;
    *(_DWORD *)v265 = 722337794;
    SLMorphEng_Tion::SLMorphEng_Tion((uint64_t)v132, "IZATION", (uint64_t)v266, "IZE", (uint64_t)v265, (uint64_t)v5, 2, v133);
    SLEncyclopedia::PushBack((uint64_t)v127, v132);
    v134 = (SLDictionary *)operator new();
    strcpy(v266, "\a");
    *(_DWORD *)&v266[2] = 839254310;
    *(_WORD *)&v266[6] = 6444;
    v266[8] = 36;
    *(_DWORD *)v265 = 237371394;
    SLMorphEng_Tion::SLMorphEng_Tion((uint64_t)v134, "FACTION", (uint64_t)v266, "FY", (uint64_t)v265, (uint64_t)v5, 2, v135);
    SLEncyclopedia::PushBack((uint64_t)v127, v134);
    v136 = (SLDictionary *)operator new();
    strcpy(v266, "\a");
    *(_DWORD *)&v266[2] = 218182169;
    *(_WORD *)&v266[6] = 6444;
    v266[8] = 36;
    *(_WORD *)v265 = 1;
    v265[2] = 14;
    SLMorphEng_Tion::SLMorphEng_Tion((uint64_t)v136, "ICATION", (uint64_t)v266, "Y", (uint64_t)v265, (uint64_t)v5, 2, v137);
    SLEncyclopedia::PushBack((uint64_t)v127, v136);
    v138 = (SLDictionary *)operator new();
    strcpy(v266, "\b");
    *(_QWORD *)&v266[2] = 0x24192C04012B0B2ELL;
    *(_WORD *)v265 = 4;
    *(_DWORD *)&v265[2] = 722534702;
    SLMorphEng_Tion::SLMorphEng_Tion((uint64_t)v138, "POSITION", (uint64_t)v266, "POSE", (uint64_t)v265, (uint64_t)v5, 2, v139);
    SLEncyclopedia::PushBack((uint64_t)v127, v138);
    v140 = (SLDictionary *)operator new();
    strcpy(v266, "\a");
    *(_DWORD *)&v266[2] = 218178315;
    *(_WORD *)&v266[6] = 6444;
    v266[8] = 36;
    *(_DWORD *)v265 = 588054530;
    SLMorphEng_Tion::SLMorphEng_Tion((uint64_t)v140, "AMATION", (uint64_t)v266, "AIM", (uint64_t)v265, (uint64_t)v5, 2, v141);
    SLEncyclopedia::PushBack((uint64_t)v127, v140);
    v142 = (SLDictionary *)operator new();
    *(_WORD *)v266 = 6;
    *(_DWORD *)&v266[2] = 741213185;
    *(_WORD *)&v266[6] = 9241;
    *(_DWORD *)v265 = 789446658;
    SLMorphEng_Tion::SLMorphEng_Tion((uint64_t)v142, "IPTION", (uint64_t)v266, "IBE", (uint64_t)v265, (uint64_t)v5, 2, v143);
    SLEncyclopedia::PushBack((uint64_t)v127, v142);
    v144 = (SLDictionary *)operator new();
    *(_WORD *)v266 = 5;
    *(_DWORD *)&v266[2] = 422317313;
    v266[6] = 36;
    *(_DWORD *)v265 = 806158338;
    SLMorphEng_Tion::SLMorphEng_Tion((uint64_t)v144, "ATION", (uint64_t)v266, "ATE", (uint64_t)v265, (uint64_t)v5, 2, v145);
    SLEncyclopedia::PushBack((uint64_t)v127, v144);
    v146 = (SLDictionary *)operator new();
    *(_WORD *)v266 = 5;
    *(_DWORD *)&v266[2] = 422314753;
    v266[6] = 36;
    *(_DWORD *)v265 = 805502978;
    SLMorphEng_Tion::SLMorphEng_Tion((uint64_t)v146, "ETION", (uint64_t)v266, "ETE", (uint64_t)v265, (uint64_t)v5, 2, v147);
    SLEncyclopedia::PushBack((uint64_t)v127, v146);
    v148 = (SLDictionary *)operator new();
    *(_WORD *)v266 = 5;
    *(_DWORD *)&v266[2] = 422315009;
    v266[6] = 36;
    *(_DWORD *)v265 = 806223874;
    SLMorphEng_Tion::SLMorphEng_Tion((uint64_t)v148, "ITION", (uint64_t)v266, "ITE", (uint64_t)v265, (uint64_t)v5, 2, v149);
    SLEncyclopedia::PushBack((uint64_t)v127, v148);
    v150 = (SLDictionary *)operator new();
    *(_WORD *)v266 = 5;
    *(_DWORD *)&v266[2] = 422318337;
    v266[6] = 36;
    *(_DWORD *)v265 = 806420482;
    SLMorphEng_Tion::SLMorphEng_Tion((uint64_t)v150, "OTION", (uint64_t)v266, "OTE", (uint64_t)v265, (uint64_t)v5, 2, v151);
    SLEncyclopedia::PushBack((uint64_t)v127, v150);
    v152 = (SLDictionary *)operator new();
    *(_WORD *)v266 = 5;
    *(_DWORD *)&v266[2] = 422318593;
    v266[6] = 36;
    *(_DWORD *)v265 = 806486018;
    SLMorphEng_Tion::SLMorphEng_Tion((uint64_t)v152, "UTION", (uint64_t)v266, "UTE", (uint64_t)v265, (uint64_t)v5, 2, v153);
    SLEncyclopedia::PushBack((uint64_t)v127, v152);
    v154 = (SLDictionary *)operator new();
    *(_DWORD *)v266 = 422313987;
    v266[4] = 36;
    *(_WORD *)v265 = 1;
    v265[2] = 48;
    SLMorphEng_Tion::SLMorphEng_Tion((uint64_t)v154, "TION", (uint64_t)v266, "T", (uint64_t)v265, (uint64_t)v5, 2, v155);
    SLEncyclopedia::PushBack((uint64_t)v127, v154);
    v156 = (SLDictionary *)operator new();
    strcpy(v266, "\a");
    *(_DWORD *)&v266[2] = 218180377;
    *(_WORD *)&v266[6] = 6444;
    v266[8] = 36;
    *(_WORD *)v265 = 0;
    SLMorphEng_Tion::SLMorphEng_Tion((uint64_t)v156, "IZATION", (uint64_t)v266, "", (uint64_t)v265, (uint64_t)v5, 67, v157);
    SLEncyclopedia::PushBack((uint64_t)v127, v156);
    v158 = (SLDictionary *)operator new();
    *(_WORD *)v266 = 5;
    *(_DWORD *)&v266[2] = 422317313;
    v266[6] = 36;
    *(_WORD *)v265 = 0;
    SLMorphEng_Tion::SLMorphEng_Tion((uint64_t)v158, "ATION", (uint64_t)v266, "", (uint64_t)v265, (uint64_t)v5, 2, v159);
    SLEncyclopedia::PushBack((uint64_t)v127, v158);
    v160 = (SLMorphEng_Brit *)operator new();
    SLMorphEng_Brit::SLMorphEng_Brit(v160, "ISATION", "IZATION", (const SLMorphTraits *)v5, v161, v162, v163, v164);
    SLEncyclopedia::PushBack((uint64_t)v127, v160);
    v165 = (SLMorphEng_Brit *)operator new();
    SLMorphEng_Brit::SLMorphEng_Brit(v165, "GRAMME", "GRAM", (const SLMorphTraits *)v5, v166, v167, v168, v169);
    SLEncyclopedia::PushBack((uint64_t)this, v165);
    v170 = (SLMorphEng_Brit *)operator new();
    SLMorphEng_Brit::SLMorphEng_Brit(v170, "IL", "ILL", (const SLMorphTraits *)v5, v171, v172, v173, v174);
    SLEncyclopedia::PushBack((uint64_t)this, v170);
    v175 = (SLMorphEng_Brit *)operator new();
    SLMorphEng_Brit::SLMorphEng_Brit(v175, "ELLED", "ELED", (const SLMorphTraits *)v5, v176, v177, v178, v179);
    SLEncyclopedia::PushBack((uint64_t)this, v175);
    v180 = (SLMorphEng_Brit *)operator new();
    SLMorphEng_Brit::SLMorphEng_Brit(v180, "ELLER", "ELER", (const SLMorphTraits *)v5, v181, v182, v183, v184);
    SLEncyclopedia::PushBack((uint64_t)this, v180);
    v185 = (SLMorphEng_Brit *)operator new();
    SLMorphEng_Brit::SLMorphEng_Brit(v185, "ELLING", "ELING", (const SLMorphTraits *)v5, v186, v187, v188, v189);
    SLEncyclopedia::PushBack((uint64_t)this, v185);
    v190 = (SLMorphEng_Brit *)operator new();
    SLMorphEng_Brit::SLMorphEng_Brit(v190, "BRE", "BER", (const SLMorphTraits *)v5, v191, v192, v193, v194);
    SLEncyclopedia::PushBack((uint64_t)this, v190);
    v195 = (SLMorphEng_Brit *)operator new();
    SLMorphEng_Brit::SLMorphEng_Brit(v195, "CHRE", "CHER", (const SLMorphTraits *)v5, v196, v197, v198, v199);
    SLEncyclopedia::PushBack((uint64_t)this, v195);
    v200 = (SLMorphEng_Brit *)operator new();
    SLMorphEng_Brit::SLMorphEng_Brit(v200, "DRE", "DER", (const SLMorphTraits *)v5, v201, v202, v203, v204);
    SLEncyclopedia::PushBack((uint64_t)this, v200);
    v205 = (SLMorphEng_Brit *)operator new();
    SLMorphEng_Brit::SLMorphEng_Brit(v205, "FRE", "FER", (const SLMorphTraits *)v5, v206, v207, v208, v209);
    SLEncyclopedia::PushBack((uint64_t)this, v205);
    v210 = (SLMorphEng_Brit *)operator new();
    SLMorphEng_Brit::SLMorphEng_Brit(v210, "GRE", "GER", (const SLMorphTraits *)v5, v211, v212, v213, v214);
    SLEncyclopedia::PushBack((uint64_t)this, v210);
    v215 = (SLMorphEng_Brit *)operator new();
    SLMorphEng_Brit::SLMorphEng_Brit(v215, "PRE", "PER", (const SLMorphTraits *)v5, v216, v217, v218, v219);
    SLEncyclopedia::PushBack((uint64_t)this, v215);
    v220 = (SLMorphEng_Brit *)operator new();
    SLMorphEng_Brit::SLMorphEng_Brit(v220, "TRE", "TER", (const SLMorphTraits *)v5, v221, v222, v223, v224);
    SLEncyclopedia::PushBack((uint64_t)this, v220);
    v225 = (SLMorphEng_Brit *)operator new();
    SLMorphEng_Brit::SLMorphEng_Brit(v225, "VRE", "VER", (const SLMorphTraits *)v5, v226, v227, v228, v229);
    SLEncyclopedia::PushBack((uint64_t)this, v225);
    v230 = (SLMorphEng_Brit *)operator new();
    SLMorphEng_Brit::SLMorphEng_Brit(v230, "YSE", "YZE", (const SLMorphTraits *)v5, v231, v232, v233, v234);
    SLEncyclopedia::PushBack((uint64_t)this, v230);
    v235 = (SLMorphEng_Brit *)operator new();
    SLMorphEng_Brit::SLMorphEng_Brit(v235, "ISE", "IZE", (const SLMorphTraits *)v5, v236, v237, v238, v239);
    SLEncyclopedia::PushBack((uint64_t)this, v235);
    v240 = (SLMorphEng_Brit *)operator new();
    SLMorphEng_Brit::SLMorphEng_Brit(v240, "CE", "SE", (const SLMorphTraits *)v5, v241, v242, v243, v244);
    SLEncyclopedia::PushBack((uint64_t)this, v240);
    v245 = (SLMorphEng_Brit *)operator new();
    SLMorphEng_Brit::SLMorphEng_Brit(v245, "OUR", "OR", (const SLMorphTraits *)v5, v246, v247, v248, v249);
    SLEncyclopedia::PushBack((uint64_t)this, v245);
    v250 = (SLMorphEng_Brit *)operator new();
    SLMorphEng_Brit::SLMorphEng_Brit(v250, "EXION", "ECTION", (const SLMorphTraits *)v5, v251, v252, v253, v254);
    SLEncyclopedia::PushBack((uint64_t)this, v250);
    v255 = (SLMorphEng_Brit *)operator new();
    SLMorphEng_Brit::SLMorphEng_Brit(v255, "EMENT", "MENT", (const SLMorphTraits *)v5, v256, v257, v258, v259);
    SLEncyclopedia::PushBack((uint64_t)this, v255);
    v260 = (SLMorphEng_Brit *)operator new();
    SLMorphEng_Brit::SLMorphEng_Brit(v260, "OGUE", "OG", (const SLMorphTraits *)v5, v261, v262, v263, v264);
    SLEncyclopedia::PushBack((uint64_t)this, v260);
  }
}

void sub_216FB8E48(_Unwind_Exception *a1)
{
  SLMorphRules *v1;
  locale_t *v2;
  uint64_t v3;

  MEMORY[0x219A0649C](v3, 0x10F1C40852DCFC7);
  SLMorphTraits::~SLMorphTraits(v2);
  SLMorphRules::~SLMorphRules(v1);
  _Unwind_Resume(a1);
}

void SLMorphRulesEng::~SLMorphRulesEng(locale_t *this)
{
  *this = (locale_t)&off_24D6720F0;
  SLMorphTraits::~SLMorphTraits(this + 5);
  SLMorphRules::~SLMorphRules((SLMorphRules *)this);
}

{
  *this = (locale_t)&off_24D6720F0;
  SLMorphTraits::~SLMorphTraits(this + 5);
  SLMorphRules::~SLMorphRules((SLMorphRules *)this);
}

{
  *this = (locale_t)&off_24D6720F0;
  SLMorphTraits::~SLMorphTraits(this + 5);
  SLMorphRules::~SLMorphRules((SLMorphRules *)this);
  JUMPOUT(0x219A0649CLL);
}

void SLFlatMorphRulesEng::SLFlatMorphRulesEng(SLFlatMorphRulesEng *this, SLDictionary *a2, char a3)
{
  _QWORD *v6;
  SLDictionary *v7;

  SLDictionary::SLDictionary(this);
  v6[3] = 0;
  v6[4] = 0;
  v6[5] = a2;
  *v6 = &off_24D672118;
  if ((a3 & 1) == 0)
  {
    v7 = (SLDictionary *)operator new();
    SLDictionary::SLDictionary(v7);
    *(_QWORD *)v7 = &off_24D672A90;
    SLEncyclopedia::PushBack((uint64_t)this, v7);
  }
}

void sub_216FB9268(_Unwind_Exception *a1)
{
  SLFlatMorphRules *v1;
  uint64_t v2;

  MEMORY[0x219A0649C](v2, 0x10A1C40AFD1EA57);
  SLFlatMorphRules::~SLFlatMorphRules(v1);
  _Unwind_Resume(a1);
}

void SLMorphEng_S::~SLMorphEng_S(SLMorphEng_S *this)
{
  SLDictionary::~SLDictionary(this);
  JUMPOUT(0x219A0649CLL);
}

void SLMorphEng_ES::~SLMorphEng_ES(SLMorphEng_ES *this)
{
  SLDictionary::~SLDictionary(this);
  JUMPOUT(0x219A0649CLL);
}

void SLMorphEng_IES::~SLMorphEng_IES(SLMorphEng_IES *this)
{
  SLDictionary::~SLDictionary(this);
  JUMPOUT(0x219A0649CLL);
}

void SLMorphEng_E::~SLMorphEng_E(SLMorphEng_E *this)
{
  SLDictionary::~SLDictionary(this);
  JUMPOUT(0x219A0649CLL);
}

void SLMorphEng_ED::~SLMorphEng_ED(SLMorphEng_ED *this)
{
  SLDictionary::~SLDictionary(this);
  JUMPOUT(0x219A0649CLL);
}

void SLMorphEng_Y::~SLMorphEng_Y(SLMorphEng_Y *this)
{
  SLDictionary::~SLDictionary(this);
  JUMPOUT(0x219A0649CLL);
}

void SLMorphEng_IER::~SLMorphEng_IER(SLMorphEng_IER *this)
{
  SLDictionary::~SLDictionary(this);
  JUMPOUT(0x219A0649CLL);
}

void SLMorphEng_ILY::~SLMorphEng_ILY(SLMorphEng_ILY *this)
{
  SLDictionary::~SLDictionary(this);
  JUMPOUT(0x219A0649CLL);
}

void SLMorphEng_BLY::~SLMorphEng_BLY(SLMorphEng_BLY *this)
{
  SLDictionary::~SLDictionary(this);
  JUMPOUT(0x219A0649CLL);
}

void SLMorphEng_UM::~SLMorphEng_UM(SLMorphEng_UM *this)
{
  SLDictionary::~SLDictionary(this);
  JUMPOUT(0x219A0649CLL);
}

void SLMorphEng_CALLY::~SLMorphEng_CALLY(SLMorphEng_CALLY *this)
{
  SLDictionary::~SLDictionary(this);
  JUMPOUT(0x219A0649CLL);
}

void SLMorphEng_OR::~SLMorphEng_OR(SLMorphEng_OR *this)
{
  SLDictionary::~SLDictionary(this);
  JUMPOUT(0x219A0649CLL);
}

void SLMorphEng_Elvis::~SLMorphEng_Elvis(SLMorphEng_Elvis *this)
{
  SLDictionary::~SLDictionary(this);
  JUMPOUT(0x219A0649CLL);
}

void SLMorphEng_Apostrophe::~SLMorphEng_Apostrophe(SLMorphEng_Apostrophe *this)
{
  SLDictionary::~SLDictionary(this);
  JUMPOUT(0x219A0649CLL);
}

void SLMorphEng_Saur::~SLMorphEng_Saur(SLMorphEng_Saur *this)
{
  SLDictionary::~SLDictionary(this);
  JUMPOUT(0x219A0649CLL);
}

void SLMorphEng_BILITY::~SLMorphEng_BILITY(SLMorphEng_BILITY *this)
{
  SLDictionary::~SLDictionary(this);
  JUMPOUT(0x219A0649CLL);
}

void SLMorphEng_ITOUS::~SLMorphEng_ITOUS(SLMorphEng_ITOUS *this)
{
  SLDictionary::~SLDictionary(this);
  JUMPOUT(0x219A0649CLL);
}

void SLMorphEng_Tion::~SLMorphEng_Tion(SLMorphEng_Tion *this)
{
  SLDictionary::~SLDictionary(this);
  JUMPOUT(0x219A0649CLL);
}

void SLMorphEng_Brit::~SLMorphEng_Brit(SLMorphEng_Brit *this)
{
  SLDictionary::~SLDictionary(this);
  JUMPOUT(0x219A0649CLL);
}

void SLTionRules::~SLTionRules(SLTionRules *this)
{
  SLEncyclopedia::~SLEncyclopedia(this);
  JUMPOUT(0x219A0649CLL);
}

void SLMorphEng_NameEnding::~SLMorphEng_NameEnding(SLMorphEng_NameEnding *this)
{
  SLDictionary::~SLDictionary(this);
  JUMPOUT(0x219A0649CLL);
}

void SLFlatMorphRulesEng::~SLFlatMorphRulesEng(SLFlatMorphRulesEng *this)
{
  SLFlatMorphRules::~SLFlatMorphRules(this);
  JUMPOUT(0x219A0649CLL);
}

void SLMorphEng::~SLMorphEng(SLMorphEng *this)
{
  SLDictionary::~SLDictionary(this);
  JUMPOUT(0x219A0649CLL);
}

void SLPrefixMorphEng::~SLPrefixMorphEng(SLPrefixMorphEng *this)
{
  SLDictionary::~SLDictionary(this);
  JUMPOUT(0x219A0649CLL);
}

uint64_t SLPrefixMorphEng::Match(SLPrefixMorphEng *this, const char *a2)
{
  return (*(uint64_t (**)(SLPrefixMorphEng *, const char *))(*(_QWORD *)this + 64))(this, a2);
}

uint64_t SLPrefixMorphEng::MorphLookup(SLPrefixMorphEng *this, const char *a2, uint64_t a3, SLDictionary *a4, SLTokenBuilder *a5)
{
  return (*(uint64_t (**)(SLPrefixMorphEng *, const char *, uint64_t, _QWORD, SLDictionary *, SLTokenBuilder *))(*(_QWORD *)this + 72))(this, a2, a3, *((unsigned __int8 *)this + 84), a4, a5);
}

uint64_t SLPrefixMorphEng::AddAffix(SLPrefixMorphEng *this, SLToken *a2)
{
  return (*(uint64_t (**)(SLPrefixMorphEng *, SLToken *))(*(_QWORD *)this + 80))(this, a2);
}

void SLMorphEng_BILITY::SLMorphEng_BILITY(SLMorphEng_BILITY *this, const SLMorphTraits *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v8 = 8;
  v9 = 0x330192104012F3CLL;
  *(_QWORD *)SLMorph::SLMorph((uint64_t)this, "BILITY", (uint64_t)&v8, (uint64_t)a2, 1, 64, 0, a8) = &off_24D672920;
}

void std::__split_buffer<unsigned char>::push_back(uint64_t a1, char *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  BOOL v16;
  uint64_t v17;
  char *v18;
  char v19;

  v4 = *(char **)(a1 + 16);
  if (v4 == *(char **)(a1 + 24))
  {
    v6 = *(_BYTE **)a1;
    v5 = *(char **)(a1 + 8);
    v7 = &v5[-*(_QWORD *)a1];
    if ((unint64_t)v5 <= *(_QWORD *)a1)
    {
      if ((unint64_t)(2 * (v4 - v6)) <= 1)
        v13 = 1;
      else
        v13 = 2 * (v4 - v6);
      v14 = (char *)operator new(v13);
      v15 = &v14[v13 >> 2];
      v17 = v4 - v5;
      v16 = v4 == v5;
      v4 = v15;
      if (!v16)
      {
        v4 = &v15[v17];
        v18 = &v14[v13 >> 2];
        do
        {
          v19 = *v5++;
          *v18++ = v19;
          --v17;
        }
        while (v17);
      }
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v15;
      *(_QWORD *)(a1 + 16) = v4;
      *(_QWORD *)(a1 + 24) = &v14[v13];
      if (v6)
      {
        operator delete(v6);
        v4 = *(char **)(a1 + 16);
      }
    }
    else
    {
      if ((uint64_t)(v7 + 1) >= 0)
        v8 = (uint64_t)(v7 + 1);
      else
        v8 = (uint64_t)(v7 + 2);
      v9 = -(v8 >> 1);
      v10 = &v5[-(v8 >> 1)];
      v11 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-(v8 >> 1)], *(const void **)(a1 + 8), v4 - v5);
        v4 = *(char **)(a1 + 8);
      }
      v12 = &v4[v9];
      v4 = &v10[v11];
      *(_QWORD *)(a1 + 8) = v12;
      *(_QWORD *)(a1 + 16) = &v10[v11];
    }
  }
  *v4 = *a2;
  ++*(_QWORD *)(a1 + 16);
}

const char *SLTagEng::Name(SLTagEng *this)
{
  if (this <= 0x3FF)
    return SLTag::Name(this);
  if (this <= 0x423)
    return SLTagEng::sName[(int)this - 1024];
  return "";
}

char *SLBndEng::Name(SLBndEng *this)
{
  char **v1;

  v1 = &SLBnd::sName[this];
  if (this >= 4)
    v1 = &SLBndEng::sName[(int)this - 4];
  return *v1;
}

_QWORD *SLCreateElementNamesEng(void)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = off_24D6733F8;
  return result;
}

uint64_t SLPhonEng::Find(SLPhonEng *this, int a2)
{
  unsigned __int8 v2;
  char v3;
  char v4;
  BOOL v5;
  BOOL v6;
  unsigned __int8 v7;

  v2 = 72;
  switch((int)this)
  {
    case '!':
      return v2;
    case '%':
      return 0;
    case '+':
      return 74;
    case ',':
      return 68;
    case '-':
      return 61;
    case '.':
      return 70;
    case '/':
      return 62;
    case '1':
      return 1;
    case '2':
      return 58;
    case '3':
      return 59;
    case ':':
      return 69;
    case '=':
      return 60;
    case '>':
      return 65;
    case '?':
      return 71;
    case 'A':
      if (a2 > 86)
      {
        switch(a2)
        {
          case 'W':
            return 16;
          case 'X':
            return 11;
          case 'Y':
            return 14;
          default:
            goto LABEL_74;
        }
      }
      else
      {
        switch(a2)
        {
          case 'A':
            return 7;
          case 'E':
            return 6;
          case 'O':
            return 9;
          default:
            goto LABEL_74;
        }
      }
    case 'C':
      return 52;
    case 'D':
      return 41;
    case 'E':
      if (a2 == 89)
        v2 = 13;
      else
        v2 = -1;
      v6 = a2 == 72;
      v7 = 5;
      goto LABEL_60;
    case 'I':
      v2 = 4;
      v3 = 3;
      if (a2 == 88)
        v4 = 25;
      else
        v4 = -1;
      v5 = a2 == 89;
      goto LABEL_34;
    case 'J':
      return 53;
    case 'N':
      return 37;
    case 'O':
      if (a2 == 89)
        v2 = 15;
      else
        v2 = -1;
      v6 = a2 == 87;
      v7 = 17;
LABEL_60:
      if (v6)
        return v7;
      return v2;
    case 'S':
      return 44;
    case 'T':
      return 40;
    case 'U':
      v2 = 10;
      v3 = 8;
      if (a2 == 87)
        v4 = 18;
      else
        v4 = -1;
      v5 = a2 == 88;
LABEL_34:
      if (!v5)
        v3 = v4;
      if (a2 != 72)
        v2 = v3;
      break;
    case 'Z':
      v2 = 45;
      break;
    case '\\':
      v2 = 63;
      break;
    case '_':
      v2 = 2;
      break;
    case 'b':
      v2 = 47;
      break;
    case 'd':
      v2 = 49;
      break;
    case 'f':
      v2 = 38;
      break;
    case 'g':
      v2 = 51;
      break;
    case 'h':
      v2 = 34;
      break;
    case 'k':
      v2 = 50;
      break;
    case 'l':
      v2 = 33;
      break;
    case 'm':
      v2 = 35;
      break;
    case 'n':
      v2 = 36;
      break;
    case 'p':
      v2 = 46;
      break;
    case 'r':
      v2 = 32;
      break;
    case 's':
      v2 = 42;
      break;
    case 't':
      v2 = 48;
      break;
    case 'v':
      v2 = 39;
      break;
    case 'w':
      v2 = 30;
      break;
    case 'y':
      v2 = 31;
      break;
    case 'z':
      v2 = 43;
      break;
    case '~':
      v2 = 75;
      break;
    default:
LABEL_74:
      v2 = -1;
      break;
  }
  return v2;
}

char *SLElementNamesEng::PhonName(SLElementNamesEng *this, int a2)
{
  return SLPhonEng::sName[a2];
}

char *SLElementNamesEng::PhonText(SLElementNamesEng *this, int a2)
{
  return SLPhonEng::sText[a2];
}

char *SLElementNamesEng::POSName(SLElementNamesEng *this, int a2)
{
  return SLPOSEng::sName[a2];
}

const char *SLElementNamesEng::TagName(SLElementNamesEng *this, SLTag *a2)
{
  if (a2 <= 0x3FF)
    return SLTag::Name(a2);
  if (a2 <= 0x423)
    return SLTagEng::sName[(int)a2 - 1024];
  return "";
}

char *SLElementNamesEng::BndName(SLElementNamesEng *this, unsigned int a2)
{
  char **v2;

  v2 = &SLBnd::sName[a2];
  if (a2 >= 4)
    v2 = &SLBndEng::sName[a2 - 4];
  return *v2;
}

void SLElementNamesEng::~SLElementNamesEng(SLElementNamesEng *this)
{
  SLElementNames::~SLElementNames(this);
  JUMPOUT(0x219A0649CLL);
}

void SLPostLexerImpl::SLPostLexerImpl(SLPostLexerImpl *this, SLLexer *a2, SLDictLookup *a3, SLPronouncer *a4, char a5)
{
  _QWORD *v10;
  SLLexerBuffer *v11;
  SLPronouncer *v12;

  SLLexerInstance::SLLexerInstance(this, 0, -1);
  *v10 = &unk_24D6735B8;
  v11 = (SLLexerBuffer *)(v10 + 12);
  SLLexerBuffer::SLLexerBuffer((SLLexerBuffer *)(v10 + 12), a2, 1);
  *(_QWORD *)this = off_24D673460;
  *((_QWORD *)this + 12) = &unk_24D673548;
  *((_QWORD *)this + 21) = a3;
  *((_QWORD *)this + 22) = a4;
  *((_QWORD *)this + 23) = SLDissecter::Create(a4, v12);
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *((_QWORD *)this + 29) = 0;
  *((_BYTE *)this + 240) = a5 & 1;
  *((_BYTE *)this + 241) = (a5 & 2) != 0;
  *((_QWORD *)this + 31) = 0;
  *((_DWORD *)this + 64) = 0;
  *((_BYTE *)this + 260) = 0;
  *((_QWORD *)this + 33) = 0;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_WORD *)this + 121) = 256;
  *((_BYTE *)this + 244) = 0;
  SLLexerBuffer::clear(v11);
}

void sub_216FB9CA0(_Unwind_Exception *a1)
{
  SLLexer *v1;
  SLLexerBuffer *v2;

  SLLexerBuffer::~SLLexerBuffer(v2);
  SLLexer::~SLLexer(v1);
  _Unwind_Resume(a1);
}

void SLPostLexerImpl::clear(SLPostLexerImpl *this)
{
  *((_WORD *)this + 121) = 256;
  *((_BYTE *)this + 244) = 0;
  SLLexerBuffer::clear((SLPostLexerImpl *)((char *)this + 96));
}

void SLPostLexerImpl::~SLPostLexerImpl(SLPostLexerImpl *this)
{
  SLLexerBuffer *v2;
  uint64_t v3;
  uint64_t i;
  void *v5;

  *(_QWORD *)this = off_24D673460;
  *((_QWORD *)this + 12) = &unk_24D673548;
  v2 = (SLPostLexerImpl *)((char *)this + 96);
  v3 = *((_QWORD *)this + 23);
  if (v3)
    MEMORY[0x219A0649C](v3, 0x1000C405D080610);
  for (i = 0; i != -96; i -= 24)
  {
    if (*((char *)this + i + 431) < 0)
      operator delete(*(void **)((char *)this + i + 408));
  }
  v5 = (void *)*((_QWORD *)this + 27);
  if (v5)
  {
    *((_QWORD *)this + 28) = v5;
    operator delete(v5);
  }
  SLLexerBuffer::~SLLexerBuffer(v2);
  SLLexer::~SLLexer(this);
}

{
  SLPostLexerImpl::~SLPostLexerImpl(this);
  JUMPOUT(0x219A0649CLL);
}

void `non-virtual thunk to'SLPostLexerImpl::~SLPostLexerImpl(SLPostLexerImpl *this)
{
  SLPostLexerImpl::~SLPostLexerImpl((SLPostLexerImpl *)((char *)this - 96));
}

{
  SLPostLexerImpl::~SLPostLexerImpl((SLPostLexerImpl *)((char *)this - 96));
  JUMPOUT(0x219A0649CLL);
}

const char *SLPostLexerImpl::NextToken(SLPostLexerImpl *this)
{
  const char *v2;
  SLToken *v3;
  SLToken *v4;
  uint64_t (***v5)(_QWORD);
  std::string::size_type v6;
  const void *v7;
  SLPostLexerImpl *v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned int Class;
  int v13;
  SLToken *v14;
  SLToken *v15;
  SLPostLexerImpl *v16;
  SLToken *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  std::string __p;
  char v27[8];
  SLToken *v28;

  v2 = "📒";
  if (*((_BYTE *)this + 243))
  {
    v3 = (SLToken *)SLLexerBuffer::operator[]((_QWORD *)this + 12, 0);
    if (v3)
    {
      v4 = v3;
      if (*(_BYTE *)v3 == 13 && **((_WORD **)v3 + 7) == 9)
      {
        *(int64x2_t *)((char *)this + 152) = vaddq_s64(*(int64x2_t *)((char *)this + 152), (int64x2_t)xmmword_21701CDA0);
        std::deque<SLToken *>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)this + 120, 1);
        SLToken::~SLToken(v4);
        MEMORY[0x219A0649C]();
      }
    }
    *((_BYTE *)this + 243) = 0;
  }
  while (1)
  {
    v5 = SLLexerBuffer::operator[]((_QWORD *)this + 12, 0);
    if (!v5)
    {
      *((_WORD *)this + 121) = 256;
      *((_BYTE *)this + 244) = 0;
      SLLexerBuffer::clear((SLPostLexerImpl *)((char *)this + 96));
      return 0;
    }
    v6 = (std::string::size_type)v5;
    *(int64x2_t *)((char *)this + 152) = vaddq_s64(*(int64x2_t *)((char *)this + 152), (int64x2_t)xmmword_21701CDA0);
    std::deque<SLToken *>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)this + 120, 1);
    if ((*(_BYTE *)(v6 + 16) & 0x40) != 0)
      break;
    if (*((_BYTE *)this + 240))
    {
      if (v6 != *((_QWORD *)this + 31))
      {
        *((_QWORD *)this + 31) = v6;
        __p.__r_.__value_.__r.__words[0] = v6;
        std::deque<SLToken *>::push_front((uint64_t)this + 120, &__p);
        return (const char *)v6;
      }
      v7 = *(const void **)(v6 + 48);
      if (v7)
      {
        CFRelease(v7);
        *(_QWORD *)(v6 + 48) = 0;
      }
      *((_QWORD *)this + 31) = 0;
    }
    SLTokenList::SLTokenList((SLTokenList *)&__p);
    v9 = 1;
    v10 = 0;
    v11 = 3;
    switch(*(_BYTE *)v6)
    {
      case 0:
        SLPostLexerImpl::HandleAlpha(this, (SLToken *)v6);
        goto LABEL_72;
      case 1:
        SLPostLexerImpl::HandleNumber(this, (SLToken *)v6, (SLTokenList *)&__p);
        goto LABEL_72;
      case 2:
        SLPostLexerImpl::HandleAlphaNumeric(this, (SLToken *)v6, (SLTokenList *)&__p);
        goto LABEL_72;
      case 4:
      case 5:
        SLPostLexerImpl::HandleInsert(this, (SLToken *)v6, (SLTokenList *)&__p);
        goto LABEL_72;
      case 6:
        SLPostLexerImpl::HandleParagraph(this, (SLToken *)v6, (SLTokenList *)&__p);
        goto LABEL_72;
      case 7:
        SLPostLexerImpl::HandleURL(this, (int64x2_t *)v6, (SLTokenList *)&__p);
        goto LABEL_72;
      case 0xA:
        SLPostLexerImpl::HandleCitChar(this, (SLToken *)v6, (SLTokenList *)&__p);
        goto LABEL_72;
      case 0xB:
        goto LABEL_58;
      case 0xC:
        v10 = 1;
LABEL_58:
        SLPostLexerImpl::HandleLiteral(this, (SLToken *)v6, v10, (SLTokenList *)&__p);
        goto LABEL_72;
      case 0xD:
        (*(void (**)(SLPostLexerImpl *, std::string::size_type, _QWORD))(*(_QWORD *)this + 104))(this, v6, 0);
        goto LABEL_72;
      case 0xE:
        goto LABEL_71;
      case 0x11:
        SLPostLexerImpl::HandleRomanNumeral(this, (SLToken *)v6, (SLTokenList *)&__p);
        goto LABEL_72;
      case 0x12:
        SLPostLexerImpl::HandleTime(this, (SLToken *)v6, (SLTokenList *)&__p);
        goto LABEL_72;
      case 0x13:
        SLPostLexerImpl::HandleElapsedTime(this, (SLToken *)v6, (SLTokenList *)&__p);
        goto LABEL_72;
      case 0x14:
        v11 = 16;
        goto LABEL_71;
      case 0x15:
        v11 = 17;
        goto LABEL_71;
      case 0x16:
        (*(void (**)(SLPostLexerImpl *, std::string::size_type, std::string *))(*(_QWORD *)this + 136))(this, v6, &__p);
        goto LABEL_72;
      case 0x17:
        SLPostLexerImpl::HandleMusicalKey(v8, (SLToken *)v6, (SLTokenList *)&__p);
        goto LABEL_72;
      case 0x18:
        SLPostLexerImpl::HandleDate(this, (SLToken *)v6, (SLTokenList *)&__p);
        goto LABEL_72;
      case 0x19:
        *((_DWORD *)this + 64) = *(_DWORD *)(v6 + 12);
        break;
      case 0x1A:
        SLPostLexerImpl::HandleFraction(this, (SLToken *)v6);
        goto LABEL_72;
      case 0x1B:
        v11 = 18;
LABEL_71:
        (*(void (**)(void))(**((_QWORD **)this + 22) + 8 * v11))();
        SLToken::~SLToken((SLToken *)v6);
        MEMORY[0x219A0649C]();
        goto LABEL_72;
      case 0x1C:
        SLPostLexerImpl::HandleGeoLoc(this, (SLToken *)v6, (SLTokenList *)&__p);
        goto LABEL_72;
      case 0x1D:
        SLPostLexerImpl::HandleDottedNumbers(this, (SLToken *)v6, (SLTokenList *)&__p);
        goto LABEL_72;
      case 0x1E:
        SLPostLexerImpl::HandleRange(this, (SLToken *)v6, (SLTokenList *)&__p);
      case 0x1F:
        SLPostLexerImpl::HandleNumericBullet(this, (SLToken *)v6, (SLTokenList *)&__p);
        goto LABEL_72;
      case 0x20:
        SLPostLexerImpl::HandleEmoji(this, (SLToken *)v6, (SLTokenList *)&__p);
        goto LABEL_72;
      case 0x21:
        SLPostLexerImpl::HandleIPA(this, (int64x2_t *)v6, (SLTokenList *)&__p);
LABEL_72:
        if (__p.__r_.__value_.__r.__words[2])
          SLPostLexerImpl::push_front(this, (const SLTokenList *)&__p);
        v9 = 0;
        v6 = (std::string::size_type)v2;
        break;
      default:
        break;
    }
    std::__list_imp<SLToken *>::clear(&__p);
    v2 = (const char *)v6;
LABEL_76:
    if (v9 == 1)
      return v2;
  }
  Class = SLTokenGetClass((unsigned __int8 *)v6);
  if (Class != 32)
  {
    if (Class <= 0x2F && ((1 << Class) & 0xC80000000000) != 0)
      *((_BYTE *)this + 260) = 0;
    return (const char *)v6;
  }
  v13 = *(_DWORD *)(v6 + 16);
  if ((v13 & 0x4000) != 0)
    *(_DWORD *)(v6 + 16) = v13 & 0xFFFFBFF7 | 8;
  if (!*(_BYTE *)v6
    && (unint64_t)(((uint64_t)(*(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56)) >> 1) - 3) <= 0xFFFFFFFFFFFFFFFDLL
    && !SLToken::HasTag((SLToken *)v6, 70))
  {
    *((_BYTE *)this + 244) = (*(_DWORD *)(v6 + 16) & 0x18) == 16;
  }
  if (SLPostLexerImpl::HasPossessive(this, (SLToken *)v6))
    SLPostLexerImpl::HandlePossessive(this, (SLToken *)v6);
  v14 = (SLToken *)SLLexerBuffer::operator[]((_QWORD *)this + 12, 0);
  if (v14)
  {
    v15 = v14;
    if (*(unsigned __int8 *)v14 - 1 <= 1)
      (*(void (**)(SLPostLexerImpl *, std::string::size_type, SLToken *))(*(_QWORD *)this + 120))(this, v6, v14);
    if ((*((_BYTE *)v15 + 18) & 1) != 0)
    {
      v16 = (SLPostLexerImpl *)SLLexerBuffer::operator[]((_QWORD *)this + 12, 1uLL);
      if (v16 && !*(_BYTE *)v16)
      {
        SLPostLexerImpl::Transcribe(v16, v16, 2, 0, ((uint64_t)(*((_QWORD *)v16 + 8) - *((_QWORD *)v16 + 7)) >> 1) - 1, &__p);
        SLTmpLookup::SLTmpLookup(v27, &__p, *((_QWORD *)this + 21));
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (v27[0])
          v17 = v28;
        else
          v17 = 0;
        SLPostLexerImpl::PredictRomanNumeral(this, v15, (SLToken *)v6, v17);
        SLTmpLookup::~SLTmpLookup((SLTmpLookup *)v27);
      }
      else
      {
        SLPostLexerImpl::PredictRomanNumeral(this, v15, (SLToken *)v6, 0);
      }
    }
    if (!*(_BYTE *)v15)
    {
      v18 = (char *)*((_QWORD *)v15 + 7);
      if (*((_QWORD *)v15 + 8) - (_QWORD)v18 == 4
        && (SLChar::sCharClass[*(_WORD *)v18 & 0x3F | (SLChar::sUniMap[(unint64_t)*(unsigned __int16 *)v18 >> 6] << 6)] & 0x9F) == 1
        && (*((_BYTE *)v15 + 17) & 0x40) == 0)
      {
        (*(void (**)(SLPostLexerImpl *, std::string::size_type, SLToken *))(*(_QWORD *)this + 128))(this, v6, v15);
      }
    }
  }
  if ((*((_BYTE *)this + 257) & 1) != 0 && SLToken::HasTag((SLToken *)v6, 68))
  {
    LODWORD(__p.__r_.__value_.__l.__data_) = 4521985;
    if ((SLToken::SelectHomographs((SLToken *)v6, 0x7FFFFFFF, (const SLWordTagSet *)&__p) & 1) == 0)
    {
      SLToken::SetType((SLToken *)v6, 11);
      v19 = *(_QWORD *)(v6 + 64);
      if (*(_WORD *)(v19 - 4) == 46)
      {
        v20 = *(_QWORD *)(v6 + 56) + 2 * ((v19 - *(_QWORD *)(v6 + 56)) >> 1);
        v21 = v20 - 4;
        v22 = v19 - (v20 - 2);
        if (v19 != v20 - 2)
          memmove((void *)(v20 - 4), (const void *)(v20 - 2), v19 - (v20 - 2));
        *(_QWORD *)(v6 + 64) = v21 + v22;
      }
      __p.__r_.__value_.__r.__words[0] = v6;
      std::deque<SLToken *>::push_front((uint64_t)this + 120, &__p);
      v9 = 2;
      goto LABEL_76;
    }
  }
  v23 = *(unsigned __int8 *)(v6 + 2);
  if (v23 == 5)
  {
    v24 = 1;
LABEL_93:
    *(_BYTE *)(v6 + 2) = v24;
    return (const char *)v6;
  }
  if (v23 != 1)
  {
    if (*(_BYTE *)(v6 + 2))
      return (const char *)v6;
    v24 = *((_BYTE *)this + 260);
    goto LABEL_93;
  }
  *((_BYTE *)this + 260) = 2;
  return (const char *)v6;
}

void sub_216FBA480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  SLTmpLookup::~SLTmpLookup((SLTmpLookup *)&a18);
  _Unwind_Resume(a1);
}

BOOL SLPostLexerImpl::HasPossessive(SLPostLexerImpl *this, SLToken *a2)
{
  SLToken *v4;
  _BOOL8 v5;
  SLToken *v6;
  SLPostLexerImpl *v7;
  std::string __p;

  v4 = (SLToken *)SLLexerBuffer::operator[]((_QWORD *)this + 12, 0);
  v5 = 0;
  if ((*((_BYTE *)a2 + 16) & 1) == 0)
  {
    v6 = v4;
    if (v4)
    {
      if (*(_BYTE *)v4)
        return 0;
      if (*((_QWORD *)v4 + 8) - *((_QWORD *)v4 + 7) != 6)
        return 0;
      if ((*((_BYTE *)v4 + 16) & 0x40) != 0)
        return 0;
      v7 = (SLPostLexerImpl *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 22) + 176))(*((_QWORD *)this + 22));
      if (!(_DWORD)v7)
        return 0;
      SLPostLexerImpl::Transcribe(v7, v6, 2, 0, ((uint64_t)(*((_QWORD *)v6 + 8) - *((_QWORD *)v6 + 7)) >> 1) - 1, &__p);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) == 2)
          return LOWORD(__p.__r_.__value_.__l.__data_) == 21287;
        return 0;
      }
      v5 = __p.__r_.__value_.__l.__size_ == 2 && *(_WORD *)__p.__r_.__value_.__l.__data_ == 21287;
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  return v5;
}

void SLPostLexerImpl::HandlePossessive(SLPostLexerImpl *this, SLToken *a2)
{
  char **v4;

  v4 = (char **)SLLexerBuffer::operator[]((_QWORD *)this + 12, 0);
  *(int64x2_t *)((char *)this + 152) = vaddq_s64(*(int64x2_t *)((char *)this + 152), (int64x2_t)xmmword_21701CDA0);
  std::deque<SLToken *>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)this + 120, 1);
  *((_WORD *)v4[7] + 1) += SLChar::sToUpper[*((_WORD *)v4[7] + 1) & 0x3F | (SLChar::sUniMap[(unint64_t)*((unsigned __int16 *)v4[7] + 1) >> 6] << 6)];
  SLToken::AppendToken(a2, v4);
  (*(void (**)(_QWORD, SLToken *))(**((_QWORD **)this + 22) + 192))(*((_QWORD *)this + 22), a2);
  SLToken::~SLToken((SLToken *)v4);
  JUMPOUT(0x219A0649CLL);
}

void SLPostLexerImpl::PredictRomanNumeral(SLPostLexerImpl *this, SLToken *a2, SLToken *a3, SLToken *a4)
{
  int v8;
  char IsRomanOrdinal;
  unsigned int v10;
  _WORD *v11;
  int v12;
  int v13;
  SLToken *v14;
  unsigned __int16 *v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  _BOOL8 HasTag;
  int v22;
  _DWORD v23[4];

  v8 = *((_DWORD *)a2 + 4);
  if ((v8 & 0x1000) != 0)
  {
    IsRomanOrdinal = SLPostLexerImpl::IsRomanOrdinal(this, a2);
    v8 = *((_DWORD *)a2 + 4);
    if ((IsRomanOrdinal & 1) == 0)
      goto LABEL_8;
  }
  if ((v8 & 0x200) != 0
    && ((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 22) + 176))(*((_QWORD *)this + 22)) & 1) == 0)
  {
LABEL_7:
    v8 = *((_DWORD *)a2 + 4);
LABEL_8:
    v10 = v8 & 0xFFFEFFFF;
LABEL_9:
    *((_DWORD *)a2 + 4) = v10;
    goto LABEL_36;
  }
  if (a3)
  {
    if (SLToken::HasTag(a3, 84))
      goto LABEL_7;
    if (SLToken::HasTag(a3, 82))
    {
      v11 = (_WORD *)*((_QWORD *)a2 + 7);
      if (*((_QWORD *)a2 + 8) - (_QWORD)v11 == 4 && *v11 == 73 && !*((_BYTE *)a3 + 5))
        goto LABEL_7;
      SLToken::SetType(a2, 17);
      v12 = 5373953;
      goto LABEL_34;
    }
  }
  if (a4 && SLToken::HasTag(a4, 88))
  {
    SLToken::SetType(a2, 17);
    v13 = *((_DWORD *)a2 + 4);
    if ((v13 & 0x400) == 0)
      *((_DWORD *)a2 + 4) = v13 | 0x20000;
    v23[0] = 5767169;
    v14 = a4;
    goto LABEL_35;
  }
  if (a3)
  {
    v15 = (unsigned __int16 *)*((_QWORD *)a2 + 7);
    v16 = *v15;
    if (memchr("XVI", v16, 4uLL))
    {
      v17 = *((_QWORD *)a2 + 8) - (_QWORD)v15;
      if (v17 == 4)
      {
        if ((*((_BYTE *)a2 + 16) & 1) == 0)
        {
          if ((SLPostLexerImpl::IsInitial(this, a2, 1uLL) & 1) != 0)
            return;
          v16 = **((unsigned __int16 **)a2 + 7);
        }
        if (v16 == 73 || v16 == 88)
        {
          if (!SLToken::HasTag(a3, 80))
            goto LABEL_7;
          goto LABEL_31;
        }
      }
      if (SLToken::HasTag(a3, 80))
      {
LABEL_31:
        SLToken::SetType(a2, 17);
        v18 = *((_DWORD *)a2 + 4);
        if ((v18 & 0x400) == 0)
          *((_DWORD *)a2 + 4) = v18 | 0x420000;
        v12 = 5242881;
LABEL_34:
        v23[0] = v12;
        v14 = a3;
LABEL_35:
        SLToken::SelectHomographs(v14, 0x7FFFFFFF, (const SLWordTagSet *)v23);
        goto LABEL_36;
      }
      if (a4 && v17 == 4 && SLToken::HasTag(a4, 64))
        goto LABEL_7;
      HasTag = SLToken::HasTag(a3, 64);
      if (HasTag)
      {
        SLToken::SetType(a2, 17);
        v23[0] = 4194305;
        SLToken::SelectHomographs(a3, 1, (const SLWordTagSet *)v23);
      }
      else
      {
        if (!SLPostLexerImpl::LooksLikeName((SLPostLexerImpl *)HasTag, a3, 0))
          goto LABEL_36;
        SLToken::SetType(a2, 17);
      }
      v22 = *((_DWORD *)a2 + 4);
      if ((v22 & 0x400) == 0)
      {
        v10 = v22 | 0x420000;
        goto LABEL_9;
      }
    }
  }
LABEL_36:
  v19 = *((_DWORD *)a2 + 4);
  if (*(_BYTE *)a2 == 17)
  {
    if ((*((_DWORD *)a2 + 4) & 0x1400) != 0x1000)
      return;
    v20 = v19 | 0x20000;
  }
  else
  {
    v20 = v19 & 0xFFFFFBFF;
  }
  *((_DWORD *)a2 + 4) = v20;
}

_QWORD *SLPostLexerImpl::HandleAlpha(SLPostLexerImpl *this, SLToken *a2)
{
  SLPostLexerImpl *v4;
  SLToken *v5;
  SLPostLexerImpl *v6;
  char *v7;
  uint64_t IsInitial;
  uint64_t v9;
  unint64_t v10;
  char **Unit;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char **v26;
  uint64_t v27;
  std::string __p;
  _BYTE v30[8];
  SLToken *v31;
  _QWORD v32[4];

  SLTokenList::SLTokenList((SLTokenList *)v32);
  v4 = (SLPostLexerImpl *)SLLexerBuffer::operator[]((_QWORD *)this + 12, 0);
  v5 = v4;
  if (v4)
  {
    v4 = (SLPostLexerImpl *)SLLexerBuffer::operator[]((_QWORD *)this + 12, 1uLL);
    v6 = v4;
    v7 = (char *)a2 + 16;
    if ((*((_BYTE *)a2 + 18) & 1) != 0 && !*(_BYTE *)v5)
    {
      SLPostLexerImpl::Transcribe(v4, v5, 2, 0, ((uint64_t)(*((_QWORD *)v5 + 8) - *((_QWORD *)v5 + 7)) >> 1) - 1, &__p);
      SLTmpLookup::SLTmpLookup(v30, &__p, *((_QWORD *)this + 21));
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v30[0])
      {
        SLPostLexerImpl::PredictRomanNumeral(this, a2, 0, v31);
        if (*(_BYTE *)a2 == 17)
        {
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
          std::deque<SLToken *>::push_front((uint64_t)this + 120, &__p);
          SLTmpLookup::~SLTmpLookup((SLTmpLookup *)v30);
          return std::__list_imp<SLToken *>::clear(v32);
        }
      }
      SLTmpLookup::~SLTmpLookup((SLTmpLookup *)v30);
    }
  }
  else
  {
    v6 = 0;
    v7 = (char *)a2 + 16;
  }
  SLPostLexerImpl::Classify(v4, a2);
  v9 = (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 1;
  v10 = v9 - 1;
  if (v9 == 4)
  {
    if (v5 && *(_BYTE *)v5 == 1)
    {
      Unit = (char **)SLPostLexerImpl::FindUnit(this, a2, 0, v10, 36);
      if (Unit)
        goto LABEL_24;
      v13 = ((uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 1) - 1;
    }
    else
    {
      v13 = 3;
    }
    v14 = SLPostLexerImpl::FindUnit(this, a2, 0, v13, 60);
    if (v14 && (SLPostLexerImpl::HandleDayAbbr((uint64_t)this, v14, (uint64_t)a2) & 1) != 0)
      return std::__list_imp<SLToken *>::clear(v32);
    goto LABEL_35;
  }
  if (v9 != 3)
  {
    if (v9 == 2)
    {
      if (*((_BYTE *)a2 + 5))
      {
        IsInitial = SLPostLexerImpl::IsInitial(this, a2, 0);
        if ((IsInitial & 1) != 0)
          return std::__list_imp<SLToken *>::clear(v32);
      }
      if (v6)
      {
        if (*(_BYTE *)v5 == 13
          && *(_BYTE *)v6 == 13
          && ((*((_DWORD *)v5 + 4) | *(_DWORD *)v7) & 1) == 0
          && **((_WORD **)v5 + 7) == 46)
        {
          *(int64x2_t *)((char *)this + 152) = vaddq_s64(*(int64x2_t *)((char *)this + 152), (int64x2_t)xmmword_21701CDA0);
          std::deque<SLToken *>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)this + 120, 1);
          SLToken::~SLToken(v5);
          MEMORY[0x219A0649C]();
          SLToken::SetType(a2, 11);
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
          std::deque<SLToken *>::push_front((uint64_t)this + 120, &__p);
          return std::__list_imp<SLToken *>::clear(v32);
        }
      }
      else if (!v5)
      {
        goto LABEL_47;
      }
      if ((*v7 & 1) != 0)
      {
        v16 = 1;
        if (!v5)
          goto LABEL_87;
LABEL_51:
        if (!v16)
          goto LABEL_87;
        if (*(_BYTE *)v5)
          goto LABEL_87;
        if (*((_QWORD *)v5 + 8) - *((_QWORD *)v5 + 7) != 4)
          goto LABEL_87;
        SLPostLexerImpl::Classify((SLPostLexerImpl *)IsInitial, v5);
        if (*((unsigned __int8 *)a2 + 5) != *((unsigned __int8 *)v5 + 5))
          goto LABEL_87;
        v17 = **((unsigned __int16 **)a2 + 7);
        v18 = **((unsigned __int16 **)v5 + 7);
        SLToken::SetType(a2, 11);
        v19 = 1;
        do
        {
          v20 = (unsigned __int8 *)SLLexerBuffer::operator[]((_QWORD *)this + 12, v19 - 1);
          v21 = v20;
          if (!v20)
            break;
          if (*v20)
            break;
          if (*((_QWORD *)v20 + 8) - *((_QWORD *)v20 + 7) != 4)
            break;
          SLPostLexerImpl::Classify((SLPostLexerImpl *)v20, (SLToken *)v20);
          if (*((unsigned __int8 *)a2 + 5) != v21[5])
            break;
          SLToken::SetType((SLToken *)v21, 11);
          ++v19;
        }
        while ((v21[16] & 1) != 0);
        if (v17 == v18 && v19 == 2)
          *((_BYTE *)SLLexerBuffer::operator[]((_QWORD *)this + 12, 0) + 2) = 3;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
        std::deque<SLToken *>::push_front((uint64_t)this + 120, &__p);
        return std::__list_imp<SLToken *>::clear(v32);
      }
LABEL_47:
      IsInitial = (*(uint64_t (**)(SLPostLexerImpl *, _QWORD))(*(_QWORD *)this + 80))(this, **((unsigned __int16 **)a2 + 7));
      if (!(_DWORD)IsInitial)
      {
        SLToken::SetType(a2, 11);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
        std::deque<SLToken *>::push_front((uint64_t)this + 120, &__p);
        return std::__list_imp<SLToken *>::clear(v32);
      }
      v16 = *v7 & 1;
      if (!v5)
      {
LABEL_87:
        SLPostLexerImpl::HandleApostrophes(this, a2, (SLTokenList *)v32);
        SLPostLexerImpl::push_front(this, (const SLTokenList *)v32);
        return std::__list_imp<SLToken *>::clear(v32);
      }
      goto LABEL_51;
    }
LABEL_35:
    if (!v5 && (v7[2] & 4) == 0)
      goto LABEL_87;
    v15 = SLPostLexerImpl::FindUnit(this, a2, 0, ((uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 1) - 1, 62);
    if (!v15 || (SLPostLexerImpl::HandleMonthAbbr((uint64_t)this, v15, (uint64_t)a2) & 1) == 0)
      goto LABEL_87;
    return std::__list_imp<SLToken *>::clear(v32);
  }
  if (!v5 || *((_BYTE *)a2 + 5) != 2)
  {
    if (v5 && *(_BYTE *)v5 == 1)
    {
LABEL_42:
      Unit = (char **)SLPostLexerImpl::FindUnit(this, a2, 0, v10, 36);
      if (!Unit)
        goto LABEL_87;
LABEL_24:
      SLPostLexerImpl::HandleCurrency((uint64_t)this, Unit, a2);
      return std::__list_imp<SLToken *>::clear(v32);
    }
LABEL_76:
    if (v6 && (*v7 & 1) == 0 && *(_BYTE *)v5 == 13 && **((_WORD **)v5 + 7) == 46 && *(_BYTE *)v6 == 1)
    {
      SLToken::AppendToken(a2, (char **)v5);
      v26 = (char **)SLPostLexerImpl::FindUnit(this, a2, 0, ((uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 1) - 1, 36);
      if (v26)
      {
        *(int64x2_t *)((char *)this + 152) = vaddq_s64(*(int64x2_t *)((char *)this + 152), (int64x2_t)xmmword_21701CDA0);
        std::deque<SLToken *>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)this + 120, 1);
        SLToken::~SLToken(v5);
        MEMORY[0x219A0649C]();
        SLPostLexerImpl::HandleCurrency((uint64_t)this, v26, a2);
        return std::__list_imp<SLToken *>::clear(v32);
      }
      v27 = *((_QWORD *)a2 + 8);
      *(_WORD *)(v27 - 4) = 0;
      *((_QWORD *)a2 + 8) = v27 - 2;
      --*((_QWORD *)a2 + 5);
      *((_DWORD *)a2 + 4) &= ~1u;
    }
    goto LABEL_87;
  }
  v12 = *(unsigned __int8 *)v5;
  if (v12 != 2)
  {
    if (v12 == 1)
    {
      if ((*((_BYTE *)v5 + 17) & 0x10) == 0 && *((_QWORD *)v5 + 8) - *((_QWORD *)v5 + 7) == 12)
        goto LABEL_67;
      goto LABEL_42;
    }
    goto LABEL_76;
  }
  if (*((_QWORD *)v5 + 8) - *((_QWORD *)v5 + 7) != 22)
    goto LABEL_76;
LABEL_67:
  v22 = SLPostLexerImpl::FindUnit(this, a2, 0, v10, 58);
  if (!v22)
    goto LABEL_87;
  if (*(_BYTE *)v5 == 2)
  {
    v23 = 0;
    v24 = *((_QWORD *)v5 + 7);
    do
    {
      if (v23 == 10)
      {
        if (SLChar::sCharClass[*(_WORD *)(v24 + 10) & 0x3F | (SLChar::sUniMap[(unint64_t)*(unsigned __int16 *)(v24 + 10) >> 6] << 6)] != 6)
          goto LABEL_87;
      }
      else if (SLChar::sCharClass[*(_WORD *)(v24 + v23) & 0x3F | (SLChar::sUniMap[(unint64_t)*(unsigned __int16 *)(v24 + v23) >> 6] << 6)] != 2)
      {
        goto LABEL_87;
      }
      v23 += 2;
    }
    while (v23 != 20);
    v25 = 7;
  }
  else
  {
    v25 = 11;
  }
  SLToken::SetType(v5, v25);
  (*(void (**)(_QWORD, uint64_t, _QWORD *, _QWORD, _QWORD))(**((_QWORD **)this + 22) + 232))(*((_QWORD *)this + 22), v22, v32, *((_QWORD *)a2 + 4), *((_QWORD *)a2 + 5));
  SLPostLexerImpl::push_front(this, (const SLTokenList *)v32);
  SLToken::~SLToken(a2);
  MEMORY[0x219A0649C]();
  return std::__list_imp<SLToken *>::clear(v32);
}

void sub_216FBAFD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18)
{
  std::__list_imp<SLToken *>::clear(&a18);
  _Unwind_Resume(a1);
}

void SLPostLexerImpl::HandleNumber(SLPostLexerImpl *this, SLToken *a2, SLTokenList *a3)
{
  int v6;
  uint64_t (***v7)(_QWORD);
  uint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  BOOL v12;
  int v13;
  char **v14;
  char *v15;
  SLToken **v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  SLToken *v22;
  SLToken *v23;
  uint64_t v24;
  unint64_t v25;
  _BOOL4 v26;
  char v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  char **v31;
  unint64_t v32;
  SLPostLexerImpl *v33;
  SLToken *v34;
  int v35;
  uint64_t CommonCountable;
  _WORD *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  _BOOL4 v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  _BOOL4 v45;
  unsigned int v46;
  uint64_t v47;
  _BOOL4 v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  SLPostLexerImpl *v52;
  uint64_t v53;
  SLTokenList *v54;
  uint64_t v55;
  char v56;
  void (*v57)(void);
  uint64_t v58;
  unsigned __int8 **Unit;
  int v60;
  _BOOL4 v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  SLToken *v66;
  char *v67;
  SLToken *v68;
  SLToken *v69;
  int v70;
  uint64_t v71;
  unint64_t v72;
  SLToken *v73;
  uint64_t UnitModifier;
  _BOOL4 v75;
  uint64_t v76;
  unint64_t v77;
  SLToken *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char v83;
  char v84[8];
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  SLToken *v89;
  CFRange v90;
  CFRange v91;

  if ((*((_BYTE *)this + 256) & 0x20) != 0)
  {
    if (SLPostLexerImpl::HasPossessive(this, a2))
    {
      v14 = (char **)SLLexerBuffer::operator[]((_QWORD *)this + 12, 0);
      *(int64x2_t *)((char *)this + 152) = vaddq_s64(*(int64x2_t *)((char *)this + 152), (int64x2_t)xmmword_21701CDA0);
      std::deque<SLToken *>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)this + 120, 1);
      SLToken::AppendToken(a2, v14);
      if (v14)
      {
        SLToken::~SLToken((SLToken *)v14);
        MEMORY[0x219A0649C]();
      }
    }
LABEL_20:
    SLToken::SetType(a2, 11);
    v78 = a2;
    v15 = (char *)this + 120;
    v16 = &v78;
LABEL_21:
    std::deque<SLToken *>::push_front((uint64_t)v15, v16);
    return;
  }
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 0x800000) != 0)
  {
    SLPostLexerImpl::HandleElapsedSymbol(this, a2, a3);
    return;
  }
  if ((v6 & 0x1000) == 0
    && ((*(uint64_t (**)(SLPostLexerImpl *, SLToken *))(*(_QWORD *)this + 200))(this, a2) & 1) != 0)
  {
    goto LABEL_20;
  }
  if ((SLPostLexerImpl::HandleTokenInDictionary(this, a2) & 1) == 0
    && !SLPostLexerImpl::HandleURLInSymbols(this, a2, a3))
  {
    v7 = SLLexerBuffer::operator[]((_QWORD *)this + 12, 0);
    v8 = (uint64_t)v7;
    v9 = *((unsigned int *)a2 + 4);
    v10 = 0;
    if (v7)
    {
      v11 = *(unsigned __int8 *)v7;
      if (*(_BYTE *)v7)
        v12 = v11 == 11;
      else
        v12 = 1;
      v13 = v12;
      if (v11 != 13 || (v9 & 1) != 0)
      {
        v75 = 0;
      }
      else
      {
        v75 = memchr("%+", *(unsigned __int16 *)v7[7], 3uLL) != 0;
        v10 = 1;
      }
    }
    else
    {
      v13 = 0;
      v75 = 0;
    }
    v17 = v9 & 0x20000;
    v76 = (v9 >> 17) & 1;
    if ((v9 & 0x1000) == 0)
    {
      v18 = ((uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 1) - 1;
      if (v17)
        goto LABEL_30;
      if ((v9 & 1) != 0 && v13 == 1)
        goto LABEL_55;
      if (!v10)
        goto LABEL_105;
      if (**(_WORD **)(v8 + 56) != 35)
      {
LABEL_30:
        if (((v10 ^ 1 | ((v9 & 0x80) >> 7)) & 1) == 0)
        {
          v19 = **(unsigned __int16 **)(v8 + 56);
          if (v19 == **(char **)(*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 22) + 216))(*((_QWORD *)this + 22), 207)&& (*(_BYTE *)(v8 + 16) & 1) == 0)
          {
            SLPostLexerImpl::HandleThousandsSeparators(this, a2, 35);
            return;
          }
        }
      }
      else
      {
LABEL_55:
        if ((*((_BYTE *)this + 257) & 1) != 0)
          goto LABEL_105;
        if ((~(_DWORD)v9 & 0x200001) != 0)
        {
          v38 = *(_QWORD *)(v8 + 64) - *(_QWORD *)(v8 + 56);
        }
        else
        {
          v37 = *(_WORD **)(v8 + 56);
          v38 = *(_QWORD *)(v8 + 64) - (_QWORD)v37;
          if (v38 == 4)
          {
            if ((SLChar::sCharClass[*v37 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v37 >> 6] << 6)] & 0x1F) == 1)
              goto LABEL_105;
            v38 = 4;
          }
        }
        Unit = (unsigned __int8 **)SLPostLexerImpl::FindUnit(this, (SLToken *)v8, 0, (v38 >> 1) - 1, 124);
        if (Unit
          || (Unit = (unsigned __int8 **)SLPostLexerImpl::FindUnit(this, (SLToken *)v8, 0, ((uint64_t)(*(_QWORD *)(v8 + 64) - *(_QWORD *)(v8 + 56)) >> 1) - 1, 35)) != 0)
        {
          v60 = **Unit;
          if ((v60 - 43) > 0x15 || ((1 << (v60 - 43)) & 0x200005) == 0)
          {
            v84[0] = 0;
            if ((*(_BYTE *)(v8 + 16) & 1) != 0)
            {
              v70 = 0;
              UnitModifier = 0;
            }
            else
            {
              v68 = (SLToken *)SLLexerBuffer::operator[]((_QWORD *)this + 12, 1uLL);
              v69 = (SLToken *)SLLexerBuffer::operator[]((_QWORD *)this + 12, 2uLL);
              UnitModifier = SLPostLexerImpl::FindUnitModifier(this, v68, v69, v84);
              v70 = v84[0];
              v60 = **Unit;
            }
            if (v60 != 33
              || v70
              || !SLLexerBuffer::operator[]((_QWORD *)this + 12, 1uLL)
              || *(_BYTE *)SLLexerBuffer::operator[]((_QWORD *)this + 12, 1uLL) == 13)
            {
              v71 = *(_QWORD *)(v8 + 40);
              v77 = *(_QWORD *)(v8 + 32);
              *(int64x2_t *)((char *)this + 152) = vaddq_s64(*(int64x2_t *)((char *)this + 152), (int64x2_t)xmmword_21701CDA0);
              std::deque<SLToken *>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)this + 120, 1);
              if (!v70)
              {
                v72 = *(unsigned __int16 *)(*(_QWORD *)(v8 + 64) - 4);
                if ((SLChar::sCharClass[v72 & 0x3F | (SLChar::sUniMap[v72 >> 6] << 6)] & 0x9F) == 0x81
                  && SLPostLexerImpl::FollowedByPeriod(this, (SLToken *)v8))
                {
                  v73 = (SLToken *)SLLexerBuffer::operator[]((_QWORD *)this + 12, 0);
                  *(int64x2_t *)((char *)this + 152) = vaddq_s64(*(int64x2_t *)((char *)this + 152), (int64x2_t)xmmword_21701CDA0);
                  std::deque<SLToken *>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)this + 120, 1);
                  if (v73)
                  {
                    SLToken::~SLToken(v73);
                    MEMORY[0x219A0649C]();
                  }
                  ++v71;
                }
              }
              SLToken::~SLToken((SLToken *)v8);
              MEMORY[0x219A0649C]();
              SLDissecter::DissectNumber(*((_QWORD *)this + 23), (uint64_t)a2, 0, v18, (uint64_t)&v78);
              (*(void (**)(_QWORD, SLToken *, SLTokenList *, SLToken **, _QWORD, _QWORD))(**((_QWORD **)this + 22) + 48))(*((_QWORD *)this + 22), a2, a3, &v78, 0, 0);
              v48 = BYTE2(v78) == 0;
              v51 = (char)v70;
              v52 = this;
              v53 = (uint64_t)Unit;
              v54 = a3;
              v50 = v77;
              v49 = v71;
              v55 = UnitModifier;
              goto LABEL_83;
            }
          }
        }
      }
LABEL_105:
      SLDissecter::DissectNumber(*((_QWORD *)this + 23), (uint64_t)a2, 0, v18, (uint64_t)&v78);
      if (v8)
      {
        v62 = v75;
        if ((*((_DWORD *)a2 + 4) & 0x8000) == 0 && !*(_BYTE *)v8)
        {
          *(_DWORD *)(v8 + 16) |= 0x40000u;
          if (v82 - 1 <= 0x1F)
          {
            v63 = SLPostLexerImpl::FindUnit(this, (SLToken *)v8, 0, ((uint64_t)(*(_QWORD *)(v8 + 64) - *(_QWORD *)(v8 + 56)) >> 1) - 1, 62);
            if (v63)
            {
              v64 = v63;
              *(int64x2_t *)((char *)this + 152) = vaddq_s64(*(int64x2_t *)((char *)this + 152), (int64x2_t)xmmword_21701CDA0);
              std::deque<SLToken *>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)this + 120, 1);
              if ((SLPostLexerImpl::HandleMonthAbbr((uint64_t)this, v64, v8) & 1) != 0)
              {
                v76 = 513;
              }
              else
              {
                *(_QWORD *)v84 = v8;
                std::deque<SLToken *>::push_front((uint64_t)this + 120, v84);
              }
              goto LABEL_114;
            }
          }
        }
      }
      else
      {
        v62 = v75;
      }
      if (!v8)
      {
LABEL_119:
        v65 = v76 | ((unint64_t)*((unsigned int *)a2 + 4) >> 3) & 0x80;
        if ((*((_BYTE *)this + 256) & 0x40) != 0 || v65 || v18 != 4 || v62 || v79 != 4 || v82 < 0x44C || v82 > 0x833)
        {
          (*(void (**)(_QWORD, SLToken *, SLTokenList *, SLToken **, unint64_t, _QWORD))(**((_QWORD **)this + 22) + 48))(*((_QWORD *)this + 22), a2, a3, &v78, v65, 0);
          if (v62 && !*(_BYTE *)(v8 + 1))
            *((_BYTE *)a3 + 24) = 2;
          goto LABEL_131;
        }
        v57 = *(void (**)(void))(**((_QWORD **)this + 22) + 96);
        goto LABEL_127;
      }
LABEL_114:
      if ((v9 & 1) == 0 && *(_BYTE *)v8 == 26 && !v80 && !v81)
        *(_DWORD *)(v8 + 16) |= 0x400u;
      goto LABEL_119;
    }
    SLDissecter::DissectUnit(*((_QWORD *)this + 23), (uint64_t)a2, (uint64_t)v84);
    v21 = v85;
    v20 = v86;
    v83 = 0;
    if ((v9 & 1) != 0)
    {
      v24 = 0;
    }
    else
    {
      v22 = (SLToken *)SLLexerBuffer::operator[]((_QWORD *)this + 12, 0);
      v23 = (SLToken *)SLLexerBuffer::operator[]((_QWORD *)this + 12, 1uLL);
      v24 = SLPostLexerImpl::FindUnitModifier(this, v22, v23, &v83);
    }
    if (v88 == 1)
    {
      v25 = *(unsigned __int16 *)(*((_QWORD *)a2 + 7) + 2 * v87);
      v26 = (SLChar::sCharClass[v25 & 0x3F | (SLChar::sUniMap[v25 >> 6] << 6)] & 0x1F) == 1;
    }
    else
    {
      v26 = 0;
    }
    v27 = v83;
    if (v83 || (!v84[0] ? (v28 = 1) : (v28 = v26), (v28 & 1) == 0))
    {
      v31 = (char **)SLPostLexerImpl::FindUnit(this, a2, v87, ((uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 1) - 1, 124);
      if (!v31)
      {
        v31 = (char **)SLPostLexerImpl::FindUnit(this, a2, v87, ((uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 1) - 1, 35);
        if (v31 || !v84[0])
        {
LABEL_63:
          if (!v31)
            goto LABEL_84;
          goto LABEL_64;
        }
        CommonCountable = SLPostLexerImpl::FindCommonCountable(this, a2, v87);
LABEL_62:
        v31 = (char **)CommonCountable;
        goto LABEL_63;
      }
    }
    else
    {
      v29 = v87;
      if (!v26)
      {
        v32 = ((uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 1) - 1;
        v33 = this;
        v34 = a2;
        v35 = 35;
        goto LABEL_61;
      }
      v30 = *((_QWORD *)a2 + 7);
      if ((SLChar::sCharClass[*(_WORD *)(v30 + 2 * v87) & 0x3F | (SLChar::sUniMap[(unint64_t)*(unsigned __int16 *)(v30 + 2 * v87) >> 6] << 6)] & 0x9F) != 0x81)
      {
        v66 = (SLToken *)operator new();
        SLToken::SLToken(v66, 11, *((_DWORD *)a2 + 4) & 1);
        *((_DWORD *)a2 + 4) &= 0xFFFFEFFE;
        v91.location = ((uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 1) - 2;
        v91.length = 1;
        SLToken::TransferTokenRange(v66, a2, v91);
        if (v84[0])
        {
          v90.location = ((uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 1) - 2;
          v90.length = 1;
          SLToken::RemoveRange(a2, v90);
        }
        v78 = v66;
        v67 = (char *)this + 120;
        std::deque<SLToken *>::push_front((uint64_t)v67, &v78);
        v78 = a2;
        v16 = &v78;
        v15 = v67;
        goto LABEL_21;
      }
      v31 = (char **)SLPostLexerImpl::FindUnit(this, a2, v87, ((*((_QWORD *)a2 + 8) - v30) >> 1) - 1, 35);
      if (!v31)
      {
        v29 = v87;
        v32 = ((uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 1) - 1;
        v33 = this;
        v34 = a2;
        v35 = 124;
LABEL_61:
        CommonCountable = SLPostLexerImpl::FindUnit(v33, v34, v29, v32, v35);
        goto LABEL_62;
      }
    }
LABEL_64:
    v39 = (uint64_t)*v31;
    v40 = **v31;
    v41 = v17 != 0;
    if (v40 != 64)
    {
      v42 = v21;
      v43 = v24;
      if (v40 == 45)
      {
        v45 = 0;
        v31 = 0;
        v44 = 1;
      }
      else
      {
        v44 = 0;
        if (v40 == 43)
        {
          v31 = 0;
          v76 |= 2uLL;
          v45 = 1;
        }
        else
        {
          v45 = 0;
        }
      }
      goto LABEL_77;
    }
    v46 = *(char *)(v39 + 1);
    if ((v46 & 0x80000000) != 0 || (*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v46 + 60) & 0x400) == 0)
    {
LABEL_72:
      v42 = v21;
      v43 = v24;
      v44 = 0;
      v31 = 0;
      v45 = v46 == 43;
      v47 = 3;
      if (v46 != 43)
        v47 = 1;
      v76 = v47;
      v41 = 1;
LABEL_77:
      SLDissecter::DissectNumber(*((_QWORD *)this + 23), (uint64_t)a2, v42, v20, (uint64_t)&v78);
      if (!v41 && !v45 || !v84[0] && !v81)
      {
        if (!v31)
        {
          if (((v44 | v41 | !v45 | ((*((_BYTE *)this + 256) & 0x40) >> 6)) & 1) != 0
            || v20 != 4
            || v75
            || v79 != 4
            || v82 < 0x44C
            || v82 > 0x833)
          {
            (*(void (**)(_QWORD, SLToken *, SLTokenList *, SLToken **, uint64_t, uint64_t))(**((_QWORD **)this + 22) + 48))(*((_QWORD *)this + 22), a2, a3, &v78, v76, v88);
            if (v44)
            {
              v58 = *(_QWORD *)(*(_QWORD *)a3 + 16);
              if (v58)
              {
                (*(void (**)(SLPostLexerImpl *, uint64_t, unint64_t, unint64_t))(*(_QWORD *)this + 208))(this, v58, *((_QWORD *)a2 + 7) + 2 * v87, *((_QWORD *)a2 + 7) + 2 * v87 + 2 * v88);
                *(_DWORD *)(v58 + 16) = *(_DWORD *)(v58 + 16) & 0xFFFFBFBF | 0x4000;
                *(_BYTE *)(v58 + 3) = 0;
              }
            }
            goto LABEL_131;
          }
          v57 = *(void (**)(void))(**((_QWORD **)this + 22) + 96);
LABEL_127:
          v57();
          goto LABEL_131;
        }
        (*(void (**)(_QWORD, SLToken *, SLTokenList *, SLToken **, _QWORD, _QWORD))(**((_QWORD **)this + 22)
                                                                                             + 48))(*((_QWORD *)this + 22), a2, a3, &v78, 0, 0);
        v48 = (v84[0] | BYTE2(v78)) == 0;
        v49 = v88;
        v50 = v87 + *((_QWORD *)a2 + 4);
        v87 = v50;
        v51 = v27;
        v52 = this;
        v53 = (uint64_t)v31;
        v54 = a3;
        v55 = v43;
LABEL_83:
        SLPostLexerImpl::AppendFullUnit((uint64_t)v52, v53, (uint64_t)v54, v50, v49, v48, v55, v51);
LABEL_131:
        SLToken::~SLToken(a2);
        MEMORY[0x219A0649C]();
        return;
      }
      goto LABEL_84;
    }
    if (*(unsigned __int16 *)(*((_QWORD *)a2 + 7) + 2 * v20 - 2) == v46)
    {
      LOBYTE(v46) = *(_BYTE *)(v39 + 2);
      goto LABEL_72;
    }
LABEL_84:
    SLDissecter::DissectNumber(*((_QWORD *)this + 23), (uint64_t)a2, v85, v86, (uint64_t)&v78);
    if (v80)
      v56 = 7;
    else
      v56 = 2;
    SLToken::SetType(a2, v56);
    *((_DWORD *)a2 + 4) &= ~0x1000u;
    v89 = a2;
    v15 = (char *)this + 120;
    v16 = &v89;
    goto LABEL_21;
  }
}

void sub_216FBBC74(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A0649C](v1, 0x10F0C4034644DEDLL);
  _Unwind_Resume(a1);
}

_QWORD *SLPostLexerImpl::HandleFraction(SLPostLexerImpl *this, SLToken *a2)
{
  unsigned int v4;
  SLToken *v5;
  SLToken *v6;
  SLToken *v7;
  SLToken *v8;
  uint64_t UnitModifier;
  char **Unit;
  unsigned int v11;
  BOOL v12;
  int v13;
  BOOL v14;
  SLToken *v15;
  _BYTE **v16;
  SLToken *v17;
  SLToken *v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  SLToken *v25;
  uint64_t v27;
  char v28;
  char v29[24];
  unint64_t v30;
  uint64_t v31;
  _QWORD v32[4];
  CFRange v33;

  SLTokenList::SLTokenList((SLTokenList *)v32);
  v4 = *((_DWORD *)a2 + 4);
  if ((v4 & 0x1000) != 0)
  {
    SLDissecter::DissectUnit(*((_QWORD *)this + 23), (uint64_t)a2, (uint64_t)v29);
    v28 = 0;
    if ((*((_BYTE *)a2 + 16) & 1) != 0)
    {
      UnitModifier = 0;
    }
    else
    {
      v7 = (SLToken *)SLLexerBuffer::operator[]((_QWORD *)this + 12, 0);
      v8 = (SLToken *)SLLexerBuffer::operator[]((_QWORD *)this + 12, 1uLL);
      UnitModifier = SLPostLexerImpl::FindUnitModifier(this, v7, v8, &v28);
    }
    Unit = (char **)SLPostLexerImpl::FindUnit(this, a2, v30, ((uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 1) - 1, 124);
    if ((Unit
       || (Unit = (char **)SLPostLexerImpl::FindUnit(this, a2, v30, ((uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 1) - 1, 35)) != 0)&& ((v11 = **Unit - 43, v12 = v11 > 0x15, v13 = (1 << v11) & 0x200005, !v12) ? (v14 = v13 == 0) : (v14 = 1), v14))
    {
      (*(void (**)(_QWORD, SLToken *, _QWORD *))(**((_QWORD **)this + 22) + 80))(*((_QWORD *)this + 22), a2, v32);
      v30 += *((_QWORD *)a2 + 4);
      SLPostLexerImpl::AppendFullUnit((uint64_t)this, (uint64_t)Unit, (uint64_t)v32, v30, v31, (v4 >> 10) & 1, UnitModifier, v28);
    }
    else
    {
      v15 = (SLToken *)operator new();
      SLToken::SLToken(v15, 0, *((_DWORD *)a2 + 4) & 1);
      v33.location = v29[0] + 1;
      v33.length = ((uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 1) - v29[0] - 2;
      SLToken::SetTokenRange(v15, a2, v33);
      *((_BYTE *)v15 + 1) = 2;
      (*(void (**)(_QWORD, SLToken *, _QWORD *))(**((_QWORD **)this + 22) + 80))(*((_QWORD *)this + 22), a2, v32);
      SLTokenList::push_back((SLTokenList *)v32, v15);
    }
  }
  else
  {
    v5 = (SLToken *)SLLexerBuffer::operator[]((_QWORD *)this + 12, 0);
    v6 = v5;
    if (!v5)
      goto LABEL_4;
    if (*(_BYTE *)v5)
      goto LABEL_4;
    v16 = (_BYTE **)SLPostLexerImpl::FindUnit(this, v5, 0, ((uint64_t)(*((_QWORD *)v5 + 8) - *((_QWORD *)v5 + 7)) >> 1) - 1, 124);
    if (!v16)
    {
      v16 = (_BYTE **)SLPostLexerImpl::FindUnit(this, v6, 0, ((uint64_t)(*((_QWORD *)v6 + 8) - *((_QWORD *)v6 + 7)) >> 1) - 1, 35);
      if (!v16)
        goto LABEL_4;
    }
    v29[0] = 0;
    if ((*((_BYTE *)v6 + 16) & 1) != 0)
    {
      v20 = 0;
      v19 = 0;
    }
    else
    {
      v17 = (SLToken *)SLLexerBuffer::operator[]((_QWORD *)this + 12, 1uLL);
      v18 = (SLToken *)SLLexerBuffer::operator[]((_QWORD *)this + 12, 2uLL);
      v19 = SLPostLexerImpl::FindUnitModifier(this, v17, v18, v29);
      v20 = v29[0];
    }
    v21 = **v16 == 33 && v20 == 0;
    if (!v21
      || !SLLexerBuffer::operator[]((_QWORD *)this + 12, 1uLL)
      || *(_BYTE *)SLLexerBuffer::operator[]((_QWORD *)this + 12, 1uLL) == 13)
    {
      v27 = v19;
      v22 = *((_QWORD *)v6 + 4);
      v23 = *((_QWORD *)v6 + 5);
      *(int64x2_t *)((char *)this + 152) = vaddq_s64(*(int64x2_t *)((char *)this + 152), (int64x2_t)xmmword_21701CDA0);
      std::deque<SLToken *>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)this + 120, 1);
      if (!v20)
      {
        v24 = *(unsigned __int16 *)(*((_QWORD *)v6 + 8) - 4);
        if ((SLChar::sCharClass[v24 & 0x3F | (SLChar::sUniMap[v24 >> 6] << 6)] & 0x9F) == 0x81
          && SLPostLexerImpl::FollowedByPeriod(this, v6))
        {
          v25 = (SLToken *)SLLexerBuffer::operator[]((_QWORD *)this + 12, 0);
          *(int64x2_t *)((char *)this + 152) = vaddq_s64(*(int64x2_t *)((char *)this + 152), (int64x2_t)xmmword_21701CDA0);
          std::deque<SLToken *>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)this + 120, 1);
          if (v25)
          {
            SLToken::~SLToken(v25);
            MEMORY[0x219A0649C]();
          }
          ++v23;
        }
      }
      SLToken::~SLToken(v6);
      MEMORY[0x219A0649C]();
      (*(void (**)(_QWORD, SLToken *, _QWORD *))(**((_QWORD **)this + 22) + 80))(*((_QWORD *)this + 22), a2, v32);
      SLPostLexerImpl::AppendFullUnit((uint64_t)this, (uint64_t)v16, (uint64_t)v32, v22, v23, (v4 >> 10) & 1, v27, (char)v20);
    }
    else
    {
LABEL_4:
      (*(void (**)(_QWORD, SLToken *, _QWORD *))(**((_QWORD **)this + 22) + 80))(*((_QWORD *)this + 22), a2, v32);
    }
  }
  SLToken::~SLToken(a2);
  MEMORY[0x219A0649C]();
  SLPostLexerImpl::push_front(this, (const SLTokenList *)v32);
  return std::__list_imp<SLToken *>::clear(v32);
}

void sub_216FBC114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  std::__list_imp<SLToken *>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t SLPostLexerImpl::HandleLegalSection(SLPostLexerImpl *this, SLToken *a2, SLTokenList *a3)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, SLToken *, SLTokenList *))(**((_QWORD **)this + 22) + 144))(*((_QWORD *)this + 22), a2, a3);
  if (a2)
  {
    SLToken::~SLToken(a2);
    JUMPOUT(0x219A0649CLL);
  }
  return result;
}

SLToken *SLPostLexerImpl::HandleGeoLoc(SLPostLexerImpl *this, SLToken *a2, SLTokenList *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  CFIndex v9;
  uint64_t v10;
  SLToken *v11;
  SLToken *result;
  SLToken *v13;
  uint64_t v14;
  uint64_t Unit;
  _BYTE v16[80];
  uint64_t v17;
  CFRange v18;

  v6 = *((_DWORD *)a2 + 4);
  SLDissecter::DissectGeoLoc(*((_QWORD *)this + 23), (uint64_t)a2, (uint64_t)v16);
  if ((v6 & 0x400) == 0
    || (*((_BYTE *)a2 + 17) & 2) != 0 && v17
    || (v8 = *((_QWORD *)a2 + 7),
        v7 = *((_QWORD *)a2 + 8),
        v9 = ((v7 - v8) >> 1) - 2,
        *(unsigned __int16 *)(v8 + 2 * v9) == *(unsigned __int16 *)(v7 - 6))
    || (v10 = *((_QWORD *)this + 28), v10 == *((_QWORD *)this + 27))
    || !(*(unsigned int (**)(SLPostLexerImpl *, _QWORD))(*(_QWORD *)this + 72))(this, *(unsigned __int16 *)(v10 - 2)))
  {
    (*(void (**)(_QWORD, SLToken *, SLTokenList *, _BYTE *))(**((_QWORD **)this + 22) + 152))(*((_QWORD *)this + 22), a2, a3, v16);
    SLToken::~SLToken(a2);
    result = (SLToken *)MEMORY[0x219A0649C]();
    if ((v6 & 0x400) == 0)
    {
      result = (SLToken *)SLLexerBuffer::operator[]((_QWORD *)this + 12, 0);
      if (result)
      {
        v13 = result;
        if (!*(_BYTE *)result && *((_QWORD *)result + 8) - *((_QWORD *)result + 7) == 4)
        {
          result = (SLToken *)(*(uint64_t (**)(SLPostLexerImpl *, SLToken *))(*(_QWORD *)this + 192))(this, result);
          if ((_DWORD)result)
          {
            *(int64x2_t *)((char *)this + 152) = vaddq_s64(*(int64x2_t *)((char *)this + 152), (int64x2_t)xmmword_21701CDA0);
            std::deque<SLToken *>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)this + 120, 1);
            v14 = *((_QWORD *)this + 22);
            Unit = SLPostLexerImpl::FindUnit(this, v13, 0, ((uint64_t)(*((_QWORD *)v13 + 8) - *((_QWORD *)v13 + 7)) >> 1) - 1, 94);
            (*(void (**)(uint64_t, uint64_t, SLTokenList *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v14 + 240))(v14, Unit, a3, 0, *((_QWORD *)v13 + 4), *((_QWORD *)v13 + 5));
            SLToken::~SLToken(v13);
            return (SLToken *)MEMORY[0x219A0649C]();
          }
        }
      }
    }
  }
  else
  {
    v11 = (SLToken *)operator new();
    SLToken::SLToken(v11, 4, 4);
    v18.location = v9;
    v18.length = 1;
    SLToken::TransferTokenRange(v11, a2, v18);
    SLToken::SetType(a2, 1);
    *((_DWORD *)a2 + 4) = 0;
    SLTokenList::push_back(a3, a2);
    return (SLToken *)SLTokenList::push_back(a3, v11);
  }
  return result;
}

void sub_216FBC3D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A0649C](v1, 0x10F0C4034644DEDLL);
  _Unwind_Resume(a1);
}

void SLPostLexerImpl::HandleDottedNumbers(SLPostLexerImpl *this, SLToken *a2, SLTokenList *a3)
{
  uint64_t v6;
  void *__p;
  void *v8;
  uint64_t v9;

  __p = 0;
  v8 = 0;
  v9 = 0;
  SLDissecter::DissectDottedNumber(*((_QWORD *)this + 23), (uint64_t)a2, (uint64_t)&v6);
  (*(void (**)(_QWORD, SLToken *, SLTokenList *, uint64_t *))(**((_QWORD **)this + 22) + 160))(*((_QWORD *)this + 22), a2, a3, &v6);
  if (a2)
  {
    SLToken::~SLToken(a2);
    MEMORY[0x219A0649C]();
  }
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
}

void sub_216FBC488(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *SLPostLexerImpl::HandleNumericBullet(SLPostLexerImpl *this, SLToken *a2, SLTokenList *a3)
{
  SLToken *v5;
  SLToken *v6;
  SLToken *v7;
  SLToken *v8;
  char v9;
  uint64_t v10;
  _BYTE v12[8];
  CFRange v13;
  CFRange v14;
  CFRange v15;
  uint64_t v16;
  uint64_t v17;

  SLDissecter::DissectNumericBullet(*((_QWORD *)this + 23), (uint64_t)a2, (uint64_t)v12);
  v5 = (SLToken *)operator new();
  SLToken::SLToken(v5, 6, 0);
  SLToken::SetTokenRange(v5, a2, v13);
  SLTokenList::push_back(a3, v5);
  if (v14.length)
  {
    v6 = (SLToken *)operator new();
    SLToken::SLToken(v6, 11, 0);
    SLToken::SetTokenRange(v6, a2, v14);
    SLTokenList::push_back(a3, v6);
  }
  v7 = (SLToken *)operator new();
  v8 = v7;
  if (v12[0])
    v9 = 29;
  else
    v9 = 1;
  SLToken::SLToken(v7, v9, 1);
  SLToken::SetTokenRange(v8, a2, v15);
  SLTokenList::push_back(a3, v8);
  SLToken::SetType(a2, 13);
  v10 = v17;
  *((_QWORD *)a2 + 4) += v16;
  *((_QWORD *)a2 + 5) = v10;
  SLToken::SetText(a2, ":");
  return SLTokenList::push_back(a3, a2);
}

void sub_216FBC5F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A0649C](v1, 0x10F0C4034644DEDLL);
  _Unwind_Resume(a1);
}

uint64_t SLPostLexerImpl::HandleLiteral(SLPostLexerImpl *this, SLToken *a2, int a3, SLTokenList *a4)
{
  int v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  SLToken *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t (***v16)(_QWORD);
  int v17;
  char *v19;
  int v20;
  uint64_t (***v21)(_QWORD);
  uint64_t (***v22)(_QWORD);
  uint64_t v23;
  SLToken *v24;
  uint64_t result;
  uint64_t (***v26)(_QWORD);

  if (a3)
    v8 = 32;
  else
    v8 = 0;
  v9 = (*((_DWORD *)a2 + 4) >> 3) & 0x80;
  if (SLPostLexerImpl::HasApostrophe(this, a2))
  {
    v10 = -3;
    if (!a3)
      v10 = -2;
    v11 = *(unsigned __int16 *)(*((_QWORD *)a2 + 7) + 2 * (v10 + ((*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 1)));
    if ((unsigned __int16)(SLChar::sToUpper[v11 & 0x3F | (SLChar::sUniMap[v11 >> 6] << 6)] + v11) == 83)
    {
      v12 = (SLToken *)SLLexerBuffer::operator[]((_QWORD *)this + 12, 0);
      *(int64x2_t *)((char *)this + 152) = vaddq_s64(*(int64x2_t *)((char *)this + 152), (int64x2_t)xmmword_21701CDA0);
      std::deque<SLToken *>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)this + 120, 1);
      if (v12)
      {
        SLToken::~SLToken(v12);
        MEMORY[0x219A0649C]();
      }
    }
  }
  v13 = v9 | v8;
  if (*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7) == 4)
  {
    v14 = 1;
    do
    {
      v15 = v14;
      v16 = SLLexerBuffer::operator[]((_QWORD *)this + 12, v14 - 1);
      if (!v16)
        break;
      v17 = *(unsigned __int8 *)v16;
      if (v17 != 13 && v17 != 11)
        break;
      v19 = (char *)v16[7];
      if ((char *)v16[8] - v19 != 4)
        break;
      v20 = *(unsigned __int16 *)v19;
      v14 = v15 + 1;
    }
    while (v20 == **((unsigned __int16 **)a2 + 7));
    if (v15 >= 4)
    {
      v21 = SLLexerBuffer::operator[]((_QWORD *)this + 12, 0);
      v22 = SLLexerBuffer::operator[]((_QWORD *)this + 12, 1uLL);
      v23 = *((_QWORD *)this + 20) - 1;
      ++*((_QWORD *)this + 19);
      *((_QWORD *)this + 20) = v23;
      std::deque<SLToken *>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)this + 120, 1);
      *(int64x2_t *)((char *)this + 152) = vaddq_s64(*(int64x2_t *)((char *)this + 152), (int64x2_t)xmmword_21701CDA0);
      std::deque<SLToken *>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)this + 120, 1);
      do
      {
        v24 = (SLToken *)SLLexerBuffer::operator[]((_QWORD *)this + 12, 0);
        *(int64x2_t *)((char *)this + 152) = vaddq_s64(*(int64x2_t *)((char *)this + 152), (int64x2_t)xmmword_21701CDA0);
        std::deque<SLToken *>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)this + 120, 1);
        if (v24)
        {
          SLToken::~SLToken(v24);
          MEMORY[0x219A0649C]();
        }
        --v15;
      }
      while (v15 > 3);
      v26 = v22;
      std::deque<SLToken *>::push_front((uint64_t)this + 120, &v26);
      v26 = v21;
      std::deque<SLToken *>::push_front((uint64_t)this + 120, &v26);
    }
  }
  result = (*(uint64_t (**)(_QWORD, SLToken *, SLTokenList *, uint64_t))(**((_QWORD **)this + 22) + 16))(*((_QWORD *)this + 22), a2, a4, v13);
  if (a2)
  {
    SLToken::~SLToken(a2);
    return MEMORY[0x219A0649C]();
  }
  return result;
}

void SLPostLexerImpl::HandleEmoji(SLPostLexerImpl *this, SLToken *a2, SLTokenList *a3)
{
  unsigned __int16 *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::string *p_p;
  uint64_t v27;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  v6 = (unsigned __int16 *)*((_QWORD *)a2 + 7);
  switch((uint64_t)(*((_QWORD *)a2 + 8) - (_QWORD)v6) >> 1)
  {
    case 2:
      goto LABEL_9;
    case 3:
      v7 = *v6;
      if (v7 >> 11 >= 0x1B)
      {
        v8 = v6[1];
        if (v8 < 0xE000)
          goto LABEL_32;
      }
      SLChar::PushUTF8(&__p, v7);
      v9 = 1;
      goto LABEL_8;
    case 4:
      v10 = *v6;
      if (v10 >> 11 < 0x1B || (v11 = v6[1], v11 >> 13 > 6))
      {
        SLChar::PushUTF8(&__p, v10);
        v23 = *((_QWORD *)a2 + 7);
        v14 = (unsigned __int16 *)(v23 + 2);
        v15 = (unsigned __int16 *)(v23 + 4);
LABEL_31:
        v7 = *v14;
        v8 = *v15;
LABEL_32:
        SLChar::PushUTF8(&__p, v7, v8);
      }
      else
      {
        SLChar::PushUTF8(&__p, v10, v11);
        v9 = 2;
LABEL_8:
        v6 = (unsigned __int16 *)(*((_QWORD *)a2 + 7) + 2 * v9);
LABEL_9:
        SLChar::PushUTF8(&__p, *v6);
      }
LABEL_33:
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      v27 = (*(uint64_t (**)(_QWORD, std::string *))(**((_QWORD **)this + 22) + 208))(*((_QWORD *)this + 22), p_p);
      if (v27)
      {
        (*(void (**)(_QWORD, uint64_t, SLTokenList *, _QWORD, _QWORD))(**((_QWORD **)this + 22) + 232))(*((_QWORD *)this + 22), v27, a3, *((_QWORD *)a2 + 4), *((_QWORD *)a2 + 5));
        SLToken::~SLToken(a2);
        MEMORY[0x219A0649C]();
      }
      else
      {
        (*(void (**)(SLPostLexerImpl *, SLToken *, SLTokenList *))(*(_QWORD *)this + 136))(this, a2, a3);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      return;
    case 5:
      v12 = *v6;
      if (v12 != 55356)
        goto LABEL_18;
      v12 = 55356;
      if (v6[1] != 56825 || v6[2] != 55356 || v6[3] != 56828)
        goto LABEL_18;
      if (isInMainlandChina(void)::onceToken != -1)
        dispatch_once(&isInMainlandChina(void)::onceToken, &__block_literal_global);
      if (isInMainlandChina(void)::isInMainlandChina)
        goto LABEL_33;
      v6 = (unsigned __int16 *)*((_QWORD *)a2 + 7);
      v12 = *v6;
LABEL_18:
      SLChar::PushUTF8(&__p, v12, v6[1]);
      v13 = *((_QWORD *)a2 + 7);
      v14 = (unsigned __int16 *)(v13 + 4);
      v15 = (unsigned __int16 *)(v13 + 6);
      goto LABEL_31;
    case 6:
      SLChar::PushUTF8(&__p, *v6, v6[1]);
      SLChar::PushUTF8(&__p, *(unsigned __int16 *)(*((_QWORD *)a2 + 7) + 4));
      v16 = *((_QWORD *)a2 + 7);
      v14 = (unsigned __int16 *)(v16 + 6);
      v15 = (unsigned __int16 *)(v16 + 8);
      goto LABEL_31;
    case 9:
      SLChar::PushUTF8(&__p, *v6, v6[1]);
      SLChar::PushUTF8(&__p, *(unsigned __int16 *)(*((_QWORD *)a2 + 7) + 4));
      v17 = *((_QWORD *)a2 + 7);
      v18 = *(unsigned __int16 *)(v17 + 6);
      if (v18 >> 11 < 0x1B || (v19 = *(unsigned __int16 *)(v17 + 8), v19 >> 13 > 6))
      {
        SLChar::PushUTF8(&__p, v18);
        SLChar::PushUTF8(&__p, *(unsigned __int16 *)(*((_QWORD *)a2 + 7) + 8));
      }
      else
      {
        SLChar::PushUTF8(&__p, v18, v19);
      }
      SLChar::PushUTF8(&__p, *(unsigned __int16 *)(*((_QWORD *)a2 + 7) + 10));
      v24 = *((_QWORD *)a2 + 7);
      v14 = (unsigned __int16 *)(v24 + 12);
      v15 = (unsigned __int16 *)(v24 + 14);
      goto LABEL_31;
    case 12:
      SLChar::PushUTF8(&__p, *v6, v6[1]);
      SLChar::PushUTF8(&__p, *(unsigned __int16 *)(*((_QWORD *)a2 + 7) + 4));
      v20 = *((_QWORD *)a2 + 7);
      v21 = *(unsigned __int16 *)(v20 + 6);
      if (v21 >> 11 < 0x1B || (v22 = *(unsigned __int16 *)(v20 + 8), v22 >> 13 > 6))
      {
        SLChar::PushUTF8(&__p, v21);
        SLChar::PushUTF8(&__p, *(unsigned __int16 *)(*((_QWORD *)a2 + 7) + 8));
      }
      else
      {
        SLChar::PushUTF8(&__p, v21, v22);
      }
      SLChar::PushUTF8(&__p, *(unsigned __int16 *)(*((_QWORD *)a2 + 7) + 10));
      SLChar::PushUTF8(&__p, *(unsigned __int16 *)(*((_QWORD *)a2 + 7) + 12), *(unsigned __int16 *)(*((_QWORD *)a2 + 7) + 14));
      SLChar::PushUTF8(&__p, *(unsigned __int16 *)(*((_QWORD *)a2 + 7) + 16));
      v25 = *((_QWORD *)a2 + 7);
      v14 = (unsigned __int16 *)(v25 + 18);
      v15 = (unsigned __int16 *)(v25 + 20);
      goto LABEL_31;
    default:
      goto LABEL_33;
  }
}

void sub_216FBCC44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SLPostLexerImpl::HandleAlphaNumeric(SLPostLexerImpl *this, SLToken *a2, SLTokenList *a3)
{
  uint64_t result;
  unint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  char v16;
  int v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  SLTokenList *v23;
  SLToken *v24;
  int v25;
  SLToken *v26;
  BOOL v28;
  int v29;
  int v30;
  char v31;
  SLTokenList *v33;
  SLPostLexerImpl *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  SLTokenList **v38;
  uint64_t v39;
  char v40;
  SLTokenList *v41;
  unsigned __int8 v42;
  SLTokenList *v43;
  SLTokenList *v44;
  unsigned int v45;
  uint64_t v46;
  char v47;
  SLTokenList *v48;
  int v49;
  uint64_t v50;
  SLToken **v51;
  SLToken *v52;
  uint64_t v53;
  __int128 v54;
  const void *v55;
  uint64_t v56;
  SLToken *v57;
  uint64_t v58;
  uint64_t CommonCountable;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD **v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  SLToken *v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  SLToken *v75;
  SLToken *v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  unint64_t v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  uint64_t v92;
  SLTokenList *v93;
  unint64_t v94;
  SLToken *v95;
  unint64_t v96;
  _QWORD v97[4];
  _QWORD v98[5];
  CFRange v99;

  result = SLPostLexerImpl::HandleTokenInDictionary(this, a2);
  if ((result & 1) != 0)
    return result;
  result = SLPostLexerImpl::HandleURLInSymbols(this, a2, a3);
  if ((result & 1) != 0)
    return result;
  v81 = 0;
  v93 = a3;
  v82 = 0;
  v85 = 0;
  v86 = 0;
  v83 = 0;
  v84 = 0;
  v7 = 0;
  v77 = 0;
  v78 = 0;
  v79 = 0;
  v80 = 0;
  v8 = 0;
  v9 = *((_QWORD *)a2 + 7);
  v95 = a2;
LABEL_4:
  v10 = (unsigned __int16)SLChar::sCharClass[*(_WORD *)(v9 + 2 * v7) & 0x3F | (SLChar::sUniMap[(unint64_t)*(unsigned __int16 *)(v9 + 2 * v7) >> 6] << 6)];
  v96 = v7;
  if (v10 == 6)
    v11 = v7 + 1;
  else
    v11 = v7;
  v94 = v11;
  v88 = v8;
  v91 = v8;
  v12 = v79;
  v13 = HIDWORD(v79);
  v15 = v78;
  v14 = HIDWORD(v78);
  v16 = BYTE4(v80);
  v17 = v81;
  v18 = v80;
  v19 = v84;
  v20 = v77;
  v92 = v83;
  v21 = v86;
  v89 = HIDWORD(v81);
  v90 = v85;
  v87 = v82;
  while (2)
  {
    switch(v10 & 0x1F)
    {
      case 0u:
      case 6u:
        goto LABEL_9;
      case 1u:
        if ((v16 & 1) != 0)
        {
LABEL_9:
          if ((v18 & v21 & 1) != 0)
          {
LABEL_17:
            v20 = operator new();
            SLToken::SLToken((SLToken *)v20, 12, v15);
            LODWORD(v92) = 1;
            v23 = v93;
            goto LABEL_48;
          }
          if ((v18 & 1) == 0)
          {
            v22 = v96;
            if (v96 - v19 < 2)
            {
              v23 = v93;
              v24 = v95;
            }
            else
            {
              v23 = v93;
              v24 = v95;
              if (*((_QWORD *)v93 + 2))
                v90 |= (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v93 + 16) + 16) & 1) == 0;
              v89 |= v96 - v19 > 2;
              v87 = 1;
            }
            v20 = operator new();
            SLToken::SLToken((SLToken *)v20, 1, 0);
            ++v91;
            goto LABEL_49;
          }
LABEL_18:
          if (v13)
            v25 = v15;
          else
            v25 = v15 | 0x10;
          HIDWORD(v92) |= v13 != 0;
          if (!v20)
          {
            v23 = v93;
            goto LABEL_38;
          }
          v26 = v95;
          if (v10 == 2
            || (*(_DWORD *)(v20 + 16) & 0x1001) != 0
            || *(_QWORD *)(v20 + 32) == *((_QWORD *)v95 + 4)
            && v96 >= ((uint64_t)(*((_QWORD *)v95 + 8) - *((_QWORD *)v95 + 7)) >> 1) - 1
            || !SLPostLexerImpl::FindUnit(this, v95, v19, v96, 35))
          {
            v23 = v93;
            if (*(_BYTE *)v20 == 1 && *(uint64_t *)(v20 + 40) >= 2)
              v90 |= (*(_BYTE *)(v20 + 16) & 1) == 0;
LABEL_38:
            v28 = v14 != 1 || v12 != 1;
            if (v28 || (v17 & 1) == 0)
              v29 = v25 | 0x100;
            else
              v29 = v25;
            v20 = operator new();
            SLToken::SLToken((SLToken *)v20, 0, v29);
LABEL_48:
            v24 = v95;
            v22 = v96;
LABEL_49:
            if (v10 == 6)
            {
              v30 = 1;
LABEL_53:
              *(_DWORD *)(v20 + 16) |= v30;
            }
            else if (!v10)
            {
              v30 = *((_DWORD *)v24 + 4) & 1;
              goto LABEL_53;
            }
            v99.length = v22 - v19;
            v99.location = v19;
            SLToken::SetTokenRange((SLToken *)v20, v24, v99);
            if (*((_QWORD *)v23 + 2))
              v31 = 1;
            else
              v31 = *((_BYTE *)v24 + 1);
            *(_BYTE *)(v20 + 1) = v31;
            *(_BYTE *)(v20 + 5) = v14;
            *(_BYTE *)(v20 + 3) = 1;
            SLTokenList::push_back(v23, (SLToken *)v20);
            goto LABEL_58;
          }
LABEL_36:
          std::vector<unsigned short>::__insert_with_size[abi:ne180100]<unsigned short *,unsigned short *>(v20 + 56, *(_QWORD *)(v20 + 64) - 2, (char *)(*((_QWORD *)v26 + 7) + 2 * v19), (char *)(*((_QWORD *)v26 + 7) + 2 * v96), (uint64_t)(2 * v96 - 2 * v19) >> 1);
          *(_DWORD *)(v20 + 16) |= 0x1000u;
          *(_QWORD *)(v20 + 40) += v96 - v19;
LABEL_58:
          v13 = 0;
          if (v10 == 6)
            goto LABEL_63;
          v12 = 0;
          v14 = 0;
          v17 = 0;
          v18 = 0;
          v16 = 0;
          v21 = 0;
          v19 = v94;
          v15 = 0;
          if (!v10)
          {
LABEL_63:
            v88 = v91;
            v79 = 0;
            v78 = 0;
            BYTE4(v80) = 0;
            LODWORD(v81) = 0;
            LODWORD(v80) = 0;
            v86 = 0;
            v84 = v94;
            goto LABEL_64;
          }
          continue;
        }
        if ((v10 & 0x80) != 0)
        {
          LODWORD(v81) = v17 | ((v10 & 0x20) >> 5);
          if (v12 > 1 && v13 == 0)
            v15 |= 8u;
          ++v13;
          goto LABEL_78;
        }
        if (v13)
        {
          if (!v20 || !SLPostLexerImpl::FindUnit(this, v95, v19, v96, 35))
          {
            LODWORD(v81) = v17 | ((v10 & 0x20) >> 5);
            v15 |= 8u;
            goto LABEL_77;
          }
          v26 = v95;
          goto LABEL_36;
        }
        LODWORD(v81) = v17 | ((v10 & 0x20) >> 5);
        ++v14;
LABEL_77:
        ++v12;
LABEL_78:
        LODWORD(v78) = v15 | (v10 >> 1) & 0x20;
        HIDWORD(v78) = v14;
        v80 = 1;
        v88 = v91;
        v79 = __PAIR64__(v13, v12);
        v85 = v90;
        v86 = v21;
        v84 = v19;
        v77 = v20;
        v83 = v92;
        HIDWORD(v81) = v89;
        v82 = v87;
LABEL_65:
        v7 = v96 + 1;
        v9 = *((_QWORD *)v95 + 7);
        v8 = v88;
        if (v96 + 1 <= ((*((_QWORD *)v95 + 8) - v9) >> 1) - 1)
          goto LABEL_4;
        if (v88 == 2)
        {
          v33 = v93;
          v34 = this;
          if (*((_QWORD *)v93 + 2) != 2
            || ((*(uint64_t (**)(SLPostLexerImpl *, SLToken *))(*(_QWORD *)this + 200))(this, v95) & 1) == 0)
          {
            goto LABEL_95;
          }
          goto LABEL_140;
        }
        v33 = v93;
        v34 = this;
        if (v88 == 1)
        {
          v35 = *(_QWORD *)(*((_QWORD *)v93 + 1) + 16);
          if (*(_BYTE *)v35 == 1 || **(_BYTE **)(*(_QWORD *)v93 + 16) == 1)
          {
            v36 = *((_QWORD *)v93 + 2);
            if (v36 > 2)
            {
              LOBYTE(v85) = 0;
            }
            else
            {
              if (v36 == 2
                && (v37 = *(_QWORD *)(*(_QWORD *)v93 + 16), *(_BYTE *)v37 == 1)
                && *(_QWORD *)(v37 + 64) - *(_QWORD *)(v37 + 56) == 8
                && *(_QWORD *)(v35 + 64) - *(_QWORD *)(v35 + 56) == 4)
              {
                LOBYTE(v85) = 0;
                *(_DWORD *)(v37 + 16) |= 0x400u;
              }
              else
              {
                LOBYTE(v85) = 0;
              }
              BYTE4(v83) = 1;
            }
          }
        }
LABEL_95:
        if (*((_QWORD *)v33 + 2) == v88 && (v88 == 2 || !(BYTE4(v81) & 1 | (v88 != 3))))
        {
          v57 = (SLToken *)SLLexerBuffer::operator[]((_QWORD *)v34 + 12, 0);
          v58 = *((_QWORD *)v33 + 2);
          if (v58 == 2)
          {
            if (v57)
            {
              CommonCountable = SLPostLexerImpl::FindCommonCountable(v34, v57, 0);
              v58 = *((_QWORD *)v33 + 2);
              if (CommonCountable)
              {
LABEL_156:
                v66 = *(_QWORD ***)v33;
                v67 = *(_QWORD *)(*(_QWORD *)v33 + 16);
                v68 = **(_QWORD **)v33;
                *(_QWORD *)(v68 + 8) = *(_QWORD *)(*(_QWORD *)v33 + 8);
                *v66[1] = v68;
                *((_QWORD *)v33 + 2) = v58 - 1;
                operator delete(v66);
                v69 = *((_QWORD *)v34 + 22);
                v70 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v69 + 216))(v69, 215);
                (*(void (**)(uint64_t, uint64_t, SLTokenList *, uint64_t, uint64_t))(*(_QWORD *)v69 + 232))(v69, v70, v33, *(_QWORD *)(v67 + 32) - 1, 1);
                *(_BYTE *)(v67 + 1) = 2;
                SLTokenList::push_back(v33, (SLToken *)v67);
                goto LABEL_157;
              }
            }
          }
          if (v58 == 2 && (*((_BYTE *)v95 + 19) & 1) != 0)
          {
            v60 = *(_QWORD *)(*((_QWORD *)v33 + 1) + 16);
            v61 = *(char **)(v60 + 56);
            if (*(_QWORD *)(v60 + 64) - (_QWORD)v61 == 10
              && (v62 = *(_QWORD *)(*(_QWORD *)v33 + 16),
                  v64 = *(_QWORD *)(v62 + 56),
                  v65 = *(_QWORD *)(v62 + 64),
                  v63 = v62 + 56,
                  v65 - v64 == 6))
            {
              std::vector<unsigned short>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned short *>,std::__wrap_iter<unsigned short *>>(v63, v64, v61, v61 + 4, 2);
              v58 = *((_QWORD *)v33 + 2);
            }
            else
            {
              v58 = 2;
            }
            goto LABEL_156;
          }
LABEL_99:
          v38 = (SLTokenList **)*((_QWORD *)v33 + 1);
          if (v38 == (SLTokenList **)v33)
          {
LABEL_157:
            if (*((_BYTE *)v34 + 241))
            {
              v71 = (SLToken *)operator new();
              SLToken::SLToken(v71, 35, 64);
              v72 = operator new(0x18uLL);
              v73 = (_QWORD *)*((_QWORD *)v33 + 1);
              *v72 = v33;
              v72[1] = v73;
              v72[2] = v71;
              *v73 = v72;
              v74 = *((_QWORD *)v33 + 2) + 1;
              *((_QWORD *)v33 + 1) = v72;
              *((_QWORD *)v33 + 2) = v74;
              v75 = (SLToken *)operator new();
              SLToken::SLToken(v75, 34, 64);
              SLTokenList::push_back(v33, v75);
              SLToken::SetType(v95, 11);
              SLTokenList::push_back(v33, v95);
              v76 = (SLToken *)operator new();
              SLToken::SLToken(v76, 36, 64);
              return (uint64_t)SLTokenList::push_back(v33, v76);
            }
            else
            {
              result = (uint64_t)v95;
              if (v95)
              {
                SLToken::~SLToken(v95);
                return MEMORY[0x219A0649C]();
              }
            }
            return result;
          }
          v39 = 0;
          v40 = 1;
          while (1)
          {
            v41 = v38[1];
            if ((v40 & 1) != 0)
              v42 = *((_BYTE *)v38[2] + 16) | (v41 == v33);
            else
              v42 = 0;
            if (v39 == 1)
            {
              v43 = v38[2];
              if (*((_QWORD *)v33 + 2) != 2)
                goto LABEL_108;
              if (*(_BYTE *)v43 == 1)
                goto LABEL_109;
              if (!**(_BYTE **)(*((_QWORD *)v33 + 1) + 16))
              {
                SLTokenList::SLTokenList((SLTokenList *)v98);
                SLTokenList::SLTokenList((SLTokenList *)v97);
                if (!SLPostLexerImpl::HandleLookup(v34, *(SLToken **)(*((_QWORD *)v33 + 1) + 16), 0, (SLTokenList *)v98)|| !SLToken::HasTag(*(SLToken **)(*((_QWORD *)v33 + 1) + 16), 64)|| !SLPostLexerImpl::HandleLookup(v34, *(SLToken **)(*(_QWORD *)v33 + 16), 0, (SLTokenList *)v97)|| !SLToken::HasTag(*(SLToken **)(*(_QWORD *)v33 + 16), 64))
                {
                  *((_BYTE *)v38[2] + 2) = 4;
                }
                std::__list_imp<SLToken *>::clear(v97);
                std::__list_imp<SLToken *>::clear(v98);
              }
              else
              {
LABEL_108:
                *((_BYTE *)v43 + 2) = 4;
              }
            }
LABEL_109:
            v44 = v38[2];
            if (*(_BYTE *)v44 == 1)
            {
              if ((v85 & 1) != 0)
                goto LABEL_120;
            }
            else if (!*(_BYTE *)v44)
            {
              v45 = *((_DWORD *)v44 + 4);
              v46 = *((_QWORD *)v44 + 5);
              if ((v45 & 0x10) != 0 && (v46 & 0xFFFFFFFFFFFFFFFELL) == 2)
              {
LABEL_120:
                SLToken::SetType(v44, 11);
                goto LABEL_121;
              }
              if (v46 == 1)
              {
                if ((v42 & (v41 != v33)) != 1 || **((_BYTE **)v41 + 2))
                  goto LABEL_120;
                if (v39)
                {
                  if (v88)
                    goto LABEL_139;
                  v47 = (*(uint64_t (**)(SLPostLexerImpl *, _QWORD, _QWORD))(*(_QWORD *)v34 + 96))(v34, **((unsigned __int16 **)v44 + 7), (v45 >> 4) & 1);
                }
                else
                {
                  v47 = (*(uint64_t (**)(SLPostLexerImpl *, _QWORD, _QWORD))(*(_QWORD *)v34 + 88))(v34, **((unsigned __int16 **)v44 + 7), (v45 >> 4) & 1);
                }
                if ((v47 & 1) == 0)
                {
LABEL_139:
                  SLToken::SetType(v38[2], 11);
                  *((_BYTE *)v38[2] + 2) = 5;
                  goto LABEL_121;
                }
                *((_DWORD *)v38[2] + 4) |= 0x4000u;
                ++v39;
              }
            }
LABEL_121:
            v48 = v38[2];
            if (v41 != v33)
              *((_DWORD *)v48 + 4) |= 0x200000u;
            v49 = *(unsigned __int8 *)v48;
            if (v49 == 12)
            {
              v39 += *((_QWORD *)v48 + 5) / 2;
            }
            else if (v49 == 11)
            {
              v39 += *((_QWORD *)v48 + 5);
            }
            else
            {
              ++v39;
            }
            v40 = *((_BYTE *)v48 + 16) & 1;
            v38 = (SLTokenList **)v38[1];
            if (v38 == (SLTokenList **)v33)
              goto LABEL_157;
          }
        }
        if (BYTE4(v83) & 1 | ((v82 & 1) == 0) | v83 & 1)
          goto LABEL_99;
LABEL_140:
        SLToken::SetType(v95, 7);
        while (1)
        {
          v50 = *((_QWORD *)v33 + 2);
          if (!v50)
            break;
          v51 = (SLToken **)*((_QWORD *)v33 + 1);
          if (v51[2])
          {
            SLToken::~SLToken(v51[2]);
            MEMORY[0x219A0649C]();
            v51 = (SLToken **)*((_QWORD *)v33 + 1);
            v50 = *((_QWORD *)v33 + 2);
          }
          v52 = *v51;
          *((_QWORD *)v52 + 1) = v51[1];
          *(_QWORD *)v51[1] = v52;
          *((_QWORD *)v33 + 2) = v50 - 1;
          operator delete(v51);
        }
        result = (uint64_t)SLTokenList::push_back(v33, v95);
        if (*((_BYTE *)v34 + 241))
        {
          SLToken::clear(v95);
          v53 = operator new();
          v54 = *((_OWORD *)v95 + 1);
          *(_OWORD *)v53 = *(_OWORD *)v95;
          *(_OWORD *)(v53 + 16) = v54;
          *(_OWORD *)(v53 + 32) = *((_OWORD *)v95 + 2);
          *(_QWORD *)(v53 + 56) = 0;
          v55 = (const void *)*((_QWORD *)v95 + 7);
          *(_QWORD *)(v53 + 48) = *((_QWORD *)v95 + 6);
          v56 = *((_QWORD *)v95 + 8);
          *(_QWORD *)(v53 + 64) = 0;
          *(_QWORD *)(v53 + 72) = 0;
          std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>((_QWORD *)(v53 + 56), v55, v56, (v56 - (uint64_t)v55) >> 1);
          *(_QWORD *)(v53 + 80) = 0;
          *(_QWORD *)(v53 + 88) = 0;
          *(_QWORD *)(v53 + 96) = 0;
          std::vector<SLHomograph *>::__init_with_size[abi:ne180100]<SLHomograph **,SLHomograph **>((_QWORD *)(v53 + 80), *((const void **)v95 + 10), *((_QWORD *)v95 + 11), (uint64_t)(*((_QWORD *)v95 + 11) - *((_QWORD *)v95 + 10)) >> 3);
          v95 = (SLToken *)v53;
          goto LABEL_157;
        }
        return result;
      case 2u:
        if ((v18 & 1) == 0)
        {
          v80 = 0x100000000;
          v88 = v91;
          v79 = __PAIR64__(v13, v12);
          v78 = __PAIR64__(v14, v15);
          LODWORD(v81) = v17;
          v86 = v21;
          v84 = v19;
LABEL_64:
          v77 = v20;
          v83 = v92;
          v85 = v90;
          HIDWORD(v81) = v89;
          v82 = v87;
          goto LABEL_65;
        }
        if ((v21 & 1) != 0)
          goto LABEL_17;
        goto LABEL_18;
      case 3u:
        v86 |= v96 - v84 == 1;
        goto LABEL_65;
      default:
        goto LABEL_65;
    }
  }
}

void sub_216FBD878(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 64) = v4;
    operator delete(v4);
  }
  MEMORY[0x219A0649C](v1, 0x10F0C4034644DEDLL);
  _Unwind_Resume(a1);
}

void SLPostLexerImpl::HandleURL(SLPostLexerImpl *this, int64x2_t *a2, SLTokenList *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  SLToken *v10;
  SLToken *v11;
  char *v12;
  SLToken *v13;
  SLToken *v14;
  SLToken *v15;
  uint64_t v16;
  _BOOL4 HasPossessive;
  SLTokenList *v18;
  SLToken *v19;
  int64x2_t *v20;

  if ((a2[1].i8[1] & 4) != 0)
  {
    v6 = a2[4].i64[0];
    v7 = v6 - 4;
    memmove((void *)(v6 - 4), (const void *)(v6 - 2), 2uLL);
    v8 = a2[3].i64[1];
    a2[4].i64[0] = v7 + 2;
    v9 = v7 - v8;
    if (v9)
      memmove((void *)v8, (const void *)(v8 + 2), v9);
    a2[4].i64[0] = v8 + v9;
    a2[2] = vaddq_s64(a2[2], (int64x2_t)xmmword_21701D470);
    a2[1].i32[0] = a2[1].i32[0] & 0xFFFFFBFE | 1;
  }
  if ((SLPostLexerImpl::HandleTokenInDictionary(this, (SLToken *)a2) & 1) == 0
    && !SLPostLexerImpl::HandleURLInSymbols(this, (SLToken *)a2, a3))
  {
    if ((a2[1].i8[0] & 1) == 0)
    {
      v10 = (SLToken *)SLLexerBuffer::operator[]((_QWORD *)this + 12, 0);
      if (v10)
      {
        v11 = v10;
        if (*(_BYTE *)v10 == 7)
        {
          a2[2].i64[1] += *((_QWORD *)v10 + 5);
          std::vector<unsigned short>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned short *>,std::__wrap_iter<unsigned short *>>((uint64_t)&a2[3].i64[1], a2[4].i64[0] - 2, *((char **)v10 + 7), (char *)(*((_QWORD *)v10 + 8) - 2), (*((_QWORD *)v10 + 8) - 2 - *((_QWORD *)v10 + 7)) >> 1);
          a2[1].i32[0] = a2[1].i32[0] & 0xFFFFFFFE | *((_DWORD *)v11 + 4) & 1;
          v12 = (char *)this + 120;
          *(int64x2_t *)((char *)this + 152) = vaddq_s64(*(int64x2_t *)((char *)this + 152), (int64x2_t)xmmword_21701CDA0);
          std::deque<SLToken *>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)this + 120, 1);
          v13 = v11;
LABEL_12:
          SLToken::~SLToken(v13);
          MEMORY[0x219A0649C]();
          v20 = a2;
          std::deque<SLToken *>::push_front((uint64_t)v12, &v20);
          return;
        }
        v14 = (SLToken *)SLLexerBuffer::operator[]((_QWORD *)this + 12, 1uLL);
        if (v14)
        {
          if (*(_BYTE *)v11 == 13)
          {
            v15 = v14;
            if (*(_BYTE *)v14 == 7 && (*((_BYTE *)v11 + 16) & 1) == 0)
            {
              a2[2].i64[1] += *((_QWORD *)v14 + 5) + *((_QWORD *)v11 + 5);
              std::vector<unsigned short>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned short *>,std::__wrap_iter<unsigned short *>>((uint64_t)&a2[3].i64[1], a2[4].i64[0] - 2, *((char **)v11 + 7), (char *)(*((_QWORD *)v11 + 8) - 2), (*((_QWORD *)v11 + 8) - 2 - *((_QWORD *)v11 + 7)) >> 1);
              std::vector<unsigned short>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned short *>,std::__wrap_iter<unsigned short *>>((uint64_t)&a2[3].i64[1], a2[4].i64[0] - 2, *((char **)v15 + 7), (char *)(*((_QWORD *)v15 + 8) - 2), (*((_QWORD *)v15 + 8) - 2 - *((_QWORD *)v15 + 7)) >> 1);
              a2[1].i32[0] = a2[1].i32[0] & 0xFFFFFFFE | *((_DWORD *)v15 + 4) & 1;
              v12 = (char *)this + 120;
              v16 = *((_QWORD *)this + 20) - 1;
              ++*((_QWORD *)this + 19);
              *((_QWORD *)this + 20) = v16;
              std::deque<SLToken *>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)this + 120, 1);
              *(int64x2_t *)((char *)this + 152) = vaddq_s64(*(int64x2_t *)((char *)this + 152), (int64x2_t)xmmword_21701CDA0);
              std::deque<SLToken *>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)this + 120, 1);
              SLToken::~SLToken(v11);
              MEMORY[0x219A0649C]();
              v13 = v15;
              goto LABEL_12;
            }
          }
        }
      }
    }
    HasPossessive = SLPostLexerImpl::HasPossessive(this, (SLToken *)a2);
    (*(void (**)(_QWORD, int64x2_t *, SLTokenList *))(**((_QWORD **)this + 22) + 40))(*((_QWORD *)this + 22), a2, a3);
    if (!HasPossessive)
      goto LABEL_24;
    v18 = (SLTokenList *)*((_QWORD *)a3 + 1);
    while (a3 != v18)
    {
      a3 = *(SLTokenList **)a3;
      v19 = (SLToken *)*((_QWORD *)a3 + 2);
      if (*(_BYTE *)v19 != 15)
        SLPostLexerImpl::HandlePossessive(this, v19);
    }
    if (a2)
    {
LABEL_24:
      SLToken::~SLToken((SLToken *)a2);
      JUMPOUT(0x219A0649CLL);
    }
  }
}

_QWORD *SLPostLexerImpl::HandleCitChar(SLPostLexerImpl *this, SLToken *a2, SLTokenList *a3)
{
  SLToken *v4;
  uint64_t v6;
  char **v7;
  char v8;
  int v9;
  char **v10;
  uint64_t v11;
  char *v12;
  void **v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  __int16 v25;
  _WORD *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  __int16 v36;
  void **v37;
  char *v38;
  void **v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  __int16 v51;
  _WORD *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  __int16 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v67;
  void **v68;
  _WORD *v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  __int16 v80;
  _WORD *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  __int16 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;

  v4 = a2;
  v6 = *((_QWORD *)this + 28);
  if (v6 == *((_QWORD *)this + 27)
    || !(*(unsigned int (**)(SLPostLexerImpl *, _QWORD, _QWORD))(*(_QWORD *)this + 72))(this, *(unsigned __int16 *)(v6 - 2), **((unsigned __int16 **)a2 + 7)))
  {
    v8 = (*(uint64_t (**)(SLPostLexerImpl *, _QWORD, _QWORD))(*(_QWORD *)this + 72))(this, **((unsigned __int16 **)v4 + 7), *(unsigned __int16 *)(*((_QWORD *)v4 + 7) + 4));
    v7 = (char **)SLLexerBuffer::operator[]((_QWORD *)this + 12, 0);
    if ((v8 & 1) != 0)
    {
      v9 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    v7 = (char **)SLLexerBuffer::operator[]((_QWORD *)this + 12, 0);
  }
  v10 = v7;
  v9 = 1;
  if ((*((_BYTE *)v4 + 16) & 1) != 0 || !v7 || *(_BYTE *)v7)
  {
LABEL_9:
    v11 = operator new();
    SLToken::SLToken((SLToken *)v11, 4, *((_DWORD *)v4 + 4) & 1 | 4);
    v12 = *(char **)(v11 + 72);
    v13 = (void **)(v11 + 56);
    v14 = *((_QWORD *)v4 + 7);
    v15 = *(char **)(v11 + 64);
    if (v15 >= v12)
    {
      v17 = (char *)*v13;
      v18 = v15 - (_BYTE *)*v13;
      if (v18 <= -3)
        goto LABEL_120;
      v19 = v18 >> 1;
      v20 = v12 - v17;
      if (v20 <= (v18 >> 1) + 1)
        v21 = v19 + 1;
      else
        v21 = v20;
      if (v20 >= 0x7FFFFFFFFFFFFFFELL)
        v22 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v22 = v21;
      if (v22)
      {
        v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v11 + 72, v22);
        v17 = *(char **)(v11 + 56);
        v15 = *(char **)(v11 + 64);
      }
      else
      {
        v23 = 0;
      }
      v24 = &v23[2 * v19];
      v12 = &v23[2 * v22];
      *(_WORD *)v24 = *(_WORD *)(v14 + 4);
      v16 = v24 + 2;
      while (v15 != v17)
      {
        v25 = *((_WORD *)v15 - 1);
        v15 -= 2;
        *((_WORD *)v24 - 1) = v25;
        v24 -= 2;
      }
      *(_QWORD *)(v11 + 56) = v24;
      *(_QWORD *)(v11 + 64) = v16;
      *(_QWORD *)(v11 + 72) = v12;
      if (v17)
      {
        operator delete(v17);
        v12 = *(char **)(v11 + 72);
      }
    }
    else
    {
      *(_WORD *)v15 = *(_WORD *)(v14 + 4);
      v16 = v15 + 2;
    }
    *(_QWORD *)(v11 + 64) = v16;
    if (v16 < v12)
    {
      *(_WORD *)v16 = 0;
      v26 = v16 + 2;
      goto LABEL_43;
    }
    v27 = (char *)*v13;
    v28 = v16 - (_BYTE *)*v13;
    if (v28 > -3)
    {
      v29 = v28 >> 1;
      v30 = v12 - v27;
      if (v30 <= (v28 >> 1) + 1)
        v31 = v29 + 1;
      else
        v31 = v30;
      if (v30 >= 0x7FFFFFFFFFFFFFFELL)
        v32 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v32 = v31;
      if (v32)
      {
        v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v11 + 72, v32);
        v27 = *(char **)(v11 + 56);
        v16 = *(char **)(v11 + 64);
      }
      else
      {
        v33 = 0;
      }
      v34 = &v33[2 * v29];
      v35 = &v33[2 * v32];
      *(_WORD *)v34 = 0;
      v26 = v34 + 2;
      while (v16 != v27)
      {
        v36 = *((_WORD *)v16 - 1);
        v16 -= 2;
        *((_WORD *)v34 - 1) = v36;
        v34 -= 2;
      }
      *(_QWORD *)(v11 + 56) = v34;
      *(_QWORD *)(v11 + 64) = v26;
      *(_QWORD *)(v11 + 72) = v35;
      if (v27)
        operator delete(v27);
LABEL_43:
      *(_QWORD *)(v11 + 64) = v26;
      *(_QWORD *)(v11 + 32) = *((_QWORD *)v4 + 4) + 2;
      *(_QWORD *)(v11 + 40) = 1;
      v37 = (void **)operator new();
      SLToken::SLToken((SLToken *)v37, 11, 0);
      v38 = (char *)v37[9];
      v39 = v37 + 7;
      v40 = *((_QWORD *)v4 + 7);
      v41 = (char *)v37[8];
      if (v41 >= v38)
      {
        v43 = (char *)*v39;
        v44 = v41 - (_BYTE *)*v39;
        if (v44 <= -3)
          goto LABEL_121;
        v45 = v44 >> 1;
        v46 = v38 - v43;
        if (v46 <= (v44 >> 1) + 1)
          v47 = v45 + 1;
        else
          v47 = v46;
        if (v46 >= 0x7FFFFFFFFFFFFFFELL)
          v48 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v48 = v47;
        if (v48)
        {
          v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)(v37 + 9), v48);
          v43 = (char *)v37[7];
          v41 = (char *)v37[8];
        }
        else
        {
          v49 = 0;
        }
        v50 = &v49[2 * v45];
        v38 = &v49[2 * v48];
        *(_WORD *)v50 = *(_WORD *)(v40 + 2);
        v42 = v50 + 2;
        while (v41 != v43)
        {
          v51 = *((_WORD *)v41 - 1);
          v41 -= 2;
          *((_WORD *)v50 - 1) = v51;
          v50 -= 2;
        }
        v37[7] = v50;
        v37[8] = v42;
        v37[9] = v38;
        if (v43)
        {
          operator delete(v43);
          v38 = (char *)v37[9];
        }
      }
      else
      {
        *(_WORD *)v41 = *(_WORD *)(v40 + 2);
        v42 = v41 + 2;
      }
      v37[8] = v42;
      if (v42 < v38)
      {
        *(_WORD *)v42 = 0;
        v52 = v42 + 2;
LABEL_77:
        v37[8] = v52;
        v37[4] = (void *)(*((_QWORD *)v4 + 4) + 1);
        v37[5] = (void *)1;
        SLToken::SetType(v4, 4);
        *((_DWORD *)v4 + 4) = 2;
        v63 = *((_QWORD *)v4 + 7);
        v64 = *((_QWORD *)v4 + 8);
        *(_WORD *)(v63 + 2) = 0;
        v65 = v63 + 4;
        if (v65 != v64)
          *((_QWORD *)v4 + 8) = v65;
        *((_QWORD *)v4 + 5) = 1;
        if (v9)
        {
          *(_DWORD *)(v11 + 16) &= ~4u;
          *((_DWORD *)v4 + 4) &= ~2u;
        }
        SLTokenList::push_back(a3, v4);
        v4 = (SLToken *)v11;
        goto LABEL_82;
      }
      v53 = (char *)*v39;
      v54 = v42 - (_BYTE *)*v39;
      if (v54 > -3)
      {
        v55 = v54 >> 1;
        v56 = v38 - v53;
        if (v56 <= (v54 >> 1) + 1)
          v57 = v55 + 1;
        else
          v57 = v56;
        if (v56 >= 0x7FFFFFFFFFFFFFFELL)
          v58 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v58 = v57;
        if (v58)
        {
          v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)(v37 + 9), v58);
          v53 = (char *)v37[7];
          v42 = (char *)v37[8];
        }
        else
        {
          v59 = 0;
        }
        v60 = &v59[2 * v55];
        v61 = &v59[2 * v58];
        *(_WORD *)v60 = 0;
        v52 = v60 + 2;
        while (v42 != v53)
        {
          v62 = *((_WORD *)v42 - 1);
          v42 -= 2;
          *((_WORD *)v60 - 1) = v62;
          v60 -= 2;
        }
        v37[7] = v60;
        v37[8] = v52;
        v37[9] = v61;
        if (v53)
          operator delete(v53);
        goto LABEL_77;
      }
LABEL_121:
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
LABEL_120:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  v37 = (void **)operator new();
  SLToken::SLToken((SLToken *)v37, 4, 0);
  v67 = (char *)v37[9];
  v68 = v37 + 7;
  v69 = (_WORD *)*((_QWORD *)v4 + 7);
  v70 = (char *)v37[8];
  if (v70 >= v67)
  {
    v72 = (char *)*v68;
    v73 = v70 - (_BYTE *)*v68;
    if (v73 <= -3)
      goto LABEL_122;
    v74 = v73 >> 1;
    v75 = v67 - v72;
    if (v75 <= (v73 >> 1) + 1)
      v76 = v74 + 1;
    else
      v76 = v75;
    if (v75 >= 0x7FFFFFFFFFFFFFFELL)
      v77 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v77 = v76;
    if (v77)
    {
      v78 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)(v37 + 9), v77);
      v72 = (char *)v37[7];
      v70 = (char *)v37[8];
    }
    else
    {
      v78 = 0;
    }
    v79 = &v78[2 * v74];
    v67 = &v78[2 * v77];
    *(_WORD *)v79 = *v69;
    v71 = v79 + 2;
    while (v70 != v72)
    {
      v80 = *((_WORD *)v70 - 1);
      v70 -= 2;
      *((_WORD *)v79 - 1) = v80;
      v79 -= 2;
    }
    v37[7] = v79;
    v37[8] = v71;
    v37[9] = v67;
    if (v72)
    {
      operator delete(v72);
      v67 = (char *)v37[9];
    }
  }
  else
  {
    *(_WORD *)v70 = *v69;
    v71 = v70 + 2;
  }
  v37[8] = v71;
  if (v71 >= v67)
  {
    v82 = (char *)*v68;
    v83 = v71 - (_BYTE *)*v68;
    if (v83 > -3)
    {
      v84 = v83 >> 1;
      v85 = v67 - v82;
      if (v85 <= (v83 >> 1) + 1)
        v86 = v84 + 1;
      else
        v86 = v85;
      if (v85 >= 0x7FFFFFFFFFFFFFFELL)
        v87 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v87 = v86;
      if (v87)
      {
        v88 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)(v37 + 9), v87);
        v82 = (char *)v37[7];
        v71 = (char *)v37[8];
      }
      else
      {
        v88 = 0;
      }
      v89 = &v88[2 * v84];
      v90 = &v88[2 * v87];
      *(_WORD *)v89 = 0;
      v81 = v89 + 2;
      while (v71 != v82)
      {
        v91 = *((_WORD *)v71 - 1);
        v71 -= 2;
        *((_WORD *)v89 - 1) = v91;
        v89 -= 2;
      }
      v37[7] = v89;
      v37[8] = v81;
      v37[9] = v90;
      if (v82)
        operator delete(v82);
      goto LABEL_117;
    }
LABEL_122:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  *(_WORD *)v71 = 0;
  v81 = v71 + 2;
LABEL_117:
  v37[8] = v81;
  v37[4] = (void *)*((_QWORD *)v4 + 4);
  v37[5] = (void *)1;
  SLToken::SetType(v4, 0);
  v93 = *((_QWORD *)v4 + 7);
  v92 = *((_QWORD *)v4 + 8);
  v94 = v92 - (v93 + 2);
  if (v92 != v93 + 2)
    memmove(*((void **)v4 + 7), (const void *)(v93 + 2), v92 - (v93 + 2));
  *((_QWORD *)v4 + 8) = v93 + v94;
  *((int64x2_t *)v4 + 2) = vaddq_s64(*((int64x2_t *)v4 + 2), (int64x2_t)xmmword_21701CDA0);
  SLToken::AppendToken(v4, v10);
  *(int64x2_t *)((char *)this + 152) = vaddq_s64(*(int64x2_t *)((char *)this + 152), (int64x2_t)xmmword_21701CDA0);
  std::deque<SLToken *>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)this + 120, 1);
  SLToken::~SLToken((SLToken *)v10);
  MEMORY[0x219A0649C]();
LABEL_82:
  SLTokenList::push_back(a3, (SLToken *)v37);
  return SLTokenList::push_back(a3, v4);
}

void sub_216FBE2DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A0649C](v1, 0x10F0C4034644DEDLL);
  _Unwind_Resume(a1);
}

uint64_t SLPostLexerImpl::HandleInsert(SLPostLexerImpl *this, SLToken *a2, SLTokenList *a3)
{
  uint64_t result;
  SLLexerBuffer *v7;
  uint64_t (***v8)(_QWORD);
  uint64_t (***v9)(_QWORD);
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  SLToken *v14;
  SLToken *v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  char v19;
  char *v20;
  char *v21;
  CFIndex v22;
  __int16 *v23;
  int v24;
  __int16 v25;
  SLToken *v26;
  _BYTE v27[80];
  uint64_t v28;
  uint64_t v29;
  CFRange v30;

  if (**((_WORD **)a2 + 7) == 40 && (*((_BYTE *)a2 + 16) & 1) == 0)
  {
    result = SLPostLexerImpl::IsCopyright(this, a2, a3);
    if ((result & 1) != 0)
      return result;
  }
  v7 = (SLPostLexerImpl *)((char *)this + 96);
  v8 = SLLexerBuffer::operator[]((_QWORD *)this + 12, 0);
  v9 = SLLexerBuffer::operator[]((_QWORD *)this + 12, 1uLL);
  if (SLChar::sCharClass[**((_WORD **)a2 + 7) & 0x3F | (SLChar::sUniMap[(unint64_t)**((unsigned __int16 **)a2 + 7) >> 6] << 6)] == 4
    && (*((_BYTE *)a2 + 16) & 1) == 0
    && v8)
  {
    v10 = *(unsigned __int8 *)v8;
    if (v10 == 1)
    {
      if ((char *)v8[8] - (char *)v8[7] != 6)
        goto LABEL_19;
      if (!v9
        || *(_BYTE *)v9 != 4
        || !(*(unsigned int (**)(SLPostLexerImpl *))(*(_QWORD *)this + 72))(this))
      {
        SLToken::~SLToken(a2);
        JUMPOUT(0x219A0649CLL);
      }
      v10 = *(unsigned __int8 *)v8;
    }
    if (v10 == 28 && ((_DWORD)v8[2] & 0x600) == 0x400)
    {
      SLDissecter::DissectGeoLoc(*((_QWORD *)this + 23), (uint64_t)v8, (uint64_t)v27);
      if (v28 == 2)
      {
        v11 = *((_QWORD *)this + 28);
        if (v11 != *((_QWORD *)this + 27)
          && ((*(uint64_t (**)(SLPostLexerImpl *, _QWORD, _QWORD))(*(_QWORD *)this + 72))(this, *(unsigned __int16 *)(v11 - 2), *((unsigned __int16 *)v8[7] + v29)) & 1) != 0)
        {
          SLToken::~SLToken(a2);
          return MEMORY[0x219A0649C]();
        }
      }
    }
  }
LABEL_19:
  if (!SLPostLexerImpl::SeenMatchingParenQuote(this, **((unsigned __int16 **)a2 + 7), (*((_DWORD *)a2 + 4) & 4) != 0, a3))
  {
    v13 = *((_DWORD *)a2 + 4);
    if ((v13 & 4) != 0)
    {
      v12 = v13 ^ 4;
      goto LABEL_40;
    }
    if (*(_BYTE *)a2 != 4 || (v14 = (SLToken *)SLLexerBuffer::operator[]((_QWORD *)this + 12, 0)) == 0)
    {
LABEL_38:
      SLToken::SetType(a2, 15);
      v12 = *((_DWORD *)a2 + 4) | 2;
      goto LABEL_40;
    }
    v15 = v14;
    v16 = 1;
    while (1)
    {
      v17 = v16 - 1;
      v18 = *(unsigned __int8 *)v15;
      if (v18 == 28)
        break;
      if (v18 != 4)
        goto LABEL_36;
      v19 = (*(uint64_t (**)(SLPostLexerImpl *, _QWORD, _QWORD))(*(_QWORD *)this + 72))(this, **((unsigned __int16 **)a2 + 7), **((unsigned __int16 **)v15 + 7));
      if (v17 > 0x62 || (v19 & 1) != 0)
        goto LABEL_38;
LABEL_37:
      v15 = (SLToken *)SLLexerBuffer::operator[]((_QWORD *)this + 12, v16++);
      if (!v15)
        goto LABEL_38;
    }
    if ((*((_BYTE *)v15 + 17) & 4) != 0)
    {
      v21 = (char *)*((_QWORD *)v15 + 7);
      v20 = (char *)*((_QWORD *)v15 + 8);
      v22 = ((v20 - v21) >> 1) - 2;
      if (*(unsigned __int16 *)&v21[2 * v22] != *((unsigned __int16 *)v20 - 3))
      {
        if ((*(unsigned int (**)(SLPostLexerImpl *, _QWORD))(*(_QWORD *)this + 72))(this, **((unsigned __int16 **)a2 + 7)))
        {
          SLDissecter::DissectGeoLoc(*((_QWORD *)this + 23), (uint64_t)v15, (uint64_t)v27);
          if ((*((_BYTE *)a2 + 17) & 2) == 0 || !v28)
          {
            v26 = (SLToken *)operator new();
            SLToken::SLToken(v26, 4, 0);
            v30.location = v22;
            v30.length = 1;
            SLToken::TransferTokenRange(v26, v15, v30);
            SLToken::SetType(v15, 1);
            *((_DWORD *)v15 + 4) = 0;
            SLLexerBuffer::insert(v7, v16, v26);
            goto LABEL_38;
          }
        }
      }
    }
LABEL_36:
    if (v17 > 0x62)
      goto LABEL_38;
    goto LABEL_37;
  }
  SLToken::SetType(a2, 15);
  v12 = *((_DWORD *)a2 + 4);
  if ((v12 & 6) == 0)
  {
    v12 |= 4u;
LABEL_40:
    *((_DWORD *)a2 + 4) = v12;
  }
  if (*(_BYTE *)a2 == 15)
  {
    v23 = (__int16 *)*((_QWORD *)a2 + 7);
    v24 = (unsigned __int16)*v23;
    if ((v12 & 2) != 0)
    {
      v25 = 40;
      if (v24 != 40 && v24 != 91 && v24 != 123)
        v25 = 96;
    }
    else
    {
      v25 = 41;
      if (v24 != 41 && v24 != 93 && v24 != 125)
        v25 = 39;
    }
    *v23 = v25;
  }
  *((_DWORD *)a2 + 4) = v12 | 0x40;
  return (uint64_t)SLTokenList::push_back(a3, a2);
}

void sub_216FBE710(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A0649C](v1, 0x10F0C4034644DEDLL);
  _Unwind_Resume(a1);
}

_QWORD *SLPostLexerImpl::HandleParagraph(SLPostLexerImpl *this, SLToken *a2, SLTokenList *a3)
{
  _QWORD *v6;
  SLToken *v7;
  SLToken *v8;
  unsigned int v9;
  _QWORD *result;
  unint64_t v11;
  int v12;

  v6 = (_QWORD *)((char *)this + 96);
  v7 = (SLToken *)SLLexerBuffer::operator[]((_QWORD *)this + 12, 0);
  if (v7)
  {
    v8 = v7;
    if (*(_BYTE *)v7 == 13 && **((_WORD **)v7 + 7) == 9)
    {
      *(int64x2_t *)((char *)this + 152) = vaddq_s64(*(int64x2_t *)((char *)this + 152), (int64x2_t)xmmword_21701CDA0);
      std::deque<SLToken *>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)this + 120, 1);
      SLToken::~SLToken(v8);
      MEMORY[0x219A0649C]();
    }
  }
  v9 = *((_DWORD *)a2 + 4);
  if ((v9 & 0x400) != 0)
  {
    if (!*((_BYTE *)this + 242) || (*((_BYTE *)this + 242) = 0, (result = SLLexerBuffer::operator[](v6, 0)) == 0))
    {
LABEL_16:
      SLToken::~SLToken(a2);
      JUMPOUT(0x219A0649CLL);
    }
    v11 = 1;
    do
    {
      v12 = *(unsigned __int8 *)result;
      if (v12 == 13)
      {
        if (*(_WORD *)result[7] == 9)
        {
          v9 = *((_DWORD *)a2 + 4) & 0xFFFFFBFF;
          goto LABEL_6;
        }
      }
      else if (v12 == 6)
      {
        break;
      }
      result = SLLexerBuffer::operator[](v6, v11++);
    }
    while (result);
    if (a2)
      goto LABEL_16;
  }
  else
  {
LABEL_6:
    *((_BYTE *)this + 242) = 0;
    *((_QWORD *)this + 28) = *((_QWORD *)this + 27);
    *((_DWORD *)a2 + 4) = v9 | 0x40;
    return SLTokenList::push_back(a3, a2);
  }
  return result;
}

void SLPostLexerImpl::HandleRange(SLPostLexerImpl *this, SLToken *a2, SLTokenList *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (***v8)(_QWORD);

  v6 = *((_QWORD *)this + 22);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 216))(v6, 215);
  (*(void (**)(uint64_t, uint64_t, SLTokenList *, _QWORD, _QWORD))(*(_QWORD *)v6 + 232))(v6, v7, a3, *((_QWORD *)a2 + 4), *((_QWORD *)a2 + 5));
  v8 = SLLexerBuffer::operator[]((_QWORD *)this + 12, 0);
  if (v8)
    *((_BYTE *)v8 + 1) = 2;
  SLToken::~SLToken(a2);
  JUMPOUT(0x219A0649CLL);
}

uint64_t (***SLPostLexerImpl::HandleRomanNumeral(SLPostLexerImpl *this, SLToken *a2, SLTokenList *a3))(_QWORD)
{
  int v5;
  CFIndex v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (***result)(_QWORD);
  unsigned int v11;
  SLToken *v12;
  uint64_t v13;
  CFRange v14;
  CFRange v15;
  CFRange v16;

  if ((*((_BYTE *)this + 256) & 0x80) != 0)
  {
    SLToken::SetType(a2, 11);
    return (uint64_t (***)(_QWORD))SLTokenList::push_back(a3, a2);
  }
  else
  {
    v5 = *((_DWORD *)a2 + 4);
    if ((v5 & 0x200) != 0)
    {
      *((_DWORD *)a2 + 4) = v5 ^ 0x200;
      return (uint64_t (***)(_QWORD))SLPostLexerImpl::StripPossessive(this, a2, a3);
    }
    else
    {
      if ((v5 & 0x1000) != 0)
      {
        SLDissecter::DissectRoman(*((_QWORD *)this + 23), (uint64_t)a2, &v13);
        v11 = SLDissecter::EvaluateRoman(*((SLDissecter **)this + 23), a2, v14);
        if ((*((_BYTE *)a2 + 18) & 2) != 0)
        {
          (*(void (**)(_QWORD, SLToken *, CFIndex, CFIndex, _QWORD, SLTokenList *, uint64_t, CFIndex))(**((_QWORD **)this + 22) + 72))(*((_QWORD *)this + 22), a2, v14.location, v14.length, v11, a3, 1, v15.length);
        }
        else
        {
          v12 = (SLToken *)operator new();
          SLToken::SLToken(v12, 11, *((_DWORD *)a2 + 4) & 1 | 8);
          SLToken::SetTokenRange(v12, a2, v15);
          (*(void (**)(_QWORD, SLToken *, CFIndex, CFIndex, _QWORD, SLTokenList *, _QWORD, _QWORD))(**((_QWORD **)this + 22) + 72))(*((_QWORD *)this + 22), a2, v14.location, v14.length, v11, a3, 0, 0);
          SLTokenList::push_back(a3, v12);
        }
      }
      else
      {
        v7 = ((uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 1) - 1;
        v8 = *((_QWORD *)this + 22);
        v16.location = 0;
        v16.length = v7;
        v9 = SLDissecter::EvaluateRoman(*((SLDissecter **)this + 23), a2, v16);
        (*(void (**)(uint64_t, SLToken *, _QWORD, CFIndex, uint64_t, SLTokenList *, unint64_t, _QWORD))(*(_QWORD *)v8 + 72))(v8, a2, 0, v7, v9, a3, ((unint64_t)*((unsigned int *)a2 + 4) >> 17) & 1, 0);
      }
      SLToken::~SLToken(a2);
      MEMORY[0x219A0649C]();
      result = SLLexerBuffer::operator[]((_QWORD *)this + 12, 0);
      if (result)
        *((_DWORD *)result + 4) |= 0x40000u;
    }
  }
  return result;
}

void sub_216FBEB34(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A0649C](v1, 0x10F0C4034644DEDLL);
  _Unwind_Resume(a1);
}

void SLPostLexerImpl::HandleTime(SLPostLexerImpl *this, SLToken *a2, SLTokenList *a3)
{
  _QWORD *v6;
  SLToken *v7;
  SLToken *v8;
  SLPostLexerImpl *v9;
  std::string::size_type v10;
  _BOOL4 v11;
  std::string *v12;
  int v13;
  std::string::size_type v14;
  unsigned int v15;
  std::string::size_type size;
  std::string *p_p;
  std::string *v18;
  BOOL v19;
  std::string *v20;
  std::string v21;
  std::string __p;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  uint64_t v27;
  std::string::size_type v28;

  v6 = (_QWORD *)((char *)this + 96);
  v7 = (SLToken *)SLLexerBuffer::operator[]((_QWORD *)this + 12, 0);
  if (!v7)
  {
    memset(&__p, 0, sizeof(__p));
    if ((*((_BYTE *)this + 256) & 0x40) == 0)
    {
LABEL_15:
      LOBYTE(v10) = 0;
      goto LABEL_16;
    }
LABEL_22:
    LOBYTE(v10) = 0;
    goto LABEL_23;
  }
  v8 = v7;
  v9 = (SLPostLexerImpl *)SLLexerBuffer::operator[](v6, 1uLL);
  memset(&__p, 0, sizeof(__p));
  if (v9
    && *(_BYTE *)v8 == 13
    && SLChar::sCharClass[**((_WORD **)v8 + 7) & 0x3F | (SLChar::sUniMap[(unint64_t)**((unsigned __int16 **)v8 + 7) >> 6] << 6)] == 6
    && (*(_BYTE *)v9 & 0xFE) == 0x12)
  {
    SLToken::SetType(v8, 30);
  }
  if ((*((_BYTE *)this + 256) & 0x40) != 0)
    goto LABEL_22;
  if ((*((_BYTE *)a2 + 17) & 0x10) != 0 || (*(unsigned __int8 *)v8 | 2) != 2)
    goto LABEL_15;
  SLPostLexerImpl::Transcribe(v9, v8, 2, 0, ((uint64_t)(*((_QWORD *)v8 + 8) - *((_QWORD *)v8 + 7)) >> 1) - 1, &v21);
  __p = v21;
  v10 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
  v11 = (v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
  if ((*((_BYTE *)&v21.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    size = __p.__r_.__value_.__l.__size_;
    if (!__p.__r_.__value_.__l.__size_)
      goto LABEL_16;
    if (__p.__r_.__value_.__l.__size_ != 2)
      goto LABEL_50;
    v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
LABEL_45:
    if (LOWORD(v12->__r_.__value_.__l.__data_) == 19777)
      goto LABEL_64;
    if ((*((_BYTE *)&v21.__r_.__value_.__s + 23) & 0x80) == 0)
    {
      if ((_DWORD)v10 != 2)
        goto LABEL_16;
      v11 = 0;
      p_p = &__p;
      LODWORD(v10) = 2;
      goto LABEL_52;
    }
    size = __p.__r_.__value_.__l.__size_;
LABEL_50:
    if (size != 2)
    {
LABEL_55:
      if (size != 4)
        goto LABEL_16;
      v11 = 1;
      v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
      goto LABEL_57;
    }
    v11 = 1;
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
LABEL_52:
    if (LOWORD(p_p->__r_.__value_.__l.__data_) == 19792)
      goto LABEL_64;
    if (!v11)
      goto LABEL_16;
    size = __p.__r_.__value_.__l.__size_;
    goto LABEL_55;
  }
  v12 = &__p;
  if ((_DWORD)v10 == 2)
    goto LABEL_45;
  if ((_DWORD)v10 != 4)
    goto LABEL_16;
  v11 = 0;
LABEL_57:
  if (LODWORD(v12->__r_.__value_.__l.__data_) != 776810049)
  {
    if (v11)
    {
      if (__p.__r_.__value_.__l.__size_ != 4)
        goto LABEL_16;
      v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    else
    {
      if ((_DWORD)v10 != 4)
        goto LABEL_16;
      v18 = &__p;
      LOBYTE(v10) = 4;
    }
    if (LODWORD(v18->__r_.__value_.__l.__data_) == 776810064)
      goto LABEL_64;
LABEL_16:
    v8 = 0;
    v13 = 32;
    goto LABEL_17;
  }
LABEL_64:
  v19 = !v11;
  v20 = &__p;
  if (!v19)
    v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
  v13 = v20->__r_.__value_.__s.__data_[0];
LABEL_17:
  SLDissecter::DissectTime(*((_QWORD *)this + 23), (uint64_t)a2, (uint64_t)&v23);
  if (v8)
  {
    v26 = v13;
    LOBYTE(v10) = *((_BYTE *)&__p.__r_.__value_.__s + 23);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v14 = __p.__r_.__value_.__l.__size_;
    v27 = *((_QWORD *)v8 + 4) - *((_QWORD *)a2 + 4);
    v28 = v14;
  }
  else
  {
    v13 = v26;
  }
  if (v13 == 32)
    v15 = 25;
  else
    v15 = 13;
  if (v15 <= v23 || v24 > 0x3Bu || v25 > 0x3Cu)
  {
    if ((*((_BYTE *)a2 + 17) & 0x10) != 0 || v24 > 0x3Bu || v25 >= 0x3Cu)
    {
      SLToken::SetType(a2, 7);
      SLTokenList::push_back(a3, a2);
      goto LABEL_24;
    }
LABEL_23:
    SLToken::SetType(a2, 19);
    SLTokenList::push_back(a3, a2);
    goto LABEL_24;
  }
  if (v8)
  {
    *(int64x2_t *)((char *)this + 152) = vaddq_s64(*(int64x2_t *)((char *)this + 152), (int64x2_t)xmmword_21701CDA0);
    std::deque<SLToken *>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)this + 120, 1);
    SLToken::~SLToken(v8);
    MEMORY[0x219A0649C]();
  }
  (*(void (**)(_QWORD, SLToken *, SLTokenList *, unsigned __int8 *))(**((_QWORD **)this + 22) + 112))(*((_QWORD *)this + 22), a2, a3, &v23);
  if (a2)
  {
    SLToken::~SLToken(a2);
    MEMORY[0x219A0649C]();
  }
LABEL_24:
  if ((v10 & 0x80) != 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_216FBEEF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p)
{
  char v13;

  if (v13 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *SLPostLexerImpl::HandleElapsedTime(SLPostLexerImpl *this, SLToken *a2, SLTokenList *a3)
{
  _QWORD *v6;
  SLToken *v7;
  SLToken *v8;
  uint64_t (***v9)(_QWORD);
  SLToken *v10;
  _BYTE v12[72];
  CFRange v13;

  v6 = (_QWORD *)((char *)this + 96);
  v7 = (SLToken *)SLLexerBuffer::operator[]((_QWORD *)this + 12, 0);
  if (v7)
  {
    v8 = v7;
    v9 = SLLexerBuffer::operator[](v6, 1uLL);
    if (v9)
    {
      if (*(_BYTE *)v8 == 13
        && SLChar::sCharClass[**((_WORD **)v8 + 7) & 0x3F | (SLChar::sUniMap[(unint64_t)**((unsigned __int16 **)v8
                                                                                                + 7) >> 6] << 6)] == 6
        && (*(_BYTE *)v9 & 0xFE) == 0x12)
      {
        SLToken::SetType(v8, 30);
      }
    }
  }
  SLDissecter::DissectTime(*((_QWORD *)this + 23), (uint64_t)a2, (uint64_t)v12);
  if (v12[1] > 0x3Bu || v12[2] > 0x3Bu)
  {
    SLToken::SetType(a2, 7);
    return SLTokenList::push_back(a3, a2);
  }
  else
  {
    (*(void (**)(_QWORD, SLToken *, SLTokenList *, _BYTE *))(**((_QWORD **)this + 22) + 120))(*((_QWORD *)this + 22), a2, a3, v12);
    if ((*((_BYTE *)a2 + 17) & 0x10) != 0)
    {
      v10 = (SLToken *)operator new();
      SLToken::SLToken(v10, 11, *((_DWORD *)a2 + 4) & 1);
      SLToken::SetTokenRange(v10, a2, v13);
      SLTokenList::push_back(a3, v10);
    }
    SLToken::~SLToken(a2);
    return (_QWORD *)MEMORY[0x219A0649C]();
  }
}

void sub_216FBF098(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A0649C](v1, 0x10F0C4034644DEDLL);
  _Unwind_Resume(a1);
}

_QWORD *SLPostLexerImpl::HandleDate(SLPostLexerImpl *this, SLToken *a2, SLTokenList *a3)
{
  BOOL v6;
  BOOL v8;
  _QWORD *result;
  _BYTE v10[4];
  unsigned __int8 v11;
  unsigned __int8 v12;

  SLDissecter::DissectDate(*((_QWORD *)this + 23), (uint64_t)a2, (uint64_t)v10);
  if (v10[0])
    v6 = v11 == 0;
  else
    v6 = 1;
  v8 = v6 || v11 > 0xCu || v12 == 0;
  if (v8 || v12 > 0x20u)
  {
    SLToken::SetType(a2, 2);
    *((_DWORD *)a2 + 4) &= ~0x400u;
    return SLTokenList::push_back(a3, a2);
  }
  else
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD, SLToken *, SLTokenList *, _BYTE *))(**((_QWORD **)this + 22)
                                                                                            + 104))(*((_QWORD *)this + 22), a2, a3, v10);
    if (a2)
    {
      SLToken::~SLToken(a2);
      return (_QWORD *)MEMORY[0x219A0649C]();
    }
  }
  return result;
}

uint64_t SLPostLexerImpl::HandleNumericPair(SLPostLexerImpl *this, SLToken *a2, SLTokenList *a3)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, SLToken *, SLTokenList *))(**((_QWORD **)this + 22) + 128))(*((_QWORD *)this + 22), a2, a3);
  if (a2)
  {
    SLToken::~SLToken(a2);
    JUMPOUT(0x219A0649CLL);
  }
  return result;
}

uint64_t SLPostLexerImpl::HandleDimensions(SLPostLexerImpl *this, SLToken *a2, SLTokenList *a3)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, SLToken *, SLTokenList *))(**((_QWORD **)this + 22) + 136))(*((_QWORD *)this + 22), a2, a3);
  if (a2)
  {
    SLToken::~SLToken(a2);
    JUMPOUT(0x219A0649CLL);
  }
  return result;
}

_QWORD *SLPostLexerImpl::HandleMusicalKey(SLPostLexerImpl *this, SLToken *a2, SLTokenList *a3)
{
  __int16 v5;
  uint64_t v6;
  char *v7;
  void **v8;
  __int16 *v9;
  char *v10;
  __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  __int16 *v18;
  __int16 v19;
  _WORD *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;

  if (*(_WORD *)(*((_QWORD *)a2 + 7) + 2) == 35)
    v5 = 9839;
  else
    v5 = *(_WORD *)(*((_QWORD *)a2 + 7) + 2);
  v6 = operator new();
  SLToken::SLToken((SLToken *)v6, 22, 0);
  v7 = *(char **)(v6 + 72);
  v8 = (void **)(v6 + 56);
  v9 = *(__int16 **)(v6 + 64);
  if (v9 >= (__int16 *)v7)
  {
    v11 = (__int16 *)*v8;
    v12 = (char *)v9 - (_BYTE *)*v8;
    if (v12 <= -3)
      goto LABEL_41;
    v13 = v12 >> 1;
    v14 = v7 - (char *)v11;
    if (v14 <= (v12 >> 1) + 1)
      v15 = v13 + 1;
    else
      v15 = v14;
    if (v14 >= 0x7FFFFFFFFFFFFFFELL)
      v16 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    if (v16)
    {
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v6 + 72, v16);
      v11 = *(__int16 **)(v6 + 56);
      v9 = *(__int16 **)(v6 + 64);
    }
    else
    {
      v17 = 0;
    }
    v18 = (__int16 *)&v17[2 * v13];
    v7 = &v17[2 * v16];
    *v18 = v5;
    v10 = (char *)(v18 + 1);
    while (v9 != v11)
    {
      v19 = *--v9;
      *--v18 = v19;
    }
    *(_QWORD *)(v6 + 56) = v18;
    *(_QWORD *)(v6 + 64) = v10;
    *(_QWORD *)(v6 + 72) = v7;
    if (v11)
    {
      operator delete(v11);
      v7 = *(char **)(v6 + 72);
    }
  }
  else
  {
    *v9 = v5;
    v10 = (char *)(v9 + 1);
  }
  *(_QWORD *)(v6 + 64) = v10;
  if (v10 < v7)
  {
    *(_WORD *)v10 = 0;
    v20 = v10 + 2;
    goto LABEL_38;
  }
  v21 = (char *)*v8;
  v22 = v10 - (_BYTE *)*v8;
  if (v22 <= -3)
LABEL_41:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v23 = v22 >> 1;
  v24 = v7 - v21;
  if (v24 <= (v22 >> 1) + 1)
    v25 = v23 + 1;
  else
    v25 = v24;
  if (v24 >= 0x7FFFFFFFFFFFFFFELL)
    v26 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v26 = v25;
  if (v26)
  {
    v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v6 + 72, v26);
    v21 = *(char **)(v6 + 56);
    v10 = *(char **)(v6 + 64);
  }
  else
  {
    v27 = 0;
  }
  v28 = &v27[2 * v23];
  v29 = &v27[2 * v26];
  *(_WORD *)v28 = 0;
  v20 = v28 + 2;
  while (v10 != v21)
  {
    v30 = *((_WORD *)v10 - 1);
    v10 -= 2;
    *((_WORD *)v28 - 1) = v30;
    v28 -= 2;
  }
  *(_QWORD *)(v6 + 56) = v28;
  *(_QWORD *)(v6 + 64) = v20;
  *(_QWORD *)(v6 + 72) = v29;
  if (v21)
    operator delete(v21);
LABEL_38:
  *(_QWORD *)(v6 + 64) = v20;
  v31 = *((_QWORD *)a2 + 7);
  v32 = *((_QWORD *)a2 + 8);
  v33 = v31 + 2;
  v34 = v32 - (v31 + 4);
  if (v32 != v31 + 4)
    memmove((void *)(v31 + 2), (const void *)(v31 + 4), v32 - (v31 + 4));
  *((_QWORD *)a2 + 8) = v33 + v34;
  *((_QWORD *)a2 + 5) = 1;
  *(_OWORD *)(v6 + 32) = *((_OWORD *)a2 + 2);
  ++*(_QWORD *)(v6 + 32);
  v35 = *((_DWORD *)a2 + 4);
  *(_DWORD *)(v6 + 16) = v35;
  *(_BYTE *)(v6 + 1) = 2;
  *((_DWORD *)a2 + 4) = v35 & 0xFFFFFFFE;
  SLToken::SetType(a2, 11);
  *((_BYTE *)a2 + 2) = 2;
  SLTokenList::push_back(a3, a2);
  return SLTokenList::push_back(a3, (SLToken *)v6);
}

void sub_216FBF478(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A0649C](v1, 0x10F0C4034644DEDLL);
  _Unwind_Resume(a1);
}

void SLPostLexerImpl::HandleIPA(SLPostLexerImpl *this, int64x2_t *a2, SLTokenList *a3)
{
  SLPostLexerImpl *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  CFIndex v9;
  uint64_t v10;
  int v11;
  SLPostLexerImpl *v12;
  CFIndex v13;
  CFIndex v14;
  CFIndex v15;
  int v16;
  SLToken *v17;
  SLToken *v18;
  _WORD *v19;
  uint64_t v20;
  uint64_t v21;
  std::string::size_type size;
  std::string::size_type v23;
  std::string *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  void *__p;
  _BYTE *v46;
  std::string v47;
  CFRange v48;
  CFRange v49;
  CFRange v50;

  v5 = this;
  v6 = a2[3].i64[1];
  v7 = (a2[4].i64[0] - v6) >> 1;
  v8 = v7 - 1;
  if (v7 == 1)
    goto LABEL_21;
  v9 = 0;
  v10 = v7 - 2;
  while (1)
  {
    v11 = *(unsigned __int16 *)(v6 + 2 * v9);
    if (v11 == 32)
    {
      v12 = 0;
    }
    else
    {
      if (v11 != 44)
      {
        v13 = v9 + 1;
        goto LABEL_16;
      }
      v12 = (SLPostLexerImpl *)v9;
    }
    v13 = v9 + 1;
    if (v9 + 1 < v8)
      break;
LABEL_16:
    v9 = v13;
    if (v13 == v8)
      goto LABEL_21;
  }
  v14 = v9;
  while (1)
  {
    v15 = v14 + 1;
    v16 = *(unsigned __int16 *)(v6 + 2 + 2 * v14);
    if (v16 == 32)
    {
      this = v12;
      goto LABEL_13;
    }
    this = (SLPostLexerImpl *)(v14 + 1);
    if (v16 != 44)
      break;
LABEL_13:
    ++v14;
    v12 = this;
    if (v10 == v15)
      goto LABEL_16;
  }
  if (v12)
  {
    v17 = (SLToken *)operator new();
    SLToken::SLToken(v17, 13, 1);
    v49.location = (CFIndex)v12;
    v49.length = 1;
    SLToken::SetTokenRange(v17, (SLToken *)a2, v49);
    SLTokenList::push_back(a3, v17);
  }
  v18 = (SLToken *)operator new();
  SLToken::SLToken(v18, 33, a2[1].i32[0]);
  v50.length = ~v14 + ((a2[4].i64[0] - a2[3].i64[1]) >> 1);
  v50.location = v14;
  SLToken::SetTokenRange(v18, (SLToken *)a2, v50);
  v19 = (_WORD *)a2[3].i64[1];
  **((_WORD **)v18 + 7) = *v19;
  v48.length = ((a2[4].i64[0] - (uint64_t)v19) >> 1) - v9 - 2;
  v48.location = v9;
  SLToken::RemoveRange(a2, v48);
  this = (SLPostLexerImpl *)SLTokenList::push_back(a3, v18);
LABEL_21:
  v20 = 208;
  if ((a2[1].i8[1] & 4) == 0)
    v20 = 200;
  v21 = *(_QWORD *)((char *)v5 + v20);
  if (!v21)
  {
    SLToken::~SLToken((SLToken *)a2);
    JUMPOUT(0x219A0649CLL);
  }
  SLPostLexerImpl::Transcribe(this, (SLToken *)a2, 0, 1uLL, ((a2[4].i64[0] - a2[3].i64[1]) >> 1) - 2, &v47);
  size = HIBYTE(v47.__r_.__value_.__r.__words[2]);
  if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v47.__r_.__value_.__l.__size_;
  std::vector<unsigned char>::vector(&__p, 2 * size);
  if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
  else
    v23 = v47.__r_.__value_.__l.__size_;
  if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v24 = &v47;
  else
    v24 = (std::string *)v47.__r_.__value_.__r.__words[0];
  v25 = __p;
  v26 = (*(uint64_t (**)(uint64_t, std::string::size_type, std::string *, int64_t, void *))(*(_QWORD *)v21 + 32))(v21, v23, v24, v46 - (_BYTE *)__p, __p);
  v27 = (*(uint64_t (**)(SLPostLexerImpl *, void *, uint64_t))(*(_QWORD *)v5 + 144))(v5, v25, v26);
  v28 = a2[6].u64[0];
  v29 = (uint64_t *)a2[5].i64[1];
  if ((unint64_t)v29 >= v28)
  {
    v31 = a2[5].i64[0];
    v32 = ((uint64_t)v29 - v31) >> 3;
    if ((unint64_t)(v32 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v33 = v28 - v31;
    v34 = v33 >> 2;
    if (v33 >> 2 <= (unint64_t)(v32 + 1))
      v34 = v32 + 1;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
      v35 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v35 = v34;
    if (v35)
      v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SLHomograph *>>((uint64_t)a2[6].i64, v35);
    else
      v36 = 0;
    v37 = (uint64_t *)&v36[8 * v32];
    v38 = &v36[8 * v35];
    *v37 = v27;
    v30 = v37 + 1;
    v40 = (char *)a2[5].i64[0];
    v39 = (char *)a2[5].i64[1];
    if (v39 != v40)
    {
      do
      {
        v41 = *((_QWORD *)v39 - 1);
        v39 -= 8;
        *--v37 = v41;
      }
      while (v39 != v40);
      v39 = (char *)a2[5].i64[0];
    }
    a2[5].i64[0] = (uint64_t)v37;
    a2[5].i64[1] = (uint64_t)v30;
    a2[6].i64[0] = (uint64_t)v38;
    if (v39)
      operator delete(v39);
  }
  else
  {
    *v29 = v27;
    v30 = v29 + 1;
  }
  a2[5].i64[1] = (uint64_t)v30;
  a2[1].i32[0] |= 0x40u;
  a2[2] = vaddq_s64(a2[2], (int64x2_t)xmmword_21701D470);
  v42 = operator new(0x18uLL);
  v43 = (_QWORD *)*((_QWORD *)a3 + 1);
  *v42 = a3;
  v42[1] = v43;
  v42[2] = a2;
  *v43 = v42;
  v44 = *((_QWORD *)a3 + 2) + 1;
  *((_QWORD *)a3 + 1) = v42;
  *((_QWORD *)a3 + 2) = v44;
  if (__p)
  {
    v46 = __p;
    operator delete(__p);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
}

void sub_216FBF850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  MEMORY[0x219A0649C](v17, 0x10F0C4034644DEDLL);
  _Unwind_Resume(a1);
}

_QWORD *SLPostLexerImpl::push_front(SLPostLexerImpl *this, const SLTokenList *a2)
{
  char v4;
  unint64_t v5;
  uint64_t (***v6)(_QWORD);

  v4 = *((_BYTE *)a2 + 24);
  if (v4)
  {
    v5 = *((_QWORD *)a2 + 2) && SLPostLexerImpl::HasPossessive(this, *(SLToken **)(*(_QWORD *)a2 + 16));
    v6 = SLLexerBuffer::operator[]((_QWORD *)this + 12, v5);
    if (v6 && !*((_BYTE *)v6 + 1))
      *((_BYTE *)v6 + 1) = v4;
  }
  return SLLexerBuffer::push_front((SLPostLexerImpl *)((char *)this + 96), a2);
}

void SLPostLexerImpl::Classify(SLPostLexerImpl *this, SLToken *a2)
{
  unsigned int v2;
  unsigned __int16 *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned __int8 v7;
  int v8;
  int v9;
  char v10;
  char v11;
  unsigned int v12;
  __int16 v13;

  if (*((_BYTE *)a2 + 3))
  {
    v2 = *((_DWORD *)a2 + 4);
    goto LABEL_3;
  }
  *(_WORD *)((char *)a2 + 3) = 1;
  *((_BYTE *)a2 + 5) = 0;
  v2 = *((_DWORD *)a2 + 4) & 0xFFFFFFE7;
  *((_DWORD *)a2 + 4) = v2;
  v3 = (unsigned __int16 *)*((_QWORD *)a2 + 7);
  v4 = (uint64_t)(*((_QWORD *)a2 + 8) - (_QWORD)v3) >> 1;
  v5 = v4 - 1;
  if (v4 != 1)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = *v3++;
      v13 = SLChar::sCharClass[v12 & 0x3F | (SLChar::sUniMap[(unint64_t)v12 >> 6] << 6)];
      if ((v13 & 0x1F) == 4)
      {
        v6 = v8 + 1;
        *((_BYTE *)a2 + 4) = ++v8;
      }
      else if ((v13 & 0x1F) == 1)
      {
        if ((v13 & 0x80) != 0)
        {
          if (!(v11 & 1 | (v7 < 2u)))
            goto LABEL_17;
        }
        else
        {
          if ((v11 & 1) == 0)
          {
            if ((_BYTE)v6)
            {
              v11 = 0;
              v8 = v6;
              if ((v13 & 0x40) == 0)
                goto LABEL_20;
            }
            else
            {
              v8 = 0;
              v11 = 0;
              *((_BYTE *)a2 + 5) = ++v7;
              if ((v13 & 0x40) == 0)
                goto LABEL_20;
            }
LABEL_19:
            v2 |= 0x20u;
            *((_DWORD *)a2 + 4) = v2;
LABEL_20:
            v9 |= (v13 & 0x20) >> 5;
            v10 = 1;
            goto LABEL_21;
          }
LABEL_17:
          v2 |= 8u;
          *((_DWORD *)a2 + 4) = v2;
        }
        v11 = 1;
        if ((v13 & 0x40) != 0)
          goto LABEL_19;
        goto LABEL_20;
      }
LABEL_21:
      if (!--v5)
      {
        if ((v10 & 1) != 0)
        {
          if ((v11 & 1) == 0)
            v2 |= 0x10u;
          if ((v9 & 1) == 0)
            v2 |= 0x100u;
          if ((v11 & 1 & v9) == 0)
            *((_DWORD *)a2 + 4) = v2;
        }
        break;
      }
    }
  }
LABEL_3:
  if ((v2 & 0x4000) != 0)
    *((_DWORD *)a2 + 4) = v2 & 0xFFFFFFE7;
}

uint64_t SLPostLexerImpl::IsInitial(SLPostLexerImpl *this, SLToken *a2, unint64_t a3)
{
  _WORD *v3;
  _QWORD *v7;
  SLToken *v8;
  SLToken *v9;
  SLPostLexerImpl *v10;
  SLToken *v11;
  uint64_t v12;
  char *v14;
  SLToken *v15;

  v3 = (_WORD *)*((_QWORD *)a2 + 7);
  if (*((_QWORD *)a2 + 8) - (_QWORD)v3 != 4)
    return 0;
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
    return 0;
  if ((SLChar::sCharClass[*v3 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v3 >> 6] << 6)] & 0x9F) != 1)
    return 0;
  v7 = (_QWORD *)((char *)this + 96);
  v8 = (SLToken *)SLLexerBuffer::operator[]((_QWORD *)this + 12, a3);
  if (!v8)
    return 0;
  v9 = v8;
  if (*(_BYTE *)v8 != 13)
    return 0;
  if ((*((_BYTE *)v8 + 16) & 1) == 0)
    return 0;
  if (**((_WORD **)v8 + 7) != 46)
    return 0;
  v10 = (SLPostLexerImpl *)SLLexerBuffer::operator[](v7, a3 + 1);
  if (!v10)
    return 0;
  v11 = v10;
  if (*(_BYTE *)v10
    || !SLPostLexerImpl::LooksLikeName(v10, v10, 1) && !SLPostLexerImpl::IsInitial(this, v11, a3 + 2))
  {
    return 0;
  }
  if (a3 > 1)
    return 1;
  if (a3 == 1)
  {
    *(int64x2_t *)((char *)this + 152) = vaddq_s64(*(int64x2_t *)((char *)this + 152), (int64x2_t)xmmword_21701CDA0);
    std::deque<SLToken *>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)this + 120, 1);
  }
  v14 = (char *)this + 120;
  *(int64x2_t *)((char *)this + 152) = vaddq_s64(*(int64x2_t *)((char *)this + 152), (int64x2_t)xmmword_21701CDA0);
  v12 = 1;
  std::deque<SLToken *>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)v14, 1);
  SLToken::~SLToken(v9);
  MEMORY[0x219A0649C]();
  SLToken::SetType(a2, 11);
  ++*((_QWORD *)a2 + 5);
  v15 = a2;
  std::deque<SLToken *>::push_front((uint64_t)v14, &v15);
  return v12;
}

_QWORD *SLPostLexerImpl::HandleCurrency(uint64_t a1, char **a2, SLToken *a3)
{
  SLToken *v6;
  uint64_t v7;
  char **v8;
  char *v9;
  char *v10;
  SLToken *v11;
  SLToken *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t Unit;
  int v17;
  uint64_t v18;
  uint64_t (***v19)(_QWORD);
  uint64_t (***v21)(_QWORD);
  int v22;
  char v23;
  unint64_t v24;
  _BYTE v25[32];
  uint64_t v26;
  char v27[8];
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD v32[4];
  _QWORD v33[2];

  SLTokenList::SLTokenList((SLTokenList *)v32);
  v6 = (SLToken *)SLLexerBuffer::operator[]((_QWORD *)(a1 + 96), 0);
  v7 = a1 + 120;
  v24 = 1;
  *(int64x2_t *)(a1 + 152) = vaddq_s64(*(int64x2_t *)(a1 + 152), (int64x2_t)xmmword_21701CDA0);
  std::deque<SLToken *>::__maybe_remove_front_spare[abi:ne180100](a1 + 120, 1);
  if ((*((_BYTE *)v6 + 16) & 0x81) == 0)
  {
    v21 = SLLexerBuffer::operator[]((_QWORD *)(a1 + 96), 0);
    if (v21)
    {
      if (*(_BYTE *)v21 == 13 && ((_BYTE)v21[2] & 1) == 0)
      {
        v22 = *(unsigned __int16 *)v21[7];
        if (v22 == **(char **)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 176) + 216))(*(_QWORD *)(a1 + 176), 207))
        {
          SLPostLexerImpl::HandleThousandsSeparators((SLPostLexerImpl *)a1, v6, 43);
          v6 = (SLToken *)SLLexerBuffer::operator[]((_QWORD *)(a1 + 96), 0);
          *(int64x2_t *)(a1 + 152) = vaddq_s64(*(int64x2_t *)(a1 + 152), (int64x2_t)xmmword_21701CDA0);
          std::deque<SLToken *>::__maybe_remove_front_spare[abi:ne180100](a1 + 120, 1);
        }
      }
    }
  }
  if ((*((_BYTE *)v6 + 17) & 0x10) != 0)
  {
    SLDissecter::DissectUnit(*(_QWORD *)(a1 + 184), (uint64_t)v6, (uint64_t)v27);
    if (v27[0])
      v17 = 42;
    else
      v17 = 43;
    Unit = SLPostLexerImpl::FindUnit((SLPostLexerImpl *)a1, v6, v30, ((uint64_t)(*((_QWORD *)v6 + 8) - *((_QWORD *)v6 + 7)) >> 1) - 1, v17);
    if (!Unit)
    {
      SLDissecter::DissectNumber(*(_QWORD *)(a1 + 184), (uint64_t)v6, v28, v29, (uint64_t)v25);
      if (v26)
        v23 = 7;
      else
        v23 = 2;
      SLToken::SetType(v6, v23);
      v33[0] = v6;
      std::deque<SLToken *>::push_front(a1 + 120, v33);
      v33[0] = a3;
      std::deque<SLToken *>::push_front(a1 + 120, v33);
      return std::__list_imp<SLToken *>::clear(v32);
    }
    v8 = a2;
    v15 = v28;
    v13 = v29;
    v7 = v31;
    v24 = *((_QWORD *)v6 + 4) + v30;
    v14 = 63;
  }
  else
  {
    v8 = a2;
    v10 = (char *)*((_QWORD *)v6 + 7);
    v9 = (char *)*((_QWORD *)v6 + 8);
    v11 = (SLToken *)SLLexerBuffer::operator[]((_QWORD *)(a1 + 96), 0);
    v12 = v11;
    v13 = ((v9 - v10) >> 1) - 1;
    if (v11 && !*(_BYTE *)v11)
    {
      Unit = SLPostLexerImpl::FindUnit((SLPostLexerImpl *)a1, v11, 0, ((uint64_t)(*((_QWORD *)v11 + 8) - *((_QWORD *)v11 + 7)) >> 1) - 1, 42);
      if (Unit)
      {
        *(int64x2_t *)(a1 + 152) = vaddq_s64(*(int64x2_t *)(a1 + 152), (int64x2_t)xmmword_21701CDA0);
        std::deque<SLToken *>::__maybe_remove_front_spare[abi:ne180100](a1 + 120, 1);
        v7 = *((_QWORD *)v12 + 5);
        v24 = *((_QWORD *)v12 + 4);
        v14 = SLToken::Capitalization(v12);
        SLToken::~SLToken(v12);
        MEMORY[0x219A0649C]();
      }
      else
      {
        v14 = 0;
      }
      v15 = 0;
    }
    else
    {
      v14 = 0;
      v15 = 0;
      Unit = 0;
    }
  }
  SLDissecter::DissectNumber(*(_QWORD *)(a1 + 184), (uint64_t)v6, v15, v13, (uint64_t)v25);
  if (Unit
    || (v18 = v26) == 0
    || strchr(*v8, 59) && v18 == 2
    || !(*(unsigned int (**)(uint64_t, char **, SLToken *))(*(_QWORD *)a1 + 112))(a1, v8, v6))
  {
    (*(void (**)(_QWORD, char **, SLToken *, SLToken *, _BYTE *, uint64_t, unint64_t, uint64_t, int, _QWORD *))(**(_QWORD **)(a1 + 176) + 88))(*(_QWORD *)(a1 + 176), v8, a3, v6, v25, Unit, v24, v7, v14, v32);
  }
  else
  {
    (*(void (**)(_QWORD, SLToken *, _QWORD *, _BYTE *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 176) + 48))(*(_QWORD *)(a1 + 176), v6, v32, v25, 0, 0);
  }
  v19 = SLLexerBuffer::operator[]((_QWORD *)(a1 + 96), 0);
  if (v19)
    *((_BYTE *)v19 + 1) = 2;
  SLPostLexerImpl::push_front((SLPostLexerImpl *)a1, (const SLTokenList *)v32);
  if (a3)
  {
    SLToken::~SLToken(a3);
    MEMORY[0x219A0649C]();
  }
  SLToken::~SLToken(v6);
  MEMORY[0x219A0649C]();
  return std::__list_imp<SLToken *>::clear(v32);
}

void sub_216FC0008(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__list_imp<SLToken *>::clear((_QWORD *)(v1 - 128));
  _Unwind_Resume(a1);
}

uint64_t SLPostLexerImpl::HandleDayAbbr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  SLPostLexerImpl *v7;
  BOOL HasTag;
  char v9;
  int v10;
  uint64_t v11;
  int v12;
  SLToken *v13;
  uint64_t v14;
  int v16;
  int v17;
  SLPostLexerImpl *v18;
  _BOOL4 v19;
  uint64_t (***v20)(_QWORD);
  std::string __p;
  char v22[8];
  SLToken *v23;

  v6 = (_QWORD *)(a1 + 96);
  v7 = (SLPostLexerImpl *)SLLexerBuffer::operator[]((_QWORD *)(a1 + 96), 0);
  SLPostLexerImpl::Transcribe(v7, (SLToken *)a3, 2, 0, ((uint64_t)(*(_QWORD *)(a3 + 64) - *(_QWORD *)(a3 + 56)) >> 1) - 1, &__p);
  SLTmpLookup::SLTmpLookup(v22, &__p, *(_QWORD *)(a1 + 168));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!v22[0]
    || (HasTag = SLToken::HasTag(v23, 64), !v22[0])
    || (*(_BYTE *)(a3 + 5) != 1 ? (v9 = 1) : (v9 = HasTag), (v9 & 1) == 0))
  {
    v10 = 0;
    goto LABEL_16;
  }
  if (!v7)
    goto LABEL_43;
  if ((*(_BYTE *)(a3 + 16) & 1) == 0)
  {
    if (*(_BYTE *)v7 != 13)
      goto LABEL_43;
    if (**((_WORD **)v7 + 7) == 46)
    {
      v7 = (SLPostLexerImpl *)SLLexerBuffer::operator[](v6, 1uLL);
      if (v7)
      {
        v10 = 1;
        goto LABEL_22;
      }
LABEL_43:
      v14 = 0;
      goto LABEL_20;
    }
  }
  v10 = 0;
LABEL_22:
  v16 = *(unsigned __int8 *)v7;
  if (v16 == 13)
  {
    if (**((_WORD **)v7 + 7) != 44)
      goto LABEL_43;
    v17 = v10 + 1;
    v18 = (SLPostLexerImpl *)SLLexerBuffer::operator[](v6, (v10 + 1));
    v7 = v18;
    if (!v18)
      goto LABEL_43;
    v16 = *(unsigned __int8 *)v18;
  }
  else
  {
    v17 = v10;
  }
  if (v16)
  {
LABEL_28:
    if (v16 == 18 || v16 == 24)
      goto LABEL_16;
    goto LABEL_42;
  }
  if (!SLPostLexerImpl::FindUnit((SLPostLexerImpl *)a1, v7, 0, ((uint64_t)(*((_QWORD *)v7 + 8) - *((_QWORD *)v7 + 7)) >> 1) - 1, 62))
  {
    v16 = *(unsigned __int8 *)v7;
    goto LABEL_28;
  }
  v19 = *((_QWORD *)v7 + 8) - *((_QWORD *)v7 + 7) == 8 && (*((_BYTE *)v7 + 16) & 1) == 0;
  v20 = SLLexerBuffer::operator[](v6, (v17 + 1));
  if (!v20)
    goto LABEL_43;
  if (v19)
  {
    v16 = *(unsigned __int8 *)v20;
    if (v16 != 13)
      goto LABEL_42;
    if (*(_WORD *)v20[7] == 46)
    {
      v20 = SLLexerBuffer::operator[](v6, (v17 + 2));
      if (!v20)
        goto LABEL_43;
    }
  }
  v16 = *(unsigned __int8 *)v20;
LABEL_42:
  if (v16 != 1)
    goto LABEL_43;
LABEL_16:
  SLTokenList::SLTokenList((SLTokenList *)&__p);
  (*(void (**)(_QWORD, uint64_t, std::string *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 176) + 232))(*(_QWORD *)(a1 + 176), a2, &__p, *(_QWORD *)(a3 + 32), *(_QWORD *)(a3 + 40));
  v11 = *(_QWORD *)(__p.__r_.__value_.__l.__size_ + 16);
  v12 = SLToken::Capitalization((SLToken *)a3);
  SLToken::SetCapitalization(v11, v12);
  SLToken::~SLToken((SLToken *)a3);
  MEMORY[0x219A0649C]();
  if (v10)
  {
    v13 = (SLToken *)SLLexerBuffer::operator[](v6, 0);
    *(int64x2_t *)(a1 + 152) = vaddq_s64(*(int64x2_t *)(a1 + 152), (int64x2_t)xmmword_21701CDA0);
    std::deque<SLToken *>::__maybe_remove_front_spare[abi:ne180100](a1 + 120, 1);
    if (v13)
    {
      SLToken::~SLToken(v13);
      MEMORY[0x219A0649C]();
    }
  }
  SLPostLexerImpl::push_front((SLPostLexerImpl *)a1, (const SLTokenList *)&__p);
  std::__list_imp<SLToken *>::clear(&__p);
  v14 = 1;
LABEL_20:
  SLTmpLookup::~SLTmpLookup((SLTmpLookup *)v22);
  return v14;
}

void sub_216FC031C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  SLTmpLookup::~SLTmpLookup((SLTmpLookup *)&a16);
  _Unwind_Resume(a1);
}

uint64_t SLPostLexerImpl::HandleMonthAbbr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  SLPostLexerImpl *v7;
  _BOOL4 HasTag;
  unsigned int v9;
  _BOOL4 v10;
  int v12;
  SLPostLexerImpl *v13;
  int v14;
  int v15;
  int v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  char **Unit;
  char *v22;
  _BOOL4 v23;
  SLToken *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  std::string __p;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34[8];
  SLToken *v35;

  v6 = (_QWORD *)(a1 + 96);
  v7 = (SLPostLexerImpl *)SLLexerBuffer::operator[]((_QWORD *)(a1 + 96), 0);
  SLPostLexerImpl::Transcribe(v7, (SLToken *)a3, 2, 0, ((uint64_t)(*(_QWORD *)(a3 + 64) - *(_QWORD *)(a3 + 56)) >> 1) - 1, &__p);
  SLTmpLookup::SLTmpLookup(v34, &__p, *(_QWORD *)(a1 + 168));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v34[0])
    HasTag = SLToken::HasTag(v35, 64);
  else
    HasTag = 0;
  v9 = *(_DWORD *)(a3 + 16);
  v10 = (v9 & 1) == 0 && *(_BYTE *)v7 == 13 && **((unsigned __int16 **)v7 + 7) == 46;
  if (v34[0])
  {
    if (*(_BYTE *)(a3 + 5) == 1 && HasTag)
      v12 = (v9 >> 18) & 1;
    else
      v12 = *(unsigned __int8 *)(a3 + 5) == 1;
    if ((v9 & 1) != 0)
      goto LABEL_21;
  }
  else
  {
    v12 = 1;
    if ((v9 & 1) != 0)
      goto LABEL_21;
  }
  if (*(_BYTE *)v7 != 13)
    goto LABEL_69;
LABEL_21:
  if (v12)
  {
    if (v10)
    {
      v13 = (SLPostLexerImpl *)SLLexerBuffer::operator[](v6, 1uLL);
      v7 = v13;
      if (!v13)
        goto LABEL_68;
      if (*(_BYTE *)v13 == 1)
        goto LABEL_41;
      if (*(_BYTE *)v13)
        goto LABEL_68;
      v14 = *((_DWORD *)v13 + 4);
      if ((v14 & 0x10000) == 0)
      {
        v10 = (SLChar::sCharClass[**((_WORD **)v13 + 7) & 0x3F | (SLChar::sUniMap[(unint64_t)**((unsigned __int16 **)v13 + 7) >> 6] << 6)] & 0x9F) == 129;
        goto LABEL_46;
      }
      if ((v14 & 0x1000) == 0
        || !memchr("MDL", **((unsigned __int16 **)v13 + 7), 4uLL)
        && SLPostLexerImpl::IsRomanOrdinal((SLPostLexerImpl *)a1, v7))
      {
        SLToken::SetType(v7, 17);
        if (*(_BYTE *)v7 != 1)
          goto LABEL_66;
LABEL_41:
        LOBYTE(v10) = 1;
        goto LABEL_47;
      }
    }
    else if (!v7)
    {
      goto LABEL_68;
    }
    v10 = 0;
  }
  else
  {
    if (v10)
      v7 = (SLPostLexerImpl *)SLLexerBuffer::operator[](v6, 1uLL);
    if (!v7)
      goto LABEL_69;
    v15 = *(unsigned __int8 *)v7;
    if (!*(_BYTE *)v7)
    {
      v16 = *((_DWORD *)v7 + 4);
      if ((v16 & 0x10000) != 0)
      {
        v17 = (char *)*((_QWORD *)v7 + 7);
        if (((unint64_t)(((uint64_t)(*((_QWORD *)v7 + 8) - (_QWORD)v17) >> 1) - 3) < 0xFFFFFFFFFFFFFFFELL
           || *(_WORD *)v17 != 73)
          && ((v16 & 0x1000) == 0
           || !memchr("MDL", *(unsigned __int16 *)v17, 4uLL)
           && SLPostLexerImpl::IsRomanOrdinal((SLPostLexerImpl *)a1, v7)))
        {
          SLToken::SetType(v7, 17);
        }
      }
      v15 = *(unsigned __int8 *)v7;
    }
    if ((v15 | 0x10) != 0x11)
      goto LABEL_69;
  }
LABEL_46:
  if (*(_BYTE *)v7 == 1)
  {
LABEL_47:
    if ((*((_BYTE *)v7 + 17) & 0x10) != 0)
    {
      SLDissecter::DissectUnit(*(_QWORD *)(a1 + 184), (uint64_t)v7, (uint64_t)&__p);
      Unit = (char **)SLPostLexerImpl::FindUnit((SLPostLexerImpl *)a1, v7, v30, ((uint64_t)(*((_QWORD *)v7 + 8) - *((_QWORD *)v7 + 7)) >> 1) - 1, 35);
      v20 = 0;
      if (Unit)
      {
        v22 = *Unit;
        if (*v22 == 64 && !strchr(v22, 43))
          v20 = 1;
      }
      v18 = v30;
      v19 = v31;
    }
    else
    {
      v18 = 0;
      v19 = ((uint64_t)(*((_QWORD *)v7 + 8) - *((_QWORD *)v7 + 7)) >> 1) - 1;
      v20 = 1;
    }
    SLDissecter::DissectNumber(*(_QWORD *)(a1 + 184), (uint64_t)v7, v18, v19, (uint64_t)&__p);
    if (v31 | v32)
      v23 = 0;
    else
      v23 = v20;
    if (((v12 | v23) & 1) != 0)
    {
      if (!v33)
        v23 = 0;
      if (v23 && v33 <= 0x20)
        *((_DWORD *)v7 + 4) |= 0x20000u;
      if (!v10)
        goto LABEL_68;
      goto LABEL_66;
    }
LABEL_69:
    v27 = 0;
    goto LABEL_70;
  }
  if (v10)
  {
LABEL_66:
    v24 = (SLToken *)SLLexerBuffer::operator[](v6, 0);
    *(int64x2_t *)(a1 + 152) = vaddq_s64(*(int64x2_t *)(a1 + 152), (int64x2_t)xmmword_21701CDA0);
    std::deque<SLToken *>::__maybe_remove_front_spare[abi:ne180100](a1 + 120, 1);
    if (v24)
    {
      SLToken::~SLToken(v24);
      MEMORY[0x219A0649C]();
    }
  }
LABEL_68:
  SLTokenList::SLTokenList((SLTokenList *)&__p);
  (*(void (**)(_QWORD, uint64_t, std::string *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 176) + 232))(*(_QWORD *)(a1 + 176), a2, &__p, *(_QWORD *)(a3 + 32), *(_QWORD *)(a3 + 40));
  v25 = *(_QWORD *)(__p.__r_.__value_.__l.__size_ + 16);
  v26 = SLToken::Capitalization((SLToken *)a3);
  SLToken::SetCapitalization(v25, v26);
  SLToken::~SLToken((SLToken *)a3);
  MEMORY[0x219A0649C]();
  SLPostLexerImpl::push_front((SLPostLexerImpl *)a1, (const SLTokenList *)&__p);
  std::__list_imp<SLToken *>::clear(&__p);
  v27 = 1;
LABEL_70:
  SLTmpLookup::~SLTmpLookup((SLTmpLookup *)v34);
  return v27;
}

void sub_216FC07BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  SLTmpLookup::~SLTmpLookup((SLTmpLookup *)&a20);
  _Unwind_Resume(a1);
}

void SLPostLexerImpl::HandleApostrophes(SLPostLexerImpl *this, SLToken *a2, SLTokenList *a3)
{
  SLTokenList *v3;
  unsigned __int16 *v4;
  char **v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _BOOL4 v9;
  unint64_t v10;
  unsigned int v11;
  BOOL v12;
  unsigned int v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  SLTokenList *v18;
  CFIndex v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  SLTokenList *v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  void **v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  SLToken *v36;
  char *v37;
  unint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  __int16 v56;
  uint64_t v57;
  _WORD *v58;
  _BYTE *v59;
  __int16 v60;
  int64_t v61;
  uint64_t v62;
  size_t v63;
  SLToken *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  int v69;
  SLToken *v70;
  int v71;
  SLToken *v72;
  SLToken *v73;
  char *v74;
  void **v75;
  char *v76;
  char *v77;
  char *v78;
  void **v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  __int16 v98;
  _WORD *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  char *v108;
  __int16 v109;
  char *v110;
  __int16 v111;
  _WORD *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  __int16 v121;
  uint64_t v122;
  _WORD *v123;
  SLTokenList *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  char *v133;
  __int16 v134;
  _QWORD *v135;
  _QWORD *v136;
  uint64_t v137;
  char *v138;
  char *v139;
  __int16 v140;
  _QWORD *v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  void **v146;
  char *v147;
  SLToken *v148;
  char *v149;
  SLPostLexerImpl *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  __int16 v159;
  _WORD *v160;
  SLTokenList *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  char *v168;
  char *v169;
  char *v170;
  __int16 v171;
  uint64_t v172;
  SLPostLexerImpl *v173;
  SLToken *v174;
  SLToken *v176;
  CFRange v177;

  v3 = a3;
  v4 = (unsigned __int16 *)*((_QWORD *)a2 + 7);
  v5 = (char **)((char *)a2 + 56);
  v6 = (uint64_t)(*((_QWORD *)a2 + 8) - (_QWORD)v4) >> 1;
  v7 = v6 - 1;
  if (v6 == 1
    || ((v8 = (unsigned __int16)SLChar::sCharClass[*v4 & 0x3F | (SLChar::sUniMap[(unint64_t)*v4 >> 6] << 6)],
         v6 != 2)
      ? (v10 = v4[v6 - 2], v9 = SLChar::sCharClass[v10 & 0x3F | (SLChar::sUniMap[v10 >> 6] << 6)] == 4)
      : (v9 = 0),
        v8 != 4 ? (v11 = v9) : (v11 = v9 + 1),
        v8 != 4 ? (v12 = !v9) : (v12 = 0),
        v12))
  {
    SLPostLexerImpl::HandleLookup(this, a2, 1, a3);
    return;
  }
  v174 = a2;
  v13 = *((unsigned __int8 *)a2 + 4);
  v173 = this;
  if (v8 == 4)
  {
    v14 = !v9;
    v15 = v7 != 3;
    if (v6 == 4 && (v14 & 1) == 0)
    {
      if ((SLChar::sCharClass[v4[1] & 0x3F | (SLChar::sUniMap[(unint64_t)v4[1] >> 6] << 6)] & 0x9F) == 1)
      {
        if (v11 >= v13)
        {
          v172 = 0;
          if (!v9)
            goto LABEL_47;
LABEL_37:
          if ((*(unsigned int (**)(SLPostLexerImpl *, _QWORD, _QWORD, SLTokenList *))(*(_QWORD *)v173 + 72))(v173, *(unsigned __int16 *)*v5, *((unsigned __int16 *)*v5 + 2), v3))
          {
            SLToken::SetType(v174, 10);
            v176 = v174;
            std::deque<SLToken *>::push_front((uint64_t)v173 + 120, &v176);
            return;
          }
          goto LABEL_43;
        }
        goto LABEL_32;
      }
      v15 = 0;
      v14 = 0;
    }
  }
  else
  {
    v16 = *((_QWORD *)this + 28);
    if (v16 == *((_QWORD *)this + 27))
    {
      v14 = !v9;
      v15 = 1;
    }
    else
    {
      if (((*(uint64_t (**)(SLPostLexerImpl *, _QWORD, _QWORD, SLTokenList *))(*(_QWORD *)this + 72))(this, *(unsigned __int16 *)(v16 - 2), v4[v6 - 2], a3) & 1) != 0)
      {
        if (v11 >= v13)
        {
          if (!v9)
            return;
          v172 = 0x100000000;
          goto LABEL_43;
        }
        goto LABEL_39;
      }
      v14 = !v9;
      v15 = 1;
      this = v173;
      a2 = v174;
    }
  }
  LODWORD(v172) = v14;
  HIDWORD(v172) = v8 != 4;
  if ((SLPostLexerImpl::HandleLookup(this, a2, 0, a3) & 1) != 0)
    return;
  if (v11 < v13)
  {
    if (v8 == 4)
    {
LABEL_32:
      v17 = 1;
      v18 = a3;
      do
      {
        v19 = v17 + 1;
        v20 = (unsigned __int16)SLChar::sCharClass[*(_WORD *)&(*v5)[2 * v17] & 0x3F | (SLChar::sUniMap[(unint64_t)*(unsigned __int16 *)&(*v5)[2 * v17] >> 6] << 6)];
        ++v17;
      }
      while (v20 != 4);
LABEL_41:
      v22 = operator new();
      SLToken::SLToken((SLToken *)v22, 0, 0);
      v177.length = v7 - v19;
      v177.location = v19;
      SLToken::TransferTokenRange((SLToken *)v22, v174, v177);
      v23 = *((_DWORD *)v174 + 4);
      *(_DWORD *)(v22 + 16) = v23;
      *((_DWORD *)v174 + 4) = v23 & 0xFFFFFFFE;
      *((_BYTE *)v174 + 3) = 0;
      SLTokenList::push_back(v18, v174);
      v24 = v18;
      goto LABEL_42;
    }
    do
    {
LABEL_39:
      v21 = (unsigned __int16)SLChar::sCharClass[*(_WORD *)&(*v5)[2 * v6 - 6] & 0x3F | (SLChar::sUniMap[(unint64_t)*(unsigned __int16 *)&(*v5)[2 * v6 - 6] >> 6] << 6)];
      --v6;
    }
    while (v21 != 4);
    v19 = v6 - 2;
    v18 = a3;
    goto LABEL_41;
  }
  if (!v9)
  {
    if (v8 == 4)
    {
LABEL_47:
      v35 = *((_QWORD *)v174 + 5);
      v36 = v174;
      v37 = (char *)*((_QWORD *)v174 + 8);
      goto LABEL_75;
    }
    return;
  }
  if (!v15)
    goto LABEL_37;
LABEL_43:
  v25 = *((_QWORD *)v174 + 8);
  *((_QWORD *)v174 + 8) = v25 - 2;
  v26 = *(_WORD *)(v25 - 4);
  *(_WORD *)(v25 - 4) = 0;
  --*((_BYTE *)v174 + 4);
  v27 = *((_QWORD *)v174 + 4);
  v28 = *((_QWORD *)v174 + 5) - 1;
  *((_QWORD *)v174 + 5) = v28;
  if (SLPostLexerImpl::HandleLookup(v173, v174, SHIDWORD(v172), a3))
  {
    v29 = v28;
    v22 = operator new();
    SLToken::SLToken((SLToken *)v22, 4, 4);
    v30 = *(char **)(v22 + 72);
    v31 = (void **)(v22 + 56);
    v32 = *(char **)(v22 + 64);
    if (v32 >= v30)
    {
      v47 = (char *)*v31;
      v48 = v32 - (_BYTE *)*v31;
      if (v48 <= -3)
        goto LABEL_213;
      v33 = v27;
      v49 = v48 >> 1;
      v50 = v30 - v47;
      if (v50 <= (v48 >> 1) + 1)
        v51 = v49 + 1;
      else
        v51 = v50;
      if (v50 >= 0x7FFFFFFFFFFFFFFELL)
        v52 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v52 = v51;
      if (v52)
      {
        v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v22 + 72, v52);
        v47 = *(char **)(v22 + 56);
        v32 = *(char **)(v22 + 64);
      }
      else
      {
        v53 = 0;
      }
      v97 = &v53[2 * v49];
      v30 = &v53[2 * v52];
      *(_WORD *)v97 = v26;
      v34 = v97 + 2;
      while (v32 != v47)
      {
        v98 = *((_WORD *)v32 - 1);
        v32 -= 2;
        *((_WORD *)v97 - 1) = v98;
        v97 -= 2;
      }
      *(_QWORD *)(v22 + 56) = v97;
      *(_QWORD *)(v22 + 64) = v34;
      *(_QWORD *)(v22 + 72) = v30;
      if (v47)
      {
        operator delete(v47);
        v30 = *(char **)(v22 + 72);
      }
    }
    else
    {
      v33 = v27;
      *(_WORD *)v32 = v26;
      v34 = v32 + 2;
    }
    *(_QWORD *)(v22 + 64) = v34;
    if (v34 >= v30)
    {
      v100 = (char *)*v31;
      v101 = v34 - (_BYTE *)*v31;
      if (v101 <= -3)
        goto LABEL_213;
      v102 = v101 >> 1;
      v103 = v30 - v100;
      if (v103 <= (v101 >> 1) + 1)
        v104 = v102 + 1;
      else
        v104 = v103;
      if (v103 >= 0x7FFFFFFFFFFFFFFELL)
        v105 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v105 = v104;
      if (v105)
      {
        v106 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v22 + 72, v105);
        v100 = *(char **)(v22 + 56);
        v34 = *(char **)(v22 + 64);
      }
      else
      {
        v106 = 0;
      }
      v107 = &v106[2 * v102];
      v108 = &v106[2 * v105];
      *(_WORD *)v107 = 0;
      v99 = v107 + 2;
      while (v34 != v100)
      {
        v109 = *((_WORD *)v34 - 1);
        v34 -= 2;
        *((_WORD *)v107 - 1) = v109;
        v107 -= 2;
      }
      *(_QWORD *)(v22 + 56) = v107;
      *(_QWORD *)(v22 + 64) = v99;
      *(_QWORD *)(v22 + 72) = v108;
      if (v100)
        operator delete(v100);
    }
    else
    {
      *(_WORD *)v34 = 0;
      v99 = v34 + 2;
    }
    *(_QWORD *)(v22 + 64) = v99;
    *(_QWORD *)(v22 + 32) = v33 + v29;
    *(_QWORD *)(v22 + 40) = 1;
    v24 = a3;
LABEL_42:
    SLTokenList::push_back(v24, (SLToken *)v22);
    return;
  }
  v38 = *((_QWORD *)v174 + 9);
  v39 = (char *)*((_QWORD *)v174 + 8);
  *((_WORD *)v39 - 1) = v26;
  if ((unint64_t)v39 >= v38)
  {
    v40 = *v5;
    v41 = v39 - *v5;
    if (v41 <= -3)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v42 = v41 >> 1;
    v43 = v38 - (_QWORD)v40;
    if (v43 <= (v41 >> 1) + 1)
      v44 = v42 + 1;
    else
      v44 = v43;
    if (v43 >= 0x7FFFFFFFFFFFFFFELL)
      v45 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v45 = v44;
    if (v45)
    {
      v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)v174 + 72, v45);
      v40 = (char *)*((_QWORD *)v174 + 7);
      v39 = (char *)*((_QWORD *)v174 + 8);
    }
    else
    {
      v46 = 0;
    }
    v54 = &v46[2 * v42];
    v55 = &v46[2 * v45];
    *(_WORD *)v54 = 0;
    v37 = v54 + 2;
    while (v39 != v40)
    {
      v56 = *((_WORD *)v39 - 1);
      v39 -= 2;
      *((_WORD *)v54 - 1) = v56;
      v54 -= 2;
    }
    *((_QWORD *)v174 + 7) = v54;
    *((_QWORD *)v174 + 8) = v37;
    *((_QWORD *)v174 + 9) = v55;
    if (v40)
      operator delete(v40);
  }
  else
  {
    *(_WORD *)v39 = 0;
    v37 = v39 + 2;
  }
  *((_QWORD *)v174 + 8) = v37;
  v35 = *((_QWORD *)v174 + 5) + 1;
  *((_QWORD *)v174 + 5) = v35;
  v36 = v174;
  ++*((_BYTE *)v174 + 4);
  if (v8 == 4)
  {
LABEL_75:
    v57 = *((_QWORD *)v36 + 4);
    v58 = (_WORD *)*((_QWORD *)v36 + 7);
    v59 = v58 + 1;
    v60 = *v58;
    v61 = v37 - (char *)(v58 + 1);
    if (v37 == (char *)(v58 + 1))
    {
      v66 = *((_QWORD *)v36 + 7);
      v62 = *((_QWORD *)v36 + 4);
      v65 = v35;
    }
    else
    {
      v62 = *((_QWORD *)v36 + 4);
      v63 = v37 - v59;
      v64 = v36;
      memmove(*((void **)v36 + 7), v59, v63);
      v36 = v64;
      v57 = *((_QWORD *)v64 + 4);
      v65 = *((_QWORD *)v64 + 5);
      v66 = *((_QWORD *)v64 + 7);
    }
    *((_QWORD *)v36 + 8) = (char *)v58 + v61;
    *((_QWORD *)v36 + 4) = v57 + 1;
    *((_QWORD *)v36 + 5) = v65 - 1;
    --*((_BYTE *)v36 + 4);
    v67 = (((uint64_t)v58 + v61 - v66) >> 1) - 1;
    v68 = *((unsigned __int8 *)v36 + 5);
    if (v67 > v68)
    {
      v69 = *((unsigned __int8 *)v36 + 5);
      do
      {
        if ((SLChar::sCharClass[*(_WORD *)(v66 + 2 * v68) & 0x3F | (SLChar::sUniMap[(unint64_t)*(unsigned __int16 *)(v66 + 2 * v68) >> 6] << 6)] & 0x9F) != 1)
          break;
        *((_BYTE *)v36 + 5) = ++v69;
        v68 = v69;
      }
      while (v67 > v69);
    }
    v70 = v36;
    v71 = SLPostLexerImpl::HandleLookup(v173, v36, v172, a3);
    v72 = (SLToken *)operator new();
    v73 = v72;
    if (v71)
    {
      SLToken::SLToken(v72, 4, 2);
      v74 = (char *)*((_QWORD *)v73 + 9);
      v75 = (void **)((char *)v73 + 56);
      v76 = (char *)*((_QWORD *)v73 + 8);
      if (v76 >= v74)
      {
        v83 = (char *)*v75;
        v84 = v76 - (_BYTE *)*v75;
        if (v84 <= -3)
          goto LABEL_213;
        v85 = v84 >> 1;
        v86 = v74 - v83;
        if (v86 <= (v84 >> 1) + 1)
          v87 = v85 + 1;
        else
          v87 = v86;
        if (v86 >= 0x7FFFFFFFFFFFFFFELL)
          v88 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v88 = v87;
        if (v88)
        {
          v89 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)v73 + 72, v88);
          v83 = (char *)*((_QWORD *)v73 + 7);
          v76 = (char *)*((_QWORD *)v73 + 8);
        }
        else
        {
          v89 = 0;
        }
        v110 = &v89[2 * v85];
        v74 = &v89[2 * v88];
        *(_WORD *)v110 = v60;
        v77 = v110 + 2;
        while (v76 != v83)
        {
          v111 = *((_WORD *)v76 - 1);
          v76 -= 2;
          *((_WORD *)v110 - 1) = v111;
          v110 -= 2;
        }
        *((_QWORD *)v73 + 7) = v110;
        *((_QWORD *)v73 + 8) = v77;
        *((_QWORD *)v73 + 9) = v74;
        if (v83)
        {
          operator delete(v83);
          v74 = (char *)*((_QWORD *)v73 + 9);
        }
      }
      else
      {
        *(_WORD *)v76 = v60;
        v77 = v76 + 2;
      }
      *((_QWORD *)v73 + 8) = v77;
      if (v77 < v74)
      {
        *(_WORD *)v77 = 0;
        v112 = v77 + 2;
LABEL_169:
        *((_QWORD *)v73 + 8) = v112;
        *((_QWORD *)v73 + 4) = v62;
        *((_QWORD *)v73 + 5) = 1;
        v135 = operator new(0x18uLL);
        v136 = (_QWORD *)*((_QWORD *)a3 + 1);
        v137 = *((_QWORD *)a3 + 2);
        *v135 = a3;
        v135[1] = v136;
        v135[2] = v73;
        *v136 = v135;
        *((_QWORD *)a3 + 1) = v135;
        *((_QWORD *)a3 + 2) = v137 + 1;
        return;
      }
      v113 = (char *)*v75;
      v114 = v77 - (_BYTE *)*v75;
      if (v114 > -3)
      {
        v115 = v114 >> 1;
        v116 = v74 - v113;
        if (v116 <= (v114 >> 1) + 1)
          v117 = v115 + 1;
        else
          v117 = v116;
        if (v116 >= 0x7FFFFFFFFFFFFFFELL)
          v118 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v118 = v117;
        if (v118)
        {
          v119 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)v73 + 72, v118);
          v113 = (char *)*((_QWORD *)v73 + 7);
          v77 = (char *)*((_QWORD *)v73 + 8);
        }
        else
        {
          v119 = 0;
        }
        v132 = &v119[2 * v115];
        v133 = &v119[2 * v118];
        *(_WORD *)v132 = 0;
        v112 = v132 + 2;
        while (v77 != v113)
        {
          v134 = *((_WORD *)v77 - 1);
          v77 -= 2;
          *((_WORD *)v132 - 1) = v134;
          v132 -= 2;
        }
        *((_QWORD *)v73 + 7) = v132;
        *((_QWORD *)v73 + 8) = v112;
        *((_QWORD *)v73 + 9) = v133;
        if (v113)
          operator delete(v113);
        goto LABEL_169;
      }
LABEL_213:
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    SLToken::SLToken(v72, 4, 2);
    v78 = (char *)*((_QWORD *)v73 + 9);
    v79 = (void **)((char *)v73 + 56);
    v80 = (char *)*((_QWORD *)v73 + 8);
    if (v80 >= v78)
    {
      v90 = (char *)*v79;
      v91 = v80 - (_BYTE *)*v79;
      if (v91 <= -3)
        goto LABEL_214;
      v92 = v91 >> 1;
      v93 = v78 - v90;
      if (v93 <= (v91 >> 1) + 1)
        v94 = v92 + 1;
      else
        v94 = v93;
      if (v93 >= 0x7FFFFFFFFFFFFFFELL)
        v95 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v95 = v94;
      if (v95)
      {
        v96 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)v73 + 72, v95);
        v90 = (char *)*((_QWORD *)v73 + 7);
        v80 = (char *)*((_QWORD *)v73 + 8);
      }
      else
      {
        v96 = 0;
      }
      v120 = &v96[2 * v92];
      v78 = &v96[2 * v95];
      *(_WORD *)v120 = v60;
      v81 = v120 + 2;
      v82 = v62;
      while (v80 != v90)
      {
        v121 = *((_WORD *)v80 - 1);
        v80 -= 2;
        *((_WORD *)v120 - 1) = v121;
        v120 -= 2;
      }
      *((_QWORD *)v73 + 7) = v120;
      *((_QWORD *)v73 + 8) = v81;
      *((_QWORD *)v73 + 9) = v78;
      if (v90)
      {
        operator delete(v90);
        v78 = (char *)*((_QWORD *)v73 + 9);
      }
    }
    else
    {
      *(_WORD *)v80 = v60;
      v81 = v80 + 2;
      v82 = v62;
    }
    *((_QWORD *)v73 + 8) = v81;
    if (v81 >= v78)
    {
      v125 = (char *)*v79;
      v126 = v81 - (_BYTE *)*v79;
      if (v126 <= -3)
        goto LABEL_214;
      v122 = v35;
      v127 = v126 >> 1;
      v128 = v78 - v125;
      if (v128 <= (v126 >> 1) + 1)
        v129 = v127 + 1;
      else
        v129 = v128;
      if (v128 >= 0x7FFFFFFFFFFFFFFELL)
        v130 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v130 = v129;
      if (v130)
      {
        v131 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)v73 + 72, v130);
        v125 = (char *)*((_QWORD *)v73 + 7);
        v81 = (char *)*((_QWORD *)v73 + 8);
      }
      else
      {
        v131 = 0;
      }
      v124 = a3;
      v138 = &v131[2 * v127];
      v139 = &v131[2 * v130];
      *(_WORD *)v138 = 0;
      v123 = v138 + 2;
      while (v81 != v125)
      {
        v140 = *((_WORD *)v81 - 1);
        v81 -= 2;
        *((_WORD *)v138 - 1) = v140;
        v138 -= 2;
      }
      *((_QWORD *)v73 + 7) = v138;
      *((_QWORD *)v73 + 8) = v123;
      *((_QWORD *)v73 + 9) = v139;
      if (v125)
        operator delete(v125);
    }
    else
    {
      v122 = v35;
      *(_WORD *)v81 = 0;
      v123 = v81 + 2;
      v124 = a3;
    }
    *((_QWORD *)v73 + 8) = v123;
    *((_QWORD *)v73 + 4) = v82;
    *((_QWORD *)v73 + 5) = 1;
    v141 = operator new(0x18uLL);
    v142 = (_QWORD *)*((_QWORD *)v124 + 1);
    v143 = *((_QWORD *)v124 + 2);
    *v141 = v124;
    v141[1] = v142;
    v141[2] = v73;
    *v142 = v141;
    *((_QWORD *)v124 + 1) = v141;
    *((_QWORD *)v124 + 2) = v143 + 1;
    v22 = operator new();
    SLToken::SLToken((SLToken *)v22, 4, 4);
    v144 = *((_QWORD *)v70 + 8);
    *((_QWORD *)v70 + 8) = v144 - 2;
    v145 = *(char **)(v22 + 72);
    v146 = (void **)(v22 + 56);
    v147 = *(char **)(v22 + 64);
    if (v147 >= v145)
    {
      v151 = (char *)*v146;
      v152 = v147 - (_BYTE *)*v146;
      if (v152 <= -3)
        goto LABEL_214;
      v153 = v152 >> 1;
      v154 = v145 - v151;
      if (v154 <= (v152 >> 1) + 1)
        v155 = v153 + 1;
      else
        v155 = v154;
      if (v154 >= 0x7FFFFFFFFFFFFFFELL)
        v156 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v156 = v155;
      if (v156)
      {
        v157 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v22 + 72, v156);
        v151 = *(char **)(v22 + 56);
        v147 = *(char **)(v22 + 64);
      }
      else
      {
        v157 = 0;
      }
      v158 = &v157[2 * v153];
      v145 = &v157[2 * v156];
      *(_WORD *)v158 = *(_WORD *)(v144 - 4);
      v149 = v158 + 2;
      while (v147 != v151)
      {
        v159 = *((_WORD *)v147 - 1);
        v147 -= 2;
        *((_WORD *)v158 - 1) = v159;
        v158 -= 2;
      }
      *(_QWORD *)(v22 + 56) = v158;
      *(_QWORD *)(v22 + 64) = v149;
      *(_QWORD *)(v22 + 72) = v145;
      if (v151)
      {
        operator delete(v151);
        v145 = *(char **)(v22 + 72);
      }
      v150 = v173;
      v148 = v70;
    }
    else
    {
      v148 = v70;
      *(_WORD *)v147 = *(_WORD *)(v144 - 4);
      v149 = v147 + 2;
      v150 = v173;
    }
    *(_QWORD *)(v22 + 64) = v149;
    if (v149 < v145)
    {
      *(_WORD *)v149 = 0;
      v160 = v149 + 2;
      v161 = a3;
LABEL_212:
      *(_QWORD *)(v22 + 64) = v160;
      *(_WORD *)(*((_QWORD *)v148 + 8) - 2) = 0;
      --*((_BYTE *)v148 + 4);
      --*((_QWORD *)v148 + 5);
      *(_QWORD *)(v22 + 32) = v82 + v122 - 1;
      *(_QWORD *)(v22 + 40) = 1;
      SLPostLexerImpl::HandleLookup(v150, v148, 1, v161);
      v24 = v161;
      goto LABEL_42;
    }
    v162 = (char *)*v146;
    v163 = v149 - (_BYTE *)*v146;
    if (v163 > -3)
    {
      v164 = v163 >> 1;
      v165 = v145 - v162;
      if (v165 <= (v163 >> 1) + 1)
        v166 = v164 + 1;
      else
        v166 = v165;
      if (v165 >= 0x7FFFFFFFFFFFFFFELL)
        v167 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v167 = v166;
      if (v167)
      {
        v168 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v22 + 72, v167);
        v162 = *(char **)(v22 + 56);
        v149 = *(char **)(v22 + 64);
      }
      else
      {
        v168 = 0;
      }
      v161 = a3;
      v169 = &v168[2 * v164];
      v170 = &v168[2 * v167];
      *(_WORD *)v169 = 0;
      v160 = v169 + 2;
      while (v149 != v162)
      {
        v171 = *((_WORD *)v149 - 1);
        v149 -= 2;
        *((_WORD *)v169 - 1) = v171;
        v169 -= 2;
      }
      *(_QWORD *)(v22 + 56) = v169;
      *(_QWORD *)(v22 + 64) = v160;
      *(_QWORD *)(v22 + 72) = v170;
      if (v162)
        operator delete(v162);
      v150 = v173;
      v148 = v70;
      goto LABEL_212;
    }
LABEL_214:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
}

void sub_216FC1420(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A0649C](v1, 0x10F0C4034644DEDLL);
  _Unwind_Resume(a1);
}

uint64_t SLPostLexerImpl::SingleLetterWordAtEnd(SLPostLexerImpl *this)
{
  return 0;
}

uint64_t SLPostLexerImpl::SingleLetterWordAsPrefix(SLPostLexerImpl *this)
{
  return 0;
}

uint64_t SLPostLexerImpl::SingleLetterWordAsInfix(SLPostLexerImpl *this)
{
  return 0;
}

uint64_t SLPostLexerImpl::IsRomanOrdinal(SLPostLexerImpl *this, SLToken *a2)
{
  _QWORD *Unit;
  _BYTE *v5;
  __int16 v6;
  BOOL v7;
  uint64_t result;
  uint64_t v9;
  CFRange v10;
  unint64_t v11;
  uint64_t v12;

  SLDissecter::DissectRoman(*((_QWORD *)this + 23), (uint64_t)a2, &v9);
  Unit = (_QWORD *)SLPostLexerImpl::FindUnit(this, a2, v11, ((uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 1) - 1, 35);
  if (Unit)
  {
    v5 = (_BYTE *)*Unit;
    if (*(_BYTE *)*Unit == 64)
    {
      if (!v5[1])
        return 1;
      if (!v5[2])
      {
        v6 = (char)v5[1];
        if ((((unsigned __int16)SLDissecter::EvaluateRoman(*((SLDissecter **)this + 23), a2, v10) % 0xAu) | 0x30) == v6)
          return 1;
      }
    }
  }
  v7 = v10.length >= 2 && v12 == 1;
  if (v7 && memchr("abcd", *(unsigned __int16 *)(*((_QWORD *)a2 + 7) + 2 * v11), 5uLL))
  {
    *((_DWORD *)a2 + 4) |= 0x400u;
    return 1;
  }
  result = 0;
  *((_DWORD *)a2 + 4) &= 0xFFFEEFFF;
  return result;
}

uint64_t SLPostLexerImpl::PeekMatchingQuote(SLPostLexerImpl *this, uint64_t a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 28);
  if (v2 == *((_QWORD *)this + 27))
    return 0;
  else
    return (*(uint64_t (**)(SLPostLexerImpl *, _QWORD, uint64_t))(*(_QWORD *)this + 72))(this, *(unsigned __int16 *)(v2 - 2), a2);
}

uint64_t SLPostLexerImpl::HandleLookup(SLPostLexerImpl *this, SLToken *a2, int a3, SLTokenList *a4)
{
  SLPostLexerImpl *v7;
  int v8;
  std::string *p_str;
  std::string::size_type size;
  int v11;
  std::string *v12;
  std::string::size_type v13;
  char v14;
  std::string *v15;
  std::string::size_type v16;
  uint64_t v17;
  uint64_t v18;
  std::string *v19;
  std::string::size_type v20;
  std::string::size_type v21;
  SLPostLexerImpl *v22;
  int v23;
  uint64_t v24;
  _BOOL4 v26;
  int v27;
  unint64_t v28;
  char v29;
  char v30;
  std::string *v31;
  std::string::size_type v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD **v40;
  uint64_t v41;
  SLToken *v42;
  std::string *v43;
  std::string::size_type v44;
  SLToken *v45;
  SLToken *v46;
  SLToken *v47;
  std::string *v48;
  std::string::size_type v49;
  std::string v50;
  void *v51[2];
  char v52;
  std::string v53;
  void *__p[2];
  char v55;
  std::string __str;
  char v57;

  v7 = this;
  v8 = 0;
  memset(&__str, 0, sizeof(__str));
  if ((*((_BYTE *)a2 + 16) & 8) != 0)
  {
    SLPostLexerImpl::Transcribe(this, a2, 0, 0, ((uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 1) - 1, &v53);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    __str = v53;
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_str = &__str;
    else
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v53.__r_.__value_.__r.__words[2]);
    else
      size = __str.__r_.__value_.__l.__size_;
    this = (SLPostLexerImpl *)SLDictLookup::Lookup(*((SLDictLookup **)v7 + 21), *(SLDictionary **)(*((_QWORD *)v7 + 21) + 8), (const char *)p_str, size, a2, 1);
    if ((_DWORD)this)
    {
      v8 = 0;
LABEL_52:
      if (SLToken::HasTag(a2, 78))
      {
        if ((*((_BYTE *)v7 + 256) & 0x80) != 0)
          LODWORD(v53.__r_.__value_.__l.__data_) = 5111809;
        else
          LODWORD(v53.__r_.__value_.__l.__data_) = 5177345;
        SLToken::ExcludeHomographs(a2, (const SLWordTagSet *)&v53);
      }
      if (SLPostLexerImpl::FollowedByPeriod(v7, a2))
      {
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str.__r_.__value_.__l.__data_, 46, (uint64_t)__p);
        SLPostLexerImpl::HandleAbbreviation((uint64_t)v7, (const std::string::value_type *)__p, (uint64_t)a2);
        if (v55 < 0)
          operator delete(__p[0]);
      }
      SLTokenList::push_back(a4, a2);
      if ((*((_BYTE *)a2 + 18) & 4) != 0 && SLToken::HasTag(a2, 86))
      {
        v23 = *((unsigned __int8 *)a2 + 1);
        if ((v23 - 1) >= 2)
        {
          if (*((_BYTE *)a2 + 1))
            *((_BYTE *)a4 + 24) = v23;
          *((_BYTE *)a2 + 1) = 2;
        }
      }
      *((_DWORD *)a2 + 4) |= v8;
      goto LABEL_76;
    }
    *((_DWORD *)a2 + 4) &= ~8u;
    v8 = 8;
  }
  SLPostLexerImpl::Transcribe(this, a2, 2, 0, ((uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 1) - 1, &v53);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  __str = v53;
  v11 = *((_DWORD *)a2 + 4);
  if ((v11 & 0x20) != 0)
  {
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = &__str;
    else
      v15 = (std::string *)__str.__r_.__value_.__r.__words[0];
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    else
      v16 = __str.__r_.__value_.__l.__size_;
    v17 = SLDictLookup::Lookup(*((SLDictLookup **)v7 + 21), *(SLDictionary **)(*((_QWORD *)v7 + 21) + 8), (const char *)v15, v16, a2, 1);
    if ((v17 & 1) != 0)
      goto LABEL_52;
    v18 = (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 1;
    if (v18 == 2)
    {
      SLToken::SetType(a2, 11);
      SLTokenList::push_back(a4, a2);
LABEL_76:
      v24 = 1;
      goto LABEL_77;
    }
    SLPostLexerImpl::Transcribe((SLPostLexerImpl *)v17, a2, 1, 0, v18 - 1, &v53);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    __str = v53;
    if ((*((_DWORD *)a2 + 4) & 0x10) == 0)
      goto LABEL_45;
  }
  else if ((v11 & 0x10) == 0)
  {
    goto LABEL_45;
  }
  if ((unint64_t)(((uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 1) - 3) <= 2)
  {
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = &__str;
    else
      v12 = (std::string *)__str.__r_.__value_.__r.__words[0];
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    else
      v13 = __str.__r_.__value_.__l.__size_;
    if (SLDictLookup::Lookup(*((SLDictLookup **)v7 + 21), *(SLDictionary **)(*((_QWORD *)v7 + 21) + 24), (const char *)v12, v13, a2, 0))
    {
      if ((unint64_t)(((uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 1) - 5) < 0xFFFFFFFFFFFFFFFCLL
        || SLToken::HasTag(a2, 90)
        || SLToken::HasTag(a2, 70)
        || *((_BYTE *)v7 + 244)
        || (SLPostLexerImpl::FollowedByAllCaps(v7) & 1) != 0)
      {
        goto LABEL_52;
      }
      *((_DWORD *)a2 + 4) &= ~0x40u;
      SLToken::clear(a2);
    }
    if ((a3 & 1) != 0)
    {
      v14 = 0;
LABEL_58:
      *((_DWORD *)a2 + 4) |= v8;
      if (*((_BYTE *)a2 + 4)
        && (*(unsigned int (**)(_QWORD))(**((_QWORD **)v7 + 22) + 176))(*((_QWORD *)v7 + 22)))
      {
        v21 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v21 = __str.__r_.__value_.__l.__size_;
        std::string::basic_string(&v53, &__str, v21 - 2, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v57);
        if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
        {
          v22 = (SLPostLexerImpl *)v53.__r_.__value_.__r.__words[0];
          if (v53.__r_.__value_.__l.__size_ != 2)
          {
            operator delete(v53.__r_.__value_.__l.__data_);
            goto LABEL_90;
          }
        }
        else
        {
          if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) != 2)
            goto LABEL_90;
          v22 = (SLPostLexerImpl *)&v53;
        }
        v26 = *(_WORD *)v22 == 21287
           && ((uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 1) - 3 == *((unsigned __int8 *)a2 + 5);
        if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v53.__r_.__value_.__l.__data_);
          if (v26)
            goto LABEL_88;
        }
        else if (v26)
        {
LABEL_88:
          SLPostLexerImpl::StripPossessive(v22, a2, a4);
          goto LABEL_76;
        }
      }
LABEL_90:
      if ((*((_BYTE *)a2 + 16) & 8) != 0 || *((_BYTE *)a2 + 4))
      {
        (*(void (**)(_QWORD, SLToken *, SLTokenList *))(**((_QWORD **)v7 + 22) + 32))(*((_QWORD *)v7 + 22), a2, a4);
        SLToken::~SLToken(a2);
        MEMORY[0x219A0649C]();
        goto LABEL_76;
      }
      SLTokenList::SLTokenList((SLTokenList *)&v53);
      v27 = *((_DWORD *)a2 + 4);
      if ((v27 & 0x8000) != 0)
        v28 = 4;
      else
        v28 = 2;
      if (!SLPostLexerImpl::FollowedByPeriod(v7, a2))
        goto LABEL_107;
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str.__r_.__value_.__l.__data_, 46, (uint64_t)v51);
      v29 = SLPostLexerImpl::HandleAbbreviation((uint64_t)v7, (const std::string::value_type *)v51, (uint64_t)a2);
      if (v52 < 0)
        operator delete(v51[0]);
      if ((v29 & 1) == 0)
      {
LABEL_107:
        if ((*((_BYTE *)a2 + 17) & 0x80) != 0
          && (unint64_t)(((uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 1) - 5) <= 0xFFFFFFFFFFFFFFFBLL)
        {
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v50, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
          else
            v50 = __str;
          v30 = SLPostLexerImpl::HandleNameInitial((uint64_t)v7, (const char *)&v50, a2, a4);
          if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v50.__r_.__value_.__l.__data_);
          if ((v30 & 1) != 0)
            goto LABEL_132;
        }
        if ((v14 & 1) != 0)
        {
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v31 = &__str;
          else
            v31 = (std::string *)__str.__r_.__value_.__r.__words[0];
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v32 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          else
            v32 = __str.__r_.__value_.__l.__size_;
          v33 = SLAgglomerate::Lookup(*(SLDictionary ***)(*((_QWORD *)v7 + 21) + 32), (const char *)v31, v32, v28, (v27 & 0x8000) != 0, (SLTokenList *)&v53);
          v34 = *((_DWORD *)a2 + 4);
          if (v33)
          {
            v35 = *((_QWORD *)a2 + 4);
            *(_DWORD *)(*(_QWORD *)(v53.__r_.__value_.__r.__words[0] + 16) + 16) |= *((_DWORD *)a2 + 4) & 1;
            v36 = *((_DWORD *)a2 + 4) & 0x10;
            SLToken::~SLToken(a2);
            MEMORY[0x219A0649C]();
            v37 = 0;
            while (v53.__r_.__value_.__r.__words[2])
            {
              v38 = *(_QWORD *)(v53.__r_.__value_.__l.__size_ + 16);
              if (!v38)
                break;
              *(_DWORD *)(v38 + 16) |= v36;
              if ((v37 & 1) != 0
                || ((*(uint64_t (**)(SLPostLexerImpl *, uint64_t))(*(_QWORD *)v7 + 184))(v7, v38) & 1) == 0)
              {
                *(_BYTE *)(v38 + 2) = 2;
              }
              else
              {
                v37 = 1;
              }
              v39 = ((uint64_t)(*(_QWORD *)(v38 + 64) - *(_QWORD *)(v38 + 56)) >> 1) - 1;
              *(_QWORD *)(v38 + 32) = v35;
              *(_QWORD *)(v38 + 40) = v39;
              v40 = (_QWORD **)v53.__r_.__value_.__l.__size_;
              v41 = *(_QWORD *)v53.__r_.__value_.__l.__size_;
              *(_QWORD *)(v41 + 8) = *(_QWORD *)(v53.__r_.__value_.__l.__size_ + 8);
              *v40[1] = v41;
              --v53.__r_.__value_.__r.__words[2];
              operator delete(v40);
              v35 += v39;
              SLTokenList::push_back(a4, (SLToken *)v38);
            }
            goto LABEL_132;
          }
        }
        else
        {
          v34 = *((_DWORD *)a2 + 4);
        }
        if (*((_BYTE *)v7 + 241)
          && (v34 & 0x100) == 0
          && (unint64_t)(((uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 1) - 52) >= 0xFFFFFFFFFFFFFFCDLL)
        {
          SLToken::clear(a2);
          v42 = (SLToken *)operator new();
          SLToken::SLToken(v42, a2);
          *(_BYTE *)v42 = 11;
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v43 = &__str;
          else
            v43 = (std::string *)__str.__r_.__value_.__r.__words[0];
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v44 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          else
            v44 = __str.__r_.__value_.__l.__size_;
          SLDictLookup::Lookup(*((SLDictLookup **)v7 + 21), *(SLDictionary **)(*((_QWORD *)v7 + 21) + 16), (const char *)v43, v44, a2, 0);
          v45 = (SLToken *)operator new();
          SLToken::SLToken(v45, 35, 64);
          SLTokenList::push_back(a4, v45);
          SLTokenList::push_back(a4, a2);
          v46 = (SLToken *)operator new();
          SLToken::SLToken(v46, 34, 64);
          SLTokenList::push_back(a4, v46);
          SLTokenList::push_back(a4, v42);
          v47 = (SLToken *)operator new();
          SLToken::SLToken(v47, 36, 64);
          SLTokenList::push_back(a4, v47);
          goto LABEL_132;
        }
        if ((v34 & 0x110) != 0
          || (unint64_t)(((uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 1) - 52) <= 0xFFFFFFFFFFFFFFCCLL)
        {
          SLToken::SetType(a2, 11);
        }
        else
        {
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v48 = &__str;
          else
            v48 = (std::string *)__str.__r_.__value_.__r.__words[0];
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v49 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          else
            v49 = __str.__r_.__value_.__l.__size_;
          SLDictLookup::Lookup(*((SLDictLookup **)v7 + 21), *(SLDictionary **)(*((_QWORD *)v7 + 21) + 16), (const char *)v48, v49, a2, 0);
        }
      }
      SLTokenList::push_back(a4, a2);
LABEL_132:
      std::__list_imp<SLToken *>::clear(&v53);
      goto LABEL_76;
    }
    goto LABEL_80;
  }
LABEL_45:
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = &__str;
  else
    v19 = (std::string *)__str.__r_.__value_.__r.__words[0];
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v20 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  else
    v20 = __str.__r_.__value_.__l.__size_;
  if ((SLDictLookup::Lookup(*((SLDictLookup **)v7 + 21), *(SLDictionary **)(*((_QWORD *)v7 + 21) + 8), (const char *)v19, v20, a2, 1) & 1) != 0)goto LABEL_52;
  if (a3)
  {
    v14 = 1;
    goto LABEL_58;
  }
LABEL_80:
  v24 = 0;
  *((_DWORD *)a2 + 4) |= v8;
LABEL_77:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return v24;
}

void sub_216FC1E5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;
  uint64_t v32;

  MEMORY[0x219A0649C](v31, 0x10F0C4034644DEDLL);
  std::__list_imp<SLToken *>::clear(&a22);
  if (*(char *)(v32 - 73) < 0)
    operator delete(*(void **)(v32 - 96));
  _Unwind_Resume(a1);
}

void std::vector<unsigned short>::push_back[abi:ne180100](uint64_t a1, _WORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  _WORD *v6;
  _WORD *v7;
  _WORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  __int16 v17;

  v4 = a1 + 16;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_WORD **)(a1 + 8);
  if ((unint64_t)v6 >= v5)
  {
    v8 = *(_WORD **)a1;
    v9 = (uint64_t)v6 - *(_QWORD *)a1;
    if (v9 <= -3)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v10 = v9 >> 1;
    v11 = v5 - (_QWORD)v8;
    if (v11 <= (v9 >> 1) + 1)
      v12 = v10 + 1;
    else
      v12 = v11;
    if (v11 >= 0x7FFFFFFFFFFFFFFELL)
      v13 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v4, v13);
      v8 = *(_WORD **)a1;
      v6 = *(_WORD **)(a1 + 8);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[2 * v10];
    v16 = &v14[2 * v13];
    *(_WORD *)v15 = *a2;
    v7 = v15 + 2;
    while (v6 != v8)
    {
      v17 = *--v6;
      *((_WORD *)v15 - 1) = v17;
      v15 -= 2;
    }
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v16;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v6 = *a2;
    v7 = v6 + 1;
  }
  *(_QWORD *)(a1 + 8) = v7;
}

BOOL SLPostLexerImpl::FollowedByPeriod(SLPostLexerImpl *this, SLToken *a2)
{
  uint64_t (***v3)(_QWORD);
  uint64_t v4;

  v3 = SLLexerBuffer::operator[]((_QWORD *)this + 12, 0);
  v4 = 0;
  if ((*((_BYTE *)a2 + 16) & 1) == 0 && v3)
    return (uint64_t (**)(_QWORD))(*((_QWORD *)a2 + 5) + *((_QWORD *)a2 + 4)) == v3[4]
        && *(_BYTE *)v3 == 13
        && *(unsigned __int16 *)v3[7] == 46;
  return v4;
}

uint64_t SLPostLexerImpl::HandleAbbreviation(uint64_t a1, const std::string::value_type *a2, uint64_t a3)
{
  _QWORD *v6;
  _BYTE *v7;
  SLToken *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  const std::string::value_type *v21;
  const std::string::value_type *v22;
  char HasTag;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  std::string __p;

  v6 = (_QWORD *)(a1 + 96);
  v7 = SLLexerBuffer::operator[]((_QWORD *)(a1 + 96), 0);
  v8 = (SLToken *)SLLexerBuffer::operator[](v6, 1uLL);
  v9 = operator new();
  SLToken::SLToken((SLToken *)v9, 0, 0);
  if ((v7[16] & 1) != 0)
  {
    if ((*(_BYTE *)(a3 + 16) & 0x40) != 0 && !strstr(*(char **)(a3 + 24), "Morph"))
    {
      if (*(_BYTE *)(a3 + 5))
      {
        if (((uint64_t)(*(_QWORD *)(a3 + 64) - *(_QWORD *)(a3 + 56)) >> 1) - 1 == *(unsigned __int8 *)(a3 + 5)
          && SLToken::HasTag((SLToken *)a3, 70))
        {
          goto LABEL_28;
        }
      }
      else
      {
        v24 = *(_QWORD *)(a3 + 80);
        if (*(_QWORD *)(a3 + 88) != v24)
        {
          v25 = 0;
          while (SLWordTagSet::find((SLWordTagSet *)(*(_QWORD *)(v24 + 8 * v25) + 4), 68))
          {
            ++v25;
            v24 = *(_QWORD *)(a3 + 80);
            if (v25 >= (*(_QWORD *)(a3 + 88) - v24) >> 3)
              goto LABEL_11;
          }
          goto LABEL_28;
        }
      }
    }
LABEL_11:
    if (a2[23] < 0)
    {
      v15 = *(const char **)a2;
      v14 = *((_QWORD *)a2 + 1);
    }
    else
    {
      v14 = *((unsigned __int8 *)a2 + 23);
      v15 = a2;
    }
    v17 = 0;
    if (!SLDictLookup::Lookup(*(SLDictLookup **)(a1 + 168), *(SLDictionary **)(*(_QWORD *)(a1 + 168) + 24), v15, v14, (SLToken *)v9, 0))goto LABEL_66;
    if (*(_BYTE *)(a3 + 5) != 1 || !SLToken::HasTag((SLToken *)a3, 64) || !SLToken::HasTag((SLToken *)v9, 72))
    {
      if (a2[23] < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
      else
        __p = *(std::string *)a2;
      v19 = (*(uint64_t (**)(uint64_t, std::string *, uint64_t, uint64_t, SLToken *))(*(_QWORD *)a1 + 176))(a1, &__p, a3, v9, v8);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v17 = 0;
      if ((v19 & 1) != 0)
        goto LABEL_62;
      goto LABEL_61;
    }
LABEL_28:
    v17 = 0;
    goto LABEL_66;
  }
  v10 = *(unsigned __int8 *)v8;
  if ((v10 - 4) >= 2)
  {
    if (v10 == 13)
    {
      if (a2[23] < 0)
      {
        v21 = a2;
        a2 = *(const std::string::value_type **)a2;
        v16 = *((_QWORD *)v21 + 1);
      }
      else
      {
        v16 = *((unsigned __int8 *)a2 + 23);
      }
      v17 = 0;
      if ((SLDictLookup::Lookup(*(SLDictLookup **)(a1 + 168), *(SLDictionary **)(*(_QWORD *)(a1 + 168) + 24), a2, v16, (SLToken *)v9, 0) & 1) != 0)goto LABEL_61;
      if ((*(_BYTE *)(a3 + 16) & 0x40) == 0)
      {
        SLToken::SetType((SLToken *)a3, 11);
        v17 = 1;
        goto LABEL_61;
      }
      HasTag = SLToken::HasTag((SLToken *)a3, 68);
    }
    else
    {
      if (a2[23] < 0)
      {
        v22 = a2;
        a2 = *(const std::string::value_type **)a2;
        v18 = *((_QWORD *)v22 + 1);
      }
      else
      {
        v18 = *((unsigned __int8 *)a2 + 23);
      }
      HasTag = SLDictLookup::Lookup(*(SLDictLookup **)(a1 + 168), *(SLDictionary **)(*(_QWORD *)(a1 + 168) + 24), a2, v18, (SLToken *)v9, 0);
    }
    v17 = 0;
    if ((HasTag & 1) == 0)
      goto LABEL_62;
LABEL_61:
    *(int64x2_t *)(a1 + 152) = vaddq_s64(*(int64x2_t *)(a1 + 152), (int64x2_t)xmmword_21701CDA0);
    std::deque<SLToken *>::__maybe_remove_front_spare[abi:ne180100](a1 + 120, 1);
    *(_DWORD *)(a3 + 16) |= *((_DWORD *)v7 + 4) & 1;
    SLToken::~SLToken((SLToken *)v7);
    MEMORY[0x219A0649C]();
    goto LABEL_62;
  }
  if ((*((_DWORD *)v8 + 4) & 6) == 4)
    goto LABEL_28;
  if ((*((_DWORD *)v8 + 4) & 6) == 0)
  {
    v11 = *(_QWORD *)(a1 + 224);
    if (v11 != *(_QWORD *)(a1 + 216)
      && ((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 72))(a1, *(unsigned __int16 *)(v11 - 2), **((unsigned __int16 **)v8 + 7)) & 1) != 0)
    {
      goto LABEL_28;
    }
  }
  if (a2[23] < 0)
  {
    v13 = *(const char **)a2;
    v12 = *((_QWORD *)a2 + 1);
  }
  else
  {
    v12 = *((unsigned __int8 *)a2 + 23);
    v13 = a2;
  }
  v17 = 0;
  if (SLDictLookup::Lookup(*(SLDictLookup **)(a1 + 168), *(SLDictionary **)(*(_QWORD *)(a1 + 168) + 24), v13, v12, (SLToken *)v9, 0))
  {
    if (*(_BYTE *)v8 == 4
      && SLChar::sCharClass[**((_WORD **)v8 + 7) & 0x3F | (SLChar::sUniMap[(unint64_t)**((unsigned __int16 **)v8
                                                                                              + 7) >> 6] << 6)] == 4
      && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 176) + 176))(*(_QWORD *)(a1 + 176)))
    {
      if (a2[23] < 0)
        v20 = *((_QWORD *)a2 + 1);
      else
        v20 = *((unsigned __int8 *)a2 + 23);
      v26 = v20 - 2;
      if (a2[23] < 0)
        a2 = *(const std::string::value_type **)a2;
      if (a2[v26] == 83)
      {
        *(int64x2_t *)(a1 + 152) = vaddq_s64(*(int64x2_t *)(a1 + 152), (int64x2_t)xmmword_21701CDA0);
        std::deque<SLToken *>::__maybe_remove_front_spare[abi:ne180100](a1 + 120, 1);
        *(_DWORD *)(a3 + 16) |= *((_DWORD *)v8 + 4) & 1;
        ++*(_QWORD *)(a3 + 40);
        SLToken::~SLToken(v8);
        MEMORY[0x219A0649C]();
      }
    }
    v17 = 0;
    goto LABEL_61;
  }
LABEL_62:
  if ((*(_BYTE *)(v9 + 16) & 0x40) != 0)
  {
    v27 = *(_OWORD *)(a3 + 56);
    *(_OWORD *)(a3 + 56) = *(_OWORD *)(v9 + 56);
    *(_OWORD *)(v9 + 56) = v27;
    v28 = *(_OWORD *)(a3 + 72);
    *(_OWORD *)(a3 + 72) = *(_OWORD *)(v9 + 72);
    *(_OWORD *)(v9 + 72) = v28;
    v29 = *(_OWORD *)(a3 + 88);
    *(_OWORD *)(a3 + 88) = *(_OWORD *)(v9 + 88);
    *(_OWORD *)(v9 + 88) = v29;
    v30 = *(_QWORD *)(a3 + 40);
    if (v30)
      *(_QWORD *)(a3 + 40) = v30 + 1;
    *(_DWORD *)(a3 + 16) |= 0x40u;
    v17 = 1;
  }
LABEL_66:
  SLToken::~SLToken((SLToken *)v9);
  MEMORY[0x219A0649C]();
  return v17;
}

void sub_216FC2540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(const void **a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  size_t v5;
  uint64_t result;
  char *v7;
  const void *v8;
  char *v9;

  if (*((char *)a1 + 23) >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  result = std::string::basic_string[abi:ne180100](a3, v5 + 1);
  if (*(char *)(result + 23) >= 0)
    v7 = (char *)result;
  else
    v7 = *(char **)result;
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0)
      v8 = a1;
    else
      v8 = *a1;
    result = (uint64_t)memmove(v7, v8, v5);
  }
  v9 = &v7[v5];
  *v9 = a2;
  v9[1] = 0;
  return result;
}

uint64_t SLPostLexerImpl::FollowedByAllCaps(SLPostLexerImpl *this)
{
  unint64_t v2;
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;
  SLPostLexerImpl *v6;
  unint64_t v7;
  BOOL HasTag;
  std::string __p;
  _BYTE v10[8];
  SLToken *v11;

  v2 = 0;
  v3 = (_QWORD *)((char *)this + 96);
  while (1)
  {
    result = (uint64_t)SLLexerBuffer::operator[](v3, v2);
    if (!result)
      break;
    v5 = result;
    if (!*(_BYTE *)result)
    {
      SLPostLexerImpl::Classify((SLPostLexerImpl *)result, (SLToken *)result);
      v7 = *(unsigned __int8 *)(v5 + 5);
      if (((uint64_t)(*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56)) >> 1) - 1 != v7)
        return 0;
      SLPostLexerImpl::Transcribe(v6, (SLToken *)v5, 2, 0, v7, &__p);
      SLTmpLookup::SLTmpLookup(v10, &__p, *((_QWORD *)this + 21));
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (!v10[0])
      {
        SLTmpLookup::~SLTmpLookup((SLTmpLookup *)v10);
        return 1;
      }
      HasTag = SLToken::HasTag(v11, 70);
      SLTmpLookup::~SLTmpLookup((SLTmpLookup *)v10);
      if (!HasTag)
        return 1;
    }
    if (++v2 == 7)
      return 0;
  }
  return result;
}

void sub_216FC26F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  SLTmpLookup::~SLTmpLookup((SLTmpLookup *)&a16);
  _Unwind_Resume(a1);
}

BOOL std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1)
        goto LABEL_10;
      a1 = (_QWORD *)*a1;
      return memcmp(a1, __s, v4) == 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1)
LABEL_10:
      std::string::__throw_out_of_range[abi:ne180100]();
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

_QWORD *SLPostLexerImpl::StripPossessive(SLPostLexerImpl *this, SLToken *a2, SLTokenList *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  char **v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  __int16 v37;
  _WORD *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  __int16 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  SLTokenList *v55;

  v6 = *((_QWORD *)a2 + 7);
  v5 = *((_QWORD *)a2 + 8);
  v7 = (_QWORD *)operator new();
  SLToken::SLToken((SLToken *)v7, 0, *((_DWORD *)a2 + 4) & 1);
  v8 = v5 - v6;
  v10 = (char **)(v7 + 9);
  v9 = (char *)v7[9];
  v11 = v8 >> 1;
  v12 = (void **)(v7 + 7);
  v13 = (v8 >> 1) - 3;
  v14 = *((_QWORD *)a2 + 7);
  v15 = (char *)v7[8];
  v55 = a3;
  if (v15 >= v9)
  {
    v17 = (char *)*v12;
    v18 = v15 - (_BYTE *)*v12;
    if (v18 <= -3)
      goto LABEL_64;
    v19 = v18 >> 1;
    v20 = v9 - v17;
    if (v20 <= (v18 >> 1) + 1)
      v21 = v19 + 1;
    else
      v21 = v20;
    if (v20 >= 0x7FFFFFFFFFFFFFFELL)
      v22 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v22 = v21;
    if (v22)
    {
      v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)(v7 + 9), v22);
      v17 = (char *)v7[7];
      v15 = (char *)v7[8];
    }
    else
    {
      v23 = 0;
    }
    v24 = &v23[2 * v19];
    v9 = &v23[2 * v22];
    *(_WORD *)v24 = *(_WORD *)(v14 + 2 * v13);
    v16 = v24 + 2;
    while (v15 != v17)
    {
      v25 = *((_WORD *)v15 - 1);
      v15 -= 2;
      *((_WORD *)v24 - 1) = v25;
      v24 -= 2;
    }
    v7[7] = v24;
    v7[8] = v16;
    v7[9] = v9;
    if (v17)
    {
      operator delete(v17);
      v9 = *v10;
    }
  }
  else
  {
    *(_WORD *)v15 = *(_WORD *)(v14 + 2 * v13);
    v16 = v15 + 2;
  }
  v7[8] = v16;
  v26 = v11 - 2;
  v27 = *((_QWORD *)a2 + 7);
  if (v16 >= v9)
  {
    v29 = (char *)*v12;
    v30 = v16 - (_BYTE *)*v12;
    if (v30 <= -3)
      goto LABEL_64;
    v31 = v30 >> 1;
    v32 = v9 - v29;
    if (v32 <= (v30 >> 1) + 1)
      v33 = v31 + 1;
    else
      v33 = v32;
    if (v32 >= 0x7FFFFFFFFFFFFFFELL)
      v34 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v34 = v33;
    if (v34)
    {
      v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)(v7 + 9), v34);
      v29 = (char *)v7[7];
      v16 = (char *)v7[8];
    }
    else
    {
      v35 = 0;
    }
    v36 = &v35[2 * v31];
    v9 = &v35[2 * v34];
    *(_WORD *)v36 = *(_WORD *)(v27 + 2 * v26);
    v28 = v36 + 2;
    while (v16 != v29)
    {
      v37 = *((_WORD *)v16 - 1);
      v16 -= 2;
      *((_WORD *)v36 - 1) = v37;
      v36 -= 2;
    }
    v7[7] = v36;
    v7[8] = v28;
    v7[9] = v9;
    if (v29)
    {
      operator delete(v29);
      v9 = *v10;
    }
  }
  else
  {
    *(_WORD *)v16 = *(_WORD *)(v27 + 2 * v26);
    v28 = v16 + 2;
  }
  v7[8] = v28;
  if (v28 < v9)
  {
    *(_WORD *)v28 = 0;
    v38 = v28 + 2;
    goto LABEL_52;
  }
  v39 = (char *)*v12;
  v40 = v28 - (_BYTE *)*v12;
  if (v40 <= -3)
LABEL_64:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v41 = v40 >> 1;
  v42 = v9 - v39;
  if (v42 <= (v40 >> 1) + 1)
    v43 = v41 + 1;
  else
    v43 = v42;
  if (v42 >= 0x7FFFFFFFFFFFFFFELL)
    v44 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v44 = v43;
  if (v44)
  {
    v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)(v7 + 9), v44);
    v39 = (char *)v7[7];
    v28 = (char *)v7[8];
  }
  else
  {
    v45 = 0;
  }
  v46 = &v45[2 * v41];
  v47 = &v45[2 * v44];
  *(_WORD *)v46 = 0;
  v38 = v46 + 2;
  while (v28 != v39)
  {
    v48 = *((_WORD *)v28 - 1);
    v28 -= 2;
    *((_WORD *)v46 - 1) = v48;
    v46 -= 2;
  }
  v7[7] = v46;
  v7[8] = v38;
  v7[9] = v47;
  if (v39)
    operator delete(v39);
LABEL_52:
  v7[8] = v38;
  v49 = *((_QWORD *)a2 + 8);
  v50 = *((_QWORD *)a2 + 7) + 2 * (v11 - 1) - 4;
  if (v50 != v49 - 2)
  {
    if (v49 != v49 - 2)
      memmove((void *)(*((_QWORD *)a2 + 7) + 2 * (v11 - 1) - 4), (const void *)(v49 - 2), 2uLL);
    v49 = v50 + 2;
    *((_QWORD *)a2 + 8) = v50 + 2;
  }
  --*((_BYTE *)a2 + 4);
  v51 = *((_QWORD *)a2 + 5);
  if (v51)
  {
    v7[4] = v13 + *((_QWORD *)a2 + 4);
    v7[5] = 2;
    *((_QWORD *)a2 + 5) = v51 - 2;
  }
  v52 = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v52 & 0xFFFFFFFE;
  if (((v49 - *((_QWORD *)a2 + 7)) >> 1) - 1 <= (unint64_t)*((unsigned __int8 *)a2 + 5))
  {
    v53 = v52 & 0xFFFFFFE6 | 0x10;
    goto LABEL_62;
  }
  if ((v52 & 8) != 0)
  {
    *((_BYTE *)a2 + 3) = 0;
    v53 = v52 & 0xFFFFFFF6;
LABEL_62:
    *((_DWORD *)a2 + 4) = v53;
  }
  SLTokenList::push_back(v55, a2);
  return SLTokenList::push_back(v55, (SLToken *)v7);
}

void sub_216FC2B14(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A0649C](v1, 0x10F0C4034644DEDLL);
  _Unwind_Resume(a1);
}

uint64_t SLPostLexerImpl::HandleNameInitial(uint64_t a1, const char *a2, SLToken *a3, SLTokenList *a4)
{
  SLToken *v8;
  uint64_t v9;
  const char *v10;
  SLToken *v11;
  uint64_t v12;
  SLToken *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  CFRange v19;
  CFRange v20;

  v8 = (SLToken *)operator new();
  SLToken::SLToken(v8, 0, 0);
  if (a2[23] < 0)
  {
    v10 = *(const char **)a2;
    v9 = *((_QWORD *)a2 + 1);
  }
  else
  {
    v9 = *((unsigned __int8 *)a2 + 23);
    v10 = a2;
  }
  if (SLDictLookup::Lookup(*(SLDictLookup **)(a1 + 168), *(SLDictionary **)(*(_QWORD *)(a1 + 168) + 8), v10 + 1, v9 - 1, v8, 1)&& SLToken::HasTag(v8, 64))
  {
    v11 = (SLToken *)operator new();
    SLToken::SLToken(v11, 11, 0);
    v19.location = 0;
    v19.length = 1;
    SLToken::SetTokenRange(v11, a3, v19);
    v12 = *((_QWORD *)a3 + 4) + 1;
    v13 = v8;
  }
  else
  {
    if (a2[23] < 0)
    {
      v15 = a2;
      a2 = *(const char **)a2;
      v14 = *((_QWORD *)v15 + 1);
    }
    else
    {
      v14 = *((unsigned __int8 *)a2 + 23);
    }
    if (!SLDictLookup::Lookup(*(SLDictLookup **)(a1 + 168), *(SLDictionary **)(*(_QWORD *)(a1 + 168) + 8), a2, v14 - 1, v8, 1)|| !SLToken::HasTag(v8, 64))
    {
      v17 = 0;
      a3 = v8;
      goto LABEL_15;
    }
    v13 = (SLToken *)operator new();
    SLToken::SLToken(v13, 11, 0);
    v20.location = ((uint64_t)(*((_QWORD *)a3 + 8) - *((_QWORD *)a3 + 7)) >> 1) - 2;
    v20.length = 1;
    SLToken::SetTokenRange(v13, a3, v20);
    v12 = *((_QWORD *)a3 + 4);
    v11 = v8;
  }
  v16 = *((_QWORD *)a3 + 5) - 1;
  *((_QWORD *)v8 + 4) = v12;
  *((_QWORD *)v8 + 5) = v16;
  SLTokenList::push_back(a4, v11);
  SLTokenList::push_back(a4, v13);
  v17 = 1;
LABEL_15:
  SLToken::~SLToken(a3);
  MEMORY[0x219A0649C]();
  return v17;
}

void sub_216FC2D14(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A0649C](v1, 0x10F0C4034644DEDLL);
  _Unwind_Resume(a1);
}

void SLToken::SLToken(SLToken *this, const SLToken *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v4 = *(_OWORD *)a2;
  v5 = *((_OWORD *)a2 + 1);
  v6 = *((_OWORD *)a2 + 2);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_OWORD *)this + 1) = v5;
  *((_OWORD *)this + 2) = v6;
  *(_OWORD *)this = v4;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>((_QWORD *)this + 7, *((const void **)a2 + 7), *((_QWORD *)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 1);
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  std::vector<SLHomograph *>::__init_with_size[abi:ne180100]<SLHomograph **,SLHomograph **>((_QWORD *)this + 10, *((const void **)a2 + 10), *((_QWORD *)a2 + 11), (uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 3);
}

void sub_216FC2DD4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 64) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

BOOL SLPostLexerImpl::EmphasizeAgglomeratedWord(SLPostLexerImpl *this, SLToken *a2)
{
  return !SLToken::HasTag(a2, 68);
}

uint64_t SLPostLexerImpl::IsCompassDirection(SLPostLexerImpl *this, SLToken *a2)
{
  return 0;
}

uint64_t SLPostLexerImpl::IsHouseNumber(SLPostLexerImpl *this, SLToken *a2)
{
  return 0;
}

void SLPostLexerImpl::Transcribe(SLPostLexerImpl *a1@<X0>, SLToken *a2@<X1>, int a3@<W2>, unint64_t a4@<X3>, unint64_t a5@<X4>, std::string *a6@<X8>)
{
  unint64_t v11;
  uint64_t v12;
  unsigned __int16 v13;
  std::string::value_type v14;

  SLPostLexerImpl::Classify(a1, a2);
  a6->__r_.__value_.__r.__words[0] = 0;
  a6->__r_.__value_.__l.__size_ = 0;
  a6->__r_.__value_.__r.__words[2] = 0;
  if (a4 < a5)
  {
    do
    {
      v11 = *(unsigned __int16 *)(*((_QWORD *)a2 + 7) + 2 * a4);
      v12 = v11 & 0x3F | (SLChar::sUniMap[v11 >> 6] << 6);
      if (SLChar::sCharClass[v12] == 4)
      {
        std::string::push_back(a6, 39);
      }
      else if ((_DWORD)v11 != 173)
      {
        if (a3 == 2)
        {
          v13 = SLChar::sToUpper[v12] + v11;
          switch(v13)
          {
            case 0xFB00u:
LABEL_21:
              v13 = 70;
              std::string::push_back(a6, 70);
              goto LABEL_10;
            case 0xFB01u:
              goto LABEL_23;
            case 0xFB02u:
              goto LABEL_25;
            case 0xFB03u:
LABEL_22:
              std::string::push_back(a6, 70);
LABEL_23:
              std::string::push_back(a6, 70);
              v13 = 73;
              goto LABEL_10;
            case 0xFB04u:
LABEL_24:
              std::string::push_back(a6, 70);
LABEL_25:
              std::string::push_back(a6, 70);
              v13 = 76;
              break;
            case 0xFB05u:
            case 0xFB06u:
LABEL_16:
              std::string::push_back(a6, 83);
              v13 = 84;
              break;
            default:
              goto LABEL_10;
          }
          goto LABEL_10;
        }
        if (a3 != 1)
        {
          if (a3)
            v13 = 0;
          else
            v13 = *(_WORD *)(*((_QWORD *)a2 + 7) + 2 * a4);
          goto LABEL_10;
        }
        v13 = SLChar::sFoldAll[v12] + v11;
        if (v13 > 0x1E9Du)
        {
          switch(v13)
          {
            case 0xFB00u:
              goto LABEL_21;
            case 0xFB01u:
              goto LABEL_23;
            case 0xFB02u:
              goto LABEL_25;
            case 0xFB03u:
              goto LABEL_22;
            case 0xFB04u:
              goto LABEL_24;
            case 0xFB05u:
            case 0xFB06u:
              goto LABEL_16;
            default:
              if (v13 == 7838)
              {
                v13 = 83;
                std::string::push_back(a6, 83);
              }
              break;
          }
          goto LABEL_10;
        }
        switch(v13)
        {
          case 0xC6u:
            v14 = 65;
LABEL_29:
            std::string::push_back(a6, v14);
            v13 = 69;
            break;
          case 0x132u:
            std::string::push_back(a6, 73);
            v13 = 74;
            break;
          case 0x152u:
            v14 = 79;
            goto LABEL_29;
        }
LABEL_10:
        SLChar::PushUTF8(a6, v13);
      }
      ++a4;
    }
    while (a5 != a4);
  }
}

void sub_216FC304C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t SLPostLexerImpl::HasApostrophe(SLPostLexerImpl *this, SLToken *a2)
{
  uint64_t (***v4)(_QWORD);
  uint64_t result;
  uint64_t v6;

  v4 = SLLexerBuffer::operator[]((_QWORD *)this + 12, 0);
  result = 0;
  if ((*((_BYTE *)a2 + 16) & 1) == 0 && v4)
  {
    if (*(_BYTE *)v4 == 4
      && SLChar::sCharClass[*(_WORD *)v4[7] & 0x3F | (SLChar::sUniMap[(unint64_t)*(unsigned __int16 *)v4[7] >> 6] << 6)] == 4)
    {
      v6 = *((_QWORD *)this + 28);
      if (v6 == *((_QWORD *)this + 27))
        return 1;
      else
        return (*(unsigned int (**)(SLPostLexerImpl *, _QWORD))(*(_QWORD *)this + 72))(this, *(unsigned __int16 *)(v6 - 2)) ^ 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t SLPostLexerImpl::HandleTokenInDictionary(SLPostLexerImpl *this, SLToken *a2)
{
  _BOOL8 HasPossessive;
  _BOOL4 v5;
  unsigned __int16 *v6;
  SLToken *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[4];
  SLToken *v14;

  SLTokenList::SLTokenList((SLTokenList *)v13);
  HasPossessive = SLPostLexerImpl::HasPossessive(this, a2);
  v5 = HasPossessive;
  SLPostLexerImpl::Classify((SLPostLexerImpl *)HasPossessive, a2);
  if (*((_BYTE *)a2 + 5) == 2)
  {
    v6 = (unsigned __int16 *)*((_QWORD *)a2 + 7);
    if (v6[2] == 45
      && ((SLChar::sCharClass[*v6 & 0x3F | (SLChar::sUniMap[(unint64_t)*v6 >> 6] << 6)] & 0x3F) == 0x21
       || (SLChar::sCharClass[v6[1] & 0x3F | (SLChar::sUniMap[(unint64_t)v6[1] >> 6] << 6)] & 0x3F) == 0x21))
    {
      goto LABEL_15;
    }
  }
  if (!SLPostLexerImpl::HasApostrophe(this, a2))
  {
LABEL_10:
    if (SLPostLexerImpl::HandleLookup(this, a2, 0, (SLTokenList *)v13))
    {
      if (v5)
        SLPostLexerImpl::HandlePossessive(this, *(SLToken **)(v13[0] + 16));
      SLPostLexerImpl::push_front(this, (const SLTokenList *)v13);
      goto LABEL_14;
    }
LABEL_15:
    v11 = 0;
    goto LABEL_16;
  }
  v7 = (SLToken *)SLLexerBuffer::operator[]((_QWORD *)this + 12, 0);
  *(int64x2_t *)((char *)this + 152) = vaddq_s64(*(int64x2_t *)((char *)this + 152), (int64x2_t)xmmword_21701CDA0);
  std::deque<SLToken *>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)this + 120, 1);
  v8 = (char *)(*((_QWORD *)a2 + 8) - 2);
  LOWORD(v14) = 39;
  std::vector<unsigned short>::insert((uint64_t)a2 + 56, v8, &v14);
  ++*((_QWORD *)a2 + 5);
  if (!SLPostLexerImpl::HandleLookup(this, a2, 0, (SLTokenList *)v13))
  {
    --*((_QWORD *)a2 + 5);
    v9 = *((_QWORD *)a2 + 8);
    v10 = v9 - 4;
    memmove((void *)(v9 - 4), (const void *)(v9 - 2), 2uLL);
    *((_QWORD *)a2 + 8) = v10 + 2;
    v14 = v7;
    std::deque<SLToken *>::push_front((uint64_t)this + 120, &v14);
    goto LABEL_10;
  }
  SLPostLexerImpl::push_front(this, (const SLTokenList *)v13);
  if (v7)
  {
    SLToken::~SLToken(v7);
    MEMORY[0x219A0649C]();
  }
LABEL_14:
  v11 = 1;
LABEL_16:
  std::__list_imp<SLToken *>::clear(v13);
  return v11;
}

void sub_216FC333C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__list_imp<SLToken *>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL SLPostLexerImpl::HandleURLInSymbols(SLPostLexerImpl *this, SLToken *a2, SLTokenList *a3)
{
  std::string *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;
  void **v10;
  char *v11;
  void **v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  __int16 v23;
  _WORD *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  __int16 v34;
  void **v35;
  char *v36;
  void **v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  __int16 v48;
  _WORD *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  __int16 v59;
  std::string v61;
  void *__p[2];
  int64_t v63;

  SLPostLexerImpl::Transcribe(this, a2, 2, 0, ((uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 1) - 1, &v61);
  v6 = std::string::insert(&v61, 0, "//");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v63 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
  if (v63 >= 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  v9 = (*(uint64_t (**)(_QWORD, void **))(**((_QWORD **)this + 22) + 208))(*((_QWORD *)this + 22), v8);
  if (v9)
  {
    v10 = (void **)operator new();
    SLToken::SLToken((SLToken *)v10, 15, 2);
    v11 = (char *)v10[9];
    v12 = v10 + 7;
    v13 = (char *)v10[8];
    if (v13 >= v11)
    {
      v15 = (char *)*v12;
      v16 = v13 - (_BYTE *)*v12;
      if (v16 <= -3)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v17 = v16 >> 1;
      v18 = v11 - v15;
      if (v18 <= (v16 >> 1) + 1)
        v19 = v17 + 1;
      else
        v19 = v18;
      if (v18 >= 0x7FFFFFFFFFFFFFFELL)
        v20 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v20 = v19;
      if (v20)
      {
        v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)(v10 + 9), v20);
        v15 = (char *)v10[7];
        v13 = (char *)v10[8];
      }
      else
      {
        v21 = 0;
      }
      v22 = &v21[2 * v17];
      v11 = &v21[2 * v20];
      *(_WORD *)v22 = 60;
      v14 = v22 + 2;
      while (v13 != v15)
      {
        v23 = *((_WORD *)v13 - 1);
        v13 -= 2;
        *((_WORD *)v22 - 1) = v23;
        v22 -= 2;
      }
      v10[7] = v22;
      v10[8] = v14;
      v10[9] = v11;
      if (v15)
      {
        operator delete(v15);
        v11 = (char *)v10[9];
      }
    }
    else
    {
      *(_WORD *)v13 = 60;
      v14 = v13 + 2;
    }
    v10[8] = v14;
    if (v14 >= v11)
    {
      v25 = (char *)*v12;
      v26 = v14 - (_BYTE *)*v12;
      if (v26 <= -3)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v27 = v26 >> 1;
      v28 = v11 - v25;
      if (v28 <= (v26 >> 1) + 1)
        v29 = v27 + 1;
      else
        v29 = v28;
      if (v28 >= 0x7FFFFFFFFFFFFFFELL)
        v30 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v30 = v29;
      if (v30)
      {
        v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)(v10 + 9), v30);
        v25 = (char *)v10[7];
        v14 = (char *)v10[8];
      }
      else
      {
        v31 = 0;
      }
      v32 = &v31[2 * v27];
      v33 = &v31[2 * v30];
      *(_WORD *)v32 = 0;
      v24 = v32 + 2;
      while (v14 != v25)
      {
        v34 = *((_WORD *)v14 - 1);
        v14 -= 2;
        *((_WORD *)v32 - 1) = v34;
        v32 -= 2;
      }
      v10[7] = v32;
      v10[8] = v24;
      v10[9] = v33;
      if (v25)
        operator delete(v25);
    }
    else
    {
      *(_WORD *)v14 = 0;
      v24 = v14 + 2;
    }
    v10[8] = v24;
    SLTokenList::push_back(a3, (SLToken *)v10);
    (*(void (**)(_QWORD, uint64_t, SLTokenList *, _QWORD, _QWORD))(**((_QWORD **)this + 22) + 232))(*((_QWORD *)this + 22), v9, a3, *((_QWORD *)a2 + 4), *((_QWORD *)a2 + 5));
    SLToken::~SLToken(a2);
    MEMORY[0x219A0649C]();
    v35 = (void **)operator new();
    SLToken::SLToken((SLToken *)v35, 15, 4);
    v36 = (char *)v35[9];
    v37 = v35 + 7;
    v38 = (char *)v35[8];
    if (v38 >= v36)
    {
      v40 = (char *)*v37;
      v41 = v38 - (_BYTE *)*v37;
      if (v41 <= -3)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v42 = v41 >> 1;
      v43 = v36 - v40;
      if (v43 <= (v41 >> 1) + 1)
        v44 = v42 + 1;
      else
        v44 = v43;
      if (v43 >= 0x7FFFFFFFFFFFFFFELL)
        v45 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v45 = v44;
      if (v45)
      {
        v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)(v35 + 9), v45);
        v40 = (char *)v35[7];
        v38 = (char *)v35[8];
      }
      else
      {
        v46 = 0;
      }
      v47 = &v46[2 * v42];
      v36 = &v46[2 * v45];
      *(_WORD *)v47 = 62;
      v39 = v47 + 2;
      while (v38 != v40)
      {
        v48 = *((_WORD *)v38 - 1);
        v38 -= 2;
        *((_WORD *)v47 - 1) = v48;
        v47 -= 2;
      }
      v35[7] = v47;
      v35[8] = v39;
      v35[9] = v36;
      if (v40)
      {
        operator delete(v40);
        v36 = (char *)v35[9];
      }
    }
    else
    {
      *(_WORD *)v38 = 62;
      v39 = v38 + 2;
    }
    v35[8] = v39;
    if (v39 >= v36)
    {
      v50 = (char *)*v37;
      v51 = v39 - (_BYTE *)*v37;
      if (v51 <= -3)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v52 = v51 >> 1;
      v53 = v36 - v50;
      if (v53 <= (v51 >> 1) + 1)
        v54 = v52 + 1;
      else
        v54 = v53;
      if (v53 >= 0x7FFFFFFFFFFFFFFELL)
        v55 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v55 = v54;
      if (v55)
      {
        v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)(v35 + 9), v55);
        v50 = (char *)v35[7];
        v39 = (char *)v35[8];
      }
      else
      {
        v56 = 0;
      }
      v57 = &v56[2 * v52];
      v58 = &v56[2 * v55];
      *(_WORD *)v57 = 0;
      v49 = v57 + 2;
      while (v39 != v50)
      {
        v59 = *((_WORD *)v39 - 1);
        v39 -= 2;
        *((_WORD *)v57 - 1) = v59;
        v57 -= 2;
      }
      v35[7] = v57;
      v35[8] = v49;
      v35[9] = v58;
      if (v50)
        operator delete(v50);
    }
    else
    {
      *(_WORD *)v39 = 0;
      v49 = v39 + 2;
    }
    v35[8] = v49;
    SLTokenList::push_back(a3, (SLToken *)v35);
  }
  if (SHIBYTE(v63) < 0)
    operator delete(__p[0]);
  return v9 != 0;
}

void sub_216FC37B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SLPostLexerImpl::FindUnit(SLPostLexerImpl *this, SLToken *a2, unint64_t a3, unint64_t a4, int a5)
{
  std::string::const_iterator v10;
  std::string *p_p;
  uint64_t v12;
  std::string::const_iterator v13;
  std::string::size_type v14;
  char v15;
  std::string *v16;
  std::string v18;
  std::string __p;
  _QWORD v20[3];

  v20[2] = *MEMORY[0x24BDAC8D0];
  SLPostLexerImpl::Transcribe(this, a2, 0, a3, a4, &v18);
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v18;
  else
    v10.__i_ = (std::__wrap_iter<const char *>::iterator_type)v18.__r_.__value_.__r.__words[0];
  std::string::insert(&v18, v10, a5);
  __p = v18;
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)v18.__r_.__value_.__r.__words[0];
  v12 = (*(uint64_t (**)(_QWORD, std::string *))(**((_QWORD **)this + 22) + 208))(*((_QWORD *)this + 22), p_p);
  if (!v12)
  {
    if (a5 == 43 || a4 - a3 > 1 || *(unsigned __int16 *)(*((_QWORD *)a2 + 7) + 2 * a3) >= 0x100u)
    {
      SLPostLexerImpl::Transcribe(0, a2, 2, a3, a4, &v18);
      if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v18;
      else
        v13.__i_ = (std::__wrap_iter<const char *>::iterator_type)v18.__r_.__value_.__r.__words[0];
      std::string::insert(&v18, v13, a5);
      v20[0] = v18.__r_.__value_.__l.__size_;
      v14 = v18.__r_.__value_.__r.__words[0];
      *(_QWORD *)((char *)v20 + 7) = *(std::string::size_type *)((char *)&v18.__r_.__value_.__r.__words[1] + 7);
      v15 = HIBYTE(v18.__r_.__value_.__r.__words[2]);
      memset(&v18, 0, sizeof(v18));
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        __p.__r_.__value_.__r.__words[0] = v14;
        __p.__r_.__value_.__l.__size_ = v20[0];
        *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v20 + 7);
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = v15;
        if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v18.__r_.__value_.__l.__data_);
          v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          v14 = __p.__r_.__value_.__r.__words[0];
        }
      }
      else
      {
        __p.__r_.__value_.__r.__words[0] = v14;
        __p.__r_.__value_.__l.__size_ = v20[0];
        *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v20 + 7);
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = v15;
      }
      if (v15 >= 0)
        v16 = &__p;
      else
        v16 = (std::string *)v14;
      v12 = (*(uint64_t (**)(_QWORD, std::string *))(**((_QWORD **)this + 22) + 208))(*((_QWORD *)this + 22), v16);
    }
    else
    {
      v12 = 0;
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v12;
}

void sub_216FC3A10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t SLPostLexerImpl::FindCommonCountable(SLPostLexerImpl *this, SLToken *a2, unint64_t a3)
{
  uint64_t v4;
  _BYTE v6[8];
  SLToken *v7;
  std::string __p;

  SLPostLexerImpl::Transcribe(this, a2, 2, a3, ((uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 1) - 1, &__p);
  SLTmpLookup::SLTmpLookup(v6, &__p, *((_QWORD *)this + 21));
  if (v6[0] && SLToken::HasTag(v7, 86))
    v4 = SLPostLexerImpl::GenerateSymbol((uint64_t)this, &__p, 0x7FFFFFFF, 86, 0);
  else
    v4 = 0;
  SLTmpLookup::~SLTmpLookup((SLTmpLookup *)v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v4;
}

void sub_216FC3B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  SLTmpLookup::~SLTmpLookup((SLTmpLookup *)&a10);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t SLPostLexerImpl::IsCopyright(SLPostLexerImpl *this, SLToken *a2, SLTokenList *a3)
{
  _QWORD *v6;
  SLToken *v7;
  SLToken *v8;
  char *v9;
  SLToken *v10;
  SLToken *v11;
  uint64_t (***v12)(_QWORD);
  char *v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  std::string __p;

  v6 = (_QWORD *)((char *)this + 96);
  v7 = (SLToken *)SLLexerBuffer::operator[]((_QWORD *)this + 12, 0);
  if (!v7)
    return 0;
  v8 = v7;
  v9 = (char *)*((_QWORD *)v7 + 7);
  if (*((_QWORD *)v7 + 8) - (_QWORD)v9 != 4)
    return 0;
  if ((unsigned __int16)(SLChar::sToUpper[*(_WORD *)v9 & 0x3F | (SLChar::sUniMap[(unint64_t)*(unsigned __int16 *)v9 >> 6] << 6)]
                        + *(_WORD *)v9) != 67)
    return 0;
  if ((*((_BYTE *)v7 + 16) & 1) != 0)
    return 0;
  v10 = (SLToken *)SLLexerBuffer::operator[](v6, 1uLL);
  if (!v10)
    return 0;
  v11 = v10;
  if (**((_WORD **)v10 + 7) != 41)
    return 0;
  v12 = SLLexerBuffer::operator[](v6, 2uLL);
  if (!v12)
    return 0;
  if (*(_BYTE *)v12 == 1)
  {
    if ((*((_BYTE *)v12 + 17) & 0x10) == 0 && (char *)v12[8] - (char *)v12[7] == 10)
      goto LABEL_18;
    return 0;
  }
  if (*(_BYTE *)v12)
    return 0;
  v13 = (char *)v12[7];
  if (((_DWORD)v12[2] & 0x11000) != 0x10000
    || (unsigned __int16)(SLChar::sToUpper[*(_WORD *)v13 & 0x3F | (SLChar::sUniMap[(unint64_t)*(unsigned __int16 *)v13 >> 6] << 6)]
                        + *(_WORD *)v13) != 77)
  {
    SLPostLexerImpl::Transcribe((SLPostLexerImpl *)v12, (SLToken *)v12, 2, 0, (((char *)v12[8] - v13) >> 1) - 1, &__p);
    v14 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, "COPYRIGHT");
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (!v14)
      return 0;
  }
LABEL_18:
  v15 = *((_QWORD *)this + 20) - 1;
  ++*((_QWORD *)this + 19);
  *((_QWORD *)this + 20) = v15;
  v16 = 1;
  std::deque<SLToken *>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)this + 120, 1);
  *(int64x2_t *)((char *)this + 152) = vaddq_s64(*(int64x2_t *)((char *)this + 152), (int64x2_t)xmmword_21701CDA0);
  std::deque<SLToken *>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)this + 120, 1);
  SLToken::~SLToken(v8);
  MEMORY[0x219A0649C]();
  SLToken::~SLToken(v11);
  MEMORY[0x219A0649C]();
  SLToken::SetType(a2, 11);
  **((_WORD **)a2 + 7) = 169;
  *((_QWORD *)a2 + 5) = 3;
  SLTokenList::push_back(a3, a2);
  return v16;
}

uint64_t SLPostLexerImpl::SeenMatchingParenQuote(SLPostLexerImpl *this, uint64_t a2, char a3, SLTokenList *a4)
{
  _WORD *v7;
  _QWORD *v8;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  SLToken *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  _WORD *v20;
  _WORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  __int16 v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  __int16 v40;
  unint64_t v41;
  _WORD *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  __int16 v52;
  __int16 v53;

  v7 = (_WORD *)*((_QWORD *)this + 28);
  v8 = (_QWORD *)((char *)this + 216);
  if (v7 == *((_WORD **)this + 27))
  {
    if ((a3 & 1) != 0)
      return 0;
  }
  else
  {
    v10 = (unsigned __int16)*(v7 - 1);
    v11 = (*(uint64_t (**)(SLPostLexerImpl *, _QWORD, uint64_t))(*(_QWORD *)this + 72))(this, (unsigned __int16)*(v7 - 1), a2);
    v12 = *((_QWORD *)this + 28);
    if (v11)
    {
      *((_QWORD *)this + 28) = v12 - 2;
      return 1;
    }
    v14 = v12 - *v8;
    if ((unint64_t)v14 >= 3
      && ((_DWORD)a2 == 41 || (_DWORD)a2 == 93 || (_DWORD)a2 == 125 || v10 != 40 && v10 != 91 && v10 != 123)
      && (*(unsigned int (**)(SLPostLexerImpl *, _QWORD, uint64_t))(*(_QWORD *)this + 72))(this, *(unsigned __int16 *)(*v8 + 2 * (v14 >> 1) - 4), a2))
    {
      *((_QWORD *)this + 28) -= 4;
      v15 = (SLToken *)operator new();
      SLToken::SLToken(v15, 15, 68);
      if (v10 == 40 || v10 == 91 || v10 == 123)
      {
        v16 = *((_QWORD *)v15 + 9);
        v17 = (char *)*((_QWORD *)v15 + 8);
        if ((unint64_t)v17 >= v16)
        {
          v31 = (_BYTE *)*((_QWORD *)v15 + 7);
          v32 = v17 - v31;
          if (v17 - v31 <= -3)
            goto LABEL_77;
          v33 = v32 >> 1;
          v34 = v16 - (_QWORD)v31;
          if (v34 <= (v32 >> 1) + 1)
            v35 = v33 + 1;
          else
            v35 = v34;
          if (v34 >= 0x7FFFFFFFFFFFFFFELL)
            v36 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v36 = v35;
          if (v36)
          {
            v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)v15 + 72, v36);
            v31 = (_BYTE *)*((_QWORD *)v15 + 7);
            v17 = (char *)*((_QWORD *)v15 + 8);
          }
          else
          {
            v37 = 0;
          }
          v38 = &v37[2 * v33];
          v39 = &v37[2 * v36];
          *(_WORD *)v38 = 41;
          v18 = v38 + 2;
          while (v17 != v31)
          {
            v40 = *((_WORD *)v17 - 1);
            v17 -= 2;
            *((_WORD *)v38 - 1) = v40;
            v38 -= 2;
          }
          *((_QWORD *)v15 + 7) = v38;
          *((_QWORD *)v15 + 8) = v18;
          *((_QWORD *)v15 + 9) = v39;
          if (v31)
            operator delete(v31);
        }
        else
        {
          *(_WORD *)v17 = 41;
          v18 = v17 + 2;
        }
        *((_QWORD *)v15 + 8) = v18;
      }
      else
      {
        v53 = 39;
        std::vector<unsigned short>::push_back[abi:ne180100]((uint64_t)v15 + 56, &v53);
        v18 = (char *)*((_QWORD *)v15 + 8);
      }
      v41 = *((_QWORD *)v15 + 9);
      if ((unint64_t)v18 < v41)
      {
        *(_WORD *)v18 = 0;
        v42 = v18 + 2;
LABEL_75:
        *((_QWORD *)v15 + 8) = v42;
        SLTokenList::push_back(a4, v15);
        return 1;
      }
      v43 = (char *)*((_QWORD *)v15 + 7);
      v44 = v18 - v43;
      if (v18 - v43 > -3)
      {
        v45 = v44 >> 1;
        v46 = v41 - (_QWORD)v43;
        if (v46 <= (v44 >> 1) + 1)
          v47 = v45 + 1;
        else
          v47 = v46;
        if (v46 >= 0x7FFFFFFFFFFFFFFELL)
          v48 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v48 = v47;
        if (v48)
        {
          v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)v15 + 72, v48);
          v43 = (char *)*((_QWORD *)v15 + 7);
          v18 = (char *)*((_QWORD *)v15 + 8);
        }
        else
        {
          v49 = 0;
        }
        v50 = &v49[2 * v45];
        v51 = &v49[2 * v48];
        *(_WORD *)v50 = 0;
        v42 = v50 + 2;
        while (v18 != v43)
        {
          v52 = *((_WORD *)v18 - 1);
          v18 -= 2;
          *((_WORD *)v50 - 1) = v52;
          v50 -= 2;
        }
        *((_QWORD *)v15 + 7) = v50;
        *((_QWORD *)v15 + 8) = v42;
        *((_QWORD *)v15 + 9) = v51;
        if (v43)
          operator delete(v43);
        goto LABEL_75;
      }
LABEL_77:
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    if ((a3 & 1) != 0)
      return 0;
    v7 = (_WORD *)*((_QWORD *)this + 28);
  }
  v19 = *((_QWORD *)this + 29);
  if ((unint64_t)v7 >= v19)
  {
    v21 = (_WORD *)*v8;
    v22 = (uint64_t)v7 - *v8;
    if (v22 <= -3)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v23 = v22 >> 1;
    v24 = v19 - (_QWORD)v21;
    if (v24 <= (v22 >> 1) + 1)
      v25 = v23 + 1;
    else
      v25 = v24;
    if (v24 >= 0x7FFFFFFFFFFFFFFELL)
      v26 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v26 = v25;
    if (v26)
    {
      v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)this + 232, v26);
      v21 = (_WORD *)*((_QWORD *)this + 27);
      v7 = (_WORD *)*((_QWORD *)this + 28);
    }
    else
    {
      v27 = 0;
    }
    v28 = &v27[2 * v23];
    v29 = &v27[2 * v26];
    *(_WORD *)v28 = a2;
    v20 = v28 + 2;
    while (v7 != v21)
    {
      v30 = *--v7;
      *((_WORD *)v28 - 1) = v30;
      v28 -= 2;
    }
    *((_QWORD *)this + 27) = v28;
    *((_QWORD *)this + 28) = v20;
    *((_QWORD *)this + 29) = v29;
    if (v21)
      operator delete(v21);
  }
  else
  {
    *v7 = a2;
    v20 = v7 + 1;
  }
  result = 0;
  *((_QWORD *)this + 28) = v20;
  return result;
}

void sub_216FC4114(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A0649C](v1, 0x10F0C4034644DEDLL);
  _Unwind_Resume(a1);
}

_QWORD *SLLexerBuffer::insert(SLLexerBuffer *this, uint64_t a2, SLToken *a3)
{
  uint64_t v3;
  uint64_t v4;
  void **v5;
  char *v6;
  uint64_t v7;
  _QWORD v9[2];
  SLToken *v10;

  v10 = a3;
  v3 = *((_QWORD *)this + 4);
  if (*((_QWORD *)this + 5) == v3)
    v4 = 0;
  else
    v4 = *(_QWORD *)(v3 + 8 * (*((_QWORD *)this + 7) >> 9)) + 8 * (*((_QWORD *)this + 7) & 0x1FFLL);
  v5 = (void **)((char *)this + 24);
  v9[0] = v3 + 8 * (*((_QWORD *)this + 7) >> 9);
  v9[1] = v4;
  v6 = (char *)std::__deque_iterator<SLToken *,SLToken **,SLToken *&,SLToken ***,long,512l>::operator+[abi:ne180100]((uint64_t)v9, a2);
  return std::deque<SLToken *>::insert(v5, v6, v7, (char *)&v10);
}

uint64_t SLPostLexerImpl::MatchingParenQuote(SLPostLexerImpl *this, int a2, int a3)
{
  uint64_t result;
  _BOOL4 v4;
  _BOOL4 v5;
  _BOOL4 v6;
  _BOOL4 v8;
  int v9;
  _BOOL4 v10;
  _BOOL4 v11;
  unsigned int v12;
  _BOOL4 v13;
  BOOL v14;

  result = 0;
  if (a2 > 8217)
  {
    if (a2 > 8244)
    {
      switch(a2)
      {
        case 8245:
          v9 = 8242;
          return a3 == v9;
        case 8246:
          v9 = 8243;
          return a3 == v9;
        case 8249:
          v9 = 8250;
          return a3 == v9;
        case 8250:
          v9 = 8249;
          return a3 == v9;
        default:
          return result;
      }
    }
    if ((a2 - 8218) < 2)
    {
LABEL_34:
      v10 = a3 == 8218 && a2 != 8218;
      return a3 == 8217 || v10;
    }
    if ((a2 - 8222) < 2 || a2 == 8220)
    {
      if (a3 == 8221)
        return 1;
      else
        return a3 == 8222 && a2 != 8222;
    }
  }
  else if (a2 <= 95)
  {
    v4 = a3 == 41;
    v5 = a3 == 93;
    if (a2 != 91)
      v5 = 0;
    if (a2 != 40)
      v4 = v5;
    v6 = a3 == 34;
    v8 = a3 == 39 || a3 == 180;
    if (a2 != 39)
      v8 = 0;
    if (a2 != 34)
      v6 = v8;
    if (a2 <= 39)
      return v6;
    else
      return v4;
  }
  else
  {
    if (a2 > 170)
    {
      switch(a2)
      {
        case 171:
          v14 = a3 == 187;
          break;
        case 187:
          v14 = a3 == 171;
          break;
        case 8216:
          goto LABEL_34;
        default:
          return result;
      }
      return v14;
    }
    v11 = a3 == 180;
    if (a3 == 96)
      v11 = 1;
    v12 = a3 == 39 || v11;
    v13 = a3 == 125;
    if (a2 != 123)
      v13 = 0;
    if (a2 == 96)
      return v12;
    else
      return v13;
  }
  return result;
}

void SLPostLexerImpl::HandlePunct(SLPostLexerImpl *this, SLToken *a2)
{
  uint64_t (***v4)(_QWORD);
  char **Unit;
  SLToken *v6;

  v4 = SLLexerBuffer::operator[]((_QWORD *)this + 12, 0);
  if (v4
    && *(_BYTE *)v4 == 1
    && (*((_BYTE *)a2 + 17) & 0x20) != 0
    && (Unit = (char **)SLPostLexerImpl::FindUnit(this, a2, 0, ((uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 1) - 1, 36)) != 0)
  {
    SLPostLexerImpl::HandleCurrency((uint64_t)this, Unit, a2);
  }
  else
  {
    if (**((_WORD **)a2 + 7) == 45)
    {
      SLToken::~SLToken(a2);
      JUMPOUT(0x219A0649CLL);
    }
    SLToken::SetType(a2, 11);
    v6 = a2;
    std::deque<SLToken *>::push_front((uint64_t)this + 120, &v6);
  }
}

uint64_t SLPostLexerImpl::GenerateSymbol(uint64_t a1, const std::string *a2, int a3, __int16 a4, __int16 a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t v13;
  uint64_t result;

  v9 = *(_QWORD *)(a1 + 264);
  v10 = a1 + 336;
  std::string::operator=((std::string *)(a1 + 336 + 24 * v9), a2);
  v11 = *(_QWORD *)(a1 + 264);
  v12 = (uint64_t **)(v10 + 24 * v11);
  if (*((char *)v12 + 23) < 0)
    v12 = (uint64_t **)*v12;
  v13 = a1 + 16 * v9;
  result = v13 + 272;
  *(_QWORD *)(v13 + 272) = v12;
  *(_DWORD *)(v13 + 280) = a3;
  *(_WORD *)(v13 + 284) = a4;
  *(_WORD *)(v13 + 286) = a5;
  *(_QWORD *)(a1 + 264) = ((_BYTE)v11 + 1) & 3;
  return result;
}

uint64_t SLPostLexerImpl::FindUnitModifier(SLPostLexerImpl *this, SLToken *a2, SLToken *a3, char *a4)
{
  unsigned __int16 *v4;
  uint64_t result;
  int v9;
  char v10;
  char v11;

  *a4 = 0;
  if (!a2)
    return 0;
  v4 = (unsigned __int16 *)*((_QWORD *)a2 + 7);
  if (*((_QWORD *)a2 + 8) - (_QWORD)v4 != 4)
    return 0;
  result = 0;
  v9 = *v4;
  if (v9 <= 178)
  {
    if (v9 != 47)
    {
      if (v9 != 178)
        return result;
      v11 = 50;
      goto LABEL_20;
    }
    v10 = 47;
LABEL_14:
    v11 = 0;
    *a4 = v10;
    if (!a3 || (*((_DWORD *)a2 + 4) & 1) != 0)
      goto LABEL_20;
    result = SLPostLexerImpl::FindUnit(this, a3, 0, ((uint64_t)(*((_QWORD *)a3 + 8) - *((_QWORD *)a3 + 7)) >> 1) - 1, 124);
    if (!result)
    {
      result = SLPostLexerImpl::FindUnit(this, a3, 0, ((uint64_t)(*((_QWORD *)a3 + 8) - *((_QWORD *)a3 + 7)) >> 1) - 1, 35);
      if (!result)
      {
        result = SLPostLexerImpl::FindCommonCountable(this, a3, 0);
        if (!result)
        {
          v11 = 0;
          goto LABEL_20;
        }
      }
    }
    return result;
  }
  if (v9 == 179)
  {
    v11 = 51;
LABEL_20:
    result = 0;
    *a4 = v11;
    return result;
  }
  if (v9 == 8901 || v9 == 183)
  {
    v10 = 42;
    goto LABEL_14;
  }
  return result;
}

uint64_t SLPostLexerImpl::AppendFullUnit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int a8)
{
  int v8;
  uint64_t UnitModifier;
  int v10;
  BOOL v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  SLToken *v20;
  SLToken *v21;
  BOOL v22;
  uint64_t v23;
  uint64_t (***v24)(_QWORD);
  SLToken *v25;
  SLToken *v26;
  char v28;

  v8 = a8;
  UnitModifier = a7;
  v10 = a6;
  if (a7)
    v12 = a8 == 42;
  else
    v12 = 0;
  v13 = !v12;
  if (a6)
    v14 = v13;
  else
    v14 = 0;
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 176)
                                                                                          + 240))(*(_QWORD *)(a1 + 176), a2, a3, v14, a4, a5);
  if (v8)
  {
    do
    {
      v16 = UnitModifier;
      UnitModifier = 0;
      v17 = *((_DWORD *)SLLexerBuffer::operator[]((_QWORD *)(a1 + 96), 0) + 4);
      v28 = 0;
      v18 = (char)v8;
      if ((int)v18 >= 50)
        v19 = 1;
      else
        v19 = 2;
      if ((v17 & 1) == 0)
      {
        v20 = (SLToken *)SLLexerBuffer::operator[]((_QWORD *)(a1 + 96), v19);
        v21 = (SLToken *)SLLexerBuffer::operator[]((_QWORD *)(a1 + 96), (v19 + 1));
        UnitModifier = SLPostLexerImpl::FindUnitModifier((SLPostLexerImpl *)a1, v20, v21, &v28);
      }
      v10 &= v14 ^ 1;
      if ((v10 & 1) != 0)
      {
        if (UnitModifier)
          v22 = v28 == 42;
        else
          v22 = 0;
        v14 = !v22;
      }
      else
      {
        v14 = 0;
      }
      v23 = *(_QWORD *)(a1 + 176);
      v24 = SLLexerBuffer::operator[]((_QWORD *)(a1 + 96), (v19 - 1));
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (**)(_QWORD), uint64_t (**)(_QWORD)))(*(_QWORD *)v23 + 248))(v23, v16, v18, v14, a3, v24[4], v24[5]);
      v25 = (SLToken *)SLLexerBuffer::operator[]((_QWORD *)(a1 + 96), 0);
      *(int64x2_t *)(a1 + 152) = vaddq_s64(*(int64x2_t *)(a1 + 152), (int64x2_t)xmmword_21701CDA0);
      result = std::deque<SLToken *>::__maybe_remove_front_spare[abi:ne180100](a1 + 120, 1);
      if (v25)
      {
        SLToken::~SLToken(v25);
        result = MEMORY[0x219A0649C]();
      }
      if ((int)v18 <= 49)
      {
        v26 = (SLToken *)SLLexerBuffer::operator[]((_QWORD *)(a1 + 96), 0);
        *(int64x2_t *)(a1 + 152) = vaddq_s64(*(int64x2_t *)(a1 + 152), (int64x2_t)xmmword_21701CDA0);
        result = std::deque<SLToken *>::__maybe_remove_front_spare[abi:ne180100](a1 + 120, 1);
        if (v26)
        {
          SLToken::~SLToken(v26);
          result = MEMORY[0x219A0649C]();
        }
      }
      LOBYTE(v8) = v28;
    }
    while (v28);
  }
  return result;
}

char *SLPostLexerImpl::AppendMorph(SLPostLexerImpl *this, SLToken *a2, char *a3, char *a4)
{
  return std::vector<unsigned short>::__insert_with_size[abi:ne180100]<unsigned short const*,unsigned short const*>((uint64_t)a2 + 56, *((_QWORD *)a2 + 8) - 2, a3, a4, (a4 - a3) >> 1);
}

void SLPostLexerImpl::HandleElapsedSymbol(SLPostLexerImpl *this, SLToken *a2, SLTokenList *a3)
{
  _QWORD *v6;
  SLToken *v7;
  SLToken *v8;
  SLPostLexerImpl *v9;
  SLPostLexerImpl *v10;
  unint64_t i;
  unint64_t k;
  SLToken *v13;
  SLToken *v14;
  SLPostLexerImpl *v15;
  unint64_t j;
  uint64_t (***v17)(_QWORD);
  int v18;
  char v19;
  std::string v20;
  unint64_t v21;
  unint64_t v22;
  std::string __p;
  std::string v24;
  _BYTE v25[24];
  unint64_t v26;

  v6 = (_QWORD *)((char *)this + 96);
  v7 = (SLToken *)SLLexerBuffer::operator[]((_QWORD *)this + 12, 0);
  if (!v7)
    goto LABEL_26;
  v8 = v7;
  if ((*((_BYTE *)v7 + 18) & 0x80) == 0)
    goto LABEL_26;
  SLDissecter::DissectUnit(*((_QWORD *)this + 23), (uint64_t)a2, (uint64_t)v25);
  SLPostLexerImpl::Transcribe(v9, a2, 2, v26, ((uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 1) - 1, &v24);
  SLDissecter::DissectUnit(*((_QWORD *)this + 23), (uint64_t)v8, (uint64_t)v25);
  SLPostLexerImpl::Transcribe(v10, v8, 2, v26, ((uint64_t)(*((_QWORD *)v8 + 8) - *((_QWORD *)v8 + 7)) >> 1) - 1, &__p);
  for (i = 0; ; i = v22 + 1)
  {
    v22 = i;
    if (((*(uint64_t (**)(SLPostLexerImpl *, std::string *, unint64_t *))(*(_QWORD *)this + 152))(this, &v24, &v22) & 1) == 0|| (v21 = v22 + 1, ((*(uint64_t (**)(SLPostLexerImpl *, std::string *, unint64_t *))(*(_QWORD *)this + 152))(this, &__p, &v21) & 1) == 0))
    {
LABEL_16:
      for (j = 0; ; ++j)
      {
        v17 = SLLexerBuffer::operator[](v6, j);
        if (!v17)
          break;
        v18 = *((_DWORD *)v17 + 4);
        if ((v18 & 0x800000) == 0)
          break;
        *((_DWORD *)v17 + 4) = v18 & 0xFF7FFFFF;
      }
      v19 = 1;
      goto LABEL_21;
    }
    if ((*(unsigned int (**)(SLPostLexerImpl *, unint64_t, unint64_t))(*(_QWORD *)this + 160))(this, v22, v21))
    {
      break;
    }
  }
  for (k = 1; ; ++k)
  {
    v13 = (SLToken *)SLLexerBuffer::operator[](v6, k);
    v14 = v13;
    if (!v13 || (*((_BYTE *)v13 + 18) & 0x80) == 0)
      break;
    SLDissecter::DissectUnit(*((_QWORD *)this + 23), (uint64_t)v13, (uint64_t)v25);
    SLPostLexerImpl::Transcribe(v15, v14, 2, v26, ((uint64_t)(*((_QWORD *)v14 + 8) - *((_QWORD *)v14 + 7)) >> 1) - 1, &v20);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v20;
    v20.__r_.__value_.__r.__words[0] = v21 + 1;
    if (!(*(unsigned int (**)(SLPostLexerImpl *, std::string *, std::string *))(*(_QWORD *)this + 152))(this, &__p, &v20)|| ((*(uint64_t (**)(SLPostLexerImpl *, unint64_t, std::string::size_type))(*(_QWORD *)this+ 160))(this, v21, v20.__r_.__value_.__r.__words[0]) & 1) == 0)
    {
      goto LABEL_16;
    }
    v21 = v20.__r_.__value_.__r.__words[0];
  }
  SLPostLexerImpl::PronounceElapsed(this, a2, v22, a3);
  v19 = 0;
LABEL_21:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if ((v19 & 1) != 0)
  {
LABEL_26:
    *((_DWORD *)a2 + 4) &= ~0x800000u;
    SLTokenList::push_back(a3, a2);
  }
}

void sub_216FC4AAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a20 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void SLPostLexerImpl::HandleThousandsSeparators(SLPostLexerImpl *this, SLToken *a2, char a3)
{
  int v6;
  uint64_t (***v8)(_QWORD);
  BOOL v9;
  uint64_t (***v10)(_QWORD);
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  char *v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t (***v19)(_QWORD);
  uint64_t v20;
  char **v21;
  BOOL v22;
  SLToken *v23;
  uint64_t v24;
  uint64_t v25;
  char *v27;
  unint64_t v28;
  uint64_t i;
  int v30;
  _QWORD v31[3];
  unint64_t v32;
  _BYTE v33[16];
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  CFRange v37;

  v6 = **(char **)(*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 22) + 216))(*((_QWORD *)this + 22), 207);
  SLDissecter::DissectNumber(*((_QWORD *)this + 23), (uint64_t)a2, 0, ((uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 1) - 1, (uint64_t)v33);
  if (v36 <= 0x3E7 && v33[4] == 0 && v34 >= *((_QWORD *)a2 + 5))
  {
    v8 = SLLexerBuffer::operator[]((_QWORD *)this + 12, 1uLL);
    if (v8)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v12 = 3;
      while (1)
      {
        v13 = (uint64_t)v8;
        v14 = *(unsigned __int8 *)v8;
        if (v14 != 1)
          break;
        if (v9)
          goto LABEL_39;
        v15 = (char *)v8[7];
        if (SLChar::sCharClass[*(_WORD *)v15 & 0x3F | (SLChar::sUniMap[(unint64_t)*(unsigned __int16 *)v15 >> 6] << 6)] != 2)
          goto LABEL_39;
        v16 = *((_DWORD *)v8 + 4);
        if ((v16 & 0x1000) != 0)
        {
          SLDissecter::DissectUnit(*((_QWORD *)this + 23), (uint64_t)v8, (uint64_t)v31);
          if (LOBYTE(v31[0]))
            v17 = a3 == 43;
          else
            v17 = 0;
          if (v17)
            a3 = 42;
          if (!SLPostLexerImpl::FindUnit(this, a2, v32, ((uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 1) - 1, a3))goto LABEL_39;
          v11 = v31[1];
          v18 = v31[2];
        }
        else
        {
          v18 = (((char *)v8[8] - v15) >> 1) - 1;
        }
        SLDissecter::DissectNumber(*((_QWORD *)this + 23), v13, v11, v18, (uint64_t)v33);
        if (v34 != 3 || v35)
          goto LABEL_39;
        v9 = *(_QWORD *)(v13 + 40) != 3 || (v16 & 0x1000) != 0;
        if ((*(_BYTE *)(v13 + 16) & 1) == 0)
        {
          v19 = SLLexerBuffer::operator[]((_QWORD *)this + 12, v12 - 1);
          if (v19)
          {
            if (*(_BYTE *)v19 == 13 && *(unsigned __int16 *)v19[7] == v6 && ((_BYTE)v19[2] & 1) == 0)
            {
              v8 = SLLexerBuffer::operator[]((_QWORD *)this + 12, v12);
              v12 += 2;
              v10 = (uint64_t (***)(_QWORD))v13;
              if (v8)
                continue;
            }
          }
        }
        v20 = 0;
        goto LABEL_33;
      }
      if (*(_BYTE *)v8)
      {
        if (v14 != 2 && v14 != 14)
        {
          v13 = 0;
          goto LABEL_54;
        }
        v27 = (char *)v8[7];
        v28 = (((char *)v8[8] - v27) >> 1) - 1;
        if (v28 >= 5)
        {
          for (i = 0; i != v28; ++i)
          {
            if (i == 3)
              v30 = 6;
            else
              v30 = 2;
            if (v30 != (unsigned __int16)SLChar::sCharClass[*(_WORD *)&v27[2 * i] & 0x3F | (SLChar::sUniMap[(unint64_t)*(unsigned __int16 *)&v27[2 * i] >> 6] << 6)])
              goto LABEL_39;
          }
          v10 = v8;
LABEL_54:
          v20 = v13;
          v13 = (uint64_t)v10;
          if (!v10)
            goto LABEL_39;
LABEL_33:
          while (1)
          {
            v21 = (char **)SLLexerBuffer::operator[]((_QWORD *)this + 12, 0);
            *(int64x2_t *)((char *)this + 152) = vaddq_s64(*(int64x2_t *)((char *)this + 152), (int64x2_t)xmmword_21701CDA0);
            std::deque<SLToken *>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)this + 120, 1);
            if (v21 == (char **)v20)
              break;
            SLToken::AppendToken(a2, v21);
            v22 = v21 != (char **)v13;
            if (v21)
            {
LABEL_38:
              SLToken::~SLToken((SLToken *)v21);
              MEMORY[0x219A0649C]();
              if (!v22)
                goto LABEL_39;
            }
            else if (!v13)
            {
              goto LABEL_39;
            }
          }
          v23 = (SLToken *)operator new();
          SLToken::SLToken(v23, 1, *(_DWORD *)(v20 + 16) & 1);
          v37.length = ((uint64_t)(*(_QWORD *)(v20 + 64) - *(_QWORD *)(v20 + 56)) >> 1) - 5;
          v37.location = 4;
          SLToken::SetTokenRange(v23, (SLToken *)v20, v37);
          SLTokenList::SLTokenList((SLTokenList *)v31);
          LOBYTE(v32) = 2;
          v24 = *((_QWORD *)this + 22);
          v25 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 216))(v24, 215);
          (*(void (**)(uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v24 + 232))(v24, v25, v31, *(_QWORD *)(v20 + 32) + 3, 1);
          SLTokenList::push_back((SLTokenList *)v31, v23);
          SLPostLexerImpl::push_front(this, (const SLTokenList *)v31);
          *(_QWORD *)(v20 + 40) = 3;
          *(_WORD *)(*(_QWORD *)(v20 + 56) + 6) = 0;
          std::vector<unsigned short>::resize(v20 + 56, 4uLL);
          std::__list_imp<SLToken *>::clear(v31);
          SLToken::AppendToken(a2, (char **)v20);
          v22 = v20 != v13;
          goto LABEL_38;
        }
      }
    }
  }
LABEL_39:
  *((_DWORD *)a2 + 4) |= 0x80u;
  v31[0] = a2;
  std::deque<SLToken *>::push_front((uint64_t)this + 120, v31);
}

void sub_216FC4F3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A0649C](v1, 0x10F0C4034644DEDLL);
  _Unwind_Resume(a1);
}

void SLPostLexerImpl::PronounceElapsed(SLPostLexerImpl *this, SLToken *a2, uint64_t a3, SLTokenList *a4)
{
  _QWORD *v7;
  char *v8;
  SLPostLexerImpl *v9;
  SLToken *v10;
  char v11;
  _BYTE v12[16];
  _BYTE v13[64];
  std::string __p;
  _BYTE v15[8];
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v20 = a3;
  v7 = (_QWORD *)((char *)this + 96);
  v8 = (char *)this + 120;
  do
  {
    while (1)
    {
      SLDissecter::DissectUnit(*((_QWORD *)this + 23), (uint64_t)a2, (uint64_t)v15);
      SLPostLexerImpl::Transcribe(v9, a2, 2, v18, ((uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 1) - 1, &__p);
      (*(void (**)(SLPostLexerImpl *, std::string *, uint64_t *))(*(_QWORD *)this + 152))(this, &__p, &v20);
      SLDissecter::DissectNumber(*((_QWORD *)this + 23), (uint64_t)a2, v16, v17, (uint64_t)v13);
      (*(void (**)(_QWORD, SLToken *, SLTokenList *, _BYTE *, _QWORD, _QWORD))(**((_QWORD **)this + 22) + 48))(*((_QWORD *)this + 22), a2, a4, v13, 0, 0);
      v18 += *((_QWORD *)a2 + 4);
      (*(void (**)(SLPostLexerImpl *, std::string *, uint64_t, BOOL, _BYTE *))(*(_QWORD *)this + 168))(this, &__p, v20, v13[2] == 0, v12);
      *((_BYTE *)a4 + 24) = 2;
      (*(void (**)(_QWORD, _BYTE *, SLTokenList *, unint64_t, uint64_t))(**((_QWORD **)this + 22)
                                                                                        + 232))(*((_QWORD *)this + 22), v12, a4, v18, v19);
      SLToken::~SLToken(a2);
      MEMORY[0x219A0649C]();
      v10 = (SLToken *)SLLexerBuffer::operator[](v7, 0);
      a2 = v10;
      if (!v10)
        goto LABEL_4;
      if ((*((_BYTE *)v10 + 18) & 0x80) != 0)
      {
        *((_BYTE *)v10 + 1) = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 22) + 168))(*((_QWORD *)this + 22), 0);
        *(int64x2_t *)((char *)this + 152) = vaddq_s64(*(int64x2_t *)((char *)this + 152), (int64x2_t)xmmword_21701CDA0);
        std::deque<SLToken *>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)v8, 1);
        ++v20;
        v11 = 1;
      }
      else
      {
LABEL_4:
        v11 = 0;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        break;
      if ((v11 & 1) == 0)
        return;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  while ((v11 & 1) != 0);
}

void sub_216FC514C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SLPostLexerImpl::FindElapsed()
{
  return 0;
}

uint64_t SLPostLexerImpl::ElapsedSequence(SLPostLexerImpl *this)
{
  return 0;
}

void std::vector<unsigned short>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 1;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 2 * a2;
  }
  else
  {
    std::vector<unsigned short>::__append((char **)a1, a2 - v2);
  }
}

uint64_t SLPostLexerImpl::StartsCurrencyRange()
{
  return 0;
}

BOOL SLPostLexerImpl::LooksLikeName(SLPostLexerImpl *this, SLToken *a2, int a3)
{
  unsigned __int16 *v3;
  unsigned int v5;

  if (*(_BYTE *)a2)
    return 0;
  v3 = (unsigned __int16 *)*((_QWORD *)a2 + 7);
  if ((unint64_t)(((uint64_t)(*((_QWORD *)a2 + 8) - (_QWORD)v3) >> 1) - 1) < 2)
    return 0;
  if (a3 && (SLChar::sCharClass[v3[1] & 0x3F | (SLChar::sUniMap[(unint64_t)v3[1] >> 6] << 6)] & 0x1F) == 1)
    return 1;
  if ((SLChar::sCharClass[*v3 & 0x3F | (SLChar::sUniMap[(unint64_t)*v3 >> 6] << 6)] & 0x9F) != 1)
    return 0;
  v5 = (unsigned __int16)SLChar::sCharClass[v3[1] & 0x3F | (SLChar::sUniMap[(unint64_t)v3[1] >> 6] << 6)];
  if ((v5 & 0x1F) != 4)
  {
    if ((v5 & 0x1F) == 1)
      return (v5 >> 7) & 1;
    return 0;
  }
  return (SLChar::sCharClass[v3[2] & 0x3F | (SLChar::sUniMap[(unint64_t)v3[2] >> 6] << 6)] & 0x9F) == 1;
}

uint64_t SLPostLexerImpl::PeriodIsEndOfSentence()
{
  return 1;
}

char *std::vector<unsigned short>::insert(uint64_t a1, char *__src, _WORD *a3)
{
  char *v4;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  __int16 v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  void *__p;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;

  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v7 = a1 + 16;
  v8 = v9;
  if ((unint64_t)v6 >= v9)
  {
    v14 = *(_BYTE **)a1;
    v15 = (uint64_t)&v6[-*(_QWORD *)a1];
    if (v15 <= -3)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v16 = (__src - v14) >> 1;
    v17 = v15 >> 1;
    v18 = v8 - (_QWORD)v14;
    if (v18 <= v17 + 1)
      v19 = v17 + 1;
    else
      v19 = v18;
    if (v18 >= 0x7FFFFFFFFFFFFFFELL)
      v20 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v20 = v19;
    v27 = v7;
    if (v20)
      v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v7, v20);
    else
      v21 = 0;
    __p = v21;
    v24 = &v21[2 * v16];
    v25 = v24;
    v26 = &v21[2 * v20];
    std::__split_buffer<unsigned short>::push_back(&__p, a3);
    v4 = std::vector<unsigned short>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v25 != v24)
      v25 += (v24 - v25 + 1) & 0xFFFFFFFFFFFFFFFELL;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_WORD *)__src = *a3;
    *(_QWORD *)(a1 + 8) = __src + 2;
  }
  else
  {
    v10 = __src + 2;
    v11 = v6 - 2;
    v12 = v6;
    while (v11 < v6)
    {
      v13 = *(_WORD *)v11;
      v11 += 2;
      *(_WORD *)v12 = v13;
      v12 += 2;
    }
    *(_QWORD *)(a1 + 8) = v12;
    if (v6 != v10)
      memmove(&v6[-2 * ((v6 - v10) >> 1)], __src, v6 - v10);
    *(_WORD *)v4 = *a3;
  }
  return v4;
}

void sub_216FC5418(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SLPostLexerImpl::HandleUnknownChar(SLPostLexerImpl *this, SLToken *a2, SLTokenList *a3)
{
  uint64_t result;

  SLToken::SetType(a2, 0);
  result = SLPostLexerImpl::HandleTokenInDictionary(this, a2);
  if (a2 && (result & 1) == 0)
  {
    SLToken::~SLToken(a2);
    JUMPOUT(0x219A0649CLL);
  }
  return result;
}

void SLPostLexerImpl::CreateIPAHomograph(SLPostLexerImpl *this, const unsigned __int8 *a2)
{
  abort();
}

SLPostLexerEng *SLPostLexer::Create(SLPostLexer *this, SLLexer *a2, SLDictLookup *a3, CFLocaleRef locale, const __CFLocale *a5)
{
  char v5;
  const __CFString *Value;
  SLPostLexerImpl *v10;

  v5 = (char)a5;
  Value = (const __CFString *)CFLocaleGetValue(locale, (CFLocaleKey)*MEMORY[0x24BDBD418]);
  if (CFStringCompare(Value, CFSTR("en"), 0) == kCFCompareEqualTo)
    return SLCreatePostLexerEng(this, a2, a3, v5);
  v10 = (SLPostLexerImpl *)operator new();
  SLPostLexerImpl::SLPostLexerImpl(v10, this, a2, a3, v5);
  return v10;
}

void sub_216FC5578(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A0649C](v1, 0x10F3C40ACABD4A7);
  _Unwind_Resume(a1);
}

uint64_t SLPostLexerImpl::LexerBehavior(SLPostLexerImpl *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 13) + 8))(*((_QWORD *)this + 13));
}

uint64_t SLPostLexerImpl::SetLexerBehavior(SLPostLexerImpl *this, int a2)
{
  *((_DWORD *)this + 64) = a2;
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 13) + 16))(*((_QWORD *)this + 13));
}

uint64_t SLPostLexerImpl::SetDelim(SLPostLexerImpl *this, const unsigned __int16 *a2)
{
  return (*(uint64_t (**)(_QWORD, const unsigned __int16 *))(**((_QWORD **)this + 13) + 24))(*((_QWORD *)this + 13), a2);
}

uint64_t SLPostLexerImpl::Delim(SLPostLexerImpl *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 13) + 32))(*((_QWORD *)this + 13));
}

uint64_t SLPostLexerImpl::SetErrorHandler(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 104) + 40))(*(_QWORD *)(a1 + 104));
}

uint64_t SLPostLexerImpl::SetTuples(uint64_t this, SLTuples *a2)
{
  *(_QWORD *)(this + 192) = a2;
  return this;
}

void std::deque<SLToken *>::push_front(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    std::deque<SLToken *>::__add_front_capacity((void **)a1);
    v4 = *(_QWORD *)(a1 + 32);
  }
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (_QWORD *)(v5 + 8 * (v4 >> 9));
  if (*(_QWORD *)(a1 + 16) == v5)
    v7 = 0;
  else
    v7 = *v6 + 8 * (v4 & 0x1FF);
  if (v7 == *v6)
    v7 = *(v6 - 1) + 4096;
  *(_QWORD *)(v7 - 8) = *a2;
  v8 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 32) = v4 - 1;
  *(_QWORD *)(a1 + 40) = v8;
}

void std::deque<SLToken *>::__add_front_capacity(void **a1)
{
  _BYTE *v2;
  _BYTE *v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void *v41;
  void *__p;
  char *v43;
  char *v44;
  char *v45;
  _QWORD *v46;

  v2 = a1[1];
  v3 = a1[2];
  v4 = v3 - v2;
  if (v3 == v2)
    v5 = 0;
  else
    v5 = ((v3 - v2) << 6) - 1;
  v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(_QWORD)a1[5]] < 0x200)
  {
    v7 = (uint64_t)(a1 + 3);
    v8 = a1[3];
    v9 = *a1;
    v10 = v8 - (_BYTE *)*a1;
    if (v4 >= v10)
    {
      if (v8 == v9)
        v11 = 1;
      else
        v11 = v10 >> 2;
      v46 = a1 + 3;
      __p = std::__allocate_at_least[abi:ne180100]<std::allocator<SLHomograph *>>(v7, v11);
      v43 = (char *)__p;
      v44 = (char *)__p;
      v45 = (char *)__p + 8 * v12;
      v41 = operator new(0x1000uLL);
      std::__split_buffer<SLToken **>::push_back(&__p, &v41);
      v13 = (char *)a1[1];
      v14 = v44;
      if (v13 == a1[2])
      {
        v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            v15 = v43 - (_BYTE *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p)
                v23 = 1;
              else
                v23 = (v14 - (_BYTE *)__p) >> 2;
              v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SLHomograph *>>((uint64_t)v46, v23);
              v26 = v43;
              v14 = &v24[8 * (v23 >> 2)];
              v27 = v44 - v43;
              if (v44 != v43)
              {
                v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                v28 = 8 * (v27 >> 3);
                v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  v30 = *(_QWORD *)v26;
                  v26 += 8;
                  *(_QWORD *)v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              v31 = __p;
              __p = v24;
              v43 = &v24[8 * (v23 >> 2)];
              v44 = v14;
              v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                v14 = v44;
              }
            }
            else
            {
              v16 = v15 >> 3;
              v17 = v15 >> 3 < -1;
              v18 = (v15 >> 3) + 2;
              if (v17)
                v19 = v18;
              else
                v19 = v16 + 1;
              v20 = &v43[-8 * (v19 >> 1)];
              v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                v14 = v43;
              }
              v22 = &v14[-8 * (v19 >> 1)];
              v14 = &v20[v21];
              v43 = v22;
              v44 = &v20[v21];
            }
          }
          v32 = *(_QWORD *)v13;
          v13 += 8;
          *(_QWORD *)v14 = v32;
          v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        v33 = (char *)a1[1];
      }
      v36 = *a1;
      v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      __p = v36;
      v43 = v33;
      v38 = (char *)a1[3];
      v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      v44 = v13;
      v45 = v38;
      if (v14 - v37 == 8)
        v40 = 256;
      else
        v40 = (uint64_t)a1[4] + 512;
      a1[4] = (void *)v40;
      if (v13 != v33)
        v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      if (v36)
        operator delete(v36);
    }
    else
    {
      if (v2 == v9)
      {
        __p = operator new(0x1000uLL);
        std::__split_buffer<SLToken **>::push_back(a1, &__p);
        v34 = a1[2];
        __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        __p = operator new(0x1000uLL);
      }
      std::__split_buffer<SLToken **>::push_front((uint64_t)a1, &__p);
      if ((_BYTE *)a1[2] - (_BYTE *)a1[1] == 8)
        v35 = 256;
      else
        v35 = (uint64_t)a1[4] + 512;
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 512;
    __p = (void *)*((_QWORD *)v3 - 1);
    a1[2] = v3 - 8;
    std::__split_buffer<SLToken **>::push_front((uint64_t)a1, &__p);
  }
}

void sub_216FC5944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  void *v12;

  operator delete(v12);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned short>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_216FC59EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<SLHomograph *>::__init_with_size[abi:ne180100]<SLHomograph **,SLHomograph **>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<SLHomograph *>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_216FC5A64(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<SLHomograph *>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SLHomograph *>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

_QWORD *std::deque<SLToken *>::insert(void **a1, char *a2, uint64_t a3, char *a4)
{
  unint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  _QWORD *v53;
  char *v54;
  char *v56;
  char *v57;
  char *v58;

  v6 = (unint64_t)a1[4];
  v7 = a1[1];
  v8 = a1[2];
  v9 = &v7[8 * (v6 >> 9)];
  if (v8 == v7)
    v10 = 0;
  else
    v10 = *(_QWORD *)v9 + 8 * ((unint64_t)a1[4] & 0x1FF);
  if (a3 == v10)
    v11 = 0;
  else
    v11 = ((a3 - *(_QWORD *)a2) >> 3) + ((a2 - v9) << 6) - ((v10 - *(_QWORD *)v9) >> 3);
  v12 = (char *)a1[5];
  v13 = (unint64_t)&v12[-v11];
  if (v11 >= (unint64_t)&v12[-v11])
  {
    if (v8 == v7)
      v21 = 0;
    else
      v21 = ((v8 - v7) << 6) - 1;
    if ((char *)v21 == &v12[v6])
    {
      std::deque<SLToken *>::__add_back_capacity(a1);
      v12 = (char *)a1[5];
      v13 = (unint64_t)&v12[-v11];
    }
    if (v12 == (char *)v11)
    {
      *(_QWORD *)(*(_QWORD *)((char *)a1[1] + ((((unint64_t)a1[4] + v11) >> 6) & 0x3FFFFFFFFFFFFF8))
                + 8 * (((unint64_t)a1[4] + v11) & 0x1FF)) = *(_QWORD *)a4;
      a1[5] = (void *)(v11 + 1);
    }
    else
    {
      v58 = a4;
      v22 = (unint64_t)&v12[(_QWORD)a1[4]];
      v23 = (char *)a1[1];
      v24 = &v23[8 * (v22 >> 9)];
      v25 = *(_QWORD *)v24;
      v26 = (char *)(*(_QWORD *)v24 + 8 * (v22 & 0x1FF));
      if (a1[2] == v23)
        v26 = 0;
      v56 = v24;
      v57 = v26;
      v27 = (uint64_t)&v26[-v25];
      v28 = (uint64_t)&v26[-v25] >> 3;
      if (v27 < 9)
      {
        v44 = 512 - v28;
        v30 = &v24[-8 * (v44 >> 9)];
        v31 = (char *)(*(_QWORD *)v30 + 8 * (~(_WORD)v44 & 0x1FF));
      }
      else
      {
        v29 = v28 - 1;
        v30 = &v24[8 * (v29 >> 9)];
        v31 = (char *)(*(_QWORD *)v30 + 8 * (v29 & 0x1FF));
      }
      if (v31 == a4)
      {
        v58 = v26;
        a4 = v26;
      }
      *(_QWORD *)v26 = *(_QWORD *)v31;
      a1[5] = v12 + 1;
      if (v13 >= 2)
      {
        v45 = (char *)std::__deque_iterator<SLToken *,SLToken **,SLToken *&,SLToken ***,long,512l>::operator-[abi:ne180100]((uint64_t)&v56, v13);
        v24 = std::deque<SLToken *>::__move_backward_and_check((uint64_t)a1, v45, v46, v30, v31, v56, v57, (unint64_t *)&v58);
        v26 = v47;
        v56 = v24;
        v57 = v47;
        a4 = v58;
      }
      v48 = *(_QWORD *)a4;
      if (v26 == *(char **)v24)
      {
        v56 = v24 - 8;
        v26 = (char *)(*((_QWORD *)v24 - 1) + 4096);
      }
      *((_QWORD *)v26 - 1) = v48;
    }
  }
  else
  {
    if (v6)
    {
      if (v11)
      {
LABEL_10:
        v58 = a4;
        v14 = (unint64_t)a1[4];
        v15 = (char *)a1[1];
        v16 = (uint64_t *)&v15[8 * (v14 >> 9)];
        v17 = *v16;
        if (a1[2] == v15)
          v18 = 0;
        else
          v18 = (char *)(*v16 + 8 * ((unint64_t)a1[4] & 0x1FF));
        v56 = &v15[8 * (v14 >> 9)];
        v57 = v18;
        v19 = (uint64_t)&v18[-v17] >> 3;
        if ((uint64_t)&v18[-v17] < 9)
          v20 = (char *)(v16[-((unint64_t)(512 - v19) >> 9)] + 8 * (~(512 - (_WORD)v19) & 0x1FF));
        else
          v20 = (char *)(*(uint64_t *)((char *)v16 + (((unint64_t)(v19 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((v19 - 1) & 0x1FF));
        if (v18 == a4)
        {
          v58 = v20;
          a4 = v20;
        }
        *(_QWORD *)v20 = *(_QWORD *)v18;
        v37 = (uint64_t)a1[5] + 1;
        a1[4] = (void *)(v14 - 1);
        a1[5] = (void *)v37;
        if (v11 >= 2)
        {
          v38 = (uint64_t)&v18[-*v16];
          v39 = v38 >> 3;
          if (v38 < -7)
          {
            v49 = 510 - v39;
            v41 = (char *)&v16[-(v49 >> 9)];
            v42 = *(_QWORD *)v41;
            v43 = ~(_DWORD)v49 & 0x1FFLL;
          }
          else
          {
            v40 = v39 + 1;
            v41 = (char *)&v16[v40 >> 9];
            v42 = *(_QWORD *)v41;
            v43 = v40 & 0x1FF;
          }
          v50 = (char *)(v42 + 8 * v43);
          v51 = (char *)std::__deque_iterator<SLToken *,SLToken **,SLToken *&,SLToken ***,long,512l>::operator+[abi:ne180100]((uint64_t)&v56, v11);
          v56 = (char *)std::deque<SLToken *>::__move_and_check((int)a1, v41, v50, v51, v52, (void **)v56, v57, (unint64_t *)&v58);
          v57 = v18;
          a4 = v58;
        }
        *(_QWORD *)v18 = *(_QWORD *)a4;
        goto LABEL_50;
      }
    }
    else
    {
      std::deque<SLToken *>::__add_front_capacity(a1);
      if (v11)
        goto LABEL_10;
    }
    v32 = (unint64_t)a1[4];
    v33 = (char *)a1[1];
    v34 = &v33[8 * (v32 >> 9)];
    if (a1[2] == v33)
      v35 = 0;
    else
      v35 = *(_QWORD *)v34 + 8 * ((unint64_t)a1[4] & 0x1FF);
    if (v35 == *(_QWORD *)v34)
      v35 = *((_QWORD *)v34 - 1) + 4096;
    *(_QWORD *)(v35 - 8) = *(_QWORD *)a4;
    v36 = (uint64_t)a1[5] + 1;
    a1[4] = (void *)(v32 - 1);
    a1[5] = (void *)v36;
  }
LABEL_50:
  v53 = a1[1];
  if (a1[2] == v53)
    v54 = 0;
  else
    v54 = (char *)(v53[(unint64_t)a1[4] >> 9] + 8 * ((unint64_t)a1[4] & 0x1FF));
  v56 = (char *)&v53[(unint64_t)a1[4] >> 9];
  v57 = v54;
  return std::__deque_iterator<SLToken *,SLToken **,SLToken *&,SLToken ***,long,512l>::operator+[abi:ne180100]((uint64_t)&v56, v11);
}

void **std::deque<SLToken *>::__move_and_check(int a1, char *a2, char *__src, char *a4, char *a5, void **a6, char *__dst, unint64_t *a8)
{
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  BOOL v25;
  char *v27[11];

  if (a5 != __src)
  {
    v27[9] = v8;
    v27[10] = v9;
    v10 = __src;
    v11 = a2;
    v12 = ((uint64_t)&a5[-*(_QWORD *)a4] >> 3) + ((a4 - a2) << 6) - ((uint64_t)&__src[-*(_QWORD *)a2] >> 3);
    if (v12 >= 1)
    {
      do
      {
        v14 = *(_QWORD *)v11;
        v15 = *(_QWORD *)v11 + 4096;
        v16 = (v15 - (uint64_t)v10) >> 3;
        if (v16 >= v12)
          v17 = v12;
        else
          v17 = (v15 - (uint64_t)v10) >> 3;
        if (v16 <= v12)
          v18 = (char *)(*(_QWORD *)v11 + 4096);
        else
          v18 = &v10[8 * v12];
        v19 = *a8;
        if ((unint64_t)v10 <= *a8 && v19 < (unint64_t)v18)
        {
          if (v10 != __dst)
          {
            v21 = (((char *)a6 - v11) << 6) - ((uint64_t)&v10[-v14] >> 3) + ((__dst - (_BYTE *)*a6) >> 3);
            if (v21)
            {
              v22 = v21 + ((uint64_t)(v19 - v14) >> 3);
              if (v22 < 1)
                v19 = *(_QWORD *)&v11[-8 * ((unint64_t)(511 - v22) >> 9)] + 8 * (~(511 - (_WORD)v22) & 0x1FF);
              else
                v19 = *(_QWORD *)&v11[((unint64_t)v22 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v22 & 0x1FF);
            }
          }
          *a8 = v19;
        }
        std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,SLToken **,SLToken **,std::__deque_iterator<SLToken *,SLToken **,SLToken *&,SLToken ***,long,512l>,0>(v10, __dst, v18, a6, v27);
        if (v17)
        {
          v23 = v17 + ((uint64_t)&v10[-*(_QWORD *)v11] >> 3);
          if (v23 < 1)
          {
            v24 = 511 - v23;
            v11 -= 8 * (v24 >> 9);
            v10 = (char *)(*(_QWORD *)v11 + 8 * (~(_WORD)v24 & 0x1FF));
          }
          else
          {
            v11 += 8 * ((unint64_t)v23 >> 9);
            v10 = (char *)(*(_QWORD *)v11 + 8 * (v23 & 0x1FF));
          }
        }
        a6 = (void **)v27[1];
        __dst = v27[2];
        v25 = v12 <= v17;
        v12 -= v17;
      }
      while (!v25);
    }
  }
  return a6;
}

char *std::deque<SLToken *>::__move_backward_and_check(uint64_t a1, char *a2, char *a3, char *a4, char *a5, char *a6, char *a7, unint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD v27[15];

  if (a5 != a3)
  {
    v27[13] = v8;
    v27[14] = v9;
    v10 = a4;
    v11 = ((uint64_t)&a5[-*(_QWORD *)a4] >> 3) + ((a4 - a2) << 6) - ((uint64_t)&a3[-*(_QWORD *)a2] >> 3);
    if (v11 >= 1)
    {
      while (1)
      {
        v13 = *(char **)v10;
        if (a5 == *(char **)v10)
        {
          v14 = (char *)*((_QWORD *)v10 - 1);
          v10 -= 8;
          v13 = v14;
          a5 = v14 + 4096;
        }
        v15 = (uint64_t)(a5 - 8);
        v16 = (a5 - v13) >> 3;
        if (v16 >= v11)
          v17 = v11;
        else
          v17 = (a5 - v13) >> 3;
        if (v16 <= v11)
          v18 = v13;
        else
          v18 = &a5[-8 * v11];
        v19 = *a8;
        v20 = *a8 >= (unint64_t)a5 || (unint64_t)v18 > v19;
        if (v20)
          goto LABEL_23;
        if ((char *)v15 == a7)
          break;
        v21 = ~((v15 - (uint64_t)v13) >> 3) + ((a6 - v10) << 6) + ((uint64_t)&a7[-*(_QWORD *)a6] >> 3);
        if (v21)
          goto LABEL_19;
LABEL_22:
        *a8 = v19;
LABEL_23:
        std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<SLToken **,std::__deque_iterator<SLToken *,SLToken **,SLToken *&,SLToken ***,long,512l>,0>(v18, a5, a6, a7, v27);
        if (v17 != 1)
        {
          v23 = ((v15 - *(_QWORD *)v10) >> 3) - v17;
          if (v23 > 0x7FFFFFFFFFFFFFFELL)
          {
            v25 = 510 - v23;
            v10 -= 8 * (v25 >> 9);
            v15 = *(_QWORD *)v10 + 8 * (~(_WORD)v25 & 0x1FF);
          }
          else
          {
            v24 = v23 + 1;
            v10 += 8 * (v24 >> 9);
            v15 = *(_QWORD *)v10 + 8 * (v24 & 0x1FF);
          }
        }
        a6 = (char *)v27[1];
        a7 = (char *)v27[2];
        a5 = (char *)v15;
        v20 = v11 <= v17;
        v11 -= v17;
        if (v20)
          return a6;
      }
      v21 = -1;
LABEL_19:
      v22 = v21 + ((uint64_t)(v19 - (_QWORD)v13) >> 3);
      if (v22 < 1)
        v19 = *(_QWORD *)&v10[-8 * ((unint64_t)(511 - v22) >> 9)] + 8 * (~(511 - (_WORD)v22) & 0x1FF);
      else
        v19 = *(_QWORD *)&v10[((unint64_t)v22 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v22 & 0x1FF);
      goto LABEL_22;
    }
  }
  return a6;
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

void std::string::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("basic_string");
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24D6708F0, MEMORY[0x24BEDAB00]);
}

void sub_216FC62F8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  return result;
}

char *std::vector<unsigned short>::__insert_with_size[abi:ne180100]<unsigned short *,unsigned short *>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;
  char *v30;
  __int16 v31;
  void *__p;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 1)
  {
    v13 = *(void **)a1;
    if (a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 1) < 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v14 = (__dst - (uint64_t)v13) >> 1;
    v15 = v10 - (_QWORD)v13;
    if (v15 <= a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 1))
      v16 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 1);
    else
      v16 = v15;
    if (v15 >= 0x7FFFFFFFFFFFFFFELL)
      v17 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v17 = v16;
    v37 = v9;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v9, v17);
    else
      v18 = 0;
    v28 = &v18[2 * v14];
    __p = v18;
    v34 = v28;
    v36 = &v18[2 * v17];
    v29 = 2 * a5;
    v30 = &v28[2 * a5];
    do
    {
      v31 = *(_WORD *)v7;
      v7 += 2;
      *(_WORD *)v28 = v31;
      v28 += 2;
      v29 -= 2;
    }
    while (v29);
    v35 = v30;
    v5 = std::vector<unsigned short>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34)
      v35 += (v34 - v35 + 1) & 0xFFFFFFFFFFFFFFFELL;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 1;
  if (v20 >= a5)
  {
    v21 = &__src[2 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_18:
    v24 = &v5[2 * a5];
    v25 = &v23[-2 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_WORD *)v25;
        v25 += 2;
        *(_WORD *)v26 = v27;
        v26 += 2;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-2 * ((v23 - v24) >> 1)], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[2 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[2 * v20], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_18;
  return v5;
}

void sub_216FC64FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned short>::__insert_with_size[abi:ne180100]<unsigned short const*,unsigned short const*>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;
  char *v30;
  __int16 v31;
  void *__p;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 1)
  {
    v13 = *(void **)a1;
    if (a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 1) < 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v14 = (__dst - (uint64_t)v13) >> 1;
    v15 = v10 - (_QWORD)v13;
    if (v15 <= a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 1))
      v16 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 1);
    else
      v16 = v15;
    if (v15 >= 0x7FFFFFFFFFFFFFFELL)
      v17 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v17 = v16;
    v37 = v9;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v9, v17);
    else
      v18 = 0;
    v28 = &v18[2 * v14];
    __p = v18;
    v34 = v28;
    v36 = &v18[2 * v17];
    v29 = 2 * a5;
    v30 = &v28[2 * a5];
    do
    {
      v31 = *(_WORD *)v7;
      v7 += 2;
      *(_WORD *)v28 = v31;
      v28 += 2;
      v29 -= 2;
    }
    while (v29);
    v35 = v30;
    v5 = std::vector<unsigned short>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34)
      v35 += (v34 - v35 + 1) & 0xFFFFFFFFFFFFFFFELL;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 1;
  if (v20 >= a5)
  {
    v21 = &__src[2 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_18:
    v24 = &v5[2 * a5];
    v25 = &v23[-2 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_WORD *)v25;
        v25 += 2;
        *(_WORD *)v26 = v27;
        v26 += 2;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-2 * ((v23 - v24) >> 1)], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[2 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[2 * v20], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_18;
  return v5;
}

void sub_216FC6700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<unsigned short>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int16 v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 1)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 2 * a2);
      v7 += 2 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 1);
    if (v10 < 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 1;
    v12 = v5 - v8;
    if (v12 > v10)
      v10 = v12;
    if (v12 >= 0x7FFFFFFFFFFFFFFELL)
      v13 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[2 * v11];
    v16 = &v14[2 * v13];
    bzero(v15, 2 * a2);
    v17 = &v15[2 * a2];
    while (v7 != v8)
    {
      v18 = *((_WORD *)v7 - 1);
      v7 -= 2;
      *((_WORD *)v15 - 1) = v18;
      v15 -= 2;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void std::__split_buffer<unsigned short>::push_back(_QWORD *a1, _WORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  __int16 *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  __int16 v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (unint64_t)&v4[-*a1];
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(a1[4], v16);
      v19 = &v17[2 * (v16 >> 2)];
      v20 = (__int16 *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFFELL];
        v22 = 2 * (v21 >> 1);
        v23 = &v17[2 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_WORD *)v23 = v24;
          v23 += 2;
          v22 -= 2;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[2 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 1;
      v8 = v6 >> 1 < -1;
      v9 = (v6 >> 1) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 & 0xFFFFFFFFFFFFFFFELL;
      v13 = &v5[-v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[2 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
    }
  }
  *(_WORD *)v4 = *a2;
  a1[2] = v4 + 2;
}

_QWORD *std::vector<unsigned char>::vector(_QWORD *a1, size_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned char>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_216FC6994(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t SLPronouncerEng::URLBoundary(uint64_t a1, unsigned int a2)
{
  unint64_t v2;

  v2 = 0x100E0E0B0FuLL >> (8 * a2);
  if (a2 >= 5)
    LOBYTE(v2) = 15;
  return v2 & 0x1F;
}

void SLPronouncerEng::MakePlural(SLPronouncerEng *this, SLToken *a2)
{
  __int16 *v3;
  void **v4;
  __int16 *v5;
  __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int16 v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  __int16 *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int16 v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  __int16 v26;
  char *v27;
  char *v28;
  __int16 *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  __int16 v37;
  _WORD *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  __int16 v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  char *v53;
  int v54;
  unint64_t v55;
  char v56;
  unint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  unint64_t v61;
  unint64_t v62;
  size_t v63;
  void *v64;
  char *v65;
  char *v66;
  unint64_t v67;
  unint64_t v68;
  size_t v69;
  void *v70;
  char *v71;
  char *v72;
  unint64_t v73;
  unint64_t v74;
  size_t v75;
  char *v76;
  char *v77;
  char v78;
  unint64_t v79;
  char *v80;
  char *v81;
  unint64_t v82;
  unint64_t v83;
  size_t v84;
  void *v85;
  char *v86;
  char *v87;
  char v88;
  unint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  unint64_t v93;
  unint64_t v94;
  size_t v95;
  char *v96;
  char *v97;
  char *v98;
  char v99;
  char *v100;
  char v101;
  char *v102;
  char v103;

  v3 = (__int16 *)*((_QWORD *)a2 + 7);
  v5 = (__int16 *)*((_QWORD *)a2 + 8);
  v4 = (void **)((char *)a2 + 56);
  v6 = v5 - 1;
  *((_QWORD *)a2 + 8) = v5 - 1;
  v7 = (char *)(v5 - 1) - (char *)v3;
  v8 = v7 >> 1;
  if ((unint64_t)v7 > 3)
  {
    switch(*(v5 - 2))
    {
      case 'S':
      case 'X':
      case 'Z':
        goto LABEL_18;
      case 'T':
      case 'U':
      case 'V':
      case 'W':
        goto LABEL_38;
      case 'Y':
        *(v5 - 2) = 73;
        goto LABEL_18;
      default:
        if (*(v5 - 2) != 72 || ((unsigned __int16)v3[v8 - 2] | 0x10) != 0x53)
          goto LABEL_38;
LABEL_18:
        v20 = *((_QWORD *)a2 + 9);
        if ((unint64_t)v6 < v20)
        {
          v10 = 69;
          goto LABEL_20;
        }
        if (v7 <= -3)
          goto LABEL_164;
        v21 = v20 - (_QWORD)v3;
        if (v21 <= v8 + 1)
          v22 = v8 + 1;
        else
          v22 = v21;
        if (v21 >= 0x7FFFFFFFFFFFFFFELL)
          v23 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v23 = v22;
        if (v23)
        {
          v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)a2 + 72, v23);
          v3 = (__int16 *)*((_QWORD *)a2 + 7);
          v6 = (__int16 *)*((_QWORD *)a2 + 8);
        }
        else
        {
          v24 = 0;
        }
        v25 = &v24[2 * v8];
        v18 = &v24[2 * v23];
        *(_WORD *)v25 = 69;
        v5 = (__int16 *)(v25 + 2);
        while (v6 != v3)
        {
          v26 = *--v6;
          *((_WORD *)v25 - 1) = v26;
          v25 -= 2;
        }
        *((_QWORD *)a2 + 7) = v25;
        break;
    }
    goto LABEL_35;
  }
  v9 = *((_QWORD *)a2 + 9);
  if ((unint64_t)v6 >= v9)
  {
    v11 = v9 - (_QWORD)v3;
    if (v11 <= v8 + 1)
      v12 = v8 + 1;
    else
      v12 = v11;
    if (v11 >= 0x7FFFFFFFFFFFFFFELL)
      v13 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)a2 + 72, v13);
    v3 = (__int16 *)*((_QWORD *)a2 + 7);
    v15 = (__int16 *)*((_QWORD *)a2 + 8);
    v16 = &v14[2 * v8];
    v18 = &v14[2 * v17];
    *(_WORD *)v16 = 39;
    v5 = (__int16 *)(v16 + 2);
    while (v15 != v3)
    {
      v19 = *--v15;
      *((_WORD *)v16 - 1) = v19;
      v16 -= 2;
    }
    *((_QWORD *)a2 + 7) = v16;
LABEL_35:
    *((_QWORD *)a2 + 8) = v5;
    *((_QWORD *)a2 + 9) = v18;
    if (v3)
      operator delete(v3);
    goto LABEL_37;
  }
  v10 = 39;
LABEL_20:
  *v6 = v10;
LABEL_37:
  *((_QWORD *)a2 + 8) = v5;
  v6 = v5;
LABEL_38:
  v27 = (char *)*((_QWORD *)a2 + 9);
  if (v6 >= (__int16 *)v27)
  {
    v29 = (__int16 *)*v4;
    v30 = (char *)v6 - (_BYTE *)*v4;
    if (v30 <= -3)
      goto LABEL_164;
    v31 = v30 >> 1;
    v32 = v27 - (char *)v29;
    if (v32 <= (v30 >> 1) + 1)
      v33 = v31 + 1;
    else
      v33 = v32;
    if (v32 >= 0x7FFFFFFFFFFFFFFELL)
      v34 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v34 = v33;
    if (v34)
    {
      v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)a2 + 72, v34);
      v29 = (__int16 *)*((_QWORD *)a2 + 7);
      v6 = (__int16 *)*((_QWORD *)a2 + 8);
    }
    else
    {
      v35 = 0;
    }
    v36 = &v35[2 * v31];
    v27 = &v35[2 * v34];
    *(_WORD *)v36 = 83;
    v28 = v36 + 2;
    while (v6 != v29)
    {
      v37 = *--v6;
      *((_WORD *)v36 - 1) = v37;
      v36 -= 2;
    }
    *((_QWORD *)a2 + 7) = v36;
    *((_QWORD *)a2 + 8) = v28;
    *((_QWORD *)a2 + 9) = v27;
    if (v29)
    {
      operator delete(v29);
      v27 = (char *)*((_QWORD *)a2 + 9);
    }
  }
  else
  {
    *v6 = 83;
    v28 = (char *)(v6 + 1);
  }
  *((_QWORD *)a2 + 8) = v28;
  if (v28 < v27)
  {
    *(_WORD *)v28 = 0;
    v38 = v28 + 2;
    goto LABEL_72;
  }
  v39 = (char *)*v4;
  v40 = v28 - (_BYTE *)*v4;
  if (v40 <= -3)
LABEL_164:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v41 = v40 >> 1;
  v42 = v27 - v39;
  if (v42 <= (v40 >> 1) + 1)
    v43 = v41 + 1;
  else
    v43 = v42;
  if (v42 >= 0x7FFFFFFFFFFFFFFELL)
    v44 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v44 = v43;
  if (v44)
  {
    v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)a2 + 72, v44);
    v39 = (char *)*((_QWORD *)a2 + 7);
    v28 = (char *)*((_QWORD *)a2 + 8);
  }
  else
  {
    v45 = 0;
  }
  v46 = &v45[2 * v41];
  v47 = &v45[2 * v44];
  *(_WORD *)v46 = 0;
  v38 = v46 + 2;
  while (v28 != v39)
  {
    v48 = *((_WORD *)v28 - 1);
    v28 -= 2;
    *((_WORD *)v46 - 1) = v48;
    v46 -= 2;
  }
  *((_QWORD *)a2 + 7) = v46;
  *((_QWORD *)a2 + 8) = v38;
  *((_QWORD *)a2 + 9) = v47;
  if (v39)
    operator delete(v39);
LABEL_72:
  *((_QWORD *)a2 + 8) = v38;
  v49 = *((_QWORD *)a2 + 10);
  if (*((_QWORD *)a2 + 11) != v49)
  {
    v50 = 0;
    while (1)
    {
      v51 = *(_QWORD *)(v49 + 8 * v50);
      v52 = (_QWORD *)(v51 + 32);
      v53 = *(char **)(v51 + 40);
      v54 = SLPhonEng::sFlags[*(v53 - 1)];
      if ((v54 & 0x20000) != 0 || (v54 & 0x8002000) == 0x8002000)
        break;
      v55 = *(_QWORD *)(v51 + 48);
      if ((SLPhonEng::sFlags[*(v53 - 1)] & 6) != 2)
      {
        if ((unint64_t)v53 >= v55)
        {
          v59 = (char *)*v52;
          v60 = &v53[-*v52];
          v61 = (unint64_t)(v60 + 1);
          if ((uint64_t)(v60 + 1) < 0)
            goto LABEL_163;
          v62 = v55 - (_QWORD)v59;
          if (2 * v62 > v61)
            v61 = 2 * v62;
          if (v62 >= 0x3FFFFFFFFFFFFFFFLL)
            v63 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v63 = v61;
          if (v63)
            v64 = operator new(v63);
          else
            v64 = 0;
          v96 = &v60[(_QWORD)v64];
          v97 = (char *)v64 + v63;
          v60[(_QWORD)v64] = 43;
          v90 = (uint64_t)&v60[(_QWORD)v64 + 1];
          if (v53 == v59)
            goto LABEL_159;
          v100 = &v53[~(unint64_t)v59];
          do
          {
            v101 = *--v53;
            (v100--)[(_QWORD)v64] = v101;
          }
          while (v53 != v59);
LABEL_157:
          v53 = *(char **)(v51 + 32);
          *(_QWORD *)(v51 + 32) = v64;
          *(_QWORD *)(v51 + 40) = v90;
          *(_QWORD *)(v51 + 48) = v97;
          if (!v53)
            goto LABEL_161;
          goto LABEL_160;
        }
        goto LABEL_133;
      }
      if ((unint64_t)v53 >= v55)
      {
        v71 = (char *)*v52;
        v72 = &v53[-*v52];
        v73 = (unint64_t)(v72 + 1);
        if ((uint64_t)(v72 + 1) < 0)
          goto LABEL_163;
        v74 = v55 - (_QWORD)v71;
        if (2 * v74 > v73)
          v73 = 2 * v74;
        if (v74 >= 0x3FFFFFFFFFFFFFFFLL)
          v75 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v75 = v73;
        if (v75)
          v64 = operator new(v75);
        else
          v64 = 0;
        v96 = &v72[(_QWORD)v64];
        v97 = (char *)v64 + v75;
        v72[(_QWORD)v64] = 42;
        v90 = (uint64_t)&v72[(_QWORD)v64 + 1];
        if (v53 == v71)
          goto LABEL_159;
        v102 = &v53[~(unint64_t)v71];
        do
        {
          v103 = *--v53;
          (v102--)[(_QWORD)v64] = v103;
        }
        while (v53 != v71);
        goto LABEL_157;
      }
      v56 = 42;
LABEL_134:
      *v53 = v56;
      v90 = (uint64_t)(v53 + 1);
LABEL_161:
      *(_QWORD *)(v51 + 40) = v90;
      *(_DWORD *)v51 = 1;
      ++v50;
      v49 = *((_QWORD *)a2 + 10);
      if (v50 >= (*((_QWORD *)a2 + 11) - v49) >> 3)
        return;
    }
    v57 = *(_QWORD *)(v51 + 48);
    if ((unint64_t)v53 < v57)
    {
      *v53 = 60;
      v58 = v53 + 1;
      goto LABEL_114;
    }
    v65 = (char *)*v52;
    v66 = &v53[-*v52];
    v67 = (unint64_t)(v66 + 1);
    if ((uint64_t)(v66 + 1) < 0)
      goto LABEL_163;
    v68 = v57 - (_QWORD)v65;
    if (2 * v68 > v67)
      v67 = 2 * v68;
    if (v68 >= 0x3FFFFFFFFFFFFFFFLL)
      v69 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v69 = v67;
    if (v69)
      v70 = operator new(v69);
    else
      v70 = 0;
    v76 = (char *)v70 + v69;
    v66[(_QWORD)v70] = 60;
    v58 = &v66[(_QWORD)v70 + 1];
    if (v53 == v65)
    {
      *(_QWORD *)(v51 + 32) = &v66[(_QWORD)v70];
      *(_QWORD *)(v51 + 40) = v58;
      *(_QWORD *)(v51 + 48) = v76;
    }
    else
    {
      v77 = &v53[~(unint64_t)v65];
      do
      {
        v78 = *--v53;
        (v77--)[(_QWORD)v70] = v78;
      }
      while (v53 != v65);
      v53 = *(char **)(v51 + 32);
      *(_QWORD *)(v51 + 32) = v70;
      *(_QWORD *)(v51 + 40) = v58;
      *(_QWORD *)(v51 + 48) = v76;
      if (!v53)
      {
LABEL_114:
        *(_QWORD *)(v51 + 40) = v58;
        v79 = *(_QWORD *)(v51 + 48);
        if ((unint64_t)v58 < v79)
        {
          *v58 = 25;
          v53 = v58 + 1;
          goto LABEL_132;
        }
        v80 = (char *)*v52;
        v81 = &v58[-*v52];
        v82 = (unint64_t)(v81 + 1);
        if ((uint64_t)(v81 + 1) < 0)
          goto LABEL_163;
        v83 = v79 - (_QWORD)v80;
        if (2 * v83 > v82)
          v82 = 2 * v83;
        if (v83 >= 0x3FFFFFFFFFFFFFFFLL)
          v84 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v84 = v82;
        if (v84)
          v85 = operator new(v84);
        else
          v85 = 0;
        v86 = (char *)v85 + v84;
        v81[(_QWORD)v85] = 25;
        v53 = &v81[(_QWORD)v85 + 1];
        if (v58 == v80)
        {
          *(_QWORD *)(v51 + 32) = &v81[(_QWORD)v85];
          *(_QWORD *)(v51 + 40) = v53;
          *(_QWORD *)(v51 + 48) = v86;
        }
        else
        {
          v87 = &v58[~(unint64_t)v80];
          do
          {
            v88 = *--v58;
            (v87--)[(_QWORD)v85] = v88;
          }
          while (v58 != v80);
          v58 = *(char **)(v51 + 32);
          *(_QWORD *)(v51 + 32) = v85;
          *(_QWORD *)(v51 + 40) = v53;
          *(_QWORD *)(v51 + 48) = v86;
          if (!v58)
          {
LABEL_132:
            *(_QWORD *)(v51 + 40) = v53;
            v89 = *(_QWORD *)(v51 + 48);
            if ((unint64_t)v53 >= v89)
            {
              v91 = (char *)*v52;
              v92 = &v53[-*v52];
              v93 = (unint64_t)(v92 + 1);
              if ((uint64_t)(v92 + 1) < 0)
LABEL_163:
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              v94 = v89 - (_QWORD)v91;
              if (2 * v94 > v93)
                v93 = 2 * v94;
              if (v94 >= 0x3FFFFFFFFFFFFFFFLL)
                v95 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v95 = v93;
              if (v95)
                v64 = operator new(v95);
              else
                v64 = 0;
              v96 = &v92[(_QWORD)v64];
              v97 = (char *)v64 + v95;
              v92[(_QWORD)v64] = 43;
              v90 = (uint64_t)&v92[(_QWORD)v64 + 1];
              if (v53 != v91)
              {
                v98 = &v53[~(unint64_t)v91];
                do
                {
                  v99 = *--v53;
                  (v98--)[(_QWORD)v64] = v99;
                }
                while (v53 != v91);
                goto LABEL_157;
              }
LABEL_159:
              *(_QWORD *)(v51 + 32) = v96;
              *(_QWORD *)(v51 + 40) = v90;
              *(_QWORD *)(v51 + 48) = v97;
LABEL_160:
              operator delete(v53);
              goto LABEL_161;
            }
LABEL_133:
            v56 = 43;
            goto LABEL_134;
          }
        }
        operator delete(v58);
        goto LABEL_132;
      }
    }
    operator delete(v53);
    goto LABEL_114;
  }
}

void SLPronouncerEng::MakePossessive(SLPronouncerEng *this, SLToken *a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  int v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  void *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  void *v24;
  char *v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  size_t v29;
  char *v30;
  char *v31;
  char v32;
  unint64_t v33;
  char *v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  size_t v38;
  void *v39;
  char *v40;
  char *v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  size_t v49;
  char *v50;
  char *v51;
  char *v52;
  char v53;
  char *v54;
  char v55;
  char *v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;

  v2 = *((_QWORD *)a2 + 10);
  if (*((_QWORD *)a2 + 11) != v2)
  {
    v4 = 0;
    while (1)
    {
      v5 = *(_QWORD *)(v2 + 8 * v4);
      v6 = (_QWORD *)(v5 + 32);
      v7 = *(char **)(v5 + 40);
      v8 = SLPhonEng::sFlags[*(v7 - 1)];
      if ((v8 & 0x20000) != 0 || (v8 & 0x8002000) == 0x8002000)
        break;
      v9 = *(_QWORD *)(v5 + 48);
      if ((SLPhonEng::sFlags[*(v7 - 1)] & 6) != 2)
      {
        if ((unint64_t)v7 >= v9)
        {
          v13 = (char *)*v6;
          v14 = &v7[-*v6];
          v15 = (unint64_t)(v14 + 1);
          if ((uint64_t)(v14 + 1) < 0)
            goto LABEL_94;
          v16 = v9 - (_QWORD)v13;
          if (2 * v16 > v15)
            v15 = 2 * v16;
          if (v16 >= 0x3FFFFFFFFFFFFFFFLL)
            v17 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v17 = v15;
          if (v17)
            v18 = operator new(v17);
          else
            v18 = 0;
          v50 = &v14[(_QWORD)v18];
          v51 = (char *)v18 + v17;
          v14[(_QWORD)v18] = 43;
          v44 = (uint64_t)&v14[(_QWORD)v18 + 1];
          if (v7 == v13)
            goto LABEL_88;
          v54 = &v7[~(unint64_t)v13];
          do
          {
            v55 = *--v7;
            (v54--)[(_QWORD)v18] = v55;
          }
          while (v7 != v13);
LABEL_86:
          v7 = *(char **)(v5 + 32);
          *(_QWORD *)(v5 + 32) = v18;
          *(_QWORD *)(v5 + 40) = v44;
          *(_QWORD *)(v5 + 48) = v51;
          if (!v7)
            goto LABEL_90;
          goto LABEL_89;
        }
        goto LABEL_62;
      }
      if ((unint64_t)v7 >= v9)
      {
        v25 = (char *)*v6;
        v26 = &v7[-*v6];
        v27 = (unint64_t)(v26 + 1);
        if ((uint64_t)(v26 + 1) < 0)
          goto LABEL_94;
        v28 = v9 - (_QWORD)v25;
        if (2 * v28 > v27)
          v27 = 2 * v28;
        if (v28 >= 0x3FFFFFFFFFFFFFFFLL)
          v29 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v29 = v27;
        if (v29)
          v18 = operator new(v29);
        else
          v18 = 0;
        v50 = &v26[(_QWORD)v18];
        v51 = (char *)v18 + v29;
        v26[(_QWORD)v18] = 42;
        v44 = (uint64_t)&v26[(_QWORD)v18 + 1];
        if (v7 == v25)
          goto LABEL_88;
        v56 = &v7[~(unint64_t)v25];
        do
        {
          v57 = *--v7;
          (v56--)[(_QWORD)v18] = v57;
        }
        while (v7 != v25);
        goto LABEL_86;
      }
      v10 = 42;
LABEL_63:
      *v7 = v10;
      v44 = (uint64_t)(v7 + 1);
LABEL_90:
      v60 = *(unsigned __int16 *)(v5 + 4);
      v59 = v5 + 4;
      v58 = v60;
      *(_QWORD *)(v59 + 36) = v44;
      if (v60 <= 6)
      {
        v61 = v58 + 1;
        *(_WORD *)v59 = v61;
        *(_WORD *)(v59 + 2 * v61) = 84;
      }
      ++v4;
      v2 = *((_QWORD *)a2 + 10);
      if (v4 >= (*((_QWORD *)a2 + 11) - v2) >> 3)
        return;
    }
    v11 = *(_QWORD *)(v5 + 48);
    if ((unint64_t)v7 < v11)
    {
      *v7 = 60;
      v12 = v7 + 1;
      goto LABEL_43;
    }
    v19 = (char *)*v6;
    v20 = &v7[-*v6];
    v21 = (unint64_t)(v20 + 1);
    if ((uint64_t)(v20 + 1) < 0)
      goto LABEL_94;
    v22 = v11 - (_QWORD)v19;
    if (2 * v22 > v21)
      v21 = 2 * v22;
    if (v22 >= 0x3FFFFFFFFFFFFFFFLL)
      v23 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v23 = v21;
    if (v23)
      v24 = operator new(v23);
    else
      v24 = 0;
    v30 = (char *)v24 + v23;
    v20[(_QWORD)v24] = 60;
    v12 = &v20[(_QWORD)v24 + 1];
    if (v7 == v19)
    {
      *(_QWORD *)(v5 + 32) = &v20[(_QWORD)v24];
      *(_QWORD *)(v5 + 40) = v12;
      *(_QWORD *)(v5 + 48) = v30;
    }
    else
    {
      v31 = &v7[~(unint64_t)v19];
      do
      {
        v32 = *--v7;
        (v31--)[(_QWORD)v24] = v32;
      }
      while (v7 != v19);
      v7 = *(char **)(v5 + 32);
      *(_QWORD *)(v5 + 32) = v24;
      *(_QWORD *)(v5 + 40) = v12;
      *(_QWORD *)(v5 + 48) = v30;
      if (!v7)
      {
LABEL_43:
        *(_QWORD *)(v5 + 40) = v12;
        v33 = *(_QWORD *)(v5 + 48);
        if ((unint64_t)v12 < v33)
        {
          *v12 = 25;
          v7 = v12 + 1;
          goto LABEL_61;
        }
        v34 = (char *)*v6;
        v35 = &v12[-*v6];
        v36 = (unint64_t)(v35 + 1);
        if ((uint64_t)(v35 + 1) < 0)
          goto LABEL_94;
        v37 = v33 - (_QWORD)v34;
        if (2 * v37 > v36)
          v36 = 2 * v37;
        if (v37 >= 0x3FFFFFFFFFFFFFFFLL)
          v38 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v38 = v36;
        if (v38)
          v39 = operator new(v38);
        else
          v39 = 0;
        v40 = (char *)v39 + v38;
        v35[(_QWORD)v39] = 25;
        v7 = &v35[(_QWORD)v39 + 1];
        if (v12 == v34)
        {
          *(_QWORD *)(v5 + 32) = &v35[(_QWORD)v39];
          *(_QWORD *)(v5 + 40) = v7;
          *(_QWORD *)(v5 + 48) = v40;
        }
        else
        {
          v41 = &v12[~(unint64_t)v34];
          do
          {
            v42 = *--v12;
            (v41--)[(_QWORD)v39] = v42;
          }
          while (v12 != v34);
          v12 = *(char **)(v5 + 32);
          *(_QWORD *)(v5 + 32) = v39;
          *(_QWORD *)(v5 + 40) = v7;
          *(_QWORD *)(v5 + 48) = v40;
          if (!v12)
          {
LABEL_61:
            *(_QWORD *)(v5 + 40) = v7;
            v43 = *(_QWORD *)(v5 + 48);
            if ((unint64_t)v7 >= v43)
            {
              v45 = (char *)*v6;
              v46 = &v7[-*v6];
              v47 = (unint64_t)(v46 + 1);
              if ((uint64_t)(v46 + 1) < 0)
LABEL_94:
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              v48 = v43 - (_QWORD)v45;
              if (2 * v48 > v47)
                v47 = 2 * v48;
              if (v48 >= 0x3FFFFFFFFFFFFFFFLL)
                v49 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v49 = v47;
              if (v49)
                v18 = operator new(v49);
              else
                v18 = 0;
              v50 = &v46[(_QWORD)v18];
              v51 = (char *)v18 + v49;
              v46[(_QWORD)v18] = 43;
              v44 = (uint64_t)&v46[(_QWORD)v18 + 1];
              if (v7 != v45)
              {
                v52 = &v7[~(unint64_t)v45];
                do
                {
                  v53 = *--v7;
                  (v52--)[(_QWORD)v18] = v53;
                }
                while (v7 != v45);
                goto LABEL_86;
              }
LABEL_88:
              *(_QWORD *)(v5 + 32) = v50;
              *(_QWORD *)(v5 + 40) = v44;
              *(_QWORD *)(v5 + 48) = v51;
LABEL_89:
              operator delete(v7);
              goto LABEL_90;
            }
LABEL_62:
            v10 = 43;
            goto LABEL_63;
          }
        }
        operator delete(v12);
        goto LABEL_61;
      }
    }
    operator delete(v7);
    goto LABEL_43;
  }
}

uint64_t SLPronouncerEng::Month(SLPronouncerEng *this, uint64_t a2)
{
  if ((unint64_t)(a2 - 1) > 0xB)
    return 0;
  else
    return (*(uint64_t (**)(SLPronouncerEng *, uint64_t))(*(_QWORD *)this + 216))(this, a2 + 354);
}

uint64_t SLPronouncerEng::MakePluralUnit(SLPronouncerEng *this, SLToken *a2, char **a3)
{
  uint64_t v5;
  char **v6;
  unint64_t v7;
  _DWORD *v8;
  SLWordTagSet *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  _WORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  const void *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  _WORD v35[8];

  v35[0] = 0;
  SLToken::SelectHomographs(a2, 1, (const SLWordTagSet *)v35);
  v35[0] = 0;
  if ((SLToken::SelectHomographs((SLToken *)a3, 64, (const SLWordTagSet *)v35) & 1) == 0)
  {
    v35[0] = 0;
    SLToken::SelectHomographs((SLToken *)a3, 1, (const SLWordTagSet *)v35);
  }
  v5 = *((_QWORD *)a2 + 10);
  v6 = (char **)((char *)a2 + 80);
  if (*((_QWORD *)a2 + 11) != v5)
  {
    v7 = 0;
    do
    {
      v8 = *(_DWORD **)(v5 + 8 * v7);
      *v8 = 1;
      v9 = (SLWordTagSet *)(v8 + 1);
      if (!SLWordTagSet::find(v9, 86))
      {
        v10 = *(unsigned __int16 *)v9;
        if (v10 <= 6)
        {
          v11 = v10 + 1;
          *(_WORD *)v9 = v11;
          *((_WORD *)v9 + v11) = 86;
        }
      }
      ++v7;
      v5 = *((_QWORD *)a2 + 10);
    }
    while (v7 < (*((_QWORD *)a2 + 11) - v5) >> 3);
  }
  v12 = (uint64_t)a3[11];
  if ((char *)v12 != a3[10])
  {
    do
    {
      v13 = *(_DWORD **)(v12 - 8);
      *v13 = 64;
      v14 = v13 + 1;
      if (!SLWordTagSet::find((SLWordTagSet *)(v13 + 1), 86))
      {
        v15 = (unsigned __int16)*v14;
        if (v15 <= 6)
        {
          v16 = v15 + 1;
          *v14 = v16;
          v14[v16] = 86;
        }
      }
      v18 = (_QWORD *)*((_QWORD *)a2 + 11);
      v17 = *((_QWORD *)a2 + 12);
      if ((unint64_t)v18 >= v17)
      {
        v20 = ((char *)v18 - *v6) >> 3;
        if ((unint64_t)(v20 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v21 = v17 - (_QWORD)*v6;
        v22 = v21 >> 2;
        if (v21 >> 2 <= (unint64_t)(v20 + 1))
          v22 = v20 + 1;
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
          v23 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v23 = v22;
        if (v23)
          v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SLHomograph *>>((uint64_t)a2 + 96, v23);
        else
          v24 = 0;
        v25 = &v24[8 * v20];
        *(_QWORD *)v25 = v13;
        v19 = v25 + 8;
        v27 = (char *)*((_QWORD *)a2 + 10);
        v26 = (char *)*((_QWORD *)a2 + 11);
        if (v26 != v27)
        {
          do
          {
            v28 = *((_QWORD *)v26 - 1);
            v26 -= 8;
            *((_QWORD *)v25 - 1) = v28;
            v25 -= 8;
          }
          while (v26 != v27);
          v26 = *v6;
        }
        *((_QWORD *)a2 + 10) = v25;
        *((_QWORD *)a2 + 11) = v19;
        *((_QWORD *)a2 + 12) = &v24[8 * v23];
        if (v26)
          operator delete(v26);
      }
      else
      {
        *v18 = v13;
        v19 = v18 + 1;
      }
      *((_QWORD *)a2 + 11) = v19;
      v29 = a3[10];
      v12 = (uint64_t)(a3[11] - 8);
      a3[11] = (char *)v12;
    }
    while ((char *)v12 != v29);
  }
  v30 = (const void *)*((_QWORD *)a2 + 7);
  v32 = *((_QWORD *)a2 + 8);
  v31 = (char *)a2 + 56;
  v33 = a3[7];
  if (memcmp(v30, v33, v32 - (_QWORD)v30))
  {
    *(_WORD *)(v32 - 2) = 124;
    std::vector<unsigned short>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned short *>,std::__wrap_iter<unsigned short *>>((uint64_t)v31, v32, v33, a3[8], (a3[8] - v33) >> 1);
  }
  SLToken::~SLToken((SLToken *)a3);
  return MEMORY[0x219A0649C]();
}

_QWORD *SLCreatePronouncerEng(const SLDictLookup *a1)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_24D6834E0;
  result[1] = a1;
  return result;
}

void SLPronouncerEng::~SLPronouncerEng(SLPronouncerEng *this)
{
  SLPronouncer::~SLPronouncer(this);
  JUMPOUT(0x219A0649CLL);
}

uint64_t SLPronouncerEng::NumericBoundary(SLPronouncerEng *this, int a2)
{
  if (a2)
    return 14;
  else
    return 15;
}

uint64_t SLPronouncerEng::Symbol(SLPronouncerEng *this, char *__s1)
{
  return SLPronouncerImpl::SymbolLookup((uint64_t)this, (uint64_t)&SLPronouncerEng::sSymbolIndex, 0x7BEuLL, __s1);
}

char **SLPronouncerEng::SymbolByKey(SLPronouncerEng *this, unint64_t a2)
{
  if (a2 > 0x82A)
    return 0;
  if ((&SLPronouncerEng::sSymbols)[2 * a2])
    return &(&SLPronouncerEng::sSymbols)[2 * a2];
  return 0;
}

uint64_t SLPronouncerEng::SymbolCount(SLPronouncerEng *this)
{
  return 2091;
}

uint64_t SLPronouncerEng::TimeBoundary(SLPronouncerEng *this, int a2)
{
  if (a2)
    return 15;
  else
    return 13;
}

void SLChar::PushUTF8(std::string *this, unsigned int a2)
{
  unsigned int v2;

  v2 = a2;
  if (a2 > 0x7F)
  {
    if (a2 > 0x7FF)
    {
      std::string::push_back(this, (a2 >> 12) | 0xE0);
      std::string::push_back(this, (v2 >> 6) & 0x3F | 0x80);
    }
    else
    {
      std::string::push_back(this, (a2 >> 6) | 0xC0);
    }
    LOBYTE(v2) = v2 & 0x3F | 0x80;
  }
  std::string::push_back(this, v2);
}

void SLChar::PushUTF8(std::string *this, unsigned int a2, unsigned int a3)
{
  unsigned int v5;

  if ((unsigned __int16)((unsigned __int16)(a2 + 9216) >> 10) < 0x3Fu
    || (unsigned __int16)((unsigned __int16)(a3 + 0x2000) >> 10) <= 0x3Eu)
  {
    SLChar::PushUTF8(this, a2);
    SLChar::PushUTF8(this, a3);
  }
  else
  {
    v5 = (((a2 << 10) | 0x10000) - 56623104) | (a3 - 56320);
    std::string::push_back(this, (v5 >> 18) | 0xF0);
    std::string::push_back(this, (v5 >> 12) & 0x3F | 0x80);
    std::string::push_back(this, (v5 >> 6) & 0x3F | 0x80);
    std::string::push_back(this, a3 & 0x3F | 0x80);
  }
}

SLPostLexerEng *SLCreatePostLexerEng(SLLexer *a1, SLDictLookup *a2, SLPronouncer *a3, char a4)
{
  SLPostLexerEng *v8;

  v8 = (SLPostLexerEng *)operator new();
  SLPostLexerEng::SLPostLexerEng(v8, a1, a2, a3, a4);
  return v8;
}

void sub_216FC7A18(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A0649C](v1, 0x10F3C40ACABD4A7);
  _Unwind_Resume(a1);
}

void SLPostLexerEng::SLPostLexerEng(SLPostLexerEng *this, SLLexer *a2, SLDictLookup *a3, SLPronouncer *a4, char a5)
{
  _QWORD *v6;

  SLPostLexerImpl::SLPostLexerImpl(this, a2, a3, a4, a5);
  *v6 = off_24D683638;
  v6[12] = &unk_24D683720;
  *((_QWORD *)this + 25) = SLPhonTranslator::Create((uint64_t)&sSLIPAMapEngRules, 207, (uint64_t)&sSLIPAMapEngIndex);
  *((_QWORD *)this + 26) = SLPhonTranslator::Create((uint64_t)&sSLOxAmMapEngRules, 207, (uint64_t)&sSLOxAmMapEngIndex);
}

void sub_216FC7AB0(_Unwind_Exception *a1)
{
  SLPostLexerImpl *v1;

  SLPostLexerImpl::~SLPostLexerImpl(v1);
  _Unwind_Resume(a1);
}

void SLPostLexerEng::~SLPostLexerEng(SLPostLexerEng *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_24D683638;
  *((_QWORD *)this + 12) = &unk_24D683720;
  v2 = *((_QWORD *)this + 25);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 26);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  SLPostLexerImpl::~SLPostLexerImpl(this);
}

{
  SLPostLexerEng::~SLPostLexerEng(this);
  JUMPOUT(0x219A0649CLL);
}

void `non-virtual thunk to'SLPostLexerEng::~SLPostLexerEng(SLPostLexerEng *this)
{
  SLPostLexerEng::~SLPostLexerEng((SLPostLexerEng *)((char *)this - 96));
}

{
  SLPostLexerEng::~SLPostLexerEng((SLPostLexerEng *)((char *)this - 96));
  JUMPOUT(0x219A0649CLL);
}

BOOL SLPostLexerEng::SingleLetterWordAtEnd(SLPostLexerEng *this, int a2)
{
  return a2 == 73;
}

uint64_t SLPostLexerEng::SingleLetterWordAsPrefix(SLPostLexerEng *this, unsigned int a2, int a3)
{
  if ((unsigned __int16)(SLChar::sToUpper[a2 & 0x3F | (SLChar::sUniMap[(unint64_t)a2 >> 6] << 6)] + a2) == 65)
    return a3 ^ 1u;
  else
    return 0;
}

BOOL SLPostLexerEng::SingleLetterWordAsInfix(SLPostLexerEng *this, unsigned int a2)
{
  return (unsigned __int16)(SLChar::sToUpper[a2 & 0x3F | (SLChar::sUniMap[(unint64_t)a2 >> 6] << 6)] + a2) == 65;
}

void SLPostLexerEng::HandlePunct(SLPostLexerEng *this, SLToken *a2)
{
  unsigned int v4;
  char v5;
  char v6;
  uint64_t (***v7)(_QWORD);
  int v8;
  char v9;
  uint64_t (***v10)(_QWORD);
  uint64_t (***v11)(_QWORD);
  unint64_t v12;
  char *v13;
  char *v14;
  _WORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  __int16 v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  size_t v34;
  char *v35;
  char *v36;
  char *v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  unint64_t v43;
  unint64_t v44;
  size_t v45;
  void *v46;
  char *v47;
  char *v48;
  char v49;
  unint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  SLToken *v64;

  v4 = **((unsigned __int16 **)a2 + 7);
  if (v4 <= 0x3E)
  {
    if (**((unsigned __int16 **)a2 + 7) > 0x39u)
    {
      if (v4 - 58 >= 2)
        goto LABEL_105;
    }
    else
    {
      v5 = 6;
      v6 = 70;
      switch(**((_WORD **)a2 + 7))
      {
        case ',':
          v7 = SLLexerBuffer::operator[]((_QWORD *)this + 12, 0);
          if (v7 && *(_BYTE *)v7 == 1 && (*((_BYTE *)a2 + 16) & 1) == 0)
            *((_DWORD *)v7 + 4) |= 0x80u;
          goto LABEL_27;
        case '-':
          goto LABEL_10;
        case '.':
          goto LABEL_34;
        case '/':
          if ((~*((_DWORD *)a2 + 4) & 0x401) == 0)
          {
            v11 = SLLexerBuffer::operator[]((_QWORD *)this + 12, 0);
            if (v11)
            {
              if (*(_BYTE *)v11 != 13)
                goto LABEL_33;
            }
          }
          goto LABEL_16;
        default:
          if (v4 != 9)
          {
            if (v4 == 33)
            {
              v5 = 8;
              v6 = 72;
              goto LABEL_34;
            }
LABEL_105:
            SLPostLexerImpl::HandlePunct(this, a2);
            return;
          }
          *((_BYTE *)this + 242) = 1;
          break;
      }
    }
    goto LABEL_33;
  }
  if (**((unsigned __int16 **)a2 + 7) <= 0x200Fu)
  {
    if (v4 != 63)
    {
      if (v4 != 124)
        goto LABEL_105;
      goto LABEL_33;
    }
    v5 = 7;
    v6 = 71;
  }
  else
  {
    if (v4 - 8208 < 4)
    {
LABEL_10:
      v8 = *((_DWORD *)a2 + 4) & 0x401;
      if (v8 != 1025)
      {
        if (v8)
          v9 = 2;
        else
          v9 = 1;
        v10 = SLLexerBuffer::operator[]((_QWORD *)this + 12, 0);
        if (v10)
          *((_BYTE *)v10 + 1) = v9;
LABEL_16:
        SLToken::~SLToken(a2);
        JUMPOUT(0x219A0649CLL);
      }
      goto LABEL_33;
    }
    if (v4 == 8212)
    {
LABEL_33:
      v5 = 5;
      v6 = 69;
      goto LABEL_34;
    }
    if (v4 != 8230)
      goto LABEL_105;
LABEL_27:
    v5 = 4;
    v6 = 68;
  }
LABEL_34:
  v12 = *((_QWORD *)a2 + 9);
  v13 = (char *)*((_QWORD *)a2 + 7);
  v14 = (char *)*((_QWORD *)a2 + 8);
  *((_WORD *)v13 + 1) = 32;
  if ((unint64_t)v14 >= v12)
  {
    v16 = v14 - v13;
    if (v14 - v13 <= -3)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v17 = v16 >> 1;
    v18 = v12 - (_QWORD)v13;
    if (v18 <= (v16 >> 1) + 1)
      v19 = v17 + 1;
    else
      v19 = v18;
    if (v18 >= 0x7FFFFFFFFFFFFFFELL)
      v20 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v20 = v19;
    if (v20)
    {
      v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)a2 + 72, v20);
      v13 = (char *)*((_QWORD *)a2 + 7);
      v14 = (char *)*((_QWORD *)a2 + 8);
    }
    else
    {
      v21 = 0;
    }
    v22 = &v21[2 * v17];
    v23 = &v21[2 * v20];
    *(_WORD *)v22 = 0;
    v15 = v22 + 2;
    while (v14 != v13)
    {
      v24 = *((_WORD *)v14 - 1);
      v14 -= 2;
      *((_WORD *)v22 - 1) = v24;
      v22 -= 2;
    }
    *((_QWORD *)a2 + 7) = v22;
    *((_QWORD *)a2 + 8) = v15;
    *((_QWORD *)a2 + 9) = v23;
    if (v13)
      operator delete(v13);
  }
  else
  {
    *(_WORD *)v14 = 0;
    v15 = v14 + 2;
  }
  *((_QWORD *)a2 + 8) = v15;
  *((_BYTE *)a2 + 1) = v5;
  v25 = (_QWORD *)operator new();
  SLHomograph::SLHomograph((SLHomograph *)v25);
  *(_DWORD *)v25 = 0x80000000;
  v26 = v25 + 4;
  v28 = (char *)v25[5];
  v27 = v25[6];
  if ((unint64_t)v28 >= v27)
  {
    v30 = (char *)*v26;
    v31 = &v28[-*v26];
    v32 = (unint64_t)(v31 + 1);
    if ((uint64_t)(v31 + 1) < 0)
      goto LABEL_106;
    v33 = v27 - (_QWORD)v30;
    if (2 * v33 > v32)
      v32 = 2 * v33;
    if (v33 >= 0x3FFFFFFFFFFFFFFFLL)
      v34 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v34 = v32;
    if (v34)
      v35 = (char *)operator new(v34);
    else
      v35 = 0;
    v36 = &v35[v34];
    v31[(_QWORD)v35] = v6;
    v29 = &v31[(_QWORD)v35 + 1];
    if (v28 == v30)
    {
      v35 = &v31[(_QWORD)v35];
    }
    else
    {
      v37 = &v28[~(unint64_t)v30];
      do
      {
        v38 = *--v28;
        (v37--)[(_QWORD)v35] = v38;
      }
      while (v28 != v30);
      v28 = (char *)*v26;
    }
    v25[4] = v35;
    v25[5] = v29;
    v25[6] = v36;
    if (v28)
      operator delete(v28);
  }
  else
  {
    *v28 = v6;
    v29 = v28 + 1;
  }
  v25[5] = v29;
  v39 = v25[6];
  if ((unint64_t)v29 < v39)
  {
    *v29 = 0;
    v40 = (uint64_t)(v29 + 1);
    goto LABEL_87;
  }
  v41 = (char *)*v26;
  v42 = &v29[-*v26];
  v43 = (unint64_t)(v42 + 1);
  if ((uint64_t)(v42 + 1) < 0)
LABEL_106:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v44 = v39 - (_QWORD)v41;
  if (2 * v44 > v43)
    v43 = 2 * v44;
  if (v44 >= 0x3FFFFFFFFFFFFFFFLL)
    v45 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v45 = v43;
  if (v45)
    v46 = operator new(v45);
  else
    v46 = 0;
  v47 = (char *)v46 + v45;
  v42[(_QWORD)v46] = 0;
  v40 = (uint64_t)&v42[(_QWORD)v46 + 1];
  if (v29 == v41)
  {
    v25[4] = &v42[(_QWORD)v46];
    v25[5] = v40;
    v25[6] = v47;
  }
  else
  {
    v48 = &v29[~(unint64_t)v41];
    do
    {
      v49 = *--v29;
      (v48--)[(_QWORD)v46] = v49;
    }
    while (v29 != v41);
    v29 = (char *)v25[4];
    v25[4] = v46;
    v25[5] = v40;
    v25[6] = v47;
    if (!v29)
      goto LABEL_87;
  }
  operator delete(v29);
LABEL_87:
  v25[5] = v40;
  v50 = *((_QWORD *)a2 + 12);
  v51 = (_QWORD *)*((_QWORD *)a2 + 11);
  if ((unint64_t)v51 >= v50)
  {
    v53 = *((_QWORD *)a2 + 10);
    v54 = ((uint64_t)v51 - v53) >> 3;
    if ((unint64_t)(v54 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v55 = v50 - v53;
    v56 = v55 >> 2;
    if (v55 >> 2 <= (unint64_t)(v54 + 1))
      v56 = v54 + 1;
    if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8)
      v57 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v57 = v56;
    if (v57)
      v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SLHomograph *>>((uint64_t)a2 + 96, v57);
    else
      v58 = 0;
    v59 = &v58[8 * v54];
    v60 = &v58[8 * v57];
    *(_QWORD *)v59 = v25;
    v52 = v59 + 8;
    v62 = (char *)*((_QWORD *)a2 + 10);
    v61 = (char *)*((_QWORD *)a2 + 11);
    if (v61 != v62)
    {
      do
      {
        v63 = *((_QWORD *)v61 - 1);
        v61 -= 8;
        *((_QWORD *)v59 - 1) = v63;
        v59 -= 8;
      }
      while (v61 != v62);
      v61 = (char *)*((_QWORD *)a2 + 10);
    }
    *((_QWORD *)a2 + 10) = v59;
    *((_QWORD *)a2 + 11) = v52;
    *((_QWORD *)a2 + 12) = v60;
    if (v61)
      operator delete(v61);
  }
  else
  {
    *v51 = v25;
    v52 = v51 + 1;
  }
  *((_QWORD *)a2 + 11) = v52;
  *((_DWORD *)a2 + 4) |= 0x40u;
  v64 = a2;
  std::deque<SLToken *>::push_front((uint64_t)this + 120, &v64);
}

void sub_216FC8150(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A0649C](v1, 0x1070C40CEE27CEALL);
  _Unwind_Resume(a1);
}

char *SLPostLexerEng::AppendMorph(SLPostLexerEng *this, SLToken *a2, char *a3, char *a4)
{
  unint64_t v4;

  if ((unsigned __int16)(SLChar::sToUpper[*(_WORD *)a3 & 0x3F | (SLChar::sUniMap[(unint64_t)*(unsigned __int16 *)a3 >> 6] << 6)]
                        + *(_WORD *)a3) == 69)
  {
    v4 = *(unsigned __int16 *)(*((_QWORD *)a2 + 8) - 4);
    a3 += 2 * ((unsigned __int16)(SLChar::sToUpper[v4 & 0x3F | (SLChar::sUniMap[v4 >> 6] << 6)] + v4) == 69);
  }
  return SLPostLexerImpl::AppendMorph(this, a2, a3, a4);
}

uint64_t SLPostLexerEng::PeriodIsEndOfSentence(uint64_t *a1, unsigned __int16 *a2, uint64_t a3, SLToken *this, uint64_t a5)
{
  int v10;
  const std::string::value_type *v11;
  int v12;
  int v13;
  char v15;
  _WORD *v16;
  uint64_t IsEndOfSentence;
  int v19;
  unsigned __int16 *v20;
  uint64_t v21;
  const std::string::value_type *v22;
  int v23;
  int v24;
  char v26;
  std::string v27;
  std::string __p;
  uint64_t v29;
  uint64_t v30;

  v10 = *((char *)a2 + 23);
  if (v10 < 0)
  {
    if (*((_QWORD *)a2 + 1) != 3)
      goto LABEL_10;
    v11 = *(const std::string::value_type **)a2;
  }
  else
  {
    v11 = (const std::string::value_type *)a2;
    if (v10 != 3)
      goto LABEL_10;
  }
  v12 = *(unsigned __int16 *)v11;
  v13 = *((unsigned __int8 *)v11 + 2);
  if (v12 == 20302 && v13 == 46)
  {
    if (a5)
    {
      if (*(_BYTE *)a5 == 1 && (*(_BYTE *)(a5 + 17) & 0x10) == 0)
      {
        SLDissecter::DissectNumber(a1[23], a5, 0, ((uint64_t)(*(_QWORD *)(a5 + 64) - *(_QWORD *)(a5 + 56)) >> 1) - 1, (uint64_t)&__p);
        if (!v29 && !v30 && !__p.__r_.__value_.__l.__size_)
          return 0;
      }
    }
    *((_DWORD *)this + 4) &= ~0x40u;
    return 1;
  }
LABEL_10:
  if (!SLToken::HasTag(this, 1036))
  {
LABEL_15:
    v15 = 0;
    if (a5)
      goto LABEL_16;
    return 1;
  }
  if (*(_BYTE *)(a3 + 5) != 1)
  {
    LODWORD(__p.__r_.__value_.__l.__data_) = 67960833;
    if ((SLToken::SelectHomographs(this, 0x7FFFFFFF, (const SLWordTagSet *)&__p) & 1) == 0)
    {
      v15 = 0;
      *((_DWORD *)this + 4) &= ~0x40u;
      if (!a5)
        return 1;
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  v15 = 1;
  if (!a5)
    return 1;
LABEL_16:
  if (*(_BYTE *)a5)
    return 0;
  v16 = *(_WORD **)(a5 + 56);
  if ((SLChar::sCharClass[*v16 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v16 >> 6] << 6)] & 0x9F) == 0x81)
    return 0;
  v19 = *((char *)a2 + 23);
  if (v19 < 0)
  {
    if (*((_QWORD *)a2 + 1) != 3)
    {
      if ((v15 & 1) != 0)
        return 0;
      v21 = a1[24];
      goto LABEL_47;
    }
    v20 = *(unsigned __int16 **)a2;
  }
  else
  {
    v20 = a2;
    if (v19 != 3)
    {
      if ((v15 & 1) == 0)
      {
        v21 = a1[24];
        v22 = (const std::string::value_type *)a2;
        goto LABEL_48;
      }
      return 0;
    }
  }
  v23 = *v20;
  v24 = *((unsigned __int8 *)v20 + 2);
  if (v23 == 21334 && v24 == 46)
    v15 = 1;
  if ((v15 & 1) != 0)
    return 0;
  v21 = a1[24];
  v22 = (const std::string::value_type *)a2;
  if (v19 < 0)
LABEL_47:
    v22 = *(const std::string::value_type **)a2;
LABEL_48:
  SLPostLexerImpl::Transcribe((SLPostLexerImpl *)a1, (SLToken *)a5, 2, 0, ((uint64_t)(*(_QWORD *)(a5 + 64) - (_QWORD)v16) >> 1) - 1, &__p);
  v26 = (*(uint64_t (**)(uint64_t, const std::string::value_type *))(*(_QWORD *)v21 + 64))(v21, v22);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v26 & 1) != 0)
    return 0;
  if (*((char *)a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  else
    v27 = *(std::string *)a2;
  IsEndOfSentence = SLPostLexerImpl::PeriodIsEndOfSentence();
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  return IsEndOfSentence;
}

void sub_216FC84C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

SLToken *SLPostLexerEng::StartsCurrencyRange(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  SLToken *result;
  int v6;
  SLToken *v7;
  uint64_t (***v8)(_QWORD);
  uint64_t v9;
  SLToken *v10;
  SLToken *v11;
  unint64_t v12;
  SLPostLexerImpl *v13;
  unint64_t v14;
  int v15;
  std::string v16;
  unint64_t v17;

  v4 = a1 + 12;
  result = (SLToken *)SLLexerBuffer::operator[](a1 + 12, 0);
  if (result)
  {
    if (*(_BYTE *)result)
      return 0;
    SLPostLexerImpl::Transcribe((SLPostLexerImpl *)a1, result, 2, 0, ((uint64_t)(*((_QWORD *)result + 8) - *((_QWORD *)result + 7)) >> 1) - 1, &v16);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v16.__r_.__value_.__l.__size_ != 2)
      {
        operator delete(v16.__r_.__value_.__l.__data_);
        return 0;
      }
      v6 = *(unsigned __int16 *)v16.__r_.__value_.__l.__data_;
      operator delete(v16.__r_.__value_.__l.__data_);
      if (v6 != 20308)
        return 0;
    }
    else if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) != 2 || LOWORD(v16.__r_.__value_.__l.__data_) != 20308)
    {
      return 0;
    }
    v7 = (SLToken *)SLLexerBuffer::operator[](v4, 1uLL);
    v8 = SLLexerBuffer::operator[](v4, 2uLL);
    if (!v7)
      return 0;
    v9 = (uint64_t)v8;
    if (!v8
      || SLPostLexerImpl::FindUnit((SLPostLexerImpl *)a1, v7, 0, ((uint64_t)(*((_QWORD *)v7 + 8) - *((_QWORD *)v7 + 7)) >> 1) - 1, 36) != a2)
    {
      return 0;
    }
    if ((*(_BYTE *)(v9 + 17) & 0x10) != 0)
    {
      SLDissecter::DissectUnit(a1[23], v9, (uint64_t)&v16);
      v14 = v17;
      v12 = ((uint64_t)(*(_QWORD *)(v9 + 64) - *(_QWORD *)(v9 + 56)) >> 1) - 1;
      if (v16.__r_.__value_.__s.__data_[0])
        v15 = 42;
      else
        v15 = 43;
      v13 = (SLPostLexerImpl *)a1;
      v11 = (SLToken *)v9;
    }
    else
    {
      v10 = (SLToken *)SLLexerBuffer::operator[](v4, 3uLL);
      if (!v10)
        return 0;
      v11 = v10;
      v12 = ((uint64_t)(*((_QWORD *)v10 + 8) - *((_QWORD *)v10 + 7)) >> 1) - 1;
      v13 = (SLPostLexerImpl *)a1;
      v14 = 0;
      v15 = 42;
    }
    return (SLToken *)(SLPostLexerImpl::FindUnit(v13, v11, v14, v12, v15) != 0);
  }
  return result;
}

BOOL SLPostLexerEng::EmphasizeAgglomeratedWord(SLPostLexerEng *this, SLToken *a2)
{
  _BOOL8 result;

  result = SLPostLexerImpl::EmphasizeAgglomeratedWord(this, a2);
  if ((_DWORD)result)
    return SLToken::HasPOS(a2, 67);
  return result;
}

void *SLPostLexerEng::IsCompassDirection(SLPostLexerEng *this, SLToken *a2)
{
  unsigned __int16 *v2;
  uint64_t v3;
  void *result;
  int v5;
  int v6;
  int v7;

  v2 = (unsigned __int16 *)*((_QWORD *)a2 + 7);
  v3 = (uint64_t)(*((_QWORD *)a2 + 8) - (_QWORD)v2) >> 1;
  switch(v3)
  {
    case 4:
      result = memchr("NSWE", *v2, 5uLL);
      if (!result)
        return result;
      v5 = v2[1];
      if (v5 != 83 && v5 != 78)
        return 0;
      v6 = v2[2];
      break;
    case 3:
      v7 = *v2;
      if (v7 != 83 && v7 != 78)
        return 0;
      v6 = v2[1];
      break;
    case 2:
      return (void *)(memchr("NSWE", *v2, 5uLL) != 0);
    default:
      return 0;
  }
  return (void *)(v6 == 87 || v6 == 69);
}

uint64_t SLPostLexerEng::IsHouseNumber(SLPostLexerEng *this, SLToken *a2)
{
  int v3;
  unint64_t v4;
  _QWORD *v5;
  char *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t (***v9)(_QWORD);
  _BOOL4 v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  SLToken *v14;
  std::string *v15;
  std::string::size_type size;
  _BOOL4 HasTag;
  unint64_t i;
  SLToken *v19;
  uint64_t v20;
  uint64_t Unit;
  _QWORD v22[4];
  std::string v23;

  v3 = 0;
  v4 = 0;
  v5 = (_QWORD *)((char *)this + 96);
  v6 = (char *)this + 120;
  while (1)
  {
    result = (uint64_t)SLLexerBuffer::operator[](v5, v4);
    if (!result)
      return result;
    v8 = result;
    v9 = SLLexerBuffer::operator[](v5, v4 + 1);
    if (*(_BYTE *)v8 == 1)
    {
      v11 = v4;
      goto LABEL_43;
    }
    if (*(_BYTE *)v8)
      return 0;
    v10 = 0;
    if ((*(_BYTE *)(v8 + 16) & 1) != 0)
      goto LABEL_13;
    v11 = v4;
    if (v9)
    {
      if (*(_BYTE *)v9 == 13)
      {
        v12 = *(unsigned __int16 *)v9[7];
        v10 = v12 == 46;
        if (v12 == 46)
          v11 = v4 + 1;
        else
          v11 = v4;
        goto LABEL_14;
      }
      v10 = 0;
LABEL_13:
      v11 = v4;
    }
LABEL_14:
    SLPostLexerImpl::Classify(this, (SLToken *)v8);
    v13 = *(unsigned __int8 *)(v8 + 5);
    if (((uint64_t)(*(_QWORD *)(v8 + 64) - *(_QWORD *)(v8 + 56)) >> 1) - 1 == v13)
    {
      if (((*(uint64_t (**)(SLPostLexerEng *, uint64_t))(*(_QWORD *)this + 192))(this, v8) & 1) != 0)
      {
        v3 = 1;
        goto LABEL_43;
      }
      LODWORD(v13) = *(unsigned __int8 *)(v8 + 5);
    }
    if ((_DWORD)v13 != 1)
      return 0;
    SLPostLexerImpl::Transcribe(this, (SLToken *)v8, 2, 0, ((uint64_t)(*(_QWORD *)(v8 + 64) - *(_QWORD *)(v8 + 56)) >> 1) - 1, &v23);
    if (v10)
      std::string::push_back(&v23, 46);
    v14 = (SLToken *)operator new();
    SLToken::SLToken(v14, 0, 0);
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = &v23;
    else
      v15 = (std::string *)v23.__r_.__value_.__r.__words[0];
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
    else
      size = v23.__r_.__value_.__l.__size_;
    if (SLDictLookup::Lookup(*((SLDictLookup **)this + 21), *(SLDictionary **)(*((_QWORD *)this + 21) + 24), (const char *)v15, size, v14, 0))
    {
      HasTag = SLToken::HasTag(v14, 1056);
      SLToken::~SLToken(v14);
      MEMORY[0x219A0649C]();
      if ((HasTag & v3) == 1)
      {
        SLTokenList::SLTokenList((SLTokenList *)v22);
        if (v4)
        {
          for (i = 0; i < v4; ++i)
          {
            v19 = (SLToken *)SLLexerBuffer::operator[](v5, 0);
            *(int64x2_t *)((char *)this + 152) = vaddq_s64(*(int64x2_t *)((char *)this + 152), (int64x2_t)xmmword_21701CDA0);
            std::deque<SLToken *>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)v6, 1);
            if ((*(unsigned int (**)(SLPostLexerEng *, SLToken *))(*(_QWORD *)this + 192))(this, v19))
            {
              v20 = *((_QWORD *)this + 22);
              Unit = SLPostLexerImpl::FindUnit(this, v19, 0, ((uint64_t)(*((_QWORD *)v19 + 8) - *((_QWORD *)v19 + 7)) >> 1) - 1, 94);
              (*(void (**)(uint64_t, uint64_t, _QWORD *, _QWORD, uint64_t (**)(_QWORD), uint64_t (**)(_QWORD)))(*(_QWORD *)v20 + 240))(v20, Unit, v22, 0, *((uint64_t (***)(_QWORD))v19 + 4), *((uint64_t (***)(_QWORD))v19 + 5));
              if ((*((_BYTE *)v19 + 16) & 1) == 0 && i < v4 - 1)
              {
                *(int64x2_t *)((char *)this + 152) = vaddq_s64(*(int64x2_t *)((char *)this + 152), (int64x2_t)xmmword_21701CDA0);
                std::deque<SLToken *>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)v6, 1);
                ++i;
              }
              SLToken::~SLToken(v19);
              MEMORY[0x219A0649C]();
            }
            else
            {
              SLTokenList::push_back((SLTokenList *)v22, v19);
            }
          }
        }
        SLPostLexerImpl::push_front(this, (const SLTokenList *)v22);
        std::__list_imp<SLToken *>::clear(v22);
        HasTag = 1;
      }
    }
    else
    {
      SLToken::~SLToken(v14);
      MEMORY[0x219A0649C]();
      HasTag = 0;
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
    if (HasTag)
      return 1;
LABEL_43:
    v4 = v11 + 1;
    if (v11 + 1 >= 7)
      return 0;
  }
}

void sub_216FC8AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::__list_imp<SLToken *>::clear(&a12);
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void SLPostLexerEng::PredictAltNum(SLPostLexerEng *this, SLToken *a2, SLToken *a3)
{
  int v5;

  if (*(_BYTE *)a3 == 1 && SLToken::HasTag(a2, 1044))
  {
    v5 = *((_DWORD *)a3 + 4);
    if ((v5 & 0x1000) != 0)
    {
      SLToken::SetType(a3, 11);
    }
    else if (*((_QWORD *)a3 + 8) - *((_QWORD *)a3 + 7) == 8)
    {
      *((_DWORD *)a3 + 4) = v5 | 0x400;
      if (!*((_BYTE *)a3 + 1))
        *((_BYTE *)a3 + 1) = 2;
    }
  }
  else if (SLToken::HasTag(a2, 1058))
  {
    *((_DWORD *)a3 + 4) |= 0x1000000u;
  }
}

void SLPostLexerEng::PredictSingleLetter(SLPostLexerEng *this, SLToken *a2, SLToken *a3)
{
  if (SLToken::HasTag(a2, 1050))
    SLToken::SetType(a3, 11);
}

_QWORD *SLPostLexerEng::CreateIPAHomograph(SLPostLexerEng *this, const unsigned __int8 *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  char *v24;
  char v25;
  unint64_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  size_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char v36;
  unint64_t v37;
  char *v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  size_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char v47;
  char *v48;
  int v49;
  char *v52;
  char v53;
  char v54;

  v5 = (_QWORD *)operator new();
  SLHomograph::SLHomograph((SLHomograph *)v5);
  *(_DWORD *)v5 = 3;
  v6 = v5 + 4;
  v8 = (char *)v5[5];
  v7 = v5[6];
  if ((unint64_t)v8 >= v7)
  {
    v10 = (char *)*v6;
    v11 = &v8[-*v6];
    v12 = (unint64_t)(v11 + 1);
    if ((uint64_t)(v11 + 1) < 0)
LABEL_82:
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v13 = v7 - (_QWORD)v10;
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x3FFFFFFFFFFFFFFFLL)
      v14 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      v15 = (char *)operator new(v14);
      v6 = v5 + 4;
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[v14];
    v11[(_QWORD)v15] = 2;
    v9 = &v11[(_QWORD)v15 + 1];
    if (v8 == v10)
    {
      v15 = &v11[(_QWORD)v15];
    }
    else
    {
      v17 = &v8[~(unint64_t)v10];
      do
      {
        v18 = *--v8;
        (v17--)[(_QWORD)v15] = v18;
      }
      while (v8 != v10);
      v8 = (char *)*v6;
    }
    v5[4] = v15;
    v5[5] = v9;
    v5[6] = v16;
    if (v8)
    {
      operator delete(v8);
      v6 = v5 + 4;
    }
  }
  else
  {
    *v8 = 2;
    v9 = v8 + 1;
  }
  v5[5] = v9;
  if (a3)
  {
    v19 = 0;
    v53 = 0;
    v52 = 0;
    v20 = 255;
    while (1)
    {
      v22 = *a2++;
      v21 = v22;
      if (v22 != 58 && (_DWORD)v21 != 1)
        break;
      v19 |= (_DWORD)v21 == 1;
LABEL_72:
      v20 = v21;
      if (!--a3)
      {
        if (!(v19 & 1 | ((v53 & 1) == 0)))
        {
          v48 = (char *)*v6;
          v49 = v52[*v6];
          if (v49 == 25 || v49 == 11)
          {
            v52[(_QWORD)v48] = 8;
            v48 = (char *)*v6;
          }
          v54 = 1;
          std::vector<unsigned char>::insert(v6, &v52[(_QWORD)v48], &v54);
        }
        return v5;
      }
    }
    if ((SLPhonEng::sFlags[v21] & 1) == 0)
    {
      v24 = v9;
      v25 = v21;
      v21 = v20;
LABEL_54:
      v37 = v5[6];
      if ((unint64_t)v24 >= v37)
      {
        v38 = (char *)*v6;
        v39 = &v24[-*v6];
        v40 = (unint64_t)(v39 + 1);
        if ((uint64_t)(v39 + 1) < 0)
          goto LABEL_82;
        v41 = v37 - (_QWORD)v38;
        if (2 * v41 > v40)
          v40 = 2 * v41;
        if (v41 >= 0x3FFFFFFFFFFFFFFFLL)
          v42 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v42 = v40;
        if (v42)
        {
          v43 = (char *)operator new(v42);
          v6 = v5 + 4;
        }
        else
        {
          v43 = 0;
        }
        v44 = &v39[(_QWORD)v43];
        v45 = &v39[(_QWORD)v43];
        *v45 = v25;
        v9 = v45 + 1;
        if (v24 != v38)
        {
          v46 = &v24[~(unint64_t)v38];
          do
          {
            v47 = *--v24;
            (v46--)[(_QWORD)v43] = v47;
          }
          while (v24 != v38);
          v24 = (char *)*v6;
          v44 = v43;
        }
        v5[4] = v44;
        v5[5] = v9;
        v5[6] = &v43[v42];
        if (v24)
        {
          operator delete(v24);
          v6 = v5 + 4;
        }
      }
      else
      {
        *v24 = v25;
        v9 = v24 + 1;
      }
      v5[5] = v9;
      goto LABEL_72;
    }
    if ((_DWORD)v20 == 255)
    {
      if ((v53 & 1) == 0)
        v52 = &v9[-*v6];
      v53 = 1;
      v24 = v9;
    }
    else
    {
      v26 = v5[6];
      if ((unint64_t)v9 >= v26)
      {
        v27 = (char *)*v6;
        v28 = &v9[-*v6];
        v29 = (unint64_t)(v28 + 1);
        if ((uint64_t)(v28 + 1) < 0)
          goto LABEL_82;
        v30 = v26 - (_QWORD)v27;
        if (2 * v30 > v29)
          v29 = 2 * v30;
        if (v30 >= 0x3FFFFFFFFFFFFFFFLL)
          v31 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v31 = v29;
        if (v31)
        {
          v32 = (char *)operator new(v31);
          v6 = v5 + 4;
        }
        else
        {
          v32 = 0;
        }
        v33 = &v28[(_QWORD)v32];
        v34 = &v28[(_QWORD)v32];
        *v34 = v20;
        v24 = v34 + 1;
        if (v9 != v27)
        {
          v35 = &v9[~(unint64_t)v27];
          do
          {
            v36 = *--v9;
            (v35--)[(_QWORD)v32] = v36;
          }
          while (v9 != v27);
          v9 = (char *)*v6;
          v33 = v32;
        }
        v5[4] = v33;
        v5[5] = v24;
        v5[6] = &v32[v31];
        if (v9)
        {
          operator delete(v9);
          v6 = v5 + 4;
        }
      }
      else
      {
        *v9 = v20;
        v24 = v9 + 1;
      }
      v5[5] = v24;
      if ((_DWORD)v21 == 25 || (_DWORD)v21 == 11)
      {
        v21 = 255;
        v25 = 8;
        goto LABEL_54;
      }
    }
    v25 = v21;
    v21 = 255;
    goto LABEL_54;
  }
  return v5;
}

void sub_216FC8FEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A0649C](v1, 0x1070C40CEE27CEALL);
  _Unwind_Resume(a1);
}

uint64_t SLPostLexerEng::FindElapsed(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char **v12;
  uint64_t i;
  uint64_t *v14;
  char *v15;

  v5 = *((unsigned __int8 *)a2 + 23);
  v6 = (char)v5;
  if ((v5 & 0x80u) != 0)
    v5 = a2[1];
  if (v5 < 2)
  {
    v8 = 0;
  }
  else
  {
    if (v6 >= 0)
      v7 = a2;
    else
      v7 = (uint64_t *)*a2;
    if (*((_BYTE *)v7 + v5 - 1) == 83)
      v8 = -1;
    else
      v8 = 0;
  }
  v9 = *a3;
  v10 = (&sElapsedSym)[2 * *a3];
  if (!v10)
    return 0;
  v11 = v8 + v5;
  v12 = &(&sElapsedSym)[2 * v9 + 2];
  for (i = v9 + 1; ; ++i)
  {
    v14 = *((char *)a2 + 23) >= 0 ? a2 : (uint64_t *)*a2;
    if (!memcmp(v14, v10, v11) && !v10[v11])
      break;
    *a3 = i;
    v15 = *v12;
    v12 += 2;
    v10 = v15;
    if (!v15)
      return 0;
  }
  return 1;
}

BOOL SLPostLexerEng::ElapsedSequence(SLPostLexerEng *this, uint64_t a2, uint64_t a3)
{
  _BOOL4 v4;

  if ((&sElapsedSym)[2 * a3 + 1] == (&sElapsedSym)[2 * a2 + 1] + 1)
    return 1;
  v4 = (a2 & 0xFFFFFFFFFFFFFFFELL) == 2 && (a3 & 0xFFFFFFFFFFFFFFFELL) == 6;
  if ((unint64_t)(a2 - 15) <= 0xFFFFFFFFFFFFFFF2)
    return (a3 & 0xFFFFFFFFFFFFFFFELL) == 4;
  else
    return v4;
}

void SLPostLexerEng::ElapsedSymbol(uint64_t a1, uint64_t *a2, uint64_t a3, char a4, _QWORD *a5)
{
  unint64_t v5;
  int v6;
  uint64_t *v7;
  char **v8;

  v5 = *((unsigned __int8 *)a2 + 23);
  v6 = (char)v5;
  if ((v5 & 0x80u) != 0)
    v5 = a2[1];
  if ((a4 & 1) != 0 || v5 >= 2 && (v6 >= 0 ? (v7 = a2) : (v7 = (uint64_t *)*a2), *((_BYTE *)v7 + v5 - 1) == 83))
    v8 = &sElapsedNamePlural;
  else
    v8 = &sElapsedNameSingular;
  *a5 = v8[(_QWORD)(&sElapsedSym)[2 * a3 + 1]];
  a5[1] = 0x4100000001;
}

uint64_t SLPostLexerEng::HandleUnknownChar(SLPostLexerEng *this, SLToken *a2, SLTokenList *a3)
{
  uint64_t result;
  unsigned __int16 *v7;
  UChar32 v8;
  int v9;
  BOOL v10;
  int32_t v12;
  _QWORD v13[2];
  UErrorCode pErrorCode;
  __int16 v15;
  char v16[126];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  SLToken::SetType(a2, 0);
  result = SLPostLexerImpl::HandleTokenInDictionary(this, a2);
  if ((result & 1) == 0)
  {
    pErrorCode = U_ZERO_ERROR;
    v7 = (unsigned __int16 *)*((_QWORD *)a2 + 7);
    v8 = *v7;
    if (*((_QWORD *)a2 + 8) - (_QWORD)v7 != 4)
      v8 = v7[1] + (v8 << 10) - 56613888;
    if (v8 >= 128)
    {
      v9 = u_isgraph(v8);
      v10 = v8 >> 4 == 4064 || (v8 & 0xFFFFFFFE) == 65532;
      if (!v10 && v9 != 0)
      {
        if ((v12 = u_charName(v8, U_CHAR_NAME_ALIAS, v16, 128, &pErrorCode), pErrorCode <= U_ZERO_ERROR) && v12
          || (pErrorCode = U_ZERO_ERROR,
              v12 = u_charName(v8, U_EXTENDED_CHAR_NAME, v16, 128, &pErrorCode),
              pErrorCode <= U_ZERO_ERROR)
          && v12)
        {
          if (v16[0] != 60)
          {
            v15 = 8232;
            strcpy(&v16[v12], ")");
            v13[0] = &v15;
            v13[1] = 0x4100000001;
            (*(void (**)(_QWORD, _QWORD *, SLTokenList *, _QWORD, _QWORD))(**((_QWORD **)this + 22) + 232))(*((_QWORD *)this + 22), v13, a3, *((_QWORD *)a2 + 4), *((_QWORD *)a2 + 5));
          }
        }
      }
    }
    SLToken::~SLToken(a2);
    return MEMORY[0x219A0649C]();
  }
  return result;
}

_QWORD *SLPhonemeParser::Create(SLPhonemeParser *this, const __CFLocale *a2)
{
  const __CFString *Value;

  Value = (const __CFString *)CFLocaleGetValue(this, (CFLocaleKey)*MEMORY[0x24BDBD418]);
  if (CFStringCompare(Value, CFSTR("en"), 0))
    SLPhonemeParser::Create();
  return SLCreatePhonemeParserEng();
}

BOOL SLPhonemeParser::IsWordMarker(SLPhonemeParser *this, int a2)
{
  return a2 == 2;
}

uint64_t SLPhonemeParser::DefaultWordMarker(SLPhonemeParser *this)
{
  return 2;
}

uint64_t SLPhonemeParser::FindTag(SLPhonemeParser *this, const char *a2)
{
  unsigned __int16 i;
  unsigned int v4;
  const char *v5;

  for (i = 64; ; ++i)
  {
    v4 = i;
    v5 = SLTag::Name((SLTag *)i);
    if (!strcmp(a2, v5))
      break;
    if (v4 >= 0x99)
      return 0;
  }
  return i;
}

uint64_t SLPhonemeParserEng::IsPhoneme(SLPhonemeParserEng *this, unsigned __int16 *a2, unsigned __int8 *a3)
{
  SLPhonEng *v5;
  int v6;
  int v7;
  int v9;

  v5 = (SLPhonEng *)WordPhoneme(*a2);
  v6 = WordPhoneme(a2[1]);
  v7 = SLPhonEng::Find(v5, 0);
  *a3 = v7;
  if (v7 != 255)
    return 1;
  if (!v6)
    return 0;
  v9 = SLPhonEng::Find(v5, v6);
  *a3 = v9;
  if (v9 == 255)
    return 0;
  return 2;
}

uint64_t WordPhoneme(unsigned int a1)
{
  if (a1 > 0x7F
    || (*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * a1 + 60) & 0x100) == 0
    && (a1 - 37 > 0x3A || ((1 << (a1 - 37)) & 0x48000000B803441) == 0)
    && a1 != 126)
  {
    LOBYTE(a1) = 0;
  }
  return (char)a1;
}

BOOL SLPhonemeParserEng::IsTunePhoneme(SLPhonemeParserEng *this, unsigned __int16 *a2, unsigned __int8 *a3)
{
  unsigned int v4;
  BOOL v5;
  int v6;

  v4 = *a2;
  if (v4 > 0x7F || (v4 <= 0x3F ? (v5 = ((1 << v4) & 0x8400500200000000) == 0) : (v5 = 1), v5))
    LOBYTE(v4) = 0;
  v6 = SLPhonEng::Find((SLPhonEng *)(char)v4, 0);
  *a3 = v6;
  return v6 != 255;
}

BOOL SLPhonemeParserEng::IsWordMarker(SLPhonemeParserEng *this, int a2)
{
  return (a2 - 74) < 2 || a2 == 2;
}

uint64_t SLPhonemeParserEng::DefaultWordMarker(SLPhonemeParserEng *this)
{
  return 75;
}

uint64_t SLPhonemeParserEng::PhoneticPOS(SLPhonemeParserEng *this)
{
  return 16451;
}

uint64_t SLPhonemeParserEng::FindPOS(SLPhonemeParserEng *this, const char *__s1)
{
  uint64_t v3;

  v3 = 0;
  while (strcmp(__s1, SLPOSEng::sName[v3]))
  {
    if (++v3 == 32)
    {
      LOBYTE(v3) = -1;
      return v3;
    }
  }
  return v3;
}

uint64_t SLPhonemeParserEng::FindTag(SLPhonemeParserEng *this, const char *a2)
{
  int Tag;
  unsigned __int16 i;
  unsigned int v5;
  const char *v6;

  Tag = SLPhonemeParser::FindTag(this, a2);
  i = Tag;
  if (!Tag)
  {
    for (i = 1024; ; ++i)
    {
      v5 = i;
      v6 = SLTag::Name((SLTag *)i);
      if (!strcmp(a2, v6))
        break;
      if (v5 >= 0x423)
        return 0;
    }
  }
  return i;
}

_QWORD *SLCreatePhonemeParserEng(void)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_24D6838C0;
  return result;
}

void SLPhonemeParserEng::~SLPhonemeParserEng(SLPhonemeParserEng *this)
{
  SLPhonemeParser::~SLPhonemeParser(this);
  JUMPOUT(0x219A0649CLL);
}

void SLTuplesEng::SLTuplesEng(SLTuplesEng *this, SLLexer *a2)
{
  _QWORD *v2;

  SLTuplesImpl::SLTuplesImpl(this, a2, CFSTR("TuplesEng"));
  *v2 = off_24D683930;
  v2[1] = &unk_24D6839B0;
}

SLTuplesImpl *SLCreateTuplesEng(SLLexer *a1)
{
  SLTuplesImpl *v2;

  v2 = (SLTuplesImpl *)operator new();
  SLTuplesImpl::SLTuplesImpl(v2, a1, CFSTR("TuplesEng"));
  *(_QWORD *)v2 = off_24D683930;
  *((_QWORD *)v2 + 1) = &unk_24D6839B0;
  return v2;
}

void sub_216FC9724(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A0649C](v1, 0x10F3C40EB326097);
  _Unwind_Resume(a1);
}

_QWORD *SLTuplesEng::HandleGlobalFlags(SLTuplesEng *this, unint64_t *a2, char a3)
{
  uint64_t v5;
  SLLexerBuffer *v6;
  unint64_t v7;
  _QWORD *result;
  uint64_t v9;
  SLToken *v10;
  SLToken *v11;
  SLToken *v12;

  v5 = *a2;
  v6 = (SLTuplesEng *)((char *)this + 8);
  v7 = *a2 - 1;
  result = SLLexerBuffer::operator[]((_QWORD *)this + 1, v7);
  if (result)
  {
    if (*(_BYTE *)result == 13)
      v5 = v7;
  }
  if ((a3 & 4) != 0)
  {
    v12 = ToBIToken(6, 0);
    result = SLLexerBuffer::insert(v6, v5, v12);
    v9 = 1;
  }
  else
  {
    if ((a3 & 8) == 0)
      return result;
    v9 = 2;
    v10 = ToBIToken(2, 0);
    SLLexerBuffer::insert(v6, v5, v10);
    v11 = ToBIToken(5, 1);
    result = SLLexerBuffer::insert(v6, v5 + 1, v11);
  }
  *a2 += v9;
  return result;
}

SLToken *ToBIToken(int a1, int a2)
{
  SLToken *v4;

  v4 = (SLToken *)operator new();
  SLToken::SLToken(v4, 3, 0);
  *((_DWORD *)v4 + 2) = 1953456745;
  *((_DWORD *)v4 + 3) = a2 | (a1 << 24);
  return v4;
}

void sub_216FC987C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A0649C](v1, 0x10F0C4034644DEDLL);
  _Unwind_Resume(a1);
}

_QWORD *SLTuplesEng::HandleElementFlags(_QWORD *this, unint64_t *a2, unint64_t *a3, SLToken *a4, char a5)
{
  SLLexerBuffer *v7;
  uint64_t v8;
  SLToken *v9;

  if ((a5 & 8) != 0)
  {
    v7 = (SLLexerBuffer *)(this + 1);
    v8 = *a2;
    v9 = ToBIToken(7, 0);
    this = SLLexerBuffer::insert(v7, v8, v9);
    ++*a2;
    ++*a3;
  }
  return this;
}

BOOL SLTuplesEng::HandleAgglomerates(SLTuplesEng *this, uint64_t a2)
{
  _QWORD *v2;
  SLToken *v3;
  SLToken *v4;
  _BOOL8 result;

  if (a2 != 2)
    return 0;
  v2 = (_QWORD *)((char *)this + 8);
  v3 = (SLToken *)SLLexerBuffer::operator[]((_QWORD *)this + 1, 0);
  v4 = (SLToken *)SLLexerBuffer::operator[](v2, 1uLL);
  result = SLToken::HasPOS(v3, 2);
  if (result)
  {
    result = SLToken::HasPOS(v4, 128);
    if (result)
    {
      *((_BYTE *)v3 + 6) = 60;
      *((_BYTE *)v3 + 20) = 0;
      *((_BYTE *)v4 + 6) = 62;
      *((_BYTE *)v4 + 20) = 0;
      result = 1;
      *((_BYTE *)v4 + 2) = 2;
    }
  }
  return result;
}

void SLTuplesEng::~SLTuplesEng(SLTuplesEng *this)
{
  SLTuplesImpl::~SLTuplesImpl(this);
  JUMPOUT(0x219A0649CLL);
}

void SLTuplesEng::ParseGlobalFlags(SLTuplesEng *this, unint64_t a2, unsigned int *a3, unsigned __int8 *a4)
{
  *a3 = a2 & 0xF;
  *a4 = SLTuplesEng::sTuplePOS[(a2 >> 4) & 7];
}

void SLTuplesEng::ParseElementFlags(SLTuplesEng *this, char a2, uint64_t a3, unsigned int *a4, unsigned int *a5)
{
  unint64_t v5;

  v5 = a3 >> (7 * a2 + 7);
  *a4 = v5;
  *a5 = SLTuplesEng::sForcePOS[(v5 >> 4) & 7];
  *a4 &= 0xFu;
}

void `non-virtual thunk to'SLTuplesEng::~SLTuplesEng(SLTuplesEng *this)
{
  SLTuplesImpl::~SLTuplesImpl((SLTuplesEng *)((char *)this - 8));
}

{
  SLTuplesImpl::~SLTuplesImpl((SLTuplesEng *)((char *)this - 8));
  JUMPOUT(0x219A0649CLL);
}

SLStemTrackerImpl *SLStemTracker::Create(SLStemTracker *this, const __CFLocale *a2, SLDictLookup *a3, SLLexer *a4, SLLexer *a5)
{
  SLStemTrackerImpl *v9;

  v9 = (SLStemTrackerImpl *)operator new();
  SLStemTrackerImpl::SLStemTrackerImpl(v9, this, a2, (unint64_t)a3, a4);
  return v9;
}

void sub_216FC9AC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A0649C](v1, 0x10A1C40F325FC3DLL);
  _Unwind_Resume(a1);
}

void SLStemTrackerImpl::SLStemTrackerImpl(SLStemTrackerImpl *this, const __CFLocale *a2, SLDictLookup *a3, unint64_t a4, SLLexer *a5)
{
  SLDictionary *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  SLDictionary *v17;

  *(_QWORD *)this = &unk_24D683A78;
  v10 = (SLStemTrackerImpl *)((char *)this + 8);
  SLDictionary::SLDictionary((SLStemTrackerImpl *)((char *)this + 8));
  *(_QWORD *)this = off_24D6839E8;
  *((_QWORD *)this + 1) = &unk_24D683A50;
  std::vector<SLStemTrackerImpl::Stem>::vector((_QWORD *)this + 5, a4);
  *((_QWORD *)this + 8) = (char *)this + 64;
  *((_QWORD *)this + 9) = (char *)this + 64;
  *((_QWORD *)this + 10) = 0;
  SLDictionary::SLDictionary((SLStemTrackerImpl *)((char *)this + 88));
  *((_QWORD *)this + 11) = &off_24D670D50;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = a3;
  *((_QWORD *)this + 27) = a5;
  *((_BYTE *)this + 224) = 0;
  v11 = *((_QWORD *)this + 5);
  v12 = *((_QWORD *)this + 6) - v11;
  if (v12)
  {
    v13 = v12 / 80;
    if (v13 <= 1)
      v14 = 1;
    else
      v14 = v13;
    do
    {
      *(_QWORD *)(v11 + 8) = 0;
      v15 = operator new(0x18uLL);
      v15[1] = (char *)this + 64;
      v15[2] = v11;
      v16 = *((_QWORD *)this + 8);
      *v15 = v16;
      *(_QWORD *)(v16 + 8) = v15;
      *((_QWORD *)this + 8) = v15;
      ++*((_QWORD *)this + 10);
      v11 += 80;
      --v14;
    }
    while (v14);
  }
  v17 = SLMorphRules::Create(a2, (const __CFLocale *)1);
  SLEncyclopedia::PushBack((uint64_t)this + 88, v17);
  SLEncyclopedia::PushBack((uint64_t)this + 88, v10);
}

void sub_216FC9C24(_Unwind_Exception *a1)
{
  SLLexer *v1;
  SLDictionary *v2;
  void **v3;
  _QWORD *v4;
  void *v6;

  std::__list_imp<SLToken *>::clear(v4);
  v6 = *v3;
  if (*v3)
  {
    *((_QWORD *)v1 + 6) = v6;
    operator delete(v6);
  }
  SLDictionary::~SLDictionary(v2);
  SLLexer::~SLLexer(v1);
  _Unwind_Resume(a1);
}

void SLStemTrackerImpl::~SLStemTrackerImpl(SLStemTrackerImpl *this)
{
  SLEncyclopedia *v2;
  SLDictionary *v3;
  uint64_t v4;
  void *v5;

  *(_QWORD *)this = off_24D6839E8;
  v2 = (SLStemTrackerImpl *)((char *)this + 88);
  *((_QWORD *)this + 1) = &unk_24D683A50;
  v3 = (SLStemTrackerImpl *)((char *)this + 8);
  SLEncyclopedia::Remove((uint64_t)this + 88, (SLStemTrackerImpl *)((char *)this + 8));
  v4 = *((_QWORD *)this + 27);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
  SLEncyclopedia::~SLEncyclopedia(v2);
  std::__list_imp<SLToken *>::clear((_QWORD *)this + 8);
  v5 = (void *)*((_QWORD *)this + 5);
  if (v5)
  {
    *((_QWORD *)this + 6) = v5;
    operator delete(v5);
  }
  SLDictionary::~SLDictionary(v3);
  SLLexer::~SLLexer(this);
}

{
  SLStemTrackerImpl::~SLStemTrackerImpl(this);
  JUMPOUT(0x219A0649CLL);
}

void `non-virtual thunk to'SLStemTrackerImpl::~SLStemTrackerImpl(SLStemTrackerImpl *this)
{
  SLStemTrackerImpl::~SLStemTrackerImpl((SLStemTrackerImpl *)((char *)this - 8));
}

{
  SLStemTrackerImpl::~SLStemTrackerImpl((SLStemTrackerImpl *)((char *)this - 8));
  JUMPOUT(0x219A0649CLL);
}

uint64_t SLStemTrackerImpl::SeenRecently(SLStemTrackerImpl *this, const char *a2, size_t a3, int a4)
{
  uint64_t v8;
  _BYTE v10[16];

  SLWordBuilder::SLWordBuilder((SLWordBuilder *)v10);
  if (*((_BYTE *)this + 224))
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "Word %.*s ", a3, a2);
  if (SLEncyclopedia::Lookup((SLStemTrackerImpl *)((char *)this + 88), a2, a3, (SLWordBuilder *)v10, (SLStemTrackerImpl *)((char *)this + 88)))SLStemTrackerImpl::Seen(this, (const char *)this + 152, *((_QWORD *)this + 18), a4);
  else
    SLStemTrackerImpl::Seen(this, a2, a3, a4);
  v8 = *((unsigned __int8 *)this + 32);
  SLWordBuilder::~SLWordBuilder((SLWordBuilder *)v10);
  return v8;
}

void sub_216FC9E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  SLWordBuilder::~SLWordBuilder((SLWordBuilder *)va);
  _Unwind_Resume(a1);
}

uint64_t SLStemTrackerImpl::Seen(SLStemTrackerImpl *this, const char *__src, size_t __n, int a4)
{
  FILE **v8;
  const char *v9;
  SLStemTrackerImpl **v10;
  SLStemTrackerImpl *v11;
  SLStemTrackerImpl *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;

  v8 = (FILE **)MEMORY[0x24BDAC8D8];
  if (*((_BYTE *)this + 224))
  {
    v9 = "";
    if (a4)
      v9 = "[AllCaps] ";
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "-> Stem %.*s %s", __n, __src, v9);
  }
  v10 = (SLStemTrackerImpl **)((char *)this + 64);
  v11 = (SLStemTrackerImpl *)*((_QWORD *)this + 9);
  v12 = (SLStemTrackerImpl *)((char *)this + 64);
  if (v11 != (SLStemTrackerImpl *)((char *)this + 64))
  {
    v13 = 1;
    v12 = (SLStemTrackerImpl *)*((_QWORD *)this + 9);
    while (1)
    {
      v14 = (unsigned __int8 *)*((_QWORD *)v12 + 2);
      v15 = *((_QWORD *)v14 + 1);
      if (!v15)
        break;
      if (v15 == __n && *v14 == a4)
      {
        result = memcmp(__src, v14 + 16, __n);
        if (!(_DWORD)result)
        {
          *((_BYTE *)this + 32) = 1;
          if (*((_BYTE *)this + 224))
          {
            result = fprintf(*v8, "was last seen %lu stems ago\n", v13);
            v11 = (SLStemTrackerImpl *)*((_QWORD *)this + 9);
          }
          if (v12 != v11)
            goto LABEL_21;
          return result;
        }
      }
      ++v13;
      v12 = (SLStemTrackerImpl *)*((_QWORD *)v12 + 1);
      if (v12 == (SLStemTrackerImpl *)v10)
      {
        v12 = (SLStemTrackerImpl *)((char *)this + 64);
        break;
      }
    }
  }
  if (*((_BYTE *)this + 224))
    fwrite("is new\n", 7uLL, 1uLL, *v8);
  if (v12 == (SLStemTrackerImpl *)v10)
    v12 = *v10;
  *((_BYTE *)this + 32) = 0;
  v18 = *((_QWORD *)v12 + 2);
  *(_BYTE *)v18 = a4;
  *(_QWORD *)(v18 + 8) = __n;
  memcpy((void *)(v18 + 16), __src, __n);
LABEL_21:
  v19 = *((_QWORD *)v12 + 2);
  v20 = *(_QWORD *)v12;
  *(_QWORD *)(v20 + 8) = *((_QWORD *)v12 + 1);
  **((_QWORD **)v12 + 1) = v20;
  --*((_QWORD *)this + 10);
  operator delete(v12);
  result = (uint64_t)operator new(0x18uLL);
  v21 = (_QWORD *)*((_QWORD *)this + 9);
  v22 = *((_QWORD *)this + 10);
  *(_QWORD *)result = v10;
  *(_QWORD *)(result + 8) = v21;
  *(_QWORD *)(result + 16) = v19;
  *v21 = result;
  *((_QWORD *)this + 9) = result;
  *((_QWORD *)this + 10) = v22 + 1;
  return result;
}

uint64_t SLStemTrackerImpl::Reset(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(this + 40);
  v2 = *(_QWORD *)(this + 48) - v1;
  if (v2)
  {
    v3 = v2 / 80;
    if (v3 <= 1)
      v3 = 1;
    v4 = (_QWORD *)(v1 + 8);
    do
    {
      *v4 = 0;
      v4 += 10;
      --v3;
    }
    while (v3);
  }
  return this;
}

uint64_t SLStemTrackerImpl::Lookup(SLStemTrackerImpl *this, const char *a2, size_t a3, SLWordBuilder *a4, SLDictionary *a5)
{
  uint64_t v8;

  v8 = (***(uint64_t (****)(_QWORD, const char *, size_t, SLWordBuilder *, _QWORD))(*((_QWORD *)this + 16)
                                                                                            + 24))(*(_QWORD *)(*((_QWORD *)this + 16) + 24), a2, a3, a4, 0);
  if ((_DWORD)v8)
  {
    *((_QWORD *)this + 18) = a3;
    memcpy((char *)this + 152, a2, a3);
  }
  return v8;
}

uint64_t `non-virtual thunk to'SLStemTrackerImpl::Lookup(SLStemTrackerImpl *this, const char *a2, size_t a3, SLWordBuilder *a4, SLDictionary *a5)
{
  uint64_t v8;

  v8 = (***(uint64_t (****)(_QWORD, const char *, size_t, SLWordBuilder *, _QWORD))(*((_QWORD *)this + 15)
                                                                                            + 24))(*(_QWORD *)(*((_QWORD *)this + 15) + 24), a2, a3, a4, 0);
  if ((_DWORD)v8)
  {
    *((_QWORD *)this + 17) = a3;
    memcpy((char *)this + 144, a2, a3);
  }
  return v8;
}

_QWORD *SLStemTrackerImpl::NextToken(SLStemTrackerImpl *this)
{
  _QWORD *v2;
  _QWORD *v3;
  const __CFString *Text;
  const char *CStringPtr;
  size_t v6;
  char buffer[64];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)(***((uint64_t (****)(_QWORD))this + 27))(*((_QWORD *)this + 27));
  v3 = v2;
  if (v2)
  {
    if (*(_BYTE *)v2 == 6)
    {
      (*(void (**)(SLStemTrackerImpl *))(*(_QWORD *)this + 72))(this);
    }
    else if (!*(_BYTE *)v2)
    {
      Text = SLTokenGetText(v2);
      CStringPtr = CFStringGetCStringPtr(Text, 0x8000100u);
      if (!CStringPtr)
      {
        CStringPtr = buffer;
        if (!CFStringGetCString(Text, buffer, 64, 0x8000100u))
          CStringPtr = "";
      }
      v6 = strlen(CStringPtr);
      if (v6)
      {
        if (*((_BYTE *)v3 + 2) == 1)
        {
          (*(void (**)(SLStemTrackerImpl *, const char *, size_t, _QWORD))(*(_QWORD *)this + 64))(this, CStringPtr, v6, (*((_DWORD *)v3 + 4) >> 4) & 1);
        }
        else if (!*((_BYTE *)v3 + 2)
               && (*(unsigned int (**)(SLStemTrackerImpl *, const char *, size_t, _QWORD))(*(_QWORD *)this + 64))(this, CStringPtr, v6, (*((_DWORD *)v3 + 4) >> 4) & 1))
        {
          *((_BYTE *)v3 + 2) = 2;
        }
      }
    }
  }
  return v3;
}

uint64_t SLStemTrackerImpl::LexerBehavior(SLStemTrackerImpl *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 27) + 8))(*((_QWORD *)this + 27));
}

uint64_t SLStemTrackerImpl::SetLexerBehavior(SLStemTrackerImpl *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 27) + 16))(*((_QWORD *)this + 27));
}

uint64_t SLStemTrackerImpl::SetDelim(SLStemTrackerImpl *this, const unsigned __int16 *a2)
{
  return (*(uint64_t (**)(_QWORD, const unsigned __int16 *))(**((_QWORD **)this + 27) + 24))(*((_QWORD *)this + 27), a2);
}

uint64_t SLStemTrackerImpl::Delim(SLStemTrackerImpl *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 27) + 32))(*((_QWORD *)this + 27));
}

uint64_t SLStemTrackerImpl::SetErrorHandler(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 216) + 40))(*(_QWORD *)(a1 + 216));
}

_QWORD *std::vector<SLStemTrackerImpl::Stem>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<SLStemTrackerImpl::Stem>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 80 * ((80 * a2 - 80) / 0x50) + 80;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_216FCA308(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<SLStemTrackerImpl::Stem>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x333333333333334)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SLStemTrackerImpl::Stem>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[80 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<SLStemTrackerImpl::Stem>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(80 * a2);
}

void SLCFArrayBuilder::~SLCFArrayBuilder(SLCFArrayBuilder *this)
{
  CFTypeRef *v2;
  unint64_t v3;

  v2 = (CFTypeRef *)*((_QWORD *)this + 1);
  if (v2 != *(CFTypeRef **)this)
  {
    v3 = 0;
    v2 = *(CFTypeRef **)this;
    do
    {
      CFRelease(v2[v3++]);
      v2 = *(CFTypeRef **)this;
    }
    while (v3 < (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3);
  }
  if (v2)
  {
    *((_QWORD *)this + 1) = v2;
    operator delete(v2);
  }
}

CFArrayRef SLCFArrayBuilder::CreateArray(const void ***this)
{
  return CFArrayCreate(0, *this, this[1] - *this, MEMORY[0x24BDBD690]);
}

void SLCFDictionaryBuilder::push_back(SLCFDictionaryBuilder *this, const void *a2, const void *a3)
{
  char *v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;

  v8 = *((_QWORD *)this + 5);
  v6 = (char *)this + 40;
  v7 = v8;
  v9 = (_QWORD *)*((_QWORD *)v6 - 1);
  if ((unint64_t)v9 >= v8)
  {
    v11 = (void **)(v6 - 16);
    v12 = *((_QWORD *)v6 - 2);
    v13 = ((uint64_t)v9 - v12) >> 3;
    if ((unint64_t)(v13 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v14 = v7 - v12;
    v15 = v14 >> 2;
    if (v14 >> 2 <= (unint64_t)(v13 + 1))
      v15 = v13 + 1;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    if (v16)
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SLHomograph *>>((uint64_t)v6, v16);
    else
      v17 = 0;
    v18 = &v17[8 * v13];
    v19 = &v17[8 * v16];
    *(_QWORD *)v18 = a2;
    v10 = v18 + 8;
    v21 = (char *)*((_QWORD *)this + 3);
    v20 = (char *)*((_QWORD *)this + 4);
    if (v20 != v21)
    {
      do
      {
        v22 = *((_QWORD *)v20 - 1);
        v20 -= 8;
        *((_QWORD *)v18 - 1) = v22;
        v18 -= 8;
      }
      while (v20 != v21);
      v20 = (char *)*v11;
    }
    *((_QWORD *)this + 3) = v18;
    *((_QWORD *)this + 4) = v10;
    *((_QWORD *)this + 5) = v19;
    if (v20)
      operator delete(v20);
  }
  else
  {
    *v9 = a2;
    v10 = v9 + 1;
  }
  v23 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 4) = v10;
  v24 = (_QWORD *)*((_QWORD *)this + 1);
  if ((unint64_t)v24 >= v23)
  {
    v26 = ((uint64_t)v24 - *(_QWORD *)this) >> 3;
    if ((unint64_t)(v26 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v27 = v23 - *(_QWORD *)this;
    v28 = v27 >> 2;
    if (v27 >> 2 <= (unint64_t)(v26 + 1))
      v28 = v26 + 1;
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
      v29 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v29 = v28;
    if (v29)
      v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SLHomograph *>>((uint64_t)this + 16, v29);
    else
      v30 = 0;
    v31 = &v30[8 * v26];
    v32 = &v30[8 * v29];
    *(_QWORD *)v31 = a3;
    v25 = v31 + 8;
    v34 = *(char **)this;
    v33 = (char *)*((_QWORD *)this + 1);
    if (v33 != *(char **)this)
    {
      do
      {
        v35 = *((_QWORD *)v33 - 1);
        v33 -= 8;
        *((_QWORD *)v31 - 1) = v35;
        v31 -= 8;
      }
      while (v33 != v34);
      v33 = *(char **)this;
    }
    *(_QWORD *)this = v31;
    *((_QWORD *)this + 1) = v25;
    *((_QWORD *)this + 2) = v32;
    if (v33)
      operator delete(v33);
  }
  else
  {
    *v24 = a3;
    v25 = v24 + 1;
  }
  *((_QWORD *)this + 1) = v25;
}

CFDictionaryRef SLCFDictionaryBuilder::CreateDictionary(const void ***this)
{
  return CFDictionaryCreate(0, this[3], *this, this[1] - *this, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
}

void SLDissecter::SLDissecter(SLDissecter *this, SLPronouncer *a2)
{
  *(_WORD *)this = **(char **)(*(uint64_t (**)(SLPronouncer *, uint64_t))(*(_QWORD *)a2 + 216))(a2, 207);
  *((_WORD *)this + 1) = **(char **)(*(uint64_t (**)(SLPronouncer *, uint64_t))(*(_QWORD *)a2 + 216))(a2, 208);
  *((_BYTE *)this + 4) = (*(uint64_t (**)(SLPronouncer *))(*(_QWORD *)a2 + 200))(a2);
}

{
  *(_WORD *)this = **(char **)(*(uint64_t (**)(SLPronouncer *, uint64_t))(*(_QWORD *)a2 + 216))(a2, 207);
  *((_WORD *)this + 1) = **(char **)(*(uint64_t (**)(SLPronouncer *, uint64_t))(*(_QWORD *)a2 + 216))(a2, 208);
  *((_BYTE *)this + 4) = (*(uint64_t (**)(SLPronouncer *))(*(_QWORD *)a2 + 200))(a2);
}

uint64_t SLDissecter::Create(SLDissecter *this, SLPronouncer *a2)
{
  uint64_t v3;

  v3 = operator new();
  *(_WORD *)v3 = **(char **)(*(uint64_t (**)(SLDissecter *, uint64_t))(*(_QWORD *)this + 216))(this, 207);
  *(_WORD *)(v3 + 2) = **(char **)(*(uint64_t (**)(SLDissecter *, uint64_t))(*(_QWORD *)this + 216))(this, 208);
  *(_BYTE *)(v3 + 4) = (*(uint64_t (**)(SLDissecter *))(*(_QWORD *)this + 200))(this);
  return v3;
}

void sub_216FCA778(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A0649C](v1, 0x1000C405D080610);
  _Unwind_Resume(a1);
}

uint64_t SLDissecter::DissectNumber(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  BOOL v21;

  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  v5 = a3 + a4;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_QWORD *)(a5 + 8) = a3;
  if (a4 >= 1)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = *(_QWORD *)(a2 + 56);
    v10 = *(unsigned __int16 *)result;
    v11 = a3;
    while (1)
    {
      v12 = *(unsigned __int16 *)(v9 + 2 * v11);
      if ((_DWORD)v12 == v10)
      {
        *(_BYTE *)a5 = 1;
      }
      else
      {
        if ((v12 & 0xFFFFFFDF) == 0x45 || (_DWORD)v12 == *(unsigned __int16 *)(result + 2))
          goto LABEL_20;
        if (SLChar::sCharClass[v12 & 0x3F | (SLChar::sUniMap[v12 >> 6] << 6)] == 2)
        {
          if (v8)
          {
            if (v8 > 0xF423F)
              goto LABEL_17;
LABEL_16:
            v6 = v12 + 10 * v8 - 48;
            *(_QWORD *)(a5 + 56) = v6;
            v8 = v6;
            goto LABEL_17;
          }
          if ((_DWORD)v12 != 48 || v7 == 255)
            goto LABEL_16;
          v8 = 0;
          *(_BYTE *)(a5 + 4) = ++v7;
        }
      }
LABEL_17:
      if (++v11 >= v5)
        goto LABEL_20;
    }
  }
  v6 = 0;
  LODWORD(v12) = 0;
  v11 = a3;
LABEL_20:
  *(_QWORD *)(a5 + 16) = v11 - a3;
  if ((_DWORD)v12 == *(unsigned __int16 *)(result + 2))
  {
    v14 = v11 + 1;
    *(_QWORD *)(a5 + 24) = v11 + 1;
    if (v11 + 1 >= v5)
    {
      v15 = 0;
      ++v11;
    }
    else
    {
      v15 = 0;
      v16 = *(_QWORD *)(a2 + 56);
      ++v11;
      while (1)
      {
        v17 = *(unsigned __int16 *)(v16 + 2 * v11);
        result = v17 & 0xFFFFFFDF;
        if ((_DWORD)result == 69)
          break;
        if ((_DWORD)v17 != 48)
          *(_BYTE *)(a5 + 3) = 1;
        result = v17 + 10 * v15 - 48;
        if (v15 < 0x989680)
          v15 = v17 + 10 * v15 - 48;
        if (v5 == ++v11)
        {
          v11 = a3 + a4;
          break;
        }
      }
      LODWORD(v12) = v17;
    }
    *(_QWORD *)(a5 + 32) = v11 - v14;
    *(_BYTE *)(a5 + 1) = v15 == 1;
  }
  else
  {
    v15 = 0;
  }
  if ((v12 & 0xFFFFFFDF) == 0x45)
  {
    v18 = v11 + 1;
    v19 = v5 - v18;
    *(_QWORD *)(a5 + 40) = v18;
    *(_QWORD *)(a5 + 48) = v19;
  }
  else
  {
    v19 = 0;
  }
  v20 = v19 == 0;
  if (v15)
    v20 = 0;
  v21 = v6 == 1 && v20;
  *(_BYTE *)(a5 + 2) = v21;
  return result;
}

void SLDissecter::DissectUnit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;

  v3 = 0;
  v4 = *(_QWORD *)(a2 + 56);
  v5 = *(_QWORD *)(a2 + 64) - v4;
  v6 = (v5 & 0xFFFFFFFFFFFFFFFELL) + v4 - 4;
  do
  {
    v7 = (unsigned __int16)SLChar::sCharClass[*(_WORD *)(v6 + 2 * v3) & 0x3F | (SLChar::sUniMap[(unint64_t)*(unsigned __int16 *)(v6 + 2 * v3) >> 6] << 6)];
    --v3;
    if (v7)
      v8 = (v7 & 0x1F) == 1;
    else
      v8 = 1;
  }
  while (v8);
  v9 = (v5 >> 1) + v3;
  *(_QWORD *)(a3 + 24) = v9;
  *(_QWORD *)(a3 + 32) = ~v3;
  v10 = v9 - 1;
  *(_BYTE *)a3 = v7 == 6;
  if (v7 != 6)
    v10 = v9;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = v10;
}

void SLDissecter::DissectRoman(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;

  v3 = 0;
  v4 = *(_QWORD *)(a2 + 56);
  v5 = *(_QWORD *)(a2 + 64) - v4;
  v6 = (v5 & 0xFFFFFFFFFFFFFFFELL) + v4 - 4;
  do
  {
    v7 = SLChar::sCharClass[*(_WORD *)(v6 + 2 * v3) & 0x3F | (SLChar::sUniMap[(unint64_t)*(unsigned __int16 *)(v6 + 2 * v3) >> 6] << 6)] & 0x9F;
    --v3;
  }
  while (v7 == 129);
  v8 = (v5 >> 1) + v3;
  a3[3] = v8;
  a3[4] = ~v3;
  a3[1] = 0;
  a3[2] = v8;
}

uint64_t SLDissecter::EvaluateRoman(SLDissecter *this, SLToken *a2, CFRange a3)
{
  unsigned __int16 v3;
  CFIndex v4;
  unsigned __int16 v5;
  unsigned int v6;
  unint64_t v7;
  int v8;
  __int16 v9;

  if (a3.length < 1)
  {
    return 0;
  }
  else
  {
    v3 = 0;
    v4 = a3.location + a3.length;
    v5 = 10000;
    do
    {
      v6 = 0;
      v7 = *(unsigned __int16 *)(*((_QWORD *)a2 + 7) + 2 * a3.location);
      v8 = (unsigned __int16)(SLChar::sToUpper[v7 & 0x3F | (SLChar::sUniMap[v7 >> 6] << 6)] + v7);
      switch(v8)
      {
        case 'C':
          v6 = 100;
          break;
        case 'D':
          v6 = 500;
          break;
        case 'E':
        case 'F':
        case 'G':
        case 'H':
        case 'J':
        case 'K':
          break;
        case 'I':
          v6 = 1;
          break;
        case 'L':
          v6 = 50;
          break;
        case 'M':
          v6 = 1000;
          break;
        default:
          if (v8 == 86)
          {
            v6 = 5;
          }
          else if (v8 == 88)
          {
            v6 = 10;
          }
          break;
      }
      if (v6 > v5)
        v9 = -2 * v5;
      else
        v9 = 0;
      v3 += v6 + v9;
      ++a3.location;
      v5 = v6;
    }
    while (a3.location < v4);
  }
  return v3;
}

uint64_t SLDissecter::DissectTime(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned __int16 *v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  unsigned __int16 *v7;
  int v8;
  int v9;
  unint64_t v10;
  int v11;
  char v12;
  char v13;
  char v14;
  int v15;
  unint64_t v16;
  int v17;
  char v18;
  char v19;
  unsigned __int16 *v20;
  uint64_t v21;
  unsigned int v22;
  char v23;

  *(_QWORD *)(a3 + 80) = 0;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  v3 = *(unsigned __int16 **)(a2 + 56);
  v4 = *v3;
  if (SLChar::sCharClass[v4 & 0x3F | (SLChar::sUniMap[v4 >> 6] << 6)] == 2)
  {
    v5 = 0;
    v6 = 0;
    v7 = *(unsigned __int16 **)(a2 + 56);
    do
    {
      v9 = v7[1];
      ++v7;
      v8 = v9;
      v6 = v4 + 10 * v6 - 48;
      *(_BYTE *)a3 = v6;
      *(_QWORD *)(a3 + 16) = ++v5;
      LODWORD(v4) = v9;
    }
    while (SLChar::sCharClass[v9 & 0x3F | (SLChar::sUniMap[(unsigned __int16)v9 >> 6] << 6)] == 2);
    LODWORD(v4) = v8;
  }
  else
  {
    v5 = 0;
    v7 = *(unsigned __int16 **)(a2 + 56);
  }
  if ((_DWORD)v4 == 58 || (_DWORD)v4 == 46)
  {
    LODWORD(v4) = v7[3];
    *(_QWORD *)(a3 + 24) = v5 + 1;
    *(_QWORD *)(a3 + 32) = 2;
    v10 = v7[2];
    v11 = (unsigned __int16)SLChar::sCharClass[v10 & 0x3F | (SLChar::sUniMap[v10 >> 6] << 6)];
    v12 = *((_BYTE *)v7 + 2);
    v13 = v10 + 10 * v12 - 16;
    v14 = v12 - 48;
    if (v11 != 2)
      v13 = v14;
    *(_BYTE *)(a3 + 1) = v13;
    if ((_DWORD)v4 == 58)
    {
      *(_QWORD *)(a3 + 40) = v5 + 4;
      *(_QWORD *)(a3 + 48) = 2;
      v15 = v7[6];
      v7 += 6;
      LODWORD(v4) = v15;
      v16 = *(v7 - 1);
      v17 = (unsigned __int16)SLChar::sCharClass[v16 & 0x3F | (SLChar::sUniMap[v16 >> 6] << 6)];
      v18 = *((_BYTE *)v7 - 4);
      v19 = v16 + 10 * v18 - 16;
      if (v17 != 2)
        v19 = v18 - 48;
      *(_BYTE *)(a3 + 2) = v19;
    }
    else
    {
      v7 += 3;
    }
  }
  if ((_DWORD)v4 == *(unsigned __int16 *)(result + 2))
  {
    *(_QWORD *)(a3 + 56) = v7 - v3 + 1;
    v4 = v7[1];
    if (SLChar::sCharClass[v4 & 0x3F | (SLChar::sUniMap[v4 >> 6] << 6)] == 2)
    {
      v20 = v7 + 2;
      v21 = 1;
      do
      {
        *(_QWORD *)(a3 + 64) = v21;
        v22 = *v20++;
        LODWORD(v4) = v22;
        ++v21;
      }
      while (SLChar::sCharClass[v22 & 0x3F | (SLChar::sUniMap[(unint64_t)v22 >> 6] << 6)] == 2);
      v7 = v20 - 1;
    }
    else
    {
      ++v7;
    }
  }
  v23 = 65;
  if ((int)v4 > 96)
  {
    if ((_DWORD)v4 != 97)
    {
      if ((_DWORD)v4 != 112)
        goto LABEL_24;
LABEL_27:
      v23 = 80;
    }
  }
  else if ((_DWORD)v4 != 65)
  {
    if ((_DWORD)v4 != 80)
    {
LABEL_24:
      *(_BYTE *)(a3 + 3) = 32;
      return result;
    }
    goto LABEL_27;
  }
  *(_BYTE *)(a3 + 3) = v23;
  *(_QWORD *)(a3 + 72) = v7 - v3;
  *(_QWORD *)(a3 + 80) = 2;
  return result;
}

uint64_t SLDissecter::DissectDate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int16 *v5;
  uint64_t v6;
  unsigned __int16 *v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  BOOL v19;
  int v20;
  char v21;
  char v22;
  _WORD *v23;
  unint64_t v24;
  int v25;
  char v26;
  char v27;
  _WORD *v28;
  unint64_t v29;
  char v30;
  char v31;
  char v32;

  v3 = 0;
  v4 = *(_QWORD *)(a2 + 56);
  v5 = (unsigned __int16 *)(v4 + 2);
  do
  {
    v6 = v3;
    v7 = v5;
    v8 = (unsigned __int16)SLChar::sCharClass[*(_WORD *)(v4 + 2 * v3) & 0x3F | (SLChar::sUniMap[(unint64_t)*(unsigned __int16 *)(v4 + 2 * v3) >> 6] << 6)];
    ++v3;
    ++v5;
  }
  while (v8 == 2);
  v9 = -1;
  do
  {
    v10 = *v7++;
    ++v9;
  }
  while (SLChar::sCharClass[v10 & 0x3F | (SLChar::sUniMap[(unint64_t)v10 >> 6] << 6)] == 2);
  v11 = v3 + v9 + 1;
  v12 = -1;
  v13 = v11;
  do
  {
    v14 = *v7++;
    ++v12;
  }
  while (SLChar::sCharClass[v14 & 0x3F | (SLChar::sUniMap[(unint64_t)v14 >> 6] << 6)] == 2);
  if ((*(_BYTE *)(a2 + 17) & 4) != 0)
  {
    if (*(_BYTE *)(result + 4))
    {
      v13 = v3;
      v16 = v9;
      v3 = 0;
    }
    else
    {
      v13 = 0;
      v16 = v6;
      v6 = v9;
    }
    *(_QWORD *)(a3 + 40) = v13;
    *(_QWORD *)(a3 + 48) = v16;
    *(_QWORD *)(a3 + 24) = v3;
    *(_QWORD *)(a3 + 32) = v6;
    v15 = (uint64_t *)(a3 + 16);
    v6 = v12;
    *(_QWORD *)(a3 + 8) = v11;
  }
  else
  {
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = v6;
    *(_QWORD *)(a3 + 24) = v3;
    *(_QWORD *)(a3 + 32) = v9;
    v15 = (uint64_t *)(a3 + 48);
    *(_QWORD *)(a3 + 40) = v11;
    v11 = 0;
  }
  *v15 = v12;
  v17 = (char *)(v4 + 2 * v11);
  if (v6 == 4)
  {
    LOWORD(v18) = 1000 * (*v17 - 48)
                + 100 * (v17[2] - 48)
                + 10 * (v17[4] - 48)
                + (v17[6] - 48);
    v19 = (unsigned __int16)(v18 - 1000) < 0x7D0u;
  }
  else
  {
    v18 = *((unsigned __int16 *)v17 + 1);
    v20 = (unsigned __int16)SLChar::sCharClass[v18 & 0x3F | (SLChar::sUniMap[v18 >> 6] << 6)];
    v21 = *v17;
    LOBYTE(v18) = v18 + 10 * v21 - 16;
    v22 = v21 - 48;
    if (v20 != 2)
      LOBYTE(v18) = v22;
    LOWORD(v18) = v18;
    v19 = 1;
  }
  *(_WORD *)(a3 + 2) = v18;
  *(_BYTE *)a3 = v19;
  v23 = (_WORD *)(v4 + 2 * v3);
  v24 = (unsigned __int16)v23[1];
  v25 = (unsigned __int16)SLChar::sCharClass[v24 & 0x3F | (SLChar::sUniMap[v24 >> 6] << 6)];
  LOWORD(v23) = *v23;
  v26 = v24 + 10 * (_BYTE)v23 - 16;
  v27 = (_BYTE)v23 - 48;
  if (v25 == 2)
    v27 = v26;
  *(_BYTE *)(a3 + 4) = v27;
  v28 = (_WORD *)(v4 + 2 * v13);
  v29 = (unsigned __int16)v28[1];
  LOWORD(v28) = *v28;
  v30 = v29 + 10 * (_BYTE)v28 - 16;
  v31 = (_BYTE)v28 - 48;
  if (SLChar::sCharClass[v29 & 0x3F | (SLChar::sUniMap[v29 >> 6] << 6)] == 2)
    v32 = v30;
  else
    v32 = v31;
  *(_BYTE *)(a3 + 5) = v32;
  return result;
}

uint64_t SLDissecter::DissectGeoLoc(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned __int16 *v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  BOOL v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  BOOL v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int16 *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  BOOL v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  int v29;

  *(_QWORD *)(a3 + 112) = 0;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  v3 = *(unsigned __int16 **)(a2 + 56);
  v4 = *v3;
  v5 = *(_DWORD *)(a2 + 16);
  v6 = 0;
  if ((v5 & 0x400) != 0)
  {
LABEL_20:
    if ((v5 & 0x600) == 0x400)
    {
LABEL_21:
      v12 = 0;
      *(_QWORD *)(a3 + 72) = v6;
      while (SLChar::sCharClass[v4 & 0x3F | (SLChar::sUniMap[(unint64_t)v4 >> 6] << 6)] == 2
           || v4 == *(unsigned __int16 *)(result + 2))
      {
        if (v12)
          v13 = 0;
        else
          v13 = v4 == 49;
        v14 = v13;
        *(_BYTE *)(a3 + 2) = v14;
        v4 = v3[v6 + 1 + v12++];
      }
      *(_QWORD *)(a3 + 80) = v12;
      v15 = v6 + v12;
      if (v4)
      {
        v16 = 0;
        v17 = 0;
        do
        {
          v18 = (unsigned __int16)SLChar::sCharClass[v4 & 0x3F | (SLChar::sUniMap[(unint64_t)v4 >> 6] << 6)];
          if (v18 != 5)
          {
            if (v18 == 2)
              goto LABEL_40;
            if (!v17)
            {
              *(_QWORD *)(a3 + 88) = v15;
              v17 = v15;
            }
            *(_QWORD *)(a3 + 96) = ++v16;
          }
          v19 = v15 + 1;
          v4 = v3[++v15];
        }
        while (v4);
        v15 = v19;
      }
LABEL_40:
      if (SLChar::sCharClass[v4 & 0x3F | (SLChar::sUniMap[(unint64_t)v4 >> 6] << 6)] == 2)
      {
        v20 = 0;
        v21 = &v3[v15];
        v22 = 1;
        do
        {
          if (!v20)
          {
            v20 = v15 + v22 - 1;
            *(_QWORD *)(a3 + 104) = v20;
          }
          *(_QWORD *)(a3 + 112) = v22;
          v23 = (unsigned __int16)SLChar::sCharClass[v21[v22] & 0x3F | (SLChar::sUniMap[(unint64_t)v21[v22] >> 6] << 6)];
          ++v22;
        }
        while (v23 == 2);
      }
    }
    else
    {
      v24 = 0;
      *(_QWORD *)(a3 + 40) = v6;
      while (SLChar::sCharClass[v4 & 0x3F | (SLChar::sUniMap[(unint64_t)v4 >> 6] << 6)] == 2
           || v4 == *(unsigned __int16 *)(result + 2))
      {
        if (v24)
          v25 = 0;
        else
          v25 = v4 == 49;
        v26 = v25;
        *(_BYTE *)(a3 + 1) = v26;
        v4 = v3[v6 + 1 + v24++];
      }
      *(_QWORD *)(a3 + 48) = v24;
      if (v4)
      {
        v27 = 0;
        v28 = 0;
        v6 += v24;
        do
        {
          v29 = (unsigned __int16)SLChar::sCharClass[v4 & 0x3F | (SLChar::sUniMap[(unint64_t)v4 >> 6] << 6)];
          if (v29 != 5)
          {
            if (v29 == 2)
              goto LABEL_21;
            if (!v28)
            {
              *(_QWORD *)(a3 + 56) = v6;
              v28 = v6;
            }
            *(_QWORD *)(a3 + 64) = ++v27;
          }
          v4 = v3[++v6];
        }
        while (v4);
      }
    }
  }
  else
  {
    while (SLChar::sCharClass[v4 & 0x3F | (SLChar::sUniMap[(unint64_t)v4 >> 6] << 6)] == 2
         || v4 == *(unsigned __int16 *)(result + 2))
    {
      if (v6)
        v7 = 0;
      else
        v7 = v4 == 49;
      v8 = v7;
      *(_BYTE *)a3 = v8;
      v4 = v3[++v6];
    }
    *(_QWORD *)(a3 + 16) = v6;
    if (v4)
    {
      v9 = 0;
      v10 = 0;
      do
      {
        v11 = (unsigned __int16)SLChar::sCharClass[v4 & 0x3F | (SLChar::sUniMap[(unint64_t)v4 >> 6] << 6)];
        if (v11 != 5)
        {
          if (v11 == 2)
            goto LABEL_20;
          if (!v10)
          {
            *(_QWORD *)(a3 + 24) = v6;
            v10 = v6;
          }
          *(_QWORD *)(a3 + 32) = ++v9;
        }
        v4 = v3[++v6];
      }
      while (v4);
    }
  }
  return result;
}

void SLDissecter::DissectDottedNumber(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  BOOL v23;
  char v25;
  uint64_t v26;
  uint64_t v27;
  void **v28;

  v4 = 0;
  *(_BYTE *)a3 = 0;
  v26 = a3 + 24;
  v27 = a2;
  v28 = (void **)(a3 + 8);
  v5 = *(_QWORD *)(a2 + 56);
  do
  {
    v6 = v4 + 1;
    v7 = *(unsigned __int16 *)(v5 + 2 * (v4 + 1));
    if (SLChar::sCharClass[v7 & 0x3F | (SLChar::sUniMap[v7 >> 6] << 6)] == 2)
    {
      v8 = 0;
      v9 = v5 + 4;
      v10 = v4;
      do
      {
        v8 = v7 + 10 * v8 - 48;
        v7 = *(unsigned __int16 *)(v9 + 2 * v10++);
      }
      while (SLChar::sCharClass[v7 & 0x3F | (SLChar::sUniMap[v7 >> 6] << 6)] == 2);
      v6 = v10 + 1;
    }
    else
    {
      v8 = 0;
      v10 = v4;
    }
    v11 = v6 - v4;
    v13 = *(char **)(a3 + 16);
    v12 = *(_QWORD *)(a3 + 24);
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)*v28;
      v16 = (v13 - (_BYTE *)*v28) >> 4;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 60)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 3 > v17)
        v17 = v18 >> 3;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0)
        v19 = 0xFFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CFRange>>(v26, v19);
        v15 = *(char **)(a3 + 8);
        v13 = *(char **)(a3 + 16);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[16 * v16];
      *(_QWORD *)v21 = v4;
      *((_QWORD *)v21 + 1) = v11;
      v22 = v21;
      if (v13 != v15)
      {
        do
        {
          *((_OWORD *)v22 - 1) = *((_OWORD *)v13 - 1);
          v22 -= 16;
          v13 -= 16;
        }
        while (v13 != v15);
        v15 = (char *)*v28;
      }
      v14 = v21 + 16;
      *(_QWORD *)(a3 + 8) = v22;
      *(_QWORD *)(a3 + 16) = v21 + 16;
      *(_QWORD *)(a3 + 24) = &v20[16 * v19];
      if (v15)
        operator delete(v15);
      a2 = v27;
    }
    else
    {
      *(_QWORD *)v13 = v4;
      *((_QWORD *)v13 + 1) = v11;
      v14 = v13 + 16;
    }
    *(_QWORD *)(a3 + 16) = v14;
    if (*(_BYTE *)a3)
      v23 = 0;
    else
      v23 = v11 <= 3;
    v25 = !v23 || v8 > 0xFF;
    *(_BYTE *)a3 = v25;
    v4 = v10 + 2;
    v5 = *(_QWORD *)(a2 + 56);
  }
  while (*(_WORD *)(v5 + 2 * v6));
}

uint64_t SLDissecter::DissectNumericBullet(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t i;
  unint64_t v9;
  unint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;

  v3 = 0;
  v4 = *(_QWORD *)(a2 + 56);
  do
  {
    v5 = (unsigned __int16)SLChar::sCharClass[*(_WORD *)(v4 + 2 * v3) & 0x3F | (SLChar::sUniMap[(unint64_t)*(unsigned __int16 *)(v4 + 2 * v3) >> 6] << 6)];
    ++v3;
  }
  while (v5 == 5);
  v6 = v3 - 1;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = v3 - 1;
  if (v5 == 2)
  {
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
  }
  else
  {
    *(_QWORD *)(a3 + 24) = v6;
    *(_QWORD *)(a3 + 32) = 1;
    do
    {
      v7 = (unsigned __int16)SLChar::sCharClass[*(_WORD *)(v4 + 2 * v3) & 0x3F | (SLChar::sUniMap[(unint64_t)*(unsigned __int16 *)(v4 + 2 * v3) >> 6] << 6)];
      ++v3;
    }
    while (v7 == 5);
    v6 = v3 - 1;
  }
  *(_QWORD *)(a3 + 40) = v6;
  *(_BYTE *)a3 = 0;
  for (i = v6; ; ++i)
  {
    v9 = *(unsigned __int16 *)(v4 + 2 * i);
    if (SLChar::sCharClass[v9 & 0x3F | (SLChar::sUniMap[v9 >> 6] << 6)] == 2)
      continue;
    if ((_DWORD)v9 != *(unsigned __int16 *)(result + 2))
      break;
    v10 = *(unsigned __int16 *)(v4 + 2 * (i + 1));
    if (SLChar::sCharClass[v10 & 0x3F | (SLChar::sUniMap[v10 >> 6] << 6)] != 2)
      break;
    *(_BYTE *)a3 = 1;
    ++i;
  }
  *(_QWORD *)(a3 + 48) = i - v6;
  v11 = (unsigned __int16 *)(v4 + 2 * i);
  v12 = i - 1;
  do
  {
    v14 = *v11++;
    v13 = v14;
    ++v12;
  }
  while (SLChar::sCharClass[v14 & 0x3F | (SLChar::sUniMap[(unint64_t)v14 >> 6] << 6)] == 5);
  v15 = (_QWORD *)(a3 + 56);
  if (v13)
  {
    v16 = 0;
    *v15 = v12;
    do
    {
      v17 = *v11++;
      ++v16;
    }
    while (v17);
    *(_QWORD *)(a3 + 64) = v16;
  }
  else
  {
    *v15 = 0;
    *(_QWORD *)(a3 + 64) = 0;
  }
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CFRange>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

SLAgglomerate *SLAgglomerate::Create(SLAgglomerate *this, const __CFLocale *a2, SLDictionary *a3)
{
  const __CFString *Value;

  Value = (const __CFString *)CFLocaleGetValue(this, (CFLocaleKey)*MEMORY[0x24BDBD418]);
  if (CFStringCompare(Value, CFSTR("en"), 0))
    SLAgglomerate::Create();
  return SLCreateAgglomerateEng(a2);
}

void SLAgglomerate::SLAgglomerate(SLAgglomerate *this, SLDictionary *a2)
{
  *(_QWORD *)this = &off_24D683B28;
  *((_QWORD *)this + 1) = a2;
}

{
  *(_QWORD *)this = &off_24D683B28;
  *((_QWORD *)this + 1) = a2;
}

void SLAgglomerate::~SLAgglomerate(SLAgglomerate *this)
{
  JUMPOUT(0x219A0649CLL);
}

uint64_t SLAgglomerate::Lookup(SLDictionary **this, const char *a2, unint64_t a3, unint64_t a4, BOOL a5, SLTokenList *a6)
{
  unint64_t v12;
  uint64_t result;

  if (a4 < 2)
    return 0;
  v12 = 3;
  do
  {
    result = SLAgglomerate::LookupWords(this, a2, a3, v12 - 1, a5, a6);
    if ((result & 1) != 0)
      break;
  }
  while (v12++ <= a4);
  return result;
}

uint64_t SLAgglomerate::LookupWords(SLDictionary **this, const char *a2, unint64_t a3, unint64_t a4, BOOL a5, SLTokenList *a6)
{
  uint64_t v6;
  SLToken *v11;
  SLToken *v12;
  SLDictionaryRecursion *v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  BOOL v18;
  _BOOL4 v19;
  _BOOL4 v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  SLToken *v29;
  SLToken *v31;
  _BYTE v33[72];
  _BYTE v34[80];

  v6 = 0;
  if (a3 < 4 || 32 * a4 < a3)
    return v6;
  v11 = (SLToken *)operator new();
  SLToken::SLToken(v11, 0, 0);
  v31 = v11;
  SLTokenBuilder::SLTokenBuilder((SLTokenBuilder *)v34, v11);
  v12 = (SLToken *)operator new();
  SLToken::SLToken(v12, 0, 0);
  v29 = v12;
  SLTokenBuilder::SLTokenBuilder((SLTokenBuilder *)v33, v12);
  v13 = (SLDictionaryRecursion *)operator new();
  SLDictionaryRecursion::SLDictionaryRecursion(v13, this[1], 10);
  v14 = 0;
  v15 = a3 - 2;
  while (1)
  {
    if ((a2[v15] & 0xC0) == 0x80)
    {
      while (1)
      {
        v16 = v15 - 1;
        if (v15 == 1)
          break;
        v17 = a2[--v15] & 0xC0;
        if (v17 != 128)
        {
          if (v16 + 1 >= 3)
            goto LABEL_10;
          break;
        }
      }
LABEL_42:
      SLToken::~SLToken(v31);
      MEMORY[0x219A0649C]();
      v6 = 0;
LABEL_43:
      SLToken::~SLToken(v29);
      MEMORY[0x219A0649C]();
      goto LABEL_44;
    }
    v16 = v15;
LABEL_10:
    v18 = v16 > 2 && a2[v16 - 1] == 83;
    v19 = v18;
    v20 = v14 == 0;
    v21 = v19 && v20 ? 1 : v14;
    v22 = v19 && v20 ? v16 - 1 : v16;
    if ((**(unsigned int (***)(SLDictionaryRecursion *, const char *, uint64_t, _BYTE *, SLDictionaryRecursion *))v13)(v13, a2, v22, v34, v13)&& (a5 || (*((unsigned int (**)(SLDictionary **, SLToken *))*this + 2))(this, v31)))
    {
      break;
    }
LABEL_29:
    v15 = v22 - 2;
    v23 = v22 - 1;
    if (v21)
      v24 = v14;
    else
      v24 = 0;
    if (v21)
      v23 = v22;
    if (v21 == 1)
    {
      v24 = 2;
      v23 = v22 + 1;
    }
    if (v21 == 2)
      v14 = 0;
    else
      v14 = v24;
    if (v21 != 2)
      v15 = v23;
    if (v15 <= 1)
      goto LABEL_42;
  }
  SLTokenBuilder::Build((SLTokenBuilder *)v34);
  if (!(**(unsigned int (***)(SLDictionaryRecursion *, const char *, unint64_t, _BYTE *, SLDictionaryRecursion *))v13)(v13, &a2[v22], a3 - v22, v33, v13)|| (SLTokenBuilder::Build((SLTokenBuilder *)v33), !(*((unsigned int (**)(SLDictionary **, SLToken *))*this + 3))(this, v29)))
  {
    if (a4 >= 3 && SLAgglomerate::LookupWords((SLAgglomerate *)this, &a2[v22], a3 - v22, a4 - 1, a5, a6))
    {
      v26 = (_QWORD *)*((_QWORD *)a6 + 1);
      *(_BYTE *)(v26[2] + 1) = 1;
      v27 = operator new(0x18uLL);
      v27[1] = v26;
      v27[2] = v31;
      *v27 = a6;
      *v26 = v27;
      v28 = *((_QWORD *)a6 + 2) + 1;
      *((_QWORD *)a6 + 1) = v27;
      *((_QWORD *)a6 + 2) = v28;
      v6 = 1;
      goto LABEL_43;
    }
    goto LABEL_29;
  }
  *((_BYTE *)v29 + 1) = 1;
  SLTokenList::push_back(a6, v31);
  SLTokenList::push_back(a6, v29);
  v6 = 1;
LABEL_44:
  (*(void (**)(SLDictionaryRecursion *))(*(_QWORD *)v13 + 16))(v13);
  SLTokenBuilder::~SLTokenBuilder((SLTokenBuilder *)v33);
  SLTokenBuilder::~SLTokenBuilder((SLTokenBuilder *)v34);
  return v6;
}

void sub_216FCBA50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  SLTokenBuilder::~SLTokenBuilder((SLTokenBuilder *)va);
  SLTokenBuilder::~SLTokenBuilder((SLTokenBuilder *)va1);
  _Unwind_Resume(a1);
}

uint64_t SLAgglomerate::VetWord(SLAgglomerate *this, SLToken *a2)
{
  return 1;
}

uint64_t SLAgglomerate::VetLastWord(SLAgglomerate *this, SLToken *a2)
{
  return 1;
}

SLAgglomerate *SLCreateAgglomerateEng(SLDictionary *a1)
{
  SLAgglomerate *v2;

  v2 = (SLAgglomerate *)operator new();
  SLAgglomerate::SLAgglomerate(v2, a1);
  *(_QWORD *)v2 = &off_24D683B68;
  return v2;
}

void sub_216FCBB54(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A0649C](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

BOOL SLAgglomerateEng::VetWord(SLAgglomerateEng *this, SLToken *a2)
{
  uint64_t v2;
  unint64_t v4;
  _BOOL4 v5;

  v2 = *((_QWORD *)a2 + 10);
  if (*((_QWORD *)a2 + 11) == v2)
    return 1;
  v4 = 0;
  do
  {
    v5 = SLWordTagSet::find((SLWordTagSet *)(*(_QWORD *)(v2 + 8 * v4) + 4), 68);
    if (v5)
      break;
    ++v4;
    v2 = *((_QWORD *)a2 + 10);
  }
  while (v4 < (*((_QWORD *)a2 + 11) - v2) >> 3);
  return !v5;
}

uint64_t SLAgglomerateEng::VetLastWord(SLAgglomerateEng *this, SLToken *a2)
{
  uint64_t v4;
  unint64_t v5;
  int v6;
  int *v7;
  SLWordTagSet *v8;
  int v9;
  int v10;
  _BOOL4 v11;

  if ((unint64_t)(((uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 1) - 1) < 3)
    return 0;
  v4 = *((_QWORD *)a2 + 10);
  if (*((_QWORD *)a2 + 11) == v4)
  {
    v11 = 0;
    v10 = 1;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(int **)(v4 + 8 * v5);
      v9 = *v7;
      v8 = (SLWordTagSet *)(v7 + 1);
      v6 |= v9;
      if (SLWordTagSet::find(v8, 64) && SLWordTagSet::find(v8, 66))
        break;
      if (SLWordTagSet::find(v8, 68))
        break;
      ++v5;
      v4 = *((_QWORD *)a2 + 10);
      if (v5 >= (*((_QWORD *)a2 + 11) - v4) >> 3)
      {
        v10 = 1;
        goto LABEL_12;
      }
    }
    v10 = 0;
LABEL_12:
    v11 = (v6 & 0x953FF) != 0;
  }
  return v10 & v11;
}

void SLAgglomerateEng::~SLAgglomerateEng(SLAgglomerateEng *this)
{
  SLAgglomerate::~SLAgglomerate(this);
  JUMPOUT(0x219A0649CLL);
}

_QWORD *SLPhonTranslator::Create(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_24D683BF8;
  result[1] = a1;
  result[2] = a2;
  result[3] = a3;
  return result;
}

float SLPhonTranslatorImpl::Match(SLPhonTranslatorImpl *this, uint64_t a2, const void *a3, uint64_t a4, const void *a5, unint64_t *a6, unint64_t *a7)
{
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  char *v18;
  _QWORD *v19;
  __int128 v20;
  __int128 v21;
  int matched;
  void *v23;
  void *v24;
  __int128 v25;
  __int128 v26;
  void *v27;
  float v28;
  _QWORD *v29;
  _BYTE *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  void *v38[4];
  void *__p[4];

  memset(__p, 0, 24);
  memset(v38, 0, 24);
  v14 = std::__allocate_at_least[abi:ne180100]<std::allocator<SLPhonTranslatorImpl::Hypothesis>>((uint64_t)&__p[2], 1uLL);
  v16 = &v14[6 * v15];
  *v14 = a2;
  v14[1] = a3;
  v14[2] = a4;
  v14[3] = a5;
  v14[4] = 1065353216;
  v14[5] = 0;
  v17 = v14 + 6;
  v18 = (char *)__p[1];
  if (__p[1])
  {
    v19 = v14;
    do
    {
      v20 = *((_OWORD *)v18 - 3);
      v21 = *((_OWORD *)v18 - 1);
      v14 = v19 - 6;
      *((_OWORD *)v19 - 2) = *((_OWORD *)v18 - 2);
      *((_OWORD *)v19 - 1) = v21;
      *((_OWORD *)v19 - 3) = v20;
      v18 -= 48;
      v19 -= 6;
    }
    while (v18);
  }
  __p[0] = v14;
  __p[2] = v16;
  __p[1] = v17;
  while (1)
  {
    matched = SLPhonTranslatorImpl::MatchIteration(this, (uint64_t *)__p, (uint64_t)v38);
    v23 = v38[0];
    if (!matched)
      break;
    v24 = __p[2];
    v25 = *(_OWORD *)&v38[1];
    v26 = *(_OWORD *)__p;
    __p[0] = v38[0];
    *(_OWORD *)v38 = v26;
    *(_OWORD *)&__p[1] = v25;
    v38[2] = v24;
  }
  v27 = v38[1];
  if (v38[1] == v38[0])
  {
    v29 = __p[0];
    v30 = __p[1];
    *a6 = a2 - *(_QWORD *)__p[0];
    v31 = a4 - v29[2];
    *a7 = v31;
    v32 = 0xAAAAAAAAAAAAAAABLL * ((v30 - (_BYTE *)v29) >> 4);
    if (v32 >= 2)
    {
      v33 = v32 - 1;
      v34 = v29 + 8;
      do
      {
        v35 = a2 - *(v34 - 2);
        v36 = a4 - *v34;
        if (v36 > v31 || v36 == v31 && v35 > *a6)
        {
          *a6 = v35;
          *a7 = v36;
          v31 = v36;
        }
        v34 += 6;
        --v33;
      }
      while (v33);
    }
    v28 = 0.0;
    if (!v27)
      goto LABEL_18;
  }
  else
  {
    v28 = *((float *)v38[0] + 8);
  }
  v38[1] = v23;
  operator delete(v23);
  v29 = __p[0];
  if (__p[0])
  {
LABEL_18:
    __p[1] = v29;
    operator delete(v29);
  }
  return v28;
}

void sub_216FCBF18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SLPhonTranslatorImpl::MatchIteration(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  char v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  v3 = *a2;
  if (a2[1] == *a2)
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = v3 + 48 * v6;
      if (*(_QWORD *)v7 | *(_QWORD *)(v7 + 16))
      {
        if (*(_QWORD *)v7)
          v8 = **(unsigned __int8 **)(v3 + 48 * v6 + 8);
        else
          v8 = 255;
        if (a1[2] > v8)
        {
          v9 = a1[3];
          v10 = v8 + 1;
          if (*(__int16 *)(v9 + 2 * v8) < *(__int16 *)(v9 + 2 * (v8 + 1)))
          {
            v11 = *(__int16 *)(v9 + 2 * v8);
            v12 = 16 * v11;
            v13 = (16 * v11) | 4;
            do
            {
              v14 = 0;
              v15 = *(_OWORD *)(v7 + 16);
              v30 = *(_OWORD *)v7;
              v31 = v15;
              v32 = *(_OWORD *)(v7 + 32);
              v16 = a1[1];
              v17 = v30;
              v18 = *((_QWORD *)&v30 + 1) + 4;
              v19 = *((_QWORD *)&v30 + 1) + v30;
              while (1)
              {
                v20 = *(unsigned __int8 *)(v16 + v12 + v14);
                if (v20 == 255)
                  break;
                if (!v17)
                  goto LABEL_25;
                if (*(unsigned __int8 *)(*((_QWORD *)&v30 + 1) + v14) != v20)
                {
                  v19 = *((_QWORD *)&v30 + 1) + v14 + 1;
LABEL_25:
                  v26 = 0;
                  *(_QWORD *)&v30 = v17;
                  *((_QWORD *)&v30 + 1) = v19;
                  goto LABEL_32;
                }
                --v17;
                if (++v14 == 4)
                {
                  v17 = v30 - 4;
                  goto LABEL_18;
                }
              }
              v18 = *((_QWORD *)&v30 + 1) + v14;
LABEL_18:
              v21 = 0;
              v22 = *((_QWORD *)&v31 + 1) + 4;
              *(_QWORD *)&v30 = v17;
              *((_QWORD *)&v30 + 1) = v18;
              v23 = *((_QWORD *)&v31 + 1) + v31;
              v24 = v31;
              while (1)
              {
                v25 = *(unsigned __int8 *)(v16 + v13 + v21);
                if (v25 == 255)
                  break;
                if ((_QWORD)v31 == v21)
                  goto LABEL_31;
                if (*(unsigned __int8 *)(*((_QWORD *)&v31 + 1) + v21) != v25)
                {
                  v23 = *((_QWORD *)&v31 + 1) + v21 + 1;
LABEL_31:
                  v26 = 0;
                  *(_QWORD *)&v31 = v24;
                  *((_QWORD *)&v31 + 1) = v23;
                  goto LABEL_32;
                }
                --v24;
                if (++v21 == 4)
                {
                  v24 = v31 - 4;
                  goto LABEL_27;
                }
              }
              v22 = *((_QWORD *)&v31 + 1) + v21;
LABEL_27:
              *(_QWORD *)&v31 = v24;
              *((_QWORD *)&v31 + 1) = v22;
              *(float *)&v32 = *(float *)(v16 + 16 * v11 + 8) * *(float *)&v32;
              if (*(float *)&v32 <= 0.0)
              {
                v26 = 0;
              }
              else
              {
                PushMatchHypothesis((void **)a3, &v30);
                v26 = (v17 | v24) != 0;
              }
LABEL_32:
              v5 |= v26;
              ++v11;
              v12 += 16;
              v13 += 16;
            }
            while (v11 < *(__int16 *)(a1[3] + 2 * v10));
          }
        }
      }
      else
      {
        PushMatchHypothesis((void **)a3, (__int128 *)(v3 + 48 * v6));
      }
      ++v6;
      v3 = *a2;
    }
    while (v6 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 4));
  }
  return v5 & 1;
}

float SLPhonTranslatorImpl::Match(SLPhonTranslatorImpl *this, SLToken *a2, CFIndex a3, CFIndex a4, unint64_t *a5, float *a6, unint64_t *a7, unint64_t *a8)
{
  uint64_t v13;
  uint64_t i;
  uint64_t Homograph;
  const __CFData *Phonemes;
  CFIndex Length;
  const UInt8 *BytePtr;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  CFIndex *v27;
  CFIndex v28;
  _QWORD *v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  CFIndex *v35;
  char *v36;
  char *v37;
  CFIndex *v38;
  __int128 v39;
  __int128 v40;
  void *v41;
  __int128 v42;
  __int128 v43;
  int matched;
  void *v45;
  unint64_t v46;
  char *v47;
  float v48;
  unint64_t v49;
  float v50;
  _BYTE *v51;
  _QWORD *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  CFIndex *__p;
  char *v63;
  char *v64;
  void *v65[4];
  void *v66[4];

  memset(v66, 0, 24);
  memset(v65, 0, 24);
  v13 = SLTokenCountHomographs((uint64_t)a2);
  bzero(a6, 4 * v13);
  __p = 0;
  v63 = 0;
  v64 = 0;
  if (v13)
  {
    for (i = 0; i != v13; ++i)
    {
      Homograph = SLTokenGetHomograph((uint64_t)a2, i);
      Phonemes = SLHomographGetPhonemes(Homograph);
      Length = CFDataGetLength(Phonemes);
      BytePtr = CFDataGetBytePtr(Phonemes);
      v19 = v63;
      if (v63 >= v64)
      {
        v21 = (char *)__p;
        v22 = (v63 - (char *)__p) >> 3;
        v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v24 = v64 - (char *)__p;
        if ((v64 - (char *)__p) >> 2 > v23)
          v23 = v24 >> 2;
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
          v25 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v25 = v23;
        if (v25)
        {
          v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SLHomograph *>>((uint64_t)&v64, v25);
          v21 = (char *)__p;
          v19 = v63;
        }
        else
        {
          v26 = 0;
        }
        v27 = (CFIndex *)&v26[8 * v22];
        *v27 = Length;
        v20 = (char *)(v27 + 1);
        while (v19 != v21)
        {
          v28 = *((_QWORD *)v19 - 1);
          v19 -= 8;
          *--v27 = v28;
        }
        __p = v27;
        v64 = &v26[8 * v25];
        if (v21)
          operator delete(v21);
      }
      else
      {
        *(_QWORD *)v63 = Length;
        v20 = v63 + 8;
      }
      v63 = v20;
      v29 = v66[1];
      if (v66[1] >= v66[2])
      {
        v31 = 0xAAAAAAAAAAAAAAABLL * (((char *)v66[1] - (char *)v66[0]) >> 4);
        v32 = v31 + 1;
        if (v31 + 1 > 0x555555555555555)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * (((char *)v66[2] - (char *)v66[0]) >> 4) > v32)
          v32 = 0x5555555555555556 * (((char *)v66[2] - (char *)v66[0]) >> 4);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v66[2] - (char *)v66[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL)
          v33 = 0x555555555555555;
        else
          v33 = v32;
        if (v33)
          v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SLPhonTranslatorImpl::Hypothesis>>((uint64_t)&v66[2], v33);
        else
          v34 = 0;
        v35 = (CFIndex *)&v34[48 * v31];
        *v35 = Length;
        v35[1] = (CFIndex)BytePtr;
        v35[2] = a3;
        v35[3] = a4;
        v35[4] = 1065353216;
        v35[5] = i;
        v37 = (char *)v66[0];
        v36 = (char *)v66[1];
        v38 = v35;
        if (v66[1] != v66[0])
        {
          do
          {
            v39 = *((_OWORD *)v36 - 3);
            v40 = *((_OWORD *)v36 - 1);
            *((_OWORD *)v38 - 2) = *((_OWORD *)v36 - 2);
            *((_OWORD *)v38 - 1) = v40;
            *((_OWORD *)v38 - 3) = v39;
            v38 -= 6;
            v36 -= 48;
          }
          while (v36 != v37);
          v36 = v37;
        }
        v30 = v35 + 6;
        v66[0] = v38;
        v66[1] = v35 + 6;
        v66[2] = &v34[48 * v33];
        if (v36)
          operator delete(v36);
      }
      else
      {
        *(_QWORD *)v66[1] = Length;
        v29[1] = BytePtr;
        v29[2] = a3;
        v29[3] = a4;
        v30 = v29 + 6;
        v29[4] = 1065353216;
        v29[5] = i;
      }
      v66[1] = v30;
    }
  }
  while (1)
  {
    matched = SLPhonTranslatorImpl::MatchIteration(this, (uint64_t *)v66, (uint64_t)v65);
    v45 = v65[0];
    if (!matched)
      break;
    v41 = v66[2];
    v42 = *(_OWORD *)&v65[1];
    v43 = *(_OWORD *)v66;
    v66[0] = v65[0];
    *(_OWORD *)v65 = v43;
    *(_OWORD *)&v66[1] = v42;
    v65[2] = v41;
  }
  if (v65[1] == v65[0])
  {
    v52 = v66[0];
    v51 = v66[1];
    *a7 = __p[*((_QWORD *)v66[0] + 5)] - *(_QWORD *)v66[0];
    *a8 = a3 - v52[2];
    *a5 = v52[5];
    v53 = 0xAAAAAAAAAAAAAAABLL * ((v51 - (_BYTE *)v52) >> 4);
    v48 = 0.0;
    if (v53 >= 2)
    {
      v54 = v53 - 1;
      v55 = v52 + 11;
      do
      {
        v56 = __p[*v55] - *(v55 - 5);
        v57 = a3 - *(v55 - 3);
        if (v57 > *a8 || v57 == *a8 && v56 > *a7)
        {
          *a7 = v56;
          *a8 = v57;
          *a5 = *v55;
        }
        v55 += 6;
        --v54;
      }
      while (v54);
    }
  }
  else
  {
    v46 = ((char *)v65[1] - (char *)v65[0]) / 48;
    if (v46 <= 1)
      v46 = 1;
    v47 = (char *)v65[0] + 32;
    v48 = -1000000.0;
    do
    {
      v49 = *((_QWORD *)v47 + 1);
      a6[v49] = *(float *)v47;
      v50 = *(float *)v47;
      if (*(float *)v47 > v48)
      {
        *a5 = v49;
        v48 = v50;
      }
      v47 += 48;
      --v46;
    }
    while (v46);
  }
  if (__p)
  {
    operator delete(__p);
    v45 = v65[0];
  }
  if (v45)
  {
    v65[1] = v45;
    operator delete(v45);
  }
  if (v66[0])
  {
    v66[1] = v66[0];
    operator delete(v66[0]);
  }
  return v48;
}

void sub_216FCC5D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SLPhonTranslatorImpl::Map(SLPhonTranslatorImpl *this, uint64_t a2, const void *a3, uint64_t a4, void *a5)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  char *v15;
  _QWORD *v16;
  __int128 v17;
  __int128 v18;
  int v19;
  _QWORD *v20;
  void *v21;
  __int128 v22;
  __int128 v23;
  _BYTE *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD v31[2];
  void *__p[4];

  memset(__p, 0, 24);
  memset(v31, 0, 24);
  v10 = operator new[]();
  v11 = std::__allocate_at_least[abi:ne180100]<std::allocator<SLPhonTranslatorImpl::Hypothesis>>((uint64_t)&__p[2], 1uLL);
  v13 = &v11[6 * v12];
  *v11 = a2;
  v11[1] = a3;
  v11[2] = 0;
  v11[3] = v10;
  v11[4] = 1065353216;
  v11[5] = 0;
  v14 = v11 + 6;
  v15 = (char *)__p[1];
  if (__p[1])
  {
    v16 = v11;
    do
    {
      v17 = *((_OWORD *)v15 - 3);
      v18 = *((_OWORD *)v15 - 1);
      v11 = v16 - 6;
      *((_OWORD *)v16 - 2) = *((_OWORD *)v15 - 2);
      *((_OWORD *)v16 - 1) = v18;
      *((_OWORD *)v16 - 3) = v17;
      v15 -= 48;
      v16 -= 6;
    }
    while (v15);
  }
  __p[0] = v11;
  __p[2] = v13;
  __p[1] = v14;
  while (1)
  {
    v19 = SLPhonTranslatorImpl::MapIteration(this, (uint64_t *)__p, (uint64_t)v31, a4);
    v20 = *(_QWORD **)&v31[0];
    if (!v19)
      break;
    v21 = __p[2];
    v22 = *(_OWORD *)((char *)v31 + 8);
    v23 = *(_OWORD *)__p;
    __p[0] = *(void **)&v31[0];
    v31[0] = v23;
    *(_OWORD *)&__p[1] = v22;
    *(_QWORD *)&v31[1] = v21;
  }
  v24 = (_BYTE *)*((_QWORD *)&v31[0] + 1);
  if (*((_QWORD *)&v31[0] + 1) == *(_QWORD *)&v31[0])
  {
    v28 = 0;
    v29 = 0;
    if (!*((_QWORD *)&v31[0] + 1))
      goto LABEL_15;
  }
  else
  {
    memcpy(a5, *(const void **)(*(_QWORD *)&v31[0] + 24), *(_QWORD *)(*(_QWORD *)&v31[0] + 16));
    v25 = 0;
    v26 = 3;
    do
    {
      v27 = v20[v26];
      if (v27)
      {
        MEMORY[0x219A0649C](v27, 0x1000C4077774924);
        v24 = (_BYTE *)*((_QWORD *)&v31[0] + 1);
        v20 = *(_QWORD **)&v31[0];
      }
      ++v25;
      v26 += 6;
    }
    while (v25 < 0xAAAAAAAAAAAAAAABLL * ((v24 - (_BYTE *)v20) >> 4));
    v28 = v20[2];
    v24 = v20;
  }
  *((_QWORD *)&v31[0] + 1) = v24;
  operator delete(v24);
  v29 = v28;
LABEL_15:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v29;
}

void sub_216FCC7FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SLPhonTranslatorImpl::MapIteration(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  int v8;
  unint64_t v9;
  __int128 *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  void *v25;
  uint64_t v26;
  _BOOL4 v27;
  uint64_t i;
  int v29;
  BOOL v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v36;
  unint64_t v39;
  __int128 v41[2];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[9];

  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  v4 = *a2;
  if (a2[1] == *a2)
  {
    LOBYTE(v8) = 0;
  }
  else
  {
    v5 = a4;
    v6 = a2;
    v7 = a1;
    v8 = 0;
    v9 = 0;
    do
    {
      v10 = (__int128 *)(v4 + 48 * v9);
      v46[0] = 1;
      if (*(_QWORD *)v10)
      {
        v11 = **(unsigned __int8 **)(v4 + 48 * v9 + 8);
        if (v7[2] > v11)
        {
          v12 = v7[3];
          v13 = v11 + 1;
          v36 = v4;
          if (*(__int16 *)(v12 + 2 * v11) >= *(__int16 *)(v12 + 2 * (v11 + 1)))
          {
            LOBYTE(v17) = 1;
          }
          else
          {
            v14 = *(__int16 *)(v12 + 2 * v11);
            v15 = 16 * v14;
            v16 = (16 * v14) | 4;
            v17 = 1;
            v39 = v13;
            do
            {
              v18 = 0;
              v19 = v10[1];
              v43 = *v10;
              v44 = v19;
              v45 = v10[2];
              v20 = v7[1];
              v21 = v43;
              v22 = *((_QWORD *)&v43 + 1) + 4;
              v23 = *((_QWORD *)&v43 + 1) + v43;
              while (1)
              {
                v24 = *(unsigned __int8 *)(v20 + v15 + v18);
                if (v24 == 255)
                  break;
                if (!v21)
                  goto LABEL_19;
                if (*(unsigned __int8 *)(*((_QWORD *)&v43 + 1) + v18) != v24)
                {
                  v23 = *((_QWORD *)&v43 + 1) + v18 + 1;
LABEL_19:
                  v27 = 0;
                  *(_QWORD *)&v43 = v21;
                  *((_QWORD *)&v43 + 1) = v23;
                  goto LABEL_30;
                }
                --v21;
                if (++v18 == 4)
                {
                  v21 = v43 - 4;
                  goto LABEL_14;
                }
              }
              v22 = *((_QWORD *)&v43 + 1) + v18;
LABEL_14:
              *(_QWORD *)&v43 = v21;
              *((_QWORD *)&v43 + 1) = v22;
              *(float *)&v45 = *(float *)&v45 * (float)(*(float *)(v20 + 16 * v14 + 8) * 0.999);
              if (*(float *)&v45 <= 0.0)
              {
                v27 = 0;
              }
              else
              {
                if (v17)
                {
                  v25 = (void *)*((_QWORD *)&v44 + 1);
                  v26 = v44;
                }
                else
                {
                  v25 = (void *)operator new[]();
                  v26 = v44;
                  memcpy(v25, *((const void **)&v44 + 1), v44);
                  *((_QWORD *)&v44 + 1) = v25;
                }
                for (i = 0; i != 4; ++i)
                {
                  v29 = *(unsigned __int8 *)(v20 + v16 + i);
                  if (v29 == 255)
                    break;
                  *((_BYTE *)v25 + v26 + i) = v29;
                }
                *(_QWORD *)&v44 = v26 + i;
                LOBYTE(v41[0]) = 1;
                v5 = a4;
                PushMapHypothesis((void **)a3, &v43, a4, v41);
                if (LOBYTE(v41[0]))
                  v30 = v25 == 0;
                else
                  v30 = 1;
                if (!v30)
                  MEMORY[0x219A06484](v25, 0x1000C8077774924);
                v17 = 0;
                v27 = v21 != 0;
                v7 = a1;
                v12 = a1[3];
                v13 = v39;
              }
LABEL_30:
              v8 |= v27;
              ++v14;
              v15 += 16;
              v16 += 16;
            }
            while (v14 < *(__int16 *)(v12 + 2 * v13));
          }
          v46[0] = v17;
          v6 = a2;
          v4 = v36;
        }
        v31 = v10[2];
        v41[1] = v10[1];
        v42 = v31;
        v41[0] = *v10;
        v32 = --*(_QWORD *)&v41[0];
        ++*((_QWORD *)&v41[0] + 1);
        *(float *)&v42 = *(float *)&v31 * 0.5;
        PushMapHypothesis((void **)a3, v41, v5, v46);
        v8 |= v32 != 0;
      }
      else
      {
        PushMapHypothesis((void **)a3, (__int128 *)(v4 + 48 * v9), v5, v46);
      }
      if (v46[0])
      {
        v33 = *(_QWORD *)(v4 + 48 * v9 + 24);
        if (v33)
          MEMORY[0x219A06484](v33, 0x1000C8077774924);
      }
      ++v9;
      v4 = *v6;
    }
    while (v9 < 0xAAAAAAAAAAAAAAABLL * ((v6[1] - *v6) >> 4));
  }
  return v8 & 1;
}

void PushMatchHypothesis(void **a1, __int128 *a2)
{
  _OWORD *v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  _OWORD *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  float v26;

  v5 = (char *)*a1;
  v4 = a1[1];
  v6 = ((char *)v4 - (_BYTE *)*a1) / 48;
  if (v4 == *a1)
  {
LABEL_10:
    v9 = (uint64_t)(a1 + 2);
    v10 = (unint64_t)a1[2];
    if ((unint64_t)v4 >= v10)
    {
      if (v6 + 1 > 0x555555555555555)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (_QWORD)v5) >> 4);
      v15 = 2 * v14;
      if (2 * v14 <= v6 + 1)
        v15 = v6 + 1;
      if (v14 >= 0x2AAAAAAAAAAAAAALL)
        v16 = 0x555555555555555;
      else
        v16 = v15;
      if (v16)
        v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SLPhonTranslatorImpl::Hypothesis>>(v9, v16);
      else
        v17 = 0;
      v18 = &v17[48 * v6];
      v19 = &v17[48 * v16];
      v20 = *a2;
      v21 = a2[2];
      *((_OWORD *)v18 + 1) = a2[1];
      *((_OWORD *)v18 + 2) = v21;
      *(_OWORD *)v18 = v20;
      v13 = v18 + 48;
      v23 = (char *)*a1;
      v22 = (char *)a1[1];
      if (v22 != *a1)
      {
        do
        {
          v24 = *((_OWORD *)v22 - 3);
          v25 = *((_OWORD *)v22 - 1);
          *((_OWORD *)v18 - 2) = *((_OWORD *)v22 - 2);
          *((_OWORD *)v18 - 1) = v25;
          *((_OWORD *)v18 - 3) = v24;
          v18 -= 48;
          v22 -= 48;
        }
        while (v22 != v23);
        v22 = (char *)*a1;
      }
      *a1 = v18;
      a1[1] = v13;
      a1[2] = v19;
      if (v22)
        operator delete(v22);
    }
    else
    {
      v11 = *a2;
      v12 = a2[2];
      v4[1] = a2[1];
      v4[2] = v12;
      *v4 = v11;
      v13 = v4 + 3;
    }
    a1[1] = v13;
  }
  else
  {
    if (v6 <= 1)
      v7 = 1;
    else
      v7 = ((char *)v4 - (_BYTE *)*a1) / 48;
    v8 = v5 + 32;
    while (*((_QWORD *)v8 - 4) != *(_QWORD *)a2
         || *((_QWORD *)v8 - 2) != *((_QWORD *)a2 + 2)
         || *((_QWORD *)v8 + 1) != *((_QWORD *)a2 + 5))
    {
      v8 += 48;
      if (!--v7)
        goto LABEL_10;
    }
    v26 = *(float *)v8;
    if (*(float *)v8 < *((float *)a2 + 8))
      v26 = *((float *)a2 + 8);
    *(float *)v8 = v26;
  }
}

void PushMapHypothesis(void **a1, __int128 *a2, uint64_t a3, _BYTE *a4)
{
  _OWORD *v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  _OWORD *v16;
  size_t v17;
  const void *v18;
  void *v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  char *v36;
  char *v37;
  __int128 v38;
  __int128 v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;

  v8 = (char *)*a1;
  v7 = a1[1];
  v9 = ((char *)v7 - (_BYTE *)*a1) / 48;
  if (v7 == *a1)
  {
LABEL_8:
    if (*a4)
    {
      v12 = (uint64_t)(a1 + 2);
      v13 = (unint64_t)a1[2];
      if ((unint64_t)v7 < v13)
      {
        v14 = *a2;
        v15 = a2[2];
        v7[1] = a2[1];
        v7[2] = v15;
        *v7 = v14;
        v16 = v7 + 3;
LABEL_37:
        a1[1] = v16;
        *a4 = 0;
        return;
      }
      if (v9 + 1 <= 0x555555555555555)
      {
        v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (_QWORD)v8) >> 4);
        v24 = 2 * v23;
        if (2 * v23 <= v9 + 1)
          v24 = v9 + 1;
        if (v23 >= 0x2AAAAAAAAAAAAAALL)
          v25 = 0x555555555555555;
        else
          v25 = v24;
        if (v25)
          v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SLPhonTranslatorImpl::Hypothesis>>(v12, v25);
        else
          v26 = 0;
        v32 = &v26[48 * v9];
        v33 = &v26[48 * v25];
        v34 = *a2;
        v35 = a2[2];
        *((_OWORD *)v32 + 1) = a2[1];
        *((_OWORD *)v32 + 2) = v35;
        *(_OWORD *)v32 = v34;
        v16 = v32 + 48;
        v37 = (char *)*a1;
        v36 = (char *)a1[1];
        if (v36 != *a1)
        {
          do
          {
            v38 = *((_OWORD *)v36 - 3);
            v39 = *((_OWORD *)v36 - 1);
            *((_OWORD *)v32 - 2) = *((_OWORD *)v36 - 2);
            *((_OWORD *)v32 - 1) = v39;
            *((_OWORD *)v32 - 3) = v38;
            v32 -= 48;
            v36 -= 48;
          }
          while (v36 != v37);
          v36 = (char *)*a1;
        }
        *a1 = v32;
        a1[1] = v16;
        a1[2] = v33;
        if (v36)
          operator delete(v36);
        goto LABEL_37;
      }
LABEL_46:
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    v17 = *((_QWORD *)a2 + 2);
    v18 = (const void *)*((_QWORD *)a2 + 3);
    v46 = a2[2];
    v47 = *a2;
    v19 = (void *)operator new[]();
    memcpy(v19, v18, v17);
    v20 = (char *)a1[2];
    v21 = (char *)a1[1];
    if (v21 >= v20)
    {
      v27 = 0xAAAAAAAAAAAAAAABLL * ((v21 - (_BYTE *)*a1) >> 4);
      v28 = v27 + 1;
      if (v27 + 1 > 0x555555555555555)
        goto LABEL_46;
      v29 = 0xAAAAAAAAAAAAAAABLL * ((v20 - (_BYTE *)*a1) >> 4);
      if (2 * v29 > v28)
        v28 = 2 * v29;
      if (v29 >= 0x2AAAAAAAAAAAAAALL)
        v30 = 0x555555555555555;
      else
        v30 = v28;
      if (v30)
        v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SLPhonTranslatorImpl::Hypothesis>>((uint64_t)(a1 + 2), v30);
      else
        v31 = 0;
      v40 = &v31[48 * v27];
      v41 = &v31[48 * v30];
      *(_OWORD *)v40 = v47;
      *((_QWORD *)v40 + 2) = v17;
      *((_QWORD *)v40 + 3) = v19;
      *((_OWORD *)v40 + 2) = v46;
      v22 = v40 + 48;
      v43 = (char *)*a1;
      v42 = (char *)a1[1];
      if (v42 != *a1)
      {
        do
        {
          v44 = *((_OWORD *)v42 - 3);
          v45 = *((_OWORD *)v42 - 1);
          *((_OWORD *)v40 - 2) = *((_OWORD *)v42 - 2);
          *((_OWORD *)v40 - 1) = v45;
          *((_OWORD *)v40 - 3) = v44;
          v40 -= 48;
          v42 -= 48;
        }
        while (v42 != v43);
        v42 = (char *)*a1;
      }
      *a1 = v40;
      a1[1] = v22;
      a1[2] = v41;
      if (v42)
        operator delete(v42);
    }
    else
    {
      *(_OWORD *)v21 = v47;
      *((_QWORD *)v21 + 2) = v17;
      *((_QWORD *)v21 + 3) = v19;
      *((_OWORD *)v21 + 2) = v46;
      v22 = v21 + 48;
    }
    a1[1] = v22;
    return;
  }
  if (v9 <= 1)
    v10 = 1;
  else
    v10 = ((char *)v7 - (_BYTE *)*a1) / 48;
  v11 = v8 + 32;
  while (*((_QWORD *)v11 - 4) != *(_QWORD *)a2)
  {
    v11 += 12;
    if (!--v10)
      goto LABEL_8;
  }
  if (*(float *)v11 < *((float *)a2 + 8))
  {
    *((_QWORD *)v11 - 2) = *((_QWORD *)a2 + 2);
    memcpy(*((void **)v11 - 1), *((const void **)a2 + 3), *((_QWORD *)a2 + 2));
    *v11 = *((_DWORD *)a2 + 8);
  }
}

void SLPhonTranslatorImpl::~SLPhonTranslatorImpl(SLPhonTranslatorImpl *this)
{
  JUMPOUT(0x219A0649CLL);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<SLPhonTranslatorImpl::Hypothesis>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(48 * a2);
}

#error "216FCD05C: too big function (funcsize=0)"

uint64_t SLLexerImpl::NextLiteralToken(SLLexerImpl *this)
{
  unsigned __int16 *v2;
  unsigned __int16 v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  unsigned __int16 *v12;
  int v13;
  int v14;
  unint64_t v16;
  unsigned __int16 v17;
  int v18;
  unsigned int v19;
  unsigned __int16 *v20;
  unint64_t v21;
  unsigned __int16 v22;
  unsigned __int16 *v23;
  unsigned int v24;
  unsigned __int16 *v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unsigned __int16 *v30;
  unsigned __int16 *v31;
  unsigned int v32;
  SLLexerInstance *v33;
  char v34;
  unsigned __int16 *v35;
  unsigned int v36;
  BOOL v37;
  int v38;
  unint64_t v39;
  unsigned __int16 *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unint64_t v44;
  unint64_t v45;
  unsigned __int16 *v46;
  unsigned int v47;
  unsigned __int16 v48;
  int v49;
  BOOL v50;
  unsigned __int16 *v51;
  unsigned int v52;
  unsigned __int16 v53;
  int v54;
  unint64_t v55;
  int v56;
  unint64_t v57;
  unsigned __int16 v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unint64_t v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unsigned __int16 v73;
  unint64_t v74;
  unint64_t v75;
  unsigned int v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unsigned __int16 v81;
  unint64_t v82;
  unint64_t v83;
  unsigned int v84;
  unsigned int v85;
  int v86;
  unint64_t v87;
  unint64_t v88;
  unsigned int v89;
  BOOL v91;

  v2 = (unsigned __int16 *)*((_QWORD *)this + 3);
LABEL_2:
  *((_QWORD *)this + 8) = v2;
  if ((uint64_t)(*((_QWORD *)this + 5) - (_QWORD)v2) <= 21)
  {
    SLLexerInstance::Refill(this);
    v2 = (unsigned __int16 *)*((_QWORD *)this + 3);
  }
  v3 = SLChar::sLexFold[*v2 & 0x3F | (SLChar::sUniMap[(unint64_t)*v2 >> 6] << 6)] + *v2;
  if (v3 > 0x2049u)
  {
    if (HIBYTE(v3) <= 0x24u)
    {
      v8 = v3 >> 2;
      if (v8 > 0x8C6)
      {
        if (v8 > 0x8FC)
        {
          if (v3 > 0x23FAu)
          {
            if (v3 != 9410)
              goto LABEL_108;
          }
          else if ((unsigned __int16)(v3 >> 3) < 0x47Fu)
          {
            goto LABEL_108;
          }
        }
        else if (v3 != 9000 && v3 < 0x23E9u)
        {
          goto LABEL_108;
        }
      }
      else if (v3 > 0x2199u)
      {
        if (v3 < 0x21A9u || (unsigned __int16)(v3 - 8619) < 0x16Fu)
          goto LABEL_108;
      }
      else if (v3 != 8505 && v8 < 0x865)
      {
        goto LABEL_108;
      }
      goto LABEL_107;
    }
    if (HIBYTE(v3) <= 0x32u)
    {
      if (v3 > 0x26F9u)
      {
        if (v3 > 0x270Du)
        {
          if (v3 == 10084)
            goto LABEL_102;
          goto LABEL_107;
        }
        v9 = 9994;
      }
      else
      {
        if (v3 == 9757)
        {
LABEL_86:
          v25 = v2 + 1;
          v26 = v2[1];
          *((_QWORD *)this + 3) = v2 + 1;
          *((_QWORD *)this + 6) = v2 + 1;
          if ((unsigned __int16)(SLChar::sLexFold[v26 & 0x3F | (SLChar::sUniMap[v26 >> 6] << 6)] + v26) != 55356)
          {
LABEL_114:
            v33 = this;
            v34 = 32;
            return SLLexerInstance::CreateToken(v33, v34, 0);
          }
          v28 = v2[2];
          v2 += 2;
          v27 = v28;
LABEL_88:
          *((_QWORD *)this + 3) = v2;
          if ((unsigned __int16)(v27 + 8197 + SLChar::sLexFold[v27 & 0x3F | (SLChar::sUniMap[v27 >> 6] << 6)]) >= 5u)
          {
LABEL_89:
            *((_QWORD *)this + 3) = v25;
            goto LABEL_114;
          }
LABEL_107:
          v30 = v2 + 1;
          goto LABEL_113;
        }
        v9 = 9977;
      }
      if (v9 > v3)
        goto LABEL_107;
      goto LABEL_86;
    }
    if (v3 > 0xD83Du)
    {
      if ((unsigned __int16)(v3 >> 9) > 0x6Eu)
      {
        if (((unsigned __int16)(v3 + 0x2000) >> 8) >= 0x19u)
          goto LABEL_108;
        goto LABEL_107;
      }
      if ((unsigned __int16)(v3 >> 10) >= 0x37u)
      {
        v36 = v2[1];
        v35 = v2 + 1;
        *((_QWORD *)this + 3) = v35;
        v20 = v35;
        if ((unsigned __int16)(SLChar::sLexFold[v36 & 0x3F | (SLChar::sUniMap[(unint64_t)v36 >> 6] << 6)] + v36) >> 10 != 55)
          goto LABEL_109;
        goto LABEL_112;
      }
    }
    else
    {
      if ((unsigned __int16)(v3 >> 11) < 0x1Bu)
        goto LABEL_108;
      if (v3 >= 0xD83Cu)
      {
        v16 = v2[1];
        *((_QWORD *)this + 3) = v2 + 1;
        v17 = SLChar::sLexFold[v16 & 0x3F | (SLChar::sUniMap[v16 >> 6] << 6)] + v16;
        if (v3 == 55356)
        {
          if (v17 <= 0xDF85u)
          {
            if (v17 <= 0xDDE5u)
            {
              if ((unsigned __int16)(v17 >> 10) <= 0x36u)
                goto LABEL_109;
              goto LABEL_96;
            }
            if ((unsigned __int16)(v17 >> 9) < 0x6Fu)
            {
              v25 = v2 + 2;
              v39 = v2[2];
              *((_QWORD *)this + 3) = v2 + 2;
              *((_QWORD *)this + 6) = v2 + 2;
              if ((unsigned __int16)(SLChar::sLexFold[v39 & 0x3F | (SLChar::sUniMap[v39 >> 6] << 6)] + v39) != 55356)
                goto LABEL_114;
              v41 = v2[3];
              v40 = v2 + 3;
              *((_QWORD *)this + 3) = v40;
              v20 = v40;
              if ((unsigned __int16)(v41
                                    + 8730
                                    + SLChar::sLexFold[v41 & 0x3F | (SLChar::sUniMap[(unint64_t)v41 >> 6] << 6)]) < 0x1Au)
                goto LABEL_112;
              goto LABEL_89;
            }
            v43 = 57221;
LABEL_148:
            if (v43 <= v17)
              goto LABEL_188;
LABEL_96:
            v30 = v2 + 2;
LABEL_113:
            *((_QWORD *)this + 3) = v30;
            goto LABEL_114;
          }
          if (v17 <= 0xDFC9u)
          {
            if ((unsigned __int16)(v17 + 8253) >= 2u)
              goto LABEL_96;
            goto LABEL_188;
          }
          if (v17 < 0xDFCCu)
            goto LABEL_188;
LABEL_138:
          if ((unsigned __int16)(SLChar::sLexFold[v16 & 0x3F | (SLChar::sUniMap[v16 >> 6] << 6)] + v16) >= 0xE000u)
            goto LABEL_109;
          goto LABEL_96;
        }
        if (v17 <= 0xDC87u)
        {
          if (v17 <= 0xDC69u)
          {
            if (v17 <= 0xDC45u)
            {
              if (v17 <= 0xDC40u)
              {
                if ((unsigned __int16)(v17 >> 10) < 0x37u)
                  goto LABEL_109;
                goto LABEL_96;
              }
              if (v17 == 56385)
              {
                v25 = v2 + 2;
                v44 = v2[2];
                *((_QWORD *)this + 3) = v2 + 2;
                *((_QWORD *)this + 6) = v2 + 2;
                if ((unsigned __int16)(SLChar::sLexFold[v44 & 0x3F | (SLChar::sUniMap[v44 >> 6] << 6)] + v44) != 8205)
                  goto LABEL_114;
                v45 = v2[3];
                *((_QWORD *)this + 3) = v2 + 3;
                if ((unsigned __int16)(SLChar::sLexFold[v45 & 0x3F | (SLChar::sUniMap[v45 >> 6] << 6)] + v45) != 55357)
                  goto LABEL_89;
                v47 = v2[4];
                v46 = v2 + 4;
                *((_QWORD *)this + 3) = v46;
                v48 = SLChar::sLexFold[v47 & 0x3F | (SLChar::sUniMap[(unint64_t)v47 >> 6] << 6)] + v47;
                v49 = 56808;
LABEL_158:
                v50 = v49 == v48;
                goto LABEL_159;
              }
              v42 = 56388;
LABEL_187:
              if (v42 <= v17)
                goto LABEL_96;
              goto LABEL_188;
            }
            if (v17 <= 0xDC65u)
            {
              v42 = 56401;
              goto LABEL_187;
            }
            v51 = v2;
            if (v17 < 0xDC68u)
              goto LABEL_189;
            v52 = v2[2];
            v25 = v2 + 2;
            *((_QWORD *)this + 3) = v2 + 2;
            *((_QWORD *)this + 6) = v2 + 2;
            v53 = SLChar::sLexFold[v52 & 0x3F | (SLChar::sUniMap[(unint64_t)v52 >> 6] << 6)] + v52;
            if (v17 == 56424)
            {
              v54 = v53;
              if (v53 == 8205)
              {
                v55 = v2[3];
                *((_QWORD *)this + 3) = v2 + 3;
                v56 = (unsigned __int16)(SLChar::sLexFold[v55 & 0x3F | (SLChar::sUniMap[v55 >> 6] << 6)] + v55);
                if (v56 != 10084)
                {
                  if (v56 != 55357)
                    goto LABEL_89;
                  v57 = v2[4];
                  *((_QWORD *)this + 3) = v2 + 4;
                  v58 = v57 + 9110 + SLChar::sLexFold[v57 & 0x3F | (SLChar::sUniMap[v57 >> 6] << 6)];
                  if (v58 != 65534 && v58 != 0xFFFF)
                    goto LABEL_89;
                  goto LABEL_197;
                }
                goto LABEL_204;
              }
            }
            else
            {
              v54 = v53;
              if (v53 == 8205)
              {
                v67 = v2[3];
                *((_QWORD *)this + 3) = v2 + 3;
                v68 = (unsigned __int16)(SLChar::sLexFold[v67 & 0x3F | (SLChar::sUniMap[v67 >> 6] << 6)] + v67);
                if (v68 != 10084)
                {
                  if (v68 != 55357)
                    goto LABEL_89;
                  v69 = v2[4];
                  *((_QWORD *)this + 3) = v2 + 4;
                  if ((unsigned __int16)(SLChar::sLexFold[v69 & 0x3F | (SLChar::sUniMap[v69 >> 6] << 6)] + v69) != 56425)
                    goto LABEL_89;
LABEL_197:
                  v70 = v2[5];
                  *((_QWORD *)this + 3) = v2 + 5;
                  if ((unsigned __int16)(SLChar::sLexFold[v70 & 0x3F | (SLChar::sUniMap[v70 >> 6] << 6)] + v70) != 8205)
                    goto LABEL_89;
                  v71 = v2[6];
                  *((_QWORD *)this + 3) = v2 + 6;
                  if ((unsigned __int16)(SLChar::sLexFold[v71 & 0x3F | (SLChar::sUniMap[v71 >> 6] << 6)] + v71) != 55357)
                    goto LABEL_89;
                  v72 = v2[7];
                  *((_QWORD *)this + 3) = v2 + 7;
                  v73 = SLChar::sLexFold[v72 & 0x3F | (SLChar::sUniMap[v72 >> 6] << 6)] + v72;
                  if (v73 < 0xDC66u)
                    goto LABEL_89;
                  if (v73 == 56422)
                  {
                    v25 = v2 + 8;
                    v74 = v2[8];
                    *((_QWORD *)this + 3) = v2 + 8;
                    *((_QWORD *)this + 6) = v2 + 8;
                    if ((unsigned __int16)(SLChar::sLexFold[v74 & 0x3F | (SLChar::sUniMap[v74 >> 6] << 6)] + v74) != 8205)
                      goto LABEL_114;
                    v75 = v2[9];
                    *((_QWORD *)this + 3) = v2 + 9;
                    if ((unsigned __int16)(SLChar::sLexFold[v75 & 0x3F | (SLChar::sUniMap[v75 >> 6] << 6)] + v75) != 55357)
                      goto LABEL_89;
                    v76 = v2[10];
                    v46 = v2 + 10;
                    *((_QWORD *)this + 3) = v46;
                    v48 = SLChar::sLexFold[v76 & 0x3F | (SLChar::sUniMap[(unint64_t)v76 >> 6] << 6)] + v76;
                    v49 = 56422;
                    goto LABEL_158;
                  }
                  if (v73 >= 0xDC68u)
                    goto LABEL_89;
                  v25 = v2 + 8;
                  v87 = v2[8];
                  *((_QWORD *)this + 3) = v2 + 8;
                  *((_QWORD *)this + 6) = v2 + 8;
                  if ((unsigned __int16)(SLChar::sLexFold[v87 & 0x3F | (SLChar::sUniMap[v87 >> 6] << 6)] + v87) != 8205)
                    goto LABEL_114;
                  v88 = v2[9];
                  *((_QWORD *)this + 3) = v2 + 9;
                  if ((unsigned __int16)(SLChar::sLexFold[v88 & 0x3F | (SLChar::sUniMap[v88 >> 6] << 6)] + v88) != 55357)
                    goto LABEL_89;
                  v89 = v2[10];
                  v46 = v2 + 10;
                  *((_QWORD *)this + 3) = v46;
                  v85 = (SLChar::sLexFold[v89 & 0x3F | (SLChar::sUniMap[(unint64_t)v89 >> 6] << 6)] + (_WORD)v89) & 0xFFFE;
                  v86 = 28211;
LABEL_217:
                  v50 = v86 == v85 >> 1;
LABEL_159:
                  v20 = v46;
                  if (v50)
                    goto LABEL_112;
                  goto LABEL_89;
                }
LABEL_204:
                v77 = v2[4];
                *((_QWORD *)this + 3) = v2 + 4;
                if ((unsigned __int16)(SLChar::sLexFold[v77 & 0x3F | (SLChar::sUniMap[v77 >> 6] << 6)] + v77) != 65039)
                  goto LABEL_89;
                v78 = v2[5];
                *((_QWORD *)this + 3) = v2 + 5;
                if ((unsigned __int16)(SLChar::sLexFold[v78 & 0x3F | (SLChar::sUniMap[v78 >> 6] << 6)] + v78) != 8205)
                  goto LABEL_89;
                v79 = v2[6];
                *((_QWORD *)this + 3) = v2 + 6;
                if ((unsigned __int16)(SLChar::sLexFold[v79 & 0x3F | (SLChar::sUniMap[v79 >> 6] << 6)] + v79) != 55357)
                  goto LABEL_89;
                v20 = v2 + 7;
                v80 = v2[7];
                *((_QWORD *)this + 3) = v2 + 7;
                v81 = SLChar::sLexFold[v80 & 0x3F | (SLChar::sUniMap[v80 >> 6] << 6)] + v80;
                if (v81 < 0xDC68u)
                  goto LABEL_89;
                if (v81 < 0xDC6Au)
                  goto LABEL_112;
                if (v81 != 56459)
                  goto LABEL_89;
                v82 = v2[8];
                *((_QWORD *)this + 3) = v2 + 8;
                if ((unsigned __int16)(SLChar::sLexFold[v82 & 0x3F | (SLChar::sUniMap[v82 >> 6] << 6)] + v82) != 8205)
                  goto LABEL_89;
                v83 = v2[9];
                *((_QWORD *)this + 3) = v2 + 9;
                if ((unsigned __int16)(SLChar::sLexFold[v83 & 0x3F | (SLChar::sUniMap[v83 >> 6] << 6)] + v83) != 55357)
                  goto LABEL_89;
                v84 = v2[10];
                v46 = v2 + 10;
                *((_QWORD *)this + 3) = v46;
                v85 = (SLChar::sLexFold[v84 & 0x3F | (SLChar::sUniMap[(unint64_t)v84 >> 6] << 6)] + (_WORD)v84) & 0xFFFE;
                v86 = 28212;
                goto LABEL_217;
              }
            }
            if (v54 != 55356)
              goto LABEL_114;
LABEL_190:
            v66 = v2[3];
            v2 += 3;
            v27 = v66;
            goto LABEL_88;
          }
          if (v17 > 0xDC7Bu)
          {
            if (v17 > 0xDC80u)
            {
              if (v17 != 56452)
                goto LABEL_188;
              goto LABEL_96;
            }
            v42 = 56445;
            goto LABEL_187;
          }
          v37 = v17 == 56430;
          if (v17 > 0xDC6Eu)
          {
            if (v17 == 56431)
              goto LABEL_96;
            v42 = 56441;
            goto LABEL_187;
          }
LABEL_164:
          if (v37)
            goto LABEL_188;
          goto LABEL_96;
        }
        if (v17 > 0xDE47u)
        {
          if (v17 > 0xDEB3u)
          {
            if ((unsigned __int16)(v17 >> 6) > 0x37Au)
            {
              if (v17 == 57024)
              {
                v25 = v2 + 2;
                v59 = v2[2];
                *((_QWORD *)this + 3) = v2 + 2;
                *((_QWORD *)this + 6) = v2 + 2;
                if ((unsigned __int16)(SLChar::sLexFold[v59 & 0x3F | (SLChar::sUniMap[v59 >> 6] << 6)] + v59) != 55356)
                  goto LABEL_114;
                v60 = v2[3];
                *((_QWORD *)this + 3) = v2 + 3;
                if ((unsigned __int16)(v60 + SLChar::sLexFold[v60 & 0x3F | (SLChar::sUniMap[v60 >> 6] << 6)] + 0x2000) < 0xFFFBu)
                  goto LABEL_89;
                v61 = v2[4];
                *((_QWORD *)this + 3) = v2 + 4;
                if ((unsigned __int16)(SLChar::sLexFold[v61 & 0x3F | (SLChar::sUniMap[v61 >> 6] << 6)] + v61) != 55358)
                  goto LABEL_89;
                v62 = v2[5];
                *((_QWORD *)this + 3) = v2 + 5;
                if ((unsigned __int16)(SLChar::sLexFold[v62 & 0x3F | (SLChar::sUniMap[v62 >> 6] << 6)] + v62) != 56600)
                  goto LABEL_89;
                v63 = v2[6];
                *((_QWORD *)this + 3) = v2 + 6;
                if ((unsigned __int16)(SLChar::sLexFold[v63 & 0x3F | (SLChar::sUniMap[v63 >> 6] << 6)] + v63) != 55356)
                  goto LABEL_89;
                v64 = v2[7];
                v2 += 7;
                *((_QWORD *)this + 3) = v2;
                if ((unsigned __int16)(v64
                                      + SLChar::sLexFold[v64 & 0x3F | (SLChar::sUniMap[(unint64_t)v64 >> 6] << 6)]
                                      + 0x2000) < 0xFFFBu)
                  goto LABEL_89;
                goto LABEL_107;
              }
              goto LABEL_138;
            }
            v42 = 57015;
            goto LABEL_187;
          }
          if ((unsigned __int16)(v17 >> 4) <= 0xDE4u)
          {
            v43 = 56907;
            goto LABEL_148;
          }
          v38 = 56995;
        }
        else
        {
          if ((unsigned __int16)(v17 >> 4) > 0xDD8u)
          {
            if (v17 > 0xDD94u)
            {
              if (v17 >= 0xDD97u)
              {
                v43 = 56901;
                goto LABEL_148;
              }
LABEL_188:
              v51 = v2;
LABEL_189:
              v65 = v51[2];
              v25 = v51 + 2;
              *((_QWORD *)this + 3) = v25;
              *((_QWORD *)this + 6) = v25;
              if ((unsigned __int16)(SLChar::sLexFold[v65 & 0x3F | (SLChar::sUniMap[(unint64_t)v65 >> 6] << 6)]
                                    + v65) != 55356)
                goto LABEL_114;
              goto LABEL_190;
            }
            v42 = 56721;
            goto LABEL_187;
          }
          v37 = v17 == 56490;
          if (v17 <= 0xDCAAu)
            goto LABEL_164;
          v38 = 56693;
        }
        v37 = v38 == v17;
        goto LABEL_164;
      }
    }
    v29 = v2[1];
    *((_QWORD *)this + 3) = v2 + 1;
    if ((unsigned __int16)(SLChar::sLexFold[v29 & 0x3F | (SLChar::sUniMap[v29 >> 6] << 6)] + v29) >> 10 != 55)
      goto LABEL_109;
    goto LABEL_96;
  }
  v4 = (unsigned __int16)(SLChar::sLexFold[*v2 & 0x3F | (SLChar::sUniMap[(unint64_t)*v2 >> 6] << 6)] + *v2);
  if (v4 > 0x7A)
  {
    if (v4 <= 0xDF)
    {
      v6 = (unsigned __int16)(SLChar::sLexFold[*v2 & 0x3F | (SLChar::sUniMap[(unint64_t)*v2 >> 6] << 6)] + *v2);
      if (v6 > 0xB0)
      {
        v18 = (unsigned __int16)(SLChar::sLexFold[*v2 & 0x3F | (SLChar::sUniMap[(unint64_t)*v2 >> 6] << 6)] + *v2);
        if (v6 > 0xC0)
        {
          if (v18 != 198)
            goto LABEL_108;
        }
        else if (v18 != 192)
        {
          goto LABEL_108;
        }
      }
      else
      {
        if (v6 == 160)
          goto LABEL_19;
        if ((unsigned __int16)(SLChar::sLexFold[*v2 & 0x3F | (SLChar::sUniMap[(unint64_t)*v2 >> 6] << 6)] + *v2) < 0xB0u)
          goto LABEL_108;
      }
LABEL_100:
      v20 = v2 + 1;
      *((_QWORD *)this + 3) = v2 + 1;
      goto LABEL_220;
    }
    if (v3 <= 0x202Eu)
    {
      v19 = (unsigned __int16)(SLChar::sLexFold[*v2 & 0x3F | (SLChar::sUniMap[(unint64_t)*v2 >> 6] << 6)] + *v2);
      if (v19 >= 0xE1 && v19 != 230)
        goto LABEL_108;
      goto LABEL_100;
    }
    if ((unsigned __int16)(v3 >> 2) <= 0x80Eu)
    {
      if ((unsigned __int16)(v3 >> 4) < 0x203u)
        goto LABEL_19;
      goto LABEL_108;
    }
    if (v3 != 8252 && v3 < 0x2049u)
      goto LABEL_108;
LABEL_102:
    v32 = v2[1];
    v31 = v2 + 1;
    *((_QWORD *)this + 3) = v31;
    v20 = v31;
    if ((unsigned __int16)(SLChar::sLexFold[v32 & 0x3F | (SLChar::sUniMap[(unint64_t)v32 >> 6] << 6)] + v32) != 65039)
      goto LABEL_114;
    goto LABEL_112;
  }
  if (v4 <= 0x22)
  {
    v5 = (unsigned __int16)(SLChar::sLexFold[*v2 & 0x3F | (SLChar::sUniMap[(unint64_t)*v2 >> 6] << 6)] + *v2);
    if (v5 > 0xF)
    {
      if (v5 != 32)
      {
        if (v5 == 16)
        {
          *((_QWORD *)this + 3) = v2 + 1;
          v14 = *((_DWORD *)this + 23);
          *((_DWORD *)this + 24) = v14;
          *((_DWORD *)this + 25) = v14;
          *((_DWORD *)this + 23) = 1;
          *((_QWORD *)this + 13) = *((_QWORD *)this + 10);
          return 0;
        }
        goto LABEL_108;
      }
    }
    else if (v5 != 9)
    {
      if (!(SLChar::sLexFold[*v2 & 0x3F | (SLChar::sUniMap[(unint64_t)*v2 >> 6] << 6)] + *v2))
      {
        *((_DWORD *)this + 23) &= ~0x10u;
        *((_QWORD *)this + 3) = v2;
        return 0;
      }
      goto LABEL_108;
    }
LABEL_19:
    *((_QWORD *)this + 3) = ++v2;
    while (1)
    {
      v7 = (unsigned __int16)(SLChar::sLexFold[*v2 & 0x3F | (SLChar::sUniMap[(unint64_t)*v2 >> 6] << 6)] + *v2);
      if (v7 > 0x20)
      {
        if (v7 > 0xA0)
        {
          if ((unsigned __int16)(SLChar::sLexFold[*v2 & 0x3F | (SLChar::sUniMap[(unint64_t)*v2 >> 6] << 6)] + *v2) != 8239)
            goto LABEL_2;
        }
        else if ((unsigned __int16)(SLChar::sLexFold[*v2 & 0x3F | (SLChar::sUniMap[(unint64_t)*v2 >> 6] << 6)]
                                   + *v2) != 160)
        {
          goto LABEL_2;
        }
      }
      else if (v7 != 9 && v7 != 32)
      {
        goto LABEL_2;
      }
      *((_QWORD *)this + 3) = ++v2;
      if (*((unsigned __int16 **)this + 5) == v2)
      {
        SLLexerInstance::Refill(this);
        v2 = (unsigned __int16 *)*((_QWORD *)this + 3);
      }
    }
  }
  v10 = (unsigned __int16)(SLChar::sLexFold[*v2 & 0x3F | (SLChar::sUniMap[(unint64_t)*v2 >> 6] << 6)] + *v2);
  if (v10 <= 0x2F)
  {
    if (v10 < 0x24
      || (unsigned __int16)(SLChar::sLexFold[*v2 & 0x3F | (SLChar::sUniMap[(unint64_t)*v2 >> 6] << 6)] + *v2) == 42)
    {
      v12 = v2 + 1;
      v11 = v2[1];
      *((_QWORD *)this + 3) = v2 + 1;
      *((_QWORD *)this + 6) = v2 + 1;
      v13 = (unsigned __int16)(SLChar::sLexFold[v11 & 0x3F | (SLChar::sUniMap[v11 >> 6] << 6)] + v11);
      if (v13 == 8419)
      {
        v20 = v2 + 1;
        goto LABEL_112;
      }
      if (v13 != 65039)
        goto LABEL_109;
      goto LABEL_73;
    }
LABEL_108:
    *((_QWORD *)this + 3) = v2 + 1;
    goto LABEL_109;
  }
  if (v10 > 0x40)
  {
    if ((unsigned __int16)(v3 - 91) < 6u)
      goto LABEL_108;
    goto LABEL_100;
  }
  if ((unsigned __int16)(SLChar::sLexFold[*v2 & 0x3F | (SLChar::sUniMap[(unint64_t)*v2 >> 6] << 6)] + *v2) >= 0x3Au)
    goto LABEL_108;
  v20 = v2 + 1;
  v21 = v2[1];
  *((_QWORD *)this + 3) = v2 + 1;
  *((_QWORD *)this + 6) = v2 + 1;
  v22 = SLChar::sLexFold[v21 & 0x3F | (SLChar::sUniMap[v21 >> 6] << 6)] + v21;
  if (v22 == 8419)
  {
LABEL_112:
    v30 = v20 + 1;
    goto LABEL_113;
  }
  v12 = v2 + 1;
  if (v22 != 65039)
  {
    while (1)
    {
      if (v22 > 0xB0u)
      {
        if (v22 > 0xC6u)
        {
          v91 = v22 == 224;
          if (v22 > 0xE0u)
            v91 = v22 == 230;
        }
        else
        {
          if (v22 == 192)
            goto LABEL_218;
          v91 = v22 == 198;
        }
        if (!v91)
          goto LABEL_109;
      }
      else if (v22 > 0x5Au)
      {
        if (v22 < 0x61u || (unsigned __int16)(v22 - 123) < 0x35u)
          goto LABEL_109;
      }
      else if (v22 < 0x30u || (unsigned __int16)(v22 - 58) < 7u)
      {
        goto LABEL_109;
      }
LABEL_218:
      *((_QWORD *)this + 3) = ++v20;
      if (*((unsigned __int16 **)this + 5) == v20)
      {
        SLLexerInstance::Refill(this);
        v20 = (unsigned __int16 *)*((_QWORD *)this + 3);
      }
LABEL_220:
      v22 = SLChar::sLexFold[*v20 & 0x3F | (SLChar::sUniMap[(unint64_t)*v20 >> 6] << 6)] + *v20;
    }
  }
LABEL_73:
  v24 = v2[2];
  v23 = v2 + 2;
  *((_QWORD *)this + 3) = v23;
  v20 = v23;
  if ((unsigned __int16)(SLChar::sLexFold[v24 & 0x3F | (SLChar::sUniMap[(unint64_t)v24 >> 6] << 6)] + v24) == 8419)
    goto LABEL_112;
  *((_QWORD *)this + 3) = v12;
LABEL_109:
  v33 = this;
  v34 = 11;
  return SLLexerInstance::CreateToken(v33, v34, 0);
}

uint64_t SLLexerImpl::ScanFixed(unsigned __int16 **this, unsigned int *a2, unsigned int *a3, int a4)
{
  int v5;
  int v6;
  char v7;
  char v8;
  unsigned __int16 *v9;
  char v10;
  int v11;
  char v12;
  unint64_t v13;
  unsigned int v14;
  int v15;
  uint64_t result;
  BOOL v17;
  int v18;
  int v21;

  SLLexerImpl::SkipSpaces((SLLexerInstance *)this);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = this[3];
  v10 = 16;
  v21 = 1;
  v11 = 1;
LABEL_2:
  v12 = v8;
  while (1)
  {
    while (1)
    {
      if (this[5] == v9)
      {
        SLLexerInstance::Refill((SLLexerInstance *)this);
        v9 = this[3];
      }
      v13 = *v9;
      v14 = (unsigned __int16)(SLChar::sLexFold[v13 & 0x3F | (SLChar::sUniMap[v13 >> 6] << 6)] + v13);
      if (v14 > 0x2C)
        break;
      if (v14 > 0xA)
      {
        if (v14 != 43)
          goto LABEL_29;
      }
      else if (v14 != 10)
      {
        goto LABEL_29;
      }
LABEL_18:
      this[3] = ++v9;
      if ((v7 & 1) != 0)
        return 0;
      if (a4)
      {
        v7 = 0;
        v17 = (_DWORD)v13 == 45;
        v18 = v21;
        if (v17)
          v18 = -1;
        v21 = v18;
        if (a3)
        {
          v7 = 0;
          *(_BYTE *)a3 = 114;
        }
      }
      else
      {
        v7 = 0;
        result = 0;
        if ((_DWORD)v13 == 45)
          return result;
      }
    }
    if (v14 <= 0x2E)
    {
      if (v14 == 46)
      {
        this[3] = ++v9;
        v8 = 1;
        if ((v12 & 1) == 0)
          goto LABEL_2;
        return 0;
      }
      goto LABEL_18;
    }
    if (v14 == 47 || v14 >= 0x3A)
      break;
    this[3] = ++v9;
    v15 = v13 - 48;
    if ((v12 & 1) != 0)
    {
      v6 = v15 + 10 * v6;
      --v10;
      v7 = 1;
      v11 *= 5;
    }
    else
    {
      v5 = v15 + 10 * v5;
      v7 = 1;
    }
  }
LABEL_29:
  this[3] = v9 + 1;
  if ((v7 & 1) != 0)
  {
    this[3] = v9;
    *a2 = ((v6 << v10) / v11 + (v5 << 16)) * v21;
    return 1;
  }
  return 0;
}

uint64_t SLLexerImpl::ScanWhole(unsigned __int16 **this, unsigned int *a2, int a3)
{
  uint64_t result;
  unsigned int v7;
  unsigned __int16 *v8;
  unint64_t v9;
  char v10;
  int v11;
  unsigned __int16 *v12;
  unsigned __int16 *v13;
  unsigned __int16 *v14;
  unint64_t v15;
  unsigned __int16 v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned __int16 v22;
  unint64_t v23;
  unsigned __int16 v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unsigned int v30;
  unsigned __int16 v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  unint64_t v36;
  unsigned __int16 *v37;
  unsigned __int16 v38;
  int v39;
  unint64_t v41;
  unsigned __int16 *v42;
  unsigned __int16 v43;
  int v44;
  unint64_t v45;
  unsigned __int16 v46;
  unint64_t v47;
  unsigned __int16 v48;
  unsigned int v49;
  unsigned int v50;
  unint64_t v51;
  unsigned __int16 v52;
  unint64_t v53;
  unsigned __int16 v54;
  unint64_t v55;
  unsigned __int16 v56;
  unint64_t v57;
  unsigned int v58;
  unsigned __int16 *v59;
  unint64_t v60;
  unsigned int v61;
  unsigned int v62;
  unint64_t v63;
  unsigned __int16 v64;
  unint64_t v65;
  unsigned int v66;
  unint64_t v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unint64_t v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unint64_t v79;
  unint64_t v80;
  unsigned __int16 v81;
  int v82;
  unsigned __int16 *v83;
  unint64_t v84;
  int v85;
  unsigned __int16 *v86;
  int v87;
  unint64_t v88;
  unint64_t v89;
  unsigned __int16 *v90;
  int v91;

  SLLexerImpl::SkipSpaces((SLLexerInstance *)this);
  LOBYTE(result) = 0;
  v7 = 0;
  while ((result & 1) != 0)
  {
    v8 = this[3];
    if (this[5] == v8)
    {
      SLLexerInstance::Refill((SLLexerInstance *)this);
      v8 = this[3];
    }
    v9 = *v8;
    if ((unsigned __int16)(v9 + SLChar::sLexFold[v9 & 0x3F | (SLChar::sUniMap[v9 >> 6] << 6)] - 58) < 0xFFF6u)
    {
LABEL_152:
      this[3] = v8;
      goto LABEL_153;
    }
    v10 = 0;
    this[3] = v8 + 1;
    v11 = v9 + 10 * v7;
LABEL_139:
    v7 = v11 - 48;
    LOBYTE(result) = 1;
LABEL_140:
    if ((v10 & 1) != 0)
    {
      v8 = this[3];
      while (1)
      {
        if (this[5] == v8)
        {
          SLLexerInstance::Refill((SLLexerInstance *)this);
          v8 = this[3];
        }
        v80 = *v8;
        v81 = SLChar::sLexFold[v80 & 0x3F | (SLChar::sUniMap[v80 >> 6] << 6)] + v80;
        if (v81 > 0x40u)
        {
          if (v81 >= 0x47u)
          {
            if ((unsigned __int16)(v81 - 97) > 5u)
              goto LABEL_152;
            v82 = -87;
          }
          else
          {
            v82 = -55;
          }
        }
        else
        {
          if ((unsigned __int16)(v81 - 58) < 0xFFF6u)
            goto LABEL_152;
          v82 = -48;
        }
        this[3] = ++v8;
        v7 = v82 + 16 * v7 + v80;
      }
    }
  }
  v12 = this[3];
  v13 = v12;
  if ((char *)this[5] - (char *)v12 <= 11)
  {
    SLLexerInstance::Refill((SLLexerInstance *)this);
    v13 = this[3];
  }
  switch(SLChar::sLexFold[*v13 & 0x3F | (SLChar::sUniMap[(unint64_t)*v13 >> 6] << 6)] + *v13)
  {
    case '"':
      v14 = v13 + 1;
      v15 = v13[1];
      this[3] = v13 + 1;
      this[6] = v13 + 1;
      v16 = SLChar::sLexFold[v15 & 0x3F | (SLChar::sUniMap[v15 >> 6] << 6)] + v15;
      if (v16 > 0x21u)
      {
        if (v16 == 34)
        {
          v37 = v13 + 2;
          v36 = v13[2];
          this[3] = v13 + 2;
          this[6] = v13 + 2;
          v38 = SLChar::sLexFold[v36 & 0x3F | (SLChar::sUniMap[v36 >> 6] << 6)] + v36;
          if (v38 <= 0x21u)
          {
            if (v38 < 0x20u)
            {
              v14 = v13 + 2;
              goto LABEL_156;
            }
            v39 = v38;
            v35 = 2;
            v14 = v13 + 2;
LABEL_60:
            if (v39 == 32)
              goto LABEL_97;
LABEL_93:
            v55 = v13[3];
            this[3] = v13 + 3;
            v56 = SLChar::sLexFold[v55 & 0x3F | (SLChar::sUniMap[v55 >> 6] << 6)] + v55;
            if (v56 <= 0x21u)
            {
              if (v56 < 0x20u)
                goto LABEL_39;
              if ((unsigned __int16)(SLChar::sLexFold[v55 & 0x3F | (SLChar::sUniMap[v55 >> 6] << 6)] + v55) == 32)
                goto LABEL_124;
              goto LABEL_120;
            }
            if (v56 != 34)
            {
              if ((unsigned __int16)(SLChar::sLexFold[v55 & 0x3F | (SLChar::sUniMap[v55 >> 6] << 6)] + v55) >= 0x7Fu)
              {
LABEL_124:
                v72 = v13[4];
                v59 = v13 + 4;
                this[3] = v59;
                v73 = (unsigned __int16)(SLChar::sLexFold[v72 & 0x3F | (SLChar::sUniMap[(unint64_t)v72 >> 6] << 6)]
                                       + v72);
                if (v73 >= 0x20)
                {
                  if (v73 == 34)
                    goto LABEL_168;
LABEL_126:
                  v74 = v59[1];
                  this[3] = v59 + 1;
                  if ((unsigned __int16)(SLChar::sLexFold[v74 & 0x3F | (SLChar::sUniMap[v74 >> 6] << 6)] + v74) == 34)
                    goto LABEL_169;
                  goto LABEL_136;
                }
LABEL_39:
                this[3] = v14;
LABEL_137:
                if (v35)
                {
                  if (v35 == 2)
                    goto LABEL_156;
                  return 0;
                }
LABEL_138:
                v10 = 0;
                v11 = *(v14 - 1);
                goto LABEL_139;
              }
LABEL_120:
              v70 = v13[4];
              v59 = v13 + 4;
              this[3] = v59;
              this[6] = v59;
              v71 = (unsigned __int16)(SLChar::sLexFold[v70 & 0x3F | (SLChar::sUniMap[(unint64_t)v70 >> 6] << 6)]
                                     + v70);
              if (v71 < 0x20)
                goto LABEL_163;
              if (v71 == 34)
              {
LABEL_168:
                v14 = v59 + 1;
                v88 = v59[1];
                this[3] = v59 + 1;
                if ((unsigned __int16)(SLChar::sLexFold[v88 & 0x3F | (SLChar::sUniMap[v88 >> 6] << 6)] + v88) == 34)
                {
LABEL_169:
                  v14 = v59 + 2;
                  this[3] = v59 + 2;
                }
LABEL_156:
                v83 = v12 + 1;
                v84 = (unint64_t)(v14 - 1);
                if ((unint64_t)(v12 + 1) < v84)
                {
                  v7 = 0;
                  do
                  {
                    v85 = *v83++;
                    v7 = v85 + (v7 << 8);
                  }
                  while ((unint64_t)v83 < v84);
                  goto LABEL_153;
                }
                goto LABEL_179;
              }
              v35 = 3;
              goto LABEL_123;
            }
LABEL_101:
            v60 = v37[2];
            v59 = v37 + 2;
            this[3] = v37 + 2;
            this[6] = v37 + 2;
            goto LABEL_102;
          }
          if (v38 != 34)
          {
            v49 = v38;
            v35 = 2;
            v14 = v13 + 2;
LABEL_92:
            if (v49 >= 0x7F)
              goto LABEL_97;
            goto LABEL_93;
          }
LABEL_73:
          v14 = v13 + 3;
          v51 = v13[3];
          this[3] = v13 + 3;
          this[6] = v13 + 3;
          v52 = SLChar::sLexFold[v51 & 0x3F | (SLChar::sUniMap[v51 >> 6] << 6)] + v51;
          if (v52 > 0x21u)
          {
            if (v52 == 34)
              goto LABEL_101;
            if (v52 <= 0x7Eu)
              goto LABEL_120;
          }
          else
          {
            if (v52 < 0x20u)
              goto LABEL_156;
            if (v52 != 32)
              goto LABEL_120;
          }
LABEL_86:
          v35 = 2;
          goto LABEL_124;
        }
        if (v16 >= 0x7Fu)
          goto LABEL_14;
      }
      else
      {
        if (v16 < 0x20u)
          return 0;
        if (v16 == 32)
        {
LABEL_14:
          v17 = v13[2];
          this[3] = v13 + 2;
          v18 = (unsigned __int16)(SLChar::sLexFold[v17 & 0x3F | (SLChar::sUniMap[v17 >> 6] << 6)] + v17);
          if (v18 >= 0x20)
          {
            if (v18 == 34)
            {
              v14 = v13 + 3;
              v19 = v13[3];
              this[3] = v13 + 3;
              this[6] = v13 + 3;
              v20 = (unsigned __int16)(SLChar::sLexFold[v19 & 0x3F | (SLChar::sUniMap[v19 >> 6] << 6)] + v19);
              if (v20 < 0x20)
                goto LABEL_156;
              if (v20 == 34)
                goto LABEL_99;
              goto LABEL_86;
            }
            v35 = 1;
LABEL_97:
            v57 = v13[3];
            this[3] = v13 + 3;
            v58 = (unsigned __int16)(SLChar::sLexFold[v57 & 0x3F | (SLChar::sUniMap[v57 >> 6] << 6)] + v57);
            if (v58 < 0x20)
              goto LABEL_39;
            if (v58 == 34)
            {
LABEL_99:
              v61 = v13[4];
              v59 = v13 + 4;
              v60 = v61;
              this[3] = v59;
              this[6] = v59;
LABEL_102:
              v62 = (unsigned __int16)(SLChar::sLexFold[v60 & 0x3F | (SLChar::sUniMap[v60 >> 6] << 6)] + v60);
              if (v62 < 0x20)
              {
                v14 = v59;
                goto LABEL_156;
              }
              if (v62 == 34)
                goto LABEL_168;
              v35 = 2;
LABEL_123:
              v14 = v59;
              goto LABEL_126;
            }
            goto LABEL_124;
          }
LABEL_38:
          v35 = 1;
          goto LABEL_39;
        }
      }
      v37 = v13 + 2;
      v45 = v13[2];
      this[3] = v13 + 2;
      v46 = SLChar::sLexFold[v45 & 0x3F | (SLChar::sUniMap[v45 >> 6] << 6)] + v45;
      if (v46 <= 0x21u)
      {
        if (v46 < 0x20u)
          goto LABEL_38;
        v39 = v46;
        v35 = 1;
        goto LABEL_60;
      }
      if (v46 != 34)
      {
        v49 = v46;
        v35 = 1;
        goto LABEL_92;
      }
      goto LABEL_73;
    case '$':
      v21 = v13[1];
      this[3] = v13 + 1;
      v22 = SLChar::sLexFold[v21 & 0x3F | (SLChar::sUniMap[(unint64_t)v21 >> 6] << 6)] + v21;
      if (v22 > 0x40u)
      {
        result = 0;
        if (v22 >= 0x47u && (unsigned __int16)(v22 - 97) >= 6u)
          return result;
      }
      else
      {
        result = 0;
        if ((unsigned __int16)(v22 - 48) >= 0xAu)
          return result;
      }
      goto LABEL_48;
    case '\'':
      v14 = v13 + 1;
      v23 = v13[1];
      this[3] = v13 + 1;
      this[6] = v13 + 1;
      v24 = SLChar::sLexFold[v23 & 0x3F | (SLChar::sUniMap[v23 >> 6] << 6)] + v23;
      if (v24 <= 0x26u)
      {
        if (v24 < 0x20u)
          return 0;
        if (v24 == 32)
          goto LABEL_25;
        goto LABEL_63;
      }
      if (v24 == 39)
      {
        v42 = v13 + 2;
        v41 = v13[2];
        this[3] = v13 + 2;
        this[6] = v13 + 2;
        v43 = SLChar::sLexFold[v41 & 0x3F | (SLChar::sUniMap[v41 >> 6] << 6)] + v41;
        if (v43 <= 0x26u)
        {
          if (v43 < 0x20u)
            goto LABEL_175;
          v44 = v43;
          v35 = 4;
          v14 = v13 + 2;
          goto LABEL_66;
        }
        if (v43 != 39)
        {
          v50 = v43;
          v35 = 4;
          v14 = v13 + 2;
LABEL_106:
          if (v50 >= 0x7F)
            goto LABEL_111;
LABEL_107:
          v63 = v13[3];
          this[3] = v13 + 3;
          v64 = SLChar::sLexFold[v63 & 0x3F | (SLChar::sUniMap[v63 >> 6] << 6)] + v63;
          if (v64 <= 0x26u)
          {
            if (v64 < 0x20u)
              goto LABEL_136;
            if ((unsigned __int16)(SLChar::sLexFold[v63 & 0x3F | (SLChar::sUniMap[v63 >> 6] << 6)] + v63) == 32)
              goto LABEL_133;
            goto LABEL_129;
          }
          if (v64 != 39)
          {
            if ((unsigned __int16)(SLChar::sLexFold[v63 & 0x3F | (SLChar::sUniMap[v63 >> 6] << 6)] + v63) >= 0x7Fu)
              goto LABEL_133;
LABEL_129:
            v75 = v13[4];
            v59 = v13 + 4;
            this[3] = v59;
            this[6] = v59;
            v76 = (unsigned __int16)(SLChar::sLexFold[v75 & 0x3F | (SLChar::sUniMap[(unint64_t)v75 >> 6] << 6)]
                                   + v75);
            if (v76 < 0x20)
              goto LABEL_163;
            if (v76 == 39)
            {
LABEL_170:
              v42 = v59 + 1;
              v89 = v59[1];
              this[3] = v59 + 1;
              if ((unsigned __int16)(SLChar::sLexFold[v89 & 0x3F | (SLChar::sUniMap[v89 >> 6] << 6)] + v89) == 39)
              {
LABEL_171:
                v42 = v59 + 2;
                this[3] = v59 + 2;
              }
LABEL_175:
              v90 = v12 + 1;
              if (v12 + 1 < v42 - 1)
              {
                v7 = 0;
                do
                {
                  v91 = *v90++;
                  v7 = v91 + (v7 << 8);
                }
                while (v90 < v42 - 1);
                goto LABEL_153;
              }
LABEL_179:
              v7 = 0;
              goto LABEL_153;
            }
            v35 = 3;
            goto LABEL_132;
          }
LABEL_115:
          v67 = v42[2];
          v59 = v42 + 2;
          this[3] = v42 + 2;
          this[6] = v42 + 2;
          goto LABEL_116;
        }
LABEL_78:
        v14 = v13 + 3;
        v53 = v13[3];
        this[3] = v13 + 3;
        this[6] = v13 + 3;
        v54 = SLChar::sLexFold[v53 & 0x3F | (SLChar::sUniMap[v53 >> 6] << 6)] + v53;
        if (v54 > 0x26u)
        {
          if (v54 == 39)
            goto LABEL_115;
          if (v54 <= 0x7Eu)
            goto LABEL_129;
        }
        else
        {
          if (v54 < 0x20u)
          {
LABEL_174:
            v42 = v14;
            goto LABEL_175;
          }
          if (v54 != 32)
            goto LABEL_129;
        }
LABEL_89:
        v35 = 4;
        goto LABEL_133;
      }
      if (v24 < 0x7Fu)
      {
LABEL_63:
        v42 = v13 + 2;
        v47 = v13[2];
        this[3] = v13 + 2;
        v48 = SLChar::sLexFold[v47 & 0x3F | (SLChar::sUniMap[v47 >> 6] << 6)] + v47;
        if (v48 <= 0x26u)
        {
          if (v48 < 0x20u)
            goto LABEL_38;
          v44 = v48;
          v35 = 1;
LABEL_66:
          if (v44 == 32)
            goto LABEL_111;
          goto LABEL_107;
        }
        if (v48 != 39)
        {
          v50 = v48;
          v35 = 1;
          goto LABEL_106;
        }
        goto LABEL_78;
      }
LABEL_25:
      v25 = v13[2];
      this[3] = v13 + 2;
      v26 = (unsigned __int16)(SLChar::sLexFold[v25 & 0x3F | (SLChar::sUniMap[v25 >> 6] << 6)] + v25);
      if (v26 < 0x20)
        goto LABEL_38;
      if (v26 == 39)
      {
        v14 = v13 + 3;
        v27 = v13[3];
        this[3] = v13 + 3;
        this[6] = v13 + 3;
        v28 = (unsigned __int16)(SLChar::sLexFold[v27 & 0x3F | (SLChar::sUniMap[v27 >> 6] << 6)] + v27);
        if (v28 < 0x20)
          goto LABEL_174;
        if (v28 == 39)
        {
LABEL_113:
          v68 = v13[4];
          v59 = v13 + 4;
          v67 = v68;
          this[3] = v59;
          this[6] = v59;
LABEL_116:
          v69 = (unsigned __int16)(SLChar::sLexFold[v67 & 0x3F | (SLChar::sUniMap[v67 >> 6] << 6)] + v67);
          if (v69 < 0x20)
          {
            v42 = v59;
            goto LABEL_175;
          }
          if (v69 == 39)
            goto LABEL_170;
          v35 = 4;
LABEL_132:
          v14 = v59;
          goto LABEL_135;
        }
        goto LABEL_89;
      }
      v35 = 1;
LABEL_111:
      v65 = v13[3];
      this[3] = v13 + 3;
      v66 = (unsigned __int16)(SLChar::sLexFold[v65 & 0x3F | (SLChar::sUniMap[v65 >> 6] << 6)] + v65);
      if (v66 < 0x20)
        goto LABEL_136;
      if (v66 == 39)
        goto LABEL_113;
LABEL_133:
      v77 = v13[4];
      v59 = v13 + 4;
      this[3] = v59;
      v78 = (unsigned __int16)(SLChar::sLexFold[v77 & 0x3F | (SLChar::sUniMap[(unint64_t)v77 >> 6] << 6)] + v77);
      if (v78 < 0x20)
        goto LABEL_136;
      if (v78 == 39)
        goto LABEL_170;
LABEL_135:
      v79 = v59[1];
      this[3] = v59 + 1;
      if ((unsigned __int16)(SLChar::sLexFold[v79 & 0x3F | (SLChar::sUniMap[v79 >> 6] << 6)] + v79) == 39)
        goto LABEL_171;
LABEL_136:
      this[3] = v14;
      if (v35 <= 2)
        goto LABEL_137;
      v59 = v14;
      v42 = v14;
      if (v35 != 3)
        goto LABEL_175;
LABEL_163:
      if (!a3)
        return 0;
      v7 = 0;
      v86 = v59 - 4;
      do
      {
        v87 = *v86++;
        v7 = v87 + (v7 << 8);
      }
      while (v86 < v59);
LABEL_153:
      *a2 = v7;
      return 1;
    case '+':
      LOBYTE(result) = 0;
      v10 = 0;
      this[3] = v13 + 1;
      goto LABEL_140;
    case '0':
      v14 = v13 + 1;
      v29 = v13[1];
      this[3] = v13 + 1;
      this[6] = v13 + 1;
      if ((((unsigned __int16)SLChar::sLexFold[v29 & 0x3F | (SLChar::sUniMap[v29 >> 6] << 6)] + (_DWORD)v29) & 0xFFDF) != 0x58)
        goto LABEL_138;
      v30 = v13[2];
      this[3] = v13 + 2;
      v31 = SLChar::sLexFold[v30 & 0x3F | (SLChar::sUniMap[(unint64_t)v30 >> 6] << 6)] + v30;
      if (v31 > 0x40u)
      {
        v10 = 1;
        if (v31 >= 0x47u)
        {
          LOBYTE(result) = 0;
          if ((unsigned __int16)(v31 - 103) >= 0xFFFAu)
            goto LABEL_140;
LABEL_55:
          v35 = 0;
          goto LABEL_39;
        }
        LOBYTE(result) = 0;
      }
      else
      {
        if ((unsigned __int16)(v31 - 58) < 0xFFF6u)
          goto LABEL_55;
        LOBYTE(result) = 0;
LABEL_48:
        v10 = 1;
      }
      goto LABEL_140;
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
      v14 = v13 + 1;
      this[3] = v13 + 1;
      goto LABEL_138;
    default:
      v14 = v13 + 1;
      v32 = v13[1];
      this[3] = v13 + 1;
      this[6] = v13 + 1;
      if ((unsigned __int16)(v32 + SLChar::sLexFold[v32 & 0x3F | (SLChar::sUniMap[v32 >> 6] << 6)] - 127) < 0xFFA2u)
        return 0;
      v33 = v13[2];
      this[3] = v13 + 2;
      if ((unsigned __int16)(v33 + SLChar::sLexFold[v33 & 0x3F | (SLChar::sUniMap[v33 >> 6] << 6)] - 33) >= 0x5Eu)
        goto LABEL_38;
      v34 = v13[3];
      this[3] = v13 + 3;
      if ((unsigned __int16)(v34 + SLChar::sLexFold[v34 & 0x3F | (SLChar::sUniMap[v34 >> 6] << 6)] - 127) < 0xFFA2u)
        goto LABEL_38;
      v59 = v13 + 4;
      this[3] = v59;
      goto LABEL_163;
  }
}

uint64_t SLLexerImpl::SimpleCommand(unsigned __int16 **this, unsigned int a2, unsigned int a3)
{
  unsigned int v4;
  unsigned int v6;
  unsigned int v7;

  v6 = 0;
  v7 = a2;
  if (a3 < 2)
  {
    v4 = a2;
    if (!SLLexerImpl::ScanWhole(this, &v6, a3 == 1))
      return 0;
    return SLLexerInstance::CreateCommandToken((SLLexerInstance *)this, v4, v6);
  }
  if (SLLexerImpl::ScanFixed(this, &v6, &v7, a3 == 2))
  {
    v4 = v7;
    return SLLexerInstance::CreateCommandToken((SLLexerInstance *)this, v4, v6);
  }
  return 0;
}

uint64_t SLLexerImpl::ToBICommand(SLLexerImpl *this, int a2)
{
  unsigned int v4;
  unsigned int v6;

  v6 = 0;
  SLLexerImpl::SkipSpaces(this);
  v4 = 0;
  if ((unsigned __int16)(**((_WORD **)this + 3)
                        + SLChar::sLexFold[**((_WORD **)this + 3) & 0x3F | (SLChar::sUniMap[(unint64_t)**((unsigned __int16 **)this + 3) >> 6] << 6)]
                        - 48) <= 9u)
  {
    if (!SLLexerImpl::ScanFixed((unsigned __int16 **)this, &v6, 0, 0))
      return 0;
    v4 = v6;
  }
  if (v4 >= 0xFFFFFF)
    v4 = 0xFFFFFF;
  return SLLexerInstance::CreateCommandToken(this, 1953456745, v4 | (a2 << 24));
}

uint64_t SLLexerImpl::NextCommandToken(SLLexerImpl *this)
{
  unsigned __int16 **v2;
  uint64_t v3;
  unsigned __int16 *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned __int16 v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int16 *v13;
  unsigned int v14;
  unsigned __int16 v15;
  BOOL v16;
  unsigned int v17;
  unsigned __int16 v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned __int16 *v22;
  unsigned int v23;
  unsigned __int16 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned __int16 *v28;
  unsigned int v29;
  unsigned __int16 v30;
  unint64_t v31;
  unsigned int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned __int16 *v36;
  unsigned int v37;
  unsigned __int16 v38;
  BOOL v39;
  unint64_t v40;
  unsigned __int16 v41;
  unsigned int v42;
  unsigned __int16 v43;
  _WORD *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unsigned __int16 *v51;
  unsigned int v52;
  unsigned __int16 v53;
  unint64_t v54;
  unint64_t v55;
  unsigned __int16 *v56;
  unsigned int v57;
  unsigned __int16 v58;
  BOOL v59;
  unint64_t v60;
  unint64_t v61;
  unsigned __int16 *v62;
  unsigned int v63;
  unsigned __int16 v64;
  unint64_t v65;
  unsigned __int16 v66;
  unint64_t v67;
  unint64_t v68;
  unsigned __int16 *v69;
  unsigned int v70;
  unsigned __int16 v71;
  unint64_t v72;
  unint64_t v73;
  unsigned __int16 *v74;
  unsigned int v75;
  unsigned __int16 v76;
  unint64_t v77;
  unint64_t v78;
  unsigned __int16 *v79;
  unsigned int v80;
  unsigned __int16 v81;
  BOOL v82;
  unint64_t v83;
  unint64_t v84;
  unsigned __int16 *v85;
  unsigned int v86;
  unsigned __int16 v87;
  unint64_t v88;
  unint64_t v89;
  unsigned __int16 *v90;
  unsigned int v91;
  unsigned __int16 v92;
  unint64_t v93;
  unint64_t v94;
  unsigned __int16 *i;
  unint64_t v96;
  unint64_t v97;
  unsigned __int16 *v98;
  unsigned int v99;
  unsigned __int16 v100;
  unint64_t v101;
  unint64_t v102;
  unsigned __int16 *v103;
  unsigned int v104;
  unsigned __int16 v105;
  unint64_t v106;
  unint64_t v107;
  unsigned __int16 *v108;
  unsigned int v109;
  unsigned __int16 v110;
  unsigned int v111;
  unsigned __int16 **v112;
  unsigned int v113;
  unsigned int v114;
  int v115;
  unsigned int v116;
  unsigned __int16 *v117;
  unint64_t v118;
  unsigned __int16 v119;
  unsigned int v120;
  unint64_t v121;
  unsigned __int16 v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  unint64_t v126;
  unint64_t v127;
  unsigned __int16 *v128;
  unsigned int v129;
  unsigned __int16 v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  uint64_t CommandToken;
  unsigned int v136;
  unsigned __int16 v137;
  unsigned __int16 *v138;
  unsigned int v139;
  unint64_t v140;
  unsigned __int16 *v141;
  unsigned int v142;
  unsigned __int16 v143;
  unsigned int v144;
  int v145;
  unsigned int v146;
  unsigned __int16 *v147;
  unint64_t v148;
  unsigned __int16 v149;
  unsigned __int16 *v150;
  unsigned __int16 v151;
  uint64_t v152;
  unsigned __int16 *v153;
  unsigned __int16 v154;
  unsigned int v155;
  unsigned int v156;
  BOOL v157;
  unint64_t v158;
  unsigned __int16 v159;
  unint64_t v160;
  unsigned __int16 v161;
  unint64_t v162;
  unsigned __int16 v163;
  uint64_t v164;
  int v165;
  int v166;
  unsigned int v167;
  unsigned int v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unsigned __int16 *v172;
  unsigned int v173;
  unsigned __int16 v174;
  unint64_t v175;
  unsigned __int16 v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unsigned __int16 *v180;
  unsigned int v181;
  unsigned __int16 v182;
  unint64_t v183;
  unint64_t v184;
  unsigned __int16 *v185;
  unsigned int v186;
  unsigned __int16 v187;
  unint64_t v188;
  unint64_t v189;
  unsigned __int16 *v190;
  unsigned int v191;
  unsigned __int16 v192;
  unsigned int v193;
  unsigned int v194;
  BOOL v195;
  unsigned int v196;
  unsigned int v197;
  BOOL v198;
  unsigned int v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unsigned int v203;
  unsigned int v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  unsigned int v208;
  unsigned int v209;
  BOOL v210;
  SLLexerImpl *v211;
  int v212;
  unsigned int v213;
  unint64_t v214;
  unsigned __int16 v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  unsigned __int16 v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  unsigned __int16 v229;
  unint64_t v230;
  unint64_t v231;
  unint64_t v232;
  unsigned __int16 v233;
  unint64_t v234;
  unint64_t v235;
  unint64_t v236;
  unint64_t v237;
  int v238;
  BOOL v239;
  unint64_t v240;
  unsigned __int16 v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  unint64_t v248;
  unint64_t v249;
  unint64_t v250;
  unint64_t v251;
  unsigned int v252;
  unsigned int v253;
  unsigned int v254;
  unint64_t v255;
  unint64_t v256;
  unint64_t v257;
  unint64_t v258;
  unint64_t v259;
  unint64_t v260;
  unsigned int v261;
  unsigned int v262;
  unsigned int v263;
  unint64_t v264;
  unint64_t v265;
  unint64_t v266;
  unint64_t v267;
  unint64_t v268;
  unint64_t v269;
  unsigned int v270;
  unsigned int v271;
  unsigned int v272;
  unint64_t v273;
  unint64_t v274;
  unint64_t v275;
  unint64_t v276;
  unsigned __int16 v277;
  unint64_t v278;
  unsigned __int16 v279;
  unint64_t v280;
  unint64_t v281;
  unint64_t v282;
  unint64_t v283;
  unint64_t v284;
  unint64_t v285;
  unint64_t v286;
  unint64_t v287;
  unsigned int v288;
  int v289;
  uint64_t BehaviorToken;
  uint64_t v291;
  SLLexerInstance *v293;
  int v294;
  unsigned int v295;
  unsigned int v296;
  unsigned int v297;
  unsigned int v298;

  *((_QWORD *)this + 9) = &SLLexerInstance::sNoDelim;
  v2 = (unsigned __int16 **)((char *)this + 24);
  v3 = 1;
  while (1)
  {
LABEL_2:
    v4 = (unsigned __int16 *)*((_QWORD *)this + 3);
    if ((uint64_t)(*((_QWORD *)this + 5) - (_QWORD)v4) <= 3)
    {
      SLLexerInstance::Refill(this);
      v4 = (unsigned __int16 *)*((_QWORD *)this + 3);
    }
    v5 = *v4;
    v6 = v5 >> 6;
    v7 = v5 & 0x3F;
    if (*((unsigned __int16 *)this + 42) == (unsigned __int16)(SLChar::sLexFold[v7 | (SLChar::sUniMap[v5 >> 6] << 6)]
                                                              + v5))
    {
      if (!*((_WORD *)this + 43))
        goto LABEL_832;
      if (v4[1] == *((unsigned __int16 *)this + 43))
      {
        v3 = 2;
LABEL_832:
        v4 += v3;
LABEL_833:
        *((_QWORD *)this + 3) = v4;
        v288 = *((_DWORD *)this + 24);
        v289 = *((_DWORD *)this + 25);
        *((_DWORD *)this + 23) = v288;
        if ((v289 ^ v288) >= 0x10)
        {
          BehaviorToken = SLLexerImpl::CreateBehaviorToken(this);
          v4 = (unsigned __int16 *)*((_QWORD *)this + 3);
        }
        else
        {
          BehaviorToken = 0;
        }
        v291 = *((_QWORD *)this + 13);
        *((_QWORD *)this + 9) = (char *)this + 80;
        *((_QWORD *)this + 10) = v291;
        *((_QWORD *)this + 8) = v4;
        SLLexerInstance::Refill(this);
        return BehaviorToken;
      }
    }
    *((_QWORD *)this + 8) = v4;
    if ((uint64_t)(*((_QWORD *)this + 5) - (_QWORD)v4) <= 9)
    {
      SLLexerInstance::Refill(this);
      v4 = (unsigned __int16 *)*((_QWORD *)this + 3);
      v5 = *v4;
      v6 = v5 >> 6;
      v7 = v5 & 0x3F;
    }
    v8 = SLChar::sLexFold[v7 | (SLChar::sUniMap[v6] << 6)] + v5;
    if (v8 > 0x57u)
    {
      if (v8 > 0x70u)
      {
        if (v8 <= 0x77u)
        {
          if (v8 <= 0x73u)
          {
            v9 = v8 == 114;
            if (v8 < 0x72u)
              goto LABEL_134;
            goto LABEL_41;
          }
          if (v8 != 118)
            goto LABEL_134;
LABEL_94:
          v40 = v4[1];
          *((_QWORD *)this + 3) = v4 + 1;
          *((_QWORD *)this + 6) = v4 + 1;
          v41 = SLChar::sLexFold[v40 & 0x3F | (SLChar::sUniMap[v40 >> 6] << 6)] + v40;
          if (v41 > 0x4Fu)
          {
            if (v41 > 0x65u)
            {
              if (v41 != 111)
                goto LABEL_727;
              goto LABEL_186;
            }
            if (v41 != 101)
              goto LABEL_727;
          }
          else if (v41 != 69)
          {
            if (v41 < 0x4Fu)
              goto LABEL_727;
LABEL_186:
            v83 = v4[2];
            *v2 = v4 + 2;
            if ((((unsigned __int16)SLChar::sLexFold[v83 & 0x3F | (SLChar::sUniMap[v83 >> 6] << 6)] + (_DWORD)v83) & 0xFFDF) != 0x4C)
              goto LABEL_726;
            v84 = v4[3];
            *v2 = v4 + 3;
            if ((((unsigned __int16)SLChar::sLexFold[v84 & 0x3F | (SLChar::sUniMap[v84 >> 6] << 6)] + (_DWORD)v84) & 0xFFDF) != 0x4D)
              goto LABEL_726;
            v86 = v4[4];
            v85 = v4 + 4;
            *v2 = v85;
            v87 = SLChar::sLexFold[v86 & 0x3F | (SLChar::sUniMap[(unint64_t)v86 >> 6] << 6)] + v86;
            if (v87 > 0x20u)
            {
              if (v87 > 0xA0u)
              {
                if (v87 != 8239)
                  goto LABEL_726;
              }
              else if (v87 != 160)
              {
                goto LABEL_726;
              }
            }
            else if (v87 != 9 && v87 != 32)
            {
              goto LABEL_726;
            }
            do
            {
              while (1)
              {
                *((_QWORD *)this + 3) = ++v85;
                if (*((unsigned __int16 **)this + 5) == v85)
                {
                  SLLexerInstance::Refill(this);
                  v85 = (unsigned __int16 *)*((_QWORD *)this + 3);
                }
                v120 = (unsigned __int16)(SLChar::sLexFold[*v85 & 0x3F | (SLChar::sUniMap[(unint64_t)*v85 >> 6] << 6)]
                                        + *v85);
                if (v120 <= 0x20)
                  break;
                if (v120 > 0xA0)
                {
                  if ((unsigned __int16)(SLChar::sLexFold[*v85 & 0x3F | (SLChar::sUniMap[(unint64_t)*v85 >> 6] << 6)]
                                        + *v85) != 8239)
                    goto LABEL_309;
                }
                else if ((unsigned __int16)(SLChar::sLexFold[*v85 & 0x3F | (SLChar::sUniMap[(unint64_t)*v85 >> 6] << 6)]
                                           + *v85) != 160)
                {
                  goto LABEL_309;
                }
              }
            }
            while (v120 == 9 || v120 == 32);
LABEL_309:
            v112 = (unsigned __int16 **)this;
            v113 = 1987013741;
            goto LABEL_414;
          }
          v60 = v4[2];
          *v2 = v4 + 2;
          if ((((unsigned __int16)SLChar::sLexFold[v60 & 0x3F | (SLChar::sUniMap[v60 >> 6] << 6)] + (_DWORD)v60) & 0xFFDF) != 0x52)
            goto LABEL_726;
          v61 = v4[3];
          *v2 = v4 + 3;
          if ((((unsigned __int16)SLChar::sLexFold[v61 & 0x3F | (SLChar::sUniMap[v61 >> 6] << 6)] + (_DWORD)v61) & 0xFFDF) != 0x53)
            goto LABEL_726;
          v63 = v4[4];
          v62 = v4 + 4;
          *v2 = v62;
          v64 = SLChar::sLexFold[v63 & 0x3F | (SLChar::sUniMap[(unint64_t)v63 >> 6] << 6)] + v63;
          if (v64 > 0x20u)
          {
            if (v64 > 0xA0u)
            {
              if (v64 != 8239)
                goto LABEL_726;
            }
            else if (v64 != 160)
            {
              goto LABEL_726;
            }
          }
          else if (v64 != 9 && v64 != 32)
          {
            goto LABEL_726;
          }
          do
          {
            while (1)
            {
              *((_QWORD *)this + 3) = ++v62;
              if (*((unsigned __int16 **)this + 5) == v62)
              {
                SLLexerInstance::Refill(this);
                v62 = (unsigned __int16 *)*((_QWORD *)this + 3);
              }
              v111 = (unsigned __int16)(SLChar::sLexFold[*v62 & 0x3F | (SLChar::sUniMap[(unint64_t)*v62 >> 6] << 6)]
                                      + *v62);
              if (v111 <= 0x20)
                break;
              if (v111 > 0xA0)
              {
                if ((unsigned __int16)(SLChar::sLexFold[*v62 & 0x3F | (SLChar::sUniMap[(unint64_t)*v62 >> 6] << 6)]
                                      + *v62) != 8239)
                  goto LABEL_268;
              }
              else if ((unsigned __int16)(SLChar::sLexFold[*v62 & 0x3F | (SLChar::sUniMap[(unint64_t)*v62 >> 6] << 6)]
                                         + *v62) != 160)
              {
                goto LABEL_268;
              }
            }
          }
          while (v111 == 9 || v111 == 32);
LABEL_268:
          v112 = (unsigned __int16 **)this;
          v113 = 1986359923;
          goto LABEL_401;
        }
        if (v8 > 0xA0u)
        {
          if (v8 != 8239)
            goto LABEL_134;
          goto LABEL_105;
        }
        if (v8 >= 0x79u)
        {
          if (v8 < 0xA0u)
            goto LABEL_134;
          goto LABEL_105;
        }
LABEL_49:
        v19 = v4[1];
        *((_QWORD *)this + 3) = v4 + 1;
        *((_QWORD *)this + 6) = v4 + 1;
        if ((((unsigned __int16)SLChar::sLexFold[v19 & 0x3F | (SLChar::sUniMap[v19 >> 6] << 6)] + (_DWORD)v19) & 0xFFDF) != 0x54)
          goto LABEL_727;
        v20 = v4[2];
        *v2 = v4 + 2;
        if ((((unsigned __int16)SLChar::sLexFold[v20 & 0x3F | (SLChar::sUniMap[v20 >> 6] << 6)] + (_DWORD)v20) & 0xFFDF) != 0x4E)
          goto LABEL_726;
        v21 = v4[3];
        *v2 = v4 + 3;
        if ((((unsigned __int16)SLChar::sLexFold[v21 & 0x3F | (SLChar::sUniMap[v21 >> 6] << 6)] + (_DWORD)v21) & 0xFFDF) != 0x44)
          goto LABEL_726;
        v23 = v4[4];
        v22 = v4 + 4;
        *v2 = v22;
        v24 = SLChar::sLexFold[v23 & 0x3F | (SLChar::sUniMap[(unint64_t)v23 >> 6] << 6)] + v23;
        if ((v24 & 0xFFDF) == 0x4D)
          goto LABEL_726;
        while (1)
        {
          if (v24 > 0x4Du)
          {
            if (v24 <= 0x9Fu)
            {
              if (v24 != 109)
                goto LABEL_726;
LABEL_315:
              v121 = v22[1];
              *v2 = v22 + 1;
              v122 = SLChar::sLexFold[v121 & 0x3F | (SLChar::sUniMap[v121 >> 6] << 6)] + v121;
              if (v122 > 0x54u)
              {
                if (v122 > 0x65u)
                {
                  if (v122 != 116)
                    goto LABEL_726;
LABEL_428:
                  v139 = v22[2];
                  v138 = v22 + 2;
                  *v2 = v138;
                  if ((((unsigned __int16)SLChar::sLexFold[v139 & 0x3F | (SLChar::sUniMap[(unint64_t)v139 >> 6] << 6)]
                       + v139) & 0xFFDF) != 0x4C)
                    goto LABEL_726;
                  goto LABEL_429;
                }
                if (v122 != 101)
                  goto LABEL_726;
              }
              else if (v122 != 69)
              {
                if (v122 < 0x54u)
                  goto LABEL_726;
                goto LABEL_428;
              }
              v126 = v22[2];
              *v2 = v22 + 2;
              if ((((unsigned __int16)SLChar::sLexFold[v126 & 0x3F | (SLChar::sUniMap[v126 >> 6] << 6)] + (_DWORD)v126) & 0xFFDF) != 0x4F)
                goto LABEL_726;
              v127 = v22[3];
              *v2 = v22 + 3;
              if ((((unsigned __int16)SLChar::sLexFold[v127 & 0x3F | (SLChar::sUniMap[v127 >> 6] << 6)] + (_DWORD)v127) & 0xFFDF) != 0x57)
                goto LABEL_726;
              v129 = v22[4];
              v128 = v22 + 4;
              *v2 = v128;
              v130 = SLChar::sLexFold[v129 & 0x3F | (SLChar::sUniMap[(unint64_t)v129 >> 6] << 6)] + v129;
              if (v130 >= 0x41u && (v130 < 0x5Bu || (unsigned __int16)(v130 - 97) < 0x1Au))
                goto LABEL_726;
              while (1)
              {
                if (v130 > 0x5Au)
                {
                  if (v130 <= 0x9Fu)
                  {
                    if ((unsigned __int16)(v130 - 123) < 0xFFE6u)
                      goto LABEL_726;
LABEL_489:
                    v158 = v128[1];
                    *v2 = v128 + 1;
                    v159 = SLChar::sLexFold[v158 & 0x3F | (SLChar::sUniMap[v158 >> 6] << 6)] + v158;
                    if (v159 < 0x41u || v159 >= 0x5Bu && (unsigned __int16)(v159 - 123) < 0xFFE6u)
                      goto LABEL_726;
                    v160 = v128[2];
                    *v2 = v128 + 2;
                    v161 = SLChar::sLexFold[v160 & 0x3F | (SLChar::sUniMap[v160 >> 6] << 6)] + v160;
                    if (v161 < 0x41u || v161 >= 0x5Bu && (unsigned __int16)(v161 - 123) < 0xFFE6u)
                      goto LABEL_726;
                    v162 = v128[3];
                    *v2 = v128 + 3;
                    v163 = SLChar::sLexFold[v162 & 0x3F | (SLChar::sUniMap[v162 >> 6] << 6)] + v162;
                    if (v163 < 0x41u || v163 >= 0x5Bu && (unsigned __int16)(v163 - 123) < 0xFFE6u)
                      goto LABEL_726;
                    v164 = 0;
                    v165 = 0;
                    *v2 = v128 + 4;
                    do
                      v165 = v128[v164++] + (v165 << 8);
                    while (v164 != 4);
                    v296 = 0;
                    v297 = 0;
                    if (SLLexerImpl::ScanFixed((unsigned __int16 **)this, &v297, 0, 0)
                      && SLLexerImpl::ScanWhole((unsigned __int16 **)this, &v296, 0))
                    {
                      v166 = v165 | 0x20202020;
                      if ((v165 | 0x20202020) == 0x666F7263)
                      {
                        v294 = 1835429746;
                      }
                      else if (v166 == 1870030194)
                      {
                        v294 = 1836021362;
                      }
                      else
                      {
                        if (v166 != 1986360431)
                        {
                          *v2 = v128;
                          goto LABEL_727;
                        }
                        v294 = 1836475764;
                      }
                      v295 = (unsigned __int16)v296 | v297 & 0x7FFF0000 | (((unsigned __int16)v297 != 0) << 31);
                      v293 = this;
                      goto LABEL_838;
                    }
                    v138 = *v2;
LABEL_429:
                    v140 = v138[1];
                    *v2 = v138 + 1;
                    if ((((unsigned __int16)SLChar::sLexFold[v140 & 0x3F | (SLChar::sUniMap[v140 >> 6] << 6)]
                         + (_DWORD)v140) & 0xFFDF) != 0x4B)
                      goto LABEL_726;
                    v142 = v138[2];
                    v141 = v138 + 2;
                    *v2 = v141;
                    v143 = SLChar::sLexFold[v142 & 0x3F | (SLChar::sUniMap[(unint64_t)v142 >> 6] << 6)] + v142;
                    if (v143 > 0x20u)
                    {
                      if (v143 > 0xA0u)
                      {
                        if (v143 != 8239)
                          goto LABEL_726;
                      }
                      else if (v143 != 160)
                      {
                        goto LABEL_726;
                      }
                    }
                    else if (v143 != 9 && v143 != 32)
                    {
                      goto LABEL_726;
                    }
                    while (1)
                    {
                      *((_QWORD *)this + 3) = ++v141;
                      if ((uint64_t)(*((_QWORD *)this + 5) - (_QWORD)v141) <= 9)
                      {
                        SLLexerInstance::Refill(this);
                        v141 = (unsigned __int16 *)*((_QWORD *)this + 3);
                      }
                      v155 = (unsigned __int16)(SLChar::sLexFold[*v141 & 0x3F | (SLChar::sUniMap[(unint64_t)*v141 >> 6] << 6)]
                                              + *v141);
                      if (v155 <= 0x54)
                        break;
                      if (v155 <= 0x73)
                      {
                        v168 = (unsigned __int16)(SLChar::sLexFold[*v141 & 0x3F | (SLChar::sUniMap[(unint64_t)*v141 >> 6] << 6)]
                                                + *v141);
                        if (v168 <= 0x61)
                        {
                          if (v168 != 97)
                            goto LABEL_726;
                          goto LABEL_511;
                        }
                        if (v168 != 114)
                          goto LABEL_726;
LABEL_525:
                        v177 = v141[1];
                        *v2 = v141 + 1;
                        if ((((unsigned __int16)SLChar::sLexFold[v177 & 0x3F | (SLChar::sUniMap[v177 >> 6] << 6)]
                             + (_DWORD)v177) & 0xFFDF) != 0x4F)
                          goto LABEL_726;
                        v178 = v141[2];
                        *v2 = v141 + 2;
                        if ((((unsigned __int16)SLChar::sLexFold[v178 & 0x3F | (SLChar::sUniMap[v178 >> 6] << 6)]
                             + (_DWORD)v178) & 0xFFDF) != 0x4D)
                          goto LABEL_726;
                        v179 = v141[3];
                        *v2 = v141 + 3;
                        if ((((unsigned __int16)SLChar::sLexFold[v179 & 0x3F | (SLChar::sUniMap[v179 >> 6] << 6)]
                             + (_DWORD)v179) & 0xFFDF) != 0x4E)
                          goto LABEL_726;
                        v181 = v141[4];
                        v180 = v141 + 4;
                        *v2 = v180;
                        v182 = SLChar::sLexFold[v181 & 0x3F | (SLChar::sUniMap[(unint64_t)v181 >> 6] << 6)]
                             + v181;
                        if (v182 > 0x20u)
                        {
                          if (v182 > 0xA0u)
                          {
                            if (v182 != 8239)
                              goto LABEL_726;
                          }
                          else if (v182 != 160)
                          {
                            goto LABEL_726;
                          }
                        }
                        else if (v182 != 9 && v182 != 32)
                        {
                          goto LABEL_726;
                        }
                        while (1)
                        {
                          *((_QWORD *)this + 3) = ++v180;
                          if ((uint64_t)(*((_QWORD *)this + 5) - (_QWORD)v180) <= 7)
                          {
                            SLLexerInstance::Refill(this);
                            v180 = (unsigned __int16 *)*((_QWORD *)this + 3);
                          }
                          v196 = (unsigned __int16)(SLChar::sLexFold[*v180 & 0x3F | (SLChar::sUniMap[(unint64_t)*v180 >> 6] << 6)]
                                                  + *v180);
                          if (v196 > 0x53)
                            break;
                          v197 = (unsigned __int16)(SLChar::sLexFold[*v180 & 0x3F | (SLChar::sUniMap[(unint64_t)*v180 >> 6] << 6)]
                                                  + *v180);
                          if (v196 > 0x20)
                          {
                            if (v197 == 78)
                              goto LABEL_604;
                            if (v197 < 0x53)
                              goto LABEL_726;
                            goto LABEL_637;
                          }
                          if (v197 != 9)
                          {
                            v198 = v197 == 32;
LABEL_588:
                            if (!v198)
                              goto LABEL_726;
                            continue;
                          }
                        }
                        if (v196 <= 0x73)
                        {
                          v204 = (unsigned __int16)(SLChar::sLexFold[*v180 & 0x3F | (SLChar::sUniMap[(unint64_t)*v180 >> 6] << 6)]
                                                  + *v180);
                          if (v204 == 110)
                          {
LABEL_604:
                            v205 = v180[1];
                            *v2 = v180 + 1;
                            if ((((unsigned __int16)SLChar::sLexFold[v205 & 0x3F | (SLChar::sUniMap[v205 >> 6] << 6)]
                                 + (_DWORD)v205) & 0xFFDF) != 0x4F)
                              goto LABEL_726;
                            v206 = v180[2];
                            *v2 = v180 + 2;
                            if ((((unsigned __int16)SLChar::sLexFold[v206 & 0x3F | (SLChar::sUniMap[v206 >> 6] << 6)]
                                 + (_DWORD)v206) & 0xFFDF) != 0x52)
                              goto LABEL_726;
                            v207 = v180[3];
                            *v2 = v180 + 3;
                            if ((((unsigned __int16)SLChar::sLexFold[v207 & 0x3F | (SLChar::sUniMap[v207 >> 6] << 6)]
                                 + (_DWORD)v207) & 0xFFDF) != 0x4D)
                              goto LABEL_726;
                            *((_QWORD *)this + 3) = v180 + 4;
                            v203 = *((_DWORD *)this + 24) & 0xFFFFFF7F;
                            goto LABEL_728;
                          }
                          if (v204 < 0x73)
                            goto LABEL_726;
LABEL_637:
                          v219 = v180[1];
                          *v2 = v180 + 1;
                          if ((((unsigned __int16)SLChar::sLexFold[v219 & 0x3F | (SLChar::sUniMap[v219 >> 6] << 6)]
                               + (_DWORD)v219) & 0xFFDF) != 0x50)
                            goto LABEL_726;
                          v220 = v180[2];
                          *v2 = v180 + 2;
                          if ((((unsigned __int16)SLChar::sLexFold[v220 & 0x3F | (SLChar::sUniMap[v220 >> 6] << 6)]
                               + (_DWORD)v220) & 0xFFDF) != 0x4C)
                            goto LABEL_726;
                          v221 = v180[3];
                          *v2 = v180 + 3;
                          if ((((unsigned __int16)SLChar::sLexFold[v221 & 0x3F | (SLChar::sUniMap[v221 >> 6] << 6)]
                               + (_DWORD)v221) & 0xFFDF) != 0x4C)
                            goto LABEL_726;
                          *((_QWORD *)this + 3) = v180 + 4;
                          v203 = *((_DWORD *)this + 24) | 0x80;
                          goto LABEL_728;
                        }
                        v198 = (unsigned __int16)(SLChar::sLexFold[*v180 & 0x3F | (SLChar::sUniMap[(unint64_t)*v180 >> 6] << 6)]
                                                + *v180) == 160;
                        if ((unsigned __int16)(SLChar::sLexFold[*v180 & 0x3F | (SLChar::sUniMap[(unint64_t)*v180 >> 6] << 6)]
                                              + *v180) > 0xA0u)
                          v198 = (unsigned __int16)(SLChar::sLexFold[*v180 & 0x3F | (SLChar::sUniMap[(unint64_t)*v180 >> 6] << 6)]
                                                  + *v180) == 8239;
                        goto LABEL_588;
                      }
                      if ((unsigned __int16)(SLChar::sLexFold[*v141 & 0x3F | (SLChar::sUniMap[(unint64_t)*v141 >> 6] << 6)]
                                            + *v141) > 0xA0u)
                      {
                        v157 = (unsigned __int16)(SLChar::sLexFold[*v141 & 0x3F | (SLChar::sUniMap[(unint64_t)*v141 >> 6] << 6)]
                                                + *v141) == 8239;
LABEL_486:
                        if (!v157)
                          goto LABEL_726;
                        continue;
                      }
                      if ((unsigned __int16)(SLChar::sLexFold[*v141 & 0x3F | (SLChar::sUniMap[(unint64_t)*v141 >> 6] << 6)]
                                            + *v141) < 0x75u)
                        goto LABEL_520;
                      if ((unsigned __int16)(SLChar::sLexFold[*v141 & 0x3F | (SLChar::sUniMap[(unint64_t)*v141 >> 6] << 6)]
                                            + *v141) < 0xA0u)
                        goto LABEL_726;
                    }
                    if (v155 > 0x40)
                    {
                      v167 = (unsigned __int16)(SLChar::sLexFold[*v141 & 0x3F | (SLChar::sUniMap[(unint64_t)*v141 >> 6] << 6)]
                                              + *v141);
                      if (v167 <= 0x51)
                      {
                        if (v167 >= 0x42)
                          goto LABEL_726;
LABEL_511:
                        v169 = v141[1];
                        *v2 = v141 + 1;
                        if ((((unsigned __int16)SLChar::sLexFold[v169 & 0x3F | (SLChar::sUniMap[v169 >> 6] << 6)]
                             + (_DWORD)v169) & 0xFFDF) != 0x42)
                          goto LABEL_726;
                        v170 = v141[2];
                        *v2 = v141 + 2;
                        if ((((unsigned __int16)SLChar::sLexFold[v170 & 0x3F | (SLChar::sUniMap[v170 >> 6] << 6)]
                             + (_DWORD)v170) & 0xFFDF) != 0x42)
                          goto LABEL_726;
                        v171 = v141[3];
                        *v2 = v141 + 3;
                        if ((((unsigned __int16)SLChar::sLexFold[v171 & 0x3F | (SLChar::sUniMap[v171 >> 6] << 6)]
                             + (_DWORD)v171) & 0xFFDF) != 0x52)
                          goto LABEL_726;
                        v173 = v141[4];
                        v172 = v141 + 4;
                        *v2 = v172;
                        v174 = SLChar::sLexFold[v173 & 0x3F | (SLChar::sUniMap[(unint64_t)v173 >> 6] << 6)]
                             + v173;
                        if (v174 > 0x20u)
                        {
                          if (v174 > 0xA0u)
                          {
                            if (v174 != 8239)
                              goto LABEL_726;
                          }
                          else if (v174 != 160)
                          {
                            goto LABEL_726;
                          }
                        }
                        else if (v174 != 9 && v174 != 32)
                        {
                          goto LABEL_726;
                        }
                        while (1)
                        {
                          *((_QWORD *)this + 3) = ++v172;
                          if ((uint64_t)(*((_QWORD *)this + 5) - (_QWORD)v172) <= 7)
                          {
                            SLLexerInstance::Refill(this);
                            v172 = (unsigned __int16 *)*((_QWORD *)this + 3);
                          }
                          v193 = (unsigned __int16)(SLChar::sLexFold[*v172 & 0x3F | (SLChar::sUniMap[(unint64_t)*v172 >> 6] << 6)]
                                                  + *v172);
                          if (v193 > 0x53)
                            break;
                          v194 = (unsigned __int16)(SLChar::sLexFold[*v172 & 0x3F | (SLChar::sUniMap[(unint64_t)*v172 >> 6] << 6)]
                                                  + *v172);
                          if (v193 > 0x20)
                          {
                            if (v194 == 78)
                              goto LABEL_596;
                            if (v194 < 0x53)
                              goto LABEL_726;
                            goto LABEL_632;
                          }
                          if (v194 != 9)
                          {
                            v195 = v194 == 32;
LABEL_576:
                            if (!v195)
                              goto LABEL_726;
                            continue;
                          }
                        }
                        if (v193 <= 0x73)
                        {
                          v199 = (unsigned __int16)(SLChar::sLexFold[*v172 & 0x3F | (SLChar::sUniMap[(unint64_t)*v172 >> 6] << 6)]
                                                  + *v172);
                          if (v199 == 110)
                          {
LABEL_596:
                            v200 = v172[1];
                            *v2 = v172 + 1;
                            if ((((unsigned __int16)SLChar::sLexFold[v200 & 0x3F | (SLChar::sUniMap[v200 >> 6] << 6)]
                                 + (_DWORD)v200) & 0xFFDF) != 0x4F)
                              goto LABEL_726;
                            v201 = v172[2];
                            *v2 = v172 + 2;
                            if ((((unsigned __int16)SLChar::sLexFold[v201 & 0x3F | (SLChar::sUniMap[v201 >> 6] << 6)]
                                 + (_DWORD)v201) & 0xFFDF) != 0x52)
                              goto LABEL_726;
                            v202 = v172[3];
                            *v2 = v172 + 3;
                            if ((((unsigned __int16)SLChar::sLexFold[v202 & 0x3F | (SLChar::sUniMap[v202 >> 6] << 6)]
                                 + (_DWORD)v202) & 0xFFDF) != 0x4D)
                              goto LABEL_726;
                            *((_QWORD *)this + 3) = v172 + 4;
                            v203 = *((_DWORD *)this + 24) & 0xFFFFFEFF;
                            goto LABEL_728;
                          }
                          if (v199 < 0x73)
                            goto LABEL_726;
LABEL_632:
                          v216 = v172[1];
                          *v2 = v172 + 1;
                          if ((((unsigned __int16)SLChar::sLexFold[v216 & 0x3F | (SLChar::sUniMap[v216 >> 6] << 6)]
                               + (_DWORD)v216) & 0xFFDF) != 0x50)
                            goto LABEL_726;
                          v217 = v172[2];
                          *v2 = v172 + 2;
                          if ((((unsigned __int16)SLChar::sLexFold[v217 & 0x3F | (SLChar::sUniMap[v217 >> 6] << 6)]
                               + (_DWORD)v217) & 0xFFDF) != 0x4C)
                            goto LABEL_726;
                          v218 = v172[3];
                          *v2 = v172 + 3;
                          if ((((unsigned __int16)SLChar::sLexFold[v218 & 0x3F | (SLChar::sUniMap[v218 >> 6] << 6)]
                               + (_DWORD)v218) & 0xFFDF) != 0x4C)
                            goto LABEL_726;
                          *((_QWORD *)this + 3) = v172 + 4;
                          v203 = *((_DWORD *)this + 24) | 0x100;
                          goto LABEL_728;
                        }
                        v195 = (unsigned __int16)(SLChar::sLexFold[*v172 & 0x3F | (SLChar::sUniMap[(unint64_t)*v172 >> 6] << 6)]
                                                + *v172) == 160;
                        if ((unsigned __int16)(SLChar::sLexFold[*v172 & 0x3F | (SLChar::sUniMap[(unint64_t)*v172 >> 6] << 6)]
                                              + *v172) > 0xA0u)
                          v195 = (unsigned __int16)(SLChar::sLexFold[*v172 & 0x3F | (SLChar::sUniMap[(unint64_t)*v172 >> 6] << 6)]
                                                  + *v172) == 8239;
                        goto LABEL_576;
                      }
                      if (v167 == 82)
                        goto LABEL_525;
                      if ((unsigned __int16)(SLChar::sLexFold[*v141 & 0x3F | (SLChar::sUniMap[(unint64_t)*v141 >> 6] << 6)]
                                            + *v141) < 0x54u)
                        goto LABEL_726;
LABEL_520:
                      v175 = v141[1];
                      *v2 = v141 + 1;
                      v176 = SLChar::sLexFold[v175 & 0x3F | (SLChar::sUniMap[v175 >> 6] << 6)] + v175;
                      if (v176 > 0x4Fu)
                      {
                        if (v176 > 0x69u)
                        {
                          if (v176 != 111)
                            goto LABEL_726;
                          goto LABEL_550;
                        }
                        if (v176 != 105)
                          goto LABEL_726;
                      }
                      else if (v176 != 73)
                      {
                        if (v176 < 0x4Fu)
                          goto LABEL_726;
LABEL_550:
                        v188 = v141[2];
                        *v2 = v141 + 2;
                        if ((((unsigned __int16)SLChar::sLexFold[v188 & 0x3F | (SLChar::sUniMap[v188 >> 6] << 6)]
                             + (_DWORD)v188) & 0xFFDF) != 0x42)
                          goto LABEL_726;
                        v189 = v141[3];
                        *v2 = v141 + 3;
                        if ((((unsigned __int16)SLChar::sLexFold[v189 & 0x3F | (SLChar::sUniMap[v189 >> 6] << 6)]
                             + (_DWORD)v189) & 0xFFDF) != 0x49)
                          goto LABEL_726;
                        v191 = v141[4];
                        v190 = v141 + 4;
                        *v2 = v190;
                        v192 = SLChar::sLexFold[v191 & 0x3F | (SLChar::sUniMap[(unint64_t)v191 >> 6] << 6)]
                             + v191;
                        if (v192 > 0x20u)
                        {
                          if (v192 > 0xA0u)
                          {
                            if (v192 != 8239)
                              goto LABEL_726;
                          }
                          else if (v192 != 160)
                          {
                            goto LABEL_726;
                          }
                        }
                        else if (v192 != 9 && v192 != 32)
                        {
                          goto LABEL_726;
                        }
                        while (1)
                        {
                          *((_QWORD *)this + 3) = ++v190;
                          if ((uint64_t)(*((_QWORD *)this + 5) - (_QWORD)v190) <= 7)
                          {
                            SLLexerInstance::Refill(this);
                            v190 = (unsigned __int16 *)*((_QWORD *)this + 3);
                          }
                          v208 = (unsigned __int16)(SLChar::sLexFold[*v190 & 0x3F | (SLChar::sUniMap[(unint64_t)*v190 >> 6] << 6)]
                                                  + *v190);
                          if (v208 > 0x4B)
                            break;
                          v209 = (unsigned __int16)(SLChar::sLexFold[*v190 & 0x3F | (SLChar::sUniMap[(unint64_t)*v190 >> 6] << 6)]
                                                  + *v190);
                          if (v208 > 0x20)
                          {
                            if (v209 <= 0x2D)
                            {
                              if (v209 != 45)
                                goto LABEL_726;
                              *((_QWORD *)this + 3) = v190 + 1;
                              v211 = this;
                              v212 = 4;
                              goto LABEL_684;
                            }
                            if (v209 != 72)
                              goto LABEL_726;
                            goto LABEL_649;
                          }
                          if (v209 != 9)
                          {
                            v210 = v209 == 32;
LABEL_618:
                            if (!v210)
                              goto LABEL_726;
                            continue;
                          }
                        }
                        if (v208 <= 0x6C)
                        {
                          v213 = (unsigned __int16)(SLChar::sLexFold[*v190 & 0x3F | (SLChar::sUniMap[(unint64_t)*v190 >> 6] << 6)]
                                                  + *v190);
                          if (v213 <= 0x67)
                          {
                            if (v213 >= 0x4D)
                              goto LABEL_726;
LABEL_657:
                            v228 = v190[1];
                            *v2 = v190 + 1;
                            v229 = SLChar::sLexFold[v228 & 0x3F | (SLChar::sUniMap[v228 >> 6] << 6)] + v228;
                            if (v229 > 0x2Au)
                            {
                              if (v229 == 43)
                              {
                                v235 = v190[2];
                                *v2 = v190 + 2;
                                if ((((unsigned __int16)SLChar::sLexFold[v235 & 0x3F | (SLChar::sUniMap[v235 >> 6] << 6)]
                                     + (_DWORD)v235) & 0xFFDF) != 0x48)
                                  goto LABEL_726;
                                v236 = v190[3];
                                *v2 = v190 + 3;
                                if ((unsigned __int16)(SLChar::sLexFold[v236 & 0x3F | (SLChar::sUniMap[v236 >> 6] << 6)]
                                                      + v236) != 42)
                                  goto LABEL_726;
                                *((_QWORD *)this + 3) = v190 + 4;
                                v211 = this;
                                v212 = 8;
                              }
                              else
                              {
                                if (v229 != 45)
                                  goto LABEL_726;
                                *((_QWORD *)this + 3) = v190 + 2;
                                v211 = this;
                                v212 = 1;
                              }
                            }
                            else
                            {
                              if (v229 == 37)
                              {
                                *((_QWORD *)this + 3) = v190 + 2;
                                v211 = this;
                                v212 = 5;
                                goto LABEL_684;
                              }
                              if (v229 < 0x2Au)
                                goto LABEL_726;
                              v230 = v190[2];
                              *((_QWORD *)this + 3) = v190 + 2;
                              *((_QWORD *)this + 6) = v190 + 2;
                              if ((unsigned __int16)(SLChar::sLexFold[v230 & 0x3F | (SLChar::sUniMap[v230 >> 6] << 6)]
                                                    + v230) == 43)
                              {
                                v231 = v190[3];
                                *v2 = v190 + 3;
                                if ((((unsigned __int16)SLChar::sLexFold[v231 & 0x3F | (SLChar::sUniMap[v231 >> 6] << 6)]
                                     + (_DWORD)v231) & 0xFFDF) == 0x48)
                                {
                                  *((_QWORD *)this + 3) = v190 + 4;
                                  v211 = this;
                                  v212 = 9;
                                  goto LABEL_684;
                                }
                                *v2 = v190 + 2;
                              }
                              v211 = this;
                              v212 = 7;
                            }
LABEL_684:
                            CommandToken = SLLexerImpl::ToBICommand(v211, v212);
                            if (!CommandToken)
                              goto LABEL_727;
                            goto LABEL_839;
                          }
                          if (v213 != 104)
                          {
                            if ((unsigned __int16)(SLChar::sLexFold[*v190 & 0x3F | (SLChar::sUniMap[(unint64_t)*v190 >> 6] << 6)]
                                                  + *v190) < 0x6Cu)
                              goto LABEL_726;
                            goto LABEL_657;
                          }
LABEL_649:
                          v224 = v190[1];
                          *v2 = v190 + 1;
                          v225 = SLChar::sLexFold[v224 & 0x3F | (SLChar::sUniMap[v224 >> 6] << 6)] + v224;
                          if (v225 > 0x2Au)
                          {
                            if (v225 == 43)
                            {
                              v232 = v190[2];
                              *v2 = v190 + 2;
                              v233 = SLChar::sLexFold[v232 & 0x3F | (SLChar::sUniMap[v232 >> 6] << 6)] + v232;
                              if (v233 > 0x4Bu)
                              {
                                if ((v233 & 0xFFDF) != 0x4C)
                                  goto LABEL_726;
                                v237 = v190[3];
                                *v2 = v190 + 3;
                                if ((unsigned __int16)(SLChar::sLexFold[v237 & 0x3F | (SLChar::sUniMap[v237 >> 6] << 6)]
                                                      + v237) != 42)
                                  goto LABEL_726;
                                *((_QWORD *)this + 3) = v190 + 4;
                                v211 = this;
                                v212 = 11;
                              }
                              else
                              {
                                if (v233 != 33)
                                  goto LABEL_726;
                                v234 = v190[3];
                                *v2 = v190 + 3;
                                if ((((unsigned __int16)SLChar::sLexFold[v234 & 0x3F | (SLChar::sUniMap[v234 >> 6] << 6)]
                                     + (_DWORD)v234) & 0xFFDF) != 0x48)
                                  goto LABEL_726;
                                *((_QWORD *)this + 3) = v190 + 4;
                                v211 = this;
                                v212 = 12;
                              }
                            }
                            else
                            {
                              if (v225 != 45)
                                goto LABEL_726;
                              *((_QWORD *)this + 3) = v190 + 2;
                              v211 = this;
                              v212 = 3;
                            }
                          }
                          else if (v225 == 37)
                          {
                            *((_QWORD *)this + 3) = v190 + 2;
                            v211 = this;
                            v212 = 6;
                          }
                          else
                          {
                            if (v225 < 0x2Au)
                              goto LABEL_726;
                            *((_QWORD *)this + 3) = v190 + 2;
                            v211 = this;
                            v212 = 10;
                          }
                          goto LABEL_684;
                        }
                        v210 = (unsigned __int16)(SLChar::sLexFold[*v190 & 0x3F | (SLChar::sUniMap[(unint64_t)*v190 >> 6] << 6)]
                                                + *v190) == 160;
                        if ((unsigned __int16)(SLChar::sLexFold[*v190 & 0x3F | (SLChar::sUniMap[(unint64_t)*v190 >> 6] << 6)]
                                              + *v190) > 0xA0u)
                          v210 = (unsigned __int16)(SLChar::sLexFold[*v190 & 0x3F | (SLChar::sUniMap[(unint64_t)*v190 >> 6] << 6)]
                                                  + *v190) == 8239;
                        goto LABEL_618;
                      }
                      v183 = v141[2];
                      *v2 = v141 + 2;
                      if ((((unsigned __int16)SLChar::sLexFold[v183 & 0x3F | (SLChar::sUniMap[v183 >> 6] << 6)]
                           + (_DWORD)v183) & 0xFFDF) != 0x4D)
                        goto LABEL_726;
                      v184 = v141[3];
                      *v2 = v141 + 3;
                      if ((((unsigned __int16)SLChar::sLexFold[v184 & 0x3F | (SLChar::sUniMap[v184 >> 6] << 6)]
                           + (_DWORD)v184) & 0xFFDF) != 0x45)
                        goto LABEL_726;
                      v186 = v141[4];
                      v185 = v141 + 4;
                      *v2 = v185;
                      v187 = SLChar::sLexFold[v186 & 0x3F | (SLChar::sUniMap[(unint64_t)v186 >> 6] << 6)] + v186;
                      if ((v187 & 0xFFDF) == 0x4E)
                        goto LABEL_726;
                      while (1)
                      {
                        if (v187 > 0x4Eu)
                        {
                          if (v187 <= 0x9Fu)
                          {
                            if (v187 != 110)
                              goto LABEL_726;
LABEL_627:
                            v214 = v185[1];
                            *v2 = v185 + 1;
                            v215 = SLChar::sLexFold[v214 & 0x3F | (SLChar::sUniMap[v214 >> 6] << 6)] + v214;
                            if (v215 > 0x4Fu)
                            {
                              if (v215 > 0x6Du)
                              {
                                if (v215 != 111)
                                  goto LABEL_726;
LABEL_653:
                                v226 = v185[2];
                                *v2 = v185 + 2;
                                if ((((unsigned __int16)SLChar::sLexFold[v226 & 0x3F | (SLChar::sUniMap[v226 >> 6] << 6)]
                                     + (_DWORD)v226) & 0xFFDF) != 0x52)
                                  goto LABEL_726;
                                v227 = v185[3];
                                *v2 = v185 + 3;
                                if ((((unsigned __int16)SLChar::sLexFold[v227 & 0x3F | (SLChar::sUniMap[v227 >> 6] << 6)]
                                     + (_DWORD)v227) & 0xFFDF) != 0x4D)
                                  goto LABEL_726;
                                *((_QWORD *)this + 3) = v185 + 4;
                                v203 = *((_DWORD *)this + 24) & 0xFFFFFFBF;
                                goto LABEL_728;
                              }
                              if (v215 != 109)
                                goto LABEL_726;
                            }
                            else if (v215 != 77)
                            {
                              if (v215 < 0x4Fu)
                                goto LABEL_726;
                              goto LABEL_653;
                            }
                            v222 = v185[2];
                            *v2 = v185 + 2;
                            if ((((unsigned __int16)SLChar::sLexFold[v222 & 0x3F | (SLChar::sUniMap[v222 >> 6] << 6)]
                                 + (_DWORD)v222) & 0xFFDF) != 0x42)
                              goto LABEL_726;
                            v223 = v185[3];
                            *v2 = v185 + 3;
                            if ((((unsigned __int16)SLChar::sLexFold[v223 & 0x3F | (SLChar::sUniMap[v223 >> 6] << 6)]
                                 + (_DWORD)v223) & 0xFFDF) != 0x52)
                              goto LABEL_726;
                            *((_QWORD *)this + 3) = v185 + 4;
                            v203 = *((_DWORD *)this + 24) | 0x40;
                            goto LABEL_728;
                          }
                          if (v187 != 160 && v187 != 8239)
                            goto LABEL_726;
                        }
                        else if (v187 > 0x1Fu)
                        {
                          if (v187 != 32)
                          {
                            if (v187 < 0x4Eu)
                              goto LABEL_726;
                            goto LABEL_627;
                          }
                        }
                        else if (v187 != 9)
                        {
                          goto LABEL_726;
                        }
                        *((_QWORD *)this + 3) = ++v185;
                        if ((uint64_t)(*((_QWORD *)this + 5) - (_QWORD)v185) <= 7)
                        {
                          SLLexerInstance::Refill(this);
                          v185 = (unsigned __int16 *)*((_QWORD *)this + 3);
                        }
                        v187 = SLChar::sLexFold[*v185 & 0x3F | (SLChar::sUniMap[(unint64_t)*v185 >> 6] << 6)]
                             + *v185;
                      }
                    }
                    v156 = (unsigned __int16)(SLChar::sLexFold[*v141 & 0x3F | (SLChar::sUniMap[(unint64_t)*v141 >> 6] << 6)]
                                            + *v141);
                    v157 = v156 == 9;
                    if (v156 > 9)
                      v157 = v156 == 32;
                    goto LABEL_486;
                  }
                  if (v130 != 160 && v130 != 8239)
                    goto LABEL_726;
                }
                else if (v130 > 0x1Fu)
                {
                  if (v130 != 32)
                  {
                    if (v130 < 0x41u)
                      goto LABEL_726;
                    goto LABEL_489;
                  }
                }
                else if (v130 != 9)
                {
                  goto LABEL_726;
                }
                *((_QWORD *)this + 3) = ++v128;
                if ((uint64_t)(*((_QWORD *)this + 5) - (_QWORD)v128) <= 7)
                {
                  SLLexerInstance::Refill(this);
                  v128 = (unsigned __int16 *)*((_QWORD *)this + 3);
                }
                v130 = SLChar::sLexFold[*v128 & 0x3F | (SLChar::sUniMap[(unint64_t)*v128 >> 6] << 6)] + *v128;
              }
            }
            if (v24 != 160 && v24 != 8239)
              goto LABEL_726;
          }
          else if (v24 > 0x1Fu)
          {
            if (v24 != 32)
            {
              if (v24 < 0x4Du)
                goto LABEL_726;
              goto LABEL_315;
            }
          }
          else if (v24 != 9)
          {
            goto LABEL_726;
          }
          *((_QWORD *)this + 3) = ++v22;
          if ((uint64_t)(*((_QWORD *)this + 5) - (_QWORD)v22) <= 9)
          {
            SLLexerInstance::Refill(this);
            v22 = (unsigned __int16 *)*((_QWORD *)this + 3);
          }
          v24 = SLChar::sLexFold[*v22 & 0x3F | (SLChar::sUniMap[(unint64_t)*v22 >> 6] << 6)] + *v22;
        }
      }
      if (v8 > 0x65u)
      {
        if (v8 <= 0x6Du)
        {
          if (v8 != 105)
            goto LABEL_134;
LABEL_33:
          v10 = v4[1];
          *((_QWORD *)this + 3) = v4 + 1;
          *((_QWORD *)this + 6) = v4 + 1;
          if ((((unsigned __int16)SLChar::sLexFold[v10 & 0x3F | (SLChar::sUniMap[v10 >> 6] << 6)] + (_DWORD)v10) & 0xFFDF) != 0x4E)
            goto LABEL_727;
          v11 = v4[2];
          *v2 = v4 + 2;
          if ((((unsigned __int16)SLChar::sLexFold[v11 & 0x3F | (SLChar::sUniMap[v11 >> 6] << 6)] + (_DWORD)v11) & 0xFFDF) != 0x50)
            goto LABEL_726;
          v12 = v4[3];
          *v2 = v4 + 3;
          if ((((unsigned __int16)SLChar::sLexFold[v12 & 0x3F | (SLChar::sUniMap[v12 >> 6] << 6)] + (_DWORD)v12) & 0xFFDF) != 0x54)
            goto LABEL_726;
          v14 = v4[4];
          v13 = v4 + 4;
          *v2 = v13;
          v15 = SLChar::sLexFold[v14 & 0x3F | (SLChar::sUniMap[(unint64_t)v14 >> 6] << 6)] + v14;
          if (v15 > 0x20u)
          {
            if (v15 > 0xA0u)
              goto LABEL_694;
            v16 = v15 == 160;
          }
          else
          {
            if (v15 == 9)
              goto LABEL_686;
            v16 = v15 == 32;
          }
LABEL_695:
          while (2)
          {
            if (!v16)
              goto LABEL_726;
            while (1)
            {
LABEL_686:
              *((_QWORD *)this + 3) = ++v13;
              if ((uint64_t)(*((_QWORD *)this + 5) - (_QWORD)v13) <= 7)
              {
                SLLexerInstance::Refill(this);
                v13 = (unsigned __int16 *)*((_QWORD *)this + 3);
              }
              v15 = SLChar::sLexFold[*v13 & 0x3F | (SLChar::sUniMap[(unint64_t)*v13 >> 6] << 6)] + *v13;
              if (v15 > 0x54u)
                break;
              if (v15 > 0x20u)
              {
                v239 = (unsigned __int16)(SLChar::sLexFold[*v13 & 0x3F | (SLChar::sUniMap[(unint64_t)*v13 >> 6] << 6)]
                                        + *v13) == 80;
                if ((unsigned __int16)(SLChar::sLexFold[*v13 & 0x3F | (SLChar::sUniMap[(unint64_t)*v13 >> 6] << 6)]
                                      + *v13) > 0x50u)
                {
                  if ((unsigned __int16)(SLChar::sLexFold[*v13 & 0x3F | (SLChar::sUniMap[(unint64_t)*v13 >> 6] << 6)]
                                        + *v13) < 0x53u)
                    goto LABEL_726;
                  if ((unsigned __int16)(SLChar::sLexFold[*v13 & 0x3F | (SLChar::sUniMap[(unint64_t)*v13 >> 6] << 6)]
                                        + *v13) != 83)
                    goto LABEL_700;
LABEL_713:
                  v245 = v13[1];
                  *v2 = v13 + 1;
                  if ((((unsigned __int16)SLChar::sLexFold[v245 & 0x3F | (SLChar::sUniMap[v245 >> 6] << 6)]
                       + (_DWORD)v245) & 0xFFDF) != 0x4F)
                    goto LABEL_726;
                  v246 = v13[2];
                  *v2 = v13 + 2;
                  if ((((unsigned __int16)SLChar::sLexFold[v246 & 0x3F | (SLChar::sUniMap[v246 >> 6] << 6)]
                       + (_DWORD)v246) & 0xFFDF) != 0x4E)
                    goto LABEL_726;
                  v247 = v13[3];
                  *v2 = v13 + 3;
                  if ((((unsigned __int16)SLChar::sLexFold[v247 & 0x3F | (SLChar::sUniMap[v247 >> 6] << 6)]
                       + (_DWORD)v247) & 0xFFDF) != 0x47)
                    goto LABEL_726;
                  *((_QWORD *)this + 3) = v13 + 4;
                  v203 = *((_DWORD *)this + 24) & 0xFFFFFFF0 | 4;
LABEL_728:
                  *((_DWORD *)this + 24) = v203;
LABEL_729:
                  SLLexerImpl::SkipToNextCommand(this, 0);
                  goto LABEL_2;
                }
LABEL_705:
                if (!v239)
                  goto LABEL_726;
                v242 = v13[1];
                *v2 = v13 + 1;
                if ((((unsigned __int16)SLChar::sLexFold[v242 & 0x3F | (SLChar::sUniMap[v242 >> 6] << 6)] + (_DWORD)v242) & 0xFFDF) != 0x48)
                  goto LABEL_726;
                v243 = v13[2];
                *v2 = v13 + 2;
                if ((((unsigned __int16)SLChar::sLexFold[v243 & 0x3F | (SLChar::sUniMap[v243 >> 6] << 6)] + (_DWORD)v243) & 0xFFDF) != 0x4F)
                  goto LABEL_726;
                v244 = v13[3];
                *v2 = v13 + 3;
                if ((((unsigned __int16)SLChar::sLexFold[v244 & 0x3F | (SLChar::sUniMap[v244 >> 6] << 6)] + (_DWORD)v244) & 0xFFDF) != 0x4E)
                  goto LABEL_726;
                *((_QWORD *)this + 3) = v13 + 4;
                v203 = *((_DWORD *)this + 24) & 0xFFFFFFF0 | 2;
                goto LABEL_728;
              }
              v238 = (unsigned __int16)(SLChar::sLexFold[*v13 & 0x3F | (SLChar::sUniMap[(unint64_t)*v13 >> 6] << 6)]
                                      + *v13);
              if (v238 != 9)
              {
                v16 = v238 == 32;
                goto LABEL_695;
              }
            }
            if (v15 > 0x74u)
            {
              v16 = (unsigned __int16)(SLChar::sLexFold[*v13 & 0x3F | (SLChar::sUniMap[(unint64_t)*v13 >> 6] << 6)]
                                     + *v13) == 160;
              if ((unsigned __int16)(SLChar::sLexFold[*v13 & 0x3F | (SLChar::sUniMap[(unint64_t)*v13 >> 6] << 6)]
                                    + *v13) <= 0xA0u)
                continue;
LABEL_694:
              v16 = v15 == 8239;
              continue;
            }
            break;
          }
          v239 = (unsigned __int16)(SLChar::sLexFold[*v13 & 0x3F | (SLChar::sUniMap[(unint64_t)*v13 >> 6] << 6)]
                                  + *v13) == 112;
          if ((unsigned __int16)(SLChar::sLexFold[*v13 & 0x3F | (SLChar::sUniMap[(unint64_t)*v13 >> 6] << 6)]
                                + *v13) <= 0x70u)
            goto LABEL_705;
          if ((unsigned __int16)(SLChar::sLexFold[*v13 & 0x3F | (SLChar::sUniMap[(unint64_t)*v13 >> 6] << 6)]
                                + *v13) < 0x73u)
            goto LABEL_726;
          if ((unsigned __int16)(SLChar::sLexFold[*v13 & 0x3F | (SLChar::sUniMap[(unint64_t)*v13 >> 6] << 6)]
                                + *v13) == 115)
            goto LABEL_713;
LABEL_700:
          v240 = v13[1];
          *v2 = v13 + 1;
          v241 = SLChar::sLexFold[v240 & 0x3F | (SLChar::sUniMap[v240 >> 6] << 6)] + v240;
          if (v241 > 0x55u)
          {
            if (v241 > 0x65u)
            {
              if (v241 != 117)
                goto LABEL_726;
LABEL_723:
              v250 = v13[2];
              *v2 = v13 + 2;
              if ((((unsigned __int16)SLChar::sLexFold[v250 & 0x3F | (SLChar::sUniMap[v250 >> 6] << 6)] + (_DWORD)v250) & 0xFFDF) != 0x4E)
                goto LABEL_726;
              v251 = v13[3];
              *v2 = v13 + 3;
              if ((((unsigned __int16)SLChar::sLexFold[v251 & 0x3F | (SLChar::sUniMap[v251 >> 6] << 6)] + (_DWORD)v251) & 0xFFDF) != 0x45)
                goto LABEL_726;
              *((_QWORD *)this + 3) = v13 + 4;
              v203 = *((_DWORD *)this + 24) & 0xFFFFFFF0 | 3;
              goto LABEL_728;
            }
            if (v241 != 101)
              goto LABEL_726;
          }
          else if (v241 != 69)
          {
            if (v241 < 0x55u)
              goto LABEL_726;
            goto LABEL_723;
          }
          v248 = v13[2];
          *v2 = v13 + 2;
          if ((((unsigned __int16)SLChar::sLexFold[v248 & 0x3F | (SLChar::sUniMap[v248 >> 6] << 6)] + (_DWORD)v248) & 0xFFDF) != 0x58)
            goto LABEL_726;
          v249 = v13[3];
          *v2 = v13 + 3;
          if ((((unsigned __int16)SLChar::sLexFold[v249 & 0x3F | (SLChar::sUniMap[v249 >> 6] << 6)] + (_DWORD)v249) & 0xFFDF) != 0x54)
            goto LABEL_726;
          *((_QWORD *)this + 3) = v13 + 4;
          v203 = *((_DWORD *)this + 24) & 0xFFFFFFF0;
          goto LABEL_728;
        }
        if (v8 != 110)
        {
          if (v8 < 0x70u)
            goto LABEL_134;
          goto LABEL_143;
        }
LABEL_87:
        v33 = v4[1];
        *((_QWORD *)this + 3) = v4 + 1;
        *((_QWORD *)this + 6) = v4 + 1;
        if ((((unsigned __int16)SLChar::sLexFold[v33 & 0x3F | (SLChar::sUniMap[v33 >> 6] << 6)] + (_DWORD)v33) & 0xFFDF) != 0x4D)
          goto LABEL_727;
        v34 = v4[2];
        *v2 = v4 + 2;
        if ((((unsigned __int16)SLChar::sLexFold[v34 & 0x3F | (SLChar::sUniMap[v34 >> 6] << 6)] + (_DWORD)v34) & 0xFFDF) != 0x42)
          goto LABEL_726;
        v35 = v4[3];
        *v2 = v4 + 3;
        if ((((unsigned __int16)SLChar::sLexFold[v35 & 0x3F | (SLChar::sUniMap[v35 >> 6] << 6)] + (_DWORD)v35) & 0xFFDF) != 0x52)
          goto LABEL_726;
        v37 = v4[4];
        v36 = v4 + 4;
        *v2 = v36;
        v38 = SLChar::sLexFold[v37 & 0x3F | (SLChar::sUniMap[(unint64_t)v37 >> 6] << 6)] + v37;
        if (v38 > 0x20u)
        {
          if (v38 > 0xA0u)
            goto LABEL_738;
          v39 = v38 == 160;
        }
        else
        {
          if (v38 == 9)
            goto LABEL_730;
          v39 = v38 == 32;
        }
LABEL_739:
        while (2)
        {
          while (2)
          {
            if (!v39)
              goto LABEL_726;
            while (1)
            {
LABEL_730:
              *((_QWORD *)this + 3) = ++v36;
              if ((uint64_t)(*((_QWORD *)this + 5) - (_QWORD)v36) <= 7)
              {
                SLLexerInstance::Refill(this);
                v36 = (unsigned __int16 *)*((_QWORD *)this + 3);
              }
              v38 = SLChar::sLexFold[*v36 & 0x3F | (SLChar::sUniMap[(unint64_t)*v36 >> 6] << 6)] + *v36;
              v252 = v38;
              if (v38 > 0x4Eu)
                break;
              v253 = (unsigned __int16)(SLChar::sLexFold[*v36 & 0x3F | (SLChar::sUniMap[(unint64_t)*v36 >> 6] << 6)]
                                      + *v36);
              if (v252 > 0x20)
              {
                if (v253 != 76)
                {
                  if (v253 < 0x4E)
                    goto LABEL_726;
                  goto LABEL_750;
                }
                goto LABEL_745;
              }
              if (v253 != 9)
              {
                v39 = v253 == 32;
                goto LABEL_739;
              }
            }
            if (v38 <= 0x6Eu)
            {
              v254 = (unsigned __int16)(SLChar::sLexFold[*v36 & 0x3F | (SLChar::sUniMap[(unint64_t)*v36 >> 6] << 6)]
                                      + *v36);
              if (v254 != 108)
              {
                if (v254 < 0x6E)
                  goto LABEL_726;
LABEL_750:
                v258 = v36[1];
                *v2 = v36 + 1;
                if ((((unsigned __int16)SLChar::sLexFold[v258 & 0x3F | (SLChar::sUniMap[v258 >> 6] << 6)] + (_DWORD)v258) & 0xFFDF) != 0x4F)
                  goto LABEL_726;
                v259 = v36[2];
                *v2 = v36 + 2;
                if ((((unsigned __int16)SLChar::sLexFold[v259 & 0x3F | (SLChar::sUniMap[v259 >> 6] << 6)] + (_DWORD)v259) & 0xFFDF) != 0x52)
                  goto LABEL_726;
                v260 = v36[3];
                *v2 = v36 + 3;
                if ((((unsigned __int16)SLChar::sLexFold[v260 & 0x3F | (SLChar::sUniMap[v260 >> 6] << 6)] + (_DWORD)v260) & 0xFFDF) != 0x4D)
                  goto LABEL_726;
                *((_QWORD *)this + 3) = v36 + 4;
                v203 = *((_DWORD *)this + 24) & 0xFFFFFFDF;
                goto LABEL_728;
              }
LABEL_745:
              v255 = v36[1];
              *v2 = v36 + 1;
              if ((((unsigned __int16)SLChar::sLexFold[v255 & 0x3F | (SLChar::sUniMap[v255 >> 6] << 6)] + (_DWORD)v255) & 0xFFDF) != 0x54)
                goto LABEL_726;
              v256 = v36[2];
              *v2 = v36 + 2;
              if ((((unsigned __int16)SLChar::sLexFold[v256 & 0x3F | (SLChar::sUniMap[v256 >> 6] << 6)] + (_DWORD)v256) & 0xFFDF) != 0x52)
                goto LABEL_726;
              v257 = v36[3];
              *v2 = v36 + 3;
              if ((((unsigned __int16)SLChar::sLexFold[v257 & 0x3F | (SLChar::sUniMap[v257 >> 6] << 6)] + (_DWORD)v257) & 0xFFDF) != 0x4C)
                goto LABEL_726;
              *((_QWORD *)this + 3) = v36 + 4;
              v203 = *((_DWORD *)this + 24) | 0x20;
              goto LABEL_728;
            }
            v39 = (unsigned __int16)(SLChar::sLexFold[*v36 & 0x3F | (SLChar::sUniMap[(unint64_t)*v36 >> 6] << 6)]
                                   + *v36) == 160;
            if ((unsigned __int16)(SLChar::sLexFold[*v36 & 0x3F | (SLChar::sUniMap[(unint64_t)*v36 >> 6] << 6)]
                                  + *v36) <= 0xA0u)
              continue;
            break;
          }
LABEL_738:
          v39 = v38 == 8239;
          continue;
        }
      }
      if (v8 <= 0x62u)
      {
        if (v8 >= 0x59u)
          goto LABEL_134;
        goto LABEL_49;
      }
      if (v8 == 99)
        goto LABEL_82;
      if (v8 >= 0x65u)
      {
LABEL_120:
        v48 = v4[1];
        *((_QWORD *)this + 3) = v4 + 1;
        *((_QWORD *)this + 6) = v4 + 1;
        if ((((unsigned __int16)SLChar::sLexFold[v48 & 0x3F | (SLChar::sUniMap[v48 >> 6] << 6)] + (_DWORD)v48) & 0xFFDF) != 0x4D)
          goto LABEL_727;
        v49 = v4[2];
        *v2 = v4 + 2;
        if ((((unsigned __int16)SLChar::sLexFold[v49 & 0x3F | (SLChar::sUniMap[v49 >> 6] << 6)] + (_DWORD)v49) & 0xFFDF) != 0x50)
          goto LABEL_726;
        v50 = v4[3];
        *v2 = v4 + 3;
        if ((((unsigned __int16)SLChar::sLexFold[v50 & 0x3F | (SLChar::sUniMap[v50 >> 6] << 6)] + (_DWORD)v50) & 0xFFDF) != 0x48)
          goto LABEL_726;
        v52 = v4[4];
        v51 = v4 + 4;
        *v2 = v51;
        v53 = SLChar::sLexFold[v52 & 0x3F | (SLChar::sUniMap[(unint64_t)v52 >> 6] << 6)] + v52;
        if (v53 == 43 || v53 == 45)
          goto LABEL_726;
        while (1)
        {
          if (v53 > 0x2Bu)
          {
            if (v53 <= 0x9Fu)
            {
              if (v53 != 45)
                goto LABEL_726;
              *((_QWORD *)this + 3) = v51 + 1;
              *((_BYTE *)this + 88) = 4;
              goto LABEL_729;
            }
            if (v53 != 160 && v53 != 8239)
              goto LABEL_726;
          }
          else if (v53 > 0x1Fu)
          {
            if (v53 != 32)
            {
              if (v53 < 0x2Bu)
                goto LABEL_726;
              *((_QWORD *)this + 3) = v51 + 1;
              *((_BYTE *)this + 88) = 1;
              goto LABEL_729;
            }
          }
          else if (v53 != 9)
          {
            goto LABEL_726;
          }
          *((_QWORD *)this + 3) = ++v51;
          if (*((unsigned __int16 **)this + 5) == v51)
          {
            SLLexerInstance::Refill(this);
            v51 = (unsigned __int16 *)*((_QWORD *)this + 3);
          }
          v53 = SLChar::sLexFold[*v51 & 0x3F | (SLChar::sUniMap[(unint64_t)*v51 >> 6] << 6)] + *v51;
        }
      }
LABEL_69:
      v25 = v4[1];
      *((_QWORD *)this + 3) = v4 + 1;
      *((_QWORD *)this + 6) = v4 + 1;
      if ((((unsigned __int16)SLChar::sLexFold[v25 & 0x3F | (SLChar::sUniMap[v25 >> 6] << 6)] + (_DWORD)v25) & 0xFFDF) != 0x4C)
        goto LABEL_727;
      v26 = v4[2];
      *v2 = v4 + 2;
      if ((((unsigned __int16)SLChar::sLexFold[v26 & 0x3F | (SLChar::sUniMap[v26 >> 6] << 6)] + (_DWORD)v26) & 0xFFDF) != 0x49)
        goto LABEL_726;
      v27 = v4[3];
      *v2 = v4 + 3;
      if ((((unsigned __int16)SLChar::sLexFold[v27 & 0x3F | (SLChar::sUniMap[v27 >> 6] << 6)] + (_DWORD)v27) & 0xFFDF) != 0x4D)
        goto LABEL_726;
      v29 = v4[4];
      v28 = v4 + 4;
      *v2 = v28;
      v30 = SLChar::sLexFold[v29 & 0x3F | (SLChar::sUniMap[(unint64_t)v29 >> 6] << 6)] + v29;
      if (v30 > 0x20u)
      {
        if (v30 > 0xA0u)
        {
          if (v30 != 8239)
            goto LABEL_726;
        }
        else if (v30 != 160)
        {
          goto LABEL_726;
        }
      }
      else if (v30 != 9 && v30 != 32)
      {
        goto LABEL_726;
      }
      do
      {
        while (1)
        {
          while (1)
          {
            *((_QWORD *)this + 3) = ++v28;
            if ((uint64_t)(*((_QWORD *)this + 5) - (_QWORD)v28) <= 5)
            {
              SLLexerInstance::Refill(this);
              v28 = (unsigned __int16 *)*((_QWORD *)this + 3);
            }
            v114 = (unsigned __int16)(SLChar::sLexFold[*v28 & 0x3F | (SLChar::sUniMap[(unint64_t)*v28 >> 6] << 6)]
                                    + *v28);
            if (v114 > 0x3A)
              break;
            v115 = (unsigned __int16)(SLChar::sLexFold[*v28 & 0x3F | (SLChar::sUniMap[(unint64_t)*v28 >> 6] << 6)]
                                    + *v28);
            if (v114 > 9)
            {
              if (v115 != 32)
                goto LABEL_294;
            }
            else if (v115 != 9)
            {
              goto LABEL_294;
            }
          }
          if (v114 <= 0xA0)
            break;
          if ((unsigned __int16)(SLChar::sLexFold[*v28 & 0x3F | (SLChar::sUniMap[(unint64_t)*v28 >> 6] << 6)]
                                + *v28) != 8239)
            goto LABEL_294;
        }
        v116 = (unsigned __int16)(SLChar::sLexFold[*v28 & 0x3F | (SLChar::sUniMap[(unint64_t)*v28 >> 6] << 6)]
                                + *v28);
        if (v116 < 0x3C)
          goto LABEL_726;
      }
      while (v116 > 0x9F);
LABEL_294:
      v117 = v28 + 1;
      v118 = v28[1];
      *v2 = v28 + 1;
      v119 = SLChar::sLexFold[v118 & 0x3F | (SLChar::sUniMap[v118 >> 6] << 6)] + v118;
      if (v119 > 0x3Au)
      {
        if (v119 > 0xA0u)
        {
          if (v119 == 8239)
            goto LABEL_437;
        }
        else
        {
          if (v119 < 0x3Cu)
            goto LABEL_726;
          if (v119 >= 0xA0u)
            goto LABEL_437;
        }
      }
      else if (v119 > 9u)
      {
        if (v119 == 32)
          goto LABEL_437;
      }
      else if (v119 == 9)
      {
        goto LABEL_437;
      }
      v136 = v28[2];
      v117 = v28 + 2;
      *v2 = v28 + 2;
      v137 = SLChar::sLexFold[v136 & 0x3F | (SLChar::sUniMap[(unint64_t)v136 >> 6] << 6)] + v136;
      if (v137 > 0x20u)
      {
        if (v137 > 0xA0u)
        {
          if (v137 != 8239)
            goto LABEL_726;
        }
        else if (v137 != 160)
        {
          goto LABEL_726;
        }
      }
      else if (v137 != 9 && v137 != 32)
      {
        goto LABEL_726;
      }
      do
      {
        while (1)
        {
          while (1)
          {
LABEL_437:
            *((_QWORD *)this + 3) = ++v117;
            if ((uint64_t)(*((_QWORD *)this + 5) - (_QWORD)v117) <= 3)
            {
              SLLexerInstance::Refill(this);
              v117 = (unsigned __int16 *)*((_QWORD *)this + 3);
            }
            v144 = (unsigned __int16)(SLChar::sLexFold[*v117 & 0x3F | (SLChar::sUniMap[(unint64_t)*v117 >> 6] << 6)]
                                    + *v117);
            if (v144 > 0x3A)
              break;
            v145 = (unsigned __int16)(SLChar::sLexFold[*v117 & 0x3F | (SLChar::sUniMap[(unint64_t)*v117 >> 6] << 6)]
                                    + *v117);
            if (v144 > 9)
            {
              if (v145 != 32)
                goto LABEL_450;
            }
            else if (v145 != 9)
            {
              goto LABEL_450;
            }
          }
          if (v144 <= 0xA0)
            break;
          if ((unsigned __int16)(SLChar::sLexFold[*v117 & 0x3F | (SLChar::sUniMap[(unint64_t)*v117 >> 6] << 6)]
                                + *v117) != 8239)
            goto LABEL_450;
        }
        v146 = (unsigned __int16)(SLChar::sLexFold[*v117 & 0x3F | (SLChar::sUniMap[(unint64_t)*v117 >> 6] << 6)]
                                + *v117);
        if (v146 < 0x3C)
          goto LABEL_726;
      }
      while (v146 >= 0xA0);
LABEL_450:
      v147 = v117 + 1;
      v148 = v117[1];
      *v2 = v117 + 1;
      v149 = SLChar::sLexFold[v148 & 0x3F | (SLChar::sUniMap[v148 >> 6] << 6)] + v148;
      if (v149 > 0x3Au)
      {
        if (v149 > 0xA0u)
        {
          if (v149 == 8239)
          {
LABEL_462:
            v298 = 0;
            v150 = SLLexerImpl::SpaceDelimitedToken(this, (unsigned __int16 *)(*((_QWORD *)this + 8) + 10), v147, &v298);
            v151 = 0;
            *((_QWORD *)this + 8) = v150;
            *((_WORD *)this + 52) = *v150;
            v152 = v298;
            if (v298 >= 2)
              v151 = v150[1];
            *((_WORD *)this + 53) = v151;
            v153 = SLLexerImpl::SpaceDelimitedToken(this, &v150[v152 + 1], *((unsigned __int16 **)this + 3), &v298);
            *((_QWORD *)this + 8) = v153;
            *((_WORD *)this + 54) = *v153;
            if (v298 < 2)
              v154 = 0;
            else
              v154 = v153[1];
            *((_WORD *)this + 55) = v154;
            goto LABEL_729;
          }
        }
        else if (v149 < 0x3Cu || v149 == 160)
        {
          goto LABEL_462;
        }
      }
      else if (v149 > 9u)
      {
        if (v149 == 32)
          goto LABEL_462;
      }
      else if (v149 == 9)
      {
        goto LABEL_462;
      }
      v147 = v117 + 2;
      *v2 = v117 + 2;
      goto LABEL_462;
    }
    if (v8 > 0x45u)
    {
      if (v8 <= 0x50u)
      {
        if (v8 <= 0x4Du)
        {
          if (v8 != 73)
            goto LABEL_134;
          goto LABEL_33;
        }
        if (v8 != 78)
        {
          if (v8 < 0x50u)
            goto LABEL_134;
LABEL_143:
          v65 = v4[1];
          *((_QWORD *)this + 3) = v4 + 1;
          *((_QWORD *)this + 6) = v4 + 1;
          v66 = SLChar::sLexFold[v65 & 0x3F | (SLChar::sUniMap[v65 >> 6] << 6)] + v65;
          if (v66 > 0x4Du)
          {
            if (v66 > 0x62u)
            {
              if (v66 != 109)
                goto LABEL_727;
              goto LABEL_225;
            }
            if (v66 != 98)
              goto LABEL_727;
          }
          else if (v66 != 66)
          {
            if (v66 < 0x4Du)
              goto LABEL_727;
LABEL_225:
            v106 = v4[2];
            *v2 = v4 + 2;
            if ((((unsigned __int16)SLChar::sLexFold[v106 & 0x3F | (SLChar::sUniMap[v106 >> 6] << 6)] + (_DWORD)v106) & 0xFFDF) != 0x4F)
              goto LABEL_726;
            v107 = v4[3];
            *v2 = v4 + 3;
            if ((((unsigned __int16)SLChar::sLexFold[v107 & 0x3F | (SLChar::sUniMap[v107 >> 6] << 6)] + (_DWORD)v107) & 0xFFDF) != 0x44)
              goto LABEL_726;
            v109 = v4[4];
            v108 = v4 + 4;
            *v2 = v108;
            v110 = SLChar::sLexFold[v109 & 0x3F | (SLChar::sUniMap[(unint64_t)v109 >> 6] << 6)] + v109;
            if (v110 > 0x20u)
            {
              if (v110 > 0xA0u)
              {
                if (v110 != 8239)
                  goto LABEL_726;
              }
              else if (v110 != 160)
              {
                goto LABEL_726;
              }
            }
            else if (v110 != 9 && v110 != 32)
            {
              goto LABEL_726;
            }
            do
            {
              while (1)
              {
                *((_QWORD *)this + 3) = ++v108;
                if (*((unsigned __int16 **)this + 5) == v108)
                {
                  SLLexerInstance::Refill(this);
                  v108 = (unsigned __int16 *)*((_QWORD *)this + 3);
                }
                v134 = (unsigned __int16)(SLChar::sLexFold[*v108 & 0x3F | (SLChar::sUniMap[(unint64_t)*v108 >> 6] << 6)]
                                        + *v108);
                if (v134 <= 0x20)
                  break;
                if (v134 > 0xA0)
                {
                  if ((unsigned __int16)(SLChar::sLexFold[*v108 & 0x3F | (SLChar::sUniMap[(unint64_t)*v108 >> 6] << 6)]
                                        + *v108) != 8239)
                    goto LABEL_413;
                }
                else if ((unsigned __int16)(SLChar::sLexFold[*v108 & 0x3F | (SLChar::sUniMap[(unint64_t)*v108 >> 6] << 6)]
                                           + *v108) != 160)
                {
                  goto LABEL_413;
                }
              }
            }
            while (v134 == 9 || v134 == 32);
LABEL_413:
            v112 = (unsigned __int16 **)this;
            v113 = 1886220132;
LABEL_414:
            v132 = 2;
LABEL_415:
            CommandToken = SLLexerImpl::SimpleCommand(v112, v113, v132);
            if (!CommandToken)
              goto LABEL_727;
            goto LABEL_839;
          }
          v88 = v4[2];
          *v2 = v4 + 2;
          if ((((unsigned __int16)SLChar::sLexFold[v88 & 0x3F | (SLChar::sUniMap[v88 >> 6] << 6)] + (_DWORD)v88) & 0xFFDF) != 0x41)
            goto LABEL_726;
          v89 = v4[3];
          *v2 = v4 + 3;
          if ((((unsigned __int16)SLChar::sLexFold[v89 & 0x3F | (SLChar::sUniMap[v89 >> 6] << 6)] + (_DWORD)v89) & 0xFFDF) != 0x53)
            goto LABEL_726;
          v91 = v4[4];
          v90 = v4 + 4;
          *v2 = v90;
          v92 = SLChar::sLexFold[v91 & 0x3F | (SLChar::sUniMap[(unint64_t)v91 >> 6] << 6)] + v91;
          if (v92 > 0x20u)
          {
            if (v92 > 0xA0u)
            {
              if (v92 != 8239)
                goto LABEL_726;
            }
            else if (v92 != 160)
            {
              goto LABEL_726;
            }
          }
          else if (v92 != 9 && v92 != 32)
          {
            goto LABEL_726;
          }
          do
          {
            while (1)
            {
              *((_QWORD *)this + 3) = ++v90;
              if (*((unsigned __int16 **)this + 5) == v90)
              {
                SLLexerInstance::Refill(this);
                v90 = (unsigned __int16 *)*((_QWORD *)this + 3);
              }
              v125 = (unsigned __int16)(SLChar::sLexFold[*v90 & 0x3F | (SLChar::sUniMap[(unint64_t)*v90 >> 6] << 6)]
                                      + *v90);
              if (v125 <= 0x20)
                break;
              if (v125 > 0xA0)
              {
                if ((unsigned __int16)(SLChar::sLexFold[*v90 & 0x3F | (SLChar::sUniMap[(unint64_t)*v90 >> 6] << 6)]
                                      + *v90) != 8239)
                  goto LABEL_354;
              }
              else if ((unsigned __int16)(SLChar::sLexFold[*v90 & 0x3F | (SLChar::sUniMap[(unint64_t)*v90 >> 6] << 6)]
                                         + *v90) != 160)
              {
                goto LABEL_354;
              }
            }
          }
          while (v125 == 9 || v125 == 32);
LABEL_354:
          v112 = (unsigned __int16 **)this;
          v113 = 1885495667;
          goto LABEL_414;
        }
        goto LABEL_87;
      }
      if (v8 <= 0x53u)
      {
        v9 = v8 == 82;
        if (v8 < 0x52u)
          goto LABEL_134;
LABEL_41:
        if (!v9)
        {
          v42 = v4[1];
          *((_QWORD *)this + 3) = v4 + 1;
          *((_QWORD *)this + 6) = v4 + 1;
          v43 = SLChar::sLexFold[v42 & 0x3F | (SLChar::sUniMap[(unint64_t)v42 >> 6] << 6)] + v42;
          if (v43 > 0x59u)
          {
            if (v43 > 0x6Cu)
            {
              if (v43 != 121)
                goto LABEL_727;
              goto LABEL_218;
            }
            if (v43 != 108)
              goto LABEL_727;
          }
          else if (v43 != 76)
          {
            if (v43 < 0x59u)
              goto LABEL_727;
LABEL_218:
            v101 = v4[2];
            *v2 = v4 + 2;
            if ((((unsigned __int16)SLChar::sLexFold[v101 & 0x3F | (SLChar::sUniMap[v101 >> 6] << 6)] + (_DWORD)v101) & 0xFFDF) != 0x4E)
              goto LABEL_726;
            v102 = v4[3];
            *v2 = v4 + 3;
            if ((((unsigned __int16)SLChar::sLexFold[v102 & 0x3F | (SLChar::sUniMap[v102 >> 6] << 6)] + (_DWORD)v102) & 0xFFDF) != 0x43)
              goto LABEL_726;
            v104 = v4[4];
            v103 = v4 + 4;
            *v2 = v103;
            v105 = SLChar::sLexFold[v104 & 0x3F | (SLChar::sUniMap[(unint64_t)v104 >> 6] << 6)] + v104;
            if (v105 > 0x20u)
            {
              if (v105 > 0xA0u)
              {
                if (v105 != 8239)
                  goto LABEL_726;
              }
              else if (v105 != 160)
              {
                goto LABEL_726;
              }
            }
            else if (v105 != 9 && v105 != 32)
            {
              goto LABEL_726;
            }
            do
            {
              while (1)
              {
                *((_QWORD *)this + 3) = ++v103;
                if (*((unsigned __int16 **)this + 5) == v103)
                {
                  SLLexerInstance::Refill(this);
                  v103 = (unsigned __int16 *)*((_QWORD *)this + 3);
                }
                v133 = (unsigned __int16)(SLChar::sLexFold[*v103 & 0x3F | (SLChar::sUniMap[(unint64_t)*v103 >> 6] << 6)]
                                        + *v103);
                if (v133 <= 0x20)
                  break;
                if (v133 > 0xA0)
                {
                  if ((unsigned __int16)(SLChar::sLexFold[*v103 & 0x3F | (SLChar::sUniMap[(unint64_t)*v103 >> 6] << 6)]
                                        + *v103) != 8239)
                    goto LABEL_400;
                }
                else if ((unsigned __int16)(SLChar::sLexFold[*v103 & 0x3F | (SLChar::sUniMap[(unint64_t)*v103 >> 6] << 6)]
                                           + *v103) != 160)
                {
                  goto LABEL_400;
                }
              }
            }
            while (v133 == 9 || v133 == 32);
LABEL_400:
            v113 = 1937337955;
            v112 = (unsigned __int16 **)this;
LABEL_401:
            v132 = 1;
            goto LABEL_415;
          }
          v72 = v4[2];
          *v2 = v4 + 2;
          if ((((unsigned __int16)SLChar::sLexFold[v72 & 0x3F | (SLChar::sUniMap[v72 >> 6] << 6)] + (_DWORD)v72) & 0xFFDF) != 0x4E)
            goto LABEL_726;
          v73 = v4[3];
          *v2 = v4 + 3;
          if ((((unsigned __int16)SLChar::sLexFold[v73 & 0x3F | (SLChar::sUniMap[v73 >> 6] << 6)] + (_DWORD)v73) & 0xFFDF) != 0x43)
            goto LABEL_726;
          v75 = v4[4];
          v74 = v4 + 4;
          *v2 = v74;
          v76 = SLChar::sLexFold[v75 & 0x3F | (SLChar::sUniMap[(unint64_t)v75 >> 6] << 6)] + v75;
          if (v76 > 0x20u)
          {
            if (v76 > 0xA0u)
            {
              if (v76 != 8239)
                goto LABEL_726;
            }
            else if (v76 != 160)
            {
              goto LABEL_726;
            }
          }
          else if (v76 != 9 && v76 != 32)
          {
            goto LABEL_726;
          }
          do
          {
            while (1)
            {
              *((_QWORD *)this + 3) = ++v74;
              if (*((unsigned __int16 **)this + 5) == v74)
              {
                SLLexerInstance::Refill(this);
                v74 = (unsigned __int16 *)*((_QWORD *)this + 3);
              }
              v124 = (unsigned __int16)(SLChar::sLexFold[*v74 & 0x3F | (SLChar::sUniMap[(unint64_t)*v74 >> 6] << 6)]
                                      + *v74);
              if (v124 <= 0x20)
                break;
              if (v124 > 0xA0)
              {
                if ((unsigned __int16)(SLChar::sLexFold[*v74 & 0x3F | (SLChar::sUniMap[(unint64_t)*v74 >> 6] << 6)]
                                      + *v74) != 8239)
                  goto LABEL_342;
              }
              else if ((unsigned __int16)(SLChar::sLexFold[*v74 & 0x3F | (SLChar::sUniMap[(unint64_t)*v74 >> 6] << 6)]
                                         + *v74) != 160)
              {
                goto LABEL_342;
              }
            }
          }
          while (v124 == 9 || v124 == 32);
LABEL_342:
          v112 = (unsigned __int16 **)this;
          v113 = 1936485987;
LABEL_388:
          v132 = 0;
          goto LABEL_415;
        }
        v17 = v4[1];
        *((_QWORD *)this + 3) = v4 + 1;
        *((_QWORD *)this + 6) = v4 + 1;
        v18 = SLChar::sLexFold[v17 & 0x3F | (SLChar::sUniMap[(unint64_t)v17 >> 6] << 6)] + v17;
        if (v18 > 0x53u)
        {
          if (v18 > 0x61u)
          {
            if (v18 != 115)
              goto LABEL_727;
            goto LABEL_211;
          }
          if (v18 != 97)
            goto LABEL_727;
        }
        else if (v18 != 65)
        {
          if (v18 < 0x53u)
            goto LABEL_727;
LABEL_211:
          v96 = v4[2];
          *v2 = v4 + 2;
          if ((((unsigned __int16)SLChar::sLexFold[v96 & 0x3F | (SLChar::sUniMap[v96 >> 6] << 6)] + (_DWORD)v96) & 0xFFDF) != 0x45)
            goto LABEL_726;
          v97 = v4[3];
          *v2 = v4 + 3;
          if ((((unsigned __int16)SLChar::sLexFold[v97 & 0x3F | (SLChar::sUniMap[v97 >> 6] << 6)] + (_DWORD)v97) & 0xFFDF) != 0x54)
            goto LABEL_726;
          v99 = v4[4];
          v98 = v4 + 4;
          *v2 = v98;
          v100 = SLChar::sLexFold[v99 & 0x3F | (SLChar::sUniMap[(unint64_t)v99 >> 6] << 6)] + v99;
          if (v100 > 0x20u)
          {
            if (v100 > 0xA0u)
            {
              if (v100 != 8239)
                goto LABEL_726;
            }
            else if (v100 != 160)
            {
              goto LABEL_726;
            }
          }
          else if (v100 != 9 && v100 != 32)
          {
            goto LABEL_726;
          }
          do
          {
            while (1)
            {
              *((_QWORD *)this + 3) = ++v98;
              if (*((unsigned __int16 **)this + 5) == v98)
              {
                SLLexerInstance::Refill(this);
                v98 = (unsigned __int16 *)*((_QWORD *)this + 3);
              }
              v131 = (unsigned __int16)(SLChar::sLexFold[*v98 & 0x3F | (SLChar::sUniMap[(unint64_t)*v98 >> 6] << 6)]
                                      + *v98);
              if (v131 <= 0x20)
                break;
              if (v131 > 0xA0)
              {
                if ((unsigned __int16)(SLChar::sLexFold[*v98 & 0x3F | (SLChar::sUniMap[(unint64_t)*v98 >> 6] << 6)]
                                      + *v98) != 8239)
                  goto LABEL_387;
              }
              else if ((unsigned __int16)(SLChar::sLexFold[*v98 & 0x3F | (SLChar::sUniMap[(unint64_t)*v98 >> 6] << 6)]
                                         + *v98) != 160)
              {
                goto LABEL_387;
              }
            }
          }
          while (v131 == 9 || v131 == 32);
LABEL_387:
          v112 = (unsigned __int16 **)this;
          v113 = 1920165236;
          goto LABEL_388;
        }
        v67 = v4[2];
        *v2 = v4 + 2;
        if ((((unsigned __int16)SLChar::sLexFold[v67 & 0x3F | (SLChar::sUniMap[v67 >> 6] << 6)] + (_DWORD)v67) & 0xFFDF) != 0x54)
          goto LABEL_726;
        v68 = v4[3];
        *v2 = v4 + 3;
        if ((((unsigned __int16)SLChar::sLexFold[v68 & 0x3F | (SLChar::sUniMap[v68 >> 6] << 6)] + (_DWORD)v68) & 0xFFDF) != 0x45)
          goto LABEL_726;
        v70 = v4[4];
        v69 = v4 + 4;
        *v2 = v69;
        v71 = SLChar::sLexFold[v70 & 0x3F | (SLChar::sUniMap[(unint64_t)v70 >> 6] << 6)] + v70;
        if (v71 > 0x20u)
        {
          if (v71 > 0xA0u)
          {
            if (v71 != 8239)
              goto LABEL_726;
          }
          else if (v71 != 160)
          {
            goto LABEL_726;
          }
        }
        else if (v71 != 9 && v71 != 32)
        {
          goto LABEL_726;
        }
        do
        {
          while (1)
          {
            *((_QWORD *)this + 3) = ++v69;
            if (*((unsigned __int16 **)this + 5) == v69)
            {
              SLLexerInstance::Refill(this);
              v69 = (unsigned __int16 *)*((_QWORD *)this + 3);
            }
            v123 = (unsigned __int16)(SLChar::sLexFold[*v69 & 0x3F | (SLChar::sUniMap[(unint64_t)*v69 >> 6] << 6)]
                                    + *v69);
            if (v123 <= 0x20)
              break;
            if (v123 > 0xA0)
            {
              if ((unsigned __int16)(SLChar::sLexFold[*v69 & 0x3F | (SLChar::sUniMap[(unint64_t)*v69 >> 6] << 6)]
                                    + *v69) != 8239)
                goto LABEL_330;
            }
            else if ((unsigned __int16)(SLChar::sLexFold[*v69 & 0x3F | (SLChar::sUniMap[(unint64_t)*v69 >> 6] << 6)]
                                       + *v69) != 160)
            {
              goto LABEL_330;
            }
          }
        }
        while (v123 == 9 || v123 == 32);
LABEL_330:
        v112 = (unsigned __int16 **)this;
        v113 = 1918989413;
        goto LABEL_414;
      }
      if (v8 != 86)
        goto LABEL_134;
      goto LABEL_94;
    }
    if (v8 <= 0xDu)
    {
      if (v8 <= 8u)
      {
        if (!v8)
          goto LABEL_833;
LABEL_134:
        *v2 = v4 + 1;
        goto LABEL_727;
      }
      if ((unsigned __int16)(v8 - 11) < 2u)
        goto LABEL_134;
LABEL_105:
      v44 = v4 + 1;
      *v2 = v4 + 1;
      while (1)
      {
        v45 = (unsigned __int16)(SLChar::sLexFold[*v44 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v44 >> 6] << 6)]
                               + *v44);
        if (v45 > 0x1F)
        {
          if (v45 > 0xA0)
          {
            if ((unsigned __int16)(SLChar::sLexFold[*v44 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v44 >> 6] << 6)]
                                  + *v44) != 8239)
              goto LABEL_2;
          }
          else
          {
            v47 = (unsigned __int16)(SLChar::sLexFold[*v44 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v44 >> 6] << 6)]
                                   + *v44);
            if (v47 >= 0x21 && v47 != 160)
              goto LABEL_2;
          }
        }
        else
        {
          v46 = (unsigned __int16)(SLChar::sLexFold[*v44 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v44 >> 6] << 6)]
                                 + *v44);
          if (v45 <= 0xA)
          {
            if (v46 < 9)
              goto LABEL_2;
          }
          else if (v46 != 13)
          {
            goto LABEL_2;
          }
        }
        *((_QWORD *)this + 3) = ++v44;
        if (*((_WORD **)this + 5) == v44)
        {
          SLLexerInstance::Refill(this);
          v44 = (_WORD *)*((_QWORD *)this + 3);
        }
      }
    }
    if (v8 <= 0x42u)
    {
      if (v8 != 32)
        goto LABEL_134;
      goto LABEL_105;
    }
    if (v8 != 67)
    {
      if (v8 >= 0x45u)
        goto LABEL_120;
      goto LABEL_69;
    }
LABEL_82:
    v31 = v4[1];
    *((_QWORD *)this + 3) = v4 + 1;
    *((_QWORD *)this + 6) = v4 + 1;
    v32 = (unsigned __int16)(SLChar::sLexFold[v31 & 0x3F | (SLChar::sUniMap[v31 >> 6] << 6)] + v31);
    if (v32 <= 0x54)
      break;
    if (v32 <= 0x6C)
    {
      if (v32 != 104)
        goto LABEL_727;
LABEL_128:
      v54 = v4[2];
      *v2 = v4 + 2;
      if ((((unsigned __int16)SLChar::sLexFold[v54 & 0x3F | (SLChar::sUniMap[v54 >> 6] << 6)] + (_DWORD)v54) & 0xFFDF) != 0x41)
        goto LABEL_726;
      v55 = v4[3];
      *v2 = v4 + 3;
      if ((((unsigned __int16)SLChar::sLexFold[v55 & 0x3F | (SLChar::sUniMap[v55 >> 6] << 6)] + (_DWORD)v55) & 0xFFDF) != 0x52)
        goto LABEL_726;
      v57 = v4[4];
      v56 = v4 + 4;
      *v2 = v56;
      v58 = SLChar::sLexFold[v57 & 0x3F | (SLChar::sUniMap[(unint64_t)v57 >> 6] << 6)] + v57;
      if (v58 > 0x20u)
      {
        if (v58 > 0xA0u)
LABEL_762:
          v59 = v58 == 8239;
        else
          v59 = v58 == 160;
      }
      else
      {
        if (v58 == 9)
          goto LABEL_754;
        v59 = v58 == 32;
      }
LABEL_763:
      while (2)
      {
        if (!v59)
          goto LABEL_726;
        while (1)
        {
LABEL_754:
          *((_QWORD *)this + 3) = ++v56;
          if ((uint64_t)(*((_QWORD *)this + 5) - (_QWORD)v56) <= 7)
          {
            SLLexerInstance::Refill(this);
            v56 = (unsigned __int16 *)*((_QWORD *)this + 3);
          }
          v58 = SLChar::sLexFold[*v56 & 0x3F | (SLChar::sUniMap[(unint64_t)*v56 >> 6] << 6)] + *v56;
          v261 = v58;
          if (v58 > 0x4Eu)
            break;
          v262 = (unsigned __int16)(SLChar::sLexFold[*v56 & 0x3F | (SLChar::sUniMap[(unint64_t)*v56 >> 6] << 6)]
                                  + *v56);
          if (v261 > 0x20)
          {
            if (v262 != 76)
            {
              if (v262 < 0x4E)
                goto LABEL_726;
LABEL_774:
              v267 = v56[1];
              *v2 = v56 + 1;
              if ((((unsigned __int16)SLChar::sLexFold[v267 & 0x3F | (SLChar::sUniMap[v267 >> 6] << 6)] + (_DWORD)v267) & 0xFFDF) == 0x4F)
              {
                v268 = v56[2];
                *v2 = v56 + 2;
                if ((((unsigned __int16)SLChar::sLexFold[v268 & 0x3F | (SLChar::sUniMap[v268 >> 6] << 6)] + (_DWORD)v268) & 0xFFDF) == 0x52)
                {
                  v269 = v56[3];
                  *v2 = v56 + 3;
                  if ((((unsigned __int16)SLChar::sLexFold[v269 & 0x3F | (SLChar::sUniMap[v269 >> 6] << 6)]
                       + (_DWORD)v269) & 0xFFDF) == 0x4D)
                  {
                    *((_QWORD *)this + 3) = v56 + 4;
                    v203 = *((_DWORD *)this + 24) & 0xFFFFFFEF;
                    goto LABEL_728;
                  }
                }
              }
LABEL_726:
              *((_QWORD *)this + 3) = *((_QWORD *)this + 6);
LABEL_727:
              SLLexerImpl::Error(this);
              SLLexerImpl::SkipToNextCommand(this, 1);
              goto LABEL_2;
            }
LABEL_769:
            v264 = v56[1];
            *v2 = v56 + 1;
            if ((((unsigned __int16)SLChar::sLexFold[v264 & 0x3F | (SLChar::sUniMap[v264 >> 6] << 6)] + (_DWORD)v264) & 0xFFDF) == 0x54)
            {
              v265 = v56[2];
              *v2 = v56 + 2;
              if ((((unsigned __int16)SLChar::sLexFold[v265 & 0x3F | (SLChar::sUniMap[v265 >> 6] << 6)] + (_DWORD)v265) & 0xFFDF) == 0x52)
              {
                v266 = v56[3];
                *v2 = v56 + 3;
                if ((((unsigned __int16)SLChar::sLexFold[v266 & 0x3F | (SLChar::sUniMap[v266 >> 6] << 6)] + (_DWORD)v266) & 0xFFDF) == 0x4C)
                {
                  *((_QWORD *)this + 3) = v56 + 4;
                  v203 = *((_DWORD *)this + 24) | 0x10;
                  goto LABEL_728;
                }
              }
            }
            goto LABEL_726;
          }
          if (v262 != 9)
          {
            v59 = v262 == 32;
            goto LABEL_763;
          }
        }
        if (v58 > 0x6Eu)
        {
          v59 = (unsigned __int16)(SLChar::sLexFold[*v56 & 0x3F | (SLChar::sUniMap[(unint64_t)*v56 >> 6] << 6)]
                                 + *v56) == 160;
          if ((unsigned __int16)(SLChar::sLexFold[*v56 & 0x3F | (SLChar::sUniMap[(unint64_t)*v56 >> 6] << 6)]
                                + *v56) <= 0xA0u)
            continue;
          goto LABEL_762;
        }
        break;
      }
      v263 = (unsigned __int16)(SLChar::sLexFold[*v56 & 0x3F | (SLChar::sUniMap[(unint64_t)*v56 >> 6] << 6)]
                              + *v56);
      if (v263 != 108)
      {
        if (v263 < 0x6E)
          goto LABEL_726;
        goto LABEL_774;
      }
      goto LABEL_769;
    }
    if (v32 != 109)
    {
      if (v32 != 116)
        goto LABEL_727;
      goto LABEL_180;
    }
LABEL_200:
    v93 = v4[2];
    *v2 = v4 + 2;
    if ((((unsigned __int16)SLChar::sLexFold[v93 & 0x3F | (SLChar::sUniMap[v93 >> 6] << 6)] + (_DWORD)v93) & 0xFFDF) != 0x4E)
      goto LABEL_726;
    v94 = v4[3];
    *v2 = v4 + 3;
    if ((((unsigned __int16)SLChar::sLexFold[v94 & 0x3F | (SLChar::sUniMap[v94 >> 6] << 6)] + (_DWORD)v94) & 0xFFDF) != 0x54)
      goto LABEL_726;
    for (i = v4 + 4; ; ++i)
    {
      *((_QWORD *)this + 3) = i;
      *((_QWORD *)this + 8) = i;
      if ((uint64_t)(*((_QWORD *)this + 5) - (_QWORD)i) <= 3)
      {
        SLLexerInstance::Refill(this);
        i = (unsigned __int16 *)*((_QWORD *)this + 3);
      }
      if (!(SLChar::sLexFold[*i & 0x3F | (SLChar::sUniMap[(unint64_t)*i >> 6] << 6)] + *i)
        || *((unsigned __int16 *)this + 42) == (unsigned __int16)(SLChar::sLexFold[*i & 0x3F | (SLChar::sUniMap[(unint64_t)*i >> 6] << 6)]
                                                                + *i)
        && (!*((_WORD *)this + 43) || i[1] == *((unsigned __int16 *)this + 43)))
      {
        break;
      }
    }
  }
  if (v32 <= 0x4C)
  {
    if (v32 != 72)
      goto LABEL_727;
    goto LABEL_128;
  }
  if (v32 == 77)
    goto LABEL_200;
  if (v32 <= 0x53)
    goto LABEL_727;
LABEL_180:
  v77 = v4[2];
  *v2 = v4 + 2;
  if ((((unsigned __int16)SLChar::sLexFold[v77 & 0x3F | (SLChar::sUniMap[v77 >> 6] << 6)] + (_DWORD)v77) & 0xFFDF) != 0x58)
    goto LABEL_726;
  v78 = v4[3];
  *v2 = v4 + 3;
  if ((((unsigned __int16)SLChar::sLexFold[v78 & 0x3F | (SLChar::sUniMap[v78 >> 6] << 6)] + (_DWORD)v78) & 0xFFDF) != 0x54)
    goto LABEL_726;
  v80 = v4[4];
  v79 = v4 + 4;
  *v2 = v79;
  v81 = SLChar::sLexFold[v80 & 0x3F | (SLChar::sUniMap[(unint64_t)v80 >> 6] << 6)] + v80;
  if (v81 > 0x20u)
  {
    if (v81 > 0xA0u)
LABEL_789:
      v82 = v81 == 8239;
    else
      v82 = v81 == 160;
  }
  else
  {
    if (v81 == 9)
      goto LABEL_778;
    v82 = v81 == 32;
  }
  while (2)
  {
    if (!v82)
      goto LABEL_726;
LABEL_778:
    *((_QWORD *)this + 3) = ++v79;
    if ((uint64_t)(*((_QWORD *)this + 5) - (_QWORD)v79) <= 7)
    {
      SLLexerInstance::Refill(this);
      v79 = (unsigned __int16 *)*((_QWORD *)this + 3);
    }
    v81 = SLChar::sLexFold[*v79 & 0x3F | (SLChar::sUniMap[(unint64_t)*v79 >> 6] << 6)] + *v79;
    if (v81 <= 0x57u)
    {
      if (v81 <= 0x4Du)
      {
        v270 = (unsigned __int16)(SLChar::sLexFold[*v79 & 0x3F | (SLChar::sUniMap[(unint64_t)*v79 >> 6] << 6)]
                                + *v79);
        v82 = v270 == 9;
        if (v270 > 9)
          v82 = v270 == 32;
        continue;
      }
      v272 = (unsigned __int16)(SLChar::sLexFold[*v79 & 0x3F | (SLChar::sUniMap[(unint64_t)*v79 >> 6] << 6)]
                              + *v79);
      if (v272 <= 0x53)
      {
        if (v272 >= 0x4F)
          goto LABEL_726;
LABEL_797:
        v273 = v79[1];
        *v2 = v79 + 1;
        if ((((unsigned __int16)SLChar::sLexFold[v273 & 0x3F | (SLChar::sUniMap[v273 >> 6] << 6)] + (_DWORD)v273) & 0xFFDF) != 0x4F)
          goto LABEL_726;
        v274 = v79[2];
        *v2 = v79 + 2;
        if ((((unsigned __int16)SLChar::sLexFold[v274 & 0x3F | (SLChar::sUniMap[v274 >> 6] << 6)] + (_DWORD)v274) & 0xFFDF) != 0x52)
          goto LABEL_726;
        v275 = v79[3];
        *v2 = v79 + 3;
        if ((((unsigned __int16)SLChar::sLexFold[v275 & 0x3F | (SLChar::sUniMap[v275 >> 6] << 6)] + (_DWORD)v275) & 0xFFDF) != 0x4D)
          goto LABEL_726;
        *((_QWORD *)this + 3) = v79 + 4;
        v293 = this;
        v294 = 1668577396;
        v295 = 1313821261;
        goto LABEL_838;
      }
      if (v272 == 84)
        goto LABEL_804;
      if ((unsigned __int16)(SLChar::sLexFold[*v79 & 0x3F | (SLChar::sUniMap[(unint64_t)*v79 >> 6] << 6)] + *v79) < 0x57u)
        goto LABEL_726;
LABEL_809:
      v278 = v79[1];
      *v2 = v79 + 1;
      v279 = SLChar::sLexFold[v278 & 0x3F | (SLChar::sUniMap[v278 >> 6] << 6)] + v278;
      if (v279 > 0x53u)
      {
        if (v279 > 0x6Fu)
        {
          if (v279 != 115)
            goto LABEL_726;
          goto LABEL_824;
        }
        if (v279 != 111)
          goto LABEL_726;
      }
      else if (v279 != 79)
      {
        if (v279 < 0x53u)
          goto LABEL_726;
LABEL_824:
        v284 = v79[2];
        *v2 = v79 + 2;
        if ((((unsigned __int16)SLChar::sLexFold[v284 & 0x3F | (SLChar::sUniMap[v284 >> 6] << 6)] + (_DWORD)v284) & 0xFFDF) != 0x4B)
          goto LABEL_726;
        v285 = v79[3];
        *v2 = v79 + 3;
        if ((((unsigned __int16)SLChar::sLexFold[v285 & 0x3F | (SLChar::sUniMap[v285 >> 6] << 6)] + (_DWORD)v285) & 0xFFDF) != 0x50)
          goto LABEL_726;
        *((_QWORD *)this + 3) = v79 + 4;
        v293 = this;
        v294 = 1668577396;
        v295 = 1465076560;
        goto LABEL_838;
      }
      v280 = v79[2];
      *v2 = v79 + 2;
      if ((((unsigned __int16)SLChar::sLexFold[v280 & 0x3F | (SLChar::sUniMap[v280 >> 6] << 6)] + (_DWORD)v280) & 0xFFDF) != 0x52)
        goto LABEL_726;
      v281 = v79[3];
      *v2 = v79 + 3;
      if ((((unsigned __int16)SLChar::sLexFold[v281 & 0x3F | (SLChar::sUniMap[v281 >> 6] << 6)] + (_DWORD)v281) & 0xFFDF) != 0x44)
        goto LABEL_726;
      *((_QWORD *)this + 3) = v79 + 4;
      v293 = this;
      v294 = 1668577396;
      v295 = 1464816196;
      goto LABEL_838;
    }
    break;
  }
  if (v81 > 0x76u)
  {
    if ((unsigned __int16)(SLChar::sLexFold[*v79 & 0x3F | (SLChar::sUniMap[(unint64_t)*v79 >> 6] << 6)] + *v79) > 0xA0u)
      goto LABEL_789;
    if ((unsigned __int16)(SLChar::sLexFold[*v79 & 0x3F | (SLChar::sUniMap[(unint64_t)*v79 >> 6] << 6)] + *v79) < 0x78u)
      goto LABEL_809;
    if ((unsigned __int16)(SLChar::sLexFold[*v79 & 0x3F | (SLChar::sUniMap[(unint64_t)*v79 >> 6] << 6)] + *v79) < 0xA0u)
      goto LABEL_726;
    goto LABEL_778;
  }
  v271 = (unsigned __int16)(SLChar::sLexFold[*v79 & 0x3F | (SLChar::sUniMap[(unint64_t)*v79 >> 6] << 6)] + *v79);
  if (v271 <= 0x6E)
  {
    if (v271 != 110)
      goto LABEL_726;
    goto LABEL_797;
  }
  if (v271 != 116)
    goto LABEL_726;
LABEL_804:
  v276 = v79[1];
  *v2 = v79 + 1;
  v277 = SLChar::sLexFold[v276 & 0x3F | (SLChar::sUniMap[v276 >> 6] << 6)] + v276;
  if (v277 > 0x53u)
  {
    if (v277 <= 0x65u)
    {
      if (v277 != 101)
        goto LABEL_726;
      goto LABEL_820;
    }
    if (v277 != 115)
      goto LABEL_726;
LABEL_828:
    v286 = v79[2];
    *v2 = v79 + 2;
    if ((((unsigned __int16)SLChar::sLexFold[v286 & 0x3F | (SLChar::sUniMap[v286 >> 6] << 6)] + (_DWORD)v286) & 0xFFDF) != 0x4B)
      goto LABEL_726;
    v287 = v79[3];
    *v2 = v79 + 3;
    if ((((unsigned __int16)SLChar::sLexFold[v287 & 0x3F | (SLChar::sUniMap[v287 >> 6] << 6)] + (_DWORD)v287) & 0xFFDF) != 0x50)
      goto LABEL_726;
    *((_QWORD *)this + 3) = v79 + 4;
    v293 = this;
    v294 = 1668577396;
    v295 = 1414744912;
  }
  else
  {
    if (v277 != 69)
    {
      if (v277 < 0x53u)
        goto LABEL_726;
      goto LABEL_828;
    }
LABEL_820:
    v282 = v79[2];
    *v2 = v79 + 2;
    if ((((unsigned __int16)SLChar::sLexFold[v282 & 0x3F | (SLChar::sUniMap[v282 >> 6] << 6)] + (_DWORD)v282) & 0xFFDF) != 0x58)
      goto LABEL_726;
    v283 = v79[3];
    *v2 = v79 + 3;
    if ((((unsigned __int16)SLChar::sLexFold[v283 & 0x3F | (SLChar::sUniMap[v283 >> 6] << 6)] + (_DWORD)v283) & 0xFFDF) != 0x54)
      goto LABEL_726;
    *((_QWORD *)this + 3) = v79 + 4;
    v293 = this;
    v294 = 1668577396;
    v295 = 1413830740;
  }
LABEL_838:
  CommandToken = SLLexerInstance::CreateCommandToken(v293, v294, v295);
LABEL_839:
  BehaviorToken = CommandToken;
  SLLexerImpl::SkipToNextCommand(this, 0);
  *((_QWORD *)this + 9) = (char *)this + 80;
  return BehaviorToken;
}

uint64_t SLLexerImpl::SkipToNextCommand(SLLexerImpl *this, char a2)
{
  unsigned __int16 *i;
  unsigned int v5;

  for (i = (unsigned __int16 *)*((_QWORD *)this + 3); ; *((_QWORD *)this + 3) = i)
  {
    if ((uint64_t)(*((_QWORD *)this + 5) - (_QWORD)i) <= 3)
    {
      SLLexerInstance::Refill(this);
      i = (unsigned __int16 *)*((_QWORD *)this + 3);
    }
    if (*((unsigned __int16 *)this + 42) == (unsigned __int16)(SLChar::sLexFold[*i & 0x3F | (SLChar::sUniMap[(unint64_t)*i >> 6] << 6)]
                                                              + *i)
      && (!*((_WORD *)this + 43) || i[1] == *((unsigned __int16 *)this + 43)))
    {
      return 0;
    }
    v5 = (unsigned __int16)(SLChar::sLexFold[*i & 0x3F | (SLChar::sUniMap[(unint64_t)*i >> 6] << 6)] + *i);
    if (v5 <= 0x3A)
    {
      if (v5 == 9 || v5 == 32)
        goto LABEL_20;
      if (!(SLChar::sLexFold[*i & 0x3F | (SLChar::sUniMap[(unint64_t)*i >> 6] << 6)] + *i))
        return 0;
      goto LABEL_17;
    }
    if (v5 != 160 && v5 != 8239)
      break;
LABEL_20:
    ++i;
  }
  if (v5 != 59)
  {
LABEL_17:
    if ((a2 & 1) == 0)
    {
      SLLexerImpl::Error(this);
      i = (unsigned __int16 *)*((_QWORD *)this + 3);
    }
    a2 = 1;
    goto LABEL_20;
  }
  *((_QWORD *)this + 3) = i + 1;
  return 1;
}

uint64_t SLLexerImpl::NextPhonemeToken(SLLexerImpl *this)
{
  unsigned __int8 *v2;
  unsigned __int16 *v3;
  unsigned __int16 v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  _WORD *v10;
  unsigned __int16 v11;
  BOOL v12;
  unsigned int v13;
  int v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t **v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  unint64_t v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  unint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  unint64_t v39;
  size_t v40;
  char *v41;
  char *v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  unsigned __int8 v45;
  unint64_t v46;
  _BYTE *v47;
  unint64_t v48;
  unsigned __int8 *v49;
  uint64_t v50;
  unint64_t v51;
  size_t v52;
  char *v53;
  char *v54;
  unsigned __int8 *v55;
  unsigned __int8 *v56;
  unsigned __int8 v57;
  unint64_t v58;
  unsigned __int16 v59;
  BOOL v60;
  unsigned int v61;
  unint64_t *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  _BYTE *v67;
  _BYTE *v68;
  unint64_t v69;
  _BYTE *v70;
  unint64_t v71;
  unint64_t v72;
  size_t v73;
  char *v74;
  char *v75;
  unsigned __int8 *v76;
  _BYTE *v77;
  char v78;
  void **v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  char *v89;
  SLLexerInstance *v90;
  char v91;
  char *v92;
  __int16 v93;
  _WORD *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  char *v103;
  __int16 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v110;
  int v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  unsigned __int8 v115;

  v115 = 0;
  v2 = SLChar::sUniMap;
  *((_QWORD *)this + 8) = *((_QWORD *)this + 3);
  do
  {
    while (1)
    {
      v3 = (unsigned __int16 *)*((_QWORD *)this + 3);
      if ((uint64_t)(*((_QWORD *)this + 5) - (_QWORD)v3) <= 5)
      {
        SLLexerInstance::Refill(this);
        v3 = (unsigned __int16 *)*((_QWORD *)this + 3);
      }
      v4 = SLChar::sLexFold[*v3 & 0x3F | (v2[(unint64_t)*v3 >> 6] << 6)] + *v3;
      if (v4 > 0x5Bu)
      {
        if (v4 > 0xB3u)
        {
          if ((unsigned __int16)(v4 >> 4) > 0x202u)
          {
            if (v4 > 0x2034u)
            {
              v12 = v4 < 0x2037u;
              v13 = (unsigned __int16)(v4 - 8249);
              if (v12 || v13 < 2)
                goto LABEL_239;
            }
            else if (v4 >= 0x2032u && v4 != 8244)
            {
              goto LABEL_239;
            }
          }
          else if ((unsigned __int16)(SLChar::sLexFold[*v3 & 0x3F | (v2[(unint64_t)*v3 >> 6] << 6)] + *v3) > 0xBBu)
          {
            if ((unsigned __int16)(v4 >> 3) >= 0x403u)
            {
              if ((unsigned __int16)(v4 >> 5) < 0x101u)
                goto LABEL_239;
              if (v4 >= 0x202Fu)
              {
LABEL_58:
                v10 = v3 + 1;
                *((_QWORD *)this + 3) = v3 + 1;
                while (1)
                {
                  v61 = (unsigned __int16)(SLChar::sLexFold[*v10 & 0x3F | (v2[(unint64_t)(unsigned __int16)*v10 >> 6] << 6)]
                                         + *v10);
                  if (v61 > 0x20)
                  {
                    if (v61 > 0xA0)
                    {
                      if ((unsigned __int16)(SLChar::sLexFold[*v10 & 0x3F | (v2[(unint64_t)(unsigned __int16)*v10 >> 6] << 6)]
                                            + *v10) != 8239)
                        goto LABEL_160;
                    }
                    else if ((unsigned __int16)(SLChar::sLexFold[*v10 & 0x3F | (v2[(unint64_t)(unsigned __int16)*v10 >> 6] << 6)]
                                               + *v10) != 160)
                    {
                      goto LABEL_160;
                    }
                  }
                  else if (v61 != 9 && v61 != 32)
                  {
                    goto LABEL_160;
                  }
LABEL_158:
                  *((_QWORD *)this + 3) = ++v10;
                  if (*((_WORD **)this + 5) == v10)
                  {
                    SLLexerInstance::Refill(this);
                    v10 = (_WORD *)*((_QWORD *)this + 3);
                  }
                }
              }
            }
          }
          else if ((unsigned __int16)(SLChar::sLexFold[*v3 & 0x3F | (v2[(unint64_t)*v3 >> 6] << 6)] + *v3) < 0xB5u
                 || (unsigned __int16)(SLChar::sLexFold[*v3 & 0x3F | (v2[(unint64_t)*v3 >> 6] << 6)] + *v3) == 187)
          {
            goto LABEL_239;
          }
        }
        else
        {
          v6 = (unsigned __int16)(SLChar::sLexFold[*v3 & 0x3F | (v2[(unint64_t)*v3 >> 6] << 6)] + *v3);
          if (v6 > 0x7B)
          {
            if (v6 > 0x9F)
            {
              if (v6 == 160)
                goto LABEL_58;
              if (v6 == 171)
                goto LABEL_239;
            }
            else if (v6 == 125)
            {
              goto LABEL_246;
            }
          }
          else if (v6 > 0x5F)
          {
            if (v6 == 96)
              goto LABEL_239;
            if (v6 >= 0x7B)
              goto LABEL_245;
          }
          else if (v6 == 93)
          {
            goto LABEL_246;
          }
        }
        goto LABEL_68;
      }
      if (v4 > 0x26u)
        break;
      v5 = (unsigned __int16)(SLChar::sLexFold[*v3 & 0x3F | (v2[(unint64_t)*v3 >> 6] << 6)] + *v3);
      if (v5 > 0xD)
      {
        if (v5 > 0x1F)
        {
          if ((unsigned __int16)(SLChar::sLexFold[*v3 & 0x3F | (v2[(unint64_t)*v3 >> 6] << 6)] + *v3) == 32)
            goto LABEL_58;
          if ((unsigned __int16)(SLChar::sLexFold[*v3 & 0x3F | (v2[(unint64_t)*v3 >> 6] << 6)] + *v3) < 0x22u)
          {
LABEL_212:
            *((_QWORD *)this + 3) = v3 + 1;
            v90 = this;
            v91 = 13;
            goto LABEL_240;
          }
          if ((unsigned __int16)(SLChar::sLexFold[*v3 & 0x3F | (v2[(unint64_t)*v3 >> 6] << 6)] + *v3) == 34)
            goto LABEL_239;
        }
        else if ((unsigned __int16)(SLChar::sLexFold[*v3 & 0x3F | (v2[(unint64_t)*v3 >> 6] << 6)] + *v3) == 16)
        {
          v110 = 0;
          *((_QWORD *)this + 3) = v3 + 1;
          v111 = *((_DWORD *)this + 23);
          *((_DWORD *)this + 24) = v111;
          *((_DWORD *)this + 25) = v111;
          *((_DWORD *)this + 23) = 1;
          *((_QWORD *)this + 13) = *((_QWORD *)this + 10);
          return v110;
        }
        goto LABEL_68;
      }
      if (v5 <= 9)
      {
        if (!(SLChar::sLexFold[*v3 & 0x3F | (v2[(unint64_t)*v3 >> 6] << 6)] + *v3))
        {
          v110 = 0;
          *((_DWORD *)this + 23) &= 0xFFFFFFF0;
          *((_QWORD *)this + 3) = v3;
          return v110;
        }
        if ((unsigned __int16)(SLChar::sLexFold[*v3 & 0x3F | (v2[(unint64_t)*v3 >> 6] << 6)] + *v3) >= 9u)
          goto LABEL_58;
        goto LABEL_68;
      }
      v8 = (unsigned __int16)(SLChar::sLexFold[*v3 & 0x3F | (v2[(unint64_t)*v3 >> 6] << 6)] + *v3);
      if (v8 == 10)
      {
        v9 = v3[1];
        v10 = v3 + 1;
        *((_QWORD *)this + 3) = v3 + 1;
        *((_QWORD *)this + 6) = v3 + 1;
        v11 = SLChar::sLexFold[v9 & 0x3F | (v2[(unint64_t)v9 >> 6] << 6)] + v9;
        if (v11 > 0x1Fu)
        {
          if (v11 > 0xA0u)
          {
            v60 = v11 == 8239;
            v11 = 8239;
            if (v60)
              goto LABEL_164;
          }
          else if (v11 < 0x21u || v11 == 160)
          {
            while (1)
            {
LABEL_164:
              if (v11 > 0x1Fu)
              {
                if (v11 > 0xA0u)
                {
                  if (v11 == 8239)
                    goto LABEL_161;
                }
                else if (v11 < 0x21u || v11 == 160)
                {
                  goto LABEL_161;
                }
                goto LABEL_176;
              }
              if (v11 > 0xAu)
                break;
              if (v11 < 9u)
                goto LABEL_176;
              if (v11 != 9)
                goto LABEL_255;
LABEL_161:
              *((_QWORD *)this + 3) = ++v10;
              if (*((_WORD **)this + 5) == v10)
              {
                SLLexerInstance::Refill(this);
                v10 = (_WORD *)*((_QWORD *)this + 3);
              }
              v11 = SLChar::sLexFold[*v10 & 0x3F | (v2[(unint64_t)(unsigned __int16)*v10 >> 6] << 6)] + *v10;
            }
            if (v11 == 13)
            {
              do
              {
                while (1)
                {
                  while (1)
                  {
LABEL_255:
                    *((_QWORD *)this + 3) = ++v10;
                    if (*((_WORD **)this + 5) == v10)
                    {
                      SLLexerInstance::Refill(this);
                      v10 = (_WORD *)*((_QWORD *)this + 3);
                    }
LABEL_257:
                    v112 = (unsigned __int16)(SLChar::sLexFold[*v10 & 0x3F | (v2[(unint64_t)(unsigned __int16)*v10 >> 6] << 6)]
                                            + *v10);
                    if (v112 > 0x1F)
                      break;
                    v113 = (unsigned __int16)(SLChar::sLexFold[*v10 & 0x3F | (v2[(unint64_t)(unsigned __int16)*v10 >> 6] << 6)]
                                            + *v10);
                    if (v112 > 0xA)
                    {
                      if (v113 != 13)
                        goto LABEL_253;
                    }
                    else if (v113 < 9)
                    {
                      goto LABEL_253;
                    }
                  }
                  if (v112 <= 0xA0)
                    break;
                  if ((unsigned __int16)(SLChar::sLexFold[*v10 & 0x3F | (v2[(unint64_t)(unsigned __int16)*v10 >> 6] << 6)]
                                        + *v10) != 8239)
                    goto LABEL_253;
                }
                v114 = (unsigned __int16)(SLChar::sLexFold[*v10 & 0x3F | (v2[(unint64_t)(unsigned __int16)*v10 >> 6] << 6)]
                                        + *v10);
              }
              while (v114 < 0x21 || v114 == 160);
LABEL_253:
              v90 = this;
              v91 = 6;
LABEL_240:
              v108 = 0;
              return SLLexerInstance::CreateToken(v90, v91, v108);
            }
LABEL_176:
            v10 = (_WORD *)*((_QWORD *)this + 6);
            *((_QWORD *)this + 3) = v10;
          }
        }
        else if (v11 > 0xAu)
        {
          if (v11 == 13)
            goto LABEL_164;
        }
        else if (v11 > 8u)
        {
          goto LABEL_164;
        }
      }
      else
      {
        if (v8 < 0xD)
          goto LABEL_68;
        v10 = v3 + 1;
        v58 = v3[1];
        *((_QWORD *)this + 3) = v3 + 1;
        *((_QWORD *)this + 6) = v3 + 1;
        v59 = SLChar::sLexFold[v58 & 0x3F | (v2[v58 >> 6] << 6)] + v58;
        if (v59 > 0x1Fu)
        {
          if (v59 > 0xA0u)
          {
            if (v59 == 8239)
              goto LABEL_161;
          }
          else if (v59 < 0x21u || v59 == 160)
          {
            goto LABEL_161;
          }
        }
        else if (v59 > 0xAu)
        {
          if (v59 == 13)
            goto LABEL_255;
        }
        else if (v59 >= 9u)
        {
          if (v59 != 9)
          {
            v10 = v3 + 2;
            *((_QWORD *)this + 3) = v3 + 2;
            goto LABEL_257;
          }
          goto LABEL_161;
        }
      }
LABEL_160:
      *((_QWORD *)this + 8) = v10;
    }
    v7 = (unsigned __int16)(SLChar::sLexFold[*v3 & 0x3F | (v2[(unint64_t)*v3 >> 6] << 6)] + *v3);
    if (v7 <= 0x2D)
    {
      if (v7 > 0x29)
      {
        if (v7 == 44)
          goto LABEL_212;
        goto LABEL_68;
      }
      if (v7 < 0x28)
      {
LABEL_239:
        *((_QWORD *)this + 3) = v3 + 1;
        v90 = this;
        v91 = 4;
        goto LABEL_240;
      }
      if (v7 == 40)
      {
LABEL_245:
        *((_QWORD *)this + 3) = v3 + 1;
        v90 = this;
        v91 = 5;
        v108 = 2;
      }
      else
      {
LABEL_246:
        *((_QWORD *)this + 3) = v3 + 1;
        v90 = this;
        v91 = 5;
        v108 = 4;
      }
      return SLLexerInstance::CreateToken(v90, v91, v108);
    }
    if (v7 > 0x3B)
    {
      if (v7 == 63)
        goto LABEL_212;
      if (v7 >= 0x5B)
        goto LABEL_245;
    }
    else if (v7 < 0x2F || v7 == 59)
    {
      goto LABEL_212;
    }
LABEL_68:
    *((_QWORD *)this + 3) = v3 + 1;
    v15 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 16))(*((_QWORD *)this + 16));
    if (v15 != 1)
    {
      if (v15 != 2)
      {
        if (v15)
        {
          v10 = (_WORD *)*((_QWORD *)this + 3);
          goto LABEL_158;
        }
        SLLexerImpl::Error(this);
        return 0;
      }
      *((_QWORD *)this + 3) += 2;
    }
    v110 = operator new();
    SLToken::SLToken((SLToken *)v110, 8, 64);
    *(_QWORD *)(v110 + 24) = "PhonemeInput";
    v16 = (unint64_t *)operator new();
    SLHomograph::SLHomograph((SLHomograph *)v16);
    *(_DWORD *)v16 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 48))(*((_QWORD *)this + 16));
    v17 = *(_QWORD *)(v110 + 96);
    v18 = *(unint64_t ***)(v110 + 88);
    if ((unint64_t)v18 >= v17)
    {
      v20 = *(_QWORD *)(v110 + 80);
      v21 = ((uint64_t)v18 - v20) >> 3;
      if ((unint64_t)(v21 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v22 = v17 - v20;
      v23 = v22 >> 2;
      if (v22 >> 2 <= (unint64_t)(v21 + 1))
        v23 = v21 + 1;
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
        v24 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v24 = v23;
      if (v24)
        v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SLHomograph *>>(v110 + 96, v24);
      else
        v25 = 0;
      v26 = &v25[8 * v21];
      *(_QWORD *)v26 = v16;
      v19 = v26 + 8;
      v28 = *(char **)(v110 + 80);
      v27 = *(char **)(v110 + 88);
      if (v27 != v28)
      {
        do
        {
          v29 = *((_QWORD *)v27 - 1);
          v27 -= 8;
          *((_QWORD *)v26 - 1) = v29;
          v26 -= 8;
        }
        while (v27 != v28);
        v27 = *(char **)(v110 + 80);
      }
      *(_QWORD *)(v110 + 80) = v26;
      *(_QWORD *)(v110 + 88) = v19;
      *(_QWORD *)(v110 + 96) = &v25[8 * v24];
      if (v27)
        operator delete(v27);
    }
    else
    {
      *v18 = v16;
      v19 = v18 + 1;
    }
    *(_QWORD *)(v110 + 88) = v19;
    if ((*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)this + 16) + 32))(*((_QWORD *)this + 16), v115))
    {
      v30 = (unsigned __int8 *)v16[5];
    }
    else
    {
      v31 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 40))(*((_QWORD *)this + 16));
      v32 = v31;
      v34 = (unsigned __int8 *)v16[5];
      v33 = v16[6];
      if ((unint64_t)v34 >= v33)
      {
        v35 = v2;
        v36 = v16[4];
        v37 = &v34[-v36];
        v38 = (uint64_t)&v34[-v36 + 1];
        if (v38 < 0)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v39 = v33 - v36;
        if (2 * v39 > v38)
          v38 = 2 * v39;
        if (v39 >= 0x3FFFFFFFFFFFFFFFLL)
          v40 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v40 = v38;
        if (v40)
          v41 = (char *)operator new(v40);
        else
          v41 = 0;
        v42 = (char *)&v37[(_QWORD)v41];
        v43 = &v37[(_QWORD)v41];
        *v43 = v32;
        v30 = v43 + 1;
        if (v34 != (unsigned __int8 *)v36)
        {
          v44 = &v34[~v36];
          do
          {
            v45 = *--v34;
            (v44--)[(_QWORD)v41] = v45;
          }
          while (v34 != (unsigned __int8 *)v36);
          v34 = (unsigned __int8 *)v16[4];
          v42 = v41;
        }
        v16[4] = (unint64_t)v42;
        v16[5] = (unint64_t)v30;
        v16[6] = (unint64_t)&v41[v40];
        v2 = v35;
        if (v34)
          operator delete(v34);
      }
      else
      {
        *v34 = v31;
        v30 = v34 + 1;
      }
      v16[5] = (unint64_t)v30;
    }
    v46 = v16[6];
    if ((unint64_t)v30 >= v46)
    {
      v48 = v16[4];
      v49 = &v30[-v48];
      v50 = (uint64_t)&v30[-v48 + 1];
      if (v50 < 0)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v51 = v46 - v48;
      if (2 * v51 > v50)
        v50 = 2 * v51;
      if (v51 >= 0x3FFFFFFFFFFFFFFFLL)
        v52 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v52 = v50;
      if (v52)
        v53 = (char *)operator new(v52);
      else
        v53 = 0;
      v54 = (char *)&v49[(_QWORD)v53];
      v55 = &v49[(_QWORD)v53];
      *v55 = v115;
      v47 = v55 + 1;
      if (v30 != (unsigned __int8 *)v48)
      {
        v56 = &v30[~v48];
        do
        {
          v57 = *--v30;
          (v56--)[(_QWORD)v53] = v57;
        }
        while (v30 != (unsigned __int8 *)v48);
        v30 = (unsigned __int8 *)v16[4];
        v54 = v53;
      }
      v16[4] = (unint64_t)v54;
      v16[5] = (unint64_t)v47;
      v16[6] = (unint64_t)&v53[v52];
      if (v30)
        operator delete(v30);
    }
    else
    {
      *v30 = v115;
      v47 = v30 + 1;
    }
    v16[5] = (unint64_t)v47;
  }
  while (!v110);
  v62 = v16 + 4;
  while (1)
  {
    v63 = *((_QWORD *)this + 3);
    if (*((_QWORD *)this + 5) - v63 <= 3)
    {
      SLLexerInstance::Refill(this);
      v63 = *((_QWORD *)this + 3);
    }
    v64 = (*(uint64_t (**)(_QWORD, uint64_t, unsigned __int8 *))(**((_QWORD **)this + 16) + 16))(*((_QWORD *)this + 16), v63, &v115);
    if (v64 != 2)
      break;
    v65 = *((_QWORD *)this + 3) + 2;
    *((_QWORD *)this + 3) = v65;
LABEL_183:
    *((_QWORD *)this + 3) = v65 + 2;
    v67 = (_BYTE *)v16[5];
    v66 = v16[6];
    if ((unint64_t)v67 >= v66)
    {
      v69 = *v62;
      v70 = &v67[-*v62];
      v71 = (unint64_t)(v70 + 1);
      if ((uint64_t)(v70 + 1) < 0)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v72 = v66 - v69;
      if (2 * v72 > v71)
        v71 = 2 * v72;
      if (v72 >= 0x3FFFFFFFFFFFFFFFLL)
        v73 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v73 = v71;
      if (v73)
        v74 = (char *)operator new(v73);
      else
        v74 = 0;
      v75 = &v70[(_QWORD)v74];
      v76 = &v70[(_QWORD)v74];
      *v76 = v115;
      v68 = v76 + 1;
      if (v67 != (_BYTE *)v69)
      {
        v77 = &v67[~v69];
        do
        {
          v78 = *--v67;
          (v77--)[(_QWORD)v74] = v78;
        }
        while (v67 != (_BYTE *)v69);
        v67 = (_BYTE *)*v62;
        v75 = v74;
      }
      v16[4] = (unint64_t)v75;
      v16[5] = (unint64_t)v68;
      v16[6] = (unint64_t)&v74[v73];
      if (v67)
        operator delete(v67);
    }
    else
    {
      *v67 = v115;
      v68 = v67 + 1;
    }
    v16[5] = (unint64_t)v68;
  }
  if (v64 == 1)
  {
    v65 = *((_QWORD *)this + 3);
    goto LABEL_183;
  }
  v79 = (void **)(v110 + 56);
  std::vector<unsigned short>::__assign_with_size[abi:ne180100]<unsigned short const*,unsigned short const*>((char *)(v110 + 56), *((char **)this + 8), *((_QWORD *)this + 3), (uint64_t)(*((_QWORD *)this + 3) - *((_QWORD *)this + 8)) >> 1);
  v80 = *(char **)(v110 + 72);
  v81 = *(char **)(v110 + 64);
  if (v81 < v80)
  {
    *(_WORD *)v81 = 32;
    v82 = v81 + 2;
    goto LABEL_220;
  }
  v83 = (char *)*v79;
  v84 = v81 - (_BYTE *)*v79;
  if (v84 <= -3)
    goto LABEL_251;
  v85 = v84 >> 1;
  v86 = v80 - v83;
  if (v86 <= (v84 >> 1) + 1)
    v87 = v85 + 1;
  else
    v87 = v86;
  if (v86 >= 0x7FFFFFFFFFFFFFFELL)
    v88 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v88 = v87;
  if (v88)
  {
    v89 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v110 + 72, v88);
    v83 = *(char **)(v110 + 56);
    v81 = *(char **)(v110 + 64);
  }
  else
  {
    v89 = 0;
  }
  v92 = &v89[2 * v85];
  v80 = &v89[2 * v88];
  *(_WORD *)v92 = 32;
  v82 = v92 + 2;
  while (v81 != v83)
  {
    v93 = *((_WORD *)v81 - 1);
    v81 -= 2;
    *((_WORD *)v92 - 1) = v93;
    v92 -= 2;
  }
  *(_QWORD *)(v110 + 56) = v92;
  *(_QWORD *)(v110 + 64) = v82;
  *(_QWORD *)(v110 + 72) = v80;
  if (v83)
  {
    operator delete(v83);
    v80 = *(char **)(v110 + 72);
  }
LABEL_220:
  *(_QWORD *)(v110 + 64) = v82;
  if (v82 < v80)
  {
    *(_WORD *)v82 = 0;
    v94 = v82 + 2;
    goto LABEL_237;
  }
  v95 = (char *)*v79;
  v96 = v82 - (_BYTE *)*v79;
  if (v96 <= -3)
LABEL_251:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v97 = v96 >> 1;
  v98 = v80 - v95;
  if (v98 <= (v96 >> 1) + 1)
    v99 = v97 + 1;
  else
    v99 = v98;
  if (v98 >= 0x7FFFFFFFFFFFFFFELL)
    v100 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v100 = v99;
  if (v100)
  {
    v101 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v110 + 72, v100);
    v95 = *(char **)(v110 + 56);
    v82 = *(char **)(v110 + 64);
  }
  else
  {
    v101 = 0;
  }
  v102 = &v101[2 * v97];
  v103 = &v101[2 * v100];
  *(_WORD *)v102 = 0;
  v94 = v102 + 2;
  while (v82 != v95)
  {
    v104 = *((_WORD *)v82 - 1);
    v82 -= 2;
    *((_WORD *)v102 - 1) = v104;
    v102 -= 2;
  }
  *(_QWORD *)(v110 + 56) = v102;
  *(_QWORD *)(v110 + 64) = v94;
  *(_QWORD *)(v110 + 72) = v103;
  if (v95)
    operator delete(v95);
LABEL_237:
  *(_QWORD *)(v110 + 64) = v94;
  v105 = *((_QWORD *)this + 8);
  v106 = (v105 + 2 * *((int *)this + 4) - *((_QWORD *)this + 4)) >> 1;
  v107 = (*((_QWORD *)this + 3) - v105) >> 1;
  *(_QWORD *)(v110 + 32) = v106;
  *(_QWORD *)(v110 + 40) = v107;
  return v110;
}

void std::vector<SLHomograph *>::push_back[abi:ne180100](void **a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = ((char *)v7 - (_BYTE *)*a1) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v10 = v5 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SLHomograph *>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = *a2;
    v8 = v14 + 8;
    v17 = (char *)*a1;
    v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *((_QWORD *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      v16 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v7 = *a2;
    v8 = v7 + 1;
  }
  a1[1] = v8;
}

void std::vector<unsigned char>::push_back[abi:ne180100](unint64_t *a1, _BYTE *a2)
{
  unint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  unint64_t v12;
  char *v13;
  _BYTE *v14;
  char v15;

  v5 = (_BYTE *)a1[1];
  v4 = a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v7 = *a1;
    v8 = &v5[-*a1];
    v9 = (unint64_t)(v8 + 1);
    if ((uint64_t)(v8 + 1) < 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v10 = v4 - v7;
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
      v12 = (unint64_t)operator new(v11);
    else
      v12 = 0;
    v13 = (char *)(v12 + v11);
    v8[v12] = *a2;
    v6 = (uint64_t)&v8[v12 + 1];
    if (v5 == (_BYTE *)v7)
    {
      v12 += (unint64_t)v8;
    }
    else
    {
      v14 = &v5[~v7];
      do
      {
        v15 = *--v5;
        (v14--)[v12] = v15;
      }
      while (v5 != (_BYTE *)v7);
      v5 = (_BYTE *)*a1;
    }
    *a1 = v12;
    a1[1] = v6;
    a1[2] = (unint64_t)v13;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *v5 = *a2;
    v6 = (uint64_t)(v5 + 1);
  }
  a1[1] = v6;
}

SLLexerInstance *SLLexerImpl::SkipSpaces(SLLexerInstance *this)
{
  SLLexerInstance *v1;
  _WORD *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v1 = this;
  v2 = (_WORD *)*((_QWORD *)this + 3);
LABEL_2:
  if ((uint64_t)(*((_QWORD *)v1 + 5) - (_QWORD)v2) <= 3)
  {
    this = (SLLexerInstance *)SLLexerInstance::Refill(v1);
    v2 = (_WORD *)*((_QWORD *)v1 + 3);
  }
  v3 = (unsigned __int16)(SLChar::sLexFold[*v2 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v2 >> 6] << 6)]
                        + *v2);
  if (v3 <= 0x1F)
  {
    v4 = (unsigned __int16)(SLChar::sLexFold[*v2 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v2 >> 6] << 6)]
                          + *v2);
    if (v3 > 0xA)
    {
      if (v4 != 13)
        goto LABEL_29;
    }
    else if (v4 < 9)
    {
      goto LABEL_29;
    }
LABEL_15:
    *((_QWORD *)v1 + 3) = ++v2;
    while (1)
    {
      v6 = (unsigned __int16)(SLChar::sLexFold[*v2 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v2 >> 6] << 6)]
                            + *v2);
      if (v6 > 0x1F)
      {
        if (v6 > 0xA0)
        {
          if ((unsigned __int16)(SLChar::sLexFold[*v2 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v2 >> 6] << 6)]
                                + *v2) != 8239)
            goto LABEL_2;
        }
        else
        {
          v8 = (unsigned __int16)(SLChar::sLexFold[*v2 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v2 >> 6] << 6)]
                                + *v2);
          if (v8 >= 0x21 && v8 != 160)
            goto LABEL_2;
        }
      }
      else
      {
        v7 = (unsigned __int16)(SLChar::sLexFold[*v2 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v2 >> 6] << 6)]
                              + *v2);
        if (v6 <= 0xA)
        {
          if (v7 < 9)
            goto LABEL_2;
        }
        else if (v7 != 13)
        {
          goto LABEL_2;
        }
      }
      *((_QWORD *)v1 + 3) = ++v2;
      if (*((_WORD **)v1 + 5) == v2)
      {
        this = (SLLexerInstance *)SLLexerInstance::Refill(v1);
        v2 = (_WORD *)*((_QWORD *)v1 + 3);
      }
    }
  }
  if (v3 > 0xA0)
  {
    if ((unsigned __int16)(SLChar::sLexFold[*v2 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v2 >> 6] << 6)]
                          + *v2) == 8239)
      goto LABEL_15;
  }
  else
  {
    v5 = (unsigned __int16)(SLChar::sLexFold[*v2 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v2 >> 6] << 6)]
                          + *v2);
    if (v5 < 0x21 || v5 == 160)
      goto LABEL_15;
  }
LABEL_29:
  *((_QWORD *)v1 + 3) = v2;
  return this;
}

BOOL SLLexerImpl::SkipToNextAttr(SLLexerImpl *this, char a2)
{
  char v3;
  _WORD *v4;
  unsigned __int16 v5;
  BOOL v6;
  unsigned int v7;
  _WORD *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  _WORD *v12;
  _BOOL8 result;

  while (1)
  {
    v3 = a2;
LABEL_2:
    v4 = (_WORD *)*((_QWORD *)this + 3);
    if ((uint64_t)(*((_QWORD *)this + 5) - (_QWORD)v4) <= 3)
    {
      SLLexerInstance::Refill(this);
      v4 = (_WORD *)*((_QWORD *)this + 3);
    }
    v5 = SLChar::sLexFold[*v4 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v4 >> 6] << 6)] + *v4;
    if (v5 <= 0x20u)
      break;
    if (v5 <= 0x7Du)
    {
      if ((unsigned __int16)(SLChar::sLexFold[*v4 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v4 >> 6] << 6)]
                            + *v4) == 59)
      {
        ++v4;
        goto LABEL_40;
      }
      if ((unsigned __int16)(SLChar::sLexFold[*v4 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v4 >> 6] << 6)]
                            + *v4) >= 0x7Du)
        goto LABEL_40;
    }
    else
    {
      v6 = (unsigned __int16)(SLChar::sLexFold[*v4 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v4 >> 6] << 6)]
                            + *v4) == 160;
      if ((unsigned __int16)(SLChar::sLexFold[*v4 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v4 >> 6] << 6)]
                            + *v4) > 0xA0u)
        v6 = v5 == 8239;
      if (v6)
        goto LABEL_19;
    }
LABEL_35:
    *((_QWORD *)this + 3) = v4 + 1;
    a2 = 1;
    if ((v3 & 1) == 0)
    {
      SLLexerImpl::Error(this);
      a2 = 1;
    }
  }
  if (v5 <= 0xCu)
  {
    if (!(SLChar::sLexFold[*v4 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v4 >> 6] << 6)] + *v4))
      goto LABEL_37;
    if ((unsigned __int16)(v5 - 11) >= 0xFFFEu)
    {
LABEL_19:
      v8 = v4 + 1;
      *((_QWORD *)this + 3) = v8;
      while (1)
      {
        v9 = (unsigned __int16)(SLChar::sLexFold[*v8 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v8 >> 6] << 6)]
                              + *v8);
        if (v9 > 0x1F)
        {
          if (v9 > 0xA0)
          {
            if ((unsigned __int16)(SLChar::sLexFold[*v8 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v8 >> 6] << 6)]
                                  + *v8) != 8239)
              goto LABEL_2;
          }
          else
          {
            v11 = (unsigned __int16)(SLChar::sLexFold[*v8 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v8 >> 6] << 6)]
                                   + *v8);
            if (v11 >= 0x21 && v11 != 160)
              goto LABEL_2;
          }
        }
        else
        {
          v10 = (unsigned __int16)(SLChar::sLexFold[*v8 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v8 >> 6] << 6)]
                                 + *v8);
          if (v9 <= 0xA)
          {
            if (v10 < 9)
              goto LABEL_2;
          }
          else if (v10 != 13)
          {
            goto LABEL_2;
          }
        }
        *((_QWORD *)this + 3) = ++v8;
        if (*((_WORD **)this + 5) == v8)
        {
          SLLexerInstance::Refill(this);
          v8 = (_WORD *)*((_QWORD *)this + 3);
        }
      }
    }
    goto LABEL_35;
  }
  v7 = (unsigned __int16)(SLChar::sLexFold[*v4 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v4 >> 6] << 6)]
                        + *v4);
  if (v7 <= 0xF)
  {
    if (v7 < 0xE)
      goto LABEL_19;
    goto LABEL_35;
  }
  if (v7 != 16)
  {
    if ((unsigned __int16)(SLChar::sLexFold[*v4 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v4 >> 6] << 6)]
                          + *v4) >= 0x20u)
      goto LABEL_19;
    goto LABEL_35;
  }
LABEL_37:
  v12 = v4 + 1;
  *((_QWORD *)this + 3) = v12;
  if ((v3 & 1) == 0)
  {
    SLLexerImpl::Error(this);
    v12 = (_WORD *)*((_QWORD *)this + 3);
  }
  v4 = v12 - 1;
LABEL_40:
  result = v5 > 0x20u;
  *((_QWORD *)this + 3) = v4;
  return result;
}

BOOL SLLexerImpl::AttrError(SLLexerImpl *this)
{
  SLLexerImpl::Error(this);
  return SLLexerImpl::SkipToNextAttr(this, 1);
}

float SLLexerImpl::ScanFloat(unsigned __int16 **this)
{
  unsigned __int16 *v2;
  float v3;
  float v4;
  unint64_t v5;
  float v6;

  SLLexerImpl::SkipSpaces((SLLexerInstance *)this);
  v2 = this[3];
  v3 = 0.0;
  v4 = 0.0;
  while (1)
  {
    while (1)
    {
      if (this[5] == v2)
      {
        SLLexerInstance::Refill((SLLexerInstance *)this);
        v2 = this[3];
      }
      v5 = *v2;
      if ((unsigned __int16)(SLChar::sLexFold[v5 & 0x3F | (SLChar::sUniMap[v5 >> 6] << 6)] + v5) != 46)
        break;
      this[3] = ++v2;
      v3 = 1.0;
    }
    if ((unsigned __int16)(SLChar::sLexFold[v5 & 0x3F | (SLChar::sUniMap[v5 >> 6] << 6)] + v5 - 48) >= 0xAu)
      break;
    this[3] = ++v2;
    v6 = (float)((int)v5 - 48);
    if (v3 > 0.0)
    {
      v3 = v3 * 0.1;
      v4 = v4 + (float)(v6 * v3);
    }
    else
    {
      v4 = v6 + (float)(v4 * 10.0);
    }
  }
  this[3] = v2;
  SLLexerImpl::SkipSpaces((SLLexerInstance *)this);
  return v4;
}

SLLexerInstance *SLLexerImpl::ScanWord(SLLexerImpl *this, SLToken *a2)
{
  _WORD *v4;
  int v5;
  void **v6;
  _WORD *v7;
  unint64_t v8;
  __int16 v9;
  unsigned __int16 v10;
  uint64_t v11;
  unsigned __int16 v12;
  __int16 v13;
  BOOL v14;
  unint64_t v15;
  unsigned __int16 *v16;
  _WORD *v17;
  unsigned __int16 *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  unsigned __int16 *v25;
  unsigned __int16 v26;

  SLLexerImpl::SkipSpaces(this);
  v4 = (_WORD *)*((_QWORD *)this + 3);
  v5 = (unsigned __int16)(SLChar::sLexFold[*v4 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v4 >> 6] << 6)]
                        + *v4);
  if (v5 == 39 || v5 == 34)
    *((_QWORD *)this + 3) = ++v4;
  else
    v5 = 32;
  v6 = (void **)((char *)a2 + 56);
  while (1)
  {
    if ((uint64_t)(*((_QWORD *)this + 5) - (_QWORD)v4) <= 1)
    {
      SLLexerInstance::Refill(this);
      v4 = (_WORD *)*((_QWORD *)this + 3);
    }
    v7 = v4 + 1;
    v8 = (unsigned __int16)*v4;
    *((_QWORD *)this + 3) = v4 + 1;
    v9 = SLChar::sLexFold[v8 & 0x3F | (SLChar::sUniMap[v8 >> 6] << 6)] + v8;
    v10 = v9 == 9 ? 32 : v9;
    if (v5 == v10)
      return SLLexerImpl::SkipSpaces(this);
    if (v10 <= 0x24u)
    {
      if (v10)
        v14 = v10 == 16;
      else
        v14 = 1;
      if (v14)
      {
LABEL_53:
        *((_QWORD *)this + 3) = v4;
        return SLLexerImpl::SkipSpaces(this);
      }
    }
    else if (v10 == 37)
    {
      if ((uint64_t)(*((_QWORD *)this + 5) - (_QWORD)v7) <= 7)
      {
        SLLexerInstance::Refill(this);
        v7 = (_WORD *)*((_QWORD *)this + 3);
      }
      v11 = 0;
      v10 = 0;
      do
      {
        v12 = SLChar::sLexFold[v7[v11] & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)v7[v11] >> 6] << 6)]
            + v7[v11];
        if (v12 < 0x30u)
          break;
        if (v12 >= 0x3Au)
        {
          if ((unsigned __int16)(SLChar::sLexFold[v7[v11] & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)v7[v11] >> 6] << 6)]
                                + v7[v11]) < 0x61u)
          {
            if ((unsigned __int16)(v12 - 65) > 5u)
              break;
            v13 = -55;
          }
          else
          {
            if ((unsigned __int16)(SLChar::sLexFold[v7[v11] & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)v7[v11] >> 6] << 6)]
                                  + v7[v11]) >= 0x67u)
              break;
            v13 = -87;
          }
        }
        else
        {
          v13 = -48;
        }
        v10 = v13 + 16 * v10 + v12;
        *((_QWORD *)this + 3) = &v7[++v11];
      }
      while ((_DWORD)(v11 * 2) != 8);
    }
    else if (v10 == 125 || v10 == 59)
    {
      goto LABEL_53;
    }
    v16 = (unsigned __int16 *)*((_QWORD *)a2 + 8);
    v15 = *((_QWORD *)a2 + 9);
    if ((unint64_t)v16 >= v15)
    {
      v18 = (unsigned __int16 *)*v6;
      v19 = (char *)v16 - (_BYTE *)*v6;
      if (v19 <= -3)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v20 = v19 >> 1;
      v21 = v15 - (_QWORD)v18;
      if (v21 <= (v19 >> 1) + 1)
        v22 = v20 + 1;
      else
        v22 = v21;
      if (v21 >= 0x7FFFFFFFFFFFFFFELL)
        v23 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v23 = v22;
      if (v23)
      {
        v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)a2 + 72, v23);
        v18 = (unsigned __int16 *)*((_QWORD *)a2 + 7);
        v16 = (unsigned __int16 *)*((_QWORD *)a2 + 8);
      }
      else
      {
        v24 = 0;
      }
      v25 = (unsigned __int16 *)&v24[2 * v20];
      *v25 = v10;
      v17 = v25 + 1;
      while (v16 != v18)
      {
        v26 = *--v16;
        *--v25 = v26;
      }
      *((_QWORD *)a2 + 7) = v25;
      *((_QWORD *)a2 + 8) = v17;
      *((_QWORD *)a2 + 9) = &v24[2 * v23];
      if (v18)
        operator delete(v18);
    }
    else
    {
      *v16 = v10;
      v17 = v16 + 1;
    }
    *((_QWORD *)a2 + 8) = v17;
    v4 = (_WORD *)*((_QWORD *)this + 3);
  }
}

SLLexerInstance *SLLexerImpl::ScanIdent(SLLexerImpl *this, char *a2, uint64_t a3)
{
  _WORD *v6;
  int v7;
  unint64_t v8;
  unsigned __int16 v9;
  BOOL v10;

  SLLexerImpl::SkipSpaces(this);
  v6 = (_WORD *)*((_QWORD *)this + 3);
  v7 = (unsigned __int16)(SLChar::sLexFold[*v6 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v6 >> 6] << 6)]
                        + *v6);
  if (v7 == 39 || v7 == 34)
    *((_QWORD *)this + 3) = ++v6;
  else
    v7 = 32;
  while (1)
  {
    if ((uint64_t)(*((_QWORD *)this + 5) - (_QWORD)v6) <= 1)
    {
      SLLexerInstance::Refill(this);
      v6 = (_WORD *)*((_QWORD *)this + 3);
    }
    v8 = (unsigned __int16)*v6;
    *((_QWORD *)this + 3) = v6 + 1;
    v9 = SLChar::sLexFold[v8 & 0x3F | (SLChar::sUniMap[v8 >> 6] << 6)] + v8;
    if (v9 == 9)
      v9 = 32;
    if (v7 == v9)
      break;
    if (v9 > 0x100u || (v9 <= 0x3Bu ? (v10 = ((1 << v9) & 0x800000000010001) == 0) : (v10 = 1), !v10 || v9 == 125))
    {
      *((_QWORD *)this + 3) = v6;
      break;
    }
    if (!a3)
      break;
    --a3;
    *a2++ = v9;
    v6 = (_WORD *)*((_QWORD *)this + 3);
  }
  *a2 = 0;
  return SLLexerImpl::SkipSpaces(this);
}

_QWORD *SLLexerImpl::NextTuneToken(SLLexerImpl *this)
{
  _WORD *v2;
  char v3;
  unsigned __int16 *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  int v8;
  SLHomograph *v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  _BYTE *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unint64_t v17;
  size_t v18;
  char *v19;
  char *v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  unsigned __int8 v23;
  uint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  _WORD *v37;
  unsigned __int16 v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  float v45;
  BOOL Attr;
  int v47;
  unsigned int v48;
  int v50;
  _WORD *v51;
  uint64_t v52;
  uint64_t v53;
  float v54;
  _WORD *v55;
  float v56;
  float v57;
  float v58;
  uint64_t v59;
  float *v60;
  unint64_t v61;
  _DWORD *v62;
  float *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  _WORD *v72;
  unsigned int v73;
  unsigned int v74;
  int v75;
  unsigned __int16 *v77;
  _WORD *v78;
  unsigned __int16 v79;
  int v81;
  SLHomograph *v82;
  int v83;
  SLHomograph *v84;
  unint64_t v85;
  SLHomograph **v86;
  _QWORD *v87;
  _WORD *v88;
  SLHomograph *v89;
  SLHomograph *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  SLHomograph *v101;
  SLHomograph *v102;
  SLHomograph *v103;
  unint64_t v104;
  unsigned __int8 *v105;
  _BYTE *v106;
  unint64_t v107;
  unsigned __int8 *v108;
  uint64_t v109;
  unint64_t v110;
  size_t v111;
  size_t v112;
  char *v113;
  char *v114;
  unsigned __int8 *v115;
  unsigned __int8 *v116;
  unsigned __int8 v117;
  uint64_t *v118;
  unint64_t v119;
  uint64_t v120;
  void *v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  char *v125;
  void **v126;
  char *v127;
  unint64_t v128;
  float v129;
  _QWORD *CommandToken;
  float v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _WORD *v135;
  char *v136;
  char *v137;
  uint64_t v138;
  _WORD *v139;
  __int16 v140;
  unint64_t v141;
  _WORD *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  char *v151;
  __int16 v152;
  float v154;
  int v155;
  unsigned __int8 **v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  SLToken *v160;
  int v161;
  void *__p[2];
  uint64_t v163;
  unsigned __int8 v164;
  SLHomograph *v165;
  char v166[8];
  void *v167[2];
  char *v168;
  uint64_t *v169;
  uint64_t v170;

  v158 = 0;
  v160 = 0;
  v170 = *MEMORY[0x24BDAC8D0];
  v165 = 0;
  v164 = 0;
  v2 = (_WORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 8) = v2;
  v3 = 1;
  while (1)
  {
    if ((uint64_t)(*((_QWORD *)this + 5) - (_QWORD)v2) <= 3)
      SLLexerInstance::Refill(this);
    if (*((_BYTE *)this + 120))
      break;
    v4 = (unsigned __int16 *)*((_QWORD *)this + 3);
    v5 = *v4;
    v6 = v5 >> 6;
    v7 = v5 & 0x3F;
    if ((unsigned __int16)(SLChar::sLexFold[v7 | (SLChar::sUniMap[v5 >> 6] << 6)] + v5) == 123)
    {
      *((_QWORD *)this + 3) = v4 + 1;
      *((_BYTE *)this + 120) = 32;
      while (1)
      {
LABEL_45:
        v37 = (_WORD *)*((_QWORD *)this + 3);
        if ((uint64_t)(*((_QWORD *)this + 5) - (_QWORD)v37) <= 3)
        {
          SLLexerInstance::Refill(this);
          v37 = (_WORD *)*((_QWORD *)this + 3);
        }
        v38 = SLChar::sLexFold[*v37 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v37 >> 6] << 6)]
            + *v37;
        if (v38 <= 0x55u)
          break;
        if (v38 > 0x72u)
        {
          v42 = (unsigned __int16)(SLChar::sLexFold[*v37 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v37 >> 6] << 6)]
                                 + *v37);
          if (v42 > 0x7D)
          {
            if (v42 <= 0xA0)
            {
              if ((unsigned __int16)(SLChar::sLexFold[*v37 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v37 >> 6] << 6)]
                                    + *v37) == 160)
                goto LABEL_130;
              goto LABEL_155;
            }
            if (v38 != 8239)
            {
LABEL_155:
              *((_QWORD *)this + 3) = v37 + 1;
              SLLexerImpl::Error(this);
              Attr = SLLexerImpl::SkipToNextAttr(this, 1);
              goto LABEL_156;
            }
LABEL_130:
            v72 = v37 + 1;
            *((_QWORD *)this + 3) = v72;
LABEL_131:
            v73 = (unsigned __int16)(SLChar::sLexFold[*v72 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v72 >> 6] << 6)]
                                   + *v72);
            if (v73 > 0x20)
            {
              v75 = (unsigned __int16)(SLChar::sLexFold[*v72 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v72 >> 6] << 6)]
                                     + *v72);
              if (v73 > 0x9F)
              {
                if (v75 != 160 && v75 != 8239)
                  continue;
              }
              else if (v75 != 59)
              {
                continue;
              }
            }
            else if (v73 <= 0xC)
            {
              if ((unsigned __int16)(SLChar::sLexFold[*v72 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v72 >> 6] << 6)]
                                    + *v72
                                    - 9) >= 2u)
                continue;
            }
            else
            {
              v74 = (unsigned __int16)(SLChar::sLexFold[*v72 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v72 >> 6] << 6)]
                                     + *v72);
              if (v74 == 13)
              {
                *((_QWORD *)this + 3) = ++v72;
                if (*((_WORD **)this + 5) != v72)
                  goto LABEL_131;
LABEL_148:
                SLLexerInstance::Refill(this);
                v72 = (_WORD *)*((_QWORD *)this + 3);
                goto LABEL_131;
              }
              if (v74 < 0x20)
                continue;
            }
            *((_QWORD *)this + 3) = ++v72;
            if (*((_WORD **)this + 5) != v72)
              goto LABEL_131;
            goto LABEL_148;
          }
          v43 = (unsigned __int16)(SLChar::sLexFold[*v37 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v37 >> 6] << 6)]
                                 + *v37);
          if (v42 <= 0x76)
          {
            if (v43 != 118)
              goto LABEL_155;
LABEL_65:
            *((_QWORD *)this + 3) = v37 + 1;
            if (!v160)
            {
              *((_BYTE *)this + 120) = 86;
              v131 = SLLexerImpl::ScanFloat((unsigned __int16 **)this);
              return (_QWORD *)SLLexerInstance::CreateCommandToken(this, 1650879602, (float)(v131 * 100.0));
            }
            goto LABEL_158;
          }
          if (v43 != 119)
          {
            if (v43 >= 0x7D)
            {
              v88 = v37 + 1;
              goto LABEL_192;
            }
            goto LABEL_155;
          }
          goto LABEL_87;
        }
        v40 = (unsigned __int16)(SLChar::sLexFold[*v37 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v37 >> 6] << 6)]
                               + *v37);
        if (v40 > 0x65)
        {
          if (v40 <= 0x6F)
          {
            if (v40 >= 0x67)
              goto LABEL_155;
LABEL_150:
            *((_QWORD *)this + 3) = v37 + 1;
            if (!v160)
            {
              CommandToken = (_QWORD *)SLLexerInstance::CreateCommandToken(this, 1952869496, 1);
              SLLexerImpl::SkipToNextAttr(this, 0);
              return CommandToken;
            }
            goto LABEL_158;
          }
          if (v40 != 112)
          {
            if (v40 < 0x72)
              goto LABEL_155;
            goto LABEL_157;
          }
LABEL_105:
          *((_QWORD *)this + 3) = v37 + 1;
          if (!v160)
            goto LABEL_158;
          SLLexerImpl::SkipSpaces(this);
          while ((unsigned __int16)(SLChar::sLexFold[**((_WORD **)this + 3) & 0x3F | (SLChar::sUniMap[(unint64_t)**((unsigned __int16 **)this + 3) >> 6] << 6)]
                                   + **((_WORD **)this + 3)) <= 0xFFu
               && (*(_DWORD *)(MEMORY[0x24BDAC740]
                             + 4
                             * (unsigned __int16)(SLChar::sLexFold[**((_WORD **)this + 3) & 0x3F | (SLChar::sUniMap[(unint64_t)**((unsigned __int16 **)this + 3) >> 6] << 6)]
                                                + **((_WORD **)this + 3))
                             + 60) & 0x400) != 0)
          {
            v54 = SLLexerImpl::ScanFloat((unsigned __int16 **)this);
            v55 = (_WORD *)*((_QWORD *)this + 3);
            if ((unsigned __int16)(SLChar::sLexFold[*v55 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v55 >> 6] << 6)]
                                  + *v55) != 58)
              goto LABEL_158;
            v56 = v54;
            *((_QWORD *)this + 3) = v55 + 1;
            v57 = SLLexerImpl::ScanFloat((unsigned __int16 **)this);
            v58 = v57;
            v59 = *((_QWORD *)v165 + 8);
            v60 = *(float **)(v59 - 16);
            v61 = *(_QWORD *)(v59 - 8);
            if ((unint64_t)v60 >= v61)
            {
              v63 = *(float **)(v59 - 24);
              v64 = ((char *)v60 - (char *)v63) >> 3;
              v65 = v64 + 1;
              if ((unint64_t)(v64 + 1) >> 61)
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              v66 = v61 - (_QWORD)v63;
              if (v66 >> 2 > v65)
                v65 = v66 >> 2;
              if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8)
                v67 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v67 = v65;
              if (v67)
              {
                v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SLHomograph *>>(v59 - 8, v67);
                v63 = *(float **)(v59 - 24);
                v60 = *(float **)(v59 - 16);
              }
              else
              {
                v68 = 0;
              }
              v69 = &v68[8 * v64];
              *(float *)v69 = v56;
              *((float *)v69 + 1) = v58;
              v70 = v69;
              if (v60 != v63)
              {
                do
                {
                  v71 = *((_QWORD *)v60 - 1);
                  v60 -= 2;
                  *((_QWORD *)v70 - 1) = v71;
                  v70 -= 8;
                }
                while (v60 != v63);
                v63 = *(float **)(v59 - 24);
              }
              v62 = v69 + 8;
              *(_QWORD *)(v59 - 24) = v70;
              *(_QWORD *)(v59 - 16) = v69 + 8;
              *(_QWORD *)(v59 - 8) = &v68[8 * v67];
              if (v63)
                operator delete(v63);
            }
            else
            {
              *v60 = v56;
              v60[1] = v57;
              v62 = v60 + 2;
            }
            *(_QWORD *)(v59 - 16) = v62;
            SLLexerImpl::SkipSpaces(this);
          }
        }
        else
        {
          if (v40 > 0x57)
          {
            if (v40 != 100)
              goto LABEL_155;
LABEL_84:
            *((_QWORD *)this + 3) = v37 + 1;
            if (v160)
            {
              v45 = SLLexerImpl::ScanFloat((unsigned __int16 **)this);
              *(float *)(*((_QWORD *)v165 + 8) - 32) = v45;
              Attr = SLLexerImpl::SkipToNextAttr(this, 0);
              goto LABEL_156;
            }
            goto LABEL_158;
          }
          if (v40 != 87)
            goto LABEL_65;
LABEL_87:
          *((_QWORD *)this + 3) = v37 + 1;
          if (v160)
          {
            SLLexerImpl::ScanWord(this, v160);
            SLLexerImpl::ScanIdent(this, v166, 63);
            if (v166[0])
            {
              v47 = (*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this + 16) + 56))(*((_QWORD *)this + 16), v166);
              if (v47 != 255)
                *(_DWORD *)v165 = 1 << v47;
              while (v166[0])
              {
                v48 = (unsigned __int16)(SLChar::sLexFold[**((_WORD **)this + 3) & 0x3F | (SLChar::sUniMap[(unint64_t)**((unsigned __int16 **)this + 3) >> 6] << 6)]
                                       + **((_WORD **)this + 3));
                if (v48 <= 0x3B
                  && ((1 << (LOBYTE(SLChar::sLexFold[**((_WORD **)this + 3) & 0x3F | (SLChar::sUniMap[(unint64_t)**((unsigned __int16 **)this + 3) >> 6] << 6)])
                             + **((_BYTE **)this + 3))) & 0x800000000010001) != 0)
                {
                  break;
                }
                if (v48 == 125)
                  break;
                SLLexerImpl::ScanIdent(this, v166, 63);
                if (!v166[0])
                  break;
                v50 = (*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this + 16) + 64))(*((_QWORD *)this + 16), v166);
                if (v50)
                {
                  v51 = (_WORD *)((char *)v165 + 4);
                  v52 = *((unsigned __int16 *)v165 + 2);
                  if (v52 <= 6)
                  {
                    v53 = v52 + 1;
                    *v51 = v53;
                    v51[v53] = v50;
                  }
                }
              }
            }
          }
          else
          {
LABEL_158:
            SLLexerImpl::Error(this);
            Attr = SLLexerImpl::SkipToNextAttr(this, 1);
LABEL_156:
            v3 = Attr;
          }
        }
      }
      if (v38 > 0x3Au)
      {
        v41 = (unsigned __int16)(SLChar::sLexFold[*v37 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v37 >> 6] << 6)]
                               + *v37);
        if (v41 <= 0x46)
        {
          if (v41 <= 0x43)
          {
            if (v41 <= 0x3B)
              goto LABEL_130;
            goto LABEL_155;
          }
          if (v41 == 68)
            goto LABEL_84;
          if (v41 < 0x46)
            goto LABEL_155;
          goto LABEL_150;
        }
        if (v41 > 0x50)
        {
          if (v41 != 82)
            goto LABEL_155;
LABEL_157:
          *((_QWORD *)this + 3) = v37 + 1;
          if (!v160)
          {
            v154 = SLLexerImpl::ScanFloat((unsigned __int16 **)this);
            CommandToken = (_QWORD *)SLLexerInstance::CreateCommandToken(this, 1651668069, (float)(v154 * 100.0));
            SLLexerImpl::SkipToNextAttr(this, 0);
            return CommandToken;
          }
          goto LABEL_158;
        }
        if (v41 != 80)
          goto LABEL_155;
        goto LABEL_105;
      }
      v39 = (unsigned __int16)(SLChar::sLexFold[*v37 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v37 >> 6] << 6)]
                             + *v37);
      if (v39 <= 0xD)
      {
        if (v39 > 8)
        {
          if ((unsigned __int16)(v38 - 11) >= 2u)
            goto LABEL_130;
        }
        else if (!(SLChar::sLexFold[*v37 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v37 >> 6] << 6)]
                  + *v37))
        {
          goto LABEL_165;
        }
        goto LABEL_155;
      }
      v44 = (unsigned __int16)(SLChar::sLexFold[*v37 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v37 >> 6] << 6)]
                             + *v37);
      if (v39 > 0x10)
      {
        if (v44 == 32)
          goto LABEL_130;
        goto LABEL_155;
      }
      if (v44 != 16)
        goto LABEL_155;
LABEL_165:
      v78 = v37 + 1;
      *((_QWORD *)this + 3) = v78;
      if ((v3 & 1) != 0)
      {
        SLLexerImpl::Error(this);
        v78 = (_WORD *)*((_QWORD *)this + 3);
      }
      v88 = v78 - 1;
LABEL_192:
      *((_QWORD *)this + 3) = v88;
      *((_BYTE *)this + 120) = 0;
      SLLexerImpl::SkipSpaces(this);
      v2 = (_WORD *)*((_QWORD *)this + 3);
    }
    else if (v160)
    {
      v8 = (*(uint64_t (**)(_QWORD, _QWORD, unsigned __int8 *))(**((_QWORD **)this + 16) + 16))(*((_QWORD *)this + 16), *((_QWORD *)this + 3), &v164);
      if (v8
        && ((*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 16) + 32))(*((_QWORD *)this + 16), v164) & 1) != 0
        || (v9 = v165, *(_DWORD *)v165 == 0x80000000))
      {
LABEL_252:
        CommandToken = v160;
        v125 = (char *)*((_QWORD *)v160 + 7);
        v127 = (char *)*((_QWORD *)v160 + 8);
        v126 = (void **)((char *)v160 + 56);
        if (v125 == v127)
        {
          v128 = *((_QWORD *)v160 + 9);
          if ((unint64_t)v125 >= v128)
          {
            v132 = v128 - (_QWORD)v125;
            if (v132 <= 1)
              v133 = 1;
            else
              v133 = v132;
            if (v132 >= 0x7FFFFFFFFFFFFFFELL)
              v134 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v134 = v133;
            v135 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)v160 + 72, v134);
            CommandToken = v160;
            v136 = (char *)*((_QWORD *)v160 + 7);
            v137 = (char *)*((_QWORD *)v160 + 8);
            v139 = &v135[v138];
            *v135 = 9835;
            v127 = (char *)(v135 + 1);
            while (v137 != v136)
            {
              v140 = *((_WORD *)v137 - 1);
              v137 -= 2;
              *--v135 = v140;
            }
            *((_QWORD *)v160 + 7) = v135;
            *((_QWORD *)v160 + 8) = v127;
            *((_QWORD *)v160 + 9) = v139;
            if (v136)
              operator delete(v136);
          }
          else
          {
            *(_WORD *)v125 = 9835;
            v127 = v125 + 2;
          }
          CommandToken[8] = v127;
        }
        v141 = CommandToken[9];
        if ((unint64_t)v127 >= v141)
        {
          v143 = (char *)*v126;
          v144 = v127 - (_BYTE *)*v126;
          if (v144 <= -3)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v145 = v144 >> 1;
          v146 = v141 - (_QWORD)v143;
          if (v146 <= (v144 >> 1) + 1)
            v147 = v145 + 1;
          else
            v147 = v146;
          if (v146 >= 0x7FFFFFFFFFFFFFFELL)
            v148 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v148 = v147;
          if (v148)
          {
            v149 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)(CommandToken + 9), v148);
            CommandToken = v160;
            v143 = (char *)*((_QWORD *)v160 + 7);
            v127 = (char *)*((_QWORD *)v160 + 8);
          }
          else
          {
            v149 = 0;
          }
          v150 = &v149[2 * v145];
          v151 = &v149[2 * v148];
          *(_WORD *)v150 = 0;
          v142 = v150 + 2;
          while (v127 != v143)
          {
            v152 = *((_WORD *)v127 - 1);
            v127 -= 2;
            *((_WORD *)v150 - 1) = v152;
            v150 -= 2;
          }
          CommandToken[7] = v150;
          CommandToken[8] = v142;
          CommandToken[9] = v151;
          if (v143)
            operator delete(v143);
        }
        else
        {
          *(_WORD *)v127 = 0;
          v142 = v127 + 2;
        }
        CommandToken[8] = v142;
        CommandToken[4] = v158;
        CommandToken[5] = ((*((_QWORD *)this + 3) + 2 * *((int *)this + 4) - *((_QWORD *)this + 4)) >> 1) - v158;
        return CommandToken;
      }
      if (v8 == 2)
      {
        v10 = *((_QWORD *)this + 3) + 2;
        *((_QWORD *)this + 3) = v10;
      }
      else
      {
        if (v8 != 1)
          goto LABEL_252;
        v10 = *((_QWORD *)this + 3);
      }
      *((_QWORD *)this + 3) = v10 + 2;
      v12 = (unsigned __int8 *)*((_QWORD *)v9 + 5);
      v11 = *((_QWORD *)v9 + 6);
      if ((unint64_t)v12 >= v11)
      {
        v14 = *((_QWORD *)v9 + 4);
        v15 = &v12[-v14];
        v16 = (uint64_t)&v12[-v14 + 1];
        if (v16 < 0)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v17 = v11 - v14;
        if (2 * v17 > v16)
          v16 = 2 * v17;
        if (v17 >= 0x3FFFFFFFFFFFFFFFLL)
          v18 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        if (v18)
          v19 = (char *)operator new(v18);
        else
          v19 = 0;
        v20 = (char *)&v15[(_QWORD)v19];
        v21 = &v15[(_QWORD)v19];
        *v21 = v164;
        v13 = v21 + 1;
        if (v12 != (unsigned __int8 *)v14)
        {
          v22 = &v12[~v14];
          do
          {
            v23 = *--v12;
            (v22--)[(_QWORD)v19] = v23;
          }
          while (v12 != (unsigned __int8 *)v14);
          v12 = (unsigned __int8 *)*((_QWORD *)v9 + 4);
          v20 = v19;
        }
        *((_QWORD *)v9 + 4) = v20;
        *((_QWORD *)v9 + 5) = v13;
        *((_QWORD *)v9 + 6) = &v19[v18];
        if (v12)
          operator delete(v12);
      }
      else
      {
        *v12 = v164;
        v13 = v12 + 1;
      }
      *((_QWORD *)v9 + 5) = v13;
      v24 = (uint64_t *)v165;
      SLPhonTune::SLPhonTune((SLPhonTune *)&v161);
      v25 = v24[9];
      v26 = v24[8];
      if (v26 >= v25)
      {
        v27 = v24[7];
        v28 = (uint64_t)(v26 - v27) >> 5;
        v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 59)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v30 = v25 - v27;
        if (v30 >> 4 > v29)
          v29 = v30 >> 4;
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFE0)
          v31 = 0x7FFFFFFFFFFFFFFLL;
        else
          v31 = v29;
        v169 = v24 + 9;
        v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SLPhonTune>>((uint64_t)(v24 + 9), v31);
        v33 = &v32[32 * v28];
        *(_QWORD *)v166 = v32;
        v167[0] = v33;
        v168 = &v32[32 * v34];
        *(_DWORD *)v33 = v161;
        *((_QWORD *)v33 + 2) = 0;
        *((_QWORD *)v33 + 3) = 0;
        *((_QWORD *)v33 + 1) = 0;
        *(_OWORD *)(v33 + 8) = *(_OWORD *)__p;
        *((_QWORD *)v33 + 3) = v163;
        __p[0] = 0;
        __p[1] = 0;
        v163 = 0;
        v167[1] = v33 + 32;
        std::vector<SLPhonTune>::__swap_out_circular_buffer(v24 + 7, v166);
        v35 = v24[8];
        std::__split_buffer<SLPhonTune>::~__split_buffer((uint64_t)v166);
        v36 = __p[0];
        v24[8] = v35;
        if (v36)
        {
          __p[1] = v36;
          operator delete(v36);
        }
      }
      else
      {
        *(_DWORD *)v26 = v161;
        *(_QWORD *)(v26 + 16) = 0;
        *(_QWORD *)(v26 + 24) = 0;
        *(_QWORD *)(v26 + 8) = 0;
        *(_OWORD *)(v26 + 8) = *(_OWORD *)__p;
        *(_QWORD *)(v26 + 24) = v163;
        v24[8] = v26 + 32;
      }
      SLLexerImpl::SkipSpaces(this);
      v2 = (_WORD *)*((_QWORD *)this + 3);
      *((_QWORD *)this + 8) = v2;
    }
    else
    {
      v157 = *((int *)this + 4);
      v159 = *((_QWORD *)this + 4);
      if ((uint64_t)(*((_QWORD *)this + 5) - (_QWORD)v4) > 3)
      {
        v77 = (unsigned __int16 *)*((_QWORD *)this + 3);
      }
      else
      {
        SLLexerInstance::Refill(this);
        v77 = (unsigned __int16 *)*((_QWORD *)this + 3);
        v5 = *v77;
        v6 = v5 >> 6;
        v7 = v5 & 0x3F;
      }
      v79 = SLChar::sLexFold[v7 | (SLChar::sUniMap[v6] << 6)] + v5;
      if (v79 > 0x10u)
      {
        if (v79 > 0x9Fu)
        {
          if (v79 == 160 || v79 == 8239)
            goto LABEL_185;
        }
        else if (v79 == 32)
        {
          goto LABEL_185;
        }
      }
      else if (v79 > 0xAu)
      {
        if (v79 == 13)
          goto LABEL_185;
        if (v79 >= 0x10u)
        {
          CommandToken = 0;
          *((_QWORD *)this + 3) = v77 + 1;
          v155 = *((_DWORD *)this + 23);
          *((_DWORD *)this + 24) = v155;
          *((_DWORD *)this + 25) = v155;
          *((_DWORD *)this + 23) = 1;
          *((_QWORD *)this + 13) = *((_QWORD *)this + 10);
          return CommandToken;
        }
      }
      else
      {
        if (!v79)
        {
          CommandToken = 0;
          *((_DWORD *)this + 23) &= 0xFFFFFFF0;
          *((_QWORD *)this + 3) = v77;
          return CommandToken;
        }
        if (v79 >= 9u)
        {
LABEL_185:
          v2 = v77 + 1;
          *((_QWORD *)this + 3) = v77 + 1;
          goto LABEL_237;
        }
      }
      *((_QWORD *)this + 3) = v77 + 1;
      v81 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 16))(*((_QWORD *)this + 16));
      switch(v81)
      {
        case 0:
          if (!(*(unsigned int (**)(_QWORD, uint64_t, unsigned __int8 *))(**((_QWORD **)this + 16) + 24))(*((_QWORD *)this + 16), *((_QWORD *)this + 3) - 2, &v164))
          {
            SLLexerImpl::Error(this);
            return 0;
          }
          v160 = (SLToken *)operator new();
          SLToken::SLToken(v160, 9, 64);
          *((_QWORD *)v160 + 3) = "TuneInput";
          std::vector<unsigned short>::push_back[abi:ne180100]((uint64_t)v160 + 56, (_WORD *)(*((_QWORD *)this + 3) - 2));
          strcpy(v166, " ");
          std::vector<unsigned short>::push_back[abi:ne180100]((uint64_t)v160 + 56, v166);
          v89 = (SLHomograph *)operator new();
          SLHomograph::SLHomograph(v89);
          v165 = v89;
          *(_DWORD *)v89 = 0x80000000;
          std::vector<SLHomograph *>::push_back[abi:ne180100]((void **)v160 + 10, &v165);
          std::vector<unsigned char>::push_back[abi:ne180100]((unint64_t *)v165 + 4, &v164);
          v90 = v165;
          SLPhonTune::SLPhonTune((SLPhonTune *)v166);
          std::vector<SLPhonTune>::push_back[abi:ne180100]((uint64_t *)v90 + 7, (uint64_t)v166);
          if (v167[0])
          {
            v167[1] = v167[0];
            operator delete(v167[0]);
          }
          goto LABEL_236;
        case 1:
          goto LABEL_190;
        case 2:
          *((_QWORD *)this + 3) += 2;
LABEL_190:
          v160 = (SLToken *)operator new();
          SLToken::SLToken(v160, 9, 64);
          *((_QWORD *)v160 + 3) = "TuneInput";
          v82 = (SLHomograph *)operator new();
          SLHomograph::SLHomograph(v82);
          v165 = v82;
          v83 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 48))(*((_QWORD *)this + 16));
          v84 = v165;
          *(_DWORD *)v165 = v83;
          v85 = *((_QWORD *)v160 + 12);
          v86 = (SLHomograph **)*((_QWORD *)v160 + 11);
          if ((unint64_t)v86 >= v85)
          {
            v91 = *((_QWORD *)v160 + 10);
            v92 = ((uint64_t)v86 - v91) >> 3;
            if ((unint64_t)(v92 + 1) >> 61)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v93 = v85 - v91;
            v94 = v93 >> 2;
            if (v93 >> 2 <= (unint64_t)(v92 + 1))
              v94 = v92 + 1;
            if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF8)
              v95 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v95 = v94;
            if (v95)
            {
              v96 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SLHomograph *>>((uint64_t)v160 + 96, v95);
              v84 = v165;
            }
            else
            {
              v96 = 0;
            }
            v97 = &v96[8 * v92];
            *(_QWORD *)v97 = v84;
            v87 = v97 + 8;
            v99 = (char *)*((_QWORD *)v160 + 10);
            v98 = (char *)*((_QWORD *)v160 + 11);
            if (v98 != v99)
            {
              do
              {
                v100 = *((_QWORD *)v98 - 1);
                v98 -= 8;
                *((_QWORD *)v97 - 1) = v100;
                v97 -= 8;
              }
              while (v98 != v99);
              v98 = (char *)*((_QWORD *)v160 + 10);
            }
            *((_QWORD *)v160 + 10) = v97;
            *((_QWORD *)v160 + 11) = v87;
            *((_QWORD *)v160 + 12) = &v96[8 * v95];
            if (v98)
              operator delete(v98);
          }
          else
          {
            *v86 = v84;
            v87 = v86 + 1;
          }
          *((_QWORD *)v160 + 11) = v87;
          if (((*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 16) + 32))(*((_QWORD *)this + 16), v164) & 1) == 0)
          {
            v101 = v165;
            v166[0] = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 40))(*((_QWORD *)this + 16));
            std::vector<unsigned char>::push_back[abi:ne180100]((unint64_t *)v101 + 4, v166);
            v102 = v165;
            SLPhonTune::SLPhonTune((SLPhonTune *)v166);
            std::vector<SLPhonTune>::push_back[abi:ne180100]((uint64_t *)v102 + 7, (uint64_t)v166);
            if (v167[0])
            {
              v167[1] = v167[0];
              operator delete(v167[0]);
            }
          }
          v103 = v165;
          v105 = (unsigned __int8 *)*((_QWORD *)v165 + 5);
          v104 = *((_QWORD *)v165 + 6);
          if ((unint64_t)v105 >= v104)
          {
            v156 = (unsigned __int8 **)((char *)v165 + 32);
            v107 = *((_QWORD *)v165 + 4);
            v108 = &v105[-v107];
            v109 = (uint64_t)&v105[-v107 + 1];
            if (v109 < 0)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v110 = v104 - v107;
            if (2 * v110 > v109)
              v109 = 2 * v110;
            if (v110 >= 0x3FFFFFFFFFFFFFFFLL)
              v111 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v111 = v109;
            if (v111)
            {
              v112 = v111;
              v113 = (char *)operator new(v111);
              v111 = v112;
            }
            else
            {
              v113 = 0;
            }
            v114 = (char *)&v108[(_QWORD)v113];
            v115 = &v108[(_QWORD)v113];
            *v115 = v164;
            v106 = v115 + 1;
            if (v105 != (unsigned __int8 *)v107)
            {
              v116 = &v105[~v107];
              do
              {
                v117 = *--v105;
                (v116--)[(_QWORD)v113] = v117;
              }
              while (v105 != (unsigned __int8 *)v107);
              v105 = *v156;
              v114 = v113;
            }
            *((_QWORD *)v103 + 4) = v114;
            *((_QWORD *)v103 + 5) = v106;
            *((_QWORD *)v103 + 6) = &v113[v111];
            if (v105)
              operator delete(v105);
          }
          else
          {
            *v105 = v164;
            v106 = v105 + 1;
          }
          *((_QWORD *)v103 + 5) = v106;
          v118 = (uint64_t *)v165;
          SLPhonTune::SLPhonTune((SLPhonTune *)v166);
          v119 = v118[8];
          if (v119 >= v118[9])
          {
            v120 = std::vector<SLPhonTune>::__push_back_slow_path<SLPhonTune>(v118 + 7, (uint64_t)v166);
            v121 = v167[0];
            v118[8] = v120;
            if (v121)
            {
              v167[1] = v121;
              operator delete(v121);
            }
          }
          else
          {
            *(_DWORD *)v119 = *(_DWORD *)v166;
            *(_QWORD *)(v119 + 16) = 0;
            *(_QWORD *)(v119 + 24) = 0;
            *(_QWORD *)(v119 + 8) = 0;
            *(_OWORD *)(v119 + 8) = *(_OWORD *)v167;
            *(_QWORD *)(v119 + 24) = v168;
            v118[8] = v119 + 32;
          }
LABEL_236:
          SLLexerImpl::SkipSpaces(this);
          v2 = (_WORD *)*((_QWORD *)this + 3);
          goto LABEL_246;
      }
      v2 = (_WORD *)*((_QWORD *)this + 3);
      do
      {
LABEL_248:
        *((_QWORD *)this + 3) = ++v2;
        if (*((_WORD **)this + 5) != v2)
          goto LABEL_237;
LABEL_249:
        SLLexerInstance::Refill(this);
        v2 = (_WORD *)*((_QWORD *)this + 3);
LABEL_237:
        while (1)
        {
          v122 = (unsigned __int16)(SLChar::sLexFold[*v2 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v2 >> 6] << 6)]
                                  + *v2);
          if (v122 > 0x1F)
            break;
          v123 = (unsigned __int16)(SLChar::sLexFold[*v2 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v2 >> 6] << 6)]
                                  + *v2);
          if (v122 <= 0xA)
          {
            if (v123 < 9)
              goto LABEL_245;
            goto LABEL_248;
          }
          if (v123 != 13)
            goto LABEL_245;
          *((_QWORD *)this + 3) = ++v2;
          if (*((_WORD **)this + 5) == v2)
            goto LABEL_249;
        }
        if (v122 > 0xA0)
        {
          if ((unsigned __int16)(SLChar::sLexFold[*v2 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v2 >> 6] << 6)]
                                + *v2) != 8239)
            break;
          goto LABEL_248;
        }
        v124 = (unsigned __int16)(SLChar::sLexFold[*v2 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v2 >> 6] << 6)]
                                + *v2);
      }
      while (v124 < 0x21 || v124 == 160);
LABEL_245:
      v160 = 0;
LABEL_246:
      v158 = ((uint64_t)&v4[v157] - v159) >> 1;
      *((_QWORD *)this + 8) = v2;
    }
  }
  if (*((_BYTE *)this + 120) != 86)
    goto LABEL_45;
  v129 = SLLexerImpl::ScanFloat((unsigned __int16 **)this);
  CommandToken = (_QWORD *)SLLexerInstance::CreateCommandToken(this, 1651666535, (float)(v129 * 100.0));
  *((_BYTE *)this + 120) = 32;
  SLLexerImpl::SkipToNextAttr(this, 0);
  return CommandToken;
}

void sub_2170099B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,void *__p,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<SLPhonTune>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = a1[1];
  if (v3 >= a1[2])
  {
    result = std::vector<SLPhonTune>::__push_back_slow_path<SLPhonTune>(a1, a2);
  }
  else
  {
    *(_DWORD *)v3 = *(_DWORD *)a2;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 24) = 0;
    *(_QWORD *)(v3 + 8) = 0;
    *(_OWORD *)(v3 + 8) = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(v3 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    result = v3 + 32;
  }
  a1[1] = result;
  return result;
}

uint64_t std::vector<SLPhonTune>::__push_back_slow_path<SLPhonTune>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[5];

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v15[4] = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SLPhonTune>>(v7, v9);
  v11 = &v10[32 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[32 * v12];
  *(_DWORD *)v11 = *(_DWORD *)a2;
  *((_QWORD *)v11 + 2) = 0;
  *((_QWORD *)v11 + 3) = 0;
  *((_QWORD *)v11 + 1) = 0;
  *(_OWORD *)(v11 + 8) = *(_OWORD *)(a2 + 8);
  *((_QWORD *)v11 + 3) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v15[2] = v11 + 32;
  std::vector<SLPhonTune>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<SLPhonTune>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_217009B8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<SLPhonTune>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<SLPhonTune>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<SLPhonTune>,std::reverse_iterator<SLPhonTune*>,std::reverse_iterator<SLPhonTune*>,std::reverse_iterator<SLPhonTune*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<SLPhonTune>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(32 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<SLPhonTune>,std::reverse_iterator<SLPhonTune*>,std::reverse_iterator<SLPhonTune*>,std::reverse_iterator<SLPhonTune*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      v8 = *(_DWORD *)(a3 - 32);
      a3 -= 32;
      *(_DWORD *)(v7 - 32) = v8;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<SLPhonTune>,std::reverse_iterator<SLPhonTune*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<SLPhonTune>,std::reverse_iterator<SLPhonTune*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<SLPhonTune>,std::reverse_iterator<SLPhonTune*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<SLPhonTune>,std::reverse_iterator<SLPhonTune*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)(v1 + 8);
    if (v3)
    {
      *(_QWORD *)(v1 + 16) = v3;
      operator delete(v3);
    }
    v1 += 32;
  }
}

uint64_t std::__split_buffer<SLPhonTune>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<SLPhonTune>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<SLPhonTune>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    *(_QWORD *)(a1 + 16) = v2 - 32;
    v5 = *(void **)(v2 - 24);
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 32;
    }
  }
}

uint64_t SLLexerImpl::ScanInt(unsigned __int16 **this)
{
  uint64_t v2;
  unsigned __int16 *v3;
  unint64_t v4;

  SLLexerImpl::SkipSpaces((SLLexerInstance *)this);
  v2 = 0;
  v3 = this[3];
  while (1)
  {
    if (this[5] == v3)
    {
      SLLexerInstance::Refill((SLLexerInstance *)this);
      v3 = this[3];
    }
    v4 = *v3;
    if ((unsigned __int16)(v4 + SLChar::sLexFold[v4 & 0x3F | (SLChar::sUniMap[v4 >> 6] << 6)] - 58) < 0xFFF6u)
      break;
    this[3] = ++v3;
    v2 = (v4 + 10 * v2 - 48);
  }
  this[3] = v3;
  return v2;
}

_QWORD *SLLexerImpl::NextSongToken(SLLexerImpl *this)
{
  _WORD *v2;
  uint64_t v3;
  unsigned __int16 *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unint64_t *v8;
  unsigned __int16 *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned __int16 *v13;
  unsigned __int16 v14;
  char v15;
  unsigned __int16 *v16;
  unsigned int v17;
  unsigned __int16 v18;
  char v19;
  char v20;
  char v21;
  unsigned __int16 *v22;
  unsigned int v23;
  unsigned __int16 v24;
  char v25;
  char v26;
  unint64_t v27;
  char *v28;
  char *v29;
  unint64_t v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  size_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  char v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  unint64_t v45;
  unint64_t v46;
  size_t v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  char v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  unint64_t v59;
  unint64_t v60;
  size_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  char v65;
  _WORD *v66;
  unsigned int v67;
  unsigned int v68;
  int v69;
  unsigned int v71;
  unsigned __int16 *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unsigned __int16 v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  BOOL v85;
  unint64_t *v86;
  _QWORD *Token;
  unint64_t **v88;
  unint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  unsigned __int16 **v102;
  unsigned int v103;
  _WORD *v106;
  unsigned int v107;
  unsigned __int16 v108;
  int v109;
  unsigned __int16 v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v114;
  unsigned int v115;
  int v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v122;
  int v123;
  char v125;
  unint64_t *v126;
  unint64_t *v127;
  char v128;

  v2 = (_WORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 8) = v2;
  v3 = MEMORY[0x24BDAC740];
  while (1)
  {
    if ((uint64_t)(*((_QWORD *)this + 5) - (_QWORD)v2) <= 3)
      SLLexerInstance::Refill(this);
    if (*((_BYTE *)this + 120))
      goto LABEL_7;
    v4 = (unsigned __int16 *)*((_QWORD *)this + 3);
    v5 = *v4;
    v6 = v5 >> 6;
    v7 = v5 & 0x3F;
    if ((unsigned __int16)(SLChar::sLexFold[v7 | (SLChar::sUniMap[v5 >> 6] << 6)] + v5) != 123)
    {
      if ((uint64_t)(*((_QWORD *)this + 5) - (_QWORD)v4) <= 3)
      {
        SLLexerInstance::Refill(this);
        v4 = (unsigned __int16 *)*((_QWORD *)this + 3);
        v5 = *v4;
        v6 = v5 >> 6;
        v7 = v5 & 0x3F;
      }
      v81 = SLChar::sLexFold[v7 | (SLChar::sUniMap[v6] << 6)] + v5;
      if (v81 > 0xA0u)
      {
        if (v81 > 0x2BDu)
        {
          if ((unsigned __int16)(v81 >> 2) <= 0x806u)
          {
            if ((unsigned __int16)(v81 >> 3) > 0x402u)
            {
              if (v81 == 8218)
                goto LABEL_251;
            }
            else if (v81 != 756)
            {
              goto LABEL_251;
            }
          }
          else
          {
            if (v81 <= 0x2031u)
            {
              if (v81 != 8239)
                goto LABEL_251;
              goto LABEL_167;
            }
            if (v81 != 8242 && v81 != 8245)
              goto LABEL_251;
          }
          goto LABEL_234;
        }
        if (v81 > 0xC6u)
        {
          if (v81 > 0xE5u)
          {
            if (v81 != 230)
            {
              if (v81 >= 0x2BBu)
                goto LABEL_234;
LABEL_251:
              *((_QWORD *)this + 3) = v4 + 1;
LABEL_252:
              SLLexerImpl::Error(this);
              return 0;
            }
          }
          else if (v81 != 224)
          {
            goto LABEL_251;
          }
        }
        else if (v81 > 0xBFu)
        {
          if (v81 != 192 && v81 < 0xC6u)
            goto LABEL_251;
        }
        else if (v81 != 176)
        {
          goto LABEL_251;
        }
      }
      else
      {
        if (v81 <= 0x2Bu)
        {
          if (v81 <= 0xFu)
          {
            if (v81 <= 0xAu)
            {
              if (v81)
              {
                if (v81 < 9u)
                  goto LABEL_251;
                goto LABEL_167;
              }
              Token = 0;
              *((_DWORD *)this + 23) &= 0xFFFFFFF0;
              *((_QWORD *)this + 3) = v4;
              return Token;
            }
            if (v81 != 13)
              goto LABEL_251;
            goto LABEL_167;
          }
          if (v81 <= 0x21u)
          {
            if (v81 < 0x11u)
            {
              Token = 0;
              *((_QWORD *)this + 3) = v4 + 1;
              v109 = *((_DWORD *)this + 23);
              *((_DWORD *)this + 24) = v109;
              *((_DWORD *)this + 25) = v109;
              *((_DWORD *)this + 23) = 1;
              *((_QWORD *)this + 13) = *((_QWORD *)this + 10);
              return Token;
            }
            if (v81 < 0x20u)
              goto LABEL_251;
LABEL_167:
            v2 = v4 + 1;
            *((_QWORD *)this + 3) = v2;
            while (1)
            {
              v82 = (unsigned __int16)(SLChar::sLexFold[*v2 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v2 >> 6] << 6)]
                                     + *v2);
              if (v82 > 0x2D)
              {
                if (v82 > 0x3F)
                {
                  v85 = (unsigned __int16)(SLChar::sLexFold[*v2 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v2 >> 6] << 6)]
                                         + *v2) == 160;
                  if ((unsigned __int16)(SLChar::sLexFold[*v2 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v2 >> 6] << 6)]
                                        + *v2) > 0xA0u)
                    v85 = (unsigned __int16)(SLChar::sLexFold[*v2 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v2 >> 6] << 6)]
                                           + *v2) == 8239;
LABEL_184:
                  if (!v85)
                    goto LABEL_134;
                  goto LABEL_186;
                }
                v83 = (unsigned __int16)(SLChar::sLexFold[*v2 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v2 >> 6] << 6)]
                                       + *v2);
                if (v83 > 0x3A)
                {
                  if (v83 != 59
                    && (unsigned __int16)(SLChar::sLexFold[*v2 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v2 >> 6] << 6)]
                                        + *v2) < 0x3Fu)
                  {
                    goto LABEL_134;
                  }
                }
                else if (v83 >= 0x2F)
                {
                  goto LABEL_134;
                }
              }
              else
              {
                if (v82 > 0xD)
                {
                  v84 = (unsigned __int16)(SLChar::sLexFold[*v2 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v2 >> 6] << 6)]
                                         + *v2);
                  if (v84 <= 0x21)
                  {
                    if (v84 < 0x20)
                      goto LABEL_134;
                    goto LABEL_186;
                  }
                  v85 = v84 == 44;
                  goto LABEL_184;
                }
                if ((unsigned __int16)(SLChar::sLexFold[*v2 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v2 >> 6] << 6)]
                                      + *v2) < 9u
                  || (unsigned __int16)(SLChar::sLexFold[*v2 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v2 >> 6] << 6)]
                                      + *v2) >= 0xBu
                  && (unsigned __int16)(SLChar::sLexFold[*v2 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v2 >> 6] << 6)]
                                      + *v2) < 0xDu)
                {
                  goto LABEL_134;
                }
              }
LABEL_186:
              *((_QWORD *)this + 3) = ++v2;
              if (*((_WORD **)this + 5) == v2)
              {
                SLLexerInstance::Refill(this);
                v2 = (_WORD *)*((_QWORD *)this + 3);
              }
            }
          }
          if (v81 != 39)
            goto LABEL_251;
LABEL_234:
          v107 = v4[1];
          v106 = v4 + 1;
          *((_QWORD *)this + 3) = v106;
          v108 = SLChar::sLexFold[v107 & 0x3F | (SLChar::sUniMap[(unint64_t)v107 >> 6] << 6)] + v107;
          if (v108 > 0xBFu)
          {
            if (v108 > 0xDFu)
            {
              if (v108 == 224 || v108 == 230)
              {
                while (1)
                {
                  while (1)
                  {
LABEL_269:
                    *((_QWORD *)this + 3) = ++v106;
                    if (*((_WORD **)this + 5) == v106)
                    {
                      SLLexerInstance::Refill(this);
                      v106 = (_WORD *)*((_QWORD *)this + 3);
                    }
LABEL_257:
                    v110 = SLChar::sLexFold[*v106 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v106 >> 6] << 6)]
                         + *v106;
                    if (v110 > 0xE0u)
                      break;
                    if (v110 > 0xAFu)
                    {
                      v115 = (unsigned __int16)(SLChar::sLexFold[*v106 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v106 >> 6] << 6)]
                                              + *v106);
                      if (v115 > 0xC0)
                      {
                        if (v115 != 198
                          && (unsigned __int16)(SLChar::sLexFold[*v106 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v106 >> 6] << 6)]
                                              + *v106) < 0xE0u)
                        {
                          return (_QWORD *)SLLexerInstance::CreateToken(this, 0, 0);
                        }
                      }
                      else if (v115 >= 0xB1
                             && (unsigned __int16)(SLChar::sLexFold[*v106 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v106 >> 6] << 6)]
                                                 + *v106) != 192)
                      {
                        return (_QWORD *)SLLexerInstance::CreateToken(this, 0, 0);
                      }
                    }
                    else
                    {
                      v111 = (unsigned __int16)(SLChar::sLexFold[*v106 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v106 >> 6] << 6)]
                                              + *v106);
                      if (v111 <= 0x40)
                      {
LABEL_285:
                        if (v111 == 39)
                          goto LABEL_286;
                        return (_QWORD *)SLLexerInstance::CreateToken(this, 0, 0);
                      }
                      v112 = (unsigned __int16)(v110 - 97);
                      if (v111 >= 0x5B && v112 >= 0x1A)
                        return (_QWORD *)SLLexerInstance::CreateToken(this, 0, 0);
                    }
                  }
                  if ((unsigned __int16)(v110 >> 3) > 0x402u)
                    break;
                  v114 = (unsigned __int16)(SLChar::sLexFold[*v106 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v106 >> 6] << 6)]
                                          + *v106);
                  if (v114 > 0x2BA)
                  {
LABEL_329:
                    if (v114 < 0x2BE || v110 == 756)
                      goto LABEL_286;
                    return (_QWORD *)SLLexerInstance::CreateToken(this, 0, 0);
                  }
                  if (v114 != 230)
                    return (_QWORD *)SLLexerInstance::CreateToken(this, 0, 0);
                }
                if (v110 <= 0x2031u)
                  goto LABEL_279;
                v116 = (unsigned __int16)(SLChar::sLexFold[*v106 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v106 >> 6] << 6)]
                                        + *v106);
                if (v116 == 8245 || v116 == 8242)
                {
                  while (1)
                  {
LABEL_286:
                    *((_QWORD *)this + 3) = ++v106;
                    if (*((_WORD **)this + 5) == v106)
                    {
                      SLLexerInstance::Refill(this);
                      v106 = (_WORD *)*((_QWORD *)this + 3);
                    }
                    v117 = (unsigned __int16)(SLChar::sLexFold[*v106 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v106 >> 6] << 6)]
                                            + *v106);
                    if (v117 <= 0xBF)
                    {
                      if (v117 > 0x60)
                      {
                        v119 = (unsigned __int16)(SLChar::sLexFold[*v106 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v106 >> 6] << 6)]
                                                + *v106);
                        if (v119 < 0x7B || v119 == 176)
                          goto LABEL_301;
                      }
                      else if ((unsigned __int16)(SLChar::sLexFold[*v106 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v106 >> 6] << 6)]
                                                 + *v106
                                                 - 65) < 0x1Au)
                      {
                        goto LABEL_301;
                      }
                      return (_QWORD *)SLLexerInstance::CreateToken(this, 0, 0);
                    }
                    v118 = (unsigned __int16)(SLChar::sLexFold[*v106 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v106 >> 6] << 6)]
                                            + *v106);
                    if (v117 <= 0xDF)
                      break;
                    if (v118 != 230 && v118 != 224)
                      return (_QWORD *)SLLexerInstance::CreateToken(this, 0, 0);
                    while (1)
                    {
                      while (1)
                      {
LABEL_301:
                        *((_QWORD *)this + 3) = ++v106;
                        if (*((_WORD **)this + 5) == v106)
                        {
                          SLLexerInstance::Refill(this);
                          v106 = (_WORD *)*((_QWORD *)this + 3);
                        }
                        v110 = SLChar::sLexFold[*v106 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v106 >> 6] << 6)]
                             + *v106;
                        if (v110 > 0xE0u)
                          break;
                        if (v110 > 0xAFu)
                        {
                          v122 = (unsigned __int16)(SLChar::sLexFold[*v106 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v106 >> 6] << 6)]
                                                  + *v106);
                          if (v122 > 0xC0)
                          {
                            if (v122 != 198
                              && (unsigned __int16)(SLChar::sLexFold[*v106 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v106 >> 6] << 6)]
                                                  + *v106) < 0xE0u)
                            {
                              return (_QWORD *)SLLexerInstance::CreateToken(this, 0, 0);
                            }
                          }
                          else if (v122 >= 0xB1
                                 && (unsigned __int16)(SLChar::sLexFold[*v106 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v106 >> 6] << 6)]
                                                     + *v106) != 192)
                          {
                            return (_QWORD *)SLLexerInstance::CreateToken(this, 0, 0);
                          }
                        }
                        else
                        {
                          v111 = (unsigned __int16)(SLChar::sLexFold[*v106 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v106 >> 6] << 6)]
                                                  + *v106);
                          if (v111 <= 0x40)
                            goto LABEL_285;
                          v120 = (unsigned __int16)(v110 - 97);
                          if (v111 >= 0x5B && v120 >= 0x1A)
                            return (_QWORD *)SLLexerInstance::CreateToken(this, 0, 0);
                        }
                      }
                      if ((unsigned __int16)(v110 >> 3) > 0x402u)
                        break;
                      v114 = (unsigned __int16)(SLChar::sLexFold[*v106 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v106 >> 6] << 6)]
                                              + *v106);
                      if (v114 > 0x2BA)
                        goto LABEL_329;
                      if (v114 != 230)
                        return (_QWORD *)SLLexerInstance::CreateToken(this, 0, 0);
                    }
                    if (v110 <= 0x2031u)
                    {
LABEL_279:
                      if (v110 == 8218 || (unsigned __int16)(v110 >> 2) >= 0x807u)
                        return (_QWORD *)SLLexerInstance::CreateToken(this, 0, 0);
                    }
                    else
                    {
                      v123 = (unsigned __int16)(SLChar::sLexFold[*v106 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v106 >> 6] << 6)]
                                              + *v106);
                      if (v123 != 8242 && v123 != 8245)
                        return (_QWORD *)SLLexerInstance::CreateToken(this, 0, 0);
                    }
                  }
                  if (v118 < 0xC1 || v118 == 198)
                    goto LABEL_301;
                }
                return (_QWORD *)SLLexerInstance::CreateToken(this, 0, 0);
              }
            }
            else if (v108 < 0xC1u || v108 == 198)
            {
              goto LABEL_269;
            }
          }
          else if (v108 > 0x60u)
          {
            if (v108 < 0x7Bu || v108 == 176)
              goto LABEL_269;
          }
          else if ((unsigned __int16)(v108 - 65) < 0x1Au)
          {
            goto LABEL_269;
          }
          goto LABEL_252;
        }
        if (v81 <= 0x3Eu)
        {
          if (v81 > 0x2Eu)
          {
            if (v81 != 59)
              goto LABEL_251;
          }
          else if (v81 == 45)
          {
            goto LABEL_251;
          }
          goto LABEL_167;
        }
        if (v81 > 0x5Au)
        {
          if (v81 < 0x61u)
            goto LABEL_251;
          if (v81 >= 0x7Bu)
          {
            if (v81 >= 0xA0u)
              goto LABEL_167;
            goto LABEL_251;
          }
        }
        else
        {
          if (v81 < 0x40u)
            goto LABEL_167;
          if (v81 == 64)
            goto LABEL_251;
        }
      }
      v106 = v4 + 1;
      *((_QWORD *)this + 3) = v106;
      goto LABEL_257;
    }
    *((_QWORD *)this + 3) = v4 + 1;
    *((_BYTE *)this + 120) = 32;
LABEL_7:
    v8 = 0;
    while (1)
    {
LABEL_8:
      v9 = (unsigned __int16 *)*((_QWORD *)this + 3);
      if ((uint64_t)(*((_QWORD *)this + 5) - (_QWORD)v9) <= 9)
      {
        SLLexerInstance::Refill(this);
        v9 = (unsigned __int16 *)*((_QWORD *)this + 3);
      }
      v10 = (unsigned __int16)(SLChar::sLexFold[*v9 & 0x3F | (SLChar::sUniMap[(unint64_t)*v9 >> 6] << 6)] + *v9);
      if (v10 > 0x52)
        break;
      if (v10 <= 0x1F)
      {
        v11 = (unsigned __int16)(SLChar::sLexFold[*v9 & 0x3F | (SLChar::sUniMap[(unint64_t)*v9 >> 6] << 6)] + *v9);
        if (v11 > 0xA)
        {
          if (v11 == 13)
            goto LABEL_97;
        }
        else if (v11 >= 9)
        {
          goto LABEL_97;
        }
        goto LABEL_118;
      }
      v12 = (unsigned __int16)(SLChar::sLexFold[*v9 & 0x3F | (SLChar::sUniMap[(unint64_t)*v9 >> 6] << 6)] + *v9);
      if (v12 > 0x39)
      {
        if (v12 == 59)
        {
LABEL_97:
          v66 = v9 + 1;
          *((_QWORD *)this + 3) = v66;
          while (1)
          {
            v67 = (unsigned __int16)(SLChar::sLexFold[*v66 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v66 >> 6] << 6)]
                                   + *v66);
            if (v67 > 0x20)
            {
              v69 = (unsigned __int16)(SLChar::sLexFold[*v66 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v66 >> 6] << 6)]
                                     + *v66);
              if (v67 > 0x9F)
              {
                if (v69 != 160 && v69 != 8239)
                  goto LABEL_8;
              }
              else if (v69 != 59)
              {
                goto LABEL_8;
              }
            }
            else if (v67 <= 0xC)
            {
              if ((unsigned __int16)(SLChar::sLexFold[*v66 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v66 >> 6] << 6)]
                                    + *v66
                                    - 9) >= 2u)
                goto LABEL_8;
            }
            else
            {
              v68 = (unsigned __int16)(SLChar::sLexFold[*v66 & 0x3F | (SLChar::sUniMap[(unint64_t)(unsigned __int16)*v66 >> 6] << 6)]
                                     + *v66);
              if (v68 != 13 && v68 < 0x20)
                goto LABEL_8;
            }
            *((_QWORD *)this + 3) = ++v66;
            if (*((_WORD **)this + 5) == v66)
            {
              SLLexerInstance::Refill(this);
              v66 = (_WORD *)*((_QWORD *)this + 3);
            }
          }
        }
        goto LABEL_118;
      }
      if (v12 < 0x21)
        goto LABEL_97;
      if ((unsigned __int16)(SLChar::sLexFold[*v9 & 0x3F | (SLChar::sUniMap[(unint64_t)*v9 >> 6] << 6)] + *v9) < 0x30u)
        goto LABEL_118;
      v13 = v9 + 1;
      *((_QWORD *)this + 3) = v13;
      if (!v8)
      {
        v8 = (unint64_t *)operator new();
        SLHomograph::SLHomograph((SLHomograph *)v8);
        v13 = (unsigned __int16 *)*((_QWORD *)this + 3);
      }
      *((_QWORD *)this + 3) = v13 - 1;
      SLLexerImpl::SkipSpaces(this);
      v14 = SLChar::sLexFold[**((_WORD **)this + 3) & 0x3F | (SLChar::sUniMap[(unint64_t)**((unsigned __int16 **)this
                                                                                                 + 3) >> 6] << 6)]
          + **((_WORD **)this + 3);
      if (v14 <= 0xFFu)
      {
        v126 = v8;
        v127 = v8 + 4;
        while (1)
        {
          if ((*(_DWORD *)(v3 + 4 * v14 + 60) & 0x400) == 0)
            goto LABEL_8;
          v15 = SLLexerImpl::ScanInt((unsigned __int16 **)this);
          v16 = (unsigned __int16 *)*((_QWORD *)this + 3);
          if ((unsigned __int16)(SLChar::sLexFold[*v16 & 0x3F | (SLChar::sUniMap[(unint64_t)*v16 >> 6] << 6)]
                                + *v16) != 58)
            goto LABEL_119;
          v17 = v16[1];
          *((_QWORD *)this + 3) = v16 + 1;
          v18 = SLChar::sLexFold[v17 & 0x3F | (SLChar::sUniMap[(unint64_t)v17 >> 6] << 6)] + v17;
          if (v18 > 0xFFu || (*(_DWORD *)(v3 + 4 * v18 + 60) & 0x400) == 0)
            goto LABEL_119;
          v19 = v15;
          v20 = SLLexerImpl::ScanInt((unsigned __int16 **)this);
          v21 = v20;
          v22 = (unsigned __int16 *)*((_QWORD *)this + 3);
          if ((unsigned __int16)(SLChar::sLexFold[*v22 & 0x3F | (SLChar::sUniMap[(unint64_t)*v22 >> 6] << 6)]
                                + *v22) == 47)
          {
            v23 = v22[1];
            *((_QWORD *)this + 3) = v22 + 1;
            v24 = SLChar::sLexFold[v23 & 0x3F | (SLChar::sUniMap[(unint64_t)v23 >> 6] << 6)] + v23;
            if (v24 > 0xFFu || (*(_DWORD *)(v3 + 4 * v24 + 60) & 0x400) == 0)
              goto LABEL_119;
            v25 = SLLexerImpl::ScanInt((unsigned __int16 **)this);
            v26 = v21;
            v128 = v25;
          }
          else
          {
            v128 = v20;
            v26 = 1;
          }
          v28 = (char *)v8[5];
          v27 = v8[6];
          if ((unint64_t)v28 >= v27)
          {
            v30 = *v127;
            v31 = &v28[-*v127];
            v32 = (unint64_t)(v31 + 1);
            if ((uint64_t)(v31 + 1) < 0)
              goto LABEL_255;
            v33 = v3;
            v125 = v26;
            v34 = v27 - v30;
            if (2 * v34 > v32)
              v32 = 2 * v34;
            if (v34 >= 0x3FFFFFFFFFFFFFFFLL)
              v35 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v35 = v32;
            if (v35)
              v36 = (char *)operator new(v35);
            else
              v36 = 0;
            v37 = &v31[(_QWORD)v36];
            v38 = &v31[(_QWORD)v36];
            *v38 = v19;
            v29 = v38 + 1;
            if (v28 != (char *)v30)
            {
              v39 = &v28[~v30];
              do
              {
                v40 = *--v28;
                (v39--)[(_QWORD)v36] = v40;
              }
              while (v28 != (char *)v30);
              v28 = (char *)*v127;
              v37 = v36;
            }
            v8 = v126;
            v126[4] = (unint64_t)v37;
            v126[5] = (unint64_t)v29;
            v126[6] = (unint64_t)&v36[v35];
            if (v28)
              operator delete(v28);
            v3 = v33;
            v26 = v125;
          }
          else
          {
            *v28 = v19;
            v29 = v28 + 1;
          }
          v8[5] = (unint64_t)v29;
          v41 = v8[6];
          if ((unint64_t)v29 < v41)
          {
            *v29 = v26;
            v42 = v29 + 1;
            goto LABEL_72;
          }
          v43 = (char *)*v127;
          v44 = &v29[-*v127];
          v45 = (unint64_t)(v44 + 1);
          if ((uint64_t)(v44 + 1) < 0)
            goto LABEL_255;
          v46 = v41 - (_QWORD)v43;
          if (2 * v46 > v45)
            v45 = 2 * v46;
          v47 = v46 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v45;
          if (v47)
          {
            v48 = v3;
            v49 = v26;
            v50 = (unint64_t)operator new(v47);
            v26 = v49;
            v3 = v48;
          }
          else
          {
            v50 = 0;
          }
          v51 = &v44[v50];
          v52 = (char *)(v50 + v47);
          v44[v50] = v26;
          v42 = &v44[v50 + 1];
          if (v29 == v43)
            break;
          v53 = &v29[~(unint64_t)v43];
          v8 = v126;
          do
          {
            v54 = *--v29;
            (v53--)[v50] = v54;
          }
          while (v29 != v43);
          v29 = (char *)v126[4];
          v126[4] = v50;
          v126[5] = (unint64_t)v42;
          v126[6] = (unint64_t)v52;
          if (v29)
            goto LABEL_71;
LABEL_72:
          v8[5] = (unint64_t)v42;
          v55 = v8[6];
          if ((unint64_t)v42 >= v55)
          {
            v57 = *v127;
            v58 = &v42[-*v127];
            v59 = (unint64_t)(v58 + 1);
            if ((uint64_t)(v58 + 1) < 0)
LABEL_255:
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v60 = v55 - v57;
            if (2 * v60 > v59)
              v59 = 2 * v60;
            if (v60 >= 0x3FFFFFFFFFFFFFFFLL)
              v61 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v61 = v59;
            if (v61)
              v62 = (unint64_t)operator new(v61);
            else
              v62 = 0;
            v63 = (char *)(v62 + v61);
            v58[v62] = v128;
            v56 = (uint64_t)&v58[v62 + 1];
            if (v42 == (char *)v57)
            {
              v8 = v126;
              v126[4] = (unint64_t)&v58[v62];
              v126[5] = v56;
              v126[6] = (unint64_t)v63;
            }
            else
            {
              v64 = &v42[~v57];
              do
              {
                v65 = *--v42;
                (v64--)[v62] = v65;
              }
              while (v42 != (char *)v57);
              v8 = v126;
              v42 = (char *)v126[4];
              v126[4] = v62;
              v126[5] = v56;
              v126[6] = (unint64_t)v63;
              if (!v42)
                goto LABEL_90;
            }
            operator delete(v42);
          }
          else
          {
            *v42 = v128;
            v56 = (uint64_t)(v42 + 1);
          }
LABEL_90:
          v8[5] = v56;
          SLLexerImpl::SkipSpaces(this);
          v14 = SLChar::sLexFold[**((_WORD **)this + 3) & 0x3F | (SLChar::sUniMap[(unint64_t)**((unsigned __int16 **)this + 3) >> 6] << 6)]
              + **((_WORD **)this + 3);
          if (v14 > 0xFFu)
            goto LABEL_8;
        }
        v8 = v126;
        v126[4] = (unint64_t)v51;
        v126[5] = (unint64_t)v42;
        v126[6] = (unint64_t)v52;
LABEL_71:
        operator delete(v29);
        goto LABEL_72;
      }
    }
    if (v10 <= 0x7C)
      break;
    if ((unsigned __int16)(SLChar::sLexFold[*v9 & 0x3F | (SLChar::sUniMap[(unint64_t)*v9 >> 6] << 6)] + *v9) > 0xA0u)
    {
      if ((unsigned __int16)(SLChar::sLexFold[*v9 & 0x3F | (SLChar::sUniMap[(unint64_t)*v9 >> 6] << 6)] + *v9) == 8239)
        goto LABEL_97;
      goto LABEL_118;
    }
    if ((unsigned __int16)(SLChar::sLexFold[*v9 & 0x3F | (SLChar::sUniMap[(unint64_t)*v9 >> 6] << 6)] + *v9) >= 0x7Eu)
    {
      if ((unsigned __int16)(SLChar::sLexFold[*v9 & 0x3F | (SLChar::sUniMap[(unint64_t)*v9 >> 6] << 6)] + *v9) >= 0xA0u)
        goto LABEL_97;
LABEL_118:
      *((_QWORD *)this + 3) = v9 + 1;
      goto LABEL_119;
    }
    *((_QWORD *)this + 3) = v9 + 1;
    *((_BYTE *)this + 120) = 0;
    if (v8)
    {
      v86 = v8;
      Token = (_QWORD *)SLLexerInstance::CreateToken(this, 16, 0);
      v88 = (unint64_t **)Token[11];
      v89 = Token[12];
      if ((unint64_t)v88 >= v89)
      {
        v91 = Token[10];
        v92 = ((uint64_t)v88 - v91) >> 3;
        if ((unint64_t)(v92 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v93 = v89 - v91;
        v94 = v93 >> 2;
        if (v93 >> 2 <= (unint64_t)(v92 + 1))
          v94 = v92 + 1;
        if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF8)
          v95 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v95 = v94;
        if (v95)
          v96 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SLHomograph *>>((uint64_t)(Token + 12), v95);
        else
          v96 = 0;
        v97 = &v96[8 * v92];
        v98 = &v96[8 * v95];
        *(_QWORD *)v97 = v86;
        v90 = v97 + 8;
        v100 = (char *)Token[10];
        v99 = (char *)Token[11];
        if (v99 != v100)
        {
          do
          {
            v101 = *((_QWORD *)v99 - 1);
            v99 -= 8;
            *((_QWORD *)v97 - 1) = v101;
            v97 -= 8;
          }
          while (v99 != v100);
          v99 = (char *)Token[10];
        }
        Token[10] = v97;
        Token[11] = v90;
        Token[12] = v98;
        if (v99)
          operator delete(v99);
      }
      else
      {
        *v88 = v86;
        v90 = v88 + 1;
      }
      Token[11] = v90;
      return Token;
    }
    SLLexerImpl::SkipSpaces(this);
    v2 = (_WORD *)*((_QWORD *)this + 3);
LABEL_134:
    *((_QWORD *)this + 8) = v2;
  }
  v71 = (unsigned __int16)(SLChar::sLexFold[*v9 & 0x3F | (SLChar::sUniMap[(unint64_t)*v9 >> 6] << 6)] + *v9);
  if (v71 > 0x72)
  {
    if (v71 == 115)
    {
LABEL_121:
      v72 = v9 + 1;
      v73 = v9[1];
      *((_QWORD *)this + 3) = v9 + 1;
      *((_QWORD *)this + 6) = v9 + 1;
      if ((((unsigned __int16)SLChar::sLexFold[v73 & 0x3F | (SLChar::sUniMap[v73 >> 6] << 6)] + (_DWORD)v73) & 0xFFDF) != 0x57)
        goto LABEL_119;
      v74 = v9[2];
      *((_QWORD *)this + 3) = v9 + 2;
      if ((((unsigned __int16)SLChar::sLexFold[v74 & 0x3F | (SLChar::sUniMap[v74 >> 6] << 6)] + (_DWORD)v74) & 0xFFDF) == 0x49)
      {
        v75 = v9[3];
        *((_QWORD *)this + 3) = v9 + 3;
        if ((((unsigned __int16)SLChar::sLexFold[v75 & 0x3F | (SLChar::sUniMap[v75 >> 6] << 6)] + (_DWORD)v75) & 0xFFDF) == 0x4E)
        {
          v76 = v9[4];
          *((_QWORD *)this + 3) = v9 + 4;
          if ((((unsigned __int16)SLChar::sLexFold[v76 & 0x3F | (SLChar::sUniMap[v76 >> 6] << 6)] + (_DWORD)v76) & 0xFFDF) == 0x47)
          {
            *((_QWORD *)this + 3) = v9 + 5;
            v102 = (unsigned __int16 **)this;
            v103 = 1937206887;
            return (_QWORD *)SLLexerImpl::SimpleCommand(v102, v103, 3u);
          }
        }
      }
      goto LABEL_131;
    }
    if ((unsigned __int16)(SLChar::sLexFold[*v9 & 0x3F | (SLChar::sUniMap[(unint64_t)*v9 >> 6] << 6)] + *v9) >= 0x75u)
      goto LABEL_118;
  }
  else
  {
    if (v71 < 0x54)
      goto LABEL_121;
    if ((unsigned __int16)(SLChar::sLexFold[*v9 & 0x3F | (SLChar::sUniMap[(unint64_t)*v9 >> 6] << 6)] + *v9) != 84)
      goto LABEL_118;
  }
  v72 = v9 + 1;
  v77 = v9[1];
  *((_QWORD *)this + 3) = v9 + 1;
  *((_QWORD *)this + 6) = v9 + 1;
  if ((((unsigned __int16)SLChar::sLexFold[v77 & 0x3F | (SLChar::sUniMap[v77 >> 6] << 6)] + (_DWORD)v77) & 0xFFDF) != 0x52)
    goto LABEL_119;
  v78 = v9[2];
  *((_QWORD *)this + 3) = v9 + 2;
  if ((((unsigned __int16)SLChar::sLexFold[v78 & 0x3F | (SLChar::sUniMap[v78 >> 6] << 6)] + (_DWORD)v78) & 0xFFDF) != 0x41
    || (v79 = v9[3],
        *((_QWORD *)this + 3) = v9 + 3,
        (((unsigned __int16)SLChar::sLexFold[v79 & 0x3F | (SLChar::sUniMap[v79 >> 6] << 6)] + (_DWORD)v79) & 0xFFDF) != 0x4E)
    || (v80 = v9[4],
        *((_QWORD *)this + 3) = v9 + 4,
        (((unsigned __int16)SLChar::sLexFold[v80 & 0x3F | (SLChar::sUniMap[v80 >> 6] << 6)] + (_DWORD)v80) & 0xFFDF) != 0x53))
  {
LABEL_131:
    *((_QWORD *)this + 3) = v72;
LABEL_119:
    SLLexerImpl::AttrError(this);
    goto LABEL_8;
  }
  *((_QWORD *)this + 3) = v9 + 5;
  v102 = (unsigned __int16 **)this;
  v103 = 1953657712;
  return (_QWORD *)SLLexerImpl::SimpleCommand(v102, v103, 3u);
}

void SLCartDict::Create()
{
  fwrite("SLCartDict::Create unable to handle this locale.\n", 0x31uLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
  abort();
}

void SLMorphRules::Create()
{
  fwrite("SLMorphRules::Create unable to handle this locale.\n", 0x33uLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
  abort();
}

void SLMorphRules::CreateFlat()
{
  fwrite("SLMorphRules::CreateFlat unable to handle this locale.\n", 0x37uLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
  abort();
}

void SLPronouncer::Create()
{
  fwrite("SLPronouncer::Create unable to handle this locale.\n", 0x33uLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
  abort();
}

void SLTuples::Create()
{
  fwrite("SLTuples::Create unable to handle this locale.\n", 0x2FuLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
  abort();
}

void SLToken::ExcludeHomographs()
{
  __assert_rtn("ExcludeHomographs", "SLToken.cp", 209, "fHomograph.size() > 0");
}

void SLElementNames::Create()
{
  fwrite("SLElementNames::Create unable to handle this locale.\n", 0x35uLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
  abort();
}

void SLCFStringTextSource::Refill()
{
  __assert_rtn("Refill", "SLLexer.cp", 71, "keep >= 0");
}

void SLDictLookup::Create()
{
  fwrite("SLDictLookup::Create unable to handle this locale.\n", 0x33uLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
  abort();
}

void SLDictLookup::CreatePhonemeSymbols()
{
  fwrite("SLDictLookup::CreatePhonemeSymbols unable to handle this locale.\n", 0x41uLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
  abort();
}

void SLPhonemeParser::Create()
{
  fwrite("SLPhonemeParser::Create unable to handle this locale.\n", 0x36uLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
  abort();
}

void SLAgglomerate::Create()
{
  fwrite("SLAgglomerate::Create unable to handle this locale.\n", 0x34uLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
  abort();
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x24BDBB7F0](allocator, values, numValues, callBacks);
}

CFURLRef CFBundleCopyResourceURL(CFBundleRef bundle, CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName)
{
  return (CFURLRef)MEMORY[0x24BDBBA80](bundle, resourceName, resourceType, subDirName);
}

CFBundleRef CFBundleGetBundleWithIdentifier(CFStringRef bundleID)
{
  return (CFBundleRef)MEMORY[0x24BDBBAA8](bundleID);
}

CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFDataRef)MEMORY[0x24BDBBCC0](allocator, bytes, length, bytesDeallocator);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x24BDBBCE0](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x24BDBBCF8](theData);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x24BDBBDD8](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFTypeRef CFLocaleGetValue(CFLocaleRef locale, CFLocaleKey key)
{
  return (CFTypeRef)MEMORY[0x24BDBBF98](locale, key);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x24BDBC0A0](allocator, theType, valuePtr);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x24BDBC298](cf);
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
  MEMORY[0x24BDBC4A8](theString, appendedString);
}

void CFStringAppendCharacters(CFMutableStringRef theString, const UniChar *chars, CFIndex numChars)
{
  MEMORY[0x24BDBC4B8](theString, chars, numChars);
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x24BDBC4D0](theString1, theString2, compareOptions);
}

CFStringRef CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFStringRef)MEMORY[0x24BDBC520](alloc, theString);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x24BDBC538](alloc, maxLength);
}

CFStringRef CFStringCreateWithCharactersNoCopy(CFAllocatorRef alloc, const UniChar *chars, CFIndex numChars, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x24BDBC588](alloc, chars, numChars, contentsDeallocator);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x24BDBC598](alloc, formatOptions, format);
}

CFStringRef CFStringCreateWithPascalString(CFAllocatorRef alloc, ConstStr255Param pStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x24BDBC5A8](alloc, pStr, *(_QWORD *)&encoding);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x24BDBC600](theString, buffer, bufferSize, *(_QWORD *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x24BDBC610](theString, *(_QWORD *)&encoding);
}

UniChar CFStringGetCharacterAtIndex(CFStringRef theString, CFIndex idx)
{
  return MEMORY[0x24BDBC618](theString, idx);
}

void CFStringGetCharacters(CFStringRef theString, CFRange range, UniChar *buffer)
{
  MEMORY[0x24BDBC620](theString, range.location, range.length, buffer);
}

Boolean CFStringGetFileSystemRepresentation(CFStringRef string, char *buffer, CFIndex maxBufLen)
{
  return MEMORY[0x24BDBC640](string, buffer, maxBufLen);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x24BDBC658](theString);
}

CFIndex CFStringGetMaximumSizeOfFileSystemRepresentation(CFStringRef string)
{
  return MEMORY[0x24BDBC668](string);
}

CFStringRef CFURLCopyFileSystemPath(CFURLRef anURL, CFURLPathStyle pathStyle)
{
  return (CFStringRef)MEMORY[0x24BDBC798](anURL, pathStyle);
}

uint64_t CPGetDeviceRegionCode()
{
  return MEMORY[0x24BE04690]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x24BDAC720](aBlock);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x24BDAC738](aBlock);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x24BDAC780](exception_object);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x24BEDAAA8](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x24BEDABB0](this);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x24BEDAC38](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC40](this, __s, __n);
}

std::string *__cdecl std::string::append(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  return (std::string *)MEMORY[0x24BEDAC50](this, __n, __c);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x24BEDAC58](this, __s);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC60](this, __s, __n);
}

std::string::iterator std::string::insert(std::string *this, std::string::const_iterator __pos, std::string::value_type __c)
{
  return (std::string::iterator)MEMORY[0x24BEDAC78](this, __pos.__i_, __c);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x24BEDAC80](this, __pos, __s);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC88](this, __pos, __s, __n);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, std::string::size_type __n, std::string::value_type __c)
{
  return (std::string *)MEMORY[0x24BEDAC90](this, __pos, __n, __c);
}

std::string *__cdecl std::string::replace(std::string *this, std::string::size_type __pos, std::string::size_type __n1, const std::string::value_type *__s, std::string::size_type __n2)
{
  return (std::string *)MEMORY[0x24BEDACA8](this, __pos, __n1, __s, __n2);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
  MEMORY[0x24BEDACC8](this, __c);
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return (std::string *)MEMORY[0x24BEDACE8](this, __str, __pos, __n, __a);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x24BEDAD00](this, __str);
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x24BEDB638]();
}

void std::terminate(void)
{
  MEMORY[0x24BEDB6C0]();
}

uint64_t operator delete[]()
{
  return off_24D670910();
}

void operator delete(void *__p)
{
  off_24D670918(__p);
}

uint64_t operator delete()
{
  return off_24D670920();
}

uint64_t operator new[]()
{
  return off_24D670928();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_24D670930(__sz);
}

uint64_t operator new()
{
  return off_24D670938();
}

__darwin_ct_rune_t ___toupper_l(__darwin_ct_rune_t a1, locale_t a2)
{
  return MEMORY[0x24BDAC798](*(_QWORD *)&a1, a2);
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x24BDAC7A0](a1, a2, *(_QWORD *)&a3, a4);
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x24BEDB8F8](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x24BEDB910](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x24BEDB928]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x24BEDB930](a1);
}

void __cxa_rethrow(void)
{
  MEMORY[0x24BEDB958]();
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x24BEDB960](a1, lptinfo, a3);
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x24BDAC838](*(_QWORD *)&a1, a2);
}

int __maskrune_l(__darwin_ct_rune_t a1, unint64_t a2, locale_t a3)
{
  return MEMORY[0x24BDAC840](*(_QWORD *)&a1, a2, a3);
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x24BDAC930](*(_QWORD *)&a1);
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return MEMORY[0x24BDAC938](*(_QWORD *)&a1);
}

void abort(void)
{
  MEMORY[0x24BDAD008]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

int close(int a1)
{
  return MEMORY[0x24BDAD9D8](*(_QWORD *)&a1);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x24BDADE98](predicate, block);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x24BDAE428](a1, a2);
}

int freelocale(locale_t a1)
{
  return MEMORY[0x24BDAE470](a1);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x24BDAE590](__ptr, __size, __nitems, __stream);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE70](__s, *(_QWORD *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x24BDAEEA8](__b, *(_QWORD *)&__c, __len);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x24BDAEFA8](a1, a2, *(_QWORD *)&a3, *(_QWORD *)&a4, *(_QWORD *)&a5, a6);
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x24BDAEFF0](a1, a2);
}

locale_t newlocale(int a1, const char *a2, locale_t a3)
{
  return (locale_t)MEMORY[0x24BDAF108](*(_QWORD *)&a1, a2, a3);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x24BDAF228](a1, *(_QWORD *)&a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x24BDAF8D0](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x24BDAF8E0](a1);
}

int sqlite3_bind_text(sqlite3_stmt *a1, int a2, const char *a3, int a4, void (__cdecl *a5)(void *))
{
  return MEMORY[0x24BEDDF98](a1, *(_QWORD *)&a2, a3, *(_QWORD *)&a4, a5);
}

int sqlite3_close(sqlite3 *a1)
{
  return MEMORY[0x24BEDE010](a1);
}

const void *__cdecl sqlite3_column_blob(sqlite3_stmt *a1, int iCol)
{
  return (const void *)MEMORY[0x24BEDE020](a1, *(_QWORD *)&iCol);
}

int sqlite3_column_bytes(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x24BEDE028](a1, *(_QWORD *)&iCol);
}

sqlite3_int64 sqlite3_column_int64(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x24BEDE058](a1, *(_QWORD *)&iCol);
}

int sqlite3_finalize(sqlite3_stmt *pStmt)
{
  return MEMORY[0x24BEDE140](pStmt);
}

int sqlite3_open_v2(const char *filename, sqlite3 **ppDb, int flags, const char *zVfs)
{
  return MEMORY[0x24BEDE1C0](filename, ppDb, *(_QWORD *)&flags, zVfs);
}

int sqlite3_prepare_v2(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
{
  return MEMORY[0x24BEDE1D0](db, zSql, *(_QWORD *)&nByte, ppStmt, pzTail);
}

int sqlite3_reset(sqlite3_stmt *pStmt)
{
  return MEMORY[0x24BEDE1E0](pStmt);
}

int sqlite3_step(sqlite3_stmt *a1)
{
  return MEMORY[0x24BEDE2A8](a1);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x24BDAFEA8](a1, a2);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x24BDAFEE8](__s, *(_QWORD *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x24BDAFEF0](__s1, __s2);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x24BDAFF40](__s);
}

int strncasecmp_l(const char *a1, const char *a2, size_t a3, locale_t a4)
{
  return MEMORY[0x24BDAFF58](a1, a2, a3, a4);
}

char *__cdecl strpbrk(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x24BDAFF90](__s1, __s2);
}

char *__cdecl strstr(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x24BDAFFC8](__s1, __s2);
}

int32_t u_charName(UChar32 code, UCharNameChoice nameChoice, char *buffer, int32_t bufferLength, UErrorCode *pErrorCode)
{
  return MEMORY[0x24BEDBF48](*(_QWORD *)&code, *(_QWORD *)&nameChoice, buffer, *(_QWORD *)&bufferLength, pErrorCode);
}

UBool u_isgraph(UChar32 c)
{
  return MEMORY[0x24BEDBFB0](*(_QWORD *)&c);
}

