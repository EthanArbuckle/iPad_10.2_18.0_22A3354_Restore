uint64_t cva::DictionaryHandler::getDictionary(cva::DictionaryHandler *this)
{
  return *(_QWORD *)this;
}

void cva::ItemHandler::~ItemHandler(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

uint64_t cva::Path::string(cva::Path *this)
{
  return *(_QWORD *)this;
}

void *cva::ItemHandler::getValue<BOOL>(void **a1)
{
  void *result;

  result = *a1;
  if (result)
    return (void *)objc_msgSend(result, "BOOLValue");
  return result;
}

BOOL cva::ItemHandler::isValid(cva::ItemHandler *this)
{
  return *(_QWORD *)this != 0;
}

cva::Path *cva::Path::Path(cva::Path *this, const char *a2)
{
  const char *v4;

  v4 = a2;
  sub_20ABFFE94((uint64_t *)this, &v4);
  return this;
}

{
  const char *v4;

  v4 = a2;
  sub_20ABFFE94((uint64_t *)this, &v4);
  return this;
}

void cva::Sprintf::sprintf(cva::Sprintf *this@<X0>, uint64_t a2@<X8>, ...)
{
  int v5;
  int v6;
  char *v7;
  int v8;
  va_list va;

  va_start(va, a2);
  if (this)
  {
    v5 = strlen((const char *)this);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v6 = 2 * v5 + 50;
    *(_QWORD *)a2 = 0;
    while (1)
    {
      while (1)
      {
        std::string::resize((std::string *)a2, v6 + 1, 0);
        v7 = *(char *)(a2 + 23) >= 0 ? (char *)a2 : *(char **)a2;
        v8 = vsnprintf(v7, v6 + 1, (const char *)this, va);
        if ((v8 & 0x80000000) == 0)
          break;
        v6 *= 2;
      }
      if (v8 <= v6)
        break;
      v6 = v8;
    }
    std::string::resize((std::string *)a2, v8, 0);
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
}

BOOL cva::Path::exists(const char **this)
{
  const char *v1;

  v1 = *this;
  if (v1[23] < 0)
    v1 = *(const char **)v1;
  return access(v1, 0) == 0;
}

uint64_t cva::ItemHandler::getDictionary@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;

  if (!*(_QWORD *)this || (v3 = this, objc_opt_class(), this = objc_opt_isKindOfClass(), (this & 1) == 0))
  {
    *a2 = 0;
    a2[1] = 0;
    return this;
  }
  v4 = *(const void **)v3;
  if (*(_BYTE *)(v3 + 8))
  {
    this = (uint64_t)operator new(0x28uLL);
    v5 = this;
    *(_QWORD *)(this + 8) = 0;
    *(_QWORD *)(this + 16) = 0;
    *(_QWORD *)this = &off_24C380498;
    *(_QWORD *)(this + 24) = v4;
    v6 = this + 24;
    *(_BYTE *)(this + 32) = 1;
    if (!v4)
    {
      *(_BYTE *)(this + 32) = 0;
      goto LABEL_10;
    }
  }
  else
  {
    this = (uint64_t)operator new(0x28uLL);
    v5 = this;
    *(_QWORD *)(this + 8) = 0;
    *(_QWORD *)(this + 16) = 0;
    *(_QWORD *)this = &off_24C380498;
    *(_QWORD *)(this + 24) = v4;
    v6 = this + 24;
    *(_BYTE *)(this + 32) = 0;
    if (!v4)
      goto LABEL_10;
  }
  this = (uint64_t)CFRetain(v4);
LABEL_10:
  *a2 = v6;
  a2[1] = v5;
  return this;
}

void sub_20AB8138C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

CFTypeRef cva::DictionaryHandler::item@<X0>(id *this@<X0>, const __CFString *a2@<X1>, uint64_t a3@<X8>)
{
  CFTypeRef result;
  char v6;

  result = (CFTypeRef)objc_msgSend(*this, "objectForKey:", a2);
  v6 = *((_BYTE *)this + 8);
  *(_QWORD *)a3 = result;
  *(_BYTE *)(a3 + 8) = v6;
  if (result)
    return CFRetain(result);
  *(_BYTE *)(a3 + 8) = 0;
  return result;
}

BOOL cva::DictionaryHandler::hasKey(id *this, const __CFString *a2)
{
  void *v2;
  _BOOL8 v3;

  objc_msgSend(*this, "valueForKey:", a2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2 != 0;

  return v3;
}

uint64_t *cva::Path::Path(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = operator new();
  v5 = v4;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_20AB88C14((_BYTE *)v4, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v4 = *(_OWORD *)a2;
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 16);
  }
  *a1 = v5;
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;

  v4 = operator new();
  v5 = v4;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_20AB88C14((_BYTE *)v4, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v4 = *(_OWORD *)a2;
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 16);
  }
  *a1 = v5;
  return a1;
}

cva::Path *cva::Path::Path(cva::Path *this, __int128 **a2)
{
  __int128 *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v3 = *a2;
  v4 = operator new();
  v5 = v4;
  if (*((char *)v3 + 23) < 0)
  {
    sub_20AB88C14((_BYTE *)v4, *(void **)v3, *((_QWORD *)v3 + 1));
  }
  else
  {
    v6 = *v3;
    *(_QWORD *)(v4 + 16) = *((_QWORD *)v3 + 2);
    *(_OWORD *)v4 = v6;
  }
  *(_QWORD *)this = v5;
  return this;
}

{
  __int128 *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v3 = *a2;
  v4 = operator new();
  v5 = v4;
  if (*((char *)v3 + 23) < 0)
  {
    sub_20AB88C14((_BYTE *)v4, *(void **)v3, *((_QWORD *)v3 + 1));
  }
  else
  {
    v6 = *v3;
    *(_QWORD *)(v4 + 16) = *((_QWORD *)v3 + 2);
    *(_OWORD *)v4 = v6;
  }
  *(_QWORD *)this = v5;
  return this;
}

void cva::Path::~Path(cva::Path *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v1)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    MEMORY[0x20BD2D02C](v1, 0x1012C40EC159624);
  }
}

{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v1)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    MEMORY[0x20BD2D02C](v1, 0x1012C40EC159624);
  }
}

void *cva::ArrayHandler::size(void **this)
{
  void *result;

  result = *this;
  if (result)
    return (void *)objc_msgSend(result, "count");
  return result;
}

uint64_t *cva::ArrayHandler::item@<X0>(uint64_t *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  char v6;

  if (a2 < 0
    || (v4 = (uint64_t)this, (this = (uint64_t *)*this) == 0)
    || (this = (uint64_t *)objc_msgSend(this, "count"), (int)this <= a2))
  {
    *(_QWORD *)a3 = 0;
  }
  else
  {
    this = (uint64_t *)objc_msgSend(*(id *)v4, "objectAtIndex:", a2);
    v6 = *(_BYTE *)(v4 + 8);
    *(_QWORD *)a3 = this;
    *(_BYTE *)(a3 + 8) = v6;
    if (this)
      return (uint64_t *)CFRetain(this);
  }
  *(_BYTE *)(a3 + 8) = 0;
  return this;
}

BOOL cva::ItemHandler::isMatrixTypeOfSize(cva::ItemHandler *this, int a2, int a3)
{
  id v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  id *v10;
  const void *v11;
  const void *v12;
  char v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  const void *v25;
  uint64_t v26;
  void **v27;
  std::__shared_weak_count *v28;
  id *v29;
  std::__shared_weak_count *v30;

  if (!cva::ItemHandler::isMatrixType(this))
    return 0;
  cva::ItemHandler::getArray((uint64_t)this, &v29);
  if (!v29)
    goto LABEL_27;
  v6 = *v29;
  if (*v29)
    LODWORD(v6) = objc_msgSend(v6, "count");
  if ((_DWORD)v6 != a2)
  {
LABEL_27:
    v8 = 0;
    goto LABEL_28;
  }
  if (a2 < 1)
  {
    v8 = 1;
    goto LABEL_28;
  }
  v7 = 0;
  v8 = 0;
  v9 = a2;
  while (1)
  {
    v10 = v29;
    if (*v29 && v7 < (int)objc_msgSend(*v29, "count"))
    {
      v11 = (const void *)objc_msgSend(*v10, "objectAtIndex:", v7);
      v12 = v11;
      v13 = *((_BYTE *)v10 + 8);
      v25 = v11;
      LOBYTE(v26) = v13;
      if (v11)
      {
        CFRetain(v11);
        goto LABEL_15;
      }
    }
    else
    {
      v25 = 0;
    }
    v12 = 0;
    LOBYTE(v26) = 0;
LABEL_15:
    cva::ItemHandler::getArray((uint64_t)&v25, &v27);
    if (v12)
      CFRelease(v12);
    if (!v27)
      break;
    v14 = *v27;
    if (*v27)
      LODWORD(v14) = objc_msgSend(v14, "count", v25, v26);
    if ((_DWORD)v14 != a3)
      break;
    v15 = v28;
    if (v28)
    {
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v8 = ++v7 >= v9;
    if (v7 == v9)
      goto LABEL_28;
  }
  v22 = v28;
  if (v28)
  {
    v23 = (unint64_t *)&v28->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
LABEL_28:
  v18 = v30;
  if (v30)
  {
    v19 = (unint64_t *)&v30->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  return v8;
}

void sub_20AB817DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20ABF7C34((uint64_t)va);
  _Unwind_Resume(a1);
}

void cva::ItemHandler::getMatrix<float>(cva::ItemHandler *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  id *v5;
  void *v6;
  const void *v7;
  char v8;
  id *v9;
  int v10;
  int v11;
  _DWORD *v12;
  unint64_t v13;
  size_t v14;
  uint64_t v15;
  int i;
  id v17;
  int v18;
  const void *v19;
  void *v20;
  int v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  int v28;
  void *memptr;
  char v30;
  id *v31;
  std::__shared_weak_count *v32;
  id *v33;
  std::__shared_weak_count *v34;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  if ((cva::ItemHandler::isMatrixType(a1) & 1) != 0)
  {
    cva::ItemHandler::getArray((uint64_t)a1, &v33);
    if (v33)
    {
      if (*v33)
      {
        v28 = objc_msgSend(*v33, "count");
        if (v28 >= 1)
        {
          v4 = 0;
          while (1)
          {
            v5 = v33;
            if (!*v33 || v4 >= (int)objc_msgSend(*v33, "count"))
              break;
            v6 = (void *)objc_msgSend(*v5, "objectAtIndex:", v4);
            v7 = v6;
            v8 = *((_BYTE *)v5 + 8);
            memptr = v6;
            v30 = v8;
            if (!v6)
              goto LABEL_12;
            CFRetain(v6);
LABEL_13:
            cva::ItemHandler::getArray((uint64_t)&memptr, &v31);
            if (v7)
              CFRelease(v7);
            v9 = v31;
            if (v31)
            {
              if (v4)
              {
                v11 = *(_DWORD *)(a2 + 16);
                v10 = *(_DWORD *)(a2 + 20);
                v12 = *(_DWORD **)a2;
              }
              else
              {
                if (*v31)
                  v10 = objc_msgSend(*v31, "count");
                else
                  v10 = 0;
                *(_DWORD *)(a2 + 16) = v28;
                *(_DWORD *)(a2 + 20) = v10;
                v13 = (v10 * v28);
                if ((_DWORD)v13)
                {
                  v12 = *(_DWORD **)a2;
                  if (*(_QWORD *)(a2 + 8) < v13)
                  {
                    free(*(void **)a2);
                    v14 = (4 * v13 + 31) & 0x7FFFFFFE0;
                    *(_QWORD *)a2 = 0;
                    *(_QWORD *)(a2 + 8) = v14 >> 2;
                    memptr = 0;
                    malloc_type_posix_memalign(&memptr, 0x20uLL, v14, 0x49090899uLL);
                    v12 = memptr;
                    *(_QWORD *)a2 = memptr;
                  }
                  v11 = v28;
                }
                else
                {
                  free(*(void **)a2);
                  v12 = 0;
                  *(_QWORD *)a2 = 0;
                  *(_QWORD *)(a2 + 8) = 0;
                  v11 = v28;
                }
              }
              v15 = 0;
              for (i = v4; ; i += v11)
              {
                v17 = *v9;
                if (*v9)
                  LODWORD(v17) = objc_msgSend(v17, "count");
                v18 = (int)v17 >= v10 ? v10 : (int)v17;
                if (v15 >= v18)
                  break;
                if (*v9
                  && v15 < (int)objc_msgSend(*v9, "count")
                  && (v19 = (const void *)objc_msgSend(*v9, "objectAtIndex:", v15), (v20 = (void *)v19) != 0))
                {
                  CFRetain(v19);
                  objc_msgSend(v20, "floatValue");
                  v12[i] = v21;
                  CFRelease(v20);
                }
                else
                {
                  v12[i] = 0;
                }
                ++v15;
              }
            }
            v22 = v32;
            if (v32)
            {
              p_shared_owners = (unint64_t *)&v32->__shared_owners_;
              do
                v24 = __ldaxr(p_shared_owners);
              while (__stlxr(v24 - 1, p_shared_owners));
              if (!v24)
              {
                ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
                std::__shared_weak_count::__release_weak(v22);
              }
            }
            if (++v4 == v28)
              goto LABEL_44;
          }
          memptr = 0;
LABEL_12:
          v7 = 0;
          v30 = 0;
          goto LABEL_13;
        }
      }
    }
LABEL_44:
    v25 = v34;
    if (v34)
    {
      v26 = (unint64_t *)&v34->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
  }
}

void sub_20AB81AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20ABF7C34((uint64_t)va);
  free(0);
  _Unwind_Resume(a1);
}

uint64_t cva::ItemHandler::isMatrixType(cva::ItemHandler *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id *v6;
  const void *v7;
  const void *v8;
  char isKindOfClass;
  const void *v10;
  const void *v11;
  char v12;
  id *v13;
  void *v14;
  int v15;
  uint64_t v16;
  const void *v17;
  const void *v18;
  char v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  const void *v28;
  uint64_t v29;
  void **v30;
  std::__shared_weak_count *v31;
  id *v32;
  std::__shared_weak_count *v33;

  if (!*(_QWORD *)this)
    return 0;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    return 0;
  cva::ItemHandler::getArray((uint64_t)this, &v32);
  if (!v32)
  {
LABEL_49:
    v23 = 0;
    v25 = v33;
    if (!v33)
      return v23;
    goto LABEL_52;
  }
  if (*v32)
  {
    v2 = objc_msgSend(*v32, "count");
    if (v2 >= 1)
    {
      v3 = 0;
      v4 = 0;
      v5 = v2;
      do
      {
        v6 = v32;
        if (!*v32)
          goto LABEL_49;
        if (v3 >= (int)objc_msgSend(*v32, "count"))
          goto LABEL_49;
        v7 = (const void *)objc_msgSend(*v6, "objectAtIndex:", v3);
        v8 = v7;
        if (!v7)
          goto LABEL_49;
        CFRetain(v7);
        objc_opt_class();
        isKindOfClass = objc_opt_isKindOfClass();
        CFRelease(v8);
        if ((isKindOfClass & 1) == 0)
          goto LABEL_49;
        if (*v6 && v3 < (int)objc_msgSend(*v6, "count"))
        {
          v10 = (const void *)objc_msgSend(*v6, "objectAtIndex:", v3);
          v11 = v10;
          v12 = *((_BYTE *)v6 + 8);
          v28 = v10;
          LOBYTE(v29) = v12;
          if (v10)
          {
            CFRetain(v10);
            goto LABEL_17;
          }
        }
        else
        {
          v28 = 0;
        }
        v11 = 0;
        LOBYTE(v29) = 0;
LABEL_17:
        cva::ItemHandler::getArray((uint64_t)&v28, &v30);
        if (v11)
          CFRelease(v11);
        v13 = v30;
        if (!v30)
          goto LABEL_36;
        v14 = *v30;
        if (v3)
        {
          if (v14)
          {
            if (objc_msgSend(v14, "count") != v4)
              goto LABEL_36;
          }
          else if (v4)
          {
            goto LABEL_36;
          }
          if ((int)v4 >= 1)
            goto LABEL_27;
LABEL_33:
          LOBYTE(v18) = 1;
          v20 = v31;
          if (v31)
            goto LABEL_38;
          goto LABEL_42;
        }
        if (v14)
        {
          v15 = objc_msgSend(v14, "count", v28, v29);
          v4 = v15;
          if (v15 >= 1)
          {
LABEL_27:
            v16 = 0;
            while (*v13 && v16 < (int)objc_msgSend(*v13, "count"))
            {
              v17 = (const void *)objc_msgSend(*v13, "objectAtIndex:", v16);
              v18 = v17;
              if (!v17)
                goto LABEL_37;
              CFRetain(v17);
              objc_opt_class();
              v19 = objc_opt_isKindOfClass();
              CFRelease(v18);
              if ((v19 & 1) == 0)
                break;
              if (v4 == ++v16)
                goto LABEL_33;
            }
LABEL_36:
            LOBYTE(v18) = 0;
LABEL_37:
            v20 = v31;
            if (!v31)
              goto LABEL_42;
LABEL_38:
            p_shared_owners = (unint64_t *)&v20->__shared_owners_;
            do
              v22 = __ldaxr(p_shared_owners);
            while (__stlxr(v22 - 1, p_shared_owners));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
            goto LABEL_42;
          }
          goto LABEL_33;
        }
        v4 = 0;
        LOBYTE(v18) = 1;
        v20 = v31;
        if (v31)
          goto LABEL_38;
LABEL_42:
        if ((v18 & 1) == 0)
          goto LABEL_49;
        ++v3;
      }
      while (v3 != v5);
    }
  }
  v23 = 1;
  v25 = v33;
  if (v33)
  {
LABEL_52:
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  return v23;
}

void sub_20AB81E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20ABF7C34((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t cva::ItemHandler::getArray@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;

  if (!*(_QWORD *)this || (v3 = this, objc_opt_class(), this = objc_opt_isKindOfClass(), (this & 1) == 0))
  {
    *a2 = 0;
    a2[1] = 0;
    return this;
  }
  v4 = *(const void **)v3;
  if (*(_BYTE *)(v3 + 8))
  {
    this = (uint64_t)operator new(0x28uLL);
    v5 = this;
    *(_QWORD *)(this + 8) = 0;
    *(_QWORD *)(this + 16) = 0;
    *(_QWORD *)this = &off_24C380428;
    *(_QWORD *)(this + 24) = v4;
    v6 = this + 24;
    *(_BYTE *)(this + 32) = 1;
    if (!v4)
    {
      *(_BYTE *)(this + 32) = 0;
      goto LABEL_10;
    }
  }
  else
  {
    this = (uint64_t)operator new(0x28uLL);
    v5 = this;
    *(_QWORD *)(this + 8) = 0;
    *(_QWORD *)(this + 16) = 0;
    *(_QWORD *)this = &off_24C380428;
    *(_QWORD *)(this + 24) = v4;
    v6 = this + 24;
    *(_BYTE *)(this + 32) = 0;
    if (!v4)
      goto LABEL_10;
  }
  this = (uint64_t)CFRetain(v4);
LABEL_10:
  *a2 = v6;
  a2[1] = v5;
  return this;
}

void sub_20AB81F48(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void cva::ItemHandler::getValue<std::string>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  const char *v3;
  size_t v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  id v9;

  v2 = a2;
  if (!*a1)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return;
  }
  v9 = objc_retainAutorelease(*a1);
  v3 = (const char *)objc_msgSend(v9, "UTF8String");
  v4 = strlen(v3);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v6 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v6 = v4 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    v2[1] = v5;
    v2[2] = v7 | 0x8000000000000000;
    *v2 = v8;
    v2 = v8;
  }
  else
  {
    *((_BYTE *)v2 + 23) = v4;
    if (!v4)
      goto LABEL_11;
  }
  memmove(v2, v3, v5);
LABEL_11:
  *((_BYTE *)v2 + v5) = 0;

}

{
  __ZNK3cva11ItemHandler8getValueINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEET_v(a1, a2);
}

void sub_20AB82040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void cva::DictionaryHandler::~DictionaryHandler(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

uint64_t *cva::DictionaryHandler::operator=(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *result;
  *result = *a2;
  *a2 = v2;
  LOBYTE(v2) = *((_BYTE *)result + 8);
  *((_BYTE *)result + 8) = *((_BYTE *)a2 + 8);
  *((_BYTE *)a2 + 8) = v2;
  return result;
}

cva::DictionaryHandler *cva::DictionaryHandler::DictionaryHandler(cva::DictionaryHandler *this, CFTypeRef cf)
{
  *(_QWORD *)this = cf;
  *((_BYTE *)this + 8) = 0;
  if (cf)
    CFRetain(cf);
  return this;
}

{
  *(_QWORD *)this = cf;
  *((_BYTE *)this + 8) = 1;
  if (cf)
    CFRetain(cf);
  else
    *((_BYTE *)this + 8) = 0;
  return this;
}

{
  *(_QWORD *)this = cf;
  *((_BYTE *)this + 8) = 1;
  if (cf)
    CFRetain(cf);
  else
    *((_BYTE *)this + 8) = 0;
  return this;
}

{
  *(_QWORD *)this = cf;
  *((_BYTE *)this + 8) = 0;
  if (cf)
    CFRetain(cf);
  return this;
}

cva::DictionaryHandler *cva::DictionaryHandler::DictionaryHandler(cva::DictionaryHandler *this)
{
  *(_QWORD *)this = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD2A8], MEMORY[0x24BDBD6B0]);
  *((_BYTE *)this + 8) = 1;
  return this;
}

{
  *(_QWORD *)this = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD2A8], MEMORY[0x24BDBD6B0]);
  *((_BYTE *)this + 8) = 1;
  return this;
}

std::string *cva::Path::append(std::string **this, const std::string::value_type ***a2)
{
  std::string *v4;
  std::string::size_type size;
  std::string *v6;
  const std::string::value_type **v7;
  int v8;
  const std::string::value_type *v9;
  std::string::size_type v10;

  v4 = *this;
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    size = v4->__r_.__value_.__l.__size_;
    if (!size)
      goto LABEL_14;
    v6 = (std::string *)v4->__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(v4->__r_.__value_.__r.__words[2]);
    if (!*((_BYTE *)&v4->__r_.__value_.__s + 23))
      goto LABEL_14;
    v6 = v4;
  }
  if (v6->__r_.__value_.__s.__data_[size - 1] != 47)
  {
    v7 = *a2;
    if (*((char *)*a2 + 23) < 0)
    {
      if (!v7[1])
        goto LABEL_14;
      v7 = (const std::string::value_type **)*v7;
    }
    else if (!*((_BYTE *)*a2 + 23))
    {
      goto LABEL_14;
    }
    if (*(_BYTE *)v7 != 47)
    {
      std::string::push_back(v4, 47);
      v4 = *this;
    }
  }
LABEL_14:
  v8 = *((char *)*a2 + 23);
  if (v8 >= 0)
    v9 = (const std::string::value_type *)*a2;
  else
    v9 = **a2;
  if (v8 >= 0)
    v10 = *((unsigned __int8 *)*a2 + 23);
  else
    v10 = (std::string::size_type)(*a2)[1];
  return std::string::append(v4, v9, v10);
}

uint64_t cva::ItemHandler::getObject(cva::ItemHandler *this)
{
  return *(_QWORD *)this;
}

void *cva::ItemHandler::getValue<int>(void **a1)
{
  void *result;

  result = *a1;
  if (result)
    return (void *)objc_msgSend(result, "intValue");
  return result;
}

uint64_t cva::Buffer<float>::~Buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C37FE50;
  v2 = *(_QWORD *)(a1 + 56);
  if (v2)
  {

    MEMORY[0x20BD2D02C](v2, 0xE0C400670D255);
  }
  v3 = *(_QWORD *)(a1 + 64);
  if (v3)
  {

    MEMORY[0x20BD2D02C](v3, 0xE0C400670D255);
  }
  CVPixelBufferRelease(*(CVPixelBufferRef *)(a1 + 48));
  return a1;
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C37FE50;
  v2 = *(_QWORD *)(a1 + 56);
  if (v2)
  {

    MEMORY[0x20BD2D02C](v2, 0xE0C400670D255);
  }
  v3 = *(_QWORD *)(a1 + 64);
  if (v3)
  {

    MEMORY[0x20BD2D02C](v3, 0xE0C400670D255);
  }
  CVPixelBufferRelease(*(CVPixelBufferRef *)(a1 + 48));
  return a1;
}

{
  return __ZN3cva6BufferIfED2Ev(a1);
}

void cva::Buffer<float>::~Buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C37FE50;
  v2 = *(_QWORD *)(a1 + 56);
  if (v2)
  {

    MEMORY[0x20BD2D02C](v2, 0xE0C400670D255);
  }
  v3 = *(_QWORD *)(a1 + 64);
  if (v3)
  {

    MEMORY[0x20BD2D02C](v3, 0xE0C400670D255);
  }
  CVPixelBufferRelease(*(CVPixelBufferRef *)(a1 + 48));
  JUMPOUT(0x20BD2D02CLL);
}

void cva::Buffer<float>::doResize(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  BOOL v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  size_t v10;
  size_t v11;
  __CFDictionary *AttributeDictionary;
  int v13;
  uint64_t v14;
  CVPixelBufferRef v15[6];

  v15[5] = *(CVPixelBufferRef *)MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  if (*a2 > *(_DWORD *)(a1 + 16)
    || (a2[1] <= *(_DWORD *)(a1 + 20) ? (v5 = a2[2] > *(_DWORD *)(a1 + 24)) : (v5 = 1), v5))
  {
    CVPixelBufferRelease(*(CVPixelBufferRef *)(a1 + 48));
    v6 = 4 * *a2;
    v7 = a2[2];
    v8 = (a2[1] * v6 + 63) & 0xFFFFFFC0;
    v9 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)v4 = v9;
    *(_DWORD *)(v4 + 8) = v7;
    *(_DWORD *)(a1 + 28) = 4;
    *(_DWORD *)(a1 + 32) = v6;
    *(_DWORD *)(a1 + 36) = v8;
    v10 = *(unsigned int *)(a1 + 24);
    v11 = (*(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
    AttributeDictionary = cva::createAttributeDictionary((cva *)v11, *(_DWORD *)(a1 + 24), 1278226534, 64, 64, 0, 0, 0, (BOOL)v15[0]);
    v15[0] = 0;
    CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v11, v10, 0x4C303066u, AttributeDictionary, v15);
    CFRelease(AttributeDictionary);
    *(CVPixelBufferRef *)(a1 + 48) = v15[0];
  }
  else
  {
    v13 = a2[2];
    v14 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)v4 = v14;
    *(_DWORD *)(a1 + 24) = v13;
  }
}

uint64_t cva::Buffer<unsigned short>::~Buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C37FEE0;
  v2 = *(_QWORD *)(a1 + 56);
  if (v2)
  {

    MEMORY[0x20BD2D02C](v2, 0xE0C400670D255);
  }
  v3 = *(_QWORD *)(a1 + 64);
  if (v3)
  {

    MEMORY[0x20BD2D02C](v3, 0xE0C400670D255);
  }
  CVPixelBufferRelease(*(CVPixelBufferRef *)(a1 + 48));
  return a1;
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C37FEE0;
  v2 = *(_QWORD *)(a1 + 56);
  if (v2)
  {

    MEMORY[0x20BD2D02C](v2, 0xE0C400670D255);
  }
  v3 = *(_QWORD *)(a1 + 64);
  if (v3)
  {

    MEMORY[0x20BD2D02C](v3, 0xE0C400670D255);
  }
  CVPixelBufferRelease(*(CVPixelBufferRef *)(a1 + 48));
  return a1;
}

{
  return __ZN3cva6BufferItED2Ev(a1);
}

void cva::Buffer<unsigned short>::~Buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C37FEE0;
  v2 = *(_QWORD *)(a1 + 56);
  if (v2)
  {

    MEMORY[0x20BD2D02C](v2, 0xE0C400670D255);
  }
  v3 = *(_QWORD *)(a1 + 64);
  if (v3)
  {

    MEMORY[0x20BD2D02C](v3, 0xE0C400670D255);
  }
  CVPixelBufferRelease(*(CVPixelBufferRef *)(a1 + 48));
  JUMPOUT(0x20BD2D02CLL);
}

void cva::Buffer<unsigned short>::doResize(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  BOOL v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  size_t v10;
  size_t v11;
  __CFDictionary *AttributeDictionary;
  int v13;
  uint64_t v14;
  CVPixelBufferRef v15[6];

  v15[5] = *(CVPixelBufferRef *)MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  if (*a2 > *(_DWORD *)(a1 + 16)
    || (a2[1] <= *(_DWORD *)(a1 + 20) ? (v5 = a2[2] > *(_DWORD *)(a1 + 24)) : (v5 = 1), v5))
  {
    CVPixelBufferRelease(*(CVPixelBufferRef *)(a1 + 48));
    v6 = 2 * *a2;
    v7 = a2[2];
    v8 = (a2[1] * v6 + 63) & 0xFFFFFFC0;
    v9 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)v4 = v9;
    *(_DWORD *)(v4 + 8) = v7;
    *(_DWORD *)(a1 + 28) = 2;
    *(_DWORD *)(a1 + 32) = v6;
    *(_DWORD *)(a1 + 36) = v8;
    v10 = *(unsigned int *)(a1 + 24);
    v11 = (*(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
    AttributeDictionary = cva::createAttributeDictionary((cva *)v11, *(_DWORD *)(a1 + 24), 2037741158, 64, 64, 0, 0, 0, (BOOL)v15[0]);
    v15[0] = 0;
    CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v11, v10, 0x79757666u, AttributeDictionary, v15);
    CFRelease(AttributeDictionary);
    *(CVPixelBufferRef *)(a1 + 48) = v15[0];
  }
  else
  {
    v13 = a2[2];
    v14 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)v4 = v14;
    *(_DWORD *)(a1 + 24) = v13;
  }
}

uint64_t cva::Buffer<unsigned char>::~Buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C37FE80;
  v2 = *(_QWORD *)(a1 + 56);
  if (v2)
  {

    MEMORY[0x20BD2D02C](v2, 0xE0C400670D255);
  }
  v3 = *(_QWORD *)(a1 + 64);
  if (v3)
  {

    MEMORY[0x20BD2D02C](v3, 0xE0C400670D255);
  }
  CVPixelBufferRelease(*(CVPixelBufferRef *)(a1 + 48));
  return a1;
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C37FE80;
  v2 = *(_QWORD *)(a1 + 56);
  if (v2)
  {

    MEMORY[0x20BD2D02C](v2, 0xE0C400670D255);
  }
  v3 = *(_QWORD *)(a1 + 64);
  if (v3)
  {

    MEMORY[0x20BD2D02C](v3, 0xE0C400670D255);
  }
  CVPixelBufferRelease(*(CVPixelBufferRef *)(a1 + 48));
  return a1;
}

{
  return __ZN3cva6BufferIhED2Ev(a1);
}

void cva::Buffer<unsigned char>::~Buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C37FE80;
  v2 = *(_QWORD *)(a1 + 56);
  if (v2)
  {

    MEMORY[0x20BD2D02C](v2, 0xE0C400670D255);
  }
  v3 = *(_QWORD *)(a1 + 64);
  if (v3)
  {

    MEMORY[0x20BD2D02C](v3, 0xE0C400670D255);
  }
  CVPixelBufferRelease(*(CVPixelBufferRef *)(a1 + 48));
  JUMPOUT(0x20BD2D02CLL);
}

void cva::Buffer<unsigned char>::doResize(uint64_t a1, int *a2)
{
  uint64_t v4;
  BOOL v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  size_t v10;
  size_t v11;
  __CFDictionary *AttributeDictionary;
  int v13;
  uint64_t v14;
  CVPixelBufferRef v15[6];

  v15[5] = *(CVPixelBufferRef *)MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  if (*a2 > *(_DWORD *)(a1 + 16)
    || (a2[1] <= *(_DWORD *)(a1 + 20) ? (v5 = a2[2] > *(_DWORD *)(a1 + 24)) : (v5 = 1), v5))
  {
    CVPixelBufferRelease(*(CVPixelBufferRef *)(a1 + 48));
    v6 = *a2;
    v7 = a2[2];
    v8 = (a2[1] * *a2 + 63) & 0xFFFFFFC0;
    v9 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)v4 = v9;
    *(_DWORD *)(v4 + 8) = v7;
    *(_DWORD *)(a1 + 28) = 1;
    *(_DWORD *)(a1 + 32) = v6;
    *(_DWORD *)(a1 + 36) = v8;
    v10 = *(unsigned int *)(a1 + 24);
    v11 = (*(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
    AttributeDictionary = cva::createAttributeDictionary((cva *)v11, *(_DWORD *)(a1 + 24), 1278226488, 64, 64, 0, 0, 0, (BOOL)v15[0]);
    v15[0] = 0;
    CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v11, v10, 0x4C303038u, AttributeDictionary, v15);
    CFRelease(AttributeDictionary);
    *(CVPixelBufferRef *)(a1 + 48) = v15[0];
  }
  else
  {
    v13 = a2[2];
    v14 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)v4 = v14;
    *(_DWORD *)(a1 + 24) = v13;
  }
}

uint64_t cva::Buffer<unsigned int>::~Buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C37FEB0;
  v2 = *(_QWORD *)(a1 + 56);
  if (v2)
  {

    MEMORY[0x20BD2D02C](v2, 0xE0C400670D255);
  }
  v3 = *(_QWORD *)(a1 + 64);
  if (v3)
  {

    MEMORY[0x20BD2D02C](v3, 0xE0C400670D255);
  }
  CVPixelBufferRelease(*(CVPixelBufferRef *)(a1 + 48));
  return a1;
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C37FEB0;
  v2 = *(_QWORD *)(a1 + 56);
  if (v2)
  {

    MEMORY[0x20BD2D02C](v2, 0xE0C400670D255);
  }
  v3 = *(_QWORD *)(a1 + 64);
  if (v3)
  {

    MEMORY[0x20BD2D02C](v3, 0xE0C400670D255);
  }
  CVPixelBufferRelease(*(CVPixelBufferRef *)(a1 + 48));
  return a1;
}

{
  return __ZN3cva6BufferIjED2Ev(a1);
}

void cva::Buffer<unsigned int>::~Buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C37FEB0;
  v2 = *(_QWORD *)(a1 + 56);
  if (v2)
  {

    MEMORY[0x20BD2D02C](v2, 0xE0C400670D255);
  }
  v3 = *(_QWORD *)(a1 + 64);
  if (v3)
  {

    MEMORY[0x20BD2D02C](v3, 0xE0C400670D255);
  }
  CVPixelBufferRelease(*(CVPixelBufferRef *)(a1 + 48));
  JUMPOUT(0x20BD2D02CLL);
}

void cva::Buffer<unsigned int>::doResize(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  BOOL v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  size_t v10;
  size_t v11;
  __CFDictionary *AttributeDictionary;
  int v13;
  uint64_t v14;
  CVPixelBufferRef v15[6];

  v15[5] = *(CVPixelBufferRef *)MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  if (*a2 > *(_DWORD *)(a1 + 16)
    || (a2[1] <= *(_DWORD *)(a1 + 20) ? (v5 = a2[2] > *(_DWORD *)(a1 + 24)) : (v5 = 1), v5))
  {
    CVPixelBufferRelease(*(CVPixelBufferRef *)(a1 + 48));
    v6 = 4 * *a2;
    v7 = a2[2];
    v8 = (a2[1] * v6 + 63) & 0xFFFFFFC0;
    v9 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)v4 = v9;
    *(_DWORD *)(v4 + 8) = v7;
    *(_DWORD *)(a1 + 28) = 4;
    *(_DWORD *)(a1 + 32) = v6;
    *(_DWORD *)(a1 + 36) = v8;
    v10 = *(unsigned int *)(a1 + 24);
    v11 = (*(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
    AttributeDictionary = cva::createAttributeDictionary((cva *)v11, *(_DWORD *)(a1 + 24), 1111970369, 64, 64, 0, 0, 0, (BOOL)v15[0]);
    v15[0] = 0;
    CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v11, v10, 0x42475241u, AttributeDictionary, v15);
    CFRelease(AttributeDictionary);
    *(CVPixelBufferRef *)(a1 + 48) = v15[0];
  }
  else
  {
    v13 = a2[2];
    v14 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)v4 = v14;
    *(_DWORD *)(a1 + 24) = v13;
  }
}

uint64_t cva::Buffer<cva::half>::~Buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C37FE20;
  v2 = *(_QWORD *)(a1 + 56);
  if (v2)
  {

    MEMORY[0x20BD2D02C](v2, 0xE0C400670D255);
  }
  v3 = *(_QWORD *)(a1 + 64);
  if (v3)
  {

    MEMORY[0x20BD2D02C](v3, 0xE0C400670D255);
  }
  CVPixelBufferRelease(*(CVPixelBufferRef *)(a1 + 48));
  return a1;
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C37FE20;
  v2 = *(_QWORD *)(a1 + 56);
  if (v2)
  {

    MEMORY[0x20BD2D02C](v2, 0xE0C400670D255);
  }
  v3 = *(_QWORD *)(a1 + 64);
  if (v3)
  {

    MEMORY[0x20BD2D02C](v3, 0xE0C400670D255);
  }
  CVPixelBufferRelease(*(CVPixelBufferRef *)(a1 + 48));
  return a1;
}

{
  return __ZN3cva6BufferINS_4halfEED2Ev(a1);
}

void cva::Buffer<cva::half>::~Buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C37FE20;
  v2 = *(_QWORD *)(a1 + 56);
  if (v2)
  {

    MEMORY[0x20BD2D02C](v2, 0xE0C400670D255);
  }
  v3 = *(_QWORD *)(a1 + 64);
  if (v3)
  {

    MEMORY[0x20BD2D02C](v3, 0xE0C400670D255);
  }
  CVPixelBufferRelease(*(CVPixelBufferRef *)(a1 + 48));
  JUMPOUT(0x20BD2D02CLL);
}

void cva::Buffer<cva::half>::doResize(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  BOOL v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  size_t v10;
  size_t v11;
  __CFDictionary *AttributeDictionary;
  int v13;
  uint64_t v14;
  CVPixelBufferRef v15[6];

  v15[5] = *(CVPixelBufferRef *)MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  if (*a2 > *(_DWORD *)(a1 + 16)
    || (a2[1] <= *(_DWORD *)(a1 + 20) ? (v5 = a2[2] > *(_DWORD *)(a1 + 24)) : (v5 = 1), v5))
  {
    CVPixelBufferRelease(*(CVPixelBufferRef *)(a1 + 48));
    v6 = 2 * *a2;
    v7 = a2[2];
    v8 = (a2[1] * v6 + 63) & 0xFFFFFFC0;
    v9 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)v4 = v9;
    *(_DWORD *)(v4 + 8) = v7;
    *(_DWORD *)(a1 + 28) = 2;
    *(_DWORD *)(a1 + 32) = v6;
    *(_DWORD *)(a1 + 36) = v8;
    v10 = *(unsigned int *)(a1 + 24);
    v11 = (*(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
    AttributeDictionary = cva::createAttributeDictionary((cva *)v11, *(_DWORD *)(a1 + 24), 1278226536, 64, 64, 0, 0, 0, (BOOL)v15[0]);
    v15[0] = 0;
    CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v11, v10, 0x4C303068u, AttributeDictionary, v15);
    CFRelease(AttributeDictionary);
    *(CVPixelBufferRef *)(a1 + 48) = v15[0];
  }
  else
  {
    v13 = a2[2];
    v14 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)v4 = v14;
    *(_DWORD *)(a1 + 24) = v13;
  }
}

double cva::Buffer<float>::Buffer(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)a1 = &unk_24C37FE50;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)a1 = &unk_24C37FE50;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t cva::Buffer<float>::Buffer(uint64_t a1, _DWORD *a2)
{
  int v3;
  size_t v4;
  unsigned int v5;
  uint64_t v6;
  size_t v7;
  __CFDictionary *AttributeDictionary;
  CVPixelBufferRef v9;
  BOOL v11;
  CVPixelBufferRef pixelBufferOut;

  v3 = 4 * *a2;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = a2[2];
  v5 = (a2[1] * v3 + 63) & 0xFFFFFFC0;
  v6 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 28) = 4;
  *(_DWORD *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 36) = v5;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = &unk_24C37FE50;
  v7 = (HIDWORD(v6) * v6);
  AttributeDictionary = cva::createAttributeDictionary((cva *)v7, v4, 1278226534, 64, 64, 0, 0, 0, v11);
  pixelBufferOut = 0;
  CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v7, v4, 0x4C303066u, AttributeDictionary, &pixelBufferOut);
  CFRelease(AttributeDictionary);
  v9 = pixelBufferOut;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = v9;
  return a1;
}

{
  int v3;
  size_t v4;
  unsigned int v5;
  uint64_t v6;
  size_t v7;
  __CFDictionary *AttributeDictionary;
  CVPixelBufferRef v9;
  BOOL v11;
  CVPixelBufferRef pixelBufferOut;

  v3 = 4 * *a2;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = a2[2];
  v5 = (a2[1] * v3 + 63) & 0xFFFFFFC0;
  v6 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 28) = 4;
  *(_DWORD *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 36) = v5;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = &unk_24C37FE50;
  v7 = (HIDWORD(v6) * v6);
  AttributeDictionary = cva::createAttributeDictionary((cva *)v7, v4, 1278226534, 64, 64, 0, 0, 0, v11);
  pixelBufferOut = 0;
  CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v7, v4, 0x4C303066u, AttributeDictionary, &pixelBufferOut);
  CFRelease(AttributeDictionary);
  v9 = pixelBufferOut;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = v9;
  return a1;
}

_DWORD *cva::Buffer<float>::defaultStride@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  int v2;
  int v3;

  v2 = result[1];
  v3 = 4 * *result;
  *a2 = 4;
  a2[1] = v3;
  a2[2] = (v2 * v3 + 63) & 0xFFFFFFC0;
  return result;
}

CVPixelBufferRef cva::Buffer<float>::allocate(_DWORD *a1)
{
  size_t v1;
  size_t v2;
  __CFDictionary *AttributeDictionary;
  BOOL v5;
  CVPixelBufferRef pixelBufferOut;

  v1 = (a1[1] * *a1);
  v2 = a1[2];
  AttributeDictionary = cva::createAttributeDictionary((cva *)v1, v2, 1278226534, 64, 64, 0, 0, 0, v5);
  pixelBufferOut = 0;
  CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v1, v2, 0x4C303066u, AttributeDictionary, &pixelBufferOut);
  CFRelease(AttributeDictionary);
  return pixelBufferOut;
}

uint64_t cva::Buffer<float>::Buffer(uint64_t a1, int a2, int a3, unsigned int a4)
{
  size_t v6;
  __CFDictionary *AttributeDictionary;
  CVPixelBufferRef v8;
  BOOL v10;
  CVPixelBufferRef pixelBufferOut;

  *(_DWORD *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + 20) = a3;
  *(_DWORD *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 28) = 4;
  *(_DWORD *)(a1 + 32) = 4 * a2;
  *(_DWORD *)(a1 + 36) = (4 * a2 * a3 + 63) & 0xFFFFFFC0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = &unk_24C37FE50;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = (a3 * a2);
  AttributeDictionary = cva::createAttributeDictionary((cva *)v6, a4, 1278226534, 64, 64, 0, 0, 0, v10);
  pixelBufferOut = 0;
  CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v6, a4, 0x4C303066u, AttributeDictionary, &pixelBufferOut);
  CFRelease(AttributeDictionary);
  v8 = pixelBufferOut;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = v8;
  return a1;
}

{
  size_t v6;
  __CFDictionary *AttributeDictionary;
  CVPixelBufferRef v8;
  BOOL v10;
  CVPixelBufferRef pixelBufferOut;

  *(_DWORD *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + 20) = a3;
  *(_DWORD *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 28) = 4;
  *(_DWORD *)(a1 + 32) = 4 * a2;
  *(_DWORD *)(a1 + 36) = (4 * a2 * a3 + 63) & 0xFFFFFFC0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = &unk_24C37FE50;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = (a3 * a2);
  AttributeDictionary = cva::createAttributeDictionary((cva *)v6, a4, 1278226534, 64, 64, 0, 0, 0, v10);
  pixelBufferOut = 0;
  CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v6, a4, 0x4C303066u, AttributeDictionary, &pixelBufferOut);
  CFRelease(AttributeDictionary);
  v8 = pixelBufferOut;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = v8;
  return a1;
}

double cva::Buffer<float>::Buffer(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  double result;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v2 = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v2;
  v3 = *(_QWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 28) = v3;
  *(_QWORD *)a1 = &unk_24C37FE50;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a2 + 36) = 0;
  result = 0.0;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  double result;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v2 = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v2;
  v3 = *(_QWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 28) = v3;
  *(_QWORD *)a1 = &unk_24C37FE50;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a2 + 36) = 0;
  result = 0.0;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  return result;
}

__n128 cva::Buffer<float>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;

  v2 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_DWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 28);
  v8 = *(_DWORD *)(a1 + 36);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v3;
  LODWORD(v3) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 28) = *(_QWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 36) = v3;
  *(_QWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = v9;
  *(_DWORD *)(a2 + 24) = v10;
  *(_QWORD *)(a2 + 28) = v7;
  *(_DWORD *)(a2 + 36) = v8;
  v4 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = v4;
  v5 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = v5;
  result = *(__n128 *)(a1 + 56);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(__n128 *)(a2 + 56) = result;
  return result;
}

uint64_t cva::Buffer<float>::Buffer(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  unsigned int v6;
  size_t v7;
  size_t v8;
  __CFDictionary *AttributeDictionary;
  __CVBuffer *v10;
  __CVBuffer *v11;
  char *BaseAddress;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  CVPixelBufferRef v38[4];

  v38[3] = *(CVPixelBufferRef *)MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a2 + 24);
  v5 = 4 * *(_DWORD *)(a2 + 16);
  v6 = (*(_DWORD *)(a2 + 20) * v5 + 63) & 0xFFFFFFC0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 28) = 4;
  *(_DWORD *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 36) = v6;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = &unk_24C37FE50;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v7 = *(unsigned int *)(a1 + 24);
  v8 = (*(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
  AttributeDictionary = cva::createAttributeDictionary((cva *)v8, v7, 1278226534, 64, 64, 0, 0, 0, (BOOL)v38[0]);
  v38[0] = 0;
  CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v8, v7, 0x4C303066u, AttributeDictionary, v38);
  CFRelease(AttributeDictionary);
  *(CVPixelBufferRef *)(a1 + 48) = v38[0];
  v10 = *(__CVBuffer **)(a2 + 48);
  if (v10 && !CVPixelBufferLockBaseAddress(v10, 1uLL))
  {
    CVPixelBufferGetWidth(*(CVPixelBufferRef *)(a2 + 48));
    CVPixelBufferGetHeight(*(CVPixelBufferRef *)(a2 + 48));
    CVPixelBufferGetBytesPerRow(*(CVPixelBufferRef *)(a2 + 48));
    *(_QWORD *)(a2 + 40) = CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)(a2 + 48));
    v11 = *(__CVBuffer **)(a1 + 48);
    if (v11 && !CVPixelBufferLockBaseAddress(v11, 0))
    {
      CVPixelBufferGetWidth(*(CVPixelBufferRef *)(a1 + 48));
      CVPixelBufferGetHeight(*(CVPixelBufferRef *)(a1 + 48));
      CVPixelBufferGetBytesPerRow(*(CVPixelBufferRef *)(a1 + 48));
      BaseAddress = (char *)CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)(a1 + 48));
      *(_QWORD *)(a1 + 40) = BaseAddress;
      v13 = *(unsigned int *)(a1 + 36);
      v14 = *(unsigned int *)(a2 + 36);
      if (*(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28)
        && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32)
        && (_DWORD)v13 == (_DWORD)v14)
      {
        memcpy(BaseAddress, *(const void **)(a2 + 40), (*(_DWORD *)(a2 + 24) * v13));
      }
      else
      {
        v15 = *(_QWORD *)(a2 + 40);
        if (v15)
          v16 = (_DWORD *)(v15 + *(_QWORD *)(a2 + 8));
        else
          v16 = 0;
        if (v15)
          v17 = (_DWORD *)(v15 + *(_QWORD *)(a2 + 8) + (*(_DWORD *)(a2 + 24) * v14));
        else
          v17 = 0;
        if (v16 != v17)
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
          v21 = 0;
          v22 = *(_DWORD *)(a2 + 16);
          v23 = *(_DWORD *)(a2 + 20);
          v25 = *(_DWORD *)(a1 + 16);
          v24 = *(_DWORD *)(a1 + 20);
          v26 = *(_QWORD *)(a1 + 28);
          v27 = *(_QWORD *)(a2 + 28);
          if (BaseAddress)
            v28 = &BaseAddress[*(_QWORD *)(a1 + 8)];
          else
            v28 = 0;
          v29 = *(_QWORD *)(a2 + 28);
          v30 = HIDWORD(v27);
          v31 = *(_QWORD *)(a1 + 28);
          v32 = HIDWORD(v26);
          v33 = -(uint64_t)(v22 * v27);
          v34 = -(uint64_t)(v25 * v26);
          do
          {
            *(_DWORD *)v28 = *v16;
            v16 = (_DWORD *)((char *)v16 + v29);
            if (++v19 == v22)
            {
              v19 = 0;
              v16 = (_DWORD *)((char *)v16 + v33 + v30);
              v35 = v18 + 1;
              if (v18 + 1 == v23)
                v18 = 0;
              else
                ++v18;
              if (v35 == v23)
                v16 = (_DWORD *)((char *)v16 + v14 - (v35 * v30));
            }
            v28 += v31;
            if (++v21 == v25)
            {
              v21 = 0;
              v28 += v34 + v32;
              v36 = v20 + 1;
              if (v20 + 1 == v24)
                v20 = 0;
              else
                ++v20;
              if (v36 == v24)
                v28 = &v28[v13 - (v36 * v32)];
            }
          }
          while (v16 != v17);
        }
      }
      if (!CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 48), 0))
        *(_QWORD *)(a1 + 40) = 0;
    }
    if (!CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a2 + 48), 1uLL))
      *(_QWORD *)(a2 + 40) = 0;
  }
  return a1;
}

{
  int v4;
  int v5;
  unsigned int v6;
  size_t v7;
  size_t v8;
  __CFDictionary *AttributeDictionary;
  __CVBuffer *v10;
  char *BaseAddress;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  CVPixelBufferRef pixelBuffer[4];

  pixelBuffer[3] = *(CVPixelBufferRef *)MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a2 + 16);
  v5 = 4 * *(_DWORD *)(a2 + 8);
  v6 = (*(_DWORD *)(a2 + 12) * v5 + 63) & 0xFFFFFFC0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 28) = 4;
  *(_DWORD *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 36) = v6;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = &unk_24C37FE50;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v7 = *(unsigned int *)(a1 + 24);
  v8 = (*(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
  AttributeDictionary = cva::createAttributeDictionary((cva *)v8, v7, 1278226534, 64, 64, 0, 0, 0, (BOOL)pixelBuffer[0]);
  pixelBuffer[0] = 0;
  CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v8, v7, 0x4C303066u, AttributeDictionary, pixelBuffer);
  CFRelease(AttributeDictionary);
  v10 = pixelBuffer[0];
  *(CVPixelBufferRef *)(a1 + 48) = pixelBuffer[0];
  if (v10 && !CVPixelBufferLockBaseAddress(v10, 0))
  {
    CVPixelBufferGetWidth(*(CVPixelBufferRef *)(a1 + 48));
    CVPixelBufferGetHeight(*(CVPixelBufferRef *)(a1 + 48));
    CVPixelBufferGetBytesPerRow(*(CVPixelBufferRef *)(a1 + 48));
    BaseAddress = (char *)CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)(a1 + 48));
    *(_QWORD *)(a1 + 40) = BaseAddress;
    v12 = *(unsigned int *)(a1 + 36);
    v13 = *(unsigned int *)(a2 + 28);
    if (*(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 20)
      && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 24)
      && (_DWORD)v12 == (_DWORD)v13)
    {
      memcpy(BaseAddress, *(const void **)(a2 + 32), (*(_DWORD *)(a2 + 16) * v12));
    }
    else
    {
      v14 = *(_QWORD *)(a2 + 32);
      if (v14)
        v15 = (_DWORD *)(v14 + *(_QWORD *)a2);
      else
        v15 = 0;
      if (v14)
        v16 = (_DWORD *)(v14 + *(_QWORD *)a2 + (*(_DWORD *)(a2 + 16) * v13));
      else
        v16 = 0;
      if (v15 != v16)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        v20 = 0;
        v21 = *(_DWORD *)(a2 + 8);
        v22 = *(_DWORD *)(a2 + 12);
        v24 = *(_DWORD *)(a1 + 16);
        v23 = *(_DWORD *)(a1 + 20);
        v25 = *(_QWORD *)(a1 + 28);
        v26 = *(_QWORD *)(a2 + 20);
        if (BaseAddress)
          v27 = &BaseAddress[*(_QWORD *)(a1 + 8)];
        else
          v27 = 0;
        v28 = *(_QWORD *)(a2 + 20);
        v29 = HIDWORD(v26);
        v30 = *(_QWORD *)(a1 + 28);
        v31 = HIDWORD(v25);
        v32 = -(uint64_t)(v21 * v26);
        v33 = -(uint64_t)(v24 * v25);
        do
        {
          *(_DWORD *)v27 = *v15;
          v15 = (_DWORD *)((char *)v15 + v28);
          if (++v18 == v21)
          {
            v18 = 0;
            v15 = (_DWORD *)((char *)v15 + v32 + v29);
            v34 = v17 + 1;
            if (v17 + 1 == v22)
              v17 = 0;
            else
              ++v17;
            if (v34 == v22)
              v15 = (_DWORD *)((char *)v15 + v13 - (v34 * v29));
          }
          v27 += v30;
          if (++v20 == v24)
          {
            v20 = 0;
            v27 += v33 + v31;
            v35 = v19 + 1;
            if (v19 + 1 == v23)
              v19 = 0;
            else
              ++v19;
            if (v35 == v23)
              v27 = &v27[v12 - (v35 * v31)];
          }
        }
        while (v15 != v16);
      }
    }
    if (!CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 48), 0))
      *(_QWORD *)(a1 + 40) = 0;
  }
  return a1;
}

{
  return __ZN3cva6BufferIfEC2ERKNS_9ArrayViewIfLj3EEE(a1, a2);
}

{
  return __ZN3cva6BufferIfEC2ERKS1_(a1, a2);
}

__CVBuffer *cva::Buffer<float>::lock(uint64_t a1, CVPixelBufferLockFlags a2)
{
  __CVBuffer *result;

  result = *(__CVBuffer **)(a1 + 48);
  if (result)
  {
    if (CVPixelBufferLockBaseAddress(result, a2))
    {
      return 0;
    }
    else
    {
      CVPixelBufferGetWidth(*(CVPixelBufferRef *)(a1 + 48));
      CVPixelBufferGetHeight(*(CVPixelBufferRef *)(a1 + 48));
      CVPixelBufferGetBytesPerRow(*(CVPixelBufferRef *)(a1 + 48));
      *(_QWORD *)(a1 + 40) = CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)(a1 + 48));
      return (__CVBuffer *)1;
    }
  }
  return result;
}

BOOL cva::Buffer<float>::unlock(uint64_t a1, CVPixelBufferLockFlags a2)
{
  CVReturn v3;

  v3 = CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 48), a2);
  if (!v3)
    *(_QWORD *)(a1 + 40) = 0;
  return v3 == 0;
}

uint64_t cva::Buffer<float>::operator=(uint64_t a1, uint64_t a2)
{
  __CVBuffer *v3;
  __CVBuffer *v5;
  char *BaseAddress;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;

  v3 = *(__CVBuffer **)(a2 + 48);
  if (v3 && !CVPixelBufferLockBaseAddress(v3, 1uLL))
  {
    CVPixelBufferGetWidth(*(CVPixelBufferRef *)(a2 + 48));
    CVPixelBufferGetHeight(*(CVPixelBufferRef *)(a2 + 48));
    CVPixelBufferGetBytesPerRow(*(CVPixelBufferRef *)(a2 + 48));
    *(_QWORD *)(a2 + 40) = CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)(a2 + 48));
    v5 = *(__CVBuffer **)(a1 + 48);
    if (v5 && !CVPixelBufferLockBaseAddress(v5, 0))
    {
      CVPixelBufferGetWidth(*(CVPixelBufferRef *)(a1 + 48));
      CVPixelBufferGetHeight(*(CVPixelBufferRef *)(a1 + 48));
      CVPixelBufferGetBytesPerRow(*(CVPixelBufferRef *)(a1 + 48));
      BaseAddress = (char *)CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)(a1 + 48));
      *(_QWORD *)(a1 + 40) = BaseAddress;
      v7 = *(_QWORD *)(a2 + 40);
      v8 = *(unsigned int *)(a2 + 36);
      if (v7)
        v9 = (_DWORD *)(v7 + *(_QWORD *)(a2 + 8));
      else
        v9 = 0;
      if (v7)
        v10 = (_DWORD *)(v7 + *(_QWORD *)(a2 + 8) + (*(_DWORD *)(a2 + 24) * v8));
      else
        v10 = 0;
      if (v9 != v10)
      {
        v11 = 0;
        v12 = 0;
        v13 = 0;
        v14 = 0;
        v15 = *(_QWORD *)(a1 + 28);
        v16 = *(_QWORD *)(a2 + 28);
        v17 = *(_DWORD *)(a1 + 16);
        v18 = *(_DWORD *)(a1 + 20);
        v20 = *(_DWORD *)(a2 + 16);
        v19 = *(_DWORD *)(a2 + 20);
        v21 = HIDWORD(v16);
        v22 = HIDWORD(v15);
        v23 = *(unsigned int *)(a1 + 36);
        if (BaseAddress)
          v24 = &BaseAddress[*(_QWORD *)(a1 + 8)];
        else
          v24 = 0;
        v25 = *(_QWORD *)(a2 + 28);
        v26 = *(_QWORD *)(a1 + 28);
        v27 = -(uint64_t)(v20 * v16);
        v28 = -(uint64_t)(v17 * v15);
        do
        {
          *(_DWORD *)v24 = *v9;
          v9 = (_DWORD *)((char *)v9 + v25);
          if (++v13 == v20)
          {
            v13 = 0;
            v9 = (_DWORD *)((char *)v9 + v27 + v21);
            v29 = v14 + 1;
            if (v14 + 1 == v19)
              v14 = 0;
            else
              ++v14;
            if (v29 == v19)
              v9 = (_DWORD *)((char *)v9 + v8 - (v29 * v21));
          }
          v24 += v26;
          if (++v11 == v17)
          {
            v11 = 0;
            v24 += v28 + v22;
            v30 = v12 + 1;
            if (v12 + 1 == v18)
              v12 = 0;
            else
              ++v12;
            if (v30 == v18)
              v24 = &v24[v23 - (v30 * v22)];
          }
        }
        while (v9 != v10);
      }
      if (!CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 48), 0))
        *(_QWORD *)(a1 + 40) = 0;
    }
    if (!CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a2 + 48), 1uLL))
      *(_QWORD *)(a2 + 40) = 0;
  }
  return a1;
}

{
  __CVBuffer *v3;
  char *BaseAddress;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;

  v3 = *(__CVBuffer **)(a1 + 48);
  if (v3 && !CVPixelBufferLockBaseAddress(v3, 0))
  {
    CVPixelBufferGetWidth(*(CVPixelBufferRef *)(a1 + 48));
    CVPixelBufferGetHeight(*(CVPixelBufferRef *)(a1 + 48));
    CVPixelBufferGetBytesPerRow(*(CVPixelBufferRef *)(a1 + 48));
    BaseAddress = (char *)CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)(a1 + 48));
    *(_QWORD *)(a1 + 40) = BaseAddress;
    v6 = *(_QWORD *)(a2 + 32);
    v7 = *(unsigned int *)(a2 + 28);
    if (v6)
      v8 = (_DWORD *)(v6 + *(_QWORD *)a2);
    else
      v8 = 0;
    if (v6)
      v9 = (_DWORD *)(v6 + *(_QWORD *)a2 + (*(_DWORD *)(a2 + 16) * v7));
    else
      v9 = 0;
    if (v8 != v9)
    {
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = *(_QWORD *)(a1 + 28);
      v15 = *(_QWORD *)(a2 + 20);
      v16 = *(_DWORD *)(a1 + 16);
      v17 = *(_DWORD *)(a1 + 20);
      v19 = *(_DWORD *)(a2 + 8);
      v18 = *(_DWORD *)(a2 + 12);
      v20 = HIDWORD(v15);
      v21 = HIDWORD(v14);
      v22 = *(unsigned int *)(a1 + 36);
      if (BaseAddress)
        v23 = &BaseAddress[*(_QWORD *)(a1 + 8)];
      else
        v23 = 0;
      v24 = v15;
      v25 = *(_QWORD *)(a1 + 28);
      v26 = -(uint64_t)(v19 * v15);
      v27 = -(uint64_t)(v16 * v14);
      do
      {
        *(_DWORD *)v23 = *v8;
        v8 = (_DWORD *)((char *)v8 + v24);
        if (++v12 == v19)
        {
          v12 = 0;
          v8 = (_DWORD *)((char *)v8 + v26 + v20);
          v28 = v13 + 1;
          if (v13 + 1 == v18)
            v13 = 0;
          else
            ++v13;
          if (v28 == v18)
            v8 = (_DWORD *)((char *)v8 + v7 - (v28 * v20));
        }
        v23 += v25;
        if (++v10 == v16)
        {
          v10 = 0;
          v23 += v27 + v21;
          v29 = v11 + 1;
          if (v11 + 1 == v17)
            v11 = 0;
          else
            ++v11;
          if (v29 == v17)
            v23 = &v23[v22 - (v29 * v21)];
        }
      }
      while (v8 != v9);
    }
    if (!CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 48), 0))
      *(_QWORD *)(a1 + 40) = 0;
  }
  return a1;
}

uint64_t cva::Buffer<float>::resize(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1[7];
  if (v4)
  {

    MEMORY[0x20BD2D02C](v4, 0xE0C400670D255);
  }
  a1[7] = 0;
  v5 = a1[8];
  if (v5)
  {

    MEMORY[0x20BD2D02C](v5, 0xE0C400670D255);
  }
  a1[8] = 0;
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, a2);
}

uint64_t cva::Buffer<float>::resize(_QWORD *a1, int a2, int a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD v8[3];

  v8[0] = a2;
  v8[1] = a3;
  v8[2] = a4;
  v5 = a1[7];
  if (v5)
  {

    MEMORY[0x20BD2D02C](v5, 0xE0C400670D255);
  }
  a1[7] = 0;
  v6 = a1[8];
  if (v6)
  {

    MEMORY[0x20BD2D02C](v6, 0xE0C400670D255);
  }
  a1[8] = 0;
  return (*(uint64_t (**)(_QWORD *, _DWORD *))(*a1 + 16))(a1, v8);
}

uint64_t cva::Buffer<float>::operator __CVBuffer *(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

CVPixelBufferRef cva::Buffer<float>::allocate(_DWORD *a1, OSType a2)
{
  size_t v3;
  size_t v4;
  __CFDictionary *AttributeDictionary;
  BOOL v7;
  CVPixelBufferRef pixelBufferOut;

  v3 = (a1[1] * *a1);
  v4 = a1[2];
  AttributeDictionary = cva::createAttributeDictionary((cva *)v3, v4, a2, 64, 64, 0, 0, 0, v7);
  pixelBufferOut = 0;
  CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v3, v4, a2, AttributeDictionary, &pixelBufferOut);
  CFRelease(AttributeDictionary);
  return pixelBufferOut;
}

double cva::Buffer<unsigned short>::Buffer(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)a1 = &unk_24C37FEE0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)a1 = &unk_24C37FEE0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t cva::Buffer<unsigned short>::Buffer(uint64_t a1, _DWORD *a2)
{
  int v3;
  size_t v4;
  unsigned int v5;
  uint64_t v6;
  size_t v7;
  __CFDictionary *AttributeDictionary;
  CVPixelBufferRef v9;
  BOOL v11;
  CVPixelBufferRef pixelBufferOut;

  v3 = 2 * *a2;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = a2[2];
  v5 = (a2[1] * v3 + 63) & 0xFFFFFFC0;
  v6 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 28) = 2;
  *(_DWORD *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 36) = v5;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = &unk_24C37FEE0;
  v7 = (HIDWORD(v6) * v6);
  AttributeDictionary = cva::createAttributeDictionary((cva *)v7, v4, 2037741158, 64, 64, 0, 0, 0, v11);
  pixelBufferOut = 0;
  CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v7, v4, 0x79757666u, AttributeDictionary, &pixelBufferOut);
  CFRelease(AttributeDictionary);
  v9 = pixelBufferOut;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = v9;
  return a1;
}

{
  int v3;
  size_t v4;
  unsigned int v5;
  uint64_t v6;
  size_t v7;
  __CFDictionary *AttributeDictionary;
  CVPixelBufferRef v9;
  BOOL v11;
  CVPixelBufferRef pixelBufferOut;

  v3 = 2 * *a2;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = a2[2];
  v5 = (a2[1] * v3 + 63) & 0xFFFFFFC0;
  v6 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 28) = 2;
  *(_DWORD *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 36) = v5;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = &unk_24C37FEE0;
  v7 = (HIDWORD(v6) * v6);
  AttributeDictionary = cva::createAttributeDictionary((cva *)v7, v4, 2037741158, 64, 64, 0, 0, 0, v11);
  pixelBufferOut = 0;
  CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v7, v4, 0x79757666u, AttributeDictionary, &pixelBufferOut);
  CFRelease(AttributeDictionary);
  v9 = pixelBufferOut;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = v9;
  return a1;
}

_DWORD *cva::Buffer<unsigned short>::defaultStride@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  int v2;
  int v3;

  v2 = result[1];
  v3 = 2 * *result;
  *a2 = 2;
  a2[1] = v3;
  a2[2] = (v2 * v3 + 63) & 0xFFFFFFC0;
  return result;
}

CVPixelBufferRef cva::Buffer<unsigned short>::allocate(_DWORD *a1)
{
  size_t v1;
  size_t v2;
  __CFDictionary *AttributeDictionary;
  BOOL v5;
  CVPixelBufferRef pixelBufferOut;

  v1 = (a1[1] * *a1);
  v2 = a1[2];
  AttributeDictionary = cva::createAttributeDictionary((cva *)v1, v2, 2037741158, 64, 64, 0, 0, 0, v5);
  pixelBufferOut = 0;
  CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v1, v2, 0x79757666u, AttributeDictionary, &pixelBufferOut);
  CFRelease(AttributeDictionary);
  return pixelBufferOut;
}

uint64_t cva::Buffer<unsigned short>::Buffer(uint64_t a1, int a2, int a3, unsigned int a4)
{
  size_t v6;
  __CFDictionary *AttributeDictionary;
  CVPixelBufferRef v8;
  BOOL v10;
  CVPixelBufferRef pixelBufferOut;

  *(_DWORD *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + 20) = a3;
  *(_DWORD *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 28) = 2;
  *(_DWORD *)(a1 + 32) = 2 * a2;
  *(_DWORD *)(a1 + 36) = (2 * a2 * a3 + 63) & 0xFFFFFFC0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = &unk_24C37FEE0;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = (a3 * a2);
  AttributeDictionary = cva::createAttributeDictionary((cva *)v6, a4, 2037741158, 64, 64, 0, 0, 0, v10);
  pixelBufferOut = 0;
  CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v6, a4, 0x79757666u, AttributeDictionary, &pixelBufferOut);
  CFRelease(AttributeDictionary);
  v8 = pixelBufferOut;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = v8;
  return a1;
}

{
  size_t v6;
  __CFDictionary *AttributeDictionary;
  CVPixelBufferRef v8;
  BOOL v10;
  CVPixelBufferRef pixelBufferOut;

  *(_DWORD *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + 20) = a3;
  *(_DWORD *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 28) = 2;
  *(_DWORD *)(a1 + 32) = 2 * a2;
  *(_DWORD *)(a1 + 36) = (2 * a2 * a3 + 63) & 0xFFFFFFC0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = &unk_24C37FEE0;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = (a3 * a2);
  AttributeDictionary = cva::createAttributeDictionary((cva *)v6, a4, 2037741158, 64, 64, 0, 0, 0, v10);
  pixelBufferOut = 0;
  CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v6, a4, 0x79757666u, AttributeDictionary, &pixelBufferOut);
  CFRelease(AttributeDictionary);
  v8 = pixelBufferOut;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = v8;
  return a1;
}

double cva::Buffer<unsigned short>::Buffer(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  double result;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v2 = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v2;
  v3 = *(_QWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 28) = v3;
  *(_QWORD *)a1 = &unk_24C37FEE0;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a2 + 36) = 0;
  result = 0.0;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  double result;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v2 = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v2;
  v3 = *(_QWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 28) = v3;
  *(_QWORD *)a1 = &unk_24C37FEE0;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a2 + 36) = 0;
  result = 0.0;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  return result;
}

__n128 cva::Buffer<unsigned short>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;

  v2 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_DWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 28);
  v8 = *(_DWORD *)(a1 + 36);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v3;
  LODWORD(v3) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 28) = *(_QWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 36) = v3;
  *(_QWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = v9;
  *(_DWORD *)(a2 + 24) = v10;
  *(_QWORD *)(a2 + 28) = v7;
  *(_DWORD *)(a2 + 36) = v8;
  v4 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = v4;
  v5 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = v5;
  result = *(__n128 *)(a1 + 56);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(__n128 *)(a2 + 56) = result;
  return result;
}

uint64_t cva::Buffer<unsigned short>::Buffer(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  unsigned int v6;
  size_t v7;
  size_t v8;
  __CFDictionary *AttributeDictionary;
  __CVBuffer *v10;
  __CVBuffer *v11;
  char *BaseAddress;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  _WORD *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  CVPixelBufferRef v38[4];

  v38[3] = *(CVPixelBufferRef *)MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a2 + 24);
  v5 = 2 * *(_DWORD *)(a2 + 16);
  v6 = (*(_DWORD *)(a2 + 20) * v5 + 63) & 0xFFFFFFC0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 28) = 2;
  *(_DWORD *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 36) = v6;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = &unk_24C37FEE0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v7 = *(unsigned int *)(a1 + 24);
  v8 = (*(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
  AttributeDictionary = cva::createAttributeDictionary((cva *)v8, v7, 2037741158, 64, 64, 0, 0, 0, (BOOL)v38[0]);
  v38[0] = 0;
  CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v8, v7, 0x79757666u, AttributeDictionary, v38);
  CFRelease(AttributeDictionary);
  *(CVPixelBufferRef *)(a1 + 48) = v38[0];
  v10 = *(__CVBuffer **)(a2 + 48);
  if (v10 && !CVPixelBufferLockBaseAddress(v10, 1uLL))
  {
    CVPixelBufferGetWidth(*(CVPixelBufferRef *)(a2 + 48));
    CVPixelBufferGetHeight(*(CVPixelBufferRef *)(a2 + 48));
    CVPixelBufferGetBytesPerRow(*(CVPixelBufferRef *)(a2 + 48));
    *(_QWORD *)(a2 + 40) = CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)(a2 + 48));
    v11 = *(__CVBuffer **)(a1 + 48);
    if (v11 && !CVPixelBufferLockBaseAddress(v11, 0))
    {
      CVPixelBufferGetWidth(*(CVPixelBufferRef *)(a1 + 48));
      CVPixelBufferGetHeight(*(CVPixelBufferRef *)(a1 + 48));
      CVPixelBufferGetBytesPerRow(*(CVPixelBufferRef *)(a1 + 48));
      BaseAddress = (char *)CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)(a1 + 48));
      *(_QWORD *)(a1 + 40) = BaseAddress;
      v13 = *(unsigned int *)(a1 + 36);
      v14 = *(unsigned int *)(a2 + 36);
      if (*(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28)
        && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32)
        && (_DWORD)v13 == (_DWORD)v14)
      {
        memcpy(BaseAddress, *(const void **)(a2 + 40), (*(_DWORD *)(a2 + 24) * v13));
      }
      else
      {
        v15 = *(_QWORD *)(a2 + 40);
        if (v15)
          v16 = (_WORD *)(v15 + *(_QWORD *)(a2 + 8));
        else
          v16 = 0;
        if (v15)
          v17 = (_WORD *)(v15 + *(_QWORD *)(a2 + 8) + (*(_DWORD *)(a2 + 24) * v14));
        else
          v17 = 0;
        if (v16 != v17)
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
          v21 = 0;
          v22 = *(_DWORD *)(a2 + 16);
          v23 = *(_DWORD *)(a2 + 20);
          v25 = *(_DWORD *)(a1 + 16);
          v24 = *(_DWORD *)(a1 + 20);
          v26 = *(_QWORD *)(a1 + 28);
          v27 = *(_QWORD *)(a2 + 28);
          if (BaseAddress)
            v28 = &BaseAddress[*(_QWORD *)(a1 + 8)];
          else
            v28 = 0;
          v29 = *(_QWORD *)(a2 + 28);
          v30 = HIDWORD(v27);
          v31 = *(_QWORD *)(a1 + 28);
          v32 = HIDWORD(v26);
          v33 = -(uint64_t)(v22 * v27);
          v34 = -(uint64_t)(v25 * v26);
          do
          {
            *(_WORD *)v28 = *v16;
            v16 = (_WORD *)((char *)v16 + v29);
            if (++v19 == v22)
            {
              v19 = 0;
              v16 = (_WORD *)((char *)v16 + v33 + v30);
              v35 = v18 + 1;
              if (v18 + 1 == v23)
                v18 = 0;
              else
                ++v18;
              if (v35 == v23)
                v16 = (_WORD *)((char *)v16 + v14 - (v35 * v30));
            }
            v28 += v31;
            if (++v21 == v25)
            {
              v21 = 0;
              v28 += v34 + v32;
              v36 = v20 + 1;
              if (v20 + 1 == v24)
                v20 = 0;
              else
                ++v20;
              if (v36 == v24)
                v28 = &v28[v13 - (v36 * v32)];
            }
          }
          while (v16 != v17);
        }
      }
      if (!CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 48), 0))
        *(_QWORD *)(a1 + 40) = 0;
    }
    if (!CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a2 + 48), 1uLL))
      *(_QWORD *)(a2 + 40) = 0;
  }
  return a1;
}

{
  int v4;
  int v5;
  unsigned int v6;
  size_t v7;
  size_t v8;
  __CFDictionary *AttributeDictionary;
  __CVBuffer *v10;
  char *BaseAddress;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _WORD *v15;
  _WORD *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  CVPixelBufferRef pixelBuffer[4];

  pixelBuffer[3] = *(CVPixelBufferRef *)MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a2 + 16);
  v5 = 2 * *(_DWORD *)(a2 + 8);
  v6 = (*(_DWORD *)(a2 + 12) * v5 + 63) & 0xFFFFFFC0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 28) = 2;
  *(_DWORD *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 36) = v6;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = &unk_24C37FEE0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v7 = *(unsigned int *)(a1 + 24);
  v8 = (*(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
  AttributeDictionary = cva::createAttributeDictionary((cva *)v8, v7, 2037741158, 64, 64, 0, 0, 0, (BOOL)pixelBuffer[0]);
  pixelBuffer[0] = 0;
  CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v8, v7, 0x79757666u, AttributeDictionary, pixelBuffer);
  CFRelease(AttributeDictionary);
  v10 = pixelBuffer[0];
  *(CVPixelBufferRef *)(a1 + 48) = pixelBuffer[0];
  if (v10 && !CVPixelBufferLockBaseAddress(v10, 0))
  {
    CVPixelBufferGetWidth(*(CVPixelBufferRef *)(a1 + 48));
    CVPixelBufferGetHeight(*(CVPixelBufferRef *)(a1 + 48));
    CVPixelBufferGetBytesPerRow(*(CVPixelBufferRef *)(a1 + 48));
    BaseAddress = (char *)CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)(a1 + 48));
    *(_QWORD *)(a1 + 40) = BaseAddress;
    v12 = *(unsigned int *)(a1 + 36);
    v13 = *(unsigned int *)(a2 + 28);
    if (*(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 20)
      && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 24)
      && (_DWORD)v12 == (_DWORD)v13)
    {
      memcpy(BaseAddress, *(const void **)(a2 + 32), (*(_DWORD *)(a2 + 16) * v12));
    }
    else
    {
      v14 = *(_QWORD *)(a2 + 32);
      if (v14)
        v15 = (_WORD *)(v14 + *(_QWORD *)a2);
      else
        v15 = 0;
      if (v14)
        v16 = (_WORD *)(v14 + *(_QWORD *)a2 + (*(_DWORD *)(a2 + 16) * v13));
      else
        v16 = 0;
      if (v15 != v16)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        v20 = 0;
        v21 = *(_DWORD *)(a2 + 8);
        v22 = *(_DWORD *)(a2 + 12);
        v24 = *(_DWORD *)(a1 + 16);
        v23 = *(_DWORD *)(a1 + 20);
        v25 = *(_QWORD *)(a1 + 28);
        v26 = *(_QWORD *)(a2 + 20);
        if (BaseAddress)
          v27 = &BaseAddress[*(_QWORD *)(a1 + 8)];
        else
          v27 = 0;
        v28 = *(_QWORD *)(a2 + 20);
        v29 = HIDWORD(v26);
        v30 = *(_QWORD *)(a1 + 28);
        v31 = HIDWORD(v25);
        v32 = -(uint64_t)(v21 * v26);
        v33 = -(uint64_t)(v24 * v25);
        do
        {
          *(_WORD *)v27 = *v15;
          v15 = (_WORD *)((char *)v15 + v28);
          if (++v18 == v21)
          {
            v18 = 0;
            v15 = (_WORD *)((char *)v15 + v32 + v29);
            v34 = v17 + 1;
            if (v17 + 1 == v22)
              v17 = 0;
            else
              ++v17;
            if (v34 == v22)
              v15 = (_WORD *)((char *)v15 + v13 - (v34 * v29));
          }
          v27 += v30;
          if (++v20 == v24)
          {
            v20 = 0;
            v27 += v33 + v31;
            v35 = v19 + 1;
            if (v19 + 1 == v23)
              v19 = 0;
            else
              ++v19;
            if (v35 == v23)
              v27 = &v27[v12 - (v35 * v31)];
          }
        }
        while (v15 != v16);
      }
    }
    if (!CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 48), 0))
      *(_QWORD *)(a1 + 40) = 0;
  }
  return a1;
}

{
  return __ZN3cva6BufferItEC2ERKNS_9ArrayViewItLj3EEE(a1, a2);
}

{
  return __ZN3cva6BufferItEC2ERKS1_(a1, a2);
}

__CVBuffer *cva::Buffer<unsigned short>::lock(uint64_t a1, CVPixelBufferLockFlags a2)
{
  __CVBuffer *result;

  result = *(__CVBuffer **)(a1 + 48);
  if (result)
  {
    if (CVPixelBufferLockBaseAddress(result, a2))
    {
      return 0;
    }
    else
    {
      CVPixelBufferGetWidth(*(CVPixelBufferRef *)(a1 + 48));
      CVPixelBufferGetHeight(*(CVPixelBufferRef *)(a1 + 48));
      CVPixelBufferGetBytesPerRow(*(CVPixelBufferRef *)(a1 + 48));
      *(_QWORD *)(a1 + 40) = CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)(a1 + 48));
      return (__CVBuffer *)1;
    }
  }
  return result;
}

BOOL cva::Buffer<unsigned short>::unlock(uint64_t a1, CVPixelBufferLockFlags a2)
{
  CVReturn v3;

  v3 = CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 48), a2);
  if (!v3)
    *(_QWORD *)(a1 + 40) = 0;
  return v3 == 0;
}

uint64_t cva::Buffer<unsigned short>::operator=(uint64_t a1, uint64_t a2)
{
  __CVBuffer *v3;
  __CVBuffer *v5;
  char *BaseAddress;
  uint64_t v7;
  uint64_t v8;
  _WORD *v9;
  _WORD *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;

  v3 = *(__CVBuffer **)(a2 + 48);
  if (v3 && !CVPixelBufferLockBaseAddress(v3, 1uLL))
  {
    CVPixelBufferGetWidth(*(CVPixelBufferRef *)(a2 + 48));
    CVPixelBufferGetHeight(*(CVPixelBufferRef *)(a2 + 48));
    CVPixelBufferGetBytesPerRow(*(CVPixelBufferRef *)(a2 + 48));
    *(_QWORD *)(a2 + 40) = CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)(a2 + 48));
    v5 = *(__CVBuffer **)(a1 + 48);
    if (v5 && !CVPixelBufferLockBaseAddress(v5, 0))
    {
      CVPixelBufferGetWidth(*(CVPixelBufferRef *)(a1 + 48));
      CVPixelBufferGetHeight(*(CVPixelBufferRef *)(a1 + 48));
      CVPixelBufferGetBytesPerRow(*(CVPixelBufferRef *)(a1 + 48));
      BaseAddress = (char *)CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)(a1 + 48));
      *(_QWORD *)(a1 + 40) = BaseAddress;
      v7 = *(_QWORD *)(a2 + 40);
      v8 = *(unsigned int *)(a2 + 36);
      if (v7)
        v9 = (_WORD *)(v7 + *(_QWORD *)(a2 + 8));
      else
        v9 = 0;
      if (v7)
        v10 = (_WORD *)(v7 + *(_QWORD *)(a2 + 8) + (*(_DWORD *)(a2 + 24) * v8));
      else
        v10 = 0;
      if (v9 != v10)
      {
        v11 = 0;
        v12 = 0;
        v13 = 0;
        v14 = 0;
        v15 = *(_QWORD *)(a1 + 28);
        v16 = *(_QWORD *)(a2 + 28);
        v17 = *(_DWORD *)(a1 + 16);
        v18 = *(_DWORD *)(a1 + 20);
        v20 = *(_DWORD *)(a2 + 16);
        v19 = *(_DWORD *)(a2 + 20);
        v21 = HIDWORD(v16);
        v22 = HIDWORD(v15);
        v23 = *(unsigned int *)(a1 + 36);
        if (BaseAddress)
          v24 = &BaseAddress[*(_QWORD *)(a1 + 8)];
        else
          v24 = 0;
        v25 = *(_QWORD *)(a2 + 28);
        v26 = *(_QWORD *)(a1 + 28);
        v27 = -(uint64_t)(v20 * v16);
        v28 = -(uint64_t)(v17 * v15);
        do
        {
          *(_WORD *)v24 = *v9;
          v9 = (_WORD *)((char *)v9 + v25);
          if (++v13 == v20)
          {
            v13 = 0;
            v9 = (_WORD *)((char *)v9 + v27 + v21);
            v29 = v14 + 1;
            if (v14 + 1 == v19)
              v14 = 0;
            else
              ++v14;
            if (v29 == v19)
              v9 = (_WORD *)((char *)v9 + v8 - (v29 * v21));
          }
          v24 += v26;
          if (++v11 == v17)
          {
            v11 = 0;
            v24 += v28 + v22;
            v30 = v12 + 1;
            if (v12 + 1 == v18)
              v12 = 0;
            else
              ++v12;
            if (v30 == v18)
              v24 = &v24[v23 - (v30 * v22)];
          }
        }
        while (v9 != v10);
      }
      if (!CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 48), 0))
        *(_QWORD *)(a1 + 40) = 0;
    }
    if (!CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a2 + 48), 1uLL))
      *(_QWORD *)(a2 + 40) = 0;
  }
  return a1;
}

{
  __CVBuffer *v3;
  char *BaseAddress;
  uint64_t v6;
  uint64_t v7;
  _WORD *v8;
  _WORD *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;

  v3 = *(__CVBuffer **)(a1 + 48);
  if (v3 && !CVPixelBufferLockBaseAddress(v3, 0))
  {
    CVPixelBufferGetWidth(*(CVPixelBufferRef *)(a1 + 48));
    CVPixelBufferGetHeight(*(CVPixelBufferRef *)(a1 + 48));
    CVPixelBufferGetBytesPerRow(*(CVPixelBufferRef *)(a1 + 48));
    BaseAddress = (char *)CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)(a1 + 48));
    *(_QWORD *)(a1 + 40) = BaseAddress;
    v6 = *(_QWORD *)(a2 + 32);
    v7 = *(unsigned int *)(a2 + 28);
    if (v6)
      v8 = (_WORD *)(v6 + *(_QWORD *)a2);
    else
      v8 = 0;
    if (v6)
      v9 = (_WORD *)(v6 + *(_QWORD *)a2 + (*(_DWORD *)(a2 + 16) * v7));
    else
      v9 = 0;
    if (v8 != v9)
    {
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = *(_QWORD *)(a1 + 28);
      v15 = *(_QWORD *)(a2 + 20);
      v16 = *(_DWORD *)(a1 + 16);
      v17 = *(_DWORD *)(a1 + 20);
      v19 = *(_DWORD *)(a2 + 8);
      v18 = *(_DWORD *)(a2 + 12);
      v20 = HIDWORD(v15);
      v21 = HIDWORD(v14);
      v22 = *(unsigned int *)(a1 + 36);
      if (BaseAddress)
        v23 = &BaseAddress[*(_QWORD *)(a1 + 8)];
      else
        v23 = 0;
      v24 = v15;
      v25 = *(_QWORD *)(a1 + 28);
      v26 = -(uint64_t)(v19 * v15);
      v27 = -(uint64_t)(v16 * v14);
      do
      {
        *(_WORD *)v23 = *v8;
        v8 = (_WORD *)((char *)v8 + v24);
        if (++v12 == v19)
        {
          v12 = 0;
          v8 = (_WORD *)((char *)v8 + v26 + v20);
          v28 = v13 + 1;
          if (v13 + 1 == v18)
            v13 = 0;
          else
            ++v13;
          if (v28 == v18)
            v8 = (_WORD *)((char *)v8 + v7 - (v28 * v20));
        }
        v23 += v25;
        if (++v10 == v16)
        {
          v10 = 0;
          v23 += v27 + v21;
          v29 = v11 + 1;
          if (v11 + 1 == v17)
            v11 = 0;
          else
            ++v11;
          if (v29 == v17)
            v23 = &v23[v22 - (v29 * v21)];
        }
      }
      while (v8 != v9);
    }
    if (!CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 48), 0))
      *(_QWORD *)(a1 + 40) = 0;
  }
  return a1;
}

uint64_t cva::Buffer<unsigned short>::resize(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1[7];
  if (v4)
  {

    MEMORY[0x20BD2D02C](v4, 0xE0C400670D255);
  }
  a1[7] = 0;
  v5 = a1[8];
  if (v5)
  {

    MEMORY[0x20BD2D02C](v5, 0xE0C400670D255);
  }
  a1[8] = 0;
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, a2);
}

uint64_t cva::Buffer<unsigned short>::resize(_QWORD *a1, int a2, int a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD v8[3];

  v8[0] = a2;
  v8[1] = a3;
  v8[2] = a4;
  v5 = a1[7];
  if (v5)
  {

    MEMORY[0x20BD2D02C](v5, 0xE0C400670D255);
  }
  a1[7] = 0;
  v6 = a1[8];
  if (v6)
  {

    MEMORY[0x20BD2D02C](v6, 0xE0C400670D255);
  }
  a1[8] = 0;
  return (*(uint64_t (**)(_QWORD *, _DWORD *))(*a1 + 16))(a1, v8);
}

uint64_t cva::Buffer<unsigned short>::operator __CVBuffer *(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

CVPixelBufferRef cva::Buffer<unsigned short>::allocate(_DWORD *a1, OSType a2)
{
  size_t v3;
  size_t v4;
  __CFDictionary *AttributeDictionary;
  BOOL v7;
  CVPixelBufferRef pixelBufferOut;

  v3 = (a1[1] * *a1);
  v4 = a1[2];
  AttributeDictionary = cva::createAttributeDictionary((cva *)v3, v4, a2, 64, 64, 0, 0, 0, v7);
  pixelBufferOut = 0;
  CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v3, v4, a2, AttributeDictionary, &pixelBufferOut);
  CFRelease(AttributeDictionary);
  return pixelBufferOut;
}

double cva::Buffer<unsigned char>::Buffer(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)a1 = &unk_24C37FE80;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)a1 = &unk_24C37FE80;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t cva::Buffer<unsigned char>::Buffer(uint64_t a1, int *a2)
{
  int v3;
  size_t v4;
  unsigned int v5;
  uint64_t v6;
  size_t v7;
  __CFDictionary *AttributeDictionary;
  CVPixelBufferRef v9;
  BOOL v11;
  CVPixelBufferRef pixelBufferOut;

  v3 = *a2;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = a2[2];
  v5 = (a2[1] * v3 + 63) & 0xFFFFFFC0;
  v6 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 28) = 1;
  *(_DWORD *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 36) = v5;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = &unk_24C37FE80;
  v7 = (HIDWORD(v6) * v6);
  AttributeDictionary = cva::createAttributeDictionary((cva *)v7, v4, 1278226488, 64, 64, 0, 0, 0, v11);
  pixelBufferOut = 0;
  CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v7, v4, 0x4C303038u, AttributeDictionary, &pixelBufferOut);
  CFRelease(AttributeDictionary);
  v9 = pixelBufferOut;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = v9;
  return a1;
}

{
  int v3;
  size_t v4;
  unsigned int v5;
  uint64_t v6;
  size_t v7;
  __CFDictionary *AttributeDictionary;
  CVPixelBufferRef v9;
  BOOL v11;
  CVPixelBufferRef pixelBufferOut;

  v3 = *a2;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = a2[2];
  v5 = (a2[1] * v3 + 63) & 0xFFFFFFC0;
  v6 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 28) = 1;
  *(_DWORD *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 36) = v5;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = &unk_24C37FE80;
  v7 = (HIDWORD(v6) * v6);
  AttributeDictionary = cva::createAttributeDictionary((cva *)v7, v4, 1278226488, 64, 64, 0, 0, 0, v11);
  pixelBufferOut = 0;
  CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v7, v4, 0x4C303038u, AttributeDictionary, &pixelBufferOut);
  CFRelease(AttributeDictionary);
  v9 = pixelBufferOut;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = v9;
  return a1;
}

int *cva::Buffer<unsigned char>::defaultStride@<X0>(int *result@<X0>, _DWORD *a2@<X8>)
{
  int v2;
  int v3;

  v2 = *result;
  v3 = result[1];
  *a2 = 1;
  a2[1] = v2;
  a2[2] = (v3 * v2 + 63) & 0xFFFFFFC0;
  return result;
}

CVPixelBufferRef cva::Buffer<unsigned char>::allocate(_DWORD *a1)
{
  size_t v1;
  size_t v2;
  __CFDictionary *AttributeDictionary;
  BOOL v5;
  CVPixelBufferRef pixelBufferOut;

  v1 = (a1[1] * *a1);
  v2 = a1[2];
  AttributeDictionary = cva::createAttributeDictionary((cva *)v1, v2, 1278226488, 64, 64, 0, 0, 0, v5);
  pixelBufferOut = 0;
  CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v1, v2, 0x4C303038u, AttributeDictionary, &pixelBufferOut);
  CFRelease(AttributeDictionary);
  return pixelBufferOut;
}

uint64_t cva::Buffer<unsigned char>::Buffer(uint64_t a1, int a2, int a3, unsigned int a4)
{
  size_t v6;
  __CFDictionary *AttributeDictionary;
  CVPixelBufferRef v8;
  BOOL v10;
  CVPixelBufferRef pixelBufferOut;

  v6 = (a3 * a2);
  *(_DWORD *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + 20) = a3;
  *(_DWORD *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 28) = 1;
  *(_DWORD *)(a1 + 32) = a2;
  *(_DWORD *)(a1 + 36) = (v6 + 63) & 0xFFFFFFC0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = &unk_24C37FE80;
  *(_QWORD *)(a1 + 8) = 0;
  AttributeDictionary = cva::createAttributeDictionary((cva *)v6, a4, 1278226488, 64, 64, 0, 0, 0, v10);
  pixelBufferOut = 0;
  CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v6, a4, 0x4C303038u, AttributeDictionary, &pixelBufferOut);
  CFRelease(AttributeDictionary);
  v8 = pixelBufferOut;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = v8;
  return a1;
}

{
  size_t v6;
  __CFDictionary *AttributeDictionary;
  CVPixelBufferRef v8;
  BOOL v10;
  CVPixelBufferRef pixelBufferOut;

  v6 = (a3 * a2);
  *(_DWORD *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + 20) = a3;
  *(_DWORD *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 28) = 1;
  *(_DWORD *)(a1 + 32) = a2;
  *(_DWORD *)(a1 + 36) = (v6 + 63) & 0xFFFFFFC0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = &unk_24C37FE80;
  *(_QWORD *)(a1 + 8) = 0;
  AttributeDictionary = cva::createAttributeDictionary((cva *)v6, a4, 1278226488, 64, 64, 0, 0, 0, v10);
  pixelBufferOut = 0;
  CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v6, a4, 0x4C303038u, AttributeDictionary, &pixelBufferOut);
  CFRelease(AttributeDictionary);
  v8 = pixelBufferOut;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = v8;
  return a1;
}

double cva::Buffer<unsigned char>::Buffer(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  double result;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v2 = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v2;
  v3 = *(_QWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 28) = v3;
  *(_QWORD *)a1 = &unk_24C37FE80;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a2 + 36) = 0;
  result = 0.0;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  double result;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v2 = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v2;
  v3 = *(_QWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 28) = v3;
  *(_QWORD *)a1 = &unk_24C37FE80;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a2 + 36) = 0;
  result = 0.0;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  return result;
}

__n128 cva::Buffer<unsigned char>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;

  v2 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_DWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 28);
  v8 = *(_DWORD *)(a1 + 36);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v3;
  LODWORD(v3) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 28) = *(_QWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 36) = v3;
  *(_QWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = v9;
  *(_DWORD *)(a2 + 24) = v10;
  *(_QWORD *)(a2 + 28) = v7;
  *(_DWORD *)(a2 + 36) = v8;
  v4 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = v4;
  v5 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = v5;
  result = *(__n128 *)(a1 + 56);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(__n128 *)(a2 + 56) = result;
  return result;
}

uint64_t cva::Buffer<unsigned char>::Buffer(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  unsigned int v6;
  size_t v7;
  size_t v8;
  __CFDictionary *AttributeDictionary;
  __CVBuffer *v10;
  __CVBuffer *v11;
  _BYTE *BaseAddress;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  _BYTE *v23;
  _BYTE *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  CVPixelBufferRef v36[4];

  v36[3] = *(CVPixelBufferRef *)MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a2 + 24);
  v5 = *(_DWORD *)(a2 + 16);
  v6 = (*(_DWORD *)(a2 + 20) * v5 + 63) & 0xFFFFFFC0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 28) = 1;
  *(_DWORD *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 36) = v6;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = &unk_24C37FE80;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v7 = *(unsigned int *)(a1 + 24);
  v8 = (*(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
  AttributeDictionary = cva::createAttributeDictionary((cva *)v8, v7, 1278226488, 64, 64, 0, 0, 0, (BOOL)v36[0]);
  v36[0] = 0;
  CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v8, v7, 0x4C303038u, AttributeDictionary, v36);
  CFRelease(AttributeDictionary);
  *(CVPixelBufferRef *)(a1 + 48) = v36[0];
  v10 = *(__CVBuffer **)(a2 + 48);
  if (v10 && !CVPixelBufferLockBaseAddress(v10, 1uLL))
  {
    CVPixelBufferGetWidth(*(CVPixelBufferRef *)(a2 + 48));
    CVPixelBufferGetHeight(*(CVPixelBufferRef *)(a2 + 48));
    CVPixelBufferGetBytesPerRow(*(CVPixelBufferRef *)(a2 + 48));
    *(_QWORD *)(a2 + 40) = CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)(a2 + 48));
    v11 = *(__CVBuffer **)(a1 + 48);
    if (v11 && !CVPixelBufferLockBaseAddress(v11, 0))
    {
      CVPixelBufferGetWidth(*(CVPixelBufferRef *)(a1 + 48));
      CVPixelBufferGetHeight(*(CVPixelBufferRef *)(a1 + 48));
      CVPixelBufferGetBytesPerRow(*(CVPixelBufferRef *)(a1 + 48));
      BaseAddress = CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)(a1 + 48));
      *(_QWORD *)(a1 + 40) = BaseAddress;
      v13 = *(unsigned int *)(a1 + 28);
      v14 = *(unsigned int *)(a1 + 32);
      v15 = *(unsigned int *)(a1 + 36);
      v16 = *(unsigned int *)(a2 + 28);
      v17 = *(unsigned int *)(a2 + 32);
      v18 = *(unsigned int *)(a2 + 36);
      if (__PAIR64__(v14, v13) == __PAIR64__(v17, v16) && (_DWORD)v15 == (_DWORD)v18)
      {
        memcpy(BaseAddress, *(const void **)(a2 + 40), (*(_DWORD *)(a2 + 24) * v15));
      }
      else
      {
        v19 = *(_QWORD *)(a2 + 40);
        v20 = *(_QWORD *)(a2 + 8);
        v21 = v19 + v20;
        v22 = v19 == 0;
        if (v19)
          v23 = (_BYTE *)(v19 + v20);
        else
          v23 = 0;
        v24 = (_BYTE *)(v21 + (v18 * *(_DWORD *)(a2 + 24)));
        if (v22)
          v24 = 0;
        if (BaseAddress)
          BaseAddress += *(_QWORD *)(a1 + 8);
        if (v23 != v24)
        {
          v25 = 0;
          v26 = 0;
          v27 = 0;
          v28 = 0;
          v29 = *(_DWORD *)(a2 + 16);
          v30 = *(_DWORD *)(a2 + 20);
          v31 = *(_DWORD *)(a1 + 16);
          v32 = *(_DWORD *)(a1 + 20);
          do
          {
            *BaseAddress = *v23;
            v23 += v16;
            if (++v25 == v29)
            {
              v25 = 0;
              v23 = &v23[v17 - (v16 * v29)];
              v33 = v26 + 1;
              if (v26 + 1 == v30)
                v26 = 0;
              else
                ++v26;
              if (v33 == v30)
                v23 = &v23[v18 - (v17 * v33)];
            }
            BaseAddress += v13;
            if (++v27 == v31)
            {
              v27 = 0;
              BaseAddress = &BaseAddress[v14 - (v13 * v31)];
              v34 = v28 + 1;
              if (v28 + 1 == v32)
                v28 = 0;
              else
                ++v28;
              if (v34 == v32)
                BaseAddress = &BaseAddress[v15 - (v14 * v34)];
            }
          }
          while (v23 != v24);
        }
      }
      if (!CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 48), 0))
        *(_QWORD *)(a1 + 40) = 0;
    }
    if (!CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a2 + 48), 1uLL))
      *(_QWORD *)(a2 + 40) = 0;
  }
  return a1;
}

{
  int v4;
  int v5;
  unsigned int v6;
  size_t v7;
  size_t v8;
  __CFDictionary *AttributeDictionary;
  __CVBuffer *v10;
  _BYTE *BaseAddress;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  _BYTE *v20;
  _BYTE *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  CVPixelBufferRef pixelBuffer[4];

  pixelBuffer[3] = *(CVPixelBufferRef *)MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 8);
  v6 = (*(_DWORD *)(a2 + 12) * v5 + 63) & 0xFFFFFFC0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 28) = 1;
  *(_DWORD *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 36) = v6;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = &unk_24C37FE80;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v7 = *(unsigned int *)(a1 + 24);
  v8 = (*(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
  AttributeDictionary = cva::createAttributeDictionary((cva *)v8, v7, 1278226488, 64, 64, 0, 0, 0, (BOOL)pixelBuffer[0]);
  pixelBuffer[0] = 0;
  CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v8, v7, 0x4C303038u, AttributeDictionary, pixelBuffer);
  CFRelease(AttributeDictionary);
  v10 = pixelBuffer[0];
  *(CVPixelBufferRef *)(a1 + 48) = pixelBuffer[0];
  if (v10 && !CVPixelBufferLockBaseAddress(v10, 0))
  {
    CVPixelBufferGetWidth(*(CVPixelBufferRef *)(a1 + 48));
    CVPixelBufferGetHeight(*(CVPixelBufferRef *)(a1 + 48));
    CVPixelBufferGetBytesPerRow(*(CVPixelBufferRef *)(a1 + 48));
    BaseAddress = CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)(a1 + 48));
    *(_QWORD *)(a1 + 40) = BaseAddress;
    v12 = *(unsigned int *)(a1 + 28);
    v13 = *(unsigned int *)(a1 + 32);
    v14 = *(unsigned int *)(a1 + 36);
    v15 = *(unsigned int *)(a2 + 20);
    v16 = *(unsigned int *)(a2 + 24);
    v17 = *(unsigned int *)(a2 + 28);
    if (__PAIR64__(v13, v12) == __PAIR64__(v16, v15) && (_DWORD)v14 == (_DWORD)v17)
    {
      memcpy(BaseAddress, *(const void **)(a2 + 32), (*(_DWORD *)(a2 + 16) * v14));
    }
    else
    {
      v18 = *(_QWORD *)(a2 + 32);
      v19 = v18 == 0;
      if (v18)
        v20 = (_BYTE *)(v18 + *(_QWORD *)a2);
      else
        v20 = 0;
      v21 = (_BYTE *)(v18 + *(_QWORD *)a2 + (v17 * *(_DWORD *)(a2 + 16)));
      if (v19)
        v21 = 0;
      if (BaseAddress)
        BaseAddress += *(_QWORD *)(a1 + 8);
      if (v20 != v21)
      {
        v22 = 0;
        v23 = 0;
        v24 = 0;
        v25 = 0;
        v26 = *(_DWORD *)(a2 + 8);
        v27 = *(_DWORD *)(a2 + 12);
        v28 = *(_DWORD *)(a1 + 16);
        v29 = *(_DWORD *)(a1 + 20);
        do
        {
          *BaseAddress = *v20;
          v20 += v15;
          if (++v22 == v26)
          {
            v22 = 0;
            v20 = &v20[v16 - (v15 * v26)];
            v30 = v23 + 1;
            if (v23 + 1 == v27)
              v23 = 0;
            else
              ++v23;
            if (v30 == v27)
              v20 = &v20[v17 - (v16 * v30)];
          }
          BaseAddress += v12;
          if (++v24 == v28)
          {
            v24 = 0;
            BaseAddress = &BaseAddress[v13 - (v12 * v28)];
            v31 = v25 + 1;
            if (v25 + 1 == v29)
              v25 = 0;
            else
              ++v25;
            if (v31 == v29)
              BaseAddress = &BaseAddress[v14 - (v13 * v31)];
          }
        }
        while (v20 != v21);
      }
    }
    if (!CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 48), 0))
      *(_QWORD *)(a1 + 40) = 0;
  }
  return a1;
}

{
  return __ZN3cva6BufferIhEC2ERKNS_9ArrayViewIhLj3EEE(a1, a2);
}

{
  return __ZN3cva6BufferIhEC2ERKS1_(a1, a2);
}

__CVBuffer *cva::Buffer<unsigned char>::lock(uint64_t a1, CVPixelBufferLockFlags a2)
{
  __CVBuffer *result;

  result = *(__CVBuffer **)(a1 + 48);
  if (result)
  {
    if (CVPixelBufferLockBaseAddress(result, a2))
    {
      return 0;
    }
    else
    {
      CVPixelBufferGetWidth(*(CVPixelBufferRef *)(a1 + 48));
      CVPixelBufferGetHeight(*(CVPixelBufferRef *)(a1 + 48));
      CVPixelBufferGetBytesPerRow(*(CVPixelBufferRef *)(a1 + 48));
      *(_QWORD *)(a1 + 40) = CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)(a1 + 48));
      return (__CVBuffer *)1;
    }
  }
  return result;
}

BOOL cva::Buffer<unsigned char>::unlock(uint64_t a1, CVPixelBufferLockFlags a2)
{
  CVReturn v3;

  v3 = CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 48), a2);
  if (!v3)
    *(_QWORD *)(a1 + 40) = 0;
  return v3 == 0;
}

uint64_t cva::Buffer<unsigned char>::operator=(uint64_t a1, uint64_t a2)
{
  __CVBuffer *v3;
  __CVBuffer *v5;
  char *BaseAddress;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  int v30;
  char *v31;
  int v32;
  int v33;
  char *v34;
  int v35;

  v3 = *(__CVBuffer **)(a2 + 48);
  if (v3 && !CVPixelBufferLockBaseAddress(v3, 1uLL))
  {
    CVPixelBufferGetWidth(*(CVPixelBufferRef *)(a2 + 48));
    CVPixelBufferGetHeight(*(CVPixelBufferRef *)(a2 + 48));
    CVPixelBufferGetBytesPerRow(*(CVPixelBufferRef *)(a2 + 48));
    *(_QWORD *)(a2 + 40) = CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)(a2 + 48));
    v5 = *(__CVBuffer **)(a1 + 48);
    if (v5 && !CVPixelBufferLockBaseAddress(v5, 0))
    {
      CVPixelBufferGetWidth(*(CVPixelBufferRef *)(a1 + 48));
      CVPixelBufferGetHeight(*(CVPixelBufferRef *)(a1 + 48));
      CVPixelBufferGetBytesPerRow(*(CVPixelBufferRef *)(a1 + 48));
      BaseAddress = (char *)CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)(a1 + 48));
      *(_QWORD *)(a1 + 40) = BaseAddress;
      v7 = *(_QWORD *)(a2 + 40);
      v8 = *(unsigned int *)(a2 + 36);
      if (v7)
        v9 = (char *)(v7 + *(_QWORD *)(a2 + 8));
      else
        v9 = 0;
      if (v7)
        v10 = (char *)(v7 + *(_QWORD *)(a2 + 8) + (*(_DWORD *)(a2 + 24) * v8));
      else
        v10 = 0;
      if (v9 != v10)
      {
        v11 = 0;
        v12 = 0;
        v13 = 0;
        v14 = 0;
        v15 = *(_DWORD *)(a1 + 16);
        v16 = *(_DWORD *)(a1 + 20);
        v17 = *(_DWORD *)(a2 + 16);
        v18 = *(_DWORD *)(a2 + 20);
        v19 = *(_QWORD *)(a2 + 28);
        v20 = *(unsigned int *)(a1 + 36);
        v21 = *(_QWORD *)(a1 + 28);
        if (BaseAddress)
          v22 = &BaseAddress[*(_QWORD *)(a1 + 8)];
        else
          v22 = 0;
        v23 = *(_QWORD *)(a2 + 28);
        v24 = HIDWORD(v19);
        v25 = *(_QWORD *)(a1 + 28);
        v26 = HIDWORD(v21);
        v27 = -(uint64_t)(v17 * v19);
        v28 = -(uint64_t)(v15 * v21);
        do
        {
          v29 = *v9;
          v9 += v23;
          v30 = v14 + 1;
          *v22 = v29;
          v31 = &v9[v27 + v24];
          if (v13 + 1 == v18)
            v32 = 0;
          else
            v32 = v13 + 1;
          if (v13 + 1 == v18)
            v31 = &v31[v8 - (v18 * v24)];
          if (v30 == v17)
          {
            v13 = v32;
            v14 = 0;
          }
          else
          {
            ++v14;
          }
          if (v30 == v17)
            v9 = v31;
          v22 += v25;
          v33 = v12 + 1;
          v34 = &v22[v28 + v26];
          if (v11 + 1 == v16)
            v35 = 0;
          else
            v35 = v11 + 1;
          if (v11 + 1 == v16)
            v34 = &v34[v20 - (v16 * v26)];
          if (v33 == v15)
          {
            v11 = v35;
            v12 = 0;
          }
          else
          {
            ++v12;
          }
          if (v33 == v15)
            v22 = v34;
        }
        while (v9 != v10);
      }
      if (!CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 48), 0))
        *(_QWORD *)(a1 + 40) = 0;
    }
    if (!CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a2 + 48), 1uLL))
      *(_QWORD *)(a2 + 40) = 0;
  }
  return a1;
}

{
  __CVBuffer *v3;
  char *BaseAddress;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  int v29;
  char *v30;
  int v31;
  int v32;
  char *v33;
  int v34;

  v3 = *(__CVBuffer **)(a1 + 48);
  if (v3 && !CVPixelBufferLockBaseAddress(v3, 0))
  {
    CVPixelBufferGetWidth(*(CVPixelBufferRef *)(a1 + 48));
    CVPixelBufferGetHeight(*(CVPixelBufferRef *)(a1 + 48));
    CVPixelBufferGetBytesPerRow(*(CVPixelBufferRef *)(a1 + 48));
    BaseAddress = (char *)CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)(a1 + 48));
    *(_QWORD *)(a1 + 40) = BaseAddress;
    v6 = *(_QWORD *)(a2 + 32);
    v7 = *(unsigned int *)(a2 + 28);
    if (v6)
      v8 = (char *)(v6 + *(_QWORD *)a2);
    else
      v8 = 0;
    if (v6)
      v9 = (char *)(v6 + *(_QWORD *)a2 + (*(_DWORD *)(a2 + 16) * v7));
    else
      v9 = 0;
    if (v8 != v9)
    {
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = *(_DWORD *)(a1 + 16);
      v15 = *(_DWORD *)(a1 + 20);
      v16 = *(_DWORD *)(a2 + 8);
      v17 = *(_DWORD *)(a2 + 12);
      v18 = *(_QWORD *)(a2 + 20);
      v19 = *(unsigned int *)(a1 + 36);
      v20 = *(_QWORD *)(a1 + 28);
      if (BaseAddress)
        v21 = &BaseAddress[*(_QWORD *)(a1 + 8)];
      else
        v21 = 0;
      v22 = *(_QWORD *)(a2 + 20);
      v23 = HIDWORD(v18);
      v24 = *(_QWORD *)(a1 + 28);
      v25 = HIDWORD(v20);
      v26 = -(uint64_t)(v16 * v18);
      v27 = -(uint64_t)(v14 * v20);
      do
      {
        v28 = *v8;
        v8 += v22;
        v29 = v13 + 1;
        *v21 = v28;
        v30 = &v8[v26 + v23];
        if (v12 + 1 == v17)
          v31 = 0;
        else
          v31 = v12 + 1;
        if (v12 + 1 == v17)
          v30 = &v30[v7 - (v17 * v23)];
        if (v29 == v16)
        {
          v12 = v31;
          v13 = 0;
        }
        else
        {
          ++v13;
        }
        if (v29 == v16)
          v8 = v30;
        v21 += v24;
        v32 = v11 + 1;
        v33 = &v21[v27 + v25];
        if (v10 + 1 == v15)
          v34 = 0;
        else
          v34 = v10 + 1;
        if (v10 + 1 == v15)
          v33 = &v33[v19 - (v15 * v25)];
        if (v32 == v14)
        {
          v10 = v34;
          v11 = 0;
        }
        else
        {
          ++v11;
        }
        if (v32 == v14)
          v21 = v33;
      }
      while (v8 != v9);
    }
    if (!CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 48), 0))
      *(_QWORD *)(a1 + 40) = 0;
  }
  return a1;
}

uint64_t cva::Buffer<unsigned char>::resize(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1[7];
  if (v4)
  {

    MEMORY[0x20BD2D02C](v4, 0xE0C400670D255);
  }
  a1[7] = 0;
  v5 = a1[8];
  if (v5)
  {

    MEMORY[0x20BD2D02C](v5, 0xE0C400670D255);
  }
  a1[8] = 0;
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, a2);
}

uint64_t cva::Buffer<unsigned char>::resize(_QWORD *a1, int a2, int a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD v8[3];

  v8[0] = a2;
  v8[1] = a3;
  v8[2] = a4;
  v5 = a1[7];
  if (v5)
  {

    MEMORY[0x20BD2D02C](v5, 0xE0C400670D255);
  }
  a1[7] = 0;
  v6 = a1[8];
  if (v6)
  {

    MEMORY[0x20BD2D02C](v6, 0xE0C400670D255);
  }
  a1[8] = 0;
  return (*(uint64_t (**)(_QWORD *, _DWORD *))(*a1 + 16))(a1, v8);
}

uint64_t cva::Buffer<unsigned char>::operator __CVBuffer *(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

CVPixelBufferRef cva::Buffer<unsigned char>::allocate(_DWORD *a1, OSType a2)
{
  size_t v3;
  size_t v4;
  __CFDictionary *AttributeDictionary;
  BOOL v7;
  CVPixelBufferRef pixelBufferOut;

  v3 = (a1[1] * *a1);
  v4 = a1[2];
  AttributeDictionary = cva::createAttributeDictionary((cva *)v3, v4, a2, 64, 64, 0, 0, 0, v7);
  pixelBufferOut = 0;
  CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v3, v4, a2, AttributeDictionary, &pixelBufferOut);
  CFRelease(AttributeDictionary);
  return pixelBufferOut;
}

double cva::Buffer<unsigned int>::Buffer(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)a1 = &unk_24C37FEB0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)a1 = &unk_24C37FEB0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t cva::Buffer<unsigned int>::Buffer(uint64_t a1, _DWORD *a2)
{
  int v3;
  size_t v4;
  unsigned int v5;
  uint64_t v6;
  size_t v7;
  __CFDictionary *AttributeDictionary;
  CVPixelBufferRef v9;
  BOOL v11;
  CVPixelBufferRef pixelBufferOut;

  v3 = 4 * *a2;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = a2[2];
  v5 = (a2[1] * v3 + 63) & 0xFFFFFFC0;
  v6 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 28) = 4;
  *(_DWORD *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 36) = v5;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = &unk_24C37FEB0;
  v7 = (HIDWORD(v6) * v6);
  AttributeDictionary = cva::createAttributeDictionary((cva *)v7, v4, 1111970369, 64, 64, 0, 0, 0, v11);
  pixelBufferOut = 0;
  CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v7, v4, 0x42475241u, AttributeDictionary, &pixelBufferOut);
  CFRelease(AttributeDictionary);
  v9 = pixelBufferOut;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = v9;
  return a1;
}

{
  int v3;
  size_t v4;
  unsigned int v5;
  uint64_t v6;
  size_t v7;
  __CFDictionary *AttributeDictionary;
  CVPixelBufferRef v9;
  BOOL v11;
  CVPixelBufferRef pixelBufferOut;

  v3 = 4 * *a2;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = a2[2];
  v5 = (a2[1] * v3 + 63) & 0xFFFFFFC0;
  v6 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 28) = 4;
  *(_DWORD *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 36) = v5;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = &unk_24C37FEB0;
  v7 = (HIDWORD(v6) * v6);
  AttributeDictionary = cva::createAttributeDictionary((cva *)v7, v4, 1111970369, 64, 64, 0, 0, 0, v11);
  pixelBufferOut = 0;
  CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v7, v4, 0x42475241u, AttributeDictionary, &pixelBufferOut);
  CFRelease(AttributeDictionary);
  v9 = pixelBufferOut;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = v9;
  return a1;
}

_DWORD *cva::Buffer<unsigned int>::defaultStride@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  int v2;
  int v3;

  v2 = result[1];
  v3 = 4 * *result;
  *a2 = 4;
  a2[1] = v3;
  a2[2] = (v2 * v3 + 63) & 0xFFFFFFC0;
  return result;
}

CVPixelBufferRef cva::Buffer<unsigned int>::allocate(_DWORD *a1)
{
  size_t v1;
  size_t v2;
  __CFDictionary *AttributeDictionary;
  BOOL v5;
  CVPixelBufferRef pixelBufferOut;

  v1 = (a1[1] * *a1);
  v2 = a1[2];
  AttributeDictionary = cva::createAttributeDictionary((cva *)v1, v2, 1111970369, 64, 64, 0, 0, 0, v5);
  pixelBufferOut = 0;
  CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v1, v2, 0x42475241u, AttributeDictionary, &pixelBufferOut);
  CFRelease(AttributeDictionary);
  return pixelBufferOut;
}

uint64_t cva::Buffer<unsigned int>::Buffer(uint64_t a1, int a2, int a3, unsigned int a4)
{
  size_t v6;
  __CFDictionary *AttributeDictionary;
  CVPixelBufferRef v8;
  BOOL v10;
  CVPixelBufferRef pixelBufferOut;

  *(_DWORD *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + 20) = a3;
  *(_DWORD *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 28) = 4;
  *(_DWORD *)(a1 + 32) = 4 * a2;
  *(_DWORD *)(a1 + 36) = (4 * a2 * a3 + 63) & 0xFFFFFFC0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = &unk_24C37FEB0;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = (a3 * a2);
  AttributeDictionary = cva::createAttributeDictionary((cva *)v6, a4, 1111970369, 64, 64, 0, 0, 0, v10);
  pixelBufferOut = 0;
  CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v6, a4, 0x42475241u, AttributeDictionary, &pixelBufferOut);
  CFRelease(AttributeDictionary);
  v8 = pixelBufferOut;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = v8;
  return a1;
}

{
  size_t v6;
  __CFDictionary *AttributeDictionary;
  CVPixelBufferRef v8;
  BOOL v10;
  CVPixelBufferRef pixelBufferOut;

  *(_DWORD *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + 20) = a3;
  *(_DWORD *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 28) = 4;
  *(_DWORD *)(a1 + 32) = 4 * a2;
  *(_DWORD *)(a1 + 36) = (4 * a2 * a3 + 63) & 0xFFFFFFC0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = &unk_24C37FEB0;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = (a3 * a2);
  AttributeDictionary = cva::createAttributeDictionary((cva *)v6, a4, 1111970369, 64, 64, 0, 0, 0, v10);
  pixelBufferOut = 0;
  CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v6, a4, 0x42475241u, AttributeDictionary, &pixelBufferOut);
  CFRelease(AttributeDictionary);
  v8 = pixelBufferOut;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = v8;
  return a1;
}

double cva::Buffer<unsigned int>::Buffer(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  double result;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v2 = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v2;
  v3 = *(_QWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 28) = v3;
  *(_QWORD *)a1 = &unk_24C37FEB0;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a2 + 36) = 0;
  result = 0.0;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  double result;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v2 = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v2;
  v3 = *(_QWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 28) = v3;
  *(_QWORD *)a1 = &unk_24C37FEB0;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a2 + 36) = 0;
  result = 0.0;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  return result;
}

__n128 cva::Buffer<unsigned int>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;

  v2 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_DWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 28);
  v8 = *(_DWORD *)(a1 + 36);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v3;
  LODWORD(v3) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 28) = *(_QWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 36) = v3;
  *(_QWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = v9;
  *(_DWORD *)(a2 + 24) = v10;
  *(_QWORD *)(a2 + 28) = v7;
  *(_DWORD *)(a2 + 36) = v8;
  v4 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = v4;
  v5 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = v5;
  result = *(__n128 *)(a1 + 56);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(__n128 *)(a2 + 56) = result;
  return result;
}

uint64_t cva::Buffer<unsigned int>::Buffer(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  unsigned int v6;
  size_t v7;
  size_t v8;
  __CFDictionary *AttributeDictionary;
  __CVBuffer *v10;
  __CVBuffer *v11;
  char *BaseAddress;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  CVPixelBufferRef v38[4];

  v38[3] = *(CVPixelBufferRef *)MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a2 + 24);
  v5 = 4 * *(_DWORD *)(a2 + 16);
  v6 = (*(_DWORD *)(a2 + 20) * v5 + 63) & 0xFFFFFFC0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 28) = 4;
  *(_DWORD *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 36) = v6;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = &unk_24C37FEB0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v7 = *(unsigned int *)(a1 + 24);
  v8 = (*(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
  AttributeDictionary = cva::createAttributeDictionary((cva *)v8, v7, 1111970369, 64, 64, 0, 0, 0, (BOOL)v38[0]);
  v38[0] = 0;
  CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v8, v7, 0x42475241u, AttributeDictionary, v38);
  CFRelease(AttributeDictionary);
  *(CVPixelBufferRef *)(a1 + 48) = v38[0];
  v10 = *(__CVBuffer **)(a2 + 48);
  if (v10 && !CVPixelBufferLockBaseAddress(v10, 1uLL))
  {
    CVPixelBufferGetWidth(*(CVPixelBufferRef *)(a2 + 48));
    CVPixelBufferGetHeight(*(CVPixelBufferRef *)(a2 + 48));
    CVPixelBufferGetBytesPerRow(*(CVPixelBufferRef *)(a2 + 48));
    *(_QWORD *)(a2 + 40) = CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)(a2 + 48));
    v11 = *(__CVBuffer **)(a1 + 48);
    if (v11 && !CVPixelBufferLockBaseAddress(v11, 0))
    {
      CVPixelBufferGetWidth(*(CVPixelBufferRef *)(a1 + 48));
      CVPixelBufferGetHeight(*(CVPixelBufferRef *)(a1 + 48));
      CVPixelBufferGetBytesPerRow(*(CVPixelBufferRef *)(a1 + 48));
      BaseAddress = (char *)CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)(a1 + 48));
      *(_QWORD *)(a1 + 40) = BaseAddress;
      v13 = *(unsigned int *)(a1 + 36);
      v14 = *(unsigned int *)(a2 + 36);
      if (*(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28)
        && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32)
        && (_DWORD)v13 == (_DWORD)v14)
      {
        memcpy(BaseAddress, *(const void **)(a2 + 40), (*(_DWORD *)(a2 + 24) * v13));
      }
      else
      {
        v15 = *(_QWORD *)(a2 + 40);
        if (v15)
          v16 = (_DWORD *)(v15 + *(_QWORD *)(a2 + 8));
        else
          v16 = 0;
        if (v15)
          v17 = (_DWORD *)(v15 + *(_QWORD *)(a2 + 8) + (*(_DWORD *)(a2 + 24) * v14));
        else
          v17 = 0;
        if (v16 != v17)
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
          v21 = 0;
          v22 = *(_DWORD *)(a2 + 16);
          v23 = *(_DWORD *)(a2 + 20);
          v25 = *(_DWORD *)(a1 + 16);
          v24 = *(_DWORD *)(a1 + 20);
          v26 = *(_QWORD *)(a1 + 28);
          v27 = *(_QWORD *)(a2 + 28);
          if (BaseAddress)
            v28 = &BaseAddress[*(_QWORD *)(a1 + 8)];
          else
            v28 = 0;
          v29 = *(_QWORD *)(a2 + 28);
          v30 = HIDWORD(v27);
          v31 = *(_QWORD *)(a1 + 28);
          v32 = HIDWORD(v26);
          v33 = -(uint64_t)(v22 * v27);
          v34 = -(uint64_t)(v25 * v26);
          do
          {
            *(_DWORD *)v28 = *v16;
            v16 = (_DWORD *)((char *)v16 + v29);
            if (++v19 == v22)
            {
              v19 = 0;
              v16 = (_DWORD *)((char *)v16 + v33 + v30);
              v35 = v18 + 1;
              if (v18 + 1 == v23)
                v18 = 0;
              else
                ++v18;
              if (v35 == v23)
                v16 = (_DWORD *)((char *)v16 + v14 - (v35 * v30));
            }
            v28 += v31;
            if (++v21 == v25)
            {
              v21 = 0;
              v28 += v34 + v32;
              v36 = v20 + 1;
              if (v20 + 1 == v24)
                v20 = 0;
              else
                ++v20;
              if (v36 == v24)
                v28 = &v28[v13 - (v36 * v32)];
            }
          }
          while (v16 != v17);
        }
      }
      if (!CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 48), 0))
        *(_QWORD *)(a1 + 40) = 0;
    }
    if (!CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a2 + 48), 1uLL))
      *(_QWORD *)(a2 + 40) = 0;
  }
  return a1;
}

{
  int v4;
  int v5;
  unsigned int v6;
  size_t v7;
  size_t v8;
  __CFDictionary *AttributeDictionary;
  __CVBuffer *v10;
  char *BaseAddress;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  CVPixelBufferRef pixelBuffer[4];

  pixelBuffer[3] = *(CVPixelBufferRef *)MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a2 + 16);
  v5 = 4 * *(_DWORD *)(a2 + 8);
  v6 = (*(_DWORD *)(a2 + 12) * v5 + 63) & 0xFFFFFFC0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 28) = 4;
  *(_DWORD *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 36) = v6;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = &unk_24C37FEB0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v7 = *(unsigned int *)(a1 + 24);
  v8 = (*(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
  AttributeDictionary = cva::createAttributeDictionary((cva *)v8, v7, 1111970369, 64, 64, 0, 0, 0, (BOOL)pixelBuffer[0]);
  pixelBuffer[0] = 0;
  CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v8, v7, 0x42475241u, AttributeDictionary, pixelBuffer);
  CFRelease(AttributeDictionary);
  v10 = pixelBuffer[0];
  *(CVPixelBufferRef *)(a1 + 48) = pixelBuffer[0];
  if (v10 && !CVPixelBufferLockBaseAddress(v10, 0))
  {
    CVPixelBufferGetWidth(*(CVPixelBufferRef *)(a1 + 48));
    CVPixelBufferGetHeight(*(CVPixelBufferRef *)(a1 + 48));
    CVPixelBufferGetBytesPerRow(*(CVPixelBufferRef *)(a1 + 48));
    BaseAddress = (char *)CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)(a1 + 48));
    *(_QWORD *)(a1 + 40) = BaseAddress;
    v12 = *(unsigned int *)(a1 + 36);
    v13 = *(unsigned int *)(a2 + 28);
    if (*(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 20)
      && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 24)
      && (_DWORD)v12 == (_DWORD)v13)
    {
      memcpy(BaseAddress, *(const void **)(a2 + 32), (*(_DWORD *)(a2 + 16) * v12));
    }
    else
    {
      v14 = *(_QWORD *)(a2 + 32);
      if (v14)
        v15 = (_DWORD *)(v14 + *(_QWORD *)a2);
      else
        v15 = 0;
      if (v14)
        v16 = (_DWORD *)(v14 + *(_QWORD *)a2 + (*(_DWORD *)(a2 + 16) * v13));
      else
        v16 = 0;
      if (v15 != v16)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        v20 = 0;
        v21 = *(_DWORD *)(a2 + 8);
        v22 = *(_DWORD *)(a2 + 12);
        v24 = *(_DWORD *)(a1 + 16);
        v23 = *(_DWORD *)(a1 + 20);
        v25 = *(_QWORD *)(a1 + 28);
        v26 = *(_QWORD *)(a2 + 20);
        if (BaseAddress)
          v27 = &BaseAddress[*(_QWORD *)(a1 + 8)];
        else
          v27 = 0;
        v28 = *(_QWORD *)(a2 + 20);
        v29 = HIDWORD(v26);
        v30 = *(_QWORD *)(a1 + 28);
        v31 = HIDWORD(v25);
        v32 = -(uint64_t)(v21 * v26);
        v33 = -(uint64_t)(v24 * v25);
        do
        {
          *(_DWORD *)v27 = *v15;
          v15 = (_DWORD *)((char *)v15 + v28);
          if (++v18 == v21)
          {
            v18 = 0;
            v15 = (_DWORD *)((char *)v15 + v32 + v29);
            v34 = v17 + 1;
            if (v17 + 1 == v22)
              v17 = 0;
            else
              ++v17;
            if (v34 == v22)
              v15 = (_DWORD *)((char *)v15 + v13 - (v34 * v29));
          }
          v27 += v30;
          if (++v20 == v24)
          {
            v20 = 0;
            v27 += v33 + v31;
            v35 = v19 + 1;
            if (v19 + 1 == v23)
              v19 = 0;
            else
              ++v19;
            if (v35 == v23)
              v27 = &v27[v12 - (v35 * v31)];
          }
        }
        while (v15 != v16);
      }
    }
    if (!CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 48), 0))
      *(_QWORD *)(a1 + 40) = 0;
  }
  return a1;
}

{
  return __ZN3cva6BufferIjEC2ERKNS_9ArrayViewIjLj3EEE(a1, a2);
}

{
  return __ZN3cva6BufferIjEC2ERKS1_(a1, a2);
}

__CVBuffer *cva::Buffer<unsigned int>::lock(uint64_t a1, CVPixelBufferLockFlags a2)
{
  __CVBuffer *result;

  result = *(__CVBuffer **)(a1 + 48);
  if (result)
  {
    if (CVPixelBufferLockBaseAddress(result, a2))
    {
      return 0;
    }
    else
    {
      CVPixelBufferGetWidth(*(CVPixelBufferRef *)(a1 + 48));
      CVPixelBufferGetHeight(*(CVPixelBufferRef *)(a1 + 48));
      CVPixelBufferGetBytesPerRow(*(CVPixelBufferRef *)(a1 + 48));
      *(_QWORD *)(a1 + 40) = CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)(a1 + 48));
      return (__CVBuffer *)1;
    }
  }
  return result;
}

BOOL cva::Buffer<unsigned int>::unlock(uint64_t a1, CVPixelBufferLockFlags a2)
{
  CVReturn v3;

  v3 = CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 48), a2);
  if (!v3)
    *(_QWORD *)(a1 + 40) = 0;
  return v3 == 0;
}

uint64_t cva::Buffer<unsigned int>::operator=(uint64_t a1, uint64_t a2)
{
  __CVBuffer *v3;
  __CVBuffer *v5;
  char *BaseAddress;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;

  v3 = *(__CVBuffer **)(a2 + 48);
  if (v3 && !CVPixelBufferLockBaseAddress(v3, 1uLL))
  {
    CVPixelBufferGetWidth(*(CVPixelBufferRef *)(a2 + 48));
    CVPixelBufferGetHeight(*(CVPixelBufferRef *)(a2 + 48));
    CVPixelBufferGetBytesPerRow(*(CVPixelBufferRef *)(a2 + 48));
    *(_QWORD *)(a2 + 40) = CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)(a2 + 48));
    v5 = *(__CVBuffer **)(a1 + 48);
    if (v5 && !CVPixelBufferLockBaseAddress(v5, 0))
    {
      CVPixelBufferGetWidth(*(CVPixelBufferRef *)(a1 + 48));
      CVPixelBufferGetHeight(*(CVPixelBufferRef *)(a1 + 48));
      CVPixelBufferGetBytesPerRow(*(CVPixelBufferRef *)(a1 + 48));
      BaseAddress = (char *)CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)(a1 + 48));
      *(_QWORD *)(a1 + 40) = BaseAddress;
      v7 = *(_QWORD *)(a2 + 40);
      v8 = *(unsigned int *)(a2 + 36);
      if (v7)
        v9 = (_DWORD *)(v7 + *(_QWORD *)(a2 + 8));
      else
        v9 = 0;
      if (v7)
        v10 = (_DWORD *)(v7 + *(_QWORD *)(a2 + 8) + (*(_DWORD *)(a2 + 24) * v8));
      else
        v10 = 0;
      if (v9 != v10)
      {
        v11 = 0;
        v12 = 0;
        v13 = 0;
        v14 = 0;
        v15 = *(_QWORD *)(a1 + 28);
        v16 = *(_QWORD *)(a2 + 28);
        v17 = *(_DWORD *)(a1 + 16);
        v18 = *(_DWORD *)(a1 + 20);
        v20 = *(_DWORD *)(a2 + 16);
        v19 = *(_DWORD *)(a2 + 20);
        v21 = HIDWORD(v16);
        v22 = HIDWORD(v15);
        v23 = *(unsigned int *)(a1 + 36);
        if (BaseAddress)
          v24 = &BaseAddress[*(_QWORD *)(a1 + 8)];
        else
          v24 = 0;
        v25 = *(_QWORD *)(a2 + 28);
        v26 = *(_QWORD *)(a1 + 28);
        v27 = -(uint64_t)(v20 * v16);
        v28 = -(uint64_t)(v17 * v15);
        do
        {
          *(_DWORD *)v24 = *v9;
          v9 = (_DWORD *)((char *)v9 + v25);
          if (++v13 == v20)
          {
            v13 = 0;
            v9 = (_DWORD *)((char *)v9 + v27 + v21);
            v29 = v14 + 1;
            if (v14 + 1 == v19)
              v14 = 0;
            else
              ++v14;
            if (v29 == v19)
              v9 = (_DWORD *)((char *)v9 + v8 - (v29 * v21));
          }
          v24 += v26;
          if (++v11 == v17)
          {
            v11 = 0;
            v24 += v28 + v22;
            v30 = v12 + 1;
            if (v12 + 1 == v18)
              v12 = 0;
            else
              ++v12;
            if (v30 == v18)
              v24 = &v24[v23 - (v30 * v22)];
          }
        }
        while (v9 != v10);
      }
      if (!CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 48), 0))
        *(_QWORD *)(a1 + 40) = 0;
    }
    if (!CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a2 + 48), 1uLL))
      *(_QWORD *)(a2 + 40) = 0;
  }
  return a1;
}

{
  __CVBuffer *v3;
  char *BaseAddress;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;

  v3 = *(__CVBuffer **)(a1 + 48);
  if (v3 && !CVPixelBufferLockBaseAddress(v3, 0))
  {
    CVPixelBufferGetWidth(*(CVPixelBufferRef *)(a1 + 48));
    CVPixelBufferGetHeight(*(CVPixelBufferRef *)(a1 + 48));
    CVPixelBufferGetBytesPerRow(*(CVPixelBufferRef *)(a1 + 48));
    BaseAddress = (char *)CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)(a1 + 48));
    *(_QWORD *)(a1 + 40) = BaseAddress;
    v6 = *(_QWORD *)(a2 + 32);
    v7 = *(unsigned int *)(a2 + 28);
    if (v6)
      v8 = (_DWORD *)(v6 + *(_QWORD *)a2);
    else
      v8 = 0;
    if (v6)
      v9 = (_DWORD *)(v6 + *(_QWORD *)a2 + (*(_DWORD *)(a2 + 16) * v7));
    else
      v9 = 0;
    if (v8 != v9)
    {
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = *(_QWORD *)(a1 + 28);
      v15 = *(_QWORD *)(a2 + 20);
      v16 = *(_DWORD *)(a1 + 16);
      v17 = *(_DWORD *)(a1 + 20);
      v19 = *(_DWORD *)(a2 + 8);
      v18 = *(_DWORD *)(a2 + 12);
      v20 = HIDWORD(v15);
      v21 = HIDWORD(v14);
      v22 = *(unsigned int *)(a1 + 36);
      if (BaseAddress)
        v23 = &BaseAddress[*(_QWORD *)(a1 + 8)];
      else
        v23 = 0;
      v24 = v15;
      v25 = *(_QWORD *)(a1 + 28);
      v26 = -(uint64_t)(v19 * v15);
      v27 = -(uint64_t)(v16 * v14);
      do
      {
        *(_DWORD *)v23 = *v8;
        v8 = (_DWORD *)((char *)v8 + v24);
        if (++v12 == v19)
        {
          v12 = 0;
          v8 = (_DWORD *)((char *)v8 + v26 + v20);
          v28 = v13 + 1;
          if (v13 + 1 == v18)
            v13 = 0;
          else
            ++v13;
          if (v28 == v18)
            v8 = (_DWORD *)((char *)v8 + v7 - (v28 * v20));
        }
        v23 += v25;
        if (++v10 == v16)
        {
          v10 = 0;
          v23 += v27 + v21;
          v29 = v11 + 1;
          if (v11 + 1 == v17)
            v11 = 0;
          else
            ++v11;
          if (v29 == v17)
            v23 = &v23[v22 - (v29 * v21)];
        }
      }
      while (v8 != v9);
    }
    if (!CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 48), 0))
      *(_QWORD *)(a1 + 40) = 0;
  }
  return a1;
}

uint64_t cva::Buffer<unsigned int>::resize(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1[7];
  if (v4)
  {

    MEMORY[0x20BD2D02C](v4, 0xE0C400670D255);
  }
  a1[7] = 0;
  v5 = a1[8];
  if (v5)
  {

    MEMORY[0x20BD2D02C](v5, 0xE0C400670D255);
  }
  a1[8] = 0;
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, a2);
}

uint64_t cva::Buffer<unsigned int>::resize(_QWORD *a1, int a2, int a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD v8[3];

  v8[0] = a2;
  v8[1] = a3;
  v8[2] = a4;
  v5 = a1[7];
  if (v5)
  {

    MEMORY[0x20BD2D02C](v5, 0xE0C400670D255);
  }
  a1[7] = 0;
  v6 = a1[8];
  if (v6)
  {

    MEMORY[0x20BD2D02C](v6, 0xE0C400670D255);
  }
  a1[8] = 0;
  return (*(uint64_t (**)(_QWORD *, _DWORD *))(*a1 + 16))(a1, v8);
}

uint64_t cva::Buffer<unsigned int>::operator __CVBuffer *(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

CVPixelBufferRef cva::Buffer<unsigned int>::allocate(_DWORD *a1, OSType a2)
{
  size_t v3;
  size_t v4;
  __CFDictionary *AttributeDictionary;
  BOOL v7;
  CVPixelBufferRef pixelBufferOut;

  v3 = (a1[1] * *a1);
  v4 = a1[2];
  AttributeDictionary = cva::createAttributeDictionary((cva *)v3, v4, a2, 64, 64, 0, 0, 0, v7);
  pixelBufferOut = 0;
  CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v3, v4, a2, AttributeDictionary, &pixelBufferOut);
  CFRelease(AttributeDictionary);
  return pixelBufferOut;
}

double cva::Buffer<cva::half>::Buffer(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)a1 = &unk_24C37FE20;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)a1 = &unk_24C37FE20;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t cva::Buffer<cva::half>::Buffer(uint64_t a1, _DWORD *a2)
{
  int v3;
  size_t v4;
  unsigned int v5;
  uint64_t v6;
  size_t v7;
  __CFDictionary *AttributeDictionary;
  CVPixelBufferRef v9;
  BOOL v11;
  CVPixelBufferRef pixelBufferOut;

  v3 = 2 * *a2;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = a2[2];
  v5 = (a2[1] * v3 + 63) & 0xFFFFFFC0;
  v6 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 28) = 2;
  *(_DWORD *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 36) = v5;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = &unk_24C37FE20;
  v7 = (HIDWORD(v6) * v6);
  AttributeDictionary = cva::createAttributeDictionary((cva *)v7, v4, 1278226536, 64, 64, 0, 0, 0, v11);
  pixelBufferOut = 0;
  CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v7, v4, 0x4C303068u, AttributeDictionary, &pixelBufferOut);
  CFRelease(AttributeDictionary);
  v9 = pixelBufferOut;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = v9;
  return a1;
}

{
  int v3;
  size_t v4;
  unsigned int v5;
  uint64_t v6;
  size_t v7;
  __CFDictionary *AttributeDictionary;
  CVPixelBufferRef v9;
  BOOL v11;
  CVPixelBufferRef pixelBufferOut;

  v3 = 2 * *a2;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = a2[2];
  v5 = (a2[1] * v3 + 63) & 0xFFFFFFC0;
  v6 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 28) = 2;
  *(_DWORD *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 36) = v5;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = &unk_24C37FE20;
  v7 = (HIDWORD(v6) * v6);
  AttributeDictionary = cva::createAttributeDictionary((cva *)v7, v4, 1278226536, 64, 64, 0, 0, 0, v11);
  pixelBufferOut = 0;
  CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v7, v4, 0x4C303068u, AttributeDictionary, &pixelBufferOut);
  CFRelease(AttributeDictionary);
  v9 = pixelBufferOut;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = v9;
  return a1;
}

_DWORD *cva::Buffer<cva::half>::defaultStride@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  int v2;
  int v3;

  v2 = result[1];
  v3 = 2 * *result;
  *a2 = 2;
  a2[1] = v3;
  a2[2] = (v2 * v3 + 63) & 0xFFFFFFC0;
  return result;
}

CVPixelBufferRef cva::Buffer<cva::half>::allocate(_DWORD *a1)
{
  size_t v1;
  size_t v2;
  __CFDictionary *AttributeDictionary;
  BOOL v5;
  CVPixelBufferRef pixelBufferOut;

  v1 = (a1[1] * *a1);
  v2 = a1[2];
  AttributeDictionary = cva::createAttributeDictionary((cva *)v1, v2, 1278226536, 64, 64, 0, 0, 0, v5);
  pixelBufferOut = 0;
  CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v1, v2, 0x4C303068u, AttributeDictionary, &pixelBufferOut);
  CFRelease(AttributeDictionary);
  return pixelBufferOut;
}

uint64_t cva::Buffer<cva::half>::Buffer(uint64_t a1, int a2, int a3, unsigned int a4)
{
  size_t v6;
  __CFDictionary *AttributeDictionary;
  CVPixelBufferRef v8;
  BOOL v10;
  CVPixelBufferRef pixelBufferOut;

  *(_DWORD *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + 20) = a3;
  *(_DWORD *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 28) = 2;
  *(_DWORD *)(a1 + 32) = 2 * a2;
  *(_DWORD *)(a1 + 36) = (2 * a2 * a3 + 63) & 0xFFFFFFC0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = &unk_24C37FE20;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = (a3 * a2);
  AttributeDictionary = cva::createAttributeDictionary((cva *)v6, a4, 1278226536, 64, 64, 0, 0, 0, v10);
  pixelBufferOut = 0;
  CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v6, a4, 0x4C303068u, AttributeDictionary, &pixelBufferOut);
  CFRelease(AttributeDictionary);
  v8 = pixelBufferOut;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = v8;
  return a1;
}

{
  size_t v6;
  __CFDictionary *AttributeDictionary;
  CVPixelBufferRef v8;
  BOOL v10;
  CVPixelBufferRef pixelBufferOut;

  *(_DWORD *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + 20) = a3;
  *(_DWORD *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 28) = 2;
  *(_DWORD *)(a1 + 32) = 2 * a2;
  *(_DWORD *)(a1 + 36) = (2 * a2 * a3 + 63) & 0xFFFFFFC0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = &unk_24C37FE20;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = (a3 * a2);
  AttributeDictionary = cva::createAttributeDictionary((cva *)v6, a4, 1278226536, 64, 64, 0, 0, 0, v10);
  pixelBufferOut = 0;
  CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v6, a4, 0x4C303068u, AttributeDictionary, &pixelBufferOut);
  CFRelease(AttributeDictionary);
  v8 = pixelBufferOut;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = v8;
  return a1;
}

double cva::Buffer<cva::half>::Buffer(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  double result;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v2 = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v2;
  v3 = *(_QWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 28) = v3;
  *(_QWORD *)a1 = &unk_24C37FE20;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a2 + 36) = 0;
  result = 0.0;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  double result;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v2 = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v2;
  v3 = *(_QWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 28) = v3;
  *(_QWORD *)a1 = &unk_24C37FE20;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a2 + 36) = 0;
  result = 0.0;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  return result;
}

__n128 cva::Buffer<cva::half>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;

  v2 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_DWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 28);
  v8 = *(_DWORD *)(a1 + 36);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v3;
  LODWORD(v3) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 28) = *(_QWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 36) = v3;
  *(_QWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = v9;
  *(_DWORD *)(a2 + 24) = v10;
  *(_QWORD *)(a2 + 28) = v7;
  *(_DWORD *)(a2 + 36) = v8;
  v4 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = v4;
  v5 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = v5;
  result = *(__n128 *)(a1 + 56);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(__n128 *)(a2 + 56) = result;
  return result;
}

uint64_t cva::Buffer<cva::half>::Buffer(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  unsigned int v6;
  size_t v7;
  size_t v8;
  __CFDictionary *AttributeDictionary;
  __CVBuffer *v10;
  __CVBuffer *v11;
  char *BaseAddress;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  _WORD *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  CVPixelBufferRef v38[4];

  v38[3] = *(CVPixelBufferRef *)MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a2 + 24);
  v5 = 2 * *(_DWORD *)(a2 + 16);
  v6 = (*(_DWORD *)(a2 + 20) * v5 + 63) & 0xFFFFFFC0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 28) = 2;
  *(_DWORD *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 36) = v6;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = &unk_24C37FE20;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v7 = *(unsigned int *)(a1 + 24);
  v8 = (*(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
  AttributeDictionary = cva::createAttributeDictionary((cva *)v8, v7, 1278226536, 64, 64, 0, 0, 0, (BOOL)v38[0]);
  v38[0] = 0;
  CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v8, v7, 0x4C303068u, AttributeDictionary, v38);
  CFRelease(AttributeDictionary);
  *(CVPixelBufferRef *)(a1 + 48) = v38[0];
  v10 = *(__CVBuffer **)(a2 + 48);
  if (v10 && !CVPixelBufferLockBaseAddress(v10, 1uLL))
  {
    CVPixelBufferGetWidth(*(CVPixelBufferRef *)(a2 + 48));
    CVPixelBufferGetHeight(*(CVPixelBufferRef *)(a2 + 48));
    CVPixelBufferGetBytesPerRow(*(CVPixelBufferRef *)(a2 + 48));
    *(_QWORD *)(a2 + 40) = CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)(a2 + 48));
    v11 = *(__CVBuffer **)(a1 + 48);
    if (v11 && !CVPixelBufferLockBaseAddress(v11, 0))
    {
      CVPixelBufferGetWidth(*(CVPixelBufferRef *)(a1 + 48));
      CVPixelBufferGetHeight(*(CVPixelBufferRef *)(a1 + 48));
      CVPixelBufferGetBytesPerRow(*(CVPixelBufferRef *)(a1 + 48));
      BaseAddress = (char *)CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)(a1 + 48));
      *(_QWORD *)(a1 + 40) = BaseAddress;
      v13 = *(unsigned int *)(a1 + 36);
      v14 = *(unsigned int *)(a2 + 36);
      if (*(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28)
        && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32)
        && (_DWORD)v13 == (_DWORD)v14)
      {
        memcpy(BaseAddress, *(const void **)(a2 + 40), (*(_DWORD *)(a2 + 24) * v13));
      }
      else
      {
        v15 = *(_QWORD *)(a2 + 40);
        if (v15)
          v16 = (_WORD *)(v15 + *(_QWORD *)(a2 + 8));
        else
          v16 = 0;
        if (v15)
          v17 = (_WORD *)(v15 + *(_QWORD *)(a2 + 8) + (*(_DWORD *)(a2 + 24) * v14));
        else
          v17 = 0;
        if (v16 != v17)
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
          v21 = 0;
          v22 = *(_DWORD *)(a2 + 16);
          v23 = *(_DWORD *)(a2 + 20);
          v25 = *(_DWORD *)(a1 + 16);
          v24 = *(_DWORD *)(a1 + 20);
          v26 = *(_QWORD *)(a1 + 28);
          v27 = *(_QWORD *)(a2 + 28);
          if (BaseAddress)
            v28 = &BaseAddress[*(_QWORD *)(a1 + 8)];
          else
            v28 = 0;
          v29 = *(_QWORD *)(a2 + 28);
          v30 = HIDWORD(v27);
          v31 = *(_QWORD *)(a1 + 28);
          v32 = HIDWORD(v26);
          v33 = -(uint64_t)(v22 * v27);
          v34 = -(uint64_t)(v25 * v26);
          do
          {
            *(_WORD *)v28 = *v16;
            v16 = (_WORD *)((char *)v16 + v29);
            if (++v19 == v22)
            {
              v19 = 0;
              v16 = (_WORD *)((char *)v16 + v33 + v30);
              v35 = v18 + 1;
              if (v18 + 1 == v23)
                v18 = 0;
              else
                ++v18;
              if (v35 == v23)
                v16 = (_WORD *)((char *)v16 + v14 - (v35 * v30));
            }
            v28 += v31;
            if (++v21 == v25)
            {
              v21 = 0;
              v28 += v34 + v32;
              v36 = v20 + 1;
              if (v20 + 1 == v24)
                v20 = 0;
              else
                ++v20;
              if (v36 == v24)
                v28 = &v28[v13 - (v36 * v32)];
            }
          }
          while (v16 != v17);
        }
      }
      if (!CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 48), 0))
        *(_QWORD *)(a1 + 40) = 0;
    }
    if (!CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a2 + 48), 1uLL))
      *(_QWORD *)(a2 + 40) = 0;
  }
  return a1;
}

{
  int v4;
  int v5;
  unsigned int v6;
  size_t v7;
  size_t v8;
  __CFDictionary *AttributeDictionary;
  __CVBuffer *v10;
  char *BaseAddress;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _WORD *v15;
  _WORD *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  CVPixelBufferRef pixelBuffer[4];

  pixelBuffer[3] = *(CVPixelBufferRef *)MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a2 + 16);
  v5 = 2 * *(_DWORD *)(a2 + 8);
  v6 = (*(_DWORD *)(a2 + 12) * v5 + 63) & 0xFFFFFFC0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 28) = 2;
  *(_DWORD *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 36) = v6;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = &unk_24C37FE20;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v7 = *(unsigned int *)(a1 + 24);
  v8 = (*(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
  AttributeDictionary = cva::createAttributeDictionary((cva *)v8, v7, 1278226536, 64, 64, 0, 0, 0, (BOOL)pixelBuffer[0]);
  pixelBuffer[0] = 0;
  CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v8, v7, 0x4C303068u, AttributeDictionary, pixelBuffer);
  CFRelease(AttributeDictionary);
  v10 = pixelBuffer[0];
  *(CVPixelBufferRef *)(a1 + 48) = pixelBuffer[0];
  if (v10 && !CVPixelBufferLockBaseAddress(v10, 0))
  {
    CVPixelBufferGetWidth(*(CVPixelBufferRef *)(a1 + 48));
    CVPixelBufferGetHeight(*(CVPixelBufferRef *)(a1 + 48));
    CVPixelBufferGetBytesPerRow(*(CVPixelBufferRef *)(a1 + 48));
    BaseAddress = (char *)CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)(a1 + 48));
    *(_QWORD *)(a1 + 40) = BaseAddress;
    v12 = *(unsigned int *)(a1 + 36);
    v13 = *(unsigned int *)(a2 + 28);
    if (*(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 20)
      && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 24)
      && (_DWORD)v12 == (_DWORD)v13)
    {
      memcpy(BaseAddress, *(const void **)(a2 + 32), (*(_DWORD *)(a2 + 16) * v12));
    }
    else
    {
      v14 = *(_QWORD *)(a2 + 32);
      if (v14)
        v15 = (_WORD *)(v14 + *(_QWORD *)a2);
      else
        v15 = 0;
      if (v14)
        v16 = (_WORD *)(v14 + *(_QWORD *)a2 + (*(_DWORD *)(a2 + 16) * v13));
      else
        v16 = 0;
      if (v15 != v16)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        v20 = 0;
        v21 = *(_DWORD *)(a2 + 8);
        v22 = *(_DWORD *)(a2 + 12);
        v24 = *(_DWORD *)(a1 + 16);
        v23 = *(_DWORD *)(a1 + 20);
        v25 = *(_QWORD *)(a1 + 28);
        v26 = *(_QWORD *)(a2 + 20);
        if (BaseAddress)
          v27 = &BaseAddress[*(_QWORD *)(a1 + 8)];
        else
          v27 = 0;
        v28 = *(_QWORD *)(a2 + 20);
        v29 = HIDWORD(v26);
        v30 = *(_QWORD *)(a1 + 28);
        v31 = HIDWORD(v25);
        v32 = -(uint64_t)(v21 * v26);
        v33 = -(uint64_t)(v24 * v25);
        do
        {
          *(_WORD *)v27 = *v15;
          v15 = (_WORD *)((char *)v15 + v28);
          if (++v18 == v21)
          {
            v18 = 0;
            v15 = (_WORD *)((char *)v15 + v32 + v29);
            v34 = v17 + 1;
            if (v17 + 1 == v22)
              v17 = 0;
            else
              ++v17;
            if (v34 == v22)
              v15 = (_WORD *)((char *)v15 + v13 - (v34 * v29));
          }
          v27 += v30;
          if (++v20 == v24)
          {
            v20 = 0;
            v27 += v33 + v31;
            v35 = v19 + 1;
            if (v19 + 1 == v23)
              v19 = 0;
            else
              ++v19;
            if (v35 == v23)
              v27 = &v27[v12 - (v35 * v31)];
          }
        }
        while (v15 != v16);
      }
    }
    if (!CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 48), 0))
      *(_QWORD *)(a1 + 40) = 0;
  }
  return a1;
}

{
  return __ZN3cva6BufferINS_4halfEEC2ERKNS_9ArrayViewIS1_Lj3EEE(a1, a2);
}

{
  return __ZN3cva6BufferINS_4halfEEC2ERKS2_(a1, a2);
}

__CVBuffer *cva::Buffer<cva::half>::lock(uint64_t a1, CVPixelBufferLockFlags a2)
{
  __CVBuffer *result;

  result = *(__CVBuffer **)(a1 + 48);
  if (result)
  {
    if (CVPixelBufferLockBaseAddress(result, a2))
    {
      return 0;
    }
    else
    {
      CVPixelBufferGetWidth(*(CVPixelBufferRef *)(a1 + 48));
      CVPixelBufferGetHeight(*(CVPixelBufferRef *)(a1 + 48));
      CVPixelBufferGetBytesPerRow(*(CVPixelBufferRef *)(a1 + 48));
      *(_QWORD *)(a1 + 40) = CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)(a1 + 48));
      return (__CVBuffer *)1;
    }
  }
  return result;
}

BOOL cva::Buffer<cva::half>::unlock(uint64_t a1, CVPixelBufferLockFlags a2)
{
  CVReturn v3;

  v3 = CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 48), a2);
  if (!v3)
    *(_QWORD *)(a1 + 40) = 0;
  return v3 == 0;
}

uint64_t cva::Buffer<cva::half>::operator=(uint64_t a1, uint64_t a2)
{
  __CVBuffer *v3;
  __CVBuffer *v5;
  char *BaseAddress;
  uint64_t v7;
  uint64_t v8;
  _WORD *v9;
  _WORD *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;

  v3 = *(__CVBuffer **)(a2 + 48);
  if (v3 && !CVPixelBufferLockBaseAddress(v3, 1uLL))
  {
    CVPixelBufferGetWidth(*(CVPixelBufferRef *)(a2 + 48));
    CVPixelBufferGetHeight(*(CVPixelBufferRef *)(a2 + 48));
    CVPixelBufferGetBytesPerRow(*(CVPixelBufferRef *)(a2 + 48));
    *(_QWORD *)(a2 + 40) = CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)(a2 + 48));
    v5 = *(__CVBuffer **)(a1 + 48);
    if (v5 && !CVPixelBufferLockBaseAddress(v5, 0))
    {
      CVPixelBufferGetWidth(*(CVPixelBufferRef *)(a1 + 48));
      CVPixelBufferGetHeight(*(CVPixelBufferRef *)(a1 + 48));
      CVPixelBufferGetBytesPerRow(*(CVPixelBufferRef *)(a1 + 48));
      BaseAddress = (char *)CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)(a1 + 48));
      *(_QWORD *)(a1 + 40) = BaseAddress;
      v7 = *(_QWORD *)(a2 + 40);
      v8 = *(unsigned int *)(a2 + 36);
      if (v7)
        v9 = (_WORD *)(v7 + *(_QWORD *)(a2 + 8));
      else
        v9 = 0;
      if (v7)
        v10 = (_WORD *)(v7 + *(_QWORD *)(a2 + 8) + (*(_DWORD *)(a2 + 24) * v8));
      else
        v10 = 0;
      if (v9 != v10)
      {
        v11 = 0;
        v12 = 0;
        v13 = 0;
        v14 = 0;
        v15 = *(_QWORD *)(a1 + 28);
        v16 = *(_QWORD *)(a2 + 28);
        v17 = *(_DWORD *)(a1 + 16);
        v18 = *(_DWORD *)(a1 + 20);
        v20 = *(_DWORD *)(a2 + 16);
        v19 = *(_DWORD *)(a2 + 20);
        v21 = HIDWORD(v16);
        v22 = HIDWORD(v15);
        v23 = *(unsigned int *)(a1 + 36);
        if (BaseAddress)
          v24 = &BaseAddress[*(_QWORD *)(a1 + 8)];
        else
          v24 = 0;
        v25 = *(_QWORD *)(a2 + 28);
        v26 = *(_QWORD *)(a1 + 28);
        v27 = -(uint64_t)(v20 * v16);
        v28 = -(uint64_t)(v17 * v15);
        do
        {
          *(_WORD *)v24 = *v9;
          v9 = (_WORD *)((char *)v9 + v25);
          if (++v13 == v20)
          {
            v13 = 0;
            v9 = (_WORD *)((char *)v9 + v27 + v21);
            v29 = v14 + 1;
            if (v14 + 1 == v19)
              v14 = 0;
            else
              ++v14;
            if (v29 == v19)
              v9 = (_WORD *)((char *)v9 + v8 - (v29 * v21));
          }
          v24 += v26;
          if (++v11 == v17)
          {
            v11 = 0;
            v24 += v28 + v22;
            v30 = v12 + 1;
            if (v12 + 1 == v18)
              v12 = 0;
            else
              ++v12;
            if (v30 == v18)
              v24 = &v24[v23 - (v30 * v22)];
          }
        }
        while (v9 != v10);
      }
      if (!CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 48), 0))
        *(_QWORD *)(a1 + 40) = 0;
    }
    if (!CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a2 + 48), 1uLL))
      *(_QWORD *)(a2 + 40) = 0;
  }
  return a1;
}

{
  __CVBuffer *v3;
  char *BaseAddress;
  uint64_t v6;
  uint64_t v7;
  _WORD *v8;
  _WORD *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;

  v3 = *(__CVBuffer **)(a1 + 48);
  if (v3 && !CVPixelBufferLockBaseAddress(v3, 0))
  {
    CVPixelBufferGetWidth(*(CVPixelBufferRef *)(a1 + 48));
    CVPixelBufferGetHeight(*(CVPixelBufferRef *)(a1 + 48));
    CVPixelBufferGetBytesPerRow(*(CVPixelBufferRef *)(a1 + 48));
    BaseAddress = (char *)CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)(a1 + 48));
    *(_QWORD *)(a1 + 40) = BaseAddress;
    v6 = *(_QWORD *)(a2 + 32);
    v7 = *(unsigned int *)(a2 + 28);
    if (v6)
      v8 = (_WORD *)(v6 + *(_QWORD *)a2);
    else
      v8 = 0;
    if (v6)
      v9 = (_WORD *)(v6 + *(_QWORD *)a2 + (*(_DWORD *)(a2 + 16) * v7));
    else
      v9 = 0;
    if (v8 != v9)
    {
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = *(_QWORD *)(a1 + 28);
      v15 = *(_QWORD *)(a2 + 20);
      v16 = *(_DWORD *)(a1 + 16);
      v17 = *(_DWORD *)(a1 + 20);
      v19 = *(_DWORD *)(a2 + 8);
      v18 = *(_DWORD *)(a2 + 12);
      v20 = HIDWORD(v15);
      v21 = HIDWORD(v14);
      v22 = *(unsigned int *)(a1 + 36);
      if (BaseAddress)
        v23 = &BaseAddress[*(_QWORD *)(a1 + 8)];
      else
        v23 = 0;
      v24 = v15;
      v25 = *(_QWORD *)(a1 + 28);
      v26 = -(uint64_t)(v19 * v15);
      v27 = -(uint64_t)(v16 * v14);
      do
      {
        *(_WORD *)v23 = *v8;
        v8 = (_WORD *)((char *)v8 + v24);
        if (++v12 == v19)
        {
          v12 = 0;
          v8 = (_WORD *)((char *)v8 + v26 + v20);
          v28 = v13 + 1;
          if (v13 + 1 == v18)
            v13 = 0;
          else
            ++v13;
          if (v28 == v18)
            v8 = (_WORD *)((char *)v8 + v7 - (v28 * v20));
        }
        v23 += v25;
        if (++v10 == v16)
        {
          v10 = 0;
          v23 += v27 + v21;
          v29 = v11 + 1;
          if (v11 + 1 == v17)
            v11 = 0;
          else
            ++v11;
          if (v29 == v17)
            v23 = &v23[v22 - (v29 * v21)];
        }
      }
      while (v8 != v9);
    }
    if (!CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 48), 0))
      *(_QWORD *)(a1 + 40) = 0;
  }
  return a1;
}

uint64_t cva::Buffer<cva::half>::resize(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1[7];
  if (v4)
  {

    MEMORY[0x20BD2D02C](v4, 0xE0C400670D255);
  }
  a1[7] = 0;
  v5 = a1[8];
  if (v5)
  {

    MEMORY[0x20BD2D02C](v5, 0xE0C400670D255);
  }
  a1[8] = 0;
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, a2);
}

uint64_t cva::Buffer<cva::half>::resize(_QWORD *a1, int a2, int a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD v8[3];

  v8[0] = a2;
  v8[1] = a3;
  v8[2] = a4;
  v5 = a1[7];
  if (v5)
  {

    MEMORY[0x20BD2D02C](v5, 0xE0C400670D255);
  }
  a1[7] = 0;
  v6 = a1[8];
  if (v6)
  {

    MEMORY[0x20BD2D02C](v6, 0xE0C400670D255);
  }
  a1[8] = 0;
  return (*(uint64_t (**)(_QWORD *, _DWORD *))(*a1 + 16))(a1, v8);
}

uint64_t cva::Buffer<cva::half>::operator __CVBuffer *(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

CVPixelBufferRef cva::Buffer<cva::half>::allocate(_DWORD *a1, OSType a2)
{
  size_t v3;
  size_t v4;
  __CFDictionary *AttributeDictionary;
  BOOL v7;
  CVPixelBufferRef pixelBufferOut;

  v3 = (a1[1] * *a1);
  v4 = a1[2];
  AttributeDictionary = cva::createAttributeDictionary((cva *)v3, v4, a2, 64, 64, 0, 0, 0, v7);
  pixelBufferOut = 0;
  CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v3, v4, a2, AttributeDictionary, &pixelBufferOut);
  CFRelease(AttributeDictionary);
  return pixelBufferOut;
}

uint64_t cva::geo::Chart<float>::Chart(uint64_t result, int a2, int a3, int a4, int a5, float a6)
{
  int v6;

  *(_BYTE *)(result + 23) = 9;
  strcpy((char *)result, "Undefined");
  *(_DWORD *)(result + 24) = 1065353216;
  *(_BYTE *)(result + 28) = 1;
  *(_DWORD *)(result + 32) = 1065353216;
  *(_BYTE *)(result + 36) = 1;
  *(_DWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 44) = 1;
  *(_BYTE *)(result + 56) = a4;
  v6 = (2 * a3 - 1) * (2 * a2 - 1) - a3 * a2;
  if (!a4)
    v6 = 0;
  *(_DWORD *)(result + 48) = a5;
  *(_DWORD *)(result + 52) = a5 + 2 * a3 * 2 * a2 + v6;
  *(_DWORD *)(result + 60) = a2;
  *(_DWORD *)(result + 64) = a3;
  *(float *)(result + 68) = a6;
  return result;
}

{
  int v6;

  *(_BYTE *)(result + 23) = 9;
  strcpy((char *)result, "Undefined");
  *(_DWORD *)(result + 24) = 1065353216;
  *(_BYTE *)(result + 28) = 1;
  *(_DWORD *)(result + 32) = 1065353216;
  *(_BYTE *)(result + 36) = 1;
  *(_DWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 44) = 1;
  *(_BYTE *)(result + 56) = a4;
  v6 = (2 * a3 - 1) * (2 * a2 - 1) - a3 * a2;
  if (!a4)
    v6 = 0;
  *(_DWORD *)(result + 48) = a5;
  *(_DWORD *)(result + 52) = a5 + 2 * a3 * 2 * a2 + v6;
  *(_DWORD *)(result + 60) = a2;
  *(_DWORD *)(result + 64) = a3;
  *(float *)(result + 68) = a6;
  return result;
}

uint64_t cva::geo::Chart<float>::create@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t *a5@<X8>, float a6@<S0>)
{
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t result;

  v12 = operator new();
  v13 = v12;
  *(_BYTE *)(v12 + 23) = 9;
  strcpy((char *)v12, "Undefined");
  *(_DWORD *)(v12 + 24) = 1065353216;
  *(_BYTE *)(v12 + 28) = 1;
  *(_DWORD *)(v12 + 32) = 1065353216;
  *(_BYTE *)(v12 + 36) = 1;
  *(_DWORD *)(v12 + 40) = 0;
  *(_BYTE *)(v12 + 44) = 1;
  *(_BYTE *)(v12 + 56) = a4;
  v14 = (2 * a3 - 1) * (2 * a2 - 1) - a3 * a2;
  if (!a4)
    v14 = 0;
  *(_DWORD *)(v12 + 48) = a1;
  *(_DWORD *)(v12 + 52) = a1 + 2 * a3 * 2 * a2 + v14;
  *(_DWORD *)(v12 + 60) = a2;
  *(_DWORD *)(v12 + 64) = a3;
  *(float *)(v12 + 68) = a6;
  result = MEMORY[0x20BD2CD14]();
  *a5 = v13;
  return result;
}

__n128 cva::geo::Chart<float>::clone@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __n128 result;

  v4 = operator new();
  v5 = v4;
  if (*(char *)(a1 + 23) < 0)
  {
    sub_20AB88C14((_BYTE *)v4, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)v4 = *(_OWORD *)a1;
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(a1 + 16);
  }
  *(_OWORD *)(v5 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v5 + 40) = *(_OWORD *)(a1 + 40);
  result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v5 + 56) = result;
  *a2 = v5;
  return result;
}

void *sub_20AB88C14(_BYTE *__dst, void *__src, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v6 = a3 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *v5 = v8;
    v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

_BYTE *cva::geo::Chart<float>::setFreeFixed(_BYTE *result, char a2)
{
  result[28] = a2;
  result[36] = a2;
  result[44] = a2;
  return result;
}

float cva::geo::Chart<float>::project@<S0>(float *a1@<X0>, float *a2@<X1>, uint64_t a3@<X8>)
{
  float v5;
  float v6;
  __float2 v7;
  float result;

  *(_BYTE *)(a3 + 12) = 1;
  v5 = *a2;
  v6 = a1[6];
  *(float *)a3 = (float)(*a2 * v6) * a1[8];
  v7 = __sincosf_stret(a1[10]);
  result = (float)(a2[1] * (float)(v6 * v7.__cosval)) + (float)((float)(v6 * v7.__sinval) * v5);
  *(float *)(a3 + 4) = result;
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

uint64_t cva::geo::Chart<float>::project(float *a1, float *a2, uint64_t a3)
{
  float v5;
  __float2 v6;

  *(float *)a3 = (float)(*a2 * a1[6]) * a1[8];
  v5 = a1[6];
  v6 = __sincosf_stret(a1[10]);
  *(float *)(a3 + 4) = (float)((float)(v5 * v6.__cosval) * a2[1]) + (float)((float)(v5 * v6.__sinval) * *a2);
  *(_DWORD *)(a3 + 8) = 0;
  return 1;
}

float cva::geo::Chart<float>::unproject@<S0>(float *a1@<X0>, float *a2@<X1>, uint64_t a3@<X8>)
{
  float v4;
  float v5;
  float v6;
  float v7;
  __float2 v8;
  float result;

  *(_BYTE *)(a3 + 12) = 1;
  v4 = a1[6];
  v6 = *a2;
  v5 = a2[1];
  *(float *)a3 = *a2 / (float)(v4 * a1[8]);
  v7 = v5 / v4;
  v8 = __sincosf_stret(a1[10]);
  result = (float)(v7 - (float)(v8.__sinval * v6)) / v8.__cosval;
  *(float *)(a3 + 4) = result;
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

uint64_t cva::geo::Chart<float>::unproject(float *a1, float *a2, uint64_t a3)
{
  float v5;
  __float2 v6;

  *(float *)a3 = *a2 / (float)(a1[6] * a1[8]);
  v5 = a2[1] / a1[6];
  v6 = __sincosf_stret(a1[10]);
  *(float *)(a3 + 4) = (float)(v5 - (float)(v6.__sinval * *a2)) / v6.__cosval;
  *(_DWORD *)(a3 + 8) = 0;
  return 1;
}

_QWORD *cva::geo::Chart<float>::print(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  const char *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  const char *v20;
  size_t v21;
  void **p_dst;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  const char *v28;
  size_t v29;
  void **v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  const char *v36;
  size_t v37;
  void **v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  void *v45[3];
  void **__dst;
  uint64_t v47;
  unsigned __int8 v48;

  v4 = sub_20AB89270(a2, (uint64_t)"[Name][", 7);
  v5 = *(char *)(a1 + 23);
  if (v5 >= 0)
    v6 = a1;
  else
    v6 = *(_QWORD *)a1;
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a1 + 23);
  else
    v7 = *(_QWORD *)(a1 + 8);
  v8 = sub_20AB89270(v4, v6, v7);
  v9 = sub_20AB89270(v8, (uint64_t)"]\n", 2);
  sub_20AB89270(v9, (uint64_t)"[Rows, Columns][Square Size][", 29);
  v10 = (_QWORD *)std::ostream::operator<<();
  sub_20AB89270(v10, (uint64_t)", ", 2);
  v11 = (_QWORD *)std::ostream::operator<<();
  sub_20AB89270(v11, (uint64_t)"][", 2);
  v12 = (_QWORD *)std::ostream::operator<<();
  sub_20AB89270(v12, (uint64_t)"]\n", 2);
  v13 = sub_20AB89270(a2, (uint64_t)"[Has Dots][", 11);
  if (*(_BYTE *)(a1 + 56))
    v14 = "True";
  else
    v14 = "False";
  if (*(_BYTE *)(a1 + 56))
    v15 = 4;
  else
    v15 = 5;
  v16 = sub_20AB89270(v13, (uint64_t)v14, v15);
  v17 = sub_20AB89270(v16, (uint64_t)"]\n", 2);
  sub_20AB89270(v17, (uint64_t)"[Start ID, End ID][", 19);
  v18 = (_QWORD *)std::ostream::operator<<();
  sub_20AB89270(v18, (uint64_t)", ", 2);
  v19 = (_QWORD *)std::ostream::operator<<();
  sub_20AB89270(v19, (uint64_t)"]\n", 2);
  if (*(_BYTE *)(a1 + 28))
    v20 = "[FREE]";
  else
    v20 = "[FIXED]";
  if (*(_BYTE *)(a1 + 28))
    v21 = 6;
  else
    v21 = 7;
  v48 = v21;
  memcpy(&__dst, v20, v21);
  *(_BYTE *)((unint64_t)&__dst | v21) = 0;
  if ((v48 & 0x80u) == 0)
    p_dst = (void **)&__dst;
  else
    p_dst = __dst;
  if ((v48 & 0x80u) == 0)
    v23 = v48;
  else
    v23 = v47;
  v24 = sub_20AB89270(a2, (uint64_t)p_dst, v23);
  v25 = sub_20AB89270(v24, (uint64_t)"[", 1);
  HIBYTE(v45[2]) = 11;
  strcpy((char *)v45, "Chart Scale");
  v26 = sub_20AB89270(v25, (uint64_t)v45, 11);
  sub_20AB89270(v26, (uint64_t)"] : ", 4);
  v27 = (_QWORD *)std::ostream::operator<<();
  sub_20AB89270(v27, (uint64_t)"\n", 1);
  if (SHIBYTE(v45[2]) < 0)
  {
    operator delete(v45[0]);
    if (((char)v48 & 0x80000000) == 0)
      goto LABEL_27;
  }
  else if (((char)v48 & 0x80000000) == 0)
  {
    goto LABEL_27;
  }
  operator delete(__dst);
LABEL_27:
  if (*(_BYTE *)(a1 + 36))
    v28 = "[FREE]";
  else
    v28 = "[FIXED]";
  if (*(_BYTE *)(a1 + 36))
    v29 = 6;
  else
    v29 = 7;
  v48 = v29;
  memcpy(&__dst, v28, v29);
  *(_BYTE *)((unint64_t)&__dst | v29) = 0;
  if ((v48 & 0x80u) == 0)
    v30 = (void **)&__dst;
  else
    v30 = __dst;
  if ((v48 & 0x80u) == 0)
    v31 = v48;
  else
    v31 = v47;
  v32 = sub_20AB89270(a2, (uint64_t)v30, v31);
  v33 = sub_20AB89270(v32, (uint64_t)"[", 1);
  HIBYTE(v45[2]) = 18;
  strcpy((char *)v45, "Chart Aspect Ratio");
  v34 = sub_20AB89270(v33, (uint64_t)v45, 18);
  sub_20AB89270(v34, (uint64_t)"] : ", 4);
  v35 = (_QWORD *)std::ostream::operator<<();
  sub_20AB89270(v35, (uint64_t)"\n", 1);
  if (SHIBYTE(v45[2]) < 0)
  {
    operator delete(v45[0]);
    if (((char)v48 & 0x80000000) == 0)
      goto LABEL_41;
  }
  else if (((char)v48 & 0x80000000) == 0)
  {
    goto LABEL_41;
  }
  operator delete(__dst);
LABEL_41:
  if (*(_BYTE *)(a1 + 44))
    v36 = "[FREE]";
  else
    v36 = "[FIXED]";
  if (*(_BYTE *)(a1 + 44))
    v37 = 6;
  else
    v37 = 7;
  v48 = v37;
  memcpy(&__dst, v36, v37);
  *(_BYTE *)((unint64_t)&__dst | v37) = 0;
  if ((v48 & 0x80u) == 0)
    v38 = (void **)&__dst;
  else
    v38 = __dst;
  if ((v48 & 0x80u) == 0)
    v39 = v48;
  else
    v39 = v47;
  v40 = sub_20AB89270(a2, (uint64_t)v38, v39);
  v41 = sub_20AB89270(v40, (uint64_t)"[", 1);
  HIBYTE(v45[2]) = 10;
  strcpy((char *)v45, "Chart Skew");
  v42 = sub_20AB89270(v41, (uint64_t)v45, 10);
  sub_20AB89270(v42, (uint64_t)"] : ", 4);
  v43 = (_QWORD *)std::ostream::operator<<();
  sub_20AB89270(v43, (uint64_t)"\n", 1);
  if (SHIBYTE(v45[2]) < 0)
  {
    operator delete(v45[0]);
    if (((char)v48 & 0x80000000) == 0)
      return a2;
LABEL_61:
    operator delete(__dst);
    return a2;
  }
  if ((char)v48 < 0)
    goto LABEL_61;
  return a2;
}

_QWORD *sub_20AB89270(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  const std::locale::facet *v11;
  uint64_t v12;
  BOOL v13;
  size_t v14;
  size_t v15;
  std::locale::__imp *p_b;
  uint64_t v17;
  uint64_t v18;
  void *locale;
  uint64_t v20;
  uint64_t v21;
  _BYTE v23[16];
  std::locale __b;
  size_t v25;
  int64_t v26;

  MEMORY[0x20BD2CE34](v23, a1);
  if (!v23[0])
    goto LABEL_32;
  v6 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v7 = *((_QWORD *)v6 + 5);
  v8 = a2 + a3;
  if ((*((_DWORD *)v6 + 2) & 0xB0) == 0x20)
    v9 = a2 + a3;
  else
    v9 = a2;
  v10 = *((_DWORD *)v6 + 36);
  if (v10 == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v11 = std::locale::use_facet(&__b, MEMORY[0x24BEDB350]);
    v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 32);
    std::locale::~locale(&__b);
    *((_DWORD *)v6 + 36) = v10;
    if (!v7)
      goto LABEL_31;
  }
  else if (!v7)
  {
    goto LABEL_31;
  }
  v12 = *((_QWORD *)v6 + 3);
  v13 = v12 <= a3;
  v14 = v12 - a3;
  if (v13)
    v15 = 0;
  else
    v15 = v14;
  if (v9 - a2 >= 1
    && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, a2, v9 - a2) != v9 - a2)
  {
    goto LABEL_31;
  }
  if ((uint64_t)v15 >= 1)
  {
    if (v15 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v15 >= 0x17)
    {
      v17 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17)
        v17 = v15 | 7;
      v18 = v17 + 1;
      p_b = (std::locale::__imp *)operator new(v17 + 1);
      v25 = v15;
      v26 = v18 | 0x8000000000000000;
      __b.__locale_ = p_b;
    }
    else
    {
      HIBYTE(v26) = v15;
      p_b = (std::locale::__imp *)&__b;
    }
    memset(p_b, v10, v15);
    *((_BYTE *)p_b + v15) = 0;
    if (v26 >= 0)
      locale = &__b;
    else
      locale = __b.__locale_;
    v20 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(_QWORD *)v7 + 96))(v7, locale, v15);
    v21 = v20;
    if ((SHIBYTE(v26) & 0x80000000) == 0)
    {
      if (v20 != v15)
        goto LABEL_31;
      goto LABEL_28;
    }
    operator delete(__b.__locale_);
    if (v21 != v15)
    {
LABEL_31:
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
      goto LABEL_32;
    }
  }
LABEL_28:
  if (v8 - v9 >= 1
    && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, v9, v8 - v9) != v8 - v9)
  {
    goto LABEL_31;
  }
  *((_QWORD *)v6 + 3) = 0;
LABEL_32:
  MEMORY[0x20BD2CE40](v23);
  return a1;
}

BOOL cva::geo::Chart<float>::almostEqual(float *a1, float *a2, float a3)
{
  return (float)(a1[6] - a2[6]) < a3 && (float)(a1[8] - a2[8]) < a3 && (float)(a1[10] - a2[10]) < a3;
}

BOOL cva::geo::Chart<float>::hasTrackID(uint64_t a1, unsigned int a2)
{
  return *(_DWORD *)(a1 + 48) <= a2 && *(_DWORD *)(a1 + 52) > a2;
}

uint64_t cva::geo::Chart<float>::cornerType(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;

  v2 = *(_DWORD *)(a1 + 48);
  v10 = a2 >= v2;
  v3 = a2 - v2;
  if (!v10 || *(_DWORD *)(a1 + 52) <= a2)
    return 3;
  if (!*(_BYTE *)(a1 + 56))
    return 0;
  v4 = *(_DWORD *)(a1 + 64);
  v5 = 4 * *(_DWORD *)(a1 + 60) * v4;
  v10 = v3 >= v5;
  v6 = v3 - v5;
  if (!v10)
    return 0;
  v8 = v6 % (3 * v4 - 2);
  v9 = v4 - 1;
  v10 = (((_BYTE)v8 - (_BYTE)v9) & 1) != 0 && v8 >= v9;
  if (v10)
    return 2;
  else
    return 1;
}

uint64_t cva::geo::Chart<float>::startID(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t cva::geo::Chart<float>::endID(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

uint64_t cva::geo::Chart<float>::hasDots(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 56);
}

uint64_t cva::geo::Chart<float>::rows(uint64_t a1)
{
  return *(unsigned int *)(a1 + 60);
}

uint64_t cva::geo::Chart<float>::columns(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

float cva::geo::Chart<float>::squareSize(uint64_t a1)
{
  return *(float *)(a1 + 68);
}

uint64_t cva::geo::Chart<double>::Chart(uint64_t result, int a2, int a3, int a4, int a5, double a6)
{
  int v6;

  *(_BYTE *)(result + 23) = 9;
  strcpy((char *)result, "Undefined");
  *(_QWORD *)(result + 24) = 0x3FF0000000000000;
  *(_BYTE *)(result + 32) = 1;
  *(_QWORD *)(result + 40) = 0x3FF0000000000000;
  *(_BYTE *)(result + 48) = 1;
  *(_QWORD *)(result + 56) = 0;
  *(_BYTE *)(result + 64) = 1;
  *(_BYTE *)(result + 80) = a4;
  v6 = (2 * a3 - 1) * (2 * a2 - 1) - a3 * a2;
  if (!a4)
    v6 = 0;
  *(_DWORD *)(result + 72) = a5;
  *(_DWORD *)(result + 76) = a5 + 2 * a3 * 2 * a2 + v6;
  *(_DWORD *)(result + 84) = a2;
  *(_DWORD *)(result + 88) = a3;
  *(double *)(result + 96) = a6;
  return result;
}

{
  int v6;

  *(_BYTE *)(result + 23) = 9;
  strcpy((char *)result, "Undefined");
  *(_QWORD *)(result + 24) = 0x3FF0000000000000;
  *(_BYTE *)(result + 32) = 1;
  *(_QWORD *)(result + 40) = 0x3FF0000000000000;
  *(_BYTE *)(result + 48) = 1;
  *(_QWORD *)(result + 56) = 0;
  *(_BYTE *)(result + 64) = 1;
  *(_BYTE *)(result + 80) = a4;
  v6 = (2 * a3 - 1) * (2 * a2 - 1) - a3 * a2;
  if (!a4)
    v6 = 0;
  *(_DWORD *)(result + 72) = a5;
  *(_DWORD *)(result + 76) = a5 + 2 * a3 * 2 * a2 + v6;
  *(_DWORD *)(result + 84) = a2;
  *(_DWORD *)(result + 88) = a3;
  *(double *)(result + 96) = a6;
  return result;
}

uint64_t cva::geo::Chart<double>::create@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t *a5@<X8>, double a6@<D0>)
{
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t result;

  v12 = operator new();
  v13 = v12;
  *(_BYTE *)(v12 + 23) = 9;
  strcpy((char *)v12, "Undefined");
  *(_QWORD *)(v12 + 24) = 0x3FF0000000000000;
  *(_BYTE *)(v12 + 32) = 1;
  *(_QWORD *)(v12 + 40) = 0x3FF0000000000000;
  *(_BYTE *)(v12 + 48) = 1;
  *(_QWORD *)(v12 + 56) = 0;
  *(_BYTE *)(v12 + 64) = 1;
  *(_BYTE *)(v12 + 80) = a4;
  v14 = (2 * a3 - 1) * (2 * a2 - 1) - a3 * a2;
  if (!a4)
    v14 = 0;
  *(_DWORD *)(v12 + 72) = a1;
  *(_DWORD *)(v12 + 76) = a1 + 2 * a3 * 2 * a2 + v14;
  *(_DWORD *)(v12 + 84) = a2;
  *(_DWORD *)(v12 + 88) = a3;
  *(double *)(v12 + 96) = a6;
  result = MEMORY[0x20BD2CD14]();
  *a5 = v13;
  return result;
}

__n128 cva::geo::Chart<double>::clone@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __n128 result;

  v4 = operator new();
  v5 = v4;
  if (*(char *)(a1 + 23) < 0)
  {
    sub_20AB88C14((_BYTE *)v4, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)v4 = *(_OWORD *)a1;
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(a1 + 16);
  }
  *(_OWORD *)(v5 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v5 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v5 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v5 + 88) = *(_OWORD *)(a1 + 88);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v5 + 24) = result;
  *a2 = v5;
  return result;
}

_BYTE *cva::geo::Chart<double>::setFreeFixed(_BYTE *result, char a2)
{
  result[32] = a2;
  result[48] = a2;
  result[64] = a2;
  return result;
}

double cva::geo::Chart<double>::project@<D0>(double *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  double v5;
  double v6;
  __double2 v7;
  double result;

  *(_BYTE *)(a3 + 24) = 1;
  v5 = *a2;
  v6 = a1[3];
  *(double *)a3 = *a2 * v6 * a1[5];
  v7 = __sincos_stret(a1[7]);
  result = a2[1] * (v6 * v7.__cosval) + v6 * v7.__sinval * v5;
  *(double *)(a3 + 8) = result;
  *(_QWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t cva::geo::Chart<double>::project(double *a1, double *a2, uint64_t a3)
{
  double v5;
  __double2 v6;

  *(double *)a3 = *a2 * a1[3] * a1[5];
  v5 = a1[3];
  v6 = __sincos_stret(a1[7]);
  *(double *)(a3 + 8) = v5 * v6.__cosval * a2[1] + v5 * v6.__sinval * *a2;
  *(_QWORD *)(a3 + 16) = 0;
  return 1;
}

double cva::geo::Chart<double>::unproject@<D0>(double *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  double v4;
  double v5;
  double v6;
  double v7;
  __double2 v8;
  double result;

  *(_BYTE *)(a3 + 24) = 1;
  v4 = a1[3];
  v6 = *a2;
  v5 = a2[1];
  *(double *)a3 = *a2 / (v4 * a1[5]);
  v7 = v5 / v4;
  v8 = __sincos_stret(a1[7]);
  result = (v7 - v8.__sinval * v6) / v8.__cosval;
  *(double *)(a3 + 8) = result;
  *(_QWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t cva::geo::Chart<double>::unproject(double *a1, double *a2, uint64_t a3)
{
  double v5;
  __double2 v6;

  *(double *)a3 = *a2 / (a1[3] * a1[5]);
  v5 = a2[1] / a1[3];
  v6 = __sincos_stret(a1[7]);
  *(double *)(a3 + 8) = (v5 - v6.__sinval * *a2) / v6.__cosval;
  *(_QWORD *)(a3 + 16) = 0;
  return 1;
}

_QWORD *cva::geo::Chart<double>::print(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  const char *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  const char *v20;
  size_t v21;
  void **p_dst;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  const char *v28;
  size_t v29;
  void **v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  const char *v36;
  size_t v37;
  void **v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  void *v45[3];
  void **__dst;
  uint64_t v47;
  unsigned __int8 v48;

  v4 = sub_20AB89270(a2, (uint64_t)"[Name][", 7);
  v5 = *(char *)(a1 + 23);
  if (v5 >= 0)
    v6 = a1;
  else
    v6 = *(_QWORD *)a1;
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a1 + 23);
  else
    v7 = *(_QWORD *)(a1 + 8);
  v8 = sub_20AB89270(v4, v6, v7);
  v9 = sub_20AB89270(v8, (uint64_t)"]\n", 2);
  sub_20AB89270(v9, (uint64_t)"[Rows, Columns][Square Size][", 29);
  v10 = (_QWORD *)std::ostream::operator<<();
  sub_20AB89270(v10, (uint64_t)", ", 2);
  v11 = (_QWORD *)std::ostream::operator<<();
  sub_20AB89270(v11, (uint64_t)"][", 2);
  v12 = (_QWORD *)std::ostream::operator<<();
  sub_20AB89270(v12, (uint64_t)"]\n", 2);
  v13 = sub_20AB89270(a2, (uint64_t)"[Has Dots][", 11);
  if (*(_BYTE *)(a1 + 80))
    v14 = "True";
  else
    v14 = "False";
  if (*(_BYTE *)(a1 + 80))
    v15 = 4;
  else
    v15 = 5;
  v16 = sub_20AB89270(v13, (uint64_t)v14, v15);
  v17 = sub_20AB89270(v16, (uint64_t)"]\n", 2);
  sub_20AB89270(v17, (uint64_t)"[Start ID, End ID][", 19);
  v18 = (_QWORD *)std::ostream::operator<<();
  sub_20AB89270(v18, (uint64_t)", ", 2);
  v19 = (_QWORD *)std::ostream::operator<<();
  sub_20AB89270(v19, (uint64_t)"]\n", 2);
  if (*(_BYTE *)(a1 + 32))
    v20 = "[FREE]";
  else
    v20 = "[FIXED]";
  if (*(_BYTE *)(a1 + 32))
    v21 = 6;
  else
    v21 = 7;
  v48 = v21;
  memcpy(&__dst, v20, v21);
  *(_BYTE *)((unint64_t)&__dst | v21) = 0;
  if ((v48 & 0x80u) == 0)
    p_dst = (void **)&__dst;
  else
    p_dst = __dst;
  if ((v48 & 0x80u) == 0)
    v23 = v48;
  else
    v23 = v47;
  v24 = sub_20AB89270(a2, (uint64_t)p_dst, v23);
  v25 = sub_20AB89270(v24, (uint64_t)"[", 1);
  HIBYTE(v45[2]) = 11;
  strcpy((char *)v45, "Chart Scale");
  v26 = sub_20AB89270(v25, (uint64_t)v45, 11);
  sub_20AB89270(v26, (uint64_t)"] : ", 4);
  v27 = (_QWORD *)std::ostream::operator<<();
  sub_20AB89270(v27, (uint64_t)"\n", 1);
  if (SHIBYTE(v45[2]) < 0)
  {
    operator delete(v45[0]);
    if (((char)v48 & 0x80000000) == 0)
      goto LABEL_27;
  }
  else if (((char)v48 & 0x80000000) == 0)
  {
    goto LABEL_27;
  }
  operator delete(__dst);
LABEL_27:
  if (*(_BYTE *)(a1 + 48))
    v28 = "[FREE]";
  else
    v28 = "[FIXED]";
  if (*(_BYTE *)(a1 + 48))
    v29 = 6;
  else
    v29 = 7;
  v48 = v29;
  memcpy(&__dst, v28, v29);
  *(_BYTE *)((unint64_t)&__dst | v29) = 0;
  if ((v48 & 0x80u) == 0)
    v30 = (void **)&__dst;
  else
    v30 = __dst;
  if ((v48 & 0x80u) == 0)
    v31 = v48;
  else
    v31 = v47;
  v32 = sub_20AB89270(a2, (uint64_t)v30, v31);
  v33 = sub_20AB89270(v32, (uint64_t)"[", 1);
  HIBYTE(v45[2]) = 18;
  strcpy((char *)v45, "Chart Aspect Ratio");
  v34 = sub_20AB89270(v33, (uint64_t)v45, 18);
  sub_20AB89270(v34, (uint64_t)"] : ", 4);
  v35 = (_QWORD *)std::ostream::operator<<();
  sub_20AB89270(v35, (uint64_t)"\n", 1);
  if (SHIBYTE(v45[2]) < 0)
  {
    operator delete(v45[0]);
    if (((char)v48 & 0x80000000) == 0)
      goto LABEL_41;
  }
  else if (((char)v48 & 0x80000000) == 0)
  {
    goto LABEL_41;
  }
  operator delete(__dst);
LABEL_41:
  if (*(_BYTE *)(a1 + 64))
    v36 = "[FREE]";
  else
    v36 = "[FIXED]";
  if (*(_BYTE *)(a1 + 64))
    v37 = 6;
  else
    v37 = 7;
  v48 = v37;
  memcpy(&__dst, v36, v37);
  *(_BYTE *)((unint64_t)&__dst | v37) = 0;
  if ((v48 & 0x80u) == 0)
    v38 = (void **)&__dst;
  else
    v38 = __dst;
  if ((v48 & 0x80u) == 0)
    v39 = v48;
  else
    v39 = v47;
  v40 = sub_20AB89270(a2, (uint64_t)v38, v39);
  v41 = sub_20AB89270(v40, (uint64_t)"[", 1);
  HIBYTE(v45[2]) = 10;
  strcpy((char *)v45, "Chart Skew");
  v42 = sub_20AB89270(v41, (uint64_t)v45, 10);
  sub_20AB89270(v42, (uint64_t)"] : ", 4);
  v43 = (_QWORD *)std::ostream::operator<<();
  sub_20AB89270(v43, (uint64_t)"\n", 1);
  if (SHIBYTE(v45[2]) < 0)
  {
    operator delete(v45[0]);
    if (((char)v48 & 0x80000000) == 0)
      return a2;
LABEL_61:
    operator delete(__dst);
    return a2;
  }
  if ((char)v48 < 0)
    goto LABEL_61;
  return a2;
}

BOOL cva::geo::Chart<double>::almostEqual(double *a1, double *a2, double a3)
{
  return a1[3] - a2[3] < a3 && a1[5] - a2[5] < a3 && a1[7] - a2[7] < a3;
}

BOOL cva::geo::Chart<double>::hasTrackID(uint64_t a1, unsigned int a2)
{
  return *(_DWORD *)(a1 + 72) <= a2 && *(_DWORD *)(a1 + 76) > a2;
}

uint64_t cva::geo::Chart<double>::cornerType(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;

  v2 = *(_DWORD *)(a1 + 72);
  v10 = a2 >= v2;
  v3 = a2 - v2;
  if (!v10 || *(_DWORD *)(a1 + 76) <= a2)
    return 3;
  if (!*(_BYTE *)(a1 + 80))
    return 0;
  v4 = *(_DWORD *)(a1 + 88);
  v5 = 4 * *(_DWORD *)(a1 + 84) * v4;
  v10 = v3 >= v5;
  v6 = v3 - v5;
  if (!v10)
    return 0;
  v8 = v6 % (3 * v4 - 2);
  v9 = v4 - 1;
  v10 = (((_BYTE)v8 - (_BYTE)v9) & 1) != 0 && v8 >= v9;
  if (v10)
    return 2;
  else
    return 1;
}

uint64_t cva::geo::Chart<double>::startID(uint64_t a1)
{
  return *(unsigned int *)(a1 + 72);
}

uint64_t cva::geo::Chart<double>::endID(uint64_t a1)
{
  return *(unsigned int *)(a1 + 76);
}

uint64_t cva::geo::Chart<double>::hasDots(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 80);
}

uint64_t cva::geo::Chart<double>::rows(uint64_t a1)
{
  return *(unsigned int *)(a1 + 84);
}

uint64_t cva::geo::Chart<double>::columns(uint64_t a1)
{
  return *(unsigned int *)(a1 + 88);
}

double cva::geo::Chart<double>::squareSize(uint64_t a1)
{
  return *(double *)(a1 + 96);
}

float cva::MEstimatorL2<float>::getREE95Threshold()
{
  return 1.0;
}

double cva::MEstimatorL2<double>::getREE95Threshold()
{
  return 1.0;
}

float cva::MEstimatorHuber<float>::getREE95Threshold()
{
  return 1.345;
}

double cva::MEstimatorHuber<double>::getREE95Threshold()
{
  return 1.345;
}

float cva::MEstimatorTukey<float>::getREE95Threshold()
{
  return 4.685;
}

double cva::MEstimatorTukey<double>::getREE95Threshold()
{
  return 4.685;
}

float cva::MEstimatorCauchy<float>::getREE95Threshold()
{
  return 2.385;
}

double cva::MEstimatorCauchy<double>::getREE95Threshold()
{
  return 2.385;
}

float cva::MEstimatorTukeyMAD<float>::getREE95Threshold()
{
  return 4.685;
}

double cva::MEstimatorTukeyMAD<double>::getREE95Threshold()
{
  return 4.685;
}

size_t cva::imageViewFromPixelBuffer<unsigned char>@<X0>(__CVBuffer *a1@<X0>, _QWORD *a2@<X8>)
{
  OSType PixelFormatType;
  unsigned int *v5;
  uint64_t PlaneCount;
  size_t v7;
  size_t BytesPerRow;
  void *BaseAddress;
  unsigned int Width;
  size_t result;
  size_t v12;
  _QWORD v13[3];
  _DWORD v14[3];
  _DWORD v15[3];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  cva::formatDescription(PixelFormatType, (uint64_t)v15, v5);
  PlaneCount = CVPixelBufferGetPlaneCount(a1);
  if (PlaneCount)
  {
    v7 = 0;
    memset(v13, 0, sizeof(v13));
    do
    {
      v13[v7] = CVPixelBufferGetBaseAddressOfPlane(a1, v7);
      v14[v7] = CVPixelBufferGetBytesPerRowOfPlane(a1, v7);
      ++v7;
    }
    while (PlaneCount != v7);
    BytesPerRow = v14[0];
    BaseAddress = (void *)v13[0];
  }
  else
  {
    BaseAddress = CVPixelBufferGetBaseAddress(a1);
    BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  }
  Width = CVPixelBufferGetWidth(a1);
  result = CVPixelBufferGetHeight(a1);
  v12 = v15[0] | (BytesPerRow << 32);
  *a2 = 0;
  a2[1] = Width | ((unint64_t)result << 32);
  a2[2] = v12;
  a2[3] = BaseAddress;
  return result;
}

{
  return __ZN3cva24imageViewFromPixelBufferIhEENS_9ArrayViewIT_Lj2EEEP10__CVBuffer(a1, a2);
}

uint64_t cva::formatDescription(OSType pixelFormat, uint64_t a2, unsigned int *a3)
{
  const __CFDictionary *v4;
  const __CFDictionary *v5;
  const __CFArray *Value;
  const __CFArray *v7;
  CFIndex Count;
  uint64_t v9;
  const void *v10;
  const void *v11;
  const __CFDictionary *ValueAtIndex;
  const __CFNumber *v13;
  const __CFNumber *v14;
  uint64_t v15;
  const __CFNumber *v16;
  const __CFNumber *v17;
  const __CFDictionary *v18;
  const __CFNumber *v19;
  const __CFNumber *v20;
  const __CFDictionary *v21;
  const __CFNumber *v22;
  const __CFNumber *v23;
  uint64_t v25;
  int v26;
  uint64_t valuePtr;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v28 = 0;
  valuePtr = 0;
  v26 = 0;
  v25 = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  v4 = CVPixelFormatDescriptionCreateWithPixelFormatType((CFAllocatorRef)*MEMORY[0x24BDBD240], pixelFormat);
  if (!v4)
    return 4294960636;
  v5 = v4;
  Value = (const __CFArray *)CFDictionaryGetValue(v4, (const void *)*MEMORY[0x24BDC5790]);
  if (Value)
  {
    v7 = Value;
    Count = CFArrayGetCount(Value);
    if (Count < 1)
    {
      v15 = 0;
    }
    else
    {
      if (Count >= 3)
        v9 = 3;
      else
        v9 = Count;
      v10 = (const void *)*MEMORY[0x24BDC5728];
      v11 = (const void *)*MEMORY[0x24BDC5718];
      LODWORD(valuePtr) = 1;
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v7, 0);
      v13 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, v10);
      if (v13)
        CFNumberGetValue(v13, kCFNumberIntType, &valuePtr);
      v14 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, v11);
      if (v14)
      {
        CFNumberGetValue(v14, kCFNumberIntType, &v25);
        v15 = 0;
      }
      else
      {
        v15 = 4294960636;
      }
      *(_DWORD *)a2 = ((int)v25 / (int)valuePtr) >> 3;
      if (v9 != 1)
      {
        HIDWORD(valuePtr) = 1;
        v18 = (const __CFDictionary *)CFArrayGetValueAtIndex(v7, 1);
        v19 = (const __CFNumber *)CFDictionaryGetValue(v18, v10);
        if (v19)
          CFNumberGetValue(v19, kCFNumberIntType, (char *)&valuePtr + 4);
        v20 = (const __CFNumber *)CFDictionaryGetValue(v18, v11);
        if (v20)
          CFNumberGetValue(v20, kCFNumberIntType, (char *)&v25 + 4);
        else
          v15 = 4294960636;
        *(_DWORD *)(a2 + 4) = (SHIDWORD(v25) / SHIDWORD(valuePtr)) >> 3;
        if (v9 != 2)
        {
          v28 = 1;
          v21 = (const __CFDictionary *)CFArrayGetValueAtIndex(v7, 2);
          v22 = (const __CFNumber *)CFDictionaryGetValue(v21, v10);
          if (v22)
            CFNumberGetValue(v22, kCFNumberIntType, &v28);
          v23 = (const __CFNumber *)CFDictionaryGetValue(v21, v11);
          if (v23)
            CFNumberGetValue(v23, kCFNumberIntType, &v26);
          else
            v15 = 4294960636;
          *(_DWORD *)(a2 + 8) = (v26 / v28) >> 3;
        }
      }
    }
  }
  else
  {
    LODWORD(valuePtr) = 1;
    v16 = (const __CFNumber *)CFDictionaryGetValue(v5, (const void *)*MEMORY[0x24BDC5728]);
    if (v16)
      CFNumberGetValue(v16, kCFNumberIntType, &valuePtr);
    v17 = (const __CFNumber *)CFDictionaryGetValue(v5, (const void *)*MEMORY[0x24BDC5718]);
    if (v17)
    {
      CFNumberGetValue(v17, kCFNumberIntType, &v25);
      v15 = 0;
    }
    else
    {
      v15 = 4294960636;
    }
    *(_DWORD *)a2 = ((int)v25 / (int)valuePtr) >> 3;
  }
  CFRelease(v5);
  return v15;
}

size_t cva::imageViewFromPixelBuffer<unsigned short>@<X0>(__CVBuffer *a1@<X0>, _QWORD *a2@<X8>)
{
  OSType PixelFormatType;
  unsigned int *v5;
  uint64_t PlaneCount;
  size_t v7;
  size_t BytesPerRow;
  void *BaseAddress;
  unsigned int Width;
  size_t result;
  size_t v12;
  _QWORD v13[3];
  _DWORD v14[3];
  _DWORD v15[3];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  cva::formatDescription(PixelFormatType, (uint64_t)v15, v5);
  PlaneCount = CVPixelBufferGetPlaneCount(a1);
  if (PlaneCount)
  {
    v7 = 0;
    memset(v13, 0, sizeof(v13));
    do
    {
      v13[v7] = CVPixelBufferGetBaseAddressOfPlane(a1, v7);
      v14[v7] = CVPixelBufferGetBytesPerRowOfPlane(a1, v7);
      ++v7;
    }
    while (PlaneCount != v7);
    BytesPerRow = v14[0];
    BaseAddress = (void *)v13[0];
  }
  else
  {
    BaseAddress = CVPixelBufferGetBaseAddress(a1);
    BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  }
  Width = CVPixelBufferGetWidth(a1);
  result = CVPixelBufferGetHeight(a1);
  v12 = v15[0] | (BytesPerRow << 32);
  *a2 = 0;
  a2[1] = Width | ((unint64_t)result << 32);
  a2[2] = v12;
  a2[3] = BaseAddress;
  return result;
}

size_t cva::imageViewFromPixelBuffer<float>@<X0>(__CVBuffer *a1@<X0>, _QWORD *a2@<X8>)
{
  OSType PixelFormatType;
  unsigned int *v5;
  uint64_t PlaneCount;
  size_t v7;
  size_t BytesPerRow;
  void *BaseAddress;
  unsigned int Width;
  size_t result;
  size_t v12;
  _QWORD v13[3];
  _DWORD v14[3];
  _DWORD v15[3];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  cva::formatDescription(PixelFormatType, (uint64_t)v15, v5);
  PlaneCount = CVPixelBufferGetPlaneCount(a1);
  if (PlaneCount)
  {
    v7 = 0;
    memset(v13, 0, sizeof(v13));
    do
    {
      v13[v7] = CVPixelBufferGetBaseAddressOfPlane(a1, v7);
      v14[v7] = CVPixelBufferGetBytesPerRowOfPlane(a1, v7);
      ++v7;
    }
    while (PlaneCount != v7);
    BytesPerRow = v14[0];
    BaseAddress = (void *)v13[0];
  }
  else
  {
    BaseAddress = CVPixelBufferGetBaseAddress(a1);
    BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  }
  Width = CVPixelBufferGetWidth(a1);
  result = CVPixelBufferGetHeight(a1);
  v12 = v15[0] | (BytesPerRow << 32);
  *a2 = 0;
  a2[1] = Width | ((unint64_t)result << 32);
  a2[2] = v12;
  a2[3] = BaseAddress;
  return result;
}

size_t cva::imageViewFromPixelBuffer<cva::Matrix<unsigned char,3u,1u,false>>@<X0>(__CVBuffer *a1@<X0>, _QWORD *a2@<X8>)
{
  OSType PixelFormatType;
  unsigned int *v5;
  uint64_t PlaneCount;
  size_t v7;
  size_t BytesPerRow;
  void *BaseAddress;
  unsigned int Width;
  size_t result;
  size_t v12;
  _QWORD v13[3];
  _DWORD v14[3];
  _DWORD v15[3];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  cva::formatDescription(PixelFormatType, (uint64_t)v15, v5);
  PlaneCount = CVPixelBufferGetPlaneCount(a1);
  if (PlaneCount)
  {
    v7 = 0;
    memset(v13, 0, sizeof(v13));
    do
    {
      v13[v7] = CVPixelBufferGetBaseAddressOfPlane(a1, v7);
      v14[v7] = CVPixelBufferGetBytesPerRowOfPlane(a1, v7);
      ++v7;
    }
    while (PlaneCount != v7);
    BytesPerRow = v14[0];
    BaseAddress = (void *)v13[0];
  }
  else
  {
    BaseAddress = CVPixelBufferGetBaseAddress(a1);
    BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  }
  Width = CVPixelBufferGetWidth(a1);
  result = CVPixelBufferGetHeight(a1);
  v12 = v15[0] | (BytesPerRow << 32);
  *a2 = 0;
  a2[1] = Width | ((unint64_t)result << 32);
  a2[2] = v12;
  a2[3] = BaseAddress;
  return result;
}

{
  return __ZN3cva24imageViewFromPixelBufferINS_6MatrixIhLj3ELj1ELb0EEEEENS_9ArrayViewIT_Lj2EEEP10__CVBuffer(a1, a2);
}

size_t cva::imageViewFromPixelBuffer<cva::Matrix<unsigned char,4u,1u,false>>@<X0>(__CVBuffer *a1@<X0>, _QWORD *a2@<X8>)
{
  OSType PixelFormatType;
  unsigned int *v5;
  uint64_t PlaneCount;
  size_t v7;
  size_t BytesPerRow;
  void *BaseAddress;
  unsigned int Width;
  size_t result;
  size_t v12;
  _QWORD v13[3];
  _DWORD v14[3];
  _DWORD v15[3];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  cva::formatDescription(PixelFormatType, (uint64_t)v15, v5);
  PlaneCount = CVPixelBufferGetPlaneCount(a1);
  if (PlaneCount)
  {
    v7 = 0;
    memset(v13, 0, sizeof(v13));
    do
    {
      v13[v7] = CVPixelBufferGetBaseAddressOfPlane(a1, v7);
      v14[v7] = CVPixelBufferGetBytesPerRowOfPlane(a1, v7);
      ++v7;
    }
    while (PlaneCount != v7);
    BytesPerRow = v14[0];
    BaseAddress = (void *)v13[0];
  }
  else
  {
    BaseAddress = CVPixelBufferGetBaseAddress(a1);
    BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  }
  Width = CVPixelBufferGetWidth(a1);
  result = CVPixelBufferGetHeight(a1);
  v12 = v15[0] | (BytesPerRow << 32);
  *a2 = 0;
  a2[1] = Width | ((unint64_t)result << 32);
  a2[2] = v12;
  a2[3] = BaseAddress;
  return result;
}

{
  return __ZN3cva24imageViewFromPixelBufferINS_6MatrixIhLj4ELj1ELb0EEEEENS_9ArrayViewIT_Lj2EEEP10__CVBuffer(a1, a2);
}

size_t cva::imageViewFromPixelBuffer<unsigned char>@<X0>(__CVBuffer *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  OSType PixelFormatType;
  unsigned int *v7;
  uint64_t PlaneCount;
  size_t v9;
  size_t result;
  char *BaseAddress;
  size_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v15[3];
  _DWORD v16[3];
  unsigned int v17[3];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  cva::formatDescription(PixelFormatType, (uint64_t)v17, v7);
  PlaneCount = CVPixelBufferGetPlaneCount(a1);
  if (PlaneCount)
  {
    v9 = 0;
    memset(v15, 0, sizeof(v15));
    do
    {
      v15[v9] = CVPixelBufferGetBaseAddressOfPlane(a1, v9);
      v16[v9] = CVPixelBufferGetBytesPerRowOfPlane(a1, v9);
      ++v9;
    }
    while (PlaneCount != v9);
    result = v16[0];
    BaseAddress = (char *)v15[0];
  }
  else
  {
    BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
    result = CVPixelBufferGetBytesPerRow(a1);
  }
  v12 = v17[0] | (result << 32);
  v13 = &BaseAddress[*(_DWORD *)a2 * v17[0] + *(_DWORD *)(a2 + 4) * (_DWORD)result];
  v14 = *(_QWORD *)(a2 + 8);
  *a3 = 0;
  a3[1] = v14;
  a3[2] = v12;
  a3[3] = v13;
  return result;
}

size_t cva::imageViewFromPixelBuffer<unsigned short>@<X0>(__CVBuffer *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  OSType PixelFormatType;
  unsigned int *v7;
  uint64_t PlaneCount;
  size_t v9;
  size_t result;
  char *BaseAddress;
  size_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v15[3];
  _DWORD v16[3];
  unsigned int v17[3];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  cva::formatDescription(PixelFormatType, (uint64_t)v17, v7);
  PlaneCount = CVPixelBufferGetPlaneCount(a1);
  if (PlaneCount)
  {
    v9 = 0;
    memset(v15, 0, sizeof(v15));
    do
    {
      v15[v9] = CVPixelBufferGetBaseAddressOfPlane(a1, v9);
      v16[v9] = CVPixelBufferGetBytesPerRowOfPlane(a1, v9);
      ++v9;
    }
    while (PlaneCount != v9);
    result = v16[0];
    BaseAddress = (char *)v15[0];
  }
  else
  {
    BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
    result = CVPixelBufferGetBytesPerRow(a1);
  }
  v12 = v17[0] | (result << 32);
  v13 = &BaseAddress[*(_DWORD *)a2 * v17[0] + *(_DWORD *)(a2 + 4) * (_DWORD)result];
  v14 = *(_QWORD *)(a2 + 8);
  *a3 = 0;
  a3[1] = v14;
  a3[2] = v12;
  a3[3] = v13;
  return result;
}

size_t cva::imageViewFromPixelBuffer<float>@<X0>(__CVBuffer *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  OSType PixelFormatType;
  unsigned int *v7;
  uint64_t PlaneCount;
  size_t v9;
  size_t result;
  char *BaseAddress;
  size_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v15[3];
  _DWORD v16[3];
  unsigned int v17[3];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  cva::formatDescription(PixelFormatType, (uint64_t)v17, v7);
  PlaneCount = CVPixelBufferGetPlaneCount(a1);
  if (PlaneCount)
  {
    v9 = 0;
    memset(v15, 0, sizeof(v15));
    do
    {
      v15[v9] = CVPixelBufferGetBaseAddressOfPlane(a1, v9);
      v16[v9] = CVPixelBufferGetBytesPerRowOfPlane(a1, v9);
      ++v9;
    }
    while (PlaneCount != v9);
    result = v16[0];
    BaseAddress = (char *)v15[0];
  }
  else
  {
    BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
    result = CVPixelBufferGetBytesPerRow(a1);
  }
  v12 = v17[0] | (result << 32);
  v13 = &BaseAddress[*(_DWORD *)a2 * v17[0] + *(_DWORD *)(a2 + 4) * (_DWORD)result];
  v14 = *(_QWORD *)(a2 + 8);
  *a3 = 0;
  a3[1] = v14;
  a3[2] = v12;
  a3[3] = v13;
  return result;
}

size_t cva::imageViewFromPixelBuffer<cva::Matrix<unsigned char,3u,1u,false>>@<X0>(__CVBuffer *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  OSType PixelFormatType;
  unsigned int *v7;
  uint64_t PlaneCount;
  size_t v9;
  size_t result;
  char *BaseAddress;
  size_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v15[3];
  _DWORD v16[3];
  unsigned int v17[3];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  cva::formatDescription(PixelFormatType, (uint64_t)v17, v7);
  PlaneCount = CVPixelBufferGetPlaneCount(a1);
  if (PlaneCount)
  {
    v9 = 0;
    memset(v15, 0, sizeof(v15));
    do
    {
      v15[v9] = CVPixelBufferGetBaseAddressOfPlane(a1, v9);
      v16[v9] = CVPixelBufferGetBytesPerRowOfPlane(a1, v9);
      ++v9;
    }
    while (PlaneCount != v9);
    result = v16[0];
    BaseAddress = (char *)v15[0];
  }
  else
  {
    BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
    result = CVPixelBufferGetBytesPerRow(a1);
  }
  v12 = v17[0] | (result << 32);
  v13 = &BaseAddress[*(_DWORD *)a2 * v17[0] + *(_DWORD *)(a2 + 4) * (_DWORD)result];
  v14 = *(_QWORD *)(a2 + 8);
  *a3 = 0;
  a3[1] = v14;
  a3[2] = v12;
  a3[3] = v13;
  return result;
}

size_t cva::imageViewFromPixelBuffer<cva::Matrix<unsigned char,4u,1u,false>>@<X0>(__CVBuffer *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  OSType PixelFormatType;
  unsigned int *v7;
  uint64_t PlaneCount;
  size_t v9;
  size_t result;
  char *BaseAddress;
  size_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v15[3];
  _DWORD v16[3];
  unsigned int v17[3];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  cva::formatDescription(PixelFormatType, (uint64_t)v17, v7);
  PlaneCount = CVPixelBufferGetPlaneCount(a1);
  if (PlaneCount)
  {
    v9 = 0;
    memset(v15, 0, sizeof(v15));
    do
    {
      v15[v9] = CVPixelBufferGetBaseAddressOfPlane(a1, v9);
      v16[v9] = CVPixelBufferGetBytesPerRowOfPlane(a1, v9);
      ++v9;
    }
    while (PlaneCount != v9);
    result = v16[0];
    BaseAddress = (char *)v15[0];
  }
  else
  {
    BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
    result = CVPixelBufferGetBytesPerRow(a1);
  }
  v12 = v17[0] | (result << 32);
  v13 = &BaseAddress[*(_DWORD *)a2 * v17[0] + *(_DWORD *)(a2 + 4) * (_DWORD)result];
  v14 = *(_QWORD *)(a2 + 8);
  *a3 = 0;
  a3[1] = v14;
  a3[2] = v12;
  a3[3] = v13;
  return result;
}

uint64_t cva::createCVPixelBufferFromImageNoCopy<unsigned char>(uint64_t a1, CVPixelBufferRef *a2)
{
  return CVPixelBufferCreateWithBytes((CFAllocatorRef)*MEMORY[0x24BDBD240], *(unsigned int *)(a1 + 8), *(unsigned int *)(a1 + 12), 0x4C303038u, *(void **)(a1 + 24), *(unsigned int *)(a1 + 20), 0, 0, 0, a2);
}

uint64_t cva::getPixelBufferType()
{
  return 1278226488;
}

{
  return 1647392359;
}

{
  return 1278226534;
}

{
  return 24;
}

{
  return 32;
}

uint64_t cva::createCVPixelBufferFromImageNoCopy<unsigned short>(uint64_t a1, CVPixelBufferRef *a2)
{
  return CVPixelBufferCreateWithBytes((CFAllocatorRef)*MEMORY[0x24BDBD240], *(unsigned int *)(a1 + 8), *(unsigned int *)(a1 + 12), 0x62313667u, *(void **)(a1 + 24), *(unsigned int *)(a1 + 20), 0, 0, 0, a2);
}

uint64_t cva::createCVPixelBufferFromImageNoCopy<float>(uint64_t a1, CVPixelBufferRef *a2)
{
  return CVPixelBufferCreateWithBytes((CFAllocatorRef)*MEMORY[0x24BDBD240], *(unsigned int *)(a1 + 8), *(unsigned int *)(a1 + 12), 0x4C303066u, *(void **)(a1 + 24), *(unsigned int *)(a1 + 20), 0, 0, 0, a2);
}

uint64_t cva::createCVPixelBufferFromImageNoCopy<cva::Matrix<unsigned char,3u,1u,false>>(uint64_t a1, CVPixelBufferRef *a2)
{
  return CVPixelBufferCreateWithBytes((CFAllocatorRef)*MEMORY[0x24BDBD240], *(unsigned int *)(a1 + 8), *(unsigned int *)(a1 + 12), 0x18u, *(void **)(a1 + 24), *(unsigned int *)(a1 + 20), 0, 0, 0, a2);
}

uint64_t cva::createCVPixelBufferFromImageNoCopy<cva::Matrix<unsigned char,4u,1u,false>>(uint64_t a1, CVPixelBufferRef *a2)
{
  return CVPixelBufferCreateWithBytes((CFAllocatorRef)*MEMORY[0x24BDBD240], *(unsigned int *)(a1 + 8), *(unsigned int *)(a1 + 12), 0x20u, *(void **)(a1 + 24), *(unsigned int *)(a1 + 20), 0, 0, 0, a2);
}

uint64_t cva::createCVPixelBufferFromImageCopy<unsigned char>(uint64_t a1, CVPixelBufferRef *pixelBufferOut)
{
  uint64_t result;
  char *BaseAddress;
  size_t BytesPerRow;
  size_t v7;
  unsigned int v8;

  result = CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], *(unsigned int *)(a1 + 8), *(unsigned int *)(a1 + 12), 0x4C303038u, 0, pixelBufferOut);
  if (!(_DWORD)result)
  {
    CVPixelBufferLockBaseAddress(*pixelBufferOut, 0);
    BaseAddress = (char *)CVPixelBufferGetBaseAddress(*pixelBufferOut);
    BytesPerRow = CVPixelBufferGetBytesPerRow(*pixelBufferOut);
    if (*(_DWORD *)(a1 + 12))
    {
      v7 = BytesPerRow;
      v8 = 0;
      do
      {
        memcpy(BaseAddress, (const void *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)a1 + *(_DWORD *)(a1 + 20) * v8), *(unsigned int *)(a1 + 8));
        BaseAddress += v7;
        ++v8;
      }
      while (v8 < *(_DWORD *)(a1 + 12));
    }
    CVPixelBufferUnlockBaseAddress(*pixelBufferOut, 0);
    return 0;
  }
  return result;
}

uint64_t cva::createCVPixelBufferFromImageCopy<unsigned short>(uint64_t a1, CVPixelBufferRef *pixelBufferOut)
{
  uint64_t result;
  char *BaseAddress;
  size_t BytesPerRow;
  size_t v7;
  unsigned int v8;

  result = CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], *(unsigned int *)(a1 + 8), *(unsigned int *)(a1 + 12), 0x62313667u, 0, pixelBufferOut);
  if (!(_DWORD)result)
  {
    CVPixelBufferLockBaseAddress(*pixelBufferOut, 0);
    BaseAddress = (char *)CVPixelBufferGetBaseAddress(*pixelBufferOut);
    BytesPerRow = CVPixelBufferGetBytesPerRow(*pixelBufferOut);
    if (*(_DWORD *)(a1 + 12))
    {
      v7 = BytesPerRow;
      v8 = 0;
      do
      {
        memcpy(BaseAddress, (const void *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)a1 + *(_DWORD *)(a1 + 20) * v8), 2 * *(unsigned int *)(a1 + 8));
        BaseAddress += v7;
        ++v8;
      }
      while (v8 < *(_DWORD *)(a1 + 12));
    }
    CVPixelBufferUnlockBaseAddress(*pixelBufferOut, 0);
    return 0;
  }
  return result;
}

uint64_t cva::createCVPixelBufferFromImageCopy<float>(uint64_t a1, CVPixelBufferRef *pixelBufferOut)
{
  uint64_t result;
  char *BaseAddress;
  size_t BytesPerRow;
  size_t v7;
  unsigned int v8;

  result = CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], *(unsigned int *)(a1 + 8), *(unsigned int *)(a1 + 12), 0x4C303066u, 0, pixelBufferOut);
  if (!(_DWORD)result)
  {
    CVPixelBufferLockBaseAddress(*pixelBufferOut, 0);
    BaseAddress = (char *)CVPixelBufferGetBaseAddress(*pixelBufferOut);
    BytesPerRow = CVPixelBufferGetBytesPerRow(*pixelBufferOut);
    if (*(_DWORD *)(a1 + 12))
    {
      v7 = BytesPerRow;
      v8 = 0;
      do
      {
        memcpy(BaseAddress, (const void *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)a1 + *(_DWORD *)(a1 + 20) * v8), 4 * *(unsigned int *)(a1 + 8));
        BaseAddress += v7;
        ++v8;
      }
      while (v8 < *(_DWORD *)(a1 + 12));
    }
    CVPixelBufferUnlockBaseAddress(*pixelBufferOut, 0);
    return 0;
  }
  return result;
}

uint64_t cva::createCVPixelBufferFromImageCopy<cva::Matrix<unsigned char,3u,1u,false>>(uint64_t a1, CVPixelBufferRef *pixelBufferOut)
{
  uint64_t result;
  char *BaseAddress;
  size_t BytesPerRow;
  size_t v7;
  unsigned int v8;

  result = CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], *(unsigned int *)(a1 + 8), *(unsigned int *)(a1 + 12), 0x18u, 0, pixelBufferOut);
  if (!(_DWORD)result)
  {
    CVPixelBufferLockBaseAddress(*pixelBufferOut, 0);
    BaseAddress = (char *)CVPixelBufferGetBaseAddress(*pixelBufferOut);
    BytesPerRow = CVPixelBufferGetBytesPerRow(*pixelBufferOut);
    if (*(_DWORD *)(a1 + 12))
    {
      v7 = BytesPerRow;
      v8 = 0;
      do
      {
        memcpy(BaseAddress, (const void *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)a1 + *(_DWORD *)(a1 + 20) * v8), 3 * *(unsigned int *)(a1 + 8));
        BaseAddress += v7;
        ++v8;
      }
      while (v8 < *(_DWORD *)(a1 + 12));
    }
    CVPixelBufferUnlockBaseAddress(*pixelBufferOut, 0);
    return 0;
  }
  return result;
}

uint64_t cva::createCVPixelBufferFromImageCopy<cva::Matrix<unsigned char,4u,1u,false>>(uint64_t a1, CVPixelBufferRef *pixelBufferOut)
{
  uint64_t result;
  char *BaseAddress;
  size_t BytesPerRow;
  size_t v7;
  unsigned int v8;

  result = CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], *(unsigned int *)(a1 + 8), *(unsigned int *)(a1 + 12), 0x20u, 0, pixelBufferOut);
  if (!(_DWORD)result)
  {
    CVPixelBufferLockBaseAddress(*pixelBufferOut, 0);
    BaseAddress = (char *)CVPixelBufferGetBaseAddress(*pixelBufferOut);
    BytesPerRow = CVPixelBufferGetBytesPerRow(*pixelBufferOut);
    if (*(_DWORD *)(a1 + 12))
    {
      v7 = BytesPerRow;
      v8 = 0;
      do
      {
        memcpy(BaseAddress, (const void *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)a1 + *(_DWORD *)(a1 + 20) * v8), 4 * *(unsigned int *)(a1 + 8));
        BaseAddress += v7;
        ++v8;
      }
      while (v8 < *(_DWORD *)(a1 + 12));
    }
    CVPixelBufferUnlockBaseAddress(*pixelBufferOut, 0);
    return 0;
  }
  return result;
}

uint64_t cva::pixelBufferConvertYCbCrToARGB(__CVBuffer *a1, uint64_t a2, int a3)
{
  signed int PixelFormatType;
  unsigned int Width;
  unsigned int Height;
  unsigned int v9;
  uint64_t v11;
  const vImage_YpCbCrToARGBMatrix **v12;
  const vImage_YpCbCrToARGBMatrix *v13;
  __int128 *v14;
  __int128 *v15;
  __int128 v16;
  size_t v17;
  __int128 v18;
  size_t v19;
  size_t v21;
  vImage_Buffer v22;
  vImage_Buffer srcCbCr;
  vImage_Buffer srcYp;
  vImage_YpCbCrPixelRange pixelRange;
  uint8_t permuteMap[4];
  vImage_YpCbCrToARGB outInfo;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
    Width = CVPixelBufferGetWidth(a1);
    Height = CVPixelBufferGetHeight(a1);
    v9 = Height;
    if (*(_DWORD *)(a2 + 8) >= Width && *(_DWORD *)(a2 + 12) >= Height)
    {
      v12 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x24BDB2EE0];
      if (!a3)
        v12 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x24BDB2ED8];
      v13 = *v12;
      *(_DWORD *)permuteMap = 50462976;
      v11 = 4294960636;
      if (PixelFormatType <= 875704437)
      {
        if (PixelFormatType == 846624121)
        {
          pixelRange = *(vImage_YpCbCrPixelRange *)ymmword_20AC0605C;
          if (!vImageConvert_YpCbCrToARGB_GenerateConversion(v13, &pixelRange, &outInfo, kvImage422CbYpCrYp8, kvImageARGB8888, 0))
          {
            srcYp.data = CVPixelBufferGetBaseAddress(a1);
            srcYp.height = v9;
            srcYp.width = Width;
            srcYp.rowBytes = CVPixelBufferGetBytesPerRow(a1);
            srcCbCr.data = *(void **)(a2 + 24);
            srcCbCr.height = v9;
            v21 = *(unsigned int *)(a2 + 20);
            srcCbCr.width = Width;
            srcCbCr.rowBytes = v21;
            if (srcYp.data)
            {
              if (!vImageConvert_422CbYpCrYp8ToARGB8888(&srcYp, &srcCbCr, &outInfo, permuteMap, 0xFFu, 0))
                return 0;
            }
          }
          return 4294960636;
        }
        if (PixelFormatType != 875704422)
          return v11;
        v15 = &xmmword_20AC0607C;
      }
      else
      {
        if (PixelFormatType != 875704438)
        {
          if (PixelFormatType == 2037741158)
          {
            v14 = &xmmword_20AC0607C;
          }
          else
          {
            if (PixelFormatType != 2037741171)
              return v11;
            v14 = (__int128 *)ymmword_20AC0605C;
          }
          v18 = v14[1];
          *(_OWORD *)&pixelRange.Yp_bias = *v14;
          *(_OWORD *)&pixelRange.YpMax = v18;
          if (!vImageConvert_YpCbCrToARGB_GenerateConversion(v13, &pixelRange, &outInfo, kvImage422YpCbYpCr8, kvImageARGB8888, 0))
          {
            srcYp.data = CVPixelBufferGetBaseAddress(a1);
            srcYp.height = v9;
            srcYp.width = Width;
            srcYp.rowBytes = CVPixelBufferGetBytesPerRow(a1);
            srcCbCr.data = *(void **)(a2 + 24);
            srcCbCr.height = v9;
            v19 = *(unsigned int *)(a2 + 20);
            srcCbCr.width = Width;
            srcCbCr.rowBytes = v19;
            if (srcYp.data)
            {
              if (!vImageConvert_422YpCbYpCr8ToARGB8888(&srcYp, &srcCbCr, &outInfo, permuteMap, 0xFFu, 0))
                return 0;
            }
          }
          return 4294960636;
        }
        v15 = (__int128 *)ymmword_20AC0605C;
      }
      v16 = v15[1];
      *(_OWORD *)&pixelRange.Yp_bias = *v15;
      *(_OWORD *)&pixelRange.YpMax = v16;
      if (!vImageConvert_YpCbCrToARGB_GenerateConversion(v13, &pixelRange, &outInfo, kvImage420Yp8_CbCr8, kvImageARGB8888, 0))
      {
        srcYp.data = CVPixelBufferGetBaseAddressOfPlane(a1, 0);
        srcYp.height = v9;
        srcYp.width = Width;
        srcYp.rowBytes = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
        srcCbCr.data = CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
        srcCbCr.height = v9;
        srcCbCr.width = Width;
        srcCbCr.rowBytes = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
        v22.data = *(void **)(a2 + 24);
        v22.height = v9;
        v17 = *(unsigned int *)(a2 + 20);
        v22.width = Width;
        v22.rowBytes = v17;
        if (srcYp.data)
        {
          if (!vImageConvert_420Yp8_CbCr8ToARGB8888(&srcYp, &srcCbCr, &v22, &outInfo, permuteMap, 0xFFu, 0))
            return 0;
        }
      }
      return 4294960636;
    }
  }
  return 4294960635;
}

uint64_t cva::pixelBufferConvertARGBToYpCbCr(uint64_t a1, CVPixelBufferRef pixelBuffer, int a3)
{
  signed int PixelFormatType;
  unsigned int Width;
  unsigned int Height;
  unsigned int v9;
  uint64_t v11;
  const vImage_ARGBToYpCbCrMatrix **v12;
  const vImage_ARGBToYpCbCrMatrix *v13;
  __int128 *v14;
  __int128 *v15;
  __int128 v16;
  size_t v17;
  __int128 v18;
  size_t v20;
  vImage_Buffer v21;
  vImage_Buffer destCbCr;
  vImage_Buffer destYp;
  vImage_YpCbCrPixelRange pixelRange;
  uint8_t permuteMap[4];
  vImage_ARGBToYpCbCr outInfo;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  if (!pixelBuffer)
    return 4294960635;
  PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  Width = CVPixelBufferGetWidth(pixelBuffer);
  Height = CVPixelBufferGetHeight(pixelBuffer);
  v9 = Height;
  if (*(_DWORD *)(a1 + 8) > Width || *(_DWORD *)(a1 + 12) > Height)
    return 4294960635;
  v12 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x24BDB2EC8];
  if (!a3)
    v12 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x24BDB2EC0];
  v13 = *v12;
  *(_DWORD *)permuteMap = 50462976;
  v11 = 4294960636;
  if (PixelFormatType > 2037741157)
  {
    if (PixelFormatType == 2037741158)
    {
      v15 = &xmmword_20AC0607C;
    }
    else
    {
      if (PixelFormatType != 2037741171)
        return v11;
      v15 = &xmmword_20AC0605C;
    }
    v18 = v15[1];
    *(_OWORD *)&pixelRange.Yp_bias = *v15;
    *(_OWORD *)&pixelRange.YpMax = v18;
    if (!vImageConvert_ARGBToYpCbCr_GenerateConversion(v13, &pixelRange, &outInfo, kvImageARGB8888, kvImage422YpCbYpCr8, 0))
    {
      destYp.data = CVPixelBufferGetBaseAddress(pixelBuffer);
      destYp.height = v9;
      destYp.width = Width;
      destYp.rowBytes = CVPixelBufferGetBytesPerRow(pixelBuffer);
      destCbCr.data = *(void **)(a1 + 24);
      destCbCr.height = v9;
      v20 = *(unsigned int *)(a1 + 20);
      destCbCr.width = Width;
      destCbCr.rowBytes = v20;
      if (destYp.data)
      {
        if (!vImageConvert_ARGB8888To422YpCbYpCr8(&destCbCr, &destYp, &outInfo, permuteMap, 0))
          return 0;
      }
    }
    return 4294960636;
  }
  if (PixelFormatType == 875704422)
  {
    v14 = &xmmword_20AC0607C;
    goto LABEL_18;
  }
  if (PixelFormatType == 875704438)
  {
    v14 = &xmmword_20AC0605C;
LABEL_18:
    v16 = v14[1];
    *(_OWORD *)&pixelRange.Yp_bias = *v14;
    *(_OWORD *)&pixelRange.YpMax = v16;
    if (!vImageConvert_ARGBToYpCbCr_GenerateConversion(v13, &pixelRange, &outInfo, kvImageARGB8888, kvImage420Yp8_CbCr8, 0))
    {
      destYp.data = CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
      destYp.height = v9;
      destYp.width = Width;
      destYp.rowBytes = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
      destCbCr.data = CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 1uLL);
      destCbCr.height = v9;
      destCbCr.width = Width;
      destCbCr.rowBytes = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 1uLL);
      v21.data = *(void **)(a1 + 24);
      v21.height = v9;
      v17 = *(unsigned int *)(a1 + 20);
      v21.width = Width;
      v21.rowBytes = v17;
      if (destYp.data)
      {
        if (!vImageConvert_ARGB8888To420Yp8_CbCr8(&v21, &destYp, &destCbCr, &outInfo, permuteMap, 0))
          return 0;
      }
    }
    return 4294960636;
  }
  return v11;
}

uint64_t cva::pixelBufferConvertYCbCrToARGB(cva *this, __CVBuffer *a2, __CVBuffer *a3)
{
  int v3;
  _QWORD v6[4];

  v3 = (int)a3;
  cva::imageViewFromPixelBuffer<cva::Matrix<unsigned char,4u,1u,false>>(a2, v6);
  return cva::pixelBufferConvertYCbCrToARGB(this, (uint64_t)v6, v3);
}

__CFDictionary *cva::createAttributeDictionary(cva *this, int a2, int a3, int a4, int a5, int a6, char a7, int a8, BOOL a9)
{
  const __CFAllocator *v11;
  __CFDictionary *Mutable;
  CFNumberRef v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFNumberRef v16;
  CFNumberRef v17;
  CFNumberRef v18;
  CFNumberRef v19;
  CFNumberRef v20;
  CFNumberRef v21;
  CFNumberRef v22;
  __CFDictionary *v23;
  __CFDictionary *v24;
  const void *v25;
  CFNumberRef v26;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int valuePtr;

  v32 = a2;
  valuePtr = (int)this;
  v30 = a4;
  v31 = a3;
  v28 = a6;
  v29 = a5;
  v11 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (Mutable)
  {
    v13 = CFNumberCreate(v11, kCFNumberIntType, &valuePtr);
    if (!v13)
      goto LABEL_13;
    v14 = v13;
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BDC5708], v13);
    CFRelease(v14);
    v15 = CFNumberCreate(v11, kCFNumberIntType, &v32);
    if (!v15)
      goto LABEL_13;
    v16 = v15;
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BDC5650], v15);
    CFRelease(v16);
    v17 = CFNumberCreate(v11, kCFNumberIntType, &v31);
    if (!v17)
      goto LABEL_13;
    v18 = v17;
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BDC56B8], v17);
    CFRelease(v18);
    v19 = CFNumberCreate(v11, kCFNumberIntType, &v30);
    if (!v19)
      goto LABEL_13;
    v20 = v19;
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BDC55D0], v19);
    CFRelease(v20);
    v21 = CFNumberCreate(v11, kCFNumberIntType, &v29);
    if (!v21)
      goto LABEL_13;
    v22 = v21;
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BDC56C8], v21);
    CFRelease(v22);
    v23 = CFDictionaryCreateMutable(v11, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    if (v23)
    {
      v24 = v23;
      v25 = (const void *)*MEMORY[0x24BDBD270];
      CFDictionarySetValue(v23, (const void *)*MEMORY[0x24BDD8EC8], (const void *)*MEMORY[0x24BDBD270]);
      if ((a7 & 1) == 0)
        CFDictionarySetValue(v24, (const void *)*MEMORY[0x24BDD8FB8], (const void *)*MEMORY[0x24BDBD268]);
      if (a8)
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BDC5690], v25);
      v26 = CFNumberCreate(v11, kCFNumberIntType, &v28);
      CFDictionarySetValue(v24, (const void *)*MEMORY[0x24BDD8E40], v26);
      CFRelease(v26);
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x24BDC5668], v24);
    }
    else
    {
LABEL_13:
      v24 = Mutable;
      Mutable = 0;
    }
    CFRelease(v24);
  }
  return Mutable;
}

uint64_t cva::pixelBufferPoolCreate(cva *this, int a2, int a3, CVPixelBufferPoolRef *a4, __CVPixelBufferPool **a5)
{
  __CFDictionary *AttributeDictionary;
  __CFDictionary *v7;
  uint64_t v8;
  BOOL v10;

  AttributeDictionary = cva::createAttributeDictionary(this, a2, a3, 16, 16, 0, 1, 0, v10);
  if (AttributeDictionary)
  {
    v7 = AttributeDictionary;
    v8 = CVPixelBufferPoolCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, AttributeDictionary, a4);
    CFRelease(v7);
    if (!(_DWORD)v8)
      return v8;
  }
  else
  {
    v8 = 4294960636;
  }
  *a4 = 0;
  return v8;
}

uint64_t cva::pixelBufferCreate(cva *this, unsigned int a2, OSType a3, CVPixelBufferRef *a4, __CVBuffer **a5, int a6, int a7, char a8, BOOL a9, BOOL a10)
{
  unsigned int v13;
  __CFDictionary *AttributeDictionary;
  __CFDictionary *v15;
  uint64_t v16;
  BOOL v18;

  v13 = this;
  AttributeDictionary = cva::createAttributeDictionary(this, a2, a3, (int)a5, a6, a7, a8, a9, v18);
  if (AttributeDictionary)
  {
    v15 = AttributeDictionary;
    v16 = CVPixelBufferCreate(0, v13, a2, a3, AttributeDictionary, a4);
    CFRelease(v15);
    if (!(_DWORD)v16)
      return v16;
  }
  else
  {
    v16 = 4294960636;
  }
  *a4 = 0;
  return v16;
}

void cva::setNumberValue(cva *this, __CFDictionary *a2, const __CFString *a3)
{
  CFNumberRef v5;
  int valuePtr;

  valuePtr = (int)a3;
  v5 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFDictionarySetValue(this, a2, v5);
  CFRelease(v5);
}

void cva::setDataValue(cva *this, __CFDictionary *a2, const __CFString *a3, UInt8 *bytes, const unsigned __int8 *a5)
{
  CFDataRef v7;

  v7 = CFDataCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], bytes, (CFIndex)a3);
  CFDictionarySetValue(this, a2, v7);
  CFRelease(v7);
}

uint64_t sub_20AB8BD4C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20AB8BD7C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD2D02CLL);
}

void cva::experimental::ResizeStrategyLanczos<unsigned char,true>::Setup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  size_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  __int128 v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char v32;
  vImage_Buffer v33;
  vImage_Buffer src;

  v4 = *(void **)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 8);
  v6.i64[0] = v5;
  v6.i64[1] = HIDWORD(v5);
  *(int8x16_t *)&src.height = vextq_s8(v6, v6, 8uLL);
  src.rowBytes = *(unsigned int *)(a2 + 20);
  v33.data = *(void **)(a3 + 24);
  v7 = *(_QWORD *)(a3 + 8);
  v6.i64[0] = v7;
  v6.i64[1] = HIDWORD(v7);
  *(int8x16_t *)&v33.height = vextq_s8(v6, v6, 8uLL);
  v33.rowBytes = *(unsigned int *)(a3 + 20);
  src.data = v4;
  v8 = vImageScale_Planar8(&src, &v33, 0, 0xA8u);
  if ((v8 & 0x8000000000000000) == 0)
  {
    v9 = v8;
    v11 = *(char **)(a1 + 8);
    v10 = *(char **)(a1 + 16);
    v12 = v10 - v11;
    v13 = v8 - (v10 - v11);
    if (v8 > v10 - v11)
    {
      v14 = *(_QWORD *)(a1 + 24);
      if (v14 - (uint64_t)v10 >= v13)
      {
        bzero(*(void **)(a1 + 16), v13);
        *(_QWORD *)(a1 + 16) = &v10[v13];
        return;
      }
      v15 = v14 - (_QWORD)v11;
      v16 = 2 * v15;
      if (2 * v15 <= v8)
        v16 = v8;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v17 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v17 = v16;
      v18 = (char *)operator new(v17);
      v19 = &v18[v12];
      v20 = &v18[v17];
      v21 = &v18[v9];
      bzero(&v18[v12], v13);
      if (v10 == v11)
        goto LABEL_29;
      if (v12 < 8 || (unint64_t)(v11 - v18) < 0x20)
        goto LABEL_26;
      if (v12 >= 0x20)
      {
        v22 = v12 & 0xFFFFFFFFFFFFFFE0;
        v23 = v10 - 16;
        v24 = &v18[v10 - 16 - v11];
        v25 = v12 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v26 = *(_OWORD *)v23;
          *((_OWORD *)v24 - 1) = *((_OWORD *)v23 - 1);
          *(_OWORD *)v24 = v26;
          v24 -= 32;
          v23 -= 32;
          v25 -= 32;
        }
        while (v25);
        if (v12 == v22)
          goto LABEL_28;
        if ((v12 & 0x18) == 0)
        {
          v19 -= v22;
          v10 -= v22;
          goto LABEL_26;
        }
      }
      else
      {
        v22 = 0;
      }
      v27 = v22 - (v12 & 0xFFFFFFFFFFFFFFF8);
      v28 = &v10[-v22 - 8];
      v29 = (char *)(v28 - v11);
      do
      {
        v30 = *(_QWORD *)v28;
        v28 -= 8;
        *(_QWORD *)&v29[(_QWORD)v18] = v30;
        v29 -= 8;
        v27 += 8;
      }
      while (v27);
      if (v12 == (v12 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_28;
      v19 -= v12 & 0xFFFFFFFFFFFFFFF8;
      v10 -= v12 & 0xFFFFFFFFFFFFFFF8;
LABEL_26:
      v31 = v19 - 1;
      do
      {
        v32 = *--v10;
        *v31-- = v32;
      }
      while (v10 != v11);
LABEL_28:
      v10 = v11;
      v19 = v18;
LABEL_29:
      *(_QWORD *)(a1 + 8) = v19;
      *(_QWORD *)(a1 + 16) = v21;
      *(_QWORD *)(a1 + 24) = v20;
      if (v10)
        operator delete(v10);
      return;
    }
    if (v8 < v10 - v11)
      *(_QWORD *)(a1 + 16) = &v11[v8];
  }
}

BOOL cva::experimental::ResizeStrategyLanczos<unsigned char,true>::Resize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  vImage_Buffer v9;
  vImage_Buffer src;

  v3 = *(void **)(a1 + 8);
  v4 = *(void **)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 8);
  v6.i64[0] = v5;
  v6.i64[1] = HIDWORD(v5);
  *(int8x16_t *)&src.height = vextq_s8(v6, v6, 8uLL);
  src.rowBytes = *(unsigned int *)(a2 + 20);
  v9.data = *(void **)(a3 + 24);
  v7 = *(_QWORD *)(a3 + 8);
  v6.i64[0] = v7;
  v6.i64[1] = HIDWORD(v7);
  *(int8x16_t *)&v9.height = vextq_s8(v6, v6, 8uLL);
  v9.rowBytes = *(unsigned int *)(a3 + 20);
  src.data = v4;
  return vImageScale_Planar8(&src, &v9, v3, 0x28u) >= 0;
}

uint64_t sub_20AB8C044()
{
  return 0;
}

uint64_t sub_20AB8C04C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20AB8C07C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD2D02CLL);
}

void cva::experimental::ResizeStrategyLanczos<unsigned char,false>::Setup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  size_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  __int128 v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char v32;
  vImage_Buffer v33;
  vImage_Buffer src;

  v4 = *(void **)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 8);
  v6.i64[0] = v5;
  v6.i64[1] = HIDWORD(v5);
  *(int8x16_t *)&src.height = vextq_s8(v6, v6, 8uLL);
  src.rowBytes = *(unsigned int *)(a2 + 20);
  v33.data = *(void **)(a3 + 24);
  v7 = *(_QWORD *)(a3 + 8);
  v6.i64[0] = v7;
  v6.i64[1] = HIDWORD(v7);
  *(int8x16_t *)&v33.height = vextq_s8(v6, v6, 8uLL);
  v33.rowBytes = *(unsigned int *)(a3 + 20);
  src.data = v4;
  v8 = vImageScale_Planar8(&src, &v33, 0, 0x88u);
  if ((v8 & 0x8000000000000000) == 0)
  {
    v9 = v8;
    v11 = *(char **)(a1 + 8);
    v10 = *(char **)(a1 + 16);
    v12 = v10 - v11;
    v13 = v8 - (v10 - v11);
    if (v8 > v10 - v11)
    {
      v14 = *(_QWORD *)(a1 + 24);
      if (v14 - (uint64_t)v10 >= v13)
      {
        bzero(*(void **)(a1 + 16), v13);
        *(_QWORD *)(a1 + 16) = &v10[v13];
        return;
      }
      v15 = v14 - (_QWORD)v11;
      v16 = 2 * v15;
      if (2 * v15 <= v8)
        v16 = v8;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v17 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v17 = v16;
      v18 = (char *)operator new(v17);
      v19 = &v18[v12];
      v20 = &v18[v17];
      v21 = &v18[v9];
      bzero(&v18[v12], v13);
      if (v10 == v11)
        goto LABEL_29;
      if (v12 < 8 || (unint64_t)(v11 - v18) < 0x20)
        goto LABEL_26;
      if (v12 >= 0x20)
      {
        v22 = v12 & 0xFFFFFFFFFFFFFFE0;
        v23 = v10 - 16;
        v24 = &v18[v10 - 16 - v11];
        v25 = v12 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v26 = *(_OWORD *)v23;
          *((_OWORD *)v24 - 1) = *((_OWORD *)v23 - 1);
          *(_OWORD *)v24 = v26;
          v24 -= 32;
          v23 -= 32;
          v25 -= 32;
        }
        while (v25);
        if (v12 == v22)
          goto LABEL_28;
        if ((v12 & 0x18) == 0)
        {
          v19 -= v22;
          v10 -= v22;
          goto LABEL_26;
        }
      }
      else
      {
        v22 = 0;
      }
      v27 = v22 - (v12 & 0xFFFFFFFFFFFFFFF8);
      v28 = &v10[-v22 - 8];
      v29 = (char *)(v28 - v11);
      do
      {
        v30 = *(_QWORD *)v28;
        v28 -= 8;
        *(_QWORD *)&v29[(_QWORD)v18] = v30;
        v29 -= 8;
        v27 += 8;
      }
      while (v27);
      if (v12 == (v12 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_28;
      v19 -= v12 & 0xFFFFFFFFFFFFFFF8;
      v10 -= v12 & 0xFFFFFFFFFFFFFFF8;
LABEL_26:
      v31 = v19 - 1;
      do
      {
        v32 = *--v10;
        *v31-- = v32;
      }
      while (v10 != v11);
LABEL_28:
      v10 = v11;
      v19 = v18;
LABEL_29:
      *(_QWORD *)(a1 + 8) = v19;
      *(_QWORD *)(a1 + 16) = v21;
      *(_QWORD *)(a1 + 24) = v20;
      if (v10)
        operator delete(v10);
      return;
    }
    if (v8 < v10 - v11)
      *(_QWORD *)(a1 + 16) = &v11[v8];
  }
}

BOOL cva::experimental::ResizeStrategyLanczos<unsigned char,false>::Resize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  vImage_Buffer v9;
  vImage_Buffer src;

  v3 = *(void **)(a1 + 8);
  v4 = *(void **)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 8);
  v6.i64[0] = v5;
  v6.i64[1] = HIDWORD(v5);
  *(int8x16_t *)&src.height = vextq_s8(v6, v6, 8uLL);
  src.rowBytes = *(unsigned int *)(a2 + 20);
  v9.data = *(void **)(a3 + 24);
  v7 = *(_QWORD *)(a3 + 8);
  v6.i64[0] = v7;
  v6.i64[1] = HIDWORD(v7);
  *(int8x16_t *)&v9.height = vextq_s8(v6, v6, 8uLL);
  v9.rowBytes = *(unsigned int *)(a3 + 20);
  src.data = v4;
  return vImageScale_Planar8(&src, &v9, v3, 8u) >= 0;
}

uint64_t sub_20AB8C344(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20AB8C374(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD2D02CLL);
}

void cva::experimental::ResizeStrategyLanczos<unsigned short,true>::Setup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  size_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  __int128 v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char v32;
  vImage_Buffer v33;
  vImage_Buffer src;

  v4 = *(void **)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 8);
  v6.i64[0] = v5;
  v6.i64[1] = HIDWORD(v5);
  *(int8x16_t *)&src.height = vextq_s8(v6, v6, 8uLL);
  src.rowBytes = *(unsigned int *)(a2 + 20);
  v33.data = *(void **)(a3 + 24);
  v7 = *(_QWORD *)(a3 + 8);
  v6.i64[0] = v7;
  v6.i64[1] = HIDWORD(v7);
  *(int8x16_t *)&v33.height = vextq_s8(v6, v6, 8uLL);
  v33.rowBytes = *(unsigned int *)(a3 + 20);
  src.data = v4;
  v8 = vImageScale_Planar16U(&src, &v33, 0, 0xA8u);
  if ((v8 & 0x8000000000000000) == 0)
  {
    v9 = v8;
    v11 = *(char **)(a1 + 8);
    v10 = *(char **)(a1 + 16);
    v12 = v10 - v11;
    v13 = v8 - (v10 - v11);
    if (v8 > v10 - v11)
    {
      v14 = *(_QWORD *)(a1 + 24);
      if (v14 - (uint64_t)v10 >= v13)
      {
        bzero(*(void **)(a1 + 16), v13);
        *(_QWORD *)(a1 + 16) = &v10[v13];
        return;
      }
      v15 = v14 - (_QWORD)v11;
      v16 = 2 * v15;
      if (2 * v15 <= v8)
        v16 = v8;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v17 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v17 = v16;
      v18 = (char *)operator new(v17);
      v19 = &v18[v12];
      v20 = &v18[v17];
      v21 = &v18[v9];
      bzero(&v18[v12], v13);
      if (v10 == v11)
        goto LABEL_29;
      if (v12 < 8 || (unint64_t)(v11 - v18) < 0x20)
        goto LABEL_26;
      if (v12 >= 0x20)
      {
        v22 = v12 & 0xFFFFFFFFFFFFFFE0;
        v23 = v10 - 16;
        v24 = &v18[v10 - 16 - v11];
        v25 = v12 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v26 = *(_OWORD *)v23;
          *((_OWORD *)v24 - 1) = *((_OWORD *)v23 - 1);
          *(_OWORD *)v24 = v26;
          v24 -= 32;
          v23 -= 32;
          v25 -= 32;
        }
        while (v25);
        if (v12 == v22)
          goto LABEL_28;
        if ((v12 & 0x18) == 0)
        {
          v19 -= v22;
          v10 -= v22;
          goto LABEL_26;
        }
      }
      else
      {
        v22 = 0;
      }
      v27 = v22 - (v12 & 0xFFFFFFFFFFFFFFF8);
      v28 = &v10[-v22 - 8];
      v29 = (char *)(v28 - v11);
      do
      {
        v30 = *(_QWORD *)v28;
        v28 -= 8;
        *(_QWORD *)&v29[(_QWORD)v18] = v30;
        v29 -= 8;
        v27 += 8;
      }
      while (v27);
      if (v12 == (v12 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_28;
      v19 -= v12 & 0xFFFFFFFFFFFFFFF8;
      v10 -= v12 & 0xFFFFFFFFFFFFFFF8;
LABEL_26:
      v31 = v19 - 1;
      do
      {
        v32 = *--v10;
        *v31-- = v32;
      }
      while (v10 != v11);
LABEL_28:
      v10 = v11;
      v19 = v18;
LABEL_29:
      *(_QWORD *)(a1 + 8) = v19;
      *(_QWORD *)(a1 + 16) = v21;
      *(_QWORD *)(a1 + 24) = v20;
      if (v10)
        operator delete(v10);
      return;
    }
    if (v8 < v10 - v11)
      *(_QWORD *)(a1 + 16) = &v11[v8];
  }
}

BOOL cva::experimental::ResizeStrategyLanczos<unsigned short,true>::Resize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  vImage_Buffer v9;
  vImage_Buffer src;

  v3 = *(void **)(a1 + 8);
  v4 = *(void **)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 8);
  v6.i64[0] = v5;
  v6.i64[1] = HIDWORD(v5);
  *(int8x16_t *)&src.height = vextq_s8(v6, v6, 8uLL);
  src.rowBytes = *(unsigned int *)(a2 + 20);
  v9.data = *(void **)(a3 + 24);
  v7 = *(_QWORD *)(a3 + 8);
  v6.i64[0] = v7;
  v6.i64[1] = HIDWORD(v7);
  *(int8x16_t *)&v9.height = vextq_s8(v6, v6, 8uLL);
  v9.rowBytes = *(unsigned int *)(a3 + 20);
  src.data = v4;
  return vImageScale_Planar16U(&src, &v9, v3, 0x28u) >= 0;
}

uint64_t sub_20AB8C63C()
{
  return 0;
}

uint64_t sub_20AB8C644(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20AB8C674(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD2D02CLL);
}

void cva::experimental::ResizeStrategyLanczos<unsigned short,false>::Setup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  size_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  __int128 v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char v32;
  vImage_Buffer v33;
  vImage_Buffer src;

  v4 = *(void **)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 8);
  v6.i64[0] = v5;
  v6.i64[1] = HIDWORD(v5);
  *(int8x16_t *)&src.height = vextq_s8(v6, v6, 8uLL);
  src.rowBytes = *(unsigned int *)(a2 + 20);
  v33.data = *(void **)(a3 + 24);
  v7 = *(_QWORD *)(a3 + 8);
  v6.i64[0] = v7;
  v6.i64[1] = HIDWORD(v7);
  *(int8x16_t *)&v33.height = vextq_s8(v6, v6, 8uLL);
  v33.rowBytes = *(unsigned int *)(a3 + 20);
  src.data = v4;
  v8 = vImageScale_Planar16U(&src, &v33, 0, 0x88u);
  if ((v8 & 0x8000000000000000) == 0)
  {
    v9 = v8;
    v11 = *(char **)(a1 + 8);
    v10 = *(char **)(a1 + 16);
    v12 = v10 - v11;
    v13 = v8 - (v10 - v11);
    if (v8 > v10 - v11)
    {
      v14 = *(_QWORD *)(a1 + 24);
      if (v14 - (uint64_t)v10 >= v13)
      {
        bzero(*(void **)(a1 + 16), v13);
        *(_QWORD *)(a1 + 16) = &v10[v13];
        return;
      }
      v15 = v14 - (_QWORD)v11;
      v16 = 2 * v15;
      if (2 * v15 <= v8)
        v16 = v8;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v17 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v17 = v16;
      v18 = (char *)operator new(v17);
      v19 = &v18[v12];
      v20 = &v18[v17];
      v21 = &v18[v9];
      bzero(&v18[v12], v13);
      if (v10 == v11)
        goto LABEL_29;
      if (v12 < 8 || (unint64_t)(v11 - v18) < 0x20)
        goto LABEL_26;
      if (v12 >= 0x20)
      {
        v22 = v12 & 0xFFFFFFFFFFFFFFE0;
        v23 = v10 - 16;
        v24 = &v18[v10 - 16 - v11];
        v25 = v12 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v26 = *(_OWORD *)v23;
          *((_OWORD *)v24 - 1) = *((_OWORD *)v23 - 1);
          *(_OWORD *)v24 = v26;
          v24 -= 32;
          v23 -= 32;
          v25 -= 32;
        }
        while (v25);
        if (v12 == v22)
          goto LABEL_28;
        if ((v12 & 0x18) == 0)
        {
          v19 -= v22;
          v10 -= v22;
          goto LABEL_26;
        }
      }
      else
      {
        v22 = 0;
      }
      v27 = v22 - (v12 & 0xFFFFFFFFFFFFFFF8);
      v28 = &v10[-v22 - 8];
      v29 = (char *)(v28 - v11);
      do
      {
        v30 = *(_QWORD *)v28;
        v28 -= 8;
        *(_QWORD *)&v29[(_QWORD)v18] = v30;
        v29 -= 8;
        v27 += 8;
      }
      while (v27);
      if (v12 == (v12 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_28;
      v19 -= v12 & 0xFFFFFFFFFFFFFFF8;
      v10 -= v12 & 0xFFFFFFFFFFFFFFF8;
LABEL_26:
      v31 = v19 - 1;
      do
      {
        v32 = *--v10;
        *v31-- = v32;
      }
      while (v10 != v11);
LABEL_28:
      v10 = v11;
      v19 = v18;
LABEL_29:
      *(_QWORD *)(a1 + 8) = v19;
      *(_QWORD *)(a1 + 16) = v21;
      *(_QWORD *)(a1 + 24) = v20;
      if (v10)
        operator delete(v10);
      return;
    }
    if (v8 < v10 - v11)
      *(_QWORD *)(a1 + 16) = &v11[v8];
  }
}

BOOL cva::experimental::ResizeStrategyLanczos<unsigned short,false>::Resize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  vImage_Buffer v9;
  vImage_Buffer src;

  v3 = *(void **)(a1 + 8);
  v4 = *(void **)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 8);
  v6.i64[0] = v5;
  v6.i64[1] = HIDWORD(v5);
  *(int8x16_t *)&src.height = vextq_s8(v6, v6, 8uLL);
  src.rowBytes = *(unsigned int *)(a2 + 20);
  v9.data = *(void **)(a3 + 24);
  v7 = *(_QWORD *)(a3 + 8);
  v6.i64[0] = v7;
  v6.i64[1] = HIDWORD(v7);
  *(int8x16_t *)&v9.height = vextq_s8(v6, v6, 8uLL);
  v9.rowBytes = *(unsigned int *)(a3 + 20);
  src.data = v4;
  return vImageScale_Planar16U(&src, &v9, v3, 8u) >= 0;
}

uint64_t sub_20AB8C93C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20AB8C96C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD2D02CLL);
}

void cva::experimental::ResizeStrategyLanczos<short,true>::Setup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  size_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  __int128 v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char v32;
  vImage_Buffer v33;
  vImage_Buffer src;

  v4 = *(void **)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 8);
  v6.i64[0] = v5;
  v6.i64[1] = HIDWORD(v5);
  *(int8x16_t *)&src.height = vextq_s8(v6, v6, 8uLL);
  src.rowBytes = *(unsigned int *)(a2 + 20);
  v33.data = *(void **)(a3 + 24);
  v7 = *(_QWORD *)(a3 + 8);
  v6.i64[0] = v7;
  v6.i64[1] = HIDWORD(v7);
  *(int8x16_t *)&v33.height = vextq_s8(v6, v6, 8uLL);
  v33.rowBytes = *(unsigned int *)(a3 + 20);
  src.data = v4;
  v8 = vImageScale_Planar16S(&src, &v33, 0, 0xA8u);
  if ((v8 & 0x8000000000000000) == 0)
  {
    v9 = v8;
    v11 = *(char **)(a1 + 8);
    v10 = *(char **)(a1 + 16);
    v12 = v10 - v11;
    v13 = v8 - (v10 - v11);
    if (v8 > v10 - v11)
    {
      v14 = *(_QWORD *)(a1 + 24);
      if (v14 - (uint64_t)v10 >= v13)
      {
        bzero(*(void **)(a1 + 16), v13);
        *(_QWORD *)(a1 + 16) = &v10[v13];
        return;
      }
      v15 = v14 - (_QWORD)v11;
      v16 = 2 * v15;
      if (2 * v15 <= v8)
        v16 = v8;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v17 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v17 = v16;
      v18 = (char *)operator new(v17);
      v19 = &v18[v12];
      v20 = &v18[v17];
      v21 = &v18[v9];
      bzero(&v18[v12], v13);
      if (v10 == v11)
        goto LABEL_29;
      if (v12 < 8 || (unint64_t)(v11 - v18) < 0x20)
        goto LABEL_26;
      if (v12 >= 0x20)
      {
        v22 = v12 & 0xFFFFFFFFFFFFFFE0;
        v23 = v10 - 16;
        v24 = &v18[v10 - 16 - v11];
        v25 = v12 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v26 = *(_OWORD *)v23;
          *((_OWORD *)v24 - 1) = *((_OWORD *)v23 - 1);
          *(_OWORD *)v24 = v26;
          v24 -= 32;
          v23 -= 32;
          v25 -= 32;
        }
        while (v25);
        if (v12 == v22)
          goto LABEL_28;
        if ((v12 & 0x18) == 0)
        {
          v19 -= v22;
          v10 -= v22;
          goto LABEL_26;
        }
      }
      else
      {
        v22 = 0;
      }
      v27 = v22 - (v12 & 0xFFFFFFFFFFFFFFF8);
      v28 = &v10[-v22 - 8];
      v29 = (char *)(v28 - v11);
      do
      {
        v30 = *(_QWORD *)v28;
        v28 -= 8;
        *(_QWORD *)&v29[(_QWORD)v18] = v30;
        v29 -= 8;
        v27 += 8;
      }
      while (v27);
      if (v12 == (v12 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_28;
      v19 -= v12 & 0xFFFFFFFFFFFFFFF8;
      v10 -= v12 & 0xFFFFFFFFFFFFFFF8;
LABEL_26:
      v31 = v19 - 1;
      do
      {
        v32 = *--v10;
        *v31-- = v32;
      }
      while (v10 != v11);
LABEL_28:
      v10 = v11;
      v19 = v18;
LABEL_29:
      *(_QWORD *)(a1 + 8) = v19;
      *(_QWORD *)(a1 + 16) = v21;
      *(_QWORD *)(a1 + 24) = v20;
      if (v10)
        operator delete(v10);
      return;
    }
    if (v8 < v10 - v11)
      *(_QWORD *)(a1 + 16) = &v11[v8];
  }
}

BOOL cva::experimental::ResizeStrategyLanczos<short,true>::Resize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  vImage_Buffer v9;
  vImage_Buffer src;

  v3 = *(void **)(a1 + 8);
  v4 = *(void **)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 8);
  v6.i64[0] = v5;
  v6.i64[1] = HIDWORD(v5);
  *(int8x16_t *)&src.height = vextq_s8(v6, v6, 8uLL);
  src.rowBytes = *(unsigned int *)(a2 + 20);
  v9.data = *(void **)(a3 + 24);
  v7 = *(_QWORD *)(a3 + 8);
  v6.i64[0] = v7;
  v6.i64[1] = HIDWORD(v7);
  *(int8x16_t *)&v9.height = vextq_s8(v6, v6, 8uLL);
  v9.rowBytes = *(unsigned int *)(a3 + 20);
  src.data = v4;
  return vImageScale_Planar16S(&src, &v9, v3, 0x28u) >= 0;
}

uint64_t sub_20AB8CC34()
{
  return 0;
}

uint64_t sub_20AB8CC3C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20AB8CC6C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD2D02CLL);
}

void cva::experimental::ResizeStrategyLanczos<short,false>::Setup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  size_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  __int128 v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char v32;
  vImage_Buffer v33;
  vImage_Buffer src;

  v4 = *(void **)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 8);
  v6.i64[0] = v5;
  v6.i64[1] = HIDWORD(v5);
  *(int8x16_t *)&src.height = vextq_s8(v6, v6, 8uLL);
  src.rowBytes = *(unsigned int *)(a2 + 20);
  v33.data = *(void **)(a3 + 24);
  v7 = *(_QWORD *)(a3 + 8);
  v6.i64[0] = v7;
  v6.i64[1] = HIDWORD(v7);
  *(int8x16_t *)&v33.height = vextq_s8(v6, v6, 8uLL);
  v33.rowBytes = *(unsigned int *)(a3 + 20);
  src.data = v4;
  v8 = vImageScale_Planar16S(&src, &v33, 0, 0x88u);
  if ((v8 & 0x8000000000000000) == 0)
  {
    v9 = v8;
    v11 = *(char **)(a1 + 8);
    v10 = *(char **)(a1 + 16);
    v12 = v10 - v11;
    v13 = v8 - (v10 - v11);
    if (v8 > v10 - v11)
    {
      v14 = *(_QWORD *)(a1 + 24);
      if (v14 - (uint64_t)v10 >= v13)
      {
        bzero(*(void **)(a1 + 16), v13);
        *(_QWORD *)(a1 + 16) = &v10[v13];
        return;
      }
      v15 = v14 - (_QWORD)v11;
      v16 = 2 * v15;
      if (2 * v15 <= v8)
        v16 = v8;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v17 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v17 = v16;
      v18 = (char *)operator new(v17);
      v19 = &v18[v12];
      v20 = &v18[v17];
      v21 = &v18[v9];
      bzero(&v18[v12], v13);
      if (v10 == v11)
        goto LABEL_29;
      if (v12 < 8 || (unint64_t)(v11 - v18) < 0x20)
        goto LABEL_26;
      if (v12 >= 0x20)
      {
        v22 = v12 & 0xFFFFFFFFFFFFFFE0;
        v23 = v10 - 16;
        v24 = &v18[v10 - 16 - v11];
        v25 = v12 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v26 = *(_OWORD *)v23;
          *((_OWORD *)v24 - 1) = *((_OWORD *)v23 - 1);
          *(_OWORD *)v24 = v26;
          v24 -= 32;
          v23 -= 32;
          v25 -= 32;
        }
        while (v25);
        if (v12 == v22)
          goto LABEL_28;
        if ((v12 & 0x18) == 0)
        {
          v19 -= v22;
          v10 -= v22;
          goto LABEL_26;
        }
      }
      else
      {
        v22 = 0;
      }
      v27 = v22 - (v12 & 0xFFFFFFFFFFFFFFF8);
      v28 = &v10[-v22 - 8];
      v29 = (char *)(v28 - v11);
      do
      {
        v30 = *(_QWORD *)v28;
        v28 -= 8;
        *(_QWORD *)&v29[(_QWORD)v18] = v30;
        v29 -= 8;
        v27 += 8;
      }
      while (v27);
      if (v12 == (v12 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_28;
      v19 -= v12 & 0xFFFFFFFFFFFFFFF8;
      v10 -= v12 & 0xFFFFFFFFFFFFFFF8;
LABEL_26:
      v31 = v19 - 1;
      do
      {
        v32 = *--v10;
        *v31-- = v32;
      }
      while (v10 != v11);
LABEL_28:
      v10 = v11;
      v19 = v18;
LABEL_29:
      *(_QWORD *)(a1 + 8) = v19;
      *(_QWORD *)(a1 + 16) = v21;
      *(_QWORD *)(a1 + 24) = v20;
      if (v10)
        operator delete(v10);
      return;
    }
    if (v8 < v10 - v11)
      *(_QWORD *)(a1 + 16) = &v11[v8];
  }
}

BOOL cva::experimental::ResizeStrategyLanczos<short,false>::Resize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  vImage_Buffer v9;
  vImage_Buffer src;

  v3 = *(void **)(a1 + 8);
  v4 = *(void **)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 8);
  v6.i64[0] = v5;
  v6.i64[1] = HIDWORD(v5);
  *(int8x16_t *)&src.height = vextq_s8(v6, v6, 8uLL);
  src.rowBytes = *(unsigned int *)(a2 + 20);
  v9.data = *(void **)(a3 + 24);
  v7 = *(_QWORD *)(a3 + 8);
  v6.i64[0] = v7;
  v6.i64[1] = HIDWORD(v7);
  *(int8x16_t *)&v9.height = vextq_s8(v6, v6, 8uLL);
  v9.rowBytes = *(unsigned int *)(a3 + 20);
  src.data = v4;
  return vImageScale_Planar16S(&src, &v9, v3, 8u) >= 0;
}

uint64_t sub_20AB8CF34(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20AB8CF64(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD2D02CLL);
}

void cva::experimental::ResizeStrategyLanczos<float,true>::Setup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  size_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  __int128 v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char v32;
  vImage_Buffer v33;
  vImage_Buffer src;

  v4 = *(void **)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 8);
  v6.i64[0] = v5;
  v6.i64[1] = HIDWORD(v5);
  *(int8x16_t *)&src.height = vextq_s8(v6, v6, 8uLL);
  src.rowBytes = *(unsigned int *)(a2 + 20);
  v33.data = *(void **)(a3 + 24);
  v7 = *(_QWORD *)(a3 + 8);
  v6.i64[0] = v7;
  v6.i64[1] = HIDWORD(v7);
  *(int8x16_t *)&v33.height = vextq_s8(v6, v6, 8uLL);
  v33.rowBytes = *(unsigned int *)(a3 + 20);
  src.data = v4;
  v8 = vImageScale_PlanarF(&src, &v33, 0, 0xA8u);
  if ((v8 & 0x8000000000000000) == 0)
  {
    v9 = v8;
    v11 = *(char **)(a1 + 8);
    v10 = *(char **)(a1 + 16);
    v12 = v10 - v11;
    v13 = v8 - (v10 - v11);
    if (v8 > v10 - v11)
    {
      v14 = *(_QWORD *)(a1 + 24);
      if (v14 - (uint64_t)v10 >= v13)
      {
        bzero(*(void **)(a1 + 16), v13);
        *(_QWORD *)(a1 + 16) = &v10[v13];
        return;
      }
      v15 = v14 - (_QWORD)v11;
      v16 = 2 * v15;
      if (2 * v15 <= v8)
        v16 = v8;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v17 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v17 = v16;
      v18 = (char *)operator new(v17);
      v19 = &v18[v12];
      v20 = &v18[v17];
      v21 = &v18[v9];
      bzero(&v18[v12], v13);
      if (v10 == v11)
        goto LABEL_29;
      if (v12 < 8 || (unint64_t)(v11 - v18) < 0x20)
        goto LABEL_26;
      if (v12 >= 0x20)
      {
        v22 = v12 & 0xFFFFFFFFFFFFFFE0;
        v23 = v10 - 16;
        v24 = &v18[v10 - 16 - v11];
        v25 = v12 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v26 = *(_OWORD *)v23;
          *((_OWORD *)v24 - 1) = *((_OWORD *)v23 - 1);
          *(_OWORD *)v24 = v26;
          v24 -= 32;
          v23 -= 32;
          v25 -= 32;
        }
        while (v25);
        if (v12 == v22)
          goto LABEL_28;
        if ((v12 & 0x18) == 0)
        {
          v19 -= v22;
          v10 -= v22;
          goto LABEL_26;
        }
      }
      else
      {
        v22 = 0;
      }
      v27 = v22 - (v12 & 0xFFFFFFFFFFFFFFF8);
      v28 = &v10[-v22 - 8];
      v29 = (char *)(v28 - v11);
      do
      {
        v30 = *(_QWORD *)v28;
        v28 -= 8;
        *(_QWORD *)&v29[(_QWORD)v18] = v30;
        v29 -= 8;
        v27 += 8;
      }
      while (v27);
      if (v12 == (v12 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_28;
      v19 -= v12 & 0xFFFFFFFFFFFFFFF8;
      v10 -= v12 & 0xFFFFFFFFFFFFFFF8;
LABEL_26:
      v31 = v19 - 1;
      do
      {
        v32 = *--v10;
        *v31-- = v32;
      }
      while (v10 != v11);
LABEL_28:
      v10 = v11;
      v19 = v18;
LABEL_29:
      *(_QWORD *)(a1 + 8) = v19;
      *(_QWORD *)(a1 + 16) = v21;
      *(_QWORD *)(a1 + 24) = v20;
      if (v10)
        operator delete(v10);
      return;
    }
    if (v8 < v10 - v11)
      *(_QWORD *)(a1 + 16) = &v11[v8];
  }
}

BOOL cva::experimental::ResizeStrategyLanczos<float,true>::Resize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  vImage_Buffer v9;
  vImage_Buffer src;

  v3 = *(void **)(a1 + 8);
  v4 = *(void **)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 8);
  v6.i64[0] = v5;
  v6.i64[1] = HIDWORD(v5);
  *(int8x16_t *)&src.height = vextq_s8(v6, v6, 8uLL);
  src.rowBytes = *(unsigned int *)(a2 + 20);
  v9.data = *(void **)(a3 + 24);
  v7 = *(_QWORD *)(a3 + 8);
  v6.i64[0] = v7;
  v6.i64[1] = HIDWORD(v7);
  *(int8x16_t *)&v9.height = vextq_s8(v6, v6, 8uLL);
  v9.rowBytes = *(unsigned int *)(a3 + 20);
  src.data = v4;
  return vImageScale_PlanarF(&src, &v9, v3, 0x28u) >= 0;
}

uint64_t sub_20AB8D22C()
{
  return 0;
}

uint64_t sub_20AB8D234(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20AB8D264(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD2D02CLL);
}

void cva::experimental::ResizeStrategyLanczos<float,false>::Setup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  size_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  __int128 v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char v32;
  vImage_Buffer v33;
  vImage_Buffer src;

  v4 = *(void **)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 8);
  v6.i64[0] = v5;
  v6.i64[1] = HIDWORD(v5);
  *(int8x16_t *)&src.height = vextq_s8(v6, v6, 8uLL);
  src.rowBytes = *(unsigned int *)(a2 + 20);
  v33.data = *(void **)(a3 + 24);
  v7 = *(_QWORD *)(a3 + 8);
  v6.i64[0] = v7;
  v6.i64[1] = HIDWORD(v7);
  *(int8x16_t *)&v33.height = vextq_s8(v6, v6, 8uLL);
  v33.rowBytes = *(unsigned int *)(a3 + 20);
  src.data = v4;
  v8 = vImageScale_PlanarF(&src, &v33, 0, 0x88u);
  if ((v8 & 0x8000000000000000) == 0)
  {
    v9 = v8;
    v11 = *(char **)(a1 + 8);
    v10 = *(char **)(a1 + 16);
    v12 = v10 - v11;
    v13 = v8 - (v10 - v11);
    if (v8 > v10 - v11)
    {
      v14 = *(_QWORD *)(a1 + 24);
      if (v14 - (uint64_t)v10 >= v13)
      {
        bzero(*(void **)(a1 + 16), v13);
        *(_QWORD *)(a1 + 16) = &v10[v13];
        return;
      }
      v15 = v14 - (_QWORD)v11;
      v16 = 2 * v15;
      if (2 * v15 <= v8)
        v16 = v8;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v17 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v17 = v16;
      v18 = (char *)operator new(v17);
      v19 = &v18[v12];
      v20 = &v18[v17];
      v21 = &v18[v9];
      bzero(&v18[v12], v13);
      if (v10 == v11)
        goto LABEL_29;
      if (v12 < 8 || (unint64_t)(v11 - v18) < 0x20)
        goto LABEL_26;
      if (v12 >= 0x20)
      {
        v22 = v12 & 0xFFFFFFFFFFFFFFE0;
        v23 = v10 - 16;
        v24 = &v18[v10 - 16 - v11];
        v25 = v12 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v26 = *(_OWORD *)v23;
          *((_OWORD *)v24 - 1) = *((_OWORD *)v23 - 1);
          *(_OWORD *)v24 = v26;
          v24 -= 32;
          v23 -= 32;
          v25 -= 32;
        }
        while (v25);
        if (v12 == v22)
          goto LABEL_28;
        if ((v12 & 0x18) == 0)
        {
          v19 -= v22;
          v10 -= v22;
          goto LABEL_26;
        }
      }
      else
      {
        v22 = 0;
      }
      v27 = v22 - (v12 & 0xFFFFFFFFFFFFFFF8);
      v28 = &v10[-v22 - 8];
      v29 = (char *)(v28 - v11);
      do
      {
        v30 = *(_QWORD *)v28;
        v28 -= 8;
        *(_QWORD *)&v29[(_QWORD)v18] = v30;
        v29 -= 8;
        v27 += 8;
      }
      while (v27);
      if (v12 == (v12 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_28;
      v19 -= v12 & 0xFFFFFFFFFFFFFFF8;
      v10 -= v12 & 0xFFFFFFFFFFFFFFF8;
LABEL_26:
      v31 = v19 - 1;
      do
      {
        v32 = *--v10;
        *v31-- = v32;
      }
      while (v10 != v11);
LABEL_28:
      v10 = v11;
      v19 = v18;
LABEL_29:
      *(_QWORD *)(a1 + 8) = v19;
      *(_QWORD *)(a1 + 16) = v21;
      *(_QWORD *)(a1 + 24) = v20;
      if (v10)
        operator delete(v10);
      return;
    }
    if (v8 < v10 - v11)
      *(_QWORD *)(a1 + 16) = &v11[v8];
  }
}

BOOL cva::experimental::ResizeStrategyLanczos<float,false>::Resize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  vImage_Buffer v9;
  vImage_Buffer src;

  v3 = *(void **)(a1 + 8);
  v4 = *(void **)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 8);
  v6.i64[0] = v5;
  v6.i64[1] = HIDWORD(v5);
  *(int8x16_t *)&src.height = vextq_s8(v6, v6, 8uLL);
  src.rowBytes = *(unsigned int *)(a2 + 20);
  v9.data = *(void **)(a3 + 24);
  v7 = *(_QWORD *)(a3 + 8);
  v6.i64[0] = v7;
  v6.i64[1] = HIDWORD(v7);
  *(int8x16_t *)&v9.height = vextq_s8(v6, v6, 8uLL);
  v9.rowBytes = *(unsigned int *)(a3 + 20);
  src.data = v4;
  return vImageScale_PlanarF(&src, &v9, v3, 8u) >= 0;
}

uint64_t sub_20AB8D52C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20AB8D55C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD2D02CLL);
}

void cva::experimental::ResizeStrategyLanczos<cva::Matrix<unsigned char,4u,1u,false>,true>::Setup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  size_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  __int128 v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char v32;
  vImage_Buffer v33;
  vImage_Buffer src;

  v4 = *(void **)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 8);
  v6.i64[0] = v5;
  v6.i64[1] = HIDWORD(v5);
  *(int8x16_t *)&src.height = vextq_s8(v6, v6, 8uLL);
  src.rowBytes = *(unsigned int *)(a2 + 20);
  v33.data = *(void **)(a3 + 24);
  v7 = *(_QWORD *)(a3 + 8);
  v6.i64[0] = v7;
  v6.i64[1] = HIDWORD(v7);
  *(int8x16_t *)&v33.height = vextq_s8(v6, v6, 8uLL);
  v33.rowBytes = *(unsigned int *)(a3 + 20);
  src.data = v4;
  v8 = vImageScale_ARGB8888(&src, &v33, 0, 0xA8u);
  if ((v8 & 0x8000000000000000) == 0)
  {
    v9 = v8;
    v11 = *(char **)(a1 + 8);
    v10 = *(char **)(a1 + 16);
    v12 = v10 - v11;
    v13 = v8 - (v10 - v11);
    if (v8 > v10 - v11)
    {
      v14 = *(_QWORD *)(a1 + 24);
      if (v14 - (uint64_t)v10 >= v13)
      {
        bzero(*(void **)(a1 + 16), v13);
        *(_QWORD *)(a1 + 16) = &v10[v13];
        return;
      }
      v15 = v14 - (_QWORD)v11;
      v16 = 2 * v15;
      if (2 * v15 <= v8)
        v16 = v8;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v17 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v17 = v16;
      v18 = (char *)operator new(v17);
      v19 = &v18[v12];
      v20 = &v18[v17];
      v21 = &v18[v9];
      bzero(&v18[v12], v13);
      if (v10 == v11)
        goto LABEL_29;
      if (v12 < 8 || (unint64_t)(v11 - v18) < 0x20)
        goto LABEL_26;
      if (v12 >= 0x20)
      {
        v22 = v12 & 0xFFFFFFFFFFFFFFE0;
        v23 = v10 - 16;
        v24 = &v18[v10 - 16 - v11];
        v25 = v12 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v26 = *(_OWORD *)v23;
          *((_OWORD *)v24 - 1) = *((_OWORD *)v23 - 1);
          *(_OWORD *)v24 = v26;
          v24 -= 32;
          v23 -= 32;
          v25 -= 32;
        }
        while (v25);
        if (v12 == v22)
          goto LABEL_28;
        if ((v12 & 0x18) == 0)
        {
          v19 -= v22;
          v10 -= v22;
          goto LABEL_26;
        }
      }
      else
      {
        v22 = 0;
      }
      v27 = v22 - (v12 & 0xFFFFFFFFFFFFFFF8);
      v28 = &v10[-v22 - 8];
      v29 = (char *)(v28 - v11);
      do
      {
        v30 = *(_QWORD *)v28;
        v28 -= 8;
        *(_QWORD *)&v29[(_QWORD)v18] = v30;
        v29 -= 8;
        v27 += 8;
      }
      while (v27);
      if (v12 == (v12 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_28;
      v19 -= v12 & 0xFFFFFFFFFFFFFFF8;
      v10 -= v12 & 0xFFFFFFFFFFFFFFF8;
LABEL_26:
      v31 = v19 - 1;
      do
      {
        v32 = *--v10;
        *v31-- = v32;
      }
      while (v10 != v11);
LABEL_28:
      v10 = v11;
      v19 = v18;
LABEL_29:
      *(_QWORD *)(a1 + 8) = v19;
      *(_QWORD *)(a1 + 16) = v21;
      *(_QWORD *)(a1 + 24) = v20;
      if (v10)
        operator delete(v10);
      return;
    }
    if (v8 < v10 - v11)
      *(_QWORD *)(a1 + 16) = &v11[v8];
  }
}

BOOL cva::experimental::ResizeStrategyLanczos<cva::Matrix<unsigned char,4u,1u,false>,true>::Resize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  vImage_Buffer v9;
  vImage_Buffer src;

  v3 = *(void **)(a1 + 8);
  v4 = *(void **)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 8);
  v6.i64[0] = v5;
  v6.i64[1] = HIDWORD(v5);
  *(int8x16_t *)&src.height = vextq_s8(v6, v6, 8uLL);
  src.rowBytes = *(unsigned int *)(a2 + 20);
  v9.data = *(void **)(a3 + 24);
  v7 = *(_QWORD *)(a3 + 8);
  v6.i64[0] = v7;
  v6.i64[1] = HIDWORD(v7);
  *(int8x16_t *)&v9.height = vextq_s8(v6, v6, 8uLL);
  v9.rowBytes = *(unsigned int *)(a3 + 20);
  src.data = v4;
  return vImageScale_ARGB8888(&src, &v9, v3, 0x28u) >= 0;
}

uint64_t sub_20AB8D824()
{
  return 0;
}

uint64_t sub_20AB8D82C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20AB8D85C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD2D02CLL);
}

void cva::experimental::ResizeStrategyLanczos<cva::Matrix<unsigned char,4u,1u,false>,false>::Setup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  size_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  __int128 v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char v32;
  vImage_Buffer v33;
  vImage_Buffer src;

  v4 = *(void **)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 8);
  v6.i64[0] = v5;
  v6.i64[1] = HIDWORD(v5);
  *(int8x16_t *)&src.height = vextq_s8(v6, v6, 8uLL);
  src.rowBytes = *(unsigned int *)(a2 + 20);
  v33.data = *(void **)(a3 + 24);
  v7 = *(_QWORD *)(a3 + 8);
  v6.i64[0] = v7;
  v6.i64[1] = HIDWORD(v7);
  *(int8x16_t *)&v33.height = vextq_s8(v6, v6, 8uLL);
  v33.rowBytes = *(unsigned int *)(a3 + 20);
  src.data = v4;
  v8 = vImageScale_ARGB8888(&src, &v33, 0, 0x88u);
  if ((v8 & 0x8000000000000000) == 0)
  {
    v9 = v8;
    v11 = *(char **)(a1 + 8);
    v10 = *(char **)(a1 + 16);
    v12 = v10 - v11;
    v13 = v8 - (v10 - v11);
    if (v8 > v10 - v11)
    {
      v14 = *(_QWORD *)(a1 + 24);
      if (v14 - (uint64_t)v10 >= v13)
      {
        bzero(*(void **)(a1 + 16), v13);
        *(_QWORD *)(a1 + 16) = &v10[v13];
        return;
      }
      v15 = v14 - (_QWORD)v11;
      v16 = 2 * v15;
      if (2 * v15 <= v8)
        v16 = v8;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v17 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v17 = v16;
      v18 = (char *)operator new(v17);
      v19 = &v18[v12];
      v20 = &v18[v17];
      v21 = &v18[v9];
      bzero(&v18[v12], v13);
      if (v10 == v11)
        goto LABEL_29;
      if (v12 < 8 || (unint64_t)(v11 - v18) < 0x20)
        goto LABEL_26;
      if (v12 >= 0x20)
      {
        v22 = v12 & 0xFFFFFFFFFFFFFFE0;
        v23 = v10 - 16;
        v24 = &v18[v10 - 16 - v11];
        v25 = v12 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v26 = *(_OWORD *)v23;
          *((_OWORD *)v24 - 1) = *((_OWORD *)v23 - 1);
          *(_OWORD *)v24 = v26;
          v24 -= 32;
          v23 -= 32;
          v25 -= 32;
        }
        while (v25);
        if (v12 == v22)
          goto LABEL_28;
        if ((v12 & 0x18) == 0)
        {
          v19 -= v22;
          v10 -= v22;
          goto LABEL_26;
        }
      }
      else
      {
        v22 = 0;
      }
      v27 = v22 - (v12 & 0xFFFFFFFFFFFFFFF8);
      v28 = &v10[-v22 - 8];
      v29 = (char *)(v28 - v11);
      do
      {
        v30 = *(_QWORD *)v28;
        v28 -= 8;
        *(_QWORD *)&v29[(_QWORD)v18] = v30;
        v29 -= 8;
        v27 += 8;
      }
      while (v27);
      if (v12 == (v12 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_28;
      v19 -= v12 & 0xFFFFFFFFFFFFFFF8;
      v10 -= v12 & 0xFFFFFFFFFFFFFFF8;
LABEL_26:
      v31 = v19 - 1;
      do
      {
        v32 = *--v10;
        *v31-- = v32;
      }
      while (v10 != v11);
LABEL_28:
      v10 = v11;
      v19 = v18;
LABEL_29:
      *(_QWORD *)(a1 + 8) = v19;
      *(_QWORD *)(a1 + 16) = v21;
      *(_QWORD *)(a1 + 24) = v20;
      if (v10)
        operator delete(v10);
      return;
    }
    if (v8 < v10 - v11)
      *(_QWORD *)(a1 + 16) = &v11[v8];
  }
}

BOOL cva::experimental::ResizeStrategyLanczos<cva::Matrix<unsigned char,4u,1u,false>,false>::Resize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  vImage_Buffer v9;
  vImage_Buffer src;

  v3 = *(void **)(a1 + 8);
  v4 = *(void **)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 8);
  v6.i64[0] = v5;
  v6.i64[1] = HIDWORD(v5);
  *(int8x16_t *)&src.height = vextq_s8(v6, v6, 8uLL);
  src.rowBytes = *(unsigned int *)(a2 + 20);
  v9.data = *(void **)(a3 + 24);
  v7 = *(_QWORD *)(a3 + 8);
  v6.i64[0] = v7;
  v6.i64[1] = HIDWORD(v7);
  *(int8x16_t *)&v9.height = vextq_s8(v6, v6, 8uLL);
  v9.rowBytes = *(unsigned int *)(a3 + 20);
  src.data = v4;
  return vImageScale_ARGB8888(&src, &v9, v3, 8u) >= 0;
}

uint64_t sub_20AB8DB24(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20AB8DB54(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD2D02CLL);
}

void cva::experimental::ResizeStrategyLanczos<cva::Matrix<float,4u,1u,false>,true>::Setup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  size_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  __int128 v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char v32;
  vImage_Buffer v33;
  vImage_Buffer src;

  v4 = *(void **)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 8);
  v6.i64[0] = v5;
  v6.i64[1] = HIDWORD(v5);
  *(int8x16_t *)&src.height = vextq_s8(v6, v6, 8uLL);
  src.rowBytes = *(unsigned int *)(a2 + 20);
  v33.data = *(void **)(a3 + 24);
  v7 = *(_QWORD *)(a3 + 8);
  v6.i64[0] = v7;
  v6.i64[1] = HIDWORD(v7);
  *(int8x16_t *)&v33.height = vextq_s8(v6, v6, 8uLL);
  v33.rowBytes = *(unsigned int *)(a3 + 20);
  src.data = v4;
  v8 = vImageScale_ARGBFFFF(&src, &v33, 0, 0xA8u);
  if ((v8 & 0x8000000000000000) == 0)
  {
    v9 = v8;
    v11 = *(char **)(a1 + 8);
    v10 = *(char **)(a1 + 16);
    v12 = v10 - v11;
    v13 = v8 - (v10 - v11);
    if (v8 > v10 - v11)
    {
      v14 = *(_QWORD *)(a1 + 24);
      if (v14 - (uint64_t)v10 >= v13)
      {
        bzero(*(void **)(a1 + 16), v13);
        *(_QWORD *)(a1 + 16) = &v10[v13];
        return;
      }
      v15 = v14 - (_QWORD)v11;
      v16 = 2 * v15;
      if (2 * v15 <= v8)
        v16 = v8;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v17 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v17 = v16;
      v18 = (char *)operator new(v17);
      v19 = &v18[v12];
      v20 = &v18[v17];
      v21 = &v18[v9];
      bzero(&v18[v12], v13);
      if (v10 == v11)
        goto LABEL_29;
      if (v12 < 8 || (unint64_t)(v11 - v18) < 0x20)
        goto LABEL_26;
      if (v12 >= 0x20)
      {
        v22 = v12 & 0xFFFFFFFFFFFFFFE0;
        v23 = v10 - 16;
        v24 = &v18[v10 - 16 - v11];
        v25 = v12 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v26 = *(_OWORD *)v23;
          *((_OWORD *)v24 - 1) = *((_OWORD *)v23 - 1);
          *(_OWORD *)v24 = v26;
          v24 -= 32;
          v23 -= 32;
          v25 -= 32;
        }
        while (v25);
        if (v12 == v22)
          goto LABEL_28;
        if ((v12 & 0x18) == 0)
        {
          v19 -= v22;
          v10 -= v22;
          goto LABEL_26;
        }
      }
      else
      {
        v22 = 0;
      }
      v27 = v22 - (v12 & 0xFFFFFFFFFFFFFFF8);
      v28 = &v10[-v22 - 8];
      v29 = (char *)(v28 - v11);
      do
      {
        v30 = *(_QWORD *)v28;
        v28 -= 8;
        *(_QWORD *)&v29[(_QWORD)v18] = v30;
        v29 -= 8;
        v27 += 8;
      }
      while (v27);
      if (v12 == (v12 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_28;
      v19 -= v12 & 0xFFFFFFFFFFFFFFF8;
      v10 -= v12 & 0xFFFFFFFFFFFFFFF8;
LABEL_26:
      v31 = v19 - 1;
      do
      {
        v32 = *--v10;
        *v31-- = v32;
      }
      while (v10 != v11);
LABEL_28:
      v10 = v11;
      v19 = v18;
LABEL_29:
      *(_QWORD *)(a1 + 8) = v19;
      *(_QWORD *)(a1 + 16) = v21;
      *(_QWORD *)(a1 + 24) = v20;
      if (v10)
        operator delete(v10);
      return;
    }
    if (v8 < v10 - v11)
      *(_QWORD *)(a1 + 16) = &v11[v8];
  }
}

BOOL cva::experimental::ResizeStrategyLanczos<cva::Matrix<float,4u,1u,false>,true>::Resize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  vImage_Buffer v9;
  vImage_Buffer src;

  v3 = *(void **)(a1 + 8);
  v4 = *(void **)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 8);
  v6.i64[0] = v5;
  v6.i64[1] = HIDWORD(v5);
  *(int8x16_t *)&src.height = vextq_s8(v6, v6, 8uLL);
  src.rowBytes = *(unsigned int *)(a2 + 20);
  v9.data = *(void **)(a3 + 24);
  v7 = *(_QWORD *)(a3 + 8);
  v6.i64[0] = v7;
  v6.i64[1] = HIDWORD(v7);
  *(int8x16_t *)&v9.height = vextq_s8(v6, v6, 8uLL);
  v9.rowBytes = *(unsigned int *)(a3 + 20);
  src.data = v4;
  return vImageScale_ARGBFFFF(&src, &v9, v3, 0x28u) >= 0;
}

uint64_t sub_20AB8DE1C()
{
  return 0;
}

uint64_t sub_20AB8DE24(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20AB8DE54(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD2D02CLL);
}

void cva::experimental::ResizeStrategyLanczos<cva::Matrix<float,4u,1u,false>,false>::Setup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  size_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  __int128 v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char v32;
  vImage_Buffer v33;
  vImage_Buffer src;

  v4 = *(void **)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 8);
  v6.i64[0] = v5;
  v6.i64[1] = HIDWORD(v5);
  *(int8x16_t *)&src.height = vextq_s8(v6, v6, 8uLL);
  src.rowBytes = *(unsigned int *)(a2 + 20);
  v33.data = *(void **)(a3 + 24);
  v7 = *(_QWORD *)(a3 + 8);
  v6.i64[0] = v7;
  v6.i64[1] = HIDWORD(v7);
  *(int8x16_t *)&v33.height = vextq_s8(v6, v6, 8uLL);
  v33.rowBytes = *(unsigned int *)(a3 + 20);
  src.data = v4;
  v8 = vImageScale_ARGBFFFF(&src, &v33, 0, 0x88u);
  if ((v8 & 0x8000000000000000) == 0)
  {
    v9 = v8;
    v11 = *(char **)(a1 + 8);
    v10 = *(char **)(a1 + 16);
    v12 = v10 - v11;
    v13 = v8 - (v10 - v11);
    if (v8 > v10 - v11)
    {
      v14 = *(_QWORD *)(a1 + 24);
      if (v14 - (uint64_t)v10 >= v13)
      {
        bzero(*(void **)(a1 + 16), v13);
        *(_QWORD *)(a1 + 16) = &v10[v13];
        return;
      }
      v15 = v14 - (_QWORD)v11;
      v16 = 2 * v15;
      if (2 * v15 <= v8)
        v16 = v8;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v17 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v17 = v16;
      v18 = (char *)operator new(v17);
      v19 = &v18[v12];
      v20 = &v18[v17];
      v21 = &v18[v9];
      bzero(&v18[v12], v13);
      if (v10 == v11)
        goto LABEL_29;
      if (v12 < 8 || (unint64_t)(v11 - v18) < 0x20)
        goto LABEL_26;
      if (v12 >= 0x20)
      {
        v22 = v12 & 0xFFFFFFFFFFFFFFE0;
        v23 = v10 - 16;
        v24 = &v18[v10 - 16 - v11];
        v25 = v12 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v26 = *(_OWORD *)v23;
          *((_OWORD *)v24 - 1) = *((_OWORD *)v23 - 1);
          *(_OWORD *)v24 = v26;
          v24 -= 32;
          v23 -= 32;
          v25 -= 32;
        }
        while (v25);
        if (v12 == v22)
          goto LABEL_28;
        if ((v12 & 0x18) == 0)
        {
          v19 -= v22;
          v10 -= v22;
          goto LABEL_26;
        }
      }
      else
      {
        v22 = 0;
      }
      v27 = v22 - (v12 & 0xFFFFFFFFFFFFFFF8);
      v28 = &v10[-v22 - 8];
      v29 = (char *)(v28 - v11);
      do
      {
        v30 = *(_QWORD *)v28;
        v28 -= 8;
        *(_QWORD *)&v29[(_QWORD)v18] = v30;
        v29 -= 8;
        v27 += 8;
      }
      while (v27);
      if (v12 == (v12 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_28;
      v19 -= v12 & 0xFFFFFFFFFFFFFFF8;
      v10 -= v12 & 0xFFFFFFFFFFFFFFF8;
LABEL_26:
      v31 = v19 - 1;
      do
      {
        v32 = *--v10;
        *v31-- = v32;
      }
      while (v10 != v11);
LABEL_28:
      v10 = v11;
      v19 = v18;
LABEL_29:
      *(_QWORD *)(a1 + 8) = v19;
      *(_QWORD *)(a1 + 16) = v21;
      *(_QWORD *)(a1 + 24) = v20;
      if (v10)
        operator delete(v10);
      return;
    }
    if (v8 < v10 - v11)
      *(_QWORD *)(a1 + 16) = &v11[v8];
  }
}

BOOL cva::experimental::ResizeStrategyLanczos<cva::Matrix<float,4u,1u,false>,false>::Resize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  vImage_Buffer v9;
  vImage_Buffer src;

  v3 = *(void **)(a1 + 8);
  v4 = *(void **)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 8);
  v6.i64[0] = v5;
  v6.i64[1] = HIDWORD(v5);
  *(int8x16_t *)&src.height = vextq_s8(v6, v6, 8uLL);
  src.rowBytes = *(unsigned int *)(a2 + 20);
  v9.data = *(void **)(a3 + 24);
  v7 = *(_QWORD *)(a3 + 8);
  v6.i64[0] = v7;
  v6.i64[1] = HIDWORD(v7);
  *(int8x16_t *)&v9.height = vextq_s8(v6, v6, 8uLL);
  v9.rowBytes = *(unsigned int *)(a3 + 20);
  src.data = v4;
  return vImageScale_ARGBFFFF(&src, &v9, v3, 8u) >= 0;
}

uint64_t sub_20AB8E11C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20AB8E14C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD2D02CLL);
}

void cva::experimental::ResizeStrategyLanczos<cva::Matrix<unsigned short,4u,1u,false>,true>::Setup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  size_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  __int128 v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char v32;
  vImage_Buffer v33;
  vImage_Buffer src;

  v4 = *(void **)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 8);
  v6.i64[0] = v5;
  v6.i64[1] = HIDWORD(v5);
  *(int8x16_t *)&src.height = vextq_s8(v6, v6, 8uLL);
  src.rowBytes = *(unsigned int *)(a2 + 20);
  v33.data = *(void **)(a3 + 24);
  v7 = *(_QWORD *)(a3 + 8);
  v6.i64[0] = v7;
  v6.i64[1] = HIDWORD(v7);
  *(int8x16_t *)&v33.height = vextq_s8(v6, v6, 8uLL);
  v33.rowBytes = *(unsigned int *)(a3 + 20);
  src.data = v4;
  v8 = vImageScale_ARGB16U(&src, &v33, 0, 0xA8u);
  if ((v8 & 0x8000000000000000) == 0)
  {
    v9 = v8;
    v11 = *(char **)(a1 + 8);
    v10 = *(char **)(a1 + 16);
    v12 = v10 - v11;
    v13 = v8 - (v10 - v11);
    if (v8 > v10 - v11)
    {
      v14 = *(_QWORD *)(a1 + 24);
      if (v14 - (uint64_t)v10 >= v13)
      {
        bzero(*(void **)(a1 + 16), v13);
        *(_QWORD *)(a1 + 16) = &v10[v13];
        return;
      }
      v15 = v14 - (_QWORD)v11;
      v16 = 2 * v15;
      if (2 * v15 <= v8)
        v16 = v8;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v17 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v17 = v16;
      v18 = (char *)operator new(v17);
      v19 = &v18[v12];
      v20 = &v18[v17];
      v21 = &v18[v9];
      bzero(&v18[v12], v13);
      if (v10 == v11)
        goto LABEL_29;
      if (v12 < 8 || (unint64_t)(v11 - v18) < 0x20)
        goto LABEL_26;
      if (v12 >= 0x20)
      {
        v22 = v12 & 0xFFFFFFFFFFFFFFE0;
        v23 = v10 - 16;
        v24 = &v18[v10 - 16 - v11];
        v25 = v12 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v26 = *(_OWORD *)v23;
          *((_OWORD *)v24 - 1) = *((_OWORD *)v23 - 1);
          *(_OWORD *)v24 = v26;
          v24 -= 32;
          v23 -= 32;
          v25 -= 32;
        }
        while (v25);
        if (v12 == v22)
          goto LABEL_28;
        if ((v12 & 0x18) == 0)
        {
          v19 -= v22;
          v10 -= v22;
          goto LABEL_26;
        }
      }
      else
      {
        v22 = 0;
      }
      v27 = v22 - (v12 & 0xFFFFFFFFFFFFFFF8);
      v28 = &v10[-v22 - 8];
      v29 = (char *)(v28 - v11);
      do
      {
        v30 = *(_QWORD *)v28;
        v28 -= 8;
        *(_QWORD *)&v29[(_QWORD)v18] = v30;
        v29 -= 8;
        v27 += 8;
      }
      while (v27);
      if (v12 == (v12 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_28;
      v19 -= v12 & 0xFFFFFFFFFFFFFFF8;
      v10 -= v12 & 0xFFFFFFFFFFFFFFF8;
LABEL_26:
      v31 = v19 - 1;
      do
      {
        v32 = *--v10;
        *v31-- = v32;
      }
      while (v10 != v11);
LABEL_28:
      v10 = v11;
      v19 = v18;
LABEL_29:
      *(_QWORD *)(a1 + 8) = v19;
      *(_QWORD *)(a1 + 16) = v21;
      *(_QWORD *)(a1 + 24) = v20;
      if (v10)
        operator delete(v10);
      return;
    }
    if (v8 < v10 - v11)
      *(_QWORD *)(a1 + 16) = &v11[v8];
  }
}

BOOL cva::experimental::ResizeStrategyLanczos<cva::Matrix<unsigned short,4u,1u,false>,true>::Resize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  vImage_Buffer v9;
  vImage_Buffer src;

  v3 = *(void **)(a1 + 8);
  v4 = *(void **)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 8);
  v6.i64[0] = v5;
  v6.i64[1] = HIDWORD(v5);
  *(int8x16_t *)&src.height = vextq_s8(v6, v6, 8uLL);
  src.rowBytes = *(unsigned int *)(a2 + 20);
  v9.data = *(void **)(a3 + 24);
  v7 = *(_QWORD *)(a3 + 8);
  v6.i64[0] = v7;
  v6.i64[1] = HIDWORD(v7);
  *(int8x16_t *)&v9.height = vextq_s8(v6, v6, 8uLL);
  v9.rowBytes = *(unsigned int *)(a3 + 20);
  src.data = v4;
  return vImageScale_ARGB16U(&src, &v9, v3, 0x28u) >= 0;
}

uint64_t sub_20AB8E414()
{
  return 0;
}

uint64_t sub_20AB8E41C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20AB8E44C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD2D02CLL);
}

void cva::experimental::ResizeStrategyLanczos<cva::Matrix<unsigned short,4u,1u,false>,false>::Setup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  size_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  __int128 v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char v32;
  vImage_Buffer v33;
  vImage_Buffer src;

  v4 = *(void **)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 8);
  v6.i64[0] = v5;
  v6.i64[1] = HIDWORD(v5);
  *(int8x16_t *)&src.height = vextq_s8(v6, v6, 8uLL);
  src.rowBytes = *(unsigned int *)(a2 + 20);
  v33.data = *(void **)(a3 + 24);
  v7 = *(_QWORD *)(a3 + 8);
  v6.i64[0] = v7;
  v6.i64[1] = HIDWORD(v7);
  *(int8x16_t *)&v33.height = vextq_s8(v6, v6, 8uLL);
  v33.rowBytes = *(unsigned int *)(a3 + 20);
  src.data = v4;
  v8 = vImageScale_ARGB16U(&src, &v33, 0, 0x88u);
  if ((v8 & 0x8000000000000000) == 0)
  {
    v9 = v8;
    v11 = *(char **)(a1 + 8);
    v10 = *(char **)(a1 + 16);
    v12 = v10 - v11;
    v13 = v8 - (v10 - v11);
    if (v8 > v10 - v11)
    {
      v14 = *(_QWORD *)(a1 + 24);
      if (v14 - (uint64_t)v10 >= v13)
      {
        bzero(*(void **)(a1 + 16), v13);
        *(_QWORD *)(a1 + 16) = &v10[v13];
        return;
      }
      v15 = v14 - (_QWORD)v11;
      v16 = 2 * v15;
      if (2 * v15 <= v8)
        v16 = v8;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v17 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v17 = v16;
      v18 = (char *)operator new(v17);
      v19 = &v18[v12];
      v20 = &v18[v17];
      v21 = &v18[v9];
      bzero(&v18[v12], v13);
      if (v10 == v11)
        goto LABEL_29;
      if (v12 < 8 || (unint64_t)(v11 - v18) < 0x20)
        goto LABEL_26;
      if (v12 >= 0x20)
      {
        v22 = v12 & 0xFFFFFFFFFFFFFFE0;
        v23 = v10 - 16;
        v24 = &v18[v10 - 16 - v11];
        v25 = v12 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v26 = *(_OWORD *)v23;
          *((_OWORD *)v24 - 1) = *((_OWORD *)v23 - 1);
          *(_OWORD *)v24 = v26;
          v24 -= 32;
          v23 -= 32;
          v25 -= 32;
        }
        while (v25);
        if (v12 == v22)
          goto LABEL_28;
        if ((v12 & 0x18) == 0)
        {
          v19 -= v22;
          v10 -= v22;
          goto LABEL_26;
        }
      }
      else
      {
        v22 = 0;
      }
      v27 = v22 - (v12 & 0xFFFFFFFFFFFFFFF8);
      v28 = &v10[-v22 - 8];
      v29 = (char *)(v28 - v11);
      do
      {
        v30 = *(_QWORD *)v28;
        v28 -= 8;
        *(_QWORD *)&v29[(_QWORD)v18] = v30;
        v29 -= 8;
        v27 += 8;
      }
      while (v27);
      if (v12 == (v12 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_28;
      v19 -= v12 & 0xFFFFFFFFFFFFFFF8;
      v10 -= v12 & 0xFFFFFFFFFFFFFFF8;
LABEL_26:
      v31 = v19 - 1;
      do
      {
        v32 = *--v10;
        *v31-- = v32;
      }
      while (v10 != v11);
LABEL_28:
      v10 = v11;
      v19 = v18;
LABEL_29:
      *(_QWORD *)(a1 + 8) = v19;
      *(_QWORD *)(a1 + 16) = v21;
      *(_QWORD *)(a1 + 24) = v20;
      if (v10)
        operator delete(v10);
      return;
    }
    if (v8 < v10 - v11)
      *(_QWORD *)(a1 + 16) = &v11[v8];
  }
}

BOOL cva::experimental::ResizeStrategyLanczos<cva::Matrix<unsigned short,4u,1u,false>,false>::Resize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  vImage_Buffer v9;
  vImage_Buffer src;

  v3 = *(void **)(a1 + 8);
  v4 = *(void **)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 8);
  v6.i64[0] = v5;
  v6.i64[1] = HIDWORD(v5);
  *(int8x16_t *)&src.height = vextq_s8(v6, v6, 8uLL);
  src.rowBytes = *(unsigned int *)(a2 + 20);
  v9.data = *(void **)(a3 + 24);
  v7 = *(_QWORD *)(a3 + 8);
  v6.i64[0] = v7;
  v6.i64[1] = HIDWORD(v7);
  *(int8x16_t *)&v9.height = vextq_s8(v6, v6, 8uLL);
  v9.rowBytes = *(unsigned int *)(a3 + 20);
  src.data = v4;
  return vImageScale_ARGB16U(&src, &v9, v3, 8u) >= 0;
}

uint64_t sub_20AB8E714(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20AB8E744(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD2D02CLL);
}

void cva::experimental::ResizeStrategyLanczos<cva::Matrix<short,4u,1u,false>,true>::Setup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  size_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  __int128 v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char v32;
  vImage_Buffer v33;
  vImage_Buffer src;

  v4 = *(void **)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 8);
  v6.i64[0] = v5;
  v6.i64[1] = HIDWORD(v5);
  *(int8x16_t *)&src.height = vextq_s8(v6, v6, 8uLL);
  src.rowBytes = *(unsigned int *)(a2 + 20);
  v33.data = *(void **)(a3 + 24);
  v7 = *(_QWORD *)(a3 + 8);
  v6.i64[0] = v7;
  v6.i64[1] = HIDWORD(v7);
  *(int8x16_t *)&v33.height = vextq_s8(v6, v6, 8uLL);
  v33.rowBytes = *(unsigned int *)(a3 + 20);
  src.data = v4;
  v8 = vImageScale_ARGB16S(&src, &v33, 0, 0xA8u);
  if ((v8 & 0x8000000000000000) == 0)
  {
    v9 = v8;
    v11 = *(char **)(a1 + 8);
    v10 = *(char **)(a1 + 16);
    v12 = v10 - v11;
    v13 = v8 - (v10 - v11);
    if (v8 > v10 - v11)
    {
      v14 = *(_QWORD *)(a1 + 24);
      if (v14 - (uint64_t)v10 >= v13)
      {
        bzero(*(void **)(a1 + 16), v13);
        *(_QWORD *)(a1 + 16) = &v10[v13];
        return;
      }
      v15 = v14 - (_QWORD)v11;
      v16 = 2 * v15;
      if (2 * v15 <= v8)
        v16 = v8;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v17 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v17 = v16;
      v18 = (char *)operator new(v17);
      v19 = &v18[v12];
      v20 = &v18[v17];
      v21 = &v18[v9];
      bzero(&v18[v12], v13);
      if (v10 == v11)
        goto LABEL_29;
      if (v12 < 8 || (unint64_t)(v11 - v18) < 0x20)
        goto LABEL_26;
      if (v12 >= 0x20)
      {
        v22 = v12 & 0xFFFFFFFFFFFFFFE0;
        v23 = v10 - 16;
        v24 = &v18[v10 - 16 - v11];
        v25 = v12 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v26 = *(_OWORD *)v23;
          *((_OWORD *)v24 - 1) = *((_OWORD *)v23 - 1);
          *(_OWORD *)v24 = v26;
          v24 -= 32;
          v23 -= 32;
          v25 -= 32;
        }
        while (v25);
        if (v12 == v22)
          goto LABEL_28;
        if ((v12 & 0x18) == 0)
        {
          v19 -= v22;
          v10 -= v22;
          goto LABEL_26;
        }
      }
      else
      {
        v22 = 0;
      }
      v27 = v22 - (v12 & 0xFFFFFFFFFFFFFFF8);
      v28 = &v10[-v22 - 8];
      v29 = (char *)(v28 - v11);
      do
      {
        v30 = *(_QWORD *)v28;
        v28 -= 8;
        *(_QWORD *)&v29[(_QWORD)v18] = v30;
        v29 -= 8;
        v27 += 8;
      }
      while (v27);
      if (v12 == (v12 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_28;
      v19 -= v12 & 0xFFFFFFFFFFFFFFF8;
      v10 -= v12 & 0xFFFFFFFFFFFFFFF8;
LABEL_26:
      v31 = v19 - 1;
      do
      {
        v32 = *--v10;
        *v31-- = v32;
      }
      while (v10 != v11);
LABEL_28:
      v10 = v11;
      v19 = v18;
LABEL_29:
      *(_QWORD *)(a1 + 8) = v19;
      *(_QWORD *)(a1 + 16) = v21;
      *(_QWORD *)(a1 + 24) = v20;
      if (v10)
        operator delete(v10);
      return;
    }
    if (v8 < v10 - v11)
      *(_QWORD *)(a1 + 16) = &v11[v8];
  }
}

BOOL cva::experimental::ResizeStrategyLanczos<cva::Matrix<short,4u,1u,false>,true>::Resize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  vImage_Buffer v9;
  vImage_Buffer src;

  v3 = *(void **)(a1 + 8);
  v4 = *(void **)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 8);
  v6.i64[0] = v5;
  v6.i64[1] = HIDWORD(v5);
  *(int8x16_t *)&src.height = vextq_s8(v6, v6, 8uLL);
  src.rowBytes = *(unsigned int *)(a2 + 20);
  v9.data = *(void **)(a3 + 24);
  v7 = *(_QWORD *)(a3 + 8);
  v6.i64[0] = v7;
  v6.i64[1] = HIDWORD(v7);
  *(int8x16_t *)&v9.height = vextq_s8(v6, v6, 8uLL);
  v9.rowBytes = *(unsigned int *)(a3 + 20);
  src.data = v4;
  return vImageScale_ARGB16S(&src, &v9, v3, 0x28u) >= 0;
}

uint64_t sub_20AB8EA0C()
{
  return 0;
}

uint64_t sub_20AB8EA14(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20AB8EA44(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD2D02CLL);
}

void cva::experimental::ResizeStrategyLanczos<cva::Matrix<short,4u,1u,false>,false>::Setup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  size_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  __int128 v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char v32;
  vImage_Buffer v33;
  vImage_Buffer src;

  v4 = *(void **)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 8);
  v6.i64[0] = v5;
  v6.i64[1] = HIDWORD(v5);
  *(int8x16_t *)&src.height = vextq_s8(v6, v6, 8uLL);
  src.rowBytes = *(unsigned int *)(a2 + 20);
  v33.data = *(void **)(a3 + 24);
  v7 = *(_QWORD *)(a3 + 8);
  v6.i64[0] = v7;
  v6.i64[1] = HIDWORD(v7);
  *(int8x16_t *)&v33.height = vextq_s8(v6, v6, 8uLL);
  v33.rowBytes = *(unsigned int *)(a3 + 20);
  src.data = v4;
  v8 = vImageScale_ARGB16S(&src, &v33, 0, 0x88u);
  if ((v8 & 0x8000000000000000) == 0)
  {
    v9 = v8;
    v11 = *(char **)(a1 + 8);
    v10 = *(char **)(a1 + 16);
    v12 = v10 - v11;
    v13 = v8 - (v10 - v11);
    if (v8 > v10 - v11)
    {
      v14 = *(_QWORD *)(a1 + 24);
      if (v14 - (uint64_t)v10 >= v13)
      {
        bzero(*(void **)(a1 + 16), v13);
        *(_QWORD *)(a1 + 16) = &v10[v13];
        return;
      }
      v15 = v14 - (_QWORD)v11;
      v16 = 2 * v15;
      if (2 * v15 <= v8)
        v16 = v8;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v17 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v17 = v16;
      v18 = (char *)operator new(v17);
      v19 = &v18[v12];
      v20 = &v18[v17];
      v21 = &v18[v9];
      bzero(&v18[v12], v13);
      if (v10 == v11)
        goto LABEL_29;
      if (v12 < 8 || (unint64_t)(v11 - v18) < 0x20)
        goto LABEL_26;
      if (v12 >= 0x20)
      {
        v22 = v12 & 0xFFFFFFFFFFFFFFE0;
        v23 = v10 - 16;
        v24 = &v18[v10 - 16 - v11];
        v25 = v12 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v26 = *(_OWORD *)v23;
          *((_OWORD *)v24 - 1) = *((_OWORD *)v23 - 1);
          *(_OWORD *)v24 = v26;
          v24 -= 32;
          v23 -= 32;
          v25 -= 32;
        }
        while (v25);
        if (v12 == v22)
          goto LABEL_28;
        if ((v12 & 0x18) == 0)
        {
          v19 -= v22;
          v10 -= v22;
          goto LABEL_26;
        }
      }
      else
      {
        v22 = 0;
      }
      v27 = v22 - (v12 & 0xFFFFFFFFFFFFFFF8);
      v28 = &v10[-v22 - 8];
      v29 = (char *)(v28 - v11);
      do
      {
        v30 = *(_QWORD *)v28;
        v28 -= 8;
        *(_QWORD *)&v29[(_QWORD)v18] = v30;
        v29 -= 8;
        v27 += 8;
      }
      while (v27);
      if (v12 == (v12 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_28;
      v19 -= v12 & 0xFFFFFFFFFFFFFFF8;
      v10 -= v12 & 0xFFFFFFFFFFFFFFF8;
LABEL_26:
      v31 = v19 - 1;
      do
      {
        v32 = *--v10;
        *v31-- = v32;
      }
      while (v10 != v11);
LABEL_28:
      v10 = v11;
      v19 = v18;
LABEL_29:
      *(_QWORD *)(a1 + 8) = v19;
      *(_QWORD *)(a1 + 16) = v21;
      *(_QWORD *)(a1 + 24) = v20;
      if (v10)
        operator delete(v10);
      return;
    }
    if (v8 < v10 - v11)
      *(_QWORD *)(a1 + 16) = &v11[v8];
  }
}

BOOL cva::experimental::ResizeStrategyLanczos<cva::Matrix<short,4u,1u,false>,false>::Resize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  vImage_Buffer v9;
  vImage_Buffer src;

  v3 = *(void **)(a1 + 8);
  v4 = *(void **)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 8);
  v6.i64[0] = v5;
  v6.i64[1] = HIDWORD(v5);
  *(int8x16_t *)&src.height = vextq_s8(v6, v6, 8uLL);
  src.rowBytes = *(unsigned int *)(a2 + 20);
  v9.data = *(void **)(a3 + 24);
  v7 = *(_QWORD *)(a3 + 8);
  v6.i64[0] = v7;
  v6.i64[1] = HIDWORD(v7);
  *(int8x16_t *)&v9.height = vextq_s8(v6, v6, 8uLL);
  v9.rowBytes = *(unsigned int *)(a3 + 20);
  src.data = v4;
  return vImageScale_ARGB16S(&src, &v9, v3, 8u) >= 0;
}

BOOL cva::experimental::getTempBufferSizeLanczos5<unsigned char>(uint64_t a1, uint64_t a2, vImage_Error *a3)
{
  void *v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  vImage_Error v8;
  vImage_Buffer v10;
  vImage_Buffer src;

  v4 = *(void **)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 8);
  v6.i64[0] = v5;
  v6.i64[1] = HIDWORD(v5);
  *(int8x16_t *)&src.height = vextq_s8(v6, v6, 8uLL);
  src.rowBytes = *(unsigned int *)(a1 + 20);
  v10.data = *(void **)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 8);
  v6.i64[0] = v7;
  v6.i64[1] = HIDWORD(v7);
  *(int8x16_t *)&v10.height = vextq_s8(v6, v6, 8uLL);
  v10.rowBytes = *(unsigned int *)(a2 + 20);
  src.data = v4;
  v8 = vImageScale_Planar8(&src, &v10, 0, 0xA8u);
  if ((v8 & 0x8000000000000000) == 0)
    *a3 = v8;
  return v8 >= 0;
}

BOOL cva::experimental::getTempBufferSizeLanczos3<unsigned char>(uint64_t a1, uint64_t a2, vImage_Error *a3)
{
  void *v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  vImage_Error v8;
  vImage_Buffer v10;
  vImage_Buffer src;

  v4 = *(void **)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 8);
  v6.i64[0] = v5;
  v6.i64[1] = HIDWORD(v5);
  *(int8x16_t *)&src.height = vextq_s8(v6, v6, 8uLL);
  src.rowBytes = *(unsigned int *)(a1 + 20);
  v10.data = *(void **)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 8);
  v6.i64[0] = v7;
  v6.i64[1] = HIDWORD(v7);
  *(int8x16_t *)&v10.height = vextq_s8(v6, v6, 8uLL);
  v10.rowBytes = *(unsigned int *)(a2 + 20);
  src.data = v4;
  v8 = vImageScale_Planar8(&src, &v10, 0, 0x88u);
  if ((v8 & 0x8000000000000000) == 0)
    *a3 = v8;
  return v8 >= 0;
}

BOOL cva::experimental::resizeLanczos3<unsigned char>(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  uint64_t v4;
  int8x16_t v5;
  uint64_t v6;
  vImage_Buffer v8;
  vImage_Buffer src;

  v3 = *(void **)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 8);
  v5.i64[0] = v4;
  v5.i64[1] = HIDWORD(v4);
  *(int8x16_t *)&src.height = vextq_s8(v5, v5, 8uLL);
  src.rowBytes = *(unsigned int *)(a1 + 20);
  v8.data = *(void **)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 8);
  v5.i64[0] = v6;
  v5.i64[1] = HIDWORD(v6);
  *(int8x16_t *)&v8.height = vextq_s8(v5, v5, 8uLL);
  v8.rowBytes = *(unsigned int *)(a2 + 20);
  src.data = v3;
  return vImageScale_Planar8(&src, &v8, a3, 8u) >= 0;
}

BOOL cva::experimental::resizeLanczos5<unsigned char>(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  uint64_t v4;
  int8x16_t v5;
  uint64_t v6;
  vImage_Buffer v8;
  vImage_Buffer src;

  v3 = *(void **)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 8);
  v5.i64[0] = v4;
  v5.i64[1] = HIDWORD(v4);
  *(int8x16_t *)&src.height = vextq_s8(v5, v5, 8uLL);
  src.rowBytes = *(unsigned int *)(a1 + 20);
  v8.data = *(void **)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 8);
  v5.i64[0] = v6;
  v5.i64[1] = HIDWORD(v6);
  *(int8x16_t *)&v8.height = vextq_s8(v5, v5, 8uLL);
  v8.rowBytes = *(unsigned int *)(a2 + 20);
  src.data = v3;
  return vImageScale_Planar8(&src, &v8, a3, 0x28u) >= 0;
}

BOOL cva::experimental::getTempBufferSizeLanczos5<unsigned short>(uint64_t a1, uint64_t a2, vImage_Error *a3)
{
  void *v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  vImage_Error v8;
  vImage_Buffer v10;
  vImage_Buffer src;

  v4 = *(void **)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 8);
  v6.i64[0] = v5;
  v6.i64[1] = HIDWORD(v5);
  *(int8x16_t *)&src.height = vextq_s8(v6, v6, 8uLL);
  src.rowBytes = *(unsigned int *)(a1 + 20);
  v10.data = *(void **)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 8);
  v6.i64[0] = v7;
  v6.i64[1] = HIDWORD(v7);
  *(int8x16_t *)&v10.height = vextq_s8(v6, v6, 8uLL);
  v10.rowBytes = *(unsigned int *)(a2 + 20);
  src.data = v4;
  v8 = vImageScale_Planar16U(&src, &v10, 0, 0xA8u);
  if ((v8 & 0x8000000000000000) == 0)
    *a3 = v8;
  return v8 >= 0;
}

BOOL cva::experimental::getTempBufferSizeLanczos3<unsigned short>(uint64_t a1, uint64_t a2, vImage_Error *a3)
{
  void *v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  vImage_Error v8;
  vImage_Buffer v10;
  vImage_Buffer src;

  v4 = *(void **)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 8);
  v6.i64[0] = v5;
  v6.i64[1] = HIDWORD(v5);
  *(int8x16_t *)&src.height = vextq_s8(v6, v6, 8uLL);
  src.rowBytes = *(unsigned int *)(a1 + 20);
  v10.data = *(void **)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 8);
  v6.i64[0] = v7;
  v6.i64[1] = HIDWORD(v7);
  *(int8x16_t *)&v10.height = vextq_s8(v6, v6, 8uLL);
  v10.rowBytes = *(unsigned int *)(a2 + 20);
  src.data = v4;
  v8 = vImageScale_Planar16U(&src, &v10, 0, 0x88u);
  if ((v8 & 0x8000000000000000) == 0)
    *a3 = v8;
  return v8 >= 0;
}

BOOL cva::experimental::resizeLanczos3<unsigned short>(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  uint64_t v4;
  int8x16_t v5;
  uint64_t v6;
  vImage_Buffer v8;
  vImage_Buffer src;

  v3 = *(void **)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 8);
  v5.i64[0] = v4;
  v5.i64[1] = HIDWORD(v4);
  *(int8x16_t *)&src.height = vextq_s8(v5, v5, 8uLL);
  src.rowBytes = *(unsigned int *)(a1 + 20);
  v8.data = *(void **)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 8);
  v5.i64[0] = v6;
  v5.i64[1] = HIDWORD(v6);
  *(int8x16_t *)&v8.height = vextq_s8(v5, v5, 8uLL);
  v8.rowBytes = *(unsigned int *)(a2 + 20);
  src.data = v3;
  return vImageScale_Planar16U(&src, &v8, a3, 8u) >= 0;
}

BOOL cva::experimental::resizeLanczos5<unsigned short>(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  uint64_t v4;
  int8x16_t v5;
  uint64_t v6;
  vImage_Buffer v8;
  vImage_Buffer src;

  v3 = *(void **)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 8);
  v5.i64[0] = v4;
  v5.i64[1] = HIDWORD(v4);
  *(int8x16_t *)&src.height = vextq_s8(v5, v5, 8uLL);
  src.rowBytes = *(unsigned int *)(a1 + 20);
  v8.data = *(void **)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 8);
  v5.i64[0] = v6;
  v5.i64[1] = HIDWORD(v6);
  *(int8x16_t *)&v8.height = vextq_s8(v5, v5, 8uLL);
  v8.rowBytes = *(unsigned int *)(a2 + 20);
  src.data = v3;
  return vImageScale_Planar16U(&src, &v8, a3, 0x28u) >= 0;
}

BOOL cva::experimental::getTempBufferSizeLanczos5<short>(uint64_t a1, uint64_t a2, vImage_Error *a3)
{
  void *v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  vImage_Error v8;
  vImage_Buffer v10;
  vImage_Buffer src;

  v4 = *(void **)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 8);
  v6.i64[0] = v5;
  v6.i64[1] = HIDWORD(v5);
  *(int8x16_t *)&src.height = vextq_s8(v6, v6, 8uLL);
  src.rowBytes = *(unsigned int *)(a1 + 20);
  v10.data = *(void **)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 8);
  v6.i64[0] = v7;
  v6.i64[1] = HIDWORD(v7);
  *(int8x16_t *)&v10.height = vextq_s8(v6, v6, 8uLL);
  v10.rowBytes = *(unsigned int *)(a2 + 20);
  src.data = v4;
  v8 = vImageScale_Planar16S(&src, &v10, 0, 0xA8u);
  if ((v8 & 0x8000000000000000) == 0)
    *a3 = v8;
  return v8 >= 0;
}

BOOL cva::experimental::getTempBufferSizeLanczos3<short>(uint64_t a1, uint64_t a2, vImage_Error *a3)
{
  void *v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  vImage_Error v8;
  vImage_Buffer v10;
  vImage_Buffer src;

  v4 = *(void **)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 8);
  v6.i64[0] = v5;
  v6.i64[1] = HIDWORD(v5);
  *(int8x16_t *)&src.height = vextq_s8(v6, v6, 8uLL);
  src.rowBytes = *(unsigned int *)(a1 + 20);
  v10.data = *(void **)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 8);
  v6.i64[0] = v7;
  v6.i64[1] = HIDWORD(v7);
  *(int8x16_t *)&v10.height = vextq_s8(v6, v6, 8uLL);
  v10.rowBytes = *(unsigned int *)(a2 + 20);
  src.data = v4;
  v8 = vImageScale_Planar16S(&src, &v10, 0, 0x88u);
  if ((v8 & 0x8000000000000000) == 0)
    *a3 = v8;
  return v8 >= 0;
}

BOOL cva::experimental::resizeLanczos3<short>(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  uint64_t v4;
  int8x16_t v5;
  uint64_t v6;
  vImage_Buffer v8;
  vImage_Buffer src;

  v3 = *(void **)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 8);
  v5.i64[0] = v4;
  v5.i64[1] = HIDWORD(v4);
  *(int8x16_t *)&src.height = vextq_s8(v5, v5, 8uLL);
  src.rowBytes = *(unsigned int *)(a1 + 20);
  v8.data = *(void **)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 8);
  v5.i64[0] = v6;
  v5.i64[1] = HIDWORD(v6);
  *(int8x16_t *)&v8.height = vextq_s8(v5, v5, 8uLL);
  v8.rowBytes = *(unsigned int *)(a2 + 20);
  src.data = v3;
  return vImageScale_Planar16S(&src, &v8, a3, 8u) >= 0;
}

BOOL cva::experimental::resizeLanczos5<short>(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  uint64_t v4;
  int8x16_t v5;
  uint64_t v6;
  vImage_Buffer v8;
  vImage_Buffer src;

  v3 = *(void **)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 8);
  v5.i64[0] = v4;
  v5.i64[1] = HIDWORD(v4);
  *(int8x16_t *)&src.height = vextq_s8(v5, v5, 8uLL);
  src.rowBytes = *(unsigned int *)(a1 + 20);
  v8.data = *(void **)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 8);
  v5.i64[0] = v6;
  v5.i64[1] = HIDWORD(v6);
  *(int8x16_t *)&v8.height = vextq_s8(v5, v5, 8uLL);
  v8.rowBytes = *(unsigned int *)(a2 + 20);
  src.data = v3;
  return vImageScale_Planar16S(&src, &v8, a3, 0x28u) >= 0;
}

BOOL cva::experimental::getTempBufferSizeLanczos5<float>(uint64_t a1, uint64_t a2, vImage_Error *a3)
{
  void *v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  vImage_Error v8;
  vImage_Buffer v10;
  vImage_Buffer src;

  v4 = *(void **)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 8);
  v6.i64[0] = v5;
  v6.i64[1] = HIDWORD(v5);
  *(int8x16_t *)&src.height = vextq_s8(v6, v6, 8uLL);
  src.rowBytes = *(unsigned int *)(a1 + 20);
  v10.data = *(void **)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 8);
  v6.i64[0] = v7;
  v6.i64[1] = HIDWORD(v7);
  *(int8x16_t *)&v10.height = vextq_s8(v6, v6, 8uLL);
  v10.rowBytes = *(unsigned int *)(a2 + 20);
  src.data = v4;
  v8 = vImageScale_PlanarF(&src, &v10, 0, 0xA8u);
  if ((v8 & 0x8000000000000000) == 0)
    *a3 = v8;
  return v8 >= 0;
}

BOOL cva::experimental::getTempBufferSizeLanczos3<float>(uint64_t a1, uint64_t a2, vImage_Error *a3)
{
  void *v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  vImage_Error v8;
  vImage_Buffer v10;
  vImage_Buffer src;

  v4 = *(void **)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 8);
  v6.i64[0] = v5;
  v6.i64[1] = HIDWORD(v5);
  *(int8x16_t *)&src.height = vextq_s8(v6, v6, 8uLL);
  src.rowBytes = *(unsigned int *)(a1 + 20);
  v10.data = *(void **)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 8);
  v6.i64[0] = v7;
  v6.i64[1] = HIDWORD(v7);
  *(int8x16_t *)&v10.height = vextq_s8(v6, v6, 8uLL);
  v10.rowBytes = *(unsigned int *)(a2 + 20);
  src.data = v4;
  v8 = vImageScale_PlanarF(&src, &v10, 0, 0x88u);
  if ((v8 & 0x8000000000000000) == 0)
    *a3 = v8;
  return v8 >= 0;
}

BOOL cva::experimental::resizeLanczos3<float>(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  uint64_t v4;
  int8x16_t v5;
  uint64_t v6;
  vImage_Buffer v8;
  vImage_Buffer src;

  v3 = *(void **)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 8);
  v5.i64[0] = v4;
  v5.i64[1] = HIDWORD(v4);
  *(int8x16_t *)&src.height = vextq_s8(v5, v5, 8uLL);
  src.rowBytes = *(unsigned int *)(a1 + 20);
  v8.data = *(void **)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 8);
  v5.i64[0] = v6;
  v5.i64[1] = HIDWORD(v6);
  *(int8x16_t *)&v8.height = vextq_s8(v5, v5, 8uLL);
  v8.rowBytes = *(unsigned int *)(a2 + 20);
  src.data = v3;
  return vImageScale_PlanarF(&src, &v8, a3, 8u) >= 0;
}

BOOL cva::experimental::resizeLanczos5<float>(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  uint64_t v4;
  int8x16_t v5;
  uint64_t v6;
  vImage_Buffer v8;
  vImage_Buffer src;

  v3 = *(void **)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 8);
  v5.i64[0] = v4;
  v5.i64[1] = HIDWORD(v4);
  *(int8x16_t *)&src.height = vextq_s8(v5, v5, 8uLL);
  src.rowBytes = *(unsigned int *)(a1 + 20);
  v8.data = *(void **)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 8);
  v5.i64[0] = v6;
  v5.i64[1] = HIDWORD(v6);
  *(int8x16_t *)&v8.height = vextq_s8(v5, v5, 8uLL);
  v8.rowBytes = *(unsigned int *)(a2 + 20);
  src.data = v3;
  return vImageScale_PlanarF(&src, &v8, a3, 0x28u) >= 0;
}

BOOL cva::experimental::getTempBufferSizeLanczos5<cva::Matrix<unsigned char,4u,1u,false>>(uint64_t a1, uint64_t a2, vImage_Error *a3)
{
  void *v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  vImage_Error v8;
  vImage_Buffer v10;
  vImage_Buffer src;

  v4 = *(void **)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 8);
  v6.i64[0] = v5;
  v6.i64[1] = HIDWORD(v5);
  *(int8x16_t *)&src.height = vextq_s8(v6, v6, 8uLL);
  src.rowBytes = *(unsigned int *)(a1 + 20);
  v10.data = *(void **)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 8);
  v6.i64[0] = v7;
  v6.i64[1] = HIDWORD(v7);
  *(int8x16_t *)&v10.height = vextq_s8(v6, v6, 8uLL);
  v10.rowBytes = *(unsigned int *)(a2 + 20);
  src.data = v4;
  v8 = vImageScale_ARGB8888(&src, &v10, 0, 0xA8u);
  if ((v8 & 0x8000000000000000) == 0)
    *a3 = v8;
  return v8 >= 0;
}

BOOL cva::experimental::getTempBufferSizeLanczos3<cva::Matrix<unsigned char,4u,1u,false>>(uint64_t a1, uint64_t a2, vImage_Error *a3)
{
  void *v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  vImage_Error v8;
  vImage_Buffer v10;
  vImage_Buffer src;

  v4 = *(void **)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 8);
  v6.i64[0] = v5;
  v6.i64[1] = HIDWORD(v5);
  *(int8x16_t *)&src.height = vextq_s8(v6, v6, 8uLL);
  src.rowBytes = *(unsigned int *)(a1 + 20);
  v10.data = *(void **)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 8);
  v6.i64[0] = v7;
  v6.i64[1] = HIDWORD(v7);
  *(int8x16_t *)&v10.height = vextq_s8(v6, v6, 8uLL);
  v10.rowBytes = *(unsigned int *)(a2 + 20);
  src.data = v4;
  v8 = vImageScale_ARGB8888(&src, &v10, 0, 0x88u);
  if ((v8 & 0x8000000000000000) == 0)
    *a3 = v8;
  return v8 >= 0;
}

BOOL cva::experimental::resizeLanczos3<cva::Matrix<unsigned char,4u,1u,false>>(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  uint64_t v4;
  int8x16_t v5;
  uint64_t v6;
  vImage_Buffer v8;
  vImage_Buffer src;

  v3 = *(void **)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 8);
  v5.i64[0] = v4;
  v5.i64[1] = HIDWORD(v4);
  *(int8x16_t *)&src.height = vextq_s8(v5, v5, 8uLL);
  src.rowBytes = *(unsigned int *)(a1 + 20);
  v8.data = *(void **)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 8);
  v5.i64[0] = v6;
  v5.i64[1] = HIDWORD(v6);
  *(int8x16_t *)&v8.height = vextq_s8(v5, v5, 8uLL);
  v8.rowBytes = *(unsigned int *)(a2 + 20);
  src.data = v3;
  return vImageScale_ARGB8888(&src, &v8, a3, 8u) >= 0;
}

BOOL cva::experimental::resizeLanczos5<cva::Matrix<unsigned char,4u,1u,false>>(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  uint64_t v4;
  int8x16_t v5;
  uint64_t v6;
  vImage_Buffer v8;
  vImage_Buffer src;

  v3 = *(void **)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 8);
  v5.i64[0] = v4;
  v5.i64[1] = HIDWORD(v4);
  *(int8x16_t *)&src.height = vextq_s8(v5, v5, 8uLL);
  src.rowBytes = *(unsigned int *)(a1 + 20);
  v8.data = *(void **)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 8);
  v5.i64[0] = v6;
  v5.i64[1] = HIDWORD(v6);
  *(int8x16_t *)&v8.height = vextq_s8(v5, v5, 8uLL);
  v8.rowBytes = *(unsigned int *)(a2 + 20);
  src.data = v3;
  return vImageScale_ARGB8888(&src, &v8, a3, 0x28u) >= 0;
}

BOOL cva::experimental::getTempBufferSizeLanczos5<cva::Matrix<float,4u,1u,false>>(uint64_t a1, uint64_t a2, vImage_Error *a3)
{
  void *v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  vImage_Error v8;
  vImage_Buffer v10;
  vImage_Buffer src;

  v4 = *(void **)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 8);
  v6.i64[0] = v5;
  v6.i64[1] = HIDWORD(v5);
  *(int8x16_t *)&src.height = vextq_s8(v6, v6, 8uLL);
  src.rowBytes = *(unsigned int *)(a1 + 20);
  v10.data = *(void **)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 8);
  v6.i64[0] = v7;
  v6.i64[1] = HIDWORD(v7);
  *(int8x16_t *)&v10.height = vextq_s8(v6, v6, 8uLL);
  v10.rowBytes = *(unsigned int *)(a2 + 20);
  src.data = v4;
  v8 = vImageScale_ARGBFFFF(&src, &v10, 0, 0xA8u);
  if ((v8 & 0x8000000000000000) == 0)
    *a3 = v8;
  return v8 >= 0;
}

BOOL cva::experimental::getTempBufferSizeLanczos3<cva::Matrix<float,4u,1u,false>>(uint64_t a1, uint64_t a2, vImage_Error *a3)
{
  void *v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  vImage_Error v8;
  vImage_Buffer v10;
  vImage_Buffer src;

  v4 = *(void **)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 8);
  v6.i64[0] = v5;
  v6.i64[1] = HIDWORD(v5);
  *(int8x16_t *)&src.height = vextq_s8(v6, v6, 8uLL);
  src.rowBytes = *(unsigned int *)(a1 + 20);
  v10.data = *(void **)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 8);
  v6.i64[0] = v7;
  v6.i64[1] = HIDWORD(v7);
  *(int8x16_t *)&v10.height = vextq_s8(v6, v6, 8uLL);
  v10.rowBytes = *(unsigned int *)(a2 + 20);
  src.data = v4;
  v8 = vImageScale_ARGBFFFF(&src, &v10, 0, 0x88u);
  if ((v8 & 0x8000000000000000) == 0)
    *a3 = v8;
  return v8 >= 0;
}

BOOL cva::experimental::resizeLanczos3<cva::Matrix<float,4u,1u,false>>(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  uint64_t v4;
  int8x16_t v5;
  uint64_t v6;
  vImage_Buffer v8;
  vImage_Buffer src;

  v3 = *(void **)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 8);
  v5.i64[0] = v4;
  v5.i64[1] = HIDWORD(v4);
  *(int8x16_t *)&src.height = vextq_s8(v5, v5, 8uLL);
  src.rowBytes = *(unsigned int *)(a1 + 20);
  v8.data = *(void **)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 8);
  v5.i64[0] = v6;
  v5.i64[1] = HIDWORD(v6);
  *(int8x16_t *)&v8.height = vextq_s8(v5, v5, 8uLL);
  v8.rowBytes = *(unsigned int *)(a2 + 20);
  src.data = v3;
  return vImageScale_ARGBFFFF(&src, &v8, a3, 8u) >= 0;
}

BOOL cva::experimental::resizeLanczos5<cva::Matrix<float,4u,1u,false>>(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  uint64_t v4;
  int8x16_t v5;
  uint64_t v6;
  vImage_Buffer v8;
  vImage_Buffer src;

  v3 = *(void **)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 8);
  v5.i64[0] = v4;
  v5.i64[1] = HIDWORD(v4);
  *(int8x16_t *)&src.height = vextq_s8(v5, v5, 8uLL);
  src.rowBytes = *(unsigned int *)(a1 + 20);
  v8.data = *(void **)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 8);
  v5.i64[0] = v6;
  v5.i64[1] = HIDWORD(v6);
  *(int8x16_t *)&v8.height = vextq_s8(v5, v5, 8uLL);
  v8.rowBytes = *(unsigned int *)(a2 + 20);
  src.data = v3;
  return vImageScale_ARGBFFFF(&src, &v8, a3, 0x28u) >= 0;
}

BOOL cva::experimental::getTempBufferSizeLanczos5<cva::Matrix<unsigned short,4u,1u,false>>(uint64_t a1, uint64_t a2, vImage_Error *a3)
{
  void *v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  vImage_Error v8;
  vImage_Buffer v10;
  vImage_Buffer src;

  v4 = *(void **)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 8);
  v6.i64[0] = v5;
  v6.i64[1] = HIDWORD(v5);
  *(int8x16_t *)&src.height = vextq_s8(v6, v6, 8uLL);
  src.rowBytes = *(unsigned int *)(a1 + 20);
  v10.data = *(void **)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 8);
  v6.i64[0] = v7;
  v6.i64[1] = HIDWORD(v7);
  *(int8x16_t *)&v10.height = vextq_s8(v6, v6, 8uLL);
  v10.rowBytes = *(unsigned int *)(a2 + 20);
  src.data = v4;
  v8 = vImageScale_ARGB16U(&src, &v10, 0, 0xA8u);
  if ((v8 & 0x8000000000000000) == 0)
    *a3 = v8;
  return v8 >= 0;
}

BOOL cva::experimental::getTempBufferSizeLanczos3<cva::Matrix<unsigned short,4u,1u,false>>(uint64_t a1, uint64_t a2, vImage_Error *a3)
{
  void *v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  vImage_Error v8;
  vImage_Buffer v10;
  vImage_Buffer src;

  v4 = *(void **)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 8);
  v6.i64[0] = v5;
  v6.i64[1] = HIDWORD(v5);
  *(int8x16_t *)&src.height = vextq_s8(v6, v6, 8uLL);
  src.rowBytes = *(unsigned int *)(a1 + 20);
  v10.data = *(void **)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 8);
  v6.i64[0] = v7;
  v6.i64[1] = HIDWORD(v7);
  *(int8x16_t *)&v10.height = vextq_s8(v6, v6, 8uLL);
  v10.rowBytes = *(unsigned int *)(a2 + 20);
  src.data = v4;
  v8 = vImageScale_ARGB16U(&src, &v10, 0, 0x88u);
  if ((v8 & 0x8000000000000000) == 0)
    *a3 = v8;
  return v8 >= 0;
}

BOOL cva::experimental::resizeLanczos3<cva::Matrix<unsigned short,4u,1u,false>>(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  uint64_t v4;
  int8x16_t v5;
  uint64_t v6;
  vImage_Buffer v8;
  vImage_Buffer src;

  v3 = *(void **)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 8);
  v5.i64[0] = v4;
  v5.i64[1] = HIDWORD(v4);
  *(int8x16_t *)&src.height = vextq_s8(v5, v5, 8uLL);
  src.rowBytes = *(unsigned int *)(a1 + 20);
  v8.data = *(void **)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 8);
  v5.i64[0] = v6;
  v5.i64[1] = HIDWORD(v6);
  *(int8x16_t *)&v8.height = vextq_s8(v5, v5, 8uLL);
  v8.rowBytes = *(unsigned int *)(a2 + 20);
  src.data = v3;
  return vImageScale_ARGB16U(&src, &v8, a3, 8u) >= 0;
}

BOOL cva::experimental::resizeLanczos5<cva::Matrix<unsigned short,4u,1u,false>>(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  uint64_t v4;
  int8x16_t v5;
  uint64_t v6;
  vImage_Buffer v8;
  vImage_Buffer src;

  v3 = *(void **)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 8);
  v5.i64[0] = v4;
  v5.i64[1] = HIDWORD(v4);
  *(int8x16_t *)&src.height = vextq_s8(v5, v5, 8uLL);
  src.rowBytes = *(unsigned int *)(a1 + 20);
  v8.data = *(void **)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 8);
  v5.i64[0] = v6;
  v5.i64[1] = HIDWORD(v6);
  *(int8x16_t *)&v8.height = vextq_s8(v5, v5, 8uLL);
  v8.rowBytes = *(unsigned int *)(a2 + 20);
  src.data = v3;
  return vImageScale_ARGB16U(&src, &v8, a3, 0x28u) >= 0;
}

BOOL cva::experimental::getTempBufferSizeLanczos5<cva::Matrix<short,4u,1u,false>>(uint64_t a1, uint64_t a2, vImage_Error *a3)
{
  void *v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  vImage_Error v8;
  vImage_Buffer v10;
  vImage_Buffer src;

  v4 = *(void **)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 8);
  v6.i64[0] = v5;
  v6.i64[1] = HIDWORD(v5);
  *(int8x16_t *)&src.height = vextq_s8(v6, v6, 8uLL);
  src.rowBytes = *(unsigned int *)(a1 + 20);
  v10.data = *(void **)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 8);
  v6.i64[0] = v7;
  v6.i64[1] = HIDWORD(v7);
  *(int8x16_t *)&v10.height = vextq_s8(v6, v6, 8uLL);
  v10.rowBytes = *(unsigned int *)(a2 + 20);
  src.data = v4;
  v8 = vImageScale_ARGB16S(&src, &v10, 0, 0xA8u);
  if ((v8 & 0x8000000000000000) == 0)
    *a3 = v8;
  return v8 >= 0;
}

BOOL cva::experimental::getTempBufferSizeLanczos3<cva::Matrix<short,4u,1u,false>>(uint64_t a1, uint64_t a2, vImage_Error *a3)
{
  void *v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  vImage_Error v8;
  vImage_Buffer v10;
  vImage_Buffer src;

  v4 = *(void **)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 8);
  v6.i64[0] = v5;
  v6.i64[1] = HIDWORD(v5);
  *(int8x16_t *)&src.height = vextq_s8(v6, v6, 8uLL);
  src.rowBytes = *(unsigned int *)(a1 + 20);
  v10.data = *(void **)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 8);
  v6.i64[0] = v7;
  v6.i64[1] = HIDWORD(v7);
  *(int8x16_t *)&v10.height = vextq_s8(v6, v6, 8uLL);
  v10.rowBytes = *(unsigned int *)(a2 + 20);
  src.data = v4;
  v8 = vImageScale_ARGB16S(&src, &v10, 0, 0x88u);
  if ((v8 & 0x8000000000000000) == 0)
    *a3 = v8;
  return v8 >= 0;
}

BOOL cva::experimental::resizeLanczos3<cva::Matrix<short,4u,1u,false>>(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  uint64_t v4;
  int8x16_t v5;
  uint64_t v6;
  vImage_Buffer v8;
  vImage_Buffer src;

  v3 = *(void **)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 8);
  v5.i64[0] = v4;
  v5.i64[1] = HIDWORD(v4);
  *(int8x16_t *)&src.height = vextq_s8(v5, v5, 8uLL);
  src.rowBytes = *(unsigned int *)(a1 + 20);
  v8.data = *(void **)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 8);
  v5.i64[0] = v6;
  v5.i64[1] = HIDWORD(v6);
  *(int8x16_t *)&v8.height = vextq_s8(v5, v5, 8uLL);
  v8.rowBytes = *(unsigned int *)(a2 + 20);
  src.data = v3;
  return vImageScale_ARGB16S(&src, &v8, a3, 8u) >= 0;
}

BOOL cva::experimental::resizeLanczos5<cva::Matrix<short,4u,1u,false>>(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  uint64_t v4;
  int8x16_t v5;
  uint64_t v6;
  vImage_Buffer v8;
  vImage_Buffer src;

  v3 = *(void **)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 8);
  v5.i64[0] = v4;
  v5.i64[1] = HIDWORD(v4);
  *(int8x16_t *)&src.height = vextq_s8(v5, v5, 8uLL);
  src.rowBytes = *(unsigned int *)(a1 + 20);
  v8.data = *(void **)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 8);
  v5.i64[0] = v6;
  v5.i64[1] = HIDWORD(v6);
  *(int8x16_t *)&v8.height = vextq_s8(v5, v5, 8uLL);
  v8.rowBytes = *(unsigned int *)(a2 + 20);
  src.data = v3;
  return vImageScale_ARGB16S(&src, &v8, a3, 0x28u) >= 0;
}

float cva::normalizeSO3Coefficients<float>(float *a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float result;
  float v6;
  float v7;
  int v8;
  float v9;

  v2 = *a1;
  v1 = a1[1];
  v3 = a1[2];
  v4 = (float)((float)(v1 * v1) + (float)(v2 * v2)) + (float)(v3 * v3);
  result = 1.0;
  if (v4 > 9.8696)
  {
    v6 = sqrtf(v4) / 3.1416;
    v7 = ceilf(v6) + -1.0;
    v8 = (int)v7;
    v9 = v6 - v7;
    if ((v8 & 1) != 0)
      v9 = v9 + -1.0;
    result = v9 / v6;
    *a1 = v2 * result;
    a1[1] = v1 * result;
    a1[2] = v3 * result;
  }
  return result;
}

double cva::normalizeSO3Coefficients<double>(double *a1)
{
  double v1;
  double v2;
  double v3;
  double v4;
  double result;
  double v6;
  double v7;
  int v8;
  double v9;

  v2 = *a1;
  v1 = a1[1];
  v3 = a1[2];
  v4 = v1 * v1 + v2 * v2 + v3 * v3;
  result = 1.0;
  if (v4 > 9.8696044)
  {
    v6 = sqrt(v4) / 3.14159265;
    v7 = ceil(v6) + -1.0;
    v8 = (int)v7;
    v9 = v6 - v7;
    if ((v8 & 1) != 0)
      v9 = v9 + -1.0;
    result = v9 / v6;
    *a1 = v2 * result;
    a1[1] = v1 * result;
    a1[2] = v3 * result;
  }
  return result;
}

float *cva::ExponentialCoefficients<float,2>::ExponentialCoefficients(float *a1, float a2)
{
  __float2 v4;
  float v5;
  float v6;
  float v7;

  v4 = __sincosf_stret(a2);
  a1[1] = v4.__cosval;
  a1[2] = v4.__sinval;
  v5 = a2 * a2;
  *a1 = a2 * a2;
  if ((float)(a2 * a2) >= 0.0061)
  {
    v6 = (float)(1.0 / a2) * v4.__sinval;
    v7 = (float)(1.0 / a2) * (float)(1.0 - v4.__cosval);
  }
  else
  {
    v6 = 1.0 - (float)(v5 * (float)((float)(v5 / -120.0) + 0.16667));
    v7 = (float)((float)(v5 / -24.0) + 0.5) * a2;
  }
  a1[3] = v6;
  a1[4] = v7;
  return a1;
}

{
  __float2 v4;
  float v5;
  float v6;
  float v7;

  v4 = __sincosf_stret(a2);
  a1[1] = v4.__cosval;
  a1[2] = v4.__sinval;
  v5 = a2 * a2;
  *a1 = a2 * a2;
  if ((float)(a2 * a2) >= 0.0061)
  {
    v6 = (float)(1.0 / a2) * v4.__sinval;
    v7 = (float)(1.0 / a2) * (float)(1.0 - v4.__cosval);
  }
  else
  {
    v6 = 1.0 - (float)(v5 * (float)((float)(v5 / -120.0) + 0.16667));
    v7 = (float)((float)(v5 / -24.0) + 0.5) * a2;
  }
  a1[3] = v6;
  a1[4] = v7;
  return a1;
}

float cva::ExponentialCoefficients<float,2>::compute(float *a1, float a2)
{
  float v2;
  float result;
  float v4;
  float v5;

  v2 = a2 * a2;
  *a1 = a2 * a2;
  if ((float)(a2 * a2) >= 0.0061)
  {
    v4 = 1.0 / a2;
    v5 = v4 * a1[2];
    result = v4 * (float)(1.0 - a1[1]);
    a1[3] = v5;
  }
  else
  {
    result = (float)((float)(v2 / -24.0) + 0.5) * a2;
    a1[3] = 1.0 - (float)(v2 * (float)((float)(v2 / -120.0) + 0.16667));
  }
  a1[4] = result;
  return result;
}

double *cva::ExponentialCoefficients<double,2>::ExponentialCoefficients(double *a1, double a2)
{
  __double2 v4;
  double v5;
  double v6;
  double v7;

  v4 = __sincos_stret(a2);
  a1[1] = v4.__cosval;
  a1[2] = v4.__sinval;
  v5 = a2 * a2;
  *a1 = a2 * a2;
  if (a2 * a2 >= 0.0000002635)
  {
    v6 = 1.0 / a2 * v4.__sinval;
    v7 = 1.0 / a2 * (1.0 - v4.__cosval);
  }
  else
  {
    v6 = 1.0 - v5 * (v5 / -120.0 + 0.166666667);
    v7 = (v5 / -24.0 + 0.5) * a2;
  }
  a1[3] = v6;
  a1[4] = v7;
  return a1;
}

{
  __double2 v4;
  double v5;
  double v6;
  double v7;

  v4 = __sincos_stret(a2);
  a1[1] = v4.__cosval;
  a1[2] = v4.__sinval;
  v5 = a2 * a2;
  *a1 = a2 * a2;
  if (a2 * a2 >= 0.0000002635)
  {
    v6 = 1.0 / a2 * v4.__sinval;
    v7 = 1.0 / a2 * (1.0 - v4.__cosval);
  }
  else
  {
    v6 = 1.0 - v5 * (v5 / -120.0 + 0.166666667);
    v7 = (v5 / -24.0 + 0.5) * a2;
  }
  a1[3] = v6;
  a1[4] = v7;
  return a1;
}

double cva::ExponentialCoefficients<double,2>::compute(double *a1, double a2)
{
  double v2;
  double result;
  double v4;
  double v5;

  v2 = a2 * a2;
  *a1 = a2 * a2;
  if (a2 * a2 >= 0.0000002635)
  {
    v4 = 1.0 / a2;
    v5 = v4 * a1[2];
    result = v4 * (1.0 - a1[1]);
    a1[3] = v5;
  }
  else
  {
    result = (v2 / -24.0 + 0.5) * a2;
    a1[3] = 1.0 - v2 * (v2 / -120.0 + 0.166666667);
  }
  a1[4] = result;
  return result;
}

float *cva::ExponentialCoefficients<float,3>::ExponentialCoefficients(float *a1, float a2)
{
  float v4;
  float v5;
  float v6;
  float cosval;
  float v8;
  __float2 v9;

  if (a2 >= 0.0061)
  {
    v8 = sqrtf(a2);
    v9 = __sincosf_stret(v8);
    cosval = v9.__cosval;
    v6 = v9.__sinval / v8;
    v4 = (float)(1.0 / a2) * (float)(1.0 - v9.__cosval);
    v5 = (float)(1.0 / a2) * (float)(1.0 - (float)(v9.__sinval / v8));
  }
  else
  {
    v4 = 0.5 - (float)(a2 * (float)((float)(a2 / -720.0) + 0.041667));
    v5 = 0.16667 - (float)(a2 * (float)((float)(a2 / -5040.0) + 0.0083333));
    v6 = 1.0 - (float)(a2 * v5);
    cosval = 1.0 - (float)(a2 * v4);
  }
  a1[2] = v4;
  a1[3] = v5;
  *a1 = cosval;
  a1[1] = v6;
  return a1;
}

{
  float v4;
  float v5;
  float v6;
  float cosval;
  float v8;
  __float2 v9;

  if (a2 >= 0.0061)
  {
    v8 = sqrtf(a2);
    v9 = __sincosf_stret(v8);
    cosval = v9.__cosval;
    v6 = v9.__sinval / v8;
    v4 = (float)(1.0 / a2) * (float)(1.0 - v9.__cosval);
    v5 = (float)(1.0 / a2) * (float)(1.0 - (float)(v9.__sinval / v8));
  }
  else
  {
    v4 = 0.5 - (float)(a2 * (float)((float)(a2 / -720.0) + 0.041667));
    v5 = 0.16667 - (float)(a2 * (float)((float)(a2 / -5040.0) + 0.0083333));
    v6 = 1.0 - (float)(a2 * v5);
    cosval = 1.0 - (float)(a2 * v4);
  }
  a1[2] = v4;
  a1[3] = v5;
  *a1 = cosval;
  a1[1] = v6;
  return a1;
}

void cva::ExponentialCoefficients<float,3>::compute(float *a1, float a2)
{
  float v4;
  float v5;
  float v6;
  float cosval;
  float v8;
  __float2 v9;

  if (a2 >= 0.0061)
  {
    v8 = sqrtf(a2);
    v9 = __sincosf_stret(v8);
    cosval = v9.__cosval;
    v6 = v9.__sinval / v8;
    v4 = (float)(1.0 / a2) * (float)(1.0 - v9.__cosval);
    v5 = (float)(1.0 / a2) * (float)(1.0 - (float)(v9.__sinval / v8));
  }
  else
  {
    v4 = 0.5 - (float)(a2 * (float)((float)(a2 / -720.0) + 0.041667));
    v5 = 0.16667 - (float)(a2 * (float)((float)(a2 / -5040.0) + 0.0083333));
    v6 = 1.0 - (float)(a2 * v5);
    cosval = 1.0 - (float)(a2 * v4);
  }
  a1[2] = v4;
  a1[3] = v5;
  *a1 = cosval;
  a1[1] = v6;
}

double *cva::ExponentialCoefficients<double,3>::ExponentialCoefficients(double *a1, double a2)
{
  double v4;
  double v5;
  double v6;
  double cosval;
  double v8;
  __double2 v9;

  if (a2 >= 0.0000002635)
  {
    v8 = sqrt(a2);
    v9 = __sincos_stret(v8);
    cosval = v9.__cosval;
    v6 = v9.__sinval / v8;
    v4 = 1.0 / a2 * (1.0 - v9.__cosval);
    v5 = 1.0 / a2 * (1.0 - v9.__sinval / v8);
  }
  else
  {
    v4 = 0.5 - a2 * (a2 / -720.0 + 0.0416666667);
    v5 = 0.166666667 - a2 * (a2 / -5040.0 + 0.00833333333);
    v6 = 1.0 - a2 * v5;
    cosval = 1.0 - a2 * v4;
  }
  a1[2] = v4;
  a1[3] = v5;
  *a1 = cosval;
  a1[1] = v6;
  return a1;
}

{
  double v4;
  double v5;
  double v6;
  double cosval;
  double v8;
  __double2 v9;

  if (a2 >= 0.0000002635)
  {
    v8 = sqrt(a2);
    v9 = __sincos_stret(v8);
    cosval = v9.__cosval;
    v6 = v9.__sinval / v8;
    v4 = 1.0 / a2 * (1.0 - v9.__cosval);
    v5 = 1.0 / a2 * (1.0 - v9.__sinval / v8);
  }
  else
  {
    v4 = 0.5 - a2 * (a2 / -720.0 + 0.0416666667);
    v5 = 0.166666667 - a2 * (a2 / -5040.0 + 0.00833333333);
    v6 = 1.0 - a2 * v5;
    cosval = 1.0 - a2 * v4;
  }
  a1[2] = v4;
  a1[3] = v5;
  *a1 = cosval;
  a1[1] = v6;
  return a1;
}

void cva::ExponentialCoefficients<double,3>::compute(double *a1, double a2)
{
  double v4;
  double v5;
  double v6;
  double cosval;
  double v8;
  __double2 v9;

  if (a2 >= 0.0000002635)
  {
    v8 = sqrt(a2);
    v9 = __sincos_stret(v8);
    cosval = v9.__cosval;
    v6 = v9.__sinval / v8;
    v4 = 1.0 / a2 * (1.0 - v9.__cosval);
    v5 = 1.0 / a2 * (1.0 - v9.__sinval / v8);
  }
  else
  {
    v4 = 0.5 - a2 * (a2 / -720.0 + 0.0416666667);
    v5 = 0.166666667 - a2 * (a2 / -5040.0 + 0.00833333333);
    v6 = 1.0 - a2 * v5;
    cosval = 1.0 - a2 * v4;
  }
  a1[2] = v4;
  a1[3] = v5;
  *a1 = cosval;
  a1[1] = v6;
}

float *cva::DifferentialExponentialCoefficients<float,2>::DifferentialExponentialCoefficients(float *a1, float a2)
{
  __float2 v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;

  v4 = __sincosf_stret(a2);
  a1[1] = v4.__cosval;
  a1[2] = v4.__sinval;
  v5 = a2 * a2;
  if ((float)(a2 * a2) >= 0.0061)
  {
    v8 = (float)(1.0 / a2) * v4.__sinval;
    v10 = (float)(1.0 / a2) * (float)(1.0 - v4.__cosval);
    v6 = (float)(1.0 / a2) * v10;
    v9 = (float)(1.0 / a2) * (float)(1.0 - v8);
  }
  else
  {
    v6 = 0.5 - (float)(v5 * (float)((float)(v5 / -720.0) + 0.041667));
    v7 = 0.16667 - (float)(v5 * (float)((float)(v5 / -5040.0) + 0.0083333));
    v8 = 1.0 - (float)(v5 * v7);
    v9 = v7 * a2;
    v10 = v6 * a2;
  }
  *a1 = v5;
  a1[5] = v6;
  a1[6] = v9;
  a1[3] = v8;
  a1[4] = v10;
  return a1;
}

{
  __float2 v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;

  v4 = __sincosf_stret(a2);
  a1[1] = v4.__cosval;
  a1[2] = v4.__sinval;
  v5 = a2 * a2;
  if ((float)(a2 * a2) >= 0.0061)
  {
    v8 = (float)(1.0 / a2) * v4.__sinval;
    v10 = (float)(1.0 / a2) * (float)(1.0 - v4.__cosval);
    v6 = (float)(1.0 / a2) * v10;
    v9 = (float)(1.0 / a2) * (float)(1.0 - v8);
  }
  else
  {
    v6 = 0.5 - (float)(v5 * (float)((float)(v5 / -720.0) + 0.041667));
    v7 = 0.16667 - (float)(v5 * (float)((float)(v5 / -5040.0) + 0.0083333));
    v8 = 1.0 - (float)(v5 * v7);
    v9 = v7 * a2;
    v10 = v6 * a2;
  }
  *a1 = v5;
  a1[5] = v6;
  a1[6] = v9;
  a1[3] = v8;
  a1[4] = v10;
  return a1;
}

float *cva::DifferentialExponentialCoefficients<float,2>::compute(float *result, float a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;

  v2 = a2 * a2;
  *result = a2 * a2;
  if ((float)(a2 * a2) >= 0.0061)
  {
    v8 = 1.0 / a2;
    v5 = (float)(1.0 / a2) * result[2];
    v7 = (float)(1.0 / a2) * (float)(1.0 - result[1]);
    v3 = v8 * v7;
    v6 = v8 * (float)(1.0 - v5);
  }
  else
  {
    v3 = 0.5 - (float)(v2 * (float)((float)(v2 / -720.0) + 0.041667));
    v4 = 0.16667 - (float)(v2 * (float)((float)(v2 / -5040.0) + 0.0083333));
    v5 = 1.0 - (float)(v2 * v4);
    v6 = v4 * a2;
    v7 = v3 * a2;
  }
  result[5] = v3;
  result[6] = v6;
  result[3] = v5;
  result[4] = v7;
  return result;
}

double *cva::DifferentialExponentialCoefficients<double,2>::DifferentialExponentialCoefficients(double *a1, double a2)
{
  __double2 v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;

  v4 = __sincos_stret(a2);
  a1[1] = v4.__cosval;
  a1[2] = v4.__sinval;
  v5 = a2 * a2;
  if (a2 * a2 >= 0.0000002635)
  {
    v8 = 1.0 / a2 * v4.__sinval;
    v10 = 1.0 / a2 * (1.0 - v4.__cosval);
    v6 = 1.0 / a2 * v10;
    v9 = 1.0 / a2 * (1.0 - v8);
  }
  else
  {
    v6 = 0.5 - v5 * (v5 / -720.0 + 0.0416666667);
    v7 = 0.166666667 - v5 * (v5 / -5040.0 + 0.00833333333);
    v8 = 1.0 - v5 * v7;
    v9 = v7 * a2;
    v10 = v6 * a2;
  }
  *a1 = v5;
  a1[5] = v6;
  a1[6] = v9;
  a1[3] = v8;
  a1[4] = v10;
  return a1;
}

{
  __double2 v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;

  v4 = __sincos_stret(a2);
  a1[1] = v4.__cosval;
  a1[2] = v4.__sinval;
  v5 = a2 * a2;
  if (a2 * a2 >= 0.0000002635)
  {
    v8 = 1.0 / a2 * v4.__sinval;
    v10 = 1.0 / a2 * (1.0 - v4.__cosval);
    v6 = 1.0 / a2 * v10;
    v9 = 1.0 / a2 * (1.0 - v8);
  }
  else
  {
    v6 = 0.5 - v5 * (v5 / -720.0 + 0.0416666667);
    v7 = 0.166666667 - v5 * (v5 / -5040.0 + 0.00833333333);
    v8 = 1.0 - v5 * v7;
    v9 = v7 * a2;
    v10 = v6 * a2;
  }
  *a1 = v5;
  a1[5] = v6;
  a1[6] = v9;
  a1[3] = v8;
  a1[4] = v10;
  return a1;
}

double *cva::DifferentialExponentialCoefficients<double,2>::compute(double *result, double a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;

  v2 = a2 * a2;
  *result = a2 * a2;
  if (a2 * a2 >= 0.0000002635)
  {
    v8 = 1.0 / a2;
    v5 = 1.0 / a2 * result[2];
    v7 = 1.0 / a2 * (1.0 - result[1]);
    v3 = v8 * v7;
    v6 = v8 * (1.0 - v5);
  }
  else
  {
    v3 = 0.5 - v2 * (v2 / -720.0 + 0.0416666667);
    v4 = 0.166666667 - v2 * (v2 / -5040.0 + 0.00833333333);
    v5 = 1.0 - v2 * v4;
    v6 = v4 * a2;
    v7 = v3 * a2;
  }
  result[5] = v3;
  result[6] = v6;
  result[3] = v5;
  result[4] = v7;
  return result;
}

float *cva::DifferentialExponentialCoefficients<float,3>::DifferentialExponentialCoefficients(float *a1, float a2)
{
  float v4;
  float v5;
  float v6;
  float cosval;
  float v8;
  float v9;
  float v10;
  float v11;
  __float2 v12;

  if (a2 >= 0.0061)
  {
    v11 = sqrtf(a2);
    v12 = __sincosf_stret(v11);
    cosval = v12.__cosval;
    v6 = v12.__sinval / v11;
    v4 = (float)(1.0 / a2) * (float)(1.0 - v12.__cosval);
    v5 = (float)(1.0 / a2) * (float)(1.0 - (float)(v12.__sinval / v11));
    v8 = v5 - v4;
    v9 = (float)(1.0 / a2) * (float)((float)(v12.__sinval / v11) + (float)(v4 * -2.0));
    v10 = (float)(1.0 / a2) * (float)(v4 + (float)(v5 * -3.0));
  }
  else
  {
    v4 = 0.5 - (float)(a2 * (float)((float)(a2 / -720.0) + 0.041667));
    v5 = 0.16667 - (float)(a2 * (float)((float)(a2 / -5040.0) + 0.0083333));
    v6 = 1.0 - (float)(a2 * v5);
    cosval = 1.0 - (float)(a2 * v4);
    v8 = (float)(a2 * (float)((float)(a2 * -0.0011905) + 0.033333)) + -0.33333;
    v9 = (float)(a2 * (float)((float)(a2 * -0.00014881) + 0.0055556)) + -0.083333;
    v10 = (float)(a2 * (float)((float)(a2 * -0.000016534) + 0.00079365)) + -0.016667;
  }
  a1[2] = v4;
  a1[3] = v5;
  *a1 = cosval;
  a1[1] = v6;
  a1[4] = v8;
  a1[5] = v9;
  a1[6] = v10;
  return a1;
}

{
  float v4;
  float v5;
  float v6;
  float cosval;
  float v8;
  float v9;
  float v10;
  float v11;
  __float2 v12;

  if (a2 >= 0.0061)
  {
    v11 = sqrtf(a2);
    v12 = __sincosf_stret(v11);
    cosval = v12.__cosval;
    v6 = v12.__sinval / v11;
    v4 = (float)(1.0 / a2) * (float)(1.0 - v12.__cosval);
    v5 = (float)(1.0 / a2) * (float)(1.0 - (float)(v12.__sinval / v11));
    v8 = v5 - v4;
    v9 = (float)(1.0 / a2) * (float)((float)(v12.__sinval / v11) + (float)(v4 * -2.0));
    v10 = (float)(1.0 / a2) * (float)(v4 + (float)(v5 * -3.0));
  }
  else
  {
    v4 = 0.5 - (float)(a2 * (float)((float)(a2 / -720.0) + 0.041667));
    v5 = 0.16667 - (float)(a2 * (float)((float)(a2 / -5040.0) + 0.0083333));
    v6 = 1.0 - (float)(a2 * v5);
    cosval = 1.0 - (float)(a2 * v4);
    v8 = (float)(a2 * (float)((float)(a2 * -0.0011905) + 0.033333)) + -0.33333;
    v9 = (float)(a2 * (float)((float)(a2 * -0.00014881) + 0.0055556)) + -0.083333;
    v10 = (float)(a2 * (float)((float)(a2 * -0.000016534) + 0.00079365)) + -0.016667;
  }
  a1[2] = v4;
  a1[3] = v5;
  *a1 = cosval;
  a1[1] = v6;
  a1[4] = v8;
  a1[5] = v9;
  a1[6] = v10;
  return a1;
}

void cva::DifferentialExponentialCoefficients<float,3>::compute(float *a1, float a2)
{
  float v4;
  float v5;
  float v6;
  float cosval;
  float v8;
  float v9;
  float v10;
  float v11;
  __float2 v12;

  if (a2 >= 0.0061)
  {
    v11 = sqrtf(a2);
    v12 = __sincosf_stret(v11);
    cosval = v12.__cosval;
    v6 = v12.__sinval / v11;
    v4 = (float)(1.0 / a2) * (float)(1.0 - v12.__cosval);
    v5 = (float)(1.0 / a2) * (float)(1.0 - (float)(v12.__sinval / v11));
    v8 = v5 - v4;
    v9 = (float)(1.0 / a2) * (float)((float)(v12.__sinval / v11) + (float)(v4 * -2.0));
    v10 = (float)(1.0 / a2) * (float)(v4 + (float)(v5 * -3.0));
  }
  else
  {
    v4 = 0.5 - (float)(a2 * (float)((float)(a2 / -720.0) + 0.041667));
    v5 = 0.16667 - (float)(a2 * (float)((float)(a2 / -5040.0) + 0.0083333));
    v6 = 1.0 - (float)(a2 * v5);
    cosval = 1.0 - (float)(a2 * v4);
    v8 = (float)(a2 * (float)((float)(a2 * -0.0011905) + 0.033333)) + -0.33333;
    v9 = (float)(a2 * (float)((float)(a2 * -0.00014881) + 0.0055556)) + -0.083333;
    v10 = (float)(a2 * (float)((float)(a2 * -0.000016534) + 0.00079365)) + -0.016667;
  }
  a1[2] = v4;
  a1[3] = v5;
  *a1 = cosval;
  a1[1] = v6;
  a1[4] = v8;
  a1[5] = v9;
  a1[6] = v10;
}

double *cva::DifferentialExponentialCoefficients<double,3>::DifferentialExponentialCoefficients(double *a1, double a2)
{
  double v4;
  double v5;
  double v6;
  double cosval;
  double v8;
  double v9;
  double v10;
  double v11;
  __double2 v12;

  if (a2 >= 0.0000002635)
  {
    v11 = sqrt(a2);
    v12 = __sincos_stret(v11);
    cosval = v12.__cosval;
    v6 = v12.__sinval / v11;
    v4 = 1.0 / a2 * (1.0 - v12.__cosval);
    v5 = 1.0 / a2 * (1.0 - v12.__sinval / v11);
    v8 = v5 - v4;
    v9 = 1.0 / a2 * (v12.__sinval / v11 + v4 * -2.0);
    v10 = 1.0 / a2 * (v4 + v5 * -3.0);
  }
  else
  {
    v4 = 0.5 - a2 * (a2 / -720.0 + 0.0416666667);
    v5 = 0.166666667 - a2 * (a2 / -5040.0 + 0.00833333333);
    v6 = 1.0 - a2 * v5;
    cosval = 1.0 - a2 * v4;
    v8 = a2 * (a2 * -0.00119047619 + 0.0333333333) + -0.333333333;
    v9 = a2 * (a2 * -0.000148809524 + 0.00555555556) + -0.0833333333;
    v10 = a2 * (a2 * -0.0000165343915 + 0.000793650794) + -0.0166666667;
  }
  a1[2] = v4;
  a1[3] = v5;
  *a1 = cosval;
  a1[1] = v6;
  a1[4] = v8;
  a1[5] = v9;
  a1[6] = v10;
  return a1;
}

{
  double v4;
  double v5;
  double v6;
  double cosval;
  double v8;
  double v9;
  double v10;
  double v11;
  __double2 v12;

  if (a2 >= 0.0000002635)
  {
    v11 = sqrt(a2);
    v12 = __sincos_stret(v11);
    cosval = v12.__cosval;
    v6 = v12.__sinval / v11;
    v4 = 1.0 / a2 * (1.0 - v12.__cosval);
    v5 = 1.0 / a2 * (1.0 - v12.__sinval / v11);
    v8 = v5 - v4;
    v9 = 1.0 / a2 * (v12.__sinval / v11 + v4 * -2.0);
    v10 = 1.0 / a2 * (v4 + v5 * -3.0);
  }
  else
  {
    v4 = 0.5 - a2 * (a2 / -720.0 + 0.0416666667);
    v5 = 0.166666667 - a2 * (a2 / -5040.0 + 0.00833333333);
    v6 = 1.0 - a2 * v5;
    cosval = 1.0 - a2 * v4;
    v8 = a2 * (a2 * -0.00119047619 + 0.0333333333) + -0.333333333;
    v9 = a2 * (a2 * -0.000148809524 + 0.00555555556) + -0.0833333333;
    v10 = a2 * (a2 * -0.0000165343915 + 0.000793650794) + -0.0166666667;
  }
  a1[2] = v4;
  a1[3] = v5;
  *a1 = cosval;
  a1[1] = v6;
  a1[4] = v8;
  a1[5] = v9;
  a1[6] = v10;
  return a1;
}

void cva::DifferentialExponentialCoefficients<double,3>::compute(double *a1, double a2)
{
  double v4;
  double v5;
  double v6;
  double cosval;
  double v8;
  double v9;
  double v10;
  double v11;
  __double2 v12;

  if (a2 >= 0.0000002635)
  {
    v11 = sqrt(a2);
    v12 = __sincos_stret(v11);
    cosval = v12.__cosval;
    v6 = v12.__sinval / v11;
    v4 = 1.0 / a2 * (1.0 - v12.__cosval);
    v5 = 1.0 / a2 * (1.0 - v12.__sinval / v11);
    v8 = v5 - v4;
    v9 = 1.0 / a2 * (v12.__sinval / v11 + v4 * -2.0);
    v10 = 1.0 / a2 * (v4 + v5 * -3.0);
  }
  else
  {
    v4 = 0.5 - a2 * (a2 / -720.0 + 0.0416666667);
    v5 = 0.166666667 - a2 * (a2 / -5040.0 + 0.00833333333);
    v6 = 1.0 - a2 * v5;
    cosval = 1.0 - a2 * v4;
    v8 = a2 * (a2 * -0.00119047619 + 0.0333333333) + -0.333333333;
    v9 = a2 * (a2 * -0.000148809524 + 0.00555555556) + -0.0833333333;
    v10 = a2 * (a2 * -0.0000165343915 + 0.000793650794) + -0.0166666667;
  }
  a1[2] = v4;
  a1[3] = v5;
  *a1 = cosval;
  a1[1] = v6;
  a1[4] = v8;
  a1[5] = v9;
  a1[6] = v10;
}

uint64_t cva::adp::io::readVersion(std::string::size_type *a1, std::string *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v7 = 0;
  result = sub_20AB91378(a1, a2, a3, &v7);
  v6 = v7;
  if (!(_DWORD)result)
    v6 = 0x100000000;
  *a4 = v6;
  return result;
}

uint64_t sub_20AB91378(std::string::size_type *a1, std::string *a2, uint64_t a3, _DWORD *a4)
{
  size_t v4;
  std::string::size_type v7;
  const char *v8;
  CFStringRef v9;
  const void *v10;
  char v11;
  _DWORD *v12;
  const void *v13;
  int v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  CFTypeRef cf;
  char v20;
  std::string::size_type v21;
  std::__shared_weak_count *v22;
  void *__src;
  unsigned int v24;
  void *memptr;

  cva::adp::io::PListSerializer::getPath(a1, a2, &v21);
  v7 = v21;
  if (!v21)
  {
LABEL_12:
    v14 = 0;
    v15 = v22;
    if (!v22)
      return v4 & v14;
    goto LABEL_13;
  }
  if (*(char *)(a3 + 23) >= 0)
    v8 = (const char *)a3;
  else
    v8 = *(const char **)a3;
  v9 = CFStringCreateWithCStringNoCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], v8, 0x8000100u, (CFAllocatorRef)*MEMORY[0x24BDBD258]);
  v10 = (const void *)objc_msgSend(*(id *)v7, "objectForKey:", v9);
  v4 = (size_t)v10;
  v11 = *(_BYTE *)(v7 + 8);
  cf = v10;
  v20 = v11;
  if (!v10)
  {
    v20 = 0;
    v13 = v9;
LABEL_11:
    CFRelease(v13);
    goto LABEL_12;
  }
  CFRetain(v10);
  CFRelease(v9);
  if (!cva::ItemHandler::isVectorType(&cf))
  {
    v13 = (const void *)v4;
    goto LABEL_11;
  }
  cva::ItemHandler::getVector<unsigned int>(&cf, (uint64_t)&__src);
  if (v24)
  {
    v4 = 4 * v24;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, (v4 + 31) & 0x7FFFFFFE0, 0x49090899uLL);
    v12 = memptr;
    memcpy(memptr, __src, v4);
    LODWORD(v4) = v24 == 2;
  }
  else
  {
    LODWORD(v4) = 0;
    v12 = 0;
  }
  free(__src);
  if ((_DWORD)v4 && v12 != a4)
  {
    *a4 = *v12;
    a4[1] = v12[1];
  }
  free(v12);
  if (cf)
    CFRelease(cf);
  v14 = 1;
  v15 = v22;
  if (v22)
  {
LABEL_13:
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return v4 & v14;
}

void sub_20AB9152C(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

BOOL cva::adp::io::writeVersion(cva::adp::io::PListSerializer *a1, std::string *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  CFStringRef v8;
  _BOOL8 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  CFTypeRef cf[2];
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *v17[2];
  int v18;
  void *memptr;

  v5 = *a4;
  cva::adp::io::PListSerializer::createPath(a1, a2, &v15);
  v6 = v15;
  if (!v15)
    goto LABEL_10;
  v17[1] = (void *)8;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, 0x20uLL, 0x49090899uLL);
  v17[0] = memptr;
  v18 = 2;
  *(_QWORD *)memptr = v5;
  cva::ItemHandler::createVector<unsigned int>((uint64_t)v17, (uint64_t)cf);
  free(v17[0]);
  if (cf[0])
  {
    if (*(char *)(a3 + 23) >= 0)
      v7 = (const char *)a3;
    else
      v7 = *(const char **)a3;
    v8 = CFStringCreateWithCStringNoCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], v7, 0x8000100u, (CFAllocatorRef)*MEMORY[0x24BDBD258]);
    v9 = *(_BYTE *)(v6 + 8) != 0;
    if (*(_BYTE *)(v6 + 8))
      objc_msgSend(*(id *)v6, "setValue:forKey:", cf[0], v8);
    CFRelease(v8);
    if (cf[0])
      CFRelease(cf[0]);
  }
  else
  {
LABEL_10:
    v9 = 0;
  }
  v10 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return v9;
}

void sub_20AB9168C(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

double cva::SO3GroupStorage<float,cva::Matrix<float,3u,3u,false>>::SO3GroupStorage(uint64_t a1)
{
  double result;

  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_QWORD *)&result = 1065353216;
  *(_OWORD *)a1 = xmmword_20AC06220;
  *(_OWORD *)(a1 + 16) = unk_20AC06230;
  return result;
}

{
  double result;

  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_QWORD *)&result = 1065353216;
  *(_OWORD *)a1 = xmmword_20AC06220;
  *(_OWORD *)(a1 + 16) = unk_20AC06230;
  return result;
}

float cva::SO3GroupStorage<float,cva::Matrix<float,3u,3u,false>>::angleInDegrees(float32x2_t *a1)
{
  uint64_t v2;
  float v3;

  v3 = 0.0;
  v2 = 0;
  sub_20AB9173C(a1, (float *)&v2);
  return (float)(sqrtf((float)((float)(*(float *)&v2 * *(float *)&v2) + (float)(*((float *)&v2 + 1) * *((float *)&v2 + 1)))+ (float)(v3 * v3))* 180.0)/ 3.1416;
}

void sub_20AB9173C(float32x2_t *a1, float *a2)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  _BOOL4 v14;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float32x2_t v34;

  v4 = (float)(a1[2].f32[1] - a1[3].f32[1]) * 0.5;
  *a2 = v4;
  v5 = (float)(a1[3].f32[0] - a1[1].f32[0]) * 0.5;
  a2[1] = v5;
  v6 = (float)(a1->f32[1] - a1[1].f32[1]) * 0.5;
  a2[2] = v6;
  v7 = a1->f32[0];
  v8 = a1[2].f32[0];
  v9 = a1[4].f32[0];
  v10 = -1.0;
  v11 = (float)((float)((float)(a1->f32[0] + v8) + v9) + -1.0) * 0.5;
  v12 = (float)((float)(v5 * v5) + (float)(v4 * v4)) + (float)(v6 * v6);
  if (v11 >= -1.0 || (float)(v11 + 1.0) <= -0.00001)
  {
    v14 = v11 > 1.0;
    if ((float)(v11 + -1.0) >= 0.00001)
      v14 = 0;
    if (v11 <= 0.99 && !v14)
    {
      if (v11 <= -0.99)
      {
        v10 = (float)((float)((float)(a1->f32[0] + v8) + v9) + -1.0) * 0.5;
        goto LABEL_17;
      }
      v16 = acosf(v11) / sqrtf(v12);
      *a2 = v4 * v16;
      a2[1] = v5 * v16;
    }
    else
    {
      v16 = (float)(v12 * (float)((float)(v12 * (float)((float)((float)(v12 * 5.0) / 112.0) + 0.075)) + 0.16667)) + 1.0;
      *a2 = v4 * v16;
      a2[1] = v5 * v16;
    }
    a2[2] = v6 * v16;
    return;
  }
LABEL_17:
  v17 = asinf(sqrtf(v12));
  v18 = (float)((float)(3.1416 - v17) * (float)(3.1416 - v17)) / (float)(1.0 - v10);
  v19 = (float)(v7 - v10) * v18;
  v20 = (float)(v8 - v10) * v18;
  v21 = (float)(v9 - v10) * v18;
  if (v19 <= v20)
  {
    v26 = v18 * 0.5;
    if (v20 <= v21)
    {
      v33 = sqrtf(v21);
      if (v6 < 0.0)
        v33 = -v33;
      a2[2] = v33;
      v34.i32[0] = a1[1].i32[0];
      v34.i32[1] = a1[2].i32[1];
      *(float32x2_t *)a2 = vmul_n_f32(vmul_n_f32(vadd_f32(a1[3], v34), v26), 1.0 / v33);
    }
    else
    {
      v27 = sqrtf(v20);
      if (v5 < 0.0)
        v27 = -v27;
      a2[1] = v27;
      v28 = 1.0 / v27;
      v29 = a1[3].f32[1] + a1[2].f32[1];
      *a2 = v28 * (float)(v26 * (float)(a1[1].f32[1] + a1->f32[1]));
      a2[2] = v28 * (float)(v26 * v29);
    }
  }
  else
  {
    v22 = v18 * 0.5;
    v23 = v22 * (float)(a1[3].f32[0] + a1[1].f32[0]);
    if (v19 <= v21)
    {
      v30 = sqrtf(v21);
      if (v6 < 0.0)
        v30 = -v30;
      a2[2] = v30;
      v31 = 1.0 / v30;
      v32 = v31 * (float)(v22 * (float)(a1[3].f32[1] + a1[2].f32[1]));
      *a2 = v31 * v23;
      a2[1] = v32;
    }
    else
    {
      v24 = sqrtf(v19);
      if (v4 < 0.0)
        v24 = -v24;
      *a2 = v24;
      v25 = 1.0 / v24;
      a2[1] = v25 * (float)(v22 * (float)(a1[1].f32[1] + a1->f32[1]));
      a2[2] = v25 * v23;
    }
  }
}

float cva::SO3GroupStorage<float,cva::Matrix<float,3u,3u,false>>::angleInRadians(float32x2_t *a1)
{
  uint64_t v2;
  float v3;

  v3 = 0.0;
  v2 = 0;
  sub_20AB9173C(a1, (float *)&v2);
  return sqrtf((float)((float)(*(float *)&v2 * *(float *)&v2) + (float)(*((float *)&v2 + 1) * *((float *)&v2 + 1)))+ (float)(v3 * v3));
}

void cva::SO3GroupStorage<float,cva::Matrix<float,3u,3u,false>>::log(float32x2_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = 0;
  sub_20AB9173C(a1, (float *)a2);
}

double cva::SO3GroupStorage<float,cva::Matrix<float,3u,3u,false>>::lplus(uint64_t a1, float *a2)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float cosval;
  float v10;
  __float2 v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  double result;
  __int128 v22;
  _DWORD v23[9];
  float *v24[2];
  __int128 v25;
  __int128 v26;
  int v27;

  v4 = *a2;
  v3 = a2[1];
  v5 = a2[2];
  v6 = (float)((float)(v4 * v4) + (float)(v3 * v3)) + (float)(v5 * v5);
  if (v6 >= 0.0061)
  {
    v10 = sqrtf(v6);
    v11 = __sincosf_stret(v10);
    cosval = v11.__cosval;
    v8 = v11.__sinval / v10;
    v7 = (float)(1.0 / v6) * (float)(1.0 - v11.__cosval);
  }
  else
  {
    v7 = 0.5 - (float)(v6 * (float)((float)(v6 / -720.0) + 0.041667));
    v8 = 1.0 - (float)(v6 * (float)(0.16667 - (float)(v6 * (float)((float)(v6 / -5040.0) + 0.0083333))));
    cosval = 1.0 - (float)(v6 * v7);
  }
  v12 = v3 * v7;
  v13 = cosval + (float)((float)(v4 * v7) * v4);
  v14 = cosval + (float)((float)(v3 * v7) * v3);
  *(float *)&v23[8] = cosval + (float)((float)(v5 * v7) * v5);
  v15 = v3 * (float)(v4 * v7);
  v16 = v5 * (float)(v4 * v7);
  v17 = v5 * v12;
  v18 = v4 * v8;
  v19 = v5 * v8;
  *(float *)v23 = v13;
  *(float *)&v23[1] = v15 + (float)(v5 * v8);
  v20 = v3 * v8;
  *(float *)&v23[6] = v20 + v16;
  *(float *)&v23[7] = v17 - v18;
  *(float *)&v23[2] = v16 - v20;
  *(float *)&v23[3] = v15 - v19;
  *(float *)&v23[4] = v14;
  *(float *)&v23[5] = v17 + v18;
  v24[0] = (float *)v23;
  v24[1] = (float *)a1;
  v25 = 0u;
  v26 = 0u;
  v27 = 0;
  sub_20AB91C20((uint64_t)&v25, v24);
  result = *(double *)&v25;
  v22 = v26;
  *(_OWORD *)a1 = v25;
  *(_OWORD *)(a1 + 16) = v22;
  *(_DWORD *)(a1 + 32) = v27;
  return result;
}

double sub_20AB91C20(uint64_t a1, float **a2)
{
  float *v3;
  float *v4;
  double result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  int v9;

  v3 = *a2;
  if (*a2 == (float *)a1 || (v4 = a2[1], v4 == (float *)a1))
  {
    v9 = 0;
    v7 = 0u;
    v8 = 0u;
    sub_20AB91C20(&v7);
    result = *(double *)&v7;
    v6 = v8;
    *(_OWORD *)a1 = v7;
    *(_OWORD *)(a1 + 16) = v6;
    *(_DWORD *)(a1 + 32) = v9;
  }
  else
  {
    *(float *)a1 = (float)((float)((float)(*v3 * *v4) + 0.0) + (float)(v3[3] * v4[1])) + (float)(v3[6] * v4[2]);
    *(float *)(a1 + 4) = (float)((float)((float)(v3[1] * *v4) + 0.0) + (float)(v3[4] * v4[1])) + (float)(v3[7] * v4[2]);
    *(float *)(a1 + 8) = (float)((float)((float)(v3[2] * *v4) + 0.0) + (float)(v3[5] * v4[1])) + (float)(v3[8] * v4[2]);
    *(float *)(a1 + 12) = (float)((float)((float)(*v3 * v4[3]) + 0.0) + (float)(v3[3] * v4[4])) + (float)(v3[6] * v4[5]);
    *(float *)(a1 + 16) = (float)((float)((float)(v3[1] * v4[3]) + 0.0) + (float)(v3[4] * v4[4]))
                        + (float)(v3[7] * v4[5]);
    *(float *)(a1 + 20) = (float)((float)((float)(v3[2] * v4[3]) + 0.0) + (float)(v3[5] * v4[4]))
                        + (float)(v3[8] * v4[5]);
    *(float *)(a1 + 24) = (float)((float)((float)(*v3 * v4[6]) + 0.0) + (float)(v3[3] * v4[7])) + (float)(v3[6] * v4[8]);
    *(float *)(a1 + 28) = (float)((float)((float)(v3[1] * v4[6]) + 0.0) + (float)(v3[4] * v4[7]))
                        + (float)(v3[7] * v4[8]);
    *(float *)&result = (float)((float)((float)(v3[2] * v4[6]) + 0.0) + (float)(v3[5] * v4[7])) + (float)(v3[8] * v4[8]);
    *(_DWORD *)(a1 + 32) = LODWORD(result);
  }
  return result;
}

double cva::SO3AlgebraStorage<float,cva::MatrixRef<float const,3u,1u,false>>::SO3AlgebraStorage(_QWORD *a1, uint64_t a2)
{
  double result;

  *a1 = a2;
  *(_QWORD *)&result = 3;
  a1[1] = 3;
  return result;
}

{
  double result;

  *a1 = a2;
  *(_QWORD *)&result = 3;
  a1[1] = 3;
  return result;
}

float cva::SO3AlgebraStorage<float,cva::MatrixRef<float const,3u,1u,false>>::exp@<S0>(float **a1@<X0>, float *a2@<X8>)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float cosval;
  float v10;
  __float2 v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float result;

  v3 = **a1;
  v4 = (*a1)[1];
  v5 = (*a1)[2];
  v6 = (float)((float)(v3 * v3) + (float)(v4 * v4)) + (float)(v5 * v5);
  if (v6 >= 0.0061)
  {
    v10 = sqrtf(v6);
    v11 = __sincosf_stret(v10);
    cosval = v11.__cosval;
    v8 = v11.__sinval / v10;
    v7 = (float)(1.0 / v6) * (float)(1.0 - v11.__cosval);
  }
  else
  {
    v7 = 0.5 - (float)(v6 * (float)((float)(v6 / -720.0) + 0.041667));
    v8 = 1.0 - (float)(v6 * (float)(0.16667 - (float)(v6 * (float)((float)(v6 / -5040.0) + 0.0083333))));
    cosval = 1.0 - (float)(v6 * v7);
  }
  v12 = v3 * v7;
  v13 = v4 * v7;
  v14 = cosval + (float)((float)(v3 * v7) * v3);
  v15 = cosval + (float)((float)(v5 * v7) * v5);
  v16 = cosval + (float)(v13 * v4);
  a2[8] = v15;
  v17 = v4 * v12;
  v18 = v5 * v12;
  v19 = v5 * v13;
  v20 = v3 * v8;
  v21 = v4 * v8;
  v22 = v5 * v8;
  *a2 = v14;
  a2[1] = v17 + v22;
  a2[6] = v21 + v18;
  a2[7] = v19 - v20;
  a2[2] = v18 - v21;
  a2[3] = v17 - v22;
  result = v19 + v20;
  a2[4] = v16;
  a2[5] = v19 + v20;
  return result;
}

double cva::SO3GroupStorage<float,cva::Matrix<float,3u,3u,false>>::rplus(uint64_t a1, float *a2)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float cosval;
  float v10;
  __float2 v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  double result;
  __int128 v22;
  _DWORD v23[9];
  float *v24[2];
  __int128 v25;
  __int128 v26;
  int v27;

  v4 = *a2;
  v3 = a2[1];
  v5 = a2[2];
  v6 = (float)((float)(v4 * v4) + (float)(v3 * v3)) + (float)(v5 * v5);
  if (v6 >= 0.0061)
  {
    v10 = sqrtf(v6);
    v11 = __sincosf_stret(v10);
    cosval = v11.__cosval;
    v8 = v11.__sinval / v10;
    v7 = (float)(1.0 / v6) * (float)(1.0 - v11.__cosval);
  }
  else
  {
    v7 = 0.5 - (float)(v6 * (float)((float)(v6 / -720.0) + 0.041667));
    v8 = 1.0 - (float)(v6 * (float)(0.16667 - (float)(v6 * (float)((float)(v6 / -5040.0) + 0.0083333))));
    cosval = 1.0 - (float)(v6 * v7);
  }
  v12 = v3 * v7;
  v13 = cosval + (float)((float)(v4 * v7) * v4);
  v14 = cosval + (float)((float)(v3 * v7) * v3);
  *(float *)&v23[8] = cosval + (float)((float)(v5 * v7) * v5);
  v15 = v3 * (float)(v4 * v7);
  v16 = v5 * (float)(v4 * v7);
  v17 = v5 * v12;
  v18 = v4 * v8;
  v19 = v5 * v8;
  *(float *)v23 = v13;
  *(float *)&v23[1] = v15 + (float)(v5 * v8);
  v20 = v3 * v8;
  *(float *)&v23[6] = v20 + v16;
  *(float *)&v23[7] = v17 - v18;
  *(float *)&v23[2] = v16 - v20;
  *(float *)&v23[3] = v15 - v19;
  *(float *)&v23[4] = v14;
  *(float *)&v23[5] = v17 + v18;
  v24[0] = (float *)a1;
  v24[1] = (float *)v23;
  v25 = 0u;
  v26 = 0u;
  v27 = 0;
  sub_20AB91C20((uint64_t)&v25, v24);
  result = *(double *)&v25;
  v22 = v26;
  *(_OWORD *)a1 = v25;
  *(_OWORD *)(a1 + 16) = v22;
  *(_DWORD *)(a1 + 32) = v27;
  return result;
}

float *cva::SO3GroupStorage<float,cva::Matrix<float,3u,3u,false>>::transform@<X0>(float *a1@<X0>, float *a2@<X1>, uint64_t a3@<X8>)
{
  float *v4[2];

  v4[0] = a1;
  v4[1] = a2;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  return sub_20AB920D4((float *)a3, v4);
}

float *sub_20AB920D4(float *result, float **a2)
{
  float *v2;
  float *v3;
  float *v4;
  uint64_t v5;
  int v6;

  v2 = result;
  v3 = *a2;
  if (*a2 == result || (v4 = a2[1], v4 == result))
  {
    v6 = 0;
    v5 = 0;
    result = (float *)sub_20AB920D4(&v5);
    *(_QWORD *)v2 = v5;
    *((_DWORD *)v2 + 2) = v6;
  }
  else
  {
    *result = (float)((float)((float)(*v3 * *v4) + 0.0) + (float)(v3[3] * v4[1])) + (float)(v3[6] * v4[2]);
    result[1] = (float)((float)((float)(v3[1] * *v4) + 0.0) + (float)(v3[4] * v4[1])) + (float)(v3[7] * v4[2]);
    result[2] = (float)((float)((float)(v3[2] * *v4) + 0.0) + (float)(v3[5] * v4[1])) + (float)(v3[8] * v4[2]);
  }
  return result;
}

float *cva::SO3GroupStorage<float,cva::Matrix<float,3u,3u,false>>::inverseTransform@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD v5[2];

  v4 = a1;
  v5[0] = &v4;
  v5[1] = a2;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  return sub_20AB921DC((float *)a3, (uint64_t)v5);
}

float *sub_20AB921DC(float *result, uint64_t a2)
{
  float *v2;
  float *v3;
  float *v4;
  uint64_t v5;
  int v6;

  v2 = result;
  v3 = *(float **)(a2 + 8);
  if (v3 == result)
  {
    v6 = 0;
    v5 = 0;
    result = (float *)sub_20AB921DC(&v5);
    *(_QWORD *)v2 = v5;
    *((_DWORD *)v2 + 2) = v6;
  }
  else
  {
    v4 = **(float ***)a2;
    *result = (float)((float)((float)(v4[1] * v3[1]) + (float)(*v4 * *v3)) + 0.0) + (float)(v4[2] * v3[2]);
    result[1] = (float)((float)((float)(v4[4] * v3[1]) + (float)(v4[3] * *v3)) + 0.0) + (float)(v4[5] * v3[2]);
    result[2] = (float)((float)((float)(v4[7] * v3[1]) + (float)(v4[6] * *v3)) + 0.0) + (float)(v4[8] * v3[2]);
  }
  return result;
}

float cva::SO3GroupStorage<float,cva::Matrix<float,3u,3u,false>>::transformJacobian@<S0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  float result;
  float v3;
  float v4;
  float v5;

  *(_DWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v3 = *(float *)(a1 + 4);
  result = *(float *)(a1 + 8);
  v4 = *(float *)a1;
  if (a1 == a2)
  {
    v5 = -*(float *)a1;
    *(_DWORD *)a1 = 0;
    *(float *)(a1 + 4) = -result;
    *(float *)(a1 + 8) = v3;
    *(float *)(a1 + 12) = result;
    *(_DWORD *)(a1 + 16) = 0;
    *(float *)(a1 + 20) = v5;
    *(float *)(a1 + 24) = -v3;
    *(float *)(a1 + 28) = v4;
    *(_DWORD *)(a1 + 32) = 0;
  }
  else
  {
    *(float *)(a2 + 4) = -result;
    *(float *)(a2 + 8) = v3;
    *(float *)(a2 + 12) = result;
    result = -v4;
    *(float *)(a2 + 20) = -v4;
    *(float *)(a2 + 24) = -v3;
    *(float *)(a2 + 28) = v4;
  }
  return result;
}

float cva::SO3GroupStorage<float,cva::Matrix<float,3u,3u,false>>::inverseTransformJacobian@<S0>(float *a1@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float result;
  float v20;
  float v21;

  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v7 = a1[5];
  v8 = a1[6];
  v9 = a1[7];
  v10 = a1[8];
  v12 = a2[1];
  v11 = a2[2];
  v13 = (float)(v3 * v11) - (float)(v4 * v12);
  v14 = (float)(v6 * v11) - (float)(v7 * v12);
  v15 = (float)(v9 * v11) - (float)(v10 * v12);
  v16 = (float)(v4 * *a2) - (float)(*a1 * v11);
  v17 = (float)(v7 * *a2) - (float)(v5 * v11);
  v18 = (float)(v10 * *a2) - (float)(v8 * v11);
  result = (float)(*a1 * v12) - (float)(v3 * *a2);
  v20 = (float)(v5 * v12) - (float)(v6 * *a2);
  v21 = v9 * *a2;
  *a3 = v13;
  a3[1] = v14;
  a3[2] = v15;
  a3[3] = v16;
  a3[4] = v17;
  a3[5] = v18;
  a3[6] = result;
  a3[7] = v20;
  a3[8] = (float)(v8 * v12) - v21;
  return result;
}

uint64_t cva::SO3AlgebraStorage<float,cva::Matrix<float,3u,1u,false>>::SO3AlgebraStorage(uint64_t result)
{
  *(_DWORD *)(result + 8) = 0;
  *(_QWORD *)result = 0;
  return result;
}

{
  *(_DWORD *)(result + 8) = 0;
  *(_QWORD *)result = 0;
  return result;
}

float cva::SO3GroupStorage<float,cva::Matrix<float,3u,3u,false>>::logJacobian@<S0>(float32x2_t *a1@<X0>, uint64_t a2@<X8>)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float cosval;
  float v11;
  __float2 v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float result;

  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  sub_20AB9173C(a1, (float *)a2);
  v3 = *(float *)a2;
  v4 = *(float *)(a2 + 4);
  v5 = *(float *)(a2 + 8);
  v6 = (float)((float)(v3 * v3) + (float)(v4 * v4)) + (float)(v5 * v5);
  if (v6 >= 0.0061)
  {
    v11 = sqrtf(v6);
    v12 = __sincosf_stret(v11);
    cosval = v12.__cosval;
    v9 = v12.__sinval / v11;
    v7 = (float)(1.0 / v6) * (float)(1.0 - v12.__cosval);
    v8 = (float)(1.0 / v6) * (float)(1.0 - (float)(v12.__sinval / v11));
  }
  else
  {
    v7 = 0.5 - (float)(v6 * (float)((float)(v6 / -720.0) + 0.041667));
    v8 = 0.16667 - (float)(v6 * (float)((float)(v6 / -5040.0) + 0.0083333));
    v9 = 1.0 - (float)(v6 * v8);
    cosval = 1.0 - (float)(v6 * v7);
  }
  v13 = (float)-(float)(v8 - (float)(v7 * 0.5)) / v9;
  v14 = (float)(v7 + (float)(v9 * -0.5)) / (float)(1.0 - cosval);
  if (cosval >= 0.9)
    v14 = v13;
  v15 = 1.0 - (float)(v6 * v14);
  v16 = v3 * v14;
  v17 = v14 * v4;
  v18 = v15 + (float)((float)(v3 * v14) * v3);
  v19 = v15 + (float)((float)(v14 * v5) * v5);
  v20 = v15 + (float)(v17 * v4);
  *(float *)(a2 + 44) = v19;
  v21 = v16 * v4;
  v22 = v16 * v5;
  v23 = v17 * v5;
  *(float *)(a2 + 12) = v18;
  *(float *)(a2 + 16) = v21 + (float)(v5 * -0.5);
  *(float *)(a2 + 36) = (float)(v4 * -0.5) + v22;
  *(float *)(a2 + 40) = v23 - (float)(v3 * -0.5);
  *(float *)(a2 + 20) = v22 - (float)(v4 * -0.5);
  *(float *)(a2 + 24) = v21 - (float)(v5 * -0.5);
  result = v23 + (float)(v3 * -0.5);
  *(float *)(a2 + 28) = v20;
  *(float *)(a2 + 32) = result;
  return result;
}

float cva::SO3GroupStorage<float,cva::Matrix<float,3u,3u,false>>::inverse@<S0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  float result;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;

  result = *(float *)a1;
  v3 = *(_DWORD *)(a1 + 4);
  v4 = *(_DWORD *)(a1 + 24);
  v5 = *(_DWORD *)(a1 + 28);
  v7 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 12);
  v8 = *(_DWORD *)(a1 + 16);
  v9 = *(_DWORD *)(a1 + 20);
  v10 = *(_DWORD *)(a1 + 32);
  *a2 = *(_DWORD *)a1;
  a2[1] = v6;
  a2[2] = v4;
  a2[3] = v3;
  a2[4] = v8;
  a2[5] = v5;
  a2[6] = v7;
  a2[7] = v9;
  a2[8] = v10;
  return result;
}

__n128 cva::SO3GroupStorage<float,cva::Matrix<float,3u,3u,false>>::adjoint@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v3;
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 32);
  return result;
}

float32_t cva::SO3GroupStorage<float,cva::Matrix<float,3u,3u,false>>::enforce(float32x2_t *a1)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  int v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float cosval;
  float v16;
  __float2 v17;
  float v18;
  float v19;
  float32_t v20;
  float32_t v21;
  float32_t result;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  uint64_t v29;
  float v30;

  v30 = 0.0;
  v29 = 0;
  sub_20AB9173C(a1, (float *)&v29);
  v2 = *((float *)&v29 + 1);
  v3 = *(float *)&v29;
  v4 = *((float *)&v29 + 1) * *((float *)&v29 + 1);
  v5 = v30;
  v6 = (float)((float)(*((float *)&v29 + 1) * *((float *)&v29 + 1)) + (float)(v3 * v3)) + (float)(v5 * v5);
  if (v6 > 9.8696)
  {
    v7 = sqrtf(v6) / 3.1416;
    v8 = ceilf(v7) + -1.0;
    v9 = (int)v8;
    v10 = v7 - v8;
    if ((v9 & 1) != 0)
      v10 = v10 + -1.0;
    v11 = v10 / v7;
    v3 = *(float *)&v29 * v11;
    v2 = *((float *)&v29 + 1) * v11;
    v5 = v30 * v11;
    v4 = v2 * v2;
  }
  v12 = (float)((float)(v3 * v3) + v4) + (float)(v5 * v5);
  if (v12 >= 0.0061)
  {
    v16 = sqrtf(v12);
    v17 = __sincosf_stret(v16);
    cosval = v17.__cosval;
    v14 = v17.__sinval / v16;
    v13 = (float)(1.0 / v12) * (float)(1.0 - v17.__cosval);
  }
  else
  {
    v13 = 0.5 - (float)(v12 * (float)((float)(v12 / -720.0) + 0.041667));
    v14 = 1.0 - (float)(v12 * (float)(0.16667 - (float)(v12 * (float)((float)(v12 / -5040.0) + 0.0083333))));
    cosval = 1.0 - (float)(v12 * v13);
  }
  v18 = v3 * v13;
  v19 = v2 * v13;
  v20 = cosval + (float)((float)(v3 * v13) * v3);
  v21 = cosval + (float)((float)(v2 * v13) * v2);
  result = cosval + (float)((float)(v5 * v13) * v5);
  v23 = v2 * v18;
  v24 = v5 * v18;
  v25 = v5 * v19;
  v26 = v3 * v14;
  v27 = v2 * v14;
  v28 = v5 * v14;
  a1->f32[0] = v20;
  a1->f32[1] = v23 + v28;
  a1[1].f32[0] = v24 - v27;
  a1[1].f32[1] = v23 - v28;
  a1[2].f32[0] = v21;
  a1[2].f32[1] = v26 + v25;
  a1[3].f32[0] = v27 + v24;
  a1[3].f32[1] = v25 - v26;
  a1[4].f32[0] = result;
  return result;
}

float cva::SO3AlgebraStorage<float,cva::Matrix<float,3u,1u,false>>::enforce(float *a1)
{
  float result;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  int v7;
  float v8;
  float v9;

  v2 = *a1;
  result = a1[1];
  v3 = a1[2];
  v4 = (float)((float)(result * result) + (float)(v2 * v2)) + (float)(v3 * v3);
  if (v4 > 9.8696)
  {
    v5 = sqrtf(v4) / 3.1416;
    v6 = ceilf(v5) + -1.0;
    v7 = (int)v6;
    v8 = v5 - v6;
    if ((v7 & 1) != 0)
      v8 = v8 + -1.0;
    v9 = v8 / v5;
    *a1 = v2 * v9;
    a1[1] = result * v9;
    result = v3 * v9;
    a1[2] = v3 * v9;
  }
  return result;
}

float cva::SO3AlgebraStorage<float,cva::Matrix<float,3u,1u,false>>::exp@<S0>(float *a1@<X0>, float *a2@<X8>)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float cosval;
  float v10;
  __float2 v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float result;

  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  v6 = (float)((float)(v3 * v3) + (float)(v4 * v4)) + (float)(v5 * v5);
  if (v6 >= 0.0061)
  {
    v10 = sqrtf(v6);
    v11 = __sincosf_stret(v10);
    cosval = v11.__cosval;
    v8 = v11.__sinval / v10;
    v7 = (float)(1.0 / v6) * (float)(1.0 - v11.__cosval);
  }
  else
  {
    v7 = 0.5 - (float)(v6 * (float)((float)(v6 / -720.0) + 0.041667));
    v8 = 1.0 - (float)(v6 * (float)(0.16667 - (float)(v6 * (float)((float)(v6 / -5040.0) + 0.0083333))));
    cosval = 1.0 - (float)(v6 * v7);
  }
  v12 = v3 * v7;
  v13 = v7 * v4;
  v14 = cosval + (float)((float)(v3 * v7) * v3);
  v15 = cosval + (float)((float)(v7 * v5) * v5);
  v16 = cosval + (float)(v13 * v4);
  a2[8] = v15;
  v17 = v12 * v4;
  v18 = v12 * v5;
  v19 = v13 * v5;
  v20 = v3 * v8;
  v21 = v8 * v4;
  v22 = v8 * v5;
  *a2 = v14;
  a2[1] = v17 + v22;
  a2[6] = v21 + v18;
  a2[7] = v19 - v20;
  a2[2] = v18 - v21;
  a2[3] = v17 - v22;
  result = v20 + v19;
  a2[4] = v16;
  a2[5] = v20 + v19;
  return result;
}

uint64_t cva::SO3GroupStorage<float,cva::Matrix<float,3u,3u,false>>::serialize()
{
  return std::ostream::write();
}

uint64_t cva::SO3GroupStorage<float,cva::Matrix<float,3u,3u,false>>::deserialize()
{
  return std::istream::read();
}

double cva::SO3GroupStorage<double,cva::Matrix<double,3u,3u,false>>::SO3GroupStorage(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 64) = 0x3FF0000000000000;
  *(_OWORD *)a1 = xmmword_20AC06268;
  *(_OWORD *)(a1 + 16) = unk_20AC06278;
  result = 1.0;
  *(_OWORD *)(a1 + 32) = xmmword_20AC06288;
  *(_OWORD *)(a1 + 48) = unk_20AC06298;
  return result;
}

{
  double result;

  *(_QWORD *)(a1 + 64) = 0x3FF0000000000000;
  *(_OWORD *)a1 = xmmword_20AC06268;
  *(_OWORD *)(a1 + 16) = unk_20AC06278;
  result = 1.0;
  *(_OWORD *)(a1 + 32) = xmmword_20AC06288;
  *(_OWORD *)(a1 + 48) = unk_20AC06298;
  return result;
}

double cva::SO3GroupStorage<double,cva::Matrix<double,3u,3u,false>>::angleInDegrees(float64x2_t *a1)
{
  double v2;
  double v3;
  double v4;

  v2 = 0.0;
  v3 = 0.0;
  v4 = 0.0;
  sub_20AB929EC(a1, &v2);
  return sqrt(v2 * v2 + v3 * v3 + v4 * v4) * 180.0 / 3.14159265;
}

void sub_20AB929EC(float64x2_t *a1, double *a2)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  _BOOL4 v13;
  double v15;
  long double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  float64_t v28;
  double v29;
  double v30;
  double v31;
  double v32;
  float64x2_t v33;

  v4 = (a1[2].f64[1] - a1[3].f64[1]) * 0.5;
  *a2 = v4;
  v5 = (a1[3].f64[0] - a1[1].f64[0]) * 0.5;
  a2[1] = v5;
  v6 = (a1->f64[1] - a1[1].f64[1]) * 0.5;
  a2[2] = v6;
  v7 = a1->f64[0];
  v8 = a1[2].f64[0];
  v9 = a1[4].f64[0];
  v10 = -1.0;
  v11 = (a1->f64[0] + v8 + v9 + -1.0) * 0.5;
  v12 = v5 * v5 + v4 * v4 + v6 * v6;
  if (v11 >= -1.0 || v11 + 1.0 <= -0.00001)
  {
    v13 = v11 > 1.0;
    if (v11 + -1.0 >= 0.00001)
      v13 = 0;
    if (v11 > 0.99 || v13)
    {
      v15 = v12 * (v12 * (v12 * 5.0 / 112.0 + 0.075) + 0.166666667) + 1.0;
LABEL_12:
      *a2 = v4 * v15;
      a2[1] = v5 * v15;
      a2[2] = v6 * v15;
      return;
    }
    if (v11 > -0.99)
    {
      v15 = acos(v11) / sqrt(v12);
      goto LABEL_12;
    }
    v10 = (a1->f64[0] + v8 + v9 + -1.0) * 0.5;
  }
  v16 = asin(sqrt(v12));
  v17 = (3.14159265 - v16) * (3.14159265 - v16) / (1.0 - v10);
  v18 = (v7 - v10) * v17;
  v19 = (v8 - v10) * v17;
  v20 = (v9 - v10) * v17;
  if (v18 <= v19)
  {
    v25 = v17 * 0.5;
    if (v19 <= v20)
    {
      v32 = sqrt(v20);
      if (v6 < 0.0)
        v32 = -v32;
      a2[2] = v32;
      v33.f64[0] = a1[1].f64[0];
      v33.f64[1] = a1[2].f64[1];
      *(float64x2_t *)a2 = vmulq_n_f64(vmulq_n_f64(vaddq_f64(a1[3], v33), v25), 1.0 / v32);
    }
    else
    {
      v26 = sqrt(v19);
      if (v5 < 0.0)
        v26 = -v26;
      a2[1] = v26;
      v27 = 1.0 / v26;
      v28 = a1[3].f64[1] + a1[2].f64[1];
      *a2 = v27 * (v25 * (a1[1].f64[1] + a1->f64[1]));
      a2[2] = v27 * (v25 * v28);
    }
  }
  else
  {
    v21 = v17 * 0.5;
    v22 = v21 * (a1[3].f64[0] + a1[1].f64[0]);
    if (v18 <= v20)
    {
      v29 = sqrt(v20);
      if (v6 < 0.0)
        v29 = -v29;
      a2[2] = v29;
      v30 = 1.0 / v29;
      v31 = v30 * (v21 * (a1[3].f64[1] + a1[2].f64[1]));
      *a2 = v30 * v22;
      a2[1] = v31;
    }
    else
    {
      v23 = sqrt(v18);
      if (v4 < 0.0)
        v23 = -v23;
      *a2 = v23;
      v24 = 1.0 / v23;
      a2[1] = v24 * (v21 * (a1[1].f64[1] + a1->f64[1]));
      a2[2] = v24 * v22;
    }
  }
}

double cva::SO3GroupStorage<double,cva::Matrix<double,3u,3u,false>>::angleInRadians(float64x2_t *a1)
{
  double v2;
  double v3;
  double v4;

  v2 = 0.0;
  v3 = 0.0;
  v4 = 0.0;
  sub_20AB929EC(a1, &v2);
  return sqrt(v2 * v2 + v3 * v3 + v4 * v4);
}

void cva::SO3GroupStorage<double,cva::Matrix<double,3u,3u,false>>::log(float64x2_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  sub_20AB929EC(a1, (double *)a2);
}

__n128 cva::SO3GroupStorage<double,cva::Matrix<double,3u,3u,false>>::lplus(uint64_t a1, double *a2)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double cosval;
  double v10;
  __double2 v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  __int128 v21;
  __n128 result;
  _QWORD v23[9];
  double *v24[2];
  __int128 v25;
  __n128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v4 = *a2;
  v3 = a2[1];
  v5 = a2[2];
  v6 = v4 * v4 + v3 * v3 + v5 * v5;
  if (v6 >= 0.0000002635)
  {
    v10 = sqrt(v6);
    v11 = __sincos_stret(v10);
    cosval = v11.__cosval;
    v8 = v11.__sinval / v10;
    v7 = 1.0 / v6 * (1.0 - v11.__cosval);
  }
  else
  {
    v7 = 0.5 - v6 * (v6 / -720.0 + 0.0416666667);
    v8 = 1.0 - v6 * (0.166666667 - v6 * (v6 / -5040.0 + 0.00833333333));
    cosval = 1.0 - v6 * v7;
  }
  v12 = v3 * v7;
  v13 = cosval + v4 * v7 * v4;
  v14 = cosval + v3 * v7 * v3;
  *(double *)&v23[8] = cosval + v5 * v7 * v5;
  v15 = v3 * (v4 * v7);
  v16 = v5 * (v4 * v7);
  v17 = v5 * v12;
  v18 = v4 * v8;
  v19 = v5 * v8;
  *(double *)v23 = v13;
  *(double *)&v23[1] = v15 + v5 * v8;
  v20 = v3 * v8;
  *(double *)&v23[6] = v20 + v16;
  *(double *)&v23[7] = v17 - v18;
  *(double *)&v23[2] = v16 - v20;
  *(double *)&v23[3] = v15 - v19;
  *(double *)&v23[4] = v14;
  *(double *)&v23[5] = v17 + v18;
  v24[0] = (double *)v23;
  v24[1] = (double *)a1;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0;
  sub_20AB92ED0((uint64_t)&v25, v24);
  v21 = v28;
  *(_OWORD *)(a1 + 32) = v27;
  *(_OWORD *)(a1 + 48) = v21;
  *(_QWORD *)(a1 + 64) = v29;
  result = v26;
  *(_OWORD *)a1 = v25;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

__n128 sub_20AB92ED0(uint64_t a1, double **a2)
{
  double *v3;
  double *v4;
  __n128 result;
  __int128 v6;
  __int128 v7;
  __n128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v3 = *a2;
  if (*a2 == (double *)a1 || (v4 = a2[1], v4 == (double *)a1))
  {
    v11 = 0;
    v9 = 0u;
    v10 = 0u;
    v7 = 0u;
    v8 = 0u;
    sub_20AB92ED0(&v7);
    v6 = v10;
    *(_OWORD *)(a1 + 32) = v9;
    *(_OWORD *)(a1 + 48) = v6;
    *(_QWORD *)(a1 + 64) = v11;
    result = v8;
    *(_OWORD *)a1 = v7;
    *(__n128 *)(a1 + 16) = result;
  }
  else
  {
    *(double *)a1 = *v3 * *v4 + 0.0 + v3[3] * v4[1] + v3[6] * v4[2];
    *(double *)(a1 + 8) = v3[1] * *v4 + 0.0 + v3[4] * v4[1] + v3[7] * v4[2];
    *(double *)(a1 + 16) = v3[2] * *v4 + 0.0 + v3[5] * v4[1] + v3[8] * v4[2];
    *(double *)(a1 + 24) = *v3 * v4[3] + 0.0 + v3[3] * v4[4] + v3[6] * v4[5];
    *(double *)(a1 + 32) = v3[1] * v4[3] + 0.0 + v3[4] * v4[4] + v3[7] * v4[5];
    *(double *)(a1 + 40) = v3[2] * v4[3] + 0.0 + v3[5] * v4[4] + v3[8] * v4[5];
    *(double *)(a1 + 48) = *v3 * v4[6] + 0.0 + v3[3] * v4[7] + v3[6] * v4[8];
    *(double *)(a1 + 56) = v3[1] * v4[6] + 0.0 + v3[4] * v4[7] + v3[7] * v4[8];
    result.n128_f64[0] = v3[2] * v4[6] + 0.0 + v3[5] * v4[7] + v3[8] * v4[8];
    *(_QWORD *)(a1 + 64) = result.n128_u64[0];
  }
  return result;
}

double cva::SO3AlgebraStorage<double,cva::MatrixRef<double const,3u,1u,false>>::SO3AlgebraStorage(_QWORD *a1, uint64_t a2)
{
  double result;

  *a1 = a2;
  *(_QWORD *)&result = 3;
  a1[1] = 3;
  return result;
}

{
  double result;

  *a1 = a2;
  *(_QWORD *)&result = 3;
  a1[1] = 3;
  return result;
}

double cva::SO3AlgebraStorage<double,cva::MatrixRef<double const,3u,1u,false>>::exp@<D0>(double **a1@<X0>, double *a2@<X8>)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double cosval;
  double v10;
  __double2 v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double result;

  v3 = **a1;
  v4 = (*a1)[1];
  v5 = (*a1)[2];
  v6 = v3 * v3 + v4 * v4 + v5 * v5;
  if (v6 >= 0.0000002635)
  {
    v10 = sqrt(v6);
    v11 = __sincos_stret(v10);
    cosval = v11.__cosval;
    v8 = v11.__sinval / v10;
    v7 = 1.0 / v6 * (1.0 - v11.__cosval);
  }
  else
  {
    v7 = 0.5 - v6 * (v6 / -720.0 + 0.0416666667);
    v8 = 1.0 - v6 * (0.166666667 - v6 * (v6 / -5040.0 + 0.00833333333));
    cosval = 1.0 - v6 * v7;
  }
  v12 = v3 * v7;
  v13 = v4 * v7;
  v14 = cosval + v3 * v7 * v3;
  v15 = cosval + v5 * v7 * v5;
  v16 = cosval + v13 * v4;
  a2[8] = v15;
  v17 = v4 * v12;
  v18 = v5 * v12;
  v19 = v5 * v13;
  v20 = v3 * v8;
  v21 = v4 * v8;
  v22 = v5 * v8;
  *a2 = v14;
  a2[1] = v17 + v22;
  a2[6] = v21 + v18;
  a2[7] = v19 - v20;
  a2[2] = v18 - v21;
  a2[3] = v17 - v22;
  result = v19 + v20;
  a2[4] = v16;
  a2[5] = v19 + v20;
  return result;
}

__n128 cva::SO3GroupStorage<double,cva::Matrix<double,3u,3u,false>>::rplus(uint64_t a1, double *a2)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double cosval;
  double v10;
  __double2 v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  __int128 v21;
  __n128 result;
  _QWORD v23[9];
  double *v24[2];
  __int128 v25;
  __n128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v4 = *a2;
  v3 = a2[1];
  v5 = a2[2];
  v6 = v4 * v4 + v3 * v3 + v5 * v5;
  if (v6 >= 0.0000002635)
  {
    v10 = sqrt(v6);
    v11 = __sincos_stret(v10);
    cosval = v11.__cosval;
    v8 = v11.__sinval / v10;
    v7 = 1.0 / v6 * (1.0 - v11.__cosval);
  }
  else
  {
    v7 = 0.5 - v6 * (v6 / -720.0 + 0.0416666667);
    v8 = 1.0 - v6 * (0.166666667 - v6 * (v6 / -5040.0 + 0.00833333333));
    cosval = 1.0 - v6 * v7;
  }
  v12 = v3 * v7;
  v13 = cosval + v4 * v7 * v4;
  v14 = cosval + v3 * v7 * v3;
  *(double *)&v23[8] = cosval + v5 * v7 * v5;
  v15 = v3 * (v4 * v7);
  v16 = v5 * (v4 * v7);
  v17 = v5 * v12;
  v18 = v4 * v8;
  v19 = v5 * v8;
  *(double *)v23 = v13;
  *(double *)&v23[1] = v15 + v5 * v8;
  v20 = v3 * v8;
  *(double *)&v23[6] = v20 + v16;
  *(double *)&v23[7] = v17 - v18;
  *(double *)&v23[2] = v16 - v20;
  *(double *)&v23[3] = v15 - v19;
  *(double *)&v23[4] = v14;
  *(double *)&v23[5] = v17 + v18;
  v24[0] = (double *)a1;
  v24[1] = (double *)v23;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0;
  sub_20AB92ED0((uint64_t)&v25, v24);
  v21 = v28;
  *(_OWORD *)(a1 + 32) = v27;
  *(_OWORD *)(a1 + 48) = v21;
  *(_QWORD *)(a1 + 64) = v29;
  result = v26;
  *(_OWORD *)a1 = v25;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

double cva::SO3GroupStorage<double,cva::Matrix<double,3u,3u,false>>::transform@<D0>(double *a1@<X0>, double *a2@<X1>, _QWORD *a3@<X8>)
{
  double *v4[2];

  v4[0] = a1;
  v4[1] = a2;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  return sub_20AB933B0((uint64_t)a3, v4);
}

double sub_20AB933B0(uint64_t a1, double **a2)
{
  double *v3;
  double *v4;
  double result;
  __int128 v6;
  uint64_t v7;

  v3 = *a2;
  if (*a2 == (double *)a1 || (v4 = a2[1], v4 == (double *)a1))
  {
    v6 = 0uLL;
    v7 = 0;
    sub_20AB933B0(&v6);
    result = *(double *)&v6;
    *(_OWORD *)a1 = v6;
    *(_QWORD *)(a1 + 16) = v7;
  }
  else
  {
    *(double *)a1 = *v3 * *v4 + 0.0 + v3[3] * v4[1] + v3[6] * v4[2];
    *(double *)(a1 + 8) = v3[1] * *v4 + 0.0 + v3[4] * v4[1] + v3[7] * v4[2];
    result = v3[2] * *v4 + 0.0 + v3[5] * v4[1] + v3[8] * v4[2];
    *(double *)(a1 + 16) = result;
  }
  return result;
}

double cva::SO3GroupStorage<double,cva::Matrix<double,3u,3u,false>>::inverseTransform@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  _QWORD v5[2];

  v4 = a1;
  v5[0] = &v4;
  v5[1] = a2;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  return sub_20AB934B8((uint64_t)a3, (uint64_t)v5);
}

double sub_20AB934B8(uint64_t a1, uint64_t a2)
{
  double *v3;
  double *v4;
  double result;
  __int128 v6;
  uint64_t v7;

  v3 = *(double **)(a2 + 8);
  if (v3 == (double *)a1)
  {
    v6 = 0uLL;
    v7 = 0;
    sub_20AB934B8(&v6);
    result = *(double *)&v6;
    *(_OWORD *)a1 = v6;
    *(_QWORD *)(a1 + 16) = v7;
  }
  else
  {
    v4 = **(double ***)a2;
    *(double *)a1 = v4[1] * v3[1] + *v4 * *v3 + 0.0 + v4[2] * v3[2];
    *(double *)(a1 + 8) = v4[4] * v3[1] + v4[3] * *v3 + 0.0 + v4[5] * v3[2];
    result = v4[7] * v3[1] + v4[6] * *v3 + 0.0 + v4[8] * v3[2];
    *(double *)(a1 + 16) = result;
  }
  return result;
}

double cva::SO3GroupStorage<double,cva::Matrix<double,3u,3u,false>>::transformJacobian@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  double result;
  double v3;
  double v4;
  double v5;

  *(_QWORD *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v3 = *(double *)(a1 + 8);
  result = *(double *)(a1 + 16);
  v4 = *(double *)a1;
  if (a1 == a2)
  {
    v5 = -*(double *)a1;
    *(_QWORD *)a1 = 0;
    *(double *)(a1 + 8) = -result;
    *(double *)(a1 + 16) = v3;
    *(double *)(a1 + 24) = result;
    *(_QWORD *)(a1 + 32) = 0;
    *(double *)(a1 + 40) = v5;
    *(double *)(a1 + 48) = -v3;
    *(double *)(a1 + 56) = v4;
    *(_QWORD *)(a1 + 64) = 0;
  }
  else
  {
    *(double *)(a2 + 8) = -result;
    *(double *)(a2 + 16) = v3;
    *(double *)(a2 + 24) = result;
    result = -v4;
    *(double *)(a2 + 40) = -v4;
    *(double *)(a2 + 48) = -v3;
    *(double *)(a2 + 56) = v4;
  }
  return result;
}

double cva::SO3GroupStorage<double,cva::Matrix<double,3u,3u,false>>::inverseTransformJacobian@<D0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double result;
  double v20;
  double v21;

  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v7 = a1[5];
  v8 = a1[6];
  v9 = a1[7];
  v10 = a1[8];
  v12 = a2[1];
  v11 = a2[2];
  v13 = v3 * v11 - v4 * v12;
  v14 = v6 * v11 - v7 * v12;
  v15 = v9 * v11 - v10 * v12;
  v16 = v4 * *a2 - *a1 * v11;
  v17 = v7 * *a2 - v5 * v11;
  v18 = v10 * *a2 - v8 * v11;
  result = *a1 * v12 - v3 * *a2;
  v20 = v5 * v12 - v6 * *a2;
  v21 = v9 * *a2;
  *a3 = v13;
  a3[1] = v14;
  a3[2] = v15;
  a3[3] = v16;
  a3[4] = v17;
  a3[5] = v18;
  a3[6] = result;
  a3[7] = v20;
  a3[8] = v8 * v12 - v21;
  return result;
}

_QWORD *cva::SO3AlgebraStorage<double,cva::Matrix<double,3u,1u,false>>::SO3AlgebraStorage(_QWORD *result)
{
  *result = 0;
  result[1] = 0;
  result[2] = 0;
  return result;
}

{
  *result = 0;
  result[1] = 0;
  result[2] = 0;
  return result;
}

double cva::SO3GroupStorage<double,cva::Matrix<double,3u,3u,false>>::logJacobian@<D0>(float64x2_t *a1@<X0>, uint64_t a2@<X8>)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double cosval;
  double v11;
  __double2 v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double result;

  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  sub_20AB929EC(a1, (double *)a2);
  v3 = *(double *)a2;
  v4 = *(double *)(a2 + 8);
  v5 = *(double *)(a2 + 16);
  v6 = v3 * v3 + v4 * v4 + v5 * v5;
  if (v6 >= 0.0000002635)
  {
    v11 = sqrt(v6);
    v12 = __sincos_stret(v11);
    cosval = v12.__cosval;
    v9 = v12.__sinval / v11;
    v7 = 1.0 / v6 * (1.0 - v12.__cosval);
    v8 = 1.0 / v6 * (1.0 - v12.__sinval / v11);
  }
  else
  {
    v7 = 0.5 - v6 * (v6 / -720.0 + 0.0416666667);
    v8 = 0.166666667 - v6 * (v6 / -5040.0 + 0.00833333333);
    v9 = 1.0 - v6 * v8;
    cosval = 1.0 - v6 * v7;
  }
  v13 = -(v8 - v7 * 0.5) / v9;
  v14 = (v7 + v9 * -0.5) / (1.0 - cosval);
  if (cosval >= 0.9)
    v14 = v13;
  v15 = 1.0 - v6 * v14;
  v16 = v3 * v14;
  v17 = v14 * v4;
  v18 = v15 + v3 * v14 * v3;
  v19 = v15 + v14 * v5 * v5;
  v20 = v15 + v17 * v4;
  *(double *)(a2 + 88) = v19;
  v21 = v16 * v4;
  v22 = v16 * v5;
  v23 = v17 * v5;
  *(double *)(a2 + 24) = v18;
  *(double *)(a2 + 32) = v21 + v5 * -0.5;
  *(double *)(a2 + 72) = v4 * -0.5 + v22;
  *(double *)(a2 + 80) = v23 - v3 * -0.5;
  *(double *)(a2 + 40) = v22 - v4 * -0.5;
  *(double *)(a2 + 48) = v21 - v5 * -0.5;
  result = v23 + v3 * -0.5;
  *(double *)(a2 + 56) = v20;
  *(double *)(a2 + 64) = result;
  return result;
}

double cva::SO3GroupStorage<double,cva::Matrix<double,3u,3u,false>>::inverse@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  double result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = *(double *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 64);
  *a2 = *(_QWORD *)a1;
  a2[1] = v6;
  a2[2] = v4;
  a2[3] = v3;
  a2[4] = v8;
  a2[5] = v5;
  a2[6] = v7;
  a2[7] = v9;
  a2[8] = v10;
  return result;
}

__n128 cva::SO3GroupStorage<double,cva::Matrix<double,3u,3u,false>>::adjoint@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v2;
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(a1 + 64);
  result = *(__n128 *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(__n128 *)(a2 + 16) = result;
  return result;
}

double cva::SO3GroupStorage<double,cva::Matrix<double,3u,3u,false>>::enforce(float64x2_t *a1)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  int v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double cosval;
  double v16;
  __double2 v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double result;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;

  v29 = 0.0;
  v30 = 0.0;
  v31 = 0.0;
  sub_20AB929EC(a1, &v29);
  v3 = v29;
  v2 = v30;
  v4 = v2 * v2;
  v5 = v31;
  v6 = v2 * v2 + v3 * v3 + v5 * v5;
  if (v6 > 9.8696044)
  {
    v7 = sqrt(v6) / 3.14159265;
    v8 = ceil(v7) + -1.0;
    v9 = (int)v8;
    v10 = v7 - v8;
    if ((v9 & 1) != 0)
      v10 = v10 + -1.0;
    v11 = v10 / v7;
    v3 = v29 * v11;
    v2 = v30 * v11;
    v5 = v31 * v11;
    v4 = v2 * v2;
  }
  v12 = v3 * v3 + v4 + v5 * v5;
  if (v12 >= 0.0000002635)
  {
    v16 = sqrt(v12);
    v17 = __sincos_stret(v16);
    cosval = v17.__cosval;
    v14 = v17.__sinval / v16;
    v13 = 1.0 / v12 * (1.0 - v17.__cosval);
  }
  else
  {
    v13 = 0.5 - v12 * (v12 / -720.0 + 0.0416666667);
    v14 = 1.0 - v12 * (0.166666667 - v12 * (v12 / -5040.0 + 0.00833333333));
    cosval = 1.0 - v12 * v13;
  }
  v18 = v3 * v13;
  v19 = v2 * v13;
  v20 = cosval + v3 * v13 * v3;
  v21 = cosval + v2 * v13 * v2;
  result = cosval + v5 * v13 * v5;
  v23 = v2 * v18;
  v24 = v5 * v18;
  v25 = v5 * v19;
  v26 = v3 * v14;
  v27 = v2 * v14;
  v28 = v5 * v14;
  a1->f64[0] = v20;
  a1->f64[1] = v23 + v28;
  a1[1].f64[0] = v24 - v27;
  a1[1].f64[1] = v23 - v28;
  a1[2].f64[0] = v21;
  a1[2].f64[1] = v26 + v25;
  a1[3].f64[0] = v27 + v24;
  a1[3].f64[1] = v25 - v26;
  a1[4].f64[0] = result;
  return result;
}

double cva::SO3AlgebraStorage<double,cva::Matrix<double,3u,1u,false>>::enforce(double *a1)
{
  double result;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  int v7;
  double v8;
  double v9;

  v2 = *a1;
  result = a1[1];
  v3 = a1[2];
  v4 = result * result + v2 * v2 + v3 * v3;
  if (v4 > 9.8696044)
  {
    v5 = sqrt(v4) / 3.14159265;
    v6 = ceil(v5) + -1.0;
    v7 = (int)v6;
    v8 = v5 - v6;
    if ((v7 & 1) != 0)
      v8 = v8 + -1.0;
    v9 = v8 / v5;
    *a1 = v2 * v9;
    a1[1] = result * v9;
    result = v3 * v9;
    a1[2] = v3 * v9;
  }
  return result;
}

double cva::SO3AlgebraStorage<double,cva::Matrix<double,3u,1u,false>>::exp@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double cosval;
  double v10;
  __double2 v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double result;

  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  v6 = v3 * v3 + v4 * v4 + v5 * v5;
  if (v6 >= 0.0000002635)
  {
    v10 = sqrt(v6);
    v11 = __sincos_stret(v10);
    cosval = v11.__cosval;
    v8 = v11.__sinval / v10;
    v7 = 1.0 / v6 * (1.0 - v11.__cosval);
  }
  else
  {
    v7 = 0.5 - v6 * (v6 / -720.0 + 0.0416666667);
    v8 = 1.0 - v6 * (0.166666667 - v6 * (v6 / -5040.0 + 0.00833333333));
    cosval = 1.0 - v6 * v7;
  }
  v12 = v3 * v7;
  v13 = v7 * v4;
  v14 = cosval + v3 * v7 * v3;
  v15 = cosval + v7 * v5 * v5;
  v16 = cosval + v13 * v4;
  a2[8] = v15;
  v17 = v12 * v4;
  v18 = v12 * v5;
  v19 = v13 * v5;
  v20 = v3 * v8;
  v21 = v8 * v4;
  v22 = v8 * v5;
  *a2 = v14;
  a2[1] = v17 + v22;
  a2[6] = v21 + v18;
  a2[7] = v19 - v20;
  a2[2] = v18 - v21;
  a2[3] = v17 - v22;
  result = v20 + v19;
  a2[4] = v16;
  a2[5] = v20 + v19;
  return result;
}

uint64_t cva::SO3GroupStorage<double,cva::Matrix<double,3u,3u,false>>::serialize()
{
  return std::ostream::write();
}

uint64_t cva::SO3GroupStorage<double,cva::Matrix<double,3u,3u,false>>::deserialize()
{
  return std::istream::read();
}

double cva::SO3GroupStorage<float,cva::MatrixRef<float const,3u,3u,false>>::SO3GroupStorage(_QWORD *a1, uint64_t a2)
{
  double result;

  *a1 = a2;
  *(_QWORD *)&result = 3;
  a1[1] = 3;
  return result;
}

{
  double result;

  *a1 = a2;
  *(_QWORD *)&result = 3;
  a1[1] = 3;
  return result;
}

float cva::SO3GroupStorage<float,cva::MatrixRef<float const,3u,3u,false>>::angleInDegrees(uint64_t a1)
{
  uint64_t v2;
  float v3;

  v3 = 0.0;
  v2 = 0;
  sub_20AB93CB0(*(float **)a1, *(_DWORD *)(a1 + 8), (float *)&v2);
  return (float)(sqrtf((float)((float)(*(float *)&v2 * *(float *)&v2) + (float)(*((float *)&v2 + 1) * *((float *)&v2 + 1)))+ (float)(v3 * v3))* 180.0)/ 3.1416;
}

void sub_20AB93CB0(float *a1, unsigned int a2, float *a3)
{
  uint64_t v5;
  uint64_t v6;
  float v7;
  float32x2_t *v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  _BOOL4 v18;
  float v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float32x2_t v39;

  v5 = a2 + 2;
  v6 = (2 * a2) | 1;
  v7 = (float)(a1[v5] - a1[v6]) * 0.5;
  *a3 = v7;
  v8 = (float32x2_t *)&a1[2 * a2];
  v9 = (float)(v8->f32[0] - a1[2]) * 0.5;
  a3[1] = v9;
  v10 = (float)(a1[1] - a1[a2]) * 0.5;
  a3[2] = v10;
  v11 = a1[a2 + 1];
  v12 = *a1;
  v13 = a1[2 * a2 + 2];
  v14 = -1.0;
  v15 = (float)((float)((float)(*a1 + v11) + v13) + -1.0) * 0.5;
  v16 = (float)((float)(v9 * v9) + (float)(v7 * v7)) + (float)(v10 * v10);
  if (v15 >= -1.0 || (float)(v15 + 1.0) <= -0.00001)
  {
    v18 = v15 > 1.0;
    if ((float)(v15 + -1.0) >= 0.00001)
      v18 = 0;
    if (v15 <= 0.99 && !v18)
    {
      if (v15 <= -0.99)
      {
        v14 = (float)((float)((float)(*a1 + v11) + v13) + -1.0) * 0.5;
        goto LABEL_17;
      }
      v20 = acosf(v15) / sqrtf(v16);
      *a3 = v7 * v20;
      a3[1] = v9 * v20;
    }
    else
    {
      v20 = (float)(v16 * (float)((float)(v16 * (float)((float)((float)(v16 * 5.0) / 112.0) + 0.075)) + 0.16667)) + 1.0;
      *a3 = v7 * v20;
      a3[1] = v9 * v20;
    }
    a3[2] = v10 * v20;
    return;
  }
LABEL_17:
  v21 = a2;
  v22 = asinf(sqrtf(v16));
  v23 = (float)((float)(3.1416 - v22) * (float)(3.1416 - v22)) / (float)(1.0 - v14);
  v24 = (float)(v12 - v14) * v23;
  v25 = (float)(v11 - v14) * v23;
  v26 = (float)(v13 - v14) * v23;
  if (v24 <= v25)
  {
    v31 = v23 * 0.5;
    if (v25 <= v26)
    {
      v38 = sqrtf(v26);
      if (v10 < 0.0)
        v38 = -v38;
      a3[2] = v38;
      v39.f32[0] = a1[2];
      v39.f32[1] = a1[v5];
      *(float32x2_t *)a3 = vmul_n_f32(vmul_n_f32(vadd_f32(*v8, v39), v31), 1.0 / v38);
    }
    else
    {
      v32 = sqrtf(v25);
      if (v9 < 0.0)
        v32 = -v32;
      a3[1] = v32;
      v33 = 1.0 / v32;
      v34 = a1[v6] + a1[v5];
      *a3 = v33 * (float)(v31 * (float)(a1[v21] + a1[1]));
      a3[2] = v33 * (float)(v31 * v34);
    }
  }
  else
  {
    v27 = v23 * 0.5;
    v28 = v27 * (float)(v8->f32[0] + a1[2]);
    if (v24 <= v26)
    {
      v35 = sqrtf(v26);
      if (v10 < 0.0)
        v35 = -v35;
      a3[2] = v35;
      v36 = 1.0 / v35;
      v37 = v36 * (float)(v27 * (float)(a1[v6] + a1[v5]));
      *a3 = v36 * v28;
      a3[1] = v37;
    }
    else
    {
      v29 = sqrtf(v24);
      if (v7 < 0.0)
        v29 = -v29;
      *a3 = v29;
      v30 = 1.0 / v29;
      a3[1] = v30 * (float)(v27 * (float)(a1[v21] + a1[1]));
      a3[2] = v30 * v28;
    }
  }
}

float cva::SO3GroupStorage<float,cva::MatrixRef<float const,3u,3u,false>>::angleInRadians(uint64_t a1)
{
  uint64_t v2;
  float v3;

  v3 = 0.0;
  v2 = 0;
  sub_20AB93CB0(*(float **)a1, *(_DWORD *)(a1 + 8), (float *)&v2);
  return sqrtf((float)((float)(*(float *)&v2 * *(float *)&v2) + (float)(*((float *)&v2 + 1) * *((float *)&v2 + 1)))+ (float)(v3 * v3));
}

void cva::SO3GroupStorage<float,cva::MatrixRef<float const,3u,3u,false>>::log(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = 0;
  sub_20AB93CB0(*(float **)a1, *(_DWORD *)(a1 + 8), (float *)a2);
}

float *cva::SO3GroupStorage<float,cva::MatrixRef<float const,3u,3u,false>>::transform@<X0>(float *a1@<X0>, float *a2@<X1>, uint64_t a3@<X8>)
{
  float *v4[2];

  v4[0] = a1;
  v4[1] = a2;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  return sub_20AB94090((float *)a3, v4);
}

float *sub_20AB94090(float *result, float **a2)
{
  float *v2;
  uint64_t v3;
  float *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  float *v10;
  float v11;
  uint64_t v12;
  float v13;
  float *v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  uint64_t v20;
  int v21;

  v2 = result;
  v3 = *(_QWORD *)*a2;
  if ((float *)(v3 - 4 * *((unsigned int *)*a2 + 3)) == result || (v4 = a2[1], v4 == result))
  {
    v21 = 0;
    v20 = 0;
    result = (float *)sub_20AB94090(&v20);
    *(_QWORD *)v2 = v20;
    *((_DWORD *)v2 + 2) = v21;
  }
  else
  {
    v5 = *((unsigned int *)*a2 + 2);
    if ((_DWORD)v5)
    {
      v6 = 0;
      v7 = 4 * (3 * v5);
      v8 = 4 * v5;
      v9 = 0.0;
      v10 = a2[1];
      do
      {
        v11 = *v10++;
        v9 = v9 + (float)(*(float *)(v3 + v6) * v11);
        v6 += v8;
      }
      while (v7 != v6);
      v12 = 0;
      *result = v9;
      v13 = 0.0;
      v14 = v4;
      do
      {
        v15 = *v14++;
        v13 = v13 + (float)(*(float *)(v3 + 4 + v12) * v15);
        v12 += v8;
      }
      while (v7 != v12);
      v16 = 0;
      result[1] = v13;
      v17 = v3 + 8;
      v18 = 0.0;
      do
      {
        v19 = *v4++;
        v18 = v18 + (float)(*(float *)(v17 + v16) * v19);
        v16 += v8;
      }
      while (v7 != v16);
    }
    else
    {
      *(_QWORD *)result = 0;
      v18 = 0.0;
    }
    result[2] = v18;
  }
  return result;
}

float *cva::SO3GroupStorage<float,cva::MatrixRef<float const,3u,3u,false>>::inverseTransform@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t *v5[2];

  v4 = a1;
  v5[0] = &v4;
  v5[1] = a2;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  return sub_20AB941D0((float *)a3, v5);
}

float *sub_20AB941D0(float *result, uint64_t **a2)
{
  float *v2;
  float *v3;
  uint64_t v4;
  float *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v2 = result;
  v3 = (float *)a2[1];
  if (v3 == result)
  {
    v8 = 0;
    v7 = 0;
    result = (float *)sub_20AB941D0(&v7);
    *(_QWORD *)v2 = v7;
    *((_DWORD *)v2 + 2) = v8;
  }
  else
  {
    v4 = **a2;
    v5 = *(float **)v4;
    v6 = *(unsigned int *)(v4 + 8);
    *result = (float)((float)((float)(v5[1] * v3[1]) + (float)(*v5 * *v3)) + 0.0) + (float)(v5[2] * v3[2]);
    result[1] = (float)((float)((float)(v5[v6 + 1] * v3[1]) + (float)(v5[v6] * *v3)) + 0.0)
              + (float)(v5[(v6 + 2)] * v3[2]);
    result[2] = (float)((float)((float)(v5[(2 * v6) + 1] * v3[1])
                              + (float)(v5[(2 * v6)] * *v3))
                      + 0.0)
              + (float)(v5[(2 * v6 + 2)] * v3[2]);
  }
  return result;
}

float cva::SO3GroupStorage<float,cva::MatrixRef<float const,3u,3u,false>>::transformJacobian@<S0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  float result;
  float v3;
  float v4;
  float v5;

  *(_DWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v3 = *(float *)(a1 + 4);
  result = *(float *)(a1 + 8);
  v4 = *(float *)a1;
  if (a1 == a2)
  {
    v5 = -*(float *)a1;
    *(_DWORD *)a1 = 0;
    *(float *)(a1 + 4) = -result;
    *(float *)(a1 + 8) = v3;
    *(float *)(a1 + 12) = result;
    *(_DWORD *)(a1 + 16) = 0;
    *(float *)(a1 + 20) = v5;
    *(float *)(a1 + 24) = -v3;
    *(float *)(a1 + 28) = v4;
    *(_DWORD *)(a1 + 32) = 0;
  }
  else
  {
    *(float *)(a2 + 4) = -result;
    *(float *)(a2 + 8) = v3;
    *(float *)(a2 + 12) = result;
    result = -v4;
    *(float *)(a2 + 20) = -v4;
    *(float *)(a2 + 24) = -v3;
    *(float *)(a2 + 28) = v4;
  }
  return result;
}

float cva::SO3GroupStorage<float,cva::MatrixRef<float const,3u,3u,false>>::inverseTransformJacobian@<S0>(uint64_t a1@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  float v3;
  float v4;
  float v5;
  uint64_t v6;
  float *v7;
  float v8;
  float v9;
  float v10;
  float *v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float result;
  float v24;
  float v25;

  v3 = **(float **)a1;
  v4 = *(float *)(*(_QWORD *)a1 + 4);
  v5 = *(float *)(*(_QWORD *)a1 + 8);
  v6 = (*(_DWORD *)(a1 + 8) - 3);
  v7 = (float *)(*(_QWORD *)a1 + v6 * 4);
  v8 = v7[3];
  v9 = v7[4];
  v7 += 3;
  v10 = v7[2];
  v11 = &v7[v6];
  v12 = v11[3];
  v13 = v11[4];
  v14 = v11[5];
  v16 = a2[1];
  v15 = a2[2];
  v17 = (float)(v4 * v15) - (float)(v5 * v16);
  v18 = (float)(v9 * v15) - (float)(v10 * v16);
  v19 = (float)(v13 * v15) - (float)(v14 * v16);
  v20 = (float)(v5 * *a2) - (float)(v3 * v15);
  v21 = (float)(v10 * *a2) - (float)(v8 * v15);
  v22 = (float)(v14 * *a2) - (float)(v12 * v15);
  result = (float)(v3 * v16) - (float)(v4 * *a2);
  v24 = (float)(v8 * v16) - (float)(v9 * *a2);
  v25 = v13 * *a2;
  *a3 = v17;
  a3[1] = v18;
  a3[2] = v19;
  a3[3] = v20;
  a3[4] = v21;
  a3[5] = v22;
  a3[6] = result;
  a3[7] = v24;
  a3[8] = (float)(v12 * v16) - v25;
  return result;
}

float cva::SO3GroupStorage<float,cva::MatrixRef<float const,3u,3u,false>>::logJacobian@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  return sub_20AB94408(*(float **)a1, *(_DWORD *)(a1 + 8), (float *)a2, (float *)(a2 + 12));
}

float sub_20AB94408(float *a1, unsigned int a2, float *a3, float *a4)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float cosval;
  float v14;
  __float2 v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float result;

  sub_20AB93CB0(a1, a2, a3);
  v6 = *a3;
  v7 = a3[1];
  v8 = a3[2];
  v9 = (float)((float)(v6 * v6) + (float)(v7 * v7)) + (float)(v8 * v8);
  if (v9 >= 0.0061)
  {
    v14 = sqrtf(v9);
    v15 = __sincosf_stret(v14);
    cosval = v15.__cosval;
    v12 = v15.__sinval / v14;
    v10 = (float)(1.0 / v9) * (float)(1.0 - v15.__cosval);
    v11 = (float)(1.0 / v9) * (float)(1.0 - (float)(v15.__sinval / v14));
  }
  else
  {
    v10 = 0.5 - (float)(v9 * (float)((float)(v9 / -720.0) + 0.041667));
    v11 = 0.16667 - (float)(v9 * (float)((float)(v9 / -5040.0) + 0.0083333));
    v12 = 1.0 - (float)(v9 * v11);
    cosval = 1.0 - (float)(v9 * v10);
  }
  v16 = (float)-(float)(v11 - (float)(v10 * 0.5)) / v12;
  v17 = (float)(v10 + (float)(v12 * -0.5)) / (float)(1.0 - cosval);
  if (cosval >= 0.9)
    v17 = v16;
  v18 = 1.0 - (float)(v9 * v17);
  v19 = v6 * v17;
  v20 = v17 * v7;
  *a4 = v18 + (float)((float)(v6 * v17) * v6);
  a4[4] = v18 + (float)((float)(v17 * v7) * a3[1]);
  a4[8] = v18 + (float)((float)(v17 * v8) * a3[2]);
  v21 = a3[1];
  v22 = v19 * v21;
  v23 = a3[2];
  v24 = v19 * v23;
  v25 = v20 * v23;
  v26 = *a3 * -0.5;
  v27 = v21 * -0.5;
  a4[6] = v27 + v24;
  a4[7] = v25 - v26;
  a4[1] = v22 + (float)(v23 * -0.5);
  a4[2] = v24 - v27;
  a4[3] = v22 - (float)(v23 * -0.5);
  result = v25 + v26;
  a4[5] = v25 + v26;
  return result;
}

float cva::SO3GroupStorage<float,cva::MatrixRef<float const,3u,3u,false>>::inverse@<S0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  float result;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;

  v2 = a1[2];
  result = *(float *)(*(_QWORD *)a1 + 4 * v2);
  v4 = *(_DWORD *)(*(_QWORD *)a1 + 4 * (2 * v2));
  v5 = *(_DWORD *)(*(_QWORD *)a1 + 4);
  v6 = *(_DWORD *)(*(_QWORD *)a1 + 4 * (v2 + 1));
  v7 = *(_DWORD *)(*(_QWORD *)a1 + 4 * ((2 * (_DWORD)v2) | 1u));
  v8 = *(_DWORD *)(*(_QWORD *)a1 + 8);
  v9 = *(_DWORD *)(*(_QWORD *)a1 + 4 * (v2 + 2));
  v10 = *(_DWORD *)(*(_QWORD *)a1 + 4 * (2 * v2 + 2));
  *(_DWORD *)a2 = **(_DWORD **)a1;
  *(float *)(a2 + 4) = result;
  *(_DWORD *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 12) = v5;
  *(_DWORD *)(a2 + 16) = v6;
  *(_DWORD *)(a2 + 20) = v7;
  *(_DWORD *)(a2 + 24) = v8;
  *(_DWORD *)(a2 + 28) = v9;
  *(_DWORD *)(a2 + 32) = v10;
  return result;
}

int **cva::SO3GroupStorage<float,cva::MatrixRef<float const,3u,3u,false>>::adjoint@<X0>(int **result@<X0>, uint64_t a2@<X8>)
{
  int *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int *v6;
  int v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  int v12;
  int *v13;
  int v14;
  uint64_t v15;

  *(_DWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v2 = *result;
  v3 = (*((_DWORD *)result + 2) - 3);
  v4 = **result;
  if (&(*result)[-*((unsigned int *)result + 3)] == (int *)a2)
  {
    v9 = v3;
    v10 = *(_QWORD *)&v2[v9 + 3];
    *(_QWORD *)&v11 = *(_QWORD *)(v2 + 1);
    v12 = v2[v9 + 5];
    v13 = &v2[v9 + 3 + v9];
    v14 = v13[5];
    *((_QWORD *)&v11 + 1) = v10;
    v15 = *(_QWORD *)(v13 + 3);
    *(_DWORD *)a2 = v4;
    *(_OWORD *)(a2 + 4) = v11;
    *(_DWORD *)(a2 + 20) = v12;
    *(_QWORD *)(a2 + 24) = v15;
    *(_DWORD *)(a2 + 32) = v14;
  }
  else
  {
    *(_DWORD *)a2 = v4;
    *(_DWORD *)(a2 + 4) = v2[1];
    *(_DWORD *)(a2 + 8) = v2[2];
    v5 = v3;
    v6 = &v2[v5];
    v7 = v6[3];
    v6 += 3;
    *(_DWORD *)(a2 + 12) = v7;
    *(_DWORD *)(a2 + 16) = v6[1];
    *(_DWORD *)(a2 + 20) = v6[2];
    v8 = &v6[v5];
    *(_DWORD *)(a2 + 24) = v8[3];
    *(_DWORD *)(a2 + 28) = v8[4];
    *(_DWORD *)(a2 + 32) = v8[5];
  }
  return result;
}

uint64_t cva::SO3GroupStorage<float,cva::MatrixRef<float const,3u,3u,false>>::serialize(uint64_t result)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_DWORD *)(result + 8);
  if (v1)
  {
    v2 = *(_QWORD *)result;
    v3 = *(_QWORD *)result + 4 * (3 * v1);
    v4 = (unint64_t)(v1 - 3) << 32;
    do
    {
      result = std::ostream::write();
      v5 = HIDWORD(v4);
      if ((int)v4 < 2)
        v5 = 0;
      v6 = v2 + 4 * v5;
      v7 = (v4 + 1);
      if ((int)v4 >= 2)
        v7 = 0;
      v4 = v7 | v4 & 0xFFFFFFFF00000000;
      v2 = v6 + 4;
    }
    while (v6 + 4 != v3);
  }
  return result;
}

double cva::SO3GroupStorage<double,cva::MatrixRef<double const,3u,3u,false>>::SO3GroupStorage(_QWORD *a1, uint64_t a2)
{
  double result;

  *a1 = a2;
  *(_QWORD *)&result = 3;
  a1[1] = 3;
  return result;
}

{
  double result;

  *a1 = a2;
  *(_QWORD *)&result = 3;
  a1[1] = 3;
  return result;
}

double cva::SO3GroupStorage<double,cva::MatrixRef<double const,3u,3u,false>>::angleInDegrees(uint64_t a1)
{
  double v2;
  double v3;
  double v4;

  v2 = 0.0;
  v3 = 0.0;
  v4 = 0.0;
  sub_20AB947E0(*(double **)a1, *(_DWORD *)(a1 + 8), &v2);
  return sqrt(v2 * v2 + v3 * v3 + v4 * v4) * 180.0 / 3.14159265;
}

void sub_20AB947E0(double *a1, unsigned int a2, double *a3)
{
  uint64_t v5;
  uint64_t v6;
  double v7;
  float64x2_t *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  _BOOL4 v17;
  double v19;
  uint64_t v20;
  long double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  float64x2_t v38;

  v5 = a2 + 2;
  v6 = (2 * a2) | 1;
  v7 = (a1[v5] - a1[v6]) * 0.5;
  *a3 = v7;
  v8 = (float64x2_t *)&a1[2 * a2];
  v9 = (v8->f64[0] - a1[2]) * 0.5;
  a3[1] = v9;
  v10 = (a1[1] - a1[a2]) * 0.5;
  a3[2] = v10;
  v11 = *a1;
  v12 = a1[a2 + 1];
  v13 = a1[2 * a2 + 2];
  v14 = -1.0;
  v15 = (*a1 + v12 + v13 + -1.0) * 0.5;
  v16 = v9 * v9 + v7 * v7 + v10 * v10;
  if (v15 >= -1.0 || v15 + 1.0 <= -0.00001)
  {
    v17 = v15 > 1.0;
    if (v15 + -1.0 >= 0.00001)
      v17 = 0;
    if (v15 > 0.99 || v17)
    {
      v19 = v16 * (v16 * (v16 * 5.0 / 112.0 + 0.075) + 0.166666667) + 1.0;
LABEL_12:
      *a3 = v7 * v19;
      a3[1] = v9 * v19;
      a3[2] = v10 * v19;
      return;
    }
    if (v15 > -0.99)
    {
      v19 = acos(v15) / sqrt(v16);
      goto LABEL_12;
    }
    v14 = (*a1 + v12 + v13 + -1.0) * 0.5;
  }
  v20 = a2;
  v21 = asin(sqrt(v16));
  v22 = (3.14159265 - v21) * (3.14159265 - v21) / (1.0 - v14);
  v23 = (v11 - v14) * v22;
  v24 = (v12 - v14) * v22;
  v25 = (v13 - v14) * v22;
  if (v23 <= v24)
  {
    v30 = v22 * 0.5;
    if (v24 <= v25)
    {
      v37 = sqrt(v25);
      if (v10 < 0.0)
        v37 = -v37;
      a3[2] = v37;
      v38.f64[0] = a1[2];
      v38.f64[1] = a1[v5];
      *(float64x2_t *)a3 = vmulq_n_f64(vmulq_n_f64(vaddq_f64(*v8, v38), v30), 1.0 / v37);
    }
    else
    {
      v31 = sqrt(v24);
      if (v9 < 0.0)
        v31 = -v31;
      a3[1] = v31;
      v32 = 1.0 / v31;
      v33 = a1[v6] + a1[v5];
      *a3 = v32 * (v30 * (a1[v20] + a1[1]));
      a3[2] = v32 * (v30 * v33);
    }
  }
  else
  {
    v26 = v22 * 0.5;
    v27 = v26 * (v8->f64[0] + a1[2]);
    if (v23 <= v25)
    {
      v34 = sqrt(v25);
      if (v10 < 0.0)
        v34 = -v34;
      a3[2] = v34;
      v35 = 1.0 / v34;
      v36 = v35 * (v26 * (a1[v6] + a1[v5]));
      *a3 = v35 * v27;
      a3[1] = v36;
    }
    else
    {
      v28 = sqrt(v23);
      if (v7 < 0.0)
        v28 = -v28;
      *a3 = v28;
      v29 = 1.0 / v28;
      a3[1] = v29 * (v26 * (a1[v20] + a1[1]));
      a3[2] = v29 * v27;
    }
  }
}

double cva::SO3GroupStorage<double,cva::MatrixRef<double const,3u,3u,false>>::angleInRadians(uint64_t a1)
{
  double v2;
  double v3;
  double v4;

  v2 = 0.0;
  v3 = 0.0;
  v4 = 0.0;
  sub_20AB947E0(*(double **)a1, *(_DWORD *)(a1 + 8), &v2);
  return sqrt(v2 * v2 + v3 * v3 + v4 * v4);
}

void cva::SO3GroupStorage<double,cva::MatrixRef<double const,3u,3u,false>>::log(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  sub_20AB947E0(*(double **)a1, *(_DWORD *)(a1 + 8), (double *)a2);
}

double *cva::SO3GroupStorage<double,cva::MatrixRef<double const,3u,3u,false>>::transform@<X0>(double *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  double *v4[2];

  v4[0] = a1;
  v4[1] = a2;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  return sub_20AB94BA0((double *)a3, v4);
}

double *sub_20AB94BA0(double *result, double **a2)
{
  double *v2;
  uint64_t v3;
  double *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double *v10;
  double v11;
  uint64_t v12;
  double v13;
  double *v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  __int128 v20;
  uint64_t v21;

  v2 = result;
  v3 = *(_QWORD *)*a2;
  if ((double *)(v3 - 8 * *((unsigned int *)*a2 + 3)) == result || (v4 = a2[1], v4 == result))
  {
    v20 = 0uLL;
    v21 = 0;
    result = (double *)sub_20AB94BA0(&v20);
    *(_OWORD *)v2 = v20;
    *((_QWORD *)v2 + 2) = v21;
  }
  else
  {
    v5 = *((unsigned int *)*a2 + 2);
    if ((_DWORD)v5)
    {
      v6 = 0;
      v7 = 8 * (3 * v5);
      v8 = 8 * v5;
      v9 = 0.0;
      v10 = a2[1];
      do
      {
        v11 = *v10++;
        v9 = v9 + *(double *)(v3 + v6) * v11;
        v6 += v8;
      }
      while (v7 != v6);
      v12 = 0;
      *result = v9;
      v13 = 0.0;
      v14 = v4;
      do
      {
        v15 = *v14++;
        v13 = v13 + *(double *)(v3 + 8 + v12) * v15;
        v12 += v8;
      }
      while (v7 != v12);
      v16 = 0;
      result[1] = v13;
      v17 = v3 + 16;
      v18 = 0.0;
      do
      {
        v19 = *v4++;
        v18 = v18 + *(double *)(v17 + v16) * v19;
        v16 += v8;
      }
      while (v7 != v16);
    }
    else
    {
      *result = 0.0;
      result[1] = 0.0;
      v18 = 0.0;
    }
    result[2] = v18;
  }
  return result;
}

double cva::SO3GroupStorage<double,cva::MatrixRef<double const,3u,3u,false>>::inverseTransform@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t *v5[2];

  v4 = a1;
  v5[0] = &v4;
  v5[1] = a2;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  return sub_20AB94CE0((uint64_t)a3, v5);
}

double sub_20AB94CE0(uint64_t a1, uint64_t **a2)
{
  double *v3;
  uint64_t v4;
  double *v5;
  uint64_t v6;
  double result;
  __int128 v8;
  uint64_t v9;

  v3 = (double *)a2[1];
  if (v3 == (double *)a1)
  {
    v8 = 0uLL;
    v9 = 0;
    sub_20AB94CE0(&v8);
    result = *(double *)&v8;
    *(_OWORD *)a1 = v8;
    *(_QWORD *)(a1 + 16) = v9;
  }
  else
  {
    v4 = **a2;
    v5 = *(double **)v4;
    v6 = *(unsigned int *)(v4 + 8);
    *(double *)a1 = v5[1] * v3[1] + *v5 * *v3 + 0.0 + v5[2] * v3[2];
    *(double *)(a1 + 8) = v5[v6 + 1] * v3[1] + v5[v6] * *v3 + 0.0 + v5[(v6 + 2)] * v3[2];
    result = v5[(2 * v6) + 1] * v3[1]
           + v5[(2 * v6)] * *v3
           + 0.0
           + v5[(2 * v6 + 2)] * v3[2];
    *(double *)(a1 + 16) = result;
  }
  return result;
}

double cva::SO3GroupStorage<double,cva::MatrixRef<double const,3u,3u,false>>::transformJacobian@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  double result;
  double v3;
  double v4;
  double v5;

  *(_QWORD *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v3 = *(double *)(a1 + 8);
  result = *(double *)(a1 + 16);
  v4 = *(double *)a1;
  if (a1 == a2)
  {
    v5 = -*(double *)a1;
    *(_QWORD *)a1 = 0;
    *(double *)(a1 + 8) = -result;
    *(double *)(a1 + 16) = v3;
    *(double *)(a1 + 24) = result;
    *(_QWORD *)(a1 + 32) = 0;
    *(double *)(a1 + 40) = v5;
    *(double *)(a1 + 48) = -v3;
    *(double *)(a1 + 56) = v4;
    *(_QWORD *)(a1 + 64) = 0;
  }
  else
  {
    *(double *)(a2 + 8) = -result;
    *(double *)(a2 + 16) = v3;
    *(double *)(a2 + 24) = result;
    result = -v4;
    *(double *)(a2 + 40) = -v4;
    *(double *)(a2 + 48) = -v3;
    *(double *)(a2 + 56) = v4;
  }
  return result;
}

double cva::SO3GroupStorage<double,cva::MatrixRef<double const,3u,3u,false>>::inverseTransformJacobian@<D0>(uint64_t a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  double v3;
  double v4;
  double v5;
  uint64_t v6;
  double *v7;
  double v8;
  double v9;
  double v10;
  double *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double result;
  double v24;
  double v25;

  v3 = **(double **)a1;
  v4 = *(double *)(*(_QWORD *)a1 + 8);
  v5 = *(double *)(*(_QWORD *)a1 + 16);
  v6 = (*(_DWORD *)(a1 + 8) - 3);
  v7 = (double *)(*(_QWORD *)a1 + v6 * 8);
  v8 = v7[3];
  v9 = v7[4];
  v7 += 3;
  v10 = v7[2];
  v11 = &v7[v6];
  v12 = v11[3];
  v13 = v11[4];
  v14 = v11[5];
  v16 = a2[1];
  v15 = a2[2];
  v17 = v4 * v15 - v5 * v16;
  v18 = v9 * v15 - v10 * v16;
  v19 = v13 * v15 - v14 * v16;
  v20 = v5 * *a2 - v3 * v15;
  v21 = v10 * *a2 - v8 * v15;
  v22 = v14 * *a2 - v12 * v15;
  result = v3 * v16 - v4 * *a2;
  v24 = v8 * v16 - v9 * *a2;
  v25 = v13 * *a2;
  *a3 = v17;
  a3[1] = v18;
  a3[2] = v19;
  a3[3] = v20;
  a3[4] = v21;
  a3[5] = v22;
  a3[6] = result;
  a3[7] = v24;
  a3[8] = v12 * v16 - v25;
  return result;
}

double cva::SO3GroupStorage<double,cva::MatrixRef<double const,3u,3u,false>>::logJacobian@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return sub_20AB94F20(*(double **)a1, *(_DWORD *)(a1 + 8), (double *)a2, (double *)(a2 + 24));
}

double sub_20AB94F20(double *a1, unsigned int a2, double *a3, double *a4)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double cosval;
  double v14;
  __double2 v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double result;

  sub_20AB947E0(a1, a2, a3);
  v6 = *a3;
  v7 = a3[1];
  v8 = a3[2];
  v9 = v6 * v6 + v7 * v7 + v8 * v8;
  if (v9 >= 0.0000002635)
  {
    v14 = sqrt(v9);
    v15 = __sincos_stret(v14);
    cosval = v15.__cosval;
    v12 = v15.__sinval / v14;
    v10 = 1.0 / v9 * (1.0 - v15.__cosval);
    v11 = 1.0 / v9 * (1.0 - v15.__sinval / v14);
  }
  else
  {
    v10 = 0.5 - v9 * (v9 / -720.0 + 0.0416666667);
    v11 = 0.166666667 - v9 * (v9 / -5040.0 + 0.00833333333);
    v12 = 1.0 - v9 * v11;
    cosval = 1.0 - v9 * v10;
  }
  v16 = -(v11 - v10 * 0.5) / v12;
  v17 = (v10 + v12 * -0.5) / (1.0 - cosval);
  if (cosval >= 0.9)
    v17 = v16;
  v18 = 1.0 - v9 * v17;
  v19 = v6 * v17;
  v20 = v17 * v7;
  *a4 = v18 + v6 * v17 * v6;
  a4[4] = v18 + v17 * v7 * a3[1];
  a4[8] = v18 + v17 * v8 * a3[2];
  v21 = a3[1];
  v22 = v19 * v21;
  v23 = a3[2];
  v24 = v19 * v23;
  v25 = v20 * v23;
  v26 = *a3 * -0.5;
  v27 = v21 * -0.5;
  a4[6] = v27 + v24;
  a4[7] = v25 - v26;
  a4[1] = v22 + v23 * -0.5;
  a4[2] = v24 - v27;
  a4[3] = v22 - v23 * -0.5;
  result = v25 + v26;
  a4[5] = v25 + v26;
  return result;
}

double cva::SO3GroupStorage<double,cva::MatrixRef<double const,3u,3u,false>>::inverse@<D0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = a1[2];
  result = *(double *)(*(_QWORD *)a1 + 8 * v2);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 8 * (2 * v2));
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 8 * (v2 + 1));
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 8 * ((2 * (_DWORD)v2) | 1u));
  v8 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v9 = *(_QWORD *)(*(_QWORD *)a1 + 8 * (v2 + 2));
  v10 = *(_QWORD *)(*(_QWORD *)a1 + 8 * (2 * v2 + 2));
  *(_QWORD *)a2 = **(_QWORD **)a1;
  *(double *)(a2 + 8) = result;
  *(_QWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = v5;
  *(_QWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 40) = v7;
  *(_QWORD *)(a2 + 48) = v8;
  *(_QWORD *)(a2 + 56) = v9;
  *(_QWORD *)(a2 + 64) = v10;
  return result;
}

uint64_t **cva::SO3GroupStorage<double,cva::MatrixRef<double const,3u,3u,false>>::adjoint@<X0>(uint64_t **result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;

  *(_QWORD *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v2 = *result;
  v3 = (*((_DWORD *)result + 2) - 3);
  v4 = **result;
  if (&(*result)[-*((unsigned int *)result + 3)] == (uint64_t *)a2)
  {
    v9 = v3;
    v10 = *(_OWORD *)&v2[v9 + 3];
    v11 = v2[v9 + 5];
    v12 = &v2[v9 + 3 + v9];
    v13 = v12[5];
    v14 = *(_OWORD *)(v2 + 1);
    v15 = *(_OWORD *)(v12 + 3);
    *(_QWORD *)a2 = v4;
    *(_OWORD *)(a2 + 8) = v14;
    *(_OWORD *)(a2 + 24) = v10;
    *(_QWORD *)(a2 + 40) = v11;
    *(_OWORD *)(a2 + 48) = v15;
    *(_QWORD *)(a2 + 64) = v13;
  }
  else
  {
    *(_QWORD *)a2 = v4;
    *(_QWORD *)(a2 + 8) = v2[1];
    *(_QWORD *)(a2 + 16) = v2[2];
    v5 = v3;
    v6 = &v2[v5];
    v7 = v6[3];
    v6 += 3;
    *(_QWORD *)(a2 + 24) = v7;
    *(_QWORD *)(a2 + 32) = v6[1];
    *(_QWORD *)(a2 + 40) = v6[2];
    v8 = &v6[v5];
    *(_QWORD *)(a2 + 48) = v8[3];
    *(_QWORD *)(a2 + 56) = v8[4];
    *(_QWORD *)(a2 + 64) = v8[5];
  }
  return result;
}

uint64_t cva::SO3GroupStorage<double,cva::MatrixRef<double const,3u,3u,false>>::serialize(uint64_t result)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_DWORD *)(result + 8);
  if (v1)
  {
    v2 = *(_QWORD *)result;
    v3 = *(_QWORD *)result + 8 * (3 * v1);
    v4 = (unint64_t)(v1 - 3) << 32;
    do
    {
      result = std::ostream::write();
      v5 = HIDWORD(v4);
      if ((int)v4 < 2)
        v5 = 0;
      v6 = v2 + 8 * v5;
      v7 = (v4 + 1);
      if ((int)v4 >= 2)
        v7 = 0;
      v4 = v7 | v4 & 0xFFFFFFFF00000000;
      v2 = v6 + 8;
    }
    while (v6 + 8 != v3);
  }
  return result;
}

float cva::SO3AlgebraStorage<float,cva::Matrix<float,3u,1u,false>>::adjoint@<S0>(float *a1@<X0>, uint64_t a2@<X8>)
{
  float result;
  float v3;
  float v4;
  float v5;

  result = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = -*a1;
  *(_DWORD *)a2 = 0;
  *(float *)(a2 + 4) = v4;
  *(float *)(a2 + 8) = -v3;
  *(float *)(a2 + 12) = -v4;
  *(_DWORD *)(a2 + 16) = 0;
  *(float *)(a2 + 20) = result;
  *(float *)(a2 + 24) = v3;
  *(float *)(a2 + 28) = v5;
  *(_DWORD *)(a2 + 32) = 0;
  return result;
}

float cva::SO3AlgebraStorage<float,cva::Matrix<float,3u,1u,false>>::hat@<S0>(float *a1@<X0>, uint64_t a2@<X8>)
{
  float result;
  float v3;
  float v4;
  float v5;

  result = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = -*a1;
  *(_DWORD *)a2 = 0;
  *(float *)(a2 + 4) = v4;
  *(float *)(a2 + 8) = -v3;
  *(float *)(a2 + 12) = -v4;
  *(_DWORD *)(a2 + 16) = 0;
  *(float *)(a2 + 20) = result;
  *(float *)(a2 + 24) = v3;
  *(float *)(a2 + 28) = v5;
  *(_DWORD *)(a2 + 32) = 0;
  return result;
}

float cva::SO3AlgebraStorage<float,cva::Matrix<float,3u,1u,false>>::exp@<S0>(float *a1@<X0>, float *a2@<X8>, float a3@<S0>)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float cosval;
  float v11;
  __float2 v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float result;

  v4 = *a1 * a3;
  v5 = a1[1] * a3;
  v6 = a1[2] * a3;
  v7 = (float)((float)(v4 * v4) + (float)(v5 * v5)) + (float)(v6 * v6);
  if (v7 >= 0.0061)
  {
    v11 = sqrtf(v7);
    v12 = __sincosf_stret(v11);
    cosval = v12.__cosval;
    v9 = v12.__sinval / v11;
    v8 = (float)(1.0 / v7) * (float)(1.0 - v12.__cosval);
  }
  else
  {
    v8 = 0.5 - (float)(v7 * (float)((float)(v7 / -720.0) + 0.041667));
    v9 = 1.0 - (float)(v7 * (float)(0.16667 - (float)(v7 * (float)((float)(v7 / -5040.0) + 0.0083333))));
    cosval = 1.0 - (float)(v7 * v8);
  }
  v13 = v4 * v8;
  v14 = v5 * v8;
  v15 = cosval + (float)((float)(v4 * v8) * v4);
  v16 = cosval + (float)((float)(v6 * v8) * v6);
  v17 = cosval + (float)(v14 * v5);
  a2[8] = v16;
  v18 = v5 * v13;
  v19 = v6 * v13;
  v20 = v6 * v14;
  v21 = v4 * v9;
  v22 = v5 * v9;
  v23 = v6 * v9;
  *a2 = v15;
  a2[1] = v18 + v23;
  a2[6] = v22 + v19;
  a2[7] = v20 - v21;
  a2[2] = v19 - v22;
  a2[3] = v18 - v23;
  result = v20 + v21;
  a2[4] = v17;
  a2[5] = v20 + v21;
  return result;
}

float cva::SO3AlgebraStorage<float,cva::Matrix<float,3u,1u,false>>::expJacobian@<S0>(float *a1@<X0>, float *a2@<X8>)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float cosval;
  float v11;
  __float2 v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float result;

  v4 = *a1;
  v3 = a1[1];
  v5 = a1[2];
  v6 = (float)((float)(v4 * v4) + (float)(v3 * v3)) + (float)(v5 * v5);
  if (v6 >= 0.0061)
  {
    v11 = sqrtf(v6);
    v12 = __sincosf_stret(v11);
    cosval = v12.__cosval;
    v9 = v12.__sinval / v11;
    v7 = (float)(1.0 / v6) * (float)(1.0 - v12.__cosval);
    v8 = (float)(1.0 / v6) * (float)(1.0 - (float)(v12.__sinval / v11));
  }
  else
  {
    v7 = 0.5 - (float)(v6 * (float)((float)(v6 / -720.0) + 0.041667));
    v8 = 0.16667 - (float)(v6 * (float)((float)(v6 / -5040.0) + 0.0083333));
    v9 = 1.0 - (float)(v6 * v8);
    cosval = 1.0 - (float)(v6 * v7);
  }
  v13 = v4 * v7;
  v14 = v7 * v3;
  v15 = v7 * v5;
  *a2 = cosval + (float)(v13 * v4);
  a2[1] = (float)(v13 * v3) + (float)(v9 * v5);
  a2[6] = (float)(v9 * v3) + (float)(v13 * v5);
  a2[7] = (float)(v14 * v5) - (float)(v9 * v4);
  a2[2] = (float)(v13 * v5) - (float)(v9 * v3);
  a2[3] = (float)(v13 * v3) - (float)(v9 * v5);
  a2[4] = cosval + (float)(v14 * v3);
  a2[5] = (float)(v14 * v5) + (float)(v9 * v4);
  v16 = v8 * v4;
  v17 = v8 * v3;
  a2[8] = cosval + (float)(v15 * v5);
  a2[9] = v9 + (float)((float)(v8 * v4) * v4);
  v18 = v9 + (float)((float)(v8 * v3) * v3);
  v19 = v9 + (float)((float)(v8 * v5) * v5);
  v20 = (float)(v8 * v4) * v3;
  v21 = v16 * v5;
  v22 = v17 * v5;
  a2[12] = v20 - v15;
  a2[13] = v18;
  a2[16] = v22 - v13;
  a2[17] = v19;
  a2[10] = v20 + v15;
  a2[11] = v21 - v14;
  result = v22 + v13;
  a2[14] = v22 + v13;
  a2[15] = v14 + v21;
  return result;
}

uint64_t cva::SO3AlgebraStorage<float,cva::Matrix<float,3u,1u,false>>::serialize()
{
  return std::ostream::write();
}

uint64_t cva::SO3AlgebraStorage<float,cva::Matrix<float,3u,1u,false>>::deserialize()
{
  return std::istream::read();
}

double cva::SO3AlgebraStorage<double,cva::Matrix<double,3u,1u,false>>::adjoint@<D0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  double v3;
  double v4;
  double v5;

  result = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = -*a1;
  *(_QWORD *)a2 = 0;
  *(double *)(a2 + 8) = v4;
  *(double *)(a2 + 16) = -v3;
  *(double *)(a2 + 24) = -v4;
  *(_QWORD *)(a2 + 32) = 0;
  *(double *)(a2 + 40) = result;
  *(double *)(a2 + 48) = v3;
  *(double *)(a2 + 56) = v5;
  *(_QWORD *)(a2 + 64) = 0;
  return result;
}

double cva::SO3AlgebraStorage<double,cva::Matrix<double,3u,1u,false>>::hat@<D0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  double v3;
  double v4;
  double v5;

  result = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = -*a1;
  *(_QWORD *)a2 = 0;
  *(double *)(a2 + 8) = v4;
  *(double *)(a2 + 16) = -v3;
  *(double *)(a2 + 24) = -v4;
  *(_QWORD *)(a2 + 32) = 0;
  *(double *)(a2 + 40) = result;
  *(double *)(a2 + 48) = v3;
  *(double *)(a2 + 56) = v5;
  *(_QWORD *)(a2 + 64) = 0;
  return result;
}

double cva::SO3AlgebraStorage<double,cva::Matrix<double,3u,1u,false>>::exp@<D0>(double *a1@<X0>, double *a2@<X8>, double a3@<D0>)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double cosval;
  double v11;
  __double2 v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double result;

  v4 = *a1 * a3;
  v5 = a1[1] * a3;
  v6 = a1[2] * a3;
  v7 = v4 * v4 + v5 * v5 + v6 * v6;
  if (v7 >= 0.0000002635)
  {
    v11 = sqrt(v7);
    v12 = __sincos_stret(v11);
    cosval = v12.__cosval;
    v9 = v12.__sinval / v11;
    v8 = 1.0 / v7 * (1.0 - v12.__cosval);
  }
  else
  {
    v8 = 0.5 - v7 * (v7 / -720.0 + 0.0416666667);
    v9 = 1.0 - v7 * (0.166666667 - v7 * (v7 / -5040.0 + 0.00833333333));
    cosval = 1.0 - v7 * v8;
  }
  v13 = v4 * v8;
  v14 = v5 * v8;
  v15 = cosval + v4 * v8 * v4;
  v16 = cosval + v6 * v8 * v6;
  v17 = cosval + v14 * v5;
  a2[8] = v16;
  v18 = v5 * v13;
  v19 = v6 * v13;
  v20 = v6 * v14;
  v21 = v4 * v9;
  v22 = v5 * v9;
  v23 = v6 * v9;
  *a2 = v15;
  a2[1] = v18 + v23;
  a2[6] = v22 + v19;
  a2[7] = v20 - v21;
  a2[2] = v19 - v22;
  a2[3] = v18 - v23;
  result = v20 + v21;
  a2[4] = v17;
  a2[5] = v20 + v21;
  return result;
}

double cva::SO3AlgebraStorage<double,cva::Matrix<double,3u,1u,false>>::expJacobian@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double cosval;
  double v11;
  __double2 v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double result;

  v4 = *a1;
  v3 = a1[1];
  v5 = a1[2];
  v6 = v4 * v4 + v3 * v3 + v5 * v5;
  if (v6 >= 0.0000002635)
  {
    v11 = sqrt(v6);
    v12 = __sincos_stret(v11);
    cosval = v12.__cosval;
    v9 = v12.__sinval / v11;
    v7 = 1.0 / v6 * (1.0 - v12.__cosval);
    v8 = 1.0 / v6 * (1.0 - v12.__sinval / v11);
  }
  else
  {
    v7 = 0.5 - v6 * (v6 / -720.0 + 0.0416666667);
    v8 = 0.166666667 - v6 * (v6 / -5040.0 + 0.00833333333);
    v9 = 1.0 - v6 * v8;
    cosval = 1.0 - v6 * v7;
  }
  v13 = v4 * v7;
  v14 = v7 * v3;
  v15 = v7 * v5;
  *a2 = cosval + v13 * v4;
  a2[1] = v13 * v3 + v9 * v5;
  a2[6] = v9 * v3 + v13 * v5;
  a2[7] = v14 * v5 - v9 * v4;
  a2[2] = v13 * v5 - v9 * v3;
  a2[3] = v13 * v3 - v9 * v5;
  a2[4] = cosval + v14 * v3;
  a2[5] = v14 * v5 + v9 * v4;
  v16 = v8 * v4;
  v17 = v8 * v3;
  a2[8] = cosval + v15 * v5;
  a2[9] = v9 + v8 * v4 * v4;
  v18 = v9 + v8 * v3 * v3;
  v19 = v9 + v8 * v5 * v5;
  v20 = v8 * v4 * v3;
  v21 = v16 * v5;
  v22 = v17 * v5;
  a2[12] = v20 - v15;
  a2[13] = v18;
  a2[16] = v22 - v13;
  a2[17] = v19;
  a2[10] = v20 + v15;
  a2[11] = v21 - v14;
  result = v22 + v13;
  a2[14] = v22 + v13;
  a2[15] = v14 + v21;
  return result;
}

uint64_t cva::SO3AlgebraStorage<double,cva::Matrix<double,3u,1u,false>>::serialize()
{
  return std::ostream::write();
}

uint64_t cva::SO3AlgebraStorage<double,cva::Matrix<double,3u,1u,false>>::deserialize()
{
  return std::istream::read();
}

float cva::SO3AlgebraStorage<float,cva::MatrixRef<float const,3u,1u,false>>::adjoint@<S0>(float **a1@<X0>, uint64_t a2@<X8>)
{
  float result;
  float v3;
  float v4;

  result = **a1;
  v3 = (*a1)[1];
  v4 = (*a1)[2];
  *(_DWORD *)a2 = 0;
  *(float *)(a2 + 4) = v4;
  *(float *)(a2 + 8) = -v3;
  *(float *)(a2 + 12) = -v4;
  *(_DWORD *)(a2 + 16) = 0;
  *(float *)(a2 + 20) = result;
  *(float *)(a2 + 24) = v3;
  *(float *)(a2 + 28) = -result;
  *(_DWORD *)(a2 + 32) = 0;
  return result;
}

float cva::SO3AlgebraStorage<float,cva::MatrixRef<float const,3u,1u,false>>::hat@<S0>(float **a1@<X0>, uint64_t a2@<X8>)
{
  float result;
  float v3;
  float v4;

  result = **a1;
  v3 = (*a1)[1];
  v4 = (*a1)[2];
  *(_DWORD *)a2 = 0;
  *(float *)(a2 + 4) = v4;
  *(float *)(a2 + 8) = -v3;
  *(float *)(a2 + 12) = -v4;
  *(_DWORD *)(a2 + 16) = 0;
  *(float *)(a2 + 20) = result;
  *(float *)(a2 + 24) = v3;
  *(float *)(a2 + 28) = -result;
  *(_DWORD *)(a2 + 32) = 0;
  return result;
}

float cva::SO3AlgebraStorage<float,cva::MatrixRef<float const,3u,1u,false>>::exp@<S0>(uint64_t a1@<X0>, float *a2@<X8>, float a3@<S0>)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float cosval;
  float v11;
  __float2 v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float result;

  v4 = **(float **)a1 * a3;
  v5 = *(float *)(*(_QWORD *)a1 + 4) * a3;
  v6 = *(float *)(*(_QWORD *)a1 + 8) * a3;
  v7 = (float)((float)(v4 * v4) + (float)(v5 * v5)) + (float)(v6 * v6);
  if (v7 >= 0.0061)
  {
    v11 = sqrtf(v7);
    v12 = __sincosf_stret(v11);
    cosval = v12.__cosval;
    v9 = v12.__sinval / v11;
    v8 = (float)(1.0 / v7) * (float)(1.0 - v12.__cosval);
  }
  else
  {
    v8 = 0.5 - (float)(v7 * (float)((float)(v7 / -720.0) + 0.041667));
    v9 = 1.0 - (float)(v7 * (float)(0.16667 - (float)(v7 * (float)((float)(v7 / -5040.0) + 0.0083333))));
    cosval = 1.0 - (float)(v7 * v8);
  }
  v13 = v4 * v8;
  v14 = v8 * v5;
  v15 = cosval + (float)((float)(v4 * v8) * v4);
  v16 = cosval + (float)((float)(v8 * v6) * v6);
  v17 = cosval + (float)(v14 * v5);
  a2[8] = v16;
  v18 = v13 * v5;
  v19 = v13 * v6;
  v20 = v14 * v6;
  v21 = v4 * v9;
  v22 = v9 * v5;
  v23 = v9 * v6;
  *a2 = v15;
  a2[1] = v18 + v23;
  a2[6] = v22 + v19;
  a2[7] = v20 - v21;
  a2[2] = v19 - v22;
  a2[3] = v18 - v23;
  result = v21 + v20;
  a2[4] = v17;
  a2[5] = v21 + v20;
  return result;
}

float cva::SO3AlgebraStorage<float,cva::MatrixRef<float const,3u,1u,false>>::expJacobian@<S0>(float **a1@<X0>, float *a2@<X8>)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float cosval;
  float v11;
  __float2 v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float result;

  v4 = **a1;
  v3 = (*a1)[1];
  v5 = (*a1)[2];
  v6 = (float)((float)(v4 * v4) + (float)(v3 * v3)) + (float)(v5 * v5);
  if (v6 >= 0.0061)
  {
    v11 = sqrtf(v6);
    v12 = __sincosf_stret(v11);
    cosval = v12.__cosval;
    v9 = v12.__sinval / v11;
    v7 = (float)(1.0 / v6) * (float)(1.0 - v12.__cosval);
    v8 = (float)(1.0 / v6) * (float)(1.0 - (float)(v12.__sinval / v11));
  }
  else
  {
    v7 = 0.5 - (float)(v6 * (float)((float)(v6 / -720.0) + 0.041667));
    v8 = 0.16667 - (float)(v6 * (float)((float)(v6 / -5040.0) + 0.0083333));
    v9 = 1.0 - (float)(v6 * v8);
    cosval = 1.0 - (float)(v6 * v7);
  }
  v13 = v4 * v7;
  v14 = v3 * v7;
  v15 = v5 * v7;
  *a2 = cosval + (float)(v13 * v4);
  a2[1] = (float)(v13 * v3) + (float)(v9 * v5);
  a2[6] = (float)(v9 * v3) + (float)(v13 * v5);
  a2[7] = (float)(v14 * v5) - (float)(v9 * v4);
  a2[2] = (float)(v13 * v5) - (float)(v9 * v3);
  a2[3] = (float)(v13 * v3) - (float)(v9 * v5);
  a2[4] = cosval + (float)(v14 * v3);
  a2[5] = (float)(v14 * v5) + (float)(v9 * v4);
  v16 = v8 * v4;
  v17 = v8 * v3;
  a2[8] = cosval + (float)(v15 * v5);
  a2[9] = v9 + (float)((float)(v8 * v4) * v4);
  v18 = v9 + (float)((float)(v8 * v3) * v3);
  v19 = v9 + (float)((float)(v8 * v5) * v5);
  v20 = (float)(v8 * v4) * v3;
  v21 = v16 * v5;
  v22 = v17 * v5;
  a2[12] = v20 - v15;
  a2[13] = v18;
  a2[16] = v22 - v13;
  a2[17] = v19;
  a2[10] = v20 + v15;
  a2[11] = v21 - v14;
  result = v22 + v13;
  a2[14] = v22 + v13;
  a2[15] = v14 + v21;
  return result;
}

uint64_t cva::SO3AlgebraStorage<float,cva::MatrixRef<float const,3u,1u,false>>::serialize()
{
  return std::ostream::write();
}

double cva::SO3AlgebraStorage<double,cva::MatrixRef<double const,3u,1u,false>>::adjoint@<D0>(double **a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  double v3;
  double v4;

  result = **a1;
  v3 = (*a1)[1];
  v4 = (*a1)[2];
  *(_QWORD *)a2 = 0;
  *(double *)(a2 + 8) = v4;
  *(double *)(a2 + 16) = -v3;
  *(double *)(a2 + 24) = -v4;
  *(_QWORD *)(a2 + 32) = 0;
  *(double *)(a2 + 40) = result;
  *(double *)(a2 + 48) = v3;
  *(double *)(a2 + 56) = -result;
  *(_QWORD *)(a2 + 64) = 0;
  return result;
}

double cva::SO3AlgebraStorage<double,cva::MatrixRef<double const,3u,1u,false>>::hat@<D0>(double **a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  double v3;
  double v4;

  result = **a1;
  v3 = (*a1)[1];
  v4 = (*a1)[2];
  *(_QWORD *)a2 = 0;
  *(double *)(a2 + 8) = v4;
  *(double *)(a2 + 16) = -v3;
  *(double *)(a2 + 24) = -v4;
  *(_QWORD *)(a2 + 32) = 0;
  *(double *)(a2 + 40) = result;
  *(double *)(a2 + 48) = v3;
  *(double *)(a2 + 56) = -result;
  *(_QWORD *)(a2 + 64) = 0;
  return result;
}

double cva::SO3AlgebraStorage<double,cva::MatrixRef<double const,3u,1u,false>>::exp@<D0>(uint64_t a1@<X0>, double *a2@<X8>, double a3@<D0>)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double cosval;
  double v11;
  __double2 v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double result;

  v4 = **(double **)a1 * a3;
  v5 = *(double *)(*(_QWORD *)a1 + 8) * a3;
  v6 = *(double *)(*(_QWORD *)a1 + 16) * a3;
  v7 = v4 * v4 + v5 * v5 + v6 * v6;
  if (v7 >= 0.0000002635)
  {
    v11 = sqrt(v7);
    v12 = __sincos_stret(v11);
    cosval = v12.__cosval;
    v9 = v12.__sinval / v11;
    v8 = 1.0 / v7 * (1.0 - v12.__cosval);
  }
  else
  {
    v8 = 0.5 - v7 * (v7 / -720.0 + 0.0416666667);
    v9 = 1.0 - v7 * (0.166666667 - v7 * (v7 / -5040.0 + 0.00833333333));
    cosval = 1.0 - v7 * v8;
  }
  v13 = v4 * v8;
  v14 = v8 * v5;
  v15 = cosval + v4 * v8 * v4;
  v16 = cosval + v8 * v6 * v6;
  v17 = cosval + v14 * v5;
  a2[8] = v16;
  v18 = v13 * v5;
  v19 = v13 * v6;
  v20 = v14 * v6;
  v21 = v4 * v9;
  v22 = v9 * v5;
  v23 = v9 * v6;
  *a2 = v15;
  a2[1] = v18 + v23;
  a2[6] = v22 + v19;
  a2[7] = v20 - v21;
  a2[2] = v19 - v22;
  a2[3] = v18 - v23;
  result = v21 + v20;
  a2[4] = v17;
  a2[5] = v21 + v20;
  return result;
}

double cva::SO3AlgebraStorage<double,cva::MatrixRef<double const,3u,1u,false>>::expJacobian@<D0>(double **a1@<X0>, double *a2@<X8>)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double cosval;
  double v11;
  __double2 v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double result;

  v4 = **a1;
  v3 = (*a1)[1];
  v5 = (*a1)[2];
  v6 = v4 * v4 + v3 * v3 + v5 * v5;
  if (v6 >= 0.0000002635)
  {
    v11 = sqrt(v6);
    v12 = __sincos_stret(v11);
    cosval = v12.__cosval;
    v9 = v12.__sinval / v11;
    v7 = 1.0 / v6 * (1.0 - v12.__cosval);
    v8 = 1.0 / v6 * (1.0 - v12.__sinval / v11);
  }
  else
  {
    v7 = 0.5 - v6 * (v6 / -720.0 + 0.0416666667);
    v8 = 0.166666667 - v6 * (v6 / -5040.0 + 0.00833333333);
    v9 = 1.0 - v6 * v8;
    cosval = 1.0 - v6 * v7;
  }
  v13 = v4 * v7;
  v14 = v3 * v7;
  v15 = v5 * v7;
  *a2 = cosval + v13 * v4;
  a2[1] = v13 * v3 + v9 * v5;
  a2[6] = v9 * v3 + v13 * v5;
  a2[7] = v14 * v5 - v9 * v4;
  a2[2] = v13 * v5 - v9 * v3;
  a2[3] = v13 * v3 - v9 * v5;
  a2[4] = cosval + v14 * v3;
  a2[5] = v14 * v5 + v9 * v4;
  v16 = v8 * v4;
  v17 = v8 * v3;
  a2[8] = cosval + v15 * v5;
  a2[9] = v9 + v8 * v4 * v4;
  v18 = v9 + v8 * v3 * v3;
  v19 = v9 + v8 * v5 * v5;
  v20 = v8 * v4 * v3;
  v21 = v16 * v5;
  v22 = v17 * v5;
  a2[12] = v20 - v15;
  a2[13] = v18;
  a2[16] = v22 - v13;
  a2[17] = v19;
  a2[10] = v20 + v15;
  a2[11] = v21 - v14;
  result = v22 + v13;
  a2[14] = v22 + v13;
  a2[15] = v14 + v21;
  return result;
}

uint64_t cva::SO3AlgebraStorage<double,cva::MatrixRef<double const,3u,1u,false>>::serialize()
{
  return std::ostream::write();
}

BOOL cva::adp::io::FileDirectory::open(uint64_t a1, const std::string *a2, const std::string *a3, const std::string *a4)
{
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;

  std::string::operator=((std::string *)a1, a2);
  std::string::operator=((std::string *)(a1 + 24), a3);
  v7 = (_BYTE *)(a1 + 48);
  std::string::operator=((std::string *)(a1 + 48), a4);
  if (*(char *)(a1 + 71) < 0)
  {
    v7 = *(_BYTE **)(a1 + 48);
    v8 = *(_QWORD *)(a1 + 56);
  }
  else
  {
    v8 = *(unsigned __int8 *)(a1 + 71);
  }
  v9 = &v7[v8];
  while (v7 != v9)
  {
    *v7 = __tolower((char)*v7);
    ++v7;
  }
  return cva::adp::io::FileDirectory::parseDirectory((cva::adp::io::FileDirectory *)a1);
}

BOOL cva::adp::io::FileDirectory::parseDirectory(cva::adp::io::FileDirectory *this)
{
  uint64_t v2;
  const char **v3;
  const char *v4;
  _BOOL8 v5;
  const char *v7;
  uint64_t *v8;
  unsigned __int8 **v9;
  char v10;
  uint64_t v11;
  cva::Path *v12;
  __darwin_ino64_t st_gid_high;
  size_t v14;
  size_t v15;
  char *v16;
  char *v17;
  size_t v18;
  uint64_t v19;
  int v20;
  unsigned __int8 *v21;
  char **v22;
  void *v23;
  uint64_t v24;
  __int128 v25;
  char v26;
  char v27;
  char *v28;
  int64_t v29;
  __int128 *p_dst;
  int64_t v31;
  unsigned __int8 **v32;
  char *v33;
  int v34;
  int64_t v35;
  __int128 *v36;
  int64_t v37;
  char *v38;
  char *v39;
  int64_t v40;
  unsigned __int8 **v41;
  std::string::value_type *v42;
  std::string::value_type *v43;
  unint64_t v44;
  std::string *p_p;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  unint64_t v49;
  std::string *v50;
  std::string::value_type v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  std::ios_base *v55;
  const std::locale::facet *v56;
  unsigned __int8 v57;
  std::string *v58;
  std::string::size_type size;
  uint64_t v60;
  std::string *v61;
  std::string *v62;
  uint64_t v63;
  char v64;
  std::string *v65;
  std::string::size_type v66;
  std::string *v67;
  std::string::size_type v68;
  std::string *v69;
  uint64_t v70;
  uint64_t v72;
  uint64_t v73;
  char *v75;
  char *v76;
  std::string::size_type v77;
  double v78;
  std::locale::__imp *locale;
  char *v80;
  double *v81;
  uint64_t **v82;
  double v83;
  char *v84;
  uint64_t v85;
  uint64_t *v86;
  std::locale::__imp *v87;
  unint64_t v88;
  __int128 *v89;
  std::string::size_type *v90;
  unint64_t v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  std::string __p;
  stat v104;
  __int128 __dst;
  uint64_t v106;
  char *v107;
  size_t v108;
  unsigned __int8 v109;
  uint64_t *v110;
  const char **v111;
  std::locale v112;

  v2 = operator new();
  v3 = (const char **)v2;
  if (*((char *)this + 23) < 0)
  {
    sub_20AB88C14((_BYTE *)v2, *(void **)this, *((_QWORD *)this + 1));
  }
  else
  {
    *(_OWORD *)v2 = *(_OWORD *)this;
    *(_QWORD *)(v2 + 16) = *((_QWORD *)this + 2);
  }
  v111 = v3;
  v4 = (const char *)v3;
  if (*((char *)v3 + 23) < 0)
    v4 = *v3;
  if (!access(v4, 0))
  {
    v7 = (const char *)v3;
    if (*((char *)v3 + 23) < 0)
      v7 = *v3;
    v5 = 0;
    if (stat(v7, &v104) || (v104.st_mode & 0xF000) != 0x4000)
      goto LABEL_8;
    sub_20AB96A90(*((char **)this + 10));
    *((_QWORD *)this + 9) = (char *)this + 80;
    *((_QWORD *)this + 10) = 0;
    *((_QWORD *)this + 11) = 0;
    v8 = (uint64_t *)operator new();
    HIBYTE(v104.st_gid) = 0;
    LOBYTE(v104.st_dev) = 0;
    v110 = cva::DirectoryIterator::Private::Private(v8, &v111, (__int128 *)&v104.st_dev);
    v9 = (unsigned __int8 **)((char *)this + 48);
    v101 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
    v102 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
    v99 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 40);
    v100 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 32);
    v98 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 48);
    v96 = *MEMORY[0x24BEDB7F0];
    v97 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 8);
    v94 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v95 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v93 = MEMORY[0x24BEDB848] + 16;
    while (1)
    {
      if (!v8[1])
      {
        *((_QWORD *)this + 12) = *((_QWORD *)this + 9);
        v5 = *((_QWORD *)this + 11) != 0;
        cva::DirectoryIterator::~DirectoryIterator(&v110);
        v3 = v111;
        if (!v111)
          return v5;
        goto LABEL_8;
      }
      v12 = (cva::Path *)(v8 + 2);
      v11 = v8[2];
      if (*(char *)(v11 + 23) < 0)
        v11 = *(_QWORD *)v11;
      if (stat((const char *)v11, &v104) || (v104.st_mode & 0xF000) != 0x4000)
      {
        cva::Path::extension((cva::Path *)(v8 + 2), &v104);
        if ((v104.st_gid & 0x80000000) == 0)
          st_gid_high = HIBYTE(v104.st_gid);
        else
          st_gid_high = v104.st_ino;
        if (SHIBYTE(v104.st_gid) < 0)
        {
          operator delete(*(void **)&v104.st_dev);
          if (st_gid_high)
          {
LABEL_34:
            cva::Path::extension((cva::Path *)(v8 + 2), &v107);
            v14 = v109;
            v15 = v108;
            if ((v109 & 0x80u) == 0)
              v16 = (char *)&v107 + v109;
            else
              v16 = &v107[v108];
            if ((v109 & 0x80u) == 0)
              v17 = (char *)&v107;
            else
              v17 = v107;
            if (v17 != v16)
            {
              do
              {
                *v17 = __tolower(*v17);
                ++v17;
              }
              while (v17 != v16);
              v14 = v109;
              v15 = v108;
            }
            v10 = v14;
            if ((v14 & 0x80u) == 0)
              v18 = v14;
            else
              v18 = v15;
            v19 = *((unsigned __int8 *)this + 71);
            v20 = (char)v19;
            if ((v19 & 0x80u) != 0)
              v19 = *((_QWORD *)this + 7);
            if (v18 != v19)
              goto LABEL_19;
            if (v20 >= 0)
              v21 = (unsigned __int8 *)v9;
            else
              v21 = *v9;
            if ((v14 & 0x80) != 0)
            {
              v23 = v107;
              if (memcmp(v107, v21, v15))
                goto LABEL_60;
            }
            else if ((_DWORD)v14)
            {
              v22 = &v107;
              while (*(unsigned __int8 *)v22 == *v21)
              {
                v22 = (char **)((char *)v22 + 1);
                ++v21;
                if (!--v14)
                  goto LABEL_61;
              }
LABEL_19:
              if ((v10 & 0x80) == 0)
              {
LABEL_20:
                v8 = v110;
                goto LABEL_21;
              }
              v23 = v107;
LABEL_60:
              operator delete(v23);
              goto LABEL_20;
            }
LABEL_61:
            cva::Path::stem(v12, &v104);
            v24 = *(_QWORD *)&v104.st_dev;
            if (*(char *)(*(_QWORD *)&v104.st_dev + 23) < 0)
            {
              sub_20AB88C14(&__dst, **(void ***)&v104.st_dev, *(_QWORD *)(*(_QWORD *)&v104.st_dev + 8));
              if (*(char *)(v24 + 23) < 0)
LABEL_63:
                operator delete(*(void **)v24);
            }
            else
            {
              v25 = *(_OWORD *)*(_QWORD *)&v104.st_dev;
              v106 = *(_QWORD *)(*(_QWORD *)&v104.st_dev + 16);
              __dst = v25;
              if (*(char *)(*(_QWORD *)&v104.st_dev + 23) < 0)
                goto LABEL_63;
            }
            MEMORY[0x20BD2D02C](v24, 0x1012C40EC159624);
            v26 = HIBYTE(v106);
            v27 = *((_BYTE *)this + 47);
            if (v27 >= 0)
              v28 = (char *)this + 24;
            else
              v28 = (char *)*((_QWORD *)this + 3);
            if (v27 >= 0)
              v29 = *((unsigned __int8 *)this + 47);
            else
              v29 = *((_QWORD *)this + 4);
            if (v106 >= 0)
              p_dst = &__dst;
            else
              p_dst = (__int128 *)__dst;
            if (v106 >= 0)
              v31 = HIBYTE(v106);
            else
              v31 = *((_QWORD *)&__dst + 1);
            if (v29)
            {
              if (v31 >= v29)
              {
                v32 = v9;
                v33 = (char *)p_dst + v31;
                v34 = *v28;
                v35 = v31;
                v36 = p_dst;
                while (1)
                {
                  v37 = v35 - v29;
                  if (v37 == -1 || (v38 = (char *)memchr(v36, v34, v37 + 1)) == 0)
                  {
LABEL_83:
                    v9 = v32;
                    if ((v26 & 0x80) == 0)
                      goto LABEL_18;
                    goto LABEL_165;
                  }
                  v39 = v38;
                  if (!memcmp(v38, v28, v29))
                    break;
                  v36 = (__int128 *)(v39 + 1);
                  v35 = v33 - (v39 + 1);
                  if (v35 < v29)
                    goto LABEL_83;
                }
                v9 = v32;
                if (v39 == v33)
                {
                  if (v26 < 0)
                    goto LABEL_165;
                  goto LABEL_18;
                }
                v40 = v39 - (char *)p_dst;
                if (v39 - (char *)p_dst != -1)
                  goto LABEL_88;
              }
              goto LABEL_164;
            }
            v40 = 0;
LABEL_88:
            v41 = v9;
            v42 = (char *)p_dst + v40 + v29;
            v43 = (char *)p_dst + v31;
            v44 = v31 - (v40 + v29);
            if (v44 >= 0x7FFFFFFFFFFFFFF8)
              abort();
            if (v44 > 0x16)
            {
              v46 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v44 | 7) != 0x17)
                v46 = v44 | 7;
              v47 = v46 + 1;
              p_p = (std::string *)operator new(v46 + 1);
              __p.__r_.__value_.__l.__size_ = v31 - (v40 + v29);
              __p.__r_.__value_.__r.__words[2] = v47 | 0x8000000000000000;
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
              if (v42 == v43)
                goto LABEL_100;
            }
            else
            {
              *((_BYTE *)&__p.__r_.__value_.__s + 23) = v31 - (v40 + v29);
              p_p = &__p;
              if (v42 == v43)
                goto LABEL_100;
            }
            v48 = v29 + v40;
            v49 = v31 - (v29 + v40);
            if (v49 >= 0x20 && (unint64_t)((char *)p_p - ((char *)p_dst + v48)) >= 0x20)
            {
              v88 = v49 & 0xFFFFFFFFFFFFFFE0;
              v50 = (std::string *)((char *)p_p + (v49 & 0xFFFFFFFFFFFFFFE0));
              v89 = (__int128 *)((char *)p_dst + v48 + 16);
              v90 = &p_p->__r_.__value_.__r.__words[2];
              v91 = v49 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v92 = *v89;
                *((_OWORD *)v90 - 1) = *(v89 - 1);
                *(_OWORD *)v90 = v92;
                v89 += 2;
                v90 += 4;
                v91 -= 32;
              }
              while (v91);
              if (v49 == v88)
              {
                p_p = (std::string *)((char *)p_p + (v49 & 0xFFFFFFFFFFFFFFE0));
LABEL_100:
                p_p->__r_.__value_.__s.__data_[0] = 0;
                v52 = MEMORY[0x24BEDB858];
                v53 = MEMORY[0x24BEDB858] + 104;
                v104.st_qspare[0] = MEMORY[0x24BEDB858] + 104;
                v54 = MEMORY[0x24BEDB858] + 64;
                *(_QWORD *)&v104.st_uid = MEMORY[0x24BEDB858] + 64;
                *(_QWORD *)&v104.st_dev = v102;
                *(_QWORD *)((char *)&v104.st_dev + *(_QWORD *)(v102 - 24)) = v101;
                v104.st_ino = 0;
                v55 = (std::ios_base *)((char *)&v104 + *(_QWORD *)(*(_QWORD *)&v104.st_dev - 24));
                std::ios_base::init(v55, &v104.st_rdev);
                v55[1].__vftable = 0;
                v55[1].__fmtflags_ = -1;
                *(_QWORD *)((char *)&v104.st_uid + *(_QWORD *)(v100 - 24)) = v99;
                *(_QWORD *)((char *)&v104.st_dev + *(_QWORD *)(v97 - 24)) = v98;
                v104.st_qspare[0] = v53;
                *(_QWORD *)&v104.st_dev = v52 + 24;
                *(_QWORD *)&v104.st_uid = v54;
                std::streambuf::basic_streambuf();
                *(_QWORD *)&v104.st_rdev = v93;
                memset(&v104.st_birthtimespec.tv_nsec, 0, 32);
                v104.st_gen = 24;
                std::stringbuf::str();
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                memset(&__p, 0, sizeof(__p));
                std::ios_base::getloc((const std::ios_base *)((char *)&v104 + *(_QWORD *)(*(_QWORD *)&v104.st_dev - 24)));
                v56 = std::locale::use_facet(&v112, MEMORY[0x24BEDB350]);
                v57 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v56->__vftable[2].~facet_0)(v56, 10);
                std::locale::~locale(&v112);
                sub_20AB96AD8(&v104, (uint64_t)&__p, v57);
                size = __p.__r_.__value_.__l.__size_;
                v58 = (std::string *)__p.__r_.__value_.__r.__words[0];
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                {
                  v58 = &__p;
                  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                }
                v9 = v41;
                v60 = MEMORY[0x24BDAC740];
                if (size)
                {
                  v61 = (std::string *)((char *)v58 + size);
                  v62 = v58;
                  while (v62->__r_.__value_.__s.__data_[0] < 0
                       || (*(_DWORD *)(MEMORY[0x24BDAC740]
                                     + 4 * v62->__r_.__value_.__s.__data_[0]
                                     + 60) & 0x400) == 0)
                  {
                    v62 = (std::string *)((char *)v62 + 1);
                    if (!--size)
                    {
                      v62 = v61;
                      break;
                    }
                  }
                }
                else
                {
                  v62 = v58;
                }
                std::string::erase(&__p, 0, (char *)v62 - (char *)v58);
                v63 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                v64 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                v66 = __p.__r_.__value_.__l.__size_;
                v65 = (std::string *)__p.__r_.__value_.__r.__words[0];
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v67 = &__p;
                else
                  v67 = (std::string *)__p.__r_.__value_.__r.__words[0];
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v68 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                else
                  v68 = __p.__r_.__value_.__l.__size_;
                v69 = (std::string *)((char *)v67 + v68);
                if (v68)
                {
                  while (1)
                  {
                    v70 = v67->__r_.__value_.__s.__data_[0];
                    if (v70 != 46 && (*(_DWORD *)(v60 + 4 * v70 + 60) & 0x400) == 0)
                      break;
                    v67 = (std::string *)((char *)v67 + 1);
                    if (!--v68)
                      goto LABEL_139;
                  }
                  if (v67 == v69 || (std::string *)((char *)&v67->__r_.__value_.__l.__data_ + 1) == v69)
                  {
                    v69 = v67;
                  }
                  else
                  {
                    v72 = 1;
                    v69 = v67;
                    do
                    {
                      v73 = v67->__r_.__value_.__s.__data_[v72];
                      if (v73 == 46 || (*(_DWORD *)(v60 + 4 * v73 + 60) & 0x400) != 0)
                      {
                        v69->__r_.__value_.__s.__data_[0] = v73;
                        v69 = (std::string *)((char *)v69 + 1);
                      }
                      ++v72;
                    }
                    while (v68 != v72);
                    v63 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                    v66 = __p.__r_.__value_.__l.__size_;
                    v65 = (std::string *)__p.__r_.__value_.__r.__words[0];
                    v64 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                  }
                }
LABEL_139:
                v75 = (char *)v65 + v66;
                v76 = (char *)&__p + v63;
                if (v64 >= 0)
                  v65 = &__p;
                else
                  v76 = v75;
                std::string::erase(&__p, (char *)v69 - (char *)v65, v76 - (char *)v69);
                v77 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v77 = __p.__r_.__value_.__l.__size_;
                if (!v77)
                  MEMORY[0x20BD2CD14](&__p, "0.0");
                v78 = std::stod(&__p, 0);
                cva::Path::filename((cva::Path *)(v110 + 2), (uint64_t *)&v112);
                locale = v112.__locale_;
                v80 = (char *)this + 80;
                while (1)
                {
                  v81 = *(double **)v80;
                  v82 = (uint64_t **)v80;
                  if (!*(_QWORD *)v80)
                    break;
                  while (1)
                  {
                    v80 = (char *)v81;
                    v83 = v81[4];
                    if (v78 < v83)
                      break;
                    if (v83 >= v78)
                      goto LABEL_155;
                    v81 = (double *)*((_QWORD *)v81 + 1);
                    if (!v81)
                    {
                      v82 = (uint64_t **)(v80 + 8);
                      goto LABEL_152;
                    }
                  }
                }
LABEL_152:
                v84 = v80;
                v80 = (char *)operator new(0x40uLL);
                *((double *)v80 + 4) = v78;
                *((_QWORD *)v80 + 6) = 0;
                *((_QWORD *)v80 + 7) = 0;
                *((_QWORD *)v80 + 5) = 0;
                *(_QWORD *)v80 = 0;
                *((_QWORD *)v80 + 1) = 0;
                *((_QWORD *)v80 + 2) = v84;
                *v82 = (uint64_t *)v80;
                v85 = **((_QWORD **)this + 9);
                v86 = (uint64_t *)v80;
                if (v85)
                {
                  *((_QWORD *)this + 9) = v85;
                  v86 = *v82;
                }
                sub_20AB96C04(*((uint64_t **)this + 10), v86);
                ++*((_QWORD *)this + 11);
LABEL_155:
                std::string::operator=((std::string *)(v80 + 40), (const std::string *)locale);
                v87 = v112.__locale_;
                if (v112.__locale_)
                {
                  if (*((char *)v112.__locale_ + 23) < 0)
                    operator delete(*(void **)v112.__locale_);
                  MEMORY[0x20BD2D02C](v87, 0x1012C40EC159624);
                }
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                *(_QWORD *)&v104.st_dev = v96;
                *(_QWORD *)((char *)&v104.st_dev + *(_QWORD *)(v96 - 24)) = v95;
                *(_QWORD *)&v104.st_uid = v94;
                *(_QWORD *)&v104.st_rdev = MEMORY[0x24BEDB848] + 16;
                if (SHIBYTE(v104.st_blocks) < 0)
                  operator delete((void *)v104.st_birthtimespec.tv_nsec);
                std::streambuf::~streambuf();
                std::iostream::~basic_iostream();
                MEMORY[0x20BD2D008](v104.st_qspare);
                v26 = HIBYTE(v106);
LABEL_164:
                if (v26 < 0)
LABEL_165:
                  operator delete((void *)__dst);
LABEL_18:
                v10 = v109;
                goto LABEL_19;
              }
              v42 += v88;
            }
            else
            {
              v50 = p_p;
            }
            p_p = v50;
            do
            {
              v51 = *v42++;
              p_p->__r_.__value_.__s.__data_[0] = v51;
              p_p = (std::string *)((char *)p_p + 1);
            }
            while (v42 != v43);
            goto LABEL_100;
          }
        }
        else if (st_gid_high)
        {
          goto LABEL_34;
        }
      }
LABEL_21:
      cva::DirectoryIterator::Private::seek_valid((cva::DirectoryIterator::Private *)v8);
    }
  }
  v5 = 0;
LABEL_8:
  if (*((char *)v3 + 23) < 0)
    operator delete((void *)*v3);
  MEMORY[0x20BD2D02C](v3, 0x1012C40EC159624);
  return v5;
}

void sub_20AB96A90(char *a1)
{
  if (a1)
  {
    sub_20AB96A90(*(_QWORD *)a1);
    sub_20AB96A90(*((_QWORD *)a1 + 1));
    if (a1[63] < 0)
      operator delete(*((void **)a1 + 5));
    operator delete(a1);
  }
}

_QWORD *sub_20AB96AD8(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  int v9;
  char v11;

  MEMORY[0x20BD2CDBC](&v11, a1, 1);
  if (!v11)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v8 = (_BYTE *)v7[3];
    if (v8 != (_BYTE *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(_QWORD *))(*v7 + 80))(v7);
    if ((_DWORD)v7 == -1)
      break;
LABEL_9:
    if (v7 == a3)
    {
      v9 = 0;
      goto LABEL_17;
    }
    ++v6;
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    if (*(char *)(a2 + 23) < 0 && *(_QWORD *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6)
    v9 = 2;
  else
    v9 = 6;
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v9);
  return a1;
}

uint64_t *sub_20AB96C04(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = a2[2];
      if (*(_BYTE *)(v2 + 24))
        break;
      v3 = *(uint64_t **)(v2 + 16);
      v4 = *v3;
      if (*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if (*(uint64_t **)v2 == a2)
          {
            v9 = (uint64_t *)a2[2];
          }
          else
          {
            v9 = *(uint64_t **)(v2 + 8);
            v10 = *v9;
            *(_QWORD *)(v2 + 8) = *v9;
            if (v10)
            {
              *(_QWORD *)(v10 + 16) = v2;
              v3 = *(uint64_t **)(v2 + 16);
            }
            v9[2] = (uint64_t)v3;
            *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = v9;
            *v9 = v2;
            *(_QWORD *)(v2 + 16) = v9;
            v3 = (uint64_t *)v9[2];
            v2 = *v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v14 = *(_QWORD *)(v2 + 8);
          *v3 = v14;
          if (v14)
            *(_QWORD *)(v14 + 16) = v3;
          *(_QWORD *)(v2 + 16) = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          *(_QWORD *)(v2 + 8) = v3;
          v3[2] = v2;
          return result;
        }
      }
      else if (!v4 || (v6 = *(unsigned __int8 *)(v4 + 24), v5 = (_BYTE *)(v4 + 24), v6))
      {
        if (*(uint64_t **)v2 == a2)
        {
          v11 = a2[1];
          *(_QWORD *)v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = *(uint64_t **)(v2 + 16);
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = a2;
          a2[1] = v2;
          *(_QWORD *)(v2 + 16) = a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v12 = (uint64_t *)v3[1];
        v13 = *v12;
        v3[1] = *v12;
        if (v13)
          *(_QWORD *)(v13 + 16) = v3;
        v12[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v12;
        *v12 = (uint64_t)v3;
        v3[2] = (uint64_t)v12;
        return result;
      }
      *(_BYTE *)(v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void cva::adp::io::FileDirectory::close(char **this)
{
  _QWORD *v1;

  v1 = this + 10;
  sub_20AB96A90(this[10]);
  *(v1 - 1) = v1;
  *v1 = 0;
  v1[1] = 0;
  v1[2] = v1;
}

BOOL cva::adp::io::FileDirectory::rmdir(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  int v7;
  _BOOL8 v8;
  uint64_t v9;
  char *v10;
  const char *v11;
  uint64_t *v12;
  char *v13;
  char v14;
  const char *v15;
  int v16;
  const char *v17;
  const char *v18;
  void *__p[2];
  uint64_t v21;
  cva::DirectoryIterator::Private *v22;
  stat v23;

  v4 = operator new();
  v5 = v4;
  if (*(char *)(a1 + 23) < 0)
  {
    sub_20AB88C14((_BYTE *)v4, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)v4 = *(_OWORD *)a1;
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(a1 + 16);
  }
  v6 = (const char *)v5;
  if (*(char *)(v5 + 23) < 0)
    v6 = *(const char **)v5;
  v7 = access(v6, 0);
  if (*(char *)(v5 + 23) < 0)
    operator delete(*(void **)v5);
  MEMORY[0x20BD2D02C](v5, 0x1012C40EC159624);
  if (v7)
    return 1;
  if ((a2 & 1) == 0)
  {
    if (*(char *)(a1 + 23) >= 0)
      v11 = (const char *)a1;
    else
      v11 = *(const char **)a1;
    return rmdir(v11) == 0;
  }
  v9 = operator new();
  v10 = (char *)v9;
  if (*(char *)(a1 + 23) < 0)
  {
    sub_20AB88C14((_BYTE *)v9, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)v9 = *(_OWORD *)a1;
    *(_QWORD *)(v9 + 16) = *(_QWORD *)(a1 + 16);
  }
  __p[0] = v10;
  v12 = (uint64_t *)operator new();
  HIBYTE(v23.st_gid) = 0;
  LOBYTE(v23.st_dev) = 0;
  v22 = (cva::DirectoryIterator::Private *)cva::DirectoryIterator::Private::Private(v12, (const char ***)__p, (__int128 *)&v23.st_dev);
  if (v10[23] < 0)
    operator delete(*(void **)v10);
  MEMORY[0x20BD2D02C](v10, 0x1012C40EC159624);
  while (1)
  {
    if (!v12[1])
    {
      if (*(char *)(a1 + 23) >= 0)
        v18 = (const char *)a1;
      else
        v18 = *(const char **)a1;
      v8 = rmdir(v18) == 0;
      goto LABEL_48;
    }
    v13 = (char *)v12[2];
    if (v13[23] < 0)
    {
      sub_20AB88C14(__p, *(void **)v13, *((_QWORD *)v13 + 1));
      v13 = (char *)v12[2];
      if (v13[23] < 0)
        v13 = *(char **)v13;
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)v13;
      v21 = *((_QWORD *)v13 + 2);
    }
    if (!stat(v13, &v23) && (v23.st_mode & 0xF000) == 0x4000)
      break;
    v12 = (uint64_t *)v22;
    v15 = (const char *)*((_QWORD *)v22 + 2);
    if (v15[23] < 0)
      v15 = *(const char **)v15;
    v16 = stat(v15, &v23);
    v14 = HIBYTE(v21);
    if (!v16 && (v23.st_mode & 0xF000) == 0x8000)
    {
      v17 = v21 >= 0 ? (const char *)__p : (const char *)__p[0];
      if (unlink(v17))
        goto LABEL_45;
    }
LABEL_38:
    cva::DirectoryIterator::Private::seek_valid((cva::DirectoryIterator::Private *)v12);
    if (v14 < 0)
      operator delete(__p[0]);
  }
  if (cva::adp::io::FileDirectory::rmdir(__p, 1))
  {
    v12 = (uint64_t *)v22;
    v14 = HIBYTE(v21);
    goto LABEL_38;
  }
  v14 = HIBYTE(v21);
LABEL_45:
  if (v14 < 0)
    operator delete(__p[0]);
  v8 = 0;
LABEL_48:
  cva::DirectoryIterator::~DirectoryIterator((uint64_t **)&v22);
  return v8;
}

uint64_t cva::adp::io::FileDirectory::currentFileName(cva::adp::io::FileDirectory *this)
{
  return *((_QWORD *)this + 12) + 40;
}

void cva::adp::io::FileDirectory::currentFilePath(cva::adp::io::FileDirectory *this@<X0>, std::string *a2@<X8>)
{
  int v3;
  size_t v4;
  unint64_t v5;
  std::string *p_dst;
  uint64_t v8;
  uint64_t v9;
  cva::adp::io::FileDirectory *v10;
  uint64_t v11;
  uint64_t v12;
  const std::string::value_type *v13;
  const std::string::value_type *v14;
  int v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  std::string __dst;

  v3 = *((char *)this + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)this + 23);
  else
    v4 = *((_QWORD *)this + 1);
  v5 = v4 + 1;
  if (v4 + 1 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    p_dst = (std::string *)operator new(v8 + 1);
    __dst.__r_.__value_.__l.__size_ = v4 + 1;
    __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4 + 1;
    if (!v4)
      goto LABEL_15;
  }
  if (v3 >= 0)
    v10 = this;
  else
    v10 = *(cva::adp::io::FileDirectory **)this;
  memmove(p_dst, v10, v4);
LABEL_15:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v4) = 47;
  v11 = *((_QWORD *)this + 12);
  v14 = *(const std::string::value_type **)(v11 + 40);
  v12 = v11 + 40;
  v13 = v14;
  v15 = *(char *)(v12 + 23);
  if (v15 >= 0)
    v16 = (const std::string::value_type *)v12;
  else
    v16 = v13;
  if (v15 >= 0)
    v17 = *(unsigned __int8 *)(v12 + 23);
  else
    v17 = *(_QWORD *)(v12 + 8);
  v18 = std::string::append(&__dst, v16, v17);
  *a2 = *v18;
  v18->__r_.__value_.__r.__words[0] = 0;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

double cva::adp::io::FileDirectory::currentID(cva::adp::io::FileDirectory *this)
{
  return *(double *)(*((_QWORD *)this + 12) + 32);
}

uint64_t cva::adp::io::FileDirectory::currentPosition(cva::adp::io::FileDirectory *this)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;

  v1 = (_QWORD *)*((_QWORD *)this + 9);
  v2 = (_QWORD *)*((_QWORD *)this + 12);
  if (v1 == v2)
    return 0;
  result = 0;
  do
  {
    v4 = (_QWORD *)v1[1];
    if (v4)
    {
      do
      {
        v5 = v4;
        v4 = (_QWORD *)*v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        v5 = (_QWORD *)v1[2];
        v6 = *v5 == (_QWORD)v1;
        v1 = v5;
      }
      while (!v6);
    }
    ++result;
    v1 = v5;
  }
  while (v5 != v2);
  return result;
}

uint64_t cva::adp::io::FileDirectory::numberOfFiles(cva::adp::io::FileDirectory *this)
{
  return *((_QWORD *)this + 11);
}

BOOL cva::adp::io::FileDirectory::forward(cva::adp::io::FileDirectory *this, uint64_t a2)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  BOOL v6;
  _BOOL8 v7;

  if (!a2)
    return 1;
  v2 = (char *)this + 80;
  v3 = (char *)*((_QWORD *)this + 12);
  while (1)
  {
    v4 = (char *)*((_QWORD *)v3 + 1);
    v5 = v3;
    if (v4)
    {
      do
      {
        v3 = v4;
        v4 = *(char **)v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        v3 = (char *)*((_QWORD *)v5 + 2);
        v6 = *(_QWORD *)v3 == (_QWORD)v5;
        v5 = v3;
      }
      while (!v6);
    }
    v7 = v3 != v2;
    if (v3 == v2)
      break;
    if (!--a2)
      goto LABEL_13;
  }
  v3 = (char *)this + 80;
LABEL_13:
  *((_QWORD *)this + 12) = v3;
  return v7;
}

BOOL cva::adp::io::FileDirectory::backward(cva::adp::io::FileDirectory *this, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _BOOL8 v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;

  if (!a2)
    return 1;
  v2 = (_QWORD *)*((_QWORD *)this + 9);
  v3 = (_QWORD *)*((_QWORD *)this + 12);
  while (1)
  {
    v4 = v3 != v2;
    if (v3 == v2)
      break;
    v5 = (_QWORD *)*v3;
    if (*v3)
    {
      do
      {
        v6 = v5;
        v5 = (_QWORD *)v5[1];
      }
      while (v5);
    }
    else
    {
      do
      {
        v6 = (_QWORD *)v3[2];
        v7 = *v6 == (_QWORD)v3;
        v3 = v6;
      }
      while (v7);
    }
    *((_QWORD *)this + 12) = v6;
    v3 = v6;
    if (!--a2)
      return 1;
  }
  return v4;
}

BOOL cva::adp::io::FileDirectory::isAtEnd(cva::adp::io::FileDirectory *this)
{
  return *((_QWORD *)this + 12) == (_QWORD)this + 80;
}

uint64_t cva::adp::io::FileDirectory::seekToFile(cva::adp::io::FileDirectory *this, double a2)
{
  uint64_t v2;
  double *v3;
  uint64_t *v4;

  v2 = *((_QWORD *)this + 10);
  if (!v2)
    return 0;
  v3 = (double *)((char *)this + 80);
  do
  {
    v4 = (uint64_t *)(v2 + 8);
    if (*(double *)(v2 + 32) >= a2)
    {
      v4 = (uint64_t *)v2;
      v3 = (double *)v2;
    }
    v2 = *v4;
  }
  while (*v4);
  if (v3 == (double *)((char *)this + 80) || v3[4] > a2)
    return 0;
  *((_QWORD *)this + 12) = v3;
  return 1;
}

BOOL cva::adp::io::FileDirectory::seekToPosition(cva::adp::io::FileDirectory *this, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  unint64_t v9;
  _QWORD *v11;

  v2 = *((_QWORD *)this + 11);
  if (v2 > a2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 12) = v3;
    if ((a2 & 0x8000000000000000) != 0)
    {
      v9 = a2;
      do
      {
        v11 = (_QWORD *)*v3;
        if (*v3)
        {
          do
          {
            v7 = v11;
            v11 = (_QWORD *)v11[1];
          }
          while (v11);
        }
        else
        {
          do
          {
            v7 = (_QWORD *)v3[2];
            v8 = *v7 == (_QWORD)v3;
            v3 = v7;
          }
          while (v8);
        }
        v3 = v7;
      }
      while (!__CFADD__(v9++, 1));
      goto LABEL_19;
    }
    if (a2)
    {
      v4 = a2;
      do
      {
        v6 = (_QWORD *)v3[1];
        if (v6)
        {
          do
          {
            v7 = v6;
            v6 = (_QWORD *)*v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            v7 = (_QWORD *)v3[2];
            v8 = *v7 == (_QWORD)v3;
            v3 = v7;
          }
          while (!v8);
        }
        v3 = v7;
      }
      while (v4-- > 1);
LABEL_19:
      *((_QWORD *)this + 12) = v7;
    }
  }
  return v2 > a2;
}

uint64_t cva::adp::io::isDirectory(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  BOOL v6;
  stat v8;

  v2 = operator new();
  v3 = v2;
  if (*(char *)(a1 + 23) < 0)
  {
    sub_20AB88C14((_BYTE *)v2, *(void **)a1, *(_QWORD *)(a1 + 8));
    if ((*(char *)(v3 + 23) & 0x80000000) == 0)
    {
LABEL_3:
      v4 = 0;
      if (!access((const char *)v3, 0))
      {
        v5 = (const char *)v3;
LABEL_8:
        if (stat(v5, &v8))
          v6 = 0;
        else
          v6 = (v8.st_mode & 0xF000) == 0x4000;
        v4 = v6;
        goto LABEL_14;
      }
      goto LABEL_14;
    }
  }
  else
  {
    *(_OWORD *)v2 = *(_OWORD *)a1;
    *(_QWORD *)(v2 + 16) = *(_QWORD *)(a1 + 16);
    if ((*(char *)(v2 + 23) & 0x80000000) == 0)
      goto LABEL_3;
  }
  v4 = 0;
  if (!access(*(const char **)v3, 0))
  {
    v5 = *(const char **)v3;
    goto LABEL_8;
  }
LABEL_14:
  if (*(char *)(v3 + 23) < 0)
    operator delete(*(void **)v3);
  MEMORY[0x20BD2D02C](v3, 0x1012C40EC159624);
  return v4;
}

uint64_t cva::adp::io::isFile(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  BOOL v6;
  stat v8;

  v2 = operator new();
  v3 = v2;
  if (*(char *)(a1 + 23) < 0)
  {
    sub_20AB88C14((_BYTE *)v2, *(void **)a1, *(_QWORD *)(a1 + 8));
    if ((*(char *)(v3 + 23) & 0x80000000) == 0)
    {
LABEL_3:
      v4 = 0;
      if (!access((const char *)v3, 0))
      {
        v5 = (const char *)v3;
LABEL_8:
        if (stat(v5, &v8))
          v6 = 0;
        else
          v6 = (v8.st_mode & 0xF000) == 0x8000;
        v4 = v6;
        goto LABEL_14;
      }
      goto LABEL_14;
    }
  }
  else
  {
    *(_OWORD *)v2 = *(_OWORD *)a1;
    *(_QWORD *)(v2 + 16) = *(_QWORD *)(a1 + 16);
    if ((*(char *)(v2 + 23) & 0x80000000) == 0)
      goto LABEL_3;
  }
  v4 = 0;
  if (!access(*(const char **)v3, 0))
  {
    v5 = *(const char **)v3;
    goto LABEL_8;
  }
LABEL_14:
  if (*(char *)(v3 + 23) < 0)
    operator delete(*(void **)v3);
  MEMORY[0x20BD2D02C](v3, 0x1012C40EC159624);
  return v4;
}

uint64_t cva::geo::SourceView::operator=(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  if ((uint64_t *)result != a2)
  {
    v2 = *a2;
    *(_QWORD *)result = *a2 & 0xFFFFFFFFFFFFFFLL | ((unint64_t)*(unsigned __int8 *)(result + 7) << 56);
    *(_QWORD *)result = v2 & 0xFFFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int8 *)a2 + 7) << 56);
  }
  return result;
}

_QWORD *cva::geo::SourceView::SourceView(_QWORD *this, uint64_t a2)
{
  *this = a2;
  return this;
}

{
  *this = a2;
  return this;
}

unint64_t *cva::geo::SourceView::SourceView(unint64_t *this, uint64_t a2, unsigned __int8 a3)
{
  *this = a2 & 0xFFFFFFFFFFFFFFLL | ((unint64_t)a3 << 56);
  return this;
}

{
  *this = a2 & 0xFFFFFFFFFFFFFFLL | ((unint64_t)a3 << 56);
  return this;
}

BOOL cva::geo::operator<(_QWORD *a1, _QWORD *a2)
{
  return *a1 < *a2;
}

BOOL cva::geo::operator==(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

BOOL cva::geo::operator!=(_QWORD *a1, _QWORD *a2)
{
  return *a1 != *a2;
}

double cva::PCA<float>::PCA(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

{
  double result;

  result = 0.0;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t cva::PCA<float>::eigenvectors(uint64_t a1)
{
  return a1 + 24;
}

uint64_t cva::PCA<float>::operator()<cva::Matrix<float,0u,0u,false>,void>(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  int v10;
  int v11;
  size_t v12;
  size_t v13;
  void *v14;
  _OWORD *v15;
  unint64_t v16;
  size_t v17;
  size_t v18;
  size_t v19;
  char *v20;
  int v21;
  int v22;
  uint64_t v23;
  int *v24;
  unint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  int *v29;
  _OWORD *v30;
  __int128 *v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  int *v35;
  unint64_t v36;
  _DWORD *v37;
  unint64_t v38;
  uint64_t v39;
  int *v40;
  _OWORD *v41;
  __int128 *v42;
  uint64_t v43;
  __int128 v44;
  _DWORD *v45;
  int v46;
  char *v47;
  int v48;
  void *v49;
  size_t v50;
  size_t v51;
  void *v52;
  size_t v53;
  size_t v54;
  void *v55;
  size_t v56;
  size_t v57;
  void *v58;
  size_t v59;
  size_t v60;
  float32x4_t *v61;
  size_t v62;
  size_t v63;
  void *v64;
  uint64_t v65;
  float32x4_t *v66;
  float32x4_t *v67;
  float32x4_t *v68;
  float32x4_t *v69;
  uint64_t v70;
  float32x4_t v71;
  uint64_t v72;
  uint64_t v73;
  float *v74;
  float *v75;
  float v76;
  int v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  uint64_t v87;
  __int128 *v88;
  __int128 v89;
  __int128 v90;
  _OWORD *v91;
  unsigned int v92;
  float32x4_t *v93;
  void *v94;
  void *memptr;

  LODWORD(v3) = a3;
  v6 = *(_DWORD *)(a2 + 16);
  v7 = *(unsigned int *)(a2 + 20);
  v8 = (_QWORD *)(a1 + 48);
  if (*(_DWORD *)(a1 + 64) != v6
    || (v9 = *(_DWORD *)(a2 + 16), v10 = *(_DWORD *)(a2 + 20), v11 = v9, *(_DWORD *)(a1 + 68) != v6))
  {
    v12 = (4 * v7 * v6 + 31) & 0x7FFFFFFE0;
    v13 = v12 >> 2;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v12, 0x49090899uLL);
    v14 = *(void **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = memptr;
    *(_QWORD *)(a1 + 56) = v13;
    *(_DWORD *)(a1 + 64) = v6;
    *(_DWORD *)(a1 + 68) = v7;
    free(v14);
    v11 = *(_DWORD *)(a2 + 16);
    v10 = *(_DWORD *)(a2 + 20);
    if (v11 != *(_DWORD *)(a1 + 64))
      goto LABEL_7;
    v9 = *(_DWORD *)(a1 + 68);
  }
  if (v10 == v9)
  {
    v15 = (_OWORD *)*v8;
    goto LABEL_19;
  }
LABEL_7:
  v15 = (_OWORD *)*v8;
  if (*(_QWORD *)a2 == *v8)
  {
    v18 = (4 * (v10 * v11) + 31) & 0x7FFFFFFE0;
    v19 = v18 >> 2;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v18, 0x49090899uLL);
    v20 = (char *)memptr;
    v21 = *(_DWORD *)(a2 + 16);
    v22 = *(_DWORD *)(a2 + 20);
    v23 = (v22 * v21);
    if ((_DWORD)v23)
    {
      v24 = *(int **)a2;
      v25 = (v23 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      if (v25 < 7)
      {
        v26 = (char *)memptr;
      }
      else
      {
        v26 = (char *)memptr;
        if ((unint64_t)((_BYTE *)memptr - (_BYTE *)v24) >= 0x20)
        {
          v27 = v25 + 1;
          v28 = (v25 + 1) & 0x7FFFFFFFFFFFFFF8;
          v29 = &v24[v28];
          v30 = (char *)memptr + 16;
          v31 = (__int128 *)(v24 + 4);
          v32 = v28;
          do
          {
            v33 = *v31;
            *(v30 - 1) = *(v31 - 1);
            *v30 = v33;
            v30 += 2;
            v31 += 2;
            v32 -= 8;
          }
          while (v32);
          if (v27 == v28)
            goto LABEL_33;
          v26 = &v20[4 * v28];
          v24 = v29;
        }
      }
      v47 = &v20[4 * v23];
      do
      {
        v48 = *v24++;
        *(_DWORD *)v26 = v48;
        v26 += 4;
      }
      while (v26 != v47);
    }
LABEL_33:
    v49 = *(void **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v20;
    *(_QWORD *)(a1 + 56) = v19;
    *(_DWORD *)(a1 + 64) = v21;
    *(_DWORD *)(a1 + 68) = v22;
    free(v49);
    goto LABEL_34;
  }
  *(_DWORD *)(a1 + 64) = v11;
  *(_DWORD *)(a1 + 68) = v10;
  v16 = (v10 * v11);
  if ((_DWORD)v16)
  {
    if (*(_QWORD *)(a1 + 56) < v16)
    {
      free(v15);
      v17 = (4 * v16 + 31) & 0x7FFFFFFE0;
      *(_QWORD *)(a1 + 48) = 0;
      *(_QWORD *)(a1 + 56) = v17 >> 2;
      memptr = 0;
      malloc_type_posix_memalign(&memptr, 0x20uLL, v17, 0x49090899uLL);
      v15 = memptr;
      *(_QWORD *)(a1 + 48) = memptr;
    }
  }
  else
  {
    free(v15);
    v15 = 0;
    *v8 = 0;
    v8[1] = 0;
  }
LABEL_19:
  v34 = (*(_DWORD *)(a1 + 68) * *(_DWORD *)(a1 + 64));
  if (!(_DWORD)v34)
    goto LABEL_34;
  v35 = *(int **)a2;
  v36 = (v34 - 1) & 0x3FFFFFFFFFFFFFFFLL;
  if (v36 < 7)
  {
    v37 = v15;
LABEL_27:
    v45 = (_DWORD *)v15 + v34;
    do
    {
      v46 = *v35++;
      *v37++ = v46;
    }
    while (v37 != v45);
    goto LABEL_34;
  }
  v37 = v15;
  if ((unint64_t)((char *)v15 - (char *)v35) < 0x20)
    goto LABEL_27;
  v38 = v36 + 1;
  v39 = (v36 + 1) & 0x7FFFFFFFFFFFFFF8;
  v40 = &v35[v39];
  v41 = v15 + 1;
  v42 = (__int128 *)(v35 + 4);
  v43 = v39;
  do
  {
    v44 = *v42;
    *(v41 - 1) = *(v42 - 1);
    *v41 = v44;
    v41 += 2;
    v42 += 2;
    v43 -= 8;
  }
  while (v43);
  if (v38 != v39)
  {
    v37 = (_DWORD *)v15 + v39;
    v35 = v40;
    goto LABEL_27;
  }
LABEL_34:
  if (*(_DWORD *)(a1 + 88) != v6)
  {
    v50 = (4 * v6 * v6 + 31) & 0x7FFFFFFE0;
    v51 = v50 >> 2;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v50, 0x49090899uLL);
    v52 = *(void **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = memptr;
    *(_QWORD *)(a1 + 80) = v51;
    *(_DWORD *)(a1 + 88) = v6;
    *(_DWORD *)(a1 + 92) = v6;
    free(v52);
  }
  if (v7 < v6)
    v6 = v7;
  if (*(_DWORD *)(a1 + 112) != v6)
  {
    v53 = (4 * v6 + 31) & 0x7FFFFFFE0;
    v54 = v53 >> 2;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v53, 0x49090899uLL);
    v55 = *(void **)(a1 + 96);
    *(_QWORD *)(a1 + 96) = memptr;
    *(_QWORD *)(a1 + 104) = v54;
    *(_DWORD *)(a1 + 112) = v6;
    *(_DWORD *)(a1 + 116) = 1;
    free(v55);
  }
  if (*(_DWORD *)(a1 + 136) != (_DWORD)v7)
  {
    v56 = (4 * (v7 * v7) + 31) & 0x7FFFFFFE0;
    v57 = v56 >> 2;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v56, 0x49090899uLL);
    v58 = *(void **)(a1 + 120);
    *(_QWORD *)(a1 + 120) = memptr;
    *(_QWORD *)(a1 + 128) = v57;
    *(_DWORD *)(a1 + 136) = v7;
    *(_DWORD *)(a1 + 140) = v7;
    free(v58);
  }
  if ((sub_20AB97CA0((uint64_t)v8) & 1) != 0)
  {
    if (v7 >= v3)
      v3 = v3;
    else
      v3 = v7;
    if (*(_DWORD *)(a1 + 16) != (_DWORD)v3)
    {
      v59 = (4 * v3 + 31) & 0x7FFFFFFE0;
      v60 = v59 >> 2;
      memptr = 0;
      malloc_type_posix_memalign(&memptr, 0x20uLL, v59, 0x49090899uLL);
      v61 = *(float32x4_t **)a1;
      *(_QWORD *)a1 = memptr;
      *(_QWORD *)(a1 + 8) = v60;
      *(_DWORD *)(a1 + 16) = v3;
      *(_DWORD *)(a1 + 20) = 1;
      free(v61);
      v62 = (4 * (v3 * v7) + 31) & 0x7FFFFFFE0;
      v63 = v62 >> 2;
      memptr = 0;
      malloc_type_posix_memalign(&memptr, 0x20uLL, v62, 0x49090899uLL);
      v64 = *(void **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = memptr;
      *(_QWORD *)(a1 + 32) = v63;
      *(_DWORD *)(a1 + 40) = v7;
      *(_DWORD *)(a1 + 44) = v3;
      free(v64);
    }
    if ((_DWORD)v3)
    {
      v65 = 0;
      v66 = *(float32x4_t **)(a1 + 96);
      v67 = *(float32x4_t **)a1;
      if (v3 < 8)
        goto LABEL_54;
      if ((unint64_t)((char *)v67 - (char *)v66) <= 0x1F)
        goto LABEL_54;
      v65 = v3 & 0xFFFFFFF8;
      v68 = v67 + 1;
      v69 = v66 + 1;
      v70 = v65;
      do
      {
        v71 = vmulq_f32(*v69, *v69);
        v68[-1] = vmulq_f32(v69[-1], v69[-1]);
        *v68 = v71;
        v68 += 2;
        v69 += 2;
        v70 -= 8;
      }
      while (v70);
      if (v65 != v3)
      {
LABEL_54:
        v72 = v3 - v65;
        v73 = v65;
        v74 = &v67->f32[v65];
        v75 = &v66->f32[v73];
        do
        {
          v76 = *v75++;
          *v74++ = v76 * v76;
          --v72;
        }
        while (v72);
      }
      v77 = 0;
      v78 = 0;
      v79 = *(_DWORD *)(a1 + 136);
      v80 = *(_QWORD *)(a1 + 120);
      v81 = *(_DWORD *)(a1 + 40);
      v82 = *(_QWORD *)(a1 + 24);
      v83 = v7 - 1;
      v84 = v7 & 0xFFFFFFF8;
      do
      {
        if (v7 >= 0x14)
        {
          v85 = 0;
          v86 = __CFADD__(v81 * v78, v83);
          if (!__CFADD__((_DWORD)v78, v83)
            && v79 == 1
            && !v86
            && !((unint64_t)(v7 - 1) >> 32)
            && v82 + 4 * (unint64_t)(v81 * v78) - (v80 + 4 * v78) >= 0x20)
          {
            v87 = 0;
            do
            {
              v88 = (__int128 *)(v80 + 4 * (v78 + v87));
              v89 = *v88;
              v90 = v88[1];
              v91 = (_OWORD *)(v82 + 4 * (v77 + v87));
              *v91 = v89;
              v91[1] = v90;
              v87 += 8;
            }
            while (v84 != v87);
            v85 = v7 & 0xFFFFFFF8;
            if (v84 == v7)
              goto LABEL_57;
          }
        }
        else
        {
          v85 = 0;
        }
        v92 = v78 + v79 * v85;
        do
        {
          *(_DWORD *)(v82 + 4 * (v77 + v85++)) = *(_DWORD *)(v80 + 4 * v92);
          v92 += v79;
        }
        while (v7 != v85);
LABEL_57:
        ++v78;
        v77 += v81;
      }
      while (v78 != v3);
    }
  }
  else
  {
    v93 = *(float32x4_t **)a1;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    free(v93);
    v94 = *(void **)(a1 + 24);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    free(v94);
  }
  return a1;
}

uint64_t sub_20AB97CA0(uint64_t a1)
{
  int v1;
  void *v2;
  void *v3;

  if (*(_DWORD *)(a1 + 20) >= *(_DWORD *)(a1 + 16))
    v1 = *(_DWORD *)(a1 + 16);
  else
    v1 = *(_DWORD *)(a1 + 20);
  if (4 * (8 * v1))
    v2 = malloc_type_malloc(4 * (8 * v1), 0xA153FF5uLL);
  else
    v2 = 0;
  sgesdd_NEWLAPACK();
  if (4 * (int)0.0)
    v3 = malloc_type_malloc(4 * (int)0.0, 0xA153FF5uLL);
  else
    v3 = 0;
  sgesdd_NEWLAPACK();
  if (v3)
    free(v3);
  if (v2)
    free(v2);
  return 1;
}

uint64_t cva::PCA<float>::operator()<cva::MatrixRef<float,0u,0u,false>,void>(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  size_t v12;
  size_t v13;
  void *v14;
  _DWORD *v15;
  unint64_t v16;
  size_t v17;
  size_t v18;
  char *v19;
  int v20;
  signed int v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  _DWORD *v29;
  void *v30;
  uint64_t v31;
  int v32;
  signed int v33;
  int v34;
  _DWORD *v35;
  uint64_t v36;
  int v37;
  _DWORD *v38;
  int v39;
  int v40;
  uint64_t v41;
  size_t v42;
  size_t v43;
  void *v44;
  int v45;
  signed int v46;
  int v47;
  _DWORD *v48;
  uint64_t v49;
  _DWORD *v50;
  int v51;
  _DWORD *v52;
  void *v53;
  uint64_t v54;
  int v55;
  signed int v56;
  int v57;
  _DWORD *v58;
  uint64_t v59;
  _DWORD *v60;
  int v61;
  _DWORD *v62;
  size_t v63;
  size_t v64;
  void *v65;
  unsigned int v66;
  size_t v67;
  size_t v68;
  void *v69;
  size_t v70;
  size_t v71;
  void *v72;
  uint64_t v73;
  size_t v74;
  size_t v75;
  float32x4_t *v76;
  size_t v77;
  size_t v78;
  void *v79;
  uint64_t v80;
  float32x4_t *v81;
  float32x4_t *v82;
  float32x4_t *v83;
  float32x4_t *v84;
  uint64_t v85;
  float32x4_t v86;
  uint64_t v87;
  uint64_t v88;
  float *v89;
  float *v90;
  float v91;
  int v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  BOOL v102;
  uint64_t v103;
  __int128 *v104;
  __int128 v105;
  __int128 v106;
  _OWORD *v107;
  float32x4_t *v108;
  void *v109;
  int v111;
  unsigned int v112;
  void *memptr;

  v7 = *(_DWORD *)a2;
  v6 = *(unsigned int *)(a2 + 4);
  v8 = (_QWORD *)(a1 + 48);
  if (*(_DWORD *)(a1 + 64) != *(_DWORD *)a2
    || (v9 = *(_DWORD *)a2, v10 = *(_DWORD *)(a2 + 4), v11 = *(_DWORD *)a2, *(_DWORD *)(a1 + 68) != v7))
  {
    v12 = (4 * v6 * v7 + 31) & 0x7FFFFFFE0;
    v13 = v12 >> 2;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v12, 0x49090899uLL);
    v14 = *(void **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = memptr;
    *(_QWORD *)(a1 + 56) = v13;
    *(_DWORD *)(a1 + 64) = v7;
    *(_DWORD *)(a1 + 68) = v6;
    free(v14);
    v11 = *(_DWORD *)a2;
    v10 = *(_DWORD *)(a2 + 4);
    if (*(_DWORD *)a2 != *(_DWORD *)(a1 + 64))
      goto LABEL_7;
    v9 = *(_DWORD *)(a1 + 68);
  }
  if (v10 == v9)
  {
    v15 = (_DWORD *)*v8;
    goto LABEL_23;
  }
LABEL_7:
  v15 = (_DWORD *)*v8;
  if (*(_QWORD *)(a2 + 8) - 4 * *(unsigned int *)(a2 + 20) == *v8)
  {
    v18 = (4 * v10 * v11 + 31) & 0x7FFFFFFE0;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v18, 0x49090899uLL);
    v19 = (char *)memptr;
    v21 = *(_DWORD *)a2;
    v20 = *(_DWORD *)(a2 + 4);
    v22 = *(_DWORD **)(a2 + 8);
    if (&v22[-*(unsigned int *)(a2 + 20)] == memptr)
    {
      v111 = *(_DWORD *)(a2 + 4);
      v112 = a3;
      v54 = (v20 * v21);
      v18 = (4 * v54 + 31) & 0x7FFFFFFE0;
      memptr = 0;
      malloc_type_posix_memalign(&memptr, 0x20uLL, v18, 0x49090899uLL);
      v30 = memptr;
      if ((_DWORD)v54)
      {
        v55 = 0;
        v56 = *(_DWORD *)a2;
        v57 = *(_DWORD *)(a2 + 16) - *(_DWORD *)a2;
        v58 = *(_DWORD **)(a2 + 8);
        if (!(*(_DWORD *)(a2 + 4) * *(_DWORD *)a2))
          v58 = 0;
        v59 = 4 * v54;
        v60 = memptr;
        do
        {
          *v60++ = *v58;
          if (v55 + 1 >= v56)
            v61 = v57;
          else
            v61 = 0;
          v62 = &v58[v61];
          if (v55 + 1 < v56)
            ++v55;
          else
            v55 = 0;
          v58 = v62 + 1;
          v59 -= 4;
        }
        while (v59);
      }
      free(v19);
      v20 = v111;
      a3 = v112;
    }
    else
    {
      v23 = (v20 * v21);
      if ((_DWORD)v23)
      {
        v24 = 0;
        v25 = 0;
        v26 = *(_DWORD *)(a2 + 16) - v21;
        v27 = 4 * v23;
        do
        {
          *(_DWORD *)&v19[v24] = *v22;
          if (v25 + 1 >= v21)
            v28 = v26;
          else
            v28 = 0;
          v29 = &v22[v28];
          if (v25 + 1 < v21)
            ++v25;
          else
            v25 = 0;
          v22 = v29 + 1;
          v24 += 4;
        }
        while (v27 != v24);
      }
      v30 = v19;
    }
    v53 = *(void **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v30;
    *(_QWORD *)(a1 + 56) = v18 >> 2;
    *(_DWORD *)(a1 + 64) = v21;
    *(_DWORD *)(a1 + 68) = v20;
    goto LABEL_62;
  }
  *(_DWORD *)(a1 + 64) = v11;
  *(_DWORD *)(a1 + 68) = v10;
  v16 = v10 * v11;
  if ((_DWORD)v16)
  {
    if (*(_QWORD *)(a1 + 56) < v16)
    {
      free(v15);
      v17 = (4 * v16 + 31) & 0x7FFFFFFE0;
      *(_QWORD *)(a1 + 48) = 0;
      *(_QWORD *)(a1 + 56) = v17 >> 2;
      memptr = 0;
      malloc_type_posix_memalign(&memptr, 0x20uLL, v17, 0x49090899uLL);
      v15 = memptr;
      *(_QWORD *)(a1 + 48) = memptr;
    }
  }
  else
  {
    free(v15);
    v15 = 0;
    *v8 = 0;
    v8[1] = 0;
  }
LABEL_23:
  if ((_DWORD *)(*(_QWORD *)(a2 + 8) - 4 * *(unsigned int *)(a2 + 20)) == v15)
  {
    v39 = *(_DWORD *)(a1 + 64);
    v40 = *(_DWORD *)(a1 + 68);
    v41 = (v40 * v39);
    v42 = (4 * v41 + 31) & 0x7FFFFFFE0;
    v43 = v42 >> 2;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v42, 0x49090899uLL);
    v44 = memptr;
    if ((_DWORD)v41)
    {
      v45 = 0;
      v46 = *(_DWORD *)a2;
      v47 = *(_DWORD *)(a2 + 16) - *(_DWORD *)a2;
      v48 = *(_DWORD **)(a2 + 8);
      if (!(*(_DWORD *)(a2 + 4) * *(_DWORD *)a2))
        v48 = 0;
      v49 = 4 * v41;
      v50 = memptr;
      do
      {
        *v50++ = *v48;
        if (v45 + 1 >= v46)
          v51 = v47;
        else
          v51 = 0;
        v52 = &v48[v51];
        if (v45 + 1 < v46)
          ++v45;
        else
          v45 = 0;
        v48 = v52 + 1;
        v49 -= 4;
      }
      while (v49);
    }
    v53 = *(void **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v44;
    *(_QWORD *)(a1 + 56) = v43;
    *(_DWORD *)(a1 + 64) = v39;
    *(_DWORD *)(a1 + 68) = v40;
LABEL_62:
    free(v53);
    goto LABEL_63;
  }
  v31 = (*(_DWORD *)(a1 + 68) * *(_DWORD *)(a1 + 64));
  if ((_DWORD)v31)
  {
    v32 = 0;
    v33 = *(_DWORD *)a2;
    v34 = *(_DWORD *)(a2 + 16) - *(_DWORD *)a2;
    if (*(_DWORD *)(a2 + 4) * *(_DWORD *)a2)
      v35 = *(_DWORD **)(a2 + 8);
    else
      v35 = 0;
    v36 = 4 * v31;
    do
    {
      *v15++ = *v35;
      if (v32 + 1 >= v33)
        v37 = v34;
      else
        v37 = 0;
      v38 = &v35[v37];
      if (v32 + 1 < v33)
        ++v32;
      else
        v32 = 0;
      v35 = v38 + 1;
      v36 -= 4;
    }
    while (v36);
  }
LABEL_63:
  if (*(_DWORD *)(a1 + 88) != v7)
  {
    v63 = (4 * v7 * v7 + 31) & 0x7FFFFFFE0;
    v64 = v63 >> 2;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v63, 0x49090899uLL);
    v65 = *(void **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = memptr;
    *(_QWORD *)(a1 + 80) = v64;
    *(_DWORD *)(a1 + 88) = v7;
    *(_DWORD *)(a1 + 92) = v7;
    free(v65);
  }
  if (v6 >= v7)
    v66 = v7;
  else
    v66 = v6;
  if (*(_DWORD *)(a1 + 112) != v66)
  {
    v67 = (4 * v66 + 31) & 0x7FFFFFFE0;
    v68 = v67 >> 2;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v67, 0x49090899uLL);
    v69 = *(void **)(a1 + 96);
    *(_QWORD *)(a1 + 96) = memptr;
    *(_QWORD *)(a1 + 104) = v68;
    *(_DWORD *)(a1 + 112) = v66;
    *(_DWORD *)(a1 + 116) = 1;
    free(v69);
  }
  if (*(_DWORD *)(a1 + 136) != (_DWORD)v6)
  {
    v70 = (4 * (v6 * v6) + 31) & 0x7FFFFFFE0;
    v71 = v70 >> 2;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v70, 0x49090899uLL);
    v72 = *(void **)(a1 + 120);
    *(_QWORD *)(a1 + 120) = memptr;
    *(_QWORD *)(a1 + 128) = v71;
    *(_DWORD *)(a1 + 136) = v6;
    *(_DWORD *)(a1 + 140) = v6;
    free(v72);
  }
  if ((sub_20AB97CA0((uint64_t)v8) & 1) != 0)
  {
    if (v6 >= a3)
      v73 = a3;
    else
      v73 = v6;
    if (*(_DWORD *)(a1 + 16) != (_DWORD)v73)
    {
      v74 = (4 * v73 + 31) & 0x7FFFFFFE0;
      v75 = v74 >> 2;
      memptr = 0;
      malloc_type_posix_memalign(&memptr, 0x20uLL, v74, 0x49090899uLL);
      v76 = *(float32x4_t **)a1;
      *(_QWORD *)a1 = memptr;
      *(_QWORD *)(a1 + 8) = v75;
      *(_DWORD *)(a1 + 16) = v73;
      *(_DWORD *)(a1 + 20) = 1;
      free(v76);
      v77 = (4 * (v73 * v6) + 31) & 0x7FFFFFFE0;
      v78 = v77 >> 2;
      memptr = 0;
      malloc_type_posix_memalign(&memptr, 0x20uLL, v77, 0x49090899uLL);
      v79 = *(void **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = memptr;
      *(_QWORD *)(a1 + 32) = v78;
      *(_DWORD *)(a1 + 40) = v6;
      *(_DWORD *)(a1 + 44) = v73;
      free(v79);
    }
    if ((_DWORD)v73)
    {
      v80 = 0;
      v81 = *(float32x4_t **)(a1 + 96);
      v82 = *(float32x4_t **)a1;
      if (v73 < 8)
        goto LABEL_84;
      if ((unint64_t)((char *)v82 - (char *)v81) <= 0x1F)
        goto LABEL_84;
      v80 = v73 & 0xFFFFFFF8;
      v83 = v82 + 1;
      v84 = v81 + 1;
      v85 = v80;
      do
      {
        v86 = vmulq_f32(*v84, *v84);
        v83[-1] = vmulq_f32(v84[-1], v84[-1]);
        *v83 = v86;
        v83 += 2;
        v84 += 2;
        v85 -= 8;
      }
      while (v85);
      if (v80 != v73)
      {
LABEL_84:
        v87 = v73 - v80;
        v88 = v80;
        v89 = &v82->f32[v80];
        v90 = &v81->f32[v88];
        do
        {
          v91 = *v90++;
          *v89++ = v91 * v91;
          --v87;
        }
        while (v87);
      }
      v92 = 0;
      v93 = 0;
      v94 = *(_DWORD *)(a1 + 136);
      v95 = *(_QWORD *)(a1 + 120);
      v96 = *(_DWORD *)(a1 + 40);
      v97 = *(_QWORD *)(a1 + 24);
      v98 = v6 - 1;
      v99 = v6 & 0xFFFFFFF8;
      do
      {
        if (v6 >= 0x14)
        {
          v100 = 0;
          v102 = __CFADD__(v96 * v93, v98);
          if (!__CFADD__((_DWORD)v93, v98)
            && v94 == 1
            && !v102
            && !((unint64_t)(v6 - 1) >> 32)
            && v97 + 4 * (unint64_t)(v96 * v93) - (v95 + 4 * v93) >= 0x20)
          {
            v103 = 0;
            do
            {
              v104 = (__int128 *)(v95 + 4 * (v93 + v103));
              v105 = *v104;
              v106 = v104[1];
              v107 = (_OWORD *)(v97 + 4 * (v92 + v103));
              *v107 = v105;
              v107[1] = v106;
              v103 += 8;
            }
            while (v99 != v103);
            v100 = v6 & 0xFFFFFFF8;
            if (v99 == v6)
              goto LABEL_87;
          }
        }
        else
        {
          v100 = 0;
        }
        v101 = v93 + v94 * v100;
        do
        {
          *(_DWORD *)(v97 + 4 * (v92 + v100++)) = *(_DWORD *)(v95 + 4 * v101);
          v101 += v94;
        }
        while (v6 != v100);
LABEL_87:
        ++v93;
        v92 += v96;
      }
      while (v93 != v73);
    }
  }
  else
  {
    v108 = *(float32x4_t **)a1;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    free(v108);
    v109 = *(void **)(a1 + 24);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    free(v109);
  }
  return a1;
}

void cva::PCA<float>::project<cva::Matrix<float,0u,0u,false>,void>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void **v6;
  int v7;
  void *v8;
  int v9;
  unint64_t v10;
  size_t v11;
  size_t v12;
  int v13;
  void *v14;
  size_t v15;
  void *v16;
  size_t v17;
  uint64_t v18;
  void *memptr;
  uint64_t v20;
  void **v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v6 = (void **)(a1 + 24);
  v7 = *(_DWORD *)(a2 + 16);
  if (v7 != *(_DWORD *)(a3 + 16) || *(_DWORD *)(a1 + 44) != *(_DWORD *)(a3 + 20))
  {
    v8 = *(void **)a3;
    if (*(_QWORD *)a2 == *(_QWORD *)a3 || *v6 == v8)
    {
      v12 = (4 * (*(_DWORD *)(a1 + 44) * v7) + 31) & 0x7FFFFFFE0;
      v17 = v12 >> 2;
      memptr = 0;
      malloc_type_posix_memalign(&memptr, 0x20uLL, v12, 0x49090899uLL);
      v16 = memptr;
      v13 = *(_DWORD *)(a1 + 44);
      LODWORD(v18) = *(_DWORD *)(a2 + 16);
      HIDWORD(v18) = v13;
      v20 = a2;
      v21 = v6;
      v22 = 1065353216;
      sub_20AB986A0((uint64_t)&v16, (uint64_t)&memptr);
      v14 = *(void **)a3;
      v15 = v17;
      *(_QWORD *)a3 = v16;
      *(_QWORD *)(a3 + 8) = v15;
      *(_QWORD *)(a3 + 16) = v18;
      free(v14);
      return;
    }
    v9 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a3 + 16) = v7;
    *(_DWORD *)(a3 + 20) = v9;
    v10 = (v9 * v7);
    if ((_DWORD)v10)
    {
      if (*(_QWORD *)(a3 + 8) < v10)
      {
        free(v8);
        v11 = (4 * v10 + 31) & 0x7FFFFFFE0;
        *(_QWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = v11 >> 2;
        memptr = 0;
        malloc_type_posix_memalign(&memptr, 0x20uLL, v11, 0x49090899uLL);
        *(_QWORD *)a3 = memptr;
      }
    }
    else
    {
      free(v8);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
    }
  }
  v20 = a2;
  v21 = v6;
  v22 = 1065353216;
  sub_20AB986A0(a3, (uint64_t)&memptr);
}

void sub_20AB986A0(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  int v8;
  void *v9;
  size_t v10;
  int v11;
  void *v12;
  size_t v13;
  uint64_t v14;
  void *memptr;

  v4 = *(void **)a1;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  if (*(void **)v5 == v4 || *(void **)v6 == v4)
  {
    v7 = (4 * (*(_DWORD *)(v6 + 20) * *(_DWORD *)(v5 + 16)) + 31) & 0x7FFFFFFE0;
    v13 = v7 >> 2;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v7, 0x49090899uLL);
    v12 = memptr;
    v8 = *(_DWORD *)(*(_QWORD *)(a2 + 16) + 20);
    LODWORD(v14) = *(_DWORD *)(*(_QWORD *)(a2 + 8) + 16);
    HIDWORD(v14) = v8;
    sub_20AB986A0(&v12, a2);
    v9 = *(void **)a1;
    v10 = v13;
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v10;
    *(_QWORD *)(a1 + 16) = v14;
    free(v9);
  }
  else if (*(_DWORD *)(v5 + 20) * *(_DWORD *)(v5 + 16) && *(_DWORD *)(v6 + 20) * *(_DWORD *)(v6 + 16))
  {
    cblas_sgemm_NEWLAPACK();
  }
  else
  {
    v11 = *(_DWORD *)(a1 + 20);
    if (v11 * *(_DWORD *)(a1 + 16))
      bzero(v4, 4 * (v11 * *(_DWORD *)(a1 + 16)));
  }
}

void cva::PCA<float>::project<cva::MatrixRef<float,0u,0u,false>,void>(uint64_t a1, int *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  BOOL v14;
  _DWORD *v15;
  uint64_t v16;
  void *v17;
  int v18;
  unsigned int v19;
  int *v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  BOOL v27;
  _DWORD *v28;
  _DWORD *v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  void *v33[2];
  int v34;
  int v35;
  void *memptr;
  _BYTE v37[8];
  int *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v38 = a2;
  v39 = a1 + 24;
  v40 = 1065353216;
  v6 = *((_QWORD *)a3 + 1);
  v7 = v6 - 4 * a3[5];
  if (*((_QWORD *)a2 + 1) - 4 * a2[5] == v7 || *(_QWORD *)(a1 + 24) == v7)
  {
    v8 = (4 * (*(_DWORD *)(a1 + 44) * *a2) + 31) & 0x7FFFFFFE0;
    v33[1] = (void *)(v8 >> 2);
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v8, 0x49090899uLL);
    v33[0] = memptr;
    v9 = *(_DWORD *)(a1 + 44);
    v34 = *a2;
    v35 = v9;
    sub_20AB989C8((uint64_t)v33, (uint64_t)v37);
    v10 = *a3;
    v11 = a3[1];
    v12 = v11 * *a3;
    v13 = a3[4];
    v14 = v12 == 0;
    if (v12)
      v15 = (_DWORD *)*((_QWORD *)a3 + 1);
    else
      v15 = 0;
    v16 = *((_QWORD *)a3 + 1) + 4 * (v13 * v11);
    if (v14)
      v16 = 0;
    v17 = v33[0];
    if (v15 != (_DWORD *)v16)
    {
      v18 = 0;
      v19 = v13 - v10;
      v20 = (int *)v33[0];
      do
      {
        v21 = *v20++;
        *v15 = v21;
        if (v18 + 1 >= v10)
          v22 = v19;
        else
          v22 = 0;
        v15 += v22 + 1;
        if (v18 + 1 < v10)
          ++v18;
        else
          v18 = 0;
      }
      while (v15 != (_DWORD *)v16);
    }
    free(v17);
  }
  else if (a2[1] * *a2 && *(_DWORD *)(a1 + 44) * *(_DWORD *)(a1 + 40))
  {
    cblas_sgemm_NEWLAPACK();
  }
  else
  {
    v23 = *a3;
    v24 = a3[1];
    v25 = v24 * *a3;
    v26 = a3[4];
    v27 = v25 == 0;
    if (v25)
      v28 = (_DWORD *)*((_QWORD *)a3 + 1);
    else
      v28 = 0;
    v29 = (_DWORD *)(v6 + 4 * (v26 * v24));
    if (v27)
      v29 = 0;
    if (v28 != v29)
    {
      v30 = 0;
      v31 = v26 - v23;
      do
      {
        *v28 = 0;
        if (v30 + 1 >= v23)
          v32 = v31;
        else
          v32 = 0;
        v28 += v32 + 1;
        if (v30 + 1 < v23)
          ++v30;
        else
          v30 = 0;
      }
      while (v28 != v29);
    }
  }
}

void sub_20AB989C8(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  int v8;
  void *v9;
  size_t v10;
  int v11;
  void *v12;
  size_t v13;
  uint64_t v14;
  void *memptr;

  v4 = *(void **)a1;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  if ((void *)(*(_QWORD *)(v5 + 8) - 4 * *(unsigned int *)(v5 + 20)) == v4 || *(void **)v6 == v4)
  {
    v7 = (4 * (*(_DWORD *)(v6 + 20) * *(_DWORD *)v5) + 31) & 0x7FFFFFFE0;
    v13 = v7 >> 2;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v7, 0x49090899uLL);
    v12 = memptr;
    v8 = *(_DWORD *)(*(_QWORD *)(a2 + 16) + 20);
    LODWORD(v14) = **(_DWORD **)(a2 + 8);
    HIDWORD(v14) = v8;
    sub_20AB989C8(&v12, a2);
    v9 = *(void **)a1;
    v10 = v13;
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v10;
    *(_QWORD *)(a1 + 16) = v14;
    free(v9);
  }
  else if (*(_DWORD *)(v5 + 4) * *(_DWORD *)v5 && *(_DWORD *)(v6 + 20) * *(_DWORD *)(v6 + 16))
  {
    cblas_sgemm_NEWLAPACK();
  }
  else
  {
    v11 = *(_DWORD *)(a1 + 20);
    if (v11 * *(_DWORD *)(a1 + 16))
      bzero(v4, 4 * (v11 * *(_DWORD *)(a1 + 16)));
  }
}

void cva::PCA<float>::backProject<cva::Matrix<float,0u,0u,false>,void>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  void *v6;
  int v7;
  unint64_t v8;
  size_t v9;
  size_t v10;
  int v11;
  void *v12;
  size_t v13;
  uint64_t v14;
  void *v15;
  size_t v16;
  uint64_t v17;
  void *memptr;
  uint64_t v19;
  uint64_t *v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v14 = a1 + 24;
  v5 = *(_DWORD *)(a2 + 16);
  if (v5 != *(_DWORD *)(a3 + 16) || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a3 + 20))
  {
    v6 = *(void **)a3;
    if (*(_QWORD *)a2 == *(_QWORD *)a3 || *(void **)(a1 + 24) == v6)
    {
      v10 = (4 * (*(_DWORD *)(a1 + 40) * v5) + 31) & 0x7FFFFFFE0;
      v16 = v10 >> 2;
      memptr = 0;
      malloc_type_posix_memalign(&memptr, 0x20uLL, v10, 0x49090899uLL);
      v15 = memptr;
      v11 = *(_DWORD *)(v14 + 16);
      LODWORD(v17) = *(_DWORD *)(a2 + 16);
      HIDWORD(v17) = v11;
      v19 = a2;
      v20 = &v14;
      v21 = 1065353216;
      sub_20AB98CA0((uint64_t)&v15, (uint64_t)&memptr);
      v12 = *(void **)a3;
      v13 = v16;
      *(_QWORD *)a3 = v15;
      *(_QWORD *)(a3 + 8) = v13;
      *(_QWORD *)(a3 + 16) = v17;
      free(v12);
      return;
    }
    v7 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a3 + 16) = v5;
    *(_DWORD *)(a3 + 20) = v7;
    v8 = (v7 * v5);
    if ((_DWORD)v8)
    {
      if (*(_QWORD *)(a3 + 8) < v8)
      {
        free(v6);
        v9 = (4 * v8 + 31) & 0x7FFFFFFE0;
        *(_QWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = v9 >> 2;
        memptr = 0;
        malloc_type_posix_memalign(&memptr, 0x20uLL, v9, 0x49090899uLL);
        *(_QWORD *)a3 = memptr;
      }
    }
    else
    {
      free(v6);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
    }
  }
  v19 = a2;
  v20 = &v14;
  v21 = 1065353216;
  sub_20AB98CA0(a3, (uint64_t)&memptr);
}

void sub_20AB98CA0(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  int v8;
  void *v9;
  size_t v10;
  int v11;
  void *v12;
  size_t v13;
  uint64_t v14;
  void *memptr;

  v4 = *(void **)a1;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = **(_QWORD **)(a2 + 16);
  if (*(void **)v5 == v4 || *(void **)v6 == v4)
  {
    v7 = (4 * (*(_DWORD *)(v6 + 16) * *(_DWORD *)(v5 + 16)) + 31) & 0x7FFFFFFE0;
    v13 = v7 >> 2;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v7, 0x49090899uLL);
    v12 = memptr;
    v8 = *(_DWORD *)(**(_QWORD **)(a2 + 16) + 16);
    LODWORD(v14) = *(_DWORD *)(*(_QWORD *)(a2 + 8) + 16);
    HIDWORD(v14) = v8;
    sub_20AB98CA0(&v12, a2);
    v9 = *(void **)a1;
    v10 = v13;
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v10;
    *(_QWORD *)(a1 + 16) = v14;
    free(v9);
  }
  else if (*(_DWORD *)(v5 + 20) * *(_DWORD *)(v5 + 16) && *(_DWORD *)(v6 + 16) * *(_DWORD *)(v6 + 20))
  {
    cblas_sgemm_NEWLAPACK();
  }
  else
  {
    v11 = *(_DWORD *)(a1 + 20);
    if (v11 * *(_DWORD *)(a1 + 16))
      bzero(v4, 4 * (v11 * *(_DWORD *)(a1 + 16)));
  }
}

void cva::PCA<float>::backProject<cva::MatrixRef<float,0u,0u,false>,void>(uint64_t a1, int *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  _DWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  unsigned int v18;
  int *v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  BOOL v26;
  _DWORD *v27;
  _DWORD *v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  void *v33[2];
  int v34;
  int v35;
  void *memptr;
  _BYTE v37[8];
  int *v38;
  uint64_t *v39;
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v32 = a1 + 24;
  v38 = a2;
  v39 = &v32;
  v40 = 1065353216;
  v5 = *((_QWORD *)a3 + 1);
  v6 = v5 - 4 * a3[5];
  if (*((_QWORD *)a2 + 1) - 4 * a2[5] == v6 || *(_QWORD *)(a1 + 24) == v6)
  {
    v7 = (4 * (*(_DWORD *)(a1 + 40) * *a2) + 31) & 0x7FFFFFFE0;
    v33[1] = (void *)(v7 >> 2);
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v7, 0x49090899uLL);
    v33[0] = memptr;
    v8 = *(_DWORD *)(v32 + 16);
    v34 = *a2;
    v35 = v8;
    sub_20AB98FD0((uint64_t)v33, (uint64_t)v37);
    v9 = *a3;
    v10 = a3[1];
    v11 = v10 * *a3;
    v12 = a3[4];
    v13 = v11 == 0;
    if (v11)
      v14 = (_DWORD *)*((_QWORD *)a3 + 1);
    else
      v14 = 0;
    v15 = *((_QWORD *)a3 + 1) + 4 * (v12 * v10);
    if (v13)
      v15 = 0;
    v16 = v33[0];
    if (v14 != (_DWORD *)v15)
    {
      v17 = 0;
      v18 = v12 - v9;
      v19 = (int *)v33[0];
      do
      {
        v20 = *v19++;
        *v14 = v20;
        if (v17 + 1 >= v9)
          v21 = v18;
        else
          v21 = 0;
        v14 += v21 + 1;
        if (v17 + 1 < v9)
          ++v17;
        else
          v17 = 0;
      }
      while (v14 != (_DWORD *)v15);
    }
    free(v16);
  }
  else if (a2[1] * *a2 && *(_DWORD *)(a1 + 40) * *(_DWORD *)(a1 + 44))
  {
    cblas_sgemm_NEWLAPACK();
  }
  else
  {
    v22 = *a3;
    v23 = a3[1];
    v24 = v23 * *a3;
    v25 = a3[4];
    v26 = v24 == 0;
    if (v24)
      v27 = (_DWORD *)*((_QWORD *)a3 + 1);
    else
      v27 = 0;
    v28 = (_DWORD *)(v5 + 4 * (v25 * v23));
    if (v26)
      v28 = 0;
    if (v27 != v28)
    {
      v29 = 0;
      v30 = v25 - v22;
      do
      {
        *v27 = 0;
        if (v29 + 1 >= v22)
          v31 = v30;
        else
          v31 = 0;
        v27 += v31 + 1;
        if (v29 + 1 < v22)
          ++v29;
        else
          v29 = 0;
      }
      while (v27 != v28);
    }
  }
}

void sub_20AB98FD0(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  int v8;
  void *v9;
  size_t v10;
  int v11;
  void *v12;
  size_t v13;
  uint64_t v14;
  void *memptr;

  v4 = *(void **)a1;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = **(_QWORD **)(a2 + 16);
  if ((void *)(*(_QWORD *)(v5 + 8) - 4 * *(unsigned int *)(v5 + 20)) == v4 || *(void **)v6 == v4)
  {
    v7 = (4 * (*(_DWORD *)(v6 + 16) * *(_DWORD *)v5) + 31) & 0x7FFFFFFE0;
    v13 = v7 >> 2;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v7, 0x49090899uLL);
    v12 = memptr;
    v8 = *(_DWORD *)(**(_QWORD **)(a2 + 16) + 16);
    LODWORD(v14) = **(_DWORD **)(a2 + 8);
    HIDWORD(v14) = v8;
    sub_20AB98FD0(&v12, a2);
    v9 = *(void **)a1;
    v10 = v13;
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v10;
    *(_QWORD *)(a1 + 16) = v14;
    free(v9);
  }
  else if (*(_DWORD *)(v5 + 4) * *(_DWORD *)v5 && *(_DWORD *)(v6 + 16) * *(_DWORD *)(v6 + 20))
  {
    cblas_sgemm_NEWLAPACK();
  }
  else
  {
    v11 = *(_DWORD *)(a1 + 20);
    if (v11 * *(_DWORD *)(a1 + 16))
      bzero(v4, 4 * (v11 * *(_DWORD *)(a1 + 16)));
  }
}

double cva::PCA<double>::PCA(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

{
  double result;

  result = 0.0;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t cva::PCA<double>::eigenvectors(uint64_t a1)
{
  return a1 + 24;
}

char **cva::PCA<double>::operator()<cva::Matrix<double,0u,0u,false>,void>(void **a1, uint64_t a2, int a3)
{
  uint64_t v3;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  int v10;
  int v11;
  size_t v12;
  size_t v13;
  char *v14;
  _OWORD *v15;
  unint64_t v16;
  size_t v17;
  size_t v18;
  size_t v19;
  char *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  _OWORD *v30;
  __int128 *v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  _OWORD *v41;
  __int128 *v42;
  uint64_t v43;
  __int128 v44;
  _QWORD *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  size_t v50;
  size_t v51;
  char *v52;
  size_t v53;
  size_t v54;
  char *v55;
  size_t v56;
  size_t v57;
  char *v58;
  size_t v59;
  size_t v60;
  void *v61;
  size_t v62;
  size_t v63;
  char *v64;
  uint64_t v65;
  float64x2_t *v66;
  float64x2_t *v67;
  float64x2_t *v68;
  float64x2_t *v69;
  uint64_t v70;
  float64x2_t v71;
  uint64_t v72;
  uint64_t v73;
  double *v74;
  double *v75;
  double v76;
  int v77;
  uint64_t v78;
  int v79;
  char *v80;
  int v81;
  char *v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  uint64_t v87;
  __int128 *v88;
  __int128 v89;
  __int128 v90;
  char *v91;
  unsigned int v92;
  void *v93;
  char *v94;
  void *memptr;

  LODWORD(v3) = a3;
  v6 = *(_DWORD *)(a2 + 16);
  v7 = *(unsigned int *)(a2 + 20);
  v8 = a1 + 6;
  if (*((_DWORD *)a1 + 16) != v6
    || (v9 = *(_DWORD *)(a2 + 16), v10 = *(_DWORD *)(a2 + 20), v11 = v9, *((_DWORD *)a1 + 17) != v6))
  {
    v12 = (8 * v7 * v6 + 31) & 0xFFFFFFFE0;
    v13 = v12 >> 3;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v12, 0x49090899uLL);
    v14 = (char *)a1[6];
    a1[6] = memptr;
    a1[7] = (void *)v13;
    *((_DWORD *)a1 + 16) = v6;
    *((_DWORD *)a1 + 17) = v7;
    free(v14);
    v11 = *(_DWORD *)(a2 + 16);
    v10 = *(_DWORD *)(a2 + 20);
    if (v11 != *((_DWORD *)a1 + 16))
      goto LABEL_7;
    v9 = *((_DWORD *)a1 + 17);
  }
  if (v10 == v9)
  {
    v15 = (_OWORD *)*v8;
    goto LABEL_19;
  }
LABEL_7:
  v15 = (_OWORD *)*v8;
  if (*(_QWORD *)a2 == *v8)
  {
    v18 = (8 * (v10 * v11) + 31) & 0xFFFFFFFE0;
    v19 = v18 >> 3;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v18, 0x49090899uLL);
    v20 = (char *)memptr;
    v21 = *(_DWORD *)(a2 + 16);
    v22 = *(_DWORD *)(a2 + 20);
    v23 = (v22 * v21);
    if ((_DWORD)v23)
    {
      v24 = *(uint64_t **)a2;
      v25 = (v23 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v25 < 3)
      {
        v26 = (char *)memptr;
      }
      else
      {
        v26 = (char *)memptr;
        if ((unint64_t)((_BYTE *)memptr - (_BYTE *)v24) >= 0x20)
        {
          v27 = v25 + 1;
          v28 = (v25 + 1) & 0x3FFFFFFFFFFFFFFCLL;
          v29 = &v24[v28];
          v30 = (char *)memptr + 16;
          v31 = (__int128 *)(v24 + 2);
          v32 = v28;
          do
          {
            v33 = *v31;
            *(v30 - 1) = *(v31 - 1);
            *v30 = v33;
            v30 += 2;
            v31 += 2;
            v32 -= 4;
          }
          while (v32);
          if (v27 == v28)
            goto LABEL_33;
          v26 = &v20[8 * v28];
          v24 = v29;
        }
      }
      v47 = &v20[8 * v23];
      do
      {
        v48 = *v24++;
        *(_QWORD *)v26 = v48;
        v26 += 8;
      }
      while (v26 != v47);
    }
LABEL_33:
    v49 = (char *)a1[6];
    a1[6] = v20;
    a1[7] = (void *)v19;
    *((_DWORD *)a1 + 16) = v21;
    *((_DWORD *)a1 + 17) = v22;
    free(v49);
    goto LABEL_34;
  }
  *((_DWORD *)a1 + 16) = v11;
  *((_DWORD *)a1 + 17) = v10;
  v16 = (v10 * v11);
  if ((_DWORD)v16)
  {
    if ((unint64_t)a1[7] < v16)
    {
      free(v15);
      v17 = (8 * v16 + 31) & 0xFFFFFFFE0;
      a1[6] = 0;
      a1[7] = (void *)(v17 >> 3);
      memptr = 0;
      malloc_type_posix_memalign(&memptr, 0x20uLL, v17, 0x49090899uLL);
      v15 = memptr;
      a1[6] = memptr;
    }
  }
  else
  {
    free(v15);
    v15 = 0;
    *v8 = 0;
    v8[1] = 0;
  }
LABEL_19:
  v34 = (*((_DWORD *)a1 + 17) * *((_DWORD *)a1 + 16));
  if (!(_DWORD)v34)
    goto LABEL_34;
  v35 = *(uint64_t **)a2;
  v36 = (v34 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (v36 < 3)
  {
    v37 = v15;
LABEL_27:
    v45 = (_QWORD *)v15 + v34;
    do
    {
      v46 = *v35++;
      *v37++ = v46;
    }
    while (v37 != v45);
    goto LABEL_34;
  }
  v37 = v15;
  if ((unint64_t)((char *)v15 - (char *)v35) < 0x20)
    goto LABEL_27;
  v38 = v36 + 1;
  v39 = (v36 + 1) & 0x3FFFFFFFFFFFFFFCLL;
  v40 = &v35[v39];
  v41 = v15 + 1;
  v42 = (__int128 *)(v35 + 2);
  v43 = v39;
  do
  {
    v44 = *v42;
    *(v41 - 1) = *(v42 - 1);
    *v41 = v44;
    v41 += 2;
    v42 += 2;
    v43 -= 4;
  }
  while (v43);
  if (v38 != v39)
  {
    v37 = (_QWORD *)v15 + v39;
    v35 = v40;
    goto LABEL_27;
  }
LABEL_34:
  if (*((_DWORD *)a1 + 22) != v6)
  {
    v50 = (8 * v6 * v6 + 31) & 0xFFFFFFFE0;
    v51 = v50 >> 3;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v50, 0x49090899uLL);
    v52 = (char *)a1[9];
    a1[9] = memptr;
    a1[10] = (void *)v51;
    *((_DWORD *)a1 + 22) = v6;
    *((_DWORD *)a1 + 23) = v6;
    free(v52);
  }
  if (v7 < v6)
    v6 = v7;
  if (*((_DWORD *)a1 + 28) != v6)
  {
    v53 = (8 * v6 + 31) & 0xFFFFFFFE0;
    v54 = v53 >> 3;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v53, 0x49090899uLL);
    v55 = (char *)a1[12];
    a1[12] = memptr;
    a1[13] = (void *)v54;
    *((_DWORD *)a1 + 28) = v6;
    *((_DWORD *)a1 + 29) = 1;
    free(v55);
  }
  if (*((_DWORD *)a1 + 34) != (_DWORD)v7)
  {
    v56 = (8 * (v7 * v7) + 31) & 0xFFFFFFFE0;
    v57 = v56 >> 3;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v56, 0x49090899uLL);
    v58 = (char *)a1[15];
    a1[15] = memptr;
    a1[16] = (void *)v57;
    *((_DWORD *)a1 + 34) = v7;
    *((_DWORD *)a1 + 35) = v7;
    free(v58);
  }
  if ((sub_20AB99718((uint64_t)v8) & 1) != 0)
  {
    if (v7 >= v3)
      v3 = v3;
    else
      v3 = v7;
    if (*((_DWORD *)a1 + 4) != (_DWORD)v3)
    {
      v59 = (8 * v3 + 31) & 0xFFFFFFFE0;
      v60 = v59 >> 3;
      memptr = 0;
      malloc_type_posix_memalign(&memptr, 0x20uLL, v59, 0x49090899uLL);
      v61 = *a1;
      *a1 = memptr;
      a1[1] = (void *)v60;
      *((_DWORD *)a1 + 4) = v3;
      *((_DWORD *)a1 + 5) = 1;
      free(v61);
      v62 = (8 * (v3 * v7) + 31) & 0xFFFFFFFE0;
      v63 = v62 >> 3;
      memptr = 0;
      malloc_type_posix_memalign(&memptr, 0x20uLL, v62, 0x49090899uLL);
      v64 = (char *)a1[3];
      a1[3] = memptr;
      a1[4] = (void *)v63;
      *((_DWORD *)a1 + 10) = v7;
      *((_DWORD *)a1 + 11) = v3;
      free(v64);
    }
    if ((_DWORD)v3)
    {
      v65 = 0;
      v66 = (float64x2_t *)a1[12];
      v67 = (float64x2_t *)*a1;
      if (v3 < 4)
        goto LABEL_54;
      if ((unint64_t)((char *)v67 - (char *)v66) <= 0x1F)
        goto LABEL_54;
      v65 = v3 & 0xFFFFFFFC;
      v68 = v67 + 1;
      v69 = v66 + 1;
      v70 = v65;
      do
      {
        v71 = vmulq_f64(*v69, *v69);
        v68[-1] = vmulq_f64(v69[-1], v69[-1]);
        *v68 = v71;
        v68 += 2;
        v69 += 2;
        v70 -= 4;
      }
      while (v70);
      if (v65 != v3)
      {
LABEL_54:
        v72 = v3 - v65;
        v73 = v65;
        v74 = &v67->f64[v65];
        v75 = &v66->f64[v73];
        do
        {
          v76 = *v75++;
          *v74++ = v76 * v76;
          --v72;
        }
        while (v72);
      }
      v77 = 0;
      v78 = 0;
      v79 = *((_DWORD *)a1 + 34);
      v80 = (char *)a1[15];
      v81 = *((_DWORD *)a1 + 10);
      v82 = (char *)a1[3];
      v83 = v7 - 1;
      v84 = v7 & 0xFFFFFFFC;
      do
      {
        if (v7 >= 0x12)
        {
          v85 = 0;
          v86 = __CFADD__(v81 * v78, v83);
          if (!__CFADD__((_DWORD)v78, v83)
            && v79 == 1
            && !v86
            && !((unint64_t)(v7 - 1) >> 32)
            && (unint64_t)(&v82[8 * (v81 * v78)] - &v80[8 * v78]) >= 0x20)
          {
            v87 = 0;
            do
            {
              v88 = (__int128 *)&v80[8 * (v78 + v87)];
              v89 = *v88;
              v90 = v88[1];
              v91 = &v82[8 * (v77 + v87)];
              *(_OWORD *)v91 = v89;
              *((_OWORD *)v91 + 1) = v90;
              v87 += 4;
            }
            while (v84 != v87);
            v85 = v7 & 0xFFFFFFFC;
            if (v84 == v7)
              goto LABEL_57;
          }
        }
        else
        {
          v85 = 0;
        }
        v92 = v78 + v79 * v85;
        do
        {
          *(_QWORD *)&v82[8 * (v77 + v85++)] = *(_QWORD *)&v80[8 * v92];
          v92 += v79;
        }
        while (v7 != v85);
LABEL_57:
        ++v78;
        v77 += v81;
      }
      while (v78 != v3);
    }
  }
  else
  {
    v93 = *a1;
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
    free(v93);
    v94 = (char *)a1[3];
    a1[4] = 0;
    a1[5] = 0;
    a1[3] = 0;
    free(v94);
  }
  return (char **)a1;
}

uint64_t sub_20AB99718(uint64_t a1)
{
  int v1;
  void *v2;
  void *v3;

  if (*(_DWORD *)(a1 + 20) >= *(_DWORD *)(a1 + 16))
    v1 = *(_DWORD *)(a1 + 16);
  else
    v1 = *(_DWORD *)(a1 + 20);
  if (4 * (8 * v1))
    v2 = malloc_type_malloc(4 * (8 * v1), 0xA153FF5uLL);
  else
    v2 = 0;
  dgesdd_NEWLAPACK();
  if (8 * (int)0.0)
    v3 = malloc_type_malloc(8 * (int)0.0, 0xA153FF5uLL);
  else
    v3 = 0;
  dgesdd_NEWLAPACK();
  if (v3)
    free(v3);
  if (v2)
    free(v2);
  return 1;
}

char **cva::PCA<double>::operator()<cva::MatrixRef<double,0u,0u,false>,void>(void **a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  size_t v12;
  size_t v13;
  char *v14;
  _QWORD *v15;
  unint64_t v16;
  size_t v17;
  size_t v18;
  char *v19;
  int v20;
  signed int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  int v32;
  signed int v33;
  int v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  _QWORD *v38;
  int v39;
  int v40;
  uint64_t v41;
  size_t v42;
  size_t v43;
  char *v44;
  int v45;
  signed int v46;
  int v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  int v51;
  _QWORD *v52;
  char *v53;
  uint64_t v54;
  int v55;
  signed int v56;
  int v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  int v61;
  _QWORD *v62;
  size_t v63;
  size_t v64;
  char *v65;
  unsigned int v66;
  size_t v67;
  size_t v68;
  char *v69;
  size_t v70;
  size_t v71;
  char *v72;
  uint64_t v73;
  size_t v74;
  size_t v75;
  void *v76;
  size_t v77;
  size_t v78;
  char *v79;
  uint64_t v80;
  float64x2_t *v81;
  float64x2_t *v82;
  float64x2_t *v83;
  float64x2_t *v84;
  uint64_t v85;
  float64x2_t v86;
  uint64_t v87;
  uint64_t v88;
  double *v89;
  double *v90;
  double v91;
  int v92;
  uint64_t v93;
  int v94;
  char *v95;
  int v96;
  char *v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  BOOL v102;
  uint64_t v103;
  __int128 *v104;
  __int128 v105;
  __int128 v106;
  char *v107;
  void *v108;
  char *v109;
  int v111;
  unsigned int v112;
  void *memptr;

  v7 = *(_DWORD *)a2;
  v6 = *(unsigned int *)(a2 + 4);
  v8 = a1 + 6;
  if (*((_DWORD *)a1 + 16) != *(_DWORD *)a2
    || (v9 = *(_DWORD *)a2, v10 = *(_DWORD *)(a2 + 4), v11 = *(_DWORD *)a2, *((_DWORD *)a1 + 17) != v7))
  {
    v12 = (8 * v6 * v7 + 31) & 0xFFFFFFFE0;
    v13 = v12 >> 3;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v12, 0x49090899uLL);
    v14 = (char *)a1[6];
    a1[6] = memptr;
    a1[7] = (void *)v13;
    *((_DWORD *)a1 + 16) = v7;
    *((_DWORD *)a1 + 17) = v6;
    free(v14);
    v11 = *(_DWORD *)a2;
    v10 = *(_DWORD *)(a2 + 4);
    if (*(_DWORD *)a2 != *((_DWORD *)a1 + 16))
      goto LABEL_7;
    v9 = *((_DWORD *)a1 + 17);
  }
  if (v10 == v9)
  {
    v15 = (_QWORD *)*v8;
    goto LABEL_23;
  }
LABEL_7:
  v15 = (_QWORD *)*v8;
  if (*(_QWORD *)(a2 + 8) - 8 * *(unsigned int *)(a2 + 20) == *v8)
  {
    v18 = (8 * v10 * v11 + 31) & 0xFFFFFFFE0;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v18, 0x49090899uLL);
    v19 = (char *)memptr;
    v21 = *(_DWORD *)a2;
    v20 = *(_DWORD *)(a2 + 4);
    v22 = *(_QWORD **)(a2 + 8);
    if (&v22[-*(unsigned int *)(a2 + 20)] == memptr)
    {
      v111 = *(_DWORD *)(a2 + 4);
      v112 = a3;
      v54 = (v20 * v21);
      v18 = (8 * v54 + 31) & 0xFFFFFFFE0;
      memptr = 0;
      malloc_type_posix_memalign(&memptr, 0x20uLL, v18, 0x49090899uLL);
      v30 = (char *)memptr;
      if ((_DWORD)v54)
      {
        v55 = 0;
        v56 = *(_DWORD *)a2;
        v57 = *(_DWORD *)(a2 + 16) - *(_DWORD *)a2;
        v58 = *(_QWORD **)(a2 + 8);
        if (!(*(_DWORD *)(a2 + 4) * *(_DWORD *)a2))
          v58 = 0;
        v59 = 8 * v54;
        v60 = memptr;
        do
        {
          *v60++ = *v58;
          if (v55 + 1 >= v56)
            v61 = v57;
          else
            v61 = 0;
          v62 = &v58[v61];
          if (v55 + 1 < v56)
            ++v55;
          else
            v55 = 0;
          v58 = v62 + 1;
          v59 -= 8;
        }
        while (v59);
      }
      free(v19);
      v20 = v111;
      a3 = v112;
    }
    else
    {
      v23 = (v20 * v21);
      if ((_DWORD)v23)
      {
        v24 = 0;
        v25 = 0;
        v26 = *(_DWORD *)(a2 + 16) - v21;
        v27 = 8 * v23;
        do
        {
          *(_QWORD *)&v19[v24] = *v22;
          if (v25 + 1 >= v21)
            v28 = v26;
          else
            v28 = 0;
          v29 = &v22[v28];
          if (v25 + 1 < v21)
            ++v25;
          else
            v25 = 0;
          v22 = v29 + 1;
          v24 += 8;
        }
        while (v27 != v24);
      }
      v30 = v19;
    }
    v53 = (char *)a1[6];
    a1[6] = v30;
    a1[7] = (void *)(v18 >> 3);
    *((_DWORD *)a1 + 16) = v21;
    *((_DWORD *)a1 + 17) = v20;
    goto LABEL_62;
  }
  *((_DWORD *)a1 + 16) = v11;
  *((_DWORD *)a1 + 17) = v10;
  v16 = v10 * v11;
  if ((_DWORD)v16)
  {
    if ((unint64_t)a1[7] < v16)
    {
      free(v15);
      v17 = (8 * v16 + 31) & 0xFFFFFFFE0;
      a1[6] = 0;
      a1[7] = (void *)(v17 >> 3);
      memptr = 0;
      malloc_type_posix_memalign(&memptr, 0x20uLL, v17, 0x49090899uLL);
      v15 = memptr;
      a1[6] = memptr;
    }
  }
  else
  {
    free(v15);
    v15 = 0;
    *v8 = 0;
    v8[1] = 0;
  }
LABEL_23:
  if ((_QWORD *)(*(_QWORD *)(a2 + 8) - 8 * *(unsigned int *)(a2 + 20)) == v15)
  {
    v39 = *((_DWORD *)a1 + 16);
    v40 = *((_DWORD *)a1 + 17);
    v41 = (v40 * v39);
    v42 = (8 * v41 + 31) & 0xFFFFFFFE0;
    v43 = v42 >> 3;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v42, 0x49090899uLL);
    v44 = (char *)memptr;
    if ((_DWORD)v41)
    {
      v45 = 0;
      v46 = *(_DWORD *)a2;
      v47 = *(_DWORD *)(a2 + 16) - *(_DWORD *)a2;
      v48 = *(_QWORD **)(a2 + 8);
      if (!(*(_DWORD *)(a2 + 4) * *(_DWORD *)a2))
        v48 = 0;
      v49 = 8 * v41;
      v50 = memptr;
      do
      {
        *v50++ = *v48;
        if (v45 + 1 >= v46)
          v51 = v47;
        else
          v51 = 0;
        v52 = &v48[v51];
        if (v45 + 1 < v46)
          ++v45;
        else
          v45 = 0;
        v48 = v52 + 1;
        v49 -= 8;
      }
      while (v49);
    }
    v53 = (char *)a1[6];
    a1[6] = v44;
    a1[7] = (void *)v43;
    *((_DWORD *)a1 + 16) = v39;
    *((_DWORD *)a1 + 17) = v40;
LABEL_62:
    free(v53);
    goto LABEL_63;
  }
  v31 = (*((_DWORD *)a1 + 17) * *((_DWORD *)a1 + 16));
  if ((_DWORD)v31)
  {
    v32 = 0;
    v33 = *(_DWORD *)a2;
    v34 = *(_DWORD *)(a2 + 16) - *(_DWORD *)a2;
    if (*(_DWORD *)(a2 + 4) * *(_DWORD *)a2)
      v35 = *(_QWORD **)(a2 + 8);
    else
      v35 = 0;
    v36 = 8 * v31;
    do
    {
      *v15++ = *v35;
      if (v32 + 1 >= v33)
        v37 = v34;
      else
        v37 = 0;
      v38 = &v35[v37];
      if (v32 + 1 < v33)
        ++v32;
      else
        v32 = 0;
      v35 = v38 + 1;
      v36 -= 8;
    }
    while (v36);
  }
LABEL_63:
  if (*((_DWORD *)a1 + 22) != v7)
  {
    v63 = (8 * v7 * v7 + 31) & 0xFFFFFFFE0;
    v64 = v63 >> 3;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v63, 0x49090899uLL);
    v65 = (char *)a1[9];
    a1[9] = memptr;
    a1[10] = (void *)v64;
    *((_DWORD *)a1 + 22) = v7;
    *((_DWORD *)a1 + 23) = v7;
    free(v65);
  }
  if (v6 >= v7)
    v66 = v7;
  else
    v66 = v6;
  if (*((_DWORD *)a1 + 28) != v66)
  {
    v67 = (8 * v66 + 31) & 0xFFFFFFFE0;
    v68 = v67 >> 3;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v67, 0x49090899uLL);
    v69 = (char *)a1[12];
    a1[12] = memptr;
    a1[13] = (void *)v68;
    *((_DWORD *)a1 + 28) = v66;
    *((_DWORD *)a1 + 29) = 1;
    free(v69);
  }
  if (*((_DWORD *)a1 + 34) != (_DWORD)v6)
  {
    v70 = (8 * (v6 * v6) + 31) & 0xFFFFFFFE0;
    v71 = v70 >> 3;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v70, 0x49090899uLL);
    v72 = (char *)a1[15];
    a1[15] = memptr;
    a1[16] = (void *)v71;
    *((_DWORD *)a1 + 34) = v6;
    *((_DWORD *)a1 + 35) = v6;
    free(v72);
  }
  if ((sub_20AB99718((uint64_t)v8) & 1) != 0)
  {
    if (v6 >= a3)
      v73 = a3;
    else
      v73 = v6;
    if (*((_DWORD *)a1 + 4) != (_DWORD)v73)
    {
      v74 = (8 * v73 + 31) & 0xFFFFFFFE0;
      v75 = v74 >> 3;
      memptr = 0;
      malloc_type_posix_memalign(&memptr, 0x20uLL, v74, 0x49090899uLL);
      v76 = *a1;
      *a1 = memptr;
      a1[1] = (void *)v75;
      *((_DWORD *)a1 + 4) = v73;
      *((_DWORD *)a1 + 5) = 1;
      free(v76);
      v77 = (8 * (v73 * v6) + 31) & 0xFFFFFFFE0;
      v78 = v77 >> 3;
      memptr = 0;
      malloc_type_posix_memalign(&memptr, 0x20uLL, v77, 0x49090899uLL);
      v79 = (char *)a1[3];
      a1[3] = memptr;
      a1[4] = (void *)v78;
      *((_DWORD *)a1 + 10) = v6;
      *((_DWORD *)a1 + 11) = v73;
      free(v79);
    }
    if ((_DWORD)v73)
    {
      v80 = 0;
      v81 = (float64x2_t *)a1[12];
      v82 = (float64x2_t *)*a1;
      if (v73 < 4)
        goto LABEL_84;
      if ((unint64_t)((char *)v82 - (char *)v81) <= 0x1F)
        goto LABEL_84;
      v80 = v73 & 0xFFFFFFFC;
      v83 = v82 + 1;
      v84 = v81 + 1;
      v85 = v80;
      do
      {
        v86 = vmulq_f64(*v84, *v84);
        v83[-1] = vmulq_f64(v84[-1], v84[-1]);
        *v83 = v86;
        v83 += 2;
        v84 += 2;
        v85 -= 4;
      }
      while (v85);
      if (v80 != v73)
      {
LABEL_84:
        v87 = v73 - v80;
        v88 = v80;
        v89 = &v82->f64[v80];
        v90 = &v81->f64[v88];
        do
        {
          v91 = *v90++;
          *v89++ = v91 * v91;
          --v87;
        }
        while (v87);
      }
      v92 = 0;
      v93 = 0;
      v94 = *((_DWORD *)a1 + 34);
      v95 = (char *)a1[15];
      v96 = *((_DWORD *)a1 + 10);
      v97 = (char *)a1[3];
      v98 = v6 - 1;
      v99 = v6 & 0xFFFFFFFC;
      do
      {
        if (v6 >= 0x12)
        {
          v100 = 0;
          v102 = __CFADD__(v96 * v93, v98);
          if (!__CFADD__((_DWORD)v93, v98)
            && v94 == 1
            && !v102
            && !((unint64_t)(v6 - 1) >> 32)
            && (unint64_t)(&v97[8 * (v96 * v93)] - &v95[8 * v93]) >= 0x20)
          {
            v103 = 0;
            do
            {
              v104 = (__int128 *)&v95[8 * (v93 + v103)];
              v105 = *v104;
              v106 = v104[1];
              v107 = &v97[8 * (v92 + v103)];
              *(_OWORD *)v107 = v105;
              *((_OWORD *)v107 + 1) = v106;
              v103 += 4;
            }
            while (v99 != v103);
            v100 = v6 & 0xFFFFFFFC;
            if (v99 == v6)
              goto LABEL_87;
          }
        }
        else
        {
          v100 = 0;
        }
        v101 = v93 + v94 * v100;
        do
        {
          *(_QWORD *)&v97[8 * (v92 + v100++)] = *(_QWORD *)&v95[8 * v101];
          v101 += v94;
        }
        while (v6 != v100);
LABEL_87:
        ++v93;
        v92 += v96;
      }
      while (v93 != v73);
    }
  }
  else
  {
    v108 = *a1;
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
    free(v108);
    v109 = (char *)a1[3];
    a1[4] = 0;
    a1[5] = 0;
    a1[3] = 0;
    free(v109);
  }
  return (char **)a1;
}

void cva::PCA<double>::project<cva::Matrix<double,0u,0u,false>,void>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void **v6;
  int v7;
  void *v8;
  int v9;
  unint64_t v10;
  size_t v11;
  size_t v12;
  int v13;
  void *v14;
  size_t v15;
  void *v16;
  size_t v17;
  uint64_t v18;
  void *memptr;
  uint64_t v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v6 = (void **)(a1 + 24);
  v7 = *(_DWORD *)(a2 + 16);
  if (v7 != *(_DWORD *)(a3 + 16) || *(_DWORD *)(a1 + 44) != *(_DWORD *)(a3 + 20))
  {
    v8 = *(void **)a3;
    if (*(_QWORD *)a2 == *(_QWORD *)a3 || *v6 == v8)
    {
      v12 = (8 * (*(_DWORD *)(a1 + 44) * v7) + 31) & 0xFFFFFFFE0;
      v17 = v12 >> 3;
      memptr = 0;
      malloc_type_posix_memalign(&memptr, 0x20uLL, v12, 0x49090899uLL);
      v16 = memptr;
      v13 = *(_DWORD *)(a1 + 44);
      LODWORD(v18) = *(_DWORD *)(a2 + 16);
      HIDWORD(v18) = v13;
      v20 = a2;
      v21 = v6;
      v22 = 0x3FF0000000000000;
      sub_20AB9A11C((uint64_t)&v16, (uint64_t)&memptr);
      v14 = *(void **)a3;
      v15 = v17;
      *(_QWORD *)a3 = v16;
      *(_QWORD *)(a3 + 8) = v15;
      *(_QWORD *)(a3 + 16) = v18;
      free(v14);
      return;
    }
    v9 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a3 + 16) = v7;
    *(_DWORD *)(a3 + 20) = v9;
    v10 = (v9 * v7);
    if ((_DWORD)v10)
    {
      if (*(_QWORD *)(a3 + 8) < v10)
      {
        free(v8);
        v11 = (8 * v10 + 31) & 0xFFFFFFFE0;
        *(_QWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = v11 >> 3;
        memptr = 0;
        malloc_type_posix_memalign(&memptr, 0x20uLL, v11, 0x49090899uLL);
        *(_QWORD *)a3 = memptr;
      }
    }
    else
    {
      free(v8);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
    }
  }
  v20 = a2;
  v21 = v6;
  v22 = 0x3FF0000000000000;
  sub_20AB9A11C(a3, (uint64_t)&memptr);
}

void sub_20AB9A11C(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  int v8;
  void *v9;
  size_t v10;
  int v11;
  void *v12;
  size_t v13;
  uint64_t v14;
  void *memptr;

  v4 = *(void **)a1;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  if (*(void **)v5 == v4 || *(void **)v6 == v4)
  {
    v7 = (8 * (*(_DWORD *)(v6 + 20) * *(_DWORD *)(v5 + 16)) + 31) & 0xFFFFFFFE0;
    v13 = v7 >> 3;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v7, 0x49090899uLL);
    v12 = memptr;
    v8 = *(_DWORD *)(*(_QWORD *)(a2 + 16) + 20);
    LODWORD(v14) = *(_DWORD *)(*(_QWORD *)(a2 + 8) + 16);
    HIDWORD(v14) = v8;
    sub_20AB9A11C(&v12, a2);
    v9 = *(void **)a1;
    v10 = v13;
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v10;
    *(_QWORD *)(a1 + 16) = v14;
    free(v9);
  }
  else if (*(_DWORD *)(v5 + 20) * *(_DWORD *)(v5 + 16) && *(_DWORD *)(v6 + 20) * *(_DWORD *)(v6 + 16))
  {
    cblas_dgemm_NEWLAPACK();
  }
  else
  {
    v11 = *(_DWORD *)(a1 + 20);
    if (v11 * *(_DWORD *)(a1 + 16))
      bzero(v4, 8 * (v11 * *(_DWORD *)(a1 + 16)));
  }
}

void cva::PCA<double>::project<cva::MatrixRef<double,0u,0u,false>,void>(uint64_t a1, int *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  BOOL v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  int v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  BOOL v27;
  _QWORD *v28;
  _QWORD *v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  void *v33[2];
  int v34;
  int v35;
  void *memptr;
  _BYTE v37[8];
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v38 = a2;
  v39 = a1 + 24;
  v40 = 0x3FF0000000000000;
  v6 = *((_QWORD *)a3 + 1);
  v7 = v6 - 8 * a3[5];
  if (*((_QWORD *)a2 + 1) - 8 * a2[5] == v7 || *(_QWORD *)(a1 + 24) == v7)
  {
    v8 = (8 * (*(_DWORD *)(a1 + 44) * *a2) + 31) & 0xFFFFFFFE0;
    v33[1] = (void *)(v8 >> 3);
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v8, 0x49090899uLL);
    v33[0] = memptr;
    v9 = *(_DWORD *)(a1 + 44);
    v34 = *a2;
    v35 = v9;
    sub_20AB9A444((uint64_t)v33, (uint64_t)v37);
    v10 = *a3;
    v11 = a3[1];
    v12 = v11 * *a3;
    v13 = a3[4];
    v14 = v12 == 0;
    if (v12)
      v15 = (_QWORD *)*((_QWORD *)a3 + 1);
    else
      v15 = 0;
    v16 = *((_QWORD *)a3 + 1) + 8 * (v13 * v11);
    if (v14)
      v16 = 0;
    v17 = v33[0];
    if (v15 != (_QWORD *)v16)
    {
      v18 = 0;
      v19 = v13 - v10;
      v20 = (uint64_t *)v33[0];
      do
      {
        v21 = *v20++;
        *v15 = v21;
        if (v18 + 1 >= v10)
          v22 = v19;
        else
          v22 = 0;
        v15 += v22 + 1;
        if (v18 + 1 < v10)
          ++v18;
        else
          v18 = 0;
      }
      while (v15 != (_QWORD *)v16);
    }
    free(v17);
  }
  else if (a2[1] * *a2 && *(_DWORD *)(a1 + 44) * *(_DWORD *)(a1 + 40))
  {
    cblas_dgemm_NEWLAPACK();
  }
  else
  {
    v23 = *a3;
    v24 = a3[1];
    v25 = v24 * *a3;
    v26 = a3[4];
    v27 = v25 == 0;
    if (v25)
      v28 = (_QWORD *)*((_QWORD *)a3 + 1);
    else
      v28 = 0;
    v29 = (_QWORD *)(v6 + 8 * (v26 * v24));
    if (v27)
      v29 = 0;
    if (v28 != v29)
    {
      v30 = 0;
      v31 = v26 - v23;
      do
      {
        *v28 = 0;
        if (v30 + 1 >= v23)
          v32 = v31;
        else
          v32 = 0;
        v28 += v32 + 1;
        if (v30 + 1 < v23)
          ++v30;
        else
          v30 = 0;
      }
      while (v28 != v29);
    }
  }
}

void sub_20AB9A444(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  int v8;
  void *v9;
  size_t v10;
  int v11;
  void *v12;
  size_t v13;
  uint64_t v14;
  void *memptr;

  v4 = *(void **)a1;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  if ((void *)(*(_QWORD *)(v5 + 8) - 8 * *(unsigned int *)(v5 + 20)) == v4 || *(void **)v6 == v4)
  {
    v7 = (8 * (*(_DWORD *)(v6 + 20) * *(_DWORD *)v5) + 31) & 0xFFFFFFFE0;
    v13 = v7 >> 3;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v7, 0x49090899uLL);
    v12 = memptr;
    v8 = *(_DWORD *)(*(_QWORD *)(a2 + 16) + 20);
    LODWORD(v14) = **(_DWORD **)(a2 + 8);
    HIDWORD(v14) = v8;
    sub_20AB9A444(&v12, a2);
    v9 = *(void **)a1;
    v10 = v13;
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v10;
    *(_QWORD *)(a1 + 16) = v14;
    free(v9);
  }
  else if (*(_DWORD *)(v5 + 4) * *(_DWORD *)v5 && *(_DWORD *)(v6 + 20) * *(_DWORD *)(v6 + 16))
  {
    cblas_dgemm_NEWLAPACK();
  }
  else
  {
    v11 = *(_DWORD *)(a1 + 20);
    if (v11 * *(_DWORD *)(a1 + 16))
      bzero(v4, 8 * (v11 * *(_DWORD *)(a1 + 16)));
  }
}

void cva::PCA<double>::backProject<cva::Matrix<double,0u,0u,false>,void>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  void *v6;
  int v7;
  unint64_t v8;
  size_t v9;
  size_t v10;
  int v11;
  void *v12;
  size_t v13;
  uint64_t v14;
  void *v15;
  size_t v16;
  uint64_t v17;
  void *memptr;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v14 = a1 + 24;
  v5 = *(_DWORD *)(a2 + 16);
  if (v5 != *(_DWORD *)(a3 + 16) || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a3 + 20))
  {
    v6 = *(void **)a3;
    if (*(_QWORD *)a2 == *(_QWORD *)a3 || *(void **)(a1 + 24) == v6)
    {
      v10 = (8 * (*(_DWORD *)(a1 + 40) * v5) + 31) & 0xFFFFFFFE0;
      v16 = v10 >> 3;
      memptr = 0;
      malloc_type_posix_memalign(&memptr, 0x20uLL, v10, 0x49090899uLL);
      v15 = memptr;
      v11 = *(_DWORD *)(v14 + 16);
      LODWORD(v17) = *(_DWORD *)(a2 + 16);
      HIDWORD(v17) = v11;
      v19 = a2;
      v20 = &v14;
      v21 = 0x3FF0000000000000;
      sub_20AB9A71C((uint64_t)&v15, (uint64_t)&memptr);
      v12 = *(void **)a3;
      v13 = v16;
      *(_QWORD *)a3 = v15;
      *(_QWORD *)(a3 + 8) = v13;
      *(_QWORD *)(a3 + 16) = v17;
      free(v12);
      return;
    }
    v7 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a3 + 16) = v5;
    *(_DWORD *)(a3 + 20) = v7;
    v8 = (v7 * v5);
    if ((_DWORD)v8)
    {
      if (*(_QWORD *)(a3 + 8) < v8)
      {
        free(v6);
        v9 = (8 * v8 + 31) & 0xFFFFFFFE0;
        *(_QWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = v9 >> 3;
        memptr = 0;
        malloc_type_posix_memalign(&memptr, 0x20uLL, v9, 0x49090899uLL);
        *(_QWORD *)a3 = memptr;
      }
    }
    else
    {
      free(v6);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
    }
  }
  v19 = a2;
  v20 = &v14;
  v21 = 0x3FF0000000000000;
  sub_20AB9A71C(a3, (uint64_t)&memptr);
}

void sub_20AB9A71C(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  int v8;
  void *v9;
  size_t v10;
  int v11;
  void *v12;
  size_t v13;
  uint64_t v14;
  void *memptr;

  v4 = *(void **)a1;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = **(_QWORD **)(a2 + 16);
  if (*(void **)v5 == v4 || *(void **)v6 == v4)
  {
    v7 = (8 * (*(_DWORD *)(v6 + 16) * *(_DWORD *)(v5 + 16)) + 31) & 0xFFFFFFFE0;
    v13 = v7 >> 3;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v7, 0x49090899uLL);
    v12 = memptr;
    v8 = *(_DWORD *)(**(_QWORD **)(a2 + 16) + 16);
    LODWORD(v14) = *(_DWORD *)(*(_QWORD *)(a2 + 8) + 16);
    HIDWORD(v14) = v8;
    sub_20AB9A71C(&v12, a2);
    v9 = *(void **)a1;
    v10 = v13;
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v10;
    *(_QWORD *)(a1 + 16) = v14;
    free(v9);
  }
  else if (*(_DWORD *)(v5 + 20) * *(_DWORD *)(v5 + 16) && *(_DWORD *)(v6 + 16) * *(_DWORD *)(v6 + 20))
  {
    cblas_dgemm_NEWLAPACK();
  }
  else
  {
    v11 = *(_DWORD *)(a1 + 20);
    if (v11 * *(_DWORD *)(a1 + 16))
      bzero(v4, 8 * (v11 * *(_DWORD *)(a1 + 16)));
  }
}

void cva::PCA<double>::backProject<cva::MatrixRef<double,0u,0u,false>,void>(uint64_t a1, int *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  BOOL v26;
  _QWORD *v27;
  _QWORD *v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  void *v33[2];
  int v34;
  int v35;
  void *memptr;
  _BYTE v37[8];
  int *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v32 = a1 + 24;
  v38 = a2;
  v39 = &v32;
  v40 = 0x3FF0000000000000;
  v5 = *((_QWORD *)a3 + 1);
  v6 = v5 - 8 * a3[5];
  if (*((_QWORD *)a2 + 1) - 8 * a2[5] == v6 || *(_QWORD *)(a1 + 24) == v6)
  {
    v7 = (8 * (*(_DWORD *)(a1 + 40) * *a2) + 31) & 0xFFFFFFFE0;
    v33[1] = (void *)(v7 >> 3);
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v7, 0x49090899uLL);
    v33[0] = memptr;
    v8 = *(_DWORD *)(v32 + 16);
    v34 = *a2;
    v35 = v8;
    sub_20AB9AA4C((uint64_t)v33, (uint64_t)v37);
    v9 = *a3;
    v10 = a3[1];
    v11 = v10 * *a3;
    v12 = a3[4];
    v13 = v11 == 0;
    if (v11)
      v14 = (_QWORD *)*((_QWORD *)a3 + 1);
    else
      v14 = 0;
    v15 = *((_QWORD *)a3 + 1) + 8 * (v12 * v10);
    if (v13)
      v15 = 0;
    v16 = v33[0];
    if (v14 != (_QWORD *)v15)
    {
      v17 = 0;
      v18 = v12 - v9;
      v19 = (uint64_t *)v33[0];
      do
      {
        v20 = *v19++;
        *v14 = v20;
        if (v17 + 1 >= v9)
          v21 = v18;
        else
          v21 = 0;
        v14 += v21 + 1;
        if (v17 + 1 < v9)
          ++v17;
        else
          v17 = 0;
      }
      while (v14 != (_QWORD *)v15);
    }
    free(v16);
  }
  else if (a2[1] * *a2 && *(_DWORD *)(a1 + 40) * *(_DWORD *)(a1 + 44))
  {
    cblas_dgemm_NEWLAPACK();
  }
  else
  {
    v22 = *a3;
    v23 = a3[1];
    v24 = v23 * *a3;
    v25 = a3[4];
    v26 = v24 == 0;
    if (v24)
      v27 = (_QWORD *)*((_QWORD *)a3 + 1);
    else
      v27 = 0;
    v28 = (_QWORD *)(v5 + 8 * (v25 * v23));
    if (v26)
      v28 = 0;
    if (v27 != v28)
    {
      v29 = 0;
      v30 = v25 - v22;
      do
      {
        *v27 = 0;
        if (v29 + 1 >= v22)
          v31 = v30;
        else
          v31 = 0;
        v27 += v31 + 1;
        if (v29 + 1 < v22)
          ++v29;
        else
          v29 = 0;
      }
      while (v27 != v28);
    }
  }
}

void sub_20AB9AA4C(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  int v8;
  void *v9;
  size_t v10;
  int v11;
  void *v12;
  size_t v13;
  uint64_t v14;
  void *memptr;

  v4 = *(void **)a1;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = **(_QWORD **)(a2 + 16);
  if ((void *)(*(_QWORD *)(v5 + 8) - 8 * *(unsigned int *)(v5 + 20)) == v4 || *(void **)v6 == v4)
  {
    v7 = (8 * (*(_DWORD *)(v6 + 16) * *(_DWORD *)v5) + 31) & 0xFFFFFFFE0;
    v13 = v7 >> 3;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v7, 0x49090899uLL);
    v12 = memptr;
    v8 = *(_DWORD *)(**(_QWORD **)(a2 + 16) + 16);
    LODWORD(v14) = **(_DWORD **)(a2 + 8);
    HIDWORD(v14) = v8;
    sub_20AB9AA4C(&v12, a2);
    v9 = *(void **)a1;
    v10 = v13;
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v10;
    *(_QWORD *)(a1 + 16) = v14;
    free(v9);
  }
  else if (*(_DWORD *)(v5 + 4) * *(_DWORD *)v5 && *(_DWORD *)(v6 + 16) * *(_DWORD *)(v6 + 20))
  {
    cblas_dgemm_NEWLAPACK();
  }
  else
  {
    v11 = *(_DWORD *)(a1 + 20);
    if (v11 * *(_DWORD *)(a1 + 16))
      bzero(v4, 8 * (v11 * *(_DWORD *)(a1 + 16)));
  }
}

int *cva::Random<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>::instance()
{
  unsigned __int8 v0;
  unsigned int v2;
  uint64_t i;

  v0 = atomic_load((unsigned __int8 *)&qword_254616460);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254616460))
  {
    v2 = cva::Random<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>::m_seed;
    dword_254615A98[0] = cva::Random<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>::m_seed;
    for (i = 1; i != 624; ++i)
    {
      v2 = i + 1812433253 * (v2 ^ (v2 >> 30));
      dword_254615A98[i] = v2;
    }
    qword_254616458 = 0;
    __cxa_guard_release(&qword_254616460);
  }
  return dword_254615A98;
}

double cva::SE2GroupStorage<float,cva::Matrix<float,3u,3u,false>>::SE2GroupStorage(uint64_t a1)
{
  double result;

  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_QWORD *)&result = 1065353216;
  *(_OWORD *)a1 = xmmword_20AC06220;
  *(_OWORD *)(a1 + 16) = unk_20AC06230;
  return result;
}

{
  double result;

  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_QWORD *)&result = 1065353216;
  *(_OWORD *)a1 = xmmword_20AC06220;
  *(_OWORD *)(a1 + 16) = unk_20AC06230;
  return result;
}

uint64_t cva::SE2GroupStorage<float,cva::Matrix<float,3u,3u,false>>::SE2GroupStorage(uint64_t a1, _DWORD *a2, float a3)
{
  __float2 v5;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v5 = __sincosf_stret(a3);
  *(float *)a1 = v5.__cosval;
  *(float *)(a1 + 4) = v5.__sinval;
  *(float *)(a1 + 12) = -v5.__sinval;
  *(float *)(a1 + 16) = v5.__cosval;
  *(_DWORD *)(a1 + 24) = *a2;
  *(_DWORD *)(a1 + 28) = a2[1];
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 32) = 1065353216;
  return a1;
}

{
  __float2 v5;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v5 = __sincosf_stret(a3);
  *(float *)a1 = v5.__cosval;
  *(float *)(a1 + 4) = v5.__sinval;
  *(float *)(a1 + 12) = -v5.__sinval;
  *(float *)(a1 + 16) = v5.__cosval;
  *(_DWORD *)(a1 + 24) = *a2;
  *(_DWORD *)(a1 + 28) = a2[1];
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 32) = 1065353216;
  return a1;
}

float cva::SE2GroupStorage<float,cva::Matrix<float,3u,3u,false>>::SE2GroupStorage(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  float result;

  v3 = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v4 = 0x100000000;
  do
  {
    v5 = *a2++;
    *(_DWORD *)(a1 + 4 * v3) = v5;
    v6 = HIDWORD(v4);
    v7 = (int)v4 < 1;
    if ((int)v4 < 1)
      v6 = 0;
    v8 = v3 + v6;
    v9 = (v4 + 1);
    v10 = v4 & 0xFFFFFFFF00000000;
    if (!v7)
      v9 = 0;
    v4 = v9 | v10;
    v3 = v8 + 1;
  }
  while (v3 != 6);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)a3;
  result = *(float *)(a3 + 4);
  *(float *)(a1 + 28) = result;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 32) = 1065353216;
  return result;
}

{
  uint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  float result;

  v3 = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v4 = 0x100000000;
  do
  {
    v5 = *a2++;
    *(_DWORD *)(a1 + 4 * v3) = v5;
    v6 = HIDWORD(v4);
    v7 = (int)v4 < 1;
    if ((int)v4 < 1)
      v6 = 0;
    v8 = v3 + v6;
    v9 = (v4 + 1);
    v10 = v4 & 0xFFFFFFFF00000000;
    if (!v7)
      v9 = 0;
    v4 = v9 | v10;
    v3 = v8 + 1;
  }
  while (v3 != 6);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)a3;
  result = *(float *)(a3 + 4);
  *(float *)(a1 + 28) = result;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 32) = 1065353216;
  return result;
}

uint64_t cva::SE2GroupStorage<float,cva::Matrix<float,3u,3u,false>>::T(uint64_t a1)
{
  return a1 + 24;
}

{
  return a1 + 24;
}

__n128 cva::SE2GroupStorage<float,cva::Matrix<float,3u,3u,false>>::affine@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  unint64_t v2;
  __n128 result;

  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  if (a1 == a2)
  {
    result.n128_u64[0] = *(unint64_t *)((char *)&a1->n128_u64[1] + 4);
    result.n128_u64[1] = a1[1].n128_u64[1];
    *(__n128 *)((char *)a1 + 8) = result;
  }
  else
  {
    v2 = a1->n128_u64[0];
    result.n128_u64[1] = *(unint64_t *)((char *)&a1->n128_u64[1] + 4);
    *a2 = result;
    result.n128_u64[0] = a1[1].n128_u64[1];
    a2[1].n128_u64[0] = result.n128_u64[0];
  }
  return result;
}

double cva::SE2GroupStorage<float,cva::Matrix<float,3u,3u,false>>::lplus(uint64_t a1, float *a2)
{
  float v3;
  float v4;
  float v5;
  __float2 v6;
  float v7;
  float v8;
  float v9;
  double result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;
  float *v15[2];
  __int128 v16;
  __int128 v17;
  int v18;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v12 = xmmword_20AC06220;
  v13 = unk_20AC06230;
  v14 = 1065353216;
  v6 = __sincosf_stret(v3);
  v7 = v3 * v3;
  if ((float)(v3 * v3) >= 0.0061)
  {
    v8 = (float)(1.0 / v3) * v6.__sinval;
    v9 = (float)(1.0 / v3) * (float)(1.0 - v6.__cosval);
  }
  else
  {
    v8 = 1.0 - (float)(v7 * (float)((float)(v7 / -120.0) + 0.16667));
    v9 = v3 * (float)((float)(v7 / -24.0) + 0.5);
  }
  *(_QWORD *)&v12 = __PAIR64__(LODWORD(v6.__sinval), LODWORD(v6.__cosval));
  *((float *)&v12 + 3) = -v6.__sinval;
  *(float *)&v13 = v6.__cosval;
  *((float *)&v13 + 2) = (float)(v8 * v4) - (float)(v9 * v5);
  *((float *)&v13 + 3) = (float)(v5 * v8) + (float)(v9 * v4);
  v15[0] = (float *)&v12;
  v15[1] = (float *)a1;
  v16 = 0u;
  v17 = 0u;
  v18 = 0;
  sub_20AB91C20((uint64_t)&v16, v15);
  result = *(double *)&v16;
  v11 = v17;
  *(_OWORD *)a1 = v16;
  *(_OWORD *)(a1 + 16) = v11;
  *(_DWORD *)(a1 + 32) = v18;
  return result;
}

double cva::SE2AlgebraStorage<float,cva::MatrixRef<float const,3u,1u,false>>::SE2AlgebraStorage(_QWORD *a1, uint64_t a2)
{
  double result;

  *a1 = a2;
  *(_QWORD *)&result = 3;
  a1[1] = 3;
  return result;
}

{
  double result;

  *a1 = a2;
  *(_QWORD *)&result = 3;
  a1[1] = 3;
  return result;
}

{
  double result;

  *a1 = a2;
  *(_QWORD *)&result = 3;
  a1[1] = 3;
  return result;
}

{
  double result;

  *a1 = a2;
  *(_QWORD *)&result = 3;
  a1[1] = 3;
  return result;
}

float cva::SE2AlgebraStorage<float,cva::MatrixRef<float const,3u,1u,false>>::exp@<S0>(float **a1@<X0>, uint64_t a2@<X8>)
{
  float *v3;
  float v4;
  __float2 v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float result;

  *(_DWORD *)(a2 + 32) = 1065353216;
  *(_OWORD *)a2 = xmmword_20AC06220;
  *(_OWORD *)(a2 + 16) = unk_20AC06230;
  v3 = *a1;
  v4 = **a1;
  v5 = __sincosf_stret(v4);
  v6 = v4 * v4;
  if ((float)(v4 * v4) >= 0.0061)
  {
    v7 = (float)(1.0 / v4) * v5.__sinval;
    v8 = (float)(1.0 / v4) * (float)(1.0 - v5.__cosval);
  }
  else
  {
    v7 = 1.0 - (float)(v6 * (float)((float)(v6 / -120.0) + 0.16667));
    v8 = v4 * (float)((float)(v6 / -24.0) + 0.5);
  }
  *(float *)a2 = v5.__cosval;
  *(float *)(a2 + 4) = v5.__sinval;
  *(float *)(a2 + 12) = -v5.__sinval;
  *(float *)(a2 + 16) = v5.__cosval;
  v9 = v3[1];
  v10 = v3[2];
  v11 = (float)(v7 * v9) - (float)(v8 * v10);
  result = (float)(v7 * v10) + (float)(v8 * v9);
  *(float *)(a2 + 24) = v11;
  *(float *)(a2 + 28) = result;
  return result;
}

double cva::SE2GroupStorage<float,cva::Matrix<float,3u,3u,false>>::rplus(uint64_t a1, float *a2)
{
  float v3;
  float v4;
  float v5;
  __float2 v6;
  float v7;
  float v8;
  float v9;
  double result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;
  float *v15[2];
  __int128 v16;
  __int128 v17;
  int v18;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v12 = xmmword_20AC06220;
  v13 = unk_20AC06230;
  v14 = 1065353216;
  v6 = __sincosf_stret(v3);
  v7 = v3 * v3;
  if ((float)(v3 * v3) >= 0.0061)
  {
    v8 = (float)(1.0 / v3) * v6.__sinval;
    v9 = (float)(1.0 / v3) * (float)(1.0 - v6.__cosval);
  }
  else
  {
    v8 = 1.0 - (float)(v7 * (float)((float)(v7 / -120.0) + 0.16667));
    v9 = v3 * (float)((float)(v7 / -24.0) + 0.5);
  }
  *(_QWORD *)&v12 = __PAIR64__(LODWORD(v6.__sinval), LODWORD(v6.__cosval));
  *((float *)&v12 + 3) = -v6.__sinval;
  *(float *)&v13 = v6.__cosval;
  *((float *)&v13 + 2) = (float)(v8 * v4) - (float)(v9 * v5);
  *((float *)&v13 + 3) = (float)(v5 * v8) + (float)(v9 * v4);
  v15[0] = (float *)a1;
  v15[1] = (float *)&v12;
  v16 = 0u;
  v17 = 0u;
  v18 = 0;
  sub_20AB91C20((uint64_t)&v16, v15);
  result = *(double *)&v16;
  v11 = v17;
  *(_OWORD *)a1 = v16;
  *(_OWORD *)(a1 + 16) = v11;
  *(_DWORD *)(a1 + 32) = v18;
  return result;
}

float cva::SE2GroupStorage<float,cva::Matrix<float,3u,3u,false>>::transform@<S0>(float *a1@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  float result;
  float v6;
  _QWORD v7[2];
  float *v8[2];
  float v9[7];

  v7[0] = a1;
  v7[1] = 3;
  v8[0] = (float *)v7;
  v8[1] = a2;
  *(_QWORD *)v9 = 0;
  sub_20AB9B1F0(v9, v8);
  *(_QWORD *)a3 = 0;
  result = v9[0] + a1[6];
  v6 = v9[1] + a1[7];
  if (a1 == a3)
  {
    *a1 = result;
    a1[1] = v6;
  }
  else
  {
    *a3 = result;
    a3[1] = v6;
  }
  return result;
}

float *sub_20AB9B1F0(float *result, float **a2)
{
  float *v2;
  uint64_t v3;
  float *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float *v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  uint64_t v17;

  v2 = result;
  v3 = *(_QWORD *)*a2;
  if ((float *)(v3 - 4 * *((unsigned int *)*a2 + 3)) == result || (v4 = a2[1], v4 == result))
  {
    v17 = 0;
    result = (float *)sub_20AB9B1F0(&v17);
    *(_QWORD *)v2 = v17;
  }
  else
  {
    v5 = *((unsigned int *)*a2 + 2);
    v6 = (2 * v5);
    if ((_DWORD)v6)
    {
      v7 = 0;
      v8 = 4 * v6;
      v9 = 4 * v5;
      v10 = 0.0;
      v11 = a2[1];
      do
      {
        v12 = *v11++;
        v10 = v10 + (float)(*(float *)(v3 + v7) * v12);
        v7 += v9;
      }
      while (v8 != v7);
      v13 = 0;
      *result = v10;
      v14 = v3 + 4;
      v15 = 0.0;
      do
      {
        v16 = *v4++;
        v15 = v15 + (float)(*(float *)(v14 + v13) * v16);
        v13 += v9;
      }
      while (v8 != v13);
    }
    else
    {
      *result = 0.0;
      v15 = 0.0;
    }
    result[1] = v15;
  }
  return result;
}

float32x2_t cva::SE2GroupStorage<float,cva::Matrix<float,3u,3u,false>>::inverseTransform@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, float32x2_t *a3@<X8>)
{
  float32x2_t result;
  _QWORD v5[2];
  _QWORD v6[2];
  _QWORD *v7;
  uint64_t *v8[2];
  _QWORD v9[2];
  _QWORD *v10;
  uint64_t *v11[2];
  float32x2_t v12;
  float32x2_t v13;

  v9[0] = a1;
  v9[1] = 3;
  v10 = v9;
  v11[0] = (uint64_t *)&v10;
  v11[1] = a2;
  v6[0] = a1;
  v6[1] = 3;
  v7 = v6;
  v5[0] = a1 + 24;
  v5[1] = 0x600000003;
  v8[0] = (uint64_t *)&v7;
  v8[1] = v5;
  v12 = 0;
  sub_20AB9B358((float *)&v12, v11);
  v13 = 0;
  sub_20AB9B3E8((float *)&v13, v8);
  result = vsub_f32(v12, v13);
  *a3 = result;
  return result;
}

float *sub_20AB9B358(float *result, uint64_t **a2)
{
  float *v2;
  float *v3;
  uint64_t v4;
  float *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = result;
  v3 = (float *)a2[1];
  if (v3 == result)
  {
    v7 = 0;
    result = (float *)sub_20AB9B358(&v7);
    *(_QWORD *)v2 = v7;
  }
  else
  {
    v4 = **a2;
    v5 = *(float **)v4;
    v6 = *(unsigned int *)(v4 + 8);
    *result = (float)((float)(v5[1] * v3[1]) + (float)(*v5 * *v3)) + 0.0;
    result[1] = (float)((float)(v5[v6 + 1] * v3[1]) + (float)(v5[v6] * *v3)) + 0.0;
  }
  return result;
}

float *sub_20AB9B3E8(float *result, uint64_t **a2)
{
  float *v2;
  uint64_t *v3;
  float *v4;
  uint64_t v5;
  float *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = result;
  v3 = a2[1];
  v4 = (float *)*v3;
  if ((float *)(*v3 - 4 * *((unsigned int *)v3 + 3)) == result)
  {
    v8 = 0;
    result = (float *)sub_20AB9B3E8(&v8);
    *(_QWORD *)v2 = v8;
  }
  else
  {
    v5 = **a2;
    v6 = *(float **)v5;
    v7 = *(unsigned int *)(v5 + 8);
    *result = (float)((float)(v6[1] * v4[1]) + (float)(*v6 * *v4)) + 0.0;
    result[1] = (float)((float)(v6[v7 + 1] * v4[1]) + (float)(v6[v7] * *v4)) + 0.0;
  }
  return result;
}

double cva::SE2GroupStorage<float,cva::Matrix<float,3u,3u,false>>::transformJacobian@<D0>(float *a1@<X1>, uint64_t a2@<X8>)
{
  int v2;
  double result;

  v2 = *(_DWORD *)a1;
  *(float *)a2 = -a1[1];
  *(_DWORD *)(a2 + 4) = v2;
  *(_QWORD *)&result = 1065353216;
  *(_OWORD *)(a2 + 8) = xmmword_20AC05C50;
  return result;
}

float *cva::SE2GroupStorage<float,cva::Matrix<float,3u,3u,false>>::inverseTransformJacobian@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  float v5;
  float *result;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t j;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t **v17;
  uint64_t i;
  int v19;
  unint64_t v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD v25[2];
  _QWORD v26[2];
  _QWORD *v27;
  uint64_t v28;
  uint64_t *v29;
  _QWORD *v30;

  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v5 = -*(float *)a2;
  *(_DWORD *)a3 = *(_DWORD *)(a2 + 4);
  *(float *)(a3 + 4) = v5;
  v26[0] = a1;
  v26[1] = 3;
  v27 = v26;
  v28 = 0;
  v25[0] = a3;
  v25[1] = 2;
  v29 = (uint64_t *)&v27;
  v30 = v25;
  result = sub_20AB9B3E8((float *)&v28, &v29);
  v7 = v28;
  *(_QWORD *)a3 = v28;
  if (a1 == a3)
  {
    v16 = 0;
    *(float *)&v29 = -*(float *)&v7;
    HIDWORD(v29) = 0x80000000;
    *(float *)&v30 = -*((float *)&v7 + 1);
    HIDWORD(v30) = 0x80000000;
    v17 = &v29;
    for (i = 2; i != 6; i = v22 + 1)
    {
      v19 = *(_DWORD *)v17;
      v17 = (uint64_t **)((char *)v17 + 4);
      *(_DWORD *)(a3 + 4 * i) = v19;
      v20 = HIDWORD(v16);
      v21 = (int)v16 < 1;
      if ((int)v16 < 1)
        v20 = 0;
      v22 = i + v20;
      v23 = (v16 + 1);
      v24 = v16 & 0xFFFFFFFF00000000;
      if (!v21)
        v23 = 0;
      v16 = v23 | v24;
    }
  }
  else
  {
    v8 = 0;
    v9 = 0;
    for (j = 2; j != 6; j = v13 + 1)
    {
      *(float *)(a3 + 4 * j) = -*(float *)(a1 + 4 * (3 * v9 + HIDWORD(v9)));
      if ((int)v9 >= 1)
        v9 = (v9 & 0xFFFFFFFF00000000) + 0x100000000;
      else
        v9 = (v9 + 1) | v9 & 0xFFFFFFFF00000000;
      v11 = HIDWORD(v8);
      v12 = (int)v8 < 1;
      if ((int)v8 < 1)
        v11 = 0;
      v13 = j + v11;
      v14 = (v8 + 1);
      v15 = v8 & 0xFFFFFFFF00000000;
      if (!v12)
        v14 = 0;
      v8 = v14 | v15;
    }
  }
  return result;
}

float cva::SE2GroupStorage<float,cva::Matrix<float,3u,3u,false>>::log@<S0>(float *a1@<X0>, float *a2@<X8>)
{
  float v4;
  float v5;
  float v6;
  float v7;
  __float2 v8;
  float v9;
  float v10;
  float v11;
  float result;

  v4 = atan2f(a1[1], *a1);
  v5 = v4 * v4;
  if ((float)(v4 * v4) >= 0.0061)
  {
    v8 = __sincosf_stret(v4);
    v6 = (float)(1.0 / v4) * v8.__sinval;
    v7 = (float)(1.0 / v4) * (float)(1.0 - v8.__cosval);
  }
  else
  {
    v6 = 1.0 - (float)(v5 * (float)((float)(v5 / -120.0) + 0.16667));
    v7 = v4 * (float)((float)(v5 / -24.0) + 0.5);
  }
  v9 = 1.0 / (float)((float)(v7 * v7) + (float)(v6 * v6));
  v10 = a1[6];
  v11 = a1[7];
  *a2 = v4;
  a2[1] = v9 * (float)((float)(v7 * v11) + (float)(v6 * v10));
  result = v9 * (float)((float)(v6 * v11) - (float)(v7 * v10));
  a2[2] = result;
  return result;
}

uint64_t cva::SE2AlgebraStorage<float,cva::Matrix<float,3u,1u,false>>::SE2AlgebraStorage(uint64_t result)
{
  *(_DWORD *)(result + 8) = 0;
  *(_QWORD *)result = 0;
  return result;
}

{
  *(_DWORD *)(result + 8) = 0;
  *(_QWORD *)result = 0;
  return result;
}

void cva::SE2GroupStorage<float,cva::Matrix<float,3u,3u,false>>::logJacobian(float *a1@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  __float2 v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  unint64_t v26;
  int *v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  BOOL v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _DWORD *v35;
  _QWORD v36[2];
  _DWORD v37[2];
  _DWORD v38[4];
  uint64_t v39;

  *(_OWORD *)(a2 + 12) = 0u;
  v4 = (_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 44) = 0;
  *(_OWORD *)(a2 + 28) = 0u;
  v5 = atan2f(a1[1], *a1);
  v6 = v5 * v5;
  if ((float)(v5 * v5) >= 0.0061)
  {
    v12 = __sincosf_stret(v5);
    v9 = (float)(1.0 / v5) * v12.__sinval;
    v11 = (float)(1.0 / v5) * (float)(1.0 - v12.__cosval);
    v7 = (float)(1.0 / v5) * v11;
    v10 = (float)(1.0 / v5) * (float)(1.0 - v9);
  }
  else
  {
    v7 = 0.5 - (float)(v6 * (float)((float)(v6 / -720.0) + 0.041667));
    v8 = 0.16667 - (float)(v6 * (float)((float)(v6 / -5040.0) + 0.0083333));
    v9 = 1.0 - (float)(v6 * v8);
    v10 = v5 * v8;
    v11 = v5 * v7;
  }
  v13 = (float)(v11 * v11) + (float)(v9 * v9);
  v14 = 1.0 / v13;
  v15 = a1[6];
  v16 = a1[7];
  v17 = (float)(1.0 / v13) * (float)((float)(v11 * v16) + (float)(v9 * v15));
  *(float *)a2 = v5;
  *(float *)(a2 + 4) = v17;
  v18 = (float)(1.0 / v13) * (float)((float)(v9 * v16) - (float)(v11 * v15));
  *(float *)(a2 + 8) = v18;
  if (fabsf(v13) >= 0.00001)
  {
    v19 = v9 * v14;
    v20 = v14 * (float)-v11;
    v21 = v11 * v14;
    *(float *)v38 = v19;
    *(float *)&v38[1] = v20;
    *(float *)&v38[2] = v21;
    *(float *)&v38[3] = v19;
    v22 = (float)(v10 * v17) + (float)(v7 * v18);
    v23 = (float)(v10 * v18) - (float)(v7 * v17);
    *(float *)v37 = v22;
    *(float *)&v37[1] = v23;
    *(_DWORD *)(a2 + 12) = 1065353216;
    v35 = v38;
    v36[0] = &v35;
    v36[1] = v37;
    if (v37 == v4)
    {
      v39 = 0;
      sub_20AB9B8DC((float *)&v39, (uint64_t)v36);
      v25 = *((float *)&v39 + 1);
      v24 = *(float *)&v39;
    }
    else
    {
      v24 = (float)(0.0 - (float)(v19 * v22)) - (float)(v21 * v23);
      v25 = (float)(0.0 - (float)(v20 * v22)) - (float)(v19 * v23);
    }
    *(float *)(a2 + 16) = v24;
    *(float *)(a2 + 20) = v25;
    *(_DWORD *)(a2 + 24) = 0;
    v26 = 0x100000000;
    v27 = v38;
    v28 = 4;
    *(_DWORD *)(a2 + 36) = 0;
    do
    {
      v29 = *v27++;
      v4[v28] = v29;
      v30 = HIDWORD(v26);
      v31 = (int)v26 < 1;
      if ((int)v26 < 1)
        v30 = 0;
      v32 = v28 + v30;
      v33 = (v26 + 1);
      v34 = v26 & 0xFFFFFFFF00000000;
      if (!v31)
        v33 = 0;
      v26 = v33 | v34;
      v28 = v32 + 1;
    }
    while (v28 != 10);
  }
}

float *sub_20AB9B8DC(float *result, uint64_t a2)
{
  float *v2;
  float *v3;
  float *v4;
  float v5;
  float v6;
  uint64_t v7;

  v2 = result;
  v3 = *(float **)(a2 + 8);
  if (v3 == result)
  {
    v7 = 0;
    result = (float *)sub_20AB9B8DC(&v7);
    *(_QWORD *)v2 = v7;
  }
  else
  {
    v4 = **(float ***)a2;
    v5 = v4[1];
    v6 = v4[3];
    *result = (float)(0.0 - (float)(*v4 * *v3)) - (float)(v4[2] * v3[1]);
    result[1] = (float)(0.0 - (float)(v5 * *v3)) - (float)(v6 * v3[1]);
  }
  return result;
}

float cva::SE2GroupStorage<float,cva::Matrix<float,3u,3u,false>>::inverse@<S0>(float *a1@<X0>, uint64_t a2@<X8>)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float result;

  *(_OWORD *)a2 = xmmword_20AC06220;
  *(_OWORD *)(a2 + 16) = unk_20AC06230;
  *(_DWORD *)(a2 + 32) = 1065353216;
  v2 = *a1;
  v3 = a1[1];
  v4 = a1[3];
  v5 = a1[4];
  *(float *)a2 = *a1;
  *(float *)(a2 + 4) = v4;
  *(float *)(a2 + 12) = v3;
  *(float *)(a2 + 16) = v5;
  v6 = a1[6];
  v7 = a1[7];
  result = (float)-(float)(v3 * v7) - (float)(v2 * v6);
  *(float *)(a2 + 24) = result;
  *(float *)(a2 + 28) = (float)-(float)(v5 * v7) - (float)(v4 * v6);
  return result;
}

float cva::SE2GroupStorage<float,cva::Matrix<float,3u,3u,false>>::adjoint@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __int128 v16;
  unint64_t v17;
  int *v18;
  uint64_t i;
  int v20;
  unint64_t v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  float result;
  float v27;
  __int128 v28;

  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 0;
  if (a1 == a2)
  {
    *(_QWORD *)&v16 = *(_QWORD *)a2;
    *((_QWORD *)&v16 + 1) = *(_QWORD *)(a2 + 12);
    v28 = v16;
    v17 = 0x100000000;
    v18 = (int *)&v28;
    for (i = 4; i != 10; i = v23 + 1)
    {
      v20 = *v18++;
      *(_DWORD *)(a2 + 4 * i) = v20;
      v21 = HIDWORD(v17);
      v22 = (int)v17 < 1;
      if ((int)v17 < 1)
        v21 = 0;
      v23 = i + v21;
      v24 = (v17 + 1);
      v25 = v17 & 0xFFFFFFFF00000000;
      if (!v22)
        v24 = 0;
      v17 = v24 | v25;
    }
  }
  else
  {
    v2 = 0x100000000;
    v3 = 4;
    v4 = (_DWORD *)a1;
    v5 = 0x100000000;
    do
    {
      *(_DWORD *)(a2 + 4 * v3) = *v4;
      v6 = HIDWORD(v5);
      v7 = (int)v5 < 1;
      if ((int)v5 < 1)
        v6 = 0;
      v8 = &v4[v6];
      v9 = (v5 + 1);
      v10 = v5 & 0xFFFFFFFF00000000;
      if (!v7)
        v9 = 0;
      v5 = v9 | v10;
      v4 = v8 + 1;
      v11 = HIDWORD(v2);
      v12 = (int)v2 < 1;
      if ((int)v2 < 1)
        v11 = 0;
      v13 = v3 + v11;
      v14 = (v2 + 1);
      v15 = v2 & 0xFFFFFFFF00000000;
      if (!v12)
        v14 = 0;
      v2 = v14 | v15;
      v3 = v13 + 1;
    }
    while (v3 != 10);
  }
  result = *(float *)(a1 + 28);
  v27 = -*(float *)(a1 + 24);
  *(float *)(a2 + 4) = result;
  *(float *)(a2 + 8) = v27;
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)a2 = 1065353216;
  return result;
}

float cva::SE2GroupStorage<float,cva::Matrix<float,3u,3u,false>>::enforce(uint64_t a1)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float sinval;
  float cosval;
  __float2 v8;
  __float2 v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float result;

  v2 = atan2f(*(float *)(a1 + 4), *(float *)a1);
  v3 = v2 * v2;
  if ((float)(v2 * v2) >= 0.0061)
  {
    v9 = __sincosf_stret(v2);
    cosval = v9.__cosval;
    sinval = v9.__sinval;
    v4 = (float)(1.0 / v2) * v9.__sinval;
    v5 = (float)(1.0 / v2) * (float)(1.0 - v9.__cosval);
  }
  else
  {
    v4 = 1.0 - (float)(v3 * (float)((float)(v3 / -120.0) + 0.16667));
    v5 = v2 * (float)((float)(v3 / -24.0) + 0.5);
    v8 = __sincosf_stret(v2);
    cosval = v8.__cosval;
    sinval = v8.__sinval;
  }
  v10 = *(float *)(a1 + 24);
  v11 = *(float *)(a1 + 28);
  v12 = 1.0 / (float)((float)(v5 * v5) + (float)(v4 * v4));
  v13 = v12 * (float)((float)(v4 * v11) - (float)(v5 * v10));
  v14 = v12 * (float)((float)(v5 * v11) + (float)(v4 * v10));
  *(float *)a1 = cosval;
  *(float *)(a1 + 4) = sinval;
  *(_DWORD *)(a1 + 8) = 0;
  *(float *)(a1 + 12) = -sinval;
  *(float *)(a1 + 16) = cosval;
  result = (float)(v13 * v4) + (float)(v5 * v14);
  *(_DWORD *)(a1 + 20) = 0;
  *(float *)(a1 + 24) = (float)(v4 * v14) - (float)(v5 * v13);
  *(float *)(a1 + 28) = result;
  *(_DWORD *)(a1 + 32) = 1065353216;
  return result;
}

float cva::SE2AlgebraStorage<float,cva::Matrix<float,3u,1u,false>>::exp@<S0>(float *a1@<X0>, uint64_t a2@<X8>)
{
  float v4;
  __float2 v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float result;

  *(_DWORD *)(a2 + 32) = 1065353216;
  *(_OWORD *)a2 = xmmword_20AC06220;
  *(_OWORD *)(a2 + 16) = unk_20AC06230;
  v4 = *a1;
  v5 = __sincosf_stret(*a1);
  v6 = v4 * v4;
  if ((float)(v4 * v4) >= 0.0061)
  {
    v7 = (float)(1.0 / v4) * v5.__sinval;
    v8 = (float)(1.0 / v4) * (float)(1.0 - v5.__cosval);
  }
  else
  {
    v7 = 1.0 - (float)(v6 * (float)((float)(v6 / -120.0) + 0.16667));
    v8 = v4 * (float)((float)(v6 / -24.0) + 0.5);
  }
  *(float *)a2 = v5.__cosval;
  *(float *)(a2 + 4) = v5.__sinval;
  *(float *)(a2 + 12) = -v5.__sinval;
  *(float *)(a2 + 16) = v5.__cosval;
  v9 = a1[1];
  v10 = a1[2];
  v11 = (float)(v7 * v9) - (float)(v8 * v10);
  result = (float)(v7 * v10) + (float)(v8 * v9);
  *(float *)(a2 + 24) = v11;
  *(float *)(a2 + 28) = result;
  return result;
}

uint64_t cva::SE2GroupStorage<float,cva::Matrix<float,3u,3u,false>>::serialize()
{
  return std::ostream::write();
}

uint64_t cva::SE2GroupStorage<float,cva::Matrix<float,3u,3u,false>>::deserialize()
{
  return std::istream::read();
}

double cva::SE2GroupStorage<double,cva::Matrix<double,3u,3u,false>>::SE2GroupStorage(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 64) = 0x3FF0000000000000;
  *(_OWORD *)a1 = xmmword_20AC06268;
  *(_OWORD *)(a1 + 16) = unk_20AC06278;
  result = 1.0;
  *(_OWORD *)(a1 + 32) = xmmword_20AC06288;
  *(_OWORD *)(a1 + 48) = unk_20AC06298;
  return result;
}

{
  double result;

  *(_QWORD *)(a1 + 64) = 0x3FF0000000000000;
  *(_OWORD *)a1 = xmmword_20AC06268;
  *(_OWORD *)(a1 + 16) = unk_20AC06278;
  result = 1.0;
  *(_OWORD *)(a1 + 32) = xmmword_20AC06288;
  *(_OWORD *)(a1 + 48) = unk_20AC06298;
  return result;
}

uint64_t cva::SE2GroupStorage<double,cva::Matrix<double,3u,3u,false>>::SE2GroupStorage(uint64_t a1, _QWORD *a2, double a3)
{
  __double2 v5;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  v5 = __sincos_stret(a3);
  *(double *)a1 = v5.__cosval;
  *(double *)(a1 + 8) = v5.__sinval;
  *(double *)(a1 + 24) = -v5.__sinval;
  *(double *)(a1 + 32) = v5.__cosval;
  *(_QWORD *)(a1 + 48) = *a2;
  *(_QWORD *)(a1 + 56) = a2[1];
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 64) = 0x3FF0000000000000;
  return a1;
}

{
  __double2 v5;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  v5 = __sincos_stret(a3);
  *(double *)a1 = v5.__cosval;
  *(double *)(a1 + 8) = v5.__sinval;
  *(double *)(a1 + 24) = -v5.__sinval;
  *(double *)(a1 + 32) = v5.__cosval;
  *(_QWORD *)(a1 + 48) = *a2;
  *(_QWORD *)(a1 + 56) = a2[1];
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 64) = 0x3FF0000000000000;
  return a1;
}

double cva::SE2GroupStorage<double,cva::Matrix<double,3u,3u,false>>::SE2GroupStorage(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  double result;

  v3 = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v4 = 0x100000000;
  do
  {
    v5 = *a2++;
    *(_QWORD *)(a1 + 8 * v3) = v5;
    v6 = HIDWORD(v4);
    v7 = (int)v4 < 1;
    if ((int)v4 < 1)
      v6 = 0;
    v8 = v3 + v6;
    v9 = (v4 + 1);
    v10 = v4 & 0xFFFFFFFF00000000;
    if (!v7)
      v9 = 0;
    v4 = v9 | v10;
    v3 = v8 + 1;
  }
  while (v3 != 6);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)a3;
  result = *(double *)(a3 + 8);
  *(double *)(a1 + 56) = result;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 64) = 0x3FF0000000000000;
  return result;
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  double result;

  v3 = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v4 = 0x100000000;
  do
  {
    v5 = *a2++;
    *(_QWORD *)(a1 + 8 * v3) = v5;
    v6 = HIDWORD(v4);
    v7 = (int)v4 < 1;
    if ((int)v4 < 1)
      v6 = 0;
    v8 = v3 + v6;
    v9 = (v4 + 1);
    v10 = v4 & 0xFFFFFFFF00000000;
    if (!v7)
      v9 = 0;
    v4 = v9 | v10;
    v3 = v8 + 1;
  }
  while (v3 != 6);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)a3;
  result = *(double *)(a3 + 8);
  *(double *)(a1 + 56) = result;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 64) = 0x3FF0000000000000;
  return result;
}

uint64_t cva::SE2GroupStorage<double,cva::Matrix<double,3u,3u,false>>::T(uint64_t a1)
{
  return a1 + 48;
}

{
  return a1 + 48;
}

__n128 cva::SE2GroupStorage<double,cva::Matrix<double,3u,3u,false>>::affine@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  _OWORD *v2;
  __n128 result;

  a2[1] = 0u;
  a2[2] = 0u;
  *a2 = 0u;
  v2 = (_OWORD *)a1;
  if ((_OWORD *)a1 != a2)
  {
    *a2 = *(_OWORD *)a1;
    v2 = a2;
  }
  v2[1] = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 48);
  v2[2] = result;
  return result;
}

__n128 cva::SE2GroupStorage<double,cva::Matrix<double,3u,3u,false>>::lplus(uint64_t a1, double *a2)
{
  double v3;
  double v4;
  double v5;
  __double2 v6;
  double v7;
  double v8;
  double v9;
  __int128 v10;
  __n128 result;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  double *v17[2];
  __int128 v18;
  __n128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v12 = xmmword_20AC06268;
  v13 = unk_20AC06278;
  v14 = xmmword_20AC06288;
  v15 = unk_20AC06298;
  v16 = 0x3FF0000000000000;
  v6 = __sincos_stret(v3);
  v7 = v3 * v3;
  if (v3 * v3 >= 0.0000002635)
  {
    v8 = 1.0 / v3 * v6.__sinval;
    v9 = 1.0 / v3 * (1.0 - v6.__cosval);
  }
  else
  {
    v8 = 1.0 - v7 * (v7 / -120.0 + 0.166666667);
    v9 = v3 * (v7 / -24.0 + 0.5);
  }
  *(double *)&v12 = v6.__cosval;
  *((_QWORD *)&v12 + 1) = *(_QWORD *)&v6.__sinval;
  *((double *)&v13 + 1) = -v6.__sinval;
  *(double *)&v14 = v6.__cosval;
  *(double *)&v15 = v8 * v4 - v9 * v5;
  *((double *)&v15 + 1) = v5 * v8 + v9 * v4;
  v17[0] = (double *)&v12;
  v17[1] = (double *)a1;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0;
  sub_20AB92ED0((uint64_t)&v18, v17);
  v10 = v21;
  *(_OWORD *)(a1 + 32) = v20;
  *(_OWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 64) = v22;
  result = v19;
  *(_OWORD *)a1 = v18;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

double cva::SE2AlgebraStorage<double,cva::MatrixRef<double const,3u,1u,false>>::SE2AlgebraStorage(_QWORD *a1, uint64_t a2)
{
  double result;

  *a1 = a2;
  *(_QWORD *)&result = 3;
  a1[1] = 3;
  return result;
}

{
  double result;

  *a1 = a2;
  *(_QWORD *)&result = 3;
  a1[1] = 3;
  return result;
}

{
  double result;

  *a1 = a2;
  *(_QWORD *)&result = 3;
  a1[1] = 3;
  return result;
}

{
  double result;

  *a1 = a2;
  *(_QWORD *)&result = 3;
  a1[1] = 3;
  return result;
}

double cva::SE2AlgebraStorage<double,cva::MatrixRef<double const,3u,1u,false>>::exp@<D0>(double **a1@<X0>, uint64_t a2@<X8>)
{
  double *v3;
  double v4;
  __double2 v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double result;

  *(_QWORD *)(a2 + 64) = 0x3FF0000000000000;
  *(_OWORD *)a2 = xmmword_20AC06268;
  *(_OWORD *)(a2 + 16) = unk_20AC06278;
  *(_OWORD *)(a2 + 32) = xmmword_20AC06288;
  *(_OWORD *)(a2 + 48) = unk_20AC06298;
  v3 = *a1;
  v4 = **a1;
  v5 = __sincos_stret(v4);
  v6 = v4 * v4;
  if (v4 * v4 >= 0.0000002635)
  {
    v7 = 1.0 / v4 * v5.__sinval;
    v8 = 1.0 / v4 * (1.0 - v5.__cosval);
  }
  else
  {
    v7 = 1.0 - v6 * (v6 / -120.0 + 0.166666667);
    v8 = v4 * (v6 / -24.0 + 0.5);
  }
  *(double *)a2 = v5.__cosval;
  *(double *)(a2 + 8) = v5.__sinval;
  *(double *)(a2 + 24) = -v5.__sinval;
  *(double *)(a2 + 32) = v5.__cosval;
  v9 = v3[1];
  v10 = v3[2];
  v11 = v7 * v9 - v8 * v10;
  result = v7 * v10 + v8 * v9;
  *(double *)(a2 + 48) = v11;
  *(double *)(a2 + 56) = result;
  return result;
}

__n128 cva::SE2GroupStorage<double,cva::Matrix<double,3u,3u,false>>::rplus(uint64_t a1, double *a2)
{
  double v3;
  double v4;
  double v5;
  __double2 v6;
  double v7;
  double v8;
  double v9;
  __int128 v10;
  __n128 result;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  double *v17[2];
  __int128 v18;
  __n128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v12 = xmmword_20AC06268;
  v13 = unk_20AC06278;
  v14 = xmmword_20AC06288;
  v15 = unk_20AC06298;
  v16 = 0x3FF0000000000000;
  v6 = __sincos_stret(v3);
  v7 = v3 * v3;
  if (v3 * v3 >= 0.0000002635)
  {
    v8 = 1.0 / v3 * v6.__sinval;
    v9 = 1.0 / v3 * (1.0 - v6.__cosval);
  }
  else
  {
    v8 = 1.0 - v7 * (v7 / -120.0 + 0.166666667);
    v9 = v3 * (v7 / -24.0 + 0.5);
  }
  *(double *)&v12 = v6.__cosval;
  *((_QWORD *)&v12 + 1) = *(_QWORD *)&v6.__sinval;
  *((double *)&v13 + 1) = -v6.__sinval;
  *(double *)&v14 = v6.__cosval;
  *(double *)&v15 = v8 * v4 - v9 * v5;
  *((double *)&v15 + 1) = v5 * v8 + v9 * v4;
  v17[0] = (double *)a1;
  v17[1] = (double *)&v12;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0;
  sub_20AB92ED0((uint64_t)&v18, v17);
  v10 = v21;
  *(_OWORD *)(a1 + 32) = v20;
  *(_OWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 64) = v22;
  result = v19;
  *(_OWORD *)a1 = v18;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

double cva::SE2GroupStorage<double,cva::Matrix<double,3u,3u,false>>::transform@<D0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  double result;
  double v6;
  _QWORD v7[2];
  double *v8[2];
  double v9;
  double v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v7[0] = a1;
  v7[1] = 3;
  v8[0] = (double *)v7;
  v8[1] = a2;
  v9 = 0.0;
  v10 = 0.0;
  sub_20AB9C2E0(&v9, v8);
  *a3 = 0.0;
  a3[1] = 0.0;
  result = v9 + a1[6];
  v6 = v10 + a1[7];
  if (a1 == a3)
  {
    *a1 = result;
    a1[1] = v6;
  }
  else
  {
    *a3 = result;
    a3[1] = v6;
  }
  return result;
}

double *sub_20AB9C2E0(double *result, double **a2)
{
  double *v2;
  uint64_t v3;
  double *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double *v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  __int128 v17;

  v2 = result;
  v3 = *(_QWORD *)*a2;
  if ((double *)(v3 - 8 * *((unsigned int *)*a2 + 3)) == result || (v4 = a2[1], v4 == result))
  {
    v17 = 0uLL;
    result = (double *)sub_20AB9C2E0(&v17);
    *(_OWORD *)v2 = v17;
  }
  else
  {
    v5 = *((unsigned int *)*a2 + 2);
    v6 = (2 * v5);
    if ((_DWORD)v6)
    {
      v7 = 0;
      v8 = 8 * v6;
      v9 = 8 * v5;
      v10 = 0.0;
      v11 = a2[1];
      do
      {
        v12 = *v11++;
        v10 = v10 + *(double *)(v3 + v7) * v12;
        v7 += v9;
      }
      while (v8 != v7);
      v13 = 0;
      *result = v10;
      v14 = v3 + 8;
      v15 = 0.0;
      do
      {
        v16 = *v4++;
        v15 = v15 + *(double *)(v14 + v13) * v16;
        v13 += v9;
      }
      while (v8 != v13);
    }
    else
    {
      *result = 0.0;
      v15 = 0.0;
    }
    result[1] = v15;
  }
  return result;
}

float64x2_t cva::SE2GroupStorage<double,cva::Matrix<double,3u,3u,false>>::inverseTransform@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, float64x2_t *a3@<X8>)
{
  float64x2_t result;
  _QWORD v5[2];
  _QWORD v6[2];
  _QWORD *v7;
  uint64_t *v8[2];
  _QWORD v9[2];
  _QWORD *v10;
  uint64_t *v11[2];
  float64x2_t v12;
  float64x2_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v9[0] = a1;
  v9[1] = 3;
  v10 = v9;
  v11[0] = (uint64_t *)&v10;
  v11[1] = a2;
  v6[0] = a1;
  v6[1] = 3;
  v7 = v6;
  v5[0] = a1 + 48;
  v5[1] = 0x600000003;
  v8[0] = (uint64_t *)&v7;
  v8[1] = v5;
  v12 = 0uLL;
  sub_20AB9C470(v12.f64, v11);
  v13 = 0uLL;
  sub_20AB9C500((uint64_t)&v13, v8);
  result = vsubq_f64(v12, v13);
  *a3 = result;
  return result;
}

double sub_20AB9C470(double *a1, uint64_t **a2)
{
  double *v3;
  uint64_t v4;
  double *v5;
  uint64_t v6;
  double result;
  __int128 v8;

  v3 = (double *)a2[1];
  if (v3 == a1)
  {
    v8 = 0uLL;
    sub_20AB9C470(&v8);
    result = *(double *)&v8;
    *(_OWORD *)a1 = v8;
  }
  else
  {
    v4 = **a2;
    v5 = *(double **)v4;
    v6 = *(unsigned int *)(v4 + 8);
    *a1 = v5[1] * v3[1] + *v5 * *v3 + 0.0;
    result = v5[v6 + 1] * v3[1] + v5[v6] * *v3 + 0.0;
    a1[1] = result;
  }
  return result;
}

double sub_20AB9C500(uint64_t a1, uint64_t **a2)
{
  uint64_t *v3;
  double *v4;
  uint64_t v5;
  double *v6;
  uint64_t v7;
  double result;
  __int128 v9;

  v3 = a2[1];
  v4 = (double *)*v3;
  if (*v3 - 8 * *((unsigned int *)v3 + 3) == a1)
  {
    v9 = 0uLL;
    sub_20AB9C500(&v9);
    result = *(double *)&v9;
    *(_OWORD *)a1 = v9;
  }
  else
  {
    v5 = **a2;
    v6 = *(double **)v5;
    v7 = *(unsigned int *)(v5 + 8);
    *(double *)a1 = v6[1] * v4[1] + *v6 * *v4 + 0.0;
    result = v6[v7 + 1] * v4[1] + v6[v7] * *v4 + 0.0;
    *(double *)(a1 + 8) = result;
  }
  return result;
}

double cva::SE2GroupStorage<double,cva::Matrix<double,3u,3u,false>>::transformJacobian@<D0>(double *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)a1;
  result = -a1[1];
  *(double *)a2 = result;
  *(_QWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0x3FF0000000000000;
  return result;
}

void cva::SE2GroupStorage<double,cva::Matrix<double,3u,3u,false>>::inverseTransformJacobian(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v5;
  double v6;
  double v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t j;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  double *v17;
  uint64_t i;
  uint64_t v19;
  unint64_t v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD v25[2];
  _QWORD v26[2];
  _QWORD *v27;
  uint64_t *v28[2];
  double v29;
  unint64_t v30;
  double v31;
  unint64_t v32;

  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  v5 = -*(double *)a2;
  *(_QWORD *)a3 = *(_QWORD *)(a2 + 8);
  *(double *)(a3 + 8) = v5;
  v26[0] = a1;
  v26[1] = 3;
  v27 = v26;
  v25[0] = a3;
  v25[1] = 2;
  v28[0] = (uint64_t *)&v27;
  v28[1] = v25;
  v29 = 0.0;
  v30 = 0;
  sub_20AB9C500((uint64_t)&v29, v28);
  v7 = v29;
  v6 = *(double *)&v30;
  *(double *)a3 = v29;
  *(double *)(a3 + 8) = v6;
  if (a1 == a3)
  {
    v16 = 0;
    v29 = -v7;
    v30 = 0x8000000000000000;
    v31 = -v6;
    v32 = 0x8000000000000000;
    v17 = &v29;
    for (i = 2; i != 6; i = v22 + 1)
    {
      v19 = *(_QWORD *)v17++;
      *(_QWORD *)(a3 + 8 * i) = v19;
      v20 = HIDWORD(v16);
      v21 = (int)v16 < 1;
      if ((int)v16 < 1)
        v20 = 0;
      v22 = i + v20;
      v23 = (v16 + 1);
      v24 = v16 & 0xFFFFFFFF00000000;
      if (!v21)
        v23 = 0;
      v16 = v23 | v24;
    }
  }
  else
  {
    v8 = 0;
    v9 = 0;
    for (j = 2; j != 6; j = v13 + 1)
    {
      *(double *)(a3 + 8 * j) = -*(double *)(a1 + 8 * (3 * v9 + HIDWORD(v9)));
      if ((int)v9 >= 1)
        v9 = (v9 & 0xFFFFFFFF00000000) + 0x100000000;
      else
        v9 = (v9 + 1) | v9 & 0xFFFFFFFF00000000;
      v11 = HIDWORD(v8);
      v12 = (int)v8 < 1;
      if ((int)v8 < 1)
        v11 = 0;
      v13 = j + v11;
      v14 = (v8 + 1);
      v15 = v8 & 0xFFFFFFFF00000000;
      if (!v12)
        v14 = 0;
      v8 = v14 | v15;
    }
  }
}

double cva::SE2GroupStorage<double,cva::Matrix<double,3u,3u,false>>::log@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double v4;
  double v5;
  double v6;
  double v7;
  __double2 v8;
  double v9;
  double v10;
  double v11;
  double result;

  v4 = atan2(*(long double *)(a1 + 8), *(long double *)a1);
  v5 = v4 * v4;
  if (v4 * v4 >= 0.0000002635)
  {
    v8 = __sincos_stret(v4);
    v6 = 1.0 / v4 * v8.__sinval;
    v7 = 1.0 / v4 * (1.0 - v8.__cosval);
  }
  else
  {
    v6 = 1.0 - v5 * (v5 / -120.0 + 0.166666667);
    v7 = v4 * (v5 / -24.0 + 0.5);
  }
  v9 = 1.0 / (v7 * v7 + v6 * v6);
  v10 = *(double *)(a1 + 48);
  v11 = *(double *)(a1 + 56);
  *a2 = v4;
  a2[1] = v9 * (v7 * v11 + v6 * v10);
  result = v9 * (v6 * v11 - v7 * v10);
  a2[2] = result;
  return result;
}

_QWORD *cva::SE2AlgebraStorage<double,cva::Matrix<double,3u,1u,false>>::SE2AlgebraStorage(_QWORD *result)
{
  *result = 0;
  result[1] = 0;
  result[2] = 0;
  return result;
}

{
  *result = 0;
  result[1] = 0;
  result[2] = 0;
  return result;
}

void cva::SE2GroupStorage<double,cva::Matrix<double,3u,3u,false>>::logJacobian(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  __double2 v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  BOOL v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD v36[2];
  _QWORD v37[2];
  _QWORD v38[4];
  double v39;
  double v40;

  *(_OWORD *)(a2 + 24) = 0u;
  v4 = (_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  v5 = atan2(*(long double *)(a1 + 8), *(long double *)a1);
  v6 = v5 * v5;
  if (v5 * v5 >= 0.0000002635)
  {
    v12 = __sincos_stret(v5);
    v9 = 1.0 / v5 * v12.__sinval;
    v11 = 1.0 / v5 * (1.0 - v12.__cosval);
    v7 = 1.0 / v5 * v11;
    v10 = 1.0 / v5 * (1.0 - v9);
  }
  else
  {
    v7 = 0.5 - v6 * (v6 / -720.0 + 0.0416666667);
    v8 = 0.166666667 - v6 * (v6 / -5040.0 + 0.00833333333);
    v9 = 1.0 - v6 * v8;
    v10 = v5 * v8;
    v11 = v5 * v7;
  }
  v13 = v11 * v11 + v9 * v9;
  v14 = 1.0 / v13;
  v15 = *(double *)(a1 + 48);
  v16 = *(double *)(a1 + 56);
  v17 = 1.0 / v13 * (v11 * v16 + v9 * v15);
  *(double *)a2 = v5;
  *(double *)(a2 + 8) = v17;
  v18 = 1.0 / v13 * (v9 * v16 - v11 * v15);
  *(double *)(a2 + 16) = v18;
  if (fabs(v13) >= 0.00001)
  {
    v19 = v9 * v14;
    v20 = v14 * -v11;
    v21 = v11 * v14;
    *(double *)v38 = v19;
    *(double *)&v38[1] = v20;
    *(double *)&v38[2] = v21;
    *(double *)&v38[3] = v19;
    v22 = v10 * v17 + v7 * v18;
    v23 = v10 * v18 - v7 * v17;
    *(double *)v37 = v22;
    *(double *)&v37[1] = v23;
    *(_QWORD *)(a2 + 24) = 0x3FF0000000000000;
    v35 = v38;
    v36[0] = &v35;
    v36[1] = v37;
    if (v37 == v4)
    {
      v39 = 0.0;
      v40 = 0.0;
      sub_20AB9C9F8(&v39, (uint64_t)v36);
      v24 = v39;
      v25 = v40;
    }
    else
    {
      v24 = 0.0 - v19 * v22 - v21 * v23;
      v25 = 0.0 - v20 * v22 - v19 * v23;
    }
    *(double *)(a2 + 32) = v24;
    *(double *)(a2 + 40) = v25;
    *(_QWORD *)(a2 + 48) = 0;
    v26 = 0x100000000;
    v27 = v38;
    v28 = 4;
    *(_QWORD *)(a2 + 72) = 0;
    do
    {
      v29 = *v27++;
      v4[v28] = v29;
      v30 = HIDWORD(v26);
      v31 = (int)v26 < 1;
      if ((int)v26 < 1)
        v30 = 0;
      v32 = v28 + v30;
      v33 = (v26 + 1);
      v34 = v26 & 0xFFFFFFFF00000000;
      if (!v31)
        v33 = 0;
      v26 = v33 | v34;
      v28 = v32 + 1;
    }
    while (v28 != 10);
  }
}

double sub_20AB9C9F8(double *a1, uint64_t a2)
{
  double *v3;
  double *v4;
  double v5;
  double v6;
  double result;
  __int128 v8;

  v3 = *(double **)(a2 + 8);
  if (v3 == a1)
  {
    v8 = 0uLL;
    sub_20AB9C9F8(&v8);
    result = *(double *)&v8;
    *(_OWORD *)a1 = v8;
  }
  else
  {
    v4 = **(double ***)a2;
    v5 = v4[1];
    v6 = v4[3];
    *a1 = 0.0 - *v4 * *v3 - v4[2] * v3[1];
    result = 0.0 - v5 * *v3 - v6 * v3[1];
    a1[1] = result;
  }
  return result;
}

double cva::SE2GroupStorage<double,cva::Matrix<double,3u,3u,false>>::inverse@<D0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double result;

  *(_OWORD *)a2 = xmmword_20AC06268;
  *(_OWORD *)(a2 + 16) = unk_20AC06278;
  *(_QWORD *)(a2 + 64) = 0x3FF0000000000000;
  *(_OWORD *)(a2 + 32) = xmmword_20AC06288;
  *(_OWORD *)(a2 + 48) = unk_20AC06298;
  v2 = *a1;
  v3 = a1[1];
  v4 = a1[3];
  v5 = a1[4];
  *(double *)a2 = *a1;
  *(double *)(a2 + 8) = v4;
  *(double *)(a2 + 24) = v3;
  *(double *)(a2 + 32) = v5;
  v6 = a1[6];
  v7 = a1[7];
  result = -(v3 * v7) - v2 * v6;
  *(double *)(a2 + 48) = result;
  *(double *)(a2 + 56) = -(v5 * v7) - v4 * v6;
  return result;
}

double cva::SE2GroupStorage<double,cva::Matrix<double,3u,3u,false>>::adjoint@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __int128 v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t i;
  uint64_t v22;
  unint64_t v23;
  BOOL v24;
  BOOL v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  double result;
  double v30;
  _OWORD v31[2];

  *(_QWORD *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  if (a1 == a2)
  {
    v18 = *(_OWORD *)(a2 + 24);
    v31[0] = *(_OWORD *)a2;
    v31[1] = v18;
    v19 = 0x100000000;
    v20 = (uint64_t *)v31;
    for (i = 4; i != 10; i = v26 + 1)
    {
      v22 = *v20++;
      *(_QWORD *)(a2 + 8 * i) = v22;
      v23 = HIDWORD(v19);
      v25 = __OFSUB__((_DWORD)v19, 1);
      v24 = (int)v19 - 1 < 0;
      if ((int)v19 < 1)
        v23 = 0;
      v26 = i + v23;
      v27 = (v19 + 1);
      v28 = v19 & 0xFFFFFFFF00000000;
      if (v24 == v25)
        v27 = 0;
      v19 = v27 | v28;
    }
  }
  else
  {
    v2 = 0x100000000;
    v3 = 4;
    v4 = (_QWORD *)a1;
    v5 = 0x100000000;
    do
    {
      *(_QWORD *)(a2 + 8 * v3) = *v4;
      v6 = HIDWORD(v5);
      v8 = __OFSUB__((_DWORD)v5, 1);
      v7 = (int)v5 - 1 < 0;
      if ((int)v5 < 1)
        v6 = 0;
      v9 = &v4[v6];
      v10 = (v5 + 1);
      v11 = v5 & 0xFFFFFFFF00000000;
      if (v7 == v8)
        v10 = 0;
      v5 = v10 | v11;
      v4 = v9 + 1;
      v12 = HIDWORD(v2);
      v14 = __OFSUB__((_DWORD)v2, 1);
      v13 = (int)v2 - 1 < 0;
      if ((int)v2 < 1)
        v12 = 0;
      v15 = v3 + v12;
      v16 = (v2 + 1);
      v17 = v2 & 0xFFFFFFFF00000000;
      if (v13 == v14)
        v16 = 0;
      v2 = v16 | v17;
      v3 = v15 + 1;
    }
    while (v3 != 10);
  }
  result = *(double *)(a1 + 56);
  v30 = -*(double *)(a1 + 48);
  *(double *)(a2 + 8) = result;
  *(double *)(a2 + 16) = v30;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)a2 = 0x3FF0000000000000;
  return result;
}

double cva::SE2GroupStorage<double,cva::Matrix<double,3u,3u,false>>::enforce(uint64_t a1)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double sinval;
  double cosval;
  __double2 v8;
  __double2 v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double result;

  v2 = atan2(*(long double *)(a1 + 8), *(long double *)a1);
  v3 = v2 * v2;
  if (v2 * v2 >= 0.0000002635)
  {
    v9 = __sincos_stret(v2);
    cosval = v9.__cosval;
    sinval = v9.__sinval;
    v4 = 1.0 / v2 * v9.__sinval;
    v5 = 1.0 / v2 * (1.0 - v9.__cosval);
  }
  else
  {
    v4 = 1.0 - v3 * (v3 / -120.0 + 0.166666667);
    v5 = v2 * (v3 / -24.0 + 0.5);
    v8 = __sincos_stret(v2);
    cosval = v8.__cosval;
    sinval = v8.__sinval;
  }
  v10 = *(double *)(a1 + 48);
  v11 = *(double *)(a1 + 56);
  v12 = 1.0 / (v5 * v5 + v4 * v4);
  v13 = v12 * (v4 * v11 - v5 * v10);
  v14 = v12 * (v5 * v11 + v4 * v10);
  *(double *)a1 = cosval;
  *(double *)(a1 + 8) = sinval;
  *(_QWORD *)(a1 + 16) = 0;
  *(double *)(a1 + 24) = -sinval;
  *(double *)(a1 + 32) = cosval;
  result = v13 * v4 + v5 * v14;
  *(_QWORD *)(a1 + 40) = 0;
  *(double *)(a1 + 48) = v4 * v14 - v5 * v13;
  *(double *)(a1 + 56) = result;
  *(_QWORD *)(a1 + 64) = 0x3FF0000000000000;
  return result;
}

double cva::SE2AlgebraStorage<double,cva::Matrix<double,3u,1u,false>>::exp@<D0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  double v4;
  __double2 v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double result;

  *(_QWORD *)(a2 + 64) = 0x3FF0000000000000;
  *(_OWORD *)a2 = xmmword_20AC06268;
  *(_OWORD *)(a2 + 16) = unk_20AC06278;
  *(_OWORD *)(a2 + 32) = xmmword_20AC06288;
  *(_OWORD *)(a2 + 48) = unk_20AC06298;
  v4 = *a1;
  v5 = __sincos_stret(*a1);
  v6 = v4 * v4;
  if (v4 * v4 >= 0.0000002635)
  {
    v7 = 1.0 / v4 * v5.__sinval;
    v8 = 1.0 / v4 * (1.0 - v5.__cosval);
  }
  else
  {
    v7 = 1.0 - v6 * (v6 / -120.0 + 0.166666667);
    v8 = v4 * (v6 / -24.0 + 0.5);
  }
  *(double *)a2 = v5.__cosval;
  *(double *)(a2 + 8) = v5.__sinval;
  *(double *)(a2 + 24) = -v5.__sinval;
  *(double *)(a2 + 32) = v5.__cosval;
  v9 = a1[1];
  v10 = a1[2];
  v11 = v7 * v9 - v8 * v10;
  result = v7 * v10 + v8 * v9;
  *(double *)(a2 + 48) = v11;
  *(double *)(a2 + 56) = result;
  return result;
}

uint64_t cva::SE2GroupStorage<double,cva::Matrix<double,3u,3u,false>>::serialize()
{
  return std::ostream::write();
}

uint64_t cva::SE2GroupStorage<double,cva::Matrix<double,3u,3u,false>>::deserialize()
{
  return std::istream::read();
}

double cva::SE2GroupStorage<float,cva::MatrixRef<float const,3u,3u,false>>::SE2GroupStorage(_QWORD *a1, uint64_t a2)
{
  double result;

  *a1 = a2;
  *(_QWORD *)&result = 3;
  a1[1] = 3;
  return result;
}

{
  double result;

  *a1 = a2;
  *(_QWORD *)&result = 3;
  a1[1] = 3;
  return result;
}

{
  double result;

  *a1 = a2;
  *(_QWORD *)&result = 3;
  a1[1] = 3;
  return result;
}

{
  double result;

  *a1 = a2;
  *(_QWORD *)&result = 3;
  a1[1] = 3;
  return result;
}

uint64_t cva::SE2GroupStorage<float,cva::MatrixRef<float const,3u,3u,false>>::R(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t cva::SE2GroupStorage<float,cva::MatrixRef<float const,3u,3u,false>>::T(uint64_t a1)
{
  return *(_QWORD *)a1
       - 4 * *(unsigned int *)(a1 + 12)
       + 4 * (*(_DWORD *)(a1 + 12) + 2 * *(_DWORD *)(a1 + 8));
}

uint64_t cva::SE2GroupStorage<float,cva::MatrixRef<float const,3u,3u,false>>::affine@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int *v2;
  uint64_t v3;
  int v4;
  int *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int *v9;
  int v10;
  int *v11;
  int v12;
  uint64_t v13;
  int *v14;
  __int128 v15;
  uint64_t v16;

  v2 = *(int **)result;
  v4 = *(_DWORD *)(result + 8);
  v3 = *(unsigned int *)(result + 12);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v5 = &v2[-v3];
  v6 = (v4 - 2);
  v7 = *v2;
  if (v5 == (int *)a2)
  {
    v12 = v2[1];
    v13 = v6;
    v14 = &v2[v13];
    *(_QWORD *)&v15 = *((_QWORD *)v14 + 1);
    v16 = *(_QWORD *)&v14[v13 + 4];
    *(_DWORD *)a2 = v7;
    *(_DWORD *)(a2 + 4) = v12;
    *((_QWORD *)&v15 + 1) = v16;
    *(_OWORD *)(a2 + 8) = v15;
  }
  else
  {
    *(_DWORD *)a2 = v7;
    *(_DWORD *)(a2 + 4) = v2[1];
    v8 = v6;
    v9 = &v2[v8];
    v10 = v9[2];
    v9 += 2;
    *(_DWORD *)(a2 + 8) = v10;
    *(_DWORD *)(a2 + 12) = v9[1];
    v11 = &v9[v8];
    *(_DWORD *)(a2 + 16) = v11[2];
    *(_DWORD *)(a2 + 20) = v11[3];
  }
  return result;
}

float cva::SE2GroupStorage<float,cva::MatrixRef<float const,3u,3u,false>>::transform@<S0>(uint64_t a1@<X0>, float *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  float result;
  float v9;
  _QWORD v10[2];
  float *v11[2];
  float v12[7];

  v5 = *(unsigned int *)(a1 + 8);
  v4 = *(unsigned int *)(a1 + 12);
  v6 = *(_QWORD *)a1 - 4 * v4;
  v10[0] = *(_QWORD *)a1;
  v10[1] = v5 | (v4 << 32);
  v11[0] = (float *)v10;
  v11[1] = a2;
  v7 = (float *)(v6 + 4 * (v4 + 2 * v5));
  *(_QWORD *)v12 = 0;
  sub_20AB9B1F0(v12, v11);
  *(_QWORD *)a3 = 0;
  result = v12[0] + *v7;
  if (v6 == a3)
  {
    v9 = v12[1] + v7[1];
    *(float *)a3 = result;
    *(float *)(a3 + 4) = v9;
  }
  else
  {
    *(float *)a3 = result;
    result = v12[1] + v7[1];
    *(float *)(a3 + 4) = result;
  }
  return result;
}

float32x2_t cva::SE2GroupStorage<float,cva::MatrixRef<float const,3u,3u,false>>::inverseTransform@<D0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, float32x2_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float32x2_t result;
  _QWORD v9[2];
  _QWORD v10[2];
  _QWORD *v11;
  uint64_t *v12[2];
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16[2];
  float32x2_t v17;
  float32x2_t v18;

  v5 = *((unsigned int *)a1 + 2);
  v4 = *((unsigned int *)a1 + 3);
  v6 = *a1 - 4 * v4;
  v13 = *a1;
  v14 = v5 | (v4 << 32);
  v15 = &v13;
  v16[0] = (uint64_t *)&v15;
  v16[1] = a2;
  v10[0] = v13;
  v10[1] = v14;
  v11 = v10;
  v7 = (v4 + 2 * v5);
  v9[0] = v6 + 4 * v7;
  v9[1] = v5 | (v7 << 32);
  v12[0] = (uint64_t *)&v11;
  v12[1] = v9;
  v17 = 0;
  sub_20AB9B358((float *)&v17, v16);
  v18 = 0;
  sub_20AB9B3E8((float *)&v18, v12);
  result = vsub_f32(v17, v18);
  *a3 = result;
  return result;
}

double cva::SE2GroupStorage<float,cva::MatrixRef<float const,3u,3u,false>>::transformJacobian@<D0>(float *a1@<X1>, uint64_t a2@<X8>)
{
  int v2;
  double result;

  v2 = *(_DWORD *)a1;
  *(float *)a2 = -a1[1];
  *(_DWORD *)(a2 + 4) = v2;
  *(_QWORD *)&result = 1065353216;
  *(_OWORD *)(a2 + 8) = xmmword_20AC05C50;
  return result;
}

float *cva::SE2GroupStorage<float,cva::MatrixRef<float const,3u,3u,false>>::inverseTransformJacobian@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  float v4;
  float *v5;
  unint64_t v6;
  float *result;
  unint64_t v8;
  unint64_t v9;
  uint64_t j;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  float v17;
  float v18;
  float v19;
  uint64_t **v20;
  uint64_t i;
  int v22;
  unint64_t v23;
  BOOL v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];
  _QWORD v29[2];
  _QWORD *v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;

  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v4 = -*(float *)a2;
  *(_DWORD *)a3 = *(_DWORD *)(a2 + 4);
  *(float *)(a3 + 4) = v4;
  v6 = a1[1];
  v29[0] = *a1;
  v5 = (float *)v29[0];
  v29[1] = v6;
  v30 = v29;
  v31 = 0;
  v28[0] = a3;
  v28[1] = 2;
  v32 = (uint64_t *)&v30;
  v33 = v28;
  result = sub_20AB9B3E8((float *)&v31, &v32);
  *(_QWORD *)a3 = v31;
  if (&v5[-HIDWORD(v6)] == (float *)a3)
  {
    v16 = 0;
    v17 = v5[1];
    v18 = -v5[v6];
    *(float *)&v32 = -*v5;
    *((float *)&v32 + 1) = v18;
    v19 = -v5[(v6 + 1)];
    *(float *)&v33 = -v17;
    *((float *)&v33 + 1) = v19;
    v20 = &v32;
    for (i = 2; i != 6; i = v25 + 1)
    {
      v22 = *(_DWORD *)v20;
      v20 = (uint64_t **)((char *)v20 + 4);
      *(_DWORD *)(a3 + 4 * i) = v22;
      v23 = HIDWORD(v16);
      v24 = (int)v16 < 1;
      if ((int)v16 < 1)
        v23 = 0;
      v25 = i + v23;
      v26 = (v16 + 1);
      v27 = v16 & 0xFFFFFFFF00000000;
      if (!v24)
        v26 = 0;
      v16 = v26 | v27;
    }
  }
  else
  {
    v8 = 0;
    v9 = 0;
    for (j = 2; j != 6; j = v13 + 1)
    {
      *(float *)(a3 + 4 * j) = -v5[(HIDWORD(v9) + v6 * v9)];
      if ((int)v9 >= 1)
        v9 = (v9 & 0xFFFFFFFF00000000) + 0x100000000;
      else
        v9 = (v9 + 1) | v9 & 0xFFFFFFFF00000000;
      v11 = HIDWORD(v8);
      v12 = (int)v8 < 1;
      if ((int)v8 < 1)
        v11 = 0;
      v13 = j + v11;
      v14 = (v8 + 1);
      v15 = v8 & 0xFFFFFFFF00000000;
      if (!v12)
        v14 = 0;
      v8 = v14 | v15;
    }
  }
  return result;
}

float cva::SE2GroupStorage<float,cva::MatrixRef<float const,3u,3u,false>>::log@<S0>(float **a1@<X0>, float *a2@<X8>)
{
  float *v4;
  float v5;
  float v6;
  float v7;
  float v8;
  __float2 v9;
  float v10;
  int v11;
  float v12;
  float v13;
  float result;

  v4 = *a1;
  v5 = atan2f((*a1)[1], **a1);
  v6 = v5 * v5;
  if ((float)(v5 * v5) >= 0.0061)
  {
    v9 = __sincosf_stret(v5);
    v7 = (float)(1.0 / v5) * v9.__sinval;
    v8 = (float)(1.0 / v5) * (float)(1.0 - v9.__cosval);
  }
  else
  {
    v7 = 1.0 - (float)(v6 * (float)((float)(v6 / -120.0) + 0.16667));
    v8 = v5 * (float)((float)(v6 / -24.0) + 0.5);
  }
  v10 = 1.0 / (float)((float)(v8 * v8) + (float)(v7 * v7));
  v11 = *((_DWORD *)a1 + 2);
  v12 = v4[2 * v11];
  v13 = v4[(2 * v11) | 1];
  *a2 = v5;
  a2[1] = v10 * (float)((float)(v8 * v13) + (float)(v7 * v12));
  result = v10 * (float)((float)(v7 * v13) - (float)(v8 * v12));
  a2[2] = result;
  return result;
}

void cva::SE2GroupStorage<float,cva::MatrixRef<float const,3u,3u,false>>::logJacobian(float **a1@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v4;
  float *v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  __float2 v13;
  float v14;
  float v15;
  int v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  unint64_t v28;
  int *v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  BOOL v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _DWORD *v37;
  _QWORD v38[2];
  _DWORD v39[2];
  _DWORD v40[4];
  uint64_t v41;

  *(_OWORD *)(a2 + 12) = 0u;
  v4 = (_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 44) = 0;
  *(_OWORD *)(a2 + 28) = 0u;
  v5 = *a1;
  v6 = atan2f((*a1)[1], **a1);
  v7 = v6 * v6;
  if ((float)(v6 * v6) >= 0.0061)
  {
    v13 = __sincosf_stret(v6);
    v10 = (float)(1.0 / v6) * v13.__sinval;
    v12 = (float)(1.0 / v6) * (float)(1.0 - v13.__cosval);
    v8 = (float)(1.0 / v6) * v12;
    v11 = (float)(1.0 / v6) * (float)(1.0 - v10);
  }
  else
  {
    v8 = 0.5 - (float)(v7 * (float)((float)(v7 / -720.0) + 0.041667));
    v9 = 0.16667 - (float)(v7 * (float)((float)(v7 / -5040.0) + 0.0083333));
    v10 = 1.0 - (float)(v7 * v9);
    v11 = v6 * v9;
    v12 = v6 * v8;
  }
  v14 = (float)(v12 * v12) + (float)(v10 * v10);
  v15 = 1.0 / v14;
  *(float *)a2 = v6;
  v16 = *((_DWORD *)a1 + 2);
  v17 = v5[2 * v16];
  v18 = v5[(2 * v16) | 1];
  v19 = (float)(1.0 / v14) * (float)((float)(v12 * v18) + (float)(v10 * v17));
  v20 = (float)(1.0 / v14) * (float)((float)(v10 * v18) - (float)(v12 * v17));
  *(float *)(a2 + 4) = v19;
  *(float *)(a2 + 8) = v20;
  if (fabsf(v14) >= 0.00001)
  {
    v21 = v10 * v15;
    v22 = v15 * (float)-v12;
    v23 = v12 * v15;
    *(float *)v40 = v21;
    *(float *)&v40[1] = v22;
    *(float *)&v40[2] = v23;
    *(float *)&v40[3] = v21;
    v24 = (float)(v11 * v19) + (float)(v8 * v20);
    v25 = (float)(v11 * v20) - (float)(v8 * v19);
    *(float *)v39 = v24;
    *(float *)&v39[1] = v25;
    *(_DWORD *)(a2 + 12) = 1065353216;
    v37 = v40;
    v38[0] = &v37;
    v38[1] = v39;
    if (v39 == v4)
    {
      v41 = 0;
      sub_20AB9B8DC((float *)&v41, (uint64_t)v38);
      v27 = *((float *)&v41 + 1);
      v26 = *(float *)&v41;
    }
    else
    {
      v26 = (float)(0.0 - (float)(v21 * v24)) - (float)(v23 * v25);
      v27 = (float)(0.0 - (float)(v22 * v24)) - (float)(v21 * v25);
    }
    *(float *)(a2 + 16) = v26;
    *(float *)(a2 + 20) = v27;
    *(_DWORD *)(a2 + 24) = 0;
    v28 = 0x100000000;
    v29 = v40;
    v30 = 4;
    *(_DWORD *)(a2 + 36) = 0;
    do
    {
      v31 = *v29++;
      v4[v30] = v31;
      v32 = HIDWORD(v28);
      v33 = (int)v28 < 1;
      if ((int)v28 < 1)
        v32 = 0;
      v34 = v30 + v32;
      v35 = (v28 + 1);
      v36 = v28 & 0xFFFFFFFF00000000;
      if (!v33)
        v35 = 0;
      v28 = v35 | v36;
      v30 = v34 + 1;
    }
    while (v30 != 10);
  }
}

float cva::SE2GroupStorage<float,cva::MatrixRef<float const,3u,3u,false>>::inverse@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  float *v2;
  uint64_t v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float result;

  *(_OWORD *)a2 = xmmword_20AC06220;
  *(_OWORD *)(a2 + 16) = unk_20AC06230;
  *(_DWORD *)(a2 + 32) = 1065353216;
  v2 = *(float **)a1;
  v3 = *(unsigned int *)(a1 + 8);
  v4 = *(float *)(*(_QWORD *)a1 + 4 * v3);
  v5 = **(float **)a1;
  v6 = *(float *)(*(_QWORD *)a1 + 4);
  *(float *)a2 = v5;
  *(float *)(a2 + 4) = v4;
  v7 = v2[(v3 + 1)];
  *(float *)(a2 + 12) = v6;
  *(float *)(a2 + 16) = v7;
  v8 = v2[(2 * v3)];
  v9 = v2[(2 * (_DWORD)v3) | 1];
  result = (float)-(float)(v7 * v9) - (float)(v4 * v8);
  *(float *)(a2 + 24) = (float)-(float)(v6 * v9) - (float)(v5 * v8);
  *(float *)(a2 + 28) = result;
  return result;
}

float cva::SE2GroupStorage<float,cva::MatrixRef<float const,3u,3u,false>>::adjoint@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  unint64_t v8;
  BOOL v9;
  _DWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __int128 v18;
  unint64_t v19;
  int *v20;
  uint64_t i;
  int v22;
  unint64_t v23;
  BOOL v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  float result;
  __int128 v29;

  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 0;
  v2 = *(_QWORD **)a1;
  v3 = *(_DWORD *)(a1 + 8);
  if (*(_QWORD *)a1 - 4 * *(unsigned int *)(a1 + 12) == a2)
  {
    *(_QWORD *)&v18 = *v2;
    *((_QWORD *)&v18 + 1) = *(_QWORD *)((char *)v2 + 4 * (v3 - 2) + 8);
    v29 = v18;
    v19 = 0x100000000;
    v20 = (int *)&v29;
    for (i = 4; i != 10; i = v25 + 1)
    {
      v22 = *v20++;
      *(_DWORD *)(a2 + 4 * i) = v22;
      v23 = HIDWORD(v19);
      v24 = (int)v19 < 1;
      if ((int)v19 < 1)
        v23 = 0;
      v25 = i + v23;
      v26 = (v19 + 1);
      v27 = v19 & 0xFFFFFFFF00000000;
      if (!v24)
        v26 = 0;
      v19 = v26 | v27;
    }
  }
  else
  {
    v4 = (unint64_t)(v3 - 2) << 32;
    v5 = 0x100000000;
    v6 = 4;
    v7 = *(_DWORD **)a1;
    do
    {
      *(_DWORD *)(a2 + 4 * v6) = *v7;
      v8 = HIDWORD(v4);
      v9 = (int)v4 < 1;
      if ((int)v4 < 1)
        v8 = 0;
      v10 = &v7[v8];
      v11 = (v4 + 1);
      v12 = v4 & 0xFFFFFFFF00000000;
      if (!v9)
        v11 = 0;
      v4 = v11 | v12;
      v7 = v10 + 1;
      v13 = HIDWORD(v5);
      v14 = (int)v5 < 1;
      if ((int)v5 < 1)
        v13 = 0;
      v15 = v6 + v13;
      v16 = (v5 + 1);
      v17 = v5 & 0xFFFFFFFF00000000;
      if (!v14)
        v16 = 0;
      v5 = v16 | v17;
      v6 = v15 + 1;
    }
    while (v6 != 10);
  }
  *(_DWORD *)(a2 + 4) = *((_DWORD *)v2 + ((2 * v3) | 1u));
  result = -*((float *)v2 + (2 * v3));
  *(float *)(a2 + 8) = result;
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)a2 = 1065353216;
  return result;
}

uint64_t cva::SE2GroupStorage<float,cva::MatrixRef<float const,3u,3u,false>>::serialize(uint64_t result)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_DWORD *)(result + 8);
  if (v1)
  {
    v2 = *(_QWORD *)result;
    v3 = *(_QWORD *)result + 4 * (3 * v1);
    v4 = (unint64_t)(v1 - 3) << 32;
    do
    {
      result = std::ostream::write();
      v5 = HIDWORD(v4);
      if ((int)v4 < 2)
        v5 = 0;
      v6 = v2 + 4 * v5;
      v7 = (v4 + 1);
      if ((int)v4 >= 2)
        v7 = 0;
      v4 = v7 | v4 & 0xFFFFFFFF00000000;
      v2 = v6 + 4;
    }
    while (v6 + 4 != v3);
  }
  return result;
}

double cva::SE2GroupStorage<double,cva::MatrixRef<double const,3u,3u,false>>::SE2GroupStorage(_QWORD *a1, uint64_t a2)
{
  double result;

  *a1 = a2;
  *(_QWORD *)&result = 3;
  a1[1] = 3;
  return result;
}

{
  double result;

  *a1 = a2;
  *(_QWORD *)&result = 3;
  a1[1] = 3;
  return result;
}

{
  double result;

  *a1 = a2;
  *(_QWORD *)&result = 3;
  a1[1] = 3;
  return result;
}

{
  double result;

  *a1 = a2;
  *(_QWORD *)&result = 3;
  a1[1] = 3;
  return result;
}

uint64_t cva::SE2GroupStorage<double,cva::MatrixRef<double const,3u,3u,false>>::R(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t cva::SE2GroupStorage<double,cva::MatrixRef<double const,3u,3u,false>>::T(uint64_t a1)
{
  return *(_QWORD *)a1
       - 8 * *(unsigned int *)(a1 + 12)
       + 8 * (*(_DWORD *)(a1 + 12) + 2 * *(_DWORD *)(a1 + 8));
}

uint64_t cva::SE2GroupStorage<double,cva::MatrixRef<double const,3u,3u,false>>::affine@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  __int128 v15;
  __int128 v16;

  v2 = *(uint64_t **)result;
  v4 = *(_DWORD *)(result + 8);
  v3 = *(unsigned int *)(result + 12);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  v5 = &v2[-v3];
  v6 = (v4 - 2);
  v7 = *v2;
  if (v5 == (uint64_t *)a2)
  {
    v12 = v2[1];
    v13 = v6;
    v14 = &v2[v13];
    v15 = *((_OWORD *)v14 + 1);
    v16 = *(_OWORD *)&v14[v13 + 4];
    *(_QWORD *)a2 = v7;
    *(_QWORD *)(a2 + 8) = v12;
    *(_OWORD *)(a2 + 16) = v15;
    *(_OWORD *)(a2 + 32) = v16;
  }
  else
  {
    *(_QWORD *)a2 = v7;
    *(_QWORD *)(a2 + 8) = v2[1];
    v8 = v6;
    v9 = &v2[v8];
    v10 = v9[2];
    v9 += 2;
    *(_QWORD *)(a2 + 16) = v10;
    *(_QWORD *)(a2 + 24) = v9[1];
    v11 = &v9[v8];
    *(_QWORD *)(a2 + 32) = v11[2];
    *(_QWORD *)(a2 + 40) = v11[3];
  }
  return result;
}

double cva::SE2GroupStorage<double,cva::MatrixRef<double const,3u,3u,false>>::transform@<D0>(uint64_t a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double *v7;
  double result;
  double v9;
  _QWORD v10[2];
  double *v11[2];
  double v12;
  double v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v5 = *(unsigned int *)(a1 + 8);
  v4 = *(unsigned int *)(a1 + 12);
  v6 = *(_QWORD *)a1 - 8 * v4;
  v10[0] = *(_QWORD *)a1;
  v10[1] = v5 | (v4 << 32);
  v11[0] = (double *)v10;
  v11[1] = a2;
  v7 = (double *)(v6 + 8 * (v4 + 2 * v5));
  v12 = 0.0;
  v13 = 0.0;
  sub_20AB9C2E0(&v12, v11);
  *a3 = 0.0;
  a3[1] = 0.0;
  result = v12 + *v7;
  if ((double *)v6 == a3)
  {
    v9 = v13 + v7[1];
    *a3 = result;
    a3[1] = v9;
  }
  else
  {
    *a3 = result;
    result = v13 + v7[1];
    a3[1] = result;
  }
  return result;
}

float64x2_t cva::SE2GroupStorage<double,cva::MatrixRef<double const,3u,3u,false>>::inverseTransform@<Q0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, float64x2_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float64x2_t result;
  _QWORD v9[2];
  _QWORD v10[2];
  _QWORD *v11;
  uint64_t *v12[2];
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16[2];
  float64x2_t v17;
  float64x2_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v5 = *((unsigned int *)a1 + 2);
  v4 = *((unsigned int *)a1 + 3);
  v6 = *a1 - 8 * v4;
  v13 = *a1;
  v14 = v5 | (v4 << 32);
  v15 = &v13;
  v16[0] = (uint64_t *)&v15;
  v16[1] = a2;
  v10[0] = v13;
  v10[1] = v14;
  v11 = v10;
  v7 = (v4 + 2 * v5);
  v9[0] = v6 + 8 * v7;
  v9[1] = v5 | (v7 << 32);
  v12[0] = (uint64_t *)&v11;
  v12[1] = v9;
  v17 = 0uLL;
  sub_20AB9C470(v17.f64, v16);
  v18 = 0uLL;
  sub_20AB9C500((uint64_t)&v18, v12);
  result = vsubq_f64(v17, v18);
  *a3 = result;
  return result;
}

double cva::SE2GroupStorage<double,cva::MatrixRef<double const,3u,3u,false>>::transformJacobian@<D0>(double *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)a1;
  result = -a1[1];
  *(double *)a2 = result;
  *(_QWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0x3FF0000000000000;
  return result;
}

void cva::SE2GroupStorage<double,cva::MatrixRef<double const,3u,3u,false>>::inverseTransformJacobian(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v4;
  double *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t j;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t i;
  uint64_t v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD v24[2];
  _QWORD v25[2];
  _QWORD *v26;
  uint64_t *v27[2];
  __int128 v28;
  double v29;
  double v30;

  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  v4 = -*(double *)a2;
  *(_QWORD *)a3 = *(_QWORD *)(a2 + 8);
  *(double *)(a3 + 8) = v4;
  v6 = a1[1];
  v25[0] = *a1;
  v5 = (double *)v25[0];
  v25[1] = v6;
  v26 = v25;
  v24[0] = a3;
  v24[1] = 2;
  v27[0] = (uint64_t *)&v26;
  v27[1] = v24;
  v28 = 0uLL;
  sub_20AB9C500((uint64_t)&v28, v27);
  *(_OWORD *)a3 = v28;
  if (&v5[-HIDWORD(v6)] == (double *)a3)
  {
    v15 = 0;
    *(double *)&v28 = -*v5;
    *((double *)&v28 + 1) = -v5[v6];
    v29 = -v5[1];
    v30 = -v5[(v6 + 1)];
    v16 = (uint64_t *)&v28;
    for (i = 2; i != 6; i = v21 + 1)
    {
      v18 = *v16++;
      *(_QWORD *)(a3 + 8 * i) = v18;
      v19 = HIDWORD(v15);
      v20 = (int)v15 < 1;
      if ((int)v15 < 1)
        v19 = 0;
      v21 = i + v19;
      v22 = (v15 + 1);
      v23 = v15 & 0xFFFFFFFF00000000;
      if (!v20)
        v22 = 0;
      v15 = v22 | v23;
    }
  }
  else
  {
    v7 = 0;
    v8 = 0;
    for (j = 2; j != 6; j = v12 + 1)
    {
      *(double *)(a3 + 8 * j) = -v5[(HIDWORD(v8) + v6 * v8)];
      if ((int)v8 >= 1)
        v8 = (v8 & 0xFFFFFFFF00000000) + 0x100000000;
      else
        v8 = (v8 + 1) | v8 & 0xFFFFFFFF00000000;
      v10 = HIDWORD(v7);
      v11 = (int)v7 < 1;
      if ((int)v7 < 1)
        v10 = 0;
      v12 = j + v10;
      v13 = (v7 + 1);
      v14 = v7 & 0xFFFFFFFF00000000;
      if (!v11)
        v13 = 0;
      v7 = v13 | v14;
    }
  }
}

double cva::SE2GroupStorage<double,cva::MatrixRef<double const,3u,3u,false>>::log@<D0>(long double **a1@<X0>, double *a2@<X8>)
{
  long double *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  __double2 v9;
  double v10;
  int v11;
  double v12;
  double v13;
  double result;

  v4 = *a1;
  v5 = atan2((*a1)[1], **a1);
  v6 = v5 * v5;
  if (v5 * v5 >= 0.0000002635)
  {
    v9 = __sincos_stret(v5);
    v7 = 1.0 / v5 * v9.__sinval;
    v8 = 1.0 / v5 * (1.0 - v9.__cosval);
  }
  else
  {
    v7 = 1.0 - v6 * (v6 / -120.0 + 0.166666667);
    v8 = v5 * (v6 / -24.0 + 0.5);
  }
  v10 = 1.0 / (v8 * v8 + v7 * v7);
  v11 = *((_DWORD *)a1 + 2);
  v12 = v4[2 * v11];
  v13 = v4[(2 * v11) | 1u];
  *a2 = v5;
  a2[1] = v10 * (v8 * v13 + v7 * v12);
  result = v10 * (v7 * v13 - v8 * v12);
  a2[2] = result;
  return result;
}

void cva::SE2GroupStorage<double,cva::MatrixRef<double const,3u,3u,false>>::logJacobian(long double **a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  long double *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  __double2 v13;
  double v14;
  double v15;
  int v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  BOOL v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD v38[2];
  _QWORD v39[2];
  _QWORD v40[4];
  double v41;
  double v42;

  *(_OWORD *)(a2 + 24) = 0u;
  v4 = (_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  v5 = *a1;
  v6 = atan2((*a1)[1], **a1);
  v7 = v6 * v6;
  if (v6 * v6 >= 0.0000002635)
  {
    v13 = __sincos_stret(v6);
    v10 = 1.0 / v6 * v13.__sinval;
    v12 = 1.0 / v6 * (1.0 - v13.__cosval);
    v8 = 1.0 / v6 * v12;
    v11 = 1.0 / v6 * (1.0 - v10);
  }
  else
  {
    v8 = 0.5 - v7 * (v7 / -720.0 + 0.0416666667);
    v9 = 0.166666667 - v7 * (v7 / -5040.0 + 0.00833333333);
    v10 = 1.0 - v7 * v9;
    v11 = v6 * v9;
    v12 = v6 * v8;
  }
  v14 = v12 * v12 + v10 * v10;
  v15 = 1.0 / v14;
  *(double *)a2 = v6;
  v16 = *((_DWORD *)a1 + 2);
  v17 = v5[2 * v16];
  v18 = v5[(2 * v16) | 1u];
  v19 = 1.0 / v14 * (v12 * v18 + v10 * v17);
  v20 = 1.0 / v14 * (v10 * v18 - v12 * v17);
  *(double *)(a2 + 8) = v19;
  *(double *)(a2 + 16) = v20;
  if (fabs(v14) >= 0.00001)
  {
    v21 = v10 * v15;
    v22 = v15 * -v12;
    v23 = v12 * v15;
    *(double *)v40 = v21;
    *(double *)&v40[1] = v22;
    *(double *)&v40[2] = v23;
    *(double *)&v40[3] = v21;
    v24 = v11 * v19 + v8 * v20;
    v25 = v11 * v20 - v8 * v19;
    *(double *)v39 = v24;
    *(double *)&v39[1] = v25;
    *(_QWORD *)(a2 + 24) = 0x3FF0000000000000;
    v37 = v40;
    v38[0] = &v37;
    v38[1] = v39;
    if (v39 == v4)
    {
      v41 = 0.0;
      v42 = 0.0;
      sub_20AB9C9F8(&v41, (uint64_t)v38);
      v26 = v41;
      v27 = v42;
    }
    else
    {
      v26 = 0.0 - v21 * v24 - v23 * v25;
      v27 = 0.0 - v22 * v24 - v21 * v25;
    }
    *(double *)(a2 + 32) = v26;
    *(double *)(a2 + 40) = v27;
    *(_QWORD *)(a2 + 48) = 0;
    v28 = 0x100000000;
    v29 = v40;
    v30 = 4;
    *(_QWORD *)(a2 + 72) = 0;
    do
    {
      v31 = *v29++;
      v4[v30] = v31;
      v32 = HIDWORD(v28);
      v33 = (int)v28 < 1;
      if ((int)v28 < 1)
        v32 = 0;
      v34 = v30 + v32;
      v35 = (v28 + 1);
      v36 = v28 & 0xFFFFFFFF00000000;
      if (!v33)
        v35 = 0;
      v28 = v35 | v36;
      v30 = v34 + 1;
    }
    while (v30 != 10);
  }
}

double cva::SE2GroupStorage<double,cva::MatrixRef<double const,3u,3u,false>>::inverse@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double *v2;
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double result;

  *(_OWORD *)a2 = xmmword_20AC06268;
  *(_OWORD *)(a2 + 16) = unk_20AC06278;
  *(_QWORD *)(a2 + 64) = 0x3FF0000000000000;
  *(_OWORD *)(a2 + 32) = xmmword_20AC06288;
  *(_OWORD *)(a2 + 48) = unk_20AC06298;
  v2 = *(double **)a1;
  v3 = *(unsigned int *)(a1 + 8);
  v4 = *(double *)(*(_QWORD *)a1 + 8 * v3);
  v5 = **(double **)a1;
  v6 = *(double *)(*(_QWORD *)a1 + 8);
  *(double *)a2 = v5;
  *(double *)(a2 + 8) = v4;
  v7 = v2[(v3 + 1)];
  *(double *)(a2 + 24) = v6;
  *(double *)(a2 + 32) = v7;
  v8 = v2[(2 * v3)];
  v9 = v2[(2 * (_DWORD)v3) | 1u];
  result = -(v7 * v9) - v4 * v8;
  *(double *)(a2 + 48) = -(v6 * v9) - v5 * v8;
  *(double *)(a2 + 56) = result;
  return result;
}

double cva::SE2GroupStorage<double,cva::MatrixRef<double const,3u,3u,false>>::adjoint@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _OWORD *v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  BOOL v9;
  BOOL v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  __int128 v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t i;
  uint64_t v24;
  unint64_t v25;
  BOOL v26;
  BOOL v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  double result;
  _OWORD v32[2];

  *(_QWORD *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  v2 = *(_OWORD **)a1;
  v3 = *(_DWORD *)(a1 + 8);
  if (*(_QWORD *)a1 - 8 * *(unsigned int *)(a1 + 12) == a2)
  {
    v20 = *(_OWORD *)((char *)v2 + 8 * (v3 - 2) + 16);
    v32[0] = *v2;
    v32[1] = v20;
    v21 = 0x100000000;
    v22 = (uint64_t *)v32;
    for (i = 4; i != 10; i = v28 + 1)
    {
      v24 = *v22++;
      *(_QWORD *)(a2 + 8 * i) = v24;
      v25 = HIDWORD(v21);
      v27 = __OFSUB__((_DWORD)v21, 1);
      v26 = (int)v21 - 1 < 0;
      if ((int)v21 < 1)
        v25 = 0;
      v28 = i + v25;
      v29 = (v21 + 1);
      v30 = v21 & 0xFFFFFFFF00000000;
      if (v26 == v27)
        v29 = 0;
      v21 = v29 | v30;
    }
  }
  else
  {
    v4 = (unint64_t)(v3 - 2) << 32;
    v5 = 0x100000000;
    v6 = 4;
    v7 = *(_QWORD **)a1;
    do
    {
      *(_QWORD *)(a2 + 8 * v6) = *v7;
      v8 = HIDWORD(v4);
      v10 = __OFSUB__((_DWORD)v4, 1);
      v9 = (int)v4 - 1 < 0;
      if ((int)v4 < 1)
        v8 = 0;
      v11 = &v7[v8];
      v12 = (v4 + 1);
      v13 = v4 & 0xFFFFFFFF00000000;
      if (v9 == v10)
        v12 = 0;
      v4 = v12 | v13;
      v7 = v11 + 1;
      v14 = HIDWORD(v5);
      v16 = __OFSUB__((_DWORD)v5, 1);
      v15 = (int)v5 - 1 < 0;
      if ((int)v5 < 1)
        v14 = 0;
      v17 = v6 + v14;
      v18 = (v5 + 1);
      v19 = v5 & 0xFFFFFFFF00000000;
      if (v15 == v16)
        v18 = 0;
      v5 = v18 | v19;
      v6 = v17 + 1;
    }
    while (v6 != 10);
  }
  *(_QWORD *)(a2 + 8) = *((_QWORD *)v2 + ((2 * v3) | 1u));
  result = -*((double *)v2 + (2 * v3));
  *(double *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)a2 = 0x3FF0000000000000;
  return result;
}

uint64_t cva::SE2GroupStorage<double,cva::MatrixRef<double const,3u,3u,false>>::serialize(uint64_t result)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_DWORD *)(result + 8);
  if (v1)
  {
    v2 = *(_QWORD *)result;
    v3 = *(_QWORD *)result + 8 * (3 * v1);
    v4 = (unint64_t)(v1 - 3) << 32;
    do
    {
      result = std::ostream::write();
      v5 = HIDWORD(v4);
      if ((int)v4 < 2)
        v5 = 0;
      v6 = v2 + 8 * v5;
      v7 = (v4 + 1);
      if ((int)v4 >= 2)
        v7 = 0;
      v4 = v7 | v4 & 0xFFFFFFFF00000000;
      v2 = v6 + 8;
    }
    while (v6 + 8 != v3);
  }
  return result;
}

float cva::SE2AlgebraStorage<float,cva::Matrix<float,3u,1u,false>>::SE2AlgebraStorage(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  float result;

  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)a3;
  result = *(float *)(a3 + 4);
  *(float *)(a1 + 8) = result;
  return result;
}

{
  float result;

  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)a3;
  result = *(float *)(a3 + 4);
  *(float *)(a1 + 8) = result;
  return result;
}

uint64_t cva::SE2AlgebraStorage<float,cva::Matrix<float,3u,1u,false>>::T(uint64_t a1)
{
  return a1 + 4;
}

{
  return a1 + 4;
}

double cva::SE2AlgebraStorage<float,cva::Matrix<float,3u,1u,false>>::adjoint@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  float v2;
  float v3;
  double result;

  v2 = *(float *)a1;
  v3 = -*(float *)(a1 + 4);
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 8);
  *(float *)(a2 + 4) = v3;
  *(float *)(a2 + 16) = v2;
  *(float *)(a2 + 24) = -v2;
  result = 0.0;
  *(_QWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a2 + 20) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  return result;
}

double cva::SE2AlgebraStorage<float,cva::Matrix<float,3u,1u,false>>::hat@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  float v2;
  double result;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 0;
  v2 = *(float *)a1;
  *(_DWORD *)(a2 + 4) = *(_DWORD *)a1;
  *(float *)(a2 + 12) = -v2;
  result = *(double *)(a1 + 4);
  *(double *)(a2 + 24) = result;
  return result;
}

float cva::SE2AlgebraStorage<float,cva::Matrix<float,3u,1u,false>>::exp@<S0>(float *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  float v5;
  float v6;
  float v7;
  __float2 v8;
  float v9;
  float v10;
  float v11;
  float result;

  *(_DWORD *)(a2 + 32) = 1065353216;
  *(_OWORD *)a2 = xmmword_20AC06220;
  *(_OWORD *)(a2 + 16) = unk_20AC06230;
  v5 = a1[1];
  v6 = *a1 * a3;
  v7 = a1[2];
  v8 = __sincosf_stret(v6);
  v9 = v6 * v6;
  if ((float)(v6 * v6) >= 0.0061)
  {
    v10 = (float)(1.0 / v6) * v8.__sinval;
    v11 = (float)(1.0 / v6) * (float)(1.0 - v8.__cosval);
  }
  else
  {
    v10 = 1.0 - (float)(v9 * (float)((float)(v9 / -120.0) + 0.16667));
    v11 = v6 * (float)((float)(v9 / -24.0) + 0.5);
  }
  *(float *)a2 = v8.__cosval;
  *(float *)(a2 + 4) = v8.__sinval;
  *(float *)(a2 + 12) = -v8.__sinval;
  *(float *)(a2 + 16) = v8.__cosval;
  result = (float)(v10 * (float)(v5 * a3)) - (float)(v11 * (float)(v7 * a3));
  *(float *)(a2 + 24) = result;
  *(float *)(a2 + 28) = (float)((float)(v7 * a3) * v10) + (float)(v11 * (float)(v5 * a3));
  return result;
}

float cva::SE2AlgebraStorage<float,cva::Matrix<float,3u,1u,false>>::expJacobian@<S0>(float *a1@<X0>, uint64_t a2@<X8>)
{
  float v4;
  __float2 v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float result;

  *(_DWORD *)(a2 + 32) = 1065353216;
  *(_OWORD *)a2 = xmmword_20AC06220;
  *(_OWORD *)(a2 + 16) = unk_20AC06230;
  v4 = *a1;
  v5 = __sincosf_stret(*a1);
  v6 = v4 * v4;
  if ((float)(v4 * v4) >= 0.0061)
  {
    v9 = (float)(1.0 / v4) * v5.__sinval;
    v11 = (float)(1.0 / v4) * (float)(1.0 - v5.__cosval);
    v7 = (float)(1.0 / v4) * v11;
    v10 = (float)(1.0 / v4) * (float)(1.0 - v9);
  }
  else
  {
    v7 = 0.5 - (float)(v6 * (float)((float)(v6 / -720.0) + 0.041667));
    v8 = 0.16667 - (float)(v6 * (float)((float)(v6 / -5040.0) + 0.0083333));
    v9 = 1.0 - (float)(v6 * v8);
    v10 = v4 * v8;
    v11 = v4 * v7;
  }
  *(float *)a2 = v5.__cosval;
  *(float *)(a2 + 4) = v5.__sinval;
  *(float *)(a2 + 12) = -v5.__sinval;
  *(float *)(a2 + 16) = v5.__cosval;
  v12 = a1[1];
  v13 = a1[2];
  *(float *)(a2 + 24) = (float)(v9 * v12) - (float)(v11 * v13);
  *(float *)(a2 + 28) = (float)(v9 * v13) + (float)(v11 * v12);
  *(_DWORD *)(a2 + 36) = 1065353216;
  v14 = (float)(v10 * v12) + (float)(v7 * v13);
  result = (float)(v10 * v13) - (float)(v7 * v12);
  *(float *)(a2 + 40) = v14;
  *(float *)(a2 + 44) = result;
  *(_DWORD *)(a2 + 48) = 0;
  *(float *)(a2 + 52) = v9;
  *(float *)(a2 + 56) = v11;
  *(_DWORD *)(a2 + 60) = 0;
  *(float *)(a2 + 64) = -v11;
  *(float *)(a2 + 68) = v9;
  return result;
}

float *cva::SE2AlgebraStorage<float,cva::Matrix<float,3u,1u,false>>::enforce(float *result)
{
  float v1;

  v1 = *result;
  if (*result <= 0.0)
  {
    if (v1 > -3.1416)
      return result;
    do
      v1 = v1 + 3.1416;
    while (v1 <= -3.1416);
  }
  else
  {
    if (v1 < 3.1416)
      return result;
    do
      v1 = v1 + -3.1416;
    while (v1 >= 3.1416);
  }
  *result = v1;
  return result;
}

uint64_t cva::SE2AlgebraStorage<float,cva::Matrix<float,3u,1u,false>>::serialize()
{
  return std::ostream::write();
}

uint64_t cva::SE2AlgebraStorage<float,cva::Matrix<float,3u,1u,false>>::deserialize()
{
  return std::istream::read();
}

double cva::SE2AlgebraStorage<double,cva::Matrix<double,3u,1u,false>>::SE2AlgebraStorage(double *a1, double *a2, double *a3)
{
  double result;

  *a1 = 0.0;
  a1[1] = 0.0;
  a1[2] = 0.0;
  *a1 = *a2;
  a1[1] = *a3;
  result = a3[1];
  a1[2] = result;
  return result;
}

{
  double result;

  *a1 = 0.0;
  a1[1] = 0.0;
  a1[2] = 0.0;
  *a1 = *a2;
  a1[1] = *a3;
  result = a3[1];
  a1[2] = result;
  return result;
}

uint64_t cva::SE2AlgebraStorage<double,cva::Matrix<double,3u,1u,false>>::T(uint64_t a1)
{
  return a1 + 8;
}

{
  return a1 + 8;
}

double cva::SE2AlgebraStorage<double,cva::Matrix<double,3u,1u,false>>::adjoint@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v2;
  double v3;
  double result;

  v2 = *(double *)a1;
  v3 = -*(double *)(a1 + 8);
  *(_QWORD *)a2 = *(_QWORD *)(a1 + 16);
  *(double *)(a2 + 8) = v3;
  *(double *)(a2 + 32) = v2;
  result = -v2;
  *(double *)(a2 + 48) = -v2;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  return result;
}

double cva::SE2AlgebraStorage<double,cva::Matrix<double,3u,1u,false>>::hat@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  double v3;
  __int128 v4;

  result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_QWORD *)(a2 + 64) = 0;
  v3 = *(double *)a1;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)a1;
  *(double *)(a2 + 24) = -v3;
  v4 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = v4;
  return result;
}

double cva::SE2AlgebraStorage<double,cva::Matrix<double,3u,1u,false>>::exp@<D0>(double *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  double v5;
  double v6;
  double v7;
  __double2 v8;
  double v9;
  double v10;
  double v11;
  double result;

  *(_QWORD *)(a2 + 64) = 0x3FF0000000000000;
  *(_OWORD *)a2 = xmmword_20AC06268;
  *(_OWORD *)(a2 + 16) = unk_20AC06278;
  *(_OWORD *)(a2 + 32) = xmmword_20AC06288;
  *(_OWORD *)(a2 + 48) = unk_20AC06298;
  v5 = a1[1];
  v6 = *a1 * a3;
  v7 = a1[2];
  v8 = __sincos_stret(v6);
  v9 = v6 * v6;
  if (v6 * v6 >= 0.0000002635)
  {
    v10 = 1.0 / v6 * v8.__sinval;
    v11 = 1.0 / v6 * (1.0 - v8.__cosval);
  }
  else
  {
    v10 = 1.0 - v9 * (v9 / -120.0 + 0.166666667);
    v11 = v6 * (v9 / -24.0 + 0.5);
  }
  *(double *)a2 = v8.__cosval;
  *(double *)(a2 + 8) = v8.__sinval;
  *(double *)(a2 + 24) = -v8.__sinval;
  *(double *)(a2 + 32) = v8.__cosval;
  result = v10 * (v5 * a3) - v11 * (v7 * a3);
  *(double *)(a2 + 48) = result;
  *(double *)(a2 + 56) = v7 * a3 * v10 + v11 * (v5 * a3);
  return result;
}

double cva::SE2AlgebraStorage<double,cva::Matrix<double,3u,1u,false>>::expJacobian@<D0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  double v4;
  __double2 v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double result;

  *(_QWORD *)(a2 + 64) = 0x3FF0000000000000;
  *(_OWORD *)a2 = xmmword_20AC06268;
  *(_OWORD *)(a2 + 16) = unk_20AC06278;
  *(_OWORD *)(a2 + 32) = xmmword_20AC06288;
  *(_OWORD *)(a2 + 48) = unk_20AC06298;
  v4 = *a1;
  v5 = __sincos_stret(*a1);
  v6 = v4 * v4;
  if (v4 * v4 >= 0.0000002635)
  {
    v9 = 1.0 / v4 * v5.__sinval;
    v11 = 1.0 / v4 * (1.0 - v5.__cosval);
    v7 = 1.0 / v4 * v11;
    v10 = 1.0 / v4 * (1.0 - v9);
  }
  else
  {
    v7 = 0.5 - v6 * (v6 / -720.0 + 0.0416666667);
    v8 = 0.166666667 - v6 * (v6 / -5040.0 + 0.00833333333);
    v9 = 1.0 - v6 * v8;
    v10 = v4 * v8;
    v11 = v4 * v7;
  }
  *(double *)a2 = v5.__cosval;
  *(double *)(a2 + 8) = v5.__sinval;
  *(double *)(a2 + 24) = -v5.__sinval;
  *(double *)(a2 + 32) = v5.__cosval;
  v12 = a1[1];
  v13 = a1[2];
  *(double *)(a2 + 48) = v9 * v12 - v11 * v13;
  *(double *)(a2 + 56) = v9 * v13 + v11 * v12;
  *(_QWORD *)(a2 + 72) = 0x3FF0000000000000;
  v14 = v10 * v12 + v7 * v13;
  result = v10 * v13 - v7 * v12;
  *(double *)(a2 + 80) = v14;
  *(double *)(a2 + 88) = result;
  *(_QWORD *)(a2 + 96) = 0;
  *(double *)(a2 + 104) = v9;
  *(double *)(a2 + 112) = v11;
  *(_QWORD *)(a2 + 120) = 0;
  *(double *)(a2 + 128) = -v11;
  *(double *)(a2 + 136) = v9;
  return result;
}

double *cva::SE2AlgebraStorage<double,cva::Matrix<double,3u,1u,false>>::enforce(double *result)
{
  double v1;

  v1 = *result;
  if (*result <= 0.0)
  {
    if (v1 > -3.14159265)
      return result;
    do
      v1 = v1 + 3.14159265;
    while (v1 <= -3.14159265);
  }
  else
  {
    if (v1 < 3.14159265)
      return result;
    do
      v1 = v1 + -3.14159265;
    while (v1 >= 3.14159265);
  }
  *result = v1;
  return result;
}

uint64_t cva::SE2AlgebraStorage<double,cva::Matrix<double,3u,1u,false>>::serialize()
{
  return std::ostream::write();
}

uint64_t cva::SE2AlgebraStorage<double,cva::Matrix<double,3u,1u,false>>::deserialize()
{
  return std::istream::read();
}

uint64_t cva::SE2AlgebraStorage<float,cva::MatrixRef<float const,3u,1u,false>>::R(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t cva::SE2AlgebraStorage<float,cva::MatrixRef<float const,3u,1u,false>>::T(uint64_t a1)
{
  return *(_QWORD *)a1 - 4 * *(unsigned int *)(a1 + 12) + 4 * (*(_DWORD *)(a1 + 12) + 1);
}

double cva::SE2AlgebraStorage<float,cva::MatrixRef<float const,3u,1u,false>>::adjoint@<D0>(float **a1@<X0>, uint64_t a2@<X8>)
{
  float v2;
  float v3;
  double result;

  v2 = **a1;
  v3 = -(*a1)[1];
  *(float *)a2 = (*a1)[2];
  *(float *)(a2 + 4) = v3;
  *(float *)(a2 + 16) = v2;
  *(float *)(a2 + 24) = -v2;
  result = 0.0;
  *(_QWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a2 + 20) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  return result;
}

double cva::SE2AlgebraStorage<float,cva::MatrixRef<float const,3u,1u,false>>::hat@<D0>(float **a1@<X0>, uint64_t a2@<X8>)
{
  float *v2;
  float v3;
  double result;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 0;
  v2 = *a1;
  v3 = **a1;
  *(float *)(a2 + 4) = v3;
  *(float *)(a2 + 12) = -v3;
  result = *(double *)(v2 + 1);
  *(double *)(a2 + 24) = result;
  return result;
}

float cva::SE2AlgebraStorage<float,cva::MatrixRef<float const,3u,1u,false>>::exp@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  float v5;
  float v6;
  float v7;
  __float2 v8;
  float v9;
  float v10;
  float v11;
  float result;

  *(_DWORD *)(a2 + 32) = 1065353216;
  *(_OWORD *)a2 = xmmword_20AC06220;
  *(_OWORD *)(a2 + 16) = unk_20AC06230;
  v5 = *(float *)(*(_QWORD *)a1 + 4);
  v6 = **(float **)a1 * a3;
  v7 = *(float *)(*(_QWORD *)a1 + 8);
  v8 = __sincosf_stret(v6);
  v9 = v6 * v6;
  if ((float)(v6 * v6) >= 0.0061)
  {
    v10 = (float)(1.0 / v6) * v8.__sinval;
    v11 = (float)(1.0 / v6) * (float)(1.0 - v8.__cosval);
  }
  else
  {
    v10 = 1.0 - (float)(v9 * (float)((float)(v9 / -120.0) + 0.16667));
    v11 = v6 * (float)((float)(v9 / -24.0) + 0.5);
  }
  *(float *)a2 = v8.__cosval;
  *(float *)(a2 + 4) = v8.__sinval;
  *(float *)(a2 + 12) = -v8.__sinval;
  *(float *)(a2 + 16) = v8.__cosval;
  result = (float)(v10 * (float)(v5 * a3)) - (float)(v11 * (float)(v7 * a3));
  *(float *)(a2 + 24) = result;
  *(float *)(a2 + 28) = (float)(v10 * (float)(v7 * a3)) + (float)(v11 * (float)(v5 * a3));
  return result;
}

float cva::SE2AlgebraStorage<float,cva::MatrixRef<float const,3u,1u,false>>::expJacobian@<S0>(float **a1@<X0>, uint64_t a2@<X8>)
{
  float *v3;
  float v4;
  __float2 v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float result;

  *(_DWORD *)(a2 + 32) = 1065353216;
  *(_OWORD *)a2 = xmmword_20AC06220;
  *(_OWORD *)(a2 + 16) = unk_20AC06230;
  v3 = *a1;
  v4 = **a1;
  v5 = __sincosf_stret(v4);
  v6 = v4 * v4;
  if ((float)(v4 * v4) >= 0.0061)
  {
    v9 = (float)(1.0 / v4) * v5.__sinval;
    v11 = (float)(1.0 / v4) * (float)(1.0 - v5.__cosval);
    v7 = (float)(1.0 / v4) * v11;
    v10 = (float)(1.0 / v4) * (float)(1.0 - v9);
  }
  else
  {
    v7 = 0.5 - (float)(v6 * (float)((float)(v6 / -720.0) + 0.041667));
    v8 = 0.16667 - (float)(v6 * (float)((float)(v6 / -5040.0) + 0.0083333));
    v9 = 1.0 - (float)(v6 * v8);
    v10 = v4 * v8;
    v11 = v4 * v7;
  }
  *(float *)a2 = v5.__cosval;
  *(float *)(a2 + 4) = v5.__sinval;
  *(float *)(a2 + 12) = -v5.__sinval;
  *(float *)(a2 + 16) = v5.__cosval;
  v12 = v3[1];
  v13 = v3[2];
  *(float *)(a2 + 24) = (float)(v9 * v12) - (float)(v11 * v13);
  *(float *)(a2 + 28) = (float)(v9 * v13) + (float)(v11 * v12);
  *(_DWORD *)(a2 + 36) = 1065353216;
  v14 = (float)(v10 * v12) + (float)(v7 * v13);
  result = (float)(v10 * v13) - (float)(v7 * v12);
  *(float *)(a2 + 40) = v14;
  *(float *)(a2 + 44) = result;
  *(_DWORD *)(a2 + 48) = 0;
  *(float *)(a2 + 52) = v9;
  *(float *)(a2 + 56) = v11;
  *(_DWORD *)(a2 + 60) = 0;
  *(float *)(a2 + 64) = -v11;
  *(float *)(a2 + 68) = v9;
  return result;
}

uint64_t cva::SE2AlgebraStorage<float,cva::MatrixRef<float const,3u,1u,false>>::serialize()
{
  return std::ostream::write();
}

uint64_t cva::SE2AlgebraStorage<double,cva::MatrixRef<double const,3u,1u,false>>::R(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t cva::SE2AlgebraStorage<double,cva::MatrixRef<double const,3u,1u,false>>::T(uint64_t a1)
{
  return *(_QWORD *)a1 - 8 * *(unsigned int *)(a1 + 12) + 8 * (*(_DWORD *)(a1 + 12) + 1);
}

double cva::SE2AlgebraStorage<double,cva::MatrixRef<double const,3u,1u,false>>::adjoint@<D0>(double **a1@<X0>, uint64_t a2@<X8>)
{
  double v2;
  double v3;
  double result;

  v2 = **a1;
  v3 = -(*a1)[1];
  *(double *)a2 = (*a1)[2];
  *(double *)(a2 + 8) = v3;
  *(double *)(a2 + 32) = v2;
  result = -v2;
  *(double *)(a2 + 48) = -v2;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  return result;
}

double cva::SE2AlgebraStorage<double,cva::MatrixRef<double const,3u,1u,false>>::hat@<D0>(double **a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  double *v3;
  double v4;
  __int128 v5;

  result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_QWORD *)(a2 + 64) = 0;
  v3 = *a1;
  v4 = **a1;
  *(double *)(a2 + 8) = v4;
  *(double *)(a2 + 24) = -v4;
  v5 = *(_OWORD *)(v3 + 1);
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = v5;
  return result;
}

double cva::SE2AlgebraStorage<double,cva::MatrixRef<double const,3u,1u,false>>::exp@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  double v5;
  double v6;
  double v7;
  __double2 v8;
  double v9;
  double v10;
  double v11;
  double result;

  *(_QWORD *)(a2 + 64) = 0x3FF0000000000000;
  *(_OWORD *)a2 = xmmword_20AC06268;
  *(_OWORD *)(a2 + 16) = unk_20AC06278;
  *(_OWORD *)(a2 + 32) = xmmword_20AC06288;
  *(_OWORD *)(a2 + 48) = unk_20AC06298;
  v5 = *(double *)(*(_QWORD *)a1 + 8);
  v6 = **(double **)a1 * a3;
  v7 = *(double *)(*(_QWORD *)a1 + 16);
  v8 = __sincos_stret(v6);
  v9 = v6 * v6;
  if (v6 * v6 >= 0.0000002635)
  {
    v10 = 1.0 / v6 * v8.__sinval;
    v11 = 1.0 / v6 * (1.0 - v8.__cosval);
  }
  else
  {
    v10 = 1.0 - v9 * (v9 / -120.0 + 0.166666667);
    v11 = v6 * (v9 / -24.0 + 0.5);
  }
  *(double *)a2 = v8.__cosval;
  *(double *)(a2 + 8) = v8.__sinval;
  *(double *)(a2 + 24) = -v8.__sinval;
  *(double *)(a2 + 32) = v8.__cosval;
  result = v10 * (v5 * a3) - v11 * (v7 * a3);
  *(double *)(a2 + 48) = result;
  *(double *)(a2 + 56) = v10 * (v7 * a3) + v11 * (v5 * a3);
  return result;
}

double cva::SE2AlgebraStorage<double,cva::MatrixRef<double const,3u,1u,false>>::expJacobian@<D0>(double **a1@<X0>, uint64_t a2@<X8>)
{
  double *v3;
  double v4;
  __double2 v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double result;

  *(_QWORD *)(a2 + 64) = 0x3FF0000000000000;
  *(_OWORD *)a2 = xmmword_20AC06268;
  *(_OWORD *)(a2 + 16) = unk_20AC06278;
  *(_OWORD *)(a2 + 32) = xmmword_20AC06288;
  *(_OWORD *)(a2 + 48) = unk_20AC06298;
  v3 = *a1;
  v4 = **a1;
  v5 = __sincos_stret(v4);
  v6 = v4 * v4;
  if (v4 * v4 >= 0.0000002635)
  {
    v9 = 1.0 / v4 * v5.__sinval;
    v11 = 1.0 / v4 * (1.0 - v5.__cosval);
    v7 = 1.0 / v4 * v11;
    v10 = 1.0 / v4 * (1.0 - v9);
  }
  else
  {
    v7 = 0.5 - v6 * (v6 / -720.0 + 0.0416666667);
    v8 = 0.166666667 - v6 * (v6 / -5040.0 + 0.00833333333);
    v9 = 1.0 - v6 * v8;
    v10 = v4 * v8;
    v11 = v4 * v7;
  }
  *(double *)a2 = v5.__cosval;
  *(double *)(a2 + 8) = v5.__sinval;
  *(double *)(a2 + 24) = -v5.__sinval;
  *(double *)(a2 + 32) = v5.__cosval;
  v12 = v3[1];
  v13 = v3[2];
  *(double *)(a2 + 48) = v9 * v12 - v11 * v13;
  *(double *)(a2 + 56) = v9 * v13 + v11 * v12;
  *(_QWORD *)(a2 + 72) = 0x3FF0000000000000;
  v14 = v10 * v12 + v7 * v13;
  result = v10 * v13 - v7 * v12;
  *(double *)(a2 + 80) = v14;
  *(double *)(a2 + 88) = result;
  *(_QWORD *)(a2 + 96) = 0;
  *(double *)(a2 + 104) = v9;
  *(double *)(a2 + 112) = v11;
  *(_QWORD *)(a2 + 120) = 0;
  *(double *)(a2 + 128) = -v11;
  *(double *)(a2 + 136) = v9;
  return result;
}

uint64_t cva::SE2AlgebraStorage<double,cva::MatrixRef<double const,3u,1u,false>>::serialize()
{
  return std::ostream::write();
}

double cva::SE3GroupStorage<float,cva::Matrix<float,4u,4u,false>>::SE3GroupStorage(_OWORD *a1)
{
  double result;

  *a1 = xmmword_20AC0609C;
  a1[1] = *(_OWORD *)algn_20AC060AC;
  result = 0.0;
  a1[2] = xmmword_20AC060BC;
  a1[3] = unk_20AC060CC;
  return result;
}

{
  double result;

  *a1 = xmmword_20AC0609C;
  a1[1] = *(_OWORD *)algn_20AC060AC;
  result = 0.0;
  a1[2] = xmmword_20AC060BC;
  a1[3] = unk_20AC060CC;
  return result;
}

float cva::SE3GroupStorage<float,cva::Matrix<float,4u,4u,false>>::SE3GroupStorage(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  float result;

  v3 = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v4 = 0x100000000;
  do
  {
    v5 = *a2++;
    *(_DWORD *)(a1 + 4 * v3) = v5;
    v6 = HIDWORD(v4);
    v7 = (int)v4 < 2;
    if ((int)v4 < 2)
      v6 = 0;
    v8 = v3 + v6;
    v9 = (v4 + 1);
    v10 = v4 & 0xFFFFFFFF00000000;
    if (!v7)
      v9 = 0;
    v4 = v9 | v10;
    v3 = v8 + 1;
  }
  while (v3 != 12);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)a3;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a3 + 4);
  result = *(float *)(a3 + 8);
  *(float *)(a1 + 56) = result;
  *(_DWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 44) = 0;
  *(_DWORD *)(a1 + 60) = 1065353216;
  return result;
}

{
  uint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  float result;

  v3 = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v4 = 0x100000000;
  do
  {
    v5 = *a2++;
    *(_DWORD *)(a1 + 4 * v3) = v5;
    v6 = HIDWORD(v4);
    v7 = (int)v4 < 2;
    if ((int)v4 < 2)
      v6 = 0;
    v8 = v3 + v6;
    v9 = (v4 + 1);
    v10 = v4 & 0xFFFFFFFF00000000;
    if (!v7)
      v9 = 0;
    v4 = v9 | v10;
    v3 = v8 + 1;
  }
  while (v3 != 12);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)a3;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a3 + 4);
  result = *(float *)(a3 + 8);
  *(float *)(a1 + 56) = result;
  *(_DWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 44) = 0;
  *(_DWORD *)(a1 + 60) = 1065353216;
  return result;
}

uint64_t cva::SE3GroupStorage<float,cva::Matrix<float,4u,4u,false>>::T(uint64_t a1)
{
  return a1 + 48;
}

{
  return a1 + 48;
}

float32x4_t *cva::SE3GroupStorage<float,cva::Matrix<float,4u,4u,false>>::lplus(uint64_t a1, __int128 *a2)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float cosval;
  float v8;
  __float2 v9;
  float32x4_t *result;
  __int128 v11;
  __int128 v12;
  _QWORD v13[2];
  _OWORD v14[4];
  _QWORD v15[2];
  float32x4_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v20 = *a2;
  v21 = *((_QWORD *)a2 + 2);
  v13[0] = &v20;
  v13[1] = 6;
  v14[0] = xmmword_20AC0609C;
  v14[1] = *(_OWORD *)algn_20AC060AC;
  v14[2] = xmmword_20AC060BC;
  v14[3] = unk_20AC060CC;
  v3 = (float)((float)(*(float *)&v20 * *(float *)&v20) + (float)(*((float *)&v20 + 1) * *((float *)&v20 + 1)))
     + (float)(*((float *)&v20 + 2) * *((float *)&v20 + 2));
  if (v3 >= 0.0061)
  {
    v8 = sqrtf(v3);
    v9 = __sincosf_stret(v8);
    cosval = v9.__cosval;
    v6 = v9.__sinval / v8;
    v4 = (float)(1.0 / v3) * (float)(1.0 - v9.__cosval);
    v5 = (float)(1.0 / v3) * (float)(1.0 - (float)(v9.__sinval / v8));
  }
  else
  {
    v4 = 0.5 - (float)(v3 * (float)((float)(v3 / -720.0) + 0.041667));
    v5 = 0.16667 - (float)(v3 * (float)((float)(v3 / -5040.0) + 0.0083333));
    v6 = 1.0 - (float)(v3 * v5);
    cosval = 1.0 - (float)(v3 * v4);
  }
  v16.f32[3] = v5;
  v16.f32[0] = cosval;
  *(uint64_t *)((char *)v16.i64 + 4) = __PAIR64__(LODWORD(v4), LODWORD(v6));
  sub_20AB9F064((uint64_t)v13, v16.f32, (float32x2_t *)v14);
  v15[0] = v14;
  v15[1] = a1;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  result = sub_20AB9F244(&v16, (uint64_t)v15);
  v11 = v17;
  *(float32x4_t *)a1 = v16;
  *(_OWORD *)(a1 + 16) = v11;
  v12 = v19;
  *(_OWORD *)(a1 + 32) = v18;
  *(_OWORD *)(a1 + 48) = v12;
  return result;
}

uint64_t sub_20AB9F064(uint64_t result, float *a2, float32x2_t *a3)
{
  float v3;
  float v4;
  float v5;
  float *v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float *v19;
  float32x2_t *v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float32x2_t v32;
  int32x2_t v33;
  float32x2_t v34;
  float32x2_t v35;
  _BYTE v36[12];
  unint64_t v37;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = *(float **)result;
  v7 = **(float **)result;
  v8 = v5 * v7;
  v9 = v5 * *(float *)(*(_QWORD *)result + 4);
  v10 = v5 * *(float *)(*(_QWORD *)result + 8);
  a3->f32[0] = *a2 + (float)(v8 * v7);
  a3[2].f32[1] = v3 + (float)(v9 * v6[1]);
  a3[5].f32[0] = v3 + (float)(v10 * v6[2]);
  v11 = v6[1];
  v12 = v8 * v11;
  v13 = v6[2];
  v14 = v8 * v13;
  v15 = v9 * v13;
  v16 = v4 * *v6;
  v17 = v4 * v11;
  v18 = v4 * v13;
  a3[2].f32[0] = v12 - v18;
  a3[4].f32[0] = v17 + v14;
  a3[4].f32[1] = v15 - v16;
  a3->f32[1] = v12 + v18;
  a3[1].f32[0] = v14 - v17;
  a3[3].f32[0] = v15 + v16;
  v37 = *(_QWORD *)(result + 8);
  v19 = &v6[-HIDWORD(v37)];
  v20 = (float32x2_t *)&v19[HIDWORD(v37) + 3];
  v22 = v6[1];
  v21 = v6[2];
  v23 = v20->f32[1];
  v24 = v20[1].f32[0];
  v25 = (float)(v22 * v24) - (float)(v21 * v23);
  v26 = (float)(v21 * v20->f32[0]) - (float)(*v6 * v24);
  *(float *)v36 = v25;
  *(float *)&v36[4] = v26;
  v27 = (float)(*v6 * v23) - (float)(v22 * v20->f32[0]);
  *(float *)&v36[8] = v27;
  v29 = a2[2];
  v28 = a2[3];
  if (v19 == (float *)a3 || &v6[-HIDWORD(v37)] == (float *)a3)
  {
    v31 = v24 + (float)(v29 * v27);
    v32 = *(float32x2_t *)(v6 + 1);
    v33.i32[1] = v32.i32[1];
    v33.i32[0] = *(__int32 *)v6;
    v34.i32[0] = vdup_lane_s32(*(int32x2_t *)&v36[4], 1).u32[0];
    v34.f32[1] = v25;
    v35 = vadd_f32(vadd_f32(*v20, vmul_n_f32(*(float32x2_t *)v36, v29)), vmul_n_f32(vmla_f32(vmul_f32(*(float32x2_t *)&v36[4], vneg_f32((float32x2_t)vrev64_s32(v33))), v34, v32), v28));
    v30 = (float)(v28 * vmlas_n_f32(-(float)(v32.f32[0] * v25), *v6, *(float *)&v36[4])) + v31;
    a3[6] = v35;
  }
  else
  {
    a3[6].f32[0] = (float)(v20->f32[0] + (float)(v25 * v29))
                 + (float)(v28 * (float)((float)(v6[1] * v27) - (float)(v6[2] * v26)));
    a3[6].f32[1] = (float)(v20->f32[1] + (float)(v26 * v29))
                 + (float)(v28 * (float)((float)(v6[2] * v25) - (float)(*v6 * v27)));
    v30 = (float)(v20[1].f32[0] + (float)(v27 * v29))
        + (float)(v28 * (float)((float)(*v6 * v26) - (float)(v6[1] * v25)));
  }
  a3[7].f32[0] = v30;
  return result;
}

float32x4_t *sub_20AB9F244(float32x4_t *result, uint64_t a2)
{
  float32x4_t *v2;
  float32x4_t *v3;
  float *v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;

  v2 = result;
  v3 = *(float32x4_t **)a2;
  if (*(float32x4_t **)a2 == result || (v4 = *(float **)(a2 + 8), v4 == (float *)result))
  {
    v9 = 0u;
    v10 = 0u;
    v7 = 0u;
    v8 = 0u;
    result = (float32x4_t *)sub_20AB9F244(&v7);
    v6 = v8;
    *v2 = v7;
    v2[1] = v6;
    v5 = v10;
    v2[2] = v9;
  }
  else
  {
    *result = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32((float32x4_t)0, *v3, *v4), v3[1], v4[1]), v3[2], v4[2]), v3[3], v4[3]);
    result[1] = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32((float32x4_t)0, *v3, v4[4]), v3[1], v4[5]), v3[2], v4[6]), v3[3], v4[7]);
    result[2] = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32((float32x4_t)0, *v3, v4[8]), v3[1], v4[9]), v3[2], v4[10]), v3[3], v4[11]);
    v5 = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32((float32x4_t)0, *v3, v4[12]), v3[1], v4[13]), v3[2], v4[14]), v3[3], v4[15]);
  }
  v2[3] = v5;
  return result;
}

double cva::SE3AlgebraStorage<float,cva::MatrixRef<float const,6u,1u,false>>::SE3AlgebraStorage(_QWORD *a1, uint64_t a2)
{
  double result;

  *a1 = a2;
  *(_QWORD *)&result = 6;
  a1[1] = 6;
  return result;
}

{
  double result;

  *a1 = a2;
  *(_QWORD *)&result = 6;
  a1[1] = 6;
  return result;
}

uint64_t cva::SE3AlgebraStorage<float,cva::MatrixRef<float const,6u,1u,false>>::exp@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float cosval;
  float v9;
  __float2 v10;
  float v12[4];

  *(_OWORD *)a2 = xmmword_20AC0609C;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)algn_20AC060AC;
  *(_OWORD *)(a2 + 32) = xmmword_20AC060BC;
  *(_OWORD *)(a2 + 48) = unk_20AC060CC;
  v4 = (float)((float)(**(float **)a1 * **(float **)a1)
             + (float)(*(float *)(*(_QWORD *)a1 + 4) * *(float *)(*(_QWORD *)a1 + 4)))
     + (float)(*(float *)(*(_QWORD *)a1 + 8) * *(float *)(*(_QWORD *)a1 + 8));
  if (v4 >= 0.0061)
  {
    v9 = sqrtf(v4);
    v10 = __sincosf_stret(v9);
    cosval = v10.__cosval;
    v7 = v10.__sinval / v9;
    v5 = (float)(1.0 / v4) * (float)(1.0 - v10.__cosval);
    v6 = (float)(1.0 / v4) * (float)(1.0 - (float)(v10.__sinval / v9));
  }
  else
  {
    v5 = 0.5 - (float)(v4 * (float)((float)(v4 / -720.0) + 0.041667));
    v6 = 0.16667 - (float)(v4 * (float)((float)(v4 / -5040.0) + 0.0083333));
    v7 = 1.0 - (float)(v4 * v6);
    cosval = 1.0 - (float)(v4 * v5);
  }
  v12[2] = v5;
  v12[3] = v6;
  v12[0] = cosval;
  v12[1] = v7;
  return sub_20AB9F064(a1, v12, (float32x2_t *)a2);
}

float32x4_t *cva::SE3GroupStorage<float,cva::Matrix<float,4u,4u,false>>::rplus(uint64_t a1, __int128 *a2)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float cosval;
  float v8;
  __float2 v9;
  float32x4_t *result;
  __int128 v11;
  __int128 v12;
  _QWORD v13[2];
  _OWORD v14[4];
  _QWORD v15[2];
  float32x4_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v20 = *a2;
  v21 = *((_QWORD *)a2 + 2);
  v13[0] = &v20;
  v13[1] = 6;
  v14[0] = xmmword_20AC0609C;
  v14[1] = *(_OWORD *)algn_20AC060AC;
  v14[2] = xmmword_20AC060BC;
  v14[3] = unk_20AC060CC;
  v3 = (float)((float)(*(float *)&v20 * *(float *)&v20) + (float)(*((float *)&v20 + 1) * *((float *)&v20 + 1)))
     + (float)(*((float *)&v20 + 2) * *((float *)&v20 + 2));
  if (v3 >= 0.0061)
  {
    v8 = sqrtf(v3);
    v9 = __sincosf_stret(v8);
    cosval = v9.__cosval;
    v6 = v9.__sinval / v8;
    v4 = (float)(1.0 / v3) * (float)(1.0 - v9.__cosval);
    v5 = (float)(1.0 / v3) * (float)(1.0 - (float)(v9.__sinval / v8));
  }
  else
  {
    v4 = 0.5 - (float)(v3 * (float)((float)(v3 / -720.0) + 0.041667));
    v5 = 0.16667 - (float)(v3 * (float)((float)(v3 / -5040.0) + 0.0083333));
    v6 = 1.0 - (float)(v3 * v5);
    cosval = 1.0 - (float)(v3 * v4);
  }
  v16.f32[3] = v5;
  v16.f32[0] = cosval;
  *(uint64_t *)((char *)v16.i64 + 4) = __PAIR64__(LODWORD(v4), LODWORD(v6));
  sub_20AB9F064((uint64_t)v13, v16.f32, (float32x2_t *)v14);
  v15[0] = a1;
  v15[1] = v14;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  result = sub_20AB9F244(&v16, (uint64_t)v15);
  v11 = v17;
  *(float32x4_t *)a1 = v16;
  *(_OWORD *)(a1 + 16) = v11;
  v12 = v19;
  *(_OWORD *)(a1 + 32) = v18;
  *(_OWORD *)(a1 + 48) = v12;
  return result;
}

float32x2_t cva::SE3GroupStorage<float,cva::Matrix<float,4u,4u,false>>::transform@<D0>(uint64_t a1@<X0>, float *a2@<X1>, uint64_t a3@<X8>)
{
  float32x2_t result;
  _QWORD v6[2];
  float *v7[2];
  float32x2_t v8[3];

  v6[0] = a1;
  v6[1] = 4;
  v7[0] = (float *)v6;
  v7[1] = a2;
  memset(v8, 0, 12);
  sub_20AB94090((float *)v8, v7);
  *(_DWORD *)(a3 + 8) = 0;
  *(_QWORD *)a3 = 0;
  if (a1 == a3)
    a3 = a1;
  *(float *)a3 = v8[0].f32[0] + *(float *)(a1 + 48);
  result = vadd_f32(*(float32x2_t *)((char *)v8 + 4), *(float32x2_t *)(a1 + 52));
  *(float32x2_t *)(a3 + 4) = result;
  return result;
}

float cva::SE3GroupStorage<float,cva::Matrix<float,4u,4u,false>>::inverseTransform@<S0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, float32x2_t *a3@<X8>)
{
  float result;
  _QWORD v5[2];
  _QWORD v6[2];
  _QWORD *v7;
  uint64_t *v8[2];
  _QWORD v9[2];
  _QWORD *v10;
  uint64_t *v11[2];
  float32x2_t v12;
  float v13;
  float32x2_t v14;
  float v15;

  v9[0] = a1;
  v9[1] = 4;
  v10 = v9;
  v11[0] = (uint64_t *)&v10;
  v11[1] = a2;
  v6[0] = a1;
  v6[1] = 4;
  v7 = v6;
  v5[0] = a1 + 48;
  v5[1] = 0xC00000004;
  v8[0] = (uint64_t *)&v7;
  v8[1] = v5;
  v13 = 0.0;
  v12 = 0;
  sub_20AB941D0((float *)&v12, v11);
  v15 = 0.0;
  v14 = 0;
  sub_20AB9F748((float *)&v14, v8);
  *a3 = vsub_f32(v12, v14);
  result = v13 - v15;
  a3[1].f32[0] = v13 - v15;
  return result;
}

float *sub_20AB9F748(float *result, uint64_t **a2)
{
  float *v2;
  uint64_t *v3;
  float *v4;
  uint64_t v5;
  float *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v2 = result;
  v3 = a2[1];
  v4 = (float *)*v3;
  if ((float *)(*v3 - 4 * *((unsigned int *)v3 + 3)) == result)
  {
    v9 = 0;
    v8 = 0;
    result = (float *)sub_20AB9F748(&v8);
    *(_QWORD *)v2 = v8;
    *((_DWORD *)v2 + 2) = v9;
  }
  else
  {
    v5 = **a2;
    v6 = *(float **)v5;
    v7 = *(unsigned int *)(v5 + 8);
    *result = (float)((float)((float)(v6[1] * v4[1]) + (float)(*v6 * *v4)) + 0.0) + (float)(v6[2] * v4[2]);
    result[1] = (float)((float)((float)(v6[v7 + 1] * v4[1]) + (float)(v6[v7] * *v4)) + 0.0)
              + (float)(v6[(v7 + 2)] * v4[2]);
    result[2] = (float)((float)((float)(v6[(2 * v7) + 1] * v4[1])
                              + (float)(v6[(2 * v7)] * *v4))
                      + 0.0)
              + (float)(v6[(2 * v7 + 2)] * v4[2]);
  }
  return result;
}

void cva::SE3GroupStorage<float,cva::Matrix<float,4u,4u,false>>::transformJacobian(float *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  float v10;
  uint64_t v11;
  unint64_t v12;
  float v13;
  float v14;
  float v15;
  float *v16;
  float v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t i;
  unint64_t v25;
  BOOL v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _DWORD v30[9];

  *(_QWORD *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  if (a1 == (float *)a2)
  {
    v11 = 0;
    v12 = 0;
    v30[0] = 0;
    v14 = a1[1];
    v13 = a1[2];
    v15 = *a1;
    *(float *)&v30[1] = -v13;
    *(float *)&v30[2] = v14;
    *(float *)&v30[3] = v13;
    v30[4] = 0;
    *(float *)&v30[5] = -v15;
    *(float *)&v30[6] = -v14;
    *(float *)&v30[7] = v15;
    v30[8] = 0;
    v16 = (float *)v30;
    do
    {
      v17 = *v16++;
      a1[v11] = v17;
      v18 = HIDWORD(v12);
      v19 = (int)v12 < 2;
      if ((int)v12 < 2)
        v18 = 0;
      v20 = v11 + v18;
      v21 = (v12 + 1);
      v22 = v12 & 0xFFFFFFFF00000000;
      if (!v19)
        v21 = 0;
      v12 = v21 | v22;
      v11 = v20 + 1;
    }
    while (v11 != 9);
  }
  else
  {
    v2 = 0;
    v3 = 0;
    v4 = 0;
    do
    {
      v10 = 0.0;
      if (HIDWORD(v4) != (_DWORD)v4)
        v10 = a1[dword_20AC06190[(HIDWORD(v4) + 4 * v4)]]
            * flt_20AC06160[(HIDWORD(v4) + 4 * v4)];
      *(float *)(a2 + 4 * v2) = v10;
      if ((int)v4 >= 2)
        v4 = (v4 & 0xFFFFFFFF00000000) + 0x100000000;
      else
        v4 = (v4 + 1) | v4 & 0xFFFFFFFF00000000;
      v5 = HIDWORD(v3);
      v6 = (int)v3 < 2;
      if ((int)v3 < 2)
        v5 = 0;
      v7 = v2 + v5;
      v8 = (v3 + 1);
      v9 = v3 & 0xFFFFFFFF00000000;
      if (!v6)
        v8 = 0;
      v3 = v8 | v9;
      v2 = v7 + 1;
    }
    while (v2 != 9);
  }
  v23 = 0;
  for (i = 9; i != 18; i = v27 + 1)
  {
    *(_DWORD *)(a2 + 4 * i) = 0;
    v25 = HIDWORD(v23);
    v26 = (int)v23 < 2;
    if ((int)v23 < 2)
      v25 = 0;
    v27 = i + v25;
    v28 = (v23 + 1);
    v29 = v23 & 0xFFFFFFFF00000000;
    if (!v26)
      v28 = 0;
    v23 = v28 | v29;
  }
  *(_DWORD *)(a2 + 36) = 1065353216;
  *(_DWORD *)(a2 + 52) = 1065353216;
  *(_DWORD *)(a2 + 68) = 1065353216;
}

uint64_t cva::SE3GroupStorage<float,cva::Matrix<float,4u,4u,false>>::inverseTransformJacobian@<X0>(float *a1@<X0>, float *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  unint64_t *v24;
  int v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD v32[2];
  unint64_t v33;
  unint64_t v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;

  v3 = 0;
  v4 = 0;
  *(_QWORD *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[4];
  v8 = a1[5];
  v9 = a1[6];
  v10 = a1[8];
  v11 = a1[9];
  v12 = a1[10];
  v14 = a2[1];
  v13 = a2[2];
  *(float *)&v15 = (float)(v5 * v13) - (float)(v6 * v14);
  *(float *)&v16 = (float)(v8 * v13) - (float)(v9 * v14);
  *(float *)&v17 = (float)(v11 * v13) - (float)(v12 * v14);
  *(float *)&v18 = (float)(v6 * *a2) - (float)(*a1 * v13);
  v19 = (float)(v9 * *a2) - (float)(v7 * v13);
  v20 = (float)(v12 * *a2) - (float)(v10 * v13);
  v21 = (float)(*a1 * v14) - (float)(v5 * *a2);
  v22 = (float)(v7 * v14) - (float)(v8 * *a2);
  v23 = (float)(v10 * v14) - (float)(v11 * *a2);
  v33 = __PAIR64__(v16, v15);
  v34 = __PAIR64__(v18, v17);
  v35 = v19;
  v36 = v20;
  v37 = v21;
  v38 = v22;
  v39 = v23;
  v24 = &v33;
  do
  {
    v25 = *(_DWORD *)v24;
    v24 = (unint64_t *)((char *)v24 + 4);
    *(_DWORD *)(a3 + 4 * v3) = v25;
    v26 = HIDWORD(v4);
    v27 = (int)v4 < 2;
    if ((int)v4 < 2)
      v26 = 0;
    v28 = v3 + v26;
    v29 = (v4 + 1);
    v30 = v4 & 0xFFFFFFFF00000000;
    if (!v27)
      v29 = 0;
    v4 = v29 | v30;
    v3 = v28 + 1;
  }
  while (v3 != 9);
  v33 = (unint64_t)a1;
  v34 = 4;
  v32[0] = a3 + 36;
  v32[1] = 0x900000003;
  return sub_20AB9FADC((uint64_t)v32, (uint64_t)&v33);
}

uint64_t sub_20AB9FADC(uint64_t result, uint64_t a2)
{
  float *v2;
  float *v3;
  int v4;
  unint64_t v5;
  float *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  BOOL v10;
  float *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  int v20;
  float *v21;
  unint64_t v22;
  float *v23;
  int v24;
  unint64_t v25;
  BOOL v26;
  float *v27;
  uint64_t v28;
  unint64_t v29;
  float v30[9];

  v2 = *(float **)result;
  v3 = *(float **)a2;
  if (*(_QWORD *)a2 - 4 * *(unsigned int *)(a2 + 12) == *(_QWORD *)result - 4 * *(unsigned int *)(result + 12))
  {
    v14 = *(unsigned int *)(a2 + 8);
    v15 = v3[1];
    v16 = -v3[v14];
    v17 = v3[(2 * v14)];
    v30[0] = -*v3;
    v30[1] = v16;
    v30[2] = -v17;
    v30[3] = -v15;
    v18 = -v3[(2 * (_DWORD)v14) | 1];
    v30[4] = -v3[(v14 + 1)];
    v30[5] = v18;
    v19 = -v3[(v14 + 2)];
    v30[6] = -v3[2];
    v30[7] = v19;
    v30[8] = -v3[(2 * v14 + 2)];
    v20 = *(_DWORD *)(result + 8);
    if (v20)
    {
      v21 = &v2[3 * v20];
      v22 = (unint64_t)(v20 - 3) << 32;
      v23 = v30;
      do
      {
        v24 = *(_DWORD *)v23++;
        *(_DWORD *)v2 = v24;
        v25 = HIDWORD(v22);
        v26 = (int)v22 < 2;
        if ((int)v22 < 2)
          v25 = 0;
        v27 = &v2[v25];
        v28 = (v22 + 1);
        v29 = v22 & 0xFFFFFFFF00000000;
        if (!v26)
          v28 = 0;
        v22 = v28 | v29;
        v2 = v27 + 1;
      }
      while (v2 != v21);
    }
  }
  else
  {
    v4 = *(_DWORD *)(result + 8);
    if (v4)
    {
      v5 = 0;
      v6 = &v2[3 * v4];
      v7 = (unint64_t)(v4 - 3) << 32;
      v8 = *(_DWORD *)(a2 + 8);
      do
      {
        *v2 = -v3[(HIDWORD(v5) + v8 * v5)];
        if ((int)v5 >= 2)
          v5 = (v5 & 0xFFFFFFFF00000000) + 0x100000000;
        else
          v5 = (v5 + 1) | v5 & 0xFFFFFFFF00000000;
        v9 = HIDWORD(v7);
        v10 = (int)v7 < 2;
        if ((int)v7 < 2)
          v9 = 0;
        v11 = &v2[v9];
        v12 = (v7 + 1);
        v13 = v7 & 0xFFFFFFFF00000000;
        if (!v10)
          v12 = 0;
        v7 = v12 | v13;
        v2 = v11 + 1;
      }
      while (v2 != v6);
    }
  }
  return result;
}

void cva::SE3GroupStorage<float,cva::Matrix<float,4u,4u,false>>::log(float32x2_t *a1@<X0>, uint64_t a2@<X8>)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  __float2 v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float32_t v17;
  float32x2_t v18;
  int32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float v22;
  float32_t v23;
  int32x2_t v24;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  sub_20AB93CB0((float *)a1, 4u, (float *)a2);
  v4 = *(float *)a2;
  v5 = *(float *)(a2 + 4);
  v6 = *(float *)(a2 + 8);
  v7 = (float)((float)(v4 * v4) + (float)(v5 * v5)) + (float)(v6 * v6);
  if (v7 >= 0.0061)
  {
    v11 = sqrtf(v7);
    v12 = __sincosf_stret(v11);
    v10 = v12.__sinval / v11;
    v8 = (float)(1.0 / v7) * (float)(1.0 - v12.__cosval);
    v9 = (float)(1.0 / v7) * (float)(1.0 - (float)(v12.__sinval / v11));
  }
  else
  {
    v8 = 0.5 - (float)(v7 * (float)((float)(v7 / -720.0) + 0.041667));
    v9 = 0.16667 - (float)(v7 * (float)((float)(v7 / -5040.0) + 0.0083333));
    v10 = 1.0 - (float)(v7 * v9);
  }
  if (v7 >= 0.00000149)
  {
    if (v7 <= 9.0)
      v13 = (float)-(float)(v9 - (float)(v8 * 0.5)) / v10;
    else
      v13 = (float)(v8 + (float)(v10 * -0.5)) / (float)(v7 * v8);
  }
  else
  {
    v13 = (float)((float)(v7 * 0.0013889) + 0.083333) + (float)(v7 * 0.000033069);
  }
  v15 = a1[6].f32[0];
  v14 = a1[6].f32[1];
  v16 = a1[7].f32[0];
  v17 = (float)(v5 * v16) - (float)(v6 * v14);
  v23 = v17;
  *(float *)v24.i32 = (float)(v6 * v15) - (float)(v4 * v16);
  *(float *)&v24.i32[1] = (float)(v4 * v14) - (float)(v5 * v15);
  v18 = *(float32x2_t *)(a2 + 4);
  v19.i32[1] = v18.i32[1];
  v19.i32[0] = *(_DWORD *)a2;
  v20.i32[0] = vdup_lane_s32(v24, 1).u32[0];
  v20.f32[1] = v17;
  v21 = vadd_f32(vadd_f32(a1[6], vmul_f32(*(float32x2_t *)&v23, (float32x2_t)0xBF000000BF000000)), vmul_n_f32(vmla_f32(vmul_f32((float32x2_t)v24, vneg_f32((float32x2_t)vrev64_s32(v19))), v20, v18), v13));
  v22 = (float)(v13 * vmlas_n_f32(-(float)(v18.f32[0] * v17), *(float *)a2, *(float *)v24.i32))
      + (float)(v16 + (float)(*(float *)&v24.i32[1] * -0.5));
  *(float32x2_t *)(a2 + 12) = v21;
  *(float *)(a2 + 20) = v22;
}

{
  __ZNK3cva15SE3GroupStorageIfNS_6MatrixIfLj4ELj4ELb0EEEE3logEv(a1, a2);
}

_QWORD *cva::SE3AlgebraStorage<float,cva::Matrix<float,6u,1u,false>>::SE3AlgebraStorage(_QWORD *result)
{
  *result = 0;
  result[1] = 0;
  result[2] = 0;
  return result;
}

{
  *result = 0;
  result[1] = 0;
  result[2] = 0;
  return result;
}

void cva::SE3GroupStorage<float,cva::Matrix<float,4u,4u,false>>::logJacobian(float *a1@<X0>, uint64_t a2@<X8>)
{
  float v4;
  float v5;
  float v7;
  float v8;
  float v9;
  float v11;
  float v12;
  float v13;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  __float2 v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v36;
  float v37;
  float v38;
  float v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  __int128 v48;
  __int128 v49;
  int *v50;
  unint64_t v51;
  uint64_t i;
  int v53;
  unint64_t v54;
  BOOL v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t j;
  unint64_t v61;
  BOOL v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  float v66;
  float32x2_t v67;
  _QWORD v68[2];
  unint64_t v69;
  unint64_t *v70;
  float **v71;
  float *v72;
  uint64_t v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  _OWORD v79[2];
  __int128 v80;
  _BYTE v81[20];
  int v82;
  uint64_t v83;
  int v84;

  *(_OWORD *)(a2 + 152) = 0u;
  *(_OWORD *)(a2 + 140) = 0u;
  *(_OWORD *)(a2 + 124) = 0u;
  *(_OWORD *)(a2 + 108) = 0u;
  *(_OWORD *)(a2 + 92) = 0u;
  *(_OWORD *)(a2 + 76) = 0u;
  *(_OWORD *)(a2 + 60) = 0u;
  *(_OWORD *)(a2 + 44) = 0u;
  *(_OWORD *)(a2 + 28) = 0u;
  *(_OWORD *)(a2 + 12) = 0u;
  v80 = 0u;
  memset(v79, 0, sizeof(v79));
  sub_20AB94408(a1, 4u, (float *)v79, (float *)((unint64_t)v79 | 0xC));
  v5 = *((float *)v79 + 1);
  v4 = *(float *)v79;
  *(_DWORD *)a2 = v79[0];
  *(float *)(a2 + 4) = v5;
  _S11 = *((float *)v79 + 2);
  *(_DWORD *)(a2 + 8) = DWORD2(v79[0]);
  v72 = a1 + 12;
  v73 = 0xC00000004;
  *(_QWORD *)v81 = (unint64_t)v79 | 0xC;
  *(_QWORD *)&v81[8] = &v72;
  if (((unint64_t)v79 | 0xC) == a2 || a1 == (float *)a2)
  {
    LODWORD(v71) = 0;
    v70 = 0;
    sub_20ABA0370((float *)&v70, (uint64_t)v81);
    _D19 = (float32x2_t)v70;
    v11 = *(float *)&v71;
  }
  else
  {
    v7 = a1[12];
    v8 = a1[13];
    v9 = a1[14];
    _D19 = vmla_n_f32(vmla_n_f32(vmla_n_f32(0, *(float32x2_t *)((char *)v79 + 12), v7), *(float32x2_t *)((char *)&v79[1] + 8), v8), *(float32x2_t *)((char *)&v80 + 4), v9);
    v11 = (float)((float)((float)(*((float *)&v79[1] + 1) * v7) + 0.0) + (float)(*(float *)&v80 * v8))
        + (float)(*((float *)&v80 + 3) * v9);
  }
  *(float32x2_t *)(a2 + 12) = _D19;
  *(float *)(a2 + 20) = v11;
  v12 = v4 * v4;
  v13 = (float)((float)(v4 * v4) + (float)(v5 * v5)) + (float)(_S11 * _S11);
  if (v13 >= 0.0061)
  {
    v66 = v4;
    v19 = sqrtf(v13);
    v67 = _D19;
    v20 = __sincosf_stret(v19);
    _D19 = v67;
    v21 = v20.__sinval / v19;
    v4 = v66;
    _S0 = (float)(1.0 / v13) * (float)(1.0 - v20.__cosval);
    v15 = (float)(1.0 / v13) * (float)(1.0 - v21);
    v16 = v15 - _S0;
    v17 = (float)(1.0 / v13) * (float)(v21 + (float)(_S0 * -2.0));
    v18 = (float)(1.0 / v13) * (float)(_S0 + (float)(v15 * -3.0));
  }
  else
  {
    _S0 = 0.5 - (float)(v13 * (float)((float)(v13 / -720.0) + 0.041667));
    v15 = 0.16667 - (float)(v13 * (float)((float)(v13 / -5040.0) + 0.0083333));
    v16 = (float)(v13 * (float)((float)(v13 * -0.0011905) + 0.033333)) + -0.33333;
    v17 = (float)(v13 * (float)((float)(v13 * -0.00014881) + 0.0055556)) + -0.083333;
    v18 = (float)(v13 * (float)((float)(v13 * -0.000016534) + 0.00079365)) + -0.016667;
  }
  v22 = 0;
  v23 = a2 + 24;
  v24 = vmuls_lane_f32(v5, _D19, 1);
  v25 = (float)((float)(v4 * _D19.f32[0]) + v24) + (float)(_S11 * v11);
  v26 = (float)((float)(v16 + (float)(v18 * v12)) * v25) + (float)((float)(v15 + v15) * (float)(v4 * _D19.f32[0]));
  v27 = (float)((float)(v16 + (float)(v18 * (float)(v5 * v5))) * v25) + (float)((float)(v15 + v15) * v24);
  v78 = (float)((float)(v16 + (float)(v18 * (float)(_S11 * _S11))) * v25)
      + (float)((float)(v15 + v15) * (float)(_S11 * v11));
  v28 = v18 * v25;
  v29 = (float)(v5 * (float)(v4 * (float)(v18 * v25)))
      + (float)(v15 * vmlas_n_f32(vmuls_lane_f32(v4, _D19, 1), v5, _D19.f32[0]));
  v30 = (float)(_S11 * (float)(v4 * v28)) + (float)(v15 * vmlas_n_f32(v4 * v11, _S11, _D19.f32[0]));
  __asm { FMLA            S17, S11, V19.S[1] }
  v36 = (float)(_S11 * (float)(v5 * v28)) + (float)(v15 * _S17);
  v37 = v17 * v25;
  v38 = (float)(_S11 * v37) + (float)(_S0 * v11);
  __asm { FMLA            S16, S0, V19.S[1] }
  v40 = vmlas_n_f32(v4 * v37, _S0, _D19.f32[0]);
  *(float *)&v72 = v26;
  *((float *)&v72 + 1) = v38 + v29;
  *(float *)&v73 = v30 - _S16;
  *((float *)&v73 + 1) = v29 - v38;
  v76 = _S16 + v30;
  v77 = v36 - v40;
  v74 = v27;
  v75 = v40 + v36;
  v41 = 0x300000000;
  v42 = 12;
  do
  {
    *(_DWORD *)(v23 + 4 * v22) = *(_DWORD *)((char *)v79 + v42);
    v43 = HIDWORD(v41);
    v44 = (int)v41 < 2;
    if ((int)v41 < 2)
      v43 = 0;
    v45 = v22 + v43;
    v46 = (v41 + 1);
    v47 = v41 & 0xFFFFFFFF00000000;
    if (!v44)
      v46 = 0;
    v41 = v46 | v47;
    v22 = v45 + 1;
    v42 += 4;
  }
  while (v22 != 18);
  v48 = *(_OWORD *)(a2 + 28);
  v49 = *(_OWORD *)(a2 + 48);
  *((_QWORD *)&v48 + 1) = *(_QWORD *)(a2 + 48);
  *(_DWORD *)v81 = *(_DWORD *)(a2 + 24);
  *(_OWORD *)&v81[4] = v48;
  v50 = (int *)v81;
  v82 = DWORD2(v49);
  v83 = *(_QWORD *)(a2 + 72);
  v84 = *(_DWORD *)(a2 + 80);
  v51 = 0x300000000;
  for (i = 21; i != 39; i = v56 + 1)
  {
    v53 = *v50++;
    *(_DWORD *)(v23 + 4 * i) = v53;
    v54 = HIDWORD(v51);
    v55 = (int)v51 < 2;
    if ((int)v51 < 2)
      v54 = 0;
    v56 = i + v54;
    v57 = (v51 + 1);
    v58 = v51 & 0xFFFFFFFF00000000;
    if (!v55)
      v57 = 0;
    v51 = v57 | v58;
  }
  v70 = &v69;
  v71 = &v72;
  *(_QWORD *)v81 = &v70;
  *(_QWORD *)&v81[8] = (unint64_t)v79 | 0xC;
  v68[0] = a2 + 36;
  v68[1] = 0x300000006;
  v69 = (unint64_t)v79 | 0xC;
  sub_20ABA044C((uint64_t)v68, (uint64_t *)v81);
  v59 = 0x300000000;
  for (j = 18; j != 36; j = v63 + 1)
  {
    *(_DWORD *)(v23 + 4 * j) = 0;
    v61 = HIDWORD(v59);
    v62 = (int)v59 < 2;
    if ((int)v59 < 2)
      v61 = 0;
    v63 = j + v61;
    v64 = (v59 + 1);
    v65 = v59 & 0xFFFFFFFF00000000;
    if (!v62)
      v64 = 0;
    v59 = v64 | v65;
  }
}

float *sub_20ABA0370(float *result, uint64_t a2)
{
  float *v2;
  float *v3;
  uint64_t v4;
  float *v5;
  uint64_t v6;
  int v7;

  v2 = result;
  v3 = *(float **)a2;
  if (*(float **)a2 == result
    || (v4 = *(_QWORD *)(a2 + 8),
        v5 = *(float **)v4,
        (float *)(*(_QWORD *)v4 - 4 * *(unsigned int *)(v4 + 12)) == result))
  {
    v7 = 0;
    v6 = 0;
    result = (float *)sub_20ABA0370(&v6);
    *(_QWORD *)v2 = v6;
    *((_DWORD *)v2 + 2) = v7;
  }
  else
  {
    *result = (float)((float)((float)(*v3 * *v5) + 0.0) + (float)(v3[3] * v5[1])) + (float)(v3[6] * v5[2]);
    result[1] = (float)((float)((float)(v3[1] * *v5) + 0.0) + (float)(v3[4] * v5[1])) + (float)(v3[7] * v5[2]);
    result[2] = (float)((float)((float)(v3[2] * *v5) + 0.0) + (float)(v3[5] * v5[1])) + (float)(v3[8] * v5[2]);
  }
  return result;
}

void sub_20ABA044C(uint64_t a1, uint64_t *a2)
{
  float *v3;
  float *v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float *v16;
  float *v17;
  int v18;
  float *v19;
  uint64_t v20;
  unint64_t v21;
  int *v22;
  int v23;
  unint64_t v24;
  BOOL v25;
  float *v26;
  uint64_t v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  float v31;

  v3 = (float *)a2[1];
  v4 = *(float **)a1;
  if (v3 == (float *)(*(_QWORD *)a1 - 4 * *(unsigned int *)(a1 + 12)))
  {
    v31 = 0.0;
    v29 = 0u;
    v30 = 0u;
    sub_20ABA0624((uint64_t)&v29, a2);
    v18 = *(_DWORD *)(a1 + 8);
    if (v18)
    {
      v19 = *(float **)a1;
      v20 = *(_QWORD *)a1 + 4 * (3 * v18);
      v21 = (unint64_t)(v18 - 3) << 32;
      v22 = (int *)&v29;
      do
      {
        v23 = *v22++;
        *(_DWORD *)v19 = v23;
        v24 = HIDWORD(v21);
        v25 = (int)v21 < 2;
        if ((int)v21 < 2)
          v24 = 0;
        v26 = &v19[v24];
        v27 = (v21 + 1);
        v28 = v21 & 0xFFFFFFFF00000000;
        if (!v25)
          v27 = 0;
        v21 = v27 | v28;
        v19 = v26 + 1;
      }
      while (v19 != (float *)v20);
    }
  }
  else
  {
    v5 = *a2;
    v29 = 0u;
    v30 = 0u;
    v31 = 0.0;
    sub_20ABA0784((uint64_t)&v29, v5);
    v6 = *(unsigned int *)(a1 + 8);
    v7 = *(float *)&v29;
    v8 = *((float *)&v29 + 3);
    v9 = *((float *)&v30 + 2);
    *v4 = (float)((float)((float)(*(float *)&v29 * *v3) + 0.0) + (float)(*((float *)&v29 + 3) * v3[1]))
        + (float)(*((float *)&v30 + 2) * v3[2]);
    v10 = *((float *)&v29 + 1);
    v11 = *(float *)&v30;
    v12 = *((float *)&v30 + 3);
    v4[1] = (float)((float)((float)(*((float *)&v29 + 1) * *v3) + 0.0) + (float)(*(float *)&v30 * v3[1]))
          + (float)(*((float *)&v30 + 3) * v3[2]);
    v13 = *((float *)&v29 + 2);
    v14 = *((float *)&v30 + 1);
    v15 = v31;
    v4[2] = (float)((float)((float)(*((float *)&v29 + 2) * *v3) + 0.0) + (float)(*((float *)&v30 + 1) * v3[1]))
          + (float)(v31 * v3[2]);
    v16 = &v4[v6];
    *v16 = (float)((float)((float)(v7 * v3[3]) + 0.0) + (float)(v8 * v3[4])) + (float)(v9 * v3[5]);
    v16[1] = (float)((float)((float)(v10 * v3[3]) + 0.0) + (float)(v11 * v3[4])) + (float)(v12 * v3[5]);
    v16[2] = (float)((float)((float)(v13 * v3[3]) + 0.0) + (float)(v14 * v3[4])) + (float)(v15 * v3[5]);
    v17 = &v4[(2 * v6)];
    *v17 = (float)((float)((float)(v7 * v3[6]) + 0.0) + (float)(v8 * v3[7])) + (float)(v9 * v3[8]);
    v17[1] = (float)((float)((float)(v10 * v3[6]) + 0.0) + (float)(v11 * v3[7])) + (float)(v12 * v3[8]);
    v17[2] = (float)((float)((float)(v13 * v3[6]) + 0.0) + (float)(v14 * v3[7])) + (float)(v15 * v3[8]);
  }
}

double sub_20ABA0624(uint64_t a1, uint64_t *a2)
{
  float *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  double result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  float v13;

  v3 = (float *)a2[1];
  if (v3 == (float *)a1)
  {
    v13 = 0.0;
    v11 = 0u;
    v12 = 0u;
    sub_20ABA0624(&v11);
    result = *(double *)&v11;
    v10 = v12;
    *(_OWORD *)a1 = v11;
    *(_OWORD *)(a1 + 16) = v10;
    *(float *)(a1 + 32) = v13;
  }
  else
  {
    v4 = *a2;
    v11 = 0u;
    v12 = 0u;
    v13 = 0.0;
    result = sub_20ABA0784((uint64_t)&v11, v4);
    v5 = v11;
    v6 = *((_QWORD *)&v12 + 1);
    *(float *)a1 = (float)((float)((float)(*(float *)&v11 * *v3) + 0.0) + (float)(*((float *)&v11 + 3) * v3[1]))
                 + (float)(*((float *)&v12 + 2) * v3[2]);
    v7 = v12;
    *(float *)(a1 + 4) = (float)((float)((float)(*((float *)&v5 + 1) * *v3) + 0.0) + (float)(*(float *)&v12 * v3[1]))
                       + (float)(*((float *)&v6 + 1) * v3[2]);
    v8 = v13;
    *(float *)(a1 + 8) = (float)((float)((float)(*((float *)&v5 + 2) * *v3) + 0.0) + (float)(*((float *)&v7 + 1) * v3[1]))
                       + (float)(v13 * v3[2]);
    *(float *)(a1 + 12) = (float)((float)((float)(*(float *)&v5 * v3[3]) + 0.0) + (float)(*((float *)&v5 + 3) * v3[4]))
                        + (float)(*(float *)&v6 * v3[5]);
    *(float *)(a1 + 16) = (float)((float)((float)(*((float *)&v5 + 1) * v3[3]) + 0.0) + (float)(*(float *)&v7 * v3[4]))
                        + (float)(*((float *)&v6 + 1) * v3[5]);
    *(float *)(a1 + 20) = (float)((float)((float)(*((float *)&v5 + 2) * v3[3]) + 0.0)
                                + (float)(*((float *)&v7 + 1) * v3[4]))
                        + (float)(v8 * v3[5]);
    *(float *)(a1 + 24) = (float)((float)((float)(*(float *)&v5 * v3[6]) + 0.0) + (float)(*((float *)&v5 + 3) * v3[7]))
                        + (float)(*(float *)&v6 * v3[8]);
    *(float *)(a1 + 28) = (float)((float)((float)(*((float *)&v5 + 1) * v3[6]) + 0.0) + (float)(*(float *)&v7 * v3[7]))
                        + (float)(*((float *)&v6 + 1) * v3[8]);
    *(float *)&result = (float)((float)((float)(*((float *)&v5 + 2) * v3[6]) + 0.0)
                              + (float)(*((float *)&v7 + 1) * v3[7]))
                      + (float)(v8 * v3[8]);
    *(_DWORD *)(a1 + 32) = LODWORD(result);
  }
  return result;
}

double sub_20ABA0784(uint64_t a1, uint64_t a2)
{
  float *v3;
  float *v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  double result;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int v18;

  v3 = *(float **)(a2 + 8);
  if (v3 == (float *)a1)
  {
    v18 = 0;
    v16 = 0u;
    v17 = 0u;
    sub_20ABA0784(&v16);
    result = *(double *)&v16;
    v15 = v17;
    *(_OWORD *)a1 = v16;
    *(_OWORD *)(a1 + 16) = v15;
    *(_DWORD *)(a1 + 32) = v18;
  }
  else
  {
    v4 = **(float ***)a2;
    v5 = *v4;
    v6 = v4[1];
    v7 = v4[2];
    v8 = v4[3];
    v9 = v4[4];
    v10 = v4[5];
    v11 = v4[6];
    v12 = v4[7];
    v13 = v4[8];
    *(float *)a1 = (float)((float)(0.0 - (float)(*v4 * *v3)) - (float)(v8 * v3[1])) - (float)(v11 * v3[2]);
    *(float *)(a1 + 4) = (float)((float)(0.0 - (float)(v6 * *v3)) - (float)(v9 * v3[1])) - (float)(v12 * v3[2]);
    *(float *)(a1 + 8) = (float)((float)(0.0 - (float)(v7 * *v3)) - (float)(v10 * v3[1])) - (float)(v13 * v3[2]);
    *(float *)(a1 + 12) = (float)((float)(0.0 - (float)(v5 * v3[3])) - (float)(v8 * v3[4])) - (float)(v11 * v3[5]);
    *(float *)(a1 + 16) = (float)((float)(0.0 - (float)(v6 * v3[3])) - (float)(v9 * v3[4])) - (float)(v12 * v3[5]);
    *(float *)(a1 + 20) = (float)((float)(0.0 - (float)(v7 * v3[3])) - (float)(v10 * v3[4])) - (float)(v13 * v3[5]);
    *(float *)(a1 + 24) = (float)((float)(0.0 - (float)(v5 * v3[6])) - (float)(v8 * v3[7])) - (float)(v11 * v3[8]);
    *(float *)(a1 + 28) = (float)((float)(0.0 - (float)(v6 * v3[6])) - (float)(v9 * v3[7])) - (float)(v12 * v3[8]);
    *(float *)&result = (float)((float)(0.0 - (float)(v7 * v3[6])) - (float)(v10 * v3[7])) - (float)(v13 * v3[8]);
    *(_DWORD *)(a1 + 32) = LODWORD(result);
  }
  return result;
}

uint64_t cva::SE3GroupStorage<float,cva::Matrix<float,4u,4u,false>>::inverse@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float v8;
  float v9;
  float v10;
  float v11;
  _QWORD v12[2];
  _QWORD v13[2];
  _QWORD v14[2];
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  float v18;

  *(_OWORD *)a2 = xmmword_20AC0609C;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)algn_20AC060AC;
  *(_OWORD *)(a2 + 32) = xmmword_20AC060BC;
  *(_OWORD *)(a2 + 48) = unk_20AC060CC;
  v15 = (uint64_t *)a1;
  v16 = 4;
  v14[0] = a2;
  v14[1] = 4;
  result = sub_20ABA09D0((uint64_t)v14, (uint64_t)&v15);
  v13[0] = a2;
  v13[1] = 4;
  v14[0] = v13;
  v12[0] = a1 + 48;
  v12[1] = 0xC00000004;
  v15 = v14;
  v16 = (uint64_t)v12;
  if (a1 == a2)
  {
    v18 = 0.0;
    v17 = 0;
    result = (uint64_t)sub_20ABA0B18((float *)&v17, &v15);
    *(_QWORD *)(a2 + 48) = v17;
    v11 = v18;
  }
  else
  {
    v8 = *(float *)(a2 + 8);
    v9 = *(float *)(a2 + 24);
    v10 = *(float *)(a2 + 40);
    v5.i32[0] = *(_DWORD *)(a1 + 48);
    v6.i32[0] = *(_DWORD *)(a1 + 52);
    v7.i32[0] = *(_DWORD *)(a1 + 56);
    *(float32x2_t *)(a2 + 48) = vmls_lane_f32(vmls_lane_f32(vmls_lane_f32(0, *(float32x2_t *)a2, v5, 0), *(float32x2_t *)(a2 + 16), v6, 0), *(float32x2_t *)(a2 + 32), v7, 0);
    v11 = (float)((float)(0.0 - (float)(v8 * v5.f32[0])) - (float)(v9 * v6.f32[0])) - (float)(v10 * v7.f32[0]);
  }
  *(float *)(a2 + 56) = v11;
  return result;
}

uint64_t sub_20ABA09D0(uint64_t result, uint64_t a2)
{
  _DWORD *v2;
  _DWORD *v3;
  int v4;
  unint64_t v5;
  _DWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  BOOL v10;
  _DWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  _DWORD *v21;
  unint64_t v22;
  int *v23;
  int v24;
  unint64_t v25;
  BOOL v26;
  _DWORD *v27;
  uint64_t v28;
  unint64_t v29;
  _DWORD v30[9];

  v2 = *(_DWORD **)result;
  v3 = *(_DWORD **)a2;
  if (*(_QWORD *)a2 - 4 * *(unsigned int *)(a2 + 12) == *(_QWORD *)result - 4 * *(unsigned int *)(result + 12))
  {
    v14 = *(unsigned int *)(a2 + 8);
    v15 = v3[v14];
    v16 = v3[1];
    v30[0] = *v3;
    v30[1] = v15;
    v17 = v3[(v14 + 1)];
    v30[2] = v3[(2 * v14)];
    v30[3] = v16;
    v18 = v3[(2 * (_DWORD)v14) | 1];
    v30[4] = v17;
    v30[5] = v18;
    v19 = v3[(v14 + 2)];
    v30[6] = v3[2];
    v30[7] = v19;
    v30[8] = v3[(2 * v14 + 2)];
    v20 = *(_DWORD *)(result + 8);
    if (v20)
    {
      v21 = &v2[3 * v20];
      v22 = (unint64_t)(v20 - 3) << 32;
      v23 = v30;
      do
      {
        v24 = *v23++;
        *v2 = v24;
        v25 = HIDWORD(v22);
        v26 = (int)v22 < 2;
        if ((int)v22 < 2)
          v25 = 0;
        v27 = &v2[v25];
        v28 = (v22 + 1);
        v29 = v22 & 0xFFFFFFFF00000000;
        if (!v26)
          v28 = 0;
        v22 = v28 | v29;
        v2 = v27 + 1;
      }
      while (v2 != v21);
    }
  }
  else
  {
    v4 = *(_DWORD *)(result + 8);
    if (v4)
    {
      v5 = 0;
      v6 = &v2[3 * v4];
      v7 = (unint64_t)(v4 - 3) << 32;
      v8 = *(_DWORD *)(a2 + 8);
      do
      {
        *v2 = v3[(HIDWORD(v5) + v8 * v5)];
        if ((int)v5 >= 2)
          v5 = (v5 & 0xFFFFFFFF00000000) + 0x100000000;
        else
          v5 = (v5 + 1) | v5 & 0xFFFFFFFF00000000;
        v9 = HIDWORD(v7);
        v10 = (int)v7 < 2;
        if ((int)v7 < 2)
          v9 = 0;
        v11 = &v2[v9];
        v12 = (v7 + 1);
        v13 = v7 & 0xFFFFFFFF00000000;
        if (!v10)
          v12 = 0;
        v7 = v12 | v13;
        v2 = v11 + 1;
      }
      while (v2 != v6);
    }
  }
  return result;
}

float *sub_20ABA0B18(float *result, uint64_t **a2)
{
  float *v2;
  uint64_t *v3;
  float *v4;
  uint64_t v5;
  float *v6;
  float v7;
  float v8;
  float v9;
  uint64_t v10;
  float *v11;
  float v12;
  float v13;
  float v14;
  float *v15;
  float v16;
  float v17;
  uint64_t v18;
  int v19;

  v2 = result;
  v3 = a2[1];
  v4 = (float *)*v3;
  if ((float *)(*v3 - 4 * *((unsigned int *)v3 + 3)) == result)
  {
    v19 = 0;
    v18 = 0;
    result = (float *)sub_20ABA0B18(&v18);
    *(_QWORD *)v2 = v18;
    *((_DWORD *)v2 + 2) = v19;
  }
  else
  {
    v5 = **a2;
    v6 = *(float **)v5;
    v7 = **(float **)v5;
    v8 = *(float *)(*(_QWORD *)v5 + 4);
    v9 = *(float *)(*(_QWORD *)v5 + 8);
    v10 = (*(_DWORD *)(v5 + 8) - 3);
    v11 = &v6[v10];
    v12 = v11[3];
    v13 = v11[4];
    v11 += 3;
    v14 = v11[2];
    v15 = &v11[v10];
    v16 = v15[4];
    v17 = v15[5];
    *result = (float)((float)(0.0 - (float)(v7 * *v4)) - (float)(v12 * v4[1])) - (float)(v15[3] * v4[2]);
    result[1] = (float)((float)(0.0 - (float)(v8 * *v4)) - (float)(v13 * v4[1])) - (float)(v16 * v4[2]);
    result[2] = (float)((float)(0.0 - (float)(v9 * *v4)) - (float)(v14 * v4[1])) - (float)(v17 * v4[2]);
  }
  return result;
}

uint64_t cva::SE3GroupStorage<float,cva::Matrix<float,4u,4u,false>>::adjoint@<X0>(uint64_t result@<X0>, int *a2@<X8>, int8x16_t a3@<Q1>, int32x4_t a4@<Q3>)
{
  int32x4_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int *v8;
  unint64_t v9;
  BOOL v10;
  int *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  int v20;
  float v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  int *v25;
  int v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int *v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  BOOL v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  float32x2_t v41;
  float v42;
  int32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  unint64_t v51;
  int *v52;
  uint64_t i;
  int v54;
  unint64_t v55;
  BOOL v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t j;
  unint64_t v62;
  BOOL v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  _BYTE v67[32];
  float v68;

  v4.i64[1] = 0;
  *((_OWORD *)a2 + 7) = 0u;
  *((_OWORD *)a2 + 8) = 0u;
  *((_OWORD *)a2 + 5) = 0u;
  *((_OWORD *)a2 + 6) = 0u;
  *((_OWORD *)a2 + 3) = 0u;
  *((_OWORD *)a2 + 4) = 0u;
  *((_OWORD *)a2 + 1) = 0u;
  *((_OWORD *)a2 + 2) = 0u;
  *(_OWORD *)a2 = 0u;
  if ((int *)result == a2)
  {
    v23 = 0;
    *(_DWORD *)v67 = *(_DWORD *)result;
    v4.i64[0] = *(_QWORD *)(result + 4);
    v4.i64[1] = *(_QWORD *)(result + 16);
    *(int32x4_t *)&v67[4] = v4;
    *(_DWORD *)&v67[20] = *(_DWORD *)(result + 24);
    *(_QWORD *)&v67[24] = *(_QWORD *)(result + 32);
    v68 = *(float *)(result + 40);
    v24 = 0x300000000;
    v25 = (int *)v67;
    do
    {
      v26 = *v25++;
      *(_DWORD *)(result + 4 * v23) = v26;
      v27 = HIDWORD(v24);
      v28 = (int)v24 < 2;
      if ((int)v24 < 2)
        v27 = 0;
      v29 = v23 + v27;
      v30 = (v24 + 1);
      v31 = v24 & 0xFFFFFFFF00000000;
      if (!v28)
        v30 = 0;
      v24 = v30 | v31;
      v23 = v29 + 1;
    }
    while (v23 != 18);
    a3.i64[0] = 0;
    v22 = 0uLL;
    v21 = 0.0;
    v20 = 0;
    v19 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 0x100000000;
    v7 = 0x300000000;
    v8 = (int *)result;
    do
    {
      a2[v5] = *v8;
      v9 = HIDWORD(v6);
      v10 = (int)v6 < 2;
      if ((int)v6 < 2)
        v9 = 0;
      v11 = &v8[v9];
      v12 = (v6 + 1);
      v13 = v6 & 0xFFFFFFFF00000000;
      if (!v10)
        v12 = 0;
      v6 = v12 | v13;
      v8 = v11 + 1;
      v14 = HIDWORD(v7);
      v15 = (int)v7 < 2;
      if ((int)v7 < 2)
        v14 = 0;
      v16 = v5 + v14;
      v17 = (v7 + 1);
      v18 = v7 & 0xFFFFFFFF00000000;
      if (!v15)
        v17 = 0;
      v7 = v17 | v18;
      v5 = v16 + 1;
    }
    while (v5 != 18);
    v19 = *a2;
    v20 = *((_QWORD *)a2 + 4);
    a3.i64[0] = *((_QWORD *)a2 + 6);
    v21 = *((float *)a2 + 14);
    *(_QWORD *)&v22 = *(_QWORD *)(a2 + 1);
    *((_QWORD *)&v22 + 1) = *((_QWORD *)a2 + 3);
  }
  *(_DWORD *)v67 = v19;
  *(_OWORD *)&v67[4] = v22;
  *(_DWORD *)&v67[20] = v20;
  *(_QWORD *)&v67[24] = a3.i64[0];
  v32 = 0x300000000;
  v33 = (int *)v67;
  v34 = 21;
  v68 = v21;
  do
  {
    v35 = *v33++;
    a2[v34] = v35;
    v36 = HIDWORD(v32);
    v37 = (int)v32 < 2;
    if ((int)v32 < 2)
      v36 = 0;
    v38 = v34 + v36;
    v39 = (v32 + 1);
    v40 = v32 & 0xFFFFFFFF00000000;
    if (!v37)
      v39 = 0;
    v32 = v39 | v40;
    v34 = v38 + 1;
  }
  while (v34 != 39);
  v4.i64[0] = *(_QWORD *)(result + 48);
  a3.i32[0] = *(_DWORD *)(result + 56);
  a4.i64[0] = *(_QWORD *)(result + 4);
  LODWORD(v22) = *(_DWORD *)(result + 24);
  v41 = *(float32x2_t *)(result + 36);
  v42 = vmul_f32(*(float32x2_t *)v4.i8, v41).f32[0] - vmuls_lane_f32(*(float *)(result + 32), *(float32x2_t *)v4.i8, 1);
  v43 = vuzp2q_s32(v4, vzip1q_s32(v4, v4));
  v44 = (float32x4_t)v43;
  v44.i32[1] = a3.i32[0];
  v44.i32[3] = v43.i32[0];
  v45 = (float32x4_t)vuzp2q_s32(a4, vzip1q_s32(a4, a4));
  v45.i32[1] = *(_DWORD *)result;
  v45.i32[3] = v22;
  v46.i64[0] = *(_QWORD *)(result + 16);
  v47 = vmulq_f32(v44, v45);
  v48 = (float32x4_t)vextq_s8(vextq_s8(a3, a3, 4uLL), (int8x16_t)v4, 0xCuLL);
  v48.i32[3] = v48.i32[0];
  a4.i32[2] = *(_DWORD *)result;
  a4.i32[3] = v46.i32[1];
  *(int32x2_t *)v49.f32 = vzip1_s32(*(int32x2_t *)&v22, *(int32x2_t *)v46.f32);
  v46.i32[2] = vdup_lane_s32((int32x2_t)v41, 1).u32[0];
  v46.i32[3] = *(_DWORD *)(result + 32);
  v50.i64[0] = v4.i64[0];
  v50.i64[1] = __PAIR64__(v4.u32[0], a3.u32[0]);
  *(float32x2_t *)&v49.u32[2] = v41;
  *(float32x4_t *)v67 = vsubq_f32(v47, vmulq_f32(v48, (float32x4_t)a4));
  *(float32x4_t *)&v67[16] = vsubq_f32(vmulq_f32(v48, v46), vmulq_f32(v50, v49));
  v68 = v42;
  v51 = 0x300000000;
  v52 = (int *)v67;
  for (i = 3; i != 21; i = v57 + 1)
  {
    v54 = *v52++;
    a2[i] = v54;
    v55 = HIDWORD(v51);
    v56 = (int)v51 < 2;
    if ((int)v51 < 2)
      v55 = 0;
    v57 = i + v55;
    v58 = (v51 + 1);
    v59 = v51 & 0xFFFFFFFF00000000;
    if (!v56)
      v58 = 0;
    v51 = v58 | v59;
  }
  v60 = 0x300000000;
  for (j = 18; j != 36; j = v64 + 1)
  {
    a2[j] = 0;
    v62 = HIDWORD(v60);
    v63 = (int)v60 < 2;
    if ((int)v60 < 2)
      v62 = 0;
    v64 = j + v62;
    v65 = (v60 + 1);
    v66 = v60 & 0xFFFFFFFF00000000;
    if (!v63)
      v65 = 0;
    v60 = v65 | v66;
  }
  return result;
}

double cva::SE3GroupStorage<float,cva::Matrix<float,4u,4u,false>>::enforce(uint64_t a1)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float cosval;
  float v7;
  __float2 v8;
  __int128 v9;
  double result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  float v16;
  float v17;
  float v18;
  float v19[4];

  cva::SE3GroupStorage<float,cva::Matrix<float,4u,4u,false>>::log((float32x2_t *)a1, (uint64_t)&v16);
  v12 = xmmword_20AC0609C;
  v13 = *(_OWORD *)algn_20AC060AC;
  v14 = xmmword_20AC060BC;
  v15 = unk_20AC060CC;
  v2 = (float)((float)(v16 * v16) + (float)(v17 * v17)) + (float)(v18 * v18);
  if (v2 >= 0.0061)
  {
    v7 = sqrtf(v2);
    v8 = __sincosf_stret(v7);
    cosval = v8.__cosval;
    v5 = v8.__sinval / v7;
    v3 = (float)(1.0 / v2) * (float)(1.0 - v8.__cosval);
    v4 = (float)(1.0 / v2) * (float)(1.0 - (float)(v8.__sinval / v7));
  }
  else
  {
    v3 = 0.5 - (float)(v2 * (float)((float)(v2 / -720.0) + 0.041667));
    v4 = 0.16667 - (float)(v2 * (float)((float)(v2 / -5040.0) + 0.0083333));
    v5 = 1.0 - (float)(v2 * v4);
    cosval = 1.0 - (float)(v2 * v3);
  }
  v19[2] = v3;
  v19[3] = v4;
  v19[0] = cosval;
  v19[1] = v5;
  sub_20ABA0FD4((uint64_t)&v16, v19, (float32x2_t *)&v12);
  v9 = v13;
  *(_OWORD *)a1 = v12;
  *(_OWORD *)(a1 + 16) = v9;
  result = *(double *)&v14;
  v11 = v15;
  *(_OWORD *)(a1 + 32) = v14;
  *(_OWORD *)(a1 + 48) = v11;
  return result;
}

uint64_t sub_20ABA0FD4(uint64_t result, float *a2, float32x2_t *a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float32x2_t v29;
  int32x2_t v30;
  float32x2_t v31;
  float32x2_t v32;
  _BYTE v33[12];

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = v5 * *(float *)result;
  v7 = v5 * *(float *)(result + 4);
  v8 = v5 * *(float *)(result + 8);
  a3->f32[0] = *a2 + (float)(v6 * *(float *)result);
  a3[2].f32[1] = v3 + (float)(v7 * *(float *)(result + 4));
  a3[5].f32[0] = v3 + (float)(v8 * *(float *)(result + 8));
  v9 = *(float *)(result + 4);
  v10 = v6 * v9;
  v11 = *(float *)(result + 8);
  v12 = v6 * v11;
  v13 = v7 * v11;
  v14 = v4 * *(float *)result;
  v15 = v4 * v9;
  v16 = v4 * v11;
  a3[2].f32[0] = v10 - v16;
  a3[4].f32[0] = v15 + v12;
  a3[4].f32[1] = v13 - v14;
  a3->f32[1] = v10 + v16;
  a3[1].f32[0] = v12 - v15;
  a3[3].f32[0] = v13 + v14;
  v17 = *(float *)(result + 8);
  v18 = *(float *)(result + 12);
  v19 = *(float *)(result + 16);
  v20 = *(float *)(result + 20);
  v21 = *(float *)(result + 4);
  v22 = (float)(v21 * v20) - (float)(v17 * v19);
  v23 = (float)(v17 * v18) - (float)(*(float *)result * v20);
  *(float *)v33 = v22;
  *(float *)&v33[4] = v23;
  v24 = (float)(*(float *)result * v19) - (float)(v21 * v18);
  *(float *)&v33[8] = v24;
  v26 = a2[2];
  v25 = a2[3];
  if ((float32x2_t *)result == a3)
  {
    v28 = v20 + (float)(v26 * v24);
    v29 = *(float32x2_t *)(result + 4);
    v30.i32[1] = v29.i32[1];
    v30.i32[0] = *(_DWORD *)result;
    v31.i32[0] = vdup_lane_s32(*(int32x2_t *)&v33[4], 1).u32[0];
    v31.f32[1] = v22;
    v32 = vadd_f32(vadd_f32(*(float32x2_t *)(result + 12), vmul_n_f32(*(float32x2_t *)v33, v26)), vmul_n_f32(vmla_f32(vmul_f32(*(float32x2_t *)&v33[4], vneg_f32((float32x2_t)vrev64_s32(v30))), v31, v29), v25));
    v27 = (float)(v25 * vmlas_n_f32(-(float)(v29.f32[0] * v22), *(float *)result, *(float *)&v33[4])) + v28;
    a3[6] = v32;
  }
  else
  {
    a3[6].f32[0] = (float)(v18 + (float)(v22 * v26))
                 + (float)(v25 * (float)((float)(*(float *)(result + 4) * v24) - (float)(*(float *)(result + 8) * v23)));
    a3[6].f32[1] = (float)(*(float *)(result + 16) + (float)(v23 * v26))
                 + (float)(v25 * (float)((float)(*(float *)(result + 8) * v22) - (float)(*(float *)result * v24)));
    v27 = (float)(*(float *)(result + 20) + (float)(v24 * v26))
        + (float)(v25 * (float)((float)(*(float *)result * v23) - (float)(*(float *)(result + 4) * v22)));
  }
  a3[7].f32[0] = v27;
  return result;
}

uint64_t cva::SE3AlgebraStorage<float,cva::Matrix<float,6u,1u,false>>::exp@<X0>(float *a1@<X0>, uint64_t a2@<X8>)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float cosval;
  float v9;
  __float2 v10;
  float v12[4];

  *(_OWORD *)a2 = xmmword_20AC0609C;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)algn_20AC060AC;
  *(_OWORD *)(a2 + 32) = xmmword_20AC060BC;
  *(_OWORD *)(a2 + 48) = unk_20AC060CC;
  v4 = (float)((float)(*a1 * *a1) + (float)(a1[1] * a1[1])) + (float)(a1[2] * a1[2]);
  if (v4 >= 0.0061)
  {
    v9 = sqrtf(v4);
    v10 = __sincosf_stret(v9);
    cosval = v10.__cosval;
    v7 = v10.__sinval / v9;
    v5 = (float)(1.0 / v4) * (float)(1.0 - v10.__cosval);
    v6 = (float)(1.0 / v4) * (float)(1.0 - (float)(v10.__sinval / v9));
  }
  else
  {
    v5 = 0.5 - (float)(v4 * (float)((float)(v4 / -720.0) + 0.041667));
    v6 = 0.16667 - (float)(v4 * (float)((float)(v4 / -5040.0) + 0.0083333));
    v7 = 1.0 - (float)(v4 * v6);
    cosval = 1.0 - (float)(v4 * v5);
  }
  v12[2] = v5;
  v12[3] = v6;
  v12[0] = cosval;
  v12[1] = v7;
  return sub_20ABA0FD4((uint64_t)a1, v12, (float32x2_t *)a2);
}

uint64_t cva::SE3GroupStorage<float,cva::Matrix<float,4u,4u,false>>::serialize()
{
  return std::ostream::write();
}

uint64_t cva::SE3GroupStorage<float,cva::Matrix<float,4u,4u,false>>::deserialize()
{
  return std::istream::read();
}

double cva::SE3GroupStorage<double,cva::Matrix<double,4u,4u,false>>::SE3GroupStorage(_OWORD *a1)
{
  double result;

  a1[4] = xmmword_20AC06120;
  a1[5] = unk_20AC06130;
  a1[6] = xmmword_20AC06140;
  a1[7] = unk_20AC06150;
  *a1 = xmmword_20AC060E0;
  a1[1] = *(_OWORD *)algn_20AC060F0;
  result = 0.0;
  a1[2] = xmmword_20AC06100;
  a1[3] = unk_20AC06110;
  return result;
}

{
  double result;

  a1[4] = xmmword_20AC06120;
  a1[5] = unk_20AC06130;
  a1[6] = xmmword_20AC06140;
  a1[7] = unk_20AC06150;
  *a1 = xmmword_20AC060E0;
  a1[1] = *(_OWORD *)algn_20AC060F0;
  result = 0.0;
  a1[2] = xmmword_20AC06100;
  a1[3] = unk_20AC06110;
  return result;
}

double cva::SE3GroupStorage<double,cva::Matrix<double,4u,4u,false>>::SE3GroupStorage(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  double result;

  v3 = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  v4 = 0x100000000;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  do
  {
    v5 = *a2++;
    *(_QWORD *)(a1 + 8 * v3) = v5;
    v6 = HIDWORD(v4);
    v7 = (int)v4 < 2;
    if ((int)v4 < 2)
      v6 = 0;
    v8 = v3 + v6;
    v9 = (v4 + 1);
    v10 = v4 & 0xFFFFFFFF00000000;
    if (!v7)
      v9 = 0;
    v4 = v9 | v10;
    v3 = v8 + 1;
  }
  while (v3 != 12);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)a3;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a3 + 8);
  result = *(double *)(a3 + 16);
  *(double *)(a1 + 112) = result;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 120) = 0x3FF0000000000000;
  return result;
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  double result;

  v3 = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  v4 = 0x100000000;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  do
  {
    v5 = *a2++;
    *(_QWORD *)(a1 + 8 * v3) = v5;
    v6 = HIDWORD(v4);
    v7 = (int)v4 < 2;
    if ((int)v4 < 2)
      v6 = 0;
    v8 = v3 + v6;
    v9 = (v4 + 1);
    v10 = v4 & 0xFFFFFFFF00000000;
    if (!v7)
      v9 = 0;
    v4 = v9 | v10;
    v3 = v8 + 1;
  }
  while (v3 != 12);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)a3;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a3 + 8);
  result = *(double *)(a3 + 16);
  *(double *)(a1 + 112) = result;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 120) = 0x3FF0000000000000;
  return result;
}

uint64_t cva::SE3GroupStorage<double,cva::Matrix<double,4u,4u,false>>::T(uint64_t a1)
{
  return a1 + 96;
}

{
  return a1 + 96;
}

void cva::SE3GroupStorage<double,cva::Matrix<double,4u,4u,false>>::lplus(_OWORD *a1, __int128 *a2)
{
  __int128 v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double cosval;
  double v9;
  __double2 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _QWORD v15[2];
  float64x2_t v16[8];
  _QWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v3 = a2[1];
  v26 = *a2;
  v27 = v3;
  v28 = a2[2];
  v15[0] = &v26;
  v15[1] = 6;
  v16[5] = (float64x2_t)unk_20AC06130;
  v16[6] = (float64x2_t)xmmword_20AC06140;
  v16[7] = (float64x2_t)unk_20AC06150;
  v16[0] = (float64x2_t)xmmword_20AC060E0;
  v16[1] = *(float64x2_t *)algn_20AC060F0;
  v16[2] = (float64x2_t)xmmword_20AC06100;
  memset(&v16[3], 0, 32);
  v4 = *(double *)&v26 * *(double *)&v26
     + *((double *)&v26 + 1) * *((double *)&v26 + 1)
     + *(double *)&v27 * *(double *)&v27;
  if (v4 >= 0.0000002635)
  {
    v9 = sqrt(v4);
    v10 = __sincos_stret(v9);
    cosval = v10.__cosval;
    v7 = v10.__sinval / v9;
    v5 = 1.0 / v4 * (1.0 - v10.__cosval);
    v6 = 1.0 / v4 * (1.0 - v10.__sinval / v9);
  }
  else
  {
    v5 = 0.5 - v4 * (v4 / -720.0 + 0.0416666667);
    v6 = 0.166666667 - v4 * (v4 / -5040.0 + 0.00833333333);
    v7 = 1.0 - v4 * v6;
    cosval = 1.0 - v4 * v5;
  }
  *(double *)&v19 = v5;
  *((double *)&v19 + 1) = v6;
  *(double *)&v18 = cosval;
  *((double *)&v18 + 1) = v7;
  sub_20ABA1630((uint64_t)v15, (double *)&v18, v16);
  v17[0] = v16;
  v17[1] = a1;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  sub_20ABA17E4((double *)&v18, (uint64_t)v17);
  v11 = v23;
  a1[4] = v22;
  a1[5] = v11;
  v12 = v25;
  a1[6] = v24;
  a1[7] = v12;
  v13 = v19;
  *a1 = v18;
  a1[1] = v13;
  v14 = v21;
  a1[2] = v20;
  a1[3] = v14;
}

uint64_t sub_20ABA1630(uint64_t result, double *a2, float64x2_t *a3)
{
  double v3;
  double v4;
  double v5;
  double *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  float64x2_t *v20;
  float64x2_t *v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  float64x2_t v33;
  int8x16_t v34;
  float64x2_t v35;
  _BYTE v36[24];

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = *(double **)result;
  v7 = **(double **)result;
  v8 = v5 * v7;
  v9 = v5 * *(double *)(*(_QWORD *)result + 8);
  v10 = v5 * *(double *)(*(_QWORD *)result + 16);
  a3->f64[0] = *a2 + v8 * v7;
  a3[2].f64[1] = v3 + v9 * v6[1];
  a3[5].f64[0] = v3 + v10 * v6[2];
  v11 = v6[1];
  v12 = v8 * v11;
  v13 = v6[2];
  v14 = v8 * v13;
  v15 = v9 * v13;
  v16 = v4 * *v6;
  v17 = v4 * v11;
  v18 = v4 * v13;
  a3[2].f64[0] = v12 - v18;
  a3[4].f64[0] = v17 + v14;
  a3[4].f64[1] = v15 - v16;
  a3->f64[1] = v12 + v18;
  a3[1].f64[0] = v14 - v17;
  a3[3].f64[0] = v15 + v16;
  v19 = HIDWORD(*(_QWORD *)(result + 8));
  v20 = (float64x2_t *)&v6[-v19];
  v21 = (float64x2_t *)((char *)v20 + 8 * (v19 + 3));
  v22 = v6[1];
  v23 = v6[2];
  v24 = v21->f64[1];
  v25 = v21[1].f64[0];
  v26 = v22 * v25 - v23 * v24;
  v27 = v23 * v21->f64[0] - *v6 * v25;
  v28 = *v6 * v24 - v22 * v21->f64[0];
  *(double *)&v36[16] = v28;
  v30 = a2[2];
  v29 = a2[3];
  if (v20 == a3)
  {
    v32 = v25 + v30 * v28;
    v33 = *(float64x2_t *)(v6 + 1);
    v34.i64[1] = (uint64_t)v6[2];
    v34.i64[0] = *(uint64_t *)v6;
    *(_QWORD *)&v35.f64[0] = vdupq_laneq_s64(*(int64x2_t *)&v36[8], 1).u64[0];
    v35.f64[1] = v26;
    v31 = v29 * vmlad_n_f64(-(v33.f64[0] * v26), *v6, *(double *)&v36[8]) + v32;
    a3[6] = vaddq_f64(vaddq_f64(*v21, vmulq_n_f64(*(float64x2_t *)v36, v30)), vmulq_n_f64(vmlaq_f64(vmulq_f64(*(float64x2_t *)&v36[8], vnegq_f64((float64x2_t)vextq_s8(v34, v34, 8uLL))), v35, v33), v29));
  }
  else
  {
    a3[6].f64[0] = v21->f64[0] + v26 * v30 + v29 * (v22 * v28 - v23 * v27);
    a3[6].f64[1] = v21->f64[1] + v27 * v30 + v29 * (v6[2] * v26 - *v6 * v28);
    v31 = v21[1].f64[0] + v28 * v30 + v29 * (*v6 * v27 - v6[1] * v26);
  }
  a3[7].f64[0] = v31;
  return result;
}

float64_t sub_20ABA17E4(double *a1, uint64_t a2)
{
  float64x2_t *v3;
  double *v4;
  const double *v5;
  float64x2_t v6;
  double v7;
  double v8;
  float64x2_t v9;
  double v10;
  float64x2_t v11;
  float64x2_t v12;
  double v13;
  double v14;
  float64x2_t v15;
  double v16;
  float64x2_t v17;
  float64x2_t v18;
  double v19;
  double v20;
  float64x2_t v21;
  double v22;
  double v23;
  float64x2_t v24;
  float64x2_t v25;
  double v26;
  double v27;
  float64x2_t v28;
  float64x2_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;

  v3 = *(float64x2_t **)a2;
  if (*(double **)a2 == a1 || (v4 = *(double **)(a2 + 8), v4 == a1))
  {
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    sub_20ABA17E4(&v35);
    v30 = v40;
    *((_OWORD *)a1 + 4) = v39;
    *((_OWORD *)a1 + 5) = v30;
    v31 = v42;
    *((_OWORD *)a1 + 6) = v41;
    *((_OWORD *)a1 + 7) = v31;
    v32 = v36;
    *(_OWORD *)a1 = v35;
    *((_OWORD *)a1 + 1) = v32;
    *(_QWORD *)&v28.f64[0] = v37;
    v33 = v38;
    *((_OWORD *)a1 + 2) = v37;
    *((_OWORD *)a1 + 3) = v33;
  }
  else
  {
    v5 = *(const double **)(a2 + 8);
    v6 = vld1q_dup_f64(v5++);
    v7 = v4[2];
    v8 = v4[3];
    v9 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_f64((float64x2_t)0, v6, v3[1]), v3[3], *v5), v3[5], v7), v3[7], v8);
    *(float64x2_t *)a1 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_f64((float64x2_t)0, v6, *v3), v3[2], *v5), v3[4], v7), v3[6], v8);
    *((float64x2_t *)a1 + 1) = v9;
    v9.f64[0] = v4[4];
    v10 = v4[5];
    v11 = vmlaq_n_f64(vmlaq_n_f64((float64x2_t)0, *v3, v9.f64[0]), v3[2], v10);
    v12 = vmlaq_n_f64(vmlaq_n_f64((float64x2_t)0, v3[1], v9.f64[0]), v3[3], v10);
    v13 = v4[6];
    v14 = v4[7];
    v15 = vmlaq_n_f64(vmlaq_n_f64(v12, v3[5], v13), v3[7], v14);
    *((float64x2_t *)a1 + 2) = vmlaq_n_f64(vmlaq_n_f64(v11, v3[4], v13), v3[6], v14);
    *((float64x2_t *)a1 + 3) = v15;
    v9.f64[0] = v4[8];
    v16 = v4[9];
    v17 = vmlaq_n_f64(vmlaq_n_f64((float64x2_t)0, *v3, v9.f64[0]), v3[2], v16);
    v18 = vmlaq_n_f64(vmlaq_n_f64((float64x2_t)0, v3[1], v9.f64[0]), v3[3], v16);
    v19 = v4[10];
    v20 = v4[11];
    v21 = vmlaq_n_f64(vmlaq_n_f64(v18, v3[5], v19), v3[7], v20);
    *((float64x2_t *)a1 + 4) = vmlaq_n_f64(vmlaq_n_f64(v17, v3[4], v19), v3[6], v20);
    *((float64x2_t *)a1 + 5) = v21;
    v22 = v4[12];
    v23 = v4[13];
    v24 = vmlaq_n_f64(vmlaq_n_f64((float64x2_t)0, *v3, v22), v3[2], v23);
    v25 = vmlaq_n_f64(vmlaq_n_f64((float64x2_t)0, v3[1], v22), v3[3], v23);
    v26 = v4[14];
    v27 = v4[15];
    v28 = v3[7];
    v29 = vmlaq_n_f64(vmlaq_n_f64(v25, v3[5], v26), v28, v27);
    *((float64x2_t *)a1 + 6) = vmlaq_n_f64(vmlaq_n_f64(v24, v3[4], v26), v3[6], v27);
    *((float64x2_t *)a1 + 7) = v29;
  }
  return v28.f64[0];
}

double cva::SE3AlgebraStorage<double,cva::MatrixRef<double const,6u,1u,false>>::SE3AlgebraStorage(_QWORD *a1, uint64_t a2)
{
  double result;

  *a1 = a2;
  *(_QWORD *)&result = 6;
  a1[1] = 6;
  return result;
}

{
  double result;

  *a1 = a2;
  *(_QWORD *)&result = 6;
  a1[1] = 6;
  return result;
}

uint64_t cva::SE3AlgebraStorage<double,cva::MatrixRef<double const,6u,1u,false>>::exp@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double cosval;
  double v9;
  __double2 v10;
  double v12[4];

  *(_OWORD *)(a2 + 64) = xmmword_20AC06120;
  *(_OWORD *)(a2 + 80) = unk_20AC06130;
  *(_OWORD *)(a2 + 96) = xmmword_20AC06140;
  *(_OWORD *)(a2 + 112) = unk_20AC06150;
  *(_OWORD *)a2 = xmmword_20AC060E0;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)algn_20AC060F0;
  *(_OWORD *)(a2 + 32) = xmmword_20AC06100;
  *(_OWORD *)(a2 + 48) = unk_20AC06110;
  v4 = **(double **)a1 * **(double **)a1
     + *(double *)(*(_QWORD *)a1 + 8) * *(double *)(*(_QWORD *)a1 + 8)
     + *(double *)(*(_QWORD *)a1 + 16) * *(double *)(*(_QWORD *)a1 + 16);
  if (v4 >= 0.0000002635)
  {
    v9 = sqrt(v4);
    v10 = __sincos_stret(v9);
    cosval = v10.__cosval;
    v7 = v10.__sinval / v9;
    v5 = 1.0 / v4 * (1.0 - v10.__cosval);
    v6 = 1.0 / v4 * (1.0 - v10.__sinval / v9);
  }
  else
  {
    v5 = 0.5 - v4 * (v4 / -720.0 + 0.0416666667);
    v6 = 0.166666667 - v4 * (v4 / -5040.0 + 0.00833333333);
    v7 = 1.0 - v4 * v6;
    cosval = 1.0 - v4 * v5;
  }
  v12[2] = v5;
  v12[3] = v6;
  v12[0] = cosval;
  v12[1] = v7;
  return sub_20ABA1630(a1, v12, (float64x2_t *)a2);
}

void cva::SE3GroupStorage<double,cva::Matrix<double,4u,4u,false>>::rplus(_OWORD *a1, __int128 *a2)
{
  __int128 v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double cosval;
  double v9;
  __double2 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _QWORD v15[2];
  float64x2_t v16[8];
  _QWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v3 = a2[1];
  v26 = *a2;
  v27 = v3;
  v28 = a2[2];
  v15[0] = &v26;
  v15[1] = 6;
  v16[5] = (float64x2_t)unk_20AC06130;
  v16[6] = (float64x2_t)xmmword_20AC06140;
  v16[7] = (float64x2_t)unk_20AC06150;
  v16[0] = (float64x2_t)xmmword_20AC060E0;
  v16[1] = *(float64x2_t *)algn_20AC060F0;
  v16[2] = (float64x2_t)xmmword_20AC06100;
  memset(&v16[3], 0, 32);
  v4 = *(double *)&v26 * *(double *)&v26
     + *((double *)&v26 + 1) * *((double *)&v26 + 1)
     + *(double *)&v27 * *(double *)&v27;
  if (v4 >= 0.0000002635)
  {
    v9 = sqrt(v4);
    v10 = __sincos_stret(v9);
    cosval = v10.__cosval;
    v7 = v10.__sinval / v9;
    v5 = 1.0 / v4 * (1.0 - v10.__cosval);
    v6 = 1.0 / v4 * (1.0 - v10.__sinval / v9);
  }
  else
  {
    v5 = 0.5 - v4 * (v4 / -720.0 + 0.0416666667);
    v6 = 0.166666667 - v4 * (v4 / -5040.0 + 0.00833333333);
    v7 = 1.0 - v4 * v6;
    cosval = 1.0 - v4 * v5;
  }
  *(double *)&v19 = v5;
  *((double *)&v19 + 1) = v6;
  *(double *)&v18 = cosval;
  *((double *)&v18 + 1) = v7;
  sub_20ABA1630((uint64_t)v15, (double *)&v18, v16);
  v17[0] = a1;
  v17[1] = v16;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  sub_20ABA17E4((double *)&v18, (uint64_t)v17);
  v11 = v23;
  a1[4] = v22;
  a1[5] = v11;
  v12 = v25;
  a1[6] = v24;
  a1[7] = v12;
  v13 = v19;
  *a1 = v18;
  a1[1] = v13;
  v14 = v21;
  a1[2] = v20;
  a1[3] = v14;
}

float64x2_t cva::SE3GroupStorage<double,cva::Matrix<double,4u,4u,false>>::transform@<Q0>(uint64_t a1@<X0>, double *a2@<X1>, _QWORD *a3@<X8>)
{
  float64x2_t result;
  _QWORD v6[2];
  double *v7[2];
  double v8;
  float64x2_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v6[0] = a1;
  v6[1] = 4;
  v7[0] = (double *)v6;
  v7[1] = a2;
  v9 = 0uLL;
  v8 = 0.0;
  sub_20AB94BA0(&v8, v7);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if ((_QWORD *)a1 == a3)
    a3 = (_QWORD *)a1;
  *(double *)a3 = v8 + *(double *)(a1 + 96);
  result = vaddq_f64(v9, *(float64x2_t *)(a1 + 104));
  *(float64x2_t *)(a3 + 1) = result;
  return result;
}

double cva::SE3GroupStorage<double,cva::Matrix<double,4u,4u,false>>::inverseTransform@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, float64x2_t *a3@<X8>)
{
  double result;
  _QWORD v5[2];
  _QWORD v6[2];
  _QWORD *v7;
  uint64_t *v8[2];
  _QWORD v9[2];
  _QWORD *v10;
  uint64_t *v11[2];
  float64x2_t v12;
  double v13;
  float64x2_t v14;
  double v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v9[0] = a1;
  v9[1] = 4;
  v10 = v9;
  v11[0] = (uint64_t *)&v10;
  v11[1] = a2;
  v6[0] = a1;
  v6[1] = 4;
  v7 = v6;
  v5[0] = a1 + 96;
  v5[1] = 0xC00000004;
  v8[0] = (uint64_t *)&v7;
  v8[1] = v5;
  v12 = 0uLL;
  v13 = 0.0;
  sub_20AB94CE0((uint64_t)&v12, v11);
  v14 = 0uLL;
  v15 = 0.0;
  sub_20ABA1E10((uint64_t)&v14, v8);
  *a3 = vsubq_f64(v12, v14);
  result = v13 - v15;
  a3[1].f64[0] = v13 - v15;
  return result;
}

double sub_20ABA1E10(uint64_t a1, uint64_t **a2)
{
  uint64_t *v3;
  double *v4;
  uint64_t v5;
  double *v6;
  uint64_t v7;
  double result;
  __int128 v9;
  uint64_t v10;

  v3 = a2[1];
  v4 = (double *)*v3;
  if (*v3 - 8 * *((unsigned int *)v3 + 3) == a1)
  {
    v9 = 0uLL;
    v10 = 0;
    sub_20ABA1E10(&v9);
    result = *(double *)&v9;
    *(_OWORD *)a1 = v9;
    *(_QWORD *)(a1 + 16) = v10;
  }
  else
  {
    v5 = **a2;
    v6 = *(double **)v5;
    v7 = *(unsigned int *)(v5 + 8);
    *(double *)a1 = v6[1] * v4[1] + *v6 * *v4 + 0.0 + v6[2] * v4[2];
    *(double *)(a1 + 8) = v6[v7 + 1] * v4[1] + v6[v7] * *v4 + 0.0 + v6[(v7 + 2)] * v4[2];
    result = v6[(2 * v7) + 1] * v4[1]
           + v6[(2 * v7)] * *v4
           + 0.0
           + v6[(2 * v7 + 2)] * v4[2];
    *(double *)(a1 + 16) = result;
  }
  return result;
}

void cva::SE3GroupStorage<double,cva::Matrix<double,4u,4u,false>>::transformJacobian(double *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  double v10;
  uint64_t v11;
  unint64_t v12;
  double v13;
  double v14;
  double v15;
  double *v16;
  double v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t i;
  unint64_t v25;
  BOOL v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD v30[9];

  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  if (a1 == (double *)a2)
  {
    v11 = 0;
    v12 = 0;
    v30[0] = 0;
    v14 = a1[1];
    v13 = a1[2];
    v15 = *a1;
    *(double *)&v30[1] = -v13;
    *(double *)&v30[2] = v14;
    *(double *)&v30[3] = v13;
    v30[4] = 0;
    *(double *)&v30[5] = -v15;
    *(double *)&v30[6] = -v14;
    *(double *)&v30[7] = v15;
    v30[8] = 0;
    v16 = (double *)v30;
    do
    {
      v17 = *v16++;
      a1[v11] = v17;
      v18 = HIDWORD(v12);
      v19 = (int)v12 < 2;
      if ((int)v12 < 2)
        v18 = 0;
      v20 = v11 + v18;
      v21 = (v12 + 1);
      v22 = v12 & 0xFFFFFFFF00000000;
      if (!v19)
        v21 = 0;
      v12 = v21 | v22;
      v11 = v20 + 1;
    }
    while (v11 != 9);
  }
  else
  {
    v2 = 0;
    v3 = 0;
    v4 = 0;
    do
    {
      v10 = 0.0;
      if (HIDWORD(v4) != (_DWORD)v4)
        v10 = a1[dword_20AC06190[(HIDWORD(v4) + 4 * v4)]]
            * dbl_20AC061C0[(HIDWORD(v4) + 4 * v4)];
      *(double *)(a2 + 8 * v2) = v10;
      if ((int)v4 >= 2)
        v4 = (v4 & 0xFFFFFFFF00000000) + 0x100000000;
      else
        v4 = (v4 + 1) | v4 & 0xFFFFFFFF00000000;
      v5 = HIDWORD(v3);
      v6 = (int)v3 < 2;
      if ((int)v3 < 2)
        v5 = 0;
      v7 = v2 + v5;
      v8 = (v3 + 1);
      v9 = v3 & 0xFFFFFFFF00000000;
      if (!v6)
        v8 = 0;
      v3 = v8 | v9;
      v2 = v7 + 1;
    }
    while (v2 != 9);
  }
  v23 = 0;
  for (i = 9; i != 18; i = v27 + 1)
  {
    *(_QWORD *)(a2 + 8 * i) = 0;
    v25 = HIDWORD(v23);
    v26 = (int)v23 < 2;
    if ((int)v23 < 2)
      v25 = 0;
    v27 = i + v25;
    v28 = (v23 + 1);
    v29 = v23 & 0xFFFFFFFF00000000;
    if (!v26)
      v28 = 0;
    v23 = v28 | v29;
  }
  *(_QWORD *)(a2 + 72) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 104) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 136) = 0x3FF0000000000000;
}

uint64_t cva::SE3GroupStorage<double,cva::Matrix<double,4u,4u,false>>::inverseTransformJacobian@<X0>(double *a1@<X0>, double *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double *v24;
  uint64_t v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD v32[2];
  double v33;
  uint64_t v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;

  v3 = 0;
  v4 = 0;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[4];
  v8 = a1[5];
  v9 = a1[6];
  v10 = a1[8];
  v11 = a1[9];
  v12 = a1[10];
  v14 = a2[1];
  v13 = a2[2];
  v15 = v5 * v13 - v6 * v14;
  *(double *)&v16 = v8 * v13 - v9 * v14;
  v17 = v11 * v13 - v12 * v14;
  v18 = v6 * *a2 - *a1 * v13;
  v19 = v9 * *a2 - v7 * v13;
  v20 = v12 * *a2 - v10 * v13;
  v21 = *a1 * v14 - v5 * *a2;
  v22 = v7 * v14 - v8 * *a2;
  v23 = v10 * v14 - v11 * *a2;
  v33 = v15;
  v34 = v16;
  v35 = v17;
  v36 = v18;
  v37 = v19;
  v38 = v20;
  v39 = v21;
  v40 = v22;
  v41 = v23;
  v24 = &v33;
  do
  {
    v25 = *(_QWORD *)v24++;
    *((_QWORD *)a3 + v3) = v25;
    v26 = HIDWORD(v4);
    v27 = (int)v4 < 2;
    if ((int)v4 < 2)
      v26 = 0;
    v28 = v3 + v26;
    v29 = (v4 + 1);
    v30 = v4 & 0xFFFFFFFF00000000;
    if (!v27)
      v29 = 0;
    v4 = v29 | v30;
    v3 = v28 + 1;
  }
  while (v3 != 9);
  v33 = *(double *)&a1;
  v34 = 4;
  v32[0] = (char *)a3 + 72;
  v32[1] = 0x900000003;
  return sub_20ABA21B0((uint64_t)v32, (uint64_t)&v33);
}

uint64_t sub_20ABA21B0(uint64_t result, uint64_t a2)
{
  double *v2;
  double *v3;
  int v4;
  unint64_t v5;
  double *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  BOOL v10;
  double *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  int v20;
  double *v21;
  unint64_t v22;
  double *v23;
  uint64_t v24;
  unint64_t v25;
  BOOL v26;
  double *v27;
  uint64_t v28;
  unint64_t v29;
  double v30[9];

  v2 = *(double **)result;
  v3 = *(double **)a2;
  if (*(_QWORD *)a2 - 8 * *(unsigned int *)(a2 + 12) == *(_QWORD *)result - 8 * *(unsigned int *)(result + 12))
  {
    v14 = *(unsigned int *)(a2 + 8);
    v15 = v3[1];
    v16 = -v3[v14];
    v17 = v3[(2 * v14)];
    v30[0] = -*v3;
    v30[1] = v16;
    v30[2] = -v17;
    v30[3] = -v15;
    v18 = -v3[(2 * (_DWORD)v14) | 1u];
    v30[4] = -v3[(v14 + 1)];
    v30[5] = v18;
    v19 = -v3[(v14 + 2)];
    v30[6] = -v3[2];
    v30[7] = v19;
    v30[8] = -v3[(2 * v14 + 2)];
    v20 = *(_DWORD *)(result + 8);
    if (v20)
    {
      v21 = &v2[3 * v20];
      v22 = (unint64_t)(v20 - 3) << 32;
      v23 = v30;
      do
      {
        v24 = *(_QWORD *)v23++;
        *(_QWORD *)v2 = v24;
        v25 = HIDWORD(v22);
        v26 = (int)v22 < 2;
        if ((int)v22 < 2)
          v25 = 0;
        v27 = &v2[v25];
        v28 = (v22 + 1);
        v29 = v22 & 0xFFFFFFFF00000000;
        if (!v26)
          v28 = 0;
        v22 = v28 | v29;
        v2 = v27 + 1;
      }
      while (v2 != v21);
    }
  }
  else
  {
    v4 = *(_DWORD *)(result + 8);
    if (v4)
    {
      v5 = 0;
      v6 = &v2[3 * v4];
      v7 = (unint64_t)(v4 - 3) << 32;
      v8 = *(_DWORD *)(a2 + 8);
      do
      {
        *v2 = -v3[(HIDWORD(v5) + v8 * v5)];
        if ((int)v5 >= 2)
          v5 = (v5 & 0xFFFFFFFF00000000) + 0x100000000;
        else
          v5 = (v5 + 1) | v5 & 0xFFFFFFFF00000000;
        v9 = HIDWORD(v7);
        v10 = (int)v7 < 2;
        if ((int)v7 < 2)
          v9 = 0;
        v11 = &v2[v9];
        v12 = (v7 + 1);
        v13 = v7 & 0xFFFFFFFF00000000;
        if (!v10)
          v12 = 0;
        v7 = v12 | v13;
        v2 = v11 + 1;
      }
      while (v2 != v6);
    }
  }
  return result;
}

double cva::SE3GroupStorage<double,cva::Matrix<double,4u,4u,false>>::log@<D0>(float64x2_t *a1@<X0>, uint64_t a2@<X8>)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  __double2 v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  float64x2_t v18;
  float64x2_t v24;
  int8x16_t v25;
  float64x2_t v26;
  double result;
  double v28;
  float64x2_t v29;
  double v30;

  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  sub_20AB947E0(a1->f64, 4u, (double *)a2);
  v5 = *(double *)a2;
  v4 = *(double *)(a2 + 8);
  v6 = *(double *)(a2 + 16);
  v7 = v5 * v5 + v4 * v4 + v6 * v6;
  if (v7 >= 0.0000002635)
  {
    v11 = sqrt(v7);
    v28 = *(double *)a2;
    v12 = __sincos_stret(v11);
    v5 = v28;
    v10 = v12.__sinval / v11;
    v8 = 1.0 / v7 * (1.0 - v12.__cosval);
    v9 = 1.0 / v7 * (1.0 - v12.__sinval / v11);
  }
  else
  {
    v8 = 0.5 - v7 * (v7 / -720.0 + 0.0416666667);
    v9 = 0.166666667 - v7 * (v7 / -5040.0 + 0.00833333333);
    v10 = 1.0 - v7 * v9;
  }
  if (v7 >= 2.775e-15)
  {
    if (v7 <= 9.0)
      v13 = -(v9 - v8 * 0.5) / v10;
    else
      v13 = (v8 + v10 * -0.5) / (v7 * v8);
  }
  else
  {
    v13 = v7 * 0.00138888889 + 0.0833333333 + v7 * 0.0000330687831;
  }
  v14 = a1[6].f64[1];
  v15 = a1[7].f64[0];
  v16 = a1[6].f64[0];
  v29.f64[0] = v4 * v15 - v6 * v14;
  v29.f64[1] = v6 * v16 - v5 * v15;
  v30 = v5 * v14 - v4 * v16;
  v17 = v15 + v30 * -0.5;
  v18 = *(float64x2_t *)(a2 + 8);
  __asm { FMOV            V7.2D, #-0.5 }
  v24 = vaddq_f64(a1[6], vmulq_f64(v29, _Q7));
  v25.i64[1] = *(_QWORD *)(a2 + 16);
  *(double *)v25.i64 = v5;
  *(_QWORD *)&_Q7.f64[0] = vdupq_laneq_s64(*(int64x2_t *)((char *)&v29 + 8), 1).u64[0];
  _Q7.f64[1] = v29.f64[0];
  v26 = vaddq_f64(v24, vmulq_n_f64(vmlaq_f64(vmulq_f64(*(float64x2_t *)((char *)&v29 + 8), vnegq_f64((float64x2_t)vextq_s8(v25, v25, 8uLL))), _Q7, v18), v13));
  result = v13 * vmlad_n_f64(-(v18.f64[0] * v29.f64[0]), v5, v29.f64[1]) + v17;
  *(float64x2_t *)(a2 + 24) = v26;
  *(double *)(a2 + 40) = result;
  return result;
}

{
  return __ZNK3cva15SE3GroupStorageIdNS_6MatrixIdLj4ELj4ELb0EEEE3logEv(a1, a2);
}

double cva::SE3AlgebraStorage<double,cva::Matrix<double,6u,1u,false>>::SE3AlgebraStorage(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

{
  double result;

  result = 0.0;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

void cva::SE3GroupStorage<double,cva::Matrix<double,4u,4u,false>>::logJacobian(double *a1@<X0>, uint64_t a2@<X8>)
{
  _OWORD *v4;
  double v5;
  double v6;
  double v8;
  double v9;
  double v10;
  double v12;
  double v13;
  double v14;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  __double2 v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v37;
  double v38;
  double v39;
  double v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  double v49;
  uint64_t v50;
  unint64_t v51;
  float64x2_t *v52;
  uint64_t v53;
  float64_t v54;
  unint64_t v55;
  BOOL v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t i;
  unint64_t v62;
  BOOL v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  double v67;
  float64x2_t v68;
  _QWORD v69[2];
  float64_t *v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  float64_t **v80;
  uint64_t v81;
  float64x2_t v82[3];
  float64x2_t v83;
  double v84[4];
  float64x2_t v85;
  double v86;
  __int128 v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;

  *(_QWORD *)(a2 + 328) = 0;
  *(_OWORD *)(a2 + 248) = 0u;
  *(_OWORD *)(a2 + 232) = 0u;
  *(_OWORD *)(a2 + 216) = 0u;
  *(_OWORD *)(a2 + 200) = 0u;
  *(_OWORD *)(a2 + 184) = 0u;
  *(_OWORD *)(a2 + 168) = 0u;
  *(_OWORD *)(a2 + 152) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  v4 = (_OWORD *)(a2 + 24);
  *(_OWORD *)(a2 + 40) = 0u;
  v4[17] = 0u;
  v4[18] = 0u;
  v4[15] = 0u;
  v4[16] = 0u;
  memset(v84, 0, sizeof(v84));
  v83 = 0u;
  memset(v82, 0, sizeof(v82));
  sub_20AB94F20(a1, 4u, v82[0].f64, &v82[1].f64[1]);
  v6 = v82[0].f64[1];
  v5 = v82[0].f64[0];
  *(float64_t *)a2 = v82[0].f64[0];
  *(double *)(a2 + 8) = v6;
  _D11 = v82[1].f64[0];
  *(float64_t *)(a2 + 16) = v82[1].f64[0];
  v80 = (float64_t **)(a1 + 12);
  v81 = 0xC00000004;
  v71 = COERCE_DOUBLE((float64x2_t *)&v82[1].f64[1]);
  v72 = COERCE_DOUBLE(&v80);
  if ((float64x2_t *)&v82[1].f64[1] == (float64x2_t *)a2 || a1 == (double *)a2)
  {
    v85 = 0uLL;
    v86 = 0.0;
    sub_20ABA29D8((uint64_t)&v85, (uint64_t)&v71);
    _Q19 = v85;
    v12 = v86;
  }
  else
  {
    v8 = a1[12];
    v9 = a1[13];
    v10 = a1[14];
    _Q19 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64((float64x2_t)0, *(float64x2_t *)((char *)&v82[1] + 8), v8), v83, v9), *(float64x2_t *)&v84[1], v10);
    v12 = v82[2].f64[1] * v8 + 0.0 + v84[0] * v9 + v84[3] * v10;
  }
  *(float64x2_t *)(a2 + 24) = _Q19;
  *(double *)(a2 + 40) = v12;
  v13 = v5 * v5;
  v14 = v5 * v5 + v6 * v6 + _D11 * _D11;
  if (v14 >= 0.0000002635)
  {
    v67 = v5;
    v20 = sqrt(v14);
    v68 = _Q19;
    v21 = __sincos_stret(v20);
    _Q19 = v68;
    v22 = v21.__sinval / v20;
    v5 = v67;
    _D0 = 1.0 / v14 * (1.0 - v21.__cosval);
    v16 = 1.0 / v14 * (1.0 - v22);
    v17 = v16 - _D0;
    v18 = 1.0 / v14 * (v22 + _D0 * -2.0);
    v19 = 1.0 / v14 * (_D0 + v16 * -3.0);
  }
  else
  {
    _D0 = 0.5 - v14 * (v14 / -720.0 + 0.0416666667);
    v16 = 0.166666667 - v14 * (v14 / -5040.0 + 0.00833333333);
    v17 = v14 * (v14 * -0.00119047619 + 0.0333333333) + -0.333333333;
    v18 = v14 * (v14 * -0.000148809524 + 0.00555555556) + -0.0833333333;
    v19 = v14 * (v14 * -0.0000165343915 + 0.000793650794) + -0.0166666667;
  }
  v23 = 0;
  v24 = a2 + 48;
  v25 = vmuld_lane_f64(v6, _Q19, 1);
  v26 = v5 * _Q19.f64[0] + v25 + _D11 * v12;
  v27 = (v17 + v19 * v13) * v26 + (v16 + v16) * (v5 * _Q19.f64[0]);
  v28 = (v17 + v19 * (v6 * v6)) * v26 + (v16 + v16) * v25;
  v79 = (v17 + v19 * (_D11 * _D11)) * v26 + (v16 + v16) * (_D11 * v12);
  v29 = v19 * v26;
  v30 = v6 * (v5 * (v19 * v26)) + v16 * vmlad_n_f64(vmuld_lane_f64(v5, _Q19, 1), v6, _Q19.f64[0]);
  v31 = _D11 * (v5 * v29) + v16 * vmlad_n_f64(v5 * v12, _D11, _Q19.f64[0]);
  __asm { FMLA            D17, D11, V19.D[1] }
  v37 = _D11 * (v6 * v29) + v16 * _D17;
  v38 = v18 * v26;
  v39 = _D11 * v38 + _D0 * v12;
  __asm { FMLA            D16, D0, V19.D[1] }
  v41 = vmlad_n_f64(v5 * v38, _D0, _Q19.f64[0]);
  v71 = v27;
  v72 = v39 + v30;
  v73 = v31 - _D16;
  v74 = v30 - v39;
  v77 = _D16 + v31;
  v78 = v37 - v41;
  v75 = v28;
  v76 = v41 + v37;
  v42 = 0x300000000;
  v43 = 3;
  do
  {
    *(float64_t *)(v24 + 8 * v23) = v82[0].f64[v43];
    v44 = HIDWORD(v42);
    v45 = (int)v42 < 2;
    if ((int)v42 < 2)
      v44 = 0;
    v46 = v23 + v44;
    v47 = (v42 + 1);
    v48 = v42 & 0xFFFFFFFF00000000;
    if (!v45)
      v47 = 0;
    v42 = v47 | v48;
    v23 = v46 + 1;
    ++v43;
  }
  while (v23 != 18);
  v85 = *(float64x2_t *)(a2 + 48);
  v49 = *(double *)(a2 + 64);
  v87 = *(_OWORD *)(a2 + 96);
  v50 = *(_QWORD *)(a2 + 112);
  v86 = v49;
  v88 = v50;
  v89 = *(_OWORD *)(a2 + 144);
  v51 = 0x300000000;
  v52 = &v85;
  v53 = 21;
  v90 = *(_QWORD *)(a2 + 160);
  do
  {
    v54 = v52->f64[0];
    v52 = (float64x2_t *)((char *)v52 + 8);
    *(float64_t *)(v24 + 8 * v53) = v54;
    v55 = HIDWORD(v51);
    v56 = (int)v51 < 2;
    if ((int)v51 < 2)
      v55 = 0;
    v57 = v53 + v55;
    v58 = (v51 + 1);
    v59 = v51 & 0xFFFFFFFF00000000;
    if (!v56)
      v58 = 0;
    v51 = v58 | v59;
    v53 = v57 + 1;
  }
  while (v53 != 39);
  v80 = &v70;
  v81 = (uint64_t)&v71;
  *(_QWORD *)&v85.f64[0] = &v80;
  *(_QWORD *)&v85.f64[1] = &v82[1].f64[1];
  v69[0] = a2 + 72;
  v69[1] = 0x300000006;
  v70 = &v82[1].f64[1];
  sub_20ABA2AB4((uint64_t)v69, (uint64_t *)&v85);
  v60 = 0x300000000;
  for (i = 18; i != 36; i = v64 + 1)
  {
    *(_QWORD *)(v24 + 8 * i) = 0;
    v62 = HIDWORD(v60);
    v63 = (int)v60 < 2;
    if ((int)v60 < 2)
      v62 = 0;
    v64 = i + v62;
    v65 = (v60 + 1);
    v66 = v60 & 0xFFFFFFFF00000000;
    if (!v63)
      v65 = 0;
    v60 = v65 | v66;
  }
}

double sub_20ABA29D8(uint64_t a1, uint64_t a2)
{
  double *v3;
  uint64_t v4;
  double *v5;
  double result;
  __int128 v7;
  uint64_t v8;

  v3 = *(double **)a2;
  if (*(_QWORD *)a2 == a1
    || (v4 = *(_QWORD *)(a2 + 8), v5 = *(double **)v4, *(_QWORD *)v4 - 8 * *(unsigned int *)(v4 + 12) == a1))
  {
    v7 = 0uLL;
    v8 = 0;
    sub_20ABA29D8(&v7);
    result = *(double *)&v7;
    *(_OWORD *)a1 = v7;
    *(_QWORD *)(a1 + 16) = v8;
  }
  else
  {
    *(double *)a1 = *v3 * *v5 + 0.0 + v3[3] * v5[1] + v3[6] * v5[2];
    *(double *)(a1 + 8) = v3[1] * *v5 + 0.0 + v3[4] * v5[1] + v3[7] * v5[2];
    result = v3[2] * *v5 + 0.0 + v3[5] * v5[1] + v3[8] * v5[2];
    *(double *)(a1 + 16) = result;
  }
  return result;
}

void sub_20ABA2AB4(uint64_t a1, uint64_t *a2)
{
  double *v3;
  double *v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double *v16;
  double *v17;
  int v18;
  double *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  BOOL v25;
  double *v26;
  uint64_t v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  double v33;

  v3 = (double *)a2[1];
  v4 = *(double **)a1;
  if (v3 == (double *)(*(_QWORD *)a1 - 8 * *(unsigned int *)(a1 + 12)))
  {
    v33 = 0.0;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    sub_20ABA2C94((uint64_t)&v29, a2);
    v18 = *(_DWORD *)(a1 + 8);
    if (v18)
    {
      v19 = *(double **)a1;
      v20 = *(_QWORD *)a1 + 8 * (3 * v18);
      v21 = (unint64_t)(v18 - 3) << 32;
      v22 = (uint64_t *)&v29;
      do
      {
        v23 = *v22++;
        *(_QWORD *)v19 = v23;
        v24 = HIDWORD(v21);
        v25 = (int)v21 < 2;
        if ((int)v21 < 2)
          v24 = 0;
        v26 = &v19[v24];
        v27 = (v21 + 1);
        v28 = v21 & 0xFFFFFFFF00000000;
        if (!v25)
          v27 = 0;
        v21 = v27 | v28;
        v19 = v26 + 1;
      }
      while (v19 != (double *)v20);
    }
  }
  else
  {
    v5 = *a2;
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v33 = 0.0;
    sub_20ABA2E04((uint64_t)&v29, v5);
    v6 = *(unsigned int *)(a1 + 8);
    v7 = *(double *)&v29;
    v8 = *((double *)&v30 + 1);
    v9 = *(double *)&v32;
    *v4 = *(double *)&v29 * *v3 + 0.0 + *((double *)&v30 + 1) * v3[1] + *(double *)&v32 * v3[2];
    v10 = *((double *)&v29 + 1);
    v11 = *(double *)&v31;
    v12 = *((double *)&v32 + 1);
    v4[1] = *((double *)&v29 + 1) * *v3 + 0.0 + *(double *)&v31 * v3[1] + *((double *)&v32 + 1) * v3[2];
    v13 = *(double *)&v30;
    v14 = *((double *)&v31 + 1);
    v15 = v33;
    v4[2] = *(double *)&v30 * *v3 + 0.0 + *((double *)&v31 + 1) * v3[1] + v33 * v3[2];
    v16 = &v4[v6];
    *v16 = v7 * v3[3] + 0.0 + v8 * v3[4] + v9 * v3[5];
    v16[1] = v10 * v3[3] + 0.0 + v11 * v3[4] + v12 * v3[5];
    v16[2] = v13 * v3[3] + 0.0 + v14 * v3[4] + v15 * v3[5];
    v17 = &v4[(2 * v6)];
    *v17 = v7 * v3[6] + 0.0 + v8 * v3[7] + v9 * v3[8];
    v17[1] = v10 * v3[6] + 0.0 + v11 * v3[7] + v12 * v3[8];
    v17[2] = v13 * v3[6] + 0.0 + v14 * v3[7] + v15 * v3[8];
  }
}

__n128 sub_20ABA2C94(uint64_t a1, uint64_t *a2)
{
  double *v3;
  uint64_t v4;
  __int128 v5;
  __n128 v6;
  __int128 v7;
  __int128 v8;
  double v9;
  __n128 result;
  __int128 v11;
  __int128 v12;
  __n128 v13;
  __int128 v14;
  __int128 v15;
  double v16;

  v3 = (double *)a2[1];
  if (v3 == (double *)a1)
  {
    v16 = 0.0;
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    sub_20ABA2C94(&v12);
    v11 = v15;
    *(_OWORD *)(a1 + 32) = v14;
    *(_OWORD *)(a1 + 48) = v11;
    *(double *)(a1 + 64) = v16;
    result = v13;
    *(_OWORD *)a1 = v12;
    *(__n128 *)(a1 + 16) = result;
  }
  else
  {
    v4 = *a2;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v16 = 0.0;
    sub_20ABA2E04((uint64_t)&v12, v4);
    v5 = v12;
    v6 = v13;
    v7 = v15;
    *(double *)a1 = *(double *)&v12 * *v3 + 0.0 + v13.n128_f64[1] * v3[1] + *(double *)&v15 * v3[2];
    v8 = v14;
    *(double *)(a1 + 8) = *((double *)&v5 + 1) * *v3 + 0.0 + *(double *)&v14 * v3[1] + *((double *)&v7 + 1) * v3[2];
    v9 = v16;
    *(double *)(a1 + 16) = v6.n128_f64[0] * *v3 + 0.0 + *((double *)&v8 + 1) * v3[1] + v16 * v3[2];
    *(double *)(a1 + 24) = *(double *)&v5 * v3[3] + 0.0 + v6.n128_f64[1] * v3[4] + *(double *)&v7 * v3[5];
    *(double *)(a1 + 32) = *((double *)&v5 + 1) * v3[3] + 0.0 + *(double *)&v8 * v3[4] + *((double *)&v7 + 1) * v3[5];
    *(double *)(a1 + 40) = v6.n128_f64[0] * v3[3] + 0.0 + *((double *)&v8 + 1) * v3[4] + v9 * v3[5];
    *(double *)(a1 + 48) = *(double *)&v5 * v3[6] + 0.0 + v6.n128_f64[1] * v3[7] + *(double *)&v7 * v3[8];
    *(double *)(a1 + 56) = *((double *)&v5 + 1) * v3[6] + 0.0 + *(double *)&v8 * v3[7] + *((double *)&v7 + 1) * v3[8];
    result.n128_f64[0] = v6.n128_f64[0] * v3[6] + 0.0 + *((double *)&v8 + 1) * v3[7] + v9 * v3[8];
    *(_QWORD *)(a1 + 64) = result.n128_u64[0];
  }
  return result;
}

__n128 sub_20ABA2E04(uint64_t a1, uint64_t a2)
{
  double *v3;
  double *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  __n128 result;
  __int128 v15;
  __int128 v16;
  __n128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v3 = *(double **)(a2 + 8);
  if (v3 == (double *)a1)
  {
    v20 = 0;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    sub_20ABA2E04(&v16);
    v15 = v19;
    *(_OWORD *)(a1 + 32) = v18;
    *(_OWORD *)(a1 + 48) = v15;
    *(_QWORD *)(a1 + 64) = v20;
    result = v17;
    *(_OWORD *)a1 = v16;
    *(__n128 *)(a1 + 16) = result;
  }
  else
  {
    v4 = **(double ***)a2;
    v5 = *v4;
    v6 = v4[1];
    v7 = v4[2];
    v8 = v4[3];
    v9 = v4[4];
    v10 = v4[5];
    v11 = v4[6];
    v12 = v4[7];
    v13 = v4[8];
    *(double *)a1 = 0.0 - *v4 * *v3 - v8 * v3[1] - v11 * v3[2];
    *(double *)(a1 + 8) = 0.0 - v6 * *v3 - v9 * v3[1] - v12 * v3[2];
    *(double *)(a1 + 16) = 0.0 - v7 * *v3 - v10 * v3[1] - v13 * v3[2];
    *(double *)(a1 + 24) = 0.0 - v5 * v3[3] - v8 * v3[4] - v11 * v3[5];
    *(double *)(a1 + 32) = 0.0 - v6 * v3[3] - v9 * v3[4] - v12 * v3[5];
    *(double *)(a1 + 40) = 0.0 - v7 * v3[3] - v10 * v3[4] - v13 * v3[5];
    *(double *)(a1 + 48) = 0.0 - v5 * v3[6] - v8 * v3[7] - v11 * v3[8];
    *(double *)(a1 + 56) = 0.0 - v6 * v3[6] - v9 * v3[7] - v12 * v3[8];
    result.n128_f64[0] = 0.0 - v7 * v3[6] - v10 * v3[7] - v13 * v3[8];
    *(_QWORD *)(a1 + 64) = result.n128_u64[0];
  }
  return result;
}

void cva::SE3GroupStorage<double,cva::Matrix<double,4u,4u,false>>::inverse(double *a1@<X0>, uint64_t a2@<X8>)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  _QWORD v11[2];
  _QWORD v12[2];
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  __int128 v16;
  double v17;

  *(_OWORD *)(a2 + 64) = xmmword_20AC06120;
  *(_OWORD *)(a2 + 80) = unk_20AC06130;
  *(_OWORD *)(a2 + 96) = xmmword_20AC06140;
  *(_OWORD *)(a2 + 112) = unk_20AC06150;
  *(_OWORD *)a2 = xmmword_20AC060E0;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)algn_20AC060F0;
  *(_OWORD *)(a2 + 32) = xmmword_20AC06100;
  *(_OWORD *)(a2 + 48) = unk_20AC06110;
  *(_QWORD *)&v16 = a1;
  *((_QWORD *)&v16 + 1) = 4;
  v14 = (uint64_t *)a2;
  v15 = 4;
  sub_20ABA306C((uint64_t)&v14, (uint64_t)&v16);
  v12[0] = a2;
  v12[1] = 4;
  v13 = v12;
  v11[0] = a1 + 12;
  v11[1] = 0xC00000004;
  v14 = (uint64_t *)&v13;
  v15 = (uint64_t)v11;
  if (a1 == (double *)a2)
  {
    v16 = 0uLL;
    v17 = 0.0;
    sub_20ABA31B4((uint64_t)&v16, &v14);
    *(_OWORD *)(a2 + 96) = v16;
    v10 = v17;
  }
  else
  {
    v4 = *(double *)(a2 + 16);
    v5 = *(double *)(a2 + 48);
    v6 = *(double *)(a2 + 80);
    v7 = a1[12];
    v8 = a1[13];
    v9 = a1[14];
    *(float64x2_t *)(a2 + 96) = vmlsq_lane_f64(vmlsq_lane_f64(vmlsq_lane_f64((float64x2_t)0, *(float64x2_t *)a2, v7, 0), *(float64x2_t *)(a2 + 32), v8, 0), *(float64x2_t *)(a2 + 64), v9, 0);
    v10 = 0.0 - v4 * v7 - v5 * v8 - v6 * v9;
  }
  *(double *)(a2 + 112) = v10;
}

uint64_t sub_20ABA306C(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  int v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  BOOL v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD v30[9];

  v2 = *(_QWORD **)result;
  v3 = *(_QWORD **)a2;
  if (*(_QWORD *)a2 - 8 * *(unsigned int *)(a2 + 12) == *(_QWORD *)result - 8 * *(unsigned int *)(result + 12))
  {
    v14 = *(unsigned int *)(a2 + 8);
    v15 = v3[v14];
    v16 = v3[1];
    v30[0] = *v3;
    v30[1] = v15;
    v17 = v3[(v14 + 1)];
    v30[2] = v3[(2 * v14)];
    v30[3] = v16;
    v18 = v3[(2 * (_DWORD)v14) | 1u];
    v30[4] = v17;
    v30[5] = v18;
    v19 = v3[(v14 + 2)];
    v30[6] = v3[2];
    v30[7] = v19;
    v30[8] = v3[(2 * v14 + 2)];
    v20 = *(_DWORD *)(result + 8);
    if (v20)
    {
      v21 = &v2[3 * v20];
      v22 = (unint64_t)(v20 - 3) << 32;
      v23 = v30;
      do
      {
        v24 = *v23++;
        *v2 = v24;
        v25 = HIDWORD(v22);
        v26 = (int)v22 < 2;
        if ((int)v22 < 2)
          v25 = 0;
        v27 = &v2[v25];
        v28 = (v22 + 1);
        v29 = v22 & 0xFFFFFFFF00000000;
        if (!v26)
          v28 = 0;
        v22 = v28 | v29;
        v2 = v27 + 1;
      }
      while (v2 != v21);
    }
  }
  else
  {
    v4 = *(_DWORD *)(result + 8);
    if (v4)
    {
      v5 = 0;
      v6 = &v2[3 * v4];
      v7 = (unint64_t)(v4 - 3) << 32;
      v8 = *(_DWORD *)(a2 + 8);
      do
      {
        *v2 = v3[(HIDWORD(v5) + v8 * v5)];
        if ((int)v5 >= 2)
          v5 = (v5 & 0xFFFFFFFF00000000) + 0x100000000;
        else
          v5 = (v5 + 1) | v5 & 0xFFFFFFFF00000000;
        v9 = HIDWORD(v7);
        v10 = (int)v7 < 2;
        if ((int)v7 < 2)
          v9 = 0;
        v11 = &v2[v9];
        v12 = (v7 + 1);
        v13 = v7 & 0xFFFFFFFF00000000;
        if (!v10)
          v12 = 0;
        v7 = v12 | v13;
        v2 = v11 + 1;
      }
      while (v2 != v6);
    }
  }
  return result;
}

double sub_20ABA31B4(uint64_t a1, uint64_t **a2)
{
  uint64_t *v3;
  double *v4;
  uint64_t v5;
  double *v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  double *v11;
  double v12;
  double v13;
  double v14;
  double *v15;
  double v16;
  double v17;
  double result;
  __int128 v19;
  uint64_t v20;

  v3 = a2[1];
  v4 = (double *)*v3;
  if (*v3 - 8 * *((unsigned int *)v3 + 3) == a1)
  {
    v19 = 0uLL;
    v20 = 0;
    sub_20ABA31B4(&v19);
    result = *(double *)&v19;
    *(_OWORD *)a1 = v19;
    *(_QWORD *)(a1 + 16) = v20;
  }
  else
  {
    v5 = **a2;
    v6 = *(double **)v5;
    v7 = **(double **)v5;
    v8 = *(double *)(*(_QWORD *)v5 + 8);
    v9 = *(double *)(*(_QWORD *)v5 + 16);
    v10 = (*(_DWORD *)(v5 + 8) - 3);
    v11 = &v6[v10];
    v12 = v11[3];
    v13 = v11[4];
    v11 += 3;
    v14 = v11[2];
    v15 = &v11[v10];
    v16 = v15[4];
    v17 = v15[5];
    *(double *)a1 = 0.0 - v7 * *v4 - v12 * v4[1] - v15[3] * v4[2];
    *(double *)(a1 + 8) = 0.0 - v8 * *v4 - v13 * v4[1] - v16 * v4[2];
    result = 0.0 - v9 * *v4 - v14 * v4[1] - v17 * v4[2];
    *(double *)(a1 + 16) = result;
  }
  return result;
}

double *cva::SE3GroupStorage<double,cva::Matrix<double,4u,4u,false>>::adjoint@<X0>(double *result@<X0>, double *a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  double *v5;
  unint64_t v6;
  BOOL v7;
  double *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __int128 v16;
  double v17;
  __int128 v18;
  double v19;
  __int128 v20;
  double v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  double v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  double v34;
  unint64_t v35;
  BOOL v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  unint64_t v54;
  uint64_t *v55;
  uint64_t i;
  double v57;
  unint64_t v58;
  BOOL v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t j;
  unint64_t v65;
  BOOL v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  __int128 v70;
  double v71;
  __int128 v72;
  double v73;
  __int128 v74;
  double v75;

  *((_OWORD *)a2 + 16) = 0u;
  *((_OWORD *)a2 + 17) = 0u;
  *((_OWORD *)a2 + 14) = 0u;
  *((_OWORD *)a2 + 15) = 0u;
  *((_OWORD *)a2 + 12) = 0u;
  *((_OWORD *)a2 + 13) = 0u;
  *((_OWORD *)a2 + 10) = 0u;
  *((_OWORD *)a2 + 11) = 0u;
  *((_OWORD *)a2 + 8) = 0u;
  *((_OWORD *)a2 + 9) = 0u;
  *((_OWORD *)a2 + 6) = 0u;
  *((_OWORD *)a2 + 7) = 0u;
  *((_OWORD *)a2 + 4) = 0u;
  *((_OWORD *)a2 + 5) = 0u;
  *((_OWORD *)a2 + 2) = 0u;
  *((_OWORD *)a2 + 3) = 0u;
  *(_OWORD *)a2 = 0u;
  *((_OWORD *)a2 + 1) = 0u;
  if (result == a2)
  {
    v22 = 0;
    v70 = *(_OWORD *)result;
    v71 = result[2];
    v72 = *((_OWORD *)result + 2);
    v73 = result[6];
    v74 = *((_OWORD *)result + 4);
    v23 = 0x300000000;
    v24 = (uint64_t *)&v70;
    v75 = result[10];
    do
    {
      v25 = *(double *)v24++;
      result[v22] = v25;
      v26 = HIDWORD(v23);
      v27 = (int)v23 < 2;
      if ((int)v23 < 2)
        v26 = 0;
      v28 = v22 + v26;
      v29 = (v23 + 1);
      v30 = v23 & 0xFFFFFFFF00000000;
      if (!v27)
        v29 = 0;
      v23 = v29 | v30;
      v22 = v28 + 1;
    }
    while (v22 != 18);
    v16 = 0uLL;
    v21 = 0.0;
    v19 = 0.0;
    v17 = 0.0;
    v18 = 0uLL;
    v20 = 0uLL;
  }
  else
  {
    v2 = 0;
    v3 = 0x100000000;
    v4 = 0x300000000;
    v5 = result;
    do
    {
      a2[v2] = *v5;
      v6 = HIDWORD(v3);
      v7 = (int)v3 < 2;
      if ((int)v3 < 2)
        v6 = 0;
      v8 = &v5[v6];
      v9 = (v3 + 1);
      v10 = v3 & 0xFFFFFFFF00000000;
      if (!v7)
        v9 = 0;
      v3 = v9 | v10;
      v5 = v8 + 1;
      v11 = HIDWORD(v4);
      v12 = (int)v4 < 2;
      if ((int)v4 < 2)
        v11 = 0;
      v13 = v2 + v11;
      v14 = (v4 + 1);
      v15 = v4 & 0xFFFFFFFF00000000;
      if (!v12)
        v14 = 0;
      v4 = v14 | v15;
      v2 = v13 + 1;
    }
    while (v2 != 18);
    v16 = *(_OWORD *)a2;
    v17 = a2[2];
    v18 = *((_OWORD *)a2 + 3);
    v19 = a2[8];
    v20 = *((_OWORD *)a2 + 6);
    v21 = a2[14];
  }
  v70 = v16;
  v71 = v17;
  v72 = v18;
  v73 = v19;
  v74 = v20;
  v31 = 0x300000000;
  v32 = (uint64_t *)&v70;
  v33 = 21;
  v75 = v21;
  do
  {
    v34 = *(double *)v32++;
    a2[v33] = v34;
    v35 = HIDWORD(v31);
    v36 = (int)v31 < 2;
    if ((int)v31 < 2)
      v35 = 0;
    v37 = v33 + v35;
    v38 = (v31 + 1);
    v39 = v31 & 0xFFFFFFFF00000000;
    if (!v36)
      v38 = 0;
    v31 = v38 | v39;
    v33 = v37 + 1;
  }
  while (v33 != 39);
  v40 = result[12];
  v41 = result[13];
  v42 = result[14];
  v43 = result[1];
  v44 = result[2];
  v45 = result[4];
  v46 = result[5];
  v47 = result[6];
  v48 = result[8];
  v49 = result[9];
  v50 = result[10];
  v51 = v41 * v44 - v42 * v43;
  v52 = v42 * *result - v40 * v44;
  v53 = v40 * v43 - v41 * *result;
  *(double *)&v70 = v51;
  *((double *)&v70 + 1) = v52;
  v71 = v53;
  *(double *)&v72 = v41 * v47 - v42 * v46;
  *((double *)&v72 + 1) = v42 * v45 - v40 * v47;
  v73 = v40 * v46 - v41 * v45;
  *(double *)&v74 = v41 * v50 - v42 * v49;
  *((double *)&v74 + 1) = v42 * v48 - v40 * v50;
  v75 = v40 * v49 - v41 * v48;
  v54 = 0x300000000;
  v55 = (uint64_t *)&v70;
  for (i = 3; i != 21; i = v60 + 1)
  {
    v57 = *(double *)v55++;
    a2[i] = v57;
    v58 = HIDWORD(v54);
    v59 = (int)v54 < 2;
    if ((int)v54 < 2)
      v58 = 0;
    v60 = i + v58;
    v61 = (v54 + 1);
    v62 = v54 & 0xFFFFFFFF00000000;
    if (!v59)
      v61 = 0;
    v54 = v61 | v62;
  }
  v63 = 0x300000000;
  for (j = 18; j != 36; j = v67 + 1)
  {
    a2[j] = 0.0;
    v65 = HIDWORD(v63);
    v66 = (int)v63 < 2;
    if ((int)v63 < 2)
      v65 = 0;
    v67 = j + v65;
    v68 = (v63 + 1);
    v69 = v63 & 0xFFFFFFFF00000000;
    if (!v66)
      v68 = 0;
    v63 = v68 | v69;
  }
  return result;
}

double cva::SE3GroupStorage<double,cva::Matrix<double,4u,4u,false>>::enforce(uint64_t a1)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double cosval;
  double v7;
  __double2 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  double result;
  __int128 v13;
  float64x2_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  double v22;
  double v23;
  double v24;
  double v25[4];

  cva::SE3GroupStorage<double,cva::Matrix<double,4u,4u,false>>::log((float64x2_t *)a1, (uint64_t)&v22);
  v18 = xmmword_20AC06120;
  v19 = unk_20AC06130;
  v20 = xmmword_20AC06140;
  v21 = unk_20AC06150;
  v14 = (float64x2_t)xmmword_20AC060E0;
  v15 = *(_OWORD *)algn_20AC060F0;
  v16 = xmmword_20AC06100;
  v17 = unk_20AC06110;
  v2 = v22 * v22 + v23 * v23 + v24 * v24;
  if (v2 >= 0.0000002635)
  {
    v7 = sqrt(v2);
    v8 = __sincos_stret(v7);
    cosval = v8.__cosval;
    v5 = v8.__sinval / v7;
    v3 = 1.0 / v2 * (1.0 - v8.__cosval);
    v4 = 1.0 / v2 * (1.0 - v8.__sinval / v7);
  }
  else
  {
    v3 = 0.5 - v2 * (v2 / -720.0 + 0.0416666667);
    v4 = 0.166666667 - v2 * (v2 / -5040.0 + 0.00833333333);
    v5 = 1.0 - v2 * v4;
    cosval = 1.0 - v2 * v3;
  }
  v25[2] = v3;
  v25[3] = v4;
  v25[0] = cosval;
  v25[1] = v5;
  sub_20ABA36A0((uint64_t)&v22, v25, &v14);
  v9 = v19;
  *(_OWORD *)(a1 + 64) = v18;
  *(_OWORD *)(a1 + 80) = v9;
  v10 = v21;
  *(_OWORD *)(a1 + 96) = v20;
  *(_OWORD *)(a1 + 112) = v10;
  v11 = v15;
  *(float64x2_t *)a1 = v14;
  *(_OWORD *)(a1 + 16) = v11;
  result = *(double *)&v16;
  v13 = v17;
  *(_OWORD *)(a1 + 32) = v16;
  *(_OWORD *)(a1 + 48) = v13;
  return result;
}

uint64_t sub_20ABA36A0(uint64_t result, double *a2, float64x2_t *a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  float64x2_t v29;
  int8x16_t v30;
  float64x2_t v31;
  _BYTE v32[24];

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = v5 * *(double *)result;
  v7 = v5 * *(double *)(result + 8);
  v8 = v5 * *(double *)(result + 16);
  a3->f64[0] = *a2 + v6 * *(double *)result;
  a3[2].f64[1] = v3 + v7 * *(double *)(result + 8);
  a3[5].f64[0] = v3 + v8 * *(double *)(result + 16);
  v9 = *(double *)(result + 8);
  v10 = v6 * v9;
  v11 = *(double *)(result + 16);
  v12 = v6 * v11;
  v13 = v7 * v11;
  v14 = v4 * *(double *)result;
  v15 = v4 * v9;
  v16 = v4 * v11;
  a3[2].f64[0] = v10 - v16;
  a3[4].f64[0] = v15 + v12;
  a3[4].f64[1] = v13 - v14;
  a3->f64[1] = v10 + v16;
  a3[1].f64[0] = v12 - v15;
  a3[3].f64[0] = v13 + v14;
  v18 = *(double *)(result + 16);
  v17 = *(double *)(result + 24);
  v19 = *(double *)(result + 32);
  v20 = *(double *)(result + 40);
  v21 = *(double *)(result + 8);
  v22 = v21 * v20 - v18 * v19;
  v23 = v18 * v17 - *(double *)result * v20;
  v24 = *(double *)result * v19 - v21 * v17;
  *(double *)&v32[16] = v24;
  v26 = a2[2];
  v25 = a2[3];
  if ((float64x2_t *)result == a3)
  {
    v28 = v20 + v26 * v24;
    v29 = *(float64x2_t *)(result + 8);
    v30.i64[1] = *(_QWORD *)(result + 16);
    v30.i64[0] = *(_QWORD *)result;
    *(_QWORD *)&v31.f64[0] = vdupq_laneq_s64(*(int64x2_t *)&v32[8], 1).u64[0];
    v31.f64[1] = v22;
    v27 = v25 * vmlad_n_f64(-(v29.f64[0] * v22), *(double *)result, *(double *)&v32[8]) + v28;
    a3[6] = vaddq_f64(vaddq_f64(*(float64x2_t *)(result + 24), vmulq_n_f64(*(float64x2_t *)v32, v26)), vmulq_n_f64(vmlaq_f64(vmulq_f64(*(float64x2_t *)&v32[8], vnegq_f64((float64x2_t)vextq_s8(v30, v30, 8uLL))), v31, v29), v25));
  }
  else
  {
    a3[6].f64[0] = v17 + v22 * v26 + v25 * (v21 * v24 - v18 * v23);
    a3[6].f64[1] = *(double *)(result + 32)
                 + v23 * v26
                 + v25 * (*(double *)(result + 16) * v22 - *(double *)result * v24);
    v27 = *(double *)(result + 40) + v24 * v26 + v25 * (*(double *)result * v23 - *(double *)(result + 8) * v22);
  }
  a3[7].f64[0] = v27;
  return result;
}

uint64_t cva::SE3AlgebraStorage<double,cva::Matrix<double,6u,1u,false>>::exp@<X0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double cosval;
  double v9;
  __double2 v10;
  double v12[4];

  *(_OWORD *)(a2 + 64) = xmmword_20AC06120;
  *(_OWORD *)(a2 + 80) = unk_20AC06130;
  *(_OWORD *)(a2 + 96) = xmmword_20AC06140;
  *(_OWORD *)(a2 + 112) = unk_20AC06150;
  *(_OWORD *)a2 = xmmword_20AC060E0;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)algn_20AC060F0;
  *(_OWORD *)(a2 + 32) = xmmword_20AC06100;
  *(_OWORD *)(a2 + 48) = unk_20AC06110;
  v4 = *a1 * *a1 + a1[1] * a1[1] + a1[2] * a1[2];
  if (v4 >= 0.0000002635)
  {
    v9 = sqrt(v4);
    v10 = __sincos_stret(v9);
    cosval = v10.__cosval;
    v7 = v10.__sinval / v9;
    v5 = 1.0 / v4 * (1.0 - v10.__cosval);
    v6 = 1.0 / v4 * (1.0 - v10.__sinval / v9);
  }
  else
  {
    v5 = 0.5 - v4 * (v4 / -720.0 + 0.0416666667);
    v6 = 0.166666667 - v4 * (v4 / -5040.0 + 0.00833333333);
    v7 = 1.0 - v4 * v6;
    cosval = 1.0 - v4 * v5;
  }
  v12[2] = v5;
  v12[3] = v6;
  v12[0] = cosval;
  v12[1] = v7;
  return sub_20ABA36A0((uint64_t)a1, v12, (float64x2_t *)a2);
}

uint64_t cva::SE3GroupStorage<double,cva::Matrix<double,4u,4u,false>>::serialize()
{
  return std::ostream::write();
}

uint64_t cva::SE3GroupStorage<double,cva::Matrix<double,4u,4u,false>>::deserialize()
{
  return std::istream::read();
}

double cva::SE3GroupStorage<float,cva::MatrixRef<float const,4u,4u,false>>::SE3GroupStorage(_QWORD *a1, uint64_t a2)
{
  double result;

  *a1 = a2;
  *(_QWORD *)&result = 4;
  a1[1] = 4;
  return result;
}

{
  double result;

  *a1 = a2;
  *(_QWORD *)&result = 4;
  a1[1] = 4;
  return result;
}

{
  double result;

  *a1 = a2;
  *(_QWORD *)&result = 4;
  a1[1] = 4;
  return result;
}

{
  double result;

  *a1 = a2;
  *(_QWORD *)&result = 4;
  a1[1] = 4;
  return result;
}

uint64_t cva::SE3GroupStorage<float,cva::MatrixRef<float const,4u,4u,false>>::R(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t cva::SE3GroupStorage<float,cva::MatrixRef<float const,4u,4u,false>>::T(uint64_t a1)
{
  return *(_QWORD *)a1
       - 4 * *(unsigned int *)(a1 + 12)
       + 4 * (3 * *(_DWORD *)(a1 + 8) + *(_DWORD *)(a1 + 12));
}

uint64_t *cva::SE3GroupStorage<float,cva::MatrixRef<float const,4u,4u,false>>::affine@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  int *v2;
  uint64_t v3;
  int v4;
  int *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int *v9;
  int v10;
  int *v11;
  int v12;
  int *v13;
  __int128 v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int *v20;
  __int128 v21;
  int *v22;
  uint64_t v23;
  int v24;

  v2 = (int *)*result;
  v4 = *((_DWORD *)result + 2);
  v3 = *((unsigned int *)result + 3);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  v5 = &v2[-v3];
  v6 = (v4 - 3);
  v7 = *v2;
  if (v5 == (int *)a2)
  {
    *(_QWORD *)&v14 = *(_QWORD *)(v2 + 1);
    v15 = v6;
    v16 = &v2[v15];
    v17 = *(_QWORD *)(v16 + 3);
    v16 += 3;
    v18 = v17;
    v19 = v16[2];
    v20 = &v16[v15];
    LODWORD(v17) = v20[3];
    v20 += 3;
    *(_QWORD *)&v21 = *(_QWORD *)(v20 + 1);
    v22 = &v20[v15];
    v23 = *(_QWORD *)(v22 + 3);
    v24 = v22[5];
    *(_DWORD *)a2 = v7;
    *((_QWORD *)&v14 + 1) = v18;
    *(_OWORD *)(a2 + 4) = v14;
    *(_DWORD *)(a2 + 20) = v19;
    *(_DWORD *)(a2 + 24) = v17;
    *((_QWORD *)&v21 + 1) = v23;
    *(_OWORD *)(a2 + 28) = v21;
    *(_DWORD *)(a2 + 44) = v24;
  }
  else
  {
    *(_DWORD *)a2 = v7;
    *(_DWORD *)(a2 + 4) = v2[1];
    *(_DWORD *)(a2 + 8) = v2[2];
    v8 = v6;
    v9 = &v2[v8];
    v10 = v9[3];
    v9 += 3;
    *(_DWORD *)(a2 + 12) = v10;
    *(_DWORD *)(a2 + 16) = v9[1];
    *(_DWORD *)(a2 + 20) = v9[2];
    v11 = &v9[v8];
    v12 = v11[3];
    v11 += 3;
    *(_DWORD *)(a2 + 24) = v12;
    *(_DWORD *)(a2 + 28) = v11[1];
    *(_DWORD *)(a2 + 32) = v11[2];
    v13 = &v11[v8];
    *(_DWORD *)(a2 + 36) = v13[3];
    *(_DWORD *)(a2 + 40) = v13[4];
    *(_DWORD *)(a2 + 44) = v13[5];
  }
  return result;
}

float *cva::SE3GroupStorage<float,cva::MatrixRef<float const,4u,4u,false>>::transform@<X0>(_QWORD *a1@<X0>, float *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float *result;
  float v8;
  float v9;
  float32x2_t v10;
  _QWORD v11[2];
  float *v12[2];
  float32x2_t v13[3];

  v4 = a1[1];
  v11[0] = *a1;
  v11[1] = v4;
  v12[0] = (float *)v11;
  v12[1] = a2;
  v5 = v11[0] - 4 * HIDWORD(v4);
  v6 = v5 + 4 * (3 * v4 + HIDWORD(v4));
  memset(v13, 0, 12);
  result = sub_20AB94090((float *)v13, v12);
  *(_DWORD *)(a3 + 8) = 0;
  *(_QWORD *)a3 = 0;
  v8 = v13[0].f32[0] + *(float *)v6;
  if (v5 == a3)
  {
    v10 = vadd_f32(*(float32x2_t *)((char *)v13 + 4), *(float32x2_t *)(v6 + 4));
    *(float *)a3 = v8;
    *(float32x2_t *)(a3 + 4) = v10;
  }
  else
  {
    *(float *)a3 = v8;
    v9 = v13[1].f32[0];
    *(float *)(a3 + 4) = v13[0].f32[1] + *(float *)(v6 + 4);
    *(float *)(a3 + 8) = v9 + *(float *)(v6 + 8);
  }
  return result;
}

float cva::SE3GroupStorage<float,cva::MatrixRef<float const,4u,4u,false>>::inverseTransform@<S0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, float32x2_t *a3@<X8>)
{
  unint64_t v4;
  float result;
  uint64_t v6;
  int v7;
  int v8;
  _QWORD v9[2];
  _QWORD *v10;
  uint64_t *v11[2];
  _QWORD v12[2];
  _QWORD *v13;
  uint64_t *v14[2];
  float32x2_t v15;
  float v16;
  float32x2_t v17;
  float v18;

  v4 = a1[1];
  v12[0] = *a1;
  v12[1] = v4;
  v13 = v12;
  v14[0] = (uint64_t *)&v13;
  v14[1] = a2;
  v9[0] = v12[0];
  v9[1] = v4;
  v10 = v9;
  v6 = v12[0] - 4 * HIDWORD(v4) + 4 * (3 * v4 + HIDWORD(v4));
  v7 = v4;
  v8 = 3 * v4 + HIDWORD(v4);
  v11[0] = (uint64_t *)&v10;
  v11[1] = &v6;
  v16 = 0.0;
  v15 = 0;
  sub_20AB941D0((float *)&v15, v14);
  v18 = 0.0;
  v17 = 0;
  sub_20AB9F748((float *)&v17, v11);
  *a3 = vsub_f32(v15, v17);
  result = v16 - v18;
  a3[1].f32[0] = v16 - v18;
  return result;
}

void cva::SE3GroupStorage<float,cva::MatrixRef<float const,4u,4u,false>>::transformJacobian(float *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  float v10;
  uint64_t v11;
  unint64_t v12;
  float v13;
  float v14;
  float v15;
  float *v16;
  float v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t i;
  unint64_t v25;
  BOOL v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _DWORD v30[9];

  *(_QWORD *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  if (a1 == (float *)a2)
  {
    v11 = 0;
    v12 = 0;
    v30[0] = 0;
    v14 = a1[1];
    v13 = a1[2];
    v15 = *a1;
    *(float *)&v30[1] = -v13;
    *(float *)&v30[2] = v14;
    *(float *)&v30[3] = v13;
    v30[4] = 0;
    *(float *)&v30[5] = -v15;
    *(float *)&v30[6] = -v14;
    *(float *)&v30[7] = v15;
    v30[8] = 0;
    v16 = (float *)v30;
    do
    {
      v17 = *v16++;
      a1[v11] = v17;
      v18 = HIDWORD(v12);
      v19 = (int)v12 < 2;
      if ((int)v12 < 2)
        v18 = 0;
      v20 = v11 + v18;
      v21 = (v12 + 1);
      v22 = v12 & 0xFFFFFFFF00000000;
      if (!v19)
        v21 = 0;
      v12 = v21 | v22;
      v11 = v20 + 1;
    }
    while (v11 != 9);
  }
  else
  {
    v2 = 0;
    v3 = 0;
    v4 = 0;
    do
    {
      v10 = 0.0;
      if (HIDWORD(v4) != (_DWORD)v4)
        v10 = a1[dword_20AC06190[(HIDWORD(v4) + 4 * v4)]]
            * flt_20AC06160[(HIDWORD(v4) + 4 * v4)];
      *(float *)(a2 + 4 * v2) = v10;
      if ((int)v4 >= 2)
        v4 = (v4 & 0xFFFFFFFF00000000) + 0x100000000;
      else
        v4 = (v4 + 1) | v4 & 0xFFFFFFFF00000000;
      v5 = HIDWORD(v3);
      v6 = (int)v3 < 2;
      if ((int)v3 < 2)
        v5 = 0;
      v7 = v2 + v5;
      v8 = (v3 + 1);
      v9 = v3 & 0xFFFFFFFF00000000;
      if (!v6)
        v8 = 0;
      v3 = v8 | v9;
      v2 = v7 + 1;
    }
    while (v2 != 9);
  }
  v23 = 0;
  for (i = 9; i != 18; i = v27 + 1)
  {
    *(_DWORD *)(a2 + 4 * i) = 0;
    v25 = HIDWORD(v23);
    v26 = (int)v23 < 2;
    if ((int)v23 < 2)
      v25 = 0;
    v27 = i + v25;
    v28 = (v23 + 1);
    v29 = v23 & 0xFFFFFFFF00000000;
    if (!v26)
      v28 = 0;
    v23 = v28 | v29;
  }
  *(_DWORD *)(a2 + 36) = 1065353216;
  *(_DWORD *)(a2 + 52) = 1065353216;
  *(_DWORD *)(a2 + 68) = 1065353216;
}

uint64_t cva::SE3GroupStorage<float,cva::MatrixRef<float const,4u,4u,false>>::inverseTransformJacobian@<X0>(uint64_t a1@<X0>, float *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  float *v5;
  unint64_t v6;
  uint64_t v7;
  float *v8;
  float v9;
  float v10;
  float v11;
  float *v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  unint64_t *v30;
  int v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD v38[2];
  unint64_t v39;
  unint64_t v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;

  v3 = 0;
  v4 = 0;
  *(_QWORD *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  v5 = *(float **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = (v6 - 3);
  v8 = (float *)(*(_QWORD *)a1 + v7 * 4);
  v9 = v8[3];
  v10 = v8[4];
  v8 += 3;
  v11 = v8[2];
  v12 = &v8[v7];
  v13 = v12[3];
  v14 = v12[4];
  v15 = v12[5];
  v16 = **(float **)a1;
  v17 = *(float *)(*(_QWORD *)a1 + 4);
  v18 = *(float *)(*(_QWORD *)a1 + 8);
  v20 = a2[1];
  v19 = a2[2];
  *(float *)&v21 = (float)(v17 * v19) - (float)(v18 * v20);
  *(float *)&v22 = (float)(v10 * v19) - (float)(v11 * v20);
  *(float *)&v23 = (float)(v14 * v19) - (float)(v15 * v20);
  *(float *)&v24 = (float)(v18 * *a2) - (float)(v16 * v19);
  v25 = (float)(v11 * *a2) - (float)(v9 * v19);
  v26 = (float)(v15 * *a2) - (float)(v13 * v19);
  v27 = (float)(v16 * v20) - (float)(v17 * *a2);
  v28 = (float)(v9 * v20) - (float)(v10 * *a2);
  v29 = (float)(v13 * v20) - (float)(v14 * *a2);
  v39 = __PAIR64__(v22, v21);
  v40 = __PAIR64__(v24, v23);
  v41 = v25;
  v42 = v26;
  v43 = v27;
  v44 = v28;
  v45 = v29;
  v30 = &v39;
  do
  {
    v31 = *(_DWORD *)v30;
    v30 = (unint64_t *)((char *)v30 + 4);
    *(_DWORD *)(a3 + 4 * v3) = v31;
    v32 = HIDWORD(v4);
    v33 = (int)v4 < 2;
    if ((int)v4 < 2)
      v32 = 0;
    v34 = v3 + v32;
    v35 = (v4 + 1);
    v36 = v4 & 0xFFFFFFFF00000000;
    if (!v33)
      v35 = 0;
    v4 = v35 | v36;
    v3 = v34 + 1;
  }
  while (v3 != 9);
  v39 = (unint64_t)v5;
  v40 = v6;
  v38[0] = a3 + 36;
  v38[1] = 0x900000003;
  return sub_20AB9FADC((uint64_t)v38, (uint64_t)&v39);
}

void cva::SE3GroupStorage<float,cva::MatrixRef<float const,4u,4u,false>>::log(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  float *v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  __float2 v13;
  float v14;
  float32x2_t *v15;
  float v16;
  float v17;
  float32x2_t v18;
  int32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float v22;
  float32_t v23;
  int32x2_t v24;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v4 = *(float **)a1;
  v3 = *(_QWORD *)(a1 + 8);
  sub_20AB93CB0(*(float **)a1, v3, (float *)a2);
  v5 = *(float *)a2;
  v6 = *(float *)(a2 + 4);
  v7 = *(float *)(a2 + 8);
  v8 = (float)((float)(v5 * v5) + (float)(v6 * v6)) + (float)(v7 * v7);
  if (v8 >= 0.0061)
  {
    v12 = sqrtf(v8);
    v13 = __sincosf_stret(v12);
    v11 = v13.__sinval / v12;
    v9 = (float)(1.0 / v8) * (float)(1.0 - v13.__cosval);
    v10 = (float)(1.0 / v8) * (float)(1.0 - (float)(v13.__sinval / v12));
  }
  else
  {
    v9 = 0.5 - (float)(v8 * (float)((float)(v8 / -720.0) + 0.041667));
    v10 = 0.16667 - (float)(v8 * (float)((float)(v8 / -5040.0) + 0.0083333));
    v11 = 1.0 - (float)(v8 * v10);
  }
  if (v8 >= 0.00000149)
  {
    if (v8 <= 9.0)
      v14 = (float)-(float)(v10 - (float)(v9 * 0.5)) / v11;
    else
      v14 = (float)(v9 + (float)(v11 * -0.5)) / (float)(v8 * v9);
  }
  else
  {
    v14 = (float)((float)(v8 * 0.0013889) + 0.083333) + (float)(v8 * 0.000033069);
  }
  v15 = (float32x2_t *)&v4[(3 * v3 + HIDWORD(v3)) - HIDWORD(v3)];
  v16 = v15->f32[1];
  v17 = v15[1].f32[0];
  *(float *)v24.i32 = (float)(v7 * v15->f32[0]) - (float)(v5 * v17);
  *(float *)&v24.i32[1] = (float)(v5 * v16) - (float)(v6 * v15->f32[0]);
  v18 = *(float32x2_t *)(a2 + 4);
  v19.i32[1] = v18.i32[1];
  v19.i32[0] = *(_DWORD *)a2;
  v20.i32[0] = vdup_lane_s32(v24, 1).u32[0];
  v20.f32[1] = (float)(v6 * v17) - (float)(v7 * v16);
  v23 = v20.f32[1];
  v21 = vadd_f32(vadd_f32(*v15, vmul_f32(*(float32x2_t *)((char *)&v24 - 4), (float32x2_t)0xBF000000BF000000)), vmul_n_f32(vmla_f32(vmul_f32((float32x2_t)v24, vneg_f32((float32x2_t)vrev64_s32(v19))), v20, v18), v14));
  v22 = (float)(v14 * vmlas_n_f32(-(float)(v18.f32[0] * v20.f32[1]), *(float *)a2, *(float *)v24.i32))
      + (float)(v17 + (float)(*(float *)&v24.i32[1] * -0.5));
  *(float32x2_t *)(a2 + 12) = v21;
  *(float *)(a2 + 20) = v22;
}

void cva::SE3GroupStorage<float,cva::MatrixRef<float const,4u,4u,false>>::logJacobian(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  float *v3;
  unint64_t v4;
  float v5;
  float v6;
  float *v8;
  unsigned int v9;
  float *v10;
  float v11;
  float v12;
  float v14;
  float v15;
  float v16;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  __float2 v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v39;
  float v40;
  float v41;
  float v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  __int128 v51;
  __int128 v52;
  int *v53;
  unint64_t v54;
  uint64_t i;
  int v56;
  unint64_t v57;
  BOOL v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t j;
  unint64_t v64;
  BOOL v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  float v69;
  float32x2_t v70;
  _QWORD v71[2];
  unint64_t v72;
  unint64_t *v73;
  float **v74;
  float *v75;
  unint64_t v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  _OWORD v82[2];
  __int128 v83;
  _BYTE v84[20];
  int v85;
  uint64_t v86;
  int v87;

  *(_OWORD *)(a2 + 152) = 0u;
  *(_OWORD *)(a2 + 140) = 0u;
  *(_OWORD *)(a2 + 124) = 0u;
  *(_OWORD *)(a2 + 108) = 0u;
  *(_OWORD *)(a2 + 92) = 0u;
  *(_OWORD *)(a2 + 76) = 0u;
  *(_OWORD *)(a2 + 60) = 0u;
  *(_OWORD *)(a2 + 44) = 0u;
  *(_OWORD *)(a2 + 28) = 0u;
  *(_OWORD *)(a2 + 12) = 0u;
  v3 = *(float **)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v83 = 0u;
  memset(v82, 0, sizeof(v82));
  sub_20AB94408(v3, v4, (float *)v82, (float *)((unint64_t)v82 | 0xC));
  v6 = *((float *)v82 + 1);
  v5 = *(float *)v82;
  *(_DWORD *)a2 = v82[0];
  *(float *)(a2 + 4) = v6;
  _S11 = *((float *)v82 + 2);
  *(_DWORD *)(a2 + 8) = DWORD2(v82[0]);
  v8 = &v3[-HIDWORD(v4)];
  v9 = 3 * v4 + HIDWORD(v4);
  v10 = &v8[v9];
  v75 = v10;
  v76 = v4 | ((unint64_t)v9 << 32);
  *(_QWORD *)v84 = (unint64_t)v82 | 0xC;
  *(_QWORD *)&v84[8] = &v75;
  if (((unint64_t)v82 | 0xC) == a2 || v8 == (float *)a2)
  {
    LODWORD(v74) = 0;
    v73 = 0;
    sub_20ABA0370((float *)&v73, (uint64_t)v84);
    _D19 = (float32x2_t)v73;
    v14 = *(float *)&v74;
  }
  else
  {
    v11 = v10[1];
    v12 = v10[2];
    _D19 = vmla_n_f32(vmla_n_f32(vmla_n_f32(0, *(float32x2_t *)((char *)v82 + 12), *v10), *(float32x2_t *)((char *)&v82[1] + 8), v11), *(float32x2_t *)((char *)&v83 + 4), v12);
    v14 = (float)((float)((float)(*((float *)&v82[1] + 1) * *v10) + 0.0) + (float)(*(float *)&v83 * v11))
        + (float)(*((float *)&v83 + 3) * v12);
  }
  *(float32x2_t *)(a2 + 12) = _D19;
  *(float *)(a2 + 20) = v14;
  v15 = v5 * v5;
  v16 = (float)((float)(v5 * v5) + (float)(v6 * v6)) + (float)(_S11 * _S11);
  if (v16 >= 0.0061)
  {
    v69 = v5;
    v22 = sqrtf(v16);
    v70 = _D19;
    v23 = __sincosf_stret(v22);
    _D19 = v70;
    v24 = v23.__sinval / v22;
    v5 = v69;
    _S0 = (float)(1.0 / v16) * (float)(1.0 - v23.__cosval);
    v18 = (float)(1.0 / v16) * (float)(1.0 - v24);
    v19 = v18 - _S0;
    v20 = (float)(1.0 / v16) * (float)(v24 + (float)(_S0 * -2.0));
    v21 = (float)(1.0 / v16) * (float)(_S0 + (float)(v18 * -3.0));
  }
  else
  {
    _S0 = 0.5 - (float)(v16 * (float)((float)(v16 / -720.0) + 0.041667));
    v18 = 0.16667 - (float)(v16 * (float)((float)(v16 / -5040.0) + 0.0083333));
    v19 = (float)(v16 * (float)((float)(v16 * -0.0011905) + 0.033333)) + -0.33333;
    v20 = (float)(v16 * (float)((float)(v16 * -0.00014881) + 0.0055556)) + -0.083333;
    v21 = (float)(v16 * (float)((float)(v16 * -0.000016534) + 0.00079365)) + -0.016667;
  }
  v25 = 0;
  v26 = a2 + 24;
  v27 = vmuls_lane_f32(v6, _D19, 1);
  v28 = (float)((float)(v5 * _D19.f32[0]) + v27) + (float)(_S11 * v14);
  v29 = (float)((float)(v19 + (float)(v21 * v15)) * v28) + (float)((float)(v18 + v18) * (float)(v5 * _D19.f32[0]));
  v30 = (float)((float)(v19 + (float)(v21 * (float)(v6 * v6))) * v28) + (float)((float)(v18 + v18) * v27);
  v81 = (float)((float)(v19 + (float)(v21 * (float)(_S11 * _S11))) * v28)
      + (float)((float)(v18 + v18) * (float)(_S11 * v14));
  v31 = v21 * v28;
  v32 = (float)(v6 * (float)(v5 * (float)(v21 * v28)))
      + (float)(v18 * vmlas_n_f32(vmuls_lane_f32(v5, _D19, 1), v6, _D19.f32[0]));
  v33 = (float)(_S11 * (float)(v5 * v31)) + (float)(v18 * vmlas_n_f32(v5 * v14, _S11, _D19.f32[0]));
  __asm { FMLA            S17, S11, V19.S[1] }
  v39 = (float)(_S11 * (float)(v6 * v31)) + (float)(v18 * _S17);
  v40 = v20 * v28;
  v41 = (float)(_S11 * v40) + (float)(_S0 * v14);
  __asm { FMLA            S16, S0, V19.S[1] }
  v43 = vmlas_n_f32(v5 * v40, _S0, _D19.f32[0]);
  *(float *)&v75 = v29;
  *((float *)&v75 + 1) = v41 + v32;
  *(float *)&v76 = v33 - _S16;
  *((float *)&v76 + 1) = v32 - v41;
  v79 = _S16 + v33;
  v80 = v39 - v43;
  v77 = v30;
  v78 = v43 + v39;
  v44 = 0x300000000;
  v45 = 12;
  do
  {
    *(_DWORD *)(v26 + 4 * v25) = *(_DWORD *)((char *)v82 + v45);
    v46 = HIDWORD(v44);
    v47 = (int)v44 < 2;
    if ((int)v44 < 2)
      v46 = 0;
    v48 = v25 + v46;
    v49 = (v44 + 1);
    v50 = v44 & 0xFFFFFFFF00000000;
    if (!v47)
      v49 = 0;
    v44 = v49 | v50;
    v25 = v48 + 1;
    v45 += 4;
  }
  while (v25 != 18);
  v51 = *(_OWORD *)(a2 + 28);
  v52 = *(_OWORD *)(a2 + 48);
  *((_QWORD *)&v51 + 1) = *(_QWORD *)(a2 + 48);
  *(_DWORD *)v84 = *(_DWORD *)(a2 + 24);
  *(_OWORD *)&v84[4] = v51;
  v53 = (int *)v84;
  v85 = DWORD2(v52);
  v86 = *(_QWORD *)(a2 + 72);
  v87 = *(_DWORD *)(a2 + 80);
  v54 = 0x300000000;
  for (i = 21; i != 39; i = v59 + 1)
  {
    v56 = *v53++;
    *(_DWORD *)(v26 + 4 * i) = v56;
    v57 = HIDWORD(v54);
    v58 = (int)v54 < 2;
    if ((int)v54 < 2)
      v57 = 0;
    v59 = i + v57;
    v60 = (v54 + 1);
    v61 = v54 & 0xFFFFFFFF00000000;
    if (!v58)
      v60 = 0;
    v54 = v60 | v61;
  }
  v73 = &v72;
  v74 = &v75;
  *(_QWORD *)v84 = &v73;
  *(_QWORD *)&v84[8] = (unint64_t)v82 | 0xC;
  v71[0] = a2 + 36;
  v71[1] = 0x300000006;
  v72 = (unint64_t)v82 | 0xC;
  sub_20ABA044C((uint64_t)v71, (uint64_t *)v84);
  v62 = 0x300000000;
  for (j = 18; j != 36; j = v66 + 1)
  {
    *(_DWORD *)(v26 + 4 * j) = 0;
    v64 = HIDWORD(v62);
    v65 = (int)v62 < 2;
    if ((int)v62 < 2)
      v64 = 0;
    v66 = j + v64;
    v67 = (v62 + 1);
    v68 = v62 & 0xFFFFFFFF00000000;
    if (!v65)
      v67 = 0;
    v62 = v67 | v68;
  }
}

uint64_t cva::SE3GroupStorage<float,cva::MatrixRef<float const,4u,4u,false>>::inverse@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  _QWORD v18[2];
  _QWORD v19[2];
  _QWORD v20[2];
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  float v24;

  *(_OWORD *)a2 = xmmword_20AC0609C;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)algn_20AC060AC;
  *(_OWORD *)(a2 + 32) = xmmword_20AC060BC;
  *(_OWORD *)(a2 + 48) = unk_20AC060CC;
  v4 = *(_QWORD **)(a1 + 8);
  v21 = *(uint64_t **)a1;
  v22 = v4;
  v20[0] = a2;
  v20[1] = 4;
  result = sub_20ABA09D0((uint64_t)v20, (uint64_t)&v21);
  v19[0] = a2;
  v19[1] = 4;
  v20[0] = v19;
  v7 = *(unsigned int *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 12);
  v8 = *(_QWORD *)a1 - 4 * v6;
  v9 = (3 * v7 + v6);
  v10 = (float *)(v8 + 4 * v9);
  v18[0] = v10;
  v18[1] = v7 | (v9 << 32);
  v21 = v20;
  v22 = v18;
  if (v8 == a2)
  {
    v24 = 0.0;
    v23 = 0;
    result = (uint64_t)sub_20ABA0B18((float *)&v23, &v21);
    *(_QWORD *)(a2 + 48) = v23;
    v17 = v24;
  }
  else
  {
    v11 = *(float *)(a2 + 4);
    v12 = *(float *)(a2 + 8);
    v13 = *(float *)(a2 + 20);
    v14 = *(float *)(a2 + 24);
    v15 = *(float *)(a2 + 36);
    v16 = *(float *)(a2 + 40);
    *(float *)(a2 + 48) = (float)((float)(0.0 - (float)(*(float *)a2 * *v10)) - (float)(*(float *)(a2 + 16) * v10[1]))
                        - (float)(*(float *)(a2 + 32) * v10[2]);
    *(float *)(a2 + 52) = (float)((float)(0.0 - (float)(v11 * *v10)) - (float)(v13 * v10[1])) - (float)(v15 * v10[2]);
    v17 = (float)((float)(0.0 - (float)(v12 * *v10)) - (float)(v14 * v10[1])) - (float)(v16 * v10[2]);
  }
  *(float *)(a2 + 56) = v17;
  return result;
}

unint64_t cva::SE3GroupStorage<float,cva::MatrixRef<float const,4u,4u,false>>::adjoint@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  int32x4_t v2;
  int32x4_t v3;
  _DWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  BOOL v12;
  _DWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  float *v24;
  int v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  float32x4_t v31;
  __int128 v32;
  float *v33;
  unint64_t v34;
  uint64_t i;
  int v36;
  unint64_t v37;
  BOOL v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  float32x4_t v43;
  float v44;
  uint64_t v45;
  _DWORD *v46;
  float v47;
  float32x2_t *v48;
  float32x4_t v49;
  float32x2_t v50;
  float v51;
  float32x2_t v52;
  float32x2_t v53;
  float32x2_t v54;
  float v55;
  int8x16_t v56;
  float32x4_t v57;
  float32x4_t v58;
  int32x4_t v59;
  unint64_t v60;
  float *v61;
  uint64_t j;
  int v63;
  unint64_t v64;
  BOOL v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t k;
  unint64_t v71;
  BOOL v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  float v76;
  float32x4_t v77;
  float v78;
  float32x2_t v79;
  float v80;

  v3.i64[1] = 0;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  v4 = *(_DWORD **)result;
  v5 = *(_QWORD *)(result + 8);
  v6 = *(_QWORD *)result - 4 * HIDWORD(v5);
  if (v6 == a2)
  {
    v20 = 0;
    v76 = *(float *)v4;
    v3.i64[0] = *(_QWORD *)(v4 + 1);
    v21 = (v5 - 3);
    v3.i64[1] = *(_QWORD *)&v4[v21 + 3];
    v77 = (float32x4_t)v3;
    v78 = *(float *)&v4[v21 + 5];
    v22 = (uint64_t)&v4[v21 + 3 + v21];
    v79 = *(float32x2_t *)(v22 + 12);
    v80 = *(float *)(v22 + 20);
    v23 = 0x300000000;
    v24 = &v76;
    do
    {
      v25 = *(_DWORD *)v24++;
      *(_DWORD *)(a2 + 4 * v20) = v25;
      v26 = HIDWORD(v23);
      v27 = (int)v23 < 2;
      if ((int)v23 < 2)
        v26 = 0;
      v28 = v20 + v26;
      v29 = (v23 + 1);
      v30 = v23 & 0xFFFFFFFF00000000;
      if (!v27)
        v29 = 0;
      v23 = v29 | v30;
      v20 = v28 + 1;
    }
    while (v20 != 18);
  }
  else
  {
    v7 = 0;
    v8 = (v5 << 32) - 0x300000000;
    v9 = 0x300000000;
    v10 = *(_DWORD **)result;
    do
    {
      *(_DWORD *)(a2 + 4 * v7) = *v10;
      v11 = HIDWORD(v8);
      v12 = (int)v8 < 2;
      if ((int)v8 < 2)
        v11 = 0;
      v13 = &v10[v11];
      v14 = (v8 + 1);
      v15 = v8 & 0xFFFFFFFF00000000;
      if (!v12)
        v14 = 0;
      v8 = v14 | v15;
      v10 = v13 + 1;
      v16 = HIDWORD(v9);
      v17 = (int)v9 < 2;
      if ((int)v9 < 2)
        v16 = 0;
      v18 = v7 + v16;
      result = (v9 + 1);
      v19 = v9 & 0xFFFFFFFF00000000;
      if (!v17)
        result = 0;
      v9 = result | v19;
      v7 = v18 + 1;
    }
    while (v7 != 18);
  }
  v31 = *(float32x4_t *)(a2 + 4);
  v32 = *(_OWORD *)(a2 + 24);
  v31.i64[1] = *(_QWORD *)(a2 + 24);
  v76 = *(float *)a2;
  v77 = v31;
  v33 = &v76;
  v78 = *((float *)&v32 + 2);
  v3.i64[0] = *(_QWORD *)(a2 + 48);
  v79 = *(float32x2_t *)v3.i8;
  v80 = *(float *)(a2 + 56);
  v34 = 0x300000000;
  for (i = 21; i != 39; i = v39 + 1)
  {
    v36 = *(_DWORD *)v33++;
    *(_DWORD *)(a2 + 4 * i) = v36;
    v37 = HIDWORD(v34);
    v38 = (int)v34 < 2;
    if ((int)v34 < 2)
      v37 = 0;
    v39 = i + v37;
    v40 = (v34 + 1);
    v41 = v34 & 0xFFFFFFFF00000000;
    if (!v38)
      v40 = 0;
    v34 = v40 | v41;
  }
  v42 = v6 + 4 * (3 * v5 + HIDWORD(v5));
  v3.i32[0] = *(_DWORD *)v42;
  v43.i64[0] = *(_QWORD *)v4;
  v44 = *((float *)v4 + 2);
  v45 = (v5 - 3);
  v46 = &v4[v45];
  v47 = *((float *)v46 + 3);
  v46 += 3;
  v48 = (float32x2_t *)&v46[v45];
  v49.i64[0] = __PAIR64__(LODWORD(v44), v43.u32[0]);
  v2.i64[0] = *(_QWORD *)(v42 + 4);
  v43.f32[2] = v47;
  v43.i32[3] = HIDWORD(*(_QWORD *)(v46 + 1));
  v49.i64[1] = *(_QWORD *)(v46 + 1);
  v50 = v48[2];
  v51 = (float)(*(float *)v42 * v49.f32[2]) - (float)(v47 * *(float *)v2.i32);
  v52.i32[0] = vdup_lane_s32((int32x2_t)v50, 1).u32[0];
  v52.i32[1] = v48[1].i32[1];
  v53.i32[0] = vdup_lane_s32(*(int32x2_t *)v2.i8, 1).u32[0];
  v53.i32[1] = *(_DWORD *)v42;
  v54 = vsub_f32(vmul_f32(*(float32x2_t *)v2.i8, v52), vmul_f32(v53, v50));
  v50.f32[0] = *(float *)v42 * v50.f32[0];
  v55 = v48[1].f32[1] * *(float *)v2.i32;
  v76 = (float)(v44 * *(float *)v2.i32) - COERCE_FLOAT(vmul_f32(*(float32x2_t *)&v2, *(float32x2_t *)&v43).i32[1]);
  v56 = vextq_s8((int8x16_t)v2, (int8x16_t)v2, 4uLL);
  v57 = (float32x4_t)v56;
  v57.i32[1] = v3.i32[0];
  v57.i32[2] = v56.i32[0];
  v58 = (float32x4_t)vzip1q_s32(v2, v3);
  v58.i32[1] = v3.i32[0];
  v58.i32[3] = v3.i32[0];
  v59 = (int32x4_t)vsubq_f32((float32x4_t)vrev64q_s32((int32x4_t)vmulq_f32(v57, v43)), vmulq_f32(v58, v49));
  v43.i64[0] = vrev64q_s32(v59).u64[0];
  v43.i64[1] = v59.i64[1];
  v77 = v43;
  v78 = v51;
  v79 = v54;
  v80 = v50.f32[0] - v55;
  v60 = 0x300000000;
  v61 = &v76;
  for (j = 3; j != 21; j = v66 + 1)
  {
    v63 = *(_DWORD *)v61++;
    *(_DWORD *)(a2 + 4 * j) = v63;
    v64 = HIDWORD(v60);
    v65 = (int)v60 < 2;
    if ((int)v60 < 2)
      v64 = 0;
    v66 = j + v64;
    v67 = (v60 + 1);
    v68 = v60 & 0xFFFFFFFF00000000;
    if (!v65)
      v67 = 0;
    v60 = v67 | v68;
  }
  v69 = 0x300000000;
  for (k = 18; k != 36; k = v73 + 1)
  {
    *(_DWORD *)(a2 + 4 * k) = 0;
    v71 = HIDWORD(v69);
    v72 = (int)v69 < 2;
    if ((int)v69 < 2)
      v71 = 0;
    v73 = k + v71;
    v74 = (v69 + 1);
    v75 = v69 & 0xFFFFFFFF00000000;
    if (!v72)
      v74 = 0;
    v69 = v74 | v75;
  }
  return result;
}

uint64_t cva::SE3GroupStorage<float,cva::MatrixRef<float const,4u,4u,false>>::serialize(uint64_t result)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_DWORD *)(result + 8);
  if (4 * v1)
  {
    v2 = *(_QWORD *)result;
    v3 = *(_QWORD *)result + 4 * (4 * v1);
    v4 = (unint64_t)(v1 - 4) << 32;
    do
    {
      result = std::ostream::write();
      v5 = HIDWORD(v4);
      if ((int)v4 < 3)
        v5 = 0;
      v6 = v2 + 4 * v5;
      v7 = (v4 + 1);
      if ((int)v4 >= 3)
        v7 = 0;
      v4 = v7 | v4 & 0xFFFFFFFF00000000;
      v2 = v6 + 4;
    }
    while (v6 + 4 != v3);
  }
  return result;
}

double cva::SE3GroupStorage<double,cva::MatrixRef<double const,4u,4u,false>>::SE3GroupStorage(_QWORD *a1, uint64_t a2)
{
  double result;

  *a1 = a2;
  *(_QWORD *)&result = 4;
  a1[1] = 4;
  return result;
}

{
  double result;

  *a1 = a2;
  *(_QWORD *)&result = 4;
  a1[1] = 4;
  return result;
}

{
  double result;

  *a1 = a2;
  *(_QWORD *)&result = 4;
  a1[1] = 4;
  return result;
}

{
  double result;

  *a1 = a2;
  *(_QWORD *)&result = 4;
  a1[1] = 4;
  return result;
}

uint64_t cva::SE3GroupStorage<double,cva::MatrixRef<double const,4u,4u,false>>::R(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t cva::SE3GroupStorage<double,cva::MatrixRef<double const,4u,4u,false>>::T(uint64_t a1)
{
  return *(_QWORD *)a1
       - 8 * *(unsigned int *)(a1 + 12)
       + 8 * (3 * *(_DWORD *)(a1 + 8) + *(_DWORD *)(a1 + 12));
}

uint64_t **cva::SE3GroupStorage<double,cva::MatrixRef<double const,4u,4u,false>>::affine@<X0>(uint64_t **result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;

  v2 = *result;
  v4 = *((_DWORD *)result + 2);
  v3 = *((unsigned int *)result + 3);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  v5 = &v2[-v3];
  v6 = (v4 - 3);
  v7 = *v2;
  if (v5 == (uint64_t *)a2)
  {
    v14 = v6;
    v15 = *(_OWORD *)&v2[v14 + 3];
    v16 = v2[v14 + 5];
    v17 = (uint64_t)&v2[v14 + 3 + v14];
    v18 = *(_OWORD *)(v17 + 24);
    v17 += 24;
    v19 = *(_QWORD *)(v17 + 16);
    v20 = v17 + v14 * 8;
    v21 = *(_QWORD *)(v20 + 40);
    v22 = *(_OWORD *)(v2 + 1);
    v23 = *(_OWORD *)(v20 + 24);
    *(_QWORD *)a2 = v7;
    *(_OWORD *)(a2 + 8) = v22;
    *(_OWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 40) = v16;
    *(_OWORD *)(a2 + 48) = v18;
    *(_QWORD *)(a2 + 64) = v19;
    *(_OWORD *)(a2 + 72) = v23;
    *(_QWORD *)(a2 + 88) = v21;
  }
  else
  {
    *(_QWORD *)a2 = v7;
    *(_QWORD *)(a2 + 8) = v2[1];
    *(_QWORD *)(a2 + 16) = v2[2];
    v8 = v6;
    v9 = &v2[v8];
    v10 = v9[3];
    v9 += 3;
    *(_QWORD *)(a2 + 24) = v10;
    *(_QWORD *)(a2 + 32) = v9[1];
    *(_QWORD *)(a2 + 40) = v9[2];
    v11 = &v9[v8];
    v12 = v11[3];
    v11 += 3;
    *(_QWORD *)(a2 + 48) = v12;
    *(_QWORD *)(a2 + 56) = v11[1];
    *(_QWORD *)(a2 + 64) = v11[2];
    v13 = &v11[v8];
    *(_QWORD *)(a2 + 72) = v13[3];
    *(_QWORD *)(a2 + 80) = v13[4];
    *(_QWORD *)(a2 + 88) = v13[5];
  }
  return result;
}

double *cva::SE3GroupStorage<double,cva::MatrixRef<double const,4u,4u,false>>::transform@<X0>(_QWORD *a1@<X0>, double *a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double *result;
  double v8;
  double v9;
  float64x2_t v10;
  _QWORD v11[2];
  double *v12[2];
  double v13;
  float64x2_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = a1[1];
  v11[0] = *a1;
  v11[1] = v4;
  v12[0] = (double *)v11;
  v12[1] = a2;
  v5 = v11[0] - 8 * HIDWORD(v4);
  v6 = v5 + 8 * (3 * v4 + HIDWORD(v4));
  v14 = 0uLL;
  v13 = 0.0;
  result = sub_20AB94BA0(&v13, v12);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v8 = v13 + *(double *)v6;
  if ((_QWORD *)v5 == a3)
  {
    v10 = vaddq_f64(v14, *(float64x2_t *)(v6 + 8));
    *(double *)a3 = v8;
    *(float64x2_t *)(a3 + 1) = v10;
  }
  else
  {
    *(double *)a3 = v8;
    v9 = v14.f64[1];
    *((double *)a3 + 1) = v14.f64[0] + *(double *)(v6 + 8);
    *((double *)a3 + 2) = v9 + *(double *)(v6 + 16);
  }
  return result;
}

double cva::SE3GroupStorage<double,cva::MatrixRef<double const,4u,4u,false>>::inverseTransform@<D0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, float64x2_t *a3@<X8>)
{
  unint64_t v4;
  double result;
  uint64_t v6;
  int v7;
  int v8;
  _QWORD v9[2];
  _QWORD *v10;
  uint64_t *v11[2];
  _QWORD v12[2];
  _QWORD *v13;
  uint64_t *v14[2];
  float64x2_t v15;
  double v16;
  float64x2_t v17;
  double v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = a1[1];
  v12[0] = *a1;
  v12[1] = v4;
  v13 = v12;
  v14[0] = (uint64_t *)&v13;
  v14[1] = a2;
  v9[0] = v12[0];
  v9[1] = v4;
  v10 = v9;
  v6 = v12[0] - 8 * HIDWORD(v4) + 8 * (3 * v4 + HIDWORD(v4));
  v7 = v4;
  v8 = 3 * v4 + HIDWORD(v4);
  v11[0] = (uint64_t *)&v10;
  v11[1] = &v6;
  v15 = 0uLL;
  v16 = 0.0;
  sub_20AB94CE0((uint64_t)&v15, v14);
  v17 = 0uLL;
  v18 = 0.0;
  sub_20ABA1E10((uint64_t)&v17, v11);
  *a3 = vsubq_f64(v15, v17);
  result = v16 - v18;
  a3[1].f64[0] = v16 - v18;
  return result;
}

void cva::SE3GroupStorage<double,cva::MatrixRef<double const,4u,4u,false>>::transformJacobian(double *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  double v10;
  uint64_t v11;
  unint64_t v12;
  double v13;
  double v14;
  double v15;
  double *v16;
  double v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t i;
  unint64_t v25;
  BOOL v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD v30[9];

  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  if (a1 == (double *)a2)
  {
    v11 = 0;
    v12 = 0;
    v30[0] = 0;
    v14 = a1[1];
    v13 = a1[2];
    v15 = *a1;
    *(double *)&v30[1] = -v13;
    *(double *)&v30[2] = v14;
    *(double *)&v30[3] = v13;
    v30[4] = 0;
    *(double *)&v30[5] = -v15;
    *(double *)&v30[6] = -v14;
    *(double *)&v30[7] = v15;
    v30[8] = 0;
    v16 = (double *)v30;
    do
    {
      v17 = *v16++;
      a1[v11] = v17;
      v18 = HIDWORD(v12);
      v19 = (int)v12 < 2;
      if ((int)v12 < 2)
        v18 = 0;
      v20 = v11 + v18;
      v21 = (v12 + 1);
      v22 = v12 & 0xFFFFFFFF00000000;
      if (!v19)
        v21 = 0;
      v12 = v21 | v22;
      v11 = v20 + 1;
    }
    while (v11 != 9);
  }
  else
  {
    v2 = 0;
    v3 = 0;
    v4 = 0;
    do
    {
      v10 = 0.0;
      if (HIDWORD(v4) != (_DWORD)v4)
        v10 = a1[dword_20AC06190[(HIDWORD(v4) + 4 * v4)]]
            * dbl_20AC061C0[(HIDWORD(v4) + 4 * v4)];
      *(double *)(a2 + 8 * v2) = v10;
      if ((int)v4 >= 2)
        v4 = (v4 & 0xFFFFFFFF00000000) + 0x100000000;
      else
        v4 = (v4 + 1) | v4 & 0xFFFFFFFF00000000;
      v5 = HIDWORD(v3);
      v6 = (int)v3 < 2;
      if ((int)v3 < 2)
        v5 = 0;
      v7 = v2 + v5;
      v8 = (v3 + 1);
      v9 = v3 & 0xFFFFFFFF00000000;
      if (!v6)
        v8 = 0;
      v3 = v8 | v9;
      v2 = v7 + 1;
    }
    while (v2 != 9);
  }
  v23 = 0;
  for (i = 9; i != 18; i = v27 + 1)
  {
    *(_QWORD *)(a2 + 8 * i) = 0;
    v25 = HIDWORD(v23);
    v26 = (int)v23 < 2;
    if ((int)v23 < 2)
      v25 = 0;
    v27 = i + v25;
    v28 = (v23 + 1);
    v29 = v23 & 0xFFFFFFFF00000000;
    if (!v26)
      v28 = 0;
    v23 = v28 | v29;
  }
  *(_QWORD *)(a2 + 72) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 104) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 136) = 0x3FF0000000000000;
}

uint64_t cva::SE3GroupStorage<double,cva::MatrixRef<double const,4u,4u,false>>::inverseTransformJacobian@<X0>(uint64_t a1@<X0>, double *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  double *v5;
  double v6;
  uint64_t v7;
  double *v8;
  double v9;
  double v10;
  double v11;
  double *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double *v30;
  uint64_t v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD v38[2];
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;

  v3 = 0;
  v4 = 0;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  v5 = *(double **)a1;
  v6 = *(double *)(a1 + 8);
  v7 = (LODWORD(v6) - 3);
  v8 = (double *)(*(_QWORD *)a1 + v7 * 8);
  v9 = v8[3];
  v10 = v8[4];
  v8 += 3;
  v11 = v8[2];
  v12 = &v8[v7];
  v13 = v12[3];
  v14 = v12[4];
  v15 = v12[5];
  v16 = **(double **)a1;
  v17 = *(double *)(*(_QWORD *)a1 + 8);
  v18 = *(double *)(*(_QWORD *)a1 + 16);
  v20 = a2[1];
  v19 = a2[2];
  v21 = v17 * v19 - v18 * v20;
  v22 = v10 * v19 - v11 * v20;
  v23 = v14 * v19 - v15 * v20;
  v24 = v18 * *a2 - v16 * v19;
  v25 = v11 * *a2 - v9 * v19;
  v26 = v15 * *a2 - v13 * v19;
  v27 = v16 * v20 - v17 * *a2;
  v28 = v9 * v20 - v10 * *a2;
  v29 = v13 * v20 - v14 * *a2;
  v39 = v21;
  v40 = v22;
  v41 = v23;
  v42 = v24;
  v43 = v25;
  v44 = v26;
  v45 = v27;
  v46 = v28;
  v47 = v29;
  v30 = &v39;
  do
  {
    v31 = *(_QWORD *)v30++;
    *((_QWORD *)a3 + v3) = v31;
    v32 = HIDWORD(v4);
    v33 = (int)v4 < 2;
    if ((int)v4 < 2)
      v32 = 0;
    v34 = v3 + v32;
    v35 = (v4 + 1);
    v36 = v4 & 0xFFFFFFFF00000000;
    if (!v33)
      v35 = 0;
    v4 = v35 | v36;
    v3 = v34 + 1;
  }
  while (v3 != 9);
  v39 = *(double *)&v5;
  v40 = v6;
  v38[0] = (char *)a3 + 72;
  v38[1] = 0x900000003;
  return sub_20ABA21B0((uint64_t)v38, (uint64_t)&v39);
}

double cva::SE3GroupStorage<double,cva::MatrixRef<double const,4u,4u,false>>::log@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  double *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  __double2 v13;
  double v14;
  float64x2_t *v15;
  double v16;
  double v17;
  double v18;
  float64x2_t v19;
  float64x2_t v25;
  int8x16_t v26;
  float64x2_t v27;
  double result;
  double v29;
  float64x2_t v30;
  double v31;

  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  v4 = *(double **)a1;
  v3 = *(_QWORD *)(a1 + 8);
  sub_20AB947E0(*(double **)a1, v3, (double *)a2);
  v6 = *(double *)a2;
  v5 = *(double *)(a2 + 8);
  v7 = *(double *)(a2 + 16);
  v8 = v6 * v6 + v5 * v5 + v7 * v7;
  if (v8 >= 0.0000002635)
  {
    v12 = sqrt(v8);
    v29 = *(double *)a2;
    v13 = __sincos_stret(v12);
    v6 = v29;
    v11 = v13.__sinval / v12;
    v9 = 1.0 / v8 * (1.0 - v13.__cosval);
    v10 = 1.0 / v8 * (1.0 - v13.__sinval / v12);
  }
  else
  {
    v9 = 0.5 - v8 * (v8 / -720.0 + 0.0416666667);
    v10 = 0.166666667 - v8 * (v8 / -5040.0 + 0.00833333333);
    v11 = 1.0 - v8 * v10;
  }
  if (v8 >= 2.775e-15)
  {
    if (v8 <= 9.0)
      v14 = -(v10 - v9 * 0.5) / v11;
    else
      v14 = (v9 + v11 * -0.5) / (v8 * v9);
  }
  else
  {
    v14 = v8 * 0.00138888889 + 0.0833333333 + v8 * 0.0000330687831;
  }
  v15 = (float64x2_t *)&v4[(3 * v3 + HIDWORD(v3)) - HIDWORD(v3)];
  v16 = v15->f64[1];
  v17 = v15[1].f64[0];
  v30.f64[0] = v5 * v17 - v7 * v16;
  v30.f64[1] = v7 * v15->f64[0] - v6 * v17;
  v31 = v6 * v16 - v5 * v15->f64[0];
  v18 = v17 + v31 * -0.5;
  v19 = *(float64x2_t *)(a2 + 8);
  __asm { FMOV            V7.2D, #-0.5 }
  v25 = vaddq_f64(*v15, vmulq_f64(v30, _Q7));
  v26.i64[1] = *(_QWORD *)(a2 + 16);
  *(double *)v26.i64 = v6;
  *(_QWORD *)&_Q7.f64[0] = vdupq_laneq_s64(*(int64x2_t *)((char *)&v30 + 8), 1).u64[0];
  _Q7.f64[1] = v30.f64[0];
  v27 = vaddq_f64(v25, vmulq_n_f64(vmlaq_f64(vmulq_f64(*(float64x2_t *)((char *)&v30 + 8), vnegq_f64((float64x2_t)vextq_s8(v26, v26, 8uLL))), _Q7, v19), v14));
  result = v14 * vmlad_n_f64(-(v19.f64[0] * v30.f64[0]), v6, v30.f64[1]) + v18;
  *(float64x2_t *)(a2 + 24) = v27;
  *(double *)(a2 + 40) = result;
  return result;
}

void cva::SE3GroupStorage<double,cva::MatrixRef<double const,4u,4u,false>>::logJacobian(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _OWORD *v3;
  double *v4;
  unint64_t v5;
  double v6;
  double v7;
  double *v9;
  unsigned int v10;
  double *v11;
  double v12;
  double v13;
  double v15;
  double v16;
  double v17;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  __double2 v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v40;
  double v41;
  double v42;
  double v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  double v52;
  uint64_t v53;
  unint64_t v54;
  float64x2_t *v55;
  uint64_t v56;
  float64_t v57;
  unint64_t v58;
  BOOL v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t i;
  unint64_t v65;
  BOOL v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  double v70;
  float64x2_t v71;
  _QWORD v72[2];
  float64_t *v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  float64_t **v83;
  float64_t **v84;
  float64x2_t v85[3];
  float64x2_t v86;
  double v87[4];
  float64x2_t v88;
  double v89;
  __int128 v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;

  *(_QWORD *)(a2 + 328) = 0;
  *(_OWORD *)(a2 + 248) = 0u;
  *(_OWORD *)(a2 + 232) = 0u;
  *(_OWORD *)(a2 + 216) = 0u;
  *(_OWORD *)(a2 + 200) = 0u;
  *(_OWORD *)(a2 + 184) = 0u;
  *(_OWORD *)(a2 + 168) = 0u;
  *(_OWORD *)(a2 + 152) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  v3 = (_OWORD *)(a2 + 24);
  v3[17] = 0u;
  v3[18] = 0u;
  v3[15] = 0u;
  v3[16] = 0u;
  v4 = *(double **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  memset(v87, 0, sizeof(v87));
  v86 = 0u;
  memset(v85, 0, sizeof(v85));
  sub_20AB94F20(v4, v5, v85[0].f64, &v85[1].f64[1]);
  v7 = v85[0].f64[1];
  v6 = v85[0].f64[0];
  *(float64_t *)a2 = v85[0].f64[0];
  *(double *)(a2 + 8) = v7;
  _D11 = v85[1].f64[0];
  *(float64_t *)(a2 + 16) = v85[1].f64[0];
  v9 = &v4[-HIDWORD(v5)];
  v10 = 3 * v5 + HIDWORD(v5);
  v11 = &v9[v10];
  v83 = (float64_t **)v11;
  v84 = (float64_t **)(v5 | ((unint64_t)v10 << 32));
  v74 = COERCE_DOUBLE((float64x2_t *)&v85[1].f64[1]);
  v75 = COERCE_DOUBLE(&v83);
  if ((float64x2_t *)&v85[1].f64[1] == (float64x2_t *)a2 || v9 == (double *)a2)
  {
    v88 = 0uLL;
    v89 = 0.0;
    sub_20ABA29D8((uint64_t)&v88, (uint64_t)&v74);
    _Q19 = v88;
    v15 = v89;
  }
  else
  {
    v12 = v11[1];
    v13 = v11[2];
    _Q19 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64((float64x2_t)0, *(float64x2_t *)((char *)&v85[1] + 8), *v11), v86, v12), *(float64x2_t *)&v87[1], v13);
    v15 = v85[2].f64[1] * *v11 + 0.0 + v87[0] * v12 + v87[3] * v13;
  }
  *(float64x2_t *)(a2 + 24) = _Q19;
  *(double *)(a2 + 40) = v15;
  v16 = v6 * v6;
  v17 = v6 * v6 + v7 * v7 + _D11 * _D11;
  if (v17 >= 0.0000002635)
  {
    v70 = v6;
    v23 = sqrt(v17);
    v71 = _Q19;
    v24 = __sincos_stret(v23);
    _Q19 = v71;
    v25 = v24.__sinval / v23;
    v6 = v70;
    _D0 = 1.0 / v17 * (1.0 - v24.__cosval);
    v19 = 1.0 / v17 * (1.0 - v25);
    v20 = v19 - _D0;
    v21 = 1.0 / v17 * (v25 + _D0 * -2.0);
    v22 = 1.0 / v17 * (_D0 + v19 * -3.0);
  }
  else
  {
    _D0 = 0.5 - v17 * (v17 / -720.0 + 0.0416666667);
    v19 = 0.166666667 - v17 * (v17 / -5040.0 + 0.00833333333);
    v20 = v17 * (v17 * -0.00119047619 + 0.0333333333) + -0.333333333;
    v21 = v17 * (v17 * -0.000148809524 + 0.00555555556) + -0.0833333333;
    v22 = v17 * (v17 * -0.0000165343915 + 0.000793650794) + -0.0166666667;
  }
  v26 = 0;
  v27 = a2 + 48;
  v28 = vmuld_lane_f64(v7, _Q19, 1);
  v29 = v6 * _Q19.f64[0] + v28 + _D11 * v15;
  v30 = (v20 + v22 * v16) * v29 + (v19 + v19) * (v6 * _Q19.f64[0]);
  v31 = (v20 + v22 * (v7 * v7)) * v29 + (v19 + v19) * v28;
  v82 = (v20 + v22 * (_D11 * _D11)) * v29 + (v19 + v19) * (_D11 * v15);
  v32 = v22 * v29;
  v33 = v7 * (v6 * (v22 * v29)) + v19 * vmlad_n_f64(vmuld_lane_f64(v6, _Q19, 1), v7, _Q19.f64[0]);
  v34 = _D11 * (v6 * v32) + v19 * vmlad_n_f64(v6 * v15, _D11, _Q19.f64[0]);
  __asm { FMLA            D17, D11, V19.D[1] }
  v40 = _D11 * (v7 * v32) + v19 * _D17;
  v41 = v21 * v29;
  v42 = _D11 * v41 + _D0 * v15;
  __asm { FMLA            D16, D0, V19.D[1] }
  v44 = vmlad_n_f64(v6 * v41, _D0, _Q19.f64[0]);
  v74 = v30;
  v75 = v42 + v33;
  v76 = v34 - _D16;
  v77 = v33 - v42;
  v80 = _D16 + v34;
  v81 = v40 - v44;
  v78 = v31;
  v79 = v44 + v40;
  v45 = 0x300000000;
  v46 = 3;
  do
  {
    *(float64_t *)(v27 + 8 * v26) = v85[0].f64[v46];
    v47 = HIDWORD(v45);
    v48 = (int)v45 < 2;
    if ((int)v45 < 2)
      v47 = 0;
    v49 = v26 + v47;
    v50 = (v45 + 1);
    v51 = v45 & 0xFFFFFFFF00000000;
    if (!v48)
      v50 = 0;
    v45 = v50 | v51;
    v26 = v49 + 1;
    ++v46;
  }
  while (v26 != 18);
  v88 = *(float64x2_t *)(a2 + 48);
  v52 = *(double *)(a2 + 64);
  v90 = *(_OWORD *)(a2 + 96);
  v53 = *(_QWORD *)(a2 + 112);
  v89 = v52;
  v91 = v53;
  v92 = *(_OWORD *)(a2 + 144);
  v54 = 0x300000000;
  v55 = &v88;
  v56 = 21;
  v93 = *(_QWORD *)(a2 + 160);
  do
  {
    v57 = v55->f64[0];
    v55 = (float64x2_t *)((char *)v55 + 8);
    *(float64_t *)(v27 + 8 * v56) = v57;
    v58 = HIDWORD(v54);
    v59 = (int)v54 < 2;
    if ((int)v54 < 2)
      v58 = 0;
    v60 = v56 + v58;
    v61 = (v54 + 1);
    v62 = v54 & 0xFFFFFFFF00000000;
    if (!v59)
      v61 = 0;
    v54 = v61 | v62;
    v56 = v60 + 1;
  }
  while (v56 != 39);
  v83 = &v73;
  v84 = (float64_t **)&v74;
  *(_QWORD *)&v88.f64[0] = &v83;
  *(_QWORD *)&v88.f64[1] = &v85[1].f64[1];
  v72[0] = a2 + 72;
  v72[1] = 0x300000006;
  v73 = &v85[1].f64[1];
  sub_20ABA2AB4((uint64_t)v72, (uint64_t *)&v88);
  v63 = 0x300000000;
  for (i = 18; i != 36; i = v67 + 1)
  {
    *(_QWORD *)(v27 + 8 * i) = 0;
    v65 = HIDWORD(v63);
    v66 = (int)v63 < 2;
    if ((int)v63 < 2)
      v65 = 0;
    v67 = i + v65;
    v68 = (v63 + 1);
    v69 = v63 & 0xFFFFFFFF00000000;
    if (!v66)
      v68 = 0;
    v63 = v68 | v69;
  }
}

void cva::SE3GroupStorage<double,cva::MatrixRef<double const,4u,4u,false>>::inverse(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  _QWORD v17[2];
  _QWORD v18[2];
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  __int128 v22;
  double v23;

  *(_OWORD *)(a2 + 64) = xmmword_20AC06120;
  *(_OWORD *)(a2 + 80) = unk_20AC06130;
  *(_OWORD *)(a2 + 96) = xmmword_20AC06140;
  *(_OWORD *)(a2 + 112) = unk_20AC06150;
  *(_OWORD *)a2 = xmmword_20AC060E0;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)algn_20AC060F0;
  *(_OWORD *)(a2 + 32) = xmmword_20AC06100;
  *(_OWORD *)(a2 + 48) = unk_20AC06110;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)&v22 = *(_QWORD *)a1;
  *((_QWORD *)&v22 + 1) = v4;
  v20 = (uint64_t *)a2;
  v21 = 4;
  sub_20ABA306C((uint64_t)&v20, (uint64_t)&v22);
  v18[0] = a2;
  v18[1] = 4;
  v19 = v18;
  v6 = *(unsigned int *)(a1 + 8);
  v5 = *(unsigned int *)(a1 + 12);
  v7 = *(_QWORD *)a1 - 8 * v5;
  v8 = (3 * v6 + v5);
  v9 = (double *)(v7 + 8 * v8);
  v17[0] = v9;
  v17[1] = v6 | (v8 << 32);
  v20 = (uint64_t *)&v19;
  v21 = (uint64_t)v17;
  if (v7 == a2)
  {
    v22 = 0uLL;
    v23 = 0.0;
    sub_20ABA31B4((uint64_t)&v22, &v20);
    *(_OWORD *)(a2 + 96) = v22;
    v16 = v23;
  }
  else
  {
    v10 = *(double *)(a2 + 8);
    v11 = *(double *)(a2 + 16);
    v12 = *(double *)(a2 + 40);
    v13 = *(double *)(a2 + 48);
    v14 = *(double *)(a2 + 72);
    v15 = *(double *)(a2 + 80);
    *(double *)(a2 + 96) = 0.0 - *(double *)a2 * *v9 - *(double *)(a2 + 32) * v9[1] - *(double *)(a2 + 64) * v9[2];
    *(double *)(a2 + 104) = 0.0 - v10 * *v9 - v12 * v9[1] - v14 * v9[2];
    v16 = 0.0 - v11 * *v9 - v13 * v9[1] - v15 * v9[2];
  }
  *(double *)(a2 + 112) = v16;
}

unint64_t cva::SE3GroupStorage<double,cva::MatrixRef<double const,4u,4u,false>>::adjoint@<X0>(unint64_t result@<X0>, _OWORD *a2@<X8>)
{
  double *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  double *v8;
  unint64_t v9;
  BOOL v10;
  double *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  BOOL v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  double *v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  uint64_t v44;
  double *v45;
  double v46;
  double v47;
  double v48;
  double *v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  unint64_t v62;
  uint64_t *v63;
  uint64_t i;
  uint64_t v65;
  unint64_t v66;
  BOOL v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t j;
  unint64_t v73;
  BOOL v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  __int128 v78;
  double v79;
  __int128 v80;
  double v81;
  __int128 v82;
  double v83;

  a2[16] = 0u;
  a2[17] = 0u;
  a2[14] = 0u;
  a2[15] = 0u;
  a2[12] = 0u;
  a2[13] = 0u;
  a2[10] = 0u;
  a2[11] = 0u;
  a2[8] = 0u;
  a2[9] = 0u;
  a2[6] = 0u;
  a2[7] = 0u;
  a2[4] = 0u;
  a2[5] = 0u;
  a2[2] = 0u;
  a2[3] = 0u;
  v2 = *(double **)result;
  v3 = *(_QWORD *)(result + 8);
  v4 = *(_QWORD *)result - 8 * HIDWORD(v3);
  *a2 = 0u;
  a2[1] = 0u;
  if ((_OWORD *)v4 == a2)
  {
    v18 = 0;
    v78 = *(_OWORD *)v2;
    v79 = v2[2];
    v19 = (v3 - 3);
    v80 = *(_OWORD *)&v2[v19 + 3];
    v81 = v2[v19 + 5];
    v20 = (uint64_t)&v2[v19 + 3 + v19];
    v82 = *(_OWORD *)(v20 + 24);
    v83 = *(double *)(v20 + 40);
    v21 = 0x300000000;
    v22 = (uint64_t *)&v78;
    do
    {
      v23 = *v22++;
      *((_QWORD *)a2 + v18) = v23;
      v24 = HIDWORD(v21);
      v25 = (int)v21 < 2;
      if ((int)v21 < 2)
        v24 = 0;
      v26 = v18 + v24;
      v27 = (v21 + 1);
      v28 = v21 & 0xFFFFFFFF00000000;
      if (!v25)
        v27 = 0;
      v21 = v27 | v28;
      v18 = v26 + 1;
    }
    while (v18 != 18);
  }
  else
  {
    v5 = 0;
    v6 = (v3 << 32) - 0x300000000;
    v7 = 0x300000000;
    v8 = v2;
    do
    {
      *((double *)a2 + v5) = *v8;
      v9 = HIDWORD(v6);
      v10 = (int)v6 < 2;
      if ((int)v6 < 2)
        v9 = 0;
      v11 = &v8[v9];
      v12 = (v6 + 1);
      v13 = v6 & 0xFFFFFFFF00000000;
      if (!v10)
        v12 = 0;
      v6 = v12 | v13;
      v8 = v11 + 1;
      v14 = HIDWORD(v7);
      v15 = (int)v7 < 2;
      if ((int)v7 < 2)
        v14 = 0;
      v16 = v5 + v14;
      result = (v7 + 1);
      v17 = v7 & 0xFFFFFFFF00000000;
      if (!v15)
        result = 0;
      v7 = result | v17;
      v5 = v16 + 1;
    }
    while (v5 != 18);
  }
  v78 = *a2;
  v79 = *((double *)a2 + 2);
  v80 = a2[3];
  v81 = *((double *)a2 + 8);
  v82 = a2[6];
  v29 = 0x300000000;
  v30 = (uint64_t *)&v78;
  v31 = 21;
  v83 = *((double *)a2 + 14);
  do
  {
    v32 = *v30++;
    *((_QWORD *)a2 + v31) = v32;
    v33 = HIDWORD(v29);
    v34 = (int)v29 < 2;
    if ((int)v29 < 2)
      v33 = 0;
    v35 = v31 + v33;
    v36 = (v29 + 1);
    v37 = v29 & 0xFFFFFFFF00000000;
    if (!v34)
      v36 = 0;
    v29 = v36 | v37;
    v31 = v35 + 1;
  }
  while (v31 != 39);
  v38 = (double *)(v4 + 8 * (3 * v3 + HIDWORD(v3)));
  v39 = v38[1];
  v40 = v38[2];
  v41 = *v2;
  v42 = v2[1];
  v43 = v2[2];
  v44 = (v3 - 3);
  v45 = &v2[v44];
  v46 = v45[3];
  v47 = v45[4];
  v45 += 3;
  v48 = v45[2];
  v49 = &v45[v44];
  v50 = v49[3];
  v51 = v49[4];
  v52 = v49[5];
  v53 = v39 * v43 - v40 * v42;
  v54 = v40 * v41 - *v38 * v43;
  v55 = *v38 * v42 - v39 * v41;
  v56 = v39 * v48 - v40 * v47;
  v57 = v40 * v46 - *v38 * v48;
  v58 = *v38 * v47 - v39 * v46;
  v59 = v39 * v52 - v40 * v51;
  v60 = v40 * v50 - *v38 * v52;
  v61 = *v38 * v51;
  *(double *)&v78 = v53;
  *((double *)&v78 + 1) = v54;
  v79 = v55;
  *(double *)&v80 = v56;
  *((double *)&v80 + 1) = v57;
  v81 = v58;
  *(double *)&v82 = v59;
  *((double *)&v82 + 1) = v60;
  v83 = v61 - v39 * v50;
  v62 = 0x300000000;
  v63 = (uint64_t *)&v78;
  for (i = 3; i != 21; i = v68 + 1)
  {
    v65 = *v63++;
    *((_QWORD *)a2 + i) = v65;
    v66 = HIDWORD(v62);
    v67 = (int)v62 < 2;
    if ((int)v62 < 2)
      v66 = 0;
    v68 = i + v66;
    v69 = (v62 + 1);
    v70 = v62 & 0xFFFFFFFF00000000;
    if (!v67)
      v69 = 0;
    v62 = v69 | v70;
  }
  v71 = 0x300000000;
  for (j = 18; j != 36; j = v75 + 1)
  {
    *((_QWORD *)a2 + j) = 0;
    v73 = HIDWORD(v71);
    v74 = (int)v71 < 2;
    if ((int)v71 < 2)
      v73 = 0;
    v75 = j + v73;
    v76 = (v71 + 1);
    v77 = v71 & 0xFFFFFFFF00000000;
    if (!v74)
      v76 = 0;
    v71 = v76 | v77;
  }
  return result;
}

uint64_t cva::SE3GroupStorage<double,cva::MatrixRef<double const,4u,4u,false>>::serialize(uint64_t result)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_DWORD *)(result + 8);
  if (4 * v1)
  {
    v2 = *(_QWORD *)result;
    v3 = *(_QWORD *)result + 8 * (4 * v1);
    v4 = (unint64_t)(v1 - 4) << 32;
    do
    {
      result = std::ostream::write();
      v5 = HIDWORD(v4);
      if ((int)v4 < 3)
        v5 = 0;
      v6 = v2 + 8 * v5;
      v7 = (v4 + 1);
      if ((int)v4 >= 3)
        v7 = 0;
      v4 = v7 | v4 & 0xFFFFFFFF00000000;
      v2 = v6 + 8;
    }
    while (v6 + 8 != v3);
  }
  return result;
}

float cva::SE3AlgebraStorage<float,cva::Matrix<float,6u,1u,false>>::SE3AlgebraStorage(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  float result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 4) = a2[1];
  *(_DWORD *)(a1 + 8) = a2[2];
  *(_DWORD *)(a1 + 12) = *(_DWORD *)a3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a3 + 4);
  result = *(float *)(a3 + 8);
  *(float *)(a1 + 20) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 4) = a2[1];
  *(_DWORD *)(a1 + 8) = a2[2];
  *(_DWORD *)(a1 + 12) = *(_DWORD *)a3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a3 + 4);
  result = *(float *)(a3 + 8);
  *(float *)(a1 + 20) = result;
  return result;
}

uint64_t cva::SE3AlgebraStorage<float,cva::Matrix<float,6u,1u,false>>::T(uint64_t a1)
{
  return a1 + 12;
}

{
  return a1 + 12;
}

float *cva::SE3AlgebraStorage<float,cva::Matrix<float,6u,1u,false>>::adjoint@<X0>(float *result@<X0>, int *a2@<X8>)
{
  uint64_t v2;
  float v3;
  float v4;
  float v5;
  unsigned int v6;
  unint64_t v7;
  int *v8;
  int v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  int *v17;
  unint64_t v18;
  uint64_t i;
  int v20;
  unint64_t v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  float v26;
  float v27;
  float v28;
  unint64_t v29;
  int *v30;
  uint64_t j;
  int v32;
  unint64_t v33;
  BOOL v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t k;
  unint64_t v40;
  BOOL v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  __int128 v46;
  float v47;
  unint64_t v48;
  int v49;

  v2 = 0;
  *((_OWORD *)a2 + 7) = 0u;
  *((_OWORD *)a2 + 8) = 0u;
  *((_OWORD *)a2 + 5) = 0u;
  *((_OWORD *)a2 + 6) = 0u;
  *((_OWORD *)a2 + 3) = 0u;
  *((_OWORD *)a2 + 4) = 0u;
  *((_OWORD *)a2 + 1) = 0u;
  *((_OWORD *)a2 + 2) = 0u;
  *(_OWORD *)a2 = 0u;
  v3 = *result;
  v4 = result[1];
  v5 = result[2];
  *(float *)&v6 = -*result;
  v45 = 0;
  *(float *)&v46 = v5;
  *((float *)&v46 + 1) = -v4;
  *((float *)&v46 + 2) = -v5;
  HIDWORD(v46) = 0;
  v47 = v3;
  v48 = __PAIR64__(v6, LODWORD(v4));
  v7 = 0x300000000;
  v8 = &v45;
  v49 = 0;
  do
  {
    v9 = *v8++;
    a2[v2] = v9;
    v10 = HIDWORD(v7);
    v11 = (int)v7 < 2;
    if ((int)v7 < 2)
      v10 = 0;
    v12 = v2 + v10;
    v13 = (v7 + 1);
    v14 = v7 & 0xFFFFFFFF00000000;
    if (!v11)
      v13 = 0;
    v7 = v13 | v14;
    v2 = v12 + 1;
  }
  while (v2 != 18);
  v15 = *(_OWORD *)(a2 + 1);
  v16 = *(_OWORD *)(a2 + 6);
  *((_QWORD *)&v15 + 1) = *((_QWORD *)a2 + 3);
  v45 = *a2;
  v46 = v15;
  v17 = &v45;
  v47 = *((float *)&v16 + 2);
  v48 = *((_QWORD *)a2 + 6);
  v49 = a2[14];
  v18 = 0x300000000;
  for (i = 21; i != 39; i = v23 + 1)
  {
    v20 = *v17++;
    a2[i] = v20;
    v21 = HIDWORD(v18);
    v22 = (int)v18 < 2;
    if ((int)v18 < 2)
      v21 = 0;
    v23 = i + v21;
    v24 = (v18 + 1);
    v25 = v18 & 0xFFFFFFFF00000000;
    if (!v22)
      v24 = 0;
    v18 = v24 | v25;
  }
  v26 = result[3];
  v27 = result[4];
  v28 = result[5];
  v45 = 0;
  *(float *)&v46 = v28;
  *((float *)&v46 + 1) = -v27;
  *((float *)&v46 + 2) = -v28;
  HIDWORD(v46) = 0;
  v47 = v26;
  *(float *)&v48 = v27;
  *((float *)&v48 + 1) = -v26;
  v49 = 0;
  v29 = 0x300000000;
  v30 = &v45;
  for (j = 3; j != 21; j = v35 + 1)
  {
    v32 = *v30++;
    a2[j] = v32;
    v33 = HIDWORD(v29);
    v34 = (int)v29 < 2;
    if ((int)v29 < 2)
      v33 = 0;
    v35 = j + v33;
    v36 = (v29 + 1);
    v37 = v29 & 0xFFFFFFFF00000000;
    if (!v34)
      v36 = 0;
    v29 = v36 | v37;
  }
  v38 = 0x300000000;
  for (k = 18; k != 36; k = v42 + 1)
  {
    a2[k] = 0;
    v40 = HIDWORD(v38);
    v41 = (int)v38 < 2;
    if ((int)v38 < 2)
      v40 = 0;
    v42 = k + v40;
    v43 = (v38 + 1);
    v44 = v38 & 0xFFFFFFFF00000000;
    if (!v41)
      v43 = 0;
    v38 = v43 | v44;
  }
  return result;
}

float cva::SE3AlgebraStorage<float,cva::Matrix<float,6u,1u,false>>::hat@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float result;

  v2 = *(float *)(a1 + 8);
  *(float *)(a2 + 16) = -v2;
  v4 = *(float *)a1;
  v3 = *(float *)(a1 + 4);
  v5 = -*(float *)a1;
  *(float *)(a2 + 32) = v3;
  *(float *)(a2 + 36) = v5;
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 12);
  *(_DWORD *)a2 = 0;
  *(_DWORD *)(a2 + 20) = 0;
  *(float *)(a2 + 4) = v2;
  *(float *)(a2 + 8) = -v3;
  *(float *)(a2 + 24) = v4;
  result = *(float *)(a1 + 20);
  *(float *)(a2 + 56) = result;
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_DWORD *)(a2 + 60) = 0;
  return result;
}

uint64_t cva::SE3AlgebraStorage<float,cva::Matrix<float,6u,1u,false>>::exp@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  float32x4_t v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float cosval;
  float v10;
  __float2 v11;
  float v13;
  float32x4_t v14;
  float32x2_t v15;
  float v16[4];

  *(_OWORD *)a2 = xmmword_20AC0609C;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)algn_20AC060AC;
  *(_OWORD *)(a2 + 32) = xmmword_20AC060BC;
  *(_OWORD *)(a2 + 48) = unk_20AC060CC;
  v14 = vmulq_n_f32(*(float32x4_t *)a1, *(float *)&a3);
  v15 = vmul_f32(*(float32x2_t *)(a1 + 16), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)&a3, 0));
  v4 = vmulq_f32(v14, v14);
  v5 = vaddq_f32(vaddq_f32(v4, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v4.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v4, 2)).f32[0];
  if (v5 >= 0.0061)
  {
    v10 = sqrtf(v5);
    v13 = v5;
    v11 = __sincosf_stret(v10);
    cosval = v11.__cosval;
    v8 = v11.__sinval / v10;
    v6 = (float)(1.0 / v13) * (float)(1.0 - v11.__cosval);
    v7 = (float)(1.0 / v13) * (float)(1.0 - (float)(v11.__sinval / v10));
  }
  else
  {
    v6 = 0.5 - (float)(v5 * (float)((float)(v5 / -720.0) + 0.041667));
    v7 = 0.16667 - (float)(v5 * (float)((float)(v5 / -5040.0) + 0.0083333));
    v8 = 1.0 - (float)(v5 * v7);
    cosval = 1.0 - (float)(v5 * v6);
  }
  v16[2] = v6;
  v16[3] = v7;
  v16[0] = cosval;
  v16[1] = v8;
  return sub_20ABA0FD4((uint64_t)&v14, v16, (float32x2_t *)a2);
}

void cva::SE3AlgebraStorage<float,cva::Matrix<float,6u,1u,false>>::expJacobian(float *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float cosval;
  float v16;
  float v17;
  float v18;
  float v19;
  __float2 v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  unint64_t v56;
  uint64_t i;
  unint64_t v58;
  BOOL v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  __int128 v63;
  __int128 v64;
  int *v65;
  unint64_t v66;
  uint64_t j;
  int v68;
  unint64_t v69;
  BOOL v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  float v74;
  float v75;
  _QWORD v76[2];
  _QWORD v77[2];
  uint64_t v78;
  float v79;
  _BYTE v80[20];
  int v81;
  uint64_t v82;
  int v83;

  *(_OWORD *)a2 = xmmword_20AC0609C;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)algn_20AC060AC;
  *(_OWORD *)(a2 + 32) = xmmword_20AC060BC;
  *(_OWORD *)(a2 + 48) = unk_20AC060CC;
  v4 = a2 + 64;
  *(_OWORD *)(a2 + 76) = 0u;
  *(_OWORD *)(a2 + 92) = 0u;
  *(_OWORD *)(a2 + 108) = 0u;
  *(_OWORD *)(a2 + 124) = 0u;
  *(_OWORD *)(a2 + 140) = 0u;
  *(_OWORD *)(a2 + 156) = 0u;
  *(_OWORD *)(a2 + 172) = 0u;
  *(_OWORD *)(a2 + 188) = 0u;
  *(_DWORD *)(a2 + 204) = 0;
  v77[0] = a1 + 3;
  v77[1] = 0x300000006;
  v5 = *a1;
  v6 = a1[1];
  v7 = v5 * v5;
  v8 = v6 * v6;
  v9 = a1[2];
  v10 = v9 * v9;
  v11 = (float)((float)(v5 * v5) + (float)(v6 * v6)) + (float)(v9 * v9);
  if (v11 >= 0.0061)
  {
    v19 = sqrtf(v11);
    v20 = __sincosf_stret(v19);
    cosval = v20.__cosval;
    v7 = v5 * v5;
    v10 = v9 * v9;
    v14 = v20.__sinval / v19;
    v12 = (float)(1.0 / v11) * (float)(1.0 - v20.__cosval);
    v13 = (float)(1.0 / v11) * (float)(1.0 - v14);
    v16 = v13 - v12;
    v17 = (float)(1.0 / v11) * (float)(v14 + (float)(v12 * -2.0));
    v18 = (float)(1.0 / v11) * (float)(v12 + (float)(v13 * -3.0));
  }
  else
  {
    v12 = 0.5 - (float)(v11 * (float)((float)(v11 / -720.0) + 0.041667));
    v13 = 0.16667 - (float)(v11 * (float)((float)(v11 / -5040.0) + 0.0083333));
    v14 = 1.0 - (float)(v11 * v13);
    cosval = 1.0 - (float)(v11 * v12);
    v16 = (float)(v11 * (float)((float)(v11 * -0.0011905) + 0.033333)) + -0.33333;
    v17 = (float)(v11 * (float)((float)(v11 * -0.00014881) + 0.0055556)) + -0.083333;
    v18 = (float)(v11 * (float)((float)(v11 * -0.000016534) + 0.00079365)) + -0.016667;
  }
  v21 = cosval + (float)((float)(v5 * v12) * v5);
  v22 = cosval + (float)((float)(v6 * v12) * v6);
  *(float *)(a2 + 40) = cosval + (float)((float)(v9 * v12) * v9);
  v23 = (float)(v5 * v12) * v6;
  v24 = (float)(v5 * v12) * v9;
  v25 = (float)(v6 * v12) * v9;
  *(float *)(a2 + 16) = v23 - (float)(v14 * v9);
  *(float *)(a2 + 20) = v22;
  *(float *)a2 = v21;
  *(float *)(a2 + 4) = v23 + (float)(v14 * v9);
  *(float *)(a2 + 32) = (float)(v14 * v6) + v24;
  *(float *)(a2 + 36) = v25 - (float)(v14 * v5);
  *(float *)(a2 + 8) = v24 - (float)(v14 * v6);
  *(float *)(a2 + 24) = v25 + (float)(v14 * v5);
  v76[0] = v4;
  v76[1] = 6;
  v26 = v14 + (float)((float)(v13 * v5) * v5);
  v27 = v14 + (float)((float)(v13 * v6) * v6);
  v28 = v14 + (float)((float)(v13 * v9) * v9);
  v29 = (float)(v13 * v5) * v6;
  v30 = (float)(v13 * v5) * v9;
  v31 = (float)(v13 * v6) * v9;
  v32 = v29 - (float)(v9 * v12);
  *(float *)(a2 + 88) = v32;
  *(float *)(a2 + 92) = v27;
  v33 = (float)(v6 * v12) + v30;
  v34 = v29 + (float)(v9 * v12);
  *(float *)(a2 + 64) = v26;
  *(float *)(a2 + 68) = v34;
  v35 = v31 - (float)(v5 * v12);
  *(float *)(a2 + 112) = v33;
  *(float *)(a2 + 116) = v35;
  *(float *)(a2 + 120) = v28;
  v36 = v30 - (float)(v6 * v12);
  *(float *)(a2 + 72) = v36;
  v37 = v31 + (float)(v5 * v12);
  *(float *)(a2 + 96) = v37;
  *(_QWORD *)v80 = v76;
  *(_QWORD *)&v80[8] = v77;
  if (a1 == (float *)a2)
  {
    v79 = 0.0;
    v78 = 0;
    v75 = v17;
    v43 = v10;
    v44 = v7;
    v74 = v18;
    sub_20ABA653C((float *)&v78, (uint64_t **)v80);
    v18 = v74;
    v17 = v75;
    v7 = v44;
    v10 = v43;
    v8 = v6 * v6;
    *(_QWORD *)(a2 + 48) = v78;
    v42 = v79;
    v38 = a1[3];
    v39 = a1[4];
    v41 = a1[5];
  }
  else
  {
    v38 = a1[3];
    v39 = a1[4];
    v40 = (float)((float)(v26 * v38) + 0.0) + (float)(v32 * v39);
    v41 = a1[5];
    *(float *)(a2 + 48) = v40 + (float)(v33 * v41);
    *(float *)(a2 + 52) = (float)((float)((float)(v34 * v38) + 0.0) + (float)(v27 * v39)) + (float)(v35 * v41);
    v42 = (float)((float)((float)(v36 * v38) + 0.0) + (float)(v37 * v39)) + (float)(v28 * v41);
  }
  *(float *)(a2 + 56) = v42;
  v45 = (float)((float)(v5 * v38) + (float)(v6 * v39)) + (float)(v9 * v41);
  v46 = (float)((float)(v16 + (float)(v18 * v7)) * v45) + (float)((float)(v13 + v13) * (float)(v5 * v38));
  v47 = (float)((float)(v16 + (float)(v18 * v8)) * v45) + (float)((float)(v13 + v13) * (float)(v6 * v39));
  *(float *)(a2 + 132) = (float)((float)(v16 + (float)(v18 * v10)) * v45)
                       + (float)((float)(v13 + v13) * (float)(v9 * v41));
  v48 = (float)(v18 * v45) * v5;
  v49 = (float)(v6 * v48) + (float)(v13 * (float)((float)(v39 * v5) + (float)(v38 * v6)));
  v50 = (float)(v48 * v9) + (float)(v13 * (float)((float)(v5 * v41) + (float)(v38 * v9)));
  v51 = (float)((float)((float)(v18 * v45) * v6) * v9) + (float)(v13 * (float)((float)(v6 * v41) + (float)(v39 * v9)));
  v52 = v17 * v45;
  v53 = (float)(v52 * v9) + (float)(v12 * v41);
  v54 = (float)(v52 * v6) + (float)(v12 * v39);
  v55 = (float)(v52 * v5) + (float)(v12 * v38);
  *(float *)(a2 + 100) = v49 - v53;
  *(float *)(a2 + 104) = v47;
  *(float *)(a2 + 76) = v46;
  *(float *)(a2 + 80) = v49 + v53;
  *(float *)(a2 + 84) = v50 - v54;
  *(float *)(a2 + 124) = v54 + v50;
  *(float *)(a2 + 128) = v51 - v55;
  *(float *)(a2 + 108) = v55 + v51;
  v56 = 0x300000000;
  for (i = 18; i != 36; i = v60 + 1)
  {
    *(_DWORD *)(v4 + 4 * i) = 0;
    v58 = HIDWORD(v56);
    v59 = (int)v56 < 2;
    if ((int)v56 < 2)
      v58 = 0;
    v60 = i + v58;
    v61 = (v56 + 1);
    v62 = v56 & 0xFFFFFFFF00000000;
    if (!v59)
      v61 = 0;
    v56 = v61 | v62;
  }
  v63 = *(_OWORD *)(a2 + 68);
  v64 = *(_OWORD *)(a2 + 88);
  *((_QWORD *)&v63 + 1) = *(_QWORD *)(a2 + 88);
  *(_DWORD *)v80 = *(_DWORD *)(a2 + 64);
  *(_OWORD *)&v80[4] = v63;
  v65 = (int *)v80;
  v81 = DWORD2(v64);
  v82 = *(_QWORD *)(a2 + 112);
  v83 = *(_DWORD *)(a2 + 120);
  v66 = 0x300000000;
  for (j = 21; j != 39; j = v71 + 1)
  {
    v68 = *v65++;
    *(_DWORD *)(v4 + 4 * j) = v68;
    v69 = HIDWORD(v66);
    v70 = (int)v66 < 2;
    if ((int)v66 < 2)
      v69 = 0;
    v71 = j + v69;
    v72 = (v66 + 1);
    v73 = v66 & 0xFFFFFFFF00000000;
    if (!v70)
      v72 = 0;
    v66 = v72 | v73;
  }
}

float *sub_20ABA653C(float *result, uint64_t **a2)
{
  float *v2;
  uint64_t v3;
  uint64_t *v4;
  float *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float *v11;
  float v12;
  uint64_t v13;
  float v14;
  float *v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  uint64_t v21;
  int v22;

  v2 = result;
  v3 = **a2;
  if ((float *)(v3 - 4 * *((unsigned int *)*a2 + 3)) == result
    || (v4 = a2[1], v5 = (float *)*v4, (float *)(*v4 - 4 * *((unsigned int *)v4 + 3)) == result))
  {
    v22 = 0;
    v21 = 0;
    result = (float *)sub_20ABA653C(&v21);
    *(_QWORD *)v2 = v21;
    *((_DWORD *)v2 + 2) = v22;
  }
  else
  {
    v6 = *((unsigned int *)*a2 + 2);
    if ((_DWORD)v6)
    {
      v7 = 0;
      v8 = 4 * (3 * v6);
      v9 = 4 * v6;
      v10 = 0.0;
      v11 = v5;
      do
      {
        v12 = *v11++;
        v10 = v10 + (float)(*(float *)(v3 + v7) * v12);
        v7 += v9;
      }
      while (v8 != v7);
      v13 = 0;
      *result = v10;
      v14 = 0.0;
      v15 = v5;
      do
      {
        v16 = *v15++;
        v14 = v14 + (float)(*(float *)(v3 + 4 + v13) * v16);
        v13 += v9;
      }
      while (v8 != v13);
      v17 = 0;
      result[1] = v14;
      v18 = v3 + 8;
      v19 = 0.0;
      do
      {
        v20 = *v5++;
        v19 = v19 + (float)(*(float *)(v18 + v17) * v20);
        v17 += v9;
      }
      while (v8 != v17);
    }
    else
    {
      *(_QWORD *)result = 0;
      v19 = 0.0;
    }
    result[2] = v19;
  }
  return result;
}

void cva::SE3AlgebraStorage<float,cva::Matrix<float,6u,1u,false>>::enforce(float *a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v6;
  float v7;
  float v8;
  float v9;
  __float2 v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  int v23;
  float v24;
  float v25;
  float v26;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  __float2 v39;

  v1 = *a1;
  v2 = a1[1];
  v3 = a1[2];
  v4 = (float)((float)(v1 * v1) + (float)(v2 * v2)) + (float)(v3 * v3);
  if (v4 > 9.8696)
  {
    if (v4 >= 0.0061)
    {
      v9 = sqrtf(v4);
      v10 = __sincosf_stret(v9);
      v8 = v10.__sinval / v9;
      v6 = (float)(1.0 / v4) * (float)(1.0 - v10.__cosval);
      v7 = (float)(1.0 / v4) * (float)(1.0 - (float)(v10.__sinval / v9));
    }
    else
    {
      v6 = 0.5 - (float)(v4 * (float)((float)(v4 / -720.0) + 0.041667));
      v7 = 0.16667 - (float)(v4 * (float)((float)(v4 / -5040.0) + 0.0083333));
      v8 = 1.0 - (float)(v4 * v7);
    }
    v11 = a1[3];
    v12 = a1[4];
    v13 = a1[5];
    v14 = (float)(v1 * v12) - (float)(v2 * v11);
    v15 = (float)(v3 * v11) - (float)(v1 * v13);
    v16 = (float)(v2 * v13) - (float)(v3 * v12);
    v17 = (float)(v11 + (float)(v6 * v16)) + (float)(v7 * (float)((float)(v2 * v14) - (float)(v3 * v15)));
    v18 = (float)(v12 + (float)(v6 * v15)) + (float)(v7 * (float)((float)(v3 * v16) - (float)(v1 * v14)));
    v19 = (float)(v13 + (float)(v6 * v14)) + (float)(v7 * (float)((float)(v1 * v15) - (float)(v2 * v16)));
    v20 = (float)((float)(v2 * v2) + (float)(v1 * v1)) + (float)(v3 * v3);
    if (v20 <= 9.8696)
    {
      v26 = 1.0;
      v25 = 1.0;
    }
    else
    {
      v21 = sqrtf(v20) / 3.1416;
      v22 = ceilf(v21) + -1.0;
      v23 = (int)v22;
      v24 = v21 - v22;
      if ((v23 & 1) != 0)
        v24 = v24 + -1.0;
      v25 = v24 / v21;
      v1 = v1 * v25;
      v2 = v2 * v25;
      *a1 = v1;
      a1[1] = v2;
      v3 = v3 * v25;
      a1[2] = v3;
      v26 = v25 * v25;
      v4 = v4 * (float)(v25 * v25);
      if (v25 >= -0.000244 && v25 <= 0.000244)
      {
        if (v4 >= 0.00000149)
        {
          if (v4 >= 0.0061)
          {
            v38 = sqrtf(v4);
            v39 = __sincosf_stret(v38);
            v37 = v39.__sinval / v38;
            v35 = (float)(1.0 / v4) * (float)(1.0 - v39.__cosval);
            v36 = (float)(1.0 / v4) * (float)(1.0 - (float)(v39.__sinval / v38));
          }
          else
          {
            v35 = 0.5 - (float)(v4 * (float)((float)(v4 / -720.0) + 0.041667));
            v36 = 0.16667 - (float)(v4 * (float)((float)(v4 / -5040.0) + 0.0083333));
            v37 = 1.0 - (float)(v4 * v36);
          }
          v28 = (float)-(float)(v36 - (float)(v35 * 0.5)) / v37;
        }
        else
        {
          v28 = (float)((float)(v4 * 0.0013889) + 0.083333) + (float)(v4 * 0.000033069);
        }
        goto LABEL_18;
      }
    }
    v29 = v8 / v25;
    v30 = v6 / v26;
    v31 = (float)((float)((float)-(float)(1.0 - v29) / v4) + (float)(v30 * 0.5)) / v29;
    v28 = (float)(v30 + (float)(v29 * -0.5)) / (float)(v4 * v30);
    if (v4 <= 9.0)
      v28 = v31;
LABEL_18:
    v32 = (float)(v2 * v19) - (float)(v3 * v18);
    v33 = (float)(v3 * v17) - (float)(v1 * v19);
    v34 = (float)(v1 * v18) - (float)(v2 * v17);
    a1[3] = (float)(v17 - (float)(v32 * 0.5)) + (float)(v28 * (float)((float)(v2 * v34) - (float)(v3 * v33)));
    a1[4] = (float)(v18 - (float)(v33 * 0.5)) + (float)(v28 * (float)((float)(v3 * v32) - (float)(v1 * v34)));
    a1[5] = (float)(v19 - (float)(v34 * 0.5)) + (float)(v28 * (float)((float)(v1 * v33) - (float)(v2 * v32)));
  }
}

uint64_t cva::SE3AlgebraStorage<float,cva::Matrix<float,6u,1u,false>>::serialize()
{
  return std::ostream::write();
}

uint64_t cva::SE3AlgebraStorage<float,cva::Matrix<float,6u,1u,false>>::deserialize()
{
  return std::istream::read();
}

double cva::SE3AlgebraStorage<double,cva::Matrix<double,6u,1u,false>>::SE3AlgebraStorage(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  double result;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = a2[1];
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = *(_QWORD *)a3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a3 + 8);
  result = *(double *)(a3 + 16);
  *(double *)(a1 + 40) = result;
  return result;
}

{
  double result;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = a2[1];
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = *(_QWORD *)a3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a3 + 8);
  result = *(double *)(a3 + 16);
  *(double *)(a1 + 40) = result;
  return result;
}

uint64_t cva::SE3AlgebraStorage<double,cva::Matrix<double,6u,1u,false>>::T(uint64_t a1)
{
  return a1 + 24;
}

{
  return a1 + 24;
}

double *cva::SE3AlgebraStorage<double,cva::Matrix<double,6u,1u,false>>::adjoint@<X0>(double *result@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  double v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  double v24;
  double v25;
  double v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t i;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t j;
  unint64_t v38;
  BOOL v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  __int128 v43;
  double v44;
  __int128 v45;
  double v46;
  __int128 v47;
  uint64_t v48;

  v2 = 0;
  a2[16] = 0u;
  a2[17] = 0u;
  a2[14] = 0u;
  a2[15] = 0u;
  a2[12] = 0u;
  a2[13] = 0u;
  a2[10] = 0u;
  a2[11] = 0u;
  a2[8] = 0u;
  a2[9] = 0u;
  a2[6] = 0u;
  a2[7] = 0u;
  a2[4] = 0u;
  a2[5] = 0u;
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  v3 = *result;
  v4 = result[1];
  v5 = -*result;
  v6 = -result[2];
  *((double *)&v43 + 1) = result[2];
  v44 = -v4;
  *(double *)&v45 = v6;
  *((_QWORD *)&v45 + 1) = 0;
  v46 = v3;
  *(double *)&v47 = v4;
  *((double *)&v47 + 1) = v5;
  v7 = 0x300000000;
  v8 = (uint64_t *)&v43;
  v48 = 0;
  do
  {
    v9 = *v8++;
    *((_QWORD *)a2 + v2) = v9;
    v10 = HIDWORD(v7);
    v11 = (int)v7 < 2;
    if ((int)v7 < 2)
      v10 = 0;
    v12 = v2 + v10;
    v13 = (v7 + 1);
    v14 = v7 & 0xFFFFFFFF00000000;
    if (!v11)
      v13 = 0;
    v7 = v13 | v14;
    v2 = v12 + 1;
  }
  while (v2 != 18);
  v43 = *a2;
  v44 = *((double *)a2 + 2);
  v45 = a2[3];
  v46 = *((double *)a2 + 8);
  v47 = a2[6];
  v15 = 0x300000000;
  v16 = (uint64_t *)&v43;
  v17 = 21;
  v48 = *((_QWORD *)a2 + 14);
  do
  {
    v18 = *v16++;
    *((_QWORD *)a2 + v17) = v18;
    v19 = HIDWORD(v15);
    v20 = (int)v15 < 2;
    if ((int)v15 < 2)
      v19 = 0;
    v21 = v17 + v19;
    v22 = (v15 + 1);
    v23 = v15 & 0xFFFFFFFF00000000;
    if (!v20)
      v22 = 0;
    v15 = v22 | v23;
    v17 = v21 + 1;
  }
  while (v17 != 39);
  v24 = result[3];
  v25 = result[4];
  v26 = result[5];
  *(_QWORD *)&v43 = 0;
  *((double *)&v43 + 1) = v26;
  v44 = -v25;
  *(double *)&v45 = -v26;
  *((_QWORD *)&v45 + 1) = 0;
  v46 = v24;
  *(double *)&v47 = v25;
  *((double *)&v47 + 1) = -v24;
  v48 = 0;
  v27 = 0x300000000;
  v28 = (uint64_t *)&v43;
  for (i = 3; i != 21; i = v33 + 1)
  {
    v30 = *v28++;
    *((_QWORD *)a2 + i) = v30;
    v31 = HIDWORD(v27);
    v32 = (int)v27 < 2;
    if ((int)v27 < 2)
      v31 = 0;
    v33 = i + v31;
    v34 = (v27 + 1);
    v35 = v27 & 0xFFFFFFFF00000000;
    if (!v32)
      v34 = 0;
    v27 = v34 | v35;
  }
  v36 = 0x300000000;
  for (j = 18; j != 36; j = v40 + 1)
  {
    *((_QWORD *)a2 + j) = 0;
    v38 = HIDWORD(v36);
    v39 = (int)v36 < 2;
    if ((int)v36 < 2)
      v38 = 0;
    v40 = j + v38;
    v41 = (v36 + 1);
    v42 = v36 & 0xFFFFFFFF00000000;
    if (!v39)
      v41 = 0;
    v36 = v41 | v42;
  }
  return result;
}

double cva::SE3AlgebraStorage<double,cva::Matrix<double,6u,1u,false>>::hat@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double result;

  v2 = *(double *)(a1 + 16);
  *(double *)(a2 + 32) = -v2;
  v4 = *(double *)a1;
  v3 = *(double *)(a1 + 8);
  v5 = -*(double *)a1;
  *(double *)(a2 + 64) = v3;
  *(double *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(double *)(a2 + 8) = v2;
  *(double *)(a2 + 16) = -v3;
  *(double *)(a2 + 48) = v4;
  result = *(double *)(a1 + 40);
  *(double *)(a2 + 112) = result;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  return result;
}

uint64_t cva::SE3AlgebraStorage<double,cva::Matrix<double,6u,1u,false>>::exp@<X0>(float64x2_t *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  float64_t v4;
  float64x2_t v5;
  float64x2_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double cosval;
  double v12;
  __double2 v13;
  double v15[2];
  float64x2_t v16;
  float64x2_t v17;
  double v18[4];

  *(_OWORD *)(a2 + 64) = xmmword_20AC06120;
  *(_OWORD *)(a2 + 80) = unk_20AC06130;
  *(_OWORD *)(a2 + 96) = xmmword_20AC06140;
  *(_OWORD *)(a2 + 112) = unk_20AC06150;
  *(_OWORD *)a2 = xmmword_20AC060E0;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)algn_20AC060F0;
  *(_OWORD *)(a2 + 32) = xmmword_20AC06100;
  *(_OWORD *)(a2 + 48) = unk_20AC06110;
  v4 = a1->f64[1] * a3;
  v15[0] = a1->f64[0] * a3;
  v15[1] = v4;
  v5 = vmulq_n_f64(a1[1], a3);
  v6 = vmulq_n_f64(a1[2], a3);
  v16 = v5;
  v17 = v6;
  v7 = v15[0] * v15[0] + v4 * v4 + vmulq_f64(v5, v5).f64[0];
  if (v7 >= 0.0000002635)
  {
    v12 = sqrt(v7);
    v13 = __sincos_stret(v12);
    cosval = v13.__cosval;
    v10 = v13.__sinval / v12;
    v8 = 1.0 / v7 * (1.0 - v13.__cosval);
    v9 = 1.0 / v7 * (1.0 - v13.__sinval / v12);
  }
  else
  {
    v8 = 0.5 - v7 * (v7 / -720.0 + 0.0416666667);
    v9 = 0.166666667 - v7 * (v7 / -5040.0 + 0.00833333333);
    v10 = 1.0 - v7 * v9;
    cosval = 1.0 - v7 * v8;
  }
  v18[2] = v8;
  v18[3] = v9;
  v18[0] = cosval;
  v18[1] = v10;
  return sub_20ABA36A0((uint64_t)v15, v18, (float64x2_t *)a2);
}

void cva::SE3AlgebraStorage<double,cva::Matrix<double,6u,1u,false>>::expJacobian(double *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double cosval;
  double v16;
  double v17;
  double v18;
  double v19;
  __double2 v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  unint64_t v56;
  uint64_t i;
  unint64_t v58;
  BOOL v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  BOOL v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  double v72;
  double v73;
  uint64_t *v74[2];
  _QWORD v75[2];
  _QWORD v76[2];
  __int128 v77;
  double v78;
  __int128 v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;

  *(_OWORD *)(a2 + 64) = xmmword_20AC06120;
  *(_OWORD *)(a2 + 80) = unk_20AC06130;
  *(_OWORD *)(a2 + 96) = xmmword_20AC06140;
  *(_OWORD *)(a2 + 112) = unk_20AC06150;
  *(_OWORD *)a2 = xmmword_20AC060E0;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)algn_20AC060F0;
  *(_OWORD *)(a2 + 32) = xmmword_20AC06100;
  *(_OWORD *)(a2 + 48) = unk_20AC06110;
  v4 = a2 + 128;
  *(_OWORD *)(a2 + 168) = 0u;
  *(_OWORD *)(a2 + 184) = 0u;
  *(_OWORD *)(a2 + 200) = 0u;
  *(_OWORD *)(a2 + 216) = 0u;
  *(_OWORD *)(a2 + 232) = 0u;
  *(_OWORD *)(a2 + 248) = 0u;
  *(_QWORD *)(a2 + 408) = 0;
  *(_OWORD *)(a2 + 264) = 0u;
  *(_OWORD *)(a2 + 280) = 0u;
  *(_OWORD *)(a2 + 296) = 0u;
  *(_OWORD *)(a2 + 312) = 0u;
  *(_OWORD *)(a2 + 328) = 0u;
  *(_OWORD *)(a2 + 344) = 0u;
  *(_OWORD *)(a2 + 360) = 0u;
  *(_OWORD *)(a2 + 376) = 0u;
  *(_OWORD *)(a2 + 152) = 0u;
  *(_OWORD *)(a2 + 392) = 0u;
  v76[0] = a1 + 3;
  v76[1] = 0x300000006;
  v5 = *a1;
  v6 = a1[1];
  v7 = v5 * v5;
  v8 = v6 * v6;
  v9 = a1[2];
  v10 = v9 * v9;
  v11 = v5 * v5 + v6 * v6 + v9 * v9;
  if (v11 >= 0.0000002635)
  {
    v19 = sqrt(v11);
    v20 = __sincos_stret(v19);
    cosval = v20.__cosval;
    v7 = v5 * v5;
    v10 = v9 * v9;
    v14 = v20.__sinval / v19;
    v12 = 1.0 / v11 * (1.0 - v20.__cosval);
    v13 = 1.0 / v11 * (1.0 - v14);
    v16 = v13 - v12;
    v17 = 1.0 / v11 * (v14 + v12 * -2.0);
    v18 = 1.0 / v11 * (v12 + v13 * -3.0);
  }
  else
  {
    v12 = 0.5 - v11 * (v11 / -720.0 + 0.0416666667);
    v13 = 0.166666667 - v11 * (v11 / -5040.0 + 0.00833333333);
    v14 = 1.0 - v11 * v13;
    cosval = 1.0 - v11 * v12;
    v16 = v11 * (v11 * -0.00119047619 + 0.0333333333) + -0.333333333;
    v17 = v11 * (v11 * -0.000148809524 + 0.00555555556) + -0.0833333333;
    v18 = v11 * (v11 * -0.0000165343915 + 0.000793650794) + -0.0166666667;
  }
  v21 = cosval + v5 * v12 * v5;
  v22 = cosval + v6 * v12 * v6;
  *(double *)(a2 + 80) = cosval + v9 * v12 * v9;
  v23 = v5 * v12 * v6;
  v24 = v5 * v12 * v9;
  v25 = v6 * v12 * v9;
  *(double *)(a2 + 32) = v23 - v14 * v9;
  *(double *)(a2 + 40) = v22;
  *(double *)a2 = v21;
  *(double *)(a2 + 8) = v23 + v14 * v9;
  *(double *)(a2 + 64) = v14 * v6 + v24;
  *(double *)(a2 + 72) = v25 - v14 * v5;
  *(double *)(a2 + 16) = v24 - v14 * v6;
  *(double *)(a2 + 48) = v25 + v14 * v5;
  v75[0] = v4;
  v75[1] = 6;
  v26 = v14 + v13 * v5 * v5;
  v27 = v14 + v13 * v6 * v6;
  v28 = v14 + v13 * v9 * v9;
  v29 = v13 * v5 * v6;
  v30 = v13 * v5 * v9;
  v31 = v13 * v6 * v9;
  v32 = v29 - v9 * v12;
  *(double *)(a2 + 176) = v32;
  *(double *)(a2 + 184) = v27;
  v33 = v6 * v12 + v30;
  v34 = v29 + v9 * v12;
  *(double *)(a2 + 128) = v26;
  *(double *)(a2 + 136) = v34;
  v35 = v31 - v5 * v12;
  *(double *)(a2 + 224) = v33;
  *(double *)(a2 + 232) = v35;
  *(double *)(a2 + 240) = v28;
  v36 = v30 - v6 * v12;
  *(double *)(a2 + 144) = v36;
  v37 = v31 + v5 * v12;
  *(double *)(a2 + 192) = v37;
  v74[0] = v75;
  v74[1] = v76;
  if (a1 == (double *)a2)
  {
    v77 = 0uLL;
    v78 = 0.0;
    v73 = v17;
    v43 = v10;
    v44 = v7;
    v72 = v18;
    sub_20ABA7344((double *)&v77, v74);
    v18 = v72;
    v17 = v73;
    v7 = v44;
    v10 = v43;
    v8 = v6 * v6;
    *(_OWORD *)(a2 + 96) = v77;
    v42 = v78;
    v38 = a1[3];
    v39 = a1[4];
    v41 = a1[5];
  }
  else
  {
    v38 = a1[3];
    v39 = a1[4];
    v40 = v26 * v38 + 0.0 + v32 * v39;
    v41 = a1[5];
    *(double *)(a2 + 96) = v40 + v33 * v41;
    *(double *)(a2 + 104) = v34 * v38 + 0.0 + v27 * v39 + v35 * v41;
    v42 = v36 * v38 + 0.0 + v37 * v39 + v28 * v41;
  }
  *(double *)(a2 + 112) = v42;
  v45 = v5 * v38 + v6 * v39 + v9 * v41;
  v46 = (v16 + v18 * v7) * v45 + (v13 + v13) * (v5 * v38);
  v47 = (v16 + v18 * v8) * v45 + (v13 + v13) * (v6 * v39);
  *(double *)(a2 + 264) = (v16 + v18 * v10) * v45 + (v13 + v13) * (v9 * v41);
  v48 = v18 * v45 * v5;
  v49 = v6 * v48 + v13 * (v39 * v5 + v38 * v6);
  v50 = v48 * v9 + v13 * (v5 * v41 + v38 * v9);
  v51 = v18 * v45 * v6 * v9 + v13 * (v6 * v41 + v39 * v9);
  v52 = v17 * v45;
  v53 = v52 * v9 + v12 * v41;
  v54 = v52 * v6 + v12 * v39;
  v55 = v52 * v5 + v12 * v38;
  *(double *)(a2 + 200) = v49 - v53;
  *(double *)(a2 + 208) = v47;
  *(double *)(a2 + 152) = v46;
  *(double *)(a2 + 160) = v49 + v53;
  *(double *)(a2 + 168) = v50 - v54;
  *(double *)(a2 + 248) = v54 + v50;
  *(double *)(a2 + 256) = v51 - v55;
  *(double *)(a2 + 216) = v55 + v51;
  v56 = 0x300000000;
  for (i = 18; i != 36; i = v60 + 1)
  {
    *(_QWORD *)(v4 + 8 * i) = 0;
    v58 = HIDWORD(v56);
    v59 = (int)v56 < 2;
    if ((int)v56 < 2)
      v58 = 0;
    v60 = i + v58;
    v61 = (v56 + 1);
    v62 = v56 & 0xFFFFFFFF00000000;
    if (!v59)
      v61 = 0;
    v56 = v61 | v62;
  }
  v77 = *(_OWORD *)(a2 + 128);
  v78 = *(double *)(a2 + 144);
  v79 = *(_OWORD *)(a2 + 176);
  v80 = *(_QWORD *)(a2 + 192);
  v81 = *(_OWORD *)(a2 + 224);
  v63 = 0x300000000;
  v64 = (uint64_t *)&v77;
  v65 = 21;
  v82 = *(_QWORD *)(a2 + 240);
  do
  {
    v66 = *v64++;
    *(_QWORD *)(v4 + 8 * v65) = v66;
    v67 = HIDWORD(v63);
    v68 = (int)v63 < 2;
    if ((int)v63 < 2)
      v67 = 0;
    v69 = v65 + v67;
    v70 = (v63 + 1);
    v71 = v63 & 0xFFFFFFFF00000000;
    if (!v68)
      v70 = 0;
    v63 = v70 | v71;
    v65 = v69 + 1;
  }
  while (v65 != 39);
}

double *sub_20ABA7344(double *result, uint64_t **a2)
{
  double *v2;
  uint64_t v3;
  uint64_t *v4;
  double *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double *v11;
  double v12;
  uint64_t v13;
  double v14;
  double *v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  __int128 v21;
  uint64_t v22;

  v2 = result;
  v3 = **a2;
  if ((double *)(v3 - 8 * *((unsigned int *)*a2 + 3)) == result
    || (v4 = a2[1], v5 = (double *)*v4, (double *)(*v4 - 8 * *((unsigned int *)v4 + 3)) == result))
  {
    v21 = 0uLL;
    v22 = 0;
    result = (double *)sub_20ABA7344(&v21);
    *(_OWORD *)v2 = v21;
    *((_QWORD *)v2 + 2) = v22;
  }
  else
  {
    v6 = *((unsigned int *)*a2 + 2);
    if ((_DWORD)v6)
    {
      v7 = 0;
      v8 = 8 * (3 * v6);
      v9 = 8 * v6;
      v10 = 0.0;
      v11 = v5;
      do
      {
        v12 = *v11++;
        v10 = v10 + *(double *)(v3 + v7) * v12;
        v7 += v9;
      }
      while (v8 != v7);
      v13 = 0;
      *result = v10;
      v14 = 0.0;
      v15 = v5;
      do
      {
        v16 = *v15++;
        v14 = v14 + *(double *)(v3 + 8 + v13) * v16;
        v13 += v9;
      }
      while (v8 != v13);
      v17 = 0;
      result[1] = v14;
      v18 = v3 + 16;
      v19 = 0.0;
      do
      {
        v20 = *v5++;
        v19 = v19 + *(double *)(v18 + v17) * v20;
        v17 += v9;
      }
      while (v8 != v17);
    }
    else
    {
      *result = 0.0;
      result[1] = 0.0;
      v19 = 0.0;
    }
    result[2] = v19;
  }
  return result;
}

void cva::SE3AlgebraStorage<double,cva::Matrix<double,6u,1u,false>>::enforce(double *a1)
{
  double v1;
  double v2;
  double v3;
  double v4;
  double v6;
  double v7;
  double v8;
  double v9;
  __double2 v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  int v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  __double2 v39;

  v1 = *a1;
  v2 = a1[1];
  v3 = a1[2];
  v4 = v1 * v1 + v2 * v2 + v3 * v3;
  if (v4 > 9.8696044)
  {
    if (v4 >= 0.0000002635)
    {
      v9 = sqrt(v4);
      v10 = __sincos_stret(v9);
      v8 = v10.__sinval / v9;
      v6 = 1.0 / v4 * (1.0 - v10.__cosval);
      v7 = 1.0 / v4 * (1.0 - v10.__sinval / v9);
    }
    else
    {
      v6 = 0.5 - v4 * (v4 / -720.0 + 0.0416666667);
      v7 = 0.166666667 - v4 * (v4 / -5040.0 + 0.00833333333);
      v8 = 1.0 - v4 * v7;
    }
    v11 = a1[3];
    v12 = a1[4];
    v13 = a1[5];
    v14 = v2 * v13 - v3 * v12;
    v15 = v3 * v11 - v1 * v13;
    v16 = v1 * v12 - v2 * v11;
    v17 = v11 + v6 * v14 + v7 * (v2 * v16 - v3 * v15);
    v18 = v12 + v6 * v15 + v7 * (v3 * v14 - v1 * v16);
    v19 = v7 * (v1 * v15 - v2 * v14) + v13 + v6 * v16;
    v20 = v2 * v2 + v1 * v1 + v3 * v3;
    if (v20 <= 9.8696044)
    {
      v26 = 1.0;
      v25 = 1.0;
    }
    else
    {
      v21 = sqrt(v20) / 3.14159265;
      v22 = ceil(v21) + -1.0;
      v23 = (int)v22;
      v24 = v21 - v22;
      if ((v23 & 1) != 0)
        v24 = v24 + -1.0;
      v25 = v24 / v21;
      v1 = v1 * v25;
      v2 = v2 * v25;
      *a1 = v1;
      a1[1] = v2;
      v3 = v3 * v25;
      a1[2] = v3;
      v26 = v25 * v25;
      v4 = v4 * (v25 * v25);
      if (v25 >= -0.00000001054 && v25 <= 0.00000001054)
      {
        if (v4 >= 2.775e-15)
        {
          if (v4 >= 0.0000002635)
          {
            v37 = sqrt(v4);
            v38 = v19;
            v39 = __sincos_stret(v37);
            v19 = v38;
            v36 = v39.__sinval / v37;
            v34 = 1.0 / v4 * (1.0 - v39.__cosval);
            v35 = 1.0 / v4 * (1.0 - v39.__sinval / v37);
          }
          else
          {
            v34 = 0.5 - v4 * (v4 / -720.0 + 0.0416666667);
            v35 = 0.166666667 - v4 * (v4 / -5040.0 + 0.00833333333);
            v36 = 1.0 - v4 * v35;
          }
          v27 = -(v35 - v34 * 0.5) / v36;
        }
        else
        {
          v27 = v4 * 0.00138888889 + 0.0833333333 + v4 * 0.0000330687831;
        }
LABEL_15:
        v31 = v2 * v19 - v3 * v18;
        v32 = v3 * v17 - v1 * v19;
        v33 = v1 * v18 - v2 * v17;
        a1[3] = v17 - v31 * 0.5 + v27 * (v2 * v33 - v3 * v32);
        a1[4] = v18 - v32 * 0.5 + v27 * (v3 * v31 - v1 * v33);
        a1[5] = v19 - v33 * 0.5 + v27 * (v1 * v32 - v2 * v31);
        return;
      }
    }
    v28 = v8 / v25;
    v29 = v6 / v26;
    v30 = (-(1.0 - v28) / v4 + v29 * 0.5) / v28;
    v27 = (v29 + v28 * -0.5) / (v4 * v29);
    if (v4 <= 9.0)
      v27 = v30;
    goto LABEL_15;
  }
}

uint64_t cva::SE3AlgebraStorage<double,cva::Matrix<double,6u,1u,false>>::serialize()
{
  return std::ostream::write();
}

uint64_t cva::SE3AlgebraStorage<double,cva::Matrix<double,6u,1u,false>>::deserialize()
{
  return std::istream::read();
}

uint64_t cva::SE3AlgebraStorage<float,cva::MatrixRef<float const,6u,1u,false>>::R(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t cva::SE3AlgebraStorage<float,cva::MatrixRef<float const,6u,1u,false>>::T(uint64_t a1)
{
  return *(_QWORD *)a1 - 4 * *(unsigned int *)(a1 + 12) + 4 * (*(_DWORD *)(a1 + 12) + 3);
}

uint64_t cva::SE3AlgebraStorage<float,cva::MatrixRef<float const,6u,1u,false>>::adjoint@<X0>(uint64_t result@<X0>, int *a2@<X8>)
{
  uint64_t v2;
  float *v3;
  float v4;
  float v5;
  float v6;
  unint64_t v7;
  int *v8;
  int v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  int *v17;
  unint64_t v18;
  uint64_t i;
  int v20;
  unint64_t v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  float v27;
  float v28;
  float v29;
  unsigned int v30;
  unint64_t v31;
  int *v32;
  uint64_t j;
  int v34;
  unint64_t v35;
  BOOL v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t k;
  unint64_t v42;
  BOOL v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  __int128 v48;
  float v49;
  unint64_t v50;
  int v51;

  v2 = 0;
  *((_OWORD *)a2 + 7) = 0u;
  *((_OWORD *)a2 + 8) = 0u;
  *((_OWORD *)a2 + 5) = 0u;
  *((_OWORD *)a2 + 6) = 0u;
  *((_OWORD *)a2 + 3) = 0u;
  *((_OWORD *)a2 + 4) = 0u;
  *((_OWORD *)a2 + 1) = 0u;
  *((_OWORD *)a2 + 2) = 0u;
  *(_OWORD *)a2 = 0u;
  v3 = *(float **)result;
  v4 = **(float **)result;
  v5 = *(float *)(*(_QWORD *)result + 4);
  v6 = *(float *)(*(_QWORD *)result + 8);
  v47 = 0;
  *(float *)&v48 = v6;
  *((float *)&v48 + 1) = -v5;
  *((float *)&v48 + 2) = -v6;
  HIDWORD(v48) = 0;
  v49 = v4;
  *(float *)&v50 = v5;
  *((float *)&v50 + 1) = -v4;
  v51 = 0;
  v7 = 0x300000000;
  v8 = &v47;
  do
  {
    v9 = *v8++;
    a2[v2] = v9;
    v10 = HIDWORD(v7);
    v11 = (int)v7 < 2;
    if ((int)v7 < 2)
      v10 = 0;
    v12 = v2 + v10;
    v13 = (v7 + 1);
    v14 = v7 & 0xFFFFFFFF00000000;
    if (!v11)
      v13 = 0;
    v7 = v13 | v14;
    v2 = v12 + 1;
  }
  while (v2 != 18);
  v15 = *(_OWORD *)(a2 + 1);
  v16 = *(_OWORD *)(a2 + 6);
  *((_QWORD *)&v15 + 1) = *((_QWORD *)a2 + 3);
  v47 = *a2;
  v48 = v15;
  v17 = &v47;
  v49 = *((float *)&v16 + 2);
  v50 = *((_QWORD *)a2 + 6);
  v51 = a2[14];
  v18 = 0x300000000;
  for (i = 21; i != 39; i = v23 + 1)
  {
    v20 = *v17++;
    a2[i] = v20;
    v21 = HIDWORD(v18);
    v22 = (int)v18 < 2;
    if ((int)v18 < 2)
      v21 = 0;
    v23 = i + v21;
    v24 = (v18 + 1);
    v25 = v18 & 0xFFFFFFFF00000000;
    if (!v22)
      v24 = 0;
    v18 = v24 | v25;
  }
  v26 = (uint64_t)&v3[*(_DWORD *)(result + 12) + 3 - *(unsigned int *)(result + 12)];
  v27 = *(float *)v26;
  v28 = *(float *)(v26 + 4);
  v29 = *(float *)(v26 + 8);
  *(float *)&v30 = -*(float *)v26;
  v47 = 0;
  *(float *)&v48 = v29;
  *((float *)&v48 + 1) = -v28;
  *((float *)&v48 + 2) = -v29;
  HIDWORD(v48) = 0;
  v49 = v27;
  v50 = __PAIR64__(v30, LODWORD(v28));
  v51 = 0;
  v31 = 0x300000000;
  v32 = &v47;
  for (j = 3; j != 21; j = v37 + 1)
  {
    v34 = *v32++;
    a2[j] = v34;
    v35 = HIDWORD(v31);
    v36 = (int)v31 < 2;
    if ((int)v31 < 2)
      v35 = 0;
    v37 = j + v35;
    v38 = (v31 + 1);
    v39 = v31 & 0xFFFFFFFF00000000;
    if (!v36)
      v38 = 0;
    v31 = v38 | v39;
  }
  v40 = 0x300000000;
  for (k = 18; k != 36; k = v44 + 1)
  {
    a2[k] = 0;
    v42 = HIDWORD(v40);
    v43 = (int)v40 < 2;
    if ((int)v40 < 2)
      v42 = 0;
    v44 = k + v42;
    v45 = (v40 + 1);
    v46 = v40 & 0xFFFFFFFF00000000;
    if (!v43)
      v45 = 0;
    v40 = v45 | v46;
  }
  return result;
}

float cva::SE3AlgebraStorage<float,cva::MatrixRef<float const,6u,1u,false>>::hat@<S0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float result;

  v2 = *a1;
  v3 = *(float *)(*a1 + 8);
  *(float *)(a2 + 16) = -v3;
  v5 = *(float *)v2;
  v4 = *(float *)(v2 + 4);
  v6 = -*(float *)v2;
  *(float *)(a2 + 32) = v4;
  *(float *)(a2 + 36) = v6;
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(v2 + 12);
  *(_DWORD *)a2 = 0;
  *(_DWORD *)(a2 + 20) = 0;
  *(float *)(a2 + 4) = v3;
  *(float *)(a2 + 8) = -v4;
  *(float *)(a2 + 24) = v5;
  result = *(float *)(v2 + 20);
  *(float *)(a2 + 56) = result;
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_DWORD *)(a2 + 60) = 0;
  return result;
}

uint64_t cva::SE3AlgebraStorage<float,cva::MatrixRef<float const,6u,1u,false>>::exp@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  float *v4;
  float v5;
  float32x4_t v6;
  float v7;
  float v8;
  unint64_t v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float cosval;
  float v15;
  __float2 v16;
  _BYTE v18[24];
  float v19[4];

  *(_OWORD *)a2 = xmmword_20AC0609C;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)algn_20AC060AC;
  *(_OWORD *)(a2 + 32) = xmmword_20AC060BC;
  *(_OWORD *)(a2 + 48) = unk_20AC060CC;
  memset(v18, 0, sizeof(v18));
  v4 = *(float **)a1;
  v5 = **(float **)a1 * a3;
  if ((_BYTE *)(*(_QWORD *)a1 - 4 * *(unsigned int *)(a1 + 12)) == v18)
  {
    v7 = v4[5] * a3;
    *(float *)v18 = **(float **)a1 * a3;
    v6 = vmulq_n_f32(*(float32x4_t *)(v4 + 1), a3);
    *(float32x4_t *)&v18[4] = v6;
    *(float *)&v18[20] = v7;
  }
  else
  {
    *(float *)v18 = **(float **)a1 * a3;
    v6 = vmulq_n_f32(*(float32x4_t *)(v4 + 1), a3);
    *(float32x4_t *)&v18[4] = v6;
    *(float *)&v18[20] = v4[5] * a3;
  }
  v8 = v5 * v5;
  v9 = vmulq_f32(v6, v6).u64[0];
  v10 = (float)(v8 + *(float *)&v9) + *((float *)&v9 + 1);
  if (v10 >= 0.0061)
  {
    v15 = sqrtf(v10);
    v16 = __sincosf_stret(v15);
    cosval = v16.__cosval;
    v13 = v16.__sinval / v15;
    v11 = (float)(1.0 / v10) * (float)(1.0 - v16.__cosval);
    v12 = (float)(1.0 / v10) * (float)(1.0 - (float)(v16.__sinval / v15));
  }
  else
  {
    v11 = 0.5 - (float)(v10 * (float)((float)(v10 / -720.0) + 0.041667));
    v12 = 0.16667 - (float)(v10 * (float)((float)(v10 / -5040.0) + 0.0083333));
    v13 = 1.0 - (float)(v10 * v12);
    cosval = 1.0 - (float)(v10 * v11);
  }
  v19[2] = v11;
  v19[3] = v12;
  v19[0] = cosval;
  v19[1] = v13;
  return sub_20ABA0FD4((uint64_t)v18, v19, (float32x2_t *)a2);
}

void cva::SE3AlgebraStorage<float,cva::MatrixRef<float const,6u,1u,false>>::expJacobian(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  float *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float *v8;
  unint64_t v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float cosval;
  float v21;
  float v22;
  float v23;
  float v24;
  __float2 v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  unint64_t v62;
  uint64_t i;
  unint64_t v64;
  BOOL v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  __int128 v69;
  __int128 v70;
  int *v71;
  unint64_t v72;
  uint64_t j;
  int v74;
  unint64_t v75;
  BOOL v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  float v80;
  float v81;
  _QWORD v82[2];
  _QWORD v83[2];
  uint64_t v84;
  int v85;
  _BYTE v86[20];
  int v87;
  uint64_t v88;
  int v89;

  *(_OWORD *)a2 = xmmword_20AC0609C;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)algn_20AC060AC;
  *(_OWORD *)(a2 + 32) = xmmword_20AC060BC;
  *(_OWORD *)(a2 + 48) = unk_20AC060CC;
  v3 = a2 + 64;
  *(_OWORD *)(a2 + 76) = 0u;
  *(_OWORD *)(a2 + 92) = 0u;
  *(_OWORD *)(a2 + 108) = 0u;
  *(_OWORD *)(a2 + 124) = 0u;
  *(_OWORD *)(a2 + 140) = 0u;
  *(_OWORD *)(a2 + 156) = 0u;
  *(_OWORD *)(a2 + 172) = 0u;
  *(_OWORD *)(a2 + 188) = 0u;
  *(_DWORD *)(a2 + 204) = 0;
  v4 = *(float **)a1;
  v5 = *(unsigned int *)(a1 + 12);
  v6 = *(_QWORD *)a1 - 4 * v5;
  v7 = (v5 + 3);
  v8 = (float *)(v6 + 4 * v7);
  v9 = *(unsigned int *)(a1 + 8) | (unint64_t)(v7 << 32);
  v83[0] = v8;
  v83[1] = v9;
  v10 = *v4;
  v11 = v4[1];
  v12 = v10 * v10;
  v13 = v11 * v11;
  v14 = v4[2];
  v15 = v14 * v14;
  v16 = (float)((float)(v10 * v10) + (float)(v11 * v11)) + (float)(v14 * v14);
  if (v16 >= 0.0061)
  {
    v24 = sqrtf(v16);
    v25 = __sincosf_stret(v24);
    cosval = v25.__cosval;
    v12 = v10 * v10;
    v15 = v14 * v14;
    v19 = v25.__sinval / v24;
    v17 = (float)(1.0 / v16) * (float)(1.0 - v25.__cosval);
    v18 = (float)(1.0 / v16) * (float)(1.0 - v19);
    v21 = v18 - v17;
    v22 = (float)(1.0 / v16) * (float)(v19 + (float)(v17 * -2.0));
    v23 = (float)(1.0 / v16) * (float)(v17 + (float)(v18 * -3.0));
  }
  else
  {
    v17 = 0.5 - (float)(v16 * (float)((float)(v16 / -720.0) + 0.041667));
    v18 = 0.16667 - (float)(v16 * (float)((float)(v16 / -5040.0) + 0.0083333));
    v19 = 1.0 - (float)(v16 * v18);
    cosval = 1.0 - (float)(v16 * v17);
    v21 = (float)(v16 * (float)((float)(v16 * -0.0011905) + 0.033333)) + -0.33333;
    v22 = (float)(v16 * (float)((float)(v16 * -0.00014881) + 0.0055556)) + -0.083333;
    v23 = (float)(v16 * (float)((float)(v16 * -0.000016534) + 0.00079365)) + -0.016667;
  }
  v26 = cosval + (float)((float)(v10 * v17) * v10);
  v27 = cosval + (float)((float)(v11 * v17) * v11);
  *(float *)(a2 + 40) = cosval + (float)((float)(v14 * v17) * v14);
  v28 = (float)(v10 * v17) * v11;
  v29 = (float)(v10 * v17) * v14;
  v30 = (float)(v11 * v17) * v14;
  *(float *)(a2 + 16) = v28 - (float)(v19 * v14);
  *(float *)(a2 + 20) = v27;
  *(float *)a2 = v26;
  *(float *)(a2 + 4) = v28 + (float)(v19 * v14);
  *(float *)(a2 + 32) = (float)(v19 * v11) + v29;
  *(float *)(a2 + 36) = v30 - (float)(v19 * v10);
  *(float *)(a2 + 8) = v29 - (float)(v19 * v11);
  *(float *)(a2 + 24) = v30 + (float)(v19 * v10);
  v82[0] = v3;
  v82[1] = 6;
  v31 = v19 + (float)((float)(v18 * v10) * v10);
  v32 = v19 + (float)((float)(v18 * v11) * v11);
  v33 = v19 + (float)((float)(v18 * v14) * v14);
  v34 = (float)(v18 * v10) * v11;
  v35 = (float)(v18 * v10) * v14;
  v36 = (float)(v18 * v11) * v14;
  v37 = v34 - (float)(v14 * v17);
  *(float *)(a2 + 88) = v37;
  *(float *)(a2 + 92) = v32;
  v38 = (float)(v11 * v17) + v35;
  v39 = v34 + (float)(v14 * v17);
  *(float *)(a2 + 64) = v31;
  *(float *)(a2 + 68) = v39;
  v40 = v36 - (float)(v10 * v17);
  *(float *)(a2 + 112) = v38;
  *(float *)(a2 + 116) = v40;
  *(float *)(a2 + 120) = v33;
  v41 = v35 - (float)(v11 * v17);
  *(float *)(a2 + 72) = v41;
  v42 = v36 + (float)(v10 * v17);
  *(float *)(a2 + 96) = v42;
  *(_QWORD *)v86 = v82;
  *(_QWORD *)&v86[8] = v83;
  if (v6 == a2)
  {
    v85 = 0;
    v84 = 0;
    v81 = v22;
    v49 = v15;
    v50 = v12;
    v80 = v23;
    sub_20ABA653C((float *)&v84, (uint64_t **)v86);
    v23 = v80;
    v22 = v81;
    v12 = v50;
    v15 = v49;
    v13 = v11 * v11;
    *(_QWORD *)(a2 + 48) = v84;
    *(_DWORD *)(a2 + 56) = v85;
    v43 = *v8;
    v44 = v8[1];
    v46 = v8[2];
  }
  else
  {
    v43 = *v8;
    v44 = v8[1];
    v45 = (float)((float)(v31 * *v8) + 0.0) + (float)(v37 * v44);
    v46 = v8[2];
    v47 = v45 + (float)(v38 * v46);
    v48 = (float)(v39 * *v8) + 0.0;
    *(float *)(a2 + 48) = v47;
    *(float *)(a2 + 52) = (float)(v48 + (float)(v32 * v44)) + (float)(v40 * v46);
    *(float *)(a2 + 56) = (float)((float)((float)(v41 * v43) + 0.0) + (float)(v42 * v44)) + (float)(v33 * v46);
  }
  v51 = (float)((float)(v10 * v43) + (float)(v11 * v44)) + (float)(v14 * v46);
  v52 = (float)((float)(v21 + (float)(v23 * v12)) * v51) + (float)((float)(v18 + v18) * (float)(v10 * v43));
  v53 = (float)((float)(v21 + (float)(v23 * v13)) * v51) + (float)((float)(v18 + v18) * (float)(v11 * v44));
  *(float *)(a2 + 132) = (float)((float)(v21 + (float)(v23 * v15)) * v51)
                       + (float)((float)(v18 + v18) * (float)(v14 * v46));
  v54 = (float)(v23 * v51) * v10;
  v55 = (float)(v11 * v54) + (float)(v18 * (float)((float)(v44 * v10) + (float)(v43 * v11)));
  v56 = (float)(v54 * v14) + (float)(v18 * (float)((float)(v10 * v46) + (float)(v43 * v14)));
  v57 = (float)((float)((float)(v23 * v51) * v11) * v14)
      + (float)(v18 * (float)((float)(v11 * v46) + (float)(v44 * v14)));
  v58 = v22 * v51;
  v59 = (float)(v58 * v14) + (float)(v17 * v46);
  v60 = (float)(v58 * v11) + (float)(v17 * v44);
  v61 = (float)(v58 * v10) + (float)(v17 * v43);
  *(float *)(a2 + 100) = v55 - v59;
  *(float *)(a2 + 104) = v53;
  *(float *)(a2 + 76) = v52;
  *(float *)(a2 + 80) = v55 + v59;
  *(float *)(a2 + 84) = v56 - v60;
  *(float *)(a2 + 124) = v60 + v56;
  *(float *)(a2 + 128) = v57 - v61;
  *(float *)(a2 + 108) = v61 + v57;
  v62 = 0x300000000;
  for (i = 18; i != 36; i = v66 + 1)
  {
    *(_DWORD *)(v3 + 4 * i) = 0;
    v64 = HIDWORD(v62);
    v65 = (int)v62 < 2;
    if ((int)v62 < 2)
      v64 = 0;
    v66 = i + v64;
    v67 = (v62 + 1);
    v68 = v62 & 0xFFFFFFFF00000000;
    if (!v65)
      v67 = 0;
    v62 = v67 | v68;
  }
  v69 = *(_OWORD *)(a2 + 68);
  v70 = *(_OWORD *)(a2 + 88);
  *((_QWORD *)&v69 + 1) = *(_QWORD *)(a2 + 88);
  *(_DWORD *)v86 = *(_DWORD *)(a2 + 64);
  *(_OWORD *)&v86[4] = v69;
  v71 = (int *)v86;
  v87 = DWORD2(v70);
  v88 = *(_QWORD *)(a2 + 112);
  v89 = *(_DWORD *)(a2 + 120);
  v72 = 0x300000000;
  for (j = 21; j != 39; j = v77 + 1)
  {
    v74 = *v71++;
    *(_DWORD *)(v3 + 4 * j) = v74;
    v75 = HIDWORD(v72);
    v76 = (int)v72 < 2;
    if ((int)v72 < 2)
      v75 = 0;
    v77 = j + v75;
    v78 = (v72 + 1);
    v79 = v72 & 0xFFFFFFFF00000000;
    if (!v76)
      v78 = 0;
    v72 = v78 | v79;
  }
}

uint64_t cva::SE3AlgebraStorage<float,cva::MatrixRef<float const,6u,1u,false>>::serialize()
{
  return std::ostream::write();
}

uint64_t cva::SE3AlgebraStorage<double,cva::MatrixRef<double const,6u,1u,false>>::R(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t cva::SE3AlgebraStorage<double,cva::MatrixRef<double const,6u,1u,false>>::T(uint64_t a1)
{
  return *(_QWORD *)a1 - 8 * *(unsigned int *)(a1 + 12) + 8 * (*(_DWORD *)(a1 + 12) + 3);
}

uint64_t cva::SE3AlgebraStorage<double,cva::MatrixRef<double const,6u,1u,false>>::adjoint@<X0>(uint64_t result@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double *v3;
  double v4;
  double v5;
  double v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t i;
  uint64_t v32;
  unint64_t v33;
  BOOL v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t j;
  unint64_t v40;
  BOOL v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  __int128 v45;
  double v46;
  __int128 v47;
  double v48;
  __int128 v49;
  uint64_t v50;

  v2 = 0;
  a2[16] = 0u;
  a2[17] = 0u;
  a2[14] = 0u;
  a2[15] = 0u;
  a2[12] = 0u;
  a2[13] = 0u;
  a2[10] = 0u;
  a2[11] = 0u;
  a2[8] = 0u;
  a2[9] = 0u;
  a2[6] = 0u;
  a2[7] = 0u;
  a2[4] = 0u;
  a2[5] = 0u;
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  v3 = *(double **)result;
  v4 = **(double **)result;
  v5 = *(double *)(*(_QWORD *)result + 8);
  v6 = -*(double *)(*(_QWORD *)result + 16);
  *((_QWORD *)&v45 + 1) = *(_QWORD *)(*(_QWORD *)result + 16);
  v46 = -v5;
  *(double *)&v47 = v6;
  *((_QWORD *)&v47 + 1) = 0;
  v48 = v4;
  *(double *)&v49 = v5;
  *((double *)&v49 + 1) = -v4;
  v7 = 0x300000000;
  v8 = (uint64_t *)&v45;
  v50 = 0;
  do
  {
    v9 = *v8++;
    *((_QWORD *)a2 + v2) = v9;
    v10 = HIDWORD(v7);
    v11 = (int)v7 < 2;
    if ((int)v7 < 2)
      v10 = 0;
    v12 = v2 + v10;
    v13 = (v7 + 1);
    v14 = v7 & 0xFFFFFFFF00000000;
    if (!v11)
      v13 = 0;
    v7 = v13 | v14;
    v2 = v12 + 1;
  }
  while (v2 != 18);
  v45 = *a2;
  v46 = *((double *)a2 + 2);
  v47 = a2[3];
  v48 = *((double *)a2 + 8);
  v49 = a2[6];
  v15 = 0x300000000;
  v16 = (uint64_t *)&v45;
  v17 = 21;
  v50 = *((_QWORD *)a2 + 14);
  do
  {
    v18 = *v16++;
    *((_QWORD *)a2 + v17) = v18;
    v19 = HIDWORD(v15);
    v20 = (int)v15 < 2;
    if ((int)v15 < 2)
      v19 = 0;
    v21 = v17 + v19;
    v22 = (v15 + 1);
    v23 = v15 & 0xFFFFFFFF00000000;
    if (!v20)
      v22 = 0;
    v15 = v22 | v23;
    v17 = v21 + 1;
  }
  while (v17 != 39);
  v24 = (uint64_t)&v3[*(_DWORD *)(result + 12) + 3 - *(unsigned int *)(result + 12)];
  v25 = *(double *)v24;
  v26 = *(double *)(v24 + 8);
  v27 = *(double *)(v24 + 16);
  v28 = -*(double *)v24;
  *(_QWORD *)&v45 = 0;
  *((double *)&v45 + 1) = v27;
  v46 = -v26;
  *(double *)&v47 = -v27;
  *((_QWORD *)&v47 + 1) = 0;
  v48 = v25;
  *(double *)&v49 = v26;
  *((double *)&v49 + 1) = v28;
  v50 = 0;
  v29 = 0x300000000;
  v30 = (uint64_t *)&v45;
  for (i = 3; i != 21; i = v35 + 1)
  {
    v32 = *v30++;
    *((_QWORD *)a2 + i) = v32;
    v33 = HIDWORD(v29);
    v34 = (int)v29 < 2;
    if ((int)v29 < 2)
      v33 = 0;
    v35 = i + v33;
    v36 = (v29 + 1);
    v37 = v29 & 0xFFFFFFFF00000000;
    if (!v34)
      v36 = 0;
    v29 = v36 | v37;
  }
  v38 = 0x300000000;
  for (j = 18; j != 36; j = v42 + 1)
  {
    *((_QWORD *)a2 + j) = 0;
    v40 = HIDWORD(v38);
    v41 = (int)v38 < 2;
    if ((int)v38 < 2)
      v40 = 0;
    v42 = j + v40;
    v43 = (v38 + 1);
    v44 = v38 & 0xFFFFFFFF00000000;
    if (!v41)
      v43 = 0;
    v38 = v43 | v44;
  }
  return result;
}

double cva::SE3AlgebraStorage<double,cva::MatrixRef<double const,6u,1u,false>>::hat@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double result;

  v2 = *a1;
  v3 = *(double *)(*a1 + 16);
  *(double *)(a2 + 32) = -v3;
  v5 = *(double *)v2;
  v4 = *(double *)(v2 + 8);
  v6 = -*(double *)v2;
  *(double *)(a2 + 64) = v4;
  *(double *)(a2 + 72) = v6;
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(v2 + 24);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(double *)(a2 + 8) = v3;
  *(double *)(a2 + 16) = -v4;
  *(double *)(a2 + 48) = v5;
  result = *(double *)(v2 + 40);
  *(double *)(a2 + 112) = result;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  return result;
}

uint64_t cva::SE3AlgebraStorage<double,cva::MatrixRef<double const,6u,1u,false>>::exp@<X0>(float64x2_t **a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  float64x2_t *v4;
  float64_t v5;
  float64x2_t v6;
  float64x2_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double cosval;
  double v13;
  __double2 v14;
  __int128 v16;
  float64x2_t v17;
  float64x2_t v18;
  double v19[4];

  *(_OWORD *)(a2 + 64) = xmmword_20AC06120;
  *(_OWORD *)(a2 + 80) = unk_20AC06130;
  *(_OWORD *)(a2 + 96) = xmmword_20AC06140;
  *(_OWORD *)(a2 + 112) = unk_20AC06150;
  *(_OWORD *)a2 = xmmword_20AC060E0;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)algn_20AC060F0;
  *(_OWORD *)(a2 + 32) = xmmword_20AC06100;
  *(_OWORD *)(a2 + 48) = unk_20AC06110;
  v17 = 0u;
  v18 = 0u;
  v16 = 0u;
  v4 = *a1;
  v5 = (*a1)->f64[1] * a3;
  *(double *)&v16 = (*a1)->f64[0] * a3;
  *((float64_t *)&v16 + 1) = v5;
  v6 = vmulq_n_f64(v4[1], a3);
  v7 = vmulq_n_f64(v4[2], a3);
  v17 = v6;
  v18 = v7;
  v8 = *(double *)&v16 * *(double *)&v16 + v5 * v5 + vmulq_f64(v6, v6).f64[0];
  if (v8 >= 0.0000002635)
  {
    v13 = sqrt(v8);
    v14 = __sincos_stret(v13);
    cosval = v14.__cosval;
    v11 = v14.__sinval / v13;
    v9 = 1.0 / v8 * (1.0 - v14.__cosval);
    v10 = 1.0 / v8 * (1.0 - v14.__sinval / v13);
  }
  else
  {
    v9 = 0.5 - v8 * (v8 / -720.0 + 0.0416666667);
    v10 = 0.166666667 - v8 * (v8 / -5040.0 + 0.00833333333);
    v11 = 1.0 - v8 * v10;
    cosval = 1.0 - v8 * v9;
  }
  v19[2] = v9;
  v19[3] = v10;
  v19[0] = cosval;
  v19[1] = v11;
  return sub_20ABA36A0((uint64_t)&v16, v19, (float64x2_t *)a2);
}

void cva::SE3AlgebraStorage<double,cva::MatrixRef<double const,6u,1u,false>>::expJacobian(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  double *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  unint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double cosval;
  double v21;
  double v22;
  double v23;
  double v24;
  __double2 v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  unint64_t v62;
  uint64_t i;
  unint64_t v64;
  BOOL v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  BOOL v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  double v78;
  double v79;
  uint64_t *v80[2];
  _QWORD v81[2];
  _QWORD v82[2];
  __int128 v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;

  *(_OWORD *)(a2 + 64) = xmmword_20AC06120;
  *(_OWORD *)(a2 + 80) = unk_20AC06130;
  *(_OWORD *)(a2 + 96) = xmmword_20AC06140;
  *(_OWORD *)(a2 + 112) = unk_20AC06150;
  *(_OWORD *)a2 = xmmword_20AC060E0;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)algn_20AC060F0;
  *(_OWORD *)(a2 + 32) = xmmword_20AC06100;
  *(_OWORD *)(a2 + 48) = unk_20AC06110;
  v3 = a2 + 128;
  *(_OWORD *)(a2 + 168) = 0u;
  *(_OWORD *)(a2 + 184) = 0u;
  *(_OWORD *)(a2 + 200) = 0u;
  *(_OWORD *)(a2 + 216) = 0u;
  *(_OWORD *)(a2 + 232) = 0u;
  *(_OWORD *)(a2 + 248) = 0u;
  *(_QWORD *)(a2 + 408) = 0;
  *(_OWORD *)(a2 + 264) = 0u;
  *(_OWORD *)(a2 + 280) = 0u;
  *(_OWORD *)(a2 + 296) = 0u;
  *(_OWORD *)(a2 + 312) = 0u;
  *(_OWORD *)(a2 + 328) = 0u;
  *(_OWORD *)(a2 + 344) = 0u;
  *(_OWORD *)(a2 + 360) = 0u;
  *(_OWORD *)(a2 + 376) = 0u;
  *(_OWORD *)(a2 + 152) = 0u;
  *(_OWORD *)(a2 + 392) = 0u;
  v4 = *(double **)a1;
  v5 = *(unsigned int *)(a1 + 12);
  v6 = *(_QWORD *)a1 - 8 * v5;
  v7 = (v5 + 3);
  v8 = (double *)(v6 + 8 * v7);
  v9 = *(unsigned int *)(a1 + 8) | (unint64_t)(v7 << 32);
  v82[0] = v8;
  v82[1] = v9;
  v10 = *v4;
  v11 = v4[1];
  v12 = v10 * v10;
  v13 = v11 * v11;
  v14 = v4[2];
  v15 = v14 * v14;
  v16 = v10 * v10 + v11 * v11 + v14 * v14;
  if (v16 >= 0.0000002635)
  {
    v24 = sqrt(v16);
    v25 = __sincos_stret(v24);
    cosval = v25.__cosval;
    v12 = v10 * v10;
    v15 = v14 * v14;
    v19 = v25.__sinval / v24;
    v17 = 1.0 / v16 * (1.0 - v25.__cosval);
    v18 = 1.0 / v16 * (1.0 - v19);
    v21 = v18 - v17;
    v22 = 1.0 / v16 * (v19 + v17 * -2.0);
    v23 = 1.0 / v16 * (v17 + v18 * -3.0);
  }
  else
  {
    v17 = 0.5 - v16 * (v16 / -720.0 + 0.0416666667);
    v18 = 0.166666667 - v16 * (v16 / -5040.0 + 0.00833333333);
    v19 = 1.0 - v16 * v18;
    cosval = 1.0 - v16 * v17;
    v21 = v16 * (v16 * -0.00119047619 + 0.0333333333) + -0.333333333;
    v22 = v16 * (v16 * -0.000148809524 + 0.00555555556) + -0.0833333333;
    v23 = v16 * (v16 * -0.0000165343915 + 0.000793650794) + -0.0166666667;
  }
  v26 = cosval + v10 * v17 * v10;
  v27 = cosval + v11 * v17 * v11;
  *(double *)(a2 + 80) = cosval + v14 * v17 * v14;
  v28 = v10 * v17 * v11;
  v29 = v10 * v17 * v14;
  v30 = v11 * v17 * v14;
  *(double *)(a2 + 32) = v28 - v19 * v14;
  *(double *)(a2 + 40) = v27;
  *(double *)a2 = v26;
  *(double *)(a2 + 8) = v28 + v19 * v14;
  *(double *)(a2 + 64) = v19 * v11 + v29;
  *(double *)(a2 + 72) = v30 - v19 * v10;
  *(double *)(a2 + 16) = v29 - v19 * v11;
  *(double *)(a2 + 48) = v30 + v19 * v10;
  v81[0] = v3;
  v81[1] = 6;
  v31 = v19 + v18 * v10 * v10;
  v32 = v19 + v18 * v11 * v11;
  v33 = v19 + v18 * v14 * v14;
  v34 = v18 * v10 * v11;
  v35 = v18 * v10 * v14;
  v36 = v18 * v11 * v14;
  v37 = v34 - v14 * v17;
  *(double *)(a2 + 176) = v37;
  *(double *)(a2 + 184) = v32;
  v38 = v11 * v17 + v35;
  v39 = v34 + v14 * v17;
  *(double *)(a2 + 128) = v31;
  *(double *)(a2 + 136) = v39;
  v40 = v36 - v10 * v17;
  *(double *)(a2 + 224) = v38;
  *(double *)(a2 + 232) = v40;
  *(double *)(a2 + 240) = v33;
  v41 = v35 - v11 * v17;
  *(double *)(a2 + 144) = v41;
  v42 = v36 + v10 * v17;
  *(double *)(a2 + 192) = v42;
  v80[0] = v81;
  v80[1] = v82;
  if (v6 == a2)
  {
    v83 = 0uLL;
    v84 = 0;
    v79 = v22;
    v49 = v15;
    v50 = v12;
    v78 = v23;
    sub_20ABA7344((double *)&v83, v80);
    v23 = v78;
    v22 = v79;
    v12 = v50;
    v15 = v49;
    v13 = v11 * v11;
    *(_OWORD *)(a2 + 96) = v83;
    *(_QWORD *)(a2 + 112) = v84;
    v43 = *v8;
    v44 = v8[1];
    v46 = v8[2];
  }
  else
  {
    v43 = *v8;
    v44 = v8[1];
    v45 = v31 * *v8 + 0.0 + v37 * v44;
    v46 = v8[2];
    v47 = v45 + v38 * v46;
    v48 = v39 * *v8 + 0.0;
    *(double *)(a2 + 96) = v47;
    *(double *)(a2 + 104) = v48 + v32 * v44 + v40 * v46;
    *(double *)(a2 + 112) = v41 * v43 + 0.0 + v42 * v44 + v33 * v46;
  }
  v51 = v10 * v43 + v11 * v44 + v14 * v46;
  v52 = (v21 + v23 * v12) * v51 + (v18 + v18) * (v10 * v43);
  v53 = (v21 + v23 * v13) * v51 + (v18 + v18) * (v11 * v44);
  *(double *)(a2 + 264) = (v21 + v23 * v15) * v51 + (v18 + v18) * (v14 * v46);
  v54 = v23 * v51 * v10;
  v55 = v11 * v54 + v18 * (v44 * v10 + v43 * v11);
  v56 = v54 * v14 + v18 * (v10 * v46 + v43 * v14);
  v57 = v23 * v51 * v11 * v14 + v18 * (v11 * v46 + v44 * v14);
  v58 = v22 * v51;
  v59 = v58 * v14 + v17 * v46;
  v60 = v58 * v11 + v17 * v44;
  v61 = v58 * v10 + v17 * v43;
  *(double *)(a2 + 200) = v55 - v59;
  *(double *)(a2 + 208) = v53;
  *(double *)(a2 + 152) = v52;
  *(double *)(a2 + 160) = v55 + v59;
  *(double *)(a2 + 168) = v56 - v60;
  *(double *)(a2 + 248) = v60 + v56;
  *(double *)(a2 + 256) = v57 - v61;
  *(double *)(a2 + 216) = v61 + v57;
  v62 = 0x300000000;
  for (i = 18; i != 36; i = v66 + 1)
  {
    *(_QWORD *)(v3 + 8 * i) = 0;
    v64 = HIDWORD(v62);
    v65 = (int)v62 < 2;
    if ((int)v62 < 2)
      v64 = 0;
    v66 = i + v64;
    v67 = (v62 + 1);
    v68 = v62 & 0xFFFFFFFF00000000;
    if (!v65)
      v67 = 0;
    v62 = v67 | v68;
  }
  v83 = *(_OWORD *)(a2 + 128);
  v84 = *(_QWORD *)(a2 + 144);
  v85 = *(_OWORD *)(a2 + 176);
  v86 = *(_QWORD *)(a2 + 192);
  v87 = *(_OWORD *)(a2 + 224);
  v69 = 0x300000000;
  v70 = (uint64_t *)&v83;
  v71 = 21;
  v88 = *(_QWORD *)(a2 + 240);
  do
  {
    v72 = *v70++;
    *(_QWORD *)(v3 + 8 * v71) = v72;
    v73 = HIDWORD(v69);
    v74 = (int)v69 < 2;
    if ((int)v69 < 2)
      v73 = 0;
    v75 = v71 + v73;
    v76 = (v69 + 1);
    v77 = v69 & 0xFFFFFFFF00000000;
    if (!v74)
      v76 = 0;
    v69 = v76 | v77;
    v71 = v75 + 1;
  }
  while (v71 != 39);
}

uint64_t cva::SE3AlgebraStorage<double,cva::MatrixRef<double const,6u,1u,false>>::serialize()
{
  return std::ostream::write();
}

double cva::SO2GroupStorage<float,cva::Matrix<float,2u,2u,false>>::SO2GroupStorage(_OWORD *a1)
{
  double result;

  *(_QWORD *)&result = 1065353216;
  *a1 = xmmword_20AC05C50;
  return result;
}

{
  double result;

  *(_QWORD *)&result = 1065353216;
  *a1 = xmmword_20AC05C50;
  return result;
}

float *cva::SO2GroupStorage<float,cva::Matrix<float,2u,2u,false>>::SO2GroupStorage(float *a1, float a2)
{
  __float2 v3;

  v3 = __sincosf_stret(a2);
  *a1 = v3.__cosval;
  a1[1] = v3.__sinval;
  a1[2] = -v3.__sinval;
  a1[3] = v3.__cosval;
  return a1;
}

{
  __float2 v3;

  v3 = __sincosf_stret(a2);
  *a1 = v3.__cosval;
  a1[1] = v3.__sinval;
  a1[2] = -v3.__sinval;
  a1[3] = v3.__cosval;
  return a1;
}

double cva::SO2GroupStorage<float,cva::Matrix<float,2u,2u,false>>::lplus(float *a1, float *a2)
{
  __float2 v3;
  double result;
  _DWORD v5[4];
  float *v6[2];
  __int128 v7;

  v3 = __sincosf_stret(*a2);
  v5[0] = LODWORD(v3.__cosval);
  v5[1] = LODWORD(v3.__sinval);
  *(float *)&v5[2] = -v3.__sinval;
  v5[3] = LODWORD(v3.__cosval);
  v6[0] = (float *)v5;
  v6[1] = a1;
  v7 = 0uLL;
  sub_20ABA8A8C((uint64_t)&v7, v6);
  result = *(double *)&v7;
  *(_OWORD *)a1 = v7;
  return result;
}

double sub_20ABA8A8C(uint64_t a1, float **a2)
{
  float *v3;
  float *v4;
  double result;
  __int128 v6;

  v3 = *a2;
  if (*a2 == (float *)a1 || (v4 = a2[1], v4 == (float *)a1))
  {
    v6 = 0uLL;
    sub_20ABA8A8C(&v6);
    result = *(double *)&v6;
    *(_OWORD *)a1 = v6;
  }
  else
  {
    *(float *)a1 = (float)((float)(*v3 * *v4) + 0.0) + (float)(v3[2] * v4[1]);
    *(float *)(a1 + 4) = (float)((float)(v3[1] * *v4) + 0.0) + (float)(v3[3] * v4[1]);
    *(float *)(a1 + 8) = (float)((float)(*v3 * v4[2]) + 0.0) + (float)(v3[2] * v4[3]);
    *(float *)&result = (float)((float)(v3[1] * v4[2]) + 0.0) + (float)(v3[3] * v4[3]);
    *(_DWORD *)(a1 + 12) = LODWORD(result);
  }
  return result;
}

double cva::SO2AlgebraStorage<float,cva::MatrixRef<float const,1u,1u,false>>::SO2AlgebraStorage(_QWORD *a1, uint64_t a2)
{
  double result;

  *a1 = a2;
  *(_QWORD *)&result = 1;
  a1[1] = 1;
  return result;
}

{
  double result;

  *a1 = a2;
  *(_QWORD *)&result = 1;
  a1[1] = 1;
  return result;
}

{
  double result;

  *a1 = a2;
  *(_QWORD *)&result = 1;
  a1[1] = 1;
  return result;
}

{
  double result;

  *a1 = a2;
  *(_QWORD *)&result = 1;
  a1[1] = 1;
  return result;
}

float cva::SO2AlgebraStorage<float,cva::MatrixRef<float const,1u,1u,false>>::exp@<S0>(float **a1@<X0>, float *a2@<X8>)
{
  __float2 v3;
  float result;

  v3 = __sincosf_stret(**a1);
  *a2 = v3.__cosval;
  a2[1] = v3.__sinval;
  result = -v3.__sinval;
  a2[2] = -v3.__sinval;
  a2[3] = v3.__cosval;
  return result;
}

double cva::SO2GroupStorage<float,cva::Matrix<float,2u,2u,false>>::rplus(float *a1, float *a2)
{
  __float2 v3;
  double result;
  _DWORD v5[4];
  float *v6[2];
  __int128 v7;

  v3 = __sincosf_stret(*a2);
  v5[0] = LODWORD(v3.__cosval);
  v5[1] = LODWORD(v3.__sinval);
  *(float *)&v5[2] = -v3.__sinval;
  v5[3] = LODWORD(v3.__cosval);
  v6[0] = a1;
  v6[1] = (float *)v5;
  v7 = 0uLL;
  sub_20ABA8A8C((uint64_t)&v7, v6);
  result = *(double *)&v7;
  *(_OWORD *)a1 = v7;
  return result;
}

float *cva::SO2GroupStorage<float,cva::Matrix<float,2u,2u,false>>::transform@<X0>(float *a1@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  float *v4[2];

  v4[0] = a1;
  v4[1] = a2;
  *(_QWORD *)a3 = 0;
  return sub_20ABA8C10(a3, v4);
}

float *sub_20ABA8C10(float *result, float **a2)
{
  float *v2;
  float *v3;
  float *v4;
  uint64_t v5;

  v2 = result;
  v3 = *a2;
  if (*a2 == result || (v4 = a2[1], v4 == result))
  {
    v5 = 0;
    result = (float *)sub_20ABA8C10(&v5);
    *(_QWORD *)v2 = v5;
  }
  else
  {
    *result = (float)((float)(*v3 * *v4) + 0.0) + (float)(v3[2] * v4[1]);
    result[1] = (float)((float)(v3[1] * *v4) + 0.0) + (float)(v3[3] * v4[1]);
  }
  return result;
}

float *cva::SO2GroupStorage<float,cva::Matrix<float,2u,2u,false>>::inverseTransform@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, float *a3@<X8>)
{
  uint64_t v4;
  _QWORD v5[2];

  v4 = a1;
  v5[0] = &v4;
  v5[1] = a2;
  *(_QWORD *)a3 = 0;
  return sub_20ABA8CCC(a3, (uint64_t)v5);
}

float *sub_20ABA8CCC(float *result, uint64_t a2)
{
  float *v2;
  float *v3;
  float *v4;
  uint64_t v5;

  v2 = result;
  v3 = *(float **)(a2 + 8);
  if (v3 == result)
  {
    v5 = 0;
    result = (float *)sub_20ABA8CCC(&v5);
    *(_QWORD *)v2 = v5;
  }
  else
  {
    v4 = **(float ***)a2;
    *result = (float)((float)(v4[1] * v3[1]) + (float)(*v4 * *v3)) + 0.0;
    result[1] = (float)((float)(v4[3] * v3[1]) + (float)(v4[2] * *v3)) + 0.0;
  }
  return result;
}

float cva::SO2GroupStorage<float,cva::Matrix<float,2u,2u,false>>::transformJacobian@<S0>(float *a1@<X1>, uint64_t a2@<X8>)
{
  int v2;
  float result;

  v2 = *(_DWORD *)a1;
  result = -a1[1];
  *(float *)a2 = result;
  *(_DWORD *)(a2 + 4) = v2;
  return result;
}

float *cva::SO2GroupStorage<float,cva::Matrix<float,2u,2u,false>>::inverseTransformJacobian@<X0>(uint64_t a1@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  float v3;
  uint64_t v5;
  _QWORD v6[2];

  v3 = -*a2;
  *a3 = a2[1];
  a3[1] = v3;
  v5 = a1;
  v6[0] = &v5;
  v6[1] = a3;
  return sub_20ABA8CCC(a3, (uint64_t)v6);
}

void cva::SO2GroupStorage<float,cva::Matrix<float,2u,2u,false>>::log(float *a1@<X0>, float *a2@<X8>)
{
  float v3;

  v3 = atan2f(a1[1], *a1);
  *a2 = v3;
  if (v3 <= 0.0)
  {
    if (v3 > -3.1416)
      return;
    do
      v3 = v3 + 3.1416;
    while (v3 <= -3.1416);
  }
  else
  {
    if (v3 < 3.1416)
      return;
    do
      v3 = v3 + -3.1416;
    while (v3 >= 3.1416);
  }
  *a2 = v3;
}

_DWORD *cva::SO2AlgebraStorage<float,cva::Matrix<float,1u,1u,false>>::SO2AlgebraStorage(_DWORD *result)
{
  *result = 0;
  return result;
}

{
  *result = 0;
  return result;
}

void cva::SO2GroupStorage<float,cva::Matrix<float,2u,2u,false>>::logJacobian(float *a1@<X0>, uint64_t a2@<X8>)
{
  float v3;

  v3 = atan2f(a1[1], *a1);
  *(float *)a2 = v3;
  if (v3 <= 0.0)
  {
    if (v3 <= -3.1416)
    {
      do
        v3 = v3 + 3.1416;
      while (v3 <= -3.1416);
      goto LABEL_7;
    }
  }
  else if (v3 >= 3.1416)
  {
    do
      v3 = v3 + -3.1416;
    while (v3 >= 3.1416);
LABEL_7:
    *(float *)a2 = v3;
  }
  *(_DWORD *)(a2 + 4) = 1065353216;
}

float32x2x2_t *cva::SO2GroupStorage<float,cva::Matrix<float,2u,2u,false>>::inverse@<X0>(float32x2x2_t *result@<X0>, float *a2@<X8>)
{
  float32x2x2_t v2;
  unint64_t v3;

  v2 = *result;
  v3 = vextq_s8((int8x16_t)v2, (int8x16_t)v2, 8uLL).u64[0];
  vst2_f32(a2, v2);
  return result;
}

void cva::SO2GroupStorage<float,cva::Matrix<float,2u,2u,false>>::adjoint(_DWORD *a1@<X8>)
{
  *a1 = 1065353216;
}

void cva::SO2GroupStorage<float,cva::Matrix<float,2u,2u,false>>::enforce(float *a1)
{
  float v2;
  __float2 v3;

  v2 = atan2f(a1[1], *a1);
  if (v2 <= 0.0)
  {
    for (; v2 <= -3.1416; v2 = v2 + 3.1416)
      ;
  }
  else
  {
    for (; v2 >= 3.1416; v2 = v2 + -3.1416)
      ;
  }
  v3 = __sincosf_stret(v2);
  *a1 = v3.__cosval;
  a1[1] = v3.__sinval;
  a1[2] = -v3.__sinval;
  a1[3] = v3.__cosval;
}

float cva::SO2AlgebraStorage<float,cva::Matrix<float,1u,1u,false>>::exp@<S0>(float *a1@<X0>, float *a2@<X8>)
{
  __float2 v3;
  float result;

  v3 = __sincosf_stret(*a1);
  *a2 = v3.__cosval;
  a2[1] = v3.__sinval;
  result = -v3.__sinval;
  a2[2] = -v3.__sinval;
  a2[3] = v3.__cosval;
  return result;
}

uint64_t cva::SO2GroupStorage<float,cva::Matrix<float,2u,2u,false>>::serialize()
{
  return std::ostream::write();
}

uint64_t cva::SO2GroupStorage<float,cva::Matrix<float,2u,2u,false>>::deserialize()
{
  return std::istream::read();
}

_QWORD *cva::SO2GroupStorage<double,cva::Matrix<double,2u,2u,false>>::SO2GroupStorage(_QWORD *result)
{
  *result = 0x3FF0000000000000;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0x3FF0000000000000;
  return result;
}

{
  *result = 0x3FF0000000000000;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0x3FF0000000000000;
  return result;
}

double *cva::SO2GroupStorage<double,cva::Matrix<double,2u,2u,false>>::SO2GroupStorage(double *a1, double a2)
{
  __double2 v3;

  v3 = __sincos_stret(a2);
  *a1 = v3.__cosval;
  a1[1] = v3.__sinval;
  a1[2] = -v3.__sinval;
  a1[3] = v3.__cosval;
  return a1;
}

{
  __double2 v3;

  v3 = __sincos_stret(a2);
  *a1 = v3.__cosval;
  a1[1] = v3.__sinval;
  a1[2] = -v3.__sinval;
  a1[3] = v3.__cosval;
  return a1;
}

double cva::SO2GroupStorage<double,cva::Matrix<double,2u,2u,false>>::lplus(uint64_t a1, double *a2)
{
  __double2 v3;
  double result;
  __int128 v5;
  _QWORD v6[4];
  double *v7[2];
  __int128 v8;
  __int128 v9;

  v3 = __sincos_stret(*a2);
  v6[0] = *(_QWORD *)&v3.__cosval;
  v6[1] = *(_QWORD *)&v3.__sinval;
  *(double *)&v6[2] = -v3.__sinval;
  v6[3] = *(_QWORD *)&v3.__cosval;
  v7[0] = (double *)v6;
  v7[1] = (double *)a1;
  v8 = 0u;
  v9 = 0u;
  sub_20ABA90FC((uint64_t)&v8, v7);
  result = *(double *)&v8;
  v5 = v9;
  *(_OWORD *)a1 = v8;
  *(_OWORD *)(a1 + 16) = v5;
  return result;
}

double sub_20ABA90FC(uint64_t a1, double **a2)
{
  double *v3;
  double *v4;
  double result;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v3 = *a2;
  if (*a2 == (double *)a1 || (v4 = a2[1], v4 == (double *)a1))
  {
    v7 = 0u;
    v8 = 0u;
    sub_20ABA90FC(&v7);
    result = *(double *)&v7;
    v6 = v8;
    *(_OWORD *)a1 = v7;
    *(_OWORD *)(a1 + 16) = v6;
  }
  else
  {
    *(double *)a1 = *v3 * *v4 + 0.0 + v3[2] * v4[1];
    *(double *)(a1 + 8) = v3[1] * *v4 + 0.0 + v3[3] * v4[1];
    *(double *)(a1 + 16) = *v3 * v4[2] + 0.0 + v3[2] * v4[3];
    result = v3[1] * v4[2] + 0.0 + v3[3] * v4[3];
    *(double *)(a1 + 24) = result;
  }
  return result;
}

double cva::SO2AlgebraStorage<double,cva::MatrixRef<double const,1u,1u,false>>::SO2AlgebraStorage(_QWORD *a1, uint64_t a2)
{
  double result;

  *a1 = a2;
  *(_QWORD *)&result = 1;
  a1[1] = 1;
  return result;
}

{
  double result;

  *a1 = a2;
  *(_QWORD *)&result = 1;
  a1[1] = 1;
  return result;
}

{
  double result;

  *a1 = a2;
  *(_QWORD *)&result = 1;
  a1[1] = 1;
  return result;
}

{
  double result;

  *a1 = a2;
  *(_QWORD *)&result = 1;
  a1[1] = 1;
  return result;
}

double cva::SO2AlgebraStorage<double,cva::MatrixRef<double const,1u,1u,false>>::exp@<D0>(double **a1@<X0>, double *a2@<X8>)
{
  __double2 v3;
  double result;

  v3 = __sincos_stret(**a1);
  *a2 = v3.__cosval;
  a2[1] = v3.__sinval;
  result = -v3.__sinval;
  a2[2] = -v3.__sinval;
  a2[3] = v3.__cosval;
  return result;
}

double cva::SO2GroupStorage<double,cva::Matrix<double,2u,2u,false>>::rplus(uint64_t a1, double *a2)
{
  __double2 v3;
  double result;
  __int128 v5;
  _QWORD v6[4];
  double *v7[2];
  __int128 v8;
  __int128 v9;

  v3 = __sincos_stret(*a2);
  v6[0] = *(_QWORD *)&v3.__cosval;
  v6[1] = *(_QWORD *)&v3.__sinval;
  *(double *)&v6[2] = -v3.__sinval;
  v6[3] = *(_QWORD *)&v3.__cosval;
  v7[0] = (double *)a1;
  v7[1] = (double *)v6;
  v8 = 0u;
  v9 = 0u;
  sub_20ABA90FC((uint64_t)&v8, v7);
  result = *(double *)&v8;
  v5 = v9;
  *(_OWORD *)a1 = v8;
  *(_OWORD *)(a1 + 16) = v5;
  return result;
}

double cva::SO2GroupStorage<double,cva::Matrix<double,2u,2u,false>>::transform@<D0>(double *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  double *v4[2];

  v4[0] = a1;
  v4[1] = a2;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  return sub_20ABA9288((double *)a3, v4);
}

double sub_20ABA9288(double *a1, double **a2)
{
  double *v3;
  double *v4;
  double result;
  __int128 v6;

  v3 = *a2;
  if (*a2 == a1 || (v4 = a2[1], v4 == a1))
  {
    v6 = 0uLL;
    sub_20ABA9288(&v6);
    result = *(double *)&v6;
    *(_OWORD *)a1 = v6;
  }
  else
  {
    *a1 = *v3 * *v4 + 0.0 + v3[2] * v4[1];
    result = v3[1] * *v4 + 0.0 + v3[3] * v4[1];
    a1[1] = result;
  }
  return result;
}

double cva::SO2GroupStorage<double,cva::Matrix<double,2u,2u,false>>::inverseTransform@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD v5[2];

  v4 = a1;
  v5[0] = &v4;
  v5[1] = a2;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  return sub_20ABA9344((double *)a3, (uint64_t)v5);
}

double sub_20ABA9344(double *a1, uint64_t a2)
{
  double *v3;
  double *v4;
  double result;
  __int128 v6;

  v3 = *(double **)(a2 + 8);
  if (v3 == a1)
  {
    v6 = 0uLL;
    sub_20ABA9344(&v6);
    result = *(double *)&v6;
    *(_OWORD *)a1 = v6;
  }
  else
  {
    v4 = **(double ***)a2;
    *a1 = v4[1] * v3[1] + *v4 * *v3 + 0.0;
    result = v4[3] * v3[1] + v4[2] * *v3 + 0.0;
    a1[1] = result;
  }
  return result;
}

double cva::SO2GroupStorage<double,cva::Matrix<double,2u,2u,false>>::transformJacobian@<D0>(double *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)a1;
  result = -a1[1];
  *(double *)a2 = result;
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

double cva::SO2GroupStorage<double,cva::Matrix<double,2u,2u,false>>::inverseTransformJacobian@<D0>(uint64_t a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  double v3;
  uint64_t v5;
  _QWORD v6[2];

  v3 = -*a2;
  *a3 = a2[1];
  a3[1] = v3;
  v5 = a1;
  v6[0] = &v5;
  v6[1] = a3;
  return sub_20ABA9344(a3, (uint64_t)v6);
}

void cva::SO2GroupStorage<double,cva::Matrix<double,2u,2u,false>>::log(long double *a1@<X0>, double *a2@<X8>)
{
  double v3;

  v3 = atan2(a1[1], *a1);
  *a2 = v3;
  if (v3 <= 0.0)
  {
    if (v3 > -3.14159265)
      return;
    do
      v3 = v3 + 3.14159265;
    while (v3 <= -3.14159265);
  }
  else
  {
    if (v3 < 3.14159265)
      return;
    do
      v3 = v3 + -3.14159265;
    while (v3 >= 3.14159265);
  }
  *a2 = v3;
}

_QWORD *cva::SO2AlgebraStorage<double,cva::Matrix<double,1u,1u,false>>::SO2AlgebraStorage(_QWORD *result)
{
  *result = 0;
  return result;
}

{
  *result = 0;
  return result;
}

void cva::SO2GroupStorage<double,cva::Matrix<double,2u,2u,false>>::logJacobian(long double *a1@<X0>, uint64_t a2@<X8>)
{
  double v3;

  v3 = atan2(a1[1], *a1);
  *(double *)a2 = v3;
  if (v3 <= 0.0)
  {
    if (v3 <= -3.14159265)
    {
      do
        v3 = v3 + 3.14159265;
      while (v3 <= -3.14159265);
      goto LABEL_7;
    }
  }
  else if (v3 >= 3.14159265)
  {
    do
      v3 = v3 + -3.14159265;
    while (v3 >= 3.14159265);
LABEL_7:
    *(double *)a2 = v3;
  }
  *(_QWORD *)(a2 + 8) = 0x3FF0000000000000;
}

int8x16_t cva::SO2GroupStorage<double,cva::Matrix<double,2u,2u,false>>::inverse@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int8x16_t result;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  result = vextq_s8(*(int8x16_t *)(a1 + 8), *(int8x16_t *)(a1 + 8), 8uLL);
  *(int8x16_t *)(a2 + 8) = result;
  *(_QWORD *)(a2 + 24) = v2;
  return result;
}

void cva::SO2GroupStorage<double,cva::Matrix<double,2u,2u,false>>::adjoint(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
}

void cva::SO2GroupStorage<double,cva::Matrix<double,2u,2u,false>>::enforce(uint64_t a1)
{
  double v2;
  __double2 v3;

  v2 = atan2(*(long double *)(a1 + 8), *(long double *)a1);
  if (v2 <= 0.0)
  {
    for (; v2 <= -3.14159265; v2 = v2 + 3.14159265)
      ;
  }
  else
  {
    for (; v2 >= 3.14159265; v2 = v2 + -3.14159265)
      ;
  }
  v3 = __sincos_stret(v2);
  *(double *)a1 = v3.__cosval;
  *(double *)(a1 + 8) = v3.__sinval;
  *(double *)(a1 + 16) = -v3.__sinval;
  *(double *)(a1 + 24) = v3.__cosval;
}

double cva::SO2AlgebraStorage<double,cva::Matrix<double,1u,1u,false>>::exp@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  __double2 v3;
  double result;

  v3 = __sincos_stret(*a1);
  *a2 = v3.__cosval;
  a2[1] = v3.__sinval;
  result = -v3.__sinval;
  a2[2] = -v3.__sinval;
  a2[3] = v3.__cosval;
  return result;
}

uint64_t cva::SO2GroupStorage<double,cva::Matrix<double,2u,2u,false>>::serialize()
{
  return std::ostream::write();
}

uint64_t cva::SO2GroupStorage<double,cva::Matrix<double,2u,2u,false>>::deserialize()
{
  return std::istream::read();
}

double cva::SO2GroupStorage<float,cva::MatrixRef<float const,2u,2u,false>>::SO2GroupStorage(_QWORD *a1, uint64_t a2)
{
  double result;

  *a1 = a2;
  *(_QWORD *)&result = 2;
  a1[1] = 2;
  return result;
}

{
  double result;

  *a1 = a2;
  *(_QWORD *)&result = 2;
  a1[1] = 2;
  return result;
}

{
  double result;

  *a1 = a2;
  *(_QWORD *)&result = 2;
  a1[1] = 2;
  return result;
}

{
  double result;

  *a1 = a2;
  *(_QWORD *)&result = 2;
  a1[1] = 2;
  return result;
}

float *cva::SO2GroupStorage<float,cva::MatrixRef<float const,2u,2u,false>>::transform@<X0>(float *a1@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  float *v4[2];

  v4[0] = a1;
  v4[1] = a2;
  *(_QWORD *)a3 = 0;
  return sub_20AB9B1F0(a3, v4);
}

float *cva::SO2GroupStorage<float,cva::MatrixRef<float const,2u,2u,false>>::inverseTransform@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, float *a3@<X8>)
{
  uint64_t v4;
  uint64_t *v5[2];

  v4 = a1;
  v5[0] = &v4;
  v5[1] = a2;
  *(_QWORD *)a3 = 0;
  return sub_20AB9B358(a3, v5);
}

float cva::SO2GroupStorage<float,cva::MatrixRef<float const,2u,2u,false>>::transformJacobian@<S0>(float *a1@<X1>, uint64_t a2@<X8>)
{
  int v2;
  float result;

  v2 = *(_DWORD *)a1;
  result = -a1[1];
  *(float *)a2 = result;
  *(_DWORD *)(a2 + 4) = v2;
  return result;
}

float *cva::SO2GroupStorage<float,cva::MatrixRef<float const,2u,2u,false>>::inverseTransformJacobian@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  float v3;
  uint64_t v5;
  uint64_t *v6[2];

  v3 = -*(float *)a2;
  *(_DWORD *)a3 = *(_DWORD *)(a2 + 4);
  *(float *)(a3 + 4) = v3;
  v5 = a1;
  v6[0] = &v5;
  v6[1] = (uint64_t *)a3;
  return sub_20AB9B358((float *)a3, v6);
}

void cva::SO2GroupStorage<float,cva::MatrixRef<float const,2u,2u,false>>::log(float **a1@<X0>, float *a2@<X8>)
{
  float v3;

  v3 = atan2f((*a1)[1], **a1);
  *a2 = v3;
  if (v3 <= 0.0)
  {
    if (v3 > -3.1416)
      return;
    do
      v3 = v3 + 3.1416;
    while (v3 <= -3.1416);
  }
  else
  {
    if (v3 < 3.1416)
      return;
    do
      v3 = v3 + -3.1416;
    while (v3 >= 3.1416);
  }
  *a2 = v3;
}

void cva::SO2GroupStorage<float,cva::MatrixRef<float const,2u,2u,false>>::logJacobian(float **a1@<X0>, uint64_t a2@<X8>)
{
  float v3;

  v3 = atan2f((*a1)[1], **a1);
  *(float *)a2 = v3;
  if (v3 <= 0.0)
  {
    if (v3 <= -3.1416)
    {
      do
        v3 = v3 + 3.1416;
      while (v3 <= -3.1416);
      goto LABEL_7;
    }
  }
  else if (v3 >= 3.1416)
  {
    do
      v3 = v3 + -3.1416;
    while (v3 >= 3.1416);
LABEL_7:
    *(float *)a2 = v3;
  }
  *(_DWORD *)(a2 + 4) = 1065353216;
}

float cva::SO2GroupStorage<float,cva::MatrixRef<float const,2u,2u,false>>::inverse@<S0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  float result;
  int v4;
  int v5;

  v2 = a1[2];
  result = *(float *)(*(_QWORD *)a1 + 4 * v2);
  v4 = *(_DWORD *)(*(_QWORD *)a1 + 4);
  v5 = *(_DWORD *)(*(_QWORD *)a1 + 4 * (v2 + 1));
  *(_DWORD *)a2 = **(_DWORD **)a1;
  *(float *)(a2 + 4) = result;
  *(_DWORD *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 12) = v5;
  return result;
}

void cva::SO2GroupStorage<float,cva::MatrixRef<float const,2u,2u,false>>::adjoint(_DWORD *a1@<X8>)
{
  *a1 = 1065353216;
}

uint64_t cva::SO2GroupStorage<float,cva::MatrixRef<float const,2u,2u,false>>::serialize(uint64_t result)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_DWORD *)(result + 8);
  if (2 * v1)
  {
    v2 = *(_QWORD *)result;
    v3 = *(_QWORD *)result + 4 * (2 * v1);
    v4 = (unint64_t)(v1 - 2) << 32;
    do
    {
      result = std::ostream::write();
      v5 = HIDWORD(v4);
      if ((int)v4 < 1)
        v5 = 0;
      v6 = v2 + 4 * v5;
      v7 = (v4 + 1);
      if ((int)v4 >= 1)
        v7 = 0;
      v4 = v7 | v4 & 0xFFFFFFFF00000000;
      v2 = v6 + 4;
    }
    while (v6 + 4 != v3);
  }
  return result;
}

double cva::SO2GroupStorage<double,cva::MatrixRef<double const,2u,2u,false>>::SO2GroupStorage(_QWORD *a1, uint64_t a2)
{
  double result;

  *a1 = a2;
  *(_QWORD *)&result = 2;
  a1[1] = 2;
  return result;
}

{
  double result;

  *a1 = a2;
  *(_QWORD *)&result = 2;
  a1[1] = 2;
  return result;
}

{
  double result;

  *a1 = a2;
  *(_QWORD *)&result = 2;
  a1[1] = 2;
  return result;
}

{
  double result;

  *a1 = a2;
  *(_QWORD *)&result = 2;
  a1[1] = 2;
  return result;
}

double *cva::SO2GroupStorage<double,cva::MatrixRef<double const,2u,2u,false>>::transform@<X0>(double *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  double *v4[2];

  v4[0] = a1;
  v4[1] = a2;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  return sub_20AB9C2E0((double *)a3, v4);
}

double cva::SO2GroupStorage<double,cva::MatrixRef<double const,2u,2u,false>>::inverseTransform@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t *v5[2];

  v4 = a1;
  v5[0] = &v4;
  v5[1] = a2;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  return sub_20AB9C470((double *)a3, v5);
}

double cva::SO2GroupStorage<double,cva::MatrixRef<double const,2u,2u,false>>::transformJacobian@<D0>(double *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)a1;
  result = -a1[1];
  *(double *)a2 = result;
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

double cva::SO2GroupStorage<double,cva::MatrixRef<double const,2u,2u,false>>::inverseTransformJacobian@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v3;
  uint64_t v5;
  uint64_t *v6[2];

  v3 = -*(double *)a2;
  *(_QWORD *)a3 = *(_QWORD *)(a2 + 8);
  *(double *)(a3 + 8) = v3;
  v5 = a1;
  v6[0] = &v5;
  v6[1] = (uint64_t *)a3;
  return sub_20AB9C470((double *)a3, v6);
}

void cva::SO2GroupStorage<double,cva::MatrixRef<double const,2u,2u,false>>::log(long double **a1@<X0>, double *a2@<X8>)
{
  double v3;

  v3 = atan2((*a1)[1], **a1);
  *a2 = v3;
  if (v3 <= 0.0)
  {
    if (v3 > -3.14159265)
      return;
    do
      v3 = v3 + 3.14159265;
    while (v3 <= -3.14159265);
  }
  else
  {
    if (v3 < 3.14159265)
      return;
    do
      v3 = v3 + -3.14159265;
    while (v3 >= 3.14159265);
  }
  *a2 = v3;
}

void cva::SO2GroupStorage<double,cva::MatrixRef<double const,2u,2u,false>>::logJacobian(long double **a1@<X0>, uint64_t a2@<X8>)
{
  double v3;

  v3 = atan2((*a1)[1], **a1);
  *(double *)a2 = v3;
  if (v3 <= 0.0)
  {
    if (v3 <= -3.14159265)
    {
      do
        v3 = v3 + 3.14159265;
      while (v3 <= -3.14159265);
      goto LABEL_7;
    }
  }
  else if (v3 >= 3.14159265)
  {
    do
      v3 = v3 + -3.14159265;
    while (v3 >= 3.14159265);
LABEL_7:
    *(double *)a2 = v3;
  }
  *(_QWORD *)(a2 + 8) = 0x3FF0000000000000;
}

double cva::SO2GroupStorage<double,cva::MatrixRef<double const,2u,2u,false>>::inverse@<D0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[2];
  result = *(double *)(*(_QWORD *)a1 + 8 * v2);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 8 * (v2 + 1));
  *(_QWORD *)a2 = **(_QWORD **)a1;
  *(double *)(a2 + 8) = result;
  *(_QWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = v5;
  return result;
}

void cva::SO2GroupStorage<double,cva::MatrixRef<double const,2u,2u,false>>::adjoint(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
}

uint64_t cva::SO2GroupStorage<double,cva::MatrixRef<double const,2u,2u,false>>::serialize(uint64_t result)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_DWORD *)(result + 8);
  if (2 * v1)
  {
    v2 = *(_QWORD *)result;
    v3 = *(_QWORD *)result + 8 * (2 * v1);
    v4 = (unint64_t)(v1 - 2) << 32;
    do
    {
      result = std::ostream::write();
      v5 = HIDWORD(v4);
      if ((int)v4 < 1)
        v5 = 0;
      v6 = v2 + 8 * v5;
      v7 = (v4 + 1);
      if ((int)v4 >= 1)
        v7 = 0;
      v4 = v7 | v4 & 0xFFFFFFFF00000000;
      v2 = v6 + 8;
    }
    while (v6 + 8 != v3);
  }
  return result;
}

void cva::SO2AlgebraStorage<float,cva::Matrix<float,1u,1u,false>>::adjoint(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

float cva::SO2AlgebraStorage<float,cva::Matrix<float,1u,1u,false>>::hat@<S0>(float *a1@<X0>, uint64_t a2@<X8>)
{
  float result;
  float v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  result = *a1;
  v3 = -*a1;
  *(float *)(a2 + 4) = *a1;
  *(float *)(a2 + 8) = v3;
  return result;
}

float cva::SO2AlgebraStorage<float,cva::Matrix<float,1u,1u,false>>::exp@<S0>(float *a1@<X0>, float *a2@<X8>, float a3@<S0>)
{
  __float2 v4;
  float result;

  v4 = __sincosf_stret(*a1 * a3);
  *a2 = v4.__cosval;
  a2[1] = v4.__sinval;
  result = -v4.__sinval;
  a2[2] = -v4.__sinval;
  a2[3] = v4.__cosval;
  return result;
}

float cva::SO2AlgebraStorage<float,cva::Matrix<float,1u,1u,false>>::expJacobian@<S0>(float *a1@<X0>, uint64_t a2@<X8>)
{
  __float2 v3;
  float result;

  v3 = __sincosf_stret(*a1);
  *(float *)a2 = v3.__cosval;
  *(float *)(a2 + 4) = v3.__sinval;
  result = -v3.__sinval;
  *(float *)(a2 + 8) = -v3.__sinval;
  *(float *)(a2 + 12) = v3.__cosval;
  *(_DWORD *)(a2 + 16) = 1065353216;
  return result;
}

float *cva::SO2AlgebraStorage<float,cva::Matrix<float,1u,1u,false>>::enforce(float *result)
{
  float v1;

  v1 = *result;
  if (*result <= 0.0)
  {
    if (v1 > -3.1416)
      return result;
    do
      v1 = v1 + 3.1416;
    while (v1 <= -3.1416);
  }
  else
  {
    if (v1 < 3.1416)
      return result;
    do
      v1 = v1 + -3.1416;
    while (v1 >= 3.1416);
  }
  *result = v1;
  return result;
}

uint64_t cva::SO2AlgebraStorage<float,cva::Matrix<float,1u,1u,false>>::serialize()
{
  return std::ostream::write();
}

uint64_t cva::SO2AlgebraStorage<float,cva::Matrix<float,1u,1u,false>>::deserialize()
{
  return std::istream::read();
}

void cva::SO2AlgebraStorage<double,cva::Matrix<double,1u,1u,false>>::adjoint(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

double cva::SO2AlgebraStorage<double,cva::Matrix<double,1u,1u,false>>::hat@<D0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  double v3;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  result = *a1;
  v3 = -*a1;
  *(double *)(a2 + 8) = *a1;
  *(double *)(a2 + 16) = v3;
  return result;
}

double cva::SO2AlgebraStorage<double,cva::Matrix<double,1u,1u,false>>::exp@<D0>(double *a1@<X0>, double *a2@<X8>, double a3@<D0>)
{
  __double2 v4;
  double result;

  v4 = __sincos_stret(*a1 * a3);
  *a2 = v4.__cosval;
  a2[1] = v4.__sinval;
  result = -v4.__sinval;
  a2[2] = -v4.__sinval;
  a2[3] = v4.__cosval;
  return result;
}

double cva::SO2AlgebraStorage<double,cva::Matrix<double,1u,1u,false>>::expJacobian@<D0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  __double2 v3;
  double result;

  v3 = __sincos_stret(*a1);
  *(double *)a2 = v3.__cosval;
  *(double *)(a2 + 8) = v3.__sinval;
  result = -v3.__sinval;
  *(double *)(a2 + 16) = -v3.__sinval;
  *(double *)(a2 + 24) = v3.__cosval;
  *(_QWORD *)(a2 + 32) = 0x3FF0000000000000;
  return result;
}

double *cva::SO2AlgebraStorage<double,cva::Matrix<double,1u,1u,false>>::enforce(double *result)
{
  double v1;

  v1 = *result;
  if (*result <= 0.0)
  {
    if (v1 > -3.14159265)
      return result;
    do
      v1 = v1 + 3.14159265;
    while (v1 <= -3.14159265);
  }
  else
  {
    if (v1 < 3.14159265)
      return result;
    do
      v1 = v1 + -3.14159265;
    while (v1 >= 3.14159265);
  }
  *result = v1;
  return result;
}

uint64_t cva::SO2AlgebraStorage<double,cva::Matrix<double,1u,1u,false>>::serialize()
{
  return std::ostream::write();
}

uint64_t cva::SO2AlgebraStorage<double,cva::Matrix<double,1u,1u,false>>::deserialize()
{
  return std::istream::read();
}

void cva::SO2AlgebraStorage<float,cva::MatrixRef<float const,1u,1u,false>>::adjoint(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

float cva::SO2AlgebraStorage<float,cva::MatrixRef<float const,1u,1u,false>>::hat@<S0>(float **a1@<X0>, uint64_t a2@<X8>)
{
  float result;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  result = **a1;
  *(float *)(a2 + 4) = result;
  *(float *)(a2 + 8) = -result;
  return result;
}

float cva::SO2AlgebraStorage<float,cva::MatrixRef<float const,1u,1u,false>>::exp@<S0>(float **a1@<X0>, float *a2@<X8>, float a3@<S0>)
{
  __float2 v4;
  float result;

  v4 = __sincosf_stret(**a1 * a3);
  *a2 = v4.__cosval;
  a2[1] = v4.__sinval;
  result = -v4.__sinval;
  a2[2] = -v4.__sinval;
  a2[3] = v4.__cosval;
  return result;
}

float cva::SO2AlgebraStorage<float,cva::MatrixRef<float const,1u,1u,false>>::expJacobian@<S0>(float **a1@<X0>, uint64_t a2@<X8>)
{
  __float2 v3;
  float result;

  v3 = __sincosf_stret(**a1);
  *(float *)a2 = v3.__cosval;
  *(float *)(a2 + 4) = v3.__sinval;
  result = -v3.__sinval;
  *(float *)(a2 + 8) = -v3.__sinval;
  *(float *)(a2 + 12) = v3.__cosval;
  *(_DWORD *)(a2 + 16) = 1065353216;
  return result;
}

uint64_t cva::SO2AlgebraStorage<float,cva::MatrixRef<float const,1u,1u,false>>::serialize()
{
  return std::ostream::write();
}

void cva::SO2AlgebraStorage<double,cva::MatrixRef<double const,1u,1u,false>>::adjoint(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

double cva::SO2AlgebraStorage<double,cva::MatrixRef<double const,1u,1u,false>>::hat@<D0>(double **a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  result = **a1;
  *(double *)(a2 + 8) = result;
  *(double *)(a2 + 16) = -result;
  return result;
}

double cva::SO2AlgebraStorage<double,cva::MatrixRef<double const,1u,1u,false>>::exp@<D0>(double **a1@<X0>, double *a2@<X8>, double a3@<D0>)
{
  __double2 v4;
  double result;

  v4 = __sincos_stret(**a1 * a3);
  *a2 = v4.__cosval;
  a2[1] = v4.__sinval;
  result = -v4.__sinval;
  a2[2] = -v4.__sinval;
  a2[3] = v4.__cosval;
  return result;
}

double cva::SO2AlgebraStorage<double,cva::MatrixRef<double const,1u,1u,false>>::expJacobian@<D0>(double **a1@<X0>, uint64_t a2@<X8>)
{
  __double2 v3;
  double result;

  v3 = __sincos_stret(**a1);
  *(double *)a2 = v3.__cosval;
  *(double *)(a2 + 8) = v3.__sinval;
  result = -v3.__sinval;
  *(double *)(a2 + 16) = -v3.__sinval;
  *(double *)(a2 + 24) = v3.__cosval;
  *(_QWORD *)(a2 + 32) = 0x3FF0000000000000;
  return result;
}

uint64_t cva::SO2AlgebraStorage<double,cva::MatrixRef<double const,1u,1u,false>>::serialize()
{
  return std::ostream::write();
}

uint64_t cva::VecLib<float>::gemm()
{
  return cblas_sgemm_NEWLAPACK();
}

uint64_t cva::VecLib<float>::gemv()
{
  return cblas_sgemv_NEWLAPACK();
}

uint64_t cva::VecLib<float>::ger()
{
  return cblas_sger_NEWLAPACK();
}

uint64_t cva::VecLib<float>::geadd()
{
  return appleblas_sgeadd_NEWLAPACK();
}

uint64_t cva::VecLib<float>::syrk()
{
  return cblas_ssyrk_NEWLAPACK();
}

uint64_t cva::VecLib<float>::trsm()
{
  return cblas_strsm_NEWLAPACK();
}

uint64_t cva::VecLib<float>::trsv()
{
  return cblas_strsv_NEWLAPACK();
}

uint64_t cva::VecLib<double>::gemm()
{
  return cblas_dgemm_NEWLAPACK();
}

uint64_t cva::VecLib<double>::gemv()
{
  return cblas_dgemv_NEWLAPACK();
}

uint64_t cva::VecLib<double>::ger()
{
  return cblas_dger_NEWLAPACK();
}

uint64_t cva::VecLib<double>::geadd()
{
  return appleblas_dgeadd_NEWLAPACK();
}

uint64_t cva::VecLib<double>::syrk()
{
  return cblas_dsyrk_NEWLAPACK();
}

uint64_t cva::VecLib<double>::trsm()
{
  return cblas_dtrsm_NEWLAPACK();
}

uint64_t cva::VecLib<double>::trsv()
{
  return cblas_dtrsv_NEWLAPACK();
}

uint64_t cva::VecLibLapack<float>::potrs()
{
  spotrs_NEWLAPACK();
  return 0xFFFFFFFFLL;
}

uint64_t cva::VecLibLapack<float>::potrf()
{
  spotrf_NEWLAPACK();
  return 0xFFFFFFFFLL;
}

uint64_t cva::VecLibLapack<float>::trtri()
{
  strtri_NEWLAPACK();
  return 0xFFFFFFFFLL;
}

uint64_t cva::VecLibLapack<float>::trtrs()
{
  strtrs_NEWLAPACK();
  return 0xFFFFFFFFLL;
}

uint64_t cva::VecLibLapack<float>::sytrs()
{
  ssytrs_NEWLAPACK();
  return 0xFFFFFFFFLL;
}

uint64_t cva::VecLibLapack<float>::sytrf()
{
  ssytrf_NEWLAPACK();
  return 0xFFFFFFFFLL;
}

uint64_t cva::VecLibLapack<float>::pstrf()
{
  spstrf_NEWLAPACK();
  return 0xFFFFFFFFLL;
}

uint64_t cva::VecLibLapack<float>::ormqr()
{
  sormqr_NEWLAPACK();
  return 0xFFFFFFFFLL;
}

uint64_t cva::VecLibLapack<float>::getrs()
{
  sgetrs_NEWLAPACK();
  return 0xFFFFFFFFLL;
}

uint64_t cva::VecLibLapack<float>::getrf()
{
  sgetrf_NEWLAPACK();
  return 0xFFFFFFFFLL;
}

uint64_t cva::VecLibLapack<double>::potrs()
{
  dpotrs_NEWLAPACK();
  return 0xFFFFFFFFLL;
}

uint64_t cva::VecLibLapack<double>::potrf()
{
  dpotrf_NEWLAPACK();
  return 0xFFFFFFFFLL;
}

uint64_t cva::VecLibLapack<double>::trtri()
{
  dtrtri_NEWLAPACK();
  return 0xFFFFFFFFLL;
}

uint64_t cva::VecLibLapack<double>::trtrs()
{
  dtrtrs_NEWLAPACK();
  return 0xFFFFFFFFLL;
}

uint64_t cva::VecLibLapack<double>::sytrs()
{
  dsytrs_NEWLAPACK();
  return 0xFFFFFFFFLL;
}

uint64_t cva::VecLibLapack<double>::sytrf()
{
  dsytrf_NEWLAPACK();
  return 0xFFFFFFFFLL;
}

uint64_t cva::VecLibLapack<double>::pstrf()
{
  dpstrf_NEWLAPACK();
  return 0xFFFFFFFFLL;
}

uint64_t cva::VecLibLapack<double>::ormqr()
{
  dormqr_NEWLAPACK();
  return 0xFFFFFFFFLL;
}

uint64_t cva::VecLibLapack<double>::getrs()
{
  dgetrs_NEWLAPACK();
  return 0xFFFFFFFFLL;
}

uint64_t cva::VecLibLapack<double>::getrf()
{
  dgetrf_NEWLAPACK();
  return 0xFFFFFFFFLL;
}

uint64_t cva::vecLib::gesdd<float>()
{
  return sgesdd_NEWLAPACK();
}

uint64_t cva::vecLib::gesdd<double>()
{
  return dgesdd_NEWLAPACK();
}

uint64_t cva::vecLib::gesvd<float>()
{
  return sgesvd_NEWLAPACK();
}

uint64_t cva::vecLib::gesvd<double>()
{
  return dgesvd_NEWLAPACK();
}

uint64_t cva::vecLib::geev<float>()
{
  return sgeev_NEWLAPACK();
}

uint64_t cva::vecLib::geev<double>()
{
  return dgeev_NEWLAPACK();
}

uint64_t cva::vecLib::syev<float>()
{
  return ssyev_NEWLAPACK();
}

uint64_t cva::vecLib::syev<double>()
{
  return dsyev_NEWLAPACK();
}

uint64_t cva::vecLib::geqrf<float>()
{
  return sgeqrf_NEWLAPACK();
}

uint64_t cva::vecLib::geqrf<double>()
{
  return dgeqrf_NEWLAPACK();
}

uint64_t cva::vecLib::gerqf<float>()
{
  return sgerqf_NEWLAPACK();
}

uint64_t cva::vecLib::gerqf<double>()
{
  return dgerqf_NEWLAPACK();
}

uint64_t cva::vecLib::orgqr<float>()
{
  return sorgqr_NEWLAPACK();
}

uint64_t cva::vecLib::orgqr<double>()
{
  return dorgqr_NEWLAPACK();
}

uint64_t cva::vecLib::orgrq<float>()
{
  return sorgqr_NEWLAPACK();
}

uint64_t cva::vecLib::orgrq<double>()
{
  return dorgqr_NEWLAPACK();
}

uint64_t cva::vecLib::gelsd<float>()
{
  return sgelsd_NEWLAPACK();
}

uint64_t cva::vecLib::gelsd<double>()
{
  return dgelsd_NEWLAPACK();
}

uint64_t cva::vecLib::trtrs<float>()
{
  return strtrs_NEWLAPACK();
}

uint64_t cva::vecLib::trtrs<double>()
{
  return dtrtrs_NEWLAPACK();
}

uint64_t cva::vecLib::gels<float>()
{
  return sgels_NEWLAPACK();
}

uint64_t cva::vecLib::gels<double>()
{
  return dgels_NEWLAPACK();
}

uint64_t cva::vecLib::gelss<float>()
{
  return sgelss_NEWLAPACK();
}

uint64_t cva::vecLib::gelss<double>()
{
  return dgelss_NEWLAPACK();
}

uint64_t cva::vecLib::gesv<float>()
{
  return sgesv_NEWLAPACK();
}

uint64_t cva::vecLib::gesv<double>()
{
  return dgesv_NEWLAPACK();
}

uint64_t cva::vecLib::gbtrs<double>()
{
  return dgbtrs_NEWLAPACK();
}

uint64_t cva::vecLib::gbtrf<double>()
{
  return dgbtrf_NEWLAPACK();
}

uint64_t cva::vecLib::gbsv<double>()
{
  return dgbsv_NEWLAPACK();
}

uint64_t cva::vecLib::gbsv<float>()
{
  return sgbsv_NEWLAPACK();
}

uint64_t cva::vecLib::getri<float>()
{
  return sgetri_NEWLAPACK();
}

uint64_t cva::vecLib::getri<double>()
{
  return dgetri_NEWLAPACK();
}

uint64_t cva::vecLib::getrf<float>()
{
  return sgetrf_NEWLAPACK();
}

uint64_t cva::vecLib::getrf<double>()
{
  return dgetrf_NEWLAPACK();
}

uint64_t cva::vecLib::sysv<float>()
{
  return ssysv_NEWLAPACK();
}

uint64_t cva::vecLib::sysv<double>()
{
  return dsysv_NEWLAPACK();
}

uint64_t cva::vecLib::posv<float>()
{
  return sposv_NEWLAPACK();
}

uint64_t cva::vecLib::posv<double>()
{
  return dposv_NEWLAPACK();
}

uint64_t cva::vecLib::potrf<float>()
{
  return spotrf_NEWLAPACK();
}

uint64_t cva::vecLib::potrf<double>()
{
  return dpotrf_NEWLAPACK();
}

void *cva::Profiler::instance(cva::Profiler *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_2546164F8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2546164F8))
  {
    sub_20ABAB96C();
    __cxa_atexit((void (*)(void *))sub_20ABABA30, &unk_254616468, &dword_20AB80000);
    __cxa_guard_release(&qword_2546164F8);
  }
  return &unk_254616468;
}

_QWORD *sub_20ABAB96C()
{
  _QWORD *result;
  _QWORD *v1;
  std::string __str;

  qword_254616470 = (uint64_t)&qword_254616470;
  qword_254616478 = (uint64_t)&qword_254616470;
  dword_254616488 = 0;
  *((_BYTE *)&__str.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&__str, "Root");
  xmmword_254616490 = 0u;
  unk_2546164A0 = 0u;
  qword_2546164C0 = 0;
  xmmword_2546164B0 = 0u;
  qword_2546164D0 = (uint64_t)&qword_2546164D0;
  unk_2546164D8 = &qword_2546164D0;
  dword_2546164E8 = 0;
  std::string::operator=((std::string *)&xmmword_2546164B0, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  byte_2546164F0 = 1;
  result = (_QWORD *)operator new();
  v1 = (_QWORD *)qword_254616478;
  *result = &qword_254616470;
  result[1] = v1;
  result[2] = &xmmword_254616490;
  *v1 = result;
  qword_254616478 = (uint64_t)result;
  ++dword_254616488;
  return result;
}

uint64_t sub_20ABABA30(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;

  sub_20ABABAD4(a1 + 40);
  if (*(_DWORD *)(a1 + 128))
  {
    v2 = *(_QWORD **)(a1 + 112);
    do
    {
      v3 = (_QWORD *)v2[1];
      operator delete(v2);
      v2 = v3;
      v4 = *(_DWORD *)(a1 + 128) - 1;
      *(_DWORD *)(a1 + 128) = v4;
    }
    while (v4);
  }
  *(_QWORD *)(a1 + 104) = a1 + 104;
  *(_QWORD *)(a1 + 112) = a1 + 104;
  if (*(char *)(a1 + 95) < 0)
  {
    operator delete(*(void **)(a1 + 72));
    if (!*(_DWORD *)(a1 + 32))
      goto LABEL_10;
  }
  else if (!*(_DWORD *)(a1 + 32))
  {
    goto LABEL_10;
  }
  v5 = *(_QWORD **)(a1 + 16);
  do
  {
    v6 = (_QWORD *)v5[1];
    operator delete(v5);
    v5 = v6;
    v7 = *(_DWORD *)(a1 + 32) - 1;
    *(_DWORD *)(a1 + 32) = v7;
  }
  while (v7);
LABEL_10:
  *(_QWORD *)(a1 + 8) = a1 + 8;
  *(_QWORD *)(a1 + 16) = a1 + 8;
  return a1;
}

double sub_20ABABAD4(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  double result;

  v2 = a1 + 64;
  for (i = *(_QWORD *)(a1 + 72); i != v2; i = *(_QWORD *)(i + 8))
  {
    v4 = *(_QWORD *)(i + 16);
    if (v4)
    {
      sub_20ABABAD4(*(_QWORD *)(i + 16));
      if (*(_DWORD *)(v4 + 88))
      {
        v5 = *(_QWORD **)(v4 + 72);
        do
        {
          v6 = (_QWORD *)v5[1];
          operator delete(v5);
          v5 = v6;
          v7 = *(_DWORD *)(v4 + 88) - 1;
          *(_DWORD *)(v4 + 88) = v7;
        }
        while (v7);
      }
      *(_QWORD *)(v4 + 64) = v4 + 64;
      *(_QWORD *)(v4 + 72) = v4 + 64;
      if (*(char *)(v4 + 55) < 0)
        operator delete(*(void **)(v4 + 32));
      MEMORY[0x20BD2D02C](v4, 0x1032C40C8AE412DLL);
    }
  }
  if (*(_DWORD *)(a1 + 88))
  {
    v8 = *(_QWORD **)(a1 + 72);
    do
    {
      v9 = (_QWORD *)v8[1];
      operator delete(v8);
      v8 = v9;
      v10 = *(_DWORD *)(a1 + 88) - 1;
      *(_DWORD *)(a1 + 88) = v10;
    }
    while (v10);
  }
  *(_QWORD *)(a1 + 64) = a1 + 64;
  *(_QWORD *)(a1 + 72) = v2;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void cva::backTrace(cva *this, int a2, int a3, unsigned int a4, unsigned int a5)
{
  int v7;
  void *v8;
  char **v9;
  uint64_t (***v10)();
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t (**v16)();
  uint64_t (**v17)();
  std::ios_base *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  _QWORD *v23;
  size_t v24;
  char *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  char v31;
  int v32;
  char v33;
  int v34;
  int v35;
  BOOL v36;
  char *v37;
  uint64_t v38;
  int v39;
  const char *dli_sname;
  char *v41;
  const char *v42;
  BOOL v43;
  const char *v44;
  size_t v45;
  _QWORD *v46;
  char *v47;
  const char *dli_fname;
  size_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  unsigned int v56;
  int v57;
  unsigned int v58;
  Dl_info v61;
  _QWORD v62[3];
  _QWORD *v63;
  uint64_t (**v64)();
  char **v65;
  uint64_t v66;
  uint64_t (***v67)();
  __int128 __p;
  __int128 v69;
  int v70;
  uint64_t v71[19];
  _QWORD v72[3];
  _QWORD *v73;
  char __str[8];
  uint64_t v75;
  char *v76;
  uint64_t v77;

  v7 = (int)this;
  v77 = *MEMORY[0x24BDAC8D0];
  if (a5)
  {
    v8 = operator new(8 * a5);
    bzero(v8, 8 * a5);
  }
  else
  {
    v8 = 0;
  }
  v57 = v7;
  v58 = backtrace((void **)v8, a5);
  v9 = backtrace_symbols((void *const *)v8, v58);
  v73 = 0;
  v64 = &off_24C37FFF8;
  v65 = v9;
  v67 = &v64;
  sub_20ABAC2C8(&v64, v72);
  v10 = v67;
  if (v67 == &v64)
  {
    v11 = 4;
    v10 = &v64;
  }
  else
  {
    if (!v67)
      goto LABEL_9;
    v11 = 5;
  }
  (*v10)[v11]();
LABEL_9:
  v56 = a5;
  v12 = MEMORY[0x24BEDB858];
  v13 = MEMORY[0x24BEDB858] + 104;
  v71[0] = MEMORY[0x24BEDB858] + 104;
  v14 = MEMORY[0x24BEDB858] + 64;
  v15 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v16 = *(uint64_t (***)())(MEMORY[0x24BEDB7F0] + 16);
  v17 = *(uint64_t (***)())(MEMORY[0x24BEDB7F0] + 24);
  v66 = MEMORY[0x24BEDB858] + 64;
  v64 = v16;
  *(uint64_t (***)())((char *)&v64 + (_QWORD)*(v16 - 3)) = v17;
  v65 = 0;
  v18 = (std::ios_base *)((char *)&v64 + (_QWORD)*(v64 - 3));
  std::ios_base::init(v18, &v67);
  v18[1].__vftable = 0;
  v18[1].__fmtflags_ = -1;
  v19 = v15[5];
  v66 = v15[4];
  *(uint64_t *)((char *)&v66 + *(_QWORD *)(v66 - 24)) = v19;
  v64 = (uint64_t (**)())v15[1];
  *(uint64_t (***)())((char *)&v64 + (_QWORD)*(v64 - 3)) = (uint64_t (**)())v15[6];
  v71[0] = v13;
  v64 = (uint64_t (**)())(v12 + 24);
  v66 = v14;
  std::streambuf::basic_streambuf();
  v67 = (uint64_t (***)())(MEMORY[0x24BEDB848] + 16);
  __p = 0u;
  v69 = 0u;
  v70 = 24;
  if (v58 > a4)
  {
    v20 = a4;
    v21 = MEMORY[0x24BDAC740];
    snprintf(__str, 0x20uLL, "%-3u 0x%016lx ");
    while (1)
    {
      v24 = strlen(__str);
      sub_20AB89270(&v66, (uint64_t)__str, v24);
      v25 = v9[v20];
      v26 = *v25;
      if (v26 < 1)
        goto LABEL_51;
      if ((*(_DWORD *)(v21 + 4 * *v25 + 60) & 0x400) != 0)
      {
        do
        {
          if ((*(_DWORD *)(v21 + 4 * v26 + 60) & 0x400) == 0)
            goto LABEL_32;
          v29 = *++v25;
          v26 = v29;
        }
        while (v29 > 0);
        if (!v26)
          goto LABEL_51;
        while (1)
        {
LABEL_32:
          if ((v26 & 0x80) != 0)
          {
            if (!__maskrune((char)v26, 0x4000uLL))
              goto LABEL_34;
          }
          else if ((*(_DWORD *)(v21 + 4 * (char)v26 + 60) & 0x4000) == 0)
          {
LABEL_34:
            v31 = *v25;
            if (!*v25)
              goto LABEL_51;
            while (1)
            {
              if (v31 < 0)
              {
                if (__maskrune(v31, 0x4000uLL))
                  goto LABEL_40;
              }
              else if ((*(_DWORD *)(v21 + 4 * v31 + 60) & 0x4000) != 0)
              {
LABEL_40:
                v33 = *v25;
                if (*v25)
                {
                  do
                  {
                    if (v33 < 0)
                    {
                      if (!__maskrune(v33, 0x4000uLL))
                        goto LABEL_46;
                    }
                    else if ((*(_DWORD *)(v21 + 4 * v33 + 60) & 0x4000) == 0)
                    {
LABEL_46:
                      LOBYTE(v26) = *v25;
                      goto LABEL_16;
                    }
                    v34 = *++v25;
                    v33 = v34;
                  }
                  while (v34);
                }
LABEL_51:
                if (v57)
                  goto LABEL_52;
LABEL_11:
                v22 = strlen(v25);
                v23 = sub_20AB89270(&v66, (uint64_t)v25, v22);
                sub_20AB89270(v23, (uint64_t)"\n", 1);
                goto LABEL_12;
              }
              v32 = *++v25;
              v31 = v32;
              if (!v32)
                goto LABEL_51;
            }
          }
          v30 = *++v25;
          LOBYTE(v26) = v30;
          if (!v30)
            goto LABEL_51;
        }
      }
LABEL_16:
      if (v26 != 48)
        goto LABEL_51;
      if (v25[1] != 120)
        goto LABEL_51;
      v27 = v25[2];
      if (v27 < 0 || (*(_DWORD *)(v21 + 4 * v25[2] + 60) & 0x10000) == 0)
        goto LABEL_51;
      if (v25[2])
      {
        v25 += 2;
        do
        {
          if ((*(_DWORD *)(v21 + 4 * v27 + 60) & 0x10000) == 0)
            goto LABEL_49;
          v28 = *++v25;
          v27 = v28;
        }
        while (v28 > 0);
        if (v27)
        {
          while (1)
          {
LABEL_49:
            if ((v27 & 0x80) != 0)
            {
              if (!__maskrune((char)v27, 0x4000uLL))
                goto LABEL_51;
            }
            else if ((*(_DWORD *)(v21 + 4 * (char)v27 + 60) & 0x4000) == 0)
            {
              goto LABEL_51;
            }
            v35 = *++v25;
            LOBYTE(v27) = v35;
            if (!v35)
              goto LABEL_51;
          }
        }
        goto LABEL_51;
      }
      v25 += 2;
      if (!v57)
        goto LABEL_11;
LABEL_52:
      if (dladdr(*((const void **)v8 + v20), &v61))
        v36 = v61.dli_sname == 0;
      else
        v36 = 1;
      if (v36)
        goto LABEL_11;
      v63 = 0;
      *(_QWORD *)__str = &unk_24C380040;
      v75 = 0;
      v76 = __str;
      sub_20ABAC2C8(__str, v62);
      v37 = v76;
      if (v76 == __str)
        break;
      v21 = MEMORY[0x24BDAC740];
      if (v76)
      {
        v38 = 5;
LABEL_60:
        (*(void (**)(void))(*(_QWORD *)v37 + 8 * v38))();
      }
      v39 = -1;
      *(_DWORD *)__str = -1;
      dli_sname = v61.dli_sname;
      if (a2 && *v61.dli_sname == 95)
      {
        v41 = __cxa_demangle(v61.dli_sname, 0, 0, (int *)__str);
        v39 = *(_DWORD *)__str;
        dli_sname = v61.dli_sname;
      }
      else
      {
        v41 = 0;
      }
      if (dli_sname)
        v42 = dli_sname;
      else
        v42 = v25;
      if (v41)
        v43 = v39 == 0;
      else
        v43 = 0;
      if (v43)
        v44 = v41;
      else
        v44 = v42;
      v45 = strlen(v44);
      v46 = sub_20AB89270(&v66, (uint64_t)v44, v45);
      sub_20AB89270(v46, (uint64_t)" + ", 3);
      std::ostream::operator<<();
      if (a3 && v61.dli_fname)
      {
        v47 = strrchr((char *)v61.dli_fname, 47);
        sub_20AB89270(&v66, (uint64_t)" (", 2);
        if (v47)
          dli_fname = v47 + 1;
        else
          dli_fname = v61.dli_fname;
        v49 = strlen(dli_fname);
        v50 = sub_20AB89270(&v66, (uint64_t)dli_fname, v49);
        sub_20AB89270(v50, (uint64_t)")", 1);
      }
      sub_20AB89270(&v66, (uint64_t)"\n", 1);
      if (!v63)
        goto LABEL_101;
      (*(void (**)(_QWORD *))(*v63 + 48))(v63);
      v51 = v63;
      if (v63 == v62)
      {
        v51 = v62;
        v52 = 4;
      }
      else
      {
        if (!v63)
          goto LABEL_12;
        v52 = 5;
      }
      (*(void (**)(void))(*v51 + 8 * v52))();
LABEL_12:
      if (++v20 == v58)
        goto LABEL_88;
      snprintf(__str, 0x20uLL, "%-3u 0x%016lx ", v20 - a4, *((_QWORD *)v8 + v20));
    }
    v37 = __str;
    v38 = 4;
    v21 = MEMORY[0x24BDAC740];
    goto LABEL_60;
  }
LABEL_88:
  if (v58 == v56)
    sub_20AB89270(&v66, (uint64_t)"...                    <redacted>\n", 34);
  std::stringbuf::str();
  v64 = (uint64_t (**)())*MEMORY[0x24BEDB7F0];
  v53 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(uint64_t (***)())((char *)&v64 + (_QWORD)*(v64 - 3)) = *(uint64_t (***)())(MEMORY[0x24BEDB7F0]
                                                                                                 + 64);
  v66 = v53;
  v67 = (uint64_t (***)())(MEMORY[0x24BEDB848] + 16);
  if (SBYTE7(v69) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD2D008](v71);
  if (!v73)
LABEL_101:
    sub_20ABAC430();
  (*(void (**)(_QWORD *))(*v73 + 48))(v73);
  v54 = v73;
  if (v73 == v72)
  {
    v55 = 4;
    v54 = v72;
  }
  else
  {
    if (!v73)
      goto LABEL_98;
    v55 = 5;
  }
  (*(void (**)(void))(*v54 + 8 * v55))();
LABEL_98:
  if (v8)
    operator delete(v8);
}

_QWORD *sub_20ABAC2C8(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_20ABAC430()
{
  std::__libcpp_verbose_abort("bad_function_call was thrown in -fno-exceptions mode");
  JUMPOUT(0x20ABAC444);
}

void sub_20ABAC448()
{
  JUMPOUT(0x20BD2D02CLL);
}

_QWORD *sub_20ABAC45C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_24C380040;
  result[1] = v3;
  return result;
}

uint64_t sub_20ABAC490(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_24C380040;
  a2[1] = v2;
  return result;
}

void sub_20ABAC4AC(uint64_t a1)
{
  free(*(void **)(a1 + 8));
}

void sub_20ABAC4B8()
{
  JUMPOUT(0x20BD2D02CLL);
}

_QWORD *sub_20ABAC4CC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C37FFF8;
  result[1] = v3;
  return result;
}

uint64_t sub_20ABAC500(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C37FFF8;
  a2[1] = v2;
  return result;
}

void sub_20ABAC51C(uint64_t a1)
{
  free(*(void **)(a1 + 8));
}

__int128 *cva::ProfilerAriadne::instance(cva::ProfilerAriadne *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_2546165A0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2546165A0))
  {
    sub_20ABAC58C();
    __cxa_atexit((void (*)(void *))sub_20ABAC61C, &xmmword_254616500, &dword_20AB80000);
    __cxa_guard_release(&qword_2546165A0);
  }
  return &xmmword_254616500;
}

uint64_t sub_20ABAC58C()
{
  pthread_mutexattr_t v1;
  uint64_t v2;

  v2 = *MEMORY[0x24BDAC8D0];
  xmmword_254616500 = 0u;
  *(_OWORD *)algn_254616510 = 0u;
  xmmword_254616520 = 0u;
  unk_254616530 = 0u;
  xmmword_254616540 = 0u;
  dword_254616550 = 1065353216;
  word_254616558 = 0;
  pthread_mutexattr_init(&v1);
  pthread_mutexattr_settype(&v1, 2);
  return pthread_mutex_init(&stru_254616560, &v1);
}

uint64_t sub_20ABAC61C(uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 96));
  v2 = *(void ***)(a1 + 64);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v3)
    operator delete(v3);
  return sub_20ABAC68C(a1);
}

uint64_t sub_20ABAC68C(uint64_t a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v4 = (_QWORD *)(a1 + 40);
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    v4 = (_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = &v2[v5 / 0xAA];
    v7 = (unint64_t)*v6;
    v8 = (unint64_t)*v6 + 24 * (v5 % 0xAA);
    v9 = (unint64_t)v2[(*(_QWORD *)(a1 + 40) + v5) / 0xAA] + 24 * ((*(_QWORD *)(a1 + 40) + v5) % 0xAA);
    if (v8 != v9)
    {
      do
      {
        if (*(char *)(v8 + 23) < 0)
        {
          operator delete(*(void **)v8);
          v7 = (unint64_t)*v6;
        }
        v8 += 24;
        if (v8 - v7 == 4080)
        {
          v10 = (unint64_t)v6[1];
          ++v6;
          v7 = v10;
          v8 = v10;
        }
      }
      while (v8 != v9);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
  }
  *v4 = 0;
  v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 85;
    goto LABEL_17;
  }
  if (v12 == 2)
  {
    v13 = 170;
LABEL_17:
    *(_QWORD *)(a1 + 32) = v13;
  }
  if (v2 != v3)
  {
    do
    {
      v14 = *v2++;
      operator delete(v14);
    }
    while (v2 != v3);
    v16 = *(_QWORD *)(a1 + 8);
    v15 = *(_QWORD *)(a1 + 16);
    if (v15 != v16)
      *(_QWORD *)(a1 + 16) = v15 + ((v16 - v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t cva::ProfilerAriadne::printPlist(cva::ProfilerAriadne *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;
  _QWORD *v7;
  uint64_t **i;
  uint64_t **v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  pthread_mutex_t *v24;
  uint64_t v25;
  _QWORD v26[8];
  void *__p[2];
  __int128 v28;
  int v29;
  uint64_t v30[20];

  v2 = MEMORY[0x24BEDB870];
  v3 = MEMORY[0x24BEDB870] + 64;
  v4 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  v5 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v30[0] = MEMORY[0x24BEDB870] + 64;
  v25 = v4;
  *(_QWORD *)((char *)&v26[-1] + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)((char *)&v26[-1] + *(_QWORD *)(v25 - 24));
  std::ios_base::init(v6, v26);
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  v25 = v2 + 24;
  v30[0] = v3;
  std::streambuf::basic_streambuf();
  v26[0] = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)__p = 0u;
  v28 = 0u;
  v29 = 16;
  v24 = (pthread_mutex_t *)((char *)this + 96);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 96));
  sub_20AB89270(&v25, (uint64_t)"Ariadne custom signpost plist:\n", 31);
  sub_20AB89270(&v25, (uint64_t)"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n", 39);
  sub_20AB89270(&v25, (uint64_t)"<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n", 103);
  sub_20AB89270(&v25, (uint64_t)"<plist version=\"1.0\">\n", 22);
  sub_20AB89270(&v25, (uint64_t)"<array>\n", 8);
  sub_20AB89270(&v25, (uint64_t)"  <dict>\n", 9);
  sub_20AB89270(&v25, (uint64_t)"    <key>Name</key>\n", 20);
  sub_20AB89270(&v25, (uint64_t)"    <string>AppleCVA</string>\n", 30);
  sub_20AB89270(&v25, (uint64_t)"    <key>Children</key>\n", 24);
  sub_20AB89270(&v25, (uint64_t)"    <array>\n", 12);
  v9 = (uint64_t **)*((_QWORD *)this + 8);
  v7 = (_QWORD *)((char *)this + 64);
  for (i = v9; i; i = (uint64_t **)*i)
  {
    sub_20AB89270(&v25, (uint64_t)"      <dict>\n", 13);
    sub_20AB89270(&v25, (uint64_t)"        <key>Name</key>\n", 24);
    sub_20AB89270(&v25, (uint64_t)"        <string>", 16);
    v10 = *((char *)i + 39);
    if (v10 >= 0)
      v11 = (uint64_t)(i + 2);
    else
      v11 = (uint64_t)i[2];
    if (v10 >= 0)
      v12 = *((unsigned __int8 *)i + 39);
    else
      v12 = (uint64_t)i[3];
    sub_20AB89270(&v25, v11, v12);
    sub_20AB89270(&v25, (uint64_t)"</string>\n", 10);
    sub_20AB89270(&v25, (uint64_t)"        <key>Type</key>\n", 24);
    sub_20AB89270(&v25, (uint64_t)"        <string>Interval</string>\n", 34);
    sub_20AB89270(&v25, (uint64_t)"        <key>Component</key>\n", 29);
    sub_20AB89270(&v25, (uint64_t)"        <string>", 16);
    v13 = v25;
    *(_DWORD *)((char *)v26 + *(_QWORD *)(v25 - 24)) = *(_DWORD *)((_BYTE *)v26 + *(_QWORD *)(v25 - 24)) & 0xFFFFFFB5 | 8;
    *(_DWORD *)((char *)v26 + *(_QWORD *)(v13 - 24)) |= 0x200u;
    v14 = (uint64_t *)std::ostream::operator<<();
    v15 = *v14;
    *(_DWORD *)((char *)v14 + *(_QWORD *)(*v14 - 24) + 8) = *(_DWORD *)((_BYTE *)v14 + *(_QWORD *)(*v14 - 24) + 8) & 0xFFFFFFB5 | 2;
    *(_DWORD *)((char *)v14 + *(_QWORD *)(v15 - 24) + 8) &= ~0x200u;
    v16 = sub_20AB89270(v14, (uint64_t)"</string>\n", 10);
    v17 = sub_20AB89270(v16, (uint64_t)"        <key>CodeBegin</key>\n", 29);
    sub_20AB89270(v17, (uint64_t)"        <string>", 16);
    v18 = (_QWORD *)std::ostream::operator<<();
    v19 = sub_20AB89270(v18, (uint64_t)"</string>\n", 10);
    v20 = sub_20AB89270(v19, (uint64_t)"        <key>CodeEnd</key>\n", 27);
    sub_20AB89270(v20, (uint64_t)"        <string>", 16);
    v21 = (_QWORD *)std::ostream::operator<<();
    v22 = sub_20AB89270(v21, (uint64_t)"</string>\n", 10);
    sub_20AB89270(v22, (uint64_t)"      </dict>\n", 14);
  }
  sub_20AB89270(&v25, (uint64_t)"    </array>\n", 13);
  sub_20AB89270(&v25, (uint64_t)"  </dict>\n", 10);
  sub_20AB89270(&v25, (uint64_t)"</array>\n", 9);
  sub_20AB89270(&v25, (uint64_t)"</plist>\n", 9);
  do
    v7 = (_QWORD *)*v7;
  while (v7);
  pthread_mutex_unlock(v24);
  v25 = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)&v26[-1] + *(_QWORD *)(v25 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v26[0] = MEMORY[0x24BEDB848] + 16;
  if (SBYTE7(v28) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x20BD2D008](v30);
}

uint64_t cva::ProfilerAriadne::clear(cva::ProfilerAriadne *this)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  void **v4;
  _QWORD *v5;
  unint64_t v6;
  void **v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _OWORD *v29;
  __int128 v30;
  void *v31;
  void **v32;
  void *v33;
  int64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _OWORD *v43;
  __int128 v44;
  void *v45;
  void **v46;
  uint64_t v47;
  uint64_t i;
  void **v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;

  v2 = (pthread_mutex_t *)((char *)this + 96);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 96));
  v52 = 0u;
  v53 = 0u;
  v51 = 0u;
  v4 = (void **)*((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  if ((void **)v3 == v4)
  {
    v5 = (_QWORD *)((char *)this + 40);
    v3 = *((_QWORD *)this + 1);
  }
  else
  {
    v5 = (_QWORD *)((char *)this + 40);
    v6 = *((_QWORD *)this + 4);
    v7 = &v4[v6 / 0xAA];
    v8 = (unint64_t)*v7;
    v9 = (unint64_t)*v7 + 24 * (v6 % 0xAA);
    v10 = (unint64_t)v4[(*((_QWORD *)this + 5) + v6) / 0xAA] + 24 * ((*((_QWORD *)this + 5) + v6) % 0xAA);
    if (v9 != v10)
    {
      do
      {
        if (*(char *)(v9 + 23) < 0)
        {
          operator delete(*(void **)v9);
          v8 = (unint64_t)*v7;
        }
        v9 += 24;
        if (v9 - v8 == 4080)
        {
          v11 = (unint64_t)v7[1];
          ++v7;
          v8 = v11;
          v9 = v11;
        }
      }
      while (v9 != v10);
      v4 = (void **)*((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
    }
  }
  *v5 = 0;
  v12 = v3 - (_QWORD)v4;
  if ((unint64_t)(v3 - (_QWORD)v4) >= 0x11)
  {
    do
    {
      operator delete(*v4);
      v3 = *((_QWORD *)this + 2);
      v4 = (void **)(*((_QWORD *)this + 1) + 8);
      *((_QWORD *)this + 1) = v4;
      v12 = v3 - (_QWORD)v4;
    }
    while ((unint64_t)(v3 - (_QWORD)v4) > 0x10);
  }
  v13 = (uint64_t *)((char *)this + 32);
  v14 = v12 >> 3;
  if (v14 == 1)
  {
    v15 = 85;
  }
  else
  {
    if (v14 != 2)
      goto LABEL_18;
    v15 = 170;
  }
  *v13 = v15;
LABEL_18:
  v16 = *((_QWORD *)this + 5);
  if (v16)
  {
    v17 = *v13;
    if ((unint64_t)*v13 >= 0xAA)
    {
      operator delete(*v4);
      v3 = *((_QWORD *)this + 2);
      v4 = (void **)(*((_QWORD *)this + 1) + 8);
      *((_QWORD *)this + 1) = v4;
      v16 = *((_QWORD *)this + 5);
      v17 = *((_QWORD *)this + 4) - 170;
      *((_QWORD *)this + 4) = v17;
    }
    v18 = 170 * ((v3 - (uint64_t)v4) >> 3) - 1;
    if ((void **)v3 == v4)
      v18 = 0;
    if ((unint64_t)(v18 - (v16 + v17)) >= 0xAA)
    {
      operator delete(*(void **)(v3 - 8));
      v4 = (void **)*((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2) - 8;
      *((_QWORD *)this + 2) = v3;
    }
  }
  else
  {
    if ((void **)v3 != v4)
    {
      do
      {
        operator delete(*(void **)(v3 - 8));
        v19 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2) - 8;
        *((_QWORD *)this + 2) = v3;
      }
      while (v3 != v19);
    }
    *v13 = 0;
    v4 = (void **)v3;
  }
  v20 = *(void **)this;
  v21 = v3 - (_QWORD)v4;
  v22 = (v3 - (uint64_t)v4) >> 3;
  if (v22 < (uint64_t)(*((_QWORD *)this + 3) - *(_QWORD *)this) >> 3)
  {
    if ((void **)v3 == v4)
    {
      v23 = 0;
      v3 = 8 * v22;
      goto LABEL_41;
    }
    if (v21 < 0)
      goto LABEL_71;
    v23 = operator new(v3 - (_QWORD)v4);
    v3 = (uint64_t)&v23[v22];
    if ((unint64_t)(v21 - 8) < 0x18)
    {
      v27 = v23;
    }
    else if ((unint64_t)((char *)v23 - (char *)v4) < 0x20)
    {
      v27 = v23;
    }
    else
    {
      v24 = 0;
      v25 = ((unint64_t)(v21 - 8) >> 3) + 1;
      v26 = v25 & 0x3FFFFFFFFFFFFFFCLL;
      v27 = &v23[v26];
      v28 = v25 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = &v23[v24];
        v30 = *(_OWORD *)&v4[v24 + 2];
        *v29 = *(_OWORD *)&v4[v24];
        v29[1] = v30;
        v24 += 4;
        v28 -= 4;
      }
      while (v28);
      if (v25 == (v25 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_41:
        *(_QWORD *)this = v23;
        *((_QWORD *)this + 1) = v23;
        v4 = (void **)v23;
        *((_QWORD *)this + 2) = v3;
        *((_QWORD *)this + 3) = v3;
        if (v20)
        {
          operator delete(v20);
          v4 = (void **)*((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
        }
        goto LABEL_43;
      }
      v4 = (void **)((char *)v4 + v26 * 8);
    }
    do
    {
      v31 = *v4++;
      *v27++ = v31;
    }
    while (v27 != (_QWORD *)v3);
    goto LABEL_41;
  }
LABEL_43:
  if ((void **)v3 == v4)
  {
    v32 = v4;
  }
  else
  {
    v32 = (void **)(v3 + (((unint64_t)v4 - v3 + 7) & 0xFFFFFFFFFFFFFFF8));
    *((_QWORD *)this + 2) = v32;
    v3 = (uint64_t)v32;
  }
  v33 = *(void **)this;
  v34 = (char *)v32 - (char *)v4;
  v35 = v32 - v4;
  if (v35 >= (uint64_t)(*((_QWORD *)this + 3) - *(_QWORD *)this) >> 3)
    goto LABEL_61;
  if ((void **)v3 == v4)
  {
    v36 = 0;
    v37 = 8 * v35;
    goto LABEL_59;
  }
  if (v34 < 0)
LABEL_71:
    sub_20ABAD09C();
  v36 = operator new((char *)v32 - (char *)v4);
  v37 = (uint64_t)&v36[v35];
  if ((unint64_t)(v34 - 8) < 0x18)
  {
    v41 = v36;
    goto LABEL_58;
  }
  if ((unint64_t)((char *)v36 - (char *)v4) < 0x20)
  {
    v41 = v36;
    do
    {
LABEL_58:
      v45 = *v4++;
      *v41++ = v45;
    }
    while (v41 != (_QWORD *)v37);
    goto LABEL_59;
  }
  v38 = 0;
  v39 = ((unint64_t)(v34 - 8) >> 3) + 1;
  v40 = v39 & 0x3FFFFFFFFFFFFFFCLL;
  v41 = &v36[v40];
  v42 = v39 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v43 = &v36[v38];
    v44 = *(_OWORD *)&v4[v38 + 2];
    *v43 = *(_OWORD *)&v4[v38];
    v43[1] = v44;
    v38 += 4;
    v42 -= 4;
  }
  while (v42);
  if (v39 != (v39 & 0x3FFFFFFFFFFFFFFCLL))
  {
    v4 = (void **)((char *)v4 + v40 * 8);
    goto LABEL_58;
  }
LABEL_59:
  *(_QWORD *)this = v36;
  *((_QWORD *)this + 1) = v36;
  *((_QWORD *)this + 2) = v37;
  *((_QWORD *)this + 3) = v37;
  if (v33)
    operator delete(v33);
LABEL_61:
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  v51 = 0u;
  v52 = 0u;
  *v13 = 0;
  *((_QWORD *)this + 5) = 0;
  v53 = 0uLL;
  sub_20ABAC68C((uint64_t)&v51);
  if (*((_QWORD *)this + 9))
  {
    v46 = (void **)*((_QWORD *)this + 8);
    if (v46)
    {
      do
      {
        v50 = (void **)*v46;
        if (*((char *)v46 + 39) < 0)
          operator delete(v46[2]);
        operator delete(v46);
        v46 = v50;
      }
      while (v50);
    }
    *((_QWORD *)this + 8) = 0;
    v47 = *((_QWORD *)this + 7);
    if (v47)
    {
      for (i = 0; i != v47; ++i)
        *(_QWORD *)(*((_QWORD *)this + 6) + 8 * i) = 0;
    }
    *((_QWORD *)this + 9) = 0;
  }
  *((_WORD *)this + 44) = 0;
  return pthread_mutex_unlock(v2);
}

void sub_20ABAD09C()
{
  abort();
}

BOOL cva::safeDivision<float,void>(float *a1, float a2, float a3)
{
  if (a3 != 0.0)
    *a1 = a2 / a3;
  return a3 != 0.0;
}

BOOL cva::safeDivision<double,void>(double *a1, double a2, double a3)
{
  if (a3 != 0.0)
    *a1 = a2 / a3;
  return a3 != 0.0;
}

BOOL cva::safeReciprocal<float,void>(float *a1, float a2)
{
  if (a2 != 0.0)
    *a1 = 1.0 / a2;
  return a2 != 0.0;
}

BOOL cva::safeReciprocal<double,void>(double *a1, double a2)
{
  if (a2 != 0.0)
    *a1 = 1.0 / a2;
  return a2 != 0.0;
}

_QWORD *cva::mtl::createMetal(cva::mtl *this, const char *const *a2, uint64_t a3, const char *a4)
{
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  id v27;
  void *v28;
  void *v29;
  _QWORD *v30;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint32_t bufsize;
  uint64_t v38;
  char buf[8];
  uint64_t v40;

  v5 = a2;
  v40 = *MEMORY[0x24BDAC8D0];
  v35 = MTLCreateSystemDefaultDevice();
  if (v35)
  {
    v7 = v5;
    v34 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCED8]), "initWithCapacity:", v5);
    if (v5)
    {
      while (1)
      {
        v8 = *(_QWORD *)this;
        v9 = v35;
        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithCString:encoding:", v8, 1);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        if (!a3)
          goto LABEL_32;
        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithCString:encoding:", a3, 1);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "stringByAppendingString:", CFSTR(".metallib"));
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "stringByAppendingPathComponent:", v12);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v38 = 0;
        v14 = (void *)objc_msgSend(v9, "newLibraryWithFile:error:", v13, &v38);

        if (!v14)
        {
LABEL_32:
          bufsize = 1025;
          if (_NSGetExecutablePath(buf, &bufsize))
            goto LABEL_6;
          objc_msgSend(MEMORY[0x24BDD17C8], "stringWithCString:encoding:", buf, 1);
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "stringByDeletingLastPathComponent");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v10, "stringByAppendingString:", CFSTR(".metallib"));
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "stringByAppendingPathComponent:", v17);
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          v36 = 0;
          v14 = (void *)objc_msgSend(v9, "newLibraryWithFile:error:", v18, &v36);

          if (!v14)
            break;
        }
LABEL_20:

        if (!v14)
        {
          v30 = 0;
          goto LABEL_28;
        }
        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithCString:encoding:", *(_QWORD *)this, 1);
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v34, "setObject:forKey:", v14, v28);

        this = (cva::mtl *)((char *)this + 8);
        if (!--v7)
          goto LABEL_22;
      }
      objc_msgSend(MEMORY[0x24BDD1488], "mainBundle");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v19)
      {
LABEL_6:
        v14 = 0;
        goto LABEL_20;
      }
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("/System/Library/PrivateFrameworks/CoreAppleCVA.framework/%@.metallib"), v10);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Frameworks/AppleCVA.framework/%@"), v10);
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "pathForResource:ofType:", v32, CFSTR("metallib"));
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = v20;
      if (v21)
      {
        *(_QWORD *)buf = 0;
        v14 = (void *)objc_msgSend(v9, "newLibraryWithFile:error:", v21, buf);
        v22 = *(id *)buf;
        v23 = v22;
        if (v14)
        {
          v24 = v21;
          goto LABEL_17;
        }
        NSLog(CFSTR("Failed creating shader library: %@"), v22);

        v25 = v21;
      }
      else
      {
        v25 = 0;
      }

      v26 = v33;
      if (!v26)
      {
        v24 = 0;
        v14 = 0;
        goto LABEL_19;
      }
      *(_QWORD *)buf = 0;
      v24 = v26;
      v14 = (void *)objc_msgSend(v9, "newLibraryWithFile:error:", v26, buf);
      v27 = *(id *)buf;
      v23 = v27;
      if (!v14)
        NSLog(CFSTR("Failed creating shader library: %@"), v27);
LABEL_17:

LABEL_19:
      goto LABEL_20;
    }
LABEL_22:
    v29 = (void *)objc_msgSend(v35, "newCommandQueue");
    if (v29)
    {
      v30 = (_QWORD *)operator new();
      *v30 = v35;
      v30[1] = v29;
      v30[2] = v34;
    }
    else
    {
      NSLog(CFSTR("Failed creating command queue"));
      v30 = 0;
    }

LABEL_28:
  }
  else
  {
    NSLog(CFSTR("Failed creating Metal device"));
    v30 = 0;
  }

  return v30;
}

void sub_20ABAD534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

_QWORD *cva::mtl::createMetal(cva::mtl *this, const char *a2, const char *a3, const char *a4)
{
  cva::mtl *v5;

  v5 = this;
  return cva::mtl::createMetal((cva::mtl *)&v5, (const char *const *)1, (uint64_t)a2, a4);
}

id *cva::mtl::destroyMetal(id *result)
{
  id *v1;

  if (result)
  {
    v1 = result;

    JUMPOUT(0x20BD2D02CLL);
  }
  return result;
}

_QWORD *cva::mtl::createMetalBuffer(id *a1, unsigned int a2)
{
  id v3;
  void *v4;
  _QWORD *v5;
  id v6;

  v3 = *a1;
  v4 = (void *)objc_msgSend(v3, "newBufferWithLength:options:", a2, 0);
  if (v4)
  {
    v5 = (_QWORD *)operator new();
    v6 = v4;
    *v5 = v6;
    v5[1] = objc_msgSend(objc_retainAutorelease(v6), "contents");
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

void sub_20ABAD75C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id CVAGetMetalDevice(id *a1)
{
  return *a1;
}

id *cva::mtl::destroyMetalBuffer(id *result)
{
  if (result)
  {

    JUMPOUT(0x20BD2D02CLL);
  }
  return result;
}

uint64_t cva::mtl::metalBufferData(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t cva::mtl::destroyMetalTexture(uint64_t result)
{
  if (result)
  {

    JUMPOUT(0x20BD2D02CLL);
  }
  return result;
}

uint64_t cva::mtl::metalTextureData(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t cva::mtl::metalBufferRef(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t cva::mtl::metalTextureOffset(_DWORD *a1)
{
  return (a1[4] - *(_DWORD *)(*(_QWORD *)a1 + 8));
}

_QWORD *cva::mtl::createMetalCommandBuffer(uint64_t a1)
{
  id v1;
  void *v2;
  _QWORD *v3;

  v1 = *(id *)(a1 + 8);
  objc_msgSend(v1, "commandBuffer");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    v3 = (_QWORD *)operator new();
    *v3 = v2;
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

void sub_20ABAD8A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CVAGetMetalCommandQueue(uint64_t a1)
{
  return *(id *)(a1 + 8);
}

id *cva::mtl::destroyMetalCommandBuffer(id *result)
{
  if (result)
  {

    JUMPOUT(0x20BD2D02CLL);
  }
  return result;
}

uint64_t cva::mtl::commitMetalCommandBuffer(_QWORD *a1)
{
  return MEMORY[0x24BEDD108](*a1, sel_commit);
}

id CVAGetMetalCommandBuffer(id *a1)
{
  return *a1;
}

BOOL cva::mtl::waitUntilCompleted(id *a1)
{
  id v1;
  _BOOL8 v2;

  v1 = *a1;
  objc_msgSend(v1, "waitUntilCompleted");
  v2 = objc_msgSend(v1, "status") == 4;

  return v2;
}

void sub_20ABAD954(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id CVAGetMetalLibrary(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;

  v3 = *(id *)(a1 + 16);
  v4 = v3;
  if (a2 || objc_msgSend(v3, "count") != 1)
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithCString:encoding:", a2, 1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "objectForKey:", v5);
    v6 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    objc_msgSend(v4, "allValues");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "objectAtIndex:", 0);
    v6 = objc_claimAutoreleasedReturnValue();
  }
  v7 = (void *)v6;

  return v7;
}

void sub_20ABADA04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CVAGetMetalBuffer(id *a1)
{
  return *a1;
}

id CVAGetMetalTexture(uint64_t a1)
{
  return *(id *)(a1 + 8);
}

id CVACreateMetalComputePipelineState(void *a1, void *a2, uint64_t a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v13;

  v5 = a1;
  v6 = a2;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithCString:encoding:", a3, 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (void *)objc_msgSend(v6, "newFunctionWithName:", v7);
  if (v8)
  {
    v13 = 0;
    v9 = (void *)objc_msgSend(v5, "newComputePipelineStateWithFunction:error:", v8, &v13);
    v10 = v9;
    if (v9)
      v11 = v9;

  }
  else
  {
    v10 = 0;
  }

  return v10;
}

void sub_20ABADAF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

_QWORD *CVACreateTextureFromMetalTexture(void *a1)
{
  id v1;
  _QWORD *v2;

  v1 = a1;
  if (v1)
  {
    v2 = (_QWORD *)operator new();
    *v2 = 0;
    v2[1] = v1;
    v2[2] = 0;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

void sub_20ABADB7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *CVACreateTextureFromBuffer(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, uint64_t a5, unsigned int a6)
{
  void *v12;
  id v13;
  void *v14;
  _QWORD *v15;
  id v16;
  uint64_t v17;

  v12 = (void *)objc_opt_new();
  objc_msgSend(v12, "setWidth:", a2);
  objc_msgSend(v12, "setHeight:", a3);
  objc_msgSend(v12, "setPixelFormat:", a5);
  v13 = *(id *)a1;
  v14 = (void *)objc_msgSend(v13, "newTextureWithDescriptor:offset:bytesPerRow:", v12, a6, a4);
  if (v14)
  {
    v15 = (_QWORD *)operator new();
    *v15 = a1;
    v16 = v14;
    v17 = *(_QWORD *)(a1 + 8) + a6;
    v15[1] = v16;
    v15[2] = v17;
  }
  else
  {
    v15 = 0;
  }

  return v15;
}

void sub_20ABADC74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id *cva::mtl::destroyMPSCNNKernel(id *result)
{
  if (result)
  {

    JUMPOUT(0x20BD2D02CLL);
  }
  return result;
}

id *cva::mtl::destroyMPSImage(id *result)
{
  if (result)
  {

    JUMPOUT(0x20BD2D02CLL);
  }
  return result;
}

id *cva::mtl::destroyMPSTemporaryImage(id *result)
{
  if (result)
  {

    JUMPOUT(0x20BD2D02CLL);
  }
  return result;
}

_QWORD *CVACreateMPSCNNKernel(MPSCNNKernel *a1)
{
  MPSCNNKernel *v1;
  _QWORD *v2;

  v1 = a1;
  if (v1)
  {
    v2 = (_QWORD *)operator new();
    *v2 = v1;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

void sub_20ABADDB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id CVAGetMPSCNNKernel(id *a1)
{
  return *a1;
}

_QWORD *CVACreateMPSImage(MPSImage *a1)
{
  MPSImage *v1;
  _QWORD *v2;

  v1 = a1;
  if (v1)
  {
    v2 = (_QWORD *)operator new();
    *v2 = v1;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

void sub_20ABADE24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id CVAGetMPSImage(id *a1)
{
  return *a1;
}

_QWORD *CVACreateMPSTemporaryImage(MPSTemporaryImage *a1)
{
  MPSTemporaryImage *v1;
  _QWORD *v2;

  v1 = a1;
  if (v1)
  {
    v2 = (_QWORD *)operator new();
    *v2 = v1;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

void sub_20ABADE94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id CVAGetMPSTemporaryImage(id *a1)
{
  return *a1;
}

void cva::adp::Session<float>::loadDevice(uint64_t a1, uint64_t **a2, const std::string *a3)
{
  std::string::size_type *v5;
  std::string *v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  const std::string::value_type *v9;
  std::string::size_type v10;
  uint64_t **v11;
  int v12;
  uint64_t *v13;
  uint64_t **v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  void **v18;
  size_t v19;
  char *v20;
  void **v21;
  void **v22;
  uint64_t v23;
  void **i;
  std::string *v25;
  const std::string *j;
  int v27;
  std::string::size_type v28;
  uint64_t v29;
  char v30;
  _QWORD *v31;
  char *v32;
  unint64_t v33;
  char *v34;
  uint64_t *v35;
  _QWORD *v36;
  size_t __sz;
  uint64_t **v38;
  uint64_t *v39;
  uint64_t v40;
  void *__p;
  void **v42;
  uint64_t v43;
  const std::string *v44[4];
  std::string v45;
  std::string __dst;
  char v47;
  void *v48[2];
  char v49;
  void **v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v5 = (std::string::size_type *)(a1 + 56);
  if (!cva::adp::io::PListSerializer::read((_QWORD *)(a1 + 56), *a2) || !*v5)
    return;
  v6 = (std::string *)(a1 + 72);
  std::string::operator=((std::string *)(a1 + 72), a3);
  *((_BYTE *)&v45.__r_.__value_.__s + 23) = 18;
  strcpy((char *)&v45, "Sensors/Intrinsics");
  if (*(char *)(a1 + 95) < 0)
  {
    sub_20AB88C14(&__dst, *(void **)(a1 + 72), *(_QWORD *)(a1 + 80));
  }
  else
  {
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 88);
  }
  cva::adp::PListPath::convertToPath(&v45, (uint64_t)v48);
  if (v49 >= 0)
    v7 = (const std::string::value_type *)v48;
  else
    v7 = (const std::string::value_type *)v48[0];
  if (v49 >= 0)
    v8 = v49;
  else
    v8 = (std::string::size_type)v48[1];
  std::string::append(&__dst, v7, v8);
  if (v49 < 0)
    operator delete(v48[0]);
  HIBYTE(v44[2]) = 18;
  strcpy((char *)v44, "Sensors/Extrinsics");
  if (*(char *)(a1 + 95) < 0)
  {
    sub_20AB88C14(&v45, *(void **)(a1 + 72), *(_QWORD *)(a1 + 80));
  }
  else
  {
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 88);
  }
  cva::adp::PListPath::convertToPath(v44, (uint64_t)v48);
  if (v49 >= 0)
    v9 = (const std::string::value_type *)v48;
  else
    v9 = (const std::string::value_type *)v48[0];
  if (v49 >= 0)
    v10 = v49;
  else
    v10 = (std::string::size_type)v48[1];
  std::string::append(&v45, v9, v10);
  if (v49 < 0)
    operator delete(v48[0]);
  memset(v44, 0, 24);
  if (!cva::adp::io::PListSerializer::getKeys(v5, &__dst, (void **)v44))
  {
    v12 = 0;
    goto LABEL_66;
  }
  __p = 0;
  v42 = 0;
  v43 = 0;
  if (!cva::adp::io::PListSerializer::getKeys(v5, &v45, &__p))
  {
    v12 = 0;
    v21 = (void **)__p;
    if (!__p)
      goto LABEL_66;
    goto LABEL_60;
  }
  v39 = 0;
  v40 = 0;
  v11 = &v39;
  v38 = &v39;
  v49 = 6;
  strcpy((char *)v48, "Camera");
  v12 = cva::adp::io::detail::keysToNames(v5, (const void **)&__dst.__r_.__value_.__l.__data_, v44, (uint64_t)v48, (uint64_t **)&v38);
  if (v49 < 0)
    operator delete(v48[0]);
  if (v12)
  {
    v36 = 0;
    __sz = 0;
    v35 = (uint64_t *)&v36;
    v49 = 8;
    strcpy((char *)v48, "Platform");
    v12 = 0;
    if (cva::adp::io::detail::createFromToTree(&v38, (uint64_t *)&__p, (unsigned __int8 *)v48, &v35))
    {
      v13 = v39;
      if (v39)
      {
        while (1)
        {
          while (1)
          {
            v14 = (uint64_t **)v13;
            v15 = v13[4];
            if (v15 < 0x100)
              break;
            v13 = *v14;
            v11 = v14;
            if (!*v14)
              goto LABEL_39;
          }
          if (v15 == 255)
            break;
          v13 = v14[1];
          if (!v13)
          {
            v11 = v14 + 1;
            goto LABEL_39;
          }
        }
      }
      else
      {
        v14 = &v39;
LABEL_39:
        v16 = (uint64_t *)v14;
        v14 = (uint64_t **)operator new(0x40uLL);
        v14[4] = (uint64_t *)255;
        v14[5] = 0;
        v14[6] = 0;
        v14[7] = 0;
        *v14 = 0;
        v14[1] = 0;
        v14[2] = v16;
        *v11 = (uint64_t *)v14;
        v17 = (uint64_t *)v14;
        if (*v38)
        {
          v38 = (uint64_t **)*v38;
          v17 = *v11;
        }
        sub_20AB96C04(v39, v17);
        ++v40;
      }
      MEMORY[0x20BD2CD14](v14 + 5, "Platform");
      v18 = (void **)operator new(0x40uLL);
      *v18 = &off_24C37FFB0;
      v18[1] = &v38;
      v18[2] = v5;
      v18[3] = &__dst;
      v18[4] = &v35;
      v18[5] = &v45;
      v18[6] = (void *)a1;
      v18[7] = v48;
      v50 = v18;
      v32 = 0;
      v33 = 0;
      v34 = 0;
      v19 = __sz;
      if (__sz)
      {
        if ((__sz & 0x8000000000000000) != 0)
          abort();
        v32 = (char *)operator new(__sz);
        v33 = (unint64_t)v32;
        v34 = &v32[v19];
      }
      cva::adp::io::detail::findChildNodes(&v35, 255, (unint64_t *)&v32);
      v20 = v32;
      if (v32 == (char *)v33)
      {
        v12 = 0;
      }
      else
      {
        v47 = -1;
        if (!v50)
        {
          sub_20ABAC430();
          sub_20ABAE468(v31);
          return;
        }
        v12 = (*((uint64_t (**)(void **, char **, char *))*v50 + 6))(v50, &v32, &v47);
        v20 = v32;
      }
      if (v20)
      {
        v33 = (unint64_t)v20;
        operator delete(v20);
      }
      v22 = v50;
      if (v50 == v48)
      {
        v23 = 4;
        v22 = v48;
        goto LABEL_57;
      }
      if (v50)
      {
        v23 = 5;
LABEL_57:
        (*((void (**)(void))*v22 + v23))();
      }
    }
    sub_20ABAE468(v36);
  }
  sub_20AB96A90((char *)v39);
  v21 = (void **)__p;
  if (!__p)
    goto LABEL_66;
LABEL_60:
  for (i = v42; i != v21; i -= 3)
  {
    if (*((char *)i - 1) < 0)
      operator delete(*(i - 3));
  }
  operator delete(v21);
LABEL_66:
  v25 = (std::string *)v44[0];
  if (v44[0])
  {
    for (j = v44[1]; j != v25; --j)
    {
      if (SHIBYTE(j[-1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(j[-1].__r_.__value_.__l.__data_);
    }
    operator delete(v25);
  }
  if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_75;
LABEL_86:
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (!v12)
      return;
    goto LABEL_76;
  }
  operator delete(v45.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_86;
LABEL_75:
  if (!v12)
    return;
LABEL_76:
  v49 = 7;
  strcpy((char *)v48, "Version");
  __dst.__r_.__value_.__r.__words[0] = 0;
  v27 = sub_20AB91378(v5, (std::string *)(a1 + 72), (uint64_t)v48, &__dst);
  v28 = __dst.__r_.__value_.__r.__words[0];
  if (!v27)
    v28 = 0x100000000;
  *(_QWORD *)(a1 + 24) = v28;
  if (v49 < 0)
    operator delete(v48[0]);
  v49 = 6;
  strcpy((char *)v48, "Device");
  v29 = a1 + 32;
  v30 = cva::adp::io::PListSerializer::getItem<std::string>(v5, v6, (uint64_t)v48, v29);
  if (v49 < 0)
    operator delete(v48[0]);
  if ((v30 & 1) == 0)
    MEMORY[0x20BD2CD14](v29, "Generic Device");
}

void sub_20ABAE468(_QWORD *a1)
{
  if (a1)
  {
    sub_20ABAE468(*a1);
    sub_20ABAE468(a1[1]);
    operator delete(a1);
  }
}

void sub_20ABAE4A4()
{
  JUMPOUT(0x20BD2D02CLL);
}

__n128 sub_20ABAE4B8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_24C37FFB0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 sub_20ABAE508(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24C37FFB0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_20ABAE540(_QWORD *a1, unsigned __int8 **a2, char *a3)
{
  unsigned __int8 *v3;
  uint64_t v5;
  uint64_t v6;
  int32x2_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  std::string::size_type *v17;
  uint64_t v18;
  __int128 v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  int v22;
  _BOOL4 v23;
  uint64_t v24;
  float v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  int v29;
  uint64_t v30;
  uint64_t **v31;
  unsigned __int8 *v32;
  uint64_t **v33;
  unsigned int v34;
  _QWORD *v35;
  unsigned int v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  unint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  BOOL v46;
  _QWORD *v47;
  int v48;
  size_t v49;
  unint64_t v50;
  _BYTE *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  const void *v55;
  char v56;
  const std::string::value_type *v57;
  std::string::size_type v58;
  std::string *v59;
  std::string::size_type *v60;
  __int128 *v61;
  __int128 v62;
  const std::string::value_type *v63;
  std::string::size_type v64;
  char *v65;
  __int128 v66;
  int v67;
  int v68;
  int v69;
  float v70;
  uint64_t v71;
  char *v72;
  char *v73;
  void *v74;
  char *v75;
  std::string::size_type v77;
  __int128 *v78;
  std::string::size_type *v79;
  __int128 v80;
  const std::string::value_type *v81;
  std::string::size_type v82;
  char v83;
  _BYTE *v84;
  int v85;
  int v86;
  int v87;
  BOOL v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  int v92;
  int v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t **v97;
  unsigned int v98;
  uint64_t v99;
  char v100;
  uint64_t *v101;
  char *v102;
  unsigned int v103;
  _BYTE *v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t *v107;
  unsigned __int8 *v108;
  uint64_t *v109;
  unsigned int v110;
  BOOL v111;
  uint64_t **v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  _BOOL8 result;
  const std::string::value_type *isa;
  std::string::size_type data_high;
  void *v122;
  const std::string::value_type *v123;
  std::string::size_type v124;
  const std::string::value_type *v125;
  std::string::size_type v126;
  const std::string::value_type *v127;
  std::string::size_type info;
  const std::string::value_type *v129;
  std::string::size_type v130;
  const std::string::value_type *v131;
  std::string::size_type v132;
  char v133;
  char v134;
  char v135;
  char v136;
  char v137;
  char v138;
  char v139;
  char v140;
  char v141;
  char v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  const std::string::value_type *v152;
  std::string::size_type v153;
  int v154;
  int v155;
  int v156;
  char v157;
  const std::string::value_type *v158;
  std::string::size_type v159;
  std::string::size_type v160;
  std::string *v161;
  CFStringRef v162;
  const void *v163;
  char v164;
  char v165;
  char v166;
  char v167;
  uint64_t v168;
  float v169;
  float v170;
  int v171;
  std::__shared_weak_count *v172;
  unint64_t *p_shared_owners;
  unint64_t v174;
  int v175;
  char v176;
  float v177;
  __int128 v178;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  float v185;
  float v186;
  float cosval;
  float v188;
  __float2 v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  _Unwind_Exception *v209;
  _Unwind_Exception *v210;
  float v211;
  float v212;
  float v213;
  float v214;
  int32x2_t v215;
  uint64_t v216;
  uint64_t v217;
  const __CFAllocator *v218;
  const __CFAllocator *v219;
  char v220;
  unsigned __int8 *v221;
  _QWORD *__s;
  uint64_t v223;
  std::__shared_weak_count *v224;
  _BYTE __p[1040];
  char v226[1036];
  float v227;
  void *v228[2];
  uint64_t v229;
  int v230;
  std::string __dst;
  CFTypeRef cf;
  char v233;
  std::string::size_type v234;
  std::__shared_weak_count *v235;
  char v236[32];
  std::string v237;
  _BYTE v238[52];
  char v239;
  std::string __s1;
  std::string v241;
  __CFString v242;
  int v243;
  __CFString v244;
  int v245;

  v3 = *a2;
  v221 = a2[1];
  if (*a2 != v221)
  {
    v220 = *a3;
    v218 = (const __CFAllocator *)*MEMORY[0x24BDBD258];
    v219 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v5 = 0x3F80000040BF5C29;
    v6 = 0xA00000000;
    v7 = vdup_n_s32(0x3FC90FDBu);
    while (1)
    {
      v8 = a1[1];
      v11 = *(_QWORD **)(v8 + 8);
      v9 = (_QWORD *)(v8 + 8);
      v10 = v11;
      if (!v11)
        goto LABEL_14;
      v12 = *v3;
      v13 = v9;
      do
      {
        v14 = v10[4];
        v15 = v14 >= v12;
        if (v14 >= v12)
          v16 = v10;
        else
          v16 = v10 + 1;
        if (v15)
          v13 = v10;
        v10 = (_QWORD *)*v16;
      }
      while (*v16);
      if (v13 == v9 || v13[4] > v12)
LABEL_14:
        v13 = v9;
      v17 = (std::string::size_type *)a1[2];
      v18 = a1[3];
      if (*(char *)(v18 + 23) < 0)
      {
        sub_20AB88C14(&__dst, *(void **)v18, *(_QWORD *)(v18 + 8));
      }
      else
      {
        v19 = *(_OWORD *)v18;
        __dst.__r_.__value_.__r.__words[2] = *(_QWORD *)(v18 + 16);
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v19;
      }
      __s = v13 + 5;
      cva::adp::PListPath::convertToPath(v13 + 5, (uint64_t)__p);
      if (__p[23] >= 0)
        v20 = __p;
      else
        v20 = *(const std::string::value_type **)__p;
      if (__p[23] >= 0)
        v21 = __p[23];
      else
        v21 = *(_QWORD *)&__p[8];
      std::string::append(&__dst, v20, v21);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      v230 = 0;
      v228[1] = 0;
      v228[0] = 0;
      v229 = 0;
      __p[23] = 12;
      strcpy(__p, "Camera Model");
      if (!cva::adp::io::PListSerializer::getItem<std::string>(v17, &__dst, (uint64_t)__p, (uint64_t)v228))
      {
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
LABEL_47:
        v24 = 0;
        v29 = 0;
        goto LABEL_48;
      }
      v22 = sub_20ABB4464((int **)v228, &v230);
      v23 = v22;
      if ((__p[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)__p);
        if (!v23)
          goto LABEL_47;
      }
      else if ((v22 & 1) == 0)
      {
        goto LABEL_47;
      }
      v227 = 1.0;
      __p[23] = 18;
      strcpy(__p, "Standard Deviation");
      cva::adp::io::PListSerializer::getItem<float>(v17, &__dst, (uint64_t)__p, &v227);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      switch(v230)
      {
        case 0:
          *(_DWORD *)__p = 1065353216;
          __p[4] = 1;
          *(_DWORD *)&__p[8] = 1065353216;
          __p[12] = 1;
          *(_QWORD *)&__p[16] = 0;
          __p[24] = 1;
          *(_OWORD *)&__p[28] = xmmword_20AC05C60;
          *(_QWORD *)&__p[44] = 0x200000002;
          if (!sub_20ABB463C(v17, v18, __s, (uint64_t)__p))
            goto LABEL_47;
          v24 = operator new();
          *(_OWORD *)(v24 + 48) = *(_OWORD *)&__p[28];
          v25 = v227;
          *(_QWORD *)(v24 + 8) = v5;
          *(_QWORD *)v24 = &off_24C37FB80;
          *(_QWORD *)(v24 + 20) = *(_QWORD *)__p;
          *(_QWORD *)(v24 + 25) = *(_QWORD *)&__p[5];
          *(_QWORD *)(v24 + 36) = *(_QWORD *)&__p[16];
          *(_BYTE *)(v24 + 44) = __p[24];
          *(_QWORD *)(v24 + 64) = *(_QWORD *)&__p[44];
          *(float *)(v24 + 12) = v25;
          *(float *)(v24 + 16) = (float)(v25 * v25) * 5.98;
          goto LABEL_448;
        case 1:
          *(_DWORD *)__p = 1065353216;
          __p[4] = 1;
          *(_DWORD *)&__p[8] = 1065353216;
          __p[12] = 1;
          *(_QWORD *)&__p[16] = 0;
          __p[24] = 1;
          *(_OWORD *)&__p[28] = xmmword_20AC05C60;
          *(_QWORD *)&__p[44] = 0x200000002;
          *(_OWORD *)v238 = 0uLL;
          v238[16] = 1;
          *(_DWORD *)&v238[20] = 1070141403;
          *(_QWORD *)&v238[24] = v6;
          if (!sub_20ABB463C(v17, v18, __s, (uint64_t)__p))
            goto LABEL_47;
          if (*(char *)(v18 + 23) < 0)
          {
            sub_20AB88C14(&v241, *(void **)v18, *(_QWORD *)(v18 + 8));
          }
          else
          {
            v26 = *(_OWORD *)v18;
            v241.__r_.__value_.__r.__words[2] = *(_QWORD *)(v18 + 16);
            *(_OWORD *)&v241.__r_.__value_.__l.__data_ = v26;
          }
          cva::adp::PListPath::convertToPath(__s, (uint64_t)&v244);
          if (SHIBYTE(v244.data) >= 0)
            isa = (const std::string::value_type *)&v244;
          else
            isa = (const std::string::value_type *)v244.isa;
          if (SHIBYTE(v244.data) >= 0)
            data_high = HIBYTE(v244.data);
          else
            data_high = v244.info;
          std::string::append(&v241, isa, data_high);
          if (SHIBYTE(v244.data) < 0)
            operator delete(v244.isa);
          v122 = operator new(0x20uLL);
          v242.isa = v122;
          *(_OWORD *)&v242.info = xmmword_20AC05C70;
          strcpy((char *)v122, "Kannala Radial Distortion");
          if (SHIBYTE(v241.__r_.__value_.__r.__words[2]) < 0)
            sub_20AB88C14(&__s1, v241.__r_.__value_.__l.__data_, v241.__r_.__value_.__l.__size_);
          else
            __s1 = v241;
          cva::adp::PListPath::convertToPath(&v242, (uint64_t)&v244);
          if (SHIBYTE(v244.data) >= 0)
            v127 = (const std::string::value_type *)&v244;
          else
            v127 = (const std::string::value_type *)v244.isa;
          if (SHIBYTE(v244.data) >= 0)
            info = HIBYTE(v244.data);
          else
            info = v244.info;
          std::string::append(&__s1, v127, info);
          if (SHIBYTE(v244.data) < 0)
            operator delete(v244.isa);
          operator delete(v122);
          *((_BYTE *)&v237.__r_.__value_.__s + 23) = 16;
          strcpy((char *)&v237, "Symmetric Radial");
          if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
            sub_20AB88C14(&v242, __s1.__r_.__value_.__l.__data_, __s1.__r_.__value_.__l.__size_);
          else
            *(std::string *)&v242.isa = __s1;
          cva::adp::PListPath::convertToPath(&v237, (uint64_t)&v244);
          if (SHIBYTE(v244.data) >= 0)
            v152 = (const std::string::value_type *)&v244;
          else
            v152 = (const std::string::value_type *)v244.isa;
          if (SHIBYTE(v244.data) >= 0)
            v153 = HIBYTE(v244.data);
          else
            v153 = v244.info;
          std::string::append((std::string *)&v242, v152, v153);
          if (SHIBYTE(v244.data) < 0)
            operator delete(v244.isa);
          HIBYTE(v244.data) = 4;
          strcpy((char *)&v244, "Data");
          v154 = sub_20ABB7A90(v17, (std::string *)&v242, &v244, v238);
          v155 = v154;
          if (SHIBYTE(v244.data) < 0)
          {
            operator delete(v244.isa);
            if (!v155)
            {
LABEL_393:
              if (SHIBYTE(v242.data) < 0)
                goto LABEL_363;
              goto LABEL_394;
            }
          }
          else if (!v154)
          {
            goto LABEL_393;
          }
          HIBYTE(v244.data) = 5;
          strcpy((char *)&v244, "Fixed");
          v156 = cva::adp::io::PListSerializer::getItem<BOOL>(v17, (std::string *)&v242, (uint64_t)&v244, &v238[16]);
          if (SHIBYTE(v244.data) < 0)
            operator delete(v244.isa);
          v157 = v238[16] ^ 1;
          if (!v156)
            v157 = 1;
          v238[16] = v157;
          if (SHIBYTE(v242.data) < 0)
          {
LABEL_363:
            operator delete(v242.isa);
            if ((v155 & 1) != 0)
              goto LABEL_396;
            goto LABEL_395;
          }
LABEL_394:
          if ((v155 & 1) != 0)
            goto LABEL_396;
LABEL_395:
          *(_OWORD *)v238 = 0uLL;
          v238[16] = 1;
LABEL_396:
          HIBYTE(v242.data) = 16;
          strcpy((char *)&v242, "Projection Model");
          memset(&v244, 0, 24);
          v165 = 0;
          if (cva::adp::io::PListSerializer::getItem<std::string>(v17, &v241, (uint64_t)&v242, (uint64_t)&v244))
          {
            v165 = sub_20ABB793C((uint64_t **)&v244, &v238[24]);
            if (SHIBYTE(v244.data) < 0)
              goto LABEL_398;
          }
          else if (SHIBYTE(v244.data) < 0)
          {
LABEL_398:
            operator delete(v244.isa);
            if (SHIBYTE(v242.data) < 0)
              goto LABEL_399;
            goto LABEL_403;
          }
          if (SHIBYTE(v242.data) < 0)
          {
LABEL_399:
            operator delete(v242.isa);
            if ((v165 & 1) != 0)
              goto LABEL_405;
            goto LABEL_404;
          }
LABEL_403:
          if ((v165 & 1) != 0)
            goto LABEL_405;
LABEL_404:
          *(_DWORD *)&v238[24] = 0;
LABEL_405:
          HIBYTE(v244.data) = 13;
          strcpy((char *)&v244, "Field of View");
          v166 = cva::adp::io::PListSerializer::getItem<float>(v17, &__s1, (uint64_t)&v244, &v238[20]);
          v167 = v166;
          if (SHIBYTE(v244.data) < 0)
          {
            operator delete(v244.isa);
            if ((v167 & 1) != 0)
            {
LABEL_407:
              if ((SHIBYTE(__s1.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_408;
              goto LABEL_412;
            }
          }
          else if ((v166 & 1) != 0)
          {
            goto LABEL_407;
          }
          *(_DWORD *)&v238[20] = 1070141403;
          if ((SHIBYTE(__s1.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_408:
            if ((SHIBYTE(v241.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_409;
            goto LABEL_413;
          }
LABEL_412:
          operator delete(__s1.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v241.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_409;
LABEL_413:
          operator delete(v241.__r_.__value_.__l.__data_);
LABEL_409:
          v168 = operator new();
          v24 = v168;
          *(_QWORD *)(v168 + 8) = v5;
          *(_DWORD *)(v168 + 16) = 1086282793;
          *(_QWORD *)v168 = &off_24C37FC40;
          *(_QWORD *)(v168 + 20) = *(_QWORD *)__p;
          *(_QWORD *)(v168 + 25) = *(_QWORD *)&__p[5];
          *(_QWORD *)(v168 + 36) = *(_QWORD *)&__p[16];
          *(_BYTE *)(v168 + 44) = __p[24];
          *(_OWORD *)(v168 + 48) = *(_OWORD *)&__p[28];
          *(_QWORD *)(v168 + 64) = *(_QWORD *)&__p[44];
          *(_OWORD *)(v168 + 72) = *(_OWORD *)v238;
          *(_BYTE *)(v168 + 88) = v238[16];
          *(_QWORD *)(v168 + 92) = *(_QWORD *)&v238[20];
          *(_DWORD *)(v168 + 100) = *(_DWORD *)&v238[28];
          v169 = v227;
          *(float *)(v168 + 12) = v227;
          v170 = v169 * v169;
          goto LABEL_447;
        case 2:
          *(_DWORD *)__p = 1065353216;
          __p[4] = 1;
          *(_DWORD *)&__p[8] = 1065353216;
          __p[12] = 1;
          *(_QWORD *)&__p[16] = 0;
          __p[24] = 1;
          *(_OWORD *)&__p[28] = xmmword_20AC05C60;
          *(_QWORD *)&__p[44] = 0x200000002;
          memset(v238, 0, 20);
          v238[20] = 1;
          *(_DWORD *)&v238[24] = 10;
          if (!sub_20ABB463C(v17, v18, __s, (uint64_t)__p))
          {
            v24 = 0;
            v29 = 0;
            goto LABEL_48;
          }
          if (*(char *)(v18 + 23) < 0)
          {
            sub_20AB88C14(&__s1, *(void **)v18, *(_QWORD *)(v18 + 8));
          }
          else
          {
            v27 = *(_OWORD *)v18;
            __s1.__r_.__value_.__r.__words[2] = *(_QWORD *)(v18 + 16);
            *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = v27;
          }
          cva::adp::PListPath::convertToPath(__s, (uint64_t)&v244);
          if (SHIBYTE(v244.data) >= 0)
            v123 = (const std::string::value_type *)&v244;
          else
            v123 = (const std::string::value_type *)v244.isa;
          if (SHIBYTE(v244.data) >= 0)
            v124 = HIBYTE(v244.data);
          else
            v124 = v244.info;
          std::string::append(&__s1, v123, v124);
          if (SHIBYTE(v244.data) < 0)
            operator delete(v244.isa);
          HIBYTE(v242.data) = 19;
          strcpy((char *)&v242, "Heikkila Distortion");
          if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
            sub_20AB88C14(&v237, __s1.__r_.__value_.__l.__data_, __s1.__r_.__value_.__l.__size_);
          else
            v237 = __s1;
          cva::adp::PListPath::convertToPath(&v242, (uint64_t)&v244);
          if (SHIBYTE(v244.data) >= 0)
            v129 = (const std::string::value_type *)&v244;
          else
            v129 = (const std::string::value_type *)v244.isa;
          if (SHIBYTE(v244.data) >= 0)
            v130 = HIBYTE(v244.data);
          else
            v130 = v244.info;
          std::string::append(&v237, v129, v130);
          if (SHIBYTE(v244.data) < 0)
            operator delete(v244.isa);
          v236[23] = 21;
          strcpy(v236, "Radial And Tangential");
          if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
            sub_20AB88C14(&v242, v237.__r_.__value_.__l.__data_, v237.__r_.__value_.__l.__size_);
          else
            *(std::string *)&v242.isa = v237;
          cva::adp::PListPath::convertToPath(v236, (uint64_t)&v244);
          if (SHIBYTE(v244.data) >= 0)
            v158 = (const std::string::value_type *)&v244;
          else
            v158 = (const std::string::value_type *)v244.isa;
          if (SHIBYTE(v244.data) >= 0)
            v159 = HIBYTE(v244.data);
          else
            v159 = v244.info;
          std::string::append((std::string *)&v242, v158, v159);
          if (SHIBYTE(v244.data) < 0)
            operator delete(v244.isa);
          *((_BYTE *)&v241.__r_.__value_.__s + 23) = 4;
          strcpy((char *)&v241, "Data");
          cva::adp::io::PListSerializer::getPath(v17, (std::string *)&v242, &v234);
          v160 = v234;
          if (!v234)
            goto LABEL_426;
          v161 = (v241.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
               ? &v241
               : (std::string *)v241.__r_.__value_.__r.__words[0];
          v162 = CFStringCreateWithCStringNoCopy(v219, (const char *)v161, 0x8000100u, v218);
          v163 = (const void *)objc_msgSend(*(id *)v160, "objectForKey:", v162);
          v164 = *(_BYTE *)(v160 + 8);
          cf = v163;
          v233 = v164;
          if (v163)
            CFRetain(v163);
          else
            v233 = 0;
          CFRelease(v162);
          if (!cf)
            goto LABEL_426;
          if (cva::ItemHandler::isVectorType(&cf))
          {
            memset(&v244, 0, 20);
            sub_20ABB0B5C(&cf, (uint64_t)&v244);
            v23 = LODWORD(v244.data) == 5;
            if (LODWORD(v244.data) == 5)
            {
              *(_OWORD *)v238 = *(_OWORD *)v244.isa;
              *(_DWORD *)&v238[16] = *((_DWORD *)v244.isa + 4);
            }
            free(v244.isa);
            if (cf)
              CFRelease(cf);
            v171 = 1;
            v172 = v235;
            if (!v235)
              goto LABEL_430;
          }
          else
          {
            if (cf)
              CFRelease(cf);
LABEL_426:
            v171 = 0;
            v172 = v235;
            if (!v235)
            {
LABEL_430:
              if ((SHIBYTE(v241.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_432;
LABEL_431:
              operator delete(v241.__r_.__value_.__l.__data_);
              goto LABEL_432;
            }
          }
          p_shared_owners = (unint64_t *)&v172->__shared_owners_;
          do
            v174 = __ldaxr(p_shared_owners);
          while (__stlxr(v174 - 1, p_shared_owners));
          if (v174)
            goto LABEL_430;
          ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
          std::__shared_weak_count::__release_weak(v172);
          if (SHIBYTE(v241.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_431;
LABEL_432:
          if ((v23 & v171) != 0)
          {
            HIBYTE(v244.data) = 5;
            strcpy((char *)&v244, "Fixed");
            v175 = cva::adp::io::PListSerializer::getItem<BOOL>(v17, (std::string *)&v242, (uint64_t)&v244, &v238[20]);
            if (SHIBYTE(v244.data) < 0)
              operator delete(v244.isa);
            v176 = v238[20] ^ 1;
            if (!v175)
              v176 = 1;
            v238[20] = v176;
            if (SHIBYTE(v242.data) < 0)
            {
LABEL_438:
              operator delete(v242.isa);
              if ((v23 & v171 & 1) == 0)
                goto LABEL_439;
              goto LABEL_443;
            }
          }
          else if (SHIBYTE(v242.data) < 0)
          {
            goto LABEL_438;
          }
          if ((v23 & v171 & 1) == 0)
          {
LABEL_439:
            memset(v238, 0, 20);
            v238[20] = 1;
            if ((SHIBYTE(v237.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_444;
LABEL_440:
            operator delete(v237.__r_.__value_.__l.__data_);
            goto LABEL_444;
          }
LABEL_443:
          if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_440;
LABEL_444:
          if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__s1.__r_.__value_.__l.__data_);
          v168 = operator new();
          v24 = v168;
          *(_QWORD *)(v168 + 8) = v5;
          *(_DWORD *)(v168 + 16) = 1086282793;
          *(_QWORD *)v168 = &off_24C37FD00;
          *(_QWORD *)(v168 + 20) = *(_QWORD *)__p;
          *(_QWORD *)(v168 + 25) = *(_QWORD *)&__p[5];
          *(_QWORD *)(v168 + 36) = *(_QWORD *)&__p[16];
          *(_BYTE *)(v168 + 44) = __p[24];
          *(_OWORD *)(v168 + 48) = *(_OWORD *)&__p[28];
          *(_QWORD *)(v168 + 64) = *(_QWORD *)&__p[44];
          *(_DWORD *)(v168 + 88) = *(_DWORD *)&v238[16];
          *(_OWORD *)(v168 + 72) = *(_OWORD *)v238;
          *(_BYTE *)(v168 + 92) = v238[20];
          *(_DWORD *)(v168 + 96) = *(_DWORD *)&v238[24];
          v177 = v227;
          *(float *)(v168 + 12) = v227;
          v170 = v177 * v177;
LABEL_447:
          *(float *)(v168 + 16) = v170 * 5.98;
LABEL_448:
          v29 = 1;
LABEL_48:
          if (SHIBYTE(v229) < 0)
          {
            operator delete(v228[0]);
            if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_50:
              if (!v29)
                goto LABEL_82;
              goto LABEL_51;
            }
          }
          else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_50;
          }
          operator delete(__dst.__r_.__value_.__l.__data_);
          if (!v29)
          {
LABEL_82:
            v52 = 1;
            goto LABEL_241;
          }
LABEL_51:
          v30 = a1[1];
          v31 = (uint64_t **)a1[4];
          v33 = v31 + 1;
          v32 = (unsigned __int8 *)v31[1];
          v34 = *v3;
          if (v32)
          {
            while (1)
            {
              while (1)
              {
                v35 = v32;
                v36 = v32[25];
                if (v34 >= v36)
                  break;
                v32 = (unsigned __int8 *)*v35;
                v33 = (uint64_t **)v35;
                if (!*v35)
                  goto LABEL_58;
              }
              if (v36 >= v34)
                break;
              v32 = (unsigned __int8 *)v35[1];
              if (!v32)
              {
                v33 = (uint64_t **)(v35 + 1);
                goto LABEL_58;
              }
            }
          }
          else
          {
            v35 = v31 + 1;
LABEL_58:
            v37 = v35;
            v35 = operator new(0x20uLL);
            *((_BYTE *)v35 + 25) = v34;
            *((_BYTE *)v35 + 26) = 0;
            *v35 = 0;
            v35[1] = 0;
            v35[2] = v37;
            *v33 = v35;
            v38 = (uint64_t *)**v31;
            v39 = v35;
            if (v38)
            {
              *v31 = v38;
              v39 = *v33;
            }
            sub_20AB96C04(v31[1], v39);
            v31[2] = (uint64_t *)((char *)v31[2] + 1);
          }
          v42 = *(_QWORD **)(v30 + 8);
          v41 = (_QWORD *)(v30 + 8);
          v40 = v42;
          if (!v42)
            goto LABEL_72;
          v43 = *((unsigned __int8 *)v35 + 26);
          v44 = v41;
          do
          {
            v45 = v40[4];
            v46 = v45 >= v43;
            if (v45 >= v43)
              v47 = v40;
            else
              v47 = v40 + 1;
            if (v46)
              v44 = v40;
            v40 = (_QWORD *)*v47;
          }
          while (*v47);
          if (v44 == v41 || v44[4] > v43)
LABEL_72:
            v44 = v41;
          v48 = *((char *)v44 + 63);
          if (v48 >= 0)
            v49 = *((unsigned __int8 *)v44 + 63);
          else
            v49 = v44[6];
          v50 = v49 + 4;
          if (v49 + 4 >= 0x7FFFFFFFFFFFFFF8)
LABEL_462:
            abort();
          if (v50 >= 0x17)
          {
            v53 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v50 | 7) != 0x17)
              v53 = v50 | 7;
            v54 = v53 + 1;
            v51 = operator new(v53 + 1);
            *(_QWORD *)&__p[8] = v49 + 4;
            *(_QWORD *)&__p[16] = v54 | 0x8000000000000000;
            *(_QWORD *)__p = v51;
          }
          else
          {
            memset(__p, 0, 24);
            v51 = __p;
            __p[23] = v49 + 4;
            if (!v49)
              goto LABEL_90;
          }
          if (v48 >= 0)
            v55 = v44 + 5;
          else
            v55 = (const void *)v44[5];
          memmove(v51, v55, v49);
LABEL_90:
          strcpy(&v51[v49], " To ");
          v56 = *((_BYTE *)v13 + 63);
          if (v56 >= 0)
            v57 = (const std::string::value_type *)(v13 + 5);
          else
            v57 = (const std::string::value_type *)v13[5];
          if (v56 >= 0)
            v58 = *((unsigned __int8 *)v13 + 63);
          else
            v58 = v13[6];
          v59 = std::string::append((std::string *)__p, v57, v58);
          __dst = *v59;
          v59->__r_.__value_.__r.__words[0] = 0;
          v59->__r_.__value_.__l.__size_ = 0;
          v59->__r_.__value_.__r.__words[2] = 0;
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          v60 = (std::string::size_type *)a1[2];
          v61 = (__int128 *)a1[5];
          if (*((char *)v61 + 23) < 0)
          {
            sub_20AB88C14(&v241, *(void **)v61, *((_QWORD *)v61 + 1));
          }
          else
          {
            v62 = *v61;
            v241.__r_.__value_.__r.__words[2] = *((_QWORD *)v61 + 2);
            *(_OWORD *)&v241.__r_.__value_.__l.__data_ = v62;
          }
          cva::adp::PListPath::convertToPath(&__dst, (uint64_t)__p);
          if (__p[23] >= 0)
            v63 = __p;
          else
            v63 = *(const std::string::value_type **)__p;
          if (__p[23] >= 0)
            v64 = __p[23];
          else
            v64 = *(_QWORD *)&__p[8];
          std::string::append(&v241, v63, v64);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          LODWORD(v228[0]) = 0;
          memset(&__s1, 0, sizeof(__s1));
          __p[23] = 16;
          strcpy(__p, "Extrinsics Model");
          if (!cva::adp::io::PListSerializer::getItem<std::string>(v60, &v241, (uint64_t)__p, (uint64_t)&__s1))
          {
            if ((__p[23] & 0x80000000) != 0)
              operator delete(*(void **)__p);
            goto LABEL_117;
          }
          sub_20ABB0C14((uint64_t)&__s1, v228);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          if (LODWORD(v228[0]) != 1)
          {
            if (!LODWORD(v228[0]))
            {
LABEL_117:
              __p[0] = 1;
              *(_DWORD *)&__p[36] = 1065353216;
              *(_OWORD *)&__p[4] = xmmword_20AC06220;
              *(_OWORD *)&__p[20] = unk_20AC06230;
              *(_QWORD *)&__p[40] = 0;
              *(_DWORD *)&__p[48] = 0;
              __p[52] = 1;
              v238[23] = 8;
              strcpy(v238, "Rotation");
              if ((sub_20ABB0CFC(v60, (uint64_t)&v241, v238, __p) & 1) != 0)
              {
                HIBYTE(v244.data) = 11;
                strcpy((char *)&v244, "Translation");
                if (sub_20ABB0FD0(v60, (uint64_t)&v241, &v244, &__p[40]))
                {
                  v65 = (char *)operator new();
                  v66 = *(_OWORD *)&__p[20];
                  *(_OWORD *)(v65 + 12) = *(_OWORD *)&__p[4];
                  *(_QWORD *)v65 = &off_24C37F948;
                  v65[8] = __p[0];
                  *((_DWORD *)v65 + 11) = *(_DWORD *)&__p[36];
                  *((_QWORD *)v65 + 6) = *(_QWORD *)&__p[40];
                  *((_DWORD *)v65 + 14) = *(_DWORD *)&__p[48];
                  v65[60] = __p[52];
                  v67 = 1;
                  *(_OWORD *)(v65 + 28) = v66;
                  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
                    goto LABEL_120;
                  goto LABEL_131;
                }
              }
            }
LABEL_130:
            v65 = 0;
            v67 = 0;
            if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_120;
            goto LABEL_131;
          }
          __p[0] = 1;
          *(_DWORD *)&__p[36] = 1065353216;
          *(_OWORD *)&__p[4] = xmmword_20AC06220;
          *(_OWORD *)&__p[20] = unk_20AC06230;
          *(_QWORD *)&__p[40] = 0;
          *(_DWORD *)&__p[48] = 0;
          __p[52] = 1;
          v238[0] = 1;
          *(_DWORD *)&v238[36] = 1065353216;
          *(_OWORD *)&v238[4] = xmmword_20AC06220;
          *(_OWORD *)&v238[20] = unk_20AC06230;
          *(_QWORD *)&v238[40] = 0;
          *(_DWORD *)&v238[48] = 0;
          v239 = 1;
          LODWORD(v234) = 0;
          HIBYTE(v244.data) = 16;
          strcpy((char *)&v244, "Minimum Rotation");
          if ((sub_20ABB0CFC(v60, (uint64_t)&v241, &v244, __p) & 1) == 0)
            goto LABEL_130;
          HIBYTE(v242.data) = 19;
          strcpy((char *)&v242, "Minimum Translation");
          if (!sub_20ABB0FD0(v60, (uint64_t)&v241, &v242, &__p[40]))
            goto LABEL_130;
          *((_BYTE *)&v237.__r_.__value_.__s + 23) = 16;
          strcpy((char *)&v237, "Maximum Rotation");
          if (!sub_20ABB0CFC(v60, (uint64_t)&v241, &v237, v238))
            goto LABEL_130;
          v236[23] = 19;
          strcpy(v236, "Maximum Translation");
          if (!sub_20ABB0FD0(v60, (uint64_t)&v241, v236, &v238[40]))
            goto LABEL_130;
          HIBYTE(v244.data) = 18;
          strcpy((char *)&v244, "Endpoints Distance");
          v68 = cva::adp::io::PListSerializer::getItem<float>(v60, &v241, (uint64_t)&v244, &v234);
          v69 = v68;
          if (SHIBYTE(v244.data) < 0)
          {
            operator delete(v244.isa);
            v215 = v7;
            v216 = v6;
            if (v69)
            {
LABEL_129:
              v70 = *(float *)&v234;
              goto LABEL_453;
            }
          }
          else
          {
            v215 = v7;
            v216 = v6;
            if (v68)
              goto LABEL_129;
          }
          LODWORD(v234) = 1065353216;
          v70 = 1.0;
LABEL_453:
          v65 = (char *)operator new();
          *(_QWORD *)v65 = &off_24C37FA38;
          v65[64] = 1;
          *(_OWORD *)(v65 + 68) = xmmword_20AC05C80;
          *(_OWORD *)(v65 + 84) = xmmword_20AC05C80;
          *((_QWORD *)v65 + 13) = 0;
          *((_DWORD *)v65 + 25) = 1065353216;
          v65[112] = 1;
          *((_DWORD *)v65 + 29) = 0;
          v65[120] = 1;
          *((_QWORD *)v65 + 17) = 0;
          *((_QWORD *)v65 + 18) = 0;
          v65[8] = __p[0];
          v178 = *(_OWORD *)&__p[20];
          *(_OWORD *)(v65 + 12) = *(_OWORD *)&__p[4];
          *(_OWORD *)(v65 + 28) = v178;
          *((_DWORD *)v65 + 11) = *(_DWORD *)&__p[36];
          *((_DWORD *)v65 + 14) = *(_DWORD *)&__p[48];
          *((_QWORD *)v65 + 6) = *(_QWORD *)&__p[40];
          v65[60] = __p[52];
          *((float *)v65 + 31) = v70;
          v65[128] = 1;
          v213 = *(float *)&v238[44];
          v214 = *(float *)&v238[40];
          v179 = *(float *)&__p[40];
          v211 = *(float *)&v238[48];
          v212 = *(float *)&__p[44];
          v180 = *(float *)&__p[48];
          *(_QWORD *)v236 = &__p[4];
          v237.__r_.__value_.__r.__words[0] = (std::string::size_type)&v238[4];
          v237.__r_.__value_.__l.__size_ = (std::string::size_type)v236;
          memset(&v244, 0, sizeof(v244));
          v245 = 0;
          sub_20ABB1274((uint64_t)&v244, (uint64_t)&v237);
          v242 = v244;
          v243 = v245;
          LODWORD(v244.info) = 0;
          v244.isa = 0;
          sub_20AB9173C((float32x2_t *)&v242, (float *)&v244);
          v181 = *(float *)&v244.isa / v70;
          v182 = *((float *)&v244.isa + 1) / v70;
          v183 = *(float *)&v244.info / v70;
          v184 = (float)((float)(v181 * v181) + (float)(v182 * v182)) + (float)(v183 * v183);
          v217 = v5;
          if (v184 >= 0.0061)
          {
            v188 = sqrtf(v184);
            v189 = __sincosf_stret(v188);
            cosval = v189.__cosval;
            v186 = v189.__sinval / v188;
            v185 = (float)(1.0 / v184) * (float)(1.0 - v189.__cosval);
          }
          else
          {
            v185 = 0.5 - (float)(v184 * (float)((float)(v184 / -720.0) + 0.041667));
            v186 = 1.0 - (float)(v184 * (float)(0.16667 - (float)(v184 * (float)((float)(v184 / -5040.0) + 0.0083333))));
            cosval = 1.0 - (float)(v184 * v185);
          }
          v190 = v214 - v179;
          v191 = v213 - v212;
          v192 = v211 - v180;
          v193 = v181 * v185;
          v194 = v182 * v185;
          v195 = cosval + (float)((float)(v181 * v185) * v181);
          v196 = cosval + (float)((float)(v182 * v185) * v182);
          v197 = cosval + (float)((float)(v183 * v185) * v183);
          v198 = v182 * (float)(v181 * v185);
          v199 = v183 * v193;
          v200 = v183 * v194;
          v201 = v181 * v186;
          v202 = v182 * v186;
          v203 = v183 * v186;
          v65[64] = 1;
          *((float *)v65 + 17) = v195;
          *((float *)v65 + 18) = v198 + v203;
          *((float *)v65 + 19) = v199 - v202;
          *((float *)v65 + 20) = v198 - v203;
          *((float *)v65 + 21) = v196;
          *((float *)v65 + 22) = v201 + v200;
          *((float *)v65 + 23) = v202 + v199;
          *((float *)v65 + 24) = v200 - v201;
          *((float *)v65 + 25) = v197;
          v204 = (float)((float)(v190 * v190) + (float)(v191 * v191)) + (float)(v192 * v192);
          v205 = 0.0;
          v206 = 0.0;
          if (v204 >= 0.00034527)
          {
            v207 = sqrtf(v204);
            v208 = v192 / v207;
            v206 = atan2f(v191 / v207, v190 / v207);
            v205 = acosf(v208);
          }
          *((float *)v65 + 26) = v206;
          *((float *)v65 + 27) = v205;
          v65[64] = v238[0];
          v65[112] = v239;
          *((float *)v65 + 31) = v70;
          v67 = 1;
          v65[128] = 1;
          v6 = v216;
          v5 = v217;
          v7 = v215;
          if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
          {
LABEL_120:
            operator delete(__s1.__r_.__value_.__l.__data_);
            if (SHIBYTE(v241.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_121;
            goto LABEL_132;
          }
LABEL_131:
          if (SHIBYTE(v241.__r_.__value_.__r.__words[2]) < 0)
          {
LABEL_121:
            operator delete(v241.__r_.__value_.__l.__data_);
            if (v67)
              goto LABEL_133;
            goto LABEL_238;
          }
LABEL_132:
          if (v67)
          {
LABEL_133:
            if ((*(unsigned int (**)(char *))(*(_QWORD *)v65 + 16))(v65) == 1)
            {
              if (*((char *)v13 + 63) < 0)
              {
                sub_20AB88C14(&v242, (void *)v13[5], v13[6]);
                if (*((char *)v13 + 63) < 0)
                {
                  v72 = (char *)v13[5];
                  v71 = v13[6];
                }
                else
                {
                  v71 = *((unsigned __int8 *)v13 + 63);
                  v72 = (char *)(v13 + 5);
                }
              }
              else
              {
                v71 = *((unsigned __int8 *)v13 + 63);
                v72 = (char *)(v13 + 5);
                *(_OWORD *)&v242.isa = *(_OWORD *)__s;
                v242.data = (char *)v13[7];
              }
              v73 = &v72[v71];
              if (v71 >= 6)
              {
                v74 = v72;
                do
                {
                  v75 = (char *)memchr(v74, 67, v71 - 5);
                  if (!v75)
                    break;
                  if (*(_DWORD *)v75 == 1701667139 && *((_WORD *)v75 + 2) == 24946)
                    goto LABEL_149;
                  v74 = v75 + 1;
                  v71 = v73 - (_BYTE *)v74;
                }
                while (v73 - (_BYTE *)v74 > 5);
              }
              v75 = v73;
LABEL_149:
              if (v75 == v73)
                v77 = -1;
              else
                v77 = v75 - v72;
              std::string::replace((std::string *)&v242, v77, 6uLL, "Encoder");
              LODWORD(v241.__r_.__value_.__l.__data_) = 1065353216;
              v241.__r_.__value_.__s.__data_[4] = 1;
              LODWORD(v241.__r_.__value_.__r.__words[1]) = 0;
              v241.__r_.__value_.__s.__data_[12] = 1;
              v79 = (std::string::size_type *)a1[2];
              v78 = (__int128 *)a1[3];
              if (*((char *)v78 + 23) < 0)
              {
                sub_20AB88C14(v238, *(void **)v78, *((_QWORD *)v78 + 1));
              }
              else
              {
                v80 = *v78;
                *(_QWORD *)&v238[16] = *((_QWORD *)v78 + 2);
                *(_OWORD *)v238 = v80;
              }
              cva::adp::PListPath::convertToPath(&v242, (uint64_t)__p);
              if (__p[23] >= 0)
                v81 = __p;
              else
                v81 = *(const std::string::value_type **)__p;
              if (__p[23] >= 0)
                v82 = __p[23];
              else
                v82 = *(_QWORD *)&__p[8];
              std::string::append((std::string *)v238, v81, v82);
              if ((__p[23] & 0x80000000) != 0)
                operator delete(*(void **)__p);
              memset(__p, 0, 24);
              HIBYTE(v244.data) = 13;
              strcpy((char *)&v244, "Encoder Model");
              if (cva::adp::io::PListSerializer::getItem<std::string>(v79, (std::string *)v238, (uint64_t)&v244, (uint64_t)__p))
              {
                v83 = __p[23];
                if ((__p[23] & 0x80000000) != 0)
                {
                  if (*(_QWORD *)&__p[8] != 6)
                    goto LABEL_246;
                  v84 = *(_BYTE **)__p;
LABEL_175:
                  v86 = *(_DWORD *)v84;
                  v87 = *((unsigned __int16 *)v84 + 2);
                  v89 = v86 != 1701734732 || v87 != 29281;
                  if (SHIBYTE(v244.data) < 0)
                    goto LABEL_182;
LABEL_247:
                  if (v89)
                    goto LABEL_248;
LABEL_183:
                  HIBYTE(v244.data) = 8;
                  strcpy((char *)&v244, "Gradient");
                  if ((sub_20ABB087C(v79, (uint64_t)v238, &v244, &v241) & 1) == 0)
                  {
                    LODWORD(v241.__r_.__value_.__l.__data_) = 1065353216;
                    v241.__r_.__value_.__s.__data_[4] = 1;
                  }
                  HIBYTE(v244.data) = 6;
                  strcpy((char *)&v244, "Offset");
                  v85 = 1;
                  if ((sub_20ABB087C(v79, (uint64_t)v238, &v244, &v241.__r_.__value_.__r.__words[1]) & 1) != 0)
                  {
                    if (v83 < 0)
                      goto LABEL_170;
                  }
                  else
                  {
                    LODWORD(v241.__r_.__value_.__r.__words[1]) = 0;
                    v241.__r_.__value_.__s.__data_[12] = 1;
                    if (v83 < 0)
                      goto LABEL_170;
                  }
                }
                else
                {
                  if (__p[23] == 6)
                  {
                    v84 = __p;
                    goto LABEL_175;
                  }
LABEL_246:
                  v89 = 1;
                  if ((SHIBYTE(v244.data) & 0x80000000) == 0)
                    goto LABEL_247;
LABEL_182:
                  operator delete(v244.isa);
                  if (!v89)
                    goto LABEL_183;
LABEL_248:
                  v85 = 0;
                  if (v83 < 0)
                  {
LABEL_170:
                    operator delete(*(void **)__p);
                    if ((v238[23] & 0x80000000) != 0)
                      goto LABEL_171;
LABEL_188:
                    if (v85)
                      goto LABEL_189;
                    goto LABEL_194;
                  }
                }
              }
              else
              {
                if (SHIBYTE(v244.data) < 0)
                  operator delete(v244.isa);
                v85 = 0;
                if ((__p[23] & 0x80) != 0)
                  goto LABEL_170;
              }
              if ((v238[23] & 0x80000000) == 0)
                goto LABEL_188;
LABEL_171:
              operator delete(*(void **)v238);
              if (v85)
              {
LABEL_189:
                v90 = operator new();
                *(_QWORD *)v90 = &off_24C37FAE8;
                *(_OWORD *)(v90 + 8) = *(_OWORD *)&v241.__r_.__value_.__l.__data_;
                *(_QWORD *)(v90 + 32) = 0;
                *(_QWORD *)(v90 + 40) = 0;
                *(_QWORD *)(v90 + 24) = 0;
                v223 = v90;
                v91 = (std::__shared_weak_count *)operator new();
                v91->__vftable = (std::__shared_weak_count_vtbl *)&off_24C380540;
                v91->__shared_owners_ = 0;
                v91->__shared_weak_owners_ = 0;
                v91[1].__vftable = (std::__shared_weak_count_vtbl *)v90;
                v224 = v91;
                v92 = (*(uint64_t (**)(char *, uint64_t *))(*(_QWORD *)v65 + 72))(v65, &v223);
                v93 = v92;
                v94 = v224;
                if (!v224)
                  goto LABEL_193;
                v95 = (unint64_t *)&v224->__shared_owners_;
                do
                  v96 = __ldaxr(v95);
                while (__stlxr(v96 - 1, v95));
                if (!v96)
                {
                  ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                  std::__shared_weak_count::__release_weak(v94);
                  if (!v93)
                  {
LABEL_253:
                    if (SHIBYTE(v242.data) < 0)
                      operator delete(v242.isa);
                    v52 = 1;
                    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                      goto LABEL_256;
                    goto LABEL_239;
                  }
                }
                else
                {
LABEL_193:
                  if (!v92)
                    goto LABEL_253;
                }
              }
LABEL_194:
              if (SHIBYTE(v242.data) < 0)
                operator delete(v242.isa);
            }
            v97 = (uint64_t **)a1[6];
            v98 = *v3;
            *(_QWORD *)__p = v65;
            *(_QWORD *)&__p[8] = v24;
            __p[16] = v220;
            if (*((char *)v13 + 63) < 0)
            {
              sub_20AB88C14(&__p[24], (void *)v13[5], v13[6]);
              if (v98 == 255)
                goto LABEL_222;
            }
            else
            {
              *(_OWORD *)&__p[24] = *(_OWORD *)__s;
              *(_QWORD *)&__p[40] = v13[7];
              if (v98 == 255)
                goto LABEL_222;
            }
            v99 = *(_QWORD *)__p;
            if (*(_QWORD *)__p)
            {
              v100 = __p[16];
              v65 = (char *)(v97 + 1);
              v101 = v97[1];
              if (__p[16] != 255)
              {
                if (!v101)
                  goto LABEL_222;
                v108 = (unsigned __int8 *)(v97 + 1);
                v109 = v97[1];
                do
                {
                  v110 = *((unsigned __int8 *)v109 + 32);
                  v111 = v110 >= __p[16];
                  if (v110 >= __p[16])
                    v112 = (uint64_t **)v109;
                  else
                    v112 = (uint64_t **)(v109 + 1);
                  if (v111)
                    v108 = (unsigned __int8 *)v109;
                  v109 = *v112;
                }
                while (*v112);
                if (v108 == (unsigned __int8 *)v65 || v108[32] > __p[16])
                {
LABEL_222:
                  LODWORD(v99) = 0;
                  goto LABEL_223;
                }
              }
              v102 = (char *)(v97 + 1);
              if (!v101)
              {
LABEL_209:
                v104 = operator new(0x58uLL);
                v104[32] = v98;
                v105 = *(_QWORD *)&__p[8];
                *(_OWORD *)__p = 0u;
                *((_QWORD *)v104 + 5) = v99;
                *((_QWORD *)v104 + 6) = v105;
                v104[56] = v100;
                *((_OWORD *)v104 + 4) = *(_OWORD *)&__p[24];
                *((_QWORD *)v104 + 10) = *(_QWORD *)&__p[40];
                memset(&__p[24], 0, 24);
                *(_OWORD *)v104 = 0u;
                *((_QWORD *)v104 + 2) = v102;
                *(_QWORD *)v65 = v104;
                v106 = (uint64_t *)**v97;
                if (v106)
                {
                  *v97 = v106;
                  v107 = *(uint64_t **)v65;
                }
                else
                {
                  v107 = (uint64_t *)v104;
                }
                sub_20AB96C04(v97[1], v107);
                v97[2] = (uint64_t *)((char *)v97[2] + 1);
                LODWORD(v99) = 1;
                if ((__p[47] & 0x80000000) != 0)
                {
LABEL_260:
                  operator delete(*(void **)&__p[24]);
                  v113 = *(_QWORD *)&__p[8];
                  if (!*(_QWORD *)&__p[8])
                    goto LABEL_226;
LABEL_225:
                  (*(void (**)(uint64_t))(*(_QWORD *)v113 + 8))(v113);
LABEL_226:
                  if (*(_QWORD *)__p)
                    (*(void (**)(_QWORD))(**(_QWORD **)__p + 8))(*(_QWORD *)__p);
                  if ((_DWORD)v99)
                  {
                    memset(__p, 0, 24);
                    v114 = (_QWORD *)a1[4];
                    v115 = v114[2];
                    if (v115)
                    {
                      if (v115 < 0)
                        goto LABEL_462;
                      *(_QWORD *)__p = operator new(v114[2]);
                      *(_QWORD *)&__p[8] = *(_QWORD *)__p;
                      *(_QWORD *)&__p[16] = *(_QWORD *)__p + v115;
                    }
                    cva::adp::io::detail::findChildNodes(v114, *v3, (unint64_t *)__p);
                    v116 = a1[7];
                    v238[0] = *v3;
                    v117 = *(_QWORD *)(v116 + 24);
                    if (!v117)
                    {
                      sub_20ABAC430();
                      v210 = v209;
                      CFRelease(v65);
                      _Unwind_Resume(v210);
                    }
                    v118 = (*(uint64_t (**)(uint64_t, _BYTE *, _BYTE *))(*(_QWORD *)v117 + 48))(v117, __p, v238);
                    if (*(_QWORD *)__p)
                    {
                      *(_QWORD *)&__p[8] = *(_QWORD *)__p;
                      operator delete(*(void **)__p);
                    }
                    v24 = 0;
                    v65 = 0;
                    v52 = v118 ^ 1;
                    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                    {
LABEL_256:
                      operator delete(__dst.__r_.__value_.__l.__data_);
                      if (!v65)
                        goto LABEL_241;
LABEL_240:
                      (*(void (**)(char *))(*(_QWORD *)v65 + 8))(v65);
                      goto LABEL_241;
                    }
                    goto LABEL_239;
                  }
                  v24 = 0;
                  v65 = 0;
                  goto LABEL_238;
                }
LABEL_224:
                v113 = *(_QWORD *)&__p[8];
                if (*(_QWORD *)&__p[8])
                  goto LABEL_225;
                goto LABEL_226;
              }
              while (1)
              {
                while (1)
                {
                  v102 = (char *)v101;
                  v103 = *((unsigned __int8 *)v101 + 32);
                  if (v103 <= v98)
                    break;
                  v101 = *(uint64_t **)v102;
                  v65 = v102;
                  if (!*(_QWORD *)v102)
                    goto LABEL_209;
                }
                if (v103 >= v98)
                  break;
                v101 = (uint64_t *)*((_QWORD *)v102 + 1);
                if (!v101)
                {
                  v65 = v102 + 8;
                  goto LABEL_209;
                }
              }
              LODWORD(v99) = 0;
            }
LABEL_223:
            if ((__p[47] & 0x80000000) != 0)
              goto LABEL_260;
            goto LABEL_224;
          }
LABEL_238:
          v52 = 1;
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_256;
LABEL_239:
          if (v65)
            goto LABEL_240;
LABEL_241:
          if (v24)
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
          result = v52 == 0;
          if (v52)
            return result;
          if (++v3 == v221)
            return result;
          break;
        case 3:
          *(_DWORD *)v238 = 1065353216;
          v238[4] = 1;
          *(_DWORD *)&v238[8] = 1065353216;
          v238[12] = 1;
          *(_QWORD *)&v238[16] = 0;
          v238[24] = 1;
          *(_OWORD *)&v238[28] = xmmword_20AC05C60;
          *(_QWORD *)&v238[44] = 0x200000002;
          *(int32x2_t *)__p = v7;
          *(_QWORD *)&__p[8] = 0;
          memset_pattern16(&__p[16], &unk_20AC05D70, 0x400uLL);
          memset_pattern16(v226, &unk_20AC05D70, 0x400uLL);
          if (!sub_20ABB463C(v17, v18, __s, (uint64_t)v238))
            goto LABEL_47;
          if (*(char *)(v18 + 23) < 0)
          {
            sub_20AB88C14(&v242, *(void **)v18, *(_QWORD *)(v18 + 8));
          }
          else
          {
            v28 = *(_OWORD *)v18;
            v242.data = *(char **)(v18 + 16);
            *(_OWORD *)&v242.isa = v28;
          }
          cva::adp::PListPath::convertToPath(__s, (uint64_t)&v244);
          if (SHIBYTE(v244.data) >= 0)
            v125 = (const std::string::value_type *)&v244;
          else
            v125 = (const std::string::value_type *)v244.isa;
          if (SHIBYTE(v244.data) >= 0)
            v126 = HIBYTE(v244.data);
          else
            v126 = v244.info;
          std::string::append((std::string *)&v242, v125, v126);
          if (SHIBYTE(v244.data) < 0)
            operator delete(v244.isa);
          strcpy((char *)&__s1, "Pinhole LUT Distortion");
          *((_BYTE *)&__s1.__r_.__value_.__s + 23) = 22;
          if (SHIBYTE(v242.data) < 0)
            sub_20AB88C14(&v241, v242.isa, v242.info);
          else
            v241 = *(std::string *)&v242.isa;
          cva::adp::PListPath::convertToPath(&__s1, (uint64_t)&v244);
          if (SHIBYTE(v244.data) >= 0)
            v131 = (const std::string::value_type *)&v244;
          else
            v131 = (const std::string::value_type *)v244.isa;
          if (SHIBYTE(v244.data) >= 0)
            v132 = HIBYTE(v244.data);
          else
            v132 = v244.info;
          std::string::append(&v241, v131, v132);
          if (SHIBYTE(v244.data) < 0)
            operator delete(v244.isa);
          HIBYTE(v244.data) = 7;
          strcpy((char *)&v244, "Distort");
          v133 = sub_20ABB5EAC(v17, &v241, (uint64_t)&v244, &__p[16]);
          v134 = v133;
          if ((SHIBYTE(v244.data) & 0x80000000) == 0)
          {
            if ((v133 & 1) != 0)
              goto LABEL_329;
LABEL_328:
            memset_pattern16(&__p[16], &unk_20AC05D70, 0x400uLL);
            goto LABEL_329;
          }
          operator delete(v244.isa);
          if ((v134 & 1) == 0)
            goto LABEL_328;
LABEL_329:
          HIBYTE(v244.data) = 13;
          strcpy((char *)&v244, "Field Of View");
          v135 = cva::adp::io::PListSerializer::getItem<float>(v17, &v241, (uint64_t)&v244, __p);
          v136 = v135;
          if ((SHIBYTE(v244.data) & 0x80000000) == 0)
          {
            if ((v135 & 1) != 0)
              goto LABEL_332;
LABEL_331:
            *(_DWORD *)__p = 1070141403;
            goto LABEL_332;
          }
          operator delete(v244.isa);
          if ((v136 & 1) == 0)
            goto LABEL_331;
LABEL_332:
          HIBYTE(v244.data) = 9;
          strcpy((char *)&v244, "Undistort");
          v137 = sub_20ABB5EAC(v17, &v241, (uint64_t)&v244, v226);
          v138 = v137;
          if ((SHIBYTE(v244.data) & 0x80000000) == 0)
          {
            if ((v137 & 1) != 0)
              goto LABEL_335;
LABEL_334:
            memset_pattern16(v226, &unk_20AC05D70, 0x400uLL);
            goto LABEL_335;
          }
          operator delete(v244.isa);
          if ((v138 & 1) == 0)
            goto LABEL_334;
LABEL_335:
          HIBYTE(v244.data) = 21;
          strcpy((char *)&v244, "Inverse Field Of View");
          v139 = cva::adp::io::PListSerializer::getItem<float>(v17, &v241, (uint64_t)&v244, &__p[4]);
          v140 = v139;
          if ((SHIBYTE(v244.data) & 0x80000000) == 0)
          {
            if ((v139 & 1) != 0)
              goto LABEL_338;
LABEL_337:
            *(_DWORD *)&__p[4] = 1070141403;
            goto LABEL_338;
          }
          operator delete(v244.isa);
          if ((v140 & 1) == 0)
            goto LABEL_337;
LABEL_338:
          HIBYTE(v244.data) = 17;
          strcpy((char *)&v244, "Distortion Center");
          v141 = sub_20ABB6154(v17, &v241, &v244, &__p[8]);
          v142 = v141;
          if (SHIBYTE(v244.data) < 0)
          {
            operator delete(v244.isa);
            if ((v142 & 1) != 0)
            {
LABEL_340:
              if ((SHIBYTE(v241.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_341;
              goto LABEL_390;
            }
          }
          else if ((v141 & 1) != 0)
          {
            goto LABEL_340;
          }
          *(_QWORD *)&__p[8] = 0;
          if ((SHIBYTE(v241.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_341:
            if ((SHIBYTE(v242.data) & 0x80000000) == 0)
              goto LABEL_342;
            goto LABEL_391;
          }
LABEL_390:
          operator delete(v241.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v242.data) & 0x80000000) == 0)
            goto LABEL_342;
LABEL_391:
          operator delete(v242.isa);
LABEL_342:
          v24 = operator new();
          *(_QWORD *)(v24 + 8) = v5;
          *(_DWORD *)(v24 + 16) = 1086282793;
          *(_QWORD *)v24 = &off_24C37FDC0;
          v143 = *(_QWORD *)&v238[16];
          *(_QWORD *)(v24 + 20) = *(_QWORD *)v238;
          *(_QWORD *)(v24 + 25) = *(_QWORD *)&v238[5];
          *(_QWORD *)(v24 + 36) = v143;
          *(_BYTE *)(v24 + 44) = v238[24];
          *(_OWORD *)(v24 + 48) = *(_OWORD *)&v238[28];
          v144 = *(_QWORD *)&v238[44];
          *(_QWORD *)(v24 + 64) = *(_QWORD *)&v238[44];
          v145 = *(_QWORD *)&__p[8];
          *(_QWORD *)(v24 + 80) = *(_QWORD *)&__p[8];
          memcpy((void *)(v24 + 88), &__p[16], 0x400uLL);
          memcpy((void *)(v24 + 1112), v226, 0x400uLL);
          v147 = *((float *)&v145 + 1);
          v146 = *(float *)&v145;
          v148 = *(float *)(v24 + 20);
          v149 = (float)((float)HIDWORD(v144) - *((float *)&v143 + 1)) / v148;
          if ((float)((float)((float)((float)v144 - *(float *)&v143) / v148) - *(float *)&v145) > *(float *)&v145)
            v146 = (float)((float)((float)v144 - *(float *)&v143) / v148) - *(float *)&v145;
          if ((float)(v149 - *((float *)&v145 + 1)) > *((float *)&v145 + 1))
            v147 = v149 - *((float *)&v145 + 1);
          v150 = atanf(sqrtf((float)(v146 * v146) + (float)(v147 * v147)));
          *(float *)(v24 + 72) = v150;
          *(float *)(v24 + 76) = v150;
          v151 = (float)(v227 * v227) * 5.98;
          *(float *)(v24 + 12) = v227;
          *(float *)(v24 + 16) = v151;
          goto LABEL_448;
        default:
          goto LABEL_47;
      }
    }
  }
  return 1;
}

void sub_20ABB06F8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD2D02CLL);
}

uint64_t sub_20ABB071C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *sub_20ABB0738(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24C37FAE8;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20ABB0774(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24C37FAE8;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD2D02CLL);
}

uint64_t sub_20ABB07C0()
{
  return 0;
}

uint64_t sub_20ABB07C8(uint64_t a1, uint64_t a2, float a3)
{
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  uint64_t result;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) != 1)
    return 0;
  v7 = *(float **)(a1 + 24);
  v6 = *(float **)(a1 + 32);
  if (v7 == v6)
    return 0;
  if (*v7 <= a3)
  {
    v8 = v7 + 3;
    do
    {
      v9 = v8;
      if (v8 == v6)
        break;
      v8 += 3;
    }
    while (*v9 <= a3);
    v7 = v9 - 3;
  }
  *(float *)(a2 + 116) = (float)(v7[1] * *(float *)(a1 + 8)) + *(float *)(a1 + 16);
  result = 1;
  *(_BYTE *)(a2 + 120) = 1;
  return result;
}

uint64_t sub_20ABB0870(uint64_t result, char a2)
{
  *(_BYTE *)(result + 12) = a2;
  *(_BYTE *)(result + 20) = a2;
  return result;
}

uint64_t sub_20ABB087C(std::string::size_type *a1, uint64_t a2, _QWORD *a3, _DWORD *a4)
{
  const std::string::value_type *p_p;
  std::string::size_type data_high;
  uint64_t v9;
  uint64_t v10;
  char *v12;
  int v13;
  char v14;
  int v15;
  std::string __dst;
  __CFString __p;

  if (*(char *)(a2 + 23) < 0)
    sub_20AB88C14(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
  else
    __dst = *(std::string *)a2;
  cva::adp::PListPath::convertToPath(a3, (uint64_t)&__p);
  if (SHIBYTE(__p.data) >= 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = (const std::string::value_type *)__p.isa;
  if (SHIBYTE(__p.data) >= 0)
    data_high = HIBYTE(__p.data);
  else
    data_high = __p.info;
  std::string::append(&__dst, p_p, data_high);
  if (SHIBYTE(__p.data) < 0)
    operator delete(__p.isa);
  v15 = 0;
  HIBYTE(__p.data) = 4;
  strcpy((char *)&__p, "Data");
  v9 = sub_20ABB09E8(a1, &__dst, &__p, &v15);
  v10 = v9;
  if (SHIBYTE(__p.data) < 0)
  {
    operator delete(__p.isa);
    if (!(_DWORD)v10)
    {
LABEL_14:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return v10;
LABEL_22:
      operator delete(__dst.__r_.__value_.__l.__data_);
      return v10;
    }
  }
  else if (!(_DWORD)v9)
  {
    goto LABEL_14;
  }
  *a4 = v15;
  v12 = (char *)(a4 + 1);
  HIBYTE(__p.data) = 5;
  strcpy((char *)&__p, "Fixed");
  v13 = cva::adp::io::PListSerializer::getItem<BOOL>(a1, &__dst, (uint64_t)&__p, v12);
  if (SHIBYTE(__p.data) < 0)
    operator delete(__p.isa);
  v14 = *v12 ^ 1;
  if (!v13)
    v14 = 1;
  *v12 = v14;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_22;
  return v10;
}

uint64_t sub_20ABB09E8(std::string::size_type *a1, std::string *a2, CFStringRef a3, _DWORD *a4)
{
  std::string::size_type v6;
  const char *isa;
  const __CFString *v8;
  const __CFString *v9;
  char v10;
  void *v11;
  int v12;
  std::__shared_weak_count *v13;
  CFStringRef v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *v18[2];
  int v19;
  CFTypeRef cf;
  char v21;
  std::string::size_type v22;
  std::__shared_weak_count *v23;

  cva::adp::io::PListSerializer::getPath(a1, a2, &v22);
  v6 = v22;
  if (!v22)
  {
LABEL_17:
    v12 = 0;
    v13 = v23;
    if (!v23)
      return a3 & v12;
    goto LABEL_18;
  }
  if (SHIBYTE(a3->data) >= 0)
    isa = (const char *)a3;
  else
    isa = (const char *)a3->isa;
  a3 = CFStringCreateWithCStringNoCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], isa, 0x8000100u, (CFAllocatorRef)*MEMORY[0x24BDBD258]);
  v8 = (const __CFString *)objc_msgSend(*(id *)v6, "objectForKey:", a3);
  v9 = v8;
  v10 = *(_BYTE *)(v6 + 8);
  cf = v8;
  v21 = v10;
  if (!v8)
  {
    v21 = 0;
    v14 = a3;
LABEL_16:
    CFRelease(v14);
    goto LABEL_17;
  }
  CFRetain(v8);
  CFRelease(a3);
  if (!cva::ItemHandler::isVectorType(&cf))
  {
    v14 = v9;
    goto LABEL_16;
  }
  v18[0] = 0;
  v18[1] = 0;
  v19 = 0;
  sub_20ABB0B5C(&cf, (uint64_t)v18);
  v11 = v18[0];
  LODWORD(a3) = v19 == 1;
  if (v19 == 1 && v18[0] != a4)
    *a4 = *(_DWORD *)v18[0];
  free(v11);
  if (cf)
    CFRelease(cf);
  v12 = 1;
  v13 = v23;
  if (v23)
  {
LABEL_18:
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return a3 & v12;
}

void sub_20ABB0B48(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_20ABB0B5C(const void **a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  size_t v5;
  size_t v6;
  void *__src[2];
  unsigned int v8;
  void *memptr;

  cva::ItemHandler::getVector<float>(a1, (uint64_t)__src);
  if (__src != (void **)a2)
  {
    v3 = v8;
    if (v8)
    {
      v4 = *(void **)a2;
      if (*(_QWORD *)(a2 + 8) >= (unint64_t)v8)
      {
        v5 = 4 * v8;
      }
      else
      {
        free(v4);
        v5 = 4 * v3;
        v6 = (v5 + 31) & 0x7FFFFFFE0;
        *(_QWORD *)a2 = 0;
        *(_QWORD *)(a2 + 8) = v6 >> 2;
        memptr = 0;
        malloc_type_posix_memalign(&memptr, 0x20uLL, v6, 0x49090899uLL);
        v4 = memptr;
        *(_QWORD *)a2 = memptr;
      }
      memcpy(v4, __src[0], v5);
    }
    else
    {
      free(*(void **)a2);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    *(_DWORD *)(a2 + 16) = v8;
  }
  free(__src[0]);
}

uint64_t sub_20ABB0C14(uint64_t __s1, _DWORD *a2)
{
  const void *v3;
  size_t v4;
  int *v5;
  int v7;
  int v8;
  char **v10;

  v3 = (const void *)__s1;
  if ((*(char *)(__s1 + 23) & 0x80000000) == 0)
  {
    v4 = *(unsigned __int8 *)(__s1 + 23);
    if (*(_BYTE *)(__s1 + 23) != 6)
      return __s1;
    __s1 = memcmp((const void *)__s1, "Static", *(unsigned __int8 *)(__s1 + 23));
    if ((_DWORD)__s1)
    {
      __s1 = memcmp(v3, "Linear", v4);
      if ((_DWORD)__s1)
        return __s1;
      goto LABEL_16;
    }
LABEL_17:
    v10 = &cva::adp::io::detail::EnumDescription<cva::geo::eExtrinsicsType,void>::names;
    goto LABEL_18;
  }
  if (*(_QWORD *)(__s1 + 8) != 6)
    return __s1;
  v5 = *(int **)__s1;
  if (**(_DWORD **)__s1 == 1952543827 && *(_WORD *)(*(_QWORD *)__s1 + 4) == 25449)
    goto LABEL_17;
  v7 = *v5;
  v8 = *((unsigned __int16 *)v5 + 2);
  if (v7 == 1701734732 && v8 == 29281)
  {
LABEL_16:
    v10 = &off_24C380740;
LABEL_18:
    *a2 = (unint64_t)((char *)v10
                           - (char *)&cva::adp::io::detail::EnumDescription<cva::geo::eExtrinsicsType,void>::names) >> 3;
  }
  return __s1;
}

uint64_t sub_20ABB0CFC(std::string::size_type *a1, uint64_t a2, _QWORD *a3, _DWORD *a4)
{
  const __CFString *p_p;
  const std::string::value_type *v8;
  std::string::size_type v9;
  std::string::size_type v10;
  CFStringRef v11;
  void **v12;
  char v13;
  _DWORD *v14;
  std::__shared_weak_count *v15;
  CFStringRef v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  int v19;
  int v21;
  char v22;
  char cStr[8];
  char v24;
  std::string __dst;
  void *__p;
  std::string::size_type v27;
  int v28;
  char v29;
  CFTypeRef cf;
  char v31;
  std::string::size_type v32;
  std::__shared_weak_count *v33;

  if (*(char *)(a2 + 23) < 0)
    sub_20AB88C14(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
  else
    __dst = *(std::string *)a2;
  p_p = (const __CFString *)&__p;
  cva::adp::PListPath::convertToPath(a3, (uint64_t)&__p);
  if (v29 >= 0)
    v8 = (const std::string::value_type *)&__p;
  else
    v8 = (const std::string::value_type *)__p;
  if (v29 >= 0)
    v9 = v29;
  else
    v9 = v27;
  std::string::append(&__dst, v8, v9);
  if (v29 < 0)
    operator delete(__p);
  v24 = 4;
  strcpy(cStr, "Data");
  cva::adp::io::PListSerializer::getPath(a1, &__dst, &v32);
  v10 = v32;
  if (!v32)
  {
LABEL_25:
    v15 = v33;
    if (!v33)
      goto LABEL_30;
    goto LABEL_26;
  }
  v11 = CFStringCreateWithCStringNoCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], cStr, 0x8000100u, (CFAllocatorRef)*MEMORY[0x24BDBD258]);
  v12 = (void **)objc_msgSend(*(id *)v10, "objectForKey:", v11);
  p_p = (const __CFString *)v12;
  v13 = *(_BYTE *)(v10 + 8);
  cf = v12;
  v31 = v13;
  if (!v12)
  {
    v31 = 0;
    v16 = v11;
LABEL_24:
    CFRelease(v16);
    LODWORD(v10) = 0;
    goto LABEL_25;
  }
  CFRetain(v12);
  CFRelease(v11);
  if (!cva::ItemHandler::isVectorType(&cf))
  {
    v16 = p_p;
    goto LABEL_24;
  }
  __p = 0;
  v27 = 0;
  v28 = 0;
  sub_20ABB0B5C(&cf, (uint64_t)&__p);
  v14 = __p;
  LODWORD(p_p) = v28 == 9;
  if (v28 == 9 && __p != a4 + 1)
  {
    a4[1] = *(_DWORD *)__p;
    a4[2] = v14[1];
    a4[3] = v14[2];
    a4[4] = v14[3];
    a4[5] = v14[4];
    a4[6] = v14[5];
    a4[7] = v14[6];
    a4[8] = v14[7];
    a4[9] = v14[8];
  }
  free(v14);
  if (cf)
    CFRelease(cf);
  LODWORD(v10) = 1;
  v15 = v33;
  if (v33)
  {
LABEL_26:
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
LABEL_30:
  v19 = p_p & v10;
  if (v24 < 0)
  {
    operator delete(*(void **)cStr);
    if (!v19)
    {
LABEL_32:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return p_p & v10;
LABEL_40:
      operator delete(__dst.__r_.__value_.__l.__data_);
      return p_p & v10;
    }
  }
  else if (!v19)
  {
    goto LABEL_32;
  }
  v29 = 5;
  strcpy((char *)&__p, "Fixed");
  v21 = cva::adp::io::PListSerializer::getItem<BOOL>(a1, &__dst, (uint64_t)&__p, a4);
  if (v29 < 0)
    operator delete(__p);
  v22 = *(_BYTE *)a4 ^ 1;
  if (!v21)
    v22 = 1;
  *(_BYTE *)a4 = v22;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_40;
  return p_p & v10;
}

void sub_20ABB0FBC(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20ABB0FD0(std::string::size_type *a1, uint64_t a2, _QWORD *a3, _DWORD *a4)
{
  const __CFString *p_p;
  const std::string::value_type *v8;
  std::string::size_type v9;
  std::string::size_type v10;
  CFStringRef v11;
  void **v12;
  char v13;
  _DWORD *v14;
  std::__shared_weak_count *v15;
  CFStringRef v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  int v19;
  char *v21;
  int v22;
  char v23;
  char cStr[8];
  char v25;
  std::string __dst;
  void *__p;
  std::string::size_type v28;
  int v29;
  char v30;
  CFTypeRef cf;
  char v32;
  std::string::size_type v33;
  std::__shared_weak_count *v34;

  if (*(char *)(a2 + 23) < 0)
    sub_20AB88C14(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
  else
    __dst = *(std::string *)a2;
  p_p = (const __CFString *)&__p;
  cva::adp::PListPath::convertToPath(a3, (uint64_t)&__p);
  if (v30 >= 0)
    v8 = (const std::string::value_type *)&__p;
  else
    v8 = (const std::string::value_type *)__p;
  if (v30 >= 0)
    v9 = v30;
  else
    v9 = v28;
  std::string::append(&__dst, v8, v9);
  if (v30 < 0)
    operator delete(__p);
  v25 = 4;
  strcpy(cStr, "Data");
  cva::adp::io::PListSerializer::getPath(a1, &__dst, &v33);
  v10 = v33;
  if (!v33)
  {
LABEL_25:
    v15 = v34;
    if (!v34)
      goto LABEL_30;
    goto LABEL_26;
  }
  v11 = CFStringCreateWithCStringNoCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], cStr, 0x8000100u, (CFAllocatorRef)*MEMORY[0x24BDBD258]);
  v12 = (void **)objc_msgSend(*(id *)v10, "objectForKey:", v11);
  p_p = (const __CFString *)v12;
  v13 = *(_BYTE *)(v10 + 8);
  cf = v12;
  v32 = v13;
  if (!v12)
  {
    v32 = 0;
    v16 = v11;
LABEL_24:
    CFRelease(v16);
    LODWORD(v10) = 0;
    goto LABEL_25;
  }
  CFRetain(v12);
  CFRelease(v11);
  if (!cva::ItemHandler::isVectorType(&cf))
  {
    v16 = p_p;
    goto LABEL_24;
  }
  __p = 0;
  v28 = 0;
  v29 = 0;
  sub_20ABB0B5C(&cf, (uint64_t)&__p);
  v14 = __p;
  LODWORD(p_p) = v29 == 3;
  if (v29 == 3 && __p != a4)
  {
    *a4 = *(_DWORD *)__p;
    a4[1] = v14[1];
    a4[2] = v14[2];
  }
  free(v14);
  if (cf)
    CFRelease(cf);
  LODWORD(v10) = 1;
  v15 = v34;
  if (v34)
  {
LABEL_26:
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
LABEL_30:
  v19 = p_p & v10;
  if (v25 < 0)
  {
    operator delete(*(void **)cStr);
    if (!v19)
    {
LABEL_32:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return p_p & v10;
LABEL_40:
      operator delete(__dst.__r_.__value_.__l.__data_);
      return p_p & v10;
    }
  }
  else if (!v19)
  {
    goto LABEL_32;
  }
  v30 = 5;
  strcpy((char *)&__p, "Fixed");
  v21 = (char *)(a4 + 3);
  v22 = cva::adp::io::PListSerializer::getItem<BOOL>(a1, &__dst, (uint64_t)&__p, v21);
  if (v30 < 0)
    operator delete(__p);
  v23 = *v21 ^ 1;
  if (!v22)
    v23 = 1;
  *v21 = v23;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_40;
  return p_p & v10;
}

void sub_20ABB1260(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

double sub_20ABB1274(uint64_t a1, uint64_t a2)
{
  float *v3;
  float *v4;
  double result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  int v9;

  v3 = *(float **)a2;
  if (*(_QWORD *)a2 == a1)
  {
    v9 = 0;
    v7 = 0u;
    v8 = 0u;
    sub_20ABB1274(&v7);
    result = *(double *)&v7;
    v6 = v8;
    *(_OWORD *)a1 = v7;
    *(_OWORD *)(a1 + 16) = v6;
    *(_DWORD *)(a1 + 32) = v9;
  }
  else
  {
    v4 = **(float ***)(a2 + 8);
    *(float *)a1 = (float)((float)((float)(*v3 * *v4) + 0.0) + (float)(v3[3] * v4[3])) + (float)(v3[6] * v4[6]);
    *(float *)(a1 + 4) = (float)((float)((float)(v3[1] * *v4) + 0.0) + (float)(v3[4] * v4[3])) + (float)(v3[7] * v4[6]);
    *(float *)(a1 + 8) = (float)((float)((float)(v3[2] * *v4) + 0.0) + (float)(v3[5] * v4[3])) + (float)(v3[8] * v4[6]);
    *(float *)(a1 + 12) = (float)((float)((float)(*v3 * v4[1]) + 0.0) + (float)(v3[3] * v4[4])) + (float)(v3[6] * v4[7]);
    *(float *)(a1 + 16) = (float)((float)((float)(v3[1] * v4[1]) + 0.0) + (float)(v3[4] * v4[4]))
                        + (float)(v3[7] * v4[7]);
    *(float *)(a1 + 20) = (float)((float)((float)(v3[2] * v4[1]) + 0.0) + (float)(v3[5] * v4[4]))
                        + (float)(v3[8] * v4[7]);
    *(float *)(a1 + 24) = (float)((float)((float)(*v3 * v4[2]) + 0.0) + (float)(v3[3] * v4[5])) + (float)(v3[6] * v4[8]);
    *(float *)(a1 + 28) = (float)((float)((float)(v3[1] * v4[2]) + 0.0) + (float)(v3[4] * v4[5]))
                        + (float)(v3[7] * v4[8]);
    *(float *)&result = (float)((float)((float)(v3[2] * v4[2]) + 0.0) + (float)(v3[5] * v4[5])) + (float)(v3[8] * v4[8]);
    *(_DWORD *)(a1 + 32) = LODWORD(result);
  }
  return result;
}

_QWORD *sub_20ABB1440(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24C37FA38;
  v2 = (std::__shared_weak_count *)a1[18];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void sub_20ABB14A4(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C37FA38;
  v1 = (std::__shared_weak_count *)a1[18];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD2D02CLL);
}

uint64_t sub_20ABB1518()
{
  return 1;
}

uint64_t sub_20ABB1520@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new();
  *(_QWORD *)result = &off_24C37FA38;
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_OWORD *)(result + 12) = *(_OWORD *)(a1 + 12);
  *(_OWORD *)(result + 28) = *(_OWORD *)(a1 + 28);
  *(_DWORD *)(result + 44) = *(_DWORD *)(a1 + 44);
  *(_QWORD *)(result + 48) = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(result + 56) = *(_DWORD *)(a1 + 56);
  *(_BYTE *)(result + 60) = *(_BYTE *)(a1 + 60);
  *(_BYTE *)(result + 64) = *(_BYTE *)(a1 + 64);
  v5 = *(_OWORD *)(a1 + 68);
  v6 = *(_OWORD *)(a1 + 84);
  *(_DWORD *)(result + 100) = *(_DWORD *)(a1 + 100);
  *(_OWORD *)(result + 84) = v6;
  *(_OWORD *)(result + 68) = v5;
  *(_QWORD *)(result + 104) = *(_QWORD *)(a1 + 104);
  *(_BYTE *)(result + 112) = *(_BYTE *)(a1 + 112);
  *(_QWORD *)(result + 116) = *(_QWORD *)(a1 + 116);
  *(_QWORD *)(result + 121) = *(_QWORD *)(a1 + 121);
  v7 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(result + 136) = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(result + 144) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *a2 = result;
  return result;
}

uint64_t sub_20ABB1600(uint64_t a1, char a2)
{
  uint64_t result;

  *(_BYTE *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 60) = a2;
  *(_BYTE *)(a1 + 64) = a2;
  *(_BYTE *)(a1 + 112) = a2;
  result = *(_QWORD *)(a1 + 136);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  return result;
}

float sub_20ABB1628@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  float v4;
  float v5;
  __float2 v6;
  __float2 v7;
  float v8;
  float v9;
  float result;
  float v11;
  __int128 v12;
  __int128 v13;
  int v14;
  float32x2_t v15;
  uint64_t v16;
  float32x2_t v17;
  float v18;

  v12 = xmmword_20AC06220;
  v14 = 1065353216;
  v13 = unk_20AC06230;
  v16 = 0x100000000;
  v18 = 0.0;
  v17 = 0;
  sub_20AB9173C((float32x2_t *)(a1 + 68), (float *)&v17);
  v4 = *(float *)(a1 + 116);
  v15 = vmul_n_f32(v17, v4);
  *(float *)&v16 = v18 * v4;
  sub_20ABB3EE8((float *)&v15, (float *)(a1 + 12), (uint64_t)&v12);
  *(_BYTE *)a2 = 1;
  *(_OWORD *)(a2 + 4) = v12;
  *(_OWORD *)(a2 + 20) = v13;
  *(_DWORD *)(a2 + 36) = v14;
  v11 = *(float *)(a1 + 124);
  v5 = *(float *)(a1 + 104);
  v6 = __sincosf_stret(*(float *)(a1 + 108));
  v7 = __sincosf_stret(v5);
  v8 = *(float *)(a1 + 116);
  v9 = *(float *)(a1 + 56);
  *(float32x2_t *)(a2 + 40) = vadd_f32(vmul_n_f32(vmul_n_f32(vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v7.__sinval), LODWORD(v7.__cosval)), v11), v6.__sinval), v8), *(float32x2_t *)(a1 + 48));
  result = (float)((float)(v11 * v6.__cosval) * v8) + v9;
  *(float *)(a2 + 48) = result;
  *(_BYTE *)(a2 + 52) = 1;
  return result;
}

float sub_20ABB1754@<S0>(uint64_t a1@<X0>, float32x2_t *a2@<X8>)
{
  float v4;
  float v5;
  __float2 v6;
  __float2 v7;
  float v8;
  float v9;
  float result;
  float v11;
  _DWORD v12[9];
  float32x2_t v13;
  float v14;
  int v15;
  _BYTE v16[20];
  __int128 v17;
  int v18;
  float32x2_t v19;
  uint64_t v20;
  float32x2_t v21;
  float v22;

  *(_OWORD *)&v16[4] = xmmword_20AC06220;
  a2[1].i8[4] = 1;
  v15 = 1;
  v17 = unk_20AC06230;
  v18 = 1065353216;
  v20 = 0x100000000;
  v21 = 0;
  v22 = 0.0;
  sub_20AB9173C((float32x2_t *)(a1 + 68), (float *)&v21);
  v4 = *(float *)(a1 + 116);
  v19 = vmul_n_f32(v21, v4);
  *(float *)&v20 = v22 * v4;
  sub_20ABB3EE8((float *)&v19, (float *)(a1 + 12), (uint64_t)&v16[4]);
  v12[0] = *(_DWORD *)&v16[4];
  v12[1] = *(_DWORD *)&v16[16];
  v12[2] = DWORD2(v17);
  v12[3] = *(_DWORD *)&v16[8];
  v12[4] = v17;
  v12[5] = HIDWORD(v17);
  v12[6] = *(_DWORD *)&v16[12];
  v12[7] = DWORD1(v17);
  v12[8] = v18;
  v11 = *(float *)(a1 + 124);
  v5 = *(float *)(a1 + 104);
  v6 = __sincosf_stret(*(float *)(a1 + 108));
  v7 = __sincosf_stret(v5);
  v8 = *(float *)(a1 + 116);
  v13 = vadd_f32(vmul_n_f32(vmul_n_f32(vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v7.__sinval), LODWORD(v7.__cosval)), v11), v6.__sinval), v8), *(float32x2_t *)(a1 + 48));
  v14 = (float)((float)(v11 * v6.__cosval) * v8) + *(float *)(a1 + 56);
  *(_QWORD *)v16 = v12;
  *(_QWORD *)&v16[8] = &v13;
  v19 = 0;
  LODWORD(v20) = 0;
  sub_20AB920D4((float *)&v19, (float **)v16);
  v9 = *(float *)&v20;
  *a2 = vneg_f32(v19);
  result = -v9;
  a2[1].f32[0] = -v9;
  return result;
}

float32_t sub_20ABB18D0@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, float32x2_t *a3@<X8>)
{
  float v6;
  float v7;
  __float2 v8;
  __float2 v9;
  float v10;
  float32x2_t v11;
  float v12;
  float v13;
  float32_t result;
  float v15;
  _OWORD v16[2];
  int v17;
  float32x2_t v18;
  float v19;
  char v20;
  char v21;
  __int128 v22;
  __int128 v23;
  int v24;
  float *v25;
  uint64_t v26;
  float32x2_t v27;
  float v28;

  v22 = xmmword_20AC06220;
  v21 = 1;
  v24 = 1065353216;
  v23 = unk_20AC06230;
  v26 = 0x100000000;
  v27 = 0;
  v28 = 0.0;
  sub_20AB9173C((float32x2_t *)(a1 + 68), (float *)&v27);
  v6 = *(float *)(a1 + 116);
  v25 = (float *)vmul_n_f32(v27, v6);
  *(float *)&v26 = v28 * v6;
  sub_20ABB3EE8((float *)&v25, (float *)(a1 + 12), (uint64_t)&v22);
  v16[0] = v22;
  v16[1] = v23;
  v17 = v24;
  v15 = *(float *)(a1 + 124);
  v7 = *(float *)(a1 + 104);
  v8 = __sincosf_stret(*(float *)(a1 + 108));
  v9 = __sincosf_stret(v7);
  v10 = *(float *)(a1 + 116);
  v11 = vadd_f32(vmul_n_f32(vmul_n_f32(vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v9.__sinval), LODWORD(v9.__cosval)), v15), v8.__sinval), v10), *(float32x2_t *)(a1 + 48));
  v12 = *(float *)(a1 + 56);
  v18 = v11;
  v13 = (float)((float)(v15 * v8.__cosval) * v10) + v12;
  v19 = v13;
  v20 = 1;
  v25 = (float *)v16;
  v26 = a2;
  *(_QWORD *)&v22 = 0;
  DWORD2(v22) = 0;
  sub_20AB920D4((float *)&v22, &v25);
  result = *((float *)&v22 + 2) + v13;
  *a3 = vadd_f32(*(float32x2_t *)&v22, v11);
  a3[1].f32[0] = result;
  a3[1].i8[4] = 1;
  return result;
}

float32_t sub_20ABB1A48@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, float32x2_t *a3@<X8>)
{
  float v6;
  float v7;
  __float2 v8;
  __float2 v9;
  float v10;
  float v11;
  float32_t result;
  float v13;
  __int128 v14;
  __int128 v15;
  int v16;
  float32x2_t v17;
  float v18;
  char v19;
  float *v20[2];
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  float32x2_t v24;
  float v25;
  char v26;
  __int128 v27;
  __int128 v28;
  int v29;

  v27 = xmmword_20AC06220;
  v26 = 1;
  v29 = 1065353216;
  v28 = unk_20AC06230;
  *((_QWORD *)&v23 + 1) = 0x100000000;
  LODWORD(v22) = 0;
  v21 = 0;
  sub_20AB9173C((float32x2_t *)(a1 + 68), (float *)&v21);
  v6 = *(float *)(a1 + 116);
  *(float32x2_t *)&v23 = vmul_n_f32((float32x2_t)v21, v6);
  *((float *)&v23 + 2) = *(float *)&v22 * v6;
  sub_20ABB3EE8((float *)&v23, (float *)(a1 + 12), (uint64_t)&v27);
  v14 = v27;
  v15 = v28;
  v16 = v29;
  v13 = *(float *)(a1 + 124);
  v7 = *(float *)(a1 + 104);
  v8 = __sincosf_stret(*(float *)(a1 + 108));
  v9 = __sincosf_stret(v7);
  v10 = *(float *)(a1 + 116);
  v11 = *(float *)(a1 + 56);
  v17 = vadd_f32(vmul_n_f32(vmul_n_f32(vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v9.__sinval), LODWORD(v9.__cosval)), v13), v8.__sinval), v10), *(float32x2_t *)(a1 + 48));
  v18 = (float)((float)(v13 * v8.__cosval) * v10) + v11;
  v19 = 1;
  v26 = 1;
  *(_QWORD *)&v27 = __PAIR64__(HIDWORD(v14), v14);
  *((_QWORD *)&v27 + 1) = __PAIR64__(DWORD1(v14), DWORD2(v15));
  *(_QWORD *)&v28 = __PAIR64__(HIDWORD(v15), v15);
  *((_QWORD *)&v28 + 1) = __PAIR64__(DWORD1(v15), DWORD2(v14));
  v29 = v16;
  v21 = &v27;
  v22 = a2;
  v20[0] = (float *)&v27;
  v20[1] = (float *)&v17;
  *(_QWORD *)((char *)&v23 + 4) = 0;
  HIDWORD(v23) = 0;
  sub_20AB920D4((float *)&v23 + 1, (float **)&v21);
  v25 = 0.0;
  v24 = 0;
  sub_20AB920D4((float *)&v24, v20);
  result = *((float *)&v23 + 3) - v25;
  *a3 = vsub_f32(*(float32x2_t *)((char *)&v23 + 4), v24);
  a3[1].f32[0] = result;
  a3[1].i8[4] = 1;
  return result;
}

BOOL sub_20ABB1C18(uint64_t a1, _QWORD *a2)
{
  int v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  if (!v4)
  {
    v7 = *a2;
    v6 = a2[1];
    if (v6)
    {
      v8 = (unint64_t *)(v6 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    v10 = *(std::__shared_weak_count **)(a1 + 144);
    *(_QWORD *)(a1 + 136) = v7;
    *(_QWORD *)(a1 + 144) = v6;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  return v4 == 0;
}

uint64_t sub_20ABB1CBC(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 136);
  if (v2)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 24))(v2, a1);
  else
    return 1;
}

uint64_t *sub_20ABB1CDC(uint64_t a1, uint64_t *a2)
{
  const char *v4;
  size_t v5;
  void **p_dst;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t *v11;
  const char *v12;
  size_t v13;
  void **v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t *v20;
  const char *v21;
  size_t v22;
  void **v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  const char *v29;
  size_t v30;
  void **v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  double v38;
  float v39;
  char __p[18];
  char v41;
  void **__dst;
  uint64_t v43;
  unsigned __int8 v44;

  sub_20ABB22E4((_BYTE *)(a1 + 8), a2);
  sub_20ABB242C((uint64_t *)(a1 + 48), a2);
  if (*(_BYTE *)(a1 + 64))
    v4 = "[FREE]";
  else
    v4 = "[FIXED]";
  if (*(_BYTE *)(a1 + 64))
    v5 = 6;
  else
    v5 = 7;
  v44 = v5;
  memcpy(&__dst, v4, v5);
  *(_BYTE *)((unint64_t)&__dst | v5) = 0;
  if ((v44 & 0x80u) == 0)
    p_dst = (void **)&__dst;
  else
    p_dst = __dst;
  if ((v44 & 0x80u) == 0)
    v7 = v44;
  else
    v7 = v43;
  v8 = sub_20AB89270(a2, (uint64_t)p_dst, v7);
  v9 = sub_20AB89270(v8, (uint64_t)"[", 1);
  v41 = 14;
  strcpy(__p, "Delta Rotation");
  v10 = sub_20AB89270(v9, (uint64_t)__p, 14);
  sub_20AB89270(v10, (uint64_t)"] : ", 4);
  v39 = 0.0;
  v38 = 0.0;
  sub_20AB9173C((float32x2_t *)(a1 + 68), (float *)&v38);
  v11 = sub_20ABB3650(a2, v38, v39);
  sub_20AB89270(v11, (uint64_t)"\n", 1);
  if (v41 < 0)
  {
    operator delete(*(void **)__p);
    if (((char)v44 & 0x80000000) == 0)
      goto LABEL_15;
  }
  else if (((char)v44 & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete(__dst);
LABEL_15:
  if (*(_BYTE *)(a1 + 112))
    v12 = "[FREE]";
  else
    v12 = "[FIXED]";
  if (*(_BYTE *)(a1 + 112))
    v13 = 6;
  else
    v13 = 7;
  v44 = v13;
  memcpy(&__dst, v12, v13);
  *(_BYTE *)((unint64_t)&__dst | v13) = 0;
  if ((v44 & 0x80u) == 0)
    v14 = (void **)&__dst;
  else
    v14 = __dst;
  if ((v44 & 0x80u) == 0)
    v15 = v44;
  else
    v15 = v43;
  v16 = sub_20AB89270(a2, (uint64_t)v14, v15);
  v17 = sub_20AB89270(v16, (uint64_t)"[", 1);
  v41 = 17;
  strcpy(__p, "Delta Translation");
  v18 = sub_20AB89270(v17, (uint64_t)__p, 17);
  v19 = sub_20AB89270(v18, (uint64_t)"] : ", 4);
  v20 = sub_20ABB2DBC(v19, *(double *)(a1 + 104));
  sub_20AB89270(v20, (uint64_t)"\n", 1);
  if (v41 < 0)
  {
    operator delete(*(void **)__p);
    if (((char)v44 & 0x80000000) == 0)
      goto LABEL_29;
  }
  else if (((char)v44 & 0x80000000) == 0)
  {
    goto LABEL_29;
  }
  operator delete(__dst);
LABEL_29:
  if (*(_BYTE *)(a1 + 120))
    v21 = "[FREE]";
  else
    v21 = "[FIXED]";
  if (*(_BYTE *)(a1 + 120))
    v22 = 6;
  else
    v22 = 7;
  v44 = v22;
  memcpy(&__dst, v21, v22);
  *(_BYTE *)((unint64_t)&__dst | v22) = 0;
  if ((v44 & 0x80u) == 0)
    v23 = (void **)&__dst;
  else
    v23 = __dst;
  if ((v44 & 0x80u) == 0)
    v24 = v44;
  else
    v24 = v43;
  v25 = sub_20AB89270(a2, (uint64_t)v23, v24);
  v26 = sub_20AB89270(v25, (uint64_t)"[", 1);
  v41 = 15;
  strcpy(__p, "Linear Position");
  v27 = sub_20AB89270(v26, (uint64_t)__p, 15);
  sub_20AB89270(v27, (uint64_t)"] : ", 4);
  v28 = (_QWORD *)std::ostream::operator<<();
  sub_20AB89270(v28, (uint64_t)"\n", 1);
  if (v41 < 0)
  {
    operator delete(*(void **)__p);
    if (((char)v44 & 0x80000000) == 0)
      goto LABEL_43;
  }
  else if (((char)v44 & 0x80000000) == 0)
  {
    goto LABEL_43;
  }
  operator delete(__dst);
LABEL_43:
  if (*(_BYTE *)(a1 + 128))
    v29 = "[FREE]";
  else
    v29 = "[FIXED]";
  if (*(_BYTE *)(a1 + 128))
    v30 = 6;
  else
    v30 = 7;
  v44 = v30;
  memcpy(&__dst, v29, v30);
  *(_BYTE *)((unint64_t)&__dst | v30) = 0;
  if ((v44 & 0x80u) == 0)
    v31 = (void **)&__dst;
  else
    v31 = __dst;
  if ((v44 & 0x80u) == 0)
    v32 = v44;
  else
    v32 = v43;
  v33 = sub_20AB89270(a2, (uint64_t)v31, v32);
  v34 = sub_20AB89270(v33, (uint64_t)"[", 1);
  v41 = 13;
  strcpy(__p, "Linear Length");
  v35 = sub_20AB89270(v34, (uint64_t)__p, 13);
  sub_20AB89270(v35, (uint64_t)"] : ", 4);
  v36 = (_QWORD *)std::ostream::operator<<();
  sub_20AB89270(v36, (uint64_t)"\n", 1);
  if (v41 < 0)
  {
    operator delete(*(void **)__p);
    if (((char)v44 & 0x80000000) == 0)
      return a2;
LABEL_65:
    operator delete(__dst);
    return a2;
  }
  if ((char)v44 < 0)
    goto LABEL_65;
  return a2;
}

BOOL sub_20ABB20E4(float32x2_t *a1, float32x2_t *a2, float a3)
{
  float v6;
  float32x2_t v7;
  float32x2_t v8;
  __int128 v10;
  __int128 v11;
  int v12;
  char *v13;
  char *v14;
  char **v15;
  __int128 v16;
  __int128 v17;
  int v18;

  if ((*(unsigned int (**)(float32x2_t *))(*(_QWORD *)a2 + 16))(a2) != 1)
    return 0;
  v13 = (char *)&a2[1] + 4;
  v14 = (char *)&a1[1] + 4;
  v15 = &v13;
  v16 = 0u;
  v17 = 0u;
  v18 = 0;
  sub_20ABB1274((uint64_t)&v16, (uint64_t)&v14);
  v10 = v16;
  v11 = v17;
  v12 = v18;
  DWORD2(v16) = 0;
  *(_QWORD *)&v16 = 0;
  sub_20AB9173C((float32x2_t *)&v10, (float *)&v16);
  if (sqrtf((float)((float)(*(float *)&v16 * *(float *)&v16) + (float)(*((float *)&v16 + 1) * *((float *)&v16 + 1)))+ (float)(*((float *)&v16 + 2) * *((float *)&v16 + 2))) >= a3)return 0;
  v6 = a1[7].f32[0] - a2[7].f32[0];
  v7 = vsub_f32(a1[6], a2[6]);
  if (sqrtf(vaddv_f32(vmul_f32(v7, v7)) + (float)(v6 * v6)) >= a3)
    return 0;
  v13 = (char *)&a2[8] + 4;
  v14 = (char *)&a1[8] + 4;
  v15 = &v13;
  v16 = 0u;
  v17 = 0u;
  v18 = 0;
  sub_20ABB1274((uint64_t)&v16, (uint64_t)&v14);
  v10 = v16;
  v11 = v17;
  v12 = v18;
  DWORD2(v16) = 0;
  *(_QWORD *)&v16 = 0;
  sub_20AB9173C((float32x2_t *)&v10, (float *)&v16);
  if (sqrtf((float)((float)(*(float *)&v16 * *(float *)&v16) + (float)(*((float *)&v16 + 1) * *((float *)&v16 + 1)))+ (float)(*((float *)&v16 + 2) * *((float *)&v16 + 2))) >= a3)return 0;
  if (a1[8].u8[0] == a2[8].u8[0]
    && (v8 = vsub_f32(a1[13], a2[13]), sqrtf(vaddv_f32(vmul_f32(v8, v8))) < a3)
    && a1[14].u8[0] == a2[14].u8[0]
    && (float)(a1[14].f32[1] - a2[14].f32[1]) < a3)
  {
    return (float)(a1[15].f32[1] - a2[15].f32[1]) < a3;
  }
  else
  {
    return 0;
  }
}

uint64_t *sub_20ABB22E4(_BYTE *a1, uint64_t *a2)
{
  float32x2_t *v3;
  const char *v4;
  size_t v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t *v11;
  char __p[20];
  char v14;
  void *__dst[2];
  unsigned __int8 v16;
  double v17;
  float v18;

  v3 = (float32x2_t *)(a1 + 4);
  if (*a1)
    v4 = "[FREE]";
  else
    v4 = "[FIXED]";
  if (*a1)
    v5 = 6;
  else
    v5 = 7;
  v16 = v5;
  memcpy(__dst, v4, v5);
  *(_BYTE *)((unint64_t)__dst | v5) = 0;
  if ((v16 & 0x80u) == 0)
    v6 = __dst;
  else
    v6 = (void **)__dst[0];
  if ((v16 & 0x80u) == 0)
    v7 = v16;
  else
    v7 = (uint64_t)__dst[1];
  v8 = sub_20AB89270(a2, (uint64_t)v6, v7);
  v9 = sub_20AB89270(v8, (uint64_t)"[", 1);
  v14 = 19;
  strcpy(__p, "Extrinsics Rotation");
  v10 = sub_20AB89270(v9, (uint64_t)__p, 19);
  sub_20AB89270(v10, (uint64_t)"] : ", 4);
  v18 = 0.0;
  v17 = 0.0;
  sub_20AB9173C(v3, (float *)&v17);
  v11 = sub_20ABB3650(a2, v17, v18);
  sub_20AB89270(v11, (uint64_t)"\n", 1);
  if (v14 < 0)
  {
    operator delete(*(void **)__p);
    if (((char)v16 & 0x80000000) == 0)
      return a2;
LABEL_17:
    operator delete(__dst[0]);
    return a2;
  }
  if ((char)v16 < 0)
    goto LABEL_17;
  return a2;
}

uint64_t *sub_20ABB242C(uint64_t *a1, uint64_t *a2)
{
  const char *v4;
  size_t v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  char *v11;
  int v12;
  int64_t v13;
  size_t v14;
  size_t v15;
  double v16;
  size_t v17;
  double v18;
  std::string *p_b;
  uint64_t v20;
  uint64_t v21;
  std::string *v22;
  std::string::size_type v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  std::string *v29;
  std::string::size_type v30;
  __n128 v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  void **v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  void **v43;
  int v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  void **v50;
  char *v51;
  void **v52;
  const std::locale::facet *v53;
  uint64_t v54;
  BOOL v55;
  std::string::size_type v56;
  std::string::size_type v57;
  int64_t v58;
  void **v59;
  uint64_t v60;
  void **v61;
  const std::locale::facet *v62;
  uint64_t v63;
  std::string::size_type v64;
  int64_t v65;
  void **v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  std::string *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  void **v75;
  int v76;
  const std::locale::facet *v77;
  uint64_t v78;
  std::string::size_type v79;
  std::string::size_type v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  std::string *v84;
  uint64_t v85;
  uint64_t v86;
  int v88;
  void **v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  void *v94[3];
  void *__dst[2];
  unsigned __int8 v96;
  void *v97;
  std::string::size_type v98;
  int64_t v99;
  std::string __b;
  void *__p[2];
  uint64_t v102;
  uint64_t v103;
  int v104;
  std::string v105;

  if (*((_BYTE *)a1 + 12))
    v4 = "[FREE]";
  else
    v4 = "[FIXED]";
  if (*((_BYTE *)a1 + 12))
    v5 = 6;
  else
    v5 = 7;
  v96 = v5;
  memcpy(__dst, v4, v5);
  *(_BYTE *)((unint64_t)__dst | v5) = 0;
  if ((v96 & 0x80u) == 0)
    v6 = __dst;
  else
    v6 = (void **)__dst[0];
  if ((v96 & 0x80u) == 0)
    v7 = v96;
  else
    v7 = (uint64_t)__dst[1];
  v8 = sub_20AB89270(a2, (uint64_t)v6, v7);
  v9 = sub_20AB89270(v8, (uint64_t)"[", 1);
  strcpy((char *)v94, "Extrinsics Translation");
  HIBYTE(v94[2]) = 22;
  v10 = sub_20AB89270(v9, (uint64_t)v94, 22);
  sub_20AB89270(v10, (uint64_t)"] : ", 4);
  v103 = *a1;
  v104 = *((_DWORD *)a1 + 2);
  v11 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  v12 = *((_DWORD *)v11 + 2);
  v14 = *((_QWORD *)v11 + 2);
  v13 = *((_QWORD *)v11 + 3);
  if (v13)
  {
    if (v13 <= (uint64_t)(v14 + 2))
      v13 = v14 + 2;
    v15 = v13 + ~v14;
    v16 = __exp10((double)-(uint64_t)v14);
    v17 = v15 - 1;
    if (v15 - 1 > 0x7FFFFFFFFFFFFFF7)
LABEL_149:
      abort();
    v18 = v16;
    if (v17 >= 0x17)
    {
      v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v17 | 7) != 0x17)
        v20 = v17 | 7;
      v21 = v20 + 1;
      p_b = (std::string *)operator new(v20 + 1);
      __b.__r_.__value_.__l.__size_ = v15 - 1;
      __b.__r_.__value_.__r.__words[2] = v21 | 0x8000000000000000;
      __b.__r_.__value_.__r.__words[0] = (std::string::size_type)p_b;
    }
    else
    {
      *((_BYTE *)&__b.__r_.__value_.__s + 23) = v15 - 1;
      p_b = &__b;
      if (v15 == 1)
      {
        LODWORD(v15) = 1;
        goto LABEL_25;
      }
    }
  }
  else
  {
    v18 = __exp10((double)-(uint64_t)v14);
    v17 = 3;
    *((_BYTE *)&__b.__r_.__value_.__s + 23) = 3;
    p_b = &__b;
    LODWORD(v15) = 4;
  }
  memset(p_b, 32, v17);
LABEL_25:
  p_b->__r_.__value_.__s.__data_[v17] = 0;
  v22 = std::string::append(&__b, "0 ");
  v23 = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v105.__r_.__value_.__l.__data_ = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v105.__r_.__value_.__r.__words[2] = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (v14 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_149;
  if (v14 >= 0x17)
  {
    v25 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v25 = v14 | 7;
    v26 = v25 + 1;
    v24 = operator new(v25 + 1);
    v98 = v14;
    v99 = v26 | 0x8000000000000000;
    v97 = v24;
    goto LABEL_32;
  }
  HIBYTE(v99) = v14;
  v24 = &v97;
  if (v14)
LABEL_32:
    memset(v24, 32, v14);
  *((_BYTE *)v24 + v14) = 0;
  if (v99 >= 0)
    v27 = (const std::string::value_type *)&v97;
  else
    v27 = (const std::string::value_type *)v97;
  if (v99 >= 0)
    v28 = HIBYTE(v99);
  else
    v28 = v98;
  v29 = std::string::append(&v105, v27, v28);
  v30 = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v102 = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v99) < 0)
  {
    operator delete(v97);
    if ((SHIBYTE(v105.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_41;
LABEL_146:
    operator delete(v105.__r_.__value_.__l.__data_);
    goto LABEL_41;
  }
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_146;
LABEL_41:
  v88 = v12;
  if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__b.__r_.__value_.__l.__data_);
  *(uint64_t *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 24) = 0;
  v105.__r_.__value_.__s.__data_[0] = 91;
  sub_20AB89270(a2, (uint64_t)&v105, 1);
  v32 = 0;
  v92 = a2 + 1;
  v93 = (int)v15 + (int)v14 + 1;
  v90 = (int)v14;
  v91 = (int)v14 - 3;
  while (1)
  {
    v33 = *(float *)((char *)&v103 + v32);
    v31.n128_f64[0] = v33;
    v34 = *a2;
    v35 = (char *)a2 + *(_QWORD *)(*a2 - 24);
    if ((v35[9] & 1) != 0)
      break;
    if (fabs(v31.n128_f64[0]) < v18)
    {
      v36 = (char *)HIBYTE(v102);
      v37 = (char *)__p[1];
      if (v102 >= 0)
        v38 = __p;
      else
        v38 = (void **)__p[0];
      MEMORY[0x20BD2CE34](&__b, a2);
      if (__b.__r_.__value_.__s.__data_[0])
      {
        if ((char)v36 >= 0)
          v39 = v36;
        else
          v39 = v37;
        v40 = (char *)a2 + *(_QWORD *)(*a2 - 24);
        v41 = *((_QWORD *)v40 + 5);
        v42 = &v39[(_QWORD)v38];
        if ((*((_DWORD *)v40 + 2) & 0xB0) == 0x20)
          v43 = (void **)&v39[(_QWORD)v38];
        else
          v43 = v38;
        v44 = *((_DWORD *)v40 + 36);
        if (v44 == -1)
        {
          v52 = v43;
          std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
          v53 = std::locale::use_facet((const std::locale *)&v105, MEMORY[0x24BEDB350]);
          v44 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v53->__vftable[2].~facet_0)(v53, 32);
          std::locale::~locale((std::locale *)&v105);
          v43 = v52;
          *((_DWORD *)v40 + 36) = v44;
          if (!v41)
            goto LABEL_108;
        }
        else if (!v41)
        {
          goto LABEL_108;
        }
        v54 = *((_QWORD *)v40 + 3);
        v55 = v54 <= (uint64_t)v39;
        v56 = v54 - (_QWORD)v39;
        if (v55)
          v57 = 0;
        else
          v57 = v56;
        v58 = (char *)v43 - (char *)v38;
        if ((char *)v43 - (char *)v38 >= 1)
        {
          v59 = v43;
          v60 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v41 + 96))(v41, v38, v58);
          v43 = v59;
          if (v60 != v58)
            goto LABEL_108;
        }
        goto LABEL_92;
      }
      goto LABEL_109;
    }
    *((_QWORD *)v35 + 3) = v93;
    *(_DWORD *)((char *)v92 + *(_QWORD *)(v34 - 24)) = *(_DWORD *)((_BYTE *)v92 + *(_QWORD *)(v34 - 24)) & 0xFFFFFEFB | 4;
    *(_DWORD *)((char *)v92 + *(_QWORD *)(v34 - 24)) |= 0x400u;
    v45 = *(_QWORD *)(v34 - 24);
    v46 = a2 + 2;
    v47 = v90;
LABEL_64:
    *(_QWORD *)((char *)v46 + v45) = v47;
    std::ostream::operator<<();
    if (v32 == 8)
      goto LABEL_140;
LABEL_110:
    LOBYTE(v97) = 44;
    MEMORY[0x20BD2CE34](&__b, a2);
    if (__b.__r_.__value_.__s.__data_[0])
    {
      v73 = (char *)a2 + *(_QWORD *)(*a2 - 24);
      v74 = *((_QWORD *)v73 + 5);
      if ((*((_DWORD *)v73 + 2) & 0xB0) == 0x20)
        v75 = (void **)((char *)&v97 + 1);
      else
        v75 = &v97;
      v76 = *((_DWORD *)v73 + 36);
      if (v76 == -1)
      {
        std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
        v77 = std::locale::use_facet((const std::locale *)&v105, MEMORY[0x24BEDB350]);
        v76 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v77->__vftable[2].~facet_0)(v77, 32);
        std::locale::~locale((std::locale *)&v105);
        *((_DWORD *)v73 + 36) = v76;
        if (!v74)
          goto LABEL_44;
      }
      else if (!v74)
      {
        goto LABEL_44;
      }
      v78 = *((_QWORD *)v73 + 3);
      v55 = v78 <= 1;
      v79 = v78 - 1;
      if (v55)
        v80 = 0;
      else
        v80 = v79;
      if ((char *)v75 - (char *)&v97 >= 1
        && (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v74 + 96))(v74, &v97, (char *)v75 - (char *)&v97) != (char *)v75 - (char *)&v97)
      {
        goto LABEL_44;
      }
      if ((uint64_t)v80 >= 1)
      {
        if (v80 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_149;
        if (v80 >= 0x17)
        {
          v82 = (v80 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v80 | 7) != 0x17)
            v82 = v80 | 7;
          v83 = v82 + 1;
          v81 = operator new(v82 + 1);
          v105.__r_.__value_.__l.__size_ = v80;
          v105.__r_.__value_.__r.__words[2] = v83 | 0x8000000000000000;
          v105.__r_.__value_.__r.__words[0] = (std::string::size_type)v81;
        }
        else
        {
          *((_BYTE *)&v105.__r_.__value_.__s + 23) = v80;
          v81 = &v105;
        }
        memset(v81, v76, v80);
        *((_BYTE *)v81 + v80) = 0;
        if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v84 = &v105;
        else
          v84 = (std::string *)v105.__r_.__value_.__r.__words[0];
        v85 = (*(uint64_t (**)(uint64_t, std::string *, std::string::size_type))(*(_QWORD *)v74 + 96))(v74, v84, v80);
        v86 = v85;
        if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v105.__r_.__value_.__l.__data_);
          if (v86 != v80)
            goto LABEL_44;
        }
        else if (v85 != v80)
        {
          goto LABEL_44;
        }
      }
      if ((char *)&v97 + 1 - (char *)v75 >= 1
        && (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v74 + 96))(v74, v75, (char *)&v97 + 1 - (char *)v75) != (char *)&v97 + 1 - (char *)v75)
      {
LABEL_44:
        std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 5);
        goto LABEL_45;
      }
      *((_QWORD *)v73 + 3) = 0;
    }
LABEL_45:
    MEMORY[0x20BD2CE40](&__b);
    v32 += 4;
  }
  if (v33 != 0.0)
  {
    *((_QWORD *)v35 + 3) = v93;
    *(_DWORD *)((char *)v92 + *(_QWORD *)(v34 - 24)) |= 0x400u;
    v45 = *(_QWORD *)(v34 - 24);
    v46 = a2 + 2;
    v47 = v91;
    goto LABEL_64;
  }
  v48 = (char *)HIBYTE(v102);
  v49 = (char *)__p[1];
  if (v102 >= 0)
    v50 = __p;
  else
    v50 = (void **)__p[0];
  MEMORY[0x20BD2CE34](&__b, a2, v31);
  if (__b.__r_.__value_.__s.__data_[0])
  {
    if ((char)v48 >= 0)
      v51 = v48;
    else
      v51 = v49;
    v40 = (char *)a2 + *(_QWORD *)(*a2 - 24);
    v41 = *((_QWORD *)v40 + 5);
    v42 = &v51[(_QWORD)v50];
    if ((*((_DWORD *)v40 + 2) & 0xB0) == 0x20)
      v43 = (void **)&v51[(_QWORD)v50];
    else
      v43 = v50;
    v44 = *((_DWORD *)v40 + 36);
    if (v44 != -1)
    {
      if (!v41)
        goto LABEL_108;
LABEL_87:
      v63 = *((_QWORD *)v40 + 3);
      v55 = v63 <= (uint64_t)v51;
      v64 = v63 - (_QWORD)v51;
      if (v55)
        v57 = 0;
      else
        v57 = v64;
      v65 = (char *)v43 - (char *)v50;
      if ((char *)v43 - (char *)v50 >= 1)
      {
        v66 = v43;
        v67 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v41 + 96))(v41, v50, v65);
        v43 = v66;
        if (v67 != v65)
          goto LABEL_108;
      }
LABEL_92:
      if ((uint64_t)v57 < 1)
        goto LABEL_106;
      if (v57 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_149;
      v89 = v43;
      if (v57 >= 0x17)
      {
        v69 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v57 | 7) != 0x17)
          v69 = v57 | 7;
        v70 = v69 + 1;
        v68 = operator new(v69 + 1);
        v105.__r_.__value_.__l.__size_ = v57;
        v105.__r_.__value_.__r.__words[2] = v70 | 0x8000000000000000;
        v105.__r_.__value_.__r.__words[0] = (std::string::size_type)v68;
      }
      else
      {
        *((_BYTE *)&v105.__r_.__value_.__s + 23) = v57;
        v68 = &v105;
      }
      memset(v68, v44, v57);
      *((_BYTE *)v68 + v57) = 0;
      if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v71 = &v105;
      else
        v71 = (std::string *)v105.__r_.__value_.__r.__words[0];
      v72 = (*(uint64_t (**)(uint64_t, std::string *, std::string::size_type))(*(_QWORD *)v41 + 96))(v41, v71, v57);
      if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v105.__r_.__value_.__l.__data_);
      v43 = v89;
      if (v72 == v57)
      {
LABEL_106:
        if (v42 - (char *)v43 < 1
          || (*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 96))(v41) == v42 - (char *)v43)
        {
          *((_QWORD *)v40 + 3) = 0;
          goto LABEL_109;
        }
      }
      goto LABEL_108;
    }
    v61 = v43;
    std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
    v62 = std::locale::use_facet((const std::locale *)&v105, MEMORY[0x24BEDB350]);
    v44 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v62->__vftable[2].~facet_0)(v62, 32);
    std::locale::~locale((std::locale *)&v105);
    v43 = v61;
    *((_DWORD *)v40 + 36) = v44;
    if (v41)
      goto LABEL_87;
LABEL_108:
    std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 5);
  }
LABEL_109:
  MEMORY[0x20BD2CE40](&__b);
  if (v32 != 8)
    goto LABEL_110;
LABEL_140:
  sub_20AB89270(a2, (uint64_t)"   ]", 4);
  *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 8) = v88;
  if (SHIBYTE(v102) < 0)
    operator delete(__p[0]);
  sub_20AB89270(a2, (uint64_t)"\n", 1);
  if (SHIBYTE(v94[2]) < 0)
  {
    operator delete(v94[0]);
    if (((char)v96 & 0x80000000) == 0)
      return a2;
LABEL_148:
    operator delete(__dst[0]);
    return a2;
  }
  if ((char)v96 < 0)
    goto LABEL_148;
  return a2;
}

uint64_t *sub_20ABB2DBC(uint64_t *a1, double a2)
{
  char *v3;
  int v4;
  int64_t v5;
  size_t v6;
  size_t v7;
  double v8;
  size_t v9;
  double v10;
  std::string *p_b;
  uint64_t v12;
  uint64_t v13;
  std::string *v14;
  std::string::size_type v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  std::string *v21;
  std::string::size_type v22;
  __n128 v23;
  char v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  void **v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  void **v36;
  int v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  void **v43;
  char *v44;
  void **v45;
  const std::locale::facet *v46;
  uint64_t v47;
  BOOL v48;
  std::string::size_type v49;
  std::string::size_type v50;
  int64_t v51;
  void **v52;
  uint64_t v53;
  void **v54;
  const std::locale::facet *v55;
  uint64_t v56;
  std::string::size_type v57;
  int64_t v58;
  void **v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  std::string *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  void **v68;
  int v69;
  const std::locale::facet *v70;
  uint64_t v71;
  std::string::size_type v72;
  std::string::size_type v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  std::string *v77;
  uint64_t v78;
  uint64_t v79;
  int v81;
  void **v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  void *v87;
  std::string::size_type v88;
  int64_t v89;
  std::string __b;
  void *__p[2];
  uint64_t v92;
  double v93;
  std::string v94;

  v93 = a2;
  v3 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v4 = *((_DWORD *)v3 + 2);
  v6 = *((_QWORD *)v3 + 2);
  v5 = *((_QWORD *)v3 + 3);
  if (v5)
  {
    if (v5 <= (uint64_t)(v6 + 2))
      v5 = v6 + 2;
    v7 = v5 + ~v6;
    v8 = __exp10((double)-(uint64_t)v6);
    v9 = v7 - 1;
    if (v7 - 1 > 0x7FFFFFFFFFFFFFF7)
LABEL_133:
      abort();
    v10 = v8;
    if (v9 >= 0x17)
    {
      v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17)
        v12 = v9 | 7;
      v13 = v12 + 1;
      p_b = (std::string *)operator new(v12 + 1);
      __b.__r_.__value_.__l.__size_ = v7 - 1;
      __b.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
      __b.__r_.__value_.__r.__words[0] = (std::string::size_type)p_b;
    }
    else
    {
      *((_BYTE *)&__b.__r_.__value_.__s + 23) = v7 - 1;
      p_b = &__b;
      if (v7 == 1)
      {
        LODWORD(v7) = 1;
        goto LABEL_13;
      }
    }
  }
  else
  {
    v10 = __exp10((double)-(uint64_t)v6);
    v9 = 3;
    *((_BYTE *)&__b.__r_.__value_.__s + 23) = 3;
    p_b = &__b;
    LODWORD(v7) = 4;
  }
  memset(p_b, 32, v9);
LABEL_13:
  p_b->__r_.__value_.__s.__data_[v9] = 0;
  v14 = std::string::append(&__b, "0 ");
  v15 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v94.__r_.__value_.__l.__data_ = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v94.__r_.__value_.__r.__words[2] = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_133;
  if (v6 >= 0x17)
  {
    v17 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v17 = v6 | 7;
    v18 = v17 + 1;
    v16 = operator new(v17 + 1);
    v88 = v6;
    v89 = v18 | 0x8000000000000000;
    v87 = v16;
    goto LABEL_20;
  }
  HIBYTE(v89) = v6;
  v16 = &v87;
  if (v6)
LABEL_20:
    memset(v16, 32, v6);
  *((_BYTE *)v16 + v6) = 0;
  if (v89 >= 0)
    v19 = (const std::string::value_type *)&v87;
  else
    v19 = (const std::string::value_type *)v87;
  if (v89 >= 0)
    v20 = HIBYTE(v89);
  else
    v20 = v88;
  v21 = std::string::append(&v94, v19, v20);
  v22 = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v92 = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v89) < 0)
  {
    operator delete(v87);
    if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_29;
LABEL_132:
    operator delete(v94.__r_.__value_.__l.__data_);
    goto LABEL_29;
  }
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_132;
LABEL_29:
  v81 = v4;
  if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__b.__r_.__value_.__l.__data_);
  *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = 0;
  v94.__r_.__value_.__s.__data_[0] = 91;
  sub_20AB89270(a1, (uint64_t)&v94, 1);
  v24 = 0;
  v25 = 0;
  v85 = a1 + 1;
  v86 = (int)v7 + (int)v6 + 1;
  v83 = (int)v6;
  v84 = (int)v6 - 3;
  while (1)
  {
    v26 = *((float *)&v93 + v25);
    v23.n128_f64[0] = v26;
    v27 = *a1;
    v28 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    if ((v28[9] & 1) != 0)
      break;
    if (fabs(v23.n128_f64[0]) < v10)
    {
      v29 = (char *)HIBYTE(v92);
      v30 = (char *)__p[1];
      if (v92 >= 0)
        v31 = __p;
      else
        v31 = (void **)__p[0];
      MEMORY[0x20BD2CE34](&__b, a1);
      if (__b.__r_.__value_.__s.__data_[0])
      {
        if ((char)v29 >= 0)
          v32 = v29;
        else
          v32 = v30;
        v33 = (char *)a1 + *(_QWORD *)(*a1 - 24);
        v34 = *((_QWORD *)v33 + 5);
        v35 = &v32[(_QWORD)v31];
        if ((*((_DWORD *)v33 + 2) & 0xB0) == 0x20)
          v36 = (void **)&v32[(_QWORD)v31];
        else
          v36 = v31;
        v37 = *((_DWORD *)v33 + 36);
        if (v37 == -1)
        {
          v45 = v36;
          std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
          v46 = std::locale::use_facet((const std::locale *)&v94, MEMORY[0x24BEDB350]);
          v37 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v46->__vftable[2].~facet_0)(v46, 32);
          std::locale::~locale((std::locale *)&v94);
          v36 = v45;
          *((_DWORD *)v33 + 36) = v37;
          if (!v34)
            goto LABEL_96;
        }
        else if (!v34)
        {
          goto LABEL_96;
        }
        v47 = *((_QWORD *)v33 + 3);
        v48 = v47 <= (uint64_t)v32;
        v49 = v47 - (_QWORD)v32;
        if (v48)
          v50 = 0;
        else
          v50 = v49;
        v51 = (char *)v36 - (char *)v31;
        if ((char *)v36 - (char *)v31 >= 1)
        {
          v52 = v36;
          v53 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v34 + 96))(v34, v31, v51);
          v36 = v52;
          if (v53 != v51)
            goto LABEL_96;
        }
        goto LABEL_80;
      }
      goto LABEL_97;
    }
    *((_QWORD *)v28 + 3) = v86;
    *(_DWORD *)((char *)v85 + *(_QWORD *)(v27 - 24)) = *(_DWORD *)((_BYTE *)v85 + *(_QWORD *)(v27 - 24)) & 0xFFFFFEFB | 4;
    *(_DWORD *)((char *)v85 + *(_QWORD *)(v27 - 24)) |= 0x400u;
    v38 = *(_QWORD *)(v27 - 24);
    v39 = a1 + 2;
    v40 = v83;
LABEL_52:
    *(_QWORD *)((char *)v39 + v38) = v40;
    std::ostream::operator<<();
    if ((v24 & 1) != 0)
      goto LABEL_128;
LABEL_98:
    LOBYTE(v87) = 44;
    MEMORY[0x20BD2CE34](&__b, a1);
    if (__b.__r_.__value_.__s.__data_[0])
    {
      v66 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v67 = *((_QWORD *)v66 + 5);
      if ((*((_DWORD *)v66 + 2) & 0xB0) == 0x20)
        v68 = (void **)((char *)&v87 + 1);
      else
        v68 = &v87;
      v69 = *((_DWORD *)v66 + 36);
      if (v69 == -1)
      {
        std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
        v70 = std::locale::use_facet((const std::locale *)&v94, MEMORY[0x24BEDB350]);
        v69 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v70->__vftable[2].~facet_0)(v70, 32);
        std::locale::~locale((std::locale *)&v94);
        *((_DWORD *)v66 + 36) = v69;
        if (!v67)
          goto LABEL_32;
      }
      else if (!v67)
      {
        goto LABEL_32;
      }
      v71 = *((_QWORD *)v66 + 3);
      v48 = v71 <= 1;
      v72 = v71 - 1;
      if (v48)
        v73 = 0;
      else
        v73 = v72;
      if ((char *)v68 - (char *)&v87 >= 1
        && (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v67 + 96))(v67, &v87, (char *)v68 - (char *)&v87) != (char *)v68 - (char *)&v87)
      {
        goto LABEL_32;
      }
      if ((uint64_t)v73 >= 1)
      {
        if (v73 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_133;
        if (v73 >= 0x17)
        {
          v75 = (v73 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v73 | 7) != 0x17)
            v75 = v73 | 7;
          v76 = v75 + 1;
          v74 = operator new(v75 + 1);
          v94.__r_.__value_.__l.__size_ = v73;
          v94.__r_.__value_.__r.__words[2] = v76 | 0x8000000000000000;
          v94.__r_.__value_.__r.__words[0] = (std::string::size_type)v74;
        }
        else
        {
          *((_BYTE *)&v94.__r_.__value_.__s + 23) = v73;
          v74 = &v94;
        }
        memset(v74, v69, v73);
        *((_BYTE *)v74 + v73) = 0;
        if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v77 = &v94;
        else
          v77 = (std::string *)v94.__r_.__value_.__r.__words[0];
        v78 = (*(uint64_t (**)(uint64_t, std::string *, std::string::size_type))(*(_QWORD *)v67 + 96))(v67, v77, v73);
        v79 = v78;
        if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v94.__r_.__value_.__l.__data_);
          if (v79 != v73)
            goto LABEL_32;
        }
        else if (v78 != v73)
        {
          goto LABEL_32;
        }
      }
      if ((char *)&v87 + 1 - (char *)v68 >= 1
        && (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v67 + 96))(v67, v68, (char *)&v87 + 1 - (char *)v68) != (char *)&v87 + 1 - (char *)v68)
      {
LABEL_32:
        std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
        goto LABEL_33;
      }
      *((_QWORD *)v66 + 3) = 0;
    }
LABEL_33:
    MEMORY[0x20BD2CE40](&__b);
    v24 = 1;
    v25 = 1;
  }
  if (v26 != 0.0)
  {
    *((_QWORD *)v28 + 3) = v86;
    *(_DWORD *)((char *)v85 + *(_QWORD *)(v27 - 24)) |= 0x400u;
    v38 = *(_QWORD *)(v27 - 24);
    v39 = a1 + 2;
    v40 = v84;
    goto LABEL_52;
  }
  v41 = (char *)HIBYTE(v92);
  v42 = (char *)__p[1];
  if (v92 >= 0)
    v43 = __p;
  else
    v43 = (void **)__p[0];
  MEMORY[0x20BD2CE34](&__b, a1, v23);
  if (__b.__r_.__value_.__s.__data_[0])
  {
    if ((char)v41 >= 0)
      v44 = v41;
    else
      v44 = v42;
    v33 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v34 = *((_QWORD *)v33 + 5);
    v35 = &v44[(_QWORD)v43];
    if ((*((_DWORD *)v33 + 2) & 0xB0) == 0x20)
      v36 = (void **)&v44[(_QWORD)v43];
    else
      v36 = v43;
    v37 = *((_DWORD *)v33 + 36);
    if (v37 != -1)
    {
      if (!v34)
        goto LABEL_96;
LABEL_75:
      v56 = *((_QWORD *)v33 + 3);
      v48 = v56 <= (uint64_t)v44;
      v57 = v56 - (_QWORD)v44;
      if (v48)
        v50 = 0;
      else
        v50 = v57;
      v58 = (char *)v36 - (char *)v43;
      if ((char *)v36 - (char *)v43 >= 1)
      {
        v59 = v36;
        v60 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v34 + 96))(v34, v43, v58);
        v36 = v59;
        if (v60 != v58)
          goto LABEL_96;
      }
LABEL_80:
      if ((uint64_t)v50 < 1)
        goto LABEL_94;
      if (v50 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_133;
      v82 = v36;
      if (v50 >= 0x17)
      {
        v62 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v50 | 7) != 0x17)
          v62 = v50 | 7;
        v63 = v62 + 1;
        v61 = operator new(v62 + 1);
        v94.__r_.__value_.__l.__size_ = v50;
        v94.__r_.__value_.__r.__words[2] = v63 | 0x8000000000000000;
        v94.__r_.__value_.__r.__words[0] = (std::string::size_type)v61;
      }
      else
      {
        *((_BYTE *)&v94.__r_.__value_.__s + 23) = v50;
        v61 = &v94;
      }
      memset(v61, v37, v50);
      *((_BYTE *)v61 + v50) = 0;
      if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v64 = &v94;
      else
        v64 = (std::string *)v94.__r_.__value_.__r.__words[0];
      v65 = (*(uint64_t (**)(uint64_t, std::string *, std::string::size_type))(*(_QWORD *)v34 + 96))(v34, v64, v50);
      if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v94.__r_.__value_.__l.__data_);
      v36 = v82;
      if (v65 == v50)
      {
LABEL_94:
        if (v35 - (char *)v36 < 1
          || (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 96))(v34) == v35 - (char *)v36)
        {
          *((_QWORD *)v33 + 3) = 0;
          goto LABEL_97;
        }
      }
      goto LABEL_96;
    }
    v54 = v36;
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v55 = std::locale::use_facet((const std::locale *)&v94, MEMORY[0x24BEDB350]);
    v37 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v55->__vftable[2].~facet_0)(v55, 32);
    std::locale::~locale((std::locale *)&v94);
    v36 = v54;
    *((_DWORD *)v33 + 36) = v37;
    if (v34)
      goto LABEL_75;
LABEL_96:
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
LABEL_97:
  MEMORY[0x20BD2CE40](&__b);
  if ((v24 & 1) == 0)
    goto LABEL_98;
LABEL_128:
  sub_20AB89270(a1, (uint64_t)"   ]", 4);
  *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8) = v81;
  if (SHIBYTE(v92) < 0)
    operator delete(__p[0]);
  return a1;
}

uint64_t *sub_20ABB3650(uint64_t *a1, double a2, float a3)
{
  char *v4;
  int v5;
  int64_t v6;
  size_t v7;
  size_t v8;
  double v9;
  size_t v10;
  double v11;
  std::string *p_b;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  std::string::size_type v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  std::string *v22;
  std::string::size_type v23;
  __n128 v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  void **v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  void **v36;
  int v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  void **v43;
  char *v44;
  void **v45;
  const std::locale::facet *v46;
  uint64_t v47;
  BOOL v48;
  std::string::size_type v49;
  std::string::size_type v50;
  int64_t v51;
  void **v52;
  uint64_t v53;
  void **v54;
  const std::locale::facet *v55;
  uint64_t v56;
  std::string::size_type v57;
  int64_t v58;
  void **v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  std::string *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  void **v68;
  int v69;
  const std::locale::facet *v70;
  uint64_t v71;
  std::string::size_type v72;
  std::string::size_type v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  std::string *v77;
  uint64_t v78;
  uint64_t v79;
  int v81;
  void **v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  void *v87;
  std::string::size_type v88;
  int64_t v89;
  std::string __b;
  void *__p[2];
  uint64_t v92;
  double v93;
  float v94;
  std::string v95;

  v93 = a2;
  v94 = a3;
  v4 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v5 = *((_DWORD *)v4 + 2);
  v7 = *((_QWORD *)v4 + 2);
  v6 = *((_QWORD *)v4 + 3);
  if (v6)
  {
    if (v6 <= (uint64_t)(v7 + 2))
      v6 = v7 + 2;
    v8 = v6 + ~v7;
    v9 = __exp10((double)-(uint64_t)v7);
    v10 = v8 - 1;
    if (v8 - 1 > 0x7FFFFFFFFFFFFFF7)
LABEL_133:
      abort();
    v11 = v9;
    if (v10 >= 0x17)
    {
      v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17)
        v13 = v10 | 7;
      v14 = v13 + 1;
      p_b = (std::string *)operator new(v13 + 1);
      __b.__r_.__value_.__l.__size_ = v8 - 1;
      __b.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
      __b.__r_.__value_.__r.__words[0] = (std::string::size_type)p_b;
    }
    else
    {
      *((_BYTE *)&__b.__r_.__value_.__s + 23) = v8 - 1;
      p_b = &__b;
      if (v8 == 1)
      {
        LODWORD(v8) = 1;
        goto LABEL_13;
      }
    }
  }
  else
  {
    v11 = __exp10((double)-(uint64_t)v7);
    v10 = 3;
    *((_BYTE *)&__b.__r_.__value_.__s + 23) = 3;
    p_b = &__b;
    LODWORD(v8) = 4;
  }
  memset(p_b, 32, v10);
LABEL_13:
  p_b->__r_.__value_.__s.__data_[v10] = 0;
  v15 = std::string::append(&__b, "0 ");
  v16 = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v95.__r_.__value_.__l.__data_ = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v95.__r_.__value_.__r.__words[2] = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (v7 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_133;
  if (v7 >= 0x17)
  {
    v18 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v18 = v7 | 7;
    v19 = v18 + 1;
    v17 = operator new(v18 + 1);
    v88 = v7;
    v89 = v19 | 0x8000000000000000;
    v87 = v17;
    goto LABEL_20;
  }
  HIBYTE(v89) = v7;
  v17 = &v87;
  if (v7)
LABEL_20:
    memset(v17, 32, v7);
  *((_BYTE *)v17 + v7) = 0;
  if (v89 >= 0)
    v20 = (const std::string::value_type *)&v87;
  else
    v20 = (const std::string::value_type *)v87;
  if (v89 >= 0)
    v21 = HIBYTE(v89);
  else
    v21 = v88;
  v22 = std::string::append(&v95, v20, v21);
  v23 = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v92 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v89) < 0)
  {
    operator delete(v87);
    if ((SHIBYTE(v95.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_29;
LABEL_132:
    operator delete(v95.__r_.__value_.__l.__data_);
    goto LABEL_29;
  }
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_132;
LABEL_29:
  v81 = v5;
  if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__b.__r_.__value_.__l.__data_);
  *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = 0;
  v95.__r_.__value_.__s.__data_[0] = 91;
  sub_20AB89270(a1, (uint64_t)&v95, 1);
  v25 = 0;
  v85 = a1 + 1;
  v86 = (int)v8 + (int)v7 + 1;
  v83 = (int)v7;
  v84 = (int)v7 - 3;
  while (1)
  {
    v26 = *(float *)((char *)&v93 + v25);
    v24.n128_f64[0] = v26;
    v27 = *a1;
    v28 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    if ((v28[9] & 1) != 0)
      break;
    if (fabs(v24.n128_f64[0]) < v11)
    {
      v29 = (char *)HIBYTE(v92);
      v30 = (char *)__p[1];
      if (v92 >= 0)
        v31 = __p;
      else
        v31 = (void **)__p[0];
      MEMORY[0x20BD2CE34](&__b, a1);
      if (__b.__r_.__value_.__s.__data_[0])
      {
        if ((char)v29 >= 0)
          v32 = v29;
        else
          v32 = v30;
        v33 = (char *)a1 + *(_QWORD *)(*a1 - 24);
        v34 = *((_QWORD *)v33 + 5);
        v35 = &v32[(_QWORD)v31];
        if ((*((_DWORD *)v33 + 2) & 0xB0) == 0x20)
          v36 = (void **)&v32[(_QWORD)v31];
        else
          v36 = v31;
        v37 = *((_DWORD *)v33 + 36);
        if (v37 == -1)
        {
          v45 = v36;
          std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
          v46 = std::locale::use_facet((const std::locale *)&v95, MEMORY[0x24BEDB350]);
          v37 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v46->__vftable[2].~facet_0)(v46, 32);
          std::locale::~locale((std::locale *)&v95);
          v36 = v45;
          *((_DWORD *)v33 + 36) = v37;
          if (!v34)
            goto LABEL_96;
        }
        else if (!v34)
        {
          goto LABEL_96;
        }
        v47 = *((_QWORD *)v33 + 3);
        v48 = v47 <= (uint64_t)v32;
        v49 = v47 - (_QWORD)v32;
        if (v48)
          v50 = 0;
        else
          v50 = v49;
        v51 = (char *)v36 - (char *)v31;
        if ((char *)v36 - (char *)v31 >= 1)
        {
          v52 = v36;
          v53 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v34 + 96))(v34, v31, v51);
          v36 = v52;
          if (v53 != v51)
            goto LABEL_96;
        }
        goto LABEL_80;
      }
      goto LABEL_97;
    }
    *((_QWORD *)v28 + 3) = v86;
    *(_DWORD *)((char *)v85 + *(_QWORD *)(v27 - 24)) = *(_DWORD *)((_BYTE *)v85 + *(_QWORD *)(v27 - 24)) & 0xFFFFFEFB | 4;
    *(_DWORD *)((char *)v85 + *(_QWORD *)(v27 - 24)) |= 0x400u;
    v38 = *(_QWORD *)(v27 - 24);
    v39 = a1 + 2;
    v40 = v83;
LABEL_52:
    *(_QWORD *)((char *)v39 + v38) = v40;
    std::ostream::operator<<();
    if (v25 == 8)
      goto LABEL_128;
LABEL_98:
    LOBYTE(v87) = 44;
    MEMORY[0x20BD2CE34](&__b, a1);
    if (__b.__r_.__value_.__s.__data_[0])
    {
      v66 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v67 = *((_QWORD *)v66 + 5);
      if ((*((_DWORD *)v66 + 2) & 0xB0) == 0x20)
        v68 = (void **)((char *)&v87 + 1);
      else
        v68 = &v87;
      v69 = *((_DWORD *)v66 + 36);
      if (v69 == -1)
      {
        std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
        v70 = std::locale::use_facet((const std::locale *)&v95, MEMORY[0x24BEDB350]);
        v69 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v70->__vftable[2].~facet_0)(v70, 32);
        std::locale::~locale((std::locale *)&v95);
        *((_DWORD *)v66 + 36) = v69;
        if (!v67)
          goto LABEL_32;
      }
      else if (!v67)
      {
        goto LABEL_32;
      }
      v71 = *((_QWORD *)v66 + 3);
      v48 = v71 <= 1;
      v72 = v71 - 1;
      if (v48)
        v73 = 0;
      else
        v73 = v72;
      if ((char *)v68 - (char *)&v87 >= 1
        && (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v67 + 96))(v67, &v87, (char *)v68 - (char *)&v87) != (char *)v68 - (char *)&v87)
      {
        goto LABEL_32;
      }
      if ((uint64_t)v73 >= 1)
      {
        if (v73 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_133;
        if (v73 >= 0x17)
        {
          v75 = (v73 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v73 | 7) != 0x17)
            v75 = v73 | 7;
          v76 = v75 + 1;
          v74 = operator new(v75 + 1);
          v95.__r_.__value_.__l.__size_ = v73;
          v95.__r_.__value_.__r.__words[2] = v76 | 0x8000000000000000;
          v95.__r_.__value_.__r.__words[0] = (std::string::size_type)v74;
        }
        else
        {
          *((_BYTE *)&v95.__r_.__value_.__s + 23) = v73;
          v74 = &v95;
        }
        memset(v74, v69, v73);
        *((_BYTE *)v74 + v73) = 0;
        if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v77 = &v95;
        else
          v77 = (std::string *)v95.__r_.__value_.__r.__words[0];
        v78 = (*(uint64_t (**)(uint64_t, std::string *, std::string::size_type))(*(_QWORD *)v67 + 96))(v67, v77, v73);
        v79 = v78;
        if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v95.__r_.__value_.__l.__data_);
          if (v79 != v73)
            goto LABEL_32;
        }
        else if (v78 != v73)
        {
          goto LABEL_32;
        }
      }
      if ((char *)&v87 + 1 - (char *)v68 >= 1
        && (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v67 + 96))(v67, v68, (char *)&v87 + 1 - (char *)v68) != (char *)&v87 + 1 - (char *)v68)
      {
LABEL_32:
        std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
        goto LABEL_33;
      }
      *((_QWORD *)v66 + 3) = 0;
    }
LABEL_33:
    MEMORY[0x20BD2CE40](&__b);
    v25 += 4;
  }
  if (v26 != 0.0)
  {
    *((_QWORD *)v28 + 3) = v86;
    *(_DWORD *)((char *)v85 + *(_QWORD *)(v27 - 24)) |= 0x400u;
    v38 = *(_QWORD *)(v27 - 24);
    v39 = a1 + 2;
    v40 = v84;
    goto LABEL_52;
  }
  v41 = (char *)HIBYTE(v92);
  v42 = (char *)__p[1];
  if (v92 >= 0)
    v43 = __p;
  else
    v43 = (void **)__p[0];
  MEMORY[0x20BD2CE34](&__b, a1, v24);
  if (__b.__r_.__value_.__s.__data_[0])
  {
    if ((char)v41 >= 0)
      v44 = v41;
    else
      v44 = v42;
    v33 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v34 = *((_QWORD *)v33 + 5);
    v35 = &v44[(_QWORD)v43];
    if ((*((_DWORD *)v33 + 2) & 0xB0) == 0x20)
      v36 = (void **)&v44[(_QWORD)v43];
    else
      v36 = v43;
    v37 = *((_DWORD *)v33 + 36);
    if (v37 != -1)
    {
      if (!v34)
        goto LABEL_96;
LABEL_75:
      v56 = *((_QWORD *)v33 + 3);
      v48 = v56 <= (uint64_t)v44;
      v57 = v56 - (_QWORD)v44;
      if (v48)
        v50 = 0;
      else
        v50 = v57;
      v58 = (char *)v36 - (char *)v43;
      if ((char *)v36 - (char *)v43 >= 1)
      {
        v59 = v36;
        v60 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v34 + 96))(v34, v43, v58);
        v36 = v59;
        if (v60 != v58)
          goto LABEL_96;
      }
LABEL_80:
      if ((uint64_t)v50 < 1)
        goto LABEL_94;
      if (v50 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_133;
      v82 = v36;
      if (v50 >= 0x17)
      {
        v62 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v50 | 7) != 0x17)
          v62 = v50 | 7;
        v63 = v62 + 1;
        v61 = operator new(v62 + 1);
        v95.__r_.__value_.__l.__size_ = v50;
        v95.__r_.__value_.__r.__words[2] = v63 | 0x8000000000000000;
        v95.__r_.__value_.__r.__words[0] = (std::string::size_type)v61;
      }
      else
      {
        *((_BYTE *)&v95.__r_.__value_.__s + 23) = v50;
        v61 = &v95;
      }
      memset(v61, v37, v50);
      *((_BYTE *)v61 + v50) = 0;
      if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v64 = &v95;
      else
        v64 = (std::string *)v95.__r_.__value_.__r.__words[0];
      v65 = (*(uint64_t (**)(uint64_t, std::string *, std::string::size_type))(*(_QWORD *)v34 + 96))(v34, v64, v50);
      if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v95.__r_.__value_.__l.__data_);
      v36 = v82;
      if (v65 == v50)
      {
LABEL_94:
        if (v35 - (char *)v36 < 1
          || (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 96))(v34) == v35 - (char *)v36)
        {
          *((_QWORD *)v33 + 3) = 0;
          goto LABEL_97;
        }
      }
      goto LABEL_96;
    }
    v54 = v36;
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v55 = std::locale::use_facet((const std::locale *)&v95, MEMORY[0x24BEDB350]);
    v37 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v55->__vftable[2].~facet_0)(v55, 32);
    std::locale::~locale((std::locale *)&v95);
    v36 = v54;
    *((_DWORD *)v33 + 36) = v37;
    if (v34)
      goto LABEL_75;
LABEL_96:
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
LABEL_97:
  MEMORY[0x20BD2CE40](&__b);
  if (v25 != 8)
    goto LABEL_98;
LABEL_128:
  sub_20AB89270(a1, (uint64_t)"   ]", 4);
  *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8) = v81;
  if (SHIBYTE(v92) < 0)
    operator delete(__p[0]);
  return a1;
}

double sub_20ABB3EE8(float *a1, float *a2, uint64_t a3)
{
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float cosval;
  float v12;
  __float2 v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  double result;
  __int128 v21;
  float *v22[2];
  __int128 v23;
  __int128 v24;
  int v25;
  float v26[9];

  v5 = *a1;
  v6 = a1[1];
  v7 = a1[2];
  v8 = (float)((float)(v5 * v5) + (float)(v6 * v6)) + (float)(v7 * v7);
  if (v8 >= 0.0061)
  {
    v12 = sqrtf(v8);
    v13 = __sincosf_stret(v12);
    cosval = v13.__cosval;
    v10 = v13.__sinval / v12;
    v9 = (float)(1.0 / v8) * (float)(1.0 - v13.__cosval);
  }
  else
  {
    v9 = 0.5 - (float)(v8 * (float)((float)(v8 / -720.0) + 0.041667));
    v10 = 1.0 - (float)(v8 * (float)(0.16667 - (float)(v8 * (float)((float)(v8 / -5040.0) + 0.0083333))));
    cosval = 1.0 - (float)(v8 * v9);
  }
  v14 = v6 * (float)(v5 * v9);
  v15 = v7 * (float)(v5 * v9);
  v16 = v7 * (float)(v6 * v9);
  v17 = v5 * v10;
  v18 = v6 * v10;
  v19 = v7 * v10;
  v26[0] = cosval + (float)((float)(v5 * v9) * v5);
  v26[1] = v14 + v19;
  v26[2] = v15 - v18;
  v26[3] = v14 - v19;
  v26[4] = cosval + (float)((float)(v6 * v9) * v6);
  v26[5] = v16 + v17;
  v26[6] = v18 + v15;
  v26[7] = v16 - v17;
  v26[8] = cosval + (float)((float)(v7 * v9) * v7);
  v22[0] = v26;
  v22[1] = a2;
  v23 = 0u;
  v24 = 0u;
  v25 = 0;
  sub_20AB91C20((uint64_t)&v23, v22);
  result = *(double *)&v23;
  v21 = v24;
  *(_OWORD *)a3 = v23;
  *(_OWORD *)(a3 + 16) = v21;
  *(_DWORD *)(a3 + 32) = v25;
  return result;
}

void sub_20ABB406C()
{
  JUMPOUT(0x20BD2D02CLL);
}

uint64_t sub_20ABB4080()
{
  return 0;
}

__n128 sub_20ABB4088@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __n128 result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24C37F948;
  *(_BYTE *)(v4 + 8) = *(_BYTE *)(a1 + 8);
  *(_OWORD *)(v4 + 12) = *(_OWORD *)(a1 + 12);
  result = *(__n128 *)(a1 + 28);
  *(__n128 *)(v4 + 28) = result;
  *(_DWORD *)(v4 + 44) = *(_DWORD *)(a1 + 44);
  *(_QWORD *)(v4 + 48) = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v4 + 56) = *(_DWORD *)(a1 + 56);
  *(_BYTE *)(v4 + 60) = *(_BYTE *)(a1 + 60);
  *a2 = v4;
  return result;
}

uint64_t sub_20ABB4108(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2;
  *(_BYTE *)(result + 60) = a2;
  return result;
}

__n128 sub_20ABB4114@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;

  *(_BYTE *)a2 = *(_BYTE *)(a1 + 8);
  *(_OWORD *)(a2 + 4) = *(_OWORD *)(a1 + 12);
  result = *(__n128 *)(a1 + 28);
  *(__n128 *)(a2 + 20) = result;
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(a1 + 44);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 56);
  *(_BYTE *)(a2 + 52) = *(_BYTE *)(a1 + 60);
  return result;
}

float sub_20ABB4150@<S0>(uint64_t a1@<X0>, float32x2_t *a2@<X8>)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  float v11;
  float result;
  _DWORD v13[9];
  float32x2_t v14;
  float v15;
  float *v16[2];

  a2[1].i8[4] = 1;
  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_DWORD *)(a1 + 36);
  v5 = *(_DWORD *)(a1 + 40);
  v7 = *(_DWORD *)(a1 + 20);
  v6 = *(_DWORD *)(a1 + 24);
  v8 = *(_DWORD *)(a1 + 28);
  v9 = *(_DWORD *)(a1 + 32);
  v10 = *(_DWORD *)(a1 + 44);
  v13[0] = *(_DWORD *)(a1 + 12);
  v13[1] = v6;
  v13[2] = v4;
  v13[3] = v3;
  v13[4] = v8;
  v13[5] = v5;
  v13[6] = v7;
  v13[7] = v9;
  v13[8] = v10;
  v16[0] = (float *)v13;
  v16[1] = (float *)(a1 + 48);
  v14 = 0;
  v15 = 0.0;
  sub_20AB920D4((float *)&v14, v16);
  v11 = v15;
  *a2 = vneg_f32(v14);
  result = -v11;
  a2[1].f32[0] = -v11;
  return result;
}

float32_t sub_20ABB41E4@<S0>(float32x2_t *a1@<X0>, float *a2@<X1>, float32x2_t *a3@<X8>)
{
  float32_t result;
  float *v6[2];
  float32x2_t v7;
  float v8;

  v6[0] = (float *)&a1[1] + 1;
  v6[1] = a2;
  v7 = 0;
  v8 = 0.0;
  sub_20AB920D4((float *)&v7, v6);
  result = v8 + a1[7].f32[0];
  *a3 = vadd_f32(v7, a1[6]);
  a3[1].f32[0] = result;
  a3[1].i8[4] = 1;
  return result;
}

float32_t sub_20ABB4254@<S0>(uint64_t a1@<X0>, float *a2@<X1>, float32x2_t *a3@<X8>)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  float32_t result;
  float *v13[2];
  float *v14[2];
  float32x2_t v15;
  float v16;
  float32x2_t v17;
  float v18;
  char v19;
  _DWORD v20[9];

  v19 = 1;
  v4 = *(_DWORD *)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 36);
  v6 = *(_DWORD *)(a1 + 40);
  v8 = *(_DWORD *)(a1 + 20);
  v7 = *(_DWORD *)(a1 + 24);
  v9 = *(_DWORD *)(a1 + 28);
  v10 = *(_DWORD *)(a1 + 32);
  v11 = *(_DWORD *)(a1 + 44);
  v20[0] = *(_DWORD *)(a1 + 12);
  v20[1] = v7;
  v20[2] = v5;
  v20[3] = v4;
  v20[4] = v9;
  v20[5] = v6;
  v20[6] = v8;
  v20[7] = v10;
  v20[8] = v11;
  v14[0] = (float *)v20;
  v14[1] = a2;
  v13[0] = (float *)v20;
  v13[1] = (float *)(a1 + 48);
  v15 = 0;
  v16 = 0.0;
  sub_20AB920D4((float *)&v15, v14);
  v18 = 0.0;
  v17 = 0;
  sub_20AB920D4((float *)&v17, v13);
  result = v16 - v18;
  *a3 = vsub_f32(v15, v17);
  a3[1].f32[0] = result;
  a3[1].i8[4] = 1;
  return result;
}

uint64_t sub_20ABB4314()
{
  return 0;
}

uint64_t sub_20ABB431C()
{
  return 1;
}

uint64_t *sub_20ABB4324(uint64_t a1, uint64_t *a2)
{
  sub_20ABB22E4((_BYTE *)(a1 + 8), a2);
  return sub_20ABB242C((uint64_t *)(a1 + 48), a2);
}

BOOL sub_20ABB4354(float32x2_t *a1, float32x2_t *a2, float a3)
{
  _BOOL8 result;
  float v7;
  float32x2_t v8;
  _OWORD v9[2];
  int v10;
  char *v11;
  _QWORD v12[2];
  __int128 v13;
  __int128 v14;
  int v15;

  if ((*(unsigned int (**)(float32x2_t *))(*(_QWORD *)a2 + 16))(a2))
    return 0;
  v11 = (char *)&a2[1] + 4;
  v12[0] = (char *)a1 + 12;
  v12[1] = &v11;
  v13 = 0u;
  v14 = 0u;
  v15 = 0;
  sub_20ABB1274((uint64_t)&v13, (uint64_t)v12);
  v9[0] = v13;
  v9[1] = v14;
  v10 = v15;
  DWORD2(v13) = 0;
  *(_QWORD *)&v13 = 0;
  sub_20AB9173C((float32x2_t *)v9, (float *)&v13);
  result = 0;
  if (sqrtf((float)((float)(*(float *)&v13 * *(float *)&v13) + (float)(*((float *)&v13 + 1) * *((float *)&v13 + 1)))+ (float)(*((float *)&v13 + 2) * *((float *)&v13 + 2))) < a3)
  {
    v7 = a1[7].f32[0] - a2[7].f32[0];
    v8 = vsub_f32(a1[6], a2[6]);
    return sqrtf(vaddv_f32(vmul_f32(v8, v8)) + (float)(v7 * v7)) < a3;
  }
  return result;
}

uint64_t sub_20ABB4464(int **__s1, _DWORD *a2)
{
  int v4;
  uint64_t result;
  uint64_t v6;
  int *v7;
  int v8;
  int v9;
  char **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v4 = *((char *)__s1 + 23);
  if (v4 < 0)
  {
    result = 0;
    v6 = (uint64_t)__s1[1] - 7;
    v7 = *__s1;
    switch(v6)
    {
      case 0:
        v8 = *v7;
        v9 = *(int *)((char *)v7 + 3);
        if (v8 != 1752066384 || v9 != 1701605224)
          goto LABEL_30;
LABEL_11:
        v11 = &cva::adp::io::detail::EnumDescription<cva::geo::eCameraType,void>::names;
        goto LABEL_32;
      case 1:
        if (*(_QWORD *)v7 != 0x616C696B6B696548)
          goto LABEL_30;
LABEL_19:
        v11 = &off_24C380710;
        goto LABEL_32;
      case 4:
        v12 = *(_QWORD *)v7;
        v13 = *(_QWORD *)((char *)v7 + 3);
        if (v12 != 0x20656C6F686E6950 || v13 != 0x54554C20656C6F68)
          goto LABEL_30;
LABEL_25:
        v11 = &off_24C380718;
        goto LABEL_32;
      case 7:
        v15 = *(_QWORD *)v7;
        v16 = *(_QWORD *)((char *)v7 + 6);
        if (v15 == 0x20616C616E6E614BLL && v16 == 0x6C61696461522061)
        {
LABEL_31:
          v11 = &off_24C380708;
LABEL_32:
          *a2 = (unint64_t)((char *)v11
                                 - (char *)&cva::adp::io::detail::EnumDescription<cva::geo::eCameraType,void>::names) >> 3;
          result = 1;
        }
        else
        {
LABEL_30:
          result = 0;
        }
        break;
      default:
        return result;
    }
  }
  else
  {
    result = 0;
    switch((char)v4)
    {
      case 7:
        if (!memcmp(__s1, "Pinhole", v4))
          goto LABEL_11;
        goto LABEL_30;
      case 8:
        if (!memcmp(__s1, "Heikkila", v4))
          goto LABEL_19;
        goto LABEL_30;
      case 11:
        if (!memcmp(__s1, "Pinhole LUT", v4))
          goto LABEL_25;
        goto LABEL_30;
      case 14:
        if (!memcmp(__s1, "Kannala Radial", v4))
          goto LABEL_31;
        goto LABEL_30;
      default:
        return result;
    }
  }
  return result;
}

uint64_t sub_20ABB463C(std::string::size_type *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  const std::string::value_type *isa;
  std::string::size_type data_high;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  unint64_t v14;
  float v15;
  float v16;
  const std::string::value_type *v17;
  std::string::size_type info;
  const std::string::value_type *v19;
  std::string::size_type v20;
  int v21;
  char v22;
  int *v23;
  int v24;
  float v25;
  char v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  int v29;
  int v30;
  char *v32;
  int v33;
  char v34;
  float v35;
  float v36;
  char v37;
  int v38;
  char v39;
  unsigned int v40[5];
  char v41;
  std::string v42;
  std::string __dst;
  __CFString v44;

  if (*(char *)(a2 + 23) < 0)
    sub_20AB88C14(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
  else
    __dst = *(std::string *)a2;
  cva::adp::PListPath::convertToPath(a3, (uint64_t)&v44);
  if (SHIBYTE(v44.data) >= 0)
    isa = (const std::string::value_type *)&v44;
  else
    isa = (const std::string::value_type *)v44.isa;
  if (SHIBYTE(v44.data) >= 0)
    data_high = HIBYTE(v44.data);
  else
    data_high = v44.info;
  std::string::append(&__dst, isa, data_high);
  if (SHIBYTE(v44.data) < 0)
    operator delete(v44.isa);
  *(_QWORD *)v40 = 0;
  HIBYTE(v44.data) = 10;
  strcpy((char *)&v44, "Resolution");
  v10 = sub_20AB91378(a1, &__dst, (uint64_t)&v44, v40);
  v11 = v10;
  if (SHIBYTE(v44.data) < 0)
  {
    operator delete(v44.isa);
    if (!(_DWORD)v11)
    {
LABEL_14:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_15;
      goto LABEL_24;
    }
  }
  else if (!(_DWORD)v10)
  {
    goto LABEL_14;
  }
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = 0uLL;
  HIBYTE(v44.data) = 12;
  strcpy((char *)&v44, "Image Bounds");
  v12 = sub_20ABB7A90(a1, &__dst, &v44, &v42);
  v13 = v12;
  if (SHIBYTE(v44.data) < 0)
  {
    operator delete(v44.isa);
    if ((v13 & 1) != 0)
      goto LABEL_20;
  }
  else if ((v12 & 1) != 0)
  {
LABEL_20:
    *(_OWORD *)(a4 + 28) = *(_OWORD *)&v42.__r_.__value_.__l.__data_;
    v14 = *(_QWORD *)v40;
    goto LABEL_23;
  }
  v15 = (float)v40[0];
  v16 = (float)v40[1];
  v14 = v40[0] | ((unint64_t)v40[1] << 32);
  *(_DWORD *)(a4 + 28) = 0;
  *(float *)(a4 + 32) = v15;
  *(_DWORD *)(a4 + 36) = 0;
  *(float *)(a4 + 40) = v16;
LABEL_23:
  *(_QWORD *)(a4 + 44) = v14;
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_15:
    if (!(_DWORD)v11)
      return v11;
LABEL_25:
    if (*(char *)(a2 + 23) < 0)
      sub_20AB88C14(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
    else
      __dst = *(std::string *)a2;
    cva::adp::PListPath::convertToPath(a3, (uint64_t)&v44);
    if (SHIBYTE(v44.data) >= 0)
      v17 = (const std::string::value_type *)&v44;
    else
      v17 = (const std::string::value_type *)v44.isa;
    if (SHIBYTE(v44.data) >= 0)
      info = HIBYTE(v44.data);
    else
      info = v44.info;
    std::string::append(&__dst, v17, info);
    if (SHIBYTE(v44.data) < 0)
      operator delete(v44.isa);
    v41 = 7;
    strcpy((char *)v40, "Pinhole");
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      sub_20AB88C14(&v42, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    else
      v42 = __dst;
    cva::adp::PListPath::convertToPath(v40, (uint64_t)&v44);
    if (SHIBYTE(v44.data) >= 0)
      v19 = (const std::string::value_type *)&v44;
    else
      v19 = (const std::string::value_type *)v44.isa;
    if (SHIBYTE(v44.data) >= 0)
      v20 = HIBYTE(v44.data);
    else
      v20 = v44.info;
    std::string::append(&v42, v19, v20);
    if (SHIBYTE(v44.data) < 0)
    {
      operator delete(v44.isa);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_47;
    }
    else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_47;
    }
    operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_47:
    v38 = 0;
    v39 = 1;
    HIBYTE(v44.data) = 12;
    strcpy((char *)&v44, "Focal Length");
    v21 = sub_20ABB7F2C(a1, (uint64_t)&v42, &v44, &v38);
    v22 = v39;
    v23 = (int *)(a4 + 32);
    if (v21)
      v23 = &v38;
    else
      v22 = 1;
    *(_DWORD *)a4 = *v23;
    *(_BYTE *)(a4 + 4) = v22;
    v36 = 0.0;
    v37 = 1;
    HIBYTE(v44.data) = 12;
    strcpy((char *)&v44, "Aspect Ratio");
    v24 = sub_20ABB7F2C(a1, (uint64_t)&v42, &v44, &v36);
    v25 = v36;
    v26 = v37;
    if (!v24)
    {
      v25 = 1.0;
      v26 = 1;
    }
    *(float *)(a4 + 8) = v25;
    *(_BYTE *)(a4 + 12) = v26;
    v41 = 15;
    strcpy((char *)v40, "Principal Point");
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
      sub_20AB88C14(&__dst, v42.__r_.__value_.__l.__data_, v42.__r_.__value_.__l.__size_);
    else
      __dst = v42;
    cva::adp::PListPath::convertToPath(v40, (uint64_t)&v44);
    if (SHIBYTE(v44.data) >= 0)
      v27 = (const std::string::value_type *)&v44;
    else
      v27 = (const std::string::value_type *)v44.isa;
    if (SHIBYTE(v44.data) >= 0)
      v28 = HIBYTE(v44.data);
    else
      v28 = v44.info;
    std::string::append(&__dst, v27, v28);
    if (SHIBYTE(v44.data) < 0)
      operator delete(v44.isa);
    HIBYTE(v44.data) = 4;
    strcpy((char *)&v44, "Data");
    v29 = sub_20ABB6154(a1, &__dst, &v44, (_DWORD *)(a4 + 16));
    v30 = v29;
    if (SHIBYTE(v44.data) < 0)
    {
      operator delete(v44.isa);
      if (!v30)
      {
LABEL_67:
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_68;
        goto LABEL_77;
      }
    }
    else if (!v29)
    {
      goto LABEL_67;
    }
    HIBYTE(v44.data) = 5;
    strcpy((char *)&v44, "Fixed");
    v32 = (char *)(a4 + 24);
    v33 = cva::adp::io::PListSerializer::getItem<BOOL>(a1, &__dst, (uint64_t)&v44, (_BYTE *)(a4 + 24));
    if (SHIBYTE(v44.data) < 0)
      operator delete(v44.isa);
    v34 = *v32 ^ 1;
    if (!v33)
      v34 = 1;
    *v32 = v34;
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_68:
      if ((v30 & 1) != 0)
        goto LABEL_69;
      goto LABEL_78;
    }
LABEL_77:
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((v30 & 1) != 0)
    {
LABEL_69:
      if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return v11;
LABEL_79:
      operator delete(v42.__r_.__value_.__l.__data_);
      return v11;
    }
LABEL_78:
    v35 = *(float *)(a4 + 40) * 0.5;
    *(float *)(a4 + 16) = *(float *)(a4 + 32) * 0.5;
    *(float *)(a4 + 20) = v35;
    *(_BYTE *)(a4 + 24) = 1;
    if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v11;
    goto LABEL_79;
  }
LABEL_24:
  operator delete(__dst.__r_.__value_.__l.__data_);
  if ((_DWORD)v11)
    goto LABEL_25;
  return v11;
}

void sub_20ABB4B68()
{
  JUMPOUT(0x20BD2D02CLL);
}

uint64_t sub_20ABB4B7C()
{
  return 3;
}

uint64_t sub_20ABB4B84(uint64_t a1)
{
  return a1 + 48;
}

void *sub_20ABB4B8C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  void *result;

  v4 = operator new();
  v5 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(_QWORD *)v4 = &off_24C37FDC0;
  *(_QWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 20) = *(_QWORD *)(a1 + 20);
  *(_QWORD *)(v4 + 25) = *(_QWORD *)(a1 + 25);
  *(_QWORD *)(v4 + 36) = *(_QWORD *)(a1 + 36);
  *(_BYTE *)(v4 + 44) = *(_BYTE *)(a1 + 44);
  v6 = *(_OWORD *)(a1 + 48);
  v7 = *(_OWORD *)(a1 + 64);
  *(_QWORD *)(v4 + 80) = *(_QWORD *)(a1 + 80);
  *(_OWORD *)(v4 + 48) = v6;
  *(_OWORD *)(v4 + 64) = v7;
  memcpy((void *)(v4 + 88), (const void *)(a1 + 88), 0x400uLL);
  result = memcpy((void *)(v4 + 1112), (const void *)(a1 + 1112), 0x400uLL);
  *a2 = v4;
  return result;
}

_BYTE *sub_20ABB4C3C(_BYTE *result, char a2)
{
  result[24] = a2;
  result[32] = a2;
  result[44] = a2;
  return result;
}

BOOL sub_20ABB4C4C(float *a1, float *a2, float *a3)
{
  float v3;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  unsigned int v13;
  float v14;
  float v15;
  float v17;
  float v18;
  float v19;
  float v20;
  _BOOL4 v21;

  v3 = a2[2];
  if (v3 <= 0.0)
    return 0;
  v6 = a1[20];
  v7 = a1[21];
  v8 = *a2 - v6;
  v9 = a2[1] - v7;
  v10 = atan2f(sqrtf((float)(v8 * v8) + (float)(v9 * v9)), a2[2]);
  v11 = a1[18];
  if (v10 >= v11)
    return 0;
  v12 = (float)(v10 / v11) * 255.0;
  v13 = v12;
  if (v12 > 0xFE)
  {
    v15 = a1[v13 + 22];
  }
  else
  {
    v14 = a1[v13 + 22];
    v15 = v14 + (float)((float)(v12 - (float)v13) * (float)(a1[v13 + 23] - v14));
  }
  v17 = v15 / v3;
  v18 = a1[5];
  v19 = a1[9] + (float)((float)(v18 * a1[7]) * (float)(v6 + (float)(v8 * v17)));
  v20 = a1[10] + (float)(v18 * (float)(v7 + (float)(v9 * v17)));
  *a3 = v19;
  a3[1] = v20;
  v21 = a1[12] <= v19;
  if (a1[13] <= v19)
    v21 = 0;
  if (a1[14] > v20)
    v21 = 0;
  return a1[15] > v20 && v21;
}

uint64_t sub_20ABB4D6C(uint64_t a1, unint64_t *a2, float32x2_t *a3, int32x4_t a4)
{
  uint64_t result;
  float32x4_t v6;
  float v7;
  float v8;
  float32x2_t v11;
  float32x2_t v12;
  float v13;
  float v14;
  float v15;
  unsigned int v16;
  float v17;
  float v18;

  result = 0;
  a4.i64[0] = *a2;
  v6 = (float32x4_t)vzip1q_s32(a4, a4);
  if ((vmaxv_u16((uint16x4_t)vtrn2_s16(vrev32_s16(vmovn_s32(vcgtq_f32(*(float32x4_t *)(a1 + 48), v6))), vmovn_s32(vcgeq_f32(v6, *(float32x4_t *)(a1 + 48))))) & 1) == 0)
  {
    v7 = *(float *)(a1 + 20);
    v8 = *(float *)(a1 + 28);
    if (v7 >= 0.000000014901 && v8 >= 0.000000014901)
    {
      v11.f32[0] = v7 * v8;
      v11.i32[1] = *(_DWORD *)(a1 + 20);
      v12 = vdiv_f32(vsub_f32(*(float32x2_t *)a4.i8, *(float32x2_t *)(a1 + 36)), v11);
      v13 = atanf(sqrtf(vaddv_f32(vmul_f32(v12, v12))));
      v14 = *(float *)(a1 + 76);
      if (v13 >= v14)
      {
        return 0;
      }
      else
      {
        v15 = (float)(v13 / v14) * 255.0;
        v16 = v15;
        if (v15 > 0xFE)
        {
          v18 = *(float *)(a1 + 4 * v16 + 1112);
        }
        else
        {
          v17 = *(float *)(a1 + 1112 + 4 * v16);
          v18 = v17 + (float)((float)(v15 - (float)v16) * (float)(*(float *)(a1 + 1112 + 4 * (v16 + 1)) - v17));
        }
        *a3 = vmul_n_f32(v12, v18);
        return 1;
      }
    }
  }
  return result;
}

_QWORD *sub_20ABB4E70(__n128 *a1, _QWORD *a2)
{
  uint64_t v4;

  v4 = (uint64_t)a1[1].n128_i64 + 4;
  sub_20ABB51F8(a1 + 3, a2);
  sub_20ABB5298(v4, a2);
  sub_20ABB53C4((uint64_t)&a1[1].n128_i64[1] + 4, a2);
  return sub_20ABB54F0((uint64_t)a1[2].n128_i64 + 4, a2);
}

BOOL sub_20ABB4EC4(uint64_t a1, uint64_t a2, float a3)
{
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;
  uint64_t v11;
  float v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float v17;
  float v18;
  float32x2_t v19;
  float32x2_t v20;
  float v21;
  float32x2_t v22;
  float32x2_t v23;
  float v24;
  float32x2_t v25;
  float32x2_t v26;
  uint64_t v27;
  float v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float v33;
  float v34;
  float32x2_t v35;
  float32x2_t v36;
  float v37;
  float32x2_t v38;
  float32x2_t v39;
  float v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x2_t v43;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) != 3)
    return 0;
  if ((float)(*(float *)(a1 + 20) - *(float *)(a2 + 20)) >= a3)
    return 0;
  if ((float)(*(float *)(a1 + 28) - *(float *)(a2 + 28)) >= a3)
    return 0;
  v6 = vsub_f32(*(float32x2_t *)(a1 + 36), *(float32x2_t *)(a2 + 36));
  if (sqrtf(vaddv_f32(vmul_f32(v6, v6))) >= a3)
    return 0;
  if (*(unsigned __int8 *)(a1 + 44) != *(unsigned __int8 *)(a2 + 44))
    return 0;
  v7 = vsub_f32(*(float32x2_t *)(a1 + 48), *(float32x2_t *)(a2 + 48));
  v8 = vmul_f32(v7, v7);
  v9 = vsub_f32(*(float32x2_t *)(a1 + 56), *(float32x2_t *)(a2 + 56));
  v10 = vmul_f32(v9, v9);
  if (sqrtf(vadd_f32(vadd_f32(vadd_f32(v8, (float32x2_t)vdup_lane_s32((int32x2_t)v8, 1)), v10), (float32x2_t)vdup_lane_s32((int32x2_t)v10, 1)).f32[0]) >= a3)return 0;
  if (*(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64))
    return 0;
  if (*(_DWORD *)(a1 + 68) != *(_DWORD *)(a2 + 68))
    return 0;
  v11 = 0;
  v12 = (float)(*(float *)(a1 + 88) - *(float *)(a2 + 88)) * (float)(*(float *)(a1 + 88) - *(float *)(a2 + 88));
  do
  {
    v13 = vsubq_f32(*(float32x4_t *)(a1 + v11 + 92), *(float32x4_t *)(a2 + v11 + 92));
    v14 = vsubq_f32(*(float32x4_t *)(a1 + v11 + 108), *(float32x4_t *)(a2 + v11 + 108));
    v15 = vmulq_f32(v13, v13);
    v16 = vmulq_f32(v14, v14);
    v12 = (float)((float)((float)((float)((float)((float)((float)(v12 + v15.f32[0]) + v15.f32[1]) + v15.f32[2])
                                        + v15.f32[3])
                                + v16.f32[0])
                        + v16.f32[1])
                + v16.f32[2])
        + v16.f32[3];
    v11 += 32;
  }
  while (v11 != 992);
  v17 = *(float *)(a1 + 1084) - *(float *)(a2 + 1084);
  v18 = v12 + (float)(v17 * v17);
  v19 = vsub_f32(*(float32x2_t *)(a1 + 1088), *(float32x2_t *)(a2 + 1088));
  v20 = vmul_f32(v19, v19);
  v21 = (float)(v18 + v20.f32[0]) + v20.f32[1];
  v22 = vsub_f32(*(float32x2_t *)(a1 + 1096), *(float32x2_t *)(a2 + 1096));
  v23 = vmul_f32(v22, v22);
  v24 = (float)(v21 + v23.f32[0]) + v23.f32[1];
  v25 = vsub_f32(*(float32x2_t *)(a1 + 1104), *(float32x2_t *)(a2 + 1104));
  v26 = vmul_f32(v25, v25);
  if (sqrtf((float)(v24 + v26.f32[0]) + v26.f32[1]) >= a3)
    return 0;
  v27 = 0;
  v28 = (float)(*(float *)(a1 + 1112) - *(float *)(a2 + 1112)) * (float)(*(float *)(a1 + 1112) - *(float *)(a2 + 1112));
  do
  {
    v29 = vsubq_f32(*(float32x4_t *)(a1 + v27 + 1116), *(float32x4_t *)(a2 + v27 + 1116));
    v30 = vsubq_f32(*(float32x4_t *)(a1 + v27 + 1132), *(float32x4_t *)(a2 + v27 + 1132));
    v31 = vmulq_f32(v29, v29);
    v32 = vmulq_f32(v30, v30);
    v28 = (float)((float)((float)((float)((float)((float)((float)(v28 + v31.f32[0]) + v31.f32[1]) + v31.f32[2])
                                        + v31.f32[3])
                                + v32.f32[0])
                        + v32.f32[1])
                + v32.f32[2])
        + v32.f32[3];
    v27 += 32;
  }
  while (v27 != 992);
  v33 = *(float *)(a1 + 2108) - *(float *)(a2 + 2108);
  v34 = v28 + (float)(v33 * v33);
  v35 = vsub_f32(*(float32x2_t *)(a1 + 2112), *(float32x2_t *)(a2 + 2112));
  v36 = vmul_f32(v35, v35);
  v37 = (float)(v34 + v36.f32[0]) + v36.f32[1];
  v38 = vsub_f32(*(float32x2_t *)(a1 + 2120), *(float32x2_t *)(a2 + 2120));
  v39 = vmul_f32(v38, v38);
  v40 = (float)(v37 + v39.f32[0]) + v39.f32[1];
  v41 = vsub_f32(*(float32x2_t *)(a1 + 2128), *(float32x2_t *)(a2 + 2128));
  v42 = vmul_f32(v41, v41);
  if (sqrtf((float)(v40 + v42.f32[0]) + v42.f32[1]) >= a3
    || vabds_f32(*(float *)(a1 + 72), *(float *)(a1 + 72)) >= a3
    || vabds_f32(*(float *)(a1 + 76), *(float *)(a1 + 76)) >= a3)
  {
    return 0;
  }
  v43 = vsub_f32(*(float32x2_t *)(a1 + 80), *(float32x2_t *)(a2 + 80));
  return sqrtf(vaddv_f32(vmul_f32(v43, v43))) < a3;
}

_QWORD *sub_20ABB51F8(__n128 *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  char __p[17];
  char v10;

  v4 = sub_20AB89270(a2, (uint64_t)"[FIXED][", 8);
  v10 = 16;
  strcpy(__p, "Width and Height");
  v5 = sub_20AB89270(v4, (uint64_t)__p, 16);
  v6 = sub_20AB89270(v5, (uint64_t)"] : ", 4);
  v7 = sub_20ABB5618(v6, *a1);
  sub_20AB89270(v7, (uint64_t)"\n", 1);
  if (v10 < 0)
    operator delete(*(void **)__p);
  return a2;
}

_QWORD *sub_20ABB5298(uint64_t a1, _QWORD *a2)
{
  const char *v3;
  size_t v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *__p[2];
  char v13;
  void *__dst[2];
  unsigned __int8 v15;

  if (*(_BYTE *)(a1 + 4))
    v3 = "[FREE]";
  else
    v3 = "[FIXED]";
  if (*(_BYTE *)(a1 + 4))
    v4 = 6;
  else
    v4 = 7;
  v15 = v4;
  memcpy(__dst, v3, v4);
  *(_BYTE *)((unint64_t)__dst | v4) = 0;
  if ((v15 & 0x80u) == 0)
    v5 = __dst;
  else
    v5 = (void **)__dst[0];
  if ((v15 & 0x80u) == 0)
    v6 = v15;
  else
    v6 = (uint64_t)__dst[1];
  v7 = sub_20AB89270(a2, (uint64_t)v5, v6);
  v8 = sub_20AB89270(v7, (uint64_t)"[", 1);
  v13 = 12;
  strcpy((char *)__p, "Focal Length");
  v9 = sub_20AB89270(v8, (uint64_t)__p, 12);
  sub_20AB89270(v9, (uint64_t)"] : ", 4);
  v10 = (_QWORD *)std::ostream::operator<<();
  sub_20AB89270(v10, (uint64_t)"\n", 1);
  if (v13 < 0)
  {
    operator delete(__p[0]);
    if (((char)v15 & 0x80000000) == 0)
      return a2;
LABEL_17:
    operator delete(__dst[0]);
    return a2;
  }
  if ((char)v15 < 0)
    goto LABEL_17;
  return a2;
}

_QWORD *sub_20ABB53C4(uint64_t a1, _QWORD *a2)
{
  const char *v3;
  size_t v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *__p[2];
  char v13;
  void *__dst[2];
  unsigned __int8 v15;

  if (*(_BYTE *)(a1 + 4))
    v3 = "[FREE]";
  else
    v3 = "[FIXED]";
  if (*(_BYTE *)(a1 + 4))
    v4 = 6;
  else
    v4 = 7;
  v15 = v4;
  memcpy(__dst, v3, v4);
  *(_BYTE *)((unint64_t)__dst | v4) = 0;
  if ((v15 & 0x80u) == 0)
    v5 = __dst;
  else
    v5 = (void **)__dst[0];
  if ((v15 & 0x80u) == 0)
    v6 = v15;
  else
    v6 = (uint64_t)__dst[1];
  v7 = sub_20AB89270(a2, (uint64_t)v5, v6);
  v8 = sub_20AB89270(v7, (uint64_t)"[", 1);
  v13 = 12;
  strcpy((char *)__p, "Aspect Ratio");
  v9 = sub_20AB89270(v8, (uint64_t)__p, 12);
  sub_20AB89270(v9, (uint64_t)"] : ", 4);
  v10 = (_QWORD *)std::ostream::operator<<();
  sub_20AB89270(v10, (uint64_t)"\n", 1);
  if (v13 < 0)
  {
    operator delete(__p[0]);
    if (((char)v15 & 0x80000000) == 0)
      return a2;
LABEL_17:
    operator delete(__dst[0]);
    return a2;
  }
  if ((char)v15 < 0)
    goto LABEL_17;
  return a2;
}

_QWORD *sub_20ABB54F0(uint64_t a1, _QWORD *a2)
{
  const char *v4;
  size_t v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t *v12;
  void *__p[2];
  char v15;
  void *__dst[2];
  unsigned __int8 v17;

  if (*(_BYTE *)(a1 + 8))
    v4 = "[FREE]";
  else
    v4 = "[FIXED]";
  if (*(_BYTE *)(a1 + 8))
    v5 = 6;
  else
    v5 = 7;
  v17 = v5;
  memcpy(__dst, v4, v5);
  *(_BYTE *)((unint64_t)__dst | v5) = 0;
  if ((v17 & 0x80u) == 0)
    v6 = __dst;
  else
    v6 = (void **)__dst[0];
  if ((v17 & 0x80u) == 0)
    v7 = v17;
  else
    v7 = (uint64_t)__dst[1];
  v8 = sub_20AB89270(a2, (uint64_t)v6, v7);
  v9 = sub_20AB89270(v8, (uint64_t)"[", 1);
  v15 = 15;
  strcpy((char *)__p, "Principal Point");
  v10 = sub_20AB89270(v9, (uint64_t)__p, 15);
  v11 = sub_20AB89270(v10, (uint64_t)"] : ", 4);
  v12 = sub_20ABB2DBC(v11, *(double *)a1);
  sub_20AB89270(v12, (uint64_t)"\n", 1);
  if (v15 < 0)
  {
    operator delete(__p[0]);
    if (((char)v17 & 0x80000000) == 0)
      return a2;
LABEL_17:
    operator delete(__dst[0]);
    return a2;
  }
  if ((char)v17 < 0)
    goto LABEL_17;
  return a2;
}

uint64_t *sub_20ABB5618(uint64_t *a1, __n128 a2)
{
  char *v3;
  int v4;
  int64_t v5;
  size_t v6;
  size_t v7;
  double v8;
  size_t v9;
  double v10;
  std::string *p_b;
  uint64_t v12;
  uint64_t v13;
  std::string *v14;
  std::string::size_type v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  std::string *v21;
  std::string::size_type v22;
  __n128 v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  void **v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  void **v35;
  int v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  void **v42;
  char *v43;
  void **v44;
  const std::locale::facet *v45;
  uint64_t v46;
  BOOL v47;
  std::string::size_type v48;
  std::string::size_type v49;
  int64_t v50;
  void **v51;
  uint64_t v52;
  void **v53;
  const std::locale::facet *v54;
  uint64_t v55;
  std::string::size_type v56;
  int64_t v57;
  void **v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  std::string *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  void **v67;
  int v68;
  const std::locale::facet *v69;
  uint64_t v70;
  std::string::size_type v71;
  std::string::size_type v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  std::string *v76;
  uint64_t v77;
  uint64_t v78;
  int v80;
  void **v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  void *v86;
  std::string::size_type v87;
  int64_t v88;
  std::string __b;
  void *__p[2];
  uint64_t v91;
  __n128 v92;
  std::string v93;

  v92 = a2;
  v3 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v4 = *((_DWORD *)v3 + 2);
  v6 = *((_QWORD *)v3 + 2);
  v5 = *((_QWORD *)v3 + 3);
  if (v5)
  {
    if (v5 <= (uint64_t)(v6 + 2))
      v5 = v6 + 2;
    v7 = v5 + ~v6;
    v8 = __exp10((double)-(uint64_t)v6);
    v9 = v7 - 1;
    if (v7 - 1 > 0x7FFFFFFFFFFFFFF7)
LABEL_133:
      abort();
    v10 = v8;
    if (v9 >= 0x17)
    {
      v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17)
        v12 = v9 | 7;
      v13 = v12 + 1;
      p_b = (std::string *)operator new(v12 + 1);
      __b.__r_.__value_.__l.__size_ = v7 - 1;
      __b.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
      __b.__r_.__value_.__r.__words[0] = (std::string::size_type)p_b;
    }
    else
    {
      *((_BYTE *)&__b.__r_.__value_.__s + 23) = v7 - 1;
      p_b = &__b;
      if (v7 == 1)
      {
        LODWORD(v7) = 1;
        goto LABEL_13;
      }
    }
  }
  else
  {
    v10 = __exp10((double)-(uint64_t)v6);
    v9 = 3;
    *((_BYTE *)&__b.__r_.__value_.__s + 23) = 3;
    p_b = &__b;
    LODWORD(v7) = 4;
  }
  memset(p_b, 32, v9);
LABEL_13:
  p_b->__r_.__value_.__s.__data_[v9] = 0;
  v14 = std::string::append(&__b, "0 ");
  v15 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v93.__r_.__value_.__l.__data_ = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v93.__r_.__value_.__r.__words[2] = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_133;
  if (v6 >= 0x17)
  {
    v17 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v17 = v6 | 7;
    v18 = v17 + 1;
    v16 = operator new(v17 + 1);
    v87 = v6;
    v88 = v18 | 0x8000000000000000;
    v86 = v16;
    goto LABEL_20;
  }
  HIBYTE(v88) = v6;
  v16 = &v86;
  if (v6)
LABEL_20:
    memset(v16, 32, v6);
  *((_BYTE *)v16 + v6) = 0;
  if (v88 >= 0)
    v19 = (const std::string::value_type *)&v86;
  else
    v19 = (const std::string::value_type *)v86;
  if (v88 >= 0)
    v20 = HIBYTE(v88);
  else
    v20 = v87;
  v21 = std::string::append(&v93, v19, v20);
  v22 = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v91 = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v88) < 0)
  {
    operator delete(v86);
    if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_29;
LABEL_132:
    operator delete(v93.__r_.__value_.__l.__data_);
    goto LABEL_29;
  }
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_132;
LABEL_29:
  v80 = v4;
  if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__b.__r_.__value_.__l.__data_);
  *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = 0;
  v93.__r_.__value_.__s.__data_[0] = 91;
  sub_20AB89270(a1, (uint64_t)&v93, 1);
  v24 = 0;
  v84 = a1 + 1;
  v85 = (int)v7 + (int)v6 + 1;
  v82 = (int)v6;
  v83 = (int)v6 - 3;
  while (1)
  {
    v25 = v92.n128_f32[v24];
    v23.n128_f64[0] = v25;
    v26 = *a1;
    v27 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    if ((v27[9] & 1) != 0)
      break;
    if (fabs(v23.n128_f64[0]) < v10)
    {
      v28 = (char *)HIBYTE(v91);
      v29 = (char *)__p[1];
      if (v91 >= 0)
        v30 = __p;
      else
        v30 = (void **)__p[0];
      MEMORY[0x20BD2CE34](&__b, a1);
      if (__b.__r_.__value_.__s.__data_[0])
      {
        if ((char)v28 >= 0)
          v31 = v28;
        else
          v31 = v29;
        v32 = (char *)a1 + *(_QWORD *)(*a1 - 24);
        v33 = *((_QWORD *)v32 + 5);
        v34 = &v31[(_QWORD)v30];
        if ((*((_DWORD *)v32 + 2) & 0xB0) == 0x20)
          v35 = (void **)&v31[(_QWORD)v30];
        else
          v35 = v30;
        v36 = *((_DWORD *)v32 + 36);
        if (v36 == -1)
        {
          v44 = v35;
          std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
          v45 = std::locale::use_facet((const std::locale *)&v93, MEMORY[0x24BEDB350]);
          v36 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v45->__vftable[2].~facet_0)(v45, 32);
          std::locale::~locale((std::locale *)&v93);
          v35 = v44;
          *((_DWORD *)v32 + 36) = v36;
          if (!v33)
            goto LABEL_96;
        }
        else if (!v33)
        {
          goto LABEL_96;
        }
        v46 = *((_QWORD *)v32 + 3);
        v47 = v46 <= (uint64_t)v31;
        v48 = v46 - (_QWORD)v31;
        if (v47)
          v49 = 0;
        else
          v49 = v48;
        v50 = (char *)v35 - (char *)v30;
        if ((char *)v35 - (char *)v30 >= 1)
        {
          v51 = v35;
          v52 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v33 + 96))(v33, v30, v50);
          v35 = v51;
          if (v52 != v50)
            goto LABEL_96;
        }
        goto LABEL_80;
      }
      goto LABEL_97;
    }
    *((_QWORD *)v27 + 3) = v85;
    *(_DWORD *)((char *)v84 + *(_QWORD *)(v26 - 24)) = *(_DWORD *)((_BYTE *)v84 + *(_QWORD *)(v26 - 24)) & 0xFFFFFEFB | 4;
    *(_DWORD *)((char *)v84 + *(_QWORD *)(v26 - 24)) |= 0x400u;
    v37 = *(_QWORD *)(v26 - 24);
    v38 = a1 + 2;
    v39 = v82;
LABEL_52:
    *(_QWORD *)((char *)v38 + v37) = v39;
    std::ostream::operator<<();
    if (v24 == 3)
      goto LABEL_128;
LABEL_98:
    LOBYTE(v86) = 44;
    MEMORY[0x20BD2CE34](&__b, a1);
    if (__b.__r_.__value_.__s.__data_[0])
    {
      v65 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v66 = *((_QWORD *)v65 + 5);
      if ((*((_DWORD *)v65 + 2) & 0xB0) == 0x20)
        v67 = (void **)((char *)&v86 + 1);
      else
        v67 = &v86;
      v68 = *((_DWORD *)v65 + 36);
      if (v68 == -1)
      {
        std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
        v69 = std::locale::use_facet((const std::locale *)&v93, MEMORY[0x24BEDB350]);
        v68 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v69->__vftable[2].~facet_0)(v69, 32);
        std::locale::~locale((std::locale *)&v93);
        *((_DWORD *)v65 + 36) = v68;
        if (!v66)
          goto LABEL_32;
      }
      else if (!v66)
      {
        goto LABEL_32;
      }
      v70 = *((_QWORD *)v65 + 3);
      v47 = v70 <= 1;
      v71 = v70 - 1;
      if (v47)
        v72 = 0;
      else
        v72 = v71;
      if ((char *)v67 - (char *)&v86 >= 1
        && (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v66 + 96))(v66, &v86, (char *)v67 - (char *)&v86) != (char *)v67 - (char *)&v86)
      {
        goto LABEL_32;
      }
      if ((uint64_t)v72 >= 1)
      {
        if (v72 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_133;
        if (v72 >= 0x17)
        {
          v74 = (v72 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v72 | 7) != 0x17)
            v74 = v72 | 7;
          v75 = v74 + 1;
          v73 = operator new(v74 + 1);
          v93.__r_.__value_.__l.__size_ = v72;
          v93.__r_.__value_.__r.__words[2] = v75 | 0x8000000000000000;
          v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v73;
        }
        else
        {
          *((_BYTE *)&v93.__r_.__value_.__s + 23) = v72;
          v73 = &v93;
        }
        memset(v73, v68, v72);
        *((_BYTE *)v73 + v72) = 0;
        if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v76 = &v93;
        else
          v76 = (std::string *)v93.__r_.__value_.__r.__words[0];
        v77 = (*(uint64_t (**)(uint64_t, std::string *, std::string::size_type))(*(_QWORD *)v66 + 96))(v66, v76, v72);
        v78 = v77;
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v93.__r_.__value_.__l.__data_);
          if (v78 != v72)
            goto LABEL_32;
        }
        else if (v77 != v72)
        {
          goto LABEL_32;
        }
      }
      if ((char *)&v86 + 1 - (char *)v67 >= 1
        && (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v66 + 96))(v66, v67, (char *)&v86 + 1 - (char *)v67) != (char *)&v86 + 1 - (char *)v67)
      {
LABEL_32:
        std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
        goto LABEL_33;
      }
      *((_QWORD *)v65 + 3) = 0;
    }
LABEL_33:
    MEMORY[0x20BD2CE40](&__b);
    ++v24;
  }
  if (v25 != 0.0)
  {
    *((_QWORD *)v27 + 3) = v85;
    *(_DWORD *)((char *)v84 + *(_QWORD *)(v26 - 24)) |= 0x400u;
    v37 = *(_QWORD *)(v26 - 24);
    v38 = a1 + 2;
    v39 = v83;
    goto LABEL_52;
  }
  v40 = (char *)HIBYTE(v91);
  v41 = (char *)__p[1];
  if (v91 >= 0)
    v42 = __p;
  else
    v42 = (void **)__p[0];
  MEMORY[0x20BD2CE34](&__b, a1, v23);
  if (__b.__r_.__value_.__s.__data_[0])
  {
    if ((char)v40 >= 0)
      v43 = v40;
    else
      v43 = v41;
    v32 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v33 = *((_QWORD *)v32 + 5);
    v34 = &v43[(_QWORD)v42];
    if ((*((_DWORD *)v32 + 2) & 0xB0) == 0x20)
      v35 = (void **)&v43[(_QWORD)v42];
    else
      v35 = v42;
    v36 = *((_DWORD *)v32 + 36);
    if (v36 != -1)
    {
      if (!v33)
        goto LABEL_96;
LABEL_75:
      v55 = *((_QWORD *)v32 + 3);
      v47 = v55 <= (uint64_t)v43;
      v56 = v55 - (_QWORD)v43;
      if (v47)
        v49 = 0;
      else
        v49 = v56;
      v57 = (char *)v35 - (char *)v42;
      if ((char *)v35 - (char *)v42 >= 1)
      {
        v58 = v35;
        v59 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v33 + 96))(v33, v42, v57);
        v35 = v58;
        if (v59 != v57)
          goto LABEL_96;
      }
LABEL_80:
      if ((uint64_t)v49 < 1)
        goto LABEL_94;
      if (v49 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_133;
      v81 = v35;
      if (v49 >= 0x17)
      {
        v61 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v49 | 7) != 0x17)
          v61 = v49 | 7;
        v62 = v61 + 1;
        v60 = operator new(v61 + 1);
        v93.__r_.__value_.__l.__size_ = v49;
        v93.__r_.__value_.__r.__words[2] = v62 | 0x8000000000000000;
        v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v60;
      }
      else
      {
        *((_BYTE *)&v93.__r_.__value_.__s + 23) = v49;
        v60 = &v93;
      }
      memset(v60, v36, v49);
      *((_BYTE *)v60 + v49) = 0;
      if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v63 = &v93;
      else
        v63 = (std::string *)v93.__r_.__value_.__r.__words[0];
      v64 = (*(uint64_t (**)(uint64_t, std::string *, std::string::size_type))(*(_QWORD *)v33 + 96))(v33, v63, v49);
      if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v93.__r_.__value_.__l.__data_);
      v35 = v81;
      if (v64 == v49)
      {
LABEL_94:
        if (v34 - (char *)v35 < 1
          || (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 96))(v33) == v34 - (char *)v35)
        {
          *((_QWORD *)v32 + 3) = 0;
          goto LABEL_97;
        }
      }
      goto LABEL_96;
    }
    v53 = v35;
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v54 = std::locale::use_facet((const std::locale *)&v93, MEMORY[0x24BEDB350]);
    v36 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v54->__vftable[2].~facet_0)(v54, 32);
    std::locale::~locale((std::locale *)&v93);
    v35 = v53;
    *((_DWORD *)v32 + 36) = v36;
    if (v33)
      goto LABEL_75;
LABEL_96:
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
LABEL_97:
  MEMORY[0x20BD2CE40](&__b);
  if (v24 != 3)
    goto LABEL_98;
LABEL_128:
  sub_20AB89270(a1, (uint64_t)"   ]", 4);
  *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8) = v80;
  if (SHIBYTE(v91) < 0)
    operator delete(__p[0]);
  return a1;
}

uint64_t sub_20ABB5EAC(std::string::size_type *a1, std::string *a2, uint64_t a3, char *a4)
{
  std::string::size_type v6;
  const char *v7;
  CFStringRef v8;
  const __CFString *v9;
  const __CFString *v10;
  char v11;
  _OWORD *v12;
  uint64_t i;
  int v14;
  std::__shared_weak_count *v15;
  CFStringRef v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  void *v52[2];
  int v53;
  CFTypeRef cf;
  char v55;
  std::string::size_type v56;
  std::__shared_weak_count *v57;

  cva::adp::io::PListSerializer::getPath(a1, a2, &v56);
  v6 = v56;
  if (!v56)
  {
    v14 = 0;
    v15 = v57;
    if (!v57)
      return a3 & v14;
    goto LABEL_23;
  }
  if (*(char *)(a3 + 23) >= 0)
    v7 = (const char *)a3;
  else
    v7 = *(const char **)a3;
  v8 = CFStringCreateWithCStringNoCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], v7, 0x8000100u, (CFAllocatorRef)*MEMORY[0x24BDBD258]);
  v9 = (const __CFString *)objc_msgSend(*(id *)v6, "objectForKey:", v8);
  v10 = v9;
  v11 = *(_BYTE *)(v6 + 8);
  cf = v9;
  v55 = v11;
  if (!v9)
  {
    v55 = 0;
    v16 = v8;
    goto LABEL_17;
  }
  CFRetain(v9);
  CFRelease(v8);
  if (!cva::ItemHandler::isVectorType(&cf))
  {
    v16 = v10;
LABEL_17:
    CFRelease(v16);
    v14 = 0;
    LODWORD(a3) = 1;
    v15 = v57;
    if (!v57)
      return a3 & v14;
    goto LABEL_23;
  }
  v52[0] = 0;
  v52[1] = 0;
  v53 = 0;
  sub_20ABB0B5C(&cf, (uint64_t)v52);
  v12 = v52[0];
  LODWORD(a3) = v53 == 256;
  if (v53 == 256 && v52[0] != a4)
  {
    if ((unint64_t)(a4 - (char *)v52[0]) > 0x1F)
    {
      v17 = *((_OWORD *)v52[0] + 1);
      *(_OWORD *)a4 = *(_OWORD *)v52[0];
      *((_OWORD *)a4 + 1) = v17;
      v18 = v12[3];
      *((_OWORD *)a4 + 2) = v12[2];
      *((_OWORD *)a4 + 3) = v18;
      v19 = v12[5];
      *((_OWORD *)a4 + 4) = v12[4];
      *((_OWORD *)a4 + 5) = v19;
      v20 = v12[7];
      *((_OWORD *)a4 + 6) = v12[6];
      *((_OWORD *)a4 + 7) = v20;
      v21 = v12[9];
      *((_OWORD *)a4 + 8) = v12[8];
      *((_OWORD *)a4 + 9) = v21;
      v22 = v12[11];
      *((_OWORD *)a4 + 10) = v12[10];
      *((_OWORD *)a4 + 11) = v22;
      v23 = v12[13];
      *((_OWORD *)a4 + 12) = v12[12];
      *((_OWORD *)a4 + 13) = v23;
      v24 = v12[15];
      *((_OWORD *)a4 + 14) = v12[14];
      *((_OWORD *)a4 + 15) = v24;
      v25 = v12[17];
      *((_OWORD *)a4 + 16) = v12[16];
      *((_OWORD *)a4 + 17) = v25;
      v26 = v12[19];
      *((_OWORD *)a4 + 18) = v12[18];
      *((_OWORD *)a4 + 19) = v26;
      v27 = v12[21];
      *((_OWORD *)a4 + 20) = v12[20];
      *((_OWORD *)a4 + 21) = v27;
      v28 = v12[23];
      *((_OWORD *)a4 + 22) = v12[22];
      *((_OWORD *)a4 + 23) = v28;
      v29 = v12[25];
      *((_OWORD *)a4 + 24) = v12[24];
      *((_OWORD *)a4 + 25) = v29;
      v30 = v12[27];
      *((_OWORD *)a4 + 26) = v12[26];
      *((_OWORD *)a4 + 27) = v30;
      v31 = v12[29];
      *((_OWORD *)a4 + 28) = v12[28];
      *((_OWORD *)a4 + 29) = v31;
      v32 = v12[31];
      *((_OWORD *)a4 + 30) = v12[30];
      *((_OWORD *)a4 + 31) = v32;
      v33 = v12[33];
      *((_OWORD *)a4 + 32) = v12[32];
      *((_OWORD *)a4 + 33) = v33;
      v34 = v12[35];
      *((_OWORD *)a4 + 34) = v12[34];
      *((_OWORD *)a4 + 35) = v34;
      v35 = v12[37];
      *((_OWORD *)a4 + 36) = v12[36];
      *((_OWORD *)a4 + 37) = v35;
      v36 = v12[39];
      *((_OWORD *)a4 + 38) = v12[38];
      *((_OWORD *)a4 + 39) = v36;
      v37 = v12[41];
      *((_OWORD *)a4 + 40) = v12[40];
      *((_OWORD *)a4 + 41) = v37;
      v38 = v12[43];
      *((_OWORD *)a4 + 42) = v12[42];
      *((_OWORD *)a4 + 43) = v38;
      v39 = v12[45];
      *((_OWORD *)a4 + 44) = v12[44];
      *((_OWORD *)a4 + 45) = v39;
      v40 = v12[47];
      *((_OWORD *)a4 + 46) = v12[46];
      *((_OWORD *)a4 + 47) = v40;
      v41 = v12[49];
      *((_OWORD *)a4 + 48) = v12[48];
      *((_OWORD *)a4 + 49) = v41;
      v42 = v12[51];
      *((_OWORD *)a4 + 50) = v12[50];
      *((_OWORD *)a4 + 51) = v42;
      v43 = v12[53];
      *((_OWORD *)a4 + 52) = v12[52];
      *((_OWORD *)a4 + 53) = v43;
      v44 = v12[55];
      *((_OWORD *)a4 + 54) = v12[54];
      *((_OWORD *)a4 + 55) = v44;
      v45 = v12[57];
      *((_OWORD *)a4 + 56) = v12[56];
      *((_OWORD *)a4 + 57) = v45;
      v46 = v12[59];
      *((_OWORD *)a4 + 58) = v12[58];
      *((_OWORD *)a4 + 59) = v46;
      v47 = v12[61];
      *((_OWORD *)a4 + 60) = v12[60];
      *((_OWORD *)a4 + 61) = v47;
      v48 = v12[63];
      *((_OWORD *)a4 + 62) = v12[62];
      *((_OWORD *)a4 + 63) = v48;
    }
    else
    {
      for (i = 0; i != 1024; i += 4)
        *(_DWORD *)&a4[i] = *(_DWORD *)((char *)v12 + i);
    }
  }
  free(v12);
  if (cf)
    CFRelease(cf);
  v14 = 1;
  v15 = v57;
  if (v57)
  {
LABEL_23:
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v50 = __ldaxr(p_shared_owners);
    while (__stlxr(v50 - 1, p_shared_owners));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return a3 & v14;
}

void sub_20ABB6140(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20ABB6154(std::string::size_type *a1, std::string *a2, CFStringRef a3, _DWORD *a4)
{
  std::string::size_type v6;
  const char *isa;
  const __CFString *v8;
  const __CFString *v9;
  char v10;
  _DWORD *v11;
  int v12;
  std::__shared_weak_count *v13;
  CFStringRef v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *v18[2];
  int v19;
  CFTypeRef cf;
  char v21;
  std::string::size_type v22;
  std::__shared_weak_count *v23;

  cva::adp::io::PListSerializer::getPath(a1, a2, &v22);
  v6 = v22;
  if (!v22)
  {
LABEL_17:
    v12 = 0;
    v13 = v23;
    if (!v23)
      return a3 & v12;
    goto LABEL_18;
  }
  if (SHIBYTE(a3->data) >= 0)
    isa = (const char *)a3;
  else
    isa = (const char *)a3->isa;
  a3 = CFStringCreateWithCStringNoCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], isa, 0x8000100u, (CFAllocatorRef)*MEMORY[0x24BDBD258]);
  v8 = (const __CFString *)objc_msgSend(*(id *)v6, "objectForKey:", a3);
  v9 = v8;
  v10 = *(_BYTE *)(v6 + 8);
  cf = v8;
  v21 = v10;
  if (!v8)
  {
    v21 = 0;
    v14 = a3;
LABEL_16:
    CFRelease(v14);
    goto LABEL_17;
  }
  CFRetain(v8);
  CFRelease(a3);
  if (!cva::ItemHandler::isVectorType(&cf))
  {
    v14 = v9;
    goto LABEL_16;
  }
  v18[0] = 0;
  v18[1] = 0;
  v19 = 0;
  sub_20ABB0B5C(&cf, (uint64_t)v18);
  v11 = v18[0];
  LODWORD(a3) = v19 == 2;
  if (v19 == 2 && v18[0] != a4)
  {
    *a4 = *(_DWORD *)v18[0];
    a4[1] = v11[1];
  }
  free(v11);
  if (cf)
    CFRelease(cf);
  v12 = 1;
  v13 = v23;
  if (v23)
  {
LABEL_18:
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return a3 & v12;
}

void sub_20ABB62BC(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_20ABB62D4()
{
  JUMPOUT(0x20BD2D02CLL);
}

uint64_t sub_20ABB62E8()
{
  return 2;
}

uint64_t sub_20ABB62F0(uint64_t a1)
{
  return a1 + 48;
}

__n128 sub_20ABB62F8@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __n128 result;

  v4 = operator new();
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v4 = &off_24C37FD00;
  *(_QWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 20) = *(_QWORD *)(a1 + 20);
  *(_QWORD *)(v4 + 25) = *(_QWORD *)(a1 + 25);
  *(_QWORD *)(v4 + 36) = *(_QWORD *)(a1 + 36);
  *(_BYTE *)(v4 + 44) = *(_BYTE *)(a1 + 44);
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(a1 + 48);
  *(_QWORD *)(v4 + 64) = *(_QWORD *)(a1 + 64);
  result = *(__n128 *)(a1 + 72);
  *(__n128 *)(v4 + 72) = result;
  *(_DWORD *)(v4 + 88) = *(_DWORD *)(a1 + 88);
  *(_BYTE *)(v4 + 92) = *(_BYTE *)(a1 + 92);
  *(_DWORD *)(v4 + 96) = *(_DWORD *)(a1 + 96);
  *a2 = v4;
  return result;
}

_BYTE *sub_20ABB639C(_BYTE *result, char a2)
{
  result[24] = a2;
  result[32] = a2;
  result[44] = a2;
  result[92] = a2;
  return result;
}

uint64_t sub_20ABB63B0(uint64_t a1, float32x2_t *a2, _QWORD *a3, double a4, double a5, double a6, int32x4_t a7)
{
  float v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float v12;
  float32x2_t v18;
  float32x2_t v19;
  float32x4_t v20;

  v7 = a2[1].f32[0];
  if (v7 < 0.001)
    return 0;
  v8 = vmul_n_f32(*a2, 1.0 / v7);
  v9 = vmul_f32(v8, v8);
  v10 = vadd_f32(v9, (float32x2_t)vdup_lane_s32((int32x2_t)v9, 1));
  v11 = vmul_f32(v10, v10);
  v12 = vmlas_n_f32((float)(*(float *)(a1 + 76) * v11.f32[0]) + (float)(*(float *)(a1 + 72) * vaddv_f32(v9)), *(float *)(a1 + 88), vmul_f32(v10, v11).f32[0])+ 1.0;
  v10.i32[0] = 0x40000000;
  v10.i32[1] = v8.i32[0];
  __asm { FMOV            V6.2S, #3.0 }
  v18 = vmla_n_f32(vmla_f32(vmul_lane_f32(vmul_f32((float32x2_t)__PAIR64__(2.0, v8.u32[0]), vmul_f32(v10, *(float32x2_t *)(a1 + 80))), v8, 1), vmla_f32((float32x2_t)vrev64_s32((int32x2_t)v9), _D6, v9), (float32x2_t)vrev64_s32(*(int32x2_t *)(a1 + 80))), v8, v12);
  v19.f32[0] = *(float *)(a1 + 20) * *(float *)(a1 + 28);
  v19.i32[1] = *(_DWORD *)(a1 + 20);
  *(float32x2_t *)a7.i8 = vmla_f32(*(float32x2_t *)(a1 + 36), v18, v19);
  v20 = (float32x4_t)vzip1q_s32(a7, a7);
  *a3 = a7.i64[0];
  return vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vtrn2_s16(vrev32_s16(vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgtq_f32(*(float32x4_t *)(a1 + 48), v20)))), vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32(v20, *(float32x4_t *)(a1 + 48))))), 0xFuLL))) & 1;
}

uint64_t sub_20ABB64A8(uint64_t a1, unint64_t *a2, float32x2_t *a3, double a4, double a5, double a6, double a7, double a8, int32x4_t a9)
{
  BOOL v9;
  float32x4_t v10;
  float v11;
  float v12;
  float32x2_t v14;
  unint64_t v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float32x2_t v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;

  v9 = 0;
  a9.i64[0] = *a2;
  v10 = (float32x4_t)vzip1q_s32(a9, a9);
  if ((vmaxv_u16((uint16x4_t)vtrn2_s16(vrev32_s16(vmovn_s32(vcgtq_f32(*(float32x4_t *)(a1 + 48), v10))), vmovn_s32(vcgeq_f32(v10, *(float32x4_t *)(a1 + 48))))) & 1) != 0)return v9;
  v11 = *(float *)(a1 + 20);
  v12 = *(float *)(a1 + 28);
  if (v11 < 0.000000014901 || v12 < 0.000000014901)
    return v9;
  v14.f32[0] = v11 * v12;
  v15 = *(unsigned int *)(a1 + 96);
  v16 = *(float *)(a1 + 72);
  v17 = *(float *)(a1 + 76);
  v18 = *(float *)(a1 + 80);
  v19 = *(float *)(a1 + 84);
  v20 = *(float *)(a1 + 88);
  v14.i32[1] = *(_DWORD *)(a1 + 20);
  v21 = vdiv_f32(vsub_f32(*(float32x2_t *)a9.i8, *(float32x2_t *)(a1 + 36)), v14);
  *a3 = v21;
  if ((_DWORD)v15)
  {
    v9 = 0;
    v22 = 0;
    v24 = v21.f32[1];
    v23 = v21.f32[0];
    do
    {
      v25 = v24 * v24;
      v26 = (float)(v23 * v23) + (float)(v24 * v24);
      v27 = (float)((float)((float)(v16 * v26) + 1.0) + (float)(v17 * (float)(v26 * v26)))
          + (float)(v20 * (float)(v26 * (float)(v26 * v26)));
      if (v27 == 0.0)
        break;
      v28 = v23 * v24;
      v23 = (float)(v21.f32[0]
                  - (float)((float)(v19 * (float)(v26 + (float)((float)(v23 * v23) * 2.0)))
                          + (float)((float)(v18 + v18) * v28)))
          / v27;
      v24 = (float)(v21.f32[1]
                  - (float)((float)((float)(v19 + v19) * v28) + (float)(v18 * (float)(v26 + (float)(v25 * 2.0)))))
          / v27;
      a3->f32[0] = v23;
      a3->f32[1] = v24;
      v9 = ++v22 >= v15;
    }
    while (v15 != v22);
    return v9;
  }
  return 1;
}

uint64_t *sub_20ABB65C8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  const char *v5;
  size_t v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  _QWORD *v11;
  char *v12;
  int v13;
  int64_t v14;
  size_t v15;
  size_t v16;
  double v17;
  size_t v18;
  double v19;
  std::string *p_b;
  uint64_t v21;
  uint64_t v22;
  std::string *v23;
  std::string::size_type v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  const std::string::value_type *v28;
  std::string::size_type v29;
  std::string *v30;
  std::string::size_type v31;
  __n128 v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  void **v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  void **v44;
  int v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  void **v51;
  char *v52;
  void **v53;
  const std::locale::facet *v54;
  uint64_t v55;
  BOOL v56;
  std::string::size_type v57;
  std::string::size_type v58;
  int64_t v59;
  void **v60;
  uint64_t v61;
  void **v62;
  const std::locale::facet *v63;
  uint64_t v64;
  std::string::size_type v65;
  int64_t v66;
  void **v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  std::string *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  void **v76;
  int v77;
  const std::locale::facet *v78;
  uint64_t v79;
  std::string::size_type v80;
  std::string::size_type v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  std::string *v85;
  uint64_t v86;
  uint64_t v87;
  int v89;
  char *v90;
  void **v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  void *__dst[2];
  unsigned __int8 v97;
  void *v98;
  std::string::size_type v99;
  int64_t v100;
  std::string __b;
  void *__p[2];
  uint64_t v103;
  __int128 v104;
  int v105;
  std::string v106;

  v4 = a1 + 20;
  sub_20ABB51F8((__n128 *)(a1 + 48), a2);
  sub_20ABB5298(v4, a2);
  sub_20ABB53C4(a1 + 28, a2);
  sub_20ABB54F0(a1 + 36, a2);
  if (*(_BYTE *)(a1 + 92))
    v5 = "[FREE]";
  else
    v5 = "[FIXED]";
  if (*(_BYTE *)(a1 + 92))
    v6 = 6;
  else
    v6 = 7;
  v97 = v6;
  memcpy(__dst, v5, v6);
  *(_BYTE *)((unint64_t)__dst | v6) = 0;
  if ((v97 & 0x80u) == 0)
    v7 = __dst;
  else
    v7 = (void **)__dst[0];
  if ((v97 & 0x80u) == 0)
    v8 = v97;
  else
    v8 = (uint64_t)__dst[1];
  v9 = sub_20AB89270(a2, (uint64_t)v7, v8);
  sub_20AB89270(v9, (uint64_t)"[", 1);
  v10 = (char *)operator new(0x28uLL);
  strcpy(v10, "Heikkila Distortion Coefficients");
  v11 = sub_20AB89270(a2, (uint64_t)v10, 32);
  sub_20AB89270(v11, (uint64_t)"] : ", 4);
  v104 = *(_OWORD *)(a1 + 72);
  v105 = *(_DWORD *)(a1 + 88);
  v12 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  v13 = *((_DWORD *)v12 + 2);
  v15 = *((_QWORD *)v12 + 2);
  v14 = *((_QWORD *)v12 + 3);
  if (v14)
  {
    if (v14 <= (uint64_t)(v15 + 2))
      v14 = v15 + 2;
    v16 = v14 + ~v15;
    v17 = __exp10((double)-(uint64_t)v15);
    v18 = v16 - 1;
    if (v16 - 1 > 0x7FFFFFFFFFFFFFF7)
LABEL_147:
      abort();
    v19 = v17;
    if (v18 >= 0x17)
    {
      v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v18 | 7) != 0x17)
        v21 = v18 | 7;
      v22 = v21 + 1;
      p_b = (std::string *)operator new(v21 + 1);
      __b.__r_.__value_.__l.__size_ = v16 - 1;
      __b.__r_.__value_.__r.__words[2] = v22 | 0x8000000000000000;
      __b.__r_.__value_.__r.__words[0] = (std::string::size_type)p_b;
    }
    else
    {
      *((_BYTE *)&__b.__r_.__value_.__s + 23) = v16 - 1;
      p_b = &__b;
      if (v16 == 1)
      {
        LODWORD(v16) = 1;
        goto LABEL_25;
      }
    }
  }
  else
  {
    v19 = __exp10((double)-(uint64_t)v15);
    v18 = 3;
    *((_BYTE *)&__b.__r_.__value_.__s + 23) = 3;
    p_b = &__b;
    LODWORD(v16) = 4;
  }
  memset(p_b, 32, v18);
LABEL_25:
  p_b->__r_.__value_.__s.__data_[v18] = 0;
  v23 = std::string::append(&__b, "0 ");
  v24 = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v106.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v106.__r_.__value_.__r.__words[2] = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (v15 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_147;
  if (v15 >= 0x17)
  {
    v26 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v26 = v15 | 7;
    v27 = v26 + 1;
    v25 = operator new(v26 + 1);
    v99 = v15;
    v100 = v27 | 0x8000000000000000;
    v98 = v25;
    goto LABEL_32;
  }
  HIBYTE(v100) = v15;
  v25 = &v98;
  if (v15)
LABEL_32:
    memset(v25, 32, v15);
  *((_BYTE *)v25 + v15) = 0;
  if (v100 >= 0)
    v28 = (const std::string::value_type *)&v98;
  else
    v28 = (const std::string::value_type *)v98;
  if (v100 >= 0)
    v29 = HIBYTE(v100);
  else
    v29 = v99;
  v30 = std::string::append(&v106, v28, v29);
  v31 = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v103 = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v100) < 0)
  {
    operator delete(v98);
    if ((SHIBYTE(v106.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_41;
LABEL_146:
    operator delete(v106.__r_.__value_.__l.__data_);
    goto LABEL_41;
  }
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_146;
LABEL_41:
  v89 = v13;
  v90 = v10;
  if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__b.__r_.__value_.__l.__data_);
  *(uint64_t *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 24) = 0;
  v106.__r_.__value_.__s.__data_[0] = 91;
  sub_20AB89270(a2, (uint64_t)&v106, 1);
  v33 = 0;
  v94 = a2 + 1;
  v95 = (int)v16 + (int)v15 + 1;
  v92 = (int)v15;
  v93 = (int)v15 - 3;
  while (1)
  {
    v34 = *(float *)((char *)&v104 + v33);
    v32.n128_f64[0] = v34;
    v35 = *a2;
    v36 = (char *)a2 + *(_QWORD *)(*a2 - 24);
    if ((v36[9] & 1) != 0)
      break;
    if (fabs(v32.n128_f64[0]) < v19)
    {
      v37 = (char *)HIBYTE(v103);
      v38 = (char *)__p[1];
      if (v103 >= 0)
        v39 = __p;
      else
        v39 = (void **)__p[0];
      MEMORY[0x20BD2CE34](&__b, a2);
      if (__b.__r_.__value_.__s.__data_[0])
      {
        if ((char)v37 >= 0)
          v40 = v37;
        else
          v40 = v38;
        v41 = (char *)a2 + *(_QWORD *)(*a2 - 24);
        v42 = *((_QWORD *)v41 + 5);
        v43 = &v40[(_QWORD)v39];
        if ((*((_DWORD *)v41 + 2) & 0xB0) == 0x20)
          v44 = (void **)&v40[(_QWORD)v39];
        else
          v44 = v39;
        v45 = *((_DWORD *)v41 + 36);
        if (v45 == -1)
        {
          v53 = v44;
          std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
          v54 = std::locale::use_facet((const std::locale *)&v106, MEMORY[0x24BEDB350]);
          v45 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v54->__vftable[2].~facet_0)(v54, 32);
          std::locale::~locale((std::locale *)&v106);
          v44 = v53;
          *((_DWORD *)v41 + 36) = v45;
          if (!v42)
            goto LABEL_108;
        }
        else if (!v42)
        {
          goto LABEL_108;
        }
        v55 = *((_QWORD *)v41 + 3);
        v56 = v55 <= (uint64_t)v40;
        v57 = v55 - (_QWORD)v40;
        if (v56)
          v58 = 0;
        else
          v58 = v57;
        v59 = (char *)v44 - (char *)v39;
        if ((char *)v44 - (char *)v39 >= 1)
        {
          v60 = v44;
          v61 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v42 + 96))(v42, v39, v59);
          v44 = v60;
          if (v61 != v59)
            goto LABEL_108;
        }
        goto LABEL_92;
      }
      goto LABEL_109;
    }
    *((_QWORD *)v36 + 3) = v95;
    *(_DWORD *)((char *)v94 + *(_QWORD *)(v35 - 24)) = *(_DWORD *)((_BYTE *)v94 + *(_QWORD *)(v35 - 24)) & 0xFFFFFEFB | 4;
    *(_DWORD *)((char *)v94 + *(_QWORD *)(v35 - 24)) |= 0x400u;
    v46 = *(_QWORD *)(v35 - 24);
    v47 = a2 + 2;
    v48 = v92;
LABEL_64:
    *(_QWORD *)((char *)v47 + v46) = v48;
    std::ostream::operator<<();
    if (v33 == 16)
      goto LABEL_140;
LABEL_110:
    LOBYTE(v98) = 44;
    MEMORY[0x20BD2CE34](&__b, a2);
    if (__b.__r_.__value_.__s.__data_[0])
    {
      v74 = (char *)a2 + *(_QWORD *)(*a2 - 24);
      v75 = *((_QWORD *)v74 + 5);
      if ((*((_DWORD *)v74 + 2) & 0xB0) == 0x20)
        v76 = (void **)((char *)&v98 + 1);
      else
        v76 = &v98;
      v77 = *((_DWORD *)v74 + 36);
      if (v77 == -1)
      {
        std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
        v78 = std::locale::use_facet((const std::locale *)&v106, MEMORY[0x24BEDB350]);
        v77 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v78->__vftable[2].~facet_0)(v78, 32);
        std::locale::~locale((std::locale *)&v106);
        *((_DWORD *)v74 + 36) = v77;
        if (!v75)
          goto LABEL_44;
      }
      else if (!v75)
      {
        goto LABEL_44;
      }
      v79 = *((_QWORD *)v74 + 3);
      v56 = v79 <= 1;
      v80 = v79 - 1;
      if (v56)
        v81 = 0;
      else
        v81 = v80;
      if ((char *)v76 - (char *)&v98 >= 1
        && (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v75 + 96))(v75, &v98, (char *)v76 - (char *)&v98) != (char *)v76 - (char *)&v98)
      {
        goto LABEL_44;
      }
      if ((uint64_t)v81 >= 1)
      {
        if (v81 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_147;
        if (v81 >= 0x17)
        {
          v83 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v81 | 7) != 0x17)
            v83 = v81 | 7;
          v84 = v83 + 1;
          v82 = operator new(v83 + 1);
          v106.__r_.__value_.__l.__size_ = v81;
          v106.__r_.__value_.__r.__words[2] = v84 | 0x8000000000000000;
          v106.__r_.__value_.__r.__words[0] = (std::string::size_type)v82;
        }
        else
        {
          *((_BYTE *)&v106.__r_.__value_.__s + 23) = v81;
          v82 = &v106;
        }
        memset(v82, v77, v81);
        *((_BYTE *)v82 + v81) = 0;
        if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v85 = &v106;
        else
          v85 = (std::string *)v106.__r_.__value_.__r.__words[0];
        v86 = (*(uint64_t (**)(uint64_t, std::string *, std::string::size_type))(*(_QWORD *)v75 + 96))(v75, v85, v81);
        v87 = v86;
        if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v106.__r_.__value_.__l.__data_);
          if (v87 != v81)
            goto LABEL_44;
        }
        else if (v86 != v81)
        {
          goto LABEL_44;
        }
      }
      if ((char *)&v98 + 1 - (char *)v76 >= 1
        && (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v75 + 96))(v75, v76, (char *)&v98 + 1 - (char *)v76) != (char *)&v98 + 1 - (char *)v76)
      {
LABEL_44:
        std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 5);
        goto LABEL_45;
      }
      *((_QWORD *)v74 + 3) = 0;
    }
LABEL_45:
    MEMORY[0x20BD2CE40](&__b);
    v33 += 4;
  }
  if (v34 != 0.0)
  {
    *((_QWORD *)v36 + 3) = v95;
    *(_DWORD *)((char *)v94 + *(_QWORD *)(v35 - 24)) |= 0x400u;
    v46 = *(_QWORD *)(v35 - 24);
    v47 = a2 + 2;
    v48 = v93;
    goto LABEL_64;
  }
  v49 = (char *)HIBYTE(v103);
  v50 = (char *)__p[1];
  if (v103 >= 0)
    v51 = __p;
  else
    v51 = (void **)__p[0];
  MEMORY[0x20BD2CE34](&__b, a2, v32);
  if (__b.__r_.__value_.__s.__data_[0])
  {
    if ((char)v49 >= 0)
      v52 = v49;
    else
      v52 = v50;
    v41 = (char *)a2 + *(_QWORD *)(*a2 - 24);
    v42 = *((_QWORD *)v41 + 5);
    v43 = &v52[(_QWORD)v51];
    if ((*((_DWORD *)v41 + 2) & 0xB0) == 0x20)
      v44 = (void **)&v52[(_QWORD)v51];
    else
      v44 = v51;
    v45 = *((_DWORD *)v41 + 36);
    if (v45 != -1)
    {
      if (!v42)
        goto LABEL_108;
LABEL_87:
      v64 = *((_QWORD *)v41 + 3);
      v56 = v64 <= (uint64_t)v52;
      v65 = v64 - (_QWORD)v52;
      if (v56)
        v58 = 0;
      else
        v58 = v65;
      v66 = (char *)v44 - (char *)v51;
      if ((char *)v44 - (char *)v51 >= 1)
      {
        v67 = v44;
        v68 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v42 + 96))(v42, v51, v66);
        v44 = v67;
        if (v68 != v66)
          goto LABEL_108;
      }
LABEL_92:
      if ((uint64_t)v58 < 1)
        goto LABEL_106;
      if (v58 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_147;
      v91 = v44;
      if (v58 >= 0x17)
      {
        v70 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v58 | 7) != 0x17)
          v70 = v58 | 7;
        v71 = v70 + 1;
        v69 = operator new(v70 + 1);
        v106.__r_.__value_.__l.__size_ = v58;
        v106.__r_.__value_.__r.__words[2] = v71 | 0x8000000000000000;
        v106.__r_.__value_.__r.__words[0] = (std::string::size_type)v69;
      }
      else
      {
        *((_BYTE *)&v106.__r_.__value_.__s + 23) = v58;
        v69 = &v106;
      }
      memset(v69, v45, v58);
      *((_BYTE *)v69 + v58) = 0;
      if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v72 = &v106;
      else
        v72 = (std::string *)v106.__r_.__value_.__r.__words[0];
      v73 = (*(uint64_t (**)(uint64_t, std::string *, std::string::size_type))(*(_QWORD *)v42 + 96))(v42, v72, v58);
      if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v106.__r_.__value_.__l.__data_);
      v44 = v91;
      if (v73 == v58)
      {
LABEL_106:
        if (v43 - (char *)v44 < 1
          || (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 96))(v42) == v43 - (char *)v44)
        {
          *((_QWORD *)v41 + 3) = 0;
          goto LABEL_109;
        }
      }
      goto LABEL_108;
    }
    v62 = v44;
    std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
    v63 = std::locale::use_facet((const std::locale *)&v106, MEMORY[0x24BEDB350]);
    v45 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v63->__vftable[2].~facet_0)(v63, 32);
    std::locale::~locale((std::locale *)&v106);
    v44 = v62;
    *((_DWORD *)v41 + 36) = v45;
    if (v42)
      goto LABEL_87;
LABEL_108:
    std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 5);
  }
LABEL_109:
  MEMORY[0x20BD2CE40](&__b);
  if (v33 != 16)
    goto LABEL_110;
LABEL_140:
  sub_20AB89270(a2, (uint64_t)"   ]", 4);
  *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 8) = v89;
  if (SHIBYTE(v103) < 0)
    operator delete(__p[0]);
  sub_20AB89270(a2, (uint64_t)"\n", 1);
  operator delete(v90);
  if ((char)v97 < 0)
    operator delete(__dst[0]);
  return a2;
}

BOOL sub_20ABB6F7C(uint64_t a1, uint64_t a2, float a3)
{
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;
  float v11;
  float32x2_t v12;
  float v13;
  float32x2_t v14;
  float32x2_t v15;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) != 2)
    return 0;
  if ((float)(*(float *)(a1 + 20) - *(float *)(a2 + 20)) >= a3)
    return 0;
  if ((float)(*(float *)(a1 + 28) - *(float *)(a2 + 28)) >= a3)
    return 0;
  v6 = vsub_f32(*(float32x2_t *)(a1 + 36), *(float32x2_t *)(a2 + 36));
  if (sqrtf(vaddv_f32(vmul_f32(v6, v6))) >= a3)
    return 0;
  if (*(unsigned __int8 *)(a1 + 44) != *(unsigned __int8 *)(a2 + 44))
    return 0;
  v7 = vsub_f32(*(float32x2_t *)(a1 + 48), *(float32x2_t *)(a2 + 48));
  v8 = vmul_f32(v7, v7);
  v9 = vsub_f32(*(float32x2_t *)(a1 + 56), *(float32x2_t *)(a2 + 56));
  v10 = vmul_f32(v9, v9);
  if (sqrtf(vadd_f32(vadd_f32(vadd_f32(v8, (float32x2_t)vdup_lane_s32((int32x2_t)v8, 1)), v10), (float32x2_t)vdup_lane_s32((int32x2_t)v10, 1)).f32[0]) >= a3)return 0;
  if (*(_DWORD *)(a1 + 64) == *(_DWORD *)(a2 + 64)
    && *(_DWORD *)(a1 + 68) == *(_DWORD *)(a2 + 68)
    && (v11 = *(float *)(a1 + 80) - *(float *)(a2 + 80),
        v12 = vsub_f32(*(float32x2_t *)(a1 + 72), *(float32x2_t *)(a2 + 72)),
        v13 = vaddv_f32(vmul_f32(v12, v12)) + (float)(v11 * v11),
        v14 = vsub_f32(*(float32x2_t *)(a1 + 84), *(float32x2_t *)(a2 + 84)),
        v15 = vmul_f32(v14, v14),
        sqrtf((float)(v13 + v15.f32[0]) + v15.f32[1]) < a3))
  {
    return *(unsigned __int8 *)(a1 + 92) == *(unsigned __int8 *)(a2 + 92);
  }
  else
  {
    return 0;
  }
}

void sub_20ABB70DC()
{
  JUMPOUT(0x20BD2D02CLL);
}

uint64_t sub_20ABB70F0()
{
  return 1;
}

uint64_t sub_20ABB70F8(uint64_t a1)
{
  return a1 + 48;
}

__n128 sub_20ABB7100@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __n128 result;

  v4 = operator new();
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v4 = &off_24C37FC40;
  *(_QWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 20) = *(_QWORD *)(a1 + 20);
  *(_QWORD *)(v4 + 25) = *(_QWORD *)(a1 + 25);
  *(_QWORD *)(v4 + 36) = *(_QWORD *)(a1 + 36);
  *(_BYTE *)(v4 + 44) = *(_BYTE *)(a1 + 44);
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(a1 + 48);
  *(_QWORD *)(v4 + 64) = *(_QWORD *)(a1 + 64);
  result = *(__n128 *)(a1 + 72);
  *(__n128 *)(v4 + 72) = result;
  *(_BYTE *)(v4 + 88) = *(_BYTE *)(a1 + 88);
  *(_QWORD *)(v4 + 92) = *(_QWORD *)(a1 + 92);
  *(_DWORD *)(v4 + 100) = *(_DWORD *)(a1 + 100);
  *a2 = v4;
  return result;
}

_BYTE *sub_20ABB71A4(_BYTE *result, char a2)
{
  result[24] = a2;
  result[32] = a2;
  result[44] = a2;
  result[88] = a2;
  return result;
}

BOOL sub_20ABB71B8(uint64_t a1, float *a2, float *a3)
{
  float v3;
  float v6;
  float v7;
  float v8;
  float v9;
  int v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v24;
  float v25;
  float v26;
  _BOOL4 v27;

  v3 = a2[2];
  if (v3 < 0.00034527)
    return 0;
  v6 = *a2;
  v7 = a2[1];
  v8 = (float)(v7 * v7) + (float)(v6 * v6);
  if (v8 >= 0.00034527)
  {
    v10 = *(_DWORD *)(a1 + 96);
    v11 = *(float *)(a1 + 92);
    v13 = *(float *)(a1 + 72);
    v12 = *(float *)(a1 + 76);
    v15 = *(float *)(a1 + 80);
    v14 = *(float *)(a1 + 84);
    v16 = sqrtf(v8);
    v17 = atan2f(v16, v3);
    if (v17 <= v11)
    {
      v18 = v17 * (float)(v17 * v17);
      v19 = (float)(v17 * v17) * v18;
      v20 = (float)(v17 * v17) * v19;
      v21 = (float)(v17 * v17) * v20;
      if (v10 == 2)
      {
        v22 = tanf((float)((float)((float)(v17 + (float)(v13 * v18)) + (float)(v12 * v19)) + (float)(v15 * v20))+ (float)(v14 * v21));
      }
      else if (v10 == 1)
      {
        v22 = sinf((float)((float)((float)(v17 + (float)(v13 * v18)) + (float)(v12 * v19)) + (float)(v15 * v20))+ (float)(v14 * v21));
      }
      else
      {
        v9 = 0.0;
        if (v10)
          goto LABEL_13;
        v22 = (float)((float)((float)(v17 + (float)(v13 * v18)) + (float)(v12 * v19)) + (float)(v15 * v20))
            + (float)(v14 * v21);
      }
      v9 = v22 / v16;
      goto LABEL_13;
    }
    return 0;
  }
  v9 = 1.0 / v3;
LABEL_13:
  v24 = *(float *)(a1 + 20);
  v25 = *(float *)(a1 + 36) + (float)((float)(v24 * *(float *)(a1 + 28)) * (float)(v6 * v9));
  v26 = *(float *)(a1 + 40) + (float)(v24 * (float)(v7 * v9));
  *a3 = v25;
  a3[1] = v26;
  v27 = *(float *)(a1 + 48) <= v25;
  if (*(float *)(a1 + 52) <= v25)
    v27 = 0;
  if (*(float *)(a1 + 56) > v26)
    v27 = 0;
  return *(float *)(a1 + 60) > v26 && v27;
}

uint64_t sub_20ABB7324(uint64_t a1, unint64_t *a2, float32x2_t *a3, int32x4_t a4)
{
  uint64_t v4;
  float32x4_t v5;
  float v6;
  float v7;
  float v10;
  float32x2_t v11;
  float32x2_t v12;
  int v14;
  float v15;
  int v16;
  int v20;
  int v21;
  float32x4_t v22;
  float v30;
  float v31;
  float v32;
  float v33;
  unint64_t v34;
  float v35;
  float32x2_t v36;
  int32x2_t v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;

  v4 = 0;
  a4.i64[0] = *a2;
  v5 = (float32x4_t)vzip1q_s32(a4, a4);
  if ((vmaxv_u16((uint16x4_t)vtrn2_s16(vrev32_s16(vmovn_s32(vcgtq_f32(*(float32x4_t *)(a1 + 48), v5))), vmovn_s32(vcgeq_f32(v5, *(float32x4_t *)(a1 + 48))))) & 1) == 0)
  {
    v6 = *(float *)(a1 + 20);
    v7 = *(float *)(a1 + 28);
    if (v6 >= 0.000000014901 && v7 >= 0.000000014901)
    {
      v10 = v6 * v7;
      v12.i32[1] = *(_DWORD *)(a1 + 20);
      v11 = vdiv_f32(vsub_f32(*(float32x2_t *)a4.i8, *(float32x2_t *)(a1 + 36)), v12);
      v12.f32[0] = sqrtf(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v11, v11).i32[1]), v11.f32[0], v11.f32[0]));
      if (v12.f32[0] < 0.000000014901)
      {
LABEL_7:
        *a3 = v11;
        return 1;
      }
      if (v12.f32[0] > 3.4028e38)
        return 0;
      v36 = v11;
      v37 = (int32x2_t)v12;
      v14 = *(_DWORD *)(a1 + 100);
      v15 = *(float *)(a1 + 92) * 0.9;
      if (v15 > 1.0)
        v15 = 1.0;
      if (v14)
      {
        v16 = *(_DWORD *)(a1 + 96);
        _S12 = *(float *)(a1 + 76);
        _S13 = *(float *)(a1 + 80);
        _S14 = *(float *)(a1 + 84);
        v38 = *(float *)(a1 + 72) * 3.0;
        v20 = v14 - 1;
        while (1)
        {
          v21 = v20;
          v22.f32[0] = v15 * v15;
          v42 = v22.f32[0] * v22.f32[0];
          v43 = v15 * v15;
          v22.f32[1] = v22.f32[0] * v22.f32[0];
          v40 = (float)(v15 * v15) * (float)(v22.f32[0] * (float)(v22.f32[0] * v22.f32[0]));
          v41 = v22.f32[0] * (float)(v22.f32[0] * v22.f32[0]);
          v22.f32[2] = v41;
          v22.f32[3] = v40;
          _Q1 = vmulq_n_f32(v22, v15);
          v39 = v15;
          __asm
          {
            FMLA            S9, S12, V1.S[1]
            FMLA            S9, S13, V1.S[2]
            FMLA            S9, S14, V1.S[3]
          }
          v30 = cosf(_S9);
          if (v16 == 2)
          {
            v31 = tanf(_S9);
            v30 = 1.0 / (float)(v30 * v30);
          }
          else if (v16 == 1)
          {
            v31 = sinf(_S9);
          }
          else
          {
            v30 = 0.0;
            v31 = 0.0;
            if (!v16)
            {
              v30 = 1.0;
              v31 = _S9;
            }
          }
          v32 = (float)((float)((float)((float)((float)(v38 * v43) + 1.0) + (float)((float)(_S12 * 5.0) * v42))
                              + (float)((float)(_S13 * 7.0) * v41))
                      + (float)((float)(_S14 * 9.0) * v40))
              * v30;
          if (v32 == 0.0)
            return 0;
          v33 = (float)(v31 - *(float *)v37.i32) / v32;
          v34 = COERCE_UNSIGNED_INT(v39 - v33) | ((unint64_t)LODWORD(v33) << 32);
          v35 = v33;
          v15 = v39 - v33;
          if (fabsf(*((float *)&v34 + 1)) >= 0.0000011921)
          {
            v20 = v21 - 1;
            if (v21)
              continue;
          }
          goto LABEL_28;
        }
      }
      v35 = 3.4028e38;
LABEL_28:
      v4 = 0;
      if (fabsf(v35) <= 0.001 && v15 >= 0.0 && v15 <= 1.5708)
      {
        v11 = vdiv_f32(vmul_n_f32(v36, tanf(v15)), (float32x2_t)vdup_lane_s32(v37, 0));
        goto LABEL_7;
      }
    }
  }
  return v4;
}

_QWORD *sub_20ABB7610(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  const char *v5;
  size_t v6;
  __int128 *p_dst;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  __int128 __dst;
  char v19;

  v4 = a1 + 20;
  sub_20ABB51F8((__n128 *)(a1 + 48), a2);
  sub_20ABB5298(v4, a2);
  sub_20ABB53C4(a1 + 28, a2);
  sub_20ABB54F0(a1 + 36, a2);
  if (*(_BYTE *)(a1 + 88))
    v5 = "[FREE]";
  else
    v5 = "[FIXED]";
  if (*(_BYTE *)(a1 + 88))
    v6 = 6;
  else
    v6 = 7;
  v19 = v6;
  memcpy(&__dst, v5, v6);
  *(_BYTE *)((unint64_t)&__dst | v6) = 0;
  if (v19 >= 0)
    p_dst = &__dst;
  else
    p_dst = (__int128 *)__dst;
  if (v19 >= 0)
    v8 = v19;
  else
    v8 = *((_QWORD *)&__dst + 1);
  v9 = sub_20AB89270(a2, (uint64_t)p_dst, v8);
  sub_20AB89270(v9, (uint64_t)"[", 1);
  v10 = (char *)operator new(0x28uLL);
  strcpy(v10, "Kannala-4 Distortion Coefficients");
  v11 = sub_20AB89270(a2, (uint64_t)v10, 33);
  v12 = sub_20AB89270(v11, (uint64_t)"] : ", 4);
  v13 = sub_20ABB5618(v12, *(__n128 *)(a1 + 72));
  sub_20AB89270(v13, (uint64_t)"\n", 1);
  operator delete(v10);
  if (v19 < 0)
    operator delete((void *)__dst);
  v14 = sub_20AB89270(a2, (uint64_t)"[FIXED][", 8);
  v19 = 13;
  strcpy((char *)&__dst, "Field of View");
  v15 = sub_20AB89270(v14, (uint64_t)&__dst, 13);
  sub_20AB89270(v15, (uint64_t)"] : ", 4);
  v16 = (_QWORD *)std::ostream::operator<<();
  sub_20AB89270(v16, (uint64_t)"\n", 1);
  if (v19 < 0)
    operator delete((void *)__dst);
  return a2;
}

BOOL sub_20ABB77D4(uint64_t a1, uint64_t a2, float a3)
{
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) != 1)
    return 0;
  if ((float)(*(float *)(a1 + 20) - *(float *)(a2 + 20)) >= a3)
    return 0;
  if ((float)(*(float *)(a1 + 28) - *(float *)(a2 + 28)) >= a3)
    return 0;
  v6 = vsub_f32(*(float32x2_t *)(a1 + 36), *(float32x2_t *)(a2 + 36));
  if (sqrtf(vaddv_f32(vmul_f32(v6, v6))) >= a3)
    return 0;
  if (*(unsigned __int8 *)(a1 + 44) != *(unsigned __int8 *)(a2 + 44))
    return 0;
  v7 = vsub_f32(*(float32x2_t *)(a1 + 48), *(float32x2_t *)(a2 + 48));
  v8 = vmul_f32(v7, v7);
  v9 = vsub_f32(*(float32x2_t *)(a1 + 56), *(float32x2_t *)(a2 + 56));
  v10 = vmul_f32(v9, v9);
  if (sqrtf(vadd_f32(vadd_f32(vadd_f32(v8, (float32x2_t)vdup_lane_s32((int32x2_t)v8, 1)), v10), (float32x2_t)vdup_lane_s32((int32x2_t)v10, 1)).f32[0]) >= a3)return 0;
  if (*(_DWORD *)(a1 + 64) == *(_DWORD *)(a2 + 64)
    && *(_DWORD *)(a1 + 68) == *(_DWORD *)(a2 + 68)
    && (v11 = vsub_f32(*(float32x2_t *)(a1 + 72), *(float32x2_t *)(a2 + 72)),
        v12 = vmul_f32(v11, v11),
        v13 = vsub_f32(*(float32x2_t *)(a1 + 80), *(float32x2_t *)(a2 + 80)),
        v14 = vmul_f32(v13, v13),
        sqrtf(vadd_f32(vadd_f32(vadd_f32(v12, (float32x2_t)vdup_lane_s32((int32x2_t)v12, 1)), v14), (float32x2_t)vdup_lane_s32((int32x2_t)v14, 1)).f32[0]) < a3)&& *(unsigned __int8 *)(a1 + 88) == *(unsigned __int8 *)(a2 + 88)&& (float)(*(float *)(a1 + 92) - *(float *)(a2 + 92)) < a3)
  {
    return *(_DWORD *)(a1 + 96) == *(_DWORD *)(a2 + 96);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_20ABB793C(uint64_t **__s1, _DWORD *a2)
{
  size_t v4;
  uint64_t *v5;
  uint64_t *v6;
  char **v7;
  uint64_t v9;
  uint64_t v10;

  if (*((char *)__s1 + 23) < 0)
  {
    v5 = *__s1;
    v6 = __s1[1];
    if (v6 == (uint64_t *)12)
    {
      if (*v5 != 0x6874286E69732D66 || *((_DWORD *)v5 + 2) != 694252645)
      {
        v9 = *v5;
        v10 = *((unsigned int *)v5 + 2);
        if (v9 == 0x6874286E61742D66 && v10 == 694252645)
          goto LABEL_23;
        return 0;
      }
      goto LABEL_22;
    }
    if (v6 != (uint64_t *)8 || *v5 != 0x2961746568742866)
      return 0;
  }
  else
  {
    v4 = *((unsigned __int8 *)__s1 + 23);
    if (*((_BYTE *)__s1 + 23) != 8)
    {
      if ((_DWORD)v4 != 12)
        return 0;
      if (memcmp(__s1, "f-sin(theta)", v4))
      {
        if (!memcmp(__s1, "f-tan(theta)", v4))
        {
LABEL_23:
          v7 = &off_24C380730;
          goto LABEL_24;
        }
        return 0;
      }
LABEL_22:
      v7 = &off_24C380728;
      goto LABEL_24;
    }
    if (memcmp(__s1, "f(theta)", *((unsigned __int8 *)__s1 + 23)))
      return 0;
  }
  v7 = &cva::adp::io::detail::EnumDescription<cva::geo::eProjectionModelType,void>::names;
LABEL_24:
  *a2 = (unint64_t)((char *)v7
                         - (char *)&cva::adp::io::detail::EnumDescription<cva::geo::eProjectionModelType,void>::names) >> 3;
  return 1;
}

uint64_t sub_20ABB7A90(std::string::size_type *a1, std::string *a2, CFStringRef a3, _DWORD *a4)
{
  std::string::size_type v6;
  const char *isa;
  const __CFString *v8;
  const __CFString *v9;
  char v10;
  _DWORD *v11;
  int v12;
  std::__shared_weak_count *v13;
  CFStringRef v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *v18[2];
  int v19;
  CFTypeRef cf;
  char v21;
  std::string::size_type v22;
  std::__shared_weak_count *v23;

  cva::adp::io::PListSerializer::getPath(a1, a2, &v22);
  v6 = v22;
  if (!v22)
  {
LABEL_17:
    v12 = 0;
    v13 = v23;
    if (!v23)
      return a3 & v12;
    goto LABEL_18;
  }
  if (SHIBYTE(a3->data) >= 0)
    isa = (const char *)a3;
  else
    isa = (const char *)a3->isa;
  a3 = CFStringCreateWithCStringNoCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], isa, 0x8000100u, (CFAllocatorRef)*MEMORY[0x24BDBD258]);
  v8 = (const __CFString *)objc_msgSend(*(id *)v6, "objectForKey:", a3);
  v9 = v8;
  v10 = *(_BYTE *)(v6 + 8);
  cf = v8;
  v21 = v10;
  if (!v8)
  {
    v21 = 0;
    v14 = a3;
LABEL_16:
    CFRelease(v14);
    goto LABEL_17;
  }
  CFRetain(v8);
  CFRelease(a3);
  if (!cva::ItemHandler::isVectorType(&cf))
  {
    v14 = v9;
    goto LABEL_16;
  }
  v18[0] = 0;
  v18[1] = 0;
  v19 = 0;
  sub_20ABB0B5C(&cf, (uint64_t)v18);
  v11 = v18[0];
  LODWORD(a3) = v19 == 4;
  if (v19 == 4 && v18[0] != a4)
  {
    *a4 = *(_DWORD *)v18[0];
    a4[1] = v11[1];
    a4[2] = v11[2];
    a4[3] = v11[3];
  }
  free(v11);
  if (cf)
    CFRelease(cf);
  v12 = 1;
  v13 = v23;
  if (v23)
  {
LABEL_18:
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return a3 & v12;
}

void sub_20ABB7C08(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_20ABB7C20()
{
  JUMPOUT(0x20BD2D02CLL);
}

uint64_t sub_20ABB7C34()
{
  return 0;
}

uint64_t sub_20ABB7C3C(uint64_t a1)
{
  return a1 + 48;
}

__n128 sub_20ABB7C44@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __n128 result;

  v4 = operator new();
  v5 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(_QWORD *)v4 = &off_24C37FB80;
  *(_QWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 20) = *(_QWORD *)(a1 + 20);
  *(_QWORD *)(v4 + 25) = *(_QWORD *)(a1 + 25);
  *(_QWORD *)(v4 + 36) = *(_QWORD *)(a1 + 36);
  *(_BYTE *)(v4 + 44) = *(_BYTE *)(a1 + 44);
  result = *(__n128 *)(a1 + 48);
  *(__n128 *)(v4 + 48) = result;
  *(_QWORD *)(v4 + 64) = *(_QWORD *)(a1 + 64);
  *a2 = v4;
  return result;
}

_BYTE *sub_20ABB7CC8(_BYTE *result, char a2)
{
  result[24] = a2;
  result[32] = a2;
  result[44] = a2;
  return result;
}

uint64_t sub_20ABB7CD8(uint64_t a1, float32x2_t *a2, _QWORD *a3, double a4, double a5, double a6, int32x4_t a7)
{
  float v7;
  float32x2_t v8;
  float32x4_t v9;

  v7 = a2[1].f32[0];
  if (v7 < 0.001)
    return 0;
  v8.f32[0] = *(float *)(a1 + 20) * *(float *)(a1 + 28);
  v8.i32[1] = *(_DWORD *)(a1 + 20);
  *(float32x2_t *)a7.i8 = vmla_f32(*(float32x2_t *)(a1 + 36), vmul_n_f32(*a2, 1.0 / v7), v8);
  v9 = (float32x4_t)vzip1q_s32(a7, a7);
  *a3 = a7.i64[0];
  return vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vtrn2_s16(vrev32_s16(vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgtq_f32(*(float32x4_t *)(a1 + 48), v9)))), vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32(v9, *(float32x4_t *)(a1 + 48))))), 0xFuLL))) & 1;
}

BOOL sub_20ABB7D64(uint64_t a1, unint64_t *a2, float32x2_t *a3, double a4, int32x4_t a5)
{
  float v5;
  float v6;
  float32x4_t v7;
  char v8;
  float32x2_t v9;

  v5 = *(float *)(a1 + 20);
  v6 = *(float *)(a1 + 28);
  a5.i64[0] = *a2;
  v7 = (float32x4_t)vzip1q_s32(a5, a5);
  v8 = vmaxv_u16((uint16x4_t)vtrn2_s16(vrev32_s16(vmovn_s32(vcgtq_f32(*(float32x4_t *)(a1 + 48), v7))), vmovn_s32(vcgeq_f32(v7, *(float32x4_t *)(a1 + 48))))) | (v5 < 0.000000014901) | (v6 < 0.000000014901);
  if ((v8 & 1) == 0)
  {
    v9.f32[0] = v5 * v6;
    v9.i32[1] = *(_DWORD *)(a1 + 20);
    *a3 = vdiv_f32(vsub_f32(*(float32x2_t *)a5.i8, *(float32x2_t *)(a1 + 36)), v9);
  }
  return (v8 & 1) == 0;
}

_QWORD *sub_20ABB7DE0(__n128 *a1, _QWORD *a2)
{
  uint64_t v4;

  v4 = (uint64_t)a1[1].n128_i64 + 4;
  sub_20ABB51F8(a1 + 3, a2);
  sub_20ABB5298(v4, a2);
  sub_20ABB53C4((uint64_t)&a1[1].n128_i64[1] + 4, a2);
  return sub_20ABB54F0((uint64_t)a1[2].n128_i64 + 4, a2);
}

BOOL sub_20ABB7E34(uint64_t a1, uint64_t a2, float a3)
{
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;

  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2)
    && (float)(*(float *)(a1 + 20) - *(float *)(a2 + 20)) < a3
    && (float)(*(float *)(a1 + 28) - *(float *)(a2 + 28)) < a3
    && (v6 = vsub_f32(*(float32x2_t *)(a1 + 36), *(float32x2_t *)(a2 + 36)), sqrtf(vaddv_f32(vmul_f32(v6, v6))) < a3)
    && *(unsigned __int8 *)(a1 + 44) == *(unsigned __int8 *)(a2 + 44)
    && (v7 = vsub_f32(*(float32x2_t *)(a1 + 48), *(float32x2_t *)(a2 + 48)),
        v8 = vmul_f32(v7, v7),
        v9 = vsub_f32(*(float32x2_t *)(a1 + 56), *(float32x2_t *)(a2 + 56)),
        v10 = vmul_f32(v9, v9),
        sqrtf(vadd_f32(vadd_f32(vadd_f32(v8, (float32x2_t)vdup_lane_s32((int32x2_t)v8, 1)), v10), (float32x2_t)vdup_lane_s32((int32x2_t)v10, 1)).f32[0]) < a3)&& *(_DWORD *)(a1 + 64) == *(_DWORD *)(a2 + 64))
  {
    return *(_DWORD *)(a1 + 68) == *(_DWORD *)(a2 + 68);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_20ABB7F2C(std::string::size_type *a1, uint64_t a2, _QWORD *a3, _DWORD *a4)
{
  const std::string::value_type *p_p;
  std::string::size_type data_high;
  uint64_t v9;
  uint64_t v10;
  char *v12;
  int v13;
  char v14;
  std::string v15;
  __CFString __p;

  if (*(char *)(a2 + 23) < 0)
    sub_20AB88C14(&v15, *(void **)a2, *(_QWORD *)(a2 + 8));
  else
    v15 = *(std::string *)a2;
  cva::adp::PListPath::convertToPath(a3, (uint64_t)&__p);
  if (SHIBYTE(__p.data) >= 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = (const std::string::value_type *)__p.isa;
  if (SHIBYTE(__p.data) >= 0)
    data_high = HIBYTE(__p.data);
  else
    data_high = __p.info;
  std::string::append(&v15, p_p, data_high);
  if (SHIBYTE(__p.data) < 0)
    operator delete(__p.isa);
  HIBYTE(__p.data) = 4;
  strcpy((char *)&__p, "Data");
  v9 = sub_20ABB09E8(a1, &v15, &__p, a4);
  v10 = v9;
  if (SHIBYTE(__p.data) < 0)
  {
    operator delete(__p.isa);
    if (!(_DWORD)v10)
    {
LABEL_14:
      if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return v10;
LABEL_22:
      operator delete(v15.__r_.__value_.__l.__data_);
      return v10;
    }
  }
  else if (!(_DWORD)v9)
  {
    goto LABEL_14;
  }
  HIBYTE(__p.data) = 5;
  strcpy((char *)&__p, "Fixed");
  v12 = (char *)(a4 + 1);
  v13 = cva::adp::io::PListSerializer::getItem<BOOL>(a1, &v15, (uint64_t)&__p, v12);
  if (SHIBYTE(__p.data) < 0)
    operator delete(__p.isa);
  v14 = *v12 ^ 1;
  if (!v13)
    v14 = 1;
  *v12 = v14;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_22;
  return v10;
}

uint64_t_t cva::adp::Session<float>::loadImagePoint3TrackSet(_QWORD *a1, uint64_t **a2)
{
  const char **v3;
  const char *v4;
  std::string::size_type v5;
  uint64_t *v6;
  uint64_t v7;
  int8x8_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  int v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::string *v25;
  std::string::size_type v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  const char *v31;
  void **v32;
  std::string *v33;
  std::string *v34;
  _QWORD *v35;
  unsigned int v36;
  _QWORD *v37;
  uint64_t *v38;
  void *v39;
  BOOL v40;
  _QWORD *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  unint64_t v46;
  uint8x8_t v47;
  unint64_t v48;
  void **v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  void **v53;
  unint64_t v54;
  uint64_t v55;
  float v56;
  float v57;
  _BOOL8 v58;
  unint64_t v59;
  unint64_t v60;
  size_t prime;
  unint64_t v62;
  uint8x8_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint8x8_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t *v73;
  unint64_t v74;
  BOOL v75;
  _QWORD *v76;
  int8x8_t v77;
  unint64_t v78;
  uint8x8_t v79;
  unint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count *v88;
  unint64_t v89;
  unint64_t *p_shared_weak_owners;
  unint64_t v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t *v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t *v99;
  unint64_t *v100;
  unint64_t v101;
  int8x8_t v102;
  unint64_t v103;
  uint8x8_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t **v107;
  uint64_t **v108;
  unint64_t v109;
  uint64_t *v110;
  uint64_t *v111;
  uint64_t *v112;
  unint64_t v113;
  void *v114;
  void *v115;
  char *v116;
  char *v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t *v120;
  char *v121;
  unint64_t v122;
  char *v123;
  unint64_t *v124;
  unint64_t v125;
  uint64_t *v126;
  unint64_t v127;
  __int128 v128;
  unint64_t v129;
  uint8x8_t v130;
  _QWORD *v131;
  _QWORD *v132;
  unint64_t v133;
  char *v134;
  float v135;
  float v136;
  _BOOL8 v137;
  unint64_t v138;
  unint64_t v139;
  size_t v140;
  uint64_t v141;
  int8x8_t v142;
  unint64_t v143;
  uint8x8_t v144;
  uint64_t v145;
  unint64_t *v146;
  unint64_t v147;
  _QWORD *v148;
  _QWORD *v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  unint64_t v155;
  unint64_t *v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  unint64_t *v162;
  unint64_t v163;
  unint64_t *v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  _QWORD *v168;
  uint64_t *v169;
  _QWORD *v170;
  unint64_t v171;
  BOOL v172;
  _QWORD *v173;
  uint64_t *v174;
  unint64_t v175;
  BOOL v176;
  _QWORD *v177;
  uint64_t v178;
  _QWORD *v179;
  _QWORD *v180;
  uint64_t v181;
  char *v182;
  char *v183;
  _QWORD *v184;
  unint64_t v185;
  char *v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t *v189;
  char *v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t v193;
  char *v194;
  char *v195;
  unint64_t v196;
  unint64_t v197;
  char *v198;
  char *v199;
  unint64_t v200;
  int8x8_t v201;
  uint8x8_t v202;
  unint64_t v203;
  unint64_t v204;
  _QWORD *v205;
  unint64_t v206;
  int8x8_t v207;
  unint64_t v208;
  uint8x8_t v209;
  unint64_t v210;
  _QWORD *v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t *v216;
  unint64_t v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  uint64_t v221;
  __int128 v222;
  __int128 v223;
  char **v224;
  char *v225;
  char *v226;
  unint64_t v227;
  unint64_t v228;
  unint64_t *v229;
  char *v230;
  unint64_t v231;
  char *v232;
  _QWORD *v233;
  _QWORD *v234;
  unint64_t v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t v238;
  int8x8_t v239;
  uint8x8_t v240;
  unint64_t v241;
  uint64_t v242;
  _QWORD **v243;
  _QWORD *v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  _QWORD *v248;
  _QWORD *v249;
  unint64_t v250;
  unint64_t v251;
  uint64_t v252;
  unint64_t v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t *v259;
  uint64_t *v260;
  uint64_t *v261;
  uint64_t *v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  unint64_t *v266;
  unint64_t v267;
  uint64_t v268;
  unint64_t v269;
  uint8x8_t v270;
  unint64_t v271;
  _QWORD *v272;
  _QWORD *v273;
  unint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  char *v278;
  char *v279;
  unint64_t v280;
  unint64_t v281;
  unint64_t *v282;
  char *v283;
  unint64_t v284;
  char *v285;
  char *v286;
  uint64_t v287;
  std::__shared_weak_count *v288;
  std::__shared_weak_count *v289;
  unint64_t *v290;
  unint64_t v291;
  unint64_t *v292;
  unint64_t v293;
  void *v294;
  std::__shared_weak_count *v295;
  unint64_t *p_shared_owners;
  unint64_t v297;
  __int128 *v298;
  __int128 *v299;
  __int128 v300;
  __int128 v301;
  char *v302;
  char *v303;
  unint64_t v304;
  unint64_t v305;
  unint64_t *v306;
  char *v307;
  unint64_t v308;
  char *v309;
  char *v310;
  uint64_t v311;
  std::__shared_weak_count *v312;
  std::__shared_weak_count *v313;
  std::__shared_weak_count *v314;
  unint64_t *v315;
  unint64_t v316;
  void **v317;
  _QWORD *v318;
  void **v319;
  void *v320;
  __int128 *v321;
  uint64_t v322;
  uint64_t v323;
  __int128 v324;
  uint64_t_t v325;
  const std::string::value_type *v326;
  std::string::size_type v327;
  uint64_t v328;
  const char *v329;
  int v330;
  _QWORD *v331;
  _QWORD *v332;
  _OWORD *v333;
  uint64_t v334;
  char *v335;
  void *v336;
  char *v337;
  BOOL v338;
  std::string::size_type v339;
  uint64_t v340;
  uint64_t v341;
  _QWORD *v342;
  const char *v343;
  uint64_t v344;
  uint64_t v345;
  __int128 v346;
  std::string *p_p;
  std::string::size_type size;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  void **v353;
  std::string::size_type v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  void **v359;
  std::string::size_type v360;
  uint64_t v361;
  unint64_t v362;
  int v363;
  uint64_t_t v364;
  uint64_t v365;
  int v366;
  unsigned int v367;
  uint64_t v368;
  _QWORD *v369;
  uint64_t v370;
  unint64_t v371;
  uint64_t v372;
  unint64_t v373;
  float *v374;
  unint64_t v375;
  float *v376;
  float *v377;
  float v378;
  uint64_t v379;
  uint64_t v380;
  unint64_t v381;
  unint64_t v382;
  unint64_t v383;
  uint64_t v384;
  unint64_t v385;
  uint64_t v386;
  unint64_t v387;
  int v388;
  unint64_t *v389;
  unint64_t v390;
  uint64_t v391;
  unint64_t v392;
  unint64_t v393;
  char *v394;
  unint64_t v395;
  char *v396;
  char *v397;
  int64_t v398;
  uint64_t v399;
  unint64_t v400;
  unint64_t v401;
  uint64_t v402;
  char *v403;
  unint64_t v404;
  uint64_t v405;
  char *v406;
  unint64_t v407;
  uint64_t v408;
  int v409;
  char *v410;
  uint64_t i;
  uint64_t v412;
  void *v413;
  _QWORD *v414;
  _QWORD *v415;
  const char *v416;
  _QWORD *v418;
  uint64_t *v419;
  _QWORD *v420;
  _QWORD *v421;
  void *v422;
  BOOL v423;
  _QWORD *v424;
  uint64_t v425;
  std::__shared_weak_count *v426;
  unint64_t *v427;
  unint64_t v428;
  std::string::value_type v429;
  unint64_t *v430;
  unint64_t v431;
  _QWORD *v432;
  void *v433;
  std::__shared_weak_count *v434;
  _QWORD *v435;
  char *v436;
  uint64_t v437;
  uint64_t v438;
  int8x8_t *v439;
  int v440;
  std::string::size_type v441;
  _QWORD *v443;
  std::__shared_weak_count *v444;
  uint64_t_t v445;
  _QWORD *v446;
  __int128 v447;
  char *v448;
  uint64_t v449;
  unint64_t v450;
  uint64_t v451;
  uint64_t v452;
  void *v453[3];
  std::string v454;
  void *v455[2];
  void *v456[2];
  int v457;
  std::string __p;
  __int128 v459;
  __int128 v460;
  int v461;
  char v462;
  char v463;
  uint64_t v464;
  void **v465;
  void *v466[2];
  __int128 v467;
  unint64_t v468;
  unint64_t v469;
  int v470;
  uint64_t v471;
  stat v472;
  _QWORD v473[21];

  v473[19] = *MEMORY[0x24BDAC8D0];
  v3 = (const char **)(a1 + 13);
  sub_20ABBAC68(&v454, a1);
  *(_OWORD *)v455 = 0u;
  *(_OWORD *)v456 = 0u;
  v457 = 1065353216;
  if (!sub_20ABBADA4(v3, &v454, (uint64_t *)v455))
  {
    v440 = 0;
    v318 = v456[0];
    if (!v456[0])
      goto LABEL_663;
    goto LABEL_861;
  }
  v4 = *v3;
  if ((*v3)[23] < 0)
    v4 = *(const char **)v4;
  v440 = 0;
  if (stat(v4, &v472)
    || (v472.st_mode & 0xF000) != 0x4000
    || (v453[0] = 0,
        v468 = 0,
        v469 = 0,
        v5 = v454.__r_.__value_.__r.__words[0],
        v440 = 1,
        (std::string::size_type *)v454.__r_.__value_.__l.__data_ == &v454.__r_.__value_.__r.__words[1]))
  {
LABEL_662:
    v318 = v456[0];
    if (!v456[0])
      goto LABEL_663;
    goto LABEL_861;
  }
  v439 = (int8x8_t *)v3;
  v6 = (uint64_t *)(a2 + 1);
  v7 = (uint64_t)(a2 + 3);
  v437 = *MEMORY[0x24BEDB7E0];
  v438 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  v446 = a2 + 5;
  while (1)
  {
    v8 = *v439;
    v9 = operator new();
    v10 = v9;
    if (*(char *)(*(_QWORD *)&v8 + 23) < 0)
    {
      sub_20AB88C14((_BYTE *)v9, **(void ***)&v8, *(_QWORD *)(*(_QWORD *)&v8 + 8));
    }
    else
    {
      v11 = *(_OWORD *)*(_QWORD *)&v8;
      *(_QWORD *)(v9 + 16) = *(_QWORD *)(*(_QWORD *)&v8 + 16);
      *(_OWORD *)v9 = v11;
    }
    v12 = *(char *)(v5 + 63);
    v13 = v12 >= 0 ? (const std::string::value_type *)(v5 + 40) : *(const std::string::value_type **)(v5 + 40);
    v14 = v12 >= 0 ? *(unsigned __int8 *)(v5 + 63) : *(_QWORD *)(v5 + 48);
    std::string::append((std::string *)v10, v13, v14);
    v15 = operator new();
    v16 = v15;
    if (*(char *)(v10 + 23) < 0)
    {
      sub_20AB88C14((_BYTE *)v15, *(void **)v10, *(_QWORD *)(v10 + 8));
      if (*(char *)(v10 + 23) < 0)
        operator delete(*(void **)v10);
    }
    else
    {
      *(_OWORD *)v15 = *(_OWORD *)v10;
      *(_QWORD *)(v15 + 16) = *(_QWORD *)(v10 + 16);
    }
    MEMORY[0x20BD2D02C](v10, 0x1012C40EC159624);
    HIBYTE(v472.st_gid) = 1;
    LOWORD(v472.st_dev) = 47;
    v17 = operator new();
    v18 = v17;
    if (*(char *)(v16 + 23) < 0)
    {
      sub_20AB88C14((_BYTE *)v17, *(void **)v16, *(_QWORD *)(v16 + 8));
    }
    else
    {
      *(_OWORD *)v17 = *(_OWORD *)v16;
      *(_QWORD *)(v17 + 16) = *(_QWORD *)(v16 + 16);
    }
    v19 = (v472.st_gid & 0x80000000) == 0
        ? (const std::string::value_type *)&v472
        : *(const std::string::value_type **)&v472.st_dev;
    v20 = (v472.st_gid & 0x80000000) == 0 ? HIBYTE(v472.st_gid) : v472.st_ino;
    std::string::append((std::string *)v18, v19, v20);
    v21 = operator new();
    v22 = v21;
    if (*(char *)(v18 + 23) < 0)
    {
      sub_20AB88C14((_BYTE *)v21, *(void **)v18, *(_QWORD *)(v18 + 8));
      if (*(char *)(v18 + 23) < 0)
        operator delete(*(void **)v18);
    }
    else
    {
      *(_OWORD *)v21 = *(_OWORD *)v18;
      *(_QWORD *)(v21 + 16) = *(_QWORD *)(v18 + 16);
    }
    MEMORY[0x20BD2D02C](v18, 0x1012C40EC159624);
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 10;
    strcpy((char *)&__p, "tracks.txt");
    v23 = operator new();
    v24 = v23;
    if (*(char *)(v22 + 23) < 0)
    {
      sub_20AB88C14((_BYTE *)v23, *(void **)v22, *(_QWORD *)(v22 + 8));
    }
    else
    {
      *(_OWORD *)v23 = *(_OWORD *)v22;
      *(_QWORD *)(v23 + 16) = *(_QWORD *)(v22 + 16);
    }
    v25 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    v26 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(__p.__r_.__value_.__r.__words[2])
        : __p.__r_.__value_.__l.__size_;
    std::string::append((std::string *)v24, (const std::string::value_type *)v25, v26);
    v27 = operator new();
    v28 = v27;
    if (*(char *)(v24 + 23) < 0)
    {
      sub_20AB88C14((_BYTE *)v27, *(void **)v24, *(_QWORD *)(v24 + 8));
      v29 = *(char *)(v24 + 23);
      v465 = (void **)v28;
      if (v29 < 0)
        operator delete(*(void **)v24);
    }
    else
    {
      *(_OWORD *)v27 = *(_OWORD *)v24;
      *(_QWORD *)(v27 + 16) = *(_QWORD *)(v24 + 16);
      v465 = (void **)v27;
    }
    MEMORY[0x20BD2D02C](v24, 0x1012C40EC159624);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((*(char *)(v22 + 23) & 0x80000000) == 0)
        goto LABEL_50;
    }
    else if ((*(char *)(v22 + 23) & 0x80000000) == 0)
    {
      goto LABEL_50;
    }
    operator delete(*(void **)v22);
LABEL_50:
    MEMORY[0x20BD2D02C](v22, 0x1012C40EC159624);
    if (SHIBYTE(v472.st_gid) < 0)
      operator delete(*(void **)&v472.st_dev);
    v30 = MEMORY[0x24BDAC740];
    if (*(char *)(v16 + 23) < 0)
      operator delete(*(void **)v16);
    MEMORY[0x20BD2D02C](v16, 0x1012C40EC159624);
    v31 = (const char *)v28;
    if (*(char *)(v28 + 23) < 0)
      v31 = *(const char **)v28;
    if (access(v31, 0))
    {
      if (*(char *)(v28 + 23) < 0)
        operator delete(*(void **)v28);
      v32 = (void **)v28;
      goto LABEL_60;
    }
    cva::adp::io::openInputStream((const char **)&v465, &v472);
    if (!v472.st_qspare[1])
      break;
    v441 = v5;
    while ((*((_BYTE *)&v472.st_atimespec.tv_sec + *(_QWORD *)(*(_QWORD *)&v472.st_dev - 24)) & 2) == 0)
    {
      v35 = (_QWORD *)MEMORY[0x20BD2CE04](&v472, v453);
      sub_20ABBBB80(v35);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
      __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v453[0];
      v459 = 0u;
      v460 = 0u;
      v461 = 0;
      v462 = 1;
      v463 = 0;
      v464 = 0;
      v36 = std::istream::peek();
      if (v36 > 0xFF)
      {
LABEL_74:
        v37 = (_QWORD *)*v6;
        if (!*v6)
          goto LABEL_85;
        v38 = (uint64_t *)(a2 + 1);
        do
        {
          v39 = (void *)v37[4];
          v40 = v39 >= v453[0];
          if (v39 >= v453[0])
            v41 = v37;
          else
            v41 = v37 + 1;
          if (v40)
            v38 = v37;
          v37 = (_QWORD *)*v41;
        }
        while (*v41);
        if (v38 != v6 && (void *)v38[4] <= v453[0])
        {
          v8 = (int8x8_t)v38[5];
          v295 = (std::__shared_weak_count *)v38[6];
          v42 = v295;
          if (v295)
          {
            p_shared_owners = (unint64_t *)&v295->__shared_owners_;
            do
              v297 = __ldxr(p_shared_owners);
            while (__stxr(v297 + 1, p_shared_owners));
          }
          if (v8)
          {
            v299 = (__int128 *)*((_QWORD *)&v459 + 1);
            v298 = (__int128 *)v459;
            if ((_QWORD)v459 == *((_QWORD *)&v459 + 1))
            {
LABEL_648:
              v7 = (uint64_t)(a2 + 3);
              goto LABEL_613;
            }
            while (1)
            {
              v301 = *v298;
              v300 = v298[1];
              *(_OWORD *)v466 = *v298;
              v467 = v300;
              v303 = *(char **)(*(_QWORD *)&v8 + 24);
              v302 = *(char **)(*(_QWORD *)&v8 + 32);
              if (v302 == v303)
              {
                v309 = *(char **)(*(_QWORD *)&v8 + 32);
              }
              else
              {
                v304 = (v302 - v303) >> 5;
                do
                {
                  v305 = v304 >> 1;
                  v306 = (unint64_t *)&v303[32 * (v304 >> 1)];
                  v308 = *v306;
                  v307 = (char *)(v306 + 4);
                  v304 += ~(v304 >> 1);
                  if (v308 < (unint64_t)v301)
                    v303 = v307;
                  else
                    v304 = v305;
                }
                while (v304);
                v309 = v303;
                v303 = *(char **)(*(_QWORD *)&v8 + 32);
              }
              v450 = v301;
              if (v303 == v309 || (v310 = *(char **)(*(_QWORD *)&v8 + 32), *(_QWORD *)v309 != (_QWORD)v301))
              {
                v310 = sub_20ABBBF84((char **)(*(_QWORD *)&v8 + 24), v309, (__int128 *)v466);
                v302 = *(char **)(*(_QWORD *)&v8 + 32);
              }
              if (v302 != v310)
              {
                v311 = *(_QWORD *)(*(_QWORD *)&v8 + 72);
                if (v311)
                {
                  v312 = *(std::__shared_weak_count **)(*(_QWORD *)&v8 + 8);
                  v466[0] = **(void ***)&v8;
                  if (!v312)
                    goto LABEL_863;
                  v313 = std::__shared_weak_count::lock(v312);
                  v466[1] = v313;
                  if (!v313)
                    goto LABEL_863;
                  v314 = v313;
                  sub_20ABBC23C(v311, v450, v466);
                  v315 = (unint64_t *)&v314->__shared_owners_;
                  do
                    v316 = __ldaxr(v315);
                  while (__stlxr(v316 - 1, v315));
                  if (!v316)
                  {
                    ((void (*)(std::__shared_weak_count *))v314->__on_zero_shared)(v314);
                    std::__shared_weak_count::__release_weak(v314);
                  }
                }
              }
              v298 += 2;
              if (v298 == v299)
                goto LABEL_648;
            }
          }
        }
        else
        {
LABEL_85:
          v42 = 0;
        }
        v449 = *((_QWORD *)&v459 + 1);
        v43 = v459;
        if (*((_QWORD *)&v459 + 1) == (_QWORD)v459)
        {
LABEL_613:
          v30 = MEMORY[0x24BDAC740];
          if (v42)
          {
            v292 = (unint64_t *)&v42->__shared_owners_;
            do
              v293 = __ldaxr(v292);
            while (__stlxr(v293 - 1, v292));
            if (!v293)
            {
              ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          v8 = (int8x8_t)1;
          v294 = (void *)v459;
          if (!(_QWORD)v459)
            goto LABEL_620;
LABEL_619:
          operator delete(v294);
          goto LABEL_620;
        }
        v444 = v42;
LABEL_89:
        v44 = *(_QWORD *)v43;
        v45 = v453[0];
        v46 = (unint64_t)a2[4];
        if (v46)
        {
          v47 = (uint8x8_t)vcnt_s8((int8x8_t)v46);
          v47.i16[0] = vaddlv_u8(v47);
          if (v47.u32[0] > 1uLL)
          {
            v48 = *(_QWORD *)v43;
            if (v44 >= v46)
              v48 = v44 % v46;
          }
          else
          {
            v48 = (v46 - 1) & v44;
          }
          v49 = *(void ***)(*(_QWORD *)v7 + 8 * v48);
          if (v49)
          {
            v50 = (char *)*v49;
            if (*v49)
            {
              if (v47.u32[0] < 2uLL)
              {
                while (1)
                {
                  v52 = *((_QWORD *)v50 + 1);
                  if (v52 == v44)
                  {
                    if (*((_QWORD *)v50 + 2) == v44)
                      goto LABEL_182;
                  }
                  else if ((v52 & (v46 - 1)) != v48)
                  {
                    goto LABEL_109;
                  }
                  v50 = *(char **)v50;
                  if (!v50)
                    goto LABEL_109;
                }
              }
              do
              {
                v51 = *((_QWORD *)v50 + 1);
                if (v51 == v44)
                {
                  if (*((_QWORD *)v50 + 2) == v44)
                    goto LABEL_182;
                }
                else
                {
                  if (v51 >= v46)
                    v51 %= v46;
                  if (v51 != v48)
                    break;
                }
                v50 = *(char **)v50;
              }
              while (v50);
            }
          }
LABEL_109:
          if (v47.u32[0] > 1uLL)
          {
            v8 = *(int8x8_t *)v43;
            if (v44 >= v46)
              v8 = (int8x8_t)(v44 % v46);
          }
          else
          {
            v8 = (int8x8_t)((v46 - 1) & v44);
          }
          v53 = *(void ***)(*(_QWORD *)v7 + 8 * *(_QWORD *)&v8);
          if (v53)
          {
            v50 = (char *)*v53;
            if (*v53)
            {
              if (v47.u32[0] < 2uLL)
              {
                while (1)
                {
                  v55 = *((_QWORD *)v50 + 1);
                  if (v55 == v44)
                  {
                    if (*((_QWORD *)v50 + 2) == v44)
                      goto LABEL_166;
                  }
                  else if ((v55 & (v46 - 1)) != *(_QWORD *)&v8)
                  {
                    goto LABEL_128;
                  }
                  v50 = *(char **)v50;
                  if (!v50)
                    goto LABEL_128;
                }
              }
              do
              {
                v54 = *((_QWORD *)v50 + 1);
                if (v54 == v44)
                {
                  if (*((_QWORD *)v50 + 2) == v44)
                    goto LABEL_166;
                }
                else
                {
                  if (v54 >= v46)
                    v54 %= v46;
                  if (v54 != *(_QWORD *)&v8)
                    break;
                }
                v50 = *(char **)v50;
              }
              while (v50);
            }
          }
        }
LABEL_128:
        v50 = (char *)operator new(0x40uLL);
        *(_QWORD *)v50 = 0;
        *((_QWORD *)v50 + 1) = v44;
        *((_QWORD *)v50 + 2) = v44;
        *(_OWORD *)(v50 + 24) = 0u;
        *(_OWORD *)(v50 + 40) = 0u;
        *((_DWORD *)v50 + 14) = 1065353216;
        v56 = (float)((unint64_t)a2[6] + 1);
        v57 = *((float *)a2 + 14);
        if (!v46 || (float)(v57 * (float)v46) < v56)
        {
          v58 = (v46 & (v46 - 1)) != 0;
          if (v46 < 3)
            v58 = 1;
          v59 = v58 | (2 * v46);
          v60 = vcvtps_u32_f32(v56 / v57);
          if (v59 <= v60)
            prime = v60;
          else
            prime = v59;
          if (prime == 1)
          {
            prime = 2;
          }
          else if ((prime & (prime - 1)) != 0)
          {
            prime = std::__next_prime(prime);
            v46 = (unint64_t)a2[4];
          }
          if (prime > v46)
            goto LABEL_140;
          if (prime < v46)
          {
            v62 = vcvtps_u32_f32((float)(unint64_t)a2[6] / *((float *)a2 + 14));
            if (v46 < 3 || (v63 = (uint8x8_t)vcnt_s8((int8x8_t)v46), v63.i16[0] = vaddlv_u8(v63), v63.u32[0] > 1uLL))
            {
              v62 = std::__next_prime(v62);
            }
            else
            {
              v64 = 1 << -(char)__clz(v62 - 1);
              if (v62 >= 2)
                v62 = v64;
            }
            if (prime <= v62)
              prime = v62;
            if (prime < v46)
LABEL_140:
              sub_20ABBC798(v7, prime);
          }
          v46 = (unint64_t)a2[4];
          if ((v46 & (v46 - 1)) != 0)
          {
            if (v44 >= v46)
              v8 = (int8x8_t)(v44 % v46);
            else
              v8 = (int8x8_t)v44;
          }
          else
          {
            v8 = (int8x8_t)((v46 - 1) & v44);
          }
        }
        v65 = *(_QWORD *)v7;
        v66 = *(_QWORD **)(*(_QWORD *)v7 + 8 * *(_QWORD *)&v8);
        if (v66)
        {
          *(_QWORD *)v50 = *v66;
          goto LABEL_164;
        }
        *(_QWORD *)v50 = *v446;
        *v446 = v50;
        *(_QWORD *)(v65 + 8 * *(_QWORD *)&v8) = v446;
        if (*(_QWORD *)v50)
        {
          v67 = *(_QWORD *)(*(_QWORD *)v50 + 8);
          if ((v46 & (v46 - 1)) != 0)
          {
            if (v67 >= v46)
              v67 %= v46;
          }
          else
          {
            v67 &= v46 - 1;
          }
          v66 = (_QWORD *)(*(_QWORD *)v7 + 8 * v67);
LABEL_164:
          *v66 = v50;
        }
        a2[6] = (uint64_t *)((char *)a2[6] + 1);
LABEL_166:
        v68 = vcvtps_u32_f32((float)(unint64_t)a2[8] / *((float *)v50 + 14));
        if (v68 == 1)
        {
          v68 = 2;
        }
        else if ((v68 & (v68 - 1)) != 0)
        {
          v68 = std::__next_prime(v68);
        }
        v8 = *(int8x8_t *)(v50 + 32);
        if (v68 > *(_QWORD *)&v8)
          goto LABEL_181;
        if (v68 < *(_QWORD *)&v8)
        {
          v69 = vcvtps_u32_f32((float)*((unint64_t *)v50 + 6) / *((float *)v50 + 14));
          if (*(_QWORD *)&v8 < 3uLL || (v70 = (uint8x8_t)vcnt_s8(v8), v70.i16[0] = vaddlv_u8(v70), v70.u32[0] > 1uLL))
          {
            v69 = std::__next_prime(v69);
          }
          else
          {
            v71 = 1 << -(char)__clz(v69 - 1);
            if (v69 >= 2)
              v69 = v71;
          }
          if (v68 <= v69)
            v68 = v69;
          if (v68 < *(_QWORD *)&v8)
LABEL_181:
            sub_20ABBC798((uint64_t)(v50 + 24), v68);
        }
LABEL_182:
        if (v45 == (void *)-1)
          goto LABEL_194;
        v72 = (_QWORD *)*v6;
        if (!*v6)
          goto LABEL_194;
        v73 = (uint64_t *)(a2 + 1);
        do
        {
          v74 = v72[4];
          v75 = v74 >= (unint64_t)v45;
          if (v74 >= (unint64_t)v45)
            v76 = v72;
          else
            v76 = v72 + 1;
          if (v75)
            v73 = v72;
          v72 = (_QWORD *)*v76;
        }
        while (*v76);
        if (v73 == v6 || v73[4] > (unint64_t)v45)
        {
LABEL_194:
          v77 = *(int8x8_t *)(v50 + 32);
          if (v77)
          {
            v78 = *(_QWORD *)(v43 + 24);
            v79 = (uint8x8_t)vcnt_s8(v77);
            v79.i16[0] = vaddlv_u8(v79);
            if (v79.u32[0] > 1uLL)
            {
              v80 = *(_QWORD *)(v43 + 24);
              if (v78 >= *(_QWORD *)&v77)
                v80 = v78 % *(_QWORD *)&v77;
            }
            else
            {
              v80 = (*(_QWORD *)&v77 - 1) & v78;
            }
            v81 = *(_QWORD **)(*((_QWORD *)v50 + 3) + 8 * v80);
            if (v81)
            {
              v82 = (_QWORD *)*v81;
              if (v82)
              {
                if (v79.u32[0] < 2uLL)
                {
                  v83 = *(_QWORD *)&v77 - 1;
                  while (1)
                  {
                    v85 = v82[1];
                    if (v85 == v78)
                    {
                      if (v82[2] == v78)
                        goto LABEL_312;
                    }
                    else if ((v85 & v83) != v80)
                    {
                      goto LABEL_214;
                    }
                    v82 = (_QWORD *)*v82;
                    if (!v82)
                      goto LABEL_214;
                  }
                }
                do
                {
                  v84 = v82[1];
                  if (v84 == v78)
                  {
                    if (v82[2] == v78)
                    {
LABEL_312:
                      v87 = (std::__shared_weak_count *)v82[4];
                      if (!v87)
                        goto LABEL_88;
                      v146 = (unint64_t *)&v87->__shared_owners_;
                      do
                        v147 = __ldxr(v146);
                      while (__stxr(v147 + 1, v146));
LABEL_370:
                      v164 = (unint64_t *)&v87->__shared_owners_;
                      do
                        v165 = __ldaxr(v164);
                      while (__stlxr(v165 - 1, v164));
                      if (!v165)
                      {
                        ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                        std::__shared_weak_count::__release_weak(v87);
                      }
                      goto LABEL_88;
                    }
                  }
                  else
                  {
                    if (v84 >= *(_QWORD *)&v77)
                      v84 %= *(_QWORD *)&v77;
                    if (v84 != v80)
                      break;
                  }
                  v82 = (_QWORD *)*v82;
                }
                while (v82);
              }
            }
          }
LABEL_214:
          v86 = operator new();
          *(_OWORD *)v86 = 0u;
          *(_OWORD *)(v86 + 16) = 0u;
          *(_OWORD *)(v86 + 32) = 0u;
          *(_OWORD *)(v86 + 44) = 0u;
          *(_BYTE *)(v86 + 60) = 1;
          *(_BYTE *)(v86 + 64) = 0;
          *(_QWORD *)(v86 + 72) = v7;
          v87 = (std::__shared_weak_count *)operator new();
          v87->__shared_owners_ = 0;
          v8 = (int8x8_t)&v87->__shared_owners_;
          v87->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3805B0;
          v87->__shared_weak_owners_ = 0;
          v87[1].__vftable = (std::__shared_weak_count_vtbl *)v86;
          v88 = *(std::__shared_weak_count **)(v86 + 8);
          if (v88)
          {
            if (v88->__shared_owners_ == -1)
            {
              do
                v89 = __ldxr(*(unint64_t **)&v8);
              while (__stxr(v89 + 1, *(unint64_t **)&v8));
              p_shared_weak_owners = (unint64_t *)&v87->__shared_weak_owners_;
              do
                v91 = __ldxr(p_shared_weak_owners);
              while (__stxr(v91 + 1, p_shared_weak_owners));
              *(_QWORD *)v86 = v86;
              *(_QWORD *)(v86 + 8) = v87;
              std::__shared_weak_count::__release_weak(v88);
              goto LABEL_224;
            }
            goto LABEL_226;
          }
          do
            v92 = __ldxr(*(unint64_t **)&v8);
          while (__stxr(v92 + 1, *(unint64_t **)&v8));
          v93 = (unint64_t *)&v87->__shared_weak_owners_;
          do
            v94 = __ldxr(v93);
          while (__stxr(v94 + 1, v93));
          *(_QWORD *)v86 = v86;
          *(_QWORD *)(v86 + 8) = v87;
          do
LABEL_224:
            v95 = __ldaxr(*(unint64_t **)&v8);
          while (__stlxr(v95 - 1, *(unint64_t **)&v8));
          if (v95)
          {
LABEL_226:
            if (v45 != (void *)-1)
              goto LABEL_227;
LABEL_229:
            v96 = a2[1];
            if (a2[2])
            {
              v97 = a2[1];
              v98 = (uint64_t *)(a2 + 1);
              if (v96)
              {
                do
                {
                  v99 = v97;
                  v97 = (uint64_t *)v97[1];
                }
                while (v97);
              }
              else
              {
                do
                {
                  v99 = (uint64_t *)v98[2];
                  v338 = *v99 == (_QWORD)v98;
                  v98 = v99;
                }
                while (v338);
              }
              v45 = (void *)(v99[4] + 1);
            }
            else
            {
              v45 = 0;
            }
          }
          else
          {
            ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
            std::__shared_weak_count::__release_weak(v87);
            if (v45 == (void *)-1)
              goto LABEL_229;
LABEL_227:
            v96 = (uint64_t *)*v6;
          }
          *(_QWORD *)(v86 + 16) = v45;
          do
            v106 = __ldxr(*(unint64_t **)&v8);
          while (__stxr(v106 + 1, *(unint64_t **)&v8));
          v107 = a2 + 1;
          v108 = a2 + 1;
          if (v96)
          {
            while (1)
            {
              while (1)
              {
                v108 = (uint64_t **)v96;
                v109 = v96[4];
                if ((unint64_t)v45 >= v109)
                  break;
                v96 = *v108;
                v107 = v108;
                if (!*v108)
                  goto LABEL_251;
              }
              if (v109 >= (unint64_t)v45)
                break;
              v96 = v108[1];
              if (!v96)
              {
                v107 = v108 + 1;
                goto LABEL_251;
              }
            }
            do
              v113 = __ldaxr(*(unint64_t **)&v8);
            while (__stlxr(v113 - 1, *(unint64_t **)&v8));
            if (!v113)
            {
              ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
              std::__shared_weak_count::__release_weak(v87);
            }
            v7 = (uint64_t)(a2 + 3);
          }
          else
          {
LABEL_251:
            v110 = (uint64_t *)operator new(0x38uLL);
            v110[4] = (uint64_t)v45;
            v110[5] = v86;
            v110[6] = (uint64_t)v87;
            *v110 = 0;
            v110[1] = 0;
            v110[2] = (uint64_t)v108;
            *v107 = v110;
            v111 = (uint64_t *)**a2;
            if (v111)
            {
              *a2 = v111;
              v112 = *v107;
            }
            else
            {
              v112 = v110;
            }
            v7 = (uint64_t)(a2 + 3);
            sub_20AB96C04(a2[1], v112);
            a2[2] = (uint64_t *)((char *)a2[2] + 1);
          }
        }
        else
        {
          v86 = v73[5];
          v87 = (std::__shared_weak_count *)v73[6];
          if (v87)
          {
            v100 = (unint64_t *)&v87->__shared_owners_;
            do
              v101 = __ldxr(v100);
            while (__stxr(v101 + 1, v100));
          }
          v102 = *(int8x8_t *)(v50 + 32);
          if (v102)
          {
            v103 = *(_QWORD *)(v43 + 24);
            v104 = (uint8x8_t)vcnt_s8(v102);
            v104.i16[0] = vaddlv_u8(v104);
            if (v104.u32[0] > 1uLL)
            {
              v105 = *(_QWORD *)(v43 + 24);
              if (v103 >= *(_QWORD *)&v102)
                v105 = v103 % *(_QWORD *)&v102;
            }
            else
            {
              v105 = (*(_QWORD *)&v102 - 1) & v103;
            }
            v148 = *(_QWORD **)(*((_QWORD *)v50 + 3) + 8 * v105);
            if (v148)
            {
              v149 = (_QWORD *)*v148;
              if (v149)
              {
                if (v104.u32[0] < 2uLL)
                {
                  v150 = *(_QWORD *)&v102 - 1;
                  while (1)
                  {
                    v152 = v149[1];
                    if (v152 == v103)
                    {
                      if (v149[2] == v103)
                        goto LABEL_374;
                    }
                    else if ((v152 & v150) != v105)
                    {
                      goto LABEL_259;
                    }
                    v149 = (_QWORD *)*v149;
                    if (!v149)
                      goto LABEL_259;
                  }
                }
                do
                {
                  v151 = v149[1];
                  if (v151 == v103)
                  {
                    if (v149[2] == v103)
                    {
LABEL_374:
                      v166 = *(_QWORD *)(v86 + 16);
                      v167 = *(_QWORD *)(v149[3] + 16);
                      if (v166 == v167)
                        goto LABEL_369;
                      v168 = (_QWORD *)*v6;
                      if (!*v6)
                        goto LABEL_357;
                      v169 = (uint64_t *)(a2 + 1);
                      v170 = (_QWORD *)*v6;
                      do
                      {
                        v171 = v170[4];
                        v172 = v171 >= v166;
                        if (v171 >= v166)
                          v173 = v170;
                        else
                          v173 = v170 + 1;
                        if (v172)
                          v169 = v170;
                        v170 = (_QWORD *)*v173;
                      }
                      while (*v173);
                      if (v169 == v6 || v169[4] > v166)
                        goto LABEL_357;
                      v174 = (uint64_t *)(a2 + 1);
                      do
                      {
                        v175 = v168[4];
                        v176 = v175 >= v167;
                        if (v175 >= v167)
                          v177 = v168;
                        else
                          v177 = v168 + 1;
                        if (v176)
                          v174 = v168;
                        v168 = (_QWORD *)*v177;
                      }
                      while (*v177);
                      if (v174 == v6 || v174[4] > v167)
                        goto LABEL_357;
                      v178 = v169[5];
                      v180 = *(_QWORD **)(v178 + 24);
                      v179 = *(_QWORD **)(v178 + 32);
                      v181 = v174[5];
                      v183 = *(char **)(v181 + 24);
                      v182 = *(char **)(v181 + 32);
                      if (v180 == v179)
                      {
                        v436 = (char *)(v182 - v183);
                        v8 = (int8x8_t)v180;
                      }
                      else
                      {
                        v8 = (int8x8_t)v179;
                        v436 = (char *)(v182 - v183);
                        v184 = v180;
                        do
                        {
                          if (v182 != v183)
                          {
                            v185 = *v180;
                            v186 = *(char **)(v181 + 24);
                            v187 = (v182 - v183) >> 5;
                            do
                            {
                              v188 = v187 >> 1;
                              v189 = (unint64_t *)&v186[32 * (v187 >> 1)];
                              v191 = *v189;
                              v190 = (char *)(v189 + 4);
                              v187 += ~(v187 >> 1);
                              if (v191 < v185)
                                v186 = v190;
                              else
                                v187 = v188;
                            }
                            while (v187);
                            if (v186 != v182 && *(_QWORD *)v186 == v185)
                              goto LABEL_357;
                          }
                          v180 += 4;
                        }
                        while (v180 != v179);
                        v180 = v184;
                      }
                      if (v183 == v182)
                      {
LABEL_547:
                        if (*(_BYTE *)(v181 + 64))
                        {
                          v257 = v169[5];
                          if ((unint64_t)v436 > *(_QWORD *)&v8 - (_QWORD)v180 || !*(_BYTE *)(v257 + 64))
                          {
                            if (v257 != v181)
                            {
                              v258 = *(_QWORD *)(v181 + 48);
                              *(_DWORD *)(v257 + 56) = *(_DWORD *)(v181 + 56);
                              *(_QWORD *)(v257 + 48) = v258;
                            }
                            *(_BYTE *)(v257 + 60) = *(_BYTE *)(v181 + 60);
                            *(_BYTE *)(v257 + 64) = 1;
                          }
                        }
                        v259 = (uint64_t *)v174[1];
                        v260 = v174;
                        if (v259)
                        {
                          do
                          {
                            v261 = v259;
                            v259 = (uint64_t *)*v259;
                          }
                          while (v259);
                        }
                        else
                        {
                          do
                          {
                            v261 = (uint64_t *)v260[2];
                            v338 = *v261 == (_QWORD)v260;
                            v260 = v261;
                          }
                          while (!v338);
                        }
                        if (*a2 == v174)
                          *a2 = v261;
                        v262 = a2[1];
                        a2[2] = (uint64_t *)((char *)a2[2] - 1);
                        sub_20ABBC9C4(v262, v174);
                        v263 = (std::__shared_weak_count *)v174[6];
                        if (v263)
                        {
                          v264 = (unint64_t *)&v263->__shared_owners_;
                          do
                            v265 = __ldaxr(v264);
                          while (__stlxr(v265 - 1, v264));
                          if (!v265)
                          {
                            ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
                            std::__shared_weak_count::__release_weak(v263);
                          }
                        }
                        operator delete(v174);
                        v158 = (std::__shared_weak_count *)v169[6];
                        if (v158)
                        {
                          v266 = (unint64_t *)&v158->__shared_owners_;
                          do
                            v267 = __ldxr(v266);
                          while (__stxr(v267 + 1, v266));
                        }
                        goto LABEL_358;
                      }
                      v435 = v180;
                      v448 = *(char **)(v181 + 32);
LABEL_415:
                      v192 = v169[5];
                      v193 = *(_QWORD *)v183;
                      v194 = *(char **)(v192 + 24);
                      v195 = *(char **)(v192 + 32);
                      if (v195 == v194)
                        goto LABEL_426;
                      v196 = (v195 - v194) >> 5;
                      do
                      {
                        v197 = v196 >> 1;
                        v198 = &v194[32 * (v196 >> 1)];
                        v200 = *(_QWORD *)v198;
                        v199 = v198 + 32;
                        v196 += ~(v196 >> 1);
                        if (v200 < v193)
                          v194 = v199;
                        else
                          v196 = v197;
                      }
                      while (v196);
                      if (v194 == v195 || *(_QWORD *)v194 != v193)
                      {
LABEL_426:
                        v204 = (unint64_t)a2[4];
                        if ((v204 & (v204 - 1)) != 0)
                        {
                          v206 = *(_QWORD *)v183;
                          if (v193 >= v204)
                            v206 = v193 % v204;
                          v205 = *(_QWORD **)(*(_QWORD *)v7 + 8 * v206);
                          do
                          {
                            do
                              v205 = (_QWORD *)*v205;
                            while (v205[1] != v193);
                          }
                          while (v205[2] != v193);
                        }
                        else
                        {
                          v205 = *(_QWORD **)(*(_QWORD *)v7 + 8 * ((v204 - 1) & v193));
                          do
                          {
                            do
                              v205 = (_QWORD *)*v205;
                            while (v205[1] != v193);
                          }
                          while (v205[2] != v193);
                        }
                        v207 = (int8x8_t)v205[4];
                        if (v207)
                        {
                          v208 = *((_QWORD *)v183 + 3);
                          v209 = (uint8x8_t)vcnt_s8(v207);
                          v209.i16[0] = vaddlv_u8(v209);
                          if (v209.u32[0] > 1uLL)
                          {
                            v210 = *((_QWORD *)v183 + 3);
                            if (*(_QWORD *)&v207 <= v208)
                              v210 = v208 % *(_QWORD *)&v207;
                          }
                          else
                          {
                            v210 = (*(_QWORD *)&v207 - 1) & v208;
                          }
                          v211 = *(_QWORD **)(v205[3] + 8 * v210);
                          if (v211)
                          {
                            v211 = (_QWORD *)*v211;
                            if (v211)
                            {
                              if (v209.u32[0] < 2uLL)
                              {
                                v212 = *(_QWORD *)&v207 - 1;
                                while (1)
                                {
                                  v214 = v211[1];
                                  if (v214 == v208)
                                  {
                                    if (v211[2] == v208)
                                      goto LABEL_457;
                                  }
                                  else if ((v214 & v212) != v210)
                                  {
                                    goto LABEL_456;
                                  }
                                  v211 = (_QWORD *)*v211;
                                  if (!v211)
                                    goto LABEL_457;
                                }
                              }
                              do
                              {
                                v213 = v211[1];
                                if (v213 == v208)
                                {
                                  if (v211[2] == v208)
                                    break;
                                }
                                else
                                {
                                  if (v213 >= *(_QWORD *)&v207)
                                    v213 %= *(_QWORD *)&v207;
                                  if (v213 != v210)
                                    goto LABEL_456;
                                }
                                v211 = (_QWORD *)*v211;
                              }
                              while (v211);
                            }
                          }
                        }
                        else
                        {
LABEL_456:
                          v211 = 0;
                        }
LABEL_457:
                        v215 = v169[6];
                        if (v215)
                        {
                          v216 = (unint64_t *)(v215 + 8);
                          do
                            v217 = __ldxr(v216);
                          while (__stxr(v217 + 1, v216));
                        }
                        v218 = (std::__shared_weak_count *)v211[4];
                        v211[3] = v192;
                        v211[4] = v215;
                        if (v218)
                        {
                          v219 = (unint64_t *)&v218->__shared_owners_;
                          do
                            v220 = __ldaxr(v219);
                          while (__stlxr(v220 - 1, v219));
                          if (!v220)
                          {
                            ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
                            std::__shared_weak_count::__release_weak(v218);
                          }
                        }
                        v221 = v169[5];
                        v222 = *(_OWORD *)v183;
                        v223 = *((_OWORD *)v183 + 1);
                        *(_OWORD *)v466 = *(_OWORD *)v183;
                        v467 = v223;
                        v226 = *(char **)(v221 + 24);
                        v225 = *(char **)(v221 + 32);
                        v224 = (char **)(v221 + 24);
                        if (v225 != v226)
                        {
                          v227 = (v225 - v226) >> 5;
                          do
                          {
                            v228 = v227 >> 1;
                            v229 = (unint64_t *)&v226[32 * (v227 >> 1)];
                            v231 = *v229;
                            v230 = (char *)(v229 + 4);
                            v227 += ~(v227 >> 1);
                            if (v231 < (unint64_t)v222)
                              v226 = v230;
                            else
                              v227 = v228;
                          }
                          while (v227);
                          v232 = v226;
                          v226 = v225;
                          v225 = v232;
                        }
                        if (v226 == v225 || *(_QWORD *)v225 != (_QWORD)v222)
                          sub_20ABBBF84(v224, v225, (__int128 *)v466);
LABEL_413:
                        v182 = v448;
                        goto LABEL_414;
                      }
                      v201 = (int8x8_t)a2[4];
                      if (!*(_QWORD *)&v201)
                        goto LABEL_414;
                      v202 = (uint8x8_t)vcnt_s8(v201);
                      v202.i16[0] = vaddlv_u8(v202);
                      if (v202.u32[0] > 1uLL)
                      {
                        v203 = *(_QWORD *)v183;
                        if (v193 >= *(_QWORD *)&v201)
                          v203 = v193 % *(_QWORD *)&v201;
                      }
                      else
                      {
                        v203 = (*(_QWORD *)&v201 - 1) & v193;
                      }
                      v233 = *(_QWORD **)(*(_QWORD *)v7 + 8 * v203);
                      if (!v233)
                        goto LABEL_414;
                      v234 = (_QWORD *)*v233;
                      if (!v234)
                        goto LABEL_414;
                      v235 = *((_QWORD *)v183 + 3);
                      if (v202.u32[0] < 2uLL)
                      {
                        v236 = *(_QWORD *)&v201 - 1;
                        while (1)
                        {
                          v238 = v234[1];
                          if (v238 == v193)
                          {
                            if (v234[2] == v193)
                              goto LABEL_493;
                          }
                          else if ((v238 & v236) != v203)
                          {
                            goto LABEL_414;
                          }
                          v234 = (_QWORD *)*v234;
                          if (!v234)
                            goto LABEL_414;
                        }
                      }
                      while (1)
                      {
                        v237 = v234[1];
                        if (v237 == v193)
                        {
                          if (v234[2] == v193)
                          {
LABEL_493:
                            v239 = (int8x8_t)v234[4];
                            if (v239)
                            {
                              v240 = (uint8x8_t)vcnt_s8(v239);
                              v240.i16[0] = vaddlv_u8(v240);
                              if (v240.u32[0] > 1uLL)
                              {
                                v241 = *((_QWORD *)v183 + 3);
                                if (*(_QWORD *)&v239 <= v235)
                                  v241 = v235 % *(_QWORD *)&v239;
                              }
                              else
                              {
                                v241 = (*(_QWORD *)&v239 - 1) & v235;
                              }
                              v242 = v234[3];
                              v243 = *(_QWORD ***)(v242 + 8 * v241);
                              if (v243)
                              {
                                v244 = *v243;
                                if (*v243)
                                {
                                  v245 = *(_QWORD *)&v239 - 1;
                                  if (v240.u32[0] < 2uLL)
                                  {
                                    while (1)
                                    {
                                      v246 = v244[1];
                                      if (v246 == v235)
                                      {
                                        if (v244[2] == v235)
                                          goto LABEL_514;
                                      }
                                      else if ((v246 & v245) != v241)
                                      {
                                        goto LABEL_414;
                                      }
                                      v244 = (_QWORD *)*v244;
                                      if (!v244)
                                        goto LABEL_414;
                                    }
                                  }
                                  do
                                  {
                                    v247 = v244[1];
                                    if (v247 == v235)
                                    {
                                      if (v244[2] == v235)
                                      {
LABEL_514:
                                        if (v240.u32[0] > 1uLL)
                                        {
                                          if (v235 >= *(_QWORD *)&v239)
                                            v235 %= *(_QWORD *)&v239;
                                        }
                                        else
                                        {
                                          v235 &= v245;
                                        }
                                        v248 = *(_QWORD **)(v242 + 8 * v235);
                                        do
                                        {
                                          v249 = v248;
                                          v248 = (_QWORD *)*v248;
                                        }
                                        while (v248 != v244);
                                        if (v249 == v234 + 5)
                                          goto LABEL_868;
                                        v250 = v249[1];
                                        if (v240.u32[0] > 1uLL)
                                        {
                                          if (v250 >= *(_QWORD *)&v239)
                                            v250 %= *(_QWORD *)&v239;
                                        }
                                        else
                                        {
                                          v250 &= v245;
                                        }
                                        if (v250 != v235)
                                        {
LABEL_868:
                                          if (!*v244)
                                            goto LABEL_532;
                                          v251 = *(_QWORD *)(*v244 + 8);
                                          if (v240.u32[0] > 1uLL)
                                          {
                                            if (v251 >= *(_QWORD *)&v239)
                                              v251 %= *(_QWORD *)&v239;
                                          }
                                          else
                                          {
                                            v251 &= v245;
                                          }
                                          v7 = (uint64_t)(a2 + 3);
                                          if (v251 != v235)
LABEL_532:
                                            *(_QWORD *)(v242 + 8 * v235) = 0;
                                        }
                                        v252 = *v244;
                                        if (*v244)
                                        {
                                          v253 = *(_QWORD *)(v252 + 8);
                                          if (v240.u32[0] > 1uLL)
                                          {
                                            if (v253 >= *(_QWORD *)&v239)
                                              v253 %= *(_QWORD *)&v239;
                                          }
                                          else
                                          {
                                            v253 &= v245;
                                          }
                                          if (v253 != v235)
                                          {
                                            *(_QWORD *)(v234[3] + 8 * v253) = v249;
                                            v252 = *v244;
                                          }
                                        }
                                        *v249 = v252;
                                        *v244 = 0;
                                        --v234[6];
                                        v254 = (std::__shared_weak_count *)v244[4];
                                        if (v254)
                                        {
                                          v255 = (unint64_t *)&v254->__shared_owners_;
                                          do
                                            v256 = __ldaxr(v255);
                                          while (__stlxr(v256 - 1, v255));
                                          if (!v256)
                                          {
                                            v434 = v254;
                                            ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
                                            std::__shared_weak_count::__release_weak(v434);
                                          }
                                        }
                                        operator delete(v244);
                                        goto LABEL_413;
                                      }
                                    }
                                    else
                                    {
                                      if (v247 >= *(_QWORD *)&v239)
                                        v247 %= *(_QWORD *)&v239;
                                      if (v247 != v241)
                                        break;
                                    }
                                    v244 = (_QWORD *)*v244;
                                  }
                                  while (v244);
                                }
                              }
                            }
LABEL_414:
                            v183 += 32;
                            if (v183 == v182)
                            {
                              v181 = v174[5];
                              v180 = v435;
                              goto LABEL_547;
                            }
                            goto LABEL_415;
                          }
                        }
                        else
                        {
                          if (v237 >= *(_QWORD *)&v201)
                            v237 %= *(_QWORD *)&v201;
                          if (v237 != v203)
                            goto LABEL_414;
                        }
                        v234 = (_QWORD *)*v234;
                        if (!v234)
                          goto LABEL_414;
                      }
                    }
                  }
                  else
                  {
                    if (v151 >= *(_QWORD *)&v102)
                      v151 %= *(_QWORD *)&v102;
                    if (v151 != v105)
                      break;
                  }
                  v149 = (_QWORD *)*v149;
                }
                while (v149);
              }
            }
          }
        }
LABEL_259:
        v114 = (void *)*((_QWORD *)v50 + 2);
        v115 = *(void **)(v43 + 8);
        v466[0] = v114;
        v466[1] = v115;
        v467 = *(_OWORD *)(v43 + 16);
        v117 = *(char **)(v86 + 24);
        v116 = *(char **)(v86 + 32);
        if (v116 != v117)
        {
          v118 = (v116 - v117) >> 5;
          do
          {
            v119 = v118 >> 1;
            v120 = (unint64_t *)&v117[32 * (v118 >> 1)];
            v122 = *v120;
            v121 = (char *)(v120 + 4);
            v118 += ~(v118 >> 1);
            if (v122 < (unint64_t)v114)
              v117 = v121;
            else
              v118 = v119;
          }
          while (v118);
          v123 = v117;
          v117 = *(char **)(v86 + 32);
          v116 = v123;
        }
        if (v117 != v116 && *(void **)v116 == v114
          || *(char **)(v86 + 32) == sub_20ABBBF84((char **)(v86 + 24), v116, (__int128 *)v466))
        {
          goto LABEL_357;
        }
        if (v87)
        {
          v124 = (unint64_t *)&v87->__shared_owners_;
          do
            v125 = __ldxr(v124);
          while (__stxr(v125 + 1, v124));
        }
        v126 = (uint64_t *)(v50 + 24);
        v127 = *(_QWORD *)(v43 + 24);
        *(_QWORD *)&v128 = v86;
        *((_QWORD *)&v128 + 1) = v87;
        v129 = *((_QWORD *)v50 + 4);
        if (!v129)
          goto LABEL_287;
        v130 = (uint8x8_t)vcnt_s8((int8x8_t)v129);
        v130.i16[0] = vaddlv_u8(v130);
        if (v130.u32[0] > 1uLL)
        {
          v7 = *(_QWORD *)(v43 + 24);
          if (v127 >= v129)
            v7 = v127 % v129;
        }
        else
        {
          v7 = (v129 - 1) & v127;
        }
        v131 = *(_QWORD **)(*v126 + 8 * v7);
        if (!v131 || (v132 = (_QWORD *)*v131) == 0)
        {
LABEL_287:
          v447 = v128;
          v134 = (char *)operator new(0x28uLL);
          *(_QWORD *)v134 = 0;
          *((_QWORD *)v134 + 1) = v127;
          *((_QWORD *)v134 + 2) = v127;
          *(_OWORD *)(v134 + 24) = v447;
          v135 = (float)(unint64_t)(*((_QWORD *)v50 + 6) + 1);
          v136 = *((float *)v50 + 14);
          if (!v129 || (float)(v136 * (float)v129) < v135)
          {
            v137 = (v129 & (v129 - 1)) != 0;
            if (v129 < 3)
              v137 = 1;
            v138 = v137 | (2 * v129);
            v139 = vcvtps_u32_f32(v135 / v136);
            if (v138 <= v139)
              v140 = v139;
            else
              v140 = v138;
            if (v140 == 1)
            {
              v140 = 2;
            }
            else if ((v140 & (v140 - 1)) != 0)
            {
              v140 = std::__next_prime(v140);
            }
            v142 = *(int8x8_t *)(v50 + 32);
            if (v140 > *(_QWORD *)&v142)
              goto LABEL_305;
            if (v140 < *(_QWORD *)&v142)
            {
              v143 = vcvtps_u32_f32((float)*((unint64_t *)v50 + 6) / *((float *)v50 + 14));
              if (*(_QWORD *)&v142 < 3uLL
                || (v144 = (uint8x8_t)vcnt_s8(v142), v144.i16[0] = vaddlv_u8(v144), v144.u32[0] > 1uLL))
              {
                v143 = std::__next_prime(v143);
              }
              else
              {
                v145 = 1 << -(char)__clz(v143 - 1);
                if (v143 >= 2)
                  v143 = v145;
              }
              if (v140 <= v143)
                v140 = v143;
              if (v140 < *(_QWORD *)&v142)
LABEL_305:
                sub_20ABBC798((uint64_t)(v50 + 24), v140);
            }
            v129 = *((_QWORD *)v50 + 4);
            if ((v129 & (v129 - 1)) != 0)
            {
              if (v127 >= v129)
                v7 = v127 % v129;
              else
                v7 = v127;
            }
            else
            {
              v7 = (v129 - 1) & v127;
            }
          }
          v153 = *v126;
          v154 = *(_QWORD **)(*v126 + 8 * v7);
          if (v154)
          {
            *(_QWORD *)v134 = *v154;
            v7 = (uint64_t)(a2 + 3);
            goto LABEL_351;
          }
          *(_QWORD *)v134 = *((_QWORD *)v50 + 5);
          *((_QWORD *)v50 + 5) = v134;
          *(_QWORD *)(v153 + 8 * v7) = v50 + 40;
          v7 = (uint64_t)(a2 + 3);
          if (*(_QWORD *)v134)
          {
            v155 = *(_QWORD *)(*(_QWORD *)v134 + 8);
            if ((v129 & (v129 - 1)) != 0)
            {
              if (v155 >= v129)
                v155 %= v129;
            }
            else
            {
              v155 &= v129 - 1;
            }
            v154 = (_QWORD *)(*v126 + 8 * v155);
LABEL_351:
            *v154 = v134;
          }
          v8 = 0;
          ++*((_QWORD *)v50 + 6);
          goto LABEL_356;
        }
        if (v130.u32[0] < 2uLL)
        {
          while (1)
          {
            v141 = v132[1];
            if (v141 == v127)
            {
              if (v132[2] == v127)
                goto LABEL_300;
            }
            else if ((v141 & (v129 - 1)) != v7)
            {
              goto LABEL_287;
            }
            v132 = (_QWORD *)*v132;
            if (!v132)
              goto LABEL_287;
          }
        }
        while (1)
        {
          v133 = v132[1];
          if (v133 == v127)
          {
            if (v132[2] == v127)
            {
LABEL_300:
              v8 = (int8x8_t)1;
              v7 = (uint64_t)(a2 + 3);
              if (!v87)
                goto LABEL_356;
              v156 = (unint64_t *)&v87->__shared_owners_;
              do
                v157 = __ldaxr(v156);
              while (__stlxr(v157 - 1, v156));
              if (v157)
              {
LABEL_356:
                if ((v8.i8[0] & 1) != 0)
                  goto LABEL_357;
                if (v87)
                {
                  v160 = (unint64_t *)&v87->__shared_owners_;
                  do
                    v161 = __ldxr(v160);
                  while (__stxr(v161 + 1, v160));
                  v159 = v87;
                  goto LABEL_365;
                }
LABEL_88:
                v43 += 32;
                if (v43 == v449)
                {
                  v5 = v441;
                  v42 = v444;
                  goto LABEL_613;
                }
                goto LABEL_89;
              }
              ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
              std::__shared_weak_count::__release_weak(v87);
LABEL_357:
              v158 = 0;
LABEL_358:
              v159 = v87;
              v87 = v158;
              if (v159)
              {
LABEL_365:
                v162 = (unint64_t *)&v159->__shared_owners_;
                do
                  v163 = __ldaxr(v162);
                while (__stlxr(v163 - 1, v162));
                if (!v163)
                {
                  ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
                  std::__shared_weak_count::__release_weak(v159);
                }
              }
LABEL_369:
              if (!v87)
                goto LABEL_88;
              goto LABEL_370;
            }
          }
          else
          {
            if (v133 >= v129)
              v133 %= v129;
            if (v133 != v7)
              goto LABEL_287;
          }
          v132 = (_QWORD *)*v132;
          if (!v132)
            goto LABEL_287;
        }
      }
      while (2)
      {
        if ((*(_DWORD *)(v30 + 4 * v36 + 60) & 0x400) == 0)
          goto LABEL_74;
        v268 = MEMORY[0x20BD2CE04](&v472, &v469);
        MEMORY[0x20BD2CE04](v268, &v468);
        if (!v455[1])
          goto LABEL_569;
        v269 = v469 & 0xFFFFFFFFFFFFFFLL | ((unint64_t)*(unsigned __int8 *)(v5 + 32) << 56);
        v270 = (uint8x8_t)vcnt_s8((int8x8_t)v455[1]);
        v270.i16[0] = vaddlv_u8(v270);
        if (v270.u32[0] > 1uLL)
        {
          v271 = v469 & 0xFFFFFFFFFFFFFFLL | ((unint64_t)*(unsigned __int8 *)(v5 + 32) << 56);
          if ((void *)v269 >= v455[1])
            v271 = v269 % (unint64_t)v455[1];
        }
        else
        {
          v271 = ((unint64_t)v455[1] - 1) & v269;
        }
        v272 = (_QWORD *)*((_QWORD *)v455[0] + v271);
        if (!v272)
          goto LABEL_569;
        v273 = (_QWORD *)*v272;
        if (!v273)
          goto LABEL_569;
        if (v270.u32[0] < 2uLL)
        {
          while (1)
          {
            v275 = v273[1];
            if (v269 == v275)
            {
              if (v273[2] == v269)
                goto LABEL_592;
            }
            else if ((v275 & ((uint64_t)v455[1] - 1)) != v271)
            {
              goto LABEL_569;
            }
            v273 = (_QWORD *)*v273;
            if (!v273)
              goto LABEL_569;
          }
        }
        while (1)
        {
          v274 = v273[1];
          if (v269 == v274)
            break;
          if ((void *)v274 >= v455[1])
            v274 %= (unint64_t)v455[1];
          if (v274 != v271)
            goto LABEL_569;
LABEL_581:
          v273 = (_QWORD *)*v273;
          if (!v273)
            goto LABEL_569;
        }
        if (v273[2] != v269)
          goto LABEL_581;
LABEL_592:
        v276 = v273[3];
        if (v468 < 0xAAAAAAAAAAAAAAABLL * ((v273[4] - v276) >> 3))
        {
          v277 = v276 + 24 * v468;
          v466[0] = (void *)(v469 & 0xFFFFFFFFFFFFFFLL | ((unint64_t)*(unsigned __int8 *)(v5 + 32) << 56));
          v466[1] = *(void **)v277;
          v467 = *(_OWORD *)(v277 + 8);
          v278 = (char *)*((_QWORD *)&v459 + 1);
          v279 = (char *)v459;
          if (*((_QWORD *)&v459 + 1) == (_QWORD)v459)
          {
            v285 = (char *)*((_QWORD *)&v459 + 1);
            goto LABEL_603;
          }
          v280 = (uint64_t)(*((_QWORD *)&v459 + 1) - v459) >> 5;
          do
          {
            v281 = v280 >> 1;
            v282 = (unint64_t *)&v279[32 * (v280 >> 1)];
            v284 = *v282;
            v283 = (char *)(v282 + 4);
            v280 += ~(v280 >> 1);
            if (v284 < v269)
              v279 = v283;
            else
              v280 = v281;
          }
          while (v280);
          v285 = v279;
          if (*((char **)&v459 + 1) == v279 || (v286 = (char *)*((_QWORD *)&v459 + 1), *(_QWORD *)v279 != v269))
          {
LABEL_603:
            v286 = sub_20ABBBF84((char **)&v459, v285, (__int128 *)v466);
            v278 = (char *)*((_QWORD *)&v459 + 1);
          }
          if (v278 != v286)
          {
            v287 = v464;
            if (v464)
            {
              v466[0] = __p.__r_.__value_.__l.__data_;
              if (!__p.__r_.__value_.__l.__size_
                || (v288 = std::__shared_weak_count::lock((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_),
                    (v466[1] = v288) == 0))
              {
LABEL_863:
                sub_20ABBC228();
              }
              v289 = v288;
              sub_20ABBC23C(v287, v269, v466);
              v290 = (unint64_t *)&v289->__shared_owners_;
              do
                v291 = __ldaxr(v290);
              while (__stlxr(v291 - 1, v290));
              if (!v291)
              {
                ((void (*)(std::__shared_weak_count *))v289->__on_zero_shared)(v289);
                std::__shared_weak_count::__release_weak(v289);
              }
            }
          }
LABEL_569:
          std::istream::ignore();
          v36 = std::istream::peek();
          if (v36 >= 0x100)
            goto LABEL_74;
          continue;
        }
        break;
      }
      v8 = 0;
      v294 = (void *)v459;
      if ((_QWORD)v459)
        goto LABEL_619;
LABEL_620:
      if (__p.__r_.__value_.__l.__size_)
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
      if ((v8.i8[0] & 1) == 0)
      {
        *(_QWORD *)&v472.st_dev = v437;
        *(_QWORD *)((char *)&v472.st_dev + *(_QWORD *)(v437 - 24)) = v438;
        MEMORY[0x20BD2CD80](&v472.st_uid);
        std::istream::~istream();
        MEMORY[0x20BD2D008](v473);
        v319 = v465;
        v3 = (const char **)v439;
        if (v465)
        {
          if (*((char *)v465 + 23) < 0)
            operator delete(*v465);
          MEMORY[0x20BD2D02C](v319, 0x1012C40EC159624);
        }
        v440 = 0;
        goto LABEL_662;
      }
    }
    *(_QWORD *)&v472.st_dev = v437;
    *(_QWORD *)((char *)&v472.st_dev + *(_QWORD *)(v437 - 24)) = v438;
    MEMORY[0x20BD2CD80](&v472.st_uid);
    std::istream::~istream();
    MEMORY[0x20BD2D008](v473);
    v317 = v465;
    if (v465)
    {
      if (*((char *)v465 + 23) < 0)
        operator delete(*v465);
      v32 = v317;
LABEL_60:
      MEMORY[0x20BD2D02C](v32, 0x1012C40EC159624);
    }
    v33 = *(std::string **)(v5 + 8);
    if (v33)
    {
      do
      {
        v34 = v33;
        v33 = (std::string *)v33->__r_.__value_.__r.__words[0];
      }
      while (v33);
    }
    else
    {
      do
      {
        v34 = *(std::string **)(v5 + 16);
        v338 = v34->__r_.__value_.__r.__words[0] == v5;
        v5 = (std::string::size_type)v34;
      }
      while (!v338);
    }
    v5 = (std::string::size_type)v34;
    if (v34 == (std::string *)&v454.__r_.__value_.__r.__words[1])
    {
      v440 = 1;
      goto LABEL_858;
    }
  }
  *(_QWORD *)&v472.st_dev = v437;
  *(_QWORD *)((char *)&v472.st_dev + *(_QWORD *)(v437 - 24)) = v438;
  MEMORY[0x20BD2CD80](&v472.st_uid);
  std::istream::~istream();
  MEMORY[0x20BD2D008](v473);
  if (*(char *)(v28 + 23) < 0)
    operator delete(*(void **)v28);
  MEMORY[0x20BD2D02C](v28, 0x1012C40EC159624);
  v440 = 0;
LABEL_858:
  v3 = (const char **)v439;
  v318 = v456[0];
  if (v456[0])
  {
    do
    {
LABEL_861:
      v432 = (_QWORD *)*v318;
      v433 = (void *)v318[3];
      if (v433)
      {
        v318[4] = v433;
        operator delete(v433);
      }
      operator delete(v318);
      v318 = v432;
    }
    while (v432);
  }
LABEL_663:
  v320 = v455[0];
  v455[0] = 0;
  if (v320)
    operator delete(v320);
  if (!v440)
  {
    v325 = 0;
    goto LABEL_826;
  }
  HIBYTE(v453[2]) = 16;
  strcpy((char *)v453, "scene-points.txt");
  v321 = (__int128 *)a1[12];
  v322 = operator new();
  v323 = v322;
  if (*((char *)v321 + 23) < 0)
  {
    sub_20AB88C14((_BYTE *)v322, *(void **)v321, *((_QWORD *)v321 + 1));
  }
  else
  {
    v324 = *v321;
    *(_QWORD *)(v322 + 16) = *((_QWORD *)v321 + 2);
    *(_OWORD *)v322 = v324;
  }
  if (SHIBYTE(v453[2]) >= 0)
    v326 = (const std::string::value_type *)v453;
  else
    v326 = (const std::string::value_type *)v453[0];
  if (SHIBYTE(v453[2]) >= 0)
    v327 = HIBYTE(v453[2]);
  else
    v327 = (std::string::size_type)v453[1];
  std::string::append((std::string *)v323, v326, v327);
  v328 = operator new();
  v329 = (const char *)v328;
  if (*(char *)(v323 + 23) < 0)
  {
    sub_20AB88C14((_BYTE *)v328, *(void **)v323, *(_QWORD *)(v323 + 8));
    v330 = *(char *)(v323 + 23);
    v465 = (void **)v329;
    if (v330 < 0)
      operator delete(*(void **)v323);
  }
  else
  {
    *(_OWORD *)v328 = *(_OWORD *)v323;
    *(_QWORD *)(v328 + 16) = *(_QWORD *)(v323 + 16);
    v465 = (void **)v328;
  }
  MEMORY[0x20BD2D02C](v323, 0x1012C40EC159624);
  cva::adp::io::openInputStream((const char **)&v465, &v472);
  v325 = v472.st_qspare[1];
  if (v472.st_qspare[1])
  {
    v455[0] = 0;
    LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
    __p.__r_.__value_.__r.__words[0] = 0;
    __p.__r_.__value_.__s.__data_[12] = 1;
    if ((*((_BYTE *)&v472.st_atimespec.tv_sec + *(_QWORD *)(*(_QWORD *)&v472.st_dev - 24)) & 5) == 0)
    {
      v418 = a2 + 1;
      do
      {
        v419 = (uint64_t *)MEMORY[0x20BD2CE04](&v472, v455);
        sub_20ABBBC9C(v419, (uint64_t)&__p);
        v420 = (_QWORD *)*v418;
        if (*v418)
        {
          v421 = v418;
          do
          {
            v422 = (void *)v420[4];
            v423 = v422 >= v455[0];
            if (v422 >= v455[0])
              v424 = v420;
            else
              v424 = v420 + 1;
            if (v423)
              v421 = v420;
            v420 = (_QWORD *)*v424;
          }
          while (*v424);
          if (v421 != v418 && (void *)v421[4] <= v455[0])
          {
            v425 = v421[5];
            v426 = (std::__shared_weak_count *)v421[6];
            if (v426)
            {
              v427 = (unint64_t *)&v426->__shared_owners_;
              do
                v428 = __ldxr(v427);
              while (__stxr(v428 + 1, v427));
            }
            if (v425)
            {
              v429 = __p.__r_.__value_.__s.__data_[12];
              *(_QWORD *)(v425 + 48) = __p.__r_.__value_.__r.__words[0];
              *(_DWORD *)(v425 + 56) = __p.__r_.__value_.__r.__words[1];
              *(_BYTE *)(v425 + 60) = v429;
              *(_BYTE *)(v425 + 64) = 1;
            }
            if (v426)
            {
              v430 = (unint64_t *)&v426->__shared_owners_;
              do
                v431 = __ldaxr(v430);
              while (__stlxr(v431 - 1, v430));
              if (!v431)
              {
                ((void (*)(std::__shared_weak_count *))v426->__on_zero_shared)(v426);
                std::__shared_weak_count::__release_weak(v426);
              }
            }
          }
        }
      }
      while ((*((_BYTE *)&v472.st_atimespec.tv_sec + *(_QWORD *)(*(_QWORD *)&v472.st_dev - 24)) & 5) == 0);
    }
  }
  *(_QWORD *)&v472.st_dev = *MEMORY[0x24BEDB7E0];
  v452 = *(_QWORD *)&v472.st_dev;
  v451 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  *(_QWORD *)((char *)&v472.st_dev + *(_QWORD *)(*(_QWORD *)&v472.st_dev - 24)) = v451;
  MEMORY[0x20BD2CD80](&v472.st_uid);
  std::istream::~istream();
  MEMORY[0x20BD2D008](v473);
  if (!v325 || (v331 = a1 + 1, v332 = (_QWORD *)*a1, v325 = 1, (_QWORD *)*a1 == a1 + 1))
  {
LABEL_820:
    v416 = (const char *)v465;
    if (!v465)
      goto LABEL_824;
    goto LABEL_821;
  }
  v443 = a1 + 1;
  while (1)
  {
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v332[5] + 16))(v332[5]) != 1)
    {
LABEL_812:
      v414 = (_QWORD *)v332[1];
      if (!v414)
        goto LABEL_816;
      goto LABEL_813;
    }
    v333 = v332 + 8;
    if (*((char *)v332 + 87) < 0)
    {
      sub_20AB88C14(&__p, (void *)v332[8], v332[9]);
      if (*((char *)v332 + 87) < 0)
      {
        v333 = (_OWORD *)v332[8];
        v334 = v332[9];
      }
      else
      {
        v334 = *((unsigned __int8 *)v332 + 87);
      }
    }
    else
    {
      v334 = *((unsigned __int8 *)v332 + 87);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v333;
      __p.__r_.__value_.__r.__words[2] = v332[10];
    }
    v335 = (char *)v333 + v334;
    if (v334 >= 6)
    {
      v336 = v333;
      do
      {
        v337 = (char *)memchr(v336, 67, v334 - 5);
        if (!v337)
          break;
        v338 = *(_DWORD *)v337 == 1701667139 && *((_WORD *)v337 + 2) == 24946;
        if (v338)
          goto LABEL_701;
        v336 = v337 + 1;
        v334 = v335 - (_BYTE *)v336;
      }
      while (v335 - (_BYTE *)v336 > 5);
    }
    v337 = v335;
LABEL_701:
    v339 = v337 == v335 ? -1 : v337 - (char *)v333;
    std::string::replace(&__p, v339, 6uLL, "Encoder");
    v340 = v332[5];
    v341 = *(_QWORD *)(v340 + 136);
    if (v341)
    {
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v341 + 16))(v341))
      {
        v342 = *(_QWORD **)(v340 + 136);
        v343 = *v3;
        v344 = operator new();
        v345 = v344;
        if (v343[23] < 0)
        {
          sub_20AB88C14((_BYTE *)v344, *(void **)v343, *((_QWORD *)v343 + 1));
        }
        else
        {
          v346 = *(_OWORD *)v343;
          *(_QWORD *)(v344 + 16) = *((_QWORD *)v343 + 2);
          *(_OWORD *)v344 = v346;
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        std::string::append((std::string *)v345, (const std::string::value_type *)p_p, size);
        v349 = operator new();
        v350 = v349;
        if (*(char *)(v345 + 23) < 0)
        {
          sub_20AB88C14((_BYTE *)v349, *(void **)v345, *(_QWORD *)(v345 + 8));
          if (*(char *)(v345 + 23) < 0)
            operator delete(*(void **)v345);
        }
        else
        {
          *(_OWORD *)v349 = *(_OWORD *)v345;
          *(_QWORD *)(v349 + 16) = *(_QWORD *)(v345 + 16);
        }
        MEMORY[0x20BD2D02C](v345, 0x1012C40EC159624);
        HIBYTE(v456[0]) = 1;
        LOWORD(v455[0]) = 47;
        v351 = operator new();
        v352 = v351;
        if (*(char *)(v350 + 23) < 0)
        {
          sub_20AB88C14((_BYTE *)v351, *(void **)v350, *(_QWORD *)(v350 + 8));
        }
        else
        {
          *(_OWORD *)v351 = *(_OWORD *)v350;
          *(_QWORD *)(v351 + 16) = *(_QWORD *)(v350 + 16);
        }
        if (SHIBYTE(v456[0]) >= 0)
          v353 = v455;
        else
          v353 = (void **)v455[0];
        if (SHIBYTE(v456[0]) >= 0)
          v354 = HIBYTE(v456[0]);
        else
          v354 = (std::string::size_type)v455[1];
        std::string::append((std::string *)v352, (const std::string::value_type *)v353, v354);
        v355 = operator new();
        v356 = v355;
        if (*(char *)(v352 + 23) < 0)
        {
          sub_20AB88C14((_BYTE *)v355, *(void **)v352, *(_QWORD *)(v352 + 8));
          if (*(char *)(v352 + 23) < 0)
            operator delete(*(void **)v352);
        }
        else
        {
          *(_OWORD *)v355 = *(_OWORD *)v352;
          *(_QWORD *)(v355 + 16) = *(_QWORD *)(v352 + 16);
        }
        MEMORY[0x20BD2D02C](v352, 0x1012C40EC159624);
        BYTE7(v467) = 11;
        strcpy((char *)v466, "encoder.txt");
        v357 = operator new();
        v358 = v357;
        if (*(char *)(v356 + 23) < 0)
        {
          sub_20AB88C14((_BYTE *)v357, *(void **)v356, *(_QWORD *)(v356 + 8));
        }
        else
        {
          *(_OWORD *)v357 = *(_OWORD *)v356;
          *(_QWORD *)(v357 + 16) = *(_QWORD *)(v356 + 16);
        }
        if ((SBYTE7(v467) & 0x80u) == 0)
          v359 = v466;
        else
          v359 = (void **)v466[0];
        if ((SBYTE7(v467) & 0x80u) == 0)
          v360 = BYTE7(v467);
        else
          v360 = (std::string::size_type)v466[1];
        std::string::append((std::string *)v358, (const std::string::value_type *)v359, v360);
        v361 = operator new();
        v362 = v361;
        if (*(char *)(v358 + 23) < 0)
        {
          sub_20AB88C14((_BYTE *)v361, *(void **)v358, *(_QWORD *)(v358 + 8));
          v363 = *(char *)(v358 + 23);
          v468 = v362;
          if (v363 < 0)
            operator delete(*(void **)v358);
        }
        else
        {
          *(_OWORD *)v361 = *(_OWORD *)v358;
          *(_QWORD *)(v361 + 16) = *(_QWORD *)(v358 + 16);
          v468 = v361;
        }
        MEMORY[0x20BD2D02C](v358, 0x1012C40EC159624);
        cva::adp::io::openInputStream((const char **)&v468, &v472);
        v364 = v472.st_qspare[1];
        if (v472.st_qspare[1])
        {
          v471 = 0;
          if ((*((_BYTE *)&v472.st_atimespec.tv_sec + *(_QWORD *)(*(_QWORD *)&v472.st_dev - 24)) & 2) == 0)
          {
            v445 = v472.st_qspare[1];
            do
            {
              v367 = std::istream::peek();
              if (v367 > 0xFF || (*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v367 + 60) & 0x400) == 0)
                break;
              v368 = MEMORY[0x20BD2CDEC](&v472, (char *)&v471 + 4);
              v369 = (_QWORD *)MEMORY[0x20BD2CDEC](v368, &v471);
              sub_20ABBBB80(v369);
              v469 = __PAIR64__(v471, HIDWORD(v471));
              LOBYTE(v470) = 1;
              v370 = v342[3];
              v371 = v342[4];
              v372 = v371 - v370;
              if (v371 == v370)
              {
                v374 = (float *)v342[4];
              }
              else
              {
                v373 = 0xAAAAAAAAAAAAAAABLL * (v372 >> 2);
                v374 = (float *)v342[3];
                do
                {
                  v375 = v373 >> 1;
                  v376 = &v374[3 * (v373 >> 1)];
                  v378 = *v376;
                  v377 = v376 + 3;
                  v373 += ~(v373 >> 1);
                  if (v378 < *((float *)&v471 + 1))
                    v374 = v377;
                  else
                    v373 = v375;
                }
                while (v373);
                if ((float *)v371 != v374 && *v374 == *((float *)&v471 + 1))
                  continue;
              }
              v379 = (unsigned __int128)(((uint64_t)v374 - v370) * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
              v380 = (v379 >> 1) + ((unint64_t)v379 >> 63);
              v381 = v370 + 12 * v380;
              v382 = v342[5];
              if (v371 >= v382)
              {
                v390 = 1 - 0x5555555555555555 * (v372 >> 2);
                if (v390 > 0x1555555555555555)
                  abort();
                v391 = v350;
                v392 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v382 - v370) >> 2);
                if (2 * v392 > v390)
                  v390 = 2 * v392;
                if (v392 >= 0xAAAAAAAAAAAAAAALL)
                  v393 = 0x1555555555555555;
                else
                  v393 = v390;
                if (v393)
                {
                  if (v393 > 0x1555555555555555)
                    goto LABEL_865;
                  v394 = (char *)operator new(12 * v393);
                }
                else
                {
                  v394 = 0;
                }
                v396 = &v394[12 * v380];
                v397 = &v394[12 * v393];
                if (v396 == v397)
                {
                  v398 = 0xAAAAAAAAAAAAAAABLL * ((v396 - v394) >> 2);
                  if (v396 <= v394)
                  {
                    v400 = 0x5555555555555556 * ((v396 - v394) >> 2);
                    if (v396 == v394)
                      v400 = 1;
                    if (v400 > 0x1555555555555555)
LABEL_865:
                      sub_20ABAD09C();
                    v401 = v400 >> 2;
                    v402 = 12 * v400;
                    v403 = (char *)operator new(12 * v400);
                    v396 = &v403[12 * v401];
                    v397 = &v403[v402];
                    if (v394)
                      operator delete(v394);
                  }
                  else
                  {
                    if (v398 >= -1)
                      v399 = v398 + 1;
                    else
                      v399 = v398 + 2;
                    v397 = v396;
                    v396 -= 12 * (v399 >> 1);
                  }
                }
                v404 = v469;
                *((_DWORD *)v396 + 2) = v470;
                *(_QWORD *)v396 = v404;
                v405 = v342[3];
                v406 = v396;
                v364 = v445;
                if (v405 != v381)
                {
                  v407 = v381;
                  v406 = v396;
                  do
                  {
                    v408 = *(_QWORD *)(v407 - 12);
                    v407 -= 12;
                    v409 = *(_DWORD *)(v407 + 8);
                    *(_QWORD *)(v406 - 12) = v408;
                    v406 -= 12;
                    *((_DWORD *)v406 + 2) = v409;
                  }
                  while (v407 != v405);
                }
                v410 = v396 + 12;
                for (i = v342[4]; v381 != i; v381 += 12)
                {
                  v412 = *(_QWORD *)v381;
                  *((_DWORD *)v410 + 2) = *(_DWORD *)(v381 + 8);
                  *(_QWORD *)v410 = v412;
                  v410 += 12;
                }
                v413 = (void *)v342[3];
                v342[3] = v406;
                v342[4] = v410;
                v342[5] = v397;
                v350 = v391;
                if (v413)
                  operator delete(v413);
              }
              else if (v381 == v371)
              {
                v395 = v469;
                *(_DWORD *)(v371 + 8) = v470;
                *(_QWORD *)v371 = v395;
                v342[4] = v371 + 12;
              }
              else
              {
                v383 = v371 - 12;
                v384 = v342[4];
                v385 = v371 - 12;
                if (v371 >= 0xC)
                {
                  do
                  {
                    v386 = *(_QWORD *)v385;
                    *(_DWORD *)(v384 + 8) = *(_DWORD *)(v385 + 8);
                    *(_QWORD *)v384 = v386;
                    v384 += 12;
                    v385 += 12;
                  }
                  while (v385 < v371);
                }
                v342[4] = v384;
                if (v371 != v381 + 12)
                {
                  v387 = v371 - (v381 + 12);
                  do
                  {
                    *(_DWORD *)v383 = *(_DWORD *)(v381 + v387 - 12);
                    v388 = *(_DWORD *)(v381 + v387 - 8);
                    *(_BYTE *)(v383 + 8) = *(_BYTE *)(v381 + v387 - 4);
                    *(_DWORD *)(v383 + 4) = v388;
                    v383 -= 12;
                    v387 -= 12;
                  }
                  while (v387);
                }
                v389 = &v469;
                if (v381 <= (unint64_t)&v469)
                  v389 = (unint64_t *)((char *)&v469 + 12 * (v342[4] > (unint64_t)&v469));
                *(_DWORD *)v381 = *(_DWORD *)v389;
                v365 = v370 + 12 * v380;
                v366 = *((_DWORD *)v389 + 1);
                *(_BYTE *)(v365 + 8) = *((_BYTE *)v389 + 8);
                *(_DWORD *)(v365 + 4) = v366;
              }
            }
            while ((*((_BYTE *)&v472.st_atimespec.tv_sec + *(_QWORD *)(*(_QWORD *)&v472.st_dev - 24)) & 2) == 0);
          }
        }
        *(_QWORD *)&v472.st_dev = v452;
        *(_QWORD *)((char *)&v472.st_dev + *(_QWORD *)(v452 - 24)) = v451;
        MEMORY[0x20BD2CD80](&v472.st_uid);
        std::istream::~istream();
        MEMORY[0x20BD2D008](v473);
        v468 = 0;
        if (*(char *)(v362 + 23) < 0)
          operator delete(*(void **)v362);
        MEMORY[0x20BD2D02C](v362, 0x1012C40EC159624);
        v331 = v443;
        if (SBYTE7(v467) < 0)
          operator delete(v466[0]);
        if (*(char *)(v356 + 23) < 0)
          operator delete(*(void **)v356);
        MEMORY[0x20BD2D02C](v356, 0x1012C40EC159624);
        if (SHIBYTE(v456[0]) < 0)
          operator delete(v455[0]);
        if (*(char *)(v350 + 23) < 0)
          operator delete(*(void **)v350);
        MEMORY[0x20BD2D02C](v350, 0x1012C40EC159624);
        if (!v364)
          break;
      }
    }
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_812;
    operator delete(__p.__r_.__value_.__l.__data_);
    v414 = (_QWORD *)v332[1];
    if (!v414)
    {
      do
      {
LABEL_816:
        v415 = (_QWORD *)v332[2];
        v338 = *v415 == (_QWORD)v332;
        v332 = v415;
      }
      while (!v338);
      goto LABEL_685;
    }
    do
    {
LABEL_813:
      v415 = v414;
      v414 = (_QWORD *)*v414;
    }
    while (v414);
LABEL_685:
    v332 = v415;
    if (v415 == v331)
    {
      v325 = 1;
      goto LABEL_820;
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v325 = 0;
  v416 = (const char *)v465;
  if (v465)
  {
LABEL_821:
    if (v416[23] < 0)
      operator delete(*(void **)v416);
    MEMORY[0x20BD2D02C](v416, 0x1012C40EC159624);
  }
LABEL_824:
  if (SHIBYTE(v453[2]) < 0)
    operator delete(v453[0]);
LABEL_826:
  sub_20AB96A90((char *)v454.__r_.__value_.__l.__size_);
  return v325;
}

std::string *sub_20ABBAC68(std::string *result, _QWORD *a2)
{
  std::string::size_type *p_size;
  _QWORD *v3;
  _QWORD *v4;
  std::string *v5;
  unsigned __int8 *v6;
  unsigned int v7;
  uint64_t **v8;
  char *v9;
  unsigned int v10;
  char *v11;
  std::string::size_type v12;
  uint64_t *v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;

  result->__r_.__value_.__l.__size_ = 0;
  p_size = &result->__r_.__value_.__l.__size_;
  result->__r_.__value_.__r.__words[2] = 0;
  result->__r_.__value_.__r.__words[0] = (std::string::size_type)&result->__r_.__value_.__l.__size_;
  v3 = a2 + 1;
  v4 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    v5 = result;
    do
    {
      v6 = (unsigned __int8 *)*p_size;
      v7 = *((unsigned __int8 *)v4 + 32);
      v8 = (uint64_t **)p_size;
      v9 = (char *)p_size;
      if (*p_size)
      {
        while (1)
        {
          while (1)
          {
            v9 = (char *)v6;
            v10 = v6[32];
            if (v7 >= v10)
              break;
            v6 = *(unsigned __int8 **)v9;
            v8 = (uint64_t **)v9;
            if (!*(_QWORD *)v9)
              goto LABEL_11;
          }
          if (v10 >= v7)
            break;
          v6 = (unsigned __int8 *)*((_QWORD *)v9 + 1);
          if (!v6)
          {
            v8 = (uint64_t **)(v9 + 8);
            goto LABEL_11;
          }
        }
      }
      else
      {
LABEL_11:
        v11 = v9;
        v9 = (char *)operator new(0x40uLL);
        v9[32] = v7;
        *((_QWORD *)v9 + 6) = 0;
        *((_QWORD *)v9 + 7) = 0;
        *((_QWORD *)v9 + 5) = 0;
        *(_QWORD *)v9 = 0;
        *((_QWORD *)v9 + 1) = 0;
        *((_QWORD *)v9 + 2) = v11;
        *v8 = (uint64_t *)v9;
        v12 = *(_QWORD *)v5->__r_.__value_.__l.__data_;
        v13 = (uint64_t *)v9;
        if (v12)
        {
          v5->__r_.__value_.__r.__words[0] = v12;
          v13 = *v8;
        }
        sub_20AB96C04((uint64_t *)v5->__r_.__value_.__l.__size_, v13);
        ++v5->__r_.__value_.__r.__words[2];
      }
      result = std::string::operator=((std::string *)(v9 + 40), (const std::string *)(v4 + 8));
      v14 = (_QWORD *)v4[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (_QWORD *)v4[2];
          v16 = *v15 == (_QWORD)v4;
          v4 = v15;
        }
        while (!v16);
      }
      v4 = v15;
    }
    while (v15 != v3);
  }
  return result;
}

uint64_t sub_20ABBADA4(const char **a1, _QWORD *a2, uint64_t *a3)
{
  const char *v5;
  uint64_t v6;
  _QWORD *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  int v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  uint64_t v15;
  const std::string *v16;
  std::string *v17;
  std::string *v18;
  _BOOL4 v19;
  _BOOL4 v20;
  double *i;
  double v22;
  unsigned __int8 v23;
  char *v24;
  std::string *v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  const std::ctype_base::mask *v33;
  std::ios_base *v34;
  std::ctype<char> *v35;
  uint64_t v36;
  std::locale *rdbuf;
  std::locale *v38;
  uint64_t v39;
  _QWORD *v40;
  _BYTE *v41;
  int v42;
  std::ios_base *v43;
  std::locale *v44;
  std::locale *v45;
  BOOL v46;
  uint64_t v47;
  int64x2_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  int64x2_t v55;
  unint64_t v56;
  unint64_t v57;
  uint8x8_t v58;
  _QWORD **v59;
  _QWORD *v60;
  unint64_t v61;
  uint64_t v62;
  float v63;
  float v64;
  _BOOL8 v65;
  unint64_t v66;
  unint64_t v67;
  size_t prime;
  void *v69;
  void *v70;
  uint64_t v71;
  _QWORD *v72;
  size_t v73;
  size_t v74;
  size_t v75;
  _QWORD *j;
  size_t v77;
  uint64_t v78;
  unint64_t v79;
  uint8x8_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  size_t v84;
  uint64_t v85;
  _QWORD *v86;
  unint64_t v87;
  void *v88;
  double *v89;
  double *v90;
  BOOL v91;
  void *v92;
  int v93;
  _QWORD *v94;
  _QWORD *v95;
  _QWORD *v97;
  const std::string *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  int64x2_t v103;
  uint64_t v104;
  std::string __p;
  const char *v106;
  _BYTE v107[32];
  __int128 v108;
  std::string v109;
  char **v110;
  char *v111[2];
  double *v112;
  std::string __str;
  uint64_t v114;
  __int128 v115;
  std::locale v116;
  std::locale __loc;
  std::locale v118;
  stat __dst;
  int v120;
  int v121;
  int v122;
  std::locale v123;
  std::locale v124;
  std::locale v125;
  _QWORD v126[2];
  _BYTE v127[120];
  uint64_t v128;
  _QWORD v129[21];

  v129[19] = *MEMORY[0x24BDAC8D0];
  v5 = *a1;
  if (v5[23] < 0)
    v5 = *(const char **)v5;
  v6 = 0;
  if (stat(v5, &__dst))
    return v6;
  if ((__dst.st_mode & 0xF000) != 0x4000)
    return v6;
  *((_BYTE *)&__str.__r_.__value_.__s + 23) = 13;
  strcpy((char *)&__str, "image-points.");
  v7 = (_QWORD *)*a2;
  v6 = 1;
  v97 = a2 + 1;
  if ((_QWORD *)*a2 == a2 + 1)
    return v6;
  v101 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  v102 = *MEMORY[0x24BEDB7E0];
  v100 = a3 + 2;
  while (1)
  {
    v8 = *a1;
    v9 = operator new();
    v10 = v9;
    if (v8[23] < 0)
    {
      sub_20AB88C14((_BYTE *)v9, *(void **)v8, *((_QWORD *)v8 + 1));
    }
    else
    {
      v11 = *(_OWORD *)v8;
      *(_QWORD *)(v9 + 16) = *((_QWORD *)v8 + 2);
      *(_OWORD *)v9 = v11;
    }
    v12 = *((char *)v7 + 63);
    v13 = v12 >= 0 ? (const std::string::value_type *)(v7 + 5) : (const std::string::value_type *)v7[5];
    v14 = v12 >= 0 ? *((unsigned __int8 *)v7 + 63) : v7[6];
    std::string::append((std::string *)v10, v13, v14);
    v15 = operator new();
    v16 = (const std::string *)v15;
    if (*(char *)(v10 + 23) < 0)
    {
      sub_20AB88C14((_BYTE *)v15, *(void **)v10, *(_QWORD *)(v10 + 8));
      if (*(char *)(v10 + 23) < 0)
        operator delete(*(void **)v10);
    }
    else
    {
      *(_OWORD *)v15 = *(_OWORD *)v10;
      *(_QWORD *)(v15 + 16) = *(_QWORD *)(v10 + 16);
    }
    MEMORY[0x20BD2D02C](v10, 0x1012C40EC159624);
    v111[0] = 0;
    v111[1] = 0;
    memset(v107, 0, sizeof(v107));
    v108 = 0u;
    memset(&v109, 0, sizeof(v109));
    v110 = v111;
    v112 = 0;
    HIBYTE(__dst.st_gid) = 4;
    strcpy((char *)&__dst, ".txt");
    v99 = v16;
    std::string::operator=((std::string *)v107, v16);
    std::string::operator=((std::string *)&v107[24], &__str);
    v17 = &v109;
    std::string::operator=(&v109, (const std::string *)&__dst);
    if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = (std::string *)((char *)&v109 + HIBYTE(v109.__r_.__value_.__r.__words[2]));
    else
      v18 = (std::string *)(v109.__r_.__value_.__r.__words[0] + v109.__r_.__value_.__l.__size_);
    if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v17 = (std::string *)v109.__r_.__value_.__r.__words[0];
    for (; v17 != v18; v17 = (std::string *)((char *)v17 + 1))
      v17->__r_.__value_.__s.__data_[0] = __tolower(v17->__r_.__value_.__s.__data_[0]);
    v19 = cva::adp::io::FileDirectory::parseDirectory((cva::adp::io::FileDirectory *)v107);
    v20 = v19;
    if (SHIBYTE(__dst.st_gid) < 0)
    {
      operator delete(*(void **)&__dst.st_dev);
      if (!v20)
      {
LABEL_183:
        v93 = 5;
        goto LABEL_188;
      }
    }
    else if (!v19)
    {
      goto LABEL_183;
    }
    for (i = v112; ; v112 = i)
    {
      if (i == (double *)v111)
      {
        v93 = 0;
        goto LABEL_188;
      }
      v22 = i[4];
      v23 = *((_BYTE *)v7 + 32);
      v24 = (char *)operator new(0xBB80uLL);
      cva::adp::io::FileDirectory::currentFilePath((cva::adp::io::FileDirectory *)v107, &__p);
      v25 = (std::string *)operator new();
      v26 = (unint64_t)v25;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        sub_20AB88C14(v25, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      else
        *v25 = __p;
      v27 = v24 + 48000;
      v103 = vdupq_n_s64((unint64_t)v24);
      v106 = (const char *)v26;
      cva::adp::io::openInputStream(&v106, v126);
      v28 = v128;
      if (v128 && (v127[*(_QWORD *)(v126[0] - 24) + 16] & 2) == 0)
      {
        v29 = 0;
        while (1)
        {
          v31 = std::istream::peek();
          if (v31 > 0xFF || (*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v31 + 60) & 0x400) == 0)
          {
LABEL_76:
            v26 = (unint64_t)v106;
            break;
          }
          v114 = 0;
          LOBYTE(v115) = 1;
          *((_QWORD *)&v115 + 1) = v29;
          sub_20ABBBB80(v126);
          v32 = std::istream::peek();
          std::ios_base::getloc((const std::ios_base *)((char *)v126 + *(_QWORD *)(v126[0] - 24)));
          v33 = std::ctype<char>::classic_table();
          if (v32 != 91)
          {
            MEMORY[0x20BD2CDEC](v126, &v114);
            MEMORY[0x20BD2CDEC](v126, (char *)&v114 + 4);
            goto LABEL_58;
          }
          memmove(&__dst, v33, 0x400uLL);
          v122 |= 0x4000u;
          v120 |= 0x4000u;
          v121 |= 0x4000u;
          v34 = (std::ios_base *)((char *)v126 + *(_QWORD *)(v126[0] - 24));
          std::ios_base::getloc(v34);
          v35 = (std::ctype<char> *)operator new();
          std::ctype<char>::ctype(v35, (const std::ctype_base::mask *)&__dst, 0, 0);
          v36 = std::locale::id::__get(MEMORY[0x24BEDB350]);
          std::locale::__install_ctor(&__loc, &v116, v35, v36);
          std::ios_base::getloc(v34);
          std::ios_base::imbue(v34, &__loc);
          std::locale::~locale(&v125);
          rdbuf = (std::locale *)v34->__rdbuf_;
          if (rdbuf)
          {
            v38 = rdbuf + 1;
            (*((void (**)(std::locale *, std::locale *))rdbuf->__locale_ + 2))(rdbuf, &__loc);
            std::locale::locale(&v124, v38);
            std::locale::operator=(v38, &__loc);
            std::locale::~locale(&v124);
          }
          std::locale::~locale(&v118);
          std::locale::~locale(&__loc);
          std::locale::~locale(&v116);
          MEMORY[0x20BD2CDEC](v126, &v114);
          MEMORY[0x20BD2CDEC](v126, (char *)&v114 + 4);
          MEMORY[0x20BD2CDBC](&v125, v126, 0);
          if (LOBYTE(v125.__locale_))
          {
            v39 = v126[0];
            v40 = *(_QWORD **)&v127[*(_QWORD *)(v126[0] - 24) + 24];
            v41 = (_BYTE *)v40[3];
            if (v41 != (_BYTE *)v40[4])
            {
              v40[3] = v41 + 1;
              LOBYTE(v40) = *v41;
LABEL_51:
              v42 = v40;
              std::ios_base::clear((std::ios_base *)((char *)v126 + *(_QWORD *)(v39 - 24)), *(_DWORD *)&v127[*(_QWORD *)(v39 - 24) + 16]);
              if (v42 == 93)
                goto LABEL_55;
              goto LABEL_54;
            }
            LODWORD(v40) = (*(uint64_t (**)(_QWORD *))(*v40 + 80))(v40);
            v39 = v126[0];
            if ((_DWORD)v40 != -1)
              goto LABEL_51;
            std::ios_base::clear((std::ios_base *)((char *)v126 + *(_QWORD *)(v126[0] - 24)), *(_DWORD *)&v127[*(_QWORD *)(v126[0] - 24) + 16] | 6);
          }
LABEL_54:
          std::ios_base::clear((std::ios_base *)((char *)v126 + *(_QWORD *)(v126[0] - 24)), *(_DWORD *)&v127[*(_QWORD *)(v126[0] - 24) + 16] | 4);
LABEL_55:
          v43 = (std::ios_base *)((char *)v126 + *(_QWORD *)(v126[0] - 24));
          std::ios_base::getloc(v43);
          std::ios_base::imbue(v43, &v123);
          std::locale::~locale(&v125);
          v44 = (std::locale *)v43->__rdbuf_;
          if (v44)
          {
            v45 = v44 + 1;
            (*((void (**)(std::locale *, std::locale *))v44->__locale_ + 2))(v44, &v123);
            std::locale::locale(&v124, v45);
            std::locale::operator=(v45, &v123);
            std::locale::~locale(&v124);
          }
          std::locale::~locale(&__loc);
LABEL_58:
          std::locale::~locale(&v123);
          v46 = *(float *)&v114 >= 0.0;
          if (*((float *)&v114 + 1) < 0.0)
            v46 = 0;
          LOBYTE(v115) = v46;
          sub_20ABBBB80(v126);
          v47 = v103.i64[1];
          v48.i64[0] = v103.i64[0];
          if (v103.i64[1] < (unint64_t)v27)
          {
            *(_QWORD *)v103.i64[1] = v114;
            *(_OWORD *)(v103.i64[1] + 8) = v115;
            v30 = v103.i64[1] + 24;
          }
          else
          {
            v49 = 0xAAAAAAAAAAAAAAABLL * ((v103.i64[1] - v103.i64[0]) >> 3) + 1;
            if (v49 > 0xAAAAAAAAAAAAAAALL)
              abort();
            if (0x5555555555555556 * ((uint64_t)&v27[-v103.i64[0]] >> 3) > v49)
              v49 = 0x5555555555555556 * ((uint64_t)&v27[-v103.i64[0]] >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v27[-v103.i64[0]] >> 3) >= 0x555555555555555)
              v50 = 0xAAAAAAAAAAAAAAALL;
            else
              v50 = v49;
            if (v50)
            {
              if (v50 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_210;
              v51 = (char *)operator new(24 * v50);
            }
            else
            {
              v51 = 0;
            }
            v52 = &v51[8 * ((v103.i64[1] - v103.i64[0]) >> 3)];
            *(_QWORD *)v52 = v114;
            *(_OWORD *)(v52 + 8) = v115;
            v53 = v52;
            if (v103.i64[1] != v103.i64[0])
            {
              do
              {
                v54 = *(_QWORD *)(v47 - 24);
                v47 -= 24;
                *((_QWORD *)v53 - 3) = v54;
                v53 -= 24;
                *(_OWORD *)(v53 + 8) = *(_OWORD *)(v47 + 8);
              }
              while (v47 != v103.i64[0]);
              v47 = v103.i64[0];
            }
            v27 = &v51[24 * v50];
            v30 = (uint64_t)(v52 + 24);
            v48.i64[0] = (uint64_t)v53;
            if (v47)
            {
              v104 = (uint64_t)v53;
              operator delete((void *)v47);
              v48.i64[0] = v104;
            }
          }
          ++v29;
          v48.i64[1] = v30;
          v103 = v48;
          if ((v127[*(_QWORD *)(v126[0] - 24) + 16] & 2) != 0)
            goto LABEL_76;
        }
      }
      v126[0] = v102;
      *(_QWORD *)((char *)v126 + *(_QWORD *)(v102 - 24)) = v101;
      MEMORY[0x20BD2CD80](v127);
      std::istream::~istream();
      MEMORY[0x20BD2D008](v129);
      if (v26)
      {
        if (*(char *)(v26 + 23) < 0)
          operator delete(*(void **)v26);
        MEMORY[0x20BD2D02C](v26, 0x1012C40EC159624);
      }
      v55 = v103;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        v55 = v103;
      }
      if (!v28)
        break;
      v56 = (unint64_t)v22 & 0xFFFFFFFFFFFFFFLL | ((unint64_t)v23 << 56);
      v57 = a3[1];
      if (v57)
      {
        v58 = (uint8x8_t)vcnt_s8((int8x8_t)v57);
        v58.i16[0] = vaddlv_u8(v58);
        if (v58.u32[0] > 1uLL)
        {
          v26 = (unint64_t)v22 & 0xFFFFFFFFFFFFFFLL | ((unint64_t)v23 << 56);
          if (v56 >= v57)
            v26 = v56 % v57;
        }
        else
        {
          v26 = (v57 - 1) & v56;
        }
        v59 = *(_QWORD ***)(*a3 + 8 * v26);
        if (v59)
        {
          v60 = *v59;
          if (*v59)
          {
            if (v58.u32[0] < 2uLL)
            {
              while (1)
              {
                v62 = v60[1];
                if (v62 == v56)
                {
                  if (v60[2] == v56)
                    goto LABEL_165;
                }
                else if ((v62 & (v57 - 1)) != v26)
                {
                  goto LABEL_104;
                }
                v60 = (_QWORD *)*v60;
                if (!v60)
                  goto LABEL_104;
              }
            }
            do
            {
              v61 = v60[1];
              if (v61 == v56)
              {
                if (v60[2] == v56)
                  goto LABEL_165;
              }
              else
              {
                if (v61 >= v57)
                  v61 %= v57;
                if (v61 != v26)
                  break;
              }
              v60 = (_QWORD *)*v60;
            }
            while (v60);
          }
        }
      }
LABEL_104:
      v60 = operator new(0x30uLL);
      *v60 = 0;
      v60[1] = v56;
      v60[2] = v56;
      v60[3] = 0;
      v60[4] = 0;
      v60[5] = 0;
      v63 = (float)(unint64_t)(a3[3] + 1);
      v64 = *((float *)a3 + 8);
      if (v57 && (float)(v64 * (float)v57) >= v63)
      {
        v55 = v103;
        goto LABEL_155;
      }
      v65 = (v57 & (v57 - 1)) != 0;
      if (v57 < 3)
        v65 = 1;
      v66 = v65 | (2 * v57);
      v67 = vcvtps_u32_f32(v63 / v64);
      if (v66 <= v67)
        prime = v67;
      else
        prime = v66;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
        v57 = a3[1];
      }
      v55 = v103;
      if (prime > v57)
        goto LABEL_117;
      if (prime >= v57)
        goto LABEL_142;
      v79 = vcvtps_u32_f32((float)(unint64_t)a3[3] / *((float *)a3 + 8));
      if (v57 < 3 || (v80 = (uint8x8_t)vcnt_s8((int8x8_t)v57), v80.i16[0] = vaddlv_u8(v80), v80.u32[0] > 1uLL))
      {
        v79 = std::__next_prime(v79);
        v55 = v103;
      }
      else
      {
        v81 = 1 << -(char)__clz(v79 - 1);
        if (v79 >= 2)
          v79 = v81;
      }
      if (prime <= v79)
        prime = v79;
      if (prime < v57)
      {
        if (!prime)
        {
          v92 = (void *)*a3;
          *a3 = 0;
          if (v92)
          {
            operator delete(v92);
            v55 = v103;
          }
          v57 = 0;
          a3[1] = 0;
          goto LABEL_142;
        }
LABEL_117:
        if (prime >> 61)
LABEL_210:
          sub_20ABAD09C();
        v69 = operator new(8 * prime);
        v70 = (void *)*a3;
        *a3 = (uint64_t)v69;
        if (v70)
          operator delete(v70);
        v71 = 0;
        a3[1] = prime;
        do
          *(_QWORD *)(*a3 + 8 * v71++) = 0;
        while (prime != v71);
        v72 = (_QWORD *)*v100;
        v55 = v103;
        if (!*v100)
        {
LABEL_141:
          v57 = prime;
          goto LABEL_142;
        }
        v73 = v72[1];
        v74 = prime - 1;
        if ((prime & (prime - 1)) == 0)
        {
          v75 = v73 & v74;
          *(_QWORD *)(*a3 + 8 * v75) = v100;
          for (j = (_QWORD *)*v72; *v72; j = (_QWORD *)*v72)
          {
            v77 = j[1] & v74;
            if (v77 == v75)
            {
              v72 = j;
            }
            else if (*(_QWORD *)(*a3 + 8 * v77))
            {
              *v72 = *j;
              v78 = 8 * v77;
              *j = **(_QWORD **)(*a3 + v78);
              **(_QWORD **)(*a3 + v78) = j;
            }
            else
            {
              *(_QWORD *)(*a3 + 8 * v77) = v72;
              v72 = j;
              v75 = v77;
            }
          }
          goto LABEL_141;
        }
        if (v73 >= prime)
          v73 %= prime;
        *(_QWORD *)(*a3 + 8 * v73) = v100;
        v82 = (_QWORD *)*v72;
        if (!*v72)
          goto LABEL_141;
        while (2)
        {
          v84 = v82[1];
          if (v84 >= prime)
            v84 %= prime;
          if (v84 != v73)
          {
            if (!*(_QWORD *)(*a3 + 8 * v84))
            {
              *(_QWORD *)(*a3 + 8 * v84) = v72;
LABEL_146:
              v72 = v82;
              v82 = (_QWORD *)*v82;
              v73 = v84;
              if (!v82)
                goto LABEL_141;
              continue;
            }
            *v72 = *v82;
            v83 = 8 * v84;
            *v82 = **(_QWORD **)(*a3 + v83);
            **(_QWORD **)(*a3 + v83) = v82;
            v82 = v72;
          }
          break;
        }
        v84 = v73;
        goto LABEL_146;
      }
      v57 = a3[1];
LABEL_142:
      if ((v57 & (v57 - 1)) != 0)
      {
        if (v56 >= v57)
          v26 = v56 % v57;
        else
          v26 = (unint64_t)v22 & 0xFFFFFFFFFFFFFFLL | ((unint64_t)v23 << 56);
      }
      else
      {
        v26 = (v57 - 1) & v56;
      }
LABEL_155:
      v85 = *a3;
      v86 = *(_QWORD **)(*a3 + 8 * v26);
      if (v86)
      {
        *v60 = *v86;
LABEL_163:
        *v86 = v60;
        goto LABEL_164;
      }
      *v60 = *v100;
      *v100 = v60;
      *(_QWORD *)(v85 + 8 * v26) = v100;
      if (*v60)
      {
        v87 = *(_QWORD *)(*v60 + 8);
        if ((v57 & (v57 - 1)) != 0)
        {
          if (v87 >= v57)
            v87 %= v57;
        }
        else
        {
          v87 &= v57 - 1;
        }
        v86 = (_QWORD *)(*a3 + 8 * v87);
        goto LABEL_163;
      }
LABEL_164:
      ++a3[3];
LABEL_165:
      v88 = (void *)v60[3];
      if (v88)
      {
        v60[4] = v88;
        operator delete(v88);
        v55 = v103;
      }
      *(int64x2_t *)(v60 + 3) = v55;
      v60[5] = v27;
      v89 = v112;
      v90 = (double *)*((_QWORD *)v112 + 1);
      if (v90)
      {
        do
        {
          i = v90;
          v90 = *(double **)v90;
        }
        while (v90);
      }
      else
      {
        do
        {
          i = (double *)*((_QWORD *)v89 + 2);
          v91 = *(_QWORD *)i == (_QWORD)v89;
          v89 = i;
        }
        while (!v91);
      }
    }
    if (v55.i64[0])
      operator delete((void *)v55.i64[0]);
    v93 = 1;
LABEL_188:
    sub_20AB96A90(v111[0]);
    if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v109.__r_.__value_.__l.__data_);
      if (SHIBYTE(v108) < 0)
      {
LABEL_202:
        operator delete(*(void **)&v107[24]);
        if ((v107[23] & 0x80000000) == 0)
          goto LABEL_191;
        goto LABEL_203;
      }
    }
    else if (SHIBYTE(v108) < 0)
    {
      goto LABEL_202;
    }
    if ((v107[23] & 0x80000000) == 0)
      goto LABEL_191;
LABEL_203:
    operator delete(*(void **)v107);
LABEL_191:
    if (SHIBYTE(v99->__r_.__value_.__r.__words[2]) < 0)
      operator delete(v99->__r_.__value_.__l.__data_);
    MEMORY[0x20BD2D02C]();
    if (v93 != 5)
    {
      if (v93)
        break;
    }
    v94 = (_QWORD *)v7[1];
    if (v94)
    {
      do
      {
        v95 = v94;
        v94 = (_QWORD *)*v94;
      }
      while (v94);
    }
    else
    {
      do
      {
        v95 = (_QWORD *)v7[2];
        v91 = *v95 == (_QWORD)v7;
        v7 = v95;
      }
      while (!v91);
    }
    v7 = v95;
    if (v95 == v97)
    {
      v6 = 1;
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return v6;
      goto LABEL_205;
    }
  }
  v6 = 0;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
LABEL_205:
    operator delete(__str.__r_.__value_.__l.__data_);
  return v6;
}

_QWORD *sub_20ABBBB80(_QWORD *a1)
{
  _QWORD *v2;
  const std::locale::facet *v3;
  _QWORD *v4;
  _BYTE *v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  std::locale v11;
  char v12;

  MEMORY[0x20BD2CDBC](&v12, a1, 1);
  if (!v12)
    return a1;
  v2 = a1 + 5;
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
  v3 = std::locale::use_facet(&v11, MEMORY[0x24BEDB350]);
  std::locale::~locale(&v11);
  while (1)
  {
    v4 = *(_QWORD **)((char *)v2 + *(_QWORD *)(*a1 - 24));
    v5 = (_BYTE *)v4[3];
    if (v5 == (_BYTE *)v4[4])
      break;
    LOBYTE(v6) = *v5;
LABEL_7:
    if ((v6 & 0x80) != 0 || (*((_DWORD *)&v3[1].~facet + v6) & 0x4000) == 0)
    {
      v9 = 0;
      goto LABEL_12;
    }
    v7 = *(_QWORD **)((char *)v2 + *(_QWORD *)(*a1 - 24));
    v8 = v7[3];
    if (v8 == v7[4])
      (*(void (**)(_QWORD *))(*v7 + 80))(v7);
    else
      v7[3] = v8 + 1;
  }
  v6 = (*(uint64_t (**)(_QWORD *))(*v4 + 72))(v4);
  if (v6 != -1)
    goto LABEL_7;
  v9 = 2;
LABEL_12:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v9);
  return a1;
}

uint64_t *sub_20ABBBC9C(uint64_t *a1, uint64_t a2)
{
  int v4;
  const std::ctype_base::mask *v5;
  std::ios_base *v6;
  std::ctype<char> *v7;
  uint64_t v8;
  std::locale *rdbuf;
  std::locale *v10;
  uint64_t v11;
  _QWORD *v12;
  _BYTE *v13;
  int v14;
  std::ios_base *v15;
  std::locale *v16;
  std::locale *v17;
  std::locale v19;
  std::locale v20;
  std::locale __loc;
  std::locale v22;
  std::ctype_base::mask __dst[44];
  int v24;
  int v25;
  int v26;
  std::locale v27;
  std::locale v28;
  std::locale v29;

  sub_20ABBBB80(a1);
  v4 = std::istream::peek();
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
  v5 = std::ctype<char>::classic_table();
  if (v4 != 91)
  {
    MEMORY[0x20BD2CDEC](a1, a2);
    MEMORY[0x20BD2CDEC](a1, a2 + 4);
    MEMORY[0x20BD2CDEC](a1, a2 + 8);
    goto LABEL_16;
  }
  memmove(__dst, v5, 0x400uLL);
  v26 |= 0x4000u;
  v24 |= 0x4000u;
  v25 |= 0x4000u;
  v6 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::getloc(v6);
  v7 = (std::ctype<char> *)operator new();
  std::ctype<char>::ctype(v7, __dst, 0, 0);
  v8 = std::locale::id::__get(MEMORY[0x24BEDB350]);
  std::locale::__install_ctor(&__loc, &v20, v7, v8);
  std::ios_base::getloc(v6);
  std::ios_base::imbue(v6, &__loc);
  std::locale::~locale(&v29);
  rdbuf = (std::locale *)v6->__rdbuf_;
  if (rdbuf)
  {
    v10 = rdbuf + 1;
    (*((void (**)(std::locale *, std::locale *))rdbuf->__locale_ + 2))(rdbuf, &__loc);
    std::locale::locale(&v28, v10);
    std::locale::operator=(v10, &__loc);
    std::locale::~locale(&v28);
  }
  std::locale::~locale(&v22);
  std::locale::~locale(&__loc);
  std::locale::~locale(&v20);
  MEMORY[0x20BD2CDEC](a1, a2);
  MEMORY[0x20BD2CDEC](a1, a2 + 4);
  MEMORY[0x20BD2CDEC](a1, a2 + 8);
  MEMORY[0x20BD2CDBC](&v29, a1, 0);
  if (LOBYTE(v29.__locale_))
  {
    v11 = *a1;
    v12 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v13 = (_BYTE *)v12[3];
    if (v13 != (_BYTE *)v12[4])
    {
      v12[3] = v13 + 1;
      LOBYTE(v12) = *v13;
      goto LABEL_9;
    }
    LODWORD(v12) = (*(uint64_t (**)(_QWORD *))(*v12 + 80))(v12);
    v11 = *a1;
    if ((_DWORD)v12 != -1)
    {
LABEL_9:
      v14 = v12;
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(v11 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(v11 - 24) + 32));
      if (v14 == 93)
        goto LABEL_13;
      goto LABEL_12;
    }
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(v11 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(v11 - 24) + 32) | 6);
  }
LABEL_12:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
LABEL_13:
  v15 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::getloc(v15);
  std::ios_base::imbue(v15, &v27);
  std::locale::~locale(&v29);
  v16 = (std::locale *)v15->__rdbuf_;
  if (v16)
  {
    v17 = v16 + 1;
    (*((void (**)(std::locale *, std::locale *))v16->__locale_ + 2))(v16, &v27);
    std::locale::locale(&v28, v17);
    std::locale::operator=(v17, &v27);
    std::locale::~locale(&v28);
  }
  std::locale::~locale(&v19);
LABEL_16:
  std::locale::~locale(&v27);
  return a1;
}

char *sub_20ABBBF84(char **a1, char *a2, __int128 *a3)
{
  char *v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __int128 v11;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  __int128 v26;
  _OWORD *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *i;
  char *v33;
  __int128 v35;

  v4 = a2;
  v7 = *a1;
  v6 = (unint64_t)a1[1];
  v8 = a2 - *a1;
  v9 = v8 >> 5;
  v10 = (unint64_t)a1[2];
  if (v6 < v10)
  {
    if (a2 == (char *)v6)
    {
      *(_QWORD *)a2 = *(_QWORD *)a3;
      v20 = &v7[32 * v9];
      *((_QWORD *)v20 + 1) = *((_QWORD *)a3 + 1);
      *((_OWORD *)v20 + 1) = a3[1];
      a1[1] = a2 + 32;
    }
    else
    {
      v11 = *a3;
      v35 = a3[1];
      v12 = (char *)(v6 - 32);
      v13 = a1[1];
      if (v6 >= 0x20)
      {
        v14 = v6 - 32;
        v13 = a1[1];
        do
        {
          *(_QWORD *)v13 = *(_QWORD *)v14;
          *((_QWORD *)v13 + 1) = *(_QWORD *)(v14 + 8);
          *((_OWORD *)v13 + 1) = *(_OWORD *)(v14 + 16);
          v13 += 32;
          v14 += 32;
        }
        while (v14 < v6);
      }
      a1[1] = v13;
      if ((char *)v6 != a2 + 32)
      {
        do
        {
          if (v12 != (char *)v6)
          {
            v15 = *((_QWORD *)v12 - 4);
            *(_QWORD *)(v6 - 32) = v15 & 0xFFFFFFFFFFFFFFLL | ((unint64_t)*(unsigned __int8 *)(v6 - 25) << 56);
            *(_QWORD *)(v6 - 32) = v15 & 0xFFFFFFFFFFFFFFLL | ((unint64_t)*(v12 - 25) << 56);
          }
          *(_QWORD *)(v6 - 24) = *((_QWORD *)v12 - 3);
          *(_OWORD *)(v6 - 16) = *((_OWORD *)v12 - 1);
          v12 -= 32;
          v6 -= 32;
        }
        while (v12 != a2);
      }
      *(_OWORD *)a2 = v11;
      *(_OWORD *)&v7[32 * v9 + 16] = v35;
    }
    return v4;
  }
  v16 = ((uint64_t)(v6 - (_QWORD)v7) >> 5) + 1;
  if (v16 >> 59)
    abort();
  v17 = v10 - (_QWORD)v7;
  if (v17 >> 4 > v16)
    v16 = v17 >> 4;
  if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0)
    v18 = 0x7FFFFFFFFFFFFFFLL;
  else
    v18 = v16;
  if (v18)
  {
    if (v18 >> 59)
      goto LABEL_43;
    v19 = (char *)operator new(32 * v18);
  }
  else
  {
    v19 = 0;
  }
  v21 = &v19[32 * v9];
  v22 = &v19[32 * v18];
  if (v9 == v18)
  {
    if (v8 >= 1)
    {
      v23 = v9 + 2;
      if (v9 >= -1)
        v23 = v9 + 1;
      v21 -= 32 * (v23 >> 1);
      goto LABEL_33;
    }
    if (v7 == v4)
      v24 = 1;
    else
      v24 = v8 >> 4;
    if (!(v24 >> 59))
    {
      v25 = (char *)operator new(32 * v24);
      v21 = &v25[32 * (v24 >> 2)];
      v22 = &v25[32 * v24];
      if (v19)
        operator delete(v19);
      goto LABEL_33;
    }
LABEL_43:
    sub_20ABAD09C();
  }
LABEL_33:
  v26 = a3[1];
  *(_OWORD *)v21 = *a3;
  *((_OWORD *)v21 + 1) = v26;
  v27 = v21 + 32;
  v28 = *a1;
  v29 = v21;
  if (*a1 != v4)
  {
    v30 = v4;
    v29 = v21;
    do
    {
      v31 = *((_QWORD *)v30 - 4);
      v30 -= 32;
      *((_QWORD *)v29 - 4) = v31;
      v29 -= 32;
      *((_QWORD *)v29 + 1) = *((_QWORD *)v30 + 1);
      *((_OWORD *)v29 + 1) = *((_OWORD *)v30 + 1);
    }
    while (v30 != v28);
  }
  for (i = a1[1]; v4 != i; v4 += 32)
  {
    *(_QWORD *)v27 = *(_QWORD *)v4;
    *((_QWORD *)v27 + 1) = *((_QWORD *)v4 + 1);
    v27[1] = *((_OWORD *)v4 + 1);
    v27 += 2;
  }
  v33 = *a1;
  *a1 = v29;
  a1[1] = (char *)v27;
  a1[2] = v22;
  if (v33)
    operator delete(v33);
  return v21;
}

uint64_t sub_20ABBC228()
{
  std::__libcpp_verbose_abort("bad_weak_ptr was thrown in -fno-exceptions mode");
  return sub_20ABBC23C();
}

void sub_20ABBC23C(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  char *v4;
  char *v5;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  uint8x8_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  void **v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  float v25;
  float v26;
  _BOOL8 v27;
  unint64_t v28;
  unint64_t v29;
  size_t prime;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  int8x8_t v46;
  unint64_t v47;
  uint8x8_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;

  v5 = *(char **)(*a3 + 24);
  v4 = *(char **)(*a3 + 32);
  if (v4 == v5)
    return;
  v9 = (v4 - v5) >> 5;
  do
  {
    v10 = v9 >> 1;
    v11 = (unint64_t *)&v5[32 * (v9 >> 1)];
    v13 = *v11;
    v12 = (char *)(v11 + 4);
    v9 += ~(v9 >> 1);
    if (v13 < a2)
      v5 = v12;
    else
      v9 = v10;
  }
  while (v9);
  if (v5 == v4 || *(_QWORD *)v5 != a2)
    return;
  v14 = *(_QWORD *)(a1 + 8);
  if (v14)
  {
    v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
    v15.i16[0] = vaddlv_u8(v15);
    if (v15.u32[0] > 1uLL)
    {
      v16 = a2;
      if (v14 <= a2)
        v16 = a2 % v14;
    }
    else
    {
      v16 = (v14 - 1) & a2;
    }
    v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v16);
    if (v17)
    {
      v18 = (_QWORD *)*v17;
      if (v18)
      {
        if (v15.u32[0] < 2uLL)
        {
          while (1)
          {
            v20 = v18[1];
            if (v20 == a2)
            {
              if (v18[2] == a2)
                goto LABEL_68;
            }
            else if ((v20 & (v14 - 1)) != v16)
            {
              goto LABEL_30;
            }
            v18 = (_QWORD *)*v18;
            if (!v18)
              goto LABEL_30;
          }
        }
        do
        {
          v19 = v18[1];
          if (v19 == a2)
          {
            if (v18[2] == a2)
            {
LABEL_68:
              v34 = sub_20ABBCD64((uint64_t)(v18 + 3), *((_QWORD *)v5 + 3), (uint64_t *)v5 + 3);
              v36 = *a3;
              v35 = a3[1];
              if (v35)
              {
                v37 = (unint64_t *)(v35 + 8);
                do
                  v38 = __ldxr(v37);
                while (__stxr(v38 + 1, v37));
              }
              v39 = (std::__shared_weak_count *)v34[4];
              v34[3] = v36;
              v34[4] = v35;
              if (v39)
              {
                p_shared_owners = (unint64_t *)&v39->__shared_owners_;
                do
                  v41 = __ldaxr(p_shared_owners);
                while (__stlxr(v41 - 1, p_shared_owners));
LABEL_116:
                if (!v41)
                {
                  ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                  std::__shared_weak_count::__release_weak(v39);
                }
              }
              return;
            }
          }
          else
          {
            if (v19 >= v14)
              v19 %= v14;
            if (v19 != v16)
              break;
          }
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
    }
LABEL_30:
    if (v15.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v14 <= a2)
        v3 = a2 % v14;
    }
    else
    {
      v3 = (v14 - 1) & a2;
    }
    v21 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v21)
    {
      v22 = (char *)*v21;
      if (*v21)
      {
        if (v15.u32[0] < 2uLL)
        {
          while (1)
          {
            v24 = *((_QWORD *)v22 + 1);
            if (v24 == a2)
            {
              if (*((_QWORD *)v22 + 2) == a2)
                goto LABEL_94;
            }
            else if ((v24 & (v14 - 1)) != v3)
            {
              goto LABEL_49;
            }
            v22 = *(char **)v22;
            if (!v22)
              goto LABEL_49;
          }
        }
        do
        {
          v23 = *((_QWORD *)v22 + 1);
          if (v23 == a2)
          {
            if (*((_QWORD *)v22 + 2) == a2)
              goto LABEL_94;
          }
          else
          {
            if (v23 >= v14)
              v23 %= v14;
            if (v23 != v3)
              break;
          }
          v22 = *(char **)v22;
        }
        while (v22);
      }
    }
  }
LABEL_49:
  v22 = (char *)operator new(0x40uLL);
  *(_QWORD *)v22 = 0;
  *((_QWORD *)v22 + 1) = a2;
  *((_QWORD *)v22 + 2) = a2;
  *(_OWORD *)(v22 + 24) = 0u;
  *(_OWORD *)(v22 + 40) = 0u;
  *((_DWORD *)v22 + 14) = 1065353216;
  v25 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v26 = *(float *)(a1 + 32);
  if (!v14 || (float)(v26 * (float)v14) < v25)
  {
    v27 = 1;
    if (v14 >= 3)
      v27 = (v14 & (v14 - 1)) != 0;
    v28 = v27 | (2 * v14);
    v29 = vcvtps_u32_f32(v25 / v26);
    if (v28 <= v29)
      prime = v29;
    else
      prime = v28;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v14 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v14)
      goto LABEL_61;
    if (prime < v14)
    {
      v31 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v14 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v14), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        v31 = std::__next_prime(v31);
      }
      else
      {
        v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2)
          v31 = v33;
      }
      if (prime <= v31)
        prime = v31;
      if (prime < v14)
LABEL_61:
        sub_20ABBC798(a1, prime);
    }
    v14 = *(_QWORD *)(a1 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v14 <= a2)
        v3 = a2 % v14;
      else
        v3 = a2;
    }
    else
    {
      v3 = (v14 - 1) & a2;
    }
  }
  v42 = *(_QWORD *)a1;
  v43 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v43)
  {
    *(_QWORD *)v22 = *v43;
LABEL_92:
    *v43 = v22;
    goto LABEL_93;
  }
  *(_QWORD *)v22 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v22;
  *(_QWORD *)(v42 + 8 * v3) = a1 + 16;
  if (*(_QWORD *)v22)
  {
    v44 = *(_QWORD *)(*(_QWORD *)v22 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v44 >= v14)
        v44 %= v14;
    }
    else
    {
      v44 &= v14 - 1;
    }
    v43 = (_QWORD *)(*(_QWORD *)a1 + 8 * v44);
    goto LABEL_92;
  }
LABEL_93:
  ++*(_QWORD *)(a1 + 24);
LABEL_94:
  v45 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 40) / *((float *)v22 + 14));
  if (v45 == 1)
  {
    v45 = 2;
  }
  else if ((v45 & (v45 - 1)) != 0)
  {
    v45 = std::__next_prime(v45);
  }
  v46 = *(int8x8_t *)(v22 + 32);
  if (v45 > *(_QWORD *)&v46)
    goto LABEL_109;
  if (v45 < *(_QWORD *)&v46)
  {
    v47 = vcvtps_u32_f32((float)*((unint64_t *)v22 + 6) / *((float *)v22 + 14));
    if (*(_QWORD *)&v46 < 3uLL || (v48 = (uint8x8_t)vcnt_s8(v46), v48.i16[0] = vaddlv_u8(v48), v48.u32[0] > 1uLL))
    {
      v47 = std::__next_prime(v47);
    }
    else
    {
      v49 = 1 << -(char)__clz(v47 - 1);
      if (v47 >= 2)
        v47 = v49;
    }
    if (v45 <= v47)
      v45 = v47;
    if (v45 < *(_QWORD *)&v46)
LABEL_109:
      sub_20ABBC798((uint64_t)(v22 + 24), v45);
  }
  v50 = sub_20ABBCD64((uint64_t)(v22 + 24), *((_QWORD *)v5 + 3), (uint64_t *)v5 + 3);
  v52 = *a3;
  v51 = a3[1];
  if (v51)
  {
    v53 = (unint64_t *)(v51 + 8);
    do
      v54 = __ldxr(v53);
    while (__stxr(v54 + 1, v53));
  }
  v39 = (std::__shared_weak_count *)v50[4];
  v50[3] = v52;
  v50[4] = v51;
  if (v39)
  {
    v55 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldaxr(v55);
    while (__stlxr(v41 - 1, v55));
    goto LABEL_116;
  }
}

void sub_20ABBC798(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;

  if (!a2)
  {
    v15 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v15)
      operator delete(v15);
    *(_QWORD *)(a1 + 8) = 0;
    return;
  }
  if (a2 >> 61)
    sub_20ABAD09C();
  v4 = operator new(8 * a2);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v6 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
  while (a2 != v6);
  v8 = a1 + 16;
  v7 = *(_QWORD **)(a1 + 16);
  if (v7)
  {
    v9 = v7[1];
    v10 = a2 - 1;
    if ((a2 & (a2 - 1)) == 0)
    {
      v11 = v9 & v10;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = v8;
      while (1)
      {
        v12 = (_QWORD *)*v7;
        if (!*v7)
          break;
        v13 = v12[1] & v10;
        if (v13 == v11)
        {
          v7 = (_QWORD *)*v7;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
        {
          *v7 = *v12;
          v14 = 8 * v13;
          *v12 = **(_QWORD **)(*(_QWORD *)a1 + v14);
          **(_QWORD **)(*(_QWORD *)a1 + v14) = v12;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
          v7 = v12;
          v11 = v13;
        }
      }
      return;
    }
    if (v9 >= a2)
      v9 %= a2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = v8;
    v16 = (_QWORD *)*v7;
    if (*v7)
    {
      do
      {
        v18 = v16[1];
        if (v18 >= a2)
          v18 %= a2;
        if (v18 != v9)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v18))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v7;
            goto LABEL_26;
          }
          *v7 = *v16;
          v17 = 8 * v18;
          *v16 = **(_QWORD **)(*(_QWORD *)a1 + v17);
          **(_QWORD **)(*(_QWORD *)a1 + v17) = v16;
          v16 = v7;
        }
        v18 = v9;
LABEL_26:
        v7 = v16;
        v16 = (_QWORD *)*v16;
        v9 = v18;
      }
      while (v16);
    }
  }
}

void sub_20ABBC93C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD2D02CLL);
}

uint64_t sub_20ABBC960(uint64_t result)
{
  uint64_t v1;
  void *v2;
  std::__shared_weak_count *v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    *(_BYTE *)(v1 + 64) = 0;
    v2 = *(void **)(v1 + 24);
    *(_QWORD *)(v1 + 32) = v2;
    if (v2)
      operator delete(v2);
    v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
    JUMPOUT(0x20BD2D02CLL);
  }
  return result;
}

uint64_t *sub_20ABBC9C4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  BOOL v13;
  uint64_t **v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v14 = (uint64_t **)v7[2];
    if (*v14 != v7)
      break;
    if (*((_BYTE *)v7 + 24))
    {
      v16 = (_QWORD *)*v7;
      if (*v7)
        goto LABEL_50;
    }
    else
    {
      *((_BYTE *)v7 + 24) = 1;
      *((_BYTE *)v14 + 24) = 0;
      v20 = (uint64_t *)v7[1];
      *v14 = v20;
      if (v20)
        v20[2] = (uint64_t)v14;
      v7[2] = (uint64_t)v14[2];
      v14[2][*v14[2] != (_QWORD)v14] = (uint64_t)v7;
      v7[1] = (uint64_t)v14;
      v14[2] = v7;
      if (result == (uint64_t *)v14)
        result = v7;
      v7 = *v14;
      v16 = (_QWORD *)**v14;
      if (v16)
      {
LABEL_50:
        if (!*((_BYTE *)v16 + 24))
          goto LABEL_71;
      }
    }
    v21 = (uint64_t *)v7[1];
    if (v21 && !*((_BYTE *)v21 + 24))
    {
      if (v16 && !*((_BYTE *)v16 + 24))
      {
LABEL_71:
        v21 = v7;
      }
      else
      {
        *((_BYTE *)v21 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v22 = *v21;
        v7[1] = *v21;
        if (v22)
          *(_QWORD *)(v22 + 16) = v7;
        v21[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v21;
        *v21 = (uint64_t)v7;
        v7[2] = (uint64_t)v21;
        v16 = v7;
      }
      v27 = (uint64_t *)v21[2];
      *((_BYTE *)v21 + 24) = *((_BYTE *)v27 + 24);
      *((_BYTE *)v27 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      v28 = *v27;
      v29 = *(_QWORD *)(*v27 + 8);
      *v27 = v29;
      if (v29)
        *(_QWORD *)(v29 + 16) = v27;
      *(_QWORD *)(v28 + 16) = v27[2];
      *(_QWORD *)(v27[2] + 8 * (*(_QWORD *)v27[2] != (_QWORD)v27)) = v28;
      *(_QWORD *)(v28 + 8) = v27;
      v27[2] = v28;
      return result;
    }
    *((_BYTE *)v7 + 24) = 0;
    v12 = (uint64_t *)v7[2];
    if (*((_BYTE *)v12 + 24))
      v13 = v12 == result;
    else
      v13 = 1;
    if (v13)
      goto LABEL_61;
LABEL_26:
    v7 = *(uint64_t **)(v12[2] + 8 * (*(_QWORD *)v12[2] == (_QWORD)v12));
  }
  if (*((_BYTE *)v7 + 24))
  {
    v15 = (_QWORD *)*v7;
    if (!*v7)
    {
LABEL_40:
      v19 = (uint64_t *)v7[1];
      if (v19 && !*((_BYTE *)v19 + 24))
        goto LABEL_67;
      *((_BYTE *)v7 + 24) = 0;
      v12 = (uint64_t *)v7[2];
      if (v12 == result)
      {
        v12 = result;
LABEL_61:
        *((_BYTE *)v12 + 24) = 1;
        return result;
      }
      if (!*((_BYTE *)v12 + 24))
        goto LABEL_61;
      goto LABEL_26;
    }
  }
  else
  {
    *((_BYTE *)v7 + 24) = 1;
    *((_BYTE *)v14 + 24) = 0;
    v17 = v14[1];
    v18 = (uint64_t *)*v17;
    v14[1] = (uint64_t *)*v17;
    if (v18)
      v18[2] = (uint64_t)v14;
    v17[2] = (uint64_t)v14[2];
    v14[2][*v14[2] != (_QWORD)v14] = (uint64_t)v17;
    *v17 = (uint64_t)v14;
    v14[2] = v17;
    if (result == (uint64_t *)*v7)
      result = v7;
    v7 = *(uint64_t **)(*v7 + 8);
    v15 = (_QWORD *)*v7;
    if (!*v7)
      goto LABEL_40;
  }
  if (*((_BYTE *)v15 + 24))
    goto LABEL_40;
  v19 = (uint64_t *)v7[1];
  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_67:
    v15 = v7;
  }
  else
  {
    *((_BYTE *)v15 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v23 = v15[1];
    *v7 = v23;
    if (v23)
      *(_QWORD *)(v23 + 16) = v7;
    v15[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    v19 = v7;
  }
  v24 = v15[2];
  *((_BYTE *)v15 + 24) = *(_BYTE *)(v24 + 24);
  *(_BYTE *)(v24 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  v25 = *(uint64_t **)(v24 + 8);
  v26 = *v25;
  *(_QWORD *)(v24 + 8) = *v25;
  if (v26)
    *(_QWORD *)(v26 + 16) = v24;
  v25[2] = *(_QWORD *)(v24 + 16);
  *(_QWORD *)(*(_QWORD *)(v24 + 16) + 8 * (**(_QWORD **)(v24 + 16) != v24)) = v25;
  *v25 = v24;
  *(_QWORD *)(v24 + 16) = v25;
  return result;
}

_QWORD *sub_20ABBCD64(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x28uLL);
  *v10 = 0;
  v10[1] = a2;
  v13 = *a3;
  v10[3] = 0;
  v10[4] = 0;
  v10[2] = v13;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_44;
    if (prime < v7)
    {
      v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (prime <= v20)
        prime = v20;
      if (prime < v7)
LABEL_44:
        sub_20ABBC798(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2)
        v3 = a2 % v7;
      else
        v3 = a2;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *v10 = *v24;
LABEL_58:
    *v24 = v10;
    goto LABEL_59;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v23 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v25 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v25 >= v7)
        v25 %= v7;
    }
    else
    {
      v25 &= v7 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

uint64_t cva::adp::Session<float>::loadImageMeasurementsSet(_QWORD *a1, uint64_t *a2)
{
  const char **v3;
  uint64_t v4;
  std::string v6;

  v3 = (const char **)(a1 + 13);
  sub_20ABBAC68(&v6, a1);
  v4 = sub_20ABBADA4(v3, &v6, a2);
  sub_20AB96A90((char *)v6.__r_.__value_.__l.__size_);
  return v4;
}

BOOL cva::adp::Session<float>::loadDiscretePoses(uint64_t a1, uint64_t *a2)
{
  __int128 *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  const char *v8;
  int v9;
  unint64_t v10;
  _QWORD *v11;
  float v12;
  float cosval;
  __float2 v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  unint64_t v28;
  unint64_t v29;
  uint8x8_t v30;
  void **v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  float v35;
  float v36;
  _BOOL8 v37;
  unint64_t v38;
  unint64_t v39;
  size_t prime;
  void *v41;
  void *v42;
  uint64_t v43;
  _QWORD *v44;
  size_t v45;
  size_t v46;
  size_t v47;
  _QWORD *i;
  size_t v49;
  uint64_t v50;
  unint64_t v51;
  uint8x8_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  size_t v56;
  uint64_t v57;
  _QWORD *v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  float v63;
  float v64;
  void *v65;
  unint64_t v67;
  std::string::value_type __s[23];
  char v69;
  const char *v70;
  uint64_t v71;
  float v72;
  unint64_t v73;
  _QWORD v74[2];
  _BYTE v75[120];
  unint64_t v76;
  _QWORD v77[21];

  v77[19] = *MEMORY[0x24BDAC8D0];
  v69 = 9;
  strcpy(__s, "WtoP.traj");
  v3 = *(__int128 **)(a1 + 96);
  v4 = operator new();
  v5 = v4;
  if (*((char *)v3 + 23) < 0)
  {
    sub_20AB88C14((_BYTE *)v4, *(void **)v3, *((_QWORD *)v3 + 1));
  }
  else
  {
    v6 = *v3;
    *(_QWORD *)(v4 + 16) = *((_QWORD *)v3 + 2);
    *(_OWORD *)v4 = v6;
  }
  std::string::append((std::string *)v5, __s, 9uLL);
  v7 = operator new();
  v8 = (const char *)v7;
  if (*(char *)(v5 + 23) < 0)
  {
    sub_20AB88C14((_BYTE *)v7, *(void **)v5, *(_QWORD *)(v5 + 8));
    v9 = *(char *)(v5 + 23);
    v70 = v8;
    if (v9 < 0)
      operator delete(*(void **)v5);
  }
  else
  {
    *(_OWORD *)v7 = *(_OWORD *)v5;
    *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
    v70 = (const char *)v7;
  }
  MEMORY[0x20BD2D02C](v5, 0x1012C40EC159624);
  cva::adp::io::openInputStream(&v70, v74);
  v10 = v76;
  if (v76)
  {
    v73 = 0;
    v72 = 0.0;
    v71 = 0;
    if ((v75[*(_QWORD *)(v74[0] - 24) + 16] & 2) == 0)
    {
      v67 = v76;
      v11 = a2 + 2;
      while (1)
      {
        MEMORY[0x20BD2CE04](v74, &v73);
        v28 = v73;
        v29 = a2[1];
        if (v29)
        {
          v30 = (uint8x8_t)vcnt_s8((int8x8_t)v29);
          v30.i16[0] = vaddlv_u8(v30);
          if (v30.u32[0] > 1uLL)
          {
            v10 = v73;
            if (v73 >= v29)
              v10 = v73 % v29;
          }
          else
          {
            v10 = (v29 - 1) & v73;
          }
          v31 = *(void ***)(*a2 + 8 * v10);
          if (v31)
          {
            v32 = (char *)*v31;
            if (*v31)
            {
              if (v30.u32[0] < 2uLL)
              {
                while (1)
                {
                  v34 = *((_QWORD *)v32 + 1);
                  if (v34 == v73)
                  {
                    if (*((_QWORD *)v32 + 2) == v73)
                      goto LABEL_93;
                  }
                  else if ((v34 & (v29 - 1)) != v10)
                  {
                    goto LABEL_33;
                  }
                  v32 = *(char **)v32;
                  if (!v32)
                    goto LABEL_33;
                }
              }
              do
              {
                v33 = *((_QWORD *)v32 + 1);
                if (v33 == v73)
                {
                  if (*((_QWORD *)v32 + 2) == v73)
                    goto LABEL_93;
                }
                else
                {
                  if (v33 >= v29)
                    v33 %= v29;
                  if (v33 != v10)
                    break;
                }
                v32 = *(char **)v32;
              }
              while (v32);
            }
          }
        }
LABEL_33:
        v32 = (char *)operator new(0x58uLL);
        *(_QWORD *)v32 = 0;
        *((_QWORD *)v32 + 1) = v28;
        *((_QWORD *)v32 + 2) = v28;
        *(_OWORD *)(v32 + 24) = 0u;
        *(_OWORD *)(v32 + 56) = 0u;
        *(_OWORD *)(v32 + 40) = 0u;
        v32[24] = 1;
        *((_DWORD *)v32 + 15) = 1065353216;
        *(_OWORD *)(v32 + 28) = xmmword_20AC06220;
        *(_OWORD *)(v32 + 44) = unk_20AC06230;
        *((_QWORD *)v32 + 8) = 0;
        *((_QWORD *)v32 + 9) = 0;
        *((_DWORD *)v32 + 18) = 0;
        v32[76] = 1;
        *((_DWORD *)v32 + 20) = 0;
        v35 = (float)(unint64_t)(a2[3] + 1);
        v36 = *((float *)a2 + 8);
        if (!v29 || (float)(v36 * (float)v29) < v35)
          break;
LABEL_83:
        v57 = *a2;
        v58 = *(_QWORD **)(*a2 + 8 * v10);
        if (v58)
        {
          *(_QWORD *)v32 = *v58;
        }
        else
        {
          *(_QWORD *)v32 = *v11;
          *v11 = v32;
          *(_QWORD *)(v57 + 8 * v10) = v11;
          if (!*(_QWORD *)v32)
            goto LABEL_92;
          v59 = *(_QWORD *)(*(_QWORD *)v32 + 8);
          if ((v29 & (v29 - 1)) != 0)
          {
            if (v59 >= v29)
              v59 %= v29;
          }
          else
          {
            v59 &= v29 - 1;
          }
          v58 = (_QWORD *)(*a2 + 8 * v59);
        }
        *v58 = v32;
LABEL_92:
        ++a2[3];
LABEL_93:
        v60 = (uint64_t *)MEMORY[0x20BD2CDEC](v74, v32 + 80);
        v61 = sub_20ABBBC9C(v60, (uint64_t)&v71);
        sub_20ABBBC9C(v61, (uint64_t)(v32 + 64));
        v62 = v71;
        v63 = v72;
        v64 = (float)((float)(*(float *)&v71 * *(float *)&v71) + (float)(*((float *)&v71 + 1) * *((float *)&v71 + 1)))
            + (float)(v63 * v63);
        if (v64 >= 0.0061)
        {
          v12 = sqrtf(v64);
          v14 = __sincosf_stret(v12);
          cosval = v14.__cosval;
          v15 = v14.__sinval / v12;
          v16 = (float)(1.0 / v64) * (float)(1.0 - v14.__cosval);
        }
        else
        {
          v16 = 0.5 - (float)(v64 * (float)((float)(v64 / -720.0) + 0.041667));
          v15 = 1.0 - (float)(v64 * (float)(0.16667 - (float)(v64 * (float)((float)(v64 / -5040.0) + 0.0083333))));
          cosval = 1.0 - (float)(v64 * v16);
        }
        v17 = *(float *)&v62 * v16;
        v18 = *((float *)&v62 + 1) * v16;
        v19 = cosval + (float)((float)(*(float *)&v62 * v16) * *(float *)&v62);
        v20 = cosval + (float)((float)(*((float *)&v62 + 1) * v16) * *((float *)&v62 + 1));
        v21 = cosval + (float)((float)(v63 * v16) * v63);
        v22 = *((float *)&v62 + 1) * (float)(*(float *)&v62 * v16);
        v23 = v63 * v17;
        v24 = v63 * v18;
        v25 = *(float *)&v62 * v15;
        v26 = *((float *)&v62 + 1) * v15;
        v27 = v63 * v15;
        v32[24] = 1;
        *((float *)v32 + 7) = v19;
        *((float *)v32 + 8) = v22 + v27;
        *((float *)v32 + 9) = v23 - v26;
        *((float *)v32 + 10) = v22 - v27;
        *((float *)v32 + 11) = v20;
        *((float *)v32 + 12) = v25 + v24;
        *((float *)v32 + 13) = v26 + v23;
        *((float *)v32 + 14) = v24 - v25;
        *((float *)v32 + 15) = v21;
        if ((v75[*(_QWORD *)(v74[0] - 24) + 16] & 2) != 0)
        {
          v8 = v70;
          v10 = v67;
          goto LABEL_105;
        }
      }
      v37 = (v29 & (v29 - 1)) != 0;
      if (v29 < 3)
        v37 = 1;
      v38 = v37 | (2 * v29);
      v39 = vcvtps_u32_f32(v35 / v36);
      if (v38 <= v39)
        prime = v39;
      else
        prime = v38;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
        v29 = a2[1];
      }
      if (prime <= v29)
      {
        if (prime >= v29)
          goto LABEL_70;
        v51 = vcvtps_u32_f32((float)(unint64_t)a2[3] / *((float *)a2 + 8));
        if (v29 < 3 || (v52 = (uint8x8_t)vcnt_s8((int8x8_t)v29), v52.i16[0] = vaddlv_u8(v52), v52.u32[0] > 1uLL))
        {
          v51 = std::__next_prime(v51);
        }
        else
        {
          v53 = 1 << -(char)__clz(v51 - 1);
          if (v51 >= 2)
            v51 = v53;
        }
        if (prime <= v51)
          prime = v51;
        if (prime >= v29)
        {
          v29 = a2[1];
LABEL_70:
          if ((v29 & (v29 - 1)) != 0)
          {
            if (v28 >= v29)
              v10 = v28 % v29;
            else
              v10 = v28;
          }
          else
          {
            v10 = (v29 - 1) & v28;
          }
          goto LABEL_83;
        }
        if (!prime)
        {
          v65 = (void *)*a2;
          *a2 = 0;
          if (v65)
            operator delete(v65);
          v29 = 0;
          a2[1] = 0;
          goto LABEL_70;
        }
      }
      if (prime >> 61)
        sub_20ABAD09C();
      v41 = operator new(8 * prime);
      v42 = (void *)*a2;
      *a2 = (uint64_t)v41;
      if (v42)
        operator delete(v42);
      v43 = 0;
      a2[1] = prime;
      do
        *(_QWORD *)(*a2 + 8 * v43++) = 0;
      while (prime != v43);
      v44 = (_QWORD *)*v11;
      if (!*v11)
      {
LABEL_69:
        v29 = prime;
        goto LABEL_70;
      }
      v45 = v44[1];
      v46 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v47 = v45 & v46;
        *(_QWORD *)(*a2 + 8 * v47) = v11;
        for (i = (_QWORD *)*v44; *v44; i = (_QWORD *)*v44)
        {
          v49 = i[1] & v46;
          if (v49 == v47)
          {
            v44 = i;
          }
          else if (*(_QWORD *)(*a2 + 8 * v49))
          {
            *v44 = *i;
            v50 = 8 * v49;
            *i = **(_QWORD **)(*a2 + v50);
            **(_QWORD **)(*a2 + v50) = i;
          }
          else
          {
            *(_QWORD *)(*a2 + 8 * v49) = v44;
            v44 = i;
            v47 = v49;
          }
        }
        goto LABEL_69;
      }
      if (v45 >= prime)
        v45 %= prime;
      *(_QWORD *)(*a2 + 8 * v45) = v11;
      v54 = (_QWORD *)*v44;
      if (!*v44)
        goto LABEL_69;
      while (1)
      {
        v56 = v54[1];
        if (v56 >= prime)
          v56 %= prime;
        if (v56 != v45)
        {
          if (!*(_QWORD *)(*a2 + 8 * v56))
          {
            *(_QWORD *)(*a2 + 8 * v56) = v44;
            goto LABEL_74;
          }
          *v44 = *v54;
          v55 = 8 * v56;
          *v54 = **(_QWORD **)(*a2 + v55);
          **(_QWORD **)(*a2 + v55) = v54;
          v54 = v44;
        }
        v56 = v45;
LABEL_74:
        v44 = v54;
        v54 = (_QWORD *)*v54;
        v45 = v56;
        if (!v54)
          goto LABEL_69;
      }
    }
  }
LABEL_105:
  v74[0] = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)v74 + *(_QWORD *)(v74[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  MEMORY[0x20BD2CD80](v75);
  std::istream::~istream();
  MEMORY[0x20BD2D008](v77);
  v70 = 0;
  if (v8)
  {
    if (v8[23] < 0)
      operator delete(*(void **)v8);
    MEMORY[0x20BD2D02C](v8, 0x1012C40EC159624);
  }
  if (v69 < 0)
    operator delete(*(void **)__s);
  return v10 != 0;
}

uint64_t cva::adp::Session<float>::setDataPath(uint64_t a1, __int128 **this)
{
  __int128 *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  const char *v9;
  uint64_t v10;

  cva::adp::io::Paths::sensorsDirectory(this, &v10);
  v4 = *this;
  if (*((char *)*this + 23) < 0)
    v4 = *(__int128 **)v4;
  v5 = access((const char *)v4, 0);
  v6 = v10;
  if (v5)
  {
    v7 = 0;
    v10 = 0;
    if (v6)
      goto LABEL_5;
  }
  else
  {
    v9 = (const char *)v10;
    if (*(char *)(v10 + 23) < 0)
      v9 = *(const char **)v10;
    if (access(v9, 0))
    {
      v7 = 0;
      v10 = 0;
      if ((*(char *)(v6 + 23) & 0x80000000) == 0)
        goto LABEL_7;
      goto LABEL_6;
    }
    if ((__int128 **)(a1 + 96) != this)
      std::string::operator=(*(std::string **)(a1 + 96), (const std::string *)*this);
    std::string::operator=(*(std::string **)(a1 + 104), (const std::string *)v6);
    v7 = 1;
    v6 = v10;
    v10 = 0;
    if (v6)
    {
LABEL_5:
      if ((*(char *)(v6 + 23) & 0x80000000) == 0)
      {
LABEL_7:
        MEMORY[0x20BD2D02C](v6, 0x1012C40EC159624);
        return v7;
      }
LABEL_6:
      operator delete(*(void **)v6);
      goto LABEL_7;
    }
  }
  return v7;
}

uint64_t cva::adp::Session<float>::setDataPath(uint64_t a1, const std::string **a2, const std::string **a3)
{
  const char *v6;
  int v7;
  uint64_t result;
  const char *v9;
  int v10;

  v6 = (const char *)*a2;
  if (SHIBYTE((*a2)->__r_.__value_.__r.__words[2]) < 0)
    v6 = *(const char **)v6;
  v7 = access(v6, 0);
  result = 0;
  if (!v7)
  {
    v9 = (const char *)*a3;
    if (SHIBYTE((*a3)->__r_.__value_.__r.__words[2]) < 0)
      v9 = *(const char **)v9;
    v10 = access(v9, 0);
    result = 0;
    if (!v10)
    {
      if ((const std::string **)(a1 + 96) != a2)
        std::string::operator=(*(std::string **)(a1 + 96), *a2);
      if ((const std::string **)(a1 + 104) != a3)
        std::string::operator=(*(std::string **)(a1 + 104), *a3);
      return 1;
    }
  }
  return result;
}

uint64_t cva::adp::Session<float>::serializer(uint64_t a1)
{
  return a1 + 56;
}

uint64_t cva::adp::Session<float>::dataPath(uint64_t a1)
{
  return a1 + 96;
}

uint64_t cva::adp::Session<float>::sensorsPath(uint64_t a1)
{
  return a1 + 104;
}

BOOL cva::adp::Session<double>::loadDevice(uint64_t a1, uint64_t **a2, const std::string *a3)
{
  std::string::size_type *v5;
  _BOOL8 result;
  std::string *v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  uint64_t **v12;
  int v13;
  uint64_t *v14;
  uint64_t **v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  void **v19;
  size_t v20;
  char *v21;
  void **v22;
  void **v23;
  uint64_t v24;
  void **i;
  std::string *v26;
  const std::string *j;
  int v28;
  std::string::size_type v29;
  uint64_t v30;
  char v31;
  char *v32;
  unint64_t v33;
  char *v34;
  uint64_t *v35;
  _QWORD *v36;
  size_t __sz;
  uint64_t **v38;
  uint64_t *v39;
  uint64_t v40;
  void *__p;
  void **v42;
  uint64_t v43;
  const std::string *v44[4];
  std::string v45;
  std::string __dst;
  char v47;
  void *v48[2];
  char v49;
  void **v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v5 = (std::string::size_type *)(a1 + 56);
  result = cva::adp::io::PListSerializer::read((_QWORD *)(a1 + 56), *a2);
  if (!result)
    return result;
  if (!*v5)
    return 0;
  v7 = (std::string *)(a1 + 72);
  std::string::operator=((std::string *)(a1 + 72), a3);
  *((_BYTE *)&v45.__r_.__value_.__s + 23) = 18;
  strcpy((char *)&v45, "Sensors/Intrinsics");
  if (*(char *)(a1 + 95) < 0)
  {
    sub_20AB88C14(&__dst, *(void **)(a1 + 72), *(_QWORD *)(a1 + 80));
  }
  else
  {
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 88);
  }
  cva::adp::PListPath::convertToPath(&v45, (uint64_t)v48);
  if (v49 >= 0)
    v8 = (const std::string::value_type *)v48;
  else
    v8 = (const std::string::value_type *)v48[0];
  if (v49 >= 0)
    v9 = v49;
  else
    v9 = (std::string::size_type)v48[1];
  std::string::append(&__dst, v8, v9);
  if (v49 < 0)
    operator delete(v48[0]);
  HIBYTE(v44[2]) = 18;
  strcpy((char *)v44, "Sensors/Extrinsics");
  if (*(char *)(a1 + 95) < 0)
  {
    sub_20AB88C14(&v45, *(void **)(a1 + 72), *(_QWORD *)(a1 + 80));
  }
  else
  {
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 88);
  }
  cva::adp::PListPath::convertToPath(v44, (uint64_t)v48);
  if (v49 >= 0)
    v10 = (const std::string::value_type *)v48;
  else
    v10 = (const std::string::value_type *)v48[0];
  if (v49 >= 0)
    v11 = v49;
  else
    v11 = (std::string::size_type)v48[1];
  std::string::append(&v45, v10, v11);
  if (v49 < 0)
    operator delete(v48[0]);
  memset(v44, 0, 24);
  if (!cva::adp::io::PListSerializer::getKeys(v5, &__dst, (void **)v44))
  {
    v13 = 0;
    goto LABEL_66;
  }
  __p = 0;
  v42 = 0;
  v43 = 0;
  if (!cva::adp::io::PListSerializer::getKeys(v5, &v45, &__p))
  {
    v13 = 0;
    v22 = (void **)__p;
    if (!__p)
      goto LABEL_66;
    goto LABEL_60;
  }
  v39 = 0;
  v40 = 0;
  v12 = &v39;
  v38 = &v39;
  v49 = 6;
  strcpy((char *)v48, "Camera");
  v13 = cva::adp::io::detail::keysToNames(v5, (const void **)&__dst.__r_.__value_.__l.__data_, v44, (uint64_t)v48, (uint64_t **)&v38);
  if (v49 < 0)
    operator delete(v48[0]);
  if (v13)
  {
    v36 = 0;
    __sz = 0;
    v35 = (uint64_t *)&v36;
    v49 = 8;
    strcpy((char *)v48, "Platform");
    v13 = 0;
    if (cva::adp::io::detail::createFromToTree(&v38, (uint64_t *)&__p, (unsigned __int8 *)v48, &v35))
    {
      v14 = v39;
      if (v39)
      {
        while (1)
        {
          while (1)
          {
            v15 = (uint64_t **)v14;
            v16 = v14[4];
            if (v16 < 0x100)
              break;
            v14 = *v15;
            v12 = v15;
            if (!*v15)
              goto LABEL_39;
          }
          if (v16 == 255)
            break;
          v14 = v15[1];
          if (!v14)
          {
            v12 = v15 + 1;
            goto LABEL_39;
          }
        }
      }
      else
      {
        v15 = &v39;
LABEL_39:
        v17 = (uint64_t *)v15;
        v15 = (uint64_t **)operator new(0x40uLL);
        v15[4] = (uint64_t *)255;
        v15[5] = 0;
        v15[6] = 0;
        v15[7] = 0;
        *v15 = 0;
        v15[1] = 0;
        v15[2] = v17;
        *v12 = (uint64_t *)v15;
        v18 = (uint64_t *)v15;
        if (*v38)
        {
          v38 = (uint64_t **)*v38;
          v18 = *v12;
        }
        sub_20AB96C04(v39, v18);
        ++v40;
      }
      MEMORY[0x20BD2CD14](v15 + 5, "Platform");
      v19 = (void **)operator new(0x40uLL);
      *v19 = &unk_24C37FF68;
      v19[1] = &v38;
      v19[2] = v5;
      v19[3] = &__dst;
      v19[4] = &v35;
      v19[5] = &v45;
      v19[6] = (void *)a1;
      v19[7] = v48;
      v50 = v19;
      v32 = 0;
      v33 = 0;
      v34 = 0;
      v20 = __sz;
      if (__sz)
      {
        if ((__sz & 0x8000000000000000) != 0)
          abort();
        v32 = (char *)operator new(__sz);
        v33 = (unint64_t)v32;
        v34 = &v32[v20];
      }
      cva::adp::io::detail::findChildNodes(&v35, 255, (unint64_t *)&v32);
      v21 = v32;
      if (v32 == (char *)v33)
      {
        v13 = 0;
      }
      else
      {
        v47 = -1;
        if (!v50)
        {
          sub_20ABAC430();
          JUMPOUT(0x20ABBDFC8);
        }
        v13 = (*((uint64_t (**)(void **, char **, char *))*v50 + 6))(v50, &v32, &v47);
        v21 = v32;
      }
      if (v21)
      {
        v33 = (unint64_t)v21;
        operator delete(v21);
      }
      v23 = v50;
      if (v50 == v48)
      {
        v24 = 4;
        v23 = v48;
        goto LABEL_57;
      }
      if (v50)
      {
        v24 = 5;
LABEL_57:
        (*((void (**)(void))*v23 + v24))();
      }
    }
    sub_20ABAE468(v36);
  }
  sub_20AB96A90((char *)v39);
  v22 = (void **)__p;
  if (!__p)
    goto LABEL_66;
LABEL_60:
  for (i = v42; i != v22; i -= 3)
  {
    if (*((char *)i - 1) < 0)
      operator delete(*(i - 3));
  }
  operator delete(v22);
LABEL_66:
  v26 = (std::string *)v44[0];
  if (v44[0])
  {
    for (j = v44[1]; j != v26; --j)
    {
      if (SHIBYTE(j[-1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(j[-1].__r_.__value_.__l.__data_);
    }
    operator delete(v26);
  }
  if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_75;
    goto LABEL_86;
  }
  operator delete(v45.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_86:
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (v13)
      goto LABEL_76;
    return 0;
  }
LABEL_75:
  if (!v13)
    return 0;
LABEL_76:
  v49 = 7;
  strcpy((char *)v48, "Version");
  __dst.__r_.__value_.__r.__words[0] = 0;
  v28 = sub_20AB91378(v5, (std::string *)(a1 + 72), (uint64_t)v48, &__dst);
  v29 = __dst.__r_.__value_.__r.__words[0];
  if (!v28)
    v29 = 0x100000000;
  *(_QWORD *)(a1 + 24) = v29;
  if (v49 < 0)
    operator delete(v48[0]);
  v49 = 6;
  strcpy((char *)v48, "Device");
  v30 = a1 + 32;
  v31 = cva::adp::io::PListSerializer::getItem<std::string>(v5, v7, (uint64_t)v48, v30);
  if (v49 < 0)
    operator delete(v48[0]);
  if ((v31 & 1) == 0)
    MEMORY[0x20BD2CD14](v30, "Generic Device");
  return 1;
}

void sub_20ABBDFCC()
{
  JUMPOUT(0x20BD2D02CLL);
}

__n128 sub_20ABBDFE0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &unk_24C37FF68;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 sub_20ABBE030(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &unk_24C37FF68;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_20ABBE068()
{
  uint64_t v0;
  char *v1;
  unsigned __int8 **v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  _QWORD *v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  BOOL v16;
  _QWORD *v17;
  uint64_t v18;
  std::string::size_type *v19;
  __int128 v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  char v23;
  char v24;
  uint64_t v25;
  __int128 v26;
  double v27;
  int v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  unsigned __int8 *v32;
  uint64_t v33;
  uint64_t **v34;
  unsigned __int8 *v35;
  uint64_t **v36;
  unsigned int v37;
  _QWORD *v38;
  unsigned int v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  unint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  BOOL v49;
  _QWORD *v50;
  int v51;
  size_t v52;
  unint64_t v53;
  _BYTE *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  const void *v58;
  char v59;
  const std::string::value_type *v60;
  std::string::size_type v61;
  std::string *v62;
  std::string::size_type *v63;
  __int128 *v64;
  __int128 v65;
  const std::string::value_type *v66;
  std::string::size_type v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  int v72;
  _BOOL8 result;
  int v74;
  double v75;
  uint64_t v76;
  char *v77;
  char *v78;
  void *v79;
  char *v80;
  std::string::size_type v82;
  __int128 *v83;
  std::string::size_type *v84;
  __int128 v85;
  const std::string::value_type *v86;
  std::string::size_type v87;
  char v88;
  _BYTE *v89;
  int v90;
  int v91;
  int v92;
  BOOL v94;
  uint64_t v95;
  __int128 v96;
  std::__shared_weak_count *v97;
  int v98;
  int v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t **v103;
  unsigned int v104;
  uint64_t v105;
  char v106;
  uint64_t *v107;
  uint64_t **v108;
  uint64_t **v109;
  unsigned int v110;
  _BYTE *v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t *v114;
  int v115;
  _QWORD *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  uint64_t **v121;
  uint64_t *v122;
  unsigned int v123;
  BOOL v124;
  uint64_t **v125;
  const std::string::value_type *p_dst;
  std::string::size_type data_high;
  void *v128;
  const std::string::value_type *v129;
  std::string::size_type v130;
  const std::string::value_type *v131;
  std::string::size_type v132;
  const std::string::value_type *isa;
  std::string::size_type info;
  const std::string::value_type *v135;
  std::string::size_type v136;
  const std::string::value_type *v137;
  std::string::size_type v138;
  char v139;
  char v140;
  char v141;
  char v142;
  char v143;
  char v144;
  char v145;
  char v146;
  char v147;
  char v148;
  __int128 v149;
  uint64_t v150;
  double v151;
  double v152;
  double v153;
  double v154;
  double v155;
  long double v156;
  double v157;
  const std::string::value_type *v158;
  std::string::size_type v159;
  int v160;
  int v161;
  int v162;
  char v163;
  const std::string::value_type *v164;
  std::string::size_type v165;
  std::string::size_type v166;
  std::string *v167;
  CFStringRef v168;
  const void *v169;
  char v170;
  char v171;
  char v172;
  char v173;
  uint64_t v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  int v178;
  std::__shared_weak_count *v179;
  unint64_t *p_shared_owners;
  unint64_t v181;
  int v182;
  int v183;
  char v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  double v188;
  __int128 v189;
  __int128 v190;
  double v191;
  double v192;
  double v193;
  double v194;
  double v195;
  double v196;
  double v197;
  double v198;
  double cosval;
  double v200;
  __double2 v201;
  double v202;
  double v203;
  double v204;
  double v205;
  double v206;
  double v207;
  double v208;
  double v209;
  double v210;
  double v211;
  double v212;
  double v213;
  double v214;
  double v215;
  double v216;
  long double v217;
  double v218;
  double v219;
  long double v220;
  _Unwind_Exception *v221;
  _Unwind_Exception *v222;
  double v223;
  double v224;
  double v225;
  double v226;
  uint64_t v227;
  double v228;
  double v229;
  const __CFAllocator *v230;
  const __CFAllocator *v231;
  int64x2_t v232;
  char v233;
  _QWORD *v234;
  _QWORD *__s;
  uint64_t v236;
  std::__shared_weak_count *v237;
  _BYTE __p[2080];
  char v239[2056];
  uint64_t v240;
  void *v241[2];
  uint64_t v242;
  int v243;
  std::string v244;
  CFTypeRef cf;
  char v246;
  std::string::size_type v247;
  std::__shared_weak_count *v248;
  char v249[32];
  std::string v250;
  _BYTE v251[56];
  __int128 v252;
  __int128 v253;
  uint64_t v254;
  double v255;
  char v256;
  std::string v257;
  std::string v258;
  __CFString v259;
  __int128 v260;
  __int128 v261;
  uint64_t v262;
  __CFString __dst;
  __int128 v264;
  __int128 v265;
  uint64_t v266;

  v0 = MEMORY[0x24BDAC7A8]();
  v4 = *v2;
  v3 = v2[1];
  if (*v2 != v3)
  {
    v5 = (_QWORD *)v0;
    v233 = *v1;
    v231 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v230 = (const __CFAllocator *)*MEMORY[0x24BDBD258];
    v6 = 5.98;
    v7 = 0xA00000000;
    *(double *)&v8 = 0.0000002635;
    v232 = vdupq_n_s64(0x3FF921FB54442D18uLL);
    v234 = (_QWORD *)v0;
    while (1)
    {
      v9 = v5[1];
      v12 = *(_QWORD **)(v9 + 8);
      v10 = (_QWORD *)(v9 + 8);
      v11 = v12;
      if (!v12)
        goto LABEL_14;
      v13 = *v4;
      v14 = v10;
      do
      {
        v15 = v11[4];
        v16 = v15 >= v13;
        if (v15 >= v13)
          v17 = v11;
        else
          v17 = v11 + 1;
        if (v16)
          v14 = v11;
        v11 = (_QWORD *)*v17;
      }
      while (*v17);
      if (v14 == v10 || v14[4] > v13)
LABEL_14:
        v14 = v10;
      v19 = (std::string::size_type *)v5[2];
      v18 = v5[3];
      if (*(char *)(v18 + 23) < 0)
      {
        sub_20AB88C14(&v244, *(void **)v18, *(_QWORD *)(v18 + 8));
      }
      else
      {
        v20 = *(_OWORD *)v18;
        v244.__r_.__value_.__r.__words[2] = *(_QWORD *)(v18 + 16);
        *(_OWORD *)&v244.__r_.__value_.__l.__data_ = v20;
      }
      __s = v14 + 5;
      cva::adp::PListPath::convertToPath(v14 + 5, (uint64_t)__p);
      if (__p[23] >= 0)
        v21 = __p;
      else
        v21 = *(const std::string::value_type **)__p;
      if (__p[23] >= 0)
        v22 = __p[23];
      else
        v22 = *(_QWORD *)&__p[8];
      std::string::append(&v244, v21, v22);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      v243 = 0;
      v241[1] = 0;
      v241[0] = 0;
      v242 = 0;
      __p[23] = 12;
      strcpy(__p, "Camera Model");
      if (!cva::adp::io::PListSerializer::getItem<std::string>(v19, &v244, (uint64_t)__p, (uint64_t)v241))
      {
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
LABEL_48:
        v25 = 0;
        v28 = 0;
        goto LABEL_49;
      }
      v23 = sub_20ABB4464((int **)v241, &v243);
      v24 = v23;
      if ((__p[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)__p);
        if ((v24 & 1) == 0)
          goto LABEL_48;
      }
      else if ((v23 & 1) == 0)
      {
        goto LABEL_48;
      }
      *(double *)&v240 = 1.0;
      __p[23] = 18;
      strcpy(__p, "Standard Deviation");
      cva::adp::io::PListSerializer::getItem<double>(v19, &v244, (uint64_t)__p, &v240);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      switch(v243)
      {
        case 0:
          *(_QWORD *)__p = 0x3FF0000000000000;
          __p[8] = 1;
          *(_QWORD *)&__p[16] = 0x3FF0000000000000;
          __p[24] = 1;
          *(_QWORD *)&__p[32] = 0;
          *(_QWORD *)&__p[40] = 0;
          __p[48] = 1;
          *(_OWORD *)&__p[56] = xmmword_20AC06248;
          *(_OWORD *)&__p[72] = unk_20AC06258;
          *(_QWORD *)&__p[88] = 0x200000002;
          if (!sub_20ABC4320(v19, v18, __s, (uint64_t)__p))
            goto LABEL_44;
          v25 = operator new();
          *(_OWORD *)(v25 + 8) = xmmword_20AC05C90;
          *(_QWORD *)v25 = &off_24C37FB20;
          *(_OWORD *)(v25 + 32) = *(_OWORD *)__p;
          *(_OWORD *)(v25 + 41) = *(_OWORD *)&__p[9];
          *(_OWORD *)(v25 + 64) = *(_OWORD *)&__p[32];
          *(_BYTE *)(v25 + 80) = __p[48];
          v26 = *(_OWORD *)&__p[72];
          *(_OWORD *)(v25 + 88) = *(_OWORD *)&__p[56];
          *(_OWORD *)(v25 + 104) = v26;
          *(_QWORD *)(v25 + 120) = *(_QWORD *)&__p[88];
          v27 = *(double *)&v240;
          *(double *)(v25 + 16) = *(double *)&v240;
          *(double *)(v25 + 24) = v27 * v27 * v6;
          v28 = 1;
          goto LABEL_49;
        case 1:
          *(_QWORD *)__p = 0x3FF0000000000000;
          __p[8] = 1;
          *(_QWORD *)&__p[16] = 0x3FF0000000000000;
          __p[24] = 1;
          *(_QWORD *)&__p[32] = 0;
          *(_QWORD *)&__p[40] = 0;
          __p[48] = 1;
          *(_OWORD *)&__p[56] = xmmword_20AC06248;
          *(_OWORD *)&__p[72] = unk_20AC06258;
          *(_QWORD *)&__p[88] = 0x200000002;
          memset(v251, 0, 32);
          v251[32] = 1;
          *(_QWORD *)&v251[40] = 0x3FF921FB54442D18;
          *(_QWORD *)&v251[48] = v7;
          if (!sub_20ABC4320(v19, v18, __s, (uint64_t)__p))
            goto LABEL_44;
          if (*(char *)(v18 + 23) < 0)
          {
            sub_20AB88C14(&v258, *(void **)v18, *(_QWORD *)(v18 + 8));
          }
          else
          {
            v29 = *(_OWORD *)v18;
            v258.__r_.__value_.__r.__words[2] = *(_QWORD *)(v18 + 16);
            *(_OWORD *)&v258.__r_.__value_.__l.__data_ = v29;
          }
          cva::adp::PListPath::convertToPath(__s, (uint64_t)&__dst);
          if (SHIBYTE(__dst.data) >= 0)
            p_dst = (const std::string::value_type *)&__dst;
          else
            p_dst = (const std::string::value_type *)__dst.isa;
          if (SHIBYTE(__dst.data) >= 0)
            data_high = HIBYTE(__dst.data);
          else
            data_high = __dst.info;
          std::string::append(&v258, p_dst, data_high);
          if (SHIBYTE(__dst.data) < 0)
            operator delete(__dst.isa);
          v128 = operator new(0x20uLL);
          v259.isa = v128;
          *(_OWORD *)&v259.info = xmmword_20AC05C70;
          strcpy((char *)v128, "Kannala Radial Distortion");
          if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
            sub_20AB88C14(&v257, v258.__r_.__value_.__l.__data_, v258.__r_.__value_.__l.__size_);
          else
            v257 = v258;
          cva::adp::PListPath::convertToPath(&v259, (uint64_t)&__dst);
          if (SHIBYTE(__dst.data) >= 0)
            isa = (const std::string::value_type *)&__dst;
          else
            isa = (const std::string::value_type *)__dst.isa;
          if (SHIBYTE(__dst.data) >= 0)
            info = HIBYTE(__dst.data);
          else
            info = __dst.info;
          std::string::append(&v257, isa, info);
          if (SHIBYTE(__dst.data) < 0)
            operator delete(__dst.isa);
          operator delete(v128);
          *((_BYTE *)&v250.__r_.__value_.__s + 23) = 16;
          strcpy((char *)&v250, "Symmetric Radial");
          if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0)
            sub_20AB88C14(&v259, v257.__r_.__value_.__l.__data_, v257.__r_.__value_.__l.__size_);
          else
            *(std::string *)&v259.isa = v257;
          cva::adp::PListPath::convertToPath(&v250, (uint64_t)&__dst);
          if (SHIBYTE(__dst.data) >= 0)
            v158 = (const std::string::value_type *)&__dst;
          else
            v158 = (const std::string::value_type *)__dst.isa;
          if (SHIBYTE(__dst.data) >= 0)
            v159 = HIBYTE(__dst.data);
          else
            v159 = __dst.info;
          std::string::append((std::string *)&v259, v158, v159);
          if (SHIBYTE(__dst.data) < 0)
            operator delete(__dst.isa);
          HIBYTE(__dst.data) = 4;
          strcpy((char *)&__dst, "Data");
          v160 = sub_20ABC7438(v19, (std::string *)&v259, &__dst, v251);
          v161 = v160;
          if (SHIBYTE(__dst.data) < 0)
          {
            operator delete(__dst.isa);
            if (v161)
            {
LABEL_357:
              HIBYTE(__dst.data) = 5;
              strcpy((char *)&__dst, "Fixed");
              v162 = cva::adp::io::PListSerializer::getItem<BOOL>(v19, (std::string *)&v259, (uint64_t)&__dst, &v251[32]);
              if (SHIBYTE(__dst.data) < 0)
                operator delete(__dst.isa);
              v163 = v251[32] ^ 1;
              if (!v162)
                v163 = 1;
              v251[32] = v163;
              if (SHIBYTE(v259.data) < 0)
              {
LABEL_362:
                operator delete(v259.isa);
                if ((v161 & 1) != 0)
                {
LABEL_395:
                  HIBYTE(v259.data) = 16;
                  strcpy((char *)&v259, "Projection Model");
                  memset(&__dst, 0, 24);
                  v171 = 0;
                  if (cva::adp::io::PListSerializer::getItem<std::string>(v19, &v258, (uint64_t)&v259, (uint64_t)&__dst))v171 = sub_20ABB793C((uint64_t **)&__dst, &v251[48]);
                  if (SHIBYTE(__dst.data) < 0)
                  {
                    operator delete(__dst.isa);
                    if ((SHIBYTE(v259.data) & 0x80000000) == 0)
                    {
LABEL_399:
                      if ((v171 & 1) != 0)
                        goto LABEL_401;
                      goto LABEL_400;
                    }
                  }
                  else if ((SHIBYTE(v259.data) & 0x80000000) == 0)
                  {
                    goto LABEL_399;
                  }
                  operator delete(v259.isa);
                  if ((v171 & 1) != 0)
                  {
LABEL_401:
                    HIBYTE(__dst.data) = 13;
                    strcpy((char *)&__dst, "Field of View");
                    v172 = cva::adp::io::PListSerializer::getItem<double>(v19, &v257, (uint64_t)&__dst, &v251[40]);
                    v173 = v172;
                    if (SHIBYTE(__dst.data) < 0)
                    {
                      operator delete(__dst.isa);
                      if ((v173 & 1) != 0)
                      {
LABEL_403:
                        if ((SHIBYTE(v257.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                          goto LABEL_404;
                        goto LABEL_411;
                      }
                    }
                    else if ((v172 & 1) != 0)
                    {
                      goto LABEL_403;
                    }
                    *(_QWORD *)&v251[40] = 0x3FF921FB54442D18;
                    if ((SHIBYTE(v257.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
LABEL_404:
                      if ((SHIBYTE(v258.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      {
LABEL_405:
                        v174 = operator new();
                        v25 = v174;
                        *(_OWORD *)(v174 + 8) = xmmword_20AC05C90;
                        *(_QWORD *)(v174 + 24) = 0x4017EB851EB851ECLL;
                        *(_QWORD *)v174 = &off_24C37FBE0;
                        *(_OWORD *)(v174 + 32) = *(_OWORD *)__p;
                        *(_OWORD *)(v174 + 41) = *(_OWORD *)&__p[9];
                        *(_OWORD *)(v174 + 64) = *(_OWORD *)&__p[32];
                        *(_BYTE *)(v174 + 80) = __p[48];
                        v175 = *(_OWORD *)&__p[72];
                        *(_OWORD *)(v174 + 88) = *(_OWORD *)&__p[56];
                        *(_OWORD *)(v174 + 104) = v175;
                        *(_QWORD *)(v174 + 120) = *(_QWORD *)&__p[88];
                        v176 = *(_OWORD *)&v251[16];
                        *(_OWORD *)(v174 + 128) = *(_OWORD *)v251;
                        *(_OWORD *)(v174 + 144) = v176;
                        *(_BYTE *)(v174 + 160) = v251[32];
                        *(_OWORD *)(v174 + 168) = *(_OWORD *)&v251[40];
                        goto LABEL_449;
                      }
LABEL_412:
                      operator delete(v258.__r_.__value_.__l.__data_);
                      goto LABEL_405;
                    }
LABEL_411:
                    operator delete(v257.__r_.__value_.__l.__data_);
                    if ((SHIBYTE(v258.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      goto LABEL_405;
                    goto LABEL_412;
                  }
LABEL_400:
                  *(_DWORD *)&v251[48] = 0;
                  goto LABEL_401;
                }
LABEL_394:
                memset(v251, 0, 32);
                v251[32] = 1;
                goto LABEL_395;
              }
LABEL_393:
              if ((v161 & 1) != 0)
                goto LABEL_395;
              goto LABEL_394;
            }
          }
          else if (v160)
          {
            goto LABEL_357;
          }
          if (SHIBYTE(v259.data) < 0)
            goto LABEL_362;
          goto LABEL_393;
        case 2:
          *(_QWORD *)__p = 0x3FF0000000000000;
          __p[8] = 1;
          *(_QWORD *)&__p[16] = 0x3FF0000000000000;
          __p[24] = 1;
          *(_QWORD *)&__p[32] = 0;
          *(_QWORD *)&__p[40] = 0;
          __p[48] = 1;
          *(_OWORD *)&__p[56] = xmmword_20AC06248;
          *(_OWORD *)&__p[72] = unk_20AC06258;
          *(_QWORD *)&__p[88] = 0x200000002;
          memset(v251, 0, 40);
          v251[40] = 1;
          *(_DWORD *)&v251[48] = 10;
          if (!sub_20ABC4320(v19, v18, __s, (uint64_t)__p))
            goto LABEL_44;
          if (*(char *)(v18 + 23) < 0)
          {
            sub_20AB88C14(&v257, *(void **)v18, *(_QWORD *)(v18 + 8));
          }
          else
          {
            v30 = *(_OWORD *)v18;
            v257.__r_.__value_.__r.__words[2] = *(_QWORD *)(v18 + 16);
            *(_OWORD *)&v257.__r_.__value_.__l.__data_ = v30;
          }
          cva::adp::PListPath::convertToPath(__s, (uint64_t)&__dst);
          if (SHIBYTE(__dst.data) >= 0)
            v129 = (const std::string::value_type *)&__dst;
          else
            v129 = (const std::string::value_type *)__dst.isa;
          if (SHIBYTE(__dst.data) >= 0)
            v130 = HIBYTE(__dst.data);
          else
            v130 = __dst.info;
          std::string::append(&v257, v129, v130);
          if (SHIBYTE(__dst.data) < 0)
            operator delete(__dst.isa);
          HIBYTE(v259.data) = 19;
          strcpy((char *)&v259, "Heikkila Distortion");
          if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0)
            sub_20AB88C14(&v250, v257.__r_.__value_.__l.__data_, v257.__r_.__value_.__l.__size_);
          else
            v250 = v257;
          cva::adp::PListPath::convertToPath(&v259, (uint64_t)&__dst);
          if (SHIBYTE(__dst.data) >= 0)
            v135 = (const std::string::value_type *)&__dst;
          else
            v135 = (const std::string::value_type *)__dst.isa;
          if (SHIBYTE(__dst.data) >= 0)
            v136 = HIBYTE(__dst.data);
          else
            v136 = __dst.info;
          std::string::append(&v250, v135, v136);
          if (SHIBYTE(__dst.data) < 0)
            operator delete(__dst.isa);
          v249[23] = 21;
          strcpy(v249, "Radial And Tangential");
          if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
            sub_20AB88C14(&v259, v250.__r_.__value_.__l.__data_, v250.__r_.__value_.__l.__size_);
          else
            *(std::string *)&v259.isa = v250;
          cva::adp::PListPath::convertToPath(v249, (uint64_t)&__dst);
          if (SHIBYTE(__dst.data) >= 0)
            v164 = (const std::string::value_type *)&__dst;
          else
            v164 = (const std::string::value_type *)__dst.isa;
          if (SHIBYTE(__dst.data) >= 0)
            v165 = HIBYTE(__dst.data);
          else
            v165 = __dst.info;
          std::string::append((std::string *)&v259, v164, v165);
          if (SHIBYTE(__dst.data) < 0)
            operator delete(__dst.isa);
          *((_BYTE *)&v258.__r_.__value_.__s + 23) = 4;
          strcpy((char *)&v258, "Data");
          cva::adp::io::PListSerializer::getPath(v19, (std::string *)&v259, &v247);
          v166 = v247;
          if (!v247)
            goto LABEL_427;
          v167 = (v258.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
               ? &v258
               : (std::string *)v258.__r_.__value_.__r.__words[0];
          v168 = CFStringCreateWithCStringNoCopy(v231, (const char *)v167, 0x8000100u, v230);
          v169 = (const void *)objc_msgSend(*(id *)v166, "objectForKey:", v168);
          v170 = *(_BYTE *)(v166 + 8);
          cf = v169;
          v246 = v170;
          if (v169)
            CFRetain(v169);
          else
            v246 = 0;
          CFRelease(v168);
          if (!cf)
            goto LABEL_427;
          if (cva::ItemHandler::isVectorType(&cf))
          {
            memset(&__dst, 0, 20);
            sub_20ABC0994(&cf, (uint64_t)&__dst);
            LODWORD(v166) = LODWORD(__dst.data) == 5;
            if (LODWORD(__dst.data) == 5)
            {
              v177 = *((_OWORD *)__dst.isa + 1);
              *(_OWORD *)v251 = *(_OWORD *)__dst.isa;
              *(_OWORD *)&v251[16] = v177;
              *(_QWORD *)&v251[32] = *((_QWORD *)__dst.isa + 4);
            }
            free(__dst.isa);
            if (cf)
              CFRelease(cf);
            v178 = 1;
            v179 = v248;
            if (!v248)
              goto LABEL_431;
          }
          else
          {
            if (cf)
              CFRelease(cf);
LABEL_427:
            v178 = 0;
            v179 = v248;
            if (!v248)
            {
LABEL_431:
              if ((SHIBYTE(v258.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_433;
LABEL_432:
              operator delete(v258.__r_.__value_.__l.__data_);
              goto LABEL_433;
            }
          }
          p_shared_owners = (unint64_t *)&v179->__shared_owners_;
          do
            v181 = __ldaxr(p_shared_owners);
          while (__stlxr(v181 - 1, p_shared_owners));
          if (v181)
            goto LABEL_431;
          ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
          std::__shared_weak_count::__release_weak(v179);
          if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_432;
LABEL_433:
          v182 = v166 & v178;
          if (v182)
          {
            HIBYTE(__dst.data) = 5;
            strcpy((char *)&__dst, "Fixed");
            v183 = cva::adp::io::PListSerializer::getItem<BOOL>(v19, (std::string *)&v259, (uint64_t)&__dst, &v251[40]);
            if (SHIBYTE(__dst.data) < 0)
              operator delete(__dst.isa);
            v184 = v251[40] ^ 1;
            if (!v183)
              v184 = 1;
            v251[40] = v184;
            if ((SHIBYTE(v259.data) & 0x80000000) == 0)
            {
LABEL_442:
              if ((v182 & 1) != 0)
                goto LABEL_444;
LABEL_443:
              memset(v251, 0, 40);
              v251[40] = 1;
              goto LABEL_444;
            }
          }
          else if ((SHIBYTE(v259.data) & 0x80000000) == 0)
          {
            goto LABEL_442;
          }
          operator delete(v259.isa);
          if ((v182 & 1) == 0)
            goto LABEL_443;
LABEL_444:
          if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v250.__r_.__value_.__l.__data_);
          if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v257.__r_.__value_.__l.__data_);
          v174 = operator new();
          v25 = v174;
          *(_OWORD *)(v174 + 8) = xmmword_20AC05C90;
          *(_QWORD *)(v174 + 24) = 0x4017EB851EB851ECLL;
          *(_QWORD *)v174 = &off_24C37FCA0;
          *(_OWORD *)(v174 + 32) = *(_OWORD *)__p;
          *(_OWORD *)(v174 + 41) = *(_OWORD *)&__p[9];
          *(_OWORD *)(v174 + 64) = *(_OWORD *)&__p[32];
          *(_BYTE *)(v174 + 80) = __p[48];
          v185 = *(_OWORD *)&__p[72];
          *(_OWORD *)(v174 + 88) = *(_OWORD *)&__p[56];
          *(_OWORD *)(v174 + 104) = v185;
          *(_QWORD *)(v174 + 120) = *(_QWORD *)&__p[88];
          v186 = *(_OWORD *)v251;
          v187 = *(_OWORD *)&v251[16];
          *(_QWORD *)(v174 + 160) = *(_QWORD *)&v251[32];
          *(_OWORD *)(v174 + 128) = v186;
          *(_OWORD *)(v174 + 144) = v187;
          *(_BYTE *)(v174 + 168) = v251[40];
          *(_DWORD *)(v174 + 176) = *(_DWORD *)&v251[48];
LABEL_449:
          v188 = *(double *)&v240;
          *(double *)(v174 + 16) = *(double *)&v240;
          *(double *)(v174 + 24) = v188 * v188 * v6;
          v28 = 1;
LABEL_49:
          if (SHIBYTE(v242) < 0)
          {
            operator delete(v241[0]);
            if ((SHIBYTE(v244.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_51:
              if (v28)
                goto LABEL_52;
              goto LABEL_83;
            }
          }
          else if ((SHIBYTE(v244.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_51;
          }
          operator delete(v244.__r_.__value_.__l.__data_);
          if (v28)
          {
LABEL_52:
            v32 = v3;
            v33 = v5[1];
            v34 = (uint64_t **)v5[4];
            v36 = v34 + 1;
            v35 = (unsigned __int8 *)v34[1];
            v37 = *v4;
            if (v35)
            {
              while (1)
              {
                while (1)
                {
                  v38 = v35;
                  v39 = v35[25];
                  if (v37 >= v39)
                    break;
                  v35 = (unsigned __int8 *)*v38;
                  v36 = (uint64_t **)v38;
                  if (!*v38)
                    goto LABEL_59;
                }
                if (v39 >= v37)
                  break;
                v35 = (unsigned __int8 *)v38[1];
                if (!v35)
                {
                  v36 = (uint64_t **)(v38 + 1);
                  goto LABEL_59;
                }
              }
            }
            else
            {
              v38 = v34 + 1;
LABEL_59:
              v40 = v38;
              v38 = operator new(0x20uLL);
              *((_BYTE *)v38 + 25) = v37;
              *((_BYTE *)v38 + 26) = 0;
              *v38 = 0;
              v38[1] = 0;
              v38[2] = v40;
              *v36 = v38;
              v41 = (uint64_t *)**v34;
              v42 = v38;
              if (v41)
              {
                *v34 = v41;
                v42 = *v36;
              }
              sub_20AB96C04(v34[1], v42);
              v34[2] = (uint64_t *)((char *)v34[2] + 1);
            }
            v45 = *(_QWORD **)(v33 + 8);
            v44 = (_QWORD *)(v33 + 8);
            v43 = v45;
            if (!v45)
              goto LABEL_73;
            v46 = *((unsigned __int8 *)v38 + 26);
            v47 = v44;
            do
            {
              v48 = v43[4];
              v49 = v48 >= v46;
              if (v48 >= v46)
                v50 = v43;
              else
                v50 = v43 + 1;
              if (v49)
                v47 = v43;
              v43 = (_QWORD *)*v50;
            }
            while (*v50);
            if (v47 == v44 || v47[4] > v46)
LABEL_73:
              v47 = v44;
            v51 = *((char *)v47 + 63);
            if (v51 >= 0)
              v52 = *((unsigned __int8 *)v47 + 63);
            else
              v52 = v47[6];
            v53 = v52 + 4;
            if (v52 + 4 >= 0x7FFFFFFFFFFFFFF8)
LABEL_462:
              abort();
            if (v53 >= 0x17)
            {
              v56 = (v53 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v53 | 7) != 0x17)
                v56 = v53 | 7;
              v57 = v56 + 1;
              v54 = operator new(v56 + 1);
              *(_QWORD *)&__p[8] = v52 + 4;
              *(_QWORD *)&__p[16] = v57 | 0x8000000000000000;
              *(_QWORD *)__p = v54;
            }
            else
            {
              memset(__p, 0, 24);
              v54 = __p;
              __p[23] = v52 + 4;
              if (!v52)
                goto LABEL_91;
            }
            if (v51 >= 0)
              v58 = v47 + 5;
            else
              v58 = (const void *)v47[5];
            memmove(v54, v58, v52);
LABEL_91:
            v3 = v32;
            v5 = v234;
            strcpy(&v54[v52], " To ");
            v59 = *((_BYTE *)v14 + 63);
            if (v59 >= 0)
              v60 = (const std::string::value_type *)(v14 + 5);
            else
              v60 = (const std::string::value_type *)v14[5];
            if (v59 >= 0)
              v61 = *((unsigned __int8 *)v14 + 63);
            else
              v61 = v14[6];
            v62 = std::string::append((std::string *)__p, v60, v61);
            v244 = *v62;
            v62->__r_.__value_.__r.__words[0] = 0;
            v62->__r_.__value_.__l.__size_ = 0;
            v62->__r_.__value_.__r.__words[2] = 0;
            if ((__p[23] & 0x80000000) != 0)
              operator delete(*(void **)__p);
            v63 = (std::string::size_type *)v234[2];
            v64 = (__int128 *)v234[5];
            if (*((char *)v64 + 23) < 0)
            {
              sub_20AB88C14(&v258, *(void **)v64, *((_QWORD *)v64 + 1));
            }
            else
            {
              v65 = *v64;
              v258.__r_.__value_.__r.__words[2] = *((_QWORD *)v64 + 2);
              *(_OWORD *)&v258.__r_.__value_.__l.__data_ = v65;
            }
            cva::adp::PListPath::convertToPath(&v244, (uint64_t)__p);
            if (__p[23] >= 0)
              v66 = __p;
            else
              v66 = *(const std::string::value_type **)__p;
            if (__p[23] >= 0)
              v67 = __p[23];
            else
              v67 = *(_QWORD *)&__p[8];
            std::string::append(&v258, v66, v67);
            if ((__p[23] & 0x80000000) != 0)
              operator delete(*(void **)__p);
            LODWORD(v247) = 0;
            memset(&v257, 0, sizeof(v257));
            __p[23] = 16;
            strcpy(__p, "Extrinsics Model");
            if (!cva::adp::io::PListSerializer::getItem<std::string>(v63, &v258, (uint64_t)__p, (uint64_t)&v257))
            {
              if ((__p[23] & 0x80000000) != 0)
                operator delete(*(void **)__p);
              goto LABEL_118;
            }
            sub_20ABB0C14((uint64_t)&v257, &v247);
            if ((__p[23] & 0x80000000) != 0)
              operator delete(*(void **)__p);
            if ((_DWORD)v247 == 1)
            {
              __p[0] = 1;
              *(_QWORD *)&__p[72] = 0x3FF0000000000000;
              *(_OWORD *)&__p[8] = xmmword_20AC06268;
              *(_OWORD *)&__p[24] = unk_20AC06278;
              *(_OWORD *)&__p[40] = xmmword_20AC06288;
              *(_OWORD *)&__p[56] = unk_20AC06298;
              memset(&__p[80], 0, 24);
              __p[104] = 1;
              v251[0] = 1;
              v253 = 0x3FF0000000000000uLL;
              *(_OWORD *)&v251[8] = xmmword_20AC06268;
              *(_OWORD *)&v251[24] = unk_20AC06278;
              *(_OWORD *)&v251[40] = xmmword_20AC06288;
              v252 = unk_20AC06298;
              *(double *)&v254 = 0.0;
              v255 = 0.0;
              v256 = 1;
              v241[0] = 0;
              HIBYTE(__dst.data) = 16;
              strcpy((char *)&__dst, "Minimum Rotation");
              if ((sub_20ABC0A4C(v63, (uint64_t)&v258, &__dst, __p) & 1) == 0)
                goto LABEL_140;
              HIBYTE(v259.data) = 19;
              strcpy((char *)&v259, "Minimum Translation");
              if (!sub_20ABC0D20(v63, (uint64_t)&v258, &v259, &__p[80]))
                goto LABEL_140;
              *((_BYTE *)&v250.__r_.__value_.__s + 23) = 16;
              strcpy((char *)&v250, "Maximum Rotation");
              if (!sub_20ABC0A4C(v63, (uint64_t)&v258, &v250, v251))
                goto LABEL_140;
              v249[23] = 19;
              strcpy(v249, "Maximum Translation");
              if (!sub_20ABC0D20(v63, (uint64_t)&v258, v249, (_QWORD *)&v253 + 1))
                goto LABEL_140;
              HIBYTE(__dst.data) = 18;
              strcpy((char *)&__dst, "Endpoints Distance");
              v74 = cva::adp::io::PListSerializer::getItem<double>(v63, &v258, (uint64_t)&__dst, v241);
              if (SHIBYTE(__dst.data) < 0)
                operator delete(__dst.isa);
              v227 = v7;
              v229 = *(double *)&v8;
              if (v74)
              {
                v75 = *(double *)v241;
              }
              else
              {
                v241[0] = (void *)0x3FF0000000000000;
                v75 = 1.0;
              }
              v68 = operator new();
              *(_QWORD *)v68 = &off_24C37F9C0;
              *(_BYTE *)(v68 + 120) = 1;
              *(_QWORD *)(v68 + 128) = 0x3FF0000000000000;
              *(_QWORD *)(v68 + 136) = 0;
              *(_QWORD *)(v68 + 144) = 0;
              *(_QWORD *)(v68 + 152) = 0;
              *(_QWORD *)(v68 + 160) = 0x3FF0000000000000;
              *(_QWORD *)(v68 + 168) = 0;
              *(_QWORD *)(v68 + 176) = 0;
              *(_QWORD *)(v68 + 184) = 0;
              *(_QWORD *)(v68 + 200) = 0;
              *(_QWORD *)(v68 + 208) = 0;
              *(_QWORD *)(v68 + 192) = 0x3FF0000000000000;
              *(_BYTE *)(v68 + 216) = 1;
              *(_QWORD *)(v68 + 224) = 0;
              *(_BYTE *)(v68 + 232) = 1;
              *(_QWORD *)(v68 + 256) = 0;
              *(_QWORD *)(v68 + 264) = 0;
              *(_BYTE *)(v68 + 8) = __p[0];
              *(_QWORD *)(v68 + 80) = *(_QWORD *)&__p[72];
              v189 = *(_OWORD *)&__p[56];
              *(_OWORD *)(v68 + 48) = *(_OWORD *)&__p[40];
              *(_OWORD *)(v68 + 64) = v189;
              v190 = *(_OWORD *)&__p[24];
              *(_OWORD *)(v68 + 16) = *(_OWORD *)&__p[8];
              *(_OWORD *)(v68 + 32) = v190;
              *(_QWORD *)(v68 + 104) = *(_QWORD *)&__p[96];
              *(_OWORD *)(v68 + 88) = *(_OWORD *)&__p[80];
              *(_BYTE *)(v68 + 112) = __p[104];
              *(double *)(v68 + 240) = v75;
              *(_BYTE *)(v68 + 248) = 1;
              v225 = *(double *)&v254;
              v226 = *((double *)&v253 + 1);
              v191 = *(double *)&__p[80];
              v223 = v255;
              v224 = *(double *)&__p[88];
              v192 = *(double *)&__p[96];
              *(_QWORD *)v249 = &__p[8];
              v250.__r_.__value_.__r.__words[0] = (std::string::size_type)&v251[8];
              v250.__r_.__value_.__l.__size_ = (std::string::size_type)v249;
              memset(&__dst, 0, sizeof(__dst));
              v264 = 0u;
              v265 = 0u;
              v266 = 0;
              sub_20ABC0FC4((uint64_t)&__dst, (uint64_t)&v250);
              v260 = v264;
              v261 = v265;
              v262 = v266;
              v259 = __dst;
              memset(&__dst, 0, 24);
              sub_20AB929EC((float64x2_t *)&v259, (double *)&__dst);
              v193 = *(double *)&__dst.isa / v75;
              v194 = *(double *)&__dst.info / v75;
              v195 = *(double *)&__dst.data / v75;
              v196 = v193 * v193 + v194 * v194 + v195 * v195;
              v228 = v6;
              if (v196 >= v229)
              {
                v200 = sqrt(v196);
                v201 = __sincos_stret(v200);
                cosval = v201.__cosval;
                v198 = v201.__sinval / v200;
                v197 = 1.0 / v196 * (1.0 - v201.__cosval);
              }
              else
              {
                v197 = 0.5 - v196 * (v196 / -720.0 + 0.0416666667);
                v198 = 1.0 - v196 * (0.166666667 - v196 * (v196 / -5040.0 + 0.00833333333));
                cosval = 1.0 - v196 * v197;
              }
              v202 = v226 - v191;
              v203 = v225 - v224;
              v204 = v223 - v192;
              v205 = v193 * v197;
              v206 = v194 * v197;
              v207 = cosval + v193 * v197 * v193;
              v208 = cosval + v194 * v197 * v194;
              v209 = cosval + v195 * v197 * v195;
              v210 = v194 * (v193 * v197);
              v211 = v195 * v205;
              v212 = v195 * v206;
              v213 = v193 * v198;
              v214 = v194 * v198;
              v215 = v195 * v198;
              *(_BYTE *)(v68 + 120) = 1;
              *(double *)(v68 + 128) = v207;
              *(double *)(v68 + 136) = v210 + v215;
              *(double *)(v68 + 144) = v211 - v214;
              *(double *)(v68 + 152) = v210 - v215;
              *(double *)(v68 + 160) = v208;
              *(double *)(v68 + 168) = v213 + v212;
              *(double *)(v68 + 176) = v214 + v211;
              *(double *)(v68 + 184) = v212 - v213;
              *(double *)(v68 + 192) = v209;
              v216 = v202 * v202 + v203 * v203 + v204 * v204;
              v217 = 0.0;
              v218 = 0.0;
              if (v216 >= 0.0000000149011612)
              {
                v219 = sqrt(v216);
                v220 = v204 / v219;
                v217 = atan2(v203 / v219, v202 / v219);
                v218 = acos(v220);
              }
              *(long double *)(v68 + 200) = v217;
              *(double *)(v68 + 208) = v218;
              *(_BYTE *)(v68 + 120) = v251[0];
              *(_BYTE *)(v68 + 216) = v256;
              *(double *)(v68 + 240) = v75;
              v72 = 1;
              *(_BYTE *)(v68 + 248) = 1;
              v7 = v227;
              v6 = v228;
              *(double *)&v8 = v229;
              if ((SHIBYTE(v257.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_141;
            }
            else
            {
              if ((_DWORD)v247)
                goto LABEL_140;
LABEL_118:
              __p[0] = 1;
              *(_QWORD *)&__p[72] = 0x3FF0000000000000;
              *(_OWORD *)&__p[8] = xmmword_20AC06268;
              *(_OWORD *)&__p[24] = unk_20AC06278;
              *(_OWORD *)&__p[40] = xmmword_20AC06288;
              *(_OWORD *)&__p[56] = unk_20AC06298;
              memset(&__p[80], 0, 24);
              __p[104] = 1;
              v251[23] = 8;
              strcpy(v251, "Rotation");
              if ((sub_20ABC0A4C(v63, (uint64_t)&v258, v251, __p) & 1) != 0)
              {
                HIBYTE(__dst.data) = 11;
                strcpy((char *)&__dst, "Translation");
                if (sub_20ABC0D20(v63, (uint64_t)&v258, &__dst, &__p[80]))
                {
                  v68 = operator new();
                  *(_QWORD *)v68 = &off_24C37F8D0;
                  *(_BYTE *)(v68 + 8) = __p[0];
                  v69 = *(_OWORD *)&__p[56];
                  *(_OWORD *)(v68 + 48) = *(_OWORD *)&__p[40];
                  *(_OWORD *)(v68 + 64) = v69;
                  *(_QWORD *)(v68 + 80) = *(_QWORD *)&__p[72];
                  v70 = *(_OWORD *)&__p[24];
                  *(_OWORD *)(v68 + 16) = *(_OWORD *)&__p[8];
                  *(_OWORD *)(v68 + 32) = v70;
                  v71 = *(_OWORD *)&__p[80];
                  *(_QWORD *)(v68 + 104) = *(_QWORD *)&__p[96];
                  *(_BYTE *)(v68 + 112) = __p[104];
                  v72 = 1;
                  *(_OWORD *)(v68 + 88) = v71;
                  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0)
                    goto LABEL_121;
LABEL_141:
                  if ((SHIBYTE(v258.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
LABEL_142:
                    if (v72)
                    {
LABEL_143:
                      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v68 + 16))(v68) != 1)
                        goto LABEL_208;
                      if (*((char *)v14 + 63) < 0)
                      {
                        sub_20AB88C14(&v258, (void *)v14[5], v14[6]);
                        if (*((char *)v14 + 63) < 0)
                        {
                          v77 = (char *)v14[5];
                          v76 = v14[6];
                        }
                        else
                        {
                          v76 = *((unsigned __int8 *)v14 + 63);
                          v77 = (char *)(v14 + 5);
                        }
                      }
                      else
                      {
                        v76 = *((unsigned __int8 *)v14 + 63);
                        v77 = (char *)(v14 + 5);
                        *(_OWORD *)&v258.__r_.__value_.__l.__data_ = *(_OWORD *)__s;
                        v258.__r_.__value_.__r.__words[2] = v14[7];
                      }
                      v78 = &v77[v76];
                      if (v76 >= 6)
                      {
                        v79 = v77;
                        do
                        {
                          v80 = (char *)memchr(v79, 67, v76 - 5);
                          if (!v80)
                            break;
                          if (*(_DWORD *)v80 == 1701667139 && *((_WORD *)v80 + 2) == 24946)
                            goto LABEL_158;
                          v79 = v80 + 1;
                          v76 = v78 - (_BYTE *)v79;
                        }
                        while (v78 - (_BYTE *)v79 > 5);
                      }
                      v80 = v78;
LABEL_158:
                      if (v80 == v78)
                        v82 = -1;
                      else
                        v82 = v80 - v77;
                      std::string::replace(&v258, v82, 6uLL, "Encoder");
                      *(_QWORD *)__p = 0x3FF0000000000000;
                      __p[8] = 1;
                      *(_QWORD *)&__p[16] = 0;
                      __p[24] = 1;
                      v84 = (std::string::size_type *)v234[2];
                      v83 = (__int128 *)v234[3];
                      if (*((char *)v83 + 23) < 0)
                      {
                        sub_20AB88C14(&__dst, *(void **)v83, *((_QWORD *)v83 + 1));
                      }
                      else
                      {
                        v85 = *v83;
                        __dst.data = (char *)*((_QWORD *)v83 + 2);
                        *(_OWORD *)&__dst.isa = v85;
                      }
                      cva::adp::PListPath::convertToPath(&v258, (uint64_t)v251);
                      if (v251[23] >= 0)
                        v86 = v251;
                      else
                        v86 = *(const std::string::value_type **)v251;
                      if (v251[23] >= 0)
                        v87 = v251[23];
                      else
                        v87 = *(_QWORD *)&v251[8];
                      std::string::append((std::string *)&__dst, v86, v87);
                      if ((v251[23] & 0x80000000) != 0)
                        operator delete(*(void **)v251);
                      memset(v251, 0, 24);
                      HIBYTE(v259.data) = 13;
                      strcpy((char *)&v259, "Encoder Model");
                      if (cva::adp::io::PListSerializer::getItem<std::string>(v84, (std::string *)&__dst, (uint64_t)&v259, (uint64_t)v251))
                      {
                        v88 = v251[23];
                        if ((v251[23] & 0x80000000) != 0)
                        {
                          if (*(_QWORD *)&v251[8] != 6)
                            goto LABEL_193;
                          v89 = *(_BYTE **)v251;
LABEL_183:
                          v91 = *(_DWORD *)v89;
                          v92 = *((unsigned __int16 *)v89 + 2);
                          v94 = v91 != 1701734732 || v92 != 29281;
                          if ((SHIBYTE(v259.data) & 0x80000000) == 0)
                            goto LABEL_190;
LABEL_194:
                          operator delete(v259.isa);
                          if (!v94)
                            goto LABEL_195;
LABEL_191:
                          v90 = 0;
                          if (v88 < 0)
                            goto LABEL_179;
                        }
                        else
                        {
                          if (v251[23] == 6)
                          {
                            v89 = v251;
                            goto LABEL_183;
                          }
LABEL_193:
                          v94 = 1;
                          if (SHIBYTE(v259.data) < 0)
                            goto LABEL_194;
LABEL_190:
                          if (v94)
                            goto LABEL_191;
LABEL_195:
                          HIBYTE(v259.data) = 8;
                          strcpy((char *)&v259, "Gradient");
                          if ((sub_20ABC06B4(v84, (uint64_t)&__dst, &v259, __p) & 1) == 0)
                          {
                            *(_QWORD *)__p = 0x3FF0000000000000;
                            __p[8] = 1;
                          }
                          HIBYTE(v259.data) = 6;
                          strcpy((char *)&v259, "Offset");
                          v90 = 1;
                          if ((sub_20ABC06B4(v84, (uint64_t)&__dst, &v259, &__p[16]) & 1) != 0)
                          {
                            if ((v88 & 0x80) == 0)
                              goto LABEL_199;
LABEL_179:
                            operator delete(*(void **)v251);
                            if (SHIBYTE(__dst.data) < 0)
LABEL_180:
                              operator delete(__dst.isa);
LABEL_200:
                            if (v90)
                            {
                              v95 = operator new();
                              *(_QWORD *)v95 = &off_24C37FAB0;
                              v96 = *(_OWORD *)&__p[16];
                              *(_OWORD *)(v95 + 8) = *(_OWORD *)__p;
                              *(_OWORD *)(v95 + 24) = v96;
                              *(_QWORD *)(v95 + 48) = 0;
                              *(_QWORD *)(v95 + 56) = 0;
                              *(_QWORD *)(v95 + 40) = 0;
                              v236 = v95;
                              v97 = (std::__shared_weak_count *)operator new();
                              v97->__vftable = (std::__shared_weak_count_vtbl *)&off_24C380508;
                              v97->__shared_owners_ = 0;
                              v97->__shared_weak_owners_ = 0;
                              v97[1].__vftable = (std::__shared_weak_count_vtbl *)v95;
                              v237 = v97;
                              v98 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v68 + 72))(v68, &v236);
                              v99 = v98;
                              v100 = v237;
                              if (!v237)
                                goto LABEL_205;
                              v101 = (unint64_t *)&v237->__shared_owners_;
                              do
                                v102 = __ldaxr(v101);
                              while (__stlxr(v102 - 1, v101));
                              if (!v102)
                              {
                                ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
                                std::__shared_weak_count::__release_weak(v100);
                                if (v99)
                                  goto LABEL_206;
                              }
                              else
                              {
LABEL_205:
                                if (v98)
                                  goto LABEL_206;
                              }
                              if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
                                operator delete(v258.__r_.__value_.__l.__data_);
LABEL_239:
                              v55 = 1;
                              if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0)
                                goto LABEL_124;
                              goto LABEL_125;
                            }
LABEL_206:
                            if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
                              operator delete(v258.__r_.__value_.__l.__data_);
LABEL_208:
                            v103 = (uint64_t **)v234[6];
                            v104 = *v4;
                            *(_QWORD *)__p = v68;
                            *(_QWORD *)&__p[8] = v25;
                            __p[16] = v233;
                            if (*((char *)v14 + 63) < 0)
                            {
                              sub_20AB88C14(&__p[24], (void *)v14[5], v14[6]);
                              if (v104 == 255)
                                goto LABEL_223;
                            }
                            else
                            {
                              *(_OWORD *)&__p[24] = *(_OWORD *)__s;
                              *(_QWORD *)&__p[40] = v14[7];
                              if (v104 == 255)
                              {
LABEL_223:
                                v115 = 0;
                                if ((__p[47] & 0x80000000) != 0)
                                  goto LABEL_224;
LABEL_225:
                                if (*(_QWORD *)&__p[8])
                                  (*(void (**)(_QWORD))(**(_QWORD **)&__p[8] + 8))(*(_QWORD *)&__p[8]);
                                if (*(_QWORD *)__p)
                                  (*(void (**)(_QWORD))(**(_QWORD **)__p + 8))(*(_QWORD *)__p);
                                if (!v115)
                                {
                                  v25 = 0;
                                  v68 = 0;
                                  goto LABEL_239;
                                }
                                memset(__p, 0, 24);
                                v116 = (_QWORD *)v5[4];
                                v117 = v116[2];
                                if (v117)
                                {
                                  if ((v117 & 0x8000000000000000) != 0)
                                    goto LABEL_462;
                                  *(_QWORD *)__p = operator new(v116[2]);
                                  *(_QWORD *)&__p[8] = *(_QWORD *)__p;
                                  *(_QWORD *)&__p[16] = *(_QWORD *)__p + v117;
                                }
                                cva::adp::io::detail::findChildNodes(v116, *v4, (unint64_t *)__p);
                                v118 = v5[7];
                                v251[0] = *v4;
                                v119 = *(_QWORD *)(v118 + 24);
                                if (!v119)
                                {
                                  sub_20ABAC430();
                                  v222 = v221;
                                  CFRelease((CFTypeRef)v117);
                                  _Unwind_Resume(v222);
                                }
                                v120 = (*(uint64_t (**)(uint64_t, _BYTE *, _BYTE *))(*(_QWORD *)v119 + 48))(v119, __p, v251);
                                if (*(_QWORD *)__p)
                                {
                                  *(_QWORD *)&__p[8] = *(_QWORD *)__p;
                                  operator delete(*(void **)__p);
                                }
                                v25 = 0;
                                v68 = 0;
                                v55 = v120 ^ 1;
                                if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0)
LABEL_124:
                                  operator delete(v244.__r_.__value_.__l.__data_);
LABEL_125:
                                if (v68)
                                  (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
                                goto LABEL_127;
                              }
                            }
                            v105 = *(_QWORD *)__p;
                            if (!*(_QWORD *)__p)
                              goto LABEL_223;
                            v106 = __p[16];
                            v108 = v103 + 1;
                            v107 = v103[1];
                            if (__p[16] == 255)
                              goto LABEL_214;
                            if (!v107)
                              goto LABEL_252;
                            v121 = v103 + 1;
                            v122 = v103[1];
                            do
                            {
                              v123 = *((unsigned __int8 *)v122 + 32);
                              v124 = v123 >= __p[16];
                              if (v123 >= __p[16])
                                v125 = (uint64_t **)v122;
                              else
                                v125 = (uint64_t **)(v122 + 1);
                              if (v124)
                                v121 = (uint64_t **)v122;
                              v122 = *v125;
                            }
                            while (*v125);
                            if (v121 != v108 && *((unsigned __int8 *)v121 + 32) <= __p[16])
                            {
LABEL_214:
                              v109 = v103 + 1;
                              if (v107)
                              {
                                while (1)
                                {
                                  while (1)
                                  {
                                    v109 = (uint64_t **)v107;
                                    v110 = *((unsigned __int8 *)v107 + 32);
                                    if (v110 <= v104)
                                      break;
                                    v107 = *v109;
                                    v108 = v109;
                                    if (!*v109)
                                      goto LABEL_221;
                                  }
                                  if (v110 >= v104)
                                    break;
                                  v107 = v109[1];
                                  if (!v107)
                                  {
                                    v108 = v109 + 1;
                                    goto LABEL_221;
                                  }
                                }
                                v115 = 0;
                                v5 = v234;
                                goto LABEL_414;
                              }
LABEL_221:
                              v111 = operator new(0x58uLL);
                              v111[32] = v104;
                              v112 = *(_QWORD *)&__p[8];
                              *(_OWORD *)__p = 0u;
                              *((_QWORD *)v111 + 5) = v105;
                              *((_QWORD *)v111 + 6) = v112;
                              v111[56] = v106;
                              *((_OWORD *)v111 + 4) = *(_OWORD *)&__p[24];
                              *((_QWORD *)v111 + 10) = *(_QWORD *)&__p[40];
                              memset(&__p[24], 0, 24);
                              *(_OWORD *)v111 = 0u;
                              *((_QWORD *)v111 + 2) = v109;
                              *v108 = (uint64_t *)v111;
                              v113 = (uint64_t *)**v103;
                              if (v113)
                              {
                                *v103 = v113;
                                v114 = *v108;
                              }
                              else
                              {
                                v114 = (uint64_t *)v111;
                              }
                              v5 = v234;
                              sub_20AB96C04(v103[1], v114);
                              v103[2] = (uint64_t *)((char *)v103[2] + 1);
                              v115 = 1;
                              if ((__p[47] & 0x80000000) == 0)
                                goto LABEL_225;
                            }
                            else
                            {
LABEL_252:
                              v115 = 0;
LABEL_414:
                              if ((__p[47] & 0x80000000) == 0)
                                goto LABEL_225;
                            }
LABEL_224:
                            operator delete(*(void **)&__p[24]);
                            goto LABEL_225;
                          }
                          *(_QWORD *)&__p[16] = 0;
                          __p[24] = 1;
                          if (v88 < 0)
                            goto LABEL_179;
                        }
                      }
                      else
                      {
                        if (SHIBYTE(v259.data) < 0)
                          operator delete(v259.isa);
                        v90 = 0;
                        if ((v251[23] & 0x80) != 0)
                          goto LABEL_179;
                      }
LABEL_199:
                      if (SHIBYTE(__dst.data) < 0)
                        goto LABEL_180;
                      goto LABEL_200;
                    }
LABEL_123:
                    v55 = 1;
                    if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0)
                      goto LABEL_124;
                    goto LABEL_125;
                  }
LABEL_122:
                  operator delete(v258.__r_.__value_.__l.__data_);
                  if (v72)
                    goto LABEL_143;
                  goto LABEL_123;
                }
              }
LABEL_140:
              v68 = 0;
              v72 = 0;
              if ((SHIBYTE(v257.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_141;
            }
LABEL_121:
            operator delete(v257.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v258.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_142;
            goto LABEL_122;
          }
LABEL_83:
          v55 = 1;
LABEL_127:
          if (v25)
            (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
          result = v55 == 0;
          if (v55)
            return result;
          if (++v4 == v3)
            return result;
          break;
        case 3:
          v251[8] = 1;
          *(_QWORD *)v251 = 0x3FF0000000000000;
          *(_QWORD *)&v251[16] = 0x3FF0000000000000;
          v251[24] = 1;
          *(_QWORD *)&v251[32] = 0;
          *(_QWORD *)&v251[40] = 0;
          v251[48] = 1;
          v252 = xmmword_20AC06248;
          v253 = unk_20AC06258;
          v254 = 0x200000002;
          *(int64x2_t *)__p = v232;
          *(_QWORD *)&__p[16] = 0;
          *(_QWORD *)&__p[24] = 0;
          memset_pattern16(&__p[32], &unk_20AC05D80, 0x800uLL);
          memset_pattern16(v239, &unk_20AC05D80, 0x800uLL);
          if (!sub_20ABC4320(v19, v18, __s, (uint64_t)v251))
            goto LABEL_48;
          if (*(char *)(v18 + 23) < 0)
          {
            sub_20AB88C14(&v259, *(void **)v18, *(_QWORD *)(v18 + 8));
          }
          else
          {
            v31 = *(_OWORD *)v18;
            v259.data = *(char **)(v18 + 16);
            *(_OWORD *)&v259.isa = v31;
          }
          cva::adp::PListPath::convertToPath(__s, (uint64_t)&__dst);
          if (SHIBYTE(__dst.data) >= 0)
            v131 = (const std::string::value_type *)&__dst;
          else
            v131 = (const std::string::value_type *)__dst.isa;
          if (SHIBYTE(__dst.data) >= 0)
            v132 = HIBYTE(__dst.data);
          else
            v132 = __dst.info;
          std::string::append((std::string *)&v259, v131, v132);
          if (SHIBYTE(__dst.data) < 0)
            operator delete(__dst.isa);
          strcpy((char *)&v257, "Pinhole LUT Distortion");
          *((_BYTE *)&v257.__r_.__value_.__s + 23) = 22;
          if (SHIBYTE(v259.data) < 0)
            sub_20AB88C14(&v258, v259.isa, v259.info);
          else
            v258 = *(std::string *)&v259.isa;
          cva::adp::PListPath::convertToPath(&v257, (uint64_t)&__dst);
          if (SHIBYTE(__dst.data) >= 0)
            v137 = (const std::string::value_type *)&__dst;
          else
            v137 = (const std::string::value_type *)__dst.isa;
          if (SHIBYTE(__dst.data) >= 0)
            v138 = HIBYTE(__dst.data);
          else
            v138 = __dst.info;
          std::string::append(&v258, v137, v138);
          if (SHIBYTE(__dst.data) < 0)
            operator delete(__dst.isa);
          HIBYTE(__dst.data) = 7;
          strcpy((char *)&__dst, "Distort");
          v139 = sub_20ABC5AF8(v19, &v258, (uint64_t)&__dst, &__p[32]);
          v140 = v139;
          if ((SHIBYTE(__dst.data) & 0x80000000) == 0)
          {
            if ((v139 & 1) != 0)
              goto LABEL_328;
LABEL_327:
            memset_pattern16(&__p[32], &unk_20AC05D80, 0x800uLL);
            goto LABEL_328;
          }
          operator delete(__dst.isa);
          if ((v140 & 1) == 0)
            goto LABEL_327;
LABEL_328:
          HIBYTE(__dst.data) = 13;
          strcpy((char *)&__dst, "Field Of View");
          v141 = cva::adp::io::PListSerializer::getItem<double>(v19, &v258, (uint64_t)&__dst, __p);
          v142 = v141;
          if ((SHIBYTE(__dst.data) & 0x80000000) == 0)
          {
            if ((v141 & 1) != 0)
              goto LABEL_331;
LABEL_330:
            *(_QWORD *)__p = 0x3FF921FB54442D18;
            goto LABEL_331;
          }
          operator delete(__dst.isa);
          if ((v142 & 1) == 0)
            goto LABEL_330;
LABEL_331:
          HIBYTE(__dst.data) = 9;
          strcpy((char *)&__dst, "Undistort");
          v143 = sub_20ABC5AF8(v19, &v258, (uint64_t)&__dst, v239);
          v144 = v143;
          if ((SHIBYTE(__dst.data) & 0x80000000) == 0)
          {
            if ((v143 & 1) != 0)
              goto LABEL_334;
LABEL_333:
            memset_pattern16(v239, &unk_20AC05D80, 0x800uLL);
            goto LABEL_334;
          }
          operator delete(__dst.isa);
          if ((v144 & 1) == 0)
            goto LABEL_333;
LABEL_334:
          HIBYTE(__dst.data) = 21;
          strcpy((char *)&__dst, "Inverse Field Of View");
          v145 = cva::adp::io::PListSerializer::getItem<double>(v19, &v258, (uint64_t)&__dst, &__p[8]);
          v146 = v145;
          if ((SHIBYTE(__dst.data) & 0x80000000) == 0)
          {
            if ((v145 & 1) != 0)
              goto LABEL_337;
LABEL_336:
            *(_QWORD *)&__p[8] = 0x3FF921FB54442D18;
            goto LABEL_337;
          }
          operator delete(__dst.isa);
          if ((v146 & 1) == 0)
            goto LABEL_336;
LABEL_337:
          HIBYTE(__dst.data) = 17;
          strcpy((char *)&__dst, "Distortion Center");
          v147 = sub_20ABC5CC0(v19, &v258, &__dst, &__p[16]);
          v148 = v147;
          if (SHIBYTE(__dst.data) < 0)
          {
            operator delete(__dst.isa);
            if ((v148 & 1) != 0)
            {
LABEL_339:
              if ((SHIBYTE(v258.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_340;
              goto LABEL_389;
            }
          }
          else if ((v147 & 1) != 0)
          {
            goto LABEL_339;
          }
          *(_QWORD *)&__p[16] = 0;
          *(_QWORD *)&__p[24] = 0;
          if ((SHIBYTE(v258.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_340:
            if ((SHIBYTE(v259.data) & 0x80000000) == 0)
              goto LABEL_341;
            goto LABEL_390;
          }
LABEL_389:
          operator delete(v258.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v259.data) & 0x80000000) == 0)
            goto LABEL_341;
LABEL_390:
          operator delete(v259.isa);
LABEL_341:
          v25 = operator new();
          *(_OWORD *)(v25 + 32) = *(_OWORD *)v251;
          *(_OWORD *)(v25 + 41) = *(_OWORD *)&v251[9];
          *(_OWORD *)(v25 + 64) = *(_OWORD *)&v251[32];
          v149 = v253;
          *(_OWORD *)(v25 + 88) = v252;
          *(_OWORD *)(v25 + 8) = xmmword_20AC05C90;
          *(_QWORD *)(v25 + 24) = 0x4017EB851EB851ECLL;
          *(_QWORD *)v25 = &off_24C37FD60;
          *(_BYTE *)(v25 + 80) = v251[48];
          *(_OWORD *)(v25 + 104) = v149;
          v150 = v254;
          *(double *)(v25 + 120) = *(double *)&v254;
          *(_OWORD *)(v25 + 144) = *(_OWORD *)&__p[16];
          memcpy((void *)(v25 + 160), &__p[32], 0x800uLL);
          memcpy((void *)(v25 + 2208), v239, 0x800uLL);
          v151 = *(double *)(v25 + 144);
          v152 = *(double *)(v25 + 152);
          v153 = *(double *)(v25 + 32);
          v154 = ((double)v150 - *(double *)(v25 + 64)) / v153 - v151;
          if (v154 <= v151)
            v154 = *(double *)(v25 + 144);
          v155 = ((double)HIDWORD(v150) - *(double *)(v25 + 72)) / v153 - v152;
          if (v155 <= v152)
            v155 = *(double *)(v25 + 152);
          v156 = atan(sqrt(v154 * v154 + v155 * v155));
          *(long double *)(v25 + 128) = v156;
          *(long double *)(v25 + 136) = v156;
          v157 = *(double *)&v240;
          *(double *)(v25 + 16) = *(double *)&v240;
          *(double *)(v25 + 24) = v157 * v157 * v6;
          v28 = 1;
          goto LABEL_49;
        default:
LABEL_44:
          v25 = 0;
          v28 = 0;
          goto LABEL_49;
      }
    }
  }
  return 1;
}

void sub_20ABC0530(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD2D02CLL);
}

uint64_t sub_20ABC0554(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *sub_20ABC0570(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24C37FAB0;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20ABC05AC(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24C37FAB0;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD2D02CLL);
}

uint64_t sub_20ABC05F8()
{
  return 0;
}

uint64_t sub_20ABC0600(uint64_t a1, uint64_t a2, double a3)
{
  double *v6;
  double *v7;
  double *v8;
  double *v9;
  uint64_t result;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) != 1)
    return 0;
  v7 = *(double **)(a1 + 40);
  v6 = *(double **)(a1 + 48);
  if (v7 == v6)
    return 0;
  if (*v7 <= a3)
  {
    v8 = v7 + 3;
    do
    {
      v9 = v8;
      if (v8 == v6)
        break;
      v8 += 3;
    }
    while (*v9 <= a3);
    v7 = v9 - 3;
  }
  *(double *)(a2 + 224) = v7[1] * *(double *)(a1 + 8) + *(double *)(a1 + 24);
  result = 1;
  *(_BYTE *)(a2 + 232) = 1;
  return result;
}

uint64_t sub_20ABC06A8(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  *(_BYTE *)(result + 32) = a2;
  return result;
}

uint64_t sub_20ABC06B4(std::string::size_type *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  const std::string::value_type *p_p;
  std::string::size_type data_high;
  uint64_t v9;
  uint64_t v10;
  char *v12;
  int v13;
  char v14;
  uint64_t v15;
  std::string __dst;
  __CFString __p;

  if (*(char *)(a2 + 23) < 0)
    sub_20AB88C14(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
  else
    __dst = *(std::string *)a2;
  cva::adp::PListPath::convertToPath(a3, (uint64_t)&__p);
  if (SHIBYTE(__p.data) >= 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = (const std::string::value_type *)__p.isa;
  if (SHIBYTE(__p.data) >= 0)
    data_high = HIBYTE(__p.data);
  else
    data_high = __p.info;
  std::string::append(&__dst, p_p, data_high);
  if (SHIBYTE(__p.data) < 0)
    operator delete(__p.isa);
  v15 = 0;
  HIBYTE(__p.data) = 4;
  strcpy((char *)&__p, "Data");
  v9 = sub_20ABC0820(a1, &__dst, &__p, &v15);
  v10 = v9;
  if (SHIBYTE(__p.data) < 0)
  {
    operator delete(__p.isa);
    if (!(_DWORD)v10)
    {
LABEL_14:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return v10;
LABEL_22:
      operator delete(__dst.__r_.__value_.__l.__data_);
      return v10;
    }
  }
  else if (!(_DWORD)v9)
  {
    goto LABEL_14;
  }
  *a4 = v15;
  v12 = (char *)(a4 + 1);
  HIBYTE(__p.data) = 5;
  strcpy((char *)&__p, "Fixed");
  v13 = cva::adp::io::PListSerializer::getItem<BOOL>(a1, &__dst, (uint64_t)&__p, v12);
  if (SHIBYTE(__p.data) < 0)
    operator delete(__p.isa);
  v14 = *v12 ^ 1;
  if (!v13)
    v14 = 1;
  *v12 = v14;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_22;
  return v10;
}

uint64_t sub_20ABC0820(std::string::size_type *a1, std::string *a2, CFStringRef a3, _QWORD *a4)
{
  std::string::size_type v6;
  const char *isa;
  const __CFString *v8;
  const __CFString *v9;
  char v10;
  void *v11;
  int v12;
  std::__shared_weak_count *v13;
  CFStringRef v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *v18[2];
  int v19;
  CFTypeRef cf;
  char v21;
  std::string::size_type v22;
  std::__shared_weak_count *v23;

  cva::adp::io::PListSerializer::getPath(a1, a2, &v22);
  v6 = v22;
  if (!v22)
  {
LABEL_17:
    v12 = 0;
    v13 = v23;
    if (!v23)
      return a3 & v12;
    goto LABEL_18;
  }
  if (SHIBYTE(a3->data) >= 0)
    isa = (const char *)a3;
  else
    isa = (const char *)a3->isa;
  a3 = CFStringCreateWithCStringNoCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], isa, 0x8000100u, (CFAllocatorRef)*MEMORY[0x24BDBD258]);
  v8 = (const __CFString *)objc_msgSend(*(id *)v6, "objectForKey:", a3);
  v9 = v8;
  v10 = *(_BYTE *)(v6 + 8);
  cf = v8;
  v21 = v10;
  if (!v8)
  {
    v21 = 0;
    v14 = a3;
LABEL_16:
    CFRelease(v14);
    goto LABEL_17;
  }
  CFRetain(v8);
  CFRelease(a3);
  if (!cva::ItemHandler::isVectorType(&cf))
  {
    v14 = v9;
    goto LABEL_16;
  }
  v18[0] = 0;
  v18[1] = 0;
  v19 = 0;
  sub_20ABC0994(&cf, (uint64_t)v18);
  v11 = v18[0];
  LODWORD(a3) = v19 == 1;
  if (v19 == 1 && v18[0] != a4)
    *a4 = *(_QWORD *)v18[0];
  free(v11);
  if (cf)
    CFRelease(cf);
  v12 = 1;
  v13 = v23;
  if (v23)
  {
LABEL_18:
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return a3 & v12;
}

void sub_20ABC0980(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_20ABC0994(const void **a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  size_t v5;
  size_t v6;
  void *__src[2];
  unsigned int v8;
  void *memptr;

  cva::ItemHandler::getVector<double>(a1, (uint64_t)__src);
  if (__src != (void **)a2)
  {
    v3 = v8;
    if (v8)
    {
      v4 = *(void **)a2;
      if (*(_QWORD *)(a2 + 8) >= (unint64_t)v8)
      {
        v5 = 8 * v8;
      }
      else
      {
        free(v4);
        v5 = 8 * v3;
        v6 = (v5 + 31) & 0xFFFFFFFE0;
        *(_QWORD *)a2 = 0;
        *(_QWORD *)(a2 + 8) = v6 >> 3;
        memptr = 0;
        malloc_type_posix_memalign(&memptr, 0x20uLL, v6, 0x49090899uLL);
        v4 = memptr;
        *(_QWORD *)a2 = memptr;
      }
      memcpy(v4, __src[0], v5);
    }
    else
    {
      free(*(void **)a2);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    *(_DWORD *)(a2 + 16) = v8;
  }
  free(__src[0]);
}

uint64_t sub_20ABC0A4C(std::string::size_type *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  const __CFString *p_p;
  const std::string::value_type *v8;
  std::string::size_type v9;
  std::string::size_type v10;
  CFStringRef v11;
  void **v12;
  char v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  CFStringRef v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  int v19;
  int v21;
  char v22;
  char cStr[8];
  char v24;
  std::string __dst;
  void *__p;
  std::string::size_type v27;
  int v28;
  char v29;
  CFTypeRef cf;
  char v31;
  std::string::size_type v32;
  std::__shared_weak_count *v33;

  if (*(char *)(a2 + 23) < 0)
    sub_20AB88C14(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
  else
    __dst = *(std::string *)a2;
  p_p = (const __CFString *)&__p;
  cva::adp::PListPath::convertToPath(a3, (uint64_t)&__p);
  if (v29 >= 0)
    v8 = (const std::string::value_type *)&__p;
  else
    v8 = (const std::string::value_type *)__p;
  if (v29 >= 0)
    v9 = v29;
  else
    v9 = v27;
  std::string::append(&__dst, v8, v9);
  if (v29 < 0)
    operator delete(__p);
  v24 = 4;
  strcpy(cStr, "Data");
  cva::adp::io::PListSerializer::getPath(a1, &__dst, &v32);
  v10 = v32;
  if (!v32)
  {
LABEL_25:
    v15 = v33;
    if (!v33)
      goto LABEL_30;
    goto LABEL_26;
  }
  v11 = CFStringCreateWithCStringNoCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], cStr, 0x8000100u, (CFAllocatorRef)*MEMORY[0x24BDBD258]);
  v12 = (void **)objc_msgSend(*(id *)v10, "objectForKey:", v11);
  p_p = (const __CFString *)v12;
  v13 = *(_BYTE *)(v10 + 8);
  cf = v12;
  v31 = v13;
  if (!v12)
  {
    v31 = 0;
    v16 = v11;
LABEL_24:
    CFRelease(v16);
    LODWORD(v10) = 0;
    goto LABEL_25;
  }
  CFRetain(v12);
  CFRelease(v11);
  if (!cva::ItemHandler::isVectorType(&cf))
  {
    v16 = p_p;
    goto LABEL_24;
  }
  __p = 0;
  v27 = 0;
  v28 = 0;
  sub_20ABC0994(&cf, (uint64_t)&__p);
  v14 = __p;
  LODWORD(p_p) = v28 == 9;
  if (v28 == 9 && __p != a4 + 1)
  {
    a4[1] = *(_QWORD *)__p;
    a4[2] = v14[1];
    a4[3] = v14[2];
    a4[4] = v14[3];
    a4[5] = v14[4];
    a4[6] = v14[5];
    a4[7] = v14[6];
    a4[8] = v14[7];
    a4[9] = v14[8];
  }
  free(v14);
  if (cf)
    CFRelease(cf);
  LODWORD(v10) = 1;
  v15 = v33;
  if (v33)
  {
LABEL_26:
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
LABEL_30:
  v19 = p_p & v10;
  if (v24 < 0)
  {
    operator delete(*(void **)cStr);
    if (!v19)
    {
LABEL_32:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return p_p & v10;
LABEL_40:
      operator delete(__dst.__r_.__value_.__l.__data_);
      return p_p & v10;
    }
  }
  else if (!v19)
  {
    goto LABEL_32;
  }
  v29 = 5;
  strcpy((char *)&__p, "Fixed");
  v21 = cva::adp::io::PListSerializer::getItem<BOOL>(a1, &__dst, (uint64_t)&__p, a4);
  if (v29 < 0)
    operator delete(__p);
  v22 = *(_BYTE *)a4 ^ 1;
  if (!v21)
    v22 = 1;
  *(_BYTE *)a4 = v22;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_40;
  return p_p & v10;
}

void sub_20ABC0D0C(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20ABC0D20(std::string::size_type *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  const __CFString *p_p;
  const std::string::value_type *v8;
  std::string::size_type v9;
  std::string::size_type v10;
  CFStringRef v11;
  void **v12;
  char v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  CFStringRef v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  int v19;
  char *v21;
  int v22;
  char v23;
  char cStr[8];
  char v25;
  std::string __dst;
  void *__p;
  std::string::size_type v28;
  int v29;
  char v30;
  CFTypeRef cf;
  char v32;
  std::string::size_type v33;
  std::__shared_weak_count *v34;

  if (*(char *)(a2 + 23) < 0)
    sub_20AB88C14(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
  else
    __dst = *(std::string *)a2;
  p_p = (const __CFString *)&__p;
  cva::adp::PListPath::convertToPath(a3, (uint64_t)&__p);
  if (v30 >= 0)
    v8 = (const std::string::value_type *)&__p;
  else
    v8 = (const std::string::value_type *)__p;
  if (v30 >= 0)
    v9 = v30;
  else
    v9 = v28;
  std::string::append(&__dst, v8, v9);
  if (v30 < 0)
    operator delete(__p);
  v25 = 4;
  strcpy(cStr, "Data");
  cva::adp::io::PListSerializer::getPath(a1, &__dst, &v33);
  v10 = v33;
  if (!v33)
  {
LABEL_25:
    v15 = v34;
    if (!v34)
      goto LABEL_30;
    goto LABEL_26;
  }
  v11 = CFStringCreateWithCStringNoCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], cStr, 0x8000100u, (CFAllocatorRef)*MEMORY[0x24BDBD258]);
  v12 = (void **)objc_msgSend(*(id *)v10, "objectForKey:", v11);
  p_p = (const __CFString *)v12;
  v13 = *(_BYTE *)(v10 + 8);
  cf = v12;
  v32 = v13;
  if (!v12)
  {
    v32 = 0;
    v16 = v11;
LABEL_24:
    CFRelease(v16);
    LODWORD(v10) = 0;
    goto LABEL_25;
  }
  CFRetain(v12);
  CFRelease(v11);
  if (!cva::ItemHandler::isVectorType(&cf))
  {
    v16 = p_p;
    goto LABEL_24;
  }
  __p = 0;
  v28 = 0;
  v29 = 0;
  sub_20ABC0994(&cf, (uint64_t)&__p);
  v14 = __p;
  LODWORD(p_p) = v29 == 3;
  if (v29 == 3 && __p != a4)
  {
    *a4 = *(_QWORD *)__p;
    a4[1] = v14[1];
    a4[2] = v14[2];
  }
  free(v14);
  if (cf)
    CFRelease(cf);
  LODWORD(v10) = 1;
  v15 = v34;
  if (v34)
  {
LABEL_26:
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
LABEL_30:
  v19 = p_p & v10;
  if (v25 < 0)
  {
    operator delete(*(void **)cStr);
    if (!v19)
    {
LABEL_32:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return p_p & v10;
LABEL_40:
      operator delete(__dst.__r_.__value_.__l.__data_);
      return p_p & v10;
    }
  }
  else if (!v19)
  {
    goto LABEL_32;
  }
  v30 = 5;
  strcpy((char *)&__p, "Fixed");
  v21 = (char *)(a4 + 3);
  v22 = cva::adp::io::PListSerializer::getItem<BOOL>(a1, &__dst, (uint64_t)&__p, v21);
  if (v30 < 0)
    operator delete(__p);
  v23 = *v21 ^ 1;
  if (!v22)
    v23 = 1;
  *v21 = v23;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_40;
  return p_p & v10;
}

void sub_20ABC0FB0(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

__n128 sub_20ABC0FC4(uint64_t a1, uint64_t a2)
{
  double *v3;
  double *v4;
  __n128 result;
  __int128 v6;
  __int128 v7;
  __n128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v3 = *(double **)a2;
  if (*(_QWORD *)a2 == a1)
  {
    v11 = 0;
    v9 = 0u;
    v10 = 0u;
    v7 = 0u;
    v8 = 0u;
    sub_20ABC0FC4(&v7);
    v6 = v10;
    *(_OWORD *)(a1 + 32) = v9;
    *(_OWORD *)(a1 + 48) = v6;
    *(_QWORD *)(a1 + 64) = v11;
    result = v8;
    *(_OWORD *)a1 = v7;
    *(__n128 *)(a1 + 16) = result;
  }
  else
  {
    v4 = **(double ***)(a2 + 8);
    *(double *)a1 = *v3 * *v4 + 0.0 + v3[3] * v4[3] + v3[6] * v4[6];
    *(double *)(a1 + 8) = v3[1] * *v4 + 0.0 + v3[4] * v4[3] + v3[7] * v4[6];
    *(double *)(a1 + 16) = v3[2] * *v4 + 0.0 + v3[5] * v4[3] + v3[8] * v4[6];
    *(double *)(a1 + 24) = *v3 * v4[1] + 0.0 + v3[3] * v4[4] + v3[6] * v4[7];
    *(double *)(a1 + 32) = v3[1] * v4[1] + 0.0 + v3[4] * v4[4] + v3[7] * v4[7];
    *(double *)(a1 + 40) = v3[2] * v4[1] + 0.0 + v3[5] * v4[4] + v3[8] * v4[7];
    *(double *)(a1 + 48) = *v3 * v4[2] + 0.0 + v3[3] * v4[5] + v3[6] * v4[8];
    *(double *)(a1 + 56) = v3[1] * v4[2] + 0.0 + v3[4] * v4[5] + v3[7] * v4[8];
    result.n128_f64[0] = v3[2] * v4[2] + 0.0 + v3[5] * v4[5] + v3[8] * v4[8];
    *(_QWORD *)(a1 + 64) = result.n128_u64[0];
  }
  return result;
}

_QWORD *sub_20ABC119C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24C37F9C0;
  v2 = (std::__shared_weak_count *)a1[33];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void sub_20ABC1200(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C37F9C0;
  v1 = (std::__shared_weak_count *)a1[33];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD2D02CLL);
}

uint64_t sub_20ABC1274()
{
  return 1;
}

uint64_t sub_20ABC127C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new();
  *(_QWORD *)result = &off_24C37F9C0;
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  v5 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(result + 48) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(result + 64) = v5;
  *(_QWORD *)(result + 80) = *(_QWORD *)(a1 + 80);
  v6 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(result + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(result + 32) = v6;
  *(_OWORD *)(result + 88) = *(_OWORD *)(a1 + 88);
  *(_QWORD *)(result + 104) = *(_QWORD *)(a1 + 104);
  *(_BYTE *)(result + 112) = *(_BYTE *)(a1 + 112);
  *(_BYTE *)(result + 120) = *(_BYTE *)(a1 + 120);
  v7 = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(result + 160) = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(result + 176) = v7;
  *(_QWORD *)(result + 192) = *(_QWORD *)(a1 + 192);
  v8 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(result + 128) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(result + 144) = v8;
  *(_OWORD *)(result + 200) = *(_OWORD *)(a1 + 200);
  *(_BYTE *)(result + 216) = *(_BYTE *)(a1 + 216);
  v9 = *(_OWORD *)(a1 + 224);
  *(_OWORD *)(result + 233) = *(_OWORD *)(a1 + 233);
  *(_OWORD *)(result + 224) = v9;
  v10 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(result + 256) = *(_QWORD *)(a1 + 256);
  *(_QWORD *)(result + 264) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *a2 = result;
  return result;
}

uint64_t sub_20ABC135C(uint64_t a1, char a2)
{
  uint64_t result;

  *(_BYTE *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 112) = a2;
  *(_BYTE *)(a1 + 120) = a2;
  *(_BYTE *)(a1 + 216) = a2;
  result = *(_QWORD *)(a1 + 256);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  return result;
}

double sub_20ABC1384@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v4;
  double v5;
  __double2 v6;
  float64x2_t v7;
  __double2 v8;
  float64x2_t v9;
  double v10;
  double result;
  double v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  float64x2_t v18;
  double v19;
  uint64_t v20;
  float64x2_t v21;
  double v22;

  v13 = xmmword_20AC06268;
  v14 = unk_20AC06278;
  v15 = xmmword_20AC06288;
  v17 = 0x3FF0000000000000;
  v16 = unk_20AC06298;
  v19 = 0.0;
  v20 = 1;
  v21 = 0uLL;
  v22 = 0.0;
  sub_20AB929EC((float64x2_t *)(a1 + 128), v21.f64);
  v4 = *(double *)(a1 + 224);
  v18 = vmulq_n_f64(v21, v4);
  v19 = v22 * v4;
  sub_20ABC3D24(v18.f64, (double *)(a1 + 16), (uint64_t)&v13);
  *(_BYTE *)a2 = 1;
  *(_OWORD *)(a2 + 24) = v14;
  *(_OWORD *)(a2 + 40) = v15;
  *(_OWORD *)(a2 + 56) = v16;
  *(_QWORD *)(a2 + 72) = v17;
  *(_OWORD *)(a2 + 8) = v13;
  v12 = *(double *)(a1 + 240);
  v5 = *(double *)(a1 + 200);
  v6 = __sincos_stret(*(double *)(a1 + 208));
  v8 = __sincos_stret(v5);
  v7.f64[0] = v8.__cosval;
  v7.f64[1] = v8.__sinval;
  v9 = vmulq_n_f64(v7, v12);
  v7.f64[0] = *(float64_t *)(a1 + 224);
  v10 = *(double *)(a1 + 104);
  *(float64x2_t *)(a2 + 80) = vaddq_f64(vmulq_n_f64(vmulq_n_f64(v9, v6.__sinval), v7.f64[0]), *(float64x2_t *)(a1 + 88));
  result = v12 * v6.__cosval * v7.f64[0] + v10;
  *(double *)(a2 + 96) = result;
  *(_BYTE *)(a2 + 104) = 1;
  return result;
}

double sub_20ABC14CC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v4;
  double v5;
  __double2 v6;
  float64x2_t v7;
  __double2 v8;
  double v9;
  double v10;
  double result;
  double v12;
  _QWORD v13[9];
  float64x2_t v14;
  double v15;
  uint64_t v16;
  _BYTE v17[24];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  float64x2_t v22;
  double v23;
  uint64_t v24;
  float64x2_t v25;
  double v26;

  *(_OWORD *)&v17[8] = xmmword_20AC06268;
  v18 = unk_20AC06278;
  v19 = xmmword_20AC06288;
  *(_BYTE *)(a2 + 24) = 1;
  v16 = 1;
  v20 = unk_20AC06298;
  v21 = 0x3FF0000000000000;
  v23 = 0.0;
  v24 = 1;
  v25 = 0uLL;
  v26 = 0.0;
  sub_20AB929EC((float64x2_t *)(a1 + 128), v25.f64);
  v4 = *(double *)(a1 + 224);
  v22 = vmulq_n_f64(v25, v4);
  v23 = v26 * v4;
  sub_20ABC3D24(v22.f64, (double *)(a1 + 16), (uint64_t)&v17[8]);
  v13[0] = *(_QWORD *)&v17[8];
  v13[1] = *((_QWORD *)&v18 + 1);
  v13[2] = v20;
  v13[3] = *(_QWORD *)&v17[16];
  v13[4] = v19;
  v13[5] = *((_QWORD *)&v20 + 1);
  v13[6] = v18;
  v13[7] = *((_QWORD *)&v19 + 1);
  v13[8] = v21;
  v12 = *(double *)(a1 + 240);
  v5 = *(double *)(a1 + 200);
  v6 = __sincos_stret(*(double *)(a1 + 208));
  v8 = __sincos_stret(v5);
  v7.f64[0] = v8.__cosval;
  v9 = *(double *)(a1 + 224);
  v7.f64[1] = v8.__sinval;
  v14 = vaddq_f64(vmulq_n_f64(vmulq_n_f64(vmulq_n_f64(v7, v12), v6.__sinval), v9), *(float64x2_t *)(a1 + 88));
  v15 = v12 * v6.__cosval * v9 + *(double *)(a1 + 104);
  *(_QWORD *)&v22.f64[0] = v13;
  *(_QWORD *)&v22.f64[1] = &v14;
  memset(v17, 0, sizeof(v17));
  sub_20AB933B0((uint64_t)v17, (double **)&v22);
  v10 = *(double *)&v17[16];
  *(float64x2_t *)a2 = vnegq_f64(*(float64x2_t *)v17);
  result = -v10;
  *(double *)(a2 + 16) = -v10;
  return result;
}

void sub_20ABC1658(uint64_t a1@<X0>, float64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v6;
  double v7;
  __double2 v8;
  float64x2_t v9;
  __double2 v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  float64x2_t v16;
  _OWORD v17[4];
  uint64_t v18;
  float64x2_t v19;
  double v20;
  char v21;
  float64x2_t v22;
  double v23;
  uint64_t v24;
  float64x2_t v25;
  double v26;
  char v27;
  float64x2_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v28 = (float64x2_t)xmmword_20AC06268;
  v29 = unk_20AC06278;
  v30 = xmmword_20AC06288;
  v27 = 1;
  v32 = 0x3FF0000000000000;
  v31 = unk_20AC06298;
  v23 = 0.0;
  v24 = 1;
  v25 = 0uLL;
  v26 = 0.0;
  sub_20AB929EC((float64x2_t *)(a1 + 128), v25.f64);
  v6 = *(double *)(a1 + 224);
  v22 = vmulq_n_f64(v25, v6);
  v23 = v26 * v6;
  sub_20ABC3D24(v22.f64, (double *)(a1 + 16), (uint64_t)&v28);
  v17[1] = v29;
  v17[2] = v30;
  v17[3] = v31;
  v18 = v32;
  v17[0] = v28;
  v15 = *(double *)(a1 + 240);
  v7 = *(double *)(a1 + 200);
  v8 = __sincos_stret(*(double *)(a1 + 208));
  v10 = __sincos_stret(v7);
  v9.f64[0] = v10.__cosval;
  v9.f64[1] = v10.__sinval;
  v11 = *(double *)(a1 + 224);
  v12 = v15 * v8.__cosval * v11;
  v16 = vaddq_f64(vmulq_n_f64(vmulq_n_f64(vmulq_n_f64(v9, v15), v8.__sinval), v11), *(float64x2_t *)(a1 + 88));
  v9.f64[0] = *(float64_t *)(a1 + 104);
  v19 = v16;
  v13 = v12 + v9.f64[0];
  v20 = v12 + v9.f64[0];
  v21 = 1;
  *(_QWORD *)&v22.f64[0] = v17;
  v22.f64[1] = a2;
  *(_QWORD *)&v29 = 0;
  v28 = 0uLL;
  sub_20AB933B0((uint64_t)&v28, (double **)&v22);
  v14 = *(double *)&v29 + v13;
  *(float64x2_t *)a3 = vaddq_f64(v28, v16);
  *(double *)(a3 + 16) = v14;
  *(_BYTE *)(a3 + 24) = 1;
}

void sub_20ABC1824(uint64_t a1@<X0>, float64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v6;
  double v7;
  __double2 v8;
  float64x2_t v9;
  __double2 v10;
  float64x2_t v11;
  double v12;
  double v13;
  double v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  float64x2_t v20;
  double v21;
  char v22;
  double *v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  float64x2_t v30;
  double v31;
  _BYTE v32[24];
  double v33;
  float64x2_t v34;
  double v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v25 = xmmword_20AC06268;
  v26 = unk_20AC06278;
  v27 = xmmword_20AC06288;
  v24 = 1;
  v29 = 0x3FF0000000000000;
  v28 = unk_20AC06298;
  *(_QWORD *)&v32[16] = 0;
  *(_QWORD *)&v33 = 1;
  v30 = 0uLL;
  v31 = 0.0;
  sub_20AB929EC((float64x2_t *)(a1 + 128), v30.f64);
  v6 = *(double *)(a1 + 224);
  *(float64x2_t *)v32 = vmulq_n_f64(v30, v6);
  *(double *)&v32[16] = v31 * v6;
  sub_20ABC3D24((double *)v32, (double *)(a1 + 16), (uint64_t)&v25);
  v16 = v26;
  v17 = v27;
  v18 = v28;
  v19 = v29;
  v15 = v25;
  v14 = *(double *)(a1 + 240);
  v7 = *(double *)(a1 + 200);
  v8 = __sincos_stret(*(double *)(a1 + 208));
  v10 = __sincos_stret(v7);
  v9.f64[0] = v10.__cosval;
  v9.f64[1] = v10.__sinval;
  v11 = vmulq_n_f64(v9, v14);
  v9.f64[0] = *(float64_t *)(a1 + 224);
  v12 = *(double *)(a1 + 104);
  v20 = vaddq_f64(vmulq_n_f64(vmulq_n_f64(v11, v8.__sinval), v9.f64[0]), *(float64x2_t *)(a1 + 88));
  v21 = v14 * v8.__cosval * v9.f64[0] + v12;
  v22 = 1;
  v24 = 1;
  *(_QWORD *)&v25 = v15;
  *((_QWORD *)&v25 + 1) = *((_QWORD *)&v16 + 1);
  *(_QWORD *)&v26 = v18;
  *((_QWORD *)&v26 + 1) = *((_QWORD *)&v15 + 1);
  *(_QWORD *)&v27 = v17;
  *((_QWORD *)&v27 + 1) = *((_QWORD *)&v18 + 1);
  *(_QWORD *)&v28 = v16;
  *((_QWORD *)&v28 + 1) = *((_QWORD *)&v17 + 1);
  v29 = v19;
  *(_QWORD *)&v30.f64[0] = &v25;
  v30.f64[1] = a2;
  v23[0] = (double *)&v25;
  v23[1] = (double *)&v20;
  *(_QWORD *)&v32[16] = 0;
  v33 = 0.0;
  *(_QWORD *)&v32[8] = 0;
  sub_20AB933B0((uint64_t)&v32[8], (double **)&v30);
  v34 = 0uLL;
  v35 = 0.0;
  sub_20AB933B0((uint64_t)&v34, v23);
  v13 = v33 - v35;
  *(float64x2_t *)a3 = vsubq_f64(*(float64x2_t *)&v32[8], v34);
  *(double *)(a3 + 16) = v13;
  *(_BYTE *)(a3 + 24) = 1;
}

BOOL sub_20ABC1A3C(uint64_t a1, _QWORD *a2)
{
  int v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  if (!v4)
  {
    v7 = *a2;
    v6 = a2[1];
    if (v6)
    {
      v8 = (unint64_t *)(v6 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    v10 = *(std::__shared_weak_count **)(a1 + 264);
    *(_QWORD *)(a1 + 256) = v7;
    *(_QWORD *)(a1 + 264) = v6;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  return v4 == 0;
}

uint64_t sub_20ABC1AE0(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 256);
  if (v2)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 24))(v2, a1);
  else
    return 1;
}

uint64_t *sub_20ABC1B00(uint64_t a1, uint64_t *a2)
{
  const char *v4;
  size_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t *v11;
  const char *v12;
  size_t v13;
  void **v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t *v20;
  const char *v21;
  size_t v22;
  void **v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  const char *v29;
  size_t v30;
  void **v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  void *__p[2];
  char v39;
  char __dst[18];
  char v41;
  void *v42[2];
  double v43;

  sub_20ABC212C((_BYTE *)(a1 + 8), a2);
  sub_20ABC2274((__int128 *)(a1 + 88), a2);
  if (*(_BYTE *)(a1 + 120))
    v4 = "[FREE]";
  else
    v4 = "[FIXED]";
  if (*(_BYTE *)(a1 + 120))
    v5 = 6;
  else
    v5 = 7;
  v41 = v5;
  memcpy(__dst, v4, v5);
  *(_BYTE *)((unint64_t)__dst | v5) = 0;
  if (v41 >= 0)
    v6 = __dst;
  else
    v6 = *(char **)__dst;
  if (v41 >= 0)
    v7 = v41;
  else
    v7 = *(_QWORD *)&__dst[8];
  v8 = sub_20AB89270(a2, (uint64_t)v6, v7);
  v9 = sub_20AB89270(v8, (uint64_t)"[", 1);
  v39 = 14;
  strcpy((char *)__p, "Delta Rotation");
  v10 = sub_20AB89270(v9, (uint64_t)__p, 14);
  sub_20AB89270(v10, (uint64_t)"] : ", 4);
  v42[0] = 0;
  v42[1] = 0;
  v43 = 0.0;
  sub_20AB929EC((float64x2_t *)(a1 + 128), (double *)v42);
  v11 = sub_20ABC3490(a2, *(__n128 *)v42, v43);
  sub_20AB89270(v11, (uint64_t)"\n", 1);
  if (v39 < 0)
  {
    operator delete(__p[0]);
    if ((v41 & 0x80000000) == 0)
      goto LABEL_15;
  }
  else if ((v41 & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete(*(void **)__dst);
LABEL_15:
  if (*(_BYTE *)(a1 + 216))
    v12 = "[FREE]";
  else
    v12 = "[FIXED]";
  if (*(_BYTE *)(a1 + 216))
    v13 = 6;
  else
    v13 = 7;
  HIBYTE(v43) = v13;
  memcpy(v42, v12, v13);
  *(_BYTE *)((unint64_t)v42 | v13) = 0;
  if (v43 >= 0.0)
    v14 = v42;
  else
    v14 = (void **)v42[0];
  if (v43 >= 0.0)
    v15 = HIBYTE(v43);
  else
    v15 = (uint64_t)v42[1];
  v16 = sub_20AB89270(a2, (uint64_t)v14, v15);
  v17 = sub_20AB89270(v16, (uint64_t)"[", 1);
  v41 = 17;
  strcpy(__dst, "Delta Translation");
  v18 = sub_20AB89270(v17, (uint64_t)__dst, 17);
  v19 = sub_20AB89270(v18, (uint64_t)"] : ", 4);
  v20 = sub_20ABC2C00(v19, *(__n128 *)(a1 + 200));
  sub_20AB89270(v20, (uint64_t)"\n", 1);
  if (v41 < 0)
  {
    operator delete(*(void **)__dst);
    if ((SHIBYTE(v43) & 0x80000000) == 0)
      goto LABEL_29;
  }
  else if ((SHIBYTE(v43) & 0x80000000) == 0)
  {
    goto LABEL_29;
  }
  operator delete(v42[0]);
LABEL_29:
  if (*(_BYTE *)(a1 + 232))
    v21 = "[FREE]";
  else
    v21 = "[FIXED]";
  if (*(_BYTE *)(a1 + 232))
    v22 = 6;
  else
    v22 = 7;
  HIBYTE(v43) = v22;
  memcpy(v42, v21, v22);
  *(_BYTE *)((unint64_t)v42 | v22) = 0;
  if (v43 >= 0.0)
    v23 = v42;
  else
    v23 = (void **)v42[0];
  if (v43 >= 0.0)
    v24 = HIBYTE(v43);
  else
    v24 = (uint64_t)v42[1];
  v25 = sub_20AB89270(a2, (uint64_t)v23, v24);
  v26 = sub_20AB89270(v25, (uint64_t)"[", 1);
  v41 = 15;
  strcpy(__dst, "Linear Position");
  v27 = sub_20AB89270(v26, (uint64_t)__dst, 15);
  sub_20AB89270(v27, (uint64_t)"] : ", 4);
  v28 = (_QWORD *)std::ostream::operator<<();
  sub_20AB89270(v28, (uint64_t)"\n", 1);
  if (v41 < 0)
  {
    operator delete(*(void **)__dst);
    if ((SHIBYTE(v43) & 0x80000000) == 0)
      goto LABEL_43;
  }
  else if ((SHIBYTE(v43) & 0x80000000) == 0)
  {
    goto LABEL_43;
  }
  operator delete(v42[0]);
LABEL_43:
  if (*(_BYTE *)(a1 + 248))
    v29 = "[FREE]";
  else
    v29 = "[FIXED]";
  if (*(_BYTE *)(a1 + 248))
    v30 = 6;
  else
    v30 = 7;
  HIBYTE(v43) = v30;
  memcpy(v42, v29, v30);
  *(_BYTE *)((unint64_t)v42 | v30) = 0;
  if (v43 >= 0.0)
    v31 = v42;
  else
    v31 = (void **)v42[0];
  if (v43 >= 0.0)
    v32 = HIBYTE(v43);
  else
    v32 = (uint64_t)v42[1];
  v33 = sub_20AB89270(a2, (uint64_t)v31, v32);
  v34 = sub_20AB89270(v33, (uint64_t)"[", 1);
  v41 = 13;
  strcpy(__dst, "Linear Length");
  v35 = sub_20AB89270(v34, (uint64_t)__dst, 13);
  sub_20AB89270(v35, (uint64_t)"] : ", 4);
  v36 = (_QWORD *)std::ostream::operator<<();
  sub_20AB89270(v36, (uint64_t)"\n", 1);
  if (v41 < 0)
  {
    operator delete(*(void **)__dst);
    if ((SHIBYTE(v43) & 0x80000000) == 0)
      return a2;
LABEL_65:
    operator delete(v42[0]);
    return a2;
  }
  if (SHIBYTE(v43) < 0)
    goto LABEL_65;
  return a2;
}

BOOL sub_20ABC1F08(uint64_t a1, uint64_t a2, double a3)
{
  double v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  float64x2_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) != 1)
    return 0;
  v15 = a2 + 16;
  v16 = a1 + 16;
  v17 = &v15;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0;
  sub_20ABC0FC4((uint64_t)&v18, (uint64_t)&v16);
  v11 = v19;
  v12 = v20;
  v13 = v21;
  v14 = v22;
  v10 = v18;
  v18 = 0uLL;
  *(_QWORD *)&v19 = 0;
  sub_20AB929EC(&v10, v18.f64);
  if (sqrt(v18.f64[0] * v18.f64[0] + v18.f64[1] * v18.f64[1] + *(double *)&v19 * *(double *)&v19) >= a3)
    return 0;
  v6 = *(double *)(a1 + 104) - *(double *)(a2 + 104);
  v7 = vsubq_f64(*(float64x2_t *)(a1 + 88), *(float64x2_t *)(a2 + 88));
  if (sqrt(vaddvq_f64(vmulq_f64(v7, v7)) + v6 * v6) >= a3)
    return 0;
  v15 = a2 + 128;
  v16 = a1 + 128;
  v17 = &v15;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0;
  sub_20ABC0FC4((uint64_t)&v18, (uint64_t)&v16);
  v11 = v19;
  v12 = v20;
  v13 = v21;
  v14 = v22;
  v10 = v18;
  v18 = 0uLL;
  *(_QWORD *)&v19 = 0;
  sub_20AB929EC(&v10, v18.f64);
  if (sqrt(v18.f64[0] * v18.f64[0] + v18.f64[1] * v18.f64[1] + *(double *)&v19 * *(double *)&v19) >= a3)
    return 0;
  if (*(unsigned __int8 *)(a1 + 120) == *(unsigned __int8 *)(a2 + 120)
    && (v8 = vsubq_f64(*(float64x2_t *)(a1 + 200), *(float64x2_t *)(a2 + 200)), sqrt(vaddvq_f64(vmulq_f64(v8, v8))) < a3)
    && *(unsigned __int8 *)(a1 + 216) == *(unsigned __int8 *)(a2 + 216)
    && *(double *)(a1 + 224) - *(double *)(a2 + 224) < a3)
  {
    return *(double *)(a1 + 240) - *(double *)(a2 + 240) < a3;
  }
  else
  {
    return 0;
  }
}

uint64_t *sub_20ABC212C(_BYTE *a1, uint64_t *a2)
{
  float64x2_t *v3;
  const char *v4;
  size_t v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t *v11;
  char __p[20];
  char v14;
  void *__dst[2];
  unsigned __int8 v16;
  __n128 v17;
  double v18;

  v3 = (float64x2_t *)(a1 + 8);
  if (*a1)
    v4 = "[FREE]";
  else
    v4 = "[FIXED]";
  if (*a1)
    v5 = 6;
  else
    v5 = 7;
  v16 = v5;
  memcpy(__dst, v4, v5);
  *(_BYTE *)((unint64_t)__dst | v5) = 0;
  if ((v16 & 0x80u) == 0)
    v6 = __dst;
  else
    v6 = (void **)__dst[0];
  if ((v16 & 0x80u) == 0)
    v7 = v16;
  else
    v7 = (uint64_t)__dst[1];
  v8 = sub_20AB89270(a2, (uint64_t)v6, v7);
  v9 = sub_20AB89270(v8, (uint64_t)"[", 1);
  v14 = 19;
  strcpy(__p, "Extrinsics Rotation");
  v10 = sub_20AB89270(v9, (uint64_t)__p, 19);
  sub_20AB89270(v10, (uint64_t)"] : ", 4);
  v17 = 0uLL;
  v18 = 0.0;
  sub_20AB929EC(v3, v17.n128_f64);
  v11 = sub_20ABC3490(a2, v17, v18);
  sub_20AB89270(v11, (uint64_t)"\n", 1);
  if (v14 < 0)
  {
    operator delete(*(void **)__p);
    if (((char)v16 & 0x80000000) == 0)
      return a2;
LABEL_17:
    operator delete(__dst[0]);
    return a2;
  }
  if ((char)v16 < 0)
    goto LABEL_17;
  return a2;
}

uint64_t *sub_20ABC2274(__int128 *a1, uint64_t *a2)
{
  const char *v4;
  size_t v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  char *v11;
  int v12;
  int64_t v13;
  size_t v14;
  size_t v15;
  double v16;
  size_t v17;
  double v18;
  std::string *p_b;
  uint64_t v20;
  uint64_t v21;
  std::string *v22;
  std::string::size_type v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  std::string *v29;
  std::string::size_type v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  void **v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  void **v42;
  int v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  void **v49;
  char *v50;
  void **v51;
  const std::locale::facet *v52;
  uint64_t v53;
  BOOL v54;
  std::string::size_type v55;
  std::string::size_type v56;
  int64_t v57;
  void **v58;
  uint64_t v59;
  void **v60;
  const std::locale::facet *v61;
  uint64_t v62;
  std::string::size_type v63;
  int64_t v64;
  void **v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  std::string *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  void **v74;
  int v75;
  const std::locale::facet *v76;
  uint64_t v77;
  std::string::size_type v78;
  std::string::size_type v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  std::string *v83;
  uint64_t v84;
  uint64_t v85;
  int v87;
  void **v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  void *v93[3];
  void *__dst[2];
  unsigned __int8 v95;
  void *v96;
  std::string::size_type v97;
  int64_t v98;
  std::string __b;
  void *__p[2];
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  std::string v104;

  if (*((_BYTE *)a1 + 24))
    v4 = "[FREE]";
  else
    v4 = "[FIXED]";
  if (*((_BYTE *)a1 + 24))
    v5 = 6;
  else
    v5 = 7;
  v95 = v5;
  memcpy(__dst, v4, v5);
  *(_BYTE *)((unint64_t)__dst | v5) = 0;
  if ((v95 & 0x80u) == 0)
    v6 = __dst;
  else
    v6 = (void **)__dst[0];
  if ((v95 & 0x80u) == 0)
    v7 = v95;
  else
    v7 = (uint64_t)__dst[1];
  v8 = sub_20AB89270(a2, (uint64_t)v6, v7);
  v9 = sub_20AB89270(v8, (uint64_t)"[", 1);
  strcpy((char *)v93, "Extrinsics Translation");
  HIBYTE(v93[2]) = 22;
  v10 = sub_20AB89270(v9, (uint64_t)v93, 22);
  sub_20AB89270(v10, (uint64_t)"] : ", 4);
  v102 = *a1;
  v103 = *((_QWORD *)a1 + 2);
  v11 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  v12 = *((_DWORD *)v11 + 2);
  v14 = *((_QWORD *)v11 + 2);
  v13 = *((_QWORD *)v11 + 3);
  if (v13)
  {
    if (v13 <= (uint64_t)(v14 + 2))
      v13 = v14 + 2;
    v15 = v13 + ~v14;
    v16 = __exp10((double)-(uint64_t)v14);
    v17 = v15 - 1;
    if (v15 - 1 > 0x7FFFFFFFFFFFFFF7)
LABEL_149:
      abort();
    v18 = v16;
    if (v17 >= 0x17)
    {
      v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v17 | 7) != 0x17)
        v20 = v17 | 7;
      v21 = v20 + 1;
      p_b = (std::string *)operator new(v20 + 1);
      __b.__r_.__value_.__l.__size_ = v15 - 1;
      __b.__r_.__value_.__r.__words[2] = v21 | 0x8000000000000000;
      __b.__r_.__value_.__r.__words[0] = (std::string::size_type)p_b;
    }
    else
    {
      *((_BYTE *)&__b.__r_.__value_.__s + 23) = v15 - 1;
      p_b = &__b;
      if (v15 == 1)
      {
        LODWORD(v15) = 1;
        goto LABEL_25;
      }
    }
  }
  else
  {
    v18 = __exp10((double)-(uint64_t)v14);
    v17 = 3;
    *((_BYTE *)&__b.__r_.__value_.__s + 23) = 3;
    p_b = &__b;
    LODWORD(v15) = 4;
  }
  memset(p_b, 32, v17);
LABEL_25:
  p_b->__r_.__value_.__s.__data_[v17] = 0;
  v22 = std::string::append(&__b, "0 ");
  v23 = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v104.__r_.__value_.__l.__data_ = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v104.__r_.__value_.__r.__words[2] = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (v14 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_149;
  if (v14 >= 0x17)
  {
    v25 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v25 = v14 | 7;
    v26 = v25 + 1;
    v24 = operator new(v25 + 1);
    v97 = v14;
    v98 = v26 | 0x8000000000000000;
    v96 = v24;
    goto LABEL_32;
  }
  HIBYTE(v98) = v14;
  v24 = &v96;
  if (v14)
LABEL_32:
    memset(v24, 32, v14);
  *((_BYTE *)v24 + v14) = 0;
  if (v98 >= 0)
    v27 = (const std::string::value_type *)&v96;
  else
    v27 = (const std::string::value_type *)v96;
  if (v98 >= 0)
    v28 = HIBYTE(v98);
  else
    v28 = v97;
  v29 = std::string::append(&v104, v27, v28);
  v30 = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v101 = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v98) < 0)
  {
    operator delete(v96);
    if ((SHIBYTE(v104.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_41;
LABEL_146:
    operator delete(v104.__r_.__value_.__l.__data_);
    goto LABEL_41;
  }
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_146;
LABEL_41:
  v87 = v12;
  if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__b.__r_.__value_.__l.__data_);
  *(uint64_t *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 24) = 0;
  v104.__r_.__value_.__s.__data_[0] = 91;
  sub_20AB89270(a2, (uint64_t)&v104, 1);
  v31 = 0;
  v91 = a2 + 1;
  v92 = (int)v15 + (int)v14 + 1;
  v89 = (int)v14;
  v90 = (int)v14 - 3;
  while (1)
  {
    v32 = *(double *)((char *)&v102 + v31);
    v33 = *a2;
    v34 = (char *)a2 + *(_QWORD *)(*a2 - 24);
    if ((v34[9] & 1) != 0)
      break;
    if (fabs(v32) < v18)
    {
      v35 = (char *)HIBYTE(v101);
      v36 = (char *)__p[1];
      if (v101 >= 0)
        v37 = __p;
      else
        v37 = (void **)__p[0];
      MEMORY[0x20BD2CE34](&__b, a2);
      if (__b.__r_.__value_.__s.__data_[0])
      {
        if ((char)v35 >= 0)
          v38 = v35;
        else
          v38 = v36;
        v39 = (char *)a2 + *(_QWORD *)(*a2 - 24);
        v40 = *((_QWORD *)v39 + 5);
        v41 = &v38[(_QWORD)v37];
        if ((*((_DWORD *)v39 + 2) & 0xB0) == 0x20)
          v42 = (void **)&v38[(_QWORD)v37];
        else
          v42 = v37;
        v43 = *((_DWORD *)v39 + 36);
        if (v43 == -1)
        {
          v51 = v42;
          std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
          v52 = std::locale::use_facet((const std::locale *)&v104, MEMORY[0x24BEDB350]);
          v43 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v52->__vftable[2].~facet_0)(v52, 32);
          std::locale::~locale((std::locale *)&v104);
          v42 = v51;
          *((_DWORD *)v39 + 36) = v43;
          if (!v40)
            goto LABEL_108;
        }
        else if (!v40)
        {
          goto LABEL_108;
        }
        v53 = *((_QWORD *)v39 + 3);
        v54 = v53 <= (uint64_t)v38;
        v55 = v53 - (_QWORD)v38;
        if (v54)
          v56 = 0;
        else
          v56 = v55;
        v57 = (char *)v42 - (char *)v37;
        if ((char *)v42 - (char *)v37 >= 1)
        {
          v58 = v42;
          v59 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v40 + 96))(v40, v37, v57);
          v42 = v58;
          if (v59 != v57)
            goto LABEL_108;
        }
        goto LABEL_92;
      }
      goto LABEL_109;
    }
    *((_QWORD *)v34 + 3) = v92;
    *(_DWORD *)((char *)v91 + *(_QWORD *)(v33 - 24)) = *(_DWORD *)((_BYTE *)v91 + *(_QWORD *)(v33 - 24)) & 0xFFFFFEFB | 4;
    *(_DWORD *)((char *)v91 + *(_QWORD *)(v33 - 24)) |= 0x400u;
    v44 = *(_QWORD *)(v33 - 24);
    v45 = a2 + 2;
    v46 = v89;
LABEL_64:
    *(_QWORD *)((char *)v45 + v44) = v46;
    std::ostream::operator<<();
    if (v31 == 16)
      goto LABEL_140;
LABEL_110:
    LOBYTE(v96) = 44;
    MEMORY[0x20BD2CE34](&__b, a2);
    if (__b.__r_.__value_.__s.__data_[0])
    {
      v72 = (char *)a2 + *(_QWORD *)(*a2 - 24);
      v73 = *((_QWORD *)v72 + 5);
      if ((*((_DWORD *)v72 + 2) & 0xB0) == 0x20)
        v74 = (void **)((char *)&v96 + 1);
      else
        v74 = &v96;
      v75 = *((_DWORD *)v72 + 36);
      if (v75 == -1)
      {
        std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
        v76 = std::locale::use_facet((const std::locale *)&v104, MEMORY[0x24BEDB350]);
        v75 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v76->__vftable[2].~facet_0)(v76, 32);
        std::locale::~locale((std::locale *)&v104);
        *((_DWORD *)v72 + 36) = v75;
        if (!v73)
          goto LABEL_44;
      }
      else if (!v73)
      {
        goto LABEL_44;
      }
      v77 = *((_QWORD *)v72 + 3);
      v54 = v77 <= 1;
      v78 = v77 - 1;
      if (v54)
        v79 = 0;
      else
        v79 = v78;
      if ((char *)v74 - (char *)&v96 >= 1
        && (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v73 + 96))(v73, &v96, (char *)v74 - (char *)&v96) != (char *)v74 - (char *)&v96)
      {
        goto LABEL_44;
      }
      if ((uint64_t)v79 >= 1)
      {
        if (v79 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_149;
        if (v79 >= 0x17)
        {
          v81 = (v79 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v79 | 7) != 0x17)
            v81 = v79 | 7;
          v82 = v81 + 1;
          v80 = operator new(v81 + 1);
          v104.__r_.__value_.__l.__size_ = v79;
          v104.__r_.__value_.__r.__words[2] = v82 | 0x8000000000000000;
          v104.__r_.__value_.__r.__words[0] = (std::string::size_type)v80;
        }
        else
        {
          *((_BYTE *)&v104.__r_.__value_.__s + 23) = v79;
          v80 = &v104;
        }
        memset(v80, v75, v79);
        *((_BYTE *)v80 + v79) = 0;
        if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v83 = &v104;
        else
          v83 = (std::string *)v104.__r_.__value_.__r.__words[0];
        v84 = (*(uint64_t (**)(uint64_t, std::string *, std::string::size_type))(*(_QWORD *)v73 + 96))(v73, v83, v79);
        v85 = v84;
        if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v104.__r_.__value_.__l.__data_);
          if (v85 != v79)
            goto LABEL_44;
        }
        else if (v84 != v79)
        {
          goto LABEL_44;
        }
      }
      if ((char *)&v96 + 1 - (char *)v74 >= 1
        && (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v73 + 96))(v73, v74, (char *)&v96 + 1 - (char *)v74) != (char *)&v96 + 1 - (char *)v74)
      {
LABEL_44:
        std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 5);
        goto LABEL_45;
      }
      *((_QWORD *)v72 + 3) = 0;
    }
LABEL_45:
    MEMORY[0x20BD2CE40](&__b);
    v31 += 8;
  }
  if (v32 != 0.0)
  {
    *((_QWORD *)v34 + 3) = v92;
    *(_DWORD *)((char *)v91 + *(_QWORD *)(v33 - 24)) |= 0x400u;
    v44 = *(_QWORD *)(v33 - 24);
    v45 = a2 + 2;
    v46 = v90;
    goto LABEL_64;
  }
  v47 = (char *)HIBYTE(v101);
  v48 = (char *)__p[1];
  if (v101 >= 0)
    v49 = __p;
  else
    v49 = (void **)__p[0];
  MEMORY[0x20BD2CE34](&__b, a2);
  if (__b.__r_.__value_.__s.__data_[0])
  {
    if ((char)v47 >= 0)
      v50 = v47;
    else
      v50 = v48;
    v39 = (char *)a2 + *(_QWORD *)(*a2 - 24);
    v40 = *((_QWORD *)v39 + 5);
    v41 = &v50[(_QWORD)v49];
    if ((*((_DWORD *)v39 + 2) & 0xB0) == 0x20)
      v42 = (void **)&v50[(_QWORD)v49];
    else
      v42 = v49;
    v43 = *((_DWORD *)v39 + 36);
    if (v43 != -1)
    {
      if (!v40)
        goto LABEL_108;
LABEL_87:
      v62 = *((_QWORD *)v39 + 3);
      v54 = v62 <= (uint64_t)v50;
      v63 = v62 - (_QWORD)v50;
      if (v54)
        v56 = 0;
      else
        v56 = v63;
      v64 = (char *)v42 - (char *)v49;
      if ((char *)v42 - (char *)v49 >= 1)
      {
        v65 = v42;
        v66 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v40 + 96))(v40, v49, v64);
        v42 = v65;
        if (v66 != v64)
          goto LABEL_108;
      }
LABEL_92:
      if ((uint64_t)v56 < 1)
        goto LABEL_106;
      if (v56 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_149;
      v88 = v42;
      if (v56 >= 0x17)
      {
        v68 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v56 | 7) != 0x17)
          v68 = v56 | 7;
        v69 = v68 + 1;
        v67 = operator new(v68 + 1);
        v104.__r_.__value_.__l.__size_ = v56;
        v104.__r_.__value_.__r.__words[2] = v69 | 0x8000000000000000;
        v104.__r_.__value_.__r.__words[0] = (std::string::size_type)v67;
      }
      else
      {
        *((_BYTE *)&v104.__r_.__value_.__s + 23) = v56;
        v67 = &v104;
      }
      memset(v67, v43, v56);
      *((_BYTE *)v67 + v56) = 0;
      if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v70 = &v104;
      else
        v70 = (std::string *)v104.__r_.__value_.__r.__words[0];
      v71 = (*(uint64_t (**)(uint64_t, std::string *, std::string::size_type))(*(_QWORD *)v40 + 96))(v40, v70, v56);
      if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v104.__r_.__value_.__l.__data_);
      v42 = v88;
      if (v71 == v56)
      {
LABEL_106:
        if (v41 - (char *)v42 < 1
          || (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 96))(v40) == v41 - (char *)v42)
        {
          *((_QWORD *)v39 + 3) = 0;
          goto LABEL_109;
        }
      }
      goto LABEL_108;
    }
    v60 = v42;
    std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
    v61 = std::locale::use_facet((const std::locale *)&v104, MEMORY[0x24BEDB350]);
    v43 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v61->__vftable[2].~facet_0)(v61, 32);
    std::locale::~locale((std::locale *)&v104);
    v42 = v60;
    *((_DWORD *)v39 + 36) = v43;
    if (v40)
      goto LABEL_87;
LABEL_108:
    std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 5);
  }
LABEL_109:
  MEMORY[0x20BD2CE40](&__b);
  if (v31 != 16)
    goto LABEL_110;
LABEL_140:
  sub_20AB89270(a2, (uint64_t)"   ]", 4);
  *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 8) = v87;
  if (SHIBYTE(v101) < 0)
    operator delete(__p[0]);
  sub_20AB89270(a2, (uint64_t)"\n", 1);
  if (SHIBYTE(v93[2]) < 0)
  {
    operator delete(v93[0]);
    if (((char)v95 & 0x80000000) == 0)
      return a2;
LABEL_148:
    operator delete(__dst[0]);
    return a2;
  }
  if ((char)v95 < 0)
    goto LABEL_148;
  return a2;
}

uint64_t *sub_20ABC2C00(uint64_t *a1, __n128 a2)
{
  char *v3;
  int v4;
  int64_t v5;
  size_t v6;
  size_t v7;
  double v8;
  size_t v9;
  double v10;
  std::string *p_b;
  uint64_t v12;
  uint64_t v13;
  std::string *v14;
  std::string::size_type v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  std::string *v21;
  std::string::size_type v22;
  char v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  void **v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  void **v35;
  int v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  void **v42;
  char *v43;
  void **v44;
  const std::locale::facet *v45;
  uint64_t v46;
  BOOL v47;
  std::string::size_type v48;
  std::string::size_type v49;
  int64_t v50;
  void **v51;
  uint64_t v52;
  void **v53;
  const std::locale::facet *v54;
  uint64_t v55;
  std::string::size_type v56;
  int64_t v57;
  void **v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  std::string *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  void **v67;
  int v68;
  const std::locale::facet *v69;
  uint64_t v70;
  std::string::size_type v71;
  std::string::size_type v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  std::string *v76;
  uint64_t v77;
  uint64_t v78;
  int v80;
  void **v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  void *v86;
  std::string::size_type v87;
  int64_t v88;
  std::string __b;
  void *__p[2];
  uint64_t v91;
  __n128 v92;
  std::string v93;

  v92 = a2;
  v3 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v4 = *((_DWORD *)v3 + 2);
  v6 = *((_QWORD *)v3 + 2);
  v5 = *((_QWORD *)v3 + 3);
  if (v5)
  {
    if (v5 <= (uint64_t)(v6 + 2))
      v5 = v6 + 2;
    v7 = v5 + ~v6;
    v8 = __exp10((double)-(uint64_t)v6);
    v9 = v7 - 1;
    if (v7 - 1 > 0x7FFFFFFFFFFFFFF7)
LABEL_133:
      abort();
    v10 = v8;
    if (v9 >= 0x17)
    {
      v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17)
        v12 = v9 | 7;
      v13 = v12 + 1;
      p_b = (std::string *)operator new(v12 + 1);
      __b.__r_.__value_.__l.__size_ = v7 - 1;
      __b.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
      __b.__r_.__value_.__r.__words[0] = (std::string::size_type)p_b;
    }
    else
    {
      *((_BYTE *)&__b.__r_.__value_.__s + 23) = v7 - 1;
      p_b = &__b;
      if (v7 == 1)
      {
        LODWORD(v7) = 1;
        goto LABEL_13;
      }
    }
  }
  else
  {
    v10 = __exp10((double)-(uint64_t)v6);
    v9 = 3;
    *((_BYTE *)&__b.__r_.__value_.__s + 23) = 3;
    p_b = &__b;
    LODWORD(v7) = 4;
  }
  memset(p_b, 32, v9);
LABEL_13:
  p_b->__r_.__value_.__s.__data_[v9] = 0;
  v14 = std::string::append(&__b, "0 ");
  v15 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v93.__r_.__value_.__l.__data_ = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v93.__r_.__value_.__r.__words[2] = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_133;
  if (v6 >= 0x17)
  {
    v17 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v17 = v6 | 7;
    v18 = v17 + 1;
    v16 = operator new(v17 + 1);
    v87 = v6;
    v88 = v18 | 0x8000000000000000;
    v86 = v16;
    goto LABEL_20;
  }
  HIBYTE(v88) = v6;
  v16 = &v86;
  if (v6)
LABEL_20:
    memset(v16, 32, v6);
  *((_BYTE *)v16 + v6) = 0;
  if (v88 >= 0)
    v19 = (const std::string::value_type *)&v86;
  else
    v19 = (const std::string::value_type *)v86;
  if (v88 >= 0)
    v20 = HIBYTE(v88);
  else
    v20 = v87;
  v21 = std::string::append(&v93, v19, v20);
  v22 = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v91 = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v88) < 0)
  {
    operator delete(v86);
    if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_29;
LABEL_132:
    operator delete(v93.__r_.__value_.__l.__data_);
    goto LABEL_29;
  }
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_132;
LABEL_29:
  v80 = v4;
  if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__b.__r_.__value_.__l.__data_);
  *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = 0;
  v93.__r_.__value_.__s.__data_[0] = 91;
  sub_20AB89270(a1, (uint64_t)&v93, 1);
  v23 = 0;
  v24 = 0;
  v84 = a1 + 1;
  v85 = (int)v7 + (int)v6 + 1;
  v82 = (int)v6;
  v83 = (int)v6 - 3;
  while (1)
  {
    v25 = v92.n128_f64[v24];
    v26 = *a1;
    v27 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    if ((v27[9] & 1) != 0)
      break;
    if (fabs(v25) < v10)
    {
      v28 = (char *)HIBYTE(v91);
      v29 = (char *)__p[1];
      if (v91 >= 0)
        v30 = __p;
      else
        v30 = (void **)__p[0];
      MEMORY[0x20BD2CE34](&__b, a1);
      if (__b.__r_.__value_.__s.__data_[0])
      {
        if ((char)v28 >= 0)
          v31 = v28;
        else
          v31 = v29;
        v32 = (char *)a1 + *(_QWORD *)(*a1 - 24);
        v33 = *((_QWORD *)v32 + 5);
        v34 = &v31[(_QWORD)v30];
        if ((*((_DWORD *)v32 + 2) & 0xB0) == 0x20)
          v35 = (void **)&v31[(_QWORD)v30];
        else
          v35 = v30;
        v36 = *((_DWORD *)v32 + 36);
        if (v36 == -1)
        {
          v44 = v35;
          std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
          v45 = std::locale::use_facet((const std::locale *)&v93, MEMORY[0x24BEDB350]);
          v36 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v45->__vftable[2].~facet_0)(v45, 32);
          std::locale::~locale((std::locale *)&v93);
          v35 = v44;
          *((_DWORD *)v32 + 36) = v36;
          if (!v33)
            goto LABEL_96;
        }
        else if (!v33)
        {
          goto LABEL_96;
        }
        v46 = *((_QWORD *)v32 + 3);
        v47 = v46 <= (uint64_t)v31;
        v48 = v46 - (_QWORD)v31;
        if (v47)
          v49 = 0;
        else
          v49 = v48;
        v50 = (char *)v35 - (char *)v30;
        if ((char *)v35 - (char *)v30 >= 1)
        {
          v51 = v35;
          v52 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v33 + 96))(v33, v30, v50);
          v35 = v51;
          if (v52 != v50)
            goto LABEL_96;
        }
        goto LABEL_80;
      }
      goto LABEL_97;
    }
    *((_QWORD *)v27 + 3) = v85;
    *(_DWORD *)((char *)v84 + *(_QWORD *)(v26 - 24)) = *(_DWORD *)((_BYTE *)v84 + *(_QWORD *)(v26 - 24)) & 0xFFFFFEFB | 4;
    *(_DWORD *)((char *)v84 + *(_QWORD *)(v26 - 24)) |= 0x400u;
    v37 = *(_QWORD *)(v26 - 24);
    v38 = a1 + 2;
    v39 = v82;
LABEL_52:
    *(_QWORD *)((char *)v38 + v37) = v39;
    std::ostream::operator<<();
    if ((v23 & 1) != 0)
      goto LABEL_128;
LABEL_98:
    LOBYTE(v86) = 44;
    MEMORY[0x20BD2CE34](&__b, a1);
    if (__b.__r_.__value_.__s.__data_[0])
    {
      v65 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v66 = *((_QWORD *)v65 + 5);
      if ((*((_DWORD *)v65 + 2) & 0xB0) == 0x20)
        v67 = (void **)((char *)&v86 + 1);
      else
        v67 = &v86;
      v68 = *((_DWORD *)v65 + 36);
      if (v68 == -1)
      {
        std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
        v69 = std::locale::use_facet((const std::locale *)&v93, MEMORY[0x24BEDB350]);
        v68 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v69->__vftable[2].~facet_0)(v69, 32);
        std::locale::~locale((std::locale *)&v93);
        *((_DWORD *)v65 + 36) = v68;
        if (!v66)
          goto LABEL_32;
      }
      else if (!v66)
      {
        goto LABEL_32;
      }
      v70 = *((_QWORD *)v65 + 3);
      v47 = v70 <= 1;
      v71 = v70 - 1;
      if (v47)
        v72 = 0;
      else
        v72 = v71;
      if ((char *)v67 - (char *)&v86 >= 1
        && (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v66 + 96))(v66, &v86, (char *)v67 - (char *)&v86) != (char *)v67 - (char *)&v86)
      {
        goto LABEL_32;
      }
      if ((uint64_t)v72 >= 1)
      {
        if (v72 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_133;
        if (v72 >= 0x17)
        {
          v74 = (v72 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v72 | 7) != 0x17)
            v74 = v72 | 7;
          v75 = v74 + 1;
          v73 = operator new(v74 + 1);
          v93.__r_.__value_.__l.__size_ = v72;
          v93.__r_.__value_.__r.__words[2] = v75 | 0x8000000000000000;
          v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v73;
        }
        else
        {
          *((_BYTE *)&v93.__r_.__value_.__s + 23) = v72;
          v73 = &v93;
        }
        memset(v73, v68, v72);
        *((_BYTE *)v73 + v72) = 0;
        if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v76 = &v93;
        else
          v76 = (std::string *)v93.__r_.__value_.__r.__words[0];
        v77 = (*(uint64_t (**)(uint64_t, std::string *, std::string::size_type))(*(_QWORD *)v66 + 96))(v66, v76, v72);
        v78 = v77;
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v93.__r_.__value_.__l.__data_);
          if (v78 != v72)
            goto LABEL_32;
        }
        else if (v77 != v72)
        {
          goto LABEL_32;
        }
      }
      if ((char *)&v86 + 1 - (char *)v67 >= 1
        && (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v66 + 96))(v66, v67, (char *)&v86 + 1 - (char *)v67) != (char *)&v86 + 1 - (char *)v67)
      {
LABEL_32:
        std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
        goto LABEL_33;
      }
      *((_QWORD *)v65 + 3) = 0;
    }
LABEL_33:
    MEMORY[0x20BD2CE40](&__b);
    v23 = 1;
    v24 = 1;
  }
  if (v25 != 0.0)
  {
    *((_QWORD *)v27 + 3) = v85;
    *(_DWORD *)((char *)v84 + *(_QWORD *)(v26 - 24)) |= 0x400u;
    v37 = *(_QWORD *)(v26 - 24);
    v38 = a1 + 2;
    v39 = v83;
    goto LABEL_52;
  }
  v40 = (char *)HIBYTE(v91);
  v41 = (char *)__p[1];
  if (v91 >= 0)
    v42 = __p;
  else
    v42 = (void **)__p[0];
  MEMORY[0x20BD2CE34](&__b, a1);
  if (__b.__r_.__value_.__s.__data_[0])
  {
    if ((char)v40 >= 0)
      v43 = v40;
    else
      v43 = v41;
    v32 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v33 = *((_QWORD *)v32 + 5);
    v34 = &v43[(_QWORD)v42];
    if ((*((_DWORD *)v32 + 2) & 0xB0) == 0x20)
      v35 = (void **)&v43[(_QWORD)v42];
    else
      v35 = v42;
    v36 = *((_DWORD *)v32 + 36);
    if (v36 != -1)
    {
      if (!v33)
        goto LABEL_96;
LABEL_75:
      v55 = *((_QWORD *)v32 + 3);
      v47 = v55 <= (uint64_t)v43;
      v56 = v55 - (_QWORD)v43;
      if (v47)
        v49 = 0;
      else
        v49 = v56;
      v57 = (char *)v35 - (char *)v42;
      if ((char *)v35 - (char *)v42 >= 1)
      {
        v58 = v35;
        v59 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v33 + 96))(v33, v42, v57);
        v35 = v58;
        if (v59 != v57)
          goto LABEL_96;
      }
LABEL_80:
      if ((uint64_t)v49 < 1)
        goto LABEL_94;
      if (v49 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_133;
      v81 = v35;
      if (v49 >= 0x17)
      {
        v61 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v49 | 7) != 0x17)
          v61 = v49 | 7;
        v62 = v61 + 1;
        v60 = operator new(v61 + 1);
        v93.__r_.__value_.__l.__size_ = v49;
        v93.__r_.__value_.__r.__words[2] = v62 | 0x8000000000000000;
        v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v60;
      }
      else
      {
        *((_BYTE *)&v93.__r_.__value_.__s + 23) = v49;
        v60 = &v93;
      }
      memset(v60, v36, v49);
      *((_BYTE *)v60 + v49) = 0;
      if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v63 = &v93;
      else
        v63 = (std::string *)v93.__r_.__value_.__r.__words[0];
      v64 = (*(uint64_t (**)(uint64_t, std::string *, std::string::size_type))(*(_QWORD *)v33 + 96))(v33, v63, v49);
      if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v93.__r_.__value_.__l.__data_);
      v35 = v81;
      if (v64 == v49)
      {
LABEL_94:
        if (v34 - (char *)v35 < 1
          || (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 96))(v33) == v34 - (char *)v35)
        {
          *((_QWORD *)v32 + 3) = 0;
          goto LABEL_97;
        }
      }
      goto LABEL_96;
    }
    v53 = v35;
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v54 = std::locale::use_facet((const std::locale *)&v93, MEMORY[0x24BEDB350]);
    v36 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v54->__vftable[2].~facet_0)(v54, 32);
    std::locale::~locale((std::locale *)&v93);
    v35 = v53;
    *((_DWORD *)v32 + 36) = v36;
    if (v33)
      goto LABEL_75;
LABEL_96:
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
LABEL_97:
  MEMORY[0x20BD2CE40](&__b);
  if ((v23 & 1) == 0)
    goto LABEL_98;
LABEL_128:
  sub_20AB89270(a1, (uint64_t)"   ]", 4);
  *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8) = v80;
  if (SHIBYTE(v91) < 0)
    operator delete(__p[0]);
  return a1;
}

uint64_t *sub_20ABC3490(uint64_t *a1, __n128 a2, double a3)
{
  char *v4;
  int v5;
  int64_t v6;
  size_t v7;
  size_t v8;
  double v9;
  size_t v10;
  double v11;
  std::string *p_b;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  std::string::size_type v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  std::string *v22;
  std::string::size_type v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  void **v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  void **v35;
  int v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  void **v42;
  char *v43;
  void **v44;
  const std::locale::facet *v45;
  uint64_t v46;
  BOOL v47;
  std::string::size_type v48;
  std::string::size_type v49;
  int64_t v50;
  void **v51;
  uint64_t v52;
  void **v53;
  const std::locale::facet *v54;
  uint64_t v55;
  std::string::size_type v56;
  int64_t v57;
  void **v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  std::string *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  void **v67;
  int v68;
  const std::locale::facet *v69;
  uint64_t v70;
  std::string::size_type v71;
  std::string::size_type v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  std::string *v76;
  uint64_t v77;
  uint64_t v78;
  int v80;
  void **v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  void *v86;
  std::string::size_type v87;
  int64_t v88;
  std::string __b;
  void *__p[2];
  uint64_t v91;
  __n128 v92;
  double v93;
  std::string v94;

  v92 = a2;
  v93 = a3;
  v4 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v5 = *((_DWORD *)v4 + 2);
  v7 = *((_QWORD *)v4 + 2);
  v6 = *((_QWORD *)v4 + 3);
  if (v6)
  {
    if (v6 <= (uint64_t)(v7 + 2))
      v6 = v7 + 2;
    v8 = v6 + ~v7;
    v9 = __exp10((double)-(uint64_t)v7);
    v10 = v8 - 1;
    if (v8 - 1 > 0x7FFFFFFFFFFFFFF7)
LABEL_133:
      abort();
    v11 = v9;
    if (v10 >= 0x17)
    {
      v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17)
        v13 = v10 | 7;
      v14 = v13 + 1;
      p_b = (std::string *)operator new(v13 + 1);
      __b.__r_.__value_.__l.__size_ = v8 - 1;
      __b.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
      __b.__r_.__value_.__r.__words[0] = (std::string::size_type)p_b;
    }
    else
    {
      *((_BYTE *)&__b.__r_.__value_.__s + 23) = v8 - 1;
      p_b = &__b;
      if (v8 == 1)
      {
        LODWORD(v8) = 1;
        goto LABEL_13;
      }
    }
  }
  else
  {
    v11 = __exp10((double)-(uint64_t)v7);
    v10 = 3;
    *((_BYTE *)&__b.__r_.__value_.__s + 23) = 3;
    p_b = &__b;
    LODWORD(v8) = 4;
  }
  memset(p_b, 32, v10);
LABEL_13:
  p_b->__r_.__value_.__s.__data_[v10] = 0;
  v15 = std::string::append(&__b, "0 ");
  v16 = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v94.__r_.__value_.__l.__data_ = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v94.__r_.__value_.__r.__words[2] = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (v7 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_133;
  if (v7 >= 0x17)
  {
    v18 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v18 = v7 | 7;
    v19 = v18 + 1;
    v17 = operator new(v18 + 1);
    v87 = v7;
    v88 = v19 | 0x8000000000000000;
    v86 = v17;
    goto LABEL_20;
  }
  HIBYTE(v88) = v7;
  v17 = &v86;
  if (v7)
LABEL_20:
    memset(v17, 32, v7);
  *((_BYTE *)v17 + v7) = 0;
  if (v88 >= 0)
    v20 = (const std::string::value_type *)&v86;
  else
    v20 = (const std::string::value_type *)v86;
  if (v88 >= 0)
    v21 = HIBYTE(v88);
  else
    v21 = v87;
  v22 = std::string::append(&v94, v20, v21);
  v23 = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v91 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v88) < 0)
  {
    operator delete(v86);
    if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_29;
LABEL_132:
    operator delete(v94.__r_.__value_.__l.__data_);
    goto LABEL_29;
  }
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_132;
LABEL_29:
  v80 = v5;
  if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__b.__r_.__value_.__l.__data_);
  *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = 0;
  v94.__r_.__value_.__s.__data_[0] = 91;
  sub_20AB89270(a1, (uint64_t)&v94, 1);
  v24 = 0;
  v84 = a1 + 1;
  v85 = (int)v8 + (int)v7 + 1;
  v82 = (int)v7;
  v83 = (int)v7 - 3;
  while (1)
  {
    v25 = v92.n128_f64[v24];
    v26 = *a1;
    v27 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    if ((v27[9] & 1) != 0)
      break;
    if (fabs(v25) < v11)
    {
      v28 = (char *)HIBYTE(v91);
      v29 = (char *)__p[1];
      if (v91 >= 0)
        v30 = __p;
      else
        v30 = (void **)__p[0];
      MEMORY[0x20BD2CE34](&__b, a1);
      if (__b.__r_.__value_.__s.__data_[0])
      {
        if ((char)v28 >= 0)
          v31 = v28;
        else
          v31 = v29;
        v32 = (char *)a1 + *(_QWORD *)(*a1 - 24);
        v33 = *((_QWORD *)v32 + 5);
        v34 = &v31[(_QWORD)v30];
        if ((*((_DWORD *)v32 + 2) & 0xB0) == 0x20)
          v35 = (void **)&v31[(_QWORD)v30];
        else
          v35 = v30;
        v36 = *((_DWORD *)v32 + 36);
        if (v36 == -1)
        {
          v44 = v35;
          std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
          v45 = std::locale::use_facet((const std::locale *)&v94, MEMORY[0x24BEDB350]);
          v36 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v45->__vftable[2].~facet_0)(v45, 32);
          std::locale::~locale((std::locale *)&v94);
          v35 = v44;
          *((_DWORD *)v32 + 36) = v36;
          if (!v33)
            goto LABEL_96;
        }
        else if (!v33)
        {
          goto LABEL_96;
        }
        v46 = *((_QWORD *)v32 + 3);
        v47 = v46 <= (uint64_t)v31;
        v48 = v46 - (_QWORD)v31;
        if (v47)
          v49 = 0;
        else
          v49 = v48;
        v50 = (char *)v35 - (char *)v30;
        if ((char *)v35 - (char *)v30 >= 1)
        {
          v51 = v35;
          v52 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v33 + 96))(v33, v30, v50);
          v35 = v51;
          if (v52 != v50)
            goto LABEL_96;
        }
        goto LABEL_80;
      }
      goto LABEL_97;
    }
    *((_QWORD *)v27 + 3) = v85;
    *(_DWORD *)((char *)v84 + *(_QWORD *)(v26 - 24)) = *(_DWORD *)((_BYTE *)v84 + *(_QWORD *)(v26 - 24)) & 0xFFFFFEFB | 4;
    *(_DWORD *)((char *)v84 + *(_QWORD *)(v26 - 24)) |= 0x400u;
    v37 = *(_QWORD *)(v26 - 24);
    v38 = a1 + 2;
    v39 = v82;
LABEL_52:
    *(_QWORD *)((char *)v38 + v37) = v39;
    std::ostream::operator<<();
    if (v24 == 2)
      goto LABEL_128;
LABEL_98:
    LOBYTE(v86) = 44;
    MEMORY[0x20BD2CE34](&__b, a1);
    if (__b.__r_.__value_.__s.__data_[0])
    {
      v65 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v66 = *((_QWORD *)v65 + 5);
      if ((*((_DWORD *)v65 + 2) & 0xB0) == 0x20)
        v67 = (void **)((char *)&v86 + 1);
      else
        v67 = &v86;
      v68 = *((_DWORD *)v65 + 36);
      if (v68 == -1)
      {
        std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
        v69 = std::locale::use_facet((const std::locale *)&v94, MEMORY[0x24BEDB350]);
        v68 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v69->__vftable[2].~facet_0)(v69, 32);
        std::locale::~locale((std::locale *)&v94);
        *((_DWORD *)v65 + 36) = v68;
        if (!v66)
          goto LABEL_32;
      }
      else if (!v66)
      {
        goto LABEL_32;
      }
      v70 = *((_QWORD *)v65 + 3);
      v47 = v70 <= 1;
      v71 = v70 - 1;
      if (v47)
        v72 = 0;
      else
        v72 = v71;
      if ((char *)v67 - (char *)&v86 >= 1
        && (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v66 + 96))(v66, &v86, (char *)v67 - (char *)&v86) != (char *)v67 - (char *)&v86)
      {
        goto LABEL_32;
      }
      if ((uint64_t)v72 >= 1)
      {
        if (v72 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_133;
        if (v72 >= 0x17)
        {
          v74 = (v72 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v72 | 7) != 0x17)
            v74 = v72 | 7;
          v75 = v74 + 1;
          v73 = operator new(v74 + 1);
          v94.__r_.__value_.__l.__size_ = v72;
          v94.__r_.__value_.__r.__words[2] = v75 | 0x8000000000000000;
          v94.__r_.__value_.__r.__words[0] = (std::string::size_type)v73;
        }
        else
        {
          *((_BYTE *)&v94.__r_.__value_.__s + 23) = v72;
          v73 = &v94;
        }
        memset(v73, v68, v72);
        *((_BYTE *)v73 + v72) = 0;
        if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v76 = &v94;
        else
          v76 = (std::string *)v94.__r_.__value_.__r.__words[0];
        v77 = (*(uint64_t (**)(uint64_t, std::string *, std::string::size_type))(*(_QWORD *)v66 + 96))(v66, v76, v72);
        v78 = v77;
        if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v94.__r_.__value_.__l.__data_);
          if (v78 != v72)
            goto LABEL_32;
        }
        else if (v77 != v72)
        {
          goto LABEL_32;
        }
      }
      if ((char *)&v86 + 1 - (char *)v67 >= 1
        && (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v66 + 96))(v66, v67, (char *)&v86 + 1 - (char *)v67) != (char *)&v86 + 1 - (char *)v67)
      {
LABEL_32:
        std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
        goto LABEL_33;
      }
      *((_QWORD *)v65 + 3) = 0;
    }
LABEL_33:
    MEMORY[0x20BD2CE40](&__b);
    ++v24;
  }
  if (v25 != 0.0)
  {
    *((_QWORD *)v27 + 3) = v85;
    *(_DWORD *)((char *)v84 + *(_QWORD *)(v26 - 24)) |= 0x400u;
    v37 = *(_QWORD *)(v26 - 24);
    v38 = a1 + 2;
    v39 = v83;
    goto LABEL_52;
  }
  v40 = (char *)HIBYTE(v91);
  v41 = (char *)__p[1];
  if (v91 >= 0)
    v42 = __p;
  else
    v42 = (void **)__p[0];
  MEMORY[0x20BD2CE34](&__b, a1);
  if (__b.__r_.__value_.__s.__data_[0])
  {
    if ((char)v40 >= 0)
      v43 = v40;
    else
      v43 = v41;
    v32 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v33 = *((_QWORD *)v32 + 5);
    v34 = &v43[(_QWORD)v42];
    if ((*((_DWORD *)v32 + 2) & 0xB0) == 0x20)
      v35 = (void **)&v43[(_QWORD)v42];
    else
      v35 = v42;
    v36 = *((_DWORD *)v32 + 36);
    if (v36 != -1)
    {
      if (!v33)
        goto LABEL_96;
LABEL_75:
      v55 = *((_QWORD *)v32 + 3);
      v47 = v55 <= (uint64_t)v43;
      v56 = v55 - (_QWORD)v43;
      if (v47)
        v49 = 0;
      else
        v49 = v56;
      v57 = (char *)v35 - (char *)v42;
      if ((char *)v35 - (char *)v42 >= 1)
      {
        v58 = v35;
        v59 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v33 + 96))(v33, v42, v57);
        v35 = v58;
        if (v59 != v57)
          goto LABEL_96;
      }
LABEL_80:
      if ((uint64_t)v49 < 1)
        goto LABEL_94;
      if (v49 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_133;
      v81 = v35;
      if (v49 >= 0x17)
      {
        v61 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v49 | 7) != 0x17)
          v61 = v49 | 7;
        v62 = v61 + 1;
        v60 = operator new(v61 + 1);
        v94.__r_.__value_.__l.__size_ = v49;
        v94.__r_.__value_.__r.__words[2] = v62 | 0x8000000000000000;
        v94.__r_.__value_.__r.__words[0] = (std::string::size_type)v60;
      }
      else
      {
        *((_BYTE *)&v94.__r_.__value_.__s + 23) = v49;
        v60 = &v94;
      }
      memset(v60, v36, v49);
      *((_BYTE *)v60 + v49) = 0;
      if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v63 = &v94;
      else
        v63 = (std::string *)v94.__r_.__value_.__r.__words[0];
      v64 = (*(uint64_t (**)(uint64_t, std::string *, std::string::size_type))(*(_QWORD *)v33 + 96))(v33, v63, v49);
      if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v94.__r_.__value_.__l.__data_);
      v35 = v81;
      if (v64 == v49)
      {
LABEL_94:
        if (v34 - (char *)v35 < 1
          || (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 96))(v33) == v34 - (char *)v35)
        {
          *((_QWORD *)v32 + 3) = 0;
          goto LABEL_97;
        }
      }
      goto LABEL_96;
    }
    v53 = v35;
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v54 = std::locale::use_facet((const std::locale *)&v94, MEMORY[0x24BEDB350]);
    v36 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v54->__vftable[2].~facet_0)(v54, 32);
    std::locale::~locale((std::locale *)&v94);
    v35 = v53;
    *((_DWORD *)v32 + 36) = v36;
    if (v33)
      goto LABEL_75;
LABEL_96:
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
LABEL_97:
  MEMORY[0x20BD2CE40](&__b);
  if (v24 != 2)
    goto LABEL_98;
LABEL_128:
  sub_20AB89270(a1, (uint64_t)"   ]", 4);
  *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8) = v80;
  if (SHIBYTE(v91) < 0)
    operator delete(__p[0]);
  return a1;
}

__n128 sub_20ABC3D24(double *a1, double *a2, uint64_t a3)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double cosval;
  double v12;
  __double2 v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  __int128 v20;
  __n128 result;
  double *v22[2];
  __int128 v23;
  __n128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  double v28[9];

  v5 = *a1;
  v6 = a1[1];
  v7 = a1[2];
  v8 = v5 * v5 + v6 * v6 + v7 * v7;
  if (v8 >= 0.0000002635)
  {
    v12 = sqrt(v8);
    v13 = __sincos_stret(v12);
    cosval = v13.__cosval;
    v10 = v13.__sinval / v12;
    v9 = 1.0 / v8 * (1.0 - v13.__cosval);
  }
  else
  {
    v9 = 0.5 - v8 * (v8 / -720.0 + 0.0416666667);
    v10 = 1.0 - v8 * (0.166666667 - v8 * (v8 / -5040.0 + 0.00833333333));
    cosval = 1.0 - v8 * v9;
  }
  v14 = v6 * (v5 * v9);
  v15 = v7 * (v5 * v9);
  v16 = v7 * (v6 * v9);
  v17 = v5 * v10;
  v18 = v6 * v10;
  v19 = v7 * v10;
  v28[0] = cosval + v5 * v9 * v5;
  v28[1] = v14 + v19;
  v28[2] = v15 - v18;
  v28[3] = v14 - v19;
  v28[4] = cosval + v6 * v9 * v6;
  v28[5] = v16 + v17;
  v28[6] = v18 + v15;
  v28[7] = v16 - v17;
  v28[8] = cosval + v7 * v9 * v7;
  v22[0] = v28;
  v22[1] = a2;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0;
  sub_20AB92ED0((uint64_t)&v23, v22);
  v20 = v26;
  *(_OWORD *)(a3 + 32) = v25;
  *(_OWORD *)(a3 + 48) = v20;
  *(_QWORD *)(a3 + 64) = v27;
  result = v24;
  *(_OWORD *)a3 = v23;
  *(__n128 *)(a3 + 16) = result;
  return result;
}

void sub_20ABC3EB4()
{
  JUMPOUT(0x20BD2D02CLL);
}

uint64_t sub_20ABC3EC8()
{
  return 0;
}

__n128 sub_20ABC3ED0@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __n128 result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24C37F8D0;
  *(_BYTE *)(v4 + 8) = *(_BYTE *)(a1 + 8);
  v5 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v4 + 64) = v5;
  *(_QWORD *)(v4 + 80) = *(_QWORD *)(a1 + 80);
  v6 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v4 + 32) = v6;
  result = *(__n128 *)(a1 + 88);
  *(__n128 *)(v4 + 88) = result;
  *(_QWORD *)(v4 + 104) = *(_QWORD *)(a1 + 104);
  *(_BYTE *)(v4 + 112) = *(_BYTE *)(a1 + 112);
  *a2 = v4;
  return result;
}

uint64_t sub_20ABC3F50(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2;
  *(_BYTE *)(result + 112) = a2;
  return result;
}

__n128 sub_20ABC3F5C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  __n128 result;

  v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 32);
  v3 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 56) = v3;
  *(_BYTE *)a2 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 8) = v2;
  result = *(__n128 *)(a1 + 88);
  *(__n128 *)(a2 + 80) = result;
  *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 104);
  *(_BYTE *)(a2 + 104) = *(_BYTE *)(a1 + 112);
  return result;
}

double sub_20ABC3FA0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double result;
  _QWORD v13[9];
  float64x2_t v14;
  double v15;
  double *v16[2];

  *(_BYTE *)(a2 + 24) = 1;
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 64);
  v5 = *(_QWORD *)(a1 + 72);
  v7 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 80);
  v13[0] = *(_QWORD *)(a1 + 16);
  v13[1] = v6;
  v13[2] = v4;
  v13[3] = v3;
  v13[4] = v8;
  v13[5] = v5;
  v13[6] = v7;
  v13[7] = v9;
  v13[8] = v10;
  v16[0] = (double *)v13;
  v16[1] = (double *)(a1 + 88);
  v15 = 0.0;
  v14 = 0uLL;
  sub_20AB933B0((uint64_t)&v14, v16);
  v11 = v15;
  *(float64x2_t *)a2 = vnegq_f64(v14);
  result = -v11;
  *(double *)(a2 + 16) = -v11;
  return result;
}

double sub_20ABC4034@<D0>(uint64_t a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  double result;
  double *v6[2];
  float64x2_t v7;
  double v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6[0] = (double *)(a1 + 16);
  v6[1] = a2;
  v8 = 0.0;
  v7 = 0uLL;
  sub_20AB933B0((uint64_t)&v7, v6);
  result = v8 + *(double *)(a1 + 104);
  *(float64x2_t *)a3 = vaddq_f64(v7, *(float64x2_t *)(a1 + 88));
  *(double *)(a3 + 16) = result;
  *(_BYTE *)(a3 + 24) = 1;
  return result;
}

double sub_20ABC40D0@<D0>(uint64_t a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  double *v13[2];
  double *v14[2];
  char v15;
  _QWORD v16[9];
  float64x2_t v17;
  double v18;
  float64x2_t v19;
  double v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v15 = 1;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 64);
  v6 = *(_QWORD *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(_QWORD *)(a1 + 80);
  v16[0] = *(_QWORD *)(a1 + 16);
  v16[1] = v7;
  v16[2] = v5;
  v16[3] = v4;
  v16[4] = v9;
  v16[5] = v6;
  v16[6] = v8;
  v16[7] = v10;
  v16[8] = v11;
  v14[0] = (double *)v16;
  v14[1] = a2;
  v13[0] = (double *)v16;
  v13[1] = (double *)(a1 + 88);
  v18 = 0.0;
  v17 = 0uLL;
  sub_20AB933B0((uint64_t)&v17, v14);
  v19 = 0uLL;
  v20 = 0.0;
  sub_20AB933B0((uint64_t)&v19, v13);
  result = v18 - v20;
  *(float64x2_t *)a3 = vsubq_f64(v17, v19);
  *(double *)(a3 + 16) = result;
  *(_BYTE *)(a3 + 24) = 1;
  return result;
}

uint64_t sub_20ABC41BC()
{
  return 0;
}

uint64_t sub_20ABC41C4()
{
  return 1;
}

uint64_t *sub_20ABC41CC(uint64_t a1, uint64_t *a2)
{
  sub_20ABC212C((_BYTE *)(a1 + 8), a2);
  return sub_20ABC2274((__int128 *)(a1 + 88), a2);
}

BOOL sub_20ABC41FC(uint64_t a1, uint64_t a2, double a3)
{
  double v6;
  float64x2_t v7;
  float64x2_t v9[4];
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  uint64_t v17;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2))
    return 0;
  v11 = a2 + 16;
  v12[0] = a1 + 16;
  v12[1] = &v11;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0;
  sub_20ABC0FC4((uint64_t)&v13, (uint64_t)v12);
  v9[1] = v14;
  v9[2] = v15;
  v9[3] = v16;
  v10 = v17;
  v9[0] = v13;
  v13 = 0uLL;
  v14.f64[0] = 0.0;
  sub_20AB929EC(v9, v13.f64);
  if (sqrt(v13.f64[0] * v13.f64[0] + v13.f64[1] * v13.f64[1] + v14.f64[0] * v14.f64[0]) >= a3)
    return 0;
  v6 = *(double *)(a1 + 104) - *(double *)(a2 + 104);
  v7 = vsubq_f64(*(float64x2_t *)(a1 + 88), *(float64x2_t *)(a2 + 88));
  return sqrt(vaddvq_f64(vmulq_f64(v7, v7)) + v6 * v6) < a3;
}

uint64_t sub_20ABC4320(std::string::size_type *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  const std::string::value_type *p_p;
  std::string::size_type data_high;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  __int128 v14;
  unint64_t v15;
  double v16;
  double v17;
  const std::string::value_type *isa;
  std::string::size_type info;
  const std::string::value_type *v20;
  std::string::size_type v21;
  int v22;
  char v23;
  uint64_t *v24;
  int v25;
  double v26;
  char v27;
  const std::string::value_type *v28;
  std::string::size_type v29;
  int v30;
  int v31;
  char *v33;
  int v34;
  char v35;
  double v36;
  double v37;
  char v38;
  uint64_t v39;
  char v40;
  unsigned int v41[5];
  char v42;
  __CFString v43;
  __CFString __p;
  std::string __dst;

  if (*(char *)(a2 + 23) < 0)
    sub_20AB88C14(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
  else
    __dst = *(std::string *)a2;
  cva::adp::PListPath::convertToPath(a3, (uint64_t)&__p);
  if (SHIBYTE(__p.data) >= 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = (const std::string::value_type *)__p.isa;
  if (SHIBYTE(__p.data) >= 0)
    data_high = HIBYTE(__p.data);
  else
    data_high = __p.info;
  std::string::append(&__dst, p_p, data_high);
  if (SHIBYTE(__p.data) < 0)
    operator delete(__p.isa);
  *(_QWORD *)v41 = 0;
  HIBYTE(__p.data) = 10;
  strcpy((char *)&__p, "Resolution");
  v10 = sub_20AB91378(a1, &__dst, (uint64_t)&__p, v41);
  v11 = v10;
  if (SHIBYTE(__p.data) < 0)
  {
    operator delete(__p.isa);
    if (!(_DWORD)v11)
    {
LABEL_14:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_15;
      goto LABEL_24;
    }
  }
  else if (!(_DWORD)v10)
  {
    goto LABEL_14;
  }
  memset(&__p, 0, sizeof(__p));
  HIBYTE(v43.data) = 12;
  strcpy((char *)&v43, "Image Bounds");
  v12 = sub_20ABC7438(a1, &__dst, &v43, &__p);
  v13 = v12;
  if (SHIBYTE(v43.data) < 0)
  {
    operator delete(v43.isa);
    if ((v13 & 1) != 0)
      goto LABEL_20;
  }
  else if ((v12 & 1) != 0)
  {
LABEL_20:
    v14 = *(_OWORD *)&__p.data;
    *(_OWORD *)(a4 + 56) = *(_OWORD *)&__p.isa;
    *(_OWORD *)(a4 + 72) = v14;
    v15 = *(_QWORD *)v41;
    goto LABEL_23;
  }
  v16 = (double)v41[0];
  v17 = (double)v41[1];
  v15 = v41[0] | ((unint64_t)v41[1] << 32);
  *(_QWORD *)(a4 + 56) = 0;
  *(double *)(a4 + 64) = v16;
  *(_QWORD *)(a4 + 72) = 0;
  *(double *)(a4 + 80) = v17;
LABEL_23:
  *(_QWORD *)(a4 + 88) = v15;
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_15:
    if (!(_DWORD)v11)
      return v11;
LABEL_25:
    if (*(char *)(a2 + 23) < 0)
      sub_20AB88C14(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
    else
      __dst = *(std::string *)a2;
    cva::adp::PListPath::convertToPath(a3, (uint64_t)&__p);
    if (SHIBYTE(__p.data) >= 0)
      isa = (const std::string::value_type *)&__p;
    else
      isa = (const std::string::value_type *)__p.isa;
    if (SHIBYTE(__p.data) >= 0)
      info = HIBYTE(__p.data);
    else
      info = __p.info;
    std::string::append(&__dst, isa, info);
    if (SHIBYTE(__p.data) < 0)
      operator delete(__p.isa);
    v42 = 7;
    strcpy((char *)v41, "Pinhole");
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_20AB88C14(&v43, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&v43.isa = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
      v43.data = (char *)__dst.__r_.__value_.__r.__words[2];
    }
    cva::adp::PListPath::convertToPath(v41, (uint64_t)&__p);
    if (SHIBYTE(__p.data) >= 0)
      v20 = (const std::string::value_type *)&__p;
    else
      v20 = (const std::string::value_type *)__p.isa;
    if (SHIBYTE(__p.data) >= 0)
      v21 = HIBYTE(__p.data);
    else
      v21 = __p.info;
    std::string::append((std::string *)&v43, v20, v21);
    if (SHIBYTE(__p.data) < 0)
    {
      operator delete(__p.isa);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_47;
    }
    else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_47;
    }
    operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_47:
    v39 = 0;
    v40 = 1;
    HIBYTE(__p.data) = 12;
    strcpy((char *)&__p, "Focal Length");
    v22 = sub_20ABC78CC(a1, (uint64_t)&v43, &__p, &v39);
    v23 = v40;
    v24 = (uint64_t *)(a4 + 64);
    if (v22)
      v24 = &v39;
    else
      v23 = 1;
    *(_QWORD *)a4 = *v24;
    *(_BYTE *)(a4 + 8) = v23;
    v37 = 0.0;
    v38 = 1;
    HIBYTE(__p.data) = 12;
    strcpy((char *)&__p, "Aspect Ratio");
    v25 = sub_20ABC78CC(a1, (uint64_t)&v43, &__p, &v37);
    v26 = v37;
    v27 = v38;
    if (!v25)
    {
      v26 = 1.0;
      v27 = 1;
    }
    *(double *)(a4 + 16) = v26;
    *(_BYTE *)(a4 + 24) = v27;
    v42 = 15;
    strcpy((char *)v41, "Principal Point");
    if (SHIBYTE(v43.data) < 0)
    {
      sub_20AB88C14(&__dst, v43.isa, v43.info);
    }
    else
    {
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)&v43.isa;
      __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)v43.data;
    }
    cva::adp::PListPath::convertToPath(v41, (uint64_t)&__p);
    if (SHIBYTE(__p.data) >= 0)
      v28 = (const std::string::value_type *)&__p;
    else
      v28 = (const std::string::value_type *)__p.isa;
    if (SHIBYTE(__p.data) >= 0)
      v29 = HIBYTE(__p.data);
    else
      v29 = __p.info;
    std::string::append(&__dst, v28, v29);
    if (SHIBYTE(__p.data) < 0)
      operator delete(__p.isa);
    HIBYTE(__p.data) = 4;
    strcpy((char *)&__p, "Data");
    v30 = sub_20ABC5CC0(a1, &__dst, &__p, (_QWORD *)(a4 + 32));
    v31 = v30;
    if (SHIBYTE(__p.data) < 0)
    {
      operator delete(__p.isa);
      if (!v31)
      {
LABEL_67:
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_68;
        goto LABEL_77;
      }
    }
    else if (!v30)
    {
      goto LABEL_67;
    }
    HIBYTE(__p.data) = 5;
    strcpy((char *)&__p, "Fixed");
    v33 = (char *)(a4 + 48);
    v34 = cva::adp::io::PListSerializer::getItem<BOOL>(a1, &__dst, (uint64_t)&__p, (_BYTE *)(a4 + 48));
    if (SHIBYTE(__p.data) < 0)
      operator delete(__p.isa);
    v35 = *v33 ^ 1;
    if (!v34)
      v35 = 1;
    *v33 = v35;
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_68:
      if ((v31 & 1) != 0)
        goto LABEL_69;
      goto LABEL_78;
    }
LABEL_77:
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((v31 & 1) != 0)
    {
LABEL_69:
      if ((SHIBYTE(v43.data) & 0x80000000) == 0)
        return v11;
LABEL_79:
      operator delete(v43.isa);
      return v11;
    }
LABEL_78:
    v36 = *(double *)(a4 + 80) * 0.5;
    *(double *)(a4 + 32) = *(double *)(a4 + 64) * 0.5;
    *(double *)(a4 + 40) = v36;
    *(_BYTE *)(a4 + 48) = 1;
    if ((SHIBYTE(v43.data) & 0x80000000) == 0)
      return v11;
    goto LABEL_79;
  }
LABEL_24:
  operator delete(__dst.__r_.__value_.__l.__data_);
  if ((_DWORD)v11)
    goto LABEL_25;
  return v11;
}

void sub_20ABC4850()
{
  JUMPOUT(0x20BD2D02CLL);
}

uint64_t sub_20ABC4864()
{
  return 3;
}

uint64_t sub_20ABC486C(uint64_t a1)
{
  return a1 + 88;
}

void *sub_20ABC4874@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __int128 v5;
  void *result;

  v4 = operator new();
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)v4 = &off_24C37FD60;
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v4 + 41) = *(_OWORD *)(a1 + 41);
  *(_OWORD *)(v4 + 64) = *(_OWORD *)(a1 + 64);
  *(_BYTE *)(v4 + 80) = *(_BYTE *)(a1 + 80);
  *(_OWORD *)(v4 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v4 + 88) = *(_OWORD *)(a1 + 88);
  *(_QWORD *)(v4 + 120) = *(_QWORD *)(a1 + 120);
  v5 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(v4 + 128) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(v4 + 144) = v5;
  memcpy((void *)(v4 + 160), (const void *)(a1 + 160), 0x800uLL);
  result = memcpy((void *)(v4 + 2208), (const void *)(a1 + 2208), 0x800uLL);
  *a2 = v4;
  return result;
}

_BYTE *sub_20ABC4938(_BYTE *result, char a2)
{
  result[40] = a2;
  result[56] = a2;
  result[80] = a2;
  return result;
}

BOOL sub_20ABC4948(double *a1, double *a2, double *a3)
{
  double v3;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  unsigned int v13;
  double v14;
  double v15;
  double v17;
  double v18;
  double v19;
  double v20;
  _BOOL4 v21;

  v3 = a2[2];
  if (v3 <= 0.0)
    return 0;
  v6 = a1[18];
  v7 = a1[19];
  v8 = *a2 - v6;
  v9 = a2[1] - v7;
  v10 = atan2(sqrt(v8 * v8 + v9 * v9), a2[2]);
  v11 = a1[16];
  if (v10 >= v11)
    return 0;
  v12 = v10 / v11 * 255.0;
  v13 = v12;
  if (v12 > 0xFE)
  {
    v15 = a1[v13 + 20];
  }
  else
  {
    v14 = a1[v13 + 20];
    v15 = v14 + (v12 - (double)v13) * (a1[v13 + 21] - v14);
  }
  v17 = v15 / v3;
  v18 = a1[4];
  v19 = a1[8] + v18 * a1[6] * (v6 + v8 * v17);
  v20 = a1[9] + v18 * (v7 + v9 * v17);
  *a3 = v19;
  a3[1] = v20;
  v21 = a1[11] <= v19;
  if (a1[12] <= v19)
    v21 = 0;
  if (a1[13] > v20)
    v21 = 0;
  return a1[14] > v20 && v21;
}

uint64_t sub_20ABC4A6C(double *a1, double *a2, double *a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  unsigned int v19;
  double v20;
  double v21;

  v3 = a1[4];
  v4 = a1[6];
  v5 = *a2;
  v6 = a2[1];
  if (v4 < 0.0000000149011612 || v3 < 0.0000000149011612 || a1[11] > v5 || a1[12] <= v5 || a1[13] > v6 || a1[14] <= v6)
    return 0;
  v14 = (v5 - a1[8]) / (v3 * v4);
  v15 = (v6 - a1[9]) / v3;
  v16 = atan(sqrt(v14 * v14 + v15 * v15));
  v17 = a1[17];
  if (v16 >= v17)
    return 0;
  v18 = v16 / v17 * 255.0;
  v19 = v18;
  if (v18 > 0xFE)
  {
    v21 = a1[v19 + 276];
  }
  else
  {
    v20 = a1[v19 + 276];
    v21 = v20 + (v18 - (double)v19) * (a1[v19 + 277] - v20);
  }
  *a3 = v14 * v21;
  a3[1] = v15 * v21;
  return 1;
}

_QWORD *sub_20ABC4B68(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;

  v4 = a1 + 32;
  sub_20ABC4E48((__n128 *)(a1 + 88), a2);
  sub_20ABC4EE8(v4, a2);
  sub_20ABC5014(a1 + 48, a2);
  return sub_20ABC5140((__n128 *)(a1 + 64), a2);
}

BOOL sub_20ABC4BBC(uint64_t a1, uint64_t a2, double a3)
{
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  uint64_t v11;
  double v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  double v17;
  double v18;
  float64x2_t v19;
  float64x2_t v20;
  uint64_t v21;
  double v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  double v27;
  double v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) != 3)
    return 0;
  if (*(double *)(a1 + 32) - *(double *)(a2 + 32) >= a3)
    return 0;
  if (*(double *)(a1 + 48) - *(double *)(a2 + 48) >= a3)
    return 0;
  v6 = vsubq_f64(*(float64x2_t *)(a1 + 64), *(float64x2_t *)(a2 + 64));
  if (sqrt(vaddvq_f64(vmulq_f64(v6, v6))) >= a3)
    return 0;
  if (*(unsigned __int8 *)(a1 + 80) != *(unsigned __int8 *)(a2 + 80))
    return 0;
  v7 = vsubq_f64(*(float64x2_t *)(a1 + 88), *(float64x2_t *)(a2 + 88));
  v8 = vmulq_f64(v7, v7);
  v9 = vsubq_f64(*(float64x2_t *)(a1 + 104), *(float64x2_t *)(a2 + 104));
  v10 = vmulq_f64(v9, v9);
  if (sqrt(vaddq_f64(vaddq_f64(vaddq_f64(v8, (float64x2_t)vdupq_laneq_s64((int64x2_t)v8, 1)), v10), (float64x2_t)vdupq_laneq_s64((int64x2_t)v10, 1)).f64[0]) >= a3)return 0;
  if (*(_DWORD *)(a1 + 120) != *(_DWORD *)(a2 + 120))
    return 0;
  if (*(_DWORD *)(a1 + 124) != *(_DWORD *)(a2 + 124))
    return 0;
  v11 = 0;
  v12 = (*(double *)(a1 + 160) - *(double *)(a2 + 160)) * (*(double *)(a1 + 160) - *(double *)(a2 + 160));
  do
  {
    v13 = vsubq_f64(*(float64x2_t *)(a1 + v11 + 168), *(float64x2_t *)(a2 + v11 + 168));
    v14 = vsubq_f64(*(float64x2_t *)(a1 + v11 + 184), *(float64x2_t *)(a2 + v11 + 184));
    v15 = vmulq_f64(v13, v13);
    v16 = vmulq_f64(v14, v14);
    v12 = v12 + v15.f64[0] + v15.f64[1] + v16.f64[0] + v16.f64[1];
    v11 += 32;
  }
  while (v11 != 2016);
  v17 = *(double *)(a1 + 2184) - *(double *)(a2 + 2184);
  v18 = v12 + v17 * v17;
  v19 = vsubq_f64(*(float64x2_t *)(a1 + 2192), *(float64x2_t *)(a2 + 2192));
  v20 = vmulq_f64(v19, v19);
  if (sqrt(v18 + v20.f64[0] + v20.f64[1]) >= a3)
    return 0;
  v21 = 0;
  v22 = (*(double *)(a1 + 2208) - *(double *)(a2 + 2208)) * (*(double *)(a1 + 2208) - *(double *)(a2 + 2208));
  do
  {
    v23 = vsubq_f64(*(float64x2_t *)(a1 + v21 + 2216), *(float64x2_t *)(a2 + v21 + 2216));
    v24 = vsubq_f64(*(float64x2_t *)(a1 + v21 + 2232), *(float64x2_t *)(a2 + v21 + 2232));
    v25 = vmulq_f64(v23, v23);
    v26 = vmulq_f64(v24, v24);
    v22 = v22 + v25.f64[0] + v25.f64[1] + v26.f64[0] + v26.f64[1];
    v21 += 32;
  }
  while (v21 != 2016);
  v27 = *(double *)(a1 + 4232) - *(double *)(a2 + 4232);
  v28 = v22 + v27 * v27;
  v29 = vsubq_f64(*(float64x2_t *)(a1 + 4240), *(float64x2_t *)(a2 + 4240));
  v30 = vmulq_f64(v29, v29);
  if (sqrt(v28 + v30.f64[0] + v30.f64[1]) >= a3
    || vabdd_f64(*(double *)(a1 + 128), *(double *)(a1 + 128)) >= a3
    || vabdd_f64(*(double *)(a1 + 136), *(double *)(a1 + 136)) >= a3)
  {
    return 0;
  }
  v31 = vsubq_f64(*(float64x2_t *)(a1 + 144), *(float64x2_t *)(a2 + 144));
  return sqrt(vaddvq_f64(vmulq_f64(v31, v31))) < a3;
}

_QWORD *sub_20ABC4E48(__n128 *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  char __p[17];
  char v10;

  v4 = sub_20AB89270(a2, (uint64_t)"[FIXED][", 8);
  v10 = 16;
  strcpy(__p, "Width and Height");
  v5 = sub_20AB89270(v4, (uint64_t)__p, 16);
  v6 = sub_20AB89270(v5, (uint64_t)"] : ", 4);
  v7 = sub_20ABC5268(v6, *a1, a1[1]);
  sub_20AB89270(v7, (uint64_t)"\n", 1);
  if (v10 < 0)
    operator delete(*(void **)__p);
  return a2;
}

_QWORD *sub_20ABC4EE8(uint64_t a1, _QWORD *a2)
{
  const char *v3;
  size_t v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *__p[2];
  char v13;
  void *__dst[2];
  unsigned __int8 v15;

  if (*(_BYTE *)(a1 + 8))
    v3 = "[FREE]";
  else
    v3 = "[FIXED]";
  if (*(_BYTE *)(a1 + 8))
    v4 = 6;
  else
    v4 = 7;
  v15 = v4;
  memcpy(__dst, v3, v4);
  *(_BYTE *)((unint64_t)__dst | v4) = 0;
  if ((v15 & 0x80u) == 0)
    v5 = __dst;
  else
    v5 = (void **)__dst[0];
  if ((v15 & 0x80u) == 0)
    v6 = v15;
  else
    v6 = (uint64_t)__dst[1];
  v7 = sub_20AB89270(a2, (uint64_t)v5, v6);
  v8 = sub_20AB89270(v7, (uint64_t)"[", 1);
  v13 = 12;
  strcpy((char *)__p, "Focal Length");
  v9 = sub_20AB89270(v8, (uint64_t)__p, 12);
  sub_20AB89270(v9, (uint64_t)"] : ", 4);
  v10 = (_QWORD *)std::ostream::operator<<();
  sub_20AB89270(v10, (uint64_t)"\n", 1);
  if (v13 < 0)
  {
    operator delete(__p[0]);
    if (((char)v15 & 0x80000000) == 0)
      return a2;
LABEL_17:
    operator delete(__dst[0]);
    return a2;
  }
  if ((char)v15 < 0)
    goto LABEL_17;
  return a2;
}

_QWORD *sub_20ABC5014(uint64_t a1, _QWORD *a2)
{
  const char *v3;
  size_t v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *__p[2];
  char v13;
  void *__dst[2];
  unsigned __int8 v15;

  if (*(_BYTE *)(a1 + 8))
    v3 = "[FREE]";
  else
    v3 = "[FIXED]";
  if (*(_BYTE *)(a1 + 8))
    v4 = 6;
  else
    v4 = 7;
  v15 = v4;
  memcpy(__dst, v3, v4);
  *(_BYTE *)((unint64_t)__dst | v4) = 0;
  if ((v15 & 0x80u) == 0)
    v5 = __dst;
  else
    v5 = (void **)__dst[0];
  if ((v15 & 0x80u) == 0)
    v6 = v15;
  else
    v6 = (uint64_t)__dst[1];
  v7 = sub_20AB89270(a2, (uint64_t)v5, v6);
  v8 = sub_20AB89270(v7, (uint64_t)"[", 1);
  v13 = 12;
  strcpy((char *)__p, "Aspect Ratio");
  v9 = sub_20AB89270(v8, (uint64_t)__p, 12);
  sub_20AB89270(v9, (uint64_t)"] : ", 4);
  v10 = (_QWORD *)std::ostream::operator<<();
  sub_20AB89270(v10, (uint64_t)"\n", 1);
  if (v13 < 0)
  {
    operator delete(__p[0]);
    if (((char)v15 & 0x80000000) == 0)
      return a2;
LABEL_17:
    operator delete(__dst[0]);
    return a2;
  }
  if ((char)v15 < 0)
    goto LABEL_17;
  return a2;
}

_QWORD *sub_20ABC5140(__n128 *a1, _QWORD *a2)
{
  const char *v4;
  size_t v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t *v12;
  void *__p[2];
  char v15;
  void *__dst[2];
  unsigned __int8 v17;

  if (a1[1].n128_u8[0])
    v4 = "[FREE]";
  else
    v4 = "[FIXED]";
  if (a1[1].n128_u8[0])
    v5 = 6;
  else
    v5 = 7;
  v17 = v5;
  memcpy(__dst, v4, v5);
  *(_BYTE *)((unint64_t)__dst | v5) = 0;
  if ((v17 & 0x80u) == 0)
    v6 = __dst;
  else
    v6 = (void **)__dst[0];
  if ((v17 & 0x80u) == 0)
    v7 = v17;
  else
    v7 = (uint64_t)__dst[1];
  v8 = sub_20AB89270(a2, (uint64_t)v6, v7);
  v9 = sub_20AB89270(v8, (uint64_t)"[", 1);
  v15 = 15;
  strcpy((char *)__p, "Principal Point");
  v10 = sub_20AB89270(v9, (uint64_t)__p, 15);
  v11 = sub_20AB89270(v10, (uint64_t)"] : ", 4);
  v12 = sub_20ABC2C00(v11, *a1);
  sub_20AB89270(v12, (uint64_t)"\n", 1);
  if (v15 < 0)
  {
    operator delete(__p[0]);
    if (((char)v17 & 0x80000000) == 0)
      return a2;
LABEL_17:
    operator delete(__dst[0]);
    return a2;
  }
  if ((char)v17 < 0)
    goto LABEL_17;
  return a2;
}

uint64_t *sub_20ABC5268(uint64_t *a1, __n128 a2, __n128 a3)
{
  char *v4;
  int v5;
  int64_t v6;
  size_t v7;
  size_t v8;
  double v9;
  size_t v10;
  double v11;
  std::string *p_b;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  std::string::size_type v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  std::string *v22;
  std::string::size_type v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  void **v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  void **v35;
  int v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  void **v42;
  char *v43;
  void **v44;
  const std::locale::facet *v45;
  uint64_t v46;
  BOOL v47;
  std::string::size_type v48;
  std::string::size_type v49;
  int64_t v50;
  void **v51;
  uint64_t v52;
  void **v53;
  const std::locale::facet *v54;
  uint64_t v55;
  std::string::size_type v56;
  int64_t v57;
  void **v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  std::string *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  void **v67;
  int v68;
  const std::locale::facet *v69;
  uint64_t v70;
  std::string::size_type v71;
  std::string::size_type v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  std::string *v76;
  uint64_t v77;
  uint64_t v78;
  int v80;
  void **v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  void *v86;
  std::string::size_type v87;
  int64_t v88;
  std::string __b;
  void *__p[2];
  uint64_t v91;
  _OWORD v92[2];
  std::string v93;

  v92[0] = a2;
  v92[1] = a3;
  v4 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v5 = *((_DWORD *)v4 + 2);
  v7 = *((_QWORD *)v4 + 2);
  v6 = *((_QWORD *)v4 + 3);
  if (v6)
  {
    if (v6 <= (uint64_t)(v7 + 2))
      v6 = v7 + 2;
    v8 = v6 + ~v7;
    v9 = __exp10((double)-(uint64_t)v7);
    v10 = v8 - 1;
    if (v8 - 1 > 0x7FFFFFFFFFFFFFF7)
LABEL_133:
      abort();
    v11 = v9;
    if (v10 >= 0x17)
    {
      v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17)
        v13 = v10 | 7;
      v14 = v13 + 1;
      p_b = (std::string *)operator new(v13 + 1);
      __b.__r_.__value_.__l.__size_ = v8 - 1;
      __b.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
      __b.__r_.__value_.__r.__words[0] = (std::string::size_type)p_b;
    }
    else
    {
      *((_BYTE *)&__b.__r_.__value_.__s + 23) = v8 - 1;
      p_b = &__b;
      if (v8 == 1)
      {
        LODWORD(v8) = 1;
        goto LABEL_13;
      }
    }
  }
  else
  {
    v11 = __exp10((double)-(uint64_t)v7);
    v10 = 3;
    *((_BYTE *)&__b.__r_.__value_.__s + 23) = 3;
    p_b = &__b;
    LODWORD(v8) = 4;
  }
  memset(p_b, 32, v10);
LABEL_13:
  p_b->__r_.__value_.__s.__data_[v10] = 0;
  v15 = std::string::append(&__b, "0 ");
  v16 = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v93.__r_.__value_.__l.__data_ = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v93.__r_.__value_.__r.__words[2] = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (v7 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_133;
  if (v7 >= 0x17)
  {
    v18 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v18 = v7 | 7;
    v19 = v18 + 1;
    v17 = operator new(v18 + 1);
    v87 = v7;
    v88 = v19 | 0x8000000000000000;
    v86 = v17;
    goto LABEL_20;
  }
  HIBYTE(v88) = v7;
  v17 = &v86;
  if (v7)
LABEL_20:
    memset(v17, 32, v7);
  *((_BYTE *)v17 + v7) = 0;
  if (v88 >= 0)
    v20 = (const std::string::value_type *)&v86;
  else
    v20 = (const std::string::value_type *)v86;
  if (v88 >= 0)
    v21 = HIBYTE(v88);
  else
    v21 = v87;
  v22 = std::string::append(&v93, v20, v21);
  v23 = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v91 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v88) < 0)
  {
    operator delete(v86);
    if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_29;
LABEL_132:
    operator delete(v93.__r_.__value_.__l.__data_);
    goto LABEL_29;
  }
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_132;
LABEL_29:
  v80 = v5;
  if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__b.__r_.__value_.__l.__data_);
  *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = 0;
  v93.__r_.__value_.__s.__data_[0] = 91;
  sub_20AB89270(a1, (uint64_t)&v93, 1);
  v24 = 0;
  v84 = a1 + 1;
  v85 = (int)v8 + (int)v7 + 1;
  v82 = (int)v7;
  v83 = (int)v7 - 3;
  while (1)
  {
    v25 = *(double *)((char *)v92 + v24);
    v26 = *a1;
    v27 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    if ((v27[9] & 1) != 0)
      break;
    if (fabs(v25) < v11)
    {
      v28 = (char *)HIBYTE(v91);
      v29 = (char *)__p[1];
      if (v91 >= 0)
        v30 = __p;
      else
        v30 = (void **)__p[0];
      MEMORY[0x20BD2CE34](&__b, a1);
      if (__b.__r_.__value_.__s.__data_[0])
      {
        if ((char)v28 >= 0)
          v31 = v28;
        else
          v31 = v29;
        v32 = (char *)a1 + *(_QWORD *)(*a1 - 24);
        v33 = *((_QWORD *)v32 + 5);
        v34 = &v31[(_QWORD)v30];
        if ((*((_DWORD *)v32 + 2) & 0xB0) == 0x20)
          v35 = (void **)&v31[(_QWORD)v30];
        else
          v35 = v30;
        v36 = *((_DWORD *)v32 + 36);
        if (v36 == -1)
        {
          v44 = v35;
          std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
          v45 = std::locale::use_facet((const std::locale *)&v93, MEMORY[0x24BEDB350]);
          v36 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v45->__vftable[2].~facet_0)(v45, 32);
          std::locale::~locale((std::locale *)&v93);
          v35 = v44;
          *((_DWORD *)v32 + 36) = v36;
          if (!v33)
            goto LABEL_96;
        }
        else if (!v33)
        {
          goto LABEL_96;
        }
        v46 = *((_QWORD *)v32 + 3);
        v47 = v46 <= (uint64_t)v31;
        v48 = v46 - (_QWORD)v31;
        if (v47)
          v49 = 0;
        else
          v49 = v48;
        v50 = (char *)v35 - (char *)v30;
        if ((char *)v35 - (char *)v30 >= 1)
        {
          v51 = v35;
          v52 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v33 + 96))(v33, v30, v50);
          v35 = v51;
          if (v52 != v50)
            goto LABEL_96;
        }
        goto LABEL_80;
      }
      goto LABEL_97;
    }
    *((_QWORD *)v27 + 3) = v85;
    *(_DWORD *)((char *)v84 + *(_QWORD *)(v26 - 24)) = *(_DWORD *)((_BYTE *)v84 + *(_QWORD *)(v26 - 24)) & 0xFFFFFEFB | 4;
    *(_DWORD *)((char *)v84 + *(_QWORD *)(v26 - 24)) |= 0x400u;
    v37 = *(_QWORD *)(v26 - 24);
    v38 = a1 + 2;
    v39 = v82;
LABEL_52:
    *(_QWORD *)((char *)v38 + v37) = v39;
    std::ostream::operator<<();
    if (v24 == 24)
      goto LABEL_128;
LABEL_98:
    LOBYTE(v86) = 44;
    MEMORY[0x20BD2CE34](&__b, a1);
    if (__b.__r_.__value_.__s.__data_[0])
    {
      v65 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v66 = *((_QWORD *)v65 + 5);
      if ((*((_DWORD *)v65 + 2) & 0xB0) == 0x20)
        v67 = (void **)((char *)&v86 + 1);
      else
        v67 = &v86;
      v68 = *((_DWORD *)v65 + 36);
      if (v68 == -1)
      {
        std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
        v69 = std::locale::use_facet((const std::locale *)&v93, MEMORY[0x24BEDB350]);
        v68 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v69->__vftable[2].~facet_0)(v69, 32);
        std::locale::~locale((std::locale *)&v93);
        *((_DWORD *)v65 + 36) = v68;
        if (!v66)
          goto LABEL_32;
      }
      else if (!v66)
      {
        goto LABEL_32;
      }
      v70 = *((_QWORD *)v65 + 3);
      v47 = v70 <= 1;
      v71 = v70 - 1;
      if (v47)
        v72 = 0;
      else
        v72 = v71;
      if ((char *)v67 - (char *)&v86 >= 1
        && (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v66 + 96))(v66, &v86, (char *)v67 - (char *)&v86) != (char *)v67 - (char *)&v86)
      {
        goto LABEL_32;
      }
      if ((uint64_t)v72 >= 1)
      {
        if (v72 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_133;
        if (v72 >= 0x17)
        {
          v74 = (v72 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v72 | 7) != 0x17)
            v74 = v72 | 7;
          v75 = v74 + 1;
          v73 = operator new(v74 + 1);
          v93.__r_.__value_.__l.__size_ = v72;
          v93.__r_.__value_.__r.__words[2] = v75 | 0x8000000000000000;
          v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v73;
        }
        else
        {
          *((_BYTE *)&v93.__r_.__value_.__s + 23) = v72;
          v73 = &v93;
        }
        memset(v73, v68, v72);
        *((_BYTE *)v73 + v72) = 0;
        if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v76 = &v93;
        else
          v76 = (std::string *)v93.__r_.__value_.__r.__words[0];
        v77 = (*(uint64_t (**)(uint64_t, std::string *, std::string::size_type))(*(_QWORD *)v66 + 96))(v66, v76, v72);
        v78 = v77;
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v93.__r_.__value_.__l.__data_);
          if (v78 != v72)
            goto LABEL_32;
        }
        else if (v77 != v72)
        {
          goto LABEL_32;
        }
      }
      if ((char *)&v86 + 1 - (char *)v67 >= 1
        && (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v66 + 96))(v66, v67, (char *)&v86 + 1 - (char *)v67) != (char *)&v86 + 1 - (char *)v67)
      {
LABEL_32:
        std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
        goto LABEL_33;
      }
      *((_QWORD *)v65 + 3) = 0;
    }
LABEL_33:
    MEMORY[0x20BD2CE40](&__b);
    v24 += 8;
  }
  if (v25 != 0.0)
  {
    *((_QWORD *)v27 + 3) = v85;
    *(_DWORD *)((char *)v84 + *(_QWORD *)(v26 - 24)) |= 0x400u;
    v37 = *(_QWORD *)(v26 - 24);
    v38 = a1 + 2;
    v39 = v83;
    goto LABEL_52;
  }
  v40 = (char *)HIBYTE(v91);
  v41 = (char *)__p[1];
  if (v91 >= 0)
    v42 = __p;
  else
    v42 = (void **)__p[0];
  MEMORY[0x20BD2CE34](&__b, a1);
  if (__b.__r_.__value_.__s.__data_[0])
  {
    if ((char)v40 >= 0)
      v43 = v40;
    else
      v43 = v41;
    v32 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v33 = *((_QWORD *)v32 + 5);
    v34 = &v43[(_QWORD)v42];
    if ((*((_DWORD *)v32 + 2) & 0xB0) == 0x20)
      v35 = (void **)&v43[(_QWORD)v42];
    else
      v35 = v42;
    v36 = *((_DWORD *)v32 + 36);
    if (v36 != -1)
    {
      if (!v33)
        goto LABEL_96;
LABEL_75:
      v55 = *((_QWORD *)v32 + 3);
      v47 = v55 <= (uint64_t)v43;
      v56 = v55 - (_QWORD)v43;
      if (v47)
        v49 = 0;
      else
        v49 = v56;
      v57 = (char *)v35 - (char *)v42;
      if ((char *)v35 - (char *)v42 >= 1)
      {
        v58 = v35;
        v59 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v33 + 96))(v33, v42, v57);
        v35 = v58;
        if (v59 != v57)
          goto LABEL_96;
      }
LABEL_80:
      if ((uint64_t)v49 < 1)
        goto LABEL_94;
      if (v49 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_133;
      v81 = v35;
      if (v49 >= 0x17)
      {
        v61 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v49 | 7) != 0x17)
          v61 = v49 | 7;
        v62 = v61 + 1;
        v60 = operator new(v61 + 1);
        v93.__r_.__value_.__l.__size_ = v49;
        v93.__r_.__value_.__r.__words[2] = v62 | 0x8000000000000000;
        v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v60;
      }
      else
      {
        *((_BYTE *)&v93.__r_.__value_.__s + 23) = v49;
        v60 = &v93;
      }
      memset(v60, v36, v49);
      *((_BYTE *)v60 + v49) = 0;
      if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v63 = &v93;
      else
        v63 = (std::string *)v93.__r_.__value_.__r.__words[0];
      v64 = (*(uint64_t (**)(uint64_t, std::string *, std::string::size_type))(*(_QWORD *)v33 + 96))(v33, v63, v49);
      if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v93.__r_.__value_.__l.__data_);
      v35 = v81;
      if (v64 == v49)
      {
LABEL_94:
        if (v34 - (char *)v35 < 1
          || (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 96))(v33) == v34 - (char *)v35)
        {
          *((_QWORD *)v32 + 3) = 0;
          goto LABEL_97;
        }
      }
      goto LABEL_96;
    }
    v53 = v35;
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v54 = std::locale::use_facet((const std::locale *)&v93, MEMORY[0x24BEDB350]);
    v36 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v54->__vftable[2].~facet_0)(v54, 32);
    std::locale::~locale((std::locale *)&v93);
    v35 = v53;
    *((_DWORD *)v32 + 36) = v36;
    if (v33)
      goto LABEL_75;
LABEL_96:
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
LABEL_97:
  MEMORY[0x20BD2CE40](&__b);
  if (v24 != 24)
    goto LABEL_98;
LABEL_128:
  sub_20AB89270(a1, (uint64_t)"   ]", 4);
  *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8) = v80;
  if (SHIBYTE(v91) < 0)
    operator delete(__p[0]);
  return a1;
}

uint64_t sub_20ABC5AF8(std::string::size_type *a1, std::string *a2, uint64_t a3, char *a4)
{
  std::string::size_type v6;
  const char *v7;
  CFStringRef v8;
  const __CFString *v9;
  const __CFString *v10;
  char v11;
  char *v12;
  uint64_t j;
  int v14;
  std::__shared_weak_count *v15;
  CFStringRef v16;
  uint64_t i;
  char *v18;
  __int128 v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  void *v23[2];
  int v24;
  CFTypeRef cf;
  char v26;
  std::string::size_type v27;
  std::__shared_weak_count *v28;

  cva::adp::io::PListSerializer::getPath(a1, a2, &v27);
  v6 = v27;
  if (!v27)
  {
    v14 = 0;
    v15 = v28;
    if (!v28)
      return a3 & v14;
    goto LABEL_24;
  }
  if (*(char *)(a3 + 23) >= 0)
    v7 = (const char *)a3;
  else
    v7 = *(const char **)a3;
  v8 = CFStringCreateWithCStringNoCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], v7, 0x8000100u, (CFAllocatorRef)*MEMORY[0x24BDBD258]);
  v9 = (const __CFString *)objc_msgSend(*(id *)v6, "objectForKey:", v8);
  v10 = v9;
  v11 = *(_BYTE *)(v6 + 8);
  cf = v9;
  v26 = v11;
  if (!v9)
  {
    v26 = 0;
    v16 = v8;
    goto LABEL_17;
  }
  CFRetain(v9);
  CFRelease(v8);
  if (!cva::ItemHandler::isVectorType(&cf))
  {
    v16 = v10;
LABEL_17:
    CFRelease(v16);
    v14 = 0;
    LODWORD(a3) = 1;
    v15 = v28;
    if (!v28)
      return a3 & v14;
    goto LABEL_24;
  }
  v23[0] = 0;
  v23[1] = 0;
  v24 = 0;
  sub_20ABC0994(&cf, (uint64_t)v23);
  v12 = (char *)v23[0];
  LODWORD(a3) = v24 == 256;
  if (v24 == 256 && v23[0] != a4)
  {
    if ((unint64_t)(a4 - (char *)v23[0]) >= 0x20)
    {
      for (i = 0; i != 2048; i += 32)
      {
        v18 = &a4[i];
        v19 = *(_OWORD *)&v12[i + 16];
        *(_OWORD *)v18 = *(_OWORD *)&v12[i];
        *((_OWORD *)v18 + 1) = v19;
      }
    }
    else
    {
      for (j = 0; j != 2048; j += 8)
        *(_QWORD *)&a4[j] = *(_QWORD *)&v12[j];
    }
  }
  free(v12);
  if (cf)
    CFRelease(cf);
  v14 = 1;
  v15 = v28;
  if (v28)
  {
LABEL_24:
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return a3 & v14;
}

void sub_20ABC5CAC(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20ABC5CC0(std::string::size_type *a1, std::string *a2, CFStringRef a3, _QWORD *a4)
{
  std::string::size_type v6;
  const char *isa;
  const __CFString *v8;
  const __CFString *v9;
  char v10;
  _QWORD *v11;
  int v12;
  std::__shared_weak_count *v13;
  CFStringRef v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *v18[2];
  int v19;
  CFTypeRef cf;
  char v21;
  std::string::size_type v22;
  std::__shared_weak_count *v23;

  cva::adp::io::PListSerializer::getPath(a1, a2, &v22);
  v6 = v22;
  if (!v22)
  {
LABEL_17:
    v12 = 0;
    v13 = v23;
    if (!v23)
      return a3 & v12;
    goto LABEL_18;
  }
  if (SHIBYTE(a3->data) >= 0)
    isa = (const char *)a3;
  else
    isa = (const char *)a3->isa;
  a3 = CFStringCreateWithCStringNoCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], isa, 0x8000100u, (CFAllocatorRef)*MEMORY[0x24BDBD258]);
  v8 = (const __CFString *)objc_msgSend(*(id *)v6, "objectForKey:", a3);
  v9 = v8;
  v10 = *(_BYTE *)(v6 + 8);
  cf = v8;
  v21 = v10;
  if (!v8)
  {
    v21 = 0;
    v14 = a3;
LABEL_16:
    CFRelease(v14);
    goto LABEL_17;
  }
  CFRetain(v8);
  CFRelease(a3);
  if (!cva::ItemHandler::isVectorType(&cf))
  {
    v14 = v9;
    goto LABEL_16;
  }
  v18[0] = 0;
  v18[1] = 0;
  v19 = 0;
  sub_20ABC0994(&cf, (uint64_t)v18);
  v11 = v18[0];
  LODWORD(a3) = v19 == 2;
  if (v19 == 2 && v18[0] != a4)
  {
    *a4 = *(_QWORD *)v18[0];
    a4[1] = v11[1];
  }
  free(v11);
  if (cf)
    CFRelease(cf);
  v12 = 1;
  v13 = v23;
  if (v23)
  {
LABEL_18:
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return a3 & v12;
}

void sub_20ABC5E28(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_20ABC5E40()
{
  JUMPOUT(0x20BD2D02CLL);
}

uint64_t sub_20ABC5E54()
{
  return 2;
}

uint64_t sub_20ABC5E5C(uint64_t a1)
{
  return a1 + 88;
}

__n128 sub_20ABC5E64@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __n128 result;
  __int128 v6;

  v4 = operator new();
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)v4 = &off_24C37FCA0;
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v4 + 41) = *(_OWORD *)(a1 + 41);
  *(_OWORD *)(v4 + 64) = *(_OWORD *)(a1 + 64);
  *(_BYTE *)(v4 + 80) = *(_BYTE *)(a1 + 80);
  *(_OWORD *)(v4 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v4 + 88) = *(_OWORD *)(a1 + 88);
  *(_QWORD *)(v4 + 120) = *(_QWORD *)(a1 + 120);
  result = *(__n128 *)(a1 + 128);
  v6 = *(_OWORD *)(a1 + 144);
  *(__n128 *)(v4 + 128) = result;
  *(_OWORD *)(v4 + 144) = v6;
  *(_QWORD *)(v4 + 160) = *(_QWORD *)(a1 + 160);
  *(_BYTE *)(v4 + 168) = *(_BYTE *)(a1 + 168);
  *(_DWORD *)(v4 + 176) = *(_DWORD *)(a1 + 176);
  *a2 = v4;
  return result;
}

_BYTE *sub_20ABC5F14(_BYTE *result, char a2)
{
  result[40] = a2;
  result[56] = a2;
  result[80] = a2;
  result[168] = a2;
  return result;
}

BOOL sub_20ABC5F28(double *a1, double *a2, double *a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  _BOOL4 v18;

  v3 = a2[2];
  if (v3 < 0.001)
    return 0;
  v4 = 1.0 / v3;
  v5 = v4 * *a2;
  v6 = v4 * a2[1];
  v7 = a1[18];
  v8 = a1[19];
  v9 = v5 * v5 + v6 * v6;
  v10 = v9 * v9 * a1[17] + a1[16] * v9 + a1[20] * (v9 * (v9 * v9)) + 1.0;
  v11 = v5 * v8 + v5 * v8;
  v12 = v5 * v5 + v6 * v6 * 3.0;
  v13 = v6 * (v5 * (v7 + v7)) + v8 * (v6 * v6 + v5 * v5 * 3.0) + v10 * v5;
  v14 = v6 * v11 + v7 * v12 + v10 * v6;
  v15 = a1[4];
  v16 = a1[8] + v15 * a1[6] * v13;
  v17 = a1[9] + v15 * v14;
  *a3 = v16;
  a3[1] = v17;
  v18 = a1[11] <= v16;
  if (a1[12] <= v16)
    v18 = 0;
  if (a1[13] > v17)
    v18 = 0;
  return a1[14] > v17 && v18;
}

uint64_t sub_20ABC6004(uint64_t a1, double *a2, double *a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v12;
  double v13;
  unint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  BOOL v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;

  v3 = *(double *)(a1 + 32);
  v4 = *(double *)(a1 + 48);
  v5 = *a2;
  v6 = a2[1];
  if (v4 < 0.0000000149011612
    || v3 < 0.0000000149011612
    || *(double *)(a1 + 88) > v5
    || *(double *)(a1 + 96) <= v5
    || *(double *)(a1 + 104) > v6
    || *(double *)(a1 + 112) <= v6)
  {
    return 0;
  }
  v12 = (v5 - *(double *)(a1 + 64)) / (v3 * v4);
  v13 = (v6 - *(double *)(a1 + 72)) / v3;
  v14 = *(unsigned int *)(a1 + 176);
  v15 = *(double *)(a1 + 128);
  v16 = *(double *)(a1 + 136);
  v17 = *(double *)(a1 + 144);
  v18 = *(double *)(a1 + 152);
  v19 = *(double *)(a1 + 160);
  *a3 = v12;
  a3[1] = v13;
  if (!(_DWORD)v14)
    return 1;
  v20 = 0;
  v21 = 0;
  v22 = v12;
  v23 = v13;
  do
  {
    v24 = v23 * v23;
    v25 = v22 * v22 + v23 * v23;
    v26 = v15 * v25 + 1.0 + v16 * (v25 * v25) + v19 * (v25 * (v25 * v25));
    if (v26 == 0.0)
      break;
    v27 = v22 * v23;
    v22 = (v12 - (v18 * (v25 + v22 * v22 * 2.0) + (v17 + v17) * v27)) / v26;
    v23 = (v13 - ((v18 + v18) * v27 + v17 * (v25 + v24 * 2.0))) / v26;
    *a3 = v22;
    a3[1] = v23;
    v20 = ++v21 >= v14;
  }
  while (v14 != v21);
  return v20;
}

uint64_t *sub_20ABC6114(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  const char *v5;
  size_t v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  _QWORD *v11;
  __int128 v12;
  char *v13;
  int v14;
  int64_t v15;
  size_t v16;
  size_t v17;
  double v18;
  size_t v19;
  double v20;
  std::string *p_b;
  uint64_t v22;
  uint64_t v23;
  std::string *v24;
  std::string::size_type v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  const std::string::value_type *v29;
  std::string::size_type v30;
  std::string *v31;
  std::string::size_type v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  void **v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  void **v44;
  int v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  void **v51;
  char *v52;
  void **v53;
  const std::locale::facet *v54;
  uint64_t v55;
  BOOL v56;
  std::string::size_type v57;
  std::string::size_type v58;
  int64_t v59;
  void **v60;
  uint64_t v61;
  void **v62;
  const std::locale::facet *v63;
  uint64_t v64;
  std::string::size_type v65;
  int64_t v66;
  void **v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  std::string *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  void **v76;
  int v77;
  const std::locale::facet *v78;
  uint64_t v79;
  std::string::size_type v80;
  std::string::size_type v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  std::string *v85;
  uint64_t v86;
  uint64_t v87;
  int v89;
  char *v90;
  void **v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  void *__dst[2];
  unsigned __int8 v97;
  void *v98;
  std::string::size_type v99;
  int64_t v100;
  std::string __b;
  void *__p[2];
  uint64_t v103;
  _OWORD v104[2];
  uint64_t v105;
  std::string v106;

  v4 = a1 + 32;
  sub_20ABC4E48((__n128 *)(a1 + 88), a2);
  sub_20ABC4EE8(v4, a2);
  sub_20ABC5014(a1 + 48, a2);
  sub_20ABC5140((__n128 *)(a1 + 64), a2);
  if (*(_BYTE *)(a1 + 168))
    v5 = "[FREE]";
  else
    v5 = "[FIXED]";
  if (*(_BYTE *)(a1 + 168))
    v6 = 6;
  else
    v6 = 7;
  v97 = v6;
  memcpy(__dst, v5, v6);
  *(_BYTE *)((unint64_t)__dst | v6) = 0;
  if ((v97 & 0x80u) == 0)
    v7 = __dst;
  else
    v7 = (void **)__dst[0];
  if ((v97 & 0x80u) == 0)
    v8 = v97;
  else
    v8 = (uint64_t)__dst[1];
  v9 = sub_20AB89270(a2, (uint64_t)v7, v8);
  sub_20AB89270(v9, (uint64_t)"[", 1);
  v10 = (char *)operator new(0x28uLL);
  strcpy(v10, "Heikkila Distortion Coefficients");
  v11 = sub_20AB89270(a2, (uint64_t)v10, 32);
  sub_20AB89270(v11, (uint64_t)"] : ", 4);
  v12 = *(_OWORD *)(a1 + 144);
  v104[0] = *(_OWORD *)(a1 + 128);
  v104[1] = v12;
  v105 = *(_QWORD *)(a1 + 160);
  v13 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  v14 = *((_DWORD *)v13 + 2);
  v16 = *((_QWORD *)v13 + 2);
  v15 = *((_QWORD *)v13 + 3);
  if (v15)
  {
    if (v15 <= (uint64_t)(v16 + 2))
      v15 = v16 + 2;
    v17 = v15 + ~v16;
    v18 = __exp10((double)-(uint64_t)v16);
    v19 = v17 - 1;
    if (v17 - 1 > 0x7FFFFFFFFFFFFFF7)
LABEL_147:
      abort();
    v20 = v18;
    if (v19 >= 0x17)
    {
      v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v19 | 7) != 0x17)
        v22 = v19 | 7;
      v23 = v22 + 1;
      p_b = (std::string *)operator new(v22 + 1);
      __b.__r_.__value_.__l.__size_ = v17 - 1;
      __b.__r_.__value_.__r.__words[2] = v23 | 0x8000000000000000;
      __b.__r_.__value_.__r.__words[0] = (std::string::size_type)p_b;
    }
    else
    {
      *((_BYTE *)&__b.__r_.__value_.__s + 23) = v17 - 1;
      p_b = &__b;
      if (v17 == 1)
      {
        LODWORD(v17) = 1;
        goto LABEL_25;
      }
    }
  }
  else
  {
    v20 = __exp10((double)-(uint64_t)v16);
    v19 = 3;
    *((_BYTE *)&__b.__r_.__value_.__s + 23) = 3;
    p_b = &__b;
    LODWORD(v17) = 4;
  }
  memset(p_b, 32, v19);
LABEL_25:
  p_b->__r_.__value_.__s.__data_[v19] = 0;
  v24 = std::string::append(&__b, "0 ");
  v25 = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v106.__r_.__value_.__l.__data_ = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v106.__r_.__value_.__r.__words[2] = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if (v16 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_147;
  if (v16 >= 0x17)
  {
    v27 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v27 = v16 | 7;
    v28 = v27 + 1;
    v26 = operator new(v27 + 1);
    v99 = v16;
    v100 = v28 | 0x8000000000000000;
    v98 = v26;
    goto LABEL_32;
  }
  HIBYTE(v100) = v16;
  v26 = &v98;
  if (v16)
LABEL_32:
    memset(v26, 32, v16);
  *((_BYTE *)v26 + v16) = 0;
  if (v100 >= 0)
    v29 = (const std::string::value_type *)&v98;
  else
    v29 = (const std::string::value_type *)v98;
  if (v100 >= 0)
    v30 = HIBYTE(v100);
  else
    v30 = v99;
  v31 = std::string::append(&v106, v29, v30);
  v32 = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v103 = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v100) < 0)
  {
    operator delete(v98);
    if ((SHIBYTE(v106.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_41;
LABEL_146:
    operator delete(v106.__r_.__value_.__l.__data_);
    goto LABEL_41;
  }
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_146;
LABEL_41:
  v89 = v14;
  v90 = v10;
  if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__b.__r_.__value_.__l.__data_);
  *(uint64_t *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 24) = 0;
  v106.__r_.__value_.__s.__data_[0] = 91;
  sub_20AB89270(a2, (uint64_t)&v106, 1);
  v33 = 0;
  v94 = a2 + 1;
  v95 = (int)v17 + (int)v16 + 1;
  v92 = (int)v16;
  v93 = (int)v16 - 3;
  while (1)
  {
    v34 = *(double *)((char *)v104 + v33);
    v35 = *a2;
    v36 = (char *)a2 + *(_QWORD *)(*a2 - 24);
    if ((v36[9] & 1) != 0)
      break;
    if (fabs(v34) < v20)
    {
      v37 = (char *)HIBYTE(v103);
      v38 = (char *)__p[1];
      if (v103 >= 0)
        v39 = __p;
      else
        v39 = (void **)__p[0];
      MEMORY[0x20BD2CE34](&__b, a2);
      if (__b.__r_.__value_.__s.__data_[0])
      {
        if ((char)v37 >= 0)
          v40 = v37;
        else
          v40 = v38;
        v41 = (char *)a2 + *(_QWORD *)(*a2 - 24);
        v42 = *((_QWORD *)v41 + 5);
        v43 = &v40[(_QWORD)v39];
        if ((*((_DWORD *)v41 + 2) & 0xB0) == 0x20)
          v44 = (void **)&v40[(_QWORD)v39];
        else
          v44 = v39;
        v45 = *((_DWORD *)v41 + 36);
        if (v45 == -1)
        {
          v53 = v44;
          std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
          v54 = std::locale::use_facet((const std::locale *)&v106, MEMORY[0x24BEDB350]);
          v45 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v54->__vftable[2].~facet_0)(v54, 32);
          std::locale::~locale((std::locale *)&v106);
          v44 = v53;
          *((_DWORD *)v41 + 36) = v45;
          if (!v42)
            goto LABEL_108;
        }
        else if (!v42)
        {
          goto LABEL_108;
        }
        v55 = *((_QWORD *)v41 + 3);
        v56 = v55 <= (uint64_t)v40;
        v57 = v55 - (_QWORD)v40;
        if (v56)
          v58 = 0;
        else
          v58 = v57;
        v59 = (char *)v44 - (char *)v39;
        if ((char *)v44 - (char *)v39 >= 1)
        {
          v60 = v44;
          v61 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v42 + 96))(v42, v39, v59);
          v44 = v60;
          if (v61 != v59)
            goto LABEL_108;
        }
        goto LABEL_92;
      }
      goto LABEL_109;
    }
    *((_QWORD *)v36 + 3) = v95;
    *(_DWORD *)((char *)v94 + *(_QWORD *)(v35 - 24)) = *(_DWORD *)((_BYTE *)v94 + *(_QWORD *)(v35 - 24)) & 0xFFFFFEFB | 4;
    *(_DWORD *)((char *)v94 + *(_QWORD *)(v35 - 24)) |= 0x400u;
    v46 = *(_QWORD *)(v35 - 24);
    v47 = a2 + 2;
    v48 = v92;
LABEL_64:
    *(_QWORD *)((char *)v47 + v46) = v48;
    std::ostream::operator<<();
    if (v33 == 32)
      goto LABEL_140;
LABEL_110:
    LOBYTE(v98) = 44;
    MEMORY[0x20BD2CE34](&__b, a2);
    if (__b.__r_.__value_.__s.__data_[0])
    {
      v74 = (char *)a2 + *(_QWORD *)(*a2 - 24);
      v75 = *((_QWORD *)v74 + 5);
      if ((*((_DWORD *)v74 + 2) & 0xB0) == 0x20)
        v76 = (void **)((char *)&v98 + 1);
      else
        v76 = &v98;
      v77 = *((_DWORD *)v74 + 36);
      if (v77 == -1)
      {
        std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
        v78 = std::locale::use_facet((const std::locale *)&v106, MEMORY[0x24BEDB350]);
        v77 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v78->__vftable[2].~facet_0)(v78, 32);
        std::locale::~locale((std::locale *)&v106);
        *((_DWORD *)v74 + 36) = v77;
        if (!v75)
          goto LABEL_44;
      }
      else if (!v75)
      {
        goto LABEL_44;
      }
      v79 = *((_QWORD *)v74 + 3);
      v56 = v79 <= 1;
      v80 = v79 - 1;
      if (v56)
        v81 = 0;
      else
        v81 = v80;
      if ((char *)v76 - (char *)&v98 >= 1
        && (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v75 + 96))(v75, &v98, (char *)v76 - (char *)&v98) != (char *)v76 - (char *)&v98)
      {
        goto LABEL_44;
      }
      if ((uint64_t)v81 >= 1)
      {
        if (v81 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_147;
        if (v81 >= 0x17)
        {
          v83 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v81 | 7) != 0x17)
            v83 = v81 | 7;
          v84 = v83 + 1;
          v82 = operator new(v83 + 1);
          v106.__r_.__value_.__l.__size_ = v81;
          v106.__r_.__value_.__r.__words[2] = v84 | 0x8000000000000000;
          v106.__r_.__value_.__r.__words[0] = (std::string::size_type)v82;
        }
        else
        {
          *((_BYTE *)&v106.__r_.__value_.__s + 23) = v81;
          v82 = &v106;
        }
        memset(v82, v77, v81);
        *((_BYTE *)v82 + v81) = 0;
        if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v85 = &v106;
        else
          v85 = (std::string *)v106.__r_.__value_.__r.__words[0];
        v86 = (*(uint64_t (**)(uint64_t, std::string *, std::string::size_type))(*(_QWORD *)v75 + 96))(v75, v85, v81);
        v87 = v86;
        if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v106.__r_.__value_.__l.__data_);
          if (v87 != v81)
            goto LABEL_44;
        }
        else if (v86 != v81)
        {
          goto LABEL_44;
        }
      }
      if ((char *)&v98 + 1 - (char *)v76 >= 1
        && (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v75 + 96))(v75, v76, (char *)&v98 + 1 - (char *)v76) != (char *)&v98 + 1 - (char *)v76)
      {
LABEL_44:
        std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 5);
        goto LABEL_45;
      }
      *((_QWORD *)v74 + 3) = 0;
    }
LABEL_45:
    MEMORY[0x20BD2CE40](&__b);
    v33 += 8;
  }
  if (v34 != 0.0)
  {
    *((_QWORD *)v36 + 3) = v95;
    *(_DWORD *)((char *)v94 + *(_QWORD *)(v35 - 24)) |= 0x400u;
    v46 = *(_QWORD *)(v35 - 24);
    v47 = a2 + 2;
    v48 = v93;
    goto LABEL_64;
  }
  v49 = (char *)HIBYTE(v103);
  v50 = (char *)__p[1];
  if (v103 >= 0)
    v51 = __p;
  else
    v51 = (void **)__p[0];
  MEMORY[0x20BD2CE34](&__b, a2);
  if (__b.__r_.__value_.__s.__data_[0])
  {
    if ((char)v49 >= 0)
      v52 = v49;
    else
      v52 = v50;
    v41 = (char *)a2 + *(_QWORD *)(*a2 - 24);
    v42 = *((_QWORD *)v41 + 5);
    v43 = &v52[(_QWORD)v51];
    if ((*((_DWORD *)v41 + 2) & 0xB0) == 0x20)
      v44 = (void **)&v52[(_QWORD)v51];
    else
      v44 = v51;
    v45 = *((_DWORD *)v41 + 36);
    if (v45 != -1)
    {
      if (!v42)
        goto LABEL_108;
LABEL_87:
      v64 = *((_QWORD *)v41 + 3);
      v56 = v64 <= (uint64_t)v52;
      v65 = v64 - (_QWORD)v52;
      if (v56)
        v58 = 0;
      else
        v58 = v65;
      v66 = (char *)v44 - (char *)v51;
      if ((char *)v44 - (char *)v51 >= 1)
      {
        v67 = v44;
        v68 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v42 + 96))(v42, v51, v66);
        v44 = v67;
        if (v68 != v66)
          goto LABEL_108;
      }
LABEL_92:
      if ((uint64_t)v58 < 1)
        goto LABEL_106;
      if (v58 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_147;
      v91 = v44;
      if (v58 >= 0x17)
      {
        v70 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v58 | 7) != 0x17)
          v70 = v58 | 7;
        v71 = v70 + 1;
        v69 = operator new(v70 + 1);
        v106.__r_.__value_.__l.__size_ = v58;
        v106.__r_.__value_.__r.__words[2] = v71 | 0x8000000000000000;
        v106.__r_.__value_.__r.__words[0] = (std::string::size_type)v69;
      }
      else
      {
        *((_BYTE *)&v106.__r_.__value_.__s + 23) = v58;
        v69 = &v106;
      }
      memset(v69, v45, v58);
      *((_BYTE *)v69 + v58) = 0;
      if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v72 = &v106;
      else
        v72 = (std::string *)v106.__r_.__value_.__r.__words[0];
      v73 = (*(uint64_t (**)(uint64_t, std::string *, std::string::size_type))(*(_QWORD *)v42 + 96))(v42, v72, v58);
      if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v106.__r_.__value_.__l.__data_);
      v44 = v91;
      if (v73 == v58)
      {
LABEL_106:
        if (v43 - (char *)v44 < 1
          || (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 96))(v42) == v43 - (char *)v44)
        {
          *((_QWORD *)v41 + 3) = 0;
          goto LABEL_109;
        }
      }
      goto LABEL_108;
    }
    v62 = v44;
    std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
    v63 = std::locale::use_facet((const std::locale *)&v106, MEMORY[0x24BEDB350]);
    v45 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v63->__vftable[2].~facet_0)(v63, 32);
    std::locale::~locale((std::locale *)&v106);
    v44 = v62;
    *((_DWORD *)v41 + 36) = v45;
    if (v42)
      goto LABEL_87;
LABEL_108:
    std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 5);
  }
LABEL_109:
  MEMORY[0x20BD2CE40](&__b);
  if (v33 != 32)
    goto LABEL_110;
LABEL_140:
  sub_20AB89270(a2, (uint64_t)"   ]", 4);
  *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 8) = v89;
  if (SHIBYTE(v103) < 0)
    operator delete(__p[0]);
  sub_20AB89270(a2, (uint64_t)"\n", 1);
  operator delete(v90);
  if ((char)v97 < 0)
    operator delete(__dst[0]);
  return a2;
}

BOOL sub_20ABC6AC4(uint64_t a1, uint64_t a2, double a3)
{
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  double v11;
  float64x2_t v12;
  double v13;
  float64x2_t v14;
  float64x2_t v15;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) != 2)
    return 0;
  if (*(double *)(a1 + 32) - *(double *)(a2 + 32) >= a3)
    return 0;
  if (*(double *)(a1 + 48) - *(double *)(a2 + 48) >= a3)
    return 0;
  v6 = vsubq_f64(*(float64x2_t *)(a1 + 64), *(float64x2_t *)(a2 + 64));
  if (sqrt(vaddvq_f64(vmulq_f64(v6, v6))) >= a3)
    return 0;
  if (*(unsigned __int8 *)(a1 + 80) != *(unsigned __int8 *)(a2 + 80))
    return 0;
  v7 = vsubq_f64(*(float64x2_t *)(a1 + 88), *(float64x2_t *)(a2 + 88));
  v8 = vmulq_f64(v7, v7);
  v9 = vsubq_f64(*(float64x2_t *)(a1 + 104), *(float64x2_t *)(a2 + 104));
  v10 = vmulq_f64(v9, v9);
  if (sqrt(vaddq_f64(vaddq_f64(vaddq_f64(v8, (float64x2_t)vdupq_laneq_s64((int64x2_t)v8, 1)), v10), (float64x2_t)vdupq_laneq_s64((int64x2_t)v10, 1)).f64[0]) >= a3)return 0;
  if (*(_DWORD *)(a1 + 120) == *(_DWORD *)(a2 + 120)
    && *(_DWORD *)(a1 + 124) == *(_DWORD *)(a2 + 124)
    && (v11 = *(double *)(a1 + 144) - *(double *)(a2 + 144),
        v12 = vsubq_f64(*(float64x2_t *)(a1 + 128), *(float64x2_t *)(a2 + 128)),
        v13 = vaddvq_f64(vmulq_f64(v12, v12)) + v11 * v11,
        v14 = vsubq_f64(*(float64x2_t *)(a1 + 152), *(float64x2_t *)(a2 + 152)),
        v15 = vmulq_f64(v14, v14),
        sqrt(v13 + v15.f64[0] + v15.f64[1]) < a3))
  {
    return *(unsigned __int8 *)(a1 + 168) == *(unsigned __int8 *)(a2 + 168);
  }
  else
  {
    return 0;
  }
}

void sub_20ABC6C2C()
{
  JUMPOUT(0x20BD2D02CLL);
}

uint64_t sub_20ABC6C40()
{
  return 1;
}

uint64_t sub_20ABC6C48(uint64_t a1)
{
  return a1 + 88;
}

__n128 sub_20ABC6C50@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __int128 v5;
  __n128 result;

  v4 = operator new();
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)v4 = &off_24C37FBE0;
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v4 + 41) = *(_OWORD *)(a1 + 41);
  *(_OWORD *)(v4 + 64) = *(_OWORD *)(a1 + 64);
  *(_BYTE *)(v4 + 80) = *(_BYTE *)(a1 + 80);
  *(_OWORD *)(v4 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v4 + 88) = *(_OWORD *)(a1 + 88);
  *(_QWORD *)(v4 + 120) = *(_QWORD *)(a1 + 120);
  v5 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(v4 + 128) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(v4 + 144) = v5;
  *(_BYTE *)(v4 + 160) = *(_BYTE *)(a1 + 160);
  result = *(__n128 *)(a1 + 168);
  *(__n128 *)(v4 + 168) = result;
  *a2 = v4;
  return result;
}

_BYTE *sub_20ABC6CF8(_BYTE *result, char a2)
{
  result[40] = a2;
  result[56] = a2;
  result[80] = a2;
  result[160] = a2;
  return result;
}

BOOL sub_20ABC6D0C(uint64_t a1, double *a2, double *a3)
{
  long double v3;
  double v6;
  double v7;
  double v8;
  double v9;
  int v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v24;
  double v25;
  double v26;
  _BOOL4 v27;

  v3 = a2[2];
  if (v3 < 0.0000000149011612)
    return 0;
  v6 = *a2;
  v7 = a2[1];
  v8 = v7 * v7 + v6 * v6;
  if (v8 >= 0.0000000149011612)
  {
    v10 = *(_DWORD *)(a1 + 176);
    v11 = *(double *)(a1 + 168);
    v13 = *(double *)(a1 + 128);
    v12 = *(double *)(a1 + 136);
    v15 = *(double *)(a1 + 144);
    v14 = *(double *)(a1 + 152);
    v16 = sqrt(v8);
    v17 = atan2(v16, v3);
    if (v17 <= v11)
    {
      v18 = v17 * (v17 * v17);
      v19 = v17 * v17 * v18;
      v20 = v17 * v17 * v19;
      v21 = v17 * v17 * v20;
      if (v10 == 2)
      {
        v22 = tan(v17 + v13 * v18 + v12 * v19 + v15 * v20 + v14 * v21);
      }
      else if (v10 == 1)
      {
        v22 = sin(v17 + v13 * v18 + v12 * v19 + v15 * v20 + v14 * v21);
      }
      else
      {
        v9 = 0.0;
        if (v10)
          goto LABEL_13;
        v22 = v17 + v13 * v18 + v12 * v19 + v15 * v20 + v14 * v21;
      }
      v9 = v22 / v16;
      goto LABEL_13;
    }
    return 0;
  }
  v9 = 1.0 / v3;
LABEL_13:
  v24 = *(double *)(a1 + 32);
  v25 = *(double *)(a1 + 64) + v24 * *(double *)(a1 + 48) * (v6 * v9);
  v26 = *(double *)(a1 + 72) + v24 * (v7 * v9);
  *a3 = v25;
  a3[1] = v26;
  v27 = *(double *)(a1 + 88) <= v25;
  if (*(double *)(a1 + 96) <= v25)
    v27 = 0;
  if (*(double *)(a1 + 104) > v26)
    v27 = 0;
  return *(double *)(a1 + 112) > v26 && v27;
}

uint64_t sub_20ABC6E74(uint64_t a1, double *a2, double *a3, __n128 a4)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v14;
  double v15;
  double v16;
  uint64_t result;
  int v18;
  int v19;
  double v21;
  int v23;
  double v24;
  float64x2_t v25;
  double v32;
  double v33;
  double v34;
  double v35;
  long double v37;
  double v38;
  double v39;
  double v40;
  __n128 v41;
  double v42;
  double v43;
  double v44;
  double v45;

  v4 = *(double *)(a1 + 32);
  v5 = *(double *)(a1 + 48);
  v6 = *a2;
  v7 = a2[1];
  if (v5 < 0.0000000149011612
    || v4 < 0.0000000149011612
    || *(double *)(a1 + 88) > v6
    || *(double *)(a1 + 96) <= v6
    || *(double *)(a1 + 104) > v7
    || *(double *)(a1 + 112) <= v7)
  {
    return 0;
  }
  v14 = (v6 - *(double *)(a1 + 64)) / (v4 * v5);
  v15 = (v7 - *(double *)(a1 + 72)) / v4;
  v16 = sqrt(v15 * v15 + v14 * v14);
  if (v16 < 0.0000000149011612)
  {
    *a3 = v14;
    a3[1] = v15;
    return 1;
  }
  if (v16 > 1.79769313e308)
    return 0;
  v38 = v14;
  v39 = (v7 - *(double *)(a1 + 72)) / v4;
  v18 = *(_DWORD *)(a1 + 180);
  a4.n128_f64[0] = *(double *)(a1 + 168) * 0.9;
  if (a4.n128_f64[0] > 1.0)
    a4.n128_f64[0] = 1.0;
  if (v18)
  {
    v19 = *(_DWORD *)(a1 + 176);
    _D15 = *(double *)(a1 + 136);
    v21 = *(double *)(a1 + 144);
    _D11 = *(double *)(a1 + 152);
    v40 = *(double *)(a1 + 128) * 3.0;
    v23 = v18 - 1;
    while (1)
    {
      v24 = a4.n128_f64[0] * a4.n128_f64[0];
      v25.f64[0] = a4.n128_f64[0] * a4.n128_f64[0];
      v25.f64[1] = v24 * v24;
      _Q2 = vmulq_n_f64(v25, a4.n128_f64[0]);
      v44 = v24 * v24;
      v45 = a4.n128_f64[0] * a4.n128_f64[0];
      v25.f64[0] = v24 * (v24 * v24);
      v42 = a4.n128_f64[0] * a4.n128_f64[0] * v25.f64[0];
      v43 = v25.f64[0];
      v25.f64[1] = v42;
      _Q1 = vmulq_n_f64(v25, a4.n128_f64[0]);
      v41 = a4;
      __asm
      {
        FMLA            D9, D15, V2.D[1]
        FMLA            D9, D11, V1.D[1]
      }
      v32 = cos(_D9);
      if (v19 == 2)
      {
        v33 = tan(_D9);
        v32 = 1.0 / (v32 * v32);
      }
      else if (v19 == 1)
      {
        v33 = sin(_D9);
      }
      else
      {
        v32 = 0.0;
        v33 = 0.0;
        if (!v19)
        {
          v32 = 1.0;
          v33 = _D9;
        }
      }
      v34 = (v40 * v45 + 1.0 + _D15 * 5.0 * v44 + v21 * 7.0 * v43 + _D11 * 9.0 * v42) * v32;
      if (v34 == 0.0)
        return 0;
      v35 = (v33 - v16) / v34;
      a4.n128_u64[1] = v41.n128_u64[1];
      a4.n128_f64[0] = v41.n128_f64[0] - v35;
      if (fabs(v35) < 2.22044605e-15 || v23-- == 0)
        goto LABEL_42;
    }
  }
  v35 = 1.79769313e308;
LABEL_42:
  result = 0;
  if (fabs(v35) <= 0.001 && a4.n128_f64[0] >= 0.0 && a4.n128_f64[0] <= 1.57079633)
  {
    v37 = tan(a4.n128_f64[0]);
    *a3 = v37 * v38 / v16;
    a3[1] = v37 * v39 / v16;
    return 1;
  }
  return result;
}

_QWORD *sub_20ABC7104(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  const char *v5;
  size_t v6;
  __int128 *p_dst;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  __int128 __dst;
  char v19;

  v4 = a1 + 32;
  sub_20ABC4E48((__n128 *)(a1 + 88), a2);
  sub_20ABC4EE8(v4, a2);
  sub_20ABC5014(a1 + 48, a2);
  sub_20ABC5140((__n128 *)(a1 + 64), a2);
  if (*(_BYTE *)(a1 + 160))
    v5 = "[FREE]";
  else
    v5 = "[FIXED]";
  if (*(_BYTE *)(a1 + 160))
    v6 = 6;
  else
    v6 = 7;
  v19 = v6;
  memcpy(&__dst, v5, v6);
  *(_BYTE *)((unint64_t)&__dst | v6) = 0;
  if (v19 >= 0)
    p_dst = &__dst;
  else
    p_dst = (__int128 *)__dst;
  if (v19 >= 0)
    v8 = v19;
  else
    v8 = *((_QWORD *)&__dst + 1);
  v9 = sub_20AB89270(a2, (uint64_t)p_dst, v8);
  sub_20AB89270(v9, (uint64_t)"[", 1);
  v10 = (char *)operator new(0x28uLL);
  strcpy(v10, "Kannala-4 Distortion Coefficients");
  v11 = sub_20AB89270(a2, (uint64_t)v10, 33);
  v12 = sub_20AB89270(v11, (uint64_t)"] : ", 4);
  v13 = sub_20ABC5268(v12, *(__n128 *)(a1 + 128), *(__n128 *)(a1 + 144));
  sub_20AB89270(v13, (uint64_t)"\n", 1);
  operator delete(v10);
  if (v19 < 0)
    operator delete((void *)__dst);
  v14 = sub_20AB89270(a2, (uint64_t)"[FIXED][", 8);
  v19 = 13;
  strcpy((char *)&__dst, "Field of View");
  v15 = sub_20AB89270(v14, (uint64_t)&__dst, 13);
  sub_20AB89270(v15, (uint64_t)"] : ", 4);
  v16 = (_QWORD *)std::ostream::operator<<();
  sub_20AB89270(v16, (uint64_t)"\n", 1);
  if (v19 < 0)
    operator delete((void *)__dst);
  return a2;
}

BOOL sub_20ABC72C8(uint64_t a1, uint64_t a2, double a3)
{
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) != 1)
    return 0;
  if (*(double *)(a1 + 32) - *(double *)(a2 + 32) >= a3)
    return 0;
  if (*(double *)(a1 + 48) - *(double *)(a2 + 48) >= a3)
    return 0;
  v6 = vsubq_f64(*(float64x2_t *)(a1 + 64), *(float64x2_t *)(a2 + 64));
  if (sqrt(vaddvq_f64(vmulq_f64(v6, v6))) >= a3)
    return 0;
  if (*(unsigned __int8 *)(a1 + 80) != *(unsigned __int8 *)(a2 + 80))
    return 0;
  v7 = vsubq_f64(*(float64x2_t *)(a1 + 88), *(float64x2_t *)(a2 + 88));
  v8 = vmulq_f64(v7, v7);
  v9 = vsubq_f64(*(float64x2_t *)(a1 + 104), *(float64x2_t *)(a2 + 104));
  v10 = vmulq_f64(v9, v9);
  if (sqrt(vaddq_f64(vaddq_f64(vaddq_f64(v8, (float64x2_t)vdupq_laneq_s64((int64x2_t)v8, 1)), v10), (float64x2_t)vdupq_laneq_s64((int64x2_t)v10, 1)).f64[0]) >= a3)return 0;
  if (*(_DWORD *)(a1 + 120) == *(_DWORD *)(a2 + 120)
    && *(_DWORD *)(a1 + 124) == *(_DWORD *)(a2 + 124)
    && (v11 = vsubq_f64(*(float64x2_t *)(a1 + 128), *(float64x2_t *)(a2 + 128)),
        v12 = vmulq_f64(v11, v11),
        v13 = vsubq_f64(*(float64x2_t *)(a1 + 144), *(float64x2_t *)(a2 + 144)),
        v14 = vmulq_f64(v13, v13),
        sqrt(vaddq_f64(vaddq_f64(vaddq_f64(v12, (float64x2_t)vdupq_laneq_s64((int64x2_t)v12, 1)), v14), (float64x2_t)vdupq_laneq_s64((int64x2_t)v14, 1)).f64[0]) < a3)&& *(unsigned __int8 *)(a1 + 160) == *(unsigned __int8 *)(a2 + 160)&& *(double *)(a1 + 168) - *(double *)(a2 + 168) < a3)
  {
    return *(_DWORD *)(a1 + 176) == *(_DWORD *)(a2 + 176);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_20ABC7438(std::string::size_type *a1, std::string *a2, CFStringRef a3, _QWORD *a4)
{
  std::string::size_type v6;
  const char *isa;
  const __CFString *v8;
  const __CFString *v9;
  char v10;
  _QWORD *v11;
  int v12;
  std::__shared_weak_count *v13;
  CFStringRef v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *v18[2];
  int v19;
  CFTypeRef cf;
  char v21;
  std::string::size_type v22;
  std::__shared_weak_count *v23;

  cva::adp::io::PListSerializer::getPath(a1, a2, &v22);
  v6 = v22;
  if (!v22)
  {
LABEL_17:
    v12 = 0;
    v13 = v23;
    if (!v23)
      return a3 & v12;
    goto LABEL_18;
  }
  if (SHIBYTE(a3->data) >= 0)
    isa = (const char *)a3;
  else
    isa = (const char *)a3->isa;
  a3 = CFStringCreateWithCStringNoCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], isa, 0x8000100u, (CFAllocatorRef)*MEMORY[0x24BDBD258]);
  v8 = (const __CFString *)objc_msgSend(*(id *)v6, "objectForKey:", a3);
  v9 = v8;
  v10 = *(_BYTE *)(v6 + 8);
  cf = v8;
  v21 = v10;
  if (!v8)
  {
    v21 = 0;
    v14 = a3;
LABEL_16:
    CFRelease(v14);
    goto LABEL_17;
  }
  CFRetain(v8);
  CFRelease(a3);
  if (!cva::ItemHandler::isVectorType(&cf))
  {
    v14 = v9;
    goto LABEL_16;
  }
  v18[0] = 0;
  v18[1] = 0;
  v19 = 0;
  sub_20ABC0994(&cf, (uint64_t)v18);
  v11 = v18[0];
  LODWORD(a3) = v19 == 4;
  if (v19 == 4 && v18[0] != a4)
  {
    *a4 = *(_QWORD *)v18[0];
    a4[1] = v11[1];
    a4[2] = v11[2];
    a4[3] = v11[3];
  }
  free(v11);
  if (cf)
    CFRelease(cf);
  v12 = 1;
  v13 = v23;
  if (v23)
  {
LABEL_18:
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return a3 & v12;
}

void sub_20ABC75B0(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_20ABC75C8()
{
  JUMPOUT(0x20BD2D02CLL);
}

uint64_t sub_20ABC75DC()
{
  return 0;
}

uint64_t sub_20ABC75E4(uint64_t a1)
{
  return a1 + 88;
}

__n128 sub_20ABC75EC@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __n128 result;

  v4 = operator new();
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)v4 = &off_24C37FB20;
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v4 + 41) = *(_OWORD *)(a1 + 41);
  *(_OWORD *)(v4 + 64) = *(_OWORD *)(a1 + 64);
  *(_BYTE *)(v4 + 80) = *(_BYTE *)(a1 + 80);
  *(_OWORD *)(v4 + 104) = *(_OWORD *)(a1 + 104);
  result = *(__n128 *)(a1 + 88);
  *(__n128 *)(v4 + 88) = result;
  *(_QWORD *)(v4 + 120) = *(_QWORD *)(a1 + 120);
  *a2 = v4;
  return result;
}

_BYTE *sub_20ABC767C(_BYTE *result, char a2)
{
  result[40] = a2;
  result[56] = a2;
  result[80] = a2;
  return result;
}

BOOL sub_20ABC768C(double *a1, double *a2, double *a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  _BOOL4 v8;

  v3 = a2[2];
  if (v3 < 0.001)
    return 0;
  v4 = 1.0 / v3;
  v5 = a1[4];
  v6 = a1[8] + v5 * a1[6] * (v4 * *a2);
  v7 = a1[9] + v5 * (v4 * a2[1]);
  *a3 = v6;
  a3[1] = v7;
  v8 = a1[11] <= v6;
  if (a1[12] <= v6)
    v8 = 0;
  if (a1[13] > v7)
    v8 = 0;
  return a1[14] > v7 && v8;
}

BOOL sub_20ABC7704(double *a1, double *a2, double *a3)
{
  double v3;
  double v4;
  _BOOL4 v5;
  double v6;
  double v7;
  double v8;

  v3 = a1[4];
  v4 = a2[1];
  v5 = a1[11] > *a2;
  if (a1[12] <= *a2)
    v5 = 1;
  v6 = a1[6];
  if (a1[13] > v4)
    v5 = 1;
  if (a1[14] <= v4)
    v5 = 1;
  if (v3 < 0.0000000149011612)
    v5 = 1;
  if (v6 < 0.0000000149011612)
    v5 = 1;
  if (!v5)
  {
    v7 = (*a2 - a1[8]) / (v3 * v6);
    v8 = (v4 - a1[9]) / v3;
    *a3 = v7;
    a3[1] = v8;
  }
  return !v5;
}

_QWORD *sub_20ABC7778(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;

  v4 = a1 + 32;
  sub_20ABC4E48((__n128 *)(a1 + 88), a2);
  sub_20ABC4EE8(v4, a2);
  sub_20ABC5014(a1 + 48, a2);
  return sub_20ABC5140((__n128 *)(a1 + 64), a2);
}

BOOL sub_20ABC77CC(uint64_t a1, uint64_t a2, double a3)
{
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;

  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2)
    && *(double *)(a1 + 32) - *(double *)(a2 + 32) < a3
    && *(double *)(a1 + 48) - *(double *)(a2 + 48) < a3
    && (v6 = vsubq_f64(*(float64x2_t *)(a1 + 64), *(float64x2_t *)(a2 + 64)), sqrt(vaddvq_f64(vmulq_f64(v6, v6))) < a3)
    && *(unsigned __int8 *)(a1 + 80) == *(unsigned __int8 *)(a2 + 80)
    && (v7 = vsubq_f64(*(float64x2_t *)(a1 + 88), *(float64x2_t *)(a2 + 88)),
        v8 = vmulq_f64(v7, v7),
        v9 = vsubq_f64(*(float64x2_t *)(a1 + 104), *(float64x2_t *)(a2 + 104)),
        v10 = vmulq_f64(v9, v9),
        sqrt(vaddq_f64(vaddq_f64(vaddq_f64(v8, (float64x2_t)vdupq_laneq_s64((int64x2_t)v8, 1)), v10), (float64x2_t)vdupq_laneq_s64((int64x2_t)v10, 1)).f64[0]) < a3)&& *(_DWORD *)(a1 + 120) == *(_DWORD *)(a2 + 120))
  {
    return *(_DWORD *)(a1 + 124) == *(_DWORD *)(a2 + 124);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_20ABC78CC(std::string::size_type *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  const std::string::value_type *p_p;
  std::string::size_type data_high;
  uint64_t v9;
  uint64_t v10;
  char *v12;
  int v13;
  char v14;
  std::string v15;
  __CFString __p;

  if (*(char *)(a2 + 23) < 0)
    sub_20AB88C14(&v15, *(void **)a2, *(_QWORD *)(a2 + 8));
  else
    v15 = *(std::string *)a2;
  cva::adp::PListPath::convertToPath(a3, (uint64_t)&__p);
  if (SHIBYTE(__p.data) >= 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = (const std::string::value_type *)__p.isa;
  if (SHIBYTE(__p.data) >= 0)
    data_high = HIBYTE(__p.data);
  else
    data_high = __p.info;
  std::string::append(&v15, p_p, data_high);
  if (SHIBYTE(__p.data) < 0)
    operator delete(__p.isa);
  HIBYTE(__p.data) = 4;
  strcpy((char *)&__p, "Data");
  v9 = sub_20ABC0820(a1, &v15, &__p, a4);
  v10 = v9;
  if (SHIBYTE(__p.data) < 0)
  {
    operator delete(__p.isa);
    if (!(_DWORD)v10)
    {
LABEL_14:
      if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return v10;
LABEL_22:
      operator delete(v15.__r_.__value_.__l.__data_);
      return v10;
    }
  }
  else if (!(_DWORD)v9)
  {
    goto LABEL_14;
  }
  HIBYTE(__p.data) = 5;
  strcpy((char *)&__p, "Fixed");
  v12 = (char *)(a4 + 1);
  v13 = cva::adp::io::PListSerializer::getItem<BOOL>(a1, &v15, (uint64_t)&__p, v12);
  if (SHIBYTE(__p.data) < 0)
    operator delete(__p.isa);
  v14 = *v12 ^ 1;
  if (!v13)
    v14 = 1;
  *v12 = v14;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_22;
  return v10;
}

uint64_t_t cva::adp::Session<double>::loadImagePoint3TrackSet(_QWORD *a1, uint64_t **a2)
{
  const char **v3;
  const char *v4;
  std::string::size_type v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  stat *v17;
  __darwin_ino64_t st_gid_high;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;
  std::string::size_type v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  const char *v29;
  void **v30;
  std::string *v31;
  std::string *v32;
  _QWORD *v33;
  unsigned int v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  void *v38;
  BOOL v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  char v44;
  void *v45;
  unint64_t v46;
  void *v47;
  unint64_t v48;
  uint8x8_t v49;
  unint64_t v50;
  void **v51;
  char *v52;
  unint64_t v53;
  uint64_t v54;
  void **v55;
  unint64_t v56;
  uint64_t v57;
  float v58;
  float v59;
  _BOOL8 v60;
  unint64_t v61;
  unint64_t v62;
  size_t prime;
  unint64_t v64;
  uint8x8_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  int8x8_t v70;
  unint64_t v71;
  uint8x8_t v72;
  uint64_t v73;
  uint64_t *v74;
  _QWORD *v75;
  unint64_t v76;
  BOOL v77;
  uint64_t **v78;
  int8x8_t v79;
  unint64_t v80;
  uint8x8_t v81;
  unint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  std::__shared_weak_count *v90;
  unint64_t v91;
  unint64_t *p_shared_weak_owners;
  unint64_t v93;
  unint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t *v98;
  uint64_t *v99;
  _QWORD *v100;
  uint64_t *v101;
  unint64_t *v102;
  unint64_t v103;
  int8x8_t v104;
  unint64_t v105;
  uint8x8_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t **v109;
  unint64_t v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t *v113;
  unint64_t v114;
  std::string::size_type v115;
  char *v116;
  char *v117;
  unint64_t v118;
  unint64_t v119;
  std::string::size_type *v120;
  char *v121;
  std::string::size_type v122;
  char *v123;
  unint64_t *v124;
  unint64_t v125;
  uint64_t *v126;
  unint64_t v127;
  __int128 v128;
  unint64_t v129;
  uint8x8_t v130;
  _QWORD *v131;
  _QWORD *v132;
  unint64_t v133;
  char *v134;
  float v135;
  float v136;
  _BOOL8 v137;
  unint64_t v138;
  unint64_t v139;
  size_t v140;
  uint64_t v141;
  int8x8_t v142;
  unint64_t v143;
  uint8x8_t v144;
  uint64_t v145;
  unint64_t *v146;
  unint64_t v147;
  _QWORD *v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  unint64_t v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  unint64_t *v161;
  unint64_t v162;
  unint64_t *v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t *v168;
  _QWORD *v169;
  uint64_t *v170;
  unint64_t v171;
  BOOL v172;
  uint64_t **v173;
  uint64_t *v174;
  unint64_t v175;
  BOOL v176;
  uint64_t **v177;
  uint64_t v178;
  unint64_t *v179;
  unint64_t *v180;
  uint64_t v181;
  _QWORD *v182;
  unint64_t *v183;
  uint64_t v184;
  unint64_t *v185;
  unint64_t *v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  _QWORD *v190;
  unint64_t v191;
  unint64_t *v192;
  _QWORD *v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  void **v198;
  void **v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t *v202;
  void **v203;
  unint64_t v204;
  int8x8_t v205;
  uint8x8_t v206;
  uint64_t v207;
  unint64_t v208;
  _QWORD *v209;
  unint64_t v210;
  int8x8_t v211;
  unint64_t v212;
  uint8x8_t v213;
  unint64_t v214;
  _QWORD *v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t *v220;
  unint64_t v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  uint64_t v225;
  void *v226;
  char **v227;
  char *v228;
  char *v229;
  unint64_t v230;
  unint64_t v231;
  unint64_t *v232;
  char *v233;
  unint64_t v234;
  char *v235;
  _QWORD *v236;
  _QWORD *v237;
  unint64_t v238;
  uint64_t v239;
  unint64_t v240;
  unint64_t v241;
  int8x8_t v242;
  uint8x8_t v243;
  unint64_t v244;
  uint64_t v245;
  _QWORD **v246;
  _QWORD *v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  _QWORD *v251;
  _QWORD *v252;
  unint64_t v253;
  unint64_t v254;
  uint64_t v255;
  unint64_t v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  uint64_t v260;
  __int128 v261;
  uint64_t *v262;
  uint64_t *v263;
  uint64_t *v264;
  uint64_t *v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  unint64_t *v269;
  unint64_t v270;
  uint64_t v271;
  uint8x8_t v272;
  unint64_t v273;
  _QWORD *v274;
  _QWORD *v275;
  unint64_t v276;
  uint64_t v277;
  uint64_t v278;
  _OWORD *v279;
  char *v280;
  char *v281;
  unint64_t v282;
  unint64_t v283;
  unint64_t *v284;
  char *v285;
  unint64_t v286;
  char *v287;
  char *v288;
  uint64_t v289;
  std::__shared_weak_count *v290;
  std::__shared_weak_count *v291;
  unint64_t *p_shared_owners;
  unint64_t v293;
  std::__shared_weak_count *v294;
  uint64_t v295;
  unint64_t *v296;
  unint64_t v297;
  uint64_t v298;
  uint64_t v299;
  unint64_t v300;
  char *v301;
  char *v302;
  unint64_t v303;
  unint64_t v304;
  unint64_t *v305;
  char *v306;
  unint64_t v307;
  char *v308;
  char *v309;
  uint64_t v310;
  std::__shared_weak_count *v311;
  std::__shared_weak_count *v312;
  std::__shared_weak_count *v313;
  unint64_t *v314;
  unint64_t v315;
  void **v316;
  void **v317;
  void **v318;
  _QWORD *v319;
  void *v320;
  __int128 *v321;
  uint64_t v322;
  uint64_t v323;
  __int128 v324;
  uint64_t_t v325;
  const std::string::value_type *v326;
  std::string::size_type v327;
  uint64_t v328;
  const char *v329;
  int v330;
  _QWORD *v331;
  _OWORD *v332;
  uint64_t v333;
  char *v334;
  void *v335;
  char *v336;
  BOOL v337;
  std::string::size_type v338;
  uint64_t v339;
  uint64_t v340;
  _QWORD *v341;
  const char *v342;
  uint64_t v343;
  uint64_t v344;
  __int128 v345;
  std::string *p_dst;
  std::string::size_type size;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  void **v352;
  std::string::size_type v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  const std::string::value_type *v358;
  std::string::size_type v359;
  uint64_t v360;
  uint64_t v361;
  int v362;
  uint64_t_t v363;
  uint64_t v364;
  void *v365;
  unsigned int v366;
  uint64_t v367;
  _QWORD *v368;
  uint64_t v369;
  unint64_t v370;
  uint64_t v371;
  unint64_t v372;
  double *v373;
  unint64_t v374;
  double *v375;
  double *v376;
  double v377;
  uint64_t v378;
  uint64_t v379;
  unint64_t v380;
  unint64_t v381;
  unint64_t v382;
  uint64_t v383;
  unint64_t v384;
  __int128 v385;
  unint64_t v386;
  uint64_t v387;
  void **v388;
  unint64_t v389;
  uint64_t v390;
  unint64_t v391;
  unint64_t v392;
  char *v393;
  __int128 v394;
  char *v395;
  char *v396;
  int64_t v397;
  uint64_t v398;
  unint64_t v399;
  unint64_t v400;
  uint64_t v401;
  char *v402;
  __int128 v403;
  uint64_t v404;
  char *v405;
  unint64_t v406;
  char *v407;
  __int128 v408;
  char *v409;
  uint64_t i;
  __int128 v411;
  void *v412;
  _QWORD *v413;
  _QWORD *v414;
  const char *v415;
  _QWORD *v417;
  uint64_t *v418;
  _QWORD *v419;
  _QWORD *v420;
  std::string::size_type v421;
  BOOL v422;
  _QWORD *v423;
  uint64_t v424;
  std::__shared_weak_count *v425;
  unint64_t *v426;
  unint64_t v427;
  char v428;
  unint64_t *v429;
  unint64_t v430;
  _QWORD *v431;
  void *v432;
  std::__shared_weak_count *v433;
  uint64_t v434;
  unint64_t *v435;
  uint64_t v436;
  uint64_t v437;
  const char **v438;
  int v439;
  std::string::size_type v440;
  _QWORD *v442;
  std::__shared_weak_count *v443;
  _QWORD *v444;
  __int128 v445;
  _QWORD *v446;
  uint64_t_t v447;
  uint64_t **v448;
  uint64_t v449;
  uint64_t v450;
  _QWORD *v451;
  uint64_t v452;
  uint64_t *v453;
  void *v454[4];
  const char *v455;
  std::string v456;
  void *v457[2];
  void *v458[2];
  int v459;
  void *__p[2];
  void *v461;
  __int128 v462;
  __int128 v463;
  __int128 v464;
  char v465;
  char v466;
  uint64_t v467;
  std::string __dst;
  __int128 v469;
  void *v470[2];
  char v471;
  const char *v472;
  void **v473;
  double v474;
  stat v475;
  _QWORD v476[21];

  v476[19] = *MEMORY[0x24BDAC8D0];
  v3 = (const char **)(a1 + 13);
  sub_20ABBAC68(&v456, a1);
  *(_OWORD *)v457 = 0u;
  *(_OWORD *)v458 = 0u;
  v459 = 1065353216;
  v438 = v3;
  if (!sub_20ABCA68C(v3, &v456, (uint64_t *)v457))
    goto LABEL_660;
  v4 = *v3;
  if ((*v3)[23] < 0)
    v4 = *(const char **)v4;
  v439 = 0;
  if (!stat(v4, &v475) && (v475.st_mode & 0xF000) == 0x4000)
  {
    v470[0] = 0;
    v454[0] = 0;
    v474 = 0.0;
    v5 = v456.__r_.__value_.__r.__words[0];
    v439 = 1;
    if ((std::string::size_type *)v456.__r_.__value_.__l.__data_ != &v456.__r_.__value_.__r.__words[1])
    {
      v451 = a2 + 1;
      v453 = (uint64_t *)(a2 + 3);
      v436 = *MEMORY[0x24BEDB7E0];
      v437 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
      v444 = a2 + 5;
      v448 = a2;
      while (1)
      {
        v6 = *v3;
        v7 = operator new();
        v8 = v7;
        if (v6[23] < 0)
        {
          sub_20AB88C14((_BYTE *)v7, *(void **)v6, *((_QWORD *)v6 + 1));
        }
        else
        {
          v9 = *(_OWORD *)v6;
          *(_QWORD *)(v7 + 16) = *((_QWORD *)v6 + 2);
          *(_OWORD *)v7 = v9;
        }
        v10 = *(char *)(v5 + 63);
        if (v10 >= 0)
          v11 = (const std::string::value_type *)(v5 + 40);
        else
          v11 = *(const std::string::value_type **)(v5 + 40);
        if (v10 >= 0)
          v12 = *(unsigned __int8 *)(v5 + 63);
        else
          v12 = *(_QWORD *)(v5 + 48);
        std::string::append((std::string *)v8, v11, v12);
        v13 = operator new();
        v14 = v13;
        a2 = v448;
        if (*(char *)(v8 + 23) < 0)
        {
          sub_20AB88C14((_BYTE *)v13, *(void **)v8, *(_QWORD *)(v8 + 8));
          if (*(char *)(v8 + 23) < 0)
            operator delete(*(void **)v8);
        }
        else
        {
          *(_OWORD *)v13 = *(_OWORD *)v8;
          *(_QWORD *)(v13 + 16) = *(_QWORD *)(v8 + 16);
        }
        MEMORY[0x20BD2D02C](v8, 0x1012C40EC159624);
        HIBYTE(v475.st_gid) = 1;
        LOWORD(v475.st_dev) = 47;
        v15 = operator new();
        v16 = v15;
        v440 = v5;
        if (*(char *)(v14 + 23) < 0)
        {
          sub_20AB88C14((_BYTE *)v15, *(void **)v14, *(_QWORD *)(v14 + 8));
        }
        else
        {
          *(_OWORD *)v15 = *(_OWORD *)v14;
          *(_QWORD *)(v15 + 16) = *(_QWORD *)(v14 + 16);
        }
        if ((v475.st_gid & 0x80000000) == 0)
          v17 = &v475;
        else
          v17 = *(stat **)&v475.st_dev;
        if ((v475.st_gid & 0x80000000) == 0)
          st_gid_high = HIBYTE(v475.st_gid);
        else
          st_gid_high = v475.st_ino;
        std::string::append((std::string *)v16, (const std::string::value_type *)v17, st_gid_high);
        v19 = operator new();
        v20 = v19;
        if (*(char *)(v16 + 23) < 0)
        {
          sub_20AB88C14((_BYTE *)v19, *(void **)v16, *(_QWORD *)(v16 + 8));
          if (*(char *)(v16 + 23) < 0)
            operator delete(*(void **)v16);
        }
        else
        {
          *(_OWORD *)v19 = *(_OWORD *)v16;
          *(_QWORD *)(v19 + 16) = *(_QWORD *)(v16 + 16);
        }
        MEMORY[0x20BD2D02C](v16, 0x1012C40EC159624);
        HIBYTE(v461) = 10;
        strcpy((char *)__p, "tracks.txt");
        v21 = operator new();
        v22 = v21;
        if (*(char *)(v20 + 23) < 0)
        {
          sub_20AB88C14((_BYTE *)v21, *(void **)v20, *(_QWORD *)(v20 + 8));
        }
        else
        {
          *(_OWORD *)v21 = *(_OWORD *)v20;
          *(_QWORD *)(v21 + 16) = *(_QWORD *)(v20 + 16);
        }
        if (SHIBYTE(v461) >= 0)
          v23 = __p;
        else
          v23 = (void **)__p[0];
        if (SHIBYTE(v461) >= 0)
          v24 = HIBYTE(v461);
        else
          v24 = (std::string::size_type)__p[1];
        std::string::append((std::string *)v22, (const std::string::value_type *)v23, v24);
        v25 = operator new();
        v26 = v25;
        if (*(char *)(v22 + 23) < 0)
        {
          sub_20AB88C14((_BYTE *)v25, *(void **)v22, *(_QWORD *)(v22 + 8));
          v27 = *(char *)(v22 + 23);
          v473 = (void **)v26;
          if (v27 < 0)
            operator delete(*(void **)v22);
        }
        else
        {
          *(_OWORD *)v25 = *(_OWORD *)v22;
          *(_QWORD *)(v25 + 16) = *(_QWORD *)(v22 + 16);
          v473 = (void **)v25;
        }
        MEMORY[0x20BD2D02C](v22, 0x1012C40EC159624);
        if (SHIBYTE(v461) < 0)
        {
          operator delete(__p[0]);
          if ((*(char *)(v20 + 23) & 0x80000000) == 0)
            goto LABEL_50;
        }
        else if ((*(char *)(v20 + 23) & 0x80000000) == 0)
        {
          goto LABEL_50;
        }
        operator delete(*(void **)v20);
LABEL_50:
        MEMORY[0x20BD2D02C](v20, 0x1012C40EC159624);
        if (SHIBYTE(v475.st_gid) < 0)
          operator delete(*(void **)&v475.st_dev);
        v28 = MEMORY[0x24BDAC740];
        if (*(char *)(v14 + 23) < 0)
          operator delete(*(void **)v14);
        MEMORY[0x20BD2D02C](v14, 0x1012C40EC159624);
        v29 = (const char *)v26;
        if (*(char *)(v26 + 23) < 0)
          v29 = *(const char **)v26;
        if (access(v29, 0))
        {
          if (*(char *)(v26 + 23) < 0)
            operator delete(*(void **)v26);
          v30 = (void **)v26;
          goto LABEL_60;
        }
        cva::adp::io::openInputStream((const char **)&v473, &v475);
        if (!v475.st_qspare[1])
        {
          *(_QWORD *)&v475.st_dev = v436;
          *(_QWORD *)((char *)&v475.st_dev + *(_QWORD *)(v436 - 24)) = v437;
          MEMORY[0x20BD2CD80](&v475.st_uid);
          std::istream::~istream();
          MEMORY[0x20BD2D008](v476);
          if (*(char *)(v26 + 23) < 0)
            operator delete(*(void **)v26);
          v318 = (void **)v26;
          goto LABEL_659;
        }
LABEL_72:
        if ((*((_BYTE *)&v475.st_atimespec.tv_sec + *(_QWORD *)(*(_QWORD *)&v475.st_dev - 24)) & 2) == 0)
        {
          v33 = (_QWORD *)MEMORY[0x20BD2CE04](&v475, v470);
          sub_20ABBBB80(v33);
          __p[0] = 0;
          __p[1] = 0;
          v461 = v470[0];
          v462 = 0u;
          v463 = 0u;
          v464 = 0u;
          v465 = 1;
          v466 = 0;
          v467 = 0;
          v34 = std::istream::peek();
          if (v34 <= 0xFF)
          {
LABEL_581:
            if ((*(_DWORD *)(v28 + 4 * v34 + 60) & 0x400) == 0)
              goto LABEL_74;
            v271 = MEMORY[0x20BD2CE04](&v475, v454);
            MEMORY[0x20BD2CE04](v271, &v474);
            if (!v457[1])
              goto LABEL_580;
            v14 = (unint64_t)v454[0] & 0xFFFFFFFFFFFFFFLL | ((unint64_t)*(unsigned __int8 *)(v5 + 32) << 56);
            v272 = (uint8x8_t)vcnt_s8((int8x8_t)v457[1]);
            v272.i16[0] = vaddlv_u8(v272);
            if (v272.u32[0] > 1uLL)
            {
              v273 = (unint64_t)v454[0] & 0xFFFFFFFFFFFFFFLL | ((unint64_t)*(unsigned __int8 *)(v5 + 32) << 56);
              if ((void *)v14 >= v457[1])
                v273 = v14 % (unint64_t)v457[1];
            }
            else
            {
              v273 = ((unint64_t)v457[1] - 1) & v14;
            }
            v274 = (_QWORD *)*((_QWORD *)v457[0] + v273);
            if (!v274)
              goto LABEL_580;
            v275 = (_QWORD *)*v274;
            if (!v275)
              goto LABEL_580;
            if (v272.u32[0] < 2uLL)
            {
              while (1)
              {
                v277 = v275[1];
                if (v14 == v277)
                {
                  if (v275[2] == v14)
                    goto LABEL_603;
                }
                else if ((v277 & ((uint64_t)v457[1] - 1)) != v273)
                {
                  goto LABEL_580;
                }
                v275 = (_QWORD *)*v275;
                if (!v275)
                  goto LABEL_580;
              }
            }
            while (1)
            {
              v276 = v275[1];
              if (v14 == v276)
              {
                if (v275[2] == v14)
                {
LABEL_603:
                  v278 = v275[3];
                  if (*(_QWORD *)&v474 < (unint64_t)((v275[4] - v278) >> 5))
                  {
                    v279 = (_OWORD *)(v278 + 32 * *(_QWORD *)&v474);
                    __dst.__r_.__value_.__r.__words[0] = (unint64_t)v454[0] & 0xFFFFFFFFFFFFFFLL | ((unint64_t)*(unsigned __int8 *)(v5 + 32) << 56);
                    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = *v279;
                    v469 = v279[1];
                    v280 = (char *)*((_QWORD *)&v462 + 1);
                    v281 = (char *)v462;
                    if (*((_QWORD *)&v462 + 1) == (_QWORD)v462)
                    {
                      v287 = (char *)*((_QWORD *)&v462 + 1);
                      goto LABEL_614;
                    }
                    v282 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v462 + 1) - v462) >> 3);
                    do
                    {
                      v283 = v282 >> 1;
                      v284 = (unint64_t *)&v281[40 * (v282 >> 1)];
                      v286 = *v284;
                      v285 = (char *)(v284 + 5);
                      v282 += ~(v282 >> 1);
                      if (v286 < v14)
                        v281 = v285;
                      else
                        v282 = v283;
                    }
                    while (v282);
                    v287 = v281;
                    if (*((char **)&v462 + 1) == v281
                      || (v288 = (char *)*((_QWORD *)&v462 + 1), *(_QWORD *)v281 != v14))
                    {
LABEL_614:
                      v288 = sub_20ABCB734((char **)&v462, v287, (uint64_t *)&__dst);
                      v280 = (char *)*((_QWORD *)&v462 + 1);
                    }
                    if (v280 != v288)
                    {
                      v289 = v467;
                      if (v467)
                      {
                        __dst.__r_.__value_.__l.__data_ = (std::string::pointer)__p[0];
                        if (!__p[1]
                          || (v290 = std::__shared_weak_count::lock((std::__shared_weak_count *)__p[1]),
                              (__dst.__r_.__value_.__l.__size_ = (std::string::size_type)v290) == 0))
                        {
LABEL_861:
                          sub_20ABBC228();
                        }
                        v291 = v290;
                        sub_20ABCBA74(v289, v14, &__dst);
                        p_shared_owners = (unint64_t *)&v291->__shared_owners_;
                        do
                          v293 = __ldaxr(p_shared_owners);
                        while (__stlxr(v293 - 1, p_shared_owners));
                        if (!v293)
                        {
                          ((void (*)(std::__shared_weak_count *))v291->__on_zero_shared)(v291);
                          std::__shared_weak_count::__release_weak(v291);
                        }
                      }
                    }
LABEL_580:
                    std::istream::ignore();
                    v34 = std::istream::peek();
                    if (v34 >= 0x100)
                      break;
                    goto LABEL_581;
                  }
                  v44 = 0;
                  v45 = (void *)v462;
                  if ((_QWORD)v462)
                    goto LABEL_93;
LABEL_94:
                  if (__p[1])
                    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p[1]);
                  if ((v44 & 1) != 0)
                    goto LABEL_72;
                  *(_QWORD *)&v475.st_dev = v436;
                  *(_QWORD *)((char *)&v475.st_dev + *(_QWORD *)(v436 - 24)) = v437;
                  MEMORY[0x20BD2CD80](&v475.st_uid);
                  std::istream::~istream();
                  MEMORY[0x20BD2D008](v476);
                  v317 = v473;
                  if (v473)
                  {
                    if (*((char *)v473 + 23) < 0)
                      operator delete(*v473);
                    v318 = v317;
LABEL_659:
                    MEMORY[0x20BD2D02C](v318, 0x1012C40EC159624);
                  }
LABEL_660:
                  v439 = 0;
                  goto LABEL_661;
                }
              }
              else
              {
                if ((void *)v276 >= v457[1])
                  v276 %= (unint64_t)v457[1];
                if (v276 != v273)
                  goto LABEL_580;
              }
              v275 = (_QWORD *)*v275;
              if (!v275)
                goto LABEL_580;
            }
          }
LABEL_74:
          v35 = (unint64_t)v451;
          v36 = (_QWORD *)*v451;
          if (!*v451)
            goto LABEL_85;
          v37 = v451;
          do
          {
            v38 = (void *)v36[4];
            v39 = v38 >= v470[0];
            if (v38 >= v470[0])
              v40 = v36;
            else
              v40 = v36 + 1;
            if (v39)
              v37 = v36;
            v36 = (_QWORD *)*v40;
          }
          while (*v40);
          if (v37 == v451 || (void *)v37[4] > v470[0])
          {
LABEL_85:
            v443 = 0;
            goto LABEL_86;
          }
          v295 = v37[5];
          v294 = (std::__shared_weak_count *)v37[6];
          if (v294)
          {
            v296 = (unint64_t *)&v294->__shared_owners_;
            do
              v297 = __ldxr(v296);
            while (__stxr(v297 + 1, v296));
          }
          v443 = v294;
          if (v295)
          {
            v299 = *((_QWORD *)&v462 + 1);
            v298 = v462;
            if ((_QWORD)v462 != *((_QWORD *)&v462 + 1))
            {
              v14 = v295 + 24;
              while (1)
              {
                v300 = *(_QWORD *)v298;
                __dst = *(std::string *)v298;
                v469 = *(_OWORD *)(v298 + 24);
                v302 = *(char **)(v295 + 24);
                v301 = *(char **)(v295 + 32);
                if (v301 == v302)
                  break;
                v303 = 0xCCCCCCCCCCCCCCCDLL * ((v301 - v302) >> 3);
                do
                {
                  v304 = v303 >> 1;
                  v305 = (unint64_t *)&v302[40 * (v303 >> 1)];
                  v307 = *v305;
                  v306 = (char *)(v305 + 5);
                  v303 += ~(v303 >> 1);
                  if (v307 < v300)
                    v302 = v306;
                  else
                    v303 = v304;
                }
                while (v303);
                v308 = v302;
                if (v301 == v302)
                  goto LABEL_640;
                v309 = *(char **)(v295 + 32);
                if (*(_QWORD *)v302 != v300)
                  goto LABEL_640;
LABEL_641:
                if (v301 != v309)
                {
                  v310 = *(_QWORD *)(v295 + 88);
                  if (v310)
                  {
                    v311 = *(std::__shared_weak_count **)(v295 + 8);
                    __dst.__r_.__value_.__r.__words[0] = *(_QWORD *)v295;
                    if (!v311)
                      goto LABEL_861;
                    v312 = std::__shared_weak_count::lock(v311);
                    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v312;
                    if (!v312)
                      goto LABEL_861;
                    v313 = v312;
                    sub_20ABCBA74(v310, v300, &__dst);
                    v314 = (unint64_t *)&v313->__shared_owners_;
                    do
                      v315 = __ldaxr(v314);
                    while (__stlxr(v315 - 1, v314));
                    if (!v315)
                    {
                      ((void (*)(std::__shared_weak_count *))v313->__on_zero_shared)(v313);
                      std::__shared_weak_count::__release_weak(v313);
                    }
                  }
                }
                v298 += 40;
                if (v298 == v299)
                  goto LABEL_87;
              }
              v308 = *(char **)(v295 + 32);
LABEL_640:
              v309 = sub_20ABCB734((char **)(v295 + 24), v308, (uint64_t *)&__dst);
              v301 = *(char **)(v295 + 32);
              goto LABEL_641;
            }
LABEL_87:
            v5 = v440;
            v28 = MEMORY[0x24BDAC740];
            if (v443)
            {
              v42 = (unint64_t *)&v443->__shared_owners_;
              do
                v43 = __ldaxr(v42);
              while (__stlxr(v43 - 1, v42));
              if (!v43)
              {
                ((void (*)(std::__shared_weak_count *))v443->__on_zero_shared)(v443);
                std::__shared_weak_count::__release_weak(v443);
              }
            }
            v44 = 1;
            v45 = (void *)v462;
            if (!(_QWORD)v462)
              goto LABEL_94;
LABEL_93:
            operator delete(v45);
            goto LABEL_94;
          }
LABEL_86:
          v449 = *((_QWORD *)&v462 + 1);
          v41 = v462;
          if (*((_QWORD *)&v462 + 1) == (_QWORD)v462)
            goto LABEL_87;
LABEL_97:
          v46 = *(_QWORD *)v41;
          v47 = v470[0];
          v48 = (unint64_t)a2[4];
          if (v48)
          {
            v49 = (uint8x8_t)vcnt_s8((int8x8_t)v48);
            v49.i16[0] = vaddlv_u8(v49);
            if (v49.u32[0] > 1uLL)
            {
              v50 = *(_QWORD *)v41;
              if (v46 >= v48)
                v50 = v46 % v48;
            }
            else
            {
              v50 = (v48 - 1) & v46;
            }
            v51 = *(void ***)(*v453 + 8 * v50);
            if (v51)
            {
              v52 = (char *)*v51;
              if (*v51)
              {
                if (v49.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v54 = *((_QWORD *)v52 + 1);
                    if (v54 == v46)
                    {
                      if (*((_QWORD *)v52 + 2) == v46)
                        goto LABEL_192;
                    }
                    else if ((v54 & (v48 - 1)) != v50)
                    {
                      goto LABEL_117;
                    }
                    v52 = *(char **)v52;
                    if (!v52)
                      goto LABEL_117;
                  }
                }
                do
                {
                  v53 = *((_QWORD *)v52 + 1);
                  if (v53 == v46)
                  {
                    if (*((_QWORD *)v52 + 2) == v46)
                      goto LABEL_192;
                  }
                  else
                  {
                    if (v53 >= v48)
                      v53 %= v48;
                    if (v53 != v50)
                      break;
                  }
                  v52 = *(char **)v52;
                }
                while (v52);
              }
            }
LABEL_117:
            if (v49.u32[0] > 1uLL)
            {
              v14 = *(_QWORD *)v41;
              if (v46 >= v48)
                v14 = v46 % v48;
            }
            else
            {
              v14 = (v48 - 1) & v46;
            }
            v55 = *(void ***)(*v453 + 8 * v14);
            if (v55)
            {
              v52 = (char *)*v55;
              if (*v55)
              {
                if (v49.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v57 = *((_QWORD *)v52 + 1);
                    if (v57 == v46)
                    {
                      if (*((_QWORD *)v52 + 2) == v46)
                        goto LABEL_174;
                    }
                    else if ((v57 & (v48 - 1)) != v14)
                    {
                      goto LABEL_136;
                    }
                    v52 = *(char **)v52;
                    if (!v52)
                      goto LABEL_136;
                  }
                }
                do
                {
                  v56 = *((_QWORD *)v52 + 1);
                  if (v56 == v46)
                  {
                    if (*((_QWORD *)v52 + 2) == v46)
                      goto LABEL_174;
                  }
                  else
                  {
                    if (v56 >= v48)
                      v56 %= v48;
                    if (v56 != v14)
                      break;
                  }
                  v52 = *(char **)v52;
                }
                while (v52);
              }
            }
          }
LABEL_136:
          v52 = (char *)operator new(0x40uLL);
          *(_QWORD *)v52 = 0;
          *((_QWORD *)v52 + 1) = v46;
          *((_QWORD *)v52 + 2) = v46;
          *(_OWORD *)(v52 + 24) = 0u;
          *(_OWORD *)(v52 + 40) = 0u;
          *((_DWORD *)v52 + 14) = 1065353216;
          v58 = (float)((unint64_t)a2[6] + 1);
          v59 = *((float *)a2 + 14);
          if (!v48 || (float)(v59 * (float)v48) < v58)
          {
            v60 = (v48 & (v48 - 1)) != 0;
            if (v48 < 3)
              v60 = 1;
            v61 = v60 | (2 * v48);
            v62 = vcvtps_u32_f32(v58 / v59);
            if (v61 <= v62)
              prime = v62;
            else
              prime = v61;
            if (prime == 1)
            {
              prime = 2;
            }
            else if ((prime & (prime - 1)) != 0)
            {
              prime = std::__next_prime(prime);
              v48 = (unint64_t)a2[4];
            }
            if (prime > v48)
              goto LABEL_148;
            if (prime < v48)
            {
              v64 = vcvtps_u32_f32((float)(unint64_t)a2[6] / *((float *)a2 + 14));
              if (v48 < 3 || (v65 = (uint8x8_t)vcnt_s8((int8x8_t)v48), v65.i16[0] = vaddlv_u8(v65), v65.u32[0] > 1uLL))
              {
                v64 = std::__next_prime(v64);
              }
              else
              {
                v66 = 1 << -(char)__clz(v64 - 1);
                if (v64 >= 2)
                  v64 = v66;
              }
              if (prime <= v64)
                prime = v64;
              if (prime < v48)
LABEL_148:
                sub_20ABBC798((uint64_t)v453, prime);
            }
            v48 = (unint64_t)a2[4];
            if ((v48 & (v48 - 1)) != 0)
            {
              if (v46 >= v48)
                v14 = v46 % v48;
              else
                v14 = v46;
            }
            else
            {
              v14 = (v48 - 1) & v46;
            }
          }
          v67 = *v453;
          v68 = *(_QWORD **)(*v453 + 8 * v14);
          if (v68)
          {
            *(_QWORD *)v52 = *v68;
            goto LABEL_172;
          }
          *(_QWORD *)v52 = *v444;
          *v444 = v52;
          *(_QWORD *)(v67 + 8 * v14) = v444;
          if (*(_QWORD *)v52)
          {
            v69 = *(_QWORD *)(*(_QWORD *)v52 + 8);
            if ((v48 & (v48 - 1)) != 0)
            {
              if (v69 >= v48)
                v69 %= v48;
            }
            else
            {
              v69 &= v48 - 1;
            }
            v68 = (_QWORD *)(*v453 + 8 * v69);
LABEL_172:
            *v68 = v52;
          }
          a2[6] = (uint64_t *)((char *)a2[6] + 1);
LABEL_174:
          v14 = vcvtps_u32_f32((float)(unint64_t)a2[8] / *((float *)v52 + 14));
          if (v14 == 1)
          {
            v14 = 2;
          }
          else if ((v14 & (v14 - 1)) != 0)
          {
            v14 = std::__next_prime(v14);
          }
          v70 = *(int8x8_t *)(v52 + 32);
          if (v14 > *(_QWORD *)&v70)
          {
            v35 = (unint64_t)v451;
            goto LABEL_191;
          }
          if (v14 >= *(_QWORD *)&v70)
          {
            v35 = (unint64_t)v451;
          }
          else
          {
            v71 = vcvtps_u32_f32((float)*((unint64_t *)v52 + 6) / *((float *)v52 + 14));
            if (*(_QWORD *)&v70 < 3uLL
              || (v72 = (uint8x8_t)vcnt_s8(v70), v72.i16[0] = vaddlv_u8(v72), v72.u32[0] > 1uLL))
            {
              v71 = std::__next_prime(v71);
            }
            else
            {
              v73 = 1 << -(char)__clz(v71 - 1);
              if (v71 >= 2)
                v71 = v73;
            }
            if (v14 <= v71)
              v14 = v71;
            v39 = v14 >= *(_QWORD *)&v70;
            v35 = (unint64_t)v451;
            if (!v39)
LABEL_191:
              sub_20ABBC798((uint64_t)(v52 + 24), v14);
          }
LABEL_192:
          if (v47 == (void *)-1)
            goto LABEL_204;
          v74 = *(uint64_t **)v35;
          if (!*(_QWORD *)v35)
            goto LABEL_204;
          v75 = (_QWORD *)v35;
          do
          {
            v76 = v74[4];
            v77 = v76 >= (unint64_t)v47;
            if (v76 >= (unint64_t)v47)
              v78 = (uint64_t **)v74;
            else
              v78 = (uint64_t **)(v74 + 1);
            if (v77)
              v75 = v74;
            v74 = *v78;
          }
          while (*v78);
          if (v75 == (_QWORD *)v35 || v75[4] > (unint64_t)v47)
          {
LABEL_204:
            v79 = *(int8x8_t *)(v52 + 32);
            if (v79)
            {
              v80 = *(_QWORD *)(v41 + 32);
              v81 = (uint8x8_t)vcnt_s8(v79);
              v81.i16[0] = vaddlv_u8(v81);
              if (v81.u32[0] > 1uLL)
              {
                v82 = *(_QWORD *)(v41 + 32);
                if (v80 >= *(_QWORD *)&v79)
                  v82 = v80 % *(_QWORD *)&v79;
              }
              else
              {
                v82 = (*(_QWORD *)&v79 - 1) & v80;
              }
              v83 = *(_QWORD **)(*((_QWORD *)v52 + 3) + 8 * v82);
              if (v83)
              {
                v84 = (_QWORD *)*v83;
                if (v84)
                {
                  if (v81.u32[0] < 2uLL)
                  {
                    v85 = *(_QWORD *)&v79 - 1;
                    while (1)
                    {
                      v87 = v84[1];
                      if (v87 == v80)
                      {
                        if (v84[2] == v80)
                          goto LABEL_322;
                      }
                      else if ((v87 & v85) != v82)
                      {
                        goto LABEL_224;
                      }
                      v84 = (_QWORD *)*v84;
                      if (!v84)
                        goto LABEL_224;
                    }
                  }
                  do
                  {
                    v86 = v84[1];
                    if (v86 == v80)
                    {
                      if (v84[2] == v80)
                      {
LABEL_322:
                        v88 = (std::__shared_weak_count *)v84[4];
                        if (!v88)
                          goto LABEL_96;
                        v146 = (unint64_t *)&v88->__shared_owners_;
                        do
                          v147 = __ldxr(v146);
                        while (__stxr(v147 + 1, v146));
LABEL_373:
                        v163 = (unint64_t *)&v88->__shared_owners_;
                        do
                          v164 = __ldaxr(v163);
                        while (__stlxr(v164 - 1, v163));
                        if (!v164)
                        {
                          ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                          std::__shared_weak_count::__release_weak(v88);
                        }
                        goto LABEL_96;
                      }
                    }
                    else
                    {
                      if (v86 >= *(_QWORD *)&v79)
                        v86 %= *(_QWORD *)&v79;
                      if (v86 != v82)
                        break;
                    }
                    v84 = (_QWORD *)*v84;
                  }
                  while (v84);
                }
              }
            }
LABEL_224:
            v14 = operator new();
            *(_OWORD *)v14 = 0u;
            *(_OWORD *)(v14 + 16) = 0u;
            *(_OWORD *)(v14 + 32) = 0u;
            *(_OWORD *)(v14 + 48) = 0u;
            *(_QWORD *)(v14 + 64) = 0;
            *(_BYTE *)(v14 + 72) = 1;
            *(_BYTE *)(v14 + 80) = 0;
            *(_QWORD *)(v14 + 88) = v453;
            v88 = (std::__shared_weak_count *)operator new();
            v88->__shared_owners_ = 0;
            v89 = (unint64_t *)&v88->__shared_owners_;
            v88->__vftable = (std::__shared_weak_count_vtbl *)&off_24C380578;
            v88->__shared_weak_owners_ = 0;
            v88[1].__vftable = (std::__shared_weak_count_vtbl *)v14;
            v90 = *(std::__shared_weak_count **)(v14 + 8);
            if (v90)
            {
              if (v90->__shared_owners_ == -1)
              {
                do
                  v91 = __ldxr(v89);
                while (__stxr(v91 + 1, v89));
                p_shared_weak_owners = (unint64_t *)&v88->__shared_weak_owners_;
                do
                  v93 = __ldxr(p_shared_weak_owners);
                while (__stxr(v93 + 1, p_shared_weak_owners));
                *(_QWORD *)v14 = v14;
                *(_QWORD *)(v14 + 8) = v88;
                std::__shared_weak_count::__release_weak(v90);
                goto LABEL_234;
              }
              goto LABEL_236;
            }
            do
              v94 = __ldxr(v89);
            while (__stxr(v94 + 1, v89));
            v95 = (unint64_t *)&v88->__shared_weak_owners_;
            do
              v96 = __ldxr(v95);
            while (__stxr(v96 + 1, v95));
            *(_QWORD *)v14 = v14;
            *(_QWORD *)(v14 + 8) = v88;
            do
LABEL_234:
              v97 = __ldaxr(v89);
            while (__stlxr(v97 - 1, v89));
            if (v97)
            {
LABEL_236:
              if (v47 != (void *)-1)
                goto LABEL_237;
LABEL_239:
              v98 = a2[1];
              if (a2[2])
              {
                v99 = a2[1];
                v100 = (_QWORD *)v35;
                if (v98)
                {
                  do
                  {
                    v101 = v99;
                    v99 = (uint64_t *)v99[1];
                  }
                  while (v99);
                }
                else
                {
                  do
                  {
                    v101 = (uint64_t *)v100[2];
                    v337 = *v101 == (_QWORD)v100;
                    v100 = v101;
                  }
                  while (v337);
                }
                v47 = (void *)(v101[4] + 1);
              }
              else
              {
                v47 = 0;
              }
            }
            else
            {
              ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
              std::__shared_weak_count::__release_weak(v88);
              if (v47 == (void *)-1)
                goto LABEL_239;
LABEL_237:
              v98 = *(uint64_t **)v35;
            }
            *(_QWORD *)(v14 + 16) = v47;
            do
              v108 = __ldxr(v89);
            while (__stxr(v108 + 1, v89));
LABEL_256:
            v109 = (uint64_t **)v35;
            if (v98)
            {
              while (1)
              {
                v35 = (unint64_t)v98;
                v110 = v98[4];
                if ((unint64_t)v47 < v110)
                {
                  v98 = *(uint64_t **)v35;
                  goto LABEL_256;
                }
                if (v110 >= (unint64_t)v47)
                  break;
                v98 = *(uint64_t **)(v35 + 8);
                if (!v98)
                {
                  v109 = (uint64_t **)(v35 + 8);
                  goto LABEL_261;
                }
              }
              do
                v114 = __ldaxr(v89);
              while (__stlxr(v114 - 1, v89));
              if (!v114)
              {
                ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                std::__shared_weak_count::__release_weak(v88);
              }
              a2 = v448;
            }
            else
            {
LABEL_261:
              v111 = (uint64_t *)operator new(0x38uLL);
              v111[4] = (uint64_t)v47;
              v111[5] = v14;
              v111[6] = (uint64_t)v88;
              *v111 = 0;
              v111[1] = 0;
              v111[2] = v35;
              *v109 = v111;
              v112 = (uint64_t *)**v448;
              if (v112)
              {
                *v448 = v112;
                v113 = *v109;
              }
              else
              {
                v113 = v111;
              }
              sub_20AB96C04(v448[1], v113);
              v448[2] = (uint64_t *)((char *)v448[2] + 1);
              a2 = v448;
            }
          }
          else
          {
            v14 = v75[5];
            v88 = (std::__shared_weak_count *)v75[6];
            if (v88)
            {
              v102 = (unint64_t *)&v88->__shared_owners_;
              do
                v103 = __ldxr(v102);
              while (__stxr(v103 + 1, v102));
            }
            v104 = *(int8x8_t *)(v52 + 32);
            if (v104)
            {
              v105 = *(_QWORD *)(v41 + 32);
              v106 = (uint8x8_t)vcnt_s8(v104);
              v106.i16[0] = vaddlv_u8(v106);
              if (v106.u32[0] > 1uLL)
              {
                v107 = *(_QWORD *)(v41 + 32);
                if (v105 >= *(_QWORD *)&v104)
                  v107 = v105 % *(_QWORD *)&v104;
              }
              else
              {
                v107 = (*(_QWORD *)&v104 - 1) & v105;
              }
              v148 = *(_QWORD **)(*((_QWORD *)v52 + 3) + 8 * v107);
              if (v148)
              {
                v149 = (_QWORD *)*v148;
                if (v149)
                {
                  if (v106.u32[0] < 2uLL)
                  {
                    v150 = *(_QWORD *)&v104 - 1;
                    v35 = (unint64_t)v451;
                    while (1)
                    {
                      v151 = v149[1];
                      if (v151 == v105)
                      {
                        if (v149[2] == v105)
                          goto LABEL_385;
                      }
                      else if ((v151 & v150) != v107)
                      {
                        goto LABEL_269;
                      }
                      v149 = (_QWORD *)*v149;
                      if (!v149)
                        goto LABEL_269;
                    }
                  }
                  v35 = (unint64_t)v451;
                  do
                  {
                    v165 = v149[1];
                    if (v165 == v105)
                    {
                      if (v149[2] == v105)
                      {
LABEL_385:
                        v166 = *(_QWORD *)(v14 + 16);
                        v167 = *(_QWORD *)(v149[3] + 16);
                        if (v166 == v167)
                          goto LABEL_372;
                        v168 = *(uint64_t **)v35;
                        if (!*(_QWORD *)v35)
                          goto LABEL_360;
                        v169 = (_QWORD *)v35;
                        v170 = *(uint64_t **)v35;
                        do
                        {
                          v171 = v170[4];
                          v172 = v171 >= v166;
                          if (v171 >= v166)
                            v173 = (uint64_t **)v170;
                          else
                            v173 = (uint64_t **)(v170 + 1);
                          if (v172)
                            v169 = v170;
                          v170 = *v173;
                        }
                        while (*v173);
                        if (v169 == (_QWORD *)v35 || v169[4] > v166)
                          goto LABEL_360;
                        v174 = (uint64_t *)v35;
                        do
                        {
                          v175 = v168[4];
                          v176 = v175 >= v167;
                          if (v175 >= v167)
                            v177 = (uint64_t **)v168;
                          else
                            v177 = (uint64_t **)(v168 + 1);
                          if (v176)
                            v174 = v168;
                          v168 = *v177;
                        }
                        while (*v177);
                        if (v174 == (uint64_t *)v35 || v174[4] > v167)
                          goto LABEL_360;
                        v178 = v169[5];
                        v180 = *(unint64_t **)(v178 + 24);
                        v179 = *(unint64_t **)(v178 + 32);
                        v181 = v174[5];
                        v14 = *(_QWORD *)(v181 + 24);
                        v182 = *(_QWORD **)(v181 + 32);
                        if (v180 == v179)
                        {
                          v183 = v180;
                        }
                        else
                        {
                          v183 = v179;
                          v184 = *(_QWORD *)(v181 + 32);
                          v185 = v180;
                          v186 = v180;
                          do
                          {
                            v187 = v184 - v14;
                            v337 = v184 == v14;
                            v184 = *(_QWORD *)(v181 + 24);
                            if (!v337)
                            {
                              v188 = *v186;
                              v189 = 0xCCCCCCCCCCCCCCCDLL * (v187 >> 3);
                              v190 = *(_QWORD **)(v181 + 24);
                              do
                              {
                                v191 = v189 >> 1;
                                v192 = &v190[5 * (v189 >> 1)];
                                v194 = *v192;
                                v193 = v192 + 5;
                                v189 += ~(v189 >> 1);
                                if (v194 < v188)
                                  v190 = v193;
                                else
                                  v189 = v191;
                              }
                              while (v189);
                              v184 = *(_QWORD *)(v181 + 32);
                              if (v190 != v182)
                              {
                                v184 = *(_QWORD *)(v181 + 32);
                                if (*v190 == v188)
                                  goto LABEL_360;
                              }
                            }
                            v186 += 5;
                          }
                          while (v186 != v183);
                          v180 = v185;
                        }
                        v195 = (uint64_t)v182 - v14;
                        if (v182 == (_QWORD *)v14)
                        {
LABEL_558:
                          if (*(_BYTE *)(v181 + 80))
                          {
                            v260 = v169[5];
                            if (0xCCCCCCCCCCCCCCCDLL * (v195 >> 3) > 0xCCCCCCCCCCCCCCCDLL * (v183 - v180)
                              || !*(_BYTE *)(v260 + 80))
                            {
                              if (v260 != v181)
                              {
                                v261 = *(_OWORD *)(v181 + 48);
                                *(_QWORD *)(v260 + 64) = *(_QWORD *)(v181 + 64);
                                *(_OWORD *)(v260 + 48) = v261;
                              }
                              *(_BYTE *)(v260 + 72) = *(_BYTE *)(v181 + 72);
                              *(_BYTE *)(v260 + 80) = 1;
                            }
                          }
                          v262 = (uint64_t *)v174[1];
                          v263 = v174;
                          if (v262)
                          {
                            do
                            {
                              v264 = v262;
                              v262 = (uint64_t *)*v262;
                            }
                            while (v262);
                          }
                          else
                          {
                            do
                            {
                              v264 = (uint64_t *)v263[2];
                              v337 = *v264 == (_QWORD)v263;
                              v263 = v264;
                            }
                            while (!v337);
                          }
                          if (*a2 == v174)
                            *a2 = v264;
                          v265 = a2[1];
                          a2[2] = (uint64_t *)((char *)a2[2] - 1);
                          sub_20ABBC9C4(v265, v174);
                          v266 = (std::__shared_weak_count *)v174[6];
                          if (v266)
                          {
                            v267 = (unint64_t *)&v266->__shared_owners_;
                            do
                              v268 = __ldaxr(v267);
                            while (__stlxr(v268 - 1, v267));
                            if (!v268)
                            {
                              ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
                              std::__shared_weak_count::__release_weak(v266);
                            }
                          }
                          operator delete(v174);
                          v157 = (std::__shared_weak_count *)v169[6];
                          if (v157)
                          {
                            v269 = (unint64_t *)&v157->__shared_owners_;
                            do
                              v270 = __ldxr(v269);
                            while (__stxr(v270 + 1, v269));
                          }
                          goto LABEL_361;
                        }
                        v434 = (uint64_t)v182 - v14;
                        v435 = v180;
                        v446 = *(_QWORD **)(v181 + 32);
LABEL_426:
                        v196 = v169[5];
                        v197 = *(_QWORD *)v14;
                        v198 = *(void ***)(v196 + 24);
                        v199 = *(void ***)(v196 + 32);
                        if (v199 == v198)
                          goto LABEL_437;
                        v200 = 0xCCCCCCCCCCCCCCCDLL * (v199 - v198);
                        do
                        {
                          v201 = v200 >> 1;
                          v202 = (unint64_t *)&v198[5 * (v200 >> 1)];
                          v204 = *v202;
                          v203 = (void **)(v202 + 5);
                          v200 += ~(v200 >> 1);
                          if (v204 < v197)
                            v198 = v203;
                          else
                            v200 = v201;
                        }
                        while (v200);
                        if (v198 == v199 || *v198 != (void *)v197)
                        {
LABEL_437:
                          v208 = (unint64_t)a2[4];
                          if ((v208 & (v208 - 1)) != 0)
                          {
                            v210 = *(_QWORD *)v14;
                            if (v197 >= v208)
                              v210 = v197 % v208;
                            v209 = *(_QWORD **)(*v453 + 8 * v210);
                            do
                            {
                              do
                                v209 = (_QWORD *)*v209;
                              while (v209[1] != v197);
                            }
                            while (v209[2] != v197);
                          }
                          else
                          {
                            v209 = *(_QWORD **)(*v453 + 8 * ((v208 - 1) & v197));
                            do
                            {
                              do
                                v209 = (_QWORD *)*v209;
                              while (v209[1] != v197);
                            }
                            while (v209[2] != v197);
                          }
                          v211 = (int8x8_t)v209[4];
                          if (v211)
                          {
                            v212 = *(_QWORD *)(v14 + 32);
                            v213 = (uint8x8_t)vcnt_s8(v211);
                            v213.i16[0] = vaddlv_u8(v213);
                            if (v213.u32[0] > 1uLL)
                            {
                              v214 = *(_QWORD *)(v14 + 32);
                              if (*(_QWORD *)&v211 <= v212)
                                v214 = v212 % *(_QWORD *)&v211;
                            }
                            else
                            {
                              v214 = (*(_QWORD *)&v211 - 1) & v212;
                            }
                            v215 = *(_QWORD **)(v209[3] + 8 * v214);
                            if (v215)
                            {
                              v215 = (_QWORD *)*v215;
                              if (v215)
                              {
                                if (v213.u32[0] < 2uLL)
                                {
                                  v216 = *(_QWORD *)&v211 - 1;
                                  while (1)
                                  {
                                    v218 = v215[1];
                                    if (v218 == v212)
                                    {
                                      if (v215[2] == v212)
                                        goto LABEL_468;
                                    }
                                    else if ((v218 & v216) != v214)
                                    {
                                      goto LABEL_467;
                                    }
                                    v215 = (_QWORD *)*v215;
                                    if (!v215)
                                      goto LABEL_468;
                                  }
                                }
                                do
                                {
                                  v217 = v215[1];
                                  if (v217 == v212)
                                  {
                                    if (v215[2] == v212)
                                      break;
                                  }
                                  else
                                  {
                                    if (v217 >= *(_QWORD *)&v211)
                                      v217 %= *(_QWORD *)&v211;
                                    if (v217 != v214)
                                      goto LABEL_467;
                                  }
                                  v215 = (_QWORD *)*v215;
                                }
                                while (v215);
                              }
                            }
                          }
                          else
                          {
LABEL_467:
                            v215 = 0;
                          }
LABEL_468:
                          v219 = v169[6];
                          if (v219)
                          {
                            v220 = (unint64_t *)(v219 + 8);
                            do
                              v221 = __ldxr(v220);
                            while (__stxr(v221 + 1, v220));
                          }
                          v222 = (std::__shared_weak_count *)v215[4];
                          v215[3] = v196;
                          v215[4] = v219;
                          if (v222)
                          {
                            v223 = (unint64_t *)&v222->__shared_owners_;
                            do
                              v224 = __ldaxr(v223);
                            while (__stlxr(v224 - 1, v223));
                            if (!v224)
                            {
                              ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
                              std::__shared_weak_count::__release_weak(v222);
                            }
                          }
                          v225 = v169[5];
                          v226 = *(void **)v14;
                          __dst = *(std::string *)v14;
                          v469 = *(_OWORD *)(v14 + 24);
                          v229 = *(char **)(v225 + 24);
                          v228 = *(char **)(v225 + 32);
                          v227 = (char **)(v225 + 24);
                          if (v228 != v229)
                          {
                            v230 = 0xCCCCCCCCCCCCCCCDLL * ((v228 - v229) >> 3);
                            do
                            {
                              v231 = v230 >> 1;
                              v232 = (unint64_t *)&v229[40 * (v230 >> 1)];
                              v234 = *v232;
                              v233 = (char *)(v232 + 5);
                              v230 += ~(v230 >> 1);
                              if (v234 < (unint64_t)v226)
                                v229 = v233;
                              else
                                v230 = v231;
                            }
                            while (v230);
                            v235 = v229;
                            v229 = v228;
                            v228 = v235;
                          }
                          if (v229 == v228 || *(void **)v228 != v226)
                            sub_20ABCB734(v227, v228, (uint64_t *)&__dst);
LABEL_424:
                          v182 = v446;
                          goto LABEL_425;
                        }
                        v205 = (int8x8_t)a2[4];
                        if (!*(_QWORD *)&v205)
                          goto LABEL_425;
                        v206 = (uint8x8_t)vcnt_s8(v205);
                        v206.i16[0] = vaddlv_u8(v206);
                        if (v206.u32[0] > 1uLL)
                        {
                          v207 = *(_QWORD *)v14;
                          if (v197 >= *(_QWORD *)&v205)
                            v207 = v197 % *(_QWORD *)&v205;
                        }
                        else
                        {
                          v207 = (*(_QWORD *)&v205 - 1) & v197;
                        }
                        v236 = *(_QWORD **)(*v453 + 8 * v207);
                        if (!v236)
                          goto LABEL_425;
                        v237 = (_QWORD *)*v236;
                        if (!v237)
                          goto LABEL_425;
                        v238 = *(_QWORD *)(v14 + 32);
                        if (v206.u32[0] < 2uLL)
                        {
                          v239 = *(_QWORD *)&v205 - 1;
                          while (1)
                          {
                            v241 = v237[1];
                            if (v241 == v197)
                            {
                              if (v237[2] == v197)
                                goto LABEL_504;
                            }
                            else if ((v241 & v239) != v207)
                            {
                              goto LABEL_425;
                            }
                            v237 = (_QWORD *)*v237;
                            if (!v237)
                              goto LABEL_425;
                          }
                        }
                        while (1)
                        {
                          v240 = v237[1];
                          if (v240 == v197)
                          {
                            if (v237[2] == v197)
                            {
LABEL_504:
                              v242 = (int8x8_t)v237[4];
                              if (v242)
                              {
                                v243 = (uint8x8_t)vcnt_s8(v242);
                                v243.i16[0] = vaddlv_u8(v243);
                                if (v243.u32[0] > 1uLL)
                                {
                                  v244 = *(_QWORD *)(v14 + 32);
                                  if (*(_QWORD *)&v242 <= v238)
                                    v244 = v238 % *(_QWORD *)&v242;
                                }
                                else
                                {
                                  v244 = (*(_QWORD *)&v242 - 1) & v238;
                                }
                                v245 = v237[3];
                                v246 = *(_QWORD ***)(v245 + 8 * v244);
                                if (v246)
                                {
                                  v247 = *v246;
                                  if (*v246)
                                  {
                                    v248 = *(_QWORD *)&v242 - 1;
                                    if (v243.u32[0] < 2uLL)
                                    {
                                      while (1)
                                      {
                                        v249 = v247[1];
                                        if (v249 == v238)
                                        {
                                          if (v247[2] == v238)
                                            goto LABEL_525;
                                        }
                                        else if ((v249 & v248) != v244)
                                        {
                                          goto LABEL_425;
                                        }
                                        v247 = (_QWORD *)*v247;
                                        if (!v247)
                                          goto LABEL_425;
                                      }
                                    }
                                    do
                                    {
                                      v250 = v247[1];
                                      if (v250 == v238)
                                      {
                                        if (v247[2] == v238)
                                        {
LABEL_525:
                                          if (v243.u32[0] > 1uLL)
                                          {
                                            if (v238 >= *(_QWORD *)&v242)
                                              v238 %= *(_QWORD *)&v242;
                                          }
                                          else
                                          {
                                            v238 &= v248;
                                          }
                                          v251 = *(_QWORD **)(v245 + 8 * v238);
                                          do
                                          {
                                            v252 = v251;
                                            v251 = (_QWORD *)*v251;
                                          }
                                          while (v251 != v247);
                                          if (v252 == v237 + 5)
                                            goto LABEL_866;
                                          v253 = v252[1];
                                          if (v243.u32[0] > 1uLL)
                                          {
                                            if (v253 >= *(_QWORD *)&v242)
                                              v253 %= *(_QWORD *)&v242;
                                          }
                                          else
                                          {
                                            v253 &= v248;
                                          }
                                          if (v253 != v238)
                                          {
LABEL_866:
                                            if (!*v247)
                                              goto LABEL_543;
                                            v254 = *(_QWORD *)(*v247 + 8);
                                            if (v243.u32[0] > 1uLL)
                                            {
                                              if (v254 >= *(_QWORD *)&v242)
                                                v254 %= *(_QWORD *)&v242;
                                            }
                                            else
                                            {
                                              v254 &= v248;
                                            }
                                            a2 = v448;
                                            v35 = (unint64_t)v451;
                                            if (v254 != v238)
LABEL_543:
                                              *(_QWORD *)(v245 + 8 * v238) = 0;
                                          }
                                          v255 = *v247;
                                          if (*v247)
                                          {
                                            v256 = *(_QWORD *)(v255 + 8);
                                            if (v243.u32[0] > 1uLL)
                                            {
                                              if (v256 >= *(_QWORD *)&v242)
                                                v256 %= *(_QWORD *)&v242;
                                            }
                                            else
                                            {
                                              v256 &= v248;
                                            }
                                            if (v256 != v238)
                                            {
                                              *(_QWORD *)(v237[3] + 8 * v256) = v252;
                                              v255 = *v247;
                                            }
                                          }
                                          *v252 = v255;
                                          *v247 = 0;
                                          --v237[6];
                                          v257 = (std::__shared_weak_count *)v247[4];
                                          if (v257)
                                          {
                                            v258 = (unint64_t *)&v257->__shared_owners_;
                                            do
                                              v259 = __ldaxr(v258);
                                            while (__stlxr(v259 - 1, v258));
                                            if (!v259)
                                            {
                                              v433 = v257;
                                              ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
                                              std::__shared_weak_count::__release_weak(v433);
                                            }
                                          }
                                          operator delete(v247);
                                          goto LABEL_424;
                                        }
                                      }
                                      else
                                      {
                                        if (v250 >= *(_QWORD *)&v242)
                                          v250 %= *(_QWORD *)&v242;
                                        if (v250 != v244)
                                          break;
                                      }
                                      v247 = (_QWORD *)*v247;
                                    }
                                    while (v247);
                                  }
                                }
                              }
LABEL_425:
                              v14 += 40;
                              if ((_QWORD *)v14 == v182)
                              {
                                v181 = v174[5];
                                v195 = v434;
                                v180 = v435;
                                goto LABEL_558;
                              }
                              goto LABEL_426;
                            }
                          }
                          else
                          {
                            if (v240 >= *(_QWORD *)&v205)
                              v240 %= *(_QWORD *)&v205;
                            if (v240 != v207)
                              goto LABEL_425;
                          }
                          v237 = (_QWORD *)*v237;
                          if (!v237)
                            goto LABEL_425;
                        }
                      }
                    }
                    else
                    {
                      if (v165 >= *(_QWORD *)&v104)
                        v165 %= *(_QWORD *)&v104;
                      if (v165 != v107)
                        break;
                    }
                    v149 = (_QWORD *)*v149;
                  }
                  while (v149);
                }
              }
            }
          }
LABEL_269:
          v115 = *((_QWORD *)v52 + 2);
          __dst.__r_.__value_.__r.__words[0] = v115;
          *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = *(_OWORD *)(v41 + 8);
          v469 = *(_OWORD *)(v41 + 24);
          v117 = *(char **)(v14 + 24);
          v116 = *(char **)(v14 + 32);
          if (v116 != v117)
          {
            v118 = 0xCCCCCCCCCCCCCCCDLL * ((v116 - v117) >> 3);
            do
            {
              v119 = v118 >> 1;
              v120 = (std::string::size_type *)&v117[40 * (v118 >> 1)];
              v122 = *v120;
              v121 = (char *)(v120 + 5);
              v118 += ~(v118 >> 1);
              if (v122 < v115)
                v117 = v121;
              else
                v118 = v119;
            }
            while (v118);
            v123 = v117;
            v117 = *(char **)(v14 + 32);
            v116 = v123;
          }
          v35 = (unint64_t)v451;
          if (v117 != v116 && *(_QWORD *)v116 == v115
            || *(char **)(v14 + 32) == sub_20ABCB734((char **)(v14 + 24), v116, (uint64_t *)&__dst))
          {
            goto LABEL_360;
          }
          if (v88)
          {
            v124 = (unint64_t *)&v88->__shared_owners_;
            do
              v125 = __ldxr(v124);
            while (__stxr(v125 + 1, v124));
          }
          v126 = (uint64_t *)(v52 + 24);
          v127 = *(_QWORD *)(v41 + 32);
          *(_QWORD *)&v128 = v14;
          *((_QWORD *)&v128 + 1) = v88;
          v129 = *((_QWORD *)v52 + 4);
          if (!v129)
            goto LABEL_297;
          v130 = (uint8x8_t)vcnt_s8((int8x8_t)v129);
          v130.i16[0] = vaddlv_u8(v130);
          if (v130.u32[0] > 1uLL)
          {
            v35 = *(_QWORD *)(v41 + 32);
            if (v127 >= v129)
              v35 = v127 % v129;
          }
          else
          {
            v35 = (v129 - 1) & v127;
          }
          v131 = *(_QWORD **)(*v126 + 8 * v35);
          if (!v131 || (v132 = (_QWORD *)*v131) == 0)
          {
LABEL_297:
            v445 = v128;
            v134 = (char *)operator new(0x28uLL);
            *(_QWORD *)v134 = 0;
            *((_QWORD *)v134 + 1) = v127;
            *((_QWORD *)v134 + 2) = v127;
            *(_OWORD *)(v134 + 24) = v445;
            v135 = (float)(unint64_t)(*((_QWORD *)v52 + 6) + 1);
            v136 = *((float *)v52 + 14);
            if (!v129 || (float)(v136 * (float)v129) < v135)
            {
              v137 = (v129 & (v129 - 1)) != 0;
              if (v129 < 3)
                v137 = 1;
              v138 = v137 | (2 * v129);
              v139 = vcvtps_u32_f32(v135 / v136);
              if (v138 <= v139)
                v140 = v139;
              else
                v140 = v138;
              if (v140 == 1)
              {
                v140 = 2;
              }
              else if ((v140 & (v140 - 1)) != 0)
              {
                v140 = std::__next_prime(v140);
              }
              v142 = *(int8x8_t *)(v52 + 32);
              if (v140 > *(_QWORD *)&v142)
                goto LABEL_315;
              if (v140 < *(_QWORD *)&v142)
              {
                v143 = vcvtps_u32_f32((float)*((unint64_t *)v52 + 6) / *((float *)v52 + 14));
                if (*(_QWORD *)&v142 < 3uLL
                  || (v144 = (uint8x8_t)vcnt_s8(v142), v144.i16[0] = vaddlv_u8(v144), v144.u32[0] > 1uLL))
                {
                  v143 = std::__next_prime(v143);
                }
                else
                {
                  v145 = 1 << -(char)__clz(v143 - 1);
                  if (v143 >= 2)
                    v143 = v145;
                }
                if (v140 <= v143)
                  v140 = v143;
                if (v140 < *(_QWORD *)&v142)
LABEL_315:
                  sub_20ABBC798((uint64_t)(v52 + 24), v140);
              }
              v129 = *((_QWORD *)v52 + 4);
              if ((v129 & (v129 - 1)) != 0)
              {
                if (v127 >= v129)
                  v35 = v127 % v129;
                else
                  v35 = v127;
              }
              else
              {
                v35 = (v129 - 1) & v127;
              }
            }
            v152 = *v126;
            v153 = *(_QWORD **)(*v126 + 8 * v35);
            if (v153)
            {
              *(_QWORD *)v134 = *v153;
              v35 = (unint64_t)v451;
              goto LABEL_354;
            }
            *(_QWORD *)v134 = *((_QWORD *)v52 + 5);
            *((_QWORD *)v52 + 5) = v134;
            *(_QWORD *)(v152 + 8 * v35) = v52 + 40;
            v35 = (unint64_t)v451;
            if (*(_QWORD *)v134)
            {
              v154 = *(_QWORD *)(*(_QWORD *)v134 + 8);
              if ((v129 & (v129 - 1)) != 0)
              {
                if (v154 >= v129)
                  v154 %= v129;
              }
              else
              {
                v154 &= v129 - 1;
              }
              v153 = (_QWORD *)(*v126 + 8 * v154);
LABEL_354:
              *v153 = v134;
            }
            v14 = 0;
            ++*((_QWORD *)v52 + 6);
            goto LABEL_359;
          }
          if (v130.u32[0] < 2uLL)
          {
            while (1)
            {
              v141 = v132[1];
              if (v141 == v127)
              {
                if (v132[2] == v127)
                  goto LABEL_310;
              }
              else if ((v141 & (v129 - 1)) != v35)
              {
                goto LABEL_297;
              }
              v132 = (_QWORD *)*v132;
              if (!v132)
                goto LABEL_297;
            }
          }
          while (1)
          {
            v133 = v132[1];
            if (v133 == v127)
            {
              if (v132[2] == v127)
              {
LABEL_310:
                v14 = 1;
                v35 = (unint64_t)v451;
                if (!v88)
                  goto LABEL_359;
                v155 = (unint64_t *)&v88->__shared_owners_;
                do
                  v156 = __ldaxr(v155);
                while (__stlxr(v156 - 1, v155));
                if (v156)
                {
LABEL_359:
                  if ((v14 & 1) != 0)
                    goto LABEL_360;
                  if (v88)
                  {
                    v159 = (unint64_t *)&v88->__shared_owners_;
                    do
                      v160 = __ldxr(v159);
                    while (__stxr(v160 + 1, v159));
                    v158 = v88;
                    goto LABEL_368;
                  }
LABEL_96:
                  v41 += 40;
                  if (v41 == v449)
                    goto LABEL_87;
                  goto LABEL_97;
                }
                ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                std::__shared_weak_count::__release_weak(v88);
LABEL_360:
                v157 = 0;
LABEL_361:
                v158 = v88;
                v88 = v157;
                if (v158)
                {
LABEL_368:
                  v161 = (unint64_t *)&v158->__shared_owners_;
                  do
                    v162 = __ldaxr(v161);
                  while (__stlxr(v162 - 1, v161));
                  if (!v162)
                  {
                    ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
                    std::__shared_weak_count::__release_weak(v158);
                  }
                }
LABEL_372:
                if (!v88)
                  goto LABEL_96;
                goto LABEL_373;
              }
            }
            else
            {
              if (v133 >= v129)
                v133 %= v129;
              if (v133 != v35)
                goto LABEL_297;
            }
            v132 = (_QWORD *)*v132;
            if (!v132)
              goto LABEL_297;
          }
        }
        *(_QWORD *)&v475.st_dev = v436;
        *(_QWORD *)((char *)&v475.st_dev + *(_QWORD *)(v436 - 24)) = v437;
        MEMORY[0x20BD2CD80](&v475.st_uid);
        std::istream::~istream();
        MEMORY[0x20BD2D008](v476);
        v316 = v473;
        if (!v473)
          goto LABEL_61;
        if (*((char *)v473 + 23) < 0)
          operator delete(*v473);
        v30 = v316;
LABEL_60:
        MEMORY[0x20BD2D02C](v30, 0x1012C40EC159624);
LABEL_61:
        v31 = *(std::string **)(v5 + 8);
        if (v31)
        {
          do
          {
            v32 = v31;
            v31 = (std::string *)v31->__r_.__value_.__r.__words[0];
          }
          while (v31);
        }
        else
        {
          do
          {
            v32 = *(std::string **)(v5 + 16);
            v337 = v32->__r_.__value_.__r.__words[0] == v5;
            v5 = (std::string::size_type)v32;
          }
          while (!v337);
        }
        v5 = (std::string::size_type)v32;
        if (v32 == (std::string *)&v456.__r_.__value_.__r.__words[1])
        {
          v439 = 1;
          v319 = v458[0];
          if (!v458[0])
            goto LABEL_662;
          goto LABEL_856;
        }
      }
    }
  }
LABEL_661:
  v319 = v458[0];
  if (!v458[0])
    goto LABEL_662;
  do
  {
LABEL_856:
    v431 = (_QWORD *)*v319;
    v432 = (void *)v319[3];
    if (v432)
    {
      v319[4] = v432;
      operator delete(v432);
    }
    operator delete(v319);
    v319 = v431;
  }
  while (v431);
LABEL_662:
  v320 = v457[0];
  v457[0] = 0;
  if (v320)
    operator delete(v320);
  if (!v439)
  {
    v325 = 0;
    goto LABEL_825;
  }
  HIBYTE(v454[2]) = 16;
  strcpy((char *)v454, "scene-points.txt");
  v321 = (__int128 *)a1[12];
  v322 = operator new();
  v323 = v322;
  if (*((char *)v321 + 23) < 0)
  {
    sub_20AB88C14((_BYTE *)v322, *(void **)v321, *((_QWORD *)v321 + 1));
  }
  else
  {
    v324 = *v321;
    *(_QWORD *)(v322 + 16) = *((_QWORD *)v321 + 2);
    *(_OWORD *)v322 = v324;
  }
  if (SHIBYTE(v454[2]) >= 0)
    v326 = (const std::string::value_type *)v454;
  else
    v326 = (const std::string::value_type *)v454[0];
  if (SHIBYTE(v454[2]) >= 0)
    v327 = HIBYTE(v454[2]);
  else
    v327 = (std::string::size_type)v454[1];
  std::string::append((std::string *)v323, v326, v327);
  v328 = operator new();
  v329 = (const char *)v328;
  if (*(char *)(v323 + 23) < 0)
  {
    sub_20AB88C14((_BYTE *)v328, *(void **)v323, *(_QWORD *)(v323 + 8));
    v330 = *(char *)(v323 + 23);
    v455 = v329;
    if (v330 < 0)
      operator delete(*(void **)v323);
  }
  else
  {
    *(_OWORD *)v328 = *(_OWORD *)v323;
    *(_QWORD *)(v328 + 16) = *(_QWORD *)(v323 + 16);
    v455 = (const char *)v328;
  }
  MEMORY[0x20BD2D02C](v323, 0x1012C40EC159624);
  cva::adp::io::openInputStream(&v455, &v475);
  v325 = v475.st_qspare[1];
  if (v475.st_qspare[1])
  {
    __dst.__r_.__value_.__r.__words[0] = 0;
    __p[0] = 0;
    __p[1] = 0;
    v461 = 0;
    LOBYTE(v462) = 1;
    if ((*((_BYTE *)&v475.st_atimespec.tv_sec + *(_QWORD *)(*(_QWORD *)&v475.st_dev - 24)) & 5) == 0)
    {
      v417 = a2 + 1;
      do
      {
        v418 = (uint64_t *)MEMORY[0x20BD2CE04](&v475, &__dst);
        sub_20ABCB44C(v418, (uint64_t)__p);
        v419 = (_QWORD *)*v417;
        if (*v417)
        {
          v420 = v417;
          do
          {
            v421 = v419[4];
            v422 = v421 >= __dst.__r_.__value_.__r.__words[0];
            if (v421 >= __dst.__r_.__value_.__r.__words[0])
              v423 = v419;
            else
              v423 = v419 + 1;
            if (v422)
              v420 = v419;
            v419 = (_QWORD *)*v423;
          }
          while (*v423);
          if (v420 != v417 && v420[4] <= __dst.__r_.__value_.__r.__words[0])
          {
            v424 = v420[5];
            v425 = (std::__shared_weak_count *)v420[6];
            if (v425)
            {
              v426 = (unint64_t *)&v425->__shared_owners_;
              do
                v427 = __ldxr(v426);
              while (__stxr(v427 + 1, v426));
            }
            if (v424)
            {
              v428 = v462;
              *(_OWORD *)(v424 + 48) = *(_OWORD *)__p;
              *(_QWORD *)(v424 + 64) = v461;
              *(_BYTE *)(v424 + 72) = v428;
              *(_BYTE *)(v424 + 80) = 1;
            }
            if (v425)
            {
              v429 = (unint64_t *)&v425->__shared_owners_;
              do
                v430 = __ldaxr(v429);
              while (__stlxr(v430 - 1, v429));
              if (!v430)
              {
                ((void (*)(std::__shared_weak_count *))v425->__on_zero_shared)(v425);
                std::__shared_weak_count::__release_weak(v425);
              }
            }
          }
        }
      }
      while ((*((_BYTE *)&v475.st_atimespec.tv_sec + *(_QWORD *)(*(_QWORD *)&v475.st_dev - 24)) & 5) == 0);
    }
  }
  *(_QWORD *)&v475.st_dev = *MEMORY[0x24BEDB7E0];
  v450 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  v452 = *(_QWORD *)&v475.st_dev;
  *(_QWORD *)((char *)&v475.st_dev + *(_QWORD *)(*(_QWORD *)&v475.st_dev - 24)) = v450;
  MEMORY[0x20BD2CD80](&v475.st_uid);
  std::istream::~istream();
  MEMORY[0x20BD2D008](v476);
  if (!v325 || (v331 = (_QWORD *)*a1, v325 = 1, v442 = a1 + 1, v331 == v442))
  {
LABEL_819:
    v415 = v455;
    if (!v455)
      goto LABEL_823;
    goto LABEL_820;
  }
  while (1)
  {
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v331[5] + 16))(v331[5]) != 1)
    {
LABEL_809:
      v413 = (_QWORD *)v331[1];
      if (!v413)
        goto LABEL_813;
      goto LABEL_810;
    }
    v332 = v331 + 8;
    if (*((char *)v331 + 87) < 0)
    {
      sub_20AB88C14(&__dst, (void *)v331[8], v331[9]);
      if (*((char *)v331 + 87) < 0)
      {
        v332 = (_OWORD *)v331[8];
        v333 = v331[9];
      }
      else
      {
        v333 = *((unsigned __int8 *)v331 + 87);
      }
    }
    else
    {
      v333 = *((unsigned __int8 *)v331 + 87);
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *v332;
      __dst.__r_.__value_.__r.__words[2] = v331[10];
    }
    v334 = (char *)v332 + v333;
    if (v333 >= 6)
    {
      v335 = v332;
      do
      {
        v336 = (char *)memchr(v335, 67, v333 - 5);
        if (!v336)
          break;
        v337 = *(_DWORD *)v336 == 1701667139 && *((_WORD *)v336 + 2) == 24946;
        if (v337)
          goto LABEL_700;
        v335 = v336 + 1;
        v333 = v334 - (_BYTE *)v335;
      }
      while (v334 - (_BYTE *)v335 > 5);
    }
    v336 = v334;
LABEL_700:
    v338 = v336 == v334 ? -1 : v336 - (char *)v332;
    std::string::replace(&__dst, v338, 6uLL, "Encoder");
    v339 = v331[5];
    v340 = *(_QWORD *)(v339 + 256);
    if (v340)
    {
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v340 + 16))(v340))
        break;
    }
LABEL_808:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_809;
    operator delete(__dst.__r_.__value_.__l.__data_);
    v413 = (_QWORD *)v331[1];
    if (!v413)
    {
      do
      {
LABEL_813:
        v414 = (_QWORD *)v331[2];
        v337 = *v414 == (_QWORD)v331;
        v331 = v414;
      }
      while (!v337);
      goto LABEL_684;
    }
    do
    {
LABEL_810:
      v414 = v413;
      v413 = (_QWORD *)*v413;
    }
    while (v413);
LABEL_684:
    v331 = v414;
    if (v414 == v442)
    {
      v325 = 1;
      goto LABEL_819;
    }
  }
  v341 = *(_QWORD **)(v339 + 256);
  v342 = *v438;
  v343 = operator new();
  v344 = v343;
  if (v342[23] < 0)
  {
    sub_20AB88C14((_BYTE *)v343, *(void **)v342, *((_QWORD *)v342 + 1));
  }
  else
  {
    v345 = *(_OWORD *)v342;
    *(_QWORD *)(v343 + 16) = *((_QWORD *)v342 + 2);
    *(_OWORD *)v343 = v345;
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_dst = &__dst;
  else
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    size = __dst.__r_.__value_.__l.__size_;
  std::string::append((std::string *)v344, (const std::string::value_type *)p_dst, size);
  v348 = operator new();
  v349 = v348;
  if (*(char *)(v344 + 23) < 0)
  {
    sub_20AB88C14((_BYTE *)v348, *(void **)v344, *(_QWORD *)(v344 + 8));
    if (*(char *)(v344 + 23) < 0)
      operator delete(*(void **)v344);
  }
  else
  {
    *(_OWORD *)v348 = *(_OWORD *)v344;
    *(_QWORD *)(v348 + 16) = *(_QWORD *)(v344 + 16);
  }
  MEMORY[0x20BD2D02C](v344, 0x1012C40EC159624);
  HIBYTE(v458[0]) = 1;
  LOWORD(v457[0]) = 47;
  v350 = operator new();
  v351 = v350;
  if (*(char *)(v349 + 23) < 0)
  {
    sub_20AB88C14((_BYTE *)v350, *(void **)v349, *(_QWORD *)(v349 + 8));
  }
  else
  {
    *(_OWORD *)v350 = *(_OWORD *)v349;
    *(_QWORD *)(v350 + 16) = *(_QWORD *)(v349 + 16);
  }
  if (SHIBYTE(v458[0]) >= 0)
    v352 = v457;
  else
    v352 = (void **)v457[0];
  if (SHIBYTE(v458[0]) >= 0)
    v353 = HIBYTE(v458[0]);
  else
    v353 = (std::string::size_type)v457[1];
  std::string::append((std::string *)v351, (const std::string::value_type *)v352, v353);
  v354 = operator new();
  v355 = v354;
  if (*(char *)(v351 + 23) < 0)
  {
    sub_20AB88C14((_BYTE *)v354, *(void **)v351, *(_QWORD *)(v351 + 8));
    if (*(char *)(v351 + 23) < 0)
      operator delete(*(void **)v351);
  }
  else
  {
    *(_OWORD *)v354 = *(_OWORD *)v351;
    *(_QWORD *)(v354 + 16) = *(_QWORD *)(v351 + 16);
  }
  MEMORY[0x20BD2D02C](v351, 0x1012C40EC159624);
  v471 = 11;
  strcpy((char *)v470, "encoder.txt");
  v356 = operator new();
  v357 = v356;
  if (*(char *)(v355 + 23) < 0)
  {
    sub_20AB88C14((_BYTE *)v356, *(void **)v355, *(_QWORD *)(v355 + 8));
  }
  else
  {
    *(_OWORD *)v356 = *(_OWORD *)v355;
    *(_QWORD *)(v356 + 16) = *(_QWORD *)(v355 + 16);
  }
  if (v471 >= 0)
    v358 = (const std::string::value_type *)v470;
  else
    v358 = (const std::string::value_type *)v470[0];
  if (v471 >= 0)
    v359 = v471;
  else
    v359 = (std::string::size_type)v470[1];
  std::string::append((std::string *)v357, v358, v359);
  v360 = operator new();
  v361 = v360;
  if (*(char *)(v357 + 23) < 0)
  {
    sub_20AB88C14((_BYTE *)v360, *(void **)v357, *(_QWORD *)(v357 + 8));
    v362 = *(char *)(v357 + 23);
    v472 = (const char *)v361;
    if (v362 < 0)
      operator delete(*(void **)v357);
  }
  else
  {
    *(_OWORD *)v360 = *(_OWORD *)v357;
    *(_QWORD *)(v360 + 16) = *(_QWORD *)(v357 + 16);
    v472 = (const char *)v360;
  }
  MEMORY[0x20BD2D02C](v357, 0x1012C40EC159624);
  cva::adp::io::openInputStream(&v472, &v475);
  v363 = v475.st_qspare[1];
  if (v475.st_qspare[1])
  {
    v473 = 0;
    v474 = 0.0;
    if ((*((_BYTE *)&v475.st_atimespec.tv_sec + *(_QWORD *)(*(_QWORD *)&v475.st_dev - 24)) & 2) == 0)
    {
      v447 = v475.st_qspare[1];
      do
      {
        v366 = std::istream::peek();
        if (v366 > 0xFF || (*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v366 + 60) & 0x400) == 0)
          break;
        v367 = MEMORY[0x20BD2CDE0](&v475, &v474);
        v368 = (_QWORD *)MEMORY[0x20BD2CDE0](v367, &v473);
        sub_20ABBBB80(v368);
        __p[0] = *(void **)&v474;
        __p[1] = v473;
        LOBYTE(v461) = 1;
        v369 = v341[5];
        v370 = v341[6];
        v371 = v370 - v369;
        if (v370 == v369)
        {
          v373 = (double *)v341[6];
        }
        else
        {
          v372 = 0xAAAAAAAAAAAAAAABLL * (v371 >> 3);
          v373 = (double *)v341[5];
          do
          {
            v374 = v372 >> 1;
            v375 = &v373[3 * (v372 >> 1)];
            v377 = *v375;
            v376 = v375 + 3;
            v372 += ~(v372 >> 1);
            if (v377 < v474)
              v373 = v376;
            else
              v372 = v374;
          }
          while (v372);
          if ((double *)v370 != v373 && *v373 == v474)
            continue;
        }
        v378 = (unsigned __int128)(((uint64_t)v373 - v369) * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
        v379 = (v378 >> 2) + ((unint64_t)v378 >> 63);
        v380 = v369 + 24 * v379;
        v381 = v341[7];
        if (v370 >= v381)
        {
          v389 = 1 - 0x5555555555555555 * (v371 >> 3);
          if (v389 > 0xAAAAAAAAAAAAAAALL)
            abort();
          v390 = v349;
          v391 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v381 - v369) >> 3);
          if (2 * v391 > v389)
            v389 = 2 * v391;
          if (v391 >= 0x555555555555555)
            v392 = 0xAAAAAAAAAAAAAAALL;
          else
            v392 = v389;
          if (v392)
          {
            if (v392 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_863;
            v393 = (char *)operator new(24 * v392);
          }
          else
          {
            v393 = 0;
          }
          v395 = &v393[24 * v379];
          v396 = &v393[24 * v392];
          if (v395 == v396)
          {
            v397 = 0xAAAAAAAAAAAAAAABLL * ((v395 - v393) >> 3);
            if (v395 <= v393)
            {
              v399 = 0x5555555555555556 * ((v395 - v393) >> 3);
              if (v395 == v393)
                v399 = 1;
              if (v399 > 0xAAAAAAAAAAAAAAALL)
LABEL_863:
                sub_20ABAD09C();
              v400 = v399 >> 2;
              v401 = 24 * v399;
              v402 = (char *)operator new(24 * v399);
              v395 = &v402[24 * v400];
              v396 = &v402[v401];
              if (v393)
                operator delete(v393);
            }
            else
            {
              if (v397 >= -1)
                v398 = v397 + 1;
              else
                v398 = v397 + 2;
              v396 = v395;
              v395 -= 24 * (v398 >> 1);
            }
          }
          v403 = *(_OWORD *)__p;
          *((_QWORD *)v395 + 2) = v461;
          *(_OWORD *)v395 = v403;
          v404 = v341[5];
          v405 = v395;
          v363 = v447;
          if (v404 != v380)
          {
            v406 = v380;
            v407 = v395;
            do
            {
              v405 = v407 - 24;
              v408 = *(_OWORD *)(v406 - 24);
              *((_QWORD *)v407 - 1) = *(_QWORD *)(v406 - 8);
              *(_OWORD *)(v407 - 24) = v408;
              v406 -= 24;
              v407 -= 24;
            }
            while (v406 != v404);
          }
          v409 = v395 + 24;
          for (i = v341[6]; v380 != i; v380 += 24)
          {
            v411 = *(_OWORD *)v380;
            *((_QWORD *)v409 + 2) = *(_QWORD *)(v380 + 16);
            *(_OWORD *)v409 = v411;
            v409 += 24;
          }
          v412 = (void *)v341[5];
          v341[5] = v405;
          v341[6] = v409;
          v341[7] = v396;
          v349 = v390;
          if (v412)
            operator delete(v412);
        }
        else if (v380 == v370)
        {
          v394 = *(_OWORD *)__p;
          *(_QWORD *)(v370 + 16) = v461;
          *(_OWORD *)v370 = v394;
          v341[6] = v370 + 24;
        }
        else
        {
          v382 = v370 - 24;
          v383 = v341[6];
          v384 = v370 - 24;
          if (v370 >= 0x18)
          {
            do
            {
              v385 = *(_OWORD *)v384;
              *(_QWORD *)(v383 + 16) = *(_QWORD *)(v384 + 16);
              *(_OWORD *)v383 = v385;
              v383 += 24;
              v384 += 24;
            }
            while (v384 < v370);
          }
          v341[6] = v383;
          if (v370 != v380 + 24)
          {
            v386 = v370 - (v380 + 24);
            do
            {
              *(_QWORD *)v382 = *(_QWORD *)(v380 + v386 - 24);
              v387 = *(_QWORD *)(v380 + v386 - 16);
              *(_BYTE *)(v382 + 16) = *(_BYTE *)(v380 + v386 - 8);
              *(_QWORD *)(v382 + 8) = v387;
              v382 -= 24;
              v386 -= 24;
            }
            while (v386);
          }
          v388 = __p;
          if (v380 <= (unint64_t)__p)
            v388 = &__p[3 * (v341[6] > (unint64_t)__p)];
          *(_QWORD *)v380 = *v388;
          v364 = v369 + 24 * v379;
          v365 = v388[1];
          *(_BYTE *)(v364 + 16) = *((_BYTE *)v388 + 16);
          *(_QWORD *)(v364 + 8) = v365;
        }
      }
      while ((*((_BYTE *)&v475.st_atimespec.tv_sec + *(_QWORD *)(*(_QWORD *)&v475.st_dev - 24)) & 2) == 0);
    }
  }
  *(_QWORD *)&v475.st_dev = v452;
  *(_QWORD *)((char *)&v475.st_dev + *(_QWORD *)(v452 - 24)) = v450;
  MEMORY[0x20BD2CD80](&v475.st_uid);
  std::istream::~istream();
  MEMORY[0x20BD2D008](v476);
  v472 = 0;
  if (*(char *)(v361 + 23) < 0)
    operator delete(*(void **)v361);
  MEMORY[0x20BD2D02C](v361, 0x1012C40EC159624);
  if (v471 < 0)
  {
    operator delete(v470[0]);
    if ((*(char *)(v355 + 23) & 0x80000000) == 0)
      goto LABEL_803;
  }
  else if ((*(char *)(v355 + 23) & 0x80000000) == 0)
  {
    goto LABEL_803;
  }
  operator delete(*(void **)v355);
LABEL_803:
  MEMORY[0x20BD2D02C](v355, 0x1012C40EC159624);
  if (SHIBYTE(v458[0]) < 0)
    operator delete(v457[0]);
  if (*(char *)(v349 + 23) < 0)
    operator delete(*(void **)v349);
  MEMORY[0x20BD2D02C](v349, 0x1012C40EC159624);
  if (v363)
    goto LABEL_808;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v325 = 0;
  v415 = v455;
  if (v455)
  {
LABEL_820:
    if (v415[23] < 0)
      operator delete(*(void **)v415);
    MEMORY[0x20BD2D02C](v415, 0x1012C40EC159624);
  }
LABEL_823:
  if (SHIBYTE(v454[2]) < 0)
    operator delete(v454[0]);
LABEL_825:
  sub_20AB96A90((char *)v456.__r_.__value_.__l.__size_);
  return v325;
}

uint64_t sub_20ABCA68C(const char **a1, _QWORD *a2, uint64_t *a3)
{
  const char *v5;
  uint64_t v6;
  _QWORD *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  int v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  uint64_t v15;
  const std::string *v16;
  std::string *v17;
  std::string *v18;
  _BOOL4 v19;
  _BOOL4 v20;
  double *i;
  double v22;
  unsigned __int8 v23;
  char *v24;
  std::string *v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  const std::ctype_base::mask *v33;
  std::ios_base *v34;
  std::ctype<char> *v35;
  uint64_t v36;
  std::locale *rdbuf;
  std::locale *v38;
  uint64_t v39;
  _QWORD *v40;
  _BYTE *v41;
  int v42;
  std::ios_base *v43;
  std::locale *v44;
  std::locale *v45;
  BOOL v46;
  char *v47;
  int64x2_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  __int128 v53;
  char *v54;
  char *v55;
  int64x2_t v56;
  unint64_t v57;
  unint64_t v58;
  uint8x8_t v59;
  _QWORD **v60;
  _QWORD *v61;
  unint64_t v62;
  uint64_t v63;
  float v64;
  float v65;
  _BOOL8 v66;
  unint64_t v67;
  unint64_t v68;
  size_t prime;
  void *v70;
  void *v71;
  uint64_t v72;
  _QWORD *v73;
  size_t v74;
  size_t v75;
  size_t v76;
  _QWORD *j;
  size_t v78;
  uint64_t v79;
  unint64_t v80;
  uint8x8_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  size_t v85;
  uint64_t v86;
  _QWORD *v87;
  unint64_t v88;
  void *v89;
  double *v90;
  double *v91;
  BOOL v92;
  void *v93;
  int v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v98;
  const std::string *v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  int64x2_t v104;
  char *v105;
  std::string __p;
  const char *v107;
  _BYTE v108[32];
  __int128 v109;
  std::string v110;
  char **v111;
  char *v112[2];
  double *v113;
  std::string __str;
  __int128 v115;
  __int128 v116;
  std::locale v117;
  std::locale __loc;
  std::locale v119;
  stat __dst;
  int v121;
  int v122;
  int v123;
  std::locale v124;
  std::locale v125;
  std::locale v126;
  _QWORD v127[2];
  _BYTE v128[120];
  uint64_t v129;
  _QWORD v130[22];

  v130[19] = *MEMORY[0x24BDAC8D0];
  v5 = *a1;
  if (v5[23] < 0)
    v5 = *(const char **)v5;
  v6 = 0;
  if (stat(v5, &__dst))
    return v6;
  if ((__dst.st_mode & 0xF000) != 0x4000)
    return v6;
  *((_BYTE *)&__str.__r_.__value_.__s + 23) = 13;
  strcpy((char *)&__str, "image-points.");
  v7 = (_QWORD *)*a2;
  v6 = 1;
  v98 = a2 + 1;
  if ((_QWORD *)*a2 == a2 + 1)
    return v6;
  v102 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  v103 = *MEMORY[0x24BEDB7E0];
  v101 = a3 + 2;
  while (1)
  {
    v8 = *a1;
    v9 = operator new();
    v10 = v9;
    if (v8[23] < 0)
    {
      sub_20AB88C14((_BYTE *)v9, *(void **)v8, *((_QWORD *)v8 + 1));
    }
    else
    {
      v11 = *(_OWORD *)v8;
      *(_QWORD *)(v9 + 16) = *((_QWORD *)v8 + 2);
      *(_OWORD *)v9 = v11;
    }
    v12 = *((char *)v7 + 63);
    v13 = v12 >= 0 ? (const std::string::value_type *)(v7 + 5) : (const std::string::value_type *)v7[5];
    v14 = v12 >= 0 ? *((unsigned __int8 *)v7 + 63) : v7[6];
    std::string::append((std::string *)v10, v13, v14);
    v15 = operator new();
    v16 = (const std::string *)v15;
    if (*(char *)(v10 + 23) < 0)
    {
      sub_20AB88C14((_BYTE *)v15, *(void **)v10, *(_QWORD *)(v10 + 8));
      if (*(char *)(v10 + 23) < 0)
        operator delete(*(void **)v10);
    }
    else
    {
      *(_OWORD *)v15 = *(_OWORD *)v10;
      *(_QWORD *)(v15 + 16) = *(_QWORD *)(v10 + 16);
    }
    MEMORY[0x20BD2D02C](v10, 0x1012C40EC159624);
    v112[0] = 0;
    v112[1] = 0;
    memset(v108, 0, sizeof(v108));
    v109 = 0u;
    memset(&v110, 0, sizeof(v110));
    v111 = v112;
    v113 = 0;
    HIBYTE(__dst.st_gid) = 4;
    strcpy((char *)&__dst, ".txt");
    v100 = v16;
    std::string::operator=((std::string *)v108, v16);
    std::string::operator=((std::string *)&v108[24], &__str);
    v17 = &v110;
    std::string::operator=(&v110, (const std::string *)&__dst);
    if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = (std::string *)((char *)&v110 + HIBYTE(v110.__r_.__value_.__r.__words[2]));
    else
      v18 = (std::string *)(v110.__r_.__value_.__r.__words[0] + v110.__r_.__value_.__l.__size_);
    if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v17 = (std::string *)v110.__r_.__value_.__r.__words[0];
    for (; v17 != v18; v17 = (std::string *)((char *)v17 + 1))
      v17->__r_.__value_.__s.__data_[0] = __tolower(v17->__r_.__value_.__s.__data_[0]);
    v19 = cva::adp::io::FileDirectory::parseDirectory((cva::adp::io::FileDirectory *)v108);
    v20 = v19;
    if (SHIBYTE(__dst.st_gid) < 0)
    {
      operator delete(*(void **)&__dst.st_dev);
      if (!v20)
      {
LABEL_183:
        v94 = 5;
        goto LABEL_188;
      }
    }
    else if (!v19)
    {
      goto LABEL_183;
    }
    for (i = v113; ; v113 = i)
    {
      if (i == (double *)v112)
      {
        v94 = 0;
        goto LABEL_188;
      }
      v22 = i[4];
      v23 = *((_BYTE *)v7 + 32);
      v24 = (char *)operator new(0xFA00uLL);
      cva::adp::io::FileDirectory::currentFilePath((cva::adp::io::FileDirectory *)v108, &__p);
      v25 = (std::string *)operator new();
      v26 = (unint64_t)v25;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        sub_20AB88C14(v25, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      else
        *v25 = __p;
      v27 = v24 + 64000;
      v104 = vdupq_n_s64((unint64_t)v24);
      v107 = (const char *)v26;
      cva::adp::io::openInputStream(&v107, v127);
      v28 = v129;
      if (v129 && (v128[*(_QWORD *)(v127[0] - 24) + 16] & 2) == 0)
      {
        v29 = 0;
        while (1)
        {
          v31 = std::istream::peek();
          if (v31 > 0xFF || (*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v31 + 60) & 0x400) == 0)
          {
LABEL_76:
            v26 = (unint64_t)v107;
            break;
          }
          v115 = 0uLL;
          LOBYTE(v116) = 1;
          *((_QWORD *)&v116 + 1) = v29;
          sub_20ABBBB80(v127);
          v32 = std::istream::peek();
          std::ios_base::getloc((const std::ios_base *)((char *)v127 + *(_QWORD *)(v127[0] - 24)));
          v33 = std::ctype<char>::classic_table();
          if (v32 != 91)
          {
            MEMORY[0x20BD2CDE0](v127, &v115);
            MEMORY[0x20BD2CDE0](v127, (char *)&v115 + 8);
            goto LABEL_58;
          }
          memmove(&__dst, v33, 0x400uLL);
          v123 |= 0x4000u;
          v121 |= 0x4000u;
          v122 |= 0x4000u;
          v34 = (std::ios_base *)((char *)v127 + *(_QWORD *)(v127[0] - 24));
          std::ios_base::getloc(v34);
          v35 = (std::ctype<char> *)operator new();
          std::ctype<char>::ctype(v35, (const std::ctype_base::mask *)&__dst, 0, 0);
          v36 = std::locale::id::__get(MEMORY[0x24BEDB350]);
          std::locale::__install_ctor(&__loc, &v117, v35, v36);
          std::ios_base::getloc(v34);
          std::ios_base::imbue(v34, &__loc);
          std::locale::~locale(&v126);
          rdbuf = (std::locale *)v34->__rdbuf_;
          if (rdbuf)
          {
            v38 = rdbuf + 1;
            (*((void (**)(std::locale *, std::locale *))rdbuf->__locale_ + 2))(rdbuf, &__loc);
            std::locale::locale(&v125, v38);
            std::locale::operator=(v38, &__loc);
            std::locale::~locale(&v125);
          }
          std::locale::~locale(&v119);
          std::locale::~locale(&__loc);
          std::locale::~locale(&v117);
          MEMORY[0x20BD2CDE0](v127, &v115);
          MEMORY[0x20BD2CDE0](v127, (char *)&v115 + 8);
          MEMORY[0x20BD2CDBC](&v126, v127, 0);
          if (LOBYTE(v126.__locale_))
          {
            v39 = v127[0];
            v40 = *(_QWORD **)&v128[*(_QWORD *)(v127[0] - 24) + 24];
            v41 = (_BYTE *)v40[3];
            if (v41 != (_BYTE *)v40[4])
            {
              v40[3] = v41 + 1;
              LOBYTE(v40) = *v41;
LABEL_51:
              v42 = v40;
              std::ios_base::clear((std::ios_base *)((char *)v127 + *(_QWORD *)(v39 - 24)), *(_DWORD *)&v128[*(_QWORD *)(v39 - 24) + 16]);
              if (v42 == 93)
                goto LABEL_55;
              goto LABEL_54;
            }
            LODWORD(v40) = (*(uint64_t (**)(_QWORD *))(*v40 + 80))(v40);
            v39 = v127[0];
            if ((_DWORD)v40 != -1)
              goto LABEL_51;
            std::ios_base::clear((std::ios_base *)((char *)v127 + *(_QWORD *)(v127[0] - 24)), *(_DWORD *)&v128[*(_QWORD *)(v127[0] - 24) + 16] | 6);
          }
LABEL_54:
          std::ios_base::clear((std::ios_base *)((char *)v127 + *(_QWORD *)(v127[0] - 24)), *(_DWORD *)&v128[*(_QWORD *)(v127[0] - 24) + 16] | 4);
LABEL_55:
          v43 = (std::ios_base *)((char *)v127 + *(_QWORD *)(v127[0] - 24));
          std::ios_base::getloc(v43);
          std::ios_base::imbue(v43, &v124);
          std::locale::~locale(&v126);
          v44 = (std::locale *)v43->__rdbuf_;
          if (v44)
          {
            v45 = v44 + 1;
            (*((void (**)(std::locale *, std::locale *))v44->__locale_ + 2))(v44, &v124);
            std::locale::locale(&v125, v45);
            std::locale::operator=(v45, &v124);
            std::locale::~locale(&v125);
          }
          std::locale::~locale(&__loc);
LABEL_58:
          std::locale::~locale(&v124);
          v46 = *(double *)&v115 >= 0.0;
          if (*((double *)&v115 + 1) < 0.0)
            v46 = 0;
          LOBYTE(v116) = v46;
          sub_20ABBBB80(v127);
          v47 = (char *)v104.i64[1];
          v48.i64[0] = v104.i64[0];
          if (v104.i64[1] < (unint64_t)v27)
          {
            *(_OWORD *)v104.i64[1] = v115;
            *(_OWORD *)(v104.i64[1] + 16) = v116;
            v30 = v104.i64[1] + 32;
          }
          else
          {
            v49 = (v104.i64[1] - v104.i64[0]) >> 5;
            v50 = v49 + 1;
            if ((unint64_t)(v49 + 1) >> 59)
              abort();
            if ((uint64_t)&v27[-v104.i64[0]] >> 4 > v50)
              v50 = (uint64_t)&v27[-v104.i64[0]] >> 4;
            if ((unint64_t)&v27[-v104.i64[0]] >= 0x7FFFFFFFFFFFFFE0)
              v51 = 0x7FFFFFFFFFFFFFFLL;
            else
              v51 = v50;
            if (v51)
            {
              if (v51 >> 59)
                goto LABEL_210;
              v52 = (char *)operator new(32 * v51);
            }
            else
            {
              v52 = 0;
            }
            v53 = v116;
            v54 = &v52[32 * v49];
            *(_OWORD *)v54 = v115;
            *((_OWORD *)v54 + 1) = v53;
            v55 = v54;
            if (v104.i64[1] != v104.i64[0])
            {
              do
              {
                *((_OWORD *)v55 - 2) = *((_OWORD *)v47 - 2);
                *((_OWORD *)v55 - 1) = *((_OWORD *)v47 - 1);
                v55 -= 32;
                v47 -= 32;
              }
              while (v47 != (char *)v104.i64[0]);
              v47 = (char *)v104.i64[0];
            }
            v27 = &v52[32 * v51];
            v30 = (uint64_t)(v54 + 32);
            v48.i64[0] = (uint64_t)v55;
            if (v47)
            {
              v105 = v55;
              operator delete(v47);
              v48.i64[0] = (uint64_t)v105;
            }
          }
          ++v29;
          v48.i64[1] = v30;
          v104 = v48;
          if ((v128[*(_QWORD *)(v127[0] - 24) + 16] & 2) != 0)
            goto LABEL_76;
        }
      }
      v127[0] = v103;
      *(_QWORD *)((char *)v127 + *(_QWORD *)(v103 - 24)) = v102;
      MEMORY[0x20BD2CD80](v128);
      std::istream::~istream();
      MEMORY[0x20BD2D008](v130);
      if (v26)
      {
        if (*(char *)(v26 + 23) < 0)
          operator delete(*(void **)v26);
        MEMORY[0x20BD2D02C](v26, 0x1012C40EC159624);
      }
      v56 = v104;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        v56 = v104;
      }
      if (!v28)
        break;
      v57 = (unint64_t)v22 & 0xFFFFFFFFFFFFFFLL | ((unint64_t)v23 << 56);
      v58 = a3[1];
      if (v58)
      {
        v59 = (uint8x8_t)vcnt_s8((int8x8_t)v58);
        v59.i16[0] = vaddlv_u8(v59);
        if (v59.u32[0] > 1uLL)
        {
          v26 = (unint64_t)v22 & 0xFFFFFFFFFFFFFFLL | ((unint64_t)v23 << 56);
          if (v57 >= v58)
            v26 = v57 % v58;
        }
        else
        {
          v26 = (v58 - 1) & v57;
        }
        v60 = *(_QWORD ***)(*a3 + 8 * v26);
        if (v60)
        {
          v61 = *v60;
          if (*v60)
          {
            if (v59.u32[0] < 2uLL)
            {
              while (1)
              {
                v63 = v61[1];
                if (v63 == v57)
                {
                  if (v61[2] == v57)
                    goto LABEL_165;
                }
                else if ((v63 & (v58 - 1)) != v26)
                {
                  goto LABEL_104;
                }
                v61 = (_QWORD *)*v61;
                if (!v61)
                  goto LABEL_104;
              }
            }
            do
            {
              v62 = v61[1];
              if (v62 == v57)
              {
                if (v61[2] == v57)
                  goto LABEL_165;
              }
              else
              {
                if (v62 >= v58)
                  v62 %= v58;
                if (v62 != v26)
                  break;
              }
              v61 = (_QWORD *)*v61;
            }
            while (v61);
          }
        }
      }
LABEL_104:
      v61 = operator new(0x30uLL);
      *v61 = 0;
      v61[1] = v57;
      v61[2] = v57;
      v61[3] = 0;
      v61[4] = 0;
      v61[5] = 0;
      v64 = (float)(unint64_t)(a3[3] + 1);
      v65 = *((float *)a3 + 8);
      if (v58 && (float)(v65 * (float)v58) >= v64)
      {
        v56 = v104;
        goto LABEL_155;
      }
      v66 = (v58 & (v58 - 1)) != 0;
      if (v58 < 3)
        v66 = 1;
      v67 = v66 | (2 * v58);
      v68 = vcvtps_u32_f32(v64 / v65);
      if (v67 <= v68)
        prime = v68;
      else
        prime = v67;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
        v58 = a3[1];
      }
      v56 = v104;
      if (prime > v58)
        goto LABEL_117;
      if (prime >= v58)
        goto LABEL_142;
      v80 = vcvtps_u32_f32((float)(unint64_t)a3[3] / *((float *)a3 + 8));
      if (v58 < 3 || (v81 = (uint8x8_t)vcnt_s8((int8x8_t)v58), v81.i16[0] = vaddlv_u8(v81), v81.u32[0] > 1uLL))
      {
        v80 = std::__next_prime(v80);
        v56 = v104;
      }
      else
      {
        v82 = 1 << -(char)__clz(v80 - 1);
        if (v80 >= 2)
          v80 = v82;
      }
      if (prime <= v80)
        prime = v80;
      if (prime < v58)
      {
        if (!prime)
        {
          v93 = (void *)*a3;
          *a3 = 0;
          if (v93)
          {
            operator delete(v93);
            v56 = v104;
          }
          v58 = 0;
          a3[1] = 0;
          goto LABEL_142;
        }
LABEL_117:
        if (prime >> 61)
LABEL_210:
          sub_20ABAD09C();
        v70 = operator new(8 * prime);
        v71 = (void *)*a3;
        *a3 = (uint64_t)v70;
        if (v71)
          operator delete(v71);
        v72 = 0;
        a3[1] = prime;
        do
          *(_QWORD *)(*a3 + 8 * v72++) = 0;
        while (prime != v72);
        v73 = (_QWORD *)*v101;
        v56 = v104;
        if (!*v101)
        {
LABEL_141:
          v58 = prime;
          goto LABEL_142;
        }
        v74 = v73[1];
        v75 = prime - 1;
        if ((prime & (prime - 1)) == 0)
        {
          v76 = v74 & v75;
          *(_QWORD *)(*a3 + 8 * v76) = v101;
          for (j = (_QWORD *)*v73; *v73; j = (_QWORD *)*v73)
          {
            v78 = j[1] & v75;
            if (v78 == v76)
            {
              v73 = j;
            }
            else if (*(_QWORD *)(*a3 + 8 * v78))
            {
              *v73 = *j;
              v79 = 8 * v78;
              *j = **(_QWORD **)(*a3 + v79);
              **(_QWORD **)(*a3 + v79) = j;
            }
            else
            {
              *(_QWORD *)(*a3 + 8 * v78) = v73;
              v73 = j;
              v76 = v78;
            }
          }
          goto LABEL_141;
        }
        if (v74 >= prime)
          v74 %= prime;
        *(_QWORD *)(*a3 + 8 * v74) = v101;
        v83 = (_QWORD *)*v73;
        if (!*v73)
          goto LABEL_141;
        while (2)
        {
          v85 = v83[1];
          if (v85 >= prime)
            v85 %= prime;
          if (v85 != v74)
          {
            if (!*(_QWORD *)(*a3 + 8 * v85))
            {
              *(_QWORD *)(*a3 + 8 * v85) = v73;
LABEL_146:
              v73 = v83;
              v83 = (_QWORD *)*v83;
              v74 = v85;
              if (!v83)
                goto LABEL_141;
              continue;
            }
            *v73 = *v83;
            v84 = 8 * v85;
            *v83 = **(_QWORD **)(*a3 + v84);
            **(_QWORD **)(*a3 + v84) = v83;
            v83 = v73;
          }
          break;
        }
        v85 = v74;
        goto LABEL_146;
      }
      v58 = a3[1];
LABEL_142:
      if ((v58 & (v58 - 1)) != 0)
      {
        if (v57 >= v58)
          v26 = v57 % v58;
        else
          v26 = (unint64_t)v22 & 0xFFFFFFFFFFFFFFLL | ((unint64_t)v23 << 56);
      }
      else
      {
        v26 = (v58 - 1) & v57;
      }
LABEL_155:
      v86 = *a3;
      v87 = *(_QWORD **)(*a3 + 8 * v26);
      if (v87)
      {
        *v61 = *v87;
LABEL_163:
        *v87 = v61;
        goto LABEL_164;
      }
      *v61 = *v101;
      *v101 = v61;
      *(_QWORD *)(v86 + 8 * v26) = v101;
      if (*v61)
      {
        v88 = *(_QWORD *)(*v61 + 8);
        if ((v58 & (v58 - 1)) != 0)
        {
          if (v88 >= v58)
            v88 %= v58;
        }
        else
        {
          v88 &= v58 - 1;
        }
        v87 = (_QWORD *)(*a3 + 8 * v88);
        goto LABEL_163;
      }
LABEL_164:
      ++a3[3];
LABEL_165:
      v89 = (void *)v61[3];
      if (v89)
      {
        v61[4] = v89;
        operator delete(v89);
        v56 = v104;
      }
      *(int64x2_t *)(v61 + 3) = v56;
      v61[5] = v27;
      v90 = v113;
      v91 = (double *)*((_QWORD *)v113 + 1);
      if (v91)
      {
        do
        {
          i = v91;
          v91 = *(double **)v91;
        }
        while (v91);
      }
      else
      {
        do
        {
          i = (double *)*((_QWORD *)v90 + 2);
          v92 = *(_QWORD *)i == (_QWORD)v90;
          v90 = i;
        }
        while (!v92);
      }
    }
    if (v56.i64[0])
      operator delete((void *)v56.i64[0]);
    v94 = 1;
LABEL_188:
    sub_20AB96A90(v112[0]);
    if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v110.__r_.__value_.__l.__data_);
      if (SHIBYTE(v109) < 0)
      {
LABEL_202:
        operator delete(*(void **)&v108[24]);
        if ((v108[23] & 0x80000000) == 0)
          goto LABEL_191;
        goto LABEL_203;
      }
    }
    else if (SHIBYTE(v109) < 0)
    {
      goto LABEL_202;
    }
    if ((v108[23] & 0x80000000) == 0)
      goto LABEL_191;
LABEL_203:
    operator delete(*(void **)v108);
LABEL_191:
    if (SHIBYTE(v100->__r_.__value_.__r.__words[2]) < 0)
      operator delete(v100->__r_.__value_.__l.__data_);
    MEMORY[0x20BD2D02C]();
    if (v94 != 5)
    {
      if (v94)
        break;
    }
    v95 = (_QWORD *)v7[1];
    if (v95)
    {
      do
      {
        v96 = v95;
        v95 = (_QWORD *)*v95;
      }
      while (v95);
    }
    else
    {
      do
      {
        v96 = (_QWORD *)v7[2];
        v92 = *v96 == (_QWORD)v7;
        v7 = v96;
      }
      while (!v92);
    }
    v7 = v96;
    if (v96 == v98)
    {
      v6 = 1;
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return v6;
      goto LABEL_205;
    }
  }
  v6 = 0;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
LABEL_205:
    operator delete(__str.__r_.__value_.__l.__data_);
  return v6;
}

uint64_t *sub_20ABCB44C(uint64_t *a1, uint64_t a2)
{
  int v4;
  const std::ctype_base::mask *v5;
  std::ios_base *v6;
  std::ctype<char> *v7;
  uint64_t v8;
  std::locale *rdbuf;
  std::locale *v10;
  uint64_t v11;
  _QWORD *v12;
  _BYTE *v13;
  int v14;
  std::ios_base *v15;
  std::locale *v16;
  std::locale *v17;
  std::locale v19;
  std::locale v20;
  std::locale __loc;
  std::locale v22;
  std::ctype_base::mask __dst[44];
  int v24;
  int v25;
  int v26;
  std::locale v27;
  std::locale v28;
  std::locale v29;

  sub_20ABBBB80(a1);
  v4 = std::istream::peek();
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
  v5 = std::ctype<char>::classic_table();
  if (v4 != 91)
  {
    MEMORY[0x20BD2CDE0](a1, a2);
    MEMORY[0x20BD2CDE0](a1, a2 + 8);
    MEMORY[0x20BD2CDE0](a1, a2 + 16);
    goto LABEL_16;
  }
  memmove(__dst, v5, 0x400uLL);
  v26 |= 0x4000u;
  v24 |= 0x4000u;
  v25 |= 0x4000u;
  v6 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::getloc(v6);
  v7 = (std::ctype<char> *)operator new();
  std::ctype<char>::ctype(v7, __dst, 0, 0);
  v8 = std::locale::id::__get(MEMORY[0x24BEDB350]);
  std::locale::__install_ctor(&__loc, &v20, v7, v8);
  std::ios_base::getloc(v6);
  std::ios_base::imbue(v6, &__loc);
  std::locale::~locale(&v29);
  rdbuf = (std::locale *)v6->__rdbuf_;
  if (rdbuf)
  {
    v10 = rdbuf + 1;
    (*((void (**)(std::locale *, std::locale *))rdbuf->__locale_ + 2))(rdbuf, &__loc);
    std::locale::locale(&v28, v10);
    std::locale::operator=(v10, &__loc);
    std::locale::~locale(&v28);
  }
  std::locale::~locale(&v22);
  std::locale::~locale(&__loc);
  std::locale::~locale(&v20);
  MEMORY[0x20BD2CDE0](a1, a2);
  MEMORY[0x20BD2CDE0](a1, a2 + 8);
  MEMORY[0x20BD2CDE0](a1, a2 + 16);
  MEMORY[0x20BD2CDBC](&v29, a1, 0);
  if (LOBYTE(v29.__locale_))
  {
    v11 = *a1;
    v12 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v13 = (_BYTE *)v12[3];
    if (v13 != (_BYTE *)v12[4])
    {
      v12[3] = v13 + 1;
      LOBYTE(v12) = *v13;
      goto LABEL_9;
    }
    LODWORD(v12) = (*(uint64_t (**)(_QWORD *))(*v12 + 80))(v12);
    v11 = *a1;
    if ((_DWORD)v12 != -1)
    {
LABEL_9:
      v14 = v12;
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(v11 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(v11 - 24) + 32));
      if (v14 == 93)
        goto LABEL_13;
      goto LABEL_12;
    }
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(v11 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(v11 - 24) + 32) | 6);
  }
LABEL_12:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
LABEL_13:
  v15 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::getloc(v15);
  std::ios_base::imbue(v15, &v27);
  std::locale::~locale(&v29);
  v16 = (std::locale *)v15->__rdbuf_;
  if (v16)
  {
    v17 = v16 + 1;
    (*((void (**)(std::locale *, std::locale *))v16->__locale_ + 2))(v16, &v27);
    std::locale::locale(&v28, v17);
    std::locale::operator=(v17, &v27);
    std::locale::~locale(&v28);
  }
  std::locale::~locale(&v19);
LABEL_16:
  std::locale::~locale(&v27);
  return a1;
}

char *sub_20ABCB734(char **a1, char *a2, uint64_t *a3)
{
  char *v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  void *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *i;
  char *v38;
  __int128 v40;
  __int128 v41;

  v4 = a2;
  v7 = *a1;
  v6 = (unint64_t)a1[1];
  v8 = a2 - *a1;
  v9 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 3);
  v10 = (unint64_t)a1[2];
  if (v6 < v10)
  {
    v11 = a3 + 1;
    if (a2 == (char *)v6)
    {
      *(_QWORD *)a2 = *a3;
      v22 = &v7[8 * (v8 >> 3)];
      *(_OWORD *)(v22 + 8) = *v11;
      *(_OWORD *)(v22 + 24) = *(_OWORD *)(a3 + 3);
      a1[1] = a2 + 40;
    }
    else
    {
      v12 = *a3;
      v40 = *(_OWORD *)(a3 + 3);
      v41 = *v11;
      v13 = (char *)(v6 - 40);
      v14 = a1[1];
      if (v6 >= 0x28)
      {
        v15 = v6 - 40;
        v14 = a1[1];
        do
        {
          *(_QWORD *)v14 = *(_QWORD *)v15;
          *(_OWORD *)(v14 + 8) = *(_OWORD *)(v15 + 8);
          *(_OWORD *)(v14 + 24) = *(_OWORD *)(v15 + 24);
          v14 += 40;
          v15 += 40;
        }
        while (v15 < v6);
      }
      a1[1] = v14;
      if ((char *)v6 != a2 + 40)
      {
        do
        {
          if (v13 != (char *)v6)
          {
            v17 = *((_QWORD *)v13 - 5);
            *(_QWORD *)(v6 - 40) = v17 & 0xFFFFFFFFFFFFFFLL | ((unint64_t)*(unsigned __int8 *)(v6 - 33) << 56);
            *(_QWORD *)(v6 - 40) = v17 & 0xFFFFFFFFFFFFFFLL | ((unint64_t)*(v13 - 33) << 56);
          }
          *(_OWORD *)(v6 - 32) = *((_OWORD *)v13 - 2);
          *(_OWORD *)(v6 - 16) = *((_OWORD *)v13 - 1);
          v13 -= 40;
          v6 -= 40;
        }
        while (v13 != a2);
      }
      *(_QWORD *)a2 = v12;
      v16 = &v7[8 * (v8 >> 3)];
      *(_OWORD *)(v16 + 8) = v41;
      *(_OWORD *)(v16 + 24) = v40;
    }
    return v4;
  }
  v18 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - (_QWORD)v7) >> 3) + 1;
  if (v18 > 0x666666666666666)
    abort();
  v19 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v10 - (_QWORD)v7) >> 3);
  if (2 * v19 > v18)
    v18 = 2 * v19;
  if (v19 >= 0x333333333333333)
    v20 = 0x666666666666666;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 > 0x666666666666666)
      goto LABEL_42;
    v21 = (char *)operator new(40 * v20);
  }
  else
  {
    v21 = 0;
  }
  v23 = &v21[8 * (v8 >> 3)];
  v24 = &v21[40 * v20];
  if (v9 == v20)
  {
    if (v8 >= 1)
    {
      v25 = v9 + 2;
      if (v9 >= -1)
        v25 = v9 + 1;
      v23 -= 40 * (v25 >> 1);
      goto LABEL_32;
    }
    v26 = 0x999999999999999ALL * (v8 >> 3);
    if (v7 == v4)
      v26 = 1;
    if (v26 <= 0x666666666666666)
    {
      v27 = v26 >> 2;
      v28 = 40 * v26;
      v29 = (char *)operator new(40 * v26);
      v23 = &v29[40 * v27];
      v24 = &v29[v28];
      if (v21)
      {
        v30 = v21;
        v31 = v24;
        operator delete(v30);
        v24 = v31;
      }
      goto LABEL_32;
    }
LABEL_42:
    sub_20ABAD09C();
  }
LABEL_32:
  *(_QWORD *)v23 = *a3;
  *(_OWORD *)(v23 + 8) = *(_OWORD *)(a3 + 1);
  *(_OWORD *)(v23 + 24) = *(_OWORD *)(a3 + 3);
  v32 = v23 + 40;
  v33 = *a1;
  v34 = v23;
  if (*a1 != v4)
  {
    v35 = v4;
    v34 = v23;
    do
    {
      v36 = *((_QWORD *)v35 - 5);
      v35 -= 40;
      *((_QWORD *)v34 - 5) = v36;
      v34 -= 40;
      *(_OWORD *)(v34 + 8) = *(_OWORD *)(v35 + 8);
      *(_OWORD *)(v34 + 24) = *(_OWORD *)(v35 + 24);
    }
    while (v35 != v33);
  }
  for (i = a1[1]; v4 != i; v4 += 40)
  {
    *(_QWORD *)v32 = *(_QWORD *)v4;
    *(_OWORD *)(v32 + 8) = *(_OWORD *)(v4 + 8);
    *(_OWORD *)(v32 + 24) = *(_OWORD *)(v4 + 24);
    v32 += 40;
  }
  v38 = *a1;
  *a1 = v34;
  a1[1] = v32;
  a1[2] = v24;
  if (v38)
    operator delete(v38);
  return v23;
}

void sub_20ABCBA74(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint8x8_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  void **v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  float v25;
  float v26;
  _BOOL8 v27;
  unint64_t v28;
  unint64_t v29;
  size_t prime;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  int8x8_t v46;
  unint64_t v47;
  uint8x8_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;

  v5 = *(_QWORD **)(*a3 + 24);
  v4 = *(_QWORD **)(*a3 + 32);
  if (v4 == v5)
    return;
  v9 = 0xCCCCCCCCCCCCCCCDLL * (v4 - v5);
  do
  {
    v10 = v9 >> 1;
    v11 = &v5[5 * (v9 >> 1)];
    v13 = *v11;
    v12 = v11 + 5;
    v9 += ~(v9 >> 1);
    if (v13 < a2)
      v5 = v12;
    else
      v9 = v10;
  }
  while (v9);
  if (v5 == v4 || *v5 != a2)
    return;
  v14 = *(_QWORD *)(a1 + 8);
  if (v14)
  {
    v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
    v15.i16[0] = vaddlv_u8(v15);
    if (v15.u32[0] > 1uLL)
    {
      v16 = a2;
      if (v14 <= a2)
        v16 = a2 % v14;
    }
    else
    {
      v16 = (v14 - 1) & a2;
    }
    v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v16);
    if (v17)
    {
      v18 = (_QWORD *)*v17;
      if (v18)
      {
        if (v15.u32[0] < 2uLL)
        {
          while (1)
          {
            v20 = v18[1];
            if (v20 == a2)
            {
              if (v18[2] == a2)
                goto LABEL_68;
            }
            else if ((v20 & (v14 - 1)) != v16)
            {
              goto LABEL_30;
            }
            v18 = (_QWORD *)*v18;
            if (!v18)
              goto LABEL_30;
          }
        }
        do
        {
          v19 = v18[1];
          if (v19 == a2)
          {
            if (v18[2] == a2)
            {
LABEL_68:
              v34 = sub_20ABBCD64((uint64_t)(v18 + 3), v5[4], v5 + 4);
              v36 = *a3;
              v35 = a3[1];
              if (v35)
              {
                v37 = (unint64_t *)(v35 + 8);
                do
                  v38 = __ldxr(v37);
                while (__stxr(v38 + 1, v37));
              }
              v39 = (std::__shared_weak_count *)v34[4];
              v34[3] = v36;
              v34[4] = v35;
              if (v39)
              {
                p_shared_owners = (unint64_t *)&v39->__shared_owners_;
                do
                  v41 = __ldaxr(p_shared_owners);
                while (__stlxr(v41 - 1, p_shared_owners));
LABEL_116:
                if (!v41)
                {
                  ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                  std::__shared_weak_count::__release_weak(v39);
                }
              }
              return;
            }
          }
          else
          {
            if (v19 >= v14)
              v19 %= v14;
            if (v19 != v16)
              break;
          }
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
    }
LABEL_30:
    if (v15.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v14 <= a2)
        v3 = a2 % v14;
    }
    else
    {
      v3 = (v14 - 1) & a2;
    }
    v21 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v21)
    {
      v22 = (char *)*v21;
      if (*v21)
      {
        if (v15.u32[0] < 2uLL)
        {
          while (1)
          {
            v24 = *((_QWORD *)v22 + 1);
            if (v24 == a2)
            {
              if (*((_QWORD *)v22 + 2) == a2)
                goto LABEL_94;
            }
            else if ((v24 & (v14 - 1)) != v3)
            {
              goto LABEL_49;
            }
            v22 = *(char **)v22;
            if (!v22)
              goto LABEL_49;
          }
        }
        do
        {
          v23 = *((_QWORD *)v22 + 1);
          if (v23 == a2)
          {
            if (*((_QWORD *)v22 + 2) == a2)
              goto LABEL_94;
          }
          else
          {
            if (v23 >= v14)
              v23 %= v14;
            if (v23 != v3)
              break;
          }
          v22 = *(char **)v22;
        }
        while (v22);
      }
    }
  }
LABEL_49:
  v22 = (char *)operator new(0x40uLL);
  *(_QWORD *)v22 = 0;
  *((_QWORD *)v22 + 1) = a2;
  *((_QWORD *)v22 + 2) = a2;
  *(_OWORD *)(v22 + 24) = 0u;
  *(_OWORD *)(v22 + 40) = 0u;
  *((_DWORD *)v22 + 14) = 1065353216;
  v25 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v26 = *(float *)(a1 + 32);
  if (!v14 || (float)(v26 * (float)v14) < v25)
  {
    v27 = 1;
    if (v14 >= 3)
      v27 = (v14 & (v14 - 1)) != 0;
    v28 = v27 | (2 * v14);
    v29 = vcvtps_u32_f32(v25 / v26);
    if (v28 <= v29)
      prime = v29;
    else
      prime = v28;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v14 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v14)
      goto LABEL_61;
    if (prime < v14)
    {
      v31 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v14 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v14), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        v31 = std::__next_prime(v31);
      }
      else
      {
        v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2)
          v31 = v33;
      }
      if (prime <= v31)
        prime = v31;
      if (prime < v14)
LABEL_61:
        sub_20ABBC798(a1, prime);
    }
    v14 = *(_QWORD *)(a1 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v14 <= a2)
        v3 = a2 % v14;
      else
        v3 = a2;
    }
    else
    {
      v3 = (v14 - 1) & a2;
    }
  }
  v42 = *(_QWORD *)a1;
  v43 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v43)
  {
    *(_QWORD *)v22 = *v43;
LABEL_92:
    *v43 = v22;
    goto LABEL_93;
  }
  *(_QWORD *)v22 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v22;
  *(_QWORD *)(v42 + 8 * v3) = a1 + 16;
  if (*(_QWORD *)v22)
  {
    v44 = *(_QWORD *)(*(_QWORD *)v22 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v44 >= v14)
        v44 %= v14;
    }
    else
    {
      v44 &= v14 - 1;
    }
    v43 = (_QWORD *)(*(_QWORD *)a1 + 8 * v44);
    goto LABEL_92;
  }
LABEL_93:
  ++*(_QWORD *)(a1 + 24);
LABEL_94:
  v45 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 40) / *((float *)v22 + 14));
  if (v45 == 1)
  {
    v45 = 2;
  }
  else if ((v45 & (v45 - 1)) != 0)
  {
    v45 = std::__next_prime(v45);
  }
  v46 = *(int8x8_t *)(v22 + 32);
  if (v45 > *(_QWORD *)&v46)
    goto LABEL_109;
  if (v45 < *(_QWORD *)&v46)
  {
    v47 = vcvtps_u32_f32((float)*((unint64_t *)v22 + 6) / *((float *)v22 + 14));
    if (*(_QWORD *)&v46 < 3uLL || (v48 = (uint8x8_t)vcnt_s8(v46), v48.i16[0] = vaddlv_u8(v48), v48.u32[0] > 1uLL))
    {
      v47 = std::__next_prime(v47);
    }
    else
    {
      v49 = 1 << -(char)__clz(v47 - 1);
      if (v47 >= 2)
        v47 = v49;
    }
    if (v45 <= v47)
      v45 = v47;
    if (v45 < *(_QWORD *)&v46)
LABEL_109:
      sub_20ABBC798((uint64_t)(v22 + 24), v45);
  }
  v50 = sub_20ABBCD64((uint64_t)(v22 + 24), v5[4], v5 + 4);
  v52 = *a3;
  v51 = a3[1];
  if (v51)
  {
    v53 = (unint64_t *)(v51 + 8);
    do
      v54 = __ldxr(v53);
    while (__stxr(v54 + 1, v53));
  }
  v39 = (std::__shared_weak_count *)v50[4];
  v50[3] = v52;
  v50[4] = v51;
  if (v39)
  {
    v55 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldaxr(v55);
    while (__stlxr(v41 - 1, v55));
    goto LABEL_116;
  }
}

void sub_20ABCBFE4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD2D02CLL);
}

uint64_t sub_20ABCC008(uint64_t result)
{
  uint64_t v1;
  void *v2;
  std::__shared_weak_count *v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    *(_BYTE *)(v1 + 80) = 0;
    v2 = *(void **)(v1 + 24);
    *(_QWORD *)(v1 + 32) = v2;
    if (v2)
      operator delete(v2);
    v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
    JUMPOUT(0x20BD2D02CLL);
  }
  return result;
}

uint64_t cva::adp::Session<double>::loadImageMeasurementsSet(_QWORD *a1, uint64_t *a2)
{
  const char **v3;
  uint64_t v4;
  std::string v6;

  v3 = (const char **)(a1 + 13);
  sub_20ABBAC68(&v6, a1);
  v4 = sub_20ABCA68C(v3, &v6, a2);
  sub_20AB96A90((char *)v6.__r_.__value_.__l.__size_);
  return v4;
}

BOOL cva::adp::Session<double>::loadDiscretePoses(uint64_t a1, uint64_t *a2)
{
  __int128 *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  const char *v8;
  int v9;
  unint64_t v10;
  _QWORD *v11;
  double v12;
  double cosval;
  __double2 v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  unint64_t v28;
  unint64_t v29;
  uint8x8_t v30;
  void **v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  float v35;
  float v36;
  _BOOL8 v37;
  unint64_t v38;
  unint64_t v39;
  size_t prime;
  void *v41;
  void *v42;
  uint64_t v43;
  _QWORD *v44;
  size_t v45;
  size_t v46;
  size_t v47;
  _QWORD *i;
  size_t v49;
  uint64_t v50;
  unint64_t v51;
  uint8x8_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  size_t v56;
  uint64_t v57;
  _QWORD *v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  double v62;
  double v63;
  double v64;
  double v65;
  void *v66;
  unint64_t v68;
  std::string::value_type __s[23];
  char v70;
  const char *v71;
  double v72;
  double v73;
  double v74;
  unint64_t v75;
  _QWORD v76[2];
  _BYTE v77[120];
  unint64_t v78;
  _QWORD v79[21];

  v79[19] = *MEMORY[0x24BDAC8D0];
  v70 = 9;
  strcpy(__s, "WtoP.traj");
  v3 = *(__int128 **)(a1 + 96);
  v4 = operator new();
  v5 = v4;
  if (*((char *)v3 + 23) < 0)
  {
    sub_20AB88C14((_BYTE *)v4, *(void **)v3, *((_QWORD *)v3 + 1));
  }
  else
  {
    v6 = *v3;
    *(_QWORD *)(v4 + 16) = *((_QWORD *)v3 + 2);
    *(_OWORD *)v4 = v6;
  }
  std::string::append((std::string *)v5, __s, 9uLL);
  v7 = operator new();
  v8 = (const char *)v7;
  if (*(char *)(v5 + 23) < 0)
  {
    sub_20AB88C14((_BYTE *)v7, *(void **)v5, *(_QWORD *)(v5 + 8));
    v9 = *(char *)(v5 + 23);
    v71 = v8;
    if (v9 < 0)
      operator delete(*(void **)v5);
  }
  else
  {
    *(_OWORD *)v7 = *(_OWORD *)v5;
    *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
    v71 = (const char *)v7;
  }
  MEMORY[0x20BD2D02C](v5, 0x1012C40EC159624);
  cva::adp::io::openInputStream(&v71, v76);
  v10 = v78;
  if (v78)
  {
    v74 = 0.0;
    v75 = 0;
    v72 = 0.0;
    v73 = 0.0;
    if ((v77[*(_QWORD *)(v76[0] - 24) + 16] & 2) == 0)
    {
      v68 = v78;
      v11 = a2 + 2;
      while (1)
      {
        MEMORY[0x20BD2CE04](v76, &v75);
        v28 = v75;
        v29 = a2[1];
        if (v29)
        {
          v30 = (uint8x8_t)vcnt_s8((int8x8_t)v29);
          v30.i16[0] = vaddlv_u8(v30);
          if (v30.u32[0] > 1uLL)
          {
            v10 = v75;
            if (v75 >= v29)
              v10 = v75 % v29;
          }
          else
          {
            v10 = (v29 - 1) & v75;
          }
          v31 = *(void ***)(*a2 + 8 * v10);
          if (v31)
          {
            v32 = (char *)*v31;
            if (*v31)
            {
              if (v30.u32[0] < 2uLL)
              {
                while (1)
                {
                  v34 = *((_QWORD *)v32 + 1);
                  if (v34 == v75)
                  {
                    if (*((_QWORD *)v32 + 2) == v75)
                      goto LABEL_93;
                  }
                  else if ((v34 & (v29 - 1)) != v10)
                  {
                    goto LABEL_33;
                  }
                  v32 = *(char **)v32;
                  if (!v32)
                    goto LABEL_33;
                }
              }
              do
              {
                v33 = *((_QWORD *)v32 + 1);
                if (v33 == v75)
                {
                  if (*((_QWORD *)v32 + 2) == v75)
                    goto LABEL_93;
                }
                else
                {
                  if (v33 >= v29)
                    v33 %= v29;
                  if (v33 != v10)
                    break;
                }
                v32 = *(char **)v32;
              }
              while (v32);
            }
          }
        }
LABEL_33:
        v32 = (char *)operator new(0x90uLL);
        *(_QWORD *)v32 = 0;
        *((_QWORD *)v32 + 1) = v28;
        *((_QWORD *)v32 + 2) = v28;
        *(_OWORD *)(v32 + 24) = 0u;
        *(_OWORD *)(v32 + 88) = 0u;
        *(_OWORD *)(v32 + 40) = 0u;
        *(_OWORD *)(v32 + 56) = 0u;
        *(_OWORD *)(v32 + 72) = 0u;
        *(_OWORD *)(v32 + 104) = 0u;
        *(_OWORD *)(v32 + 120) = 0u;
        v32[24] = 1;
        *((_QWORD *)v32 + 12) = 0x3FF0000000000000;
        *((_QWORD *)v32 + 13) = 0;
        *((_OWORD *)v32 + 2) = xmmword_20AC06268;
        *((_OWORD *)v32 + 3) = unk_20AC06278;
        *((_OWORD *)v32 + 4) = xmmword_20AC06288;
        *((_OWORD *)v32 + 5) = unk_20AC06298;
        *((_QWORD *)v32 + 14) = 0;
        *((_QWORD *)v32 + 15) = 0;
        v32[128] = 1;
        *((_QWORD *)v32 + 17) = 0;
        v35 = (float)(unint64_t)(a2[3] + 1);
        v36 = *((float *)a2 + 8);
        if (!v29 || (float)(v36 * (float)v29) < v35)
          break;
LABEL_83:
        v57 = *a2;
        v58 = *(_QWORD **)(*a2 + 8 * v10);
        if (v58)
        {
          *(_QWORD *)v32 = *v58;
        }
        else
        {
          *(_QWORD *)v32 = *v11;
          *v11 = v32;
          *(_QWORD *)(v57 + 8 * v10) = v11;
          if (!*(_QWORD *)v32)
            goto LABEL_92;
          v59 = *(_QWORD *)(*(_QWORD *)v32 + 8);
          if ((v29 & (v29 - 1)) != 0)
          {
            if (v59 >= v29)
              v59 %= v29;
          }
          else
          {
            v59 &= v29 - 1;
          }
          v58 = (_QWORD *)(*a2 + 8 * v59);
        }
        *v58 = v32;
LABEL_92:
        ++a2[3];
LABEL_93:
        v60 = (uint64_t *)MEMORY[0x20BD2CDE0](v76, v32 + 136);
        v61 = sub_20ABCB44C(v60, (uint64_t)&v72);
        sub_20ABCB44C(v61, (uint64_t)(v32 + 104));
        v62 = v72;
        v63 = v73;
        v64 = v74;
        v65 = v62 * v62 + v63 * v63 + v64 * v64;
        if (v65 >= 0.0000002635)
        {
          v12 = sqrt(v65);
          v14 = __sincos_stret(v12);
          cosval = v14.__cosval;
          v15 = v14.__sinval / v12;
          v16 = 1.0 / v65 * (1.0 - v14.__cosval);
        }
        else
        {
          v16 = 0.5 - v65 * (v65 / -720.0 + 0.0416666667);
          v15 = 1.0 - v65 * (0.166666667 - v65 * (v65 / -5040.0 + 0.00833333333));
          cosval = 1.0 - v65 * v16;
        }
        v17 = v62 * v16;
        v18 = v63 * v16;
        v19 = cosval + v62 * v16 * v62;
        v20 = cosval + v63 * v16 * v63;
        v21 = cosval + v64 * v16 * v64;
        v22 = v63 * (v62 * v16);
        v23 = v64 * v17;
        v24 = v64 * v18;
        v25 = v62 * v15;
        v26 = v63 * v15;
        v27 = v64 * v15;
        v32[24] = 1;
        *((double *)v32 + 4) = v19;
        *((double *)v32 + 5) = v22 + v27;
        *((double *)v32 + 6) = v23 - v26;
        *((double *)v32 + 7) = v22 - v27;
        *((double *)v32 + 8) = v20;
        *((double *)v32 + 9) = v25 + v24;
        *((double *)v32 + 10) = v26 + v23;
        *((double *)v32 + 11) = v24 - v25;
        *((double *)v32 + 12) = v21;
        if ((v77[*(_QWORD *)(v76[0] - 24) + 16] & 2) != 0)
        {
          v8 = v71;
          v10 = v68;
          goto LABEL_105;
        }
      }
      v37 = (v29 & (v29 - 1)) != 0;
      if (v29 < 3)
        v37 = 1;
      v38 = v37 | (2 * v29);
      v39 = vcvtps_u32_f32(v35 / v36);
      if (v38 <= v39)
        prime = v39;
      else
        prime = v38;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
        v29 = a2[1];
      }
      if (prime <= v29)
      {
        if (prime >= v29)
          goto LABEL_70;
        v51 = vcvtps_u32_f32((float)(unint64_t)a2[3] / *((float *)a2 + 8));
        if (v29 < 3 || (v52 = (uint8x8_t)vcnt_s8((int8x8_t)v29), v52.i16[0] = vaddlv_u8(v52), v52.u32[0] > 1uLL))
        {
          v51 = std::__next_prime(v51);
        }
        else
        {
          v53 = 1 << -(char)__clz(v51 - 1);
          if (v51 >= 2)
            v51 = v53;
        }
        if (prime <= v51)
          prime = v51;
        if (prime >= v29)
        {
          v29 = a2[1];
LABEL_70:
          if ((v29 & (v29 - 1)) != 0)
          {
            if (v28 >= v29)
              v10 = v28 % v29;
            else
              v10 = v28;
          }
          else
          {
            v10 = (v29 - 1) & v28;
          }
          goto LABEL_83;
        }
        if (!prime)
        {
          v66 = (void *)*a2;
          *a2 = 0;
          if (v66)
            operator delete(v66);
          v29 = 0;
          a2[1] = 0;
          goto LABEL_70;
        }
      }
      if (prime >> 61)
        sub_20ABAD09C();
      v41 = operator new(8 * prime);
      v42 = (void *)*a2;
      *a2 = (uint64_t)v41;
      if (v42)
        operator delete(v42);
      v43 = 0;
      a2[1] = prime;
      do
        *(_QWORD *)(*a2 + 8 * v43++) = 0;
      while (prime != v43);
      v44 = (_QWORD *)*v11;
      if (!*v11)
      {
LABEL_69:
        v29 = prime;
        goto LABEL_70;
      }
      v45 = v44[1];
      v46 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v47 = v45 & v46;
        *(_QWORD *)(*a2 + 8 * v47) = v11;
        for (i = (_QWORD *)*v44; *v44; i = (_QWORD *)*v44)
        {
          v49 = i[1] & v46;
          if (v49 == v47)
          {
            v44 = i;
          }
          else if (*(_QWORD *)(*a2 + 8 * v49))
          {
            *v44 = *i;
            v50 = 8 * v49;
            *i = **(_QWORD **)(*a2 + v50);
            **(_QWORD **)(*a2 + v50) = i;
          }
          else
          {
            *(_QWORD *)(*a2 + 8 * v49) = v44;
            v44 = i;
            v47 = v49;
          }
        }
        goto LABEL_69;
      }
      if (v45 >= prime)
        v45 %= prime;
      *(_QWORD *)(*a2 + 8 * v45) = v11;
      v54 = (_QWORD *)*v44;
      if (!*v44)
        goto LABEL_69;
      while (1)
      {
        v56 = v54[1];
        if (v56 >= prime)
          v56 %= prime;
        if (v56 != v45)
        {
          if (!*(_QWORD *)(*a2 + 8 * v56))
          {
            *(_QWORD *)(*a2 + 8 * v56) = v44;
            goto LABEL_74;
          }
          *v44 = *v54;
          v55 = 8 * v56;
          *v54 = **(_QWORD **)(*a2 + v55);
          **(_QWORD **)(*a2 + v55) = v54;
          v54 = v44;
        }
        v56 = v45;
LABEL_74:
        v44 = v54;
        v54 = (_QWORD *)*v54;
        v45 = v56;
        if (!v54)
          goto LABEL_69;
      }
    }
  }
LABEL_105:
  v76[0] = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)v76 + *(_QWORD *)(v76[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  MEMORY[0x20BD2CD80](v77);
  std::istream::~istream();
  MEMORY[0x20BD2D008](v79);
  v71 = 0;
  if (v8)
  {
    if (v8[23] < 0)
      operator delete(*(void **)v8);
    MEMORY[0x20BD2D02C](v8, 0x1012C40EC159624);
  }
  if (v70 < 0)
    operator delete(*(void **)__s);
  return v10 != 0;
}

uint64_t cva::adp::Session<double>::setDataPath(uint64_t a1, __int128 **this)
{
  __int128 *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  const char *v9;
  uint64_t v10;

  cva::adp::io::Paths::sensorsDirectory(this, &v10);
  v4 = *this;
  if (*((char *)*this + 23) < 0)
    v4 = *(__int128 **)v4;
  v5 = access((const char *)v4, 0);
  v6 = v10;
  if (v5)
  {
    v7 = 0;
    v10 = 0;
    if (v6)
      goto LABEL_5;
  }
  else
  {
    v9 = (const char *)v10;
    if (*(char *)(v10 + 23) < 0)
      v9 = *(const char **)v10;
    if (access(v9, 0))
    {
      v7 = 0;
      v10 = 0;
      if ((*(char *)(v6 + 23) & 0x80000000) == 0)
        goto LABEL_7;
      goto LABEL_6;
    }
    if ((__int128 **)(a1 + 96) != this)
      std::string::operator=(*(std::string **)(a1 + 96), (const std::string *)*this);
    std::string::operator=(*(std::string **)(a1 + 104), (const std::string *)v6);
    v7 = 1;
    v6 = v10;
    v10 = 0;
    if (v6)
    {
LABEL_5:
      if ((*(char *)(v6 + 23) & 0x80000000) == 0)
      {
LABEL_7:
        MEMORY[0x20BD2D02C](v6, 0x1012C40EC159624);
        return v7;
      }
LABEL_6:
      operator delete(*(void **)v6);
      goto LABEL_7;
    }
  }
  return v7;
}

uint64_t cva::adp::Session<double>::setDataPath(uint64_t a1, const std::string **a2, const std::string **a3)
{
  const char *v6;
  int v7;
  uint64_t result;
  const char *v9;
  int v10;

  v6 = (const char *)*a2;
  if (SHIBYTE((*a2)->__r_.__value_.__r.__words[2]) < 0)
    v6 = *(const char **)v6;
  v7 = access(v6, 0);
  result = 0;
  if (!v7)
  {
    v9 = (const char *)*a3;
    if (SHIBYTE((*a3)->__r_.__value_.__r.__words[2]) < 0)
      v9 = *(const char **)v9;
    v10 = access(v9, 0);
    result = 0;
    if (!v10)
    {
      if ((const std::string **)(a1 + 96) != a2)
        std::string::operator=(*(std::string **)(a1 + 96), *a2);
      if ((const std::string **)(a1 + 104) != a3)
        std::string::operator=(*(std::string **)(a1 + 104), *a3);
      return 1;
    }
  }
  return result;
}

uint64_t cva::adp::Session<double>::serializer(uint64_t a1)
{
  return a1 + 56;
}

uint64_t cva::adp::Session<double>::dataPath(uint64_t a1)
{
  return a1 + 96;
}

uint64_t cva::adp::Session<double>::sensorsPath(uint64_t a1)
{
  return a1 + 104;
}

_QWORD *cva::operator<<(_QWORD *a1, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v4;
  _BYTE *p_p;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 *v11;
  unint64_t v12;
  __int128 v13;
  char v14;
  void *v15;
  uint64_t v16;
  void *__p;
  unint64_t v19;
  int64_t v20;

  v2 = a2[1];
  if (v2 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v4 = *a2;
  if (v2 > 0x16)
  {
    v7 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17)
      v7 = v2 | 7;
    v8 = v7 + 1;
    p_p = operator new(v7 + 1);
    v19 = v2;
    v20 = v8 | 0x8000000000000000;
    __p = p_p;
    if (v2 < 0x20)
    {
      v6 = (char *)v4;
    }
    else
    {
      v6 = (char *)v4;
      if ((unint64_t)&p_p[-v4] >= 0x20)
      {
        v9 = v2 & 0x7FFFFFFFFFFFFFE0;
        v6 = (char *)(v4 + (v2 & 0xFFFFFFFFFFFFFFE0));
        v10 = p_p + 16;
        v11 = (__int128 *)(v4 + 16);
        v12 = v2 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v13 = *v11;
          *(v10 - 1) = *(v11 - 1);
          *v10 = v13;
          v10 += 2;
          v11 += 2;
          v12 -= 32;
        }
        while (v12);
        p_p += v9;
        if (v2 == v9)
          goto LABEL_15;
      }
    }
    goto LABEL_14;
  }
  HIBYTE(v20) = a2[1];
  p_p = &__p;
  v6 = (char *)v4;
  if (v2)
  {
    do
    {
LABEL_14:
      v14 = *v6++;
      *p_p++ = v14;
    }
    while (v6 != (char *)(v4 + v2));
  }
LABEL_15:
  *p_p = 0;
  if (v20 >= 0)
    v15 = &__p;
  else
    v15 = __p;
  if (v20 >= 0)
    v16 = HIBYTE(v20);
  else
    v16 = v19;
  sub_20AB89270(a1, (uint64_t)v15, v16);
  if (SHIBYTE(v20) < 0)
    operator delete(__p);
  return a1;
}

cva::MatrixRasterizerEngine *cva::MatrixRasterizerEngine::MatrixRasterizerEngine(cva::MatrixRasterizerEngine *this, int a2, int a3, double a4, unsigned int a5, unsigned __int32 a6, int a7)
{
  int v7;
  int32x2_t v9;
  float32x2_t v10;
  float32x2_t v11;
  int32x2_t v12;
  float v13;
  float32x2_t v14;
  float v15;
  uint64_t v16;
  int32x2_t v17;
  int v18;
  float v19;
  float v20;
  int v21;
  int32x2_t v22;
  uint64_t v23;
  uint64_t v24;
  int v26;
  unsigned int v27;
  int32x4_t v28;
  BOOL v29;
  int32x4_t v30;
  unsigned __int128 v31;
  int v32;
  int32x4_t v33;
  unint64_t v34;
  void *v36;
  void *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  size_t *v43;
  size_t *v44;
  __int128 v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  _DWORD *v52;
  _DWORD *v53;
  int v54;
  int32x2_t v56;
  size_t size[2];
  int v58;

  v7 = a7;
  *(_DWORD *)this = a3;
  *((_DWORD *)this + 1) = a2;
  *((_DWORD *)this + 2) = LODWORD(a4);
  *((_BYTE *)this + 20) = a7;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = 0;
  if (*(float *)&a4 >= 1.0)
  {
    *(float *)&a4 = floorf(*(float *)&a4 + 0.5);
    *((_DWORD *)this + 2) = LODWORD(a4);
  }
  v9 = *(int32x2_t *)this;
  v10 = vcvt_f32_u32(*(uint32x2_t *)this);
  v11 = vmul_n_f32(v10, *(float *)&a4);
  v12 = vmax_s32(vadd_s32(vdup_n_s32(*(float *)&a4 >= 2.0), vcvt_s32_f32((float32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(*(float *)&a4 < 1.0), 0x1FuLL)), (int8x8_t)vrndp_f32(v11), (int8x8_t)v11))), (int32x2_t)0x100000001);
  *(int32x2_t *)((char *)this + 12) = v12;
  if (a5 && v12.i32[0] > a5 || a6 && v12.i32[1] > a6)
  {
    a4 = COERCE_DOUBLE(vdiv_f32(vcvt_f32_u32((uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a6, a5), (int32x2_t)vcge_u32((uint32x2_t)__PAIR64__(a6, a5), (uint32x2_t)vadd_s32(v9, v9)))), v10));
    if (*((float *)&a4 + 1) < *(float *)&a4)
      *(float *)&a4 = *((float *)&a4 + 1);
    v13 = floorf(*(float *)&a4);
    if (*(float *)&a4 > 1.0)
      *(float *)&a4 = v13;
    *((_DWORD *)this + 2) = LODWORD(a4);
    v14 = vmul_n_f32(v10, *(float *)&a4);
    v12 = vmax_s32(vadd_s32(vdup_n_s32(*(float *)&a4 >= 2.0), vcvt_s32_f32((float32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(*(float *)&a4 < 1.0), 0x1FuLL)), (int8x8_t)vrndp_f32(v14), (int8x8_t)v14))), (int32x2_t)0x100000001);
    *(int32x2_t *)((char *)this + 12) = v12;
  }
  v15 = 1.0;
  if (*(float *)&a4 >= 1.0)
  {
    v18 = (int)(float)(*(float *)&a4 + 0.5);
    if (v18 < 2)
    {
      v21 = 219;
    }
    else
    {
      v19 = (float)(fminf((float)(v18 - 1) * 0.5, 1.0) * -0.25) + 1.0;
      v20 = v19 * 255.0;
      v15 = (float)((float)((float)((float)v18 * 0.86111) * (float)v18) - (float)(v19 * (float)(2 * v18 - 1)))
          / (float)((v18 - 1) * (v18 - 1));
      v21 = (int)v20;
    }
    if (v21 >= 255)
      v21 = 255;
    if ((int)(float)(v15 * 255.0) >= 255)
      v26 = 255;
    else
      v26 = (int)(float)(v15 * 255.0);
    v27 = v21 & ~(v21 >> 31);
    v28 = vdupq_n_s32(v27);
    v29 = v15 >= 0.875 || *(float *)&a4 < 3.0;
    v30 = (int32x4_t)vandq_s8((int8x16_t)vmulq_s32(v28, (int32x4_t)xmmword_20AC05CC0), (int8x16_t)xmmword_20AC05CD0);
    v31 = *(_OWORD *)&vshrq_n_u32((uint32x4_t)vorrq_s8(vandq_s8((int8x16_t)vmulq_s32(v28, (int32x4_t)xmmword_20AC05CA0), (int8x16_t)xmmword_20AC05CB0), (int8x16_t)v30), 8uLL) | __PAIR128__(0xFF000000FF000000, 0xFF000000FF000000);
    v32 = v26 & ~(v26 >> 31);
    if (!v29)
      v32 = 223;
    v30.i64[0] = __PAIR64__(v32, v27);
    *(_OWORD *)((char *)this + 120) = v31;
    v33 = vzip1q_s32(v30, vdupq_lane_s32((int32x2_t)__PAIR64__(v32, v27), 1));
    *(_OWORD *)((char *)this + 136) = *(_OWORD *)&vshrq_n_u32((uint32x4_t)vorrq_s8(vandq_s8((int8x16_t)vmulq_s32(v33, (int32x4_t)xmmword_20AC05CE0), (int8x16_t)xmmword_20AC05CF0), vandq_s8((int8x16_t)vmulq_s32(v33, (int32x4_t)xmmword_20AC05D00), (int8x16_t)xmmword_20AC05D10)), 8uLL) | __PAIR128__(0xFF000000FF000000, 0xFF000000FF000000);
    *((_DWORD *)this + 38) = (((16646224 * v32) & 0xFF00FF00 | (43264 * v32) & 0xFF0000) >> 8) | 0xFF000000;
    *((_DWORD *)this + 39) = (((16449607 * v32) & 0xFF00FF00 | (23808 * v32) & 0x7F0000) >> 8) | 0xFF000000;
    *((_QWORD *)this + 3) = 0;
    if (a7)
    {
      *((_QWORD *)this + 4) = v12.u32[1] | ((unint64_t)v12.u32[0] << 32);
      *((_QWORD *)this + 5) = ((unint64_t)(((4 * v12.i32[1] + 15) & 0xFFFFFFF0) >> 4) << 36) | 4;
      size[0] = 0;
      v34 = ((4 * v12.i32[1] + 15) & 0xFFFFFFF0) * (unint64_t)v12.u32[0];
    }
    else
    {
      *((int32x2_t *)this + 4) = v12;
      *((_QWORD *)this + 5) = ((unint64_t)(((4 * v12.i32[0] + 15) & 0xFFFFFFF0) >> 4) << 36) | 4;
      size[0] = 0;
      v34 = ((4 * v12.i32[0] + 15) & 0xFFFFFFF0) * (unint64_t)v12.u32[1];
    }
    size[0] = v34;
    if (v34)
      *((_QWORD *)this + 6) = malloc_type_malloc(size[0], 0xA153FF5uLL);
    else
      *((_QWORD *)this + 6) = 0;
  }
  else
  {
    v56 = v12;
    *(_OWORD *)((char *)this + 120) = xmmword_20AC05D20;
    *((_QWORD *)this + 19) = 0xFFD64F3CFFD99044;
    *(_OWORD *)((char *)this + 136) = xmmword_20AC05D30;
    if ((float)(logf(0.25 / (float)(*(float *)&a4 * *(float *)&a4)) / 0.69315) >= 24.0)
    {
      fwrite("error: roundoff will occur", 0x1AuLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
      v17 = *(int32x2_t *)((char *)this + 12);
      v7 = *((unsigned __int8 *)this + 20);
      v16 = *((_QWORD *)this + 8);
    }
    else
    {
      v16 = 0;
      v17 = v56;
    }
    v22 = vadd_s32(v17, (int32x2_t)0x100000001);
    *(int32x2_t *)((char *)this + 12) = v22;
    if (v7)
    {
      v23 = v22.u32[1];
      v24 = v22.u32[0];
      if (v22.i32[1] <= v16 && v22.i32[0] <= HIDWORD(v16))
      {
LABEL_49:
        *((_QWORD *)this + 7) = 0;
        *((_QWORD *)this + 8) = v23 | (v24 << 32);
        goto LABEL_53;
      }
    }
    else
    {
      v23 = v22.u32[0];
      v24 = v22.u32[1];
      if (v22.i32[0] <= v16 && v22.i32[1] <= HIDWORD(v16))
        goto LABEL_49;
    }
    v36 = (void *)*((_QWORD *)this + 10);
    if (v36)
    {
      free(v36);
      *((_QWORD *)this + 10) = 0;
    }
    *((_QWORD *)this + 7) = 0;
    *((_QWORD *)this + 8) = v23 | (v24 << 32);
    *((_QWORD *)this + 9) = ((unint64_t)(((20 * (_DWORD)v23 + 15) & 0xFFFFFFF0) >> 4) << 36) | 0x14;
    size[0] = ((20 * (_DWORD)v23 + 15) & 0xFFFFFFF0) * (unint64_t)v24;
    if (size[0])
      v37 = malloc_type_malloc(size[0], 0xA153FF5uLL);
    else
      v37 = 0;
    *((_QWORD *)this + 10) = v37;
  }
LABEL_53:
  if (*((float *)this + 2) >= 1.0)
  {
    v47 = *((_QWORD *)this + 6);
    if (v47)
    {
      v48 = *((_QWORD *)this + 5);
      v49 = (*((_DWORD *)this + 9) * HIDWORD(v48));
      if ((_DWORD)v49)
      {
        v50 = 0;
        v51 = *((_DWORD *)this + 8);
        v52 = (_DWORD *)(v47 + *((_QWORD *)this + 3));
        v53 = (_DWORD *)((char *)v52 + v49);
        do
        {
          *v52 = -1;
          v52 = (_DWORD *)((char *)v52 + v48);
          v54 = v50 + 1;
          if (v50 + 1 == v51)
            v50 = 0;
          else
            ++v50;
          if (v54 == v51)
            v52 = (_DWORD *)((char *)v52 + HIDWORD(v48) - (v54 * v48));
        }
        while (v52 != v53);
      }
    }
  }
  else
  {
    size[0] = 0;
    size[1] = 0;
    v58 = 0;
    v38 = *((_QWORD *)this + 10);
    if (v38)
    {
      v39 = *((_QWORD *)this + 9);
      v40 = (*((_DWORD *)this + 17) * HIDWORD(v39));
      if ((_DWORD)v40)
      {
        v41 = 0;
        v42 = *((_DWORD *)this + 16);
        v43 = (size_t *)(v38 + *((_QWORD *)this + 7));
        v44 = (size_t *)((char *)v43 + v40);
        do
        {
          if (v43 == size)
          {
            v43 = size;
          }
          else
          {
            v45 = *(_OWORD *)size;
            *((_DWORD *)v43 + 4) = v58;
            *(_OWORD *)v43 = v45;
          }
          v43 = (size_t *)((char *)v43 + v39);
          v46 = v41 + 1;
          if (v41 + 1 == v42)
            v41 = 0;
          else
            ++v41;
          if (v46 == v42)
            v43 = (size_t *)((char *)v43 + HIDWORD(v39) - (v46 * v39));
        }
        while (v43 != v44);
      }
    }
  }
  return this;
}

float32x2_t cva::MatrixRasterizerEngine::calculateImageSize(cva::MatrixRasterizerEngine *this, unsigned int a2, unsigned __int32 a3)
{
  float v3;
  unsigned int v4;
  unsigned int v5;
  int32x2_t v6;
  float32x2_t result;
  float32x2_t v8;
  int32x2_t v9;
  float32x2_t v10;
  float v11;
  float32x2_t v12;

  v3 = *((float *)this + 2);
  if (v3 >= 1.0)
  {
    v3 = floorf(v3 + 0.5);
    *((float *)this + 2) = v3;
  }
  v4 = v3 < 1.0;
  v5 = v3 >= 2.0;
  v6 = *(int32x2_t *)this;
  result = vcvt_f32_u32(*(uint32x2_t *)this);
  v8 = vmul_n_f32(result, v3);
  v9 = vmax_s32(vadd_s32(vdup_n_s32(v5), vcvt_s32_f32((float32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v4), 0x1FuLL)), (int8x8_t)vrndp_f32(v8), (int8x8_t)v8))), (int32x2_t)0x100000001);
  *(int32x2_t *)((char *)this + 12) = v9;
  if (a2 && v9.i32[0] > a2 || a3 && v9.i32[1] > a3)
  {
    v10 = vdiv_f32(vcvt_f32_u32((uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a3, a2), (int32x2_t)vcge_u32((uint32x2_t)__PAIR64__(a3, a2), (uint32x2_t)vadd_s32(v6, v6)))), result);
    if (v10.f32[1] < v10.f32[0])
      v10.f32[0] = v10.f32[1];
    v11 = floorf(v10.f32[0]);
    if (v10.f32[0] > 1.0)
      v10.f32[0] = v11;
    *((_DWORD *)this + 2) = v10.i32[0];
    v12 = vmul_n_f32(result, v10.f32[0]);
    result = (float32x2_t)vmax_s32(vadd_s32(vdup_n_s32(v10.f32[0] >= 2.0), vcvt_s32_f32((float32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v10.f32[0] < 1.0), 0x1FuLL)), (int8x8_t)vrndp_f32(v12), (int8x8_t)v12))), (int32x2_t)0x100000001);
    *(float32x2_t *)((char *)this + 12) = result;
  }
  return result;
}

__n128 cva::MatrixRasterizerEngine::calculateMeanBrightnessPreservingColors(cva::MatrixRasterizerEngine *this, __n128 result)
{
  float v2;
  float v3;
  int v4;
  float v5;
  float v6;
  int v7;
  int v8;
  BOOL v9;
  unsigned int v10;
  int32x4_t v11;
  unsigned __int128 v12;
  int v13;
  int32x4_t v14;

  v2 = *((float *)this + 2);
  v3 = 1.0;
  if (v2 >= 1.0)
  {
    v4 = (int)(float)(v2 + 0.5);
    if (v4 < 2)
    {
      v7 = 219;
    }
    else
    {
      v5 = (float)(fminf((float)(v4 - 1) * 0.5, 1.0) * -0.25) + 1.0;
      v6 = v5 * 255.0;
      v3 = (float)((float)((float)((float)v4 * 0.86111) * (float)v4) - (float)(v5 * (float)(2 * v4 - 1)))
         / (float)((v4 - 1) * (v4 - 1));
      v7 = (int)v6;
    }
    if (v7 >= 255)
      v7 = 255;
    if ((int)(float)(v3 * 255.0) >= 255)
      v8 = 255;
    else
      v8 = (int)(float)(v3 * 255.0);
    v9 = v3 >= 0.875 || v2 < 3.0;
    v10 = v7 & ~(v7 >> 31);
    v11 = vdupq_n_s32(v10);
    v12 = *(_OWORD *)&vshrq_n_u32((uint32x4_t)vorrq_s8(vandq_s8((int8x16_t)vmulq_s32(v11, (int32x4_t)xmmword_20AC05CA0), (int8x16_t)xmmword_20AC05CB0), vandq_s8((int8x16_t)vmulq_s32(v11, (int32x4_t)xmmword_20AC05CC0), (int8x16_t)xmmword_20AC05CD0)), 8uLL) | __PAIR128__(0xFF000000FF000000, 0xFF000000FF000000);
    *(_OWORD *)((char *)this + 120) = v12;
    v13 = v8 & ~(v8 >> 31);
    if (!v9)
      v13 = 223;
    *(_QWORD *)&v12 = __PAIR64__(v13, v10);
    v14 = vzip1q_s32((int32x4_t)v12, vdupq_lane_s32((int32x2_t)__PAIR64__(v13, v10), 1));
    result = (__n128)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)vorrq_s8(vandq_s8((int8x16_t)vmulq_s32(v14, (int32x4_t)xmmword_20AC05CE0), (int8x16_t)xmmword_20AC05CF0), vandq_s8((int8x16_t)vmulq_s32(v14, (int32x4_t)xmmword_20AC05D00), (int8x16_t)xmmword_20AC05D10)), 8uLL) | __PAIR128__(0xFF000000FF000000, 0xFF000000FF000000));
    *(__n128 *)((char *)this + 136) = result;
    *((_DWORD *)this + 38) = (((16646224 * v13) & 0xFF00FF00 | (43264 * v13) & 0xFF0000) >> 8) | 0xFF000000;
    *((_DWORD *)this + 39) = (((16449607 * v13) & 0xFF00FF00 | (23808 * v13) & 0x7F0000) >> 8) | 0xFF000000;
  }
  else
  {
    *(_OWORD *)((char *)this + 120) = xmmword_20AC05D20;
    *((_DWORD *)this + 38) = -2518972;
    result.n128_u64[0] = 0xFF5054A4FFD64F3CLL;
    *(_OWORD *)((char *)this + 136) = xmmword_20AC05D30;
    *((_DWORD *)this + 39) = -2732228;
  }
  return result;
}

uint64_t cva::MatrixRasterizerEngine::clear(uint64_t this)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  __int128 *v6;
  __int128 *v7;
  __int128 v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  _DWORD *v15;
  _DWORD *v16;
  int v17;
  __int128 v18;
  int v19;

  if (*(float *)(this + 8) >= 1.0)
  {
    v10 = *(_QWORD *)(this + 48);
    if (v10)
    {
      v11 = *(_QWORD *)(this + 40);
      v12 = (*(_DWORD *)(this + 36) * HIDWORD(v11));
      if ((_DWORD)v12)
      {
        v13 = 0;
        v14 = *(_DWORD *)(this + 32);
        v15 = (_DWORD *)(v10 + *(_QWORD *)(this + 24));
        v16 = (_DWORD *)((char *)v15 + v12);
        do
        {
          *v15 = -1;
          v15 = (_DWORD *)((char *)v15 + v11);
          v17 = v13 + 1;
          if (v13 + 1 == v14)
            v13 = 0;
          else
            ++v13;
          if (v17 == v14)
            v15 = (_DWORD *)((char *)v15 + HIDWORD(v11) - (v17 * v11));
        }
        while (v15 != v16);
      }
    }
  }
  else
  {
    v18 = 0uLL;
    v19 = 0;
    v1 = *(_QWORD *)(this + 80);
    if (v1)
    {
      v2 = *(_QWORD *)(this + 72);
      v3 = (*(_DWORD *)(this + 68) * HIDWORD(v2));
      if ((_DWORD)v3)
      {
        v4 = 0;
        v5 = *(_DWORD *)(this + 64);
        v6 = (__int128 *)(v1 + *(_QWORD *)(this + 56));
        v7 = (__int128 *)((char *)v6 + v3);
        do
        {
          if (v6 == &v18)
          {
            v6 = &v18;
          }
          else
          {
            v8 = v18;
            *((_DWORD *)v6 + 4) = v19;
            *v6 = v8;
          }
          v6 = (__int128 *)((char *)v6 + v2);
          v9 = v4 + 1;
          if (v4 + 1 == v5)
            v4 = 0;
          else
            ++v4;
          if (v9 == v5)
            v6 = (__int128 *)((char *)v6 + HIDWORD(v2) - (v9 * v2));
        }
        while (v6 != v7);
      }
    }
  }
  return this;
}

char *cva::MatrixRasterizerEngine::getImage32(cva::MatrixRasterizerEngine *this)
{
  if (*((float *)this + 2) < 1.0)
    return cva::MatrixRasterizerEngine::convertFloatImage(this);
  if (*((_BYTE *)this + 20))
    return cva::MatrixRasterizerEngine::transposeRGBImage(this);
  return (char *)this + 24;
}

char *cva::MatrixRasterizerEngine::transposeRGBImage(cva::MatrixRasterizerEngine *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v6;
  void *v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  int v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  unint64_t size;

  v2 = (char *)this + 88;
  v4 = *((unsigned int *)this + 3);
  v3 = *((unsigned int *)this + 4);
  if (v4 > *((_DWORD *)this + 24) || v3 > *((_DWORD *)this + 25))
  {
    v6 = (void *)*((_QWORD *)this + 14);
    if (v6)
    {
      free(v6);
      *((_QWORD *)this + 14) = 0;
    }
    *((_QWORD *)this + 11) = 0;
    *((_QWORD *)this + 12) = v4 | (v3 << 32);
    *((_QWORD *)this + 13) = ((unint64_t)(((4 * (_DWORD)v4 + 15) & 0xFFFFFFF0) >> 4) << 36) | 4;
    size = v3 * (unint64_t)((4 * (_DWORD)v4 + 15) & 0xFFFFFFF0);
    if (size)
      v7 = malloc_type_malloc(size, 0xA153FF5uLL);
    else
      v7 = 0;
    *((_QWORD *)this + 14) = v7;
    LODWORD(v4) = *((_DWORD *)this + 3);
    LODWORD(v3) = *((_DWORD *)this + 4);
  }
  else
  {
    *((_QWORD *)this + 11) = 0;
    *((_QWORD *)this + 12) = v4 | (v3 << 32);
  }
  v8 = *((_QWORD *)this + 6);
  if (v8)
    v9 = (_DWORD *)(v8 + *((_QWORD *)this + 3));
  else
    v9 = 0;
  if ((int)v4 >= 1 && (int)v3 >= 1)
  {
    v10 = 0;
    v11 = 0;
    v12 = *((_QWORD *)this + 5);
    v13 = *((_DWORD *)this + 8);
    v14 = *((_QWORD *)this + 14);
    v15 = *((_QWORD *)this + 11);
    do
    {
      v16 = 0;
      do
      {
        *(_DWORD *)(v14 + v15 + (*((_DWORD *)this + 26) * v10 + *((_DWORD *)this + 27) * v16++)) = *v9;
        v9 = (_DWORD *)((char *)v9 + v12);
        v17 = v11 + 1;
        if (v11 + 1 == v13)
          v11 = 0;
        else
          ++v11;
        if (v17 == v13)
          v9 = (_DWORD *)((char *)v9 + HIDWORD(v12) - (v17 * v12));
      }
      while ((_DWORD)v3 != v16);
      ++v10;
    }
    while (v10 != (_DWORD)v4);
  }
  return v2;
}

char *cva::MatrixRasterizerEngine::convertFloatImage(cva::MatrixRasterizerEngine *this)
{
  float v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  void *v7;
  void *v8;
  size_t v9;
  char *v10;
  uint64_t v11;
  size_t v12;
  char *v13;
  float v14;
  unsigned int v15;
  float v16;
  int v17;
  float v18;
  float *v19;
  float v20;
  float v21;
  int v22;
  unsigned int i;
  float v24;
  int v25;
  float v26;
  float *v27;
  float v28;
  float v29;
  int v30;
  float *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  float *v39;
  float *v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  float *v44;
  int v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  int v58;
  unsigned int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  int v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  int v73;
  unsigned int v74;
  int v75;
  unsigned int v76;
  int v77;
  int v78;
  unsigned int v79;
  int v80;
  unsigned int v81;
  int v82;
  int v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  char *v90;
  uint64_t v92;
  unint64_t size;

  v2 = *((float *)this + 2);
  v3 = *((_DWORD *)this + 3);
  v4 = v3 - 1;
  v5 = (*((_DWORD *)this + 4) - 1);
  if (v4 > *((_DWORD *)this + 24) || v5 > *((_DWORD *)this + 25))
  {
    v7 = (void *)*((_QWORD *)this + 14);
    if (v7)
    {
      free(v7);
      *((_QWORD *)this + 14) = 0;
    }
    *((_QWORD *)this + 11) = 0;
    *((_QWORD *)this + 12) = v4 | (v5 << 32);
    *((_QWORD *)this + 13) = ((unint64_t)(((4 * (_DWORD)v4 + 15) & 0xFFFFFFF0) >> 4) << 36) | 4;
    size = ((4 * (_DWORD)v4 + 15) & 0xFFFFFFF0) * (unint64_t)v5;
    if (size)
      v8 = malloc_type_malloc(size, 0xA153FF5uLL);
    else
      v8 = 0;
    *((_QWORD *)this + 14) = v8;
    v3 = *((_DWORD *)this + 3);
    if (v3)
    {
LABEL_11:
      v9 = 4 * v3;
      v10 = (char *)operator new(v9);
      bzero(v10, v9);
      v11 = *((unsigned int *)this + 4);
      if ((_DWORD)v11)
        goto LABEL_12;
      goto LABEL_17;
    }
  }
  else
  {
    *((_QWORD *)this + 11) = 0;
    *((_QWORD *)this + 12) = v4 | (v5 << 32);
    if (v3)
      goto LABEL_11;
  }
  v10 = 0;
  v11 = *((unsigned int *)this + 4);
  if ((_DWORD)v11)
  {
LABEL_12:
    v12 = 4 * v11;
    v13 = (char *)operator new(4 * v11);
    bzero(v13, v12);
    v14 = *(float *)this;
    if (!*(_DWORD *)this)
      goto LABEL_20;
    goto LABEL_18;
  }
LABEL_17:
  v13 = 0;
  v14 = *(float *)this;
  if (!*(_DWORD *)this)
    goto LABEL_20;
LABEL_18:
  v15 = 0;
  do
  {
    v16 = v2 * (float)v15;
    v17 = (int)v16;
    v18 = v16 - (float)(int)v16;
    v19 = (float *)&v10[4 * v17];
    v20 = (float)(1.0 - v18) + *v19;
    v21 = v18 + v19[1];
    *v19 = v20;
    v19[1] = v21;
    ++v15;
  }
  while (LODWORD(v14) != v15);
LABEL_20:
  v22 = *((_DWORD *)this + 1);
  if (v22)
  {
    for (i = 0; i != v22; ++i)
    {
      v24 = v2 * (float)i;
      v25 = (int)v24;
      v26 = v24 - (float)(int)v24;
      v27 = (float *)&v13[4 * v25];
      v28 = (float)(1.0 - v26) + *v27;
      v29 = v26 + v27[1];
      *v27 = v28;
      v27[1] = v29;
    }
  }
  v30 = *((unsigned __int8 *)this + 20);
  if (*((_BYTE *)this + 20))
    v31 = (float *)v10;
  else
    v31 = (float *)v13;
  if (*((_BYTE *)this + 20))
    v10 = v13;
  v92 = (*((_DWORD *)this + 17) - 1);
  if ((int)v92 >= 1)
  {
    v32 = (*((_DWORD *)this + 16) - 1);
    if ((int)v32 >= 1)
    {
      v33 = 0;
      v34 = 0;
      v35 = *((_DWORD *)this + 16);
      v37 = *((_QWORD *)this + 9);
      v36 = *((_QWORD *)this + 10);
      v38 = HIDWORD(v37);
      if (v36)
        v39 = (float *)(v36 + *((_QWORD *)this + 7));
      else
        v39 = 0;
      do
      {
        v42 = 0;
        do
        {
          v46 = v39[1];
          v47 = v39[2];
          v48 = v39[3];
          v49 = v39[4];
          v50 = (float)((float)((float)(*v39 + v46) + v47) + v48) + v49;
          if (v50 == 0.0)
          {
            v86 = *((_QWORD *)this + 14);
            v87 = *((_QWORD *)this + 11);
            v89 = *((_DWORD *)this + 26);
            if (v30)
              v43 = v89 * v33 + *((_DWORD *)this + 27) * v42;
            else
              v43 = v89 * v42 + *((_DWORD *)this + 27) * v33;
            v85 = -1;
          }
          else
          {
            v51 = v31[v33] * *(float *)&v10[4 * v42];
            v52 = *v39 / v51;
            v53 = v46 / v51;
            v54 = v47 / v51;
            v55 = v48 / v51;
            v56 = v50 / v51;
            v57 = v49 / v51;
            if (v56 > 1.0)
            {
              v52 = v52 / v56;
              v53 = v53 / v56;
              v54 = v54 / v56;
              v55 = v55 / v56;
              v57 = v57 / v56;
              v56 = 1.0;
            }
            v58 = (int)(float)((float)(1.0 - v56) * 255.0);
            if (v58 >= 255)
              v58 = 255;
            v59 = 16711935 * (v58 & ~(v58 >> 31));
            v60 = (v59 >> 8) & 0xFF00FF;
            v61 = v59 & 0xFF00;
            v62 = (int)(float)(v57 * 255.0);
            if (v62 >= 255)
              v62 = 255;
            v63 = v62 & ~(v62 >> 31);
            v65 = *((_DWORD *)this + 35);
            v64 = *((_DWORD *)this + 36);
            v66 = (((v64 & 0xFF00FF) * v63) >> 8) & 0xFF00FF;
            v67 = (((v64 >> 8) & 0xFF00FF) * v63) & 0xFF00FF00;
            v68 = (int)(float)(v55 * 255.0);
            if (v68 >= 255)
              v68 = 255;
            v69 = v68 & ~(v68 >> 31);
            v70 = *((_DWORD *)this + 37);
            v71 = (((v70 & 0xFF00FF) * v69) >> 8) & 0xFF00FF;
            v72 = (((v70 >> 8) & 0xFF00FF) * v69) & 0xFF00FF00;
            v73 = (int)(float)(v54 * 255.0);
            v74 = *((_DWORD *)this + 39);
            if (v73 >= 255)
              v73 = 255;
            v75 = v73 & ~(v73 >> 31);
            v76 = (((v74 & 0xFF00FF) * v75) >> 8) & 0xFF00FF;
            v77 = ((v74 >> 8) & 0xFF00FF) * v75;
            v78 = (int)(float)(v53 * 255.0);
            v79 = v77 & 0xFF00FF00;
            if (v78 >= 255)
              v78 = 255;
            v80 = v78 & ~(v78 >> 31);
            v81 = (((v65 & 0xFF00FF) * v80) >> 8) & 0xFF00FF;
            v82 = ((v65 >> 8) & 0xFF00FF) * v80;
            v83 = (int)(float)(v52 * 255.0);
            v84 = v82 & 0xFF00FF00;
            if (v83 >= 255)
              v83 = 255;
            v85 = (v66 | v67)
                + v72
                + v71
                + v79
                + v76
                + v84
                + v81
                + v61
                + v60
                + ((((*((_DWORD *)this + 38) & 0xFF00FF) * (v83 & ~(v83 >> 31))) >> 8) & 0xFF00FF | (((*((_DWORD *)this + 38) >> 8) & 0xFF00FF) * (v83 & ~(v83 >> 31))) & 0xFF00FF00);
            v86 = *((_QWORD *)this + 14);
            v87 = *((_QWORD *)this + 11);
            v88 = *((_DWORD *)this + 26);
            if (v30)
              v43 = v88 * v33 + *((_DWORD *)this + 27) * v42;
            else
              v43 = v88 * v42 + *((_DWORD *)this + 27) * v33;
          }
          *(_DWORD *)(v86 + v87 + v43) = v85;
          ++v42;
          v44 = (float *)((char *)v39 + v37);
          v45 = v34 + 1;
          v39 = (float *)((char *)v44 + v38 - ((v34 + 1) * v37));
          if (v34 + 1 == v35)
            v34 = 0;
          else
            ++v34;
          if (v45 != v35)
            v39 = v44;
        }
        while (v32 != v42);
        v40 = (float *)((char *)v39 + v37);
        v41 = v34 + 1;
        v39 = (float *)((char *)v40 + v38 - ((v34 + 1) * v37));
        if (v34 + 1 == v35)
          v34 = 0;
        else
          ++v34;
        if (v41 != v35)
          v39 = v40;
        ++v33;
      }
      while (v33 != v92);
    }
  }
  v90 = (char *)this + 88;
  if (v31)
    operator delete(v31);
  if (v10)
    operator delete(v10);
  return v90;
}

_BYTE *cva::MatrixRasterizerEngine::getImageRGB@<X0>(cva::MatrixRasterizerEngine *this@<X0>, _QWORD *a2@<X8>)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *result;
  int v9;
  int v10;
  int v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  _BYTE *v20;
  int v21;

  if (*((float *)this + 2) < 1.0)
  {
    v3 = cva::MatrixRasterizerEngine::convertFloatImage(this);
LABEL_5:
    v4 = v3;
    goto LABEL_7;
  }
  if (*((_BYTE *)this + 20))
  {
    v3 = cva::MatrixRasterizerEngine::transposeRGBImage(this);
    goto LABEL_5;
  }
  v4 = (char *)this + 24;
LABEL_7:
  v6 = *((unsigned int *)v4 + 2);
  v5 = *((unsigned int *)v4 + 3);
  v7 = (3 * (_DWORD)v6 + 15) & 0xFFFFFFF0;
  *a2 = 0;
  a2[1] = v6 | (v5 << 32);
  a2[2] = ((unint64_t)(((3 * (_DWORD)v6 + 15) & 0xFFFFFFF0) >> 4) << 36) | 3;
  if (v5 * (unint64_t)v7)
  {
    result = malloc_type_malloc(v5 * (unint64_t)v7, 0xA153FF5uLL);
    v9 = *((_DWORD *)v4 + 2);
    LODWORD(v5) = *((_DWORD *)v4 + 3);
  }
  else
  {
    result = 0;
    v9 = v6;
  }
  a2[3] = result;
  v10 = v5 * v9;
  if (v10 >= 1)
  {
    v11 = 0;
    v12 = 0;
    v13 = *((_QWORD *)v4 + 2);
    v14 = *((_QWORD *)v4 + 3);
    if (v14)
      v15 = (int *)(v14 + *(_QWORD *)v4);
    else
      v15 = 0;
    v16 = *((_DWORD *)v4 + 2);
    do
    {
      v17 = *v15;
      v18 = *v15 >> 8;
      *result = BYTE2(*v15);
      result[1] = v18;
      result[2] = v17;
      v15 = (int *)((char *)v15 + v13);
      v19 = v11 + 1;
      if (v11 + 1 == v16)
        v11 = 0;
      else
        ++v11;
      if (v19 == v16)
        v15 = (int *)((char *)v15 + HIDWORD(v13) - (v19 * v13));
      v20 = result + 3;
      v21 = v12 + 1;
      result = &result[v7 + 3 - (3 * (v12 + 1))];
      if (v12 + 1 == (_DWORD)v6)
        v12 = 0;
      else
        ++v12;
      if (v21 != (_DWORD)v6)
        result = v20;
      --v10;
    }
    while (v10);
  }
  return result;
}

uint64_t cva::MatrixRasterizerEngine::drawLargeElement(uint64_t this, int a2, int a3, int a4)
{
  int v4;
  int v5;
  int v6;
  int *v7;
  int *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int i;
  int v17;
  int v18;
  int v19;
  int v20;

  v4 = (int)(float)(*(float *)(this + 8) + 0.5);
  if (*(_BYTE *)(this + 20))
    v5 = a2;
  else
    v5 = a3;
  if (*(_BYTE *)(this + 20))
    v6 = a3;
  else
    v6 = a2;
  switch(a4)
  {
    case 0:
      v7 = (int *)(this + 152);
      v8 = (int *)(this + 132);
      break;
    case 1:
      v7 = (int *)(this + 140);
      v8 = (int *)(this + 120);
      break;
    case 2:
      v7 = (int *)(this + 156);
      v8 = (int *)(this + 136);
      break;
    case 3:
      v7 = (int *)(this + 148);
      v8 = (int *)(this + 128);
      break;
    default:
      v7 = (int *)(this + 144);
      v8 = (int *)(this + 124);
      break;
  }
  v9 = v5 * v4;
  v10 = *v8;
  v11 = v6 * v4;
  if (v4 < 2)
  {
    *(_DWORD *)(*(_QWORD *)(this + 48)
              + *(_QWORD *)(this + 24)
              + (*(_DWORD *)(this + 40) * v9 + *(_DWORD *)(this + 44) * v11)) = v10;
  }
  else
  {
    v12 = *v7;
    v13 = *(_QWORD *)(this + 48);
    v14 = 1;
    v15 = *(_QWORD *)(this + 24);
    do
    {
      for (i = 1; i != v4; ++i)
        *(_DWORD *)(v13 + v15 + (*(_DWORD *)(this + 40) * (v14 + v9) + *(_DWORD *)(this + 44) * (v11 + i))) = v12;
      ++v14;
    }
    while (v14 != v4);
    v17 = v11 + v4;
    v18 = v9 + v4;
    v19 = v9;
    v20 = v11;
    do
    {
      *(_DWORD *)(v13 + v15 + (*(_DWORD *)(this + 40) * v19++ + *(_DWORD *)(this + 44) * v11)) = v10;
      *(_DWORD *)(v13 + v15 + (*(_DWORD *)(this + 40) * v19 + *(_DWORD *)(this + 44) * v17)) = v10;
      *(_DWORD *)(v13 + v15 + (*(_DWORD *)(this + 40) * v9 + *(_DWORD *)(this + 44) * (v20 + 1))) = v10;
      *(_DWORD *)(v13 + v15 + (*(_DWORD *)(this + 40) * v18 + *(_DWORD *)(this + 44) * v20++)) = v10;
      --v4;
    }
    while (v4);
  }
  return this;
}

float cva::MatrixRasterizerEngine::drawSubpixelElement(cva::MatrixRasterizerEngine *this, unsigned int a2, unsigned int a3, unsigned int a4)
{
  float v4;
  unsigned int v5;
  float v6;
  unsigned int v7;
  float v8;
  float v9;
  unsigned int v10;
  float v11;
  unsigned int v12;
  float v13;
  float v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  float result;

  v4 = *((float *)this + 2);
  if (*((_BYTE *)this + 20))
    v5 = a2;
  else
    v5 = a3;
  v6 = (float)v5;
  if (*((_BYTE *)this + 20))
    v7 = a3;
  else
    v7 = a2;
  v8 = v4 * v6;
  v9 = (float)v7;
  v10 = v8;
  v11 = v4 * v9;
  v12 = v11;
  v13 = v8 - (float)v8;
  v14 = v11 - (float)v11;
  v15 = *((_DWORD *)this + 18);
  v16 = *((_DWORD *)this + 19);
  v17 = v15 * v10;
  v18 = v16 * v12;
  v19 = *((_QWORD *)this + 10) + *((_QWORD *)this + 7);
  v20 = 4 * a4;
  *(float *)(v19 + (v18 + v17) + v20) = *(float *)(v19 + (v18 + v17) + v20)
                                                    + (float)((float)(1.0 - v13) * (float)(1.0 - v14));
  *(float *)(v19 + (v15 + v17 + v18) + v20) = *(float *)(v19 + (v15 + v17 + v18) + v20)
                                                          + (float)(v13 * (float)(1.0 - v14));
  v21 = v16 + v18;
  *(float *)(v19 + (v21 + v17) + v20) = *(float *)(v19 + (v21 + v17) + v20)
                                                    + (float)(v14 * (float)(1.0 - v13));
  v22 = v19 + (v21 + v15 + v17);
  result = (float)(v13 * v14) + *(float *)(v22 + v20);
  *(float *)(v22 + v20) = result;
  return result;
}

void cva::adp::io::Paths::imagePoints(char *a1@<X8>)
{
  a1[23] = 13;
  strcpy(a1, "image-points.");
}

void cva::adp::io::Paths::scenePoints(char *a1@<X8>)
{
  a1[23] = 16;
  strcpy(a1, "scene-points.txt");
}

void cva::adp::io::Paths::tracks(char *a1@<X8>)
{
  a1[23] = 10;
  strcpy(a1, "tracks.txt");
}

void cva::adp::io::Paths::encoder(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "encoder.txt");
}

void cva::adp::io::Paths::trajectory(char *a1@<X8>)
{
  a1[23] = 9;
  strcpy(a1, "WtoP.traj");
}

void cva::adp::io::Paths::sensorsDirectory(__int128 **this@<X0>, uint64_t *a2@<X8>)
{
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  std::string::value_type __s[23];
  char v12;

  v12 = 8;
  strcpy(__s, "sensors/");
  v4 = *this;
  v5 = operator new();
  v6 = v5;
  if (*((char *)v4 + 23) < 0)
  {
    sub_20AB88C14((_BYTE *)v5, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v7 = *v4;
    *(_QWORD *)(v5 + 16) = *((_QWORD *)v4 + 2);
    *(_OWORD *)v5 = v7;
  }
  std::string::append((std::string *)v6, __s, 8uLL);
  v8 = operator new();
  v9 = v8;
  if (*(char *)(v6 + 23) < 0)
  {
    sub_20AB88C14((_BYTE *)v8, *(void **)v6, *(_QWORD *)(v6 + 8));
    v10 = *(char *)(v6 + 23);
    *a2 = v9;
    if (v10 < 0)
      operator delete(*(void **)v6);
  }
  else
  {
    *(_OWORD *)v8 = *(_OWORD *)v6;
    *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
    *a2 = v8;
  }
  MEMORY[0x20BD2D02C](v6, 0x1012C40EC159624);
  if (v12 < 0)
    operator delete(*(void **)__s);
}

uint64_t cva::adp::io::Paths::sensorDirectory@<X0>(__int128 **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  std::string::value_type __s[23];
  char v27;

  v27 = 8;
  strcpy(__s, "sensors/");
  v5 = *a1;
  v6 = operator new();
  v7 = v6;
  if (*((char *)v5 + 23) < 0)
  {
    sub_20AB88C14((_BYTE *)v6, *(void **)v5, *((_QWORD *)v5 + 1));
  }
  else
  {
    v8 = *v5;
    *(_QWORD *)(v6 + 16) = *((_QWORD *)v5 + 2);
    *(_OWORD *)v6 = v8;
  }
  std::string::append((std::string *)v7, __s, 8uLL);
  v9 = operator new();
  v10 = v9;
  if (*(char *)(v7 + 23) < 0)
  {
    sub_20AB88C14((_BYTE *)v9, *(void **)v7, *(_QWORD *)(v7 + 8));
    if (*(char *)(v7 + 23) < 0)
      operator delete(*(void **)v7);
  }
  else
  {
    *(_OWORD *)v9 = *(_OWORD *)v7;
    *(_QWORD *)(v9 + 16) = *(_QWORD *)(v7 + 16);
  }
  MEMORY[0x20BD2D02C](v7, 0x1012C40EC159624);
  if (v27 < 0)
    operator delete(*(void **)__s);
  v11 = operator new();
  v12 = v11;
  v13 = *(char *)(v10 + 23);
  if (v13 < 0)
  {
    sub_20AB88C14((_BYTE *)v11, *(void **)v10, *(_QWORD *)(v10 + 8));
  }
  else
  {
    *(_OWORD *)v11 = *(_OWORD *)v10;
    *(_QWORD *)(v11 + 16) = *(_QWORD *)(v10 + 16);
  }
  v14 = *(char *)(a2 + 23);
  if (v14 >= 0)
    v15 = (const std::string::value_type *)a2;
  else
    v15 = *(const std::string::value_type **)a2;
  if (v14 >= 0)
    v16 = *(unsigned __int8 *)(a2 + 23);
  else
    v16 = *(_QWORD *)(a2 + 8);
  std::string::append((std::string *)v12, v15, v16);
  v17 = operator new();
  v18 = v17;
  if (*(char *)(v12 + 23) < 0)
  {
    sub_20AB88C14((_BYTE *)v17, *(void **)v12, *(_QWORD *)(v12 + 8));
    if (*(char *)(v12 + 23) < 0)
      operator delete(*(void **)v12);
  }
  else
  {
    *(_OWORD *)v17 = *(_OWORD *)v12;
    *(_QWORD *)(v17 + 16) = *(_QWORD *)(v12 + 16);
  }
  MEMORY[0x20BD2D02C](v12, 0x1012C40EC159624);
  v27 = 1;
  strcpy(__s, "/");
  v19 = operator new();
  v20 = v19;
  v21 = *(char *)(v18 + 23);
  if (v21 < 0)
  {
    sub_20AB88C14((_BYTE *)v19, *(void **)v18, *(_QWORD *)(v18 + 8));
  }
  else
  {
    *(_OWORD *)v19 = *(_OWORD *)v18;
    *(_QWORD *)(v19 + 16) = *(_QWORD *)(v18 + 16);
  }
  std::string::append((std::string *)v20, __s, 1uLL);
  v22 = operator new();
  v23 = v22;
  if (*(char *)(v20 + 23) < 0)
  {
    sub_20AB88C14((_BYTE *)v22, *(void **)v20, *(_QWORD *)(v20 + 8));
    v24 = *(char *)(v20 + 23);
    *a3 = v23;
    if (v24 < 0)
      operator delete(*(void **)v20);
  }
  else
  {
    *(_OWORD *)v22 = *(_OWORD *)v20;
    *(_QWORD *)(v22 + 16) = *(_QWORD *)(v20 + 16);
    *a3 = v22;
  }
  MEMORY[0x20BD2D02C](v20, 0x1012C40EC159624);
  if ((v27 & 0x80000000) == 0)
  {
    if ((v21 & 0x80000000) == 0)
      goto LABEL_33;
    goto LABEL_32;
  }
  operator delete(*(void **)__s);
  if (v21 < 0)
LABEL_32:
    operator delete(*(void **)v18);
LABEL_33:
  MEMORY[0x20BD2D02C](v18, 0x1012C40EC159624);
  if (v13 < 0)
    operator delete(*(void **)v10);
  return MEMORY[0x20BD2D02C](v10, 0x1012C40EC159624);
}

void cva::adp::io::Paths::outputsDirectory(__int128 **this@<X0>, uint64_t *a2@<X8>)
{
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  std::string::value_type __s[8];
  char v12;

  v12 = 7;
  strcpy(__s, "output/");
  v4 = *this;
  v5 = operator new();
  v6 = v5;
  if (*((char *)v4 + 23) < 0)
  {
    sub_20AB88C14((_BYTE *)v5, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v7 = *v4;
    *(_QWORD *)(v5 + 16) = *((_QWORD *)v4 + 2);
    *(_OWORD *)v5 = v7;
  }
  std::string::append((std::string *)v6, __s, 7uLL);
  v8 = operator new();
  v9 = v8;
  if (*(char *)(v6 + 23) < 0)
  {
    sub_20AB88C14((_BYTE *)v8, *(void **)v6, *(_QWORD *)(v6 + 8));
    v10 = *(char *)(v6 + 23);
    *a2 = v9;
    if (v10 < 0)
      operator delete(*(void **)v6);
  }
  else
  {
    *(_OWORD *)v8 = *(_OWORD *)v6;
    *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
    *a2 = v8;
  }
  MEMORY[0x20BD2D02C](v6, 0x1012C40EC159624);
  if (v12 < 0)
    operator delete(*(void **)__s);
}

uint64_t cva::adp::io::Paths::outputDirectory@<X0>(__int128 **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  std::string::value_type __s[8];
  char v27;

  v27 = 7;
  strcpy(__s, "output/");
  v5 = *a1;
  v6 = operator new();
  v7 = v6;
  if (*((char *)v5 + 23) < 0)
  {
    sub_20AB88C14((_BYTE *)v6, *(void **)v5, *((_QWORD *)v5 + 1));
  }
  else
  {
    v8 = *v5;
    *(_QWORD *)(v6 + 16) = *((_QWORD *)v5 + 2);
    *(_OWORD *)v6 = v8;
  }
  std::string::append((std::string *)v7, __s, 7uLL);
  v9 = operator new();
  v10 = v9;
  if (*(char *)(v7 + 23) < 0)
  {
    sub_20AB88C14((_BYTE *)v9, *(void **)v7, *(_QWORD *)(v7 + 8));
    if (*(char *)(v7 + 23) < 0)
      operator delete(*(void **)v7);
  }
  else
  {
    *(_OWORD *)v9 = *(_OWORD *)v7;
    *(_QWORD *)(v9 + 16) = *(_QWORD *)(v7 + 16);
  }
  MEMORY[0x20BD2D02C](v7, 0x1012C40EC159624);
  if (v27 < 0)
    operator delete(*(void **)__s);
  v11 = operator new();
  v12 = v11;
  v13 = *(char *)(v10 + 23);
  if (v13 < 0)
  {
    sub_20AB88C14((_BYTE *)v11, *(void **)v10, *(_QWORD *)(v10 + 8));
  }
  else
  {
    *(_OWORD *)v11 = *(_OWORD *)v10;
    *(_QWORD *)(v11 + 16) = *(_QWORD *)(v10 + 16);
  }
  v14 = *(char *)(a2 + 23);
  if (v14 >= 0)
    v15 = (const std::string::value_type *)a2;
  else
    v15 = *(const std::string::value_type **)a2;
  if (v14 >= 0)
    v16 = *(unsigned __int8 *)(a2 + 23);
  else
    v16 = *(_QWORD *)(a2 + 8);
  std::string::append((std::string *)v12, v15, v16);
  v17 = operator new();
  v18 = v17;
  if (*(char *)(v12 + 23) < 0)
  {
    sub_20AB88C14((_BYTE *)v17, *(void **)v12, *(_QWORD *)(v12 + 8));
    if (*(char *)(v12 + 23) < 0)
      operator delete(*(void **)v12);
  }
  else
  {
    *(_OWORD *)v17 = *(_OWORD *)v12;
    *(_QWORD *)(v17 + 16) = *(_QWORD *)(v12 + 16);
  }
  MEMORY[0x20BD2D02C](v12, 0x1012C40EC159624);
  v27 = 1;
  strcpy(__s, "/");
  v19 = operator new();
  v20 = v19;
  v21 = *(char *)(v18 + 23);
  if (v21 < 0)
  {
    sub_20AB88C14((_BYTE *)v19, *(void **)v18, *(_QWORD *)(v18 + 8));
  }
  else
  {
    *(_OWORD *)v19 = *(_OWORD *)v18;
    *(_QWORD *)(v19 + 16) = *(_QWORD *)(v18 + 16);
  }
  std::string::append((std::string *)v20, __s, 1uLL);
  v22 = operator new();
  v23 = v22;
  if (*(char *)(v20 + 23) < 0)
  {
    sub_20AB88C14((_BYTE *)v22, *(void **)v20, *(_QWORD *)(v20 + 8));
    v24 = *(char *)(v20 + 23);
    *a3 = v23;
    if (v24 < 0)
      operator delete(*(void **)v20);
  }
  else
  {
    *(_OWORD *)v22 = *(_OWORD *)v20;
    *(_QWORD *)(v22 + 16) = *(_QWORD *)(v20 + 16);
    *a3 = v22;
  }
  MEMORY[0x20BD2D02C](v20, 0x1012C40EC159624);
  if ((v27 & 0x80000000) == 0)
  {
    if ((v21 & 0x80000000) == 0)
      goto LABEL_33;
    goto LABEL_32;
  }
  operator delete(*(void **)__s);
  if (v21 < 0)
LABEL_32:
    operator delete(*(void **)v18);
LABEL_33:
  MEMORY[0x20BD2D02C](v18, 0x1012C40EC159624);
  if (v13 < 0)
    operator delete(*(void **)v10);
  return MEMORY[0x20BD2D02C](v10, 0x1012C40EC159624);
}

void cva::adp::io::Paths::sensorDirectory(__int128 **a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  uint64_t *v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  const std::string::value_type *v23;
  std::string::size_type v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  std::string::value_type *v30;
  std::string::size_type v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  const std::string::value_type *v38;
  std::string::size_type v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  void *__p;
  char v49;
  std::string::value_type __s[23];
  char v51;

  v8 = *(_QWORD *)(a2 + 8);
  v6 = a2 + 8;
  v7 = v8;
  if (!v8)
    goto LABEL_12;
  v10 = v6;
  do
  {
    v11 = *(unsigned __int8 *)(v7 + 32);
    v12 = v11 >= a3;
    if (v11 >= a3)
      v13 = (uint64_t *)v7;
    else
      v13 = (uint64_t *)(v7 + 8);
    if (v12)
      v10 = v7;
    v7 = *v13;
  }
  while (*v13);
  if (v10 == v6 || *(unsigned __int8 *)(v10 + 32) > a3)
  {
LABEL_12:
    *(_QWORD *)__s = "";
    sub_20ABFFE94(a5, (const char **)__s);
    return;
  }
  v51 = 8;
  strcpy(__s, "sensors/");
  v14 = *a1;
  v15 = operator new();
  v16 = v15;
  if (*((char *)v14 + 23) < 0)
  {
    sub_20AB88C14((_BYTE *)v15, *(void **)v14, *((_QWORD *)v14 + 1));
  }
  else
  {
    v17 = *v14;
    *(_QWORD *)(v15 + 16) = *((_QWORD *)v14 + 2);
    *(_OWORD *)v15 = v17;
  }
  std::string::append((std::string *)v16, __s, 8uLL);
  v18 = operator new();
  v19 = v18;
  if (*(char *)(v16 + 23) < 0)
  {
    sub_20AB88C14((_BYTE *)v18, *(void **)v16, *(_QWORD *)(v16 + 8));
    if (*(char *)(v16 + 23) < 0)
      operator delete(*(void **)v16);
  }
  else
  {
    *(_OWORD *)v18 = *(_OWORD *)v16;
    *(_QWORD *)(v18 + 16) = *(_QWORD *)(v16 + 16);
  }
  MEMORY[0x20BD2D02C](v16, 0x1012C40EC159624);
  if (v51 < 0)
    operator delete(*(void **)__s);
  v20 = operator new();
  v21 = v20;
  if (*(char *)(v19 + 23) < 0)
  {
    sub_20AB88C14((_BYTE *)v20, *(void **)v19, *(_QWORD *)(v19 + 8));
  }
  else
  {
    *(_OWORD *)v20 = *(_OWORD *)v19;
    *(_QWORD *)(v20 + 16) = *(_QWORD *)(v19 + 16);
  }
  v22 = *(char *)(v10 + 63);
  if (v22 >= 0)
    v23 = (const std::string::value_type *)(v10 + 40);
  else
    v23 = *(const std::string::value_type **)(v10 + 40);
  if (v22 >= 0)
    v24 = *(unsigned __int8 *)(v10 + 63);
  else
    v24 = *(_QWORD *)(v10 + 48);
  std::string::append((std::string *)v21, v23, v24);
  v25 = operator new();
  v26 = v25;
  if (*(char *)(v21 + 23) < 0)
  {
    sub_20AB88C14((_BYTE *)v25, *(void **)v21, *(_QWORD *)(v21 + 8));
    if (*(char *)(v21 + 23) < 0)
      operator delete(*(void **)v21);
  }
  else
  {
    *(_OWORD *)v25 = *(_OWORD *)v21;
    *(_QWORD *)(v25 + 16) = *(_QWORD *)(v21 + 16);
  }
  MEMORY[0x20BD2D02C](v21, 0x1012C40EC159624);
  v51 = 1;
  strcpy(__s, " ");
  v27 = operator new();
  v28 = v27;
  v29 = *(char *)(v26 + 23);
  if (v29 < 0)
  {
    sub_20AB88C14((_BYTE *)v27, *(void **)v26, *(_QWORD *)(v26 + 8));
  }
  else
  {
    *(_OWORD *)v27 = *(_OWORD *)v26;
    *(_QWORD *)(v27 + 16) = *(_QWORD *)(v26 + 16);
  }
  if (v51 >= 0)
    v30 = __s;
  else
    v30 = *(std::string::value_type **)__s;
  if (v51 >= 0)
    v31 = v51;
  else
    v31 = *(_QWORD *)&__s[8];
  std::string::append((std::string *)v28, v30, v31);
  v32 = operator new();
  v33 = v32;
  if (*(char *)(v28 + 23) < 0)
  {
    sub_20AB88C14((_BYTE *)v32, *(void **)v28, *(_QWORD *)(v28 + 8));
    if (*(char *)(v28 + 23) < 0)
      operator delete(*(void **)v28);
  }
  else
  {
    *(_OWORD *)v32 = *(_OWORD *)v28;
    *(_QWORD *)(v32 + 16) = *(_QWORD *)(v28 + 16);
  }
  MEMORY[0x20BD2D02C](v28, 0x1012C40EC159624);
  v34 = operator new();
  v35 = v34;
  v36 = *(char *)(v33 + 23);
  if (v36 < 0)
  {
    sub_20AB88C14((_BYTE *)v34, *(void **)v33, *(_QWORD *)(v33 + 8));
  }
  else
  {
    *(_OWORD *)v34 = *(_OWORD *)v33;
    *(_QWORD *)(v34 + 16) = *(_QWORD *)(v33 + 16);
  }
  v37 = *(char *)(a4 + 23);
  if (v37 >= 0)
    v38 = (const std::string::value_type *)a4;
  else
    v38 = *(const std::string::value_type **)a4;
  if (v37 >= 0)
    v39 = *(unsigned __int8 *)(a4 + 23);
  else
    v39 = *(_QWORD *)(a4 + 8);
  std::string::append((std::string *)v35, v38, v39);
  v40 = operator new();
  v41 = v40;
  if (*(char *)(v35 + 23) < 0)
  {
    sub_20AB88C14((_BYTE *)v40, *(void **)v35, *(_QWORD *)(v35 + 8));
    if (*(char *)(v35 + 23) < 0)
      operator delete(*(void **)v35);
  }
  else
  {
    *(_OWORD *)v40 = *(_OWORD *)v35;
    *(_QWORD *)(v40 + 16) = *(_QWORD *)(v35 + 16);
  }
  MEMORY[0x20BD2D02C](v35, 0x1012C40EC159624);
  v49 = 1;
  LOWORD(__p) = 47;
  v42 = operator new();
  v43 = v42;
  v44 = *(char *)(v41 + 23);
  if (v44 < 0)
  {
    sub_20AB88C14((_BYTE *)v42, *(void **)v41, *(_QWORD *)(v41 + 8));
  }
  else
  {
    *(_OWORD *)v42 = *(_OWORD *)v41;
    *(_QWORD *)(v42 + 16) = *(_QWORD *)(v41 + 16);
  }
  std::string::append((std::string *)v43, (const std::string::value_type *)&__p, 1uLL);
  v45 = operator new();
  v46 = v45;
  if (*(char *)(v43 + 23) < 0)
  {
    sub_20AB88C14((_BYTE *)v45, *(void **)v43, *(_QWORD *)(v43 + 8));
    v47 = *(char *)(v43 + 23);
    *a5 = v46;
    if (v47 < 0)
      operator delete(*(void **)v43);
  }
  else
  {
    *(_OWORD *)v45 = *(_OWORD *)v43;
    *(_QWORD *)(v45 + 16) = *(_QWORD *)(v43 + 16);
    *a5 = v45;
  }
  MEMORY[0x20BD2D02C](v43, 0x1012C40EC159624);
  if ((v49 & 0x80000000) == 0)
  {
    if ((v44 & 0x80000000) == 0)
      goto LABEL_72;
    goto LABEL_71;
  }
  operator delete(__p);
  if (v44 < 0)
LABEL_71:
    operator delete(*(void **)v41);
LABEL_72:
  MEMORY[0x20BD2D02C](v41, 0x1012C40EC159624);
  if (v36 < 0)
    operator delete(*(void **)v33);
  MEMORY[0x20BD2D02C](v33, 0x1012C40EC159624);
  if (v51 < 0)
  {
    operator delete(*(void **)__s);
    if ((v29 & 0x80000000) == 0)
      goto LABEL_77;
    goto LABEL_76;
  }
  if (v29 < 0)
LABEL_76:
    operator delete(*(void **)v26);
LABEL_77:
  MEMORY[0x20BD2D02C](v26, 0x1012C40EC159624);
  if (*(char *)(v19 + 23) < 0)
    operator delete(*(void **)v19);
  MEMORY[0x20BD2D02C](v19, 0x1012C40EC159624);
}

BOOL cva::adp::io::Paths::createOutputDirectory(__int128 **a1, uint64_t a2)
{
  _BOOL8 Directory;
  uint64_t v3;
  uint64_t v5;

  cva::adp::io::Paths::outputDirectory(a1, a2, &v5);
  Directory = cva::Path::createDirectory((cva::Path *)&v5, (const cva::Path *)1);
  v3 = v5;
  if (v5)
  {
    if (*(char *)(v5 + 23) < 0)
      operator delete(*(void **)v5);
    MEMORY[0x20BD2D02C](v3, 0x1012C40EC159624);
  }
  return Directory;
}

uint64_t cva::adp::io::Paths::createOutputDirectories(__int128 **a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  int v7;
  size_t v8;
  unint64_t v9;
  std::string *p_dst;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string *v17;
  std::string::size_type v18;
  _BOOL8 Directory;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  BOOL v23;
  std::string __dst;
  void *__p[2];
  std::string::size_type v27;
  uint64_t v28;

  v3 = a2 + 1;
  v4 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    while (1)
    {
      v7 = *((char *)v4 + 63);
      if (v7 >= 0)
        v8 = *((unsigned __int8 *)v4 + 63);
      else
        v8 = v4[6];
      v9 = v8 + 1;
      if (v8 + 1 >= 0x7FFFFFFFFFFFFFF8)
        abort();
      if (v9 >= 0x17)
      {
        v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v9 | 7) != 0x17)
          v11 = v9 | 7;
        v12 = v11 + 1;
        p_dst = (std::string *)operator new(v11 + 1);
        __dst.__r_.__value_.__l.__size_ = v8 + 1;
        __dst.__r_.__value_.__r.__words[2] = v12 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        memset(&__dst, 0, sizeof(__dst));
        p_dst = &__dst;
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v8 + 1;
        if (!v8)
          goto LABEL_18;
      }
      if (v7 >= 0)
        v13 = v4 + 5;
      else
        v13 = (const void *)v4[5];
      memmove(p_dst, v13, v8);
LABEL_18:
      *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v8) = 32;
      v14 = *(char *)(a3 + 23);
      if (v14 >= 0)
        v15 = (const std::string::value_type *)a3;
      else
        v15 = *(const std::string::value_type **)a3;
      if (v14 >= 0)
        v16 = *(unsigned __int8 *)(a3 + 23);
      else
        v16 = *(_QWORD *)(a3 + 8);
      v17 = std::string::append(&__dst, v15, v16);
      v18 = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v27 = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      cva::adp::io::Paths::outputDirectory(a1, (uint64_t)__p, &v28);
      Directory = cva::Path::createDirectory((cva::Path *)&v28, (const cva::Path *)1);
      v20 = v28;
      if (v28)
      {
        if (*(char *)(v28 + 23) < 0)
          operator delete(*(void **)v28);
        MEMORY[0x20BD2D02C](v20, 0x1012C40EC159624);
      }
      if (SHIBYTE(v27) < 0)
      {
        operator delete(__p[0]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
LABEL_33:
          operator delete(__dst.__r_.__value_.__l.__data_);
          if (!Directory)
            return Directory;
          goto LABEL_34;
        }
      }
      else if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_33;
      }
      if (!Directory)
        return Directory;
LABEL_34:
      v21 = (_QWORD *)v4[1];
      if (v21)
      {
        do
        {
          v22 = v21;
          v21 = (_QWORD *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (_QWORD *)v4[2];
          v23 = *v22 == (_QWORD)v4;
          v4 = v22;
        }
        while (!v23);
      }
      v4 = v22;
      if (v22 == v3)
        return Directory;
    }
  }
  return 1;
}

BOOL cva::experimental::copyPlane<unsigned char,2u>(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  int8x16_t v4;
  void *v5;
  uint64_t v7;
  int8x16_t v8;
  uint64_t v9;
  vImage_Buffer *destPlanarBuffers;
  void *srcChannels[2];

  srcChannels[1] = *(void **)MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 8);
  v4.i64[0] = v3;
  v4.i64[1] = HIDWORD(v3);
  v8 = vextq_s8(v4, v4, 8uLL);
  v9 = *(unsigned int *)(a2 + 20);
  v5 = (void *)(*(_QWORD *)(a1 + 24) + a3);
  destPlanarBuffers = (vImage_Buffer *)&v7;
  srcChannels[0] = v5;
  return vImageConvert_ChunkyToPlanar8((const void **)srcChannels, (const vImage_Buffer **)&destPlanarBuffers, 1u, *(unsigned int *)(a1 + 16), *(unsigned int *)(a1 + 8), *(unsigned int *)(a1 + 12), *(unsigned int *)(a1 + 20), 0) == 0;
}

BOOL cva::experimental::copyPlane<unsigned char,3u>(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  int8x16_t v4;
  void *v5;
  uint64_t v7;
  int8x16_t v8;
  uint64_t v9;
  vImage_Buffer *destPlanarBuffers;
  void *srcChannels[2];

  srcChannels[1] = *(void **)MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 8);
  v4.i64[0] = v3;
  v4.i64[1] = HIDWORD(v3);
  v8 = vextq_s8(v4, v4, 8uLL);
  v9 = *(unsigned int *)(a2 + 20);
  v5 = (void *)(*(_QWORD *)(a1 + 24) + a3);
  destPlanarBuffers = (vImage_Buffer *)&v7;
  srcChannels[0] = v5;
  return vImageConvert_ChunkyToPlanar8((const void **)srcChannels, (const vImage_Buffer **)&destPlanarBuffers, 1u, *(unsigned int *)(a1 + 16), *(unsigned int *)(a1 + 8), *(unsigned int *)(a1 + 12), *(unsigned int *)(a1 + 20), 0) == 0;
}

BOOL cva::experimental::copyPlane<unsigned char,4u>(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  int8x16_t v4;
  void *v5;
  uint64_t v7;
  int8x16_t v8;
  uint64_t v9;
  vImage_Buffer *destPlanarBuffers;
  void *srcChannels[2];

  srcChannels[1] = *(void **)MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 8);
  v4.i64[0] = v3;
  v4.i64[1] = HIDWORD(v3);
  v8 = vextq_s8(v4, v4, 8uLL);
  v9 = *(unsigned int *)(a2 + 20);
  v5 = (void *)(*(_QWORD *)(a1 + 24) + a3);
  destPlanarBuffers = (vImage_Buffer *)&v7;
  srcChannels[0] = v5;
  return vImageConvert_ChunkyToPlanar8((const void **)srcChannels, (const vImage_Buffer **)&destPlanarBuffers, 1u, *(unsigned int *)(a1 + 16), *(unsigned int *)(a1 + 8), *(unsigned int *)(a1 + 12), *(unsigned int *)(a1 + 20), 0) == 0;
}

BOOL cva::experimental::copyPlane<float,2u>(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  int8x16_t v4;
  void *v5;
  uint64_t v7;
  int8x16_t v8;
  uint64_t v9;
  vImage_Buffer *destPlanarBuffers;
  void *srcChannels[2];

  srcChannels[1] = *(void **)MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 8);
  v4.i64[0] = v3;
  v4.i64[1] = HIDWORD(v3);
  v8 = vextq_s8(v4, v4, 8uLL);
  v9 = *(unsigned int *)(a2 + 20);
  v5 = (void *)(*(_QWORD *)(a1 + 24) + 4 * a3);
  destPlanarBuffers = (vImage_Buffer *)&v7;
  srcChannels[0] = v5;
  return vImageConvert_ChunkyToPlanarF((const void **)srcChannels, (const vImage_Buffer **)&destPlanarBuffers, 1u, *(unsigned int *)(a1 + 16), *(unsigned int *)(a1 + 8), *(unsigned int *)(a1 + 12), *(unsigned int *)(a1 + 20), 0) == 0;
}

BOOL cva::experimental::copyPlane<float,3u>(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  int8x16_t v4;
  void *v5;
  uint64_t v7;
  int8x16_t v8;
  uint64_t v9;
  vImage_Buffer *destPlanarBuffers;
  void *srcChannels[2];

  srcChannels[1] = *(void **)MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 8);
  v4.i64[0] = v3;
  v4.i64[1] = HIDWORD(v3);
  v8 = vextq_s8(v4, v4, 8uLL);
  v9 = *(unsigned int *)(a2 + 20);
  v5 = (void *)(*(_QWORD *)(a1 + 24) + 4 * a3);
  destPlanarBuffers = (vImage_Buffer *)&v7;
  srcChannels[0] = v5;
  return vImageConvert_ChunkyToPlanarF((const void **)srcChannels, (const vImage_Buffer **)&destPlanarBuffers, 1u, *(unsigned int *)(a1 + 16), *(unsigned int *)(a1 + 8), *(unsigned int *)(a1 + 12), *(unsigned int *)(a1 + 20), 0) == 0;
}

BOOL cva::experimental::copyPlane<float,4u>(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  int8x16_t v4;
  void *v5;
  uint64_t v7;
  int8x16_t v8;
  uint64_t v9;
  vImage_Buffer *destPlanarBuffers;
  void *srcChannels[2];

  srcChannels[1] = *(void **)MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 8);
  v4.i64[0] = v3;
  v4.i64[1] = HIDWORD(v3);
  v8 = vextq_s8(v4, v4, 8uLL);
  v9 = *(unsigned int *)(a2 + 20);
  v5 = (void *)(*(_QWORD *)(a1 + 24) + 4 * a3);
  destPlanarBuffers = (vImage_Buffer *)&v7;
  srcChannels[0] = v5;
  return vImageConvert_ChunkyToPlanarF((const void **)srcChannels, (const vImage_Buffer **)&destPlanarBuffers, 1u, *(unsigned int *)(a1 + 16), *(unsigned int *)(a1 + 8), *(unsigned int *)(a1 + 12), *(unsigned int *)(a1 + 20), 0) == 0;
}

BOOL cva::experimental::extractPlanes<unsigned char,2u,2ul>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  void *v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  _QWORD v16[4];
  _QWORD v17[4];
  size_t size;
  void *srcChannels;
  uint64_t v20;
  vImage_Buffer *destPlanarBuffers;
  _QWORD *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 8);
  v5 = HIDWORD(v4);
  if (v4 > *(_DWORD *)(a2 + 8) || HIDWORD(v4) > *(_DWORD *)(a2 + 12))
  {
    v7 = *(void **)(a2 + 24);
    if (v7)
    {
      free(v7);
      *(_QWORD *)(a2 + 24) = 0;
    }
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = v4;
    *(_QWORD *)(a2 + 16) = ((unint64_t)((((_DWORD)v4 + 15) & 0xFFFFFFF0) >> 4) << 36) | 1;
    size = (((_DWORD)v4 + 15) & 0xFFFFFFF0) * (unint64_t)HIDWORD(v4);
    if (size)
    {
      v8 = malloc_type_malloc(size, 0xA153FF5uLL);
      LODWORD(v4) = *(_DWORD *)(a2 + 8);
      LODWORD(v5) = *(_DWORD *)(a2 + 12);
    }
    else
    {
      v8 = 0;
    }
    *(_QWORD *)(a2 + 24) = v8;
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = v4;
    v8 = *(void **)(a2 + 24);
  }
  srcChannels = *(void **)(a1 + 24);
  v20 = 0;
  v9 = *(unsigned int *)(a2 + 20);
  v16[0] = v8;
  v16[1] = v5;
  v16[2] = v4;
  v16[3] = v9;
  destPlanarBuffers = (vImage_Buffer *)v16;
  v22 = 0;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = HIDWORD(v10);
  if (v10 > *(_DWORD *)(a2 + 40) || HIDWORD(v10) > *(_DWORD *)(a2 + 44))
  {
    v13 = *(void **)(a2 + 56);
    if (v13)
    {
      free(v13);
      *(_QWORD *)(a2 + 56) = 0;
    }
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = v10;
    *(_QWORD *)(a2 + 48) = ((unint64_t)((((_DWORD)v10 + 15) & 0xFFFFFFF0) >> 4) << 36) | 1;
    size = (((_DWORD)v10 + 15) & 0xFFFFFFF0) * (unint64_t)HIDWORD(v10);
    if (size)
    {
      v12 = malloc_type_malloc(size, 0xA153FF5uLL);
      LODWORD(v10) = *(_DWORD *)(a2 + 40);
      LODWORD(v11) = *(_DWORD *)(a2 + 44);
    }
    else
    {
      v12 = 0;
    }
    *(_QWORD *)(a2 + 56) = v12;
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = v10;
    v12 = *(void **)(a2 + 56);
  }
  v20 = *(_QWORD *)(a1 + 24) + 1;
  v14 = *(unsigned int *)(a2 + 52);
  v17[0] = v12;
  v17[1] = v11;
  v17[2] = v10;
  v17[3] = v14;
  v22 = v17;
  return vImageConvert_ChunkyToPlanar8((const void **)&srcChannels, (const vImage_Buffer **)&destPlanarBuffers, 2u, *(unsigned int *)(a1 + 16), *(unsigned int *)(a1 + 8), *(unsigned int *)(a1 + 12), *(unsigned int *)(a1 + 20), 0) == 0;
}

BOOL sub_20ABCF69C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  void *v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  _QWORD v21[4];
  _QWORD v22[4];
  _QWORD v23[4];
  size_t size;
  void *srcChannels;
  uint64_t v26;
  uint64_t v27;
  vImage_Buffer *destPlanarBuffers;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 8);
  v5 = HIDWORD(v4);
  if (v4 > *(_DWORD *)(a2 + 8) || HIDWORD(v4) > *(_DWORD *)(a2 + 12))
  {
    v7 = *(void **)(a2 + 24);
    if (v7)
    {
      free(v7);
      *(_QWORD *)(a2 + 24) = 0;
    }
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = v4;
    *(_QWORD *)(a2 + 16) = ((unint64_t)((((_DWORD)v4 + 15) & 0xFFFFFFF0) >> 4) << 36) | 1;
    size = (((_DWORD)v4 + 15) & 0xFFFFFFF0) * (unint64_t)HIDWORD(v4);
    if (size)
    {
      v8 = malloc_type_malloc(size, 0xA153FF5uLL);
      LODWORD(v4) = *(_DWORD *)(a2 + 8);
      LODWORD(v5) = *(_DWORD *)(a2 + 12);
    }
    else
    {
      v8 = 0;
    }
    *(_QWORD *)(a2 + 24) = v8;
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = v4;
    v8 = *(void **)(a2 + 24);
  }
  v29 = 0;
  v30 = 0;
  v26 = 0;
  v27 = 0;
  srcChannels = *(void **)(a1 + 24);
  v9 = *(unsigned int *)(a2 + 20);
  v21[0] = v8;
  v21[1] = v5;
  v21[2] = v4;
  v21[3] = v9;
  destPlanarBuffers = (vImage_Buffer *)v21;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = HIDWORD(v10);
  if (v10 > *(_DWORD *)(a2 + 40) || HIDWORD(v10) > *(_DWORD *)(a2 + 44))
  {
    v13 = *(void **)(a2 + 56);
    if (v13)
    {
      free(v13);
      *(_QWORD *)(a2 + 56) = 0;
    }
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = v10;
    *(_QWORD *)(a2 + 48) = ((unint64_t)((((_DWORD)v10 + 15) & 0xFFFFFFF0) >> 4) << 36) | 1;
    size = (((_DWORD)v10 + 15) & 0xFFFFFFF0) * (unint64_t)HIDWORD(v10);
    if (size)
    {
      v12 = malloc_type_malloc(size, 0xA153FF5uLL);
      LODWORD(v10) = *(_DWORD *)(a2 + 40);
      LODWORD(v11) = *(_DWORD *)(a2 + 44);
    }
    else
    {
      v12 = 0;
    }
    *(_QWORD *)(a2 + 56) = v12;
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = v10;
    v12 = *(void **)(a2 + 56);
  }
  v26 = *(_QWORD *)(a1 + 24) + 1;
  v14 = *(unsigned int *)(a2 + 52);
  v22[0] = v12;
  v22[1] = v11;
  v22[2] = v10;
  v22[3] = v14;
  v29 = v22;
  v15 = *(_QWORD *)(a1 + 8);
  v16 = HIDWORD(v15);
  if (v15 > *(_DWORD *)(a2 + 72) || HIDWORD(v15) > *(_DWORD *)(a2 + 76))
  {
    v18 = *(void **)(a2 + 88);
    if (v18)
    {
      free(v18);
      *(_QWORD *)(a2 + 88) = 0;
    }
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 72) = v15;
    *(_QWORD *)(a2 + 80) = ((unint64_t)((((_DWORD)v15 + 15) & 0xFFFFFFF0) >> 4) << 36) | 1;
    size = (((_DWORD)v15 + 15) & 0xFFFFFFF0) * (unint64_t)HIDWORD(v15);
    if (size)
    {
      v17 = malloc_type_malloc(size, 0xA153FF5uLL);
      LODWORD(v15) = *(_DWORD *)(a2 + 72);
      LODWORD(v16) = *(_DWORD *)(a2 + 76);
    }
    else
    {
      v17 = 0;
    }
    *(_QWORD *)(a2 + 88) = v17;
  }
  else
  {
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 72) = v15;
    v17 = *(void **)(a2 + 88);
  }
  v27 = *(_QWORD *)(a1 + 24) + 2;
  v19 = *(unsigned int *)(a2 + 84);
  v23[0] = v17;
  v23[1] = v16;
  v23[2] = v15;
  v23[3] = v19;
  v30 = v23;
  return vImageConvert_ChunkyToPlanar8((const void **)&srcChannels, (const vImage_Buffer **)&destPlanarBuffers, 3u, *(unsigned int *)(a1 + 16), *(unsigned int *)(a1 + 8), *(unsigned int *)(a1 + 12), *(unsigned int *)(a1 + 20), 0) == 0;
}

BOOL sub_20ABCF958(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  void *v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  _QWORD v26[4];
  _QWORD v27[4];
  _QWORD v28[4];
  _QWORD v29[4];
  size_t size;
  void *srcChannels;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  vImage_Buffer *destPlanarBuffers;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 8);
  v5 = HIDWORD(v4);
  if (v4 > *(_DWORD *)(a2 + 8) || HIDWORD(v4) > *(_DWORD *)(a2 + 12))
  {
    v7 = *(void **)(a2 + 24);
    if (v7)
    {
      free(v7);
      *(_QWORD *)(a2 + 24) = 0;
    }
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = v4;
    *(_QWORD *)(a2 + 16) = ((unint64_t)((((_DWORD)v4 + 15) & 0xFFFFFFF0) >> 4) << 36) | 1;
    size = (((_DWORD)v4 + 15) & 0xFFFFFFF0) * (unint64_t)HIDWORD(v4);
    if (size)
    {
      v8 = malloc_type_malloc(size, 0xA153FF5uLL);
      LODWORD(v4) = *(_DWORD *)(a2 + 8);
      LODWORD(v5) = *(_DWORD *)(a2 + 12);
    }
    else
    {
      v8 = 0;
    }
    *(_QWORD *)(a2 + 24) = v8;
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = v4;
    v8 = *(void **)(a2 + 24);
  }
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v33 = 0;
  v34 = 0;
  v32 = 0;
  srcChannels = *(void **)(a1 + 24);
  v9 = *(unsigned int *)(a2 + 20);
  v26[0] = v8;
  v26[1] = v5;
  v26[2] = v4;
  v26[3] = v9;
  destPlanarBuffers = (vImage_Buffer *)v26;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = HIDWORD(v10);
  if (v10 > *(_DWORD *)(a2 + 40) || HIDWORD(v10) > *(_DWORD *)(a2 + 44))
  {
    v13 = *(void **)(a2 + 56);
    if (v13)
    {
      free(v13);
      *(_QWORD *)(a2 + 56) = 0;
    }
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = v10;
    *(_QWORD *)(a2 + 48) = ((unint64_t)((((_DWORD)v10 + 15) & 0xFFFFFFF0) >> 4) << 36) | 1;
    size = (((_DWORD)v10 + 15) & 0xFFFFFFF0) * (unint64_t)HIDWORD(v10);
    if (size)
    {
      v12 = malloc_type_malloc(size, 0xA153FF5uLL);
      LODWORD(v10) = *(_DWORD *)(a2 + 40);
      LODWORD(v11) = *(_DWORD *)(a2 + 44);
    }
    else
    {
      v12 = 0;
    }
    *(_QWORD *)(a2 + 56) = v12;
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = v10;
    v12 = *(void **)(a2 + 56);
  }
  v32 = *(_QWORD *)(a1 + 24) + 1;
  v14 = *(unsigned int *)(a2 + 52);
  v27[0] = v12;
  v27[1] = v11;
  v27[2] = v10;
  v27[3] = v14;
  v36 = v27;
  v15 = *(_QWORD *)(a1 + 8);
  v16 = HIDWORD(v15);
  if (v15 > *(_DWORD *)(a2 + 72) || HIDWORD(v15) > *(_DWORD *)(a2 + 76))
  {
    v18 = *(void **)(a2 + 88);
    if (v18)
    {
      free(v18);
      *(_QWORD *)(a2 + 88) = 0;
    }
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 72) = v15;
    *(_QWORD *)(a2 + 80) = ((unint64_t)((((_DWORD)v15 + 15) & 0xFFFFFFF0) >> 4) << 36) | 1;
    size = (((_DWORD)v15 + 15) & 0xFFFFFFF0) * (unint64_t)HIDWORD(v15);
    if (size)
    {
      v17 = malloc_type_malloc(size, 0xA153FF5uLL);
      LODWORD(v15) = *(_DWORD *)(a2 + 72);
      LODWORD(v16) = *(_DWORD *)(a2 + 76);
    }
    else
    {
      v17 = 0;
    }
    *(_QWORD *)(a2 + 88) = v17;
  }
  else
  {
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 72) = v15;
    v17 = *(void **)(a2 + 88);
  }
  v33 = *(_QWORD *)(a1 + 24) + 2;
  v19 = *(unsigned int *)(a2 + 84);
  v28[0] = v17;
  v28[1] = v16;
  v28[2] = v15;
  v28[3] = v19;
  v37 = v28;
  v20 = *(_QWORD *)(a1 + 8);
  v21 = HIDWORD(v20);
  if (v20 > *(_DWORD *)(a2 + 104) || HIDWORD(v20) > *(_DWORD *)(a2 + 108))
  {
    v23 = *(void **)(a2 + 120);
    if (v23)
    {
      free(v23);
      *(_QWORD *)(a2 + 120) = 0;
    }
    *(_QWORD *)(a2 + 96) = 0;
    *(_QWORD *)(a2 + 104) = v20;
    *(_QWORD *)(a2 + 112) = ((unint64_t)((((_DWORD)v20 + 15) & 0xFFFFFFF0) >> 4) << 36) | 1;
    size = (((_DWORD)v20 + 15) & 0xFFFFFFF0) * (unint64_t)HIDWORD(v20);
    if (size)
    {
      v22 = malloc_type_malloc(size, 0xA153FF5uLL);
      LODWORD(v20) = *(_DWORD *)(a2 + 104);
      LODWORD(v21) = *(_DWORD *)(a2 + 108);
    }
    else
    {
      v22 = 0;
    }
    *(_QWORD *)(a2 + 120) = v22;
  }
  else
  {
    *(_QWORD *)(a2 + 96) = 0;
    *(_QWORD *)(a2 + 104) = v20;
    v22 = *(void **)(a2 + 120);
  }
  v34 = *(_QWORD *)(a1 + 24) + 3;
  v24 = *(unsigned int *)(a2 + 116);
  v29[0] = v22;
  v29[1] = v21;
  v29[2] = v20;
  v29[3] = v24;
  v38 = v29;
  return vImageConvert_ChunkyToPlanar8((const void **)&srcChannels, (const vImage_Buffer **)&destPlanarBuffers, 4u, *(unsigned int *)(a1 + 16), *(unsigned int *)(a1 + 8), *(unsigned int *)(a1 + 12), *(unsigned int *)(a1 + 20), 0) == 0;
}

BOOL cva::experimental::copyPlane<unsigned char,3u>(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int8x16_t v7;
  uint64_t v9;
  int8x16_t v10;
  uint64_t v11;
  vImage_Buffer *destPlanarBuffers;
  void *srcChannels[2];

  srcChannels[1] = *(void **)MEMORY[0x24BDAC8D0];
  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v9 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 8);
  v7.i64[0] = v6;
  v7.i64[1] = HIDWORD(v6);
  v10 = vextq_s8(v7, v7, 8uLL);
  v11 = *(unsigned int *)(a2 + 20);
  destPlanarBuffers = (vImage_Buffer *)&v9;
  srcChannels[0] = (void *)(v5 + a3);
  return vImageConvert_ChunkyToPlanar8((const void **)srcChannels, (const vImage_Buffer **)&destPlanarBuffers, 1u, v4, v3, HIDWORD(v3), HIDWORD(v4), 0) == 0;
}

BOOL cva::experimental::extractPlanes<unsigned char,3u,3ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 24);
  v4 = 0;
  v5 = *(_OWORD *)(a1 + 8);
  v6 = v2;
  return sub_20ABCF69C((uint64_t)&v4, a2);
}

BOOL cva::experimental::extractPlanes<unsigned char,4u,4ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 24);
  v4 = 0;
  v5 = *(_OWORD *)(a1 + 8);
  v6 = v2;
  return sub_20ABCF958((uint64_t)&v4, a2);
}

BOOL cva::experimental::extractPlanes<float,2u,2ul>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  void *v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  _QWORD v16[4];
  _QWORD v17[4];
  size_t size;
  void *srcChannels;
  uint64_t v20;
  vImage_Buffer *destPlanarBuffers;
  _QWORD *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 8);
  v5 = HIDWORD(v4);
  if (v4 > *(_DWORD *)(a2 + 8) || HIDWORD(v4) > *(_DWORD *)(a2 + 12))
  {
    v7 = *(void **)(a2 + 24);
    if (v7)
    {
      free(v7);
      *(_QWORD *)(a2 + 24) = 0;
    }
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = v4;
    *(_QWORD *)(a2 + 16) = ((unint64_t)(((4 * (_DWORD)v4 + 15) & 0xFFFFFFF0) >> 4) << 36) | 4;
    size = ((4 * (_DWORD)v4 + 15) & 0xFFFFFFF0) * (unint64_t)HIDWORD(v4);
    if (size)
    {
      v8 = malloc_type_malloc(size, 0xA153FF5uLL);
      LODWORD(v4) = *(_DWORD *)(a2 + 8);
      LODWORD(v5) = *(_DWORD *)(a2 + 12);
    }
    else
    {
      v8 = 0;
    }
    *(_QWORD *)(a2 + 24) = v8;
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = v4;
    v8 = *(void **)(a2 + 24);
  }
  srcChannels = *(void **)(a1 + 24);
  v20 = 0;
  v9 = *(unsigned int *)(a2 + 20);
  v16[0] = v8;
  v16[1] = v5;
  v16[2] = v4;
  v16[3] = v9;
  destPlanarBuffers = (vImage_Buffer *)v16;
  v22 = 0;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = HIDWORD(v10);
  if (v10 > *(_DWORD *)(a2 + 40) || HIDWORD(v10) > *(_DWORD *)(a2 + 44))
  {
    v13 = *(void **)(a2 + 56);
    if (v13)
    {
      free(v13);
      *(_QWORD *)(a2 + 56) = 0;
    }
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = v10;
    *(_QWORD *)(a2 + 48) = ((unint64_t)(((4 * (_DWORD)v10 + 15) & 0xFFFFFFF0) >> 4) << 36) | 4;
    size = ((4 * (_DWORD)v10 + 15) & 0xFFFFFFF0) * (unint64_t)HIDWORD(v10);
    if (size)
    {
      v12 = malloc_type_malloc(size, 0xA153FF5uLL);
      LODWORD(v10) = *(_DWORD *)(a2 + 40);
      LODWORD(v11) = *(_DWORD *)(a2 + 44);
    }
    else
    {
      v12 = 0;
    }
    *(_QWORD *)(a2 + 56) = v12;
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = v10;
    v12 = *(void **)(a2 + 56);
  }
  v20 = *(_QWORD *)(a1 + 24) + 4;
  v14 = *(unsigned int *)(a2 + 52);
  v17[0] = v12;
  v17[1] = v11;
  v17[2] = v10;
  v17[3] = v14;
  v22 = v17;
  return vImageConvert_ChunkyToPlanarF((const void **)&srcChannels, (const vImage_Buffer **)&destPlanarBuffers, 2u, *(unsigned int *)(a1 + 16), *(unsigned int *)(a1 + 8), *(unsigned int *)(a1 + 12), *(unsigned int *)(a1 + 20), 0) == 0;
}

BOOL cva::experimental::extractPlanes<float,3u,3ul>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  void *v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  _QWORD v21[4];
  _QWORD v22[4];
  _QWORD v23[4];
  size_t size;
  void *srcChannels;
  uint64_t v26;
  uint64_t v27;
  vImage_Buffer *destPlanarBuffers;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 8);
  v5 = HIDWORD(v4);
  if (v4 > *(_DWORD *)(a2 + 8) || HIDWORD(v4) > *(_DWORD *)(a2 + 12))
  {
    v7 = *(void **)(a2 + 24);
    if (v7)
    {
      free(v7);
      *(_QWORD *)(a2 + 24) = 0;
    }
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = v4;
    *(_QWORD *)(a2 + 16) = ((unint64_t)(((4 * (_DWORD)v4 + 15) & 0xFFFFFFF0) >> 4) << 36) | 4;
    size = ((4 * (_DWORD)v4 + 15) & 0xFFFFFFF0) * (unint64_t)HIDWORD(v4);
    if (size)
    {
      v8 = malloc_type_malloc(size, 0xA153FF5uLL);
      LODWORD(v4) = *(_DWORD *)(a2 + 8);
      LODWORD(v5) = *(_DWORD *)(a2 + 12);
    }
    else
    {
      v8 = 0;
    }
    *(_QWORD *)(a2 + 24) = v8;
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = v4;
    v8 = *(void **)(a2 + 24);
  }
  v29 = 0;
  v30 = 0;
  v26 = 0;
  v27 = 0;
  srcChannels = *(void **)(a1 + 24);
  v9 = *(unsigned int *)(a2 + 20);
  v21[0] = v8;
  v21[1] = v5;
  v21[2] = v4;
  v21[3] = v9;
  destPlanarBuffers = (vImage_Buffer *)v21;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = HIDWORD(v10);
  if (v10 > *(_DWORD *)(a2 + 40) || HIDWORD(v10) > *(_DWORD *)(a2 + 44))
  {
    v13 = *(void **)(a2 + 56);
    if (v13)
    {
      free(v13);
      *(_QWORD *)(a2 + 56) = 0;
    }
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = v10;
    *(_QWORD *)(a2 + 48) = ((unint64_t)(((4 * (_DWORD)v10 + 15) & 0xFFFFFFF0) >> 4) << 36) | 4;
    size = ((4 * (_DWORD)v10 + 15) & 0xFFFFFFF0) * (unint64_t)HIDWORD(v10);
    if (size)
    {
      v12 = malloc_type_malloc(size, 0xA153FF5uLL);
      LODWORD(v10) = *(_DWORD *)(a2 + 40);
      LODWORD(v11) = *(_DWORD *)(a2 + 44);
    }
    else
    {
      v12 = 0;
    }
    *(_QWORD *)(a2 + 56) = v12;
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = v10;
    v12 = *(void **)(a2 + 56);
  }
  v26 = *(_QWORD *)(a1 + 24) + 4;
  v14 = *(unsigned int *)(a2 + 52);
  v22[0] = v12;
  v22[1] = v11;
  v22[2] = v10;
  v22[3] = v14;
  v29 = v22;
  v15 = *(_QWORD *)(a1 + 8);
  v16 = HIDWORD(v15);
  if (v15 > *(_DWORD *)(a2 + 72) || HIDWORD(v15) > *(_DWORD *)(a2 + 76))
  {
    v18 = *(void **)(a2 + 88);
    if (v18)
    {
      free(v18);
      *(_QWORD *)(a2 + 88) = 0;
    }
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 72) = v15;
    *(_QWORD *)(a2 + 80) = ((unint64_t)(((4 * (_DWORD)v15 + 15) & 0xFFFFFFF0) >> 4) << 36) | 4;
    size = ((4 * (_DWORD)v15 + 15) & 0xFFFFFFF0) * (unint64_t)HIDWORD(v15);
    if (size)
    {
      v17 = malloc_type_malloc(size, 0xA153FF5uLL);
      LODWORD(v15) = *(_DWORD *)(a2 + 72);
      LODWORD(v16) = *(_DWORD *)(a2 + 76);
    }
    else
    {
      v17 = 0;
    }
    *(_QWORD *)(a2 + 88) = v17;
  }
  else
  {
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 72) = v15;
    v17 = *(void **)(a2 + 88);
  }
  v27 = *(_QWORD *)(a1 + 24) + 8;
  v19 = *(unsigned int *)(a2 + 84);
  v23[0] = v17;
  v23[1] = v16;
  v23[2] = v15;
  v23[3] = v19;
  v30 = v23;
  return vImageConvert_ChunkyToPlanarF((const void **)&srcChannels, (const vImage_Buffer **)&destPlanarBuffers, 3u, *(unsigned int *)(a1 + 16), *(unsigned int *)(a1 + 8), *(unsigned int *)(a1 + 12), *(unsigned int *)(a1 + 20), 0) == 0;
}

BOOL cva::experimental::extractPlanes<float,4u,4ul>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  void *v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  _QWORD v26[4];
  _QWORD v27[4];
  _QWORD v28[4];
  _QWORD v29[4];
  size_t size;
  void *srcChannels;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  vImage_Buffer *destPlanarBuffers;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 8);
  v5 = HIDWORD(v4);
  if (v4 > *(_DWORD *)(a2 + 8) || HIDWORD(v4) > *(_DWORD *)(a2 + 12))
  {
    v7 = *(void **)(a2 + 24);
    if (v7)
    {
      free(v7);
      *(_QWORD *)(a2 + 24) = 0;
    }
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = v4;
    *(_QWORD *)(a2 + 16) = ((unint64_t)(((4 * (_DWORD)v4 + 15) & 0xFFFFFFF0) >> 4) << 36) | 4;
    size = ((4 * (_DWORD)v4 + 15) & 0xFFFFFFF0) * (unint64_t)HIDWORD(v4);
    if (size)
    {
      v8 = malloc_type_malloc(size, 0xA153FF5uLL);
      LODWORD(v4) = *(_DWORD *)(a2 + 8);
      LODWORD(v5) = *(_DWORD *)(a2 + 12);
    }
    else
    {
      v8 = 0;
    }
    *(_QWORD *)(a2 + 24) = v8;
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = v4;
    v8 = *(void **)(a2 + 24);
  }
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v33 = 0;
  v34 = 0;
  v32 = 0;
  srcChannels = *(void **)(a1 + 24);
  v9 = *(unsigned int *)(a2 + 20);
  v26[0] = v8;
  v26[1] = v5;
  v26[2] = v4;
  v26[3] = v9;
  destPlanarBuffers = (vImage_Buffer *)v26;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = HIDWORD(v10);
  if (v10 > *(_DWORD *)(a2 + 40) || HIDWORD(v10) > *(_DWORD *)(a2 + 44))
  {
    v13 = *(void **)(a2 + 56);
    if (v13)
    {
      free(v13);
      *(_QWORD *)(a2 + 56) = 0;
    }
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = v10;
    *(_QWORD *)(a2 + 48) = ((unint64_t)(((4 * (_DWORD)v10 + 15) & 0xFFFFFFF0) >> 4) << 36) | 4;
    size = ((4 * (_DWORD)v10 + 15) & 0xFFFFFFF0) * (unint64_t)HIDWORD(v10);
    if (size)
    {
      v12 = malloc_type_malloc(size, 0xA153FF5uLL);
      LODWORD(v10) = *(_DWORD *)(a2 + 40);
      LODWORD(v11) = *(_DWORD *)(a2 + 44);
    }
    else
    {
      v12 = 0;
    }
    *(_QWORD *)(a2 + 56) = v12;
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = v10;
    v12 = *(void **)(a2 + 56);
  }
  v32 = *(_QWORD *)(a1 + 24) + 4;
  v14 = *(unsigned int *)(a2 + 52);
  v27[0] = v12;
  v27[1] = v11;
  v27[2] = v10;
  v27[3] = v14;
  v36 = v27;
  v15 = *(_QWORD *)(a1 + 8);
  v16 = HIDWORD(v15);
  if (v15 > *(_DWORD *)(a2 + 72) || HIDWORD(v15) > *(_DWORD *)(a2 + 76))
  {
    v18 = *(void **)(a2 + 88);
    if (v18)
    {
      free(v18);
      *(_QWORD *)(a2 + 88) = 0;
    }
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 72) = v15;
    *(_QWORD *)(a2 + 80) = ((unint64_t)(((4 * (_DWORD)v15 + 15) & 0xFFFFFFF0) >> 4) << 36) | 4;
    size = ((4 * (_DWORD)v15 + 15) & 0xFFFFFFF0) * (unint64_t)HIDWORD(v15);
    if (size)
    {
      v17 = malloc_type_malloc(size, 0xA153FF5uLL);
      LODWORD(v15) = *(_DWORD *)(a2 + 72);
      LODWORD(v16) = *(_DWORD *)(a2 + 76);
    }
    else
    {
      v17 = 0;
    }
    *(_QWORD *)(a2 + 88) = v17;
  }
  else
  {
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 72) = v15;
    v17 = *(void **)(a2 + 88);
  }
  v33 = *(_QWORD *)(a1 + 24) + 8;
  v19 = *(unsigned int *)(a2 + 84);
  v28[0] = v17;
  v28[1] = v16;
  v28[2] = v15;
  v28[3] = v19;
  v37 = v28;
  v20 = *(_QWORD *)(a1 + 8);
  v21 = HIDWORD(v20);
  if (v20 > *(_DWORD *)(a2 + 104) || HIDWORD(v20) > *(_DWORD *)(a2 + 108))
  {
    v23 = *(void **)(a2 + 120);
    if (v23)
    {
      free(v23);
      *(_QWORD *)(a2 + 120) = 0;
    }
    *(_QWORD *)(a2 + 96) = 0;
    *(_QWORD *)(a2 + 104) = v20;
    *(_QWORD *)(a2 + 112) = ((unint64_t)(((4 * (_DWORD)v20 + 15) & 0xFFFFFFF0) >> 4) << 36) | 4;
    size = ((4 * (_DWORD)v20 + 15) & 0xFFFFFFF0) * (unint64_t)HIDWORD(v20);
    if (size)
    {
      v22 = malloc_type_malloc(size, 0xA153FF5uLL);
      LODWORD(v20) = *(_DWORD *)(a2 + 104);
      LODWORD(v21) = *(_DWORD *)(a2 + 108);
    }
    else
    {
      v22 = 0;
    }
    *(_QWORD *)(a2 + 120) = v22;
  }
  else
  {
    *(_QWORD *)(a2 + 96) = 0;
    *(_QWORD *)(a2 + 104) = v20;
    v22 = *(void **)(a2 + 120);
  }
  v34 = *(_QWORD *)(a1 + 24) + 12;
  v24 = *(unsigned int *)(a2 + 116);
  v29[0] = v22;
  v29[1] = v21;
  v29[2] = v20;
  v29[3] = v24;
  v38 = v29;
  return vImageConvert_ChunkyToPlanarF((const void **)&srcChannels, (const vImage_Buffer **)&destPlanarBuffers, 4u, *(unsigned int *)(a1 + 16), *(unsigned int *)(a1 + 8), *(unsigned int *)(a1 + 12), *(unsigned int *)(a1 + 20), 0) == 0;
}

BOOL cva::experimental::convertPlanar16uToPlanar32f(uint64_t a1, uint64_t a2, float a3, float a4)
{
  void *v5;
  uint64_t v6;
  int8x16_t v7;
  uint64_t v8;
  vImage_Buffer v10;
  vImage_Buffer src;

  v5 = *(void **)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 8);
  v7.i64[0] = v6;
  v7.i64[1] = HIDWORD(v6);
  *(int8x16_t *)&src.height = vextq_s8(v7, v7, 8uLL);
  src.rowBytes = *(unsigned int *)(a1 + 20);
  v10.data = *(void **)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 8);
  v7.i64[0] = v8;
  v7.i64[1] = HIDWORD(v8);
  *(int8x16_t *)&v10.height = vextq_s8(v7, v7, 8uLL);
  v10.rowBytes = *(unsigned int *)(a2 + 20);
  src.data = v5;
  return vImageConvert_16UToF(&src, &v10, a4, (float)(a3 - a4) / 65535.0, 0) == 0;
}

BOOL cva::experimental::convertPlanar32fToPlanar16u(uint64_t a1, uint64_t a2, float a3, float a4)
{
  void *v5;
  uint64_t v6;
  int8x16_t v7;
  uint64_t v8;
  vImage_Buffer v10;
  vImage_Buffer src;

  v5 = *(void **)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 8);
  v7.i64[0] = v6;
  v7.i64[1] = HIDWORD(v6);
  *(int8x16_t *)&src.height = vextq_s8(v7, v7, 8uLL);
  src.rowBytes = *(unsigned int *)(a1 + 20);
  v10.data = *(void **)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 8);
  v7.i64[0] = v8;
  v7.i64[1] = HIDWORD(v8);
  *(int8x16_t *)&v10.height = vextq_s8(v7, v7, 8uLL);
  v10.rowBytes = *(unsigned int *)(a2 + 20);
  src.data = v5;
  return vImageConvert_FTo16U(&src, &v10, a4, (float)(a3 - a4) / 65535.0, 0) == 0;
}

BOOL cva::experimental::convertPlanar32fToPlanar8u(uint64_t a1, uint64_t a2, Pixel_F a3, Pixel_F a4)
{
  void *v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  vImage_Buffer v9;
  vImage_Buffer src;

  v4 = *(void **)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 8);
  v6.i64[0] = v5;
  v6.i64[1] = HIDWORD(v5);
  *(int8x16_t *)&src.height = vextq_s8(v6, v6, 8uLL);
  src.rowBytes = *(unsigned int *)(a1 + 20);
  v9.data = *(void **)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 8);
  v6.i64[0] = v7;
  v6.i64[1] = HIDWORD(v7);
  *(int8x16_t *)&v9.height = vextq_s8(v6, v6, 8uLL);
  v9.rowBytes = *(unsigned int *)(a2 + 20);
  src.data = v4;
  return vImageConvert_PlanarFtoPlanar8(&src, &v9, a3, a4, 0) == 0;
}

BOOL cva::experimental::convertPlanar8uToPlanar32f(uint64_t a1, uint64_t a2, Pixel_F a3, Pixel_F a4)
{
  void *v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  vImage_Buffer v9;
  vImage_Buffer src;

  v4 = *(void **)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 8);
  v6.i64[0] = v5;
  v6.i64[1] = HIDWORD(v5);
  *(int8x16_t *)&src.height = vextq_s8(v6, v6, 8uLL);
  src.rowBytes = *(unsigned int *)(a1 + 20);
  v9.data = *(void **)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 8);
  v6.i64[0] = v7;
  v6.i64[1] = HIDWORD(v7);
  *(int8x16_t *)&v9.height = vextq_s8(v6, v6, 8uLL);
  v9.rowBytes = *(unsigned int *)(a2 + 20);
  src.data = v4;
  return vImageConvert_Planar8toPlanarF(&src, &v9, a3, a4, 0) == 0;
}

BOOL cva::experimental::convertPlanar16uToPlanar8u(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  int8x16_t v4;
  uint64_t v5;
  vImage_Buffer v7;
  vImage_Buffer src;

  v2 = *(void **)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  v4.i64[0] = v3;
  v4.i64[1] = HIDWORD(v3);
  *(int8x16_t *)&src.height = vextq_s8(v4, v4, 8uLL);
  src.rowBytes = *(unsigned int *)(a1 + 20);
  v7.data = *(void **)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 8);
  v4.i64[0] = v5;
  v4.i64[1] = HIDWORD(v5);
  *(int8x16_t *)&v7.height = vextq_s8(v4, v4, 8uLL);
  v7.rowBytes = *(unsigned int *)(a2 + 20);
  src.data = v2;
  return vImageConvert_Planar16UtoPlanar8_dithered(&src, &v7, 0, 0) == 0;
}

BOOL cva::experimental::convertPlanar8uToPlanar16u(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  int8x16_t v4;
  uint64_t v5;
  vImage_Buffer v7;
  vImage_Buffer src;

  v2 = *(void **)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  v4.i64[0] = v3;
  v4.i64[1] = HIDWORD(v3);
  *(int8x16_t *)&src.height = vextq_s8(v4, v4, 8uLL);
  src.rowBytes = *(unsigned int *)(a1 + 20);
  v7.data = *(void **)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 8);
  v4.i64[0] = v5;
  v4.i64[1] = HIDWORD(v5);
  *(int8x16_t *)&v7.height = vextq_s8(v4, v4, 8uLL);
  v7.rowBytes = *(unsigned int *)(a2 + 20);
  src.data = v2;
  return vImageConvert_Planar8To16U(&src, &v7, 0) == 0;
}

uint64_t cva::experimental::convertPlanar16uToPlanar64f(_QWORD *a1, uint64_t a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  double v10;
  double v11;
  _WORD *v12;
  _WORD *v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  double *v17;
  double *v18;
  double v19;
  int v20;
  int v21;

  v4 = a1[3];
  if (v4)
  {
    v5 = a1[1];
    v6 = a1[2];
    v7 = (HIDWORD(v6) * HIDWORD(v5));
    if ((_DWORD)v7)
    {
      v8 = 0;
      v9 = 0;
      v10 = a3 - a4;
      v11 = 65535.0;
      v12 = (_WORD *)(v4 + *a1);
      v13 = (_WORD *)((char *)v12 + v7);
      v14 = *(_DWORD *)(a2 + 8);
      v16 = *(_QWORD *)(a2 + 16);
      v15 = *(_QWORD *)(a2 + 24);
      v17 = (double *)(v15 + *(_QWORD *)a2);
      if (v15)
        v18 = v17;
      else
        v18 = 0;
      v19 = v10 / 65535.0;
      do
      {
        LOWORD(v11) = *v12;
        v11 = a4 + (double)*(unint64_t *)&v11 * v19;
        *v18 = v11;
        v12 = (_WORD *)((char *)v12 + v6);
        v20 = v9 + 1;
        if (v9 + 1 == (_DWORD)v5)
          v9 = 0;
        else
          ++v9;
        if (v20 == (_DWORD)v5)
          v12 = (_WORD *)((char *)v12 + HIDWORD(v6) - (v20 * v6));
        v18 = (double *)((char *)v18 + v16);
        v21 = v8 + 1;
        if (v8 + 1 == v14)
          v8 = 0;
        else
          ++v8;
        if (v21 == v14)
          v18 = (double *)((char *)v18 + HIDWORD(v16) - (v21 * v16));
      }
      while (v12 != v13);
    }
  }
  return 1;
}

uint64_t cva::experimental::convertPlanar64fToPlanar16u(_QWORD *a1, uint64_t a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  double *v10;
  double *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  __int16 *v15;
  __int16 *v16;
  double v17;
  __int16 v18;
  int v20;
  int v21;

  v4 = a1[3];
  if (v4)
  {
    v5 = a1[1];
    v6 = a1[2];
    v7 = (HIDWORD(v6) * HIDWORD(v5));
    if ((_DWORD)v7)
    {
      v8 = 0;
      v9 = 0;
      v10 = (double *)(v4 + *a1);
      v11 = (double *)((char *)v10 + v7);
      v12 = *(_DWORD *)(a2 + 8);
      v14 = *(_QWORD *)(a2 + 16);
      v13 = *(_QWORD *)(a2 + 24);
      v15 = (__int16 *)(v13 + *(_QWORD *)a2);
      if (v13)
        v16 = v15;
      else
        v16 = 0;
      do
      {
        v17 = (*v10 - a4) * (65535.0 / (a3 - a4)) + 0.5;
        if (v17 < 0.0)
          v18 = 0;
        else
          v18 = -1;
        if (v17 <= 65535.0 && v17 >= 0.0)
          v18 = (int)v17;
        *v16 = v18;
        v10 = (double *)((char *)v10 + v6);
        v20 = v9 + 1;
        if (v9 + 1 == (_DWORD)v5)
          v9 = 0;
        else
          ++v9;
        if (v20 == (_DWORD)v5)
          v10 = (double *)((char *)v10 + HIDWORD(v6) - (v20 * v6));
        v16 = (__int16 *)((char *)v16 + v14);
        v21 = v8 + 1;
        if (v8 + 1 == v12)
          v8 = 0;
        else
          ++v8;
        if (v21 == v12)
          v16 = (__int16 *)((char *)v16 + HIDWORD(v14) - (v21 * v14));
      }
      while (v10 != v11);
    }
  }
  return 1;
}

uint64_t cva::experimental::convertPlanar8uToPlanar64f(_QWORD *a1, uint64_t a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  double v10;
  double v11;
  _BYTE *v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  double *v17;
  double *v18;
  double v19;
  int v20;
  int v21;

  v4 = a1[3];
  if (v4)
  {
    v5 = a1[1];
    v6 = a1[2];
    v7 = (HIDWORD(v6) * HIDWORD(v5));
    if ((_DWORD)v7)
    {
      v8 = 0;
      v9 = 0;
      v10 = a3 - a4;
      v11 = 255.0;
      v12 = (_BYTE *)(v4 + *a1);
      v13 = &v12[v7];
      v14 = *(_DWORD *)(a2 + 8);
      v16 = *(_QWORD *)(a2 + 16);
      v15 = *(_QWORD *)(a2 + 24);
      v17 = (double *)(v15 + *(_QWORD *)a2);
      if (v15)
        v18 = v17;
      else
        v18 = 0;
      v19 = v10 / 255.0;
      do
      {
        LOBYTE(v11) = *v12;
        v11 = a4 + (double)*(unint64_t *)&v11 * v19;
        *v18 = v11;
        v12 += v6;
        v20 = v9 + 1;
        if (v9 + 1 == (_DWORD)v5)
          v9 = 0;
        else
          ++v9;
        if (v20 == (_DWORD)v5)
          v12 = &v12[HIDWORD(v6) - (v20 * v6)];
        v18 = (double *)((char *)v18 + v16);
        v21 = v8 + 1;
        if (v8 + 1 == v14)
          v8 = 0;
        else
          ++v8;
        if (v21 == v14)
          v18 = (double *)((char *)v18 + HIDWORD(v16) - (v21 * v16));
      }
      while (v12 != v13);
    }
  }
  return 1;
}

uint64_t cva::experimental::convertPlanar64fToPlanar8u(_QWORD *a1, uint64_t a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  double *v10;
  double *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  double v17;
  char v18;
  int v20;
  int v21;

  v4 = a1[3];
  if (v4)
  {
    v5 = a1[1];
    v6 = a1[2];
    v7 = (HIDWORD(v6) * HIDWORD(v5));
    if ((_DWORD)v7)
    {
      v8 = 0;
      v9 = 0;
      v10 = (double *)(v4 + *a1);
      v11 = (double *)((char *)v10 + v7);
      v12 = *(_DWORD *)(a2 + 8);
      v14 = *(_QWORD *)(a2 + 16);
      v13 = *(_QWORD *)(a2 + 24);
      v15 = (char *)(v13 + *(_QWORD *)a2);
      if (v13)
        v16 = v15;
      else
        v16 = 0;
      do
      {
        v17 = (*v10 - a4) * (255.0 / (a3 - a4)) + 0.5;
        if (v17 < 0.0)
          v18 = 0;
        else
          v18 = -1;
        if (v17 <= 255.0 && v17 >= 0.0)
          v18 = (int)v17;
        *v16 = v18;
        v10 = (double *)((char *)v10 + v6);
        v20 = v9 + 1;
        if (v9 + 1 == (_DWORD)v5)
          v9 = 0;
        else
          ++v9;
        if (v20 == (_DWORD)v5)
          v10 = (double *)((char *)v10 + HIDWORD(v6) - (v20 * v6));
        v16 += v14;
        v21 = v8 + 1;
        if (v8 + 1 == v12)
          v8 = 0;
        else
          ++v8;
        if (v21 == v12)
          v16 = &v16[HIDWORD(v14) - (v21 * v14)];
      }
      while (v10 != v11);
    }
  }
  return 1;
}

uint64_t cva::experimental::convertPlanar64fToPlanar32f(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  double *v8;
  double *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  float *v13;
  float *v14;
  float v15;
  int v16;
  int v17;

  v2 = a1[3];
  if (v2)
  {
    v3 = a1[1];
    v4 = a1[2];
    v5 = (HIDWORD(v4) * HIDWORD(v3));
    if ((_DWORD)v5)
    {
      v6 = 0;
      v7 = 0;
      v8 = (double *)(v2 + *a1);
      v9 = (double *)((char *)v8 + v5);
      v10 = *(_DWORD *)(a2 + 8);
      v12 = *(_QWORD *)(a2 + 16);
      v11 = *(_QWORD *)(a2 + 24);
      v13 = (float *)(v11 + *(_QWORD *)a2);
      if (v11)
        v14 = v13;
      else
        v14 = 0;
      do
      {
        v15 = *v8;
        *v14 = v15;
        v8 = (double *)((char *)v8 + v4);
        v16 = v7 + 1;
        if (v7 + 1 == (_DWORD)v3)
          v7 = 0;
        else
          ++v7;
        if (v16 == (_DWORD)v3)
          v8 = (double *)((char *)v8 + HIDWORD(v4) - (v16 * v4));
        v14 = (float *)((char *)v14 + v12);
        v17 = v6 + 1;
        if (v6 + 1 == v10)
          v6 = 0;
        else
          ++v6;
        if (v17 == v10)
          v14 = (float *)((char *)v14 + HIDWORD(v12) - (v17 * v12));
      }
      while (v8 != v9);
    }
  }
  return 1;
}

uint64_t cva::experimental::convertPlanar32fToPlanar64f(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  float *v8;
  float *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  double *v13;
  double *v14;
  int v15;
  int v16;

  v2 = a1[3];
  if (v2)
  {
    v3 = a1[1];
    v4 = a1[2];
    v5 = (HIDWORD(v4) * HIDWORD(v3));
    if ((_DWORD)v5)
    {
      v6 = 0;
      v7 = 0;
      v8 = (float *)(v2 + *a1);
      v9 = (float *)((char *)v8 + v5);
      v10 = *(_DWORD *)(a2 + 8);
      v12 = *(_QWORD *)(a2 + 16);
      v11 = *(_QWORD *)(a2 + 24);
      v13 = (double *)(v11 + *(_QWORD *)a2);
      if (v11)
        v14 = v13;
      else
        v14 = 0;
      do
      {
        *v14 = *v8;
        v8 = (float *)((char *)v8 + v4);
        v15 = v7 + 1;
        if (v7 + 1 == (_DWORD)v3)
          v7 = 0;
        else
          ++v7;
        if (v15 == (_DWORD)v3)
          v8 = (float *)((char *)v8 + HIDWORD(v4) - (v15 * v4));
        v14 = (double *)((char *)v14 + v12);
        v16 = v6 + 1;
        if (v6 + 1 == v10)
          v6 = 0;
        else
          ++v6;
        if (v16 == v10)
          v14 = (double *)((char *)v14 + HIDWORD(v12) - (v16 * v12));
      }
      while (v8 != v9);
    }
  }
  return 1;
}

BOOL cva::experimental::convertARGB8uToPlanar32f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const float *a6, const float *a7)
{
  void *v7;
  uint64_t v8;
  int8x16_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  vImage_Buffer v17;
  vImage_Buffer green;
  vImage_Buffer red;
  vImage_Buffer alpha;
  vImage_Buffer src;

  v7 = *(void **)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 8);
  v9.i64[0] = v8;
  v9.i64[1] = HIDWORD(v8);
  *(int8x16_t *)&src.height = vextq_s8(v9, v9, 8uLL);
  src.rowBytes = *(unsigned int *)(a1 + 20);
  alpha.data = *(void **)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 8);
  v9.i64[0] = v10;
  v9.i64[1] = HIDWORD(v10);
  *(int8x16_t *)&alpha.height = vextq_s8(v9, v9, 8uLL);
  alpha.rowBytes = *(unsigned int *)(a2 + 20);
  src.data = v7;
  v11 = *(void **)(a3 + 24);
  v12 = *(_QWORD *)(a3 + 8);
  v9.i64[0] = v12;
  v9.i64[1] = HIDWORD(v12);
  *(int8x16_t *)&red.height = vextq_s8(v9, v9, 8uLL);
  red.rowBytes = *(unsigned int *)(a3 + 20);
  v13 = *(void **)(a4 + 24);
  v14 = *(_QWORD *)(a4 + 8);
  v9.i64[0] = v14;
  v9.i64[1] = HIDWORD(v14);
  *(int8x16_t *)&green.height = vextq_s8(v9, v9, 8uLL);
  green.rowBytes = *(unsigned int *)(a4 + 20);
  red.data = v11;
  v17.data = *(void **)(a5 + 24);
  v15 = *(_QWORD *)(a5 + 8);
  v9.i64[0] = v15;
  v9.i64[1] = HIDWORD(v15);
  *(int8x16_t *)&v17.height = vextq_s8(v9, v9, 8uLL);
  v17.rowBytes = *(unsigned int *)(a5 + 20);
  green.data = v13;
  return vImageConvert_ARGB8888toPlanarF(&src, &alpha, &red, &green, &v17, a6, a7, 0) == 0;
}

BOOL cva::experimental::convertRGBA8uToPlanar32f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const float *a6, const float *a7)
{
  void *v7;
  uint64_t v8;
  int8x16_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  vImage_Buffer v17;
  vImage_Buffer green;
  vImage_Buffer red;
  vImage_Buffer alpha;
  vImage_Buffer src;

  v7 = *(void **)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 8);
  v9.i64[0] = v8;
  v9.i64[1] = HIDWORD(v8);
  *(int8x16_t *)&src.height = vextq_s8(v9, v9, 8uLL);
  src.rowBytes = *(unsigned int *)(a1 + 20);
  alpha.data = *(void **)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 8);
  v9.i64[0] = v10;
  v9.i64[1] = HIDWORD(v10);
  *(int8x16_t *)&alpha.height = vextq_s8(v9, v9, 8uLL);
  alpha.rowBytes = *(unsigned int *)(a2 + 20);
  src.data = v7;
  v11 = *(void **)(a3 + 24);
  v12 = *(_QWORD *)(a3 + 8);
  v9.i64[0] = v12;
  v9.i64[1] = HIDWORD(v12);
  *(int8x16_t *)&red.height = vextq_s8(v9, v9, 8uLL);
  red.rowBytes = *(unsigned int *)(a3 + 20);
  v13 = *(void **)(a4 + 24);
  v14 = *(_QWORD *)(a4 + 8);
  v9.i64[0] = v14;
  v9.i64[1] = HIDWORD(v14);
  *(int8x16_t *)&green.height = vextq_s8(v9, v9, 8uLL);
  green.rowBytes = *(unsigned int *)(a4 + 20);
  red.data = v11;
  v17.data = *(void **)(a5 + 24);
  v15 = *(_QWORD *)(a5 + 8);
  v9.i64[0] = v15;
  v9.i64[1] = HIDWORD(v15);
  *(int8x16_t *)&v17.height = vextq_s8(v9, v9, 8uLL);
  v17.rowBytes = *(unsigned int *)(a5 + 20);
  green.data = v13;
  return vImageConvert_ARGB8888toPlanarF(&src, &alpha, &red, &green, &v17, a6, a7, 0) == 0;
}

BOOL cva::experimental::convertBGRA8uToPlanar32f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const float *a6, const float *a7)
{
  void *v7;
  uint64_t v8;
  int8x16_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  vImage_Buffer v17;
  vImage_Buffer green;
  vImage_Buffer red;
  vImage_Buffer alpha;
  vImage_Buffer src;

  v7 = *(void **)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 8);
  v9.i64[0] = v8;
  v9.i64[1] = HIDWORD(v8);
  *(int8x16_t *)&src.height = vextq_s8(v9, v9, 8uLL);
  src.rowBytes = *(unsigned int *)(a1 + 20);
  alpha.data = *(void **)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 8);
  v9.i64[0] = v10;
  v9.i64[1] = HIDWORD(v10);
  *(int8x16_t *)&alpha.height = vextq_s8(v9, v9, 8uLL);
  alpha.rowBytes = *(unsigned int *)(a2 + 20);
  src.data = v7;
  v11 = *(void **)(a3 + 24);
  v12 = *(_QWORD *)(a3 + 8);
  v9.i64[0] = v12;
  v9.i64[1] = HIDWORD(v12);
  *(int8x16_t *)&red.height = vextq_s8(v9, v9, 8uLL);
  red.rowBytes = *(unsigned int *)(a3 + 20);
  v13 = *(void **)(a4 + 24);
  v14 = *(_QWORD *)(a4 + 8);
  v9.i64[0] = v14;
  v9.i64[1] = HIDWORD(v14);
  *(int8x16_t *)&green.height = vextq_s8(v9, v9, 8uLL);
  green.rowBytes = *(unsigned int *)(a4 + 20);
  red.data = v11;
  v17.data = *(void **)(a5 + 24);
  v15 = *(_QWORD *)(a5 + 8);
  v9.i64[0] = v15;
  v9.i64[1] = HIDWORD(v15);
  *(int8x16_t *)&v17.height = vextq_s8(v9, v9, 8uLL);
  v17.rowBytes = *(unsigned int *)(a5 + 20);
  green.data = v13;
  return vImageConvert_ARGB8888toPlanarF(&src, &alpha, &red, &green, &v17, a6, a7, 0) == 0;
}

BOOL cva::experimental::convertPlanar8uToARGB8u(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v6;
  int8x16_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  vImage_Buffer v15;
  vImage_Buffer srcB;
  vImage_Buffer srcG;
  vImage_Buffer srcR;
  vImage_Buffer srcA;

  v5 = *(void **)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 8);
  v7.i64[0] = v6;
  v7.i64[1] = HIDWORD(v6);
  *(int8x16_t *)&srcA.height = vextq_s8(v7, v7, 8uLL);
  srcA.rowBytes = *(unsigned int *)(a1 + 20);
  srcR.data = *(void **)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 8);
  v7.i64[0] = v8;
  v7.i64[1] = HIDWORD(v8);
  *(int8x16_t *)&srcR.height = vextq_s8(v7, v7, 8uLL);
  srcR.rowBytes = *(unsigned int *)(a2 + 20);
  srcA.data = v5;
  v9 = *(void **)(a3 + 24);
  v10 = *(_QWORD *)(a3 + 8);
  v7.i64[0] = v10;
  v7.i64[1] = HIDWORD(v10);
  *(int8x16_t *)&srcG.height = vextq_s8(v7, v7, 8uLL);
  srcG.rowBytes = *(unsigned int *)(a3 + 20);
  v11 = *(void **)(a4 + 24);
  v12 = *(_QWORD *)(a4 + 8);
  v7.i64[0] = v12;
  v7.i64[1] = HIDWORD(v12);
  *(int8x16_t *)&srcB.height = vextq_s8(v7, v7, 8uLL);
  srcB.rowBytes = *(unsigned int *)(a4 + 20);
  srcG.data = v9;
  v15.data = *(void **)(a5 + 24);
  v13 = *(_QWORD *)(a5 + 8);
  v7.i64[0] = v13;
  v7.i64[1] = HIDWORD(v13);
  *(int8x16_t *)&v15.height = vextq_s8(v7, v7, 8uLL);
  v15.rowBytes = *(unsigned int *)(a5 + 20);
  srcB.data = v11;
  return vImageConvert_Planar8toARGB8888(&srcA, &srcR, &srcG, &srcB, &v15, 0) == 0;
}

BOOL cva::experimental::convertPlanar8uToRGBA8u(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v6;
  int8x16_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  vImage_Buffer v15;
  vImage_Buffer srcB;
  vImage_Buffer srcG;
  vImage_Buffer srcR;
  vImage_Buffer srcA;

  v5 = *(void **)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 8);
  v7.i64[0] = v6;
  v7.i64[1] = HIDWORD(v6);
  *(int8x16_t *)&srcA.height = vextq_s8(v7, v7, 8uLL);
  srcA.rowBytes = *(unsigned int *)(a1 + 20);
  srcR.data = *(void **)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 8);
  v7.i64[0] = v8;
  v7.i64[1] = HIDWORD(v8);
  *(int8x16_t *)&srcR.height = vextq_s8(v7, v7, 8uLL);
  srcR.rowBytes = *(unsigned int *)(a2 + 20);
  srcA.data = v5;
  v9 = *(void **)(a3 + 24);
  v10 = *(_QWORD *)(a3 + 8);
  v7.i64[0] = v10;
  v7.i64[1] = HIDWORD(v10);
  *(int8x16_t *)&srcG.height = vextq_s8(v7, v7, 8uLL);
  srcG.rowBytes = *(unsigned int *)(a3 + 20);
  v11 = *(void **)(a4 + 24);
  v12 = *(_QWORD *)(a4 + 8);
  v7.i64[0] = v12;
  v7.i64[1] = HIDWORD(v12);
  *(int8x16_t *)&srcB.height = vextq_s8(v7, v7, 8uLL);
  srcB.rowBytes = *(unsigned int *)(a4 + 20);
  srcG.data = v9;
  v15.data = *(void **)(a5 + 24);
  v13 = *(_QWORD *)(a5 + 8);
  v7.i64[0] = v13;
  v7.i64[1] = HIDWORD(v13);
  *(int8x16_t *)&v15.height = vextq_s8(v7, v7, 8uLL);
  v15.rowBytes = *(unsigned int *)(a5 + 20);
  srcB.data = v11;
  return vImageConvert_Planar8toARGB8888(&srcA, &srcR, &srcG, &srcB, &v15, 0) == 0;
}

BOOL cva::experimental::convertPlanar8uToBGRA8u(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v6;
  int8x16_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  vImage_Buffer v15;
  vImage_Buffer srcB;
  vImage_Buffer srcG;
  vImage_Buffer srcR;
  vImage_Buffer srcA;

  v5 = *(void **)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 8);
  v7.i64[0] = v6;
  v7.i64[1] = HIDWORD(v6);
  *(int8x16_t *)&srcA.height = vextq_s8(v7, v7, 8uLL);
  srcA.rowBytes = *(unsigned int *)(a1 + 20);
  srcR.data = *(void **)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 8);
  v7.i64[0] = v8;
  v7.i64[1] = HIDWORD(v8);
  *(int8x16_t *)&srcR.height = vextq_s8(v7, v7, 8uLL);
  srcR.rowBytes = *(unsigned int *)(a2 + 20);
  srcA.data = v5;
  v9 = *(void **)(a3 + 24);
  v10 = *(_QWORD *)(a3 + 8);
  v7.i64[0] = v10;
  v7.i64[1] = HIDWORD(v10);
  *(int8x16_t *)&srcG.height = vextq_s8(v7, v7, 8uLL);
  srcG.rowBytes = *(unsigned int *)(a3 + 20);
  v11 = *(void **)(a4 + 24);
  v12 = *(_QWORD *)(a4 + 8);
  v7.i64[0] = v12;
  v7.i64[1] = HIDWORD(v12);
  *(int8x16_t *)&srcB.height = vextq_s8(v7, v7, 8uLL);
  srcB.rowBytes = *(unsigned int *)(a4 + 20);
  srcG.data = v9;
  v15.data = *(void **)(a5 + 24);
  v13 = *(_QWORD *)(a5 + 8);
  v7.i64[0] = v13;
  v7.i64[1] = HIDWORD(v13);
  *(int8x16_t *)&v15.height = vextq_s8(v7, v7, 8uLL);
  v15.rowBytes = *(unsigned int *)(a5 + 20);
  srcB.data = v11;
  return vImageConvert_Planar8toARGB8888(&srcA, &srcR, &srcG, &srcB, &v15, 0) == 0;
}

BOOL cva::experimental::convertPlanar8uToRGB8u(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int8x16_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  vImage_Buffer v12;
  vImage_Buffer planarBlue;
  vImage_Buffer planarGreen;
  vImage_Buffer planarRed;

  planarRed.data = *(void **)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 8);
  v5.i64[0] = v4;
  v5.i64[1] = HIDWORD(v4);
  *(int8x16_t *)&planarRed.height = vextq_s8(v5, v5, 8uLL);
  planarRed.rowBytes = *(unsigned int *)(a1 + 20);
  v6 = *(void **)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 8);
  v5.i64[0] = v7;
  v5.i64[1] = HIDWORD(v7);
  *(int8x16_t *)&planarGreen.height = vextq_s8(v5, v5, 8uLL);
  planarGreen.rowBytes = *(unsigned int *)(a2 + 20);
  v8 = *(void **)(a3 + 24);
  v9 = *(_QWORD *)(a3 + 8);
  v5.i64[0] = v9;
  v5.i64[1] = HIDWORD(v9);
  *(int8x16_t *)&planarBlue.height = vextq_s8(v5, v5, 8uLL);
  planarBlue.rowBytes = *(unsigned int *)(a3 + 20);
  planarGreen.data = v6;
  v12.data = *(void **)(a4 + 24);
  v10 = *(_QWORD *)(a4 + 8);
  v5.i64[0] = v10;
  v5.i64[1] = HIDWORD(v10);
  *(int8x16_t *)&v12.height = vextq_s8(v5, v5, 8uLL);
  v12.rowBytes = *(unsigned int *)(a4 + 20);
  planarBlue.data = v8;
  return vImageConvert_Planar8toRGB888(&planarRed, &planarGreen, &planarBlue, &v12, 0) == 0;
}

BOOL cva::experimental::convertPlanar8uToBGR8u(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int8x16_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  vImage_Buffer v12;
  vImage_Buffer planarBlue;
  vImage_Buffer planarGreen;
  vImage_Buffer planarRed;

  planarRed.data = *(void **)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 8);
  v5.i64[0] = v4;
  v5.i64[1] = HIDWORD(v4);
  *(int8x16_t *)&planarRed.height = vextq_s8(v5, v5, 8uLL);
  planarRed.rowBytes = *(unsigned int *)(a1 + 20);
  v6 = *(void **)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 8);
  v5.i64[0] = v7;
  v5.i64[1] = HIDWORD(v7);
  *(int8x16_t *)&planarGreen.height = vextq_s8(v5, v5, 8uLL);
  planarGreen.rowBytes = *(unsigned int *)(a2 + 20);
  v8 = *(void **)(a3 + 24);
  v9 = *(_QWORD *)(a3 + 8);
  v5.i64[0] = v9;
  v5.i64[1] = HIDWORD(v9);
  *(int8x16_t *)&planarBlue.height = vextq_s8(v5, v5, 8uLL);
  planarBlue.rowBytes = *(unsigned int *)(a3 + 20);
  planarGreen.data = v6;
  v12.data = *(void **)(a4 + 24);
  v10 = *(_QWORD *)(a4 + 8);
  v5.i64[0] = v10;
  v5.i64[1] = HIDWORD(v10);
  *(int8x16_t *)&v12.height = vextq_s8(v5, v5, 8uLL);
  v12.rowBytes = *(unsigned int *)(a4 + 20);
  planarBlue.data = v8;
  return vImageConvert_Planar8toRGB888(&planarRed, &planarGreen, &planarBlue, &v12, 0) == 0;
}

BOOL cva::experimental::convertPlanar32fToARGB8u(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const float *a6, const float *a7)
{
  void *v7;
  uint64_t v8;
  int8x16_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  vImage_Buffer v17;
  vImage_Buffer blue;
  vImage_Buffer green;
  vImage_Buffer red;
  vImage_Buffer alpha;

  v7 = *(void **)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 8);
  v9.i64[0] = v8;
  v9.i64[1] = HIDWORD(v8);
  *(int8x16_t *)&alpha.height = vextq_s8(v9, v9, 8uLL);
  alpha.rowBytes = *(unsigned int *)(a1 + 20);
  red.data = *(void **)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 8);
  v9.i64[0] = v10;
  v9.i64[1] = HIDWORD(v10);
  *(int8x16_t *)&red.height = vextq_s8(v9, v9, 8uLL);
  red.rowBytes = *(unsigned int *)(a2 + 20);
  alpha.data = v7;
  v11 = *(void **)(a3 + 24);
  v12 = *(_QWORD *)(a3 + 8);
  v9.i64[0] = v12;
  v9.i64[1] = HIDWORD(v12);
  *(int8x16_t *)&green.height = vextq_s8(v9, v9, 8uLL);
  green.rowBytes = *(unsigned int *)(a3 + 20);
  v13 = *(void **)(a4 + 24);
  v14 = *(_QWORD *)(a4 + 8);
  v9.i64[0] = v14;
  v9.i64[1] = HIDWORD(v14);
  *(int8x16_t *)&blue.height = vextq_s8(v9, v9, 8uLL);
  blue.rowBytes = *(unsigned int *)(a4 + 20);
  green.data = v11;
  v17.data = *(void **)(a5 + 24);
  v15 = *(_QWORD *)(a5 + 8);
  v9.i64[0] = v15;
  v9.i64[1] = HIDWORD(v15);
  *(int8x16_t *)&v17.height = vextq_s8(v9, v9, 8uLL);
  v17.rowBytes = *(unsigned int *)(a5 + 20);
  blue.data = v13;
  return vImageConvert_PlanarFToARGB8888(&alpha, &red, &green, &blue, &v17, a6, a7, 0) == 0;
}

BOOL cva::experimental::convertPlanar32fToRGBA8u(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const float *a6, const float *a7)
{
  void *v7;
  uint64_t v8;
  int8x16_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  vImage_Buffer v17;
  vImage_Buffer blue;
  vImage_Buffer green;
  vImage_Buffer red;
  vImage_Buffer alpha;

  v7 = *(void **)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 8);
  v9.i64[0] = v8;
  v9.i64[1] = HIDWORD(v8);
  *(int8x16_t *)&alpha.height = vextq_s8(v9, v9, 8uLL);
  alpha.rowBytes = *(unsigned int *)(a1 + 20);
  red.data = *(void **)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 8);
  v9.i64[0] = v10;
  v9.i64[1] = HIDWORD(v10);
  *(int8x16_t *)&red.height = vextq_s8(v9, v9, 8uLL);
  red.rowBytes = *(unsigned int *)(a2 + 20);
  alpha.data = v7;
  v11 = *(void **)(a3 + 24);
  v12 = *(_QWORD *)(a3 + 8);
  v9.i64[0] = v12;
  v9.i64[1] = HIDWORD(v12);
  *(int8x16_t *)&green.height = vextq_s8(v9, v9, 8uLL);
  green.rowBytes = *(unsigned int *)(a3 + 20);
  v13 = *(void **)(a4 + 24);
  v14 = *(_QWORD *)(a4 + 8);
  v9.i64[0] = v14;
  v9.i64[1] = HIDWORD(v14);
  *(int8x16_t *)&blue.height = vextq_s8(v9, v9, 8uLL);
  blue.rowBytes = *(unsigned int *)(a4 + 20);
  green.data = v11;
  v17.data = *(void **)(a5 + 24);
  v15 = *(_QWORD *)(a5 + 8);
  v9.i64[0] = v15;
  v9.i64[1] = HIDWORD(v15);
  *(int8x16_t *)&v17.height = vextq_s8(v9, v9, 8uLL);
  v17.rowBytes = *(unsigned int *)(a5 + 20);
  blue.data = v13;
  return vImageConvert_PlanarFToARGB8888(&alpha, &red, &green, &blue, &v17, a6, a7, 0) == 0;
}

BOOL cva::experimental::convertPlanar32fToBGRA8u(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const float *a6, const float *a7)
{
  void *v7;
  uint64_t v8;
  int8x16_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  vImage_Buffer v17;
  vImage_Buffer blue;
  vImage_Buffer green;
  vImage_Buffer red;
  vImage_Buffer alpha;

  v7 = *(void **)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 8);
  v9.i64[0] = v8;
  v9.i64[1] = HIDWORD(v8);
  *(int8x16_t *)&alpha.height = vextq_s8(v9, v9, 8uLL);
  alpha.rowBytes = *(unsigned int *)(a1 + 20);
  red.data = *(void **)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 8);
  v9.i64[0] = v10;
  v9.i64[1] = HIDWORD(v10);
  *(int8x16_t *)&red.height = vextq_s8(v9, v9, 8uLL);
  red.rowBytes = *(unsigned int *)(a2 + 20);
  alpha.data = v7;
  v11 = *(void **)(a3 + 24);
  v12 = *(_QWORD *)(a3 + 8);
  v9.i64[0] = v12;
  v9.i64[1] = HIDWORD(v12);
  *(int8x16_t *)&green.height = vextq_s8(v9, v9, 8uLL);
  green.rowBytes = *(unsigned int *)(a3 + 20);
  v13 = *(void **)(a4 + 24);
  v14 = *(_QWORD *)(a4 + 8);
  v9.i64[0] = v14;
  v9.i64[1] = HIDWORD(v14);
  *(int8x16_t *)&blue.height = vextq_s8(v9, v9, 8uLL);
  blue.rowBytes = *(unsigned int *)(a4 + 20);
  green.data = v11;
  v17.data = *(void **)(a5 + 24);
  v15 = *(_QWORD *)(a5 + 8);
  v9.i64[0] = v15;
  v9.i64[1] = HIDWORD(v15);
  *(int8x16_t *)&v17.height = vextq_s8(v9, v9, 8uLL);
  v17.rowBytes = *(unsigned int *)(a5 + 20);
  blue.data = v13;
  return vImageConvert_PlanarFToARGB8888(&alpha, &red, &green, &blue, &v17, a6, a7, 0) == 0;
}

BOOL cva::experimental::convertRGB8uToARGB8u(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int8x16_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  vImage_Buffer v9;
  vImage_Buffer v10;
  vImage_Buffer v11;

  v11.data = *(void **)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  v4.i64[0] = v3;
  v4.i64[1] = HIDWORD(v3);
  *(int8x16_t *)&v11.height = vextq_s8(v4, v4, 8uLL);
  v11.rowBytes = *(unsigned int *)(a1 + 20);
  v5 = *(void **)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 8);
  v4.i64[0] = v6;
  v4.i64[1] = HIDWORD(v6);
  *(int8x16_t *)&v10.height = vextq_s8(v4, v4, 8uLL);
  v10.rowBytes = *(unsigned int *)(a2 + 20);
  v9.data = *(void **)(a3 + 24);
  v7 = *(_QWORD *)(a3 + 8);
  v4.i64[0] = v7;
  v4.i64[1] = HIDWORD(v7);
  *(int8x16_t *)&v9.height = vextq_s8(v4, v4, 8uLL);
  v9.rowBytes = *(unsigned int *)(a3 + 20);
  v10.data = v5;
  return vImageConvert_RGB888toARGB8888(&v11, &v10, 0, &v9, 0, 0) == 0;
}

BOOL cva::experimental::convertRGB8uToARGB8u(uint64_t a1, uint64_t a2, Pixel_8 a3)
{
  void *v3;
  uint64_t v4;
  int8x16_t v5;
  uint64_t v6;
  vImage_Buffer v8;
  vImage_Buffer v9;

  v3 = *(void **)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 8);
  v5.i64[0] = v4;
  v5.i64[1] = HIDWORD(v4);
  *(int8x16_t *)&v9.height = vextq_s8(v5, v5, 8uLL);
  v9.rowBytes = *(unsigned int *)(a1 + 20);
  v8.data = *(void **)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 8);
  v5.i64[0] = v6;
  v5.i64[1] = HIDWORD(v6);
  *(int8x16_t *)&v8.height = vextq_s8(v5, v5, 8uLL);
  v8.rowBytes = *(unsigned int *)(a2 + 20);
  v9.data = v3;
  return vImageConvert_RGB888toARGB8888(&v9, 0, a3, &v8, 0, 0) == 0;
}

BOOL cva::experimental::convertRGB8uToBGRA8u(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int8x16_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  vImage_Buffer v9;
  vImage_Buffer v10;
  vImage_Buffer v11;

  v11.data = *(void **)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  v4.i64[0] = v3;
  v4.i64[1] = HIDWORD(v3);
  *(int8x16_t *)&v11.height = vextq_s8(v4, v4, 8uLL);
  v11.rowBytes = *(unsigned int *)(a1 + 20);
  v5 = *(void **)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 8);
  v4.i64[0] = v6;
  v4.i64[1] = HIDWORD(v6);
  *(int8x16_t *)&v10.height = vextq_s8(v4, v4, 8uLL);
  v10.rowBytes = *(unsigned int *)(a2 + 20);
  v9.data = *(void **)(a3 + 24);
  v7 = *(_QWORD *)(a3 + 8);
  v4.i64[0] = v7;
  v4.i64[1] = HIDWORD(v7);
  *(int8x16_t *)&v9.height = vextq_s8(v4, v4, 8uLL);
  v9.rowBytes = *(unsigned int *)(a3 + 20);
  v10.data = v5;
  return vImageConvert_RGB888toBGRA8888(&v11, &v10, 0, &v9, 0, 0) == 0;
}

BOOL cva::experimental::convertRGB8uToRGBA8u(uint64_t a1, uint64_t a2, Pixel_8 a3)
{
  void *v3;
  uint64_t v4;
  int8x16_t v5;
  uint64_t v6;
  vImage_Buffer v8;
  vImage_Buffer v9;

  v3 = *(void **)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 8);
  v5.i64[0] = v4;
  v5.i64[1] = HIDWORD(v4);
  *(int8x16_t *)&v9.height = vextq_s8(v5, v5, 8uLL);
  v9.rowBytes = *(unsigned int *)(a1 + 20);
  v8.data = *(void **)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 8);
  v5.i64[0] = v6;
  v5.i64[1] = HIDWORD(v6);
  *(int8x16_t *)&v8.height = vextq_s8(v5, v5, 8uLL);
  v8.rowBytes = *(unsigned int *)(a2 + 20);
  v9.data = v3;
  return vImageConvert_RGB888toRGBA8888(&v9, 0, a3, &v8, 0, 0) == 0;
}

BOOL cva::experimental::convertRGB8uToRGBA8u(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int8x16_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  vImage_Buffer v9;
  vImage_Buffer v10;
  vImage_Buffer v11;

  v11.data = *(void **)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  v4.i64[0] = v3;
  v4.i64[1] = HIDWORD(v3);
  *(int8x16_t *)&v11.height = vextq_s8(v4, v4, 8uLL);
  v11.rowBytes = *(unsigned int *)(a1 + 20);
  v5 = *(void **)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 8);
  v4.i64[0] = v6;
  v4.i64[1] = HIDWORD(v6);
  *(int8x16_t *)&v10.height = vextq_s8(v4, v4, 8uLL);
  v10.rowBytes = *(unsigned int *)(a2 + 20);
  v9.data = *(void **)(a3 + 24);
  v7 = *(_QWORD *)(a3 + 8);
  v4.i64[0] = v7;
  v4.i64[1] = HIDWORD(v7);
  *(int8x16_t *)&v9.height = vextq_s8(v4, v4, 8uLL);
  v9.rowBytes = *(unsigned int *)(a3 + 20);
  v10.data = v5;
  return vImageConvert_RGB888toRGBA8888(&v11, &v10, 0, &v9, 0, 0) == 0;
}

BOOL cva::experimental::convertRGB8uToBGRA8u(uint64_t a1, uint64_t a2, Pixel_8 a3)
{
  void *v3;
  uint64_t v4;
  int8x16_t v5;
  uint64_t v6;
  vImage_Buffer v8;
  vImage_Buffer v9;

  v3 = *(void **)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 8);
  v5.i64[0] = v4;
  v5.i64[1] = HIDWORD(v4);
  *(int8x16_t *)&v9.height = vextq_s8(v5, v5, 8uLL);
  v9.rowBytes = *(unsigned int *)(a1 + 20);
  v8.data = *(void **)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 8);
  v5.i64[0] = v6;
  v5.i64[1] = HIDWORD(v6);
  *(int8x16_t *)&v8.height = vextq_s8(v5, v5, 8uLL);
  v8.rowBytes = *(unsigned int *)(a2 + 20);
  v9.data = v3;
  return vImageConvert_RGB888toBGRA8888(&v9, 0, a3, &v8, 0, 0) == 0;
}

BOOL cva::experimental::convertBGR8uToBGRA8u(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int8x16_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  vImage_Buffer v9;
  vImage_Buffer v10;
  vImage_Buffer v11;

  v11.data = *(void **)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  v4.i64[0] = v3;
  v4.i64[1] = HIDWORD(v3);
  *(int8x16_t *)&v11.height = vextq_s8(v4, v4, 8uLL);
  v11.rowBytes = *(unsigned int *)(a1 + 20);
  v5 = *(void **)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 8);
  v4.i64[0] = v6;
  v4.i64[1] = HIDWORD(v6);
  *(int8x16_t *)&v10.height = vextq_s8(v4, v4, 8uLL);
  v10.rowBytes = *(unsigned int *)(a2 + 20);
  v9.data = *(void **)(a3 + 24);
  v7 = *(_QWORD *)(a3 + 8);
  v4.i64[0] = v7;
  v4.i64[1] = HIDWORD(v7);
  *(int8x16_t *)&v9.height = vextq_s8(v4, v4, 8uLL);
  v9.rowBytes = *(unsigned int *)(a3 + 20);
  v10.data = v5;
  return vImageConvert_RGB888toRGBA8888(&v11, &v10, 0, &v9, 0, 0) == 0;
}

BOOL cva::experimental::convertBGR8uToBGRA8u(uint64_t a1, uint64_t a2, Pixel_8 a3)
{
  void *v3;
  uint64_t v4;
  int8x16_t v5;
  uint64_t v6;
  vImage_Buffer v8;
  vImage_Buffer v9;

  v3 = *(void **)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 8);
  v5.i64[0] = v4;
  v5.i64[1] = HIDWORD(v4);
  *(int8x16_t *)&v9.height = vextq_s8(v5, v5, 8uLL);
  v9.rowBytes = *(unsigned int *)(a1 + 20);
  v8.data = *(void **)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 8);
  v5.i64[0] = v6;
  v5.i64[1] = HIDWORD(v6);
  *(int8x16_t *)&v8.height = vextq_s8(v5, v5, 8uLL);
  v8.rowBytes = *(unsigned int *)(a2 + 20);
  v9.data = v3;
  return vImageConvert_RGB888toRGBA8888(&v9, 0, a3, &v8, 0, 0) == 0;
}

BOOL cva::experimental::convertBGR8uToRGBA8u(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int8x16_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  vImage_Buffer v9;
  vImage_Buffer v10;
  vImage_Buffer v11;

  v11.data = *(void **)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  v4.i64[0] = v3;
  v4.i64[1] = HIDWORD(v3);
  *(int8x16_t *)&v11.height = vextq_s8(v4, v4, 8uLL);
  v11.rowBytes = *(unsigned int *)(a1 + 20);
  v5 = *(void **)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 8);
  v4.i64[0] = v6;
  v4.i64[1] = HIDWORD(v6);
  *(int8x16_t *)&v10.height = vextq_s8(v4, v4, 8uLL);
  v10.rowBytes = *(unsigned int *)(a2 + 20);
  v9.data = *(void **)(a3 + 24);
  v7 = *(_QWORD *)(a3 + 8);
  v4.i64[0] = v7;
  v4.i64[1] = HIDWORD(v7);
  *(int8x16_t *)&v9.height = vextq_s8(v4, v4, 8uLL);
  v9.rowBytes = *(unsigned int *)(a3 + 20);
  v10.data = v5;
  return vImageConvert_RGB888toBGRA8888(&v11, &v10, 0, &v9, 0, 0) == 0;
}

BOOL cva::experimental::convertBGR8uToRGBA8u(uint64_t a1, uint64_t a2, Pixel_8 a3)
{
  void *v3;
  uint64_t v4;
  int8x16_t v5;
  uint64_t v6;
  vImage_Buffer v8;
  vImage_Buffer v9;

  v3 = *(void **)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 8);
  v5.i64[0] = v4;
  v5.i64[1] = HIDWORD(v4);
  *(int8x16_t *)&v9.height = vextq_s8(v5, v5, 8uLL);
  v9.rowBytes = *(unsigned int *)(a1 + 20);
  v8.data = *(void **)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 8);
  v5.i64[0] = v6;
  v5.i64[1] = HIDWORD(v6);
  *(int8x16_t *)&v8.height = vextq_s8(v5, v5, 8uLL);
  v8.rowBytes = *(unsigned int *)(a2 + 20);
  v9.data = v3;
  return vImageConvert_RGB888toBGRA8888(&v9, 0, a3, &v8, 0, 0) == 0;
}

BOOL cva::experimental::convertARGB8uToRGB8u(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  int8x16_t v4;
  uint64_t v5;
  vImage_Buffer v7;
  vImage_Buffer v8;

  v2 = *(void **)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  v4.i64[0] = v3;
  v4.i64[1] = HIDWORD(v3);
  *(int8x16_t *)&v8.height = vextq_s8(v4, v4, 8uLL);
  v8.rowBytes = *(unsigned int *)(a1 + 20);
  v7.data = *(void **)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 8);
  v4.i64[0] = v5;
  v4.i64[1] = HIDWORD(v5);
  *(int8x16_t *)&v7.height = vextq_s8(v4, v4, 8uLL);
  v7.rowBytes = *(unsigned int *)(a2 + 20);
  v8.data = v2;
  return vImageConvert_ARGB8888toRGB888(&v8, &v7, 0) == 0;
}

BOOL cva::experimental::convertBGRA8uToRGB8u(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  int8x16_t v4;
  uint64_t v5;
  vImage_Buffer v7;
  vImage_Buffer v8;

  v2 = *(void **)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  v4.i64[0] = v3;
  v4.i64[1] = HIDWORD(v3);
  *(int8x16_t *)&v8.height = vextq_s8(v4, v4, 8uLL);
  v8.rowBytes = *(unsigned int *)(a1 + 20);
  v7.data = *(void **)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 8);
  v4.i64[0] = v5;
  v4.i64[1] = HIDWORD(v5);
  *(int8x16_t *)&v7.height = vextq_s8(v4, v4, 8uLL);
  v7.rowBytes = *(unsigned int *)(a2 + 20);
  v8.data = v2;
  return vImageConvert_BGRA8888toRGB888(&v8, &v7, 0) == 0;
}

BOOL cva::experimental::convertRGBA8uToRGB8u(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  int8x16_t v4;
  uint64_t v5;
  vImage_Buffer v7;
  vImage_Buffer v8;

  v2 = *(void **)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  v4.i64[0] = v3;
  v4.i64[1] = HIDWORD(v3);
  *(int8x16_t *)&v8.height = vextq_s8(v4, v4, 8uLL);
  v8.rowBytes = *(unsigned int *)(a1 + 20);
  v7.data = *(void **)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 8);
  v4.i64[0] = v5;
  v4.i64[1] = HIDWORD(v5);
  *(int8x16_t *)&v7.height = vextq_s8(v4, v4, 8uLL);
  v7.rowBytes = *(unsigned int *)(a2 + 20);
  v8.data = v2;
  return vImageConvert_RGBA8888toRGB888(&v8, &v7, 0) == 0;
}

BOOL cva::experimental::convertRGBA8uToBGR8u(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  int8x16_t v4;
  uint64_t v5;
  vImage_Buffer v7;
  vImage_Buffer v8;

  v2 = *(void **)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  v4.i64[0] = v3;
  v4.i64[1] = HIDWORD(v3);
  *(int8x16_t *)&v8.height = vextq_s8(v4, v4, 8uLL);
  v8.rowBytes = *(unsigned int *)(a1 + 20);
  v7.data = *(void **)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 8);
  v4.i64[0] = v5;
  v4.i64[1] = HIDWORD(v5);
  *(int8x16_t *)&v7.height = vextq_s8(v4, v4, 8uLL);
  v7.rowBytes = *(unsigned int *)(a2 + 20);
  v8.data = v2;
  return vImageConvert_BGRA8888toRGB888(&v8, &v7, 0) == 0;
}

BOOL cva::experimental::convertBGRA8uToBGR8u(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  int8x16_t v4;
  uint64_t v5;
  vImage_Buffer v7;
  vImage_Buffer v8;

  v2 = *(void **)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  v4.i64[0] = v3;
  v4.i64[1] = HIDWORD(v3);
  *(int8x16_t *)&v8.height = vextq_s8(v4, v4, 8uLL);
  v8.rowBytes = *(unsigned int *)(a1 + 20);
  v7.data = *(void **)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 8);
  v4.i64[0] = v5;
  v4.i64[1] = HIDWORD(v5);
  *(int8x16_t *)&v7.height = vextq_s8(v4, v4, 8uLL);
  v7.rowBytes = *(unsigned int *)(a2 + 20);
  v8.data = v2;
  return vImageConvert_RGBA8888toRGB888(&v8, &v7, 0) == 0;
}

BOOL cva::experimental::convertRGBA8uToPlanar8u(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v6;
  int8x16_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  vImage_Buffer v15;
  vImage_Buffer destG;
  vImage_Buffer destR;
  vImage_Buffer destA;
  vImage_Buffer srcARGB;

  v5 = *(void **)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 8);
  v7.i64[0] = v6;
  v7.i64[1] = HIDWORD(v6);
  *(int8x16_t *)&srcARGB.height = vextq_s8(v7, v7, 8uLL);
  srcARGB.rowBytes = *(unsigned int *)(a1 + 20);
  destA.data = *(void **)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 8);
  v7.i64[0] = v8;
  v7.i64[1] = HIDWORD(v8);
  *(int8x16_t *)&destA.height = vextq_s8(v7, v7, 8uLL);
  destA.rowBytes = *(unsigned int *)(a2 + 20);
  srcARGB.data = v5;
  v9 = *(void **)(a3 + 24);
  v10 = *(_QWORD *)(a3 + 8);
  v7.i64[0] = v10;
  v7.i64[1] = HIDWORD(v10);
  *(int8x16_t *)&destR.height = vextq_s8(v7, v7, 8uLL);
  destR.rowBytes = *(unsigned int *)(a3 + 20);
  v11 = *(void **)(a4 + 24);
  v12 = *(_QWORD *)(a4 + 8);
  v7.i64[0] = v12;
  v7.i64[1] = HIDWORD(v12);
  *(int8x16_t *)&destG.height = vextq_s8(v7, v7, 8uLL);
  destG.rowBytes = *(unsigned int *)(a4 + 20);
  destR.data = v9;
  v15.data = *(void **)(a5 + 24);
  v13 = *(_QWORD *)(a5 + 8);
  v7.i64[0] = v13;
  v7.i64[1] = HIDWORD(v13);
  *(int8x16_t *)&v15.height = vextq_s8(v7, v7, 8uLL);
  v15.rowBytes = *(unsigned int *)(a5 + 20);
  destG.data = v11;
  return vImageConvert_ARGB8888toPlanar8(&srcARGB, &destA, &destR, &destG, &v15, 0) == 0;
}

BOOL cva::experimental::convertARGB8uToPlanar8u(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v6;
  int8x16_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  vImage_Buffer v15;
  vImage_Buffer destG;
  vImage_Buffer destR;
  vImage_Buffer destA;
  vImage_Buffer srcARGB;

  v5 = *(void **)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 8);
  v7.i64[0] = v6;
  v7.i64[1] = HIDWORD(v6);
  *(int8x16_t *)&srcARGB.height = vextq_s8(v7, v7, 8uLL);
  srcARGB.rowBytes = *(unsigned int *)(a1 + 20);
  destA.data = *(void **)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 8);
  v7.i64[0] = v8;
  v7.i64[1] = HIDWORD(v8);
  *(int8x16_t *)&destA.height = vextq_s8(v7, v7, 8uLL);
  destA.rowBytes = *(unsigned int *)(a2 + 20);
  srcARGB.data = v5;
  v9 = *(void **)(a3 + 24);
  v10 = *(_QWORD *)(a3 + 8);
  v7.i64[0] = v10;
  v7.i64[1] = HIDWORD(v10);
  *(int8x16_t *)&destR.height = vextq_s8(v7, v7, 8uLL);
  destR.rowBytes = *(unsigned int *)(a3 + 20);
  v11 = *(void **)(a4 + 24);
  v12 = *(_QWORD *)(a4 + 8);
  v7.i64[0] = v12;
  v7.i64[1] = HIDWORD(v12);
  *(int8x16_t *)&destG.height = vextq_s8(v7, v7, 8uLL);
  destG.rowBytes = *(unsigned int *)(a4 + 20);
  destR.data = v9;
  v15.data = *(void **)(a5 + 24);
  v13 = *(_QWORD *)(a5 + 8);
  v7.i64[0] = v13;
  v7.i64[1] = HIDWORD(v13);
  *(int8x16_t *)&v15.height = vextq_s8(v7, v7, 8uLL);
  v15.rowBytes = *(unsigned int *)(a5 + 20);
  destG.data = v11;
  return vImageConvert_ARGB8888toPlanar8(&srcARGB, &destA, &destR, &destG, &v15, 0) == 0;
}

BOOL cva::experimental::convertBGRA8uToPlanar8u(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v6;
  int8x16_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  vImage_Buffer v15;
  vImage_Buffer destG;
  vImage_Buffer destR;
  vImage_Buffer destA;
  vImage_Buffer srcARGB;

  v5 = *(void **)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 8);
  v7.i64[0] = v6;
  v7.i64[1] = HIDWORD(v6);
  *(int8x16_t *)&srcARGB.height = vextq_s8(v7, v7, 8uLL);
  srcARGB.rowBytes = *(unsigned int *)(a1 + 20);
  destA.data = *(void **)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 8);
  v7.i64[0] = v8;
  v7.i64[1] = HIDWORD(v8);
  *(int8x16_t *)&destA.height = vextq_s8(v7, v7, 8uLL);
  destA.rowBytes = *(unsigned int *)(a2 + 20);
  srcARGB.data = v5;
  v9 = *(void **)(a3 + 24);
  v10 = *(_QWORD *)(a3 + 8);
  v7.i64[0] = v10;
  v7.i64[1] = HIDWORD(v10);
  *(int8x16_t *)&destR.height = vextq_s8(v7, v7, 8uLL);
  destR.rowBytes = *(unsigned int *)(a3 + 20);
  v11 = *(void **)(a4 + 24);
  v12 = *(_QWORD *)(a4 + 8);
  v7.i64[0] = v12;
  v7.i64[1] = HIDWORD(v12);
  *(int8x16_t *)&destG.height = vextq_s8(v7, v7, 8uLL);
  destG.rowBytes = *(unsigned int *)(a4 + 20);
  destR.data = v9;
  v15.data = *(void **)(a5 + 24);
  v13 = *(_QWORD *)(a5 + 8);
  v7.i64[0] = v13;
  v7.i64[1] = HIDWORD(v13);
  *(int8x16_t *)&v15.height = vextq_s8(v7, v7, 8uLL);
  v15.rowBytes = *(unsigned int *)(a5 + 20);
  destG.data = v11;
  return vImageConvert_ARGB8888toPlanar8(&srcARGB, &destA, &destR, &destG, &v15, 0) == 0;
}

BOOL cva::experimental::convertBGR8uToPlanar8u(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int8x16_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  vImage_Buffer v12;
  vImage_Buffer greenDest;
  vImage_Buffer redDest;
  vImage_Buffer rgbSrc;

  rgbSrc.data = *(void **)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 8);
  v5.i64[0] = v4;
  v5.i64[1] = HIDWORD(v4);
  *(int8x16_t *)&rgbSrc.height = vextq_s8(v5, v5, 8uLL);
  rgbSrc.rowBytes = *(unsigned int *)(a1 + 20);
  v6 = *(void **)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 8);
  v5.i64[0] = v7;
  v5.i64[1] = HIDWORD(v7);
  *(int8x16_t *)&redDest.height = vextq_s8(v5, v5, 8uLL);
  redDest.rowBytes = *(unsigned int *)(a2 + 20);
  v8 = *(void **)(a3 + 24);
  v9 = *(_QWORD *)(a3 + 8);
  v5.i64[0] = v9;
  v5.i64[1] = HIDWORD(v9);
  *(int8x16_t *)&greenDest.height = vextq_s8(v5, v5, 8uLL);
  greenDest.rowBytes = *(unsigned int *)(a3 + 20);
  redDest.data = v6;
  v12.data = *(void **)(a4 + 24);
  v10 = *(_QWORD *)(a4 + 8);
  v5.i64[0] = v10;
  v5.i64[1] = HIDWORD(v10);
  *(int8x16_t *)&v12.height = vextq_s8(v5, v5, 8uLL);
  v12.rowBytes = *(unsigned int *)(a4 + 20);
  greenDest.data = v8;
  return vImageConvert_RGB888toPlanar8(&rgbSrc, &redDest, &greenDest, &v12, 0) == 0;
}

BOOL cva::experimental::convertRGB8uToPlanar8u(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int8x16_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  vImage_Buffer v12;
  vImage_Buffer greenDest;
  vImage_Buffer redDest;
  vImage_Buffer rgbSrc;

  rgbSrc.data = *(void **)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 8);
  v5.i64[0] = v4;
  v5.i64[1] = HIDWORD(v4);
  *(int8x16_t *)&rgbSrc.height = vextq_s8(v5, v5, 8uLL);
  rgbSrc.rowBytes = *(unsigned int *)(a1 + 20);
  v6 = *(void **)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 8);
  v5.i64[0] = v7;
  v5.i64[1] = HIDWORD(v7);
  *(int8x16_t *)&redDest.height = vextq_s8(v5, v5, 8uLL);
  redDest.rowBytes = *(unsigned int *)(a2 + 20);
  v8 = *(void **)(a3 + 24);
  v9 = *(_QWORD *)(a3 + 8);
  v5.i64[0] = v9;
  v5.i64[1] = HIDWORD(v9);
  *(int8x16_t *)&greenDest.height = vextq_s8(v5, v5, 8uLL);
  greenDest.rowBytes = *(unsigned int *)(a3 + 20);
  redDest.data = v6;
  v12.data = *(void **)(a4 + 24);
  v10 = *(_QWORD *)(a4 + 8);
  v5.i64[0] = v10;
  v5.i64[1] = HIDWORD(v10);
  *(int8x16_t *)&v12.height = vextq_s8(v5, v5, 8uLL);
  v12.rowBytes = *(unsigned int *)(a4 + 20);
  greenDest.data = v8;
  return vImageConvert_RGB888toPlanar8(&rgbSrc, &redDest, &greenDest, &v12, 0) == 0;
}

uint64_t cva::experimental::convertRGB8uToGray8u(_QWORD *a1, uint64_t a2, unsigned __int8 ***a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  int v15;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  unsigned __int8 ***v23[2];
  __int16 v24;

  v3 = a1[3];
  if (v3)
  {
    v4 = a1[1];
    v20 = a1[2];
    v5 = (HIDWORD(v20) * HIDWORD(v4));
    if ((_DWORD)v5)
    {
      v7 = 0;
      v8 = 0;
      v9 = v3 + *a1;
      v19 = v9 + v5;
      v10 = *(_QWORD *)(a2 + 24);
      v18 = HIDWORD(*(_QWORD *)(a2 + 16));
      if (v10)
        v11 = (_BYTE *)(v10 + *(_QWORD *)a2);
      else
        v11 = 0;
      v17 = *(_DWORD *)(a2 + 8);
      v12 = a1[2];
      v13 = *(_QWORD *)(a2 + 16);
      do
      {
        v21 = v9;
        v22 = (uint64_t *)&v21;
        v23[0] = (unsigned __int8 ***)&v22;
        v23[1] = a3;
        v24 = 0;
        sub_20ABD22C8((uint64_t)&v24, v23);
        *v11 = HIBYTE(v24);
        v14 = v8 + 1;
        if (v8 + 1 == (_DWORD)v4)
          v8 = 0;
        else
          ++v8;
        if (v14 == (_DWORD)v4)
          v9 = v9 + v12 - (v14 * v20) + HIDWORD(v20);
        else
          v9 += v12;
        v15 = v7 + 1;
        if (v7 + 1 == v17)
          v7 = 0;
        else
          ++v7;
        if (v15 == v17)
          v11 = &v11[v13 - v15 * v13 + v18];
        else
          v11 += v13;
      }
      while (v9 != v19);
    }
  }
  return 1;
}

uint64_t sub_20ABD22C8(uint64_t result, unsigned __int8 ****a2)
{
  _WORD *v2;
  _WORD *v3;
  __int16 v4;
  __int16 v5;

  v2 = (_WORD *)result;
  v3 = a2[1];
  if (v3 == (_WORD *)result)
  {
    v5 = 0;
    result = sub_20ABD22C8(&v5);
    v4 = v5;
  }
  else
  {
    v4 = *v3 * ****a2 + v3[1] * (***a2)[1] + v3[2] * (***a2)[2];
  }
  *v2 = v4;
  return result;
}

uint64_t cva::experimental::convertBGR8uToGray8u(_QWORD *a1, uint64_t a2, unsigned __int8 ***a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  int v15;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  unsigned __int8 ***v23[2];
  __int16 v24;

  v3 = a1[3];
  if (v3)
  {
    v4 = a1[1];
    v20 = a1[2];
    v5 = (HIDWORD(v20) * HIDWORD(v4));
    if ((_DWORD)v5)
    {
      v7 = 0;
      v8 = 0;
      v9 = v3 + *a1;
      v19 = v9 + v5;
      v10 = *(_QWORD *)(a2 + 24);
      v18 = HIDWORD(*(_QWORD *)(a2 + 16));
      if (v10)
        v11 = (_BYTE *)(v10 + *(_QWORD *)a2);
      else
        v11 = 0;
      v17 = *(_DWORD *)(a2 + 8);
      v12 = a1[2];
      v13 = *(_QWORD *)(a2 + 16);
      do
      {
        v21 = v9;
        v22 = (uint64_t *)&v21;
        v23[0] = (unsigned __int8 ***)&v22;
        v23[1] = a3;
        v24 = 0;
        sub_20ABD22C8((uint64_t)&v24, v23);
        *v11 = HIBYTE(v24);
        v14 = v8 + 1;
        if (v8 + 1 == (_DWORD)v4)
          v8 = 0;
        else
          ++v8;
        if (v14 == (_DWORD)v4)
          v9 = v9 + v12 - (v14 * v20) + HIDWORD(v20);
        else
          v9 += v12;
        v15 = v7 + 1;
        if (v7 + 1 == v17)
          v7 = 0;
        else
          ++v7;
        if (v15 == v17)
          v11 = &v11[v13 - v15 * v13 + v18];
        else
          v11 += v13;
      }
      while (v9 != v19);
    }
  }
  return 1;
}

uint64_t cva::experimental::convertGray8uToRGB8u(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  char *v8;
  char *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char v15;
  int v16;
  int v17;

  v2 = a1[3];
  if (v2)
  {
    v3 = a1[1];
    v4 = a1[2];
    v5 = (HIDWORD(v4) * HIDWORD(v3));
    if ((_DWORD)v5)
    {
      v6 = 0;
      v7 = 0;
      v8 = (char *)(v2 + *a1);
      v9 = &v8[v5];
      v10 = *(_DWORD *)(a2 + 8);
      v12 = *(_QWORD *)(a2 + 16);
      v11 = *(_QWORD *)(a2 + 24);
      v13 = (char *)(v11 + *(_QWORD *)a2);
      if (v11)
        v14 = v13;
      else
        v14 = 0;
      do
      {
        v15 = *v8;
        *v14 = *v8;
        v14[1] = v15;
        v14[2] = v15;
        v8 += v4;
        v16 = v7 + 1;
        if (v7 + 1 == (_DWORD)v3)
          v7 = 0;
        else
          ++v7;
        if (v16 == (_DWORD)v3)
          v8 = &v8[HIDWORD(v4) - (v16 * v4)];
        v14 += v12;
        v17 = v6 + 1;
        if (v6 + 1 == v10)
          v6 = 0;
        else
          ++v6;
        if (v17 == v10)
          v14 = &v14[HIDWORD(v12) - (v17 * v12)];
      }
      while (v8 != v9);
    }
  }
  return 1;
}

uint64_t cva::experimental::convertGray8uToBGR8u(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  char *v8;
  char *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char v15;
  int v16;
  int v17;

  v2 = a1[3];
  if (v2)
  {
    v3 = a1[1];
    v4 = a1[2];
    v5 = (HIDWORD(v4) * HIDWORD(v3));
    if ((_DWORD)v5)
    {
      v6 = 0;
      v7 = 0;
      v8 = (char *)(v2 + *a1);
      v9 = &v8[v5];
      v10 = *(_DWORD *)(a2 + 8);
      v12 = *(_QWORD *)(a2 + 16);
      v11 = *(_QWORD *)(a2 + 24);
      v13 = (char *)(v11 + *(_QWORD *)a2);
      if (v11)
        v14 = v13;
      else
        v14 = 0;
      do
      {
        v15 = *v8;
        *v14 = *v8;
        v14[1] = v15;
        v14[2] = v15;
        v8 += v4;
        v16 = v7 + 1;
        if (v7 + 1 == (_DWORD)v3)
          v7 = 0;
        else
          ++v7;
        if (v16 == (_DWORD)v3)
          v8 = &v8[HIDWORD(v4) - (v16 * v4)];
        v14 += v12;
        v17 = v6 + 1;
        if (v6 + 1 == v10)
          v6 = 0;
        else
          ++v6;
        if (v17 == v10)
          v14 = &v14[HIDWORD(v12) - (v17 * v12)];
      }
      while (v8 != v9);
    }
  }
  return 1;
}

uint64_t cva::experimental::convertGray8uToRGBA8u(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unint64_t v17;
  int *v18;
  int v19;
  unsigned __int8 *v20;
  int v21;
  unsigned __int8 *v22;
  int v23;
  int v24;
  int *v25;
  int v26;

  v3 = a2[3];
  if (v3)
    v4 = (unsigned __int8 *)(v3 + *a2);
  else
    v4 = 0;
  v5 = a1[3];
  if (v5)
  {
    v6 = a1[1];
    v7 = a1[2];
    v8 = (HIDWORD(v7) * HIDWORD(v6));
    if ((_DWORD)v8)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v12 = a2[1];
      v13 = a2[2];
      v14 = (unsigned __int8 *)(v5 + *a1);
      v15 = &v14[v8];
      v17 = *(_QWORD *)(a3 + 16);
      v16 = *(_QWORD *)(a3 + 24);
      if (v16)
        v18 = (int *)(v16 + *(_QWORD *)a3);
      else
        v18 = 0;
      v19 = *(_DWORD *)(a3 + 8);
      do
      {
        v20 = &v4[v13];
        v21 = v9 + 1;
        v22 = &v20[HIDWORD(v13) - ((v9 + 1) * v13)];
        if (v9 + 1 == (_DWORD)v12)
          v9 = 0;
        else
          ++v9;
        v23 = *v4;
        if (v21 == (_DWORD)v12)
          v20 = v22;
        *v18 = (*v14 << 16) | (*v14 << 8) | (v23 << 24) | *v14;
        v14 += v7;
        v24 = v11 + 1;
        if (v11 + 1 == (_DWORD)v6)
          v11 = 0;
        else
          ++v11;
        if (v24 == (_DWORD)v6)
          v14 = &v14[HIDWORD(v7) - (v24 * v7)];
        v25 = (int *)((char *)v18 + v17);
        v26 = v10 + 1;
        if (v10 + 1 == v19)
          v10 = 0;
        else
          ++v10;
        if (v26 == v19)
          v18 = (int *)((char *)v25 + HIDWORD(v17) - (v26 * v17));
        else
          v18 = v25;
        v4 = v20;
      }
      while (v14 != v15);
    }
  }
  return 1;
}

uint64_t cva::experimental::convertGray8uToARGB8u(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unint64_t v17;
  int *v18;
  int v19;
  unsigned __int8 *v20;
  int v21;
  unsigned __int8 *v22;
  int v23;
  int v24;
  int *v25;
  int v26;

  v3 = a2[3];
  if (v3)
    v4 = (unsigned __int8 *)(v3 + *a2);
  else
    v4 = 0;
  v5 = a1[3];
  if (v5)
  {
    v6 = a1[1];
    v7 = a1[2];
    v8 = (HIDWORD(v7) * HIDWORD(v6));
    if ((_DWORD)v8)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v12 = a2[1];
      v13 = a2[2];
      v14 = (unsigned __int8 *)(v5 + *a1);
      v15 = &v14[v8];
      v17 = *(_QWORD *)(a3 + 16);
      v16 = *(_QWORD *)(a3 + 24);
      if (v16)
        v18 = (int *)(v16 + *(_QWORD *)a3);
      else
        v18 = 0;
      v19 = *(_DWORD *)(a3 + 8);
      do
      {
        v20 = &v4[v13];
        v21 = v9 + 1;
        v22 = &v20[HIDWORD(v13) - ((v9 + 1) * v13)];
        if (v9 + 1 == (_DWORD)v12)
          v9 = 0;
        else
          ++v9;
        v23 = *v4;
        if (v21 == (_DWORD)v12)
          v20 = v22;
        *v18 = (*v14 << 16) | (*v14 << 24) | (*v14 << 8) | v23;
        v14 += v7;
        v24 = v11 + 1;
        if (v11 + 1 == (_DWORD)v6)
          v11 = 0;
        else
          ++v11;
        if (v24 == (_DWORD)v6)
          v14 = &v14[HIDWORD(v7) - (v24 * v7)];
        v25 = (int *)((char *)v18 + v17);
        v26 = v10 + 1;
        if (v10 + 1 == v19)
          v10 = 0;
        else
          ++v10;
        if (v26 == v19)
          v18 = (int *)((char *)v25 + HIDWORD(v17) - (v26 * v17));
        else
          v18 = v25;
        v4 = v20;
      }
      while (v14 != v15);
    }
  }
  return 1;
}

uint64_t cva::experimental::convertGray8uToBGRA8u(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  cva::experimental::convertGray8uToRGBA8u(a1, a2, a3);
  return 1;
}

uint64_t cva::experimental::convertGray8uToARGB8u(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unint64_t v11;
  uint64_t v12;
  int *v13;
  BOOL v14;
  int v15;
  int *v16;
  int v17;
  int v18;

  v3 = a1[3];
  if (v3)
  {
    v4 = a1[1];
    v5 = a1[2];
    v6 = (HIDWORD(v5) * HIDWORD(v4));
    if ((_DWORD)v6)
    {
      v7 = 0;
      v8 = 0;
      v9 = (unsigned __int8 *)(v3 + *a1);
      v10 = &v9[v6];
      v11 = *(_QWORD *)(a2 + 16);
      v12 = *(_QWORD *)(a2 + 24);
      v13 = (int *)(v12 + *(_QWORD *)a2);
      v14 = v12 == 0;
      v15 = *(_DWORD *)(a2 + 8);
      if (v14)
        v16 = 0;
      else
        v16 = v13;
      do
      {
        *v16 = (16843008 * *v9) | a3;
        v9 += v5;
        v17 = v8 + 1;
        if (v8 + 1 == (_DWORD)v4)
          v8 = 0;
        else
          ++v8;
        if (v17 == (_DWORD)v4)
          v9 = &v9[HIDWORD(v5) - (v17 * v5)];
        v16 = (int *)((char *)v16 + v11);
        v18 = v7 + 1;
        if (v7 + 1 == v15)
          v7 = 0;
        else
          ++v7;
        if (v18 == v15)
          v16 = (int *)((char *)v16 + HIDWORD(v11) - (v18 * v11));
      }
      while (v9 != v10);
    }
  }
  return 1;
}

uint64_t cva::experimental::convertGray8uToRGBA8u(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unint64_t v11;
  uint64_t v12;
  int *v13;
  BOOL v14;
  int v15;
  int *v16;
  int v17;
  int v18;

  v3 = a1[3];
  if (v3)
  {
    v4 = a1[1];
    v5 = a1[2];
    v6 = (HIDWORD(v5) * HIDWORD(v4));
    if ((_DWORD)v6)
    {
      v7 = 0;
      v8 = 0;
      v9 = (unsigned __int8 *)(v3 + *a1);
      v10 = &v9[v6];
      v11 = *(_QWORD *)(a2 + 16);
      v12 = *(_QWORD *)(a2 + 24);
      v13 = (int *)(v12 + *(_QWORD *)a2);
      v14 = v12 == 0;
      v15 = *(_DWORD *)(a2 + 8);
      if (v14)
        v16 = 0;
      else
        v16 = v13;
      do
      {
        *v16 = (a3 << 24) | (*v9 << 16) | (*v9 << 8) | *v9;
        v9 += v5;
        v17 = v8 + 1;
        if (v8 + 1 == (_DWORD)v4)
          v8 = 0;
        else
          ++v8;
        if (v17 == (_DWORD)v4)
          v9 = &v9[HIDWORD(v5) - (v17 * v5)];
        v16 = (int *)((char *)v16 + v11);
        v18 = v7 + 1;
        if (v7 + 1 == v15)
          v7 = 0;
        else
          ++v7;
        if (v18 == v15)
          v16 = (int *)((char *)v16 + HIDWORD(v11) - (v18 * v11));
      }
      while (v9 != v10);
    }
  }
  return 1;
}

uint64_t cva::experimental::convertGray8uToBGRA8u(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unint64_t v11;
  uint64_t v12;
  int *v13;
  BOOL v14;
  int v15;
  int *v16;
  int v17;
  int v18;

  v3 = a1[3];
  if (v3)
  {
    v4 = a1[1];
    v5 = a1[2];
    v6 = (HIDWORD(v5) * HIDWORD(v4));
    if ((_DWORD)v6)
    {
      v7 = 0;
      v8 = 0;
      v9 = (unsigned __int8 *)(v3 + *a1);
      v10 = &v9[v6];
      v11 = *(_QWORD *)(a2 + 16);
      v12 = *(_QWORD *)(a2 + 24);
      v13 = (int *)(v12 + *(_QWORD *)a2);
      v14 = v12 == 0;
      v15 = *(_DWORD *)(a2 + 8);
      if (v14)
        v16 = 0;
      else
        v16 = v13;
      do
      {
        *v16 = (a3 << 24) | (*v9 << 16) | (*v9 << 8) | *v9;
        v9 += v5;
        v17 = v8 + 1;
        if (v8 + 1 == (_DWORD)v4)
          v8 = 0;
        else
          ++v8;
        if (v17 == (_DWORD)v4)
          v9 = &v9[HIDWORD(v5) - (v17 * v5)];
        v16 = (int *)((char *)v16 + v11);
        v18 = v7 + 1;
        if (v7 + 1 == v15)
          v7 = 0;
        else
          ++v7;
        if (v18 == v15)
          v16 = (int *)((char *)v16 + HIDWORD(v11) - (v18 * v11));
      }
      while (v9 != v10);
    }
  }
  return 1;
}

BOOL cva::experimental::convertARGB8uToGray8u(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int8x16_t v4;
  uint64_t v5;
  int16_t matrix[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  src.data = *(void **)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  v4.i64[0] = v3;
  v4.i64[1] = HIDWORD(v3);
  *(int8x16_t *)&src.height = vextq_s8(v4, v4, 8uLL);
  src.rowBytes = *(unsigned int *)(a1 + 20);
  dest.data = *(void **)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 8);
  v4.i64[0] = v5;
  v4.i64[1] = HIDWORD(v5);
  *(int8x16_t *)&dest.height = vextq_s8(v4, v4, 8uLL);
  dest.rowBytes = *(unsigned int *)(a2 + 20);
  *(_QWORD *)matrix = *a3;
  return vImageMatrixMultiply_ARGB8888ToPlanar8(&src, &dest, matrix, 256, 0, 0, 0) == 0;
}

BOOL cva::experimental::convertRGBA8uToGray8u(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int8x16_t v4;
  uint64_t v5;
  int16_t matrix[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  src.data = *(void **)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  v4.i64[0] = v3;
  v4.i64[1] = HIDWORD(v3);
  *(int8x16_t *)&src.height = vextq_s8(v4, v4, 8uLL);
  src.rowBytes = *(unsigned int *)(a1 + 20);
  dest.data = *(void **)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 8);
  v4.i64[0] = v5;
  v4.i64[1] = HIDWORD(v5);
  *(int8x16_t *)&dest.height = vextq_s8(v4, v4, 8uLL);
  dest.rowBytes = *(unsigned int *)(a2 + 20);
  *(_QWORD *)matrix = *a3;
  return vImageMatrixMultiply_ARGB8888ToPlanar8(&src, &dest, matrix, 256, 0, 0, 0) == 0;
}

BOOL cva::experimental::convertBGRA8uToGray8u(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int8x16_t v4;
  uint64_t v5;
  int16_t matrix[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  src.data = *(void **)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  v4.i64[0] = v3;
  v4.i64[1] = HIDWORD(v3);
  *(int8x16_t *)&src.height = vextq_s8(v4, v4, 8uLL);
  src.rowBytes = *(unsigned int *)(a1 + 20);
  dest.data = *(void **)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 8);
  v4.i64[0] = v5;
  v4.i64[1] = HIDWORD(v5);
  *(int8x16_t *)&dest.height = vextq_s8(v4, v4, 8uLL);
  dest.rowBytes = *(unsigned int *)(a2 + 20);
  *(_QWORD *)matrix = *a3;
  return vImageMatrixMultiply_ARGB8888ToPlanar8(&src, &dest, matrix, 256, 0, 0, 0) == 0;
}

BOOL cva::experimental::overwriteChannels_ARGB8u(uint64_t a1, uint64_t a2, uint64_t a3, uint8_t a4)
{
  uint64_t v4;
  int8x16_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  vImage_Buffer v10;
  vImage_Buffer origSrc;
  vImage_Buffer newSrc;

  newSrc.data = *(void **)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 8);
  v5.i64[0] = v4;
  v5.i64[1] = HIDWORD(v4);
  *(int8x16_t *)&newSrc.height = vextq_s8(v5, v5, 8uLL);
  newSrc.rowBytes = *(unsigned int *)(a1 + 20);
  v6 = *(void **)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 8);
  v5.i64[0] = v7;
  v5.i64[1] = HIDWORD(v7);
  *(int8x16_t *)&origSrc.height = vextq_s8(v5, v5, 8uLL);
  origSrc.rowBytes = *(unsigned int *)(a2 + 20);
  v10.data = *(void **)(a3 + 24);
  v8 = *(_QWORD *)(a3 + 8);
  v5.i64[0] = v8;
  v5.i64[1] = HIDWORD(v8);
  *(int8x16_t *)&v10.height = vextq_s8(v5, v5, 8uLL);
  v10.rowBytes = *(unsigned int *)(a3 + 20);
  origSrc.data = v6;
  return vImageOverwriteChannels_ARGB8888(&newSrc, &origSrc, &v10, a4, 0) == 0;
}

BOOL cva::experimental::overwriteChannelsWithScalar_ARGB8u(Pixel_8 a1, uint64_t a2, uint64_t a3, uint8_t a4)
{
  void *v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  vImage_Buffer v9;
  vImage_Buffer src;

  v4 = *(void **)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 8);
  v6.i64[0] = v5;
  v6.i64[1] = HIDWORD(v5);
  *(int8x16_t *)&src.height = vextq_s8(v6, v6, 8uLL);
  src.rowBytes = *(unsigned int *)(a2 + 20);
  v9.data = *(void **)(a3 + 24);
  v7 = *(_QWORD *)(a3 + 8);
  v6.i64[0] = v7;
  v6.i64[1] = HIDWORD(v7);
  *(int8x16_t *)&v9.height = vextq_s8(v6, v6, 8uLL);
  v9.rowBytes = *(unsigned int *)(a3 + 20);
  src.data = v4;
  return vImageOverwriteChannelsWithScalar_ARGB8888(a1, &src, &v9, a4, 0) == 0;
}

uint64_t cva::experimental::createImageWithCVPixelBuffer(CVPixelBufferRef *a1, uint64_t a2)
{
  uint64_t v4;
  signed int PixelFormatType;
  unsigned int Width;
  unsigned int Height;
  unsigned int v8;
  void *v10;
  void *v11;
  int v12;
  int8x16_t v13;
  uint64_t v14;
  int8x16_t v15;
  uint64_t v16;
  size_t v17;
  unint64_t v18;
  void *v19;
  int8x16_t v20;
  uint64_t v21;
  int8x16_t v22;
  uint64_t v23;
  int v24;
  vImagePixelCount width_high;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  int v32;
  char *v33;
  char *v34;
  char *v35;
  int v36;
  int v37;
  char *v38;
  __int16 v39;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  void *v44;
  vImage_Buffer v45;
  vImage_Buffer size;

  if (!CVPixelBufferLockBaseAddress(*a1, 1uLL))
  {
    PixelFormatType = CVPixelBufferGetPixelFormatType(*a1);
    Width = CVPixelBufferGetWidth(*a1);
    Height = CVPixelBufferGetHeight(*a1);
    v8 = Height;
    if (*(_DWORD *)(a2 + 8) >= Width && *(_DWORD *)(a2 + 12) >= Height)
    {
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = Width | ((unint64_t)Height << 32);
    }
    else
    {
      v10 = *(void **)(a2 + 24);
      if (v10)
      {
        free(v10);
        *(_QWORD *)(a2 + 24) = 0;
      }
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = Width | ((unint64_t)v8 << 32);
      *(_QWORD *)(a2 + 16) = ((unint64_t)(((3 * Width + 15) & 0xFFFFFFF0) >> 4) << 36) | 3;
      size.data = (void *)(((3 * Width + 15) & 0xFFFFFFF0) * (unint64_t)v8);
      if (size.data)
        v11 = malloc_type_malloc((size_t)size.data, 0xA153FF5uLL);
      else
        v11 = 0;
      *(_QWORD *)(a2 + 24) = v11;
    }
    v4 = 0;
    if (PixelFormatType <= 875704437)
    {
      if (PixelFormatType > 846624120)
      {
        if (PixelFormatType != 846624121)
        {
          v12 = 875704422;
LABEL_28:
          if (PixelFormatType == v12)
            goto LABEL_29;
LABEL_58:
          CVPixelBufferUnlockBaseAddress(*a1, 1uLL);
          return v4;
        }
LABEL_29:
        v42 = 0;
        v43 = 0;
        v44 = 0;
        if (v8 | Width)
        {
          v17 = (4 * Width + 15) & 0xFFFFFFF0;
          v18 = Width | ((unint64_t)v8 << 32);
          v41 = 0;
          v42 = v18;
          v43 = ((unint64_t)(v17 >> 4) << 36) | 4;
          size.data = (void *)(v17 * (unint64_t)v8);
          if (size.data)
            v19 = malloc_type_malloc((size_t)size.data, 0xA153FF5uLL);
          else
            v19 = 0;
          v44 = v19;
        }
        else
        {
          v17 = 0;
          v19 = 0;
          v18 = Width | ((unint64_t)v8 << 32);
          v41 = 0;
          v42 = v18;
        }
        cva::pixelBufferConvertYCbCrToARGB(*a1, (uint64_t)&v41, 1);
        v20.i64[0] = v18;
        v20.i64[1] = HIDWORD(v18);
        *(int8x16_t *)&size.height = vextq_s8(v20, v20, 8uLL);
        size.rowBytes = v17;
        v45.data = *(void **)(a2 + 24);
        v21 = *(_QWORD *)(a2 + 8);
        v20.i64[0] = v21;
        v20.i64[1] = HIDWORD(v21);
        *(int8x16_t *)&v45.height = vextq_s8(v20, v20, 8uLL);
        v45.rowBytes = *(unsigned int *)(a2 + 20);
        size.data = v19;
        vImageConvert_ARGB8888toRGB888(&size, &v45, 0);
        if (v19)
          free(v19);
        goto LABEL_57;
      }
      if (PixelFormatType == 24)
      {
        cva::imageViewFromPixelBuffer<cva::Matrix<unsigned char,3u,1u,false>>(*a1, &size);
        if (size.rowBytes)
        {
          v24 = size.width;
          width_high = HIDWORD(size.width);
          v26 = (HIDWORD(size.height) * HIDWORD(size.width));
          if ((_DWORD)v26)
          {
            v27 = 0;
            v28 = 0;
            v30 = *(_QWORD *)(a2 + 16);
            v29 = *(_QWORD *)(a2 + 24);
            v31 = *(_DWORD *)(a2 + 8);
            v32 = size.height;
            v33 = (char *)size.data + size.rowBytes;
            v34 = (char *)size.data + size.rowBytes + v26;
            if (v29)
              v35 = (char *)(v29 + *(_QWORD *)a2);
            else
              v35 = 0;
            do
            {
              v38 = v35;
              if (v35 != v33)
              {
                v39 = *(_WORD *)v33;
                v35[2] = v33[2];
                *(_WORD *)v35 = v39;
                v38 = v33;
              }
              v33 = &v38[v24];
              v36 = v28 + 1;
              if (v28 + 1 == v32)
                v28 = 0;
              else
                ++v28;
              if (v36 == v32)
                v33 = &v33[width_high - (v36 * v24)];
              v35 += v30;
              v37 = v27 + 1;
              if (v27 + 1 == v31)
                v27 = 0;
              else
                ++v27;
              if (v37 == v31)
                v35 = &v35[HIDWORD(v30) - (v37 * v30)];
            }
            while (v33 != v34);
          }
        }
        goto LABEL_57;
      }
      if (PixelFormatType != 32)
        goto LABEL_58;
      cva::imageViewFromPixelBuffer<cva::Matrix<unsigned char,4u,1u,false>>(*a1, &v41);
      v13.i64[0] = v42;
      v13.i64[1] = HIDWORD(v42);
      *(int8x16_t *)&size.height = vextq_s8(v13, v13, 8uLL);
      size.rowBytes = HIDWORD(v43);
      v45.data = *(void **)(a2 + 24);
      v14 = *(_QWORD *)(a2 + 8);
      v13.i64[0] = v14;
      v13.i64[1] = HIDWORD(v14);
      *(int8x16_t *)&v45.height = vextq_s8(v13, v13, 8uLL);
      v45.rowBytes = *(unsigned int *)(a2 + 20);
      size.data = v44;
      vImageConvert_ARGB8888toRGB888(&size, &v45, 0);
    }
    else if (PixelFormatType <= 1380401728)
    {
      if (PixelFormatType == 875704438)
        goto LABEL_29;
      if (PixelFormatType != 1111970369)
        goto LABEL_58;
      cva::imageViewFromPixelBuffer<cva::Matrix<unsigned char,4u,1u,false>>(*a1, &v41);
      v15.i64[0] = v42;
      v15.i64[1] = HIDWORD(v42);
      *(int8x16_t *)&size.height = vextq_s8(v15, v15, 8uLL);
      size.rowBytes = HIDWORD(v43);
      v45.data = *(void **)(a2 + 24);
      v16 = *(_QWORD *)(a2 + 8);
      v15.i64[0] = v16;
      v15.i64[1] = HIDWORD(v16);
      *(int8x16_t *)&v45.height = vextq_s8(v15, v15, 8uLL);
      v45.rowBytes = *(unsigned int *)(a2 + 20);
      size.data = v44;
      vImageConvert_BGRA8888toRGB888(&size, &v45, 0);
    }
    else
    {
      if (PixelFormatType != 1380401729)
      {
        if (PixelFormatType != 2037741158)
        {
          v12 = 2037741171;
          goto LABEL_28;
        }
        goto LABEL_29;
      }
      cva::imageViewFromPixelBuffer<cva::Matrix<unsigned char,4u,1u,false>>(*a1, &v41);
      v22.i64[0] = v42;
      v22.i64[1] = HIDWORD(v42);
      *(int8x16_t *)&size.height = vextq_s8(v22, v22, 8uLL);
      size.rowBytes = HIDWORD(v43);
      v45.data = *(void **)(a2 + 24);
      v23 = *(_QWORD *)(a2 + 8);
      v22.i64[0] = v23;
      v22.i64[1] = HIDWORD(v23);
      *(int8x16_t *)&v45.height = vextq_s8(v22, v22, 8uLL);
      v45.rowBytes = *(unsigned int *)(a2 + 20);
      size.data = v44;
      vImageConvert_RGBA8888toRGB888(&size, &v45, 0);
    }
LABEL_57:
    v4 = 1;
    goto LABEL_58;
  }
  return 0;
}

{
  uint64_t v4;
  signed int PixelFormatType;
  unsigned int Width;
  unsigned int Height;
  unsigned int v8;
  void *v10;
  void *v11;
  int8x16_t v12;
  uint64_t v13;
  unsigned int v14;
  vImagePixelCount width_high;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  int v22;
  char *v23;
  char *v24;
  _DWORD *v25;
  int v26;
  int v27;
  _DWORD *v28;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  void *v34;
  vImage_Buffer v35;
  vImage_Buffer size;

  if (!CVPixelBufferLockBaseAddress(*a1, 1uLL))
  {
    PixelFormatType = CVPixelBufferGetPixelFormatType(*a1);
    Width = CVPixelBufferGetWidth(*a1);
    Height = CVPixelBufferGetHeight(*a1);
    v8 = Height;
    if (*(_DWORD *)(a2 + 8) >= Width && *(_DWORD *)(a2 + 12) >= Height)
    {
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = Width | ((unint64_t)Height << 32);
    }
    else
    {
      v10 = *(void **)(a2 + 24);
      if (v10)
      {
        free(v10);
        *(_QWORD *)(a2 + 24) = 0;
      }
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = Width | ((unint64_t)v8 << 32);
      *(_QWORD *)(a2 + 16) = ((unint64_t)(((4 * Width + 15) & 0xFFFFFFF0) >> 4) << 36) | 4;
      size.data = (void *)(((4 * Width + 15) & 0xFFFFFFF0) * (unint64_t)v8);
      if (size.data)
        v11 = malloc_type_malloc((size_t)size.data, 0xA153FF5uLL);
      else
        v11 = 0;
      *(_QWORD *)(a2 + 24) = v11;
    }
    v4 = 0;
    if (PixelFormatType > 875704421)
    {
      if (PixelFormatType > 2037741157)
      {
        if (PixelFormatType != 2037741158 && PixelFormatType != 2037741171)
          goto LABEL_46;
      }
      else if (PixelFormatType != 875704422 && PixelFormatType != 875704438)
      {
        goto LABEL_46;
      }
LABEL_25:
      v4 = 1;
      cva::pixelBufferConvertYCbCrToARGB(*a1, a2, 1);
LABEL_46:
      CVPixelBufferUnlockBaseAddress(*a1, 1uLL);
      return v4;
    }
    switch(PixelFormatType)
    {
      case 24:
        cva::imageViewFromPixelBuffer<cva::Matrix<unsigned char,3u,1u,false>>(*a1, &v30);
        v12.i64[0] = v31;
        v12.i64[1] = v32;
        *(int8x16_t *)&size.height = vextq_s8(v12, v12, 8uLL);
        size.rowBytes = v33;
        v35.data = *(void **)(a2 + 24);
        v13 = *(_QWORD *)(a2 + 8);
        v12.i64[0] = v13;
        v12.i64[1] = HIDWORD(v13);
        *(int8x16_t *)&v35.height = vextq_s8(v12, v12, 8uLL);
        v35.rowBytes = *(unsigned int *)(a2 + 20);
        size.data = v34;
        vImageConvert_RGB888toARGB8888(&size, 0, 0xFFu, &v35, 0, 0);
        break;
      case 32:
        cva::imageViewFromPixelBuffer<cva::Matrix<unsigned char,4u,1u,false>>(*a1, &size);
        if (size.rowBytes)
        {
          v14 = size.width;
          width_high = HIDWORD(size.width);
          v16 = (HIDWORD(size.height) * HIDWORD(size.width));
          if ((_DWORD)v16)
          {
            v17 = 0;
            v18 = 0;
            v20 = *(_QWORD *)(a2 + 16);
            v19 = *(_QWORD *)(a2 + 24);
            v21 = *(_DWORD *)(a2 + 8);
            v22 = size.height;
            v23 = (char *)size.data + size.rowBytes;
            v24 = (char *)size.data + size.rowBytes + v16;
            if (v19)
              v25 = (_DWORD *)(v19 + *(_QWORD *)a2);
            else
              v25 = 0;
            do
            {
              v28 = v25;
              if (v25 != (_DWORD *)v23)
              {
                *v25 = *(_DWORD *)v23;
                v28 = v23;
              }
              v23 = (char *)v28 + v14;
              v26 = v18 + 1;
              if (v18 + 1 == v22)
                v18 = 0;
              else
                ++v18;
              if (v26 == v22)
                v23 = &v23[width_high - v26 * v14];
              v25 = (_DWORD *)((char *)v25 + v20);
              v27 = v17 + 1;
              if (v17 + 1 == v21)
                v17 = 0;
              else
                ++v17;
              if (v27 == v21)
                v25 = (_DWORD *)((char *)v25 + HIDWORD(v20) - (v27 * v20));
            }
            while (v23 != v24);
          }
        }
        break;
      case 846624121:
        goto LABEL_25;
      default:
        goto LABEL_46;
    }
    v4 = 1;
    goto LABEL_46;
  }
  return 0;
}

{
  uint64_t v4;
  unsigned int Width;
  unsigned int Height;
  signed int PixelFormatType;
  unsigned int BytesPerRow;
  char *BaseAddress;
  void *v11;
  void *v12;
  unsigned __int32 v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  __int32 v21;
  _BYTE *v22;
  _BYTE *v23;
  _BYTE *v24;
  int v25;
  int v26;
  uint64_t v27;
  int8x16_t v28;
  void *v29;
  uint64_t v30;
  int8x16_t v31;
  vImagePixelCount v32;
  vImagePixelCount v33;
  size_t v34;
  size_t v35;
  unsigned int BytesPerRowOfPlane;
  char *BaseAddressOfPlane;
  uint64_t v38;
  int v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  char *v44;
  _BYTE *v45;
  char v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int8x16_t v50;
  uint64_t v51;
  int8x16_t v52;
  uint64_t v53;
  int8x16_t v54;
  size_t size;
  int8x16_t v57;
  uint64_t v58;
  vImage_Buffer *destPlanarBuffers;
  void *srcChannels[2];

  srcChannels[1] = *(void **)MEMORY[0x24BDAC8D0];
  if (!CVPixelBufferLockBaseAddress(*a1, 1uLL))
  {
    Width = CVPixelBufferGetWidth(*a1);
    Height = CVPixelBufferGetHeight(*a1);
    PixelFormatType = CVPixelBufferGetPixelFormatType(*a1);
    BytesPerRow = CVPixelBufferGetBytesPerRow(*a1);
    BaseAddress = (char *)CVPixelBufferGetBaseAddress(*a1);
    if (*(_DWORD *)(a2 + 8) >= Width && *(_DWORD *)(a2 + 12) >= Height)
    {
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = Width | ((unint64_t)Height << 32);
    }
    else
    {
      v11 = *(void **)(a2 + 24);
      if (v11)
      {
        free(v11);
        *(_QWORD *)(a2 + 24) = 0;
      }
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = Width | ((unint64_t)Height << 32);
      *(_QWORD *)(a2 + 16) = ((unint64_t)(((Width + 15) & 0xFFFFFFF0) >> 4) << 36) | 1;
      size = Height * (unint64_t)((Width + 15) & 0xFFFFFFF0);
      if (size)
        v12 = malloc_type_malloc(size, 0xA153FF5uLL);
      else
        v12 = 0;
      *(_QWORD *)(a2 + 24) = v12;
    }
    v4 = 0;
    if (PixelFormatType <= 875704437)
    {
      if (PixelFormatType <= 846624120)
      {
        if (PixelFormatType == 24)
        {
          size = *(_QWORD *)(a2 + 24);
          v51 = *(_QWORD *)(a2 + 8);
          v52.i64[0] = v51;
          v52.i64[1] = HIDWORD(v51);
          v57 = vextq_s8(v52, v52, 8uLL);
          v58 = *(unsigned int *)(a2 + 20);
          destPlanarBuffers = (vImage_Buffer *)&size;
          srcChannels[0] = BaseAddress + 1;
          v32 = Width;
          v33 = Height;
          v34 = BytesPerRow;
          v4 = 1;
          v35 = 3;
          goto LABEL_67;
        }
        if (PixelFormatType != 32)
          goto LABEL_68;
        size = *(_QWORD *)(a2 + 24);
        v27 = *(_QWORD *)(a2 + 8);
        v28.i64[0] = v27;
        v28.i64[1] = HIDWORD(v27);
        v57 = vextq_s8(v28, v28, 8uLL);
        v58 = *(unsigned int *)(a2 + 20);
        v29 = BaseAddress + 2;
LABEL_43:
        srcChannels[0] = v29;
        destPlanarBuffers = (vImage_Buffer *)&size;
        v32 = Width;
        v33 = Height;
        v34 = BytesPerRow;
        v4 = 1;
        v35 = 4;
LABEL_67:
        vImageConvert_ChunkyToPlanar8((const void **)srcChannels, (const vImage_Buffer **)&destPlanarBuffers, 1u, v35, v32, v33, v34, 0);
        goto LABEL_68;
      }
      if (PixelFormatType == 846624121)
      {
        size = *(_QWORD *)(a2 + 24);
        v53 = *(_QWORD *)(a2 + 8);
        v54.i64[0] = v53;
        v54.i64[1] = HIDWORD(v53);
        v57 = vextq_s8(v54, v54, 8uLL);
        v58 = *(unsigned int *)(a2 + 20);
        srcChannels[0] = BaseAddress + 1;
LABEL_66:
        destPlanarBuffers = (vImage_Buffer *)&size;
        v32 = Width;
        v33 = Height;
        v34 = BytesPerRow;
        v4 = 1;
        v35 = 2;
        goto LABEL_67;
      }
      if (PixelFormatType != 875704422)
        goto LABEL_68;
    }
    else
    {
      if (PixelFormatType > 1278226487)
      {
        if (PixelFormatType != 2037741171 && PixelFormatType != 2037741158)
        {
          if (PixelFormatType == 1278226488)
          {
            cva::imageViewFromPixelBuffer<unsigned char>(*a1, &size);
            if (v58)
            {
              v13 = v57.u32[2];
              v14 = HIDWORD(v57.i64[1]);
              v15 = (v57.i32[1] * v57.i32[3]);
              if ((_DWORD)v15)
              {
                v16 = 0;
                v17 = 0;
                v19 = *(_QWORD *)(a2 + 16);
                v18 = *(_QWORD *)(a2 + 24);
                v20 = *(_DWORD *)(a2 + 8);
                v21 = v57.i32[0];
                v22 = (_BYTE *)(v58 + size);
                v23 = (_BYTE *)(v58 + size + v15);
                if (v18)
                  v24 = (_BYTE *)(v18 + *(_QWORD *)a2);
                else
                  v24 = 0;
                do
                {
                  *v24 = *v22;
                  v22 += v13;
                  v25 = v17 + 1;
                  if (v17 + 1 == v21)
                    v17 = 0;
                  else
                    ++v17;
                  if (v25 == v21)
                    v22 = &v22[v14 - v25 * v13];
                  v24 += v19;
                  v26 = v16 + 1;
                  if (v16 + 1 == v20)
                    v16 = 0;
                  else
                    ++v16;
                  if (v26 == v20)
                    v24 = &v24[HIDWORD(v19) - (v26 * v19)];
                }
                while (v22 != v23);
              }
            }
LABEL_62:
            v4 = 1;
          }
LABEL_68:
          CVPixelBufferUnlockBaseAddress(*a1, 1uLL);
          return v4;
        }
        size = *(_QWORD *)(a2 + 24);
        v49 = *(_QWORD *)(a2 + 8);
        v50.i64[0] = v49;
        v50.i64[1] = HIDWORD(v49);
        v57 = vextq_s8(v50, v50, 8uLL);
        v58 = *(unsigned int *)(a2 + 20);
        srcChannels[0] = BaseAddress;
        goto LABEL_66;
      }
      if (PixelFormatType != 875704438)
      {
        if (PixelFormatType != 1111970369)
          goto LABEL_68;
        size = *(_QWORD *)(a2 + 24);
        v30 = *(_QWORD *)(a2 + 8);
        v31.i64[0] = v30;
        v31.i64[1] = HIDWORD(v30);
        v57 = vextq_s8(v31, v31, 8uLL);
        v58 = *(unsigned int *)(a2 + 20);
        v29 = BaseAddress + 1;
        goto LABEL_43;
      }
    }
    BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(*a1, 0);
    BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(*a1, 0);
    if (BaseAddressOfPlane)
    {
      v38 = BytesPerRowOfPlane * Height;
      if ((_DWORD)v38)
      {
        v39 = 0;
        v40 = 0;
        v41 = *(_QWORD *)(a2 + 16);
        v42 = *(_QWORD *)(a2 + 24);
        v43 = *(_DWORD *)(a2 + 8);
        v44 = &BaseAddressOfPlane[v38];
        if (v42)
          v45 = (_BYTE *)(v42 + *(_QWORD *)a2);
        else
          v45 = 0;
        do
        {
          v46 = *BaseAddressOfPlane++;
          *v45 = v46;
          v47 = (v40 + 1);
          if ((_DWORD)v47 == Width)
            v40 = 0;
          else
            ++v40;
          if ((_DWORD)v47 == Width)
            BaseAddressOfPlane = &BaseAddressOfPlane[BytesPerRowOfPlane - v47];
          v45 += v41;
          v48 = v39 + 1;
          if (v39 + 1 == v43)
            v39 = 0;
          else
            ++v39;
          if (v48 == v43)
            v45 = &v45[HIDWORD(v41) - (v48 * v41)];
        }
        while (BaseAddressOfPlane != v44);
      }
    }
    goto LABEL_62;
  }
  return 0;
}

void cva::utils::string::increase_text_identifier(__int128 *a1)
{
  const std::locale::facet *v2;
  const char *v3;
  size_t v4;
  uint64_t v5;
  _QWORD *v6;
  size_t v7;
  uint64_t v8;
  const char **v9;
  char *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  _OWORD *v19;
  __int128 *v20;
  unint64_t v21;
  __int128 v22;
  char v23;
  unint64_t v24;
  BOOL *v25;
  BOOL v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  _OWORD *v37;
  __int128 *v38;
  unint64_t v39;
  __int128 v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  std::ios_base *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  std::ios_base *v56;
  uint64_t v57;
  uint64_t v58;
  __int128 *p_p;
  uint64_t v60;
  _QWORD *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  void *v66;
  unint64_t v67;
  unint64_t v68;
  void *v69[2];
  _BYTE v70[24];
  BOOL v71;
  const char *v72;
  const char *v73;
  BOOL v74;
  __int128 v75;
  BOOL v76;
  char v77;
  const char *v78;
  std::locale v79;
  const std::locale::facet *v80;
  const std::locale::facet *v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  __int128 __p;
  int64_t v86;
  __int128 v87;
  unint64_t v88;
  _QWORD v89[8];
  __int128 v90;
  __int128 v91;
  int v92;
  _QWORD v93[19];
  int v94[5];

  if (*((char *)a1 + 23) < 0)
  {
    sub_20AB88C14(&__p, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __p = *a1;
    v86 = *((_QWORD *)a1 + 2);
  }
  MEMORY[0x20BD2CFC0](&v79);
  v80 = std::locale::use_facet(&v79, MEMORY[0x24BEDB350]);
  v2 = std::locale::use_facet(&v79, MEMORY[0x24BEDB4B0]);
  v82 = 0u;
  v83 = 0u;
  v81 = v2;
  v84 = 0;
  if (sub_20ABD425C((uint64_t)&v79, "^(.+) \\(([0-9]+)\\)$", "") != "")
  {
    sub_20ABD494C();
    goto LABEL_111;
  }
  v72 = 0;
  v73 = 0;
  v74 = 0;
  v75 = 0uLL;
  v76 = 0;
  v77 = 0;
  v78 = 0;
  *(_OWORD *)v69 = 0u;
  *(_OWORD *)v70 = 0u;
  if (*((char *)a1 + 23) >= 0)
    v3 = (const char *)a1;
  else
    v3 = *(const char **)a1;
  v4 = strlen(v3);
  v5 = (uint64_t)&v3[v4];
  *(_QWORD *)&v70[8] = &v3[v4];
  *(_QWORD *)&v70[16] = &v3[v4];
  v71 = 0;
  sub_20ABD4960((uint64_t)v69, (DWORD1(v82) + 1), (__int128 *)&v70[8]);
  v72 = v3;
  v73 = v3;
  v74 = 0;
  v75 = *(_OWORD *)&v70[8];
  v76 = v71;
  v78 = v3;
  v77 = 1;
  v6 = (_QWORD *)MEMORY[0x24BEDB7F0];
  if ((v82 & 0x1F0) != 0)
  {
    if (DWORD1(v82))
    {
      if (sub_20ABD5CCC((uint64_t)&v79, (uint64_t)v3, v5, (uint64_t *)v69, 0, 1))
        goto LABEL_31;
    }
    else if ((sub_20ABD4FB4((uint64_t)&v79, (uint64_t)v3, v5, (uint64_t *)v69, 0, 1) & 1) != 0)
    {
      goto LABEL_31;
    }
LABEL_15:
    if (v4)
    {
      v7 = v4 - 1;
      if (v7)
      {
        v8 = (uint64_t)(v3 + 1);
        do
        {
          sub_20ABD4960((uint64_t)v69, 0xAAAAAAAAAAAAAAABLL * (((char *)v69[1] - (char *)v69[0]) >> 3), (__int128 *)&v70[8]);
          if ((v82 & 0x1F0) != 0)
          {
            if (DWORD1(v82))
            {
              if (sub_20ABD5CCC((uint64_t)&v79, v8, v5, (uint64_t *)v69, 128, 0))
                goto LABEL_31;
            }
            else if ((sub_20ABD4FB4((uint64_t)&v79, v8, v5, (uint64_t *)v69, 128, 0) & 1) != 0)
            {
              goto LABEL_31;
            }
          }
          else if ((sub_20ABD4AE8((uint64_t)&v79, v8, v5, (uint64_t *)v69, 128, 0) & 1) != 0)
          {
            goto LABEL_31;
          }
          sub_20ABD4960((uint64_t)v69, 0xAAAAAAAAAAAAAAABLL * (((char *)v69[1] - (char *)v69[0]) >> 3), (__int128 *)&v70[8]);
          ++v8;
          --v7;
        }
        while (v7);
      }
      sub_20ABD4960((uint64_t)v69, 0xAAAAAAAAAAAAAAABLL * (((char *)v69[1] - (char *)v69[0]) >> 3), (__int128 *)&v70[8]);
      if ((v82 & 0x1F0) != 0)
      {
        if (DWORD1(v82))
        {
          if (sub_20ABD5CCC((uint64_t)&v79, v5, v5, (uint64_t *)v69, 128, 0))
            goto LABEL_31;
        }
        else if ((sub_20ABD4FB4((uint64_t)&v79, v5, v5, (uint64_t *)v69, 128, 0) & 1) != 0)
        {
          goto LABEL_31;
        }
      }
      else if ((sub_20ABD4AE8((uint64_t)&v79, v5, v5, (uint64_t *)v69, 128, 0) & 1) != 0)
      {
        goto LABEL_31;
      }
    }
    v69[1] = v69[0];
    goto LABEL_92;
  }
  if ((sub_20ABD4AE8((uint64_t)&v79, (uint64_t)v3, v5, (uint64_t *)v69, 0, 1) & 1) == 0)
    goto LABEL_15;
LABEL_31:
  if (v69[1] == v69[0])
    v9 = (const char **)&v70[8];
  else
    v9 = (const char **)v69[0];
  v73 = *v9;
  v74 = v72 != v73;
  if (v69[1] == v69[0])
    v10 = &v70[16];
  else
    v10 = (char *)v69[0] + 8;
  *(_QWORD *)&v75 = *(_QWORD *)v10;
  v76 = (_QWORD)v75 != *((_QWORD *)&v75 + 1);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v69[1] - (char *)v69[0]) >> 3) < 3)
    goto LABEL_92;
  if (!*((_BYTE *)v69[0] + 40))
  {
    v87 = 0uLL;
    v88 = 0;
    goto LABEL_60;
  }
  v11 = *((_QWORD *)v69[0] + 3);
  v12 = (char *)*((_QWORD *)v69[0] + 4);
  v13 = (unint64_t)&v12[-v11];
  if ((unint64_t)&v12[-v11] > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_111;
  if (v13 > 0x16)
  {
    v15 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v15 = v13 | 7;
    v16 = v15 + 1;
    v14 = (__int128 *)operator new(v15 + 1);
    *((_QWORD *)&v87 + 1) = &v12[-v11];
    v88 = v16 | 0x8000000000000000;
    *(_QWORD *)&v87 = v14;
    if ((char *)v11 == v12)
      goto LABEL_59;
  }
  else
  {
    HIBYTE(v88) = (_BYTE)v12 - v11;
    v14 = &v87;
    if ((char *)v11 == v12)
      goto LABEL_59;
  }
  if (v13 < 0x20)
  {
    v18 = (char *)v11;
  }
  else if ((unint64_t)v14 - v11 < 0x20)
  {
    v18 = (char *)v11;
  }
  else
  {
    v17 = v13 & 0xFFFFFFFFFFFFFFE0;
    v18 = (char *)(v11 + (v13 & 0xFFFFFFFFFFFFFFE0));
    v19 = v14 + 1;
    v20 = (__int128 *)(v11 + 16);
    v21 = v13 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v22 = *v20;
      *(v19 - 1) = *(v20 - 1);
      *v19 = v22;
      v19 += 2;
      v20 += 2;
      v21 -= 32;
    }
    while (v21);
    v14 = (__int128 *)((char *)v14 + v17);
    if (v13 == v17)
      goto LABEL_59;
  }
  do
  {
    v23 = *v18++;
    *(_BYTE *)v14 = v23;
    v14 = (__int128 *)((char *)v14 + 1);
  }
  while (v18 != v12);
LABEL_59:
  *(_BYTE *)v14 = 0;
LABEL_60:
  if (SHIBYTE(v86) < 0)
    operator delete((void *)__p);
  __p = v87;
  v86 = v88;
  v24 = 0xAAAAAAAAAAAAAAABLL * (((char *)v69[1] - (char *)v69[0]) >> 3);
  v25 = (BOOL *)v69[0] + 64;
  if (v24 <= 2)
    v25 = &v71;
  if (*v25)
  {
    v26 = v24 > 2;
    if (v24 <= 2)
      v27 = &v70[8];
    else
      v27 = (char *)v69[0] + 48;
    v28 = *(_QWORD *)v27;
    v29 = (char *)v69[0] + 56;
    if (!v26)
      v29 = &v70[16];
    v30 = *(char **)v29;
    v31 = *(_QWORD *)v29 - v28;
    if (v31 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (v31 > 0x16)
      {
        v33 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v31 | 7) != 0x17)
          v33 = v31 | 7;
        v34 = v33 + 1;
        v32 = operator new(v33 + 1);
        v67 = v31;
        v68 = v34 | 0x8000000000000000;
        v66 = v32;
        if ((char *)v28 == v30)
          goto LABEL_87;
      }
      else
      {
        HIBYTE(v68) = *v29 - v28;
        v32 = &v66;
        if ((char *)v28 == v30)
          goto LABEL_87;
      }
      if (v31 < 0x20)
      {
        v36 = (char *)v28;
      }
      else if ((unint64_t)&v32[-v28] < 0x20)
      {
        v36 = (char *)v28;
      }
      else
      {
        v35 = v31 & 0x7FFFFFFFFFFFFFE0;
        v36 = (char *)(v28 + (v31 & 0xFFFFFFFFFFFFFFE0));
        v37 = v32 + 16;
        v38 = (__int128 *)(v28 + 16);
        v39 = v31 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v40 = *v38;
          *(v37 - 1) = *(v38 - 1);
          *v37 = v40;
          v37 += 2;
          v38 += 2;
          v39 -= 32;
        }
        while (v39);
        v32 += v35;
        if (v31 == v35)
          goto LABEL_87;
      }
      do
      {
        v41 = *v36++;
        *v32++ = v41;
      }
      while (v36 != v30);
LABEL_87:
      *v32 = 0;
      goto LABEL_88;
    }
LABEL_111:
    abort();
  }
  v66 = 0;
  v67 = 0;
  v68 = 0;
LABEL_88:
  v94[0] = -1;
  v42 = MEMORY[0x24BEDB858];
  v43 = MEMORY[0x24BEDB858] + 104;
  v93[0] = MEMORY[0x24BEDB858] + 104;
  v44 = MEMORY[0x24BEDB858] + 64;
  v45 = v6[2];
  v46 = v6[3];
  v88 = MEMORY[0x24BEDB858] + 64;
  *(_QWORD *)&v87 = v45;
  *(_QWORD *)((char *)&v87 + *(_QWORD *)(v45 - 24)) = v46;
  *((_QWORD *)&v87 + 1) = 0;
  v47 = (std::ios_base *)((char *)&v87 + *(_QWORD *)(v87 - 24));
  std::ios_base::init(v47, v89);
  v47[1].__vftable = 0;
  v47[1].__fmtflags_ = -1;
  v48 = v6[5];
  v88 = v6[4];
  *(_QWORD *)((char *)&v89[-1] + *(_QWORD *)(v88 - 24)) = v48;
  *(_QWORD *)&v87 = v6[1];
  *(_QWORD *)((char *)&v87 + *(_QWORD *)(v87 - 24)) = v6[6];
  v93[0] = v43;
  *(_QWORD *)&v87 = v42 + 24;
  v88 = v44;
  std::streambuf::basic_streambuf();
  v49 = MEMORY[0x24BEDB848] + 16;
  v89[0] = MEMORY[0x24BEDB848] + 16;
  v90 = 0u;
  v91 = 0u;
  v92 = 24;
  std::stringbuf::str();
  MEMORY[0x20BD2CDF8](&v87, v94);
  *(_QWORD *)&v87 = *v6;
  v50 = v6[9];
  *(_QWORD *)((char *)&v87 + *(_QWORD *)(v87 - 24)) = v6[8];
  v88 = v50;
  v89[0] = v49;
  if (SBYTE7(v91) < 0)
    operator delete((void *)v90);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD2D008](v93);
  if (SHIBYTE(v68) < 0)
    operator delete(v66);
LABEL_92:
  v51 = MEMORY[0x24BEDB858];
  v52 = MEMORY[0x24BEDB858] + 104;
  v93[0] = MEMORY[0x24BEDB858] + 104;
  v53 = MEMORY[0x24BEDB858] + 64;
  v54 = v6[2];
  v55 = v6[3];
  v88 = MEMORY[0x24BEDB858] + 64;
  *(_QWORD *)&v87 = v54;
  *(_QWORD *)((char *)&v87 + *(_QWORD *)(v54 - 24)) = v55;
  *((_QWORD *)&v87 + 1) = 0;
  v56 = (std::ios_base *)((char *)&v87 + *(_QWORD *)(v87 - 24));
  std::ios_base::init(v56, v89);
  v56[1].__vftable = 0;
  v56[1].__fmtflags_ = -1;
  v57 = v6[5];
  v88 = v6[4];
  *(_QWORD *)((char *)&v89[-1] + *(_QWORD *)(v88 - 24)) = v57;
  *(_QWORD *)&v87 = v6[1];
  *(_QWORD *)((char *)&v87 + *(_QWORD *)(v87 - 24)) = v6[6];
  v93[0] = v52;
  *(_QWORD *)&v87 = v51 + 24;
  v88 = v53;
  std::streambuf::basic_streambuf();
  v58 = MEMORY[0x24BEDB848] + 16;
  v89[0] = MEMORY[0x24BEDB848] + 16;
  v90 = 0u;
  v91 = 0u;
  v92 = 24;
  if (v86 >= 0)
    p_p = &__p;
  else
    p_p = (__int128 *)__p;
  if (v86 >= 0)
    v60 = HIBYTE(v86);
  else
    v60 = *((_QWORD *)&__p + 1);
  v61 = sub_20AB89270(&v88, (uint64_t)p_p, v60);
  sub_20AB89270(v61, (uint64_t)" (", 2);
  std::ostream::operator<<();
  sub_20AB89270(&v88, (uint64_t)")", 1);
  std::stringbuf::str();
  *(_QWORD *)&v87 = *v6;
  v62 = v6[9];
  *(_QWORD *)((char *)&v87 + *(_QWORD *)(v87 - 24)) = v6[8];
  v88 = v62;
  v89[0] = v58;
  if (SBYTE7(v91) < 0)
    operator delete((void *)v90);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD2D008](v93);
  if (v69[0])
  {
    v69[1] = v69[0];
    operator delete(v69[0]);
  }
  v63 = (std::__shared_weak_count *)*((_QWORD *)&v83 + 1);
  if (*((_QWORD *)&v83 + 1))
  {
    v64 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  std::locale::~locale(&v79);
  if (SHIBYTE(v86) < 0)
    operator delete((void *)__p);
}

char *sub_20ABD425C(uint64_t a1, void *a2, char *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  char *v14;
  char *v15;
  char *v17;
  char *v18;
  uint64_t v19;
  int v20;
  char *v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  int v37;
  char *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  unsigned __int8 *v72;
  unsigned __int8 *v73;

  v6 = (_QWORD *)operator new();
  *v6 = &off_24C3800B8;
  v7 = (_QWORD *)operator new();
  *v7 = &off_24C380178;
  v7[1] = v6;
  v8 = (_QWORD *)operator new();
  *v8 = &off_24C3805E8;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = v7;
  v9 = *(std::__shared_weak_count **)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 56) = v12;
  v13 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v13 > 0x3F)
  {
    if (v13 != 64)
    {
      if (v13 == 128)
      {
        v22 = (unsigned __int8 *)memchr(a2, 10, a3 - (_BYTE *)a2);
        if (v22)
          v23 = v22;
        else
          v23 = (unsigned __int8 *)a3;
        if (v23 == a2)
        {
          v58 = (_QWORD *)operator new();
          v59 = *(_QWORD *)(a1 + 56);
          v60 = *(_QWORD *)(v59 + 8);
          *v58 = &off_24C380178;
          v58[1] = v60;
          *(_QWORD *)(v59 + 8) = v58;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        }
        else
        {
          sub_20ABD73EC(a1, (unsigned __int8 *)a2, v23);
        }
        if (v23 == (unsigned __int8 *)a3)
          v61 = v23;
        else
          v61 = v23 + 1;
        if (v61 != (unsigned __int8 *)a3)
        {
          v62 = *(_QWORD *)(a1 + 56);
          do
          {
            v72 = (unsigned __int8 *)memchr(v61, 10, a3 - (char *)v61);
            if (v72)
              v73 = v72;
            else
              v73 = (unsigned __int8 *)a3;
            if (v73 == v61)
            {
              v63 = (_QWORD *)operator new();
              v64 = *(_QWORD *)(a1 + 56);
              v65 = *(_QWORD *)(v64 + 8);
              *v63 = &off_24C380178;
              v63[1] = v65;
              *(_QWORD *)(v64 + 8) = v63;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
            }
            else
            {
              sub_20ABD73EC(a1, v61, v73);
            }
            v66 = (_QWORD *)operator new();
            v67 = *(_QWORD *)(v62 + 8);
            v66[1] = *(_QWORD *)(v12 + 8);
            v66[2] = v67;
            *v66 = &off_24C380088;
            *(_QWORD *)(v12 + 8) = v66;
            *(_QWORD *)(v62 + 8) = 0;
            v68 = (_QWORD *)operator new();
            v69 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
            *v68 = &off_24C380178;
            v68[1] = v69;
            *(_QWORD *)(v62 + 8) = v68;
            *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
            v70 = (_QWORD *)operator new();
            v71 = *(_QWORD *)(v62 + 8);
            *v70 = &unk_24C380620;
            v70[1] = v71;
            *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v70;
            v62 = *(_QWORD *)(v62 + 8);
            *(_QWORD *)(a1 + 56) = v62;
            if (v73 == (unsigned __int8 *)a3)
              v61 = v73;
            else
              v61 = v73 + 1;
          }
          while (v61 != (unsigned __int8 *)a3);
        }
        return a3;
      }
      if (v13 == 256)
      {
        v14 = (char *)memchr(a2, 10, a3 - (_BYTE *)a2);
        if (v14)
          v15 = v14;
        else
          v15 = a3;
        if (v15 == a2)
        {
          v42 = (_QWORD *)operator new();
          v43 = *(_QWORD *)(a1 + 56);
          v44 = *(_QWORD *)(v43 + 8);
          *v42 = &off_24C380178;
          v42[1] = v44;
          *(_QWORD *)(v43 + 8) = v42;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        }
        else
        {
          sub_20ABD7568(a1, (char *)a2, v15);
        }
        if (v15 == a3)
          v45 = v15;
        else
          v45 = v15 + 1;
        if (v45 != a3)
        {
          v46 = *(_QWORD *)(a1 + 56);
          do
          {
            v56 = (char *)memchr(v45, 10, a3 - v45);
            if (v56)
              v57 = v56;
            else
              v57 = a3;
            if (v57 == v45)
            {
              v47 = (_QWORD *)operator new();
              v48 = *(_QWORD *)(a1 + 56);
              v49 = *(_QWORD *)(v48 + 8);
              *v47 = &off_24C380178;
              v47[1] = v49;
              *(_QWORD *)(v48 + 8) = v47;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
            }
            else
            {
              sub_20ABD7568(a1, v45, v57);
            }
            v50 = (_QWORD *)operator new();
            v51 = *(_QWORD *)(v46 + 8);
            v50[1] = *(_QWORD *)(v12 + 8);
            v50[2] = v51;
            *v50 = &off_24C380088;
            *(_QWORD *)(v12 + 8) = v50;
            *(_QWORD *)(v46 + 8) = 0;
            v52 = (_QWORD *)operator new();
            v53 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
            *v52 = &off_24C380178;
            v52[1] = v53;
            *(_QWORD *)(v46 + 8) = v52;
            *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
            v54 = (_QWORD *)operator new();
            v55 = *(_QWORD *)(v46 + 8);
            *v54 = &unk_24C380620;
            v54[1] = v55;
            *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v54;
            v46 = *(_QWORD *)(v46 + 8);
            *(_QWORD *)(a1 + 56) = v46;
            if (v57 == a3)
              v45 = v57;
            else
              v45 = v57 + 1;
          }
          while (v45 != a3);
        }
        return a3;
      }
LABEL_78:
      sub_20ABD494C();
      return (char *)sub_20ABD494C();
    }
    return sub_20ABD7568(a1, (char *)a2, a3);
  }
  if (v13)
  {
    if (v13 == 16)
      return (char *)sub_20ABD73EC(a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
    if (v13 != 32)
      goto LABEL_78;
    return sub_20ABD7568(a1, (char *)a2, a3);
  }
  v17 = (char *)a2;
  while (1)
  {
    v18 = v17;
    v17 = (char *)sub_20ABDD38C(a1, v17, a3);
    if (v17 == v18)
      break;
LABEL_21:
    if (v17 == v18)
      goto LABEL_31;
  }
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_DWORD *)(a1 + 28);
  v21 = sub_20ABDD638(a1, v18, a3);
  if (v21 != v18)
  {
    v17 = sub_20ABD8834(a1, v21, a3, v19, v20 + 1, *(_DWORD *)(a1 + 28) + 1);
    goto LABEL_21;
  }
LABEL_31:
  if (v18 == a2)
  {
    v24 = (_QWORD *)operator new();
    v25 = *(_QWORD *)(a1 + 56);
    v26 = *(_QWORD *)(v25 + 8);
    *v24 = &off_24C380178;
    v24[1] = v26;
    *(_QWORD *)(v25 + 8) = v24;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  }
  if (v18 == a3)
    return a3;
  while (2)
  {
    if (*v18 != 124)
      return v18;
    v33 = *(_QWORD *)(a1 + 56);
    v34 = v18 + 1;
    v35 = v18 + 1;
    while (2)
    {
      v18 = v35;
      v35 = (char *)sub_20ABDD38C(a1, v35, a3);
      if (v35 != v18)
      {
LABEL_40:
        if (v35 == v18)
          goto LABEL_35;
        continue;
      }
      break;
    }
    v36 = *(_QWORD *)(a1 + 56);
    v37 = *(_DWORD *)(a1 + 28);
    v38 = sub_20ABDD638(a1, v18, a3);
    if (v38 != v18)
    {
      v35 = sub_20ABD8834(a1, v38, a3, v36, v37 + 1, *(_DWORD *)(a1 + 28) + 1);
      goto LABEL_40;
    }
LABEL_35:
    if (v18 == v34)
    {
      v39 = (_QWORD *)operator new();
      v40 = *(_QWORD *)(a1 + 56);
      v41 = *(_QWORD *)(v40 + 8);
      *v39 = &off_24C380178;
      v39[1] = v41;
      *(_QWORD *)(v40 + 8) = v39;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    v27 = (_QWORD *)operator new();
    v28 = *(_QWORD *)(v33 + 8);
    v27[1] = *(_QWORD *)(v12 + 8);
    v27[2] = v28;
    *v27 = &off_24C380088;
    *(_QWORD *)(v12 + 8) = v27;
    *(_QWORD *)(v33 + 8) = 0;
    v29 = (_QWORD *)operator new();
    v30 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    *v29 = &off_24C380178;
    v29[1] = v30;
    *(_QWORD *)(v33 + 8) = v29;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v31 = (_QWORD *)operator new();
    v32 = *(_QWORD *)(v33 + 8);
    *v31 = &unk_24C380620;
    v31[1] = v32;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v31;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(v33 + 8);
    if (v18 != a3)
      continue;
    return a3;
  }
}

uint64_t sub_20ABD494C()
{
  std::__libcpp_verbose_abort("regex_error was thrown in -fno-exceptions mode");
  return sub_20ABD4960();
}

_QWORD *sub_20ABD4960(uint64_t a1, unint64_t a2, __int128 *a3)
{
  uint64_t v6;
  _QWORD *result;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  v6 = *(_QWORD *)(a1 + 16);
  result = *(_QWORD **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (uint64_t)result) >> 3) < a2)
  {
    if (result)
    {
      *(_QWORD *)(a1 + 8) = result;
      operator delete(result);
      v6 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a2 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_26;
    v8 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= a2)
      v9 = a2;
    v10 = v8 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v9;
    if (v10 > 0xAAAAAAAAAAAAAAALL)
LABEL_26:
      abort();
    v11 = 3 * v10;
    result = operator new(24 * v10);
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = result;
    *(_QWORD *)(a1 + 16) = &result[v11];
    v12 = 24 * a2;
    v13 = &result[3 * a2];
    do
    {
      *(_OWORD *)result = *a3;
      result[2] = *((_QWORD *)a3 + 2);
      result += 3;
      v12 -= 24;
    }
    while (v12);
    goto LABEL_25;
  }
  v14 = *(_QWORD *)(a1 + 8);
  v15 = (v14 - (uint64_t)result) / 24;
  if (v15 >= a2)
    v16 = a2;
  else
    v16 = (v14 - (uint64_t)result) / 24;
  if (v16)
  {
    v17 = result;
    do
    {
      *(_OWORD *)v17 = *a3;
      *((_BYTE *)v17 + 16) = *((_BYTE *)a3 + 16);
      v17 += 3;
      --v16;
    }
    while (v16);
  }
  if (a2 <= v15)
  {
    v13 = &result[3 * a2];
LABEL_25:
    *(_QWORD *)(a1 + 8) = v13;
    return result;
  }
  v18 = v14 + 24 * (a2 - v15);
  v19 = 24 * a2 - 24 * v15;
  do
  {
    v20 = *a3;
    *(_QWORD *)(v14 + 16) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v14 = v20;
    v14 += 24;
    v19 -= 24;
  }
  while (v19);
  *(_QWORD *)(a1 + 8) = v18;
  return result;
}

uint64_t sub_20ABD4AE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  signed int v17;
  unsigned int v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  void *v25;
  void *v26;
  __int128 v27;
  _BYTE *v28;
  _BYTE *v29;
  int64_t v30;
  char *v31;
  size_t v32;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  char *v36;
  size_t v37;
  uint64_t v38;
  char *v39;
  __int128 v40;
  uint64_t v41;
  char *i;
  void *v43;
  void *v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _BYTE *v50;
  unsigned int v51;
  uint64_t v52;
  char v53;
  uint64_t v55;
  signed int v57;
  _BYTE v60[56];
  void *__p[2];
  _QWORD v62[4];
  __int128 v63;
  char v64;
  char *v65;
  char *v66;
  unint64_t v67;

  v65 = 0;
  v66 = 0;
  v67 = 0;
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    *(_QWORD *)&v63 = a3;
    *((_QWORD *)&v63 + 1) = a3;
    v64 = 0;
    *(_DWORD *)v60 = 0;
    memset(&v60[8], 0, 48);
    *(_OWORD *)__p = 0u;
    memset(v62, 0, 21);
    v10 = sub_20ABD670C((void **)&v65, (uint64_t)v60);
    v66 = v10;
    if (__p[0])
      operator delete(__p[0]);
    if (*(_QWORD *)&v60[32])
      operator delete(*(void **)&v60[32]);
    v11 = *((_QWORD *)v10 - 8);
    *((_DWORD *)v10 - 24) = 0;
    *((_QWORD *)v10 - 11) = a2;
    *((_QWORD *)v10 - 10) = a2;
    *((_QWORD *)v10 - 9) = a3;
    v12 = *(unsigned int *)(a1 + 28);
    v13 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v10 - 7) - v11) >> 3);
    if (v12 <= v13)
    {
      if (v12 < v13)
        *((_QWORD *)v10 - 7) = v11 + 24 * v12;
    }
    else
    {
      sub_20ABD68D8((void **)v10 - 8, v12 - v13, &v63);
    }
    v14 = *((_QWORD *)v10 - 5);
    v15 = *(unsigned int *)(a1 + 32);
    v16 = (*((_QWORD *)v10 - 4) - v14) >> 4;
    if (v15 <= v16)
    {
      if (v15 < v16)
        *((_QWORD *)v10 - 4) = v14 + 16 * v15;
    }
    else
    {
      sub_20ABD6A74((char **)v10 - 5, v15 - v16);
    }
    v17 = a3 - a2;
    *((_QWORD *)v10 - 2) = v6;
    *((_DWORD *)v10 - 2) = a5;
    *(v10 - 4) = a6;
    v18 = 1;
    v57 = a3 - a2;
    while (2)
    {
      if ((v18 & 0xFFF) == 0 && (int)(v18 >> 12) >= v17)
      {
        sub_20ABD494C();
LABEL_56:
        abort();
      }
      v21 = v10 - 16;
      v20 = *((_QWORD *)v10 - 2);
      v22 = v10 - 96;
      if (v20)
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v20 + 16))(v20, v10 - 96);
      switch(*(_DWORD *)v22)
      {
        case 0xFFFFFC18:
          v23 = *((_QWORD *)v10 - 10);
          if ((a5 & 0x20) != 0 && v23 == a2)
            goto LABEL_24;
          v46 = *a4;
          *(_QWORD *)v46 = a2;
          *(_QWORD *)(v46 + 8) = v23;
          *(_BYTE *)(v46 + 16) = 1;
          v47 = *((_QWORD *)v10 - 8);
          v48 = *((_QWORD *)v10 - 7) - v47;
          if (v48)
          {
            v49 = 0xAAAAAAAAAAAAAAABLL * (v48 >> 3);
            v50 = (_BYTE *)(v47 + 16);
            v51 = 1;
            do
            {
              v52 = v46 + 24 * v51;
              *(_OWORD *)v52 = *((_OWORD *)v50 - 1);
              v53 = *v50;
              v50 += 24;
              *(_BYTE *)(v52 + 16) = v53;
            }
            while (v49 > v51++);
          }
          v6 = 1;
          v19 = v65;
          if (!v65)
            return v6;
          goto LABEL_41;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_16;
        case 0xFFFFFC1F:
LABEL_24:
          v24 = v66;
          v25 = (void *)*((_QWORD *)v66 - 5);
          if (v25)
          {
            *((_QWORD *)v66 - 4) = v25;
            operator delete(v25);
          }
          v26 = (void *)*((_QWORD *)v24 - 8);
          if (v26)
          {
            *((_QWORD *)v24 - 7) = v26;
            operator delete(v26);
          }
          v66 = v24 - 96;
          goto LABEL_16;
        case 0xFFFFFC20:
          v27 = *((_OWORD *)v10 - 5);
          *(_OWORD *)v60 = *(_OWORD *)v22;
          *(_OWORD *)&v60[16] = v27;
          memset(&v60[32], 0, 24);
          v29 = (_BYTE *)*((_QWORD *)v10 - 8);
          v28 = (_BYTE *)*((_QWORD *)v10 - 7);
          v30 = v28 - v29;
          if (v28 == v29)
            goto LABEL_31;
          if (0xAAAAAAAAAAAAAAABLL * (v30 >> 3) >= 0xAAAAAAAAAAAAAABLL)
            goto LABEL_56;
          v31 = (char *)operator new(v30);
          *(_QWORD *)&v60[32] = v31;
          *(_QWORD *)&v60[40] = v31;
          *(_QWORD *)&v60[48] = &v31[8 * (v30 >> 3)];
          v32 = 24 * ((v30 - 24) / 0x18uLL) + 24;
          memcpy(v31, v29, v32);
          *(_QWORD *)&v60[40] = &v31[v32];
LABEL_31:
          __p[0] = 0;
          __p[1] = 0;
          v62[0] = 0;
          v34 = (_BYTE *)*((_QWORD *)v10 - 5);
          v33 = (_BYTE *)*((_QWORD *)v10 - 4);
          v35 = v33 - v34;
          if (v33 == v34)
            goto LABEL_34;
          if (v35 < 0)
            goto LABEL_56;
          v36 = (char *)operator new(v33 - v34);
          __p[0] = v36;
          __p[1] = v36;
          v62[0] = &v36[16 * (v35 >> 4)];
          v37 = v35 & 0xFFFFFFFFFFFFFFF0;
          memcpy(v36, v34, v37);
          __p[1] = &v36[v37];
LABEL_34:
          v38 = *(_QWORD *)v21;
          *(_QWORD *)((char *)&v62[1] + 5) = *(_QWORD *)(v10 - 11);
          v62[1] = v38;
          (*(void (**)(_QWORD, uint64_t, char *))(**(_QWORD **)v21 + 24))(*(_QWORD *)v21, 1, v10 - 96);
          (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v62[1] + 24))(v62[1], 0, v60);
          v39 = v66;
          if ((unint64_t)v66 >= v67)
          {
            v66 = sub_20ABD670C((void **)&v65, (uint64_t)v60);
            v17 = v57;
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            v40 = *(_OWORD *)&v60[16];
            *(_OWORD *)v66 = *(_OWORD *)v60;
            *((_OWORD *)v39 + 1) = v40;
            *((_QWORD *)v39 + 4) = 0;
            *((_QWORD *)v39 + 5) = 0;
            *((_QWORD *)v39 + 6) = 0;
            *((_QWORD *)v39 + 7) = 0;
            *((_OWORD *)v39 + 2) = *(_OWORD *)&v60[32];
            *((_QWORD *)v39 + 6) = *(_QWORD *)&v60[48];
            memset(&v60[32], 0, 24);
            *((_QWORD *)v39 + 8) = 0;
            *((_QWORD *)v39 + 9) = 0;
            *(_OWORD *)(v39 + 56) = *(_OWORD *)__p;
            *((_QWORD *)v39 + 9) = v62[0];
            __p[0] = 0;
            __p[1] = 0;
            v62[0] = 0;
            v41 = v62[1];
            *(_QWORD *)(v39 + 85) = *(_QWORD *)((char *)&v62[1] + 5);
            *((_QWORD *)v39 + 10) = v41;
            v66 = v39 + 96;
            v17 = v57;
          }
          if (*(_QWORD *)&v60[32])
          {
            *(_QWORD *)&v60[40] = *(_QWORD *)&v60[32];
            operator delete(*(void **)&v60[32]);
          }
LABEL_16:
          v19 = v65;
          v10 = v66;
          ++v18;
          if (v65 != v66)
            continue;
          v6 = 0;
          if (v65)
          {
LABEL_41:
            for (i = v66; i != v19; i -= 96)
            {
              v43 = (void *)*((_QWORD *)i - 5);
              if (v43)
              {
                *((_QWORD *)i - 4) = v43;
                operator delete(v43);
              }
              v44 = (void *)*((_QWORD *)i - 8);
              if (v44)
              {
                *((_QWORD *)i - 7) = v44;
                operator delete(v44);
              }
            }
            operator delete(v19);
          }
          break;
        default:
          v55 = sub_20ABD494C();
          return sub_20ABD4FB4(v55);
      }
      break;
    }
  }
  return v6;
}

uint64_t sub_20ABD4FB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  void *v53;
  __int128 v54;
  uint64_t v55;
  _BYTE *v56;
  _BYTE *v57;
  int64_t v58;
  char *v59;
  size_t v60;
  uint64_t v61;
  _BYTE *v62;
  _BYTE *v63;
  uint64_t v64;
  char *v65;
  size_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void **v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  unint64_t v80;
  void *v81;
  void *v82;
  _QWORD *v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  void *v89;
  void *v90;
  uint64_t v91;
  __int128 v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  void *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  void *v101;
  char *v102;
  char *v103;
  char *v104;
  void *v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  void *v118;
  __int128 v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  int64_t v128;
  uint64_t v129;
  unint64_t v130;
  char *v131;
  unint64_t v132;
  char *v133;
  unint64_t v134;
  int64_t v135;
  unint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  __int128 *v141;
  char *v142;
  uint64_t v143;
  __int128 v144;
  uint64_t v145;
  char *v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  void **v151;
  void **v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  void *v156;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char v163;
  uint64_t v164;
  _BYTE v166[32];
  void *v167[2];
  char *v168;
  void *__p[2];
  char *v170;
  _QWORD v171[2];
  __int128 v172;
  __int128 v173;
  __int128 v174;

  v173 = 0u;
  v174 = 0u;
  v172 = 0u;
  v6 = *(_QWORD *)(a1 + 40);
  if (!v6)
    goto LABEL_141;
  v164 = a3 - a2;
  memset(&v166[4], 0, 24);
  sub_20ABD6B98((uint64_t)&v172);
  v11 = *(_QWORD *)(*((_QWORD *)&v172 + 1) + 8 * ((*((_QWORD *)&v174 + 1) + (_QWORD)v174) / 0x2AuLL))
      + 96 * ((*((_QWORD *)&v174 + 1) + (_QWORD)v174) % 0x2AuLL);
  *(_DWORD *)v11 = 0;
  *(_OWORD *)(v11 + 4) = *(_OWORD *)v166;
  *(_OWORD *)(v11 + 16) = *(_OWORD *)&v166[12];
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 77) = 0u;
  v12 = *((_QWORD *)&v174 + 1);
  v13 = ++*((_QWORD *)&v174 + 1);
  v14 = *((_QWORD *)&v172 + 1);
  v15 = v174 + v12;
  v16 = 8 * (v15 / 0x2A);
  v17 = a2;
  v18 = v15 % 0x2A;
  v19 = 96 * (v15 % 0x2A);
  v20 = *(_QWORD *)(*((_QWORD *)&v172 + 1) + v16) + v19;
  *(_DWORD *)v20 = 0;
  *(_QWORD *)(v20 + 8) = v17;
  v161 = v17;
  *(_QWORD *)(*(_QWORD *)(v14 + v16) + v19 + 16) = v17;
  *(_QWORD *)(*(_QWORD *)(v14 + v16) + v19 + 24) = a3;
  v21 = *(_QWORD *)(v14 + v16) + v19;
  v24 = *(_QWORD *)(v21 + 56);
  v22 = v21 + 56;
  v23 = v24;
  v25 = *(unsigned int *)(a1 + 32);
  v26 = (*(_QWORD *)(v22 + 8) - v24) >> 4;
  if (v25 <= v26)
  {
    if (v25 < v26)
      *(_QWORD *)(v22 + 8) = v23 + 16 * v25;
  }
  else
  {
    sub_20ABD6A74((char **)v22, v25 - v26);
  }
  v163 = 0;
  v27 = 0;
  v162 = 0;
  *(_QWORD *)(*(_QWORD *)(v14 + v16) + 96 * v18 + 80) = v6;
  v28 = *(_QWORD *)(v14 + v16) + 96 * v18;
  *(_DWORD *)(v28 + 88) = a5;
  *(_BYTE *)(v28 + 92) = a6;
  v29 = v164;
  while (2)
  {
    if ((++v27 & 0xFFF) == 0 && (int)(v27 >> 12) >= (int)v29)
    {
      sub_20ABD494C();
LABEL_156:
      abort();
    }
    v31 = v13 + v174 - 1;
    v32 = *(_QWORD *)(*((_QWORD *)&v172 + 1) + 8 * (v31 / 0x2A));
    v33 = v31 % 0x2A;
    v34 = v32 + 96 * (v31 % 0x2A);
    v36 = (_QWORD *)(v34 + 80);
    v35 = *(_QWORD *)(v34 + 80);
    if (v35)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v35 + 16))(v35, v32 + 96 * v33);
    switch(*(_DWORD *)v34)
    {
      case 0xFFFFFC18:
        v37 = *(_QWORD *)(v32 + 96 * v33 + 16);
        if ((a5 & 0x20) != 0 && v37 == v161)
        {
          v38 = *((_QWORD *)&v174 + 1) + v174 - 1;
          v39 = *(_QWORD *)(*((_QWORD *)&v172 + 1) + 8 * (v38 / 0x2A));
          v40 = v38 % 0x2A;
          v41 = *(void **)(v39 + 96 * (v38 % 0x2A) + 56);
          if (v41)
          {
            *(_QWORD *)(v39 + 96 * v40 + 64) = v41;
            operator delete(v41);
          }
          v42 = *(void **)(v39 + 96 * v40 + 32);
          if (v42)
          {
            *(_QWORD *)(v39 + 96 * v40 + 40) = v42;
            operator delete(v42);
          }
          v43 = v173;
          v44 = (_QWORD)v173 == *((_QWORD *)&v172 + 1);
          v45 = 42 * ((uint64_t)(v173 - *((_QWORD *)&v172 + 1)) >> 3) - 1;
LABEL_110:
          v119 = v174;
          --*((_QWORD *)&v174 + 1);
          if (v44)
            v45 = 0;
          if ((unint64_t)(v45 - (*((_QWORD *)&v119 + 1) + v119) + 1) >= 0x54)
          {
            operator delete(*(void **)(v43 - 8));
            *(_QWORD *)&v173 = v173 - 8;
          }
          goto LABEL_8;
        }
        v74 = v37 - *(_QWORD *)(v32 + 96 * v33 + 8);
        v75 = v162;
        if ((v163 & (v162 >= v74)) == 0)
          v75 = v74;
        if (v75 == v29)
        {
          v76 = (void **)*((_QWORD *)&v172 + 1);
          v77 = v173;
          if ((_QWORD)v173 == *((_QWORD *)&v172 + 1))
          {
            v77 = *((_QWORD *)&v172 + 1);
          }
          else
          {
            v78 = (_QWORD *)(*((_QWORD *)&v172 + 1) + 8 * ((unint64_t)v174 / 0x2A));
            v79 = (_QWORD *)(*v78 + 96 * ((unint64_t)v174 % 0x2A));
            v80 = *(_QWORD *)(*((_QWORD *)&v172 + 1) + 8 * ((*((_QWORD *)&v174 + 1) + (_QWORD)v174) / 0x2AuLL))
                + 96 * ((*((_QWORD *)&v174 + 1) + (_QWORD)v174) % 0x2AuLL);
            if (v79 != (_QWORD *)v80)
            {
              do
              {
                v81 = (void *)v79[7];
                if (v81)
                {
                  v79[8] = v81;
                  operator delete(v81);
                }
                v82 = (void *)v79[4];
                if (v82)
                {
                  v79[5] = v82;
                  operator delete(v82);
                }
                v79 += 12;
                if ((_QWORD *)((char *)v79 - *v78) == (_QWORD *)4032)
                {
                  v83 = (_QWORD *)v78[1];
                  ++v78;
                  v79 = v83;
                }
              }
              while (v79 != (_QWORD *)v80);
              v76 = (void **)*((_QWORD *)&v172 + 1);
              v77 = v173;
            }
          }
          *((_QWORD *)&v174 + 1) = 0;
          v93 = v77 - (_QWORD)v76;
          if (v93 >= 0x11)
          {
            do
            {
              operator delete(*v76);
              v76 = (void **)(*((_QWORD *)&v172 + 1) + 8);
              *((_QWORD *)&v172 + 1) = v76;
              v93 = v173 - (_QWORD)v76;
            }
            while ((_QWORD)v173 - (_QWORD)v76 > 0x10uLL);
          }
          if (v93 >> 3 == 1)
          {
            v94 = 21;
LABEL_88:
            *(_QWORD *)&v174 = v94;
          }
          else if (v93 >> 3 == 2)
          {
            v94 = 42;
            goto LABEL_88;
          }
          v163 = 1;
          v162 = v29;
          goto LABEL_8;
        }
        v162 = v75;
        v86 = *((_QWORD *)&v174 + 1) + v174 - 1;
        v87 = *(_QWORD *)(*((_QWORD *)&v172 + 1) + 8 * (v86 / 0x2A));
        v88 = v86 % 0x2A;
        v89 = *(void **)(v87 + 96 * (v86 % 0x2A) + 56);
        if (v89)
        {
          *(_QWORD *)(v87 + 96 * v88 + 64) = v89;
          operator delete(v89);
        }
        v90 = *(void **)(v87 + 96 * v88 + 32);
        if (v90)
        {
          *(_QWORD *)(v87 + 96 * v88 + 40) = v90;
          operator delete(v90);
        }
        v91 = 42 * ((uint64_t)(v173 - *((_QWORD *)&v172 + 1)) >> 3) - 1;
        v92 = v174;
        --*((_QWORD *)&v174 + 1);
        if ((_QWORD)v173 == *((_QWORD *)&v172 + 1))
          v91 = 0;
        if ((unint64_t)(v91 - (*((_QWORD *)&v92 + 1) + v92) + 1) >= 0x54)
        {
          operator delete(*(void **)(v173 - 8));
          *(_QWORD *)&v173 = v173 - 8;
        }
        v163 = 1;
LABEL_8:
        v13 = *((_QWORD *)&v174 + 1);
        if (*((_QWORD *)&v174 + 1))
          continue;
        if ((v163 & 1) != 0)
        {
          v149 = *a4;
          *(_QWORD *)v149 = v161;
          *(_QWORD *)(v149 + 8) = v161 + v162;
          v150 = 1;
          *(_BYTE *)(v149 + 16) = 1;
          goto LABEL_142;
        }
LABEL_141:
        v150 = 0;
LABEL_142:
        v151 = (void **)*((_QWORD *)&v172 + 1);
        v152 = (void **)v173;
        *((_QWORD *)&v174 + 1) = 0;
        v153 = v173 - *((_QWORD *)&v172 + 1);
        if ((_QWORD)v173 - *((_QWORD *)&v172 + 1) >= 0x11uLL)
        {
          do
          {
            operator delete(*v151);
            v152 = (void **)v173;
            v151 = (void **)(*((_QWORD *)&v172 + 1) + 8);
            *((_QWORD *)&v172 + 1) = v151;
            v153 = v173 - (_QWORD)v151;
          }
          while ((_QWORD)v173 - (_QWORD)v151 > 0x10uLL);
        }
        v154 = v153 >> 3;
        if (v154 == 1)
        {
          v155 = 21;
          goto LABEL_148;
        }
        if (v154 == 2)
        {
          v155 = 42;
LABEL_148:
          *(_QWORD *)&v174 = v155;
        }
        if (v151 != v152)
        {
          do
          {
            v156 = *v151++;
            operator delete(v156);
          }
          while (v151 != v152);
          if ((_QWORD)v173 != *((_QWORD *)&v172 + 1))
            *(_QWORD *)&v173 = v173 + ((*((_QWORD *)&v172 + 1) - v173 + 7) & 0xFFFFFFFFFFFFFFF8);
        }
        if ((_QWORD)v172)
          operator delete((void *)v172);
        return v150;
      case 0xFFFFFC19:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        goto LABEL_8;
      case 0xFFFFFC1D:
        v46 = v174;
        v47 = (uint64_t *)*((_QWORD *)&v172 + 1);
        v48 = (uint64_t *)v173;
        if ((_QWORD)v174)
          goto LABEL_101;
        v84 = (uint64_t)(v173 - *((_QWORD *)&v172 + 1)) >> 3;
        v85 = 42 * v84 - 1;
        if ((_QWORD)v173 == *((_QWORD *)&v172 + 1))
          v85 = 0;
        if ((unint64_t)(v85 - *((_QWORD *)&v174 + 1)) >= 0x2A)
        {
          *(_QWORD *)&v174 = 42;
          *(_QWORD *)v166 = *(_QWORD *)(v173 - 8);
          *(_QWORD *)&v173 = v173 - 8;
          sub_20ABD70C0((void **)&v172, v166);
          goto LABEL_100;
        }
        if (v84 < (uint64_t)(*((_QWORD *)&v173 + 1) - v172) >> 3)
        {
          if (*((_QWORD *)&v172 + 1) == (_QWORD)v172)
          {
            *(_QWORD *)v166 = operator new(0xFC0uLL);
            sub_20ABD7264((char **)&v172, v166);
            *(_QWORD *)v166 = *(_QWORD *)(v173 - 8);
            *(_QWORD *)&v173 = v173 - 8;
          }
          else
          {
            *(_QWORD *)v166 = operator new(0xFC0uLL);
          }
          sub_20ABD70C0((void **)&v172, v166);
          v100 = 21;
          if ((_QWORD)v173 - *((_QWORD *)&v172 + 1) != 8)
            v100 = v174 + 42;
          *(_QWORD *)&v174 = v100;
          goto LABEL_100;
        }
        if (*((_QWORD *)&v173 + 1) == (_QWORD)v172)
          v95 = 1;
        else
          v95 = (uint64_t)(*((_QWORD *)&v173 + 1) - v172) >> 2;
        if (v95 >> 61)
LABEL_158:
          sub_20ABAD09C();
        v96 = (char *)operator new(8 * v95);
        v97 = operator new(0xFC0uLL);
        if (v95)
        {
          v98 = &v96[8 * v95];
          v99 = v96;
        }
        else
        {
          v101 = v97;
          v102 = (char *)operator new(8uLL);
          v98 = v102 + 8;
          operator delete(v96);
          v97 = v101;
          v47 = (uint64_t *)*((_QWORD *)&v172 + 1);
          v48 = (uint64_t *)v173;
          v99 = v102;
        }
        *(_QWORD *)v99 = v97;
        v103 = v99 + 8;
        v104 = v99;
        if (v47 == v48)
        {
LABEL_96:
          v105 = (void *)v172;
          *(_QWORD *)&v172 = v99;
          *((_QWORD *)&v172 + 1) = v104;
          *(_QWORD *)&v173 = v103;
          *((_QWORD *)&v173 + 1) = v98;
          v106 = v174 + 42;
          if (v103 - v104 == 8)
            v106 = 21;
          *(_QWORD *)&v174 = v106;
          v29 = v164;
          if (v105)
            operator delete(v105);
LABEL_100:
          v46 = v174;
          v47 = (uint64_t *)*((_QWORD *)&v172 + 1);
          v48 = (uint64_t *)v173;
LABEL_101:
          v107 = &v47[v46 / 0x2A];
          v108 = *v107 + 96 * (v46 % 0x2A);
          if (v48 == v47)
            v108 = 0;
          if (v108 == *v107)
            v108 = *(v107 - 1) + 4032;
          v109 = *(_OWORD *)(v34 + 16);
          *(_OWORD *)(v108 - 96) = *(_OWORD *)v34;
          *(_OWORD *)(v108 - 80) = v109;
          v110 = v32 + 96 * v33;
          *(_QWORD *)(v108 - 56) = 0;
          *(_QWORD *)(v108 - 48) = 0;
          *(_QWORD *)(v108 - 64) = 0;
          *(_OWORD *)(v108 - 64) = *(_OWORD *)(v110 + 32);
          *(_QWORD *)(v108 - 48) = *(_QWORD *)(v110 + 48);
          *(_QWORD *)(v110 + 32) = 0;
          *(_QWORD *)(v110 + 40) = 0;
          *(_QWORD *)(v110 + 48) = 0;
          *(_QWORD *)(v108 - 40) = 0;
          *(_QWORD *)(v108 - 32) = 0;
          *(_QWORD *)(v108 - 24) = 0;
          *(_OWORD *)(v108 - 40) = *(_OWORD *)(v110 + 56);
          *(_QWORD *)(v108 - 24) = *(_QWORD *)(v110 + 72);
          *(_QWORD *)(v110 + 56) = 0;
          *(_QWORD *)(v110 + 64) = 0;
          *(_QWORD *)(v110 + 72) = 0;
          v111 = *v36;
          *(_QWORD *)(v108 - 11) = *(_QWORD *)(v34 + 85);
          *(_QWORD *)(v108 - 16) = v111;
          v112 = *((_QWORD *)&v174 + 1);
          *(_QWORD *)&v174 = v174 - 1;
          ++*((_QWORD *)&v174 + 1);
          v113 = v112 + v174;
          v114 = (v112 + (uint64_t)v174) / 0x2AuLL;
          v115 = *(_QWORD *)(*((_QWORD *)&v172 + 1) + 8 * v114);
          v116 = v113 - 42 * v114;
          v117 = *(void **)(v115 + 96 * v116 + 56);
          if (v117)
          {
            *(_QWORD *)(v115 + 96 * v116 + 64) = v117;
            operator delete(v117);
          }
          v118 = *(void **)(v115 + 96 * v116 + 32);
          if (v118)
          {
            *(_QWORD *)(v115 + 96 * v116 + 40) = v118;
            operator delete(v118);
          }
          v43 = v173;
          v44 = (_QWORD)v173 == *((_QWORD *)&v172 + 1);
          v45 = 42 * ((uint64_t)(v173 - *((_QWORD *)&v172 + 1)) >> 3) - 1;
          goto LABEL_110;
        }
        break;
      case 0xFFFFFC1F:
        v49 = *((_QWORD *)&v174 + 1) + v174 - 1;
        v50 = *(_QWORD *)(*((_QWORD *)&v172 + 1) + 8 * (v49 / 0x2A));
        v51 = v49 % 0x2A;
        v52 = *(void **)(v50 + 96 * (v49 % 0x2A) + 56);
        if (v52)
        {
          *(_QWORD *)(v50 + 96 * v51 + 64) = v52;
          operator delete(v52);
        }
        v53 = *(void **)(v50 + 96 * v51 + 32);
        if (v53)
        {
          *(_QWORD *)(v50 + 96 * v51 + 40) = v53;
          operator delete(v53);
        }
        v43 = v173;
        v44 = (_QWORD)v173 == *((_QWORD *)&v172 + 1);
        v45 = 42 * ((uint64_t)(v173 - *((_QWORD *)&v172 + 1)) >> 3) - 1;
        goto LABEL_110;
      case 0xFFFFFC20:
        v54 = *(_OWORD *)(v34 + 16);
        *(_OWORD *)v166 = *(_OWORD *)v34;
        *(_OWORD *)&v166[16] = v54;
        v55 = v32 + 96 * v33;
        v167[1] = 0;
        v168 = 0;
        v167[0] = 0;
        v57 = *(_BYTE **)(v55 + 32);
        v56 = *(_BYTE **)(v55 + 40);
        v58 = v56 - v57;
        if (v56 == v57)
          goto LABEL_34;
        if (0xAAAAAAAAAAAAAAABLL * (v58 >> 3) >= 0xAAAAAAAAAAAAAABLL)
          goto LABEL_156;
        v59 = (char *)operator new(v58);
        v167[0] = v59;
        v167[1] = v59;
        v168 = &v59[8 * (v58 >> 3)];
        v60 = 24 * ((v58 - 24) / 0x18uLL) + 24;
        memcpy(v59, v57, v60);
        v167[1] = &v59[v60];
LABEL_34:
        v61 = v32 + 96 * v33;
        __p[0] = 0;
        __p[1] = 0;
        v170 = 0;
        v63 = *(_BYTE **)(v61 + 56);
        v62 = *(_BYTE **)(v61 + 64);
        v64 = v62 - v63;
        if (v62 == v63)
          goto LABEL_37;
        if (v64 < 0)
          goto LABEL_156;
        v65 = (char *)operator new(v62 - v63);
        __p[0] = v65;
        __p[1] = v65;
        v170 = &v65[16 * (v64 >> 4)];
        v66 = v64 & 0xFFFFFFFFFFFFFFF0;
        memcpy(v65, v63, v66);
        __p[1] = &v65[v66];
LABEL_37:
        v67 = *v36;
        *(_QWORD *)((char *)v171 + 5) = *(_QWORD *)(v34 + 85);
        v171[0] = v67;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v36 + 24))(*v36, 1, v34);
        (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v171[0] + 24))(v171[0], 0, v166);
        v68 = *((_QWORD *)&v172 + 1);
        if ((_QWORD)v173 == *((_QWORD *)&v172 + 1))
          v69 = 0;
        else
          v69 = 42 * ((uint64_t)(v173 - *((_QWORD *)&v172 + 1)) >> 3) - 1;
        v70 = *((_QWORD *)&v174 + 1) + v174;
        if (v69 == *((_QWORD *)&v174 + 1) + (_QWORD)v174)
        {
          sub_20ABD6B98((uint64_t)&v172);
          v68 = *((_QWORD *)&v172 + 1);
          v70 = *((_QWORD *)&v174 + 1) + v174;
        }
        v71 = *(_QWORD *)(v68 + 8 * (v70 / 0x2A)) + 96 * (v70 % 0x2A);
        v72 = *(_OWORD *)&v166[16];
        *(_OWORD *)v71 = *(_OWORD *)v166;
        *(_OWORD *)(v71 + 16) = v72;
        *(_QWORD *)(v71 + 40) = 0;
        *(_QWORD *)(v71 + 48) = 0;
        *(_QWORD *)(v71 + 32) = 0;
        *(_OWORD *)(v71 + 32) = *(_OWORD *)v167;
        *(_QWORD *)(v71 + 48) = v168;
        v167[0] = 0;
        v167[1] = 0;
        v168 = 0;
        *(_QWORD *)(v71 + 56) = 0;
        *(_QWORD *)(v71 + 64) = 0;
        *(_QWORD *)(v71 + 72) = 0;
        *(_OWORD *)(v71 + 56) = *(_OWORD *)__p;
        *(_QWORD *)(v71 + 72) = v170;
        __p[0] = 0;
        __p[1] = 0;
        v170 = 0;
        v73 = v171[0];
        *(_QWORD *)(v71 + 85) = *(_QWORD *)((char *)v171 + 5);
        *(_QWORD *)(v71 + 80) = v73;
        ++*((_QWORD *)&v174 + 1);
        v29 = v164;
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if (v167[0])
        {
          v167[1] = v167[0];
          operator delete(v167[0]);
        }
        goto LABEL_8;
      default:
        sub_20ABD494C();
        goto LABEL_158;
    }
    break;
  }
  while (1)
  {
    if (v103 == v98)
    {
      if (v104 <= v99)
      {
        v130 = (v103 - v99) >> 2;
        if (v103 == v99)
          v130 = 1;
        if (v130 >> 61)
          goto LABEL_158;
        v131 = v99;
        v132 = v130 >> 2;
        v160 = 8 * v130;
        v133 = (char *)operator new(8 * v130);
        v134 = v132;
        v99 = v133;
        v120 = &v133[8 * v132];
        v121 = v120;
        v135 = v103 - v104;
        if (v103 != v104)
        {
          v121 = &v120[v135 & 0xFFFFFFFFFFFFFFF8];
          v136 = v135 - 8;
          if (v136 >= 0x38)
          {
            v138 = 8 * v134;
            if ((unint64_t)(&v133[8 * v134] - v104) < 0x20)
            {
              v137 = v120;
              goto LABEL_136;
            }
            v139 = (v136 >> 3) + 1;
            v140 = 8 * (v139 & 0x3FFFFFFFFFFFFFFCLL);
            v137 = &v120[v140];
            v141 = (__int128 *)(v104 + 16);
            v142 = &v133[v138 + 16];
            v143 = v139 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v144 = *v141;
              *((_OWORD *)v142 - 1) = *(v141 - 1);
              *(_OWORD *)v142 = v144;
              v141 += 2;
              v142 += 32;
              v143 -= 4;
            }
            while (v143);
            if (v139 != (v139 & 0x3FFFFFFFFFFFFFFCLL))
            {
              v104 += v140;
              goto LABEL_136;
            }
          }
          else
          {
            v137 = v120;
            do
            {
LABEL_136:
              v145 = *(_QWORD *)v104;
              v104 += 8;
              *(_QWORD *)v137 = v145;
              v137 += 8;
            }
            while (v137 != v121);
          }
        }
        v103 = &v133[v160];
        if (v131)
        {
          v146 = v131;
          v147 = v120;
          v148 = v99;
          operator delete(v146);
          v120 = v147;
          v99 = v148;
        }
        goto LABEL_115;
      }
      v123 = (v104 - v99) >> 3;
      if (v123 >= -1)
        v124 = v123 + 1;
      else
        v124 = v123 + 2;
      v125 = v124 >> 1;
      v126 = &v104[-8 * (v124 >> 1)];
      v127 = v103;
      v128 = v103 - v104;
      if (v103 != v104)
      {
        v159 = v99;
        memmove(v126, v104, v103 - v104);
        v128 = v103 - v104;
        v99 = v159;
        v127 = v104;
      }
      v129 = -v125;
      v121 = &v126[v128];
      v120 = &v127[8 * v129];
    }
    else
    {
      v120 = v104;
      v121 = v103;
      v103 = v98;
    }
LABEL_115:
    v122 = *v47++;
    *(_QWORD *)v121 = v122;
    v104 = v120;
    v98 = v103;
    v103 = v121 + 8;
    if (v47 == (uint64_t *)v173)
      goto LABEL_96;
  }
}

char *sub_20ABD5CCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  unsigned int v20;
  char *v21;
  BOOL v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  void *v28;
  void *v29;
  __int128 v30;
  _BYTE *v31;
  _BYTE *v32;
  int64_t v33;
  char *v34;
  size_t v35;
  _BYTE *v36;
  _BYTE *v37;
  uint64_t v38;
  char *v39;
  size_t v40;
  uint64_t v41;
  char *v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  _BYTE *v47;
  _BYTE *v48;
  unint64_t v49;
  char *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  unint64_t v55;
  char *v56;
  char *v57;
  size_t v58;
  _BYTE *v59;
  char *v60;
  char *i;
  __int128 v62;
  uint64_t v63;
  char *v64;
  char *v65;
  int64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  size_t v71;
  char *v72;
  char *v73;
  double *v74;
  uint64_t v75;
  int64_t v76;
  unint64_t v77;
  char *v78;
  unint64_t v79;
  double *v80;
  unint64_t v81;
  char *v82;
  unint64_t v83;
  char *v84;
  double *v85;
  BOOL v87;
  BOOL v88;
  uint64_t v89;
  uint64_t v90;
  const double *v91;
  double *v92;
  uint64_t v93;
  const double *v94;
  double *v95;
  char *v96;
  __int128 v97;
  unint64_t v98;
  char *v99;
  double *v100;
  unint64_t v101;
  BOOL v103;
  BOOL v104;
  uint64_t v105;
  uint64_t v106;
  const double *v107;
  double *v108;
  uint64_t v109;
  const double *v110;
  double *v111;
  char *v112;
  char *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  uint64_t v118;
  double *v119;
  _BYTE *v120;
  unsigned int v121;
  uint64_t v122;
  char v123;
  char *v124;
  char *j;
  void *v126;
  void *v127;
  void **v129;
  uint64_t v130;
  double *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  double *v139;
  char v140;
  uint64_t v141;
  _BYTE v143[56];
  void *__p[2];
  _OWORD v145[2];
  __int128 v146;
  char v147;
  char *v148;
  char *v149;
  unint64_t v150;
  float64x2x2_t v151;
  float64x2x2_t v152;
  float64x2x2_t v153;
  float64x2x2_t v154;

  v148 = 0;
  v149 = 0;
  v150 = 0;
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    *(_QWORD *)&v146 = a3;
    *((_QWORD *)&v146 + 1) = a3;
    v147 = 0;
    *(_DWORD *)v143 = 0;
    memset(&v143[8], 0, 48);
    *(_OWORD *)__p = 0u;
    memset(v145, 0, 21);
    v10 = sub_20ABD670C((void **)&v148, (uint64_t)v143);
    v149 = v10;
    if (__p[0])
      operator delete(__p[0]);
    if (*(_QWORD *)&v143[32])
      operator delete(*(void **)&v143[32]);
    v11 = *((_QWORD *)v10 - 8);
    v12 = a3 - a2;
    *((_DWORD *)v10 - 24) = 0;
    *((_QWORD *)v10 - 11) = a2;
    *((_QWORD *)v10 - 10) = a2;
    *((_QWORD *)v10 - 9) = a3;
    v13 = *(unsigned int *)(a1 + 28);
    v14 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v10 - 7) - v11) >> 3);
    if (v13 <= v14)
    {
      if (v13 < v14)
        *((_QWORD *)v10 - 7) = v11 + 24 * v13;
    }
    else
    {
      sub_20ABD68D8((void **)v10 - 8, v13 - v14, &v146);
    }
    v16 = *((_QWORD *)v10 - 5);
    v17 = *(unsigned int *)(a1 + 32);
    v18 = (*((_QWORD *)v10 - 4) - v16) >> 4;
    if (v17 <= v18)
    {
      if (v17 < v18)
        *((_QWORD *)v10 - 4) = v16 + 16 * v17;
    }
    else
    {
      sub_20ABD6A74((char **)v10 - 5, v17 - v18);
    }
    v19 = 0;
    v133 = 0;
    v134 = 0;
    v139 = 0;
    v132 = 0;
    v140 = 0;
    v20 = 0;
    v137 = 0;
    *((_QWORD *)v10 - 2) = v6;
    *((_DWORD *)v10 - 2) = a5;
    *(v10 - 4) = a6;
    v21 = (char *)v145 + 8;
    v135 = 0;
    while (1)
    {
      v22 = (++v20 & 0xFFF) != 0 || (int)(v20 >> 12) < (int)v12;
      if (!v22)
      {
        sub_20ABD494C();
LABEL_167:
        abort();
      }
      v24 = v10 - 16;
      v23 = *((_QWORD *)v10 - 2);
      v25 = v10 - 96;
      if (v23)
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v23 + 16))(v23, v10 - 96);
      switch(*(_DWORD *)v25)
      {
        case 0xFFFFFC18:
          v26 = *((_QWORD *)v10 - 10);
          if ((a5 & 0x20) != 0 && v26 == a2)
            goto LABEL_28;
          v45 = v137;
          if ((v140 & (v137 >= v26 - *((_QWORD *)v10 - 11))) != 0)
          {
            v46 = (char *)v139;
            goto LABEL_133;
          }
          v141 = v26 - *((_QWORD *)v10 - 11);
          v48 = (_BYTE *)*((_QWORD *)v10 - 8);
          v47 = (_BYTE *)*((_QWORD *)v10 - 7);
          v49 = 0xAAAAAAAAAAAAAAABLL * ((v47 - v48) >> 3);
          v50 = v135;
          if (0xAAAAAAAAAAAAAAABLL * ((v134 - (uint64_t)v135) >> 3) < v49)
          {
            if (v135)
            {
              operator delete(v135);
              v134 = 0;
            }
            if (v49 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_167;
            v51 = 0x5555555555555556 * (v134 >> 3);
            if (v51 <= v49)
              v51 = 0xAAAAAAAAAAAAAAABLL * ((v47 - v48) >> 3);
            v52 = 0xAAAAAAAAAAAAAAABLL * (v134 >> 3) >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v51;
            if (v52 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_167;
            v53 = 24 * v52;
            v50 = (char *)operator new(24 * v52);
            v54 = v50;
            if (v48 != v47)
            {
              v55 = (v47 - v48 - 24) / 0x18uLL;
              v56 = v50;
              v57 = v21;
              v58 = 24 * v55 + 24;
              memcpy(v50, v48, v58);
              v50 = v56;
              v54 = &v56[v58];
              v21 = v57;
            }
            v134 = (uint64_t)&v50[v53];
            goto LABEL_71;
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v19 - v135) >> 3) >= v49)
          {
            if (v48 == v47)
            {
              v54 = v135;
            }
            else
            {
              v54 = v135;
              do
              {
                *(_OWORD *)v54 = *(_OWORD *)v48;
                v54[16] = v48[16];
                v54 += 24;
                v48 += 24;
              }
              while (v48 != v47);
              v50 = v135;
            }
LABEL_71:
            v63 = v54 - v50;
            v19 = v50;
            goto LABEL_72;
          }
          v59 = &v48[8 * ((v19 - v135) >> 3)];
          if (v19 != v135)
          {
            v60 = v135;
            do
            {
              *(_OWORD *)v60 = *(_OWORD *)v48;
              v60[16] = v48[16];
              v48 += 24;
              v60 += 24;
            }
            while (v48 != v59);
          }
          for (i = v19; v59 != v47; v59 += 24)
          {
            v62 = *(_OWORD *)v59;
            *((_QWORD *)i + 2) = *((_QWORD *)v59 + 2);
            *(_OWORD *)i = v62;
            i += 24;
          }
          v63 = i - v19;
          v50 = v135;
LABEL_72:
          v135 = v50;
          v64 = (char *)*((_QWORD *)v10 - 5);
          v65 = (char *)*((_QWORD *)v10 - 4);
          v66 = v65 - v64;
          v67 = (v65 - v64) >> 4;
          v46 = (char *)v139;
          if (v67 <= (v133 - (uint64_t)v139) >> 4)
          {
            v74 = v132;
            v76 = (char *)v132 - (char *)v139;
            v77 = ((char *)v132 - (char *)v139) >> 4;
            if (v77 >= v67)
            {
              if (v64 == v65)
              {
                v82 = (char *)v139;
              }
              else
              {
                v81 = v66 - 16;
                if ((unint64_t)(v66 - 16) < 0xF0)
                {
                  v82 = (char *)v139;
                  goto LABEL_130;
                }
                v98 = v81 & 0xFFFFFFFFFFFFFFF0 | 8;
                v99 = (char *)v139 + v98;
                v100 = (double *)&v64[v98];
                v101 = (v81 & 0xFFFFFFFFFFFFFFF0) + 16;
                v103 = v139 + 1 < (double *)&v64[v101] && v64 + 8 < (char *)v139 + v101;
                v82 = (char *)v139;
                v104 = v99 <= v64 || v139 >= v100;
                if (!v104 || v103)
                {
                  do
                  {
LABEL_130:
                    *(_QWORD *)v82 = *(_QWORD *)v64;
                    *((_QWORD *)v82 + 1) = *((_QWORD *)v64 + 1);
                    v82 += 16;
                    v64 += 16;
                  }
                  while (v64 != v65);
                }
                else
                {
                  v105 = (v81 >> 4) + 1;
                  v106 = 2 * (v105 & 0x1FFFFFFFFFFFFFFCLL);
                  v82 = (char *)&v139[v106];
                  v107 = (const double *)(v64 + 32);
                  v108 = v139 + 4;
                  v109 = v105 & 0x1FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v110 = v107 - 4;
                    v152 = vld2q_f64(v110);
                    v154 = vld2q_f64(v107);
                    v111 = v108 - 4;
                    vst2q_f64(v111, v152);
                    vst2q_f64(v108, v154);
                    v107 += 8;
                    v108 += 8;
                    v109 -= 4;
                  }
                  while (v109);
                  if (v105 != (v105 & 0x1FFFFFFFFFFFFFFCLL))
                  {
                    v64 += v106 * 8;
                    goto LABEL_130;
                  }
                }
              }
              v75 = v141;
              v73 = (char *)(v82 - (char *)v139);
              v74 = v139;
              goto LABEL_132;
            }
            v78 = &v64[16 * v77];
            if (v132 != v139)
            {
              v79 = v76 - 16;
              if ((unint64_t)(v76 - 16) < 0xF0)
              {
                v80 = v139;
                goto LABEL_108;
              }
              v83 = v76 & 0xFFFFFFFFFFFFFFF0;
              v84 = (char *)v139 + v83 - 8;
              v85 = (double *)&v64[v83 - 8];
              v87 = v139 + 1 < (double *)&v64[v83] && v64 + 8 < (char *)v139 + v83;
              v80 = v139;
              v88 = v84 <= v64 || v139 >= v85;
              if (!v88 || v87)
              {
                do
                {
LABEL_108:
                  *v80 = *(double *)v64;
                  v80[1] = *((double *)v64 + 1);
                  v64 += 16;
                  v80 += 2;
                }
                while (v64 != v78);
              }
              else
              {
                v89 = (v79 >> 4) + 1;
                v90 = 2 * (v89 & 0x1FFFFFFFFFFFFFFCLL);
                v80 = &v139[v90];
                v91 = (const double *)(v64 + 32);
                v92 = v139 + 4;
                v93 = v89 & 0x1FFFFFFFFFFFFFFCLL;
                do
                {
                  v94 = v91 - 4;
                  v151 = vld2q_f64(v94);
                  v153 = vld2q_f64(v91);
                  v95 = v92 - 4;
                  vst2q_f64(v95, v151);
                  vst2q_f64(v92, v153);
                  v91 += 8;
                  v92 += 8;
                  v93 -= 4;
                }
                while (v93);
                if (v89 != (v89 & 0x1FFFFFFFFFFFFFFCLL))
                {
                  v64 += v90 * 8;
                  goto LABEL_108;
                }
              }
            }
            v96 = (char *)v132;
            if (v78 == v65)
            {
              v75 = v141;
              v73 = 0;
            }
            else
            {
              v75 = v141;
              do
              {
                v97 = *(_OWORD *)v78;
                v78 += 16;
                *(_OWORD *)v96 = v97;
                v96 += 16;
              }
              while (v78 != v65);
              v73 = (char *)(v96 - (char *)v132);
            }
            goto LABEL_132;
          }
          if (v139)
          {
            operator delete(v139);
            v133 = 0;
          }
          if (v66 < 0)
            goto LABEL_167;
          v68 = v133 >> 3;
          if (v133 >> 3 <= v67)
            v68 = (v65 - v64) >> 4;
          if ((unint64_t)v133 >= 0x7FFFFFFFFFFFFFF0)
            v68 = 0xFFFFFFFFFFFFFFFLL;
          if (v68 >> 60)
            goto LABEL_167;
          v69 = 16 * v68;
          v46 = (char *)operator new(16 * v68);
          v70 = v46;
          if (v64 != v65)
          {
            v71 = ((v66 - 16) & 0xFFFFFFFFFFFFFFF0) + 16;
            v72 = v46;
            memcpy(v46, v64, v71);
            v46 = v72;
            v70 = &v72[v71];
          }
          v133 = (uint64_t)&v46[v69];
          v73 = (char *)(v70 - v46);
          v74 = (double *)v46;
          v75 = v141;
LABEL_132:
          v19 += v63;
          v132 = (double *)&v73[(_QWORD)v74];
          v45 = v75;
LABEL_133:
          v112 = v149;
          v139 = (double *)v46;
          if (v45 == v12)
          {
            v113 = v148;
            while (v112 != v113)
            {
              v114 = (void *)*((_QWORD *)v112 - 5);
              if (v114)
              {
                *((_QWORD *)v112 - 4) = v114;
                operator delete(v114);
              }
              v115 = (void *)*((_QWORD *)v112 - 8);
              if (v115)
              {
                *((_QWORD *)v112 - 7) = v115;
                operator delete(v115);
              }
              v112 -= 96;
            }
            v149 = v113;
            v140 = 1;
            v137 = v12;
          }
          else
          {
            v116 = (void *)*((_QWORD *)v149 - 5);
            if (v116)
            {
              *((_QWORD *)v149 - 4) = v116;
              operator delete(v116);
            }
            v137 = v45;
            v117 = (void *)*((_QWORD *)v112 - 8);
            if (v117)
            {
              *((_QWORD *)v112 - 7) = v117;
              operator delete(v117);
            }
            v149 = v112 - 96;
            v140 = 1;
          }
LABEL_17:
          v10 = v149;
          if (v148 == v149)
          {
            if ((v140 & 1) != 0)
            {
              v118 = *a4;
              *(_QWORD *)v118 = a2;
              *(_QWORD *)(v118 + 8) = a2 + v137;
              *(_BYTE *)(v118 + 16) = 1;
              v119 = v139;
              if (v19 != v135)
              {
                v120 = v135 + 16;
                v121 = 1;
                do
                {
                  v122 = v118 + 24 * v121;
                  *(_OWORD *)v122 = *((_OWORD *)v120 - 1);
                  v123 = *v120;
                  v120 += 24;
                  *(_BYTE *)(v122 + 16) = v123;
                  v22 = 0xAAAAAAAAAAAAAAABLL * ((v19 - v135) >> 3) > v121++;
                }
                while (v22);
              }
              v15 = 1;
              if (!v139)
              {
LABEL_155:
                if (v135)
                  operator delete(v135);
                goto LABEL_157;
              }
            }
            else
            {
              v15 = 0;
              v119 = v139;
              if (!v139)
                goto LABEL_155;
            }
            operator delete(v119);
            goto LABEL_155;
          }
          break;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_17;
        case 0xFFFFFC1F:
LABEL_28:
          v27 = v149;
          v28 = (void *)*((_QWORD *)v149 - 5);
          if (v28)
          {
            *((_QWORD *)v149 - 4) = v28;
            operator delete(v28);
          }
          v29 = (void *)*((_QWORD *)v27 - 8);
          if (v29)
          {
            *((_QWORD *)v27 - 7) = v29;
            operator delete(v29);
          }
          v149 = v27 - 96;
          goto LABEL_17;
        case 0xFFFFFC20:
          v30 = *((_OWORD *)v10 - 5);
          *(_OWORD *)v143 = *(_OWORD *)v25;
          *(_OWORD *)&v143[16] = v30;
          memset(&v143[32], 0, 24);
          v32 = (_BYTE *)*((_QWORD *)v10 - 8);
          v31 = (_BYTE *)*((_QWORD *)v10 - 7);
          v33 = v31 - v32;
          if (v31 == v32)
            goto LABEL_35;
          v136 = v19;
          if (0xAAAAAAAAAAAAAAABLL * (v33 >> 3) > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_167;
          v34 = (char *)operator new(v33);
          *(_QWORD *)&v143[32] = v34;
          *(_QWORD *)&v143[40] = v34;
          *(_QWORD *)&v143[48] = &v34[8 * (v33 >> 3)];
          v35 = 24 * ((v33 - 24) / 0x18uLL) + 24;
          memcpy(v34, v32, v35);
          *(_QWORD *)&v143[40] = &v34[v35];
          v19 = v136;
LABEL_35:
          __p[0] = 0;
          __p[1] = 0;
          *(_QWORD *)&v145[0] = 0;
          v37 = (_BYTE *)*((_QWORD *)v10 - 5);
          v36 = (_BYTE *)*((_QWORD *)v10 - 4);
          v38 = v36 - v37;
          if (v36 == v37)
            goto LABEL_38;
          if (v38 < 0)
            goto LABEL_167;
          v39 = (char *)operator new(v36 - v37);
          __p[0] = v39;
          __p[1] = v39;
          *(_QWORD *)&v145[0] = &v39[16 * (v38 >> 4)];
          v40 = v38 & 0xFFFFFFFFFFFFFFF0;
          memcpy(v39, v37, v40);
          __p[1] = &v39[v40];
LABEL_38:
          v41 = *(_QWORD *)v24;
          v21 = (char *)v145 + 8;
          *(_QWORD *)((char *)v145 + 13) = *(_QWORD *)(v24 + 5);
          *((_QWORD *)&v145[0] + 1) = v41;
          (*(void (**)(_QWORD, uint64_t, char *))(**(_QWORD **)v24 + 24))(*(_QWORD *)v24, 1, v25);
          (*(void (**)(_QWORD, _QWORD, _BYTE *))(**((_QWORD **)&v145[0] + 1) + 24))(*((_QWORD *)&v145[0] + 1), 0, v143);
          v42 = v149;
          if ((unint64_t)v149 >= v150)
          {
            v149 = sub_20ABD670C((void **)&v148, (uint64_t)v143);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            v43 = *(_OWORD *)&v143[16];
            *(_OWORD *)v149 = *(_OWORD *)v143;
            *((_OWORD *)v42 + 1) = v43;
            *((_QWORD *)v42 + 4) = 0;
            *((_QWORD *)v42 + 5) = 0;
            *((_QWORD *)v42 + 6) = 0;
            *((_QWORD *)v42 + 7) = 0;
            *((_OWORD *)v42 + 2) = *(_OWORD *)&v143[32];
            *((_QWORD *)v42 + 6) = *(_QWORD *)&v143[48];
            memset(&v143[32], 0, 24);
            *((_QWORD *)v42 + 8) = 0;
            *((_QWORD *)v42 + 9) = 0;
            *(_OWORD *)(v42 + 56) = *(_OWORD *)__p;
            *((_QWORD *)v42 + 9) = *(_QWORD *)&v145[0];
            __p[0] = 0;
            __p[1] = 0;
            *(_QWORD *)&v145[0] = 0;
            v44 = *((_QWORD *)&v145[0] + 1);
            *(_QWORD *)(v42 + 85) = *(_QWORD *)((char *)v145 + 13);
            *((_QWORD *)v42 + 10) = v44;
            v149 = v42 + 96;
          }
          if (*(_QWORD *)&v143[32])
          {
            *(_QWORD *)&v143[40] = *(_QWORD *)&v143[32];
            operator delete(*(void **)&v143[32]);
          }
          goto LABEL_17;
        default:
          v129 = (void **)sub_20ABD494C();
          return sub_20ABD670C(v129, v130);
      }
    }
  }
  v15 = 0;
LABEL_157:
  v124 = v148;
  if (v148)
  {
    for (j = v149; j != v124; j -= 96)
    {
      v126 = (void *)*((_QWORD *)j - 5);
      if (v126)
      {
        *((_QWORD *)j - 4) = v126;
        operator delete(v126);
      }
      v127 = (void *)*((_QWORD *)j - 8);
      if (v127)
      {
        *((_QWORD *)j - 7) = v127;
        operator delete(v127);
      }
    }
    operator delete(v124);
  }
  return (char *)v15;
}

char *sub_20ABD670C(void **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  __int128 v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  void *v22;
  void *v23;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5);
  v3 = v2 + 1;
  if (v2 + 1 > 0x2AAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) > v3)
    v3 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) >= 0x155555555555555)
    v6 = 0x2AAAAAAAAAAAAAALL;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL)
      sub_20ABAD09C();
    v7 = (char *)operator new(96 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = *(_OWORD *)(a2 + 16);
  v9 = &v7[96 * v2];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v8;
  v10 = &v7[96 * v6];
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v9 + 6) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(v9 + 85) = *(_QWORD *)(a2 + 85);
  v11 = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 80);
  *((_QWORD *)v9 + 9) = 0;
  *((_QWORD *)v9 + 10) = v12;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *((_QWORD *)v9 + 9) = v11;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v13 = v9 + 96;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v9;
    a1[1] = v13;
    a1[2] = v10;
  }
  else
  {
    v16 = 0;
    do
    {
      v17 = &v9[v16];
      v18 = &v15[v16];
      v19 = *(_OWORD *)&v15[v16 - 80];
      *((_OWORD *)v17 - 6) = *(_OWORD *)&v15[v16 - 96];
      *((_OWORD *)v17 - 5) = v19;
      *((_QWORD *)v17 - 7) = 0;
      *((_QWORD *)v17 - 6) = 0;
      *((_OWORD *)v17 - 4) = *(_OWORD *)&v15[v16 - 64];
      *((_QWORD *)v17 - 6) = *(_QWORD *)&v15[v16 - 48];
      *((_QWORD *)v18 - 8) = 0;
      *((_QWORD *)v18 - 7) = 0;
      *((_QWORD *)v18 - 6) = 0;
      *((_QWORD *)v17 - 4) = 0;
      *((_QWORD *)v17 - 3) = 0;
      *(_OWORD *)(v17 - 40) = *(_OWORD *)&v15[v16 - 40];
      *((_QWORD *)v17 - 3) = *(_QWORD *)&v15[v16 - 24];
      *((_QWORD *)v18 - 5) = 0;
      *((_QWORD *)v18 - 4) = 0;
      *((_QWORD *)v18 - 3) = 0;
      v20 = *(_QWORD *)&v15[v16 - 16];
      *(_QWORD *)(v17 - 11) = *(_QWORD *)&v15[v16 - 11];
      *((_QWORD *)v17 - 2) = v20;
      v16 -= 96;
    }
    while (&v15[v16] != v14);
    v15 = (char *)*a1;
    v21 = (char *)a1[1];
    *a1 = &v9[v16];
    a1[1] = v13;
    a1[2] = v10;
    while (v21 != v15)
    {
      v22 = (void *)*((_QWORD *)v21 - 5);
      if (v22)
      {
        *((_QWORD *)v21 - 4) = v22;
        operator delete(v22);
      }
      v23 = (void *)*((_QWORD *)v21 - 8);
      if (v23)
      {
        *((_QWORD *)v21 - 7) = v23;
        operator delete(v23);
      }
      v21 -= 96;
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

void sub_20ABD68D8(void **a1, unint64_t a2, __int128 *a3)
{
  _BYTE *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  __int128 v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  __int128 v22;

  v7 = (char *)a1[1];
  v6 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = &v7[24 * a2];
      v14 = 24 * a2;
      do
      {
        v15 = *a3;
        *((_QWORD *)v7 + 2) = *((_QWORD *)a3 + 2);
        *(_OWORD *)v7 = v15;
        v7 += 24;
        v14 -= 24;
      }
      while (v14);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)*a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v6 - (_BYTE *)*a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 > 0xAAAAAAAAAAAAAAALL)
        sub_20ABAD09C();
      v12 = (char *)operator new(24 * v11);
    }
    else
    {
      v12 = 0;
    }
    v16 = &v12[24 * v8];
    v17 = 24 * a2;
    v18 = &v16[24 * a2];
    v19 = v16;
    do
    {
      v20 = *a3;
      *((_QWORD *)v19 + 2) = *((_QWORD *)a3 + 2);
      *(_OWORD *)v19 = v20;
      v19 += 24;
      v17 -= 24;
    }
    while (v17);
    v21 = (char *)*a1;
    if (v7 != *a1)
    {
      do
      {
        v22 = *(_OWORD *)(v7 - 24);
        *((_QWORD *)v16 - 1) = *((_QWORD *)v7 - 1);
        *(_OWORD *)(v16 - 24) = v22;
        v16 -= 24;
        v7 -= 24;
      }
      while (v7 != v21);
      v7 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v18;
    a1[2] = &v12[24 * v11];
    if (v7)
      operator delete(v7);
  }
}

void sub_20ABD6A74(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;

  v5 = a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 4)
  {
    if (a2)
    {
      v12 = 16 * a2;
      bzero(a1[1], 16 * a2);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = (v5 - *a1) >> 4;
    v8 = v7 + a2;
    if ((v7 + a2) >> 60)
      abort();
    v9 = v4 - v6;
    if (v9 >> 3 > v8)
      v8 = v9 >> 3;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v10 = 0xFFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 60)
        sub_20ABAD09C();
      v11 = (char *)operator new(16 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[16 * v7];
    v14 = 16 * a2;
    v15 = &v11[16 * v10];
    bzero(v13, v14);
    v16 = &v13[v14];
    if (v5 != v6)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
        v13 -= 16;
        v5 -= 16;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v15;
    if (v5)
      operator delete(v5);
  }
}

void sub_20ABD6B98(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  void *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  BOOL v36;
  int64_t v37;
  unint64_t v38;
  char *v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int64_t v44;
  unint64_t v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  int64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  __int128 *v67;
  char *v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  __int128 *v75;
  _OWORD *v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  __int128 *v83;
  _OWORD *v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  void *v88;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x2A;
  v4 = v2 - 42;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_75:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v30 = (v5 - v9) >> 2;
      if (v5 == v9)
        v30 = 1;
      if (!(v30 >> 61))
      {
        v31 = v30 >> 2;
        v32 = 8 * v30;
        v33 = (char *)operator new(8 * v30);
        v34 = &v33[8 * v31];
        v35 = &v33[v32];
        v37 = v5 - v7;
        v36 = v5 == v7;
        v5 = v34;
        if (!v36)
        {
          v5 = &v34[v37 & 0xFFFFFFFFFFFFFFF8];
          v38 = v37 - 8;
          if ((unint64_t)(v37 - 8) >= 0x38)
          {
            v72 = &v33[8 * v31];
            v39 = v72;
            if ((unint64_t)(v72 - v7) >= 0x20)
            {
              v73 = (v38 >> 3) + 1;
              v74 = 8 * (v73 & 0x3FFFFFFFFFFFFFFCLL);
              v39 = &v34[v74];
              v75 = (__int128 *)(v6 + 3);
              v76 = v72 + 16;
              v77 = v73 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v78 = *v75;
                *(v76 - 1) = *(v75 - 1);
                *v76 = v78;
                v75 += 2;
                v76 += 2;
                v77 -= 4;
              }
              while (v77);
              if (v73 == (v73 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_73;
              v7 += v74;
            }
          }
          else
          {
            v39 = &v33[8 * v31];
          }
          do
          {
            v79 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v39 = v79;
            v39 += 8;
          }
          while (v39 != v5);
        }
        goto LABEL_73;
      }
LABEL_84:
      sub_20ABAD09C();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_75;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v88 = operator new(0xFC0uLL);
      sub_20ABD7264((char **)a1, &v88);
      return;
    }
    v88 = operator new(0xFC0uLL);
    sub_20ABD70C0((void **)a1, &v88);
    v40 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v40 + 1);
    v8 = *v40;
    *(_QWORD *)(a1 + 8) = v40 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_75;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v41 = (v5 - v9) >> 2;
      if (v5 == v9)
        v41 = 1;
      if (!(v41 >> 61))
      {
        v42 = v41 >> 2;
        v43 = 8 * v41;
        v33 = (char *)operator new(8 * v41);
        v34 = &v33[8 * v42];
        v35 = &v33[v43];
        v44 = v5 - v7;
        v36 = v5 == v7;
        v5 = v34;
        if (!v36)
        {
          v5 = &v34[v44 & 0xFFFFFFFFFFFFFFF8];
          v45 = v44 - 8;
          if ((unint64_t)(v44 - 8) >= 0x38)
          {
            v80 = &v33[8 * v42];
            v46 = v80;
            if ((unint64_t)(v80 - v7) >= 0x20)
            {
              v81 = (v45 >> 3) + 1;
              v82 = 8 * (v81 & 0x3FFFFFFFFFFFFFFCLL);
              v46 = &v34[v82];
              v83 = (__int128 *)(v40 + 3);
              v84 = v80 + 16;
              v85 = v81 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v86 = *v83;
                *(v84 - 1) = *(v83 - 1);
                *v84 = v86;
                v83 += 2;
                v84 += 2;
                v85 -= 4;
              }
              while (v85);
              if (v81 == (v81 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_73;
              v7 += v82;
            }
          }
          else
          {
            v46 = &v33[8 * v42];
          }
          do
          {
            v87 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v46 = v87;
            v46 += 8;
          }
          while (v46 != v5);
        }
LABEL_73:
        *(_QWORD *)a1 = v33;
        *(_QWORD *)(a1 + 8) = v34;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v35;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_75;
      }
      goto LABEL_84;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_84;
  v25 = (char *)operator new(8 * v24);
  v26 = &v25[8 * v21];
  v27 = &v25[8 * v24];
  v28 = operator new(0xFC0uLL);
  if (v21 == v24)
  {
    if (v20 < 1)
    {
      v47 = v20 >> 2;
      if (v18 == v19)
        v47 = 1;
      if (v47 >> 61)
        goto LABEL_84;
      v48 = 8 * v47;
      v26 = (char *)operator new(8 * v47);
      v27 = &v26[v48];
      operator delete(v25);
      v19 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v26;
    }
    else
    {
      v29 = v21 + 2;
      if (v21 >= -1)
        v29 = v21 + 1;
      v26 -= 8 * (v29 >> 1);
    }
  }
  *(_QWORD *)v26 = v28;
  v49 = v26 + 8;
  if (v18 != v19)
  {
    while (v26 != v25)
    {
      v53 = v26;
      v51 = v49;
LABEL_46:
      v54 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v53 - 1) = v54;
      v50 = v53 - 8;
      v49 = v51;
      v26 = v50;
      if (v18 == *(_QWORD *)(a1 + 8))
        goto LABEL_43;
    }
    if (v49 < v27)
    {
      v55 = (v27 - v49) >> 3;
      if (v55 >= -1)
        v56 = v55 + 1;
      else
        v56 = v55 + 2;
      v51 = &v49[8 * (v56 >> 1)];
      v53 = &v26[8 * (v56 >> 1)];
      if (v49 == v26)
      {
        v25 = v49;
      }
      else
      {
        memmove(&v26[8 * (v56 >> 1)], v26, v49 - v26);
        v25 = v26;
      }
      goto LABEL_46;
    }
    v57 = (v27 - v26) >> 2;
    if (v27 == v26)
      v57 = 1;
    if (v57 >> 61)
      goto LABEL_84;
    v58 = (v57 + 3) >> 2;
    v59 = 8 * v57;
    v60 = (char *)operator new(8 * v57);
    v25 = v60;
    v53 = &v60[8 * v58];
    v51 = v53;
    v61 = v49 - v26;
    if (v49 != v26)
    {
      v51 = &v53[v61 & 0xFFFFFFFFFFFFFFF8];
      v62 = v61 - 8;
      v63 = &v60[8 * v58];
      v64 = v26;
      if (v62 >= 0x38)
      {
        v63 = &v60[8 * v58];
        v64 = v26;
        if ((unint64_t)(v63 - v26) >= 0x20)
        {
          v65 = (v62 >> 3) + 1;
          v66 = 8 * (v65 & 0x3FFFFFFFFFFFFFFCLL);
          v63 = &v53[v66];
          v67 = (__int128 *)(v26 + 16);
          v68 = &v60[8 * v58 + 16];
          v69 = v65 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v70 = *v67;
            *((_OWORD *)v68 - 1) = *(v67 - 1);
            *(_OWORD *)v68 = v70;
            v67 += 2;
            v68 += 32;
            v69 -= 4;
          }
          while (v69);
          if (v65 == (v65 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_65;
          v64 = &v26[v66];
        }
      }
      do
      {
        v71 = *(_QWORD *)v64;
        v64 += 8;
        *(_QWORD *)v63 = v71;
        v63 += 8;
      }
      while (v63 != v51);
    }
LABEL_65:
    v27 = &v60[v59];
    operator delete(v26);
    goto LABEL_46;
  }
  v50 = v26;
  v51 = v26 + 8;
LABEL_43:
  v52 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v50;
  *(_QWORD *)(a1 + 16) = v51;
  *(_QWORD *)(a1 + 24) = v27;
  if (v52)
    operator delete(v52);
}

void sub_20ABD70C0(void **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 *v27;
  _OWORD *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;

  v4 = (char *)a1[1];
  if (v4 != *a1)
  {
    v5 = (char *)a1[1];
    goto LABEL_25;
  }
  v7 = a1[2];
  v6 = a1[3];
  if (v7 >= v6)
  {
    v13 = v6 - v4;
    v12 = v13 == 0;
    v14 = v13 >> 2;
    if (v12)
      v14 = 1;
    if (v14 >> 61)
      sub_20ABAD09C();
    v15 = (v14 + 3) >> 2;
    v16 = 8 * v14;
    v17 = (char *)operator new(8 * v14);
    v5 = &v17[8 * v15];
    v18 = &v17[v16];
    v19 = v5;
    v20 = v7 - v4;
    if (v7 != v4)
    {
      v19 = &v5[v20 & 0xFFFFFFFFFFFFFFF8];
      v21 = v20 - 8;
      v22 = &v17[8 * v15];
      v23 = v4;
      if (v21 > 0x37)
      {
        v24 = &v17[8 * v15];
        v22 = v24;
        v23 = v4;
        if ((unint64_t)(v24 - v4) >= 0x20)
        {
          v25 = (v21 >> 3) + 1;
          v26 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
          v22 = &v5[v26];
          v27 = (__int128 *)(v4 + 16);
          v28 = v24 + 16;
          v29 = v25 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v30 = *v27;
            *(v28 - 1) = *(v27 - 1);
            *v28 = v30;
            v27 += 2;
            v28 += 2;
            v29 -= 4;
          }
          while (v29);
          if (v25 == (v25 & 0x3FFFFFFFFFFFFFFCLL))
          {
            *a1 = v17;
            a1[1] = v5;
            a1[2] = v19;
            a1[3] = v18;
            goto LABEL_24;
          }
          v23 = &v4[v26];
        }
      }
      do
      {
        v31 = *(_QWORD *)v23;
        v23 += 8;
        *(_QWORD *)v22 = v31;
        v22 += 8;
      }
      while (v22 != v19);
    }
    *a1 = v17;
    a1[1] = v5;
    a1[2] = v19;
    a1[3] = v18;
    if (!v4)
      goto LABEL_25;
LABEL_24:
    operator delete(v4);
    v5 = (char *)a1[1];
    goto LABEL_25;
  }
  v8 = (v6 - v7) >> 3;
  if (v8 >= -1)
    v9 = v8 + 1;
  else
    v9 = v8 + 2;
  v10 = v9 >> 1;
  v11 = &v7[8 * (v9 >> 1)];
  v5 = &v11[-(v7 - v4)];
  if (v7 != v4)
  {
    memmove(&v11[-(v7 - v4)], v4, v7 - v4);
    v4 = (char *)a1[2];
  }
  a1[1] = v5;
  a1[2] = &v4[8 * v10];
LABEL_25:
  *((_QWORD *)v5 - 1) = *a2;
  a1[1] = (char *)a1[1] - 8;
}

void sub_20ABD7264(char **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  BOOL v19;
  int64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  _OWORD *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;

  v4 = a1[2];
  if (v4 != a1[3])
    goto LABEL_23;
  v6 = *a1;
  v5 = a1[1];
  if (v5 > *a1)
  {
    v7 = (v5 - *a1) >> 3;
    if (v7 >= -1)
      v8 = v7 + 1;
    else
      v8 = v7 + 2;
    v9 = v8 >> 1;
    v10 = -v9;
    v11 = &v5[-8 * v9];
    v12 = v4 - v5;
    if (v4 != v5)
    {
      memmove(&v5[-8 * v9], a1[1], v4 - v5);
      v4 = a1[1];
    }
    v13 = &v4[8 * v10];
    v4 = &v11[v12];
    a1[1] = v13;
    a1[2] = &v11[v12];
    goto LABEL_23;
  }
  v14 = (v4 - v6) >> 2;
  if (v4 == v6)
    v14 = 1;
  if (v14 >> 61)
    sub_20ABAD09C();
  v15 = v14 >> 2;
  v16 = 8 * v14;
  v17 = (char *)operator new(8 * v14);
  v18 = &v17[8 * v15];
  v20 = v4 - v5;
  v19 = v4 == v5;
  v4 = v18;
  if (!v19)
  {
    v4 = &v18[v20 & 0xFFFFFFFFFFFFFFF8];
    v21 = v20 - 8;
    if ((unint64_t)(v20 - 8) < 0x38)
    {
      v22 = &v17[8 * v15];
      goto LABEL_20;
    }
    v23 = &v17[8 * v15];
    v22 = v23;
    if ((unint64_t)(v23 - v5) < 0x20)
    {
      do
      {
LABEL_20:
        v30 = *(_QWORD *)v5;
        v5 += 8;
        *(_QWORD *)v22 = v30;
        v22 += 8;
      }
      while (v22 != v4);
      goto LABEL_21;
    }
    v24 = (v21 >> 3) + 1;
    v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    v22 = &v18[v25];
    v26 = (__int128 *)(v5 + 16);
    v27 = v23 + 16;
    v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v29 = *v26;
      *(v27 - 1) = *(v26 - 1);
      *v27 = v29;
      v26 += 2;
      v27 += 2;
      v28 -= 4;
    }
    while (v28);
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
    {
      v5 += v25;
      goto LABEL_20;
    }
  }
LABEL_21:
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v4;
  a1[3] = &v17[v16];
  if (v6)
  {
    operator delete(v6);
    v4 = a1[2];
  }
LABEL_23:
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

uint64_t sub_20ABD73EC(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  char *v4;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v3 = a2;
  if (a2 == a3)
    return (uint64_t)a2;
  v4 = (char *)a3;
  if (*a2 == 94)
  {
    v6 = operator new();
    v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)v6 = &off_24C380328;
    *(_QWORD *)(v6 + 8) = v9;
    *(_BYTE *)(v6 + 16) = v7;
    *(_QWORD *)(v8 + 8) = v6;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    ++v3;
  }
  if (v3 != (unsigned __int8 *)v4)
  {
    while (v3 != (unsigned __int8 *)v4)
    {
      v10 = (char *)v3;
      v11 = *(_QWORD *)(a1 + 56);
      v12 = *(_DWORD *)(a1 + 28);
      v13 = sub_20ABDCAF0(a1, v10, v4);
      if (v13 != (unsigned __int8 *)v10)
      {
        v3 = sub_20ABDCDC8(a1, v13, (unsigned __int8 *)v4, v11, v12 + 1, *(_DWORD *)(a1 + 28) + 1);
        if (v3 != (unsigned __int8 *)v10)
          continue;
      }
      if (v10 + 1 == v4 && *v10 == 36)
      {
        v14 = operator new();
        v15 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
        v16 = *(_QWORD *)(a1 + 56);
        v17 = *(_QWORD *)(v16 + 8);
        *(_QWORD *)v14 = &off_24C380388;
        *(_QWORD *)(v14 + 8) = v17;
        *(_BYTE *)(v14 + 16) = v15;
        *(_QWORD *)(v16 + 8) = v14;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        return (uint64_t)v4;
      }
      v19 = sub_20ABD494C();
      return sub_20ABD7568(v19);
    }
  }
  return (uint64_t)v4;
}

char *sub_20ABD7568(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v19;
  char *v20;
  char *v21;

  v3 = a3;
  v6 = *(_QWORD *)(a1 + 56);
  v7 = sub_20ABD76F8(a1, a2, a3);
  if (v7 == a2)
    goto LABEL_13;
  do
  {
    v8 = v7;
    v7 = sub_20ABD76F8(a1, v7, v3);
  }
  while (v7 != v8);
  if (v8 == a2)
  {
LABEL_13:
    v19 = sub_20ABD494C();
    return sub_20ABD76F8(v19, v20, v21);
  }
  else
  {
    if (v8 != v3)
    {
      while (*v8 == 124)
      {
        v9 = *(_QWORD *)(a1 + 56);
        v10 = v8 + 1;
        v11 = sub_20ABD76F8(a1, v8 + 1, v3);
        if (v11 == v8 + 1)
          goto LABEL_13;
        do
        {
          v8 = v11;
          v11 = sub_20ABD76F8(a1, v11, v3);
        }
        while (v11 != v8);
        if (v8 == v10)
          goto LABEL_13;
        v12 = (_QWORD *)operator new();
        v13 = *(_QWORD *)(v9 + 8);
        v12[1] = *(_QWORD *)(v6 + 8);
        v12[2] = v13;
        *v12 = &off_24C380088;
        *(_QWORD *)(v6 + 8) = v12;
        *(_QWORD *)(v9 + 8) = 0;
        v14 = (_QWORD *)operator new();
        v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        *v14 = &off_24C380178;
        v14[1] = v15;
        *(_QWORD *)(v9 + 8) = v14;
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
        v16 = (_QWORD *)operator new();
        v17 = *(_QWORD *)(v9 + 8);
        *v16 = &unk_24C380620;
        v16[1] = v17;
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v16;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(v9 + 8);
        if (v8 == v3)
          return v3;
      }
      return v8;
    }
    return v3;
  }
}

char *sub_20ABD76F8(uint64_t a1, char *a2, char *a3)
{
  uint64_t v6;
  int v7;
  char *v8;
  int v9;
  signed __int8 v10;
  char *v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (**v22)();
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  char *v34;
  char *v35;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 28);
  if (a2 != a3)
  {
    switch(*a2)
    {
      case '$':
      case '(':
      case '*':
      case '+':
      case '.':
      case '?':
      case '[':
      case '\\':
      case '^':
      case '{':
      case '|':
        goto LABEL_3;
      case ')':
        if (!*(_DWORD *)(a1 + 36))
          goto LABEL_8;
LABEL_3:
        v8 = a2 + 1;
        if (a2 + 1 == a3)
        {
LABEL_15:
          v9 = *a2;
        }
        else
        {
          v9 = *a2;
          if (v9 == 92)
          {
            v10 = *v8;
            switch(*v8)
            {
              case '$':
              case '(':
              case ')':
              case '*':
              case '+':
              case '.':
              case '?':
              case '[':
              case '\\':
              case '^':
              case '{':
              case '|':
              case '}':
                sub_20ABDAEF0(a1, v10);
                v11 = a2 + 2;
                return sub_20ABD8834(a1, v11, a3, v6, v7 + 1, *(_DWORD *)(a1 + 28) + 1);
              default:
                if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
                {
                  v11 = sub_20ABDA698(a1, v8, a3, 0);
                }
                else
                {
                  v12 = sub_20ABDC57C(a1, v10);
                  v13 = 2;
                  if (!v12)
                    v13 = 0;
                  v11 = &a2[v13];
                }
                if (v11 == a2)
                  goto LABEL_15;
                goto LABEL_19;
            }
          }
        }
        if (v9 != 46)
          goto LABEL_18;
        v14 = (_QWORD *)operator new();
        v15 = *(_QWORD *)(a1 + 56);
        v16 = *(_QWORD *)(v15 + 8);
        *v14 = &off_24C380118;
        v14[1] = v16;
        *(_QWORD *)(v15 + 8) = v14;
        break;
      default:
LABEL_8:
        sub_20ABDAEF0(a1, *a2);
        v11 = a2 + 1;
        return sub_20ABD8834(a1, v11, a3, v6, v7 + 1, *(_DWORD *)(a1 + 28) + 1);
    }
    goto LABEL_27;
  }
LABEL_18:
  v11 = (char *)sub_20ABD7A74(a1, a2, a3);
LABEL_19:
  if (v11 != a2 || v11 == a3)
    goto LABEL_36;
  v17 = *a2;
  if (v17 == 36)
  {
    v18 = operator new();
    v19 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v20 = *(_QWORD *)(a1 + 56);
    v21 = *(_QWORD *)(v20 + 8);
    v22 = &off_24C380388;
    goto LABEL_26;
  }
  if (v17 != 40)
  {
    if (v17 == 94)
    {
      v18 = operator new();
      v19 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v20 = *(_QWORD *)(a1 + 56);
      v21 = *(_QWORD *)(v20 + 8);
      v22 = &off_24C380328;
LABEL_26:
      *(_QWORD *)v18 = v22;
      *(_QWORD *)(v18 + 8) = v21;
      *(_BYTE *)(v18 + 16) = v19;
      *(_QWORD *)(v20 + 8) = v18;
LABEL_27:
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v11 = a2 + 1;
      return sub_20ABD8834(a1, v11, a3, v6, v7 + 1, *(_DWORD *)(a1 + 28) + 1);
    }
    return a2;
  }
  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
  {
    v24 = *(_DWORD *)(a1 + 28);
  }
  else
  {
    v23 = operator new();
    v24 = *(_DWORD *)(a1 + 28) + 1;
    *(_DWORD *)(a1 + 28) = v24;
    v25 = *(_QWORD *)(a1 + 56);
    v26 = *(_QWORD *)(v25 + 8);
    *(_QWORD *)v23 = &off_24C3806B0;
    *(_QWORD *)(v23 + 8) = v26;
    *(_DWORD *)(v23 + 16) = v24;
    *(_QWORD *)(v25 + 8) = v23;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  }
  ++*(_DWORD *)(a1 + 36);
  v27 = (char *)sub_20ABD7568(a1);
  if (v27 != a3)
  {
    v28 = v27;
    if (*v27 == 41)
    {
      if ((*(_BYTE *)(a1 + 24) & 2) == 0)
      {
        v29 = operator new();
        v30 = *(_QWORD *)(a1 + 56);
        v31 = *(_QWORD *)(v30 + 8);
        *(_QWORD *)v29 = &off_24C380680;
        *(_QWORD *)(v29 + 8) = v31;
        *(_DWORD *)(v29 + 16) = v24;
        *(_QWORD *)(v30 + 8) = v29;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      }
      --*(_DWORD *)(a1 + 36);
      v11 = v28 + 1;
LABEL_36:
      if (v11 != a2)
        return sub_20ABD8834(a1, v11, a3, v6, v7 + 1, *(_DWORD *)(a1 + 28) + 1);
      return a2;
    }
  }
  v33 = sub_20ABD494C();
  return (char *)sub_20ABD7A74(v33, v34, v35);
}

uint64_t sub_20ABD7A74(uint64_t a1, char *a2, char *a3)
{
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  int v12;
  int v13;
  char *j;
  char *v15;
  int v16;
  char *v17;
  char *v18;
  char *v19;
  char *i;
  int v21;
  char *k;
  std::string::size_type v23;
  std::string *v24;
  std::string::size_type size;
  char *v26;
  char *v27;
  std::string::size_type v28;
  int v29;
  std::string *v30;
  int v31;
  unsigned __int8 v32;
  std::string *p_p;
  _BYTE *v34;
  int v35;
  int v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  std::string::size_type v40;
  std::string *v41;
  std::string *v42;
  std::regex_traits<char>::char_class_type classname;
  int64_t v44;
  char *v45;
  char *m;
  int v47;
  char *v48;
  std::string *v49;
  std::string *p_dst;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  std::string::size_type *v55;
  _OWORD *v56;
  uint64_t v57;
  __int128 v58;
  std::string::value_type v59;
  std::string::size_type v60;
  std::string *v61;
  std::string::size_type v62;
  std::string *p_src;
  std::string::size_type v64;
  unint64_t v65;
  __int128 v66;
  std::string::size_type v67;
  std::string *v68;
  std::string *v69;
  std::string::size_type v70;
  std::string::size_type n;
  std::string::value_type v72;
  std::string *v73;
  std::string *v74;
  std::string::size_type ii;
  std::string::value_type v76;
  std::string *v77;
  std::string *v78;
  std::string::size_type v79;
  std::string::size_type v80;
  std::string *v81;
  std::string::value_type v82;
  std::string *v83;
  std::string *v84;
  std::string::value_type v85;
  std::string *v86;
  std::string *v87;
  std::string::size_type jj;
  std::string::size_type kk;
  std::string::size_type v90;
  std::string *v91;
  std::string::size_type v92;
  std::string *v93;
  std::string *v94;
  char *v95;
  int v96;
  void *v97;
  char *v98;
  int v99;
  uint64_t v101;
  void **v102;
  uint64_t v103;
  char *v104;
  std::string v105;
  std::string v106;
  std::string v107;
  std::string __p;
  std::string __src;
  std::string v110;
  std::string __dst;
  std::string v112;

  if (a2 == a3 || *a2 != 91)
    return (uint64_t)a2;
  if (a2 + 1 == a3)
    goto LABEL_285;
  v5 = a2[1];
  v6 = v5 == 94;
  v7 = (uint64_t)(v5 == 94 ? a2 + 2 : a2 + 1);
  v8 = operator new();
  v9 = sub_20ABD9A14(v8, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), v6, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v9;
  *(_QWORD *)(a1 + 56) = v9;
  if ((char *)v7 == a3)
    goto LABEL_285;
  if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *(_BYTE *)v7 == 93)
  {
    sub_20ABD9B1C(v8, 93);
    ++v7;
  }
  if ((char *)v7 == a3)
    goto LABEL_285;
  v103 = v8 + 16;
  v104 = a3 - 4;
  v102 = (void **)(v8 + 88);
LABEL_16:
  v10 = (char *)v7;
  v11 = a3;
  if ((char *)v7 == a3)
    goto LABEL_14;
  v12 = *(unsigned __int8 *)v7;
  v11 = (char *)v7;
  if (v12 == 93)
    goto LABEL_14;
  v11 = (char *)(v7 + 1);
  memset(&__p, 0, sizeof(__p));
  if ((char *)(v7 + 1) != a3 && v12 == 91)
  {
    v13 = *v11;
    if (v13 == 46)
    {
      if ((uint64_t)&a3[-v7 - 2] < 2)
        goto LABEL_285;
      v18 = &v104[-v7];
      v19 = (char *)(v7 + 2);
      for (i = (char *)(v7 + 2); ; v19 = i)
      {
        v21 = *i++;
        if (v21 == 46 && *i == 93)
          break;
        if (!v18)
          goto LABEL_285;
        --v18;
      }
      if (v19 == a3)
        goto LABEL_285;
      sub_20ABD9F40((uint64_t)&__dst, a1, (_BYTE *)(v7 + 2), v19);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p = __dst;
      size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = __p.__r_.__value_.__l.__size_;
      if (size - 1 >= 2)
        goto LABEL_286;
      v11 = v19 + 2;
      v7 = *(_DWORD *)(a1 + 24) & 0x1F0;
      if (v19 + 2 != a3)
        goto LABEL_67;
      goto LABEL_68;
    }
    if (v13 != 58)
    {
      if (v13 == 61)
      {
        if ((uint64_t)&a3[-v7 - 2] < 2)
          goto LABEL_285;
        for (j = 0; ; ++j)
        {
          v15 = &j[v7 + 2];
          if (*v15 == 61 && j[v7 + 3] == 93)
            break;
          if (&v104[-v7] == j)
            goto LABEL_285;
        }
        if (v15 == a3)
          goto LABEL_285;
        sub_20ABD9F40((uint64_t)&v110, a1, (_BYTE *)(v7 + 2), &j[v7 + 2]);
        if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
        {
          v23 = v110.__r_.__value_.__l.__size_;
          if (v110.__r_.__value_.__l.__size_)
          {
            if (v110.__r_.__value_.__l.__size_ > 0x7FFFFFFFFFFFFFF7)
              goto LABEL_287;
            v24 = (std::string *)v110.__r_.__value_.__r.__words[0];
LABEL_118:
            v49 = (std::string *)((char *)v24 + v23);
            if (v23 > 0x16)
            {
              v51 = (v23 & 0x7FFFFFFFFFFFFFF8) + 8;
              if ((v23 | 7) != 0x17)
                v51 = v23 | 7;
              v52 = v51 + 1;
              v53 = (char *)operator new(v51 + 1);
              __dst.__r_.__value_.__l.__size_ = v23;
              __dst.__r_.__value_.__r.__words[2] = v52 | 0x8000000000000000;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v53;
              if (v23 < 0x20)
              {
                p_dst = (std::string *)v53;
              }
              else if ((unint64_t)(v53 - (char *)v24) < 0x20)
              {
                p_dst = (std::string *)v53;
              }
              else
              {
                v54 = v23 & 0x7FFFFFFFFFFFFFE0;
                p_dst = (std::string *)&v53[v23 & 0x7FFFFFFFFFFFFFE0];
                v55 = &v24->__r_.__value_.__r.__words[2];
                v56 = v53 + 16;
                v57 = v23 & 0x7FFFFFFFFFFFFFE0;
                do
                {
                  v58 = *(_OWORD *)v55;
                  *(v56 - 1) = *((_OWORD *)v55 - 1);
                  *v56 = v58;
                  v55 += 4;
                  v56 += 2;
                  v57 -= 32;
                }
                while (v57);
                if (v23 == v54)
                  goto LABEL_133;
                v24 = (std::string *)((char *)v24 + v54);
              }
            }
            else
            {
              *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v23;
              p_dst = &__dst;
            }
            do
            {
              v59 = v24->__r_.__value_.__s.__data_[0];
              v24 = (std::string *)((char *)v24 + 1);
              p_dst->__r_.__value_.__s.__data_[0] = v59;
              p_dst = (std::string *)((char *)p_dst + 1);
            }
            while (v24 != v49);
LABEL_133:
            p_dst->__r_.__value_.__s.__data_[0] = 0;
            v60 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v61 = &__dst;
            else
              v61 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v60 = __dst.__r_.__value_.__l.__size_;
            (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, char *))(**(_QWORD **)(a1 + 16)
                                                                                             + 32))(&__src, *(_QWORD *)(a1 + 16), v61, (char *)v61 + v60);
            v62 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
            if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v62 = __src.__r_.__value_.__l.__size_;
            if (v62 != 1)
            {
              if (v62 == 12)
              {
                p_src = &__src;
                if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  p_src = (std::string *)__src.__r_.__value_.__r.__words[0];
                p_src->__r_.__value_.__s.__data_[11] = p_src->__r_.__value_.__s.__data_[3];
                if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_149;
LABEL_145:
                operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_149:
                v64 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
                if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v64 = __src.__r_.__value_.__l.__size_;
                if (v64)
                {
                  v65 = *(_QWORD *)(v8 + 144);
                  if (v65 >= *(_QWORD *)(v8 + 152))
                  {
                    *(_QWORD *)(v8 + 144) = sub_20ABDB5B4(v8 + 136, (uint64_t)&__src);
                    if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
LABEL_174:
                      if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v110.__r_.__value_.__l.__data_);
                      v36 = 0;
                      v7 = (uint64_t)(v15 + 2);
LABEL_177:
                      v37 = v10;
                      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                        goto LABEL_178;
                      goto LABEL_84;
                    }
                  }
                  else
                  {
                    if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
                    {
                      sub_20AB88C14(*(_BYTE **)(v8 + 144), __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
                    }
                    else
                    {
                      v66 = *(_OWORD *)&__src.__r_.__value_.__l.__data_;
                      *(_QWORD *)(v65 + 16) = *((_QWORD *)&__src.__r_.__value_.__l + 2);
                      *(_OWORD *)v65 = v66;
                    }
                    *(_QWORD *)(v8 + 144) = v65 + 24;
                    if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      goto LABEL_174;
                  }
LABEL_173:
                  operator delete(__src.__r_.__value_.__l.__data_);
                  goto LABEL_174;
                }
                v67 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
                if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v67 = v110.__r_.__value_.__l.__size_;
                if (v67 == 2)
                {
                  v69 = &v110;
                  if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v69 = (std::string *)v110.__r_.__value_.__r.__words[0];
                  sub_20ABDA844(v8, v69->__r_.__value_.__s.__data_[0], v69->__r_.__value_.__s.__data_[1]);
                  if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_174;
                  goto LABEL_173;
                }
                if (v67 == 1)
                {
                  v68 = &v110;
                  if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v68 = (std::string *)v110.__r_.__value_.__r.__words[0];
                  sub_20ABD9B1C(v8, v68->__r_.__value_.__s.__data_[0]);
                  if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_174;
                  goto LABEL_173;
                }
                goto LABEL_286;
              }
              if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
              {
                *__src.__r_.__value_.__l.__data_ = 0;
                __src.__r_.__value_.__l.__size_ = 0;
                if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_149;
                goto LABEL_145;
              }
              __src.__r_.__value_.__s.__data_[0] = 0;
              *((_BYTE *)&__src.__r_.__value_.__s + 23) = 0;
            }
            if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_149;
            goto LABEL_145;
          }
        }
        else
        {
          v23 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
          if (*((_BYTE *)&v110.__r_.__value_.__s + 23))
          {
            v24 = &v110;
            goto LABEL_118;
          }
        }
LABEL_286:
        sub_20ABD494C();
LABEL_287:
        abort();
      }
      goto LABEL_29;
    }
    if ((uint64_t)&a3[-v7 - 2] < 2)
      goto LABEL_285;
    for (k = 0; k[v7 + 2] != 58 || k[v7 + 3] != 93; ++k)
    {
      if (&v104[-v7] == k)
        goto LABEL_285;
    }
    v26 = k + 2;
    v27 = &v26[v7];
    if (&v26[v7] == a3)
      goto LABEL_285;
    v28 = (std::string::size_type)(v26 - 2);
    if ((unint64_t)(v26 - 2) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_287;
    v29 = *(_DWORD *)(a1 + 24);
    if (v28 >= 0x17)
    {
      v38 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v28 | 7) != 0x17)
        v38 = v28 | 7;
      v39 = v38 + 1;
      v30 = (std::string *)operator new(v38 + 1);
      __dst.__r_.__value_.__l.__size_ = v28;
      __dst.__r_.__value_.__r.__words[2] = v39 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = (_BYTE)v26 - 2;
      v30 = &__dst;
      if (v26 == (char *)2)
        goto LABEL_90;
    }
    memcpy(v30, v10 + 2, v28);
    v30 = (std::string *)((char *)v30 + v28);
LABEL_90:
    v30->__r_.__value_.__s.__data_[0] = 0;
    v40 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v41 = &__dst;
    else
      v41 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v40 = __dst.__r_.__value_.__l.__size_;
    (*(void (**)(_QWORD, std::string *, char *))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), v41, (char *)v41 + v40);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v42 = &__dst;
    else
      v42 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    classname = std::__get_classname((const char *)v42, v29 & 1);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    if (classname)
    {
      v36 = 0;
      *(_DWORD *)(v8 + 160) |= classname;
      v7 = (uint64_t)(v27 + 2);
      goto LABEL_177;
    }
    sub_20ABD494C();
    goto LABEL_289;
  }
LABEL_29:
  v7 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if ((*(_DWORD *)(a1 + 24) & 0x1B0 | 0x40) != 0x40)
  {
    LOBYTE(v16) = *v10;
LABEL_34:
    std::string::operator=(&__p, v16);
    if (v11 != a3)
      goto LABEL_67;
LABEL_68:
    v32 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      if (__p.__r_.__value_.__l.__size_)
      {
        if (__p.__r_.__value_.__l.__size_ != 1)
        {
LABEL_71:
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
LABEL_78:
          sub_20ABDA844(v8, p_p->__r_.__value_.__s.__data_[0], p_p->__r_.__value_.__s.__data_[1]);
          goto LABEL_83;
        }
        goto LABEL_81;
      }
      goto LABEL_13;
    }
    goto LABEL_76;
  }
  v16 = *v10;
  if (v16 != 92)
    goto LABEL_34;
  if ((*(_DWORD *)(a1 + 24) & 0x1F0) != 0)
    v17 = sub_20ABDA698(a1, v10 + 1, a3, &__p);
  else
    v17 = sub_20ABDA134(a1, (unsigned __int8 *)v10 + 1, (unsigned __int8 *)a3, &__p, v8);
  v11 = v17;
  if (v17 == a3)
    goto LABEL_68;
LABEL_67:
  v31 = *v11;
  if (v31 == 93)
    goto LABEL_68;
  v34 = v11 + 1;
  if (v11 + 1 == a3 || v31 != 45 || *v34 == 93)
  {
    v32 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      if (__p.__r_.__value_.__l.__size_)
      {
        if (__p.__r_.__value_.__l.__size_ != 1)
          goto LABEL_71;
LABEL_81:
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        goto LABEL_82;
      }
LABEL_13:
      operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_14;
    }
LABEL_76:
    v35 = v32;
    if (!v32)
      goto LABEL_14;
    p_p = &__p;
    if (v35 != 1)
      goto LABEL_78;
LABEL_82:
    sub_20ABD9B1C(v8, p_p->__r_.__value_.__s.__data_[0]);
LABEL_83:
    v36 = 1;
    v37 = v11;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_178;
    goto LABEL_84;
  }
  memset(&v107, 0, sizeof(v107));
  v37 = v11 + 2;
  if (v11 + 2 != a3 && *v34 == 91 && *v37 == 46)
  {
    v7 = (uint64_t)&v106;
    if (a3 - (v11 + 3) < 2)
      goto LABEL_285;
    v44 = a3 - 5 - v11;
    v45 = v11 + 3;
    for (m = v11 + 3; ; v45 = m)
    {
      v47 = *m++;
      if (v47 == 46 && *m == 93)
        break;
      if (!v44)
        goto LABEL_285;
      --v44;
    }
    if (v45 != a3)
    {
      sub_20ABD9F40((uint64_t)&__dst, a1, v11 + 3, v45);
      if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v107.__r_.__value_.__l.__data_);
      v107 = __dst;
      v70 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v70 = v107.__r_.__value_.__l.__size_;
      if (v70 - 1 >= 2)
        goto LABEL_286;
      v37 = v45 + 2;
      goto LABEL_190;
    }
LABEL_285:
    sub_20ABD494C();
    goto LABEL_286;
  }
  if ((v7 | 0x40) == 0x40)
  {
    LODWORD(v34) = *v34;
    if ((_DWORD)v34 == 92)
    {
      if ((_DWORD)v7)
        v48 = sub_20ABDA698(a1, v37, a3, &v107);
      else
        v48 = sub_20ABDA134(a1, (unsigned __int8 *)v37, (unsigned __int8 *)a3, &v107, v8);
      v37 = v48;
      goto LABEL_189;
    }
  }
  else
  {
    LOBYTE(v34) = *v34;
  }
  std::string::operator=(&v107, (std::string::value_type)v34);
LABEL_189:
  v7 = (uint64_t)&v106;
LABEL_190:
  v106 = __p;
  memset(&__p, 0, sizeof(__p));
  v105 = v107;
  memset(&v107, 0, sizeof(v107));
  if (*(_BYTE *)(v8 + 170))
  {
    if (*(_BYTE *)(v8 + 169))
    {
      for (n = 0; ; ++n)
      {
        if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
        {
          if (n >= v106.__r_.__value_.__l.__size_)
          {
LABEL_202:
            for (ii = 0; ; ++ii)
            {
              if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
              {
                if (ii >= v105.__r_.__value_.__l.__size_)
                  goto LABEL_243;
                v78 = (std::string *)v105.__r_.__value_.__r.__words[0];
              }
              else
              {
                if (ii >= HIBYTE(v105.__r_.__value_.__r.__words[2]))
                  goto LABEL_243;
                v78 = &v105;
              }
              v76 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v8 + 24) + 40))(*(_QWORD *)(v8 + 24), v78->__r_.__value_.__s.__data_[ii]);
              v77 = &v105;
              if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v77 = (std::string *)v105.__r_.__value_.__r.__words[0];
              v77->__r_.__value_.__s.__data_[ii] = v76;
            }
          }
          v74 = (std::string *)v106.__r_.__value_.__r.__words[0];
        }
        else
        {
          if (n >= HIBYTE(v106.__r_.__value_.__r.__words[2]))
            goto LABEL_202;
          v74 = &v106;
        }
        v72 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v8 + 24) + 40))(*(_QWORD *)(v8 + 24), v74->__r_.__value_.__s.__data_[n]);
        if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v73 = &v106;
        else
          v73 = (std::string *)v106.__r_.__value_.__r.__words[0];
        v73->__r_.__value_.__s.__data_[n] = v72;
      }
    }
    for (jj = 0; ; ++jj)
    {
      if ((*((_BYTE *)&v106.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        if (jj >= v106.__r_.__value_.__l.__size_)
          goto LABEL_238;
      }
      else if (jj >= HIBYTE(v106.__r_.__value_.__r.__words[2]))
      {
LABEL_238:
        for (kk = 0; ; ++kk)
        {
          if ((*((_BYTE *)&v105.__r_.__value_.__s + 23) & 0x80) != 0)
          {
            if (kk >= v105.__r_.__value_.__l.__size_)
              goto LABEL_243;
          }
          else if (kk >= HIBYTE(v105.__r_.__value_.__r.__words[2]))
          {
LABEL_243:
            v90 = HIBYTE(v106.__r_.__value_.__r.__words[2]);
            if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v91 = &v106;
            else
              v91 = (std::string *)v106.__r_.__value_.__r.__words[0];
            if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v90 = v106.__r_.__value_.__l.__size_;
            sub_20ABDABFC((uint64_t)&v110, v103, (char *)v91, (char *)v91 + v90);
            v92 = HIBYTE(v105.__r_.__value_.__r.__words[2]);
            if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v93 = &v105;
            else
              v93 = (std::string *)v105.__r_.__value_.__r.__words[0];
            if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v92 = v105.__r_.__value_.__l.__size_;
            sub_20ABDABFC((uint64_t)&__src, v103, (char *)v93, (char *)v93 + v92);
            __dst = v110;
            memset(&v110, 0, sizeof(v110));
            v112 = __src;
            memset(&__src, 0, sizeof(__src));
            v94 = *(std::string **)(v8 + 96);
            if ((unint64_t)v94 < *(_QWORD *)(v8 + 104))
            {
              *v94 = __dst;
              memset(&__dst, 0, sizeof(__dst));
              v94[1] = v112;
              *(_QWORD *)(v8 + 96) = v94 + 2;
              if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                goto LABEL_255;
LABEL_260:
              if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_261;
LABEL_256:
              operator delete(__src.__r_.__value_.__l.__data_);
              if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
                goto LABEL_262;
LABEL_268:
              if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(v105.__r_.__value_.__l.__data_);
                if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
                  goto LABEL_274;
LABEL_270:
                if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
LABEL_275:
                  operator delete(v107.__r_.__value_.__l.__data_);
              }
              else
              {
                if ((SHIBYTE(v106.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_270;
LABEL_274:
                operator delete(v106.__r_.__value_.__l.__data_);
                if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
                  goto LABEL_275;
              }
              v36 = 1;
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              {
LABEL_178:
                operator delete(__p.__r_.__value_.__l.__data_);
                v11 = v37;
                if ((v36 & 1) == 0)
                {
LABEL_15:
                  if ((char *)v7 != v10)
                    goto LABEL_16;
                  if (v10 != a3)
                  {
                    if (*v10 == 45)
                    {
                      sub_20ABD9B1C(v8, 45);
                      ++v10;
                    }
                    if (v10 != a3 && *v10 == 93)
                      return (uint64_t)(v10 + 1);
                  }
                  goto LABEL_285;
                }
LABEL_14:
                v7 = (uint64_t)v11;
                goto LABEL_15;
              }
LABEL_84:
              v11 = v37;
              if (!v36)
                goto LABEL_15;
              goto LABEL_14;
            }
            v95 = sub_20ABDAD58(v102, (uint64_t)&__dst);
            v96 = SHIBYTE(v112.__r_.__value_.__r.__words[2]);
            *(_QWORD *)(v8 + 96) = v95;
            if (v96 < 0)
            {
              operator delete(v112.__r_.__value_.__l.__data_);
              if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_260;
            }
            else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_260;
            }
LABEL_255:
            operator delete(__dst.__r_.__value_.__l.__data_);
            if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_256;
LABEL_261:
            if ((SHIBYTE(v110.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_268;
LABEL_262:
            v97 = (void *)v110.__r_.__value_.__r.__words[0];
LABEL_267:
            operator delete(v97);
            goto LABEL_268;
          }
        }
      }
    }
  }
  v79 = HIBYTE(v106.__r_.__value_.__r.__words[2]);
  if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v79 = v106.__r_.__value_.__l.__size_;
  if (v79 == 1)
  {
    v80 = HIBYTE(v105.__r_.__value_.__r.__words[2]);
    if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v80 = v105.__r_.__value_.__l.__size_;
    if (v80 == 1)
    {
      if (*(_BYTE *)(v8 + 169))
      {
        if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v81 = &v106;
        else
          v81 = (std::string *)v106.__r_.__value_.__r.__words[0];
        v82 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v8 + 24) + 40))(*(_QWORD *)(v8 + 24), v81->__r_.__value_.__s.__data_[0]);
        if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v83 = &v106;
        else
          v83 = (std::string *)v106.__r_.__value_.__r.__words[0];
        v83->__r_.__value_.__s.__data_[0] = v82;
        if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v84 = &v105;
        else
          v84 = (std::string *)v105.__r_.__value_.__r.__words[0];
        v85 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v8 + 24) + 40))(*(_QWORD *)(v8 + 24), v84->__r_.__value_.__s.__data_[0]);
        if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v86 = &v105;
        else
          v86 = (std::string *)v105.__r_.__value_.__r.__words[0];
        v86->__r_.__value_.__s.__data_[0] = v85;
      }
      __dst = v106;
      memset(&v106, 0, sizeof(v106));
      v112 = v105;
      memset(&v105, 0, sizeof(v105));
      v87 = *(std::string **)(v8 + 96);
      if ((unint64_t)v87 >= *(_QWORD *)(v8 + 104))
      {
        v98 = sub_20ABDAD58(v102, (uint64_t)&__dst);
        v99 = SHIBYTE(v112.__r_.__value_.__r.__words[2]);
        *(_QWORD *)(v8 + 96) = v98;
        if (v99 < 0)
          operator delete(v112.__r_.__value_.__l.__data_);
      }
      else
      {
        *v87 = __dst;
        memset(&__dst, 0, sizeof(__dst));
        v87[1] = v112;
        *(_QWORD *)(v8 + 96) = v87 + 2;
      }
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_268;
      v97 = (void *)__dst.__r_.__value_.__r.__words[0];
      goto LABEL_267;
    }
  }
LABEL_289:
  v101 = sub_20ABD494C();
  return sub_20ABD8834(v101);
}

char *sub_20ABD8834(uint64_t a1, char *a2, char *a3, uint64_t a4, int a5, int a6)
{
  int v10;
  int v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  char *v20;
  int v21;
  int v22;
  char *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  __int128 v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  char *v50;
  int v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  char *v58;
  int v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;

  if (a2 == a3)
    return a2;
  v10 = *(_DWORD *)(a1 + 24) & 0x1F0;
  v11 = *a2;
  if (v11 <= 62)
  {
    if (v11 == 42)
    {
      v12 = a2 + 1;
      if (v10)
        v28 = 1;
      else
        v28 = v12 == a3;
      if (!v28 && *v12 == 63)
      {
        v12 = a2 + 2;
        v29 = (_QWORD *)operator new();
        v30 = *(_QWORD *)(a1 + 56);
        v31 = *(_QWORD *)(v30 + 8);
        *v29 = &off_24C380178;
        v29[1] = v31;
        *(_QWORD *)(v30 + 8) = 0;
        v16 = operator new();
        v17 = v16;
        v18 = *(_DWORD *)(a1 + 32);
        *(_QWORD *)(v16 + 8) = *(_QWORD *)(a4 + 8);
        *(_QWORD *)(v16 + 16) = v29;
        *(_QWORD *)v16 = &off_24C3806E0;
        v19 = xmmword_20AC05D60;
        goto LABEL_41;
      }
      v42 = (_QWORD *)operator new();
      v43 = *(_QWORD *)(a1 + 56);
      v44 = *(_QWORD *)(v43 + 8);
      *v42 = &off_24C380178;
      v42[1] = v44;
      *(_QWORD *)(v43 + 8) = 0;
      v39 = operator new();
      v17 = v39;
      v40 = *(_DWORD *)(a1 + 32);
      *(_QWORD *)(v39 + 8) = *(_QWORD *)(a4 + 8);
      *(_QWORD *)(v39 + 16) = v42;
      *(_QWORD *)v39 = &off_24C3806E0;
      v41 = xmmword_20AC05D60;
      goto LABEL_45;
    }
    if (v11 == 43)
    {
      v12 = a2 + 1;
      if (!v10 && v12 != a3 && *v12 == 63)
      {
        v12 = a2 + 2;
        v13 = (_QWORD *)operator new();
        v14 = *(_QWORD *)(a1 + 56);
        v15 = *(_QWORD *)(v14 + 8);
        *v13 = &off_24C380178;
        v13[1] = v15;
        *(_QWORD *)(v14 + 8) = 0;
        v16 = operator new();
        v17 = v16;
        v18 = *(_DWORD *)(a1 + 32);
        *(_QWORD *)(v16 + 8) = *(_QWORD *)(a4 + 8);
        *(_QWORD *)(v16 + 16) = v13;
        *(_QWORD *)v16 = &off_24C3806E0;
        v19 = xmmword_20AC05D50;
LABEL_41:
        *(_OWORD *)(v16 + 24) = v19;
        *(_DWORD *)(v16 + 40) = v18;
        *(_DWORD *)(v16 + 44) = a5;
        *(_DWORD *)(v16 + 48) = a6;
        *(_BYTE *)(v16 + 52) = 0;
LABEL_47:
        *(_QWORD *)(a4 + 8) = 0;
        v48 = (_QWORD *)operator new();
        *v48 = &off_24C380268;
        v48[1] = v17;
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v48;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(v17 + 16);
        *(_QWORD *)(a4 + 8) = v17;
        ++*(_DWORD *)(a1 + 32);
        return v12;
      }
      v36 = (_QWORD *)operator new();
      v37 = *(_QWORD *)(a1 + 56);
      v38 = *(_QWORD *)(v37 + 8);
      *v36 = &off_24C380178;
      v36[1] = v38;
      *(_QWORD *)(v37 + 8) = 0;
      v39 = operator new();
      v17 = v39;
      v40 = *(_DWORD *)(a1 + 32);
      *(_QWORD *)(v39 + 8) = *(_QWORD *)(a4 + 8);
      *(_QWORD *)(v39 + 16) = v36;
      *(_QWORD *)v39 = &off_24C3806E0;
      v41 = xmmword_20AC05D50;
      goto LABEL_45;
    }
    return a2;
  }
  if (v11 == 63)
  {
    v12 = a2 + 1;
    if (v10)
      v32 = 1;
    else
      v32 = v12 == a3;
    if (!v32 && *v12 == 63)
    {
      v12 = a2 + 2;
      v33 = (_QWORD *)operator new();
      v34 = *(_QWORD *)(a1 + 56);
      v35 = *(_QWORD *)(v34 + 8);
      *v33 = &off_24C380178;
      v33[1] = v35;
      *(_QWORD *)(v34 + 8) = 0;
      v16 = operator new();
      v17 = v16;
      v18 = *(_DWORD *)(a1 + 32);
      *(_QWORD *)(v16 + 8) = *(_QWORD *)(a4 + 8);
      *(_QWORD *)(v16 + 16) = v33;
      *(_QWORD *)v16 = &off_24C3806E0;
      v19 = xmmword_20AC05D40;
      goto LABEL_41;
    }
    v45 = (_QWORD *)operator new();
    v46 = *(_QWORD *)(a1 + 56);
    v47 = *(_QWORD *)(v46 + 8);
    *v45 = &off_24C380178;
    v45[1] = v47;
    *(_QWORD *)(v46 + 8) = 0;
    v39 = operator new();
    v17 = v39;
    v40 = *(_DWORD *)(a1 + 32);
    *(_QWORD *)(v39 + 8) = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(v39 + 16) = v45;
    *(_QWORD *)v39 = &off_24C3806E0;
    v41 = xmmword_20AC05D40;
LABEL_45:
    *(_OWORD *)(v39 + 24) = v41;
LABEL_46:
    *(_DWORD *)(v39 + 40) = v40;
    *(_DWORD *)(v39 + 44) = a5;
    *(_DWORD *)(v39 + 48) = a6;
    *(_BYTE *)(v39 + 52) = 1;
    goto LABEL_47;
  }
  if (v11 != 123)
    return a2;
  v20 = a2 + 1;
  if (a2 + 1 == a3)
    goto LABEL_75;
  v21 = *v20;
  if ((v21 & 0xF8) != 0x30 && (v21 & 0xFE) != 0x38)
    goto LABEL_75;
  v22 = v21 - 48;
  v23 = a2 + 2;
  if (a2 + 2 == a3)
  {
LABEL_19:
    v23 = a3;
  }
  else
  {
    while (1)
    {
      v24 = *v23;
      if ((v24 & 0xF8) != 0x30 && (v24 & 0xFE) != 0x38)
        break;
      if (v22 >= 214748364)
        goto LABEL_75;
      v22 = v24 + 10 * v22 - 48;
      if (++v23 == a3)
        goto LABEL_19;
    }
  }
  if (v23 == v20)
    goto LABEL_75;
  if (v23 == a3)
    goto LABEL_76;
  v25 = *v23;
  if (v25 != 44)
  {
    if (v25 == 125)
    {
      v12 = v23 + 1;
      if (v10 || v12 == a3 || *v12 != 63)
      {
        v52 = v22;
        v53 = (_QWORD *)operator new();
        v54 = *(_QWORD *)(a1 + 56);
        v55 = *(_QWORD *)(v54 + 8);
        *v53 = &off_24C380178;
        v53[1] = v55;
        *(_QWORD *)(v54 + 8) = 0;
        v39 = operator new();
        v17 = v39;
        v40 = *(_DWORD *)(a1 + 32);
        v56 = *(_QWORD *)(a4 + 8);
        *(_QWORD *)v39 = &off_24C3806E0;
        *(_QWORD *)(v39 + 8) = v56;
        *(_QWORD *)(v39 + 16) = v53;
        *(_QWORD *)(v39 + 24) = v52;
        *(_QWORD *)(v39 + 32) = v52;
        goto LABEL_46;
      }
      v26 = v22;
      v12 = v23 + 2;
      v27 = v22;
LABEL_72:
      sub_20ABD8FB4(a1, v26, v27, a4, a5, a6);
      return v12;
    }
    goto LABEL_75;
  }
  v50 = v23 + 1;
  if (v23 + 1 == a3)
  {
LABEL_75:
    sub_20ABD494C();
    goto LABEL_76;
  }
  v51 = *v50;
  if (v51 == 125)
  {
    v12 = v23 + 2;
    if (!v10 && v12 != a3 && *v12 == 63)
    {
      v12 = v23 + 3;
      sub_20ABD90BC(a1, v22, a4, a5, a6);
      return v12;
    }
    v60 = v22;
    v61 = (_QWORD *)operator new();
    v62 = *(_QWORD *)(a1 + 56);
    v63 = *(_QWORD *)(v62 + 8);
    *v61 = &off_24C380178;
    v61[1] = v63;
    *(_QWORD *)(v62 + 8) = 0;
    v39 = operator new();
    v17 = v39;
    v40 = *(_DWORD *)(a1 + 32);
    v64 = *(_QWORD *)(a4 + 8);
    *(_QWORD *)v39 = &off_24C3806E0;
    *(_QWORD *)(v39 + 8) = v64;
    *(_QWORD *)(v39 + 16) = v61;
    *(_QWORD *)(v39 + 24) = v60;
    *(_QWORD *)(v39 + 32) = -1;
    goto LABEL_46;
  }
  if ((v51 & 0xF8) == 0x30 || (v51 & 0xFE) == 0x38)
  {
    v57 = v51 - 48;
    v58 = v23 + 2;
    if (v58 == a3)
    {
LABEL_63:
      v58 = a3;
    }
    else
    {
      while (1)
      {
        v59 = *v58;
        if ((v59 & 0xF8) != 0x30 && (v59 & 0xFE) != 0x38)
          break;
        if (v57 >= 214748364)
          goto LABEL_75;
        v57 = v59 + 10 * v57 - 48;
        if (++v58 == a3)
          goto LABEL_63;
      }
    }
    if (v58 != v50 && v58 != a3 && *v58 == 125)
    {
      if (v57 >= v22)
      {
        v12 = v58 + 1;
        if (v10 || v12 == a3 || *v12 != 63)
        {
          v65 = v22;
          v66 = v57;
          v67 = (_QWORD *)operator new();
          v68 = *(_QWORD *)(a1 + 56);
          v69 = *(_QWORD *)(v68 + 8);
          *v67 = &off_24C380178;
          v67[1] = v69;
          *(_QWORD *)(v68 + 8) = 0;
          v39 = operator new();
          v17 = v39;
          v40 = *(_DWORD *)(a1 + 32);
          v70 = *(_QWORD *)(a4 + 8);
          *(_QWORD *)v39 = &off_24C3806E0;
          *(_QWORD *)(v39 + 8) = v70;
          *(_QWORD *)(v39 + 16) = v67;
          *(_QWORD *)(v39 + 24) = v65;
          *(_QWORD *)(v39 + 32) = v66;
          goto LABEL_46;
        }
        v26 = v22;
        v27 = v57;
        v12 = v58 + 2;
        goto LABEL_72;
      }
      goto LABEL_75;
    }
  }
LABEL_76:
  v71 = sub_20ABD494C();
  return (char *)sub_20ABD8FB4(v71, v72, v73, v74, v75, v76);
}

_QWORD *sub_20ABD8FB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _QWORD *result;

  v12 = (_QWORD *)operator new();
  v13 = *(_QWORD *)(a1 + 56);
  v14 = *(_QWORD *)(v13 + 8);
  *v12 = &off_24C380178;
  v12[1] = v14;
  *(_QWORD *)(v13 + 8) = 0;
  v15 = operator new();
  v16 = *(_DWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a4 + 8);
  *(_QWORD *)v15 = &off_24C3806E0;
  *(_QWORD *)(v15 + 8) = v17;
  *(_QWORD *)(v15 + 16) = v12;
  *(_QWORD *)(v15 + 24) = a2;
  *(_QWORD *)(v15 + 32) = a3;
  *(_DWORD *)(v15 + 40) = v16;
  *(_DWORD *)(v15 + 44) = a5;
  *(_DWORD *)(v15 + 48) = a6;
  *(_BYTE *)(v15 + 52) = 0;
  *(_QWORD *)(a4 + 8) = 0;
  result = (_QWORD *)operator new();
  *result = &off_24C380268;
  result[1] = v15;
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = result;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(v15 + 16);
  *(_QWORD *)(a4 + 8) = v15;
  ++*(_DWORD *)(a1 + 32);
  return result;
}

_QWORD *sub_20ABD90BC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _QWORD *result;

  v10 = (_QWORD *)operator new();
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_QWORD *)(v11 + 8);
  *v10 = &off_24C380178;
  v10[1] = v12;
  *(_QWORD *)(v11 + 8) = 0;
  v13 = operator new();
  v14 = *(_DWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)v13 = &off_24C3806E0;
  *(_QWORD *)(v13 + 8) = v15;
  *(_QWORD *)(v13 + 16) = v10;
  *(_QWORD *)(v13 + 24) = a2;
  *(_QWORD *)(v13 + 32) = -1;
  *(_DWORD *)(v13 + 40) = v14;
  *(_DWORD *)(v13 + 44) = a4;
  *(_DWORD *)(v13 + 48) = a5;
  *(_BYTE *)(v13 + 52) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  result = (_QWORD *)operator new();
  *result = &off_24C380268;
  result[1] = v13;
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = result;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(v13 + 16);
  *(_QWORD *)(a3 + 8) = v13;
  ++*(_DWORD *)(a1 + 32);
  return result;
}

void sub_20ABD91C8()
{
  JUMPOUT(0x20BD2D02CLL);
}

uint64_t sub_20ABD91DC(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *sub_20ABD91F4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_24C380238;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &off_24C380208;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_20ABD9254(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_24C380238;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &off_24C380208;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  JUMPOUT(0x20BD2D02CLL);
}

uint64_t sub_20ABD92C4(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BOOL4 v8;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _BYTE *v35;

  v2 = *(unsigned int *)(result + 40);
  v3 = *(_QWORD *)(a2 + 56);
  v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 != -991)
  {
    *v4 = 0;
    if (!*(_QWORD *)(result + 32))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_40;
    }
    if (*(_QWORD *)(result + 24))
    {
      *(_DWORD *)a2 = -994;
      *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
      *(_QWORD *)(v3 + 16 * v2 + 8) = *(_QWORD *)(a2 + 16);
      v24 = *(_DWORD *)(result + 44);
      v25 = *(_DWORD *)(result + 48);
      if (v24 == v25)
        return result;
      v26 = (v25 - 1);
      v27 = (v24 - 1);
      v28 = *(_QWORD *)(a2 + 24);
      v29 = *(_QWORD *)(a2 + 32);
      v30 = v26 - v27;
      if ((unint64_t)(v26 - v27) >= 2)
      {
        v31 = v30 & 0xFFFFFFFFFFFFFFFELL;
        v32 = v29 + 24 * v27 + 24;
        v33 = v30 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(_QWORD *)(v32 - 24) = v28;
          *(_QWORD *)(v32 - 16) = v28;
          *(_QWORD *)v32 = v28;
          *(_QWORD *)(v32 + 8) = v28;
          *(_BYTE *)(v32 - 8) = 0;
          *(_BYTE *)(v32 + 16) = 0;
          v32 += 48;
          v33 -= 2;
        }
        while (v33);
        if (v30 == v31)
          return result;
        v27 += v31;
      }
      v34 = v26 - v27;
      v35 = (_BYTE *)(v29 + 24 * v27 + 16);
      do
      {
        *((_QWORD *)v35 - 2) = v28;
        *((_QWORD *)v35 - 1) = v28;
        *v35 = 0;
        v35 += 24;
        --v34;
      }
      while (v34);
      return result;
    }
LABEL_38:
    *(_DWORD *)a2 = -992;
    return result;
  }
  v5 = *v4 + 1;
  *v4 = v5;
  v6 = *(_QWORD *)(result + 24);
  v7 = *(_QWORD *)(result + 32);
  v8 = v5 < v7;
  if (v5 < v7 && v5 >= v6)
    v8 = v5 < v7 && *(_QWORD *)(v3 + 16 * v2 + 8) != *(_QWORD *)(a2 + 16);
  if (v8 && v5 >= v6)
    goto LABEL_38;
  *(_DWORD *)a2 = -994;
  if (!v8)
  {
LABEL_40:
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 16);
    return result;
  }
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  *(_QWORD *)(v3 + 16 * v2 + 8) = *(_QWORD *)(a2 + 16);
  v12 = *(_DWORD *)(result + 44);
  v13 = *(_DWORD *)(result + 48);
  if (v12 == v13)
    return result;
  v14 = (v13 - 1);
  v15 = (v12 - 1);
  v16 = *(_QWORD *)(a2 + 24);
  v17 = *(_QWORD *)(a2 + 32);
  v18 = v14 - v15;
  if ((unint64_t)(v14 - v15) < 2)
    goto LABEL_24;
  v19 = v18 & 0xFFFFFFFFFFFFFFFELL;
  v20 = v17 + 24 * v15 + 24;
  v21 = v18 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    *(_QWORD *)(v20 - 24) = v16;
    *(_QWORD *)(v20 - 16) = v16;
    *(_QWORD *)v20 = v16;
    *(_QWORD *)(v20 + 8) = v16;
    *(_BYTE *)(v20 - 8) = 0;
    *(_BYTE *)(v20 + 16) = 0;
    v20 += 48;
    v21 -= 2;
  }
  while (v21);
  if (v18 != v19)
  {
    v15 += v19;
LABEL_24:
    v22 = v14 - v15;
    v23 = (_BYTE *)(v17 + 24 * v15 + 16);
    do
    {
      *((_QWORD *)v23 - 2) = v16;
      *((_QWORD *)v23 - 1) = v16;
      *v23 = 0;
      v23 += 24;
      --v22;
    }
    while (v22);
  }
  return result;
}

uint64_t sub_20ABD9498(uint64_t result, int a2, uint64_t a3)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;

  *(_DWORD *)a3 = -994;
  if (*(unsigned __int8 *)(result + 52) == a2)
  {
    *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + 16);
    return result;
  }
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + 8);
  v3 = *(_DWORD *)(result + 44);
  *(_QWORD *)(*(_QWORD *)(a3 + 56) + 16 * *(unsigned int *)(result + 40) + 8) = *(_QWORD *)(a3 + 16);
  v4 = *(_DWORD *)(result + 48);
  if (v3 != v4)
  {
    v5 = (v4 - 1);
    v6 = (v3 - 1);
    v7 = *(_QWORD *)(a3 + 24);
    v8 = *(_QWORD *)(a3 + 32);
    v9 = v5 - v6;
    if ((unint64_t)(v5 - v6) < 2)
      goto LABEL_9;
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    v11 = v8 + 24 * v6 + 24;
    v12 = v9 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      *(_QWORD *)(v11 - 24) = v7;
      *(_QWORD *)(v11 - 16) = v7;
      *(_QWORD *)v11 = v7;
      *(_QWORD *)(v11 + 8) = v7;
      *(_BYTE *)(v11 - 8) = 0;
      *(_BYTE *)(v11 + 16) = 0;
      v11 += 48;
      v12 -= 2;
    }
    while (v12);
    if (v9 != v10)
    {
      v6 += v10;
LABEL_9:
      v13 = v5 - v6;
      v14 = (_BYTE *)(v8 + 24 * v6 + 16);
      do
      {
        *((_QWORD *)v14 - 2) = v7;
        *((_QWORD *)v14 - 1) = v7;
        *v14 = 0;
        v14 += 24;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

_QWORD *sub_20ABD9558(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24C380208;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20ABD9598(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_24C380208;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x20BD2D02CLL);
}

_QWORD *sub_20ABD95EC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_24C380238;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &off_24C380208;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_20ABD964C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_24C380238;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &off_24C380208;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  JUMPOUT(0x20BD2D02CLL);
}

_QWORD *sub_20ABD96BC(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24C380208;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20ABD96FC(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_24C380208;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x20BD2D02CLL);
}

uint64_t sub_20ABD974C(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_DWORD *)a2 = -994;
  v2 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(_QWORD *)(v2 + 8) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(v2 + 16) = 1;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *sub_20ABD9784(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24C380208;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20ABD97C4(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_24C380208;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x20BD2D02CLL);
}

uint64_t sub_20ABD9814(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(*(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *sub_20ABD9844(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24C380208;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20ABD9884(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_24C380208;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x20BD2D02CLL);
}

uint64_t sub_20ABD98D4(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  int v3;
  BOOL v4;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(_BYTE *)(a2 + 88) & 2) == 0
    || *(_BYTE *)(result + 16) && ((v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  else
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  return result;
}

_QWORD *sub_20ABD9924(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24C380208;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20ABD9964(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_24C380208;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x20BD2D02CLL);
}

uint64_t sub_20ABD99B4(uint64_t result, uint64_t a2)
{
  int v2;

  if (!*(_BYTE *)(a2 + 92))
  {
    if (!*(_BYTE *)(result + 16))
      goto LABEL_12;
    v2 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10)
      goto LABEL_12;
LABEL_11:
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
    return result;
  }
  if (*(_QWORD *)(a2 + 16) == *(_QWORD *)(a2 + 8) && (*(_BYTE *)(a2 + 88) & 1) == 0)
    goto LABEL_11;
LABEL_12:
  *(_DWORD *)a2 = -993;
  *(_QWORD *)(a2 + 80) = 0;
  return result;
}

uint64_t sub_20ABD9A14(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  const std::locale *v11;
  BOOL v12;
  std::locale v14;
  std::string v15;

  *(_QWORD *)a1 = &off_24C3802F8;
  *(_QWORD *)(a1 + 8) = a3;
  v11 = (const std::locale *)(a1 + 16);
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_BYTE *)(a1 + 168) = a4;
  *(_BYTE *)(a1 + 169) = a5;
  *(_BYTE *)(a1 + 170) = a6;
  std::locale::locale(&v14, v11);
  std::locale::name(&v15, &v14);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    v12 = v15.__r_.__value_.__l.__size_ != 1 || *v15.__r_.__value_.__l.__data_ != 67;
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  else
  {
    v12 = SHIBYTE(v15.__r_.__value_.__r.__words[2]) != 1 || v15.__r_.__value_.__s.__data_[0] != 67;
  }
  std::locale::~locale(&v14);
  *(_BYTE *)(a1 + 171) = v12;
  return a1;
}

void sub_20ABD9B1C(uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  size_t v24;
  unint64_t v25;
  unint64_t v26;
  __int128 *v27;
  _OWORD *v28;
  unint64_t v29;
  __int128 v30;
  unint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  __int128 *v35;
  _OWORD *v36;
  unint64_t v37;
  __int128 v38;
  unint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  __int128 *v43;
  _OWORD *v44;
  unint64_t v45;
  __int128 v46;
  unint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char v52;
  char *v53;
  char v54;
  char *v55;
  char v56;

  v2 = a2;
  if (!*(_BYTE *)(a1 + 169))
  {
    v5 = *(_BYTE **)(a1 + 48);
    v12 = *(_QWORD *)(a1 + 56);
    if (*(_BYTE *)(a1 + 170))
    {
      if ((unint64_t)v5 < v12)
        goto LABEL_22;
      v6 = *(_BYTE **)(a1 + 40);
      v13 = v5 - v6;
      v14 = v5 - v6 + 1;
      if (v14 >= 0)
      {
        v15 = v12 - (_QWORD)v6;
        if (2 * v15 > v14)
          v14 = 2 * v15;
        if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
          v16 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        if (v16)
          v11 = operator new(v16);
        else
          v11 = 0;
        v18 = (char *)v11 + v13;
        v19 = (char *)v11 + v16;
        *((_BYTE *)v11 + v13) = v2;
        v17 = (uint64_t)v11 + v13 + 1;
        if (v5 == v6)
          goto LABEL_49;
        if (v13 >= 8 && (unint64_t)(v6 - (_BYTE *)v11) >= 0x20)
        {
          if (v13 >= 0x20)
          {
            v25 = v13 & 0xFFFFFFFFFFFFFFE0;
            v35 = (__int128 *)(v5 - 16);
            v36 = (char *)v11 + v5 - 16 - v6;
            v37 = v13 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v38 = *v35;
              *(v36 - 1) = *(v35 - 1);
              *v36 = v38;
              v36 -= 2;
              v35 -= 2;
              v37 -= 32;
            }
            while (v37);
            if (v13 == v25)
              goto LABEL_73;
            if ((v13 & 0x18) == 0)
            {
              v18 -= v25;
              v5 -= v25;
              goto LABEL_80;
            }
          }
          else
          {
            v25 = 0;
          }
          v39 = v25 - (v13 & 0xFFFFFFFFFFFFFFF8);
          v40 = &v5[-v25 - 8];
          v41 = (char *)(v40 - v6);
          do
          {
            v42 = *(_QWORD *)v40;
            v40 -= 8;
            *(_QWORD *)&v41[(_QWORD)v11] = v42;
            v41 -= 8;
            v39 += 8;
          }
          while (v39);
          if (v13 == (v13 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_73;
          v18 -= v13 & 0xFFFFFFFFFFFFFFF8;
          v5 -= v13 & 0xFFFFFFFFFFFFFFF8;
        }
LABEL_80:
        v53 = v18 - 1;
        do
        {
          v54 = *--v5;
          *v53-- = v54;
        }
        while (v5 != v6);
        goto LABEL_86;
      }
LABEL_90:
      abort();
    }
    if ((unint64_t)v5 < v12)
      goto LABEL_22;
    v6 = *(_BYTE **)(a1 + 40);
    v21 = v5 - v6;
    v22 = v5 - v6 + 1;
    if (v22 < 0)
      goto LABEL_90;
    v23 = v12 - (_QWORD)v6;
    if (2 * v23 > v22)
      v22 = 2 * v23;
    if (v23 >= 0x3FFFFFFFFFFFFFFFLL)
      v24 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v24 = v22;
    if (v24)
      v11 = operator new(v24);
    else
      v11 = 0;
    v18 = (char *)v11 + v21;
    v19 = (char *)v11 + v24;
    *((_BYTE *)v11 + v21) = v2;
    v17 = (uint64_t)v11 + v21 + 1;
    if (v5 == v6)
      goto LABEL_49;
    if (v21 >= 8 && (unint64_t)(v6 - (_BYTE *)v11) >= 0x20)
    {
      if (v21 >= 0x20)
      {
        v26 = v21 & 0xFFFFFFFFFFFFFFE0;
        v43 = (__int128 *)(v5 - 16);
        v44 = (char *)v11 + v5 - 16 - v6;
        v45 = v21 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v46 = *v43;
          *(v44 - 1) = *(v43 - 1);
          *v44 = v46;
          v44 -= 2;
          v43 -= 2;
          v45 -= 32;
        }
        while (v45);
        if (v21 == v26)
          goto LABEL_73;
        if ((v21 & 0x18) == 0)
        {
          v18 -= v26;
          v5 -= v26;
          goto LABEL_84;
        }
      }
      else
      {
        v26 = 0;
      }
      v47 = v26 - (v21 & 0xFFFFFFFFFFFFFFF8);
      v48 = &v5[-v26 - 8];
      v49 = (char *)(v48 - v6);
      do
      {
        v50 = *(_QWORD *)v48;
        v48 -= 8;
        *(_QWORD *)&v49[(_QWORD)v11] = v50;
        v49 -= 8;
        v47 += 8;
      }
      while (v47);
      if (v21 == (v21 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_73;
      v18 -= v21 & 0xFFFFFFFFFFFFFFF8;
      v5 -= v21 & 0xFFFFFFFFFFFFFFF8;
    }
LABEL_84:
    v55 = v18 - 1;
    do
    {
      v56 = *--v5;
      *v55-- = v56;
    }
    while (v5 != v6);
    goto LABEL_86;
  }
  v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
  v5 = *(_BYTE **)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  if ((unint64_t)v5 < v4)
  {
LABEL_22:
    *v5 = v2;
    v17 = (uint64_t)(v5 + 1);
    goto LABEL_89;
  }
  v6 = *(_BYTE **)(a1 + 40);
  v7 = v5 - v6;
  v8 = v5 - v6 + 1;
  if (v8 < 0)
    goto LABEL_90;
  v9 = v4 - (_QWORD)v6;
  if (2 * v9 > v8)
    v8 = 2 * v9;
  if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
    v10 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v10 = v8;
  if (v10)
    v11 = operator new(v10);
  else
    v11 = 0;
  v18 = (char *)v11 + v7;
  v19 = (char *)v11 + v10;
  *((_BYTE *)v11 + v7) = v2;
  v17 = (uint64_t)v11 + v7 + 1;
  if (v5 == v6)
  {
LABEL_49:
    v11 = v18;
    goto LABEL_87;
  }
  if (v7 < 8 || (unint64_t)(v6 - (_BYTE *)v11) < 0x20)
    goto LABEL_75;
  if (v7 < 0x20)
  {
    v20 = 0;
    goto LABEL_54;
  }
  v20 = v7 & 0xFFFFFFFFFFFFFFE0;
  v27 = (__int128 *)(v5 - 16);
  v28 = (char *)v11 + v5 - 16 - v6;
  v29 = v7 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v30 = *v27;
    *(v28 - 1) = *(v27 - 1);
    *v28 = v30;
    v28 -= 2;
    v27 -= 2;
    v29 -= 32;
  }
  while (v29);
  if (v7 == v20)
    goto LABEL_73;
  if ((v7 & 0x18) != 0)
  {
LABEL_54:
    v31 = v20 - (v7 & 0xFFFFFFFFFFFFFFF8);
    v32 = &v5[-v20 - 8];
    v33 = (char *)(v32 - v6);
    do
    {
      v34 = *(_QWORD *)v32;
      v32 -= 8;
      *(_QWORD *)&v33[(_QWORD)v11] = v34;
      v33 -= 8;
      v31 += 8;
    }
    while (v31);
    if (v7 != (v7 & 0xFFFFFFFFFFFFFFF8))
    {
      v18 -= v7 & 0xFFFFFFFFFFFFFFF8;
      v5 -= v7 & 0xFFFFFFFFFFFFFFF8;
      goto LABEL_75;
    }
LABEL_73:
    v5 = v6;
    goto LABEL_87;
  }
  v18 -= v20;
  v5 -= v20;
LABEL_75:
  v51 = v18 - 1;
  do
  {
    v52 = *--v5;
    *v51-- = v52;
  }
  while (v5 != v6);
LABEL_86:
  v5 = *(_BYTE **)(a1 + 40);
LABEL_87:
  *(_QWORD *)(a1 + 40) = v11;
  *(_QWORD *)(a1 + 48) = v17;
  *(_QWORD *)(a1 + 56) = v19;
  if (v5)
    operator delete(v5);
LABEL_89:
  *(_QWORD *)(a1 + 48) = v17;
}

void sub_20ABD9F40(uint64_t a1, uint64_t a2, _BYTE *__src, _BYTE *a4)
{
  size_t v4;
  std::string *p_dst;
  uint64_t v10;
  uint64_t v11;
  std::string *v12;
  unint64_t v13;
  unint64_t v14;
  std::string::size_type size;
  std::string *v16;
  int v17;
  uint64_t v18;
  std::string v19;
  std::string __dst;

  v4 = a4 - __src;
  if ((unint64_t)(a4 - __src) >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v4 <= 0x16)
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = (_BYTE)a4 - (_BYTE)__src;
    p_dst = &__dst;
    if (__src == a4)
      goto LABEL_9;
LABEL_8:
    memcpy(p_dst, __src, v4);
    p_dst = (std::string *)((char *)p_dst + v4);
    goto LABEL_9;
  }
  v10 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v4 | 7) != 0x17)
    v10 = v4 | 7;
  v11 = v10 + 1;
  p_dst = (std::string *)operator new(v10 + 1);
  __dst.__r_.__value_.__l.__size_ = v4;
  __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (__src != a4)
    goto LABEL_8;
LABEL_9:
  p_dst->__r_.__value_.__s.__data_[0] = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__dst.__r_.__value_.__l.__size_)
      goto LABEL_17;
    v12 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&__dst.__r_.__value_.__s + 23))
      return;
    v12 = &__dst;
  }
  std::__get_collation_name(&v19, (const char *)v12);
  *(_OWORD *)a1 = *(_OWORD *)&v19.__r_.__value_.__l.__data_;
  v13 = v19.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a1 + 16) = *((_QWORD *)&v19.__r_.__value_.__l + 2);
  v14 = HIBYTE(v13);
  if ((v14 & 0x80u) != 0)
    v14 = *(_QWORD *)(a1 + 8);
  if (v14)
    goto LABEL_17;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __dst.__r_.__value_.__l.__size_;
    if (__dst.__r_.__value_.__l.__size_ >= 3)
      goto LABEL_17;
    v16 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if (HIBYTE(__dst.__r_.__value_.__r.__words[2]) >= 3u)
      return;
    v16 = &__dst;
  }
  (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, char *))(**(_QWORD **)(a2 + 16) + 32))(&v19, *(_QWORD *)(a2 + 16), v16, (char *)v16 + size);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(std::string *)a1 = v19;
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    v17 = *(unsigned __int8 *)(a1 + 23);
    if (v17 != 12 && v17 != 1)
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 23) = 0;
      goto LABEL_17;
    }
    goto LABEL_33;
  }
  v18 = *(_QWORD *)(a1 + 8);
  if (v18 == 1 || v18 == 12)
  {
LABEL_33:
    std::string::operator=((std::string *)a1, &__dst);
    goto LABEL_17;
  }
  **(_BYTE **)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
LABEL_17:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

char *sub_20ABDA134(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::string *this, uint64_t a5)
{
  char v8;
  char v9;
  unint64_t v10;
  _BYTE *v11;
  unint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  size_t v18;
  void *v19;
  _BYTE *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  size_t v24;
  void *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  size_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  __int128 *v39;
  _OWORD *v40;
  unint64_t v41;
  __int128 v42;
  unint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  __int128 *v47;
  _OWORD *v48;
  unint64_t v49;
  __int128 v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  __int128 *v55;
  _OWORD *v56;
  unint64_t v57;
  __int128 v58;
  unint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char v64;
  char *v65;
  char v66;
  char *v67;
  char v68;

  if (a2 == a3)
  {
    sub_20ABD494C();
    goto LABEL_109;
  }
  switch(*a2)
  {
    case 'D':
      *(_DWORD *)(a5 + 164) |= 0x400u;
      return (char *)(a2 + 1);
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'T':
    case 'U':
    case 'V':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case 'a':
    case 'c':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'q':
    case 'r':
    case 't':
    case 'u':
    case 'v':
      return sub_20ABDB308(a1, a2, a3, this);
    case 'S':
      *(_DWORD *)(a5 + 164) |= 0x4000u;
      return (char *)(a2 + 1);
    case 'W':
      *(_DWORD *)(a5 + 164) |= 0x500u;
      if (!*(_BYTE *)(a5 + 169))
      {
        v13 = *(_BYTE **)(a5 + 72);
        v12 = *(_QWORD *)(a5 + 80);
        if (*(_BYTE *)(a5 + 170))
        {
          if ((unint64_t)v13 >= v12)
          {
            v14 = *(_BYTE **)(a5 + 64);
            v15 = v13 - v14;
            v16 = v13 - v14 + 1;
            if (v16 < 0)
              goto LABEL_109;
            v17 = v12 - (_QWORD)v14;
            if (2 * v17 > v16)
              v16 = 2 * v17;
            if (v17 >= 0x3FFFFFFFFFFFFFFFLL)
              v18 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v18 = v16;
            if (v18)
              v19 = operator new(v18);
            else
              v19 = 0;
            v34 = (char *)v19 + v15;
            v35 = (char *)v19 + v18;
            *((_BYTE *)v19 + v15) = 95;
            v36 = (uint64_t)v19 + v15 + 1;
            if (v13 != v14)
            {
              if (v15 < 8 || (unint64_t)(v14 - (_BYTE *)v19) < 0x20)
                goto LABEL_97;
              if (v15 < 0x20)
              {
                v37 = 0;
LABEL_76:
                v51 = v37 - (v15 & 0xFFFFFFFFFFFFFFF8);
                v52 = &v13[-v37 - 8];
                v53 = (char *)(v52 - v14);
                do
                {
                  v54 = *(_QWORD *)v52;
                  v52 -= 8;
                  *(_QWORD *)&v53[(_QWORD)v19] = v54;
                  v53 -= 8;
                  v51 += 8;
                }
                while (v51);
                if (v15 != (v15 & 0xFFFFFFFFFFFFFFF8))
                {
                  v34 -= v15 & 0xFFFFFFFFFFFFFFF8;
                  v13 -= v15 & 0xFFFFFFFFFFFFFFF8;
                  goto LABEL_97;
                }
                goto LABEL_87;
              }
              v37 = v15 & 0xFFFFFFFFFFFFFFE0;
              v47 = (__int128 *)(v13 - 16);
              v48 = (char *)v19 + v13 - 16 - v14;
              v49 = v15 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v50 = *v47;
                *(v48 - 1) = *(v47 - 1);
                *v48 = v50;
                v48 -= 2;
                v47 -= 2;
                v49 -= 32;
              }
              while (v49);
              if (v15 != v37)
              {
                if ((v15 & 0x18) == 0)
                {
                  v34 -= v37;
                  v13 -= v37;
LABEL_97:
                  v65 = v34 - 1;
                  do
                  {
                    v66 = *--v13;
                    *v65-- = v66;
                  }
                  while (v13 != v14);
LABEL_103:
                  v13 = *(_BYTE **)(a5 + 64);
                  goto LABEL_104;
                }
                goto LABEL_76;
              }
LABEL_87:
              v13 = v14;
              goto LABEL_104;
            }
LABEL_62:
            v19 = v34;
LABEL_104:
            *(_QWORD *)(a5 + 64) = v19;
            *(_QWORD *)(a5 + 72) = v36;
            *(_QWORD *)(a5 + 80) = v35;
            if (v13)
              operator delete(v13);
            *(_QWORD *)(a5 + 72) = v36;
            return (char *)(a2 + 1);
          }
LABEL_34:
          *v13 = 95;
          *(_QWORD *)(a5 + 72) = v13 + 1;
          return (char *)(a2 + 1);
        }
        if ((unint64_t)v13 < v12)
          goto LABEL_34;
        v14 = *(_BYTE **)(a5 + 64);
        v30 = v13 - v14;
        v31 = v13 - v14 + 1;
        if (v31 < 0)
          goto LABEL_109;
        v32 = v12 - (_QWORD)v14;
        if (2 * v32 > v31)
          v31 = 2 * v32;
        if (v32 >= 0x3FFFFFFFFFFFFFFFLL)
          v33 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v33 = v31;
        if (v33)
          v19 = operator new(v33);
        else
          v19 = 0;
        v34 = (char *)v19 + v30;
        v35 = (char *)v19 + v33;
        *((_BYTE *)v19 + v30) = 95;
        v36 = (uint64_t)v19 + v30 + 1;
        if (v13 == v14)
          goto LABEL_62;
        if (v30 >= 8 && (unint64_t)(v14 - (_BYTE *)v19) >= 0x20)
        {
          if (v30 >= 0x20)
          {
            v38 = v30 & 0xFFFFFFFFFFFFFFE0;
            v55 = (__int128 *)(v13 - 16);
            v56 = (char *)v19 + v13 - 16 - v14;
            v57 = v30 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v58 = *v55;
              *(v56 - 1) = *(v55 - 1);
              *v56 = v58;
              v56 -= 2;
              v55 -= 2;
              v57 -= 32;
            }
            while (v57);
            if (v30 == v38)
              goto LABEL_87;
            if ((v30 & 0x18) == 0)
            {
              v34 -= v38;
              v13 -= v38;
              goto LABEL_101;
            }
          }
          else
          {
            v38 = 0;
          }
          v59 = v38 - (v30 & 0xFFFFFFFFFFFFFFF8);
          v60 = &v13[-v38 - 8];
          v61 = (char *)(v60 - v14);
          do
          {
            v62 = *(_QWORD *)v60;
            v60 -= 8;
            *(_QWORD *)&v61[(_QWORD)v19] = v62;
            v61 -= 8;
            v59 += 8;
          }
          while (v59);
          if (v30 == (v30 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_87;
          v34 -= v30 & 0xFFFFFFFFFFFFFFF8;
          v13 -= v30 & 0xFFFFFFFFFFFFFFF8;
        }
LABEL_101:
        v67 = v34 - 1;
        do
        {
          v68 = *--v13;
          *v67-- = v68;
        }
        while (v13 != v14);
        goto LABEL_103;
      }
      v8 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a5 + 24) + 40))(*(_QWORD *)(a5 + 24), 95);
      v9 = v8;
      v11 = *(_BYTE **)(a5 + 72);
      v10 = *(_QWORD *)(a5 + 80);
      if ((unint64_t)v11 >= v10)
      {
        v20 = *(_BYTE **)(a5 + 64);
        v21 = v11 - v20;
        v22 = v11 - v20 + 1;
        if (v22 >= 0)
        {
          v23 = v10 - (_QWORD)v20;
          if (2 * v23 > v22)
            v22 = 2 * v23;
          if (v23 >= 0x3FFFFFFFFFFFFFFFLL)
            v24 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v24 = v22;
          if (v24)
            v25 = operator new(v24);
          else
            v25 = 0;
          v26 = (char *)v25 + v21;
          v27 = (char *)v25 + v24;
          *((_BYTE *)v25 + v21) = v9;
          v28 = (uint64_t)v25 + v21 + 1;
          if (v11 == v20)
          {
            v25 = (char *)v25 + v21;
            goto LABEL_92;
          }
          if (v21 >= 8 && (unint64_t)(v20 - (_BYTE *)v25) >= 0x20)
          {
            if (v21 < 0x20)
            {
              v29 = 0;
              goto LABEL_67;
            }
            v29 = v21 & 0xFFFFFFFFFFFFFFE0;
            v39 = (__int128 *)(v11 - 16);
            v40 = (char *)v25 + v11 - 16 - v20;
            v41 = v21 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v42 = *v39;
              *(v40 - 1) = *(v39 - 1);
              *v40 = v42;
              v40 -= 2;
              v39 -= 2;
              v41 -= 32;
            }
            while (v41);
            if (v21 == v29)
              goto LABEL_70;
            if ((v21 & 0x18) != 0)
            {
LABEL_67:
              v43 = v29 - (v21 & 0xFFFFFFFFFFFFFFF8);
              v44 = &v11[-v29 - 8];
              v45 = (char *)(v44 - v20);
              do
              {
                v46 = *(_QWORD *)v44;
                v44 -= 8;
                *(_QWORD *)&v45[(_QWORD)v25] = v46;
                v45 -= 8;
                v43 += 8;
              }
              while (v43);
              if (v21 == (v21 & 0xFFFFFFFFFFFFFFF8))
              {
LABEL_70:
                v11 = v20;
                goto LABEL_92;
              }
              v26 -= v21 & 0xFFFFFFFFFFFFFFF8;
              v11 -= v21 & 0xFFFFFFFFFFFFFFF8;
              goto LABEL_89;
            }
            v26 -= v29;
            v11 -= v29;
          }
LABEL_89:
          v63 = v26 - 1;
          do
          {
            v64 = *--v11;
            *v63-- = v64;
          }
          while (v11 != v20);
          v11 = *(_BYTE **)(a5 + 64);
LABEL_92:
          *(_QWORD *)(a5 + 64) = v25;
          *(_QWORD *)(a5 + 72) = v28;
          *(_QWORD *)(a5 + 80) = v27;
          if (v11)
            operator delete(v11);
          *(_QWORD *)(a5 + 72) = v28;
          return (char *)(a2 + 1);
        }
LABEL_109:
        abort();
      }
      *v11 = v8;
      *(_QWORD *)(a5 + 72) = v11 + 1;
      return (char *)(a2 + 1);
    case 'b':
      std::string::operator=(this, 8);
      return (char *)(a2 + 1);
    case 'd':
      *(_DWORD *)(a5 + 160) |= 0x400u;
      return (char *)(a2 + 1);
    case 's':
      *(_DWORD *)(a5 + 160) |= 0x4000u;
      return (char *)(a2 + 1);
    case 'w':
      *(_DWORD *)(a5 + 160) |= 0x500u;
      sub_20ABD9B1C(a5, 95);
      return (char *)(a2 + 1);
    default:
      if (!*a2)
      {
        std::string::operator=(this, 0);
        return (char *)(a2 + 1);
      }
      return sub_20ABDB308(a1, a2, a3, this);
  }
}

char *sub_20ABDA698(uint64_t a1, char *a2, char *a3, std::string *this)
{
  uint64_t v5;
  std::string *v6;
  char v7;
  char *v8;
  char v9;
  char v10;
  int v11;
  char v12;
  uint64_t v13;
  uint64_t v15;

  if (a2 == a3)
  {
LABEL_45:
    v15 = sub_20ABD494C();
    return (char *)sub_20ABDA844(v15);
  }
  v5 = *a2;
  switch((int)v5)
  {
    case '"':
    case '/':
    case '\\':
      if (!this)
        goto LABEL_41;
      v6 = this;
      goto LABEL_30;
    case 'a':
      if (this)
      {
        v6 = this;
        LOBYTE(v5) = 7;
        goto LABEL_30;
      }
      v5 = 7;
      goto LABEL_41;
    case 'b':
      if (this)
      {
        v6 = this;
        LOBYTE(v5) = 8;
        goto LABEL_30;
      }
      v5 = 8;
      goto LABEL_41;
    case 'f':
      if (this)
      {
        v6 = this;
        LOBYTE(v5) = 12;
        goto LABEL_30;
      }
      v5 = 12;
      goto LABEL_41;
    case 'n':
      if (this)
      {
        v6 = this;
        LOBYTE(v5) = 10;
        goto LABEL_30;
      }
      v5 = 10;
      goto LABEL_41;
    case 'r':
      if (this)
      {
        v6 = this;
        LOBYTE(v5) = 13;
        goto LABEL_30;
      }
      v5 = 13;
      goto LABEL_41;
    case 't':
      if (this)
      {
        v6 = this;
        LOBYTE(v5) = 9;
        goto LABEL_30;
      }
      v5 = 9;
      goto LABEL_41;
    case 'v':
      if (this)
      {
        v6 = this;
        LOBYTE(v5) = 11;
LABEL_30:
        std::string::operator=(v6, v5);
        return a2 + 1;
      }
      else
      {
        v5 = 11;
LABEL_41:
        sub_20ABDAEF0(a1, v5);
        return a2 + 1;
      }
    default:
      if ((v5 & 0xFFFFFFF8) != 0x30)
        goto LABEL_45;
      v7 = v5 - 48;
      v8 = a2 + 1;
      if (a2 + 1 == a3)
      {
        v8 = a3;
LABEL_32:
        v13 = v7;
        if (!this)
          goto LABEL_15;
        goto LABEL_33;
      }
      if ((*v8 & 0xF8) != 0x30)
        goto LABEL_32;
      v9 = *v8 + 8 * v7 - 48;
      if (a2 + 2 != a3)
      {
        v10 = a2[2];
        v11 = v10 & 0xF8;
        v12 = v10 + 8 * v9 - 48;
        if (v11 == 48)
          v8 = a2 + 3;
        else
          v8 = a2 + 2;
        if (v11 == 48)
          v9 = v12;
        v13 = v9;
        if (!this)
          goto LABEL_15;
        goto LABEL_33;
      }
      v8 = a3;
      v13 = v9;
      if (!this)
      {
LABEL_15:
        sub_20ABDAEF0(a1, v13);
        return v8;
      }
LABEL_33:
      std::string::operator=(this, v13);
      return v8;
  }
}

void sub_20ABDA844(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5;
  __int16 v6;
  unint64_t v7;
  char *v8;
  _WORD *v9;
  __int16 v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  _WORD *v27;
  char *v28;
  _WORD *v29;
  unint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  char *v33;
  unint64_t v34;
  __int128 v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  _WORD *v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  char *v48;
  unint64_t v49;
  __int128 v50;
  __int16 v51;
  unint64_t v52;
  uint64_t v53;
  _OWORD *v54;
  char *v55;
  unint64_t v56;
  __int128 v57;
  __int16 v58;

  if (!*(_BYTE *)(a1 + 169))
  {
    v10 = a2 | (unsigned __int16)((_WORD)a3 << 8);
    v12 = *(char **)(a1 + 120);
    v11 = *(_QWORD *)(a1 + 128);
    if (*(_BYTE *)(a1 + 170))
    {
      if ((unint64_t)v12 >= v11)
      {
        v13 = *(char **)(a1 + 112);
        v14 = v12 - v13;
        if (v12 - v13 <= -3)
          goto LABEL_73;
        v15 = v14 >> 1;
        v16 = v11 - (_QWORD)v13;
        if (v16 <= (v14 >> 1) + 1)
          v17 = v15 + 1;
        else
          v17 = v16;
        if (v16 >= 0x7FFFFFFFFFFFFFFELL)
          v18 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v18 = v17;
        if (v18)
        {
          if (v18 < 0)
            goto LABEL_74;
          v19 = operator new(2 * v18);
        }
        else
        {
          v19 = 0;
        }
        v43 = &v19[2 * v15];
        v44 = &v19[2 * v18];
        *v43 = v10;
        v9 = v43 + 1;
        if (v12 != v13)
        {
          v45 = v12 - v13 - 2;
          if (v45 < 0x1E)
            goto LABEL_77;
          if (v12 - v19 - (v14 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
            goto LABEL_77;
          v46 = (v45 >> 1) + 1;
          v47 = &v19[2 * v15 - 16];
          v48 = v12 - 16;
          v49 = v46 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v50 = *(_OWORD *)v48;
            *(v47 - 1) = *((_OWORD *)v48 - 1);
            *v47 = v50;
            v47 -= 2;
            v48 -= 32;
            v49 -= 16;
          }
          while (v49);
          v43 -= v46 & 0xFFFFFFFFFFFFFFF0;
          v12 -= 2 * (v46 & 0xFFFFFFFFFFFFFFF0);
          if (v46 != (v46 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_77:
            do
            {
              v51 = *((_WORD *)v12 - 1);
              v12 -= 2;
              *--v43 = v51;
            }
            while (v12 != v13);
LABEL_68:
            v13 = *(char **)(a1 + 112);
            goto LABEL_70;
          }
          goto LABEL_70;
        }
        goto LABEL_69;
      }
    }
    else if ((unint64_t)v12 >= v11)
    {
      v13 = *(char **)(a1 + 112);
      v37 = v12 - v13;
      if (v12 - v13 <= -3)
        goto LABEL_73;
      v38 = v37 >> 1;
      v39 = v11 - (_QWORD)v13;
      if (v39 <= (v37 >> 1) + 1)
        v40 = v38 + 1;
      else
        v40 = v39;
      if (v39 >= 0x7FFFFFFFFFFFFFFELL)
        v41 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v41 = v40;
      if (v41)
      {
        if (v41 < 0)
          goto LABEL_74;
        v42 = operator new(2 * v41);
      }
      else
      {
        v42 = 0;
      }
      v43 = &v42[2 * v38];
      v44 = &v42[2 * v41];
      *v43 = v10;
      v9 = v43 + 1;
      if (v12 != v13)
      {
        v52 = v12 - v13 - 2;
        if (v52 < 0x1E)
          goto LABEL_78;
        if (v12 - v42 - (v37 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
          goto LABEL_78;
        v53 = (v52 >> 1) + 1;
        v54 = &v42[2 * v38 - 16];
        v55 = v12 - 16;
        v56 = v53 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v57 = *(_OWORD *)v55;
          *(v54 - 1) = *((_OWORD *)v55 - 1);
          *v54 = v57;
          v54 -= 2;
          v55 -= 32;
          v56 -= 16;
        }
        while (v56);
        v43 -= v53 & 0xFFFFFFFFFFFFFFF0;
        v12 -= 2 * (v53 & 0xFFFFFFFFFFFFFFF0);
        if (v53 != (v53 & 0xFFFFFFFFFFFFFFF0))
        {
LABEL_78:
          do
          {
            v58 = *((_WORD *)v12 - 1);
            v12 -= 2;
            *--v43 = v58;
          }
          while (v12 != v13);
          goto LABEL_68;
        }
LABEL_70:
        *(_QWORD *)(a1 + 112) = v43;
        *(_QWORD *)(a1 + 120) = v9;
        *(_QWORD *)(a1 + 128) = v44;
        if (v13)
          operator delete(v13);
        goto LABEL_72;
      }
LABEL_69:
      v13 = v12;
      goto LABEL_70;
    }
    *(_WORD *)v12 = v10;
    v9 = v12 + 2;
    goto LABEL_72;
  }
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
  v6 = v5 | (unsigned __int16)((*(unsigned __int16 (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a3) << 8);
  v8 = *(char **)(a1 + 120);
  v7 = *(_QWORD *)(a1 + 128);
  if ((unint64_t)v8 < v7)
  {
    *(_WORD *)v8 = v6;
    v9 = v8 + 2;
LABEL_72:
    *(_QWORD *)(a1 + 120) = v9;
    return;
  }
  v20 = *(char **)(a1 + 112);
  v21 = v8 - v20;
  if (v8 - v20 <= -3)
LABEL_73:
    abort();
  v22 = v21 >> 1;
  v23 = v7 - (_QWORD)v20;
  if (v23 <= (v21 >> 1) + 1)
    v24 = v22 + 1;
  else
    v24 = v23;
  if (v23 >= 0x7FFFFFFFFFFFFFFELL)
    v25 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v25 = v24;
  if (!v25)
  {
    v26 = 0;
    goto LABEL_29;
  }
  if (v25 < 0)
LABEL_74:
    sub_20ABAD09C();
  v26 = operator new(2 * v25);
LABEL_29:
  v27 = &v26[2 * v22];
  v28 = &v26[2 * v25];
  *v27 = v6;
  v29 = v27 + 1;
  if (v8 == v20)
  {
    v20 = v8;
  }
  else
  {
    v30 = v8 - v20 - 2;
    if (v30 < 0x1E)
      goto LABEL_79;
    if (v8 - v26 - (v21 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
      goto LABEL_79;
    v31 = (v30 >> 1) + 1;
    v32 = &v26[2 * v22 - 16];
    v33 = v8 - 16;
    v34 = v31 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v35 = *(_OWORD *)v33;
      *(v32 - 1) = *((_OWORD *)v33 - 1);
      *v32 = v35;
      v32 -= 2;
      v33 -= 32;
      v34 -= 16;
    }
    while (v34);
    v27 -= v31 & 0xFFFFFFFFFFFFFFF0;
    v8 -= 2 * (v31 & 0xFFFFFFFFFFFFFFF0);
    if (v31 != (v31 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_79:
      do
      {
        v36 = *((_WORD *)v8 - 1);
        v8 -= 2;
        *--v27 = v36;
      }
      while (v8 != v20);
      v20 = *(char **)(a1 + 112);
    }
  }
  *(_QWORD *)(a1 + 112) = v27;
  *(_QWORD *)(a1 + 120) = v29;
  *(_QWORD *)(a1 + 128) = v28;
  if (v20)
    operator delete(v20);
  *(_QWORD *)(a1 + 120) = v29;
}

void sub_20ABDABFC(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  unint64_t v4;
  char *v6;
  _BYTE *p_p;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  __int128 *v13;
  _OWORD *v14;
  unint64_t v15;
  __int128 v16;
  char v17;
  unint64_t v18;
  char *v19;
  void *__p;
  unint64_t v21;
  int64_t v22;

  v4 = a4 - a3;
  if ((unint64_t)(a4 - a3) >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v6 = a3;
  if (v4 <= 0x16)
  {
    HIBYTE(v22) = (_BYTE)a4 - (_BYTE)a3;
    p_p = &__p;
    if (a3 == a4)
      goto LABEL_18;
LABEL_8:
    if (v4 < 0x20 || (unint64_t)(p_p - v6) < 0x20)
    {
      v12 = p_p;
    }
    else
    {
      v11 = v4 & 0xFFFFFFFFFFFFFFE0;
      v12 = &p_p[v4 & 0xFFFFFFFFFFFFFFE0];
      v13 = (__int128 *)(v6 + 16);
      v14 = p_p + 16;
      v15 = v4 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v16 = *v13;
        *(v14 - 1) = *(v13 - 1);
        *v14 = v16;
        v13 += 2;
        v14 += 2;
        v15 -= 32;
      }
      while (v15);
      if (v4 == v11)
      {
        p_p += v4 & 0xFFFFFFFFFFFFFFE0;
        goto LABEL_18;
      }
      v6 += v11;
    }
    p_p = v12;
    do
    {
      v17 = *v6++;
      *p_p++ = v17;
    }
    while (v6 != a4);
    goto LABEL_18;
  }
  v9 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v4 | 7) != 0x17)
    v9 = v4 | 7;
  v10 = v9 + 1;
  p_p = operator new(v9 + 1);
  v21 = v4;
  v22 = v10 | 0x8000000000000000;
  __p = p_p;
  if (v6 != a4)
    goto LABEL_8;
LABEL_18:
  *p_p = 0;
  v18 = HIBYTE(v22);
  if (v22 >= 0)
    v19 = (char *)&__p;
  else
    v19 = (char *)__p;
  if (v22 < 0)
    v18 = v21;
  (*(void (**)(_QWORD, char *, char *))(**(_QWORD **)(a2 + 16) + 32))(*(_QWORD *)(a2 + 16), v19, &v19[v18]);
  if (SHIBYTE(v22) < 0)
    operator delete(__p);
}

char *sub_20ABDAD58(void **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  void **v12;
  void **v13;
  __int128 v14;
  __int128 v15;
  void **v16;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v3 = v2 + 1;
  if (v2 + 1 > 0x555555555555555)
    abort();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v3)
    v3 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v6 = 0x555555555555555;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0x555555555555555)
      sub_20ABAD09C();
    v7 = (char *)operator new(48 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[48 * v2];
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  v9 = &v7[48 * v6];
  v10 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(v8 + 24) = v10;
  *((_QWORD *)v8 + 5) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v11 = v8 + 48;
  v12 = (void **)*a1;
  v13 = (void **)a1[1];
  if (v13 != *a1)
  {
    do
    {
      v14 = *((_OWORD *)v13 - 3);
      *((_QWORD *)v8 - 4) = *(v13 - 4);
      *((_OWORD *)v8 - 3) = v14;
      *(v13 - 5) = 0;
      *(v13 - 4) = 0;
      *(v13 - 6) = 0;
      v15 = *(_OWORD *)(v13 - 3);
      *((_QWORD *)v8 - 1) = *(v13 - 1);
      *(_OWORD *)(v8 - 24) = v15;
      v8 -= 48;
      *(v13 - 2) = 0;
      *(v13 - 1) = 0;
      *(v13 - 3) = 0;
      v13 -= 6;
    }
    while (v13 != v12);
    v13 = (void **)*a1;
    v16 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v11;
    a1[2] = v9;
    while (1)
    {
      if (v16 == v13)
        goto LABEL_22;
      if (*((char *)v16 - 1) < 0)
      {
        operator delete(*(v16 - 3));
        if ((*((char *)v16 - 25) & 0x80000000) == 0)
          goto LABEL_14;
      }
      else if ((*((char *)v16 - 25) & 0x80000000) == 0)
      {
        goto LABEL_14;
      }
      operator delete(*(v16 - 6));
LABEL_14:
      v16 -= 6;
    }
  }
  *a1 = v8;
  a1[1] = v11;
  a1[2] = v9;
LABEL_22:
  if (v13)
    operator delete(v13);
  return v11;
}

uint64_t sub_20ABDAEF0(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_DWORD *)(a1 + 24);
  if ((v4 & 1) != 0)
  {
    v8 = operator new();
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    *(_QWORD *)v8 = &off_24C3802C8;
    *(_QWORD *)(v8 + 8) = v9;
    std::locale::locale((std::locale *)(v8 + 16), (const std::locale *)a1);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)(a1 + 8);
    result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), a2);
    *(_BYTE *)(v8 + 40) = result;
LABEL_6:
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v8;
    goto LABEL_7;
  }
  if ((v4 & 8) != 0)
  {
    v8 = operator new();
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    *(_QWORD *)v8 = &off_24C380358;
    *(_QWORD *)(v8 + 8) = v10;
    result = (uint64_t)std::locale::locale((std::locale *)(v8 + 16), (const std::locale *)a1);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)(a1 + 8);
    *(_BYTE *)(v8 + 40) = a2;
    goto LABEL_6;
  }
  result = operator new();
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(v6 + 8);
  *(_QWORD *)result = &off_24C380148;
  *(_QWORD *)(result + 8) = v7;
  *(_BYTE *)(result + 16) = a2;
  *(_QWORD *)(v6 + 8) = result;
LABEL_7:
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  return result;
}

_QWORD *sub_20ABDB010(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24C380208;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20ABDB050(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_24C380208;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x20BD2D02CLL);
}

uint64_t sub_20ABDB0A0(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  return result;
}

std::locale *sub_20ABDB0E8(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_24C380358;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_24C380208;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_20ABDB138(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_24C380358;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_24C380208;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x20BD2D02CLL);
}

uint64_t sub_20ABDB198(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  return result;
}

std::locale *sub_20ABDB1E0(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_24C3802C8;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_24C380208;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_20ABDB230(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_24C3802C8;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_24C380208;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x20BD2D02CLL);
}

uint64_t sub_20ABDB290(uint64_t result, uint64_t a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (v4 = result,
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(result + 24) + 40))(*(_QWORD *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(_QWORD *)(a2 + 16);
    v5 = *(_QWORD *)(v4 + 8);
  }
  *(_QWORD *)(a2 + 80) = v5;
  return result;
}

char *sub_20ABDB308(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::string *this)
{
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned __int8 v10;
  char v11;
  unsigned __int8 v12;
  char v13;
  uint64_t v15;
  uint64_t v16;

  v4 = a2;
  if (a2 != a3)
  {
    switch(*a2)
    {
      case '0':
        if (this)
        {
          std::string::operator=(this, 0);
          return (char *)++v4;
        }
        v6 = 0;
        goto LABEL_54;
      case 'c':
        if (a2 + 1 == a3 || ((a2[1] & 0xDF) - 65) > 0x19u)
          goto LABEL_57;
        v7 = a2[1] & 0x1F;
        if (this)
          std::string::operator=(this, v7);
        else
          sub_20ABDAEF0(a1, v7);
        v4 += 2;
        return (char *)v4;
      case 'f':
        if (this)
        {
          std::string::operator=(this, 12);
          return (char *)++v4;
        }
        v6 = 12;
        goto LABEL_54;
      case 'n':
        if (this)
        {
          std::string::operator=(this, 10);
          return (char *)++v4;
        }
        v6 = 10;
        goto LABEL_54;
      case 'r':
        if (this)
        {
          std::string::operator=(this, 13);
          return (char *)++v4;
        }
        v6 = 13;
        goto LABEL_54;
      case 't':
        if (this)
        {
          std::string::operator=(this, 9);
          return (char *)++v4;
        }
        v6 = 9;
        goto LABEL_54;
      case 'u':
        if (a2 + 1 != a3)
        {
          v8 = a2[1];
          if ((v8 & 0xF8) == 0x30 || (v8 & 0xFE) == 0x38 || (v8 | 0x20u) - 97 < 6)
          {
            v4 = a2 + 2;
            if (a2 + 2 != a3)
            {
              v9 = *v4;
              if ((v9 & 0xF8) == 0x30 || (v9 & 0xFE) == 0x38 || (v9 | 0x20u) - 97 < 6)
                goto LABEL_31;
            }
          }
        }
        goto LABEL_57;
      case 'v':
        if (this)
        {
          std::string::operator=(this, 11);
        }
        else
        {
          v6 = 11;
LABEL_54:
          sub_20ABDAEF0(a1, v6);
        }
        return (char *)++v4;
      case 'x':
LABEL_31:
        if (v4 + 1 == a3)
          goto LABEL_57;
        v10 = v4[1];
        v11 = -48;
        if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38)
          goto LABEL_36;
        v10 |= 0x20u;
        if ((v10 - 97) >= 6u)
          goto LABEL_57;
        v11 = -87;
LABEL_36:
        if (v4 + 2 == a3)
          goto LABEL_57;
        v12 = v4[2];
        v13 = -48;
        if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38)
          goto LABEL_41;
        v12 |= 0x20u;
        if ((v12 - 97) >= 6u)
        {
LABEL_57:
          v15 = sub_20ABD494C();
          return sub_20ABDB5B4(v15, v16);
        }
        v13 = -87;
LABEL_41:
        if (this)
          std::string::operator=(this, v13 + v12 + 16 * (v11 + v10));
        else
          sub_20ABDAEF0(a1, (char)(v13 + v12 + 16 * (v11 + v10)));
        v4 += 3;
        break;
      default:
        v5 = *a2;
        if ((_DWORD)v5 == 95
          || (v5 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16) + 4 * v5) & 0x500) != 0)
        {
          goto LABEL_57;
        }
        v6 = (char)v5;
        if (!this)
          goto LABEL_54;
        std::string::operator=(this, v5);
        return (char *)++v4;
    }
  }
  return (char *)v4;
}

char *sub_20ABDB5B4(uint64_t a1, uint64_t a2)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  void **v14;

  v2 = *(void ***)a1;
  v3 = *(void ***)(a1 + 8);
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *(_QWORD *)a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v2) >> 3) > v5)
    v5 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v2) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v2) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_20ABAD09C();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v4];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_20AB88C14(v10, *(void **)a2, *(_QWORD *)(a2 + 8));
    v2 = *(void ***)a1;
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    *(_OWORD *)v10 = *(_OWORD *)a2;
    *((_QWORD *)v10 + 2) = *(_QWORD *)(a2 + 16);
  }
  v11 = &v9[24 * v8];
  v12 = v10 + 24;
  if (v3 == v2)
  {
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v12;
    *(_QWORD *)(a1 + 16) = v11;
  }
  else
  {
    do
    {
      v13 = *(_OWORD *)(v3 - 3);
      *((_QWORD *)v10 - 1) = *(v3 - 1);
      *(_OWORD *)(v10 - 24) = v13;
      v10 -= 24;
      *(v3 - 2) = 0;
      *(v3 - 1) = 0;
      *(v3 - 3) = 0;
      v3 -= 3;
    }
    while (v3 != v2);
    v2 = *(void ***)a1;
    v14 = *(void ***)(a1 + 8);
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v12;
    *(_QWORD *)(a1 + 16) = v11;
    while (v14 != v2)
    {
      if (*((char *)v14 - 1) < 0)
        operator delete(*(v14 - 3));
      v14 -= 3;
    }
  }
  if (v2)
    operator delete(v2);
  return v12;
}

void sub_20ABDB72C(std::locale *a1)
{
  sub_20ABDC374(a1);
  JUMPOUT(0x20BD2D02CLL);
}

void sub_20ABDB750(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned __int8 v6;
  __int16 v7;
  __int16 v8;
  std::string::size_type size;
  int v10;
  uint64_t v11;
  int v12;
  std::string::size_type v13;
  std::string *p_s;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::string::size_type v24;
  std::string *v25;
  uint64_t v26;
  unsigned __int8 *v27;
  BOOL v28;
  int v29;
  size_t v30;
  char *v31;
  size_t v32;
  int v33;
  _BOOL4 v34;
  int v35;
  size_t v36;
  char *v37;
  size_t v38;
  int v39;
  BOOL v40;
  int v41;
  int v42;
  std::string::size_type v43;
  unsigned __int8 v44;
  unsigned __int8 *v45;
  unint64_t v46;
  int v47;
  unsigned int v48;
  int v49;
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  std::string::size_type v59;
  std::string *v60;
  uint64_t v61;
  unsigned __int8 *v62;
  BOOL v63;
  int v64;
  size_t v65;
  char *v66;
  size_t v67;
  int v68;
  _BOOL4 v69;
  int v70;
  size_t v71;
  char *v72;
  size_t v73;
  int v74;
  BOOL v75;
  std::string::size_type v76;
  std::string *v77;
  std::string::size_type v78;
  std::string *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  __int128 v85;
  std::string::size_type v86;
  uint64_t v87;
  BOOL v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  unsigned __int8 *v93;
  std::string *v94;
  uint64_t v95;
  unsigned int v96;
  int v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  unint64_t v103;
  std::string::size_type v104;
  std::string::size_type v105;
  uint64_t v106;
  uint64_t v107;
  BOOL v108;
  unsigned __int8 *v109;
  uint64_t v110;
  int v111;
  std::string *v112;
  uint64_t v113;
  uint64_t v114;
  const void *v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  unint64_t v119;
  const void *v120;
  int v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  int v132;
  int v133;
  char v134;
  char v135;
  uint64_t v136;
  int v137;
  unsigned __int8 v138;
  uint64_t v139;
  unint64_t v140;
  unsigned __int8 v141;
  __int16 v142;
  int v143;
  int v144;
  char v145;
  uint64_t v146;
  uint64_t v147;
  char v148;
  std::string __p;
  std::string v150;
  std::string __s;

  v2 = a2;
  v4 = *(unsigned __int8 **)(a2 + 16);
  v5 = *(unsigned __int8 **)(a2 + 24);
  if (v4 == v5)
  {
    v11 = 0;
    v12 = *(unsigned __int8 *)(a1 + 168);
    goto LABEL_210;
  }
  if (!*(_BYTE *)(a1 + 171) || v4 + 1 == v5)
    goto LABEL_67;
  v6 = *v4;
  v7 = v4[1];
  if (*(_BYTE *)(a1 + 169))
  {
    v6 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), (char)v6);
    v7 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), (char)v7);
  }
  *((_BYTE *)&__s.__r_.__value_.__s + 23) = 2;
  v8 = v6 | (unsigned __int16)(v7 << 8);
  LOWORD(__s.__r_.__value_.__l.__data_) = v8;
  __s.__r_.__value_.__s.__data_[2] = 0;
  std::__get_collation_name(&v150, (const char *)&__s);
  __p = v150;
  size = HIBYTE(v150.__r_.__value_.__r.__words[2]);
  v10 = SHIBYTE(v150.__r_.__value_.__r.__words[2]);
  if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v150.__r_.__value_.__l.__size_;
  if (size)
    goto LABEL_9;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    v13 = __s.__r_.__value_.__l.__size_;
    if (__s.__r_.__value_.__l.__size_ >= 3)
      goto LABEL_9;
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    v13 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
      goto LABEL_15;
    p_s = &__s;
  }
  (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, char *))(**(_QWORD **)(a1 + 32) + 32))(&v150, *(_QWORD *)(a1 + 32), p_s, (char *)p_s + v13);
  if (v10 < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = v150;
  if ((SHIBYTE(v150.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (HIBYTE(v150.__r_.__value_.__r.__words[2]) != 12 && HIBYTE(v150.__r_.__value_.__r.__words[2]) != 1)
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_155;
  }
  if (__p.__r_.__value_.__l.__size_ == 1 || __p.__r_.__value_.__l.__size_ == 12)
  {
LABEL_155:
    std::string::operator=(&__p, &__s);
    goto LABEL_9;
  }
  *__p.__r_.__value_.__l.__data_ = 0;
  __p.__r_.__value_.__l.__size_ = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
LABEL_15:
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
      goto LABEL_17;
LABEL_67:
    v41 = 0;
    v11 = 1;
    goto LABEL_68;
  }
  v43 = __p.__r_.__value_.__l.__size_;
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v43)
    goto LABEL_67;
LABEL_17:
  v15 = *(_QWORD *)(a1 + 112);
  v16 = *(_QWORD *)(a1 + 120) - v15;
  if (v16)
  {
    v17 = v16 >> 1;
    if (v17 <= 1)
      v17 = 1;
    v18 = (unsigned __int8 *)(v15 + 1);
    while (*(v18 - 1) != v6 || *v18 != v7)
    {
      v18 += 2;
      if (!--v17)
        goto LABEL_25;
    }
LABEL_291:
    v12 = 1;
    v11 = 2;
    goto LABEL_210;
  }
LABEL_25:
  if (!*(_BYTE *)(a1 + 170) || *(_QWORD *)(a1 + 88) == *(_QWORD *)(a1 + 96))
  {
    v41 = 0;
    goto LABEL_162;
  }
  *((_BYTE *)&__s.__r_.__value_.__s + 23) = 2;
  __s.__r_.__value_.__s.__data_[0] = v6;
  __s.__r_.__value_.__s.__data_[1] = v7;
  __s.__r_.__value_.__s.__data_[2] = 0;
  (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, std::string::value_type *))(**(_QWORD **)(a1 + 32) + 32))(&v150, *(_QWORD *)(a1 + 32), &__s, &__s.__r_.__value_.__s.__data_[2]);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  v19 = *(_QWORD *)(a1 + 88);
  v20 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
  v21 = *(_QWORD *)(a1 + 96) - v19;
  if (v21)
  {
    v142 = v6 | (unsigned __int16)(v7 << 8);
    v134 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
    v138 = v6;
    v145 = v7;
    v22 = 0;
    v23 = v21 / 48;
    if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v24 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
    else
      v24 = v150.__r_.__value_.__l.__size_;
    if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v25 = &v150;
    else
      v25 = (std::string *)v150.__r_.__value_.__r.__words[0];
    if (v23 <= 1)
      v26 = 1;
    else
      v26 = v21 / 48;
    v27 = (unsigned __int8 *)(v19 + 47);
    v28 = 1;
    do
    {
      v29 = (char)*(v27 - 24);
      if (v29 >= 0)
        v30 = *(v27 - 24);
      else
        v30 = *(_QWORD *)(v27 - 39);
      if (v29 >= 0)
        v31 = (char *)(v27 - 47);
      else
        v31 = *(char **)(v27 - 47);
      if (v30 >= v24)
        v32 = v24;
      else
        v32 = v30;
      v33 = memcmp(v25, v31, v32);
      v34 = v24 >= v30;
      if (v33)
        v34 = v33 >= 0;
      if (v34)
      {
        v35 = (char)*v27;
        if (v35 >= 0)
          v36 = *v27;
        else
          v36 = *(_QWORD *)(v27 - 15);
        if (v35 >= 0)
          v37 = (char *)(v27 - 23);
        else
          v37 = *(char **)(v27 - 23);
        if (v24 >= v36)
          v38 = v36;
        else
          v38 = v24;
        v39 = memcmp(v37, v25, v38);
        v40 = v36 >= v24;
        if (v39)
          v40 = v39 >= 0;
        if (v40)
        {
          v41 = 1;
          v42 = 5;
          goto LABEL_157;
        }
      }
      v28 = ++v22 < v23;
      v27 += 48;
    }
    while (v26 != v22);
    v42 = 0;
    v41 = 0;
LABEL_157:
    LOBYTE(v7) = v145;
    v20 = v134;
    v6 = v138;
    v8 = v142;
  }
  else
  {
    v28 = 0;
    v42 = 0;
    v41 = 0;
  }
  if (v20 < 0)
    operator delete(v150.__r_.__value_.__l.__data_);
  if (!v28)
  {
LABEL_162:
    if (*(_QWORD *)(a1 + 136) == *(_QWORD *)(a1 + 144))
      goto LABEL_272;
    *((_BYTE *)&__s.__r_.__value_.__s + 23) = 2;
    LOWORD(__s.__r_.__value_.__l.__data_) = v8;
    __s.__r_.__value_.__s.__data_[2] = 0;
    (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, std::string::value_type *))(**(_QWORD **)(a1 + 32) + 32))(&v150, *(_QWORD *)(a1 + 32), &__s, &__s.__r_.__value_.__s.__data_[2]);
    v78 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
    if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v78 = v150.__r_.__value_.__l.__size_;
    if (v78 != 1)
    {
      if (v78 == 12)
      {
        v79 = &v150;
        if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v79 = (std::string *)v150.__r_.__value_.__r.__words[0];
        v79->__r_.__value_.__s.__data_[11] = v79->__r_.__value_.__s.__data_[3];
      }
      else if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
      {
        *v150.__r_.__value_.__l.__data_ = 0;
        v150.__r_.__value_.__l.__size_ = 0;
      }
      else
      {
        v150.__r_.__value_.__s.__data_[0] = 0;
        *((_BYTE *)&v150.__r_.__value_.__s + 23) = 0;
      }
    }
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    v100 = *(_QWORD *)(a1 + 136);
    v101 = SHIBYTE(v150.__r_.__value_.__r.__words[2]);
    v102 = *(_QWORD *)(a1 + 144) - v100;
    if (v102)
    {
      v103 = v102 / 24;
      v104 = v150.__r_.__value_.__l.__size_;
      if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v105 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
      else
        v105 = v150.__r_.__value_.__l.__size_;
      if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
      {
        v137 = SHIBYTE(v150.__r_.__value_.__r.__words[2]);
        v141 = v6;
        v148 = v7;
        v144 = v41;
        v114 = 0;
        v115 = (const void *)v150.__r_.__value_.__r.__words[0];
        if (v103 <= 1)
          v116 = 1;
        else
          v116 = v102 / 24;
        v108 = 1;
        do
        {
          v117 = *(unsigned __int8 *)(v100 + 23);
          v118 = (char)v117;
          if ((v117 & 0x80u) != 0)
            v117 = *(_QWORD *)(v100 + 8);
          if (v105 == v117)
          {
            v119 = v103;
            v120 = v118 >= 0 ? (const void *)v100 : *(const void **)v100;
            v121 = memcmp(v115, v120, v104);
            v103 = v119;
            if (!v121)
            {
              v41 = 1;
              v42 = 5;
              goto LABEL_253;
            }
          }
          v108 = ++v114 < v103;
          v100 += 24;
        }
        while (v116 != v114);
        v42 = 0;
        v41 = v144;
LABEL_253:
        LOBYTE(v7) = v148;
        v101 = v137;
        v6 = v141;
LABEL_267:
        if (v101 < 0)
          operator delete(v150.__r_.__value_.__l.__data_);
        if (v108)
          goto LABEL_270;
LABEL_272:
        if ((v6 & 0x80) != 0)
        {
          v133 = *(_DWORD *)(a1 + 164);
        }
        else
        {
          v130 = *(_DWORD *)(a1 + 160);
          v131 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
          v132 = *(_DWORD *)(v131 + 4 * v6);
          if (((v132 & v130) != 0 || v6 == 95 && (v130 & 0x80) != 0)
            && (v7 & 0x80) == 0
            && ((*(_DWORD *)(v131 + 4 * v7) & v130) != 0
             || (v130 & 0x80) != 0 && v7 == 95))
          {
            goto LABEL_291;
          }
          v133 = *(_DWORD *)(a1 + 164);
          if ((v132 & v133) != 0 || v6 == 95 && (v133 & 0x80) != 0)
            goto LABEL_289;
        }
        if ((v7 & 0x80) != 0)
          goto LABEL_291;
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 4 * v7) & v133) == 0)
        {
          v12 = 1;
          if (v7 != 95 || (v133 & 0x80) == 0)
          {
LABEL_290:
            v11 = 2;
            goto LABEL_210;
          }
        }
LABEL_289:
        v12 = v41;
        goto LABEL_290;
      }
      if (*((_BYTE *)&v150.__r_.__value_.__s + 23))
      {
        v106 = 0;
        if (v103 <= 1)
          v107 = 1;
        else
          v107 = v102 / 24;
        v108 = 1;
        do
        {
          v109 = (unsigned __int8 *)(v100 + 24 * v106);
          v110 = v109[23];
          v111 = (char)v110;
          if ((v110 & 0x80u) != 0)
            v110 = *((_QWORD *)v109 + 1);
          if (v105 == v110)
          {
            if (v111 < 0)
              v109 = *(unsigned __int8 **)v109;
            v112 = &v150;
            v113 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
            while (v112->__r_.__value_.__s.__data_[0] == *v109)
            {
              v112 = (std::string *)((char *)v112 + 1);
              ++v109;
              if (!--v113)
                goto LABEL_238;
            }
          }
          v108 = ++v106 < v103;
        }
        while (v106 != v107);
      }
      else
      {
        v122 = *(unsigned __int8 *)(v100 + 23);
        if ((v122 & 0x80u) != 0)
          v122 = *(_QWORD *)(v100 + 8);
        if (v122 == HIBYTE(v150.__r_.__value_.__r.__words[2]))
          goto LABEL_291;
        v123 = 0;
        if (v103 <= 1)
          v124 = 1;
        else
          v124 = v103;
        v125 = v124 - 1;
        v126 = (uint64_t *)(v100 + 32);
        while (v125 != v123)
        {
          ++v123;
          v127 = *((unsigned __int8 *)v126 + 15);
          v129 = *v126;
          v126 += 3;
          v128 = v129;
          if ((v127 & 0x80u) != 0)
            v127 = v128;
          if (v105 == v127)
          {
            v108 = v123 < v103;
LABEL_238:
            v41 = 1;
            v42 = 5;
            goto LABEL_267;
          }
        }
      }
    }
    v108 = 0;
    v42 = 0;
    goto LABEL_267;
  }
LABEL_270:
  if (v42)
    goto LABEL_289;
  v11 = 2;
LABEL_68:
  v44 = **(_BYTE **)(v2 + 16);
  if (*(_BYTE *)(a1 + 169))
    v44 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), (char)v44);
  v45 = *(unsigned __int8 **)(a1 + 40);
  v46 = *(_QWORD *)(a1 + 48) - (_QWORD)v45;
  if (v46)
  {
    if (v46 <= 1)
      v46 = 1;
    while (1)
    {
      v47 = *v45++;
      if (v47 == v44)
        break;
      if (!--v46)
        goto LABEL_75;
    }
LABEL_208:
    v41 = 1;
    goto LABEL_209;
  }
LABEL_75:
  v48 = *(_DWORD *)(a1 + 164);
  if (v48 || *(_QWORD *)(a1 + 64) != *(_QWORD *)(a1 + 72))
  {
    if ((v44 & 0x80) != 0 || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 4 * v44) & v48) == 0)
      v49 = (v44 == 95) & (v48 >> 7);
    else
      LOBYTE(v49) = 1;
    v50 = *(void **)(a1 + 72);
    v51 = memchr(*(void **)(a1 + 64), (char)v44, (size_t)v50 - *(_QWORD *)(a1 + 64));
    v52 = v51 ? v51 : v50;
    if ((v49 & 1) == 0 && v52 == v50)
      goto LABEL_208;
  }
  v53 = *(_QWORD *)(a1 + 88);
  v54 = *(_QWORD *)(a1 + 96);
  if (v53 != v54)
  {
    v143 = v41;
    if (*(_BYTE *)(a1 + 170))
    {
      *((_BYTE *)&__s.__r_.__value_.__s + 23) = 1;
      LOWORD(__s.__r_.__value_.__l.__data_) = v44;
      (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, std::string::value_type *))(**(_QWORD **)(a1 + 32) + 32))(&v150, *(_QWORD *)(a1 + 32), &__s, &__s.__r_.__value_.__s.__data_[1]);
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s.__r_.__value_.__l.__data_);
      v53 = *(_QWORD *)(a1 + 88);
      v55 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
      v56 = *(_QWORD *)(a1 + 96) - v53;
      if (v56)
        goto LABEL_91;
    }
    else
    {
      v55 = 1;
      *((_BYTE *)&v150.__r_.__value_.__s + 23) = 1;
      LOWORD(v150.__r_.__value_.__l.__data_) = v44;
      v56 = v54 - v53;
      if (v56)
      {
LABEL_91:
        v146 = v11;
        v139 = v2;
        v57 = 0;
        v58 = v56 / 48;
        v135 = v55;
        if ((v55 & 0x80u) == 0)
          v59 = v55;
        else
          v59 = v150.__r_.__value_.__l.__size_;
        if ((v55 & 0x80u) == 0)
          v60 = &v150;
        else
          v60 = (std::string *)v150.__r_.__value_.__r.__words[0];
        if (v58 <= 1)
          v61 = 1;
        else
          v61 = v56 / 48;
        v62 = (unsigned __int8 *)(v53 + 47);
        v63 = 1;
        do
        {
          v64 = (char)*(v62 - 24);
          if (v64 >= 0)
            v65 = *(v62 - 24);
          else
            v65 = *(_QWORD *)(v62 - 39);
          if (v64 >= 0)
            v66 = (char *)(v62 - 47);
          else
            v66 = *(char **)(v62 - 47);
          if (v65 >= v59)
            v67 = v59;
          else
            v67 = v65;
          v68 = memcmp(v60, v66, v67);
          v69 = v59 >= v65;
          if (v68)
            v69 = v68 >= 0;
          if (v69)
          {
            v70 = (char)*v62;
            if (v70 >= 0)
              v71 = *v62;
            else
              v71 = *(_QWORD *)(v62 - 15);
            if (v70 >= 0)
              v72 = (char *)(v62 - 23);
            else
              v72 = *(char **)(v62 - 23);
            if (v59 >= v71)
              v73 = v71;
            else
              v73 = v59;
            v74 = memcmp(v72, v60, v73);
            v75 = v71 >= v59;
            if (v74)
              v75 = v74 >= 0;
            if (v75)
            {
              v41 = 1;
              v2 = v139;
              goto LABEL_129;
            }
          }
          v63 = ++v57 < v58;
          v62 += 48;
        }
        while (v61 != v57);
        v2 = v139;
        v41 = v143;
LABEL_129:
        v11 = v146;
        if ((v135 & 0x80) == 0)
          goto LABEL_131;
        goto LABEL_130;
      }
    }
    v63 = 0;
    if ((v55 & 0x80) == 0)
    {
LABEL_131:
      if (v63)
        goto LABEL_209;
      goto LABEL_132;
    }
LABEL_130:
    operator delete(v150.__r_.__value_.__l.__data_);
    goto LABEL_131;
  }
LABEL_132:
  if (*(_QWORD *)(a1 + 136) == *(_QWORD *)(a1 + 144))
    goto LABEL_203;
  *((_BYTE *)&__s.__r_.__value_.__s + 23) = 1;
  LOWORD(__s.__r_.__value_.__l.__data_) = v44;
  (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, std::string::value_type *))(**(_QWORD **)(a1 + 32) + 32))(&v150, *(_QWORD *)(a1 + 32), &__s, &__s.__r_.__value_.__s.__data_[1]);
  v76 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
  if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v76 = v150.__r_.__value_.__l.__size_;
  if (v76 != 1)
  {
    if (v76 == 12)
    {
      v77 = &v150;
      if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v77 = (std::string *)v150.__r_.__value_.__r.__words[0];
      v77->__r_.__value_.__s.__data_[11] = v77->__r_.__value_.__s.__data_[3];
    }
    else if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
    {
      *v150.__r_.__value_.__l.__data_ = 0;
      v150.__r_.__value_.__l.__size_ = 0;
    }
    else
    {
      v150.__r_.__value_.__s.__data_[0] = 0;
      *((_BYTE *)&v150.__r_.__value_.__s + 23) = 0;
    }
  }
  v147 = v11;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  v80 = *(_QWORD *)(a1 + 136);
  v81 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
  v82 = *(_QWORD *)(a1 + 144) - v80;
  if (!v82)
  {
    if ((*((_BYTE *)&v150.__r_.__value_.__s + 23) & 0x80) != 0)
      operator delete(v150.__r_.__value_.__l.__data_);
    v11 = v147;
LABEL_203:
    if ((v44 & 0x80) != 0)
      goto LABEL_209;
    v96 = *(_DWORD *)(a1 + 160);
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 4 * v44) & v96) == 0)
    {
      v97 = (v96 >> 7) & 1;
      if (v44 != 95)
        v97 = 0;
      if (v97 != 1)
        goto LABEL_209;
    }
    goto LABEL_208;
  }
  v83 = 0;
  v84 = v82 / 24;
  v85 = *(_OWORD *)&v150.__r_.__value_.__l.__data_;
  if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v86 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
  else
    v86 = v150.__r_.__value_.__l.__size_;
  if (v84 <= 1)
    v87 = 1;
  else
    v87 = v82 / 24;
  v88 = 1;
  while (1)
  {
    v90 = v80 + 24 * v83;
    v91 = *(unsigned __int8 *)(v90 + 23);
    v92 = (char)v91;
    if ((v91 & 0x80u) != 0)
      v91 = *(_QWORD *)(v90 + 8);
    if (v86 != v91)
      goto LABEL_184;
    v93 = v92 >= 0 ? (unsigned __int8 *)(v80 + 24 * v83) : *(unsigned __int8 **)v90;
    if ((v81 & 0x80) == 0)
      break;
    v136 = v87;
    v140 = v84;
    v89 = memcmp((const void *)v85, v93, *((size_t *)&v85 + 1));
    v87 = v136;
    v84 = v140;
    if (!v89)
    {
      v41 = 1;
      v11 = v147;
      goto LABEL_197;
    }
LABEL_184:
    v88 = ++v83 < v84;
    if (v83 == v87)
    {
      v11 = v147;
      if ((v81 & 0x80) == 0)
      {
LABEL_198:
        if (!v88)
          goto LABEL_203;
        goto LABEL_209;
      }
LABEL_197:
      operator delete(v150.__r_.__value_.__l.__data_);
      goto LABEL_198;
    }
  }
  if ((_DWORD)v81)
  {
    v94 = &v150;
    v95 = v81;
    while (v94->__r_.__value_.__s.__data_[0] == *v93)
    {
      v94 = (std::string *)((char *)v94 + 1);
      ++v93;
      if (!--v95)
      {
        v41 = 1;
        v11 = v147;
        if ((v81 & 0x80) == 0)
          goto LABEL_198;
        goto LABEL_197;
      }
    }
    goto LABEL_184;
  }
  v41 = 1;
  v11 = v147;
  if (!v88)
    goto LABEL_203;
LABEL_209:
  v12 = v41;
LABEL_210:
  if (v12 == *(unsigned __int8 *)(a1 + 168))
  {
    v98 = 0;
    v99 = -993;
  }
  else
  {
    *(_QWORD *)(v2 + 16) += v11;
    v98 = *(_QWORD *)(a1 + 8);
    v99 = -995;
  }
  *(_DWORD *)v2 = v99;
  *(_QWORD *)(v2 + 80) = v98;
}

std::locale *sub_20ABDC374(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale::__imp *v6;
  std::locale::__imp *v7;
  std::locale::__imp *v8;
  std::locale::__imp *v9;
  std::locale::__imp *v10;
  std::locale::__imp *v11;

  a1->__locale_ = (std::locale::__imp *)&off_24C3802F8;
  locale = a1[17].__locale_;
  if (locale)
  {
    v3 = a1[18].__locale_;
    v4 = a1[17].__locale_;
    if (v3 != locale)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*((void **)v3 - 3));
        v3 = (std::locale::__imp *)((char *)v3 - 24);
      }
      while (v3 != locale);
      v4 = a1[17].__locale_;
    }
    a1[18].__locale_ = locale;
    operator delete(v4);
  }
  v5 = a1[14].__locale_;
  if (v5)
  {
    a1[15].__locale_ = v5;
    operator delete(v5);
  }
  v6 = a1[11].__locale_;
  if (v6)
  {
    v7 = a1[12].__locale_;
    v8 = a1[11].__locale_;
    if (v7 == v6)
    {
LABEL_21:
      a1[12].__locale_ = v6;
      operator delete(v8);
      goto LABEL_22;
    }
    while (1)
    {
      if (*((char *)v7 - 1) < 0)
      {
        operator delete(*((void **)v7 - 3));
        if (*((char *)v7 - 25) < 0)
LABEL_19:
          operator delete(*((void **)v7 - 6));
      }
      else if (*((char *)v7 - 25) < 0)
      {
        goto LABEL_19;
      }
      v7 = (std::locale::__imp *)((char *)v7 - 48);
      if (v7 == v6)
      {
        v8 = a1[11].__locale_;
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v9 = a1[8].__locale_;
  if (v9)
  {
    a1[9].__locale_ = v9;
    operator delete(v9);
  }
  v10 = a1[5].__locale_;
  if (v10)
  {
    a1[6].__locale_ = v10;
    operator delete(v10);
  }
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_24C380208;
  v11 = a1[1].__locale_;
  if (v11)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v11 + 8))(v11);
  return a1;
}

_QWORD *sub_20ABDC4AC(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24C380208;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20ABDC4EC(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_24C380208;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x20BD2D02CLL);
}

uint64_t sub_20ABDC53C(uint64_t result, uint64_t a2)
{
  _BYTE *v2;

  v2 = *(_BYTE **)(a2 + 16);
  if (v2 == *(_BYTE **)(a2 + 24) || !*v2)
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  return result;
}

uint64_t sub_20ABDC57C(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v3;
  int v4;

  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8)
    return 0;
  if (a2 - 48 > *(_DWORD *)(a1 + 28))
  {
    v3 = sub_20ABD494C();
    return sub_20ABDC5DC(v3, v4);
  }
  else
  {
    sub_20ABDC5DC(a1, a2 - 48);
    return 1;
  }
}

uint64_t sub_20ABDC5DC(uint64_t a1, int a2)
{
  int v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  std::locale *v8;
  std::locale *v9;
  std::locale::__imp *v10;
  uint64_t (**v11)();

  v4 = *(_DWORD *)(a1 + 24);
  if ((v4 & 1) != 0)
  {
    v8 = (std::locale *)operator new();
    v9 = v8;
    v10 = *(std::locale::__imp **)(*(_QWORD *)(a1 + 56) + 8);
    v11 = &off_24C3801D8;
LABEL_6:
    v8->__locale_ = (std::locale::__imp *)v11;
    v8[1].__locale_ = v10;
    result = (uint64_t)std::locale::locale(v8 + 2, (const std::locale *)a1);
    *(_OWORD *)&v9[3].__locale_ = *(_OWORD *)(a1 + 8);
    LODWORD(v9[5].__locale_) = a2;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v9;
    goto LABEL_7;
  }
  if ((v4 & 8) != 0)
  {
    v8 = (std::locale *)operator new();
    v9 = v8;
    v10 = *(std::locale::__imp **)(*(_QWORD *)(a1 + 56) + 8);
    v11 = &off_24C380298;
    goto LABEL_6;
  }
  result = operator new();
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(v6 + 8);
  *(_QWORD *)result = &off_24C37FF38;
  *(_QWORD *)(result + 8) = v7;
  *(_DWORD *)(result + 16) = a2;
  *(_QWORD *)(v6 + 8) = result;
LABEL_7:
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  return result;
}

_QWORD *sub_20ABDC6D0(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24C380208;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20ABDC710(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_24C380208;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x20BD2D02CLL);
}

uint64_t sub_20ABDC760(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v5;
  uint64_t v6;
  uint64_t *v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(unsigned int *)(result + 16);
  v3 = *(_QWORD *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 40) - v3) >> 3) < v2)
  {
    v11 = sub_20ABD494C();
    return sub_20ABDC81C(v11);
  }
  else
  {
    v5 = v2 - 1;
    if (*(_BYTE *)(v3 + 24 * v5 + 16)
      && (v6 = result,
          v7 = (uint64_t *)(v3 + 24 * v5),
          result = *v7,
          v8 = v7[1] - *v7,
          v9 = *(_QWORD *)(a2 + 16),
          *(_QWORD *)(a2 + 24) - v9 >= v8)
      && (result = memcmp((const void *)result, *(const void **)(a2 + 16), v8), !(_DWORD)result))
    {
      *(_DWORD *)a2 = -994;
      *(_QWORD *)(a2 + 16) = v9 + v8;
      v10 = *(_QWORD *)(v6 + 8);
    }
    else
    {
      v10 = 0;
      *(_DWORD *)a2 = -993;
    }
    *(_QWORD *)(a2 + 80) = v10;
  }
  return result;
}

std::locale *sub_20ABDC81C(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_24C380298;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_24C380208;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_20ABDC86C(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_24C380298;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_24C380208;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x20BD2D02CLL);
}

uint64_t sub_20ABDC8CC(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  int v12;

  v2 = *(_DWORD *)(result + 40) - 1;
  v3 = *(_QWORD *)(a2 + 32);
  if (!*(_BYTE *)(v3 + 24 * v2 + 16)
    || (v4 = (unsigned __int8 **)(v3 + 24 * v2),
        v5 = *v4,
        v6 = v4[1] - *v4,
        v7 = *(_QWORD *)(a2 + 16),
        *(_QWORD *)(a2 + 24) - v7 < v6))
  {
LABEL_3:
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    return result;
  }
  if (v6 >= 1)
  {
    v8 = v6;
    v9 = *(unsigned __int8 **)(a2 + 16);
    do
    {
      v11 = *v5++;
      v10 = v11;
      v12 = *v9++;
      if (v10 != v12)
        goto LABEL_3;
    }
    while (--v8);
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 16) = v7 + v6;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

std::locale *sub_20ABDC95C(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_24C3801D8;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_24C380208;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_20ABDC9AC(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_24C3801D8;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_24C380208;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x20BD2D02CLL);
}

uint64_t sub_20ABDCA0C(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v3 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (*(_BYTE *)(v3 + 16))
  {
    v4 = *(_QWORD *)(v3 + 8) - *(_QWORD *)v3;
    v5 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)(a2 + 24) - v5 >= v4)
    {
      v7 = result;
      if (v4 < 1)
      {
LABEL_9:
        *(_DWORD *)a2 = -994;
        *(_QWORD *)(a2 + 16) = v5 + v4;
        v6 = *(_QWORD *)(v7 + 8);
        goto LABEL_10;
      }
      v8 = 0;
      while (1)
      {
        v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *(char *)(*(_QWORD *)v3 + v8));
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *(char *)(*(_QWORD *)(a2 + 16) + v8));
        if (v9 != (_DWORD)result)
          break;
        if (v4 == ++v8)
        {
          v5 = *(_QWORD *)(a2 + 16);
          goto LABEL_9;
        }
      }
    }
  }
  v6 = 0;
  *(_DWORD *)a2 = -993;
LABEL_10:
  *(_QWORD *)(a2 + 80) = v6;
  return result;
}

unsigned __int8 *sub_20ABDCAF0(uint64_t a1, char *a2, char *a3)
{
  int v6;
  char *v7;
  uint64_t v8;
  int v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  int v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  uint64_t v29;
  int v30;
  int v31;

  if (a2 != a3)
  {
    v7 = a2 + 1;
    v6 = *a2;
    if (a2 + 1 != a3 || v6 != 36)
    {
      if ((v6 - 46) > 0x2E || ((1 << (v6 - 46)) & 0x600000000001) == 0)
      {
        sub_20ABDAEF0(a1, (char)v6);
        return (unsigned __int8 *)v7;
      }
      if (v7 == a3 || v6 != 92)
      {
        if (v6 == 46)
        {
          v17 = operator new();
          v18 = *(_QWORD *)(a1 + 56);
          v19 = *(_QWORD *)(v18 + 8);
          *(_QWORD *)v17 = &off_24C380118;
          *(_QWORD *)(v17 + 8) = v19;
LABEL_39:
          *(_QWORD *)(v18 + 8) = v17;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          return (unsigned __int8 *)v7;
        }
      }
      else
      {
        v16 = *v7;
        if ((v16 - 36) <= 0x3A && ((1 << (v16 - 36)) & 0x580000000000441) != 0)
        {
          sub_20ABDAEF0(a1, (char)v16);
          return (unsigned __int8 *)(a2 + 2);
        }
      }
    }
  }
  v8 = sub_20ABD7A74(a1, a2, a3);
  v7 = (char *)v8;
  if ((char *)v8 != a2 || (char *)v8 == a3)
    return (unsigned __int8 *)v7;
  if (a2 + 1 == a3 || *a2 != 92)
    return (unsigned __int8 *)a2;
  v9 = a2[1];
  if (v9 == 40)
  {
    v10 = (unsigned __int8 *)(a2 + 2);
    if ((*(_BYTE *)(a1 + 24) & 2) != 0)
    {
      v12 = *(_DWORD *)(a1 + 28);
    }
    else
    {
      v11 = operator new();
      v12 = *(_DWORD *)(a1 + 28) + 1;
      *(_DWORD *)(a1 + 28) = v12;
      v13 = *(_QWORD *)(a1 + 56);
      v14 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)v11 = &off_24C3806B0;
      *(_QWORD *)(v11 + 8) = v14;
      *(_DWORD *)(v11 + 16) = v12;
      *(_QWORD *)(v13 + 8) = v11;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    do
    {
      if (v10 == (unsigned __int8 *)a3)
        goto LABEL_41;
      v20 = v10;
      v21 = *(_QWORD *)(a1 + 56);
      v22 = *(_DWORD *)(a1 + 28);
      v23 = (unsigned __int8 *)sub_20ABDCAF0(a1, v20, a3);
      if (v23 == v20)
        break;
      v10 = sub_20ABDCDC8(a1, v23, (unsigned __int8 *)a3, v21, v22 + 1, *(_DWORD *)(a1 + 28) + 1);
    }
    while (v10 != v20);
    if (v20 + 1 == (unsigned __int8 *)a3 || *v20 != 92 || v20[1] != 41)
    {
LABEL_41:
      sub_20ABD494C();
      goto LABEL_42;
    }
    v7 = (char *)&v20[2 * (v20[1] == 41)];
    if ((*(_BYTE *)(a1 + 24) & 2) != 0)
      return (unsigned __int8 *)v7;
    v17 = operator new();
    v18 = *(_QWORD *)(a1 + 56);
    v24 = *(_QWORD *)(v18 + 8);
    *(_QWORD *)v17 = &off_24C380680;
    *(_QWORD *)(v17 + 8) = v24;
    *(_DWORD *)(v17 + 16) = v12;
    goto LABEL_39;
  }
  if ((v9 & 0xF8) != 0x30 && (v9 & 0xFE) != 0x38 || (v9 - 49) > 8)
    return (unsigned __int8 *)a2;
  if ((v9 - 48) <= *(_DWORD *)(a1 + 28))
  {
    sub_20ABDC5DC(a1, v9 - 48);
    return (unsigned __int8 *)(a2 + 2);
  }
LABEL_42:
  v26 = sub_20ABD494C();
  return sub_20ABDCDC8(v26, v27, v28, v29, v30, v31);
}

unsigned __int8 *sub_20ABDCDC8(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, int a5, int a6)
{
  unsigned __int8 *v6;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  unsigned __int8 *v19;
  int v20;
  int v21;
  unsigned __int8 *v22;
  int v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;

  v6 = a2;
  if (a2 != a3)
  {
    v11 = *a2;
    if (v11 == 42)
    {
      v12 = (_QWORD *)operator new();
      v13 = *(_QWORD *)(a1 + 56);
      v14 = *(_QWORD *)(v13 + 8);
      *v12 = &off_24C380178;
      v12[1] = v14;
      *(_QWORD *)(v13 + 8) = 0;
      v15 = operator new();
      v16 = *(_DWORD *)(a1 + 32);
      *(_QWORD *)(v15 + 8) = *(_QWORD *)(a4 + 8);
      *(_QWORD *)(v15 + 16) = v12;
      *(_QWORD *)v15 = &off_24C3806E0;
      *(_OWORD *)(v15 + 24) = xmmword_20AC05D60;
      *(_DWORD *)(v15 + 40) = v16;
      *(_DWORD *)(v15 + 44) = a5;
      *(_DWORD *)(v15 + 48) = a6;
      *(_BYTE *)(v15 + 52) = 1;
      *(_QWORD *)(a4 + 8) = 0;
      v17 = (_QWORD *)operator new();
      *v17 = &off_24C380268;
      v17[1] = v15;
      *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v17;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(v15 + 16);
      *(_QWORD *)(a4 + 8) = v15;
      ++*(_DWORD *)(a1 + 32);
      return ++v6;
    }
    if (a2 + 1 != a3 && v11 == 92 && a2[1] == 123)
    {
      v19 = &a2[2 * (a2[1] == 123)];
      if (v19 == a3)
        goto LABEL_44;
      v20 = *v19;
      if ((v20 & 0xF8) != 0x30 && (v20 & 0xFE) != 0x38)
        goto LABEL_44;
      v21 = v20 - 48;
      v22 = v19 + 1;
      if (v19 + 1 == a3)
      {
LABEL_16:
        v22 = a3;
      }
      else
      {
        while (1)
        {
          v23 = *v22;
          if ((v23 & 0xF8) != 0x30 && (v23 & 0xFE) != 0x38)
            break;
          if (v21 >= 214748364)
            goto LABEL_44;
          v21 = v23 + 10 * v21 - 48;
          if (++v22 == a3)
            goto LABEL_16;
        }
      }
      if (v22 == v19)
        goto LABEL_44;
      if (v22 == a3)
        goto LABEL_41;
      v24 = v22 + 1;
      v25 = *v22;
      if (v25 != 44)
      {
        if (v24 != a3 && v25 == 92 && *v24 == 125)
        {
          v6 = v22 + 2;
          v37 = v21;
          v38 = (_QWORD *)operator new();
          v39 = *(_QWORD *)(a1 + 56);
          v40 = *(_QWORD *)(v39 + 8);
          *v38 = &off_24C380178;
          v38[1] = v40;
          *(_QWORD *)(v39 + 8) = 0;
          v33 = operator new();
          v34 = v33;
          v35 = *(_DWORD *)(a1 + 32);
          v41 = *(_QWORD *)(a4 + 8);
          *(_QWORD *)v33 = &off_24C3806E0;
          *(_QWORD *)(v33 + 8) = v41;
          *(_QWORD *)(v33 + 16) = v38;
          *(_QWORD *)(v33 + 24) = v37;
          *(_QWORD *)(v33 + 32) = v37;
          goto LABEL_43;
        }
        goto LABEL_41;
      }
      if (v24 != a3)
      {
        v26 = *v24;
        if ((v26 & 0xF8) == 0x30 || (v26 & 0xFE) == 0x38)
        {
          v24 = v22 + 2;
          if (v22 + 2 == a3)
            goto LABEL_41;
          v27 = v26 - 48;
          while (1)
          {
            v26 = *v24;
            if ((v26 & 0xF8) != 0x30 && (v26 & 0xFE) != 0x38)
              break;
            if (v27 >= 214748364)
              goto LABEL_44;
            v27 = v26 + 10 * v27 - 48;
            if (++v24 == a3)
              goto LABEL_41;
          }
        }
        else
        {
          v27 = -1;
        }
        if (v24 != a3 && v24 + 1 != a3 && v26 == 92 && v24[1] == 125)
        {
          v6 = &v24[2 * (v24[1] == 125)];
          if (v27 != -1)
          {
            if (v27 >= v21)
            {
              v28 = v21;
              v29 = v27;
              v30 = (_QWORD *)operator new();
              v31 = *(_QWORD *)(a1 + 56);
              v32 = *(_QWORD *)(v31 + 8);
              *v30 = &off_24C380178;
              v30[1] = v32;
              *(_QWORD *)(v31 + 8) = 0;
              v33 = operator new();
              v34 = v33;
              v35 = *(_DWORD *)(a1 + 32);
              v36 = *(_QWORD *)(a4 + 8);
              *(_QWORD *)v33 = &off_24C3806E0;
              *(_QWORD *)(v33 + 8) = v36;
              *(_QWORD *)(v33 + 16) = v30;
              *(_QWORD *)(v33 + 24) = v28;
              *(_QWORD *)(v33 + 32) = v29;
LABEL_43:
              *(_DWORD *)(v33 + 40) = v35;
              *(_DWORD *)(v33 + 44) = a5;
              *(_DWORD *)(v33 + 48) = a6;
              *(_BYTE *)(v33 + 52) = 1;
              *(_QWORD *)(a4 + 8) = 0;
              v47 = (_QWORD *)operator new();
              *v47 = &off_24C380268;
              v47[1] = v34;
              *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v47;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(v34 + 16);
              *(_QWORD *)(a4 + 8) = v34;
              ++*(_DWORD *)(a1 + 32);
              return v6;
            }
LABEL_44:
            sub_20ABD494C();
            JUMPOUT(0x20ABDD260);
          }
LABEL_42:
          v42 = v21;
          v43 = (_QWORD *)operator new();
          v44 = *(_QWORD *)(a1 + 56);
          v45 = *(_QWORD *)(v44 + 8);
          *v43 = &off_24C380178;
          v43[1] = v45;
          *(_QWORD *)(v44 + 8) = 0;
          v33 = operator new();
          v34 = v33;
          v35 = *(_DWORD *)(a1 + 32);
          v46 = *(_QWORD *)(a4 + 8);
          *(_QWORD *)v33 = &off_24C3806E0;
          *(_QWORD *)(v33 + 8) = v46;
          *(_QWORD *)(v33 + 16) = v43;
          *(_QWORD *)(v33 + 24) = v42;
          *(_QWORD *)(v33 + 32) = -1;
          goto LABEL_43;
        }
      }
LABEL_41:
      sub_20ABD494C();
      goto LABEL_42;
    }
  }
  return v6;
}

void sub_20ABDD264()
{
  JUMPOUT(0x20BD2D02CLL);
}

uint64_t sub_20ABDD278(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *sub_20ABDD28C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_24C380238;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &off_24C380208;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_20ABDD2EC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_24C380238;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &off_24C380208;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  JUMPOUT(0x20BD2D02CLL);
}

void sub_20ABDD35C(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t sub_20ABDD368(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;

  *(_DWORD *)a3 = -994;
  v3 = 8;
  if (a2)
    v3 = 16;
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + v3);
  return result;
}

uint64_t sub_20ABDD38C(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  int v6;
  char *v7;
  BOOL v8;
  char *v9;
  int v11;
  char *v12;
  int v13;
  int v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (**v21)();
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  std::locale v30[3];
  int v31;
  int v32;

  v3 = a2;
  if (a2 == a3)
    return (uint64_t)v3;
  v6 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 != a3)
      {
        v23 = a2[1];
        if (v23 == 66)
        {
          v24 = operator new();
          v26 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          *(_QWORD *)v24 = &off_24C3801A8;
          *(_QWORD *)(v24 + 8) = v26;
          std::locale::locale((std::locale *)(v24 + 16), (const std::locale *)a1);
          *(_OWORD *)(v24 + 24) = *(_OWORD *)(a1 + 8);
          *(_BYTE *)(v24 + 40) = 1;
        }
        else
        {
          if (v23 != 98)
            return (uint64_t)v3;
          v24 = operator new();
          v25 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          *(_QWORD *)v24 = &off_24C3801A8;
          *(_QWORD *)(v24 + 8) = v25;
          std::locale::locale((std::locale *)(v24 + 16), (const std::locale *)a1);
          *(_OWORD *)(v24 + 24) = *(_OWORD *)(a1 + 8);
          *(_BYTE *)(v24 + 40) = 0;
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v24;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        v3 += 2;
      }
      return (uint64_t)v3;
    }
    if (v6 != 94)
      return (uint64_t)v3;
    v17 = operator new();
    v18 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v19 = *(_QWORD *)(a1 + 56);
    v20 = *(_QWORD *)(v19 + 8);
    v21 = &off_24C380328;
LABEL_19:
    *(_QWORD *)v17 = v21;
    *(_QWORD *)(v17 + 8) = v20;
    *(_BYTE *)(v17 + 16) = v18;
    *(_QWORD *)(v19 + 8) = v17;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    return (uint64_t)++v3;
  }
  if (v6 == 36)
  {
    v17 = operator new();
    v18 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v19 = *(_QWORD *)(a1 + 56);
    v20 = *(_QWORD *)(v19 + 8);
    v21 = &off_24C380388;
    goto LABEL_19;
  }
  v8 = v6 == 40;
  v7 = a2 + 1;
  v8 = !v8 || v7 == a3;
  if (v8)
    return (uint64_t)v3;
  v8 = *v7 == 63;
  v9 = a2 + 2;
  if (!v8 || v9 == a3)
    return (uint64_t)v3;
  v11 = *v9;
  if (v11 == 33)
  {
    sub_20ABDDE38((uint64_t)v30);
    v31 = *(_DWORD *)(a1 + 24);
    v12 = (char *)sub_20ABD425C(v30, v3 + 3, a3);
    v13 = v32;
    v14 = *(_DWORD *)(a1 + 28);
    v15 = a1;
    v16 = 1;
    goto LABEL_28;
  }
  if (v11 != 61)
    return (uint64_t)v3;
  sub_20ABDDE38((uint64_t)v30);
  v31 = *(_DWORD *)(a1 + 24);
  v12 = (char *)sub_20ABD425C(v30, v3 + 3, a3);
  v13 = v32;
  v14 = *(_DWORD *)(a1 + 28);
  v15 = a1;
  v16 = 0;
LABEL_28:
  sub_20ABDDE90(v15, (uint64_t)v30, v16, v14);
  *(_DWORD *)(a1 + 28) += v13;
  if (v12 != a3 && *v12 == 41)
  {
    v3 = v12 + 1;
    sub_20ABDDF54(v30);
    return (uint64_t)v3;
  }
  v27 = sub_20ABD494C();
  return sub_20ABDD638(v27, v28, v29);
}

char *sub_20ABDD638(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  int v5;
  char *v7;
  _DWORD *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  char v29;
  int v30;
  uint64_t v31;
  char v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  char v37;
  int v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  char v44;
  int v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;

  v3 = a2;
  if (a2 == a3)
    return a2;
  v5 = *a2;
  v7 = a2;
  switch(*a2)
  {
    case '$':
    case ')':
    case ']':
    case '^':
    case '|':
    case '}':
      return v7;
    case '(':
      if (a2 + 1 == a3)
        goto LABEL_54;
      if (a2 + 2 != a3 && a2[1] == 63 && a2[2] == 58)
      {
        v8 = (_DWORD *)(a1 + 36);
        ++*(_DWORD *)(a1 + 36);
        v9 = sub_20ABDDB30(a1, a2 + 3, a3);
        if (v9 == a3 || (v3 = v9, *v9 != 41))
        {
LABEL_54:
          sub_20ABD494C();
          goto LABEL_55;
        }
      }
      else
      {
        if ((*(_BYTE *)(a1 + 24) & 2) != 0)
        {
          v18 = *(_DWORD *)(a1 + 28);
        }
        else
        {
          v17 = operator new();
          v18 = *(_DWORD *)(a1 + 28) + 1;
          *(_DWORD *)(a1 + 28) = v18;
          v19 = *(_QWORD *)(a1 + 56);
          v20 = *(_QWORD *)(v19 + 8);
          *(_QWORD *)v17 = &off_24C3806B0;
          *(_QWORD *)(v17 + 8) = v20;
          *(_DWORD *)(v17 + 16) = v18;
          *(_QWORD *)(v19 + 8) = v17;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        }
        v8 = (_DWORD *)(a1 + 36);
        ++*(_DWORD *)(a1 + 36);
        v21 = sub_20ABDDB30(a1, v3 + 1, a3);
        if (v21 == a3)
          goto LABEL_54;
        v3 = v21;
        if (*v21 != 41)
          goto LABEL_54;
        if ((*(_BYTE *)(a1 + 24) & 2) == 0)
        {
          v22 = operator new();
          v23 = *(_QWORD *)(a1 + 56);
          v24 = *(_QWORD *)(v23 + 8);
          *(_QWORD *)v22 = &off_24C380680;
          *(_QWORD *)(v22 + 8) = v24;
          *(_DWORD *)(v22 + 16) = v18;
          *(_QWORD *)(v23 + 8) = v22;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        }
      }
      --*v8;
      return v3 + 1;
    case '*':
    case '+':
    case '?':
    case '{':
      sub_20ABD494C();
      goto LABEL_54;
    case '.':
      v10 = (_QWORD *)operator new();
      v11 = *(_QWORD *)(a1 + 56);
      v12 = *(_QWORD *)(v11 + 8);
      *v10 = &off_24C380650;
      v10[1] = v12;
      *(_QWORD *)(v11 + 8) = v10;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      return v3 + 1;
    case '[':
      return (char *)sub_20ABD7A74(a1, a2, a3);
    case '\\':
      if (v5 != 92)
        return a2;
      v14 = a2 + 1;
      if (a2 + 1 == a3)
        goto LABEL_56;
      v15 = *v14;
      v16 = (v15 - 48);
      if (v15 == 48)
      {
        sub_20ABDAEF0(a1, v16);
        return v3 + 2;
      }
      if ((v15 - 49) > 8)
        goto LABEL_39;
      v7 = v3 + 2;
      if (v3 + 2 == a3)
      {
        v7 = a3;
      }
      else
      {
        while (1)
        {
          v25 = *v7;
          if ((v25 - 48) > 9)
            break;
          if (v16 >= 0x19999999)
            goto LABEL_55;
          ++v7;
          LODWORD(v16) = v25 + 10 * v16 - 48;
          if (v7 == a3)
          {
            v7 = a3;
            break;
          }
        }
        if (!(_DWORD)v16)
        {
LABEL_55:
          sub_20ABD494C();
LABEL_56:
          v54 = sub_20ABD494C();
          return sub_20ABDDB30(v54, v55, v56);
        }
      }
      if (v16 > *(_DWORD *)(a1 + 28))
        goto LABEL_55;
      sub_20ABDC5DC(a1, v16);
      if (v7 == v14)
      {
LABEL_39:
        switch(*v14)
        {
          case 'D':
            v26 = operator new();
            v27 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
            v28 = *(_DWORD *)(a1 + 24);
            v29 = v28 & 1;
            v30 = (v28 >> 3) & 1;
            v31 = a1;
            v32 = 1;
            goto LABEL_47;
          case 'S':
            v34 = operator new();
            v35 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
            v36 = *(_DWORD *)(a1 + 24);
            v37 = v36 & 1;
            v38 = (v36 >> 3) & 1;
            v39 = a1;
            v40 = 1;
            goto LABEL_49;
          case 'W':
            v41 = operator new();
            v42 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
            v43 = *(_DWORD *)(a1 + 24);
            v44 = v43 & 1;
            v45 = (v43 >> 3) & 1;
            v46 = a1;
            v47 = 1;
            goto LABEL_52;
          case 'd':
            v26 = operator new();
            v27 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
            v48 = *(_DWORD *)(a1 + 24);
            v29 = v48 & 1;
            v30 = (v48 >> 3) & 1;
            v31 = a1;
            v32 = 0;
LABEL_47:
            v49 = sub_20ABD9A14(v26, v31, v27, v32, v29, v30);
            *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v49;
            *(_QWORD *)(a1 + 56) = v49;
            v50 = *(_DWORD *)(v49 + 160) | 0x400;
            goto LABEL_50;
          case 's':
            v34 = operator new();
            v35 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
            v51 = *(_DWORD *)(a1 + 24);
            v37 = v51 & 1;
            v38 = (v51 >> 3) & 1;
            v39 = a1;
            v40 = 0;
LABEL_49:
            v49 = sub_20ABD9A14(v34, v39, v35, v40, v37, v38);
            *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v49;
            *(_QWORD *)(a1 + 56) = v49;
            v50 = *(_DWORD *)(v49 + 160) | 0x4000;
LABEL_50:
            *(_DWORD *)(v49 + 160) = v50;
            v7 = v3 + 2;
            break;
          case 'w':
            v41 = operator new();
            v42 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
            v52 = *(_DWORD *)(a1 + 24);
            v44 = v52 & 1;
            v45 = (v52 >> 3) & 1;
            v46 = a1;
            v47 = 0;
LABEL_52:
            v53 = sub_20ABD9A14(v41, v46, v42, v47, v44, v45);
            *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v53;
            *(_QWORD *)(a1 + 56) = v53;
            *(_DWORD *)(v53 + 160) |= 0x500u;
            sub_20ABD9B1C(v53, 95);
            v7 = v3 + 2;
            break;
          default:
            v33 = sub_20ABDB308(a1, (unsigned __int8 *)v3 + 1, (unsigned __int8 *)a3, 0);
            if (v33 == v14)
              v7 = v3;
            else
              v7 = v33;
            break;
        }
      }
      break;
    default:
      sub_20ABDAEF0(a1, (char)v5);
      return v3 + 1;
  }
  return v7;
}

char *sub_20ABDDB30(uint64_t a1, char *a2, char *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  int v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = a2;
  while (1)
  {
    v8 = v7;
    v7 = (char *)sub_20ABDD38C(a1, v7, a3);
    if (v7 == v8)
      break;
LABEL_2:
    if (v7 == v8)
      goto LABEL_6;
  }
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_DWORD *)(a1 + 28);
  v11 = (char *)sub_20ABDD638(a1, (int)v8, (int)a3);
  if (v11 != v8)
  {
    v7 = sub_20ABD8834(a1, v11, a3, v9, v10 + 1, *(_DWORD *)(a1 + 28) + 1);
    goto LABEL_2;
  }
LABEL_6:
  if (v8 == a2)
  {
    v12 = (_QWORD *)operator new();
    v13 = *(_QWORD *)(a1 + 56);
    v14 = *(_QWORD *)(v13 + 8);
    *v12 = &off_24C380178;
    v12[1] = v14;
    *(_QWORD *)(v13 + 8) = v12;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  }
  if (v8 == a3)
    return a3;
  while (2)
  {
    if (*v8 != 124)
      return v8;
    v21 = *(_QWORD *)(a1 + 56);
    v22 = v8 + 1;
    v23 = v8 + 1;
    while (2)
    {
      v8 = v23;
      v23 = (char *)sub_20ABDD38C(a1, v23, a3);
      if (v23 != v8)
      {
LABEL_14:
        if (v23 == v8)
          goto LABEL_17;
        continue;
      }
      break;
    }
    v24 = *(_QWORD *)(a1 + 56);
    v25 = *(_DWORD *)(a1 + 28);
    v26 = (char *)sub_20ABDD638(a1, (int)v8, (int)a3);
    if (v26 != v8)
    {
      v23 = sub_20ABD8834(a1, v26, a3, v24, v25 + 1, *(_DWORD *)(a1 + 28) + 1);
      goto LABEL_14;
    }
LABEL_17:
    if (v8 == v22)
    {
      v27 = (_QWORD *)operator new();
      v28 = *(_QWORD *)(a1 + 56);
      v29 = *(_QWORD *)(v28 + 8);
      *v27 = &off_24C380178;
      v27[1] = v29;
      *(_QWORD *)(v28 + 8) = v27;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    v15 = (_QWORD *)operator new();
    v16 = *(_QWORD *)(v21 + 8);
    v15[1] = *(_QWORD *)(v6 + 8);
    v15[2] = v16;
    *v15 = &off_24C380088;
    *(_QWORD *)(v6 + 8) = v15;
    *(_QWORD *)(v21 + 8) = 0;
    v17 = (_QWORD *)operator new();
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    *v17 = &off_24C380178;
    v17[1] = v18;
    *(_QWORD *)(v21 + 8) = v17;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v19 = (_QWORD *)operator new();
    v20 = *(_QWORD *)(v21 + 8);
    *v19 = &unk_24C380620;
    v19[1] = v20;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v19;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(v21 + 8);
    if (v8 != a3)
      continue;
    return a3;
  }
}

_QWORD *sub_20ABDDDA8(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24C380208;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20ABDDDE8(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_24C380208;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x20BD2D02CLL);
}

uint64_t sub_20ABDDE38(uint64_t a1)
{
  const std::locale *v2;

  v2 = (const std::locale *)MEMORY[0x20BD2CFC0]();
  *(_QWORD *)(a1 + 8) = std::locale::use_facet(v2, MEMORY[0x24BEDB350]);
  *(_QWORD *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x24BEDB4B0]);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  return a1;
}

std::locale *sub_20ABDDE90(uint64_t a1, uint64_t a2, char a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  std::locale *result;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  v8 = operator new();
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  *(_QWORD *)v8 = &off_24C3800E8;
  *(_QWORD *)(v8 + 8) = v9;
  result = std::locale::locale((std::locale *)(v8 + 16), (const std::locale *)a2);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v8 + 40) = *(_OWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(v8 + 56) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(v8 + 64) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_QWORD *)(v8 + 72) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(v8 + 80) = a4;
  *(_BYTE *)(v8 + 84) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v8;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  return result;
}

void sub_20ABDDF54(std::locale *this)
{
  std::__shared_weak_count *locale;
  unint64_t *p_shared_owners;
  unint64_t v4;

  locale = (std::__shared_weak_count *)this[6].__locale_;
  if (locale)
  {
    p_shared_owners = (unint64_t *)&locale->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
      std::__shared_weak_count::__release_weak(locale);
    }
  }
  std::locale::~locale(this);
}

std::locale *sub_20ABDDFAC(std::locale *a1)
{
  std::locale *v2;
  std::__shared_weak_count *locale;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::locale::__imp *v6;

  a1->__locale_ = (std::locale::__imp *)&off_24C3800E8;
  v2 = a1 + 2;
  locale = (std::__shared_weak_count *)a1[8].__locale_;
  if (locale)
  {
    p_shared_owners = (unint64_t *)&locale->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
      std::__shared_weak_count::__release_weak(locale);
    }
  }
  std::locale::~locale(v2);
  a1->__locale_ = (std::locale::__imp *)&off_24C380208;
  v6 = a1[1].__locale_;
  if (v6)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v6 + 8))(v6);
  return a1;
}

void sub_20ABDE044(std::locale *a1)
{
  std::locale *v2;
  std::__shared_weak_count *locale;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::locale::__imp *v6;

  a1->__locale_ = (std::locale::__imp *)&off_24C3800E8;
  v2 = a1 + 2;
  locale = (std::__shared_weak_count *)a1[8].__locale_;
  if (locale)
  {
    p_shared_owners = (unint64_t *)&locale->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
      std::__shared_weak_count::__release_weak(locale);
    }
  }
  std::locale::~locale(v2);
  a1->__locale_ = (std::locale::__imp *)&off_24C380208;
  v6 = a1[1].__locale_;
  if (v6)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v6 + 8))(v6);
  JUMPOUT(0x20BD2D02CLL);
}

void sub_20ABDE0EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  char v10;
  char *v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t i;
  char *v17;
  uint64_t v18;
  void *__p;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  char v28;
  char v29;
  uint64_t v30;

  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0uLL;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  __p = 0;
  v20 = 0;
  v4 = a1 + 16;
  v5 = (*(_DWORD *)(a1 + 44) + 1);
  v7 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v21 = 0;
  *(_QWORD *)&v22 = v6;
  *((_QWORD *)&v22 + 1) = v6;
  v23 = 0;
  sub_20ABD4960((uint64_t)&__p, v5, &v22);
  v24 = v7;
  v25 = v7;
  v26 = 0;
  v27 = v22;
  v28 = v23;
  v30 = v7;
  v29 = 1;
  v8 = *(_QWORD *)(a2 + 16);
  if (*(_BYTE *)(a2 + 92))
    v9 = v8 == *(_QWORD *)(a2 + 8);
  else
    v9 = 0;
  v10 = v9;
  if (*(unsigned __int8 *)(a1 + 84) == sub_20ABD4AE8(v4, v8, *(_QWORD *)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v10))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    v11 = (char *)__p;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 8);
  v11 = (char *)__p;
  v12 = 0xAAAAAAAAAAAAAAABLL * ((v20 - (uint64_t)__p) >> 3);
  if (v12 < 2)
  {
LABEL_13:
    if (!v11)
      return;
    goto LABEL_14;
  }
  v13 = *(_DWORD *)(a1 + 80);
  v14 = *(_QWORD *)(a2 + 32);
  v15 = 2;
  for (i = 1; i < v12; i = v15++)
  {
    v17 = &v11[24 * i];
    v18 = v14 + 24 * (v13 + v15 - 2);
    *(_OWORD *)v18 = *(_OWORD *)v17;
    *(_BYTE *)(v18 + 16) = v17[16];
  }
LABEL_14:
  operator delete(v11);
}

std::locale *sub_20ABDE268(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_24C3801A8;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_24C380208;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

