uint64_t initializeBufferWithCopyOfBuffer for ContentMargins(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for ContentMargins(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ContentMargins(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
  sub_23BE9F404(a1, &qword_256AE33D0);
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for DynamicBrickViewLayout(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for DynamicBrickViewLayout(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
  sub_23BE9F404(a1, &qword_256AE33D8);
}

uint64_t sub_23BE9ED7C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;

  v2 = sub_23BFF90F4();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE33E0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE33E8);
  MEMORY[0x24BDAC7A8](v40);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE33F0);
  MEMORY[0x24BDAC7A8](v43);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v41 = (uint64_t)&v40 - v14;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE33F8);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*v42 & 1) != 0)
  {
    sub_23BFF90E8();
    v18 = sub_23BFF8A1C();
    v42 = a1;
    v19 = v18;
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v8, v5, v2);
    *(_DWORD *)&v8[*(int *)(v6 + 36)] = v19;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    LOBYTE(v19) = sub_23BFF8B6C();
    sub_23BFF83F8();
    v21 = v20;
    v23 = v22;
    v25 = v24;
    v27 = v26;
    sub_23BE9F190((uint64_t)v8, (uint64_t)v10, &qword_256AE33E0);
    v28 = &v10[*(int *)(v40 + 36)];
    *v28 = v19;
    *((_QWORD *)v28 + 1) = v21;
    *((_QWORD *)v28 + 2) = v23;
    *((_QWORD *)v28 + 3) = v25;
    *((_QWORD *)v28 + 4) = v27;
    v28[40] = 0;
    sub_23BE9F3A0((uint64_t)v8, &qword_256AE33E0);
    LOBYTE(v19) = sub_23BFF8B84();
    sub_23BFF83F8();
    v30 = v29;
    v32 = v31;
    v34 = v33;
    v36 = v35;
    sub_23BE9F190((uint64_t)v10, (uint64_t)v12, &qword_256AE33E8);
    v37 = &v12[*(int *)(v43 + 36)];
    *v37 = v19;
    *((_QWORD *)v37 + 1) = v30;
    *((_QWORD *)v37 + 2) = v32;
    *((_QWORD *)v37 + 3) = v34;
    *((_QWORD *)v37 + 4) = v36;
    v37[40] = 0;
    sub_23BE9F3A0((uint64_t)v10, &qword_256AE33E8);
    v38 = v41;
    sub_23BE9F148((uint64_t)v12, v41);
    sub_23BE9F190(v38, (uint64_t)v17, &qword_256AE33F0);
    swift_storeEnumTagMultiPayload();
    sub_23BE9F234(&qword_256AE3400, &qword_256AE33F0, sub_23BE9F218);
    sub_23BFF895C();
    return sub_23BE9F3A0(v38, &qword_256AE33F0);
  }
  else
  {
    swift_storeEnumTagMultiPayload();
    sub_23BE9F234(&qword_256AE3400, &qword_256AE33F0, sub_23BE9F218);
    return sub_23BFF895C();
  }
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x242615180]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_23BE9F148(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE33F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BE9F190(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x24261518C](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_23BE9F218()
{
  return sub_23BE9F234(&qword_256AE3408, &qword_256AE33E8, (uint64_t (*)(void))sub_23BE9F2A0);
}

uint64_t sub_23BE9F234(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t result;
  uint64_t v6;
  _QWORD v7[2];

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v7[0] = a3();
    v7[1] = MEMORY[0x24BDECC60];
    result = MEMORY[0x242615198](MEMORY[0x24BDED308], v6, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23BE9F2A0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AE3410;
  if (!qword_256AE3410)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE33E0);
    v2[0] = sub_23BE9F30C();
    v2[1] = sub_23BE9F354();
    result = MEMORY[0x242615198](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AE3410);
  }
  return result;
}

unint64_t sub_23BE9F30C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256AE3418;
  if (!qword_256AE3418)
  {
    v1 = sub_23BFF90F4();
    result = MEMORY[0x242615198](MEMORY[0x24BDF4900], v1);
    atomic_store(result, (unint64_t *)&qword_256AE3418);
  }
  return result;
}

unint64_t sub_23BE9F354()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256AE3420;
  if (!qword_256AE3420)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3428);
    result = MEMORY[0x242615198](MEMORY[0x24BDF0710], v1);
    atomic_store(result, (unint64_t *)&qword_256AE3420);
  }
  return result;
}

uint64_t sub_23BE9F3A0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_23BE9F404(a1, &qword_256AE3430);
}

void type metadata accessor for CGPoint(uint64_t a1)
{
  sub_23BE9F404(a1, &qword_256AE3438);
}

void sub_23BE9F404(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

double MonogramVerticalStackViewLayout.artworkAspectRatio.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

double MonogramVerticalStackViewLayout.artworkToTitleSpacing.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

FitnessCanvasUI::MonogramVerticalStackViewLayout __swiftcall MonogramVerticalStackViewLayout.init(artworkAspectRatio:artworkToTitleSpacing:)(CGSize artworkAspectRatio, Swift::Double artworkToTitleSpacing)
{
  CGFloat *v2;
  FitnessCanvasUI::MonogramVerticalStackViewLayout result;

  *v2 = artworkAspectRatio.width;
  v2[1] = artworkAspectRatio.height;
  v2[2] = artworkToTitleSpacing;
  result.artworkAspectRatio.height = artworkAspectRatio.height;
  result.artworkAspectRatio.width = artworkAspectRatio.width;
  result.artworkToTitleSpacing = artworkToTitleSpacing;
  return result;
}

BOOL sub_23BE9F46C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_23BE9F484()
{
  sub_23BFF99D0();
  sub_23BFF99DC();
  return sub_23BFF9A00();
}

uint64_t sub_23BE9F4C8()
{
  return sub_23BFF99DC();
}

uint64_t sub_23BE9F4F0()
{
  sub_23BFF99D0();
  sub_23BFF99DC();
  return sub_23BFF9A00();
}

unint64_t sub_23BE9F530()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000015;
  else
    return 0xD000000000000012;
}

uint64_t sub_23BE9F570@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BEA1AD0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BE9F594()
{
  return 0;
}

void sub_23BE9F5A0(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_23BE9F5AC()
{
  sub_23BE9F7F4();
  return sub_23BFF9A30();
}

uint64_t sub_23BE9F5D4()
{
  sub_23BE9F7F4();
  return sub_23BFF9A3C();
}

__n128 sub_23BE9F5FC()
{
  __n128 result;

  __asm { FMOV            V0.2D, #1.0 }
  xmmword_256AE3440 = (__int128)result;
  qword_256AE3450 = 0x4014000000000000;
  return result;
}

double static MonogramVerticalStackViewLayout.default.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  if (qword_256AE3340 != -1)
    swift_once();
  result = *(double *)&qword_256AE3450;
  *(_OWORD *)a1 = xmmword_256AE3440;
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t MonogramVerticalStackViewLayout.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  char v12;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3458);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8]();
  v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v9 = v1[1];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BE9F7F4();
  sub_23BFF9A18();
  v11[0] = v8;
  v11[1] = v9;
  v12 = 0;
  type metadata accessor for CGSize(0);
  sub_23BEA1BB8(&qword_256AE3468, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, MEMORY[0x24BDBD848]);
  sub_23BFF9940();
  if (!v2)
  {
    LOBYTE(v11[0]) = 1;
    sub_23BFF9928();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_23BE9F7F4()
{
  unint64_t result;

  result = qword_256AE3460;
  if (!qword_256AE3460)
  {
    result = MEMORY[0x242615198](&unk_23BFFA244, &type metadata for MonogramVerticalStackViewLayout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE3460);
  }
  return result;
}

uint64_t MonogramVerticalStackViewLayout.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[16];
  uint64_t v15;
  uint64_t v16;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3470);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8]();
  v8 = &v14[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BE9F7F4();
  sub_23BFF9A0C();
  if (!v2)
  {
    type metadata accessor for CGSize(0);
    v14[15] = 0;
    sub_23BEA1BB8(&qword_256AE3478, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, MEMORY[0x24BDBD860]);
    sub_23BFF98C8();
    v9 = v15;
    v10 = v16;
    LOBYTE(v15) = 1;
    sub_23BFF98B0();
    v12 = v11;
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v9;
    a2[1] = v10;
    a2[2] = v12;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_23BE9F9F0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return MonogramVerticalStackViewLayout.init(from:)(a1, a2);
}

uint64_t sub_23BE9FA04(_QWORD *a1)
{
  return MonogramVerticalStackViewLayout.encode(to:)(a1);
}

uint64_t MonogramVerticalStackViewLayout.hash(into:)()
{
  sub_23BFF99F4();
  sub_23BFF99F4();
  return sub_23BFF99F4();
}

BOOL static MonogramVerticalStackViewLayout.== infix(_:_:)(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

uint64_t MonogramVerticalStackViewLayout.hashValue.getter()
{
  sub_23BFF99D0();
  sub_23BFF99F4();
  sub_23BFF99F4();
  sub_23BFF99F4();
  return sub_23BFF9A00();
}

uint64_t sub_23BE9FB14()
{
  sub_23BEA0B6C();
  return sub_23BFF99F4();
}

uint64_t sub_23BE9FB4C()
{
  sub_23BFF99D0();
  sub_23BEA0B6C();
  sub_23BFF99F4();
  return sub_23BFF9A00();
}

BOOL sub_23BE9FBAC(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

uint64_t sub_23BE9FBDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v20;
  int *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;

  v20 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a9 = *(_OWORD *)a1;
  *(_QWORD *)(a9 + 16) = v20;
  v21 = (int *)type metadata accessor for MonogramVerticalStackView(0, a14, a15, a4);
  v22 = (_QWORD *)(a9 + v21[10]);
  *v22 = a3;
  v22[1] = a4;
  v22[2] = a5;
  v22[3] = a6;
  v23 = (_QWORD *)(a9 + v21[11]);
  *v23 = a7;
  v23[1] = a8;
  v23[2] = a10;
  v23[3] = a11;
  v24 = (_QWORD *)(a9 + v21[12]);
  *v24 = a12;
  v24[1] = a13;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a14 - 8) + 32))(a9 + v21[9], a2, a14);
}

uint64_t sub_23BE9FCA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD v77[2];
  _QWORD v78[2];
  _QWORD v79[2];
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v73 = a2;
  v3 = sub_23BFF8680();
  v4 = (uint64_t (*)(uint64_t))MEMORY[0x24BDED868];
  v5 = *(_QWORD *)(v3 - 8);
  v6 = v3;
  v55 = v3;
  v72 = v5;
  MEMORY[0x24BDAC7A8](v3);
  v71 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23BFF8710();
  v69 = *(_QWORD *)(v8 - 8);
  v70 = v8;
  v9 = MEMORY[0x24BDAC7A8](v8);
  v68 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 - 8);
  v66 = *(_QWORD *)(v11 + 64);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = *(_QWORD *)(a1 + 16);
  sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3520);
  v80 = sub_23BFF862C();
  v81 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3528);
  v82 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3530);
  v83 = v82;
  swift_getTupleTypeMetadata();
  v14 = sub_23BFF9220();
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v14);
  v15 = sub_23BFF90AC();
  v16 = sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3538);
  v17 = sub_23BFF862C();
  v79[0] = MEMORY[0x242615198](MEMORY[0x24BDF4700], v15);
  v79[1] = MEMORY[0x24BDEBEE0];
  v18 = MEMORY[0x24BDED308];
  v19 = MEMORY[0x242615198](MEMORY[0x24BDED308], v16, v79);
  v20 = sub_23BEA1F94(&qword_256AE3540, &qword_256AE3538, MEMORY[0x24BDEFAD8]);
  v78[0] = v19;
  v78[1] = v20;
  v61 = v17;
  v62 = MEMORY[0x242615198](v18, v17, v78);
  v21 = sub_23BFF9040();
  v63 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v60 = (char *)&v52 - v22;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3548);
  v57 = v21;
  v23 = sub_23BFF862C();
  v64 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v58 = (char *)&v52 - v24;
  v25 = MEMORY[0x242615198](MEMORY[0x24BDF43B0], v21);
  v52 = v25;
  v26 = sub_23BEA1F94(&qword_256AE3550, &qword_256AE3548, MEMORY[0x24BDF1028]);
  v77[0] = v25;
  v77[1] = v26;
  v27 = MEMORY[0x242615198](v18, v23, v77);
  v54 = v27;
  v53 = sub_23BEA1BB8(&qword_256AE3558, v4, MEMORY[0x24BDED858]);
  v80 = v23;
  v81 = v6;
  v82 = v27;
  v83 = v53;
  v28 = MEMORY[0x24261512C](0, &v80, MEMORY[0x24BDF22B8], 0);
  v59 = *(_QWORD *)(v28 - 8);
  v29 = MEMORY[0x24BDAC7A8](v28);
  v31 = (char *)&v52 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v29);
  v56 = (uint64_t)&v52 - v32;
  v33 = v11;
  v34 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v35 = v67;
  v34(v13, v67, a1);
  v36 = (*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
  v37 = swift_allocObject();
  v38 = a1;
  v39 = *(_QWORD *)(a1 + 24);
  v40 = v65;
  *(_QWORD *)(v37 + 16) = v65;
  *(_QWORD *)(v37 + 24) = v39;
  (*(void (**)(unint64_t, char *, uint64_t))(v33 + 32))(v37 + v36, v13, v38);
  v74 = v40;
  v75 = v39;
  v76 = v35;
  v41 = v60;
  sub_23BFF9034();
  v42 = v68;
  sub_23BFF8704();
  v43 = v58;
  v44 = v57;
  sub_23BFF8DC4();
  (*(void (**)(char *, uint64_t))(v69 + 8))(v42, v70);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v41, v44);
  v45 = v71;
  sub_23BFF8674();
  v46 = v55;
  v47 = v54;
  v48 = v53;
  sub_23BFF8CF8();
  (*(void (**)(char *, uint64_t))(v72 + 8))(v45, v46);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v43, v23);
  v80 = v23;
  v81 = v46;
  v82 = v47;
  v83 = v48;
  swift_getOpaqueTypeConformance2();
  v49 = v56;
  sub_23BEA72EC((uint64_t)v31, v28, v56);
  v50 = *(void (**)(char *, uint64_t))(v59 + 8);
  v50(v31, v28);
  sub_23BEA5C0C(v49, v28, v73);
  return ((uint64_t (*)(uint64_t, uint64_t))v50)(v49, v28);
}

uint64_t sub_23BEA02A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[2];
  _QWORD v34[4];
  uint64_t v35;
  uint64_t v36;

  v27 = a1;
  v28 = a3;
  v29 = a4;
  sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3520);
  v34[2] = sub_23BFF862C();
  v34[3] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3528);
  v35 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3530);
  v36 = v35;
  swift_getTupleTypeMetadata();
  v5 = sub_23BFF9220();
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v5);
  v6 = sub_23BFF90AC();
  v24 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v24 - v7;
  v9 = sub_23BFF862C();
  v25 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v24 - v10;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3538);
  v12 = sub_23BFF862C();
  v26 = *(_QWORD *)(v12 - 8);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v24 - v16;
  sub_23BFF889C();
  v30 = a2;
  v31 = v28;
  v32 = v27;
  sub_23BFF90A0();
  sub_23BFF91A8();
  v18 = MEMORY[0x242615198](MEMORY[0x24BDF4700], v6);
  sub_23BFF8E9C();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v8, v6);
  v34[0] = v18;
  v34[1] = MEMORY[0x24BDEBEE0];
  v19 = MEMORY[0x24BDED308];
  v20 = MEMORY[0x242615198](MEMORY[0x24BDED308], v9, v34);
  sub_23BEA1D38();
  sub_23BFF8D4C();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v11, v9);
  v21 = sub_23BEA1F94(&qword_256AE3540, &qword_256AE3538, MEMORY[0x24BDEFAD8]);
  v33[0] = v20;
  v33[1] = v21;
  MEMORY[0x242615198](v19, v12, v33);
  sub_23BEA72EC((uint64_t)v15, v12, (uint64_t)v17);
  v22 = *(void (**)(char *, uint64_t))(v26 + 8);
  v22(v15, v12);
  sub_23BEA5C0C((uint64_t)v17, v12, v29);
  return ((uint64_t (*)(char *, uint64_t))v22)(v17, v12);
}

uint64_t sub_23BEA05E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t (*v44)(char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (*v67)(char *, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t KeyPath;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  _QWORD v83[2];
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110[4];
  _QWORD v111[2];
  _QWORD v112[3];
  unsigned __int8 v113;
  uint64_t v114;
  unsigned __int8 v115;
  uint64_t v116;
  uint64_t v117;

  v68 = a4;
  v7 = sub_23BFF862C();
  v78 = *(_QWORD *)(v7 - 8);
  ((void (*)(void))MEMORY[0x24BDAC7A8])();
  v9 = (char *)&v46 - v8;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3520);
  v10 = sub_23BFF862C();
  v73 = *(_QWORD *)(v10 - 8);
  v11 = ((uint64_t (*)(void))MEMORY[0x24BDAC7A8])();
  v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v46 - v14;
  v71 = type metadata accessor for MonogramVerticalStackView(0, a2, a3, v16);
  sub_23BFF8CEC();
  v112[0] = a3;
  v112[1] = MEMORY[0x24BDEEC40];
  v17 = MEMORY[0x24BDED308];
  v18 = MEMORY[0x242615198](MEMORY[0x24BDED308], v7, v112);
  sub_23BEA1D7C();
  sub_23BFF8F44();
  (*(void (**)(char *, uint64_t))(v78 + 8))(v9, v7);
  v19 = sub_23BEA1F94(&qword_256AE3570, &qword_256AE3520, MEMORY[0x24BDEB950]);
  v111[0] = v18;
  v111[1] = v19;
  v20 = MEMORY[0x242615198](v17, v10, v111);
  v74 = v15;
  v66 = v20;
  sub_23BEA72EC((uint64_t)v13, v10, (uint64_t)v15);
  v21 = *(uint64_t (**)(char *, uint64_t))(v73 + 8);
  v75 = v13;
  v78 = v10;
  v67 = v21;
  v21(v13, v10);
  sub_23BFF91C0();
  v22 = v71;
  sub_23BFF84D0();
  v58 = v113;
  v57 = v114;
  v56 = v115;
  v54 = v117;
  v55 = v116;
  v23 = (uint64_t *)(a1 + *(int *)(v22 + 40));
  v24 = *v23;
  v25 = v23[1];
  v26 = v23[2];
  v65 = v23[3];
  v61 = v25;
  v59 = v112[2];
  v60 = v26;
  if (v65)
  {
    v77 = v26 & 1;
    KeyPath = swift_getKeyPath();
    v76 = 2;
    v27 = 256;
    v28 = v24;
  }
  else
  {
    v28 = 0;
    v25 = 0;
    v76 = 0;
    v77 = 0;
    v27 = 0;
    KeyPath = 0;
  }
  v29 = (uint64_t *)(a1 + *(int *)(v22 + 44));
  v30 = *v29;
  v31 = v29[1];
  v32 = v29[2];
  v64 = v29[3];
  v62 = v24;
  v53 = v32;
  v47 = v31;
  v48 = v30;
  if (v64)
  {
    v69 = v32 & 1;
    v33 = swift_getKeyPath();
    v70 = 2;
    v71 = v33;
    v63 = 256;
    v34 = v30;
    v35 = v31;
  }
  else
  {
    v34 = 0;
    v35 = 0;
    v69 = 0;
    v70 = 0;
    v63 = 0;
    v71 = 0;
  }
  v36 = (uint64_t)v75;
  (*(void (**)(char *, char *, uint64_t))(v73 + 16))(v75, v74, v78);
  v102 = 0;
  v103 = 1;
  v104 = v59;
  v105 = v58;
  v106 = v57;
  v107 = v56;
  v108 = v55;
  v109 = v54;
  v110[0] = v36;
  v110[1] = (uint64_t)&v102;
  v94 = v28;
  v95 = v25;
  v49 = v28;
  v50 = v27;
  v51 = v34;
  v52 = v25;
  v37 = v77;
  v38 = v65;
  v96 = v77;
  v97 = v65;
  v98 = v27;
  v99 = KeyPath;
  v100 = v76;
  v101 = 0;
  v86 = v34;
  v87 = v35;
  v46 = v35;
  v39 = v64;
  v88 = v69;
  v89 = v64;
  v90 = v63;
  v91 = v71;
  v92 = v70;
  v93 = 0;
  v110[2] = (uint64_t)&v94;
  v110[3] = (uint64_t)&v86;
  sub_23BEA1DC0(v62, v61, v60, v65);
  sub_23BEA1DC0(v48, v47, v53, v39);
  sub_23BEA1DF0(v28, v25, v37, v38);
  v40 = v34;
  v41 = v46;
  v42 = v69;
  sub_23BEA1DF0(v40, v46, v69, v39);
  v83[0] = v78;
  v83[1] = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3528);
  v84 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3530);
  v85 = v84;
  v79 = v66;
  v80 = sub_23BEA1F34((unint64_t *)&qword_256AE3578, &qword_256AE3528, MEMORY[0x24BDF4610], MEMORY[0x24BDEBEE0]);
  v81 = sub_23BEA1E2C();
  v82 = v81;
  sub_23BF93EF0(v110, 4uLL, (uint64_t)v83);
  sub_23BEA1FD4(v49, v52, v77, v38);
  sub_23BEA1FD4(v51, v41, v42, v39);
  v43 = v78;
  v44 = v67;
  v67(v74, v78);
  sub_23BEA1FD4(v86, v87, v88, v89);
  sub_23BEA1FD4(v94, v95, v96, v97);
  return v44(v75, v43);
}

uint64_t sub_23BEA0B50()
{
  return sub_23BFF8D7C();
}

uint64_t sub_23BEA0B6C()
{
  sub_23BFF99F4();
  return sub_23BFF99F4();
}

unint64_t sub_23BEA0BB8()
{
  unint64_t result;

  result = qword_256AE3480[0];
  if (!qword_256AE3480[0])
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for MonogramVerticalStackViewLayout, &type metadata for MonogramVerticalStackViewLayout);
    atomic_store(result, qword_256AE3480);
  }
  return result;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for MonogramVerticalStackViewLayout(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for MonogramVerticalStackViewLayout(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for MonogramVerticalStackViewLayout()
{
  return &type metadata for MonogramVerticalStackViewLayout;
}

uint64_t sub_23BEA0C6C()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_23BEA0C74()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_23BEA0D04(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64) + 7;
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((((((v6 + ((v5 + 24) & ~v5)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8)
     + 16 > 0x18)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    v10 = ((unint64_t)a1 + v5 + 24) & ~v5;
    v11 = ((unint64_t)a2 + v5 + 24) & ~v5;
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v10, v11);
    v12 = (v6 + v10) & 0xFFFFFFFFFFFFFFF8;
    v13 = (v6 + v11) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)(v13 + 24) < 0xFFFFFFFFuLL)
    {
      v17 = *(_OWORD *)(v13 + 16);
      *(_OWORD *)v12 = *(_OWORD *)v13;
      *(_OWORD *)(v12 + 16) = v17;
    }
    else
    {
      v14 = *(_QWORD *)v13;
      v15 = *(_QWORD *)(v13 + 8);
      v16 = *(_BYTE *)(v13 + 16);
      sub_23BEA0EAC(*(_QWORD *)v13, v15, v16);
      *(_QWORD *)v12 = v14;
      *(_QWORD *)(v12 + 8) = v15;
      *(_BYTE *)(v12 + 16) = v16;
      *(_QWORD *)(v12 + 24) = *(_QWORD *)(v13 + 24);
      swift_bridgeObjectRetain();
    }
    v18 = (v12 + 39) & 0xFFFFFFFFFFFFFFF8;
    v19 = (v13 + 39) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)(v19 + 24) < 0xFFFFFFFFuLL)
    {
      v23 = *(_OWORD *)(v19 + 16);
      *(_OWORD *)v18 = *(_OWORD *)v19;
      *(_OWORD *)(v18 + 16) = v23;
    }
    else
    {
      v20 = *(_QWORD *)v19;
      v21 = *(_QWORD *)(v19 + 8);
      v22 = *(_BYTE *)(v19 + 16);
      sub_23BEA0EAC(*(_QWORD *)v19, v21, v22);
      *(_QWORD *)v18 = v20;
      *(_QWORD *)(v18 + 8) = v21;
      *(_BYTE *)(v18 + 16) = v22;
      *(_QWORD *)(v18 + 24) = *(_QWORD *)(v19 + 24);
      swift_bridgeObjectRetain();
    }
    v24 = (_QWORD *)((v19 + 39) & 0xFFFFFFFFFFFFFFF8);
    v25 = v24[1];
    v26 = (_QWORD *)((v18 + 39) & 0xFFFFFFFFFFFFFFF8);
    *v26 = *v24;
    v26[1] = v25;
  }
  swift_retain();
  return v3;
}

uint64_t sub_23BEA0EAC(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_retain();
  else
    return swift_bridgeObjectRetain();
}

uint64_t sub_23BEA0EBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = (a1 + *(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  (*(void (**)(unint64_t))(v2 + 8))(v3);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v4 + 24) >= 0xFFFFFFFFuLL)
  {
    sub_23BEA0F64(*(_QWORD *)v4, *(_QWORD *)(v4 + 8), *(_BYTE *)(v4 + 16));
    swift_bridgeObjectRelease();
  }
  v5 = (v4 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v5 + 24) >= 0xFFFFFFFFuLL)
  {
    sub_23BEA0F64(*(_QWORD *)v5, *(_QWORD *)(v5 + 8), *(_BYTE *)(v5 + 16));
    swift_bridgeObjectRelease();
  }
  return swift_release();
}

uint64_t sub_23BEA0F64(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_release();
  else
    return swift_bridgeObjectRelease();
}

uint64_t sub_23BEA0F74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 24 + a1) & ~v5;
  v7 = (v5 + 24 + a2) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  v9 = (v8 + v6) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v8 + v7) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v10 + 24) < 0xFFFFFFFFuLL)
  {
    v14 = *(_OWORD *)(v10 + 16);
    *(_OWORD *)v9 = *(_OWORD *)v10;
    *(_OWORD *)(v9 + 16) = v14;
  }
  else
  {
    v11 = *(_QWORD *)v10;
    v12 = *(_QWORD *)(v10 + 8);
    v13 = *(_BYTE *)(v10 + 16);
    sub_23BEA0EAC(*(_QWORD *)v10, v12, v13);
    *(_QWORD *)v9 = v11;
    *(_QWORD *)(v9 + 8) = v12;
    *(_BYTE *)(v9 + 16) = v13;
    *(_QWORD *)(v9 + 24) = *(_QWORD *)(v10 + 24);
    swift_bridgeObjectRetain();
  }
  v15 = (v9 + 39) & 0xFFFFFFFFFFFFFFF8;
  v16 = (v10 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v16 + 24) < 0xFFFFFFFFuLL)
  {
    v20 = *(_OWORD *)(v16 + 16);
    *(_OWORD *)v15 = *(_OWORD *)v16;
    *(_OWORD *)(v15 + 16) = v20;
  }
  else
  {
    v17 = *(_QWORD *)v16;
    v18 = *(_QWORD *)(v16 + 8);
    v19 = *(_BYTE *)(v16 + 16);
    sub_23BEA0EAC(*(_QWORD *)v16, v18, v19);
    *(_QWORD *)v15 = v17;
    *(_QWORD *)(v15 + 8) = v18;
    *(_BYTE *)(v15 + 16) = v19;
    *(_QWORD *)(v15 + 24) = *(_QWORD *)(v16 + 24);
    swift_bridgeObjectRetain();
  }
  v21 = (_QWORD *)((v16 + 39) & 0xFFFFFFFFFFFFFFF8);
  v22 = v21[1];
  v23 = (_QWORD *)((v15 + 39) & 0xFFFFFFFFFFFFFFF8);
  *v23 = *v21;
  v23[1] = v22;
  swift_retain();
  return a1;
}

_QWORD *sub_23BEA10B8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = ((unint64_t)a1 + v5 + 24) & ~v5;
  v7 = ((unint64_t)a2 + v5 + 24) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 24))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  v9 = (v8 + v6) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v8 + v7) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_QWORD *)(v10 + 24);
  if (*(_QWORD *)(v9 + 24) < 0xFFFFFFFFuLL)
  {
    if (v11 >= 0xFFFFFFFF)
    {
      v18 = *(_QWORD *)v10;
      v19 = *(_QWORD *)(v10 + 8);
      v20 = *(_BYTE *)(v10 + 16);
      sub_23BEA0EAC(*(_QWORD *)v10, v19, v20);
      *(_QWORD *)v9 = v18;
      *(_QWORD *)(v9 + 8) = v19;
      *(_BYTE *)(v9 + 16) = v20;
      *(_QWORD *)(v9 + 24) = *(_QWORD *)(v10 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
  }
  else
  {
    if (v11 >= 0xFFFFFFFF)
    {
      v12 = *(_QWORD *)v10;
      v13 = *(_QWORD *)(v10 + 8);
      v14 = *(_BYTE *)(v10 + 16);
      sub_23BEA0EAC(*(_QWORD *)v10, v13, v14);
      v15 = *(_QWORD *)v9;
      v16 = *(_QWORD *)(v9 + 8);
      v17 = *(_BYTE *)(v9 + 16);
      *(_QWORD *)v9 = v12;
      *(_QWORD *)(v9 + 8) = v13;
      *(_BYTE *)(v9 + 16) = v14;
      sub_23BEA0F64(v15, v16, v17);
      *(_QWORD *)(v9 + 24) = *(_QWORD *)(v10 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    sub_23BEA0F64(*(_QWORD *)v9, *(_QWORD *)(v9 + 8), *(_BYTE *)(v9 + 16));
    swift_bridgeObjectRelease();
  }
  v21 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v21;
LABEL_8:
  v22 = (v9 + 39) & 0xFFFFFFFFFFFFFFF8;
  v23 = (v10 + 39) & 0xFFFFFFFFFFFFFFF8;
  v24 = *(_QWORD *)(v23 + 24);
  if (*(_QWORD *)(v22 + 24) < 0xFFFFFFFFuLL)
  {
    if (v24 >= 0xFFFFFFFF)
    {
      v31 = *(_QWORD *)v23;
      v32 = *(_QWORD *)(v23 + 8);
      v33 = *(_BYTE *)(v23 + 16);
      sub_23BEA0EAC(*(_QWORD *)v23, v32, v33);
      *(_QWORD *)v22 = v31;
      *(_QWORD *)(v22 + 8) = v32;
      *(_BYTE *)(v22 + 16) = v33;
      *(_QWORD *)(v22 + 24) = *(_QWORD *)(v23 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_15;
    }
LABEL_14:
    v34 = *(_OWORD *)(v23 + 16);
    *(_OWORD *)v22 = *(_OWORD *)v23;
    *(_OWORD *)(v22 + 16) = v34;
    goto LABEL_15;
  }
  if (v24 < 0xFFFFFFFF)
  {
    sub_23BEA0F64(*(_QWORD *)v22, *(_QWORD *)(v22 + 8), *(_BYTE *)(v22 + 16));
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  v25 = *(_QWORD *)v23;
  v26 = *(_QWORD *)(v23 + 8);
  v27 = *(_BYTE *)(v23 + 16);
  sub_23BEA0EAC(*(_QWORD *)v23, v26, v27);
  v28 = *(_QWORD *)v22;
  v29 = *(_QWORD *)(v22 + 8);
  v30 = *(_BYTE *)(v22 + 16);
  *(_QWORD *)v22 = v25;
  *(_QWORD *)(v22 + 8) = v26;
  *(_BYTE *)(v22 + 16) = v27;
  sub_23BEA0F64(v28, v29, v30);
  *(_QWORD *)(v22 + 24) = *(_QWORD *)(v23 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_15:
  v35 = (_QWORD *)((v22 + 39) & 0xFFFFFFFFFFFFFFF8);
  v36 = (_QWORD *)((v23 + 39) & 0xFFFFFFFFFFFFFFF8);
  v37 = v36[1];
  *v35 = *v36;
  v35[1] = v37;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_23BEA1300(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  __int128 v11;
  _OWORD *v12;
  _OWORD *v13;
  __int128 v14;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 24 + a1) & ~v5;
  v7 = (v5 + 24 + a2) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  v9 = (_OWORD *)((v8 + v6) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_OWORD *)((v8 + v7) & 0xFFFFFFFFFFFFFFF8);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = (_OWORD *)(((unint64_t)v9 + 39) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_OWORD *)(((unint64_t)v10 + 39) & 0xFFFFFFFFFFFFFFF8);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  *(_OWORD *)(((unint64_t)v12 + 39) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v13 + 39) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_23BEA13B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int128 v22;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 24 + a1) & ~v5;
  v7 = (v5 + 24 + a2) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 40))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  v9 = (v8 + v6) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v8 + v7) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v9 + 24) >= 0xFFFFFFFFuLL)
  {
    if (*(_QWORD *)(v10 + 24) >= 0xFFFFFFFFuLL)
    {
      v11 = *(_BYTE *)(v10 + 16);
      v12 = *(_QWORD *)v9;
      v13 = *(_QWORD *)(v9 + 8);
      v14 = *(_BYTE *)(v9 + 16);
      *(_OWORD *)v9 = *(_OWORD *)v10;
      *(_BYTE *)(v9 + 16) = v11;
      sub_23BEA0F64(v12, v13, v14);
      *(_QWORD *)(v9 + 24) = *(_QWORD *)(v10 + 24);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_23BEA0F64(*(_QWORD *)v9, *(_QWORD *)(v9 + 8), *(_BYTE *)(v9 + 16));
    swift_bridgeObjectRelease();
  }
  v15 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v15;
LABEL_6:
  v16 = (v9 + 39) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v10 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v16 + 24) < 0xFFFFFFFFuLL)
  {
LABEL_10:
    v22 = *(_OWORD *)(v17 + 16);
    *(_OWORD *)v16 = *(_OWORD *)v17;
    *(_OWORD *)(v16 + 16) = v22;
    goto LABEL_11;
  }
  if (*(_QWORD *)(v17 + 24) < 0xFFFFFFFFuLL)
  {
    sub_23BEA0F64(*(_QWORD *)v16, *(_QWORD *)(v16 + 8), *(_BYTE *)(v16 + 16));
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  v18 = *(_BYTE *)(v17 + 16);
  v19 = *(_QWORD *)v16;
  v20 = *(_QWORD *)(v16 + 8);
  v21 = *(_BYTE *)(v16 + 16);
  *(_OWORD *)v16 = *(_OWORD *)v17;
  *(_BYTE *)(v16 + 16) = v18;
  sub_23BEA0F64(v19, v20, v21);
  *(_QWORD *)(v16 + 24) = *(_QWORD *)(v17 + 24);
  swift_bridgeObjectRelease();
LABEL_11:
  *(_OWORD *)((v16 + 39) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v17 + 39) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t sub_23BEA1540(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  if (v6 >= a2)
  {
    v13 = (a1 + v7 + 24) & ~v7;
    if (v5 < 0x7FFFFFFF)
    {
      v14 = *(_QWORD *)((((((v8 + v13) & 0xFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFF8);
      if (v14 >= 0xFFFFFFFF)
        LODWORD(v14) = -1;
      return (v14 + 1);
    }
    else
    {
      return (*(uint64_t (**)(uint64_t))(v4 + 48))(v13);
    }
  }
  else
  {
    if (((((((((v8 + ((v7 + 24) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8)
         + 16) & 0xFFFFFFF8) != 0)
      v9 = 2;
    else
      v9 = a2 - v6 + 1;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    return ((uint64_t (*)(void))((char *)&loc_23BEA15DC + 4 * byte_23BFF9FC0[v11]))();
  }
}

void sub_23BEA167C(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (v6 >= a3)
  {
    v10 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((((*(_DWORD *)(v5 + 64) + 7 + (((_DWORD)v7 + 24) & ~(_DWORD)v7)) & 0xFFFFFFF8) + 39) & 0xFFFFFFF8) + 39) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v8 = a3 - v6 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X14 }
  }
  if (((((((*(_DWORD *)(v5 + 64) + 7 + (((_DWORD)v7 + 24) & ~(_DWORD)v7)) & 0xFFFFFFF8) + 39) & 0xFFFFFFF8) + 39) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v11 = ~v6 + a2;
    bzero(a1, ((((((*(_QWORD *)(v5 + 64) + 7 + ((v7 + 24) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8)+ 16);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_23BEA1794()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x23BEA1820);
}

void sub_23BEA179C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x23BEA17A4);
  JUMPOUT(0x23BEA1820);
}

void sub_23BEA17F8()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x23BEA1820);
}

void sub_23BEA1800()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x23BEA1820);
}

uint64_t sub_23BEA1808@<X0>(int a1@<W1>, unsigned int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a1)
    JUMPOUT(0x23BEA1820);
  if (a2 < 0x7FFFFFFF)
  {
    if ((a1 & 0x80000000) == 0)
      JUMPOUT(0x23BEA181CLL);
    JUMPOUT(0x23BEA1814);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))((v6 + v5 + 24) & a3);
}

uint64_t type metadata accessor for MonogramVerticalStackView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MonogramVerticalStackView);
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for MonogramVerticalStackViewLayout.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MonogramVerticalStackViewLayout.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23BEA192C + 4 * byte_23BFF9FD4[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23BEA1960 + 4 * byte_23BFF9FCF[v4]))();
}

uint64_t sub_23BEA1960(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BEA1968(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BEA1970);
  return result;
}

uint64_t sub_23BEA197C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BEA1984);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23BEA1988(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BEA1990(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BEA199C(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_23BEA19A8(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for MonogramVerticalStackViewLayout.CodingKeys()
{
  return &type metadata for MonogramVerticalStackViewLayout.CodingKeys;
}

unint64_t sub_23BEA19C8()
{
  unint64_t result;

  result = qword_256AE3508;
  if (!qword_256AE3508)
  {
    result = MEMORY[0x242615198](&unk_23BFFA1CC, &type metadata for MonogramVerticalStackViewLayout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE3508);
  }
  return result;
}

uint64_t sub_23BEA1A0C()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_23BEA1A44()
{
  unint64_t result;

  result = qword_256AE3510;
  if (!qword_256AE3510)
  {
    result = MEMORY[0x242615198](&unk_23BFFA13C, &type metadata for MonogramVerticalStackViewLayout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE3510);
  }
  return result;
}

unint64_t sub_23BEA1A8C()
{
  unint64_t result;

  result = qword_256AE3518;
  if (!qword_256AE3518)
  {
    result = MEMORY[0x242615198](&unk_23BFFA164, &type metadata for MonogramVerticalStackViewLayout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE3518);
  }
  return result;
}

uint64_t sub_23BEA1AD0(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000012 && a2 == 0x800000023C01E950 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000023C01E970)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v5 = sub_23BFF9964();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23BEA1BB8(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x242615198](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23BEA1BF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = (int *)type metadata accessor for MonogramVerticalStackView(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *(unsigned __int8 *)(*((_QWORD *)v6 - 1) + 80);
  v8 = v4 + ((v7 + 32) & ~v7);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v8 + v6[9], v5);
  v9 = v8 + v6[10];
  if (*(_QWORD *)(v9 + 24))
  {
    sub_23BEA0F64(*(_QWORD *)v9, *(_QWORD *)(v9 + 8), *(_BYTE *)(v9 + 16));
    swift_bridgeObjectRelease();
  }
  v10 = v8 + v6[11];
  if (*(_QWORD *)(v10 + 24))
  {
    sub_23BEA0F64(*(_QWORD *)v10, *(_QWORD *)(v10 + 8), *(_BYTE *)(v10 + 16));
    swift_bridgeObjectRelease();
  }
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23BEA1CD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = type metadata accessor for MonogramVerticalStackView(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80);
  return (*(uint64_t (**)(void))(v4 + *(int *)(v5 + 48) + ((v6 + 32) & ~v6)))();
}

uint64_t sub_23BEA1D20@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_23BEA02A8(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_23BEA1D2C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_23BEA05E8(v1[4], v1[2], v1[3], a1);
}

unint64_t sub_23BEA1D38()
{
  unint64_t result;

  result = qword_256AE3560;
  if (!qword_256AE3560)
  {
    result = MEMORY[0x242615198](MEMORY[0x24BDF52E0], MEMORY[0x24BDF52F8]);
    atomic_store(result, (unint64_t *)&qword_256AE3560);
  }
  return result;
}

unint64_t sub_23BEA1D7C()
{
  unint64_t result;

  result = qword_256AE3568;
  if (!qword_256AE3568)
  {
    result = MEMORY[0x242615198](MEMORY[0x24BDF4440], MEMORY[0x24BDF4458]);
    atomic_store(result, (unint64_t *)&qword_256AE3568);
  }
  return result;
}

uint64_t sub_23BEA1DC0(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_23BEA0EAC(result, a2, a3 & 1);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_23BEA1DF0(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_23BEA0EAC(result, a2, a3 & 1);
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  return result;
}

unint64_t sub_23BEA1E2C()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_256AE3580;
  if (!qword_256AE3580)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3530);
    v2 = sub_23BEA1E90();
    result = MEMORY[0x242615198](MEMORY[0x24BDF5578], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_256AE3580);
  }
  return result;
}

unint64_t sub_23BEA1E90()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AE3588;
  if (!qword_256AE3588)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3590);
    v2[0] = sub_23BEA1F34(&qword_256AE3598, &qword_256AE35A0, MEMORY[0x24BDF1F80], MEMORY[0x24BDEDB80]);
    v2[1] = sub_23BEA1F94(&qword_256AE35A8, &qword_256AE35B0, MEMORY[0x24BDF1028]);
    result = MEMORY[0x242615198](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AE3588);
  }
  return result;
}

uint64_t sub_23BEA1F34(unint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  result = *a1;
  if (!result)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v9[0] = a3;
    v9[1] = a4;
    result = MEMORY[0x242615198](MEMORY[0x24BDED308], v8, v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23BEA1F94(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x242615198](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23BEA1FD4(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_23BEA0F64(result, a2, a3 & 1);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x2426150F0](a1, v6, a5);
}

uint64_t sub_23BEA2044()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];
  _QWORD v13[2];
  _QWORD v14[2];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3520);
  v15 = sub_23BFF862C();
  v16 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3528);
  v17 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3530);
  v18 = v17;
  swift_getTupleTypeMetadata();
  v0 = sub_23BFF9220();
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v0);
  v1 = sub_23BFF90AC();
  v2 = sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3538);
  v3 = sub_23BFF862C();
  v14[0] = MEMORY[0x242615198](MEMORY[0x24BDF4700], v1);
  v14[1] = MEMORY[0x24BDEBEE0];
  v4 = MEMORY[0x24BDED308];
  v13[0] = MEMORY[0x242615198](MEMORY[0x24BDED308], v2, v14);
  v13[1] = sub_23BEA1F94(&qword_256AE3540, &qword_256AE3538, MEMORY[0x24BDEFAD8]);
  MEMORY[0x242615198](v4, v3, v13);
  v5 = sub_23BFF9040();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3548);
  v6 = sub_23BFF862C();
  v7 = sub_23BFF8680();
  v8 = (uint64_t (*)(uint64_t))MEMORY[0x24BDED868];
  v12[0] = MEMORY[0x242615198](MEMORY[0x24BDF43B0], v5);
  v12[1] = sub_23BEA1F94(&qword_256AE3550, &qword_256AE3548, MEMORY[0x24BDF1028]);
  v9 = MEMORY[0x242615198](v4, v6, v12);
  v10 = sub_23BEA1BB8(&qword_256AE3558, v8, MEMORY[0x24BDED858]);
  v15 = v6;
  v16 = v7;
  v17 = v9;
  v18 = v10;
  return swift_getOpaqueTypeConformance2();
}

void static ScrollTargetBehavior<>.snapToStage.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x4088500000000000;
}

void StageSnappingScrollTargetBehavior.updateTarget(_:context:)()
{
  double *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  double v5;
  double v6;
  CGFloat v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  void (*v14)(_BYTE *, uint64_t);
  double MinY;
  double v16;
  CGFloat v17;
  double v18;
  CGFloat v19;
  double v20;
  CGFloat v21;
  double v22;
  CGFloat v23;
  void (*v24)(_BYTE *, _QWORD);
  uint64_t v25;
  double v26;
  double v27;
  void (*v28)(_BYTE *, _QWORD);
  uint64_t v29;
  _BYTE v30[32];
  CGRect v31;
  CGRect v32;
  CGRect v33;
  CGRect v34;
  CGRect v35;

  v1 = sub_23BFF8494();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = &v30[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = *v0;
  sub_23BFF8AD0();
  sub_23BFF8488();
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v14 = *(void (**)(_BYTE *, uint64_t))(v2 + 8);
  v14(v4, v1);
  v31.origin.x = v7;
  v31.origin.y = v9;
  v31.size.width = v11;
  v31.size.height = v13;
  MinY = CGRectGetMinY(v31);
  sub_23BFF8488();
  if (MinY != CGRectGetMinY(v32))
  {
    sub_23BFF8AD0();
    sub_23BFF8488();
    v17 = v16;
    v19 = v18;
    v21 = v20;
    v23 = v22;
    v14(v4, v1);
    v33.origin.x = v17;
    v33.origin.y = v19;
    v33.size.width = v21;
    v33.size.height = v23;
    if (CGRectGetMinY(v33) == 0.0)
    {
      v24 = (void (*)(_BYTE *, _QWORD))sub_23BFF847C();
      *(double *)(v25 + 8) = v5;
      v24(v30, 0);
    }
    else
    {
      sub_23BFF8488();
      if (CGRectGetMinY(v34) > 0.0)
      {
        sub_23BFF8488();
        v26 = CGRectGetMinY(v35);
        if (v26 > v5)
          v27 = v26;
        else
          v27 = v5;
        v28 = (void (*)(_BYTE *, _QWORD))sub_23BFF847C();
        *(double *)(v29 + 8) = v27;
        v28(v30, 0);
      }
    }
  }
}

ValueMetadata *type metadata accessor for StageSnappingScrollTargetBehavior()
{
  return &type metadata for StageSnappingScrollTargetBehavior;
}

void LazyCanvasItemContent.transformed<A, B, C>()()
{
  __int128 *v0;
  char *v1;
  __int128 v2[16];
  _BYTE v3[264];

  sub_23BEA44DC(v0, (uint64_t)v2);
  sub_23BEA44DC(v2, (uint64_t)v3);
  v1 = (char *)sub_23BEA24C4 + 4 * word_23BFFA350[sub_23BEA4518((uint64_t)v3)];
  __asm { BR              X10 }
}

void sub_23BEA24C4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *TupleTypeMetadata;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t);
  void (*v32)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v0[12] = v4;
  v0[10] = v5;
  v6 = ((uint64_t (*)(_QWORD *))nullsub_1)(v0 + 59);
  MEMORY[0x24BDAC7A8](v6);
  v0[18] = &type metadata for ActionCardViewLayout;
  v0[19] = v3;
  v0[20] = &type metadata for ActionCardViewStyle;
  v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3618);
  v0[21] = v7;
  v0[22] = v7;
  v0[23] = v7;
  v0[24] = v2;
  v0[25] = sub_23BFF96A0();
  TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  v9 = TupleTypeMetadata[12];
  v0[8] = TupleTypeMetadata[16];
  v10 = v1 + TupleTypeMetadata[20];
  v11 = v1 + TupleTypeMetadata[24];
  v12 = TupleTypeMetadata[28];
  v13 = TupleTypeMetadata[32];
  v14 = TupleTypeMetadata[36];
  v15 = *(_OWORD *)(v6 + 112);
  v17 = *(_OWORD *)(v6 + 64);
  v16 = *(_OWORD *)(v6 + 80);
  *(_OWORD *)(v1 + 96) = *(_OWORD *)(v6 + 96);
  *(_OWORD *)(v1 + 112) = v15;
  *(_OWORD *)(v1 + 64) = v17;
  *(_OWORD *)(v1 + 80) = v16;
  v18 = *(_OWORD *)(v6 + 176);
  v20 = *(_OWORD *)(v6 + 128);
  v19 = *(_OWORD *)(v6 + 144);
  *(_OWORD *)(v1 + 160) = *(_OWORD *)(v6 + 160);
  *(_OWORD *)(v1 + 176) = v18;
  *(_OWORD *)(v1 + 128) = v20;
  *(_OWORD *)(v1 + 144) = v19;
  v22 = *(_OWORD *)(v6 + 208);
  v21 = *(_OWORD *)(v6 + 224);
  v23 = *(_OWORD *)(v6 + 192);
  *(_QWORD *)(v1 + 240) = *(_QWORD *)(v6 + 240);
  *(_OWORD *)(v1 + 208) = v22;
  *(_OWORD *)(v1 + 224) = v21;
  *(_OWORD *)(v1 + 192) = v23;
  v24 = *(_OWORD *)v6;
  v25 = *(_OWORD *)(v6 + 16);
  v26 = *(_OWORD *)(v6 + 48);
  *(_OWORD *)(v1 + 32) = *(_OWORD *)(v6 + 32);
  *(_OWORD *)(v1 + 48) = v26;
  *(_OWORD *)v1 = v24;
  *(_OWORD *)(v1 + 16) = v25;
  if (qword_256AE3360 != -1)
    swift_once();
  v0[4] = v1 + v9;
  v27 = v1 + v12;
  v0[6] = v1 + v13;
  v0[2] = v1 + v14;
  v28 = sub_23BFF82CC();
  v29 = __swift_project_value_buffer(v28, (uint64_t)qword_256AE3600);
  v30 = *(_QWORD *)(v28 - 8);
  v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16);
  v31(v10, v29, v28);
  v32 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v30 + 56);
  v32(v10, 0, 1, v28);
  if (qword_256AE3358 != -1)
    swift_once();
  v33 = __swift_project_value_buffer(v28, (uint64_t)qword_256AE35E8);
  v31(v11, v33, v28);
  v32(v11, 0, 1, v28);
  if (qword_256AE3348 != -1)
    swift_once();
  v34 = __swift_project_value_buffer(v28, (uint64_t)qword_256AE35B8);
  v31(v27, v34, v28);
  v32(v27, 0, 1, v28);
  v35 = v0[15];
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v0[2], 1, 1, v35);
  v36 = v0[12];
  (*(void (**)(uint64_t, uint64_t))(v36 + 32))(v3, v36);
  *(_BYTE *)(v1 + v0[8]) = 1;
  v37 = v0[17];
  (*(void (**)(uint64_t, uint64_t))(v37 + 32))(v35, v37);
  v0[18] = v35;
  v0[19] = v3;
  v0[20] = v0[16];
  v0[21] = v37;
  v38 = v0[10];
  v0[22] = v36;
  v0[23] = v38;
  type metadata accessor for CanvasItemContent();
}

uint64_t sub_23BEA44DC(__int128 *a1, uint64_t a2)
{
  __swift_memcpy249_8(a2, a1);
  return a2;
}

uint64_t sub_23BEA4518(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 248) <= 0xAu)
    return *(unsigned __int8 *)(a1 + 248);
  else
    return (*(_DWORD *)a1 + 11);
}

void CanvasItemContent.transformed()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;

  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *))(v2 + 16))((char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  v3 = (char *)sub_23BEA45D4 + 4 * word_23BFFA36A[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_23BEA45D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *TupleTypeMetadata;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  *(_QWORD *)(v1 + 288) = *(_QWORD *)(v3 + 240);
  v5 = *(_OWORD *)(v3 + 208);
  *(_OWORD *)(v1 + 240) = *(_OWORD *)(v3 + 192);
  *(_OWORD *)(v1 + 256) = v5;
  *(_OWORD *)(v1 + 272) = *(_OWORD *)(v3 + 224);
  v6 = *(_OWORD *)(v3 + 144);
  *(_OWORD *)(v1 + 176) = *(_OWORD *)(v3 + 128);
  *(_OWORD *)(v1 + 192) = v6;
  v7 = *(_OWORD *)(v3 + 176);
  *(_OWORD *)(v1 + 208) = *(_OWORD *)(v3 + 160);
  *(_OWORD *)(v1 + 224) = v7;
  v8 = *(_OWORD *)(v3 + 80);
  *(_OWORD *)(v1 + 112) = *(_OWORD *)(v3 + 64);
  *(_OWORD *)(v1 + 128) = v8;
  v9 = *(_OWORD *)(v3 + 112);
  *(_OWORD *)(v1 + 144) = *(_OWORD *)(v3 + 96);
  *(_OWORD *)(v1 + 160) = v9;
  v10 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v1 + 48) = *(_OWORD *)v3;
  *(_OWORD *)(v1 + 64) = v10;
  v11 = *(_OWORD *)(v3 + 48);
  *(_OWORD *)(v1 + 80) = *(_OWORD *)(v3 + 32);
  *(_OWORD *)(v1 + 96) = v11;
  MEMORY[0x24BDAC7A8](a1);
  v12 = *(_QWORD *)(v4 + 24);
  *(_QWORD *)(v1 + 568) = &type metadata for ActionCardViewLayout;
  *(_QWORD *)(v1 + 576) = v12;
  *(_QWORD *)(v1 + 584) = &type metadata for ActionCardViewStyle;
  v13 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3618);
  *(_QWORD *)(v1 + 592) = v13;
  *(_QWORD *)(v1 + 600) = v13;
  v14 = *(_QWORD *)(v4 + 16);
  *(_QWORD *)(v1 + 608) = v13;
  *(_QWORD *)(v1 + 616) = v14;
  *(_QWORD *)(v1 + 624) = sub_23BFF96A0();
  TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  v16 = v3 + TupleTypeMetadata[12];
  v17 = v3 + TupleTypeMetadata[20];
  v18 = v3 + TupleTypeMetadata[24];
  v19 = v3 + TupleTypeMetadata[28];
  v20 = v3 + TupleTypeMetadata[32];
  v21 = v3 + TupleTypeMetadata[36];
  v22 = *(_OWORD *)(v1 + 256);
  *(_OWORD *)(v1 + 496) = *(_OWORD *)(v1 + 240);
  *(_OWORD *)(v1 + 512) = v22;
  *(_OWORD *)(v1 + 528) = *(_OWORD *)(v1 + 272);
  *(_QWORD *)(v1 + 544) = *(_QWORD *)(v1 + 288);
  v23 = *(_OWORD *)(v1 + 192);
  *(_OWORD *)(v1 + 432) = *(_OWORD *)(v1 + 176);
  *(_OWORD *)(v1 + 448) = v23;
  v24 = *(_OWORD *)(v1 + 224);
  *(_OWORD *)(v1 + 464) = *(_OWORD *)(v1 + 208);
  *(_OWORD *)(v1 + 480) = v24;
  v25 = *(_OWORD *)(v1 + 128);
  *(_OWORD *)(v1 + 368) = *(_OWORD *)(v1 + 112);
  *(_OWORD *)(v1 + 384) = v25;
  v26 = *(_OWORD *)(v1 + 160);
  *(_OWORD *)(v1 + 400) = *(_OWORD *)(v1 + 144);
  *(_OWORD *)(v1 + 416) = v26;
  v27 = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(v1 + 304) = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v1 + 320) = v27;
  v28 = *(_OWORD *)(v1 + 96);
  *(_OWORD *)(v1 + 336) = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(v1 + 352) = v28;
  sub_23BEA5BB0(v1 + 304);
  sub_23BEA44DC((__int128 *)(v1 + 304), v1 + 568);
  ((void (*)(uint64_t))nullsub_1)(v1 + 568);
  sub_23BEA5A48(v1 + 568, v2);
  v29 = sub_23BFF96A0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 8))(v21, v29);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v20, v14);
  sub_23BEA5A90(v19);
  sub_23BEA5A90(v18);
  sub_23BEA5A90(v17);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v16, v12);
}

uint64_t sub_23BEA58FC(uint64_t a1)
{
  return sub_23BEA5998(a1, qword_256AE35B8);
}

uint64_t sub_23BEA591C(uint64_t a1)
{
  return sub_23BEA5998(a1, qword_256AE35D0);
}

uint64_t sub_23BEA5944(uint64_t a1)
{
  return sub_23BEA5998(a1, qword_256AE35E8);
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_23BEA597C(uint64_t a1)
{
  return sub_23BEA5998(a1, qword_256AE3600);
}

uint64_t sub_23BEA5998(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_23BFF82CC();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return sub_23BFF8254();
}

double sub_23BEA59F4(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 1;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_BYTE *)(a1 + 248) = 11;
  return result;
}

uint64_t sub_23BEA5A48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(qword_256AE3620);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BEA5A90(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3618);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23BEA5AD0(uint64_t result)
{
  *(_BYTE *)(result + 248) = 10;
  return result;
}

uint64_t sub_23BEA5ADC(uint64_t result)
{
  *(_BYTE *)(result + 248) = 9;
  return result;
}

uint64_t sub_23BEA5AE8(uint64_t result)
{
  *(_BYTE *)(result + 248) = 8;
  return result;
}

uint64_t sub_23BEA5AF4(uint64_t result)
{
  *(_BYTE *)(result + 248) = 7;
  return result;
}

uint64_t sub_23BEA5B00(uint64_t result)
{
  *(_BYTE *)(result + 248) = 6;
  return result;
}

uint64_t sub_23BEA5B0C(uint64_t result)
{
  *(_BYTE *)(result + 248) = 5;
  return result;
}

uint64_t sub_23BEA5B18(uint64_t result)
{
  *(_BYTE *)(result + 248) = 4;
  return result;
}

uint64_t sub_23BEA5B24(uint64_t result)
{
  *(_BYTE *)(result + 248) = 3;
  return result;
}

double sub_23BEA5B30(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 240) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_BYTE *)(a1 + 248) = 11;
  return result;
}

uint64_t sub_23BEA5B64(uint64_t result)
{
  *(_BYTE *)(result + 248) = 2;
  return result;
}

uint64_t sub_23BEA5B70(uint64_t result)
{
  *(_BYTE *)(result + 248) = 1;
  return result;
}

double sub_23BEA5B7C(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 240) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_BYTE *)(a1 + 248) = -1;
  return result;
}

uint64_t sub_23BEA5BB0(uint64_t result)
{
  *(_BYTE *)(result + 248) = 0;
  return result;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

ValueMetadata *type metadata accessor for DynamicLayoutProvider()
{
  return &type metadata for DynamicLayoutProvider;
}

uint64_t sub_23BEA5C0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
}

uint64_t sub_23BEA5C24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = sub_23BFF8950();
  MEMORY[0x24BDAC7A8](v4);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))((char *)&v7 - v5, a1, a2);
  swift_storeEnumTagMultiPayload();
  return sub_23BFF895C();
}

uint64_t sub_23BEA5CE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v5 = sub_23BFF8950();
  MEMORY[0x24BDAC7A8](v5);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))((char *)&v8 - v6, a1, a3);
  swift_storeEnumTagMultiPayload();
  return sub_23BFF895C();
}

void ConditionalViewModifier.body(content:)(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[35];

  v18[9] = a1;
  v18[12] = a3;
  MEMORY[0x242615198](&protocol conformance descriptor for ConditionalViewModifier<A, B>);
  v4 = sub_23BFF89EC();
  v5 = a2[3];
  v6 = sub_23BFF862C();
  v18[3] = *(_QWORD *)(v6 - 8);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v18[5] = (char *)v18 - v9;
  v18[8] = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v18[4] = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a2[2];
  v18[16] = v4;
  v12 = sub_23BFF862C();
  v18[1] = *(_QWORD *)(v12 - 8);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v18[2] = (char *)v18 - v15;
  v18[7] = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = a2[4];
  v16 = a2[5];
  v18[31] = v11;
  v18[32] = v5;
  v18[14] = v17;
  v18[15] = v16;
  v18[33] = v17;
  v18[34] = v16;
  type metadata accessor for ConditionalViewModifier.Storage();
}

uint64_t sub_23BEA5F78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE v42[96];

  v10 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v12 = &v42[-v11];
  v13 = sub_23BFF8968();
  *(_QWORD *)(v8 - 280) = v13;
  *(_QWORD *)(v8 - 288) = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  *(_QWORD *)(v8 - 264) = &v42[-v14];
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v10 + 16))(v12, *(_QWORD *)(v8 - 320), a1);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v15 = *(_QWORD *)(v8 - 336);
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)(v8 - 304) + 32))(v15, v12, v5);
    v16 = *(_QWORD *)(v8 - 240);
    v17 = MEMORY[0x242615198](MEMORY[0x24BDEFB78], v16);
    MEMORY[0x2426142A4](v15, v16, v5, v17);
    v18 = *(_QWORD *)(v8 - 248);
    *(_QWORD *)(v8 - 136) = v17;
    *(_QWORD *)(v8 - 128) = v18;
    MEMORY[0x242615198](MEMORY[0x24BDED308], v2, v8 - 136);
    v19 = *(_QWORD *)(v8 - 344);
    v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16);
    v21 = *(_QWORD *)(v8 - 328);
    v20(v21, v6, v2);
    v22 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v22(v6, v2);
    v20(v6, v21, v2);
    v23 = *(_QWORD *)(v8 - 256);
    *(_QWORD *)(v8 - 152) = v17;
    *(_QWORD *)(v8 - 144) = v23;
    MEMORY[0x242615198](MEMORY[0x24BDED308], v3, v8 - 152);
    sub_23BEA5CE8(v6, v3, v2);
    v22(v6, v2);
    v22(v21, v2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 304) + 8))(v15, v5);
  }
  else
  {
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)(v8 - 312) + 32))(v4, v12, v7);
    v24 = *(_QWORD *)(v8 - 240);
    v25 = MEMORY[0x242615198](MEMORY[0x24BDEFB78], v24);
    MEMORY[0x2426142A4](v4, v24, v7, v25);
    v26 = *(_QWORD *)(v8 - 256);
    *(_QWORD *)(v8 - 216) = v25;
    *(_QWORD *)(v8 - 208) = v26;
    MEMORY[0x242615198](MEMORY[0x24BDED308], v3, v8 - 216);
    v27 = *(_QWORD *)(v8 - 360);
    v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16);
    v29 = *(_QWORD *)(v8 - 352);
    v28(v29, v1, v3);
    v30 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
    v30(v1, v3);
    v28(v1, v29, v3);
    v31 = *(_QWORD *)(v8 - 248);
    *(_QWORD *)(v8 - 232) = v25;
    *(_QWORD *)(v8 - 224) = v31;
    MEMORY[0x242615198](MEMORY[0x24BDED308], v2, v8 - 232);
    sub_23BEA5C24(v1, v3);
    v30(v1, v3);
    v30(v29, v3);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 312) + 8))(v4, v7);
  }
  v32 = MEMORY[0x242615198](MEMORY[0x24BDEFB78], *(_QWORD *)(v8 - 240));
  v33 = *(_QWORD *)(v8 - 256);
  *(_QWORD *)(v8 - 168) = v32;
  *(_QWORD *)(v8 - 160) = v33;
  v34 = MEMORY[0x24BDED308];
  v35 = MEMORY[0x242615198](MEMORY[0x24BDED308], v3, v8 - 168);
  v36 = *(_QWORD *)(v8 - 248);
  *(_QWORD *)(v8 - 184) = v32;
  *(_QWORD *)(v8 - 176) = v36;
  v37 = MEMORY[0x242615198](v34, v2, v8 - 184);
  *(_QWORD *)(v8 - 200) = v35;
  *(_QWORD *)(v8 - 192) = v37;
  v38 = *(_QWORD *)(v8 - 280);
  MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v38, v8 - 200);
  v39 = *(_QWORD *)(v8 - 288);
  v40 = *(_QWORD *)(v8 - 264);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v39 + 16))(*(_QWORD *)(v8 - 272), v40, v38);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 8))(v40, v38);
}

void type metadata accessor for ConditionalViewModifier.Storage()
{
  JUMPOUT(0x2426150F0);
}

uint64_t sub_23BEA634C()
{
  return sub_23BFF84B8();
}

uint64_t static ViewModifierBuilder.buildPartialBlock<A>(first:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
}

uint64_t static ViewModifierBuilder.buildPartialBlock<A, B>(accumulated:next:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x242613860](a2, a3, a4, a5);
}

void static ViewModifierBuilder.buildEither<A, B>(first:)()
{
  type metadata accessor for ConditionalViewModifier.Storage();
}

void sub_23BEA63FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))((char *)&a9 - v15, v13, v12);
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v14 - 96) = v12;
  *(_QWORD *)(v14 - 88) = v11;
  *(_QWORD *)(v14 - 80) = v10;
  *(_QWORD *)(v14 - 72) = v9;
  type metadata accessor for ConditionalViewModifier.Storage();
}

uint64_t sub_23BEA6464(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v1, v2, a1);
}

void static ViewModifierBuilder.buildEither<A, B>(second:)()
{
  type metadata accessor for ConditionalViewModifier.Storage();
}

void sub_23BEA64E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))((char *)&a9 - v15, v13, v11);
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v14 - 96) = v12;
  *(_QWORD *)(v14 - 88) = v11;
  *(_QWORD *)(v14 - 80) = v10;
  *(_QWORD *)(v14 - 72) = v9;
  type metadata accessor for ConditionalViewModifier.Storage();
}

uint64_t sub_23BEA6548(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v1, v2, a1);
}

uint64_t sub_23BEA657C()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_23BEA65B0()
{
  type metadata accessor for ConditionalViewModifier.Storage();
}

void type metadata accessor for ConditionalViewModifier()
{
  JUMPOUT(0x2426150F0);
}

ValueMetadata *type metadata accessor for ViewModifierBuilder()
{
  return &type metadata for ViewModifierBuilder;
}

void sub_23BEA6660()
{
  type metadata accessor for ConditionalViewModifier();
}

uint64_t sub_23BEA6694(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  MEMORY[0x242615198](&protocol conformance descriptor for ConditionalViewModifier<A, B>, a1);
  v3 = sub_23BFF89EC();
  v4 = sub_23BFF862C();
  v5 = sub_23BFF862C();
  v6 = sub_23BFF8968();
  v12 = MEMORY[0x242615198](MEMORY[0x24BDEFB78], v3);
  v13 = v1;
  v7 = MEMORY[0x24BDED308];
  v10 = v12;
  v11 = v2;
  v9[0] = MEMORY[0x242615198](MEMORY[0x24BDED308], v4, &v12);
  v9[1] = MEMORY[0x242615198](v7, v5, &v10);
  return MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v6, v9);
}

uint64_t sub_23BEA6770(uint64_t a1)
{
  uint64_t v2;
  __int128 v4;

  v2 = sub_23BFF862C();
  v4 = *(_OWORD *)(a1 + 16);
  return MEMORY[0x242615198](MEMORY[0x24BDED2F8], v2, &v4);
}

uint64_t sub_23BEA67BC()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_23BEA6844(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  if (*(_QWORD *)(v5 + 64) <= *(_QWORD *)(v4 + 64))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = (*(_BYTE *)(v5 + 80) | *(_BYTE *)(v4 + 80));
  if (v7 <= 7
    && (unint64_t)(v6 + 1) <= 0x18
    && ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v4 + 80)) & 0x100000) == 0)
  {
    v11 = *((unsigned __int8 *)a2 + v6);
    if (v11 >= 2)
    {
      if (v6 <= 3)
        v12 = v6;
      else
        v12 = 4;
      __asm { BR              X15 }
    }
    if (v11 == 1)
    {
      (*(void (**)(uint64_t *))(v5 + 16))(a1);
      *((_BYTE *)v3 + v6) = 1;
    }
    else
    {
      (*(void (**)(uint64_t *))(v4 + 16))(a1);
      *((_BYTE *)v3 + v6) = 0;
    }
  }
  else
  {
    v10 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return v3;
}

uint64_t sub_23BEA6970(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = *(_QWORD *)(v2 - 8);
  if (*(_QWORD *)(v5 + 64) > v4)
    v4 = *(_QWORD *)(v5 + 64);
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (v6 < 2)
  {
    if (v6 == 1)
      v3 = *(_QWORD *)(v2 - 8);
    return (*(uint64_t (**)(void))(v3 + 8))();
  }
  else
  {
    if (v4 <= 3)
      v7 = v4;
    else
      v7 = 4;
    return ((uint64_t (*)(void))((char *)&loc_23BEA69BC + 4 * byte_23BFFA3B5[v7]))();
  }
}

uint64_t sub_23BEA6A10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;

  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v4 - 8);
  if (*(_QWORD *)(v6 + 64) <= *(_QWORD *)(v5 + 64))
    v7 = *(_QWORD *)(v5 + 64);
  else
    v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned __int8 *)(a2 + v7);
  if (v8 >= 2)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X16 }
  }
  v10 = v8 == 1;
  if (v8 == 1)
    v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t))(v5 + 16))(a1);
  *(_BYTE *)(a1 + v7) = v10;
  return a1;
}

uint64_t sub_23BEA6AE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(a3 + 24);
    v7 = *(_QWORD *)(v5 - 8);
    v8 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v8 + 64) <= *(_QWORD *)(v7 + 64))
      v9 = *(_QWORD *)(v7 + 64);
    else
      v9 = *(_QWORD *)(v8 + 64);
    v10 = *(unsigned __int8 *)(a1 + v9);
    if (v10 >= 2)
    {
      if (v9 <= 3)
        v11 = v9;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
      v12 = *(_QWORD *)(v6 - 8);
    else
      v12 = *(_QWORD *)(v5 - 8);
    if (v10 == 1)
      v13 = *(_QWORD *)(a3 + 24);
    else
      v13 = *(_QWORD *)(a3 + 16);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v13);
    v14 = *(unsigned __int8 *)(a2 + v9);
    if (v14 >= 2)
    {
      if (v9 <= 3)
        v15 = v9;
      else
        v15 = 4;
      __asm { BR              X12 }
    }
    v16 = v14 == 1;
    if (v14 == 1)
      v17 = v8;
    else
      v17 = v7;
    if (v14 == 1)
      v18 = v6;
    else
      v18 = v5;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(a1, a2, v18);
    *(_BYTE *)(a1 + v9) = v16;
  }
  return a1;
}

uint64_t sub_23BEA6C60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;

  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v4 - 8);
  if (*(_QWORD *)(v6 + 64) <= *(_QWORD *)(v5 + 64))
    v7 = *(_QWORD *)(v5 + 64);
  else
    v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned __int8 *)(a2 + v7);
  if (v8 >= 2)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X16 }
  }
  v10 = v8 == 1;
  if (v8 == 1)
    v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t))(v5 + 32))(a1);
  *(_BYTE *)(a1 + v7) = v10;
  return a1;
}

uint64_t sub_23BEA6D34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(a3 + 24);
    v7 = *(_QWORD *)(v5 - 8);
    v8 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v8 + 64) <= *(_QWORD *)(v7 + 64))
      v9 = *(_QWORD *)(v7 + 64);
    else
      v9 = *(_QWORD *)(v8 + 64);
    v10 = *(unsigned __int8 *)(a1 + v9);
    if (v10 >= 2)
    {
      if (v9 <= 3)
        v11 = v9;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
      v12 = *(_QWORD *)(v6 - 8);
    else
      v12 = *(_QWORD *)(v5 - 8);
    if (v10 == 1)
      v13 = *(_QWORD *)(a3 + 24);
    else
      v13 = *(_QWORD *)(a3 + 16);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v13);
    v14 = *(unsigned __int8 *)(a2 + v9);
    if (v14 >= 2)
    {
      if (v9 <= 3)
        v15 = v9;
      else
        v15 = 4;
      __asm { BR              X12 }
    }
    v16 = v14 == 1;
    if (v14 == 1)
      v17 = v8;
    else
      v17 = v7;
    if (v14 == 1)
      v18 = v6;
    else
      v18 = v5;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(a1, a2, v18);
    *(_BYTE *)(a1 + v9) = v16;
  }
  return a1;
}

uint64_t sub_23BEA6EB0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
  if (v3 <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64))
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_21;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_21:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 2)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_21;
LABEL_14:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 255);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_23BEA6F78 + 4 * byte_23BFFA3D8[(v4 - 1)]))();
}

void sub_23BEA6FC4(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) - 8) + 64);
  v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    v7 = 0;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = 4u;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v8 = a2 - 255;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t sub_23BEA7170(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 64);
  if (v2 <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64))
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (*(unsigned __int8 *)(a1 + v2) < 2u)
    return *(unsigned __int8 *)(a1 + v2);
  if (v2 <= 3)
    v3 = v2;
  else
    v3 = 4;
  return ((uint64_t (*)(void))((char *)&loc_23BEA71BC + 4 * byte_23BFFA3E6[v3]))();
}

void sub_23BEA7204(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v4;
  size_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;

  if (a2 > 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64) <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16)
                                                                                              - 8)
                                                                                  + 64))
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
    else
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
    v6 = a2 - 2;
    if (v5 < 4)
    {
      v7 = v6 >> (8 * v5);
      v8 = v6 & ~(-1 << (8 * v5));
      a1[v5] = v7 + 2;
      bzero(a1, v5);
      if ((_DWORD)v5 == 3)
      {
        *(_WORD *)a1 = v8;
        a1[2] = BYTE2(v8);
      }
      else if ((_DWORD)v5 == 2)
      {
        *(_WORD *)a1 = v8;
      }
      else
      {
        *a1 = v8;
      }
    }
    else
    {
      a1[v5] = 2;
      bzero(a1, v5);
      *(_DWORD *)a1 = v6;
    }
  }
  else
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
    if (v4 <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64))
      v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
    a1[v4] = a2;
  }
}

void sub_23BEA72F4()
{
  type metadata accessor for CanvasLayout();
}

uint64_t sub_23BEA7328(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v6 - v4, v1, a1);
  sub_23BFF8FEC();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v1, a1);
}

void sub_23BEA73A0()
{
  type metadata accessor for CanvasLayout();
}

uint64_t sub_23BEA73D4()
{
  sub_23BFF901C();
  return sub_23BFF8FF8();
}

void CanvasLayoutReader.init(layoutProvider:content:)(uint64_t a1)
{
  MEMORY[0x24BDAC7A8](a1);
  type metadata accessor for CanvasLayout();
}

void sub_23BEA747C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;

  MEMORY[0x24BDAC7A8](a1);
  v14 = (char *)&a9 - v13;
  *v10 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3728);
  swift_storeEnumTagMultiPayload();
  *(_OWORD *)(v12 - 128) = 0u;
  *(_OWORD *)(v12 - 112) = 0u;
  v15 = sub_23BEA75B4();
  (*(void (**)(uint64_t, uint64_t))(v11 + 32))(v9, v11);
  CanvasLayout.init(carouselPageControlSpacing:contentMargins:dynamicTypeSize:intersectionSpacing:sectionDensityFactor:sizeClass:)((_OWORD *)(v12 - 128), 2, v15, (uint64_t)v14, 0.0, 20.0);
}

void sub_23BEA7534()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 - 128) = v5;
  *(_QWORD *)(v6 - 120) = v2;
  *(_QWORD *)(v6 - 112) = v0;
  *(_QWORD *)(v6 - 104) = v4;
  *(_QWORD *)(v6 - 96) = v1;
  *(_QWORD *)(v6 - 88) = v3;
  type metadata accessor for CanvasLayoutReader();
}

void sub_23BEA754C()
{
  sub_23BEA72F4();
}

uint64_t sub_23BEA7570()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;
  uint64_t v5;

  result = sub_23BEA883C(*(__int128 **)(v2 - 152), v1 + *(int *)(v0 + 72));
  v4 = (_QWORD *)(v1 + *(int *)(v0 + 76));
  v5 = *(_QWORD *)(v2 - 136);
  *v4 = *(_QWORD *)(v2 - 144);
  v4[1] = v5;
  return result;
}

uint64_t sub_23BEA75B4()
{
  swift_getTupleTypeMetadata2();
  sub_23BFF9490();
  return sub_23BFF92F8();
}

void CanvasLayoutReader.body.getter(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[19];
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v11 = a2;
  v8 = *(a1 - 1);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x24BDAC7A8](a1);
  v7[17] = (char *)v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_23BFF85F0();
  v10 = *(_QWORD *)(v4 - 8);
  v7[8] = v4;
  MEMORY[0x24BDAC7A8](v4);
  v7[12] = (char *)v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = a1[4];
  v14 = a1[3];
  v12 = v6;
  v13 = a1[6];
  v15 = a1[7];
  v16 = v14;
  v17 = v6;
  v18 = v13;
  v19 = v15;
  type metadata accessor for CanvasLayout();
}

void sub_23BEA7710(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  *(_QWORD *)(v12 - 432) = a1;
  v13 = MEMORY[0x24BDAC7A8](a1);
  v14 = *(_QWORD *)(v9 + 16);
  *(_QWORD *)(v12 - 392) = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(v12 - 280) = v14;
  MEMORY[0x24BDAC7A8](v13);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3730);
  v15 = sub_23BFF862C();
  *(_QWORD *)(v12 - 352) = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  *(_QWORD *)(v12 - 256) = (char *)&a9 - v16;
  v17 = *(_QWORD *)(v10 + 40);
  v18 = sub_23BEA1F94(&qword_256AE3738, &qword_256AE3730, MEMORY[0x24BDEF370]);
  *(_QWORD *)(v12 - 136) = v17;
  *(_QWORD *)(v12 - 128) = v18;
  v19 = MEMORY[0x24BDED308];
  *(_QWORD *)(v12 - 424) = v15;
  v20 = MEMORY[0x242615198](v19, v15, v12 - 136);
  *(_QWORD *)(v12 - 408) = v20;
  v21 = sub_23BEA8854();
  *(_QWORD *)(v12 - 416) = v21;
  *(_QWORD *)(v12 - 120) = v15;
  *(_QWORD *)(v12 - 112) = v11;
  *(_QWORD *)(v12 - 104) = v20;
  *(_QWORD *)(v12 - 96) = v21;
  v22 = MEMORY[0x24261512C](0, v12 - 120, MEMORY[0x24BDF38E8], 0);
  *(_QWORD *)(v12 - 336) = *(_QWORD *)(v22 - 8);
  *(_QWORD *)(v12 - 376) = v22;
  MEMORY[0x24BDAC7A8](v22);
  *(_QWORD *)(v12 - 248) = (char *)&a9 - v23;
  v24 = sub_23BFF862C();
  *(_QWORD *)(v12 - 344) = v24;
  *(_QWORD *)(v12 - 320) = *(_QWORD *)(v24 - 8);
  v25 = MEMORY[0x24BDAC7A8](v24);
  *(_QWORD *)(v12 - 384) = (char *)&a9 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v25);
  *(_QWORD *)(v12 - 360) = (char *)&a9 - v27;
  *(_QWORD *)(v12 - 440) = v10;
  sub_23BEA73A0();
}

uint64_t sub_23BEA7928()
{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t OpaqueTypeConformance2;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t);

  v1(v4);
  (*(void (**)(uint64_t, _QWORD))(v3 + 8))(v4, *(_QWORD *)(v6 - 432));
  v7 = *(_QWORD *)(v6 - 280);
  v8 = *(_QWORD *)(v6 - 240);
  *(_QWORD *)(v6 - 208) = v7;
  *(_QWORD *)(v6 - 200) = v8;
  v9 = *(_QWORD *)(v6 - 272);
  *(_QWORD *)(v6 - 192) = v9;
  *(_QWORD *)(v6 - 184) = v5;
  v10 = *(_QWORD *)(v6 - 264);
  v11 = *(_QWORD *)(v6 - 232);
  *(_QWORD *)(v6 - 176) = v10;
  *(_QWORD *)(v6 - 168) = v11;
  *(_QWORD *)(v6 - 160) = v0;
  sub_23BFF91C0();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3748);
  sub_23BEA1F94(qword_256AE3750, &qword_256AE3748, MEMORY[0x24BDEC6F8]);
  *(_QWORD *)(v6 - 456) = v5;
  sub_23BFF8CBC();
  v12 = v7;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 392) + 8))(v2, v7);
  v13 = *(_QWORD *)(v6 - 368);
  *(_QWORD *)(v6 - 448) = v0;
  sub_23BFCC4C4(v13);
  v14 = *(_QWORD *)(v6 - 312);
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
  *(_QWORD *)(v6 - 392) = v15;
  v16 = *(_QWORD *)(v6 - 328);
  v17 = *(_QWORD *)(v6 - 440);
  v15(v16, v0, v17);
  v18 = *(unsigned __int8 *)(v14 + 80);
  v19 = (v18 + 64) & ~v18;
  *(_QWORD *)(v6 - 304) += v19;
  *(_QWORD *)(v6 - 432) = v19;
  *(_QWORD *)(v6 - 464) = v18 | 7;
  v20 = (_QWORD *)swift_allocObject();
  v21 = *(_QWORD *)(v6 - 240);
  v20[2] = v12;
  v20[3] = v21;
  v20[4] = v9;
  v20[5] = v5;
  v22 = *(_QWORD *)(v6 - 232);
  v20[6] = v10;
  v20[7] = v22;
  v23 = (char *)v20 + v19;
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 32);
  v25 = v16;
  v26 = v17;
  v24(v23, v16, v17);
  v27 = *(_QWORD *)(v6 - 256);
  v28 = *(_QWORD *)(v6 - 424);
  v29 = *(_QWORD *)(v6 - 400);
  v30 = *(_QWORD *)(v6 - 408);
  v31 = *(_QWORD *)(v6 - 416);
  sub_23BFF8F20();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 296) + 8))(v13, v29);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 352) + 8))(v27, v28);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 - 392))(v25, *(_QWORD *)(v6 - 448), v26);
  v32 = (_QWORD *)swift_allocObject();
  v33 = *(_QWORD *)(v6 - 240);
  v32[2] = *(_QWORD *)(v6 - 280);
  v32[3] = v33;
  v34 = *(_QWORD *)(v6 - 456);
  v32[4] = *(_QWORD *)(v6 - 272);
  v32[5] = v34;
  v35 = (char *)v32 + *(_QWORD *)(v6 - 432);
  v36 = *(_QWORD *)(v6 - 232);
  v32[6] = *(_QWORD *)(v6 - 264);
  v32[7] = v36;
  v24(v35, v25, v26);
  *(_QWORD *)(v6 - 120) = v28;
  *(_QWORD *)(v6 - 112) = v29;
  *(_QWORD *)(v6 - 104) = v30;
  *(_QWORD *)(v6 - 96) = v31;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v38 = *(_QWORD *)(v6 - 384);
  v39 = *(_QWORD *)(v6 - 376);
  v40 = *(_QWORD *)(v6 - 248);
  sub_23BFF8F14();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 336) + 8))(v40, v39);
  v41 = MEMORY[0x24BDF0910];
  *(_QWORD *)(v6 - 152) = OpaqueTypeConformance2;
  *(_QWORD *)(v6 - 144) = v41;
  v42 = *(_QWORD *)(v6 - 344);
  MEMORY[0x242615198](MEMORY[0x24BDED308], v42, v6 - 152);
  v43 = *(_QWORD *)(v6 - 360);
  sub_23BEA72EC(v38, v42, v43);
  v44 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 320) + 8);
  v44(v38, v42);
  sub_23BEA5C0C(v43, v42, *(_QWORD *)(v6 - 288));
  return ((uint64_t (*)(uint64_t, uint64_t))v44)(v43, v42);
}

void sub_23BEA7CF0()
{
  type metadata accessor for CanvasLayoutReader();
}

uint64_t sub_23BEA7D44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t result;
  void (**v15)();
  _BYTE v16[96];

  v8 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = &v16[-v9];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(&v16[-v9], v5, a1);
  v11 = (*(unsigned __int8 *)(v8 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v12 = (char *)swift_allocObject();
  *((_QWORD *)v12 + 2) = v4;
  *((_QWORD *)v12 + 3) = v3;
  *((_QWORD *)v12 + 4) = v2;
  *((_QWORD *)v12 + 5) = v1;
  v13 = *(_QWORD *)(v6 - 144);
  *((_QWORD *)v12 + 6) = *(_QWORD *)(v6 - 152);
  *((_QWORD *)v12 + 7) = v13;
  result = (*(uint64_t (**)(char *, _BYTE *, uint64_t))(v8 + 32))(&v12[v11], v10, a1);
  v15 = *(void (***)())(v6 - 136);
  *v15 = sub_23BEAA100;
  v15[1] = (void (*)())v12;
  return result;
}

void sub_23BEA7E04(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v15;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v18 = a8;
  v19 = a7;
  v24 = a4;
  v25 = a5;
  v22 = a1;
  v23 = a3;
  v20 = a9;
  v21 = a2;
  v17 = sub_23BFF8500();
  v15 = *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64);
  MEMORY[0x24BDAC7A8](v17);
  v16[1] = (char *)v16 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = a3;
  v27 = a4;
  v28 = a5;
  v29 = a6;
  v16[2] = a6;
  v30 = a7;
  v31 = a8;
  type metadata accessor for CanvasLayoutReader();
}

uint64_t sub_23BEA7EA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void (*v10)(char *, _QWORD, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;

  v6 = *(_QWORD *)(a1 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v26 - v8;
  *(_QWORD *)(v4 - 224) = sub_23BFF8F8C();
  v10 = *(void (**)(char *, _QWORD, uint64_t))(v6 + 16);
  *(_QWORD *)(v4 - 200) = v10;
  v10(v9, *(_QWORD *)(v4 - 184), a1);
  v11 = v1;
  v12 = *(_QWORD *)(v4 - 248);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 16))(v11, *(_QWORD *)(v4 - 176), v12);
  v13 = *(unsigned __int8 *)(v6 + 80);
  v14 = (v13 + 64) & ~v13;
  *(_QWORD *)(v4 - 240) = v13 | 7;
  *(_QWORD *)(v4 - 232) = v14 + v7;
  v15 = (v14 + v7 + *(unsigned __int8 *)(v3 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v16 = (char *)swift_allocObject();
  v17 = *(_QWORD *)(v4 - 160);
  *((_QWORD *)v16 + 2) = *(_QWORD *)(v4 - 168);
  *((_QWORD *)v16 + 3) = v17;
  *((_QWORD *)v16 + 4) = *(_QWORD *)(v4 - 152);
  *((_QWORD *)v16 + 5) = v2;
  v19 = *(_QWORD *)(v4 - 216);
  v18 = *(_QWORD *)(v4 - 208);
  *((_QWORD *)v16 + 6) = v18;
  *((_QWORD *)v16 + 7) = v19;
  v20 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v20(&v16[v14], v9, a1);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 32))(&v16[v15], *(_QWORD *)(v4 - 264), v12);
  *(_QWORD *)(v4 - 136) = *(_QWORD *)(v4 - 224);
  *(_QWORD *)(v4 - 128) = sub_23BEAA350;
  *(_QWORD *)(v4 - 112) = 0;
  *(_QWORD *)(v4 - 104) = 0;
  *(_QWORD *)(v4 - 120) = v16;
  sub_23BFF84DC();
  *(_QWORD *)(v4 - 144) = v21;
  (*(void (**)(char *, _QWORD, uint64_t))(v4 - 200))(v9, *(_QWORD *)(v4 - 184), a1);
  v22 = (char *)swift_allocObject();
  v23 = *(_QWORD *)(v4 - 160);
  *((_QWORD *)v22 + 2) = *(_QWORD *)(v4 - 168);
  *((_QWORD *)v22 + 3) = v23;
  v24 = *(_QWORD *)(v4 - 256);
  *((_QWORD *)v22 + 4) = *(_QWORD *)(v4 - 152);
  *((_QWORD *)v22 + 5) = v24;
  *((_QWORD *)v22 + 6) = v18;
  *((_QWORD *)v22 + 7) = v19;
  v20(&v22[v14], v9, a1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE37E0);
  sub_23BEAA610();
  sub_23BEAA674();
  sub_23BFF8F20();
  swift_release();
  swift_release();
  sub_23BEAA6B8(*(_QWORD *)(v4 - 128));
  return sub_23BEAA6B8(*(_QWORD *)(v4 - 112));
}

void sub_23BEA809C(uint64_t a1)
{
  MEMORY[0x24BDAC7A8](a1);
  type metadata accessor for CanvasLayout();
}

void sub_23BEA8120(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v7 - 152) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 144) = a1;
  v8 = MEMORY[0x24BDAC7A8](a1);
  MEMORY[0x24BDAC7A8](v8);
  *(_QWORD *)(v7 - 128) = v6;
  *(_QWORD *)(v7 - 120) = v5;
  *(_QWORD *)(v7 - 112) = v2;
  *(_QWORD *)(v7 - 104) = v3;
  *(_QWORD *)(v7 - 96) = v1;
  *(_QWORD *)(v7 - 88) = v4;
  type metadata accessor for CanvasLayoutReader();
}

void sub_23BEA8184(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(int *)(a1 + 72);
  *(_QWORD *)(v2 - 168) = v1;
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v1 + v3), *(_QWORD *)(v1 + v3 + 24));
  sub_23BEA73A0();
}

void sub_23BEA81B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_23BFF84DC();
  (*(void (**)(uint64_t, uint64_t))(v2 + 48))(v1, v2);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 40))(v4, v3, v5, v0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 136) + 8))(v3, v1);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 152) + 8))(v4, *(_QWORD *)(v6 - 144));
  sub_23BEAA04C();
}

uint64_t sub_23BEA822C()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

void sub_23BEA8258(uint64_t a1)
{
  MEMORY[0x24BDAC7A8](a1);
  type metadata accessor for CanvasLayout();
}

void sub_23BEA82E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v6 - 168) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v6 - 160) = a1;
  v7 = MEMORY[0x24BDAC7A8](a1);
  MEMORY[0x24BDAC7A8](v7);
  *(_QWORD *)(v6 - 144) = *(_QWORD *)(v6 - 176);
  *(_QWORD *)(v6 - 136) = v5;
  *(_QWORD *)(v6 - 128) = v2;
  *(_QWORD *)(v6 - 120) = v3;
  *(_QWORD *)(v6 - 112) = v1;
  *(_QWORD *)(v6 - 104) = v4;
  type metadata accessor for CanvasLayoutReader();
}

void sub_23BEA834C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(int *)(a1 + 72);
  *(_QWORD *)(v2 - 184) = v1;
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v1 + v3), *(_QWORD *)(v1 + v3 + 24));
  sub_23BEA73A0();
}

void sub_23BEA837C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;

  (*(void (**)(uint64_t, uint64_t, double))(v3 + 48))(v1, v3, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 40))(v4, v2, v5, v0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 152) + 8))(v2, v1);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 168) + 8))(v4, *(_QWORD *)(v6 - 160));
  sub_23BEAA04C();
}

uint64_t sub_23BEA83F0()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

void sub_23BEA8420()
{
  uint64_t v0;

  v0 = sub_23BFF85F0();
  MEMORY[0x24BDAC7A8](v0);
  type metadata accessor for CanvasLayout();
}

void sub_23BEA84AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v6 - 160) = *(_QWORD *)(a1 - 8);
  v7 = MEMORY[0x24BDAC7A8](a1);
  MEMORY[0x24BDAC7A8](v7);
  *(_QWORD *)(v6 - 128) = v4;
  *(_QWORD *)(v6 - 120) = v3;
  v8 = *(_QWORD *)(v6 - 168);
  *(_QWORD *)(v6 - 112) = v5;
  *(_QWORD *)(v6 - 104) = v8;
  *(_QWORD *)(v6 - 96) = v2;
  *(_QWORD *)(v6 - 88) = v1;
  type metadata accessor for CanvasLayoutReader();
}

void sub_23BEA8518(uint64_t a1)
{
  uint64_t v1;

  __swift_project_boxed_opaque_existential_1((_QWORD *)(v1 + *(int *)(a1 + 72)), *(_QWORD *)(v1 + *(int *)(a1 + 72) + 24));
  sub_23BEA73A0();
}

void sub_23BEA8544()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v5 - 152) + 16))(v1, *(_QWORD *)(v5 - 136), *(_QWORD *)(v5 - 144));
  v6 = sub_23BF87BD4(v1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, v6, v3, v4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 160) + 8))(v2, v0);
  sub_23BEAA04C();
}

uint64_t sub_23BEA85A4()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

void sub_23BEA85D0()
{
  uint64_t v0;

  v0 = sub_23BFF85F0();
  MEMORY[0x24BDAC7A8](v0);
  type metadata accessor for CanvasLayout();
}

void sub_23BEA8654(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v6 - 136) = *(_QWORD *)(a1 - 8);
  v7 = MEMORY[0x24BDAC7A8](a1);
  MEMORY[0x24BDAC7A8](v7);
  *(_QWORD *)(v6 - 128) = v3;
  *(_QWORD *)(v6 - 120) = v5;
  v8 = *(_QWORD *)(v6 - 144);
  *(_QWORD *)(v6 - 112) = v4;
  *(_QWORD *)(v6 - 104) = v8;
  *(_QWORD *)(v6 - 96) = v2;
  *(_QWORD *)(v6 - 88) = v1;
  type metadata accessor for CanvasLayoutReader();
}

void sub_23BEA86C0(uint64_t a1)
{
  uint64_t v1;

  __swift_project_boxed_opaque_existential_1((_QWORD *)(v1 + *(int *)(a1 + 72)), *(_QWORD *)(v1 + *(int *)(a1 + 72) + 24));
  sub_23BEA73A0();
}

void sub_23BEA86EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_23BFCC4C4(v1);
  v6 = sub_23BF87BD4(v1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, v6, v3, v4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 136) + 8))(v2, v0);
  sub_23BEAA04C();
}

uint64_t sub_23BEA8740()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v2, v0);
}

uint64_t sub_23BEA8770()
{
  return sub_23BFF8740();
}

uint64_t sub_23BEA8790()
{
  return sub_23BFF8740();
}

uint64_t sub_23BEA87B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = sub_23BFF85F0();
  MEMORY[0x24BDAC7A8](v2);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return sub_23BFF874C();
}

void type metadata accessor for CanvasLayoutReader()
{
  JUMPOUT(0x2426150F0);
}

uint64_t sub_23BEA883C(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

unint64_t sub_23BEA8854()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256AE3740;
  if (!qword_256AE3740)
  {
    v1 = sub_23BFF85F0();
    result = MEMORY[0x242615198](MEMORY[0x24BDECF78], v1);
    atomic_store(result, (unint64_t *)&qword_256AE3740);
  }
  return result;
}

void sub_23BEA889C()
{
  sub_23BEA7CF0();
}

void sub_23BEA88B4()
{
  type metadata accessor for CanvasLayoutReader();
}

void sub_23BEA8900()
{
  sub_23BEA8420();
}

void sub_23BEA895C()
{
  type metadata accessor for CanvasLayoutReader();
}

void sub_23BEA899C()
{
  sub_23BEA85D0();
}

uint64_t sub_23BEA89E4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23BEA8A20()
{
  return swift_allocateGenericValueMetadata();
}

void sub_23BEA8A28()
{
  unint64_t v0;

  sub_23BEA9ED8();
  if (v0 <= 0x3F)
    type metadata accessor for CanvasLayout();
}

uint64_t *sub_23BEA8AE0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, uint64_t);
  char *v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v43;

  v6 = sub_23BFF85F0();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_QWORD *)(v7 + 64) <= 8uLL)
    v8 = 8;
  else
    v8 = *(_QWORD *)(v7 + 64);
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v8 + (v10 | 7) + 1;
  v12 = ((v10 + 64) & ~v10) + *(_QWORD *)(v9 + 64);
  v13 = ((v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v14 = v10 | *(_DWORD *)(v7 + 80) & 0xF8;
  if (v14 > 7
    || ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0
    || (((v11 & ~(v10 | 7)) + v13 + 47) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + (((v14 | 7) + 16) & ~(unint64_t)(v14 | 7)));
  }
  else
  {
    v18 = *((unsigned __int8 *)a2 + v8);
    v43 = *(_QWORD *)(a3 + 32);
    if (v18 >= 2)
    {
      if (v8 <= 3)
        v19 = v8;
      else
        v19 = 4;
      __asm { BR              X14 }
    }
    v20 = ~(v10 | 7);
    v21 = ~v10;
    if (v18 == 1)
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
      v22 = 1;
    }
    else
    {
      *a1 = *a2;
      swift_retain();
      v22 = 0;
    }
    *((_BYTE *)a1 + v8) = v22;
    v23 = ((unint64_t)a2 + v11) & v20;
    v24 = ((unint64_t)a1 + v11) & v20;
    *(_QWORD *)v24 = *(_QWORD *)v23;
    v25 = (v24 + 15) & 0xFFFFFFFFFFFFFFF8;
    v26 = (v23 + 15) & 0xFFFFFFFFFFFFFFF8;
    v27 = *(_OWORD *)(v26 + 16);
    *(_OWORD *)v25 = *(_OWORD *)v26;
    *(_OWORD *)(v25 + 16) = v27;
    *(_BYTE *)(v25 + 32) = *(_BYTE *)(v26 + 32);
    v28 = (_QWORD *)((v24 + 55) & 0xFFFFFFFFFFFFF8);
    v29 = (_QWORD *)((v23 + 55) & 0xFFFFFFFFFFFFF8);
    *v28 = *v29;
    v30 = (_QWORD *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8);
    v31 = (_QWORD *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v30 = *v31;
    v32 = ((unint64_t)v30 + v10 + 8) & v21;
    v33 = ((unint64_t)v31 + v10 + 8) & v21;
    v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
    swift_bridgeObjectRetain();
    v34(v32, v33, v43);
    *(_QWORD *)(((v24 | 7) + v12) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((v23 | 7) + v12) & 0xFFFFFFFFFFFFF8);
    v35 = (char *)(v13 + v24);
    v36 = (char *)(v13 + v23);
    v37 = *(_QWORD *)(v13 + v23 + 24);
    *((_QWORD *)v35 + 3) = v37;
    *((_QWORD *)v35 + 4) = *(_QWORD *)(v13 + v23 + 32);
    v38 = **(void (***)(char *, char *, uint64_t))(v37 - 8);
    swift_retain();
    v38(v35, v36, v37);
    v39 = (_QWORD *)((unint64_t)(v36 + 47) & 0xFFFFFFFFFFFFFFF8);
    v40 = v39[1];
    v41 = (_QWORD *)((unint64_t)(v35 + 47) & 0xFFFFFFFFFFFFFFF8);
    *v41 = *v39;
    v41[1] = v40;
  }
  swift_retain();
  return a1;
}

uint64_t sub_23BEA8DA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = sub_23BFF85F0();
  v5 = *(_QWORD *)(v4 - 8);
  if (*(_QWORD *)(v5 + 64) <= 8uLL)
    v6 = 8;
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *(unsigned __int8 *)(a1 + v6);
  if (v7 >= 2)
  {
    if (v6 <= 3)
      v8 = v6;
    else
      v8 = 4;
    __asm { BR              X13 }
  }
  if (v7 == 1)
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  else
    swift_release();
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (a1 + v6 + (v11 | 7) + 1) & ~(v11 | 7);
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v10 + 8))((v11 + ((((v12 + 55) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v11, v9);
  v13 = *(_QWORD *)(v10 + 64) + ((v11 + 64) & ~v11) + 7;
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v12 + (v13 & 0xFFFFFFFFFFFFFFF8) + 8);
  return swift_release();
}

_QWORD *sub_23BEA8F2C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;

  v6 = sub_23BFF85F0();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_QWORD *)(v7 + 64) <= 8uLL)
    v8 = 8;
  else
    v8 = *(_QWORD *)(v7 + 64);
  v9 = *((unsigned __int8 *)a2 + v8);
  if (v9 >= 2)
  {
    if (v8 <= 3)
      v10 = v8;
    else
      v10 = 4;
    __asm { BR              X13 }
  }
  if (v9 == 1)
  {
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(a1, a2, v6);
    v11 = 1;
  }
  else
  {
    *a1 = *a2;
    swift_retain();
    v11 = 0;
  }
  *((_BYTE *)a1 + v8) = v11;
  v12 = *(_QWORD *)(a3 + 32);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v8 + (v14 | 7) + 1;
  v16 = (_QWORD *)(((unint64_t)a2 + v15) & ~(v14 | 7));
  v17 = (_QWORD *)(((unint64_t)a1 + v15) & ~(v14 | 7));
  *v17 = *v16;
  v18 = ((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8;
  v19 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
  v20 = *(_OWORD *)(v19 + 16);
  *(_OWORD *)v18 = *(_OWORD *)v19;
  *(_OWORD *)(v18 + 16) = v20;
  *(_BYTE *)(v18 + 32) = *(_BYTE *)(v19 + 32);
  v21 = (_QWORD *)(((unint64_t)v17 + 55) & 0xFFFFFFFFFFFFF8);
  v22 = (_QWORD *)(((unint64_t)v16 + 55) & 0xFFFFFFFFFFFFF8);
  *v21 = *v22;
  v23 = (_QWORD *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
  v24 = (_QWORD *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v23 = *v24;
  v25 = ((unint64_t)v23 + v14 + 8) & ~v14;
  v26 = ((unint64_t)v24 + v14 + 8) & ~v14;
  v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16);
  swift_bridgeObjectRetain();
  v27(v25, v26, v12);
  v28 = *(_QWORD *)(v13 + 64) + ((v14 + 64) & ~v14) + 7;
  *(_QWORD *)(((unint64_t)v17 + v28) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v16 + v28) & 0xFFFFFFFFFFFFF8);
  v29 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
  v30 = (char *)v17 + v29;
  v31 = (char *)v16 + v29;
  v32 = *(_QWORD *)((char *)v16 + v29 + 24);
  *((_QWORD *)v30 + 3) = v32;
  *((_QWORD *)v30 + 4) = *(_QWORD *)((char *)v16 + v29 + 32);
  v33 = **(void (***)(char *, char *, uint64_t))(v32 - 8);
  swift_retain();
  v33(v30, v31, v32);
  v34 = (_QWORD *)((unint64_t)(v31 + 47) & 0xFFFFFFFFFFFFFFF8);
  v35 = v34[1];
  v36 = (_QWORD *)((unint64_t)(v30 + 47) & 0xFFFFFFFFFFFFFFF8);
  *v36 = *v34;
  v36[1] = v35;
  swift_retain();
  return a1;
}

_QWORD *sub_23BEA917C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;

  if (a1 != a2)
  {
    v6 = sub_23BFF85F0();
    v7 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v7 + 64) <= 8uLL)
      v8 = 8;
    else
      v8 = *(_QWORD *)(v7 + 64);
    v9 = *((unsigned __int8 *)a1 + v8);
    if (v9 >= 2)
    {
      if (v8 <= 3)
        v10 = v8;
      else
        v10 = 4;
      __asm { BR              X12 }
    }
    if (v9 == 1)
      (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(a1, v6);
    else
      swift_release();
    v11 = *((unsigned __int8 *)a2 + v8);
    if (v11 >= 2)
    {
      if (v8 <= 3)
        v12 = v8;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    if (v11 == 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(a1, a2, v6);
      *((_BYTE *)a1 + v8) = 1;
    }
    else
    {
      *a1 = *a2;
      *((_BYTE *)a1 + v8) = 0;
      swift_retain();
    }
  }
  v13 = *(_QWORD *)(*(_QWORD *)(sub_23BFF85F0() - 8) + 64);
  if (v13 <= 8)
    v13 = 8;
  v14 = *(_QWORD *)(a3 + 32);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = v13 + (v16 | 7) + 1;
  v18 = (_QWORD *)(((unint64_t)a2 + v17) & ~(v16 | 7));
  v19 = (_QWORD *)(((unint64_t)a1 + v17) & ~(v16 | 7));
  *v19 = *v18;
  v20 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8;
  v21 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *(_QWORD *)(v20 + 8) = *(_QWORD *)(v21 + 8);
  *(_QWORD *)(v20 + 16) = *(_QWORD *)(v21 + 16);
  *(_QWORD *)(v20 + 24) = *(_QWORD *)(v21 + 24);
  *(_BYTE *)(v20 + 32) = *(_BYTE *)(v21 + 32);
  v22 = (_QWORD *)(((unint64_t)v19 + 55) & 0xFFFFFFFFFFFFF8);
  v23 = (_QWORD *)(((unint64_t)v18 + 55) & 0xFFFFFFFFFFFFF8);
  *v22 = *v23;
  v24 = (_QWORD *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
  v25 = (_QWORD *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v24 = *v25;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v15 + 24))(((unint64_t)v24 + v16 + 8) & ~v16, ((unint64_t)v25 + v16 + 8) & ~v16, v14);
  v26 = *(_QWORD *)(v15 + 64) + ((v16 + 64) & ~v16) + 7;
  *(_QWORD *)(((unint64_t)v19 + v26) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v18 + v26) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  v27 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
  v28 = (char *)v19 + v27;
  v29 = (char *)v18 + v27;
  __swift_assign_boxed_opaque_existential_1((_QWORD *)((char *)v19 + v27), (_QWORD *)((char *)v18 + v27));
  v30 = (_QWORD *)((unint64_t)(v28 + 47) & 0xFFFFFFFFFFFFFFF8);
  v31 = (_QWORD *)((unint64_t)(v29 + 47) & 0xFFFFFFFFFFFFFFF8);
  v32 = v31[1];
  *v30 = *v31;
  v30[1] = v32;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

_QWORD *sub_23BEA9624(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;

  v6 = sub_23BFF85F0();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_QWORD *)(v7 + 64) <= 8uLL)
    v8 = 8;
  else
    v8 = *(_QWORD *)(v7 + 64);
  v9 = *((unsigned __int8 *)a2 + v8);
  if (v9 >= 2)
  {
    if (v8 <= 3)
      v10 = v8;
    else
      v10 = 4;
    __asm { BR              X13 }
  }
  if (v9 == 1)
  {
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 32))(a1, a2, v6);
    v11 = 1;
  }
  else
  {
    v11 = 0;
    *a1 = *a2;
  }
  *((_BYTE *)a1 + v8) = v11;
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = v8 + (v13 | 7) + 1;
  v15 = (_QWORD *)(((unint64_t)a1 + v14) & ~(v13 | 7));
  v16 = (_QWORD *)(((unint64_t)a2 + v14) & ~(v13 | 7));
  *v15 = *v16;
  v17 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
  v18 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
  v19 = *(_OWORD *)(v18 + 16);
  *(_OWORD *)v17 = *(_OWORD *)v18;
  *(_OWORD *)(v17 + 16) = v19;
  *(_BYTE *)(v17 + 32) = *(_BYTE *)(v18 + 32);
  v20 = (_QWORD *)(((unint64_t)v15 + 55) & 0xFFFFFFFFFFFFF8);
  v21 = (_QWORD *)(((unint64_t)v16 + 55) & 0xFFFFFFFFFFFFF8);
  *v20 = *v21;
  v22 = (_QWORD *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
  v23 = (_QWORD *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v22 = *v23;
  (*(void (**)(unint64_t, unint64_t))(v12 + 32))(((unint64_t)v22 + v13 + 8) & ~v13, ((unint64_t)v23 + v13 + 8) & ~v13);
  v24 = *(_QWORD *)(v12 + 64) + ((v13 + 64) & ~v13) + 7;
  *(_QWORD *)(((unint64_t)v15 + v24) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v16 + v24) & 0xFFFFFFFFFFFFF8);
  v25 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
  v26 = (char *)v15 + v25;
  v27 = (char *)v16 + v25;
  v29 = *(_OWORD *)v27;
  v28 = *((_OWORD *)v27 + 1);
  *((_QWORD *)v26 + 4) = *((_QWORD *)v27 + 4);
  *(_OWORD *)v26 = v29;
  *((_OWORD *)v26 + 1) = v28;
  *(_OWORD *)((unint64_t)(v26 + 47) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((unint64_t)(v27 + 47) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *sub_23BEA9830(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  __int128 v32;

  if (a1 != a2)
  {
    v6 = sub_23BFF85F0();
    v7 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v7 + 64) <= 8uLL)
      v8 = 8;
    else
      v8 = *(_QWORD *)(v7 + 64);
    v9 = *((unsigned __int8 *)a1 + v8);
    if (v9 >= 2)
    {
      if (v8 <= 3)
        v10 = v8;
      else
        v10 = 4;
      __asm { BR              X12 }
    }
    if (v9 == 1)
      (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(a1, v6);
    else
      swift_release();
    v11 = *((unsigned __int8 *)a2 + v8);
    if (v11 >= 2)
    {
      if (v8 <= 3)
        v12 = v8;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    if (v11 == 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 32))(a1, a2, v6);
      v13 = 1;
    }
    else
    {
      v13 = 0;
      *a1 = *a2;
    }
    *((_BYTE *)a1 + v8) = v13;
  }
  v14 = *(_QWORD *)(*(_QWORD *)(sub_23BFF85F0() - 8) + 64);
  if (v14 <= 8)
    v14 = 8;
  v15 = *(_QWORD *)(a3 + 32);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned __int8 *)(v16 + 80);
  v18 = v14 + (v17 | 7) + 1;
  v19 = (_QWORD *)(((unint64_t)a1 + v18) & ~(v17 | 7));
  v20 = (_QWORD *)(((unint64_t)a2 + v18) & ~(v17 | 7));
  *v19 = *v20;
  v21 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8;
  v22 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *(_QWORD *)(v21 + 8) = *(_QWORD *)(v22 + 8);
  *(_QWORD *)(v21 + 16) = *(_QWORD *)(v22 + 16);
  *(_QWORD *)(v21 + 24) = *(_QWORD *)(v22 + 24);
  *(_BYTE *)(v21 + 32) = *(_BYTE *)(v22 + 32);
  v23 = (_QWORD *)(((unint64_t)v19 + 55) & 0xFFFFFFFFFFFFF8);
  v24 = (_QWORD *)(((unint64_t)v20 + 55) & 0xFFFFFFFFFFFFF8);
  *v23 = *v24;
  v25 = (_QWORD *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
  v26 = (_QWORD *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v25 = *v26;
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v16 + 40))(((unint64_t)v25 + v17 + 8) & ~v17, ((unint64_t)v26 + v17 + 8) & ~v17, v15);
  v27 = *(_QWORD *)(v16 + 64) + ((v17 + 64) & ~v17) + 7;
  *(_QWORD *)(((unint64_t)v19 + v27) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v20 + v27) & 0xFFFFFFFFFFFFF8);
  swift_release();
  v28 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
  v29 = (char *)v19 + v28;
  v30 = (char *)v20 + v28;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v19 + v28);
  v31 = *(_OWORD *)v30;
  v32 = *((_OWORD *)v30 + 1);
  *((_QWORD *)v29 + 4) = *((_QWORD *)v30 + 4);
  *(_OWORD *)v29 = v31;
  *((_OWORD *)v29 + 1) = v32;
  *(_OWORD *)((unint64_t)(v29 + 47) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((unint64_t)(v30 + 47) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t sub_23BEA9B58(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v18;
  uint64_t v19;

  v6 = sub_23BFF85F0();
  if (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) <= 8uLL)
    v7 = 8;
  else
    v7 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  v9 = *(_DWORD *)(v8 + 84);
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = *(_DWORD *)(v8 + 84);
  if (!a2)
    return 0;
  v11 = *(unsigned __int8 *)(v8 + 80);
  v12 = v11 | 7;
  v13 = v7 + (v11 | 7) + 1;
  if (v10 < a2)
  {
    if ((((((v13 & ~v12) + ((*(_QWORD *)(v8 + 64) + ((v11 + 64) & ~v11) + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
         + 16) & 0xFFFFFFF8) != 0)
      v14 = 2;
    else
      v14 = a2 - v10 + 1;
    if (v14 >= 0x10000)
      v15 = 4;
    else
      v15 = 2;
    if (v14 < 0x100)
      v15 = 1;
    if (v14 >= 2)
      v16 = v15;
    else
      v16 = 0;
    __asm { BR              X17 }
  }
  v18 = (uint64_t *)((((((v13 + a1) & ~v12) + 15) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8);
  if ((v9 & 0x80000000) != 0)
    return (*(uint64_t (**)(unint64_t))(v8 + 48))(((unint64_t)v18 + v11 + 8) & ~v11);
  v19 = *v18;
  if ((unint64_t)*v18 >= 0xFFFFFFFF)
    LODWORD(v19) = -1;
  return (v19 + 1);
}

void sub_23BEA9CF0(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;

  v8 = sub_23BFF85F0();
  if (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) <= 8uLL)
    v9 = 8;
  else
    v9 = *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64);
  v10 = *(_QWORD *)(*(_QWORD *)(a4 + 32) - 8);
  if (*(_DWORD *)(v10 + 84) <= 0x7FFFFFFFu)
    v11 = 0x7FFFFFFF;
  else
    v11 = *(_DWORD *)(v10 + 84);
  if (v11 >= a3)
  {
    v14 = 0;
    if (a2 <= v11)
      goto LABEL_20;
  }
  else
  {
    if ((((((_DWORD)v9 + (*(unsigned __int8 *)(v10 + 80) | 7) + 1) & ~(*(unsigned __int8 *)(v10 + 80) | 7))
         + ((*(_DWORD *)(v10 + 64) + ((*(unsigned __int8 *)(v10 + 80) + 64) & ~*(unsigned __int8 *)(v10 + 80)) + 7) & 0xFFFFFFF8)
         + 55) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v12 = a3 - v11 + 1;
    else
      v12 = 2;
    if (v12 >= 0x10000)
      v13 = 4;
    else
      v13 = 2;
    if (v12 < 0x100)
      v13 = 1;
    if (v12 >= 2)
      v14 = v13;
    else
      v14 = 0;
    if (a2 <= v11)
LABEL_20:
      __asm { BR              X15 }
  }
  if ((((((_DWORD)v9 + (*(unsigned __int8 *)(v10 + 80) | 7) + 1) & ~(*(unsigned __int8 *)(v10 + 80) | 7))
       + ((*(_DWORD *)(v10 + 64) + ((*(unsigned __int8 *)(v10 + 80) + 64) & ~*(unsigned __int8 *)(v10 + 80)) + 7) & 0xFFFFFFF8)
       + 55) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v15 = ~v11 + a2;
    bzero(a1, ((((v9 + (*(unsigned __int8 *)(v10 + 80) | 7) + 1) & ~(*(unsigned __int8 *)(v10 + 80) | 7))+ ((*(_QWORD *)(v10 + 64)+ ((*(unsigned __int8 *)(v10 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ 7) & 0xFFFFFFFFFFFFFFF8)+ 55) & 0xFFFFFFFFFFFFFFF8)+ 16);
    *a1 = v15;
  }
  __asm { BR              X10 }
}

void sub_23BEA9E3C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x23BEA9EC0);
}

void sub_23BEA9E44()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = 0;
  if (v0)
    JUMPOUT(0x23BEA9E4CLL);
  JUMPOUT(0x23BEA9EC0);
}

void sub_23BEA9E74()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x23BEA9EC0);
}

void sub_23BEA9E7C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x23BEA9EC0);
}

void sub_23BEA9E84(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v4 + v5) = 0;
  if (v3)
  {
    if ((a3 & 0x80000000) == 0)
    {
      if ((v3 & 0x80000000) == 0)
        JUMPOUT(0x23BEA9EBCLL);
      JUMPOUT(0x23BEA9EB8);
    }
    JUMPOUT(0x23BEA9E90);
  }
  JUMPOUT(0x23BEA9EC0);
}

void sub_23BEA9ED8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256AE37D8)
  {
    sub_23BFF85F0();
    v0 = sub_23BFF844C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256AE37D8);
  }
}

uint64_t sub_23BEA9F2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD v9[2];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD v14[2];

  v1 = *(_QWORD *)(a1 + 24);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3730);
  v2 = sub_23BFF862C();
  v3 = sub_23BFF85F0();
  v14[0] = v1;
  v14[1] = sub_23BEA1F94(&qword_256AE3738, &qword_256AE3730, MEMORY[0x24BDEF370]);
  v4 = MEMORY[0x24BDED308];
  v5 = MEMORY[0x242615198](MEMORY[0x24BDED308], v2, v14);
  v6 = sub_23BEA8854();
  v10 = v2;
  v11 = v3;
  v12 = v5;
  v13 = v6;
  MEMORY[0x24261512C](255, &v10, MEMORY[0x24BDF38E8], 0);
  v7 = sub_23BFF862C();
  v10 = v2;
  v11 = v3;
  v12 = v5;
  v13 = v6;
  v9[0] = swift_getOpaqueTypeConformance2();
  v9[1] = MEMORY[0x24BDF0910];
  return MEMORY[0x242615198](v4, v7, v9);
}

void sub_23BEAA04C()
{
  type metadata accessor for CanvasLayout();
}

uint64_t sub_23BEAA084(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v6 - v4, v1, a1);
  sub_23BFF901C();
  return sub_23BFF9004();
}

void sub_23BEAA100()
{
  type metadata accessor for CanvasLayoutReader();
}

void sub_23BEAA14C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  sub_23BEA7E04(v1, v2 + ((v10 + 64) & ~v10), v4, v5, v6, v7, v8, v9, v3);
}

void sub_23BEAA1A0()
{
  type metadata accessor for CanvasLayoutReader();
}

void sub_23BEAA1EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  sub_23BFF8500();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3728);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v3 = sub_23BFF85F0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v1 + ((v2 + 64) & ~v2), v3);
  }
  else
  {
    swift_release();
  }
  swift_bridgeObjectRelease();
  type metadata accessor for CanvasLayout();
}

uint64_t sub_23BEAA2C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5 + *(int *)(a1 + 68), v6);
  sub_23BFF901C();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v4 + *(int *)(v1 + 72));
  swift_release();
  (*(void (**)(uint64_t))(v7 + 8))(v2 + v3);
  return swift_deallocObject();
}

void sub_23BEAA350()
{
  type metadata accessor for CanvasLayoutReader();
}

void sub_23BEAA394(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;

  v2 = (*(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  sub_23BFF8500();
  sub_23BEA809C(v1 + v2);
}

void objectdestroyTm()
{
  type metadata accessor for CanvasLayoutReader();
}

void sub_23BEAA450(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v2 = (*(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3728);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v3 = sub_23BFF85F0();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v1 + v2, v3);
  }
  else
  {
    swift_release();
  }
  swift_bridgeObjectRelease();
  type metadata accessor for CanvasLayout();
}

uint64_t sub_23BEAA4EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v4 + *(int *)(a1 + 68), v3);
  sub_23BFF901C();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v2 + *(int *)(v1 + 72));
  swift_release();
  return swift_deallocObject();
}

void sub_23BEAA56C()
{
  type metadata accessor for CanvasLayoutReader();
}

void sub_23BEAA5B8()
{
  uint64_t v0;

  sub_23BEA8258(v0);
}

unint64_t sub_23BEAA610()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AE37E8;
  if (!qword_256AE37E8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE37E0);
    v2[0] = MEMORY[0x24BDF3E20];
    v2[1] = MEMORY[0x24BDF0910];
    result = MEMORY[0x242615198](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AE37E8);
  }
  return result;
}

unint64_t sub_23BEAA674()
{
  unint64_t result;

  result = qword_256AE37F0;
  if (!qword_256AE37F0)
  {
    result = MEMORY[0x242615198](MEMORY[0x24BEE50E0], MEMORY[0x24BEE50B0]);
    atomic_store(result, (unint64_t *)&qword_256AE37F0);
  }
  return result;
}

uint64_t sub_23BEAA6B8(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t DynamicSizeClass.init(width:)@<X0>(char *a1@<X8>, double a2@<D0>)
{
  char v4;
  uint64_t result;

  if (a2 <= 374.0)
  {
    v4 = 0;
    goto LABEL_16;
  }
  if (a2 >= 374.0 && a2 <= 460.0)
  {
    v4 = 1;
LABEL_16:
    *a1 = v4;
    return result;
  }
  if (a2 >= 461.0 && a2 <= 726.0)
  {
    v4 = 2;
    goto LABEL_16;
  }
  if (a2 >= 727.0 && a2 <= 981.0)
  {
    v4 = 3;
    goto LABEL_16;
  }
  if (a2 >= 982.0 && a2 <= 1194.0)
  {
    v4 = 4;
    goto LABEL_16;
  }
  if (a2 >= 1195.0)
  {
    v4 = 5;
    goto LABEL_16;
  }
  result = sub_23BFF9820();
  __break(1u);
  return result;
}

uint64_t sub_23BEAA814@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD v21[2];

  v21[1] = a2;
  v11 = sub_23BFF96A0();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)v21 - v14;
  v16 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)v21 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a3, v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, a5) == 1)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    v19 = 1;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v15, a5);
    a1(v18);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, a5);
    v19 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 56))(a6, v19, 1, a4);
}

uint64_t LazyCanvasSectionViewDescriptor.identifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

void LazyCanvasSectionViewDescriptor.header.getter()
{
  type metadata accessor for CanvasSectionHeader();
}

uint64_t sub_23BEAA9D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_23BFF96A0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v0, v1, v2);
}

uint64_t LazyCanvasSectionViewDescriptor.footer.getter@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  *a2 = *(_BYTE *)(v2 + *(int *)(result + 168));
  return result;
}

uint64_t LazyCanvasSectionViewDescriptor.items.getter(uint64_t a1)
{
  sub_23BEAC9C8(a1);
  return swift_bridgeObjectRetain();
}

uint64_t LazyCanvasSectionViewDescriptor.metrics.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 176);
  v5 = sub_23BFF96A0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

void LazyCanvasSectionViewDescriptor.init(identifier:densityFactor:header:footer:items:metrics:)(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = a1;
  a3[1] = a2;
  type metadata accessor for LazyCanvasSectionViewDescriptor();
}

void sub_23BEAAAF8()
{
  type metadata accessor for CanvasSectionHeader();
}

uint64_t sub_23BEAAB18()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v5 = sub_23BFF96A0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v4, v2, v5);
  *(_BYTE *)(v1 + v3[42]) = v0;
  *(_QWORD *)(v1 + v3[43]) = v9;
  v6 = v1 + v3[44];
  v7 = sub_23BFF96A0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v6, v10, v7);
}

BOOL sub_23BEAAB9C(char a1, char a2)
{
  return a1 == a2;
}

uint64_t sub_23BEAABAC()
{
  return sub_23BFF99DC();
}

uint64_t sub_23BEAABD0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x726564616568 && a2 == 0xE600000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7265746F6F66 && a2 == 0xE600000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x736D657469 && a2 == 0xE500000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x7363697274656DLL && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_23BFF9964();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_23BEAADE0()
{
  sub_23BFF99D0();
  sub_23BFF99DC();
  return sub_23BFF9A00();
}

uint64_t sub_23BEAAE24(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23BEAAE5C + 4 * byte_23BFFA5F0[a1]))(0x696669746E656469, 0xEA00000000007265);
}

uint64_t sub_23BEAAE5C()
{
  return 0x726564616568;
}

uint64_t sub_23BEAAE70()
{
  return 0x7265746F6F66;
}

uint64_t sub_23BEAAE84()
{
  return 0x736D657469;
}

uint64_t sub_23BEAAE98()
{
  return 0x7363697274656DLL;
}

BOOL sub_23BEAAEB0(char *a1, char *a2)
{
  return sub_23BEAAB9C(*a1, *a2);
}

uint64_t sub_23BEAAF08()
{
  return sub_23BEAADE0();
}

uint64_t sub_23BEAAF60()
{
  return sub_23BEAABAC();
}

uint64_t sub_23BEAAFAC()
{
  sub_23BFF99D0();
  sub_23BEAABAC();
  return sub_23BFF9A00();
}

uint64_t sub_23BEAB018()
{
  unsigned __int8 *v0;

  return sub_23BEAAE24(*v0);
}

uint64_t sub_23BEAB070@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BEAABD0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BEAB0CC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23BEAC9E0();
  *a1 = result;
  return result;
}

uint64_t sub_23BEAB124(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23BFFA898, a1);
  return sub_23BFF9A30();
}

uint64_t sub_23BEAB158(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23BFFA898, a1);
  return sub_23BFF9A3C();
}

uint64_t LazyCanvasSectionViewDescriptor.id.getter()
{
  uint64_t v0;

  v0 = sub_23BEAC9E8();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_23BEAB1C0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;

  *a1 = sub_23BEAC9E8();
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

void LazyCanvasSectionViewDescriptor.encode(to:)()
{
  type metadata accessor for LazyCanvasSectionViewDescriptor.CodingKeys();
}

uint64_t sub_23BEAB300(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  MEMORY[0x242615198](&unk_23BFFA898, a1);
  v3 = sub_23BFF994C();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v11 - v5;
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  sub_23BFF9A18();
  *(_BYTE *)(v2 - 232) = 0;
  v7 = *(_QWORD *)(v2 - 256);
  sub_23BFF9910();
  if (!v7)
  {
    *(_BYTE *)(v2 - 72) = 1;
    v8 = *(_QWORD *)(v2 - 288);
    *(_QWORD *)(v2 - 232) = *(_QWORD *)(v2 - 272);
    *(_QWORD *)(v2 - 224) = v8;
    v9 = *(_QWORD *)(v2 - 304);
    *(_QWORD *)(v2 - 216) = *(_QWORD *)(v2 - 280);
    *(_QWORD *)(v2 - 208) = v9;
    type metadata accessor for CanvasSectionHeader();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void LazyCanvasSectionViewDescriptor.init(from:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v43 = a6;
  v42 = a5;
  v41 = a4;
  v35 = a3;
  v40 = a1;
  v25 = a9;
  v44 = a20;
  v39 = a17;
  v38 = a16;
  v37 = a15;
  v36 = a14;
  v34 = a13;
  v33 = a12;
  v32 = a10;
  v30 = a18;
  v29 = a7;
  v24 = sub_23BFF96A0();
  v23 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)&v23 - v22;
  v45 = a2;
  v46 = a8;
  v31 = a2;
  v27 = a8;
  v47 = a11;
  v48 = a19;
  v28 = a19;
  type metadata accessor for CanvasSectionHeader();
}

void sub_23BEAB744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  *(_QWORD *)(v17 - 432) = a1;
  v18 = sub_23BFF96A0();
  *(_QWORD *)(v17 - 416) = v18;
  *(_QWORD *)(v17 - 424) = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  *(_QWORD *)(v17 - 440) = (char *)&a9 - v19;
  *(_QWORD *)(v17 - 232) = v9;
  *(_QWORD *)(v17 - 224) = v14;
  v20 = *(_QWORD *)(v17 - 264);
  *(_QWORD *)(v17 - 216) = *(_QWORD *)(v17 - 272);
  *(_QWORD *)(v17 - 208) = v20;
  *(_QWORD *)(v17 - 200) = *(_QWORD *)(v17 - 256);
  *(_QWORD *)(v17 - 192) = v10;
  *(_QWORD *)(v17 - 184) = v12;
  *(_QWORD *)(v17 - 176) = v13;
  v21 = *(_QWORD *)(v17 - 336);
  *(_QWORD *)(v17 - 168) = v16;
  *(_QWORD *)(v17 - 160) = v21;
  v22 = *(_QWORD *)(v17 - 312);
  *(_QWORD *)(v17 - 152) = v11;
  *(_QWORD *)(v17 - 144) = v22;
  v23 = *(_QWORD *)(v17 - 296);
  *(_QWORD *)(v17 - 136) = *(_QWORD *)(v17 - 304);
  *(_QWORD *)(v17 - 128) = v23;
  v24 = *(_QWORD *)(v17 - 360);
  *(_QWORD *)(v17 - 120) = *(_QWORD *)(v17 - 288);
  *(_QWORD *)(v17 - 112) = v24;
  v25 = *(_QWORD *)(v17 - 248);
  *(_QWORD *)(v17 - 104) = v15;
  *(_QWORD *)(v17 - 96) = v25;
  type metadata accessor for LazyCanvasSectionViewDescriptor.CodingKeys();
}

void sub_23BEAB810(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v8 - 384) = MEMORY[0x242615198](&unk_23BFFA898, a1);
  v9 = sub_23BFF98E0();
  *(_QWORD *)(v8 - 408) = v9;
  *(_QWORD *)(v8 - 448) = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v10 = *(_QWORD *)(v8 - 320);
  *(_QWORD *)(v8 - 232) = *(_QWORD *)(v8 - 352);
  *(_QWORD *)(v8 - 224) = v10;
  v11 = *(_QWORD *)(v8 - 264);
  *(_QWORD *)(v8 - 216) = *(_QWORD *)(v8 - 272);
  *(_QWORD *)(v8 - 208) = v11;
  v12 = *(_QWORD *)(v8 - 368);
  *(_QWORD *)(v8 - 200) = *(_QWORD *)(v8 - 256);
  *(_QWORD *)(v8 - 192) = v12;
  v13 = *(_QWORD *)(v8 - 344);
  *(_QWORD *)(v8 - 184) = *(_QWORD *)(v8 - 400);
  *(_QWORD *)(v8 - 176) = v13;
  *(_QWORD *)(v8 - 400) = v7;
  *(_QWORD *)(v8 - 168) = v7;
  *(_QWORD *)(v8 - 160) = v4;
  *(_QWORD *)(v8 - 152) = *(_QWORD *)(v8 - 328);
  *(_QWORD *)(v8 - 144) = v5;
  *(_QWORD *)(v8 - 136) = v6;
  *(_QWORD *)(v8 - 128) = v3;
  *(_QWORD *)(v8 - 120) = v2;
  *(_QWORD *)(v8 - 112) = v1;
  v14 = *(_QWORD *)(v8 - 248);
  *(_QWORD *)(v8 - 104) = *(_QWORD *)(v8 - 392);
  *(_QWORD *)(v8 - 96) = v14;
  type metadata accessor for LazyCanvasSectionViewDescriptor();
}

uint64_t sub_23BEAB8FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (uint64_t *)((char *)&v22 - v5);
  v7 = *(_QWORD **)(v2 - 280);
  __swift_project_boxed_opaque_existential_1(v7, v7[3]);
  *(_QWORD *)(v2 - 392) = v1;
  v8 = *(_QWORD *)(v2 - 376);
  sub_23BFF9A0C();
  if (!v8)
  {
    v9 = *(_QWORD *)(v2 - 432);
    v10 = *(_QWORD *)(v2 - 440);
    *(_QWORD *)(v2 - 376) = v4;
    v11 = *(_QWORD *)(v2 - 424);
    v12 = *(_QWORD *)(v2 - 416);
    *(_BYTE *)(v2 - 232) = 0;
    *v6 = sub_23BFF9898();
    v6[1] = v14;
    *(_BYTE *)(v2 - 232) = 1;
    MEMORY[0x242615198](&protocol conformance descriptor for CanvasSectionHeader<A, B>, v9);
    sub_23BFF988C();
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))((char *)v6 + *(int *)(a1 + 164), v10, v12);
    *(_BYTE *)(v2 - 72) = 2;
    sub_23BEACA40();
    *(_QWORD *)(v2 - 384) = 0;
    sub_23BFF98C8();
    *((_BYTE *)v6 + *(int *)(a1 + 168)) = *(_BYTE *)(v2 - 232);
    v15 = *(_QWORD *)(v2 - 320);
    *(_QWORD *)(v2 - 232) = *(_QWORD *)(v2 - 352);
    *(_QWORD *)(v2 - 224) = v15;
    v16 = *(_QWORD *)(v2 - 264);
    *(_QWORD *)(v2 - 216) = *(_QWORD *)(v2 - 272);
    *(_QWORD *)(v2 - 208) = v16;
    v17 = *(_QWORD *)(v2 - 344);
    *(_QWORD *)(v2 - 200) = *(_QWORD *)(v2 - 256);
    *(_QWORD *)(v2 - 192) = v17;
    v18 = *(_QWORD *)(v2 - 336);
    *(_QWORD *)(v2 - 184) = *(_QWORD *)(v2 - 400);
    *(_QWORD *)(v2 - 176) = v18;
    v19 = *(_QWORD *)(v2 - 312);
    *(_QWORD *)(v2 - 168) = *(_QWORD *)(v2 - 328);
    *(_QWORD *)(v2 - 160) = v19;
    v20 = *(_QWORD *)(v2 - 296);
    *(_QWORD *)(v2 - 152) = *(_QWORD *)(v2 - 304);
    *(_QWORD *)(v2 - 144) = v20;
    v21 = *(_QWORD *)(v2 - 248);
    *(_QWORD *)(v2 - 136) = *(_QWORD *)(v2 - 288);
    *(_QWORD *)(v2 - 128) = v21;
    type metadata accessor for LazyCanvasItemDescriptor();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
}

void sub_23BEABDD8(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  LazyCanvasSectionViewDescriptor.init(from:)(a1, a2[2], a2[3], a2[4], a2[5], a2[6], a2[7], a2[8], a3, a2[9], a2[10], a2[11], a2[12], a2[13], a2[14], a2[15], a2[16], a2[17], a2[18],
    a2[19]);
}

void sub_23BEABE30()
{
  LazyCanvasSectionViewDescriptor.encode(to:)();
}

void LazyCanvasSectionViewDescriptor.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_23BFF93F4();
  swift_bridgeObjectRelease();
  type metadata accessor for CanvasSectionHeader();
}

void sub_23BEABEC0(uint64_t a1)
{
  sub_23BFF96A0();
  MEMORY[0x242615198](&protocol conformance descriptor for CanvasSectionHeader<A, B>, a1);
  sub_23BFF96AC();
  sub_23BFF99DC();
  swift_bridgeObjectRetain();
  type metadata accessor for LazyCanvasItemDescriptor();
}

uint64_t sub_23BEABF5C(uint64_t a1)
{
  MEMORY[0x242615198](&protocol conformance descriptor for LazyCanvasItemDescriptor<A, B, C, D, E, F>, a1);
  sub_23BFF94CC();
  swift_bridgeObjectRelease();
  sub_23BFF96A0();
  return sub_23BFF96AC();
}

void static LazyCanvasSectionViewDescriptor.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[20];
  uint64_t TupleTypeMetadata2;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v33 = a7;
  v32 = a6;
  v31 = a5;
  v30 = a4;
  v28[17] = *(_QWORD *)(a8 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v28[13] = (char *)v28 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_23BFF96A0();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v28[15] = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v22 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v28[16] = *(_QWORD *)(v21 - 8);
  v23 = MEMORY[0x24BDAC7A8](v22);
  v28[14] = (char *)v28 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x24BDAC7A8](v23);
  v28[18] = (char *)v28 - v26;
  MEMORY[0x24BDAC7A8](v25);
  v28[19] = (char *)v28 - v27;
  v36 = a3;
  v38 = a3;
  v39 = a9;
  v34 = a9;
  v37 = a11;
  v40 = a11;
  v41 = a19;
  v35 = a19;
  type metadata accessor for CanvasSectionHeader();
}

uint64_t sub_23BEAC180(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t TupleTypeMetadata2;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[96];

  *(v6 - 31) = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  *(v6 - 45) = &v29[-v7];
  v8 = sub_23BFF96A0();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *(v6 - 30) = TupleTypeMetadata2;
  *(v6 - 43) = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v10 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  *(v6 - 32) = *(_QWORD *)(v8 - 8);
  v11 = MEMORY[0x24BDAC7A8](v10);
  *(v6 - 44) = &v29[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = MEMORY[0x24BDAC7A8](v11);
  MEMORY[0x24BDAC7A8](v13);
  v14 = *v2;
  v15 = v2[1];
  *(v6 - 36) = v2;
  v16 = *v4;
  v17 = v4[1];
  *(v6 - 35) = v4;
  if (v14 == v16 && v15 == v17 || (v18 = sub_23BFF9964(), result = 0, (v18 & 1) != 0))
  {
    *(v6 - 64) = v5;
    *(v6 - 63) = v3;
    v20 = v6[13];
    v21 = v6[10];
    v22 = v6[11];
    v24 = v6[8];
    v23 = v6[9];
    v26 = v6[6];
    v25 = v6[7];
    v27 = v6[5];
    v28 = v6[3];
    *(v6 - 29) = *(v6 - 34);
    *(v6 - 28) = *(v6 - 42);
    *(v6 - 27) = *(v6 - 41);
    *(v6 - 26) = *(v6 - 40);
    *(v6 - 25) = *(v6 - 39);
    *(v6 - 24) = v1;
    *(v6 - 62) = v1;
    *(v6 - 23) = *(v6 - 38);
    *(v6 - 22) = v28;
    *(v6 - 61) = v28;
    *(v6 - 21) = *(v6 - 33);
    *(v6 - 20) = v27;
    *(v6 - 60) = v27;
    *(v6 - 59) = v26;
    *(v6 - 19) = v26;
    *(v6 - 18) = v25;
    *(v6 - 58) = v25;
    *(v6 - 57) = v24;
    *(v6 - 17) = v24;
    *(v6 - 16) = v23;
    *(v6 - 56) = v23;
    *(v6 - 55) = v21;
    *(v6 - 15) = v21;
    *(v6 - 14) = v22;
    *(v6 - 65) = v22;
    *(v6 - 13) = *(v6 - 37);
    *(v6 - 12) = v20;
    *(v6 - 54) = v20;
    type metadata accessor for LazyCanvasSectionViewDescriptor();
  }
  return result;
}

void LazyCanvasSectionViewDescriptor.hashValue.getter()
{
  sub_23BFF99D0();
  LazyCanvasSectionViewDescriptor.hash(into:)();
}

uint64_t sub_23BEAC904()
{
  return sub_23BFF9A00();
}

void sub_23BEAC924()
{
  sub_23BFF99D0();
  LazyCanvasSectionViewDescriptor.hash(into:)();
}

uint64_t sub_23BEAC94C()
{
  return sub_23BFF9A00();
}

void sub_23BEAC964(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  static LazyCanvasSectionViewDescriptor.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6], a3[7], a3[8], a3[9], a3[10], a3[11], a3[12], a3[13], a3[14], a3[15], a3[16], a3[17], a3[18]);
}

uint64_t sub_23BEAC9A4(char a1)
{
  return a1 & 1;
}

uint64_t sub_23BEAC9B4(uint64_t a1)
{
  sub_23BEAC9C8(a1);
  return swift_bridgeObjectRetain();
}

uint64_t sub_23BEAC9C8(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 172));
}

void type metadata accessor for LazyCanvasSectionViewDescriptor()
{
  JUMPOUT(0x2426150F0);
}

uint64_t sub_23BEAC9E0()
{
  return 5;
}

uint64_t sub_23BEAC9E8()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

void type metadata accessor for LazyCanvasSectionViewDescriptor.CodingKeys()
{
  JUMPOUT(0x2426150F0);
}

unint64_t sub_23BEAC9FC()
{
  unint64_t result;

  result = qword_256AE37F8;
  if (!qword_256AE37F8)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for CanvasSectionFooter, &type metadata for CanvasSectionFooter);
    atomic_store(result, (unint64_t *)&qword_256AE37F8);
  }
  return result;
}

unint64_t sub_23BEACA40()
{
  unint64_t result;

  result = qword_256AE3800[0];
  if (!qword_256AE3800[0])
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for CanvasSectionFooter, &type metadata for CanvasSectionFooter);
    atomic_store(result, qword_256AE3800);
  }
  return result;
}

uint64_t sub_23BEACA84()
{
  return MEMORY[0x24BEE0D10];
}

void sub_23BEACA90()
{
  JUMPOUT(0x242615198);
}

uint64_t sub_23BEACAA0()
{
  return swift_allocateGenericValueMetadata();
}

void sub_23BEACAA8()
{
  type metadata accessor for CanvasSectionHeader();
}

uint64_t sub_23BEACAEC()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_23BFF96A0();
  if (v1 <= 0x3F)
  {
    result = sub_23BFF96A0();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_23BEACB7C(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  size_t v23;
  size_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  size_t v31;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  _BYTE *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  unint64_t v44;
  unsigned int v45;
  void *v46;
  const void *v47;
  void *v48;
  const void *v49;
  uint64_t v50;
  size_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  void *v55;
  const void *v56;
  unsigned int (*v57)(const void *, uint64_t, uint64_t);
  size_t v59;
  size_t v60;
  uint64_t v61;
  size_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  size_t v67;
  unint64_t v68;
  size_t v69;
  uint64_t v70;
  uint64_t *v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;

  v6 = sub_23BFF82CC();
  v7 = *(_QWORD *)(v6 - 8);
  v9 = a3[7];
  v8 = a3[8];
  v10 = *(_QWORD *)(v8 - 8);
  v11 = *(unsigned int *)(v10 + 84);
  v12 = *(_DWORD *)(v10 + 80);
  v13 = *(unsigned int *)(v7 + 84);
  v14 = a3[2];
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned int *)(v15 + 84);
  v17 = *(_DWORD *)(v15 + 80);
  v18 = (*(_BYTE *)(v10 + 80) | *(_BYTE *)(v7 + 80) | *(_BYTE *)(v15 + 80));
  if ((_DWORD)v11)
    v19 = v11 - 1;
  else
    v19 = 0;
  if (v19 <= v13)
    v20 = *(_DWORD *)(v7 + 84);
  else
    v20 = v19;
  v21 = v16 - 1;
  if (!(_DWORD)v16)
    v21 = 0;
  if (v21 <= v20)
    v22 = v20;
  else
    v22 = v21;
  if ((_DWORD)v11)
    v23 = *(_QWORD *)(v10 + 64);
  else
    v23 = *(_QWORD *)(v10 + 64) + 1;
  v73 = *(_QWORD *)(v7 + 64) + v12;
  v24 = (v23 + v17 + (v73 & ~v12)) & ~v17;
  if ((_DWORD)v16)
    v25 = *(_QWORD *)(v15 + 64);
  else
    v25 = *(_QWORD *)(v15 + 64) + 1;
  if (v22)
    v26 = v24 + v25;
  else
    v26 = v24 + v25 + 1;
  v27 = v9;
  v28 = *(_QWORD *)(v9 - 8);
  v29 = *(_DWORD *)(v28 + 80);
  v30 = *(_DWORD *)(v28 + 84);
  v74 = v28;
  v31 = *(_QWORD *)(v28 + 64);
  if (!v30)
    ++v31;
  if ((v29 | v18) > 7
    || ((v29 | *(_DWORD *)(v10 + 80) | *(_DWORD *)(v7 + 80) | *(_DWORD *)(v15 + 80)) & 0x100000) != 0
    || ((v29 + 16 + ((v26 + ((v18 + 16) & ~v18)) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)v29)
     + v31 > 0x18)
  {
    v34 = *a2;
    *a1 = *a2;
    v35 = v34 + (((v29 | v18) & 0xF8 ^ 0x1F8) & ((v29 | v18) + 16));
    swift_retain();
    return (uint64_t *)v35;
  }
  v59 = v25;
  v62 = v23 + v17;
  v63 = v14;
  v66 = v6;
  v67 = v24 + v25;
  v69 = v26;
  v70 = v29 + 16;
  v64 = v8;
  v65 = ~v12;
  v60 = v31;
  v61 = ~v17;
  v68 = ~(unint64_t)v29;
  v36 = a2[1];
  *a1 = *a2;
  a1[1] = v36;
  v71 = a1;
  v37 = (_BYTE *)(((unint64_t)a1 + v18 + 16) & ~v18);
  v38 = (_BYTE *)(((unint64_t)a2 + v18 + 16) & ~v18);
  v72 = v22;
  swift_bridgeObjectRetain();
  if (v72)
  {
    if ((_DWORD)v13 == v72)
    {
      v39 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v7 + 48))(v38, v13, v66);
      v40 = v27;
      v41 = v74;
      if (!v39)
        goto LABEL_48;
    }
    else
    {
      v44 = (unint64_t)&v38[v73] & v65;
      v40 = v27;
      if (v19 == v72)
        v45 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v10 + 48))(v44, v11, v64);
      else
        v45 = (*(uint64_t (**)(size_t, uint64_t, uint64_t))(v15 + 48))((v62 + v44) & v61, v16, v63);
      v41 = v74;
      if (v45 < 2)
      {
LABEL_48:
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 16))(v37, v38, v66);
        v46 = (void *)((unint64_t)&v37[v73] & v65);
        v47 = (const void *)((unint64_t)&v38[v73] & v65);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v47, 1, v64))
        {
          memcpy(v46, v47, v23);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v46, v47, v64);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v46, 0, 1, v64);
        }
        v48 = (void *)(((unint64_t)v46 + v62) & v61);
        v49 = (const void *)(((unint64_t)v47 + v62) & v61);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v49, 1, v63))
        {
          memcpy(v48, v49, v59);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v48, v49, v63);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v48, 0, 1, v63);
        }
        v51 = v69;
        v50 = v70;
        v52 = v68;
        if (!v72)
          v37[v67] = 0;
        goto LABEL_58;
      }
    }
  }
  else
  {
    v40 = v27;
    v41 = v74;
    if (!v38[v67])
      goto LABEL_48;
    v42 = (v38[v67] - 1) << (8 * v67);
    if (v67 > 3)
      v42 = 0;
    if ((_DWORD)v67)
    {
      if (v67 <= 3)
        v43 = v67;
      else
        v43 = 4;
      __asm { BR              X11 }
    }
    if (v42 == -1)
      goto LABEL_48;
  }
  v51 = v69;
  memcpy(v37, v38, v69);
  v50 = v70;
  v52 = v68;
LABEL_58:
  v37[v51] = v38[v51];
  v53 = (unint64_t)&v37[v51] & 0xFFFFFFFFFFFFFFF8;
  v54 = (unint64_t)&v38[v51] & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v53 + 8) = *(_QWORD *)(v54 + 8);
  v55 = (void *)((v50 + v53) & v52);
  v56 = (const void *)((v50 + v54) & v52);
  v57 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v41 + 48);
  swift_bridgeObjectRetain();
  if (v57(v56, 1, v40))
  {
    memcpy(v55, v56, v60);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v41 + 16))(v55, v56, v40);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v55, 0, 1, v40);
  }
  return v71;
}

uint64_t sub_23BEAD00C(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t result;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  swift_bridgeObjectRelease();
  v4 = sub_23BFF82CC();
  v5 = *(_QWORD *)(v4 - 8);
  v42 = a2[8];
  v6 = *(_QWORD *)(v42 - 8);
  v7 = *(unsigned int *)(v5 + 84);
  v8 = *(_DWORD *)(v6 + 84);
  v43 = a2[2];
  v9 = *(_QWORD *)(v43 - 8);
  v10 = *(unsigned int *)(v9 + 84);
  v11 = (*(_DWORD *)(v6 + 80) | *(_DWORD *)(v5 + 80) | *(_DWORD *)(v9 + 80));
  v12 = *(_DWORD *)(v6 + 80);
  v13 = *(_DWORD *)(v9 + 80);
  v14 = (a1 + v11 + 16) & ~v11;
  v15 = v8 - 1;
  if (!v8)
    v15 = 0;
  if (v15 <= v7)
    v16 = *(_DWORD *)(v5 + 84);
  else
    v16 = v15;
  v17 = v10 - 1;
  if (!(_DWORD)v10)
    v17 = 0;
  if (v17 <= v16)
    v18 = v16;
  else
    v18 = v17;
  v19 = *(_QWORD *)(v6 + 64);
  if (!v8)
    ++v19;
  v20 = ~v12;
  v21 = *(_QWORD *)(v5 + 64) + v12;
  v22 = v21 & ~v12;
  v23 = ~v13;
  v24 = v19 + v13;
  v25 = (v19 + v13 + v22) & ~v13;
  v26 = *(_QWORD *)(v9 + 64);
  if (!(_DWORD)v10)
    ++v26;
  v27 = v26 + v25;
  v40 = v20;
  v41 = v23;
  if (v18)
  {
    if ((_DWORD)v7 == v18)
    {
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v14, v7, v4))
        goto LABEL_37;
    }
    else
    {
      v30 = (v21 + v14) & v20;
      if (v15 == v18)
        v31 = (*(uint64_t (**)(uint64_t))(v6 + 48))(v30);
      else
        v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))((v24 + v30) & v23, v10, v43);
      if (v31 >= 2)
        goto LABEL_37;
    }
    goto LABEL_33;
  }
  if (!*(_BYTE *)(v14 + v27))
    goto LABEL_33;
  v28 = (*(unsigned __int8 *)(v14 + v27) - 1) << (8 * v27);
  if (v27 > 3)
    v28 = 0;
  if ((_DWORD)v27)
  {
    if (v27 <= 3)
      v29 = v26 + v25;
    else
      v29 = 4;
    __asm { BR              X11 }
  }
  if (v28 == -1)
  {
LABEL_33:
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v14, v4);
    v32 = (v21 + v14) & v40;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v32, 1, v42))
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v32, v42);
    v33 = (v24 + v32) & v41;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v33, 1, v43))
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v33, v43);
  }
LABEL_37:
  if (v18)
    v34 = v14;
  else
    v34 = v14 + 1;
  v35 = (v34 + v27) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  v36 = a2[7];
  v37 = *(_QWORD *)(v36 - 8);
  v38 = (v35 + *(unsigned __int8 *)(v37 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v37 + 48))(v38, 1, v36);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v37 + 8))(v38, v36);
  return result;
}

_QWORD *sub_23BEAD2EC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  size_t v24;
  unsigned int v25;
  char *v26;
  uint64_t v27;
  int v28;
  int v29;
  unint64_t v30;
  unsigned int v31;
  void *v32;
  const void *v33;
  void *v34;
  const void *v35;
  uint64_t v36;
  size_t v37;
  size_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  const void *v45;
  unsigned int (*v46)(const void *, uint64_t, uint64_t);
  size_t v47;
  size_t __n;
  size_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v57 = sub_23BFF82CC();
  v58 = a3;
  v7 = *(_QWORD *)(v57 - 8);
  v59 = *(_QWORD *)(a3 + 64);
  v8 = *(_QWORD *)(v59 - 8);
  v9 = *(unsigned int *)(v8 + 84);
  v10 = *(_DWORD *)(v8 + 80);
  v11 = *(unsigned int *)(v7 + 84);
  v54 = *(_QWORD *)(a3 + 16);
  v12 = *(_QWORD *)(v54 - 8);
  v13 = *(unsigned int *)(v12 + 84);
  v14 = *(_DWORD *)(v12 + 80);
  v15 = (*(_DWORD *)(v8 + 80) | *(_DWORD *)(v7 + 80) | *(_DWORD *)(v12 + 80));
  v60 = a1;
  v16 = ((unint64_t)a1 + v15 + 16) & ~v15;
  v17 = (_BYTE *)(((unint64_t)a2 + v15 + 16) & ~v15);
  if ((_DWORD)v9)
    v18 = v9 - 1;
  else
    v18 = 0;
  if (v18 <= v11)
    v19 = *(_DWORD *)(v7 + 84);
  else
    v19 = v18;
  v20 = v13 - 1;
  if (!(_DWORD)v13)
    v20 = 0;
  if (v20 <= v19)
    v20 = v19;
  if ((_DWORD)v9)
    v21 = *(_QWORD *)(v8 + 64);
  else
    v21 = *(_QWORD *)(v8 + 64) + 1;
  v55 = *(_QWORD *)(v7 + 64) + v10;
  v56 = ~v10;
  v52 = ~v14;
  v53 = *(_QWORD *)(v54 - 8);
  v51 = v21 + v14;
  v22 = (v21 + v14 + (v55 & ~v10)) & ~v14;
  v23 = *(_QWORD *)(v12 + 64);
  if (!(_DWORD)v13)
    ++v23;
  __n = v21;
  v50 = v23;
  v24 = v22 + v23;
  v25 = v20;
  swift_bridgeObjectRetain();
  if (!v25)
  {
    v26 = (char *)v16;
    v27 = v59;
    if (!v17[v24])
      goto LABEL_32;
    v28 = (v17[v24] - 1) << (8 * v24);
    if (v24 > 3)
      v28 = 0;
    if ((_DWORD)v24)
    {
      if (v24 <= 3)
        v29 = v24;
      else
        v29 = 4;
      __asm { BR              X11 }
    }
    if (v28 == -1)
      goto LABEL_32;
    goto LABEL_41;
  }
  if ((_DWORD)v11 == v25)
  {
    v26 = (char *)v16;
    v27 = v59;
    if (!(*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v7 + 48))(v17, v11, v57))
      goto LABEL_32;
LABEL_41:
    if (v25)
      v37 = v24;
    else
      v37 = v24 + 1;
    memcpy(v26, v17, v37);
    v36 = v58;
    goto LABEL_45;
  }
  v30 = (unint64_t)&v17[v55] & v56;
  if (v18 == v25)
  {
    v27 = v59;
    v26 = (char *)v16;
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(v30, v9, v59) >= 2)
      goto LABEL_41;
  }
  else
  {
    v31 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v53 + 48))((v51 + v30) & v52, v13, v54);
    v26 = (char *)v16;
    v27 = v59;
    if (v31 >= 2)
      goto LABEL_41;
  }
LABEL_32:
  (*(void (**)(char *, _BYTE *, uint64_t))(v7 + 16))(v26, v17, v57);
  v32 = (void *)((unint64_t)&v26[v55] & v56);
  v33 = (const void *)((unint64_t)&v17[v55] & v56);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v33, 1, v27))
  {
    memcpy(v32, v33, __n);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(v32, v33, v27);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v32, 0, 1, v27);
  }
  v34 = (void *)(((unint64_t)v32 + v51) & v52);
  v35 = (const void *)(((unint64_t)v33 + v51) & v52);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v53 + 48))(v35, 1, v54))
  {
    memcpy(v34, v35, v50);
    v36 = v58;
    if (v25)
      goto LABEL_45;
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v53 + 16))(v34, v35, v54);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v34, 0, 1, v54);
    v36 = v58;
    if (v25)
      goto LABEL_45;
  }
  v26[v24] = 0;
LABEL_45:
  if (v25)
    v38 = v24;
  else
    v38 = v24 + 1;
  v39 = (unint64_t)&v26[v38];
  v40 = (unint64_t)&v17[v38];
  *(_BYTE *)v39 = *(_BYTE *)v40;
  v39 &= 0xFFFFFFFFFFFFFFF8;
  v40 &= 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v39 + 8) = *(_QWORD *)(v40 + 8);
  v41 = *(_QWORD *)(v36 + 56);
  v42 = *(_QWORD *)(v41 - 8);
  v43 = *(unsigned __int8 *)(v42 + 80);
  v44 = (void *)((v43 + 16 + v39) & ~v43);
  v45 = (const void *)((v43 + 16 + v40) & ~v43);
  v46 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v42 + 48);
  swift_bridgeObjectRetain();
  if (v46(v45, 1, v41))
  {
    if (*(_DWORD *)(v42 + 84))
      v47 = *(_QWORD *)(v42 + 64);
    else
      v47 = *(_QWORD *)(v42 + 64) + 1;
    memcpy(v44, v45, v47);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v42 + 16))(v44, v45, v41);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v44, 0, 1, v41);
  }
  return v60;
}

_QWORD *sub_23BEAD718(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t);
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  char *v35;
  int v36;
  char *v37;
  _QWORD *v38;
  size_t v39;
  int v40;
  char v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  int v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  void *v55;
  void *v56;
  uint64_t (*v57)(void *, uint64_t, uint64_t);
  int v58;
  int v59;
  void *v60;
  void *v61;
  uint64_t (*v62)(void *, uint64_t, uint64_t);
  int v63;
  int v64;
  uint64_t v65;
  unsigned int v66;
  size_t v67;
  void *v68;
  const void *v69;
  void *v70;
  const void *v71;
  size_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  void *v81;
  uint64_t (*v82)(void *, uint64_t, uint64_t);
  int v83;
  size_t v84;
  size_t v86;
  size_t __n;
  size_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = sub_23BFF82CC();
  v7 = *(_QWORD *)(v6 - 8);
  v95 = *(_QWORD *)(a3 + 64);
  v8 = *(_QWORD *)(v95 - 8);
  v9 = *(unsigned int *)(v8 + 84);
  v10 = *(_DWORD *)(v8 + 80);
  v11 = *(unsigned int *)(v7 + 84);
  v93 = a3;
  v94 = *(_QWORD *)(a3 + 16);
  v12 = *(_QWORD *)(v94 - 8);
  v13 = *(unsigned int *)(v12 + 84);
  v14 = *(_DWORD *)(v12 + 80);
  v15 = (*(_DWORD *)(v8 + 80) | *(_DWORD *)(v7 + 80) | *(_DWORD *)(v12 + 80));
  v92 = a1;
  v16 = ((unint64_t)a1 + v15 + 16) & ~v15;
  v97 = ((unint64_t)a2 + v15 + 16) & ~v15;
  if ((_DWORD)v9)
    v17 = v9 - 1;
  else
    v17 = 0;
  if (v17 <= v11)
    v18 = *(_DWORD *)(v7 + 84);
  else
    v18 = v17;
  v19 = v13 - 1;
  if (!(_DWORD)v13)
    v19 = 0;
  if (v19 <= v18)
    v20 = v18;
  else
    v20 = v19;
  if ((_DWORD)v9)
    v21 = *(_QWORD *)(v8 + 64);
  else
    v21 = *(_QWORD *)(v8 + 64) + 1;
  v22 = ~v10;
  v23 = *(_QWORD *)(v7 + 64) + v10;
  v24 = v21 + v14;
  v25 = (v21 + v14 + (v23 & ~v10)) & ~v14;
  if ((_DWORD)v13)
    v26 = *(_QWORD *)(v12 + 64);
  else
    v26 = *(_QWORD *)(v12 + 64) + 1;
  v27 = v25 + v26;
  v96 = v20;
  __n = v21;
  v88 = v26;
  v90 = v21 + v14;
  v91 = ~v14;
  v89 = *(_QWORD *)(v7 + 64) + v10;
  if (!v20)
  {
    v40 = *(unsigned __int8 *)(v16 + v27);
    v41 = 8 * v27;
    v38 = v92;
    v37 = (char *)v16;
    v35 = (char *)v97;
    v39 = v27;
    if (v40)
    {
      v42 = (v40 - 1) << v41;
      if (v27 > 3)
        v42 = 0;
      if ((_DWORD)v27)
      {
        if (v27 > 3)
          LODWORD(v27) = 4;
        __asm { BR              X12 }
      }
      if (v42 != -1)
      {
        if (!*(_BYTE *)(v97 + v27) || (*(unsigned __int8 *)(v97 + v27) - 1) << v41 == -1)
          goto LABEL_82;
        goto LABEL_78;
      }
    }
    if (!*(_BYTE *)(v97 + v27))
      goto LABEL_62;
    v51 = (*(unsigned __int8 *)(v97 + v27) - 1) << v41;
    if (v27 > 3)
      v51 = 0;
    if ((_DWORD)v27)
    {
      if (v27 <= 3)
        v52 = v27;
      else
        v52 = 4;
      __asm { BR              X11 }
    }
    v36 = v51 + 1;
    goto LABEL_57;
  }
  v86 = v25 + v26;
  if ((_DWORD)v11 == v20)
  {
    v28 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 48);
    v29 = (char *)v16;
    v30 = *(_QWORD *)(v95 - 8);
    v31 = ~v10;
    v32 = *(_QWORD *)(v94 - 8);
    v33 = v6;
    v34 = v28(v16, v11);
    v35 = (char *)v97;
    v36 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v28)(v97, v11, v33);
    v6 = v33;
    v12 = v32;
    v22 = v31;
    v8 = v30;
    v37 = v29;
    v38 = v92;
    v39 = v86;
    if (v34)
    {
      if (!v36)
        goto LABEL_82;
LABEL_78:
      if (v96)
        v67 = v39;
      else
        v67 = v39 + 1;
      memcpy(v37, v35, v67);
      v66 = v96;
      v65 = v93;
      goto LABEL_90;
    }
LABEL_57:
    if (v36)
    {
LABEL_58:
      (*(void (**)(char *, uint64_t))(v7 + 8))(v37, v6);
      v53 = (unint64_t)&v37[v89] & v22;
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(v53, 1, v95))
        (*(void (**)(unint64_t, uint64_t))(v8 + 8))(v53, v95);
      v54 = (v90 + v53) & v91;
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v12 + 48))(v54, 1, v94))
        (*(void (**)(unint64_t, uint64_t))(v12 + 8))(v54, v94);
      goto LABEL_78;
    }
LABEL_62:
    (*(void (**)(char *, char *, uint64_t))(v7 + 24))(v37, v35, v6);
    v55 = (void *)((unint64_t)&v37[v89] & v22);
    v56 = (void *)((unint64_t)&v35[v89] & v22);
    v57 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
    v58 = v57(v55, 1, v95);
    v59 = v57(v56, 1, v95);
    if (v58)
    {
      if (!v59)
      {
        (*(void (**)(void *, void *, uint64_t))(v8 + 16))(v55, v56, v95);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v55, 0, 1, v95);
        goto LABEL_68;
      }
    }
    else
    {
      if (!v59)
      {
        (*(void (**)(void *, void *, uint64_t))(v8 + 24))(v55, v56, v95);
LABEL_68:
        v60 = (void *)(((unint64_t)v55 + v90) & v91);
        v61 = (void *)(((unint64_t)v56 + v90) & v91);
        v62 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
        v63 = v62(v60, 1, v94);
        v64 = v62(v61, 1, v94);
        if (v63)
        {
          if (!v64)
          {
            (*(void (**)(void *, void *, uint64_t))(v12 + 16))(v60, v61, v94);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v60, 0, 1, v94);
LABEL_74:
            v65 = v93;
            v35 = (char *)v97;
            v66 = v96;
            goto LABEL_90;
          }
        }
        else
        {
          if (!v64)
          {
            (*(void (**)(void *, void *, uint64_t))(v12 + 24))(v60, v61, v94);
            goto LABEL_74;
          }
          (*(void (**)(void *, uint64_t))(v12 + 8))(v60, v94);
        }
        memcpy(v60, v61, v88);
        goto LABEL_74;
      }
      (*(void (**)(void *, uint64_t))(v8 + 8))(v55, v95);
    }
    memcpy(v55, v56, __n);
    goto LABEL_68;
  }
  v43 = *(_QWORD *)(v94 - 8);
  v44 = v6;
  v45 = (v23 + v16) & v22;
  if (v17 == v20)
    v46 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v45, v9, v95);
  else
    v46 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))((v24 + v45) & ~v14, v13, v94);
  if (v46 < 2)
  {
    v47 = (v23 + v97) & v22;
    if (v17 == v96)
      v48 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v47, v9, v95);
    else
      v48 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))((v90 + v47) & v91, v13, v94);
    v38 = v92;
    v37 = (char *)v16;
    v35 = (char *)v97;
    v39 = v86;
    v6 = v44;
    v12 = v43;
    if (v48 >= 2)
      goto LABEL_58;
    goto LABEL_62;
  }
  v49 = (v23 + v97) & v22;
  if (v17 == v96)
    v50 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v49, v9, v95);
  else
    v50 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))((v90 + v49) & v91, v13, v94);
  v38 = v92;
  v37 = (char *)v16;
  v35 = (char *)v97;
  v39 = v86;
  v6 = v44;
  v12 = v43;
  if (v50 >= 2)
    goto LABEL_78;
LABEL_82:
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v37, v35, v6);
  v68 = (void *)((unint64_t)&v37[v89] & v22);
  v69 = (const void *)((unint64_t)&v35[v89] & v22);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v69, 1, v95))
  {
    memcpy(v68, v69, __n);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(v68, v69, v95);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v68, 0, 1, v95);
  }
  v70 = (void *)(((unint64_t)v68 + v90) & v91);
  v71 = (const void *)(((unint64_t)v69 + v90) & v91);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v71, 1, v94))
  {
    memcpy(v70, v71, v88);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 16))(v70, v71, v94);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v70, 0, 1, v94);
  }
  v65 = v93;
  v66 = v96;
  if (!v96)
    v37[v39] = 0;
LABEL_90:
  if (v66)
    v72 = v39;
  else
    v72 = v39 + 1;
  v73 = (unint64_t)&v37[v72];
  v74 = (unint64_t)&v35[v72];
  *(_BYTE *)v73 = *(_BYTE *)v74;
  v75 = v73 & 0xFFFFFFFFFFFFFFF8;
  v76 = v74 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)((v73 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_QWORD *)((v74 & 0xFFFFFFFFFFFFFFF8) + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v77 = *(_QWORD *)(v65 + 56);
  v78 = *(_QWORD *)(v77 - 8);
  v79 = *(unsigned __int8 *)(v78 + 80);
  v80 = (void *)((v79 + 16 + v75) & ~v79);
  v81 = (void *)((v79 + 16 + v76) & ~v79);
  v82 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v78 + 48);
  LODWORD(v76) = v82(v80, 1, v77);
  v83 = v82(v81, 1, v77);
  if ((_DWORD)v76)
  {
    if (!v83)
    {
      (*(void (**)(void *, void *, uint64_t))(v78 + 16))(v80, v81, v77);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v78 + 56))(v80, 0, 1, v77);
      return v38;
    }
  }
  else
  {
    if (!v83)
    {
      (*(void (**)(void *, void *, uint64_t))(v78 + 24))(v80, v81, v77);
      return v38;
    }
    (*(void (**)(void *, uint64_t))(v78 + 8))(v80, v77);
  }
  if (*(_DWORD *)(v78 + 84))
    v84 = *(_QWORD *)(v78 + 64);
  else
    v84 = *(_QWORD *)(v78 + 64) + 1;
  memcpy(v80, v81, v84);
  return v38;
}

_OWORD *sub_23BEADF9C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  size_t v27;
  int v28;
  int v29;
  unint64_t v30;
  void *v31;
  const void *v32;
  void *v33;
  const void *v34;
  char *v35;
  uint64_t v36;
  size_t v37;
  size_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  const void *v45;
  size_t v46;
  size_t __n;
  size_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _OWORD *v54;
  char *__dst;

  *a1 = *a2;
  v6 = sub_23BFF82CC();
  v7 = *(_QWORD *)(v6 - 8);
  v51 = *(_QWORD *)(a3 + 64);
  v8 = *(_QWORD *)(v51 - 8);
  v9 = *(_DWORD *)(v8 + 84);
  v10 = *(_DWORD *)(v8 + 80);
  v11 = *(unsigned int *)(v7 + 84);
  v52 = *(_QWORD *)(a3 + 16);
  v53 = a3;
  v12 = *(_QWORD *)(v52 - 8);
  v13 = *(unsigned int *)(v12 + 84);
  v14 = *(_DWORD *)(v12 + 80);
  v15 = (*(_DWORD *)(v8 + 80) | *(_DWORD *)(v7 + 80) | *(_DWORD *)(v12 + 80));
  v54 = a1;
  __dst = (char *)(((unint64_t)a1 + v15 + 16) & ~v15);
  v16 = (_BYTE *)(((unint64_t)a2 + v15 + 16) & ~v15);
  v17 = v9 - 1;
  if (!v9)
    v17 = 0;
  if (v17 <= v11)
    v18 = *(_DWORD *)(v7 + 84);
  else
    v18 = v17;
  v19 = v13 - 1;
  if (!(_DWORD)v13)
    v19 = 0;
  if (v19 <= v18)
    v20 = v18;
  else
    v20 = v19;
  if (v9)
    v21 = *(_QWORD *)(v8 + 64);
  else
    v21 = *(_QWORD *)(v8 + 64) + 1;
  v22 = ~v10;
  v23 = *(_QWORD *)(v7 + 64) + v10;
  v24 = v21 + v14;
  v25 = (v21 + v14 + (v23 & ~v10)) & ~v14;
  v26 = *(_QWORD *)(v12 + 64);
  if (!(_DWORD)v13)
    ++v26;
  v27 = v25 + v26;
  v49 = v26;
  v50 = ~v14;
  __n = v21;
  if (!v20)
  {
    if (!v16[v27])
      goto LABEL_32;
    v28 = (v16[v27] - 1) << (8 * v27);
    if (v27 > 3)
      v28 = 0;
    if ((_DWORD)v27)
    {
      if (v27 <= 3)
        v29 = v25 + v26;
      else
        v29 = 4;
      __asm { BR              X11 }
    }
    if (v28 == -1)
      goto LABEL_32;
    goto LABEL_41;
  }
  if ((_DWORD)v11 != v20)
  {
    v30 = (unint64_t)&v16[v23] & v22;
    if (v17 == v20)
    {
      if ((*(unsigned int (**)(unint64_t))(v8 + 48))(v30) < 2)
        goto LABEL_32;
    }
    else if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v12 + 48))((v24 + v30) & ~v14, v13, v52) < 2)
    {
      goto LABEL_32;
    }
LABEL_41:
    if (v20)
      v37 = v27;
    else
      v37 = v27 + 1;
    v35 = __dst;
    memcpy(__dst, v16, v37);
    v36 = v53;
    goto LABEL_45;
  }
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v7 + 48))(v16, v11, v6))
    goto LABEL_41;
LABEL_32:
  (*(void (**)(char *, _BYTE *, uint64_t))(v7 + 32))(__dst, v16, v6);
  v31 = (void *)((unint64_t)&__dst[v23] & v22);
  v32 = (const void *)((unint64_t)&v16[v23] & v22);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v32, 1, v51))
  {
    memcpy(v31, v32, __n);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(v31, v32, v51);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v31, 0, 1, v51);
  }
  v33 = (void *)(((unint64_t)v31 + v24) & v50);
  v34 = (const void *)(((unint64_t)v32 + v24) & v50);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v34, 1, v52))
  {
    memcpy(v33, v34, v49);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v33, v34, v52);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v33, 0, 1, v52);
  }
  v35 = __dst;
  v36 = v53;
  if (!v20)
    __dst[v27] = 0;
LABEL_45:
  if (v20)
    v38 = v27;
  else
    v38 = v27 + 1;
  v39 = (unint64_t)&v35[v38];
  v40 = (unint64_t)&v16[v38];
  *(_BYTE *)v39 = *(_BYTE *)v40;
  v39 &= 0xFFFFFFFFFFFFFFF8;
  v40 &= 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v39 + 8) = *(_QWORD *)(v40 + 8);
  v41 = *(_QWORD *)(v36 + 56);
  v42 = *(_QWORD *)(v41 - 8);
  v43 = *(unsigned __int8 *)(v42 + 80);
  v44 = (void *)((v43 + 16 + v39) & ~v43);
  v45 = (const void *)((v43 + 16 + v40) & ~v43);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v42 + 48))(v45, 1, v41))
  {
    if (*(_DWORD *)(v42 + 84))
      v46 = *(_QWORD *)(v42 + 64);
    else
      v46 = *(_QWORD *)(v42 + 64) + 1;
    memcpy(v44, v45, v46);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v42 + 32))(v44, v45, v41);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v44, 0, 1, v41);
  }
  return v54;
}

_QWORD *sub_23BEAE378(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t);
  char *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  char *v37;
  char *v38;
  _QWORD *v39;
  uint64_t v40;
  int v41;
  char v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  size_t v58;
  unsigned int v59;
  BOOL v60;
  void *v61;
  void *v62;
  uint64_t (*v63)(void *, uint64_t, uint64_t);
  int v64;
  int v65;
  void *v66;
  void *v67;
  uint64_t (*v68)(void *, uint64_t, uint64_t);
  int v69;
  int v70;
  unsigned int v71;
  size_t v72;
  void *v73;
  const void *v74;
  void *v75;
  const void *v76;
  size_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  void *v86;
  uint64_t (*v87)(void *, uint64_t, uint64_t);
  int v88;
  int v89;
  size_t v90;
  size_t __n;
  size_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = sub_23BFF82CC();
  v8 = *(_QWORD *)(v7 - 8);
  v97 = *(_QWORD *)(a3 + 64);
  v9 = *(_QWORD *)(v97 - 8);
  v10 = *(unsigned int *)(v9 + 84);
  v11 = *(_DWORD *)(v9 + 80);
  v12 = *(unsigned int *)(v8 + 84);
  v13 = a3;
  v96 = *(_QWORD *)(a3 + 16);
  v14 = *(_QWORD *)(v96 - 8);
  v15 = *(unsigned int *)(v14 + 84);
  v16 = *(_DWORD *)(v14 + 80);
  v17 = (*(_DWORD *)(v9 + 80) | *(_DWORD *)(v8 + 80) | *(_DWORD *)(v14 + 80));
  v18 = a1;
  v19 = ((unint64_t)a1 + v17 + 16) & ~v17;
  v20 = ((unint64_t)a2 + v17 + 16) & ~v17;
  if ((_DWORD)v10)
    v21 = v10 - 1;
  else
    v21 = 0;
  if (v21 <= v12)
    v22 = *(_DWORD *)(v8 + 84);
  else
    v22 = v21;
  v23 = v15 - 1;
  if (!(_DWORD)v15)
    v23 = 0;
  if (v23 <= v22)
    v24 = v22;
  else
    v24 = v23;
  if ((_DWORD)v10)
    v25 = *(_QWORD *)(v9 + 64);
  else
    v25 = *(_QWORD *)(v9 + 64) + 1;
  v26 = *(_QWORD *)(v8 + 64) + v11;
  v27 = v25 + v16;
  v28 = (v25 + v16 + (v26 & ~v11)) & ~v16;
  v98 = *(_QWORD *)(v96 - 8);
  if ((_DWORD)v15)
    v29 = *(_QWORD *)(v14 + 64);
  else
    v29 = *(_QWORD *)(v14 + 64) + 1;
  v30 = v28 + v29;
  v102 = v24;
  v100 = ~v11;
  v101 = v28 + v29;
  v93 = v29;
  v94 = v25 + v16;
  v95 = ~v16;
  __n = v25;
  v99 = *(_QWORD *)(v8 + 64) + v11;
  if (!v24)
  {
    v41 = *(unsigned __int8 *)(v19 + v30);
    v42 = 8 * v30;
    v39 = v18;
    v40 = v13;
    v38 = (char *)v19;
    v37 = (char *)v20;
    if (!v41)
      goto LABEL_55;
    v43 = (v41 - 1) << v42;
    if (v30 > 3)
      v43 = 0;
    if ((_DWORD)v30)
    {
      if (v30 <= 3)
        v44 = v30;
      else
        v44 = 4;
      __asm { BR              X12 }
    }
    if (v43 == -1)
    {
LABEL_55:
      if (!*(_BYTE *)(v20 + v30))
        goto LABEL_71;
      v54 = (*(unsigned __int8 *)(v20 + v30) - 1) << v42;
      if (v101 > 3)
        v54 = 0;
      if ((_DWORD)v101)
      {
        if (v101 <= 3)
          v55 = v101;
        else
          v55 = 4;
        __asm { BR              X11 }
      }
      v36 = v54 + 1;
      goto LABEL_65;
    }
    if (!*(_BYTE *)(v20 + v30))
      goto LABEL_92;
    v52 = (*(unsigned __int8 *)(v20 + v30) - 1) << v42;
    if (v101 > 3)
      v52 = 0;
    if ((_DWORD)v101)
    {
      if (v101 <= 3)
        v53 = v101;
      else
        v53 = 4;
      __asm { BR              X11 }
    }
    if (v52 == -1)
      goto LABEL_92;
LABEL_87:
    v59 = v102;
    v60 = v102 == 0;
    v58 = v101;
LABEL_88:
    if (v60)
      v72 = v58 + 1;
    else
      v72 = v58;
    memcpy(v38, v37, v72);
    v71 = v59;
    goto LABEL_100;
  }
  if ((_DWORD)v12 == v24)
  {
    v31 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 48);
    v32 = (char *)v19;
    v33 = v19;
    v34 = v7;
    v35 = v31(v33, v12);
    v36 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v31)(v20, v12, v34);
    v7 = v34;
    v37 = (char *)v20;
    v38 = v32;
    v39 = v18;
    v40 = v13;
    if (v35)
    {
      if (!v36)
        goto LABEL_92;
      goto LABEL_87;
    }
LABEL_65:
    if (v36)
    {
LABEL_66:
      (*(void (**)(char *, uint64_t))(v8 + 8))(v38, v7);
      v56 = (unint64_t)&v38[v99] & v100;
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(v56, 1, v97))
        (*(void (**)(unint64_t, uint64_t))(v9 + 8))(v56, v97);
      v57 = (v94 + v56) & v95;
      v58 = v101;
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v98 + 48))(v57, 1, v96))
        (*(void (**)(unint64_t, uint64_t))(v98 + 8))(v57, v96);
      v59 = v102;
      v60 = v102 == 0;
      goto LABEL_88;
    }
LABEL_71:
    (*(void (**)(char *, char *, uint64_t))(v8 + 40))(v38, v37, v7);
    v61 = (void *)((unint64_t)&v38[v99] & v100);
    v62 = (void *)((unint64_t)&v37[v99] & v100);
    v63 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v9 + 48);
    v64 = v63(v61, 1, v97);
    v65 = v63(v62, 1, v97);
    if (v64)
    {
      if (!v65)
      {
        (*(void (**)(void *, void *, uint64_t))(v9 + 32))(v61, v62, v97);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v61, 0, 1, v97);
        goto LABEL_77;
      }
    }
    else
    {
      if (!v65)
      {
        (*(void (**)(void *, void *, uint64_t))(v9 + 40))(v61, v62, v97);
LABEL_77:
        v66 = (void *)(((unint64_t)v61 + v94) & v95);
        v67 = (void *)(((unint64_t)v62 + v94) & v95);
        v68 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v98 + 48);
        v69 = v68(v66, 1, v96);
        v70 = v68(v67, 1, v96);
        if (v69)
        {
          if (!v70)
          {
            (*(void (**)(void *, void *, uint64_t))(v98 + 32))(v66, v67, v96);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v98 + 56))(v66, 0, 1, v96);
LABEL_83:
            v71 = v102;
            v58 = v101;
            goto LABEL_100;
          }
        }
        else
        {
          if (!v70)
          {
            (*(void (**)(void *, void *, uint64_t))(v98 + 40))(v66, v67, v96);
            goto LABEL_83;
          }
          (*(void (**)(void *, uint64_t))(v98 + 8))(v66, v96);
        }
        memcpy(v66, v67, v93);
        goto LABEL_83;
      }
      (*(void (**)(void *, uint64_t))(v9 + 8))(v61, v97);
    }
    memcpy(v61, v62, __n);
    goto LABEL_77;
  }
  v45 = v7;
  v46 = (v26 + v19) & ~v11;
  if (v21 == v24)
    v47 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v46, v10, v97);
  else
    v47 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v98 + 48))((v27 + v46) & ~v16, v15, v96);
  if (v47 < 2)
  {
    v48 = (v99 + v20) & v100;
    if (v21 == v102)
      v49 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v48, v10, v97);
    else
      v49 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v98 + 48))((v94 + v48) & v95, v15, v96);
    v39 = v18;
    v40 = v13;
    v38 = (char *)v19;
    v37 = (char *)v20;
    v7 = v45;
    if (v49 >= 2)
      goto LABEL_66;
    goto LABEL_71;
  }
  v50 = (v99 + v20) & v100;
  if (v21 == v102)
    v51 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v50, v10, v97);
  else
    v51 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v98 + 48))((v94 + v50) & v95, v15, v96);
  v39 = v18;
  v40 = v13;
  v38 = (char *)v19;
  v37 = (char *)v20;
  v7 = v45;
  if (v51 >= 2)
    goto LABEL_87;
LABEL_92:
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v38, v37, v7);
  v73 = (void *)((unint64_t)&v38[v99] & v100);
  v74 = (const void *)((unint64_t)&v37[v99] & v100);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v74, 1, v97))
  {
    memcpy(v73, v74, __n);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(v73, v74, v97);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v73, 0, 1, v97);
  }
  v75 = (void *)(((unint64_t)v73 + v94) & v95);
  v76 = (const void *)(((unint64_t)v74 + v94) & v95);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v98 + 48))(v76, 1, v96))
  {
    memcpy(v75, v76, v93);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v98 + 32))(v75, v76, v96);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v98 + 56))(v75, 0, 1, v96);
  }
  v71 = v102;
  v58 = v101;
  if (!v102)
    v38[v101] = 0;
LABEL_100:
  if (v71)
    v77 = v58;
  else
    v77 = v58 + 1;
  v78 = (unint64_t)&v38[v77];
  v79 = (unint64_t)&v37[v77];
  *(_BYTE *)v78 = *(_BYTE *)v79;
  v80 = v78 & 0xFFFFFFFFFFFFFFF8;
  v81 = v79 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)((v78 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_QWORD *)((v79 & 0xFFFFFFFFFFFFFFF8) + 8);
  swift_bridgeObjectRelease();
  v82 = *(_QWORD *)(v40 + 56);
  v83 = *(_QWORD *)(v82 - 8);
  v84 = *(unsigned __int8 *)(v83 + 80);
  v85 = (void *)((v84 + 16 + v80) & ~v84);
  v86 = (void *)((v84 + 16 + v81) & ~v84);
  v87 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v83 + 48);
  v88 = v87(v85, 1, v82);
  v89 = v87(v86, 1, v82);
  if (v88)
  {
    if (!v89)
    {
      (*(void (**)(void *, void *, uint64_t))(v83 + 32))(v85, v86, v82);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v83 + 56))(v85, 0, 1, v82);
      return v39;
    }
  }
  else
  {
    if (!v89)
    {
      (*(void (**)(void *, void *, uint64_t))(v83 + 40))(v85, v86, v82);
      return v39;
    }
    (*(void (**)(void *, uint64_t))(v83 + 8))(v85, v82);
  }
  if (*(_DWORD *)(v83 + 84))
    v90 = *(_QWORD *)(v83 + 64);
  else
    v90 = *(_QWORD *)(v83 + 64) + 1;
  memcpy(v85, v86, v90);
  return v39;
}

uint64_t sub_23BEAEBF0(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  char v38;
  int v39;
  unsigned int v40;
  int v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v47;
  unsigned int v48;

  v6 = *(_QWORD *)(sub_23BFF82CC() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v9 = a3[7];
  v8 = a3[8];
  v10 = *(_QWORD *)(v8 - 8);
  v11 = *(unsigned int *)(v10 + 84);
  if ((_DWORD)v11)
    v12 = v11 - 1;
  else
    v12 = 0;
  if (v12 <= v7)
    v13 = *(_DWORD *)(v6 + 84);
  else
    v13 = v12;
  v14 = a3[2];
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned int *)(v15 + 84);
  v17 = v16 - 1;
  if (!(_DWORD)v16)
    v17 = 0;
  if (v17 <= v13)
    v18 = v13;
  else
    v18 = v17;
  if (v18)
    v19 = v18 - 1;
  else
    v19 = 0;
  v20 = *(_QWORD *)(v9 - 8);
  v21 = *(unsigned int *)(v20 + 84);
  v22 = v21 - 1;
  if (!(_DWORD)v21)
    v22 = 0;
  if (v19 <= v22)
    v23 = v22;
  else
    v23 = v19;
  if (v23 <= 0x7FFFFFFF)
    v24 = 0x7FFFFFFF;
  else
    v24 = v23;
  if ((_DWORD)v11)
    v25 = *(_QWORD *)(v10 + 64);
  else
    v25 = *(_QWORD *)(v10 + 64) + 1;
  if ((_DWORD)v16)
    v26 = v18 == 0;
  else
    v26 = (v18 == 0) + 1;
  if ((_DWORD)v21)
    v27 = *(_QWORD *)(v20 + 64);
  else
    v27 = *(_QWORD *)(v20 + 64) + 1;
  if (!a2)
    return 0;
  v28 = *(_DWORD *)(v10 + 80);
  v29 = *(_DWORD *)(v15 + 80);
  v30 = (*(_DWORD *)(v10 + 80) | *(_DWORD *)(v6 + 80) | *(_DWORD *)(v15 + 80));
  v31 = *(_QWORD *)(v6 + 64) + v28;
  v32 = v25 + v29;
  v33 = v26 + *(_QWORD *)(v15 + 64) + ((v32 + (v31 & ~v28)) & ~v29);
  v34 = *(unsigned __int8 *)(v20 + 80);
  v35 = v34 + 16;
  v36 = a2 - v24;
  if (a2 <= v24)
    goto LABEL_51;
  v37 = v27 + ((v35 + ((v33 + ((v30 + 16) & ~v30)) & 0xFFFFFFFFFFFFFFF8)) & ~v34);
  v38 = 8 * v37;
  if (v37 <= 3)
  {
    v40 = ((v36 + ~(-1 << v38)) >> v38) + 1;
    if (HIWORD(v40))
    {
      v39 = *(_DWORD *)(a1 + v37);
      if (!v39)
        goto LABEL_51;
      goto LABEL_42;
    }
    if (v40 > 0xFF)
    {
      v39 = *(unsigned __int16 *)(a1 + v37);
      if (!*(_WORD *)(a1 + v37))
        goto LABEL_51;
      goto LABEL_42;
    }
    if (v40 < 2)
    {
LABEL_51:
      if ((v23 & 0x80000000) == 0)
      {
        v43 = *(_QWORD *)(a1 + 8);
        if (v43 >= 0xFFFFFFFF)
          LODWORD(v43) = -1;
        return (v43 + 1);
      }
      v44 = (a1 + v30 + 16) & ~v30;
      if (v19 == v24)
      {
        if (v18 >= 2)
        {
          if (v7 == v18)
          {
            v45 = (*(uint64_t (**)(uint64_t))(v6 + 48))(v44);
          }
          else
          {
            v47 = (v31 + v44) & ~v28;
            if (v12 == v18)
              v48 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v47, v11, v8);
            else
              v48 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))((v32 + v47) & ~v29, v16, v14);
            if (v48 >= 2)
              v45 = v48 - 1;
            else
              v45 = 0;
          }
          goto LABEL_68;
        }
      }
      else if (v21 >= 2)
      {
        v45 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v20 + 48))((v35 + ((v33 + v44) & 0xFFFFFFFFFFFFFFF8)) & ~v34, v21, v9);
LABEL_68:
        if (v45 >= 2)
          return v45 - 1;
        else
          return 0;
      }
      return 0;
    }
  }
  v39 = *(unsigned __int8 *)(a1 + v37);
  if (!*(_BYTE *)(a1 + v37))
    goto LABEL_51;
LABEL_42:
  v41 = (v39 - 1) << v38;
  if (v37 > 3)
    v41 = 0;
  if ((_DWORD)v37)
  {
    if (v37 <= 3)
      v42 = v37;
    else
      v42 = 4;
    __asm { BR              X11 }
  }
  return v24 + v41 + 1;
}

void sub_23BEAEF14(_BYTE *a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  BOOL v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;

  v7 = 0;
  v8 = *(_QWORD *)(sub_23BFF82CC() - 8);
  v9 = *(_QWORD *)(a4[8] - 8);
  v10 = *(_DWORD *)(v9 + 84);
  if (v10)
    v11 = v10 - 1;
  else
    v11 = 0;
  if (v11 <= *(_DWORD *)(v8 + 84))
    v12 = *(_DWORD *)(v8 + 84);
  else
    v12 = v11;
  v13 = *(_QWORD *)(a4[2] - 8);
  v14 = *(_DWORD *)(v13 + 84);
  if (v14)
    v15 = v14 - 1;
  else
    v15 = 0;
  if (v15 <= v12)
    v16 = v12;
  else
    v16 = v15;
  if (v16)
    v17 = v16 - 1;
  else
    v17 = 0;
  v18 = *(_QWORD *)(a4[7] - 8);
  v19 = *(_DWORD *)(v18 + 84);
  v20 = v19 - 1;
  if (!v19)
    v20 = 0;
  if (v17 <= v20)
    v21 = v20;
  else
    v21 = v17;
  if (v21 <= 0x7FFFFFFF)
    v22 = 0x7FFFFFFF;
  else
    v22 = v21;
  v23 = *(_QWORD *)(v9 + 64);
  if (!v10)
    ++v23;
  if (v14)
    v24 = *(_QWORD *)(v13 + 64);
  else
    v24 = *(_QWORD *)(v13 + 64) + 1;
  v25 = (*(_QWORD *)(v8 + 64) + *(_DWORD *)(v9 + 80)) & ~(unint64_t)*(_DWORD *)(v9 + 80);
  v26 = v23 + *(_DWORD *)(v13 + 80);
  if (v16)
    v27 = ((v26 + v25) & ~(unint64_t)*(_DWORD *)(v13 + 80)) + v24;
  else
    v27 = ((v26 + v25) & ~(unint64_t)*(_DWORD *)(v13 + 80)) + v24 + 1;
  v29 = *(_QWORD *)(v18 + 64);
  if (!v19)
    ++v29;
  v28 = (*(_DWORD *)(v9 + 80) | *(_DWORD *)(v8 + 80) | *(_DWORD *)(v13 + 80));
  v30 = v29
      + ((*(unsigned __int8 *)(v18 + 80) + 16 + ((v27 + ((v28 + 16) & ~v28)) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
  v31 = a3 >= v22;
  v32 = a3 - v22;
  if (v32 != 0 && v31)
  {
    if (v30 > 3)
    {
      v7 = 1u;
      if (v22 < a2)
        goto LABEL_44;
      goto LABEL_51;
    }
    v33 = ((v32 + ~(-1 << (8 * v30))) >> (8 * v30)) + 1;
    if (HIWORD(v33))
    {
      v7 = 4u;
      if (v22 < a2)
      {
LABEL_44:
        v34 = ~v22 + a2;
        if (v30 < 4)
        {
          if ((_DWORD)v30)
          {
            v35 = v34 & ~(-1 << (8 * v30));
            bzero(a1, v30);
            if ((_DWORD)v30 == 3)
            {
              *(_WORD *)a1 = v35;
              a1[2] = BYTE2(v35);
            }
            else if ((_DWORD)v30 == 2)
            {
              *(_WORD *)a1 = v35;
            }
            else
            {
              *a1 = v35;
            }
          }
        }
        else
        {
          bzero(a1, v30);
          *(_DWORD *)a1 = v34;
        }
        __asm { BR              X10 }
      }
LABEL_51:
      __asm { BR              X3 }
    }
    if (v33 >= 0x100)
      v7 = 2;
    else
      v7 = v33 > 1;
  }
  if (v22 < a2)
    goto LABEL_44;
  goto LABEL_51;
}

void sub_23BEAF2B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  char v16;
  uint64_t v17;

  *(_BYTE *)(a16 + v17) = v16;
}

void sub_23BEAF2C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  __int16 v16;
  uint64_t v17;

  *(_WORD *)(a16 + v17) = v16;
}

void sub_23BEAF2CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  int v16;
  uint64_t v17;

  *(_DWORD *)(a16 + v17) = v16;
  JUMPOUT(0x23BEAF2D4);
}

void sub_23BEAF33C()
{
  __int16 v0;
  _WORD *v1;

  *v1 = v0;
}

void sub_23BEAF344()
{
  int v0;
  uint64_t v1;

  *(_WORD *)v1 = v0;
  *(_BYTE *)(v1 + 2) = BYTE2(v0);
}

void sub_23BEAF354()
{
  int v0;
  _DWORD *v1;

  *v1 = v0;
}

void sub_23BEAF3C0()
{
  _BYTE *v0;
  char v1;

  *v0 = v1;
}

void sub_23BEAF3E0()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_23BEAF3E8()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_23BEAF3F8()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

uint64_t sub_23BEAF404()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t getEnumTagSinglePayload for StandardVerticalStackViewLayout.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t sub_23BEAF49C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_23BEAF4E8 + 4 * byte_23BFFA638[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_23BEAF51C + 4 * byte_23BFFA633[v4]))();
}

uint64_t sub_23BEAF51C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BEAF524(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BEAF52CLL);
  return result;
}

uint64_t sub_23BEAF538(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BEAF540);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_23BEAF544(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BEAF54C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_23BEAF558(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

void sub_23BEAF560()
{
  JUMPOUT(0x242615198);
}

void sub_23BEAF570()
{
  JUMPOUT(0x242615198);
}

void sub_23BEAF580()
{
  JUMPOUT(0x242615198);
}

void sub_23BEAF590(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t AssociatedConformanceWitness;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[222];

  v29[19] = a4;
  v29[9] = a7;
  v29[10] = a8;
  v29[6] = a6;
  v29[7] = a2;
  v29[4] = a5;
  v29[5] = a1;
  v29[8] = a3;
  v29[25] = a9;
  v29[81] = a21;
  v29[82] = a20;
  v29[17] = a19;
  v29[29] = a18;
  v29[80] = a16;
  v29[30] = a15;
  v29[28] = a13;
  v29[27] = a12;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v29[15] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v29[16] = AssociatedTypeWitness;
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v29[14] = (char *)v29 - v22;
  v23 = swift_getAssociatedTypeWitness();
  v24 = swift_getAssociatedTypeWitness();
  v25 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v29[26] = a17;
  v27 = swift_getAssociatedConformanceWitness();
  v28 = swift_getAssociatedConformanceWitness();
  v29[205] = v23;
  v29[206] = v24;
  v29[207] = v25;
  v29[208] = AssociatedConformanceWitness;
  v29[209] = v27;
  v29[210] = v28;
  type metadata accessor for CanvasItemContent();
}

void sub_23BEAF744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v9[12] = *(_QWORD *)(a1 - 8);
  v9[13] = a1;
  MEMORY[0x24BDAC7A8](a1);
  v9[11] = (char *)&a9 - v13;
  v14 = v9[80];
  *(_QWORD *)(v12 - 248) = v10;
  *(_QWORD *)(v12 - 240) = v14;
  *(_QWORD *)(v12 - 232) = v14;
  *(_QWORD *)(v12 - 224) = v11;
  v15 = v9[81];
  *(_QWORD *)(v12 - 216) = v15;
  *(_QWORD *)(v12 - 208) = v15;
  type metadata accessor for ActionCardView();
}

void sub_23BEAF794(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = MEMORY[0x242615198](&unk_23C005608, a1);
  v1[79] = a1;
  *(_QWORD *)(v4 - 248) = a1;
  *(_QWORD *)(v4 - 240) = v6;
  v1[78] = v6;
  MEMORY[0x24261512C](255, v4 - 248, MEMORY[0x24BDF3948], 0);
  v1[31] = sub_23BFF8ADC();
  v7 = (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088];
  v8 = sub_23BFF862C();
  v9 = sub_23BFF862C();
  v10 = sub_23BEA1BB8((unint64_t *)&qword_256AE3908, v7, MEMORY[0x24BDF1078]);
  *(_QWORD *)(v4 - 136) = v3;
  *(_QWORD *)(v4 - 128) = v10;
  v1[24] = v10;
  v11 = MEMORY[0x24BDED308];
  v12 = MEMORY[0x242615198](MEMORY[0x24BDED308], v8, v4 - 136);
  v13 = MEMORY[0x24BDEEC40];
  *(_QWORD *)(v4 - 152) = v12;
  *(_QWORD *)(v4 - 144) = v13;
  v14 = MEMORY[0x242615198](v11, v9, v4 - 152);
  v1[77] = v9;
  *(_QWORD *)(v4 - 248) = v9;
  *(_QWORD *)(v4 - 240) = v14;
  v1[76] = v14;
  v15 = MEMORY[0x24BDF3100];
  MEMORY[0x24261512C](255, v4 - 248, MEMORY[0x24BDF3100], 0);
  v16 = sub_23BFF862C();
  v17 = MEMORY[0x24BDEBEE0];
  *(_QWORD *)(v4 - 168) = v12;
  *(_QWORD *)(v4 - 160) = v17;
  v18 = MEMORY[0x242615198](v11, v16, v4 - 168);
  v1[73] = v16;
  *(_QWORD *)(v4 - 248) = v16;
  *(_QWORD *)(v4 - 240) = v18;
  v1[68] = v18;
  MEMORY[0x24261512C](255, v4 - 248, v15, 0);
  v1[67] = sub_23BFF8968();
  v1[69] = sub_23BFF8FD4();
  v19 = sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3910);
  v1[71] = v19;
  v20 = sub_23BFF8968();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3918);
  v1[72] = v20;
  v1[74] = sub_23BFF8968();
  sub_23BFF8968();
  v21 = v1[80];
  *(_QWORD *)(v4 - 248) = v2;
  *(_QWORD *)(v4 - 240) = v21;
  v22 = v1[30];
  *(_QWORD *)(v4 - 232) = v21;
  *(_QWORD *)(v4 - 224) = v22;
  *(_QWORD *)(v4 - 216) = v1[28];
  *(_QWORD *)(v4 - 208) = v3;
  v23 = v1[81];
  *(_QWORD *)(v4 - 200) = v23;
  *(_QWORD *)(v4 - 192) = v23;
  v24 = v1[29];
  *(_QWORD *)(v4 - 184) = v1[82];
  *(_QWORD *)(v4 - 176) = v24;
  type metadata accessor for FullWidthStageView();
}

void sub_23BEAF9BC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v10 = MEMORY[0x242615198](&unk_23C0077B8, a1);
  v1[70] = a1;
  *(_QWORD *)(v8 - 248) = a1;
  *(_QWORD *)(v8 - 240) = v10;
  v1[66] = v10;
  MEMORY[0x24261512C](255, v8 - 248, v3, 0);
  v12 = type metadata accessor for InfoActionCardView(255, v5, v6, v11);
  v13 = MEMORY[0x242615198](&unk_23C007F20, v12);
  v1[65] = v12;
  *(_QWORD *)(v8 - 248) = v12;
  *(_QWORD *)(v8 - 240) = v13;
  v1[64] = v13;
  MEMORY[0x24261512C](255, v8 - 248, v3, 0);
  v14 = sub_23BFF8968();
  v1[75] = v2;
  v1[62] = v14;
  v15 = sub_23BFF8968();
  v17 = type metadata accessor for LargeBrickView(255, v4, v7, v16);
  v18 = MEMORY[0x242615198](&protocol conformance descriptor for LargeBrickView<A>, v17);
  v1[60] = v18;
  v1[61] = v17;
  *(_QWORD *)(v8 - 248) = v17;
  *(_QWORD *)(v8 - 240) = v18;
  MEMORY[0x24261512C](255, v8 - 248, v3, 0);
  v20 = type metadata accessor for DynamicBrickView(255, v4, v7, v19);
  v21 = MEMORY[0x242615198](&protocol conformance descriptor for DynamicBrickView<A>, v20);
  v1[58] = v21;
  v1[59] = v20;
  *(_QWORD *)(v8 - 248) = v20;
  *(_QWORD *)(v8 - 240) = v21;
  MEMORY[0x24261512C](255, v8 - 248, v3, 0);
  v22 = sub_23BFF8968();
  v24 = type metadata accessor for MonogramVerticalStackView(255, v4, v7, v23);
  v25 = MEMORY[0x242615198](&unk_23BFFA1F4, v24);
  v1[56] = v24;
  *(_QWORD *)(v8 - 248) = v24;
  *(_QWORD *)(v8 - 240) = v25;
  v1[54] = v25;
  MEMORY[0x24261512C](255, v8 - 248, v3, 0);
  v26 = sub_23BFF8968();
  v1[57] = v22;
  v1[52] = v26;
  v27 = sub_23BFF8968();
  v1[63] = v15;
  v1[53] = v27;
  sub_23BFF8968();
  v29 = type metadata accessor for StandardCardView(255, v4, v7, v28);
  v30 = MEMORY[0x242615198](&unk_23C007BD0, v29);
  v1[50] = v30;
  v1[51] = v29;
  *(_QWORD *)(v8 - 248) = v29;
  *(_QWORD *)(v8 - 240) = v30;
  MEMORY[0x24261512C](255, v8 - 248, v3, 0);
  *(_QWORD *)(v8 - 248) = v4;
  *(_QWORD *)(v8 - 240) = v5;
  *(_QWORD *)(v8 - 232) = v7;
  *(_QWORD *)(v8 - 224) = v6;
  type metadata accessor for StandardHorizontalStackView();
}

uint64_t sub_23BEAFBE0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t OpaqueTypeConformance2;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  void (*v165)(uint64_t, uint64_t);
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  _BYTE v218[128];

  v8 = MEMORY[0x242615198](&unk_23C0008E8, a1);
  v1[48] = v8;
  v1[49] = a1;
  *(_QWORD *)(v6 - 248) = a1;
  *(_QWORD *)(v6 - 240) = v8;
  MEMORY[0x24261512C](255, v6 - 248, v3, 0);
  v9 = sub_23BFF8968();
  v11 = type metadata accessor for StandardVerticalStackView(255, v4, v5, v10);
  v12 = MEMORY[0x242615198](&unk_23C0073B8, v11);
  v1[45] = v12;
  v1[46] = v11;
  *(_QWORD *)(v6 - 248) = v11;
  *(_QWORD *)(v6 - 240) = v12;
  MEMORY[0x24261512C](255, v6 - 248, v3, 0);
  v14 = type metadata accessor for TallCardView(255, v4, v5, v13);
  v15 = MEMORY[0x242615198](&unk_23BFFF0E4, v14);
  v1[43] = v15;
  v1[44] = v14;
  *(_QWORD *)(v6 - 248) = v14;
  *(_QWORD *)(v6 - 240) = v15;
  MEMORY[0x24261512C](255, v6 - 248, v3, 0);
  v16 = sub_23BFF8968();
  v1[47] = v9;
  v1[41] = v16;
  v17 = sub_23BFF8968();
  v19 = type metadata accessor for VerticalStackCard(255, v4, v5, v18);
  v20 = MEMORY[0x242615198](&unk_23C0000E0, v19);
  v1[39] = v20;
  v1[40] = v19;
  *(_QWORD *)(v6 - 248) = v19;
  *(_QWORD *)(v6 - 240) = v20;
  MEMORY[0x24261512C](255, v6 - 248, v3, 0);
  v21 = v1[30];
  v22 = sub_23BFF8968();
  v24 = type metadata accessor for WideBrickView(255, v4, v5, v23);
  v25 = MEMORY[0x242615198](&protocol conformance descriptor for WideBrickView<A>, v24);
  v1[37] = v24;
  *(_QWORD *)(v6 - 248) = v24;
  *(_QWORD *)(v6 - 240) = v25;
  v1[34] = v25;
  MEMORY[0x24261512C](255, v6 - 248, v3, 0);
  v1[38] = v22;
  v26 = sub_23BFF8968();
  v1[42] = v17;
  v1[32] = v26;
  v27 = sub_23BFF8968();
  v1[55] = v2;
  v1[33] = v27;
  v1[35] = sub_23BFF8968();
  v28 = sub_23BFF8FD4();
  v1[1] = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v1[18] = &v218[-v29];
  v1[36] = v30;
  v31 = sub_23BFF862C();
  v1[2] = *(_QWORD *)(v31 - 8);
  v32 = MEMORY[0x24BDAC7A8](v31);
  v34 = &v218[-((v33 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v32);
  v1[3] = &v218[-v35];
  v1[21] = v36;
  v37 = sub_23BFF8968();
  v1[22] = *(_QWORD *)(v37 - 8);
  v1[23] = v37;
  MEMORY[0x24BDAC7A8](v37);
  v1[31] = &v218[-v38];
  v39 = (uint64_t *)v1[19];
  v40 = *v39;
  v41 = v39[1];
  v42 = v39[2];
  v43 = v39[3];
  v44 = v1[20];
  v45 = v1[27];
  v46 = v1[26];
  v47 = (*(uint64_t (**)(void))(v46 + 184))();
  v48 = sub_23BF29234(3u, v47);
  v49 = swift_bridgeObjectRelease();
  if (v48)
  {
    v50 = v1[78];
    *(_QWORD *)(v6 - 248) = v1[79];
    *(_QWORD *)(v6 - 240) = v50;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    v52 = v1[76];
    *(_QWORD *)(v6 - 248) = v1[77];
    *(_QWORD *)(v6 - 240) = v52;
    v53 = swift_getOpaqueTypeConformance2();
    v54 = v1[68];
    *(_QWORD *)(v6 - 248) = v1[73];
    *(_QWORD *)(v6 - 240) = v54;
    v55 = swift_getOpaqueTypeConformance2();
    v1[121] = v53;
    v1[122] = v55;
    v56 = MEMORY[0x24BDEF3E0];
    v1[120] = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v1[67], v1 + 121);
    v57 = MEMORY[0x24BDF3F50];
    v1[118] = MEMORY[0x242615198](MEMORY[0x24BDF3F50], v1[69], v1 + 120);
    v1[119] = MEMORY[0x24BDECC60];
    v58 = MEMORY[0x24BDED308];
    v59 = MEMORY[0x242615198](MEMORY[0x24BDED308], v1[71], v1 + 118);
    v60 = sub_23BEA1F94(&qword_256AE3920, &qword_256AE3910, MEMORY[0x24BDF43B0]);
    v1[116] = v59;
    v1[117] = v60;
    v61 = MEMORY[0x242615198](v56, v1[72], v1 + 116);
    v62 = sub_23BEA1F94(&qword_256AE3928, &qword_256AE3918, MEMORY[0x24BDF4700]);
    v1[114] = v61;
    v1[115] = v62;
    v63 = MEMORY[0x242615198](v56, v1[74], v1 + 114);
    v1[112] = OpaqueTypeConformance2;
    v1[113] = v63;
    v64 = MEMORY[0x242615198](v56, v1[75], v1 + 112);
    v65 = v1[66];
    *(_QWORD *)(v6 - 248) = v1[70];
    *(_QWORD *)(v6 - 240) = v65;
    v66 = swift_getOpaqueTypeConformance2();
    v67 = v1[64];
    *(_QWORD *)(v6 - 248) = v1[65];
    *(_QWORD *)(v6 - 240) = v67;
    v68 = swift_getOpaqueTypeConformance2();
    v1[110] = v66;
    v1[111] = v68;
    v69 = MEMORY[0x242615198](v56, v1[62], v1 + 110);
    v1[108] = v64;
    v1[109] = v69;
    v70 = MEMORY[0x242615198](v56, v1[63], v1 + 108);
    v71 = v1[60];
    *(_QWORD *)(v6 - 248) = v1[61];
    *(_QWORD *)(v6 - 240) = v71;
    v72 = swift_getOpaqueTypeConformance2();
    v73 = v1[58];
    *(_QWORD *)(v6 - 248) = v1[59];
    *(_QWORD *)(v6 - 240) = v73;
    v74 = swift_getOpaqueTypeConformance2();
    v1[106] = v72;
    v1[107] = v74;
    v75 = MEMORY[0x242615198](v56, v1[57], v1 + 106);
    v76 = v1[54];
    *(_QWORD *)(v6 - 248) = v1[56];
    *(_QWORD *)(v6 - 240) = v76;
    v1[104] = swift_getOpaqueTypeConformance2();
    v1[105] = v74;
    v77 = MEMORY[0x242615198](v56, v1[52], v1 + 104);
    v1[102] = v75;
    v1[103] = v77;
    v78 = MEMORY[0x242615198](v56, v1[53], v1 + 102);
    v1[100] = v70;
    v1[101] = v78;
    v79 = MEMORY[0x242615198](v56, v1[55], v1 + 100);
    v80 = v1[50];
    *(_QWORD *)(v6 - 248) = v1[51];
    *(_QWORD *)(v6 - 240) = v80;
    v81 = swift_getOpaqueTypeConformance2();
    v82 = v1[48];
    *(_QWORD *)(v6 - 248) = v1[49];
    *(_QWORD *)(v6 - 240) = v82;
    v83 = swift_getOpaqueTypeConformance2();
    v1[98] = v81;
    v1[99] = v83;
    v84 = MEMORY[0x242615198](v56, v1[47], v1 + 98);
    v85 = v1[45];
    *(_QWORD *)(v6 - 248) = v1[46];
    *(_QWORD *)(v6 - 240) = v85;
    v86 = swift_getOpaqueTypeConformance2();
    v87 = v1[43];
    *(_QWORD *)(v6 - 248) = v1[44];
    *(_QWORD *)(v6 - 240) = v87;
    v88 = swift_getOpaqueTypeConformance2();
    v1[96] = v86;
    v1[97] = v88;
    v89 = MEMORY[0x242615198](v56, v1[41], v1 + 96);
    v1[94] = v84;
    v1[95] = v89;
    v90 = MEMORY[0x242615198](v56, v1[42], v1 + 94);
    v91 = v1[39];
    *(_QWORD *)(v6 - 248) = v1[40];
    *(_QWORD *)(v6 - 240) = v91;
    v1[92] = swift_getOpaqueTypeConformance2();
    v1[93] = v1[82];
    v92 = MEMORY[0x242615198](v56, v1[38], v1 + 92);
    v93 = v1[34];
    *(_QWORD *)(v6 - 248) = v1[37];
    *(_QWORD *)(v6 - 240) = v93;
    v94 = swift_getOpaqueTypeConformance2();
    v1[90] = v92;
    v1[91] = v94;
    v95 = MEMORY[0x242615198](v56, v1[32], v1 + 90);
    v1[88] = v90;
    v1[89] = v95;
    v96 = MEMORY[0x242615198](v56, v1[33], v1 + 88);
    v1[86] = v79;
    v1[87] = v96;
    v1[85] = MEMORY[0x242615198](v56, v1[35], v1 + 86);
    v1[83] = MEMORY[0x242615198](v57, v1[36], v1 + 85);
    v97 = v1[24];
    v1[84] = v97;
    v98 = v58;
    v99 = v1[21];
    v100 = MEMORY[0x242615198](v98, v99, v1 + 83);
    sub_23BEA5C24(v100, MEMORY[0x24BDF5158]);
  }
  else
  {
    v1[19] = v218;
    MEMORY[0x24BDAC7A8](v49);
    *v1 = &v218[-208];
    v101 = v1[28];
    *(_QWORD *)&v218[-192] = v45;
    *(_QWORD *)&v218[-184] = v101;
    *(_QWORD *)&v218[-176] = v4;
    *(_QWORD *)&v218[-168] = v21;
    *(_QWORD *)&v218[-160] = v1[80];
    *(_QWORD *)&v218[-152] = v46;
    *(_QWORD *)&v218[-144] = v1[29];
    *(_QWORD *)&v218[-136] = v5;
    v102 = v1[82];
    v103 = v1[81];
    *(_QWORD *)&v218[-128] = v102;
    *(_QWORD *)&v218[-120] = v103;
    v104 = v1[4];
    *(_QWORD *)&v218[-112] = v44;
    *(_QWORD *)&v218[-104] = v104;
    *(_QWORD *)&v218[-96] = v1[6];
    *(_QWORD *)&v218[-88] = v105;
    *(_QWORD *)&v218[-80] = v106;
    v107 = v1[7];
    *(_QWORD *)&v218[-72] = v1[5];
    *(_QWORD *)&v218[-64] = v107;
    *(_QWORD *)&v218[-56] = v1[8];
    *(_QWORD *)&v218[-48] = v40;
    *(_QWORD *)&v218[-40] = v41;
    *(_QWORD *)&v218[-32] = v42;
    *(_QWORD *)&v218[-24] = v43;
    v108 = v1[10];
    *(_QWORD *)&v218[-16] = v1[9];
    *(_QWORD *)&v218[-8] = v108;
    v109 = v1[78];
    *(_QWORD *)(v6 - 248) = v1[79];
    *(_QWORD *)(v6 - 240) = v109;
    v110 = swift_getOpaqueTypeConformance2();
    v111 = v1[76];
    *(_QWORD *)(v6 - 248) = v1[77];
    *(_QWORD *)(v6 - 240) = v111;
    v112 = swift_getOpaqueTypeConformance2();
    v113 = v1[68];
    *(_QWORD *)(v6 - 248) = v1[73];
    *(_QWORD *)(v6 - 240) = v113;
    v114 = swift_getOpaqueTypeConformance2();
    v1[203] = v112;
    v1[204] = v114;
    v115 = MEMORY[0x24BDEF3E0];
    v1[202] = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v1[67], v1 + 203);
    v1[200] = MEMORY[0x242615198](MEMORY[0x24BDF3F50], v1[69], v1 + 202);
    v1[201] = MEMORY[0x24BDECC60];
    v116 = MEMORY[0x242615198](MEMORY[0x24BDED308], v1[71], v1 + 200);
    v117 = sub_23BEA1F94(&qword_256AE3920, &qword_256AE3910, MEMORY[0x24BDF43B0]);
    v1[198] = v116;
    v1[199] = v117;
    v118 = MEMORY[0x242615198](v115, v1[72], v1 + 198);
    v119 = sub_23BEA1F94(&qword_256AE3928, &qword_256AE3918, MEMORY[0x24BDF4700]);
    v1[196] = v118;
    v1[197] = v119;
    v120 = MEMORY[0x242615198](v115, v1[74], v1 + 196);
    v1[194] = v110;
    v1[195] = v120;
    v121 = MEMORY[0x242615198](v115, v1[75], v1 + 194);
    v122 = v1[66];
    *(_QWORD *)(v6 - 248) = v1[70];
    *(_QWORD *)(v6 - 240) = v122;
    v123 = swift_getOpaqueTypeConformance2();
    v124 = v1[64];
    *(_QWORD *)(v6 - 248) = v1[65];
    *(_QWORD *)(v6 - 240) = v124;
    v125 = swift_getOpaqueTypeConformance2();
    v1[192] = v123;
    v1[193] = v125;
    v126 = MEMORY[0x242615198](v115, v1[62], v1 + 192);
    v1[190] = v121;
    v1[191] = v126;
    v127 = MEMORY[0x242615198](v115, v1[63], v1 + 190);
    v128 = v1[60];
    *(_QWORD *)(v6 - 248) = v1[61];
    *(_QWORD *)(v6 - 240) = v128;
    v129 = swift_getOpaqueTypeConformance2();
    v130 = v1[58];
    *(_QWORD *)(v6 - 248) = v1[59];
    *(_QWORD *)(v6 - 240) = v130;
    v131 = swift_getOpaqueTypeConformance2();
    v1[188] = v129;
    v1[189] = v131;
    v132 = MEMORY[0x242615198](v115, v1[57], v1 + 188);
    v133 = v1[54];
    *(_QWORD *)(v6 - 248) = v1[56];
    *(_QWORD *)(v6 - 240) = v133;
    v1[186] = swift_getOpaqueTypeConformance2();
    v1[187] = v131;
    v134 = MEMORY[0x242615198](v115, v1[52], v1 + 186);
    v1[184] = v132;
    v1[185] = v134;
    v135 = MEMORY[0x242615198](v115, v1[53], v1 + 184);
    v1[182] = v127;
    v1[183] = v135;
    v136 = MEMORY[0x242615198](v115, v1[55], v1 + 182);
    v137 = v1[50];
    *(_QWORD *)(v6 - 248) = v1[51];
    *(_QWORD *)(v6 - 240) = v137;
    v138 = swift_getOpaqueTypeConformance2();
    v139 = v1[48];
    *(_QWORD *)(v6 - 248) = v1[49];
    *(_QWORD *)(v6 - 240) = v139;
    v140 = swift_getOpaqueTypeConformance2();
    v1[180] = v138;
    v1[181] = v140;
    v141 = MEMORY[0x242615198](v115, v1[47], v1 + 180);
    v142 = v1[45];
    *(_QWORD *)(v6 - 248) = v1[46];
    *(_QWORD *)(v6 - 240) = v142;
    v143 = swift_getOpaqueTypeConformance2();
    v144 = v1[43];
    *(_QWORD *)(v6 - 248) = v1[44];
    *(_QWORD *)(v6 - 240) = v144;
    v145 = swift_getOpaqueTypeConformance2();
    v1[178] = v143;
    v1[179] = v145;
    v146 = MEMORY[0x242615198](v115, v1[41], v1 + 178);
    v1[176] = v141;
    v1[177] = v146;
    v147 = MEMORY[0x242615198](v115, v1[42], v1 + 176);
    v148 = v1[39];
    *(_QWORD *)(v6 - 248) = v1[40];
    *(_QWORD *)(v6 - 240) = v148;
    v1[174] = swift_getOpaqueTypeConformance2();
    v1[175] = v102;
    v149 = MEMORY[0x242615198](v115, v1[38], v1 + 174);
    v150 = v1[34];
    *(_QWORD *)(v6 - 248) = v1[37];
    *(_QWORD *)(v6 - 240) = v150;
    v151 = swift_getOpaqueTypeConformance2();
    v1[172] = v149;
    v1[173] = v151;
    v152 = MEMORY[0x242615198](v115, v1[32], v1 + 172);
    v1[170] = v147;
    v1[171] = v152;
    v153 = MEMORY[0x242615198](v115, v1[33], v1 + 170);
    v1[168] = v136;
    v1[169] = v153;
    v1[81] = MEMORY[0x242615198](v115, v1[35], v1 + 168);
    sub_23BFF8FC8();
    *(_QWORD *)(v6 - 248) = 0;
    *(_QWORD *)(v6 - 240) = 0xE000000000000000;
    sub_23BFF9400();
    v154 = v1[27];
    v155 = v1[11];
    v156 = (uint64_t)v34;
    v157 = v1[26];
    (*(void (**)(uint64_t))(v157 + 160))(v154);
    v158 = v1[13];
    sub_23BF060B4(v158);
    (*(void (**)(uint64_t, uint64_t))(v1[12] + 8))(v155, v158);
    sub_23BFF9400();
    swift_bridgeObjectRelease();
    sub_23BFF9400();
    v159 = v1[14];
    (*(void (**)(uint64_t, uint64_t))(v157 + 152))(v154, v157);
    v160 = v1[16];
    sub_23BFF9958();
    (*(void (**)(uint64_t, uint64_t))(v1[15] + 8))(v159, v160);
    v1[167] = v1[81];
    v161 = v1[36];
    v162 = MEMORY[0x242615198](MEMORY[0x24BDF3F50], v161, v1 + 167);
    v163 = v1[18];
    sub_23BFF8E84();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v1[1] + 8))(v163, v161);
    v1[165] = v162;
    v97 = v1[24];
    v1[166] = v97;
    v99 = v1[21];
    MEMORY[0x242615198](MEMORY[0x24BDED308], v99, v1 + 165);
    v164 = v1[3];
    sub_23BEA72EC(v156, v99, v164);
    v165 = *(void (**)(uint64_t, uint64_t))(v1[2] + 8);
    v165(v156, v99);
    sub_23BEA5C0C(v164, v99, v156);
    sub_23BEA5CE8(v156, MEMORY[0x24BDF5158], v99);
    v165(v156, v99);
    v165(v164, v99);
  }
  v166 = v1[78];
  *(_QWORD *)(v6 - 248) = v1[79];
  *(_QWORD *)(v6 - 240) = v166;
  v167 = swift_getOpaqueTypeConformance2();
  v168 = v1[76];
  *(_QWORD *)(v6 - 248) = v1[77];
  *(_QWORD *)(v6 - 240) = v168;
  v169 = swift_getOpaqueTypeConformance2();
  v170 = v1[68];
  *(_QWORD *)(v6 - 248) = v1[73];
  *(_QWORD *)(v6 - 240) = v170;
  v171 = swift_getOpaqueTypeConformance2();
  v1[163] = v169;
  v1[164] = v171;
  v172 = MEMORY[0x24BDEF3E0];
  v1[162] = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v1[67], v1 + 163);
  v173 = MEMORY[0x24BDF3F50];
  v1[160] = MEMORY[0x242615198](MEMORY[0x24BDF3F50], v1[69], v1 + 162);
  v1[161] = MEMORY[0x24BDECC60];
  v174 = MEMORY[0x24BDED308];
  v175 = MEMORY[0x242615198](MEMORY[0x24BDED308], v1[71], v1 + 160);
  v176 = sub_23BEA1F94(&qword_256AE3920, &qword_256AE3910, MEMORY[0x24BDF43B0]);
  v1[158] = v175;
  v1[159] = v176;
  v177 = MEMORY[0x242615198](v172, v1[72], v1 + 158);
  v178 = sub_23BEA1F94(&qword_256AE3928, &qword_256AE3918, MEMORY[0x24BDF4700]);
  v1[156] = v177;
  v1[157] = v178;
  v179 = MEMORY[0x242615198](v172, v1[74], v1 + 156);
  v1[154] = v167;
  v1[155] = v179;
  v180 = MEMORY[0x242615198](v172, v1[75], v1 + 154);
  v181 = v1[66];
  *(_QWORD *)(v6 - 248) = v1[70];
  *(_QWORD *)(v6 - 240) = v181;
  v182 = swift_getOpaqueTypeConformance2();
  v183 = v1[64];
  *(_QWORD *)(v6 - 248) = v1[65];
  *(_QWORD *)(v6 - 240) = v183;
  v184 = swift_getOpaqueTypeConformance2();
  v1[152] = v182;
  v1[153] = v184;
  v185 = MEMORY[0x242615198](v172, v1[62], v1 + 152);
  v1[150] = v180;
  v1[151] = v185;
  v186 = MEMORY[0x242615198](v172, v1[63], v1 + 150);
  v187 = v1[60];
  *(_QWORD *)(v6 - 248) = v1[61];
  *(_QWORD *)(v6 - 240) = v187;
  v188 = swift_getOpaqueTypeConformance2();
  v189 = v1[58];
  *(_QWORD *)(v6 - 248) = v1[59];
  *(_QWORD *)(v6 - 240) = v189;
  v190 = swift_getOpaqueTypeConformance2();
  v1[148] = v188;
  v1[149] = v190;
  v191 = MEMORY[0x242615198](v172, v1[57], v1 + 148);
  v192 = v1[54];
  *(_QWORD *)(v6 - 248) = v1[56];
  *(_QWORD *)(v6 - 240) = v192;
  v1[146] = swift_getOpaqueTypeConformance2();
  v1[147] = v190;
  v193 = MEMORY[0x242615198](v172, v1[52], v1 + 146);
  v1[144] = v191;
  v1[145] = v193;
  v194 = MEMORY[0x242615198](v172, v1[53], v1 + 144);
  v1[142] = v186;
  v1[143] = v194;
  v195 = MEMORY[0x242615198](v172, v1[55], v1 + 142);
  v196 = v1[50];
  *(_QWORD *)(v6 - 248) = v1[51];
  *(_QWORD *)(v6 - 240) = v196;
  v197 = swift_getOpaqueTypeConformance2();
  v198 = v1[48];
  *(_QWORD *)(v6 - 248) = v1[49];
  *(_QWORD *)(v6 - 240) = v198;
  v199 = swift_getOpaqueTypeConformance2();
  v1[140] = v197;
  v1[141] = v199;
  v200 = MEMORY[0x242615198](v172, v1[47], v1 + 140);
  v201 = v1[45];
  *(_QWORD *)(v6 - 248) = v1[46];
  *(_QWORD *)(v6 - 240) = v201;
  v202 = swift_getOpaqueTypeConformance2();
  v203 = v1[43];
  *(_QWORD *)(v6 - 248) = v1[44];
  *(_QWORD *)(v6 - 240) = v203;
  v204 = swift_getOpaqueTypeConformance2();
  v1[138] = v202;
  v1[139] = v204;
  v205 = MEMORY[0x242615198](v172, v1[41], v1 + 138);
  v1[136] = v200;
  v1[137] = v205;
  v206 = MEMORY[0x242615198](v172, v1[42], v1 + 136);
  v207 = v1[39];
  *(_QWORD *)(v6 - 248) = v1[40];
  *(_QWORD *)(v6 - 240) = v207;
  v1[134] = swift_getOpaqueTypeConformance2();
  v1[135] = v1[82];
  v208 = MEMORY[0x242615198](v172, v1[38], v1 + 134);
  v209 = v1[34];
  *(_QWORD *)(v6 - 248) = v1[37];
  *(_QWORD *)(v6 - 240) = v209;
  v210 = swift_getOpaqueTypeConformance2();
  v1[132] = v208;
  v1[133] = v210;
  v211 = MEMORY[0x242615198](v172, v1[32], v1 + 132);
  v1[130] = v206;
  v1[131] = v211;
  v212 = MEMORY[0x242615198](v172, v1[33], v1 + 130);
  v1[128] = v195;
  v1[129] = v212;
  v1[127] = MEMORY[0x242615198](v172, v1[35], v1 + 128);
  v1[125] = MEMORY[0x242615198](v173, v1[36], v1 + 127);
  v1[126] = v97;
  v213 = MEMORY[0x242615198](v174, v99, v1 + 125);
  v1[123] = MEMORY[0x24BDF5138];
  v1[124] = v213;
  v214 = v172;
  v215 = v1[23];
  MEMORY[0x242615198](v214, v215, v1 + 123);
  v216 = v1[31];
  sub_23BEA5C0C(v216, v215, v1[25]);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1[22] + 8))(v216, v215);
}

void sub_23BEB0E60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD v84[323];
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t AssociatedTypeWitness;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;

  v20 = MEMORY[0x24BDAC7A8](a1);
  v84[121] = v21;
  v84[266] = v22;
  v84[265] = v23;
  v84[253] = v24;
  v84[252] = v25;
  v84[268] = v26;
  v84[269] = v27;
  v84[297] = v20;
  v84[279] = v28;
  v84[270] = 0;
  v95 = a20;
  v94 = a19;
  v84[285] = a17;
  v84[299] = a16;
  v93 = a15;
  v84[284] = a12;
  v84[298] = a11;
  v84[196] = a10;
  v84[195] = a9;
  v29 = type metadata accessor for WideBrickView(0, a13, a18, v25);
  v84[113] = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v84[112] = (char *)v84 - v30;
  v31 = MEMORY[0x242615198](&protocol conformance descriptor for WideBrickView<A>, v29);
  v91 = v29;
  v96 = v29;
  v90 = v31;
  v97 = v31;
  v32 = MEMORY[0x24BDF3948];
  v33 = MEMORY[0x24261512C](0, &v96, MEMORY[0x24BDF3948], 0);
  v84[111] = *(_QWORD *)(v33 - 8);
  v34 = MEMORY[0x24BDAC7A8](v33);
  v84[118] = (char *)v84 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = MEMORY[0x24BDAC7A8](v34);
  v84[109] = (char *)v84 - v37;
  v38 = MEMORY[0x24BDAC7A8](v36);
  v84[200] = (char *)v84 - v39;
  v40 = *(_QWORD *)(a14 - 8);
  v84[290] = a14;
  v84[93] = v40;
  v41 = MEMORY[0x24BDAC7A8](v38);
  v84[95] = (char *)v84 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v41);
  v84[190] = (char *)v84 - v43;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v84[189] = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v84[187] = (char *)v84 - v44;
  v46 = type metadata accessor for VerticalStackCard(255, a13, a18, v45);
  v47 = MEMORY[0x242615198](&unk_23C0000E0, v46);
  v96 = v46;
  v84[286] = v47;
  v97 = v47;
  v48 = MEMORY[0x24261512C](255, &v96, v32, 0);
  v49 = sub_23BFF8968();
  v84[194] = *(_QWORD *)(v49 - 8);
  MEMORY[0x24BDAC7A8](v49);
  v84[193] = (char *)v84 - v50;
  v84[288] = v51;
  v84[247] = v33;
  v52 = sub_23BFF8968();
  v84[244] = *(_QWORD *)(v52 - 8);
  MEMORY[0x24BDAC7A8](v52);
  v84[243] = (char *)v84 - v53;
  v89 = swift_checkMetadataState();
  v84[116] = *(_QWORD *)(v89 - 8);
  v54 = MEMORY[0x24BDAC7A8](v89);
  v84[114] = (char *)v84 - v55;
  v84[202] = v48;
  v84[117] = *(_QWORD *)(v48 - 8);
  v56 = MEMORY[0x24BDAC7A8](v54);
  v84[119] = (char *)v84 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = MEMORY[0x24BDAC7A8](v56);
  v84[115] = (char *)v84 - v59;
  MEMORY[0x24BDAC7A8](v58);
  v84[201] = (char *)v84 - v60;
  v62 = type metadata accessor for TallCardView(0, a13, a18, v61);
  v84[98] = *(_QWORD *)(v62 - 8);
  MEMORY[0x24BDAC7A8](v62);
  v84[97] = (char *)v84 - v63;
  v64 = MEMORY[0x242615198](&unk_23BFFF0E4, v62);
  v88 = v62;
  v96 = v62;
  v87 = v64;
  v97 = v64;
  v65 = MEMORY[0x24261512C](0, &v96, v32, 0);
  v84[96] = *(_QWORD *)(v65 - 8);
  v66 = MEMORY[0x24BDAC7A8](v65);
  v84[99] = (char *)v84 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = MEMORY[0x24BDAC7A8](v66);
  v84[94] = (char *)v84 - v69;
  MEMORY[0x24BDAC7A8](v68);
  v84[191] = (char *)v84 - v70;
  v72 = type metadata accessor for StandardVerticalStackView(255, a13, a18, v71);
  v73 = MEMORY[0x242615198](&unk_23C0073B8, v72);
  v96 = v72;
  v86 = v73;
  v97 = v73;
  v74 = MEMORY[0x24261512C](255, &v96, v32, 0);
  v84[241] = v65;
  v75 = sub_23BFF8968();
  v84[198] = *(_QWORD *)(v75 - 8);
  MEMORY[0x24BDAC7A8](v75);
  v84[197] = (char *)v84 - v76;
  v85 = swift_checkMetadataState();
  v84[102] = *(_QWORD *)(v85 - 8);
  v77 = MEMORY[0x24BDAC7A8](v85);
  v84[100] = (char *)v84 - v78;
  v84[240] = v74;
  v84[103] = *(_QWORD *)(v74 - 8);
  v79 = MEMORY[0x24BDAC7A8](v77);
  v84[104] = (char *)v84 - ((v80 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = MEMORY[0x24BDAC7A8](v79);
  v84[101] = (char *)v84 - v82;
  MEMORY[0x24BDAC7A8](v81);
  v84[192] = (char *)v84 - v83;
  v96 = a13;
  v97 = a15;
  v98 = a18;
  v99 = v95;
  type metadata accessor for StandardHorizontalStackView();
}

void sub_23BEB14A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;

  v9[108] = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9[107] = (char *)&a9 - v16;
  v17 = MEMORY[0x242615198](&unk_23C0008E8, a1);
  v9[322] = a1;
  v9[418] = a1;
  v9[321] = v17;
  v9[419] = v17;
  v18 = MEMORY[0x24261512C](0, v9 + 418, v12, 0);
  v9[106] = *(_QWORD *)(v18 - 8);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v9[110] = (char *)&a9 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x24BDAC7A8](v19);
  v9[105] = (char *)&a9 - v22;
  MEMORY[0x24BDAC7A8](v21);
  v9[199] = (char *)&a9 - v23;
  v25 = type metadata accessor for StandardCardView(255, v13, v14, v24);
  v26 = MEMORY[0x242615198](&unk_23C007BD0, v25);
  v9[418] = v25;
  v9[318] = v26;
  v9[419] = v26;
  v27 = MEMORY[0x24261512C](255, v9 + 418, v12, 0);
  v9[245] = v18;
  v28 = sub_23BFF8968();
  v9[204] = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v9[203] = (char *)&a9 - v29;
  v9[319] = v30;
  v9[325] = v11;
  v31 = sub_23BFF8968();
  v9[255] = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  v9[254] = (char *)&a9 - v32;
  v9[320] = v33;
  v9[329] = v10;
  v34 = sub_23BFF8968();
  v9[300] = v34;
  v9[259] = *(_QWORD *)(v34 - 8);
  MEMORY[0x24BDAC7A8](v34);
  v9[260] = (char *)&a9 - v35;
  v36 = swift_checkMetadataState();
  v9[317] = v36;
  v9[90] = *(_QWORD *)(v36 - 8);
  v37 = MEMORY[0x24BDAC7A8](v36);
  v9[88] = (char *)&a9 - v38;
  v9[242] = v27;
  v9[91] = *(_QWORD *)(v27 - 8);
  v39 = MEMORY[0x24BDAC7A8](v37);
  v9[92] = (char *)&a9 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = MEMORY[0x24BDAC7A8](v39);
  v9[89] = (char *)&a9 - v42;
  MEMORY[0x24BDAC7A8](v41);
  v9[185] = (char *)&a9 - v43;
  v45 = type metadata accessor for MonogramVerticalStackView(255, v13, v14, v44);
  v46 = MEMORY[0x242615198](&unk_23BFFA1F4, v45);
  v9[418] = v45;
  v9[316] = v46;
  v9[419] = v46;
  v47 = MEMORY[0x24261512C](255, v9 + 418, v12, 0);
  v49 = type metadata accessor for DynamicBrickView(255, v13, v14, v48);
  v50 = MEMORY[0x242615198](&protocol conformance descriptor for DynamicBrickView<A>, v49);
  v9[418] = v49;
  v9[314] = v50;
  v9[419] = v50;
  v51 = MEMORY[0x24261512C](255, v9 + 418, v12, 0);
  v52 = sub_23BFF8968();
  v9[184] = *(_QWORD *)(v52 - 8);
  MEMORY[0x24BDAC7A8](v52);
  v9[183] = (char *)&a9 - v53;
  v54 = swift_checkMetadataState();
  v9[313] = v54;
  v9[85] = *(_QWORD *)(v54 - 8);
  v55 = MEMORY[0x24BDAC7A8](v54);
  v9[83] = (char *)&a9 - v56;
  v9[239] = v47;
  v9[86] = *(_QWORD *)(v47 - 8);
  v57 = MEMORY[0x24BDAC7A8](v55);
  v9[87] = (char *)&a9 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = MEMORY[0x24BDAC7A8](v57);
  v9[84] = (char *)&a9 - v60;
  MEMORY[0x24BDAC7A8](v59);
  v9[180] = (char *)&a9 - v61;
  v62 = swift_checkMetadataState();
  v9[312] = v62;
  v9[172] = *(_QWORD *)(v62 - 8);
  v63 = MEMORY[0x24BDAC7A8](v62);
  v9[81] = (char *)&a9 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = MEMORY[0x24BDAC7A8](v63);
  v9[79] = (char *)&a9 - v66;
  v9[175] = *(_QWORD *)(v51 - 8);
  v67 = MEMORY[0x24BDAC7A8](v65);
  v9[82] = (char *)&a9 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = MEMORY[0x24BDAC7A8](v67);
  v9[176] = (char *)&a9 - v70;
  v71 = MEMORY[0x24BDAC7A8](v69);
  v9[177] = (char *)&a9 - v72;
  v73 = MEMORY[0x24BDAC7A8](v71);
  v9[78] = (char *)&a9 - v74;
  MEMORY[0x24BDAC7A8](v73);
  v9[174] = (char *)&a9 - v75;
  v77 = type metadata accessor for LargeBrickView(255, v13, v14, v76);
  v78 = MEMORY[0x242615198](&protocol conformance descriptor for LargeBrickView<A>, v77);
  v9[418] = v77;
  v9[310] = v78;
  v9[419] = v78;
  v79 = MEMORY[0x24261512C](255, v9 + 418, v12, 0);
  v9[258] = v51;
  v80 = sub_23BFF8968();
  v9[182] = *(_QWORD *)(v80 - 8);
  MEMORY[0x24BDAC7A8](v80);
  v9[181] = (char *)&a9 - v81;
  v9[311] = v82;
  v9[315] = v52;
  v83 = sub_23BFF8968();
  v9[346] = v83;
  v9[249] = *(_QWORD *)(v83 - 8);
  MEMORY[0x24BDAC7A8](v83);
  v9[248] = (char *)&a9 - v84;
  v85 = swift_checkMetadataState();
  v9[309] = v85;
  v9[75] = *(_QWORD *)(v85 - 8);
  v86 = MEMORY[0x24BDAC7A8](v85);
  v9[73] = (char *)&a9 - v87;
  v9[236] = v79;
  v9[76] = *(_QWORD *)(v79 - 8);
  v88 = MEMORY[0x24BDAC7A8](v86);
  v9[80] = (char *)&a9 - ((v89 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = MEMORY[0x24BDAC7A8](v88);
  v9[74] = (char *)&a9 - v91;
  MEMORY[0x24BDAC7A8](v90);
  v9[173] = (char *)&a9 - v92;
  v93 = v9[342];
  v94 = v9[348];
  v96 = type metadata accessor for InfoActionCardView(0, v93, v94, v95);
  v9[64] = *(_QWORD *)(v96 - 8);
  MEMORY[0x24BDAC7A8](v96);
  v9[63] = (char *)&a9 - v97;
  v98 = MEMORY[0x242615198](&unk_23C007F20, v96);
  v9[308] = v96;
  v9[418] = v96;
  v9[307] = v98;
  v9[419] = v98;
  v99 = MEMORY[0x24261512C](0, v9 + 418, v12, 0);
  v9[62] = *(_QWORD *)(v99 - 8);
  v100 = MEMORY[0x24BDAC7A8](v99);
  v9[65] = (char *)&a9 - ((v101 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = MEMORY[0x24BDAC7A8](v100);
  v9[61] = (char *)&a9 - v103;
  MEMORY[0x24BDAC7A8](v102);
  v9[169] = (char *)&a9 - v104;
  v9[418] = v13;
  v9[419] = v93;
  v9[420] = v93;
  v9[421] = v9[290];
  v9[422] = v9[284];
  v9[423] = v14;
  v9[424] = v94;
  v9[425] = v94;
  v9[426] = v9[347];
  v9[427] = v9[285];
  type metadata accessor for FullWidthStageView();
}

void sub_23BEB1CCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v17 = MEMORY[0x242615198](&unk_23C0077B8, a1);
  v9[418] = a1;
  v9[306] = v17;
  v9[419] = v17;
  v18 = MEMORY[0x24261512C](255, v9 + 418, v12, 0);
  v9[238] = v10;
  v19 = sub_23BFF8968();
  v9[345] = v19;
  v9[188] = *(_QWORD *)(v19 - 8);
  v20 = MEMORY[0x24BDAC7A8](v19);
  v9[186] = (char *)&a9 - v21;
  v9[67] = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v9[68] = (char *)&a9 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_23BFF96A0();
  MEMORY[0x24BDAC7A8](v23);
  v9[66] = (char *)&a9 - v24;
  v25 = swift_checkMetadataState();
  v9[305] = v25;
  v9[71] = *(_QWORD *)(v25 - 8);
  v26 = MEMORY[0x24BDAC7A8](v25);
  v9[69] = (char *)&a9 - v27;
  v9[237] = v18;
  v9[72] = *(_QWORD *)(v18 - 8);
  v28 = MEMORY[0x24BDAC7A8](v26);
  v9[77] = (char *)&a9 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = MEMORY[0x24BDAC7A8](v28);
  v9[70] = (char *)&a9 - v31;
  MEMORY[0x24BDAC7A8](v30);
  v9[171] = (char *)&a9 - v32;
  v33 = sub_23BFF96A0();
  v9[234] = v33;
  v9[170] = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v9[233] = (char *)&a9 - v34;
  v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3918);
  MEMORY[0x24BDAC7A8](v35);
  v9[8] = (char *)&a9 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_23BFF8368();
  v9[15] = v37;
  v9[13] = *(_QWORD *)(v37 - 8);
  MEMORY[0x24BDAC7A8](v37);
  v9[11] = (char *)&a9 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3910);
  v9[7] = *(_QWORD *)(v39 - 8);
  MEMORY[0x24BDAC7A8](v39);
  v9[6] = (char *)&a9 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = sub_23BFF82CC();
  v9[276] = v41;
  v9[289] = *(_QWORD *)(v41 - 8);
  MEMORY[0x24BDAC7A8](v41);
  v9[10] = (char *)&a9 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BFF8ADC();
  v43 = (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088];
  v44 = sub_23BFF862C();
  v45 = sub_23BFF862C();
  v46 = sub_23BEA1BB8((unint64_t *)&qword_256AE3908, v43, MEMORY[0x24BDF1078]);
  *(_QWORD *)(v15 - 144) = v14;
  *(_QWORD *)(v15 - 136) = v46;
  v47 = MEMORY[0x24BDED308];
  v48 = MEMORY[0x242615198](MEMORY[0x24BDED308], v44, v15 - 144);
  v49 = MEMORY[0x24BDEEC40];
  *(_QWORD *)(v15 - 160) = v48;
  *(_QWORD *)(v15 - 152) = v49;
  v50 = MEMORY[0x242615198](v47, v45, v15 - 160);
  v9[335] = v45;
  v9[418] = v45;
  v9[334] = v50;
  v9[419] = v50;
  v51 = MEMORY[0x24BDF3100];
  MEMORY[0x24261512C](255, v9 + 418, MEMORY[0x24BDF3100], 0);
  v52 = sub_23BFF862C();
  v53 = MEMORY[0x24BDEBEE0];
  *(_QWORD *)(v15 - 176) = v48;
  *(_QWORD *)(v15 - 168) = v53;
  v54 = MEMORY[0x242615198](v47, v52, v15 - 176);
  v9[333] = v52;
  v9[418] = v52;
  v9[337] = v54;
  v9[419] = v54;
  MEMORY[0x24261512C](255, v9 + 418, v51, 0);
  v9[336] = sub_23BFF8968();
  v55 = sub_23BFF8FD4();
  v56 = sub_23BFF862C();
  v9[16] = v39;
  v57 = sub_23BFF8968();
  v9[14] = *(_QWORD *)(v57 - 8);
  v58 = MEMORY[0x24BDAC7A8](v57);
  v9[12] = (char *)&a9 - v59;
  v9[338] = v55;
  v9[2] = *(_QWORD *)(v55 - 8);
  v60 = MEMORY[0x24BDAC7A8](v58);
  v9[1] = (char *)&a9 - v61;
  v9[339] = v56;
  v9[3] = *(_QWORD *)(v56 - 8);
  v62 = MEMORY[0x24BDAC7A8](v60);
  v9[4] = (char *)&a9 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v62);
  v9[5] = (char *)&a9 - v64;
  v9[332] = v65;
  v9[120] = v35;
  v66 = sub_23BFF8968();
  v9[60] = *(_QWORD *)(v66 - 8);
  v67 = MEMORY[0x24BDAC7A8](v66);
  v9[59] = (char *)&a9 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v67);
  v9[246] = (char *)&a9 - v69;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9[280] = AssociatedConformanceWitness;
  v73 = type metadata accessor for FullWidthItemDescriptor(0, AssociatedTypeWitness, AssociatedConformanceWitness, v72);
  v9[168] = v73;
  v9[167] = *(_QWORD *)(v73 - 8);
  v74 = MEMORY[0x24BDAC7A8](v73);
  v9[51] = (char *)&a9 - ((v75 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v74);
  v9[166] = (char *)&a9 - v76;
  v9[418] = v13;
  v77 = v9[342];
  v9[419] = v77;
  v9[420] = v77;
  v9[275] = v14;
  v9[421] = v14;
  v78 = v9[348];
  v9[422] = v78;
  v9[423] = v78;
  type metadata accessor for ActionCardView();
}

void sub_23BEB2330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t AssociatedTypeWitness;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t AssociatedConformanceWitness;
  uint64_t v255;
  uint64_t v256;

  v15 = MEMORY[0x242615198](&unk_23C005608, a1);
  v9[418] = a1;
  v9[302] = v15;
  v9[419] = v15;
  v16 = MEMORY[0x24261512C](255, v9 + 418, MEMORY[0x24BDF3948], 0);
  v9[287] = v11;
  v17 = sub_23BFF8968();
  v9[179] = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v9[178] = (char *)&a9 - v18;
  v9[303] = v19;
  v20 = sub_23BFF8968();
  v9[251] = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v9[250] = (char *)&a9 - v21;
  v9[304] = v22;
  v23 = sub_23BFF8968();
  v9[344] = v23;
  v9[262] = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v9[263] = (char *)&a9 - v24;
  v25 = sub_23BFF86B0();
  v9[274] = v25;
  v9[272] = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v9[273] = (char *)&a9 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_23BFF96A0();
  v28 = MEMORY[0x24BDAC7A8](v27);
  v9[158] = (char *)&a9 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = MEMORY[0x24BDAC7A8](v28);
  v9[256] = (char *)&a9 - v31;
  v9[53] = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v9[157] = (char *)&a9 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_23BFF82A8();
  v9[283] = v33;
  v9[281] = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v9[282] = (char *)&a9 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = swift_checkMetadataState();
  v9[301] = v35;
  v9[56] = *(_QWORD *)(v35 - 8);
  v36 = MEMORY[0x24BDAC7A8](v35);
  v9[54] = (char *)&a9 - v37;
  v9[235] = v16;
  v9[57] = *(_QWORD *)(v16 - 8);
  v38 = MEMORY[0x24BDAC7A8](v36);
  v9[58] = (char *)&a9 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = MEMORY[0x24BDAC7A8](v38);
  v9[55] = (char *)&a9 - v41;
  v42 = MEMORY[0x24BDAC7A8](v40);
  v9[165] = (char *)&a9 - v43;
  v9[296] = v13;
  v9[267] = *(_QWORD *)(v13 - 8);
  v44 = MEMORY[0x24BDAC7A8](v42);
  v9[138] = (char *)&a9 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = MEMORY[0x24BDAC7A8](v44);
  v9[148] = (char *)&a9 - v47;
  v48 = MEMORY[0x24BDAC7A8](v46);
  v9[162] = (char *)&a9 - v49;
  v50 = MEMORY[0x24BDAC7A8](v48);
  v9[50] = (char *)&a9 - v51;
  v52 = MEMORY[0x24BDAC7A8](v50);
  v9[156] = (char *)&a9 - v53;
  v54 = MEMORY[0x24BDAC7A8](v52);
  v9[147] = (char *)&a9 - v55;
  v56 = MEMORY[0x24BDAC7A8](v54);
  v9[161] = (char *)&a9 - v57;
  v58 = MEMORY[0x24BDAC7A8](v56);
  v9[154] = (char *)&a9 - v59;
  v60 = MEMORY[0x24BDAC7A8](v58);
  v9[164] = (char *)&a9 - v61;
  v62 = MEMORY[0x24BDAC7A8](v60);
  v9[145] = (char *)&a9 - v63;
  v64 = MEMORY[0x24BDAC7A8](v62);
  v9[160] = (char *)&a9 - v65;
  v66 = MEMORY[0x24BDAC7A8](v64);
  v9[136] = (char *)&a9 - v67;
  v68 = MEMORY[0x24BDAC7A8](v66);
  v9[132] = (char *)&a9 - v69;
  v70 = MEMORY[0x24BDAC7A8](v68);
  v9[133] = (char *)&a9 - v71;
  v72 = MEMORY[0x24BDAC7A8](v70);
  v9[141] = (char *)&a9 - v73;
  v74 = MEMORY[0x24BDAC7A8](v72);
  v9[150] = (char *)&a9 - v75;
  v76 = MEMORY[0x24BDAC7A8](v74);
  v9[152] = (char *)&a9 - v77;
  MEMORY[0x24BDAC7A8](v76);
  v9[163] = (char *)&a9 - v78;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v80 = sub_23BFF96A0();
  v9[264] = v80;
  v9[261] = *(_QWORD *)(v80 - 8);
  v81 = MEMORY[0x24BDAC7A8](v80);
  v9[232] = (char *)&a9 - ((v82 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = MEMORY[0x24BDAC7A8](v81);
  v9[221] = (char *)&a9 - v84;
  v85 = MEMORY[0x24BDAC7A8](v83);
  v9[231] = (char *)&a9 - v86;
  v87 = MEMORY[0x24BDAC7A8](v85);
  v9[230] = (char *)&a9 - v88;
  v89 = MEMORY[0x24BDAC7A8](v87);
  v9[52] = (char *)&a9 - v90;
  v91 = MEMORY[0x24BDAC7A8](v89);
  v9[229] = (char *)&a9 - v92;
  v9[228] = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v91);
  v9[227] = (char *)&a9 - v93;
  v94 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3618);
  v9[271] = v94;
  v95 = MEMORY[0x24BDAC7A8](v94);
  v9[30] = (char *)&a9 - ((v96 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = MEMORY[0x24BDAC7A8](v95);
  v9[48] = (char *)&a9 - v98;
  v99 = MEMORY[0x24BDAC7A8](v97);
  v9[218] = (char *)&a9 - v100;
  v101 = MEMORY[0x24BDAC7A8](v99);
  v9[151] = (char *)&a9 - v102;
  v103 = MEMORY[0x24BDAC7A8](v101);
  v9[34] = (char *)&a9 - v104;
  v105 = MEMORY[0x24BDAC7A8](v103);
  v9[31] = (char *)&a9 - v106;
  v107 = MEMORY[0x24BDAC7A8](v105);
  v9[49] = (char *)&a9 - v108;
  v109 = MEMORY[0x24BDAC7A8](v107);
  v9[223] = (char *)&a9 - v110;
  v111 = MEMORY[0x24BDAC7A8](v109);
  v9[222] = (char *)&a9 - v112;
  v113 = MEMORY[0x24BDAC7A8](v111);
  v9[155] = (char *)&a9 - v114;
  v115 = MEMORY[0x24BDAC7A8](v113);
  v9[47] = (char *)&a9 - v116;
  v117 = MEMORY[0x24BDAC7A8](v115);
  v9[144] = (char *)&a9 - v118;
  v119 = MEMORY[0x24BDAC7A8](v117);
  v9[33] = (char *)&a9 - v120;
  v121 = MEMORY[0x24BDAC7A8](v119);
  v9[29] = (char *)&a9 - v122;
  v123 = MEMORY[0x24BDAC7A8](v121);
  v9[46] = (char *)&a9 - v124;
  v125 = MEMORY[0x24BDAC7A8](v123);
  v9[220] = (char *)&a9 - v126;
  v127 = MEMORY[0x24BDAC7A8](v125);
  v9[219] = (char *)&a9 - v128;
  v129 = MEMORY[0x24BDAC7A8](v127);
  v9[153] = (char *)&a9 - v130;
  v131 = MEMORY[0x24BDAC7A8](v129);
  v9[35] = (char *)&a9 - v132;
  v133 = MEMORY[0x24BDAC7A8](v131);
  v9[32] = (char *)&a9 - v134;
  v135 = MEMORY[0x24BDAC7A8](v133);
  v9[27] = (char *)&a9 - v136;
  v137 = MEMORY[0x24BDAC7A8](v135);
  v9[45] = (char *)&a9 - v138;
  v139 = MEMORY[0x24BDAC7A8](v137);
  v9[226] = (char *)&a9 - v140;
  v141 = MEMORY[0x24BDAC7A8](v139);
  v9[225] = (char *)&a9 - v142;
  v143 = MEMORY[0x24BDAC7A8](v141);
  v9[224] = (char *)&a9 - v144;
  v145 = MEMORY[0x24BDAC7A8](v143);
  v9[159] = (char *)&a9 - v146;
  v147 = MEMORY[0x24BDAC7A8](v145);
  v9[28] = (char *)&a9 - v148;
  v149 = MEMORY[0x24BDAC7A8](v147);
  v9[26] = (char *)&a9 - v150;
  v151 = MEMORY[0x24BDAC7A8](v149);
  v9[44] = (char *)&a9 - v152;
  v153 = MEMORY[0x24BDAC7A8](v151);
  v9[217] = (char *)&a9 - v154;
  v155 = MEMORY[0x24BDAC7A8](v153);
  v9[216] = (char *)&a9 - v156;
  v157 = MEMORY[0x24BDAC7A8](v155);
  v9[149] = (char *)&a9 - v158;
  v159 = MEMORY[0x24BDAC7A8](v157);
  v9[23] = (char *)&a9 - v160;
  v161 = MEMORY[0x24BDAC7A8](v159);
  v9[43] = (char *)&a9 - v162;
  v163 = MEMORY[0x24BDAC7A8](v161);
  v9[211] = (char *)&a9 - v164;
  v165 = MEMORY[0x24BDAC7A8](v163);
  v9[140] = (char *)&a9 - v166;
  v167 = MEMORY[0x24BDAC7A8](v165);
  v9[21] = (char *)&a9 - v168;
  v169 = MEMORY[0x24BDAC7A8](v167);
  v9[42] = (char *)&a9 - v170;
  v171 = MEMORY[0x24BDAC7A8](v169);
  v9[208] = (char *)&a9 - v172;
  v173 = MEMORY[0x24BDAC7A8](v171);
  v9[137] = (char *)&a9 - v174;
  v175 = MEMORY[0x24BDAC7A8](v173);
  v9[20] = (char *)&a9 - v176;
  v177 = MEMORY[0x24BDAC7A8](v175);
  v9[40] = (char *)&a9 - v178;
  v179 = MEMORY[0x24BDAC7A8](v177);
  v9[206] = (char *)&a9 - v180;
  v181 = MEMORY[0x24BDAC7A8](v179);
  v9[134] = (char *)&a9 - v182;
  v183 = MEMORY[0x24BDAC7A8](v181);
  v9[24] = (char *)&a9 - v184;
  v185 = MEMORY[0x24BDAC7A8](v183);
  v9[18] = (char *)&a9 - v186;
  v187 = MEMORY[0x24BDAC7A8](v185);
  v9[38] = (char *)&a9 - v188;
  v189 = MEMORY[0x24BDAC7A8](v187);
  v9[210] = (char *)&a9 - v190;
  v191 = MEMORY[0x24BDAC7A8](v189);
  v9[209] = (char *)&a9 - v192;
  v193 = MEMORY[0x24BDAC7A8](v191);
  v9[139] = (char *)&a9 - v194;
  v195 = MEMORY[0x24BDAC7A8](v193);
  v9[41] = (char *)&a9 - v196;
  v197 = MEMORY[0x24BDAC7A8](v195);
  v9[36] = (char *)&a9 - v198;
  v199 = MEMORY[0x24BDAC7A8](v197);
  v9[205] = (char *)&a9 - v200;
  v201 = MEMORY[0x24BDAC7A8](v199);
  v9[130] = (char *)&a9 - v202;
  v203 = MEMORY[0x24BDAC7A8](v201);
  v9[25] = (char *)&a9 - v204;
  v205 = MEMORY[0x24BDAC7A8](v203);
  v9[19] = (char *)&a9 - v206;
  v207 = MEMORY[0x24BDAC7A8](v205);
  v9[39] = (char *)&a9 - v208;
  v209 = MEMORY[0x24BDAC7A8](v207);
  v9[215] = (char *)&a9 - v210;
  v211 = MEMORY[0x24BDAC7A8](v209);
  v9[214] = (char *)&a9 - v212;
  v213 = MEMORY[0x24BDAC7A8](v211);
  v9[146] = (char *)&a9 - v214;
  v215 = MEMORY[0x24BDAC7A8](v213);
  v9[9] = (char *)&a9 - v216;
  v217 = MEMORY[0x24BDAC7A8](v215);
  v218 = MEMORY[0x24BDAC7A8](v217);
  v9[22] = (char *)&a9 - v219;
  v220 = MEMORY[0x24BDAC7A8](v218);
  v9[17] = (char *)&a9 - v221;
  v222 = MEMORY[0x24BDAC7A8](v220);
  v9[37] = (char *)&a9 - v223;
  v224 = MEMORY[0x24BDAC7A8](v222);
  v9[213] = (char *)&a9 - v225;
  v226 = MEMORY[0x24BDAC7A8](v224);
  v9[212] = (char *)&a9 - v227;
  v228 = MEMORY[0x24BDAC7A8](v226);
  v9[143] = (char *)&a9 - v229;
  v9[292] = *(_QWORD *)(v10 - 8);
  v230 = MEMORY[0x24BDAC7A8](v228);
  v9[124] = (char *)&a9 - ((v231 + 15) & 0xFFFFFFFFFFFFFFF0);
  v232 = MEMORY[0x24BDAC7A8](v230);
  v9[131] = (char *)&a9 - v233;
  v234 = MEMORY[0x24BDAC7A8](v232);
  v9[122] = (char *)&a9 - v235;
  v236 = MEMORY[0x24BDAC7A8](v234);
  v9[129] = (char *)&a9 - v237;
  v238 = MEMORY[0x24BDAC7A8](v236);
  v9[142] = (char *)&a9 - v239;
  v240 = MEMORY[0x24BDAC7A8](v238);
  v9[128] = (char *)&a9 - v241;
  v242 = MEMORY[0x24BDAC7A8](v240);
  v9[126] = (char *)&a9 - v243;
  v244 = MEMORY[0x24BDAC7A8](v242);
  v9[125] = (char *)&a9 - v245;
  v246 = MEMORY[0x24BDAC7A8](v244);
  v9[123] = (char *)&a9 - v247;
  v248 = MEMORY[0x24BDAC7A8](v246);
  v9[127] = (char *)&a9 - v249;
  v250 = MEMORY[0x24BDAC7A8](v248);
  v9[207] = (char *)&a9 - v251;
  v252 = MEMORY[0x24BDAC7A8](v250);
  MEMORY[0x24BDAC7A8](v252);
  v9[135] = (char *)&a9 - v253;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v255 = v9[340];
  v256 = swift_getAssociatedConformanceWitness();
  v9[257] = AssociatedTypeWitness;
  v9[418] = AssociatedTypeWitness;
  v9[294] = v10;
  v9[419] = v10;
  v9[420] = v255;
  v9[421] = AssociatedConformanceWitness;
  v9[422] = v9[280];
  v9[423] = v256;
  type metadata accessor for CanvasItemContent();
}

uint64_t sub_23BEB3460(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int EnumCaseMultiPayload;

  MEMORY[0x24BDAC7A8](a1);
  v12 = sub_23BFF8968();
  v9[278] = v12;
  v9[277] = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v9[280] = (char *)&a9 - v13;
  (*(void (**)(uint64_t, uint64_t))(v11 + 160))(v10, v11);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)(void))((char *)sub_23BEB3510 + 4 * word_23BFFA900[EnumCaseMultiPayload]))();
}

void sub_23BEB3510(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *TupleTypeMetadata;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t);
  uint64_t (*v49)(uint64_t, _QWORD);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[11];
  uint64_t v58;
  uint64_t v59;

  *(_QWORD *)(v1 + 3584) = *(_QWORD *)(v2 + 240);
  v3 = *(_OWORD *)(v2 + 208);
  *(_OWORD *)(v1 + 3536) = *(_OWORD *)(v2 + 192);
  *(_OWORD *)(v1 + 3552) = v3;
  *(_OWORD *)(v1 + 3568) = *(_OWORD *)(v2 + 224);
  v4 = *(_OWORD *)(v2 + 144);
  *(_OWORD *)(v1 + 3472) = *(_OWORD *)(v2 + 128);
  *(_OWORD *)(v1 + 3488) = v4;
  v5 = *(_OWORD *)(v2 + 176);
  *(_OWORD *)(v1 + 3504) = *(_OWORD *)(v2 + 160);
  *(_OWORD *)(v1 + 3520) = v5;
  v6 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(v1 + 3408) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(v1 + 3424) = v6;
  v7 = *(_OWORD *)(v2 + 112);
  *(_OWORD *)(v1 + 3440) = *(_OWORD *)(v2 + 96);
  *(_OWORD *)(v1 + 3456) = v7;
  v8 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v1 + 3344) = *(_OWORD *)v2;
  *(_OWORD *)(v1 + 3360) = v8;
  v9 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v1 + 3376) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v1 + 3392) = v9;
  MEMORY[0x24BDAC7A8](a1);
  strcpy((char *)v57, "layout artwork style title subtitle caption primaryActionButton secondaryActionButton ");
  *(_QWORD *)(v1 + 3088) = &type metadata for ActionCardViewLayout;
  v10 = *(_QWORD *)(v1 + 2352);
  *(_QWORD *)(v1 + 3096) = v10;
  *(_QWORD *)(v1 + 3104) = &type metadata for ActionCardViewStyle;
  v11 = *(_QWORD *)(v1 + 2168);
  *(_QWORD *)(v1 + 3112) = v11;
  *(_QWORD *)(v1 + 3120) = v11;
  *(_QWORD *)(v1 + 3128) = v11;
  v12 = *(_QWORD *)(v1 + 2056);
  *(_QWORD *)(v1 + 3136) = v12;
  *(_QWORD *)(v1 + 3144) = *(_QWORD *)(v1 + 2112);
  TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  v14 = TupleTypeMetadata[12];
  *(_DWORD *)(v1 + 2720) = *(unsigned __int8 *)(v2 + TupleTypeMetadata[16]);
  v15 = v2 + v14;
  v16 = v2 + TupleTypeMetadata[20];
  v17 = v2 + TupleTypeMetadata[24];
  v18 = v2 + TupleTypeMetadata[28];
  v19 = v2 + TupleTypeMetadata[32];
  v20 = v2 + TupleTypeMetadata[36];
  v21 = *(_QWORD *)(v1 + 1080);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 + 2336) + 32))(v21, v15, v10);
  v22 = *(_QWORD *)(v1 + 1144);
  sub_23BEBEF90(v16, v22);
  sub_23BEBEF90(v17, *(_QWORD *)(v1 + 1696));
  sub_23BEBEF90(v18, *(_QWORD *)(v1 + 1704));
  (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v1 + 1824) + 32))(*(_QWORD *)(v1 + 1816), v19, v12);
  (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v1 + 2088) + 32))(*(_QWORD *)(v1 + 1832), v20, *(_QWORD *)(v1 + 2112));
  v23 = *(_QWORD *)(v1 + 1304);
  (*(void (**)(uint64_t))(v1 + 2152))(v21);
  v24 = *(_OWORD *)(v1 + 3552);
  *(_OWORD *)(v1 + 3280) = *(_OWORD *)(v1 + 3536);
  *(_OWORD *)(v1 + 3296) = v24;
  *(_OWORD *)(v1 + 3312) = *(_OWORD *)(v1 + 3568);
  *(_QWORD *)(v1 + 3328) = *(_QWORD *)(v1 + 3584);
  v25 = *(_OWORD *)(v1 + 3488);
  *(_OWORD *)(v1 + 3216) = *(_OWORD *)(v1 + 3472);
  *(_OWORD *)(v1 + 3232) = v25;
  v26 = *(_OWORD *)(v1 + 3520);
  *(_OWORD *)(v1 + 3248) = *(_OWORD *)(v1 + 3504);
  *(_OWORD *)(v1 + 3264) = v26;
  v27 = *(_OWORD *)(v1 + 3424);
  *(_OWORD *)(v1 + 3152) = *(_OWORD *)(v1 + 3408);
  *(_OWORD *)(v1 + 3168) = v27;
  v28 = *(_OWORD *)(v1 + 3456);
  *(_OWORD *)(v1 + 3184) = *(_OWORD *)(v1 + 3440);
  *(_OWORD *)(v1 + 3200) = v28;
  v29 = *(_OWORD *)(v1 + 3360);
  *(_OWORD *)(v1 + 3088) = *(_OWORD *)(v1 + 3344);
  *(_OWORD *)(v1 + 3104) = v29;
  v30 = *(_OWORD *)(v1 + 3392);
  *(_OWORD *)(v1 + 3120) = *(_OWORD *)(v1 + 3376);
  *(_OWORD *)(v1 + 3136) = v30;
  *(_BYTE *)(v1 + 4327) = *(_DWORD *)(v1 + 2720);
  (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v1 + 2136) + 16))(*(_QWORD *)(v1 + 1216), v23, *(_QWORD *)(v1 + 2368));
  v31 = *(_QWORD *)(v1 + 296);
  sub_23BE9F190(v22, v31, &qword_256AE3618);
  v32 = *(_QWORD *)(v1 + 2312);
  v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48);
  v34 = *(_QWORD *)(v1 + 2208);
  if (v33(v31, 1, v34) == 1)
  {
    sub_23BE9F3A0(v31, &qword_256AE3618);
    *(_QWORD *)(v1 + 2168) = 0;
    *(_QWORD *)(v1 + 2152) = 0;
    *(_QWORD *)(v1 + 2144) = 0;
    *(_QWORD *)(v1 + 2080) = 0;
    v35 = v1 + 3344;
  }
  else
  {
    *(_OWORD *)(v1 + 6848) = xmmword_23BFFA8F0;
    *(_BYTE *)(v1 + 6864) = 0;
    *(_QWORD *)(v1 + 6872) = MEMORY[0x24BEE4AF8];
    v36 = *(_QWORD *)(v1 + 2256);
    v37 = sub_23BFF82B4();
    MEMORY[0x24BDAC7A8](v37);
    v57[10] = v1 + 6848;
    v58 = v31;
    sub_23BFE8248((void (*)(char *))sub_23BEBF120, (uint64_t)&v57[8]);
    v35 = v1 + 3344;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 + 2248) + 8))(v36, *(_QWORD *)(v1 + 2264));
    *(_QWORD *)(v1 + 2168) = *(_QWORD *)(v1 + 6848);
    *(_QWORD *)(v1 + 2152) = *(_QWORD *)(v1 + 6856);
    *(_QWORD *)(v1 + 2144) = *(unsigned __int8 *)(v1 + 6864);
    *(_QWORD *)(v1 + 2080) = *(_QWORD *)(v1 + 6872);
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v34);
  }
  v38 = *(_QWORD *)(v1 + 136);
  sub_23BE9F190(*(_QWORD *)(v1 + 1696), v38, &qword_256AE3618);
  if (v33(v38, 1, v34) == 1)
  {
    sub_23BE9F3A0(v38, &qword_256AE3618);
    *(_QWORD *)(v1 + 2032) = 0;
    *(_QWORD *)(v1 + 2160) = 0;
    *(_QWORD *)(v1 + 2072) = 0;
    *(_QWORD *)(v1 + 2064) = 0;
  }
  else
  {
    *(_OWORD *)(v35 + 3504) = xmmword_23BFFA8F0;
    *(_BYTE *)(v35 + 3520) = 0;
    *(_QWORD *)(v1 + 6872) = MEMORY[0x24BEE4AF8];
    v39 = *(_QWORD *)(v1 + 2256);
    v40 = sub_23BFF82B4();
    MEMORY[0x24BDAC7A8](v40);
    v57[10] = v1 + 6848;
    v58 = v38;
    sub_23BFE8248((void (*)(char *))sub_23BEBF120, (uint64_t)&v57[8]);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 + 2248) + 8))(v39, *(_QWORD *)(v1 + 2264));
    *(_QWORD *)(v1 + 2032) = *(_QWORD *)(v1 + 6848);
    *(_QWORD *)(v1 + 2160) = *(_QWORD *)(v1 + 6856);
    *(_QWORD *)(v1 + 2072) = *(unsigned __int8 *)(v35 + 3520);
    *(_QWORD *)(v1 + 2064) = *(_QWORD *)(v1 + 6872);
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v38, v34);
  }
  v41 = *(_QWORD *)(v1 + 176);
  sub_23BE9F190(*(_QWORD *)(v1 + 1704), v41, &qword_256AE3618);
  if (v33(v41, 1, v34) == 1)
  {
    sub_23BE9F3A0(v41, &qword_256AE3618);
    *(_QWORD *)(v1 + 2264) = 0;
    *(_QWORD *)(v1 + 2256) = 0;
    *(_QWORD *)(v1 + 2248) = 0;
    *(_QWORD *)(v1 + 2040) = 0;
  }
  else
  {
    *(_OWORD *)(v35 + 3504) = xmmword_23BFFA8F0;
    *(_BYTE *)(v35 + 3520) = 0;
    *(_QWORD *)(v1 + 6872) = MEMORY[0x24BEE4AF8];
    v42 = *(_QWORD *)(v1 + 2256);
    v43 = sub_23BFF82B4();
    MEMORY[0x24BDAC7A8](v43);
    v57[10] = v1 + 6848;
    v58 = v41;
    sub_23BFE8248((void (*)(char *))sub_23BEBF120, (uint64_t)&v57[8]);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 + 2248) + 8))(v42, *(_QWORD *)(v1 + 2264));
    *(_QWORD *)(v1 + 2264) = *(_QWORD *)(v1 + 6848);
    *(_QWORD *)(v1 + 2256) = *(_QWORD *)(v1 + 6856);
    *(_QWORD *)(v1 + 2248) = *(unsigned __int8 *)(v35 + 3520);
    *(_QWORD *)(v1 + 2040) = *(_QWORD *)(v1 + 6872);
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v41, v34);
  }
  v44 = *(_QWORD *)(v1 + 1824);
  v45 = *(_QWORD *)(v1 + 416);
  v46 = *(_QWORD *)(v1 + 2056);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v44 + 16))(v45, *(_QWORD *)(v1 + 1816), v46);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v44 + 56))(v45, 0, 1, v46);
  v47 = *(_QWORD *)(v1 + 2024);
  v48 = *(void (**)(uint64_t))(v1 + 2016);
  v48(v45);
  v49 = *(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 + 2088) + 8);
  *(_QWORD *)(v1 + 2720) = v49;
  v50 = v49(v45, *(_QWORD *)(v1 + 2112));
  *(_QWORD *)(v1 + 2312) = &v59;
  MEMORY[0x24BDAC7A8](v50);
  v51 = *(_QWORD *)(v1 + 2272);
  v57[0] = *(_QWORD *)(v1 + 2384);
  v57[1] = v51;
  v52 = *(_QWORD *)(v1 + 2320);
  v57[2] = *(_QWORD *)(v1 + 2368);
  v57[3] = v52;
  v53 = *(_QWORD *)(v1 + 2392);
  v57[4] = *(_QWORD *)(v1 + 2736);
  v57[5] = v53;
  v54 = *(_QWORD *)(v1 + 2200);
  v57[6] = *(_QWORD *)(v1 + 2280);
  v57[7] = v54;
  v55 = *(_QWORD *)(v1 + 2784);
  v57[8] = *(_QWORD *)(v1 + 2776);
  v57[9] = v55;
  v57[10] = v48;
  v58 = v47;
  sub_23BEAA814((void (*)(char *))sub_23BEBEFF0, (uint64_t)&v56, *(_QWORD *)(v1 + 1832), v57[4], v46, *(_QWORD *)(v1 + 2048));
  swift_retain();
  sub_23BF940A4();
}

uint64_t sub_23BEB9880()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t OpaqueTypeConformance2;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;

  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 184))(v3, v1);
  v5 = *(_QWORD *)(v0 + 2184);
  sub_23BF82AF8(v4);
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(v0 + 440);
  v7 = *(_QWORD *)(v0 + 2408);
  v8 = *(_QWORD *)(v0 + 2416);
  sub_23BFF8F38();
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 2176) + 8))(v5, *(_QWORD *)(v0 + 2192));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 448) + 8))(v2, v7);
  *(_QWORD *)(v0 + 3088) = v7;
  *(_QWORD *)(v0 + 3096) = v8;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v10 = *(_QWORD *)(v0 + 1320);
  v11 = *(_QWORD *)(v0 + 1880);
  sub_23BEA72EC(v6, v11, v10);
  v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 456) + 8);
  v12(v6, v11);
  v13 = v12;
  *(_QWORD *)(v0 + 2784) = v12;
  v14 = *(_QWORD *)(v0 + 464);
  sub_23BEA5C0C(v10, v11, v14);
  *(_QWORD *)(v0 + 3088) = *(_QWORD *)(v0 + 2680);
  *(_QWORD *)(v0 + 3096) = *(_QWORD *)(v0 + 2672);
  v15 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v0 + 3088) = *(_QWORD *)(v0 + 2664);
  *(_QWORD *)(v0 + 3096) = *(_QWORD *)(v0 + 2696);
  v16 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v0 + 3072) = v15;
  *(_QWORD *)(v0 + 3080) = v16;
  v17 = MEMORY[0x24BDEF3E0];
  *(_QWORD *)(v0 + 3064) = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], *(_QWORD *)(v0 + 2688), v0 + 3072);
  *(_QWORD *)(v0 + 3048) = MEMORY[0x242615198](MEMORY[0x24BDF3F50], *(_QWORD *)(v0 + 2704), v0 + 3064);
  *(_QWORD *)(v0 + 3056) = MEMORY[0x24BDECC60];
  v18 = MEMORY[0x242615198](MEMORY[0x24BDED308], *(_QWORD *)(v0 + 2712), v0 + 3048);
  v19 = sub_23BEA1F94(&qword_256AE3920, &qword_256AE3910, MEMORY[0x24BDF43B0]);
  *(_QWORD *)(v0 + 3032) = v18;
  *(_QWORD *)(v0 + 3040) = v19;
  v20 = MEMORY[0x242615198](v17, *(_QWORD *)(v0 + 2656), v0 + 3032);
  v21 = sub_23BEA1F94(&qword_256AE3928, &qword_256AE3918, MEMORY[0x24BDF4700]);
  *(_QWORD *)(v0 + 3016) = v20;
  *(_QWORD *)(v0 + 3024) = v21;
  v22 = MEMORY[0x242615198](v17, *(_QWORD *)(v0 + 2296), v0 + 3016);
  v23 = *(_QWORD *)(v0 + 1424);
  sub_23BEA5C24(v14, v11);
  v13(v14, v11);
  *(_QWORD *)(v0 + 3000) = OpaqueTypeConformance2;
  *(_QWORD *)(v0 + 3008) = v22;
  v24 = *(_QWORD *)(v0 + 2424);
  v25 = MEMORY[0x242615198](v17, v24, v0 + 3000);
  *(_QWORD *)(v0 + 3088) = *(_QWORD *)(v0 + 2440);
  *(_QWORD *)(v0 + 3096) = *(_QWORD *)(v0 + 2448);
  v26 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v0 + 3088) = *(_QWORD *)(v0 + 2464);
  *(_QWORD *)(v0 + 3096) = *(_QWORD *)(v0 + 2456);
  v27 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v0 + 2984) = v26;
  *(_QWORD *)(v0 + 2992) = v27;
  v28 = MEMORY[0x242615198](v17, *(_QWORD *)(v0 + 2760), v0 + 2984);
  v29 = *(_QWORD *)(v0 + 2000);
  sub_23BEA5C24(v23, v24);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 1432) + 8))(v23, v24);
  *(_QWORD *)(v0 + 2968) = v25;
  *(_QWORD *)(v0 + 2976) = v28;
  v30 = *(_QWORD *)(v0 + 2432);
  v31 = MEMORY[0x242615198](v17, v30, v0 + 2968);
  *(_QWORD *)(v0 + 3088) = *(_QWORD *)(v0 + 2472);
  *(_QWORD *)(v0 + 3096) = *(_QWORD *)(v0 + 2480);
  v32 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v0 + 3088) = *(_QWORD *)(v0 + 2496);
  *(_QWORD *)(v0 + 3096) = *(_QWORD *)(v0 + 2512);
  v33 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v0 + 2952) = v32;
  *(_QWORD *)(v0 + 2960) = v33;
  v34 = MEMORY[0x242615198](v17, *(_QWORD *)(v0 + 2488), v0 + 2952);
  *(_QWORD *)(v0 + 3088) = *(_QWORD *)(v0 + 2504);
  *(_QWORD *)(v0 + 3096) = *(_QWORD *)(v0 + 2528);
  *(_QWORD *)(v0 + 2936) = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v0 + 2944) = v33;
  v35 = MEMORY[0x242615198](v17, *(_QWORD *)(v0 + 2520), v0 + 2936);
  *(_QWORD *)(v0 + 2920) = v34;
  *(_QWORD *)(v0 + 2928) = v35;
  v36 = MEMORY[0x242615198](v17, *(_QWORD *)(v0 + 2768), v0 + 2920);
  v37 = *(_QWORD *)(v0 + 2104);
  sub_23BEA5C24(v29, v30);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 2008) + 8))(v29, v30);
  *(_QWORD *)(v0 + 2904) = v31;
  *(_QWORD *)(v0 + 2912) = v36;
  v38 = *(_QWORD *)(v0 + 2752);
  MEMORY[0x242615198](v17, v38, v0 + 2904);
  *(_QWORD *)(v0 + 3088) = *(_QWORD *)(v0 + 2536);
  *(_QWORD *)(v0 + 3096) = *(_QWORD *)(v0 + 2544);
  v39 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v0 + 3088) = *(_QWORD *)(v0 + 2576);
  *(_QWORD *)(v0 + 3096) = *(_QWORD *)(v0 + 2568);
  v40 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v0 + 2888) = v39;
  *(_QWORD *)(v0 + 2896) = v40;
  v41 = MEMORY[0x242615198](v17, *(_QWORD *)(v0 + 2552), v0 + 2888);
  *(_QWORD *)(v0 + 3088) = *(_QWORD *)(v0 + 2584);
  *(_QWORD *)(v0 + 3096) = *(_QWORD *)(v0 + 2592);
  v42 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v0 + 3088) = *(_QWORD *)(v0 + 2616);
  *(_QWORD *)(v0 + 3096) = *(_QWORD *)(v0 + 2608);
  v43 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v0 + 2872) = v42;
  *(_QWORD *)(v0 + 2880) = v43;
  v44 = MEMORY[0x242615198](v17, *(_QWORD *)(v0 + 2600), v0 + 2872);
  *(_QWORD *)(v0 + 2856) = v41;
  *(_QWORD *)(v0 + 2864) = v44;
  v45 = MEMORY[0x242615198](v17, *(_QWORD *)(v0 + 2560), v0 + 2856);
  *(_QWORD *)(v0 + 3088) = *(_QWORD *)(v0 + 2624);
  v46 = *(_QWORD *)(v0 + 2288);
  *(_QWORD *)(v0 + 3096) = v46;
  *(_QWORD *)(v0 + 2840) = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v0 + 2848) = *(_QWORD *)(v0 + 2776);
  v47 = *(_QWORD *)(v0 + 2304);
  v48 = MEMORY[0x242615198](v17, v47, v0 + 2840);
  *(_QWORD *)(v0 + 3088) = *(_QWORD *)(v0 + 2648);
  *(_QWORD *)(v0 + 3096) = *(_QWORD *)(v0 + 2640);
  v49 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v0 + 2824) = v48;
  v50 = *(_QWORD *)(v0 + 2296);
  *(_QWORD *)(v0 + 2832) = v49;
  v51 = MEMORY[0x242615198](v17, *(_QWORD *)(v0 + 2632), v0 + 2824);
  *(_QWORD *)(v0 + 2808) = v45;
  *(_QWORD *)(v0 + 2816) = v51;
  v52 = v17;
  v53 = *(_QWORD *)(v0 + 2400);
  MEMORY[0x242615198](v52, v53, v0 + 2808);
  v54 = *(_QWORD *)(v0 + 2240);
  sub_23BEA5C24(v37, v38);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 2096) + 8))(v37, v38);
  (*(void (**)(_QWORD, _QWORD))(v0 + 2784))(*(_QWORD *)(v0 + 1320), *(_QWORD *)(v0 + 1880));
  v55 = v46;
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 2136) + 8))(*(_QWORD *)(v0 + 1304), *(_QWORD *)(v0 + 2368));
  (*(void (**)(_QWORD, _QWORD))(v0 + 2720))(*(_QWORD *)(v0 + 1832), *(_QWORD *)(v0 + 2112));
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1824) + 8))(*(_QWORD *)(v0 + 1816), *(_QWORD *)(v0 + 2056));
  sub_23BE9F3A0(*(_QWORD *)(v0 + 1704), &qword_256AE3618);
  sub_23BE9F3A0(*(_QWORD *)(v0 + 1696), &qword_256AE3618);
  sub_23BE9F3A0(*(_QWORD *)(v0 + 1144), &qword_256AE3618);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 2336) + 8))(*(_QWORD *)(v0 + 1080), *(_QWORD *)(v0 + 2352));
  *(_QWORD *)(v0 + 3344) = *(_QWORD *)(v0 + 2408);
  *(_QWORD *)(v0 + 3352) = *(_QWORD *)(v0 + 2416);
  v56 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v0 + 3344) = *(_QWORD *)(v0 + 2680);
  *(_QWORD *)(v0 + 3352) = *(_QWORD *)(v0 + 2672);
  v57 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v0 + 3344) = *(_QWORD *)(v0 + 2664);
  *(_QWORD *)(v0 + 3352) = *(_QWORD *)(v0 + 2696);
  v58 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v0 + 7736) = v57;
  *(_QWORD *)(v0 + 7744) = v58;
  v59 = MEMORY[0x24BDEF3E0];
  *(_QWORD *)(v0 + 7728) = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], *(_QWORD *)(v0 + 2688), v0 + 7736);
  *(_QWORD *)(v0 + 7712) = MEMORY[0x242615198](MEMORY[0x24BDF3F50], *(_QWORD *)(v0 + 2704), v0 + 7728);
  *(_QWORD *)(v0 + 7720) = MEMORY[0x24BDECC60];
  v60 = MEMORY[0x242615198](MEMORY[0x24BDED308], *(_QWORD *)(v0 + 2712), v0 + 7712);
  v61 = sub_23BEA1F94(&qword_256AE3920, &qword_256AE3910, MEMORY[0x24BDF43B0]);
  *(_QWORD *)(v0 + 7696) = v60;
  *(_QWORD *)(v0 + 7704) = v61;
  v62 = MEMORY[0x242615198](v59, *(_QWORD *)(v0 + 2656), v0 + 7696);
  v63 = sub_23BEA1F94(&qword_256AE3928, &qword_256AE3918, MEMORY[0x24BDF4700]);
  *(_QWORD *)(v0 + 7680) = v62;
  *(_QWORD *)(v0 + 7688) = v63;
  v64 = MEMORY[0x242615198](v59, v50, v0 + 7680);
  *(_QWORD *)(v0 + 7664) = v56;
  *(_QWORD *)(v0 + 7672) = v64;
  v65 = MEMORY[0x242615198](v59, *(_QWORD *)(v0 + 2424), v0 + 7664);
  *(_QWORD *)(v0 + 3344) = *(_QWORD *)(v0 + 2440);
  *(_QWORD *)(v0 + 3352) = *(_QWORD *)(v0 + 2448);
  v66 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v0 + 3344) = *(_QWORD *)(v0 + 2464);
  *(_QWORD *)(v0 + 3352) = *(_QWORD *)(v0 + 2456);
  v67 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v0 + 7648) = v66;
  *(_QWORD *)(v0 + 7656) = v67;
  v68 = MEMORY[0x242615198](v59, *(_QWORD *)(v0 + 2760), v0 + 7648);
  *(_QWORD *)(v0 + 7632) = v65;
  *(_QWORD *)(v0 + 7640) = v68;
  v69 = MEMORY[0x242615198](v59, *(_QWORD *)(v0 + 2432), v0 + 7632);
  *(_QWORD *)(v0 + 3344) = *(_QWORD *)(v0 + 2472);
  *(_QWORD *)(v0 + 3352) = *(_QWORD *)(v0 + 2480);
  v70 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v0 + 3344) = *(_QWORD *)(v0 + 2496);
  *(_QWORD *)(v0 + 3352) = *(_QWORD *)(v0 + 2512);
  v71 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v0 + 7616) = v70;
  *(_QWORD *)(v0 + 7624) = v71;
  v72 = MEMORY[0x242615198](v59, *(_QWORD *)(v0 + 2488), v0 + 7616);
  *(_QWORD *)(v0 + 3344) = *(_QWORD *)(v0 + 2504);
  *(_QWORD *)(v0 + 3352) = *(_QWORD *)(v0 + 2528);
  *(_QWORD *)(v0 + 7600) = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v0 + 7608) = v71;
  v73 = MEMORY[0x242615198](v59, *(_QWORD *)(v0 + 2520), v0 + 7600);
  *(_QWORD *)(v0 + 7584) = v72;
  *(_QWORD *)(v0 + 7592) = v73;
  v74 = MEMORY[0x242615198](v59, *(_QWORD *)(v0 + 2768), v0 + 7584);
  *(_QWORD *)(v0 + 7568) = v69;
  *(_QWORD *)(v0 + 7576) = v74;
  v75 = MEMORY[0x242615198](v59, *(_QWORD *)(v0 + 2752), v0 + 7568);
  *(_QWORD *)(v0 + 3344) = *(_QWORD *)(v0 + 2536);
  *(_QWORD *)(v0 + 3352) = *(_QWORD *)(v0 + 2544);
  v76 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v0 + 3344) = *(_QWORD *)(v0 + 2576);
  *(_QWORD *)(v0 + 3352) = *(_QWORD *)(v0 + 2568);
  v77 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v0 + 7552) = v76;
  *(_QWORD *)(v0 + 7560) = v77;
  v78 = MEMORY[0x242615198](v59, *(_QWORD *)(v0 + 2552), v0 + 7552);
  *(_QWORD *)(v0 + 3344) = *(_QWORD *)(v0 + 2584);
  *(_QWORD *)(v0 + 3352) = *(_QWORD *)(v0 + 2592);
  v79 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v0 + 3344) = *(_QWORD *)(v0 + 2616);
  *(_QWORD *)(v0 + 3352) = *(_QWORD *)(v0 + 2608);
  v80 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v0 + 7536) = v79;
  *(_QWORD *)(v0 + 7544) = v80;
  v81 = MEMORY[0x242615198](v59, *(_QWORD *)(v0 + 2600), v0 + 7536);
  *(_QWORD *)(v0 + 7520) = v78;
  *(_QWORD *)(v0 + 7528) = v81;
  v82 = MEMORY[0x242615198](v59, *(_QWORD *)(v0 + 2560), v0 + 7520);
  *(_QWORD *)(v0 + 3344) = *(_QWORD *)(v0 + 2624);
  *(_QWORD *)(v0 + 3352) = v55;
  *(_QWORD *)(v0 + 7504) = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v0 + 7512) = *(_QWORD *)(v0 + 2776);
  v83 = MEMORY[0x242615198](v59, v47, v0 + 7504);
  *(_QWORD *)(v0 + 3344) = *(_QWORD *)(v0 + 2648);
  *(_QWORD *)(v0 + 3352) = *(_QWORD *)(v0 + 2640);
  v84 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v0 + 7488) = v83;
  *(_QWORD *)(v0 + 7496) = v84;
  v85 = MEMORY[0x242615198](v59, *(_QWORD *)(v0 + 2632), v0 + 7488);
  *(_QWORD *)(v0 + 7472) = v82;
  *(_QWORD *)(v0 + 7480) = v85;
  v86 = MEMORY[0x242615198](v59, v53, v0 + 7472);
  *(_QWORD *)(v0 + 7456) = v75;
  *(_QWORD *)(v0 + 7464) = v86;
  v87 = *(_QWORD *)(v0 + 2224);
  MEMORY[0x242615198](v59, v87, v0 + 7456);
  sub_23BEA5C0C(v54, v87, *(_QWORD *)(v0 + 2232));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 2216) + 8))(v54, v87);
}

uint64_t sub_23BEBA134()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t OpaqueTypeConformance2;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(_QWORD, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;

  v2 = (*(uint64_t (**)(_QWORD))(v0[299] + 184))(v0[298]);
  v3 = v0[273];
  sub_23BF82AF8(v2);
  swift_bridgeObjectRelease();
  v4 = v0[70];
  v5 = v0[305];
  v6 = v0[306];
  sub_23BFF8F38();
  (*(void (**)(uint64_t, _QWORD))(v0[272] + 8))(v3, v0[274]);
  (*(void (**)(uint64_t, uint64_t))(v0[71] + 8))(v1, v5);
  v0[386] = v5;
  v0[387] = v6;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v8 = v0[171];
  v9 = v0[237];
  sub_23BEA72EC(v4, v9, v8);
  v10 = *(void (**)(uint64_t, uint64_t))(v0[72] + 8);
  v10(v4, v9);
  v11 = v10;
  v0[348] = v10;
  v12 = v0[77];
  sub_23BEA5C0C(v8, v9, v12);
  v0[386] = v0[308];
  v0[387] = v0[307];
  v13 = swift_getOpaqueTypeConformance2();
  v14 = v0[186];
  sub_23BEA5C24(v12, v9);
  v11(v12, v9);
  v0[386] = v0[301];
  v0[387] = v0[302];
  v15 = swift_getOpaqueTypeConformance2();
  v0[386] = v0[335];
  v0[387] = v0[334];
  v16 = swift_getOpaqueTypeConformance2();
  v0[386] = v0[333];
  v0[387] = v0[337];
  v17 = swift_getOpaqueTypeConformance2();
  v0[538] = v16;
  v0[539] = v17;
  v18 = MEMORY[0x24BDEF3E0];
  v0[537] = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v0[336], v0 + 538);
  v0[535] = MEMORY[0x242615198](MEMORY[0x24BDF3F50], v0[338], v0 + 537);
  v0[536] = MEMORY[0x24BDECC60];
  v19 = MEMORY[0x242615198](MEMORY[0x24BDED308], v0[339], v0 + 535);
  v20 = sub_23BEA1F94(&qword_256AE3920, &qword_256AE3910, MEMORY[0x24BDF43B0]);
  v0[533] = v19;
  v0[534] = v20;
  v21 = MEMORY[0x242615198](v18, v0[332], v0 + 533);
  v22 = sub_23BEA1F94(&qword_256AE3928, &qword_256AE3918, MEMORY[0x24BDF4700]);
  v0[531] = v21;
  v0[532] = v22;
  v23 = v0[287];
  v24 = MEMORY[0x242615198](v18, v23, v0 + 531);
  v0[529] = v15;
  v0[530] = v24;
  v25 = v0[303];
  v26 = MEMORY[0x242615198](v18, v25, v0 + 529);
  v0[527] = OpaqueTypeConformance2;
  v0[528] = v13;
  v27 = v0[345];
  v28 = MEMORY[0x242615198](v18, v27, v0 + 527);
  v29 = v0[250];
  sub_23BEA5CE8(v14, v25, v27);
  (*(void (**)(uint64_t, uint64_t))(v0[188] + 8))(v14, v27);
  v0[525] = v26;
  v0[526] = v28;
  v30 = v0[304];
  v31 = MEMORY[0x242615198](v18, v30, v0 + 525);
  v0[386] = v0[309];
  v0[387] = v0[310];
  v32 = swift_getOpaqueTypeConformance2();
  v0[386] = v0[312];
  v0[387] = v0[314];
  v33 = swift_getOpaqueTypeConformance2();
  v0[523] = v32;
  v0[524] = v33;
  v34 = MEMORY[0x242615198](v18, v0[311], v0 + 523);
  v0[386] = v0[313];
  v0[387] = v0[316];
  v0[521] = swift_getOpaqueTypeConformance2();
  v0[522] = v33;
  v35 = MEMORY[0x242615198](v18, v0[315], v0 + 521);
  v0[519] = v34;
  v0[520] = v35;
  v36 = MEMORY[0x242615198](v18, v0[346], v0 + 519);
  v37 = v0[263];
  sub_23BEA5C24(v29, v30);
  (*(void (**)(uint64_t, uint64_t))(v0[251] + 8))(v29, v30);
  v0[517] = v31;
  v0[518] = v36;
  v38 = v0[344];
  v0[342] = MEMORY[0x242615198](v18, v38, v0 + 517);
  v0[386] = v0[317];
  v0[387] = v0[318];
  v39 = swift_getOpaqueTypeConformance2();
  v0[386] = v0[322];
  v0[387] = v0[321];
  v40 = swift_getOpaqueTypeConformance2();
  v0[515] = v39;
  v0[516] = v40;
  v41 = MEMORY[0x242615198](v18, v0[319], v0 + 515);
  v0[386] = v0[323];
  v0[387] = v0[324];
  v42 = swift_getOpaqueTypeConformance2();
  v0[386] = v0[327];
  v0[387] = v0[326];
  v43 = swift_getOpaqueTypeConformance2();
  v0[513] = v42;
  v0[514] = v43;
  v44 = MEMORY[0x242615198](v18, v0[325], v0 + 513);
  v0[511] = v41;
  v0[512] = v44;
  v45 = MEMORY[0x242615198](v18, v0[320], v0 + 511);
  v0[386] = v0[328];
  v46 = v0[286];
  v0[387] = v46;
  v0[509] = swift_getOpaqueTypeConformance2();
  v0[510] = v0[347];
  v47 = v0[288];
  v48 = MEMORY[0x242615198](v18, v47, v0 + 509);
  v0[386] = v0[331];
  v0[387] = v0[330];
  v49 = swift_getOpaqueTypeConformance2();
  v0[507] = v48;
  v50 = v23;
  v0[508] = v49;
  v51 = MEMORY[0x242615198](v18, v0[329], v0 + 507);
  v0[505] = v45;
  v0[506] = v51;
  v52 = v0[300];
  MEMORY[0x242615198](v18, v52, v0 + 505);
  v53 = v0[280];
  sub_23BEA5C24(v37, v38);
  (*(void (**)(uint64_t, uint64_t))(v0[262] + 8))(v37, v38);
  ((void (*)(_QWORD, _QWORD))v0[348])(v0[171], v0[237]);
  (*(void (**)(_QWORD, _QWORD))(v0[170] + 8))(v0[233], v0[234]);
  v54 = *(void (**)(_QWORD, uint64_t))(v0[261] + 8);
  v55 = v0[264];
  v54(v0[231], v55);
  v54(v0[230], v55);
  sub_23BE9F3A0(v0[215], &qword_256AE3618);
  sub_23BE9F3A0(v0[214], &qword_256AE3618);
  sub_23BE9F3A0(v0[146], &qword_256AE3618);
  (*(void (**)(_QWORD, _QWORD))(v0[292] + 8))(v0[207], v0[294]);
  v0[418] = v0[301];
  v0[419] = v0[302];
  v56 = swift_getOpaqueTypeConformance2();
  v0[418] = v0[335];
  v0[419] = v0[334];
  v57 = swift_getOpaqueTypeConformance2();
  v0[418] = v0[333];
  v0[419] = v0[337];
  v58 = swift_getOpaqueTypeConformance2();
  v0[967] = v57;
  v0[968] = v58;
  v59 = MEMORY[0x24BDEF3E0];
  v0[966] = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v0[336], v0 + 967);
  v0[964] = MEMORY[0x242615198](MEMORY[0x24BDF3F50], v0[338], v0 + 966);
  v0[965] = MEMORY[0x24BDECC60];
  v60 = MEMORY[0x242615198](MEMORY[0x24BDED308], v0[339], v0 + 964);
  v61 = sub_23BEA1F94(&qword_256AE3920, &qword_256AE3910, MEMORY[0x24BDF43B0]);
  v0[962] = v60;
  v0[963] = v61;
  v62 = MEMORY[0x242615198](v59, v0[332], v0 + 962);
  v63 = sub_23BEA1F94(&qword_256AE3928, &qword_256AE3918, MEMORY[0x24BDF4700]);
  v0[960] = v62;
  v0[961] = v63;
  v64 = MEMORY[0x242615198](v59, v50, v0 + 960);
  v0[958] = v56;
  v0[959] = v64;
  v65 = MEMORY[0x242615198](v59, v0[303], v0 + 958);
  v0[418] = v0[305];
  v0[419] = v0[306];
  v66 = swift_getOpaqueTypeConformance2();
  v0[418] = v0[308];
  v0[419] = v0[307];
  v67 = swift_getOpaqueTypeConformance2();
  v0[956] = v66;
  v0[957] = v67;
  v68 = MEMORY[0x242615198](v59, v0[345], v0 + 956);
  v0[954] = v65;
  v0[955] = v68;
  v69 = MEMORY[0x242615198](v59, v0[304], v0 + 954);
  v0[418] = v0[309];
  v0[419] = v0[310];
  v70 = swift_getOpaqueTypeConformance2();
  v0[418] = v0[312];
  v0[419] = v0[314];
  v71 = swift_getOpaqueTypeConformance2();
  v0[952] = v70;
  v0[953] = v71;
  v72 = MEMORY[0x242615198](v59, v0[311], v0 + 952);
  v0[418] = v0[313];
  v0[419] = v0[316];
  v0[950] = swift_getOpaqueTypeConformance2();
  v0[951] = v71;
  v73 = MEMORY[0x242615198](v59, v0[315], v0 + 950);
  v0[948] = v72;
  v0[949] = v73;
  v74 = MEMORY[0x242615198](v59, v0[346], v0 + 948);
  v0[946] = v69;
  v0[947] = v74;
  v75 = MEMORY[0x242615198](v59, v0[344], v0 + 946);
  v0[418] = v0[317];
  v0[419] = v0[318];
  v76 = swift_getOpaqueTypeConformance2();
  v0[418] = v0[322];
  v0[419] = v0[321];
  v77 = swift_getOpaqueTypeConformance2();
  v0[944] = v76;
  v0[945] = v77;
  v78 = MEMORY[0x242615198](v59, v0[319], v0 + 944);
  v0[418] = v0[323];
  v0[419] = v0[324];
  v79 = swift_getOpaqueTypeConformance2();
  v0[418] = v0[327];
  v0[419] = v0[326];
  v80 = swift_getOpaqueTypeConformance2();
  v0[942] = v79;
  v0[943] = v80;
  v81 = MEMORY[0x242615198](v59, v0[325], v0 + 942);
  v0[940] = v78;
  v0[941] = v81;
  v82 = MEMORY[0x242615198](v59, v0[320], v0 + 940);
  v0[418] = v0[328];
  v0[419] = v46;
  v0[938] = swift_getOpaqueTypeConformance2();
  v0[939] = v0[347];
  v83 = MEMORY[0x242615198](v59, v47, v0 + 938);
  v0[418] = v0[331];
  v0[419] = v0[330];
  v84 = swift_getOpaqueTypeConformance2();
  v0[936] = v83;
  v0[937] = v84;
  v85 = MEMORY[0x242615198](v59, v0[329], v0 + 936);
  v0[934] = v82;
  v0[935] = v85;
  v86 = MEMORY[0x242615198](v59, v52, v0 + 934);
  v0[932] = v75;
  v0[933] = v86;
  v87 = v0[278];
  MEMORY[0x242615198](v59, v87, v0 + 932);
  sub_23BEA5C0C(v53, v87, v0[279]);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0[277] + 8))(v53, v87);
}

void sub_23BEBC88C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t OpaqueTypeConformance2;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v5 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 184);
  swift_retain();
  v6 = v5(v3, v2);
  v7 = v0[273];
  sub_23BF82AF8(v6);
  swift_bridgeObjectRelease();
  v8 = v0[105];
  v9 = v0[322];
  v10 = v0[321];
  sub_23BFF8F38();
  (*(void (**)(uint64_t, _QWORD))(v0[272] + 8))(v7, v0[274]);
  (*(void (**)(uint64_t, uint64_t))(v0[108] + 8))(v1, v9);
  v0[386] = v9;
  v0[387] = v10;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v12 = v0[199];
  v13 = v0[245];
  sub_23BEA72EC(v8, v13, v12);
  v14 = *(void (**)(uint64_t, uint64_t))(v0[106] + 8);
  v14(v8, v13);
  v15 = v14;
  v0[348] = v14;
  v16 = v0[110];
  v17 = v12;
  v18 = v13;
  sub_23BEA5C0C(v17, v13, v16);
  v0[386] = v0[317];
  v0[387] = v0[318];
  v19 = swift_getOpaqueTypeConformance2();
  v20 = v0[203];
  sub_23BEA5CE8(v16, v0[242], v18);
  v15(v16, v18);
  v0[784] = v19;
  v0[785] = OpaqueTypeConformance2;
  v21 = MEMORY[0x24BDEF3E0];
  v22 = v0[319];
  v23 = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v22, v0 + 784);
  v0[386] = v0[323];
  v0[387] = v0[324];
  v24 = swift_getOpaqueTypeConformance2();
  v0[386] = v0[327];
  v0[387] = v0[326];
  v25 = swift_getOpaqueTypeConformance2();
  v0[782] = v24;
  v0[783] = v25;
  v26 = MEMORY[0x242615198](v21, v0[325], v0 + 782);
  v27 = v0[254];
  sub_23BEA5C24(v20, v22);
  (*(void (**)(uint64_t, uint64_t))(v0[204] + 8))(v20, v22);
  v0[780] = v23;
  v0[781] = v26;
  v28 = v0[320];
  v29 = MEMORY[0x242615198](v21, v28, v0 + 780);
  v0[386] = v0[328];
  v0[387] = v0[286];
  v0[778] = swift_getOpaqueTypeConformance2();
  v0[779] = v4;
  v30 = MEMORY[0x242615198](v21, v0[288], v0 + 778);
  v0[386] = v0[331];
  v0[387] = v0[330];
  v31 = swift_getOpaqueTypeConformance2();
  v0[776] = v30;
  v0[777] = v31;
  v0[342] = MEMORY[0x242615198](v21, v0[329], v0 + 776);
  v32 = v0[260];
  v33 = v29;
  sub_23BEA5C24(v27, v28);
  (*(void (**)(uint64_t, uint64_t))(v0[255] + 8))(v27, v28);
  v0[386] = v0[301];
  v0[387] = v0[302];
  v34 = swift_getOpaqueTypeConformance2();
  v0[386] = v0[335];
  v0[387] = v0[334];
  v35 = swift_getOpaqueTypeConformance2();
  v0[386] = v0[333];
  v0[387] = v0[337];
  v36 = swift_getOpaqueTypeConformance2();
  v0[774] = v35;
  v0[775] = v36;
  v0[773] = MEMORY[0x242615198](v21, v0[336], v0 + 774);
  v0[771] = MEMORY[0x242615198](MEMORY[0x24BDF3F50], v0[338], v0 + 773);
  v0[772] = MEMORY[0x24BDECC60];
  v37 = MEMORY[0x242615198](MEMORY[0x24BDED308], v0[339], v0 + 771);
  v38 = sub_23BEA1F94(&qword_256AE3920, &qword_256AE3910, MEMORY[0x24BDF43B0]);
  v0[769] = v37;
  v0[770] = v38;
  v39 = MEMORY[0x242615198](v21, v0[332], v0 + 769);
  v40 = sub_23BEA1F94(&qword_256AE3928, &qword_256AE3918, MEMORY[0x24BDF4700]);
  v0[767] = v39;
  v0[768] = v40;
  v41 = MEMORY[0x242615198](v21, v0[287], v0 + 767);
  v0[765] = v34;
  v0[766] = v41;
  v42 = MEMORY[0x242615198](v21, v0[303], v0 + 765);
  v0[386] = v0[305];
  v0[387] = v0[306];
  v43 = swift_getOpaqueTypeConformance2();
  v0[386] = v0[308];
  v0[387] = v0[307];
  v44 = swift_getOpaqueTypeConformance2();
  v0[763] = v43;
  v0[764] = v44;
  v45 = MEMORY[0x242615198](v21, v0[345], v0 + 763);
  v0[761] = v42;
  v0[762] = v45;
  v46 = MEMORY[0x242615198](v21, v0[304], v0 + 761);
  v0[386] = v0[309];
  v0[387] = v0[310];
  v47 = swift_getOpaqueTypeConformance2();
  v0[386] = v0[312];
  v0[387] = v0[314];
  v48 = swift_getOpaqueTypeConformance2();
  v0[759] = v47;
  v0[760] = v48;
  v49 = MEMORY[0x242615198](v21, v0[311], v0 + 759);
  v0[386] = v0[313];
  v0[387] = v0[316];
  v0[757] = swift_getOpaqueTypeConformance2();
  v0[758] = v48;
  v50 = MEMORY[0x242615198](v21, v0[315], v0 + 757);
  v0[755] = v49;
  v0[756] = v50;
  v51 = MEMORY[0x242615198](v21, v0[346], v0 + 755);
  v0[753] = v46;
  v0[754] = v51;
  v52 = v0[344];
  MEMORY[0x242615198](v21, v52, v0 + 753);
  v0[751] = v33;
  v0[752] = v0[342];
  v53 = v0[300];
  MEMORY[0x242615198](v21, v53, v0 + 751);
  sub_23BEA5CE8(v32, v52, v53);
  (*(void (**)(uint64_t, uint64_t))(v0[259] + 8))(v32, v53);
  ((void (*)(_QWORD, _QWORD))v0[348])(v0[199], v0[245]);
  (*(void (**)(_QWORD, _QWORD))(v0[267] + 8))(v0[164], v0[296]);
  (*(void (**)(_QWORD, _QWORD))(v0[261] + 8))(v0[232], v0[264]);
  sub_23BE9F3A0(v0[226], &qword_256AE3618);
  sub_23BE9F3A0(v0[225], &qword_256AE3618);
  sub_23BE9F3A0(v0[224], &qword_256AE3618);
  sub_23BE9F3A0(v0[159], &qword_256AE3618);
  JUMPOUT(0x23BEBCF30);
}

void sub_23BEBDE14()
{
  uint64_t *v0;

  sub_23BEB0E60(v0[12], v0[13], v0[14], v0[15], v0[16], v0[17], v0[18], v0[19], v0[24], v0[25], v0[2], v0[3], v0[4], v0[5], v0[6], v0[7], v0[8], v0[9], v0[10],
    v0[11]);
}

uint64_t sub_23BEBDE68(uint64_t a1, void (*a2)(char *))
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = sub_23BFF96A0();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v11 - v7;
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v11 - v7, a1, AssociatedTypeWitness);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v8, 0, 1, AssociatedTypeWitness);
  a2(v8);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_23BEBDF60@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t OpaqueTypeConformance2;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD v87[2];
  _QWORD v88[2];
  uint64_t v89;
  uint64_t v90;
  _QWORD v91[2];
  _QWORD v92[2];

  v73 = a5;
  v76 = a4;
  v77 = a3;
  v78 = a2;
  v72 = a1;
  v85 = a7;
  v71 = a10;
  v70 = a11;
  sub_23BFF8ADC();
  v12 = (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088];
  v13 = a6;
  v68 = a6;
  v14 = sub_23BFF862C();
  v15 = sub_23BFF862C();
  v67 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v66 = (char *)&v60 - v16;
  v17 = sub_23BEA1BB8((unint64_t *)&qword_256AE3908, v12, MEMORY[0x24BDF1078]);
  v92[0] = a11;
  v92[1] = v17;
  v18 = MEMORY[0x24BDED308];
  v19 = MEMORY[0x242615198](MEMORY[0x24BDED308], v14, v92);
  v91[0] = v19;
  v91[1] = MEMORY[0x24BDEBEE0];
  v83 = MEMORY[0x242615198](v18, v15, v91);
  v84 = v15;
  v89 = v15;
  v90 = v83;
  v20 = MEMORY[0x24BDF3100];
  v21 = MEMORY[0x24261512C](0, &v89, MEMORY[0x24BDF3100], 0);
  v63 = *(_QWORD *)(v21 - 8);
  v22 = MEMORY[0x24BDAC7A8](v21);
  v65 = (char *)&v60 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x24BDAC7A8](v22);
  v64 = (uint64_t)&v60 - v25;
  v26 = *(_QWORD *)(v13 - 8);
  v27 = MEMORY[0x24BDAC7A8](v24);
  v29 = (char *)&v60 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v31 = (char *)&v60 - v30;
  v32 = sub_23BFF862C();
  v61 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v34 = (char *)&v60 - v33;
  v74 = v19;
  v88[0] = v19;
  v88[1] = MEMORY[0x24BDEEC40];
  v35 = MEMORY[0x242615198](v18, v32, v88);
  v75 = v32;
  v89 = v32;
  v90 = v35;
  v80 = v35;
  v36 = MEMORY[0x24261512C](0, &v89, v20, 0);
  v60 = *(_QWORD *)(v36 - 8);
  v37 = MEMORY[0x24BDAC7A8](v36);
  v39 = (char *)&v60 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v37);
  v62 = (uint64_t)&v60 - v40;
  v82 = v21;
  v81 = sub_23BFF8968();
  v79 = *(_QWORD *)(v81 - 8);
  MEMORY[0x24BDAC7A8](v81);
  v86 = (uint64_t)&v60 - v41;
  LOBYTE(v18) = (*(uint64_t (**)(uint64_t))(v71 + 40))(v73);
  v78(v76);
  v42 = v68;
  sub_23BFF8E00();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v29, v42);
  if ((v18 & 1) != 0)
  {
    sub_23BFF8CEC();
    (*(void (**)(char *, uint64_t))(v69 + 8))(v31, v14);
    sub_23BFF8B24();
    sub_23BFF91C0();
    v43 = v75;
    v44 = v80;
    sub_23BFF8E54();
    (*(void (**)(char *, uint64_t))(v61 + 8))(v34, v43);
    v89 = v43;
    v90 = v44;
    swift_getOpaqueTypeConformance2();
    v45 = v62;
    sub_23BEA72EC((uint64_t)v39, v36, v62);
    v46 = *(void (**)(char *, uint64_t))(v60 + 8);
    v46(v39, v36);
    sub_23BEA5C0C(v45, v36, (uint64_t)v39);
    v48 = v83;
    v47 = v84;
    v89 = v84;
    v90 = v83;
    swift_getOpaqueTypeConformance2();
    sub_23BEA5C24((uint64_t)v39, v36);
    v46(v39, v36);
    v49 = v45;
    v50 = v36;
  }
  else
  {
    sub_23BFF91C0();
    v51 = v66;
    sub_23BFF8E9C();
    (*(void (**)(char *, uint64_t))(v69 + 8))(v31, v14);
    sub_23BFF8B24();
    sub_23BFF91C0();
    v52 = (uint64_t)v65;
    v48 = v83;
    v47 = v84;
    sub_23BFF8E54();
    (*(void (**)(char *, uint64_t))(v67 + 8))(v51, v47);
    v89 = v47;
    v90 = v48;
    swift_getOpaqueTypeConformance2();
    v53 = v64;
    v54 = v82;
    sub_23BEA72EC(v52, v82, v64);
    v46 = *(void (**)(char *, uint64_t))(v63 + 8);
    v46((char *)v52, v54);
    sub_23BEA5C0C(v53, v54, v52);
    v43 = v75;
    v44 = v80;
    v89 = v75;
    v90 = v80;
    swift_getOpaqueTypeConformance2();
    sub_23BEA5CE8(v52, v36, v54);
    v46((char *)v52, v54);
    v49 = v53;
    v50 = v54;
  }
  v46((char *)v49, v50);
  v89 = v43;
  v90 = v44;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v89 = v47;
  v90 = v48;
  v56 = swift_getOpaqueTypeConformance2();
  v87[0] = OpaqueTypeConformance2;
  v87[1] = v56;
  v57 = v81;
  MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v81, v87);
  v58 = v86;
  sub_23BEA5C0C(v86, v57, v85);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v79 + 8))(v58, v57);
}

uint64_t sub_23BEBE660@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = sub_23BFF82CC();
  MEMORY[0x24BDAC7A8](v4);
  (*(void (**)(char *, uint64_t))(v6 + 16))((char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  result = sub_23BFF8C68();
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v8;
  *(_BYTE *)(a2 + 16) = v9 & 1;
  *(_QWORD *)(a2 + 24) = v10;
  return result;
}

uint64_t sub_23BEBE6EC@<X0>(uint64_t a1@<X0>, void (*a2)(char *, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t (*v35)(char *, uint64_t, uint64_t);
  int v36;
  char *v37;
  void (*v38)(char *, uint64_t);
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  void (*v88)(char *, uint64_t);
  uint64_t v89;
  char *v90;

  v83 = a3;
  v88 = a2;
  v89 = a1;
  v87 = a4;
  v4 = sub_23BFF8368();
  v81 = *(_QWORD *)(v4 - 8);
  v82 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v84 = (char *)&v75 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3940);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v86 = (uint64_t)&v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v85 = (uint64_t)&v75 - v9;
  v10 = sub_23BFF82CC();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v80 = (char *)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v90 = (char *)&v75 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v78 = (char *)&v75 - v16;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3618);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v75 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x24BDAC7A8](v18);
  v23 = (char *)&v75 - v22;
  MEMORY[0x24BDAC7A8](v21);
  v25 = (char *)&v75 - v24;
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3948);
  MEMORY[0x24BDAC7A8](v26);
  v28 = (char *)&v75 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_23BFF8248();
  v30 = *(_QWORD *)(v29 - 8);
  v31 = MEMORY[0x24BDAC7A8](v29);
  v79 = (char *)&v75 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v31);
  v34 = (char *)&v75 - v33;
  sub_23BE9F190(v89, (uint64_t)v25, &qword_256AE3618);
  v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v36 = v35(v25, 1, v10);
  v89 = v29;
  if (v36 == 1)
  {
    sub_23BE9F3A0((uint64_t)v25, &qword_256AE3618);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v30 + 56))(v28, 1, 1, v29);
LABEL_4:
    v39 = v78;
    sub_23BFF82C0();
    sub_23BFF823C();
    v38 = *(void (**)(char *, uint64_t))(v11 + 8);
    v38(v39, v10);
    sub_23BE9F3A0((uint64_t)v28, &qword_256AE3948);
    v40 = (uint64_t)v88;
    goto LABEL_6;
  }
  sub_23BFF823C();
  v37 = v25;
  v38 = *(void (**)(char *, uint64_t))(v11 + 8);
  v38(v37, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v28, 0, 1, v29);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29) == 1)
    goto LABEL_4;
  (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v34, v28, v89);
  v40 = (uint64_t)v88;
  v39 = v78;
LABEL_6:
  v78 = (char *)sub_23BEA1BB8(&qword_256AE3950, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC290], MEMORY[0x24BDCC2A8]);
  v41 = sub_23BFF9418();
  v76 = v42;
  v77 = v41;
  sub_23BE9F190(v40, (uint64_t)v23, &qword_256AE3618);
  if (v35(v23, 1, v10) == 1)
  {
    sub_23BFF8254();
    sub_23BE9F3A0((uint64_t)v23, &qword_256AE3618);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v90, v23, v10);
  }
  sub_23BE9F190(v40, (uint64_t)v20, &qword_256AE3618);
  v43 = v35(v20, 1, v10);
  v88 = v38;
  v75 = v10;
  if (v43 == 1)
  {
    sub_23BE9F3A0((uint64_t)v20, &qword_256AE3618);
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v47 = 0;
  }
  else
  {
    v48 = v80;
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v80, v20, v10);
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v39, v48, v10);
    v49 = sub_23BFF8C68();
    v51 = v50;
    v53 = v52 & 1;
    sub_23BFF8BA8();
    v54 = sub_23BFF8C5C();
    v56 = v55;
    v58 = v57;
    swift_release();
    v59 = v58 & 1;
    sub_23BEA0F64(v49, v51, v53);
    swift_bridgeObjectRelease();
    v44 = sub_23BFF8C50();
    v45 = v60;
    v47 = v61;
    v46 = v62 & 1;
    sub_23BEA0F64(v54, v56, v59);
    swift_bridgeObjectRelease();
    v88(v80, v10);
  }
  v63 = swift_allocObject();
  v64 = v76;
  *(_QWORD *)(v63 + 16) = v77;
  *(_QWORD *)(v63 + 24) = v64;
  v65 = v90;
  sub_23BFF823C();
  v66 = sub_23BFF9418();
  v68 = v67;
  v69 = (uint64_t)v84;
  (*(void (**)(char *, uint64_t, uint64_t))(v81 + 16))(v84, v83, v82);
  v70 = v85;
  sub_23BEBEDC8((uint64_t)sub_23BEBF09C, v63, 3, 0, v66, v68, v69, (uint64_t)nullsub_1, v85, 0, (uint64_t)nullsub_1, 0);
  v71 = v86;
  sub_23BE9F190(v70, v86, &qword_256AE3940);
  v72 = v87;
  *v87 = v44;
  v72[1] = v45;
  v72[2] = v46;
  v72[3] = v47;
  v73 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3958);
  sub_23BE9F190(v71, (uint64_t)v72 + *(int *)(v73 + 48), &qword_256AE3940);
  sub_23BEA1DC0(v44, v45, v46, v47);
  sub_23BE9F3A0(v70, &qword_256AE3940);
  v88(v65, v75);
  sub_23BE9F3A0(v71, &qword_256AE3940);
  return sub_23BEBF0A4(v44, v45, v46, v47);
}

uint64_t sub_23BEBED78()
{
  sub_23BEBF0DC();
  swift_bridgeObjectRetain();
  return sub_23BFF8C74();
}

uint64_t sub_23BEBEDC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  int *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  _QWORD *v29;
  _QWORD *v30;
  __int128 v33;
  uint64_t v34;

  v19 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_256AE3940);
  v20 = (uint64_t *)(a9 + v19[9]);
  *v20 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3960);
  swift_storeEnumTagMultiPayload();
  v21 = a9 + v19[10];
  type metadata accessor for CGSize(0);
  sub_23BFF8FEC();
  *(_OWORD *)v21 = v33;
  *(_QWORD *)(v21 + 16) = v34;
  v22 = a9 + v19[11];
  sub_23BFF8FEC();
  *(_OWORD *)v22 = v33;
  *(_QWORD *)(v22 + 16) = v34;
  v23 = a9 + v19[12];
  sub_23BFF8FEC();
  *(_BYTE *)v23 = v33;
  *(_QWORD *)(v23 + 8) = *((_QWORD *)&v33 + 1);
  *(_QWORD *)a9 = a3;
  *(_BYTE *)(a9 + 8) = a4 & 1;
  v24 = (_QWORD *)(a9 + v19[13]);
  *v24 = a1;
  v24[1] = a2;
  v25 = (_QWORD *)(a9 + v19[14]);
  *v25 = a5;
  v25[1] = a6;
  v26 = a9 + v19[15];
  v27 = sub_23BFF8368();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v26, a7, v27);
  v29 = (_QWORD *)(a9 + v19[16]);
  *v29 = a8;
  v29[1] = a10;
  v30 = (_QWORD *)(a9 + v19[17]);
  *v30 = a11;
  v30[1] = a12;
  return result;
}

uint64_t sub_23BEBEF90(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3618);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BEBEFD8(uint64_t a1)
{
  uint64_t v1;

  return sub_23BFE8644(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_23BEBEFF4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23BEBE660(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_23BEBEFFC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23BEBDF60(*(_QWORD *)(v1 + 96), *(void (**)(uint64_t))(v1 + 104), *(_QWORD *)(v1 + 112), *(_QWORD *)(v1 + 120), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), a1, *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72));
}

uint64_t sub_23BEBF038(uint64_t a1)
{
  uint64_t v1;

  return sub_23BEBDE68(a1, *(void (**)(char *))(v1 + 96));
}

uint64_t sub_23BEBF078()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23BEBF09C()
{
  return sub_23BEBED78();
}

uint64_t sub_23BEBF0A4(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_23BEA0F64(result, a2, a3 & 1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_23BEBF0DC()
{
  unint64_t result;

  result = qword_256AE3968;
  if (!qword_256AE3968)
  {
    result = MEMORY[0x242615198](MEMORY[0x24BEE0D50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&qword_256AE3968);
  }
  return result;
}

uint64_t sub_23BEBF120(uint64_t a1)
{
  return sub_23BEBEFD8(a1);
}

uint64_t dispatch thunk of static CanvasActionButtonDescriptorProtocol.placeholder.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

BOOL sub_23BEBF13C(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

uint64_t sub_23BEBF14C()
{
  return sub_23BFF99DC();
}

uint64_t sub_23BEBF170(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6F436E6D756C6F63 && a2 == 0xEB00000000746E75;
  if (v2 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x46797469736E6564 && a2 == 0xED0000726F746361)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23BFF9964();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23BEBF29C(char a1)
{
  if ((a1 & 1) != 0)
    return 0x46797469736E6564;
  else
    return 0x6F436E6D756C6F63;
}

uint64_t sub_23BEBF2E8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x746E756F63 && a2 == 0xE500000000000000;
  if (v2 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x676E6963617073 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23BFF9964();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23BEBF3D0()
{
  sub_23BFF99D0();
  sub_23BFF99DC();
  return sub_23BFF9A00();
}

uint64_t sub_23BEBF414(char a1)
{
  if ((a1 & 1) != 0)
    return 0x676E6963617073;
  else
    return 0x746E756F63;
}

uint64_t sub_23BEBF448(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_23BFF9964();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

BOOL sub_23BEBF4B4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_23BEBF13C(*a1, *a2);
}

uint64_t sub_23BEBF4C8()
{
  return sub_23BEBF3D0();
}

uint64_t sub_23BEBF4E8()
{
  return sub_23BEBF14C();
}

uint64_t sub_23BEBF4F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23BEBF5DC(a1, a2, a3, (void (*)(_BYTE *, _QWORD, _QWORD, _QWORD))sub_23BEBF14C);
}

uint64_t sub_23BEBF504()
{
  char *v0;

  return sub_23BEBF29C(*v0);
}

uint64_t sub_23BEBF514@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BEBF170(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BEBF540@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23BEC1558();
  *a1 = result;
  return result;
}

uint64_t sub_23BEBF568(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23BFFAD80, a1);
  return sub_23BFF9A30();
}

uint64_t sub_23BEBF59C(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23BFFAD80, a1);
  return sub_23BFF9A3C();
}

uint64_t sub_23BEBF5D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23BEBF5DC(a1, a2, a3, (void (*)(_BYTE *, _QWORD, _QWORD, _QWORD))sub_23BEC1560);
}

uint64_t sub_23BEBF5DC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_BYTE *, _QWORD, _QWORD, _QWORD))
{
  unsigned __int8 *v4;
  _BYTE v8[72];

  sub_23BFF99D0();
  a4(v8, *v4, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  return sub_23BFF9A00();
}

uint64_t sub_23BEBF62C()
{
  char *v0;

  return sub_23BEBF414(*v0);
}

uint64_t sub_23BEBF63C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BEBF2E8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BEBF668(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23BFFADD0, a1);
  return sub_23BFF9A30();
}

uint64_t sub_23BEBF69C(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23BFFADD0, a1);
  return sub_23BFF9A3C();
}

uint64_t sub_23BEBF6D0()
{
  return 1;
}

uint64_t sub_23BEBF6D8()
{
  sub_23BFF99D0();
  sub_23BFF99DC();
  return sub_23BFF9A00();
}

uint64_t sub_23BEBF718()
{
  return sub_23BFF99DC();
}

uint64_t sub_23BEBF73C()
{
  sub_23BFF99D0();
  sub_23BFF99DC();
  return sub_23BFF9A00();
}

uint64_t sub_23BEBF778()
{
  return 12383;
}

uint64_t sub_23BEBF784@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BEBF448(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_23BEBF7B4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23BEBF6D0();
  *a1 = result & 1;
  return result;
}

uint64_t sub_23BEBF7E0(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23BFFAE20, a1);
  return sub_23BFF9A30();
}

uint64_t sub_23BEBF814(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23BFFAE20, a1);
  return sub_23BFF9A3C();
}

uint64_t CanvasVerticalGridLayout.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[3];
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char v56;
  char v57;
  char v58;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = type metadata accessor for CanvasVerticalGridLayout.DensityFactorCodingKeys(255, v6, v7, a4);
  v42 = MEMORY[0x242615198](&unk_23BFFAE20, v8);
  v43 = v8;
  v47 = sub_23BFF994C();
  v39 = *(_QWORD *)(v47 - 8);
  v9 = MEMORY[0x24BDAC7A8](v47);
  v44 = (char *)v38 - v10;
  v46 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v45 = (char *)v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CanvasVerticalGridLayout.ColumnCountCodingKeys(255, v6, v7, v12);
  v38[1] = MEMORY[0x242615198](&unk_23BFFADD0, v13);
  v38[2] = v13;
  v41 = sub_23BFF994C();
  v38[0] = *(_QWORD *)(v41 - 8);
  v14 = MEMORY[0x24BDAC7A8](v41);
  v40 = (char *)v38 - v15;
  v16 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = v7;
  v49 = v6;
  v20 = type metadata accessor for CanvasVerticalGridLayout.CodingKeys(255, v6, v7, v19);
  MEMORY[0x242615198](&unk_23BFFAD80, v20);
  v21 = sub_23BFF994C();
  v22 = *(_QWORD *)(v21 - 8);
  v50 = v21;
  v51 = v22;
  MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)v38 - v23;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BFF9A18();
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v53, a2);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v26 = v45;
    v25 = v46;
    v27 = v49;
    (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v45, v18, v49);
    v58 = 1;
    v28 = v44;
    v29 = v50;
    sub_23BFF98EC();
    v30 = v47;
    sub_23BFF9940();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v28, v30);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v26, v27);
    return (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v24, v29);
  }
  else
  {
    v32 = v38[0];
    v33 = *((_QWORD *)v18 + 1);
    v57 = 0;
    v34 = v40;
    v35 = v50;
    sub_23BFF98EC();
    v56 = 0;
    v36 = v41;
    v37 = v52;
    sub_23BFF9934();
    if (!v37)
    {
      v55 = v33;
      v54 = 1;
      sub_23BEBFC1C();
      sub_23BFF9940();
    }
    (*(void (**)(char *, uint64_t))(v32 + 8))(v34, v36);
    return (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v24, v35);
  }
}

uint64_t type metadata accessor for CanvasVerticalGridLayout.DensityFactorCodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CanvasVerticalGridLayout.DensityFactorCodingKeys);
}

uint64_t type metadata accessor for CanvasVerticalGridLayout.ColumnCountCodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CanvasVerticalGridLayout.ColumnCountCodingKeys);
}

uint64_t type metadata accessor for CanvasVerticalGridLayout.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CanvasVerticalGridLayout.CodingKeys);
}

unint64_t sub_23BEBFC1C()
{
  unint64_t result;

  result = qword_256AE3970;
  if (!qword_256AE3970)
  {
    result = MEMORY[0x242615198](MEMORY[0x24BEE50C0], MEMORY[0x24BEE50B0]);
    atomic_store(result, (unint64_t *)&qword_256AE3970);
  }
  return result;
}

uint64_t CanvasVerticalGridLayout.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  char *v44;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  void (*v57)(char *, char *, uint64_t);
  char *v58;
  uint64_t v59;
  char *v60;
  __int128 v61;
  uint64_t *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  char *v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  char v89;

  v67 = a5;
  v8 = type metadata accessor for CanvasVerticalGridLayout.DensityFactorCodingKeys(255, a2, a3, a4);
  v76 = MEMORY[0x242615198](&unk_23BFFAE20, v8);
  v77 = v8;
  v70 = sub_23BFF98E0();
  v69 = *(_QWORD *)(v70 - 8);
  MEMORY[0x24BDAC7A8](v70);
  v79 = (char *)&v61 - v9;
  v11 = type metadata accessor for CanvasVerticalGridLayout.ColumnCountCodingKeys(255, a2, a3, v10);
  v74 = MEMORY[0x242615198](&unk_23BFFADD0, v11);
  v75 = v11;
  v71 = sub_23BFF98E0();
  v68 = *(_QWORD *)(v71 - 8);
  MEMORY[0x24BDAC7A8](v71);
  v78 = (char *)&v61 - v12;
  v14 = type metadata accessor for CanvasVerticalGridLayout.CodingKeys(255, a2, a3, v13);
  MEMORY[0x242615198](&unk_23BFFAD80, v14);
  v15 = sub_23BFF98E0();
  v81 = *(_QWORD *)(v15 - 8);
  v82 = v15;
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v61 - v16;
  v73 = a2;
  v72 = a3;
  v80 = type metadata accessor for CanvasVerticalGridLayout(0, a2, a3, v18);
  v19 = *(_QWORD *)(v80 - 8);
  v20 = MEMORY[0x24BDAC7A8](v80);
  v22 = (char *)&v61 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x24BDAC7A8](v20);
  v25 = (uint64_t *)((char *)&v61 - v24);
  MEMORY[0x24BDAC7A8](v23);
  v27 = (char *)&v61 - v26;
  v28 = a1[3];
  v83 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v28);
  v29 = v84;
  sub_23BFF9A0C();
  if (v29)
    goto LABEL_8;
  v65 = v22;
  v66 = 0;
  v62 = v25;
  v63 = v19;
  v64 = v27;
  v30 = v82;
  v84 = v17;
  *(_QWORD *)&v85 = sub_23BFF98D4();
  v31 = sub_23BFF94C0();
  MEMORY[0x242615198](MEMORY[0x24BEE12C8], v31);
  *(_QWORD *)&v87 = sub_23BFF96DC();
  *((_QWORD *)&v87 + 1) = v32;
  *(_QWORD *)&v88 = v33;
  *((_QWORD *)&v88 + 1) = v34;
  v35 = sub_23BFF96D0();
  MEMORY[0x242615198](MEMORY[0x24BEE2190], v35);
  sub_23BFF9634();
  v36 = v85;
  if (v85 == 2 || (v61 = v87, v85 = v87, v86 = v88, (sub_23BFF964C() & 1) == 0))
  {
    v41 = sub_23BFF9784();
    swift_allocError();
    v43 = v42;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3978);
    *v43 = v80;
    v44 = v84;
    sub_23BFF9874();
    sub_23BFF9778();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v41 - 8) + 104))(v43, *MEMORY[0x24BEE26D0], v41);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v81 + 8))(v44, v30);
    goto LABEL_8;
  }
  if ((v36 & 1) != 0)
  {
    LOBYTE(v85) = 1;
    v46 = v79;
    v47 = v84;
    v48 = v66;
    sub_23BFF9868();
    if (!v48)
    {
      v50 = v65;
      v51 = v70;
      sub_23BFF98C8();
      (*(void (**)(char *, uint64_t))(v69 + 8))(v46, v51);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v81 + 8))(v47, v30);
      v56 = v80;
      swift_storeEnumTagMultiPayload();
      v57 = *(void (**)(char *, char *, uint64_t))(v63 + 32);
      v58 = v64;
      v57(v64, v50, v56);
      v59 = (uint64_t)v83;
      v60 = v67;
      goto LABEL_14;
    }
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v81 + 8))(v47, v30);
LABEL_8:
    v40 = (uint64_t)v83;
    return __swift_destroy_boxed_opaque_existential_1(v40);
  }
  LOBYTE(v85) = 0;
  v37 = v78;
  v38 = v84;
  v39 = v66;
  sub_23BFF9868();
  if (!v39)
  {
    LOBYTE(v85) = 0;
    v49 = v71;
    v52 = sub_23BFF98BC();
    v89 = 1;
    sub_23BEC0384();
    sub_23BFF98C8();
    v53 = v81;
    (*(void (**)(char *, uint64_t))(v68 + 8))(v37, v49);
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v53 + 8))(v38, v30);
    v54 = v85;
    v55 = v62;
    *v62 = v52;
    v55[1] = v54;
    v56 = v80;
    swift_storeEnumTagMultiPayload();
    v57 = *(void (**)(char *, char *, uint64_t))(v63 + 32);
    v58 = v64;
    v57(v64, (char *)v55, v56);
    v59 = (uint64_t)v83;
    v60 = v67;
LABEL_14:
    v57(v60, v58, v56);
    v40 = v59;
    return __swift_destroy_boxed_opaque_existential_1(v40);
  }
  swift_unknownObjectRelease();
  (*(void (**)(char *, uint64_t))(v81 + 8))(v38, v30);
  v40 = (uint64_t)v83;
  return __swift_destroy_boxed_opaque_existential_1(v40);
}

uint64_t type metadata accessor for CanvasVerticalGridLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CanvasVerticalGridLayout);
}

unint64_t sub_23BEC0384()
{
  unint64_t result;

  result = qword_256AE3980[0];
  if (!qword_256AE3980[0])
  {
    result = MEMORY[0x242615198](MEMORY[0x24BEE50E8], MEMORY[0x24BEE50B0]);
    atomic_store(result, qword_256AE3980);
  }
  return result;
}

uint64_t sub_23BEC03C8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, char *a4@<X8>)
{
  return CanvasVerticalGridLayout.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3, a4);
}

uint64_t sub_23BEC03E4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return CanvasVerticalGridLayout.encode(to:)(a1, a2, a3, a4);
}

uint64_t CanvasVerticalGridLayout.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v9, v11, a2);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v9, v3);
    sub_23BFF99DC();
    sub_23BFF9388();
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  }
  else
  {
    sub_23BFF99DC();
    sub_23BFF99DC();
    return sub_23BFF99F4();
  }
}

uint64_t static CanvasVerticalGridLayout.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  double *v14;
  uint64_t TupleTypeMetadata2;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  double *v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  char *v23;
  char v24;
  void (*v25)(char *, uint64_t);
  double v26;
  _QWORD v28[2];
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v32 = a2;
  v30 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v28[1] = v6;
  v29 = (char *)v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CanvasVerticalGridLayout(0, v7, v6, v6);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (double *)((char *)v28 - v13);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v16 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v17 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v19 = (char *)v28 - v18;
  v20 = (double *)((char *)v28 + *(int *)(v17 + 48) - v18);
  v31 = v9;
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v21((char *)v28 - v18, a1, v8);
  v21((char *)v20, v32, v8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v21(v12, (uint64_t)v19, v8);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v23 = v29;
      v22 = v30;
      (*(void (**)(char *, double *, uint64_t))(v30 + 32))(v29, v20, a3);
      v24 = sub_23BFF93AC();
      v25 = *(void (**)(char *, uint64_t))(v22 + 8);
      v25(v23, a3);
      v25(v12, a3);
LABEL_10:
      v16 = v31;
      TupleTypeMetadata2 = v8;
      goto LABEL_11;
    }
    (*(void (**)(char *, uint64_t))(v30 + 8))(v12, a3);
  }
  else
  {
    v21((char *)v14, (uint64_t)v19, v8);
    v26 = v14[1];
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      v24 = *(_QWORD *)v14 == *(_QWORD *)v20 && v26 == v20[1];
      goto LABEL_10;
    }
  }
  v24 = 0;
LABEL_11:
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, TupleTypeMetadata2);
  return v24 & 1;
}

uint64_t CanvasVerticalGridLayout.hashValue.getter(uint64_t a1)
{
  _BYTE v3[72];

  sub_23BFF99D0();
  CanvasVerticalGridLayout.hash(into:)((uint64_t)v3, a1);
  return sub_23BFF9A00();
}

uint64_t sub_23BEC07D4(uint64_t a1, uint64_t a2)
{
  _BYTE v4[72];

  sub_23BFF99D0();
  CanvasVerticalGridLayout.hash(into:)((uint64_t)v4, a2);
  return sub_23BFF9A00();
}

void sub_23BEC0814()
{
  JUMPOUT(0x242615198);
}

uint64_t sub_23BEC0824(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static CanvasVerticalGridLayout.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16));
}

uint64_t sub_23BEC0830()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_23BEC0838()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t *sub_23BEC08AC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 0x10uLL)
    v5 = 16;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    v9 = *((unsigned __int8 *)a2 + v5);
    if (v9 >= 2)
    {
      if (v5 <= 3)
        v10 = v5;
      else
        v10 = 4;
      __asm { BR              X13 }
    }
    if (v9 == 1)
    {
      (*(void (**)(uint64_t *))(v4 + 16))(a1);
      *((_BYTE *)v3 + v5) = 1;
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_BYTE *)a1 + v5) = 0;
    }
  }
  return v3;
}

uint64_t sub_23BEC09C0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_QWORD *)(v2 + 64);
  if (v3 <= 0x10)
    v3 = 16;
  v4 = *(unsigned __int8 *)(result + v3);
  if (v4 < 2)
  {
    if (v4 == 1)
      return (*(uint64_t (**)(void))(v2 + 8))();
  }
  else
  {
    if (v3 <= 3)
      v5 = v3;
    else
      v5 = 4;
    return ((uint64_t (*)(void))((char *)&loc_23BEC0A08 + 4 * byte_23BFFA985[v5]))();
  }
  return result;
}

_OWORD *sub_23BEC0A5C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 0x10uLL)
    v5 = 16;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 1)
  {
    (*(void (**)(_OWORD *))(v4 + 16))(a1);
    v8 = 1;
  }
  else
  {
    v8 = 0;
    *a1 = *a2;
  }
  *((_BYTE *)a1 + v5) = v8;
  return a1;
}

_OWORD *sub_23BEC0B30(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 0x10uLL)
      v7 = 16;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 1)
      (*(void (**)(_OWORD *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v6 + 16))(a1, a2, v5);
      v12 = 1;
    }
    else
    {
      v12 = 0;
      *a1 = *a2;
    }
    *((_BYTE *)a1 + v7) = v12;
  }
  return a1;
}

_OWORD *sub_23BEC0CB0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 0x10uLL)
    v5 = 16;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 1)
  {
    (*(void (**)(_OWORD *))(v4 + 32))(a1);
    v8 = 1;
  }
  else
  {
    v8 = 0;
    *a1 = *a2;
  }
  *((_BYTE *)a1 + v5) = v8;
  return a1;
}

_OWORD *sub_23BEC0D84(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 0x10uLL)
      v7 = 16;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 1)
      (*(void (**)(_OWORD *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v6 + 32))(a1, a2, v5);
      v12 = 1;
    }
    else
    {
      v12 = 0;
      *a1 = *a2;
    }
    *((_BYTE *)a1 + v7) = v12;
  }
  return a1;
}

uint64_t sub_23BEC0F04(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  v3 = 16;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) > 0x10uLL)
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_21;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_21:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 2)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_21;
LABEL_14:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 255);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_23BEC0FC8 + 4 * byte_23BFFA9A8[(v4 - 1)]))();
}

void sub_23BEC1014(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (v5 <= 0x10)
    v5 = 16;
  v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    v7 = 0;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = 4u;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v8 = a2 - 255;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t sub_23BEC11BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 16;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64) > 0x10uLL)
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (*(unsigned __int8 *)(a1 + v2) < 2u)
    return *(unsigned __int8 *)(a1 + v2);
  if (v2 <= 3)
    v3 = v2;
  else
    v3 = 4;
  return ((uint64_t (*)(void))((char *)&loc_23BEC1204 + 4 * byte_23BFFA9B6[v3]))();
}

void sub_23BEC124C(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  size_t v4;
  unsigned int v5;
  unsigned int v6;
  int v7;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) <= 0x10uLL)
    v4 = 16;
  else
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (a2 > 1)
  {
    v5 = a2 - 2;
    if (v4 < 4)
    {
      v6 = v5 >> (8 * v4);
      v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 2;
      bzero(a1, v4);
      if ((_DWORD)v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }
      else if ((_DWORD)v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }
      else
      {
        *a1 = v7;
      }
    }
    else
    {
      a1[v4] = 2;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }
  else
  {
    a1[v4] = a2;
  }
}

uint64_t sub_23BEC1314()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_23BEC1324(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23BEC1370 + 4 * byte_23BFFA9C0[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23BEC13A4 + 4 * byte_23BFFA9BB[v4]))();
}

uint64_t sub_23BEC13A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BEC13AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BEC13B4);
  return result;
}

uint64_t sub_23BEC13C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BEC13C8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23BEC13CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BEC13D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTagSinglePayload for ArtworkClipShape.RoundedRectangleCodingKeys(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t sub_23BEC1434(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23BEC1474 + 4 * byte_23BFFA9C5[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23BEC1494 + 4 * byte_23BFFA9CA[v4]))();
}

_BYTE *sub_23BEC1474(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23BEC1494(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BEC149C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BEC14A4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BEC14AC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BEC14B4(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_23BEC14C0()
{
  return 0;
}

void sub_23BEC14C8()
{
  JUMPOUT(0x242615198);
}

void sub_23BEC14D8()
{
  JUMPOUT(0x242615198);
}

void sub_23BEC14E8()
{
  JUMPOUT(0x242615198);
}

void sub_23BEC14F8()
{
  JUMPOUT(0x242615198);
}

void sub_23BEC1508()
{
  JUMPOUT(0x242615198);
}

void sub_23BEC1518()
{
  JUMPOUT(0x242615198);
}

void sub_23BEC1528()
{
  JUMPOUT(0x242615198);
}

void sub_23BEC1538()
{
  JUMPOUT(0x242615198);
}

void sub_23BEC1548()
{
  JUMPOUT(0x242615198);
}

uint64_t sub_23BEC1558()
{
  return 2;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for CanvasLazyFetcherError(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CanvasLazyFetcherError(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 25) = v3;
  return result;
}

uint64_t sub_23BEC15F4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_23BEC1610(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    *(_BYTE *)(result + 24) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for CanvasLazyFetcherError()
{
  return &type metadata for CanvasLazyFetcherError;
}

uint64_t sub_23BEC1644()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for LocalizationBundle()
{
  return objc_opt_self();
}

id sub_23BEC1674()
{
  uint64_t ObjCClassFromMetadata;
  id result;

  type metadata accessor for LocalizationBundle();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  result = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  qword_256B023E0 = (uint64_t)result;
  return result;
}

uint64_t dispatch thunk of CanvasLayoutProviding.transform(currentLayout:updatingSizeClass:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of CanvasLayoutProviding.transform(currentLayout:updatingDynamicTypeSize:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

__n128 sub_23BEC16D8@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, __n128 a11, unint64_t a12, unint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v22;
  int *v23;
  _QWORD *v24;
  _QWORD *v25;
  __n128 *v26;
  __n128 result;
  _QWORD *v28;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a16 - 8) + 32))(a9, a1, a16);
  v23 = (int *)type metadata accessor for LargeBrickView(0, a16, a17, v22);
  v24 = (_QWORD *)(a9 + v23[9]);
  *v24 = a2;
  v24[1] = a3;
  v24[2] = a4;
  v24[3] = a5;
  v25 = (_QWORD *)(a9 + v23[11]);
  *v25 = a6;
  v25[1] = a7;
  v25[2] = a8;
  v25[3] = a10;
  v26 = (__n128 *)(a9 + v23[12]);
  result = a11;
  *v26 = a11;
  v26[1].n128_u64[0] = a12;
  v26[1].n128_u64[1] = a13;
  v28 = (_QWORD *)(a9 + v23[10]);
  *v28 = a14;
  v28[1] = a15;
  return result;
}

uint64_t LargeBrickView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[2];
  _QWORD v64[3];

  v55 = a2;
  v4 = sub_23BFF8680();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x24BDED868];
  v6 = *(_QWORD *)(v4 - 8);
  v7 = v4;
  v44 = v4;
  v54 = v6;
  v8 = MEMORY[0x24BDAC7A8](v4);
  v10 = *(_QWORD *)(a1 - 8);
  v52 = *(_QWORD *)(v10 + 64);
  v53 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = *(_QWORD *)(a1 + 16);
  v13 = a1;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3C20);
  swift_getTupleTypeMetadata2();
  v14 = sub_23BFF9220();
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v14);
  v15 = sub_23BFF859C();
  MEMORY[0x242615198](MEMORY[0x24BDEC6F8], v15);
  v16 = sub_23BFF90C4();
  v17 = sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3C28);
  v18 = sub_23BFF862C();
  v64[0] = MEMORY[0x242615198](MEMORY[0x24BDF4750], v16);
  v64[1] = MEMORY[0x24BDEEC40];
  v19 = MEMORY[0x24BDED308];
  v20 = MEMORY[0x242615198](MEMORY[0x24BDED308], v17, v64);
  v21 = sub_23BEA1F94(qword_256AE3C30, &qword_256AE3C28, MEMORY[0x24BDEB950]);
  v63[0] = v20;
  v63[1] = v21;
  v47 = v18;
  v48 = MEMORY[0x242615198](v19, v18, v63);
  v22 = sub_23BFF9040();
  v50 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v46 = (char *)&v42 - v23;
  v24 = MEMORY[0x242615198](MEMORY[0x24BDF43B0], v22);
  v43 = v24;
  v42 = sub_23BEA1BB8(&qword_256AE3558, v5, MEMORY[0x24BDED858]);
  v59 = v22;
  v60 = v7;
  v61 = v24;
  v62 = v42;
  v25 = MEMORY[0x24261512C](0, &v59, MEMORY[0x24BDF22B8], 0);
  v49 = *(_QWORD *)(v25 - 8);
  v26 = MEMORY[0x24BDAC7A8](v25);
  v28 = (char *)&v42 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v26);
  v45 = (uint64_t)&v42 - v29;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v2, v13);
  v30 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v31 = swift_allocObject();
  v32 = *(_QWORD *)(v13 + 24);
  v33 = v51;
  *(_QWORD *)(v31 + 16) = v51;
  *(_QWORD *)(v31 + 24) = v32;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v31 + v30, v12, v13);
  v56 = v33;
  v57 = v32;
  v58 = v2;
  v34 = v46;
  sub_23BFF9034();
  v35 = v53;
  sub_23BFF8674();
  v36 = v44;
  v37 = v43;
  v38 = v42;
  sub_23BFF8CF8();
  (*(void (**)(char *, uint64_t))(v54 + 8))(v35, v36);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v34, v22);
  v59 = v22;
  v60 = v36;
  v61 = v37;
  v62 = v38;
  swift_getOpaqueTypeConformance2();
  v39 = v45;
  sub_23BEA72EC((uint64_t)v28, v25, v45);
  v40 = *(void (**)(char *, uint64_t))(v49 + 8);
  v40(v28, v25);
  sub_23BEA5C0C(v39, v25, v55);
  return ((uint64_t (*)(uint64_t, uint64_t))v40)(v39, v25);
}

uint64_t type metadata accessor for LargeBrickView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LargeBrickView);
}

uint64_t sub_23BEC1C54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = type metadata accessor for LargeBrickView(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80);
  return (*(uint64_t (**)(void))(v4 + *(int *)(v5 + 40) + ((v6 + 32) & ~v6)))();
}

uint64_t sub_23BEC1C9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[2];
  _QWORD v40[2];
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  char v44;
  char v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  char v51;
  char v52;

  v33 = a3;
  v32 = a1;
  v35 = a4;
  v5 = sub_23BFF86BC();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (_OWORD *)((char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3C20);
  swift_getTupleTypeMetadata2();
  v8 = sub_23BFF9220();
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v8);
  v9 = sub_23BFF859C();
  MEMORY[0x242615198](MEMORY[0x24BDEC6F8], v9);
  v10 = sub_23BFF90C4();
  v11 = sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3C28);
  v12 = sub_23BFF862C();
  v34 = *(_QWORD *)(v12 - 8);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v32 - v16;
  v36 = a2;
  v37 = v33;
  v38 = v32;
  sub_23BFF91C0();
  sub_23BFF90B8();
  v46 = v41;
  v47 = v42;
  v18 = MEMORY[0x242615198](MEMORY[0x24BDF4750], v10);
  sub_23BFF8CE0();
  swift_release();
  v41 = v48;
  v42 = v49;
  v43 = v50;
  v44 = v51;
  v45 = v52;
  v19 = (char *)v7 + *(int *)(v5 + 20);
  v20 = *MEMORY[0x24BDEEB68];
  v21 = sub_23BFF8854();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v19, v20, v21);
  __asm { FMOV            V0.2D, #4.0 }
  *v7 = _Q0;
  v40[0] = v18;
  v40[1] = MEMORY[0x24BDEEC40];
  v27 = MEMORY[0x24BDED308];
  v28 = MEMORY[0x242615198](MEMORY[0x24BDED308], v11, v40);
  sub_23BEA1BB8(&qword_256AE3CB8, (uint64_t (*)(uint64_t))MEMORY[0x24BDED998], MEMORY[0x24BDED990]);
  sub_23BFF8F44();
  sub_23BEC4004((uint64_t)v7);
  swift_release();
  v29 = sub_23BEA1F94(qword_256AE3C30, &qword_256AE3C28, MEMORY[0x24BDEB950]);
  v39[0] = v28;
  v39[1] = v29;
  MEMORY[0x242615198](v27, v12, v39);
  sub_23BEA72EC((uint64_t)v15, v12, (uint64_t)v17);
  v30 = *(void (**)(char *, uint64_t))(v34 + 8);
  v30(v15, v12);
  sub_23BEA5C0C((uint64_t)v17, v12, v35);
  return ((uint64_t (*)(char *, uint64_t))v30)(v17, v12);
}

uint64_t sub_23BEC2024@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_23BEC1C9C(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_23BEC2030()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23BEC2064@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v9 = type metadata accessor for LargeBrickView(0, a2, a3, a4);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v19 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v19 - v11, a1, v9);
  v13 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a2;
  *(_QWORD *)(v14 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v14 + v13, v12, v9);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3C20);
  swift_getTupleTypeMetadata2();
  v15 = sub_23BFF9220();
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v15);
  v19 = sub_23BFF8590();
  v20 = v16;
  v17 = sub_23BFF859C();
  MEMORY[0x242615198](MEMORY[0x24BDEC6F8], v17);
  sub_23BEA72EC((uint64_t)&v19, v17, (uint64_t)v21);
  swift_release();
  v19 = v21[0];
  v20 = v21[1];
  sub_23BEA5C0C((uint64_t)&v19, v17, a5);
  return swift_release();
}

uint64_t sub_23BEC220C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  void (*v34)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD v42[2];
  uint64_t v43[2];

  v38 = a1;
  v39 = a5;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3CC0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3C20);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v36 - v16;
  v18 = *(_QWORD *)(a3 - 8);
  v19 = MEMORY[0x24BDAC7A8](v15);
  v21 = (char *)&v36 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)&v36 - v22;
  v37 = a4;
  sub_23BEA72EC(a2, a3, (uint64_t)&v36 - v22);
  *(_QWORD *)v10 = sub_23BFF8848();
  *((_QWORD *)v10 + 1) = 0;
  v10[16] = 0;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3CC8);
  sub_23BEC2490(a2, a3, a4, (uint64_t)&v10[*(int *)(v24 + 44)]);
  LOBYTE(a2) = sub_23BFF8B60();
  sub_23BFF83F8();
  v26 = v25;
  v28 = v27;
  v30 = v29;
  v32 = v31;
  sub_23BE9F190((uint64_t)v10, (uint64_t)v14, &qword_256AE3CC0);
  v33 = &v14[*(int *)(v11 + 36)];
  *v33 = a2;
  *((_QWORD *)v33 + 1) = v26;
  *((_QWORD *)v33 + 2) = v28;
  *((_QWORD *)v33 + 3) = v30;
  *((_QWORD *)v33 + 4) = v32;
  v33[40] = 0;
  sub_23BE9F3A0((uint64_t)v10, &qword_256AE3CC0);
  sub_23BEC42E0((uint64_t)v14, (uint64_t)v17, &qword_256AE3C20);
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v21, v23, a3);
  v43[0] = (uint64_t)v21;
  sub_23BE9F190((uint64_t)v17, (uint64_t)v14, &qword_256AE3C20);
  v43[1] = (uint64_t)v14;
  v42[0] = a3;
  v42[1] = v11;
  v40 = v37;
  v41 = sub_23BEC41A4();
  sub_23BF93EF0(v43, 2uLL, (uint64_t)v42);
  sub_23BE9F3A0((uint64_t)v17, &qword_256AE3C20);
  v34 = *(void (**)(char *, uint64_t))(v18 + 8);
  v34(v23, a3);
  sub_23BE9F3A0((uint64_t)v14, &qword_256AE3C20);
  return ((uint64_t (*)(char *, uint64_t))v34)(v21, a3);
}

uint64_t sub_23BEC2490@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  _OWORD v22[3];

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3CE0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3CE8);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)v22 - v15;
  *(_QWORD *)v10 = sub_23BFF88A8();
  *((_QWORD *)v10 + 1) = 0;
  v10[16] = 1;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3CF0);
  sub_23BEC2680(a1, a2, a3, (uint64_t)&v10[*(int *)(v17 + 44)]);
  sub_23BFF84DC();
  sub_23BFF91C0();
  sub_23BFF84D0();
  sub_23BE9F190((uint64_t)v10, (uint64_t)v14, &qword_256AE3CE0);
  v18 = &v14[*(int *)(v11 + 36)];
  v19 = v22[1];
  *(_OWORD *)v18 = v22[0];
  *((_OWORD *)v18 + 1) = v19;
  *((_OWORD *)v18 + 2) = v22[2];
  sub_23BE9F3A0((uint64_t)v10, &qword_256AE3CE0);
  sub_23BEC42E0((uint64_t)v14, (uint64_t)v16, &qword_256AE3CE8);
  sub_23BE9F190((uint64_t)v16, (uint64_t)v14, &qword_256AE3CE8);
  sub_23BE9F190((uint64_t)v14, a4, &qword_256AE3CE8);
  v20 = a4 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AE3CF8) + 48);
  *(_QWORD *)v20 = 0;
  *(_BYTE *)(v20 + 8) = 0;
  sub_23BE9F3A0((uint64_t)v16, &qword_256AE3CE8);
  return sub_23BE9F3A0((uint64_t)v14, &qword_256AE3CE8);
}

uint64_t sub_23BEC2680@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  int *v25;
  uint64_t v26;
  _OWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v40[12];
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  _BYTE *v51;
  int v52;
  int v53;
  uint64_t v54;
  int v55;
  _BYTE *v56;
  char v57;
  char v58;
  char v59;
  uint64_t v60[2];
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  _OWORD v66[2];
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  char v82;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3D00);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v56 = &v40[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v9);
  v12 = &v40[-v11];
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3D08);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = &v40[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v14);
  v18 = &v40[-v17];
  *(_QWORD *)v18 = sub_23BFF8848();
  *((_QWORD *)v18 + 1) = 0;
  v18[16] = 1;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3D10);
  sub_23BEC2A1C(a1, a2, a3, (uint64_t)&v18[*(int *)(v19 + 44)]);
  *(_QWORD *)v12 = sub_23BFF8848();
  *((_QWORD *)v12 + 1) = 0;
  v12[16] = 1;
  v20 = (uint64_t)&v12[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AE3D18) + 44)];
  v50 = v12;
  sub_23BEC2D88(a1, a2, a3, v20);
  v49 = sub_23BFF8848();
  sub_23BEC3080(a1, a2, a3, v21, (uint64_t)&v67);
  v47 = v68;
  v48 = v67;
  v45 = v70;
  v46 = v69;
  LODWORD(a1) = v71;
  v41 = v71;
  v22 = v72;
  v43 = v74;
  v44 = v73;
  v42 = v76;
  v55 = v77;
  v54 = v78;
  v52 = v75;
  v53 = v79;
  v59 = 1;
  v58 = v75;
  v57 = v79;
  v51 = v16;
  sub_23BE9F190((uint64_t)v18, (uint64_t)v16, &qword_256AE3D08);
  v23 = (uint64_t)v12;
  v24 = v56;
  sub_23BE9F190(v23, (uint64_t)v56, &qword_256AE3D00);
  sub_23BE9F190((uint64_t)v16, a4, &qword_256AE3D08);
  v25 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_256AE3D20);
  sub_23BE9F190((uint64_t)v24, a4 + v25[12], &qword_256AE3D00);
  v26 = a4 + v25[16];
  *(_QWORD *)v26 = 0x4024000000000000;
  *(_BYTE *)(v26 + 8) = 0;
  v27 = (_OWORD *)(a4 + v25[20]);
  v29 = v48;
  v28 = v49;
  v60[0] = v49;
  v60[1] = 0;
  LOBYTE(v61) = 1;
  v31 = v46;
  v30 = v47;
  *((_QWORD *)&v61 + 1) = v48;
  *(_QWORD *)&v62 = v47;
  v32 = v45;
  *((_QWORD *)&v62 + 1) = v46;
  *(_QWORD *)&v63 = v45;
  DWORD2(v63) = a1;
  *(_QWORD *)&v64 = v22;
  v34 = v43;
  v33 = v44;
  *((_QWORD *)&v64 + 1) = v44;
  *(_QWORD *)&v65 = v43;
  BYTE8(v65) = v52;
  v35 = v42;
  *(_QWORD *)&v66[0] = v42;
  BYTE8(v66[0]) = v55;
  *(_QWORD *)&v66[1] = v54;
  BYTE8(v66[1]) = v53;
  v36 = v61;
  *v27 = (unint64_t)v49;
  v27[1] = v36;
  v37 = v63;
  v27[2] = v62;
  v27[3] = v37;
  v38 = v65;
  v27[4] = v64;
  v27[5] = v38;
  v27[6] = v66[0];
  *(_OWORD *)((char *)v27 + 105) = *(_OWORD *)((char *)v66 + 9);
  sub_23BEC4228(v60);
  sub_23BE9F3A0((uint64_t)v50, &qword_256AE3D00);
  sub_23BE9F3A0((uint64_t)v18, &qword_256AE3D08);
  v67 = v28;
  v68 = 0;
  LOBYTE(v69) = 1;
  v70 = v29;
  v71 = v30;
  v72 = v31;
  v73 = v32;
  LODWORD(v74) = v41;
  v75 = v22;
  v76 = v33;
  v77 = v34;
  LOBYTE(v78) = v52;
  v79 = v35;
  v80 = v55;
  v81 = v54;
  v82 = v53;
  sub_23BEC4278(&v67);
  sub_23BE9F3A0((uint64_t)v56, &qword_256AE3D00);
  return sub_23BE9F3A0((uint64_t)v51, &qword_256AE3D08);
}

uint64_t sub_23BEC2A1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t KeyPath;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v41 = a4;
  v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3D28);
  MEMORY[0x24BDAC7A8](v38);
  v8 = (uint64_t *)((char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = sub_23BFF8C20();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3D30);
  MEMORY[0x24BDAC7A8](v36);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3D40);
  v15 = MEMORY[0x24BDAC7A8](v40);
  v37 = (uint64_t)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v39 = (uint64_t)&v32 - v17;
  v19 = (uint64_t *)(a1 + *(int *)(type metadata accessor for LargeBrickView(0, a2, a3, v18) + 48));
  v20 = *v19;
  v21 = v19[1];
  v22 = v19[2];
  v23 = v19[3];
  sub_23BEA1DC0(*v19, v21, v22, v23);
  v35 = sub_23BFF8A10();
  KeyPath = swift_getKeyPath();
  v32 = swift_getKeyPath();
  v24 = *MEMORY[0x24BDF1CD0];
  v34 = v10;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 104))(v12, v24, v9);
  v25 = swift_getKeyPath();
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))((char *)v8 + *(int *)(v38 + 28), v12, v9);
  *v8 = v25;
  sub_23BE9F190((uint64_t)v8, (uint64_t)&v14[*(int *)(v36 + 36)], &qword_256AE3D28);
  *(_QWORD *)v14 = v20;
  *((_QWORD *)v14 + 1) = v21;
  *((_QWORD *)v14 + 2) = v22;
  *((_QWORD *)v14 + 3) = v23;
  *((_DWORD *)v14 + 8) = v35;
  v26 = v32;
  *((_QWORD *)v14 + 5) = KeyPath;
  *((_QWORD *)v14 + 6) = 4;
  v14[56] = 0;
  *((_QWORD *)v14 + 8) = v26;
  v14[72] = 0;
  sub_23BEA1DC0(v20, v21, v22, v23);
  swift_retain();
  swift_retain();
  sub_23BE9F3A0((uint64_t)v8, &qword_256AE3D28);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v12, v9);
  sub_23BEBF0A4(v20, v21, v22, v23);
  swift_release();
  swift_release();
  v27 = v37;
  sub_23BE9F190((uint64_t)v14, v37, &qword_256AE3D30);
  *(_QWORD *)(v27 + *(int *)(v40 + 36)) = 0x4000000000000000;
  sub_23BE9F3A0((uint64_t)v14, &qword_256AE3D30);
  v28 = v39;
  sub_23BEC42E0(v27, v39, &qword_256AE3D40);
  sub_23BE9F190(v28, v27, &qword_256AE3D40);
  v29 = v41;
  sub_23BE9F190(v27, v41, &qword_256AE3D40);
  v30 = v29 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AE3D48) + 48);
  *(_QWORD *)v30 = 0;
  *(_BYTE *)(v30 + 8) = 0;
  sub_23BE9F3A0(v28, &qword_256AE3D40);
  return sub_23BE9F3A0(v27, &qword_256AE3D40);
}

uint64_t sub_23BEC2D88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t KeyPath;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v39 = a4;
  v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3D28);
  MEMORY[0x24BDAC7A8](v37);
  v8 = (uint64_t *)((char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = sub_23BFF8C20();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3D30);
  v13 = MEMORY[0x24BDAC7A8](v36);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v38 = (uint64_t)&v32 - v16;
  v18 = (uint64_t *)(a1 + *(int *)(type metadata accessor for LargeBrickView(0, a2, a3, v17) + 44));
  v20 = *v18;
  v19 = v18[1];
  v21 = v18[2];
  v22 = v18[3];
  sub_23BEA1DC0(*v18, v19, v21, v22);
  v35 = sub_23BFF8A10();
  KeyPath = swift_getKeyPath();
  v32 = swift_getKeyPath();
  v23 = *MEMORY[0x24BDF1CD0];
  v34 = v10;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 104))(v12, v23, v9);
  v24 = swift_getKeyPath();
  v25 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v26 = v9;
  v25((char *)v8 + *(int *)(v37 + 28), v12, v9);
  *v8 = v24;
  sub_23BE9F190((uint64_t)v8, (uint64_t)&v15[*(int *)(v36 + 36)], &qword_256AE3D28);
  *(_QWORD *)v15 = v20;
  *((_QWORD *)v15 + 1) = v19;
  *((_QWORD *)v15 + 2) = v21;
  *((_QWORD *)v15 + 3) = v22;
  *((_DWORD *)v15 + 8) = v35;
  v27 = v32;
  *((_QWORD *)v15 + 5) = KeyPath;
  *((_QWORD *)v15 + 6) = 2;
  v15[56] = 0;
  *((_QWORD *)v15 + 8) = v27;
  v15[72] = 0;
  sub_23BEA1DC0(v20, v19, v21, v22);
  swift_retain();
  swift_retain();
  sub_23BE9F3A0((uint64_t)v8, &qword_256AE3D28);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v12, v26);
  sub_23BEBF0A4(v20, v19, v21, v22);
  swift_release();
  swift_release();
  v28 = v38;
  sub_23BEC42E0((uint64_t)v15, v38, &qword_256AE3D30);
  sub_23BE9F190(v28, (uint64_t)v15, &qword_256AE3D30);
  v29 = v39;
  sub_23BE9F190((uint64_t)v15, v39, &qword_256AE3D30);
  v30 = v29 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AE3D38) + 48);
  *(_QWORD *)v30 = 0;
  *(_BYTE *)(v30 + 8) = 0;
  sub_23BE9F3A0(v28, &qword_256AE3D30);
  return sub_23BE9F3A0((uint64_t)v15, &qword_256AE3D30);
}

uint64_t sub_23BEC3080@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t KeyPath;
  uint64_t v13;

  v6 = (uint64_t *)(a1 + *(int *)(type metadata accessor for LargeBrickView(0, a2, a3, a4) + 36));
  v7 = *v6;
  v8 = v6[1];
  v9 = v6[2];
  v10 = v6[3];
  sub_23BEA1DC0(*v6, v8, v9, v10);
  v11 = sub_23BFF8A10();
  KeyPath = swift_getKeyPath();
  v13 = swift_getKeyPath();
  *(_QWORD *)a5 = v7;
  *(_QWORD *)(a5 + 8) = v8;
  *(_QWORD *)(a5 + 16) = v9;
  *(_QWORD *)(a5 + 24) = v10;
  *(_DWORD *)(a5 + 32) = v11;
  *(_QWORD *)(a5 + 40) = 0x3FF0000000000000;
  *(_QWORD *)(a5 + 48) = KeyPath;
  *(_QWORD *)(a5 + 56) = 1;
  *(_BYTE *)(a5 + 64) = 0;
  *(_QWORD *)(a5 + 72) = v13;
  *(_BYTE *)(a5 + 80) = 0;
  *(_QWORD *)(a5 + 88) = 0;
  *(_BYTE *)(a5 + 96) = 0;
  sub_23BEA1DC0(v7, v8, v9, v10);
  swift_retain();
  swift_retain();
  sub_23BEBF0A4(v7, v8, v9, v10);
  swift_release();
  return swift_release();
}

uint64_t sub_23BEC3184()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_23BEC320C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  __int128 v31;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8)
     + 32 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)(v11 + 24) < 0xFFFFFFFFuLL)
    {
      v15 = *(_OWORD *)(v11 + 16);
      *(_OWORD *)v10 = *(_OWORD *)v11;
      *(_OWORD *)(v10 + 16) = v15;
    }
    else
    {
      v12 = *(_QWORD *)v11;
      v13 = *(_QWORD *)(v11 + 8);
      v14 = *(_BYTE *)(v11 + 16);
      sub_23BEA0EAC(*(_QWORD *)v11, v13, v14);
      *(_QWORD *)v10 = v12;
      *(_QWORD *)(v10 + 8) = v13;
      *(_BYTE *)(v10 + 16) = v14;
      *(_QWORD *)(v10 + 24) = *(_QWORD *)(v11 + 24);
      swift_bridgeObjectRetain();
    }
    v16 = (_QWORD *)((v10 + 39) & 0xFFFFFFFFFFFFFFF8);
    v17 = (_QWORD *)((v11 + 39) & 0xFFFFFFFFFFFFFFF8);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    v19 = ((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFFFF8;
    v20 = ((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFFFF8;
    v21 = *(_QWORD *)(v20 + 24);
    swift_retain();
    if (v21 < 0xFFFFFFFF)
    {
      v25 = *(_OWORD *)(v20 + 16);
      *(_OWORD *)v19 = *(_OWORD *)v20;
      *(_OWORD *)(v19 + 16) = v25;
    }
    else
    {
      v22 = *(_QWORD *)v20;
      v23 = *(_QWORD *)(v20 + 8);
      v24 = *(_BYTE *)(v20 + 16);
      sub_23BEA0EAC(*(_QWORD *)v20, v23, v24);
      *(_QWORD *)v19 = v22;
      *(_QWORD *)(v19 + 8) = v23;
      *(_BYTE *)(v19 + 16) = v24;
      *(_QWORD *)(v19 + 24) = *(_QWORD *)(v20 + 24);
      swift_bridgeObjectRetain();
    }
    v26 = (v19 + 39) & 0xFFFFFFFFFFFFFFF8;
    v27 = (v20 + 39) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)(v27 + 24) < 0xFFFFFFFFuLL)
    {
      v31 = *(_OWORD *)(v27 + 16);
      *(_OWORD *)v26 = *(_OWORD *)v27;
      *(_OWORD *)(v26 + 16) = v31;
    }
    else
    {
      v28 = *(_QWORD *)v27;
      v29 = *(_QWORD *)(v27 + 8);
      v30 = *(_BYTE *)(v27 + 16);
      sub_23BEA0EAC(*(_QWORD *)v27, v29, v30);
      *(_QWORD *)v26 = v28;
      *(_QWORD *)(v26 + 8) = v29;
      *(_BYTE *)(v26 + 16) = v30;
      *(_QWORD *)(v26 + 24) = *(_QWORD *)(v27 + 24);
      swift_bridgeObjectRetain();
    }
  }
  return v4;
}

uint64_t sub_23BEC33E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  unint64_t v6;
  unint64_t v7;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = (a1 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v4 + 24) >= 0xFFFFFFFFuLL)
  {
    sub_23BEA0F64(*(_QWORD *)v4, *(_QWORD *)(v4 + 8), *(_BYTE *)(v4 + 16));
    swift_bridgeObjectRelease();
  }
  result = swift_release();
  v6 = (((v4 + 39) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v6 + 24) >= 0xFFFFFFFFuLL)
  {
    sub_23BEA0F64(*(_QWORD *)v6, *(_QWORD *)(v6 + 8), *(_BYTE *)(v6 + 16));
    result = swift_bridgeObjectRelease();
  }
  v7 = (v6 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v7 + 24) >= 0xFFFFFFFFuLL)
  {
    sub_23BEA0F64(*(_QWORD *)v7, *(_QWORD *)(v7 + 8), *(_BYTE *)(v7 + 16));
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_23BEC34B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  __int128 v28;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v8 + 24) < 0xFFFFFFFFuLL)
  {
    v12 = *(_OWORD *)(v8 + 16);
    *(_OWORD *)v7 = *(_OWORD *)v8;
    *(_OWORD *)(v7 + 16) = v12;
  }
  else
  {
    v9 = *(_QWORD *)v8;
    v10 = *(_QWORD *)(v8 + 8);
    v11 = *(_BYTE *)(v8 + 16);
    sub_23BEA0EAC(*(_QWORD *)v8, v10, v11);
    *(_QWORD *)v7 = v9;
    *(_QWORD *)(v7 + 8) = v10;
    *(_BYTE *)(v7 + 16) = v11;
    *(_QWORD *)(v7 + 24) = *(_QWORD *)(v8 + 24);
    swift_bridgeObjectRetain();
  }
  v13 = (_QWORD *)((v7 + 39) & 0xFFFFFFFFFFFFFFF8);
  v14 = (_QWORD *)((v8 + 39) & 0xFFFFFFFFFFFFFFF8);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  v16 = ((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8;
  v17 = ((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8;
  v18 = *(_QWORD *)(v17 + 24);
  swift_retain();
  if (v18 < 0xFFFFFFFF)
  {
    v22 = *(_OWORD *)(v17 + 16);
    *(_OWORD *)v16 = *(_OWORD *)v17;
    *(_OWORD *)(v16 + 16) = v22;
  }
  else
  {
    v19 = *(_QWORD *)v17;
    v20 = *(_QWORD *)(v17 + 8);
    v21 = *(_BYTE *)(v17 + 16);
    sub_23BEA0EAC(*(_QWORD *)v17, v20, v21);
    *(_QWORD *)v16 = v19;
    *(_QWORD *)(v16 + 8) = v20;
    *(_BYTE *)(v16 + 16) = v21;
    *(_QWORD *)(v16 + 24) = *(_QWORD *)(v17 + 24);
    swift_bridgeObjectRetain();
  }
  v23 = (v16 + 39) & 0xFFFFFFFFFFFFFFF8;
  v24 = (v17 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v24 + 24) < 0xFFFFFFFFuLL)
  {
    v28 = *(_OWORD *)(v24 + 16);
    *(_OWORD *)v23 = *(_OWORD *)v24;
    *(_OWORD *)(v23 + 16) = v28;
  }
  else
  {
    v25 = *(_QWORD *)v24;
    v26 = *(_QWORD *)(v24 + 8);
    v27 = *(_BYTE *)(v24 + 16);
    sub_23BEA0EAC(*(_QWORD *)v24, v26, v27);
    *(_QWORD *)v23 = v25;
    *(_QWORD *)(v23 + 8) = v26;
    *(_BYTE *)(v23 + 16) = v27;
    *(_QWORD *)(v23 + 24) = *(_QWORD *)(v24 + 24);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_23BEC3628(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  __int128 v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  __int128 v48;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)(v8 + 24);
  if (*(_QWORD *)(v7 + 24) < 0xFFFFFFFFuLL)
  {
    if (v9 >= 0xFFFFFFFF)
    {
      v16 = *(_QWORD *)v8;
      v17 = *(_QWORD *)(v8 + 8);
      v18 = *(_BYTE *)(v8 + 16);
      sub_23BEA0EAC(*(_QWORD *)v8, v17, v18);
      *(_QWORD *)v7 = v16;
      *(_QWORD *)(v7 + 8) = v17;
      *(_BYTE *)(v7 + 16) = v18;
      *(_QWORD *)(v7 + 24) = *(_QWORD *)(v8 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
  }
  else
  {
    if (v9 >= 0xFFFFFFFF)
    {
      v10 = *(_QWORD *)v8;
      v11 = *(_QWORD *)(v8 + 8);
      v12 = *(_BYTE *)(v8 + 16);
      sub_23BEA0EAC(*(_QWORD *)v8, v11, v12);
      v13 = *(_QWORD *)v7;
      v14 = *(_QWORD *)(v7 + 8);
      v15 = *(_BYTE *)(v7 + 16);
      *(_QWORD *)v7 = v10;
      *(_QWORD *)(v7 + 8) = v11;
      *(_BYTE *)(v7 + 16) = v12;
      sub_23BEA0F64(v13, v14, v15);
      *(_QWORD *)(v7 + 24) = *(_QWORD *)(v8 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    sub_23BEA0F64(*(_QWORD *)v7, *(_QWORD *)(v7 + 8), *(_BYTE *)(v7 + 16));
    swift_bridgeObjectRelease();
  }
  v19 = *(_OWORD *)(v8 + 16);
  *(_OWORD *)v7 = *(_OWORD *)v8;
  *(_OWORD *)(v7 + 16) = v19;
LABEL_8:
  v20 = (_QWORD *)((v7 + 39) & 0xFFFFFFFFFFFFFFF8);
  v21 = (_QWORD *)((v8 + 39) & 0xFFFFFFFFFFFFFFF8);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  swift_retain();
  swift_release();
  v23 = ((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF8;
  v24 = ((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8;
  v25 = *(_QWORD *)(v24 + 24);
  if (*(_QWORD *)(v23 + 24) < 0xFFFFFFFFuLL)
  {
    if (v25 >= 0xFFFFFFFF)
    {
      v32 = *(_QWORD *)v24;
      v33 = *(_QWORD *)(v24 + 8);
      v34 = *(_BYTE *)(v24 + 16);
      sub_23BEA0EAC(*(_QWORD *)v24, v33, v34);
      *(_QWORD *)v23 = v32;
      *(_QWORD *)(v23 + 8) = v33;
      *(_BYTE *)(v23 + 16) = v34;
      *(_QWORD *)(v23 + 24) = *(_QWORD *)(v24 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_15;
    }
  }
  else
  {
    if (v25 >= 0xFFFFFFFF)
    {
      v26 = *(_QWORD *)v24;
      v27 = *(_QWORD *)(v24 + 8);
      v28 = *(_BYTE *)(v24 + 16);
      sub_23BEA0EAC(*(_QWORD *)v24, v27, v28);
      v29 = *(_QWORD *)v23;
      v30 = *(_QWORD *)(v23 + 8);
      v31 = *(_BYTE *)(v23 + 16);
      *(_QWORD *)v23 = v26;
      *(_QWORD *)(v23 + 8) = v27;
      *(_BYTE *)(v23 + 16) = v28;
      sub_23BEA0F64(v29, v30, v31);
      *(_QWORD *)(v23 + 24) = *(_QWORD *)(v24 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_15;
    }
    sub_23BEA0F64(*(_QWORD *)v23, *(_QWORD *)(v23 + 8), *(_BYTE *)(v23 + 16));
    swift_bridgeObjectRelease();
  }
  v35 = *(_OWORD *)(v24 + 16);
  *(_OWORD *)v23 = *(_OWORD *)v24;
  *(_OWORD *)(v23 + 16) = v35;
LABEL_15:
  v36 = (v23 + 39) & 0xFFFFFFFFFFFFFFF8;
  v37 = (v24 + 39) & 0xFFFFFFFFFFFFFFF8;
  v38 = *(_QWORD *)(v37 + 24);
  if (*(_QWORD *)(v36 + 24) < 0xFFFFFFFFuLL)
  {
    if (v38 >= 0xFFFFFFFF)
    {
      v45 = *(_QWORD *)v37;
      v46 = *(_QWORD *)(v37 + 8);
      v47 = *(_BYTE *)(v37 + 16);
      sub_23BEA0EAC(*(_QWORD *)v37, v46, v47);
      *(_QWORD *)v36 = v45;
      *(_QWORD *)(v36 + 8) = v46;
      *(_BYTE *)(v36 + 16) = v47;
      *(_QWORD *)(v36 + 24) = *(_QWORD *)(v37 + 24);
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_21:
    v48 = *(_OWORD *)(v37 + 16);
    *(_OWORD *)v36 = *(_OWORD *)v37;
    *(_OWORD *)(v36 + 16) = v48;
    return a1;
  }
  if (v38 < 0xFFFFFFFF)
  {
    sub_23BEA0F64(*(_QWORD *)v36, *(_QWORD *)(v36 + 8), *(_BYTE *)(v36 + 16));
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  v39 = *(_QWORD *)v37;
  v40 = *(_QWORD *)(v37 + 8);
  v41 = *(_BYTE *)(v37 + 16);
  sub_23BEA0EAC(*(_QWORD *)v37, v40, v41);
  v42 = *(_QWORD *)v36;
  v43 = *(_QWORD *)(v36 + 8);
  v44 = *(_BYTE *)(v36 + 16);
  *(_QWORD *)v36 = v39;
  *(_QWORD *)(v36 + 8) = v40;
  *(_BYTE *)(v36 + 16) = v41;
  sub_23BEA0F64(v42, v43, v44);
  *(_QWORD *)(v36 + 24) = *(_QWORD *)(v37 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23BEC390C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  __int128 v9;
  _OWORD *v10;
  _OWORD *v11;
  _OWORD *v12;
  _OWORD *v13;
  __int128 v14;
  _OWORD *v15;
  _OWORD *v16;
  __int128 v17;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  v10 = (_OWORD *)(((unint64_t)v8 + 39) & 0xFFFFFFFFFFFFF8);
  v11 = (_OWORD *)(((unint64_t)v7 + 39) & 0xFFFFFFFFFFFFF8);
  *v11 = *v10;
  v12 = (_OWORD *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_OWORD *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v15 = (_OWORD *)(((unint64_t)v12 + 39) & 0xFFFFFFFFFFFFFFF8);
  v16 = (_OWORD *)(((unint64_t)v13 + 39) & 0xFFFFFFFFFFFFFFF8);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  return a1;
}

uint64_t sub_23BEC39A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  _OWORD *v14;
  _OWORD *v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  __int128 v29;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v7 + 24) >= 0xFFFFFFFFuLL)
  {
    if (*(_QWORD *)(v8 + 24) >= 0xFFFFFFFFuLL)
    {
      v9 = *(_BYTE *)(v8 + 16);
      v10 = *(_QWORD *)v7;
      v11 = *(_QWORD *)(v7 + 8);
      v12 = *(_BYTE *)(v7 + 16);
      *(_OWORD *)v7 = *(_OWORD *)v8;
      *(_BYTE *)(v7 + 16) = v9;
      sub_23BEA0F64(v10, v11, v12);
      *(_QWORD *)(v7 + 24) = *(_QWORD *)(v8 + 24);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_23BEA0F64(*(_QWORD *)v7, *(_QWORD *)(v7 + 8), *(_BYTE *)(v7 + 16));
    swift_bridgeObjectRelease();
  }
  v13 = *(_OWORD *)(v8 + 16);
  *(_OWORD *)v7 = *(_OWORD *)v8;
  *(_OWORD *)(v7 + 16) = v13;
LABEL_6:
  v14 = (_OWORD *)((v7 + 39) & 0xFFFFFFFFFFFFFFF8);
  v15 = (_OWORD *)((v8 + 39) & 0xFFFFFFFFFFFFFFF8);
  *v14 = *v15;
  swift_release();
  v16 = ((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8;
  v17 = ((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v16 + 24) >= 0xFFFFFFFFuLL)
  {
    if (*(_QWORD *)(v17 + 24) >= 0xFFFFFFFFuLL)
    {
      v18 = *(_BYTE *)(v17 + 16);
      v19 = *(_QWORD *)v16;
      v20 = *(_QWORD *)(v16 + 8);
      v21 = *(_BYTE *)(v16 + 16);
      *(_OWORD *)v16 = *(_OWORD *)v17;
      *(_BYTE *)(v16 + 16) = v18;
      sub_23BEA0F64(v19, v20, v21);
      *(_QWORD *)(v16 + 24) = *(_QWORD *)(v17 + 24);
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    sub_23BEA0F64(*(_QWORD *)v16, *(_QWORD *)(v16 + 8), *(_BYTE *)(v16 + 16));
    swift_bridgeObjectRelease();
  }
  v22 = *(_OWORD *)(v17 + 16);
  *(_OWORD *)v16 = *(_OWORD *)v17;
  *(_OWORD *)(v16 + 16) = v22;
LABEL_11:
  v23 = (v16 + 39) & 0xFFFFFFFFFFFFFFF8;
  v24 = (v17 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v23 + 24) < 0xFFFFFFFFuLL)
  {
LABEL_15:
    v29 = *(_OWORD *)(v24 + 16);
    *(_OWORD *)v23 = *(_OWORD *)v24;
    *(_OWORD *)(v23 + 16) = v29;
    return a1;
  }
  if (*(_QWORD *)(v24 + 24) < 0xFFFFFFFFuLL)
  {
    sub_23BEA0F64(*(_QWORD *)v23, *(_QWORD *)(v23 + 8), *(_BYTE *)(v23 + 16));
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  v25 = *(_BYTE *)(v24 + 16);
  v26 = *(_QWORD *)v23;
  v27 = *(_QWORD *)(v23 + 8);
  v28 = *(_BYTE *)(v23 + 16);
  *(_OWORD *)v23 = *(_OWORD *)v24;
  *(_BYTE *)(v23 + 16) = v25;
  sub_23BEA0F64(v26, v27, v28);
  *(_QWORD *)(v23 + 24) = *(_QWORD *)(v24 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23BEC3B7C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8)
         + 32) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_23BEC3C10 + 4 * byte_23BFFAF40[v10]))();
  }
}

void sub_23BEC3C9C(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 39) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 39) & 0xFFFFFFF8) == 0xFFFFFFE0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 39) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 39) & 0xFFFFFFF8) != 0xFFFFFFE0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((((((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)+ 39) & 0xFFFFFFFFFFFFFFF8)+ 32);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_23BEC3DA8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x23BEC3E28);
}

void sub_23BEC3DB0(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x23BEC3DB8);
  JUMPOUT(0x23BEC3E28);
}

void sub_23BEC3E00()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x23BEC3E28);
}

void sub_23BEC3E08()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x23BEC3E28);
}

uint64_t sub_23BEC3E10(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x23BEC3E28);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x23BEC3E24);
    JUMPOUT(0x23BEC3E1CLL);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t sub_23BEC3E40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  _QWORD v9[2];
  _QWORD v10[2];

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3C20);
  swift_getTupleTypeMetadata2();
  v0 = sub_23BFF9220();
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v0);
  v1 = sub_23BFF859C();
  MEMORY[0x242615198](MEMORY[0x24BDEC6F8], v1);
  v2 = sub_23BFF90C4();
  v3 = sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3C28);
  v4 = sub_23BFF862C();
  v10[0] = MEMORY[0x242615198](MEMORY[0x24BDF4750], v2);
  v10[1] = MEMORY[0x24BDEEC40];
  v5 = MEMORY[0x24BDED308];
  v9[0] = MEMORY[0x242615198](MEMORY[0x24BDED308], v3, v10);
  v9[1] = sub_23BEA1F94(qword_256AE3C30, &qword_256AE3C28, MEMORY[0x24BDEB950]);
  MEMORY[0x242615198](v5, v4, v9);
  v6 = sub_23BFF9040();
  sub_23BFF8680();
  v7 = (uint64_t (*)(uint64_t))MEMORY[0x24BDED868];
  MEMORY[0x242615198](MEMORY[0x24BDF43B0], v6);
  sub_23BEA1BB8(&qword_256AE3558, v7, MEMORY[0x24BDED858]);
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23BEC3FF8@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_23BEC2064(v2[4], v2[2], v2[3], a1, a2);
}

uint64_t sub_23BEC4004(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_23BFF86BC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t objectdestroyTm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = (int *)type metadata accessor for LargeBrickView(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *(unsigned __int8 *)(*((_QWORD *)v6 - 1) + 80);
  v8 = v4 + ((v7 + 32) & ~v7);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v8, v5);
  v9 = v8 + v6[9];
  if (*(_QWORD *)(v9 + 24))
  {
    sub_23BEA0F64(*(_QWORD *)v9, *(_QWORD *)(v9 + 8), *(_BYTE *)(v9 + 16));
    swift_bridgeObjectRelease();
  }
  swift_release();
  v10 = v8 + v6[11];
  if (*(_QWORD *)(v10 + 24))
  {
    sub_23BEA0F64(*(_QWORD *)v10, *(_QWORD *)(v10 + 8), *(_BYTE *)(v10 + 16));
    swift_bridgeObjectRelease();
  }
  v11 = v8 + v6[12];
  if (*(_QWORD *)(v11 + 24))
  {
    sub_23BEA0F64(*(_QWORD *)v11, *(_QWORD *)(v11 + 8), *(_BYTE *)(v11 + 16));
    swift_bridgeObjectRelease();
  }
  return swift_deallocObject();
}

uint64_t sub_23BEC413C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for LargeBrickView(0, v6, v7, a2) - 8) + 80);
  return sub_23BEC220C(a1, v3 + ((v8 + 32) & ~v8), v6, v7, a3);
}

unint64_t sub_23BEC41A4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AE3CD0;
  if (!qword_256AE3CD0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3C20);
    v2[0] = sub_23BEA1F94(&qword_256AE3CD8, &qword_256AE3CC0, MEMORY[0x24BDF4498]);
    v2[1] = MEMORY[0x24BDECC60];
    result = MEMORY[0x242615198](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AE3CD0);
  }
  return result;
}

uint64_t *sub_23BEC4228(uint64_t *a1)
{
  sub_23BEA1DC0(a1[3], a1[4], a1[5], a1[6]);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t *sub_23BEC4278(uint64_t *a1)
{
  sub_23BEBF0A4(a1[3], a1[4], a1[5], a1[6]);
  swift_release();
  swift_release();
  return a1;
}

uint64_t sub_23BEC42E0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_23BEC4324(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23BEC435C + 4 * byte_23BFFB070[a1]))(0x61436E6F69746361, 0xEA00000000006472);
}

uint64_t sub_23BEC435C()
{
  return 0x746469576C6C7566;
}

uint64_t sub_23BEC4380()
{
  return 0x697463416F666E69;
}

uint64_t sub_23BEC43A4()
{
  return 0x697242656772616CLL;
}

unint64_t sub_23BEC43BC()
{
  return 0xD000000000000012;
}

uint64_t sub_23BEC4450()
{
  return 0x647261436C6C6174;
}

uint64_t sub_23BEC4484()
{
  return 0x6369724265646977;
}

uint64_t sub_23BEC44A8()
{
  return 0x74756F79616CLL;
}

void sub_23BEC44C0(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_23BEC44CC()
{
  sub_23BEC5CCC();
  return sub_23BFF9A30();
}

uint64_t sub_23BEC44F4()
{
  sub_23BEC5CCC();
  return sub_23BFF9A3C();
}

BOOL sub_23BEC451C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_23BEC4530()
{
  unsigned __int8 *v0;

  return sub_23BEC4324(*v0);
}

uint64_t sub_23BEC4538@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BEC8DB0(a1, a2);
  *a3 = result;
  return result;
}

void sub_23BEC455C(_BYTE *a1@<X8>)
{
  *a1 = 13;
}

uint64_t sub_23BEC4568()
{
  sub_23BEC56F4();
  return sub_23BFF9A30();
}

uint64_t sub_23BEC4590()
{
  sub_23BEC56F4();
  return sub_23BFF9A3C();
}

uint64_t sub_23BEC45B8()
{
  sub_23BEC5C44();
  return sub_23BFF9A30();
}

uint64_t sub_23BEC45E0()
{
  sub_23BEC5C44();
  return sub_23BFF9A3C();
}

uint64_t sub_23BEC4608()
{
  sub_23BEC5BBC();
  return sub_23BFF9A30();
}

uint64_t sub_23BEC4630()
{
  sub_23BEC5BBC();
  return sub_23BFF9A3C();
}

uint64_t sub_23BEC4658()
{
  return 0;
}

uint64_t sub_23BEC4664()
{
  sub_23BEC5B78();
  return sub_23BFF9A30();
}

uint64_t sub_23BEC468C()
{
  sub_23BEC5B78();
  return sub_23BFF9A3C();
}

uint64_t sub_23BEC46B4()
{
  sub_23BEC5B34();
  return sub_23BFF9A30();
}

uint64_t sub_23BEC46DC()
{
  sub_23BEC5B34();
  return sub_23BFF9A3C();
}

uint64_t sub_23BEC4704()
{
  sub_23BEC5AAC();
  return sub_23BFF9A30();
}

uint64_t sub_23BEC472C()
{
  sub_23BEC5AAC();
  return sub_23BFF9A3C();
}

uint64_t sub_23BEC4754()
{
  sub_23BEC5A24();
  return sub_23BFF9A30();
}

uint64_t sub_23BEC477C()
{
  sub_23BEC5A24();
  return sub_23BFF9A3C();
}

uint64_t sub_23BEC47A4()
{
  sub_23BEC599C();
  return sub_23BFF9A30();
}

uint64_t sub_23BEC47CC()
{
  sub_23BEC599C();
  return sub_23BFF9A3C();
}

uint64_t sub_23BEC47F4()
{
  sub_23BEC5914();
  return sub_23BFF9A30();
}

uint64_t sub_23BEC481C()
{
  sub_23BEC5914();
  return sub_23BFF9A3C();
}

uint64_t sub_23BEC4844()
{
  sub_23BEC588C();
  return sub_23BFF9A30();
}

uint64_t sub_23BEC486C()
{
  sub_23BEC588C();
  return sub_23BFF9A3C();
}

uint64_t sub_23BEC4894()
{
  sub_23BEC5804();
  return sub_23BFF9A30();
}

uint64_t sub_23BEC48BC()
{
  sub_23BEC5804();
  return sub_23BFF9A3C();
}

uint64_t sub_23BEC48E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x74756F79616CLL && a2 == 0xE600000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_23BFF9964();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_23BEC4970()
{
  sub_23BEC577C();
  return sub_23BFF9A30();
}

uint64_t sub_23BEC4998()
{
  sub_23BEC577C();
  return sub_23BFF9A3C();
}

uint64_t sub_23BEC49C0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t sub_23BEC49EC()
{
  sub_23BEC5738();
  return sub_23BFF9A30();
}

uint64_t sub_23BEC4A14()
{
  sub_23BEC5738();
  return sub_23BFF9A3C();
}

void LazyCanvasItemContent.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  __int128 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  __int128 v59[16];
  _BYTE v60[264];

  v2 = v1;
  v51 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3D50);
  v49 = *(_QWORD *)(v51 - 8);
  MEMORY[0x24BDAC7A8](v51);
  v47 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3D58);
  v54 = *(_QWORD *)(v55 - 8);
  MEMORY[0x24BDAC7A8](v55);
  v53 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3D60);
  v50 = *(_QWORD *)(v52 - 8);
  MEMORY[0x24BDAC7A8](v52);
  v48 = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3D68);
  v45 = *(_QWORD *)(v7 - 8);
  v46 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v44 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3D70);
  v42 = *(_QWORD *)(v9 - 8);
  v43 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v41 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3D78);
  v39 = *(_QWORD *)(v11 - 8);
  v40 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v38 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3D80);
  v36 = *(_QWORD *)(v13 - 8);
  v37 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v35 = (char *)v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3D88);
  v33 = *(_QWORD *)(v15 - 8);
  v34 = v15;
  MEMORY[0x24BDAC7A8](v15);
  v32 = (char *)v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3D90);
  v30 = *(_QWORD *)(v17 - 8);
  v31 = v17;
  MEMORY[0x24BDAC7A8](v17);
  v29 = (char *)v22 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3D98);
  v22[2] = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3DA0);
  v26 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3DA8);
  v25 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3DB0);
  v22[1] = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v58 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3DB8);
  v56 = *(_QWORD *)(v58 - 8);
  MEMORY[0x24BDAC7A8](v58);
  v20 = (char *)v22 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BEA44DC(v2, (uint64_t)v59);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BEC56F4();
  v57 = v20;
  sub_23BFF9A18();
  sub_23BEA44DC(v59, (uint64_t)v60);
  v21 = (char *)sub_23BEC4E78 + 4 * word_23BFFB07E[sub_23BEA4518((uint64_t)v60)];
  __asm { BR              X10 }
}

uint64_t sub_23BEC4E78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v2 = ((uint64_t (*)(uint64_t))nullsub_1)(v0 + 856);
  *(_BYTE *)(v0 + 352) = 0;
  sub_23BEC5CCC();
  v4 = *(_QWORD *)(v0 + 336);
  v3 = *(_QWORD *)(v0 + 344);
  sub_23BFF98EC();
  v5 = *(_OWORD *)v2;
  v6 = *(_OWORD *)(v2 + 16);
  v7 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v0 + 384) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v0 + 400) = v7;
  *(_OWORD *)(v0 + 352) = v5;
  *(_OWORD *)(v0 + 368) = v6;
  v8 = *(_OWORD *)(v2 + 64);
  v9 = *(_OWORD *)(v2 + 80);
  v10 = *(_OWORD *)(v2 + 112);
  *(_OWORD *)(v0 + 448) = *(_OWORD *)(v2 + 96);
  *(_OWORD *)(v0 + 464) = v10;
  *(_OWORD *)(v0 + 416) = v8;
  *(_OWORD *)(v0 + 432) = v9;
  v11 = *(_OWORD *)(v2 + 128);
  v12 = *(_OWORD *)(v2 + 144);
  v13 = *(_OWORD *)(v2 + 176);
  *(_OWORD *)(v0 + 512) = *(_OWORD *)(v2 + 160);
  *(_OWORD *)(v0 + 528) = v13;
  *(_OWORD *)(v0 + 480) = v11;
  *(_OWORD *)(v0 + 496) = v12;
  v14 = *(_OWORD *)(v2 + 192);
  v15 = *(_OWORD *)(v2 + 208);
  v16 = *(_OWORD *)(v2 + 224);
  *(_QWORD *)(v0 + 592) = *(_QWORD *)(v2 + 240);
  *(_OWORD *)(v0 + 560) = v15;
  *(_OWORD *)(v0 + 576) = v16;
  *(_OWORD *)(v0 + 544) = v14;
  sub_23BEC5D10();
  v17 = *(_QWORD *)(v0 + 24);
  sub_23BFF9940();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 8) + 8))(v1, v17);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 328) + 8))(v4, v3);
}

void sub_23BEC564C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_BYTE *)(v0 + 352) = 3;
  sub_23BEC5B78();
  v2 = *(_QWORD *)(v0 + 336);
  v3 = *(_QWORD *)(v0 + 344);
  sub_23BFF98EC();
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 16) + 8))(v1, *(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 328) + 8))(v2, v3);
  JUMPOUT(0x23BEC5620);
}

unint64_t sub_23BEC56F4()
{
  unint64_t result;

  result = qword_256AE3DC0;
  if (!qword_256AE3DC0)
  {
    result = MEMORY[0x242615198](&unk_23BFFC0D4, &type metadata for LazyCanvasItemContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE3DC0);
  }
  return result;
}

unint64_t sub_23BEC5738()
{
  unint64_t result;

  result = qword_256AE3DC8;
  if (!qword_256AE3DC8)
  {
    result = MEMORY[0x242615198](&unk_23BFFC084, &type metadata for LazyCanvasItemContent.WideBrickCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE3DC8);
  }
  return result;
}

unint64_t sub_23BEC577C()
{
  unint64_t result;

  result = qword_256AE3DD0;
  if (!qword_256AE3DD0)
  {
    result = MEMORY[0x242615198](&unk_23BFFC034, &type metadata for LazyCanvasItemContent.VerticalStackCardCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE3DD0);
  }
  return result;
}

unint64_t sub_23BEC57C0()
{
  unint64_t result;

  result = qword_256AE3DD8;
  if (!qword_256AE3DD8)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for VerticalStackCardLayout, &type metadata for VerticalStackCardLayout);
    atomic_store(result, (unint64_t *)&qword_256AE3DD8);
  }
  return result;
}

unint64_t sub_23BEC5804()
{
  unint64_t result;

  result = qword_256AE3DE0;
  if (!qword_256AE3DE0)
  {
    result = MEMORY[0x242615198](&unk_23BFFBFE4, &type metadata for LazyCanvasItemContent.TallCardCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE3DE0);
  }
  return result;
}

unint64_t sub_23BEC5848()
{
  unint64_t result;

  result = qword_256AE3DE8;
  if (!qword_256AE3DE8)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for TallCardViewLayout, &type metadata for TallCardViewLayout);
    atomic_store(result, (unint64_t *)&qword_256AE3DE8);
  }
  return result;
}

unint64_t sub_23BEC588C()
{
  unint64_t result;

  result = qword_256AE3DF0;
  if (!qword_256AE3DF0)
  {
    result = MEMORY[0x242615198](&unk_23BFFBF94, &type metadata for LazyCanvasItemContent.StandardVerticalStackCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE3DF0);
  }
  return result;
}

unint64_t sub_23BEC58D0()
{
  unint64_t result;

  result = qword_256AE3DF8;
  if (!qword_256AE3DF8)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for StandardVerticalStackViewLayout, &type metadata for StandardVerticalStackViewLayout);
    atomic_store(result, (unint64_t *)&qword_256AE3DF8);
  }
  return result;
}

unint64_t sub_23BEC5914()
{
  unint64_t result;

  result = qword_256AE3E00;
  if (!qword_256AE3E00)
  {
    result = MEMORY[0x242615198](&unk_23BFFBF44, &type metadata for LazyCanvasItemContent.StandardHorizontalStackCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE3E00);
  }
  return result;
}

unint64_t sub_23BEC5958()
{
  unint64_t result;

  result = qword_256AE3E08;
  if (!qword_256AE3E08)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for StandardHorizontalStackViewLayout, &type metadata for StandardHorizontalStackViewLayout);
    atomic_store(result, (unint64_t *)&qword_256AE3E08);
  }
  return result;
}

unint64_t sub_23BEC599C()
{
  unint64_t result;

  result = qword_256AE3E10;
  if (!qword_256AE3E10)
  {
    result = MEMORY[0x242615198](&unk_23BFFBEF4, &type metadata for LazyCanvasItemContent.StandardCardCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE3E10);
  }
  return result;
}

unint64_t sub_23BEC59E0()
{
  unint64_t result;

  result = qword_256AE3E18;
  if (!qword_256AE3E18)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for StandardCardViewLayout, &type metadata for StandardCardViewLayout);
    atomic_store(result, (unint64_t *)&qword_256AE3E18);
  }
  return result;
}

unint64_t sub_23BEC5A24()
{
  unint64_t result;

  result = qword_256AE3E20;
  if (!qword_256AE3E20)
  {
    result = MEMORY[0x242615198](&unk_23BFFBEA4, &type metadata for LazyCanvasItemContent.SmallDynamicBrickCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE3E20);
  }
  return result;
}

unint64_t sub_23BEC5A68()
{
  unint64_t result;

  result = qword_256AE3E28;
  if (!qword_256AE3E28)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for DynamicBrickViewLayout, &type metadata for DynamicBrickViewLayout);
    atomic_store(result, (unint64_t *)&qword_256AE3E28);
  }
  return result;
}

unint64_t sub_23BEC5AAC()
{
  unint64_t result;

  result = qword_256AE3E30;
  if (!qword_256AE3E30)
  {
    result = MEMORY[0x242615198](&unk_23BFFBE54, &type metadata for LazyCanvasItemContent.MonogramVerticalStackCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE3E30);
  }
  return result;
}

unint64_t sub_23BEC5AF0()
{
  unint64_t result;

  result = qword_256AE3E38;
  if (!qword_256AE3E38)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for MonogramVerticalStackViewLayout, &type metadata for MonogramVerticalStackViewLayout);
    atomic_store(result, (unint64_t *)&qword_256AE3E38);
  }
  return result;
}

unint64_t sub_23BEC5B34()
{
  unint64_t result;

  result = qword_256AE3E40;
  if (!qword_256AE3E40)
  {
    result = MEMORY[0x242615198](&unk_23BFFBE04, &type metadata for LazyCanvasItemContent.MediumDynamicBrickCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE3E40);
  }
  return result;
}

unint64_t sub_23BEC5B78()
{
  unint64_t result;

  result = qword_256AE3E48;
  if (!qword_256AE3E48)
  {
    result = MEMORY[0x242615198](&unk_23BFFBDB4, &type metadata for LazyCanvasItemContent.LargeBrickCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE3E48);
  }
  return result;
}

unint64_t sub_23BEC5BBC()
{
  unint64_t result;

  result = qword_256AE3E50;
  if (!qword_256AE3E50)
  {
    result = MEMORY[0x242615198](&unk_23BFFBD64, &type metadata for LazyCanvasItemContent.InfoActionCardCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE3E50);
  }
  return result;
}

unint64_t sub_23BEC5C00()
{
  unint64_t result;

  result = qword_256AE3E58;
  if (!qword_256AE3E58)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for InfoActionCardViewLayout, &type metadata for InfoActionCardViewLayout);
    atomic_store(result, (unint64_t *)&qword_256AE3E58);
  }
  return result;
}

unint64_t sub_23BEC5C44()
{
  unint64_t result;

  result = qword_256AE3E60;
  if (!qword_256AE3E60)
  {
    result = MEMORY[0x242615198](&unk_23BFFBD14, &type metadata for LazyCanvasItemContent.FullWidthStageCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE3E60);
  }
  return result;
}

unint64_t sub_23BEC5C88()
{
  unint64_t result;

  result = qword_256AE3E68;
  if (!qword_256AE3E68)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for FullWidthStageViewLayout, &type metadata for FullWidthStageViewLayout);
    atomic_store(result, (unint64_t *)&qword_256AE3E68);
  }
  return result;
}

unint64_t sub_23BEC5CCC()
{
  unint64_t result;

  result = qword_256AE3E70;
  if (!qword_256AE3E70)
  {
    result = MEMORY[0x242615198](&unk_23BFFBCC4, &type metadata for LazyCanvasItemContent.ActionCardCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE3E70);
  }
  return result;
}

unint64_t sub_23BEC5D10()
{
  unint64_t result;

  result = qword_256AE3E78;
  if (!qword_256AE3E78)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for ActionCardViewLayout, &type metadata for ActionCardViewLayout);
    atomic_store(result, (unint64_t *)&qword_256AE3E78);
  }
  return result;
}

uint64_t LazyCanvasItemContent.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD v32[15];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;

  v54 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3E80);
  v45 = *(_QWORD *)(v3 - 8);
  v46 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v52 = (char *)v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3E88);
  v32[14] = *(_QWORD *)(v43 - 8);
  MEMORY[0x24BDAC7A8](v43);
  v59 = (char *)v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3E90);
  v32[13] = *(_QWORD *)(v44 - 8);
  MEMORY[0x24BDAC7A8](v44);
  v53 = (char *)v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3E98);
  v32[12] = *(_QWORD *)(v42 - 8);
  MEMORY[0x24BDAC7A8](v42);
  v58 = (char *)v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3EA0);
  v32[11] = *(_QWORD *)(v41 - 8);
  MEMORY[0x24BDAC7A8](v41);
  v50 = (char *)v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3EA8);
  v32[10] = *(_QWORD *)(v40 - 8);
  MEMORY[0x24BDAC7A8](v40);
  v57 = (char *)v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3EB0);
  v32[9] = *(_QWORD *)(v39 - 8);
  MEMORY[0x24BDAC7A8](v39);
  v51 = (char *)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3EB8);
  v32[8] = *(_QWORD *)(v38 - 8);
  MEMORY[0x24BDAC7A8](v38);
  v56 = (char *)v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3EC0);
  v32[7] = *(_QWORD *)(v37 - 8);
  MEMORY[0x24BDAC7A8](v37);
  v49 = (char *)v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3EC8);
  v34 = *(_QWORD *)(v13 - 8);
  v35 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v48 = (char *)v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3ED0);
  v32[6] = *(_QWORD *)(v36 - 8);
  MEMORY[0x24BDAC7A8](v36);
  v55 = (char *)v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3ED8);
  v32[5] = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v47 = (char *)v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3EE0);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3EE8);
  v21 = *(_QWORD *)(v60 - 8);
  MEMORY[0x24BDAC7A8](v60);
  v23 = (char *)v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = a1[3];
  v61 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v24);
  sub_23BEC56F4();
  v25 = v62;
  sub_23BFF9A0C();
  if (!v25)
  {
    v32[2] = v17;
    v32[3] = v20;
    v32[1] = v18;
    v32[4] = 0;
    v62 = v21;
    v26 = sub_23BFF98D4();
    if (*(_QWORD *)(v26 + 16) == 1)
    {
      v32[0] = v23;
      __asm { BR              X10 }
    }
    v27 = sub_23BFF9784();
    swift_allocError();
    v29 = v28;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3978);
    *v29 = &type metadata for LazyCanvasItemContent;
    v30 = v60;
    sub_23BFF9874();
    sub_23BFF9778();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v27 - 8) + 104))(v29, *MEMORY[0x24BEE26D0], v27);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v62 + 8))(v23, v30);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v61);
}

void sub_23BEC6800()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  *((_BYTE *)v0 + 608) = 11;
  sub_23BEC577C();
  v4 = v2;
  v5 = *v0;
  v6 = v0[4];
  sub_23BFF9868();
  if (v6)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 72) + 8))(v5, v2);
    JUMPOUT(0x23BEC67D8);
  }
  sub_23BEC6F9C();
  v7 = v0[25];
  sub_23BFF98C8();
  v8 = *(_QWORD *)(v3 - 72);
  (*(void (**)(uint64_t, uint64_t))(v0[14] + 8))(v1, v7);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v5, v4);
  v9 = *((_OWORD *)v0 + 27);
  *((_OWORD *)v0 + 42) = *((_OWORD *)v0 + 26);
  *((_OWORD *)v0 + 43) = v9;
  v10 = *((_OWORD *)v0 + 29);
  *((_OWORD *)v0 + 44) = *((_OWORD *)v0 + 28);
  *((_OWORD *)v0 + 45) = v10;
  v11 = *((_OWORD *)v0 + 23);
  *((_OWORD *)v0 + 38) = *((_OWORD *)v0 + 22);
  *((_OWORD *)v0 + 39) = v11;
  v12 = *((_OWORD *)v0 + 25);
  *((_OWORD *)v0 + 40) = *((_OWORD *)v0 + 24);
  *((_OWORD *)v0 + 41) = v12;
  sub_23BEA5AD0((uint64_t)(v0 + 76));
  sub_23BEA44DC((__int128 *)v0 + 38, (uint64_t)(v0 + 108));
  JUMPOUT(0x23BEC6F8CLL);
}

void sub_23BEC686C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *((_BYTE *)v0 + 352) = 12;
  sub_23BEC5738();
  v3 = v0[34];
  v4 = *v0;
  v5 = v0[4];
  sub_23BFF9868();
  if (v5)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 72) + 8))(v4, v1);
    JUMPOUT(0x23BEC67D8);
  }
  (*(void (**)(uint64_t, uint64_t))(v0[27] + 8))(v3, v0[28]);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 72) + 8))(v4, v1);
  sub_23BEA59F4((uint64_t)(v0 + 76));
  JUMPOUT(0x23BEC6F7CLL);
}

unint64_t sub_23BEC6F9C()
{
  unint64_t result;

  result = qword_256AE3EF0;
  if (!qword_256AE3EF0)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for VerticalStackCardLayout, &type metadata for VerticalStackCardLayout);
    atomic_store(result, (unint64_t *)&qword_256AE3EF0);
  }
  return result;
}

unint64_t sub_23BEC6FE0()
{
  unint64_t result;

  result = qword_256AE3EF8;
  if (!qword_256AE3EF8)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for TallCardViewLayout, &type metadata for TallCardViewLayout);
    atomic_store(result, (unint64_t *)&qword_256AE3EF8);
  }
  return result;
}

unint64_t sub_23BEC7024()
{
  unint64_t result;

  result = qword_256AE3F00;
  if (!qword_256AE3F00)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for StandardVerticalStackViewLayout, &type metadata for StandardVerticalStackViewLayout);
    atomic_store(result, (unint64_t *)&qword_256AE3F00);
  }
  return result;
}

unint64_t sub_23BEC7068()
{
  unint64_t result;

  result = qword_256AE3F08;
  if (!qword_256AE3F08)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for StandardHorizontalStackViewLayout, &type metadata for StandardHorizontalStackViewLayout);
    atomic_store(result, (unint64_t *)&qword_256AE3F08);
  }
  return result;
}

unint64_t sub_23BEC70AC()
{
  unint64_t result;

  result = qword_256AE3F10;
  if (!qword_256AE3F10)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for StandardCardViewLayout, &type metadata for StandardCardViewLayout);
    atomic_store(result, (unint64_t *)&qword_256AE3F10);
  }
  return result;
}

unint64_t sub_23BEC70F0()
{
  unint64_t result;

  result = qword_256AE3F18;
  if (!qword_256AE3F18)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for DynamicBrickViewLayout, &type metadata for DynamicBrickViewLayout);
    atomic_store(result, (unint64_t *)&qword_256AE3F18);
  }
  return result;
}

unint64_t sub_23BEC7134()
{
  unint64_t result;

  result = qword_256AE3F20;
  if (!qword_256AE3F20)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for MonogramVerticalStackViewLayout, &type metadata for MonogramVerticalStackViewLayout);
    atomic_store(result, (unint64_t *)&qword_256AE3F20);
  }
  return result;
}

unint64_t sub_23BEC7178()
{
  unint64_t result;

  result = qword_256AE3F28;
  if (!qword_256AE3F28)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for InfoActionCardViewLayout, &type metadata for InfoActionCardViewLayout);
    atomic_store(result, (unint64_t *)&qword_256AE3F28);
  }
  return result;
}

unint64_t sub_23BEC71BC()
{
  unint64_t result;

  result = qword_256AE3F30;
  if (!qword_256AE3F30)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for FullWidthStageViewLayout, &type metadata for FullWidthStageViewLayout);
    atomic_store(result, (unint64_t *)&qword_256AE3F30);
  }
  return result;
}

unint64_t sub_23BEC7200()
{
  unint64_t result;

  result = qword_256AE3F38;
  if (!qword_256AE3F38)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for ActionCardViewLayout, &type metadata for ActionCardViewLayout);
    atomic_store(result, (unint64_t *)&qword_256AE3F38);
  }
  return result;
}

uint64_t sub_23BEC7244@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return LazyCanvasItemContent.init(from:)(a1, a2);
}

void sub_23BEC7258(_QWORD *a1)
{
  LazyCanvasItemContent.encode(to:)(a1);
}

void LazyCanvasItemContent.hash(into:)()
{
  __int128 *v0;
  char *v1;
  __int128 v2[16];
  _BYTE v3[256];

  sub_23BEA44DC(v0, (uint64_t)v2);
  sub_23BEA44DC(v2, (uint64_t)v3);
  v1 = (char *)sub_23BEC72D0 + 4 * byte_23BFFB0B2[sub_23BEA4518((uint64_t)v3)];
  __asm { BR              X10 }
}

uint64_t sub_23BEC72D0()
{
  uint64_t v1;

  ((void (*)(uint64_t *))nullsub_1)(&v1);
  sub_23BFF99DC();
  return ActionCardViewLayout.hash(into:)();
}

uint64_t LazyCanvasItemContent.hashValue.getter()
{
  __int128 *v0;
  _BYTE v2[256];
  __int128 v3[16];

  sub_23BEA44DC(v0, (uint64_t)v3);
  sub_23BEA44DC(v3, (uint64_t)v2);
  sub_23BFF99D0();
  LazyCanvasItemContent.hash(into:)();
  return sub_23BFF9A00();
}

uint64_t sub_23BEC76D4()
{
  __int128 *v0;
  _BYTE v2[256];
  __int128 v3[16];

  sub_23BEA44DC(v0, (uint64_t)v3);
  sub_23BEA44DC(v3, (uint64_t)v2);
  sub_23BFF99D0();
  LazyCanvasItemContent.hash(into:)();
  return sub_23BFF9A00();
}

uint64_t sub_23BEC7730()
{
  sub_23BFF99D0();
  LazyCanvasItemContent.hash(into:)();
  return sub_23BFF9A00();
}

void _s15FitnessCanvasUI04LazyB11ItemContentO2eeoiySbAC_ACtFZ_0(__int128 *a1, __int128 *a2)
{
  char *v3;
  __int128 v4[16];
  _BYTE v5[256];
  _BYTE v6[256];

  sub_23BEA44DC(a1, (uint64_t)v4);
  sub_23BEA44DC(a2, (uint64_t)v5);
  sub_23BEA44DC(v4, (uint64_t)v6);
  v3 = (char *)sub_23BEC77DC + 4 * word_23BFFB0C0[sub_23BEA4518((uint64_t)v6)];
  __asm { BR              X10 }
}

BOOL sub_23BEC77DC()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD v18[15];
  uint64_t v19;
  _OWORD v20[15];
  uint64_t v21;
  _BYTE v22[512];
  __int128 v23;
  uint64_t v24;

  v0 = ((uint64_t (*)(uint64_t *))nullsub_1)(&v24);
  sub_23BEA44DC(&v23, (uint64_t)v22);
  if (sub_23BEA4518((uint64_t)v22))
  {
    return 0;
  }
  else
  {
    v1 = ((uint64_t (*)(_BYTE *))nullsub_1)(v22);
    v2 = *(_OWORD *)(v0 + 208);
    v20[12] = *(_OWORD *)(v0 + 192);
    v20[13] = v2;
    v20[14] = *(_OWORD *)(v0 + 224);
    v21 = *(_QWORD *)(v0 + 240);
    v3 = *(_OWORD *)(v0 + 144);
    v20[8] = *(_OWORD *)(v0 + 128);
    v20[9] = v3;
    v4 = *(_OWORD *)(v0 + 176);
    v20[10] = *(_OWORD *)(v0 + 160);
    v20[11] = v4;
    v5 = *(_OWORD *)(v0 + 80);
    v20[4] = *(_OWORD *)(v0 + 64);
    v20[5] = v5;
    v6 = *(_OWORD *)(v0 + 112);
    v20[6] = *(_OWORD *)(v0 + 96);
    v20[7] = v6;
    v7 = *(_OWORD *)(v0 + 16);
    v20[0] = *(_OWORD *)v0;
    v20[1] = v7;
    v8 = *(_OWORD *)(v0 + 48);
    v20[2] = *(_OWORD *)(v0 + 32);
    v20[3] = v8;
    v9 = *(_OWORD *)(v1 + 208);
    v18[12] = *(_OWORD *)(v1 + 192);
    v18[13] = v9;
    v18[14] = *(_OWORD *)(v1 + 224);
    v19 = *(_QWORD *)(v1 + 240);
    v10 = *(_OWORD *)(v1 + 144);
    v18[8] = *(_OWORD *)(v1 + 128);
    v18[9] = v10;
    v11 = *(_OWORD *)(v1 + 176);
    v18[10] = *(_OWORD *)(v1 + 160);
    v18[11] = v11;
    v12 = *(_OWORD *)(v1 + 80);
    v18[4] = *(_OWORD *)(v1 + 64);
    v18[5] = v12;
    v13 = *(_OWORD *)(v1 + 112);
    v18[6] = *(_OWORD *)(v1 + 96);
    v18[7] = v13;
    v14 = *(_OWORD *)(v1 + 16);
    v18[0] = *(_OWORD *)v1;
    v18[1] = v14;
    v15 = *(_OWORD *)(v1 + 48);
    v18[2] = *(_OWORD *)(v1 + 32);
    v18[3] = v15;
    return _s15FitnessCanvasUI20ActionCardViewLayoutV2eeoiySbAC_ACtFZ_0((uint64_t)v20, (uint64_t)v18);
  }
}

unint64_t sub_23BEC7E0C()
{
  unint64_t result;

  result = qword_256AE3F40;
  if (!qword_256AE3F40)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for LazyCanvasItemContent, &type metadata for LazyCanvasItemContent);
    atomic_store(result, (unint64_t *)&qword_256AE3F40);
  }
  return result;
}

__n128 __swift_memcpy249_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __n128 result;
  __int128 v12;
  __int128 v13;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  v8 = a2[8];
  v9 = a2[9];
  v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  result = (__n128)a2[12];
  v12 = a2[13];
  v13 = a2[14];
  *(_OWORD *)(a1 + 233) = *(__int128 *)((char *)a2 + 233);
  *(_OWORD *)(a1 + 208) = v12;
  *(_OWORD *)(a1 + 224) = v13;
  *(__n128 *)(a1 + 192) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for LazyCanvasItemContent(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xF5 && *(_BYTE *)(a1 + 249))
    return (*(_DWORD *)a1 + 245);
  v3 = *(unsigned __int8 *)(a1 + 248);
  if (v3 >= 0xC)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for LazyCanvasItemContent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF4)
  {
    *(_OWORD *)(result + 233) = 0u;
    *(_OWORD *)(result + 208) = 0u;
    *(_OWORD *)(result + 224) = 0u;
    *(_OWORD *)(result + 176) = 0u;
    *(_OWORD *)(result + 192) = 0u;
    *(_OWORD *)(result + 144) = 0u;
    *(_OWORD *)(result + 160) = 0u;
    *(_OWORD *)(result + 112) = 0u;
    *(_OWORD *)(result + 128) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    *(_DWORD *)result = a2 - 245;
    if (a3 >= 0xF5)
      *(_BYTE *)(result + 249) = 1;
  }
  else
  {
    if (a3 >= 0xF5)
      *(_BYTE *)(result + 249) = 0;
    if (a2)
      *(_BYTE *)(result + 248) = -(char)a2;
  }
  return result;
}

uint64_t sub_23BEC7F40(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 248);
  if (result >= 0xB)
    return (*(_DWORD *)a1 + 11);
  return result;
}

uint64_t sub_23BEC7F5C(uint64_t result, unsigned int a2)
{
  if (a2 > 0xA)
  {
    *(_QWORD *)(result + 240) = 0;
    *(_OWORD *)(result + 208) = 0u;
    *(_OWORD *)(result + 224) = 0u;
    *(_OWORD *)(result + 176) = 0u;
    *(_OWORD *)(result + 192) = 0u;
    *(_OWORD *)(result + 144) = 0u;
    *(_OWORD *)(result + 160) = 0u;
    *(_OWORD *)(result + 112) = 0u;
    *(_OWORD *)(result + 128) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    *(_DWORD *)result = a2 - 11;
    LOBYTE(a2) = 11;
  }
  *(_BYTE *)(result + 248) = a2;
  return result;
}

ValueMetadata *type metadata accessor for LazyCanvasItemContent()
{
  return &type metadata for LazyCanvasItemContent;
}

uint64_t getEnumTagSinglePayload for LazyCanvasItemContent.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF4)
    goto LABEL_17;
  if (a2 + 12 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 12) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 12;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 12;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 12;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xD;
  v8 = v6 - 13;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for LazyCanvasItemContent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 12 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 12) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF4)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF3)
    return ((uint64_t (*)(void))((char *)&loc_23BEC808C + 4 * byte_23BFFB0DF[v4]))();
  *a1 = a2 + 12;
  return ((uint64_t (*)(void))((char *)sub_23BEC80C0 + 4 * byte_23BFFB0DA[v4]))();
}

uint64_t sub_23BEC80C0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BEC80C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BEC80D0);
  return result;
}

uint64_t sub_23BEC80DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BEC80E4);
  *(_BYTE *)result = a2 + 12;
  return result;
}

uint64_t sub_23BEC80E8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BEC80F0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LazyCanvasItemContent.CodingKeys()
{
  return &type metadata for LazyCanvasItemContent.CodingKeys;
}

ValueMetadata *type metadata accessor for LazyCanvasItemContent.ActionCardCodingKeys()
{
  return &type metadata for LazyCanvasItemContent.ActionCardCodingKeys;
}

ValueMetadata *type metadata accessor for LazyCanvasItemContent.FullWidthStageCodingKeys()
{
  return &type metadata for LazyCanvasItemContent.FullWidthStageCodingKeys;
}

ValueMetadata *type metadata accessor for LazyCanvasItemContent.InfoActionCardCodingKeys()
{
  return &type metadata for LazyCanvasItemContent.InfoActionCardCodingKeys;
}

ValueMetadata *type metadata accessor for LazyCanvasItemContent.LargeBrickCodingKeys()
{
  return &type metadata for LazyCanvasItemContent.LargeBrickCodingKeys;
}

ValueMetadata *type metadata accessor for LazyCanvasItemContent.MediumDynamicBrickCodingKeys()
{
  return &type metadata for LazyCanvasItemContent.MediumDynamicBrickCodingKeys;
}

ValueMetadata *type metadata accessor for LazyCanvasItemContent.MonogramVerticalStackCodingKeys()
{
  return &type metadata for LazyCanvasItemContent.MonogramVerticalStackCodingKeys;
}

ValueMetadata *type metadata accessor for LazyCanvasItemContent.SmallDynamicBrickCodingKeys()
{
  return &type metadata for LazyCanvasItemContent.SmallDynamicBrickCodingKeys;
}

ValueMetadata *type metadata accessor for LazyCanvasItemContent.StandardCardCodingKeys()
{
  return &type metadata for LazyCanvasItemContent.StandardCardCodingKeys;
}

ValueMetadata *type metadata accessor for LazyCanvasItemContent.StandardHorizontalStackCodingKeys()
{
  return &type metadata for LazyCanvasItemContent.StandardHorizontalStackCodingKeys;
}

ValueMetadata *type metadata accessor for LazyCanvasItemContent.StandardVerticalStackCodingKeys()
{
  return &type metadata for LazyCanvasItemContent.StandardVerticalStackCodingKeys;
}

ValueMetadata *type metadata accessor for LazyCanvasItemContent.TallCardCodingKeys()
{
  return &type metadata for LazyCanvasItemContent.TallCardCodingKeys;
}

uint64_t _s15FitnessCanvasUI21LazyCanvasItemContentO20ActionCardCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23BEC8204 + 4 * byte_23BFFB0E4[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23BEC8224 + 4 * byte_23BFFB0E9[v4]))();
}

_BYTE *sub_23BEC8204(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23BEC8224(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BEC822C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BEC8234(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BEC823C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BEC8244(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for LazyCanvasItemContent.VerticalStackCardCodingKeys()
{
  return &type metadata for LazyCanvasItemContent.VerticalStackCardCodingKeys;
}

ValueMetadata *type metadata accessor for LazyCanvasItemContent.WideBrickCodingKeys()
{
  return &type metadata for LazyCanvasItemContent.WideBrickCodingKeys;
}

unint64_t sub_23BEC8274()
{
  unint64_t result;

  result = qword_256AE3F48;
  if (!qword_256AE3F48)
  {
    result = MEMORY[0x242615198](&unk_23BFFB464, &type metadata for LazyCanvasItemContent.VerticalStackCardCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE3F48);
  }
  return result;
}

unint64_t sub_23BEC82BC()
{
  unint64_t result;

  result = qword_256AE3F50;
  if (!qword_256AE3F50)
  {
    result = MEMORY[0x242615198](&unk_23BFFB51C, &type metadata for LazyCanvasItemContent.TallCardCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE3F50);
  }
  return result;
}

unint64_t sub_23BEC8304()
{
  unint64_t result;

  result = qword_256AE3F58;
  if (!qword_256AE3F58)
  {
    result = MEMORY[0x242615198](&unk_23BFFB5D4, &type metadata for LazyCanvasItemContent.StandardVerticalStackCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE3F58);
  }
  return result;
}

unint64_t sub_23BEC834C()
{
  unint64_t result;

  result = qword_256AE3F60;
  if (!qword_256AE3F60)
  {
    result = MEMORY[0x242615198](&unk_23BFFB68C, &type metadata for LazyCanvasItemContent.StandardHorizontalStackCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE3F60);
  }
  return result;
}

unint64_t sub_23BEC8394()
{
  unint64_t result;

  result = qword_256AE3F68;
  if (!qword_256AE3F68)
  {
    result = MEMORY[0x242615198](&unk_23BFFB744, &type metadata for LazyCanvasItemContent.StandardCardCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE3F68);
  }
  return result;
}

unint64_t sub_23BEC83DC()
{
  unint64_t result;

  result = qword_256AE3F70;
  if (!qword_256AE3F70)
  {
    result = MEMORY[0x242615198](&unk_23BFFB7FC, &type metadata for LazyCanvasItemContent.SmallDynamicBrickCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE3F70);
  }
  return result;
}

unint64_t sub_23BEC8424()
{
  unint64_t result;

  result = qword_256AE3F78;
  if (!qword_256AE3F78)
  {
    result = MEMORY[0x242615198](&unk_23BFFB8B4, &type metadata for LazyCanvasItemContent.MonogramVerticalStackCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE3F78);
  }
  return result;
}

unint64_t sub_23BEC846C()
{
  unint64_t result;

  result = qword_256AE3F80;
  if (!qword_256AE3F80)
  {
    result = MEMORY[0x242615198](&unk_23BFFB96C, &type metadata for LazyCanvasItemContent.MediumDynamicBrickCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE3F80);
  }
  return result;
}

unint64_t sub_23BEC84B4()
{
  unint64_t result;

  result = qword_256AE3F88;
  if (!qword_256AE3F88)
  {
    result = MEMORY[0x242615198](&unk_23BFFBA74, &type metadata for LazyCanvasItemContent.InfoActionCardCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE3F88);
  }
  return result;
}

unint64_t sub_23BEC84FC()
{
  unint64_t result;

  result = qword_256AE3F90;
  if (!qword_256AE3F90)
  {
    result = MEMORY[0x242615198](&unk_23BFFBB2C, &type metadata for LazyCanvasItemContent.FullWidthStageCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE3F90);
  }
  return result;
}

unint64_t sub_23BEC8544()
{
  unint64_t result;

  result = qword_256AE3F98;
  if (!qword_256AE3F98)
  {
    result = MEMORY[0x242615198](&unk_23BFFBBE4, &type metadata for LazyCanvasItemContent.ActionCardCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE3F98);
  }
  return result;
}

unint64_t sub_23BEC858C()
{
  unint64_t result;

  result = qword_256AE3FA0;
  if (!qword_256AE3FA0)
  {
    result = MEMORY[0x242615198](&unk_23BFFBC9C, &type metadata for LazyCanvasItemContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE3FA0);
  }
  return result;
}

unint64_t sub_23BEC85D4()
{
  unint64_t result;

  result = qword_256AE3FA8;
  if (!qword_256AE3FA8)
  {
    result = MEMORY[0x242615198](&unk_23BFFBB54, &type metadata for LazyCanvasItemContent.ActionCardCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE3FA8);
  }
  return result;
}

unint64_t sub_23BEC861C()
{
  unint64_t result;

  result = qword_256AE3FB0;
  if (!qword_256AE3FB0)
  {
    result = MEMORY[0x242615198](&unk_23BFFBB7C, &type metadata for LazyCanvasItemContent.ActionCardCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE3FB0);
  }
  return result;
}

unint64_t sub_23BEC8664()
{
  unint64_t result;

  result = qword_256AE3FB8;
  if (!qword_256AE3FB8)
  {
    result = MEMORY[0x242615198](&unk_23BFFBA9C, &type metadata for LazyCanvasItemContent.FullWidthStageCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE3FB8);
  }
  return result;
}

unint64_t sub_23BEC86AC()
{
  unint64_t result;

  result = qword_256AE3FC0;
  if (!qword_256AE3FC0)
  {
    result = MEMORY[0x242615198](&unk_23BFFBAC4, &type metadata for LazyCanvasItemContent.FullWidthStageCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE3FC0);
  }
  return result;
}

unint64_t sub_23BEC86F4()
{
  unint64_t result;

  result = qword_256AE3FC8;
  if (!qword_256AE3FC8)
  {
    result = MEMORY[0x242615198](&unk_23BFFB9E4, &type metadata for LazyCanvasItemContent.InfoActionCardCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE3FC8);
  }
  return result;
}

unint64_t sub_23BEC873C()
{
  unint64_t result;

  result = qword_256AE3FD0;
  if (!qword_256AE3FD0)
  {
    result = MEMORY[0x242615198](&unk_23BFFBA0C, &type metadata for LazyCanvasItemContent.InfoActionCardCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE3FD0);
  }
  return result;
}

unint64_t sub_23BEC8784()
{
  unint64_t result;

  result = qword_256AE3FD8;
  if (!qword_256AE3FD8)
  {
    result = MEMORY[0x242615198](&unk_23BFFB994, &type metadata for LazyCanvasItemContent.LargeBrickCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE3FD8);
  }
  return result;
}

unint64_t sub_23BEC87CC()
{
  unint64_t result;

  result = qword_256AE3FE0;
  if (!qword_256AE3FE0)
  {
    result = MEMORY[0x242615198](&unk_23BFFB9BC, &type metadata for LazyCanvasItemContent.LargeBrickCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE3FE0);
  }
  return result;
}

unint64_t sub_23BEC8814()
{
  unint64_t result;

  result = qword_256AE3FE8;
  if (!qword_256AE3FE8)
  {
    result = MEMORY[0x242615198](&unk_23BFFB8DC, &type metadata for LazyCanvasItemContent.MediumDynamicBrickCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE3FE8);
  }
  return result;
}

unint64_t sub_23BEC885C()
{
  unint64_t result;

  result = qword_256AE3FF0;
  if (!qword_256AE3FF0)
  {
    result = MEMORY[0x242615198](&unk_23BFFB904, &type metadata for LazyCanvasItemContent.MediumDynamicBrickCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE3FF0);
  }
  return result;
}

unint64_t sub_23BEC88A4()
{
  unint64_t result;

  result = qword_256AE3FF8;
  if (!qword_256AE3FF8)
  {
    result = MEMORY[0x242615198](&unk_23BFFB824, &type metadata for LazyCanvasItemContent.MonogramVerticalStackCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE3FF8);
  }
  return result;
}

unint64_t sub_23BEC88EC()
{
  unint64_t result;

  result = qword_256AE4000;
  if (!qword_256AE4000)
  {
    result = MEMORY[0x242615198](&unk_23BFFB84C, &type metadata for LazyCanvasItemContent.MonogramVerticalStackCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE4000);
  }
  return result;
}

unint64_t sub_23BEC8934()
{
  unint64_t result;

  result = qword_256AE4008;
  if (!qword_256AE4008)
  {
    result = MEMORY[0x242615198](&unk_23BFFB76C, &type metadata for LazyCanvasItemContent.SmallDynamicBrickCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE4008);
  }
  return result;
}

unint64_t sub_23BEC897C()
{
  unint64_t result;

  result = qword_256AE4010;
  if (!qword_256AE4010)
  {
    result = MEMORY[0x242615198](&unk_23BFFB794, &type metadata for LazyCanvasItemContent.SmallDynamicBrickCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE4010);
  }
  return result;
}

unint64_t sub_23BEC89C4()
{
  unint64_t result;

  result = qword_256AE4018;
  if (!qword_256AE4018)
  {
    result = MEMORY[0x242615198](&unk_23BFFB6B4, &type metadata for LazyCanvasItemContent.StandardCardCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE4018);
  }
  return result;
}

unint64_t sub_23BEC8A0C()
{
  unint64_t result;

  result = qword_256AE4020;
  if (!qword_256AE4020)
  {
    result = MEMORY[0x242615198](&unk_23BFFB6DC, &type metadata for LazyCanvasItemContent.StandardCardCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE4020);
  }
  return result;
}

unint64_t sub_23BEC8A54()
{
  unint64_t result;

  result = qword_256AE4028;
  if (!qword_256AE4028)
  {
    result = MEMORY[0x242615198](&unk_23BFFB5FC, &type metadata for LazyCanvasItemContent.StandardHorizontalStackCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE4028);
  }
  return result;
}

unint64_t sub_23BEC8A9C()
{
  unint64_t result;

  result = qword_256AE4030;
  if (!qword_256AE4030)
  {
    result = MEMORY[0x242615198](&unk_23BFFB624, &type metadata for LazyCanvasItemContent.StandardHorizontalStackCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE4030);
  }
  return result;
}

unint64_t sub_23BEC8AE4()
{
  unint64_t result;

  result = qword_256AE4038;
  if (!qword_256AE4038)
  {
    result = MEMORY[0x242615198](&unk_23BFFB544, &type metadata for LazyCanvasItemContent.StandardVerticalStackCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE4038);
  }
  return result;
}

unint64_t sub_23BEC8B2C()
{
  unint64_t result;

  result = qword_256AE4040;
  if (!qword_256AE4040)
  {
    result = MEMORY[0x242615198](&unk_23BFFB56C, &type metadata for LazyCanvasItemContent.StandardVerticalStackCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE4040);
  }
  return result;
}

unint64_t sub_23BEC8B74()
{
  unint64_t result;

  result = qword_256AE4048;
  if (!qword_256AE4048)
  {
    result = MEMORY[0x242615198](&unk_23BFFB48C, &type metadata for LazyCanvasItemContent.TallCardCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE4048);
  }
  return result;
}

unint64_t sub_23BEC8BBC()
{
  unint64_t result;

  result = qword_256AE4050;
  if (!qword_256AE4050)
  {
    result = MEMORY[0x242615198](&unk_23BFFB4B4, &type metadata for LazyCanvasItemContent.TallCardCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE4050);
  }
  return result;
}

unint64_t sub_23BEC8C04()
{
  unint64_t result;

  result = qword_256AE4058;
  if (!qword_256AE4058)
  {
    result = MEMORY[0x242615198](&unk_23BFFB3D4, &type metadata for LazyCanvasItemContent.VerticalStackCardCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE4058);
  }
  return result;
}

unint64_t sub_23BEC8C4C()
{
  unint64_t result;

  result = qword_256AE4060;
  if (!qword_256AE4060)
  {
    result = MEMORY[0x242615198](&unk_23BFFB3FC, &type metadata for LazyCanvasItemContent.VerticalStackCardCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE4060);
  }
  return result;
}

unint64_t sub_23BEC8C94()
{
  unint64_t result;

  result = qword_256AE4068;
  if (!qword_256AE4068)
  {
    result = MEMORY[0x242615198](&unk_23BFFB384, &type metadata for LazyCanvasItemContent.WideBrickCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE4068);
  }
  return result;
}

unint64_t sub_23BEC8CDC()
{
  unint64_t result;

  result = qword_256AE4070;
  if (!qword_256AE4070)
  {
    result = MEMORY[0x242615198](&unk_23BFFB3AC, &type metadata for LazyCanvasItemContent.WideBrickCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE4070);
  }
  return result;
}

unint64_t sub_23BEC8D24()
{
  unint64_t result;

  result = qword_256AE4078;
  if (!qword_256AE4078)
  {
    result = MEMORY[0x242615198](&unk_23BFFBC0C, &type metadata for LazyCanvasItemContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE4078);
  }
  return result;
}

unint64_t sub_23BEC8D6C()
{
  unint64_t result;

  result = qword_256AE4080;
  if (!qword_256AE4080)
  {
    result = MEMORY[0x242615198](&unk_23BFFBC34, &type metadata for LazyCanvasItemContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE4080);
  }
  return result;
}

uint64_t sub_23BEC8DB0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x61436E6F69746361 && a2 == 0xEA00000000006472;
  if (v2 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746469576C6C7566 && a2 == 0xEE00656761745368 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x697463416F666E69 && a2 == 0xEE00647261436E6FLL || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x697242656772616CLL && a2 == 0xEA00000000006B63 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000023C01EC80 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000023C01ECA0 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000023C01ECC0 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x647261646E617473 && a2 == 0xEC00000064726143 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x800000023C01ECE0 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000023C01ED00 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x647261436C6C6174 && a2 == 0xE800000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000023C01ED20 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x6369724265646977 && a2 == 0xE90000000000006BLL)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else
  {
    v6 = sub_23BFF9964();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 12;
    else
      return 13;
  }
}

uint64_t CanvasSectionDescriptor.identifier.getter()
{
  uint64_t v0;

  v0 = sub_23BEAC9E8();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t CanvasSectionDescriptor.layout.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v5 = v3 + *(int *)(a1 + 180);
  v6 = type metadata accessor for CanvasSectionLayout(0, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 152), a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a3, v5, v6);
}

void CanvasSectionDescriptor.header.getter()
{
  type metadata accessor for CanvasSectionHeader();
}

uint64_t sub_23BEC93D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_23BFF96A0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v0, v1, v2);
}

uint64_t CanvasSectionDescriptor.footer.getter@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  *a2 = *(_BYTE *)(v2 + *(int *)(result + 188));
  return result;
}

uint64_t CanvasSectionDescriptor.items.getter(uint64_t a1)
{
  sub_23BECBFC8(a1);
  return swift_bridgeObjectRetain();
}

uint64_t CanvasSectionDescriptor.items.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;

  v4 = *(int *)(a2 + 192);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + v4) = a1;
  return result;
}

uint64_t (*CanvasSectionDescriptor.items.modify())()
{
  return nullsub_1;
}

uint64_t CanvasSectionDescriptor.metrics.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 196);
  v5 = sub_23BFF96A0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t CanvasSectionDescriptor.redactionReasons.getter(uint64_t a1)
{
  sub_23BECBFD4(a1);
  return swift_bridgeObjectRetain();
}

void CanvasSectionDescriptor.init(identifier:layout:header:footer:items:metrics:redactionReasons:)(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = a1;
  a3[1] = a2;
  type metadata accessor for CanvasSectionDescriptor();
}

void sub_23BEC956C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v13 = v10 + *(int *)(a1 + 180);
  v14 = type metadata accessor for CanvasSectionLayout(0, v12, v11, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v13, a10, v14);
  type metadata accessor for CanvasSectionHeader();
}

uint64_t sub_23BEC95BC()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = sub_23BFF96A0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(v0, v8, v3);
  *(_BYTE *)(v1 + v2[47]) = v7;
  *(_QWORD *)(v1 + v2[48]) = v9;
  v4 = v1 + v2[49];
  v5 = sub_23BFF96A0();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v4, v10, v5);
  *(_QWORD *)(v1 + v2[50]) = v11;
  return result;
}

uint64_t sub_23BEC9650(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x74756F79616CLL && a2 == 0xE600000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x726564616568 && a2 == 0xE600000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7265746F6F66 && a2 == 0xE600000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x736D657469 && a2 == 0xE500000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x7363697274656DLL && a2 == 0xE700000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000023C01ED40)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v6 = sub_23BFF9964();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t sub_23BEC991C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23BEC9954 + 4 * byte_23BFFC130[a1]))(0x696669746E656469, 0xEA00000000007265);
}

uint64_t sub_23BEC9954()
{
  return 0x74756F79616CLL;
}

uint64_t sub_23BEC9968()
{
  return 0x726564616568;
}

uint64_t sub_23BEC997C()
{
  return 0x7265746F6F66;
}

uint64_t sub_23BEC9990()
{
  return 0x736D657469;
}

uint64_t sub_23BEC99A4()
{
  return 0x7363697274656DLL;
}

unint64_t sub_23BEC99BC()
{
  return 0xD000000000000010;
}

BOOL sub_23BEC99D8(char *a1, char *a2)
{
  return sub_23BEAAB9C(*a1, *a2);
}

uint64_t sub_23BEC9A30()
{
  return sub_23BEAADE0();
}

uint64_t sub_23BEC9A8C()
{
  return sub_23BEAABAC();
}

uint64_t sub_23BEC9AD8()
{
  sub_23BFF99D0();
  sub_23BEAABAC();
  return sub_23BFF9A00();
}

uint64_t sub_23BEC9B44()
{
  unsigned __int8 *v0;

  return sub_23BEC991C(*v0);
}

uint64_t sub_23BEC9BA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BEC9650(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BEC9BFC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23BECBFEC();
  *a1 = result;
  return result;
}

uint64_t sub_23BEC9C5C(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23BFFC580, a1);
  return sub_23BFF9A30();
}

uint64_t sub_23BEC9C90(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23BFFC580, a1);
  return sub_23BFF9A3C();
}

uint64_t sub_23BEC9CC4()
{
  uint64_t v0;

  v0 = sub_23BEAC9E8();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_23BEC9D04(uint64_t a1)
{
  sub_23BECBFC8(a1);
  return swift_bridgeObjectRetain();
}

uint64_t sub_23BEC9D1C(uint64_t a1)
{
  sub_23BECBFD4(a1);
  return swift_bridgeObjectRetain();
}

void CanvasSectionDescriptor.encode(to:)()
{
  type metadata accessor for CanvasSectionDescriptor.CodingKeys();
}

uint64_t sub_23BEC9E64(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  MEMORY[0x242615198](&unk_23BFFC580, a1);
  v3 = sub_23BFF994C();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v14 - v5;
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  sub_23BFF9A18();
  *(_BYTE *)(v2 - 248) = 0;
  v7 = *(_QWORD *)(v2 - 272);
  sub_23BFF9910();
  if (!v7)
  {
    v9 = *(_QWORD *)(v2 - 296);
    *(_BYTE *)(v2 - 248) = 1;
    v10 = type metadata accessor for CanvasSectionLayout(0, *(_QWORD *)(v2 - 288), *(_QWORD *)(v2 - 304), v8);
    MEMORY[0x242615198](&protocol conformance descriptor for CanvasSectionLayout<A>, v10);
    sub_23BFF9940();
    *(_BYTE *)(v2 - 72) = 2;
    v11 = *(_QWORD *)(v2 - 320);
    *(_QWORD *)(v2 - 248) = v9;
    *(_QWORD *)(v2 - 240) = v11;
    v12 = *(_QWORD *)(v2 - 328);
    *(_QWORD *)(v2 - 232) = *(_QWORD *)(v2 - 312);
    *(_QWORD *)(v2 - 224) = v12;
    type metadata accessor for CanvasSectionHeader();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void CanvasSectionDescriptor.init(from:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v23;
  _QWORD v24[3];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v38 = a8;
  v27 = a7;
  v44 = a6;
  v36 = a5;
  v34 = a4;
  v32 = a3;
  v37 = a1;
  v24[0] = a9;
  v45 = a22;
  v40 = a19;
  v43 = a18;
  v35 = a17;
  v33 = a16;
  v42 = a15;
  v30 = a14;
  v29 = a13;
  v39 = a21;
  v41 = a11;
  v25 = sub_23BFF96A0();
  v24[2] = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v24[1] = (char *)v24 - v23;
  v46 = a2;
  v47 = a10;
  v31 = a2;
  v26 = a10;
  v48 = a12;
  v49 = a21;
  v28 = a12;
  type metadata accessor for CanvasSectionHeader();
}

void sub_23BECA38C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  *(_QWORD *)(v15 - 504) = a1;
  v16 = sub_23BFF96A0();
  *(_QWORD *)(v15 - 464) = v16;
  *(_QWORD *)(v15 - 512) = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  *(_QWORD *)(v15 - 496) = (char *)&a9 - v17;
  v18 = *(_QWORD *)(v15 - 320);
  *(_QWORD *)(v15 - 432) = v9;
  v20 = type metadata accessor for CanvasSectionLayout(0, v18, v9, v19);
  *(_QWORD *)(v15 - 456) = v20;
  *(_QWORD *)(v15 - 472) = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  *(_QWORD *)(v15 - 480) = (char *)&a9 - v21;
  *(_QWORD *)(v15 - 248) = v13;
  *(_QWORD *)(v15 - 240) = v14;
  v22 = *(_QWORD *)(v15 - 336);
  *(_QWORD *)(v15 - 232) = *(_QWORD *)(v15 - 352);
  *(_QWORD *)(v15 - 224) = v22;
  v23 = *(_QWORD *)(v15 - 408);
  *(_QWORD *)(v15 - 216) = *(_QWORD *)(v15 - 272);
  *(_QWORD *)(v15 - 208) = v23;
  *(_QWORD *)(v15 - 200) = v18;
  *(_QWORD *)(v15 - 192) = v10;
  *(_QWORD *)(v15 - 184) = *(_QWORD *)(v15 - 296);
  *(_QWORD *)(v15 - 176) = v12;
  *(_QWORD *)(v15 - 168) = v11;
  v24 = *(_QWORD *)(v15 - 288);
  *(_QWORD *)(v15 - 160) = *(_QWORD *)(v15 - 384);
  *(_QWORD *)(v15 - 152) = v24;
  v25 = *(_QWORD *)(v15 - 344);
  *(_QWORD *)(v15 - 144) = *(_QWORD *)(v15 - 360);
  *(_QWORD *)(v15 - 136) = v25;
  v26 = *(_QWORD *)(v15 - 304);
  *(_QWORD *)(v15 - 128) = *(_QWORD *)(v15 - 280);
  *(_QWORD *)(v15 - 120) = v26;
  v27 = *(_QWORD *)(v15 - 312);
  *(_QWORD *)(v15 - 112) = v9;
  *(_QWORD *)(v15 - 104) = v27;
  *(_QWORD *)(v15 - 96) = *(_QWORD *)(v15 - 264);
  type metadata accessor for CanvasSectionDescriptor.CodingKeys();
}

void sub_23BECA4E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v7 - 424) = MEMORY[0x242615198](&unk_23BFFC580, a1);
  v8 = sub_23BFF98E0();
  *(_QWORD *)(v7 - 448) = v8;
  *(_QWORD *)(v7 - 488) = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v9 = *(_QWORD *)(v7 - 368);
  *(_QWORD *)(v7 - 248) = *(_QWORD *)(v7 - 376);
  *(_QWORD *)(v7 - 240) = v9;
  *(_QWORD *)(v7 - 232) = v6;
  *(_QWORD *)(v7 - 224) = v5;
  *(_QWORD *)(v7 - 216) = *(_QWORD *)(v7 - 272);
  *(_QWORD *)(v7 - 208) = v1;
  v10 = *(_QWORD *)(v7 - 440);
  *(_QWORD *)(v7 - 200) = *(_QWORD *)(v7 - 320);
  *(_QWORD *)(v7 - 192) = v10;
  v11 = *(_QWORD *)(v7 - 400);
  *(_QWORD *)(v7 - 184) = *(_QWORD *)(v7 - 296);
  *(_QWORD *)(v7 - 176) = v11;
  *(_QWORD *)(v7 - 168) = *(_QWORD *)(v7 - 392);
  *(_QWORD *)(v7 - 160) = v3;
  *(_QWORD *)(v7 - 152) = *(_QWORD *)(v7 - 288);
  *(_QWORD *)(v7 - 144) = v4;
  v12 = *(_QWORD *)(v7 - 280);
  *(_QWORD *)(v7 - 136) = v2;
  *(_QWORD *)(v7 - 128) = v12;
  v13 = *(_QWORD *)(v7 - 432);
  *(_QWORD *)(v7 - 120) = *(_QWORD *)(v7 - 304);
  *(_QWORD *)(v7 - 112) = v13;
  v14 = *(_QWORD *)(v7 - 264);
  *(_QWORD *)(v7 - 104) = *(_QWORD *)(v7 - 312);
  *(_QWORD *)(v7 - 96) = v14;
  type metadata accessor for CanvasSectionDescriptor();
}

uint64_t sub_23BECA5F0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v27 - v6;
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  *(_QWORD *)(v3 - 312) = v1;
  v8 = *(_QWORD *)(v3 - 416);
  sub_23BFF9A0C();
  if (!v8)
  {
    v9 = *(_QWORD *)(v3 - 480);
    *(_QWORD *)(v3 - 424) = v5;
    *(_QWORD *)(v3 - 320) = v7;
    *(_QWORD *)(v3 - 416) = a1;
    v10 = *(_QWORD *)(v3 - 464);
    v11 = *(_QWORD *)(v3 - 472);
    v12 = *(_QWORD *)(v3 - 456);
    *(_BYTE *)(v3 - 248) = 0;
    v13 = sub_23BFF9898();
    v15 = *(uint64_t **)(v3 - 320);
    *v15 = v13;
    v15[1] = v16;
    *(_BYTE *)(v3 - 248) = 1;
    MEMORY[0x242615198](&protocol conformance descriptor for CanvasSectionLayout<A>, v12);
    sub_23BFF98C8();
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))((char *)v15 + *(int *)(*(_QWORD *)(v3 - 416) + 180), v9, v12);
    *(_BYTE *)(v3 - 248) = 2;
    MEMORY[0x242615198](&protocol conformance descriptor for CanvasSectionHeader<A, B>, *(_QWORD *)(v3 - 504));
    v17 = *(_QWORD *)(v3 - 496);
    sub_23BFF988C();
    v18 = v15;
    v19 = *(_QWORD *)(v3 - 416);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 512) + 32))((char *)v18 + *(int *)(v19 + 184), v17, v10);
    *(_BYTE *)(v3 - 72) = 3;
    sub_23BEACA40();
    sub_23BFF98C8();
    *((_BYTE *)v18 + *(int *)(v19 + 188)) = *(_BYTE *)(v3 - 248);
    v20 = *(_QWORD *)(v3 - 368);
    *(_QWORD *)(v3 - 248) = *(_QWORD *)(v3 - 376);
    *(_QWORD *)(v3 - 240) = v20;
    v21 = *(_QWORD *)(v3 - 336);
    *(_QWORD *)(v3 - 232) = *(_QWORD *)(v3 - 352);
    *(_QWORD *)(v3 - 224) = v21;
    v22 = *(_QWORD *)(v3 - 296);
    *(_QWORD *)(v3 - 216) = *(_QWORD *)(v3 - 272);
    *(_QWORD *)(v3 - 208) = v22;
    v23 = *(_QWORD *)(v3 - 392);
    *(_QWORD *)(v3 - 200) = *(_QWORD *)(v3 - 400);
    *(_QWORD *)(v3 - 192) = v23;
    v24 = *(_QWORD *)(v3 - 288);
    *(_QWORD *)(v3 - 184) = *(_QWORD *)(v3 - 384);
    *(_QWORD *)(v3 - 176) = v24;
    v25 = *(_QWORD *)(v3 - 344);
    *(_QWORD *)(v3 - 168) = *(_QWORD *)(v3 - 360);
    *(_QWORD *)(v3 - 160) = v25;
    v26 = *(_QWORD *)(v3 - 264);
    *(_QWORD *)(v3 - 152) = *(_QWORD *)(v3 - 280);
    *(_QWORD *)(v3 - 144) = v26;
    type metadata accessor for CanvasItemDescriptor();
  }
  return __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v3 - 328));
}

void sub_23BECACD4(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  CanvasSectionDescriptor.init(from:)(a1, a2[2], a2[3], a2[4], a2[5], a2[6], a2[7], a2[8], a3, a2[9], a2[10], a2[11], a2[12], a2[13], a2[14], a2[15], a2[16], a2[17], a2[18],
    a2[19],
    a2[20],
    a2[21]);
}

void sub_23BECAD30()
{
  CanvasSectionDescriptor.encode(to:)();
}

void CanvasSectionDescriptor.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_bridgeObjectRetain();
  sub_23BFF93F4();
  swift_bridgeObjectRelease();
  v5 = type metadata accessor for CanvasSectionLayout(0, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 152), v4);
  CanvasSectionLayout.hash(into:)(a1, v5, v6, v7);
  type metadata accessor for CanvasSectionHeader();
}

void sub_23BECADE4(uint64_t a1)
{
  sub_23BFF96A0();
  MEMORY[0x242615198](&protocol conformance descriptor for CanvasSectionHeader<A, B>, a1);
  sub_23BFF96AC();
  sub_23BFF99DC();
  swift_bridgeObjectRetain();
  type metadata accessor for CanvasItemDescriptor();
}

uint64_t sub_23BECAE7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  MEMORY[0x242615198](&protocol conformance descriptor for CanvasItemDescriptor<A, B, C, D, E, F>, a1);
  sub_23BFF94CC();
  swift_bridgeObjectRelease();
  sub_23BFF96A0();
  sub_23BFF96AC();
  v4 = *(_QWORD *)(v2 + *(int *)(v3 + 200));
  swift_bridgeObjectRetain();
  sub_23BECBD30(v1, v4);
  return swift_bridgeObjectRelease();
}

void static CanvasSectionDescriptor.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[23];
  uint64_t TupleTypeMetadata2;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v36 = a7;
  v35 = a6;
  v34 = a5;
  v33 = a4;
  v30[19] = *(_QWORD *)(a8 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v30[17] = (char *)v30 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_23BFF96A0();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v30[18] = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v24 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v30[20] = (char *)v30 - v25;
  v32 = *(_QWORD *)(v23 - 8);
  v26 = MEMORY[0x24BDAC7A8](v24);
  v27 = MEMORY[0x24BDAC7A8](v26);
  v30[21] = (char *)v30 - v28;
  MEMORY[0x24BDAC7A8](v27);
  v30[22] = (char *)v30 - v29;
  v37 = a3;
  v39 = a3;
  v40 = a10;
  v38 = a12;
  v41 = a12;
  v42 = a21;
  type metadata accessor for CanvasSectionHeader();
}

uint64_t sub_23BECB0B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t TupleTypeMetadata2;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v34[96];

  *(v8 - 41) = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  *(v8 - 49) = &v34[-v10];
  v11 = sub_23BFF96A0();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *(v8 - 38) = TupleTypeMetadata2;
  *(v8 - 44) = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v13 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v15 = &v34[-v14];
  *(v8 - 42) = *(_QWORD *)(v11 - 8);
  v16 = MEMORY[0x24BDAC7A8](v13);
  *(v8 - 45) = &v34[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = MEMORY[0x24BDAC7A8](v16);
  *(v8 - 40) = &v34[-v19];
  MEMORY[0x24BDAC7A8](v18);
  *(v8 - 39) = &v34[-v20];
  if (*v4 == *v6 && v4[1] == v6[1] || (sub_23BFF9964() & 1) != 0)
  {
    *(v8 - 48) = v11;
    *(v8 - 47) = v15;
    *(v8 - 46) = a1;
    *(v8 - 65) = v7;
    *(v8 - 64) = v5;
    v21 = v8[15];
    v22 = v8[12];
    v23 = v8[13];
    v25 = v8[10];
    v24 = v8[11];
    v27 = v8[8];
    v26 = v8[9];
    v29 = v8[6];
    v28 = v8[7];
    v30 = v8[4];
    v31 = v8[2];
    *(v8 - 31) = *(v8 - 33);
    *(v8 - 30) = *(v8 - 37);
    *(v8 - 29) = *(v8 - 36);
    *(v8 - 28) = *(v8 - 35);
    *(v8 - 27) = *(v8 - 34);
    *(v8 - 26) = v1;
    *(v8 - 63) = v1;
    *(v8 - 25) = v31;
    *(v8 - 24) = v2;
    v32 = *(v8 - 32);
    *(v8 - 23) = v30;
    *(v8 - 22) = v32;
    *(v8 - 21) = v29;
    *(v8 - 20) = v28;
    *(v8 - 62) = v27;
    *(v8 - 19) = v27;
    *(v8 - 18) = v26;
    *(v8 - 61) = v26;
    *(v8 - 60) = v25;
    *(v8 - 17) = v25;
    *(v8 - 16) = v24;
    *(v8 - 59) = v24;
    *(v8 - 66) = v22;
    *(v8 - 15) = v22;
    *(v8 - 14) = v23;
    *(v8 - 13) = v3;
    *(v8 - 12) = v21;
    *(v8 - 58) = v21;
    type metadata accessor for CanvasSectionDescriptor();
  }
  return 0;
}

uint64_t sub_23BECB8E0(uint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  unint64_t v9;
  int64_t v10;
  int64_t v11;

  if (result == a2)
    return 1;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v3 = 0;
  v4 = result + 56;
  v5 = 1 << *(_BYTE *)(result + 32);
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(result + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (!v7)
    {
      v10 = v3 + 1;
      if (__OFADD__(v3, 1))
      {
        __break(1u);
        goto LABEL_29;
      }
      if (v10 >= v8)
        return 1;
      v7 = *(_QWORD *)(v4 + 8 * v10);
      ++v3;
      if (!v7)
      {
        v3 = v10 + 1;
        if (v10 + 1 >= v8)
          return 1;
        v7 = *(_QWORD *)(v4 + 8 * v3);
        if (!v7)
        {
          v3 = v10 + 2;
          if (v10 + 2 >= v8)
            return 1;
          v7 = *(_QWORD *)(v4 + 8 * v3);
          if (!v7)
          {
            v3 = v10 + 3;
            if (v10 + 3 >= v8)
              return 1;
            v7 = *(_QWORD *)(v4 + 8 * v3);
            if (!v7)
              break;
          }
        }
      }
    }
LABEL_8:
    v7 &= v7 - 1;
    sub_23BFF99D0();
    sub_23BFF99DC();
    result = sub_23BFF9A00();
    v9 = result & ~(-1 << *(_BYTE *)(a2 + 32));
    if (((*(_QWORD *)(a2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
      return 0;
  }
  v11 = v10 + 4;
  if (v11 >= v8)
    return 1;
  v7 = *(_QWORD *)(v4 + 8 * v11);
  if (v7)
  {
    v3 = v11;
    goto LABEL_8;
  }
  while (1)
  {
    v3 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v3 >= v8)
      return 1;
    v7 = *(_QWORD *)(v4 + 8 * v3);
    ++v11;
    if (v7)
      goto LABEL_8;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_23BECBA60(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 56;
  v6 = 1 << *(_BYTE *)(result + 32);
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(result + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  v10 = a2 + 56;
  do
  {
LABEL_7:
    if (v8)
    {
      v11 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v12 = v11 | (v4 << 6);
      goto LABEL_25;
    }
    v13 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
LABEL_35:
      __break(1u);
      return result;
    }
    if (v13 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v13);
    ++v4;
    if (v14)
      goto LABEL_24;
    v4 = v13 + 1;
    if (v13 + 1 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v4);
    if (v14)
      goto LABEL_24;
    v4 = v13 + 2;
    if (v13 + 2 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v4);
    if (v14)
      goto LABEL_24;
    v4 = v13 + 3;
    if (v13 + 3 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v4);
    if (v14)
      goto LABEL_24;
    v15 = v13 + 4;
    if (v15 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v15);
    if (!v14)
    {
      while (1)
      {
        v4 = v15 + 1;
        if (__OFADD__(v15, 1))
          goto LABEL_35;
        if (v4 >= v9)
          return 1;
        v14 = *(_QWORD *)(v5 + 8 * v4);
        ++v15;
        if (v14)
          goto LABEL_24;
      }
    }
    v4 = v15;
LABEL_24:
    v8 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v4 << 6);
LABEL_25:
    v16 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v12);
    sub_23BFF99D0();
    sub_23BFF99DC();
    result = sub_23BFF9A00();
    v17 = -1 << *(_BYTE *)(a2 + 32);
    v18 = result & ~v17;
    if (((*(_QWORD *)(v10 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
      return 0;
    v19 = *(_QWORD *)(a2 + 48);
  }
  while (*(unsigned __int8 *)(v19 + v18) == v16);
  v20 = ~v17;
  while (1)
  {
    v18 = (v18 + 1) & v20;
    if (((*(_QWORD *)(v10 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
      return 0;
    if (*(unsigned __int8 *)(v19 + v18) == v16)
      goto LABEL_7;
  }
}

void CanvasSectionDescriptor.hashValue.getter(uint64_t a1)
{
  _BYTE v2[72];

  sub_23BFF99D0();
  CanvasSectionDescriptor.hash(into:)((uint64_t)v2, a1);
}

uint64_t sub_23BECBC80()
{
  return sub_23BFF9A00();
}

void sub_23BECBCA0(uint64_t a1, uint64_t a2)
{
  _BYTE v3[72];

  sub_23BFF99D0();
  CanvasSectionDescriptor.hash(into:)((uint64_t)v3, a2);
}

uint64_t sub_23BECBCC8()
{
  return sub_23BFF9A00();
}

void sub_23BECBCE0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  static CanvasSectionDescriptor.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6], a3[7], a3[8], a3[9], a3[10], a3[11], a3[12], a3[13], a3[14], a3[15], a3[16], a3[17], a3[18],
    a3[19],
    a3[20]);
}

uint64_t sub_23BECBD20(char a1)
{
  return a1 & 1;
}

uint64_t sub_23BECBD30(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  int64_t v14;

  result = sub_23BFF9A00();
  v4 = 0;
  v5 = 0;
  v8 = *(_QWORD *)(a2 + 56);
  v7 = a2 + 56;
  v6 = v8;
  v9 = 1 << *(_BYTE *)(v7 - 24);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & v6;
  v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (!v11)
    {
      if (__OFADD__(v5++, 1))
        goto LABEL_18;
      if (v5 >= v12)
        return sub_23BFF99DC();
      v11 = *(_QWORD *)(v7 + 8 * v5);
      if (!v11)
        break;
    }
LABEL_5:
    v11 &= v11 - 1;
    sub_23BFF99D0();
    sub_23BFF99DC();
    result = sub_23BFF9A00();
    v4 ^= result;
  }
  v14 = v5 + 1;
  if (v5 + 1 >= v12)
    return sub_23BFF99DC();
  v11 = *(_QWORD *)(v7 + 8 * v14);
  if (v11)
  {
    ++v5;
    goto LABEL_5;
  }
  while (1)
  {
    v5 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v5 >= v12)
      return sub_23BFF99DC();
    v11 = *(_QWORD *)(v7 + 8 * v5);
    ++v14;
    if (v11)
      goto LABEL_5;
  }
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_23BECBE60(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v12;
  int64_t v13;

  result = sub_23BFF9A00();
  v4 = 0;
  v5 = 0;
  v6 = a2 + 56;
  v7 = 1 << *(_BYTE *)(a2 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      v9 &= v9 - 1;
      goto LABEL_5;
    }
    if (__OFADD__(v5++, 1))
      goto LABEL_19;
    if (v5 >= v10)
      return sub_23BFF99DC();
    v12 = *(_QWORD *)(v6 + 8 * v5);
    if (!v12)
      break;
LABEL_16:
    v9 = (v12 - 1) & v12;
LABEL_5:
    sub_23BFF99D0();
    sub_23BFF99DC();
    result = sub_23BFF9A00();
    v4 ^= result;
  }
  v13 = v5 + 1;
  if (v5 + 1 >= v10)
    return sub_23BFF99DC();
  v12 = *(_QWORD *)(v6 + 8 * v13);
  if (v12)
  {
    ++v5;
    goto LABEL_16;
  }
  while (1)
  {
    v5 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v5 >= v10)
      return sub_23BFF99DC();
    v12 = *(_QWORD *)(v6 + 8 * v5);
    ++v13;
    if (v12)
      goto LABEL_16;
  }
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

uint64_t sub_23BECBFC8(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 192));
}

uint64_t sub_23BECBFD4(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 200));
}

void type metadata accessor for CanvasSectionDescriptor()
{
  JUMPOUT(0x2426150F0);
}

uint64_t sub_23BECBFEC()
{
  return 7;
}

void type metadata accessor for CanvasSectionDescriptor.CodingKeys()
{
  JUMPOUT(0x2426150F0);
}

unint64_t sub_23BECC000()
{
  unint64_t result;

  result = qword_256AE4098;
  if (!qword_256AE4098)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for CanvasSectionRedactionReason, &type metadata for CanvasSectionRedactionReason);
    atomic_store(result, (unint64_t *)&qword_256AE4098);
  }
  return result;
}

uint64_t sub_23BECC044(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE4088);
    v8 = a2();
    result = MEMORY[0x242615198](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23BECC0AC()
{
  unint64_t result;

  result = qword_256AE40A8;
  if (!qword_256AE40A8)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for CanvasSectionRedactionReason, &type metadata for CanvasSectionRedactionReason);
    atomic_store(result, (unint64_t *)&qword_256AE40A8);
  }
  return result;
}

void sub_23BECC0F0()
{
  JUMPOUT(0x242615198);
}

uint64_t sub_23BECC100(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 144);
}

uint64_t sub_23BECC108(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 152);
}

uint64_t sub_23BECC110(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 160);
}

uint64_t sub_23BECC118(_QWORD *a1, uint64_t a2)
{
  uint64_t result;

  a1[1] = MEMORY[0x242615198](&protocol conformance descriptor for CanvasSectionDescriptor<A, B, C, D, E, F, G, H, I>);
  a1[2] = MEMORY[0x242615198](&protocol conformance descriptor for CanvasSectionDescriptor<A, B, C, D, E, F, G, H, I>, a2);
  a1[3] = MEMORY[0x242615198](&protocol conformance descriptor for CanvasSectionDescriptor<A, B, C, D, E, F, G, H, I>, a2);
  result = MEMORY[0x242615198](&protocol conformance descriptor for CanvasSectionDescriptor<A, B, C, D, E, F, G, H, I>, a2);
  a1[4] = result;
  return result;
}

void sub_23BECC184()
{
  JUMPOUT(0x242615198);
}

uint64_t dispatch thunk of CanvasSectionDescriptorProtocol.identifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 152))();
}

uint64_t dispatch thunk of CanvasSectionDescriptorProtocol.layout.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 160))();
}

uint64_t dispatch thunk of CanvasSectionDescriptorProtocol.header.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 168))();
}

uint64_t dispatch thunk of CanvasSectionDescriptorProtocol.footer.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 176))();
}

uint64_t dispatch thunk of CanvasSectionDescriptorProtocol.items.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 184))();
}

uint64_t dispatch thunk of CanvasSectionDescriptorProtocol.metrics.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 192))();
}

uint64_t dispatch thunk of CanvasSectionDescriptorProtocol.redactionReasons.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 200))();
}

uint64_t sub_23BECC1CC()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_23BECC1D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for CanvasSectionLayout(319, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 152), a4);
  if (v5 <= 0x3F)
    type metadata accessor for CanvasSectionHeader();
  return result;
}

uint64_t *sub_23BECC2CC(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  size_t v42;
  size_t v43;
  uint64_t v44;
  int v45;
  BOOL v46;
  size_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  char v77;
  __int128 v78;
  char v79;
  unint64_t v80;
  uint64_t v81;
  _BYTE *v82;
  _BYTE *v83;
  int v84;
  int v85;
  unint64_t v86;
  unsigned int v87;
  uint64_t v88;
  size_t v89;
  void *v90;
  const void *v91;
  void *v92;
  const void *v93;
  uint64_t v94;
  size_t v95;
  unint64_t v96;
  unint64_t v97;
  void *v98;
  const void *v99;
  unsigned int (*v100)(const void *, uint64_t, uint64_t);
  uint64_t *result;
  size_t __n;
  size_t v103;
  size_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  size_t v112;
  size_t v113;
  _OWORD *v114;
  uint64_t v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;

  v122 = a3[8];
  v5 = *(_QWORD *)(v122 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  v8 = v6 | 7;
  v121 = v5;
  v9 = *(_QWORD *)(v5 + 64);
  if (v9 <= 0x10)
    v10 = 16;
  else
    v10 = v9;
  v11 = ((v6 + 8) & ~(unint64_t)v6) + v9;
  if (v11 <= 0x18)
    v11 = 24;
  v120 = v11;
  v12 = v11 + 1;
  if (v12 <= v10 + 1)
    v13 = v10 + 1;
  else
    v13 = v12;
  v126 = v13;
  if (v13 + 1 > v10)
    v14 = v13 + 1;
  else
    v14 = v10;
  v15 = sub_23BFF82CC();
  v16 = v14;
  v17 = *(_QWORD *)(v15 - 8);
  v18 = a3[9];
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(_DWORD *)(v17 + 84);
  v22 = *(_DWORD *)(v19 + 80);
  v21 = *(_DWORD *)(v19 + 84);
  v23 = a3[2];
  v24 = *(_QWORD *)(v23 - 8);
  v26 = *(_DWORD *)(v24 + 80);
  v25 = *(_DWORD *)(v24 + 84);
  v27 = v22 | *(_DWORD *)(v17 + 80) | v26;
  v28 = (v22 | *(_BYTE *)(v17 + 80) | v26);
  v29 = v22;
  v30 = v26;
  if (v21)
    v31 = v21 - 1;
  else
    v31 = 0;
  if (v31 <= v20)
    v32 = *(_DWORD *)(v17 + 84);
  else
    v32 = v31;
  v33 = v25 - 1;
  if (!v25)
    v33 = 0;
  if (v33 <= v32)
    v34 = v32;
  else
    v34 = v33;
  if (v21)
    v35 = *(_QWORD *)(v19 + 64);
  else
    v35 = *(_QWORD *)(v19 + 64) + 1;
  v124 = *(_QWORD *)(v17 + 64) + v29;
  v125 = *(_QWORD *)(v15 - 8);
  v123 = v35 + v30;
  if (v25)
    v36 = *(_QWORD *)(v24 + 64);
  else
    v36 = *(_QWORD *)(v24 + 64) + 1;
  v127 = v34;
  v129 = ((v35 + v30 + (v124 & ~v29)) & ~v30) + v36;
  if (v34)
    v37 = ((v35 + v30 + (v124 & ~v29)) & ~v30) + v36;
  else
    v37 = ((v35 + v30 + (v124 & ~v29)) & ~v30) + v36 + 1;
  v130 = a3[7];
  v38 = *(_QWORD *)(v130 - 8);
  v40 = *(_DWORD *)(v38 + 80);
  v39 = *(_DWORD *)(v38 + 84);
  v41 = v40;
  v128 = v38;
  v42 = *(_QWORD *)(v38 + 64);
  if (v39)
    v43 = v42;
  else
    v43 = v42 + 1;
  v44 = v8 | v40 | v28;
  v45 = (v27 | v6 | v40) & 0x100000;
  v46 = v44 == 7 && v45 == 0;
  if (!v46
    || (v47 = v43 + 7,
        ((v43
        + 7
        + ((v41 + 16 + ((v37 + ((v16 + v28 + 1 + ((v6 + 16) & ~v8)) & ~v28)) & 0xFFFFFFFFFFFFFFF8)) & ~v41)) & 0xFFFFFFFFFFFFFFF8)
      + 8 > 0x18))
  {
    v52 = *a2;
    *a1 = *a2;
    v53 = v52 + ((v44 + 16) & ~v44);
    swift_retain();
    return (uint64_t *)v53;
  }
  v115 = v16 + v28 + 1;
  v116 = v31;
  v117 = v20;
  v118 = *(_DWORD *)(v24 + 84);
  v119 = *(_DWORD *)(v19 + 84);
  __n = v35;
  v103 = v36;
  v110 = v15;
  v111 = v41 + 16;
  v106 = *(_QWORD *)(v18 - 8);
  v107 = v18;
  v104 = v43;
  v105 = *(_QWORD *)(v23 - 8);
  v108 = v23;
  v112 = v37;
  v48 = a2[1];
  *a1 = *a2;
  a1[1] = v48;
  v114 = (_OWORD *)(((unint64_t)a1 + v8 + 16) & ~v8);
  v49 = ((unint64_t)a2 + v8 + 16) & ~v8;
  v50 = v16;
  swift_bridgeObjectRetain();
  v113 = v47;
  v54 = v50;
  v55 = ~v28;
  v109 = ~v29;
  v56 = ~v30;
  v57 = ~v41;
  v58 = v130;
  switch((int)v129)
  {
    case 0:
      v59 = 0;
      v60 = ((unint64_t)a1 + v8 + 16) & ~v8;
      *v114 = *(_OWORD *)v49;
      goto LABEL_51;
    case 1:
      v60 = ((unint64_t)a1 + v8 + 16) & ~v8;
      v61 = v54;
      v62 = v55;
      (*(void (**)(_OWORD *, uint64_t, uint64_t))(v121 + 16))(v114, v49, v122);
      v55 = v62;
      v54 = v61;
      v59 = 1;
      goto LABEL_51;
    case 2:
      v60 = ((unint64_t)a1 + v8 + 16) & ~v8;
      v63 = v54;
      v64 = v55;
      (*(void (**)(_OWORD *, uint64_t, uint64_t))(v121 + 16))(v114, v49, v122);
      v55 = v64;
      v54 = v63;
      v59 = 2;
LABEL_51:
      v66 = v118;
      v65 = v119;
      v68 = v116;
      v67 = v117;
      break;
    case 3:
      v69 = *(unsigned __int8 *)(v49 + v126);
      if (v69 >= 2)
      {
        if (v126 <= 3)
          v70 = v126;
        else
          v70 = 4;
        __asm { BR              X13 }
      }
      if (v69 == 1)
      {
        v10 = v120;
        v71 = *(unsigned __int8 *)(v49 + v120);
        if (v71 >= 2)
        {
          if (v120 <= 3)
            v72 = v120;
          else
            v72 = 4;
          __asm { BR              X13 }
        }
        v60 = ((unint64_t)a1 + v8 + 16) & ~v8;
        if (v71 == 1)
        {
          *(_QWORD *)v114 = *(_QWORD *)v49;
          v75 = v54;
          v76 = v55;
          (*(void (**)(unint64_t, uint64_t, uint64_t))(v121 + 16))(((unint64_t)v114 + v7 + 8) & ~v7, (v7 + 8 + v49) & ~v7, v122);
          v55 = v76;
          v54 = v75;
          v77 = 1;
        }
        else
        {
          v77 = 0;
          v78 = *(_OWORD *)v49;
          *(_QWORD *)((((unint64_t)a1 + v8 + 16) & ~v8) + 0x10) = *(_QWORD *)(v49 + 16);
          *v114 = v78;
        }
        v79 = 1;
      }
      else
      {
        v73 = *(unsigned __int8 *)(v49 + v10);
        if (v73 >= 2)
        {
          if (v10 <= 3)
            v74 = v10;
          else
            v74 = 4;
          __asm { BR              X12 }
        }
        if (v73 == 1)
        {
          v60 = ((unint64_t)a1 + v8 + 16) & ~v8;
          v80 = v54;
          v81 = v55;
          (*(void (**)(_OWORD *, uint64_t, uint64_t))(v121 + 16))(v114, v49, v122);
          v55 = v81;
          v54 = v80;
          v79 = 0;
          v77 = 1;
        }
        else
        {
          v77 = 0;
          v79 = 0;
          v60 = ((unint64_t)a1 + v8 + 16) & ~v8;
          *v114 = *(_OWORD *)v49;
        }
      }
      v66 = v118;
      v65 = v119;
      v68 = v116;
      v67 = v117;
      *(_BYTE *)(v60 + v10) = v77;
      *(_BYTE *)(v60 + v126) = v79;
      v59 = 3;
      break;
    default:
      if (v50 <= 3)
        v51 = v50;
      else
        v51 = 4;
      __asm { BR              X11 }
      return result;
  }
  *(_BYTE *)(v60 + v54) = v59;
  v82 = (_BYTE *)((v115 + v60) & v55);
  v83 = (_BYTE *)((v115 + v49) & v55);
  if (v127)
  {
    if ((_DWORD)v67 == v127)
    {
      if (!(*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v125 + 48))(v83, v67, v110))
        goto LABEL_93;
    }
    else
    {
      v86 = (unint64_t)&v83[v124] & v109;
      if (v68 == v127)
        v87 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v106 + 48))(v86, v65, v107);
      else
        v87 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v105 + 48))((v123 + v86) & v56, v66, v108);
      if (v87 < 2)
      {
LABEL_93:
        v88 = v57;
        v89 = v113;
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v125 + 16))(v82, v83, v110);
        v90 = (void *)((unint64_t)&v82[v124] & v109);
        v91 = (const void *)((unint64_t)&v83[v124] & v109);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v106 + 48))(v91, 1, v107))
        {
          memcpy(v90, v91, __n);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v106 + 16))(v90, v91, v107);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v106 + 56))(v90, 0, 1, v107);
        }
        v92 = (void *)(((unint64_t)v90 + v123) & v56);
        v93 = (const void *)(((unint64_t)v91 + v123) & v56);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v105 + 48))(v93, 1, v108))
        {
          memcpy(v92, v93, v103);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v105 + 16))(v92, v93, v108);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v105 + 56))(v92, 0, 1, v108);
        }
        v94 = v111;
        v95 = v112;
        v57 = v88;
        v58 = v130;
        if (!v127)
          v82[v129] = 0;
        goto LABEL_103;
      }
    }
  }
  else
  {
    if (!v83[v129])
      goto LABEL_93;
    v84 = (v83[v129] - 1) << (8 * v129);
    if (v129 > 3)
      v84 = 0;
    if ((_DWORD)v129)
    {
      if (v129 <= 3)
        v85 = v129;
      else
        v85 = 4;
      __asm { BR              X11 }
    }
    if (v84 == -1)
      goto LABEL_93;
  }
  v95 = v112;
  v89 = v113;
  memcpy(v82, v83, v112);
  v94 = v111;
LABEL_103:
  v82[v95] = v83[v95];
  v96 = (unint64_t)&v82[v95] & 0xFFFFFFFFFFFFFFF8;
  v97 = (unint64_t)&v83[v95] & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v96 + 8) = *(_QWORD *)(v97 + 8);
  v98 = (void *)((v94 + v96) & v57);
  v99 = (const void *)((v94 + v97) & v57);
  v100 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v128 + 48);
  swift_bridgeObjectRetain();
  if (v100(v99, 1, v58))
  {
    memcpy(v98, v99, v104);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v128 + 16))(v98, v99, v58);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v128 + 56))(v98, 0, 1, v58);
  }
  *(_QWORD *)(((unint64_t)v98 + v89) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v99 + v89) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_23BECCBC0(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t result;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;

  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2[8] - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (a1 + (v5 | 7) + 16) & ~(v5 | 7);
  v7 = *(_QWORD *)(v4 + 64);
  if (v7 <= 0x10)
    v8 = 16;
  else
    v8 = *(_QWORD *)(v4 + 64);
  v9 = v5 + 8;
  v10 = ((v5 + 8) & ~v5) + v7;
  if (v10 <= 0x18)
    v10 = 24;
  if (v10 + 1 <= v8 + 1)
    v11 = v8 + 1;
  else
    v11 = v10 + 1;
  if (v11 + 1 > v8)
    v12 = v11 + 1;
  else
    v12 = v8;
  v14 = ~v5;
  switch(*(_BYTE *)(v6 + v12))
  {
    case 0:
      goto LABEL_19;
    case 1:
    case 2:
      goto LABEL_18;
    case 3:
      v42 = *(unsigned __int8 *)(v6 + v11);
      if (v42 >= 2)
      {
        if (v11 <= 3)
          v43 = v11;
        else
          v43 = 4;
        __asm { BR              X0 }
      }
      if (v42 == 1)
      {
        v51 = *(unsigned __int8 *)(v6 + v10);
        if (v51 >= 2)
        {
          if (v10 <= 3)
            v52 = v10;
          else
            v52 = 4;
          __asm { BR              X16 }
        }
        if (v51 == 1)
          (*(void (**)(uint64_t))(v4 + 8))((v9 + v6) & v14);
      }
      else
      {
        v53 = *(unsigned __int8 *)(v6 + v8);
        if (v53 >= 2)
        {
          if (v8 <= 3)
            v54 = v8;
          else
            v54 = 4;
          __asm { BR              X14 }
        }
        if (v53 == 1)
LABEL_18:
          (*(void (**)(uint64_t))(v4 + 8))(v6);
      }
LABEL_19:
      v15 = sub_23BFF82CC();
      v16 = *(_QWORD *)(v15 - 8);
      v57 = a2[9];
      v58 = a2;
      v17 = *(_QWORD *)(v57 - 8);
      v18 = *(_DWORD *)(v17 + 84);
      v19 = *(_DWORD *)(v17 + 80);
      v20 = *(unsigned int *)(v16 + 84);
      v21 = a2[2];
      v22 = *(_QWORD *)(v21 - 8);
      v23 = *(unsigned int *)(v22 + 84);
      v24 = *(_DWORD *)(v22 + 80);
      v25 = (*(_DWORD *)(v17 + 80) | *(_DWORD *)(v16 + 80) | *(_DWORD *)(v22 + 80));
      v26 = ((v6 | 1) + v25 + v12) & ~v25;
      v27 = v18 - 1;
      if (!v18)
        v27 = 0;
      if (v27 <= v20)
        v28 = *(_DWORD *)(v16 + 84);
      else
        v28 = v27;
      v29 = v23 - 1;
      if (!(_DWORD)v23)
        v29 = 0;
      if (v29 <= v28)
        v30 = v28;
      else
        v30 = v29;
      v31 = *(_QWORD *)(v17 + 64);
      if (!v18)
        ++v31;
      v32 = ~v19;
      v33 = *(_QWORD *)(v16 + 64) + v19;
      v34 = v31 + v24;
      v35 = (v31 + v24 + (v33 & ~v19)) & ~v24;
      v36 = *(_QWORD *)(v22 + 64);
      if (!(_DWORD)v23)
        ++v36;
      v37 = v36 + v35;
      v55 = v32;
      v56 = ~v24;
      if (v30)
      {
        if ((_DWORD)v20 == v30)
        {
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v26, v20, v15))
            goto LABEL_60;
        }
        else
        {
          v40 = (v33 + v26) & v32;
          if (v27 == v30)
            v41 = (*(uint64_t (**)(uint64_t))(v17 + 48))(v40);
          else
            v41 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))((v34 + v40) & ~v24, v23, v21);
          if (v41 >= 2)
            goto LABEL_60;
        }
        goto LABEL_56;
      }
      if (!*(_BYTE *)(v26 + v37))
        goto LABEL_56;
      v38 = (*(unsigned __int8 *)(v26 + v37) - 1) << (8 * v37);
      if (v37 > 3)
        v38 = 0;
      if ((_DWORD)v37)
      {
        if (v37 <= 3)
          v39 = v36 + v35;
        else
          v39 = 4;
        __asm { BR              X11 }
      }
      if (v38 == -1)
      {
LABEL_56:
        (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v26, v15);
        v44 = (v33 + v26) & v55;
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v44, 1, v57))
          (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v44, v57);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))((v34 + v44) & v56, 1, v21))
          (*(void (**)(uint64_t, uint64_t))(v22 + 8))((v34 + v44) & v56, v21);
      }
LABEL_60:
      if (v30)
        v45 = v26;
      else
        v45 = v26 + 1;
      v46 = (v45 + v37) & 0xFFFFFFFFFFFFFFF8;
      swift_bridgeObjectRelease();
      v47 = v58[7];
      v48 = *(_QWORD *)(v47 - 8);
      v49 = (v46 + *(unsigned __int8 *)(v48 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80);
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v48 + 48))(v49, 1, v47))
        (*(void (**)(unint64_t, uint64_t))(v48 + 8))(v49, v47);
      return swift_bridgeObjectRelease();
    default:
      if (v12 <= 3)
        v13 = v12;
      else
        v13 = 4;
      __asm { BR              X0 }
      return result;
  }
}

_QWORD *sub_23BECD14C(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  char v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  size_t v50;
  size_t v51;
  int v52;
  int v53;
  unint64_t v54;
  void *v55;
  const void *v56;
  char *v57;
  void *v58;
  const void *v59;
  _QWORD *v60;
  size_t v61;
  size_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  const void *v69;
  unsigned int (*v70)(const void *, uint64_t, uint64_t);
  int v71;
  size_t v72;
  size_t v73;
  size_t v74;
  _QWORD *result;
  size_t __n;
  size_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *__dst;
  char *__dsta;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  __dst = (_QWORD *)a3[8];
  v5 = *(__dst - 1);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 | 7) + 16;
  v81 = a1;
  v8 = ((unint64_t)a1 + v7) & ~(v6 | 7);
  v9 = ((unint64_t)a2 + v7) & ~(v6 | 7);
  v10 = *(_QWORD *)(v5 + 64);
  if (v10 <= 0x10)
    v11 = 16;
  else
    v11 = *(_QWORD *)(v5 + 64);
  v12 = ((v6 + 8) & ~v6) + v10;
  if (v12 <= 0x18)
    v13 = 24;
  else
    v13 = v12;
  if (v13 + 1 <= v11 + 1)
    v14 = v11 + 1;
  else
    v14 = v13 + 1;
  if (v14 + 1 > v11)
    v15 = v14 + 1;
  else
    v15 = v11;
  v16 = *(unsigned __int8 *)(v9 + v15);
  swift_bridgeObjectRetain();
  switch(v16)
  {
    case 0:
      v18 = 0;
      *(_OWORD *)v8 = *(_OWORD *)v9;
      break;
    case 1:
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(v5 + 16))(v8, v9, __dst);
      v18 = 1;
      break;
    case 2:
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(v5 + 16))(v8, v9, __dst);
      v18 = 2;
      break;
    case 3:
      v19 = *(unsigned __int8 *)(v9 + v14);
      if (v19 >= 2)
      {
        if (v14 <= 3)
          v20 = v14;
        else
          v20 = 4;
        __asm { BR              X13 }
      }
      if (v19 == 1)
      {
        v21 = *(unsigned __int8 *)(v9 + v13);
        if (v21 >= 2)
        {
          if (v13 <= 3)
            v22 = v13;
          else
            v22 = 4;
          __asm { BR              X13 }
        }
        if (v21 == 1)
        {
          *(_QWORD *)v8 = *(_QWORD *)v9;
          (*(void (**)(uint64_t, uint64_t, _QWORD *))(v5 + 16))((v6 + 8 + v8) & ~v6, (v6 + 8 + v9) & ~v6, __dst);
          v25 = 1;
          v11 = v13;
          v26 = 1;
        }
        else
        {
          v25 = 0;
          v27 = *(_OWORD *)v9;
          *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
          *(_OWORD *)v8 = v27;
          v26 = 1;
          v11 = v13;
        }
      }
      else
      {
        v23 = *(unsigned __int8 *)(v9 + v11);
        if (v23 >= 2)
        {
          if (v11 <= 3)
            v24 = v11;
          else
            v24 = 4;
          __asm { BR              X12 }
        }
        if (v23 == 1)
        {
          (*(void (**)(uint64_t, uint64_t, _QWORD *))(v5 + 16))(v8, v9, __dst);
          v26 = 0;
          v25 = 1;
        }
        else
        {
          v25 = 0;
          v26 = 0;
          *(_OWORD *)v8 = *(_OWORD *)v9;
        }
      }
      *(_BYTE *)(v8 + v11) = v25;
      *(_BYTE *)(v8 + v14) = v26;
      v18 = 3;
      break;
    default:
      if (v15 <= 3)
        v17 = v15;
      else
        v17 = 4;
      __asm { BR              X11 }
      return result;
  }
  *(_BYTE *)(v8 + v15) = v18;
  v28 = sub_23BFF82CC();
  v29 = *(_QWORD *)(v28 - 8);
  v80 = a3[9];
  v30 = *(_QWORD *)(v80 - 8);
  v31 = *(unsigned int *)(v29 + 84);
  v32 = *(_DWORD *)(v30 + 84);
  v79 = a3[2];
  v33 = *(_QWORD *)(v79 - 8);
  v34 = *(unsigned int *)(v33 + 84);
  v35 = (*(_DWORD *)(v30 + 80) | *(_DWORD *)(v29 + 80) | *(_DWORD *)(v33 + 80));
  v36 = *(_DWORD *)(v30 + 80);
  v37 = *(_DWORD *)(v33 + 80);
  v38 = v15 + v35 + 1;
  __dsta = (char *)((v38 + v8) & ~v35);
  v39 = (_BYTE *)((v38 + v9) & ~v35);
  v40 = v32 - 1;
  if (!v32)
    v40 = 0;
  if (v40 <= v31)
    v41 = *(_DWORD *)(v29 + 84);
  else
    v41 = v40;
  v42 = v34 - 1;
  if (!(_DWORD)v34)
    v42 = 0;
  if (v42 <= v41)
    v43 = v41;
  else
    v43 = v42;
  if (v32)
    v44 = *(_QWORD *)(v30 + 64);
  else
    v44 = *(_QWORD *)(v30 + 64) + 1;
  v45 = ~v36;
  v46 = *(_QWORD *)(v29 + 64) + v36;
  v47 = ~v37;
  v48 = v44 + v37;
  v49 = (v44 + v37 + (v46 & ~v36)) & ~v37;
  v50 = *(_QWORD *)(v33 + 64);
  if (!(_DWORD)v34)
    ++v50;
  __n = v44;
  v77 = v50;
  v51 = v49 + v50;
  v78 = v47;
  if (!v43)
  {
    if (!v39[v51])
      goto LABEL_76;
    v52 = (v39[v51] - 1) << (8 * v51);
    if (v51 > 3)
      v52 = 0;
    if ((_DWORD)v51)
    {
      if (v51 <= 3)
        v53 = v49 + v50;
      else
        v53 = 4;
      __asm { BR              X11 }
    }
    if (v52 == -1)
      goto LABEL_76;
    goto LABEL_85;
  }
  if ((_DWORD)v31 == v43)
  {
    if (!(*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v29 + 48))(v39, v31, v28))
      goto LABEL_76;
LABEL_85:
    if (v43)
      v61 = v51;
    else
      v61 = v51 + 1;
    v57 = __dsta;
    memcpy(__dsta, v39, v61);
    v60 = v81;
    goto LABEL_89;
  }
  v54 = (unint64_t)&v39[v46] & v45;
  if (v40 == v43)
  {
    if ((*(unsigned int (**)(unint64_t))(v30 + 48))(v54) >= 2)
      goto LABEL_85;
  }
  else if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v33 + 48))((v48 + v54) & v47, v34, v79) >= 2)
  {
    goto LABEL_85;
  }
LABEL_76:
  (*(void (**)(char *, _BYTE *, uint64_t))(v29 + 16))(__dsta, v39, v28);
  v55 = (void *)((unint64_t)&__dsta[v46] & v45);
  v56 = (const void *)((unint64_t)&v39[v46] & v45);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v30 + 48))(v56, 1, v80))
  {
    memcpy(v55, v56, __n);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v30 + 16))(v55, v56, v80);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v55, 0, 1, v80);
  }
  v57 = __dsta;
  v58 = (void *)(((unint64_t)v55 + v48) & v78);
  v59 = (const void *)(((unint64_t)v56 + v48) & v78);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v33 + 48))(v59, 1, v79))
  {
    memcpy(v58, v59, v77);
    v60 = v81;
    if (v43)
      goto LABEL_89;
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v33 + 16))(v58, v59, v79);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v58, 0, 1, v79);
    v60 = v81;
    if (v43)
      goto LABEL_89;
  }
  __dsta[v51] = 0;
LABEL_89:
  if (v43)
    v62 = v51;
  else
    v62 = v51 + 1;
  v63 = (unint64_t)&v57[v62];
  v64 = (unint64_t)&v39[v62];
  *(_BYTE *)v63 = *(_BYTE *)v64;
  v63 &= 0xFFFFFFFFFFFFFFF8;
  v64 &= 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v63 + 8) = *(_QWORD *)(v64 + 8);
  v65 = a3[7];
  v66 = *(_QWORD *)(v65 - 8);
  v67 = *(unsigned __int8 *)(v66 + 80);
  v68 = (void *)((v67 + 16 + v63) & ~v67);
  v69 = (const void *)((v67 + 16 + v64) & ~v67);
  v70 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v66 + 48);
  swift_bridgeObjectRetain();
  if (v70(v69, 1, v65))
  {
    v71 = *(_DWORD *)(v66 + 84);
    v72 = *(_QWORD *)(v66 + 64);
    if (v71)
      v73 = v72;
    else
      v73 = v72 + 1;
    memcpy(v68, v69, v73);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v66 + 16))(v68, v69, v65);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v66 + 56))(v68, 0, 1, v65);
    v71 = *(_DWORD *)(v66 + 84);
    v72 = *(_QWORD *)(v66 + 64);
  }
  if (v71)
    v74 = v72;
  else
    v74 = v72 + 1;
  *(_QWORD *)(((unint64_t)v68 + v74 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v69 + v74 + 7) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  return v60;
}

_QWORD *sub_23BECD8F4(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  char v35;
  char v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  size_t v60;
  size_t v61;
  char *v62;
  uint64_t (*v63)(char *, uint64_t);
  uint64_t v64;
  int v65;
  int v66;
  char v67;
  int v68;
  int v69;
  uint64_t v70;
  unint64_t v71;
  unsigned int v72;
  unint64_t v73;
  unint64_t v74;
  unsigned int v75;
  unint64_t v76;
  unsigned int v77;
  int v78;
  int v79;
  unint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  size_t v83;
  unsigned int v84;
  size_t v85;
  void *v86;
  void *v87;
  uint64_t (*v88)(void *, uint64_t, uint64_t);
  int v89;
  int v90;
  void *v91;
  void *v92;
  uint64_t (*v93)(void *, uint64_t, uint64_t);
  int v94;
  int v95;
  size_t v96;
  void *v97;
  const void *v98;
  void *v99;
  const void *v100;
  size_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  void *v110;
  uint64_t (*v111)(void *, uint64_t, uint64_t);
  int v112;
  int v113;
  size_t v114;
  uint64_t v115;
  _QWORD *result;
  size_t v117;
  size_t __n;
  size_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  _QWORD *v128;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v128 = a3;
  v6 = a3[8];
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 | 7) + 16;
  v122 = a1;
  v10 = ((unint64_t)a1 + v9) & ~(v8 | 7);
  v11 = ((unint64_t)a2 + v9) & ~(v8 | 7);
  v12 = *(_QWORD *)(v7 + 64);
  if (v12 <= 0x10)
    v13 = 16;
  else
    v13 = *(_QWORD *)(v7 + 64);
  v14 = v8 + 8;
  v15 = v12 + ((v8 + 8) & ~v8);
  if (v15 <= 0x18)
    v16 = 24;
  else
    v16 = v15;
  if (v16 + 1 <= v13 + 1)
    v17 = v13 + 1;
  else
    v17 = v16 + 1;
  if (v17 + 1 > v13)
    v18 = v17 + 1;
  else
    v18 = v13;
  if (v10 != v11)
  {
    v20 = ~v8;
    switch(*(_BYTE *)(v10 + v18))
    {
      case 0:
        goto LABEL_31;
      case 1:
      case 2:
        goto LABEL_20;
      case 3:
        v22 = *(unsigned __int8 *)(v10 + v17);
        if (v22 >= 2)
        {
          if (v17 <= 3)
            v23 = v17;
          else
            v23 = 4;
          __asm { BR              X12 }
        }
        if (v22 == 1)
        {
          v27 = *(unsigned __int8 *)(v10 + v16);
          if (v27 >= 2)
          {
            if (v16 <= 3)
              v28 = v16;
            else
              v28 = 4;
            __asm { BR              X12 }
          }
          if (v27 == 1)
            (*(void (**)(uint64_t, uint64_t))(v7 + 8))((v14 + v10) & v20, v6);
        }
        else
        {
          v29 = *(unsigned __int8 *)(v10 + v13);
          if (v29 >= 2)
          {
            if (v13 <= 3)
              v30 = v13;
            else
              v30 = 4;
            __asm { BR              X12 }
          }
          if (v29 == 1)
LABEL_20:
            (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v10, v6);
        }
LABEL_31:
        switch(*(_BYTE *)(v11 + v18))
        {
          case 0:
            v24 = 0;
            *(_OWORD *)v10 = *(_OWORD *)v11;
            break;
          case 1:
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v10, v11, v6);
            v24 = 1;
            break;
          case 2:
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v10, v11, v6);
            v24 = 2;
            break;
          case 3:
            v25 = *(unsigned __int8 *)(v11 + v17);
            if (v25 >= 2)
            {
              if (v17 <= 3)
                v26 = v17;
              else
                v26 = 4;
              __asm { BR              X12 }
            }
            if (v25 == 1)
            {
              v31 = *(unsigned __int8 *)(v11 + v16);
              if (v31 >= 2)
              {
                if (v16 <= 3)
                  v32 = v16;
                else
                  v32 = 4;
                __asm { BR              X12 }
              }
              if (v31 == 1)
              {
                *(_QWORD *)v10 = *(_QWORD *)v11;
                (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))((v14 + v10) & v20, (v14 + v11) & v20, v6);
                v35 = 1;
                v13 = v16;
                v36 = 1;
              }
              else
              {
                v35 = 0;
                v37 = *(_OWORD *)v11;
                *(_QWORD *)(v10 + 16) = *(_QWORD *)(v11 + 16);
                *(_OWORD *)v10 = v37;
                v36 = 1;
                v13 = v16;
              }
            }
            else
            {
              v33 = *(unsigned __int8 *)(v11 + v13);
              if (v33 >= 2)
              {
                if (v13 <= 3)
                  v34 = v13;
                else
                  v34 = 4;
                __asm { BR              X12 }
              }
              if (v33 == 1)
              {
                (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v10, v11, v6);
                v36 = 0;
                v35 = 1;
              }
              else
              {
                v35 = 0;
                v36 = 0;
                *(_OWORD *)v10 = *(_OWORD *)v11;
              }
            }
            *(_BYTE *)(v10 + v13) = v35;
            *(_BYTE *)(v10 + v17) = v36;
            v24 = 3;
            break;
          default:
            if (v18 <= 3)
              v21 = v18;
            else
              v21 = 4;
            __asm { BR              X12 }
            return result;
        }
        *(_BYTE *)(v10 + v18) = v24;
        break;
      default:
        if (v18 <= 3)
          v19 = v18;
        else
          v19 = 4;
        __asm { BR              X13 }
        return result;
    }
  }
  v38 = sub_23BFF82CC();
  v39 = v38;
  v40 = *(_QWORD *)(v38 - 8);
  v124 = v128[9];
  v41 = *(_QWORD *)(v124 - 8);
  v42 = *(unsigned int *)(v40 + 84);
  v43 = *(unsigned int *)(v41 + 84);
  v123 = v128[2];
  v44 = *(_QWORD *)(v123 - 8);
  v45 = *(unsigned int *)(v44 + 84);
  v46 = (*(_DWORD *)(v41 + 80) | *(_DWORD *)(v40 + 80) | *(_DWORD *)(v44 + 80));
  v47 = *(_DWORD *)(v41 + 80);
  v48 = *(_DWORD *)(v44 + 80);
  v49 = v18 + v46 + 1;
  v50 = (char *)((v49 + v10) & ~v46);
  v51 = (char *)((v49 + v11) & ~v46);
  if ((_DWORD)v43)
    v52 = v43 - 1;
  else
    v52 = 0;
  if (v52 <= v42)
    v53 = *(_DWORD *)(v40 + 84);
  else
    v53 = v52;
  v54 = v45 - 1;
  if (!(_DWORD)v45)
    v54 = 0;
  if (v54 <= v53)
    v55 = v53;
  else
    v55 = v54;
  if ((_DWORD)v43)
    v56 = *(_QWORD *)(v41 + 64);
  else
    v56 = *(_QWORD *)(v41 + 64) + 1;
  v57 = *(_QWORD *)(v40 + 64);
  v127 = ~v47;
  v58 = v57 + v47;
  v59 = (v56 + v48 + ((v57 + v47) & ~v47)) & ~v48;
  v125 = *(_QWORD *)(v123 - 8);
  v60 = *(_QWORD *)(v44 + 64);
  if (!(_DWORD)v45)
    ++v60;
  __n = v56;
  v119 = v60;
  v61 = v59 + v60;
  v126 = v55;
  v120 = v56 + v48;
  v121 = ~v48;
  if (v55)
  {
    v117 = v59 + v60;
    v62 = v50;
    if ((_DWORD)v42 != v55)
    {
      v70 = v38;
      v71 = (unint64_t)&v50[v58] & v127;
      if (v52 == v55)
        v72 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v41 + 48))(v71, v43, v124);
      else
        v72 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v44 + 48))((v56 + v48 + v71) & ~v48, v45, v123);
      v73 = (unint64_t)&v51[v58];
      if (v72 >= 2)
      {
        v76 = v73 & v127;
        if (v52 == v126)
          v77 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v41 + 48))(v76, v43, v124);
        else
          v77 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v125 + 48))((v120 + v76) & v121, v45, v123);
        v61 = v117;
        v39 = v70;
        if (v77 < 2)
          goto LABEL_159;
        goto LABEL_155;
      }
      v74 = v73 & v127;
      if (v52 == v126)
        v75 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v41 + 48))(v74, v43, v124);
      else
        v75 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v125 + 48))((v120 + v74) & v121, v45, v123);
      v61 = v117;
      v39 = v70;
      if (v75 >= 2)
      {
LABEL_131:
        (*(void (**)(char *, uint64_t))(v40 + 8))(v62, v39);
        v80 = (unint64_t)&v62[v58] & v127;
        if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v41 + 48))(v80, 1, v124))
          (*(void (**)(unint64_t, uint64_t))(v41 + 8))(v80, v124);
        v81 = (v120 + v80) & v121;
        v82 = v122;
        if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v125 + 48))(v81, 1, v123))
          (*(void (**)(unint64_t, uint64_t))(v125 + 8))(v81, v123);
        if (v126)
          v83 = v61;
        else
          v83 = v61 + 1;
        memcpy(v62, v51, v83);
        v84 = v126;
        goto LABEL_165;
      }
LABEL_139:
      v85 = v61;
      (*(void (**)(char *, char *, uint64_t))(v40 + 24))(v62, v51, v39);
      v86 = (void *)((unint64_t)&v62[v58] & v127);
      v87 = (void *)((unint64_t)&v51[v58] & v127);
      v88 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v41 + 48);
      v89 = v88(v86, 1, v124);
      v90 = v88(v87, 1, v124);
      if (v89)
      {
        if (!v90)
        {
          (*(void (**)(void *, void *, uint64_t))(v41 + 16))(v86, v87, v124);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v86, 0, 1, v124);
          goto LABEL_145;
        }
      }
      else
      {
        if (!v90)
        {
          (*(void (**)(void *, void *, uint64_t))(v41 + 24))(v86, v87, v124);
LABEL_145:
          v91 = (void *)(((unint64_t)v86 + v120) & v121);
          v92 = (void *)(((unint64_t)v87 + v120) & v121);
          v93 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v125 + 48);
          v94 = v93(v91, 1, v123);
          v95 = v93(v92, 1, v123);
          v61 = v85;
          if (v94)
          {
            if (!v95)
            {
              (*(void (**)(void *, void *, uint64_t))(v125 + 16))(v91, v92, v123);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v125 + 56))(v91, 0, 1, v123);
LABEL_151:
              v82 = v122;
              v84 = v126;
              goto LABEL_165;
            }
          }
          else
          {
            if (!v95)
            {
              (*(void (**)(void *, void *, uint64_t))(v125 + 24))(v91, v92, v123);
              goto LABEL_151;
            }
            (*(void (**)(void *, uint64_t))(v125 + 8))(v91, v123);
          }
          memcpy(v91, v92, v119);
          goto LABEL_151;
        }
        (*(void (**)(void *, uint64_t))(v41 + 8))(v86, v124);
      }
      memcpy(v86, v87, __n);
      goto LABEL_145;
    }
    v63 = *(uint64_t (**)(char *, uint64_t))(v40 + 48);
    v64 = v38;
    v65 = v63(v50, v42);
    v66 = ((uint64_t (*)(char *, uint64_t, uint64_t))v63)(v51, v42, v64);
    v39 = v64;
    v61 = v117;
    if (v65)
    {
      if (!v66)
        goto LABEL_159;
LABEL_155:
      if (v126)
        v96 = v61;
      else
        v96 = v61 + 1;
      memcpy(v62, v51, v96);
      v84 = v126;
      v82 = v122;
      goto LABEL_165;
    }
LABEL_130:
    if (v66)
      goto LABEL_131;
    goto LABEL_139;
  }
  v67 = 8 * v61;
  v62 = v50;
  if (!v50[v61])
    goto LABEL_121;
  v68 = (v50[v61] - 1) << v67;
  if (v61 > 3)
    v68 = 0;
  if ((_DWORD)v61)
  {
    if (v61 <= 3)
      v69 = v61;
    else
      v69 = 4;
    __asm { BR              X12 }
  }
  if (v68 == -1)
  {
LABEL_121:
    if (!v51[v61])
      goto LABEL_139;
    v78 = (v51[v61] - 1) << v67;
    if (v61 > 3)
      v78 = 0;
    if ((_DWORD)v61)
    {
      if (v61 <= 3)
        v79 = v61;
      else
        v79 = 4;
      __asm { BR              X11 }
    }
    v66 = v78 + 1;
    goto LABEL_130;
  }
  if (v51[v61] && (v51[v61] - 1) << v67 != -1)
    goto LABEL_155;
LABEL_159:
  (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v62, v51, v39);
  v97 = (void *)((unint64_t)&v62[v58] & v127);
  v98 = (const void *)((unint64_t)&v51[v58] & v127);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v41 + 48))(v98, 1, v124))
  {
    memcpy(v97, v98, __n);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v41 + 16))(v97, v98, v124);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v97, 0, 1, v124);
  }
  v99 = (void *)(((unint64_t)v97 + v120) & v121);
  v100 = (const void *)(((unint64_t)v98 + v120) & v121);
  v82 = v122;
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v125 + 48))(v100, 1, v123))
  {
    memcpy(v99, v100, v119);
    v84 = v126;
    if (v126)
      goto LABEL_165;
    goto LABEL_164;
  }
  (*(void (**)(void *, const void *, uint64_t))(v125 + 16))(v99, v100, v123);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v125 + 56))(v99, 0, 1, v123);
  v84 = v126;
  if (!v126)
LABEL_164:
    v62[v61] = 0;
LABEL_165:
  if (v84)
    v101 = v61;
  else
    v101 = v61 + 1;
  v102 = (unint64_t)&v62[v101];
  v103 = (unint64_t)&v51[v101];
  *(_BYTE *)v102 = *(_BYTE *)v103;
  v104 = v102 & 0xFFFFFFFFFFFFFFF8;
  v105 = v103 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)((v102 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_QWORD *)((v103 & 0xFFFFFFFFFFFFFFF8) + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v106 = v128[7];
  v107 = *(_QWORD *)(v106 - 8);
  v108 = *(unsigned __int8 *)(v107 + 80);
  v109 = (void *)((v108 + 16 + v104) & ~v108);
  v110 = (void *)((v108 + 16 + v105) & ~v108);
  v111 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v107 + 48);
  v112 = v111(v109, 1, v106);
  v113 = v111(v110, 1, v106);
  if (v112)
  {
    if (!v113)
    {
      (*(void (**)(void *, void *, uint64_t))(v107 + 16))(v109, v110, v106);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v107 + 56))(v109, 0, 1, v106);
      goto LABEL_177;
    }
  }
  else
  {
    if (!v113)
    {
      (*(void (**)(void *, void *, uint64_t))(v107 + 24))(v109, v110, v106);
      goto LABEL_177;
    }
    (*(void (**)(void *, uint64_t))(v107 + 8))(v109, v106);
  }
  if (*(_DWORD *)(v107 + 84))
    v114 = *(_QWORD *)(v107 + 64);
  else
    v114 = *(_QWORD *)(v107 + 64) + 1;
  memcpy(v109, v110, v114);
LABEL_177:
  if (*(_DWORD *)(v107 + 84))
    v115 = *(_QWORD *)(v107 + 64);
  else
    v115 = *(_QWORD *)(v107 + 64) + 1;
  *(_QWORD *)(((unint64_t)v109 + v115 + 7) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v110
                                                                                       + v115
                                                                                       + 7) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v82;
}

_OWORD *sub_23BECE770(_OWORD *a1, _OWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  char v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  size_t v50;
  size_t v51;
  int v52;
  int v53;
  unint64_t v54;
  void *v55;
  const void *v56;
  _QWORD *v57;
  void *v58;
  const void *v59;
  _OWORD *v60;
  _BYTE *v61;
  size_t v62;
  size_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  const void *v70;
  int v71;
  size_t v72;
  size_t v73;
  size_t v74;
  _OWORD *result;
  size_t __n;
  size_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _BYTE *__dst;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3[8] - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 | 7) + 16;
  v7 = ((unint64_t)a1 + v6) & ~(v5 | 7);
  v8 = ((unint64_t)a2 + v6) & ~(v5 | 7);
  v9 = *(_QWORD *)(v4 + 64);
  if (v9 <= 0x10)
    v10 = 16;
  else
    v10 = *(_QWORD *)(v4 + 64);
  v11 = v5 + 8;
  v12 = ((v5 + 8) & ~v5) + v9;
  if (v12 <= 0x18)
    v13 = 24;
  else
    v13 = v12;
  if (v13 + 1 <= v10 + 1)
    v14 = v10 + 1;
  else
    v14 = v13 + 1;
  if (v14 + 1 > v10)
    v15 = v14 + 1;
  else
    v15 = v10;
  v17 = ~v5;
  switch(*(_BYTE *)(v8 + v15))
  {
    case 0:
      v18 = 0;
      *(_OWORD *)v7 = *(_OWORD *)v8;
      break;
    case 1:
      (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v7, v8);
      v18 = 1;
      break;
    case 2:
      (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v7, v8);
      v18 = 2;
      break;
    case 3:
      v19 = *(unsigned __int8 *)(v8 + v14);
      if (v19 >= 2)
      {
        if (v14 <= 3)
          v20 = v14;
        else
          v20 = 4;
        __asm { BR              X15 }
      }
      if (v19 == 1)
      {
        v21 = *(unsigned __int8 *)(v8 + v13);
        if (v21 >= 2)
        {
          if (v13 <= 3)
            v22 = v13;
          else
            v22 = 4;
          __asm { BR              X15 }
        }
        if (v21 == 1)
        {
          *(_QWORD *)v7 = *(_QWORD *)v8;
          (*(void (**)(uint64_t, uint64_t))(v4 + 32))((v11 + v7) & v17, (v11 + v8) & v17);
          v25 = 1;
          v10 = v13;
          v26 = 1;
        }
        else
        {
          v25 = 0;
          v27 = *(_OWORD *)v8;
          *(_QWORD *)(v7 + 16) = *(_QWORD *)(v8 + 16);
          *(_OWORD *)v7 = v27;
          v26 = 1;
          v10 = v13;
        }
      }
      else
      {
        v23 = *(unsigned __int8 *)(v8 + v10);
        if (v23 >= 2)
        {
          if (v10 <= 3)
            v24 = v10;
          else
            v24 = 4;
          __asm { BR              X13 }
        }
        if (v23 == 1)
        {
          (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v7, v8);
          v26 = 0;
          v25 = 1;
        }
        else
        {
          v25 = 0;
          v26 = 0;
          *(_OWORD *)v7 = *(_OWORD *)v8;
        }
      }
      *(_BYTE *)(v7 + v10) = v25;
      *(_BYTE *)(v7 + v14) = v26;
      v18 = 3;
      break;
    default:
      if (v15 <= 3)
        v16 = v15;
      else
        v16 = 4;
      __asm { BR              X15 }
      return result;
  }
  *(_BYTE *)(v7 + v15) = v18;
  v28 = sub_23BFF82CC();
  v29 = *(_QWORD *)(v28 - 8);
  v80 = a3[9];
  v81 = a3;
  v30 = *(_QWORD *)(v80 - 8);
  v31 = *(unsigned int *)(v29 + 84);
  v32 = *(_DWORD *)(v30 + 84);
  v79 = a3[2];
  v33 = *(_QWORD *)(v79 - 8);
  v34 = *(unsigned int *)(v33 + 84);
  v35 = (*(_DWORD *)(v30 + 80) | *(_DWORD *)(v29 + 80) | *(_DWORD *)(v33 + 80));
  v36 = *(_DWORD *)(v30 + 80);
  v37 = *(_DWORD *)(v33 + 80);
  v38 = v15 + v35 + 1;
  __dst = (_BYTE *)((v38 + v7) & ~v35);
  v39 = (_BYTE *)((v38 + v8) & ~v35);
  v40 = v32 - 1;
  if (!v32)
    v40 = 0;
  if (v40 <= v31)
    v41 = *(_DWORD *)(v29 + 84);
  else
    v41 = v40;
  v42 = v34 - 1;
  if (!(_DWORD)v34)
    v42 = 0;
  if (v42 <= v41)
    v43 = v41;
  else
    v43 = v42;
  if (v32)
    v44 = *(_QWORD *)(v30 + 64);
  else
    v44 = *(_QWORD *)(v30 + 64) + 1;
  v45 = ~v36;
  v46 = *(_QWORD *)(v29 + 64) + v36;
  v47 = ~v37;
  v48 = v44 + v37;
  v49 = (v44 + v37 + (v46 & ~v36)) & ~v37;
  v50 = *(_QWORD *)(v33 + 64);
  if (!(_DWORD)v34)
    ++v50;
  __n = v44;
  v77 = v50;
  v51 = v49 + v50;
  v78 = v47;
  if (!v43)
  {
    if (!v39[v51])
      goto LABEL_75;
    v52 = (v39[v51] - 1) << (8 * v51);
    if (v51 > 3)
      v52 = 0;
    if ((_DWORD)v51)
    {
      if (v51 <= 3)
        v53 = v49 + v50;
      else
        v53 = 4;
      __asm { BR              X11 }
    }
    if (v52 == -1)
      goto LABEL_75;
    goto LABEL_84;
  }
  if ((_DWORD)v31 == v43)
  {
    if (!(*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v29 + 48))(v39, v31, v28))
      goto LABEL_75;
LABEL_84:
    if (v43)
      v62 = v51;
    else
      v62 = v51 + 1;
    v61 = __dst;
    memcpy(__dst, v39, v62);
    v57 = v81;
    v60 = a1;
    goto LABEL_88;
  }
  v54 = (unint64_t)&v39[v46] & v45;
  if (v40 == v43)
  {
    if ((*(unsigned int (**)(unint64_t))(v30 + 48))(v54) >= 2)
      goto LABEL_84;
  }
  else if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v33 + 48))((v48 + v54) & v47, v34, v79) >= 2)
  {
    goto LABEL_84;
  }
LABEL_75:
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v29 + 32))(__dst, v39, v28);
  v55 = (void *)((unint64_t)&__dst[v46] & v45);
  v56 = (const void *)((unint64_t)&v39[v46] & v45);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v30 + 48))(v56, 1, v80))
  {
    memcpy(v55, v56, __n);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v30 + 32))(v55, v56, v80);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v55, 0, 1, v80);
  }
  v57 = v81;
  v58 = (void *)(((unint64_t)v55 + v48) & v78);
  v59 = (const void *)(((unint64_t)v56 + v48) & v78);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v33 + 48))(v59, 1, v79))
  {
    memcpy(v58, v59, v77);
    v60 = a1;
    v61 = __dst;
    if (v43)
      goto LABEL_88;
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v33 + 32))(v58, v59, v79);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v58, 0, 1, v79);
    v60 = a1;
    v61 = __dst;
    if (v43)
      goto LABEL_88;
  }
  v61[v51] = 0;
LABEL_88:
  if (v43)
    v63 = v51;
  else
    v63 = v51 + 1;
  v64 = (unint64_t)&v61[v63];
  v65 = (unint64_t)&v39[v63];
  *(_BYTE *)v64 = *(_BYTE *)v65;
  v64 &= 0xFFFFFFFFFFFFFFF8;
  v65 &= 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v64 + 8) = *(_QWORD *)(v65 + 8);
  v66 = v57[7];
  v67 = *(_QWORD *)(v66 - 8);
  v68 = *(unsigned __int8 *)(v67 + 80);
  v69 = (void *)((v68 + 16 + v64) & ~v68);
  v70 = (const void *)((v68 + 16 + v65) & ~v68);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v67 + 48))(v70, 1, v66))
  {
    v71 = *(_DWORD *)(v67 + 84);
    v72 = *(_QWORD *)(v67 + 64);
    if (v71)
      v73 = v72;
    else
      v73 = v72 + 1;
    memcpy(v69, v70, v73);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v67 + 32))(v69, v70, v66);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v69, 0, 1, v66);
    v71 = *(_DWORD *)(v67 + 84);
    v72 = *(_QWORD *)(v67 + 64);
  }
  if (v71)
    v74 = v72;
  else
    v74 = v72 + 1;
  *(_QWORD *)(((unint64_t)v69 + v74 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v70 + v74 + 7) & 0xFFFFFFFFFFFFF8);
  return v60;
}

_QWORD *sub_23BECEED8(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  char v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  size_t v61;
  size_t v62;
  char *v63;
  uint64_t (*v64)(char *, uint64_t);
  uint64_t v65;
  int v66;
  int v67;
  char v68;
  int v69;
  int v70;
  uint64_t v71;
  unint64_t v72;
  unsigned int v73;
  unint64_t v74;
  unint64_t v75;
  unsigned int v76;
  unint64_t v77;
  unsigned int v78;
  int v79;
  int v80;
  unint64_t v81;
  unint64_t v82;
  _QWORD *v83;
  size_t v84;
  unsigned int v85;
  size_t v86;
  void *v87;
  void *v88;
  uint64_t (*v89)(void *, uint64_t, uint64_t);
  int v90;
  int v91;
  void *v92;
  void *v93;
  uint64_t (*v94)(void *, uint64_t, uint64_t);
  int v95;
  int v96;
  size_t v97;
  void *v98;
  const void *v99;
  void *v100;
  const void *v101;
  size_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  void *v111;
  uint64_t (*v112)(void *, uint64_t, uint64_t);
  int v113;
  size_t v114;
  uint64_t v115;
  _QWORD *result;
  size_t v117;
  size_t __n;
  size_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  _QWORD *v128;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v128 = a3;
  v7 = a3[8];
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 | 7) + 16;
  v122 = a1;
  v11 = ((unint64_t)a1 + v10) & ~(v9 | 7);
  v12 = ((unint64_t)a2 + v10) & ~(v9 | 7);
  v13 = *(_QWORD *)(v8 + 64);
  if (v13 <= 0x10)
    v14 = 16;
  else
    v14 = *(_QWORD *)(v8 + 64);
  v15 = v9 + 8;
  v16 = v13 + ((v9 + 8) & ~v9);
  if (v16 <= 0x18)
    v17 = 24;
  else
    v17 = v16;
  if (v17 + 1 <= v14 + 1)
    v18 = v14 + 1;
  else
    v18 = v17 + 1;
  if (v18 + 1 > v14)
    v19 = v18 + 1;
  else
    v19 = v14;
  if (v11 != v12)
  {
    v21 = ~v9;
    switch(*(_BYTE *)(v11 + v19))
    {
      case 0:
        goto LABEL_31;
      case 1:
      case 2:
        goto LABEL_20;
      case 3:
        v23 = *(unsigned __int8 *)(v11 + v18);
        if (v23 >= 2)
        {
          if (v18 <= 3)
            v24 = v18;
          else
            v24 = 4;
          __asm { BR              X12 }
        }
        if (v23 == 1)
        {
          v28 = *(unsigned __int8 *)(v11 + v17);
          if (v28 >= 2)
          {
            if (v17 <= 3)
              v29 = v17;
            else
              v29 = 4;
            __asm { BR              X12 }
          }
          if (v28 == 1)
            (*(void (**)(uint64_t, uint64_t))(v8 + 8))((v15 + v11) & v21, v7);
        }
        else
        {
          v30 = *(unsigned __int8 *)(v11 + v14);
          if (v30 >= 2)
          {
            if (v14 <= 3)
              v31 = v14;
            else
              v31 = 4;
            __asm { BR              X12 }
          }
          if (v30 == 1)
LABEL_20:
            (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v11, v7);
        }
LABEL_31:
        switch(*(_BYTE *)(v12 + v19))
        {
          case 0:
            v25 = 0;
            *(_OWORD *)v11 = *(_OWORD *)v12;
            break;
          case 1:
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v11, v12, v7);
            v25 = 1;
            break;
          case 2:
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v11, v12, v7);
            v25 = 2;
            break;
          case 3:
            v26 = *(unsigned __int8 *)(v12 + v18);
            if (v26 >= 2)
            {
              if (v18 <= 3)
                v27 = v18;
              else
                v27 = 4;
              __asm { BR              X12 }
            }
            if (v26 == 1)
            {
              v32 = *(unsigned __int8 *)(v12 + v17);
              if (v32 >= 2)
              {
                if (v17 <= 3)
                  v33 = v17;
                else
                  v33 = 4;
                __asm { BR              X12 }
              }
              if (v32 == 1)
              {
                *(_QWORD *)v11 = *(_QWORD *)v12;
                (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))((v15 + v11) & v21, (v15 + v12) & v21, v7);
                v36 = 1;
                v14 = v17;
                v37 = 1;
              }
              else
              {
                v36 = 0;
                v38 = *(_OWORD *)v12;
                *(_QWORD *)(v11 + 16) = *(_QWORD *)(v12 + 16);
                *(_OWORD *)v11 = v38;
                v37 = 1;
                v14 = v17;
              }
            }
            else
            {
              v34 = *(unsigned __int8 *)(v12 + v14);
              if (v34 >= 2)
              {
                if (v14 <= 3)
                  v35 = v14;
                else
                  v35 = 4;
                __asm { BR              X12 }
              }
              if (v34 == 1)
              {
                (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v11, v12, v7);
                v37 = 0;
                v36 = 1;
              }
              else
              {
                v36 = 0;
                v37 = 0;
                *(_OWORD *)v11 = *(_OWORD *)v12;
              }
            }
            *(_BYTE *)(v11 + v14) = v36;
            *(_BYTE *)(v11 + v18) = v37;
            v25 = 3;
            break;
          default:
            if (v19 <= 3)
              v22 = v19;
            else
              v22 = 4;
            __asm { BR              X12 }
            return result;
        }
        *(_BYTE *)(v11 + v19) = v25;
        break;
      default:
        if (v19 <= 3)
          v20 = v19;
        else
          v20 = 4;
        __asm { BR              X13 }
        return result;
    }
  }
  v39 = sub_23BFF82CC();
  v40 = v39;
  v41 = *(_QWORD *)(v39 - 8);
  v124 = v128[9];
  v42 = *(_QWORD *)(v124 - 8);
  v43 = *(unsigned int *)(v41 + 84);
  v44 = *(unsigned int *)(v42 + 84);
  v123 = v128[2];
  v45 = *(_QWORD *)(v123 - 8);
  v46 = *(unsigned int *)(v45 + 84);
  v47 = (*(_DWORD *)(v42 + 80) | *(_DWORD *)(v41 + 80) | *(_DWORD *)(v45 + 80));
  v48 = *(_DWORD *)(v42 + 80);
  v49 = *(_DWORD *)(v45 + 80);
  v50 = v19 + v47 + 1;
  v51 = (char *)((v50 + v11) & ~v47);
  v52 = (char *)((v50 + v12) & ~v47);
  if ((_DWORD)v44)
    v53 = v44 - 1;
  else
    v53 = 0;
  if (v53 <= v43)
    v54 = *(_DWORD *)(v41 + 84);
  else
    v54 = v53;
  v55 = v46 - 1;
  if (!(_DWORD)v46)
    v55 = 0;
  if (v55 <= v54)
    v56 = v54;
  else
    v56 = v55;
  if ((_DWORD)v44)
    v57 = *(_QWORD *)(v42 + 64);
  else
    v57 = *(_QWORD *)(v42 + 64) + 1;
  v58 = *(_QWORD *)(v41 + 64);
  v127 = ~v48;
  v59 = v58 + v48;
  v60 = (v57 + v49 + ((v58 + v48) & ~v48)) & ~v49;
  v125 = *(_QWORD *)(v123 - 8);
  v61 = *(_QWORD *)(v45 + 64);
  if (!(_DWORD)v46)
    ++v61;
  __n = v57;
  v119 = v61;
  v62 = v60 + v61;
  v126 = v56;
  v120 = v57 + v49;
  v121 = ~v49;
  if (v56)
  {
    v117 = v60 + v61;
    v63 = v51;
    if ((_DWORD)v43 != v56)
    {
      v71 = v39;
      v72 = (unint64_t)&v51[v59] & v127;
      if (v53 == v56)
        v73 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v42 + 48))(v72, v44, v124);
      else
        v73 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v45 + 48))((v57 + v49 + v72) & ~v49, v46, v123);
      v74 = (unint64_t)&v52[v59];
      if (v73 >= 2)
      {
        v77 = v74 & v127;
        if (v53 == v126)
          v78 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v42 + 48))(v77, v44, v124);
        else
          v78 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v125 + 48))((v120 + v77) & v121, v46, v123);
        v62 = v117;
        v40 = v71;
        if (v78 < 2)
          goto LABEL_159;
        goto LABEL_155;
      }
      v75 = v74 & v127;
      if (v53 == v126)
        v76 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v42 + 48))(v75, v44, v124);
      else
        v76 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v125 + 48))((v120 + v75) & v121, v46, v123);
      v62 = v117;
      v40 = v71;
      if (v76 >= 2)
      {
LABEL_131:
        (*(void (**)(char *, uint64_t))(v41 + 8))(v63, v40);
        v81 = (unint64_t)&v63[v59] & v127;
        if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v42 + 48))(v81, 1, v124))
          (*(void (**)(unint64_t, uint64_t))(v42 + 8))(v81, v124);
        v82 = (v120 + v81) & v121;
        v83 = v122;
        if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v125 + 48))(v82, 1, v123))
          (*(void (**)(unint64_t, uint64_t))(v125 + 8))(v82, v123);
        if (v126)
          v84 = v62;
        else
          v84 = v62 + 1;
        memcpy(v63, v52, v84);
        v85 = v126;
        goto LABEL_165;
      }
LABEL_139:
      v86 = v62;
      (*(void (**)(char *, char *, uint64_t))(v41 + 40))(v63, v52, v40);
      v87 = (void *)((unint64_t)&v63[v59] & v127);
      v88 = (void *)((unint64_t)&v52[v59] & v127);
      v89 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v42 + 48);
      v90 = v89(v87, 1, v124);
      v91 = v89(v88, 1, v124);
      if (v90)
      {
        if (!v91)
        {
          (*(void (**)(void *, void *, uint64_t))(v42 + 32))(v87, v88, v124);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v87, 0, 1, v124);
          goto LABEL_145;
        }
      }
      else
      {
        if (!v91)
        {
          (*(void (**)(void *, void *, uint64_t))(v42 + 40))(v87, v88, v124);
LABEL_145:
          v92 = (void *)(((unint64_t)v87 + v120) & v121);
          v93 = (void *)(((unint64_t)v88 + v120) & v121);
          v94 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v125 + 48);
          v95 = v94(v92, 1, v123);
          v96 = v94(v93, 1, v123);
          v62 = v86;
          if (v95)
          {
            if (!v96)
            {
              (*(void (**)(void *, void *, uint64_t))(v125 + 32))(v92, v93, v123);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v125 + 56))(v92, 0, 1, v123);
LABEL_151:
              v83 = v122;
              v85 = v126;
              goto LABEL_165;
            }
          }
          else
          {
            if (!v96)
            {
              (*(void (**)(void *, void *, uint64_t))(v125 + 40))(v92, v93, v123);
              goto LABEL_151;
            }
            (*(void (**)(void *, uint64_t))(v125 + 8))(v92, v123);
          }
          memcpy(v92, v93, v119);
          goto LABEL_151;
        }
        (*(void (**)(void *, uint64_t))(v42 + 8))(v87, v124);
      }
      memcpy(v87, v88, __n);
      goto LABEL_145;
    }
    v64 = *(uint64_t (**)(char *, uint64_t))(v41 + 48);
    v65 = v39;
    v66 = v64(v51, v43);
    v67 = ((uint64_t (*)(char *, uint64_t, uint64_t))v64)(v52, v43, v65);
    v40 = v65;
    v62 = v117;
    if (v66)
    {
      if (!v67)
        goto LABEL_159;
LABEL_155:
      if (v126)
        v97 = v62;
      else
        v97 = v62 + 1;
      memcpy(v63, v52, v97);
      v85 = v126;
      v83 = v122;
      goto LABEL_165;
    }
LABEL_130:
    if (v67)
      goto LABEL_131;
    goto LABEL_139;
  }
  v68 = 8 * v62;
  v63 = v51;
  if (!v51[v62])
    goto LABEL_121;
  v69 = (v51[v62] - 1) << v68;
  if (v62 > 3)
    v69 = 0;
  if ((_DWORD)v62)
  {
    if (v62 <= 3)
      v70 = v62;
    else
      v70 = 4;
    __asm { BR              X12 }
  }
  if (v69 == -1)
  {
LABEL_121:
    if (!v52[v62])
      goto LABEL_139;
    v79 = (v52[v62] - 1) << v68;
    if (v62 > 3)
      v79 = 0;
    if ((_DWORD)v62)
    {
      if (v62 <= 3)
        v80 = v62;
      else
        v80 = 4;
      __asm { BR              X11 }
    }
    v67 = v79 + 1;
    goto LABEL_130;
  }
  if (v52[v62] && (v52[v62] - 1) << v68 != -1)
    goto LABEL_155;
LABEL_159:
  (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v63, v52, v40);
  v98 = (void *)((unint64_t)&v63[v59] & v127);
  v99 = (const void *)((unint64_t)&v52[v59] & v127);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v42 + 48))(v99, 1, v124))
  {
    memcpy(v98, v99, __n);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v42 + 32))(v98, v99, v124);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v98, 0, 1, v124);
  }
  v100 = (void *)(((unint64_t)v98 + v120) & v121);
  v101 = (const void *)(((unint64_t)v99 + v120) & v121);
  v83 = v122;
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v125 + 48))(v101, 1, v123))
  {
    memcpy(v100, v101, v119);
    v85 = v126;
    if (v126)
      goto LABEL_165;
    goto LABEL_164;
  }
  (*(void (**)(void *, const void *, uint64_t))(v125 + 32))(v100, v101, v123);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v125 + 56))(v100, 0, 1, v123);
  v85 = v126;
  if (!v126)
LABEL_164:
    v63[v62] = 0;
LABEL_165:
  if (v85)
    v102 = v62;
  else
    v102 = v62 + 1;
  v103 = (unint64_t)&v63[v102];
  v104 = (unint64_t)&v52[v102];
  *(_BYTE *)v103 = *(_BYTE *)v104;
  v105 = v103 & 0xFFFFFFFFFFFFFFF8;
  v106 = v104 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)((v103 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_QWORD *)((v104 & 0xFFFFFFFFFFFFFFF8) + 8);
  swift_bridgeObjectRelease();
  v107 = v128[7];
  v108 = *(_QWORD *)(v107 - 8);
  v109 = *(unsigned __int8 *)(v108 + 80);
  v110 = (void *)((v109 + 16 + v105) & ~v109);
  v111 = (void *)((v109 + 16 + v106) & ~v109);
  v112 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v108 + 48);
  LODWORD(v105) = v112(v110, 1, v107);
  v113 = v112(v111, 1, v107);
  if ((_DWORD)v105)
  {
    if (!v113)
    {
      (*(void (**)(void *, void *, uint64_t))(v108 + 32))(v110, v111, v107);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v108 + 56))(v110, 0, 1, v107);
      goto LABEL_177;
    }
  }
  else
  {
    if (!v113)
    {
      (*(void (**)(void *, void *, uint64_t))(v108 + 40))(v110, v111, v107);
      goto LABEL_177;
    }
    (*(void (**)(void *, uint64_t))(v108 + 8))(v110, v107);
  }
  if (*(_DWORD *)(v108 + 84))
    v114 = *(_QWORD *)(v108 + 64);
  else
    v114 = *(_QWORD *)(v108 + 64) + 1;
  memcpy(v110, v111, v114);
LABEL_177:
  if (*(_DWORD *)(v108 + 84))
    v115 = *(_QWORD *)(v108 + 64);
  else
    v115 = *(_QWORD *)(v108 + 64) + 1;
  *(_QWORD *)(((unint64_t)v110 + v115 + 7) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v111
                                                                                       + v115
                                                                                       + 7) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease();
  return v83;
}

uint64_t sub_23BECFD34(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v6 = *(_QWORD *)(a3[8] - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = 16;
  if (v7 > 0x10)
    v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = ((v9 + 8) & ~v9) + v7;
  if (v10 <= 0x18)
    v10 = 24;
  v11 = v10 + 1;
  if (v11 <= v8 + 1)
    v11 = v8 + 1;
  if (v11 + 1 > v8)
    v12 = v11 + 1;
  else
    v12 = v8;
  v13 = sub_23BFF82CC();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned int *)(v14 + 84);
  v16 = a3[9];
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(unsigned int *)(v17 + 84);
  if ((_DWORD)v18)
    v19 = v18 - 1;
  else
    v19 = 0;
  if (v19 <= v15)
    v20 = *(_DWORD *)(v14 + 84);
  else
    v20 = v19;
  v21 = a3[2];
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(unsigned int *)(v22 + 84);
  v24 = v23 - 1;
  if (!(_DWORD)v23)
    v24 = 0;
  if (v24 <= v20)
    v25 = v20;
  else
    v25 = v24;
  if (v25)
    v26 = v25 - 1;
  else
    v26 = 0;
  v27 = a3[7];
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(unsigned int *)(v28 + 84);
  v30 = v29 - 1;
  if (!(_DWORD)v29)
    v30 = 0;
  if (v26 > v30)
    v30 = v26;
  if (v30 <= 0x7FFFFFFF)
    v31 = 0x7FFFFFFF;
  else
    v31 = v30;
  v32 = *(_QWORD *)(v17 + 64);
  if (!(_DWORD)v18)
    ++v32;
  if ((_DWORD)v23)
    v33 = v25 == 0;
  else
    v33 = (v25 == 0) + 1;
  if ((_DWORD)v29)
    v34 = 7;
  else
    v34 = 8;
  if (!a2)
    return 0;
  v53 = v16;
  v35 = a1;
  v36 = v9 | 7;
  v37 = (*(_DWORD *)(v17 + 80) | *(_DWORD *)(v14 + 80) | *(_DWORD *)(v22 + 80));
  v38 = v12 + v37;
  v39 = *(_DWORD *)(v17 + 80);
  v40 = *(_DWORD *)(v22 + 80);
  v41 = v38 + 1;
  v42 = *(_QWORD *)(v14 + 64) + v39;
  v55 = v33 + *(_QWORD *)(v22 + 64) + ((v32 + v40 + (v42 & ~v39)) & ~v40);
  v43 = *(unsigned __int8 *)(v28 + 80);
  v54 = v43 + 16;
  if (v31 < a2)
  {
    if (((((v34
           + *(_QWORD *)(v28 + 64)
           + ((v54 + ((v55 + ((v41 + ((v9 + 16) & ~v36)) & ~v37)) & 0xFFFFFFFFFFFFFFF8)) & ~v43)) & 0xFFFFFFFFFFFFFFF8)
         + 8) & 0xFFFFFFF8) != 0)
      v44 = 2;
    else
      v44 = a2 - v31 + 1;
    if (v44 >= 0x10000)
      v45 = 4;
    else
      v45 = 2;
    if (v44 < 0x100)
      v45 = 1;
    if (v44 >= 2)
      v46 = v45;
    else
      v46 = 0;
    __asm { BR              X21 }
  }
  if ((v30 & 0x80000000) != 0)
  {
    v49 = (v41 + ((v35 + v36 + 16) & ~v36)) & ~v37;
    if (v26 == v31)
    {
      if (v25 >= 2)
      {
        if ((_DWORD)v15 == v25)
        {
          v50 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v49, v15, v13);
        }
        else
        {
          v51 = (v42 + v49) & ~v39;
          if (v19 == v25)
            v52 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v51, v18, v53);
          else
            v52 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))((v32 + v40 + v51) & ~v40, v23, v21);
          if (v52 >= 2)
            v50 = v52 - 1;
          else
            v50 = 0;
        }
        goto LABEL_70;
      }
    }
    else if (v29 >= 2)
    {
      v50 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v28 + 48))((v54 + ((v55 + v49) & 0xFFFFFFFFFFFFFFF8)) & ~v43, v29, v27);
LABEL_70:
      if (v50 >= 2)
        return v50 - 1;
      else
        return 0;
    }
    return 0;
  }
  v47 = *(_QWORD *)(v35 + 8);
  if (v47 >= 0xFFFFFFFF)
    LODWORD(v47) = -1;
  return (v47 + 1);
}

void sub_23BED00B4(_DWORD *a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;

  v6 = *(_QWORD *)(a4[8] - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = 16;
  if (v7 > 0x10)
    v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = ((v9 + 8) & ~v9) + v7;
  if (v10 <= 0x18)
    v10 = 24;
  v11 = v10 + 1;
  if (v11 <= v8 + 1)
    v11 = v8 + 1;
  if (v11 + 1 > v8)
    v12 = v11 + 1;
  else
    v12 = v8;
  v13 = 0;
  v14 = *(_QWORD *)(sub_23BFF82CC() - 8);
  v15 = *(_QWORD *)(a4[9] - 8);
  v16 = *(_DWORD *)(v15 + 84);
  if (v16)
    v17 = v16 - 1;
  else
    v17 = 0;
  if (v17 <= *(_DWORD *)(v14 + 84))
    v18 = *(_DWORD *)(v14 + 84);
  else
    v18 = v17;
  v19 = *(_QWORD *)(a4[2] - 8);
  v20 = *(_DWORD *)(v19 + 84);
  if (v20)
    v21 = v20 - 1;
  else
    v21 = 0;
  if (v21 <= v18)
    v22 = v18;
  else
    v22 = v21;
  if (v22)
    v23 = v22 - 1;
  else
    v23 = 0;
  v24 = *(_QWORD *)(a4[7] - 8);
  v25 = *(_DWORD *)(v24 + 84);
  v26 = v25 - 1;
  if (!v25)
    v26 = 0;
  if (v23 <= v26)
    v27 = v26;
  else
    v27 = v23;
  if (v27 <= 0x7FFFFFFF)
    v28 = 0x7FFFFFFF;
  else
    v28 = v27;
  v29 = *(_QWORD *)(v15 + 64);
  if (!v16)
    ++v29;
  if (v20)
    v30 = *(_QWORD *)(v19 + 64);
  else
    v30 = *(_QWORD *)(v19 + 64) + 1;
  v31 = *(_DWORD *)(v15 + 80) | *(_DWORD *)(v14 + 80) | *(_DWORD *)(v19 + 80);
  v32 = (v29
       + *(_DWORD *)(v19 + 80)
       + ((*(_QWORD *)(v14 + 64) + *(_DWORD *)(v15 + 80)) & ~(unint64_t)*(_DWORD *)(v15 + 80))) & ~(unint64_t)*(_DWORD *)(v19 + 80);
  if (v22)
    v33 = v32 + v30;
  else
    v33 = v32 + v30 + 1;
  v34 = 7;
  if (!v25)
    v34 = 8;
  if (v28 < a3)
  {
    v35 = a3 - v28;
    if ((((_DWORD)v34
         + *(_DWORD *)(v24 + 64)
         + ((*(unsigned __int8 *)(v24 + 80)
           + 16
           + (((_DWORD)v33 + (((_DWORD)v12 + v31 + 1 + (((_DWORD)v9 + 16) & ~(v9 | 7))) & ~v31)) & 0xFFFFFFF8)) & ~*(unsigned __int8 *)(v24 + 80))) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v36 = v35 + 1;
    else
      v36 = 2;
    if (v36 >= 0x10000)
      v13 = 4;
    else
      v13 = 2;
    if (v36 < 0x100)
      v13 = 1;
    if (v36 < 2)
      v13 = 0;
  }
  if (a2 > v28)
  {
    if ((((_DWORD)v34
         + *(_DWORD *)(v24 + 64)
         + ((*(unsigned __int8 *)(v24 + 80)
           + 16
           + (((_DWORD)v33 + (((_DWORD)v12 + v31 + 1 + (((_DWORD)v9 + 16) & ~(v9 | 7))) & ~v31)) & 0xFFFFFFF8)) & ~*(unsigned __int8 *)(v24 + 80))) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      bzero(a1, ((v34+ *(_QWORD *)(v24 + 64)+ ((*(unsigned __int8 *)(v24 + 80)+ 16+ ((v33 + ((v12 + v31 + 1 + ((v9 + 16) & ~(v9 | 7))) & ~(unint64_t)v31)) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80))) & 0xFFFFFFFFFFFFFFF8)+ 8);
      *a1 = ~v28 + a2;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X3 }
}

void *sub_23BED032C@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, unsigned int a5@<W5>, int a6@<W6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, size_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  size_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  void *v48;
  int v49;
  uint64_t v50;
  uint64_t (*v51)(void *, uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  void *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  size_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  int v63;

  *((_BYTE *)v62 + v42) = 0;
  if (!v63)
    return result;
  if ((v47 & 0x80000000) == 0)
  {
    if (v63 < 0)
    {
      *v62 = v63 ^ 0x80000000;
      v62[1] = 0;
    }
    else
    {
      v62[1] = (v63 - 1);
    }
    return result;
  }
  v48 = (void *)((v39 + (((unint64_t)v62 + a8 + 16) & v41)) & v33);
  if (v44 != v43)
  {
    if (v34 < 2)
      return result;
    result = (void *)((v46 + (((unint64_t)v48 + v45) & 0xFFFFFFFFFFFFFFF8)) & v40);
    v50 = (v63 + 1);
    v51 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(a7 + 56);
    a3 = v34;
    v52 = v61;
    return (void *)v51(result, v50, a3, v52);
  }
  if (a5 < 2)
    return result;
  if (v63 + 1 > a5)
  {
    if ((_DWORD)v35)
    {
      if (v35 <= 3)
        v49 = v35;
      else
        v49 = 4;
      bzero(v48, v35);
      __asm { BR              X10 }
    }
    return result;
  }
  if (v63 == -1)
    return result;
  if ((_DWORD)v32 == a5)
  {
    v51 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(v37 + 56);
    result = v48;
    v50 = (v63 + 1);
    a3 = v32;
    v52 = v60;
    return (void *)v51(result, v50, a3, v52);
  }
  result = (void *)(((uint64_t)v48 + (_QWORD)result) & v56);
  if (a6 == a5)
  {
    v50 = (v63 + 2);
    v51 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(v36 + 56);
    v52 = v59;
    return (void *)v51(result, v50, a3, v52);
  }
  v53 = (void *)(((unint64_t)result + a2) & v55);
  if (v63 + 1 <= v38)
  {
    v50 = (v63 + 2);
    v51 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(a4 + 56);
    result = v53;
    a3 = v31;
    v52 = v57;
    return (void *)v51(result, v50, a3, v52);
  }
  if ((_DWORD)v58)
  {
    if (v58 <= 3)
      v54 = v58;
    else
      v54 = 4;
    bzero(v53, v58);
    __asm { BR              X10 }
  }
  return result;
}

void sub_23BED04E4()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_23BED04EC()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_23BED04FC()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

void sub_23BED0570()
{
  char v0;
  _BYTE *v1;

  *v1 = v0;
}

void sub_23BED0590()
{
  __int16 v0;
  _WORD *v1;

  *v1 = v0;
}

void sub_23BED0598()
{
  int v0;
  uint64_t v1;

  *(_WORD *)v1 = v0;
  *(_BYTE *)(v1 + 2) = BYTE2(v0);
}

void sub_23BED05A8()
{
  int v0;
  _DWORD *v1;

  *v1 = v0;
}

uint64_t sub_23BED05B4()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t getEnumTagSinglePayload for TallCardViewLayout.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t sub_23BED064C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_23BED0698 + 4 * byte_23BFFC23B[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_23BED06CC + 4 * byte_23BFFC236[v4]))();
}

uint64_t sub_23BED06CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BED06D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BED06DCLL);
  return result;
}

uint64_t sub_23BED06E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BED06F0);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_23BED06F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BED06FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void sub_23BED0708()
{
  JUMPOUT(0x242615198);
}

void sub_23BED0718()
{
  JUMPOUT(0x242615198);
}

void sub_23BED0728()
{
  JUMPOUT(0x242615198);
}

void CanvasItemDescriptor.title.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[16];
  __int128 v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v2 = sub_23BFF82CC();
  v13 = *(_QWORD *)(v2 - 8);
  v14 = v2;
  v3 = MEMORY[0x24BDAC7A8](v2);
  v12 = &v9[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v3);
  v11 = &v9[-v5];
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 120);
  v15 = *(_QWORD *)(a1 + 16);
  v16 = v6;
  v10 = *(_OWORD *)(a1 + 56);
  v17 = v10;
  v18 = v7;
  v19 = v8;
  type metadata accessor for CanvasItemContent();
}

uint64_t sub_23BED07E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int EnumCaseMultiPayload;

  v13 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v15 = (char *)&a9 - v14;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3618);
  v17 = MEMORY[0x24BDAC7A8](v16);
  MEMORY[0x24BDAC7A8](v17);
  *(_QWORD *)(v11 - 160) = (char *)&a9 - v18;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v9 + *(int *)(v10 + 132), a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)(void))((char *)sub_23BED08B0 + 4 * word_23BFFC5D0[EnumCaseMultiPayload]))();
}

uint64_t sub_23BED08B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t TupleTypeMetadata;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v5 - 152) = v2;
  *(_QWORD *)(v5 - 144) = v4;
  *(_QWORD *)(v5 - 136) = &type metadata for DynamicBrickDisplayStyle;
  *(_QWORD *)(v5 - 128) = &type metadata for DynamicBrickViewLayout;
  *(_QWORD *)(v5 - 120) = v4;
  TupleTypeMetadata = swift_getTupleTypeMetadata();
  v7 = v3 + *(int *)(TupleTypeMetadata + 48);
  v8 = *(_QWORD *)(v5 - 160);
  sub_23BEBEF90(v3 + *(int *)(TupleTypeMetadata + 96), v8);
  sub_23BEA5A90(v7);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v3, v2);
  sub_23BEBEF90(v8, v1);
  v10 = *(_QWORD *)(v5 - 176);
  v9 = *(_QWORD *)(v5 - 168);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v1, 1, v9) == 1)
  {
    sub_23BEA5A90(v1);
    return 0;
  }
  else
  {
    v12 = *(_QWORD *)(v5 - 192);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v12, v1, v9);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v10 + 16))(*(_QWORD *)(v5 - 184), v12, v9);
    v11 = sub_23BFF93E8();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v12, v9);
  }
  return v11;
}

uint64_t View.stackRatio(_:)()
{
  sub_23BED15E8();
  return sub_23BFF8D28();
}

unint64_t sub_23BED15E8()
{
  unint64_t result;

  result = qword_256AE4280;
  if (!qword_256AE4280)
  {
    result = MEMORY[0x242615198](&unk_23BFFC6E4, &type metadata for StackRatioKey);
    atomic_store(result, (unint64_t *)&qword_256AE4280);
  }
  return result;
}

void sub_23BED162C(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
}

uint64_t RatioStack.init(_:)@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = result & 1;
  return result;
}

uint64_t sub_23BED1648(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  unsigned __int8 *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  double v28;
  uint64_t v29;
  char v30;
  double v31;
  _QWORD *v32;
  uint64_t v33;
  double v34;
  double v35;
  uint64_t v36;
  double *v37;
  uint64_t v38;
  uint64_t v39;
  double *v40;
  double v41;
  void (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  BOOL v52;
  void (*v53)(double *, _QWORD);
  char *v54;
  void (*v55)(void);
  char *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t result;
  void (*v64)(double *, _QWORD);
  char *v65;
  double v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int64_t v73;
  double v74;
  unint64_t v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  double v81;
  uint64_t v82;
  double *v83;
  double v84;
  double v85;
  _QWORD v86[2];
  int v87;
  uint64_t v88;
  int v89;
  char *v90;
  uint64_t v91;
  int v92;
  void (*v93)(char *, uint64_t, uint64_t);
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  double v102;
  char v103;
  uint64_t v104;

  v101 = a5;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE4288);
  MEMORY[0x24BDAC7A8](v10);
  v90 = (char *)v86 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE42B0);
  MEMORY[0x24BDAC7A8](v12);
  v98 = (char *)v86 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_23BFF8530();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v100 = (char *)v86 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v95 = (char *)v86 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v94 = (char *)v86 - v20;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE42D0);
  MEMORY[0x24BDAC7A8](v21);
  v97 = (char *)v86 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_23BFF85A8();
  v99 = *(_QWORD *)(v23 - 8);
  v24 = MEMORY[0x24BDAC7A8](v23);
  v96 = (char *)v86 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v24);
  v27 = (char *)v86 - v26;
  v87 = *v5;
  v91 = a3;
  v88 = a1;
  if (v87)
    v28 = *(double *)&a3;
  else
    v28 = *(double *)&a1;
  v29 = v101;
  v92 = a4;
  v89 = a2;
  if (v87)
    v30 = a4;
  else
    v30 = a2;
  if ((v30 & 1) != 0)
    v31 = 10.0;
  else
    v31 = v28;
  v32 = sub_23BED1EF8(v101);
  v86[1] = 0;
  v33 = v32[2];
  v34 = 0.0;
  v35 = 0.0;
  if (v33)
  {
    if (v33 == 1)
    {
      v36 = 0;
LABEL_16:
      v39 = v33 - v36;
      v40 = (double *)&v32[v36 + 4];
      do
      {
        v41 = *v40++;
        v35 = v35 + v41;
        --v39;
      }
      while (v39);
      goto LABEL_18;
    }
    v36 = v33 & 0x7FFFFFFFFFFFFFFELL;
    v37 = (double *)(v32 + 5);
    v38 = v33 & 0x7FFFFFFFFFFFFFFELL;
    do
    {
      v35 = v35 + *(v37 - 1) + *v37;
      v37 += 2;
      v38 -= 2;
    }
    while (v38);
    if (v33 != v36)
      goto LABEL_16;
  }
LABEL_18:
  swift_bridgeObjectRelease();
  if (1.0 - v35 >= 0.0)
    v34 = 1.0 - v35;
  v42 = *(void (**)(char *, uint64_t, uint64_t))(v99 + 16);
  v42(v27, v29, v23);
  v104 = MEMORY[0x24BEE4AF8];
  sub_23BED3738(&qword_256AE42C8, MEMORY[0x24BDEC798]);
  v43 = (uint64_t)v97;
  sub_23BFF9424();
  v44 = (uint64_t *)(v43 + *(int *)(v21 + 36));
  sub_23BED3738(&qword_256AE42D8, MEMORY[0x24BDEC7A0]);
  v45 = *v44;
  sub_23BFF961C();
  v93 = v42;
  if (v45 == *(_QWORD *)&v102)
  {
    v46 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56);
    v47 = (uint64_t)v98;
LABEL_22:
    v46(v47, 1, 1, v14);
  }
  else
  {
    v47 = (uint64_t)v98;
    while (1)
    {
      v53 = (void (*)(double *, _QWORD))sub_23BFF9658();
      (*(void (**)(uint64_t))(v15 + 16))(v47);
      v53(&v102, 0);
      v54 = v96;
      v42(v96, v43, v23);
      sub_23BFF9628();
      (*(void (**)(char *, uint64_t))(v99 + 8))(v54, v23);
      v46 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56);
      v46(v47, 0, 1, v14);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v47, 1, v14) == 1)
        break;
      v55 = *(void (**)(void))(v15 + 32);
      v56 = v94;
      v55();
      sub_23BED15E8();
      sub_23BFF853C();
      if (v103 == 1)
      {
        ((void (*)(char *, char *, uint64_t))v55)(v95, v56, v14);
        v57 = v104;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_23BFF7A68(0, *(_QWORD *)(v57 + 16) + 1, 1);
          v57 = v104;
        }
        v59 = *(_QWORD *)(v57 + 16);
        v58 = *(_QWORD *)(v57 + 24);
        if (v59 >= v58 >> 1)
        {
          sub_23BFF7A68(v58 > 1, v59 + 1, 1);
          v57 = v104;
        }
        *(_QWORD *)(v57 + 16) = v59 + 1;
        ((void (*)(unint64_t, char *, uint64_t))v55)(v57+ ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))+ *(_QWORD *)(v15 + 72) * v59, v95, v14);
        v104 = v57;
        v42 = v93;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v15 + 8))(v56, v14);
      }
      v51 = *v44;
      v43 = (uint64_t)v97;
      sub_23BFF961C();
      v52 = v51 == *(_QWORD *)&v102;
      v47 = (uint64_t)v98;
      if (v52)
        goto LABEL_22;
    }
  }
  sub_23BE9F3A0(v43, &qword_256AE42D0);
  sub_23BE9F3A0(v47, &qword_256AE42B0);
  v48 = *(_QWORD *)(v104 + 16);
  swift_release();
  v49 = v101;
  if (v48)
    v50 = v34 / (double)v48;
  else
    v50 = 0.0;
  v60 = sub_23BFF9610();
  v61 = MEMORY[0x24BEE4AF8];
  if (!v60)
  {
LABEL_46:
    v69 = (uint64_t)v90;
    v70 = ((uint64_t (*)(char *, uint64_t, uint64_t))v93)(v90, v49, v23);
    MEMORY[0x24BDAC7A8](v70);
    v71 = v87;
    LOBYTE(v86[-6]) = v87;
    v86[-5] = v88;
    LOBYTE(v86[-4]) = v89 & 1;
    v86[-3] = v91;
    LOBYTE(v86[-2]) = v92 & 1;
    v86[-1] = v61;
    v72 = sub_23BED2B44(v69, (double (*)(_QWORD, char *))sub_23BED3778, (uint64_t)&v86[-8]);
    sub_23BE9F3A0(v69, &qword_256AE4288);
    v73 = *(_QWORD *)(v72 + 16);
    if (v73)
    {
      v102 = MEMORY[0x24BEE4AF8];
      sub_23BFF7A30(0, v73, 0);
      v74 = v102;
      v75 = *(_QWORD *)(*(_QWORD *)&v102 + 16);
      v76 = (uint64_t *)(v72 + 40);
      do
      {
        v77 = v76 - 1;
        if (!v71)
          v77 = v76;
        v78 = *v77;
        v102 = v74;
        v79 = *(_QWORD *)(*(_QWORD *)&v74 + 24);
        if (v75 >= v79 >> 1)
        {
          sub_23BFF7A30(v79 > 1, v75 + 1, 1);
          v74 = v102;
        }
        *(_QWORD *)(*(_QWORD *)&v74 + 16) = v75 + 1;
        *(_QWORD *)(*(_QWORD *)&v74 + 8 * v75 + 32) = v78;
        v76 += 2;
        ++v75;
        --v73;
      }
      while (v73);
      swift_bridgeObjectRelease();
      v80 = *(_QWORD *)(*(_QWORD *)&v74 + 16);
      if (!v80)
        goto LABEL_61;
    }
    else
    {
      swift_bridgeObjectRelease();
      v74 = MEMORY[0x24BEE4AF8];
      v80 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      if (!v80)
      {
LABEL_61:
        swift_bridgeObjectRelease();
        return v61;
      }
    }
    v81 = *(double *)(*(_QWORD *)&v74 + 32);
    v82 = v80 - 1;
    if (v82)
    {
      v83 = (double *)(*(_QWORD *)&v74 + 40);
      do
      {
        v84 = *v83++;
        v85 = v84;
        if (v81 < v84)
          v81 = v85;
        --v82;
      }
      while (v82);
    }
    goto LABEL_61;
  }
  v62 = v60;
  v104 = MEMORY[0x24BEE4AF8];
  sub_23BFF7A30(0, v60 & ~(v60 >> 63), 0);
  result = sub_23BFF9604();
  if ((v62 & 0x8000000000000000) == 0)
  {
    do
    {
      v64 = (void (*)(double *, _QWORD))sub_23BFF9658();
      v65 = v100;
      (*(void (**)(char *))(v15 + 16))(v100);
      v64(&v102, 0);
      sub_23BED15E8();
      sub_23BFF853C();
      if (v103)
        v66 = v50;
      else
        v66 = v102;
      (*(void (**)(char *, uint64_t))(v15 + 8))(v65, v14);
      v61 = v104;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_23BFF7A30(0, *(_QWORD *)(v61 + 16) + 1, 1);
        v61 = v104;
      }
      v68 = *(_QWORD *)(v61 + 16);
      v67 = *(_QWORD *)(v61 + 24);
      if (v68 >= v67 >> 1)
      {
        sub_23BFF7A30(v67 > 1, v68 + 1, 1);
        v61 = v104;
      }
      *(_QWORD *)(v61 + 16) = v68 + 1;
      *(double *)(v61 + 8 * v68 + 32) = v31 * v66;
      v49 = v101;
      sub_23BFF9628();
      --v62;
    }
    while (v62);
    goto LABEL_46;
  }
  __break(1u);
  return result;
}

_QWORD *sub_23BED1EF8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void (*v20)(uint64_t *, _QWORD);
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v30;
  char *v31;
  void (*v32)(char *, uint64_t, uint64_t);
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  _QWORD *v37;
  uint64_t v38;
  char v39;

  v2 = sub_23BFF8530();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v31 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE42B0);
  MEMORY[0x24BDAC7A8](v5);
  v35 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_23BFF85A8();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE42D0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = v8;
  v32 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v32(v10, a1, v7);
  sub_23BED3738(&qword_256AE42C8, MEMORY[0x24BDEC798]);
  v33 = v10;
  sub_23BFF9424();
  v14 = &v13[*(int *)(v11 + 36)];
  sub_23BED3738(&qword_256AE42D8, MEMORY[0x24BDEC7A0]);
  v15 = *(_QWORD *)v14;
  v36 = v13;
  sub_23BFF961C();
  if (v15 == v38)
  {
    v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
    v37 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_3:
    v16(v35, 1, 1, v2);
    v17 = (uint64_t)v36;
  }
  else
  {
    v37 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v17 = (uint64_t)v36;
    while (1)
    {
      v20 = (void (*)(uint64_t *, _QWORD))sub_23BFF9658();
      v21 = v35;
      (*(void (**)(char *))(v3 + 16))(v35);
      v20(&v38, 0);
      v22 = v33;
      v32(v33, v17, v7);
      sub_23BFF9628();
      v23 = v21;
      (*(void (**)(char *, uint64_t))(v34 + 8))(v22, v7);
      v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
      v16(v21, 0, 1, v2);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v21, 1, v2) == 1)
        break;
      v24 = v31;
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v31, v23, v2);
      sub_23BED15E8();
      sub_23BFF853C();
      v25 = v38;
      v26 = v39;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v24, v2);
      if ((v26 & 1) == 0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v37 = sub_23BED2950(0, v37[2] + 1, 1, v37);
        v28 = v37[2];
        v27 = v37[3];
        if (v28 >= v27 >> 1)
          v37 = sub_23BED2950((_QWORD *)(v27 > 1), v28 + 1, 1, v37);
        v18 = v37;
        v37[2] = v28 + 1;
        v18[v28 + 4] = v25;
      }
      v19 = *(_QWORD *)v14;
      v17 = (uint64_t)v36;
      sub_23BFF961C();
      if (v19 == v38)
        goto LABEL_3;
    }
  }
  sub_23BE9F3A0(v17, &qword_256AE42D0);
  return v37;
}

uint64_t sub_23BED22C0(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  uint64_t result;
  int v12;

  v10 = sub_23BFF8B48();
  result = sub_23BFF8B48();
  if (v10 != result)
  {
    if ((a1 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)(a8 + 16) > a1)
    {
      goto LABEL_4;
    }
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
LABEL_4:
  v12 = sub_23BFF8B48();
  result = sub_23BFF8B48();
  if (v12 != result)
    return sub_23BFF8518();
  if ((a1 & 0x8000000000000000) != 0)
    goto LABEL_10;
  if (*(_QWORD *)(a8 + 16) > a1)
    return sub_23BFF8518();
LABEL_11:
  __break(1u);
  return result;
}

double RatioStack.sizeThatFits(proposal:subviews:cache:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5)
{
  double v5;
  double v6;
  double v7;
  double v8;
  int v9;
  double v10;

  sub_23BED1648(a1, a2 & 1, a3, a4 & 1, a5);
  v6 = v5;
  v8 = v7;
  v9 = sub_23BFF8B48();
  if (v9 == sub_23BFF8B48())
    v10 = v6;
  else
    v10 = v8;
  sub_23BFF8B48();
  sub_23BFF8B48();
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t RatioStack.placeSubviews(in:proposal:subviews:cache:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, double a6, double a7, double a8, double a9)
{
  char *v9;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unsigned __int8 v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double MinY;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  double v40;
  char v41;
  char v42;

  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE4288);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v39 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *v9;
  LOBYTE(v40) = *v9;
  v42 = a2 & 1;
  v41 = a4 & 1;
  v23 = sub_23BED1648(a1, a2 & 1, a3, a4 & 1, a5);
  v25 = v24;
  v27 = v26;
  v28 = v23;
  v29 = sub_23BFF8B48();
  v30 = sub_23BFF8B48();
  v31 = a6;
  v32 = a7;
  v33 = a8;
  v34 = a9;
  if (v29 == v30)
    MinY = CGRectGetMinY(*(CGRect *)&v31);
  else
    MinY = CGRectGetMinX(*(CGRect *)&v31);
  v40 = MinY;
  v36 = sub_23BFF85A8();
  v37 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v21, a5, v36);
  MEMORY[0x24BDAC7A8](v37);
  *(&v39 - 10) = v25;
  *(&v39 - 9) = v27;
  *(&v39 - 8) = v28;
  *((_BYTE *)&v39 - 56) = v22;
  *((double *)&v39 - 6) = a6;
  *((double *)&v39 - 5) = a7;
  *((double *)&v39 - 4) = a8;
  *((double *)&v39 - 3) = a9;
  *(&v39 - 2) = (uint64_t)&v40;
  sub_23BED309C((uint64_t)v21, (void (*)(uint64_t, char *))sub_23BED27D4, (uint64_t)(&v39 - 12));
  sub_23BE9F3A0((uint64_t)v21, &qword_256AE4288);
  return swift_bridgeObjectRelease();
}

unint64_t sub_23BED2624(unint64_t result, double a2, double a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, uint64_t a8, uint64_t a9, uint64_t a10, double *a11)
{
  unint64_t v11;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  CGRect v21;
  CGRect v22;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  v11 = result;
  if (*(_QWORD *)(a9 + 16) <= result)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  v17 = a9 + 32;
  v18 = sub_23BFF8B48();
  if (v18 == sub_23BFF8B48())
  {
    v21.origin.x = a4;
    v21.origin.y = a5;
    v21.size.width = a6;
    v21.size.height = a7;
    CGRectGetMidX(v21);
  }
  v19 = sub_23BFF8B48();
  if (v19 != sub_23BFF8B48())
  {
    v22.origin.x = a4;
    v22.origin.y = a5;
    v22.size.width = a6;
    v22.size.height = a7;
    CGRectGetMidY(v22);
  }
  v20 = sub_23BFF8B48();
  if (v20 == sub_23BFF8B48())
    sub_23BFF9244();
  else
    sub_23BFF9268();
  sub_23BFF8B48();
  sub_23BFF8B48();
  sub_23BFF8B48();
  sub_23BFF8B48();
  result = sub_23BFF8524();
  *a11 = *(double *)(v17 + 8 * v11) + *a11;
  return result;
}

unint64_t sub_23BED27D4(unint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_23BED2624(a1, *(double *)(v2 + 16), *(double *)(v2 + 24), *(CGFloat *)(v2 + 48), *(CGFloat *)(v2 + 56), *(CGFloat *)(v2 + 64), *(CGFloat *)(v2 + 72), a2, *(_QWORD *)(v2 + 32), *(unsigned __int8 *)(v2 + 40), *(double **)(v2 + 80));
}

double sub_23BED2800(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5)
{
  return RatioStack.sizeThatFits(proposal:subviews:cache:)(a1, a2 & 1, a3, a4 & 1, a5);
}

uint64_t sub_23BED2818(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, double a6, double a7, double a8, double a9)
{
  return RatioStack.placeSubviews(in:proposal:subviews:cache:)(a1, a2 & 1, a3, a4 & 1, a5, a6, a7, a8, a9);
}

uint64_t sub_23BED2830(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_23BED2888(a1, a2, a3, a4, a5, a6, a7, a8, a9, MEMORY[0x24BDF44F8]);
}

uint64_t sub_23BED285C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_23BED2888(a1, a2, a3, a4, a5, a6, a7, a8, a9, MEMORY[0x24BDF4500]);
}

uint64_t sub_23BED2888(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t))
{
  return a10(a1);
}

void (*sub_23BED28C4(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = sub_23BFF83E0();
  return sub_23BED2920;
}

void sub_23BED2920(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

_QWORD *sub_23BED2950(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_256AE42E0);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_23BED2A5C(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_23BED2A5C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_23BFF985C();
  __break(1u);
  return result;
}

uint64_t sub_23BED2B44(uint64_t a1, double (*a2)(_QWORD, char *), uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (**v14)(char *, char *, uint64_t);
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t result;
  void (**v30)(char *, char *, uint64_t);
  uint64_t v31;
  char *v32;
  void (**v33)(char *, char *, uint64_t);
  char *v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t, uint64_t);
  void (**v37)(char *, char *, uint64_t);
  void (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[3];
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  double (*v65)(_QWORD, char *);
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  void (**v73)(char *, char *, uint64_t);
  char *v74;
  uint64_t v75[5];
  uint64_t v76;

  v65 = (double (*)(_QWORD, char *))a2;
  v66 = a3;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE42B0);
  MEMORY[0x24BDAC7A8](v4);
  v72 = (char *)v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_23BFF8530();
  v70 = *(_QWORD *)(v6 - 8);
  v71 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v69 = (char *)v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE42B8);
  v8 = MEMORY[0x24BDAC7A8](v67);
  v68 = (char *)v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v64 = (_QWORD *)((char *)v58 - v11);
  MEMORY[0x24BDAC7A8](v10);
  v63 = (_QWORD *)((char *)v58 - v12);
  v13 = sub_23BFF85A8();
  v14 = *(void (***)(char *, char *, uint64_t))(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE4288);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)v58 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE42C0);
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)v58 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = MEMORY[0x24BEE4AF8];
  sub_23BFF7A4C(0, 0, 0);
  sub_23BED36F0(a1, (uint64_t)v19);
  v73 = v14;
  v14[4](v16, v19, v13);
  sub_23BED3738(&qword_256AE42C8, MEMORY[0x24BDEC798]);
  sub_23BFF9424();
  v23 = *(int *)(v20 + 36);
  *(_QWORD *)&v22[v23] = 0;
  v24 = &v22[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AE42D0) + 36)];
  v25 = sub_23BED3738(&qword_256AE42D8, MEMORY[0x24BDEC7A0]);
  v26 = *(_QWORD *)v24;
  sub_23BFF961C();
  v74 = v22;
  if (v26 == v75[0])
  {
    v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v70 + 56);
LABEL_3:
    v28 = (uint64_t)v72;
    v27(v72, 1, 1, v71);
  }
  else
  {
    v61 = v16;
    v62 = v23;
    v30 = v73;
    v60 = v13;
    v59 = v24;
    v58[2] = v25;
    while (1)
    {
      v73 = (void (**)(char *, char *, uint64_t))sub_23BFF9658();
      v31 = v70;
      v28 = (uint64_t)v72;
      v32 = v16;
      v33 = v30;
      v34 = v22;
      v35 = v71;
      (*(void (**)(char *))(v70 + 16))(v72);
      ((void (*)(uint64_t *, _QWORD))v73)(v75, 0);
      v33[2](v32, v34, v13);
      sub_23BFF9628();
      ((void (*)(char *, uint64_t))v33[1])(v32, v13);
      v36 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v31 + 56);
      v36(v28, 0, 1, v35);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v28, 1, v35) == 1)
        break;
      v37 = v33;
      v38 = *(void (**)(char *, uint64_t, uint64_t))(v31 + 32);
      v39 = v67;
      v40 = v69;
      v38(v69, v28, v35);
      v41 = &v68[*(int *)(v39 + 48)];
      v42 = v62;
      v43 = *(_QWORD *)&v74[v62];
      result = ((uint64_t (*)(char *, char *, uint64_t))v38)(v41, v40, v35);
      if (__OFADD__(v43, 1))
      {
        __break(1u);
        return result;
      }
      v44 = v35;
      v22 = v74;
      *(_QWORD *)&v74[v42] = v43 + 1;
      v45 = v64;
      v46 = (char *)v64 + *(int *)(v39 + 48);
      *v64 = v43;
      v47 = (uint64_t)v45;
      v38(v46, (uint64_t)v41, v44);
      v48 = v47;
      v49 = v63;
      sub_23BED37A4(v48, (uint64_t)v63);
      v50 = v65(*v49, (char *)v49 + *(int *)(v39 + 48));
      v52 = v51;
      sub_23BE9F3A0((uint64_t)v49, &qword_256AE42B8);
      v53 = v76;
      v27 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v36;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_23BFF7A4C(0, *(_QWORD *)(v53 + 16) + 1, 1);
        v53 = v76;
      }
      v30 = v37;
      v55 = *(_QWORD *)(v53 + 16);
      v54 = *(_QWORD *)(v53 + 24);
      v13 = v60;
      if (v55 >= v54 >> 1)
      {
        sub_23BFF7A4C(v54 > 1, v55 + 1, 1);
        v53 = v76;
      }
      *(_QWORD *)(v53 + 16) = v55 + 1;
      v56 = v53 + 16 * v55;
      *(double *)(v56 + 32) = v50;
      *(_QWORD *)(v56 + 40) = v52;
      v57 = *(_QWORD *)v59;
      sub_23BFF961C();
      v16 = v61;
      if (v57 == v75[0])
        goto LABEL_3;
    }
  }
  sub_23BE9F3A0(v28, &qword_256AE42B0);
  sub_23BE9F3A0((uint64_t)v74, &qword_256AE42C0);
  return v76;
}

uint64_t sub_23BED309C(uint64_t a1, void (*a2)(uint64_t, char *), uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t *, _QWORD);
  uint64_t v29;
  uint64_t v30;
  char *v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  char *v33;
  void (*v34)(char *, char *, uint64_t);
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  void (*v53)(uint64_t, char *);
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60[4];
  uint64_t v61;

  v53 = a2;
  v54 = a3;
  v61 = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE42B0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_23BFF8530();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v57 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE42B8);
  v9 = MEMORY[0x24BDAC7A8](v56);
  v55 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v52 = (uint64_t *)((char *)&v46 - v11);
  v12 = sub_23BFF85A8();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE4288);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE42C0);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v46 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BED36F0(v61, (uint64_t)v18);
  v59 = v13;
  v22 = v18;
  v23 = v12;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v22, v12);
  sub_23BED3738(&qword_256AE42C8, MEMORY[0x24BDEC798]);
  v58 = v15;
  sub_23BFF9424();
  v24 = *(int *)(v19 + 36);
  *(_QWORD *)&v21[v24] = 0;
  v25 = &v21[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AE42D0) + 36)];
  v26 = sub_23BED3738(&qword_256AE42D8, MEMORY[0x24BDEC7A0]);
  v27 = *(_QWORD *)v25;
  v61 = v26;
  sub_23BFF961C();
  if (v27 == v60[0])
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
  }
  else
  {
    v50 = v24;
    v51 = v7;
    v48 = v23;
    v49 = v5;
    while (1)
    {
      v28 = (void (*)(uint64_t *, _QWORD))sub_23BFF9658();
      v29 = v51;
      (*(void (**)(char *))(v51 + 16))(v5);
      v28(v60, 0);
      v31 = v58;
      v30 = v59;
      (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v58, v21, v23);
      sub_23BFF9628();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v23);
      v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v29 + 56);
      v32(v5, 0, 1, v6);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v5, 1, v6) == 1)
        break;
      v47 = v32;
      v33 = v25;
      v34 = *(void (**)(char *, char *, uint64_t))(v29 + 32);
      v35 = v57;
      v34(v57, v5, v6);
      v36 = v6;
      v37 = v56;
      v38 = &v55[*(int *)(v56 + 48)];
      v39 = v50;
      v40 = *(_QWORD *)&v21[v50];
      result = ((uint64_t (*)(char *, char *, uint64_t))v34)(v38, v35, v36);
      if (__OFADD__(v40, 1))
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)&v21[v39] = v40 + 1;
      v42 = *(int *)(v37 + 48);
      v43 = (uint64_t)v52;
      v44 = (char *)v52 + v42;
      *v52 = v40;
      v34((char *)(v43 + v42), v38, v36);
      v53(v40, v44);
      sub_23BE9F3A0(v43, &qword_256AE42B8);
      v25 = v33;
      v45 = *(_QWORD *)v33;
      v23 = v48;
      sub_23BFF961C();
      v5 = v49;
      v6 = v36;
      if (v45 == v60[0])
      {
        v47(v49, 1, 1, v36);
        break;
      }
    }
  }
  sub_23BE9F3A0((uint64_t)v5, &qword_256AE42B0);
  return sub_23BE9F3A0((uint64_t)v21, &qword_256AE42C0);
}

unint64_t sub_23BED34DC()
{
  unint64_t result;

  result = qword_256AE4290;
  if (!qword_256AE4290)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for RatioStack, &type metadata for RatioStack);
    atomic_store(result, (unint64_t *)&qword_256AE4290);
  }
  return result;
}

unint64_t sub_23BED3524()
{
  unint64_t result;

  result = qword_256AE4298;
  if (!qword_256AE4298)
  {
    result = MEMORY[0x242615198](MEMORY[0x24BDEEF18], MEMORY[0x24BDEEF38]);
    atomic_store(result, (unint64_t *)&qword_256AE4298);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for RatioStack(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23BED35B4 + 4 * byte_23BFFC5F9[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23BED35E8 + 4 * byte_23BFFC5F4[v4]))();
}

uint64_t sub_23BED35E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BED35F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BED35F8);
  return result;
}

uint64_t sub_23BED3604(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BED360CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23BED3610(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BED3618(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RatioStack()
{
  return &type metadata for RatioStack;
}

uint64_t sub_23BED3634(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE42A0);
  v2 = sub_23BFF862C();
  v4[0] = v1;
  v4[1] = sub_23BED3694();
  return MEMORY[0x242615198](MEMORY[0x24BDED308], v2, v4);
}

unint64_t sub_23BED3694()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256AE42A8;
  if (!qword_256AE42A8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE42A0);
    result = MEMORY[0x242615198](MEMORY[0x24BDEFB48], v1);
    atomic_store(result, (unint64_t *)&qword_256AE42A8);
  }
  return result;
}

ValueMetadata *type metadata accessor for StackRatioKey()
{
  return &type metadata for StackRatioKey;
}

uint64_t sub_23BED36F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE4288);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BED3738(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_23BFF85A8();
    result = MEMORY[0x242615198](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23BED3778(unint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_23BED22C0(a1, a2, *(unsigned __int8 *)(v2 + 16), *(_QWORD *)(v2 + 24), *(unsigned __int8 *)(v2 + 32), *(_QWORD *)(v2 + 40), *(unsigned __int8 *)(v2 + 48), *(_QWORD *)(v2 + 56));
}

uint64_t sub_23BED37A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE42B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BED37F0()
{
  sub_23BED3C28();
  return sub_23BFF9A30();
}

uint64_t sub_23BED3818()
{
  sub_23BED3C28();
  return sub_23BFF9A3C();
}

uint64_t sub_23BED3840()
{
  _BYTE *v0;

  if (*v0)
    return 0x656C63726963;
  else
    return 0xD000000000000010;
}

uint64_t sub_23BED387C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BED3EE8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BED38A0()
{
  sub_23BED3BE4();
  return sub_23BFF9A30();
}

uint64_t sub_23BED38C8()
{
  sub_23BED3BE4();
  return sub_23BFF9A3C();
}

uint64_t sub_23BED38F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_23BFF9964();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_23BED396C()
{
  sub_23BED3C6C();
  return sub_23BFF9A30();
}

uint64_t sub_23BED3994()
{
  sub_23BED3C6C();
  return sub_23BFF9A3C();
}

uint64_t ArtworkClipShape.encode(to:)(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  char v21;

  v17 = a2;
  v19 = a3;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE42E8);
  v14 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE42F0);
  v15 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE42F8);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BED3BE4();
  sub_23BFF9A18();
  if ((v19 & 1) != 0)
  {
    v21 = 1;
    sub_23BED3C28();
    sub_23BFF98EC();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v5, v16);
  }
  else
  {
    v20 = 0;
    sub_23BED3C6C();
    sub_23BFF98EC();
    v18 = v17;
    sub_23BEBFC1C();
    sub_23BFF9940();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v8, v6);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

unint64_t sub_23BED3BE4()
{
  unint64_t result;

  result = qword_256AE4300;
  if (!qword_256AE4300)
  {
    result = MEMORY[0x242615198](&unk_23BFFCAA4, &type metadata for ArtworkClipShape.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE4300);
  }
  return result;
}

unint64_t sub_23BED3C28()
{
  unint64_t result;

  result = qword_256AE4308;
  if (!qword_256AE4308)
  {
    result = MEMORY[0x242615198](&unk_23BFFCA54, &type metadata for ArtworkClipShape.CircleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE4308);
  }
  return result;
}

unint64_t sub_23BED3C6C()
{
  unint64_t result;

  result = qword_256AE4310;
  if (!qword_256AE4310)
  {
    result = MEMORY[0x242615198](&unk_23BFFCA04, &type metadata for ArtworkClipShape.RoundedRectangleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE4310);
  }
  return result;
}

_QWORD *ArtworkClipShape.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *result;
  uint64_t v3;

  result = sub_23BED3FCC(a1);
  if (v1)
    return (_QWORD *)v3;
  return result;
}

_QWORD *sub_23BED3CD0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  char v5;

  result = sub_23BED3FCC(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_BYTE *)(a2 + 8) = v5 & 1;
  }
  return result;
}

uint64_t sub_23BED3D00(_QWORD *a1)
{
  uint64_t v1;

  return ArtworkClipShape.encode(to:)(a1, *(_QWORD *)v1, *(unsigned __int8 *)(v1 + 8));
}

uint64_t ArtworkClipShape.hash(into:)(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return sub_23BFF99DC();
  sub_23BFF99DC();
  return sub_23BFF99F4();
}

uint64_t static ArtworkClipShape.== infix(_:_:)(uint64_t a1, unsigned __int8 a2, uint64_t a3, unsigned __int8 a4)
{
  char v4;

  if (((a2 | a4) & 1) != 0)
    v4 = a2 & a4;
  else
    v4 = *(double *)&a1 == *(double *)&a3;
  return v4 & 1;
}

uint64_t ArtworkClipShape.hashValue.getter(uint64_t a1, char a2)
{
  sub_23BFF99D0();
  sub_23BFF99DC();
  if ((a2 & 1) == 0)
    sub_23BFF99F4();
  return sub_23BFF9A00();
}

uint64_t sub_23BED3DF8()
{
  uint64_t v0;

  return ArtworkClipShape.hashValue.getter(*(_QWORD *)v0, *(_BYTE *)(v0 + 8));
}

uint64_t sub_23BED3E04()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 8) & 1) != 0)
    return sub_23BFF99DC();
  sub_23BFF99DC();
  return sub_23BFF99F4();
}

uint64_t sub_23BED3E50()
{
  uint64_t v0;
  char v1;

  v1 = *(_BYTE *)(v0 + 8);
  sub_23BFF99D0();
  sub_23BFF99DC();
  if ((v1 & 1) == 0)
    sub_23BFF99F4();
  return sub_23BFF9A00();
}

uint64_t sub_23BED3EB8(uint64_t a1, uint64_t a2)
{
  int v3;
  unsigned int v4;
  uint64_t result;

  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = *(unsigned __int8 *)(a2 + 8);
  result = v3 & v4;
  if ((v3 & 1) == 0 && (v4 & 1) == 0)
    return *(double *)a1 == *(double *)a2;
  return result;
}

uint64_t sub_23BED3EE8(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000010 && a2 == 0x800000023C01EE00 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C63726963 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v5 = sub_23BFF9964();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

_QWORD *sub_23BED3FCC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  char v29;
  char v30;

  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE4360);
  v23 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v24 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE4368);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(qword_256AE4370);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v26 = a1;
  v12 = __swift_project_boxed_opaque_existential_1(a1, v11);
  sub_23BED3BE4();
  v13 = v27;
  sub_23BFF9A0C();
  if (!v13)
  {
    v22 = v4;
    v14 = v25;
    v27 = v8;
    v15 = sub_23BFF98D4();
    if (*(_QWORD *)(v15 + 16) == 1)
    {
      if ((*(_BYTE *)(v15 + 32) & 1) != 0)
      {
        v30 = 1;
        sub_23BED3C28();
        v16 = v24;
        sub_23BFF9868();
        (*(void (**)(char *, uint64_t))(v23 + 8))(v16, v14);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v27 + 8))(v10, v7);
        v12 = 0;
      }
      else
      {
        v29 = 0;
        sub_23BED3C6C();
        sub_23BFF9868();
        sub_23BEC0384();
        sub_23BFF98C8();
        (*(void (**)(char *, uint64_t))(v22 + 8))(v6, v3);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v27 + 8))(v10, v7);
        v12 = v28;
      }
    }
    else
    {
      v17 = sub_23BFF9784();
      swift_allocError();
      v19 = v18;
      __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3978);
      *v19 = &type metadata for ArtworkClipShape;
      v12 = v10;
      sub_23BFF9874();
      sub_23BFF9778();
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v19, *MEMORY[0x24BEE26D0], v17);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v27 + 8))(v10, v7);
    }
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  return v12;
}

unint64_t sub_23BED4340()
{
  unint64_t result;

  result = qword_256AE4318;
  if (!qword_256AE4318)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for ArtworkClipShape, &type metadata for ArtworkClipShape);
    atomic_store(result, (unint64_t *)&qword_256AE4318);
  }
  return result;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for ArtworkClipShape(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ArtworkClipShape(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t sub_23BED43E8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_23BED4404(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for ArtworkClipShape()
{
  return &type metadata for ArtworkClipShape;
}

uint64_t storeEnumTagSinglePayload for ArtworkClipShape.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23BED4480 + 4 * byte_23BFFC725[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23BED44B4 + 4 * byte_23BFFC720[v4]))();
}

uint64_t sub_23BED44B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BED44BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BED44C4);
  return result;
}

uint64_t sub_23BED44D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BED44D8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23BED44DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BED44E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ArtworkClipShape.CodingKeys()
{
  return &type metadata for ArtworkClipShape.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for ArtworkClipShape.RoundedRectangleCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23BED4540 + 4 * byte_23BFFC72A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23BED4560 + 4 * byte_23BFFC72F[v4]))();
}

_BYTE *sub_23BED4540(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23BED4560(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BED4568(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BED4570(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BED4578(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BED4580(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ArtworkClipShape.RoundedRectangleCodingKeys()
{
  return &type metadata for ArtworkClipShape.RoundedRectangleCodingKeys;
}

ValueMetadata *type metadata accessor for ArtworkClipShape.CircleCodingKeys()
{
  return &type metadata for ArtworkClipShape.CircleCodingKeys;
}

unint64_t sub_23BED45B0()
{
  unint64_t result;

  result = qword_256AE4320;
  if (!qword_256AE4320)
  {
    result = MEMORY[0x242615198](&unk_23BFFC924, &type metadata for ArtworkClipShape.RoundedRectangleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE4320);
  }
  return result;
}

unint64_t sub_23BED45F8()
{
  unint64_t result;

  result = qword_256AE4328;
  if (!qword_256AE4328)
  {
    result = MEMORY[0x242615198](&unk_23BFFC9DC, &type metadata for ArtworkClipShape.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE4328);
  }
  return result;
}

unint64_t sub_23BED4640()
{
  unint64_t result;

  result = qword_256AE4330;
  if (!qword_256AE4330)
  {
    result = MEMORY[0x242615198](&unk_23BFFC894, &type metadata for ArtworkClipShape.RoundedRectangleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE4330);
  }
  return result;
}

unint64_t sub_23BED4688()
{
  unint64_t result;

  result = qword_256AE4338;
  if (!qword_256AE4338)
  {
    result = MEMORY[0x242615198](&unk_23BFFC8BC, &type metadata for ArtworkClipShape.RoundedRectangleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE4338);
  }
  return result;
}

unint64_t sub_23BED46D0()
{
  unint64_t result;

  result = qword_256AE4340;
  if (!qword_256AE4340)
  {
    result = MEMORY[0x242615198](&unk_23BFFC844, &type metadata for ArtworkClipShape.CircleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE4340);
  }
  return result;
}

unint64_t sub_23BED4718()
{
  unint64_t result;

  result = qword_256AE4348;
  if (!qword_256AE4348)
  {
    result = MEMORY[0x242615198](&unk_23BFFC86C, &type metadata for ArtworkClipShape.CircleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE4348);
  }
  return result;
}

unint64_t sub_23BED4760()
{
  unint64_t result;

  result = qword_256AE4350;
  if (!qword_256AE4350)
  {
    result = MEMORY[0x242615198](&unk_23BFFC94C, &type metadata for ArtworkClipShape.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE4350);
  }
  return result;
}

unint64_t sub_23BED47A8()
{
  unint64_t result;

  result = qword_256AE4358;
  if (!qword_256AE4358)
  {
    result = MEMORY[0x242615198](&unk_23BFFC974, &type metadata for ArtworkClipShape.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE4358);
  }
  return result;
}

uint64_t dispatch thunk of static CanvasSectionDensityProtocol.default.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t sub_23BED47F4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6C61636974726576 && a2 == 0xE800000000000000;
  if (v2 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746E6F7A69726F68 && a2 == 0xEA00000000006C61)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23BFF9964();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23BED48F0(char a1)
{
  if ((a1 & 1) != 0)
    return 0x746E6F7A69726F68;
  else
    return 0x6C61636974726576;
}

uint64_t sub_23BED492C()
{
  return sub_23BEBF3D0();
}

uint64_t sub_23BED493C()
{
  sub_23BFF99D0();
  sub_23BEBF14C();
  return sub_23BFF9A00();
}

uint64_t sub_23BED4980()
{
  char *v0;

  return sub_23BED48F0(*v0);
}

uint64_t sub_23BED4990@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BED47F4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BED49BC(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23BFFCF50, a1);
  return sub_23BFF9A30();
}

uint64_t sub_23BED49F0(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23BFFCF50, a1);
  return sub_23BFF9A3C();
}

uint64_t sub_23BED4A24(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23BFFCFF0, a1);
  return sub_23BFF9A30();
}

uint64_t sub_23BED4A58(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23BFFCFF0, a1);
  return sub_23BFF9A3C();
}

uint64_t sub_23BED4A8C(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23BFFCFA0, a1);
  return sub_23BFF9A30();
}

uint64_t sub_23BED4AC0(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23BFFCFA0, a1);
  return sub_23BFF9A3C();
}

uint64_t CanvasGridAxis.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v34[3];
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char v53;

  v7 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v8 = type metadata accessor for CanvasGridAxis.HorizontalCodingKeys(255, v7, v6, a4);
  v41 = MEMORY[0x242615198](&unk_23BFFCFF0, v8);
  v42 = v8;
  v48 = sub_23BFF994C();
  v46 = *(_QWORD *)(v48 - 8);
  MEMORY[0x24BDAC7A8](v48);
  v45 = (char *)v34 - v9;
  v47 = type metadata accessor for CanvasHorizontalGridLayout(0, v7, v6, v10);
  v44 = *(_QWORD *)(v47 - 8);
  MEMORY[0x24BDAC7A8](v47);
  v43 = (char *)v34 - v11;
  v13 = type metadata accessor for CanvasGridAxis.VerticalCodingKeys(255, v7, v6, v12);
  v34[1] = MEMORY[0x242615198](&unk_23BFFCFA0, v13);
  v34[2] = v13;
  v40 = sub_23BFF994C();
  v38 = *(_QWORD *)(v40 - 8);
  MEMORY[0x24BDAC7A8](v40);
  v37 = (char *)v34 - v14;
  v39 = type metadata accessor for CanvasVerticalGridLayout(0, v7, v6, v15);
  v36 = *(_QWORD *)(v39 - 8);
  v16 = MEMORY[0x24BDAC7A8](v39);
  v35 = (char *)v34 - v17;
  v18 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for CanvasGridAxis.CodingKeys(255, v7, v6, v21);
  MEMORY[0x242615198](&unk_23BFFCF50, v22);
  v23 = sub_23BFF994C();
  v49 = *(_QWORD *)(v23 - 8);
  v50 = v23;
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)v34 - v24;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BFF9A18();
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, v51, a2);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v27 = v43;
    v26 = v44;
    v28 = v47;
    (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v43, v20, v47);
    v53 = 1;
    v29 = v45;
    v30 = v50;
    sub_23BFF98EC();
    MEMORY[0x242615198](&protocol conformance descriptor for CanvasHorizontalGridLayout<A>, v28);
    v31 = v48;
    sub_23BFF9940();
    v32 = v46;
  }
  else
  {
    v27 = v35;
    v26 = v36;
    v28 = v39;
    (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v35, v20, v39);
    v52 = 0;
    v29 = v37;
    v30 = v50;
    sub_23BFF98EC();
    MEMORY[0x242615198](&protocol conformance descriptor for CanvasVerticalGridLayout<A>, v28);
    v31 = v40;
    sub_23BFF9940();
    v32 = v38;
  }
  (*(void (**)(char *, uint64_t))(v32 + 8))(v29, v31);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v27, v28);
  return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v25, v30);
}

uint64_t type metadata accessor for CanvasGridAxis.HorizontalCodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CanvasGridAxis.HorizontalCodingKeys);
}

uint64_t type metadata accessor for CanvasGridAxis.VerticalCodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CanvasGridAxis.VerticalCodingKeys);
}

uint64_t type metadata accessor for CanvasGridAxis.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CanvasGridAxis.CodingKeys);
}

uint64_t CanvasGridAxis.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  char *v44;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  void (*v60)(char *, char *, uint64_t);
  char *v61;
  __int128 v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  char *v89;

  v79 = a5;
  v78 = type metadata accessor for CanvasGridAxis.HorizontalCodingKeys(255, a2, a3, a4);
  v76 = MEMORY[0x242615198](&unk_23BFFCFF0, v78);
  v70 = sub_23BFF98E0();
  v72 = *(_QWORD *)(v70 - 8);
  MEMORY[0x24BDAC7A8](v70);
  v80 = (char *)&v62 - v8;
  v10 = type metadata accessor for CanvasGridAxis.VerticalCodingKeys(255, a2, a3, v9);
  v74 = MEMORY[0x242615198](&unk_23BFFCFA0, v10);
  v75 = v10;
  v69 = sub_23BFF98E0();
  v71 = *(_QWORD *)(v69 - 8);
  MEMORY[0x24BDAC7A8](v69);
  v77 = (char *)&v62 - v11;
  v13 = type metadata accessor for CanvasGridAxis.CodingKeys(255, a2, a3, v12);
  MEMORY[0x242615198](&unk_23BFFCF50, v13);
  v83 = sub_23BFF98E0();
  v81 = *(_QWORD *)(v83 - 8);
  MEMORY[0x24BDAC7A8](v83);
  v15 = (char *)&v62 - v14;
  v84 = a2;
  v73 = a3;
  v82 = type metadata accessor for CanvasGridAxis(0, a2, a3, v16);
  v68 = *(_QWORD *)(v82 - 8);
  v17 = MEMORY[0x24BDAC7A8](v82);
  v19 = (char *)&v62 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24BDAC7A8](v17);
  v22 = (char *)&v62 - v21;
  MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v62 - v23;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v25 = v89;
  sub_23BFF9A0C();
  v26 = (uint64_t)a1;
  if (!v25)
  {
    v64 = v22;
    v65 = v19;
    v63 = v24;
    v27 = v84;
    v28 = v82;
    v66 = 0;
    v67 = v26;
    v29 = v83;
    v89 = v15;
    *(_QWORD *)&v85 = sub_23BFF98D4();
    v30 = sub_23BFF94C0();
    MEMORY[0x242615198](MEMORY[0x24BEE12C8], v30);
    *(_QWORD *)&v87 = sub_23BFF96DC();
    *((_QWORD *)&v87 + 1) = v31;
    *(_QWORD *)&v88 = v32;
    *((_QWORD *)&v88 + 1) = v33;
    v34 = sub_23BFF96D0();
    MEMORY[0x242615198](MEMORY[0x24BEE2190], v34);
    sub_23BFF9634();
    v35 = v85;
    if (v85 == 2 || (v62 = v87, v85 = v87, v86 = v88, (sub_23BFF964C() & 1) == 0))
    {
      v40 = sub_23BFF9784();
      swift_allocError();
      v41 = v29;
      v43 = v42;
      __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3978);
      *v43 = v28;
      v44 = v89;
      sub_23BFF9874();
      sub_23BFF9778();
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v40 - 8) + 104))(v43, *MEMORY[0x24BEE26D0], v40);
      swift_willThrow();
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v81 + 8))(v44, v41);
      goto LABEL_9;
    }
    if ((v35 & 1) != 0)
    {
      LOBYTE(v85) = 1;
      v46 = v89;
      v47 = v66;
      sub_23BFF9868();
      v49 = v29;
      v50 = v79;
      if (v47)
      {
        swift_unknownObjectRelease();
        (*(void (**)(char *, uint64_t))(v81 + 8))(v46, v49);
        goto LABEL_9;
      }
      v55 = type metadata accessor for CanvasHorizontalGridLayout(0, v27, v73, v48);
      MEMORY[0x242615198](&protocol conformance descriptor for CanvasHorizontalGridLayout<A>, v55);
      v56 = v65;
      v57 = v70;
      v58 = v80;
      sub_23BFF98C8();
      (*(void (**)(char *, uint64_t))(v72 + 8))(v58, v57);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v81 + 8))(v46, v49);
      v59 = v28;
      swift_storeEnumTagMultiPayload();
      v60 = *(void (**)(char *, char *, uint64_t))(v68 + 32);
      v61 = v63;
      v60(v63, v56, v28);
    }
    else
    {
      LOBYTE(v85) = 0;
      v36 = v77;
      v37 = v89;
      v38 = v66;
      sub_23BFF9868();
      if (v38)
      {
        swift_unknownObjectRelease();
        (*(void (**)(char *, uint64_t))(v81 + 8))(v37, v29);
LABEL_9:
        v26 = v67;
        return __swift_destroy_boxed_opaque_existential_1(v26);
      }
      v51 = type metadata accessor for CanvasVerticalGridLayout(0, v27, v73, v39);
      MEMORY[0x242615198](&protocol conformance descriptor for CanvasVerticalGridLayout<A>, v51);
      v52 = v64;
      v53 = v69;
      sub_23BFF98C8();
      v54 = v81;
      (*(void (**)(char *, uint64_t))(v71 + 8))(v36, v53);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v54 + 8))(v37, v29);
      v59 = v28;
      swift_storeEnumTagMultiPayload();
      v60 = *(void (**)(char *, char *, uint64_t))(v68 + 32);
      v61 = v63;
      v60(v63, v52, v28);
      v50 = v79;
    }
    v60(v50, v61, v59);
    goto LABEL_9;
  }
  return __swift_destroy_boxed_opaque_existential_1(v26);
}

uint64_t type metadata accessor for CanvasGridAxis(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CanvasGridAxis);
}

uint64_t sub_23BED55C4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, char *a4@<X8>)
{
  return CanvasGridAxis.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3, a4);
}

uint64_t sub_23BED55E0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return CanvasGridAxis.encode(to:)(a1, a2, a3, a4);
}

uint64_t CanvasGridAxis.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v24;

  v5 = v4;
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = type metadata accessor for CanvasHorizontalGridLayout(0, v8, v9, a4);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v24 - v12;
  v15 = type metadata accessor for CanvasVerticalGridLayout(0, v8, v9, v14);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v24 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v24 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v21, v5, a2);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v21, v10);
    sub_23BFF99DC();
    CanvasHorizontalGridLayout.hash(into:)(a1, v10);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v19, v21, v15);
    sub_23BFF99DC();
    CanvasVerticalGridLayout.hash(into:)(a1, v15);
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  }
}

uint64_t static CanvasGridAxis.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t TupleTypeMetadata2;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  void (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v43 = a1;
  v44 = a2;
  v6 = type metadata accessor for CanvasHorizontalGridLayout(0, a3, a4, a4);
  v41 = *(_QWORD *)(v6 - 8);
  v42 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v37 = (char *)&v35 - v7;
  v9 = type metadata accessor for CanvasVerticalGridLayout(0, a3, a4, v8);
  v39 = *(_QWORD *)(v9 - 8);
  v40 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v36 = (char *)&v35 - v10;
  v12 = type metadata accessor for CanvasGridAxis(0, a3, a4, v11);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v35 - v17;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v38 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v20 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v22 = (char *)&v35 - v21;
  v23 = (char *)&v35 + *(int *)(v20 + 48) - v21;
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v24((char *)&v35 - v21, v43, v12);
  v24(v23, v44, v12);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v24(v16, (uint64_t)v22, v12);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v26 = v41;
      v25 = v42;
      v27 = (uint64_t)v37;
      (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v37, v23, v42);
      v28 = static CanvasHorizontalGridLayout.== infix(_:_:)((uint64_t)v16, v27, a3);
      v29 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
      v29(v27, v25);
      v29((uint64_t)v16, v25);
      goto LABEL_10;
    }
    (*(void (**)(char *, uint64_t))(v41 + 8))(v16, v42);
LABEL_7:
    v28 = 0;
    v13 = v38;
    v12 = TupleTypeMetadata2;
    goto LABEL_10;
  }
  v24(v18, (uint64_t)v22, v12);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, uint64_t))(v39 + 8))(v18, v40);
    goto LABEL_7;
  }
  v31 = v39;
  v30 = v40;
  v32 = (uint64_t)v36;
  (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v36, v23, v40);
  v28 = static CanvasVerticalGridLayout.== infix(_:_:)((uint64_t)v18, v32, a3);
  v33 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
  v33(v32, v30);
  v33((uint64_t)v18, v30);
LABEL_10:
  (*(void (**)(char *, uint64_t))(v13 + 8))(v22, v12);
  return v28 & 1;
}

uint64_t CanvasGridAxis.hashValue.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[72];

  sub_23BFF99D0();
  CanvasGridAxis.hash(into:)((uint64_t)v5, a1, v2, v3);
  return sub_23BFF9A00();
}

uint64_t sub_23BED5AA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[72];

  sub_23BFF99D0();
  CanvasGridAxis.hash(into:)((uint64_t)v6, a2, v3, v4);
  return sub_23BFF9A00();
}

uint64_t sub_23BED5AE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static CanvasGridAxis.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

void sub_23BED5AF4()
{
  JUMPOUT(0x242615198);
}

uint64_t sub_23BED5B04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  result = type metadata accessor for CanvasVerticalGridLayout(319, v4, v5, a4);
  if (v8 <= 0x3F)
  {
    result = type metadata accessor for CanvasHorizontalGridLayout(319, v4, v5, v7);
    if (v9 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_23BED5BA0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  char v20;
  char v21;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_QWORD *)(v4 + 64);
  if (v5 <= 0x10)
    v6 = 16;
  else
    v6 = *(_QWORD *)(v4 + 64);
  v7 = *(_DWORD *)(v4 + 80);
  v8 = ((v7 + 8) & ~(unint64_t)v7) + v5;
  if (v8 <= 0x18)
    v9 = 24;
  else
    v9 = v8;
  if (v9 + 1 <= (unint64_t)(v6 + 1))
    v10 = v6 + 1;
  else
    v10 = v9 + 1;
  if (v7 > 7u || (v7 & 0x100000) != 0 || (unint64_t)(v10 + 1) > 0x18)
  {
    v13 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v13 + ((v7 & 0xF8 ^ 0x1F8u) & (v7 + 16)));
    swift_retain();
  }
  else
  {
    v14 = *((unsigned __int8 *)a2 + v10);
    if (v14 >= 2)
    {
      if (v10 <= 3)
        v15 = v10;
      else
        v15 = 4;
      __asm { BR              X14 }
    }
    if (v14 == 1)
    {
      v16 = *((unsigned __int8 *)a2 + v9);
      if (v16 >= 2)
      {
        if (v9 <= 3)
          v17 = v9;
        else
          v17 = 4;
        __asm { BR              X14 }
      }
      if (v16 == 1)
      {
        *a1 = *a2;
        (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + v7 + 8) & ~(unint64_t)v7, ((unint64_t)a2 + v7 + 8) & ~(unint64_t)v7);
        v20 = 1;
      }
      else
      {
        v20 = 0;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        a1[2] = a2[2];
      }
      *((_BYTE *)v3 + v9) = v20;
      *((_BYTE *)v3 + v10) = 1;
    }
    else
    {
      v18 = *((unsigned __int8 *)a2 + v6);
      if (v18 >= 2)
      {
        if (v6 <= 3)
          v19 = v6;
        else
          v19 = 4;
        __asm { BR              X13 }
      }
      if (v18 == 1)
      {
        (*(void (**)(uint64_t *))(v4 + 16))(a1);
        v21 = 1;
      }
      else
      {
        v21 = 0;
        *(_OWORD *)a1 = *(_OWORD *)a2;
      }
      *((_BYTE *)v3 + v6) = v21;
      *((_BYTE *)v3 + v10) = 0;
    }
  }
  return v3;
}

uint64_t sub_23BED5E88(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_QWORD *)(v2 + 64);
  if (v3 <= 0x10)
    v4 = 16;
  else
    v4 = *(_QWORD *)(v2 + 64);
  v5 = *(unsigned __int8 *)(v2 + 80);
  v6 = ((v5 + 8) & ~v5) + v3;
  if (v6 <= 0x18)
    v6 = 24;
  if (v6 + 1 <= v4 + 1)
    v7 = v4 + 1;
  else
    v7 = v6 + 1;
  v8 = *(unsigned __int8 *)(result + v7);
  if (v8 < 2)
  {
    if (v8 == 1)
    {
      v10 = *(unsigned __int8 *)(result + v6);
      if (v10 < 2)
      {
        if (v10 == 1)
          return (*(uint64_t (**)(uint64_t))(v2 + 8))((result + v5 + 8) & ~v5);
      }
      else
      {
        if (v6 <= 3)
          v11 = v6;
        else
          v11 = 4;
        return ((uint64_t (*)(void))((char *)&loc_23BED5F74 + 4 * byte_23BFFCB39[v11]))();
      }
    }
    else
    {
      v12 = *(unsigned __int8 *)(result + v4);
      if (v12 < 2)
      {
        if (v12 == 1)
          return (*(uint64_t (**)(void))(v2 + 8))();
      }
      else
      {
        if (v4 <= 3)
          v13 = v4;
        else
          v13 = 4;
        return ((uint64_t (*)(void))((char *)&loc_23BED5FAC + 4 * byte_23BFFCB34[v13]))();
      }
    }
  }
  else
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    return ((uint64_t (*)(void))((char *)&loc_23BED5EFC + 4 * byte_23BFFCB2F[v9]))();
  }
  return result;
}

_QWORD *sub_23BED6058(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  char v17;
  char v18;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_QWORD *)(v4 + 64);
  if (v5 <= 0x10)
    v6 = 16;
  else
    v6 = *(_QWORD *)(v4 + 64);
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = ((v7 + 8) & ~v7) + v5;
  if (v8 <= 0x18)
    v9 = 24;
  else
    v9 = v8;
  if (v9 + 1 <= (unint64_t)(v6 + 1))
    v10 = v6 + 1;
  else
    v10 = v9 + 1;
  v11 = *((unsigned __int8 *)a2 + v10);
  if (v11 >= 2)
  {
    if (v10 <= 3)
      v12 = v10;
    else
      v12 = 4;
    __asm { BR              X14 }
  }
  if (v11 == 1)
  {
    v13 = *((unsigned __int8 *)a2 + v9);
    if (v13 >= 2)
    {
      if (v9 <= 3)
        v14 = v9;
      else
        v14 = 4;
      __asm { BR              X14 }
    }
    if (v13 == 1)
    {
      *a1 = *a2;
      (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + v7 + 8) & ~v7, ((unint64_t)a2 + v7 + 8) & ~v7);
      v17 = 1;
      v6 = v9;
      v18 = 1;
    }
    else
    {
      v17 = 0;
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = a2[2];
      v18 = 1;
      v6 = v9;
    }
  }
  else
  {
    v15 = *((unsigned __int8 *)a2 + v6);
    if (v15 >= 2)
    {
      if (v6 <= 3)
        v16 = v6;
      else
        v16 = 4;
      __asm { BR              X13 }
    }
    if (v15 == 1)
    {
      (*(void (**)(_QWORD *))(v4 + 16))(a1);
      v18 = 0;
      v17 = 1;
    }
    else
    {
      v17 = 0;
      v18 = 0;
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
  }
  *((_BYTE *)a1 + v6) = v17;
  *((_BYTE *)a1 + v10) = v18;
  return a1;
}

_QWORD *sub_23BED62B8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  char v27;
  __int128 v28;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    if (v7 <= 0x10)
      v8 = 16;
    else
      v8 = *(_QWORD *)(v6 + 64);
    v9 = *(unsigned __int8 *)(v6 + 80);
    v10 = ((v9 + 8) & ~v9) + v7;
    if (v10 <= 0x18)
      v11 = 24;
    else
      v11 = v10;
    if (v11 + 1 <= (unint64_t)(v8 + 1))
      v12 = v8 + 1;
    else
      v12 = v11 + 1;
    v13 = *((unsigned __int8 *)a1 + v12);
    if (v13 >= 2)
    {
      if (v12 <= 3)
        v14 = v12;
      else
        v14 = 4;
      __asm { BR              X12 }
    }
    v15 = ~v9;
    if (v13 == 1)
    {
      v16 = *((unsigned __int8 *)a1 + v11);
      if (v16 >= 2)
      {
        if (v11 <= 3)
          v17 = v11;
        else
          v17 = 4;
        __asm { BR              X12 }
      }
      if (v16 == 1)
        (*(void (**)(unint64_t, _QWORD))(v6 + 8))(((unint64_t)a1 + v9 + 8) & v15, *(_QWORD *)(a3 + 16));
    }
    else
    {
      v18 = *((unsigned __int8 *)a1 + v8);
      if (v18 >= 2)
      {
        if (v8 <= 3)
          v19 = v8;
        else
          v19 = 4;
        __asm { BR              X12 }
      }
      if (v18 == 1)
        (*(void (**)(_QWORD *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    }
    v20 = *((unsigned __int8 *)a2 + v12);
    if (v20 >= 2)
    {
      if (v12 <= 3)
        v21 = v12;
      else
        v21 = 4;
      __asm { BR              X12 }
    }
    if (v20 == 1)
    {
      v22 = *((unsigned __int8 *)a2 + v11);
      if (v22 >= 2)
      {
        if (v11 <= 3)
          v23 = v11;
        else
          v23 = 4;
        __asm { BR              X12 }
      }
      if (v22 == 1)
      {
        *a1 = *a2;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(((unint64_t)a1 + v9 + 8) & v15, ((unint64_t)a2 + v9 + 8) & v15, v5);
        v26 = 1;
        v8 = v11;
        v27 = 1;
      }
      else
      {
        v26 = 0;
        v28 = *(_OWORD *)a2;
        a1[2] = a2[2];
        *(_OWORD *)a1 = v28;
        v27 = 1;
        v8 = v11;
      }
    }
    else
    {
      v24 = *((unsigned __int8 *)a2 + v8);
      if (v24 >= 2)
      {
        if (v8 <= 3)
          v25 = v8;
        else
          v25 = 4;
        __asm { BR              X12 }
      }
      if (v24 == 1)
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16))(a1, a2, v5);
        v27 = 0;
        v26 = 1;
      }
      else
      {
        v26 = 0;
        v27 = 0;
        *(_OWORD *)a1 = *(_OWORD *)a2;
      }
    }
    *((_BYTE *)a1 + v8) = v26;
    *((_BYTE *)a1 + v12) = v27;
  }
  return a1;
}

_QWORD *sub_23BED6780(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  char v17;
  char v18;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_QWORD *)(v4 + 64);
  if (v5 <= 0x10)
    v6 = 16;
  else
    v6 = *(_QWORD *)(v4 + 64);
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = ((v7 + 8) & ~v7) + v5;
  if (v8 <= 0x18)
    v9 = 24;
  else
    v9 = v8;
  if (v9 + 1 <= (unint64_t)(v6 + 1))
    v10 = v6 + 1;
  else
    v10 = v9 + 1;
  v11 = *((unsigned __int8 *)a2 + v10);
  if (v11 >= 2)
  {
    if (v10 <= 3)
      v12 = v10;
    else
      v12 = 4;
    __asm { BR              X14 }
  }
  if (v11 == 1)
  {
    v13 = *((unsigned __int8 *)a2 + v9);
    if (v13 >= 2)
    {
      if (v9 <= 3)
        v14 = v9;
      else
        v14 = 4;
      __asm { BR              X14 }
    }
    if (v13 == 1)
    {
      *a1 = *a2;
      (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + v7 + 8) & ~v7, ((unint64_t)a2 + v7 + 8) & ~v7);
      v17 = 1;
      v6 = v9;
      v18 = 1;
    }
    else
    {
      v17 = 0;
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = a2[2];
      v18 = 1;
      v6 = v9;
    }
  }
  else
  {
    v15 = *((unsigned __int8 *)a2 + v6);
    if (v15 >= 2)
    {
      if (v6 <= 3)
        v16 = v6;
      else
        v16 = 4;
      __asm { BR              X13 }
    }
    if (v15 == 1)
    {
      (*(void (**)(_QWORD *))(v4 + 32))(a1);
      v18 = 0;
      v17 = 1;
    }
    else
    {
      v17 = 0;
      v18 = 0;
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
  }
  *((_BYTE *)a1 + v6) = v17;
  *((_BYTE *)a1 + v10) = v18;
  return a1;
}

_QWORD *sub_23BED69E0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  char v27;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    if (v7 <= 0x10)
      v8 = 16;
    else
      v8 = *(_QWORD *)(v6 + 64);
    v9 = *(unsigned __int8 *)(v6 + 80);
    v10 = ((v9 + 8) & ~v9) + v7;
    if (v10 <= 0x18)
      v11 = 24;
    else
      v11 = v10;
    if (v11 + 1 <= (unint64_t)(v8 + 1))
      v12 = v8 + 1;
    else
      v12 = v11 + 1;
    v13 = *((unsigned __int8 *)a1 + v12);
    if (v13 >= 2)
    {
      if (v12 <= 3)
        v14 = v12;
      else
        v14 = 4;
      __asm { BR              X12 }
    }
    v15 = ~v9;
    if (v13 == 1)
    {
      v16 = *((unsigned __int8 *)a1 + v11);
      if (v16 >= 2)
      {
        if (v11 <= 3)
          v17 = v11;
        else
          v17 = 4;
        __asm { BR              X12 }
      }
      if (v16 == 1)
        (*(void (**)(unint64_t, _QWORD))(v6 + 8))(((unint64_t)a1 + v9 + 8) & v15, *(_QWORD *)(a3 + 16));
    }
    else
    {
      v18 = *((unsigned __int8 *)a1 + v8);
      if (v18 >= 2)
      {
        if (v8 <= 3)
          v19 = v8;
        else
          v19 = 4;
        __asm { BR              X12 }
      }
      if (v18 == 1)
        (*(void (**)(_QWORD *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    }
    v20 = *((unsigned __int8 *)a2 + v12);
    if (v20 >= 2)
    {
      if (v12 <= 3)
        v21 = v12;
      else
        v21 = 4;
      __asm { BR              X12 }
    }
    if (v20 == 1)
    {
      v22 = *((unsigned __int8 *)a2 + v11);
      if (v22 >= 2)
      {
        if (v11 <= 3)
          v23 = v11;
        else
          v23 = 4;
        __asm { BR              X12 }
      }
      if (v22 == 1)
      {
        *a1 = *a2;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))(((unint64_t)a1 + v9 + 8) & v15, ((unint64_t)a2 + v9 + 8) & v15, v5);
        v26 = 1;
        v8 = v11;
        v27 = 1;
      }
      else
      {
        v26 = 0;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        a1[2] = a2[2];
        v27 = 1;
        v8 = v11;
      }
    }
    else
    {
      v24 = *((unsigned __int8 *)a2 + v8);
      if (v24 >= 2)
      {
        if (v8 <= 3)
          v25 = v8;
        else
          v25 = 4;
        __asm { BR              X12 }
      }
      if (v24 == 1)
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 32))(a1, a2, v5);
        v27 = 0;
        v26 = 1;
      }
      else
      {
        v26 = 0;
        v27 = 0;
        *(_OWORD *)a1 = *(_OWORD *)a2;
      }
    }
    *((_BYTE *)a1 + v8) = v26;
    *((_BYTE *)a1 + v12) = v27;
  }
  return a1;
}

uint64_t sub_23BED6EA8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = 16;
  if (v4 > 0x10)
    v5 = *(_QWORD *)(v3 + 64);
  v6 = ((*(unsigned __int8 *)(v3 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)) + v4;
  if (v6 <= 0x18)
    v6 = 24;
  v7 = v6 + 1;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_26;
  v9 = v8 + 1;
  v10 = 8 * (v8 + 1);
  if ((v8 + 1) <= 3)
  {
    v13 = ((a2 + ~(-1 << v10) - 254) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_26;
      goto LABEL_19;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_26;
      goto LABEL_19;
    }
    if (v13 < 2)
    {
LABEL_26:
      v15 = *(unsigned __int8 *)(a1 + v8);
      if (v15 >= 2)
        return (v15 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_26;
LABEL_19:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return (v14 + 255);
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_23BED6F98 + 4 * byte_23BFFCB98[(v9 - 1)]))();
}

void sub_23BED6FE4(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = 16;
  if (v6 > 0x10)
    v7 = *(_QWORD *)(v5 + 64);
  v8 = ((*(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + v6;
  if (v8 <= 0x18)
    v8 = 24;
  v9 = v8 + 1;
  if (v9 <= v7 + 1)
    v9 = v7 + 1;
  v10 = v9 + 1;
  if (a3 < 0xFF)
  {
    v11 = 0;
  }
  else if (v10 <= 3)
  {
    v13 = ((a3 + ~(-1 << (8 * v10)) - 254) >> (8 * v10)) + 1;
    if (HIWORD(v13))
    {
      v11 = 4u;
    }
    else if (v13 >= 0x100)
    {
      v11 = 2;
    }
    else
    {
      v11 = v13 > 1;
    }
  }
  else
  {
    v11 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v12 = a2 - 255;
  if (v10 < 4)
  {
    if ((_DWORD)v9 != -1)
    {
      v14 = v12 & ~(-1 << (8 * v10));
      bzero(a1, v10);
      if ((_DWORD)v10 == 3)
      {
        *a1 = v14;
        *((_BYTE *)a1 + 2) = BYTE2(v14);
      }
      else if ((_DWORD)v10 == 2)
      {
        *a1 = v14;
      }
      else
      {
        *(_BYTE *)a1 = v14;
      }
    }
  }
  else
  {
    bzero(a1, v9 + 1);
    *(_DWORD *)a1 = v12;
  }
  __asm { BR              X10 }
}

uint64_t sub_23BED71B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_QWORD *)(v2 + 64);
  v4 = 16;
  if (v3 > 0x10)
    v4 = *(_QWORD *)(v2 + 64);
  v5 = ((*(unsigned __int8 *)(v2 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)) + v3;
  if (v5 <= 0x18)
    v5 = 24;
  v6 = v5 + 1;
  if (v6 <= v4 + 1)
    v7 = v4 + 1;
  else
    v7 = v6;
  if (*(unsigned __int8 *)(a1 + v7) < 2u)
    return *(unsigned __int8 *)(a1 + v7);
  if (v7 <= 3)
    v8 = v7;
  else
    v8 = 4;
  return ((uint64_t (*)(void))((char *)&loc_23BED722C + 4 * byte_23BFFCBA6[v8]))();
}

void sub_23BED7274(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  size_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (a2 > 1)
  {
    v10 = *(_QWORD *)(v4 + 64);
    v11 = 16;
    if (v10 > 0x10)
      v11 = *(_QWORD *)(v4 + 64);
    v12 = ((*(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)) + v10;
    if (v12 <= 0x18)
      v12 = 24;
    v13 = v12 + 1;
    if (v13 <= v11 + 1)
      v14 = v11 + 1;
    else
      v14 = v13;
    v15 = a2 - 2;
    if (v14 < 4)
    {
      v16 = v15 >> (8 * v14);
      v17 = v15 & ~(-1 << (8 * v14));
      a1[v14] = v16 + 2;
      bzero(a1, v14);
      if ((_DWORD)v14 == 3)
      {
        *(_WORD *)a1 = v17;
        a1[2] = BYTE2(v17);
      }
      else if ((_DWORD)v14 == 2)
      {
        *(_WORD *)a1 = v17;
      }
      else
      {
        *a1 = v17;
      }
    }
    else
    {
      a1[v14] = 2;
      bzero(a1, v14);
      *(_DWORD *)a1 = v15;
    }
  }
  else
  {
    v5 = (*(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    v6 = *(_QWORD *)(v4 + 64);
    v7 = v5 + v6;
    if (v7 <= 0x18)
      v7 = 24;
    v8 = v7 + 1;
    if (v6 <= 0x10)
      v6 = 16;
    if (v8 <= v6 + 1)
      v9 = v6 + 1;
    else
      v9 = v8;
    a1[v9] = a2;
  }
}

uint64_t sub_23BED73A4(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23BED73F0 + 4 * byte_23BFFCBB0[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23BED7424 + 4 * byte_23BFFCBAB[v4]))();
}

uint64_t sub_23BED7424(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BED742C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BED7434);
  return result;
}

uint64_t sub_23BED7440(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BED7448);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23BED744C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BED7454(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BED7464(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23BED74A4 + 4 * byte_23BFFCBB5[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23BED74C4 + 4 * byte_23BFFCBBA[v4]))();
}

_BYTE *sub_23BED74A4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23BED74C4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BED74CC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BED74D4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BED74DC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BED74E4(_DWORD *result)
{
  *result = 0;
  return result;
}

void sub_23BED74F0()
{
  JUMPOUT(0x242615198);
}

void sub_23BED7500()
{
  JUMPOUT(0x242615198);
}

void sub_23BED7510()
{
  JUMPOUT(0x242615198);
}

void sub_23BED7520()
{
  JUMPOUT(0x242615198);
}

void sub_23BED7530()
{
  JUMPOUT(0x242615198);
}

void sub_23BED7540()
{
  JUMPOUT(0x242615198);
}

void sub_23BED7550()
{
  JUMPOUT(0x242615198);
}

void sub_23BED7560()
{
  JUMPOUT(0x242615198);
}

void sub_23BED7570()
{
  JUMPOUT(0x242615198);
}

BOOL static DynamicBrickDisplayStyle.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_23BED759C()
{
  sub_23BED7BE0();
  return sub_23BFF9A30();
}

uint64_t sub_23BED75C4()
{
  sub_23BED7BE0();
  return sub_23BFF9A3C();
}

uint64_t sub_23BED75EC()
{
  sub_23BED7B9C();
  return sub_23BFF9A30();
}

uint64_t sub_23BED7614()
{
  sub_23BED7B9C();
  return sub_23BFF9A3C();
}

uint64_t sub_23BED763C()
{
  sub_23BED7B58();
  return sub_23BFF9A30();
}

uint64_t sub_23BED7664()
{
  sub_23BED7B58();
  return sub_23BFF9A3C();
}

uint64_t sub_23BED7694()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23BED76D0 + 4 * byte_23BFFD040[*v0]))(0x654C6D6F74746F62, 0xED0000676E696461);
}

uint64_t sub_23BED76D0()
{
  return 0x7265746E6563;
}

uint64_t sub_23BED76E4()
{
  return 0x654C7265746E6563;
}

uint64_t sub_23BED76F8()
{
  return 0x696461654C706F74;
}

uint64_t sub_23BED7714@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BED8650(a1, a2);
  *a3 = result;
  return result;
}

void sub_23BED7738(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_23BED7744()
{
  sub_23BED7AD0();
  return sub_23BFF9A30();
}

uint64_t sub_23BED776C()
{
  sub_23BED7AD0();
  return sub_23BFF9A3C();
}

uint64_t sub_23BED7794()
{
  sub_23BED7B14();
  return sub_23BFF9A30();
}

uint64_t sub_23BED77BC()
{
  sub_23BED7B14();
  return sub_23BFF9A3C();
}

void DynamicBrickDisplayStyle.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE4578);
  v19 = *(_QWORD *)(v4 - 8);
  v20 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v18 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE4580);
  v16 = *(_QWORD *)(v6 - 8);
  v17 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v15 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE4588);
  v13 = *(_QWORD *)(v8 - 8);
  v14 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE4590);
  MEMORY[0x24BDAC7A8](v12);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE4598);
  v21 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v10 = *v2;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BED7AD0();
  sub_23BFF9A18();
  __asm { BR              X9 }
}

uint64_t sub_23BED799C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v4 - 68) = 0;
  sub_23BED7BE0();
  sub_23BFF98EC();
  (*(void (**)(uint64_t, _QWORD))(v3 + 8))(v2, *(_QWORD *)(v4 - 168));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 96) + 8))(v1, v0);
}

unint64_t sub_23BED7AD0()
{
  unint64_t result;

  result = qword_256AE45A0;
  if (!qword_256AE45A0)
  {
    result = MEMORY[0x242615198](&unk_23BFFD510, &type metadata for DynamicBrickDisplayStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE45A0);
  }
  return result;
}

unint64_t sub_23BED7B14()
{
  unint64_t result;

  result = qword_256AE45A8;
  if (!qword_256AE45A8)
  {
    result = MEMORY[0x242615198](&unk_23BFFD4C0, &type metadata for DynamicBrickDisplayStyle.TopLeadingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE45A8);
  }
  return result;
}

unint64_t sub_23BED7B58()
{
  unint64_t result;

  result = qword_256AE45B0;
  if (!qword_256AE45B0)
  {
    result = MEMORY[0x242615198](&unk_23BFFD470, &type metadata for DynamicBrickDisplayStyle.CenterLeadingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE45B0);
  }
  return result;
}

unint64_t sub_23BED7B9C()
{
  unint64_t result;

  result = qword_256AE45B8;
  if (!qword_256AE45B8)
  {
    result = MEMORY[0x242615198](&unk_23BFFD420, &type metadata for DynamicBrickDisplayStyle.CenterCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE45B8);
  }
  return result;
}

unint64_t sub_23BED7BE0()
{
  unint64_t result;

  result = qword_256AE45C0;
  if (!qword_256AE45C0)
  {
    result = MEMORY[0x242615198](&unk_23BFFD3D0, &type metadata for DynamicBrickDisplayStyle.BottomLeadingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE45C0);
  }
  return result;
}

uint64_t DynamicBrickDisplayStyle.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD v21[7];
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;

  v23 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE45C8);
  v21[5] = *(_QWORD *)(v3 - 8);
  v21[6] = v3;
  MEMORY[0x24BDAC7A8](v3);
  v26 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE45D0);
  v21[4] = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE45D8);
  v21[2] = *(_QWORD *)(v6 - 8);
  v21[3] = v6;
  MEMORY[0x24BDAC7A8](v6);
  v24 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE45E0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE45E8);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v27 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v14);
  sub_23BED7AD0();
  v15 = v28;
  sub_23BFF9A0C();
  if (!v15)
  {
    v21[0] = v9;
    v21[1] = v8;
    v28 = v11;
    v16 = sub_23BFF98D4();
    if (*(_QWORD *)(v16 + 16) == 1)
      __asm { BR              X9 }
    v17 = sub_23BFF9784();
    swift_allocError();
    v19 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3978);
    *v19 = &type metadata for DynamicBrickDisplayStyle;
    sub_23BFF9874();
    sub_23BFF9778();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v19, *MEMORY[0x24BEE26D0], v17);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v13, v10);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
}

uint64_t sub_23BED80A8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return DynamicBrickDisplayStyle.init(from:)(a1, a2);
}

void sub_23BED80BC(_QWORD *a1)
{
  DynamicBrickDisplayStyle.encode(to:)(a1);
}

uint64_t DynamicBrickDisplayStyle.hash(into:)()
{
  return sub_23BFF99DC();
}

uint64_t DynamicBrickDisplayStyle.hashValue.getter()
{
  sub_23BFF99D0();
  sub_23BFF99DC();
  return sub_23BFF9A00();
}

unint64_t sub_23BED8140()
{
  unint64_t result;

  result = qword_256AE45F0;
  if (!qword_256AE45F0)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for DynamicBrickDisplayStyle, &type metadata for DynamicBrickDisplayStyle);
    atomic_store(result, (unint64_t *)&qword_256AE45F0);
  }
  return result;
}

ValueMetadata *type metadata accessor for DynamicBrickDisplayStyle()
{
  return &type metadata for DynamicBrickDisplayStyle;
}

uint64_t getEnumTagSinglePayload for ContentMargins.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s15FitnessCanvasUI24DynamicBrickDisplayStyleOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23BED8278 + 4 * byte_23BFFD051[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23BED82AC + 4 * byte_23BFFD04C[v4]))();
}

uint64_t sub_23BED82AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BED82B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BED82BCLL);
  return result;
}

uint64_t sub_23BED82C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BED82D0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23BED82D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BED82DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DynamicBrickDisplayStyle.CodingKeys()
{
  return &type metadata for DynamicBrickDisplayStyle.CodingKeys;
}

ValueMetadata *type metadata accessor for DynamicBrickDisplayStyle.BottomLeadingCodingKeys()
{
  return &type metadata for DynamicBrickDisplayStyle.BottomLeadingCodingKeys;
}

ValueMetadata *type metadata accessor for DynamicBrickDisplayStyle.CenterCodingKeys()
{
  return &type metadata for DynamicBrickDisplayStyle.CenterCodingKeys;
}

ValueMetadata *type metadata accessor for DynamicBrickDisplayStyle.CenterLeadingCodingKeys()
{
  return &type metadata for DynamicBrickDisplayStyle.CenterLeadingCodingKeys;
}

ValueMetadata *type metadata accessor for DynamicBrickDisplayStyle.TopLeadingCodingKeys()
{
  return &type metadata for DynamicBrickDisplayStyle.TopLeadingCodingKeys;
}

unint64_t sub_23BED833C()
{
  unint64_t result;

  result = qword_256AE45F8;
  if (!qword_256AE45F8)
  {
    result = MEMORY[0x242615198](&unk_23BFFD3A8, &type metadata for DynamicBrickDisplayStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE45F8);
  }
  return result;
}

unint64_t sub_23BED8384()
{
  unint64_t result;

  result = qword_256AE4600;
  if (!qword_256AE4600)
  {
    result = MEMORY[0x242615198](&unk_23BFFD2C8, &type metadata for DynamicBrickDisplayStyle.BottomLeadingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE4600);
  }
  return result;
}

unint64_t sub_23BED83CC()
{
  unint64_t result;

  result = qword_256AE4608;
  if (!qword_256AE4608)
  {
    result = MEMORY[0x242615198](&unk_23BFFD2F0, &type metadata for DynamicBrickDisplayStyle.BottomLeadingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE4608);
  }
  return result;
}

unint64_t sub_23BED8414()
{
  unint64_t result;

  result = qword_256AE4610;
  if (!qword_256AE4610)
  {
    result = MEMORY[0x242615198](&unk_23BFFD278, &type metadata for DynamicBrickDisplayStyle.CenterCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE4610);
  }
  return result;
}

unint64_t sub_23BED845C()
{
  unint64_t result;

  result = qword_256AE4618;
  if (!qword_256AE4618)
  {
    result = MEMORY[0x242615198](&unk_23BFFD2A0, &type metadata for DynamicBrickDisplayStyle.CenterCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE4618);
  }
  return result;
}

unint64_t sub_23BED84A4()
{
  unint64_t result;

  result = qword_256AE4620;
  if (!qword_256AE4620)
  {
    result = MEMORY[0x242615198](&unk_23BFFD228, &type metadata for DynamicBrickDisplayStyle.CenterLeadingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE4620);
  }
  return result;
}

unint64_t sub_23BED84EC()
{
  unint64_t result;

  result = qword_256AE4628;
  if (!qword_256AE4628)
  {
    result = MEMORY[0x242615198](&unk_23BFFD250, &type metadata for DynamicBrickDisplayStyle.CenterLeadingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE4628);
  }
  return result;
}

unint64_t sub_23BED8534()
{
  unint64_t result;

  result = qword_256AE4630;
  if (!qword_256AE4630)
  {
    result = MEMORY[0x242615198](&unk_23BFFD1D8, &type metadata for DynamicBrickDisplayStyle.TopLeadingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE4630);
  }
  return result;
}

unint64_t sub_23BED857C()
{
  unint64_t result;

  result = qword_256AE4638;
  if (!qword_256AE4638)
  {
    result = MEMORY[0x242615198](&unk_23BFFD200, &type metadata for DynamicBrickDisplayStyle.TopLeadingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE4638);
  }
  return result;
}

unint64_t sub_23BED85C4()
{
  unint64_t result;

  result = qword_256AE4640;
  if (!qword_256AE4640)
  {
    result = MEMORY[0x242615198](&unk_23BFFD318, &type metadata for DynamicBrickDisplayStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE4640);
  }
  return result;
}

unint64_t sub_23BED860C()
{
  unint64_t result;

  result = qword_256AE4648;
  if (!qword_256AE4648)
  {
    result = MEMORY[0x242615198](&unk_23BFFD340, &type metadata for DynamicBrickDisplayStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE4648);
  }
  return result;
}

uint64_t sub_23BED8650(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x654C6D6F74746F62 && a2 == 0xED0000676E696461;
  if (v2 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7265746E6563 && a2 == 0xE600000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x654C7265746E6563 && a2 == 0xED0000676E696461 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x696461654C706F74 && a2 == 0xEA0000000000676ELL)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_23BFF9964();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_23BED8850(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x74756F79616CLL && a2 == 0xE600000000000000;
  if (v2 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6B726F77747261 && a2 == 0xE700000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656C797473 && a2 == 0xE500000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x656C746974 && a2 == 0xE500000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x656C746974627573 && a2 == 0xE800000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6E6F6974706163 && a2 == 0xE700000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000023C01EE20 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000023C01EE40)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    v6 = sub_23BFF9964();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

uint64_t sub_23BED8B74(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23BED8BA4 + 4 * byte_23BFFD560[a1]))(0x74756F79616CLL, 0xE600000000000000);
}

uint64_t sub_23BED8BA4()
{
  return 0x6B726F77747261;
}

uint64_t sub_23BED8BBC()
{
  return 0x656C797473;
}

uint64_t sub_23BED8BD0()
{
  return 0x656C746974;
}

uint64_t sub_23BED8BE4()
{
  return 0x656C746974627573;
}

uint64_t sub_23BED8BFC()
{
  return 0x6E6F6974706163;
}

unint64_t sub_23BED8C14()
{
  return 0xD000000000000013;
}

unint64_t sub_23BED8C30()
{
  return 0xD000000000000015;
}

uint64_t sub_23BED8C50(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x61436E6F69746361 && a2 == 0xEA00000000006472;
  if (v2 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746469576C6C7566 && a2 == 0xED00006D65744968 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x746469576C6C7566 && a2 == 0xEE00656761745368 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x697463416F666E69 && a2 == 0xEE00647261436E6FLL || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x697242656772616CLL && a2 == 0xEA00000000006B63 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000023C01EC80 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000023C01ECA0 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000023C01ECC0 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x647261646E617473 && a2 == 0xEC00000064726143 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x800000023C01ECE0 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000023C01ED00 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x647261436C6C6174 && a2 == 0xE800000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000023C01ED20 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x6C69754277656976 && a2 == 0xEB00000000726564 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x6369724265646977 && a2 == 0xE90000000000006BLL)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else
  {
    v6 = sub_23BFF9964();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 14;
    else
      return 15;
  }
}

uint64_t sub_23BED92B8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23BED92F0 + 4 * byte_23BFFD568[a1]))(0x61436E6F69746361, 0xEA00000000006472);
}

uint64_t sub_23BED92F0()
{
  return 0x746469576C6C7566;
}

uint64_t sub_23BED9328()
{
  return 0x697463416F666E69;
}

uint64_t sub_23BED934C()
{
  return 0x697242656772616CLL;
}

unint64_t sub_23BED9364()
{
  return 0xD000000000000012;
}

uint64_t sub_23BED93F8()
{
  return 0x647261436C6C6174;
}

uint64_t sub_23BED942C()
{
  return 0x6C69754277656976;
}

uint64_t sub_23BED944C()
{
  return 0x6369724265646977;
}

uint64_t sub_23BED9468(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x637365446D657469 && a2 == 0xEE00726F74706972)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_23BFF9964();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_23BED9510(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x74756F79616CLL && a2 == 0xE600000000000000;
  if (v2 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6B726F77747261 && a2 == 0xE700000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656C797473 && a2 == 0xE500000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x656C746974 && a2 == 0xE500000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x656C746974627573 && a2 == 0xE800000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6E6F6974706163 && a2 == 0xE700000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000023C01EE20 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000023C01EE40 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x69566D6F74737563 && a2 == 0xEA00000000007765)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else
  {
    v6 = sub_23BFF9964();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 8;
    else
      return 9;
  }
}

uint64_t sub_23BED98A4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23BED98D4 + 4 * byte_23BFFD577[a1]))(0x74756F79616CLL, 0xE600000000000000);
}

uint64_t sub_23BED98D4()
{
  return 0x6B726F77747261;
}

uint64_t sub_23BED98EC()
{
  return 0x656C797473;
}

uint64_t sub_23BED9900()
{
  return 0x656C746974;
}

uint64_t sub_23BED9914()
{
  return 0x656C746974627573;
}

uint64_t sub_23BED992C()
{
  return 0x6E6F6974706163;
}

unint64_t sub_23BED9944()
{
  return 0xD000000000000013;
}

unint64_t sub_23BED9960()
{
  return 0xD000000000000015;
}

uint64_t sub_23BED9980()
{
  return 0x69566D6F74737563;
}

uint64_t sub_23BED999C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x74756F79616CLL && a2 == 0xE600000000000000;
  if (v2 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C746974 && a2 == 0xE500000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7470697263736564 && a2 == 0xEB000000006E6F69 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x75426E6F69746361 && a2 == 0xEC0000006E6F7474)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_23BFF9964();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_23BED9B74(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23BED9BA4 + 4 * byte_23BFFD580[a1]))(0x74756F79616CLL, 0xE600000000000000);
}

uint64_t sub_23BED9BA4()
{
  return 0x656C746974;
}

uint64_t sub_23BED9BB8()
{
  return 0x7470697263736564;
}

uint64_t sub_23BED9BD8()
{
  return 0x75426E6F69746361;
}

uint64_t sub_23BED9BF8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6B726F77747261 && a2 == 0xE700000000000000;
  if (v2 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65746F6E746F6F66 && a2 == 0xE800000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656C746974627573 && a2 == 0xE800000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x656C746974 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_23BFF9964();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_23BED9DA8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23BED9DDC + 4 * byte_23BFFD584[a1]))(0x6B726F77747261, 0xE700000000000000);
}

uint64_t sub_23BED9DDC()
{
  return 0x65746F6E746F6F66;
}

uint64_t sub_23BED9DF4()
{
  return 0x656C746974627573;
}

uint64_t sub_23BED9E0C()
{
  return 0x656C746974;
}

uint64_t sub_23BED9E20(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x74756F79616CLL && a2 == 0xE600000000000000;
  if (v2 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6B726F77747261 && a2 == 0xE700000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656C746974 && a2 == 0xE500000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x656C746974627573 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_23BFF9964();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_23BED9FC8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23BED9FF8 + 4 * byte_23BFFD588[a1]))(0x74756F79616CLL, 0xE600000000000000);
}

uint64_t sub_23BED9FF8()
{
  return 0x6B726F77747261;
}

uint64_t sub_23BEDA010()
{
  return 0x656C746974;
}

uint64_t sub_23BEDA024()
{
  return 0x656C746974627573;
}

uint64_t sub_23BEDA03C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6B726F77747261 && a2 == 0xE700000000000000;
  if (v2 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F6974706163 && a2 == 0xE700000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x5379616C70736964 && a2 == 0xEC000000656C7974 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x74756F79616CLL && a2 == 0xE600000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x656C746974 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_23BFF9964();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_23BEDA260(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23BEDA294 + 4 * byte_23BFFD58C[a1]))(0x6B726F77747261, 0xE700000000000000);
}

uint64_t sub_23BEDA294()
{
  return 0x6E6F6974706163;
}

uint64_t sub_23BEDA2A8()
{
  return 0x5379616C70736964;
}

uint64_t sub_23BEDA2C8()
{
  return 0x74756F79616CLL;
}

uint64_t sub_23BEDA2DC()
{
  return 0x656C746974;
}

uint64_t sub_23BEDA2F0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x74756F79616CLL && a2 == 0xE600000000000000;
  if (v2 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6B726F77747261 && a2 == 0xE700000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656C746974 && a2 == 0xE500000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x656C746974627573 && a2 == 0xE800000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6E6F6974706163 && a2 == 0xE700000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x74695470756F7267 && a2 == 0xEA0000000000656CLL || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x726F737365636361 && a2 == 0xED00007765695679)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v6 = sub_23BFF9964();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t sub_23BEDA5F4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23BEDA624 + 4 * byte_23BFFD591[a1]))(0x74756F79616CLL, 0xE600000000000000);
}

uint64_t sub_23BEDA624()
{
  return 0x6B726F77747261;
}

uint64_t sub_23BEDA63C()
{
  return 0x656C746974;
}

uint64_t sub_23BEDA650()
{
  return 0x656C746974627573;
}

uint64_t sub_23BEDA668()
{
  return 0x6E6F6974706163;
}

uint64_t sub_23BEDA680()
{
  return 0x74695470756F7267;
}

uint64_t sub_23BEDA69C()
{
  return 0x726F737365636361;
}

uint64_t sub_23BEDA6C0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x74756F79616CLL && a2 == 0xE600000000000000;
  if (v2 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6B726F77747261 && a2 == 0xE700000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656C746974 && a2 == 0xE500000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x79616C7265766FLL && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_23BFF9964();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_23BEDA868(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23BEDA898 + 4 * byte_23BFFD598[a1]))(0x74756F79616CLL, 0xE600000000000000);
}

uint64_t sub_23BEDA898()
{
  return 0x6B726F77747261;
}

uint64_t sub_23BEDA8B0()
{
  return 0x656C746974;
}

uint64_t sub_23BEDA8C4()
{
  return 0x79616C7265766FLL;
}

uint64_t sub_23BEDA8DC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x74756F79616CLL && a2 == 0xE600000000000000;
  if (v2 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6B726F77747261 && a2 == 0xE700000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656C746974 && a2 == 0xE500000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x656C746974627573 && a2 == 0xE800000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6E6F6974706163 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_23BFF9964();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_23BEDAAE8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23BEDAB18 + 4 * byte_23BFFD59C[a1]))(0x74756F79616CLL, 0xE600000000000000);
}

uint64_t sub_23BEDAB18()
{
  return 0x6B726F77747261;
}

uint64_t sub_23BEDAB30()
{
  return 0x656C746974;
}

uint64_t sub_23BEDAB44()
{
  return 0x656C746974627573;
}

uint64_t sub_23BEDAB5C()
{
  return 0x6E6F6974706163;
}

uint64_t sub_23BEDAB74(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x7470697263736564 && a2 == 0xEA0000000000726FLL)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_23BFF9964();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_23BEDAC04(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6B726F77747261 && a2 == 0xE700000000000000;
  if (v2 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C746974627573 && a2 == 0xE800000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656C746974 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_23BFF9964();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_23BEDAD50(char a1)
{
  if (!a1)
    return 0x6B726F77747261;
  if (a1 == 1)
    return 0x656C746974627573;
  return 0x656C746974;
}

uint64_t sub_23BEDADA4(unsigned __int8 *a1, unsigned __int8 *a2, _QWORD *a3, uint64_t a4)
{
  return sub_23BEDB6DC(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BEFF720);
}

uint64_t sub_23BEDADB4(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return sub_23BEDB6FC(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BEFF724);
}

uint64_t sub_23BEDADC0(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return sub_23BEDB714(a1, a2, a3, (void (*)(_BYTE *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BEFF724);
}

uint64_t sub_23BEDADCC(_QWORD *a1, uint64_t a2)
{
  return sub_23BEDAEAC(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BED8B74);
}

uint64_t sub_23BEDADD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _BYTE *a4@<X8>)
{
  return sub_23BEDAED0(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BED8850, a4);
}

uint64_t sub_23BEDADE4@<X0>(_QWORD *a1@<X1>, _BYTE *a2@<X8>)
{
  return sub_23BEDB790(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BEFF6F8, a2);
}

uint64_t sub_23BEDADF0(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23BFFE8D8, a1);
  return sub_23BFF9A30();
}

uint64_t sub_23BEDAE24(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23BFFE8D8, a1);
  return sub_23BFF9A3C();
}

uint64_t sub_23BEDAE58(unsigned __int8 *a1, unsigned __int8 *a2, _QWORD *a3, uint64_t a4)
{
  return sub_23BEDB6DC(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BEAAB9C);
}

uint64_t sub_23BEDAE64()
{
  return sub_23BEAADE0();
}

uint64_t sub_23BEDAE88(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return sub_23BEDB6FC(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BEAABAC);
}

uint64_t sub_23BEDAE94(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return sub_23BEDB714(a1, a2, a3, (void (*)(_BYTE *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BEAABAC);
}

uint64_t sub_23BEDAEA0(_QWORD *a1, uint64_t a2)
{
  return sub_23BEDAEAC(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BED92B8);
}

uint64_t sub_23BEDAEAC(_QWORD *a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  unsigned __int8 *v3;

  return a3(*v3, a1[2], a1[3], a1[4], a1[5], a1[6], a1[7]);
}

uint64_t sub_23BEDAEC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _BYTE *a4@<X8>)
{
  return sub_23BEDAED0(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BED8C50, a4);
}

uint64_t sub_23BEDAED0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t (*a4)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD)@<X4>, _BYTE *a5@<X8>)
{
  uint64_t result;

  result = a4(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6], a3[7]);
  *a5 = result;
  return result;
}

uint64_t sub_23BEDAF08@<X0>(_QWORD *a1@<X1>, _BYTE *a2@<X8>)
{
  return sub_23BEDB790(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BEFF700, a2);
}

uint64_t sub_23BEDAF14(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23BFFE888, a1);
  return sub_23BFF9A30();
}

uint64_t sub_23BEDAF48(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23BFFE888, a1);
  return sub_23BFF9A3C();
}

uint64_t sub_23BEDAF7C()
{
  return 0x637365446D657469;
}

uint64_t sub_23BEDAFA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _BYTE *a4@<X8>)
{
  return sub_23BEDB5F0(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BED9468, a4);
}

uint64_t sub_23BEDAFAC@<X0>(_QWORD *a1@<X1>, _BYTE *a2@<X8>)
{
  return sub_23BEDB638(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BEBF6D0, a2);
}

uint64_t sub_23BEDAFB8(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23BFFE928, a1);
  return sub_23BFF9A30();
}

uint64_t sub_23BEDAFEC(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23BFFE928, a1);
  return sub_23BFF9A3C();
}

uint64_t sub_23BEDB020(_QWORD *a1, uint64_t a2)
{
  return sub_23BEDAEAC(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BED98A4);
}

uint64_t sub_23BEDB02C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _BYTE *a4@<X8>)
{
  return sub_23BEDAED0(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BED9510, a4);
}

uint64_t sub_23BEDB038@<X0>(_QWORD *a1@<X1>, _BYTE *a2@<X8>)
{
  return sub_23BEDB790(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BEFF708, a2);
}

uint64_t sub_23BEDB044(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23BFFE978, a1);
  return sub_23BFF9A30();
}

uint64_t sub_23BEDB078(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23BFFE978, a1);
  return sub_23BFF9A3C();
}

uint64_t sub_23BEDB0AC(_QWORD *a1, uint64_t a2)
{
  return sub_23BEDAEAC(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BED9B74);
}

uint64_t sub_23BEDB0B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _BYTE *a4@<X8>)
{
  return sub_23BEDAED0(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BED999C, a4);
}

uint64_t sub_23BEDB0C4@<X0>(_QWORD *a1@<X1>, _BYTE *a2@<X8>)
{
  return sub_23BEDB790(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BEFF728, a2);
}

uint64_t sub_23BEDB0D0(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23BFFE9C8, a1);
  return sub_23BFF9A30();
}

uint64_t sub_23BEDB104(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23BFFE9C8, a1);
  return sub_23BFF9A3C();
}

uint64_t sub_23BEDB138(_QWORD *a1, uint64_t a2)
{
  return sub_23BEDAEAC(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BED9DA8);
}

uint64_t sub_23BEDB144@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _BYTE *a4@<X8>)
{
  return sub_23BEDAED0(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BED9BF8, a4);
}

uint64_t sub_23BEDB150(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23BFFEA18, a1);
  return sub_23BFF9A30();
}

uint64_t sub_23BEDB184(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23BFFEA18, a1);
  return sub_23BFF9A3C();
}

uint64_t sub_23BEDB1B8(_QWORD *a1, uint64_t a2)
{
  return sub_23BEDB1C4(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BEDA260);
}

uint64_t sub_23BEDB1C4(_QWORD *a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  unsigned __int8 *v3;

  return a3(*v3, a1[2], a1[3], a1[4], a1[5], a1[6], a1[7]);
}

uint64_t sub_23BEDB1EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _BYTE *a4@<X8>)
{
  return sub_23BEDAED0(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BEDA03C, a4);
}

uint64_t sub_23BEDB1F8@<X0>(_QWORD *a1@<X1>, _BYTE *a2@<X8>)
{
  return sub_23BEDB790(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BEFF72C, a2);
}

uint64_t sub_23BEDB204(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23BFFEA68, a1);
  return sub_23BFF9A30();
}

uint64_t sub_23BEDB238(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23BFFEA68, a1);
  return sub_23BFF9A3C();
}

uint64_t sub_23BEDB26C(_QWORD *a1, uint64_t a2)
{
  return sub_23BEDAEAC(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BED9FC8);
}

uint64_t sub_23BEDB278@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _BYTE *a4@<X8>)
{
  return sub_23BEDAED0(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BED9E20, a4);
}

uint64_t sub_23BEDB284(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23BFFEAB8, a1);
  return sub_23BFF9A30();
}

uint64_t sub_23BEDB2B8(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23BFFEAB8, a1);
  return sub_23BFF9A3C();
}

uint64_t sub_23BEDB2EC(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23BFFEB08, a1);
  return sub_23BFF9A30();
}

uint64_t sub_23BEDB320(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23BFFEB08, a1);
  return sub_23BFF9A3C();
}

uint64_t sub_23BEDB354(_QWORD *a1, uint64_t a2)
{
  return sub_23BEDB1C4(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BEDAAE8);
}

uint64_t sub_23BEDB360@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _BYTE *a4@<X8>)
{
  return sub_23BEDAED0(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BEDA8DC, a4);
}

uint64_t sub_23BEDB36C@<X0>(_QWORD *a1@<X1>, _BYTE *a2@<X8>)
{
  return sub_23BEDB790(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BEAC9E0, a2);
}

uint64_t sub_23BEDB378(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23BFFEB58, a1);
  return sub_23BFF9A30();
}

uint64_t sub_23BEDB3AC(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23BFFEB58, a1);
  return sub_23BFF9A3C();
}

uint64_t sub_23BEDB3E0(_QWORD *a1, uint64_t a2)
{
  return sub_23BEDAEAC(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BEDA5F4);
}

uint64_t sub_23BEDB3EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _BYTE *a4@<X8>)
{
  return sub_23BEDAED0(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BEDA2F0, a4);
}

uint64_t sub_23BEDB3F8@<X0>(_QWORD *a1@<X1>, _BYTE *a2@<X8>)
{
  return sub_23BEDB790(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BECBFEC, a2);
}

uint64_t sub_23BEDB404(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23BFFEBA8, a1);
  return sub_23BFF9A30();
}

uint64_t sub_23BEDB438(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23BFFEBA8, a1);
  return sub_23BFF9A3C();
}

uint64_t sub_23BEDB46C(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23BFFEBF8, a1);
  return sub_23BFF9A30();
}

uint64_t sub_23BEDB4A0(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23BFFEBF8, a1);
  return sub_23BFF9A3C();
}

uint64_t sub_23BEDB4D4(_QWORD *a1, uint64_t a2)
{
  return sub_23BEDAEAC(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BEDA868);
}

uint64_t sub_23BEDB4E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _BYTE *a4@<X8>)
{
  return sub_23BEDAED0(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BEDA6C0, a4);
}

uint64_t sub_23BEDB4EC@<X0>(_QWORD *a1@<X1>, _BYTE *a2@<X8>)
{
  return sub_23BEDB790(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BEFF710, a2);
}

uint64_t sub_23BEDB4F8(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23BFFEC48, a1);
  return sub_23BFF9A30();
}

uint64_t sub_23BEDB52C(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23BFFEC48, a1);
  return sub_23BFF9A3C();
}

uint64_t sub_23BEDB560(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23BFFEC98, a1);
  return sub_23BFF9A30();
}

uint64_t sub_23BEDB594(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23BFFEC98, a1);
  return sub_23BFF9A3C();
}

uint64_t sub_23BEDB5C8()
{
  return 0x7470697263736564;
}

uint64_t sub_23BEDB5E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _BYTE *a4@<X8>)
{
  return sub_23BEDB5F0(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BEDAB74, a4);
}

uint64_t sub_23BEDB5F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t (*a4)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD)@<X4>, _BYTE *a5@<X8>)
{
  uint64_t result;

  result = a4(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6], a3[7]);
  *a5 = result & 1;
  return result;
}

uint64_t sub_23BEDB62C@<X0>(_QWORD *a1@<X1>, _BYTE *a2@<X8>)
{
  return sub_23BEDB638(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BEFF730, a2);
}

uint64_t sub_23BEDB638@<X0>(_QWORD *a1@<X1>, uint64_t (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD)@<X3>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = a2(a1[2], a1[3], a1[4], a1[5], a1[6], a1[7]);
  *a3 = result & 1;
  return result;
}

uint64_t sub_23BEDB674(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23BFFECE8, a1);
  return sub_23BFF9A30();
}

uint64_t sub_23BEDB6A8(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23BFFECE8, a1);
  return sub_23BFF9A3C();
}

uint64_t sub_23BEDB6DC(unsigned __int8 *a1, unsigned __int8 *a2, _QWORD *a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  return a5(*a1, *a2, a3[2], a3[3], a3[4], a3[5], a3[6], a3[7]);
}

uint64_t sub_23BEDB6FC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t (*a4)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  unsigned __int8 *v4;

  return a4(a1, *v4, a2[2], a2[3], a2[4], a2[5], a2[6], a2[7]);
}

uint64_t sub_23BEDB714(uint64_t a1, _QWORD *a2, uint64_t a3, void (*a4)(_BYTE *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  unsigned __int8 *v4;
  _BYTE v8[72];

  sub_23BFF99D0();
  a4(v8, *v4, a2[2], a2[3], a2[4], a2[5], a2[6], a2[7]);
  return sub_23BFF9A00();
}

uint64_t sub_23BEDB76C(_QWORD *a1, uint64_t a2)
{
  return sub_23BEDAEAC(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BEDAD50);
}

uint64_t sub_23BEDB778@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _BYTE *a4@<X8>)
{
  return sub_23BEDAED0(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BEDAC04, a4);
}

uint64_t sub_23BEDB784@<X0>(_QWORD *a1@<X1>, _BYTE *a2@<X8>)
{
  return sub_23BEDB790(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BEFF718, a2);
}

uint64_t sub_23BEDB790@<X0>(_QWORD *a1@<X1>, uint64_t (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD)@<X3>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = a2(a1[2], a1[3], a1[4], a1[5], a1[6], a1[7]);
  *a3 = result;
  return result;
}

uint64_t sub_23BEDB7C8(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23BFFED38, a1);
  return sub_23BFF9A30();
}

uint64_t sub_23BEDB7FC(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23BFFED38, a1);
  return sub_23BFF9A3C();
}

void CanvasItemContent.encode(to:)()
{
  type metadata accessor for CanvasItemContent.WideBrickCodingKeys();
}

void sub_23BEDB89C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v17 = MEMORY[0x242615198](&unk_23BFFED38, a1);
  v9[71] = a1;
  v9[69] = v17;
  v18 = sub_23BFF994C();
  v9[76] = v18;
  v9[14] = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v9[75] = (char *)&a9 - v19;
  v9[190] = v13;
  v9[191] = v10;
  v9[192] = v12;
  v9[193] = v14;
  v9[194] = v11;
  v9[195] = v15;
  type metadata accessor for CanvasItemContent.ViewBuilderCodingKeys();
}

void sub_23BEDB920(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v17 = MEMORY[0x242615198](&unk_23BFFECE8, a1);
  v9[63] = a1;
  v9[60] = v17;
  v18 = sub_23BFF994C();
  v9[65] = v18;
  v9[16] = *(_QWORD *)(v18 - 8);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v9[62] = (char *)&a9 - v20;
  v9[64] = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v9[61] = (char *)&a9 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9[190] = v13;
  v9[191] = v10;
  v9[192] = v12;
  v9[193] = v14;
  v9[194] = v11;
  v9[195] = v15;
  type metadata accessor for CanvasItemContent.VerticalStackCardCodingKeys();
}

void sub_23BEDB9D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v17 = MEMORY[0x242615198](&unk_23BFFEC98, a1);
  v9[67] = a1;
  v9[66] = v17;
  v18 = sub_23BFF994C();
  v9[78] = v18;
  v9[13] = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v9[77] = (char *)&a9 - v19;
  v9[190] = v13;
  v9[191] = v10;
  v9[192] = v12;
  v9[193] = v14;
  v9[194] = v11;
  v9[195] = v15;
  type metadata accessor for CanvasItemContent.TallCardCodingKeys();
}

void sub_23BEDBA5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v9[57] = MEMORY[0x242615198](&unk_23BFFEC48, a1);
  v9[58] = a1;
  v17 = sub_23BFF994C();
  v9[73] = v17;
  v9[8] = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v9[70] = (char *)&a9 - v18;
  v9[190] = v13;
  v9[191] = v10;
  v9[192] = v12;
  v9[193] = v14;
  v9[194] = v11;
  v9[195] = v15;
  type metadata accessor for CanvasItemContent.StandardVerticalStackCodingKeys();
}

void sub_23BEDBADC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v17 = MEMORY[0x242615198](&unk_23BFFEBF8, a1);
  v9[55] = a1;
  v9[53] = v17;
  v18 = sub_23BFF994C();
  v9[72] = v18;
  v9[12] = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v9[68] = (char *)&a9 - v19;
  v9[190] = v13;
  v9[191] = v10;
  v9[192] = v12;
  v9[193] = v14;
  v9[194] = v11;
  v9[195] = v15;
  type metadata accessor for CanvasItemContent.StandardHorizontalStackCodingKeys();
}

void sub_23BEDBB60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v17 = MEMORY[0x242615198](&unk_23BFFEBA8, a1);
  v9[54] = a1;
  v9[52] = v17;
  v18 = sub_23BFF994C();
  v9[137] = v18;
  v9[4] = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v9[74] = (char *)&a9 - v19;
  v9[190] = v13;
  v9[191] = v10;
  v9[192] = v12;
  v9[193] = v14;
  v9[194] = v11;
  v9[195] = v15;
  type metadata accessor for CanvasItemContent.StandardCardCodingKeys();
}

void sub_23BEDBBE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v17 = MEMORY[0x242615198](&unk_23BFFEB58, a1);
  v9[49] = a1;
  v9[47] = v17;
  v18 = sub_23BFF994C();
  v9[136] = v18;
  v9[11] = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v9[59] = (char *)&a9 - v19;
  v9[190] = v13;
  v9[191] = v10;
  v9[192] = v12;
  v9[193] = v14;
  v9[194] = v11;
  v9[195] = v15;
  type metadata accessor for CanvasItemContent.SmallDynamicBrickCodingKeys();
}

void sub_23BEDBC68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v9[43] = MEMORY[0x242615198](&unk_23BFFEB08, a1);
  v9[44] = a1;
  v17 = sub_23BFF994C();
  v9[56] = v17;
  v9[10] = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v9[51] = (char *)&a9 - v18;
  v9[190] = v13;
  v9[191] = v10;
  v9[192] = v12;
  v9[193] = v14;
  v9[194] = v11;
  v9[195] = v15;
  type metadata accessor for CanvasItemContent.MonogramVerticalStackCodingKeys();
}

void sub_23BEDBCE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v9[37] = MEMORY[0x242615198](&unk_23BFFEAB8, a1);
  v9[38] = a1;
  v17 = sub_23BFF994C();
  v9[50] = v17;
  v9[7] = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v9[46] = (char *)&a9 - v18;
  v9[190] = v13;
  v9[191] = v10;
  v9[192] = v12;
  v9[193] = v14;
  v9[194] = v11;
  v9[195] = v15;
  type metadata accessor for CanvasItemContent.MediumDynamicBrickCodingKeys();
}

void sub_23BEDBD68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v9[33] = MEMORY[0x242615198](&unk_23BFFEA68, a1);
  v9[34] = a1;
  v17 = sub_23BFF994C();
  v9[48] = v17;
  v9[9] = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v9[45] = (char *)&a9 - v18;
  v9[190] = v13;
  v9[191] = v10;
  v9[192] = v12;
  v9[193] = v14;
  v9[194] = v11;
  v9[195] = v15;
  type metadata accessor for CanvasItemContent.LargeBrickCodingKeys();
}

void sub_23BEDBDE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v17 = MEMORY[0x242615198](&unk_23BFFEA18, a1);
  v9[32] = a1;
  v9[30] = v17;
  v18 = sub_23BFF994C();
  v9[41] = v18;
  v9[6] = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v9[40] = (char *)&a9 - v19;
  v9[190] = v13;
  v9[191] = v10;
  v9[192] = v12;
  v9[193] = v14;
  v9[194] = v11;
  v9[195] = v15;
  type metadata accessor for CanvasItemContent.InfoActionCardCodingKeys();
}

void sub_23BEDBE6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v9[27] = MEMORY[0x242615198](&unk_23BFFE9C8, a1);
  v9[28] = a1;
  v17 = sub_23BFF994C();
  v9[36] = v17;
  v9[5] = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v9[35] = (char *)&a9 - v18;
  v9[190] = v13;
  v9[191] = v10;
  v9[192] = v12;
  v9[193] = v14;
  v9[194] = v11;
  v9[195] = v15;
  type metadata accessor for CanvasItemContent.FullWidthStageCodingKeys();
}

void sub_23BEDBEEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v17 = MEMORY[0x242615198](&unk_23BFFE978, a1);
  v9[31] = a1;
  v9[29] = v17;
  v18 = sub_23BFF994C();
  v9[80] = v18;
  v9[3] = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v9[79] = (char *)&a9 - v19;
  v20 = sub_23BFF96A0();
  v9[125] = v20;
  v9[100] = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v9[83] = (char *)&a9 - v21;
  v9[190] = v13;
  v9[191] = v10;
  v9[192] = v12;
  v9[193] = v14;
  v9[194] = v11;
  v9[195] = v15;
  type metadata accessor for CanvasItemContent.FullWidthItemCodingKeys();
}

void sub_23BEDBFB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v17 = MEMORY[0x242615198](&unk_23BFFE928, a1);
  v9[20] = a1;
  v9[18] = v17;
  v18 = sub_23BFF994C();
  v9[24] = v18;
  v9[15] = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v9[22] = (char *)&a9 - v19;
  v21 = type metadata accessor for FullWidthItemDescriptor(0, v10, v11, v20);
  v9[23] = v21;
  v9[21] = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v9[19] = (char *)&a9 - v22;
  v9[190] = v13;
  v9[191] = v10;
  v9[192] = v12;
  v9[193] = v14;
  v9[194] = v11;
  v9[195] = v15;
  type metadata accessor for CanvasItemContent.ActionCardCodingKeys();
}

void sub_23BEDC078(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;

  v9[25] = MEMORY[0x242615198](&unk_23BFFE8D8, a1);
  v9[26] = a1;
  v17 = sub_23BFF994C();
  v9[42] = v17;
  v9[2] = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v9[39] = (char *)&a9 - v18;
  v19 = sub_23BFF96A0();
  v9[142] = v19;
  v9[140] = *(_QWORD *)(v19 - 8);
  v20 = MEMORY[0x24BDAC7A8](v19);
  v9[84] = (char *)&a9 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v20);
  v9[94] = (char *)&a9 - v23;
  v24 = MEMORY[0x24BDAC7A8](v22);
  v9[118] = (char *)&a9 - v25;
  v26 = MEMORY[0x24BDAC7A8](v24);
  v9[130] = (char *)&a9 - v27;
  v28 = MEMORY[0x24BDAC7A8](v26);
  v9[103] = (char *)&a9 - v29;
  v9[124] = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v9[116] = (char *)&a9 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3618);
  v9[145] = v31;
  v32 = MEMORY[0x24BDAC7A8](v31);
  v9[96] = (char *)&a9 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = MEMORY[0x24BDAC7A8](v32);
  v9[135] = (char *)&a9 - v35;
  v36 = MEMORY[0x24BDAC7A8](v34);
  v9[99] = (char *)&a9 - v37;
  v38 = MEMORY[0x24BDAC7A8](v36);
  v9[95] = (char *)&a9 - v39;
  v40 = MEMORY[0x24BDAC7A8](v38);
  v9[129] = (char *)&a9 - v41;
  v42 = MEMORY[0x24BDAC7A8](v40);
  v9[98] = (char *)&a9 - v43;
  v44 = MEMORY[0x24BDAC7A8](v42);
  v9[105] = (char *)&a9 - v45;
  v46 = MEMORY[0x24BDAC7A8](v44);
  v9[102] = (char *)&a9 - v47;
  v48 = MEMORY[0x24BDAC7A8](v46);
  v9[127] = (char *)&a9 - v49;
  v50 = MEMORY[0x24BDAC7A8](v48);
  v9[101] = (char *)&a9 - v51;
  v52 = MEMORY[0x24BDAC7A8](v50);
  v9[113] = (char *)&a9 - v53;
  v54 = MEMORY[0x24BDAC7A8](v52);
  v9[114] = (char *)&a9 - v55;
  v56 = MEMORY[0x24BDAC7A8](v54);
  v9[115] = (char *)&a9 - v57;
  v58 = MEMORY[0x24BDAC7A8](v56);
  v9[97] = (char *)&a9 - v59;
  v60 = MEMORY[0x24BDAC7A8](v58);
  v9[93] = (char *)&a9 - v61;
  v62 = MEMORY[0x24BDAC7A8](v60);
  v9[128] = (char *)&a9 - v63;
  v64 = MEMORY[0x24BDAC7A8](v62);
  v9[92] = (char *)&a9 - v65;
  v66 = MEMORY[0x24BDAC7A8](v64);
  v9[139] = (char *)&a9 - v67;
  v68 = MEMORY[0x24BDAC7A8](v66);
  v9[90] = (char *)&a9 - v69;
  v70 = MEMORY[0x24BDAC7A8](v68);
  v9[104] = (char *)&a9 - v71;
  v72 = MEMORY[0x24BDAC7A8](v70);
  v9[91] = (char *)&a9 - v73;
  v74 = MEMORY[0x24BDAC7A8](v72);
  v9[138] = (char *)&a9 - v75;
  v76 = MEMORY[0x24BDAC7A8](v74);
  v9[89] = (char *)&a9 - v77;
  v78 = MEMORY[0x24BDAC7A8](v76);
  v9[126] = (char *)&a9 - v79;
  v80 = MEMORY[0x24BDAC7A8](v78);
  v9[134] = (char *)&a9 - v81;
  v82 = MEMORY[0x24BDAC7A8](v80);
  v9[108] = (char *)&a9 - v83;
  v84 = MEMORY[0x24BDAC7A8](v82);
  v9[111] = (char *)&a9 - v85;
  v86 = MEMORY[0x24BDAC7A8](v84);
  v9[120] = (char *)&a9 - v87;
  v88 = MEMORY[0x24BDAC7A8](v86);
  v9[117] = (char *)&a9 - v89;
  v90 = MEMORY[0x24BDAC7A8](v88);
  v9[121] = (char *)&a9 - v91;
  v92 = MEMORY[0x24BDAC7A8](v90);
  v9[119] = (char *)&a9 - v93;
  v94 = MEMORY[0x24BDAC7A8](v92);
  v9[106] = (char *)&a9 - v95;
  v96 = MEMORY[0x24BDAC7A8](v94);
  v9[122] = (char *)&a9 - v97;
  v9[154] = *(_QWORD *)(v10 - 8);
  v98 = MEMORY[0x24BDAC7A8](v96);
  v9[88] = (char *)&a9 - ((v99 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = MEMORY[0x24BDAC7A8](v98);
  v9[112] = (char *)&a9 - v101;
  v102 = MEMORY[0x24BDAC7A8](v100);
  v9[17] = (char *)&a9 - v103;
  v104 = MEMORY[0x24BDAC7A8](v102);
  v9[110] = (char *)&a9 - v105;
  v106 = MEMORY[0x24BDAC7A8](v104);
  v9[132] = (char *)&a9 - v107;
  v108 = MEMORY[0x24BDAC7A8](v106);
  v9[109] = (char *)&a9 - v109;
  v110 = MEMORY[0x24BDAC7A8](v108);
  v9[87] = (char *)&a9 - v111;
  v112 = MEMORY[0x24BDAC7A8](v110);
  v9[107] = (char *)&a9 - v113;
  v114 = MEMORY[0x24BDAC7A8](v112);
  v9[86] = (char *)&a9 - v115;
  v116 = MEMORY[0x24BDAC7A8](v114);
  v9[85] = (char *)&a9 - v117;
  v118 = MEMORY[0x24BDAC7A8](v116);
  v9[133] = (char *)&a9 - v119;
  v120 = MEMORY[0x24BDAC7A8](v118);
  v9[123] = (char *)&a9 - v121;
  MEMORY[0x24BDAC7A8](v120);
  v9[131] = v13;
  v9[190] = v13;
  v9[150] = v10;
  v9[191] = v10;
  v9[81] = v12;
  v9[192] = v12;
  v9[1] = v14;
  v9[193] = v14;
  v9[144] = v11;
  v9[194] = v11;
  v9[82] = v15;
  v9[195] = v15;
  type metadata accessor for CanvasItemContent.CodingKeys();
}

uint64_t sub_23BEDC80C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int EnumCaseMultiPayload;

  MEMORY[0x242615198](&unk_23BFFE888, a1);
  v14 = sub_23BFF994C();
  *(_QWORD *)(v9 + 1224) = v14;
  *(_QWORD *)(v9 + 1168) = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&a9 - v15;
  __swift_project_boxed_opaque_existential_1(*(_QWORD **)(v9 + 1184), *(_QWORD *)(*(_QWORD *)(v9 + 1184) + 24));
  *(_QWORD *)(v13 - 72) = v16;
  sub_23BFF9A18();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v11 + 16))(v10, *(_QWORD *)(v9 + 1248), v12);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)(void))((char *)sub_23BEDC8D8 + 4 * word_23BFFD5A2[EnumCaseMultiPayload]))();
}

uint64_t sub_23BEDC8D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *TupleTypeMetadata;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, _QWORD);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  *(_QWORD *)(v1 + 1760) = *(_QWORD *)(v2 + 240);
  v4 = *(_OWORD *)(v2 + 208);
  *(_OWORD *)(v1 + 1712) = *(_OWORD *)(v2 + 192);
  *(_OWORD *)(v1 + 1728) = v4;
  *(_OWORD *)(v1 + 1744) = *(_OWORD *)(v2 + 224);
  v5 = *(_OWORD *)(v2 + 144);
  *(_OWORD *)(v1 + 1648) = *(_OWORD *)(v2 + 128);
  *(_OWORD *)(v1 + 1664) = v5;
  v6 = *(_OWORD *)(v2 + 176);
  *(_OWORD *)(v1 + 1680) = *(_OWORD *)(v2 + 160);
  *(_OWORD *)(v1 + 1696) = v6;
  v7 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(v1 + 1584) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(v1 + 1600) = v7;
  v8 = *(_OWORD *)(v2 + 112);
  *(_OWORD *)(v1 + 1616) = *(_OWORD *)(v2 + 96);
  *(_OWORD *)(v1 + 1632) = v8;
  v9 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v1 + 1520) = *(_OWORD *)v2;
  *(_OWORD *)(v1 + 1536) = v9;
  v10 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v1 + 1552) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v1 + 1568) = v10;
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v1 + 1264) = &type metadata for ActionCardViewLayout;
  v11 = *(_QWORD *)(v1 + 1200);
  *(_QWORD *)(v1 + 1272) = v11;
  *(_QWORD *)(v1 + 1280) = &type metadata for ActionCardViewStyle;
  v12 = *(_QWORD *)(v1 + 1160);
  *(_QWORD *)(v1 + 1288) = v12;
  *(_QWORD *)(v1 + 1296) = v12;
  *(_QWORD *)(v1 + 1304) = v12;
  v13 = *(_QWORD *)(v1 + 1048);
  *(_QWORD *)(v1 + 1312) = v13;
  v14 = *(_QWORD *)(v1 + 1136);
  *(_QWORD *)(v1 + 1320) = v14;
  TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  v16 = TupleTypeMetadata[12];
  *(_DWORD *)(v1 + 1184) = *(unsigned __int8 *)(v2 + TupleTypeMetadata[16]);
  v17 = v2 + v16;
  v18 = v2 + TupleTypeMetadata[20];
  v19 = v2 + TupleTypeMetadata[24];
  v20 = v2 + TupleTypeMetadata[28];
  v21 = v2 + TupleTypeMetadata[32];
  v22 = v2 + TupleTypeMetadata[36];
  (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v1 + 1232) + 32))(*(_QWORD *)(v1 + 984), v17, v11);
  sub_23BEBEF90(v18, *(_QWORD *)(v1 + 976));
  sub_23BEBEF90(v19, *(_QWORD *)(v1 + 848));
  sub_23BEBEF90(v20, *(_QWORD *)(v1 + 952));
  (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v1 + 992) + 32))(*(_QWORD *)(v1 + 928), v21, v13);
  v23 = *(_QWORD *)(v1 + 1120);
  v24 = *(_QWORD *)(v1 + 824);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 32))(v24, v22, v14);
  *(_BYTE *)(v1 + 1264) = 0;
  v25 = *(_QWORD *)(v1 + 312);
  v26 = *(_QWORD *)(v1 + 1224);
  v27 = *(_QWORD *)(v3 - 72);
  sub_23BFF98EC();
  v28 = *(_OWORD *)(v1 + 1728);
  *(_OWORD *)(v1 + 1456) = *(_OWORD *)(v1 + 1712);
  *(_OWORD *)(v1 + 1472) = v28;
  *(_OWORD *)(v1 + 1488) = *(_OWORD *)(v1 + 1744);
  *(_QWORD *)(v1 + 1504) = *(_QWORD *)(v1 + 1760);
  v29 = *(_OWORD *)(v1 + 1664);
  *(_OWORD *)(v1 + 1392) = *(_OWORD *)(v1 + 1648);
  *(_OWORD *)(v1 + 1408) = v29;
  v30 = *(_OWORD *)(v1 + 1696);
  *(_OWORD *)(v1 + 1424) = *(_OWORD *)(v1 + 1680);
  *(_OWORD *)(v1 + 1440) = v30;
  v31 = *(_OWORD *)(v1 + 1600);
  *(_OWORD *)(v1 + 1328) = *(_OWORD *)(v1 + 1584);
  *(_OWORD *)(v1 + 1344) = v31;
  v32 = *(_OWORD *)(v1 + 1632);
  *(_OWORD *)(v1 + 1360) = *(_OWORD *)(v1 + 1616);
  *(_OWORD *)(v1 + 1376) = v32;
  v33 = *(_OWORD *)(v1 + 1536);
  *(_OWORD *)(v1 + 1264) = *(_OWORD *)(v1 + 1520);
  *(_OWORD *)(v1 + 1280) = v33;
  v34 = *(_OWORD *)(v1 + 1568);
  *(_OWORD *)(v1 + 1296) = *(_OWORD *)(v1 + 1552);
  *(_OWORD *)(v1 + 1312) = v34;
  *(_BYTE *)(v3 - 129) = 0;
  sub_23BEC5D10();
  v35 = *(_QWORD *)(v1 + 336);
  v36 = *(_QWORD *)(v1 + 1176);
  sub_23BFF9940();
  if (v36)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 16) + 8))(v25, v35);
    (*(void (**)(uint64_t, _QWORD))(v23 + 8))(v24, *(_QWORD *)(v1 + 1136));
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 992) + 8))(*(_QWORD *)(v1 + 928), *(_QWORD *)(v1 + 1048));
    sub_23BE9F3A0(*(_QWORD *)(v1 + 952), &qword_256AE3618);
    sub_23BE9F3A0(*(_QWORD *)(v1 + 848), &qword_256AE3618);
    sub_23BE9F3A0(*(_QWORD *)(v1 + 976), &qword_256AE3618);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 1232) + 8))(*(_QWORD *)(v1 + 984), *(_QWORD *)(v1 + 1200));
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 1168) + 8))(v27, v26);
    *(_QWORD *)(v1 + 1248) = v36;
    return result;
  }
  v37 = *(_QWORD *)(v1 + 1048);
  *(_BYTE *)(v1 + 1264) = 1;
  v38 = *(_QWORD *)(v1 + 984);
  sub_23BFF9940();
  *(_QWORD *)(v1 + 1248) = 0;
  *(_BYTE *)(v1 + 1264) = *(_DWORD *)(v1 + 1184);
  *(_BYTE *)(v3 - 129) = 2;
  sub_23BEE05B0();
  v40 = *(_QWORD *)(v1 + 1248);
  sub_23BFF9940();
  v41 = *(_QWORD *)(v1 + 992);
  v42 = *(_QWORD *)(v1 + 824);
  v43 = *(_QWORD *)(v1 + 976);
  *(_QWORD *)(v1 + 1248) = v40;
  if (!v40)
  {
    *(_BYTE *)(v1 + 1264) = 3;
    sub_23BFF82CC();
    sub_23BEF247C(&qword_256AE4650, MEMORY[0x24BDCC5B8]);
    v46 = *(_QWORD *)(v1 + 1248);
    sub_23BFF9904();
    v47 = *(_QWORD *)(v1 + 1200);
    v48 = *(_QWORD *)(v1 + 1232);
    *(_QWORD *)(v1 + 1248) = v46;
    if (v46)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 16) + 8))(v25, v35);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 1120) + 8))(*(_QWORD *)(v1 + 824), *(_QWORD *)(v1 + 1136));
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 992) + 8))(*(_QWORD *)(v1 + 928), *(_QWORD *)(v1 + 1048));
      sub_23BE9F3A0(*(_QWORD *)(v1 + 952), &qword_256AE3618);
      sub_23BE9F3A0(*(_QWORD *)(v1 + 848), &qword_256AE3618);
      sub_23BE9F3A0(v43, &qword_256AE3618);
      (*(void (**)(_QWORD, uint64_t))(v48 + 8))(*(_QWORD *)(v1 + 984), v47);
LABEL_10:
      v44 = *(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 + 1168) + 8);
      v45 = *(_QWORD *)(v3 - 72);
      return v44(v45, *(_QWORD *)(v1 + 1224));
    }
    v49 = v47;
    *(_BYTE *)(v1 + 1264) = 4;
    v50 = *(_QWORD *)(v1 + 848);
    v51 = *(_QWORD *)(v1 + 1248);
    sub_23BFF9904();
    *(_QWORD *)(v1 + 1248) = v51;
    if (v51)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 16) + 8))(v25, v35);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 1120) + 8))(*(_QWORD *)(v1 + 824), *(_QWORD *)(v1 + 1136));
      v52 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 992) + 8);
      v53 = *(_QWORD *)(v1 + 928);
      v54 = *(_QWORD *)(v1 + 1048);
    }
    else
    {
      *(_BYTE *)(v1 + 1264) = 5;
      v56 = *(_QWORD *)(v1 + 952);
      v57 = *(_QWORD *)(v1 + 1248);
      sub_23BFF9904();
      *(_QWORD *)(v1 + 1248) = v57;
      if (v57)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 16) + 8))(v25, v35);
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 1120) + 8))(*(_QWORD *)(v1 + 824), *(_QWORD *)(v1 + 1136));
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 992) + 8))(*(_QWORD *)(v1 + 928), *(_QWORD *)(v1 + 1048));
        v55 = v56;
        goto LABEL_14;
      }
      *(_BYTE *)(v1 + 1264) = 6;
      v58 = *(_QWORD *)(v1 + 928);
      v59 = *(_QWORD *)(v1 + 1048);
      v60 = *(_QWORD *)(v1 + 1248);
      sub_23BFF9940();
      *(_QWORD *)(v1 + 1248) = v60;
      if (v60)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 16) + 8))(v25, v35);
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 1120) + 8))(*(_QWORD *)(v1 + 824), *(_QWORD *)(v1 + 1136));
        v52 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 992) + 8);
        v53 = v58;
      }
      else
      {
        *(_BYTE *)(v1 + 1264) = 7;
        v61 = *(_QWORD *)(v1 + 824);
        v62 = *(_QWORD *)(v1 + 1248);
        sub_23BFF9904();
        *(_QWORD *)(v1 + 1248) = v62;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 16) + 8))(v25, v35);
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 + 1120) + 8))(v61, *(_QWORD *)(v1 + 1136));
        v52 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 992) + 8);
        v53 = *(_QWORD *)(v1 + 928);
      }
      v54 = v59;
    }
    v52(v53, v54);
    v55 = *(_QWORD *)(v1 + 952);
LABEL_14:
    sub_23BE9F3A0(v55, &qword_256AE3618);
    sub_23BE9F3A0(v50, &qword_256AE3618);
    sub_23BE9F3A0(*(_QWORD *)(v1 + 976), &qword_256AE3618);
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v1 + 1232) + 8))(*(_QWORD *)(v1 + 984), v49);
    goto LABEL_10;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 16) + 8))(v25, v35);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 + 1120) + 8))(v42, *(_QWORD *)(v1 + 1136));
  (*(void (**)(_QWORD, uint64_t))(v41 + 8))(*(_QWORD *)(v1 + 928), v37);
  sub_23BE9F3A0(*(_QWORD *)(v1 + 952), &qword_256AE3618);
  sub_23BE9F3A0(*(_QWORD *)(v1 + 848), &qword_256AE3618);
  sub_23BE9F3A0(v43, &qword_256AE3618);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 + 1232) + 8))(v38, *(_QWORD *)(v1 + 1200));
  v44 = *(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 + 1168) + 8);
  v45 = v27;
  return v44(v45, *(_QWORD *)(v1 + 1224));
}

void type metadata accessor for CanvasItemContent.WideBrickCodingKeys()
{
  JUMPOUT(0x2426150F0);
}

void type metadata accessor for CanvasItemContent.ViewBuilderCodingKeys()
{
  JUMPOUT(0x2426150F0);
}

void type metadata accessor for CanvasItemContent.VerticalStackCardCodingKeys()
{
  JUMPOUT(0x2426150F0);
}

void type metadata accessor for CanvasItemContent.TallCardCodingKeys()
{
  JUMPOUT(0x2426150F0);
}

void type metadata accessor for CanvasItemContent.StandardVerticalStackCodingKeys()
{
  JUMPOUT(0x2426150F0);
}

void type metadata accessor for CanvasItemContent.StandardHorizontalStackCodingKeys()
{
  JUMPOUT(0x2426150F0);
}

void type metadata accessor for CanvasItemContent.StandardCardCodingKeys()
{
  JUMPOUT(0x2426150F0);
}

void type metadata accessor for CanvasItemContent.SmallDynamicBrickCodingKeys()
{
  JUMPOUT(0x2426150F0);
}

void type metadata accessor for CanvasItemContent.MonogramVerticalStackCodingKeys()
{
  JUMPOUT(0x2426150F0);
}

void type metadata accessor for CanvasItemContent.MediumDynamicBrickCodingKeys()
{
  JUMPOUT(0x2426150F0);
}

void type metadata accessor for CanvasItemContent.LargeBrickCodingKeys()
{
  JUMPOUT(0x2426150F0);
}

void type metadata accessor for CanvasItemContent.InfoActionCardCodingKeys()
{
  JUMPOUT(0x2426150F0);
}

void type metadata accessor for CanvasItemContent.FullWidthStageCodingKeys()
{
  JUMPOUT(0x2426150F0);
}

void type metadata accessor for CanvasItemContent.FullWidthItemCodingKeys()
{
  JUMPOUT(0x2426150F0);
}

void type metadata accessor for CanvasItemContent.ActionCardCodingKeys()
{
  JUMPOUT(0x2426150F0);
}

void type metadata accessor for CanvasItemContent.CodingKeys()
{
  JUMPOUT(0x2426150F0);
}

unint64_t sub_23BEE04E4()
{
  unint64_t result;

  result = qword_256AE4658;
  if (!qword_256AE4658)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for Overlay, &type metadata for Overlay);
    atomic_store(result, (unint64_t *)&qword_256AE4658);
  }
  return result;
}

unint64_t sub_23BEE0528()
{
  unint64_t result;

  result = qword_256AE4660;
  if (!qword_256AE4660)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for DynamicBrickDisplayStyle, &type metadata for DynamicBrickDisplayStyle);
    atomic_store(result, (unint64_t *)&qword_256AE4660);
  }
  return result;
}

unint64_t sub_23BEE056C()
{
  unint64_t result;

  result = qword_256AE4668;
  if (!qword_256AE4668)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for FullWidthStageViewStyle, &type metadata for FullWidthStageViewStyle);
    atomic_store(result, (unint64_t *)&qword_256AE4668);
  }
  return result;
}

unint64_t sub_23BEE05B0()
{
  unint64_t result;

  result = qword_256AE4670;
  if (!qword_256AE4670)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for ActionCardViewStyle, &type metadata for ActionCardViewStyle);
    atomic_store(result, (unint64_t *)&qword_256AE4670);
  }
  return result;
}

void CanvasItemContent.init(from:)()
{
  type metadata accessor for CanvasItemContent.WideBrickCodingKeys();
}

void sub_23BEE0654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v17 = MEMORY[0x242615198](&unk_23BFFED38, a1);
  *(_QWORD *)(v15 - 320) = a1;
  *(_QWORD *)(v15 - 328) = v17;
  v18 = sub_23BFF98E0();
  *(_QWORD *)(v15 - 888) = v18;
  *(_QWORD *)(v15 - 896) = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  *(_QWORD *)(v15 - 552) = (char *)&a9 - v19;
  *(_QWORD *)(v15 - 208) = v14;
  *(_QWORD *)(v15 - 200) = v12;
  *(_QWORD *)(v15 - 192) = v10;
  *(_QWORD *)(v15 - 184) = v13;
  *(_QWORD *)(v15 - 176) = v9;
  *(_QWORD *)(v15 - 168) = v11;
  type metadata accessor for CanvasItemContent.ViewBuilderCodingKeys();
}

void sub_23BEE06E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v17 = MEMORY[0x242615198](&unk_23BFFECE8, a1);
  *(_QWORD *)(v15 - 336) = a1;
  *(_QWORD *)(v15 - 344) = v17;
  v18 = sub_23BFF98E0();
  *(_QWORD *)(v15 - 920) = v18;
  *(_QWORD *)(v15 - 1016) = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  *(_QWORD *)(v15 - 568) = (char *)&a9 - v19;
  *(_QWORD *)(v15 - 208) = v14;
  *(_QWORD *)(v15 - 200) = v12;
  *(_QWORD *)(v15 - 192) = v10;
  *(_QWORD *)(v15 - 184) = v13;
  *(_QWORD *)(v15 - 176) = v9;
  *(_QWORD *)(v15 - 168) = v11;
  type metadata accessor for CanvasItemContent.VerticalStackCardCodingKeys();
}

void sub_23BEE076C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v17 = MEMORY[0x242615198](&unk_23BFFEC98, a1);
  *(_QWORD *)(v15 - 352) = a1;
  *(_QWORD *)(v15 - 360) = v17;
  v18 = sub_23BFF98E0();
  *(_QWORD *)(v15 - 696) = v18;
  *(_QWORD *)(v15 - 880) = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  *(_QWORD *)(v15 - 528) = (char *)&a9 - v19;
  *(_QWORD *)(v15 - 208) = v14;
  *(_QWORD *)(v15 - 200) = v12;
  *(_QWORD *)(v15 - 192) = v10;
  *(_QWORD *)(v15 - 184) = v13;
  *(_QWORD *)(v15 - 176) = v9;
  *(_QWORD *)(v15 - 168) = v11;
  type metadata accessor for CanvasItemContent.TallCardCodingKeys();
}

void sub_23BEE07F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v17 = MEMORY[0x242615198](&unk_23BFFEC48, a1);
  *(_QWORD *)(v15 - 368) = a1;
  *(_QWORD *)(v15 - 376) = v17;
  v18 = sub_23BFF98E0();
  *(_QWORD *)(v15 - 736) = v18;
  *(_QWORD *)(v15 - 904) = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  *(_QWORD *)(v15 - 560) = (char *)&a9 - v19;
  *(_QWORD *)(v15 - 208) = v14;
  *(_QWORD *)(v15 - 200) = v12;
  *(_QWORD *)(v15 - 192) = v10;
  *(_QWORD *)(v15 - 184) = v13;
  *(_QWORD *)(v15 - 176) = v9;
  *(_QWORD *)(v15 - 168) = v11;
  type metadata accessor for CanvasItemContent.StandardVerticalStackCodingKeys();
}

void sub_23BEE0884(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v17 = MEMORY[0x242615198](&unk_23BFFEBF8, a1);
  *(_QWORD *)(v15 - 384) = a1;
  *(_QWORD *)(v15 - 392) = v17;
  v18 = sub_23BFF98E0();
  *(_QWORD *)(v15 - 704) = v18;
  *(_QWORD *)(v15 - 912) = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  *(_QWORD *)(v15 - 536) = (char *)&a9 - v19;
  *(_QWORD *)(v15 - 208) = v14;
  *(_QWORD *)(v15 - 200) = v12;
  *(_QWORD *)(v15 - 192) = v10;
  *(_QWORD *)(v15 - 184) = v13;
  *(_QWORD *)(v15 - 176) = v9;
  *(_QWORD *)(v15 - 168) = v11;
  type metadata accessor for CanvasItemContent.StandardHorizontalStackCodingKeys();
}

void sub_23BEE0910(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v17 = MEMORY[0x242615198](&unk_23BFFEBA8, a1);
  *(_QWORD *)(v15 - 400) = a1;
  *(_QWORD *)(v15 - 408) = v17;
  v18 = sub_23BFF98E0();
  *(_QWORD *)(v15 - 800) = v18;
  *(_QWORD *)(v15 - 1008) = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  *(_QWORD *)(v15 - 520) = (char *)&a9 - v19;
  *(_QWORD *)(v15 - 208) = v14;
  *(_QWORD *)(v15 - 200) = v12;
  *(_QWORD *)(v15 - 192) = v10;
  *(_QWORD *)(v15 - 184) = v13;
  *(_QWORD *)(v15 - 176) = v9;
  *(_QWORD *)(v15 - 168) = v11;
  type metadata accessor for CanvasItemContent.StandardCardCodingKeys();
}

void sub_23BEE099C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v17 = MEMORY[0x242615198](&unk_23BFFEB58, a1);
  *(_QWORD *)(v15 - 416) = a1;
  *(_QWORD *)(v15 - 424) = v17;
  v18 = sub_23BFF98E0();
  *(_QWORD *)(v15 - 712) = v18;
  *(_QWORD *)(v15 - 928) = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  *(_QWORD *)(v15 - 544) = (char *)&a9 - v19;
  *(_QWORD *)(v15 - 208) = v14;
  *(_QWORD *)(v15 - 200) = v12;
  *(_QWORD *)(v15 - 192) = v10;
  *(_QWORD *)(v15 - 184) = v13;
  *(_QWORD *)(v15 - 176) = v9;
  *(_QWORD *)(v15 - 168) = v11;
  type metadata accessor for CanvasItemContent.SmallDynamicBrickCodingKeys();
}

void sub_23BEE0A28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v17 = MEMORY[0x242615198](&unk_23BFFEB08, a1);
  *(_QWORD *)(v15 - 432) = a1;
  *(_QWORD *)(v15 - 440) = v17;
  v18 = sub_23BFF98E0();
  *(_QWORD *)(v15 - 808) = v18;
  *(_QWORD *)(v15 - 936) = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  *(_QWORD *)(v15 - 488) = (char *)&a9 - v19;
  *(_QWORD *)(v15 - 208) = v14;
  *(_QWORD *)(v15 - 200) = v12;
  *(_QWORD *)(v15 - 192) = v10;
  *(_QWORD *)(v15 - 184) = v13;
  *(_QWORD *)(v15 - 176) = v9;
  *(_QWORD *)(v15 - 168) = v11;
  type metadata accessor for CanvasItemContent.MonogramVerticalStackCodingKeys();
}

void sub_23BEE0AB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v17 = MEMORY[0x242615198](&unk_23BFFEAB8, a1);
  *(_QWORD *)(v15 - 448) = a1;
  *(_QWORD *)(v15 - 456) = v17;
  v18 = sub_23BFF98E0();
  *(_QWORD *)(v15 - 744) = v18;
  *(_QWORD *)(v15 - 944) = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  *(_QWORD *)(v15 - 576) = (char *)&a9 - v19;
  *(_QWORD *)(v15 - 208) = v14;
  *(_QWORD *)(v15 - 200) = v12;
  *(_QWORD *)(v15 - 192) = v10;
  *(_QWORD *)(v15 - 184) = v13;
  *(_QWORD *)(v15 - 176) = v9;
  *(_QWORD *)(v15 - 168) = v11;
  type metadata accessor for CanvasItemContent.MediumDynamicBrickCodingKeys();
}

void sub_23BEE0B40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v17 = MEMORY[0x242615198](&unk_23BFFEA68, a1);
  *(_QWORD *)(v15 - 464) = a1;
  *(_QWORD *)(v15 - 600) = v17;
  v18 = sub_23BFF98E0();
  *(_QWORD *)(v15 - 824) = v18;
  *(_QWORD *)(v15 - 952) = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  *(_QWORD *)(v15 - 496) = (char *)&a9 - v19;
  *(_QWORD *)(v15 - 208) = v14;
  *(_QWORD *)(v15 - 200) = v12;
  *(_QWORD *)(v15 - 192) = v10;
  *(_QWORD *)(v15 - 184) = v13;
  *(_QWORD *)(v15 - 176) = v9;
  *(_QWORD *)(v15 - 168) = v11;
  type metadata accessor for CanvasItemContent.LargeBrickCodingKeys();
}

void sub_23BEE0BCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v17 = MEMORY[0x242615198](&unk_23BFFEA18, a1);
  *(_QWORD *)(v15 - 472) = a1;
  *(_QWORD *)(v15 - 608) = v17;
  v18 = sub_23BFF98E0();
  *(_QWORD *)(v15 - 960) = v18;
  *(_QWORD *)(v15 - 968) = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  *(_QWORD *)(v15 - 584) = (char *)&a9 - v19;
  *(_QWORD *)(v15 - 208) = v14;
  *(_QWORD *)(v15 - 200) = v12;
  *(_QWORD *)(v15 - 192) = v10;
  *(_QWORD *)(v15 - 184) = v13;
  *(_QWORD *)(v15 - 176) = v9;
  *(_QWORD *)(v15 - 168) = v11;
  type metadata accessor for CanvasItemContent.InfoActionCardCodingKeys();
}

void sub_23BEE0C58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v17 = MEMORY[0x242615198](&unk_23BFFE9C8, a1);
  *(_QWORD *)(v15 - 616) = a1;
  *(_QWORD *)(v15 - 624) = v17;
  v18 = sub_23BFF98E0();
  *(_QWORD *)(v15 - 752) = v18;
  *(_QWORD *)(v15 - 984) = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  *(_QWORD *)(v15 - 592) = (char *)&a9 - v19;
  *(_QWORD *)(v15 - 208) = v14;
  *(_QWORD *)(v15 - 200) = v12;
  *(_QWORD *)(v15 - 192) = v10;
  *(_QWORD *)(v15 - 184) = v13;
  *(_QWORD *)(v15 - 176) = v9;
  *(_QWORD *)(v15 - 168) = v11;
  type metadata accessor for CanvasItemContent.FullWidthStageCodingKeys();
}

void sub_23BEE0CE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v17 = MEMORY[0x242615198](&unk_23BFFE978, a1);
  *(_QWORD *)(v15 - 632) = a1;
  *(_QWORD *)(v15 - 640) = v17;
  v18 = sub_23BFF98E0();
  *(_QWORD *)(v15 - 784) = v18;
  *(_QWORD *)(v15 - 816) = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  *(_QWORD *)(v15 - 504) = (char *)&a9 - v19;
  *(_QWORD *)(v15 - 208) = v14;
  *(_QWORD *)(v15 - 200) = v12;
  *(_QWORD *)(v15 - 192) = v10;
  *(_QWORD *)(v15 - 184) = v13;
  *(_QWORD *)(v15 - 176) = v9;
  *(_QWORD *)(v15 - 168) = v11;
  type metadata accessor for CanvasItemContent.FullWidthItemCodingKeys();
}

void sub_23BEE0D70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v17 = MEMORY[0x242615198](&unk_23BFFE928, a1);
  *(_QWORD *)(v15 - 656) = a1;
  *(_QWORD *)(v15 - 664) = v17;
  v18 = sub_23BFF98E0();
  *(_QWORD *)(v15 - 992) = v18;
  *(_QWORD *)(v15 - 1024) = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  *(_QWORD *)(v15 - 648) = (char *)&a9 - v19;
  *(_QWORD *)(v15 - 208) = v14;
  *(_QWORD *)(v15 - 200) = v12;
  *(_QWORD *)(v15 - 192) = v10;
  *(_QWORD *)(v15 - 184) = v13;
  *(_QWORD *)(v15 - 176) = v9;
  *(_QWORD *)(v15 - 168) = v11;
  type metadata accessor for CanvasItemContent.ActionCardCodingKeys();
}

void sub_23BEE0DFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v17 = MEMORY[0x242615198](&unk_23BFFE8D8, a1);
  *(_QWORD *)(v15 - 672) = a1;
  *(_QWORD *)(v15 - 680) = v17;
  v18 = sub_23BFF98E0();
  *(_QWORD *)(v15 - 792) = v18;
  *(_QWORD *)(v15 - 976) = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  *(_QWORD *)(v15 - 512) = (char *)&a9 - v19;
  *(_QWORD *)(v15 - 208) = v14;
  *(_QWORD *)(v15 - 200) = v12;
  *(_QWORD *)(v15 - 192) = v10;
  *(_QWORD *)(v15 - 184) = v13;
  *(_QWORD *)(v15 - 176) = v9;
  *(_QWORD *)(v15 - 168) = v11;
  type metadata accessor for CanvasItemContent.CodingKeys();
}

void sub_23BEE0E88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v15 - 240) = MEMORY[0x242615198](&unk_23BFFE888, a1);
  v16 = sub_23BFF98E0();
  *(_QWORD *)(v15 - 256) = *(_QWORD *)(v16 - 8);
  *(_QWORD *)(v15 - 248) = v16;
  MEMORY[0x24BDAC7A8](v16);
  *(_QWORD *)(v15 - 216) = (char *)&a9 - v17;
  *(_QWORD *)(v15 - 208) = v14;
  *(_QWORD *)(v15 - 688) = v14;
  *(_QWORD *)(v15 - 480) = v12;
  *(_QWORD *)(v15 - 200) = v12;
  *(_QWORD *)(v15 - 192) = v10;
  *(_QWORD *)(v15 - 720) = v10;
  *(_QWORD *)(v15 - 312) = v13;
  *(_QWORD *)(v15 - 184) = v13;
  *(_QWORD *)(v15 - 176) = v9;
  *(_QWORD *)(v15 - 264) = v9;
  *(_QWORD *)(v15 - 872) = v11;
  *(_QWORD *)(v15 - 168) = v11;
  type metadata accessor for CanvasItemContent();
}

uint64_t sub_23BEE0F28(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  _BYTE *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t TupleTypeMetadata;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t, uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _BYTE v162[96];

  *(_QWORD *)(v3 - 296) = a1;
  *(_QWORD *)(v3 - 304) = *(_QWORD *)(a1 - 8);
  v4 = MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v3 - 728) = &v162[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = MEMORY[0x24BDAC7A8](v4);
  *(_QWORD *)(v3 - 1000) = &v162[-v7];
  v8 = MEMORY[0x24BDAC7A8](v6);
  *(_QWORD *)(v3 - 848) = &v162[-v9];
  v10 = MEMORY[0x24BDAC7A8](v8);
  *(_QWORD *)(v3 - 768) = &v162[-v11];
  v12 = MEMORY[0x24BDAC7A8](v10);
  *(_QWORD *)(v3 - 856) = &v162[-v13];
  v14 = MEMORY[0x24BDAC7A8](v12);
  *(_QWORD *)(v3 - 760) = &v162[-v15];
  v16 = MEMORY[0x24BDAC7A8](v14);
  *(_QWORD *)(v3 - 864) = &v162[-v17];
  v18 = MEMORY[0x24BDAC7A8](v16);
  *(_QWORD *)(v3 - 832) = &v162[-v19];
  v20 = MEMORY[0x24BDAC7A8](v18);
  *(_QWORD *)(v3 - 776) = &v162[-v21];
  v22 = MEMORY[0x24BDAC7A8](v20);
  *(_QWORD *)(v3 - 840) = &v162[-v23];
  v24 = MEMORY[0x24BDAC7A8](v22);
  v26 = &v162[-v25];
  v27 = MEMORY[0x24BDAC7A8](v24);
  v29 = &v162[-v28];
  v30 = MEMORY[0x24BDAC7A8](v27);
  v32 = &v162[-v31];
  v33 = MEMORY[0x24BDAC7A8](v30);
  v35 = &v162[-v34];
  v36 = MEMORY[0x24BDAC7A8](v33);
  v38 = &v162[-v37];
  MEMORY[0x24BDAC7A8](v36);
  v40 = &v162[-v39];
  v41 = v2;
  v42 = v2[3];
  *(_QWORD *)(v3 - 224) = v41;
  __swift_project_boxed_opaque_existential_1(v41, v42);
  *(_QWORD *)(v3 - 288) = v1;
  v43 = *(_QWORD *)(v3 - 232);
  sub_23BFF9A0C();
  if (v43)
    goto LABEL_37;
  *(_QWORD *)(v3 - 1064) = v35;
  *(_QWORD *)(v3 - 1048) = v29;
  *(_QWORD *)(v3 - 1056) = v26;
  *(_QWORD *)(v3 - 1040) = v38;
  *(_QWORD *)(v3 - 240) = v32;
  v44 = *(_QWORD *)(v3 - 264);
  *(_QWORD *)(v3 - 1072) = v40;
  *(_QWORD *)(v3 - 232) = 0;
  v45 = *(_QWORD *)(v3 - 248);
  *(_QWORD *)(v3 - 208) = sub_23BFF98D4();
  v46 = sub_23BFF94C0();
  MEMORY[0x242615198](MEMORY[0x24BEE12C8], v46);
  *(_QWORD *)(v3 - 128) = sub_23BFF96DC();
  *(_QWORD *)(v3 - 120) = v47;
  *(_QWORD *)(v3 - 112) = v48;
  *(_QWORD *)(v3 - 104) = v49;
  v50 = sub_23BFF96D0();
  MEMORY[0x242615198](MEMORY[0x24BEE2190], v50);
  sub_23BFF9634();
  v51 = *(unsigned __int8 *)(v3 - 208);
  v53 = *(_OWORD *)(v3 - 128);
  v52 = *(_OWORD *)(v3 - 112);
  *(_OWORD *)(v3 - 288) = v53;
  *(_OWORD *)(v3 - 208) = v53;
  *(_OWORD *)(v3 - 192) = v52;
  if ((sub_23BFF964C() & 1) == 0)
  {
LABEL_6:
    v61 = sub_23BFF9784();
    swift_allocError();
    v63 = v62;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3978);
    *v63 = *(_QWORD *)(v3 - 296);
    v64 = *(_QWORD *)(v3 - 216);
    sub_23BFF9874();
    sub_23BFF9778();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v61 - 8) + 104))(v63, *MEMORY[0x24BEE26D0], v61);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 256) + 8))(v64, v45);
LABEL_37:
    v143 = *(_QWORD *)(v3 - 224);
    return __swift_destroy_boxed_opaque_existential_1(v143);
  }
  v54 = *(_QWORD *)(v3 - 232);
  v55 = *(_QWORD *)(v3 - 216);
  v56 = *(_QWORD *)(v3 - 304);
  switch(v51)
  {
    case 0:
      *(_BYTE *)(v3 - 208) = 0;
      sub_23BFF9868();
      if (v54)
        goto LABEL_34;
      *(_BYTE *)(v3 - 65) = 0;
      sub_23BEC7200();
      v57 = sub_23BFF98C8();
      *(_QWORD *)(v3 - 232) = v162;
      MEMORY[0x24BDAC7A8](v57);
      strcpy(&v162[-96], "layout artwork style title subtitle caption primaryActionButton secondaryActionButton ");
      *(_QWORD *)(v3 - 208) = &type metadata for ActionCardViewLayout;
      *(_QWORD *)(v3 - 200) = *(_QWORD *)(v3 - 480);
      *(_QWORD *)(v3 - 192) = &type metadata for ActionCardViewStyle;
      v58 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3618);
      *(_QWORD *)(v3 - 184) = v58;
      *(_QWORD *)(v3 - 176) = v58;
      v59 = *(_QWORD *)(v3 - 688);
      *(_QWORD *)(v3 - 168) = v58;
      *(_QWORD *)(v3 - 160) = v59;
      *(_QWORD *)(v3 - 152) = sub_23BFF96A0();
      TupleTypeMetadata = swift_getTupleTypeMetadata();
      *(_BYTE *)(v3 - 208) = 1;
      sub_23BFF98C8();
      *(_BYTE *)(v3 - 208) = 2;
      sub_23BEE4C70();
      sub_23BFF98C8();
      sub_23BFF82CC();
      *(_BYTE *)(v3 - 208) = 3;
      sub_23BEF247C(&qword_256AE4678, MEMORY[0x24BDCC5D0]);
      sub_23BFF988C();
      v156 = *(_QWORD *)(v3 - 1040) + *(int *)(TupleTypeMetadata + 96);
      *(_BYTE *)(v3 - 208) = 4;
      *(_QWORD *)(v3 - 232) = v156;
      sub_23BFF988C();
      *(_BYTE *)(v3 - 208) = 5;
      sub_23BFF988C();
      *(_BYTE *)(v3 - 208) = 6;
      sub_23BFF98C8();
      *(_BYTE *)(v3 - 208) = 7;
      sub_23BFF988C();
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v3 - 976) + 8))(*(_QWORD *)(v3 - 512), *(_QWORD *)(v3 - 792));
      swift_unknownObjectRelease();
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v3 - 256) + 8))(*(_QWORD *)(v3 - 216), v45);
      v160 = *(_QWORD *)(v3 - 1040);
      v161 = *(_QWORD *)(v3 - 296);
      goto LABEL_42;
    case 1:
      *(_BYTE *)(v3 - 208) = 1;
      v65 = *(_QWORD *)(v3 - 648);
      sub_23BFF9868();
      if (v54)
        goto LABEL_34;
      v67 = type metadata accessor for FullWidthItemDescriptor(0, *(_QWORD *)(v3 - 480), v44, v66);
      MEMORY[0x242615198](&protocol conformance descriptor for FullWidthItemDescriptor<A>, v67);
      v68 = *(_QWORD *)(v3 - 1064);
      v69 = *(_QWORD *)(v3 - 992);
      sub_23BFF98C8();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 1024) + 8))(v65, v69);
      swift_unknownObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 256) + 8))(v55, v45);
      v161 = *(_QWORD *)(v3 - 296);
      swift_storeEnumTagMultiPayload();
      v70 = *(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 32);
      v71 = v68;
      v72 = *(_QWORD *)(v3 - 1072);
      v70(v72, v71, v161);
      goto LABEL_39;
    case 2:
      *(_BYTE *)(v3 - 208) = 2;
      sub_23BFF9868();
      if (v54)
        goto LABEL_34;
      *(_BYTE *)(v3 - 65) = 0;
      sub_23BEC71BC();
      v73 = *(_QWORD *)(v3 - 240);
      v74 = sub_23BFF98C8();
      *(_QWORD *)(v3 - 232) = v162;
      MEMORY[0x24BDAC7A8](v74);
      strcpy(&v162[-112], "layout artwork style title subtitle caption primaryActionButton secondaryActionButton customView ");
      *(_QWORD *)(v3 - 208) = &type metadata for FullWidthStageViewLayout;
      *(_QWORD *)(v3 - 200) = *(_QWORD *)(v3 - 480);
      *(_QWORD *)(v3 - 192) = &type metadata for FullWidthStageViewStyle;
      v110 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3618);
      *(_QWORD *)(v3 - 184) = v110;
      *(_QWORD *)(v3 - 176) = v110;
      *(_QWORD *)(v3 - 168) = v110;
      v111 = sub_23BFF96A0();
      *(_QWORD *)(v3 - 160) = v111;
      *(_QWORD *)(v3 - 152) = v111;
      *(_QWORD *)(v3 - 144) = sub_23BFF96A0();
      v112 = swift_getTupleTypeMetadata();
      v113 = v73 + *(int *)(v112 + 48);
      *(_BYTE *)(v3 - 208) = 1;
      v114 = v113;
      sub_23BFF98C8();
      *(_QWORD *)(v3 - 232) = v114;
      *(_BYTE *)(v3 - 208) = 2;
      sub_23BEE4C2C();
      sub_23BFF98C8();
      v152 = v73 + *(int *)(v112 + 80);
      sub_23BFF82CC();
      *(_BYTE *)(v3 - 208) = 3;
      v153 = sub_23BEF247C(&qword_256AE4678, MEMORY[0x24BDCC5D0]);
      *(_QWORD *)(v3 - 288) = v152;
      *(_QWORD *)(v3 - 264) = v153;
      sub_23BFF988C();
      *(_BYTE *)(v3 - 208) = 4;
      sub_23BFF988C();
      *(_BYTE *)(v3 - 208) = 5;
      sub_23BFF988C();
      *(_BYTE *)(v3 - 208) = 6;
      sub_23BFF988C();
      *(_BYTE *)(v3 - 208) = 7;
      sub_23BFF988C();
      *(_BYTE *)(v3 - 208) = 8;
      sub_23BFF988C();
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v3 - 816) + 8))(*(_QWORD *)(v3 - 504), *(_QWORD *)(v3 - 784));
      swift_unknownObjectRelease();
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v3 - 256) + 8))(*(_QWORD *)(v3 - 216), v45);
      v160 = *(_QWORD *)(v3 - 240);
      v161 = *(_QWORD *)(v3 - 296);
      goto LABEL_42;
    case 3:
      *(_BYTE *)(v3 - 208) = 3;
      v75 = *(_QWORD *)(v3 - 592);
      sub_23BFF9868();
      if (v54)
        goto LABEL_34;
      *(_BYTE *)(v3 - 65) = 0;
      sub_23BEC7178();
      v76 = sub_23BFF98C8();
      MEMORY[0x24BDAC7A8](v76);
      strcpy(&v162[-48], "layout title description actionButton ");
      *(_QWORD *)(v3 - 208) = &type metadata for InfoActionCardViewLayout;
      v115 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3618);
      *(_QWORD *)(v3 - 200) = v115;
      *(_QWORD *)(v3 - 192) = v115;
      *(_QWORD *)(v3 - 184) = sub_23BFF96A0();
      v116 = swift_getTupleTypeMetadata();
      v117 = *(_QWORD *)(v3 - 752);
      sub_23BFF82CC();
      *(_BYTE *)(v3 - 208) = 1;
      sub_23BEF247C(&qword_256AE4678, MEMORY[0x24BDCC5D0]);
      sub_23BFF988C();
      v148 = *(_QWORD *)(v3 - 1048) + *(int *)(v116 + 64);
      *(_BYTE *)(v3 - 208) = 2;
      *(_QWORD *)(v3 - 232) = v148;
      sub_23BFF988C();
      *(_BYTE *)(v3 - 208) = 3;
      sub_23BFF988C();
      v154 = *(_QWORD *)(v3 - 216);
      v155 = *(_QWORD *)(v3 - 256);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 984) + 8))(v75, v117);
      swift_unknownObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v155 + 8))(v154, v45);
      v160 = *(_QWORD *)(v3 - 1048);
      v161 = *(_QWORD *)(v3 - 296);
      goto LABEL_42;
    case 4:
      *(_BYTE *)(v3 - 208) = 4;
      v77 = *(_QWORD *)(v3 - 584);
      sub_23BFF9868();
      if (v54)
        goto LABEL_34;
      *(_BYTE *)(v3 - 65) = 0;
      v78 = *(_QWORD *)(v3 - 1056);
      v79 = *(_QWORD *)(v3 - 480);
      v80 = *(_QWORD *)(v3 - 960);
      v81 = sub_23BFF98C8();
      MEMORY[0x24BDAC7A8](v81);
      strcpy(&v162[-48], "artwork footnote subtitle title ");
      *(_QWORD *)(v3 - 208) = v79;
      v118 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3618);
      *(_QWORD *)(v3 - 200) = v118;
      *(_QWORD *)(v3 - 192) = v118;
      *(_QWORD *)(v3 - 184) = v118;
      v119 = swift_getTupleTypeMetadata();
      sub_23BFF82CC();
      *(_BYTE *)(v3 - 208) = 1;
      sub_23BEF247C(&qword_256AE4678, MEMORY[0x24BDCC5D0]);
      sub_23BFF988C();
      v149 = v78 + *(int *)(v119 + 64);
      *(_BYTE *)(v3 - 208) = 2;
      *(_QWORD *)(v3 - 232) = v149;
      sub_23BFF988C();
      *(_BYTE *)(v3 - 208) = 3;
      sub_23BFF988C();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 968) + 8))(v77, v80);
      swift_unknownObjectRelease();
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v3 - 256) + 8))(*(_QWORD *)(v3 - 216), *(_QWORD *)(v3 - 248));
      v161 = *(_QWORD *)(v3 - 296);
      goto LABEL_41;
    case 5:
      *(_BYTE *)(v3 - 208) = 5;
      sub_23BFF9868();
      if (v54)
        goto LABEL_34;
      *(_BYTE *)(v3 - 65) = 0;
      v82 = *(_QWORD *)(v3 - 840);
      v83 = *(_QWORD *)(v3 - 480);
      v84 = sub_23BFF98C8();
      MEMORY[0x24BDAC7A8](v84);
      strcpy(&v162[-48], "artwork caption displayStyle layout title ");
      *(_QWORD *)(v3 - 208) = v83;
      v120 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3618);
      *(_QWORD *)(v3 - 200) = v120;
      *(_QWORD *)(v3 - 192) = &type metadata for DynamicBrickDisplayStyle;
      *(_QWORD *)(v3 - 184) = &type metadata for DynamicBrickViewLayout;
      *(_QWORD *)(v3 - 176) = v120;
      v121 = swift_getTupleTypeMetadata();
      *(_QWORD *)(v3 - 232) = v121;
      v122 = v82 + *(int *)(v121 + 48);
      sub_23BFF82CC();
      *(_BYTE *)(v3 - 208) = 1;
      v123 = sub_23BEF247C(&qword_256AE4678, MEMORY[0x24BDCC5D0]);
      sub_23BFF988C();
      *(_QWORD *)(v3 - 264) = v123;
      *(_QWORD *)(v3 - 240) = v122;
      *(_BYTE *)(v3 - 208) = 2;
      sub_23BEE4BE8();
      sub_23BFF98C8();
      *(_BYTE *)(v3 - 208) = 3;
      sub_23BEC70F0();
      sub_23BFF98C8();
      *(_BYTE *)(v3 - 208) = 4;
      sub_23BFF988C();
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v3 - 952) + 8))(*(_QWORD *)(v3 - 496), *(_QWORD *)(v3 - 824));
      swift_unknownObjectRelease();
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v3 - 256) + 8))(*(_QWORD *)(v3 - 216), *(_QWORD *)(v3 - 248));
      v160 = *(_QWORD *)(v3 - 840);
      v161 = *(_QWORD *)(v3 - 296);
      goto LABEL_42;
    case 6:
      *(_BYTE *)(v3 - 208) = 6;
      v85 = *(_QWORD *)(v3 - 576);
      sub_23BFF9868();
      if (v54)
        goto LABEL_34;
      *(_BYTE *)(v3 - 65) = 0;
      sub_23BEC7134();
      v86 = sub_23BFF98C8();
      MEMORY[0x24BDAC7A8](v86);
      strcpy(&v162[-48], "layout artwork title subtitle ");
      *(_QWORD *)(v3 - 208) = &type metadata for MonogramVerticalStackViewLayout;
      *(_QWORD *)(v3 - 200) = *(_QWORD *)(v3 - 480);
      v124 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3618);
      *(_QWORD *)(v3 - 192) = v124;
      *(_QWORD *)(v3 - 184) = v124;
      swift_getTupleTypeMetadata();
      v125 = *(_QWORD *)(v3 - 744);
      *(_BYTE *)(v3 - 208) = 1;
      sub_23BFF98C8();
      sub_23BFF82CC();
      *(_BYTE *)(v3 - 208) = 2;
      sub_23BEF247C(&qword_256AE4678, MEMORY[0x24BDCC5D0]);
      sub_23BFF988C();
      *(_BYTE *)(v3 - 208) = 3;
      sub_23BFF988C();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 944) + 8))(v85, v125);
      swift_unknownObjectRelease();
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v3 - 256) + 8))(*(_QWORD *)(v3 - 216), *(_QWORD *)(v3 - 248));
      v160 = *(_QWORD *)(v3 - 776);
      v161 = *(_QWORD *)(v3 - 296);
      goto LABEL_42;
    case 7:
      *(_BYTE *)(v3 - 208) = 7;
      sub_23BFF9868();
      if (v54)
        goto LABEL_34;
      *(_BYTE *)(v3 - 65) = 0;
      v87 = *(_QWORD *)(v3 - 832);
      v88 = *(_QWORD *)(v3 - 480);
      v89 = sub_23BFF98C8();
      MEMORY[0x24BDAC7A8](v89);
      strcpy(&v162[-48], "artwork caption displayStyle layout title ");
      *(_QWORD *)(v3 - 208) = v88;
      v126 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3618);
      *(_QWORD *)(v3 - 200) = v126;
      *(_QWORD *)(v3 - 192) = &type metadata for DynamicBrickDisplayStyle;
      *(_QWORD *)(v3 - 184) = &type metadata for DynamicBrickViewLayout;
      *(_QWORD *)(v3 - 176) = v126;
      v127 = swift_getTupleTypeMetadata();
      *(_QWORD *)(v3 - 232) = v127;
      v128 = v87 + *(int *)(v127 + 48);
      sub_23BFF82CC();
      *(_BYTE *)(v3 - 208) = 1;
      v129 = sub_23BEF247C(&qword_256AE4678, MEMORY[0x24BDCC5D0]);
      sub_23BFF988C();
      *(_QWORD *)(v3 - 264) = v129;
      *(_QWORD *)(v3 - 240) = v128;
      *(_BYTE *)(v3 - 208) = 2;
      sub_23BEE4BE8();
      sub_23BFF98C8();
      *(_BYTE *)(v3 - 208) = 3;
      sub_23BEC70F0();
      sub_23BFF98C8();
      *(_BYTE *)(v3 - 208) = 4;
      sub_23BFF988C();
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v3 - 936) + 8))(*(_QWORD *)(v3 - 488), *(_QWORD *)(v3 - 808));
      swift_unknownObjectRelease();
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v3 - 256) + 8))(*(_QWORD *)(v3 - 216), *(_QWORD *)(v3 - 248));
      v160 = *(_QWORD *)(v3 - 832);
      v161 = *(_QWORD *)(v3 - 296);
      goto LABEL_42;
    case 8:
      *(_BYTE *)(v3 - 208) = 8;
      sub_23BFF9868();
      if (v54)
        goto LABEL_34;
      *(_BYTE *)(v3 - 65) = 0;
      sub_23BEC70AC();
      v90 = *(_QWORD *)(v3 - 864);
      v91 = sub_23BFF98C8();
      MEMORY[0x24BDAC7A8](v91);
      strcpy(&v162[-48], "layout artwork title subtitle caption ");
      *(_QWORD *)(v3 - 208) = &type metadata for StandardCardViewLayout;
      *(_QWORD *)(v3 - 200) = *(_QWORD *)(v3 - 480);
      v130 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3618);
      *(_QWORD *)(v3 - 192) = v130;
      *(_QWORD *)(v3 - 184) = v130;
      *(_QWORD *)(v3 - 176) = v130;
      v131 = v90 + *(int *)(swift_getTupleTypeMetadata() + 48);
      *(_BYTE *)(v3 - 208) = 1;
      v132 = v131;
      sub_23BFF98C8();
      *(_QWORD *)(v3 - 232) = v132;
      sub_23BFF82CC();
      *(_BYTE *)(v3 - 208) = 2;
      sub_23BEF247C(&qword_256AE4678, MEMORY[0x24BDCC5D0]);
      sub_23BFF988C();
      *(_BYTE *)(v3 - 208) = 3;
      sub_23BFF988C();
      *(_BYTE *)(v3 - 208) = 4;
      sub_23BFF988C();
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v3 - 928) + 8))(*(_QWORD *)(v3 - 544), *(_QWORD *)(v3 - 712));
      swift_unknownObjectRelease();
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v3 - 256) + 8))(*(_QWORD *)(v3 - 216), *(_QWORD *)(v3 - 248));
      v159 = *(_QWORD *)(v3 - 864);
      v161 = *(_QWORD *)(v3 - 296);
      goto LABEL_45;
    case 9:
      *(_BYTE *)(v3 - 208) = 9;
      sub_23BFF9868();
      if (v54)
        goto LABEL_34;
      *(_BYTE *)(v3 - 65) = 0;
      sub_23BEC7068();
      v92 = *(_QWORD *)(v3 - 760);
      v93 = sub_23BFF98C8();
      *(_QWORD *)(v3 - 232) = v162;
      MEMORY[0x24BDAC7A8](v93);
      strcpy(&v162[-80], "layout artwork title subtitle caption groupTitle accessoryView ");
      *(_QWORD *)(v3 - 208) = &type metadata for StandardHorizontalStackViewLayout;
      *(_QWORD *)(v3 - 200) = *(_QWORD *)(v3 - 480);
      v94 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3618);
      *(_QWORD *)(v3 - 192) = v94;
      *(_QWORD *)(v3 - 184) = v94;
      *(_QWORD *)(v3 - 176) = v94;
      *(_QWORD *)(v3 - 168) = v94;
      *(_QWORD *)(v3 - 160) = sub_23BFF96A0();
      v95 = (int *)swift_getTupleTypeMetadata();
      v96 = v92 + v95[12];
      *(_BYTE *)(v3 - 208) = 1;
      sub_23BFF98C8();
      *(_QWORD *)(v3 - 240) = v96;
      v147 = *(_QWORD *)(v3 - 760) + v95[16];
      sub_23BFF82CC();
      *(_BYTE *)(v3 - 208) = 2;
      sub_23BEF247C(&qword_256AE4678, MEMORY[0x24BDCC5D0]);
      sub_23BFF988C();
      v151 = *(_QWORD *)(v3 - 760) + v95[20];
      *(_BYTE *)(v3 - 208) = 3;
      *(_QWORD *)(v3 - 264) = v151;
      sub_23BFF988C();
      v157 = *(_QWORD *)(v3 - 760) + v95[24];
      *(_BYTE *)(v3 - 208) = 4;
      sub_23BFF988C();
      *(_QWORD *)(v3 - 232) = 0;
      *(_BYTE *)(v3 - 208) = 5;
      v158 = *(_QWORD *)(v3 - 232);
      sub_23BFF988C();
      if (v158)
      {
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v3 - 1008) + 8))(*(_QWORD *)(v3 - 520), *(_QWORD *)(v3 - 800));
        swift_unknownObjectRelease();
        (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v3 - 256) + 8))(*(_QWORD *)(v3 - 216), v45);
        sub_23BE9F3A0(v157, &qword_256AE3618);
        sub_23BE9F3A0(*(_QWORD *)(v3 - 264), &qword_256AE3618);
        sub_23BE9F3A0(v147, &qword_256AE3618);
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(v3 - 480) - 8) + 8))(*(_QWORD *)(v3 - 240), *(_QWORD *)(v3 - 480));
        goto LABEL_37;
      }
      *(_BYTE *)(v3 - 208) = 6;
      sub_23BFF988C();
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v3 - 1008) + 8))(*(_QWORD *)(v3 - 520), *(_QWORD *)(v3 - 800));
      swift_unknownObjectRelease();
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v3 - 256) + 8))(*(_QWORD *)(v3 - 216), v45);
      v160 = *(_QWORD *)(v3 - 760);
      v161 = *(_QWORD *)(v3 - 296);
LABEL_42:
      swift_storeEnumTagMultiPayload();
      v70 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 304) + 32);
      v72 = *(_QWORD *)(v3 - 1072);
      v70(v72, v160, v161);
      goto LABEL_39;
    case 10:
      *(_BYTE *)(v3 - 208) = 10;
      sub_23BFF9868();
      if (v54)
        goto LABEL_34;
      *(_BYTE *)(v3 - 65) = 0;
      sub_23BEC7024();
      v97 = *(_QWORD *)(v3 - 856);
      v98 = sub_23BFF98C8();
      MEMORY[0x24BDAC7A8](v98);
      strcpy(&v162[-48], "layout artwork title subtitle caption ");
      *(_QWORD *)(v3 - 208) = &type metadata for StandardVerticalStackViewLayout;
      *(_QWORD *)(v3 - 200) = *(_QWORD *)(v3 - 480);
      v133 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3618);
      *(_QWORD *)(v3 - 192) = v133;
      *(_QWORD *)(v3 - 184) = v133;
      *(_QWORD *)(v3 - 176) = v133;
      v134 = v97 + *(int *)(swift_getTupleTypeMetadata() + 48);
      *(_BYTE *)(v3 - 208) = 1;
      v135 = v134;
      sub_23BFF98C8();
      *(_QWORD *)(v3 - 232) = v135;
      sub_23BFF82CC();
      *(_BYTE *)(v3 - 208) = 2;
      sub_23BEF247C(&qword_256AE4678, MEMORY[0x24BDCC5D0]);
      sub_23BFF988C();
      *(_BYTE *)(v3 - 208) = 3;
      sub_23BFF988C();
      *(_BYTE *)(v3 - 208) = 4;
      sub_23BFF988C();
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v3 - 912) + 8))(*(_QWORD *)(v3 - 536), *(_QWORD *)(v3 - 704));
      swift_unknownObjectRelease();
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v3 - 256) + 8))(*(_QWORD *)(v3 - 216), *(_QWORD *)(v3 - 248));
      v159 = *(_QWORD *)(v3 - 856);
      v161 = *(_QWORD *)(v3 - 296);
      goto LABEL_45;
    case 11:
      *(_BYTE *)(v3 - 208) = 11;
      v99 = *(_QWORD *)(v3 - 560);
      sub_23BFF9868();
      if (v54)
        goto LABEL_34;
      *(_BYTE *)(v3 - 65) = 0;
      sub_23BEC6FE0();
      v100 = *(_QWORD *)(v3 - 768);
      v101 = sub_23BFF98C8();
      MEMORY[0x24BDAC7A8](v101);
      strcpy(&v162[-48], "layout artwork title overlay ");
      *(_QWORD *)(v3 - 208) = &type metadata for TallCardViewLayout;
      *(_QWORD *)(v3 - 200) = *(_QWORD *)(v3 - 480);
      *(_QWORD *)(v3 - 192) = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3618);
      *(_QWORD *)(v3 - 184) = &type metadata for Overlay;
      v136 = v99;
      v137 = swift_getTupleTypeMetadata();
      v138 = v100 + *(int *)(v137 + 48);
      *(_BYTE *)(v3 - 208) = 1;
      v139 = *(_QWORD *)(v3 - 736);
      sub_23BFF98C8();
      *(_QWORD *)(v3 - 232) = v138;
      v150 = *(_QWORD *)(v3 - 768) + *(int *)(v137 + 64);
      sub_23BFF82CC();
      *(_BYTE *)(v3 - 208) = 2;
      sub_23BEF247C(&qword_256AE4678, MEMORY[0x24BDCC5D0]);
      *(_QWORD *)(v3 - 240) = v150;
      sub_23BFF988C();
      *(_BYTE *)(v3 - 208) = 3;
      sub_23BEE4BA4();
      sub_23BFF98C8();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 904) + 8))(v136, v139);
      swift_unknownObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 256) + 8))(v55, v45);
      v160 = *(_QWORD *)(v3 - 768);
      v161 = *(_QWORD *)(v3 - 296);
      goto LABEL_42;
    case 12:
      *(_BYTE *)(v3 - 208) = 12;
      sub_23BFF9868();
      if (v54)
        goto LABEL_34;
      *(_BYTE *)(v3 - 65) = 0;
      sub_23BEC6F9C();
      v102 = *(_QWORD *)(v3 - 848);
      v103 = sub_23BFF98C8();
      MEMORY[0x24BDAC7A8](v103);
      strcpy(&v162[-48], "layout artwork title subtitle caption ");
      *(_QWORD *)(v3 - 208) = &type metadata for VerticalStackCardLayout;
      *(_QWORD *)(v3 - 200) = *(_QWORD *)(v3 - 480);
      v140 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3618);
      *(_QWORD *)(v3 - 192) = v140;
      *(_QWORD *)(v3 - 184) = v140;
      *(_QWORD *)(v3 - 176) = v140;
      v141 = v102 + *(int *)(swift_getTupleTypeMetadata() + 48);
      *(_BYTE *)(v3 - 208) = 1;
      v142 = v141;
      sub_23BFF98C8();
      *(_QWORD *)(v3 - 232) = v142;
      sub_23BFF82CC();
      *(_BYTE *)(v3 - 208) = 2;
      sub_23BEF247C(&qword_256AE4678, MEMORY[0x24BDCC5D0]);
      sub_23BFF988C();
      *(_BYTE *)(v3 - 208) = 3;
      sub_23BFF988C();
      *(_BYTE *)(v3 - 208) = 4;
      sub_23BFF988C();
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v3 - 880) + 8))(*(_QWORD *)(v3 - 528), *(_QWORD *)(v3 - 696));
      swift_unknownObjectRelease();
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v3 - 256) + 8))(*(_QWORD *)(v3 - 216), *(_QWORD *)(v3 - 248));
      v159 = *(_QWORD *)(v3 - 848);
      v161 = *(_QWORD *)(v3 - 296);
LABEL_45:
      swift_storeEnumTagMultiPayload();
      v70 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 304) + 32);
      v72 = *(_QWORD *)(v3 - 1072);
      v70(v72, v159, v161);
      v145 = *(_QWORD *)(v3 - 224);
      goto LABEL_40;
    case 13:
      *(_BYTE *)(v3 - 208) = 13;
      v104 = *(_QWORD *)(v3 - 568);
      sub_23BFF9868();
      if (v54)
        goto LABEL_34;
      v105 = *(_QWORD *)(v3 - 1000);
      v106 = *(_QWORD *)(v3 - 920);
      sub_23BFF98C8();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 1016) + 8))(v104, v106);
      swift_unknownObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 256) + 8))(v55, v45);
      v161 = *(_QWORD *)(v3 - 296);
      swift_storeEnumTagMultiPayload();
      v70 = *(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 32);
      v72 = *(_QWORD *)(v3 - 1072);
      v70(v72, v105, v161);
      goto LABEL_39;
    case 14:
      *(_BYTE *)(v3 - 208) = 14;
      v107 = *(_QWORD *)(v3 - 552);
      sub_23BFF9868();
      if (v54)
      {
LABEL_34:
        swift_unknownObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 256) + 8))(v55, v45);
        goto LABEL_37;
      }
      *(_BYTE *)(v3 - 208) = 0;
      v108 = *(_QWORD *)(v3 - 728);
      v109 = *(_QWORD *)(v3 - 888);
      sub_23BFF98C8();
      __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3618);
      v146 = v108 + *(int *)(swift_getTupleTypeMetadata3() + 48);
      sub_23BFF82CC();
      *(_BYTE *)(v3 - 208) = 1;
      sub_23BEF247C(&qword_256AE4678, MEMORY[0x24BDCC5D0]);
      sub_23BFF988C();
      *(_QWORD *)(v3 - 232) = v146;
      v78 = *(_QWORD *)(v3 - 728);
      *(_BYTE *)(v3 - 208) = 2;
      sub_23BFF988C();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 896) + 8))(v107, v109);
      swift_unknownObjectRelease();
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 - 256) + 8))(v55, *(_QWORD *)(v3 - 248));
      v161 = *(_QWORD *)(v3 - 296);
LABEL_41:
      swift_storeEnumTagMultiPayload();
      v70 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 304) + 32);
      v72 = *(_QWORD *)(v3 - 1072);
      v70(v72, v78, v161);
LABEL_39:
      v145 = *(_QWORD *)(v3 - 224);
LABEL_40:
      v70(*(_QWORD *)(v3 - 1032), v72, v161);
      v143 = v145;
      break;
    default:
      goto LABEL_6;
  }
  return __swift_destroy_boxed_opaque_existential_1(v143);
}

void type metadata accessor for CanvasItemContent()
{
  JUMPOUT(0x2426150F0);
}

unint64_t sub_23BEE4BA4()
{
  unint64_t result;

  result = qword_256AE4680;
  if (!qword_256AE4680)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for Overlay, &type metadata for Overlay);
    atomic_store(result, (unint64_t *)&qword_256AE4680);
  }
  return result;
}

unint64_t sub_23BEE4BE8()
{
  unint64_t result;

  result = qword_256AE4688;
  if (!qword_256AE4688)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for DynamicBrickDisplayStyle, &type metadata for DynamicBrickDisplayStyle);
    atomic_store(result, (unint64_t *)&qword_256AE4688);
  }
  return result;
}

unint64_t sub_23BEE4C2C()
{
  unint64_t result;

  result = qword_256AE4690;
  if (!qword_256AE4690)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for FullWidthStageViewStyle, &type metadata for FullWidthStageViewStyle);
    atomic_store(result, (unint64_t *)&qword_256AE4690);
  }
  return result;
}

unint64_t sub_23BEE4C70()
{
  unint64_t result;

  result = qword_256AE4698;
  if (!qword_256AE4698)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for ActionCardViewStyle, &type metadata for ActionCardViewStyle);
    atomic_store(result, (unint64_t *)&qword_256AE4698);
  }
  return result;
}

void sub_23BEE4CB4()
{
  CanvasItemContent.init(from:)();
}

void sub_23BEE4CD8()
{
  CanvasItemContent.encode(to:)();
}

void CanvasItemContent.hash(into:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  _QWORD v175[70];
  uint64_t v176;
  char *v177;
  char *v178;
  char *v179;
  char *v180;
  char *v181;
  char *v182;
  char *v183;
  char *v184;
  char *v185;
  char *v186;
  char *v187;
  char *v188;
  char *v189;
  char *v190;
  char *v191;
  char *v192;
  char *v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;

  v204 = a1;
  v175[37] = *(_QWORD *)(a2[4] - 8);
  MEMORY[0x24BDAC7A8](a1);
  v175[36] = (char *)v175 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v175[38] = v4;
  v176 = sub_23BFF96A0();
  v175[45] = *(_QWORD *)(v176 - 8);
  MEMORY[0x24BDAC7A8](v176);
  v175[44] = (char *)v175 - v5;
  v6 = a2[3];
  v197 = a2[6];
  v8 = type metadata accessor for FullWidthItemDescriptor(0, v6, v197, v7);
  v175[31] = *(_QWORD *)(v8 - 8);
  v175[32] = v8;
  MEMORY[0x24BDAC7A8](v8);
  v175[29] = (char *)v175 - v9;
  v200 = sub_23BFF82CC();
  v201 = *(_QWORD *)(v200 - 8);
  MEMORY[0x24BDAC7A8](v200);
  v198 = (char *)v175 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a2[2];
  v195 = sub_23BFF96A0();
  v196 = *(_QWORD *)(v195 - 8);
  v12 = MEMORY[0x24BDAC7A8](v195);
  v175[68] = (char *)v175 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v175[42] = (char *)v175 - v15;
  v16 = MEMORY[0x24BDAC7A8](v14);
  v175[67] = (char *)v175 - v17;
  v18 = MEMORY[0x24BDAC7A8](v16);
  v175[66] = (char *)v175 - v19;
  v20 = MEMORY[0x24BDAC7A8](v18);
  v175[43] = (char *)v175 - v21;
  v175[69] = v11;
  v175[65] = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v175[64] = (char *)v175 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v199 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3618);
  v23 = MEMORY[0x24BDAC7A8](v199);
  v175[30] = (char *)v175 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x24BDAC7A8](v23);
  v175[25] = (char *)v175 - v26;
  v27 = MEMORY[0x24BDAC7A8](v25);
  v188 = (char *)v175 - v28;
  v29 = MEMORY[0x24BDAC7A8](v27);
  v175[60] = (char *)v175 - v30;
  v31 = MEMORY[0x24BDAC7A8](v29);
  v175[40] = (char *)v175 - v32;
  v33 = MEMORY[0x24BDAC7A8](v31);
  v175[35] = (char *)v175 - v34;
  v35 = MEMORY[0x24BDAC7A8](v33);
  v175[28] = (char *)v175 - v36;
  v37 = MEMORY[0x24BDAC7A8](v35);
  v175[41] = (char *)v175 - v38;
  v39 = MEMORY[0x24BDAC7A8](v37);
  v194 = (char *)v175 - v40;
  v41 = MEMORY[0x24BDAC7A8](v39);
  v175[63] = (char *)v175 - v42;
  v43 = MEMORY[0x24BDAC7A8](v41);
  v175[24] = (char *)v175 - v44;
  v45 = MEMORY[0x24BDAC7A8](v43);
  v175[59] = (char *)v175 - v46;
  v47 = MEMORY[0x24BDAC7A8](v45);
  v175[34] = (char *)v175 - v48;
  v49 = MEMORY[0x24BDAC7A8](v47);
  v175[27] = (char *)v175 - v50;
  v51 = MEMORY[0x24BDAC7A8](v49);
  v175[23] = (char *)v175 - v52;
  v53 = MEMORY[0x24BDAC7A8](v51);
  v190 = (char *)v175 - v54;
  v55 = MEMORY[0x24BDAC7A8](v53);
  v189 = (char *)v175 - v56;
  v57 = MEMORY[0x24BDAC7A8](v55);
  v175[61] = (char *)v175 - v58;
  v59 = MEMORY[0x24BDAC7A8](v57);
  v175[39] = (char *)v175 - v60;
  v61 = MEMORY[0x24BDAC7A8](v59);
  v175[33] = (char *)v175 - v62;
  v63 = MEMORY[0x24BDAC7A8](v61);
  v175[26] = (char *)v175 - v64;
  v65 = MEMORY[0x24BDAC7A8](v63);
  v175[22] = (char *)v175 - v66;
  v67 = MEMORY[0x24BDAC7A8](v65);
  v193 = (char *)v175 - v68;
  v69 = MEMORY[0x24BDAC7A8](v67);
  v192 = (char *)v175 - v70;
  v71 = MEMORY[0x24BDAC7A8](v69);
  v191 = (char *)v175 - v72;
  v73 = MEMORY[0x24BDAC7A8](v71);
  v175[62] = (char *)v175 - v74;
  v75 = MEMORY[0x24BDAC7A8](v73);
  v175[3] = (char *)v175 - v76;
  v77 = MEMORY[0x24BDAC7A8](v75);
  v175[2] = (char *)v175 - v78;
  v79 = MEMORY[0x24BDAC7A8](v77);
  v175[1] = (char *)v175 - v80;
  v81 = MEMORY[0x24BDAC7A8](v79);
  v175[4] = (char *)v175 - v82;
  v83 = MEMORY[0x24BDAC7A8](v81);
  v177 = (char *)v175 - v84;
  v85 = MEMORY[0x24BDAC7A8](v83);
  v175[48] = (char *)v175 - v86;
  v87 = MEMORY[0x24BDAC7A8](v85);
  v175[21] = (char *)v175 - v88;
  v89 = MEMORY[0x24BDAC7A8](v87);
  v175[13] = (char *)v175 - v90;
  v91 = MEMORY[0x24BDAC7A8](v89);
  v175[46] = (char *)v175 - v92;
  v93 = MEMORY[0x24BDAC7A8](v91);
  v175[58] = (char *)v175 - v94;
  v95 = MEMORY[0x24BDAC7A8](v93);
  v175[18] = (char *)v175 - v96;
  v97 = MEMORY[0x24BDAC7A8](v95);
  v175[12] = (char *)v175 - v98;
  v99 = MEMORY[0x24BDAC7A8](v97);
  v184 = (char *)v175 - v100;
  v101 = MEMORY[0x24BDAC7A8](v99);
  v175[57] = (char *)v175 - v102;
  v103 = MEMORY[0x24BDAC7A8](v101);
  v175[16] = (char *)v175 - v104;
  v105 = MEMORY[0x24BDAC7A8](v103);
  v175[8] = (char *)v175 - v106;
  v107 = MEMORY[0x24BDAC7A8](v105);
  v181 = (char *)v175 - v108;
  v109 = MEMORY[0x24BDAC7A8](v107);
  v175[55] = (char *)v175 - v110;
  v111 = MEMORY[0x24BDAC7A8](v109);
  v175[17] = (char *)v175 - v112;
  v113 = MEMORY[0x24BDAC7A8](v111);
  v175[11] = (char *)v175 - v114;
  v115 = MEMORY[0x24BDAC7A8](v113);
  v175[6] = (char *)v175 - v116;
  v117 = MEMORY[0x24BDAC7A8](v115);
  v175[19] = (char *)v175 - v118;
  v119 = MEMORY[0x24BDAC7A8](v117);
  v180 = (char *)v175 - v120;
  v121 = MEMORY[0x24BDAC7A8](v119);
  v175[54] = (char *)v175 - v122;
  v123 = MEMORY[0x24BDAC7A8](v121);
  v175[7] = (char *)v175 - v124;
  v125 = MEMORY[0x24BDAC7A8](v123);
  v126 = MEMORY[0x24BDAC7A8](v125);
  v178 = (char *)v175 - v127;
  v128 = MEMORY[0x24BDAC7A8](v126);
  v175[52] = (char *)v175 - v129;
  v130 = MEMORY[0x24BDAC7A8](v128);
  v175[20] = (char *)v175 - v131;
  v132 = MEMORY[0x24BDAC7A8](v130);
  v175[14] = (char *)v175 - v133;
  v134 = MEMORY[0x24BDAC7A8](v132);
  v175[9] = (char *)v175 - v135;
  v136 = MEMORY[0x24BDAC7A8](v134);
  v187 = (char *)v175 - v137;
  v138 = MEMORY[0x24BDAC7A8](v136);
  v186 = (char *)v175 - v139;
  v140 = MEMORY[0x24BDAC7A8](v138);
  v185 = (char *)v175 - v141;
  v142 = MEMORY[0x24BDAC7A8](v140);
  v175[15] = (char *)v175 - v143;
  v144 = MEMORY[0x24BDAC7A8](v142);
  v175[10] = (char *)v175 - v145;
  v146 = MEMORY[0x24BDAC7A8](v144);
  v175[5] = (char *)v175 - v147;
  v148 = MEMORY[0x24BDAC7A8](v146);
  v183 = (char *)v175 - v149;
  v150 = MEMORY[0x24BDAC7A8](v148);
  v182 = (char *)v175 - v151;
  v152 = MEMORY[0x24BDAC7A8](v150);
  v175[56] = (char *)v175 - v153;
  v203 = v6;
  v205 = *(_QWORD *)(v6 - 8);
  v154 = MEMORY[0x24BDAC7A8](v152);
  v155 = MEMORY[0x24BDAC7A8](v154);
  v175[50] = (char *)v175 - v156;
  v157 = MEMORY[0x24BDAC7A8](v155);
  v158 = MEMORY[0x24BDAC7A8](v157);
  v175[49] = (char *)v175 - v159;
  v160 = MEMORY[0x24BDAC7A8](v158);
  v175[53] = (char *)v175 - v161;
  v162 = MEMORY[0x24BDAC7A8](v160);
  v175[47] = (char *)v175 - v163;
  v164 = MEMORY[0x24BDAC7A8](v162);
  v165 = MEMORY[0x24BDAC7A8](v164);
  v166 = MEMORY[0x24BDAC7A8](v165);
  v167 = MEMORY[0x24BDAC7A8](v166);
  v168 = MEMORY[0x24BDAC7A8](v167);
  v179 = (char *)v175 - v169;
  v170 = MEMORY[0x24BDAC7A8](v168);
  v175[51] = (char *)v175 - v171;
  MEMORY[0x24BDAC7A8](v170);
  (*(void (**)(char *, _QWORD *, _QWORD *))(v173 + 16))((char *)v175 - ((v172 + 15) & 0xFFFFFFFFFFFFFFF0), v202, a2);
  v202 = a2;
  v174 = (char *)sub_23BEE596C + 4 * word_23BFFD5DE[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_23BEE596C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *TupleTypeMetadata;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  *(_QWORD *)(v1 + 1360) = *(_QWORD *)(v2 + 240);
  v3 = *(_OWORD *)(v2 + 208);
  *(_OWORD *)(v1 + 1312) = *(_OWORD *)(v2 + 192);
  *(_OWORD *)(v1 + 1328) = v3;
  *(_OWORD *)(v1 + 1344) = *(_OWORD *)(v2 + 224);
  v4 = *(_OWORD *)(v2 + 144);
  *(_OWORD *)(v1 + 1248) = *(_OWORD *)(v2 + 128);
  *(_OWORD *)(v1 + 1264) = v4;
  v5 = *(_OWORD *)(v2 + 176);
  *(_OWORD *)(v1 + 1280) = *(_OWORD *)(v2 + 160);
  *(_OWORD *)(v1 + 1296) = v5;
  v6 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(v1 + 1184) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(v1 + 1200) = v6;
  v7 = *(_OWORD *)(v2 + 112);
  *(_OWORD *)(v1 + 1216) = *(_OWORD *)(v2 + 96);
  *(_OWORD *)(v1 + 1232) = v7;
  v8 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v1 + 1120) = *(_OWORD *)v2;
  *(_OWORD *)(v1 + 1136) = v8;
  v9 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v1 + 1152) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v1 + 1168) = v9;
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v1 + 864) = &type metadata for ActionCardViewLayout;
  v10 = *(_QWORD *)(v1 + 816);
  *(_QWORD *)(v1 + 872) = v10;
  *(_QWORD *)(v1 + 880) = &type metadata for ActionCardViewStyle;
  v11 = *(_QWORD *)(v1 + 776);
  *(_QWORD *)(v1 + 888) = v11;
  *(_QWORD *)(v1 + 896) = v11;
  *(_QWORD *)(v1 + 904) = v11;
  v12 = *(_QWORD *)(v1 + 552);
  *(_QWORD *)(v1 + 912) = v12;
  v13 = *(_QWORD *)(v1 + 720);
  *(_QWORD *)(v1 + 920) = v13;
  TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  v15 = TupleTypeMetadata[12];
  *(_QWORD *)(v1 + 776) = *(unsigned __int8 *)(v2 + TupleTypeMetadata[16]);
  v16 = v2 + v15;
  v17 = v2 + TupleTypeMetadata[20];
  v18 = v2 + TupleTypeMetadata[24];
  v19 = v2 + TupleTypeMetadata[28];
  v20 = v2 + TupleTypeMetadata[32];
  v21 = v2 + TupleTypeMetadata[36];
  (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v1 + 848) + 32))(*(_QWORD *)(v1 + 408), v16, v10);
  v22 = *(_QWORD *)(v1 + 448);
  sub_23BEBEF90(v17, v22);
  sub_23BEBEF90(v18, *(_QWORD *)(v1 + 608));
  sub_23BEBEF90(v19, *(_QWORD *)(v1 + 616));
  (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v1 + 520) + 32))(*(_QWORD *)(v1 + 512), v20, v12);
  v23 = *(_QWORD *)(v1 + 344);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 + 736) + 32))(v23, v21, v13);
  sub_23BFF99DC();
  v24 = *(_OWORD *)(v1 + 1328);
  *(_OWORD *)(v1 + 1056) = *(_OWORD *)(v1 + 1312);
  *(_OWORD *)(v1 + 1072) = v24;
  *(_OWORD *)(v1 + 1088) = *(_OWORD *)(v1 + 1344);
  *(_QWORD *)(v1 + 1104) = *(_QWORD *)(v1 + 1360);
  v25 = *(_OWORD *)(v1 + 1264);
  *(_OWORD *)(v1 + 992) = *(_OWORD *)(v1 + 1248);
  *(_OWORD *)(v1 + 1008) = v25;
  v26 = *(_OWORD *)(v1 + 1296);
  *(_OWORD *)(v1 + 1024) = *(_OWORD *)(v1 + 1280);
  *(_OWORD *)(v1 + 1040) = v26;
  v27 = *(_OWORD *)(v1 + 1200);
  *(_OWORD *)(v1 + 928) = *(_OWORD *)(v1 + 1184);
  *(_OWORD *)(v1 + 944) = v27;
  v28 = *(_OWORD *)(v1 + 1232);
  *(_OWORD *)(v1 + 960) = *(_OWORD *)(v1 + 1216);
  *(_OWORD *)(v1 + 976) = v28;
  v29 = *(_OWORD *)(v1 + 1136);
  *(_OWORD *)(v1 + 864) = *(_OWORD *)(v1 + 1120);
  *(_OWORD *)(v1 + 880) = v29;
  v30 = *(_OWORD *)(v1 + 1168);
  *(_OWORD *)(v1 + 896) = *(_OWORD *)(v1 + 1152);
  *(_OWORD *)(v1 + 912) = v30;
  ActionCardViewLayout.hash(into:)();
  v31 = *(_QWORD *)(v1 + 816);
  sub_23BFF9388();
  sub_23BFF99DC();
  v32 = *(_QWORD *)(v1 + 40);
  sub_23BEF2434(v22, v32);
  v33 = *(_QWORD *)(v1 + 792);
  v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48);
  v35 = *(_QWORD *)(v1 + 784);
  if (v34(v32, 1, v35) == 1)
  {
    sub_23BFF99E8();
    v36 = *(_QWORD *)(v1 + 768);
  }
  else
  {
    v36 = *(_QWORD *)(v1 + 768);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 32))(v36, v32, v35);
    sub_23BFF99E8();
    sub_23BEF247C(&qword_256AE46A0, MEMORY[0x24BDCC5C0]);
    sub_23BFF9388();
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v36, v35);
  }
  v37 = *(_QWORD *)(v1 + 80);
  sub_23BEF2434(*(_QWORD *)(v1 + 608), v37);
  if (v34(v37, 1, v35) == 1)
  {
    sub_23BFF99E8();
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 32))(v36, v37, v35);
    sub_23BFF99E8();
    sub_23BEF247C(&qword_256AE46A0, MEMORY[0x24BDCC5C0]);
    sub_23BFF9388();
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v36, v35);
  }
  v38 = *(_QWORD *)(v1 + 120);
  sub_23BEF2434(*(_QWORD *)(v1 + 616), v38);
  if (v34(v38, 1, v35) == 1)
  {
    sub_23BFF99E8();
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 32))(v36, v38, v35);
    sub_23BFF99E8();
    sub_23BEF247C(&qword_256AE46A0, MEMORY[0x24BDCC5C0]);
    sub_23BFF9388();
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v36, v35);
  }
  v39 = *(_QWORD *)(v1 + 512);
  v40 = *(_QWORD *)(v1 + 552);
  sub_23BFF9388();
  v41 = *(_QWORD *)(v1 + 720);
  sub_23BFF96AC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 736) + 8))(v23, v41);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 520) + 8))(v39, v40);
  sub_23BE9F3A0(*(_QWORD *)(v1 + 616), &qword_256AE3618);
  sub_23BE9F3A0(*(_QWORD *)(v1 + 608), &qword_256AE3618);
  sub_23BE9F3A0(*(_QWORD *)(v1 + 448), &qword_256AE3618);
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v1 + 848) + 8))(*(_QWORD *)(v1 + 408), v31);
}

void static CanvasItemContent.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  _QWORD v376[3];
  uint64_t TupleTypeMetadata2;
  char *v378;
  char *v379;
  char *v380;
  char *v381;
  char *v382;
  char *v383;
  char *v384;
  char *v385;
  char *v386;
  char *v387;
  char *v388;
  char *v389;
  char *v390;
  char *v391;
  char *v392;
  char *v393;
  char *v394;
  char *v395;
  char *v396;
  char *v397;
  char *v398;
  char *v399;
  char *v400;
  uint64_t v401;
  char *v402;
  char *v403;
  char *v404;
  uint64_t v405;
  char *v406;
  char *v407;
  char *v408;
  char *v409;
  char *v410;
  char *v411;
  char *v412;
  char *v413;
  char *v414;
  char *v415;
  char *v416;
  char *v417;
  char *v418;
  char *v419;
  char *v420;
  char *v421;
  char *v422;
  char *v423;
  char *v424;
  char *v425;
  char *v426;
  char *v427;
  char *v428;
  char *v429;
  char *v430;
  char *v431;
  char *v432;
  char *v433;
  char *v434;
  char *v435;
  uint64_t v436;
  char *v437;
  char *v438;
  char *v439;
  char *v440;
  char *v441;
  char *v442;
  char *v443;
  char *v444;
  char *v445;
  char *v446;
  char *v447;
  char *v448;
  char *v449;
  char *v450;
  char *v451;
  char *v452;
  char *v453;
  char *v454;
  char *v455;
  char *v456;
  char *v457;
  char *v458;
  char *v459;
  char *v460;
  char *v461;
  uint64_t v462;
  char *v463;
  char *v464;
  char *v465;
  char *v466;
  char *v467;
  char *v468;
  char *v469;
  char *v470;
  char *v471;
  char *v472;
  char *v473;
  char *v474;
  char *v475;
  char *v476;
  char *v477;
  char *v478;
  char *v479;
  char *v480;
  char *v481;
  char *v482;
  char *v483;
  char *v484;
  char *v485;
  char *v486;
  char *v487;
  char *v488;
  char *v489;
  char *v490;
  char *v491;
  char *v492;
  char *v493;
  char *v494;
  char *v495;
  char *v496;
  char *v497;
  char *v498;
  char *v499;
  char *v500;
  char *v501;
  char *v502;
  char *v503;
  char *v504;
  char *v505;
  char *v506;
  char *v507;
  char *v508;
  char *v509;
  char *v510;
  char *v511;
  char *v512;
  char *v513;
  char *v514;
  char *v515;
  char *v516;
  char *v517;
  char *v518;
  char *v519;
  char *v520;
  char *v521;
  char *v522;
  char *v523;
  char *v524;
  char *v525;
  char *v526;
  char *v527;
  char *v528;
  char *v529;
  char *v530;
  char *v531;
  char *v532;
  char *v533;
  char *v534;
  char *v535;
  char *v536;
  uint64_t v537;
  uint64_t v538;
  char *v539;
  uint64_t v540;
  uint64_t v541;
  char *v542;
  char *v543;
  char *v544;
  char *v545;
  char *v546;
  char *v547;
  char *v548;
  char *v549;
  char *v550;
  char *v551;
  char *v552;
  char *v553;
  char *v554;
  char *v555;
  char *v556;
  uint64_t v557;
  char *v558;
  char *v559;
  char *v560;
  char *v561;
  char *v562;
  char *v563;
  char *v564;
  char *v565;
  char *v566;
  char *v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;

  v578 = a2;
  v579 = a1;
  v540 = *(_QWORD *)(a5 - 8);
  v14 = MEMORY[0x24BDAC7A8](a1);
  v461 = (char *)v376 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v376[0] = (char *)v376 - v16;
  v17 = sub_23BFF96A0();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v376[1] = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v18 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v378 = (char *)v376 - v19;
  v569 = v17;
  v568 = *(_QWORD *)(v17 - 8);
  v20 = MEMORY[0x24BDAC7A8](v18);
  v376[2] = (char *)v376 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v20);
  v506 = (char *)v376 - v23;
  MEMORY[0x24BDAC7A8](v22);
  v539 = (char *)v376 - v24;
  v538 = type metadata accessor for FullWidthItemDescriptor(0, a4, a7, v25);
  v537 = *(_QWORD *)(v538 - 8);
  MEMORY[0x24BDAC7A8](v538);
  v460 = (char *)v376 - v26;
  v27 = sub_23BFF96A0();
  v436 = swift_getTupleTypeMetadata2();
  v405 = *(_QWORD *)(v436 - 8);
  v28 = MEMORY[0x24BDAC7A8](v436);
  v388 = (char *)v376 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = MEMORY[0x24BDAC7A8](v28);
  v428 = (char *)v376 - v31;
  v32 = MEMORY[0x24BDAC7A8](v30);
  v383 = (char *)v376 - v33;
  v34 = MEMORY[0x24BDAC7A8](v32);
  v390 = (char *)v376 - v35;
  MEMORY[0x24BDAC7A8](v34);
  v384 = (char *)v376 - v36;
  v572 = sub_23BFF82CC();
  v573 = *(_QWORD *)(v572 - 8);
  MEMORY[0x24BDAC7A8](v572);
  v497 = (char *)v376 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v571 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE46A8);
  v38 = MEMORY[0x24BDAC7A8](v571);
  v440 = (char *)v376 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = MEMORY[0x24BDAC7A8](v38);
  v457 = (char *)v376 - v41;
  v42 = MEMORY[0x24BDAC7A8](v40);
  v408 = (char *)v376 - v43;
  v44 = MEMORY[0x24BDAC7A8](v42);
  v427 = (char *)v376 - v45;
  v46 = MEMORY[0x24BDAC7A8](v44);
  v452 = (char *)v376 - v47;
  v48 = MEMORY[0x24BDAC7A8](v46);
  v450 = (char *)v376 - v49;
  v50 = MEMORY[0x24BDAC7A8](v48);
  v407 = (char *)v376 - v51;
  v52 = MEMORY[0x24BDAC7A8](v50);
  v426 = (char *)v376 - v53;
  v54 = MEMORY[0x24BDAC7A8](v52);
  v449 = (char *)v376 - v55;
  v56 = MEMORY[0x24BDAC7A8](v54);
  v402 = (char *)v376 - v57;
  v58 = MEMORY[0x24BDAC7A8](v56);
  v419 = (char *)v376 - v59;
  v60 = MEMORY[0x24BDAC7A8](v58);
  v438 = (char *)v376 - v61;
  v62 = MEMORY[0x24BDAC7A8](v60);
  v451 = (char *)v376 - v63;
  v64 = MEMORY[0x24BDAC7A8](v62);
  v406 = (char *)v376 - v65;
  v66 = MEMORY[0x24BDAC7A8](v64);
  v425 = (char *)v376 - v67;
  v68 = MEMORY[0x24BDAC7A8](v66);
  v448 = (char *)v376 - v69;
  v70 = MEMORY[0x24BDAC7A8](v68);
  v416 = (char *)v376 - v71;
  v72 = MEMORY[0x24BDAC7A8](v70);
  v456 = (char *)v376 - v73;
  v74 = MEMORY[0x24BDAC7A8](v72);
  v437 = (char *)v376 - v75;
  v76 = MEMORY[0x24BDAC7A8](v74);
  v447 = (char *)v376 - v77;
  v78 = MEMORY[0x24BDAC7A8](v76);
  v415 = (char *)v376 - v79;
  v80 = MEMORY[0x24BDAC7A8](v78);
  v455 = (char *)v376 - v81;
  v82 = MEMORY[0x24BDAC7A8](v80);
  v421 = (char *)v376 - v83;
  v84 = MEMORY[0x24BDAC7A8](v82);
  v441 = (char *)v376 - v85;
  v86 = MEMORY[0x24BDAC7A8](v84);
  v454 = (char *)v376 - v87;
  v88 = MEMORY[0x24BDAC7A8](v86);
  v439 = (char *)v376 - v89;
  v90 = MEMORY[0x24BDAC7A8](v88);
  v459 = (char *)v376 - v91;
  v92 = MEMORY[0x24BDAC7A8](v90);
  v396 = (char *)v376 - v93;
  v94 = MEMORY[0x24BDAC7A8](v92);
  v418 = (char *)v376 - v95;
  v96 = MEMORY[0x24BDAC7A8](v94);
  v435 = (char *)v376 - v97;
  v98 = MEMORY[0x24BDAC7A8](v96);
  v389 = (char *)v376 - v99;
  v100 = MEMORY[0x24BDAC7A8](v98);
  v404 = (char *)v376 - v101;
  v102 = MEMORY[0x24BDAC7A8](v100);
  v424 = (char *)v376 - v103;
  v576 = v27;
  v575 = *(_QWORD *)(v27 - 8);
  v104 = MEMORY[0x24BDAC7A8](v102);
  v382 = (char *)v376 - ((v105 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = MEMORY[0x24BDAC7A8](v104);
  v484 = (char *)v376 - v107;
  v108 = MEMORY[0x24BDAC7A8](v106);
  v566 = (char *)v376 - v109;
  v110 = MEMORY[0x24BDAC7A8](v108);
  v417 = (char *)v376 - v111;
  v112 = MEMORY[0x24BDAC7A8](v110);
  v496 = (char *)v376 - v113;
  v114 = MEMORY[0x24BDAC7A8](v112);
  v503 = (char *)v376 - v115;
  v116 = MEMORY[0x24BDAC7A8](v114);
  v379 = (char *)v376 - v117;
  v118 = MEMORY[0x24BDAC7A8](v116);
  v381 = (char *)v376 - v119;
  v120 = MEMORY[0x24BDAC7A8](v118);
  v508 = (char *)v376 - v121;
  v122 = MEMORY[0x24BDAC7A8](v120);
  v511 = (char *)v376 - v123;
  v124 = MEMORY[0x24BDAC7A8](v122);
  v556 = (char *)v376 - v125;
  v126 = MEMORY[0x24BDAC7A8](v124);
  v542 = (char *)v376 - v127;
  v128 = MEMORY[0x24BDAC7A8](v126);
  v380 = (char *)v376 - v129;
  v130 = MEMORY[0x24BDAC7A8](v128);
  v474 = (char *)v376 - v131;
  v132 = MEMORY[0x24BDAC7A8](v130);
  v507 = (char *)v376 - v133;
  v557 = *(_QWORD *)(a3 - 8);
  v134 = MEMORY[0x24BDAC7A8](v132);
  v397 = (char *)v376 - ((v135 + 15) & 0xFFFFFFFFFFFFFFF0);
  v136 = MEMORY[0x24BDAC7A8](v134);
  v458 = (char *)v376 - v137;
  MEMORY[0x24BDAC7A8](v136);
  v509 = (char *)v376 - v138;
  v577 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3618);
  v139 = MEMORY[0x24BDAC7A8](v577);
  v423 = (char *)v376 - ((v140 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = MEMORY[0x24BDAC7A8](v139);
  v446 = (char *)v376 - v142;
  v143 = MEMORY[0x24BDAC7A8](v141);
  v527 = (char *)v376 - v144;
  v145 = MEMORY[0x24BDAC7A8](v143);
  v502 = (char *)v376 - v146;
  v147 = MEMORY[0x24BDAC7A8](v145);
  v528 = (char *)v376 - v148;
  v149 = MEMORY[0x24BDAC7A8](v147);
  v567 = (char *)v376 - v150;
  v151 = MEMORY[0x24BDAC7A8](v149);
  v395 = (char *)v376 - v152;
  v153 = MEMORY[0x24BDAC7A8](v151);
  v414 = (char *)v376 - v154;
  v155 = MEMORY[0x24BDAC7A8](v153);
  v434 = (char *)v376 - v156;
  v157 = MEMORY[0x24BDAC7A8](v155);
  v513 = (char *)v376 - v158;
  v159 = MEMORY[0x24BDAC7A8](v157);
  v494 = (char *)v376 - v160;
  v161 = MEMORY[0x24BDAC7A8](v159);
  v535 = (char *)v376 - v162;
  v163 = MEMORY[0x24BDAC7A8](v161);
  v489 = (char *)v376 - v164;
  v165 = MEMORY[0x24BDAC7A8](v163);
  v495 = (char *)v376 - v166;
  v167 = MEMORY[0x24BDAC7A8](v165);
  v548 = (char *)v376 - v168;
  v169 = MEMORY[0x24BDAC7A8](v167);
  v433 = (char *)v376 - v170;
  v171 = MEMORY[0x24BDAC7A8](v169);
  v470 = (char *)v376 - v172;
  v173 = MEMORY[0x24BDAC7A8](v171);
  v471 = (char *)v376 - v174;
  v175 = MEMORY[0x24BDAC7A8](v173);
  v394 = (char *)v376 - v176;
  v177 = MEMORY[0x24BDAC7A8](v175);
  v412 = (char *)v376 - v178;
  v179 = MEMORY[0x24BDAC7A8](v177);
  v431 = (char *)v376 - v180;
  v181 = MEMORY[0x24BDAC7A8](v179);
  v487 = (char *)v376 - v182;
  v183 = MEMORY[0x24BDAC7A8](v181);
  v493 = (char *)v376 - v184;
  v185 = MEMORY[0x24BDAC7A8](v183);
  v468 = (char *)v376 - v186;
  v187 = MEMORY[0x24BDAC7A8](v185);
  v488 = (char *)v376 - v188;
  v189 = MEMORY[0x24BDAC7A8](v187);
  v551 = (char *)v376 - v190;
  v191 = MEMORY[0x24BDAC7A8](v189);
  v564 = (char *)v376 - v192;
  v193 = MEMORY[0x24BDAC7A8](v191);
  v386 = (char *)v376 - v194;
  v195 = MEMORY[0x24BDAC7A8](v193);
  v393 = (char *)v376 - v196;
  v197 = MEMORY[0x24BDAC7A8](v195);
  v413 = (char *)v376 - v198;
  v199 = MEMORY[0x24BDAC7A8](v197);
  v432 = (char *)v376 - v200;
  v201 = MEMORY[0x24BDAC7A8](v199);
  v529 = (char *)v376 - v202;
  v203 = MEMORY[0x24BDAC7A8](v201);
  v518 = (char *)v376 - v204;
  v205 = MEMORY[0x24BDAC7A8](v203);
  v525 = (char *)v376 - v206;
  v207 = MEMORY[0x24BDAC7A8](v205);
  v534 = (char *)v376 - v208;
  v209 = MEMORY[0x24BDAC7A8](v207);
  v543 = (char *)v376 - v210;
  v211 = MEMORY[0x24BDAC7A8](v209);
  v546 = (char *)v376 - v212;
  v213 = MEMORY[0x24BDAC7A8](v211);
  v549 = (char *)v376 - v214;
  v215 = MEMORY[0x24BDAC7A8](v213);
  v562 = (char *)v376 - v216;
  v217 = MEMORY[0x24BDAC7A8](v215);
  v392 = (char *)v376 - v218;
  v219 = MEMORY[0x24BDAC7A8](v217);
  v411 = (char *)v376 - v220;
  v221 = MEMORY[0x24BDAC7A8](v219);
  v430 = (char *)v376 - v222;
  v223 = MEMORY[0x24BDAC7A8](v221);
  v485 = (char *)v376 - v224;
  v225 = MEMORY[0x24BDAC7A8](v223);
  v492 = (char *)v376 - v226;
  v227 = MEMORY[0x24BDAC7A8](v225);
  v467 = (char *)v376 - v228;
  v229 = MEMORY[0x24BDAC7A8](v227);
  v486 = (char *)v376 - v230;
  v231 = MEMORY[0x24BDAC7A8](v229);
  v550 = (char *)v376 - v232;
  v233 = MEMORY[0x24BDAC7A8](v231);
  v563 = (char *)v376 - v234;
  v235 = MEMORY[0x24BDAC7A8](v233);
  v400 = (char *)v376 - v236;
  v237 = MEMORY[0x24BDAC7A8](v235);
  v445 = (char *)v376 - v238;
  v239 = MEMORY[0x24BDAC7A8](v237);
  v517 = (char *)v376 - v240;
  v241 = MEMORY[0x24BDAC7A8](v239);
  v521 = (char *)v376 - v242;
  v243 = MEMORY[0x24BDAC7A8](v241);
  v473 = (char *)v376 - v244;
  v245 = MEMORY[0x24BDAC7A8](v243);
  v464 = (char *)v376 - v246;
  v247 = MEMORY[0x24BDAC7A8](v245);
  v410 = (char *)v376 - v248;
  v249 = MEMORY[0x24BDAC7A8](v247);
  v429 = (char *)v376 - v250;
  v251 = MEMORY[0x24BDAC7A8](v249);
  v466 = (char *)v376 - v252;
  v253 = MEMORY[0x24BDAC7A8](v251);
  v465 = (char *)v376 - v254;
  v255 = MEMORY[0x24BDAC7A8](v253);
  v552 = (char *)v376 - v256;
  v257 = MEMORY[0x24BDAC7A8](v255);
  v480 = (char *)v376 - v258;
  v259 = MEMORY[0x24BDAC7A8](v257);
  v399 = (char *)v376 - v260;
  v261 = MEMORY[0x24BDAC7A8](v259);
  v444 = (char *)v376 - v262;
  v263 = MEMORY[0x24BDAC7A8](v261);
  v516 = (char *)v376 - v264;
  v265 = MEMORY[0x24BDAC7A8](v263);
  v520 = (char *)v376 - v266;
  v267 = MEMORY[0x24BDAC7A8](v265);
  v472 = (char *)v376 - v268;
  v269 = MEMORY[0x24BDAC7A8](v267);
  v463 = (char *)v376 - v270;
  v271 = MEMORY[0x24BDAC7A8](v269);
  v403 = (char *)v376 - v272;
  v273 = MEMORY[0x24BDAC7A8](v271);
  v422 = (char *)v376 - v274;
  v275 = MEMORY[0x24BDAC7A8](v273);
  v443 = (char *)v376 - v276;
  v277 = MEMORY[0x24BDAC7A8](v275);
  v519 = (char *)v376 - v278;
  v279 = MEMORY[0x24BDAC7A8](v277);
  v533 = (char *)v376 - v280;
  v281 = MEMORY[0x24BDAC7A8](v279);
  v501 = (char *)v376 - v282;
  v283 = MEMORY[0x24BDAC7A8](v281);
  v522 = (char *)v376 - v284;
  v285 = MEMORY[0x24BDAC7A8](v283);
  v558 = (char *)v376 - v286;
  v287 = MEMORY[0x24BDAC7A8](v285);
  v560 = (char *)v376 - v288;
  v289 = MEMORY[0x24BDAC7A8](v287);
  v453 = (char *)v376 - v290;
  v291 = MEMORY[0x24BDAC7A8](v289);
  v442 = (char *)v376 - v292;
  v293 = MEMORY[0x24BDAC7A8](v291);
  v532 = (char *)v376 - v294;
  v295 = MEMORY[0x24BDAC7A8](v293);
  v500 = (char *)v376 - v296;
  v297 = MEMORY[0x24BDAC7A8](v295);
  v559 = (char *)v376 - v298;
  v299 = MEMORY[0x24BDAC7A8](v297);
  v483 = (char *)v376 - v300;
  v301 = MEMORY[0x24BDAC7A8](v299);
  v387 = (char *)v376 - v302;
  v303 = MEMORY[0x24BDAC7A8](v301);
  v398 = (char *)v376 - v304;
  v305 = MEMORY[0x24BDAC7A8](v303);
  v420 = (char *)v376 - v306;
  v307 = MEMORY[0x24BDAC7A8](v305);
  v514 = (char *)v376 - v308;
  v309 = MEMORY[0x24BDAC7A8](v307);
  v545 = (char *)v376 - v310;
  v311 = MEMORY[0x24BDAC7A8](v309);
  v553 = (char *)v376 - v312;
  v313 = MEMORY[0x24BDAC7A8](v311);
  v544 = (char *)v376 - v314;
  v315 = MEMORY[0x24BDAC7A8](v313);
  v547 = (char *)v376 - v316;
  v317 = MEMORY[0x24BDAC7A8](v315);
  v554 = (char *)v376 - v318;
  v319 = MEMORY[0x24BDAC7A8](v317);
  v385 = (char *)v376 - v320;
  v321 = MEMORY[0x24BDAC7A8](v319);
  v391 = (char *)v376 - v322;
  v323 = MEMORY[0x24BDAC7A8](v321);
  v409 = (char *)v376 - v324;
  v325 = MEMORY[0x24BDAC7A8](v323);
  v475 = (char *)v376 - v326;
  v327 = MEMORY[0x24BDAC7A8](v325);
  v510 = (char *)v376 - v328;
  v329 = MEMORY[0x24BDAC7A8](v327);
  v523 = (char *)v376 - v330;
  v331 = MEMORY[0x24BDAC7A8](v329);
  v512 = (char *)v376 - v332;
  v333 = MEMORY[0x24BDAC7A8](v331);
  v515 = (char *)v376 - v334;
  v335 = MEMORY[0x24BDAC7A8](v333);
  v524 = (char *)v376 - v336;
  v580 = *(_QWORD *)(a4 - 8);
  v337 = MEMORY[0x24BDAC7A8](v335);
  v536 = (char *)v376 - ((v338 + 15) & 0xFFFFFFFFFFFFFFF0);
  v339 = MEMORY[0x24BDAC7A8](v337);
  v477 = (char *)v376 - v340;
  v341 = MEMORY[0x24BDAC7A8](v339);
  v478 = (char *)v376 - v342;
  v343 = MEMORY[0x24BDAC7A8](v341);
  v481 = (char *)v376 - v344;
  v345 = MEMORY[0x24BDAC7A8](v343);
  v482 = (char *)v376 - v346;
  v347 = MEMORY[0x24BDAC7A8](v345);
  v491 = (char *)v376 - v348;
  v349 = MEMORY[0x24BDAC7A8](v347);
  v499 = (char *)v376 - v350;
  v351 = MEMORY[0x24BDAC7A8](v349);
  v476 = (char *)v376 - v352;
  v353 = MEMORY[0x24BDAC7A8](v351);
  v561 = (char *)v376 - v354;
  v355 = MEMORY[0x24BDAC7A8](v353);
  v490 = (char *)v376 - v356;
  v357 = MEMORY[0x24BDAC7A8](v355);
  v498 = (char *)v376 - v358;
  v359 = MEMORY[0x24BDAC7A8](v357);
  v505 = (char *)v376 - v360;
  v361 = MEMORY[0x24BDAC7A8](v359);
  v479 = (char *)v376 - v362;
  v363 = MEMORY[0x24BDAC7A8](v361);
  v555 = (char *)v376 - v364;
  v365 = MEMORY[0x24BDAC7A8](v363);
  v504 = (char *)v376 - v366;
  v367 = MEMORY[0x24BDAC7A8](v365);
  v530 = (char *)v376 - v368;
  v369 = MEMORY[0x24BDAC7A8](v367);
  v469 = (char *)v376 - v370;
  v371 = MEMORY[0x24BDAC7A8](v369);
  v565 = (char *)v376 - v372;
  v373 = MEMORY[0x24BDAC7A8](v371);
  v531 = (char *)v376 - v374;
  MEMORY[0x24BDAC7A8](v373);
  v526 = (char *)v376 - v375;
  v570 = a3;
  v582 = a3;
  v581 = a4;
  v583 = a4;
  v541 = a5;
  v584 = a5;
  v401 = a6;
  v585 = a6;
  v574 = a7;
  v586 = a7;
  v462 = a8;
  v587 = a8;
  type metadata accessor for CanvasItemContent();
}

uint64_t sub_23BEEA0B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t TupleTypeMetadata2;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  void (*v41)(char *, _QWORD, uint64_t);
  int EnumCaseMultiPayload;

  v11 = *(_QWORD *)(a1 - 8);
  v12 = MEMORY[0x24BDAC7A8](a1);
  v9[174] = (char *)&a9 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v9[166] = (char *)&a9 - v15;
  v16 = MEMORY[0x24BDAC7A8](v14);
  v9[171] = (char *)&a9 - v17;
  v18 = MEMORY[0x24BDAC7A8](v16);
  v9[168] = (char *)&a9 - v19;
  v20 = MEMORY[0x24BDAC7A8](v18);
  v9[167] = (char *)&a9 - v21;
  v22 = MEMORY[0x24BDAC7A8](v20);
  v9[169] = (char *)&a9 - v23;
  v24 = MEMORY[0x24BDAC7A8](v22);
  v25 = MEMORY[0x24BDAC7A8](v24);
  v9[173] = (char *)&a9 - v26;
  v27 = MEMORY[0x24BDAC7A8](v25);
  v9[165] = (char *)&a9 - v28;
  v29 = MEMORY[0x24BDAC7A8](v27);
  v9[172] = (char *)&a9 - v30;
  v31 = MEMORY[0x24BDAC7A8](v29);
  v9[170] = (char *)&a9 - v32;
  v33 = MEMORY[0x24BDAC7A8](v31);
  v34 = MEMORY[0x24BDAC7A8](v33);
  v35 = MEMORY[0x24BDAC7A8](v34);
  MEMORY[0x24BDAC7A8](v35);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v9[218] = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v37 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v39 = (char *)&a9 - v38;
  v9[220] = v37;
  v40 = (char *)&a9 + *(int *)(v37 + 48) - v38;
  v9[217] = v11;
  v41 = *(void (**)(char *, _QWORD, uint64_t))(v11 + 16);
  v41((char *)&a9 - v38, v9[227], a1);
  v9[227] = v40;
  v41(v40, v9[224], a1);
  v9[233] = v39;
  v9[232] = a1;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)())((char *)sub_23BEEA340 + 4 * word_23BFFD5FC[EnumCaseMultiPayload]))();
}

uint64_t sub_23BEEA340()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, _QWORD, _QWORD);
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  int *TupleTypeMetadata;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(_QWORD, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int (*v64)(uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t, uint64_t);
  void (*v71)(_QWORD, uint64_t);
  void (*v72)(_QWORD, uint64_t);
  uint64_t v73;
  uint64_t v74;
  void (*v75)(uint64_t, uint64_t);
  uint64_t v76;
  void (*v77)(uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  void (*v84)(uint64_t, uint64_t);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(uint64_t, uint64_t);
  uint64_t v90;
  void (*v91)(_QWORD, uint64_t);
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(_QWORD, uint64_t);
  uint64_t v96;
  void (*v97)(_QWORD, uint64_t);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  void (*v109)(uint64_t, uint64_t);
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  void (*v119)(uint64_t, uint64_t);
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void (*v123)(uint64_t, uint64_t, uint64_t);
  uint64_t v124;
  unsigned int (*v125)(uint64_t, uint64_t, uint64_t);
  void (*v126)(_QWORD, uint64_t);
  void (*v127)(_QWORD, uint64_t);
  void (*v128)(_QWORD, uint64_t);
  uint64_t v129;
  void (*v130)(uint64_t, uint64_t);
  uint64_t v131;
  void (*v132)(_QWORD, uint64_t);
  void (*v133)(_QWORD, uint64_t);
  uint64_t v134;
  void (*v135)(_QWORD, uint64_t);
  uint64_t v136;
  void (*v137)(_QWORD, uint64_t);
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char v141;
  void (*v142)(uint64_t, uint64_t);
  void (*v143)(_QWORD, uint64_t);
  uint64_t v144;
  void (*v145)(_QWORD, uint64_t);
  uint64_t v146;

  v3 = v1(v2, *(_QWORD *)(v0 + 1864), *(_QWORD *)(v0 + 1856));
  *(_QWORD *)(v0 + 2880) = *(_QWORD *)(v2 + 240);
  v4 = *(_OWORD *)(v2 + 208);
  *(_OWORD *)(v0 + 2832) = *(_OWORD *)(v2 + 192);
  *(_OWORD *)(v0 + 2848) = v4;
  *(_OWORD *)(v0 + 2864) = *(_OWORD *)(v2 + 224);
  v5 = *(_OWORD *)(v2 + 144);
  *(_OWORD *)(v0 + 2768) = *(_OWORD *)(v2 + 128);
  *(_OWORD *)(v0 + 2784) = v5;
  v6 = *(_OWORD *)(v2 + 176);
  *(_OWORD *)(v0 + 2800) = *(_OWORD *)(v2 + 160);
  *(_OWORD *)(v0 + 2816) = v6;
  v7 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(v0 + 2704) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(v0 + 2720) = v7;
  v8 = *(_OWORD *)(v2 + 112);
  *(_OWORD *)(v0 + 2736) = *(_OWORD *)(v2 + 96);
  *(_OWORD *)(v0 + 2752) = v8;
  v9 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v0 + 2640) = *(_OWORD *)v2;
  *(_OWORD *)(v0 + 2656) = v9;
  v10 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v0 + 2672) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v0 + 2688) = v10;
  MEMORY[0x24BDAC7A8](v3);
  *(_QWORD *)(v0 + 2384) = &type metadata for ActionCardViewLayout;
  *(_QWORD *)(v0 + 2392) = *(_QWORD *)(v0 + 1840);
  *(_QWORD *)(v0 + 2400) = &type metadata for ActionCardViewStyle;
  v11 = *(_QWORD *)(v0 + 1776);
  *(_QWORD *)(v0 + 2408) = v11;
  *(_QWORD *)(v0 + 2416) = v11;
  *(_QWORD *)(v0 + 2424) = v11;
  *(_QWORD *)(v0 + 2432) = *(_QWORD *)(v0 + 1680);
  *(_QWORD *)(v0 + 2440) = *(_QWORD *)(v0 + 1728);
  TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  *(_QWORD *)(v0 + 1792) = v2 + TupleTypeMetadata[12];
  v13 = *(unsigned __int8 *)(v2 + TupleTypeMetadata[16]);
  v14 = v2 + TupleTypeMetadata[20];
  v15 = v2 + TupleTypeMetadata[24];
  v16 = v2 + TupleTypeMetadata[28];
  v17 = v2 + TupleTypeMetadata[32];
  v18 = v2 + TupleTypeMetadata[36];
  v19 = *(_QWORD *)(v0 + 1816);
  if (!swift_getEnumCaseMultiPayload())
  {
    *(_DWORD *)(v0 + 1664) = v13;
    v20 = *(_OWORD *)(v19 + 96);
    *(_OWORD *)(v0 + 2496) = *(_OWORD *)(v19 + 112);
    *(_OWORD *)(v0 + 2480) = v20;
    v21 = *(_OWORD *)(v19 + 64);
    *(_OWORD *)(v0 + 2464) = *(_OWORD *)(v19 + 80);
    *(_OWORD *)(v0 + 2448) = v21;
    v22 = *(_OWORD *)(v19 + 160);
    *(_OWORD *)(v0 + 2560) = *(_OWORD *)(v19 + 176);
    *(_OWORD *)(v0 + 2544) = v22;
    v23 = *(_OWORD *)(v19 + 128);
    *(_OWORD *)(v0 + 2528) = *(_OWORD *)(v19 + 144);
    *(_OWORD *)(v0 + 2512) = v23;
    *(_QWORD *)(v0 + 2624) = *(_QWORD *)(v19 + 240);
    *(_OWORD *)(v0 + 2608) = *(_OWORD *)(v19 + 224);
    v24 = *(_OWORD *)(v19 + 192);
    *(_OWORD *)(v0 + 2592) = *(_OWORD *)(v19 + 208);
    *(_OWORD *)(v0 + 2576) = v24;
    v25 = *(_OWORD *)(v19 + 16);
    *(_OWORD *)(v0 + 2384) = *(_OWORD *)v19;
    *(_OWORD *)(v0 + 2400) = v25;
    v26 = *(_OWORD *)(v19 + 32);
    *(_OWORD *)(v0 + 2432) = *(_OWORD *)(v19 + 48);
    *(_OWORD *)(v0 + 2416) = v26;
    v27 = TupleTypeMetadata[12];
    *(_DWORD *)(v0 + 1648) = *(unsigned __int8 *)(v19 + TupleTypeMetadata[16]);
    v28 = v19;
    v29 = v19 + v27;
    *(_QWORD *)(v0 + 1672) = v28 + TupleTypeMetadata[20];
    *(_QWORD *)(v0 + 1744) = v28 + TupleTypeMetadata[24];
    *(_QWORD *)(v0 + 1760) = v28 + TupleTypeMetadata[28];
    *(_QWORD *)(v0 + 1776) = v28 + TupleTypeMetadata[32];
    *(_QWORD *)(v0 + 1816) = v28 + TupleTypeMetadata[36];
    v30 = *(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v0 + 1824) + 32);
    v31 = *(_QWORD *)(v0 + 1840);
    v30(*(_QWORD *)(v0 + 1216), *(_QWORD *)(v0 + 1792), v31);
    sub_23BEBEF90(v14, *(_QWORD *)(v0 + 1200));
    sub_23BEBEF90(v15, *(_QWORD *)(v0 + 1128));
    sub_23BEBEF90(v16, *(_QWORD *)(v0 + 1104));
    v32 = *(_QWORD *)(v0 + 1544);
    v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 32);
    v34 = *(_QWORD *)(v0 + 1680);
    v33(*(_QWORD *)(v0 + 1080), v17, v34);
    v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 1720) + 32);
    v36 = *(_QWORD *)(v0 + 1728);
    v35(*(_QWORD *)(v0 + 1064), v18, v36);
    v30(*(_QWORD *)(v0 + 1256), v29, v31);
    sub_23BEBEF90(*(_QWORD *)(v0 + 1672), *(_QWORD *)(v0 + 1192));
    sub_23BEBEF90(*(_QWORD *)(v0 + 1744), *(_QWORD *)(v0 + 1088));
    v37 = *(_QWORD *)(v0 + 808);
    sub_23BEBEF90(*(_QWORD *)(v0 + 1760), v37);
    v38 = *(_QWORD *)(v0 + 672);
    v39 = *(_QWORD *)(v0 + 1776);
    *(_QWORD *)(v0 + 1792) = v33;
    v33(v38, v39, v34);
    v40 = *(_QWORD *)(v0 + 800);
    v35(v40, *(_QWORD *)(v0 + 1816), v36);
    v41 = *(_OWORD *)(v0 + 2848);
    *(_OWORD *)(v0 + 2320) = *(_OWORD *)(v0 + 2832);
    *(_OWORD *)(v0 + 2336) = v41;
    *(_OWORD *)(v0 + 2352) = *(_OWORD *)(v0 + 2864);
    *(_QWORD *)(v0 + 2368) = *(_QWORD *)(v0 + 2880);
    v42 = *(_OWORD *)(v0 + 2784);
    *(_OWORD *)(v0 + 2256) = *(_OWORD *)(v0 + 2768);
    *(_OWORD *)(v0 + 2272) = v42;
    v43 = *(_OWORD *)(v0 + 2816);
    *(_OWORD *)(v0 + 2288) = *(_OWORD *)(v0 + 2800);
    *(_OWORD *)(v0 + 2304) = v43;
    v44 = *(_OWORD *)(v0 + 2720);
    *(_OWORD *)(v0 + 2192) = *(_OWORD *)(v0 + 2704);
    *(_OWORD *)(v0 + 2208) = v44;
    v45 = *(_OWORD *)(v0 + 2752);
    *(_OWORD *)(v0 + 2224) = *(_OWORD *)(v0 + 2736);
    *(_OWORD *)(v0 + 2240) = v45;
    v46 = *(_OWORD *)(v0 + 2656);
    *(_OWORD *)(v0 + 2128) = *(_OWORD *)(v0 + 2640);
    *(_OWORD *)(v0 + 2144) = v46;
    v47 = *(_OWORD *)(v0 + 2688);
    *(_OWORD *)(v0 + 2160) = *(_OWORD *)(v0 + 2672);
    *(_OWORD *)(v0 + 2176) = v47;
    v48 = *(_OWORD *)(v0 + 2592);
    *(_OWORD *)(v0 + 2064) = *(_OWORD *)(v0 + 2576);
    *(_OWORD *)(v0 + 2080) = v48;
    *(_OWORD *)(v0 + 2096) = *(_OWORD *)(v0 + 2608);
    *(_QWORD *)(v0 + 2112) = *(_QWORD *)(v0 + 2624);
    v49 = *(_OWORD *)(v0 + 2528);
    *(_OWORD *)(v0 + 2000) = *(_OWORD *)(v0 + 2512);
    *(_OWORD *)(v0 + 2016) = v49;
    v50 = *(_OWORD *)(v0 + 2560);
    *(_OWORD *)(v0 + 2032) = *(_OWORD *)(v0 + 2544);
    *(_OWORD *)(v0 + 2048) = v50;
    v51 = *(_OWORD *)(v0 + 2464);
    *(_OWORD *)(v0 + 1936) = *(_OWORD *)(v0 + 2448);
    *(_OWORD *)(v0 + 1952) = v51;
    v52 = *(_OWORD *)(v0 + 2496);
    *(_OWORD *)(v0 + 1968) = *(_OWORD *)(v0 + 2480);
    *(_OWORD *)(v0 + 1984) = v52;
    v53 = *(_OWORD *)(v0 + 2400);
    *(_OWORD *)(v0 + 1872) = *(_OWORD *)(v0 + 2384);
    *(_OWORD *)(v0 + 1888) = v53;
    v54 = *(_OWORD *)(v0 + 2432);
    *(_OWORD *)(v0 + 1904) = *(_OWORD *)(v0 + 2416);
    *(_OWORD *)(v0 + 1920) = v54;
    v55 = v31;
    if (!_s15FitnessCanvasUI20ActionCardViewLayoutV2eeoiySbAC_ACtFZ_0(v0 + 2128, v0 + 1872))
    {
      v66 = v34;
      v67 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 1720) + 8);
      v68 = v40;
      v69 = *(_QWORD *)(v0 + 1728);
      v67(v68, v69);
      v70 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
      v70(v38, v66);
      sub_23BE9F3A0(v37, &qword_256AE3618);
      sub_23BE9F3A0(*(_QWORD *)(v0 + 1088), &qword_256AE3618);
      sub_23BE9F3A0(*(_QWORD *)(v0 + 1192), &qword_256AE3618);
      v71 = *(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v0 + 1824) + 8);
      v71(*(_QWORD *)(v0 + 1256), v31);
      v67(*(_QWORD *)(v0 + 1064), v69);
      v70(*(_QWORD *)(v0 + 1080), v66);
      sub_23BE9F3A0(*(_QWORD *)(v0 + 1104), &qword_256AE3618);
      sub_23BE9F3A0(*(_QWORD *)(v0 + 1128), &qword_256AE3618);
      sub_23BE9F3A0(*(_QWORD *)(v0 + 1200), &qword_256AE3618);
      v71(*(_QWORD *)(v0 + 1216), v31);
      goto LABEL_29;
    }
    v56 = *(_QWORD *)(v0 + 1696);
    v57 = v32;
    v58 = *(_QWORD *)(v0 + 1216);
    v59 = *(_QWORD *)(v0 + 1256);
    v60 = v55;
    if ((sub_23BFF93AC() & 1) != 0)
    {
      v61 = *(_QWORD *)(v0 + 1824);
      if (*(_DWORD *)(v0 + 1664) == *(_DWORD *)(v0 + 1648))
      {
        v62 = *(_QWORD *)(v0 + 400);
        v63 = v62 + *(int *)(*(_QWORD *)(v0 + 1688) + 48);
        sub_23BEF2434(*(_QWORD *)(v0 + 1200), v62);
        sub_23BEF2434(*(_QWORD *)(v0 + 1192), v63);
        v64 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 1704) + 48);
        v65 = v56;
        if (v64(v62, 1, v56) == 1)
        {
          if (v64(v63, 1, v56) == 1)
          {
            sub_23BE9F3A0(v62, &qword_256AE3618);
            v65 = v56;
            goto LABEL_17;
          }
        }
        else
        {
          v80 = *(_QWORD *)(v0 + 280);
          sub_23BEF2434(v62, v80);
          if (v64(v63, 1, v56) != 1)
          {
            v81 = *(_QWORD *)(v0 + 1704);
            v82 = *(_QWORD *)(v0 + 984);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v81 + 32))(v82, v63, v56);
            sub_23BEF247C(qword_256AE46B0, MEMORY[0x24BDCC5C8]);
            v83 = sub_23BFF93AC();
            v84 = *(void (**)(uint64_t, uint64_t))(v81 + 8);
            v84(v82, v56);
            v84(v80, v56);
            v61 = *(_QWORD *)(v0 + 1824);
            v57 = *(_QWORD *)(v0 + 1544);
            sub_23BE9F3A0(v62, &qword_256AE3618);
            if ((v83 & 1) != 0)
            {
LABEL_17:
              v85 = *(_QWORD *)(v0 + 240);
              v86 = v85 + *(int *)(*(_QWORD *)(v0 + 1688) + 48);
              v87 = *(_QWORD *)(v0 + 1128);
              sub_23BEF2434(v87, v85);
              v88 = *(_QWORD *)(v0 + 1088);
              sub_23BEF2434(v88, v86);
              if (v64(v85, 1, v65) == 1)
              {
                if (v64(v86, 1, v65) == 1)
                {
                  sub_23BE9F3A0(v85, &qword_256AE3618);
                  v65 = v56;
                  goto LABEL_33;
                }
              }
              else
              {
                v94 = *(_QWORD *)(v0 + 136);
                sub_23BEF2434(v85, v94);
                if (v64(v86, 1, v65) != 1)
                {
                  v104 = v94;
                  v105 = *(_QWORD *)(v0 + 1704);
                  v106 = v85;
                  v107 = *(_QWORD *)(v0 + 984);
                  (*(void (**)(uint64_t, uint64_t, uint64_t))(v105 + 32))(v107, v86, v65);
                  sub_23BEF247C(qword_256AE46B0, MEMORY[0x24BDCC5C8]);
                  v108 = sub_23BFF93AC();
                  v109 = *(void (**)(uint64_t, uint64_t))(v105 + 8);
                  v109(v107, v65);
                  v109(v104, v65);
                  v57 = *(_QWORD *)(v0 + 1544);
                  v110 = v106;
                  v87 = *(_QWORD *)(v0 + 1128);
                  sub_23BE9F3A0(v110, &qword_256AE3618);
                  v61 = *(_QWORD *)(v0 + 1824);
                  if ((v108 & 1) != 0)
                  {
LABEL_33:
                    v111 = *(_QWORD *)(v0 + 120);
                    v112 = v111 + *(int *)(*(_QWORD *)(v0 + 1688) + 48);
                    sub_23BEF2434(*(_QWORD *)(v0 + 1104), v111);
                    sub_23BEF2434(*(_QWORD *)(v0 + 808), v112);
                    if (v64(v111, 1, v65) == 1)
                    {
                      if (v64(v112, 1, v65) == 1)
                      {
                        sub_23BE9F3A0(v111, &qword_256AE3618);
                        v113 = *(_QWORD *)(v0 + 800);
LABEL_41:
                        v120 = *(_QWORD *)(v0 + 1680);
                        if ((sub_23BFF93AC() & 1) != 0)
                        {
                          v121 = *(_QWORD *)(v0 + 80);
                          v122 = v121 + *(int *)(*(_QWORD *)(v0 + 496) + 48);
                          v123 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 1720) + 16);
                          v124 = *(_QWORD *)(v0 + 1728);
                          v123(v121, *(_QWORD *)(v0 + 1064), v124);
                          v123(v122, v113, v124);
                          v125 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v57 + 48);
                          if (v125(v121, 1, v120) == 1)
                          {
                            v126 = *(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v0 + 1720) + 8);
                            v126(*(_QWORD *)(v0 + 800), v124);
                            v127 = *(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v0 + 1544) + 8);
                            v127(*(_QWORD *)(v0 + 672), v120);
                            sub_23BE9F3A0(*(_QWORD *)(v0 + 808), &qword_256AE3618);
                            sub_23BE9F3A0(*(_QWORD *)(v0 + 1088), &qword_256AE3618);
                            sub_23BE9F3A0(*(_QWORD *)(v0 + 1192), &qword_256AE3618);
                            v128 = *(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v0 + 1824) + 8);
                            v129 = *(_QWORD *)(v0 + 1840);
                            v128(*(_QWORD *)(v0 + 1256), v129);
                            v126(*(_QWORD *)(v0 + 1064), v124);
                            v127(*(_QWORD *)(v0 + 1080), v120);
                            sub_23BE9F3A0(*(_QWORD *)(v0 + 1104), &qword_256AE3618);
                            sub_23BE9F3A0(*(_QWORD *)(v0 + 1128), &qword_256AE3618);
                            sub_23BE9F3A0(*(_QWORD *)(v0 + 1200), &qword_256AE3618);
                            v128(*(_QWORD *)(v0 + 1216), v129);
                            if (v125(v122, 1, v120) == 1)
                            {
                              v126(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 1728));
LABEL_50:
                              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1736) + 8))(*(_QWORD *)(v0 + 1864), *(_QWORD *)(v0 + 1856));
                              v102 = 1;
                              return v102 & 1;
                            }
                            goto LABEL_48;
                          }
                          v123(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 80), v124);
                          if (v125(v122, 1, v120) == 1)
                          {
                            v133 = *(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v0 + 1720) + 8);
                            v134 = *(_QWORD *)(v0 + 1728);
                            v133(*(_QWORD *)(v0 + 800), v134);
                            v135 = *(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v0 + 1544) + 8);
                            v136 = *(_QWORD *)(v0 + 1680);
                            v135(*(_QWORD *)(v0 + 672), v136);
                            sub_23BE9F3A0(*(_QWORD *)(v0 + 808), &qword_256AE3618);
                            sub_23BE9F3A0(*(_QWORD *)(v0 + 1088), &qword_256AE3618);
                            sub_23BE9F3A0(*(_QWORD *)(v0 + 1192), &qword_256AE3618);
                            v137 = *(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v0 + 1824) + 8);
                            v138 = *(_QWORD *)(v0 + 1840);
                            v137(*(_QWORD *)(v0 + 1256), v138);
                            v133(*(_QWORD *)(v0 + 1064), v134);
                            v135(*(_QWORD *)(v0 + 1080), v136);
                            sub_23BE9F3A0(*(_QWORD *)(v0 + 1104), &qword_256AE3618);
                            sub_23BE9F3A0(*(_QWORD *)(v0 + 1128), &qword_256AE3618);
                            sub_23BE9F3A0(*(_QWORD *)(v0 + 1200), &qword_256AE3618);
                            v137(*(_QWORD *)(v0 + 1216), v138);
                            v135(*(_QWORD *)(v0 + 48), v136);
LABEL_48:
                            (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 248) + 8))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 496));
                            goto LABEL_29;
                          }
                          v139 = *(_QWORD *)(v0 + 184);
                          v140 = *(_QWORD *)(v0 + 1680);
                          (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1792))(v139, v122, v140);
                          v141 = sub_23BFF93AC();
                          v142 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 1544) + 8);
                          v142(v139, v140);
                          v143 = *(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v0 + 1720) + 8);
                          v144 = *(_QWORD *)(v0 + 1728);
                          v143(*(_QWORD *)(v0 + 800), v144);
                          v142(*(_QWORD *)(v0 + 672), v140);
                          sub_23BE9F3A0(*(_QWORD *)(v0 + 808), &qword_256AE3618);
                          sub_23BE9F3A0(*(_QWORD *)(v0 + 1088), &qword_256AE3618);
                          sub_23BE9F3A0(*(_QWORD *)(v0 + 1192), &qword_256AE3618);
                          v145 = *(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v0 + 1824) + 8);
                          v146 = *(_QWORD *)(v0 + 1840);
                          v145(*(_QWORD *)(v0 + 1256), v146);
                          v143(*(_QWORD *)(v0 + 1064), v144);
                          v142(*(_QWORD *)(v0 + 1080), v140);
                          sub_23BE9F3A0(*(_QWORD *)(v0 + 1104), &qword_256AE3618);
                          sub_23BE9F3A0(*(_QWORD *)(v0 + 1128), &qword_256AE3618);
                          sub_23BE9F3A0(*(_QWORD *)(v0 + 1200), &qword_256AE3618);
                          v145(*(_QWORD *)(v0 + 1216), v146);
                          v142(*(_QWORD *)(v0 + 48), v140);
                          v143(*(_QWORD *)(v0 + 80), v144);
                          if ((v141 & 1) != 0)
                            goto LABEL_50;
LABEL_29:
                          (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1736) + 8))(*(_QWORD *)(v0 + 1864), *(_QWORD *)(v0 + 1856));
                          goto LABEL_30;
                        }
                        v130 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 1720) + 8);
                        v131 = *(_QWORD *)(v0 + 1728);
                        v130(v113, v131);
                        v132 = *(void (**)(_QWORD, uint64_t))(v57 + 8);
                        v132(*(_QWORD *)(v0 + 672), v120);
                        sub_23BE9F3A0(*(_QWORD *)(v0 + 808), &qword_256AE3618);
                        sub_23BE9F3A0(*(_QWORD *)(v0 + 1088), &qword_256AE3618);
                        sub_23BE9F3A0(*(_QWORD *)(v0 + 1192), &qword_256AE3618);
                        v77 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 1824) + 8);
                        v60 = *(_QWORD *)(v0 + 1840);
                        v77(*(_QWORD *)(v0 + 1256), v60);
                        v130(*(_QWORD *)(v0 + 1064), v131);
                        v132(*(_QWORD *)(v0 + 1080), v120);
                        sub_23BE9F3A0(*(_QWORD *)(v0 + 1104), &qword_256AE3618);
                        sub_23BE9F3A0(*(_QWORD *)(v0 + 1128), &qword_256AE3618);
                        v101 = *(_QWORD *)(v0 + 1200);
                        goto LABEL_27;
                      }
                    }
                    else
                    {
                      v114 = *(_QWORD *)(v0 + 88);
                      sub_23BEF2434(v111, v114);
                      if (v64(v112, 1, v65) != 1)
                      {
                        v116 = *(_QWORD *)(v0 + 1704);
                        v117 = *(_QWORD *)(v0 + 984);
                        (*(void (**)(uint64_t, uint64_t, uint64_t))(v116 + 32))(v117, v112, v65);
                        sub_23BEF247C(qword_256AE46B0, MEMORY[0x24BDCC5C8]);
                        v118 = sub_23BFF93AC();
                        v119 = *(void (**)(uint64_t, uint64_t))(v116 + 8);
                        v57 = *(_QWORD *)(v0 + 1544);
                        v119(v117, v65);
                        v119(v114, v65);
                        sub_23BE9F3A0(v111, &qword_256AE3618);
                        v113 = *(_QWORD *)(v0 + 800);
                        if ((v118 & 1) != 0)
                          goto LABEL_41;
                        goto LABEL_39;
                      }
                      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 1704) + 8))(v114, v65);
                    }
                    sub_23BE9F3A0(v111, &qword_256AE46A8);
                    v113 = *(_QWORD *)(v0 + 800);
LABEL_39:
                    v89 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 1720) + 8);
                    v90 = *(_QWORD *)(v0 + 1728);
                    v89(v113, v90);
                    v91 = *(void (**)(_QWORD, uint64_t))(v57 + 8);
                    v115 = v88;
                    v92 = *(_QWORD *)(v0 + 1680);
                    v91(*(_QWORD *)(v0 + 672), v92);
                    sub_23BE9F3A0(*(_QWORD *)(v0 + 808), &qword_256AE3618);
                    sub_23BE9F3A0(v115, &qword_256AE3618);
                    sub_23BE9F3A0(*(_QWORD *)(v0 + 1192), &qword_256AE3618);
                    v77 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 1824) + 8);
                    goto LABEL_21;
                  }
LABEL_25:
                  v95 = *(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v0 + 1720) + 8);
                  v96 = *(_QWORD *)(v0 + 1728);
                  v95(*(_QWORD *)(v0 + 800), v96);
                  v97 = *(void (**)(_QWORD, uint64_t))(v57 + 8);
                  v98 = v61;
                  v99 = v88;
                  v100 = *(_QWORD *)(v0 + 1680);
                  v97(*(_QWORD *)(v0 + 672), v100);
                  sub_23BE9F3A0(*(_QWORD *)(v0 + 808), &qword_256AE3618);
                  sub_23BE9F3A0(v99, &qword_256AE3618);
                  sub_23BE9F3A0(*(_QWORD *)(v0 + 1192), &qword_256AE3618);
                  v77 = *(void (**)(uint64_t, uint64_t))(v98 + 8);
                  v60 = *(_QWORD *)(v0 + 1840);
                  v77(*(_QWORD *)(v0 + 1256), v60);
                  v95(*(_QWORD *)(v0 + 1064), v96);
                  v97(*(_QWORD *)(v0 + 1080), v100);
                  sub_23BE9F3A0(*(_QWORD *)(v0 + 1104), &qword_256AE3618);
                  v93 = v87;
                  goto LABEL_26;
                }
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 1704) + 8))(v94, v65);
                v61 = *(_QWORD *)(v0 + 1824);
              }
              sub_23BE9F3A0(v85, &qword_256AE46A8);
              goto LABEL_25;
            }
LABEL_20:
            v89 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 1720) + 8);
            v90 = *(_QWORD *)(v0 + 1728);
            v89(*(_QWORD *)(v0 + 800), v90);
            v91 = *(void (**)(_QWORD, uint64_t))(v57 + 8);
            v92 = *(_QWORD *)(v0 + 1680);
            v91(*(_QWORD *)(v0 + 672), v92);
            sub_23BE9F3A0(*(_QWORD *)(v0 + 808), &qword_256AE3618);
            sub_23BE9F3A0(*(_QWORD *)(v0 + 1088), &qword_256AE3618);
            sub_23BE9F3A0(*(_QWORD *)(v0 + 1192), &qword_256AE3618);
            v77 = *(void (**)(uint64_t, uint64_t))(v61 + 8);
LABEL_21:
            v60 = *(_QWORD *)(v0 + 1840);
            v77(*(_QWORD *)(v0 + 1256), v60);
            v89(*(_QWORD *)(v0 + 1064), v90);
            v91(*(_QWORD *)(v0 + 1080), v92);
            sub_23BE9F3A0(*(_QWORD *)(v0 + 1104), &qword_256AE3618);
            v93 = *(_QWORD *)(v0 + 1128);
LABEL_26:
            sub_23BE9F3A0(v93, &qword_256AE3618);
            v101 = *(_QWORD *)(v0 + 1200);
LABEL_27:
            sub_23BE9F3A0(v101, &qword_256AE3618);
            v79 = *(_QWORD *)(v0 + 1216);
            goto LABEL_28;
          }
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 1704) + 8))(v80, v56);
        }
        sub_23BE9F3A0(v62, &qword_256AE46A8);
        goto LABEL_20;
      }
      v72 = *(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v0 + 1720) + 8);
      v78 = v38;
      v74 = *(_QWORD *)(v0 + 1728);
      v72(*(_QWORD *)(v0 + 800), v74);
      v75 = *(void (**)(uint64_t, uint64_t))(v57 + 8);
      v76 = *(_QWORD *)(v0 + 1680);
      v75(v78, v76);
      sub_23BE9F3A0(*(_QWORD *)(v0 + 808), &qword_256AE3618);
      sub_23BE9F3A0(*(_QWORD *)(v0 + 1088), &qword_256AE3618);
      sub_23BE9F3A0(*(_QWORD *)(v0 + 1192), &qword_256AE3618);
      v77 = *(void (**)(uint64_t, uint64_t))(v61 + 8);
      v60 = *(_QWORD *)(v0 + 1840);
      v77(*(_QWORD *)(v0 + 1256), v60);
    }
    else
    {
      v72 = *(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v0 + 1720) + 8);
      v73 = v38;
      v74 = *(_QWORD *)(v0 + 1728);
      v72(*(_QWORD *)(v0 + 800), v74);
      v75 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
      v76 = *(_QWORD *)(v0 + 1680);
      v75(v73, v76);
      sub_23BE9F3A0(*(_QWORD *)(v0 + 808), &qword_256AE3618);
      sub_23BE9F3A0(*(_QWORD *)(v0 + 1088), &qword_256AE3618);
      sub_23BE9F3A0(*(_QWORD *)(v0 + 1192), &qword_256AE3618);
      v77 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 1824) + 8);
      v77(v59, v60);
    }
    v72(*(_QWORD *)(v0 + 1064), v74);
    v75(*(_QWORD *)(v0 + 1080), v76);
    sub_23BE9F3A0(*(_QWORD *)(v0 + 1104), &qword_256AE3618);
    sub_23BE9F3A0(*(_QWORD *)(v0 + 1128), &qword_256AE3618);
    sub_23BE9F3A0(*(_QWORD *)(v0 + 1200), &qword_256AE3618);
    v79 = v58;
LABEL_28:
    v77(v79, v60);
    goto LABEL_29;
  }
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 1720) + 8))(v18, *(_QWORD *)(v0 + 1728));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 1544) + 8))(v17, *(_QWORD *)(v0 + 1680));
  sub_23BE9F3A0(v16, &qword_256AE3618);
  sub_23BE9F3A0(v15, &qword_256AE3618);
  sub_23BE9F3A0(v14, &qword_256AE3618);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1824) + 8))(*(_QWORD *)(v0 + 1792), *(_QWORD *)(v0 + 1840));
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1744) + 8))(*(_QWORD *)(v0 + 1864), *(_QWORD *)(v0 + 1760));
LABEL_30:
  v102 = 0;
  return v102 & 1;
}

uint64_t CanvasItemContent.hashValue.getter(_QWORD *a1)
{
  _BYTE v3[72];

  sub_23BFF99D0();
  CanvasItemContent.hash(into:)((uint64_t)v3, a1);
  return sub_23BFF9A00();
}

uint64_t sub_23BEF23E0(uint64_t a1, _QWORD *a2)
{
  _BYTE v4[72];

  sub_23BFF99D0();
  CanvasItemContent.hash(into:)((uint64_t)v4, a2);
  return sub_23BFF9A00();
}

void sub_23BEF2420(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  static CanvasItemContent.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6], a3[7]);
}

uint64_t sub_23BEF2434(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3618);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BEF247C(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_23BFF82CC();
    result = MEMORY[0x242615198](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

void sub_23BEF24BC()
{
  JUMPOUT(0x242615198);
}

uint64_t sub_23BEF24CC()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_23BEF24D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  void *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t *v57;

  v32 = &unk_23BFFD8C8;
  v2 = swift_checkMetadataState();
  v3 = v2;
  if (v4 <= 0x3F)
  {
    v5 = *(_QWORD *)(v2 - 8) + 64;
    v33 = v5;
    v34 = &unk_23BFFD8E0;
    sub_23BEFEB9C();
    if (v7 > 0x3F)
      return v6;
    v8 = *(_QWORD *)(v6 - 8) + 64;
    v35 = (void *)v8;
    v36 = v8;
    v37 = v8;
    v9 = swift_checkMetadataState();
    if (v10 > 0x3F)
      return v9;
    v38 = *(_QWORD *)(v9 - 8) + 64;
    v6 = sub_23BFF96A0();
    if (v11 > 0x3F)
    {
      return v6;
    }
    else
    {
      v12 = *(_QWORD *)(v6 - 8) + 64;
      v39 = v12;
      swift_getTupleTypeLayout();
      v43 = &v42;
      v14 = type metadata accessor for FullWidthItemDescriptor(319, v3, *(_QWORD *)(a1 + 48), v13);
      v3 = v14;
      if (v15 <= 0x3F)
      {
        v44 = *(_QWORD *)(v14 - 8) + 64;
        v32 = &unk_23BFFD8F8;
        v33 = v5;
        v34 = &unk_23BFFD910;
        v35 = (void *)v8;
        v36 = v8;
        v37 = v8;
        v38 = v12;
        v39 = v12;
        v16 = sub_23BFF96A0();
        v3 = v16;
        if (v17 <= 0x3F)
        {
          v40 = *(_QWORD *)(v16 - 8) + 64;
          swift_getTupleTypeLayout();
          v45 = &v41;
          swift_getTupleTypeLayout();
          v46 = &v31;
          v32 = (void *)v5;
          v33 = v8;
          v34 = (void *)v8;
          v35 = (void *)v8;
          swift_getTupleTypeLayout();
          v47 = &v30;
          v32 = (void *)v5;
          v33 = v8;
          v34 = &unk_23BFFD910;
          v35 = &unk_23BFFD940;
          v36 = v8;
          swift_getTupleTypeLayout();
          v48 = &v29;
          v32 = &unk_23BFFD958;
          v33 = v5;
          v34 = (void *)v8;
          v35 = (void *)v8;
          swift_getTupleTypeLayout();
          v49 = &v28;
          v32 = (void *)v5;
          v33 = v8;
          v34 = &unk_23BFFD910;
          v35 = &unk_23BFFD940;
          v36 = v8;
          swift_getTupleTypeLayout();
          v50 = &v27;
          v32 = &unk_23BFFD970;
          v33 = v5;
          v34 = (void *)v8;
          v35 = (void *)v8;
          v36 = v8;
          swift_getTupleTypeLayout();
          v51 = &v26;
          v32 = &unk_23BFFD988;
          v33 = v5;
          v34 = (void *)v8;
          v35 = (void *)v8;
          v36 = v8;
          v37 = v8;
          v38 = v12;
          swift_getTupleTypeLayout();
          v52 = &v25;
          v32 = &unk_23BFFD9A0;
          v33 = v5;
          v34 = (void *)v8;
          v35 = (void *)v8;
          v36 = v8;
          swift_getTupleTypeLayout();
          v53 = &v24;
          v32 = &unk_23BFFD9B8;
          v33 = v5;
          v34 = (void *)v8;
          v35 = &unk_23BFFD9D0;
          swift_getTupleTypeLayout();
          v54 = &v23;
          v32 = &unk_23BFFD9E8;
          v33 = v5;
          v34 = (void *)v8;
          v35 = (void *)v8;
          v36 = v8;
          swift_getTupleTypeLayout();
          v55 = &v22;
          v18 = swift_checkMetadataState();
          v3 = v18;
          if (v19 <= 0x3F)
          {
            v56 = *(_QWORD *)(v18 - 8) + 64;
            swift_getTupleTypeLayout3();
            v57 = &v21;
            swift_initEnumMetadataMultiPayload();
            return 0;
          }
        }
      }
    }
  }
  return v3;
}

uint64_t *sub_23BEF28A8(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  size_t v9;
  size_t v10;
  size_t v11;
  size_t v12;
  uint64_t v13;
  int v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  size_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  size_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *result;
  uint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  const void *v61;
  unsigned int (*v62)(const void *, uint64_t, uint64_t);
  size_t v63;
  unsigned int v64;
  uint64_t v65;
  unint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  size_t v75;
  void *v76;
  const void *v77;
  unsigned int (*v78)(const void *, uint64_t, uint64_t);
  size_t v79;
  unint64_t v80;
  __int128 v81;
  __int128 v82;
  void *v83;
  const void *v84;
  unsigned int (*v85)(const void *, uint64_t, uint64_t);
  size_t v86;
  void *v87;
  const void *v88;
  unsigned int (*v89)(const void *, uint64_t, uint64_t);
  size_t v90;
  uint64_t v91;
  unint64_t v92;
  void *v93;
  const void *v94;
  unsigned int (*v95)(const void *, uint64_t, uint64_t);
  size_t v96;
  unint64_t v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  const void *v106;
  unsigned int (*v107)(const void *, uint64_t, uint64_t);
  size_t v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  const void *v114;
  size_t v115;
  unint64_t v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  const void *v124;
  unsigned int (*v125)(const void *, uint64_t, uint64_t);
  size_t v126;
  unint64_t v127;
  unint64_t v128;
  void *v129;
  uint64_t v130;
  const void *v131;
  unsigned int (*v132)(const void *, uint64_t, uint64_t);
  size_t v133;
  uint64_t v134;
  unint64_t v135;
  void *v136;
  const void *v137;
  unsigned int (*v138)(const void *, uint64_t, uint64_t);
  size_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  const void *v144;
  unsigned int (*v145)(const void *, uint64_t, uint64_t);
  size_t v146;
  unint64_t v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  const void *v154;
  unsigned int (*v155)(const void *, uint64_t, uint64_t);
  size_t v156;
  unint64_t v157;
  __int128 v158;
  uint64_t v159;
  uint64_t v160;
  void *v161;
  const void *v162;
  unsigned int (*v163)(const void *, uint64_t, uint64_t);
  size_t v164;
  size_t v165;
  size_t v166;
  void *v167;
  const void *v168;
  void *v169;
  const void *v170;
  void *v171;
  const void *v172;
  void *v173;
  const void *v174;
  unint64_t v175;
  unint64_t v176;
  void *v177;
  const void *v178;
  void *v179;
  const void *v180;
  size_t v181;
  void *v182;
  const void *v183;
  void *v184;
  const void *v185;
  void *v186;
  const void *v187;
  unint64_t v188;
  void *v189;
  const void *v190;
  unint64_t v191;
  void *v192;
  const void *v193;
  void *v194;
  const void *v195;
  void *v196;
  const void *v197;
  void *v198;
  const void *v199;
  unint64_t v200;
  unint64_t v201;
  void (*v202)(unint64_t, unint64_t, uint64_t);
  void *v203;
  const void *v204;
  void *v205;
  const void *v206;
  unsigned int (*v207)(const void *, uint64_t, uint64_t);
  size_t v208;
  void *v209;
  const void *v210;
  unsigned int v211;
  unint64_t v212;
  void *v213;
  const void *v214;
  void *v215;
  const void *v216;
  void *v217;
  const void *v218;
  unint64_t v219;
  unint64_t v220;
  void *v221;
  const void *v222;
  void *v223;
  const void *v224;
  void *v225;
  const void *v226;
  void *v227;
  const void *v228;
  void *v229;
  const void *v230;
  void *v231;
  const void *v232;
  uint64_t v233;
  char v234;
  uint64_t v235;
  unsigned int (*v236)(uint64_t *, uint64_t, uint64_t);
  void *v237;
  void *v238;
  unint64_t v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  size_t v246;
  unint64_t v247;
  unint64_t v248;
  unint64_t v249;
  unint64_t v250;
  size_t v251;
  unint64_t v252;
  uint64_t v253;
  uint64_t v254;
  size_t v255;
  size_t v256;
  size_t __n;
  uint64_t v258;
  uint64_t v259;
  size_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  int v265;
  unint64_t v266;
  uint64_t v267;
  int v268;
  unint64_t v269;
  uint64_t v270;
  int v271;
  uint64_t v272;
  unint64_t v273;
  uint64_t v276;
  size_t v277;
  uint64_t v278;
  uint64_t v279;
  size_t v281;
  uint64_t v282;
  unint64_t v283;
  size_t v284;
  uint64_t v285;

  v262 = a3[3];
  v4 = *(_QWORD *)(v262 - 8);
  v271 = *(_DWORD *)(v4 + 80);
  v261 = v4;
  v5 = *(_QWORD *)(v4 + 64);
  v263 = sub_23BFF82CC();
  v6 = *(_QWORD *)(v263 - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v268 = *(_DWORD *)(v6 + 80);
  v8 = v268;
  v9 = v5 + v268;
  v252 = v9 + 1 + ((v271 + 248) & ~(unint64_t)v271);
  v264 = v6;
  v10 = *(_QWORD *)(v6 + 64);
  if (v7)
    v11 = v10;
  else
    v11 = v10 + 1;
  v12 = v11 + v268;
  v258 = a3[2];
  v13 = *(_QWORD *)(v258 - 8);
  v14 = *(_DWORD *)(v13 + 84);
  v265 = *(_DWORD *)(v13 + 80);
  v15 = v11 + v265;
  v259 = v13;
  v16 = *(_QWORD *)(v13 + 64);
  v255 = v16 + v265;
  if (v14)
    v17 = v16;
  else
    v17 = v16 + 1;
  v283 = ((v255
         + ((v15
           + ((v11
             + v268
             + ((v11 + v268 + (v252 & ~(unint64_t)v268)) & ~(unint64_t)v268)) & ~(unint64_t)v268)) & ~(unint64_t)v265)) & ~(unint64_t)v265)
       + v17;
  v260 = v5;
  if (v10 <= v5)
    v18 = v5;
  else
    v18 = v10;
  v20 = sub_23BFF8368();
  v21 = v271;
  v22 = v265;
  v241 = v20;
  v23 = *(_QWORD *)(v20 - 8);
  v24 = *(_DWORD *)(v23 + 80);
  v25 = *(_QWORD *)(v23 + 64);
  v19 = v12 & ~(unint64_t)v268;
  if (((v11 + v24 + v19) & ~v24) + v25 <= v18)
    v26 = v18;
  else
    v26 = ((v11 + v24 + v19) & ~v24) + v25;
  v253 = v17 + v265;
  v254 = a3[4];
  v27 = *(_QWORD *)(v254 - 8);
  v28 = *(_DWORD *)(v27 + 80);
  v29 = *(_QWORD *)(v27 + 64);
  if (*(_DWORD *)(v27 + 84))
    v30 = *(_QWORD *)(v27 + 64);
  else
    v30 = v29 + 1;
  v31 = ((v17
        + v28
        + ((v17
          + v265
          + ((v15
            + ((v12
              + ((v12
                + ((v9 + 1 + ((v271 + 216) & ~(unint64_t)v271)) & ~(unint64_t)v268)) & ~(unint64_t)v268)) & ~(unint64_t)v268)) & ~(unint64_t)v265)) & ~(unint64_t)v265)) & ~v28)
      + v30;
  v32 = ((v15
        + ((v12 + ((v268 + 64) & ~(unint64_t)v268)) & ~(unint64_t)v268)) & ~(unint64_t)v265)
      + v17;
  v33 = (v9 & ~(unint64_t)v268) + v11;
  v34 = ((v33 + v268) & ~(unint64_t)v268) + v11;
  v35 = ((v268 + 24 + (v33 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)v268) + v11;
  v277 = v11 + v265;
  __n = v17;
  v36 = ((v15
        + ((v12
          + ((v12
            + ((v12
              + ((v9 + ((v271 + 160) & ~(unint64_t)v271)) & ~(unint64_t)v268)) & ~(unint64_t)v268)) & ~(unint64_t)v268)) & ~(unint64_t)v268)) & ~(unint64_t)v265)
      + v17;
  v37 = ((v12
        + ((v12
          + ((v9 + ((v271 + 56) & ~(unint64_t)v271)) & ~(unint64_t)v268)) & ~(unint64_t)v268)) & ~(unint64_t)v268)
      + v11;
  v38 = ((v9 + ((v271 + 64) & ~(unint64_t)v271)) & ~(unint64_t)v268)
      + v11;
  v250 = v35;
  v251 = v26 + 1;
  if (v35 <= v283)
    v35 = v283;
  if (v35 <= v26 + 1)
    v35 = v26 + 1;
  if (v35 <= v31)
    v35 = v31;
  if (v35 <= v32)
    v35 = v32;
  v248 = ((v12
         + ((v9 + ((v271 + 24) & ~(unint64_t)v271)) & ~(unint64_t)v268)) & ~(unint64_t)v268)
       + v11;
  v249 = ((v34 + v268) & ~(unint64_t)v268) + v11;
  if (v35 <= v249)
    v35 = ((v34 + v268) & ~(unint64_t)v268) + v11;
  if (v35 <= ((v12
              + ((v9 + ((v271 + 24) & ~(unint64_t)v271)) & ~(unint64_t)v268)) & ~(unint64_t)v268)
            + v11)
    v35 = ((v12
          + ((v9 + ((v271 + 24) & ~(unint64_t)v271)) & ~(unint64_t)v268)) & ~(unint64_t)v268)
        + v11;
  v246 = v38 + 1;
  v247 = ((v12
         + ((v12
           + ((v9 + ((v271 + 104) & ~(unint64_t)v271)) & ~(unint64_t)v268)) & ~(unint64_t)v268)) & ~(unint64_t)v268)
       + v11;
  if (v35 <= v247)
    v35 = ((v12
          + ((v12
            + ((v9 + ((v271 + 104) & ~(unint64_t)v271)) & ~(unint64_t)v268)) & ~(unint64_t)v268)) & ~(unint64_t)v268)
        + v11;
  if (v35 <= v36)
    v35 = v36;
  if (v35 <= v37)
    v35 = ((v12
          + ((v12
            + ((v9 + ((v271 + 56) & ~(unint64_t)v271)) & ~(unint64_t)v268)) & ~(unint64_t)v268)) & ~(unint64_t)v268)
        + v11;
  if (v35 <= v38 + 1)
    v39 = v38 + 1;
  else
    v39 = v35;
  v40 = v268 | (unint64_t)v271 | v265 | v24;
  v41 = v9;
  v281 = v11 + v268;
  v284 = v11;
  v42 = ((v12
        + ((v12
          + ((v9 + ((v271 + 128) & ~(unint64_t)v271)) & ~(unint64_t)v268)) & ~(unint64_t)v268)) & ~(unint64_t)v268)
      + v11;
  if (v39 <= v42)
    v39 = v42;
  if (v39 <= v34)
    v39 = v34;
  if (v39 <= v29)
    v43 = *(_QWORD *)(v27 + 64);
  else
    v43 = v39;
  if ((v40 | v28) > 7
    || ((v268 | v271 | v265 | *(_DWORD *)(v23 + 80) | *(_DWORD *)(v27 + 80)) & 0x100000) != 0
    || v43 + 1 > 0x18)
  {
    v45 = *a2;
    *a1 = *a2;
    v47 = (uint64_t *)(v45 + (((v40 | v28) & 0xF8 ^ 0x1F8) & ((v40 | v28) + 16)));
    swift_retain();
  }
  else
  {
    v266 = v37;
    v269 = v36;
    v47 = a1;
    v48 = ~(unint64_t)v271;
    v276 = ~v8;
    v49 = ~v22;
    v272 = ~v28;
    switch(*((_BYTE *)a2 + v43))
    {
      case 0:
        v50 = v43;
        v242 = ~v22;
        v51 = *((_OWORD *)a2 + 13);
        *((_OWORD *)v47 + 12) = *((_OWORD *)a2 + 12);
        *((_OWORD *)v47 + 13) = v51;
        *((_OWORD *)v47 + 14) = *((_OWORD *)a2 + 14);
        v47[30] = a2[30];
        v52 = *((_OWORD *)a2 + 9);
        *((_OWORD *)v47 + 8) = *((_OWORD *)a2 + 8);
        *((_OWORD *)v47 + 9) = v52;
        v53 = *((_OWORD *)a2 + 11);
        *((_OWORD *)v47 + 10) = *((_OWORD *)a2 + 10);
        *((_OWORD *)v47 + 11) = v53;
        v54 = *((_OWORD *)a2 + 5);
        *((_OWORD *)v47 + 4) = *((_OWORD *)a2 + 4);
        *((_OWORD *)v47 + 5) = v54;
        v55 = *((_OWORD *)a2 + 7);
        *((_OWORD *)v47 + 6) = *((_OWORD *)a2 + 6);
        *((_OWORD *)v47 + 7) = v55;
        v56 = *((_OWORD *)a2 + 1);
        *(_OWORD *)v47 = *(_OWORD *)a2;
        *((_OWORD *)v47 + 1) = v56;
        v57 = *((_OWORD *)a2 + 3);
        *((_OWORD *)v47 + 2) = *((_OWORD *)a2 + 2);
        *((_OWORD *)v47 + 3) = v57;
        v58 = ((unint64_t)v47 + v21 + 248) & v48;
        v59 = ((unint64_t)a2 + v21 + 248) & v48;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v261 + 16))(v58, v59, v262);
        *(_BYTE *)(v58 + v260) = *(_BYTE *)(v59 + v260);
        v60 = (void *)((v58 + v260 + v8 + 1) & v276);
        v61 = (const void *)((v59 + v260 + v8 + 1) & v276);
        v62 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v264 + 48);
        if (v62(v61, 1, v263))
        {
          v63 = v284;
          memcpy(v60, v61, v284);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v264 + 16))(v60, v61, v263);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v264 + 56))(v60, 0, 1, v263);
          v63 = v284;
        }
        v167 = (void *)(((unint64_t)v60 + v281) & v276);
        v168 = (const void *)(((unint64_t)v61 + v281) & v276);
        if (v62(v168, 1, v263))
        {
          memcpy(v167, v168, v63);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v264 + 16))(v167, v168, v263);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v264 + 56))(v167, 0, 1, v263);
        }
        v186 = (void *)(((unint64_t)v167 + v281) & v276);
        v187 = (const void *)(((unint64_t)v168 + v281) & v276);
        v188 = v50;
        if (v62(v187, 1, v263))
        {
          memcpy(v186, v187, v63);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v264 + 16))(v186, v187, v263);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v264 + 56))(v186, 0, 1, v263);
        }
        v200 = ((unint64_t)v186 + v277) & v242;
        v201 = ((unint64_t)v187 + v277) & v242;
        v202 = *(void (**)(unint64_t, unint64_t, uint64_t))(v259 + 16);
        v202(v200, v201, v258);
        v203 = (void *)((v255 + v200) & v242);
        v204 = (const void *)((v255 + v201) & v242);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v259 + 48))(v204, 1, v258))
        {
          memcpy(v203, v204, __n);
        }
        else
        {
          v202((unint64_t)v203, (unint64_t)v204, v258);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v259 + 56))(v203, 0, 1, v258);
        }
        *((_BYTE *)v47 + v188) = 0;
        break;
      case 1:
        v64 = *((unsigned __int8 *)a2 + v26);
        if (v64 >= 3)
        {
          if (v26 <= 3)
            v65 = v26;
          else
            v65 = 4;
          __asm { BR              X12 }
        }
        v166 = v281;
        v165 = v284;
        if (v64 == 2)
        {
          v235 = ~v24;
          v279 = *(_DWORD *)(v23 + 80);
          v282 = *(_QWORD *)(v20 - 8);
          v285 = v26;
          v236 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v264 + 48);
          v240 = v43;
          if (v236(a2, 1, v263))
          {
            memcpy(v47, a2, v165);
          }
          else
          {
            (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v264 + 16))(v47, a2, v263);
            (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v264 + 56))(v47, 0, 1, v263);
          }
          v237 = (void *)(((unint64_t)v47 + v166) & v276);
          v238 = (void *)(((unint64_t)a2 + v166) & v276);
          if (v236((uint64_t *)v238, 1, v263))
          {
            memcpy(v237, v238, v165);
          }
          else
          {
            (*(void (**)(void *, void *, uint64_t))(v264 + 16))(v237, v238, v263);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v264 + 56))(v237, 0, 1, v263);
          }
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v282 + 16))(((unint64_t)v237 + v165 + v279) & v235, ((unint64_t)v238 + v165 + v279) & v235, v241);
          v234 = 2;
          v43 = v240;
          v233 = v285;
        }
        else
        {
          v233 = v26;
          if (v64 == 1)
          {
            (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v264 + 16))(v47, a2, v263);
            v234 = 1;
          }
          else
          {
            (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v261 + 16))(v47, a2, v262);
            v234 = 0;
          }
        }
        *((_BYTE *)v47 + v233) = v234;
        *((_BYTE *)v47 + v43) = 1;
        break;
      case 2:
        v66 = v43;
        v267 = *(_DWORD *)(v27 + 80);
        v256 = v30;
        v270 = *(_QWORD *)(v254 - 8);
        v243 = ~v22;
        v67 = *((_OWORD *)a2 + 11);
        *((_OWORD *)v47 + 10) = *((_OWORD *)a2 + 10);
        *((_OWORD *)v47 + 11) = v67;
        *((_OWORD *)v47 + 12) = *((_OWORD *)a2 + 12);
        v47[26] = a2[26];
        v68 = *((_OWORD *)a2 + 7);
        *((_OWORD *)v47 + 6) = *((_OWORD *)a2 + 6);
        *((_OWORD *)v47 + 7) = v68;
        v69 = *((_OWORD *)a2 + 9);
        *((_OWORD *)v47 + 8) = *((_OWORD *)a2 + 8);
        *((_OWORD *)v47 + 9) = v69;
        v70 = *((_OWORD *)a2 + 3);
        *((_OWORD *)v47 + 2) = *((_OWORD *)a2 + 2);
        *((_OWORD *)v47 + 3) = v70;
        v71 = *((_OWORD *)a2 + 5);
        *((_OWORD *)v47 + 4) = *((_OWORD *)a2 + 4);
        *((_OWORD *)v47 + 5) = v71;
        v72 = *((_OWORD *)a2 + 1);
        *(_OWORD *)v47 = *(_OWORD *)a2;
        *((_OWORD *)v47 + 1) = v72;
        v73 = ((unint64_t)v47 + v21 + 216) & v48;
        v74 = ((unint64_t)a2 + v21 + 216) & v48;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v261 + 16))(v73, v74, v262);
        v75 = v74 + v260;
        *(_BYTE *)(v73 + v260) = *(_BYTE *)(v74 + v260);
        v76 = (void *)((v73 + v260 + v8 + 1) & v276);
        v77 = (const void *)((v75 + v8 + 1) & v276);
        v78 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v264 + 48);
        if (v78(v77, 1, v263))
        {
          v79 = v284;
          memcpy(v76, v77, v284);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v264 + 16))(v76, v77, v263);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v264 + 56))(v76, 0, 1, v263);
          v79 = v284;
        }
        v169 = (void *)(((unint64_t)v76 + v281) & v276);
        v170 = (const void *)(((unint64_t)v77 + v281) & v276);
        if (v78(v170, 1, v263))
        {
          memcpy(v169, v170, v79);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v264 + 16))(v169, v170, v263);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v264 + 56))(v169, 0, 1, v263);
        }
        v189 = (void *)(((unint64_t)v169 + v281) & v276);
        v190 = (const void *)(((unint64_t)v170 + v281) & v276);
        v191 = v66;
        if (v78(v190, 1, v263))
        {
          memcpy(v189, v190, v79);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v264 + 16))(v189, v190, v263);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v264 + 56))(v189, 0, 1, v263);
        }
        v205 = (void *)(((unint64_t)v189 + v277) & v243);
        v206 = (const void *)(((unint64_t)v190 + v277) & v243);
        v207 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v259 + 48);
        if (v207(v206, 1, v258))
        {
          v208 = __n;
          memcpy(v205, v206, __n);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v259 + 16))(v205, v206, v258);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v259 + 56))(v205, 0, 1, v258);
          v208 = __n;
        }
        v213 = (void *)(((unint64_t)v205 + v253) & v243);
        v214 = (const void *)(((unint64_t)v206 + v253) & v243);
        if (v207(v214, 1, v258))
        {
          memcpy(v213, v214, v208);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v259 + 16))(v213, v214, v258);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v259 + 56))(v213, 0, 1, v258);
        }
        v217 = (void *)(((unint64_t)v213 + v208 + v267) & v272);
        v218 = (const void *)(((unint64_t)v214 + v208 + v267) & v272);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v270 + 48))(v218, 1, v254))
        {
          memcpy(v217, v218, v256);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v270 + 16))(v217, v218, v254);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v270 + 56))(v217, 0, 1, v254);
        }
        *((_BYTE *)v47 + v191) = 2;
        break;
      case 3:
        v80 = v43;
        v278 = v22;
        v81 = *((_OWORD *)a2 + 1);
        *(_OWORD *)v47 = *(_OWORD *)a2;
        *((_OWORD *)v47 + 1) = v81;
        v82 = *((_OWORD *)a2 + 3);
        *((_OWORD *)v47 + 2) = *((_OWORD *)a2 + 2);
        *((_OWORD *)v47 + 3) = v82;
        v83 = (void *)(((unint64_t)v47 + v8 + 64) & v276);
        v84 = (const void *)(((unint64_t)a2 + v8 + 64) & v276);
        v85 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v264 + 48);
        if (v85(v84, 1, v263))
        {
          v86 = v284;
          memcpy(v83, v84, v284);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v264 + 16))(v83, v84, v263);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v264 + 56))(v83, 0, 1, v263);
          v86 = v284;
        }
        v171 = (void *)(((unint64_t)v83 + v281) & v276);
        v172 = (const void *)(((unint64_t)v84 + v281) & v276);
        if (v85(v172, 1, v263))
        {
          memcpy(v171, v172, v86);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v264 + 16))(v171, v172, v263);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v264 + 56))(v171, 0, 1, v263);
        }
        v192 = (void *)(((unint64_t)v171 + v86 + v278) & v49);
        v193 = (const void *)(((unint64_t)v172 + v86 + v278) & v49);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v259 + 48))(v193, 1, v258))
        {
          memcpy(v192, v193, __n);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v259 + 16))(v192, v193, v258);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v259 + 56))(v192, 0, 1, v258);
        }
        *((_BYTE *)v47 + v80) = 3;
        break;
      case 4:
        v239 = v43;
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v261 + 16))(v47, a2, v262);
        v87 = (void *)(((unint64_t)v47 + v41) & v276);
        v88 = (const void *)(((unint64_t)a2 + v41) & v276);
        v89 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v264 + 48);
        if (v89(v88, 1, v263))
        {
          v90 = v284;
          memcpy(v87, v88, v284);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v264 + 16))(v87, v88, v263);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v264 + 56))(v87, 0, 1, v263);
          v90 = v284;
        }
        v173 = (void *)(((((unint64_t)v47 + v41) | v8) + v90) & v276);
        v174 = (const void *)(((((unint64_t)a2 + v41) | v8) + v90) & v276);
        if (v89(v174, 1, v263))
        {
          memcpy(v173, v174, v90);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v264 + 16))(v173, v174, v263);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v264 + 56))(v173, 0, 1, v263);
        }
        v194 = (void *)(((unint64_t)v173 + v281) & v276);
        v195 = (const void *)(((unint64_t)v174 + v281) & v276);
        if (v89(v195, 1, v263))
        {
          memcpy(v194, v195, v90);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v264 + 16))(v194, v195, v263);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v264 + 56))(v194, 0, 1, v263);
        }
        *((_BYTE *)v47 + v239) = 4;
        break;
      case 5:
        v134 = v8 + 24;
        v135 = v43;
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v261 + 16))(v47, a2, v262);
        v136 = (void *)(((unint64_t)v47 + v41) & v276);
        v137 = (const void *)(((unint64_t)a2 + v41) & v276);
        v138 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v264 + 48);
        if (v138(v137, 1, v263))
        {
          v139 = v284;
          memcpy(v136, v137, v284);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v264 + 16))(v136, v137, v263);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v264 + 56))(v136, 0, 1, v263);
          v139 = v284;
        }
        *((_BYTE *)v136 + v139) = *((_BYTE *)v137 + v139);
        v219 = ((unint64_t)v136 + v139) & 0xFFFFFFFFFFFFFFF8;
        v220 = ((unint64_t)v137 + v139) & 0xFFFFFFFFFFFFFFF8;
        *(_OWORD *)(v219 + 8) = *(_OWORD *)(v220 + 8);
        v221 = (void *)((v134 + v219) & v276);
        v222 = (const void *)((v134 + v220) & v276);
        if (v138(v222, 1, v263))
        {
          memcpy(v221, v222, v139);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v264 + 16))(v221, v222, v263);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v264 + 56))(v221, 0, 1, v263);
        }
        *((_BYTE *)v47 + v135) = 5;
        break;
      case 6:
        v140 = v43;
        *(_OWORD *)v47 = *(_OWORD *)a2;
        v47[2] = a2[2];
        v141 = ((unint64_t)v47 + v21 + 24) & v48;
        v142 = ((unint64_t)a2 + v21 + 24) & v48;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v261 + 16))(v141, v142, v262);
        v143 = (void *)((v141 + v260 + v8) & v276);
        v144 = (const void *)((v142 + v260 + v8) & v276);
        v145 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v264 + 48);
        if (v145(v144, 1, v263))
        {
          v146 = v284;
          memcpy(v143, v144, v284);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v264 + 16))(v143, v144, v263);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v264 + 56))(v143, 0, 1, v263);
          v146 = v284;
        }
        v223 = (void *)(((unint64_t)v143 + v281) & v276);
        v224 = (const void *)(((unint64_t)v144 + v281) & v276);
        if (v145(v224, 1, v263))
        {
          memcpy(v223, v224, v146);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v264 + 16))(v223, v224, v263);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v264 + 56))(v223, 0, 1, v263);
        }
        *((_BYTE *)v47 + v140) = 6;
        break;
      case 7:
        v91 = v8 + 24;
        v92 = v43;
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v261 + 16))(v47, a2, v262);
        v93 = (void *)(((unint64_t)v47 + v41) & v276);
        v94 = (const void *)(((unint64_t)a2 + v41) & v276);
        v95 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v264 + 48);
        if (v95(v94, 1, v263))
        {
          v96 = v284;
          memcpy(v93, v94, v284);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v264 + 16))(v93, v94, v263);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v264 + 56))(v93, 0, 1, v263);
          v96 = v284;
        }
        *((_BYTE *)v93 + v96) = *((_BYTE *)v94 + v96);
        v175 = ((unint64_t)v93 + v96) & 0xFFFFFFFFFFFFFFF8;
        v176 = ((unint64_t)v94 + v96) & 0xFFFFFFFFFFFFFFF8;
        *(_OWORD *)(v175 + 8) = *(_OWORD *)(v176 + 8);
        v177 = (void *)((v91 + v175) & v276);
        v178 = (const void *)((v91 + v176) & v276);
        if (v95(v178, 1, v263))
        {
          memcpy(v177, v178, v96);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v264 + 16))(v177, v178, v263);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v264 + 56))(v177, 0, 1, v263);
        }
        *((_BYTE *)v47 + v92) = 7;
        break;
      case 8:
        v147 = v43;
        v148 = *((_OWORD *)a2 + 5);
        *((_OWORD *)v47 + 4) = *((_OWORD *)a2 + 4);
        *((_OWORD *)v47 + 5) = v148;
        v47[12] = a2[12];
        v149 = *((_OWORD *)a2 + 1);
        *(_OWORD *)v47 = *(_OWORD *)a2;
        *((_OWORD *)v47 + 1) = v149;
        v150 = *((_OWORD *)a2 + 3);
        *((_OWORD *)v47 + 2) = *((_OWORD *)a2 + 2);
        *((_OWORD *)v47 + 3) = v150;
        v151 = ((unint64_t)v47 + v21 + 104) & v48;
        v152 = ((unint64_t)a2 + v21 + 104) & v48;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v261 + 16))(v151, v152, v262);
        v153 = (void *)((v151 + v260 + v8) & v276);
        v154 = (const void *)((v152 + v260 + v8) & v276);
        v155 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v264 + 48);
        if (v155(v154, 1, v263))
        {
          v156 = v284;
          memcpy(v153, v154, v284);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v264 + 16))(v153, v154, v263);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v264 + 56))(v153, 0, 1, v263);
          v156 = v284;
        }
        v225 = (void *)(((unint64_t)v153 + v281) & v276);
        v226 = (const void *)(((unint64_t)v154 + v281) & v276);
        if (v155(v226, 1, v263))
        {
          memcpy(v225, v226, v156);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v264 + 16))(v225, v226, v263);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v264 + 56))(v225, 0, 1, v263);
        }
        v229 = (void *)(((unint64_t)v225 + v281) & v276);
        v230 = (const void *)(((unint64_t)v226 + v281) & v276);
        if (v155(v230, 1, v263))
        {
          memcpy(v229, v230, v156);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v264 + 16))(v229, v230, v263);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v264 + 56))(v229, 0, 1, v263);
        }
        *((_BYTE *)v47 + v147) = 8;
        break;
      case 9:
        v97 = v43;
        v244 = ~v22;
        v98 = *((_OWORD *)a2 + 7);
        *((_OWORD *)v47 + 6) = *((_OWORD *)a2 + 6);
        *((_OWORD *)v47 + 7) = v98;
        v99 = *((_OWORD *)a2 + 9);
        *((_OWORD *)v47 + 8) = *((_OWORD *)a2 + 8);
        *((_OWORD *)v47 + 9) = v99;
        v100 = *((_OWORD *)a2 + 3);
        *((_OWORD *)v47 + 2) = *((_OWORD *)a2 + 2);
        *((_OWORD *)v47 + 3) = v100;
        v101 = *((_OWORD *)a2 + 5);
        *((_OWORD *)v47 + 4) = *((_OWORD *)a2 + 4);
        *((_OWORD *)v47 + 5) = v101;
        v102 = *((_OWORD *)a2 + 1);
        *(_OWORD *)v47 = *(_OWORD *)a2;
        *((_OWORD *)v47 + 1) = v102;
        v103 = ((unint64_t)v47 + v21 + 160) & v48;
        v104 = ((unint64_t)a2 + v21 + 160) & v48;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v261 + 16))(v103, v104, v262);
        v105 = (void *)((v103 + v260 + v8) & v276);
        v106 = (const void *)((v104 + v260 + v8) & v276);
        v107 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v264 + 48);
        if (v107(v106, 1, v263))
        {
          v108 = v284;
          memcpy(v105, v106, v284);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v264 + 16))(v105, v106, v263);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v264 + 56))(v105, 0, 1, v263);
          v108 = v284;
        }
        v179 = (void *)(((unint64_t)v105 + v281) & v276);
        v180 = (const void *)(((unint64_t)v106 + v281) & v276);
        if (v107(v180, 1, v263))
        {
          memcpy(v179, v180, v108);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v264 + 16))(v179, v180, v263);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v264 + 56))(v179, 0, 1, v263);
        }
        v196 = (void *)(((unint64_t)v179 + v281) & v276);
        v197 = (const void *)(((unint64_t)v180 + v281) & v276);
        if (v107(v197, 1, v263))
        {
          memcpy(v196, v197, v108);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v264 + 16))(v196, v197, v263);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v264 + 56))(v196, 0, 1, v263);
        }
        v209 = (void *)(((unint64_t)v196 + v281) & v276);
        v210 = (const void *)(((unint64_t)v197 + v281) & v276);
        v211 = v107(v210, 1, v263);
        v212 = v97;
        if (v211)
        {
          memcpy(v209, v210, v108);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v264 + 16))(v209, v210, v263);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v264 + 56))(v209, 0, 1, v263);
        }
        v215 = (void *)(((unint64_t)v209 + v277) & v244);
        v216 = (const void *)(((unint64_t)v210 + v277) & v244);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v259 + 48))(v216, 1, v258))
        {
          memcpy(v215, v216, __n);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v259 + 16))(v215, v216, v258);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v259 + 56))(v215, 0, 1, v258);
        }
        *((_BYTE *)v47 + v212) = 9;
        break;
      case 0xA:
        v157 = v43;
        v158 = *((_OWORD *)a2 + 1);
        *(_OWORD *)v47 = *(_OWORD *)a2;
        *((_OWORD *)v47 + 1) = v158;
        *((_OWORD *)v47 + 2) = *((_OWORD *)a2 + 2);
        v47[6] = a2[6];
        v159 = ((unint64_t)v47 + v21 + 56) & v48;
        v160 = ((unint64_t)a2 + v21 + 56) & v48;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v261 + 16))(v159, v160, v262);
        v161 = (void *)((v159 + v260 + v8) & v276);
        v162 = (const void *)((v160 + v260 + v8) & v276);
        v163 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v264 + 48);
        if (v163(v162, 1, v263))
        {
          v164 = v284;
          memcpy(v161, v162, v284);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v264 + 16))(v161, v162, v263);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v264 + 56))(v161, 0, 1, v263);
          v164 = v284;
        }
        v227 = (void *)(((unint64_t)v161 + v281) & v276);
        v228 = (const void *)(((unint64_t)v162 + v281) & v276);
        if (v163(v228, 1, v263))
        {
          memcpy(v227, v228, v164);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v264 + 16))(v227, v228, v263);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v264 + 56))(v227, 0, 1, v263);
        }
        v231 = (void *)(((unint64_t)v227 + v281) & v276);
        v232 = (const void *)(((unint64_t)v228 + v281) & v276);
        if (v163(v232, 1, v263))
        {
          memcpy(v231, v232, v164);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v264 + 16))(v231, v232, v263);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v264 + 56))(v231, 0, 1, v263);
        }
        *((_BYTE *)v47 + v157) = 10;
        break;
      case 0xB:
        v273 = v32;
        v245 = ~v22;
        v109 = *((_OWORD *)a2 + 1);
        *(_OWORD *)v47 = *(_OWORD *)a2;
        *((_OWORD *)v47 + 1) = v109;
        v110 = *((_OWORD *)a2 + 3);
        *((_OWORD *)v47 + 2) = *((_OWORD *)a2 + 2);
        *((_OWORD *)v47 + 3) = v110;
        v111 = ((unint64_t)v47 + v21 + 64) & v48;
        v112 = ((unint64_t)a2 + v21 + 64) & v48;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v261 + 16))(v111, v112, v262);
        v113 = (void *)((v111 + v260 + v8) & v276);
        v114 = (const void *)((v112 + v260 + v8) & v276);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v264 + 48))(v114, 1, v263))
        {
          v115 = v284;
          memcpy(v113, v114, v284);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v264 + 16))(v113, v114, v263);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v264 + 56))(v113, 0, 1, v263);
          v115 = v284;
        }
        *((_BYTE *)v113 + v115) = *((_BYTE *)v114 + v115);
        v181 = ((v255 + ((v277 + ((v281 + (((v252 | v8) + v115) & v276)) & v276)) & v245)) & v245) + __n;
        if (v251 > v181)
          v181 = v251;
        if (v31 > v181)
          v181 = v31;
        if (v273 > v181)
          v181 = v273;
        if (v249 > v181)
          v181 = v249;
        if (v250 > v181)
          v181 = v250;
        if (v248 > v181)
          v181 = v248;
        if (v250 > v181)
          v181 = v250;
        if (v247 > v181)
          v181 = v247;
        if (v269 > v181)
          v181 = v269;
        if (v266 > v181)
          v181 = v266;
        if (v246 > v181)
          v181 = v246;
        if (v42 > v181)
          v181 = v42;
        if (v29 > v181)
          v181 = v29;
        if (v34 > v181)
          v181 = v34;
        *((_BYTE *)v47 + v181) = 11;
        break;
      case 0xC:
        v116 = v43;
        v117 = *((_OWORD *)a2 + 5);
        *((_OWORD *)v47 + 4) = *((_OWORD *)a2 + 4);
        *((_OWORD *)v47 + 5) = v117;
        v118 = *((_OWORD *)a2 + 7);
        *((_OWORD *)v47 + 6) = *((_OWORD *)a2 + 6);
        *((_OWORD *)v47 + 7) = v118;
        v119 = *((_OWORD *)a2 + 1);
        *(_OWORD *)v47 = *(_OWORD *)a2;
        *((_OWORD *)v47 + 1) = v119;
        v120 = *((_OWORD *)a2 + 3);
        *((_OWORD *)v47 + 2) = *((_OWORD *)a2 + 2);
        *((_OWORD *)v47 + 3) = v120;
        v121 = ((unint64_t)v47 + v21 + 128) & v48;
        v122 = ((unint64_t)a2 + v21 + 128) & v48;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v261 + 16))(v121, v122, v262);
        v123 = (void *)((v121 + v260 + v8) & v276);
        v124 = (const void *)((v122 + v260 + v8) & v276);
        v125 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v264 + 48);
        if (v125(v124, 1, v263))
        {
          v126 = v284;
          memcpy(v123, v124, v284);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v264 + 16))(v123, v124, v263);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v264 + 56))(v123, 0, 1, v263);
          v126 = v284;
        }
        v182 = (void *)(((unint64_t)v123 + v281) & v276);
        v183 = (const void *)(((unint64_t)v124 + v281) & v276);
        if (v125(v183, 1, v263))
        {
          memcpy(v182, v183, v126);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v264 + 16))(v182, v183, v263);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v264 + 56))(v182, 0, 1, v263);
        }
        v198 = (void *)(((unint64_t)v182 + v281) & v276);
        v199 = (const void *)(((unint64_t)v183 + v281) & v276);
        if (v125(v199, 1, v263))
        {
          memcpy(v198, v199, v126);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v264 + 16))(v198, v199, v263);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v264 + 56))(v198, 0, 1, v263);
        }
        *((_BYTE *)v47 + v116) = 12;
        break;
      case 0xD:
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v27 + 16))(v47, a2, v254);
        *((_BYTE *)v47 + v43) = 13;
        break;
      case 0xE:
        v127 = v43;
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v261 + 16))(v47, a2, v262);
        v128 = (unint64_t)v47 + v41;
        v129 = (void *)(((unint64_t)v47 + v41) & v276);
        v130 = (uint64_t)a2 + v41;
        v131 = (const void *)(((unint64_t)a2 + v41) & v276);
        v132 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v264 + 48);
        if (v132(v131, 1, v263))
        {
          v133 = v284;
          memcpy(v129, v131, v284);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v264 + 16))(v129, v131, v263);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v264 + 56))(v129, 0, 1, v263);
          v133 = v284;
        }
        v184 = (void *)(((v128 | v8) + v133) & v276);
        v185 = (const void *)(((v130 | v8) + v133) & v276);
        if (v132(v185, 1, v263))
        {
          memcpy(v184, v185, v133);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v264 + 16))(v184, v185, v263);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v264 + 56))(v184, 0, 1, v263);
        }
        *((_BYTE *)v47 + v127) = 14;
        break;
      default:
        if (v43 <= 3)
          v44 = v43;
        else
          v44 = 4;
        __asm { BR              X12 }
        return result;
    }
  }
  return v47;
}

uint64_t sub_23BEF4624(unint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unsigned int (*v46)(unint64_t, uint64_t, uint64_t);
  unint64_t v47;
  uint64_t result;
  uint64_t (*v49)(unint64_t, uint64_t);
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int (*v54)(uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int (*v64)(uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int (*v69)(uint64_t, uint64_t, uint64_t);
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int (*v77)(uint64_t, uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int (*v83)(unint64_t, uint64_t, uint64_t);
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t (*v90)(uint64_t, uint64_t, uint64_t);
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int (*v96)(uint64_t, uint64_t, uint64_t);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int (*v110)(unint64_t, uint64_t, uint64_t);
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v123;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void (*v128)(uint64_t, uint64_t);
  uint64_t v129;

  v119 = a2[3];
  v3 = *(_QWORD *)(v119 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v118 = v3;
  v5 = *(_QWORD *)(v3 + 64);
  v6 = sub_23BFF82CC();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = v5 + v8;
  v10 = v5 + v8 + 1;
  v11 = *(_DWORD *)(v7 + 84);
  v120 = v7;
  v121 = v6;
  v12 = *(_QWORD *)(v7 + 64);
  if (v11)
    v13 = v12;
  else
    v13 = v12 + 1;
  v14 = v13 + v8;
  v116 = a2[2];
  v15 = *(_QWORD *)(v116 - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v127 = v13 + v16;
  v17 = *(_QWORD *)(v15 + 64);
  v113 = v17 + v16;
  v115 = v15;
  if (*(_DWORD *)(v15 + 84))
    v18 = *(_QWORD *)(v15 + 64);
  else
    v18 = v17 + 1;
  v125 = ((v17
         + v16
         + ((v13 + v16 + ((v13 + v8 + ((v13 + v8 + ((v10 + ((v4 + 248) & ~v4)) & ~v8)) & ~v8)) & ~v8)) & ~v16)) & ~v16)
       + v18;
  v117 = v5;
  if (v12 <= v5)
    v19 = v5;
  else
    v19 = v12;
  v20 = sub_23BFF8368();
  v21 = v16;
  v22 = *(_QWORD *)(v20 - 8);
  v23 = *(unsigned __int8 *)(v22 + 80);
  v24 = ((v13 + v23 + (v14 & ~v8)) & ~v23) + *(_QWORD *)(v22 + 64);
  if (v24 <= v19)
    v24 = v19;
  v25 = v18 + v16;
  v26 = (v18 + v16 + ((v127 + ((v14 + ((v14 + ((v10 + ((v4 + 216) & ~v4)) & ~v8)) & ~v8)) & ~v8)) & ~v16)) & ~v16;
  v27 = a2[4];
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(unsigned __int8 *)(v28 + 80);
  v30 = (v18 + v29 + v26) & ~v29;
  v31 = *(_QWORD *)(v28 + 64);
  if (*(_DWORD *)(v28 + 84))
    v32 = *(_QWORD *)(v28 + 64);
  else
    v32 = v31 + 1;
  v33 = v32 + v30;
  v34 = (v9 & ~v8) + v13;
  v35 = ((v8 + 24 + (v34 & 0xFFFFFFFFFFFFFFF8)) & ~v8) + v13;
  if (v35 <= v125)
    v35 = v125;
  v36 = ((v34 + v8) & ~v8) + v13;
  if (v35 <= v24 + 1)
    v35 = v24 + 1;
  if (v35 > v33)
    v33 = v35;
  if (v33 <= ((v127 + ((v14 + ((v8 + 64) & ~v8)) & ~v8)) & (unint64_t)~v21) + v18)
    v33 = ((v127 + ((v14 + ((v8 + 64) & ~v8)) & ~v8)) & ~v21) + v18;
  if (v33 <= ((v36 + v8) & ~v8) + v13)
    v33 = ((v36 + v8) & ~v8) + v13;
  if (v33 <= ((v14 + ((v9 + ((v4 + 24) & ~v4)) & ~v8)) & ~v8) + v13)
    v33 = ((v14 + ((v9 + ((v4 + 24) & ~v4)) & ~v8)) & ~v8) + v13;
  v126 = v18;
  if (v33 <= ((v14 + ((v14 + ((v9 + ((v4 + 104) & ~v4)) & ~v8)) & ~v8)) & ~v8) + v13)
    v33 = ((v14 + ((v14 + ((v9 + ((v4 + 104) & ~v4)) & ~v8)) & ~v8)) & ~v8) + v13;
  if (v33 <= ((v127 + ((v14 + ((v14 + ((v14 + ((v9 + ((v4 + 160) & ~v4)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & (unint64_t)~v21)
            + v18)
    v33 = ((v127 + ((v14 + ((v14 + ((v14 + ((v9 + ((v4 + 160) & ~v4)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v21) + v18;
  v37 = ((v9 + ((v4 + 64) & ~v4)) & ~v8) + v13;
  if (v33 <= ((v14 + ((v14 + ((v9 + ((v4 + 56) & ~v4)) & ~v8)) & ~v8)) & ~v8) + v13)
    v33 = ((v14 + ((v14 + ((v9 + ((v4 + 56) & ~v4)) & ~v8)) & ~v8)) & ~v8) + v13;
  if (v33 <= v37 + 1)
    v33 = v37 + 1;
  v38 = v5 + v8;
  if (v33 <= ((v14 + ((v14 + ((v9 + ((v4 + 128) & ~v4)) & ~v8)) & ~v8)) & ~v8) + v13)
    v33 = ((v14 + ((v14 + ((v9 + ((v4 + 128) & ~v4)) & ~v8)) & ~v8)) & ~v8) + v13;
  if (v33 <= v36)
    v33 = v36;
  if (v33 > v31)
    v31 = v33;
  v39 = *(unsigned __int8 *)(a1 + v31);
  v41 = ~v4;
  v42 = ~v8;
  v43 = ~v21;
  v44 = ~v23;
  switch(v39)
  {
    case 0:
      v51 = ~v21;
      v52 = (a1 + v4 + 248) & v41;
      (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v52, v119);
      v53 = (v117 + v8 + v52 + 1) & v42;
      v54 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v120 + 48);
      if (!v54(v53, 1, v121))
        (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v53, v121);
      v55 = (v14 + v53) & v42;
      if (!v54(v55, 1, v121))
        (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v55, v121);
      v56 = (v14 + v55) & v42;
      if (!v54(v56, 1, v121))
        (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v56, v121);
      v57 = (v127 + v56) & v51;
      v128 = *(void (**)(uint64_t, uint64_t))(v115 + 8);
      v128(v57, v116);
      v58 = (v113 + v57) & v51;
      result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v115 + 48))(v58, 1, v116);
      if ((_DWORD)result)
        return result;
      v50 = v58;
      v27 = v116;
      v49 = (uint64_t (*)(unint64_t, uint64_t))v128;
      return v49(v50, v27);
    case 1:
      v59 = ~v8;
      v60 = *(unsigned __int8 *)(a1 + v24);
      if (v60 >= 3)
      {
        if (v24 <= 3)
          v61 = v24;
        else
          v61 = 4;
        __asm { BR              X13 }
      }
      v81 = v121;
      if (v60 == 2)
      {
        v108 = *(unsigned __int8 *)(v22 + 80);
        v109 = *(_QWORD *)(v20 - 8);
        v129 = v20;
        v110 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v120 + 48);
        if (!v110(a1, 1, v121))
          (*(void (**)(unint64_t, uint64_t))(v120 + 8))(a1, v121);
        v111 = (v14 + a1) & v59;
        if (!v110(v111, 1, v121))
          (*(void (**)(unint64_t, uint64_t))(v120 + 8))(v111, v121);
        v50 = (v111 + v13 + v108) & v44;
        v49 = *(uint64_t (**)(unint64_t, uint64_t))(v109 + 8);
        v27 = v129;
      }
      else if (v60 == 1)
      {
        v49 = *(uint64_t (**)(unint64_t, uint64_t))(v120 + 8);
        v50 = a1;
LABEL_120:
        v27 = v81;
      }
      else
      {
        v27 = v119;
        v49 = *(uint64_t (**)(unint64_t, uint64_t))(v118 + 8);
LABEL_127:
        v50 = a1;
      }
      return v49(v50, v27);
    case 2:
      v112 = v25;
      v114 = *(_QWORD *)(v27 - 8);
      v123 = a2[4];
      v62 = (a1 + v4 + 216) & v41;
      (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v62, v119);
      v63 = (v117 + v8 + v62 + 1) & v42;
      v64 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v120 + 48);
      if (!v64(v63, 1, v121))
        (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v63, v121);
      v65 = (v14 + v63) & v42;
      if (!v64(v65, 1, v121))
        (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v65, v121);
      v66 = (v14 + v65) & v42;
      if (!v64(v66, 1, v121))
        (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v66, v121);
      v67 = (v127 + v66) & v43;
      v68 = v43;
      v69 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v115 + 48);
      if (!v69(v67, 1, v116))
        (*(void (**)(uint64_t, uint64_t))(v115 + 8))(v67, v116);
      v70 = (v112 + v67) & v68;
      if (!v69(v70, 1, v116))
        (*(void (**)(uint64_t, uint64_t))(v115 + 8))(v70, v116);
      v71 = (v70 + v126 + v29) & ~v29;
      v72 = v114;
      v73 = v123;
      result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v114 + 48))(v71, 1, v123);
      goto LABEL_97;
    case 3:
      v74 = v21;
      v75 = ~v21;
      v76 = (a1 + v8 + 64) & v42;
      v77 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v120 + 48);
      if (!v77(v76, 1, v121))
        (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v76, v121);
      v78 = (v14 + v76) & v42;
      if (!v77(v78, 1, v121))
        (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v78, v121);
      v71 = (v78 + v13 + v74) & v75;
      goto LABEL_96;
    case 4:
      (*(void (**)(unint64_t, uint64_t))(v118 + 8))(a1, v119);
      v79 = v38 + a1;
      v80 = (v38 + a1) & v42;
      v82 = v120;
      v81 = v121;
      v83 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v120 + 48);
      if (!v83(v80, 1, v121))
        (*(void (**)(unint64_t, uint64_t))(v120 + 8))(v80, v121);
      v84 = ((v79 | v8) + v13) & v42;
      if (!v83(v84, 1, v121))
        (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v84, v121);
      v85 = v14 + v84;
      goto LABEL_114;
    case 5:
    case 7:
      (*(void (**)(unint64_t, uint64_t))(v118 + 8))(a1, v119);
      v45 = (v38 + a1) & v42;
      v46 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v120 + 48);
      if (!v46(v45, 1, v121))
        (*(void (**)(unint64_t, uint64_t))(v120 + 8))(v45, v121);
      v47 = (v8 + 24 + ((v13 + v45) & 0xFFFFFFFFFFFFFFF8)) & v42;
      result = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v46)(v47, 1, v121);
      if ((_DWORD)result)
        return result;
      v49 = *(uint64_t (**)(unint64_t, uint64_t))(v120 + 8);
      v50 = v47;
      v27 = v121;
      return v49(v50, v27);
    case 6:
      v86 = (a1 + v4 + 24) & v41;
      (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v86, v119);
      v87 = (v86 + v117 + v8) & v42;
      v89 = v120;
      v88 = v121;
      v90 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v120 + 48);
      v91 = v90(v87, 1, v121);
      goto LABEL_106;
    case 8:
      v92 = a1 + v4 + 104;
      goto LABEL_103;
    case 9:
      v93 = ~v21;
      v94 = (a1 + v4 + 160) & v41;
      (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v94, v119);
      v95 = (v94 + v117 + v8) & v42;
      v96 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v120 + 48);
      if (!v96(v95, 1, v121))
        (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v95, v121);
      v97 = (v14 + v95) & v42;
      if (!v96(v97, 1, v121))
        (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v97, v121);
      v98 = (v14 + v97) & v42;
      if (!v96(v98, 1, v121))
        (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v98, v121);
      v99 = (v14 + v98) & v42;
      if (!v96(v99, 1, v121))
        (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v99, v121);
      v71 = (v127 + v99) & v93;
LABEL_96:
      v72 = v115;
      v73 = v116;
      result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v115 + 48))(v71, 1, v116);
LABEL_97:
      if ((_DWORD)result)
        return result;
      v49 = *(uint64_t (**)(unint64_t, uint64_t))(v72 + 8);
      v50 = v71;
      v27 = v73;
      return v49(v50, v27);
    case 10:
      v92 = a1 + v4 + 56;
      goto LABEL_103;
    case 11:
      v100 = (a1 + v4 + 64) & v41;
      (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v100, v119);
      v101 = (v100 + v117 + v8) & v42;
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v120 + 48))(v101, 1, v121);
      if ((_DWORD)result)
        return result;
      v49 = *(uint64_t (**)(unint64_t, uint64_t))(v120 + 8);
      v50 = v101;
      v27 = v121;
      return v49(v50, v27);
    case 12:
      v92 = a1 + v4 + 128;
LABEL_103:
      v102 = v92 & v41;
      (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v92 & v41, v119);
      v103 = (v102 + v117 + v8) & v42;
      v89 = v120;
      v88 = v121;
      v90 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v120 + 48);
      if (!v90(v103, 1, v121))
        (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v103, v121);
      v87 = (v14 + v103) & v42;
      v91 = v90(v87, 1, v121);
LABEL_106:
      if (!v91)
        (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v87, v88);
      v104 = (v14 + v87) & v42;
      result = v90(v104, 1, v88);
      if ((_DWORD)result)
        return result;
      v49 = *(uint64_t (**)(unint64_t, uint64_t))(v89 + 8);
      v50 = v104;
      v27 = v88;
      return v49(v50, v27);
    case 13:
      v49 = *(uint64_t (**)(unint64_t, uint64_t))(v28 + 8);
      goto LABEL_127;
    case 14:
      (*(void (**)(unint64_t, uint64_t))(v118 + 8))(a1, v119);
      v105 = v38 + a1;
      v106 = (v38 + a1) & v42;
      v82 = v120;
      v81 = v121;
      v83 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v120 + 48);
      if (!v83(v106, 1, v121))
        (*(void (**)(unint64_t, uint64_t))(v120 + 8))(v106, v121);
      v85 = (v105 | v8) + v13;
LABEL_114:
      v107 = v85 & v42;
      result = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v83)(v85 & v42, 1, v81);
      if ((_DWORD)result)
        return result;
      v49 = *(uint64_t (**)(unint64_t, uint64_t))(v82 + 8);
      v50 = v107;
      goto LABEL_120;
    default:
      if (v41 <= 3)
        v40 = v41;
      else
        v40 = 4;
      __asm { BR              X14 }
      return result;
  }
}

uint64_t sub_23BEF5228(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  size_t v12;
  size_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  size_t v30;
  unint64_t v31;
  unint64_t v32;
  size_t v33;
  size_t v34;
  unint64_t v35;
  unint64_t v36;
  size_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  const void *v56;
  unsigned int (*v57)(const void *, uint64_t, uint64_t);
  size_t v58;
  unsigned int v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  const void *v70;
  unsigned int (*v71)(const void *, uint64_t, uint64_t);
  size_t v72;
  unint64_t v73;
  __int128 v74;
  __int128 v75;
  void *v76;
  const void *v77;
  unsigned int (*v78)(const void *, uint64_t, uint64_t);
  size_t v79;
  void *v80;
  const void *v81;
  unsigned int (*v82)(const void *, uint64_t, uint64_t);
  size_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  const void *v87;
  unsigned int (*v88)(const void *, uint64_t, uint64_t);
  size_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  const void *v100;
  unsigned int (*v101)(const void *, uint64_t, uint64_t);
  size_t v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  const void *v108;
  size_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  const void *v119;
  unsigned int (*v120)(const void *, uint64_t, uint64_t);
  size_t v121;
  uint64_t v122;
  void *v123;
  const void *v124;
  unsigned int (*v125)(const void *, uint64_t, uint64_t);
  size_t v126;
  uint64_t v127;
  void *v128;
  const void *v129;
  unsigned int (*v130)(const void *, uint64_t, uint64_t);
  size_t v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  const void *v135;
  unsigned int (*v136)(const void *, uint64_t, uint64_t);
  size_t v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  const void *v146;
  unsigned int (*v147)(const void *, uint64_t, uint64_t);
  size_t v148;
  __int128 v149;
  uint64_t v150;
  uint64_t v151;
  void *v152;
  const void *v153;
  unsigned int (*v154)(const void *, uint64_t, uint64_t);
  size_t v155;
  char v156;
  size_t v157;
  uint64_t v158;
  uint64_t v159;
  void *v160;
  const void *v161;
  void *v162;
  const void *v163;
  void *v164;
  const void *v165;
  void *v166;
  const void *v167;
  unint64_t v168;
  unint64_t v169;
  void *v170;
  const void *v171;
  void *v172;
  const void *v173;
  size_t v174;
  void *v175;
  const void *v176;
  size_t v177;
  const void *v178;
  void *v179;
  const void *v180;
  void *v181;
  const void *v182;
  void *v183;
  const void *v184;
  void *v185;
  const void *v186;
  void *v187;
  const void *v188;
  void *v189;
  const void *v190;
  unint64_t v191;
  void (*v192)(unint64_t, unint64_t, uint64_t);
  void *v193;
  const void *v194;
  void *v195;
  const void *v196;
  unsigned int (*v197)(const void *, uint64_t, uint64_t);
  size_t v198;
  void *v199;
  const void *v200;
  void *v201;
  const void *v202;
  void *v203;
  const void *v204;
  void *v205;
  const void *v206;
  unint64_t v207;
  unint64_t v208;
  void *v209;
  const void *v210;
  void *v211;
  const void *v212;
  void *v213;
  const void *v214;
  void *v215;
  const void *v216;
  void *v217;
  const void *v218;
  void *v219;
  const void *v220;
  uint64_t result;
  uint64_t v222;
  char v223;
  uint64_t v224;
  unsigned int (*v225)(uint64_t, uint64_t, uint64_t);
  void *v226;
  const void *v227;
  uint64_t v228;
  unint64_t v229;
  size_t v230;
  size_t v231;
  unint64_t v232;
  size_t v233;
  size_t v234;
  size_t v235;
  size_t v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  size_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  size_t __n;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  size_t v253;
  size_t v254;
  uint64_t v255;
  unint64_t v256;
  unint64_t v257;
  unint64_t v258;
  unint64_t v259;
  unint64_t v260;
  unint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  size_t v267;
  size_t v269;
  uint64_t v270;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  uint64_t v275;
  uint64_t v276;

  v263 = a3[3];
  v4 = *(_QWORD *)(v263 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v262 = v4;
  v6 = *(_QWORD *)(v4 + 64);
  v7 = sub_23BFF82CC();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v6 + v9;
  v265 = v7;
  v266 = v6 + v9 + 1;
  v255 = v266 + ((v5 + 248) & ~v5);
  v11 = *(_DWORD *)(v8 + 84);
  v272 = v8;
  v12 = *(_QWORD *)(v8 + 64);
  if (v11)
    v13 = v12;
  else
    v13 = v12 + 1;
  v14 = v13 + v9;
  v252 = a3[2];
  v15 = *(_QWORD *)(v252 - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = v13 + v16;
  v18 = *(_QWORD *)(v15 + 64);
  v242 = v18 + v16;
  v251 = v15;
  if (*(_DWORD *)(v15 + 84))
    v19 = *(_QWORD *)(v15 + 64);
  else
    v19 = v18 + 1;
  v274 = ((v18 + v16 + ((v13 + v16 + ((v13 + v9 + ((v13 + v9 + (v255 & ~v9)) & ~v9)) & ~v9)) & ~v16)) & ~v16) + v19;
  v254 = v6;
  if (v12 > v6)
    v6 = v12;
  v21 = sub_23BFF8368();
  v22 = v16;
  v228 = v21;
  v23 = *(_QWORD *)(v21 - 8);
  v24 = *(unsigned __int8 *)(v23 + 80);
  v25 = *(_QWORD *)(v23 + 64);
  v20 = v14 & ~v9;
  if (((v13 + v24 + v20) & ~v24) + v25 <= v6)
    v26 = v6;
  else
    v26 = ((v13 + v24 + v20) & ~v24) + v25;
  v240 = v19 + v16;
  v241 = a3[4];
  v27 = *(_QWORD *)(v241 - 8);
  v28 = *(unsigned __int8 *)(v27 + 80);
  v29 = *(_QWORD *)(v27 + 64);
  if (*(_DWORD *)(v27 + 84))
    v30 = *(_QWORD *)(v27 + 64);
  else
    v30 = v29 + 1;
  v31 = ((v19
        + v28
        + ((v19 + v16 + ((v17 + ((v14 + ((v14 + ((v266 + ((v5 + 216) & ~v5)) & ~v9)) & ~v9)) & ~v9)) & ~v16)) & ~v16)) & ~v28)
      + v30;
  v32 = ((v17 + ((v14 + ((v9 + 64) & ~v9)) & ~v9)) & ~v16) + v19;
  v33 = (v10 & ~v9) + v13;
  v34 = ((v33 + v9) & ~v9) + v13;
  v35 = ((v9 + 24 + (v33 & 0xFFFFFFFFFFFFFFF8)) & ~v9) + v13;
  v250 = v17;
  __n = v19;
  v36 = ((v17 + ((v14 + ((v14 + ((v14 + ((v10 + ((v5 + 160) & ~v5)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v22) + v19;
  v37 = ((v10 + ((v5 + 64) & ~v5)) & ~v9) + v13;
  v245 = v10;
  v267 = v13 + v9;
  v269 = v13;
  v38 = ((v14 + ((v14 + ((v10 + ((v5 + 128) & ~v5)) & ~v9)) & ~v9)) & ~v9) + v13;
  v39 = v274;
  v236 = ((v34 + v9) & ~v9) + v13;
  v238 = v35;
  if (v35 > v274)
    v39 = v35;
  if (v39 <= v26 + 1)
    v39 = v26 + 1;
  if (v39 <= v31)
    v39 = v31;
  v229 = v32;
  v230 = v37 + 1;
  if (v39 <= v32)
    v39 = v32;
  if (v39 <= ((v34 + v9) & ~v9) + v13)
    v39 = ((v34 + v9) & ~v9) + v13;
  v233 = ((v14 + ((v14 + ((v10 + ((v5 + 104) & ~v5)) & ~v9)) & ~v9)) & ~v9) + v13;
  v234 = ((v14 + ((v10 + ((v5 + 24) & ~v5)) & ~v9)) & ~v9) + v13;
  if (v39 <= v234)
    v39 = ((v14 + ((v10 + ((v5 + 24) & ~v5)) & ~v9)) & ~v9) + v13;
  if (v39 <= ((v14 + ((v14 + ((v10 + ((v5 + 104) & ~v5)) & ~v9)) & ~v9)) & ~v9) + v13)
    v39 = ((v14 + ((v14 + ((v10 + ((v5 + 104) & ~v5)) & ~v9)) & ~v9)) & ~v9) + v13;
  v231 = ((v14 + ((v14 + ((v10 + ((v5 + 56) & ~v5)) & ~v9)) & ~v9)) & ~v9) + v13;
  v232 = v36;
  if (v39 <= v36)
    v39 = v36;
  if (v39 <= ((v14 + ((v14 + ((v10 + ((v5 + 56) & ~v5)) & ~v9)) & ~v9)) & ~v9) + v13)
    v39 = ((v14 + ((v14 + ((v10 + ((v5 + 56) & ~v5)) & ~v9)) & ~v9)) & ~v9) + v13;
  if (v39 <= v37 + 1)
    v40 = v37 + 1;
  else
    v40 = v39;
  if (v40 <= v38)
    v40 = ((v14 + ((v14 + ((v10 + ((v5 + 128) & ~v5)) & ~v9)) & ~v9)) & ~v9) + v13;
  if (v40 <= v34)
    v40 = v34;
  if (v40 <= v29)
    v41 = *(_QWORD *)(v27 + 64);
  else
    v41 = v40;
  v43 = a1;
  v44 = ~v5;
  v275 = ~v9;
  v45 = ~v22;
  switch(*(_BYTE *)(a2 + v41))
  {
    case 0:
      v246 = ~v22;
      v256 = v41;
      v46 = *(_OWORD *)(a2 + 208);
      *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
      *(_OWORD *)(a1 + 208) = v46;
      *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
      *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
      v47 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v47;
      v48 = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = v48;
      v49 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v49;
      v50 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v50;
      v51 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v51;
      v52 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v52;
      v53 = (a1 + v5 + 248) & v44;
      v54 = (a2 + v5 + 248) & v44;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v262 + 16))(v53, v54, v263);
      *(_BYTE *)(v53 + v254) = *(_BYTE *)(v54 + v254);
      v55 = (void *)((v53 + v254 + v9 + 1) & v275);
      v56 = (const void *)((v54 + v254 + v9 + 1) & v275);
      v57 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v272 + 48);
      if (v57(v56, 1, v265))
      {
        v58 = v269;
        memcpy(v55, v56, v269);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 16))(v55, v56, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v55, 0, 1, v265);
        v58 = v269;
      }
      v160 = (void *)(((unint64_t)v55 + v267) & v275);
      v161 = (const void *)(((unint64_t)v56 + v267) & v275);
      if (v57(v161, 1, v265))
      {
        memcpy(v160, v161, v58);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 16))(v160, v161, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v160, 0, 1, v265);
      }
      v179 = (void *)(((unint64_t)v160 + v267) & v275);
      v180 = (const void *)(((unint64_t)v161 + v267) & v275);
      if (v57(v180, 1, v265))
      {
        memcpy(v179, v180, v58);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 16))(v179, v180, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v179, 0, 1, v265);
      }
      v191 = ((unint64_t)v179 + v250) & v246;
      v192 = *(void (**)(unint64_t, unint64_t, uint64_t))(v251 + 16);
      v192(v191, ((unint64_t)v180 + v250) & v246, v252);
      v193 = (void *)((v242 + v191) & v246);
      v194 = (const void *)((v242 + (((unint64_t)v180 + v250) & v246)) & v246);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v251 + 48))(v194, 1, v252))
      {
        memcpy(v193, v194, __n);
      }
      else
      {
        v192((unint64_t)v193, (unint64_t)v194, v252);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v251 + 56))(v193, 0, 1, v252);
      }
      v156 = 0;
      v41 = v256;
      v43 = a1;
      break;
    case 1:
      v257 = v41;
      v59 = *(unsigned __int8 *)(a2 + v26);
      if (v59 >= 3)
      {
        if (v26 <= 3)
          v60 = v26;
        else
          v60 = 4;
        __asm { BR              X12 }
      }
      v157 = v269;
      v159 = v272;
      v158 = ~v9;
      if (v59 == 2)
      {
        v224 = ~v24;
        v270 = *(unsigned __int8 *)(v23 + 80);
        v273 = *(_QWORD *)(v21 - 8);
        v276 = v26;
        v225 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v159 + 48);
        if (v225(a2, 1, v265))
        {
          memcpy((void *)a1, (const void *)a2, v157);
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v159 + 16))(a1, a2, v265);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v159 + 56))(a1, 0, 1, v265);
        }
        v226 = (void *)((v267 + a1) & v158);
        v227 = (const void *)((v267 + a2) & v158);
        if (v225((uint64_t)v227, 1, v265))
        {
          memcpy(v226, v227, v157);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v159 + 16))(v226, v227, v265);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v159 + 56))(v226, 0, 1, v265);
        }
        v41 = v257;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v273 + 16))(((unint64_t)v226 + v157 + v270) & v224, ((unint64_t)v227 + v157 + v270) & v224, v228);
        v223 = 2;
        v222 = v276;
      }
      else
      {
        v222 = v26;
        if (v59 == 1)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v272 + 16))(a1, a2, v265);
          v223 = 1;
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v262 + 16))(a1, a2, v263);
          v223 = 0;
        }
        v41 = v257;
      }
      *(_BYTE *)(a1 + v222) = v223;
      v156 = 1;
      v43 = a1;
      break;
    case 2:
      v237 = ~v28;
      v239 = *(unsigned __int8 *)(v27 + 80);
      v235 = v30;
      v243 = *(_QWORD *)(v241 - 8);
      v247 = ~v22;
      v258 = v41;
      v61 = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = v61;
      *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      v62 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v62;
      v63 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v63;
      v64 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v64;
      v65 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v65;
      v66 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v66;
      v67 = (a1 + v5 + 216) & v44;
      v68 = (a2 + v5 + 216) & v44;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v262 + 16))(v67, v68, v263);
      *(_BYTE *)(v67 + v254) = *(_BYTE *)(v68 + v254);
      v69 = (void *)((v67 + v254 + v9 + 1) & v275);
      v70 = (const void *)((v68 + v254 + v9 + 1) & v275);
      v71 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v272 + 48);
      if (v71(v70, 1, v265))
      {
        v72 = v269;
        memcpy(v69, v70, v269);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 16))(v69, v70, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v69, 0, 1, v265);
        v72 = v269;
      }
      v162 = (void *)(((unint64_t)v69 + v267) & v275);
      v163 = (const void *)(((unint64_t)v70 + v267) & v275);
      if (v71(v163, 1, v265))
      {
        memcpy(v162, v163, v72);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 16))(v162, v163, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v162, 0, 1, v265);
      }
      v181 = (void *)(((unint64_t)v162 + v267) & v275);
      v182 = (const void *)(((unint64_t)v163 + v267) & v275);
      if (v71(v182, 1, v265))
      {
        memcpy(v181, v182, v72);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 16))(v181, v182, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v181, 0, 1, v265);
      }
      v195 = (void *)(((unint64_t)v181 + v250) & v247);
      v196 = (const void *)(((unint64_t)v182 + v250) & v247);
      v197 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v251 + 48);
      if (v197(v196, 1, v252))
      {
        v198 = __n;
        memcpy(v195, v196, __n);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v251 + 16))(v195, v196, v252);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v251 + 56))(v195, 0, 1, v252);
        v198 = __n;
      }
      v201 = (void *)(((unint64_t)v195 + v240) & v247);
      v202 = (const void *)(((unint64_t)v196 + v240) & v247);
      if (v197(v202, 1, v252))
      {
        memcpy(v201, v202, v198);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v251 + 16))(v201, v202, v252);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v251 + 56))(v201, 0, 1, v252);
      }
      v205 = (void *)(((unint64_t)v201 + v198 + v239) & v237);
      v206 = (const void *)(((unint64_t)v202 + v198 + v239) & v237);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v243 + 48))(v206, 1, v241))
      {
        memcpy(v205, v206, v235);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v243 + 16))(v205, v206, v241);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v243 + 56))(v205, 0, 1, v241);
      }
      v156 = 2;
      v41 = v258;
      goto LABEL_217;
    case 3:
      v264 = v22;
      v73 = v41;
      v74 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v74;
      v75 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v75;
      v76 = (void *)((a1 + v9 + 64) & v275);
      v77 = (const void *)((a2 + v9 + 64) & v275);
      v78 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v272 + 48);
      if (v78(v77, 1, v265))
      {
        v79 = v269;
        memcpy(v76, v77, v269);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 16))(v76, v77, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v76, 0, 1, v265);
        v79 = v269;
      }
      v164 = (void *)(((unint64_t)v76 + v267) & v275);
      v165 = (const void *)(((unint64_t)v77 + v267) & v275);
      if (v78(v165, 1, v265))
      {
        memcpy(v164, v165, v79);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 16))(v164, v165, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v164, 0, 1, v265);
      }
      v183 = (void *)(((unint64_t)v164 + v79 + v264) & v45);
      v184 = (const void *)(((unint64_t)v165 + v79 + v264) & v45);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v251 + 48))(v184, 1, v252))
      {
        memcpy(v183, v184, __n);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v251 + 16))(v183, v184, v252);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v251 + 56))(v183, 0, 1, v252);
      }
      v156 = 3;
      v41 = v73;
      goto LABEL_217;
    case 4:
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v262 + 16))(a1, a2, v263);
      v80 = (void *)((v245 + a1) & v275);
      v81 = (const void *)((v245 + a2) & v275);
      v82 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v272 + 48);
      if (v82(v81, 1, v265))
      {
        v83 = v269;
        memcpy(v80, v81, v269);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 16))(v80, v81, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v80, 0, 1, v265);
        v83 = v269;
      }
      v166 = (void *)((((v245 + a1) | v9) + v83) & v275);
      v167 = (const void *)((((v245 + a2) | v9) + v83) & v275);
      if (v82(v167, 1, v265))
      {
        memcpy(v166, v167, v83);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 16))(v166, v167, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v166, 0, 1, v265);
      }
      v185 = (void *)(((unint64_t)v166 + v267) & v275);
      v186 = (const void *)(((unint64_t)v167 + v267) & v275);
      if (v82(v186, 1, v265))
      {
        memcpy(v185, v186, v83);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 16))(v185, v186, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v185, 0, 1, v265);
      }
      v156 = 4;
      break;
    case 5:
      v127 = v9 + 24;
      v259 = v41;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v262 + 16))(a1, a2, v263);
      v85 = a1;
      v128 = (void *)((v245 + a1) & v275);
      v129 = (const void *)((v245 + a2) & v275);
      v130 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v272 + 48);
      if (v130(v129, 1, v265))
      {
        v131 = v269;
        memcpy(v128, v129, v269);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 16))(v128, v129, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v128, 0, 1, v265);
        v131 = v269;
      }
      *((_BYTE *)v128 + v131) = *((_BYTE *)v129 + v131);
      v207 = ((unint64_t)v128 + v131) & 0xFFFFFFFFFFFFFFF8;
      v208 = ((unint64_t)v129 + v131) & 0xFFFFFFFFFFFFFFF8;
      *(_OWORD *)(v207 + 8) = *(_OWORD *)(v208 + 8);
      v209 = (void *)((v127 + v207) & v275);
      v210 = (const void *)((v127 + v208) & v275);
      if (v130(v210, 1, v265))
      {
        memcpy(v209, v210, v131);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 16))(v209, v210, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v209, 0, 1, v265);
      }
      v156 = 5;
      goto LABEL_213;
    case 6:
      v261 = v41;
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      v132 = (a1 + v5 + 24) & v44;
      v133 = (a2 + v5 + 24) & v44;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v262 + 16))(v132, v133, v263);
      v134 = (void *)((v132 + v254 + v9) & v275);
      v135 = (const void *)((v133 + v254 + v9) & v275);
      v136 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v272 + 48);
      if (v136(v135, 1, v265))
      {
        v137 = v269;
        memcpy(v134, v135, v269);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 16))(v134, v135, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v134, 0, 1, v265);
        v137 = v269;
      }
      v211 = (void *)(((unint64_t)v134 + v267) & v275);
      v212 = (const void *)(((unint64_t)v135 + v267) & v275);
      if (v136(v212, 1, v265))
      {
        memcpy(v211, v212, v137);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 16))(v211, v212, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v211, 0, 1, v265);
      }
      v156 = 6;
      v41 = v261;
      v43 = a1;
      break;
    case 7:
      v84 = v9 + 24;
      v259 = v41;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v262 + 16))(a1, a2, v263);
      v85 = a1;
      v86 = (void *)((v245 + a1) & v275);
      v87 = (const void *)((v245 + a2) & v275);
      v88 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v272 + 48);
      if (v88(v87, 1, v265))
      {
        v89 = v269;
        memcpy(v86, v87, v269);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 16))(v86, v87, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v86, 0, 1, v265);
        v89 = v269;
      }
      *((_BYTE *)v86 + v89) = *((_BYTE *)v87 + v89);
      v168 = ((unint64_t)v86 + v89) & 0xFFFFFFFFFFFFFFF8;
      v169 = ((unint64_t)v87 + v89) & 0xFFFFFFFFFFFFFFF8;
      *(_OWORD *)(v168 + 8) = *(_OWORD *)(v169 + 8);
      v170 = (void *)((v84 + v168) & v275);
      v171 = (const void *)((v84 + v169) & v275);
      if (v88(v171, 1, v265))
      {
        memcpy(v170, v171, v89);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 16))(v170, v171, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v170, 0, 1, v265);
      }
      v156 = 7;
      goto LABEL_213;
    case 8:
      v259 = v41;
      v138 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v138;
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      v139 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v139;
      v140 = *(_OWORD *)(a2 + 48);
      v141 = a2 + v5;
      v142 = a1 + v5 + 104;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v140;
      v85 = a1;
      v143 = v142 & v44;
      v144 = (v141 + 104) & v44;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v262 + 16))(v142 & v44, v144, v263);
      v145 = (void *)((v143 + v254 + v9) & v275);
      v146 = (const void *)((v144 + v254 + v9) & v275);
      v147 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v272 + 48);
      if (v147(v146, 1, v265))
      {
        v148 = v269;
        memcpy(v145, v146, v269);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 16))(v145, v146, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v145, 0, 1, v265);
        v148 = v269;
      }
      v213 = (void *)(((unint64_t)v145 + v267) & v275);
      v214 = (const void *)(((unint64_t)v146 + v267) & v275);
      if (v147(v214, 1, v265))
      {
        memcpy(v213, v214, v148);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 16))(v213, v214, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v213, 0, 1, v265);
      }
      v217 = (void *)(((unint64_t)v213 + v267) & v275);
      v218 = (const void *)(((unint64_t)v214 + v267) & v275);
      if (v147(v218, 1, v265))
      {
        memcpy(v217, v218, v148);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 16))(v217, v218, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v217, 0, 1, v265);
      }
      v156 = 8;
      goto LABEL_213;
    case 9:
      v248 = ~v22;
      v259 = v41;
      v90 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v90;
      v91 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v91;
      v92 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v92;
      v93 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v93;
      v94 = *(_OWORD *)(a2 + 16);
      v95 = a2 + v5;
      v96 = a1 + v5 + 160;
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v94;
      v85 = a1;
      v97 = v96 & v44;
      v98 = (v95 + 160) & v44;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v262 + 16))(v96 & v44, v98, v263);
      v99 = (void *)((v97 + v254 + v9) & v275);
      v100 = (const void *)((v98 + v254 + v9) & v275);
      v101 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v272 + 48);
      if (v101(v100, 1, v265))
      {
        v102 = v269;
        memcpy(v99, v100, v269);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 16))(v99, v100, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v99, 0, 1, v265);
        v102 = v269;
      }
      v172 = (void *)(((unint64_t)v99 + v267) & v275);
      v173 = (const void *)(((unint64_t)v100 + v267) & v275);
      if (v101(v173, 1, v265))
      {
        memcpy(v172, v173, v102);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 16))(v172, v173, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v172, 0, 1, v265);
      }
      v187 = (void *)(((unint64_t)v172 + v267) & v275);
      v188 = (const void *)(((unint64_t)v173 + v267) & v275);
      if (v101(v188, 1, v265))
      {
        memcpy(v187, v188, v102);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 16))(v187, v188, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v187, 0, 1, v265);
      }
      v199 = (void *)(((unint64_t)v187 + v267) & v275);
      v200 = (const void *)(((unint64_t)v188 + v267) & v275);
      if (v101(v200, 1, v265))
      {
        memcpy(v199, v200, v102);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 16))(v199, v200, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v199, 0, 1, v265);
      }
      v203 = (void *)(((unint64_t)v199 + v250) & v248);
      v204 = (const void *)(((unint64_t)v200 + v250) & v248);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v251 + 48))(v204, 1, v252))
      {
        memcpy(v203, v204, __n);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v251 + 16))(v203, v204, v252);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v251 + 56))(v203, 0, 1, v252);
      }
      v156 = 9;
      goto LABEL_213;
    case 0xA:
      v260 = v41;
      v149 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v149;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      v150 = (a1 + v5 + 56) & v44;
      v151 = (a2 + v5 + 56) & v44;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v262 + 16))(v150, v151, v263);
      v152 = (void *)((v150 + v254 + v9) & v275);
      v153 = (const void *)((v151 + v254 + v9) & v275);
      v154 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v272 + 48);
      if (v154(v153, 1, v265))
      {
        v155 = v269;
        memcpy(v152, v153, v269);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 16))(v152, v153, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v152, 0, 1, v265);
        v155 = v269;
      }
      v215 = (void *)(((unint64_t)v152 + v267) & v275);
      v216 = (const void *)(((unint64_t)v153 + v267) & v275);
      if (v154(v216, 1, v265))
      {
        memcpy(v215, v216, v155);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 16))(v215, v216, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v215, 0, 1, v265);
      }
      v219 = (void *)(((unint64_t)v215 + v267) & v275);
      v220 = (const void *)(((unint64_t)v216 + v267) & v275);
      if (v154(v220, 1, v265))
      {
        memcpy(v219, v220, v155);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 16))(v219, v220, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v219, 0, 1, v265);
      }
      v156 = 10;
      goto LABEL_216;
    case 0xB:
      v253 = v26 + 1;
      v249 = ~v22;
      v103 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v103;
      v104 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v104;
      v105 = (a1 + v5 + 64) & v44;
      v106 = (a2 + v5 + 64) & v44;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v262 + 16))(v105, v106, v263);
      v107 = (void *)((v105 + v254 + v9) & v275);
      v108 = (const void *)((v106 + v254 + v9) & v275);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v272 + 48))(v108, 1, v265))
      {
        v109 = v269;
        memcpy(v107, v108, v269);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 16))(v107, v108, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v107, 0, 1, v265);
        v109 = v269;
      }
      *((_BYTE *)v107 + v109) = *((_BYTE *)v108 + v109);
      v174 = ((v242 + ((v250 + ((v267 + (((v255 | v9) + v109) & v275)) & v275)) & v249)) & v249) + __n;
      if (v253 > v174)
        v174 = v253;
      if (v31 > v174)
        v174 = v31;
      if (v229 > v174)
        v174 = v229;
      if (v236 > v174)
        v174 = v236;
      if (v238 > v174)
        v174 = v238;
      if (v234 > v174)
        v174 = v234;
      if (v238 > v174)
        v174 = v238;
      if (v233 > v174)
        v174 = v233;
      if (v232 > v174)
        v174 = v232;
      if (v231 > v174)
        v174 = v231;
      if (v230 > v174)
        v174 = v230;
      if (v38 > v174)
        v174 = v38;
      if (v29 > v174)
        v174 = v29;
      if (v34 <= v174)
        v41 = v174;
      else
        v41 = v34;
      v156 = 11;
      goto LABEL_217;
    case 0xC:
      v259 = v41;
      v110 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v110;
      v111 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v111;
      v112 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v112;
      v113 = *(_OWORD *)(a2 + 48);
      v114 = a2 + v5;
      v115 = a1 + v5 + 128;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v113;
      v85 = a1;
      v116 = v115 & v44;
      v117 = (v114 + 128) & v44;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v262 + 16))(v115 & v44, v117, v263);
      v118 = (void *)((v116 + v254 + v9) & v275);
      v119 = (const void *)((v117 + v254 + v9) & v275);
      v120 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v272 + 48);
      if (v120(v119, 1, v265))
      {
        v121 = v269;
        memcpy(v118, v119, v269);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 16))(v118, v119, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v118, 0, 1, v265);
        v121 = v269;
      }
      v175 = (void *)(((unint64_t)v118 + v267) & v275);
      v176 = (const void *)(((unint64_t)v119 + v267) & v275);
      if (v120(v176, 1, v265))
      {
        memcpy(v175, v176, v121);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 16))(v175, v176, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v175, 0, 1, v265);
      }
      v189 = (void *)(((unint64_t)v175 + v267) & v275);
      v190 = (const void *)(((unint64_t)v176 + v267) & v275);
      if (v120(v190, 1, v265))
      {
        memcpy(v189, v190, v121);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 16))(v189, v190, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v189, 0, 1, v265);
      }
      v156 = 12;
LABEL_213:
      v41 = v259;
      v43 = v85;
      break;
    case 0xD:
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(a1, a2, v241);
      v156 = 13;
      break;
    case 0xE:
      v260 = v41;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v262 + 16))(a1, a2, v263);
      v122 = v245 + a1;
      v123 = (void *)((v245 + a1) & v275);
      v124 = (const void *)((v245 + a2) & v275);
      v125 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v272 + 48);
      if (v125(v124, 1, v265))
      {
        v126 = v269;
        memcpy(v123, v124, v269);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 16))(v123, v124, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v123, 0, 1, v265);
        v126 = v269;
      }
      v177 = ((v122 | v9) + v126) & v275;
      v178 = (const void *)((((v245 + a2) | v9) + v126) & v275);
      if (v125(v178, 1, v265))
      {
        memcpy((void *)(((v122 | v9) + v126) & v275), v178, v126);
      }
      else
      {
        (*(void (**)(size_t, const void *, uint64_t))(v272 + 16))(v177, v178, v265);
        (*(void (**)(size_t, _QWORD, uint64_t, uint64_t))(v272 + 56))(v177, 0, 1, v265);
      }
      v156 = 14;
LABEL_216:
      v41 = v260;
LABEL_217:
      v43 = a1;
      break;
    default:
      if (v41 <= 3)
        v42 = v41;
      else
        v42 = 4;
      __asm { BR              X12 }
      return result;
  }
  *(_BYTE *)(v43 + v41) = v156;
  return v43;
}

__int128 *sub_23BEF6F88(__int128 *a1, __int128 *a2, _QWORD *a3)
{
  __int128 *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  size_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  size_t v31;
  size_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  size_t v39;
  uint64_t v40;
  unint64_t v41;
  size_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int (*v51)(uint64_t, uint64_t, uint64_t);
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int (*v58)(uint64_t, uint64_t, uint64_t);
  uint64_t v59;
  size_t v60;
  size_t v61;
  void (*v62)(size_t, uint64_t);
  size_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int (*v69)(uint64_t, uint64_t, uint64_t);
  uint64_t v70;
  size_t v71;
  size_t v72;
  unsigned int (*v73)(size_t, uint64_t, uint64_t);
  size_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int (*v77)(uint64_t, uint64_t, uint64_t);
  uint64_t v78;
  size_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int (*v82)(uint64_t, uint64_t, uint64_t);
  size_t v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int (*v87)(uint64_t, uint64_t, uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int (*v92)(uint64_t, uint64_t, uint64_t);
  size_t v93;
  size_t v94;
  size_t v95;
  uint64_t v96;
  uint64_t v97;
  size_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  size_t v102;
  uint64_t v103;
  size_t v104;
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  const void *v121;
  unsigned int (*v122)(const void *, uint64_t, uint64_t);
  size_t v123;
  unsigned int v124;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  const void *v139;
  unsigned int (*v140)(const void *, uint64_t, uint64_t);
  __int128 v141;
  __int128 v142;
  __int128 v143;
  void *v144;
  const void *v145;
  unsigned int (*v146)(const void *, uint64_t, uint64_t);
  uint64_t v147;
  void *v148;
  const void *v149;
  void *v150;
  const void *v151;
  unsigned int (*v152)(const void *, uint64_t, uint64_t);
  __int128 v153;
  void *v154;
  const void *v155;
  unsigned int (*v156)(const void *, uint64_t, uint64_t);
  void *v157;
  const void *v158;
  unsigned int (*v159)(const void *, uint64_t, uint64_t);
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  void *v165;
  const void *v166;
  unsigned int (*v167)(const void *, uint64_t, uint64_t);
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  uint64_t v175;
  void *v176;
  const void *v177;
  unsigned int (*v178)(const void *, uint64_t, uint64_t);
  __int128 v179;
  __int128 v180;
  __int128 v181;
  void *v182;
  const void *v183;
  unsigned int (*v184)(const void *, uint64_t, uint64_t);
  uint64_t v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  uint64_t v189;
  void *v190;
  const void *v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  void *v198;
  const void *v199;
  unsigned int (*v200)(const void *, uint64_t, uint64_t);
  char v201;
  void *v202;
  const void *v203;
  unsigned int (*v204)(const void *, uint64_t, uint64_t);
  void *v205;
  const void *v206;
  void *v207;
  const void *v208;
  void *v209;
  char *v210;
  uint64_t v211;
  void *v212;
  const void *v213;
  unint64_t v214;
  unint64_t v215;
  void *v216;
  const void *v217;
  void *v218;
  const void *v219;
  unint64_t v220;
  unint64_t v221;
  void *v222;
  const void *v223;
  void *v224;
  const void *v225;
  void *v226;
  const void *v227;
  void *v228;
  const void *v229;
  size_t v230;
  void *v231;
  const void *v232;
  void *v233;
  const void *v234;
  void *v235;
  const void *v236;
  void *v237;
  const void *v238;
  char *v239;
  void *v240;
  const void *v241;
  unint64_t v242;
  void *v243;
  const void *v244;
  void *v245;
  const void *v246;
  void *v247;
  const void *v248;
  void *v249;
  const void *v250;
  void *v251;
  const void *v252;
  char v253;
  unint64_t v254;
  unint64_t v255;
  void (*v256)(unint64_t, unint64_t, uint64_t);
  void *v257;
  const void *v258;
  void *v259;
  const void *v260;
  unsigned int (*v261)(const void *, uint64_t, uint64_t);
  void *v262;
  const void *v263;
  void *v264;
  const void *v265;
  size_t v266;
  void *v267;
  const void *v268;
  void *v269;
  const void *v270;
  unsigned int (*v271)(__int128 *, uint64_t, uint64_t);
  size_t v272;
  char v273;
  unsigned int (*v274)(__int128 *, uint64_t, uint64_t);
  void *v275;
  void *v276;
  __int128 *result;
  size_t __n;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  int v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  size_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  size_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  size_t v303;
  size_t v304;
  size_t v305;
  unint64_t v306;
  unint64_t v307;
  unint64_t v308;
  unint64_t v309;
  unint64_t v310;
  unint64_t v311;
  unint64_t v312;
  size_t v313;
  size_t v314;
  uint64_t v315;
  unint64_t v316;
  uint64_t v317;
  __int128 *v318;
  uint64_t v319;
  size_t v320;
  size_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  unsigned int (*v326)(const void *, uint64_t, uint64_t);
  uint64_t v327;
  unint64_t v328;
  uint64_t v329;

  v3 = a1;
  if (a1 != a2)
  {
    v324 = a3[3];
    v4 = *(_QWORD *)(v324 - 8);
    v5 = *(unsigned __int8 *)(v4 + 80);
    v323 = v4;
    v6 = *(_QWORD *)(v4 + 64);
    v325 = sub_23BFF82CC();
    v8 = *(_QWORD *)(v325 - 8);
    v9 = *(unsigned __int8 *)(v8 + 80);
    v10 = v6 + v9;
    v318 = v3;
    v319 = v6 + v9 + 1;
    v301 = v319 + ((v5 + 248) & ~v5);
    v327 = v8;
    v11 = *(_QWORD *)(v8 + 64);
    v283 = *(_DWORD *)(v8 + 84);
    if (v283)
      v12 = *(_QWORD *)(v8 + 64);
    else
      v12 = v11 + 1;
    v13 = v12 + v9;
    v300 = a3[2];
    v14 = *(_QWORD *)(v300 - 8);
    v15 = *(unsigned __int8 *)(v14 + 80);
    v16 = v12 + v15;
    v17 = *(_QWORD *)(v14 + 64);
    v317 = v17 + v15;
    v299 = v14;
    if (*(_DWORD *)(v14 + 84))
      v18 = *(_QWORD *)(v14 + 64);
    else
      v18 = v17 + 1;
    v328 = ((v17 + v15 + ((v12 + v15 + ((v12 + v9 + ((v12 + v9 + (v301 & ~v9)) & ~v9)) & ~v9)) & ~v15)) & ~v15) + v18;
    v303 = v6;
    v294 = v11;
    if (v11 > v6)
      v6 = v11;
    v20 = sub_23BFF8368();
    v21 = *(_QWORD *)(v20 - 8);
    v22 = *(unsigned __int8 *)(v21 + 80);
    v281 = v21;
    v282 = v20;
    v23 = *(_QWORD *)(v21 + 64);
    v19 = v13 & ~v9;
    if (((v12 + v22 + v19) & ~v22) + v23 <= v6)
      v24 = v6;
    else
      v24 = ((v12 + v22 + v19) & ~v22) + v23;
    v285 = v18 + v15;
    v25 = a3[4];
    v26 = *(_QWORD *)(v25 - 8);
    v27 = *(unsigned __int8 *)(v26 + 80);
    if (*(_DWORD *)(v26 + 84))
      v28 = *(_QWORD *)(v26 + 64);
    else
      v28 = *(_QWORD *)(v26 + 64) + 1;
    v29 = ((v18
          + v27
          + ((v18 + v15 + ((v16 + ((v13 + ((v13 + ((v319 + ((v5 + 216) & ~v5)) & ~v9)) & ~v9)) & ~v9)) & ~v15)) & ~v15)) & ~v27)
        + v28;
    v30 = ((v16 + ((v13 + ((v9 + 64) & ~v9)) & ~v9)) & ~v15) + v18;
    v31 = (v10 & ~v9) + v12;
    v32 = ((v31 + v9) & ~v9) + v12;
    v290 = v9 + 24;
    v33 = ((v9 + 24 + (v31 & 0xFFFFFFFFFFFFFFF8)) & ~v9) + v12;
    v34 = ((v13 + ((v10 + ((v5 + 24) & ~v5)) & ~v9)) & ~v9) + v12;
    v35 = ((v13 + ((v13 + ((v10 + ((v5 + 104) & ~v5)) & ~v9)) & ~v9)) & ~v9) + v12;
    v320 = v18;
    v322 = v12 + v15;
    v315 = v15;
    v36 = (v16 + ((v13 + ((v13 + ((v13 + ((v10 + ((v5 + 160) & ~v5)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v15;
    v3 = v318;
    v37 = v36 + v18;
    v38 = ((v13 + ((v13 + ((v10 + ((v5 + 56) & ~v5)) & ~v9)) & ~v9)) & ~v9) + v12;
    v39 = ((v10 + ((v5 + 64) & ~v5)) & ~v9) + v12;
    v293 = v10;
    v40 = v10 + ((v5 + 128) & ~v5);
    v41 = *(_QWORD *)(v26 + 64);
    v42 = ((v13 + ((v13 + (v40 & ~v9)) & ~v9)) & ~v9) + v12;
    v43 = v328;
    v310 = v33;
    v311 = v30;
    if (v33 > v328)
      v43 = v33;
    v314 = v24 + 1;
    if (v43 <= v24 + 1)
      v43 = v24 + 1;
    v312 = v29;
    if (v43 <= v29)
      v43 = v29;
    if (v43 <= v30)
      v43 = v30;
    v308 = v34;
    v309 = ((v32 + v9) & ~v9) + v12;
    if (v43 <= v309)
      v43 = ((v32 + v9) & ~v9) + v12;
    if (v43 <= v34)
      v43 = v34;
    v306 = v37;
    v307 = v35;
    if (v43 <= v35)
      v43 = v35;
    if (v43 <= v37)
      v43 = v37;
    v305 = v39 + 1;
    if (v43 <= v38)
      v43 = v38;
    if (v43 <= v39 + 1)
      v44 = v39 + 1;
    else
      v44 = v43;
    v304 = v42;
    if (v44 <= v42)
      v44 = v42;
    v313 = v32;
    if (v44 <= v32)
      v44 = v32;
    if (v44 <= v41)
      v45 = *(_QWORD *)(v26 + 64);
    else
      v45 = v44;
    v287 = v24;
    v47 = ~v5;
    v48 = ~v9;
    v49 = ~v315;
    v279 = ~v22;
    v284 = ~v27;
    v329 = ~v9;
    v316 = v45;
    v288 = *(_QWORD *)(v25 - 8);
    v289 = v25;
    __n = v28;
    v286 = *(unsigned __int8 *)(v26 + 80);
    v291 = ~v5;
    v292 = v5;
    v280 = v22;
    switch(*((_BYTE *)v318 + v45))
    {
      case 0:
        v296 = ~v315;
        v55 = ((unint64_t)v318 + v5 + 248) & v47;
        (*(void (**)(uint64_t, uint64_t))(v323 + 8))(v55, v324);
        v56 = (v303 + v9 + v55 + 1) & v48;
        v57 = ~v9;
        v58 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v327 + 48);
        if (!v58(v56, 1, v325))
          (*(void (**)(uint64_t, uint64_t))(v327 + 8))(v56, v325);
        v59 = (v13 + v56) & v57;
        if (!v58(v59, 1, v325))
          (*(void (**)(uint64_t, uint64_t))(v327 + 8))(v59, v325);
        v60 = (v13 + v59) & v57;
        if (!v58(v60, 1, v325))
          (*(void (**)(size_t, uint64_t))(v327 + 8))(v60, v325);
        v49 = ~v315;
        v61 = (v322 + v60) & v296;
        v62 = *(void (**)(size_t, uint64_t))(v299 + 8);
        v62(v61, v300);
        v63 = (v317 + v61) & v296;
        if (!(*(unsigned int (**)(size_t, uint64_t, uint64_t))(v299 + 48))(v63, 1, v300))
          v62(v63, v300);
        goto LABEL_121;
      case 1:
        v64 = *((unsigned __int8 *)v318 + v24);
        if (v64 >= 3)
        {
          if (v24 <= 3)
            v65 = v24;
          else
            v65 = 4;
          __asm { BR              X12 }
        }
        if (v64 == 2)
        {
          v271 = *(unsigned int (**)(__int128 *, uint64_t, uint64_t))(v327 + 48);
          if (!v271(v318, 1, v325))
            (*(void (**)(__int128 *, uint64_t))(v327 + 8))(v318, v325);
          v272 = ((unint64_t)v318 + v13) & v329;
          if (!v271((__int128 *)v272, 1, v325))
            (*(void (**)(size_t, uint64_t))(v327 + 8))(v272, v325);
          (*(void (**)(size_t))(v281 + 8))((v272 + v12 + v280) & v279);
        }
        else if (v64 == 1)
        {
          (*(void (**)(__int128 *))(v327 + 8))(v318);
        }
        else
        {
          (*(void (**)(__int128 *))(v323 + 8))(v318);
        }
        goto LABEL_121;
      case 2:
        v297 = ~v315;
        v66 = ((unint64_t)v318 + v5 + 216) & v47;
        (*(void (**)(uint64_t, uint64_t))(v323 + 8))(v66, v324);
        v67 = (v303 + v9 + v66 + 1) & v48;
        v68 = ~v9;
        v69 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v327 + 48);
        if (!v69(v67, 1, v325))
          (*(void (**)(uint64_t, uint64_t))(v327 + 8))(v67, v325);
        v70 = (v13 + v67) & v68;
        if (!v69(v70, 1, v325))
          (*(void (**)(uint64_t, uint64_t))(v327 + 8))(v70, v325);
        v71 = (v13 + v70) & v68;
        if (!v69(v71, 1, v325))
          (*(void (**)(size_t, uint64_t))(v327 + 8))(v71, v325);
        v49 = ~v315;
        v72 = (v322 + v71) & v297;
        v73 = *(unsigned int (**)(size_t, uint64_t, uint64_t))(v299 + 48);
        if (!v73(v72, 1, v300))
          (*(void (**)(size_t, uint64_t))(v299 + 8))(v72, v300);
        v74 = (v285 + v72) & v297;
        if (!v73(v74, 1, v300))
          (*(void (**)(size_t, uint64_t))(v299 + 8))(v74, v300);
        v52 = (v74 + v320 + v286) & v284;
        if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v288 + 48))(v52, 1, v289))
          goto LABEL_121;
        v75 = v288;
        goto LABEL_120;
      case 3:
        v298 = ~v315;
        v76 = ((unint64_t)v318 + v9 + 64) & v48;
        v77 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v327 + 48);
        if (!v77(v76, 1, v325))
          (*(void (**)(uint64_t, uint64_t))(v327 + 8))(v76, v325);
        v78 = (v13 + v76) & ~v9;
        if (!v77(v78, 1, v325))
          (*(void (**)(uint64_t, uint64_t))(v327 + 8))(v78, v325);
        v79 = v78 + v12 + v315;
        goto LABEL_100;
      case 4:
        v295 = ~v315;
        (*(void (**)(__int128 *, uint64_t))(v323 + 8))(v318, v324);
        v80 = ((unint64_t)v318 + v293) & v48;
        v81 = ~v9;
        v82 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v327 + 48);
        if (!v82(v80, 1, v325))
          (*(void (**)(uint64_t, uint64_t))(v327 + 8))(v80, v325);
        v83 = ((((unint64_t)v318 + v293) | v9) + v12) & v81;
        if (!v82(v83, 1, v325))
          (*(void (**)(size_t, uint64_t))(v327 + 8))(v83, v325);
        v52 = (v13 + v83) & v81;
        v84 = v82(v52, 1, v325);
        goto LABEL_118;
      case 5:
      case 7:
        v295 = ~v315;
        (*(void (**)(__int128 *, uint64_t))(v323 + 8))(v318, v324);
        v50 = ((unint64_t)v318 + v293) & v48;
        v51 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v327 + 48);
        if (!v51(v50, 1, v325))
          (*(void (**)(uint64_t, uint64_t))(v327 + 8))(v50, v325);
        v52 = (v290 + ((v12 + v50) & 0xFFFFFFFFFFFFFFF8)) & ~v9;
        v53 = v52;
        v54 = v325;
        goto LABEL_117;
      case 6:
        v295 = ~v315;
        v85 = ((unint64_t)v318 + v5 + 24) & v47;
        (*(void (**)(uint64_t, uint64_t))(v323 + 8))(v85, v324);
        v86 = (v85 + v303 + v9) & v48;
        v87 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v327 + 48);
        if (!v87(v86, 1, v325))
          (*(void (**)(uint64_t, uint64_t))(v327 + 8))(v86, v325);
        v52 = (v13 + v86) & ~v9;
        v84 = v87(v52, 1, v325);
        goto LABEL_118;
      case 8:
        v295 = ~v315;
        v88 = (uint64_t)v318 + v5 + 104;
        goto LABEL_108;
      case 9:
        v298 = ~v315;
        v89 = ((unint64_t)v318 + v5 + 160) & v47;
        (*(void (**)(uint64_t, uint64_t))(v323 + 8))(v89, v324);
        v90 = (v89 + v303 + v9) & v48;
        v91 = ~v9;
        v92 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v327 + 48);
        if (!v92(v90, 1, v325))
          (*(void (**)(uint64_t, uint64_t))(v327 + 8))(v90, v325);
        v93 = (v13 + v90) & v91;
        if (!v92(v93, 1, v325))
          (*(void (**)(size_t, uint64_t))(v327 + 8))(v93, v325);
        v94 = (v13 + v93) & v91;
        if (!v92(v94, 1, v325))
          (*(void (**)(size_t, uint64_t))(v327 + 8))(v94, v325);
        v95 = (v13 + v94) & v91;
        if (!v92(v95, 1, v325))
          (*(void (**)(size_t, uint64_t))(v327 + 8))(v95, v325);
        v79 = v322 + v95;
LABEL_100:
        v49 = v298;
        v52 = v79 & v298;
        if ((*(unsigned int (**)(size_t, uint64_t, uint64_t))(v299 + 48))(v79 & v298, 1, v300))
          goto LABEL_121;
        v75 = v299;
        goto LABEL_120;
      case 0xA:
        v295 = ~v315;
        v88 = (uint64_t)v318 + v5 + 56;
        goto LABEL_108;
      case 0xB:
        v96 = ((unint64_t)v318 + v5 + 64) & v47;
        (*(void (**)(uint64_t, uint64_t))(v323 + 8))(v96, v324);
        v97 = (v96 + v303 + v9) & v48;
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v327 + 48))(v97, 1, v325))
          (*(void (**)(uint64_t, uint64_t))(v327 + 8))(v97, v325);
        v98 = v294;
        if (!v283)
          goto LABEL_121;
        goto LABEL_122;
      case 0xC:
        v295 = ~v315;
        v88 = (uint64_t)v318 + v5 + 128;
LABEL_108:
        v99 = v88 & v47;
        (*(void (**)(uint64_t, uint64_t))(v323 + 8))(v88 & v47, v324);
        v100 = (v99 + v303 + v9) & v48;
        v101 = ~v9;
        v51 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v327 + 48);
        if (!v51(v100, 1, v325))
          (*(void (**)(uint64_t, uint64_t))(v327 + 8))(v100, v325);
        v102 = (v13 + v100) & v101;
        if (!v51(v102, 1, v325))
          (*(void (**)(size_t, uint64_t))(v327 + 8))(v102, v325);
        v52 = (v13 + v102) & v101;
        v53 = v52;
        v54 = v325;
        goto LABEL_117;
      case 0xD:
        (*(void (**)(__int128 *))(v26 + 8))(v318);
        goto LABEL_121;
      case 0xE:
        v295 = ~v315;
        (*(void (**)(__int128 *, uint64_t))(v323 + 8))(v318, v324);
        v103 = ((unint64_t)v318 + v293) & v48;
        v51 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v327 + 48);
        if (!v51(v103, 1, v325))
          (*(void (**)(uint64_t, uint64_t))(v327 + 8))(v103, v325);
        v52 = ((((unint64_t)v318 + v293) | v9) + v12) & ~v9;
        v53 = v52;
        v54 = v325;
LABEL_117:
        v84 = v51(v53, 1, v54);
LABEL_118:
        v49 = v295;
        if (!v84)
        {
          v75 = v327;
LABEL_120:
          (*(void (**)(unint64_t))(v75 + 8))(v52);
        }
LABEL_121:
        v98 = v12;
LABEL_122:
        v104 = ((v317 + ((v322 + ((v13 + (((v301 | v9) + v98) & v329)) & v329)) & v49)) & v49) + v320;
        if (v314 > v104)
          v104 = v314;
        if (v312 > v104)
          v104 = v312;
        if (v311 > v104)
          v104 = v311;
        if (v309 > v104)
          v104 = v309;
        if (v310 > v104)
          v104 = v310;
        if (v308 > v104)
          v104 = v308;
        if (v310 > v104)
          v104 = v310;
        if (v307 > v104)
          v104 = v307;
        if (v306 > v104)
          v104 = v306;
        if (v38 > v104)
          v104 = v38;
        if (v305 > v104)
          v104 = v305;
        if (v304 > v104)
          v104 = v304;
        if (v41 > v104)
          v104 = v41;
        if (v313 > v104)
          v104 = v313;
        switch(*((_BYTE *)a2 + v104))
        {
          case 0:
            v106 = *a2;
            v107 = a2[1];
            v108 = a2[3];
            v318[2] = a2[2];
            v318[3] = v108;
            *v318 = v106;
            v318[1] = v107;
            v109 = a2[4];
            v110 = a2[5];
            v111 = a2[7];
            v318[6] = a2[6];
            v318[7] = v111;
            v318[4] = v109;
            v318[5] = v110;
            v112 = a2[8];
            v113 = a2[9];
            v114 = a2[11];
            v318[10] = a2[10];
            v318[11] = v114;
            v318[8] = v112;
            v318[9] = v113;
            v115 = a2[12];
            v116 = a2[13];
            v117 = a2[14];
            *((_QWORD *)v318 + 30) = *((_QWORD *)a2 + 30);
            v318[13] = v116;
            v318[14] = v117;
            v318[12] = v115;
            v118 = ((unint64_t)v318 + v292 + 248) & v291;
            v119 = ((unint64_t)a2 + v292 + 248) & v291;
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v323 + 16))(v118, v119, v324);
            *(_BYTE *)(v118 + v303) = *(_BYTE *)(v119 + v303);
            v120 = (void *)((v118 + v303 + v9 + 1) & v329);
            v121 = (const void *)((v119 + v303 + v9 + 1) & v329);
            v122 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v327 + 48);
            if (v122(v121, 1, v325))
            {
              memcpy(v120, v121, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v327 + 16))(v120, v121, v325);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v327 + 56))(v120, 0, 1, v325);
            }
            v205 = (void *)(((unint64_t)v120 + v13) & v329);
            v206 = (const void *)(((unint64_t)v121 + v13) & v329);
            if (v122(v206, 1, v325))
            {
              memcpy(v205, v206, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v327 + 16))(v205, v206, v325);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v327 + 56))(v205, 0, 1, v325);
            }
            v235 = (void *)(((unint64_t)v205 + v13) & v329);
            v236 = (const void *)(((unint64_t)v206 + v13) & v329);
            if (v122(v236, 1, v325))
            {
              memcpy(v235, v236, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v327 + 16))(v235, v236, v325);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v327 + 56))(v235, 0, 1, v325);
            }
            v254 = ((unint64_t)v235 + v322) & v49;
            v255 = ((unint64_t)v236 + v322) & v49;
            v256 = *(void (**)(unint64_t, unint64_t, uint64_t))(v299 + 16);
            v256(v254, v255, v300);
            v257 = (void *)((v317 + v254) & v49);
            v258 = (const void *)((v317 + v255) & v49);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v299 + 48))(v258, 1, v300))
            {
              memcpy(v257, v258, v320);
            }
            else
            {
              v256((unint64_t)v257, (unint64_t)v258, v300);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v299 + 56))(v257, 0, 1, v300);
            }
            v3 = v318;
            *((_BYTE *)v318 + v316) = 0;
            return v3;
          case 1:
            v123 = v287;
            v124 = *((unsigned __int8 *)a2 + v287);
            if (v124 >= 3)
            {
              if (v287 <= 3)
                v125 = v287;
              else
                v125 = 4;
              __asm { BR              X12 }
            }
            if (v124 == 2)
            {
              v274 = *(unsigned int (**)(__int128 *, uint64_t, uint64_t))(v327 + 48);
              if (v274(a2, 1, v325))
              {
                memcpy(v318, a2, v12);
              }
              else
              {
                (*(void (**)(__int128 *, __int128 *, uint64_t))(v327 + 16))(v318, a2, v325);
                (*(void (**)(__int128 *, _QWORD, uint64_t, uint64_t))(v327 + 56))(v318, 0, 1, v325);
              }
              v275 = (void *)(((unint64_t)v318 + v13) & v329);
              v276 = (void *)(((unint64_t)a2 + v13) & v329);
              if (v274((__int128 *)v276, 1, v325))
              {
                memcpy(v275, v276, v12);
              }
              else
              {
                (*(void (**)(void *, void *, uint64_t))(v327 + 16))(v275, v276, v325);
                (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v327 + 56))(v275, 0, 1, v325);
              }
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v281 + 16))(((unint64_t)v275 + v12 + v280) & v279, ((unint64_t)v276 + v12 + v280) & v279, v282);
              v273 = 2;
              v123 = v287;
            }
            else if (v124 == 1)
            {
              (*(void (**)(__int128 *, __int128 *, uint64_t))(v327 + 16))(v318, a2, v325);
              v273 = 1;
            }
            else
            {
              (*(void (**)(__int128 *, __int128 *, uint64_t))(v323 + 16))(v318, a2, v324);
              v273 = 0;
            }
            *((_BYTE *)v318 + v123) = v273;
            v201 = 1;
            goto LABEL_343;
          case 2:
            v126 = a2[1];
            *v318 = *a2;
            v318[1] = v126;
            v127 = a2[2];
            v128 = a2[3];
            v129 = a2[5];
            v318[4] = a2[4];
            v318[5] = v129;
            v318[2] = v127;
            v318[3] = v128;
            v130 = a2[6];
            v131 = a2[7];
            v132 = a2[9];
            v318[8] = a2[8];
            v318[9] = v132;
            v318[6] = v130;
            v318[7] = v131;
            v133 = a2[10];
            v134 = a2[11];
            v135 = a2[12];
            *((_QWORD *)v318 + 26) = *((_QWORD *)a2 + 26);
            v318[11] = v134;
            v318[12] = v135;
            v318[10] = v133;
            v136 = ((unint64_t)v318 + v292 + 216) & v291;
            v137 = ((unint64_t)a2 + v292 + 216) & v291;
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v323 + 16))(v136, v137, v324);
            *(_BYTE *)(v136 + v303) = *(_BYTE *)(v137 + v303);
            v138 = (void *)((v136 + v303 + v9 + 1) & v329);
            v139 = (const void *)((v137 + v303 + v9 + 1) & v329);
            v140 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v327 + 48);
            if (v140(v139, 1, v325))
            {
              memcpy(v138, v139, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v327 + 16))(v138, v139, v325);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v327 + 56))(v138, 0, 1, v325);
            }
            v207 = (void *)(((unint64_t)v138 + v13) & v329);
            v208 = (const void *)(((unint64_t)v139 + v13) & v329);
            if (v140(v208, 1, v325))
            {
              memcpy(v207, v208, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v327 + 16))(v207, v208, v325);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v327 + 56))(v207, 0, 1, v325);
            }
            v237 = (void *)(((unint64_t)v207 + v13) & v329);
            v238 = (const void *)(((unint64_t)v208 + v13) & v329);
            if (v140(v238, 1, v325))
            {
              memcpy(v237, v238, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v327 + 16))(v237, v238, v325);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v327 + 56))(v237, 0, 1, v325);
            }
            v259 = (void *)(((unint64_t)v237 + v322) & v49);
            v260 = (const void *)(((unint64_t)v238 + v322) & v49);
            v261 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v299 + 48);
            if (v261(v260, 1, v300))
            {
              memcpy(v259, v260, v320);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v299 + 16))(v259, v260, v300);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v299 + 56))(v259, 0, 1, v300);
            }
            v3 = v318;
            v264 = (void *)(((unint64_t)v259 + v285) & v49);
            v265 = (const void *)(((unint64_t)v260 + v285) & v49);
            if (v261(v265, 1, v300))
            {
              v266 = v320;
              memcpy(v264, v265, v320);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v299 + 16))(v264, v265, v300);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v299 + 56))(v264, 0, 1, v300);
              v266 = v320;
            }
            v269 = (void *)(((unint64_t)v264 + v266 + v286) & v284);
            v270 = (const void *)(((unint64_t)v265 + v266 + v286) & v284);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v288 + 48))(v270, 1, v289))
            {
              memcpy(v269, v270, __n);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v288 + 16))(v269, v270, v289);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v288 + 56))(v269, 0, 1, v289);
            }
            *((_BYTE *)v318 + v316) = 2;
            return v3;
          case 3:
            v141 = *a2;
            v142 = a2[1];
            v143 = a2[3];
            v318[2] = a2[2];
            v318[3] = v143;
            *v318 = v141;
            v318[1] = v142;
            v144 = (void *)(((unint64_t)v318 + v9 + 64) & v329);
            v145 = (const void *)(((unint64_t)a2 + v9 + 64) & v329);
            v146 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v327 + 48);
            if (v146(v145, 1, v325))
            {
              memcpy(v144, v145, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v327 + 16))(v144, v145, v325);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v327 + 56))(v144, 0, 1, v325);
            }
            v209 = (void *)(((unint64_t)v144 + v13) & v329);
            v210 = (char *)(((unint64_t)v145 + v13) & v329);
            if (v146(v210, 1, v325))
            {
              memcpy(v209, v210, v12);
            }
            else
            {
              (*(void (**)(void *, char *, uint64_t))(v327 + 16))(v209, v210, v325);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v327 + 56))(v209, 0, 1, v325);
            }
            v239 = &v210[v12];
            v240 = (void *)(((unint64_t)v209 + v12 + v315) & v49);
            v241 = (const void *)((unint64_t)&v239[v315] & v49);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v299 + 48))(v241, 1, v300))
            {
              memcpy(v240, v241, v320);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v299 + 16))(v240, v241, v300);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v299 + 56))(v240, 0, 1, v300);
            }
            v3 = v318;
            *((_BYTE *)v318 + v316) = 3;
            return v3;
          case 4:
            (*(void (**)(__int128 *, __int128 *, uint64_t))(v323 + 16))(v318, a2, v324);
            v147 = v325;
            v148 = (void *)(((unint64_t)v318 + v293) & v329);
            v149 = (const void *)(((unint64_t)a2 + v293) & v329);
            v326 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v327 + 48);
            if (v326(v149, 1, v147))
            {
              memcpy(v148, v149, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v327 + 16))(v148, v149, v147);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v327 + 56))(v148, 0, 1, v147);
            }
            v211 = ~v9;
            v212 = (void *)(((((unint64_t)v318 + v293) | v9) + v12) & v329);
            v213 = (const void *)(((((unint64_t)a2 + v293) | v9) + v12) & v329);
            if (v326(v213, 1, v147))
            {
              memcpy(v212, v213, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v327 + 16))(v212, v213, v147);
              v211 = ~v9;
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v327 + 56))(v212, 0, 1, v147);
            }
            v242 = v316;
            v243 = (void *)(((unint64_t)v212 + v13) & v211);
            v244 = (const void *)(((unint64_t)v213 + v13) & v211);
            if (v326(v244, 1, v147))
            {
              memcpy(v243, v244, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v327 + 16))(v243, v244, v147);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v327 + 56))(v243, 0, 1, v147);
            }
            v253 = 4;
            goto LABEL_297;
          case 5:
            (*(void (**)(__int128 *, __int128 *, uint64_t))(v323 + 16))(v318, a2, v324);
            v150 = (void *)(((unint64_t)v318 + v293) & v329);
            v151 = (const void *)(((unint64_t)a2 + v293) & v329);
            v152 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v327 + 48);
            if (v152(v151, 1, v325))
            {
              memcpy(v150, v151, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v327 + 16))(v150, v151, v325);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v327 + 56))(v150, 0, 1, v325);
            }
            *((_BYTE *)v150 + v12) = *((_BYTE *)v151 + v12);
            v214 = ((unint64_t)v150 + v12) & 0xFFFFFFFFFFFFFFF8;
            v215 = ((unint64_t)v151 + v12) & 0xFFFFFFFFFFFFFFF8;
            *(_OWORD *)(v214 + 8) = *(_OWORD *)(v215 + 8);
            v216 = (void *)((v290 + v214) & v329);
            v217 = (const void *)((v290 + v215) & v329);
            if (v152(v217, 1, v325))
            {
              memcpy(v216, v217, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v327 + 16))(v216, v217, v325);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v327 + 56))(v216, 0, 1, v325);
            }
            v201 = 5;
            goto LABEL_343;
          case 6:
            v153 = *a2;
            *((_QWORD *)v318 + 2) = *((_QWORD *)a2 + 2);
            *v318 = v153;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v323 + 16))(((unint64_t)v318 + v292 + 24) & v291, ((unint64_t)a2 + v292 + 24) & v291, v324);
            v154 = (void *)(((((unint64_t)v318 + v292 + 24) & v291) + v303 + v9) & v329);
            v155 = (const void *)(((((unint64_t)a2 + v292 + 24) & v291) + v303 + v9) & v329);
            v156 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v327 + 48);
            if (v156(v155, 1, v325))
            {
              memcpy(v154, v155, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v327 + 16))(v154, v155, v325);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v327 + 56))(v154, 0, 1, v325);
            }
            v218 = (void *)(((unint64_t)v154 + v13) & v329);
            v219 = (const void *)(((unint64_t)v155 + v13) & v329);
            if (v156(v219, 1, v325))
            {
              memcpy(v218, v219, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v327 + 16))(v218, v219, v325);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v327 + 56))(v218, 0, 1, v325);
            }
            v201 = 6;
            goto LABEL_343;
          case 7:
            (*(void (**)(__int128 *, __int128 *, uint64_t))(v323 + 16))(v318, a2, v324);
            v157 = (void *)(((unint64_t)v318 + v293) & v329);
            v158 = (const void *)(((unint64_t)a2 + v293) & v329);
            v159 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v327 + 48);
            if (v159(v158, 1, v325))
            {
              memcpy(v157, v158, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v327 + 16))(v157, v158, v325);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v327 + 56))(v157, 0, 1, v325);
            }
            *((_BYTE *)v157 + v12) = *((_BYTE *)v158 + v12);
            v220 = ((unint64_t)v157 + v12) & 0xFFFFFFFFFFFFFFF8;
            v221 = ((unint64_t)v158 + v12) & 0xFFFFFFFFFFFFFFF8;
            *(_OWORD *)(v220 + 8) = *(_OWORD *)(v221 + 8);
            v222 = (void *)((v290 + v220) & v329);
            v223 = (const void *)((v290 + v221) & v329);
            if (v159(v223, 1, v325))
            {
              memcpy(v222, v223, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v327 + 16))(v222, v223, v325);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v327 + 56))(v222, 0, 1, v325);
            }
            v201 = 7;
            goto LABEL_343;
          case 8:
            v160 = *a2;
            v161 = a2[2];
            v318[1] = a2[1];
            v318[2] = v161;
            *v318 = v160;
            v162 = a2[3];
            v163 = a2[4];
            v164 = a2[5];
            *((_QWORD *)v318 + 12) = *((_QWORD *)a2 + 12);
            v318[4] = v163;
            v318[5] = v164;
            v318[3] = v162;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v323 + 16))(((unint64_t)v318 + v292 + 104) & v291, ((unint64_t)a2 + v292 + 104) & v291, v324);
            v165 = (void *)(((((unint64_t)v318 + v292 + 104) & v291) + v303 + v9) & v329);
            v166 = (const void *)(((((unint64_t)a2 + v292 + 104) & v291) + v303 + v9) & v329);
            v167 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v327 + 48);
            if (v167(v166, 1, v325))
            {
              memcpy(v165, v166, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v327 + 16))(v165, v166, v325);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v327 + 56))(v165, 0, 1, v325);
            }
            v224 = (void *)(((unint64_t)v165 + v13) & v329);
            v225 = (const void *)(((unint64_t)v166 + v13) & v329);
            if (v167(v225, 1, v325))
            {
              memcpy(v224, v225, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v327 + 16))(v224, v225, v325);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v327 + 56))(v224, 0, 1, v325);
            }
            v245 = (void *)(((unint64_t)v224 + v13) & v329);
            v246 = (const void *)(((unint64_t)v225 + v13) & v329);
            if (v167(v246, 1, v325))
            {
              memcpy(v245, v246, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v327 + 16))(v245, v246, v325);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v327 + 56))(v245, 0, 1, v325);
            }
            v201 = 8;
            goto LABEL_343;
          case 9:
            v168 = a2[1];
            *v318 = *a2;
            v318[1] = v168;
            v169 = a2[2];
            v170 = a2[3];
            v171 = a2[5];
            v318[4] = a2[4];
            v318[5] = v171;
            v318[2] = v169;
            v318[3] = v170;
            v172 = a2[6];
            v173 = a2[7];
            v174 = a2[9];
            v318[8] = a2[8];
            v318[9] = v174;
            v318[6] = v172;
            v318[7] = v173;
            v175 = ((unint64_t)v318 + v292 + 160) & v291;
            (*(void (**)(uint64_t, unint64_t, uint64_t))(v323 + 16))(v175, ((unint64_t)a2 + v292 + 160) & v291, v324);
            v176 = (void *)((v175 + v303 + v9) & v329);
            v177 = (const void *)(((((unint64_t)a2 + v292 + 160) & v291) + v303 + v9) & v329);
            v178 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v327 + 48);
            if (v178(v177, 1, v325))
            {
              memcpy(v176, v177, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v327 + 16))(v176, v177, v325);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v327 + 56))(v176, 0, 1, v325);
            }
            v226 = (void *)(((unint64_t)v176 + v13) & v329);
            v227 = (const void *)(((unint64_t)v177 + v13) & v329);
            if (v178(v227, 1, v325))
            {
              memcpy(v226, v227, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v327 + 16))(v226, v227, v325);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v327 + 56))(v226, 0, 1, v325);
            }
            v247 = (void *)(((unint64_t)v226 + v13) & v329);
            v248 = (const void *)(((unint64_t)v227 + v13) & v329);
            if (v178(v248, 1, v325))
            {
              memcpy(v247, v248, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v327 + 16))(v247, v248, v325);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v327 + 56))(v247, 0, 1, v325);
            }
            v262 = (void *)(((unint64_t)v247 + v13) & v329);
            v263 = (const void *)(((unint64_t)v248 + v13) & v329);
            if (v178(v263, 1, v325))
            {
              memcpy(v262, v263, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v327 + 16))(v262, v263, v325);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v327 + 56))(v262, 0, 1, v325);
            }
            v267 = (void *)(((unint64_t)v262 + v322) & v49);
            v268 = (const void *)(((unint64_t)v263 + v322) & v49);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v299 + 48))(v268, 1, v300))
            {
              memcpy(v267, v268, v320);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v299 + 16))(v267, v268, v300);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v299 + 56))(v267, 0, 1, v300);
            }
            v3 = v318;
            *((_BYTE *)v318 + v316) = 9;
            return v3;
          case 0xA:
            v179 = *a2;
            v180 = a2[1];
            v181 = a2[2];
            *((_QWORD *)v318 + 6) = *((_QWORD *)a2 + 6);
            v318[1] = v180;
            v318[2] = v181;
            *v318 = v179;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v323 + 16))(((unint64_t)v318 + v292 + 56) & v291, ((unint64_t)a2 + v292 + 56) & v291, v324);
            v182 = (void *)(((((unint64_t)v318 + v292 + 56) & v291) + v303 + v9) & v329);
            v183 = (const void *)(((((unint64_t)a2 + v292 + 56) & v291) + v303 + v9) & v329);
            v184 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v327 + 48);
            if (v184(v183, 1, v325))
            {
              memcpy(v182, v183, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v327 + 16))(v182, v183, v325);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v327 + 56))(v182, 0, 1, v325);
            }
            v228 = (void *)(((unint64_t)v182 + v13) & v329);
            v229 = (const void *)(((unint64_t)v183 + v13) & v329);
            if (v184(v229, 1, v325))
            {
              memcpy(v228, v229, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v327 + 16))(v228, v229, v325);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v327 + 56))(v228, 0, 1, v325);
            }
            v249 = (void *)(((unint64_t)v228 + v13) & v329);
            v250 = (const void *)(((unint64_t)v229 + v13) & v329);
            if (v184(v250, 1, v325))
            {
              memcpy(v249, v250, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v327 + 16))(v249, v250, v325);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v327 + 56))(v249, 0, 1, v325);
            }
            v201 = 10;
            goto LABEL_343;
          case 0xB:
            v185 = v49;
            v186 = *a2;
            v187 = a2[1];
            v188 = a2[3];
            v318[2] = a2[2];
            v318[3] = v188;
            *v318 = v186;
            v318[1] = v187;
            v189 = ((unint64_t)v318 + v292 + 64) & v291;
            (*(void (**)(uint64_t, unint64_t, uint64_t))(v323 + 16))(v189, ((unint64_t)a2 + v292 + 64) & v291, v324);
            v190 = (void *)((v189 + v303 + v9) & v329);
            v191 = (const void *)(((((unint64_t)a2 + v292 + 64) & v291) + v303 + v9) & v329);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v327 + 48))(v191, 1, v325))
            {
              memcpy(v190, v191, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v327 + 16))(v190, v191, v325);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v327 + 56))(v190, 0, 1, v325);
            }
            *((_BYTE *)v190 + v12) = *((_BYTE *)v191 + v12);
            v230 = ((v317 + ((v322 + ((v13 + (((v301 | v9) + v12) & v329)) & v329)) & v185)) & v185) + v320;
            if (v314 > v230)
              v230 = v314;
            if (v312 > v230)
              v230 = v312;
            if (v311 > v230)
              v230 = v311;
            if (v309 > v230)
              v230 = v309;
            if (v310 > v230)
              v230 = v310;
            if (v308 > v230)
              v230 = v308;
            if (v310 > v230)
              v230 = v310;
            if (v307 > v230)
              v230 = v307;
            if (v306 > v230)
              v230 = v306;
            if (v38 > v230)
              v230 = v38;
            if (v305 > v230)
              v230 = v305;
            if (v304 > v230)
              v230 = v304;
            if (v41 > v230)
              v230 = v41;
            if (v313 > v230)
              v230 = v313;
            v3 = v318;
            *((_BYTE *)v318 + v230) = 11;
            return v3;
          case 0xC:
            v192 = *a2;
            v193 = a2[1];
            v194 = a2[3];
            v318[2] = a2[2];
            v318[3] = v194;
            *v318 = v192;
            v318[1] = v193;
            v195 = a2[4];
            v196 = a2[5];
            v197 = a2[7];
            v318[6] = a2[6];
            v318[7] = v197;
            v318[4] = v195;
            v318[5] = v196;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v323 + 16))(((unint64_t)v318 + v292 + 128) & v291, ((unint64_t)a2 + v292 + 128) & v291, v324);
            v198 = (void *)(((((unint64_t)v318 + v292 + 128) & v291) + v303 + v9) & v329);
            v199 = (const void *)(((((unint64_t)a2 + v292 + 128) & v291) + v303 + v9) & v329);
            v200 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v327 + 48);
            if (v200(v199, 1, v325))
            {
              memcpy(v198, v199, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v327 + 16))(v198, v199, v325);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v327 + 56))(v198, 0, 1, v325);
            }
            v231 = (void *)(((unint64_t)v198 + v13) & v329);
            v232 = (const void *)(((unint64_t)v199 + v13) & v329);
            if (v200(v232, 1, v325))
            {
              memcpy(v231, v232, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v327 + 16))(v231, v232, v325);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v327 + 56))(v231, 0, 1, v325);
            }
            v251 = (void *)(((unint64_t)v231 + v13) & v329);
            v252 = (const void *)(((unint64_t)v232 + v13) & v329);
            if (v200(v252, 1, v325))
            {
              memcpy(v251, v252, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v327 + 16))(v251, v252, v325);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v327 + 56))(v251, 0, 1, v325);
            }
            v201 = 12;
            goto LABEL_343;
          case 0xD:
            (*(void (**)(__int128 *, __int128 *, uint64_t))(v288 + 16))(v318, a2, v289);
            v201 = 13;
LABEL_343:
            *((_BYTE *)v318 + v316) = v201;
            break;
          case 0xE:
            (*(void (**)(__int128 *, __int128 *, uint64_t))(v323 + 16))(v318, a2, v324);
            v202 = (void *)(((unint64_t)v318 + v293) & v329);
            v203 = (const void *)(((unint64_t)a2 + v293) & v329);
            v204 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v327 + 48);
            if (v204(v203, 1, v325))
            {
              memcpy(v202, v203, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v327 + 16))(v202, v203, v325);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v327 + 56))(v202, 0, 1, v325);
            }
            v233 = (void *)(((((unint64_t)v318 + v293) | v9) + v12) & v329);
            v234 = (const void *)(((((unint64_t)a2 + v293) | v9) + v12) & v329);
            if (v204(v234, 1, v325))
            {
              memcpy(v233, v234, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v327 + 16))(v233, v234, v325);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v327 + 56))(v233, 0, 1, v325);
            }
            v242 = v316;
            v253 = 14;
LABEL_297:
            *((_BYTE *)v318 + v242) = v253;
            break;
          default:
            if (v316 <= 3)
              v105 = v316;
            else
              v105 = 4;
            __asm { BR              X12 }
            return result;
        }
        return result;
      default:
        if (v45 <= 3)
          v46 = v45;
        else
          v46 = 4;
        __asm { BR              X12 }
        return result;
    }
  }
  return v3;
}

uint64_t sub_23BEF96D8(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  size_t v12;
  size_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  size_t v30;
  unint64_t v31;
  unint64_t v32;
  size_t v33;
  size_t v34;
  unint64_t v35;
  unint64_t v36;
  size_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  const void *v56;
  unsigned int (*v57)(const void *, uint64_t, uint64_t);
  size_t v58;
  unsigned int v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  const void *v70;
  unsigned int (*v71)(const void *, uint64_t, uint64_t);
  size_t v72;
  unint64_t v73;
  __int128 v74;
  __int128 v75;
  void *v76;
  const void *v77;
  unsigned int (*v78)(const void *, uint64_t, uint64_t);
  size_t v79;
  void *v80;
  const void *v81;
  unsigned int (*v82)(const void *, uint64_t, uint64_t);
  size_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  const void *v87;
  unsigned int (*v88)(const void *, uint64_t, uint64_t);
  size_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  const void *v100;
  unsigned int (*v101)(const void *, uint64_t, uint64_t);
  size_t v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  const void *v108;
  size_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  const void *v119;
  unsigned int (*v120)(const void *, uint64_t, uint64_t);
  size_t v121;
  uint64_t v122;
  void *v123;
  const void *v124;
  unsigned int (*v125)(const void *, uint64_t, uint64_t);
  size_t v126;
  uint64_t v127;
  void *v128;
  const void *v129;
  unsigned int (*v130)(const void *, uint64_t, uint64_t);
  size_t v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  const void *v135;
  unsigned int (*v136)(const void *, uint64_t, uint64_t);
  size_t v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  const void *v146;
  unsigned int (*v147)(const void *, uint64_t, uint64_t);
  size_t v148;
  __int128 v149;
  uint64_t v150;
  uint64_t v151;
  void *v152;
  const void *v153;
  unsigned int (*v154)(const void *, uint64_t, uint64_t);
  size_t v155;
  char v156;
  size_t v157;
  uint64_t v158;
  uint64_t v159;
  void *v160;
  const void *v161;
  void *v162;
  const void *v163;
  void *v164;
  const void *v165;
  void *v166;
  const void *v167;
  unint64_t v168;
  unint64_t v169;
  void *v170;
  const void *v171;
  void *v172;
  const void *v173;
  size_t v174;
  void *v175;
  const void *v176;
  size_t v177;
  const void *v178;
  void *v179;
  const void *v180;
  void *v181;
  const void *v182;
  void *v183;
  const void *v184;
  void *v185;
  const void *v186;
  void *v187;
  const void *v188;
  void *v189;
  const void *v190;
  unint64_t v191;
  void (*v192)(unint64_t, unint64_t, uint64_t);
  void *v193;
  const void *v194;
  void *v195;
  const void *v196;
  unsigned int (*v197)(const void *, uint64_t, uint64_t);
  size_t v198;
  void *v199;
  const void *v200;
  void *v201;
  const void *v202;
  void *v203;
  const void *v204;
  void *v205;
  const void *v206;
  unint64_t v207;
  unint64_t v208;
  void *v209;
  const void *v210;
  void *v211;
  const void *v212;
  void *v213;
  const void *v214;
  void *v215;
  const void *v216;
  void *v217;
  const void *v218;
  void *v219;
  const void *v220;
  uint64_t result;
  uint64_t v222;
  char v223;
  uint64_t v224;
  unsigned int (*v225)(uint64_t, uint64_t, uint64_t);
  void *v226;
  const void *v227;
  uint64_t v228;
  unint64_t v229;
  size_t v230;
  size_t v231;
  unint64_t v232;
  size_t v233;
  size_t v234;
  size_t v235;
  size_t v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  size_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  size_t __n;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  size_t v253;
  size_t v254;
  uint64_t v255;
  unint64_t v256;
  unint64_t v257;
  unint64_t v258;
  unint64_t v259;
  unint64_t v260;
  unint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  size_t v267;
  size_t v269;
  uint64_t v270;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  uint64_t v275;
  uint64_t v276;

  v263 = a3[3];
  v4 = *(_QWORD *)(v263 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v262 = v4;
  v6 = *(_QWORD *)(v4 + 64);
  v7 = sub_23BFF82CC();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v6 + v9;
  v265 = v7;
  v266 = v6 + v9 + 1;
  v255 = v266 + ((v5 + 248) & ~v5);
  v11 = *(_DWORD *)(v8 + 84);
  v272 = v8;
  v12 = *(_QWORD *)(v8 + 64);
  if (v11)
    v13 = v12;
  else
    v13 = v12 + 1;
  v14 = v13 + v9;
  v252 = a3[2];
  v15 = *(_QWORD *)(v252 - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = v13 + v16;
  v18 = *(_QWORD *)(v15 + 64);
  v242 = v18 + v16;
  v251 = v15;
  if (*(_DWORD *)(v15 + 84))
    v19 = *(_QWORD *)(v15 + 64);
  else
    v19 = v18 + 1;
  v274 = ((v18 + v16 + ((v13 + v16 + ((v13 + v9 + ((v13 + v9 + (v255 & ~v9)) & ~v9)) & ~v9)) & ~v16)) & ~v16) + v19;
  v254 = v6;
  if (v12 > v6)
    v6 = v12;
  v21 = sub_23BFF8368();
  v22 = v16;
  v228 = v21;
  v23 = *(_QWORD *)(v21 - 8);
  v24 = *(unsigned __int8 *)(v23 + 80);
  v25 = *(_QWORD *)(v23 + 64);
  v20 = v14 & ~v9;
  if (((v13 + v24 + v20) & ~v24) + v25 <= v6)
    v26 = v6;
  else
    v26 = ((v13 + v24 + v20) & ~v24) + v25;
  v240 = v19 + v16;
  v241 = a3[4];
  v27 = *(_QWORD *)(v241 - 8);
  v28 = *(unsigned __int8 *)(v27 + 80);
  v29 = *(_QWORD *)(v27 + 64);
  if (*(_DWORD *)(v27 + 84))
    v30 = *(_QWORD *)(v27 + 64);
  else
    v30 = v29 + 1;
  v31 = ((v19
        + v28
        + ((v19 + v16 + ((v17 + ((v14 + ((v14 + ((v266 + ((v5 + 216) & ~v5)) & ~v9)) & ~v9)) & ~v9)) & ~v16)) & ~v16)) & ~v28)
      + v30;
  v32 = ((v17 + ((v14 + ((v9 + 64) & ~v9)) & ~v9)) & ~v16) + v19;
  v33 = (v10 & ~v9) + v13;
  v34 = ((v33 + v9) & ~v9) + v13;
  v35 = ((v9 + 24 + (v33 & 0xFFFFFFFFFFFFFFF8)) & ~v9) + v13;
  v250 = v17;
  __n = v19;
  v36 = ((v17 + ((v14 + ((v14 + ((v14 + ((v10 + ((v5 + 160) & ~v5)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v22) + v19;
  v37 = ((v10 + ((v5 + 64) & ~v5)) & ~v9) + v13;
  v245 = v10;
  v267 = v13 + v9;
  v269 = v13;
  v38 = ((v14 + ((v14 + ((v10 + ((v5 + 128) & ~v5)) & ~v9)) & ~v9)) & ~v9) + v13;
  v39 = v274;
  v236 = ((v34 + v9) & ~v9) + v13;
  v238 = v35;
  if (v35 > v274)
    v39 = v35;
  if (v39 <= v26 + 1)
    v39 = v26 + 1;
  if (v39 <= v31)
    v39 = v31;
  v229 = v32;
  v230 = v37 + 1;
  if (v39 <= v32)
    v39 = v32;
  if (v39 <= ((v34 + v9) & ~v9) + v13)
    v39 = ((v34 + v9) & ~v9) + v13;
  v233 = ((v14 + ((v14 + ((v10 + ((v5 + 104) & ~v5)) & ~v9)) & ~v9)) & ~v9) + v13;
  v234 = ((v14 + ((v10 + ((v5 + 24) & ~v5)) & ~v9)) & ~v9) + v13;
  if (v39 <= v234)
    v39 = ((v14 + ((v10 + ((v5 + 24) & ~v5)) & ~v9)) & ~v9) + v13;
  if (v39 <= ((v14 + ((v14 + ((v10 + ((v5 + 104) & ~v5)) & ~v9)) & ~v9)) & ~v9) + v13)
    v39 = ((v14 + ((v14 + ((v10 + ((v5 + 104) & ~v5)) & ~v9)) & ~v9)) & ~v9) + v13;
  v231 = ((v14 + ((v14 + ((v10 + ((v5 + 56) & ~v5)) & ~v9)) & ~v9)) & ~v9) + v13;
  v232 = v36;
  if (v39 <= v36)
    v39 = v36;
  if (v39 <= ((v14 + ((v14 + ((v10 + ((v5 + 56) & ~v5)) & ~v9)) & ~v9)) & ~v9) + v13)
    v39 = ((v14 + ((v14 + ((v10 + ((v5 + 56) & ~v5)) & ~v9)) & ~v9)) & ~v9) + v13;
  if (v39 <= v37 + 1)
    v40 = v37 + 1;
  else
    v40 = v39;
  if (v40 <= v38)
    v40 = ((v14 + ((v14 + ((v10 + ((v5 + 128) & ~v5)) & ~v9)) & ~v9)) & ~v9) + v13;
  if (v40 <= v34)
    v40 = v34;
  if (v40 <= v29)
    v41 = *(_QWORD *)(v27 + 64);
  else
    v41 = v40;
  v43 = a1;
  v44 = ~v5;
  v275 = ~v9;
  v45 = ~v22;
  switch(*(_BYTE *)(a2 + v41))
  {
    case 0:
      v246 = ~v22;
      v256 = v41;
      v46 = *(_OWORD *)(a2 + 208);
      *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
      *(_OWORD *)(a1 + 208) = v46;
      *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
      *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
      v47 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v47;
      v48 = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = v48;
      v49 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v49;
      v50 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v50;
      v51 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v51;
      v52 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v52;
      v53 = (a1 + v5 + 248) & v44;
      v54 = (a2 + v5 + 248) & v44;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v262 + 32))(v53, v54, v263);
      *(_BYTE *)(v53 + v254) = *(_BYTE *)(v54 + v254);
      v55 = (void *)((v53 + v254 + v9 + 1) & v275);
      v56 = (const void *)((v54 + v254 + v9 + 1) & v275);
      v57 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v272 + 48);
      if (v57(v56, 1, v265))
      {
        v58 = v269;
        memcpy(v55, v56, v269);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 32))(v55, v56, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v55, 0, 1, v265);
        v58 = v269;
      }
      v160 = (void *)(((unint64_t)v55 + v267) & v275);
      v161 = (const void *)(((unint64_t)v56 + v267) & v275);
      if (v57(v161, 1, v265))
      {
        memcpy(v160, v161, v58);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 32))(v160, v161, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v160, 0, 1, v265);
      }
      v179 = (void *)(((unint64_t)v160 + v267) & v275);
      v180 = (const void *)(((unint64_t)v161 + v267) & v275);
      if (v57(v180, 1, v265))
      {
        memcpy(v179, v180, v58);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 32))(v179, v180, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v179, 0, 1, v265);
      }
      v191 = ((unint64_t)v179 + v250) & v246;
      v192 = *(void (**)(unint64_t, unint64_t, uint64_t))(v251 + 32);
      v192(v191, ((unint64_t)v180 + v250) & v246, v252);
      v193 = (void *)((v242 + v191) & v246);
      v194 = (const void *)((v242 + (((unint64_t)v180 + v250) & v246)) & v246);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v251 + 48))(v194, 1, v252))
      {
        memcpy(v193, v194, __n);
      }
      else
      {
        v192((unint64_t)v193, (unint64_t)v194, v252);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v251 + 56))(v193, 0, 1, v252);
      }
      v156 = 0;
      v41 = v256;
      v43 = a1;
      break;
    case 1:
      v257 = v41;
      v59 = *(unsigned __int8 *)(a2 + v26);
      if (v59 >= 3)
      {
        if (v26 <= 3)
          v60 = v26;
        else
          v60 = 4;
        __asm { BR              X12 }
      }
      v157 = v269;
      v159 = v272;
      v158 = ~v9;
      if (v59 == 2)
      {
        v224 = ~v24;
        v270 = *(unsigned __int8 *)(v23 + 80);
        v273 = *(_QWORD *)(v21 - 8);
        v276 = v26;
        v225 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v159 + 48);
        if (v225(a2, 1, v265))
        {
          memcpy((void *)a1, (const void *)a2, v157);
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v159 + 32))(a1, a2, v265);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v159 + 56))(a1, 0, 1, v265);
        }
        v226 = (void *)((v267 + a1) & v158);
        v227 = (const void *)((v267 + a2) & v158);
        if (v225((uint64_t)v227, 1, v265))
        {
          memcpy(v226, v227, v157);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v159 + 32))(v226, v227, v265);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v159 + 56))(v226, 0, 1, v265);
        }
        v41 = v257;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v273 + 32))(((unint64_t)v226 + v157 + v270) & v224, ((unint64_t)v227 + v157 + v270) & v224, v228);
        v223 = 2;
        v222 = v276;
      }
      else
      {
        v222 = v26;
        if (v59 == 1)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v272 + 32))(a1, a2, v265);
          v223 = 1;
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v262 + 32))(a1, a2, v263);
          v223 = 0;
        }
        v41 = v257;
      }
      *(_BYTE *)(a1 + v222) = v223;
      v156 = 1;
      v43 = a1;
      break;
    case 2:
      v237 = ~v28;
      v239 = *(unsigned __int8 *)(v27 + 80);
      v235 = v30;
      v243 = *(_QWORD *)(v241 - 8);
      v247 = ~v22;
      v258 = v41;
      v61 = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = v61;
      *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      v62 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v62;
      v63 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v63;
      v64 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v64;
      v65 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v65;
      v66 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v66;
      v67 = (a1 + v5 + 216) & v44;
      v68 = (a2 + v5 + 216) & v44;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v262 + 32))(v67, v68, v263);
      *(_BYTE *)(v67 + v254) = *(_BYTE *)(v68 + v254);
      v69 = (void *)((v67 + v254 + v9 + 1) & v275);
      v70 = (const void *)((v68 + v254 + v9 + 1) & v275);
      v71 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v272 + 48);
      if (v71(v70, 1, v265))
      {
        v72 = v269;
        memcpy(v69, v70, v269);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 32))(v69, v70, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v69, 0, 1, v265);
        v72 = v269;
      }
      v162 = (void *)(((unint64_t)v69 + v267) & v275);
      v163 = (const void *)(((unint64_t)v70 + v267) & v275);
      if (v71(v163, 1, v265))
      {
        memcpy(v162, v163, v72);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 32))(v162, v163, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v162, 0, 1, v265);
      }
      v181 = (void *)(((unint64_t)v162 + v267) & v275);
      v182 = (const void *)(((unint64_t)v163 + v267) & v275);
      if (v71(v182, 1, v265))
      {
        memcpy(v181, v182, v72);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 32))(v181, v182, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v181, 0, 1, v265);
      }
      v195 = (void *)(((unint64_t)v181 + v250) & v247);
      v196 = (const void *)(((unint64_t)v182 + v250) & v247);
      v197 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v251 + 48);
      if (v197(v196, 1, v252))
      {
        v198 = __n;
        memcpy(v195, v196, __n);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v251 + 32))(v195, v196, v252);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v251 + 56))(v195, 0, 1, v252);
        v198 = __n;
      }
      v201 = (void *)(((unint64_t)v195 + v240) & v247);
      v202 = (const void *)(((unint64_t)v196 + v240) & v247);
      if (v197(v202, 1, v252))
      {
        memcpy(v201, v202, v198);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v251 + 32))(v201, v202, v252);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v251 + 56))(v201, 0, 1, v252);
      }
      v205 = (void *)(((unint64_t)v201 + v198 + v239) & v237);
      v206 = (const void *)(((unint64_t)v202 + v198 + v239) & v237);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v243 + 48))(v206, 1, v241))
      {
        memcpy(v205, v206, v235);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v243 + 32))(v205, v206, v241);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v243 + 56))(v205, 0, 1, v241);
      }
      v156 = 2;
      v41 = v258;
      goto LABEL_217;
    case 3:
      v264 = v22;
      v73 = v41;
      v74 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v74;
      v75 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v75;
      v76 = (void *)((a1 + v9 + 64) & v275);
      v77 = (const void *)((a2 + v9 + 64) & v275);
      v78 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v272 + 48);
      if (v78(v77, 1, v265))
      {
        v79 = v269;
        memcpy(v76, v77, v269);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 32))(v76, v77, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v76, 0, 1, v265);
        v79 = v269;
      }
      v164 = (void *)(((unint64_t)v76 + v267) & v275);
      v165 = (const void *)(((unint64_t)v77 + v267) & v275);
      if (v78(v165, 1, v265))
      {
        memcpy(v164, v165, v79);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 32))(v164, v165, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v164, 0, 1, v265);
      }
      v183 = (void *)(((unint64_t)v164 + v79 + v264) & v45);
      v184 = (const void *)(((unint64_t)v165 + v79 + v264) & v45);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v251 + 48))(v184, 1, v252))
      {
        memcpy(v183, v184, __n);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v251 + 32))(v183, v184, v252);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v251 + 56))(v183, 0, 1, v252);
      }
      v156 = 3;
      v41 = v73;
      goto LABEL_217;
    case 4:
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v262 + 32))(a1, a2, v263);
      v80 = (void *)((v245 + a1) & v275);
      v81 = (const void *)((v245 + a2) & v275);
      v82 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v272 + 48);
      if (v82(v81, 1, v265))
      {
        v83 = v269;
        memcpy(v80, v81, v269);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 32))(v80, v81, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v80, 0, 1, v265);
        v83 = v269;
      }
      v166 = (void *)((((v245 + a1) | v9) + v83) & v275);
      v167 = (const void *)((((v245 + a2) | v9) + v83) & v275);
      if (v82(v167, 1, v265))
      {
        memcpy(v166, v167, v83);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 32))(v166, v167, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v166, 0, 1, v265);
      }
      v185 = (void *)(((unint64_t)v166 + v267) & v275);
      v186 = (const void *)(((unint64_t)v167 + v267) & v275);
      if (v82(v186, 1, v265))
      {
        memcpy(v185, v186, v83);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 32))(v185, v186, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v185, 0, 1, v265);
      }
      v156 = 4;
      break;
    case 5:
      v127 = v9 + 24;
      v259 = v41;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v262 + 32))(a1, a2, v263);
      v85 = a1;
      v128 = (void *)((v245 + a1) & v275);
      v129 = (const void *)((v245 + a2) & v275);
      v130 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v272 + 48);
      if (v130(v129, 1, v265))
      {
        v131 = v269;
        memcpy(v128, v129, v269);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 32))(v128, v129, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v128, 0, 1, v265);
        v131 = v269;
      }
      *((_BYTE *)v128 + v131) = *((_BYTE *)v129 + v131);
      v207 = ((unint64_t)v128 + v131) & 0xFFFFFFFFFFFFFFF8;
      v208 = ((unint64_t)v129 + v131) & 0xFFFFFFFFFFFFFFF8;
      *(_OWORD *)(v207 + 8) = *(_OWORD *)(v208 + 8);
      v209 = (void *)((v127 + v207) & v275);
      v210 = (const void *)((v127 + v208) & v275);
      if (v130(v210, 1, v265))
      {
        memcpy(v209, v210, v131);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 32))(v209, v210, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v209, 0, 1, v265);
      }
      v156 = 5;
      goto LABEL_213;
    case 6:
      v261 = v41;
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      v132 = (a1 + v5 + 24) & v44;
      v133 = (a2 + v5 + 24) & v44;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v262 + 32))(v132, v133, v263);
      v134 = (void *)((v132 + v254 + v9) & v275);
      v135 = (const void *)((v133 + v254 + v9) & v275);
      v136 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v272 + 48);
      if (v136(v135, 1, v265))
      {
        v137 = v269;
        memcpy(v134, v135, v269);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 32))(v134, v135, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v134, 0, 1, v265);
        v137 = v269;
      }
      v211 = (void *)(((unint64_t)v134 + v267) & v275);
      v212 = (const void *)(((unint64_t)v135 + v267) & v275);
      if (v136(v212, 1, v265))
      {
        memcpy(v211, v212, v137);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 32))(v211, v212, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v211, 0, 1, v265);
      }
      v156 = 6;
      v41 = v261;
      v43 = a1;
      break;
    case 7:
      v84 = v9 + 24;
      v259 = v41;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v262 + 32))(a1, a2, v263);
      v85 = a1;
      v86 = (void *)((v245 + a1) & v275);
      v87 = (const void *)((v245 + a2) & v275);
      v88 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v272 + 48);
      if (v88(v87, 1, v265))
      {
        v89 = v269;
        memcpy(v86, v87, v269);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 32))(v86, v87, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v86, 0, 1, v265);
        v89 = v269;
      }
      *((_BYTE *)v86 + v89) = *((_BYTE *)v87 + v89);
      v168 = ((unint64_t)v86 + v89) & 0xFFFFFFFFFFFFFFF8;
      v169 = ((unint64_t)v87 + v89) & 0xFFFFFFFFFFFFFFF8;
      *(_OWORD *)(v168 + 8) = *(_OWORD *)(v169 + 8);
      v170 = (void *)((v84 + v168) & v275);
      v171 = (const void *)((v84 + v169) & v275);
      if (v88(v171, 1, v265))
      {
        memcpy(v170, v171, v89);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 32))(v170, v171, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v170, 0, 1, v265);
      }
      v156 = 7;
      goto LABEL_213;
    case 8:
      v259 = v41;
      v138 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v138;
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      v139 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v139;
      v140 = *(_OWORD *)(a2 + 48);
      v141 = a2 + v5;
      v142 = a1 + v5 + 104;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v140;
      v85 = a1;
      v143 = v142 & v44;
      v144 = (v141 + 104) & v44;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v262 + 32))(v142 & v44, v144, v263);
      v145 = (void *)((v143 + v254 + v9) & v275);
      v146 = (const void *)((v144 + v254 + v9) & v275);
      v147 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v272 + 48);
      if (v147(v146, 1, v265))
      {
        v148 = v269;
        memcpy(v145, v146, v269);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 32))(v145, v146, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v145, 0, 1, v265);
        v148 = v269;
      }
      v213 = (void *)(((unint64_t)v145 + v267) & v275);
      v214 = (const void *)(((unint64_t)v146 + v267) & v275);
      if (v147(v214, 1, v265))
      {
        memcpy(v213, v214, v148);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 32))(v213, v214, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v213, 0, 1, v265);
      }
      v217 = (void *)(((unint64_t)v213 + v267) & v275);
      v218 = (const void *)(((unint64_t)v214 + v267) & v275);
      if (v147(v218, 1, v265))
      {
        memcpy(v217, v218, v148);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 32))(v217, v218, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v217, 0, 1, v265);
      }
      v156 = 8;
      goto LABEL_213;
    case 9:
      v248 = ~v22;
      v259 = v41;
      v90 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v90;
      v91 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v91;
      v92 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v92;
      v93 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v93;
      v94 = *(_OWORD *)(a2 + 16);
      v95 = a2 + v5;
      v96 = a1 + v5 + 160;
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v94;
      v85 = a1;
      v97 = v96 & v44;
      v98 = (v95 + 160) & v44;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v262 + 32))(v96 & v44, v98, v263);
      v99 = (void *)((v97 + v254 + v9) & v275);
      v100 = (const void *)((v98 + v254 + v9) & v275);
      v101 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v272 + 48);
      if (v101(v100, 1, v265))
      {
        v102 = v269;
        memcpy(v99, v100, v269);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 32))(v99, v100, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v99, 0, 1, v265);
        v102 = v269;
      }
      v172 = (void *)(((unint64_t)v99 + v267) & v275);
      v173 = (const void *)(((unint64_t)v100 + v267) & v275);
      if (v101(v173, 1, v265))
      {
        memcpy(v172, v173, v102);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 32))(v172, v173, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v172, 0, 1, v265);
      }
      v187 = (void *)(((unint64_t)v172 + v267) & v275);
      v188 = (const void *)(((unint64_t)v173 + v267) & v275);
      if (v101(v188, 1, v265))
      {
        memcpy(v187, v188, v102);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 32))(v187, v188, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v187, 0, 1, v265);
      }
      v199 = (void *)(((unint64_t)v187 + v267) & v275);
      v200 = (const void *)(((unint64_t)v188 + v267) & v275);
      if (v101(v200, 1, v265))
      {
        memcpy(v199, v200, v102);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 32))(v199, v200, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v199, 0, 1, v265);
      }
      v203 = (void *)(((unint64_t)v199 + v250) & v248);
      v204 = (const void *)(((unint64_t)v200 + v250) & v248);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v251 + 48))(v204, 1, v252))
      {
        memcpy(v203, v204, __n);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v251 + 32))(v203, v204, v252);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v251 + 56))(v203, 0, 1, v252);
      }
      v156 = 9;
      goto LABEL_213;
    case 0xA:
      v260 = v41;
      v149 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v149;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      v150 = (a1 + v5 + 56) & v44;
      v151 = (a2 + v5 + 56) & v44;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v262 + 32))(v150, v151, v263);
      v152 = (void *)((v150 + v254 + v9) & v275);
      v153 = (const void *)((v151 + v254 + v9) & v275);
      v154 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v272 + 48);
      if (v154(v153, 1, v265))
      {
        v155 = v269;
        memcpy(v152, v153, v269);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 32))(v152, v153, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v152, 0, 1, v265);
        v155 = v269;
      }
      v215 = (void *)(((unint64_t)v152 + v267) & v275);
      v216 = (const void *)(((unint64_t)v153 + v267) & v275);
      if (v154(v216, 1, v265))
      {
        memcpy(v215, v216, v155);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 32))(v215, v216, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v215, 0, 1, v265);
      }
      v219 = (void *)(((unint64_t)v215 + v267) & v275);
      v220 = (const void *)(((unint64_t)v216 + v267) & v275);
      if (v154(v220, 1, v265))
      {
        memcpy(v219, v220, v155);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 32))(v219, v220, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v219, 0, 1, v265);
      }
      v156 = 10;
      goto LABEL_216;
    case 0xB:
      v253 = v26 + 1;
      v249 = ~v22;
      v103 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v103;
      v104 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v104;
      v105 = (a1 + v5 + 64) & v44;
      v106 = (a2 + v5 + 64) & v44;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v262 + 32))(v105, v106, v263);
      v107 = (void *)((v105 + v254 + v9) & v275);
      v108 = (const void *)((v106 + v254 + v9) & v275);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v272 + 48))(v108, 1, v265))
      {
        v109 = v269;
        memcpy(v107, v108, v269);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 32))(v107, v108, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v107, 0, 1, v265);
        v109 = v269;
      }
      *((_BYTE *)v107 + v109) = *((_BYTE *)v108 + v109);
      v174 = ((v242 + ((v250 + ((v267 + (((v255 | v9) + v109) & v275)) & v275)) & v249)) & v249) + __n;
      if (v253 > v174)
        v174 = v253;
      if (v31 > v174)
        v174 = v31;
      if (v229 > v174)
        v174 = v229;
      if (v236 > v174)
        v174 = v236;
      if (v238 > v174)
        v174 = v238;
      if (v234 > v174)
        v174 = v234;
      if (v238 > v174)
        v174 = v238;
      if (v233 > v174)
        v174 = v233;
      if (v232 > v174)
        v174 = v232;
      if (v231 > v174)
        v174 = v231;
      if (v230 > v174)
        v174 = v230;
      if (v38 > v174)
        v174 = v38;
      if (v29 > v174)
        v174 = v29;
      if (v34 <= v174)
        v41 = v174;
      else
        v41 = v34;
      v156 = 11;
      goto LABEL_217;
    case 0xC:
      v259 = v41;
      v110 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v110;
      v111 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v111;
      v112 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v112;
      v113 = *(_OWORD *)(a2 + 48);
      v114 = a2 + v5;
      v115 = a1 + v5 + 128;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v113;
      v85 = a1;
      v116 = v115 & v44;
      v117 = (v114 + 128) & v44;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v262 + 32))(v115 & v44, v117, v263);
      v118 = (void *)((v116 + v254 + v9) & v275);
      v119 = (const void *)((v117 + v254 + v9) & v275);
      v120 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v272 + 48);
      if (v120(v119, 1, v265))
      {
        v121 = v269;
        memcpy(v118, v119, v269);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 32))(v118, v119, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v118, 0, 1, v265);
        v121 = v269;
      }
      v175 = (void *)(((unint64_t)v118 + v267) & v275);
      v176 = (const void *)(((unint64_t)v119 + v267) & v275);
      if (v120(v176, 1, v265))
      {
        memcpy(v175, v176, v121);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 32))(v175, v176, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v175, 0, 1, v265);
      }
      v189 = (void *)(((unint64_t)v175 + v267) & v275);
      v190 = (const void *)(((unint64_t)v176 + v267) & v275);
      if (v120(v190, 1, v265))
      {
        memcpy(v189, v190, v121);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 32))(v189, v190, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v189, 0, 1, v265);
      }
      v156 = 12;
LABEL_213:
      v41 = v259;
      v43 = v85;
      break;
    case 0xD:
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 32))(a1, a2, v241);
      v156 = 13;
      break;
    case 0xE:
      v260 = v41;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v262 + 32))(a1, a2, v263);
      v122 = v245 + a1;
      v123 = (void *)((v245 + a1) & v275);
      v124 = (const void *)((v245 + a2) & v275);
      v125 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v272 + 48);
      if (v125(v124, 1, v265))
      {
        v126 = v269;
        memcpy(v123, v124, v269);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v272 + 32))(v123, v124, v265);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v123, 0, 1, v265);
        v126 = v269;
      }
      v177 = ((v122 | v9) + v126) & v275;
      v178 = (const void *)((((v245 + a2) | v9) + v126) & v275);
      if (v125(v178, 1, v265))
      {
        memcpy((void *)(((v122 | v9) + v126) & v275), v178, v126);
      }
      else
      {
        (*(void (**)(size_t, const void *, uint64_t))(v272 + 32))(v177, v178, v265);
        (*(void (**)(size_t, _QWORD, uint64_t, uint64_t))(v272 + 56))(v177, 0, 1, v265);
      }
      v156 = 14;
LABEL_216:
      v41 = v260;
LABEL_217:
      v43 = a1;
      break;
    default:
      if (v41 <= 3)
        v42 = v41;
      else
        v42 = 4;
      __asm { BR              X12 }
      return result;
  }
  *(_BYTE *)(v43 + v41) = v156;
  return v43;
}

uint64_t sub_23BEFB438(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  size_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  size_t v31;
  size_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  size_t v39;
  uint64_t v40;
  unint64_t v41;
  size_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int (*v51)(uint64_t, uint64_t, uint64_t);
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int (*v58)(uint64_t, uint64_t, uint64_t);
  uint64_t v59;
  size_t v60;
  size_t v61;
  void (*v62)(size_t, uint64_t);
  size_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int (*v69)(uint64_t, uint64_t, uint64_t);
  uint64_t v70;
  size_t v71;
  size_t v72;
  unsigned int (*v73)(size_t, uint64_t, uint64_t);
  size_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int (*v77)(uint64_t, uint64_t, uint64_t);
  uint64_t v78;
  size_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int (*v82)(uint64_t, uint64_t, uint64_t);
  size_t v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int (*v87)(uint64_t, uint64_t, uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int (*v92)(uint64_t, uint64_t, uint64_t);
  size_t v93;
  size_t v94;
  size_t v95;
  uint64_t v96;
  uint64_t v97;
  size_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  size_t v102;
  uint64_t v103;
  size_t v104;
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  const void *v116;
  unsigned int (*v117)(const void *, uint64_t, uint64_t);
  size_t v118;
  unsigned int v119;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  const void *v130;
  unsigned int (*v131)(const void *, uint64_t, uint64_t);
  __int128 v132;
  __int128 v133;
  void *v134;
  const void *v135;
  unsigned int (*v136)(const void *, uint64_t, uint64_t);
  uint64_t v137;
  void *v138;
  const void *v139;
  void *v140;
  const void *v141;
  unsigned int (*v142)(const void *, uint64_t, uint64_t);
  void *v143;
  const void *v144;
  unsigned int (*v145)(const void *, uint64_t, uint64_t);
  void *v146;
  const void *v147;
  unsigned int (*v148)(const void *, uint64_t, uint64_t);
  __int128 v149;
  __int128 v150;
  __int128 v151;
  void *v152;
  const void *v153;
  unsigned int (*v154)(const void *, uint64_t, uint64_t);
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  uint64_t v160;
  void *v161;
  const void *v162;
  unsigned int (*v163)(const void *, uint64_t, uint64_t);
  __int128 v164;
  void *v165;
  const void *v166;
  unsigned int (*v167)(const void *, uint64_t, uint64_t);
  uint64_t v168;
  __int128 v169;
  __int128 v170;
  uint64_t v171;
  void *v172;
  const void *v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  void *v178;
  const void *v179;
  unsigned int (*v180)(const void *, uint64_t, uint64_t);
  char v181;
  void *v182;
  const void *v183;
  unsigned int (*v184)(const void *, uint64_t, uint64_t);
  void *v185;
  const void *v186;
  void *v187;
  const void *v188;
  void *v189;
  char *v190;
  uint64_t v191;
  void *v192;
  const void *v193;
  unint64_t v194;
  unint64_t v195;
  void *v196;
  const void *v197;
  void *v198;
  const void *v199;
  unint64_t v200;
  unint64_t v201;
  void *v202;
  const void *v203;
  void *v204;
  const void *v205;
  void *v206;
  const void *v207;
  void *v208;
  const void *v209;
  size_t v210;
  void *v211;
  const void *v212;
  void *v213;
  const void *v214;
  void *v215;
  const void *v216;
  void *v217;
  const void *v218;
  char *v219;
  void *v220;
  const void *v221;
  unint64_t v222;
  void *v223;
  const void *v224;
  void *v225;
  const void *v226;
  void *v227;
  const void *v228;
  void *v229;
  const void *v230;
  void *v231;
  const void *v232;
  char v233;
  unint64_t v234;
  unint64_t v235;
  void (*v236)(unint64_t, unint64_t, uint64_t);
  void *v237;
  const void *v238;
  void *v239;
  const void *v240;
  unsigned int (*v241)(const void *, uint64_t, uint64_t);
  void *v242;
  const void *v243;
  void *v244;
  const void *v245;
  size_t v246;
  void *v247;
  const void *v248;
  void *v249;
  const void *v250;
  unsigned int (*v251)(uint64_t, uint64_t, uint64_t);
  size_t v252;
  char v253;
  unsigned int (*v254)(uint64_t, uint64_t, uint64_t);
  void *v255;
  const void *v256;
  uint64_t result;
  size_t __n;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  int v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  size_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  size_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  size_t v283;
  size_t v284;
  size_t v285;
  unint64_t v286;
  unint64_t v287;
  unint64_t v288;
  unint64_t v289;
  unint64_t v290;
  unint64_t v291;
  unint64_t v292;
  size_t v293;
  size_t v294;
  uint64_t v295;
  unint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  size_t v300;
  size_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  unsigned int (*v306)(const void *, uint64_t, uint64_t);
  uint64_t v307;
  unint64_t v308;
  uint64_t v309;

  v3 = a1;
  if (a1 != a2)
  {
    v304 = a3[3];
    v4 = *(_QWORD *)(v304 - 8);
    v5 = *(unsigned __int8 *)(v4 + 80);
    v303 = v4;
    v6 = *(_QWORD *)(v4 + 64);
    v305 = sub_23BFF82CC();
    v8 = *(_QWORD *)(v305 - 8);
    v9 = *(unsigned __int8 *)(v8 + 80);
    v10 = v6 + v9;
    v298 = v3;
    v299 = v6 + v9 + 1;
    v281 = v299 + ((v5 + 248) & ~v5);
    v307 = v8;
    v11 = *(_QWORD *)(v8 + 64);
    v263 = *(_DWORD *)(v8 + 84);
    if (v263)
      v12 = *(_QWORD *)(v8 + 64);
    else
      v12 = v11 + 1;
    v13 = v12 + v9;
    v280 = a3[2];
    v14 = *(_QWORD *)(v280 - 8);
    v15 = *(unsigned __int8 *)(v14 + 80);
    v16 = v12 + v15;
    v17 = *(_QWORD *)(v14 + 64);
    v297 = v17 + v15;
    v279 = v14;
    if (*(_DWORD *)(v14 + 84))
      v18 = *(_QWORD *)(v14 + 64);
    else
      v18 = v17 + 1;
    v308 = ((v17 + v15 + ((v12 + v15 + ((v12 + v9 + ((v12 + v9 + (v281 & ~v9)) & ~v9)) & ~v9)) & ~v15)) & ~v15) + v18;
    v283 = v6;
    v274 = v11;
    if (v11 > v6)
      v6 = v11;
    v20 = sub_23BFF8368();
    v21 = *(_QWORD *)(v20 - 8);
    v22 = *(unsigned __int8 *)(v21 + 80);
    v261 = v21;
    v262 = v20;
    v23 = *(_QWORD *)(v21 + 64);
    v19 = v13 & ~v9;
    if (((v12 + v22 + v19) & ~v22) + v23 <= v6)
      v24 = v6;
    else
      v24 = ((v12 + v22 + v19) & ~v22) + v23;
    v265 = v18 + v15;
    v25 = a3[4];
    v26 = *(_QWORD *)(v25 - 8);
    v27 = *(unsigned __int8 *)(v26 + 80);
    if (*(_DWORD *)(v26 + 84))
      v28 = *(_QWORD *)(v26 + 64);
    else
      v28 = *(_QWORD *)(v26 + 64) + 1;
    v29 = ((v18
          + v27
          + ((v18 + v15 + ((v16 + ((v13 + ((v13 + ((v299 + ((v5 + 216) & ~v5)) & ~v9)) & ~v9)) & ~v9)) & ~v15)) & ~v15)) & ~v27)
        + v28;
    v30 = ((v16 + ((v13 + ((v9 + 64) & ~v9)) & ~v9)) & ~v15) + v18;
    v31 = (v10 & ~v9) + v12;
    v32 = ((v31 + v9) & ~v9) + v12;
    v270 = v9 + 24;
    v33 = ((v9 + 24 + (v31 & 0xFFFFFFFFFFFFFFF8)) & ~v9) + v12;
    v34 = ((v13 + ((v10 + ((v5 + 24) & ~v5)) & ~v9)) & ~v9) + v12;
    v35 = ((v13 + ((v13 + ((v10 + ((v5 + 104) & ~v5)) & ~v9)) & ~v9)) & ~v9) + v12;
    v300 = v18;
    v302 = v12 + v15;
    v295 = v15;
    v36 = (v16 + ((v13 + ((v13 + ((v13 + ((v10 + ((v5 + 160) & ~v5)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v15;
    v3 = v298;
    v37 = v36 + v18;
    v38 = ((v13 + ((v13 + ((v10 + ((v5 + 56) & ~v5)) & ~v9)) & ~v9)) & ~v9) + v12;
    v39 = ((v10 + ((v5 + 64) & ~v5)) & ~v9) + v12;
    v273 = v10;
    v40 = v10 + ((v5 + 128) & ~v5);
    v41 = *(_QWORD *)(v26 + 64);
    v42 = ((v13 + ((v13 + (v40 & ~v9)) & ~v9)) & ~v9) + v12;
    v43 = v308;
    v290 = v33;
    v291 = v30;
    if (v33 > v308)
      v43 = v33;
    v294 = v24 + 1;
    if (v43 <= v24 + 1)
      v43 = v24 + 1;
    v292 = v29;
    if (v43 <= v29)
      v43 = v29;
    if (v43 <= v30)
      v43 = v30;
    v288 = v34;
    v289 = ((v32 + v9) & ~v9) + v12;
    if (v43 <= v289)
      v43 = ((v32 + v9) & ~v9) + v12;
    if (v43 <= v34)
      v43 = v34;
    v286 = v37;
    v287 = v35;
    if (v43 <= v35)
      v43 = v35;
    if (v43 <= v37)
      v43 = v37;
    v285 = v39 + 1;
    if (v43 <= v38)
      v43 = v38;
    if (v43 <= v39 + 1)
      v44 = v39 + 1;
    else
      v44 = v43;
    v284 = v42;
    if (v44 <= v42)
      v44 = v42;
    v293 = v32;
    if (v44 <= v32)
      v44 = v32;
    if (v44 <= v41)
      v45 = *(_QWORD *)(v26 + 64);
    else
      v45 = v44;
    v267 = v24;
    v47 = ~v5;
    v48 = ~v9;
    v49 = ~v295;
    v259 = ~v22;
    v264 = ~v27;
    v309 = ~v9;
    v296 = v45;
    v268 = *(_QWORD *)(v25 - 8);
    v269 = v25;
    __n = v28;
    v266 = *(unsigned __int8 *)(v26 + 80);
    v271 = ~v5;
    v272 = v5;
    v260 = v22;
    switch(*(_BYTE *)(v298 + v45))
    {
      case 0:
        v276 = ~v295;
        v55 = (v298 + v5 + 248) & v47;
        (*(void (**)(uint64_t, uint64_t))(v303 + 8))(v55, v304);
        v56 = (v283 + v9 + v55 + 1) & v48;
        v57 = ~v9;
        v58 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v307 + 48);
        if (!v58(v56, 1, v305))
          (*(void (**)(uint64_t, uint64_t))(v307 + 8))(v56, v305);
        v59 = (v13 + v56) & v57;
        if (!v58(v59, 1, v305))
          (*(void (**)(uint64_t, uint64_t))(v307 + 8))(v59, v305);
        v60 = (v13 + v59) & v57;
        if (!v58(v60, 1, v305))
          (*(void (**)(size_t, uint64_t))(v307 + 8))(v60, v305);
        v49 = ~v295;
        v61 = (v302 + v60) & v276;
        v62 = *(void (**)(size_t, uint64_t))(v279 + 8);
        v62(v61, v280);
        v63 = (v297 + v61) & v276;
        if (!(*(unsigned int (**)(size_t, uint64_t, uint64_t))(v279 + 48))(v63, 1, v280))
          v62(v63, v280);
        goto LABEL_121;
      case 1:
        v64 = *(unsigned __int8 *)(v298 + v24);
        if (v64 >= 3)
        {
          if (v24 <= 3)
            v65 = v24;
          else
            v65 = 4;
          __asm { BR              X12 }
        }
        if (v64 == 2)
        {
          v251 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v307 + 48);
          if (!v251(v298, 1, v305))
            (*(void (**)(uint64_t, uint64_t))(v307 + 8))(v298, v305);
          v252 = (v13 + v298) & v309;
          if (!v251(v252, 1, v305))
            (*(void (**)(size_t, uint64_t))(v307 + 8))(v252, v305);
          (*(void (**)(size_t))(v261 + 8))((v252 + v12 + v260) & v259);
        }
        else if (v64 == 1)
        {
          (*(void (**)(uint64_t))(v307 + 8))(v298);
        }
        else
        {
          (*(void (**)(uint64_t))(v303 + 8))(v298);
        }
        goto LABEL_121;
      case 2:
        v277 = ~v295;
        v66 = (v298 + v5 + 216) & v47;
        (*(void (**)(uint64_t, uint64_t))(v303 + 8))(v66, v304);
        v67 = (v283 + v9 + v66 + 1) & v48;
        v68 = ~v9;
        v69 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v307 + 48);
        if (!v69(v67, 1, v305))
          (*(void (**)(uint64_t, uint64_t))(v307 + 8))(v67, v305);
        v70 = (v13 + v67) & v68;
        if (!v69(v70, 1, v305))
          (*(void (**)(uint64_t, uint64_t))(v307 + 8))(v70, v305);
        v71 = (v13 + v70) & v68;
        if (!v69(v71, 1, v305))
          (*(void (**)(size_t, uint64_t))(v307 + 8))(v71, v305);
        v49 = ~v295;
        v72 = (v302 + v71) & v277;
        v73 = *(unsigned int (**)(size_t, uint64_t, uint64_t))(v279 + 48);
        if (!v73(v72, 1, v280))
          (*(void (**)(size_t, uint64_t))(v279 + 8))(v72, v280);
        v74 = (v265 + v72) & v277;
        if (!v73(v74, 1, v280))
          (*(void (**)(size_t, uint64_t))(v279 + 8))(v74, v280);
        v52 = (v74 + v300 + v266) & v264;
        if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v268 + 48))(v52, 1, v269))
          goto LABEL_121;
        v75 = v268;
        goto LABEL_120;
      case 3:
        v278 = ~v295;
        v76 = (v298 + v9 + 64) & v48;
        v77 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v307 + 48);
        if (!v77(v76, 1, v305))
          (*(void (**)(uint64_t, uint64_t))(v307 + 8))(v76, v305);
        v78 = (v13 + v76) & ~v9;
        if (!v77(v78, 1, v305))
          (*(void (**)(uint64_t, uint64_t))(v307 + 8))(v78, v305);
        v79 = v78 + v12 + v295;
        goto LABEL_100;
      case 4:
        v275 = ~v295;
        (*(void (**)(uint64_t, uint64_t))(v303 + 8))(v298, v304);
        v80 = (v273 + v298) & v48;
        v81 = ~v9;
        v82 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v307 + 48);
        if (!v82(v80, 1, v305))
          (*(void (**)(uint64_t, uint64_t))(v307 + 8))(v80, v305);
        v83 = (((v273 + v298) | v9) + v12) & v81;
        if (!v82(v83, 1, v305))
          (*(void (**)(size_t, uint64_t))(v307 + 8))(v83, v305);
        v52 = (v13 + v83) & v81;
        v84 = v82(v52, 1, v305);
        goto LABEL_118;
      case 5:
      case 7:
        v275 = ~v295;
        (*(void (**)(uint64_t, uint64_t))(v303 + 8))(v298, v304);
        v50 = (v273 + v298) & v48;
        v51 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v307 + 48);
        if (!v51(v50, 1, v305))
          (*(void (**)(uint64_t, uint64_t))(v307 + 8))(v50, v305);
        v52 = (v270 + ((v12 + v50) & 0xFFFFFFFFFFFFFFF8)) & ~v9;
        v53 = v52;
        v54 = v305;
        goto LABEL_117;
      case 6:
        v275 = ~v295;
        v85 = (v298 + v5 + 24) & v47;
        (*(void (**)(uint64_t, uint64_t))(v303 + 8))(v85, v304);
        v86 = (v85 + v283 + v9) & v48;
        v87 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v307 + 48);
        if (!v87(v86, 1, v305))
          (*(void (**)(uint64_t, uint64_t))(v307 + 8))(v86, v305);
        v52 = (v13 + v86) & ~v9;
        v84 = v87(v52, 1, v305);
        goto LABEL_118;
      case 8:
        v275 = ~v295;
        v88 = v298 + v5 + 104;
        goto LABEL_108;
      case 9:
        v278 = ~v295;
        v89 = (v298 + v5 + 160) & v47;
        (*(void (**)(uint64_t, uint64_t))(v303 + 8))(v89, v304);
        v90 = (v89 + v283 + v9) & v48;
        v91 = ~v9;
        v92 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v307 + 48);
        if (!v92(v90, 1, v305))
          (*(void (**)(uint64_t, uint64_t))(v307 + 8))(v90, v305);
        v93 = (v13 + v90) & v91;
        if (!v92(v93, 1, v305))
          (*(void (**)(size_t, uint64_t))(v307 + 8))(v93, v305);
        v94 = (v13 + v93) & v91;
        if (!v92(v94, 1, v305))
          (*(void (**)(size_t, uint64_t))(v307 + 8))(v94, v305);
        v95 = (v13 + v94) & v91;
        if (!v92(v95, 1, v305))
          (*(void (**)(size_t, uint64_t))(v307 + 8))(v95, v305);
        v79 = v302 + v95;
LABEL_100:
        v49 = v278;
        v52 = v79 & v278;
        if ((*(unsigned int (**)(size_t, uint64_t, uint64_t))(v279 + 48))(v79 & v278, 1, v280))
          goto LABEL_121;
        v75 = v279;
        goto LABEL_120;
      case 0xA:
        v275 = ~v295;
        v88 = v298 + v5 + 56;
        goto LABEL_108;
      case 0xB:
        v96 = (v298 + v5 + 64) & v47;
        (*(void (**)(uint64_t, uint64_t))(v303 + 8))(v96, v304);
        v97 = (v96 + v283 + v9) & v48;
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v307 + 48))(v97, 1, v305))
          (*(void (**)(uint64_t, uint64_t))(v307 + 8))(v97, v305);
        v98 = v274;
        if (!v263)
          goto LABEL_121;
        goto LABEL_122;
      case 0xC:
        v275 = ~v295;
        v88 = v298 + v5 + 128;
LABEL_108:
        v99 = v88 & v47;
        (*(void (**)(uint64_t, uint64_t))(v303 + 8))(v88 & v47, v304);
        v100 = (v99 + v283 + v9) & v48;
        v101 = ~v9;
        v51 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v307 + 48);
        if (!v51(v100, 1, v305))
          (*(void (**)(uint64_t, uint64_t))(v307 + 8))(v100, v305);
        v102 = (v13 + v100) & v101;
        if (!v51(v102, 1, v305))
          (*(void (**)(size_t, uint64_t))(v307 + 8))(v102, v305);
        v52 = (v13 + v102) & v101;
        v53 = v52;
        v54 = v305;
        goto LABEL_117;
      case 0xD:
        (*(void (**)(uint64_t))(v26 + 8))(v298);
        goto LABEL_121;
      case 0xE:
        v275 = ~v295;
        (*(void (**)(uint64_t, uint64_t))(v303 + 8))(v298, v304);
        v103 = (v273 + v298) & v48;
        v51 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v307 + 48);
        if (!v51(v103, 1, v305))
          (*(void (**)(uint64_t, uint64_t))(v307 + 8))(v103, v305);
        v52 = (((v273 + v298) | v9) + v12) & ~v9;
        v53 = v52;
        v54 = v305;
LABEL_117:
        v84 = v51(v53, 1, v54);
LABEL_118:
        v49 = v275;
        if (!v84)
        {
          v75 = v307;
LABEL_120:
          (*(void (**)(unint64_t))(v75 + 8))(v52);
        }
LABEL_121:
        v98 = v12;
LABEL_122:
        v104 = ((v297 + ((v302 + ((v13 + (((v281 | v9) + v98) & v309)) & v309)) & v49)) & v49) + v300;
        if (v294 > v104)
          v104 = v294;
        if (v292 > v104)
          v104 = v292;
        if (v291 > v104)
          v104 = v291;
        if (v289 > v104)
          v104 = v289;
        if (v290 > v104)
          v104 = v290;
        if (v288 > v104)
          v104 = v288;
        if (v290 > v104)
          v104 = v290;
        if (v287 > v104)
          v104 = v287;
        if (v286 > v104)
          v104 = v286;
        if (v38 > v104)
          v104 = v38;
        if (v285 > v104)
          v104 = v285;
        if (v284 > v104)
          v104 = v284;
        if (v41 > v104)
          v104 = v41;
        if (v293 > v104)
          v104 = v293;
        switch(*(_BYTE *)(a2 + v104))
        {
          case 0:
            v106 = *(_OWORD *)(a2 + 208);
            *(_OWORD *)(v298 + 192) = *(_OWORD *)(a2 + 192);
            *(_OWORD *)(v298 + 208) = v106;
            *(_OWORD *)(v298 + 224) = *(_OWORD *)(a2 + 224);
            *(_QWORD *)(v298 + 240) = *(_QWORD *)(a2 + 240);
            v107 = *(_OWORD *)(a2 + 144);
            *(_OWORD *)(v298 + 128) = *(_OWORD *)(a2 + 128);
            *(_OWORD *)(v298 + 144) = v107;
            v108 = *(_OWORD *)(a2 + 176);
            *(_OWORD *)(v298 + 160) = *(_OWORD *)(a2 + 160);
            *(_OWORD *)(v298 + 176) = v108;
            v109 = *(_OWORD *)(a2 + 80);
            *(_OWORD *)(v298 + 64) = *(_OWORD *)(a2 + 64);
            *(_OWORD *)(v298 + 80) = v109;
            v110 = *(_OWORD *)(a2 + 112);
            *(_OWORD *)(v298 + 96) = *(_OWORD *)(a2 + 96);
            *(_OWORD *)(v298 + 112) = v110;
            v111 = *(_OWORD *)(a2 + 16);
            *(_OWORD *)v298 = *(_OWORD *)a2;
            *(_OWORD *)(v298 + 16) = v111;
            v112 = *(_OWORD *)(a2 + 48);
            *(_OWORD *)(v298 + 32) = *(_OWORD *)(a2 + 32);
            *(_OWORD *)(v298 + 48) = v112;
            v113 = (v298 + v272 + 248) & v271;
            v114 = (a2 + v272 + 248) & v271;
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v303 + 32))(v113, v114, v304);
            *(_BYTE *)(v113 + v283) = *(_BYTE *)(v114 + v283);
            v115 = (void *)((v113 + v283 + v9 + 1) & v309);
            v116 = (const void *)((v114 + v283 + v9 + 1) & v309);
            v117 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v307 + 48);
            if (v117(v116, 1, v305))
            {
              memcpy(v115, v116, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v307 + 32))(v115, v116, v305);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v307 + 56))(v115, 0, 1, v305);
            }
            v185 = (void *)(((unint64_t)v115 + v13) & v309);
            v186 = (const void *)(((unint64_t)v116 + v13) & v309);
            if (v117(v186, 1, v305))
            {
              memcpy(v185, v186, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v307 + 32))(v185, v186, v305);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v307 + 56))(v185, 0, 1, v305);
            }
            v215 = (void *)(((unint64_t)v185 + v13) & v309);
            v216 = (const void *)(((unint64_t)v186 + v13) & v309);
            if (v117(v216, 1, v305))
            {
              memcpy(v215, v216, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v307 + 32))(v215, v216, v305);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v307 + 56))(v215, 0, 1, v305);
            }
            v234 = ((unint64_t)v215 + v302) & v49;
            v235 = ((unint64_t)v216 + v302) & v49;
            v236 = *(void (**)(unint64_t, unint64_t, uint64_t))(v279 + 32);
            v236(v234, v235, v280);
            v237 = (void *)((v297 + v234) & v49);
            v238 = (const void *)((v297 + v235) & v49);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v279 + 48))(v238, 1, v280))
            {
              memcpy(v237, v238, v300);
            }
            else
            {
              v236((unint64_t)v237, (unint64_t)v238, v280);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v279 + 56))(v237, 0, 1, v280);
            }
            v3 = v298;
            *(_BYTE *)(v298 + v296) = 0;
            return v3;
          case 1:
            v118 = v267;
            v119 = *(unsigned __int8 *)(a2 + v267);
            if (v119 >= 3)
            {
              if (v267 <= 3)
                v120 = v267;
              else
                v120 = 4;
              __asm { BR              X12 }
            }
            if (v119 == 2)
            {
              v254 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v307 + 48);
              if (v254(a2, 1, v305))
              {
                memcpy((void *)v298, (const void *)a2, v12);
              }
              else
              {
                (*(void (**)(uint64_t, uint64_t, uint64_t))(v307 + 32))(v298, a2, v305);
                (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v307 + 56))(v298, 0, 1, v305);
              }
              v255 = (void *)((v13 + v298) & v309);
              v256 = (const void *)((v13 + a2) & v309);
              if (v254((uint64_t)v256, 1, v305))
              {
                memcpy(v255, v256, v12);
              }
              else
              {
                (*(void (**)(void *, const void *, uint64_t))(v307 + 32))(v255, v256, v305);
                (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v307 + 56))(v255, 0, 1, v305);
              }
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v261 + 32))(((unint64_t)v255 + v12 + v260) & v259, ((unint64_t)v256 + v12 + v260) & v259, v262);
              v253 = 2;
              v118 = v267;
            }
            else if (v119 == 1)
            {
              (*(void (**)(uint64_t, uint64_t, uint64_t))(v307 + 32))(v298, a2, v305);
              v253 = 1;
            }
            else
            {
              (*(void (**)(uint64_t, uint64_t, uint64_t))(v303 + 32))(v298, a2, v304);
              v253 = 0;
            }
            *(_BYTE *)(v298 + v118) = v253;
            v181 = 1;
            goto LABEL_343;
          case 2:
            v121 = *(_OWORD *)(a2 + 176);
            *(_OWORD *)(v298 + 160) = *(_OWORD *)(a2 + 160);
            *(_OWORD *)(v298 + 176) = v121;
            *(_OWORD *)(v298 + 192) = *(_OWORD *)(a2 + 192);
            *(_QWORD *)(v298 + 208) = *(_QWORD *)(a2 + 208);
            v122 = *(_OWORD *)(a2 + 112);
            *(_OWORD *)(v298 + 96) = *(_OWORD *)(a2 + 96);
            *(_OWORD *)(v298 + 112) = v122;
            v123 = *(_OWORD *)(a2 + 144);
            *(_OWORD *)(v298 + 128) = *(_OWORD *)(a2 + 128);
            *(_OWORD *)(v298 + 144) = v123;
            v124 = *(_OWORD *)(a2 + 48);
            *(_OWORD *)(v298 + 32) = *(_OWORD *)(a2 + 32);
            *(_OWORD *)(v298 + 48) = v124;
            v125 = *(_OWORD *)(a2 + 80);
            *(_OWORD *)(v298 + 64) = *(_OWORD *)(a2 + 64);
            *(_OWORD *)(v298 + 80) = v125;
            v126 = *(_OWORD *)(a2 + 16);
            *(_OWORD *)v298 = *(_OWORD *)a2;
            *(_OWORD *)(v298 + 16) = v126;
            v127 = (v298 + v272 + 216) & v271;
            v128 = (a2 + v272 + 216) & v271;
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v303 + 32))(v127, v128, v304);
            *(_BYTE *)(v127 + v283) = *(_BYTE *)(v128 + v283);
            v129 = (void *)((v127 + v283 + v9 + 1) & v309);
            v130 = (const void *)((v128 + v283 + v9 + 1) & v309);
            v131 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v307 + 48);
            if (v131(v130, 1, v305))
            {
              memcpy(v129, v130, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v307 + 32))(v129, v130, v305);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v307 + 56))(v129, 0, 1, v305);
            }
            v187 = (void *)(((unint64_t)v129 + v13) & v309);
            v188 = (const void *)(((unint64_t)v130 + v13) & v309);
            if (v131(v188, 1, v305))
            {
              memcpy(v187, v188, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v307 + 32))(v187, v188, v305);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v307 + 56))(v187, 0, 1, v305);
            }
            v217 = (void *)(((unint64_t)v187 + v13) & v309);
            v218 = (const void *)(((unint64_t)v188 + v13) & v309);
            if (v131(v218, 1, v305))
            {
              memcpy(v217, v218, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v307 + 32))(v217, v218, v305);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v307 + 56))(v217, 0, 1, v305);
            }
            v239 = (void *)(((unint64_t)v217 + v302) & v49);
            v240 = (const void *)(((unint64_t)v218 + v302) & v49);
            v241 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v279 + 48);
            if (v241(v240, 1, v280))
            {
              memcpy(v239, v240, v300);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v279 + 32))(v239, v240, v280);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v279 + 56))(v239, 0, 1, v280);
            }
            v3 = v298;
            v244 = (void *)(((unint64_t)v239 + v265) & v49);
            v245 = (const void *)(((unint64_t)v240 + v265) & v49);
            if (v241(v245, 1, v280))
            {
              v246 = v300;
              memcpy(v244, v245, v300);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v279 + 32))(v244, v245, v280);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v279 + 56))(v244, 0, 1, v280);
              v246 = v300;
            }
            v249 = (void *)(((unint64_t)v244 + v246 + v266) & v264);
            v250 = (const void *)(((unint64_t)v245 + v246 + v266) & v264);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v268 + 48))(v250, 1, v269))
            {
              memcpy(v249, v250, __n);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v268 + 32))(v249, v250, v269);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v268 + 56))(v249, 0, 1, v269);
            }
            *(_BYTE *)(v298 + v296) = 2;
            return v3;
          case 3:
            v132 = *(_OWORD *)(a2 + 16);
            *(_OWORD *)v298 = *(_OWORD *)a2;
            *(_OWORD *)(v298 + 16) = v132;
            v133 = *(_OWORD *)(a2 + 48);
            *(_OWORD *)(v298 + 32) = *(_OWORD *)(a2 + 32);
            *(_OWORD *)(v298 + 48) = v133;
            v134 = (void *)((v298 + v9 + 64) & v309);
            v135 = (const void *)((a2 + v9 + 64) & v309);
            v136 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v307 + 48);
            if (v136(v135, 1, v305))
            {
              memcpy(v134, v135, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v307 + 32))(v134, v135, v305);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v307 + 56))(v134, 0, 1, v305);
            }
            v189 = (void *)(((unint64_t)v134 + v13) & v309);
            v190 = (char *)(((unint64_t)v135 + v13) & v309);
            if (v136(v190, 1, v305))
            {
              memcpy(v189, v190, v12);
            }
            else
            {
              (*(void (**)(void *, char *, uint64_t))(v307 + 32))(v189, v190, v305);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v307 + 56))(v189, 0, 1, v305);
            }
            v219 = &v190[v12];
            v220 = (void *)(((unint64_t)v189 + v12 + v295) & v49);
            v221 = (const void *)((unint64_t)&v219[v295] & v49);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v279 + 48))(v221, 1, v280))
            {
              memcpy(v220, v221, v300);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v279 + 32))(v220, v221, v280);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v279 + 56))(v220, 0, 1, v280);
            }
            v3 = v298;
            *(_BYTE *)(v298 + v296) = 3;
            return v3;
          case 4:
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v303 + 32))(v298, a2, v304);
            v137 = v305;
            v138 = (void *)((v273 + v298) & v309);
            v139 = (const void *)((v273 + a2) & v309);
            v306 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v307 + 48);
            if (v306(v139, 1, v137))
            {
              memcpy(v138, v139, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v307 + 32))(v138, v139, v137);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v307 + 56))(v138, 0, 1, v137);
            }
            v191 = ~v9;
            v192 = (void *)((((v273 + v298) | v9) + v12) & v309);
            v193 = (const void *)((((v273 + a2) | v9) + v12) & v309);
            if (v306(v193, 1, v137))
            {
              memcpy(v192, v193, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v307 + 32))(v192, v193, v137);
              v191 = ~v9;
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v307 + 56))(v192, 0, 1, v137);
            }
            v222 = v296;
            v223 = (void *)(((unint64_t)v192 + v13) & v191);
            v224 = (const void *)(((unint64_t)v193 + v13) & v191);
            if (v306(v224, 1, v137))
            {
              memcpy(v223, v224, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v307 + 32))(v223, v224, v137);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v307 + 56))(v223, 0, 1, v137);
            }
            v233 = 4;
            goto LABEL_297;
          case 5:
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v303 + 32))(v298, a2, v304);
            v140 = (void *)((v273 + v298) & v309);
            v141 = (const void *)((v273 + a2) & v309);
            v142 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v307 + 48);
            if (v142(v141, 1, v305))
            {
              memcpy(v140, v141, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v307 + 32))(v140, v141, v305);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v307 + 56))(v140, 0, 1, v305);
            }
            *((_BYTE *)v140 + v12) = *((_BYTE *)v141 + v12);
            v194 = ((unint64_t)v140 + v12) & 0xFFFFFFFFFFFFFFF8;
            v195 = ((unint64_t)v141 + v12) & 0xFFFFFFFFFFFFFFF8;
            *(_OWORD *)(v194 + 8) = *(_OWORD *)(v195 + 8);
            v196 = (void *)((v270 + v194) & v309);
            v197 = (const void *)((v270 + v195) & v309);
            if (v142(v197, 1, v305))
            {
              memcpy(v196, v197, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v307 + 32))(v196, v197, v305);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v307 + 56))(v196, 0, 1, v305);
            }
            v181 = 5;
            goto LABEL_343;
          case 6:
            *(_OWORD *)v298 = *(_OWORD *)a2;
            *(_QWORD *)(v298 + 16) = *(_QWORD *)(a2 + 16);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v303 + 32))((v298 + v272 + 24) & v271, (a2 + v272 + 24) & v271, v304);
            v143 = (void *)((((v298 + v272 + 24) & v271) + v283 + v9) & v309);
            v144 = (const void *)((((a2 + v272 + 24) & v271) + v283 + v9) & v309);
            v145 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v307 + 48);
            if (v145(v144, 1, v305))
            {
              memcpy(v143, v144, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v307 + 32))(v143, v144, v305);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v307 + 56))(v143, 0, 1, v305);
            }
            v198 = (void *)(((unint64_t)v143 + v13) & v309);
            v199 = (const void *)(((unint64_t)v144 + v13) & v309);
            if (v145(v199, 1, v305))
            {
              memcpy(v198, v199, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v307 + 32))(v198, v199, v305);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v307 + 56))(v198, 0, 1, v305);
            }
            v181 = 6;
            goto LABEL_343;
          case 7:
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v303 + 32))(v298, a2, v304);
            v146 = (void *)((v273 + v298) & v309);
            v147 = (const void *)((v273 + a2) & v309);
            v148 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v307 + 48);
            if (v148(v147, 1, v305))
            {
              memcpy(v146, v147, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v307 + 32))(v146, v147, v305);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v307 + 56))(v146, 0, 1, v305);
            }
            *((_BYTE *)v146 + v12) = *((_BYTE *)v147 + v12);
            v200 = ((unint64_t)v146 + v12) & 0xFFFFFFFFFFFFFFF8;
            v201 = ((unint64_t)v147 + v12) & 0xFFFFFFFFFFFFFFF8;
            *(_OWORD *)(v200 + 8) = *(_OWORD *)(v201 + 8);
            v202 = (void *)((v270 + v200) & v309);
            v203 = (const void *)((v270 + v201) & v309);
            if (v148(v203, 1, v305))
            {
              memcpy(v202, v203, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v307 + 32))(v202, v203, v305);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v307 + 56))(v202, 0, 1, v305);
            }
            v181 = 7;
            goto LABEL_343;
          case 8:
            v149 = *(_OWORD *)(a2 + 80);
            *(_OWORD *)(v298 + 64) = *(_OWORD *)(a2 + 64);
            *(_OWORD *)(v298 + 80) = v149;
            *(_QWORD *)(v298 + 96) = *(_QWORD *)(a2 + 96);
            v150 = *(_OWORD *)(a2 + 16);
            *(_OWORD *)v298 = *(_OWORD *)a2;
            *(_OWORD *)(v298 + 16) = v150;
            v151 = *(_OWORD *)(a2 + 48);
            *(_OWORD *)(v298 + 32) = *(_OWORD *)(a2 + 32);
            *(_OWORD *)(v298 + 48) = v151;
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v303 + 32))((v298 + v272 + 104) & v271, (a2 + v272 + 104) & v271, v304);
            v152 = (void *)((((v298 + v272 + 104) & v271) + v283 + v9) & v309);
            v153 = (const void *)((((a2 + v272 + 104) & v271) + v283 + v9) & v309);
            v154 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v307 + 48);
            if (v154(v153, 1, v305))
            {
              memcpy(v152, v153, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v307 + 32))(v152, v153, v305);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v307 + 56))(v152, 0, 1, v305);
            }
            v204 = (void *)(((unint64_t)v152 + v13) & v309);
            v205 = (const void *)(((unint64_t)v153 + v13) & v309);
            if (v154(v205, 1, v305))
            {
              memcpy(v204, v205, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v307 + 32))(v204, v205, v305);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v307 + 56))(v204, 0, 1, v305);
            }
            v225 = (void *)(((unint64_t)v204 + v13) & v309);
            v226 = (const void *)(((unint64_t)v205 + v13) & v309);
            if (v154(v226, 1, v305))
            {
              memcpy(v225, v226, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v307 + 32))(v225, v226, v305);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v307 + 56))(v225, 0, 1, v305);
            }
            v181 = 8;
            goto LABEL_343;
          case 9:
            v155 = *(_OWORD *)(a2 + 112);
            *(_OWORD *)(v298 + 96) = *(_OWORD *)(a2 + 96);
            *(_OWORD *)(v298 + 112) = v155;
            v156 = *(_OWORD *)(a2 + 144);
            *(_OWORD *)(v298 + 128) = *(_OWORD *)(a2 + 128);
            *(_OWORD *)(v298 + 144) = v156;
            v157 = *(_OWORD *)(a2 + 48);
            *(_OWORD *)(v298 + 32) = *(_OWORD *)(a2 + 32);
            *(_OWORD *)(v298 + 48) = v157;
            v158 = *(_OWORD *)(a2 + 80);
            *(_OWORD *)(v298 + 64) = *(_OWORD *)(a2 + 64);
            *(_OWORD *)(v298 + 80) = v158;
            v159 = *(_OWORD *)(a2 + 16);
            *(_OWORD *)v298 = *(_OWORD *)a2;
            *(_OWORD *)(v298 + 16) = v159;
            v160 = (v298 + v272 + 160) & v271;
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v303 + 32))(v160, (a2 + v272 + 160) & v271, v304);
            v161 = (void *)((v160 + v283 + v9) & v309);
            v162 = (const void *)((((a2 + v272 + 160) & v271) + v283 + v9) & v309);
            v163 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v307 + 48);
            if (v163(v162, 1, v305))
            {
              memcpy(v161, v162, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v307 + 32))(v161, v162, v305);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v307 + 56))(v161, 0, 1, v305);
            }
            v206 = (void *)(((unint64_t)v161 + v13) & v309);
            v207 = (const void *)(((unint64_t)v162 + v13) & v309);
            if (v163(v207, 1, v305))
            {
              memcpy(v206, v207, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v307 + 32))(v206, v207, v305);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v307 + 56))(v206, 0, 1, v305);
            }
            v227 = (void *)(((unint64_t)v206 + v13) & v309);
            v228 = (const void *)(((unint64_t)v207 + v13) & v309);
            if (v163(v228, 1, v305))
            {
              memcpy(v227, v228, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v307 + 32))(v227, v228, v305);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v307 + 56))(v227, 0, 1, v305);
            }
            v242 = (void *)(((unint64_t)v227 + v13) & v309);
            v243 = (const void *)(((unint64_t)v228 + v13) & v309);
            if (v163(v243, 1, v305))
            {
              memcpy(v242, v243, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v307 + 32))(v242, v243, v305);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v307 + 56))(v242, 0, 1, v305);
            }
            v247 = (void *)(((unint64_t)v242 + v302) & v49);
            v248 = (const void *)(((unint64_t)v243 + v302) & v49);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v279 + 48))(v248, 1, v280))
            {
              memcpy(v247, v248, v300);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v279 + 32))(v247, v248, v280);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v279 + 56))(v247, 0, 1, v280);
            }
            v3 = v298;
            *(_BYTE *)(v298 + v296) = 9;
            return v3;
          case 0xA:
            v164 = *(_OWORD *)(a2 + 16);
            *(_OWORD *)v298 = *(_OWORD *)a2;
            *(_OWORD *)(v298 + 16) = v164;
            *(_OWORD *)(v298 + 32) = *(_OWORD *)(a2 + 32);
            *(_QWORD *)(v298 + 48) = *(_QWORD *)(a2 + 48);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v303 + 32))((v298 + v272 + 56) & v271, (a2 + v272 + 56) & v271, v304);
            v165 = (void *)((((v298 + v272 + 56) & v271) + v283 + v9) & v309);
            v166 = (const void *)((((a2 + v272 + 56) & v271) + v283 + v9) & v309);
            v167 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v307 + 48);
            if (v167(v166, 1, v305))
            {
              memcpy(v165, v166, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v307 + 32))(v165, v166, v305);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v307 + 56))(v165, 0, 1, v305);
            }
            v208 = (void *)(((unint64_t)v165 + v13) & v309);
            v209 = (const void *)(((unint64_t)v166 + v13) & v309);
            if (v167(v209, 1, v305))
            {
              memcpy(v208, v209, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v307 + 32))(v208, v209, v305);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v307 + 56))(v208, 0, 1, v305);
            }
            v229 = (void *)(((unint64_t)v208 + v13) & v309);
            v230 = (const void *)(((unint64_t)v209 + v13) & v309);
            if (v167(v230, 1, v305))
            {
              memcpy(v229, v230, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v307 + 32))(v229, v230, v305);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v307 + 56))(v229, 0, 1, v305);
            }
            v181 = 10;
            goto LABEL_343;
          case 0xB:
            v168 = v49;
            v169 = *(_OWORD *)(a2 + 16);
            *(_OWORD *)v298 = *(_OWORD *)a2;
            *(_OWORD *)(v298 + 16) = v169;
            v170 = *(_OWORD *)(a2 + 48);
            *(_OWORD *)(v298 + 32) = *(_OWORD *)(a2 + 32);
            *(_OWORD *)(v298 + 48) = v170;
            v171 = (v298 + v272 + 64) & v271;
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v303 + 32))(v171, (a2 + v272 + 64) & v271, v304);
            v172 = (void *)((v171 + v283 + v9) & v309);
            v173 = (const void *)((((a2 + v272 + 64) & v271) + v283 + v9) & v309);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v307 + 48))(v173, 1, v305))
            {
              memcpy(v172, v173, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v307 + 32))(v172, v173, v305);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v307 + 56))(v172, 0, 1, v305);
            }
            *((_BYTE *)v172 + v12) = *((_BYTE *)v173 + v12);
            v210 = ((v297 + ((v302 + ((v13 + (((v281 | v9) + v12) & v309)) & v309)) & v168)) & v168) + v300;
            if (v294 > v210)
              v210 = v294;
            if (v292 > v210)
              v210 = v292;
            if (v291 > v210)
              v210 = v291;
            if (v289 > v210)
              v210 = v289;
            if (v290 > v210)
              v210 = v290;
            if (v288 > v210)
              v210 = v288;
            if (v290 > v210)
              v210 = v290;
            if (v287 > v210)
              v210 = v287;
            if (v286 > v210)
              v210 = v286;
            if (v38 > v210)
              v210 = v38;
            if (v285 > v210)
              v210 = v285;
            if (v284 > v210)
              v210 = v284;
            if (v41 > v210)
              v210 = v41;
            if (v293 > v210)
              v210 = v293;
            v3 = v298;
            *(_BYTE *)(v298 + v210) = 11;
            return v3;
          case 0xC:
            v174 = *(_OWORD *)(a2 + 80);
            *(_OWORD *)(v298 + 64) = *(_OWORD *)(a2 + 64);
            *(_OWORD *)(v298 + 80) = v174;
            v175 = *(_OWORD *)(a2 + 112);
            *(_OWORD *)(v298 + 96) = *(_OWORD *)(a2 + 96);
            *(_OWORD *)(v298 + 112) = v175;
            v176 = *(_OWORD *)(a2 + 16);
            *(_OWORD *)v298 = *(_OWORD *)a2;
            *(_OWORD *)(v298 + 16) = v176;
            v177 = *(_OWORD *)(a2 + 48);
            *(_OWORD *)(v298 + 32) = *(_OWORD *)(a2 + 32);
            *(_OWORD *)(v298 + 48) = v177;
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v303 + 32))((v298 + v272 + 128) & v271, (a2 + v272 + 128) & v271, v304);
            v178 = (void *)((((v298 + v272 + 128) & v271) + v283 + v9) & v309);
            v179 = (const void *)((((a2 + v272 + 128) & v271) + v283 + v9) & v309);
            v180 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v307 + 48);
            if (v180(v179, 1, v305))
            {
              memcpy(v178, v179, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v307 + 32))(v178, v179, v305);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v307 + 56))(v178, 0, 1, v305);
            }
            v211 = (void *)(((unint64_t)v178 + v13) & v309);
            v212 = (const void *)(((unint64_t)v179 + v13) & v309);
            if (v180(v212, 1, v305))
            {
              memcpy(v211, v212, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v307 + 32))(v211, v212, v305);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v307 + 56))(v211, 0, 1, v305);
            }
            v231 = (void *)(((unint64_t)v211 + v13) & v309);
            v232 = (const void *)(((unint64_t)v212 + v13) & v309);
            if (v180(v232, 1, v305))
            {
              memcpy(v231, v232, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v307 + 32))(v231, v232, v305);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v307 + 56))(v231, 0, 1, v305);
            }
            v181 = 12;
            goto LABEL_343;
          case 0xD:
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v268 + 32))(v298, a2, v269);
            v181 = 13;
LABEL_343:
            *(_BYTE *)(v298 + v296) = v181;
            break;
          case 0xE:
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v303 + 32))(v298, a2, v304);
            v182 = (void *)((v273 + v298) & v309);
            v183 = (const void *)((v273 + a2) & v309);
            v184 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v307 + 48);
            if (v184(v183, 1, v305))
            {
              memcpy(v182, v183, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v307 + 32))(v182, v183, v305);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v307 + 56))(v182, 0, 1, v305);
            }
            v213 = (void *)((((v273 + v298) | v9) + v12) & v309);
            v214 = (const void *)((((v273 + a2) | v9) + v12) & v309);
            if (v184(v214, 1, v305))
            {
              memcpy(v213, v214, v12);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v307 + 32))(v213, v214, v305);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v307 + 56))(v213, 0, 1, v305);
            }
            v222 = v296;
            v233 = 14;
LABEL_297:
            *(_BYTE *)(v298 + v222) = v233;
            break;
          default:
            if (v296 <= 3)
              v105 = v296;
            else
              v105 = 4;
            __asm { BR              X12 }
            return result;
        }
        return result;
      default:
        if (v45 <= 3)
          v46 = v45;
        else
          v46 = 4;
        __asm { BR              X12 }
        return result;
    }
  }
  return v3;
}

uint64_t sub_23BEFDB80(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char v45;
  int v46;
  unsigned int v48;
  int v49;
  unsigned int v50;
  uint64_t v52;
  uint64_t v53;

  v4 = *(_QWORD *)(a3[3] - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(sub_23BFF82CC() - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = v6 + v8;
  v10 = v6 + v8 + 1;
  v53 = (v10 + ((v5 + 248) & ~v5)) & ~v8;
  v11 = *(_DWORD *)(v7 + 84);
  v12 = *(_QWORD *)(v7 + 64);
  v13 = *(_QWORD *)(a3[2] - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v52 = *(_QWORD *)(v13 + 64);
  v15 = *(_DWORD *)(v13 + 84);
  if (v12 > v6)
    v6 = v12;
  v16 = sub_23BFF8368();
  if (v11)
    v17 = v12;
  else
    v17 = v12 + 1;
  v18 = *(_QWORD *)(v16 - 8);
  v19 = *(unsigned __int8 *)(v18 + 80);
  v20 = *(_QWORD *)(v18 + 64);
  v21 = *(_QWORD *)(a3[4] - 8);
  v22 = *(unsigned __int8 *)(v21 + 80);
  v23 = *(_DWORD *)(v21 + 84);
  v24 = *(_QWORD *)(v21 + 64);
  v25 = v17 + v8;
  v26 = v17 + v14;
  if (v15)
    v27 = v52;
  else
    v27 = v52 + 1;
  v28 = (((v25 & ~v8) + v17 + v19) & ~v19) + v20;
  if (v28 <= v6)
    v28 = v6;
  if (v28 + 1 > ((v52 + v14 + ((v17 + v14 + ((v17 + v8 + ((v17 + v8 + v53) & ~v8)) & ~v8)) & ~v14)) & ~v14) + v27)
    v29 = v28 + 1;
  else
    v29 = ((v52 + v14 + ((v17 + v14 + ((v17 + v8 + ((v17 + v8 + v53) & ~v8)) & ~v8)) & ~v14)) & ~v14) + v27;
  v30 = v9 & ~v8;
  v32 = (v9 + ((v5 + 64) & ~v5)) & ~v8;
  v33 = (((v27 + v14 + ((v26 + ((v25 + ((v25 + ((v10 + ((v5 + 216) & ~v5)) & ~v8)) & ~v8)) & ~v8)) & ~v14)) & ~v14)
       + v27
       + v22) & ~v22;
  if (v23)
    v34 = v24;
  else
    v34 = v24 + 1;
  v35 = v34 + v33;
  if (v35 <= v29)
    v35 = v29;
  v36 = ((v26 + ((v25 + ((v8 + 64) & ~v8)) & ~v8)) & ~v14) + v27;
  if (v36 <= v35)
    v36 = v35;
  v37 = ((v30 + v17 + v8) & ~v8) + v17;
  if (((v37 + v8) & ~v8) + v17 > v36)
    v36 = ((v37 + v8) & ~v8) + v17;
  v38 = ((v8 + ((v30 + v17) & 0xFFFFFFFFFFFFFFF8) + 24) & ~v8) + v17;
  if (v38 > v36)
    v36 = ((v8 + ((v30 + v17) & 0xFFFFFFFFFFFFFFF8) + 24) & ~v8) + v17;
  v39 = ((v25 + ((v9 + ((v5 + 24) & ~v5)) & ~v8)) & ~v8) + v17;
  if (v39 <= v36)
    v39 = v36;
  if (v38 > v39)
    v39 = ((v8 + ((v30 + v17) & 0xFFFFFFFFFFFFFFF8) + 24) & ~v8) + v17;
  v40 = ((v25 + ((v25 + ((v9 + ((v5 + 104) & ~v5)) & ~v8)) & ~v8)) & ~v8) + v17;
  if (v40 <= v39)
    v40 = v39;
  v41 = ((v26 + ((v25 + ((v25 + ((v25 + ((v9 + ((v5 + 160) & ~v5)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v14) + v27;
  if (v41 <= v40)
    v41 = v40;
  v31 = (v9 + ((v5 + 56) & ~v5)) & ~v8;
  if (((v25 + ((v25 + v31) & ~v8)) & ~v8) + v17 > v41)
    v41 = ((v25 + ((v25 + v31) & ~v8)) & ~v8) + v17;
  if (v32 + v17 + 1 > v41)
    v41 = v32 + v17 + 1;
  v42 = ((v25 + ((v25 + ((v9 + ((v5 + 128) & ~v5)) & ~v8)) & ~v8)) & ~v8) + v17;
  if (v42 <= v41)
    v42 = v41;
  if (v24 > v42)
    v42 = v24;
  if (v37 <= v42)
    v43 = v42;
  else
    v43 = v37;
  if (!a2)
    return 0;
  if (a2 < 0xF2)
    goto LABEL_62;
  v44 = v43 + 1;
  v45 = 8 * (v43 + 1);
  if ((v43 + 1) <= 3)
  {
    v48 = ((a2 + ~(-1 << v45) - 241) >> v45) + 1;
    if (HIWORD(v48))
    {
      v46 = *(_DWORD *)(a1 + v44);
      if (!v46)
        goto LABEL_62;
      goto LABEL_55;
    }
    if (v48 > 0xFF)
    {
      v46 = *(unsigned __int16 *)(a1 + v44);
      if (!*(_WORD *)(a1 + v44))
        goto LABEL_62;
      goto LABEL_55;
    }
    if (v48 < 2)
    {
LABEL_62:
      v50 = *(unsigned __int8 *)(a1 + v43);
      if (v50 >= 0xF)
        return (v50 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v46 = *(unsigned __int8 *)(a1 + v44);
  if (!*(_BYTE *)(a1 + v44))
    goto LABEL_62;
LABEL_55:
  v49 = (v46 - 1) << v45;
  if (v44 > 3)
    v49 = 0;
  if ((_DWORD)v44)
  {
    if (v44 > 3)
      LODWORD(v44) = 4;
    __asm { BR              X11 }
  }
  return (v49 + 242);
}

void sub_23BEFDF98(_BYTE *a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  size_t v44;
  _BYTE *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;

  v5 = *(_QWORD *)(a4[3] - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(_QWORD *)(sub_23BFF82CC() - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = v7 + v9 + 1;
  v52 = (v11 + ((v6 + 248) & ~v6)) & ~v9;
  v12 = *(_DWORD *)(v8 + 84);
  v13 = *(_QWORD *)(v8 + 64);
  v14 = *(_QWORD *)(a4[2] - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v51 = *(_QWORD *)(v14 + 64);
  v16 = *(_DWORD *)(v14 + 84);
  if (v13 > v7)
    v7 = v13;
  v17 = sub_23BFF8368();
  if (v12)
    v18 = v13;
  else
    v18 = v13 + 1;
  v19 = *(_QWORD *)(v17 - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  v21 = *(_QWORD *)(v19 + 64);
  v22 = *(_QWORD *)(a4[4] - 8);
  v23 = *(unsigned __int8 *)(v22 + 80);
  v24 = *(_DWORD *)(v22 + 84);
  v25 = *(_QWORD *)(v22 + 64);
  v26 = v18 + v9;
  v27 = v18 + v15;
  if (v16)
    v28 = v51;
  else
    v28 = v51 + 1;
  v29 = (((v26 & ~v9) + v18 + v20) & ~v20) + v21;
  if (v29 <= v7)
    v29 = v7;
  if (v29 + 1 > ((v51 + v15 + ((v18 + v15 + ((v18 + v9 + ((v18 + v9 + v52) & ~v9)) & ~v9)) & ~v15)) & ~v15) + v28)
    v30 = v29 + 1;
  else
    v30 = ((v51 + v15 + ((v18 + v15 + ((v18 + v9 + ((v18 + v9 + v52) & ~v9)) & ~v9)) & ~v15)) & ~v15) + v28;
  v31 = v10 & ~v9;
  v33 = (v10 + ((v6 + 64) & ~v6)) & ~v9;
  v34 = (((v28 + v15 + ((v27 + ((v26 + ((v26 + ((v11 + ((v6 + 216) & ~v6)) & ~v9)) & ~v9)) & ~v9)) & ~v15)) & ~v15)
       + v28
       + v23) & ~v23;
  if (v24)
    v35 = v25;
  else
    v35 = v25 + 1;
  v36 = v35 + v34;
  if (v36 <= v30)
    v36 = v30;
  v37 = ((v27 + ((v26 + ((v9 + 64) & ~v9)) & ~v9)) & ~v15) + v28;
  if (v37 <= v36)
    v37 = v36;
  v38 = ((v31 + v18 + v9) & ~v9) + v18;
  if (((v38 + v9) & ~v9) + v18 > v37)
    v37 = ((v38 + v9) & ~v9) + v18;
  v39 = ((v9 + ((v31 + v18) & 0xFFFFFFFFFFFFFFF8) + 24) & ~v9) + v18;
  if (v39 > v37)
    v37 = ((v9 + ((v31 + v18) & 0xFFFFFFFFFFFFFFF8) + 24) & ~v9) + v18;
  v40 = ((v26 + ((v10 + ((v6 + 24) & ~v6)) & ~v9)) & ~v9) + v18;
  if (v40 <= v37)
    v40 = v37;
  if (v39 > v40)
    v40 = ((v9 + ((v31 + v18) & 0xFFFFFFFFFFFFFFF8) + 24) & ~v9) + v18;
  v41 = ((v26 + ((v26 + ((v10 + ((v6 + 104) & ~v6)) & ~v9)) & ~v9)) & ~v9) + v18;
  if (v41 <= v40)
    v41 = v40;
  v42 = ((v27 + ((v26 + ((v26 + ((v26 + ((v10 + ((v6 + 160) & ~v6)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v15) + v28;
  if (v42 <= v41)
    v42 = v41;
  v32 = (v10 + ((v6 + 56) & ~v6)) & ~v9;
  if (((v26 + ((v26 + v32) & ~v9)) & ~v9) + v18 > v42)
    v42 = ((v26 + ((v26 + v32) & ~v9)) & ~v9) + v18;
  if (v33 + v18 + 1 > v42)
    v42 = v33 + v18 + 1;
  v43 = ((v26 + ((v26 + ((v10 + ((v6 + 128) & ~v6)) & ~v9)) & ~v9)) & ~v9) + v18;
  if (v43 <= v42)
    v43 = v42;
  if (v25 > v43)
    v43 = v25;
  if (v38 > v43)
    v43 = v38;
  v44 = v43 + 1;
  if (a3 < 0xF2)
  {
    v47 = 0;
    v45 = a1;
    v46 = a2;
  }
  else
  {
    v45 = a1;
    v46 = a2;
    if (v44 <= 3)
    {
      v49 = ((a3 + ~(-1 << (8 * v44)) - 241) >> (8 * v44)) + 1;
      if (HIWORD(v49))
      {
        v47 = 4u;
      }
      else if (v49 >= 0x100)
      {
        v47 = 2;
      }
      else
      {
        v47 = v49 > 1;
      }
    }
    else
    {
      v47 = 1u;
    }
  }
  if (v46 <= 0xF1)
    __asm { BR              X11 }
  v48 = v46 - 242;
  if (v44 < 4)
  {
    if ((_DWORD)v43 != -1)
    {
      v50 = v48 & ~(-1 << (8 * v44));
      bzero(v45, v44);
      if ((_DWORD)v44 == 3)
      {
        *(_WORD *)v45 = v50;
        v45[2] = BYTE2(v50);
      }
      else if ((_DWORD)v44 == 2)
      {
        *(_WORD *)v45 = v50;
      }
      else
      {
        *v45 = v50;
      }
    }
  }
  else
  {
    bzero(v45, v43 + 1);
    *(_DWORD *)v45 = v48;
  }
  __asm { BR              X10 }
}

uint64_t sub_23BEFE42C(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;

  v3 = *(_QWORD *)(a2[3] - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(_QWORD *)(sub_23BFF82CC() - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = v5 + v7;
  v9 = v5 + v7 + 1;
  v10 = *(_DWORD *)(v6 + 84);
  v11 = *(_QWORD *)(v6 + 64);
  if (v10)
    v12 = v11;
  else
    v12 = v11 + 1;
  v13 = v12 + v7;
  v14 = *(_QWORD *)(a2[2] - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v32 = v12 + v15;
  v16 = *(_QWORD *)(v14 + 64);
  if (*(_DWORD *)(v14 + 84))
    v17 = *(_QWORD *)(v14 + 64);
  else
    v17 = v16 + 1;
  v34 = ((v16 + v15 + ((v12 + v15 + ((v12 + v7 + ((v12 + v7 + ((v9 + ((v4 + 248) & ~v4)) & ~v7)) & ~v7)) & ~v7)) & ~v15)) & ~v15)
      + v17;
  if (v11 > v5)
    v5 = v11;
  v18 = sub_23BFF8368();
  v19 = (((v13 & ~v7) + v12 + *(unsigned __int8 *)(*(_QWORD *)(v18 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v18 - 8) + 80))
      + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64);
  if (v19 <= v5)
    v19 = v5;
  v20 = *(_QWORD *)(a2[4] - 8);
  v21 = (((v17 + v15 + ((v32 + ((v13 + ((v13 + ((v9 + ((v4 + 216) & ~v4)) & ~v7)) & ~v7)) & ~v7)) & ~v15)) & ~v15)
       + v17
       + *(unsigned __int8 *)(v20 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  v22 = *(_QWORD *)(v20 + 64);
  if (*(_DWORD *)(v20 + 84))
    v23 = *(_QWORD *)(v20 + 64);
  else
    v23 = v22 + 1;
  v24 = v23 + v21;
  v25 = (v8 & ~v7) + v12;
  v26 = ((v25 + v7) & ~v7) + v12;
  v27 = ((v7 + (v25 & 0xFFFFFFFFFFFFFFF8) + 24) & ~v7) + v12;
  v28 = ((v8 + ((v4 + 64) & ~v4)) & ~v7) + v12;
  if (v27 <= v34)
    v27 = v34;
  if (v27 <= v19 + 1)
    v29 = v19 + 1;
  else
    v29 = v27;
  if (v29 <= v24)
    v29 = v24;
  if (v29 <= ((v32 + ((v13 + ((v7 + 64) & ~v7)) & ~v7)) & (unint64_t)~v15) + v17)
    v29 = ((v32 + ((v13 + ((v7 + 64) & ~v7)) & ~v7)) & ~v15) + v17;
  if (v29 <= ((v26 + v7) & ~v7) + v12)
    v29 = ((v26 + v7) & ~v7) + v12;
  if (v29 <= ((v13 + ((v8 + ((v4 + 24) & ~v4)) & ~v7)) & ~v7) + v12)
    v29 = ((v13 + ((v8 + ((v4 + 24) & ~v4)) & ~v7)) & ~v7) + v12;
  if (v29 <= ((v13 + ((v13 + ((v8 + ((v4 + 104) & ~v4)) & ~v7)) & ~v7)) & ~v7) + v12)
    v29 = ((v13 + ((v13 + ((v8 + ((v4 + 104) & ~v4)) & ~v7)) & ~v7)) & ~v7) + v12;
  if (v29 <= ((v32 + ((v13 + ((v13 + ((v13 + ((v8 + ((v4 + 160) & ~v4)) & ~v7)) & ~v7)) & ~v7)) & ~v7)) & (unint64_t)~v15)
            + v17)
    v29 = ((v32 + ((v13 + ((v13 + ((v13 + ((v8 + ((v4 + 160) & ~v4)) & ~v7)) & ~v7)) & ~v7)) & ~v7)) & ~v15) + v17;
  if (v29 <= ((v13 + ((v13 + ((v8 + ((v4 + 56) & ~v4)) & ~v7)) & ~v7)) & ~v7) + v12)
    v29 = ((v13 + ((v13 + ((v8 + ((v4 + 56) & ~v4)) & ~v7)) & ~v7)) & ~v7) + v12;
  if (v29 <= v28 + 1)
    v29 = v28 + 1;
  if (v29 <= ((v13 + ((v13 + ((v8 + ((v4 + 128) & ~v4)) & ~v7)) & ~v7)) & ~v7) + v12)
    v29 = ((v13 + ((v13 + ((v8 + ((v4 + 128) & ~v4)) & ~v7)) & ~v7)) & ~v7) + v12;
  if (v29 <= v26)
    v29 = v26;
  if (v29 <= v22)
    v29 = v22;
  result = *(unsigned __int8 *)(a1 + v29);
  if (result >= 0xF)
  {
    if (v29 <= 3)
      v31 = v29;
    else
      v31 = 4;
    __asm { BR              X12 }
  }
  return result;
}

uint64_t sub_23BEFE7D8(_BYTE *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t result;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  size_t v24;
  size_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  size_t v29;
  unint64_t v30;
  unint64_t v31;
  size_t v32;
  char v33;
  int v34;
  uint64_t v35;
  uint64_t v36;

  v4 = *(_QWORD *)(a3[3] - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(sub_23BFF82CC() - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = v6 + v8;
  v36 = v6 + v8 + 1;
  v10 = *(_DWORD *)(v7 + 84);
  v11 = *(_QWORD *)(v7 + 64);
  if (v10)
    v12 = v11;
  else
    v12 = v11 + 1;
  v13 = v12 + v8;
  v14 = *(_QWORD *)(a3[2] - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v35 = v12 + v15;
  v16 = *(_QWORD *)(v14 + 64);
  if (*(_DWORD *)(v14 + 84))
    v17 = *(_QWORD *)(v14 + 64);
  else
    v17 = v16 + 1;
  v18 = ((v16 + v15 + ((v12 + v15 + ((v12 + v8 + ((v12 + v8 + ((v36 + ((v5 + 248) & ~v5)) & ~v8)) & ~v8)) & ~v8)) & ~v15)) & ~v15)
      + v17;
  if (v11 > v6)
    v6 = v11;
  result = sub_23BFF8368();
  v20 = (((v13 & ~v8) + v12 + *(unsigned __int8 *)(*(_QWORD *)(result - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(result - 8) + 80))
      + *(_QWORD *)(*(_QWORD *)(result - 8) + 64);
  if (v20 <= v6)
    v20 = v6;
  if (v20 + 1 > v18)
    v21 = v20 + 1;
  else
    v21 = v18;
  v22 = *(_QWORD *)(a3[4] - 8);
  v23 = (((v17 + v15 + ((v35 + ((v13 + ((v13 + ((v36 + ((v5 + 216) & ~v5)) & ~v8)) & ~v8)) & ~v8)) & ~v15)) & ~v15)
       + v17
       + *(unsigned __int8 *)(v22 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = *(_QWORD *)(v22 + 64);
  if (*(_DWORD *)(v22 + 84))
    v25 = *(_QWORD *)(v22 + 64);
  else
    v25 = v24 + 1;
  v26 = v25 + v23;
  if (v26 > v21)
    v21 = v26;
  v27 = ((v35 + ((v13 + ((v8 + 64) & ~v8)) & ~v8)) & ~v15) + v17;
  if (v27 <= v21)
    v27 = v21;
  v28 = (v9 & ~v8) + v12;
  v29 = ((v28 + v8) & ~v8) + v12;
  if (((v29 + v8) & ~v8) + v12 > v27)
    v27 = ((v29 + v8) & ~v8) + v12;
  v30 = ((v8 + (v28 & 0xFFFFFFFFFFFFFFF8) + 24) & ~v8) + v12;
  if (v30 > v27)
    v27 = v30;
  if (((v13 + ((v9 + ((v5 + 24) & ~v5)) & ~v8)) & ~v8) + v12 > v27)
    v27 = ((v13 + ((v9 + ((v5 + 24) & ~v5)) & ~v8)) & ~v8) + v12;
  if (v30 > v27)
    v27 = v30;
  if (((v13 + ((v13 + ((v9 + ((v5 + 104) & ~v5)) & ~v8)) & ~v8)) & ~v8) + v12 > v27)
    v27 = ((v13 + ((v13 + ((v9 + ((v5 + 104) & ~v5)) & ~v8)) & ~v8)) & ~v8) + v12;
  if (((v35 + ((v13 + ((v13 + ((v13 + ((v9 + ((v5 + 160) & ~v5)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & (unint64_t)~v15)
     + v17 > v27)
    v27 = ((v35 + ((v13 + ((v13 + ((v13 + ((v9 + ((v5 + 160) & ~v5)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v15) + v17;
  if (((v13 + ((v13 + ((v9 + ((v5 + 56) & ~v5)) & ~v8)) & ~v8)) & ~v8) + v12 > v27)
    v27 = ((v13 + ((v13 + ((v9 + ((v5 + 56) & ~v5)) & ~v8)) & ~v8)) & ~v8) + v12;
  v31 = ((v9 + ((v5 + 64) & ~v5)) & ~v8) + v12;
  if (v31 + 1 > v27)
    v27 = v31 + 1;
  if (((v13 + ((v13 + ((v9 + ((v5 + 128) & ~v5)) & ~v8)) & ~v8)) & ~v8) + v12 > v27)
    v27 = ((v13 + ((v13 + ((v9 + ((v5 + 128) & ~v5)) & ~v8)) & ~v8)) & ~v8) + v12;
  if (v24 <= v27)
    v24 = v27;
  if (v29 <= v24)
    v32 = v24;
  else
    v32 = v29;
  if (a2 > 0xE)
  {
    if (v32 <= 3)
      v33 = ((a2 - 15) >> (8 * v32)) + 15;
    else
      v33 = 15;
    a1[v32] = v33;
    if (v32 >= 4)
      v34 = 4;
    else
      v34 = v32;
    bzero(a1, v32);
    __asm { BR              X10 }
  }
  a1[v32] = a2;
  return result;
}

void sub_23BEFEB9C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256AE4738[0])
  {
    sub_23BFF82CC();
    v0 = sub_23BFF96A0();
    if (!v1)
      atomic_store(v0, qword_256AE4738);
  }
}

uint64_t sub_23BEFEBF0()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_23BEFEBF8(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF2)
    goto LABEL_17;
  if (a2 + 14 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 14) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 14;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 14;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 14;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xF;
  v8 = v6 - 15;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t sub_23BEFEC88(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 14 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 14) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF2)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF1)
    return ((uint64_t (*)(void))((char *)&loc_23BEFECD4 + 4 * byte_23BFFD7A6[v4]))();
  *a1 = a2 + 14;
  return ((uint64_t (*)(void))((char *)sub_23BEFED08 + 4 * byte_23BFFD7A1[v4]))();
}

uint64_t sub_23BEFED08(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BEFED10(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BEFED18);
  return result;
}

uint64_t sub_23BEFED24(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BEFED2CLL);
  *(_BYTE *)result = a2 + 14;
  return result;
}

uint64_t sub_23BEFED30(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BEFED38(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BEFED44(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t sub_23BEFEDD4(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_23BEFEE20 + 4 * byte_23BFFD7B0[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_23BEFEE54 + 4 * byte_23BFFD7AB[v4]))();
}

uint64_t sub_23BEFEE54(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BEFEE5C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BEFEE64);
  return result;
}

uint64_t sub_23BEFEE70(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BEFEE78);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_23BEFEE7C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BEFEE84(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTagSinglePayload for VerticalStackCardLayout.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF8)
    goto LABEL_17;
  if (a2 + 8 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 8) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 8;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 8;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 8;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v8 = v6 - 9;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t sub_23BEFEF24(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_23BEFEF70 + 4 * byte_23BFFD7BA[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_23BEFEFA4 + 4 * byte_23BFFD7B5[v4]))();
}

uint64_t sub_23BEFEFA4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BEFEFAC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BEFEFB4);
  return result;
}

uint64_t sub_23BEFEFC0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BEFEFC8);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_23BEFEFCC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BEFEFD4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BEFEFEC(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_23BEFF038 + 4 * byte_23BFFD7C4[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_23BEFF06C + 4 * byte_23BFFD7BF[v4]))();
}

uint64_t sub_23BEFF06C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BEFF074(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BEFF07CLL);
  return result;
}

uint64_t sub_23BEFF088(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BEFF090);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_23BEFF094(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BEFF09C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BEFF0A8(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23BEFF0F4 + 4 * byte_23BFFD7CE[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23BEFF128 + 4 * byte_23BFFD7C9[v4]))();
}

uint64_t sub_23BEFF128(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BEFF130(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BEFF138);
  return result;
}

uint64_t sub_23BEFF144(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BEFF14CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23BEFF150(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BEFF158(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BEFF164(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_23BEFF1B0 + 4 * byte_23BFFD7D8[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_23BEFF1E4 + 4 * byte_23BFFD7D3[v4]))();
}

uint64_t sub_23BEFF1E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BEFF1EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BEFF1F4);
  return result;
}

uint64_t sub_23BEFF200(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BEFF208);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_23BEFF20C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BEFF214(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BEFF220(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23BEFF260 + 4 * byte_23BFFD7DD[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23BEFF280 + 4 * byte_23BFFD7E2[v4]))();
}

_BYTE *sub_23BEFF260(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23BEFF280(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BEFF288(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BEFF290(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BEFF298(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BEFF2A0(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t getEnumTagSinglePayload for CanvasSectionDensityFactor.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t sub_23BEFF33C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23BEFF388 + 4 * byte_23BFFD7EC[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23BEFF3BC + 4 * byte_23BFFD7E7[v4]))();
}

uint64_t sub_23BEFF3BC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BEFF3C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BEFF3CCLL);
  return result;
}

uint64_t sub_23BEFF3D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BEFF3E0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23BEFF3E4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BEFF3EC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void sub_23BEFF3F8()
{
  JUMPOUT(0x242615198);
}

void sub_23BEFF408()
{
  JUMPOUT(0x242615198);
}

void sub_23BEFF418()
{
  JUMPOUT(0x242615198);
}

void sub_23BEFF428()
{
  JUMPOUT(0x242615198);
}

void sub_23BEFF438()
{
  JUMPOUT(0x242615198);
}

void sub_23BEFF448()
{
  JUMPOUT(0x242615198);
}

void sub_23BEFF458()
{
  JUMPOUT(0x242615198);
}

void sub_23BEFF468()
{
  JUMPOUT(0x242615198);
}

void sub_23BEFF478()
{
  JUMPOUT(0x242615198);
}

void sub_23BEFF488()
{
  JUMPOUT(0x242615198);
}

void sub_23BEFF498()
{
  JUMPOUT(0x242615198);
}

void sub_23BEFF4A8()
{
  JUMPOUT(0x242615198);
}

void sub_23BEFF4B8()
{
  JUMPOUT(0x242615198);
}

void sub_23BEFF4C8()
{
  JUMPOUT(0x242615198);
}

void sub_23BEFF4D8()
{
  JUMPOUT(0x242615198);
}

void sub_23BEFF4E8()
{
  JUMPOUT(0x242615198);
}

void sub_23BEFF4F8()
{
  JUMPOUT(0x242615198);
}

void sub_23BEFF508()
{
  JUMPOUT(0x242615198);
}

void sub_23BEFF518()
{
  JUMPOUT(0x242615198);
}

void sub_23BEFF528()
{
  JUMPOUT(0x242615198);
}

void sub_23BEFF538()
{
  JUMPOUT(0x242615198);
}

void sub_23BEFF548()
{
  JUMPOUT(0x242615198);
}

void sub_23BEFF558()
{
  JUMPOUT(0x242615198);
}

void sub_23BEFF568()
{
  JUMPOUT(0x242615198);
}

void sub_23BEFF578()
{
  JUMPOUT(0x242615198);
}

void sub_23BEFF588()
{
  JUMPOUT(0x242615198);
}

void sub_23BEFF598()
{
  JUMPOUT(0x242615198);
}

void sub_23BEFF5A8()
{
  JUMPOUT(0x242615198);
}

void sub_23BEFF5B8()
{
  JUMPOUT(0x242615198);
}

void sub_23BEFF5C8()
{
  JUMPOUT(0x242615198);
}

void sub_23BEFF5D8()
{
  JUMPOUT(0x242615198);
}

void sub_23BEFF5E8()
{
  JUMPOUT(0x242615198);
}

void sub_23BEFF5F8()
{
  JUMPOUT(0x242615198);
}

void sub_23BEFF608()
{
  JUMPOUT(0x242615198);
}

void sub_23BEFF618()
{
  JUMPOUT(0x242615198);
}

void sub_23BEFF628()
{
  JUMPOUT(0x242615198);
}

void sub_23BEFF638()
{
  JUMPOUT(0x242615198);
}

void sub_23BEFF648()
{
  JUMPOUT(0x242615198);
}

void sub_23BEFF658()
{
  JUMPOUT(0x242615198);
}

void sub_23BEFF668()
{
  JUMPOUT(0x242615198);
}

void sub_23BEFF678()
{
  JUMPOUT(0x242615198);
}

void sub_23BEFF688()
{
  JUMPOUT(0x242615198);
}

void sub_23BEFF698()
{
  JUMPOUT(0x242615198);
}

void sub_23BEFF6A8()
{
  JUMPOUT(0x242615198);
}

void sub_23BEFF6B8()
{
  JUMPOUT(0x242615198);
}

void sub_23BEFF6C8()
{
  JUMPOUT(0x242615198);
}

void sub_23BEFF6D8()
{
  JUMPOUT(0x242615198);
}

void sub_23BEFF6E8()
{
  JUMPOUT(0x242615198);
}

uint64_t sub_23BEFF6F8()
{
  return 8;
}

uint64_t sub_23BEFF700()
{
  return 15;
}

uint64_t sub_23BEFF708()
{
  return 9;
}

uint64_t sub_23BEFF710()
{
  return 4;
}

uint64_t sub_23BEFF718()
{
  return 3;
}

void sub_23BEFF734()
{
  xmmword_256B023F0 = 0uLL;
}

double sub_23BEFF744@<D0>(_OWORD *a1@<X8>)
{
  double result;

  if (qword_256AE3370 != -1)
    swift_once();
  result = *(double *)&xmmword_256B023F0;
  *a1 = xmmword_256B023F0;
  return result;
}

uint64_t sub_23BEFF794()
{
  sub_23BEFF870();
  return sub_23BFF8584();
}

double sub_23BEFF7E4()
{
  double v1;

  sub_23BEFF81C();
  sub_23BFF8800();
  return v1;
}

unint64_t sub_23BEFF81C()
{
  unint64_t result;

  result = qword_256AE4F40;
  if (!qword_256AE4F40)
  {
    result = MEMORY[0x242615198](&unk_23BFFED98, &type metadata for ContainerSize);
    atomic_store(result, (unint64_t *)&qword_256AE4F40);
  }
  return result;
}

ValueMetadata *type metadata accessor for ContainerSize()
{
  return &type metadata for ContainerSize;
}

unint64_t sub_23BEFF870()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256AE4F48[0];
  if (!qword_256AE4F48[0])
  {
    type metadata accessor for CGSize(255);
    result = MEMORY[0x242615198](MEMORY[0x24BDBD858], v1);
    atomic_store(result, qword_256AE4F48);
  }
  return result;
}

uint64_t sub_23BEFF8B8()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23BFF96A0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_23BEFF930(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  if (*(_DWORD *)(v6 + 84))
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = *(_QWORD *)(v6 + 64) + 1;
  if ((v7 & 0x1000F8) != 0 || ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    if ((*(unsigned int (**)(uint64_t *, uint64_t, _QWORD))(v6 + 48))(a2, 1, *(_QWORD *)(a3 + 16)))
    {
      memcpy(a1, a2, v8);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    }
    v11 = (_QWORD *)(((unint64_t)a2 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    v12 = v11[1];
    v13 = (_QWORD *)(((unint64_t)a1 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v13 = *v11;
    v13[1] = v12;
  }
  swift_retain();
  return a1;
}

uint64_t sub_23BEFFA38(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 1, v3))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return swift_release();
}

char *sub_23BEFFAA8(char *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  size_t v9;
  size_t v10;
  size_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    v7 = *(_DWORD *)(v6 + 84);
    v8 = *(_QWORD *)(v6 + 64);
    if (v7)
      v9 = v8;
    else
      v9 = v8 + 1;
    memcpy(a1, a2, v9);
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    v7 = *(_DWORD *)(v6 + 84);
    v8 = *(_QWORD *)(v6 + 64);
  }
  if (v7)
    v10 = v8;
  else
    v10 = v8 + 1;
  v11 = v10 + 7;
  v12 = (unint64_t)&a1[v11];
  v13 = (uint64_t *)(((unint64_t)a2 + v11) & 0xFFFFFFFFFFFFFFF8);
  v15 = *v13;
  v14 = v13[1];
  v16 = (_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF8);
  *v16 = v15;
  v16[1] = v14;
  swift_retain();
  return a1;
}

void *sub_23BEFFB70(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
LABEL_10:
  if (*(_DWORD *)(v6 + 84))
    v11 = *(_QWORD *)(v6 + 64);
  else
    v11 = *(_QWORD *)(v6 + 64) + 1;
  v12 = v11 + 7;
  v13 = (_QWORD *)(((unint64_t)a1 + v12) & 0xFFFFFFFFFFFFFFF8);
  v14 = (_QWORD *)(((unint64_t)a2 + v12) & 0xFFFFFFFFFFFFFFF8);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  swift_retain();
  swift_release();
  return a1;
}

void *sub_23BEFFC8C(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  size_t v9;
  size_t v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    v7 = *(_DWORD *)(v6 + 84);
    v8 = *(_QWORD *)(v6 + 64);
    if (v7)
      v9 = v8;
    else
      v9 = v8 + 1;
    memcpy(a1, a2, v9);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    v7 = *(_DWORD *)(v6 + 84);
    v8 = *(_QWORD *)(v6 + 64);
  }
  if (v7)
    v10 = v8;
  else
    v10 = v8 + 1;
  *(_OWORD *)(((unint64_t)a1 + v10 + 7) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)a2 + v10 + 7) & 0xFFFFFFFFFFFFF8);
  return a1;
}

void *sub_23BEFFD50(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
LABEL_10:
  if (*(_DWORD *)(v6 + 84))
    v11 = *(_QWORD *)(v6 + 64);
  else
    v11 = *(_QWORD *)(v6 + 64) + 1;
  *(_OWORD *)(((unint64_t)a1 + v11 + 7) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)a2 + v11 + 7) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t sub_23BEFFE64(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v13;
  unint64_t v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = v5 - 1;
  else
    v6 = 0;
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = v6;
  v8 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v8;
  if (!a2)
    return 0;
  if (v7 < a2)
  {
    if (((((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v9 = 2;
    else
      v9 = a2 - v7 + 1;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    __asm { BR              X16 }
  }
  if (v6 < 0x7FFFFFFF)
  {
    v14 = *(_QWORD *)((a1 + v8 + 7) & 0xFFFFFFFFFFFFF8);
    if (v14 >= 0xFFFFFFFF)
      LODWORD(v14) = -1;
    return (v14 + 1);
  }
  else
  {
    v13 = (*(uint64_t (**)(void))(v4 + 48))();
    if (v13 >= 2)
      return v13 - 1;
    else
      return 0;
  }
}

void sub_23BEFFF9C(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = v9;
  v11 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v11;
  if (v10 < a3)
  {
    v12 = a3 - v10;
    if ((((_DWORD)v11 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v13 = v12 + 1;
    else
      v13 = 2;
    if (v13 >= 0x10000)
      v14 = 4;
    else
      v14 = 2;
    if (v13 < 0x100)
      v14 = 1;
    if (v13 >= 2)
      v6 = v14;
    else
      v6 = 0;
  }
  if (a2 > v10)
  {
    if ((((_DWORD)v11 + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      v15 = ~v10 + a2;
      bzero(a1, ((v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      *a1 = v15;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t sub_23BF00094@<X0>(unsigned int a1@<W1>, size_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unsigned int v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t result;

  v12[v13] = 0;
  if (a1)
  {
    if (v10 < 0x7FFFFFFF)
    {
      v15 = (_QWORD *)((unint64_t)&v12[a2 + 7] & 0xFFFFFFFFFFFFFFF8);
      if ((a1 & 0x80000000) != 0)
      {
        *v15 = a1 ^ 0x80000000;
        v15[1] = 0;
      }
      else
      {
        *v15 = a1 - 1;
      }
    }
    else if (v10 >= a1)
    {
      return (*(uint64_t (**)(_BYTE *, _QWORD))(v11 + 56))(v12, a1 + 1);
    }
    else if ((_DWORD)a2)
    {
      if (a2 <= 3)
        v14 = a2;
      else
        v14 = 4;
      bzero(v12, a2);
      __asm { BR              X10 }
    }
  }
  return result;
}

void sub_23BF00190()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_23BF001A0()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_23BF001A8()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

void type metadata accessor for CanvasContextMenu()
{
  JUMPOUT(0x2426150F0);
}

uint64_t sub_23BF001C0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23BF001F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD v62[2];
  _QWORD v63[2];
  _QWORD v64[2];
  _QWORD v65[3];

  v4 = v3;
  v57 = a1;
  v61 = a3;
  MEMORY[0x242615198](&unk_23BFFEE18);
  v6 = sub_23BFF89EC();
  v56 = *(_QWORD *)(v6 - 8);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v55 = (uint64_t)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v54 = (uint64_t)&v45 - v10;
  v49 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  MEMORY[0x24BDAC7A8](v9);
  v47 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = v12;
  v13 = sub_23BFF862C();
  v52 = *(_QWORD *)(v13 - 8);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v53 = (uint64_t)&v45 - v17;
  v18 = *(_QWORD *)(a2 + 16);
  v19 = sub_23BFF96A0();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)&v45 - v22;
  v24 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v48 = (char *)&v45 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_23BFF8968();
  v59 = *(_QWORD *)(v26 - 8);
  v60 = v26;
  MEMORY[0x24BDAC7A8](v26);
  v58 = (char *)&v45 - v27;
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  v51 = v4;
  v28(v23, v4, v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v23, 1, v18) == 1)
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v19);
    v29 = MEMORY[0x242615198](MEMORY[0x24BDEFB78], v6);
    v30 = v54;
    sub_23BEA72EC(v57, v6, v54);
    v31 = v55;
    sub_23BEA5C0C(v30, v6, v55);
    v32 = *(_QWORD *)(a2 + 40);
    v65[0] = v29;
    v65[1] = v32;
    MEMORY[0x242615198](MEMORY[0x24BDED308], v13, v65);
    v33 = (uint64_t)v58;
    sub_23BEA5CE8(v31, v13, v6);
    v34 = *(void (**)(uint64_t, uint64_t))(v56 + 8);
    v34(v31, v6);
    v34(v30, v6);
  }
  else
  {
    v46 = v24;
    v35 = *(void (**)(char *, char *, uint64_t))(v24 + 32);
    v36 = v48;
    v45 = v18;
    v35(v48, v23, v18);
    v37 = v47;
    (*(void (**)(char *))(v51 + *(int *)(a2 + 52)))(v36);
    v38 = MEMORY[0x242615198](MEMORY[0x24BDEFB78], v6);
    v39 = v50;
    MEMORY[0x2426142A4](v37, v6, v50, v38);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v37, v39);
    v32 = *(_QWORD *)(a2 + 40);
    v62[0] = v38;
    v62[1] = v32;
    MEMORY[0x242615198](MEMORY[0x24BDED308], v13, v62);
    v40 = v53;
    sub_23BEA72EC((uint64_t)v16, v13, v53);
    v41 = *(void (**)(char *, uint64_t))(v52 + 8);
    v41(v16, v13);
    sub_23BEA5C0C(v40, v13, (uint64_t)v16);
    v33 = (uint64_t)v58;
    sub_23BEA5C24((uint64_t)v16, v13);
    v41(v16, v13);
    v41((char *)v40, v13);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v36, v45);
  }
  v42 = MEMORY[0x242615198](MEMORY[0x24BDEFB78], v6);
  v64[0] = v42;
  v64[1] = v32;
  v63[0] = MEMORY[0x242615198](MEMORY[0x24BDED308], v13, v64);
  v63[1] = v42;
  v43 = v60;
  MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v60, v63);
  sub_23BEA5C0C(v33, v43, v61);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v59 + 8))(v33, v43);
}

void sub_23BF006B4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = sub_23BFF96A0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  type metadata accessor for CanvasContextMenu();
}

uint64_t sub_23BF00728(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v4 = (_QWORD *)(v3 + *(int *)(result + 52));
  *v4 = v2;
  v4[1] = v1;
  return result;
}

void sub_23BF00754()
{
  type metadata accessor for CanvasContextMenu();
}

uint64_t sub_23BF00790(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];
  uint64_t v8;
  uint64_t v9;

  MEMORY[0x242615198](&unk_23BFFEE18, a1);
  v2 = sub_23BFF89EC();
  v3 = sub_23BFF862C();
  v4 = sub_23BFF8968();
  v5 = MEMORY[0x242615198](MEMORY[0x24BDEFB78], v2);
  v8 = v5;
  v9 = v1;
  v7[0] = MEMORY[0x242615198](MEMORY[0x24BDED308], v3, &v8);
  v7[1] = v5;
  return MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v4, v7);
}

uint64_t sub_23BF0083C@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  int *v22;
  _QWORD *v23;
  char *v24;
  uint64_t result;
  _QWORD *v26;
  _QWORD *v27;
  __int128 v28;
  __int128 v29;
  uint64_t v33;
  uint64_t v34;

  v16 = *((_QWORD *)a1 + 2);
  v17 = *((_BYTE *)a1 + 24);
  v28 = a1[2];
  v29 = *a1;
  v18 = *((_QWORD *)a1 + 6);
  v19 = *((_QWORD *)a1 + 7);
  v20 = *a7;
  *a9 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3728);
  swift_storeEnumTagMultiPayload();
  v22 = (int *)type metadata accessor for TallCardView(0, a11, a12, v21);
  v23 = (uint64_t *)((char *)a9 + v22[9]);
  sub_23BFF8FEC();
  *v23 = v33;
  v23[1] = v34;
  v24 = (char *)a9 + v22[10];
  *(_OWORD *)v24 = v29;
  *((_QWORD *)v24 + 2) = v16;
  v24[24] = v17;
  *((_OWORD *)v24 + 2) = v28;
  *((_QWORD *)v24 + 6) = v18;
  *((_QWORD *)v24 + 7) = v19;
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a11 - 8) + 32))((char *)a9 + v22[11], a2, a11);
  v26 = (uint64_t *)((char *)a9 + v22[12]);
  *v26 = a3;
  v26[1] = a4;
  v26[2] = a5;
  v26[3] = a6;
  *((_BYTE *)a9 + v22[13]) = v20;
  v27 = (uint64_t *)((char *)a9 + v22[14]);
  *v27 = a8;
  v27[1] = a10;
  return result;
}

double TallCardViewLayout.artworkAspectRatio.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

double TallCardViewLayout.artworkCornerRadius.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

uint64_t TallCardViewLayout.isAccessibilityLayout.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 24);
}

double TallCardViewLayout.minimumTitleHeight.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

double TallCardViewLayout.overlayHeightRatio.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 40);
}

double TallCardViewLayout.titleHorizontalPadding.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 48);
}

uint64_t TallCardViewLayout.titleLineLimit.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 56);
}

uint64_t TallCardViewLayout.init(artworkAspectRatio:artworkCornerRadius:isAccessibilityLayout:minimumTitleHeight:overlayHeightRatio:titleHorizontalPadding:titleLineLimit:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>, double a8@<D4>, double a9@<D5>)
{
  *(double *)a3 = a4;
  *(double *)(a3 + 8) = a5;
  *(double *)(a3 + 16) = a6;
  *(_BYTE *)(a3 + 24) = result;
  *(double *)(a3 + 32) = a7;
  *(double *)(a3 + 40) = a8;
  *(double *)(a3 + 48) = a9;
  *(_QWORD *)(a3 + 56) = a2;
  return result;
}

uint64_t sub_23BF00A08(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_23BF00A40 + 4 * byte_23BFFEE70[a1]))(0xD000000000000012, 0x800000023C01E950);
}

uint64_t sub_23BF00A40(uint64_t a1)
{
  return a1 + 1;
}

uint64_t sub_23BF00A90()
{
  return 0x6E694C656C746974;
}

uint64_t sub_23BF00AB4()
{
  unsigned __int8 *v0;

  return sub_23BF00A08(*v0);
}

uint64_t sub_23BF00ABC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BF054C8(a1, a2);
  *a3 = result;
  return result;
}

void sub_23BF00AE0(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_23BF00AEC()
{
  sub_23BF03E88();
  return sub_23BFF9A30();
}

uint64_t sub_23BF00B14()
{
  sub_23BF03E88();
  return sub_23BFF9A3C();
}

uint64_t TallCardViewLayout.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];
  int v16;
  char v17;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE4FD0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v9 = v1[1];
  v10 = v1[2];
  v16 = *((unsigned __int8 *)v1 + 24);
  v12 = v1[4];
  v11 = v1[5];
  v13 = v1[6];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BF03E88();
  sub_23BFF9A18();
  v15[0] = v8;
  v15[1] = v9;
  v17 = 0;
  type metadata accessor for CGSize(0);
  sub_23BEA1BB8(&qword_256AE3468, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, MEMORY[0x24BDBD848]);
  sub_23BFF9940();
  if (!v2)
  {
    v15[0] = v10;
    v17 = 1;
    sub_23BEBFC1C();
    sub_23BFF9940();
    LOBYTE(v15[0]) = 2;
    sub_23BFF991C();
    v15[0] = v12;
    v17 = 3;
    sub_23BFF9940();
    v15[0] = v11;
    v17 = 4;
    sub_23BFF9940();
    v15[0] = v13;
    v17 = 5;
    sub_23BFF9940();
    LOBYTE(v15[0]) = 6;
    sub_23BFF9934();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t TallCardViewLayout.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];
  char v19;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE4FE0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BF03E88();
  sub_23BFF9A0C();
  if (!v2)
  {
    type metadata accessor for CGSize(0);
    v19 = 0;
    sub_23BEA1BB8(&qword_256AE3478, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, MEMORY[0x24BDBD860]);
    sub_23BFF98C8();
    v9 = v18[0];
    v10 = v18[1];
    v19 = 1;
    sub_23BEC0384();
    sub_23BFF98C8();
    v11 = v18[0];
    LOBYTE(v18[0]) = 2;
    v12 = sub_23BFF98A4();
    v19 = 3;
    sub_23BFF98C8();
    v13 = v18[0];
    v19 = 4;
    sub_23BFF98C8();
    v14 = v18[0];
    v19 = 5;
    sub_23BFF98C8();
    v16 = v18[0];
    LOBYTE(v18[0]) = 6;
    v17 = sub_23BFF98BC();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(_QWORD *)a2 = v9;
    *(_QWORD *)(a2 + 8) = v10;
    *(_QWORD *)(a2 + 16) = v11;
    *(_BYTE *)(a2 + 24) = v12 & 1;
    *(_QWORD *)(a2 + 32) = v13;
    *(_QWORD *)(a2 + 40) = v14;
    *(_QWORD *)(a2 + 48) = v16;
    *(_QWORD *)(a2 + 56) = v17;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_23BF010A4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return TallCardViewLayout.init(from:)(a1, a2);
}

uint64_t sub_23BF010B8(_QWORD *a1)
{
  return TallCardViewLayout.encode(to:)(a1);
}

uint64_t TallCardViewLayout.hash(into:)()
{
  sub_23BEA0B6C();
  sub_23BFF99F4();
  sub_23BFF99E8();
  sub_23BFF99F4();
  sub_23BFF99F4();
  sub_23BFF99F4();
  return sub_23BFF99DC();
}

uint64_t TallCardViewLayout.hashValue.getter()
{
  sub_23BFF99D0();
  TallCardViewLayout.hash(into:)();
  return sub_23BFF9A00();
}

uint64_t sub_23BF011CC()
{
  sub_23BFF99D0();
  TallCardViewLayout.hash(into:)();
  return sub_23BFF9A00();
}

uint64_t sub_23BF01240()
{
  sub_23BFF99D0();
  TallCardViewLayout.hash(into:)();
  return sub_23BFF9A00();
}

uint64_t sub_23BF012B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t OpaqueTypeConformance2;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t);
  uint64_t v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD v89[3];
  _QWORD v90[2];
  _QWORD v91[2];
  _QWORD v92[2];
  uint64_t v93;
  ValueMetadata *v94;
  uint64_t v95;
  unint64_t v96;
  _QWORD v97[2];
  _QWORD v98[2];

  v85 = a2;
  v81 = *(_QWORD *)(a1 - 8);
  v83 = *(_QWORD *)(v81 + 64);
  MEMORY[0x24BDAC7A8](a1);
  v80 = (char *)&v66 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = *(_QWORD *)(v3 + 16);
  v4 = v3;
  v78 = v3;
  v5 = sub_23BFF862C();
  v77 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3C28);
  v6 = sub_23BFF862C();
  v7 = sub_23BFF8614();
  v8 = (uint64_t (*)(uint64_t))MEMORY[0x24BDED168];
  v79 = *(_QWORD *)(v4 + 24);
  v98[0] = v79;
  v98[1] = MEMORY[0x24BDEEC40];
  v9 = MEMORY[0x24BDED308];
  v10 = MEMORY[0x242615198](MEMORY[0x24BDED308], v5, v98);
  v11 = sub_23BEA1F94(qword_256AE3C30, &qword_256AE3C28, MEMORY[0x24BDEB950]);
  v97[0] = v10;
  v97[1] = v11;
  v12 = MEMORY[0x242615198](v9, v6, v97);
  v13 = sub_23BEA1BB8(&qword_256AE5088, v8, MEMORY[0x24BDED160]);
  v93 = v6;
  v94 = (ValueMetadata *)v7;
  v95 = v12;
  v96 = v13;
  v14 = MEMORY[0x24BDF2380];
  MEMORY[0x24261512C](255, &v93, MEMORY[0x24BDF2380], 0);
  sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE5090);
  swift_getTupleTypeMetadata2();
  v15 = sub_23BFF9220();
  v16 = MEMORY[0x24BDF5428];
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v15);
  sub_23BFF9058();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE5098);
  swift_getTupleTypeMetadata2();
  v17 = sub_23BFF9220();
  MEMORY[0x242615198](v16, v17);
  v18 = sub_23BFF90AC();
  v93 = v5;
  v94 = (ValueMetadata *)v7;
  v95 = v10;
  v96 = v13;
  MEMORY[0x24261512C](255, &v93, v14, 0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE50A0);
  v19 = sub_23BFF862C();
  v93 = v5;
  v94 = (ValueMetadata *)v7;
  v95 = v10;
  v96 = v13;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v21 = sub_23BEA1F94(&qword_256AE50A8, &qword_256AE50A0, MEMORY[0x24BDEDC10]);
  v92[0] = OpaqueTypeConformance2;
  v92[1] = v21;
  v22 = MEMORY[0x24BDED308];
  v23 = MEMORY[0x242615198](MEMORY[0x24BDED308], v19, v92);
  v93 = v19;
  v94 = (ValueMetadata *)v7;
  v95 = v23;
  v96 = v13;
  MEMORY[0x24261512C](255, &v93, v14, 0);
  v24 = sub_23BFF862C();
  v25 = sub_23BFF8968();
  v26 = MEMORY[0x242615198](MEMORY[0x24BDF4700], v18);
  v93 = v19;
  v94 = (ValueMetadata *)v7;
  v95 = v23;
  v96 = v13;
  v91[0] = swift_getOpaqueTypeConformance2();
  v91[1] = v11;
  v27 = MEMORY[0x242615198](v22, v24, v91);
  v90[0] = v26;
  v90[1] = v27;
  v70 = v25;
  v69 = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v25, v90);
  v28 = sub_23BFF9040();
  v71 = *(_QWORD *)(v28 - 8);
  v29 = MEMORY[0x24BDAC7A8](v28);
  v68 = (char *)&v66 - v30;
  v31 = MEMORY[0x242615198](MEMORY[0x24BDF43B0], v28, v29);
  v66 = v31;
  v67 = sub_23BF05790();
  v93 = v28;
  v94 = &type metadata for ActionCardButtonStyle;
  v95 = v31;
  v96 = v67;
  v32 = MEMORY[0x24261512C](0, &v93, MEMORY[0x24BDF22E0], 0);
  v72 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v34 = (char *)&v66 - v33;
  sub_23BFF8ADC();
  v75 = v32;
  v77 = sub_23BFF862C();
  v76 = *(_QWORD *)(v77 - 8);
  MEMORY[0x24BDAC7A8](v77);
  v73 = (char *)&v66 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = MEMORY[0x24BDAC7A8](v36);
  v74 = (uint64_t)&v66 - v38;
  v39 = v81;
  v40 = v80;
  v41 = v84;
  v42 = v78;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v81 + 16))(v80, v84, v78, v37);
  v43 = (*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
  v44 = swift_allocObject();
  v45 = v82;
  v46 = v79;
  *(_QWORD *)(v44 + 16) = v82;
  *(_QWORD *)(v44 + 24) = v46;
  v47 = v40;
  v48 = v66;
  (*(void (**)(unint64_t, char *, uint64_t))(v39 + 32))(v44 + v43, v47, v42);
  v86 = v45;
  v87 = v46;
  v49 = v67;
  v50 = v41;
  v88 = v41;
  v51 = v68;
  sub_23BFF9034();
  sub_23BFF8D04();
  (*(void (**)(char *, uint64_t))(v71 + 8))(v51, v28);
  v52 = (uint64_t *)(v50 + *(int *)(v42 + 48));
  v53 = v52[2];
  v54 = v52[3];
  if (v54)
  {
    v55 = v53 & 1;
    v56 = *v52;
    v57 = v52[1];
  }
  else
  {
    v56 = 0;
    v55 = 0;
    v57 = 0xE000000000000000;
  }
  sub_23BEA1DC0(*v52, v52[1], v53, v54);
  v93 = v28;
  v94 = &type metadata for ActionCardButtonStyle;
  v95 = v48;
  v96 = v49;
  v58 = swift_getOpaqueTypeConformance2();
  v59 = (uint64_t)v73;
  v60 = v75;
  sub_23BFF8DD0();
  sub_23BEA0F64(v56, v57, v55);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v72 + 8))(v34, v60);
  v61 = sub_23BEA1BB8((unint64_t *)&qword_256AE3908, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088], MEMORY[0x24BDF1078]);
  v89[0] = v58;
  v89[1] = v61;
  v62 = v77;
  MEMORY[0x242615198](MEMORY[0x24BDED308], v77, v89);
  v63 = v74;
  sub_23BEA72EC(v59, v62, v74);
  v64 = *(void (**)(uint64_t, uint64_t))(v76 + 8);
  v64(v59, v62);
  sub_23BEA5C0C(v63, v62, v85);
  return ((uint64_t (*)(uint64_t, uint64_t))v64)(v63, v62);
}

uint64_t sub_23BF01A38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD v54[2];
  _QWORD v55[2];
  _QWORD v56[2];
  _QWORD v57[2];
  _QWORD v58[2];
  _QWORD v59[2];
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD v64[3];

  v47 = a3;
  v48 = a2;
  v46 = a1;
  v49 = a4;
  v5 = sub_23BFF862C();
  v6 = sub_23BFF8614();
  v7 = (uint64_t (*)(uint64_t))MEMORY[0x24BDED168];
  v64[0] = a3;
  v64[1] = MEMORY[0x24BDEEC40];
  v8 = MEMORY[0x24BDED308];
  v9 = MEMORY[0x242615198](MEMORY[0x24BDED308], v5, v64);
  v10 = sub_23BEA1BB8(&qword_256AE5088, v7, MEMORY[0x24BDED160]);
  v60 = v5;
  v61 = v6;
  v62 = v9;
  v63 = v10;
  v11 = MEMORY[0x24BDF2380];
  MEMORY[0x24261512C](255, &v60, MEMORY[0x24BDF2380], 0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE50A0);
  v12 = sub_23BFF862C();
  v60 = v5;
  v61 = v6;
  v62 = v9;
  v63 = v10;
  v59[0] = swift_getOpaqueTypeConformance2();
  v59[1] = sub_23BEA1F94(&qword_256AE50A8, &qword_256AE50A0, MEMORY[0x24BDEDC10]);
  v51 = MEMORY[0x242615198](v8, v12, v59);
  v52 = v12;
  v60 = v12;
  v61 = v6;
  v62 = v51;
  v63 = v10;
  MEMORY[0x24261512C](255, &v60, v11, 0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3C28);
  v13 = sub_23BFF862C();
  v43 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v44 = (uint64_t)&v43 - v17;
  v18 = sub_23BFF862C();
  v19 = sub_23BEA1F94(qword_256AE3C30, &qword_256AE3C28, MEMORY[0x24BDEB950]);
  v58[0] = v9;
  v58[1] = v19;
  v50 = v19;
  v20 = MEMORY[0x242615198](v8, v18, v58);
  v60 = v18;
  v61 = v6;
  v53 = v6;
  v62 = v20;
  v63 = v10;
  MEMORY[0x24261512C](255, &v60, v11, 0);
  sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE5090);
  swift_getTupleTypeMetadata2();
  v21 = sub_23BFF9220();
  v22 = MEMORY[0x24BDF5428];
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v21);
  sub_23BFF9058();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE5098);
  swift_getTupleTypeMetadata2();
  v23 = sub_23BFF9220();
  MEMORY[0x242615198](v22, v23);
  v24 = v46;
  v25 = sub_23BFF90AC();
  v26 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v28 = (char *)&v43 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v29);
  v31 = (char *)&v43 - v30;
  v32 = sub_23BFF8968();
  v45 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v34 = (char *)&v43 - v33;
  v36 = type metadata accessor for TallCardView(0, v48, v47, v35);
  if (*(_BYTE *)(v24 + *(int *)(v36 + 40) + 24) == 1)
  {
    sub_23BF02088(v36, (uint64_t)v28);
    MEMORY[0x242615198](MEMORY[0x24BDF4700], v25);
    sub_23BEA72EC((uint64_t)v28, v25, (uint64_t)v31);
    v37 = *(void (**)(char *, uint64_t))(v26 + 8);
    v37(v28, v25);
    sub_23BEA5C0C((uint64_t)v31, v25, (uint64_t)v28);
    v60 = v52;
    v61 = v53;
    v62 = v51;
    v63 = v10;
    v54[0] = swift_getOpaqueTypeConformance2();
    v54[1] = v50;
    MEMORY[0x242615198](MEMORY[0x24BDED308], v13, v54);
    sub_23BEA5C24((uint64_t)v28, v25);
    v37(v28, v25);
    v37(v31, v25);
  }
  else
  {
    sub_23BF02354(v36, (uint64_t)v15);
    v60 = v52;
    v61 = v53;
    v62 = v51;
    v63 = v10;
    v57[0] = swift_getOpaqueTypeConformance2();
    v57[1] = v50;
    MEMORY[0x242615198](MEMORY[0x24BDED308], v13, v57);
    v38 = v44;
    sub_23BEA72EC((uint64_t)v15, v13, v44);
    v39 = *(void (**)(char *, uint64_t))(v43 + 8);
    v39(v15, v13);
    sub_23BEA5C0C(v38, v13, (uint64_t)v15);
    MEMORY[0x242615198](MEMORY[0x24BDF4700], v25);
    sub_23BEA5CE8((uint64_t)v15, v25, v13);
    v39(v15, v13);
    v39((char *)v38, v13);
  }
  v40 = MEMORY[0x242615198](MEMORY[0x24BDF4700], v25);
  v60 = v52;
  v61 = v53;
  v62 = v51;
  v63 = v10;
  v56[0] = swift_getOpaqueTypeConformance2();
  v56[1] = v50;
  v41 = MEMORY[0x242615198](MEMORY[0x24BDED308], v13, v56);
  v55[0] = v40;
  v55[1] = v41;
  MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v32, v55);
  sub_23BEA5C0C((uint64_t)v34, v32, v49);
  return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v34, v32);
}

uint64_t sub_23BF02088@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  _BYTE *v21;
  void (*v22)(_BYTE *, uint64_t);
  _BYTE v24[16];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[4];
  _QWORD v29[2];
  _QWORD v30[2];

  v5 = *(_QWORD *)(a1 + 16);
  v6 = sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3C28);
  v7 = sub_23BFF862C();
  v8 = sub_23BFF8614();
  v9 = (uint64_t (*)(uint64_t))MEMORY[0x24BDED168];
  v30[0] = *(_QWORD *)(a1 + 24);
  v10 = v30[0];
  v30[1] = MEMORY[0x24BDEEC40];
  v11 = MEMORY[0x24BDED308];
  v29[0] = MEMORY[0x242615198](MEMORY[0x24BDED308], v6, v30);
  v29[1] = sub_23BEA1F94(qword_256AE3C30, &qword_256AE3C28, MEMORY[0x24BDEB950]);
  v28[0] = v7;
  v28[1] = v8;
  v28[2] = MEMORY[0x242615198](v11, v7, v29);
  v28[3] = sub_23BEA1BB8(&qword_256AE5088, v9, MEMORY[0x24BDED160]);
  MEMORY[0x24261512C](255, v28, MEMORY[0x24BDF2380], 0);
  sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE5090);
  swift_getTupleTypeMetadata2();
  v12 = sub_23BFF9220();
  v13 = MEMORY[0x24BDF5428];
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v12);
  sub_23BFF9058();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE5098);
  swift_getTupleTypeMetadata2();
  v14 = sub_23BFF9220();
  MEMORY[0x242615198](v13, v14);
  v15 = sub_23BFF90AC();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = &v24[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v17);
  v21 = &v24[-v20];
  sub_23BFF88A8();
  v25 = v5;
  v26 = v10;
  v27 = v2;
  sub_23BFF90A0();
  MEMORY[0x242615198](MEMORY[0x24BDF4700], v15);
  sub_23BEA72EC((uint64_t)v19, v15, (uint64_t)v21);
  v22 = *(void (**)(_BYTE *, uint64_t))(v16 + 8);
  v22(v19, v15);
  sub_23BEA5C0C((uint64_t)v21, v15, a2);
  return ((uint64_t (*)(_BYTE *, uint64_t))v22)(v21, v15);
}

uint64_t sub_23BF02354@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t OpaqueTypeConformance2;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  void (*v31)(char *, uint64_t);
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t);
  _QWORD v56[2];
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD v84[2];
  _QWORD v85[2];
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD v90[2];

  v80 = a2;
  v79 = sub_23BFF86BC();
  MEMORY[0x24BDAC7A8](v79);
  v78 = (char *)v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_23BFF8614();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x24BDED168];
  v77 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v65 = (char *)v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = *(_QWORD *)(a1 + 16);
  v7 = sub_23BFF862C();
  v73 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v56 - v8;
  v64 = *(_QWORD *)(a1 + 24);
  v90[0] = v64;
  v90[1] = MEMORY[0x24BDEEC40];
  v10 = MEMORY[0x242615198](MEMORY[0x24BDED308], v7, v90);
  v11 = sub_23BEA1BB8(&qword_256AE5088, v5, MEMORY[0x24BDED160]);
  v86 = v7;
  v87 = v4;
  v88 = v10;
  v89 = v11;
  v56[1] = v10;
  v12 = v11;
  v13 = MEMORY[0x24BDF2380];
  v14 = MEMORY[0x24261512C](0, &v86, MEMORY[0x24BDF2380], 0);
  v70 = *(_QWORD *)(v14 - 8);
  v66 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v58 = (char *)v56 - v15;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE50A0);
  v16 = sub_23BFF862C();
  v17 = *(_QWORD *)(v16 - 8);
  v61 = v16;
  v71 = v17;
  MEMORY[0x24BDAC7A8](v16);
  v62 = (char *)v56 - v18;
  v86 = v7;
  v87 = v4;
  v88 = v10;
  v89 = v12;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v59 = OpaqueTypeConformance2;
  v20 = sub_23BEA1F94(&qword_256AE50A8, &qword_256AE50A0, MEMORY[0x24BDEDC10]);
  v85[0] = OpaqueTypeConformance2;
  v85[1] = v20;
  v60 = MEMORY[0x242615198](MEMORY[0x24BDED308], v16, v85);
  v86 = v16;
  v87 = v4;
  v88 = v60;
  v89 = v12;
  v56[0] = v12;
  v21 = MEMORY[0x24261512C](0, &v86, v13, 0);
  v74 = *(_QWORD *)(v21 - 8);
  v67 = v21;
  MEMORY[0x24BDAC7A8](v21);
  v57 = (char *)v56 - v22;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3C28);
  v72 = sub_23BFF862C();
  v75 = *(_QWORD *)(v72 - 8);
  v23 = ((uint64_t (*)(uint64_t))MEMORY[0x24BDAC7A8])(v72);
  v63 = (char *)v56 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v69 = (uint64_t)v56 - v25;
  v26 = v76;
  v27 = v68;
  v28 = v64;
  sub_23BFF8CEC();
  v29 = v65;
  sub_23BFF871C();
  v30 = v58;
  sub_23BFF8D1C();
  v31 = *(void (**)(char *, uint64_t))(v77 + 8);
  v31(v29, v4);
  (*(void (**)(char *, uint64_t))(v73 + 8))(v9, v7);
  sub_23BFF91B4();
  v81 = v27;
  v82 = v28;
  v83 = v26;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE50E8);
  sub_23BF05AC8(&qword_256AE50F0, &qword_256AE50E8, sub_23BF05AAC);
  v32 = v62;
  v33 = v66;
  sub_23BFF8ECC();
  (*(void (**)(char *, uint64_t))(v70 + 8))(v30, v33);
  v34 = v29;
  sub_23BFF871C();
  v35 = v57;
  v36 = v61;
  v37 = v60;
  v38 = v56[0];
  sub_23BFF8D1C();
  v31(v34, v4);
  (*(void (**)(char *, uint64_t))(v71 + 8))(v32, v36);
  v39 = v78;
  v40 = &v78[*(int *)(v79 + 20)];
  v41 = *MEMORY[0x24BDEEB68];
  v42 = sub_23BFF8854();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 104))(v40, v41, v42);
  __asm { FMOV            V0.2D, #8.0 }
  *v39 = _Q0;
  v86 = v36;
  v87 = v4;
  v88 = v37;
  v89 = v38;
  v48 = swift_getOpaqueTypeConformance2();
  sub_23BEA1BB8(&qword_256AE3CB8, (uint64_t (*)(uint64_t))MEMORY[0x24BDED998], MEMORY[0x24BDED990]);
  v49 = (uint64_t)v63;
  v50 = v67;
  sub_23BFF8F44();
  sub_23BEC4004((uint64_t)v39);
  (*(void (**)(char *, uint64_t))(v74 + 8))(v35, v50);
  v51 = sub_23BEA1F94(qword_256AE3C30, &qword_256AE3C28, MEMORY[0x24BDEB950]);
  v84[0] = v48;
  v84[1] = v51;
  v52 = v72;
  MEMORY[0x242615198](MEMORY[0x24BDED308], v72, v84);
  v53 = v69;
  sub_23BEA72EC(v49, v52, v69);
  v54 = *(void (**)(uint64_t, uint64_t))(v75 + 8);
  v54(v49, v52);
  sub_23BEA5C0C(v53, v52, v80);
  return ((uint64_t (*)(uint64_t, uint64_t))v54)(v53, v52);
}

uint64_t sub_23BF029FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD v25[7];

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5110);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5100);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE50E8);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v10 = 1;
  sub_23BF02C98(a1, a2, a3, (uint64_t)&v10[*(int *)(v8 + 44)]);
  type metadata accessor for TallCardView(0, a2, a3, v17);
  sub_23BFF91C0();
  sub_23BFF86EC();
  sub_23BE9F190((uint64_t)v10, (uint64_t)v13, &qword_256AE5110);
  v18 = &v13[*(int *)(v11 + 36)];
  v19 = v25[5];
  *((_OWORD *)v18 + 4) = v25[4];
  *((_OWORD *)v18 + 5) = v19;
  *((_OWORD *)v18 + 6) = v25[6];
  v20 = v25[1];
  *(_OWORD *)v18 = v25[0];
  *((_OWORD *)v18 + 1) = v20;
  v21 = v25[3];
  *((_OWORD *)v18 + 2) = v25[2];
  *((_OWORD *)v18 + 3) = v21;
  sub_23BE9F3A0((uint64_t)v10, &qword_256AE5110);
  v22 = sub_23BFF91C0();
  sub_23BF9435C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v16, 0.0, 1, INFINITY, 0, v22, v23);
  sub_23BE9F3A0((uint64_t)v13, &qword_256AE5100);
  return sub_23BEC42E0((uint64_t)v16, a4, &qword_256AE50E8);
}

uint64_t sub_23BF02C98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  char *v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;

  v34 = a3;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5138);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (uint64_t *)((char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5140);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5148);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)&v33 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v33 - v20;
  *v9 = sub_23BFF91C0();
  v9[1] = v22;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5150);
  v24 = v34;
  sub_23BF02F2C(a1, a2, v34, (uint64_t)v9 + *(int *)(v23 + 44));
  v25 = sub_23BFF91C0();
  sub_23BF943B4(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v12, 0.0, 1, INFINITY, 0, v25, v26);
  sub_23BE9F3A0((uint64_t)v9, &qword_256AE5138);
  v28 = a1 + *(int *)(type metadata accessor for TallCardView(0, a2, v24, v27) + 40);
  if (*(double *)(v28 + 40) > 0.0)
    v29 = *(double *)(v28 + 40);
  else
    v29 = 0.0;
  sub_23BE9F190((uint64_t)v12, (uint64_t)v19, &qword_256AE5140);
  v30 = &v19[*(int *)(v13 + 36)];
  *(double *)v30 = v29;
  v30[8] = 0;
  sub_23BE9F3A0((uint64_t)v12, &qword_256AE5140);
  sub_23BEC42E0((uint64_t)v19, (uint64_t)v21, &qword_256AE5148);
  sub_23BE9F190((uint64_t)v21, (uint64_t)v16, &qword_256AE5148);
  *(_QWORD *)a4 = 0;
  *(_BYTE *)(a4 + 8) = 1;
  v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5158);
  sub_23BE9F190((uint64_t)v16, a4 + *(int *)(v31 + 48), &qword_256AE5148);
  sub_23BE9F3A0((uint64_t)v21, &qword_256AE5148);
  return sub_23BE9F3A0((uint64_t)v16, &qword_256AE5148);
}

uint64_t sub_23BF02F2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t KeyPath;
  char *v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  _BYTE v83[7];
  _BYTE v84[7];
  _BYTE v85[7];
  unsigned __int8 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  char v95;
  uint64_t v96[6];
  char v97;
  _BYTE v98[7];
  uint64_t v99;
  char v100;
  _BYTE v101[7];
  uint64_t v102;
  uint64_t v103;
  char v104;
  _BYTE v105[7];
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;

  v75 = a3;
  KeyPath = a1;
  v69 = a2;
  v73 = a4;
  v4 = sub_23BFF8BE4();
  v71 = *(_QWORD *)(v4 - 8);
  v72 = v4;
  MEMORY[0x24BDAC7A8](v4);
  *(_QWORD *)&v70 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5160);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_23BFF9184();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5168);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v64 - v17;
  v74 = (uint64_t)&v64 - v17;
  sub_23BFF9178();
  v19 = sub_23BFF8B60();
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v8, v12, v9);
  v8[*(int *)(v6 + 36)] = v19;
  v77 = v16;
  sub_23BE9F190((uint64_t)v8, (uint64_t)v16, &qword_256AE5160);
  sub_23BE9F3A0((uint64_t)v8, &qword_256AE5160);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  sub_23BEC42E0((uint64_t)v16, (uint64_t)v18, &qword_256AE5168);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5170);
  v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_23BFFF250;
  sub_23BFF8F98();
  v21 = sub_23BFF8FA4();
  swift_release();
  *(_QWORD *)(v20 + 32) = v21;
  sub_23BFF8F98();
  v22 = sub_23BFF8FA4();
  swift_release();
  *(_QWORD *)(v20 + 40) = v22;
  v96[0] = v20;
  sub_23BFF9478();
  v23 = v96[0];
  sub_23BFF9244();
  sub_23BFF9250();
  MEMORY[0x2426144E4](v23);
  sub_23BFF85B4();
  v25 = type metadata accessor for TallCardView(0, v69, v75, v24);
  v26 = (uint64_t *)(KeyPath + *(int *)(v25 + 48));
  v28 = *v26;
  v27 = v26[1];
  v29 = v26[3];
  v75 = v26[2];
  LOBYTE(v6) = v75;
  v66 = v27;
  v67 = v29;
  v69 = *(_QWORD *)(KeyPath + *(int *)(v25 + 40) + 56);
  KeyPath = swift_getKeyPath();
  v68 = swift_getKeyPath();
  v64 = v28;
  sub_23BEA1DC0(v28, v27, v6, v29);
  sub_23BFF8BFC();
  sub_23BFF8BCC();
  sub_23BFF8BD8();
  swift_release();
  v31 = v71;
  v30 = v72;
  v32 = v70;
  (*(void (**)(_QWORD, _QWORD, uint64_t))(v71 + 104))(v70, *MEMORY[0x24BDF17C8], v72);
  v65 = sub_23BFF8BF0();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v32, v30);
  v33 = swift_getKeyPath();
  v71 = v33;
  LOBYTE(v29) = sub_23BFF8B54();
  sub_23BFF83F8();
  v35 = v34;
  v37 = v36;
  v39 = v38;
  v41 = v40;
  v86 = 0;
  v82 = 0;
  v42 = (uint64_t)v77;
  sub_23BE9F190(v74, (uint64_t)v77, &qword_256AE5168);
  v43 = v78;
  v70 = v79;
  v44 = v80;
  v45 = v81;
  v46 = v86;
  LODWORD(v72) = v86;
  LOBYTE(v9) = v82;
  v47 = v42;
  v48 = v73;
  sub_23BE9F190(v47, v73, &qword_256AE5168);
  v49 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5178);
  v50 = v48 + *(int *)(v49 + 48);
  *(_QWORD *)v50 = v43;
  *(_OWORD *)(v50 + 8) = v70;
  *(_QWORD *)(v50 + 24) = v44;
  *(_QWORD *)(v50 + 32) = v45;
  v51 = v48 + *(int *)(v49 + 64);
  *(_QWORD *)&v87 = v28;
  v53 = v66;
  v52 = v67;
  *((_QWORD *)&v87 + 1) = v66;
  *(_QWORD *)&v88 = v75;
  *((_QWORD *)&v88 + 1) = v67;
  *(_QWORD *)&v89 = KeyPath;
  v54 = v69;
  *((_QWORD *)&v89 + 1) = v69;
  LOBYTE(v90) = v46;
  *(_DWORD *)((char *)&v90 + 1) = *(_DWORD *)v85;
  DWORD1(v90) = *(_DWORD *)&v85[3];
  v55 = v68;
  *((_QWORD *)&v90 + 1) = v68;
  LOBYTE(v91) = 1;
  *(_DWORD *)((char *)&v91 + 1) = *(_DWORD *)v84;
  DWORD1(v91) = *(_DWORD *)&v84[3];
  *((_QWORD *)&v91 + 1) = v33;
  v56 = v65;
  *(_QWORD *)&v92 = v65;
  BYTE8(v92) = v29;
  HIDWORD(v92) = *(_DWORD *)&v83[3];
  *(_DWORD *)((char *)&v92 + 9) = *(_DWORD *)v83;
  *(_QWORD *)&v93 = v35;
  *((_QWORD *)&v93 + 1) = v37;
  *(_QWORD *)&v94 = v39;
  *((_QWORD *)&v94 + 1) = v41;
  v95 = v9;
  v57 = v93;
  v58 = v94;
  *(_BYTE *)(v51 + 128) = v9;
  *(_OWORD *)(v51 + 96) = v57;
  *(_OWORD *)(v51 + 112) = v58;
  v59 = v87;
  v60 = v88;
  v61 = v92;
  *(_OWORD *)(v51 + 64) = v91;
  *(_OWORD *)(v51 + 80) = v61;
  v62 = v90;
  *(_OWORD *)(v51 + 32) = v89;
  *(_OWORD *)(v51 + 48) = v62;
  *(_OWORD *)v51 = v59;
  *(_OWORD *)(v51 + 16) = v60;
  swift_bridgeObjectRetain();
  sub_23BF05BE0((uint64_t *)&v87);
  sub_23BE9F3A0(v74, &qword_256AE5168);
  v96[0] = v64;
  v96[1] = v53;
  v96[2] = v75;
  v96[3] = v52;
  v96[4] = KeyPath;
  v96[5] = v54;
  v97 = v72;
  *(_DWORD *)v98 = *(_DWORD *)v85;
  *(_DWORD *)&v98[3] = *(_DWORD *)&v85[3];
  v99 = v55;
  v100 = 1;
  *(_DWORD *)v101 = *(_DWORD *)v84;
  *(_DWORD *)&v101[3] = *(_DWORD *)&v84[3];
  v102 = v71;
  v103 = v56;
  v104 = v29;
  *(_DWORD *)&v105[3] = *(_DWORD *)&v83[3];
  *(_DWORD *)v105 = *(_DWORD *)v83;
  v106 = v35;
  v107 = v37;
  v108 = v39;
  v109 = v41;
  v110 = v9;
  sub_23BF05C48(v96);
  swift_bridgeObjectRelease();
  return sub_23BE9F3A0((uint64_t)v77, &qword_256AE5168);
}

uint64_t sub_23BF034C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t KeyPath;
  uint64_t (*v28)(char *, uint64_t);
  _QWORD v30[9];
  _QWORD v31[2];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38[2];
  _QWORD v39[2];
  _QWORD v40[3];

  v30[1] = a4;
  v7 = sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3C28);
  v8 = sub_23BFF862C();
  v9 = sub_23BFF8614();
  v10 = (uint64_t (*)(uint64_t))MEMORY[0x24BDED168];
  v40[0] = a3;
  v40[1] = MEMORY[0x24BDEEC40];
  v11 = MEMORY[0x24BDED308];
  v39[0] = MEMORY[0x242615198](MEMORY[0x24BDED308], v7, v40);
  v39[1] = sub_23BEA1F94(qword_256AE3C30, &qword_256AE3C28, MEMORY[0x24BDEB950]);
  v32 = v8;
  v33 = v9;
  v34 = MEMORY[0x242615198](v11, v8, v39);
  v35 = sub_23BEA1BB8(&qword_256AE5088, v10, MEMORY[0x24BDED160]);
  MEMORY[0x24261512C](255, &v32, MEMORY[0x24BDF2380], 0);
  sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE5090);
  swift_getTupleTypeMetadata2();
  v12 = sub_23BFF9220();
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v12);
  v13 = sub_23BFF9058();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)v30 - v18;
  v30[4] = a2;
  v30[5] = a3;
  v30[6] = a1;
  sub_23BFF8848();
  sub_23BFF904C();
  v20 = MEMORY[0x242615198](MEMORY[0x24BDF4498], v13);
  sub_23BEA72EC((uint64_t)v17, v13, (uint64_t)v19);
  v30[0] = *(_QWORD *)(v14 + 8);
  ((void (*)(char *, uint64_t))v30[0])(v17, v13);
  v22 = (uint64_t *)(a1 + *(int *)(type metadata accessor for TallCardView(0, a2, a3, v21) + 48));
  v23 = *v22;
  v24 = v22[1];
  v25 = v22[2];
  v26 = v22[3];
  KeyPath = swift_getKeyPath();
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, v19, v13);
  v32 = v23;
  v33 = v24;
  v34 = v25;
  v35 = v26;
  v36 = KeyPath;
  v37 = 0;
  v38[0] = (uint64_t)v17;
  v38[1] = (uint64_t)&v32;
  sub_23BEA1DC0(v23, v24, v25, v26);
  sub_23BEA1DC0(v23, v24, v25, v26);
  swift_retain();
  v31[0] = v13;
  v31[1] = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5098);
  v30[7] = v20;
  v30[8] = sub_23BF0595C();
  sub_23BF93EF0(v38, 2uLL, (uint64_t)v31);
  sub_23BEBF0A4(v23, v24, v25, v26);
  swift_release();
  v28 = (uint64_t (*)(char *, uint64_t))v30[0];
  ((void (*)(char *, uint64_t))v30[0])(v19, v13);
  sub_23BEBF0A4(v32, v33, v34, v35);
  swift_release();
  return v28(v17, v13);
}

uint64_t sub_23BF03840@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t OpaqueTypeConformance2;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  __n128 v50;
  _QWORD v52[2];
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  _QWORD v71[2];
  _OWORD v72[8];
  uint64_t v73[2];
  _QWORD v74[2];
  _QWORD v75[2];
  _QWORD v76[2];
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;

  v68 = a3;
  v5 = sub_23BFF8614();
  v67 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v66 = (char *)v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = sub_23BFF86BC();
  MEMORY[0x24BDAC7A8](v61);
  v59 = (char *)v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23BFF862C();
  v64 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v53 = (char *)v52 - v9;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3C28);
  v10 = sub_23BFF862C();
  v65 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v58 = (char *)v52 - v11;
  v76[0] = a2;
  v76[1] = MEMORY[0x24BDEEC40];
  v12 = MEMORY[0x24BDED308];
  v13 = MEMORY[0x242615198](MEMORY[0x24BDED308], v8, v76);
  v52[1] = v13;
  v14 = sub_23BEA1F94(qword_256AE3C30, &qword_256AE3C28, MEMORY[0x24BDEB950]);
  v75[0] = v13;
  v75[1] = v14;
  v15 = MEMORY[0x242615198](v12, v10, v75);
  v55 = v15;
  v54 = sub_23BEA1BB8(&qword_256AE5088, (uint64_t (*)(uint64_t))MEMORY[0x24BDED168], MEMORY[0x24BDED160]);
  *(_QWORD *)&v77 = v10;
  *((_QWORD *)&v77 + 1) = v5;
  v16 = v5;
  *(_QWORD *)&v78 = v15;
  *((_QWORD *)&v78 + 1) = v54;
  v17 = MEMORY[0x24261512C](0, &v77, MEMORY[0x24BDF2380], 0);
  v62 = *(_QWORD *)(v17 - 8);
  v57 = v17;
  MEMORY[0x24BDAC7A8](v17);
  v52[0] = (char *)v52 - v18;
  v19 = sub_23BFF862C();
  v63 = *(_QWORD *)(v19 - 8);
  v20 = MEMORY[0x24BDAC7A8](v19);
  v56 = (char *)v52 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v60 = (uint64_t)v52 - v22;
  type metadata accessor for TallCardView(0, a1, a2, v23);
  v24 = v53;
  sub_23BFF8CEC();
  v25 = v59;
  v26 = &v59[*(int *)(v61 + 20)];
  v27 = *MEMORY[0x24BDEEB68];
  v28 = sub_23BFF8854();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 104))(v26, v27, v28);
  __asm { FMOV            V0.2D, #8.0 }
  *v25 = _Q0;
  v34 = (uint64_t)v25;
  sub_23BEA1BB8(&qword_256AE3CB8, (uint64_t (*)(uint64_t))MEMORY[0x24BDED998], MEMORY[0x24BDED990]);
  v35 = v58;
  sub_23BFF8F44();
  sub_23BEC4004(v34);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v24, v8);
  v36 = v66;
  sub_23BFF871C();
  v37 = v52[0];
  v38 = v16;
  v40 = v54;
  v39 = v55;
  sub_23BFF8D1C();
  (*(void (**)(char *, uint64_t))(v67 + 8))(v36, v38);
  (*(void (**)(char *, uint64_t))(v65 + 8))(v35, v10);
  sub_23BFF91C0();
  *(_QWORD *)&v77 = v10;
  *((_QWORD *)&v77 + 1) = v38;
  *(_QWORD *)&v78 = v39;
  *((_QWORD *)&v78 + 1) = v40;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v42 = v57;
  v43 = (uint64_t)v56;
  sub_23BFF8EA8();
  (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v37, v42);
  v74[0] = OpaqueTypeConformance2;
  v74[1] = MEMORY[0x24BDEDBB8];
  v44 = MEMORY[0x242615198](MEMORY[0x24BDED308], v19, v74);
  v45 = v60;
  sub_23BEA72EC(v43, v19, v60);
  v46 = v63;
  v47 = *(void (**)(uint64_t, uint64_t))(v63 + 8);
  v47(v43, v19);
  v48 = sub_23BFF91C0();
  v50 = sub_23BF945D8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v77, 0.0, 1, 0.0, 1, v48, v49, 0, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v46 + 16))(v43, v45, v19, v50);
  v72[4] = v81;
  v72[5] = v82;
  v72[6] = v83;
  v72[7] = v84;
  v72[0] = v77;
  v72[1] = v78;
  v72[2] = v79;
  v72[3] = v80;
  v73[0] = v43;
  v73[1] = (uint64_t)v72;
  v71[0] = v19;
  v71[1] = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5090);
  v69 = v44;
  v70 = sub_23BF05A3C();
  sub_23BF93EF0(v73, 2uLL, (uint64_t)v71);
  v47(v45, v19);
  return ((uint64_t (*)(uint64_t, uint64_t))v47)(v43, v19);
}

BOOL _s15FitnessCanvasUI18TallCardViewLayoutV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  BOOL v5;

  result = 0;
  v5 = *(double *)a1 == *(double *)a2
    && *(double *)(a1 + 8) == *(double *)(a2 + 8)
    && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  if (v5
    && ((*(unsigned __int8 *)(a1 + 24) ^ *(unsigned __int8 *)(a2 + 24)) & 1) == 0
    && *(double *)(a1 + 32) == *(double *)(a2 + 32)
    && *(double *)(a1 + 40) == *(double *)(a2 + 40)
    && *(double *)(a1 + 48) == *(double *)(a2 + 48))
  {
    return *(_QWORD *)(a1 + 56) == *(_QWORD *)(a2 + 56);
  }
  return result;
}

unint64_t sub_23BF03E88()
{
  unint64_t result;

  result = qword_256AE4FD8;
  if (!qword_256AE4FD8)
  {
    result = MEMORY[0x242615198](&unk_23BFFF134, &type metadata for TallCardViewLayout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE4FD8);
  }
  return result;
}

unint64_t sub_23BF03ED0()
{
  unint64_t result;

  result = qword_256AE4FE8[0];
  if (!qword_256AE4FE8[0])
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for TallCardViewLayout, &type metadata for TallCardViewLayout);
    atomic_store(result, qword_256AE4FE8);
  }
  return result;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for TallCardViewLayout(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 24);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TallCardViewLayout(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 64) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for TallCardViewLayout()
{
  return &type metadata for TallCardViewLayout;
}

void sub_23BF03FE0()
{
  unint64_t v0;
  unint64_t v1;

  sub_23BEA9ED8();
  if (v0 <= 0x3F)
  {
    swift_checkMetadataState();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t *sub_23BF0409C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  _QWORD *v23;
  _QWORD *v24;
  _OWORD *v25;
  __int128 *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  unint64_t v30;
  unint64_t v31;
  void (*v32)(unint64_t, unint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;

  v6 = sub_23BFF85F0();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_QWORD *)(v7 + 64) <= 8uLL)
    v8 = 8;
  else
    v8 = *(_QWORD *)(v7 + 64);
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_DWORD *)(v10 + 80);
  v12 = v11 + 64;
  v13 = *(_QWORD *)(v10 + 64);
  v14 = v11 | *(_DWORD *)(v7 + 80) & 0xF8;
  if (v14 > 7
    || ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v10 + 80)) & 0x100000) != 0
    || ((v13 + ((v11 + 64 + (((v8 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)) & ~v11) + 47) & 0xFFFFFFFFFFFFFFF8)
     + 16 > 0x18)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + (((v14 | 7) + 16) & ~(unint64_t)(v14 | 7)));
  }
  else
  {
    v18 = *((unsigned __int8 *)a2 + v8);
    if (v18 >= 2)
    {
      if (v8 <= 3)
        v19 = v8;
      else
        v19 = 4;
      __asm { BR              X14 }
    }
    v20 = v8 + 1;
    v21 = ~v11;
    if (v18 == 1)
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
      v22 = 1;
    }
    else
    {
      *a1 = *a2;
      swift_retain();
      v22 = 0;
    }
    *((_BYTE *)a1 + v8) = v22;
    v23 = (_QWORD *)(((unint64_t)a1 + v20 + 7) & 0xFFFFFFFFFFFFFFF8);
    v24 = (_QWORD *)(((unint64_t)a2 + v20 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v23 = *v24;
    v23[1] = v24[1];
    v25 = (_OWORD *)(((unint64_t)v23 + 23) & 0xFFFFFFFFFFFFFFF8);
    v26 = (__int128 *)(((unint64_t)v24 + 23) & 0xFFFFFFFFFFFFFFF8);
    v27 = *v26;
    v28 = v26[1];
    v29 = v26[3];
    v25[2] = v26[2];
    v25[3] = v29;
    *v25 = v27;
    v25[1] = v28;
    v30 = ((unint64_t)v25 + v12) & v21;
    v31 = ((unint64_t)v26 + v12) & v21;
    v32 = *(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 16);
    swift_retain();
    v32(v30, v31, v9);
    v33 = v30 + v13;
    v34 = v31 + v13;
    v35 = (v33 + 7) & 0xFFFFFFFFFFFFFFF8;
    v36 = (v34 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)(v36 + 24) < 0xFFFFFFFFuLL)
    {
      v40 = *(_OWORD *)(v36 + 16);
      *(_OWORD *)v35 = *(_OWORD *)v36;
      *(_OWORD *)(v35 + 16) = v40;
    }
    else
    {
      v37 = *(_QWORD *)v36;
      v38 = *(_QWORD *)(v36 + 8);
      v39 = *(_BYTE *)(v36 + 16);
      sub_23BEA0EAC(*(_QWORD *)v36, v38, v39);
      *(_QWORD *)v35 = v37;
      *(_QWORD *)(v35 + 8) = v38;
      *(_BYTE *)(v35 + 16) = v39;
      *(_QWORD *)(v35 + 24) = *(_QWORD *)(v36 + 24);
      swift_bridgeObjectRetain();
    }
    *(_BYTE *)(v35 + 32) = *(_BYTE *)(v36 + 32);
    v41 = (_QWORD *)((v33 + 47) & 0xFFFFFFFFFFFFFFF8);
    v42 = (_QWORD *)((v34 + 47) & 0xFFFFFFFFFFFFFFF8);
    v43 = v42[1];
    *v41 = *v42;
    v41[1] = v43;
  }
  swift_retain();
  return a1;
}

uint64_t sub_23BF04338(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v4 = sub_23BFF85F0();
  v5 = *(_QWORD *)(v4 - 8);
  if (*(_QWORD *)(v5 + 64) <= 8uLL)
    v6 = 8;
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *(unsigned __int8 *)(a1 + v6);
  if (v7 >= 2)
  {
    if (v6 <= 3)
      v8 = v6;
    else
      v8 = 4;
    __asm { BR              X13 }
  }
  if (v7 == 1)
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  else
    swift_release();
  swift_release();
  v9 = (((a1 + v6 + 8) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v11 = (v9 + *(unsigned __int8 *)(v10 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  (*(void (**)(unint64_t))(v10 + 8))(v11);
  v12 = (v11 + *(_QWORD *)(v10 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v12 + 24) >= 0xFFFFFFFFuLL)
  {
    sub_23BEA0F64(*(_QWORD *)v12, *(_QWORD *)(v12 + 8), *(_BYTE *)(v12 + 16));
    swift_bridgeObjectRelease();
  }
  return swift_release();
}

_QWORD *sub_23BF04490(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;
  _QWORD *v13;
  _OWORD *v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;

  v6 = sub_23BFF85F0();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_QWORD *)(v7 + 64) <= 8uLL)
    v8 = 8;
  else
    v8 = *(_QWORD *)(v7 + 64);
  v9 = *((unsigned __int8 *)a2 + v8);
  if (v9 >= 2)
  {
    if (v8 <= 3)
      v10 = v8;
    else
      v10 = 4;
    __asm { BR              X13 }
  }
  if (v9 == 1)
  {
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(a1, a2, v6);
    v11 = 1;
  }
  else
  {
    *a1 = *a2;
    swift_retain();
    v11 = 0;
  }
  *((_BYTE *)a1 + v8) = v11;
  v12 = (_QWORD *)(((unint64_t)a1 + v8 + 8) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_QWORD *)(((unint64_t)a2 + v8 + 8) & 0xFFFFFFFFFFFFFFF8);
  *v12 = *v13;
  v12[1] = v13[1];
  v14 = (_OWORD *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8);
  v15 = (__int128 *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8);
  v16 = *v15;
  v17 = v15[1];
  v18 = v15[3];
  v14[2] = v15[2];
  v14[3] = v18;
  *v14 = v16;
  v14[1] = v17;
  v19 = *(_QWORD *)(a3 + 16);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(unsigned __int8 *)(v20 + 80);
  v22 = ((unint64_t)v14 + v21 + 64) & ~v21;
  v23 = ((unint64_t)v15 + v21 + 64) & ~v21;
  v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16);
  swift_retain();
  v24(v22, v23, v19);
  v25 = *(_QWORD *)(v20 + 64);
  v26 = v22 + v25;
  v27 = v23 + v25;
  v28 = (v22 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  v29 = (v23 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v29 + 24) < 0xFFFFFFFFuLL)
  {
    v33 = *(_OWORD *)(v29 + 16);
    *(_OWORD *)v28 = *(_OWORD *)v29;
    *(_OWORD *)(v28 + 16) = v33;
  }
  else
  {
    v30 = *(_QWORD *)v29;
    v31 = *(_QWORD *)(v29 + 8);
    v32 = *(_BYTE *)(v29 + 16);
    sub_23BEA0EAC(*(_QWORD *)v29, v31, v32);
    *(_QWORD *)v28 = v30;
    *(_QWORD *)(v28 + 8) = v31;
    *(_BYTE *)(v28 + 16) = v32;
    *(_QWORD *)(v28 + 24) = *(_QWORD *)(v29 + 24);
    swift_bridgeObjectRetain();
  }
  *(_BYTE *)(v28 + 32) = *(_BYTE *)(v29 + 32);
  v34 = (_QWORD *)((v26 + 47) & 0xFFFFFFFFFFFFFFF8);
  v35 = (_QWORD *)((v27 + 47) & 0xFFFFFFFFFFFFFFF8);
  v36 = v35[1];
  *v34 = *v35;
  v34[1] = v36;
  swift_retain();
  return a1;
}

_QWORD *sub_23BF046B4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;

  if (a1 != a2)
  {
    v6 = sub_23BFF85F0();
    v7 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v7 + 64) <= 8uLL)
      v8 = 8;
    else
      v8 = *(_QWORD *)(v7 + 64);
    v9 = *((unsigned __int8 *)a1 + v8);
    if (v9 >= 2)
    {
      if (v8 <= 3)
        v10 = v8;
      else
        v10 = 4;
      __asm { BR              X12 }
    }
    if (v9 == 1)
      (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(a1, v6);
    else
      swift_release();
    v11 = *((unsigned __int8 *)a2 + v8);
    if (v11 >= 2)
    {
      if (v8 <= 3)
        v12 = v8;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    if (v11 == 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(a1, a2, v6);
      *((_BYTE *)a1 + v8) = 1;
    }
    else
    {
      *a1 = *a2;
      *((_BYTE *)a1 + v8) = 0;
      swift_retain();
    }
  }
  v13 = *(_QWORD *)(*(_QWORD *)(sub_23BFF85F0() - 8) + 64);
  if (v13 <= 8)
    v13 = 8;
  v14 = v13 + 8;
  v15 = (_QWORD *)(((unint64_t)a1 + v14) & 0xFFFFFFFFFFFFFFF8);
  v16 = (_QWORD *)(((unint64_t)a2 + v14) & 0xFFFFFFFFFFFFFFF8);
  *v15 = *v16;
  v15[1] = v16[1];
  swift_retain();
  swift_release();
  v17 = ((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8;
  v18 = ((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_QWORD *)(v17 + 8) = *(_QWORD *)(v18 + 8);
  *(_QWORD *)(v17 + 16) = *(_QWORD *)(v18 + 16);
  *(_BYTE *)(v17 + 24) = *(_BYTE *)(v18 + 24);
  *(_QWORD *)(v17 + 32) = *(_QWORD *)(v18 + 32);
  *(_QWORD *)(v17 + 40) = *(_QWORD *)(v18 + 40);
  *(_QWORD *)(v17 + 48) = *(_QWORD *)(v18 + 48);
  *(_QWORD *)(v17 + 56) = *(_QWORD *)(v18 + 56);
  v19 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  v21 = (v20 + 64 + v17) & ~v20;
  v22 = (v20 + 64 + v18) & ~v20;
  (*(void (**)(uint64_t, uint64_t))(v19 + 24))(v21, v22);
  v23 = *(_QWORD *)(v19 + 64);
  v24 = v21 + v23;
  v25 = v22 + v23;
  v26 = (v21 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  v27 = (v22 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  v28 = *(_QWORD *)(v27 + 24);
  if (*(_QWORD *)(v26 + 24) < 0xFFFFFFFFuLL)
  {
    if (v28 >= 0xFFFFFFFF)
    {
      v35 = *(_QWORD *)v27;
      v36 = *(_QWORD *)(v27 + 8);
      v37 = *(_BYTE *)(v27 + 16);
      sub_23BEA0EAC(*(_QWORD *)v27, v36, v37);
      *(_QWORD *)v26 = v35;
      *(_QWORD *)(v26 + 8) = v36;
      *(_BYTE *)(v26 + 16) = v37;
      *(_QWORD *)(v26 + 24) = *(_QWORD *)(v27 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_30;
    }
LABEL_29:
    v38 = *(_OWORD *)(v27 + 16);
    *(_OWORD *)v26 = *(_OWORD *)v27;
    *(_OWORD *)(v26 + 16) = v38;
    goto LABEL_30;
  }
  if (v28 < 0xFFFFFFFF)
  {
    sub_23BEA0F64(*(_QWORD *)v26, *(_QWORD *)(v26 + 8), *(_BYTE *)(v26 + 16));
    swift_bridgeObjectRelease();
    goto LABEL_29;
  }
  v29 = *(_QWORD *)v27;
  v30 = *(_QWORD *)(v27 + 8);
  v31 = *(_BYTE *)(v27 + 16);
  sub_23BEA0EAC(*(_QWORD *)v27, v30, v31);
  v32 = *(_QWORD *)v26;
  v33 = *(_QWORD *)(v26 + 8);
  v34 = *(_BYTE *)(v26 + 16);
  *(_QWORD *)v26 = v29;
  *(_QWORD *)(v26 + 8) = v30;
  *(_BYTE *)(v26 + 16) = v31;
  sub_23BEA0F64(v32, v33, v34);
  *(_QWORD *)(v26 + 24) = *(_QWORD *)(v27 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_30:
  *(_BYTE *)(v26 + 32) = *(_BYTE *)(v27 + 32);
  v39 = (_QWORD *)((v24 + 47) & 0xFFFFFFFFFFFFFFF8);
  v40 = (_QWORD *)((v25 + 47) & 0xFFFFFFFFFFFFFFF8);
  v41 = v40[1];
  *v39 = *v40;
  v39[1] = v41;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *sub_23BF04A6C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  char v11;
  _OWORD *v12;
  _OWORD *v13;
  _OWORD *v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  __int128 v28;

  v6 = sub_23BFF85F0();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_QWORD *)(v7 + 64) <= 8uLL)
    v8 = 8;
  else
    v8 = *(_QWORD *)(v7 + 64);
  v9 = *((unsigned __int8 *)a2 + v8);
  if (v9 >= 2)
  {
    if (v8 <= 3)
      v10 = v8;
    else
      v10 = 4;
    __asm { BR              X13 }
  }
  if (v9 == 1)
  {
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 32))(a1, a2, v6);
    v11 = 1;
  }
  else
  {
    v11 = 0;
    *a1 = *a2;
  }
  *((_BYTE *)a1 + v8) = v11;
  v12 = (_OWORD *)(((unint64_t)a1 + v8 + 8) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_OWORD *)(((unint64_t)a2 + v8 + 8) & 0xFFFFFFFFFFFFFFF8);
  *v12 = *v13;
  v14 = (_OWORD *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8);
  v15 = (__int128 *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8);
  v16 = *v15;
  v17 = v15[1];
  v18 = v15[3];
  v14[2] = v15[2];
  v14[3] = v18;
  *v14 = v16;
  v14[1] = v17;
  v19 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  v21 = ((unint64_t)v14 + v20 + 64) & ~v20;
  v22 = ((unint64_t)v15 + v20 + 64) & ~v20;
  (*(void (**)(uint64_t, uint64_t))(v19 + 32))(v21, v22);
  v23 = *(_QWORD *)(v19 + 64);
  v24 = v21 + v23;
  v25 = v22 + v23;
  v26 = (v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  v27 = (v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  v28 = *(_OWORD *)(v27 + 16);
  *(_OWORD *)v26 = *(_OWORD *)v27;
  *(_OWORD *)(v26 + 16) = v28;
  *(_BYTE *)(v26 + 32) = *(_BYTE *)(v27 + 32);
  *(_OWORD *)((v24 + 47) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v25 + 47) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *sub_23BF04C20(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  __int128 v33;

  if (a1 != a2)
  {
    v6 = sub_23BFF85F0();
    v7 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v7 + 64) <= 8uLL)
      v8 = 8;
    else
      v8 = *(_QWORD *)(v7 + 64);
    v9 = *((unsigned __int8 *)a1 + v8);
    if (v9 >= 2)
    {
      if (v8 <= 3)
        v10 = v8;
      else
        v10 = 4;
      __asm { BR              X12 }
    }
    if (v9 == 1)
      (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(a1, v6);
    else
      swift_release();
    v11 = *((unsigned __int8 *)a2 + v8);
    if (v11 >= 2)
    {
      if (v8 <= 3)
        v12 = v8;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    if (v11 == 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 32))(a1, a2, v6);
      v13 = 1;
    }
    else
    {
      v13 = 0;
      *a1 = *a2;
    }
    *((_BYTE *)a1 + v8) = v13;
  }
  v14 = *(_QWORD *)(*(_QWORD *)(sub_23BFF85F0() - 8) + 64);
  if (v14 <= 8)
    v14 = 8;
  v15 = v14 + 8;
  v16 = (_QWORD *)(((unint64_t)a1 + v15) & 0xFFFFFFFFFFFFFFF8);
  v17 = (_QWORD *)(((unint64_t)a2 + v15) & 0xFFFFFFFFFFFFFFF8);
  *v16 = *v17;
  v16[1] = v17[1];
  swift_release();
  v18 = ((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFFFF8;
  v19 = ((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *(_QWORD *)(v18 + 8) = *(_QWORD *)(v19 + 8);
  *(_QWORD *)(v18 + 16) = *(_QWORD *)(v19 + 16);
  *(_BYTE *)(v18 + 24) = *(_BYTE *)(v19 + 24);
  *(_QWORD *)(v18 + 32) = *(_QWORD *)(v19 + 32);
  *(_QWORD *)(v18 + 40) = *(_QWORD *)(v19 + 40);
  *(_QWORD *)(v18 + 48) = *(_QWORD *)(v19 + 48);
  *(_QWORD *)(v18 + 56) = *(_QWORD *)(v19 + 56);
  v20 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v21 = *(unsigned __int8 *)(v20 + 80);
  v22 = (v21 + 64 + v18) & ~v21;
  v23 = (v21 + 64 + v19) & ~v21;
  (*(void (**)(uint64_t, uint64_t))(v20 + 40))(v22, v23);
  v24 = *(_QWORD *)(v20 + 64);
  v25 = v22 + v24;
  v26 = v23 + v24;
  v27 = (v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  v28 = (v26 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v27 + 24) < 0xFFFFFFFFuLL)
    goto LABEL_28;
  if (*(_QWORD *)(v28 + 24) < 0xFFFFFFFFuLL)
  {
    sub_23BEA0F64(*(_QWORD *)v27, *(_QWORD *)(v27 + 8), *(_BYTE *)(v27 + 16));
    swift_bridgeObjectRelease();
LABEL_28:
    v33 = *(_OWORD *)(v28 + 16);
    *(_OWORD *)v27 = *(_OWORD *)v28;
    *(_OWORD *)(v27 + 16) = v33;
    goto LABEL_29;
  }
  v29 = *(_BYTE *)(v28 + 16);
  v30 = *(_QWORD *)v27;
  v31 = *(_QWORD *)(v27 + 8);
  v32 = *(_BYTE *)(v27 + 16);
  *(_OWORD *)v27 = *(_OWORD *)v28;
  *(_BYTE *)(v27 + 16) = v29;
  sub_23BEA0F64(v30, v31, v32);
  *(_QWORD *)(v27 + 24) = *(_QWORD *)(v28 + 24);
  swift_bridgeObjectRelease();
LABEL_29:
  *(_BYTE *)(v27 + 32) = *(_BYTE *)(v28 + 32);
  *(_OWORD *)((v25 + 47) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v26 + 47) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t sub_23BF04F68(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v17;
  unint64_t v18;

  v6 = sub_23BFF85F0();
  if (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) <= 8uLL)
    v7 = 8;
  else
    v7 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(_DWORD *)(v8 + 84);
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = *(_DWORD *)(v8 + 84);
  if (!a2)
    return 0;
  v11 = *(unsigned __int8 *)(v8 + 80);
  v12 = *(_QWORD *)(v8 + 64) + 47;
  if (v10 < a2)
  {
    if (((((v12 + ((v11 + (((v7 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 64) & ~v11)) & 0xFFFFFFFFFFFFFFF8)
         + 16) & 0xFFFFFFF8) != 0)
      v13 = 2;
    else
      v13 = a2 - v10 + 1;
    if (v13 >= 0x10000)
      v14 = 4;
    else
      v14 = 2;
    if (v13 < 0x100)
      v14 = 1;
    if (v13 >= 2)
      v15 = v14;
    else
      v15 = 0;
    __asm { BR              X17 }
  }
  v17 = (((((a1 + v7 + 8) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + v11 + 64) & ~v11;
  if (v9 >= 0x7FFFFFFF)
    return (*(uint64_t (**)(unint64_t))(v8 + 48))(v17);
  v18 = *(_QWORD *)((v12 + v17) & 0xFFFFFFFFFFFFF8);
  if (v18 >= 0xFFFFFFFF)
    LODWORD(v18) = -1;
  return (v18 + 1);
}

void sub_23BF050FC(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;

  v8 = sub_23BFF85F0();
  v9 = 8;
  if (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) > 8uLL)
    v9 = *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64);
  v10 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v10 + 84) <= 0x7FFFFFFFu)
    v11 = 0x7FFFFFFF;
  else
    v11 = *(_DWORD *)(v10 + 84);
  if (v11 >= a3)
  {
    v14 = 0;
    if (a2 <= v11)
      goto LABEL_19;
  }
  else
  {
    if (((*(_DWORD *)(v10 + 64)
         + 47
         + ((*(unsigned __int8 *)(v10 + 80) + (((v9 & 0xFFFFFFF8) + 31) & 0xFFFFFFF8) + 64) & ~*(unsigned __int8 *)(v10 + 80))) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v12 = a3 - v11 + 1;
    else
      v12 = 2;
    if (v12 >= 0x10000)
      v13 = 4;
    else
      v13 = 2;
    if (v12 < 0x100)
      v13 = 1;
    if (v12 >= 2)
      v14 = v13;
    else
      v14 = 0;
    if (a2 <= v11)
LABEL_19:
      __asm { BR              X15 }
  }
  if (((*(_DWORD *)(v10 + 64)
       + 47
       + ((*(unsigned __int8 *)(v10 + 80) + (((v9 & 0xFFFFFFF8) + 31) & 0xFFFFFFF8) + 64) & ~*(unsigned __int8 *)(v10 + 80))) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v15 = ~v11 + a2;
    bzero(a1, ((*(_QWORD *)(v10 + 64)+ 47+ ((*(unsigned __int8 *)(v10 + 80) + (((v9 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 64) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))) & 0xFFFFFFFFFFFFFFF8)+ 16);
    *a1 = v15;
  }
  __asm { BR              X10 }
}

void sub_23BF05238()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x23BF052CCLL);
}

void sub_23BF05240()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = 0;
  if (v0)
    JUMPOUT(0x23BF05248);
  JUMPOUT(0x23BF052CCLL);
}

void sub_23BF052A4()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x23BF052CCLL);
}

void sub_23BF052AC()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x23BF052CCLL);
}

uint64_t sub_23BF052B4@<X0>(unsigned int a1@<W2>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_WORD *)(v7 + v8) = 0;
  if (!(_DWORD)v6)
    JUMPOUT(0x23BF052CCLL);
  if (a1 < 0x7FFFFFFF)
  {
    if ((v6 & 0x80000000) == 0)
      JUMPOUT(0x23BF052C8);
    JUMPOUT(0x23BF052C0);
  }
  return (*(uint64_t (**)(unint64_t, uint64_t))(a2 + 56))((((((v7 + v3 + 8) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + v4 + 64) & v5, v6);
}

uint64_t type metadata accessor for TallCardView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TallCardView);
}

uint64_t storeEnumTagSinglePayload for TallCardViewLayout.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_23BF0533C + 4 * byte_23BFFEEB3[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_23BF05370 + 4 * byte_23BFFEEAE[v4]))();
}

uint64_t sub_23BF05370(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BF05378(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BF05380);
  return result;
}

uint64_t sub_23BF0538C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BF05394);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_23BF05398(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BF053A0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TallCardViewLayout.CodingKeys()
{
  return &type metadata for TallCardViewLayout.CodingKeys;
}

unint64_t sub_23BF053C0()
{
  unint64_t result;

  result = qword_256AE5070;
  if (!qword_256AE5070)
  {
    result = MEMORY[0x242615198](&unk_23BFFF0BC, &type metadata for TallCardViewLayout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE5070);
  }
  return result;
}

uint64_t sub_23BF05404()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_23BF0543C()
{
  unint64_t result;

  result = qword_256AE5078;
  if (!qword_256AE5078)
  {
    result = MEMORY[0x242615198](&unk_23BFFF02C, &type metadata for TallCardViewLayout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE5078);
  }
  return result;
}

unint64_t sub_23BF05484()
{
  unint64_t result;

  result = qword_256AE5080;
  if (!qword_256AE5080)
  {
    result = MEMORY[0x242615198](&unk_23BFFF054, &type metadata for TallCardViewLayout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE5080);
  }
  return result;
}

uint64_t sub_23BF054C8(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000012 && a2 == 0x800000023C01E950 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000023C01EE60 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000023C01EE80 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000023C01EEA0 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000023C01EEC0 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x800000023C01EEE0 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6E694C656C746974 && a2 == 0xEE0074696D694C65)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v5 = sub_23BFF9964();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

unint64_t sub_23BF05790()
{
  unint64_t result;

  result = qword_256AE50B0;
  if (!qword_256AE50B0)
  {
    result = MEMORY[0x242615198](&unk_23C000268, &type metadata for ActionCardButtonStyle);
    atomic_store(result, (unint64_t *)&qword_256AE50B0);
  }
  return result;
}

uint64_t sub_23BF057D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for TallCardView(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80);
  v8 = (v7 + 32) & ~v7;
  v9 = v4 + v8;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3728);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v10 = sub_23BFF85F0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v4 + v8, v10);
  }
  else
  {
    swift_release();
  }
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v9 + *(int *)(v6 + 44), v5);
  v11 = v9 + *(int *)(v6 + 48);
  if (*(_QWORD *)(v11 + 24))
  {
    sub_23BEA0F64(*(_QWORD *)v11, *(_QWORD *)(v11 + 8), *(_BYTE *)(v11 + 16));
    swift_bridgeObjectRelease();
  }
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23BF058E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = type metadata accessor for TallCardView(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80);
  return (*(uint64_t (**)(void))(v4 + *(int *)(v5 + 56) + ((v6 + 32) & ~v6)))();
}

uint64_t sub_23BF05930@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_23BF01A38(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_23BF0593C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_23BF034C8(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_23BF05948@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23BF03840(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

unint64_t sub_23BF0595C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AE50B8;
  if (!qword_256AE50B8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE5098);
    v2[0] = sub_23BF059E0();
    v2[1] = sub_23BEA1F94(&qword_256AE50D0, &qword_256AE50D8, MEMORY[0x24BDF1028]);
    result = MEMORY[0x242615198](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AE50B8);
  }
  return result;
}

unint64_t sub_23BF059E0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_256AE50C0;
  if (!qword_256AE50C0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE50C8);
    v2 = MEMORY[0x24BDF1F80];
    result = MEMORY[0x242615198](MEMORY[0x24BDF5578], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_256AE50C0);
  }
  return result;
}

unint64_t sub_23BF05A3C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AE50E0;
  if (!qword_256AE50E0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE5090);
    v2[0] = MEMORY[0x24BDF4610];
    v2[1] = MEMORY[0x24BDEDBB8];
    result = MEMORY[0x242615198](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AE50E0);
  }
  return result;
}

uint64_t sub_23BF05AA0@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_23BF029FC(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_23BF05AAC()
{
  return sub_23BF05AC8(&qword_256AE50F8, &qword_256AE5100, (uint64_t (*)(void))sub_23BF05B34);
}

uint64_t sub_23BF05AC8(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t result;
  uint64_t v6;
  _QWORD v7[2];

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v7[0] = a3();
    v7[1] = MEMORY[0x24BDEDBB8];
    result = MEMORY[0x242615198](MEMORY[0x24BDED308], v6, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23BF05B34()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AE5108;
  if (!qword_256AE5108)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE5110);
    v2[0] = sub_23BEA1F94(&qword_256AE5118, &qword_256AE5120, MEMORY[0x24BDEB9A8]);
    v2[1] = sub_23BEA1F94(&qword_256AE5128, &qword_256AE5130, MEMORY[0x24BDF5428]);
    result = MEMORY[0x242615198](MEMORY[0x24BDEC550], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AE5108);
  }
  return result;
}

uint64_t *sub_23BF05BE0(uint64_t *a1)
{
  sub_23BEA1DC0(*a1, a1[1], a1[2], a1[3]);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t *sub_23BF05C48(uint64_t *a1)
{
  sub_23BEBF0A4(*a1, a1[1], a1[2], a1[3]);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

uint64_t sub_23BF05CB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v27;
  _QWORD v28[2];
  _QWORD v29[2];
  _QWORD v30[2];
  _QWORD v31[2];
  uint64_t v32;
  ValueMetadata *v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD v36[2];
  _QWORD v37[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3C28);
  v3 = sub_23BFF862C();
  v4 = sub_23BFF8614();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x24BDED168];
  v37[0] = v1;
  v37[1] = MEMORY[0x24BDEEC40];
  v6 = MEMORY[0x24BDED308];
  v7 = MEMORY[0x242615198](MEMORY[0x24BDED308], v2, v37);
  v27 = sub_23BEA1F94(qword_256AE3C30, &qword_256AE3C28, MEMORY[0x24BDEB950]);
  v36[0] = v7;
  v36[1] = v27;
  v8 = v6;
  v9 = MEMORY[0x242615198](v6, v3, v36);
  v10 = sub_23BEA1BB8(&qword_256AE5088, v5, MEMORY[0x24BDED160]);
  v32 = v3;
  v33 = (ValueMetadata *)v4;
  v34 = v9;
  v35 = v10;
  v11 = MEMORY[0x24BDF2380];
  MEMORY[0x24261512C](255, &v32, MEMORY[0x24BDF2380], 0);
  sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE5090);
  swift_getTupleTypeMetadata2();
  v12 = sub_23BFF9220();
  v13 = MEMORY[0x24BDF5428];
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v12);
  sub_23BFF9058();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE5098);
  swift_getTupleTypeMetadata2();
  v14 = sub_23BFF9220();
  MEMORY[0x242615198](v13, v14);
  v15 = sub_23BFF90AC();
  v32 = v2;
  v33 = (ValueMetadata *)v4;
  v34 = v7;
  v35 = v10;
  MEMORY[0x24261512C](255, &v32, v11, 0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE50A0);
  v16 = sub_23BFF862C();
  v32 = v2;
  v33 = (ValueMetadata *)v4;
  v34 = v7;
  v35 = v10;
  v31[0] = swift_getOpaqueTypeConformance2();
  v31[1] = sub_23BEA1F94(&qword_256AE50A8, &qword_256AE50A0, MEMORY[0x24BDEDC10]);
  v17 = MEMORY[0x242615198](v6, v16, v31);
  v32 = v16;
  v33 = (ValueMetadata *)v4;
  v34 = v17;
  v35 = v10;
  MEMORY[0x24261512C](255, &v32, v11, 0);
  v18 = sub_23BFF862C();
  v19 = sub_23BFF8968();
  v20 = MEMORY[0x242615198](MEMORY[0x24BDF4700], v15);
  v32 = v16;
  v33 = (ValueMetadata *)v4;
  v34 = v17;
  v35 = v10;
  v30[0] = swift_getOpaqueTypeConformance2();
  v30[1] = v27;
  v29[0] = v20;
  v29[1] = MEMORY[0x242615198](v8, v18, v30);
  MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v19, v29);
  v21 = sub_23BFF9040();
  v22 = MEMORY[0x242615198](MEMORY[0x24BDF43B0], v21);
  v23 = sub_23BF05790();
  v32 = v21;
  v33 = &type metadata for ActionCardButtonStyle;
  v34 = v22;
  v35 = v23;
  MEMORY[0x24261512C](255, &v32, MEMORY[0x24BDF22E0], 0);
  sub_23BFF8ADC();
  v24 = (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088];
  v25 = sub_23BFF862C();
  v32 = v21;
  v33 = &type metadata for ActionCardButtonStyle;
  v34 = v22;
  v35 = v23;
  v28[0] = swift_getOpaqueTypeConformance2();
  v28[1] = sub_23BEA1BB8((unint64_t *)&qword_256AE3908, v24, MEMORY[0x24BDF1078]);
  return MEMORY[0x242615198](v8, v25, v28);
}

void sub_23BF060B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;

  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *))(v2 + 16))((char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  v3 = (char *)sub_23BF06140 + 4 * word_23BFFF270[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_23BF06140(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *TupleTypeMetadata;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  MEMORY[0x24BDAC7A8](a1);
  v4 = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(v3 - 152) = &type metadata for ActionCardViewLayout;
  *(_QWORD *)(v3 - 144) = v4;
  *(_QWORD *)(v3 - 136) = &type metadata for ActionCardViewStyle;
  v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3618);
  *(_QWORD *)(v3 - 128) = v5;
  *(_QWORD *)(v3 - 120) = v5;
  v6 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v3 - 112) = v5;
  *(_QWORD *)(v3 - 104) = v6;
  *(_QWORD *)(v3 - 96) = sub_23BFF96A0();
  TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  v8 = v1 + TupleTypeMetadata[12];
  v9 = v1 + TupleTypeMetadata[20];
  v10 = v1 + TupleTypeMetadata[24];
  v11 = v1 + TupleTypeMetadata[28];
  v12 = v1 + TupleTypeMetadata[32];
  v13 = v1 + TupleTypeMetadata[36];
  v14 = sub_23BFF96A0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v12, v6);
  sub_23BEA5A90(v11);
  sub_23BEA5A90(v10);
  sub_23BEA5A90(v9);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v8, v4);
  return 0x61436E6F69746361;
}

void sub_23BF0715C()
{
  uint64_t v0;
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 32) - 8) + 8))(v0);
  JUMPOUT(0x23BF07138);
}

void sub_23BF07190()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t TupleTypeMetadata3;
  uint64_t v4;

  v2 = *(_QWORD *)(v1 + 24);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3618);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  v4 = v0 + *(int *)(TupleTypeMetadata3 + 48);
  sub_23BEA5A90(v0 + *(int *)(TupleTypeMetadata3 + 64));
  sub_23BEA5A90(v4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v0, v2);
  JUMPOUT(0x23BF07138);
}

void VerticalGridView.init(header:items:footer:metrics:contentMargins:densityFactor:dynamicTypeSize:sizeClass:artworkViewBuilder:actionButtonViewBuilder:contextMenuViewModifierBuilder:customItemViewBuilder:sectionHeaderSubtitleViewBuilder:onItemSelectedWithIdentifier:onItemAppearedAtIndex:onItemDisappearedAtIndex:)()
{
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CanvasSectionHeader();
}

void sub_23BF07390(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;

  v28 = sub_23BFF96A0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v26, a24, v28);
  STACK[0x200] = a26;
  STACK[0x208] = a14;
  STACK[0x210] = v27;
  type metadata accessor for VerticalGridView();
}

uint64_t sub_23BF07434(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t result;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  char v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  *(_QWORD *)(v1 + a1[53]) = v24;
  *(_BYTE *)(v1 + a1[54]) = v20;
  v7 = v1 + a1[55];
  v8 = sub_23BFF96A0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v7, v27, v8);
  v9 = v1 + a1[56];
  *(_OWORD *)v9 = v21;
  *(_QWORD *)(v9 + 16) = v4;
  *(_QWORD *)(v9 + 24) = v5;
  v10 = (_QWORD *)(v1 + a1[61]);
  *v10 = v25;
  v10[1] = v26;
  v11 = (_QWORD *)(v1 + a1[57]);
  *v11 = v23;
  v11[1] = v3;
  v11[2] = v22;
  *(_BYTE *)(v1 + a1[58]) = v32;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(v1 + a1[59], v35, v2);
  v13 = (_QWORD *)(v1 + a1[60]);
  *v13 = v28;
  v13[1] = v29;
  v14 = (_QWORD *)(v1 + a1[62]);
  *v14 = v30;
  v14[1] = v31;
  v15 = (_QWORD *)(v1 + a1[64]);
  *v15 = v33;
  v15[1] = v34;
  v16 = (_QWORD *)(v1 + a1[63]);
  *v16 = v36;
  v16[1] = v37;
  v17 = (_QWORD *)(v1 + a1[65]);
  *v17 = v38;
  v17[1] = v39;
  v18 = (_QWORD *)(v1 + a1[66]);
  *v18 = v40;
  v18[1] = v41;
  v19 = (_QWORD *)(v1 + a1[67]);
  *v19 = v42;
  v19[1] = v43;
  return result;
}

void type metadata accessor for VerticalGridView()
{
  JUMPOUT(0x2426150F0);
}

void sub_23BF075A8(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedConformanceWitness;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v15 = a2;
  v14 = a1;
  v12 = a4;
  v19 = a3[6];
  v5 = v19;
  v6 = sub_23BFF96A0();
  MEMORY[0x24BDAC7A8](v6);
  v11 = (char *)&v9 - v7;
  v18 = a3[7];
  v8 = v18;
  v17 = a3[25];
  v13 = a3[16];
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v16 = a3[19];
  v20 = v5;
  v21 = v8;
  v22 = AssociatedConformanceWitness;
  v23 = v16;
  type metadata accessor for CanvasContextMenu();
}

void sub_23BF07674(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v9[68] = a1;
  v9[42] = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9[39] = (char *)&a9 - v13;
  v14 = v11[14];
  v9[70] = v14;
  v9[58] = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v9[57] = (char *)&a9 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(v10 - 8);
  v9[56] = v17;
  v9[75] = *(_QWORD *)(v17 + 64);
  MEMORY[0x24BDAC7A8](v18);
  v9[55] = (char *)&a9 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(v11 - 1);
  v9[54] = v20;
  v9[74] = *(_QWORD *)(v20 + 64);
  MEMORY[0x24BDAC7A8](v21);
  v9[53] = (char *)&a9 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9[84] = v11;
  v23 = v11[3];
  v25 = v11[17];
  v24 = v11[18];
  *(_QWORD *)(v12 - 224) = v11[5];
  *(_QWORD *)(v12 - 216) = v23;
  *(_QWORD *)(v12 - 208) = v23;
  *(_QWORD *)(v12 - 200) = v24;
  *(_QWORD *)(v12 - 192) = v25;
  *(_QWORD *)(v12 - 184) = v25;
  type metadata accessor for ActionCardView();
}

void sub_23BF0777C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1[66] = a1;
  v8 = MEMORY[0x242615198](&unk_23C005608, a1);
  v1[65] = v8;
  *(_QWORD *)(v6 - 224) = a1;
  *(_QWORD *)(v6 - 216) = v8;
  v1[81] = MEMORY[0x24261512C](255, v6 - 224, MEMORY[0x24BDF3948], 0);
  v1[52] = sub_23BFF8ADC();
  v9 = (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088];
  v10 = sub_23BFF862C();
  v11 = sub_23BFF862C();
  v1[64] = v11;
  v12 = sub_23BEA1BB8((unint64_t *)&qword_256AE3908, v9, MEMORY[0x24BDF1078]);
  v1[73] = v12;
  *(_QWORD *)(v6 - 104) = v3;
  *(_QWORD *)(v6 - 96) = v12;
  v13 = MEMORY[0x24BDED308];
  v14 = MEMORY[0x242615198](MEMORY[0x24BDED308], v10, v6 - 104);
  v15 = MEMORY[0x24BDEEC40];
  *(_QWORD *)(v6 - 120) = v14;
  *(_QWORD *)(v6 - 112) = v15;
  v16 = MEMORY[0x242615198](v13, v11, v6 - 120);
  v1[63] = v16;
  *(_QWORD *)(v6 - 224) = v11;
  *(_QWORD *)(v6 - 216) = v16;
  v17 = MEMORY[0x24BDF3100];
  MEMORY[0x24261512C](255, v6 - 224, MEMORY[0x24BDF3100], 0);
  v18 = sub_23BFF862C();
  v1[59] = v18;
  v19 = MEMORY[0x24BDEBEE0];
  *(_QWORD *)(v6 - 136) = v14;
  *(_QWORD *)(v6 - 128) = v19;
  v20 = MEMORY[0x242615198](v13, v18, v6 - 136);
  v1[46] = v20;
  *(_QWORD *)(v6 - 224) = v18;
  *(_QWORD *)(v6 - 216) = v20;
  MEMORY[0x24261512C](255, v6 - 224, v17, 0);
  v1[44] = sub_23BFF8968();
  v1[60] = sub_23BFF8FD4();
  v1[45] = sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3910);
  v1[61] = sub_23BFF8968();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3918);
  v1[62] = sub_23BFF8968();
  v1[23] = sub_23BFF8968();
  v21 = (_QWORD *)v1[84];
  v22 = v21[8];
  v1[76] = v22;
  v23 = v21[20];
  v1[80] = v23;
  v24 = v21[24];
  v1[81] = v24;
  *(_QWORD *)(v6 - 224) = v2;
  *(_QWORD *)(v6 - 216) = v5;
  *(_QWORD *)(v6 - 208) = v5;
  *(_QWORD *)(v6 - 200) = v22;
  *(_QWORD *)(v6 - 192) = v1[70];
  *(_QWORD *)(v6 - 184) = v3;
  *(_QWORD *)(v6 - 176) = v4;
  *(_QWORD *)(v6 - 168) = v4;
  *(_QWORD *)(v6 - 160) = v23;
  *(_QWORD *)(v6 - 152) = v24;
  type metadata accessor for FullWidthStageView();
}

void sub_23BF079AC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1[32] = a1;
  v8 = MEMORY[0x242615198](&unk_23C0077B8, a1);
  v1[31] = v8;
  *(_QWORD *)(v6 - 224) = a1;
  *(_QWORD *)(v6 - 216) = v8;
  v9 = MEMORY[0x24BDF3948];
  MEMORY[0x24261512C](255, v6 - 224, MEMORY[0x24BDF3948], 0);
  v1[78] = v5;
  v1[79] = v4;
  v11 = type metadata accessor for InfoActionCardView(255, v5, v4, v10);
  v1[30] = v11;
  v12 = MEMORY[0x242615198](&unk_23C007F20, v11);
  v1[29] = v12;
  *(_QWORD *)(v6 - 224) = v11;
  *(_QWORD *)(v6 - 216) = v12;
  MEMORY[0x24261512C](255, v6 - 224, v9, 0);
  v1[28] = sub_23BFF8968();
  sub_23BFF8968();
  v14 = type metadata accessor for LargeBrickView(255, v2, v3, v13);
  v1[27] = v14;
  v15 = MEMORY[0x242615198](&protocol conformance descriptor for LargeBrickView<A>, v14);
  v1[26] = v15;
  *(_QWORD *)(v6 - 224) = v14;
  *(_QWORD *)(v6 - 216) = v15;
  MEMORY[0x24261512C](255, v6 - 224, v9, 0);
  v17 = type metadata accessor for DynamicBrickView(255, v2, v3, v16);
  v1[25] = v17;
  v18 = MEMORY[0x242615198](&protocol conformance descriptor for DynamicBrickView<A>, v17);
  v1[24] = v18;
  *(_QWORD *)(v6 - 224) = v17;
  *(_QWORD *)(v6 - 216) = v18;
  MEMORY[0x24261512C](255, v6 - 224, v9, 0);
  v1[16] = sub_23BFF8968();
  v20 = type metadata accessor for MonogramVerticalStackView(255, v2, v3, v19);
  v1[22] = v20;
  v21 = MEMORY[0x242615198](&unk_23BFFA1F4, v20);
  v1[21] = v21;
  *(_QWORD *)(v6 - 224) = v20;
  *(_QWORD *)(v6 - 216) = v21;
  MEMORY[0x24261512C](255, v6 - 224, v9, 0);
  v1[19] = sub_23BFF8968();
  v1[20] = sub_23BFF8968();
  sub_23BFF8968();
  v23 = type metadata accessor for StandardCardView(255, v2, v3, v22);
  v1[18] = v23;
  v24 = MEMORY[0x242615198](&unk_23C007BD0, v23);
  v1[17] = v24;
  *(_QWORD *)(v6 - 224) = v23;
  *(_QWORD *)(v6 - 216) = v24;
  MEMORY[0x24261512C](255, v6 - 224, v9, 0);
  *(_QWORD *)(v6 - 224) = v2;
  *(_QWORD *)(v6 - 216) = v5;
  *(_QWORD *)(v6 - 208) = v3;
  *(_QWORD *)(v6 - 200) = v4;
  type metadata accessor for StandardHorizontalStackView();
}

void sub_23BF07BE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t OpaqueTypeConformance2;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __n128 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void (*v132)(char *, uint64_t, uint64_t);
  uint64_t v133;
  _OWORD *v134;
  __int128 v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;

  v9[15] = a1;
  v17 = MEMORY[0x242615198](&unk_23C0008E8, a1);
  v9[14] = v17;
  *(_QWORD *)(v15 - 224) = a1;
  *(_QWORD *)(v15 - 216) = v17;
  MEMORY[0x24261512C](255, v15 - 224, v13, 0);
  v9[2] = sub_23BFF8968();
  v19 = type metadata accessor for StandardVerticalStackView(255, v10, v11, v18);
  v9[13] = v19;
  v20 = MEMORY[0x242615198](&unk_23C0073B8, v19);
  v9[12] = v20;
  *(_QWORD *)(v15 - 224) = v19;
  *(_QWORD *)(v15 - 216) = v20;
  MEMORY[0x24261512C](255, v15 - 224, v13, 0);
  v22 = type metadata accessor for TallCardView(255, v10, v11, v21);
  v23 = MEMORY[0x242615198](&unk_23BFFF0E4, v22);
  v9[11] = v23;
  *(_QWORD *)(v15 - 224) = v22;
  *(_QWORD *)(v15 - 216) = v23;
  MEMORY[0x24261512C](255, v15 - 224, v13, 0);
  v9[10] = sub_23BFF8968();
  *v9 = sub_23BFF8968();
  v9[67] = v10;
  v9[77] = v11;
  v25 = type metadata accessor for VerticalStackCard(255, v10, v11, v24);
  v26 = MEMORY[0x242615198](&unk_23C0000E0, v25);
  v9[9] = v26;
  *(_QWORD *)(v15 - 224) = v25;
  *(_QWORD *)(v15 - 216) = v26;
  MEMORY[0x24261512C](255, v15 - 224, v13, 0);
  v9[1] = sub_23BFF8968();
  v28 = type metadata accessor for WideBrickView(255, v10, v11, v27);
  v29 = MEMORY[0x242615198](&protocol conformance descriptor for WideBrickView<A>, v28);
  v9[5] = v29;
  *(_QWORD *)(v15 - 224) = v28;
  *(_QWORD *)(v15 - 216) = v29;
  MEMORY[0x24261512C](255, v15 - 224, v13, 0);
  v9[3] = sub_23BFF8968();
  v9[4] = sub_23BFF8968();
  v9[6] = sub_23BFF8968();
  v9[7] = sub_23BFF8FD4();
  v9[8] = sub_23BFF862C();
  v30 = sub_23BFF8968();
  v9[33] = *(_QWORD *)(v30 - 8);
  v9[50] = v30;
  MEMORY[0x24BDAC7A8](v30);
  v9[48] = (uint64_t)&a9 - v31;
  v32 = sub_23BFF862C();
  v9[36] = *(_QWORD *)(v32 - 8);
  v9[51] = v32;
  MEMORY[0x24BDAC7A8](v32);
  v9[49] = (uint64_t)&a9 - v33;
  v34 = sub_23BFF862C();
  v9[37] = *(_QWORD *)(v34 - 8);
  v9[52] = v34;
  MEMORY[0x24BDAC7A8](v34);
  v9[34] = (uint64_t)&a9 - v35;
  v36 = sub_23BFF862C();
  v9[47] = v36;
  v9[38] = *(_QWORD *)(v36 - 8);
  MEMORY[0x24BDAC7A8](v36);
  v9[35] = (uint64_t)&a9 - v37;
  v38 = v9[65];
  *(_QWORD *)(v15 - 224) = v9[66];
  *(_QWORD *)(v15 - 216) = v38;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v40 = v9[63];
  *(_QWORD *)(v15 - 224) = v9[64];
  *(_QWORD *)(v15 - 216) = v40;
  v41 = swift_getOpaqueTypeConformance2();
  v42 = v9[46];
  *(_QWORD *)(v15 - 224) = v9[59];
  *(_QWORD *)(v15 - 216) = v42;
  v43 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v15 - 240) = v41;
  *(_QWORD *)(v15 - 232) = v43;
  v44 = MEMORY[0x24BDEF3E0];
  *(_QWORD *)(v15 - 248) = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v9[44], v15 - 240);
  v45 = MEMORY[0x242615198](MEMORY[0x24BDF3F50], v9[60], v15 - 248);
  v46 = MEMORY[0x24BDECC60];
  v9[189] = v45;
  v9[190] = v46;
  v47 = MEMORY[0x242615198](MEMORY[0x24BDED308], v9[45], v9 + 189);
  v48 = sub_23BEA1F94(&qword_256AE3920, &qword_256AE3910, MEMORY[0x24BDF43B0]);
  v9[187] = v47;
  v9[188] = v48;
  v49 = MEMORY[0x242615198](v44, v9[61], v9 + 187);
  v50 = sub_23BEA1F94(&qword_256AE3928, &qword_256AE3918, MEMORY[0x24BDF4700]);
  v9[185] = v49;
  v9[186] = v50;
  v51 = MEMORY[0x242615198](v44, v9[62], v9 + 185);
  v9[183] = OpaqueTypeConformance2;
  v9[184] = v51;
  v52 = MEMORY[0x242615198](v44, v9[23], v9 + 183);
  v53 = v9[31];
  *(_QWORD *)(v15 - 224) = v9[32];
  *(_QWORD *)(v15 - 216) = v53;
  v54 = swift_getOpaqueTypeConformance2();
  v55 = v9[29];
  *(_QWORD *)(v15 - 224) = v9[30];
  *(_QWORD *)(v15 - 216) = v55;
  v56 = swift_getOpaqueTypeConformance2();
  v9[181] = v54;
  v9[182] = v56;
  v57 = MEMORY[0x242615198](v44, v9[28], v9 + 181);
  v9[179] = v52;
  v9[180] = v57;
  v58 = MEMORY[0x242615198](v44, v12, v9 + 179);
  v59 = v9[26];
  *(_QWORD *)(v15 - 224) = v9[27];
  *(_QWORD *)(v15 - 216) = v59;
  v60 = swift_getOpaqueTypeConformance2();
  v61 = v9[24];
  *(_QWORD *)(v15 - 224) = v9[25];
  *(_QWORD *)(v15 - 216) = v61;
  v62 = swift_getOpaqueTypeConformance2();
  v9[177] = v60;
  v9[178] = v62;
  v63 = MEMORY[0x242615198](v44, v9[16], v9 + 177);
  v64 = v9[21];
  *(_QWORD *)(v15 - 224) = v9[22];
  *(_QWORD *)(v15 - 216) = v64;
  v9[175] = swift_getOpaqueTypeConformance2();
  v9[176] = v62;
  v65 = MEMORY[0x242615198](v44, v9[19], v9 + 175);
  v9[173] = v63;
  v9[174] = v65;
  v66 = MEMORY[0x242615198](v44, v9[20], v9 + 173);
  v9[171] = v58;
  v9[172] = v66;
  v67 = MEMORY[0x242615198](v44, v14, v9 + 171);
  v68 = v9[17];
  *(_QWORD *)(v15 - 224) = v9[18];
  *(_QWORD *)(v15 - 216) = v68;
  v69 = swift_getOpaqueTypeConformance2();
  v70 = v9[14];
  *(_QWORD *)(v15 - 224) = v9[15];
  *(_QWORD *)(v15 - 216) = v70;
  v71 = swift_getOpaqueTypeConformance2();
  v9[169] = v69;
  v9[170] = v71;
  v72 = MEMORY[0x242615198](v44, v9[2], v9 + 169);
  v73 = v9[12];
  *(_QWORD *)(v15 - 224) = v9[13];
  *(_QWORD *)(v15 - 216) = v73;
  v74 = swift_getOpaqueTypeConformance2();
  v75 = v9[11];
  *(_QWORD *)(v15 - 224) = v22;
  *(_QWORD *)(v15 - 216) = v75;
  v76 = swift_getOpaqueTypeConformance2();
  v9[167] = v74;
  v9[168] = v76;
  v77 = MEMORY[0x242615198](v44, v9[10], v9 + 167);
  v9[165] = v72;
  v9[166] = v77;
  v78 = MEMORY[0x242615198](v44, *v9, v9 + 165);
  v79 = v9[9];
  *(_QWORD *)(v15 - 224) = v25;
  *(_QWORD *)(v15 - 216) = v79;
  v9[163] = swift_getOpaqueTypeConformance2();
  v9[164] = v9[80];
  v80 = MEMORY[0x242615198](v44, v9[1], v9 + 163);
  v81 = v9[5];
  *(_QWORD *)(v15 - 224) = v28;
  *(_QWORD *)(v15 - 216) = v81;
  v82 = swift_getOpaqueTypeConformance2();
  v9[161] = v80;
  v9[162] = v82;
  v83 = MEMORY[0x242615198](v44, v9[3], v9 + 161);
  v9[159] = v78;
  v9[160] = v83;
  v84 = MEMORY[0x242615198](v44, v9[4], v9 + 159);
  v9[157] = v67;
  v9[158] = v84;
  v9[156] = MEMORY[0x242615198](v44, v9[6], v9 + 157);
  v9[154] = MEMORY[0x242615198](MEMORY[0x24BDF3F50], v9[7], v9 + 156);
  v9[155] = v9[73];
  v85 = MEMORY[0x24BDED308];
  v86 = MEMORY[0x242615198](MEMORY[0x24BDED308], v9[8], v9 + 154);
  v9[152] = MEMORY[0x24BDF5138];
  v9[153] = v86;
  v87 = MEMORY[0x242615198](v44, v9[50], v9 + 152);
  v9[25] = v87;
  v88 = MEMORY[0x24BDF0910];
  v9[150] = v87;
  v9[151] = v88;
  v89 = MEMORY[0x242615198](v85, v9[51], v9 + 150);
  v9[26] = v89;
  v9[148] = v89;
  v9[149] = v88;
  v90 = MEMORY[0x242615198](v85, v9[52], v9 + 148);
  v9[28] = v90;
  v91 = MEMORY[0x242615198](&unk_23BFFEE18, v9[68]);
  v9[146] = v90;
  v9[147] = v91;
  v92 = v9[47];
  v93 = MEMORY[0x242615198](v85, v92, v9 + 146);
  v9[29] = v93;
  *(_QWORD *)(v15 - 224) = v92;
  *(_QWORD *)(v15 - 216) = v93;
  MEMORY[0x24261512C](255, v15 - 224, MEMORY[0x24BEC6710], 0);
  v94 = sub_23BFF8968();
  v95 = *(_QWORD *)(v94 - 8);
  v9[31] = v94;
  v9[32] = v95;
  MEMORY[0x24BDAC7A8](v94);
  v9[27] = (uint64_t)&a9 - ((v96 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = MEMORY[0x24BDAC7A8](v97);
  v9[30] = (uint64_t)&a9 - v99;
  v101 = v9[53];
  v100 = v9[54];
  v102 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v100 + 16);
  v9[46] = (uint64_t)v102;
  v103 = v9[84];
  v102(v101, v9[82], v103, v98);
  v104 = v9[56];
  v105 = v9[69];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v104 + 16))(v9[55], v9[71], v105);
  v106 = *(unsigned __int8 *)(v100 + 80);
  v107 = (v106 + 208) & ~v106;
  v108 = v107 + v9[74];
  v9[24] = v108;
  v109 = v107;
  v9[44] = v107;
  v9[45] = v106 | 7;
  v110 = (v108 + *(unsigned __int8 *)(v104 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v104 + 80);
  v111 = (char *)swift_allocObject();
  v112 = *(_QWORD *)(v103 + 16);
  v9[75] = v112;
  v113 = v9[78];
  *((_QWORD *)v111 + 2) = v112;
  *((_QWORD *)v111 + 3) = v113;
  v114 = *(_QWORD *)(v103 + 32);
  v9[62] = v114;
  v115 = v9[67];
  *((_QWORD *)v111 + 4) = v114;
  *((_QWORD *)v111 + 5) = v115;
  v116 = v9[86];
  *((_QWORD *)v111 + 6) = v9[87];
  *((_QWORD *)v111 + 7) = v116;
  v117 = *(_QWORD *)(v103 + 72);
  v118 = *(_QWORD *)(v103 + 80);
  v9[74] = v117;
  *((_QWORD *)v111 + 8) = v9[76];
  *((_QWORD *)v111 + 9) = v117;
  v119 = *(_QWORD *)(v103 + 88);
  v120 = *(_QWORD *)(v103 + 96);
  v9[66] = v119;
  v9[65] = v120;
  *((_QWORD *)v111 + 10) = v118;
  *((_QWORD *)v111 + 11) = v119;
  v121 = *(_QWORD *)(v103 + 104);
  v9[73] = v121;
  *((_QWORD *)v111 + 12) = v120;
  *((_QWORD *)v111 + 13) = v121;
  v122 = *(_QWORD *)(v103 + 120);
  v9[60] = v122;
  v9[61] = v118;
  v123 = v9[70];
  *((_QWORD *)v111 + 14) = v123;
  *((_QWORD *)v111 + 15) = v122;
  v124 = v105;
  v125 = v9[79];
  *((_QWORD *)v111 + 16) = v105;
  *((_QWORD *)v111 + 17) = v125;
  v126 = v9[83];
  *((_QWORD *)v111 + 18) = v9[77];
  *((_QWORD *)v111 + 19) = v126;
  v127 = *(_QWORD *)(v103 + 168);
  v128 = *(_QWORD *)(v103 + 176);
  v9[63] = v128;
  v9[64] = v127;
  v129 = v9[80];
  *((_QWORD *)v111 + 20) = v129;
  *((_QWORD *)v111 + 21) = v127;
  v130 = *(_QWORD *)(v103 + 184);
  v9[59] = v130;
  *((_QWORD *)v111 + 22) = v128;
  *((_QWORD *)v111 + 23) = v130;
  v131 = v9[85];
  *((_QWORD *)v111 + 24) = v9[81];
  *((_QWORD *)v111 + 25) = v131;
  v132 = *(void (**)(char *, uint64_t, uint64_t))(v9[54] + 32);
  v9[54] = (uint64_t)v132;
  v132(&v111[v109], v101, v103);
  (*(void (**)(char *, uint64_t, uint64_t))(v9[56] + 32))(&v111[v110], v9[55], v105);
  v133 = v9[82];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9[58] + 16))(v9[57], v133 + *(int *)(v103 + 236), v123);
  v134 = (_OWORD *)(v133 + *(int *)(v103 + 224));
  v135 = v134[1];
  *(_OWORD *)(v15 - 224) = *v134;
  *(_OWORD *)(v15 - 208) = v135;
  v136 = (uint64_t *)(v133 + *(int *)(v103 + 240));
  v137 = v133;
  v138 = *v136;
  v9[55] = v136[1];
  v9[56] = v138;
  v139 = v9[75];
  v9[118] = v139;
  v140 = v9[78];
  v9[119] = v140;
  v142 = v9[61];
  v141 = v9[62];
  v9[120] = v141;
  v143 = v9[67];
  v9[121] = v143;
  v144 = v9[87];
  v9[122] = v144;
  v145 = v9[86];
  v9[123] = v145;
  v146 = v9[76];
  v9[124] = v146;
  v147 = v9[74];
  v9[125] = v147;
  v9[126] = v142;
  v148 = v9[66];
  v9[127] = v148;
  v149 = v9[65];
  v9[128] = v149;
  v150 = v9[73];
  v9[129] = v150;
  v9[130] = v123;
  v151 = v9[60];
  v9[131] = v151;
  v9[132] = v124;
  v152 = v9[79];
  v9[133] = v152;
  v153 = v9[77];
  v9[134] = v153;
  v154 = v9[83];
  v9[135] = v154;
  v155 = v129;
  v9[136] = v129;
  v157 = v9[63];
  v156 = v9[64];
  v9[137] = v156;
  v9[138] = v157;
  v158 = v9[59];
  v9[139] = v158;
  v159 = v9[81];
  v9[140] = v159;
  v160 = v9[85];
  v9[141] = v160;
  v9[142] = v137;
  v161 = v9[72];
  v9[143] = v161;
  v9[90] = v139;
  v9[91] = v140;
  v9[92] = v141;
  v9[93] = v143;
  v9[94] = v144;
  v9[95] = v145;
  v9[96] = v146;
  v9[97] = v147;
  v9[98] = v142;
  v9[99] = v148;
  v9[100] = v149;
  v9[101] = v150;
  v9[102] = v123;
  v9[103] = v151;
  v9[104] = v124;
  v9[105] = v152;
  v9[106] = v153;
  v9[107] = v154;
  v9[108] = v155;
  v9[109] = v156;
  v9[110] = v157;
  v9[111] = v158;
  v9[112] = v159;
  v9[113] = v160;
  v9[114] = v137;
  v9[115] = v161;
  sub_23BEAF590((uint64_t)sub_23BF148CC, (uint64_t)v111, v9[57], v15 - 224, v9[56], v9[55], (uint64_t)sub_23BF14A20, (uint64_t)(v9 + 116), v9[48], (uint64_t)sub_23BF14A2C, (uint64_t)(v9 + 88), v124, v123, v143, v146, v140, v160, v159, v153,
    v155,
    v152);
}

void sub_23BF08774()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  uint64_t v47;

  swift_release();
  v7 = v2;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 464) + 8))(v5, v2);
  v8 = *(_QWORD *)(v0 + 424);
  v9 = *(_QWORD *)(v0 + 672);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 368))(v8, v3, v9);
  v10 = (*(_QWORD *)(v0 + 192) + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v0 + 456) = v10;
  *(_QWORD *)(v0 + 464) = v10 + 8;
  v11 = (_QWORD *)swift_allocObject();
  v12 = *(_QWORD *)(v0 + 624);
  v11[2] = *(_QWORD *)(v0 + 600);
  v11[3] = v12;
  v13 = *(_QWORD *)(v0 + 496);
  v11[4] = v13;
  v11[5] = v4;
  v14 = *(_QWORD *)(v0 + 688);
  v11[6] = *(_QWORD *)(v0 + 696);
  v11[7] = v14;
  v15 = *(_QWORD *)(v0 + 592);
  v11[8] = v1;
  v11[9] = v15;
  v16 = *(_QWORD *)(v0 + 488);
  v17 = *(_QWORD *)(v0 + 528);
  v11[10] = v16;
  v11[11] = v17;
  v18 = *(_QWORD *)(v0 + 584);
  v11[12] = *(_QWORD *)(v0 + 520);
  v11[13] = v18;
  v11[14] = v7;
  v19 = *(_QWORD *)(v0 + 472);
  v20 = *(_QWORD *)(v0 + 480);
  v11[15] = v20;
  v11[16] = v6;
  v21 = *(_QWORD *)(v0 + 616);
  v11[17] = *(_QWORD *)(v0 + 632);
  v11[18] = v21;
  v22 = *(_QWORD *)(v0 + 640);
  v11[19] = *(_QWORD *)(v0 + 664);
  v11[20] = v22;
  v23 = *(_QWORD *)(v0 + 504);
  v11[21] = *(_QWORD *)(v0 + 512);
  v11[22] = v23;
  v11[23] = v19;
  v24 = (char *)v11 + *(_QWORD *)(v0 + 352);
  v25 = *(_QWORD *)(v0 + 680);
  v11[24] = *(_QWORD *)(v0 + 648);
  v11[25] = v25;
  (*(void (**)(char *, uint64_t, uint64_t))(v0 + 432))(v24, v8, v9);
  v26 = *(_QWORD *)(v0 + 576);
  *(_QWORD *)((char *)v11 + v10) = v26;
  v27 = *(_QWORD *)(v0 + 400);
  v28 = *(_QWORD *)(v0 + 384);
  sub_23BFF8F14();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 264) + 8))(v28, v27);
  v29 = *(_QWORD *)(v0 + 672);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 368))(v8, *(_QWORD *)(v0 + 656), v29);
  v30 = (_QWORD *)swift_allocObject();
  v31 = *(_QWORD *)(v0 + 624);
  v30[2] = *(_QWORD *)(v0 + 600);
  v30[3] = v31;
  v32 = *(_QWORD *)(v0 + 536);
  v30[4] = v13;
  v30[5] = v32;
  v33 = *(_QWORD *)(v0 + 688);
  v30[6] = *(_QWORD *)(v0 + 696);
  v30[7] = v33;
  v34 = *(_QWORD *)(v0 + 592);
  v30[8] = *(_QWORD *)(v0 + 608);
  v30[9] = v34;
  v35 = *(_QWORD *)(v0 + 528);
  v30[10] = v16;
  v30[11] = v35;
  v36 = *(_QWORD *)(v0 + 584);
  v30[12] = *(_QWORD *)(v0 + 520);
  v30[13] = v36;
  v30[14] = *(_QWORD *)(v0 + 560);
  v30[15] = v20;
  v37 = *(_QWORD *)(v0 + 552);
  v38 = *(_QWORD *)(v0 + 632);
  v30[16] = v37;
  v30[17] = v38;
  v39 = *(_QWORD *)(v0 + 664);
  v30[18] = *(_QWORD *)(v0 + 616);
  v30[19] = v39;
  v40 = *(_QWORD *)(v0 + 512);
  v30[20] = *(_QWORD *)(v0 + 640);
  v30[21] = v40;
  v30[22] = *(_QWORD *)(v0 + 504);
  v30[23] = v19;
  v41 = (char *)v30 + *(_QWORD *)(v0 + 352);
  v42 = *(_QWORD *)(v0 + 680);
  v30[24] = *(_QWORD *)(v0 + 648);
  v30[25] = v42;
  (*(void (**)(char *, uint64_t, uint64_t))(v0 + 432))(v41, v8, v29);
  *(_QWORD *)((char *)v30 + *(_QWORD *)(v0 + 456)) = v26;
  v43 = *(_QWORD *)(v0 + 408);
  v44 = *(_QWORD *)(v0 + 392);
  sub_23BFF8D34();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 288) + 8))(v44, v43);
  v45 = v42;
  v46 = *(void (**)(uint64_t, uint64_t))(v42 + 168);
  v47 = *(_QWORD *)(v0 + 328);
  v46(v37, v45);
  sub_23BF006B4(v47, *(_QWORD *)(v0 + 312));
}

uint64_t sub_23BF08A20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);

  swift_retain();
  v6 = *(_QWORD *)(v0 + 280);
  v7 = *(_QWORD *)(v0 + 416);
  v8 = *(_QWORD *)(v0 + 544);
  MEMORY[0x2426142A4](v3, v7, v8, *(_QWORD *)(v0 + 224));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 336) + 8))(v3, v8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 296) + 8))(v4, v7);
  v9 = v2 + *(int *)(*(_QWORD *)(v0 + 672) + 220);
  v10 = *(_QWORD *)(v0 + 232);
  v11 = *(_QWORD *)(v0 + 216);
  v12 = v1;
  v13 = *(_QWORD *)(v0 + 376);
  sub_23BF58654(v12, v9, *(_QWORD *)(v0 + 576), v13, v11, *(_QWORD *)(v0 + 488), *(_QWORD *)(v0 + 584), *(_QWORD *)(v0 + 480), *(char **)(v0 + 552), v10, *(_QWORD *)(v0 + 472), *(_QWORD *)(v0 + 680));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 304) + 8))(v6, v13);
  *(_QWORD *)(v5 - 224) = v13;
  *(_QWORD *)(v5 - 216) = v10;
  *(_QWORD *)(v0 + 1152) = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v0 + 1160) = v10;
  v14 = *(_QWORD *)(v0 + 248);
  MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v14, v0 + 1152);
  v15 = *(_QWORD *)(v0 + 240);
  sub_23BEA72EC(v11, v14, v15);
  v16 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 256) + 8);
  v16(v11, v14);
  sub_23BEA5C0C(v15, v14, *(_QWORD *)(v0 + 344));
  return ((uint64_t (*)(uint64_t, uint64_t))v16)(v15, v14);
}

void sub_23BF08BB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  __n128 v15;
  uint64_t v16;
  __int128 v17;

  v15 = MEMORY[0x24BDAC7A8](a15);
  *(_OWORD *)(v16 + 136) = v17;
  *(__n128 *)(v16 + 152) = v15;
  type metadata accessor for VerticalGridView();
}

uint64_t sub_23BF08C74(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t);

  v7 = *(void (**)(uint64_t))(v5 + *(int *)(result + 260));
  if (v7)
  {
    (*(void (**)(uint64_t, uint64_t))(v1 + 152))(v3, v1);
    v7(v4);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v4, v2);
  }
  return result;
}

void sub_23BF08CD8(uint64_t a1)
{
  uint64_t v1;
  __n128 v2;
  uint64_t v3;
  __int128 v4;

  MEMORY[0x24BDAC7A8](a1);
  v2 = MEMORY[0x24BDAC7A8]((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)(v3 + 152) = v4;
  *(__n128 *)(v3 + 168) = v2;
  type metadata accessor for VerticalGridView();
}

uint64_t sub_23BF08DB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  (*(void (**)(uint64_t, uint64_t, _QWORD))(v4 + *(int *)(a1 + 248)))(v3, v7, 0);
  sub_23BEA72EC(v6, v2, v5);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v2);
  sub_23BEA5C0C(v5, v2, v1);
  return ((uint64_t (*)(uint64_t, uint64_t))v9)(v5, v2);
}

void sub_23BF08E3C(uint64_t a1)
{
  uint64_t v1;

  MEMORY[0x24BDAC7A8](a1);
  MEMORY[0x24BDAC7A8]((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for VerticalGridView();
}

uint64_t sub_23BF08F20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + *(int *)(a1 + 252)))(v3, v7, 0);
  sub_23BEA72EC(v6, v1, v4);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v1);
  sub_23BEA5C0C(v4, v1, v2);
  return ((uint64_t (*)(uint64_t, uint64_t))v9)(v4, v1);
}

void VerticalGridView.body.getter()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3528);
  type metadata accessor for CanvasSectionHeaderView();
}

void sub_23BF09010(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1[65] = a1;
  sub_23BFF8A4C();
  v1[66] = sub_23BFF862C();
  v1[67] = sub_23BFF8968();
  v1[64] = sub_23BFF96A0();
  v6 = v2[25];
  v1[76] = v6;
  v1[61] = *(_QWORD *)(v6 + 32);
  v1[77] = v2[16];
  v1[60] = swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  v1[59] = sub_23BFF94C0();
  v7 = v2[5];
  v8 = v2[18];
  *(_QWORD *)(v5 - 216) = v7;
  *(_QWORD *)(v5 - 208) = v4;
  v1[74] = v7;
  *(_QWORD *)(v5 - 200) = v4;
  *(_QWORD *)(v5 - 192) = v8;
  *(_QWORD *)(v5 - 184) = v3;
  *(_QWORD *)(v5 - 176) = v3;
  type metadata accessor for ActionCardView();
}

void sub_23BF090DC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1[51] = a1;
  v8 = MEMORY[0x242615198](&unk_23C005608, a1);
  v1[50] = v8;
  *(_QWORD *)(v6 - 216) = a1;
  *(_QWORD *)(v6 - 208) = v8;
  v1[75] = MEMORY[0x24261512C](255, v6 - 216, MEMORY[0x24BDF3948], 0);
  v1[54] = sub_23BFF8ADC();
  v9 = (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088];
  v10 = sub_23BFF862C();
  v11 = sub_23BFF862C();
  v1[49] = v11;
  v12 = sub_23BEA1BB8((unint64_t *)&qword_256AE3908, v9, MEMORY[0x24BDF1078]);
  v1[58] = v12;
  *(_QWORD *)(v6 - 104) = v2;
  *(_QWORD *)(v6 - 96) = v12;
  v13 = MEMORY[0x24BDED308];
  v14 = MEMORY[0x242615198](MEMORY[0x24BDED308], v10, v6 - 104);
  v15 = MEMORY[0x24BDEEC40];
  *(_QWORD *)(v6 - 120) = v14;
  *(_QWORD *)(v6 - 112) = v15;
  v16 = MEMORY[0x242615198](v13, v11, v6 - 120);
  v1[48] = v16;
  *(_QWORD *)(v6 - 216) = v11;
  *(_QWORD *)(v6 - 208) = v16;
  v17 = MEMORY[0x24BDF3100];
  MEMORY[0x24261512C](255, v6 - 216, MEMORY[0x24BDF3100], 0);
  v18 = sub_23BFF862C();
  v1[44] = v18;
  v19 = MEMORY[0x24BDEBEE0];
  *(_QWORD *)(v6 - 136) = v14;
  *(_QWORD *)(v6 - 128) = v19;
  v20 = MEMORY[0x242615198](v13, v18, v6 - 136);
  v1[43] = v20;
  *(_QWORD *)(v6 - 216) = v18;
  *(_QWORD *)(v6 - 208) = v20;
  MEMORY[0x24261512C](255, v6 - 216, v17, 0);
  v1[41] = sub_23BFF8968();
  v1[45] = sub_23BFF8FD4();
  v1[42] = sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3910);
  v1[46] = sub_23BFF8968();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3918);
  v1[47] = sub_23BFF8968();
  v1[31] = sub_23BFF8968();
  v1[72] = v3;
  v21 = v3[8];
  v1[75] = v21;
  v22 = v3[14];
  v23 = v3[20];
  v1[73] = v23;
  v24 = v3[24];
  v1[62] = v22;
  v1[63] = v24;
  *(_QWORD *)(v6 - 216) = v1[74];
  *(_QWORD *)(v6 - 208) = v5;
  *(_QWORD *)(v6 - 200) = v5;
  *(_QWORD *)(v6 - 192) = v21;
  *(_QWORD *)(v6 - 184) = v22;
  *(_QWORD *)(v6 - 176) = v2;
  *(_QWORD *)(v6 - 168) = v4;
  *(_QWORD *)(v6 - 160) = v4;
  *(_QWORD *)(v6 - 152) = v23;
  *(_QWORD *)(v6 - 144) = v24;
  type metadata accessor for FullWidthStageView();
}

void sub_23BF09318(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1[40] = a1;
  v9 = MEMORY[0x242615198](&unk_23C0077B8, a1);
  v1[39] = v9;
  *(_QWORD *)(v7 - 216) = a1;
  *(_QWORD *)(v7 - 208) = v9;
  v10 = MEMORY[0x24BDF3948];
  MEMORY[0x24261512C](255, v7 - 216, MEMORY[0x24BDF3948], 0);
  v11 = v4;
  v1[56] = v4;
  v1[57] = v6;
  v13 = type metadata accessor for InfoActionCardView(255, v4, v6, v12);
  v1[38] = v13;
  v14 = MEMORY[0x242615198](&unk_23C007F20, v13);
  v1[37] = v14;
  *(_QWORD *)(v7 - 216) = v13;
  *(_QWORD *)(v7 - 208) = v14;
  MEMORY[0x24261512C](255, v7 - 216, v10, 0);
  v1[36] = sub_23BFF8968();
  v1[15] = sub_23BFF8968();
  v15 = v5;
  v17 = type metadata accessor for LargeBrickView(255, v5, v2, v16);
  v1[35] = v17;
  v18 = MEMORY[0x242615198](&protocol conformance descriptor for LargeBrickView<A>, v17);
  v1[34] = v18;
  *(_QWORD *)(v7 - 216) = v17;
  *(_QWORD *)(v7 - 208) = v18;
  v19 = v10;
  MEMORY[0x24261512C](255, v7 - 216, v10, 0);
  v21 = type metadata accessor for DynamicBrickView(255, v15, v2, v20);
  v1[33] = v21;
  v22 = MEMORY[0x242615198](&protocol conformance descriptor for DynamicBrickView<A>, v21);
  v1[32] = v22;
  *(_QWORD *)(v7 - 216) = v21;
  *(_QWORD *)(v7 - 208) = v22;
  MEMORY[0x24261512C](255, v7 - 216, v10, 0);
  v1[24] = sub_23BFF8968();
  v24 = type metadata accessor for MonogramVerticalStackView(255, v15, v2, v23);
  v1[30] = v24;
  v25 = MEMORY[0x242615198](&unk_23BFFA1F4, v24);
  v1[29] = v25;
  *(_QWORD *)(v7 - 216) = v24;
  *(_QWORD *)(v7 - 208) = v25;
  MEMORY[0x24261512C](255, v7 - 216, v19, 0);
  v1[27] = sub_23BFF8968();
  v1[28] = sub_23BFF8968();
  sub_23BFF8968();
  v27 = type metadata accessor for StandardCardView(255, v15, v2, v26);
  v1[25] = v27;
  v28 = MEMORY[0x242615198](&unk_23C007BD0, v27);
  v1[26] = v28;
  *(_QWORD *)(v7 - 216) = v27;
  *(_QWORD *)(v7 - 208) = v28;
  MEMORY[0x24261512C](255, v7 - 216, v19, 0);
  *(_QWORD *)(v7 - 216) = v15;
  *(_QWORD *)(v7 - 208) = v11;
  *(_QWORD *)(v7 - 200) = v2;
  *(_QWORD *)(v7 - 192) = v3;
  type metadata accessor for StandardHorizontalStackView();
}

void sub_23BF09560(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t AssociatedConformanceWitness;
  uint64_t v25;

  v1[23] = a1;
  v7 = MEMORY[0x242615198](&unk_23C0008E8, a1);
  v1[22] = v7;
  *(_QWORD *)(v5 - 216) = a1;
  *(_QWORD *)(v5 - 208) = v7;
  v8 = v2;
  MEMORY[0x24261512C](255, v5 - 216, v2, 0);
  v1[2] = sub_23BFF8968();
  v10 = type metadata accessor for StandardVerticalStackView(255, v4, v3, v9);
  v1[21] = v10;
  v11 = MEMORY[0x242615198](&unk_23C0073B8, v10);
  v1[20] = v11;
  *(_QWORD *)(v5 - 216) = v10;
  *(_QWORD *)(v5 - 208) = v11;
  MEMORY[0x24261512C](255, v5 - 216, v8, 0);
  v13 = type metadata accessor for TallCardView(255, v4, v3, v12);
  v1[19] = v13;
  v14 = MEMORY[0x242615198](&unk_23BFFF0E4, v13);
  v1[18] = v14;
  *(_QWORD *)(v5 - 216) = v13;
  *(_QWORD *)(v5 - 208) = v14;
  MEMORY[0x24261512C](255, v5 - 216, v8, 0);
  v1[17] = sub_23BFF8968();
  sub_23BFF8968();
  v1[55] = v3;
  v16 = type metadata accessor for VerticalStackCard(255, v4, v3, v15);
  v1[14] = v16;
  v17 = MEMORY[0x242615198](&unk_23C0000E0, v16);
  v1[13] = v17;
  *(_QWORD *)(v5 - 216) = v16;
  *(_QWORD *)(v5 - 208) = v17;
  MEMORY[0x24261512C](255, v5 - 216, v8, 0);
  v1[1] = sub_23BFF8968();
  v19 = type metadata accessor for WideBrickView(255, v4, v3, v18);
  v1[7] = v19;
  v20 = MEMORY[0x242615198](&protocol conformance descriptor for WideBrickView<A>, v19);
  v1[6] = v20;
  *(_QWORD *)(v5 - 216) = v19;
  *(_QWORD *)(v5 - 208) = v20;
  MEMORY[0x24261512C](255, v5 - 216, v8, 0);
  v1[3] = sub_23BFF8968();
  v1[5] = sub_23BFF8968();
  v1[8] = sub_23BFF8968();
  v1[9] = sub_23BFF8FD4();
  v1[11] = sub_23BFF862C();
  v1[12] = sub_23BFF8968();
  v1[16] = sub_23BFF862C();
  sub_23BFF862C();
  v21 = (_QWORD *)v1[72];
  v22 = v21[6];
  v23 = v21[7];
  v1[52] = v23;
  v1[53] = v22;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v25 = v21[19];
  v1[54] = v25;
  *(_QWORD *)(v5 - 216) = v22;
  *(_QWORD *)(v5 - 208) = v23;
  *(_QWORD *)(v5 - 200) = AssociatedConformanceWitness;
  *(_QWORD *)(v5 - 192) = v25;
  type metadata accessor for CanvasContextMenu();
}

uint64_t sub_23BF097FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t OpaqueTypeConformance2;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t AssociatedConformanceWitness;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t v73;
  _BYTE *v74;
  uint64_t v75;
  void (*v76)(_BYTE *, uint64_t);
  _BYTE v78[96];

  *(_QWORD *)(v1 + 32) = a1;
  v6 = v2;
  *(_QWORD *)(v1 + 80) = sub_23BFF862C();
  *(_QWORD *)(v5 - 216) = *(_QWORD *)(v1 + 408);
  *(_QWORD *)(v5 - 208) = *(_QWORD *)(v1 + 400);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v5 - 216) = *(_QWORD *)(v1 + 392);
  *(_QWORD *)(v5 - 208) = *(_QWORD *)(v1 + 384);
  v8 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v5 - 216) = *(_QWORD *)(v1 + 352);
  *(_QWORD *)(v5 - 208) = *(_QWORD *)(v1 + 344);
  v9 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v5 - 232) = v8;
  *(_QWORD *)(v5 - 224) = v9;
  v10 = MEMORY[0x24BDEF3E0];
  *(_QWORD *)(v5 - 240) = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], *(_QWORD *)(v1 + 328), v5 - 232);
  v11 = MEMORY[0x242615198](MEMORY[0x24BDF3F50], *(_QWORD *)(v1 + 360), v5 - 240);
  v12 = MEMORY[0x24BDECC60];
  *(_QWORD *)(v5 - 256) = v11;
  *(_QWORD *)(v5 - 248) = v12;
  v13 = MEMORY[0x24BDED308];
  v14 = MEMORY[0x242615198](MEMORY[0x24BDED308], *(_QWORD *)(v1 + 336), v5 - 256);
  v15 = sub_23BEA1F94(&qword_256AE3920, &qword_256AE3910, MEMORY[0x24BDF43B0]);
  *(_QWORD *)(v1 + 1296) = v14;
  *(_QWORD *)(v1 + 1304) = v15;
  v16 = MEMORY[0x242615198](v10, *(_QWORD *)(v1 + 368), v1 + 1296);
  v17 = sub_23BEA1F94(&qword_256AE3928, &qword_256AE3918, MEMORY[0x24BDF4700]);
  *(_QWORD *)(v1 + 1280) = v16;
  *(_QWORD *)(v1 + 1288) = v17;
  v18 = MEMORY[0x242615198](v10, *(_QWORD *)(v1 + 376), v1 + 1280);
  *(_QWORD *)(v1 + 1264) = OpaqueTypeConformance2;
  *(_QWORD *)(v1 + 1272) = v18;
  v19 = MEMORY[0x242615198](v10, *(_QWORD *)(v1 + 248), v1 + 1264);
  *(_QWORD *)(v5 - 216) = *(_QWORD *)(v1 + 320);
  *(_QWORD *)(v5 - 208) = *(_QWORD *)(v1 + 312);
  v20 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v5 - 216) = *(_QWORD *)(v1 + 304);
  *(_QWORD *)(v5 - 208) = *(_QWORD *)(v1 + 296);
  v21 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v1 + 1248) = v20;
  *(_QWORD *)(v1 + 1256) = v21;
  v22 = MEMORY[0x242615198](v10, *(_QWORD *)(v1 + 288), v1 + 1248);
  *(_QWORD *)(v1 + 1232) = v19;
  *(_QWORD *)(v1 + 1240) = v22;
  v23 = MEMORY[0x242615198](v10, *(_QWORD *)(v1 + 120), v1 + 1232);
  *(_QWORD *)(v5 - 216) = *(_QWORD *)(v1 + 280);
  *(_QWORD *)(v5 - 208) = *(_QWORD *)(v1 + 272);
  v24 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v5 - 216) = *(_QWORD *)(v1 + 264);
  *(_QWORD *)(v5 - 208) = *(_QWORD *)(v1 + 256);
  v25 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v1 + 1216) = v24;
  *(_QWORD *)(v1 + 1224) = v25;
  v26 = MEMORY[0x242615198](v10, *(_QWORD *)(v1 + 192), v1 + 1216);
  *(_QWORD *)(v5 - 216) = *(_QWORD *)(v1 + 240);
  *(_QWORD *)(v5 - 208) = *(_QWORD *)(v1 + 232);
  *(_QWORD *)(v1 + 1200) = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v1 + 1208) = v25;
  v27 = MEMORY[0x242615198](v10, *(_QWORD *)(v1 + 216), v1 + 1200);
  *(_QWORD *)(v1 + 1184) = v26;
  *(_QWORD *)(v1 + 1192) = v27;
  v28 = MEMORY[0x242615198](v10, *(_QWORD *)(v1 + 224), v1 + 1184);
  *(_QWORD *)(v1 + 1168) = v23;
  *(_QWORD *)(v1 + 1176) = v28;
  v29 = MEMORY[0x242615198](v10, v3, v1 + 1168);
  *(_QWORD *)(v5 - 216) = *(_QWORD *)(v1 + 200);
  *(_QWORD *)(v5 - 208) = *(_QWORD *)(v1 + 208);
  v30 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v5 - 216) = *(_QWORD *)(v1 + 184);
  *(_QWORD *)(v5 - 208) = *(_QWORD *)(v1 + 176);
  v31 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v1 + 1152) = v30;
  *(_QWORD *)(v1 + 1160) = v31;
  v32 = MEMORY[0x242615198](v10, *(_QWORD *)(v1 + 16), v1 + 1152);
  *(_QWORD *)(v5 - 216) = *(_QWORD *)(v1 + 168);
  *(_QWORD *)(v5 - 208) = *(_QWORD *)(v1 + 160);
  v33 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v5 - 216) = *(_QWORD *)(v1 + 152);
  *(_QWORD *)(v5 - 208) = *(_QWORD *)(v1 + 144);
  v34 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v1 + 1136) = v33;
  *(_QWORD *)(v1 + 1144) = v34;
  v35 = MEMORY[0x242615198](v10, *(_QWORD *)(v1 + 136), v1 + 1136);
  *(_QWORD *)(v1 + 1120) = v32;
  *(_QWORD *)(v1 + 1128) = v35;
  v36 = MEMORY[0x242615198](v10, v4, v1 + 1120);
  *(_QWORD *)(v5 - 216) = *(_QWORD *)(v1 + 112);
  *(_QWORD *)(v5 - 208) = *(_QWORD *)(v1 + 104);
  *(_QWORD *)(v1 + 1104) = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v1 + 1112) = *(_QWORD *)(v1 + 584);
  v37 = MEMORY[0x242615198](v10, *(_QWORD *)(v1 + 8), v1 + 1104);
  *(_QWORD *)(v5 - 216) = *(_QWORD *)(v1 + 56);
  *(_QWORD *)(v5 - 208) = *(_QWORD *)(v1 + 48);
  v38 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v1 + 1088) = v37;
  *(_QWORD *)(v1 + 1096) = v38;
  v39 = MEMORY[0x242615198](v10, *(_QWORD *)(v1 + 24), v1 + 1088);
  *(_QWORD *)(v1 + 1072) = v36;
  *(_QWORD *)(v1 + 1080) = v39;
  v40 = MEMORY[0x242615198](v10, *(_QWORD *)(v1 + 40), v1 + 1072);
  *(_QWORD *)(v1 + 1056) = v29;
  *(_QWORD *)(v1 + 1064) = v40;
  *(_QWORD *)(v1 + 1048) = MEMORY[0x242615198](v10, *(_QWORD *)(v1 + 64), v1 + 1056);
  *(_QWORD *)(v1 + 1032) = MEMORY[0x242615198](MEMORY[0x24BDF3F50], *(_QWORD *)(v1 + 72), v1 + 1048);
  *(_QWORD *)(v1 + 1040) = *(_QWORD *)(v1 + 464);
  v41 = MEMORY[0x242615198](v13, *(_QWORD *)(v1 + 88), v1 + 1032);
  *(_QWORD *)(v1 + 1016) = MEMORY[0x24BDF5138];
  *(_QWORD *)(v1 + 1024) = v41;
  v42 = MEMORY[0x242615198](v10, *(_QWORD *)(v1 + 96), v1 + 1016);
  v43 = MEMORY[0x24BDF0910];
  *(_QWORD *)(v1 + 1000) = v42;
  *(_QWORD *)(v1 + 1008) = v43;
  *(_QWORD *)(v1 + 984) = MEMORY[0x242615198](v13, *(_QWORD *)(v1 + 128), v1 + 1000);
  *(_QWORD *)(v1 + 992) = v43;
  v44 = MEMORY[0x242615198](v13, v6, v1 + 984);
  v45 = MEMORY[0x242615198](&unk_23BFFEE18, *(_QWORD *)(v1 + 32));
  *(_QWORD *)(v1 + 968) = v44;
  *(_QWORD *)(v1 + 976) = v45;
  v46 = *(_QWORD *)(v1 + 80);
  v47 = MEMORY[0x242615198](v13, v46, v1 + 968);
  *(_QWORD *)(v5 - 216) = v46;
  *(_QWORD *)(v5 - 208) = v47;
  MEMORY[0x24261512C](255, v5 - 216, MEMORY[0x24BEC6710], 0);
  v48 = sub_23BFF8968();
  v49 = sub_23BFF8968();
  v50 = *(_QWORD *)(v1 + 472);
  v51 = MEMORY[0x242615198](MEMORY[0x24BEE12D8], v50);
  v52 = *(_QWORD *)(v1 + 480);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(_QWORD *)(v5 - 216) = v50;
  *(_QWORD *)(v5 - 208) = v52;
  *(_QWORD *)(v5 - 200) = v49;
  *(_QWORD *)(v5 - 192) = v51;
  *(_QWORD *)(v5 - 184) = AssociatedConformanceWitness;
  v54 = sub_23BFF910C();
  *(_QWORD *)(v5 - 216) = v46;
  *(_QWORD *)(v5 - 208) = v47;
  *(_QWORD *)(v1 + 952) = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v1 + 960) = v47;
  v55 = MEMORY[0x242615198](v10, v48, v1 + 952);
  *(_QWORD *)(v1 + 936) = v55;
  *(_QWORD *)(v1 + 944) = v55;
  *(_QWORD *)(v1 + 928) = MEMORY[0x242615198](v10, v49, v1 + 936);
  MEMORY[0x242615198](MEMORY[0x24BDF4A08], v54, v1 + 928);
  v56 = sub_23BFF9214();
  v57 = sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE5180);
  v58 = *(_QWORD *)(v1 + 512);
  v59 = sub_23BFF913C();
  v60 = sub_23BF0A0F0();
  v61 = MEMORY[0x242615198](&unk_23C0051E8, *(_QWORD *)(v1 + 520));
  v62 = sub_23BEA1BB8((unint64_t *)&qword_256AE5188, (uint64_t (*)(uint64_t))MEMORY[0x24BDF02F8], MEMORY[0x24BDF02F0]);
  *(_QWORD *)(v1 + 912) = v61;
  *(_QWORD *)(v1 + 920) = v62;
  v63 = MEMORY[0x24BDED308];
  v64 = MEMORY[0x242615198](MEMORY[0x24BDED308], *(_QWORD *)(v1 + 528), v1 + 912);
  *(_QWORD *)(v1 + 896) = v60;
  *(_QWORD *)(v1 + 904) = v64;
  *(_QWORD *)(v1 + 888) = MEMORY[0x242615198](v10, *(_QWORD *)(v1 + 536), v1 + 896);
  v65 = MEMORY[0x242615198](MEMORY[0x24BDF5578], v58, v1 + 888);
  *(_QWORD *)(v1 + 872) = MEMORY[0x242615198](MEMORY[0x24BDF5210], v56);
  *(_QWORD *)(v1 + 880) = MEMORY[0x24BDECC60];
  v66 = MEMORY[0x242615198](v63, v57, v1 + 872);
  v67 = sub_23BF0A154();
  *(_QWORD *)(v1 + 848) = v65;
  *(_QWORD *)(v1 + 856) = v66;
  *(_QWORD *)(v1 + 864) = v67;
  MEMORY[0x242615198](MEMORY[0x24BDF4AF8], v59, v1 + 848);
  v68 = sub_23BFF90AC();
  v69 = *(_QWORD *)(v68 - 8);
  MEMORY[0x24BDAC7A8](v68);
  v71 = &v78[-((v70 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v72);
  v74 = &v78[-v73];
  sub_23BFF88A8();
  v75 = *(_QWORD *)(v1 + 576);
  *(_QWORD *)(v1 + 640) = *(_QWORD *)(v75 + 16);
  *(_QWORD *)(v1 + 648) = *(_QWORD *)(v1 + 448);
  *(_QWORD *)(v1 + 656) = *(_QWORD *)(v75 + 32);
  *(_QWORD *)(v1 + 664) = *(_QWORD *)(v1 + 592);
  *(_QWORD *)(v1 + 672) = *(_QWORD *)(v1 + 424);
  *(_QWORD *)(v1 + 680) = *(_QWORD *)(v1 + 416);
  *(_QWORD *)(v1 + 688) = *(_QWORD *)(v1 + 600);
  *(_OWORD *)(v1 + 696) = *(_OWORD *)(v75 + 72);
  *(_QWORD *)(v1 + 712) = *(_QWORD *)(v75 + 88);
  *(_QWORD *)(v1 + 720) = *(_QWORD *)(v1 + 544);
  *(_QWORD *)(v1 + 728) = *(_QWORD *)(v75 + 104);
  *(_QWORD *)(v1 + 736) = *(_QWORD *)(v1 + 496);
  *(_QWORD *)(v1 + 744) = *(_QWORD *)(v75 + 120);
  *(_QWORD *)(v1 + 752) = *(_QWORD *)(v1 + 616);
  *(_QWORD *)(v1 + 760) = *(_QWORD *)(v1 + 456);
  *(_QWORD *)(v1 + 768) = *(_QWORD *)(v1 + 440);
  *(_QWORD *)(v1 + 776) = *(_QWORD *)(v1 + 432);
  *(_QWORD *)(v1 + 784) = *(_QWORD *)(v1 + 584);
  *(_QWORD *)(v1 + 792) = *(_QWORD *)(v75 + 168);
  *(_QWORD *)(v1 + 800) = *(_QWORD *)(v1 + 552);
  *(_QWORD *)(v1 + 808) = *(_QWORD *)(v75 + 184);
  *(_QWORD *)(v1 + 816) = *(_QWORD *)(v1 + 504);
  *(_QWORD *)(v1 + 824) = *(_QWORD *)(v1 + 608);
  *(_QWORD *)(v1 + 832) = *(_QWORD *)(v1 + 560);
  sub_23BFF90A0();
  MEMORY[0x242615198](MEMORY[0x24BDF4700], v68);
  sub_23BEA72EC((uint64_t)v71, v68, (uint64_t)v74);
  v76 = *(void (**)(_BYTE *, uint64_t))(v69 + 8);
  v76(v71, v68);
  sub_23BEA5C0C((uint64_t)v74, v68, *(_QWORD *)(v1 + 568));
  return ((uint64_t (*)(_BYTE *, uint64_t))v76)(v74, v68);
}

unint64_t sub_23BF0A0F0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AE3578;
  if (!qword_256AE3578)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3528);
    v2[0] = MEMORY[0x24BDF4610];
    v2[1] = MEMORY[0x24BDEBEE0];
    result = MEMORY[0x242615198](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AE3578);
  }
  return result;
}

unint64_t sub_23BF0A154()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256AE5190[0];
  if (!qword_256AE5190[0])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE5180);
    v2 = sub_23BE9F234(&qword_256AE3400, &qword_256AE33F0, sub_23BE9F218);
    v3[0] = MEMORY[0x24BDF5138];
    v3[1] = v2;
    result = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v1, v3);
    atomic_store(result, qword_256AE5190);
  }
  return result;
}

void sub_23BF0A1D8()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3528);
  type metadata accessor for CanvasSectionHeaderView();
}

void sub_23BF0A2C0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1[73] = a1;
  sub_23BFF8A4C();
  v1[74] = sub_23BFF862C();
  v1[75] = sub_23BFF8968();
  v8 = sub_23BFF96A0();
  v1[59] = *(_QWORD *)(v3 + 32);
  v1[60] = v8;
  v1[58] = swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  v1[57] = sub_23BFF94C0();
  *(_QWORD *)(v7 - 216) = v5;
  *(_QWORD *)(v7 - 208) = v4;
  *(_QWORD *)(v7 - 200) = v4;
  *(_QWORD *)(v7 - 192) = v6;
  *(_QWORD *)(v7 - 184) = v2;
  *(_QWORD *)(v7 - 176) = v2;
  type metadata accessor for ActionCardView();
}

void sub_23BF0A370(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1[51] = a1;
  v8 = MEMORY[0x242615198](&unk_23C005608, a1);
  v1[50] = v8;
  *(_QWORD *)(v6 - 216) = a1;
  *(_QWORD *)(v6 - 208) = v8;
  v1[45] = MEMORY[0x24261512C](255, v6 - 216, MEMORY[0x24BDF3948], 0);
  v1[38] = sub_23BFF8ADC();
  v9 = (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088];
  v10 = sub_23BFF862C();
  v11 = sub_23BFF862C();
  v1[49] = v11;
  v12 = sub_23BEA1BB8((unint64_t *)&qword_256AE3908, v9, MEMORY[0x24BDF1078]);
  v1[56] = v12;
  *(_QWORD *)(v6 - 104) = v5;
  *(_QWORD *)(v6 - 96) = v12;
  v13 = MEMORY[0x24BDED308];
  v14 = MEMORY[0x242615198](MEMORY[0x24BDED308], v10, v6 - 104);
  v15 = MEMORY[0x24BDEEC40];
  *(_QWORD *)(v6 - 120) = v14;
  *(_QWORD *)(v6 - 112) = v15;
  v16 = MEMORY[0x242615198](v13, v11, v6 - 120);
  v1[48] = v16;
  *(_QWORD *)(v6 - 216) = v11;
  *(_QWORD *)(v6 - 208) = v16;
  v17 = MEMORY[0x24BDF3100];
  MEMORY[0x24261512C](255, v6 - 216, MEMORY[0x24BDF3100], 0);
  v18 = sub_23BFF862C();
  v1[42] = v18;
  v19 = MEMORY[0x24BDEBEE0];
  *(_QWORD *)(v6 - 136) = v14;
  *(_QWORD *)(v6 - 128) = v19;
  v20 = MEMORY[0x242615198](v13, v18, v6 - 136);
  v1[41] = v20;
  *(_QWORD *)(v6 - 216) = v18;
  *(_QWORD *)(v6 - 208) = v20;
  MEMORY[0x24261512C](255, v6 - 216, v17, 0);
  v1[39] = sub_23BFF8968();
  v1[43] = sub_23BFF8FD4();
  v1[40] = sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3910);
  v1[46] = sub_23BFF8968();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3918);
  v1[47] = sub_23BFF8968();
  v1[30] = sub_23BFF8968();
  *(_QWORD *)(v6 - 216) = v4;
  *(_QWORD *)(v6 - 208) = v3;
  v21 = v1[84];
  *(_QWORD *)(v6 - 200) = v3;
  *(_QWORD *)(v6 - 192) = v21;
  *(_QWORD *)(v6 - 184) = v1[80];
  *(_QWORD *)(v6 - 176) = v5;
  *(_QWORD *)(v6 - 168) = v2;
  *(_QWORD *)(v6 - 160) = v2;
  v22 = v1[83];
  *(_QWORD *)(v6 - 152) = v1[85];
  *(_QWORD *)(v6 - 144) = v22;
  type metadata accessor for FullWidthStageView();
}

void sub_23BF0A590(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1[45] = a1;
  v8 = MEMORY[0x242615198](&unk_23C0077B8, a1);
  v1[44] = v8;
  *(_QWORD *)(v6 - 216) = a1;
  *(_QWORD *)(v6 - 208) = v8;
  v9 = MEMORY[0x24BDF3948];
  MEMORY[0x24261512C](255, v6 - 216, MEMORY[0x24BDF3948], 0);
  v1[54] = v3;
  v1[55] = v2;
  v11 = type metadata accessor for InfoActionCardView(255, v3, v2, v10);
  v1[37] = v11;
  v12 = MEMORY[0x242615198](&unk_23C007F20, v11);
  v1[36] = v12;
  *(_QWORD *)(v6 - 216) = v11;
  *(_QWORD *)(v6 - 208) = v12;
  MEMORY[0x24261512C](255, v6 - 216, v9, 0);
  v1[35] = sub_23BFF8968();
  v1[15] = sub_23BFF8968();
  v14 = type metadata accessor for LargeBrickView(255, v4, v5, v13);
  v1[34] = v14;
  v15 = MEMORY[0x242615198](&protocol conformance descriptor for LargeBrickView<A>, v14);
  v1[33] = v15;
  *(_QWORD *)(v6 - 216) = v14;
  *(_QWORD *)(v6 - 208) = v15;
  MEMORY[0x24261512C](255, v6 - 216, v9, 0);
  v17 = type metadata accessor for DynamicBrickView(255, v4, v5, v16);
  v1[32] = v17;
  v18 = MEMORY[0x242615198](&protocol conformance descriptor for DynamicBrickView<A>, v17);
  v1[31] = v18;
  *(_QWORD *)(v6 - 216) = v17;
  *(_QWORD *)(v6 - 208) = v18;
  MEMORY[0x24261512C](255, v6 - 216, v9, 0);
  v1[23] = sub_23BFF8968();
  v20 = type metadata accessor for MonogramVerticalStackView(255, v4, v5, v19);
  v1[29] = v20;
  v21 = MEMORY[0x242615198](&unk_23BFFA1F4, v20);
  v1[28] = v21;
  *(_QWORD *)(v6 - 216) = v20;
  *(_QWORD *)(v6 - 208) = v21;
  MEMORY[0x24261512C](255, v6 - 216, v9, 0);
  v1[26] = sub_23BFF8968();
  v1[27] = sub_23BFF8968();
  sub_23BFF8968();
  v23 = type metadata accessor for StandardCardView(255, v4, v5, v22);
  v1[25] = v23;
  v24 = MEMORY[0x242615198](&unk_23C007BD0, v23);
  v1[24] = v24;
  *(_QWORD *)(v6 - 216) = v23;
  *(_QWORD *)(v6 - 208) = v24;
  MEMORY[0x24261512C](255, v6 - 216, v9, 0);
  *(_QWORD *)(v6 - 216) = v4;
  *(_QWORD *)(v6 - 208) = v3;
  *(_QWORD *)(v6 - 200) = v5;
  *(_QWORD *)(v6 - 192) = v2;
  type metadata accessor for StandardHorizontalStackView();
}

void sub_23BF0A7C8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedConformanceWitness;
  uint64_t v23;
  uint64_t v24;

  v1[22] = a1;
  v7 = MEMORY[0x242615198](&unk_23C0008E8, a1);
  v1[21] = v7;
  *(_QWORD *)(v5 - 216) = a1;
  *(_QWORD *)(v5 - 208) = v7;
  v8 = v2;
  MEMORY[0x24261512C](255, v5 - 216, v2, 0);
  v1[2] = sub_23BFF8968();
  v10 = type metadata accessor for StandardVerticalStackView(255, v3, v4, v9);
  v1[20] = v10;
  v11 = MEMORY[0x242615198](&unk_23C0073B8, v10);
  v1[19] = v11;
  *(_QWORD *)(v5 - 216) = v10;
  *(_QWORD *)(v5 - 208) = v11;
  MEMORY[0x24261512C](255, v5 - 216, v2, 0);
  v13 = type metadata accessor for TallCardView(255, v3, v4, v12);
  v1[18] = v13;
  v14 = MEMORY[0x242615198](&unk_23BFFF0E4, v13);
  v1[17] = v14;
  *(_QWORD *)(v5 - 216) = v13;
  *(_QWORD *)(v5 - 208) = v14;
  MEMORY[0x24261512C](255, v5 - 216, v8, 0);
  v1[16] = sub_23BFF8968();
  *v1 = sub_23BFF8968();
  v1[52] = v4;
  v1[53] = v3;
  v16 = type metadata accessor for VerticalStackCard(255, v3, v4, v15);
  v1[14] = v16;
  v17 = MEMORY[0x242615198](&unk_23C0000E0, v16);
  v1[13] = v17;
  *(_QWORD *)(v5 - 216) = v16;
  *(_QWORD *)(v5 - 208) = v17;
  MEMORY[0x24261512C](255, v5 - 216, v8, 0);
  v1[1] = sub_23BFF8968();
  v19 = type metadata accessor for WideBrickView(255, v3, v4, v18);
  v20 = MEMORY[0x242615198](&protocol conformance descriptor for WideBrickView<A>, v19);
  v1[6] = v20;
  *(_QWORD *)(v5 - 216) = v19;
  *(_QWORD *)(v5 - 208) = v20;
  MEMORY[0x24261512C](255, v5 - 216, v8, 0);
  v1[3] = sub_23BFF8968();
  v1[5] = sub_23BFF8968();
  v1[8] = sub_23BFF8968();
  v1[9] = sub_23BFF8FD4();
  v1[10] = sub_23BFF862C();
  v1[12] = sub_23BFF8968();
  v1[38] = sub_23BFF862C();
  v1[4] = sub_23BFF862C();
  v21 = v1[77];
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v23 = v1[82];
  *(_QWORD *)(v5 - 216) = v21;
  *(_QWORD *)(v5 - 208) = v23;
  v24 = v1[81];
  *(_QWORD *)(v5 - 200) = AssociatedConformanceWitness;
  *(_QWORD *)(v5 - 192) = v24;
  type metadata accessor for CanvasContextMenu();
}

uint64_t sub_23BF0AA5C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t OpaqueTypeConformance2;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t AssociatedConformanceWitness;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void (*v108)(uint64_t, uint64_t);
  uint64_t v110;
  unint64_t v111;
  _BYTE v112[64];

  v1[7] = a1;
  v1[11] = sub_23BFF862C();
  v5 = v1[50];
  *(_QWORD *)(v4 - 216) = v1[51];
  *(_QWORD *)(v4 - 208) = v5;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v7 = v1[48];
  *(_QWORD *)(v4 - 216) = v1[49];
  *(_QWORD *)(v4 - 208) = v7;
  v8 = swift_getOpaqueTypeConformance2();
  v9 = v1[41];
  *(_QWORD *)(v4 - 216) = v1[42];
  *(_QWORD *)(v4 - 208) = v9;
  v10 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v4 - 232) = v8;
  *(_QWORD *)(v4 - 224) = v10;
  v11 = MEMORY[0x24BDEF3E0];
  *(_QWORD *)(v4 - 240) = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v1[39], v4 - 232);
  v12 = MEMORY[0x242615198](MEMORY[0x24BDF3F50], v1[43], v4 - 240);
  v13 = MEMORY[0x24BDECC60];
  *(_QWORD *)(v4 - 256) = v12;
  *(_QWORD *)(v4 - 248) = v13;
  v14 = MEMORY[0x24BDED308];
  v15 = MEMORY[0x242615198](MEMORY[0x24BDED308], v1[40], v4 - 256);
  v16 = sub_23BEA1F94(&qword_256AE3920, &qword_256AE3910, MEMORY[0x24BDF43B0]);
  v1[226] = v15;
  v1[227] = v16;
  v17 = MEMORY[0x242615198](v11, v1[46], v1 + 226);
  v18 = sub_23BEA1F94(&qword_256AE3928, &qword_256AE3918, MEMORY[0x24BDF4700]);
  v1[224] = v17;
  v1[225] = v18;
  v19 = MEMORY[0x242615198](v11, v1[47], v1 + 224);
  v1[222] = OpaqueTypeConformance2;
  v1[223] = v19;
  v20 = MEMORY[0x242615198](v11, v1[30], v1 + 222);
  v21 = v1[44];
  *(_QWORD *)(v4 - 216) = v1[45];
  *(_QWORD *)(v4 - 208) = v21;
  v22 = swift_getOpaqueTypeConformance2();
  v23 = v1[36];
  *(_QWORD *)(v4 - 216) = v1[37];
  *(_QWORD *)(v4 - 208) = v23;
  v24 = swift_getOpaqueTypeConformance2();
  v1[220] = v22;
  v1[221] = v24;
  v25 = MEMORY[0x242615198](v11, v1[35], v1 + 220);
  v1[218] = v20;
  v1[219] = v25;
  v26 = MEMORY[0x242615198](v11, v1[15], v1 + 218);
  v27 = v1[33];
  *(_QWORD *)(v4 - 216) = v1[34];
  *(_QWORD *)(v4 - 208) = v27;
  v28 = swift_getOpaqueTypeConformance2();
  v29 = v1[31];
  *(_QWORD *)(v4 - 216) = v1[32];
  *(_QWORD *)(v4 - 208) = v29;
  v30 = swift_getOpaqueTypeConformance2();
  v1[216] = v28;
  v1[217] = v30;
  v31 = MEMORY[0x242615198](v11, v1[23], v1 + 216);
  v32 = v1[28];
  *(_QWORD *)(v4 - 216) = v1[29];
  *(_QWORD *)(v4 - 208) = v32;
  v1[214] = swift_getOpaqueTypeConformance2();
  v1[215] = v30;
  v33 = MEMORY[0x242615198](v11, v1[26], v1 + 214);
  v1[212] = v31;
  v1[213] = v33;
  v34 = MEMORY[0x242615198](v11, v1[27], v1 + 212);
  v1[210] = v26;
  v1[211] = v34;
  v35 = MEMORY[0x242615198](v11, v2, v1 + 210);
  v36 = v1[24];
  *(_QWORD *)(v4 - 216) = v1[25];
  *(_QWORD *)(v4 - 208) = v36;
  v37 = swift_getOpaqueTypeConformance2();
  v38 = v1[21];
  *(_QWORD *)(v4 - 216) = v1[22];
  *(_QWORD *)(v4 - 208) = v38;
  v39 = swift_getOpaqueTypeConformance2();
  v1[208] = v37;
  v1[209] = v39;
  v40 = MEMORY[0x242615198](v11, v1[2], v1 + 208);
  v41 = v1[19];
  *(_QWORD *)(v4 - 216) = v1[20];
  *(_QWORD *)(v4 - 208) = v41;
  v42 = swift_getOpaqueTypeConformance2();
  v43 = v1[17];
  *(_QWORD *)(v4 - 216) = v1[18];
  *(_QWORD *)(v4 - 208) = v43;
  v44 = swift_getOpaqueTypeConformance2();
  v1[206] = v42;
  v1[207] = v44;
  v45 = MEMORY[0x242615198](v11, v1[16], v1 + 206);
  v1[204] = v40;
  v1[205] = v45;
  v46 = MEMORY[0x242615198](v11, *v1, v1 + 204);
  v47 = v1[13];
  *(_QWORD *)(v4 - 216) = v1[14];
  *(_QWORD *)(v4 - 208) = v47;
  v1[202] = swift_getOpaqueTypeConformance2();
  v1[203] = v1[85];
  v48 = MEMORY[0x242615198](v11, v1[1], v1 + 202);
  v49 = v1[6];
  *(_QWORD *)(v4 - 216) = v3;
  *(_QWORD *)(v4 - 208) = v49;
  v50 = swift_getOpaqueTypeConformance2();
  v1[200] = v48;
  v1[201] = v50;
  v51 = MEMORY[0x242615198](v11, v1[3], v1 + 200);
  v1[198] = v46;
  v1[199] = v51;
  v52 = MEMORY[0x242615198](v11, v1[5], v1 + 198);
  v1[196] = v35;
  v1[197] = v52;
  v1[195] = MEMORY[0x242615198](v11, v1[8], v1 + 196);
  v1[193] = MEMORY[0x242615198](MEMORY[0x24BDF3F50], v1[9], v1 + 195);
  v1[194] = v1[56];
  v53 = MEMORY[0x242615198](v14, v1[10], v1 + 193);
  v1[191] = MEMORY[0x24BDF5138];
  v1[192] = v53;
  v54 = MEMORY[0x242615198](v11, v1[12], v1 + 191);
  v55 = MEMORY[0x24BDF0910];
  v1[189] = v54;
  v1[190] = v55;
  v1[187] = MEMORY[0x242615198](v14, v1[38], v1 + 189);
  v1[188] = v55;
  v56 = MEMORY[0x242615198](v14, v1[4], v1 + 187);
  v57 = MEMORY[0x242615198](&unk_23BFFEE18, v1[7]);
  v1[185] = v56;
  v1[186] = v57;
  v58 = v1[11];
  v59 = MEMORY[0x242615198](v14, v58, v1 + 185);
  *(_QWORD *)(v4 - 216) = v58;
  *(_QWORD *)(v4 - 208) = v59;
  MEMORY[0x24261512C](255, v4 - 216, MEMORY[0x24BEC6710], 0);
  v60 = sub_23BFF8968();
  v61 = sub_23BFF8968();
  v62 = v1[57];
  v63 = MEMORY[0x242615198](MEMORY[0x24BEE12D8], v62);
  v64 = v1[58];
  v65 = v1[78];
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(_QWORD *)(v4 - 216) = v62;
  *(_QWORD *)(v4 - 208) = v64;
  *(_QWORD *)(v4 - 200) = v61;
  *(_QWORD *)(v4 - 192) = v63;
  *(_QWORD *)(v4 - 184) = AssociatedConformanceWitness;
  v67 = sub_23BFF910C();
  *(_QWORD *)(v4 - 216) = v58;
  *(_QWORD *)(v4 - 208) = v59;
  v1[183] = swift_getOpaqueTypeConformance2();
  v1[184] = v59;
  v68 = MEMORY[0x242615198](v11, v60, v1 + 183);
  v1[181] = v68;
  v1[182] = v68;
  v1[180] = MEMORY[0x242615198](v11, v61, v1 + 181);
  MEMORY[0x242615198](MEMORY[0x24BDF4A08], v67, v1 + 180);
  v1[51] = sub_23BFF9214();
  v69 = sub_23BFF862C();
  v1[57] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE5180);
  v70 = v1[60];
  v71 = sub_23BFF913C();
  v1[59] = *(_QWORD *)(v71 - 8);
  MEMORY[0x24BDAC7A8](v71);
  v1[56] = &v112[-((v72 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v73);
  v1[58] = &v112[-v74];
  v75 = v1[68];
  v1[144] = v75;
  v77 = v1[53];
  v76 = v1[54];
  v1[145] = v76;
  v78 = v1[70];
  v1[146] = v78;
  v1[147] = v77;
  v79 = v1[77];
  v1[148] = v79;
  v80 = v1[82];
  v1[149] = v80;
  v81 = v1[84];
  v1[150] = v81;
  v83 = v1[63];
  v82 = v1[64];
  v1[151] = v82;
  v84 = v1[67];
  v1[152] = v84;
  v1[153] = v83;
  v85 = v1[61];
  v86 = v1[62];
  v1[154] = v85;
  v87 = v1[65];
  v1[155] = v87;
  v88 = v1[80];
  v1[156] = v88;
  v89 = v1[66];
  v1[157] = v89;
  v90 = v65;
  v1[158] = v65;
  v91 = v1[55];
  v1[159] = v91;
  v92 = v1[52];
  v1[160] = v92;
  v93 = v1[81];
  v1[161] = v93;
  v94 = v1[85];
  v1[162] = v94;
  v95 = v1[69];
  v1[163] = v95;
  v1[164] = v86;
  v96 = v1[71];
  v1[165] = v96;
  v97 = v1[83];
  v1[166] = v97;
  v98 = v1[79];
  v1[167] = v98;
  v99 = v1[72];
  v1[168] = v99;
  v1[116] = v75;
  v1[117] = v76;
  v1[118] = v78;
  v1[119] = v77;
  v1[120] = v79;
  v1[121] = v80;
  v1[122] = v81;
  v1[123] = v82;
  v1[124] = v84;
  v1[125] = v83;
  v1[126] = v85;
  v1[127] = v87;
  v1[128] = v88;
  v1[129] = v89;
  v1[130] = v90;
  v1[131] = v91;
  v1[132] = v92;
  v1[133] = v93;
  v1[134] = v94;
  v1[135] = v95;
  v1[136] = v86;
  v1[137] = v96;
  v1[138] = v97;
  v1[139] = v98;
  v1[140] = v99;
  v1[88] = v75;
  v1[89] = v76;
  v1[90] = v78;
  v1[91] = v77;
  v1[92] = v79;
  v1[93] = v80;
  v1[94] = v81;
  v1[95] = v82;
  v1[96] = v84;
  v1[97] = v83;
  v1[98] = v85;
  v1[99] = v87;
  v1[100] = v88;
  v1[101] = v89;
  v1[102] = v90;
  v1[103] = v91;
  v1[104] = v92;
  v1[105] = v93;
  v1[106] = v94;
  v1[107] = v95;
  v1[108] = v86;
  v1[109] = v96;
  v1[110] = v97;
  v1[111] = v98;
  v1[112] = v99;
  v100 = sub_23BF0A0F0();
  v101 = MEMORY[0x242615198](&unk_23C0051E8, v1[73]);
  v102 = sub_23BEA1BB8((unint64_t *)&qword_256AE5188, (uint64_t (*)(uint64_t))MEMORY[0x24BDF02F8], MEMORY[0x24BDF02F0]);
  v1[178] = v101;
  v1[179] = v102;
  v103 = MEMORY[0x24BDED308];
  v104 = MEMORY[0x242615198](MEMORY[0x24BDED308], v1[74], v1 + 178);
  v1[176] = v100;
  v1[177] = v104;
  v1[175] = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v1[75], v1 + 176);
  v105 = MEMORY[0x242615198](MEMORY[0x24BDF5578], v70, v1 + 175);
  v1[173] = MEMORY[0x242615198](MEMORY[0x24BDF5210], v1[51]);
  v1[174] = MEMORY[0x24BDECC60];
  v110 = MEMORY[0x242615198](v103, v69, v1 + 173);
  v111 = sub_23BF0A154();
  v106 = v1[56];
  sub_23BFAE500((uint64_t)sub_23BF13F28, (uint64_t)(v1 + 142), (uint64_t)sub_23BF13F34, (uint64_t)(v1 + 114), (void (*)(uint64_t))sub_23BF13F40);
  v1[170] = v105;
  v1[171] = v110;
  v1[172] = v111;
  MEMORY[0x242615198](MEMORY[0x24BDF4AF8], v71, v1 + 170);
  v107 = v1[58];
  sub_23BEA72EC(v106, v71, v107);
  v108 = *(void (**)(uint64_t, uint64_t))(v1[59] + 8);
  v108(v106, v71);
  sub_23BEA5C0C(v107, v71, v1[76]);
  return ((uint64_t (*)(uint64_t, uint64_t))v108)(v107, v71);
}

void sub_23BF0B3F0()
{
  sub_23BF140F8((void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BF0A1D8);
}

uint64_t sub_23BF0B3FC()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_23BF0B458(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[170];

  v30[76] = a8;
  v30[75] = a7;
  v30[80] = a6;
  v30[72] = a4;
  v30[69] = a2;
  v30[60] = a1;
  v30[1] = a9;
  v30[61] = a26;
  v30[62] = a25;
  v30[59] = a24;
  v30[58] = a23;
  v30[57] = a22;
  v30[81] = a21;
  v30[79] = a20;
  v30[78] = a17;
  v30[68] = a16;
  v30[77] = a15;
  v30[67] = a14;
  v30[66] = a13;
  v30[65] = a12;
  v30[64] = a11;
  v30[63] = a10;
  v28 = sub_23BFF89D4();
  MEMORY[0x24BDAC7A8](v28);
  v30[0] = (char *)v30 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30[56] = *(_QWORD *)(a26 + 32);
  v30[55] = swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  v30[54] = sub_23BFF94C0();
  v30[86] = a5;
  v30[87] = a3;
  v30[88] = a3;
  v30[89] = a19;
  v30[90] = a18;
  v30[91] = a18;
  type metadata accessor for ActionCardView();
}

void sub_23BF0B5D4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1[52] = a1;
  v8 = MEMORY[0x242615198](&unk_23C005608, a1);
  v1[51] = v8;
  v1[86] = a1;
  v1[87] = v8;
  v1[46] = MEMORY[0x24261512C](255, v1 + 86, MEMORY[0x24BDF3948], 0);
  v1[39] = sub_23BFF8ADC();
  v9 = (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088];
  v10 = sub_23BFF862C();
  v11 = sub_23BFF862C();
  v1[50] = v11;
  v12 = sub_23BEA1BB8((unint64_t *)&qword_256AE3908, v9, MEMORY[0x24BDF1078]);
  v1[53] = v12;
  *(_QWORD *)(v6 - 136) = v5;
  *(_QWORD *)(v6 - 128) = v12;
  v13 = MEMORY[0x24BDED308];
  v14 = MEMORY[0x242615198](MEMORY[0x24BDED308], v10, v6 - 136);
  v15 = MEMORY[0x24BDEEC40];
  *(_QWORD *)(v6 - 152) = v14;
  *(_QWORD *)(v6 - 144) = v15;
  v16 = MEMORY[0x242615198](v13, v11, v6 - 152);
  v1[49] = v16;
  v1[86] = v11;
  v1[87] = v16;
  v17 = MEMORY[0x24BDF3100];
  MEMORY[0x24261512C](255, v1 + 86, MEMORY[0x24BDF3100], 0);
  v18 = sub_23BFF862C();
  v1[43] = v18;
  v19 = MEMORY[0x24BDEBEE0];
  *(_QWORD *)(v6 - 168) = v14;
  *(_QWORD *)(v6 - 160) = v19;
  v20 = MEMORY[0x242615198](v13, v18, v6 - 168);
  v1[42] = v20;
  v1[86] = v18;
  v1[87] = v20;
  MEMORY[0x24261512C](255, v1 + 86, v17, 0);
  v1[40] = sub_23BFF8968();
  v1[44] = sub_23BFF8FD4();
  v1[41] = sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3910);
  v1[47] = sub_23BFF8968();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3918);
  v1[48] = sub_23BFF8968();
  v1[31] = sub_23BFF8968();
  v1[86] = v2;
  v1[87] = v3;
  v1[88] = v3;
  v1[89] = v1[76];
  v1[90] = v1[77];
  v1[91] = v5;
  v1[92] = v4;
  v1[93] = v4;
  v1[94] = v1[81];
  v1[95] = v1[62];
  type metadata accessor for FullWidthStageView();
}

void sub_23BF0B814(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1[46] = a1;
  v7 = MEMORY[0x242615198](&unk_23C0077B8, a1);
  v1[45] = v7;
  v1[86] = a1;
  v1[87] = v7;
  v8 = MEMORY[0x24BDF3948];
  MEMORY[0x24261512C](255, v1 + 86, MEMORY[0x24BDF3948], 0);
  v1[70] = v3;
  v1[71] = v4;
  v10 = type metadata accessor for InfoActionCardView(255, v3, v4, v9);
  v1[38] = v10;
  v11 = MEMORY[0x242615198](&unk_23C007F20, v10);
  v1[37] = v11;
  v1[86] = v10;
  v1[87] = v11;
  MEMORY[0x24261512C](255, v1 + 86, v8, 0);
  v1[36] = sub_23BFF8968();
  v1[17] = sub_23BFF8968();
  v13 = type metadata accessor for LargeBrickView(255, v2, v5, v12);
  v1[35] = v13;
  v14 = MEMORY[0x242615198](&protocol conformance descriptor for LargeBrickView<A>, v13);
  v1[34] = v14;
  v1[86] = v13;
  v1[87] = v14;
  MEMORY[0x24261512C](255, v1 + 86, v8, 0);
  v16 = type metadata accessor for DynamicBrickView(255, v2, v5, v15);
  v1[33] = v16;
  v17 = MEMORY[0x242615198](&protocol conformance descriptor for DynamicBrickView<A>, v16);
  v1[32] = v17;
  v1[86] = v16;
  v1[87] = v17;
  MEMORY[0x24261512C](255, v1 + 86, v8, 0);
  v1[24] = sub_23BFF8968();
  v19 = type metadata accessor for MonogramVerticalStackView(255, v2, v5, v18);
  v1[30] = v19;
  v20 = MEMORY[0x242615198](&unk_23BFFA1F4, v19);
  v1[29] = v20;
  v1[86] = v19;
  v1[87] = v20;
  MEMORY[0x24261512C](255, v1 + 86, v8, 0);
  v1[27] = sub_23BFF8968();
  v1[28] = sub_23BFF8968();
  v1[2] = sub_23BFF8968();
  v22 = type metadata accessor for StandardCardView(255, v2, v5, v21);
  v1[26] = v22;
  v23 = MEMORY[0x242615198](&unk_23C007BD0, v22);
  v1[25] = v23;
  v1[86] = v22;
  v1[87] = v23;
  MEMORY[0x24261512C](255, v1 + 86, v8, 0);
  v1[86] = v2;
  v1[87] = v3;
  v1[88] = v5;
  v1[89] = v4;
  type metadata accessor for StandardHorizontalStackView();
}

void sub_23BF0BA74(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t AssociatedConformanceWitness;

  v1[23] = a1;
  v6 = MEMORY[0x242615198](&unk_23C0008E8, a1);
  v1[22] = v6;
  v1[86] = a1;
  v1[87] = v6;
  MEMORY[0x24261512C](255, v1 + 86, v2, 0);
  v1[5] = sub_23BFF8968();
  v8 = type metadata accessor for StandardVerticalStackView(255, v3, v4, v7);
  v1[21] = v8;
  v9 = MEMORY[0x242615198](&unk_23C0073B8, v8);
  v1[20] = v9;
  v1[86] = v8;
  v1[87] = v9;
  MEMORY[0x24261512C](255, v1 + 86, v2, 0);
  v11 = type metadata accessor for TallCardView(255, v3, v4, v10);
  v12 = MEMORY[0x242615198](&unk_23BFFF0E4, v11);
  v1[19] = v12;
  v1[86] = v11;
  v1[87] = v12;
  MEMORY[0x24261512C](255, v1 + 86, v2, 0);
  v1[18] = sub_23BFF8968();
  v1[3] = sub_23BFF8968();
  v1[74] = v3;
  v1[73] = v4;
  v14 = type metadata accessor for VerticalStackCard(255, v3, v4, v13);
  v15 = MEMORY[0x242615198](&unk_23C0000E0, v14);
  v1[16] = v15;
  v1[86] = v14;
  v1[87] = v15;
  MEMORY[0x24261512C](255, v1 + 86, v2, 0);
  v1[4] = sub_23BFF8968();
  v17 = type metadata accessor for WideBrickView(255, v3, v4, v16);
  v18 = MEMORY[0x242615198](&protocol conformance descriptor for WideBrickView<A>, v17);
  v1[9] = v18;
  v1[86] = v17;
  v1[87] = v18;
  MEMORY[0x24261512C](255, v1 + 86, v2, 0);
  v1[6] = sub_23BFF8968();
  v1[8] = sub_23BFF8968();
  v1[11] = sub_23BFF8968();
  v1[12] = sub_23BFF8FD4();
  v1[13] = sub_23BFF862C();
  v1[15] = sub_23BFF8968();
  v1[39] = sub_23BFF862C();
  v1[7] = sub_23BFF862C();
  v19 = v1[80];
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v1[86] = v19;
  v1[87] = v1[75];
  v1[88] = AssociatedConformanceWitness;
  v1[89] = v1[79];
  type metadata accessor for CanvasContextMenu();
}

void sub_23BF0BD20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t OpaqueTypeConformance2;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t AssociatedConformanceWitness;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v9[10] = a1;
  v9[14] = sub_23BFF862C();
  v9[86] = v9[52];
  v9[87] = v9[51];
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v9[86] = v9[50];
  v9[87] = v9[49];
  v15 = swift_getOpaqueTypeConformance2();
  v9[86] = v9[43];
  v9[87] = v9[42];
  v16 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v13 - 184) = v15;
  *(_QWORD *)(v13 - 176) = v16;
  v17 = MEMORY[0x24BDEF3E0];
  *(_QWORD *)(v13 - 192) = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v9[40], v13 - 184);
  v18 = MEMORY[0x242615198](MEMORY[0x24BDF3F50], v9[44], v13 - 192);
  v19 = MEMORY[0x24BDECC60];
  *(_QWORD *)(v13 - 208) = v18;
  *(_QWORD *)(v13 - 200) = v19;
  v20 = MEMORY[0x24BDED308];
  v21 = MEMORY[0x242615198](MEMORY[0x24BDED308], v9[41], v13 - 208);
  v22 = sub_23BEA1F94(&qword_256AE3920, &qword_256AE3910, MEMORY[0x24BDF43B0]);
  *(_QWORD *)(v13 - 224) = v21;
  *(_QWORD *)(v13 - 216) = v22;
  v23 = MEMORY[0x242615198](v17, v9[47], v13 - 224);
  v24 = sub_23BEA1F94(&qword_256AE3928, &qword_256AE3918, MEMORY[0x24BDF4700]);
  *(_QWORD *)(v13 - 240) = v23;
  *(_QWORD *)(v13 - 232) = v24;
  v25 = MEMORY[0x242615198](v17, v9[48], v13 - 240);
  *(_QWORD *)(v13 - 256) = OpaqueTypeConformance2;
  *(_QWORD *)(v13 - 248) = v25;
  v26 = MEMORY[0x242615198](v17, v9[31], v13 - 256);
  v9[86] = v9[46];
  v9[87] = v9[45];
  v27 = swift_getOpaqueTypeConformance2();
  v9[86] = v9[38];
  v9[87] = v9[37];
  v28 = swift_getOpaqueTypeConformance2();
  v9[150] = v27;
  v9[151] = v28;
  v29 = MEMORY[0x242615198](v17, v9[36], v9 + 150);
  v9[148] = v26;
  v9[149] = v29;
  v30 = MEMORY[0x242615198](v17, v9[17], v9 + 148);
  v9[86] = v9[35];
  v9[87] = v9[34];
  v31 = swift_getOpaqueTypeConformance2();
  v9[86] = v9[33];
  v9[87] = v9[32];
  v32 = swift_getOpaqueTypeConformance2();
  v9[146] = v31;
  v9[147] = v32;
  v33 = MEMORY[0x242615198](v17, v9[24], v9 + 146);
  v9[86] = v9[30];
  v9[87] = v9[29];
  v9[144] = swift_getOpaqueTypeConformance2();
  v9[145] = v32;
  v34 = MEMORY[0x242615198](v17, v9[27], v9 + 144);
  v9[142] = v33;
  v9[143] = v34;
  v35 = MEMORY[0x242615198](v17, v9[28], v9 + 142);
  v9[140] = v30;
  v9[141] = v35;
  v36 = MEMORY[0x242615198](v17, v9[2], v9 + 140);
  v9[86] = v9[26];
  v9[87] = v9[25];
  v37 = swift_getOpaqueTypeConformance2();
  v9[86] = v9[23];
  v9[87] = v9[22];
  v38 = swift_getOpaqueTypeConformance2();
  v9[138] = v37;
  v9[139] = v38;
  v39 = MEMORY[0x242615198](v17, v9[5], v9 + 138);
  v9[86] = v9[21];
  v9[87] = v9[20];
  v40 = swift_getOpaqueTypeConformance2();
  v9[86] = v10;
  v9[87] = v9[19];
  v41 = swift_getOpaqueTypeConformance2();
  v9[136] = v40;
  v9[137] = v41;
  v42 = MEMORY[0x242615198](v17, v9[18], v9 + 136);
  v9[134] = v39;
  v9[135] = v42;
  v43 = MEMORY[0x242615198](v17, v9[3], v9 + 134);
  v9[86] = v12;
  v9[87] = v9[16];
  v9[132] = swift_getOpaqueTypeConformance2();
  v9[133] = v9[81];
  v44 = MEMORY[0x242615198](v17, v9[4], v9 + 132);
  v9[86] = v11;
  v9[87] = v9[9];
  v45 = swift_getOpaqueTypeConformance2();
  v9[130] = v44;
  v9[131] = v45;
  v46 = MEMORY[0x242615198](v17, v9[6], v9 + 130);
  v9[128] = v43;
  v9[129] = v46;
  v47 = MEMORY[0x242615198](v17, v9[8], v9 + 128);
  v9[126] = v36;
  v9[127] = v47;
  v9[125] = MEMORY[0x242615198](v17, v9[11], v9 + 126);
  v9[123] = MEMORY[0x242615198](MEMORY[0x24BDF3F50], v9[12], v9 + 125);
  v9[124] = v9[53];
  v48 = MEMORY[0x242615198](v20, v9[13], v9 + 123);
  v9[121] = MEMORY[0x24BDF5138];
  v9[122] = v48;
  v49 = MEMORY[0x242615198](v17, v9[15], v9 + 121);
  v50 = MEMORY[0x24BDF0910];
  v9[119] = v49;
  v9[120] = v50;
  v9[117] = MEMORY[0x242615198](v20, v9[39], v9 + 119);
  v9[118] = v50;
  v51 = MEMORY[0x242615198](v20, v9[7], v9 + 117);
  v52 = MEMORY[0x242615198](&unk_23BFFEE18, v9[10]);
  v9[115] = v51;
  v9[116] = v52;
  v53 = v9[14];
  v54 = MEMORY[0x242615198](v20, v53, v9 + 115);
  v9[86] = v53;
  v9[87] = v54;
  MEMORY[0x24261512C](255, v9 + 86, MEMORY[0x24BEC6710], 0);
  v55 = sub_23BFF8968();
  v56 = sub_23BFF8968();
  v57 = v9[54];
  v58 = MEMORY[0x242615198](MEMORY[0x24BEE12D8], v57);
  v59 = v9[55];
  v60 = v9[78];
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9[86] = v57;
  v9[87] = v59;
  v9[88] = v56;
  v9[89] = v58;
  v9[90] = AssociatedConformanceWitness;
  v62 = sub_23BFF910C();
  v9[86] = v53;
  v9[87] = v54;
  v9[113] = swift_getOpaqueTypeConformance2();
  v9[114] = v54;
  v63 = MEMORY[0x242615198](v17, v55, v9 + 113);
  v9[111] = v63;
  v9[112] = v63;
  v9[110] = MEMORY[0x242615198](v17, v56, v9 + 111);
  v64 = MEMORY[0x242615198](MEMORY[0x24BDF4A08], v62, v9 + 110);
  v9[55] = v62;
  v9[48] = v64;
  v65 = sub_23BFF9214();
  v9[51] = *(_QWORD *)(v65 - 8);
  MEMORY[0x24BDAC7A8](v65);
  v9[49] = (char *)&a9 - v66;
  v9[52] = v67;
  v68 = sub_23BFF862C();
  v9[56] = v68;
  v9[54] = *(_QWORD *)(v68 - 8);
  MEMORY[0x24BDAC7A8](v68);
  v9[50] = (char *)&a9 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v70);
  v9[53] = (char *)&a9 - v71;
  v9[86] = v9[69];
  v9[87] = v9[70];
  v9[88] = v9[72];
  v9[89] = v9[74];
  v9[90] = v9[80];
  v9[91] = v9[75];
  v9[92] = v9[76];
  v9[93] = v9[63];
  v9[94] = v9[64];
  v9[95] = v9[65];
  v9[96] = v9[66];
  v9[97] = v9[67];
  v9[98] = v9[77];
  v9[99] = v9[68];
  v9[100] = v60;
  v9[101] = v9[71];
  v9[102] = v9[73];
  v9[103] = v9[79];
  v9[104] = v9[81];
  v9[105] = v9[57];
  v9[106] = v9[58];
  v9[107] = v9[59];
  v9[108] = v9[62];
  v9[109] = v9[61];
  type metadata accessor for VerticalGridView();
}

uint64_t sub_23BF0C4A8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t);
  uint64_t v52;
  _QWORD v53[28];

  v18 = (uint64_t *)(v9[60] + *(int *)(result + 228));
  v19 = ceil((double)*v18 / (double)v18[2]);
  if ((~*(_QWORD *)&v19 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v19 <= -9.22337204e18)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (v19 >= 9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (((uint64_t)v19 & 0x8000000000000000) == 0)
  {
    v9[46] = (uint64_t)&a9;
    MEMORY[0x24BDAC7A8](result);
    v20 = v9[70];
    v53[2] = v9[69];
    v53[3] = v20;
    v21 = v9[74];
    v53[4] = v9[72];
    v53[5] = v21;
    v53[6] = v9[80];
    v53[7] = v11;
    v22 = v15;
    v23 = v9[63];
    v53[8] = v15;
    v53[9] = v23;
    v24 = v9[65];
    v53[10] = v9[64];
    v53[11] = v24;
    v25 = v9[67];
    v53[12] = v9[66];
    v53[13] = v25;
    v26 = v9[68];
    v53[14] = v9[77];
    v53[15] = v26;
    v27 = v9[71];
    v53[16] = v9[78];
    v53[17] = v27;
    v28 = v9[79];
    v53[18] = v9[73];
    v53[19] = v28;
    v53[20] = v17;
    v53[21] = v16;
    v53[22] = v12;
    v53[23] = v14;
    v53[24] = v13;
    v53[25] = v10;
    v30 = v29;
    v53[26] = v29;
    v9[47] = v31;
    sub_23BFAE358((void (*)(uint64_t *))sub_23BF14090, (uint64_t)v53, 0, v32);
    v9[45] = v33;
    v34 = sub_23BFF88A8();
    v9[44] = v34;
    v9[46] = (uint64_t)v53;
    MEMORY[0x24BDAC7A8](v34);
    v35 = v9[70];
    v53[-26] = v9[69];
    v53[-25] = v35;
    v36 = v9[74];
    v53[-24] = v9[72];
    v53[-23] = v36;
    v37 = v9[75];
    v53[-22] = v9[80];
    v53[-21] = v37;
    v38 = v9[63];
    v53[-20] = v22;
    v53[-19] = v38;
    v39 = v9[65];
    v53[-18] = v9[64];
    v53[-17] = v39;
    v40 = v9[67];
    v53[-16] = v9[66];
    v53[-15] = v40;
    v41 = v9[68];
    v53[-14] = v9[77];
    v53[-13] = v41;
    v42 = v9[71];
    v53[-12] = v9[78];
    v53[-11] = v42;
    v43 = v9[79];
    v53[-10] = v9[73];
    v53[-9] = v43;
    v53[-8] = v9[81];
    v53[-7] = v16;
    v53[-6] = v12;
    v53[-5] = v14;
    v53[-4] = v13;
    v53[-3] = v10;
    v52 = v30;
    v44 = v9[48];
    sub_23BF0EF38();
    v52 = v44;
    v45 = v9[49];
    sub_23BFF9208();
    v46 = v9[52];
    v47 = MEMORY[0x242615198](MEMORY[0x24BDF5210], v46);
    v48 = v9[50];
    sub_23BFF8EE4();
    (*(void (**)(uint64_t, uint64_t))(v9[51] + 8))(v45, v46);
    v9[82] = v47;
    v9[83] = MEMORY[0x24BDECC60];
    v49 = v9[56];
    MEMORY[0x242615198](MEMORY[0x24BDED308], v49, v9 + 82);
    v50 = v9[53];
    sub_23BEA72EC(v48, v49, v50);
    v51 = *(void (**)(uint64_t, uint64_t))(v9[54] + 8);
    v51(v48, v49);
    sub_23BEA5C0C(v50, v49, v9[1]);
    return ((uint64_t (*)(uint64_t, uint64_t))v51)(v50, v49);
  }
LABEL_9:
  __break(1u);
  return result;
}

void sub_23BF0C7F8(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, __int128 a9, __int128 a10, __int128 a11, __int128 a12, __int128 a13, __int128 a14, __int128 a15, __int128 a16, uint64_t a17, uint64_t a18)
{
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;

  v36 = a1;
  v37 = a8;
  v35 = a16;
  v34 = a15;
  v33 = a14;
  v32 = a13;
  v31 = a12;
  v30 = a11;
  v29 = a10;
  v28 = a9;
  v24 = sub_23BFF9154();
  MEMORY[0x24BDAC7A8](v24);
  v26 = (__int128 *)((char *)&v28 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v26 = xmmword_23BFFF290;
  (*(void (**)(_OWORD *, _QWORD))(v27 + 104))(v26, *MEMORY[0x24BDF4D40]);
  v38 = a2;
  v39 = a3;
  v40 = a4;
  v41 = a5;
  v42 = a6;
  v43 = a7;
  v44 = v28;
  v45 = v29;
  v46 = v30;
  v47 = v31;
  v48 = v32;
  v49 = v33;
  v50 = v34;
  v51 = v35;
  v52 = a17;
  v53 = a18;
  type metadata accessor for VerticalGridView();
}

uint64_t sub_23BF0C994()
{
  sub_23BFF9190();
  return sub_23BFF916C();
}

void sub_23BF0C9F4()
{
  type metadata accessor for VerticalGridView();
}

void sub_23BF0CB24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v15 = *(_QWORD *)(a1 - 8);
  v9[56] = a1;
  v9[57] = v15;
  v9[58] = *(_QWORD *)(v15 + 64);
  MEMORY[0x24BDAC7A8](a1);
  v9[55] = (char *)&a9 - v16;
  v9[80] = *(_QWORD *)(v10 + 32);
  v9[74] = swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  v9[54] = sub_23BFF94C0();
  v9[143] = v11;
  v9[144] = v12;
  v9[145] = v12;
  v9[146] = v14;
  v9[147] = v13;
  v9[148] = v13;
  type metadata accessor for ActionCardView();
}

void sub_23BF0CBD0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1[48] = a1;
  v7 = MEMORY[0x242615198](&unk_23C005608, a1);
  v1[47] = v7;
  v1[143] = a1;
  v1[144] = v7;
  v1[42] = MEMORY[0x24261512C](255, v1 + 143, MEMORY[0x24BDF3948], 0);
  v1[72] = sub_23BFF8ADC();
  v8 = (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088];
  v9 = sub_23BFF862C();
  v10 = sub_23BFF862C();
  v1[46] = v10;
  v11 = sub_23BEA1BB8((unint64_t *)&qword_256AE3908, v8, MEMORY[0x24BDF1078]);
  v1[53] = v11;
  v1[141] = v5;
  v1[142] = v11;
  v12 = MEMORY[0x24BDED308];
  v13 = MEMORY[0x242615198](MEMORY[0x24BDED308], v9, v1 + 141);
  v14 = MEMORY[0x24BDEEC40];
  v1[139] = v13;
  v1[140] = v14;
  v15 = MEMORY[0x242615198](v12, v10, v1 + 139);
  v1[45] = v15;
  v1[143] = v10;
  v1[144] = v15;
  v16 = MEMORY[0x24BDF3100];
  MEMORY[0x24261512C](255, v1 + 143, MEMORY[0x24BDF3100], 0);
  v17 = sub_23BFF862C();
  v1[39] = v17;
  v18 = MEMORY[0x24BDEBEE0];
  v1[137] = v13;
  v1[138] = v18;
  v19 = MEMORY[0x242615198](v12, v17, v1 + 137);
  v1[37] = v19;
  v1[143] = v17;
  v1[144] = v19;
  MEMORY[0x24261512C](255, v1 + 143, v16, 0);
  v1[36] = sub_23BFF8968();
  v1[40] = sub_23BFF8FD4();
  v1[38] = sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3910);
  v1[43] = sub_23BFF8968();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3918);
  v1[44] = sub_23BFF8968();
  v1[28] = sub_23BFF8968();
  v1[143] = v2;
  v1[144] = v3;
  v1[145] = v3;
  v1[146] = v1[82];
  v1[147] = v1[76];
  v1[148] = v5;
  v1[149] = v4;
  v1[150] = v4;
  v1[151] = v1[83];
  v1[152] = v1[77];
  type metadata accessor for FullWidthStageView();
}

void sub_23BF0CE1C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1[42] = a1;
  v7 = MEMORY[0x242615198](&unk_23C0077B8, a1);
  v1[41] = v7;
  v1[143] = a1;
  v1[144] = v7;
  v8 = MEMORY[0x24BDF3948];
  MEMORY[0x24261512C](255, v1 + 143, MEMORY[0x24BDF3948], 0);
  v1[51] = v3;
  v1[52] = v4;
  v10 = type metadata accessor for InfoActionCardView(255, v3, v4, v9);
  v1[35] = v10;
  v11 = MEMORY[0x242615198](&unk_23C007F20, v10);
  v1[34] = v11;
  v1[143] = v10;
  v1[144] = v11;
  MEMORY[0x24261512C](255, v1 + 143, v8, 0);
  v1[33] = sub_23BFF8968();
  v1[13] = sub_23BFF8968();
  v13 = type metadata accessor for LargeBrickView(255, v2, v5, v12);
  v1[32] = v13;
  v14 = MEMORY[0x242615198](&protocol conformance descriptor for LargeBrickView<A>, v13);
  v1[31] = v14;
  v1[143] = v13;
  v1[144] = v14;
  MEMORY[0x24261512C](255, v1 + 143, v8, 0);
  v16 = type metadata accessor for DynamicBrickView(255, v2, v5, v15);
  v1[30] = v16;
  v17 = MEMORY[0x242615198](&protocol conformance descriptor for DynamicBrickView<A>, v16);
  v1[29] = v17;
  v1[143] = v16;
  v1[144] = v17;
  MEMORY[0x24261512C](255, v1 + 143, v8, 0);
  v1[21] = sub_23BFF8968();
  v19 = type metadata accessor for MonogramVerticalStackView(255, v2, v5, v18);
  v1[27] = v19;
  v20 = MEMORY[0x242615198](&unk_23BFFA1F4, v19);
  v1[26] = v20;
  v1[143] = v19;
  v1[144] = v20;
  MEMORY[0x24261512C](255, v1 + 143, v8, 0);
  v1[24] = sub_23BFF8968();
  v1[25] = sub_23BFF8968();
  *v1 = sub_23BFF8968();
  v22 = type metadata accessor for StandardCardView(255, v2, v5, v21);
  v1[23] = v22;
  v23 = MEMORY[0x242615198](&unk_23C007BD0, v22);
  v1[22] = v23;
  v1[143] = v22;
  v1[144] = v23;
  MEMORY[0x24261512C](255, v1 + 143, v8, 0);
  v1[143] = v2;
  v1[144] = v3;
  v1[145] = v5;
  v1[146] = v4;
  type metadata accessor for StandardHorizontalStackView();
}

void sub_23BF0D078(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t AssociatedConformanceWitness;

  v1[20] = a1;
  v6 = MEMORY[0x242615198](&unk_23C0008E8, a1);
  v1[19] = v6;
  v1[143] = a1;
  v1[144] = v6;
  MEMORY[0x24261512C](255, v1 + 143, v2, 0);
  v1[3] = sub_23BFF8968();
  v8 = type metadata accessor for StandardVerticalStackView(255, v3, v4, v7);
  v9 = MEMORY[0x242615198](&unk_23C0073B8, v8);
  v1[18] = v9;
  v1[143] = v8;
  v1[144] = v9;
  MEMORY[0x24261512C](255, v1 + 143, v2, 0);
  v11 = type metadata accessor for TallCardView(255, v3, v4, v10);
  v1[17] = v11;
  v12 = MEMORY[0x242615198](&unk_23BFFF0E4, v11);
  v1[16] = v12;
  v1[143] = v11;
  v1[144] = v12;
  MEMORY[0x24261512C](255, v1 + 143, v2, 0);
  v1[15] = sub_23BFF8968();
  v1[1] = sub_23BFF8968();
  v1[49] = v3;
  v1[50] = v4;
  v14 = type metadata accessor for VerticalStackCard(255, v3, v4, v13);
  v15 = MEMORY[0x242615198](&unk_23C0000E0, v14);
  v1[12] = v15;
  v1[143] = v14;
  v1[144] = v15;
  MEMORY[0x24261512C](255, v1 + 143, v2, 0);
  v1[2] = sub_23BFF8968();
  v17 = type metadata accessor for WideBrickView(255, v3, v4, v16);
  v18 = MEMORY[0x242615198](&protocol conformance descriptor for WideBrickView<A>, v17);
  v1[6] = v18;
  v1[143] = v17;
  v1[144] = v18;
  MEMORY[0x24261512C](255, v1 + 143, v2, 0);
  v1[4] = sub_23BFF8968();
  v1[5] = sub_23BFF8968();
  v1[8] = sub_23BFF8968();
  v1[9] = sub_23BFF8FD4();
  v1[10] = sub_23BFF862C();
  v1[11] = sub_23BFF8968();
  v1[14] = sub_23BFF862C();
  sub_23BFF862C();
  v19 = v1[73];
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v1[143] = v19;
  v1[144] = v1[79];
  v1[145] = AssociatedConformanceWitness;
  v1[146] = v1[78];
  type metadata accessor for CanvasContextMenu();
}

uint64_t sub_23BF0D318(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t OpaqueTypeConformance2;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t AssociatedConformanceWitness;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  __n128 v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(_BYTE *, uint64_t);
  _BYTE v85[80];

  v1[7] = a1;
  v1[72] = sub_23BFF862C();
  v1[143] = v1[48];
  v1[144] = v1[47];
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v1[143] = v1[46];
  v1[144] = v1[45];
  v7 = swift_getOpaqueTypeConformance2();
  v1[143] = v1[39];
  v1[144] = v1[37];
  v8 = swift_getOpaqueTypeConformance2();
  v1[135] = v7;
  v1[136] = v8;
  v9 = MEMORY[0x24BDEF3E0];
  v1[134] = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v1[36], v1 + 135);
  v10 = MEMORY[0x242615198](MEMORY[0x24BDF3F50], v1[40], v1 + 134);
  v11 = MEMORY[0x24BDECC60];
  v1[132] = v10;
  v1[133] = v11;
  v12 = MEMORY[0x242615198](MEMORY[0x24BDED308], v1[38], v1 + 132);
  v13 = sub_23BEA1F94(&qword_256AE3920, &qword_256AE3910, MEMORY[0x24BDF43B0]);
  v1[130] = v12;
  v1[131] = v13;
  v14 = MEMORY[0x242615198](v9, v1[43], v1 + 130);
  v15 = sub_23BEA1F94(&qword_256AE3928, &qword_256AE3918, MEMORY[0x24BDF4700]);
  v1[128] = v14;
  v1[129] = v15;
  v16 = MEMORY[0x242615198](v9, v1[44], v1 + 128);
  v1[126] = OpaqueTypeConformance2;
  v1[127] = v16;
  v17 = MEMORY[0x242615198](v9, v1[28], v1 + 126);
  v1[143] = v1[42];
  v1[144] = v1[41];
  v18 = swift_getOpaqueTypeConformance2();
  v1[143] = v1[35];
  v1[144] = v1[34];
  v19 = swift_getOpaqueTypeConformance2();
  v1[124] = v18;
  v1[125] = v19;
  v20 = MEMORY[0x242615198](v9, v1[33], v1 + 124);
  v1[122] = v17;
  v1[123] = v20;
  v21 = MEMORY[0x242615198](v9, v1[13], v1 + 122);
  v1[143] = v1[32];
  v1[144] = v1[31];
  v22 = swift_getOpaqueTypeConformance2();
  v1[143] = v1[30];
  v1[144] = v1[29];
  v23 = swift_getOpaqueTypeConformance2();
  v1[120] = v22;
  v1[121] = v23;
  v24 = MEMORY[0x242615198](v9, v1[21], v1 + 120);
  v1[143] = v1[27];
  v1[144] = v1[26];
  v1[118] = swift_getOpaqueTypeConformance2();
  v1[119] = v23;
  v25 = MEMORY[0x242615198](v9, v1[24], v1 + 118);
  v1[116] = v24;
  v1[117] = v25;
  v26 = MEMORY[0x242615198](v9, v1[25], v1 + 116);
  v1[114] = v21;
  v1[115] = v26;
  v27 = MEMORY[0x242615198](v9, *v1, v1 + 114);
  v1[143] = v1[23];
  v1[144] = v1[22];
  v28 = swift_getOpaqueTypeConformance2();
  v1[143] = v1[20];
  v1[144] = v1[19];
  v29 = swift_getOpaqueTypeConformance2();
  v1[112] = v28;
  v1[113] = v29;
  v30 = MEMORY[0x242615198](v9, v1[3], v1 + 112);
  v1[143] = v2;
  v1[144] = v1[18];
  v31 = swift_getOpaqueTypeConformance2();
  v1[143] = v1[17];
  v1[144] = v1[16];
  v32 = swift_getOpaqueTypeConformance2();
  v1[110] = v31;
  v1[111] = v32;
  v33 = MEMORY[0x242615198](v9, v1[15], v1 + 110);
  v1[108] = v30;
  v1[109] = v33;
  v34 = MEMORY[0x242615198](v9, v1[1], v1 + 108);
  v1[143] = v3;
  v1[144] = v1[12];
  v1[106] = swift_getOpaqueTypeConformance2();
  v1[107] = v1[83];
  v35 = MEMORY[0x242615198](v9, v1[2], v1 + 106);
  v1[143] = v4;
  v1[144] = v1[6];
  v36 = swift_getOpaqueTypeConformance2();
  v1[104] = v35;
  v1[105] = v36;
  v37 = MEMORY[0x242615198](v9, v1[4], v1 + 104);
  v1[102] = v34;
  v1[103] = v37;
  v38 = MEMORY[0x242615198](v9, v1[5], v1 + 102);
  v1[100] = v27;
  v1[101] = v38;
  v1[99] = MEMORY[0x242615198](v9, v1[8], v1 + 100);
  v1[97] = MEMORY[0x242615198](MEMORY[0x24BDF3F50], v1[9], v1 + 99);
  v1[98] = v1[53];
  v39 = MEMORY[0x24BDED308];
  v40 = MEMORY[0x242615198](MEMORY[0x24BDED308], v1[10], v1 + 97);
  v1[95] = MEMORY[0x24BDF5138];
  v1[96] = v40;
  v41 = MEMORY[0x242615198](v9, v1[11], v1 + 95);
  v42 = MEMORY[0x24BDF0910];
  v1[93] = v41;
  v1[94] = v42;
  v1[91] = MEMORY[0x242615198](v39, v1[14], v1 + 93);
  v1[92] = v42;
  v43 = MEMORY[0x242615198](v39, v5, v1 + 91);
  v44 = MEMORY[0x242615198](&unk_23BFFEE18, v1[7]);
  v1[89] = v43;
  v1[90] = v44;
  v45 = v1[72];
  v46 = MEMORY[0x242615198](v39, v45, v1 + 89);
  v1[53] = v46;
  v1[143] = v45;
  v1[144] = v46;
  MEMORY[0x24261512C](255, v1 + 143, MEMORY[0x24BEC6710], 0);
  v1[48] = sub_23BFF8968();
  v47 = sub_23BFF8968();
  v1[47] = v47;
  v48 = v1[54];
  v49 = MEMORY[0x242615198](MEMORY[0x24BEE12D8], v48);
  v50 = v1[81];
  v51 = v1[74];
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v1[143] = v48;
  v1[144] = v51;
  v1[145] = v47;
  v1[146] = v49;
  v1[147] = AssociatedConformanceWitness;
  v53 = sub_23BFF910C();
  v1[54] = *(_QWORD *)(v53 - 8);
  MEMORY[0x24BDAC7A8](v53);
  v55 = &v85[-((v54 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v57 = MEMORY[0x24BDAC7A8](v56);
  v59 = &v85[-v58];
  v60 = v1[56];
  v61 = v1[57];
  v1[46] = *(_QWORD *)(v1[59] + *(int *)(v60 + 212));
  v62 = v1[55];
  (*(void (**)(uint64_t, __n128))(v61 + 16))(v62, v57);
  v63 = (*(unsigned __int8 *)(v61 + 80) + 208) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80);
  v64 = (char *)swift_allocObject();
  v65 = v1[51];
  *((_QWORD *)v64 + 2) = v1[66];
  *((_QWORD *)v64 + 3) = v65;
  v66 = v1[49];
  *((_QWORD *)v64 + 4) = v1[67];
  *((_QWORD *)v64 + 5) = v66;
  v67 = v1[79];
  *((_QWORD *)v64 + 6) = v1[73];
  *((_QWORD *)v64 + 7) = v67;
  v68 = v1[60];
  *((_QWORD *)v64 + 8) = v1[82];
  *((_QWORD *)v64 + 9) = v68;
  v69 = v1[62];
  *((_QWORD *)v64 + 10) = v1[61];
  *((_QWORD *)v64 + 11) = v69;
  v70 = v1[64];
  *((_QWORD *)v64 + 12) = v1[63];
  *((_QWORD *)v64 + 13) = v70;
  v71 = v1[65];
  *((_QWORD *)v64 + 14) = v1[76];
  *((_QWORD *)v64 + 15) = v71;
  v72 = v1[52];
  *((_QWORD *)v64 + 16) = v50;
  *((_QWORD *)v64 + 17) = v72;
  v73 = v1[78];
  *((_QWORD *)v64 + 18) = v1[50];
  *((_QWORD *)v64 + 19) = v73;
  v74 = v1[68];
  *((_QWORD *)v64 + 20) = v1[83];
  *((_QWORD *)v64 + 21) = v74;
  v75 = v1[70];
  *((_QWORD *)v64 + 22) = v1[69];
  *((_QWORD *)v64 + 23) = v75;
  v76 = v1[75];
  *((_QWORD *)v64 + 24) = v1[77];
  *((_QWORD *)v64 + 25) = v76;
  (*(void (**)(char *, uint64_t, uint64_t))(v61 + 32))(&v64[v63], v62, v60);
  v77 = v1[46];
  swift_bridgeObjectRetain();
  v1[143] = v1[72];
  v78 = v1[53];
  v1[144] = v78;
  v1[87] = swift_getOpaqueTypeConformance2();
  v1[88] = v78;
  v79 = MEMORY[0x24BDEF3E0];
  v80 = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v1[48], v1 + 87);
  v1[85] = v80;
  v1[86] = v80;
  v81 = v1[47];
  v82 = MEMORY[0x242615198](v79, v81, v1 + 85);
  sub_23BF49C10(v77, (uint64_t)sub_23BF14448, (uint64_t)v64, v1[74], v81, v1[81], v82, *(_QWORD *)(v76 + 24), v1[80]);
  v1[84] = v82;
  MEMORY[0x242615198](MEMORY[0x24BDF4A08], v53, v1 + 84);
  sub_23BEA72EC((uint64_t)v55, v53, (uint64_t)v59);
  v83 = *(void (**)(_BYTE *, uint64_t))(v1[54] + 8);
  v83(v55, v53);
  sub_23BEA5C0C((uint64_t)v59, v53, v1[71]);
  return ((uint64_t (*)(_BYTE *, uint64_t))v83)(v59, v53);
}

void sub_23BF0DB24()
{
  type metadata accessor for ActionCardView();
}

void sub_23BF0DC1C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1[53] = a1;
  v8 = MEMORY[0x242615198](&unk_23C005608, a1);
  v1[48] = v8;
  v1[87] = a1;
  v1[88] = v8;
  v1[43] = MEMORY[0x24261512C](255, v1 + 87, MEMORY[0x24BDF3948], 0);
  v1[36] = sub_23BFF8ADC();
  v9 = (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088];
  v10 = sub_23BFF862C();
  v11 = sub_23BFF862C();
  v1[47] = v11;
  v12 = sub_23BEA1BB8((unint64_t *)&qword_256AE3908, v9, MEMORY[0x24BDF1078]);
  v1[67] = v12;
  *(_QWORD *)(v6 - 104) = v2;
  *(_QWORD *)(v6 - 96) = v12;
  v13 = MEMORY[0x24BDED308];
  v14 = MEMORY[0x242615198](MEMORY[0x24BDED308], v10, v6 - 104);
  v15 = MEMORY[0x24BDEEC40];
  *(_QWORD *)(v6 - 120) = v14;
  *(_QWORD *)(v6 - 112) = v15;
  v16 = MEMORY[0x242615198](v13, v11, v6 - 120);
  v1[46] = v16;
  v1[87] = v11;
  v1[88] = v16;
  v17 = MEMORY[0x24BDF3100];
  MEMORY[0x24261512C](255, v1 + 87, MEMORY[0x24BDF3100], 0);
  v18 = sub_23BFF862C();
  v1[40] = v18;
  v19 = MEMORY[0x24BDEBEE0];
  *(_QWORD *)(v6 - 136) = v14;
  *(_QWORD *)(v6 - 128) = v19;
  v20 = MEMORY[0x242615198](v13, v18, v6 - 136);
  v1[39] = v20;
  v1[87] = v18;
  v1[88] = v20;
  MEMORY[0x24261512C](255, v1 + 87, v17, 0);
  v1[37] = sub_23BFF8968();
  v1[41] = sub_23BFF8FD4();
  v1[38] = sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3910);
  v1[44] = sub_23BFF8968();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3918);
  v1[45] = sub_23BFF8968();
  v1[28] = sub_23BFF8968();
  v1[87] = v4;
  v1[88] = v3;
  v1[89] = v3;
  v1[90] = v1[77];
  v1[91] = v1[69];
  v1[92] = v2;
  v1[93] = v5;
  v1[94] = v5;
  v1[95] = v1[78];
  v1[96] = v1[71];
  type metadata accessor for FullWidthStageView();
}

void sub_23BF0DE5C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1[43] = a1;
  v7 = MEMORY[0x242615198](&unk_23C0077B8, a1);
  v1[42] = v7;
  v1[87] = a1;
  v1[88] = v7;
  v8 = MEMORY[0x24BDF3948];
  MEMORY[0x24261512C](255, v1 + 87, MEMORY[0x24BDF3948], 0);
  v1[51] = v3;
  v1[52] = v5;
  v10 = type metadata accessor for InfoActionCardView(255, v3, v5, v9);
  v1[35] = v10;
  v11 = MEMORY[0x242615198](&unk_23C007F20, v10);
  v1[34] = v11;
  v1[87] = v10;
  v1[88] = v11;
  MEMORY[0x24261512C](255, v1 + 87, v8, 0);
  v1[33] = sub_23BFF8968();
  v1[13] = sub_23BFF8968();
  v13 = type metadata accessor for LargeBrickView(255, v4, v2, v12);
  v1[32] = v13;
  v14 = MEMORY[0x242615198](&protocol conformance descriptor for LargeBrickView<A>, v13);
  v1[31] = v14;
  v1[87] = v13;
  v1[88] = v14;
  MEMORY[0x24261512C](255, v1 + 87, v8, 0);
  v16 = type metadata accessor for DynamicBrickView(255, v4, v2, v15);
  v1[30] = v16;
  v17 = MEMORY[0x242615198](&protocol conformance descriptor for DynamicBrickView<A>, v16);
  v1[29] = v17;
  v1[87] = v16;
  v1[88] = v17;
  MEMORY[0x24261512C](255, v1 + 87, v8, 0);
  v1[21] = sub_23BFF8968();
  v19 = type metadata accessor for MonogramVerticalStackView(255, v4, v2, v18);
  v1[27] = v19;
  v20 = MEMORY[0x242615198](&unk_23BFFA1F4, v19);
  v1[26] = v20;
  v1[87] = v19;
  v1[88] = v20;
  MEMORY[0x24261512C](255, v1 + 87, v8, 0);
  v1[24] = sub_23BFF8968();
  v1[25] = sub_23BFF8968();
  sub_23BFF8968();
  v22 = type metadata accessor for StandardCardView(255, v4, v2, v21);
  v1[23] = v22;
  v23 = MEMORY[0x242615198](&unk_23C007BD0, v22);
  v1[22] = v23;
  v1[87] = v22;
  v1[88] = v23;
  MEMORY[0x24261512C](255, v1 + 87, v8, 0);
  v1[87] = v4;
  v1[88] = v3;
  v1[89] = v2;
  v1[90] = v5;
  type metadata accessor for StandardHorizontalStackView();
}

void sub_23BF0E0B4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t AssociatedConformanceWitness;

  v1[20] = a1;
  v6 = MEMORY[0x242615198](&unk_23C0008E8, a1);
  v1[19] = v6;
  v1[87] = a1;
  v1[88] = v6;
  MEMORY[0x24261512C](255, v1 + 87, v3, 0);
  v1[2] = sub_23BFF8968();
  v8 = type metadata accessor for StandardVerticalStackView(255, v4, v2, v7);
  v1[18] = v8;
  v9 = MEMORY[0x242615198](&unk_23C0073B8, v8);
  v1[17] = v9;
  v1[87] = v8;
  v1[88] = v9;
  MEMORY[0x24261512C](255, v1 + 87, v3, 0);
  v11 = type metadata accessor for TallCardView(255, v4, v2, v10);
  v1[16] = v11;
  v12 = MEMORY[0x242615198](&unk_23BFFF0E4, v11);
  v1[15] = v12;
  v1[87] = v11;
  v1[88] = v12;
  MEMORY[0x24261512C](255, v1 + 87, v3, 0);
  v1[14] = sub_23BFF8968();
  *v1 = sub_23BFF8968();
  v1[49] = v4;
  v1[50] = v2;
  v14 = type metadata accessor for VerticalStackCard(255, v4, v2, v13);
  v15 = MEMORY[0x242615198](&unk_23C0000E0, v14);
  v1[12] = v15;
  v1[87] = v14;
  v1[88] = v15;
  MEMORY[0x24261512C](255, v1 + 87, v3, 0);
  v1[1] = sub_23BFF8968();
  v17 = type metadata accessor for WideBrickView(255, v4, v2, v16);
  v18 = MEMORY[0x242615198](&protocol conformance descriptor for WideBrickView<A>, v17);
  v1[6] = v18;
  v1[87] = v17;
  v1[88] = v18;
  MEMORY[0x24261512C](255, v1 + 87, v3, 0);
  v1[3] = sub_23BFF8968();
  v1[5] = sub_23BFF8968();
  v1[8] = sub_23BFF8968();
  v1[9] = sub_23BFF8FD4();
  v1[10] = sub_23BFF862C();
  v1[11] = sub_23BFF8968();
  v1[36] = sub_23BFF862C();
  v1[4] = sub_23BFF862C();
  v19 = v1[68];
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v1[87] = v19;
  v1[88] = v1[72];
  v1[89] = AssociatedConformanceWitness;
  v1[90] = v1[73];
  type metadata accessor for CanvasContextMenu();
}

void sub_23BF0E360(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t OpaqueTypeConformance2;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t TupleTypeMetadata2;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  __n128 v71;
  uint64_t v72;

  v9[7] = a1;
  v14 = sub_23BFF862C();
  v9[87] = v9[53];
  v9[88] = v9[48];
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v9[87] = v9[47];
  v9[88] = v9[46];
  v16 = swift_getOpaqueTypeConformance2();
  v9[87] = v9[40];
  v9[88] = v9[39];
  v17 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v13 - 152) = v16;
  *(_QWORD *)(v13 - 144) = v17;
  v18 = MEMORY[0x24BDEF3E0];
  *(_QWORD *)(v13 - 160) = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v9[37], v13 - 152);
  v19 = MEMORY[0x242615198](MEMORY[0x24BDF3F50], v9[41], v13 - 160);
  v20 = MEMORY[0x24BDECC60];
  *(_QWORD *)(v13 - 176) = v19;
  *(_QWORD *)(v13 - 168) = v20;
  v21 = MEMORY[0x242615198](MEMORY[0x24BDED308], v9[38], v13 - 176);
  v22 = sub_23BEA1F94(&qword_256AE3920, &qword_256AE3910, MEMORY[0x24BDF43B0]);
  *(_QWORD *)(v13 - 192) = v21;
  *(_QWORD *)(v13 - 184) = v22;
  v23 = MEMORY[0x242615198](v18, v9[44], v13 - 192);
  v24 = sub_23BEA1F94(&qword_256AE3928, &qword_256AE3918, MEMORY[0x24BDF4700]);
  *(_QWORD *)(v13 - 208) = v23;
  *(_QWORD *)(v13 - 200) = v24;
  v25 = MEMORY[0x242615198](v18, v9[45], v13 - 208);
  *(_QWORD *)(v13 - 224) = OpaqueTypeConformance2;
  *(_QWORD *)(v13 - 216) = v25;
  v26 = MEMORY[0x242615198](v18, v9[28], v13 - 224);
  v9[87] = v9[43];
  v9[88] = v9[42];
  v27 = swift_getOpaqueTypeConformance2();
  v9[87] = v9[35];
  v9[88] = v9[34];
  v28 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v13 - 240) = v27;
  *(_QWORD *)(v13 - 232) = v28;
  v29 = MEMORY[0x242615198](v18, v9[33], v13 - 240);
  *(_QWORD *)(v13 - 256) = v26;
  *(_QWORD *)(v13 - 248) = v29;
  v30 = MEMORY[0x242615198](v18, v9[13], v13 - 256);
  v9[87] = v9[32];
  v9[88] = v9[31];
  v31 = swift_getOpaqueTypeConformance2();
  v9[87] = v9[30];
  v9[88] = v9[29];
  v32 = swift_getOpaqueTypeConformance2();
  v9[142] = v31;
  v9[143] = v32;
  v33 = MEMORY[0x242615198](v18, v9[21], v9 + 142);
  v9[87] = v9[27];
  v9[88] = v9[26];
  v9[140] = swift_getOpaqueTypeConformance2();
  v9[141] = v32;
  v34 = MEMORY[0x242615198](v18, v9[24], v9 + 140);
  v9[138] = v33;
  v9[139] = v34;
  v35 = MEMORY[0x242615198](v18, v9[25], v9 + 138);
  v9[136] = v30;
  v9[137] = v35;
  v36 = MEMORY[0x242615198](v18, v11, v9 + 136);
  v9[87] = v9[23];
  v9[88] = v9[22];
  v37 = swift_getOpaqueTypeConformance2();
  v9[87] = v9[20];
  v9[88] = v9[19];
  v38 = swift_getOpaqueTypeConformance2();
  v9[134] = v37;
  v9[135] = v38;
  v39 = MEMORY[0x242615198](v18, v9[2], v9 + 134);
  v9[87] = v9[18];
  v9[88] = v9[17];
  v40 = swift_getOpaqueTypeConformance2();
  v9[87] = v9[16];
  v9[88] = v9[15];
  v41 = swift_getOpaqueTypeConformance2();
  v9[132] = v40;
  v9[133] = v41;
  v42 = MEMORY[0x242615198](v18, v9[14], v9 + 132);
  v9[130] = v39;
  v9[131] = v42;
  v43 = MEMORY[0x242615198](v18, *v9, v9 + 130);
  v9[87] = v10;
  v9[88] = v9[12];
  v9[128] = swift_getOpaqueTypeConformance2();
  v9[129] = v9[78];
  v44 = MEMORY[0x242615198](v18, v9[1], v9 + 128);
  v9[87] = v12;
  v9[88] = v9[6];
  v45 = swift_getOpaqueTypeConformance2();
  v9[126] = v44;
  v9[127] = v45;
  v46 = MEMORY[0x242615198](v18, v9[3], v9 + 126);
  v9[124] = v43;
  v9[125] = v46;
  v47 = MEMORY[0x242615198](v18, v9[5], v9 + 124);
  v9[122] = v36;
  v9[123] = v47;
  v9[121] = MEMORY[0x242615198](v18, v9[8], v9 + 122);
  v9[119] = MEMORY[0x242615198](MEMORY[0x24BDF3F50], v9[9], v9 + 121);
  v9[120] = v9[67];
  v48 = MEMORY[0x24BDED308];
  v49 = MEMORY[0x242615198](MEMORY[0x24BDED308], v9[10], v9 + 119);
  v9[117] = MEMORY[0x24BDF5138];
  v9[118] = v49;
  v50 = MEMORY[0x242615198](v18, v9[11], v9 + 117);
  v51 = MEMORY[0x24BDF0910];
  v9[115] = v50;
  v9[116] = v51;
  v9[113] = MEMORY[0x242615198](v48, v9[36], v9 + 115);
  v9[114] = v51;
  v52 = MEMORY[0x242615198](v48, v9[4], v9 + 113);
  v53 = MEMORY[0x242615198](&unk_23BFFEE18, v9[7]);
  v9[111] = v52;
  v9[112] = v53;
  v54 = MEMORY[0x242615198](v48, v14, v9 + 111);
  v9[87] = v14;
  v9[48] = v54;
  v9[88] = v54;
  MEMORY[0x24261512C](255, v9 + 87, MEMORY[0x24BEC6710], 0);
  v9[53] = v14;
  v55 = sub_23BFF8968();
  v9[43] = *(_QWORD *)(v55 - 8);
  MEMORY[0x24BDAC7A8](v55);
  v9[47] = (char *)&a9 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v57);
  v9[46] = (char *)&a9 - v58;
  v59 = v9[70];
  v60 = *(_QWORD *)(v59 - 8);
  MEMORY[0x24BDAC7A8](v61);
  v9[38] = (char *)&a9 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BFF96A0();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v9[39] = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  MEMORY[0x24BDAC7A8](v64);
  v9[41] = (char *)&a9 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v66);
  MEMORY[0x24BDAC7A8](v67);
  v69 = (char *)&a9 - v68;
  v9[40] = v55;
  v70 = sub_23BFF8968();
  v9[44] = *(_QWORD *)(v70 - 8);
  v9[45] = v70;
  v71 = MEMORY[0x24BDAC7A8](v70);
  v9[42] = (char *)&a9 - v72;
  v9[67] = v60;
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v60 + 16))(v69, v9[74], v59, v71);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v60 + 56))(v69, 0, 1, v59);
  v9[87] = v9[59];
  v9[88] = v9[51];
  v9[89] = v9[61];
  v9[90] = v9[49];
  v9[91] = v9[68];
  v9[92] = v9[72];
  v9[93] = v9[77];
  v9[94] = v9[55];
  v9[95] = v9[56];
  v9[96] = v9[57];
  v9[97] = v9[58];
  v9[98] = v9[54];
  v9[99] = v9[69];
  v9[100] = v9[60];
  v9[101] = v59;
  v9[102] = v9[52];
  v9[103] = v9[50];
  v9[104] = v9[73];
  v9[105] = v9[78];
  v9[106] = v9[63];
  v9[107] = v9[64];
  v9[108] = v9[62];
  v9[109] = v9[71];
  v9[110] = v9[76];
  type metadata accessor for VerticalGridView();
}

void sub_23BF0EAF8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  unsigned int (*v13)(uint64_t, uint64_t, uint64_t);
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  void (*v22)(uint64_t, uint64_t);
  void (*v23)(uint64_t, uint64_t);

  v1[78] = a1;
  v1[87] = *(_QWORD *)(v1[75] + *(int *)(a1 + 212));
  v9 = sub_23BFF94C0();
  MEMORY[0x242615198](MEMORY[0x24BEE12B0], v9);
  sub_23BFF9394();
  v1[73] = v3;
  v10 = v5 + *(int *)(v3 + 48);
  v11 = v4;
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v12(v5, v7, v6);
  v12(v10, v2, v6);
  v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1[67] + 48);
  if (v13(v5, 1, v8) == 1)
  {
    v1[77] = v5;
    v14 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v14(v2, v6);
    v14(v7, v6);
    if (v13(v10, 1, v8) == 1)
    {
      v14(v1[77], v6);
      v15 = v1[47];
      goto LABEL_8;
    }
  }
  else
  {
    v1[71] = v7;
    v1[72] = v11;
    v12(v1[41], v5, v6);
    v16 = v8;
    if (v13(v10, 1, v8) != 1)
    {
      v18 = v1[67];
      v19 = v1[38];
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32))(v19, v10, v8);
      v20 = v1[41];
      v21 = sub_23BFF93AC();
      v22 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
      v22(v19, v8);
      v23 = *(void (**)(uint64_t, uint64_t))(v1[72] + 8);
      v23(v2, v6);
      v23(v1[71], v6);
      v22(v20, v16);
      v23(v5, v6);
      v15 = v1[47];
      if ((v21 & 1) != 0)
LABEL_8:
        sub_23BF075A8(v1[74], v1[65], (_QWORD *)v1[78], v15);
LABEL_9:
      sub_23BF075A8(v1[74], v1[65], (_QWORD *)v1[78], v15);
    }
    v1[77] = v5;
    v17 = *(void (**)(uint64_t, uint64_t))(v1[72] + 8);
    v17(v2, v6);
    v17(v1[71], v6);
    (*(void (**)(_QWORD, uint64_t))(v1[67] + 8))(v1[41], v8);
  }
  (*(void (**)(_QWORD, _QWORD))(v1[39] + 8))(v1[77], v1[73]);
  v15 = v1[47];
  goto LABEL_9;
}

void sub_23BF0EDE4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v0[87] = v0[53];
  v0[88] = v2;
  v0[85] = swift_getOpaqueTypeConformance2();
  v0[86] = v2;
  MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v1, v0 + 85);
  v4 = v0[46];
  sub_23BEA72EC(v3, v1, v4);
  (*(void (**)(uint64_t, uint64_t))(v0[43] + 8))(v3, v1);
  sub_23BEA5C0C(v4, v1, v3);
  sub_23BEA5CE8(v3, v1, v1);
  JUMPOUT(0x23BF0EE80);
}

uint64_t sub_23BF0EF38()
{
  sub_23BFF89D4();
  sub_23BEA1BB8(qword_256AE5218, (uint64_t (*)(uint64_t))MEMORY[0x24BDEF998], MEMORY[0x24BDEF9B8]);
  return sub_23BFF9A48();
}

void sub_23BF0EF9C()
{
  type metadata accessor for VerticalGridView();
}

void sub_23BF0F07C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v9[8] = a1;
  v14 = *(_QWORD *)(a1 - 8);
  v9[5] = v14;
  v9[4] = *(_QWORD *)(v14 + 64);
  MEMORY[0x24BDAC7A8](a1);
  v9[31] = (char *)&a9 - v15;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3528);
  v9[34] = v10;
  v9[54] = v10;
  v9[55] = v13;
  v9[27] = v13;
  v9[28] = v12;
  v9[56] = v12;
  v9[57] = v11;
  v9[29] = v11;
  type metadata accessor for CanvasSectionHeaderView();
}

void sub_23BF0F0E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t AssociatedConformanceWitness;
  uint64_t v20;

  sub_23BFF8A4C();
  v9[37] = a1;
  v9[38] = sub_23BFF862C();
  v15 = sub_23BFF8968();
  v9[33] = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v9[23] = (char *)&a9 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v9[3] = (char *)&a9 - v18;
  v9[26] = v10;
  v9[14] = v12;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9[13] = v13;
  v9[54] = v13;
  v9[55] = v11;
  v9[9] = v11;
  v20 = v9[40];
  v9[56] = AssociatedConformanceWitness;
  v9[57] = v20;
  type metadata accessor for CanvasSectionHeader();
}

uint64_t sub_23BF0F1B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v26;
  int *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  __int128 v48;
  uint64_t v49;
  uint64_t (*v50)(uint64_t, uint64_t);
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE v57[64];

  v4 = sub_23BFF96A0();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = &v57[-v6];
  v8 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = &v57[-v10];
  v12 = sub_23BFF96A0();
  *(_QWORD *)(v1 + 288) = v12;
  *(_QWORD *)(v1 + 256) = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = &v57[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = MEMORY[0x24BDAC7A8](v15);
  *(_QWORD *)(v1 + 280) = &v57[-v17];
  v18 = *(_QWORD *)(v1 + 240);
  (*(void (**)(_BYTE *, __n128))(v5 + 16))(v7, v16);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48))(v7, 1, a1) != 1)
  {
    v25 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 32);
    *(_QWORD *)v1 = v11;
    v25(v11, v7, a1);
    *(_QWORD *)(v1 + 8) = v8;
    *(_QWORD *)(v1 + 16) = v2;
    v26 = *(_QWORD *)(v1 + 40);
    v27 = *(int **)(v1 + 64);
    (*(void (**)(_QWORD, uint64_t, int *))(v26 + 16))(*(_QWORD *)(v1 + 248), v18, v27);
    v28 = (*(unsigned __int8 *)(v26 + 80) + 208) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
    v29 = (char *)swift_allocObject();
    v30 = *(_QWORD *)(v1 + 272);
    *((_QWORD *)v29 + 2) = *(_QWORD *)(v1 + 104);
    *((_QWORD *)v29 + 3) = v30;
    v31 = *(_QWORD *)(v1 + 136);
    *((_QWORD *)v29 + 4) = *(_QWORD *)(v1 + 120);
    *((_QWORD *)v29 + 5) = v31;
    v32 = *(_QWORD *)(v1 + 168);
    *((_QWORD *)v29 + 6) = *(_QWORD *)(v1 + 152);
    *((_QWORD *)v29 + 7) = v32;
    v33 = *(_QWORD *)(v1 + 48);
    *((_QWORD *)v29 + 8) = *(_QWORD *)(v1 + 176);
    *((_QWORD *)v29 + 9) = v33;
    v34 = *(_QWORD *)(v1 + 72);
    *((_QWORD *)v29 + 10) = *(_QWORD *)(v1 + 56);
    *((_QWORD *)v29 + 11) = v34;
    v35 = *(_QWORD *)(v1 + 216);
    v36 = *(_QWORD *)(v1 + 224);
    v37 = *(_QWORD *)(v1 + 80);
    *((_QWORD *)v29 + 12) = v35;
    *((_QWORD *)v29 + 13) = v37;
    v38 = *(_QWORD *)(v1 + 96);
    *((_QWORD *)v29 + 14) = *(_QWORD *)(v1 + 88);
    *((_QWORD *)v29 + 15) = v38;
    *((_QWORD *)v29 + 16) = *(_QWORD *)(v1 + 112);
    *((_QWORD *)v29 + 17) = v36;
    v39 = *(_QWORD *)(v1 + 144);
    *((_QWORD *)v29 + 18) = *(_QWORD *)(v1 + 128);
    *((_QWORD *)v29 + 19) = v39;
    v40 = *(_QWORD *)(v1 + 320);
    *((_QWORD *)v29 + 20) = *(_QWORD *)(v1 + 160);
    *((_QWORD *)v29 + 21) = v40;
    *(_QWORD *)(v1 + 320) = v14;
    v41 = *(_QWORD *)(v1 + 232);
    v42 = *(_QWORD *)(v1 + 192);
    *((_QWORD *)v29 + 22) = v41;
    *((_QWORD *)v29 + 23) = v42;
    v43 = *(_QWORD *)(v1 + 208);
    *((_QWORD *)v29 + 24) = *(_QWORD *)(v1 + 200);
    *((_QWORD *)v29 + 25) = v43;
    (*(void (**)(char *, _QWORD, int *))(v26 + 32))(&v29[v28], *(_QWORD *)(v1 + 248), v27);
    v44 = (uint64_t *)(v18 + v27[64]);
    v45 = *v44;
    v46 = v44[1];
    v47 = (_OWORD *)(v18 + v27[56]);
    v48 = v47[1];
    *(_OWORD *)(v1 + 432) = *v47;
    *(_OWORD *)(v1 + 448) = v48;
    sub_23BFF67FC((uint64_t)sub_23BF13F50, (uint64_t)v29, v45, v46, *(unsigned __int8 *)(v18 + v27[58]), *(_QWORD *)(v1 + 272), *(_QWORD *)(v1 + 184), v35, v36, v41);
  }
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 + 264) + 56))(v14, 1, 1, v2);
  v19 = sub_23BF0A0F0();
  v20 = *(_QWORD *)(v1 + 296);
  v21 = MEMORY[0x242615198](&unk_23C0051E8, v20);
  v22 = sub_23BEA1BB8((unint64_t *)&qword_256AE5188, (uint64_t (*)(uint64_t))MEMORY[0x24BDF02F8], MEMORY[0x24BDF02F0]);
  *(_QWORD *)(v1 + 416) = v21;
  *(_QWORD *)(v1 + 424) = v22;
  v23 = *(_QWORD *)(v1 + 304);
  v24 = MEMORY[0x242615198](MEMORY[0x24BDED308], v23, v1 + 416);
  *(_QWORD *)(v1 + 400) = v19;
  *(_QWORD *)(v1 + 408) = v24;
  MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v2, v1 + 400);
  v49 = *(_QWORD *)(v1 + 280);
  sub_23BF3FAD4((uint64_t)v14, v49);
  v50 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 256) + 8);
  v51 = *(_QWORD *)(v1 + 288);
  v50((uint64_t)v14, v51);
  v52 = sub_23BF0A0F0();
  v53 = MEMORY[0x242615198](&unk_23C0051E8, v20);
  v54 = sub_23BEA1BB8((unint64_t *)&qword_256AE5188, (uint64_t (*)(uint64_t))MEMORY[0x24BDF02F8], MEMORY[0x24BDF02F0]);
  *(_QWORD *)(v1 + 384) = v53;
  *(_QWORD *)(v1 + 392) = v54;
  v55 = MEMORY[0x242615198](MEMORY[0x24BDED308], v23, v1 + 384);
  *(_QWORD *)(v1 + 368) = v52;
  *(_QWORD *)(v1 + 376) = v55;
  *(_QWORD *)(v1 + 360) = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v2, v1 + 368);
  MEMORY[0x242615198](MEMORY[0x24BDF5578], v51, v1 + 360);
  sub_23BEA5C0C(v49, v51, *(_QWORD *)(v1 + 312));
  return v50(v49, v51);
}

void sub_23BF0F6A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_23BFF96A0();
  MEMORY[0x24BDAC7A8](v2);
  MEMORY[0x24BDAC7A8](v0);
  MEMORY[0x24BDAC7A8](v1);
  type metadata accessor for VerticalGridView();
}

uint64_t sub_23BF0F8A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, _QWORD, uint64_t);
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);

  v9 = *(void (**)(uint64_t, _QWORD, uint64_t))(v3 + *(int *)(a1 + 252));
  v10 = *(_QWORD *)(v5 - 8);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v10 + 16))(v7, *(_QWORD *)(v8 - 312), v5);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v5);
  v9(v7, 0, 1);
  (*(void (**)(uint64_t, _QWORD))(v2 + 8))(v7, *(_QWORD *)(v8 - 296));
  sub_23BEA72EC(v6, v1, v4);
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 304) + 8);
  v11(v6, v1);
  sub_23BEA5C0C(v4, v1, *(_QWORD *)(v8 - 288));
  return ((uint64_t (*)(uint64_t, uint64_t))v11)(v4, v1);
}

void sub_23BF0F978()
{
  type metadata accessor for VerticalGridView();
}

uint64_t sub_23BF0F9EC()
{
  _BYTE *v0;

  return sub_23BE9ED7C(v0);
}

uint64_t sub_23BF0FA28()
{
  return swift_allocateGenericValueMetadata();
}

void sub_23BF0FA30()
{
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CanvasSectionHeader();
}

uint64_t sub_23BF0FA88()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = sub_23BFF96A0();
  if (v1 <= 0x3F)
  {
    result = sub_23BFF96A0();
    if (v2 <= 0x3F)
    {
      result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

_QWORD *sub_23BF0FB7C(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  _QWORD *v37;
  int v38;
  int v39;
  unint64_t v40;
  unsigned int v41;
  void *v42;
  char *v43;
  size_t v44;
  char *v45;
  void *v46;
  const void *v47;
  uint64_t v48;
  size_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  void *v54;
  const void *v55;
  unsigned int (*v56)(const void *, uint64_t, uint64_t);
  _OWORD *v57;
  _OWORD *v58;
  __int128 v59;
  unint64_t v60;
  unint64_t v61;
  __int128 v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unsigned int v91;
  uint64_t v92;
  size_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  size_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  size_t v107;
  size_t __n;
  uint64_t v109;

  v4 = sub_23BFF82CC();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = a3[11];
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  if ((_DWORD)v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  v10 = *(unsigned int *)(v5 + 84);
  if (v9 <= v10)
    v11 = *(_DWORD *)(v5 + 84);
  else
    v11 = v9;
  v12 = a3[2];
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned int *)(v13 + 84);
  v15 = v14 - 1;
  if (!(_DWORD)v14)
    v15 = 0;
  if (v15 <= v11)
    v16 = v11;
  else
    v16 = v15;
  if ((_DWORD)v8)
    v17 = *(_QWORD *)(v7 + 64);
  else
    v17 = *(_QWORD *)(v7 + 64) + 1;
  v18 = *(_DWORD *)(v7 + 80);
  v19 = *(_QWORD *)(v5 + 64) + v18;
  v20 = *(_DWORD *)(v13 + 80);
  __n = v17;
  v21 = (v17 + v20 + (v19 & ~v18)) & ~v20;
  if ((_DWORD)v14)
    v22 = *(_QWORD *)(v13 + 64);
  else
    v22 = *(_QWORD *)(v13 + 64) + 1;
  v23 = v21 + v22;
  if (v16)
    v24 = v21 + v22;
  else
    v24 = v23 + 1;
  v25 = a3[14];
  v109 = a3[13];
  v26 = *(_QWORD *)(v109 - 8);
  v27 = *(_DWORD *)(v26 + 80);
  if (*(_DWORD *)(v26 + 84))
    v28 = *(_QWORD *)(v26 + 64);
  else
    v28 = *(_QWORD *)(v26 + 64) + 1;
  v29 = *(_QWORD *)(v25 - 8);
  v30 = *(_DWORD *)(v29 + 80);
  v31 = *(_DWORD *)(v7 + 80) | *(_DWORD *)(v5 + 80) | *(_DWORD *)(v13 + 80);
  v32 = v30 | v27 | v31 & 0xF8;
  if (v32 > 7
    || ((*(_DWORD *)(v29 + 80) | *(_DWORD *)(v26 + 80) | v31) & 0x100000) != 0
    || (v33 = v27 + 9,
        ((((((((((((((((*(_QWORD *)(v29 + 64)
                      + 7
                      + ((v30
                        + 25
                        + ((((v28 + 7 + ((v27 + 9 + ((v24 + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v27)) & 0xFFFFFFFFFFFFFFF8)
                          + 39) & 0xFFFFFFFFFFFFFFF8)) & ~v30)) & 0xFFFFFFFFFFFFFFF8)
                    + 23) & 0xFFFFFFFFFFFFFFF8)
                  + 23) & 0xFFFFFFFFFFFFFFF8)
                + 23) & 0xFFFFFFFFFFFFFFF8)
              + 23) & 0xFFFFFFFFFFFFFFF8)
            + 23) & 0xFFFFFFFFFFFFFFF8)
          + 23) & 0xFFFFFFFFFFFFFFF8)
        + 23) & 0xFFFFFFFFFFFFFFF8)
      + 16 > 0x18))
  {
    v36 = *a2;
    *a1 = *a2;
    v37 = (_QWORD *)(v36 + (((v32 | 7) + 16) & ~(unint64_t)(v32 | 7)));
    goto LABEL_65;
  }
  v106 = *(_QWORD *)(v29 + 64) + 7;
  v107 = v24;
  v104 = *(_QWORD *)(v25 - 8);
  v105 = v25;
  v102 = v28 + 7;
  v103 = v30 + 25;
  v100 = v28;
  v101 = ~v27;
  v95 = ~v20;
  v96 = v6;
  v93 = v22;
  v94 = ~v18;
  if (v16)
  {
    if ((_DWORD)v10 == v16)
    {
      v91 = v16;
      v34 = v23;
      v35 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v5 + 48))(a2, v10, v4);
      v23 = v34;
      v16 = v91;
      v24 = v107;
      if (!v35)
        goto LABEL_44;
    }
    else
    {
      v98 = v23;
      v40 = ((unint64_t)a2 + v19) & ~v18;
      if (v9 == v16)
        v41 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(v40, v8, v6);
      else
        v41 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v13 + 48))((v40 + v17 + v20) & ~v20, v14, v12);
      v24 = v107;
      v23 = v98;
      if (v41 < 2)
      {
LABEL_44:
        v99 = v23;
        v92 = v33;
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 16))(a1, a2, v4);
        v42 = (void *)(((unint64_t)a1 + v19) & v94);
        v43 = (char *)(((unint64_t)a2 + v19) & v94);
        v97 = v12;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v43, 1, v96))
        {
          v44 = __n;
          memcpy(v42, v43, __n);
        }
        else
        {
          (*(void (**)(void *, char *, uint64_t))(v7 + 16))(v42, v43, v96);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v42, 0, 1, v96);
          v44 = __n;
        }
        v45 = &v43[v44];
        v46 = (void *)(((unint64_t)v42 + v44 + v20) & v95);
        v47 = (const void *)((unint64_t)&v45[v20] & v95);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v47, 1, v97))
        {
          memcpy(v46, v47, v93);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(v46, v47, v97);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v46, 0, 1, v97);
        }
        v48 = v109;
        v37 = a1;
        v49 = v107;
        v33 = v92;
        v50 = v101;
        if (!v16)
          *((_BYTE *)a1 + v99) = 0;
        goto LABEL_54;
      }
    }
  }
  else
  {
    if (!*((_BYTE *)a2 + v23))
      goto LABEL_44;
    v38 = (*((unsigned __int8 *)a2 + v23) - 1) << (8 * v23);
    if (v23 > 3)
      v38 = 0;
    if ((_DWORD)v23)
    {
      if (v23 <= 3)
        v39 = v23;
      else
        v39 = 4;
      __asm { BR              X11 }
    }
    if (v38 == -1)
      goto LABEL_44;
  }
  v37 = a1;
  memcpy(a1, a2, v24);
  v49 = v107;
  v48 = v109;
  v50 = v101;
LABEL_54:
  v51 = ~v30;
  v52 = ((unint64_t)v37 + v49 + 7) & 0xFFFFFFFFFFFFFFF8;
  v53 = ((unint64_t)a2 + v49 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v52 = *(_QWORD *)v53;
  *(_BYTE *)(v52 + 8) = *(_BYTE *)(v53 + 8);
  v54 = (void *)((v33 + v52) & v50);
  v55 = (const void *)((v33 + v53) & v50);
  v56 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v26 + 48);
  swift_bridgeObjectRetain();
  if (v56(v55, 1, v48))
  {
    memcpy(v54, v55, v100);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v26 + 16))(v54, v55, v48);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v54, 0, 1, v48);
  }
  v57 = (_OWORD *)(((unint64_t)v54 + v102) & 0xFFFFFFFFFFFFFFF8);
  v58 = (_OWORD *)(((unint64_t)v55 + v102) & 0xFFFFFFFFFFFFFFF8);
  v59 = v58[1];
  *v57 = *v58;
  v57[1] = v59;
  v60 = ((unint64_t)v57 + 39) & 0xFFFFFFFFFFFFFFF8;
  v61 = ((unint64_t)v58 + 39) & 0xFFFFFFFFFFFFFFF8;
  v62 = *(_OWORD *)v61;
  *(_QWORD *)(v60 + 16) = *(_QWORD *)(v61 + 16);
  *(_OWORD *)v60 = v62;
  *(_BYTE *)(v60 + 24) = *(_BYTE *)(v61 + 24);
  v63 = (v103 + v60) & v51;
  v64 = (v103 + v61) & v51;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v104 + 16))(v63, v64, v105);
  v65 = (_QWORD *)((v106 + v63) & 0xFFFFFFFFFFFFFFF8);
  v66 = (_QWORD *)((v106 + v64) & 0xFFFFFFFFFFFFFFF8);
  v67 = v66[1];
  *v65 = *v66;
  v65[1] = v67;
  v68 = (_QWORD *)(((unint64_t)v65 + 23) & 0xFFFFFFFFFFFFFFF8);
  v69 = (_QWORD *)(((unint64_t)v66 + 23) & 0xFFFFFFFFFFFFFFF8);
  v70 = v69[1];
  *v68 = *v69;
  v68[1] = v70;
  v71 = (_QWORD *)(((unint64_t)v68 + 23) & 0xFFFFFFFFFFFFFFF8);
  v72 = (_QWORD *)(((unint64_t)v69 + 23) & 0xFFFFFFFFFFFFFFF8);
  v73 = v72[1];
  *v71 = *v72;
  v71[1] = v73;
  v74 = (_QWORD *)(((unint64_t)v71 + 23) & 0xFFFFFFFFFFFFFFF8);
  v75 = (_QWORD *)(((unint64_t)v72 + 23) & 0xFFFFFFFFFFFFFFF8);
  v76 = v75[1];
  *v74 = *v75;
  v74[1] = v76;
  v77 = (_QWORD *)(((unint64_t)v74 + 23) & 0xFFFFFFFFFFFFFFF8);
  v78 = (_QWORD *)(((unint64_t)v75 + 23) & 0xFFFFFFFFFFFFFFF8);
  v79 = v78[1];
  *v77 = *v78;
  v77[1] = v79;
  v80 = ((unint64_t)v77 + 23) & 0xFFFFFFFFFFFFFFF8;
  v81 = (unint64_t *)(((unint64_t)v78 + 23) & 0xFFFFFFFFFFFFFFF8);
  v82 = *v81;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  if (v82 < 0xFFFFFFFF)
  {
    *(_OWORD *)v80 = *(_OWORD *)v81;
  }
  else
  {
    v83 = v81[1];
    *(_QWORD *)v80 = v82;
    *(_QWORD *)(v80 + 8) = v83;
    swift_retain();
  }
  v84 = (v80 + 23) & 0xFFFFFFFFFFFFFFF8;
  v85 = ((unint64_t)v81 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v85 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v84 = *(_OWORD *)v85;
  }
  else
  {
    v86 = *(_QWORD *)(v85 + 8);
    *(_QWORD *)v84 = *(_QWORD *)v85;
    *(_QWORD *)(v84 + 8) = v86;
    swift_retain();
  }
  v87 = (v84 + 23) & 0xFFFFFFFFFFFFFFF8;
  v88 = (v85 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v88 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v87 = *(_OWORD *)v88;
    return v37;
  }
  v89 = *(_QWORD *)(v88 + 8);
  *(_QWORD *)v87 = *(_QWORD *)v88;
  *(_QWORD *)(v87 + 8) = v89;
LABEL_65:
  swift_retain();
  return v37;
}

uint64_t sub_23BF10254(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t result;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v4 = sub_23BFF82CC();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int *)(v5 + 84);
  v43 = a2[11];
  v7 = *(_QWORD *)(v43 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  if ((_DWORD)v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v9 <= v6)
    v10 = *(_DWORD *)(v5 + 84);
  else
    v10 = v9;
  v44 = a2[2];
  v11 = *(_QWORD *)(v44 - 8);
  v12 = *(unsigned int *)(v11 + 84);
  v13 = v12 - 1;
  if (!(_DWORD)v12)
    v13 = 0;
  if (v13 <= v10)
    v14 = v10;
  else
    v14 = v13;
  if ((_DWORD)v8)
    v15 = *(_QWORD *)(v7 + 64);
  else
    v15 = *(_QWORD *)(v7 + 64) + 1;
  v16 = *(unsigned __int8 *)(v7 + 80);
  v17 = ~v16;
  v18 = *(_QWORD *)(v5 + 64) + v16;
  v19 = *(unsigned __int8 *)(v11 + 80);
  v20 = (v15 + v19 + (v18 & ~v16)) & ~v19;
  v21 = *(_QWORD *)(v11 + 64);
  if (!(_DWORD)v12)
    ++v21;
  v22 = v21 + v20;
  v42 = v15;
  v41 = v17;
  if (v14)
  {
    if ((_DWORD)v6 == v14)
    {
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, v6, v4))
        goto LABEL_39;
    }
    else
    {
      v25 = (v18 + a1) & v17;
      if (v9 == v14)
        v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v25, v8, v43);
      else
        v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))((v25 + v15 + v19) & ~v19, v12, v44);
      if (v26 >= 2)
        goto LABEL_39;
    }
    goto LABEL_35;
  }
  if (!*(_BYTE *)(a1 + v22))
    goto LABEL_35;
  v23 = (*(unsigned __int8 *)(a1 + v22) - 1) << (8 * v22);
  if (v22 > 3)
    v23 = 0;
  if ((_DWORD)v22)
  {
    if (v22 <= 3)
      v24 = v21 + v20;
    else
      v24 = 4;
    __asm { BR              X11 }
  }
  if (v23 == -1)
  {
LABEL_35:
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
    v27 = (v18 + a1) & v41;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v27, 1, v43))
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v27, v43);
    v28 = (v27 + v42 + v19) & ~v19;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v28, 1, v44))
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v28, v44);
  }
LABEL_39:
  if (v14)
    v29 = a1;
  else
    v29 = a1 + 1;
  v30 = (v29 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  v31 = a2[13];
  v32 = *(_QWORD *)(v31 - 8);
  v33 = (v30 + *(unsigned __int8 *)(v32 + 80) + 9) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v32 + 48))(v33, 1, v31))
    (*(void (**)(unint64_t, uint64_t))(v32 + 8))(v33, v31);
  v34 = v33 + *(_QWORD *)(v32 + 64);
  if (!*(_DWORD *)(v32 + 84))
    ++v34;
  v35 = *(_QWORD *)(a2[14] - 8);
  v36 = (*(unsigned __int8 *)(v35 + 80) + ((((v34 + 7) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 25) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
  (*(void (**)(unint64_t))(v35 + 8))(v36);
  v37 = (*(_QWORD *)(v35 + 64) + v36 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  result = swift_release();
  v39 = (_QWORD *)((((((((((v37 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
                    + 23) & 0xFFFFFFFFFFFFFFF8)
                  + 23) & 0xFFFFFFFFFFFFFFF8);
  if (*v39 >= 0xFFFFFFFFuLL)
    result = swift_release();
  v40 = (_QWORD *)(((unint64_t)v39 + 23) & 0xFFFFFFFFFFFFFFF8);
  if (*v40 >= 0xFFFFFFFFuLL)
    result = swift_release();
  if (*(_QWORD *)(((unint64_t)v40 + 23) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL)
    return swift_release();
  return result;
}

_BYTE *sub_23BF10620(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  size_t v22;
  size_t v23;
  int v24;
  int v25;
  unint64_t v26;
  unsigned int v27;
  void *v28;
  const void *v29;
  void *v30;
  const void *v31;
  uint64_t v32;
  _BYTE *v33;
  size_t v34;
  size_t v35;
  size_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const void *v43;
  unsigned int (*v44)(const void *, uint64_t, uint64_t);
  int v45;
  size_t v46;
  size_t v47;
  size_t v48;
  _OWORD *v49;
  _OWORD *v50;
  __int128 v51;
  unint64_t v52;
  unint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  size_t __n;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  v5 = sub_23BFF82CC();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v89 = *(_QWORD *)(a3 + 88);
  v8 = *(_QWORD *)(v89 - 8);
  v9 = *(unsigned int *)(v8 + 84);
  if ((_DWORD)v9)
    v10 = v9 - 1;
  else
    v10 = 0;
  if (v10 <= v7)
    v11 = *(_DWORD *)(v6 + 84);
  else
    v11 = v10;
  v90 = *(_QWORD *)(a3 + 16);
  v91 = a3;
  v12 = *(_QWORD *)(v90 - 8);
  v13 = *(unsigned int *)(v12 + 84);
  v14 = v13 - 1;
  if (!(_DWORD)v13)
    v14 = 0;
  if (v14 <= v11)
    v15 = v11;
  else
    v15 = v14;
  if ((_DWORD)v9)
    v16 = *(_QWORD *)(v8 + 64);
  else
    v16 = *(_QWORD *)(v8 + 64) + 1;
  v17 = *(unsigned __int8 *)(v8 + 80);
  v18 = ~v17;
  v19 = *(_QWORD *)(v6 + 64) + v17;
  v20 = *(unsigned __int8 *)(v12 + 80);
  v21 = (v16 + v20 + (v19 & ~v17)) & ~v20;
  v22 = *(_QWORD *)(v12 + 64);
  if (!(_DWORD)v13)
    ++v22;
  v23 = v21 + v22;
  __n = v22;
  v87 = v18;
  v88 = ~v20;
  if (!v15)
  {
    if (!a2[v23])
      goto LABEL_33;
    v24 = (a2[v23] - 1) << (8 * v23);
    if (v23 > 3)
      v24 = 0;
    if ((_DWORD)v23)
    {
      if (v23 <= 3)
        v25 = v21 + v22;
      else
        v25 = 4;
      __asm { BR              X11 }
    }
    if (v24 == -1)
      goto LABEL_33;
    goto LABEL_42;
  }
  if ((_DWORD)v7 != v15)
  {
    v26 = (unint64_t)&a2[v19] & v18;
    if (v10 == v15)
      v27 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(v26, v9, v89);
    else
      v27 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v12 + 48))((v26 + v16 + v20) & ~v20, v13, v90);
    if (v27 < 2)
      goto LABEL_33;
LABEL_42:
    if (v15)
      v34 = v23;
    else
      v34 = v23 + 1;
    v33 = a1;
    memcpy(a1, a2, v34);
    v32 = v91;
    goto LABEL_46;
  }
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v6 + 48))(a2, v7, v5))
    goto LABEL_42;
LABEL_33:
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 16))(a1, a2, v5);
  v28 = (void *)((unint64_t)&a1[v19] & v87);
  v29 = (const void *)((unint64_t)&a2[v19] & v87);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v29, 1, v89))
  {
    memcpy(v28, v29, v16);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(v28, v29, v89);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v28, 0, 1, v89);
  }
  v30 = (void *)(((unint64_t)v28 + v16 + v20) & v88);
  v31 = (const void *)(((unint64_t)v29 + v16 + v20) & v88);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v31, 1, v90))
  {
    memcpy(v30, v31, __n);
    v32 = v91;
    v33 = a1;
    if (v15)
      goto LABEL_46;
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 16))(v30, v31, v90);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v30, 0, 1, v90);
    v32 = v91;
    v33 = a1;
    if (v15)
      goto LABEL_46;
  }
  v33[v23] = 0;
LABEL_46:
  if (v15)
    v35 = v23;
  else
    v35 = v23 + 1;
  v36 = v35 + 7;
  v37 = (unint64_t)&v33[v36] & 0xFFFFFFFFFFFFFFF8;
  v38 = (unint64_t)&a2[v36] & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v37 = *(_QWORD *)v38;
  *(_BYTE *)(v37 + 8) = *(_BYTE *)(v38 + 8);
  v39 = *(_QWORD *)(v32 + 104);
  v40 = *(_QWORD *)(v39 - 8);
  v41 = *(unsigned __int8 *)(v40 + 80);
  v42 = (void *)((v41 + 9 + v37) & ~v41);
  v43 = (const void *)((v41 + 9 + v38) & ~v41);
  v44 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v40 + 48);
  swift_bridgeObjectRetain();
  if (v44(v43, 1, v39))
  {
    v45 = *(_DWORD *)(v40 + 84);
    v46 = *(_QWORD *)(v40 + 64);
    if (v45)
      v47 = v46;
    else
      v47 = v46 + 1;
    memcpy(v42, v43, v47);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v40 + 16))(v42, v43, v39);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v42, 0, 1, v39);
    v45 = *(_DWORD *)(v40 + 84);
    v46 = *(_QWORD *)(v40 + 64);
  }
  if (v45)
    v48 = v46;
  else
    v48 = v46 + 1;
  v49 = (_OWORD *)(((unint64_t)v42 + v48 + 7) & 0xFFFFFFFFFFFFFFF8);
  v50 = (_OWORD *)(((unint64_t)v43 + v48 + 7) & 0xFFFFFFFFFFFFFFF8);
  v51 = v50[1];
  *v49 = *v50;
  v49[1] = v51;
  v52 = ((unint64_t)v49 + 39) & 0xFFFFFFFFFFFFFFF8;
  v53 = ((unint64_t)v50 + 39) & 0xFFFFFFFFFFFFFFF8;
  v54 = *(_OWORD *)v53;
  *(_QWORD *)(v52 + 16) = *(_QWORD *)(v53 + 16);
  *(_OWORD *)v52 = v54;
  *(_BYTE *)(v52 + 24) = *(_BYTE *)(v53 + 24);
  v55 = *(_QWORD *)(*(_QWORD *)(v32 + 112) - 8);
  v56 = *(unsigned __int8 *)(v55 + 80);
  v57 = (v56 + 25 + v52) & ~v56;
  v58 = (v56 + 25 + v53) & ~v56;
  (*(void (**)(uint64_t, uint64_t))(v55 + 16))(v57, v58);
  v59 = *(_QWORD *)(v55 + 64) + 7;
  v60 = (_QWORD *)((v59 + v57) & 0xFFFFFFFFFFFFFFF8);
  v61 = (_QWORD *)((v59 + v58) & 0xFFFFFFFFFFFFFFF8);
  v62 = v61[1];
  *v60 = *v61;
  v60[1] = v62;
  v63 = (_QWORD *)(((unint64_t)v60 + 23) & 0xFFFFFFFFFFFFFFF8);
  v64 = (_QWORD *)(((unint64_t)v61 + 23) & 0xFFFFFFFFFFFFFFF8);
  v65 = v64[1];
  *v63 = *v64;
  v63[1] = v65;
  v66 = (_QWORD *)(((unint64_t)v63 + 23) & 0xFFFFFFFFFFFFFFF8);
  v67 = (_QWORD *)(((unint64_t)v64 + 23) & 0xFFFFFFFFFFFFFFF8);
  v68 = v67[1];
  *v66 = *v67;
  v66[1] = v68;
  v69 = (_QWORD *)(((unint64_t)v66 + 23) & 0xFFFFFFFFFFFFFFF8);
  v70 = (_QWORD *)(((unint64_t)v67 + 23) & 0xFFFFFFFFFFFFFFF8);
  v71 = v70[1];
  *v69 = *v70;
  v69[1] = v71;
  v72 = (_QWORD *)(((unint64_t)v69 + 23) & 0xFFFFFFFFFFFFFFF8);
  v73 = (_QWORD *)(((unint64_t)v70 + 23) & 0xFFFFFFFFFFFFFFF8);
  v74 = v73[1];
  *v72 = *v73;
  v72[1] = v74;
  v75 = ((unint64_t)v72 + 23) & 0xFFFFFFFFFFFFFFF8;
  v76 = (unint64_t *)(((unint64_t)v73 + 23) & 0xFFFFFFFFFFFFFFF8);
  v77 = *v76;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  if (v77 < 0xFFFFFFFF)
  {
    *(_OWORD *)v75 = *(_OWORD *)v76;
  }
  else
  {
    v78 = v76[1];
    *(_QWORD *)v75 = v77;
    *(_QWORD *)(v75 + 8) = v78;
    swift_retain();
  }
  v79 = (v75 + 23) & 0xFFFFFFFFFFFFFFF8;
  v80 = ((unint64_t)v76 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v80 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v79 = *(_OWORD *)v80;
  }
  else
  {
    v81 = *(_QWORD *)(v80 + 8);
    *(_QWORD *)v79 = *(_QWORD *)v80;
    *(_QWORD *)(v79 + 8) = v81;
    swift_retain();
  }
  v82 = (v79 + 23) & 0xFFFFFFFFFFFFFFF8;
  v83 = (v80 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v83 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v82 = *(_OWORD *)v83;
  }
  else
  {
    v84 = *(_QWORD *)(v83 + 8);
    *(_QWORD *)v82 = *(_QWORD *)v83;
    *(_QWORD *)(v82 + 8) = v84;
    swift_retain();
  }
  return v33;
}

_BYTE *sub_23BF10BB4(_BYTE *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  uint64_t (*v25)(unsigned __int8 *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  uint64_t v32;
  int v33;
  const void *v34;
  int v35;
  uint64_t v36;
  size_t v37;
  char v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  unsigned int v42;
  unint64_t v43;
  unsigned int v44;
  unint64_t v45;
  unsigned int v46;
  int v47;
  int v48;
  unint64_t v49;
  size_t v50;
  const void *v51;
  void *v52;
  void *v53;
  uint64_t (*v54)(void *, uint64_t, uint64_t);
  int v55;
  int v56;
  size_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  uint64_t (*v61)(void *, uint64_t, uint64_t);
  int v62;
  int v63;
  unsigned int v64;
  size_t v65;
  void *v66;
  const void *v67;
  size_t v68;
  void *v69;
  const void *v70;
  size_t v71;
  size_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  void *v79;
  uint64_t (*v80)(void *, uint64_t, uint64_t);
  int v81;
  int v82;
  size_t v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  _QWORD *v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  _QWORD *v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  _QWORD *v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v125;
  size_t v126;
  uint64_t v127;
  size_t __n;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int v134;

  v5 = sub_23BFF82CC();
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  v130 = *(_QWORD *)(a3 + 88);
  v9 = *(_QWORD *)(v130 - 8);
  v10 = *(unsigned int *)(v9 + 84);
  if ((_DWORD)v10)
    v11 = v10 - 1;
  else
    v11 = 0;
  if (v11 <= v8)
    v12 = *(_DWORD *)(v7 + 84);
  else
    v12 = v11;
  v133 = a3;
  v129 = *(_QWORD *)(a3 + 16);
  v13 = *(_QWORD *)(v129 - 8);
  v14 = *(unsigned int *)(v13 + 84);
  v15 = v14 - 1;
  if (!(_DWORD)v14)
    v15 = 0;
  if (v15 <= v12)
    v16 = v12;
  else
    v16 = v15;
  if ((_DWORD)v10)
    v17 = *(_QWORD *)(v9 + 64);
  else
    v17 = *(_QWORD *)(v9 + 64) + 1;
  v18 = *(unsigned __int8 *)(v9 + 80);
  v19 = ~v18;
  v20 = *(_QWORD *)(v7 + 64) + v18;
  v21 = *(unsigned __int8 *)(v13 + 80);
  v127 = ~v21;
  __n = v17;
  v22 = (v17 + v21 + (v20 & ~v18)) & ~v21;
  if ((_DWORD)v14)
    v23 = *(_QWORD *)(v13 + 64);
  else
    v23 = *(_QWORD *)(v13 + 64) + 1;
  v24 = v22 + v23;
  v134 = v16;
  v131 = *(_QWORD *)(v7 + 64) + v18;
  v132 = v22 + v23;
  v126 = v23;
  if (!v16)
  {
    v38 = 8 * v24;
    v36 = v133;
    v34 = a2;
    v37 = v24;
    if (a1[v24])
    {
      v39 = (a1[v24] - 1) << v38;
      if (v24 > 3)
        v39 = 0;
      if ((_DWORD)v24)
      {
        if (v24 > 3)
          LODWORD(v24) = 4;
        __asm { BR              X12 }
      }
      if (v39 != -1)
      {
        if (!a2[v24])
          goto LABEL_83;
        v37 = v132;
        if ((a2[v24] - 1) << v38 == -1)
          goto LABEL_83;
        goto LABEL_79;
      }
    }
    if (!a2[v24])
      goto LABEL_62;
    v47 = (a2[v24] - 1) << v38;
    if (v132 > 3)
      v47 = 0;
    if ((_DWORD)v132)
    {
      if (v132 <= 3)
        v48 = v132;
      else
        v48 = 4;
      __asm { BR              X11 }
    }
    v35 = v47 + 1;
    goto LABEL_57;
  }
  if ((_DWORD)v8 == v16)
  {
    v25 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v7 + 48);
    v125 = *(_QWORD *)(v130 - 8);
    v26 = *(_QWORD *)(v5 - 8);
    v27 = *(unsigned __int8 *)(v13 + 80);
    v28 = ~v18;
    v29 = *(_QWORD *)(v129 - 8);
    v30 = a1;
    v31 = a1;
    v32 = v6;
    v33 = ((uint64_t (*)(_BYTE *, uint64_t))v25)(v31, v8);
    v34 = a2;
    v35 = v25(a2, v8, v32);
    v6 = v32;
    a1 = v30;
    v13 = v29;
    v19 = v28;
    v21 = v27;
    v7 = v26;
    v9 = v125;
    v36 = v133;
    if (v33)
    {
      v37 = v132;
      if (!v35)
        goto LABEL_83;
LABEL_79:
      if (v134)
        v65 = v37;
      else
        v65 = v37 + 1;
      memcpy(a1, v34, v65);
      v64 = v134;
      goto LABEL_91;
    }
LABEL_57:
    if (v35)
    {
LABEL_58:
      (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(a1, v6);
      v49 = (unint64_t)&a1[v131] & v19;
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(v49, 1, v130))
        (*(void (**)(unint64_t, uint64_t))(v9 + 8))(v49, v130);
      v50 = (v49 + __n + v21) & v127;
      v37 = v132;
      if (!(*(unsigned int (**)(size_t, uint64_t, uint64_t))(v13 + 48))(v50, 1, v129))
        (*(void (**)(size_t, uint64_t))(v13 + 8))(v50, v129);
      goto LABEL_79;
    }
LABEL_62:
    (*(void (**)(_BYTE *, const void *, uint64_t))(v7 + 24))(a1, v34, v6);
    v51 = v34;
    v52 = (void *)((unint64_t)&a1[v131] & v19);
    v53 = (void *)(((unint64_t)v51 + v131) & v19);
    v54 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v9 + 48);
    v55 = v54(v52, 1, v130);
    v56 = v54(v53, 1, v130);
    if (v55)
    {
      if (!v56)
      {
        (*(void (**)(void *, void *, uint64_t))(v9 + 16))(v52, v53, v130);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v52, 0, 1, v130);
LABEL_69:
        v57 = __n;
        v58 = v129;
LABEL_70:
        v59 = (void *)(((unint64_t)v52 + v57 + v21) & v127);
        v60 = (void *)(((unint64_t)v53 + v57 + v21) & v127);
        v61 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
        v62 = v61(v59, 1, v58);
        v63 = v61(v60, 1, v58);
        if (v62)
        {
          if (!v63)
          {
            (*(void (**)(void *, void *, uint64_t))(v13 + 16))(v59, v60, v58);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v59, 0, 1, v58);
LABEL_76:
            v37 = v132;
            v36 = v133;
            v34 = a2;
            v64 = v134;
            goto LABEL_91;
          }
        }
        else
        {
          if (!v63)
          {
            (*(void (**)(void *, void *, uint64_t))(v13 + 24))(v59, v60, v58);
            goto LABEL_76;
          }
          (*(void (**)(void *, uint64_t))(v13 + 8))(v59, v58);
        }
        memcpy(v59, v60, v126);
        goto LABEL_76;
      }
    }
    else
    {
      if (!v56)
      {
        (*(void (**)(void *, void *, uint64_t))(v9 + 24))(v52, v53, v130);
        goto LABEL_69;
      }
      (*(void (**)(void *, uint64_t))(v9 + 8))(v52, v130);
    }
    v57 = __n;
    memcpy(v52, v53, __n);
    v58 = v129;
    goto LABEL_70;
  }
  v40 = v5;
  v41 = (unint64_t)&a1[v20] & v19;
  if (v11 == v16)
    v42 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(v41, v10, v130);
  else
    v42 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v13 + 48))((v41 + __n + v21) & ~v21, v14, v129);
  if (v42 < 2)
  {
    v43 = (unint64_t)&a2[v131] & v19;
    if (v11 == v134)
      v44 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(v43, v10, v130);
    else
      v44 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v13 + 48))((v43 + __n + v21) & v127, v14, v129);
    v36 = v133;
    v34 = a2;
    v6 = v40;
    if (v44 >= 2)
      goto LABEL_58;
    goto LABEL_62;
  }
  v45 = (unint64_t)&a2[v131] & v19;
  if (v11 == v134)
    v46 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(v45, v10, v130);
  else
    v46 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v13 + 48))((v45 + __n + v21) & v127, v14, v129);
  v37 = v132;
  v36 = v133;
  v34 = a2;
  v6 = v40;
  if (v46 >= 2)
    goto LABEL_79;
LABEL_83:
  (*(void (**)(_BYTE *, const void *, uint64_t))(v7 + 16))(a1, v34, v6);
  v66 = (void *)((unint64_t)&a1[v131] & v19);
  v67 = (const void *)(((unint64_t)v34 + v131) & v19);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v67, 1, v130))
  {
    v68 = __n;
    memcpy(v66, v67, __n);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v66, v67, v130);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v66, 0, 1, v130);
    v68 = __n;
  }
  v69 = (void *)(((unint64_t)v66 + v68 + v21) & v127);
  v70 = (const void *)(((unint64_t)v67 + v68 + v21) & v127);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v70, 1, v129))
  {
    memcpy(v69, v70, v126);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(v69, v70, v129);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v69, 0, 1, v129);
  }
  v34 = a2;
  v64 = v134;
  if (!v134)
    a1[v37] = 0;
LABEL_91:
  if (v64)
    v71 = v37;
  else
    v71 = v37 + 1;
  v72 = v71 + 7;
  v73 = (unint64_t)&a1[v72] & 0xFFFFFFFFFFFFFFF8;
  v74 = ((unint64_t)v34 + v72) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v73 = *(_QWORD *)v74;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v73 + 8) = *(_BYTE *)(v74 + 8);
  v75 = *(_QWORD *)(v36 + 104);
  v76 = *(_QWORD *)(v75 - 8);
  v77 = *(unsigned __int8 *)(v76 + 80);
  v78 = (void *)((v77 + 9 + v73) & ~v77);
  v79 = (void *)((v77 + 9 + v74) & ~v77);
  v80 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v76 + 48);
  v81 = v80(v78, 1, v75);
  v82 = v80(v79, 1, v75);
  if (v81)
  {
    if (!v82)
    {
      (*(void (**)(void *, void *, uint64_t))(v76 + 16))(v78, v79, v75);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v76 + 56))(v78, 0, 1, v75);
      goto LABEL_103;
    }
  }
  else
  {
    if (!v82)
    {
      (*(void (**)(void *, void *, uint64_t))(v76 + 24))(v78, v79, v75);
      goto LABEL_103;
    }
    (*(void (**)(void *, uint64_t))(v76 + 8))(v78, v75);
  }
  if (*(_DWORD *)(v76 + 84))
    v83 = *(_QWORD *)(v76 + 64);
  else
    v83 = *(_QWORD *)(v76 + 64) + 1;
  memcpy(v78, v79, v83);
LABEL_103:
  if (*(_DWORD *)(v76 + 84))
    v84 = *(_QWORD *)(v76 + 64);
  else
    v84 = *(_QWORD *)(v76 + 64) + 1;
  v85 = (_QWORD *)(((unint64_t)v78 + v84 + 7) & 0xFFFFFFFFFFFFFFF8);
  v86 = (_QWORD *)(((unint64_t)v79 + v84 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v85 = *v86;
  v85[1] = v86[1];
  v85[2] = v86[2];
  v85[3] = v86[3];
  v87 = ((unint64_t)v85 + 39) & 0xFFFFFFFFFFFFFFF8;
  v88 = ((unint64_t)v86 + 39) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v87 = *(_QWORD *)v88;
  *(_QWORD *)(v87 + 8) = *(_QWORD *)(v88 + 8);
  *(_QWORD *)(v87 + 16) = *(_QWORD *)(v88 + 16);
  *(_BYTE *)(v87 + 24) = *(_BYTE *)(v88 + 24);
  v89 = *(_QWORD *)(*(_QWORD *)(v36 + 112) - 8);
  v90 = *(unsigned __int8 *)(v89 + 80);
  v91 = (v90 + 25 + v87) & ~v90;
  v92 = (v90 + 25 + v88) & ~v90;
  (*(void (**)(uint64_t, uint64_t))(v89 + 24))(v91, v92);
  v93 = *(_QWORD *)(v89 + 64) + 7;
  v94 = (_QWORD *)((v93 + v91) & 0xFFFFFFFFFFFFFFF8);
  v95 = (_QWORD *)((v93 + v92) & 0xFFFFFFFFFFFFFFF8);
  v96 = v95[1];
  *v94 = *v95;
  v94[1] = v96;
  swift_retain();
  swift_release();
  v97 = (_QWORD *)(((unint64_t)v94 + 23) & 0xFFFFFFFFFFFFFFF8);
  v98 = (_QWORD *)(((unint64_t)v95 + 23) & 0xFFFFFFFFFFFFFFF8);
  v99 = v98[1];
  *v97 = *v98;
  v97[1] = v99;
  swift_retain();
  swift_release();
  v100 = (_QWORD *)(((unint64_t)v97 + 23) & 0xFFFFFFFFFFFFFFF8);
  v101 = (_QWORD *)(((unint64_t)v98 + 23) & 0xFFFFFFFFFFFFFFF8);
  v102 = v101[1];
  *v100 = *v101;
  v100[1] = v102;
  swift_retain();
  swift_release();
  v103 = (_QWORD *)(((unint64_t)v100 + 23) & 0xFFFFFFFFFFFFFFF8);
  v104 = (_QWORD *)(((unint64_t)v101 + 23) & 0xFFFFFFFFFFFFFFF8);
  v105 = v104[1];
  *v103 = *v104;
  v103[1] = v105;
  swift_retain();
  swift_release();
  v106 = (_QWORD *)(((unint64_t)v103 + 23) & 0xFFFFFFFFFFFFFFF8);
  v107 = (_QWORD *)(((unint64_t)v104 + 23) & 0xFFFFFFFFFFFFFFF8);
  v108 = v107[1];
  *v106 = *v107;
  v106[1] = v108;
  swift_retain();
  swift_release();
  v109 = (_QWORD *)(((unint64_t)v106 + 23) & 0xFFFFFFFFFFFFFFF8);
  v110 = (unint64_t *)(((unint64_t)v107 + 23) & 0xFFFFFFFFFFFFFFF8);
  v111 = *v110;
  if (*v109 < 0xFFFFFFFFuLL)
  {
    if (v111 >= 0xFFFFFFFF)
    {
      v113 = v110[1];
      *v109 = v111;
      v109[1] = v113;
      swift_retain();
      goto LABEL_113;
    }
  }
  else
  {
    if (v111 >= 0xFFFFFFFF)
    {
      v112 = v110[1];
      *v109 = v111;
      v109[1] = v112;
      swift_retain();
      swift_release();
      goto LABEL_113;
    }
    swift_release();
  }
  *(_OWORD *)v109 = *(_OWORD *)v110;
LABEL_113:
  v114 = (_QWORD *)(((unint64_t)v109 + 23) & 0xFFFFFFFFFFFFFFF8);
  v115 = (unint64_t *)(((unint64_t)v110 + 23) & 0xFFFFFFFFFFFFFFF8);
  v116 = *v115;
  if (*v114 < 0xFFFFFFFFuLL)
  {
    if (v116 >= 0xFFFFFFFF)
    {
      v118 = v115[1];
      *v114 = v116;
      v114[1] = v118;
      swift_retain();
      goto LABEL_120;
    }
  }
  else
  {
    if (v116 >= 0xFFFFFFFF)
    {
      v117 = v115[1];
      *v114 = v116;
      v114[1] = v117;
      swift_retain();
      swift_release();
      goto LABEL_120;
    }
    swift_release();
  }
  *(_OWORD *)v114 = *(_OWORD *)v115;
LABEL_120:
  v119 = (_QWORD *)(((unint64_t)v114 + 23) & 0xFFFFFFFFFFFFFFF8);
  v120 = (unint64_t *)(((unint64_t)v115 + 23) & 0xFFFFFFFFFFFFFFF8);
  v121 = *v120;
  if (*v119 < 0xFFFFFFFFuLL)
  {
    if (v121 >= 0xFFFFFFFF)
    {
      v123 = v120[1];
      *v119 = v121;
      v119[1] = v123;
      swift_retain();
      return a1;
    }
LABEL_126:
    *(_OWORD *)v119 = *(_OWORD *)v120;
    return a1;
  }
  if (v121 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_126;
  }
  v122 = v120[1];
  *v119 = v121;
  v119[1] = v122;
  swift_retain();
  swift_release();
  return a1;
}

_BYTE *sub_23BF11704(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  size_t v22;
  size_t v23;
  int v24;
  int v25;
  unint64_t v26;
  unsigned int v27;
  void *v28;
  const void *v29;
  void *v30;
  const void *v31;
  _BYTE *v32;
  uint64_t v33;
  size_t v34;
  size_t v35;
  size_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const void *v43;
  int v44;
  size_t v45;
  size_t v46;
  size_t v47;
  _OWORD *v48;
  _OWORD *v49;
  __int128 v50;
  unint64_t v51;
  unint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD *v59;
  _OWORD *v60;
  _OWORD *v61;
  _OWORD *v62;
  _OWORD *v63;
  _OWORD *v64;
  _OWORD *v65;
  _OWORD *v66;
  _OWORD *v67;
  _OWORD *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  size_t __n;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;

  v5 = sub_23BFF82CC();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v83 = *(_QWORD *)(a3 + 88);
  v8 = *(_QWORD *)(v83 - 8);
  v9 = *(unsigned int *)(v8 + 84);
  if ((_DWORD)v9)
    v10 = v9 - 1;
  else
    v10 = 0;
  if (v10 <= v7)
    v11 = *(_DWORD *)(v6 + 84);
  else
    v11 = v10;
  v84 = *(_QWORD *)(a3 + 16);
  v85 = a3;
  v12 = *(_QWORD *)(v84 - 8);
  v13 = *(unsigned int *)(v12 + 84);
  v14 = v13 - 1;
  if (!(_DWORD)v13)
    v14 = 0;
  if (v14 <= v11)
    v15 = v11;
  else
    v15 = v14;
  if ((_DWORD)v9)
    v16 = *(_QWORD *)(v8 + 64);
  else
    v16 = *(_QWORD *)(v8 + 64) + 1;
  v17 = *(unsigned __int8 *)(v8 + 80);
  v18 = ~v17;
  v19 = *(_QWORD *)(v6 + 64) + v17;
  v20 = *(unsigned __int8 *)(v12 + 80);
  v21 = (v16 + v20 + (v19 & ~v17)) & ~v20;
  v22 = *(_QWORD *)(v12 + 64);
  if (!(_DWORD)v13)
    ++v22;
  v23 = v21 + v22;
  __n = v22;
  v81 = v18;
  v82 = ~v20;
  if (!v15)
  {
    if (!a2[v23])
      goto LABEL_33;
    v24 = (a2[v23] - 1) << (8 * v23);
    if (v23 > 3)
      v24 = 0;
    if ((_DWORD)v23)
    {
      if (v23 <= 3)
        v25 = v21 + v22;
      else
        v25 = 4;
      __asm { BR              X11 }
    }
    if (v24 == -1)
      goto LABEL_33;
    goto LABEL_42;
  }
  if ((_DWORD)v7 != v15)
  {
    v26 = (unint64_t)&a2[v19] & v18;
    if (v10 == v15)
      v27 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(v26, v9, v83);
    else
      v27 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v12 + 48))((v26 + v16 + v20) & ~v20, v13, v84);
    if (v27 < 2)
      goto LABEL_33;
LABEL_42:
    if (v15)
      v34 = v23;
    else
      v34 = v23 + 1;
    v32 = a1;
    memcpy(a1, a2, v34);
    v33 = v85;
    goto LABEL_46;
  }
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v6 + 48))(a2, v7, v5))
    goto LABEL_42;
LABEL_33:
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 32))(a1, a2, v5);
  v28 = (void *)((unint64_t)&a1[v19] & v81);
  v29 = (const void *)((unint64_t)&a2[v19] & v81);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v29, 1, v83))
  {
    memcpy(v28, v29, v16);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(v28, v29, v83);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v28, 0, 1, v83);
  }
  v30 = (void *)(((unint64_t)v28 + v16 + v20) & v82);
  v31 = (const void *)(((unint64_t)v29 + v16 + v20) & v82);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v31, 1, v84))
  {
    memcpy(v30, v31, __n);
    v33 = v85;
    v32 = a1;
    if (v15)
      goto LABEL_46;
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v30, v31, v84);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v30, 0, 1, v84);
    v33 = v85;
    v32 = a1;
    if (v15)
      goto LABEL_46;
  }
  v32[v23] = 0;
LABEL_46:
  if (v15)
    v35 = v23;
  else
    v35 = v23 + 1;
  v36 = v35 + 7;
  v37 = (unint64_t)&v32[v36] & 0xFFFFFFFFFFFFFFF8;
  v38 = (unint64_t)&a2[v36] & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v37 = *(_QWORD *)v38;
  *(_BYTE *)(v37 + 8) = *(_BYTE *)(v38 + 8);
  v39 = *(_QWORD *)(v33 + 104);
  v40 = *(_QWORD *)(v39 - 8);
  v41 = *(unsigned __int8 *)(v40 + 80);
  v42 = (void *)((v41 + 9 + v37) & ~v41);
  v43 = (const void *)((v41 + 9 + v38) & ~v41);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v40 + 48))(v43, 1, v39))
  {
    v44 = *(_DWORD *)(v40 + 84);
    v45 = *(_QWORD *)(v40 + 64);
    if (v44)
      v46 = v45;
    else
      v46 = v45 + 1;
    memcpy(v42, v43, v46);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v40 + 32))(v42, v43, v39);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v42, 0, 1, v39);
    v44 = *(_DWORD *)(v40 + 84);
    v45 = *(_QWORD *)(v40 + 64);
  }
  if (v44)
    v47 = v45;
  else
    v47 = v45 + 1;
  v48 = (_OWORD *)(((unint64_t)v42 + v47 + 7) & 0xFFFFFFFFFFFFFFF8);
  v49 = (_OWORD *)(((unint64_t)v43 + v47 + 7) & 0xFFFFFFFFFFFFFFF8);
  v50 = v49[1];
  *v48 = *v49;
  v48[1] = v50;
  v51 = ((unint64_t)v48 + 39) & 0xFFFFFFFFFFFFFFF8;
  v52 = ((unint64_t)v49 + 39) & 0xFFFFFFFFFFFFFFF8;
  v53 = *(_OWORD *)v52;
  *(_QWORD *)(v51 + 16) = *(_QWORD *)(v52 + 16);
  *(_OWORD *)v51 = v53;
  *(_BYTE *)(v51 + 24) = *(_BYTE *)(v52 + 24);
  v54 = *(_QWORD *)(*(_QWORD *)(v33 + 112) - 8);
  v55 = *(unsigned __int8 *)(v54 + 80);
  v56 = (v55 + 25 + v51) & ~v55;
  v57 = (v55 + 25 + v52) & ~v55;
  (*(void (**)(uint64_t, uint64_t))(v54 + 32))(v56, v57);
  v58 = *(_QWORD *)(v54 + 64) + 7;
  v59 = (_OWORD *)((v58 + v56) & 0xFFFFFFFFFFFFFFF8);
  v60 = (_OWORD *)((v58 + v57) & 0xFFFFFFFFFFFFFFF8);
  *v59 = *v60;
  v61 = (_OWORD *)(((unint64_t)v59 + 23) & 0xFFFFFFFFFFFFF8);
  v62 = (_OWORD *)(((unint64_t)v60 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v61 = *v62;
  v63 = (_OWORD *)(((unint64_t)v61 + 23) & 0xFFFFFFFFFFFFFFF8);
  v64 = (_OWORD *)(((unint64_t)v62 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v63 = *v64;
  v65 = (_OWORD *)(((unint64_t)v63 + 23) & 0xFFFFFFFFFFFFF8);
  v66 = (_OWORD *)(((unint64_t)v64 + 23) & 0xFFFFFFFFFFFFF8);
  *v65 = *v66;
  v67 = (_OWORD *)(((unint64_t)v65 + 23) & 0xFFFFFFFFFFFFF8);
  v68 = (_OWORD *)(((unint64_t)v66 + 23) & 0xFFFFFFFFFFFFF8);
  *v67 = *v68;
  v69 = ((unint64_t)v67 + 23) & 0xFFFFFFFFFFFFFFF8;
  v70 = ((unint64_t)v68 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v70 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v69 = *(_OWORD *)v70;
  }
  else
  {
    v71 = *(_QWORD *)(v70 + 8);
    *(_QWORD *)v69 = *(_QWORD *)v70;
    *(_QWORD *)(v69 + 8) = v71;
  }
  v72 = (v69 + 23) & 0xFFFFFFFFFFFFFFF8;
  v73 = (v70 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v73 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v72 = *(_OWORD *)v73;
  }
  else
  {
    v74 = *(_QWORD *)(v73 + 8);
    *(_QWORD *)v72 = *(_QWORD *)v73;
    *(_QWORD *)(v72 + 8) = v74;
  }
  v75 = (v72 + 23) & 0xFFFFFFFFFFFFFFF8;
  v76 = (uint64_t *)((v73 + 23) & 0xFFFFFFFFFFFFFFF8);
  v77 = *v76;
  if ((unint64_t)*v76 < 0xFFFFFFFF)
  {
    *(_OWORD *)v75 = *(_OWORD *)v76;
  }
  else
  {
    v78 = v76[1];
    *(_QWORD *)v75 = v77;
    *(_QWORD *)(v75 + 8) = v78;
  }
  return v32;
}

_BYTE *sub_23BF11C3C(_BYTE *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  uint64_t (*v25)(unsigned __int8 *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  uint64_t v32;
  int v33;
  const void *v34;
  int v35;
  uint64_t v36;
  size_t v37;
  char v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  unsigned int v42;
  unint64_t v43;
  unsigned int v44;
  unint64_t v45;
  unsigned int v46;
  int v47;
  int v48;
  unint64_t v49;
  size_t v50;
  const void *v51;
  void *v52;
  void *v53;
  uint64_t (*v54)(void *, uint64_t, uint64_t);
  int v55;
  int v56;
  size_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  uint64_t (*v61)(void *, uint64_t, uint64_t);
  int v62;
  int v63;
  unsigned int v64;
  size_t v65;
  void *v66;
  const void *v67;
  size_t v68;
  void *v69;
  const void *v70;
  size_t v71;
  size_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  void *v79;
  uint64_t (*v80)(void *, uint64_t, uint64_t);
  int v81;
  int v82;
  size_t v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _OWORD *v94;
  uint64_t v95;
  unint64_t v96;
  _OWORD *v97;
  _OWORD *v98;
  _OWORD *v99;
  _OWORD *v100;
  uint64_t v101;
  __int128 v102;
  _OWORD *v103;
  uint64_t v104;
  _QWORD *v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  _QWORD *v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v121;
  size_t v122;
  uint64_t v123;
  size_t __n;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int v130;

  v5 = sub_23BFF82CC();
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  v126 = *(_QWORD *)(a3 + 88);
  v9 = *(_QWORD *)(v126 - 8);
  v10 = *(unsigned int *)(v9 + 84);
  if ((_DWORD)v10)
    v11 = v10 - 1;
  else
    v11 = 0;
  if (v11 <= v8)
    v12 = *(_DWORD *)(v7 + 84);
  else
    v12 = v11;
  v129 = a3;
  v125 = *(_QWORD *)(a3 + 16);
  v13 = *(_QWORD *)(v125 - 8);
  v14 = *(unsigned int *)(v13 + 84);
  v15 = v14 - 1;
  if (!(_DWORD)v14)
    v15 = 0;
  if (v15 <= v12)
    v16 = v12;
  else
    v16 = v15;
  if ((_DWORD)v10)
    v17 = *(_QWORD *)(v9 + 64);
  else
    v17 = *(_QWORD *)(v9 + 64) + 1;
  v18 = *(unsigned __int8 *)(v9 + 80);
  v19 = ~v18;
  v20 = *(_QWORD *)(v7 + 64) + v18;
  v21 = *(unsigned __int8 *)(v13 + 80);
  v123 = ~v21;
  __n = v17;
  v22 = (v17 + v21 + (v20 & ~v18)) & ~v21;
  if ((_DWORD)v14)
    v23 = *(_QWORD *)(v13 + 64);
  else
    v23 = *(_QWORD *)(v13 + 64) + 1;
  v24 = v22 + v23;
  v130 = v16;
  v127 = *(_QWORD *)(v7 + 64) + v18;
  v128 = v22 + v23;
  v122 = v23;
  if (!v16)
  {
    v38 = 8 * v24;
    v36 = v129;
    v34 = a2;
    v37 = v24;
    if (a1[v24])
    {
      v39 = (a1[v24] - 1) << v38;
      if (v24 > 3)
        v39 = 0;
      if ((_DWORD)v24)
      {
        if (v24 > 3)
          LODWORD(v24) = 4;
        __asm { BR              X12 }
      }
      if (v39 != -1)
      {
        if (!a2[v24])
          goto LABEL_83;
        v37 = v128;
        if ((a2[v24] - 1) << v38 == -1)
          goto LABEL_83;
        goto LABEL_79;
      }
    }
    if (!a2[v24])
      goto LABEL_62;
    v47 = (a2[v24] - 1) << v38;
    if (v128 > 3)
      v47 = 0;
    if ((_DWORD)v128)
    {
      if (v128 <= 3)
        v48 = v128;
      else
        v48 = 4;
      __asm { BR              X11 }
    }
    v35 = v47 + 1;
    goto LABEL_57;
  }
  if ((_DWORD)v8 == v16)
  {
    v25 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v7 + 48);
    v121 = *(_QWORD *)(v126 - 8);
    v26 = *(_QWORD *)(v5 - 8);
    v27 = *(unsigned __int8 *)(v13 + 80);
    v28 = ~v18;
    v29 = *(_QWORD *)(v125 - 8);
    v30 = a1;
    v31 = a1;
    v32 = v6;
    v33 = ((uint64_t (*)(_BYTE *, uint64_t))v25)(v31, v8);
    v34 = a2;
    v35 = v25(a2, v8, v32);
    v6 = v32;
    a1 = v30;
    v13 = v29;
    v19 = v28;
    v21 = v27;
    v7 = v26;
    v9 = v121;
    v36 = v129;
    if (v33)
    {
      v37 = v128;
      if (!v35)
        goto LABEL_83;
LABEL_79:
      if (v130)
        v65 = v37;
      else
        v65 = v37 + 1;
      memcpy(a1, v34, v65);
      v64 = v130;
      goto LABEL_91;
    }
LABEL_57:
    if (v35)
    {
LABEL_58:
      (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(a1, v6);
      v49 = (unint64_t)&a1[v127] & v19;
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(v49, 1, v126))
        (*(void (**)(unint64_t, uint64_t))(v9 + 8))(v49, v126);
      v50 = (v49 + __n + v21) & v123;
      v37 = v128;
      if (!(*(unsigned int (**)(size_t, uint64_t, uint64_t))(v13 + 48))(v50, 1, v125))
        (*(void (**)(size_t, uint64_t))(v13 + 8))(v50, v125);
      goto LABEL_79;
    }
LABEL_62:
    (*(void (**)(_BYTE *, const void *, uint64_t))(v7 + 40))(a1, v34, v6);
    v51 = v34;
    v52 = (void *)((unint64_t)&a1[v127] & v19);
    v53 = (void *)(((unint64_t)v51 + v127) & v19);
    v54 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v9 + 48);
    v55 = v54(v52, 1, v126);
    v56 = v54(v53, 1, v126);
    if (v55)
    {
      if (!v56)
      {
        (*(void (**)(void *, void *, uint64_t))(v9 + 32))(v52, v53, v126);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v52, 0, 1, v126);
LABEL_69:
        v57 = __n;
        v58 = v125;
LABEL_70:
        v59 = (void *)(((unint64_t)v52 + v57 + v21) & v123);
        v60 = (void *)(((unint64_t)v53 + v57 + v21) & v123);
        v61 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
        v62 = v61(v59, 1, v58);
        v63 = v61(v60, 1, v58);
        if (v62)
        {
          if (!v63)
          {
            (*(void (**)(void *, void *, uint64_t))(v13 + 32))(v59, v60, v58);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v59, 0, 1, v58);
LABEL_76:
            v37 = v128;
            v36 = v129;
            v34 = a2;
            v64 = v130;
            goto LABEL_91;
          }
        }
        else
        {
          if (!v63)
          {
            (*(void (**)(void *, void *, uint64_t))(v13 + 40))(v59, v60, v58);
            goto LABEL_76;
          }
          (*(void (**)(void *, uint64_t))(v13 + 8))(v59, v58);
        }
        memcpy(v59, v60, v122);
        goto LABEL_76;
      }
    }
    else
    {
      if (!v56)
      {
        (*(void (**)(void *, void *, uint64_t))(v9 + 40))(v52, v53, v126);
        goto LABEL_69;
      }
      (*(void (**)(void *, uint64_t))(v9 + 8))(v52, v126);
    }
    v57 = __n;
    memcpy(v52, v53, __n);
    v58 = v125;
    goto LABEL_70;
  }
  v40 = v5;
  v41 = (unint64_t)&a1[v20] & v19;
  if (v11 == v16)
    v42 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(v41, v10, v126);
  else
    v42 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v13 + 48))((v41 + __n + v21) & ~v21, v14, v125);
  if (v42 < 2)
  {
    v43 = (unint64_t)&a2[v127] & v19;
    if (v11 == v130)
      v44 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(v43, v10, v126);
    else
      v44 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v13 + 48))((v43 + __n + v21) & v123, v14, v125);
    v36 = v129;
    v34 = a2;
    v6 = v40;
    if (v44 >= 2)
      goto LABEL_58;
    goto LABEL_62;
  }
  v45 = (unint64_t)&a2[v127] & v19;
  if (v11 == v130)
    v46 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(v45, v10, v126);
  else
    v46 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v13 + 48))((v45 + __n + v21) & v123, v14, v125);
  v37 = v128;
  v36 = v129;
  v34 = a2;
  v6 = v40;
  if (v46 >= 2)
    goto LABEL_79;
LABEL_83:
  (*(void (**)(_BYTE *, const void *, uint64_t))(v7 + 32))(a1, v34, v6);
  v66 = (void *)((unint64_t)&a1[v127] & v19);
  v67 = (const void *)(((unint64_t)v34 + v127) & v19);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v67, 1, v126))
  {
    v68 = __n;
    memcpy(v66, v67, __n);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(v66, v67, v126);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v66, 0, 1, v126);
    v68 = __n;
  }
  v69 = (void *)(((unint64_t)v66 + v68 + v21) & v123);
  v70 = (const void *)(((unint64_t)v67 + v68 + v21) & v123);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v70, 1, v125))
  {
    memcpy(v69, v70, v122);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v69, v70, v125);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v69, 0, 1, v125);
  }
  v34 = a2;
  v64 = v130;
  if (!v130)
    a1[v37] = 0;
LABEL_91:
  if (v64)
    v71 = v37;
  else
    v71 = v37 + 1;
  v72 = v71 + 7;
  v73 = (unint64_t)&a1[v72] & 0xFFFFFFFFFFFFFFF8;
  v74 = ((unint64_t)v34 + v72) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v73 = *(_QWORD *)v74;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v73 + 8) = *(_BYTE *)(v74 + 8);
  v75 = *(_QWORD *)(v36 + 104);
  v76 = *(_QWORD *)(v75 - 8);
  v77 = *(unsigned __int8 *)(v76 + 80);
  v78 = (void *)((v77 + 9 + v73) & ~v77);
  v79 = (void *)((v77 + 9 + v74) & ~v77);
  v80 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v76 + 48);
  v81 = v80(v78, 1, v75);
  v82 = v80(v79, 1, v75);
  if (v81)
  {
    if (!v82)
    {
      (*(void (**)(void *, void *, uint64_t))(v76 + 32))(v78, v79, v75);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v76 + 56))(v78, 0, 1, v75);
      goto LABEL_103;
    }
  }
  else
  {
    if (!v82)
    {
      (*(void (**)(void *, void *, uint64_t))(v76 + 40))(v78, v79, v75);
      goto LABEL_103;
    }
    (*(void (**)(void *, uint64_t))(v76 + 8))(v78, v75);
  }
  if (*(_DWORD *)(v76 + 84))
    v83 = *(_QWORD *)(v76 + 64);
  else
    v83 = *(_QWORD *)(v76 + 64) + 1;
  memcpy(v78, v79, v83);
LABEL_103:
  if (*(_DWORD *)(v76 + 84))
    v84 = *(_QWORD *)(v76 + 64);
  else
    v84 = *(_QWORD *)(v76 + 64) + 1;
  v85 = (_QWORD *)(((unint64_t)v78 + v84 + 7) & 0xFFFFFFFFFFFFFFF8);
  v86 = (_QWORD *)(((unint64_t)v79 + v84 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v85 = *v86;
  v85[1] = v86[1];
  v85[2] = v86[2];
  v85[3] = v86[3];
  v87 = ((unint64_t)v85 + 39) & 0xFFFFFFFFFFFFFFF8;
  v88 = ((unint64_t)v86 + 39) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v87 = *(_QWORD *)v88;
  *(_QWORD *)(v87 + 8) = *(_QWORD *)(v88 + 8);
  *(_QWORD *)(v87 + 16) = *(_QWORD *)(v88 + 16);
  *(_BYTE *)(v87 + 24) = *(_BYTE *)(v88 + 24);
  v89 = *(_QWORD *)(*(_QWORD *)(v36 + 112) - 8);
  v90 = *(unsigned __int8 *)(v89 + 80);
  v91 = (v90 + 25 + v87) & ~v90;
  v92 = (v90 + 25 + v88) & ~v90;
  (*(void (**)(uint64_t, uint64_t))(v89 + 40))(v91, v92);
  v93 = *(_QWORD *)(v89 + 64) + 7;
  v94 = (_OWORD *)((v93 + v91) & 0xFFFFFFFFFFFFFFF8);
  v95 = v93 + v92;
  v96 = (v95 & 0xFFFFFFFFFFFFFFF8) + 23;
  *v94 = *(_OWORD *)(v95 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  v97 = (_OWORD *)(((unint64_t)v94 + 23) & 0xFFFFFFFFFFFFFFF8);
  v96 &= 0xFFFFFFFFFFFFF8uLL;
  *v97 = *(_OWORD *)v96;
  swift_release();
  v98 = (_OWORD *)(((unint64_t)v97 + 23) & 0xFFFFFFFFFFFFFFF8);
  v99 = (_OWORD *)((v96 + 23) & 0xFFFFFFFFFFFFF8);
  *v98 = *v99;
  swift_release();
  v100 = (_OWORD *)(((unint64_t)v98 + 23) & 0xFFFFFFFFFFFFFFF8);
  v101 = ((unint64_t)v99 + 23) & 0xFFFFFFFFFFFFF8;
  v102 = *(_OWORD *)v101;
  v101 += 23;
  *v100 = v102;
  swift_release();
  v103 = (_OWORD *)(((unint64_t)v100 + 23) & 0xFFFFFFFFFFFFFFF8);
  v104 = (v101 & 0xFFFFFFFFFFFFF8) + 23;
  *v103 = *(_OWORD *)(v101 & 0xFFFFFFFFFFFFF8);
  swift_release();
  v105 = (_QWORD *)(((unint64_t)v103 + 23) & 0xFFFFFFFFFFFFFFF8);
  v106 = v104 & 0xFFFFFFFFFFFFFFF8;
  v107 = *(_QWORD *)(v104 & 0xFFFFFFFFFFFFFFF8);
  if (*v105 < 0xFFFFFFFFuLL)
  {
    if (v107 >= 0xFFFFFFFF)
    {
      v109 = *(_QWORD *)(v106 + 8);
      *v105 = v107;
      v105[1] = v109;
      goto LABEL_113;
    }
  }
  else
  {
    if (v107 >= 0xFFFFFFFF)
    {
      v108 = *(_QWORD *)(v106 + 8);
      *v105 = v107;
      v105[1] = v108;
      swift_release();
      goto LABEL_113;
    }
    swift_release();
  }
  *(_OWORD *)v105 = *(_OWORD *)v106;
LABEL_113:
  v110 = (_QWORD *)(((unint64_t)v105 + 23) & 0xFFFFFFFFFFFFFFF8);
  v111 = (unint64_t *)((v106 + 23) & 0xFFFFFFFFFFFFFFF8);
  v112 = *v111;
  if (*v110 < 0xFFFFFFFFuLL)
  {
    if (v112 >= 0xFFFFFFFF)
    {
      v114 = v111[1];
      *v110 = v112;
      v110[1] = v114;
      goto LABEL_120;
    }
  }
  else
  {
    if (v112 >= 0xFFFFFFFF)
    {
      v113 = v111[1];
      *v110 = v112;
      v110[1] = v113;
      swift_release();
      goto LABEL_120;
    }
    swift_release();
  }
  *(_OWORD *)v110 = *(_OWORD *)v111;
LABEL_120:
  v115 = (_QWORD *)(((unint64_t)v110 + 23) & 0xFFFFFFFFFFFFFFF8);
  v116 = (unint64_t *)(((unint64_t)v111 + 23) & 0xFFFFFFFFFFFFFFF8);
  v117 = *v116;
  if (*v115 < 0xFFFFFFFFuLL)
  {
    if (v117 >= 0xFFFFFFFF)
    {
      v119 = v116[1];
      *v115 = v117;
      v115[1] = v119;
      return a1;
    }
LABEL_126:
    *(_OWORD *)v115 = *(_OWORD *)v116;
    return a1;
  }
  if (v117 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_126;
  }
  v118 = v116[1];
  *v115 = v117;
  v115[1] = v118;
  swift_release();
  return a1;
}

uint64_t sub_23BF12724(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t *v41;
  unint64_t v42;
  unsigned int v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v6 = sub_23BFF82CC();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  v9 = a3[11];
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int *)(v10 + 84);
  if ((_DWORD)v11)
    v12 = v11 - 1;
  else
    v12 = 0;
  if (v12 <= v8)
    v13 = *(_DWORD *)(v7 + 84);
  else
    v13 = v12;
  v14 = a3[2];
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned int *)(v15 + 84);
  v17 = v16 - 1;
  if (!(_DWORD)v16)
    v17 = 0;
  if (v17 <= v13)
    v18 = v13;
  else
    v18 = v17;
  v19 = v18 == 0;
  if (v18)
    v20 = v18 - 1;
  else
    v20 = 0;
  v21 = a3[13];
  v22 = a3[14];
  v23 = *(_QWORD *)(v21 - 8);
  v24 = *(unsigned int *)(v23 + 84);
  if ((_DWORD)v24)
    v25 = v24 - 1;
  else
    v25 = 0;
  if (v20 <= v25)
    v26 = v25;
  else
    v26 = v20;
  v27 = *(_QWORD *)(v22 - 8);
  v28 = *(unsigned int *)(v27 + 84);
  if (v26 <= v28)
    v29 = *(_DWORD *)(v27 + 84);
  else
    v29 = v26;
  if (v29 <= 0x7FFFFFFF)
    v30 = 0x7FFFFFFF;
  else
    v30 = v29;
  v31 = *(_QWORD *)(v10 + 64);
  if (!(_DWORD)v11)
    ++v31;
  if (!(_DWORD)v16)
    ++v19;
  if ((_DWORD)v24)
    v32 = *(_QWORD *)(v23 + 64);
  else
    v32 = *(_QWORD *)(v23 + 64) + 1;
  if (!a2)
    return 0;
  v51 = a1;
  v33 = *(unsigned __int8 *)(v10 + 80);
  v47 = *(_QWORD *)(v7 + 64) + v33;
  v34 = *(unsigned __int8 *)(v15 + 80);
  v50 = v19 + *(_QWORD *)(v15 + 64) + ((v31 + v34 + (v47 & ~v33)) & ~v34);
  v35 = *(unsigned __int8 *)(v23 + 80);
  v49 = v35 + 9;
  v48 = v32 + 7;
  v36 = *(unsigned __int8 *)(v27 + 80);
  v37 = v36 + 25;
  if (v30 < a2)
  {
    if (((((((((((((((((((*(_QWORD *)(v27 + 64)
                         + ((v37
                           + ((((v48 + ((v49 + ((v50 + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v35)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8)) & ~v36)
                         + 7) & 0xFFFFFFFFFFFFFFF8)
                       + 23) & 0xFFFFFFFFFFFFFFF8)
                     + 23) & 0xFFFFFFFFFFFFFFF8)
                   + 23) & 0xFFFFFFFFFFFFFFF8)
                 + 23) & 0xFFFFFFFFFFFFFFF8)
               + 23) & 0xFFFFFFFFFFFFFFF8)
             + 23) & 0xFFFFFFFFFFFFFFF8)
           + 23) & 0xFFFFFFFFFFFFFFF8)
         + 16) & 0xFFFFFFF8) != 0)
      v38 = 2;
    else
      v38 = a2 - v30 + 1;
    if (v38 >= 0x10000)
      LODWORD(v39) = 4;
    else
      LODWORD(v39) = 2;
    if (v38 < 0x100)
      LODWORD(v39) = 1;
    if (v38 >= 2)
      v39 = v39;
    else
      v39 = 0;
    __asm { BR              X23 }
  }
  if (v20 == v30)
  {
    if (v18 < 2)
      return 0;
    if ((_DWORD)v8 == v18)
    {
      v43 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v51, v8, v6);
    }
    else
    {
      v45 = (v47 + v51) & ~v33;
      if (v12 == v18)
        v46 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v45, v11, v9);
      else
        v46 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))((v45 + v31 + v34) & ~v34, v16, v14);
      if (v46 >= 2)
        v43 = v46 - 1;
      else
        v43 = 0;
    }
LABEL_67:
    if (v43 >= 2)
      return v43 - 1;
    else
      return 0;
  }
  v41 = (unint64_t *)((v51 + v50 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((v29 & 0x80000000) != 0)
  {
    v44 = ((unint64_t)v41 + v49) & ~v35;
    if (v25 != v30)
      return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v27 + 48))((v37 + ((((v48 + v44) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8)) & ~v36, v28, v22);
    if (v24 < 2)
      return 0;
    v43 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v23 + 48))(v44, v24, v21);
    goto LABEL_67;
  }
  v42 = *v41;
  if (v42 >= 0xFFFFFFFF)
    LODWORD(v42) = -1;
  return (v42 + 1);
}

void sub_23BF12AF8(_DWORD *a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  int v30;

  v6 = 0;
  v7 = *(_QWORD *)(sub_23BFF82CC() - 8);
  v8 = *(_QWORD *)(a4[11] - 8);
  v9 = *(_DWORD *)(v8 + 84);
  if (v9)
    v10 = v9 - 1;
  else
    v10 = 0;
  if (v10 <= *(_DWORD *)(v7 + 84))
    v11 = *(_DWORD *)(v7 + 84);
  else
    v11 = v10;
  v12 = *(_QWORD *)(a4[2] - 8);
  v13 = *(_DWORD *)(v12 + 84);
  v14 = v13 - 1;
  if (!v13)
    v14 = 0;
  if (v14 <= v11)
    v15 = v11;
  else
    v15 = v14;
  if (v15)
    v16 = v15 - 1;
  else
    v16 = 0;
  v17 = *(_QWORD *)(a4[13] - 8);
  v18 = *(_DWORD *)(v17 + 84);
  if (v18)
    v19 = v18 - 1;
  else
    v19 = 0;
  if (v16 <= v19)
    v20 = v19;
  else
    v20 = v16;
  v21 = *(_QWORD *)(a4[14] - 8);
  if (v20 <= *(_DWORD *)(v21 + 84))
    v22 = *(_DWORD *)(v21 + 84);
  else
    v22 = v20;
  if (v22 <= 0x7FFFFFFF)
    v23 = 0x7FFFFFFF;
  else
    v23 = v22;
  if (v9)
    v24 = *(_QWORD *)(v8 + 64);
  else
    v24 = *(_QWORD *)(v8 + 64) + 1;
  if (v13)
    v25 = *(_QWORD *)(v12 + 64);
  else
    v25 = *(_QWORD *)(v12 + 64) + 1;
  v26 = ((v24
        + *(unsigned __int8 *)(v12 + 80)
        + ((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))
      + v25;
  if (v15)
    v27 = v26;
  else
    v27 = v26 + 1;
  v28 = *(_QWORD *)(v17 + 64);
  if (!v18)
    ++v28;
  if (v23 < a3)
  {
    if (((((((((((((((((*(_DWORD *)(v21 + 64)
                       + ((*(unsigned __int8 *)(v21 + 80)
                         + 25
                         + (((((_DWORD)v28
                             + 7
                             + ((*(unsigned __int8 *)(v17 + 80) + 9 + (((_DWORD)v27 + 7) & 0xFFFFFFF8)) & ~*(unsigned __int8 *)(v17 + 80))) & 0xFFFFFFF8)
                           + 39) & 0xFFFFFFF8)) & ~*(unsigned __int8 *)(v21 + 80))
                       + 7) & 0xFFFFFFF8)
                     + 23) & 0xFFFFFFF8)
                   + 23) & 0xFFFFFFF8)
                 + 23) & 0xFFFFFFF8)
               + 23) & 0xFFFFFFF8)
             + 23) & 0xFFFFFFF8)
           + 23) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v29 = a3 - v23 + 1;
    else
      v29 = 2;
    if (v29 >= 0x10000)
      v30 = 4;
    else
      v30 = 2;
    if (v29 < 0x100)
      v30 = 1;
    if (v29 >= 2)
      v6 = v30;
    else
      v6 = 0;
  }
  if (a2 > v23)
  {
    if (((((((((((((((((*(_DWORD *)(v21 + 64)
                       + ((*(unsigned __int8 *)(v21 + 80)
                         + 25
                         + (((((_DWORD)v28
                             + 7
                             + ((*(unsigned __int8 *)(v17 + 80) + 9 + (((_DWORD)v27 + 7) & 0xFFFFFFF8)) & ~*(unsigned __int8 *)(v17 + 80))) & 0xFFFFFFF8)
                           + 39) & 0xFFFFFFF8)) & ~*(unsigned __int8 *)(v21 + 80))
                       + 7) & 0xFFFFFFF8)
                     + 23) & 0xFFFFFFF8)
                   + 23) & 0xFFFFFFF8)
                 + 23) & 0xFFFFFFF8)
               + 23) & 0xFFFFFFF8)
             + 23) & 0xFFFFFFF8)
           + 23) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      bzero(a1, ((((((((((((((((*(_QWORD *)(v21 + 64)+ ((*(unsigned __int8 *)(v21 + 80)+ 25+ ((((v28+ 7+ ((*(unsigned __int8 *)(v17 + 80) + 9 + ((v27 + 7) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80))) & 0xFFFFFFFFFFFFFFF8)+ 39) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80))+ 7) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 16);
      *a1 = ~v23 + a2;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X28 }
}

unint64_t sub_23BF12D74@<X0>(unint64_t result@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X5>, unsigned int a5@<W6>, int a6@<W7>, uint64_t a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, size_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, int a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  size_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  int v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  _QWORD *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  size_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;

  v48[v45] = 0;
  v53 = *(unsigned int *)(v51 - 84);
  if ((_DWORD)v53)
  {
    if (v52 == v49)
    {
      if ((int)v53 + 1 <= a5)
      {
        if ((_DWORD)v53 != -1)
        {
          if ((_DWORD)v36 == a5)
          {
            return (*(uint64_t (**)(_BYTE *, _QWORD, uint64_t))(result + 56))(v48, (v53 + 1), v36);
          }
          else
          {
            result = (unint64_t)&v48[v64] & v59;
            if (a6 == a5)
            {
              return (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(a3 + 56))(result, (v53 + 2), a2);
            }
            else if ((int)v53 + 1 <= v63)
            {
              return (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(a4 + 56))((result + v62 + a7) & v58, (v53 + 2), v34);
            }
            else if ((_DWORD)v61)
            {
              if (v61 <= 3)
                v57 = v61;
              else
                v57 = 4;
              bzero((void *)((result + v62 + a7) & v58), v61);
              __asm { BR              X10 }
            }
          }
        }
      }
      else if ((_DWORD)v41)
      {
        if (v41 <= 3)
          v54 = v41;
        else
          v54 = 4;
        bzero(v48, v41);
        __asm { BR              X10 }
      }
    }
    else
    {
      v55 = (_QWORD *)((unint64_t)&v48[v37 + 7] & 0xFFFFFFFFFFFFFFF8);
      if (v35 < 0)
      {
        result = ((unint64_t)v55 + v38) & v44;
        if (v50 == v49)
        {
          if (v39 >= 2)
            return (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v46 + 56))(result, (v53 + 1), v39);
        }
        else
        {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v47 + 56))((v42 + ((((v43 + result) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8)) & v60, v53, v40);
        }
      }
      else
      {
        if ((v53 & 0x80000000) != 0)
          v56 = v53 ^ 0x80000000;
        else
          v56 = (v53 - 1);
        *v55 = v56;
      }
    }
  }
  return result;
}

void sub_23BF12EF0()
{
  int v0;
  uint64_t v1;

  *(_WORD *)v1 = v0;
  *(_BYTE *)(v1 + 2) = BYTE2(v0);
}

void sub_23BF12F00()
{
  __int16 v0;
  _WORD *v1;

  *v1 = v0;
}

void sub_23BF12FA8()
{
  char v0;
  _BYTE *v1;

  *v1 = v0;
}

void sub_23BF12FE4()
{
  __int16 v0;
  _WORD *v1;

  *v1 = v0;
}

void sub_23BF12FEC()
{
  int v0;
  uint64_t v1;

  *(_WORD *)v1 = v0;
  *(_BYTE *)(v1 + 2) = BYTE2(v0);
}

void sub_23BF12FFC()
{
  int v0;
  _DWORD *v1;

  *v1 = v0;
}

void sub_23BF13008()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3528);
  type metadata accessor for CanvasSectionHeaderView();
}

void sub_23BF13088()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_23BFF8A4C();
  sub_23BFF862C();
  sub_23BFF8968();
  sub_23BFF96A0();
  swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  sub_23BFF94C0();
  *(_QWORD *)(v4 - 224) = v1;
  *(_QWORD *)(v4 - 216) = v0;
  *(_QWORD *)(v4 - 208) = v0;
  *(_QWORD *)(v4 - 200) = v2;
  *(_QWORD *)(v4 - 192) = v3;
  *(_QWORD *)(v4 - 184) = v3;
  type metadata accessor for ActionCardView();
}

void sub_23BF13138(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a69;
  uint64_t a70;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t (*v76)(uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  v87 = MEMORY[0x242615198](&unk_23C005608, a1);
  *(_QWORD *)(v74 - 224) = a1;
  *(_QWORD *)(v74 - 216) = v87;
  MEMORY[0x24261512C](255, v74 - 224, MEMORY[0x24BDF3948], 0);
  sub_23BFF8ADC();
  v76 = (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088];
  v77 = sub_23BFF862C();
  v86 = sub_23BFF862C();
  v88 = sub_23BEA1BB8((unint64_t *)&qword_256AE3908, v76, MEMORY[0x24BDF1078]);
  *(_QWORD *)(v74 - 104) = v72;
  *(_QWORD *)(v74 - 96) = v88;
  v78 = MEMORY[0x24BDED308];
  v79 = MEMORY[0x242615198](MEMORY[0x24BDED308], v77, v74 - 104);
  v80 = MEMORY[0x24BDEEC40];
  *(_QWORD *)(v74 - 120) = v79;
  *(_QWORD *)(v74 - 112) = v80;
  v85 = MEMORY[0x242615198](v78, v86, v74 - 120);
  *(_QWORD *)(v74 - 224) = v86;
  *(_QWORD *)(v74 - 216) = v85;
  v81 = MEMORY[0x24BDF3100];
  MEMORY[0x24261512C](255, v74 - 224, MEMORY[0x24BDF3100], 0);
  v84 = sub_23BFF862C();
  v82 = MEMORY[0x24BDEBEE0];
  *(_QWORD *)(v74 - 136) = v79;
  *(_QWORD *)(v74 - 128) = v82;
  v83 = MEMORY[0x242615198](v78, v84, v74 - 136);
  *(_QWORD *)(v74 - 224) = v84;
  *(_QWORD *)(v74 - 216) = v83;
  MEMORY[0x24261512C](255, v74 - 224, v81, 0);
  sub_23BFF8968();
  sub_23BFF8FD4();
  sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3910);
  sub_23BFF8968();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3918);
  sub_23BFF8968();
  sub_23BFF8968();
  *(_QWORD *)(v74 - 224) = v71;
  *(_QWORD *)(v74 - 216) = v70;
  *(_QWORD *)(v74 - 208) = v70;
  *(_QWORD *)(v74 - 200) = a69;
  *(_QWORD *)(v74 - 192) = a52;
  *(_QWORD *)(v74 - 184) = v72;
  *(_QWORD *)(v74 - 176) = v73;
  *(_QWORD *)(v74 - 168) = v73;
  *(_QWORD *)(v74 - 160) = a70;
  *(_QWORD *)(v74 - 152) = a51;
  type metadata accessor for FullWidthStageView();
}

void sub_23BF13358(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = MEMORY[0x242615198](&unk_23C0077B8, a1);
  *(_QWORD *)(v5 - 224) = a1;
  *(_QWORD *)(v5 - 216) = v23;
  v7 = MEMORY[0x24BDF3948];
  MEMORY[0x24261512C](255, v5 - 224, MEMORY[0x24BDF3948], 0);
  v22 = type metadata accessor for InfoActionCardView(255, v1, v4, v8);
  v21 = MEMORY[0x242615198](&unk_23C007F20, v22);
  *(_QWORD *)(v5 - 224) = v22;
  *(_QWORD *)(v5 - 216) = v21;
  MEMORY[0x24261512C](255, v5 - 224, v7, 0);
  sub_23BFF8968();
  sub_23BFF8968();
  v20 = type metadata accessor for LargeBrickView(255, v2, v3, v9);
  v19 = MEMORY[0x242615198](&protocol conformance descriptor for LargeBrickView<A>, v20);
  *(_QWORD *)(v5 - 224) = v20;
  *(_QWORD *)(v5 - 216) = v19;
  MEMORY[0x24261512C](255, v5 - 224, v7, 0);
  v18 = type metadata accessor for DynamicBrickView(255, v2, v3, v10);
  v17 = MEMORY[0x242615198](&protocol conformance descriptor for DynamicBrickView<A>, v18);
  *(_QWORD *)(v5 - 224) = v18;
  *(_QWORD *)(v5 - 216) = v17;
  MEMORY[0x24261512C](255, v5 - 224, v7, 0);
  sub_23BFF8968();
  v16 = type metadata accessor for MonogramVerticalStackView(255, v2, v3, v11);
  v15 = MEMORY[0x242615198](&unk_23BFFA1F4, v16);
  *(_QWORD *)(v5 - 224) = v16;
  *(_QWORD *)(v5 - 216) = v15;
  MEMORY[0x24261512C](255, v5 - 224, v7, 0);
  sub_23BFF8968();
  sub_23BFF8968();
  sub_23BFF8968();
  v14 = type metadata accessor for StandardCardView(255, v2, v3, v12);
  v13 = MEMORY[0x242615198](&unk_23C007BD0, v14);
  *(_QWORD *)(v5 - 224) = v14;
  *(_QWORD *)(v5 - 216) = v13;
  MEMORY[0x24261512C](255, v5 - 224, v7, 0);
  *(_QWORD *)(v5 - 224) = v2;
  *(_QWORD *)(v5 - 216) = v1;
  *(_QWORD *)(v5 - 208) = v3;
  *(_QWORD *)(v5 - 200) = v4;
  type metadata accessor for StandardHorizontalStackView();
}

void sub_23BF13590(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t AssociatedConformanceWitness;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  v80 = MEMORY[0x242615198](&unk_23C0008E8, a1);
  *(_QWORD *)(v64 - 224) = a1;
  *(_QWORD *)(v64 - 216) = v80;
  MEMORY[0x24261512C](255, v64 - 224, v60, 0);
  sub_23BFF8968();
  v67 = type metadata accessor for StandardVerticalStackView(255, v62, v63, v66);
  v79 = MEMORY[0x242615198](&unk_23C0073B8, v67);
  *(_QWORD *)(v64 - 224) = v67;
  *(_QWORD *)(v64 - 216) = v79;
  MEMORY[0x24261512C](255, v64 - 224, v60, 0);
  v69 = type metadata accessor for TallCardView(255, v62, v63, v68);
  v78 = MEMORY[0x242615198](&unk_23BFFF0E4, v69);
  *(_QWORD *)(v64 - 224) = v69;
  *(_QWORD *)(v64 - 216) = v78;
  MEMORY[0x24261512C](255, v64 - 224, v60, 0);
  sub_23BFF8968();
  sub_23BFF8968();
  v71 = type metadata accessor for VerticalStackCard(255, v62, v63, v70);
  v77 = MEMORY[0x242615198](&unk_23C0000E0, v71);
  *(_QWORD *)(v64 - 224) = v71;
  *(_QWORD *)(v64 - 216) = v77;
  MEMORY[0x24261512C](255, v64 - 224, v60, 0);
  sub_23BFF8968();
  v73 = type metadata accessor for WideBrickView(255, v62, v63, v72);
  v76 = MEMORY[0x242615198](&protocol conformance descriptor for WideBrickView<A>, v73);
  *(_QWORD *)(v64 - 224) = v73;
  *(_QWORD *)(v64 - 216) = v76;
  MEMORY[0x24261512C](255, v64 - 224, v60, 0);
  sub_23BFF8968();
  sub_23BFF8968();
  sub_23BFF8968();
  sub_23BFF8FD4();
  sub_23BFF862C();
  sub_23BFF8968();
  sub_23BFF862C();
  sub_23BFF862C();
  v75 = *(_OWORD *)(v61 + 32);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(_OWORD *)(v64 - 224) = v75;
  *(_QWORD *)(v64 - 208) = AssociatedConformanceWitness;
  *(_QWORD *)(v64 - 200) = a60;
  type metadata accessor for CanvasContextMenu();
}

uint64_t sub_23BF13814(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t OpaqueTypeConformance2;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t AssociatedConformanceWitness;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD v96[3];
  _QWORD v97[2];
  uint64_t v98;
  _QWORD v99[2];
  _QWORD v100[2];
  uint64_t v101;
  _QWORD v102[2];
  _QWORD v103[2];
  _QWORD v104[2];
  _QWORD v105[2];
  _QWORD v106[2];
  _QWORD v107[2];
  _QWORD v108[2];
  uint64_t v109;
  _QWORD v110[2];
  _QWORD v111[2];
  _QWORD v112[2];
  _QWORD v113[2];
  _QWORD v114[2];
  _QWORD v115[2];
  _QWORD v116[2];
  _QWORD v117[2];
  _QWORD v118[2];
  _QWORD v119[2];
  _QWORD v120[2];
  _QWORD v121[2];
  _QWORD v122[2];
  _QWORD v123[2];
  _QWORD v124[2];
  _QWORD v125[2];
  _QWORD v126[35];

  v6 = sub_23BFF862C();
  *(_QWORD *)(v5 - 224) = v86;
  *(_QWORD *)(v5 - 216) = v85;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v5 - 224) = v84;
  *(_QWORD *)(v5 - 216) = v83;
  v8 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v5 - 224) = v77;
  *(_QWORD *)(v5 - 216) = v76;
  v9 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v5 - 240) = v8;
  *(_QWORD *)(v5 - 232) = v9;
  v10 = MEMORY[0x24BDEF3E0];
  *(_QWORD *)(v5 - 248) = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v74, v5 - 240);
  v126[0] = MEMORY[0x242615198](MEMORY[0x24BDF3F50], v78, v5 - 248);
  v126[1] = MEMORY[0x24BDECC60];
  v125[0] = MEMORY[0x242615198](MEMORY[0x24BDED308], v75, v126);
  v125[1] = sub_23BEA1F94(&qword_256AE3920, &qword_256AE3910, MEMORY[0x24BDF43B0]);
  v124[0] = MEMORY[0x242615198](v10, v81, v125);
  v124[1] = sub_23BEA1F94(&qword_256AE3928, &qword_256AE3918, MEMORY[0x24BDF4700]);
  v123[0] = OpaqueTypeConformance2;
  v123[1] = MEMORY[0x242615198](v10, v82, v124);
  v11 = MEMORY[0x242615198](v10, v65, v123);
  *(_QWORD *)(v5 - 224) = v80;
  *(_QWORD *)(v5 - 216) = v79;
  v12 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v5 - 224) = v72;
  *(_QWORD *)(v5 - 216) = v71;
  v122[0] = v12;
  v122[1] = swift_getOpaqueTypeConformance2();
  v121[0] = v11;
  v121[1] = MEMORY[0x242615198](v10, v70, v122);
  v13 = MEMORY[0x242615198](v10, v52, v121);
  *(_QWORD *)(v5 - 224) = v69;
  *(_QWORD *)(v5 - 216) = v68;
  v14 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v5 - 224) = v67;
  *(_QWORD *)(v5 - 216) = v66;
  v15 = swift_getOpaqueTypeConformance2();
  v120[0] = v14;
  v120[1] = v15;
  v16 = MEMORY[0x242615198](v10, v58, v120);
  *(_QWORD *)(v5 - 224) = v64;
  *(_QWORD *)(v5 - 216) = v63;
  v119[0] = swift_getOpaqueTypeConformance2();
  v119[1] = v15;
  v118[0] = v16;
  v118[1] = MEMORY[0x242615198](v10, v61, v119);
  v117[0] = v13;
  v117[1] = MEMORY[0x242615198](v10, v62, v118);
  v17 = MEMORY[0x242615198](v10, v40, v117);
  *(_QWORD *)(v5 - 224) = v60;
  *(_QWORD *)(v5 - 216) = v59;
  v18 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v5 - 224) = v57;
  *(_QWORD *)(v5 - 216) = v56;
  v116[0] = v18;
  v116[1] = swift_getOpaqueTypeConformance2();
  v19 = MEMORY[0x242615198](v10, v43, v116);
  *(_QWORD *)(v5 - 224) = v2;
  *(_QWORD *)(v5 - 216) = v55;
  v20 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v5 - 224) = v1;
  *(_QWORD *)(v5 - 216) = v54;
  v115[0] = v20;
  v115[1] = swift_getOpaqueTypeConformance2();
  v114[0] = v19;
  v114[1] = MEMORY[0x242615198](v10, v53, v115);
  v21 = MEMORY[0x242615198](v10, v41, v114);
  *(_QWORD *)(v5 - 224) = v4;
  *(_QWORD *)(v5 - 216) = v51;
  v113[0] = swift_getOpaqueTypeConformance2();
  v113[1] = v95;
  v22 = MEMORY[0x242615198](v10, v42, v113);
  *(_QWORD *)(v5 - 224) = v3;
  *(_QWORD *)(v5 - 216) = v47;
  v112[0] = v22;
  v112[1] = swift_getOpaqueTypeConformance2();
  v111[0] = v21;
  v111[1] = MEMORY[0x242615198](v10, v45, v112);
  v110[0] = v17;
  v110[1] = MEMORY[0x242615198](v10, v46, v111);
  v109 = MEMORY[0x242615198](v10, v48, v110);
  v108[0] = MEMORY[0x242615198](MEMORY[0x24BDF3F50], v49, &v109);
  v108[1] = v88;
  v23 = MEMORY[0x24BDED308];
  v24 = MEMORY[0x242615198](MEMORY[0x24BDED308], v50, v108);
  v107[0] = MEMORY[0x24BDF5138];
  v107[1] = v24;
  v25 = MEMORY[0x242615198](v10, v73, v107);
  v26 = MEMORY[0x24BDF0910];
  v106[0] = v25;
  v106[1] = MEMORY[0x24BDF0910];
  v105[0] = MEMORY[0x242615198](v23, v94, v106);
  v105[1] = v26;
  v104[0] = MEMORY[0x242615198](v23, v44, v105);
  v104[1] = MEMORY[0x242615198](&unk_23BFFEE18, a1);
  v27 = MEMORY[0x242615198](v23, v6, v104);
  *(_QWORD *)(v5 - 224) = v6;
  *(_QWORD *)(v5 - 216) = v27;
  MEMORY[0x24261512C](255, v5 - 224, MEMORY[0x24BEC6710], 0);
  v28 = sub_23BFF8968();
  v29 = sub_23BFF8968();
  v30 = MEMORY[0x242615198](MEMORY[0x24BEE12D8]);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(_QWORD *)(v5 - 224) = v89;
  *(_QWORD *)(v5 - 216) = v90;
  *(_QWORD *)(v5 - 208) = v29;
  *(_QWORD *)(v5 - 200) = v30;
  *(_QWORD *)(v5 - 192) = AssociatedConformanceWitness;
  v32 = sub_23BFF910C();
  *(_QWORD *)(v5 - 224) = v6;
  *(_QWORD *)(v5 - 216) = v27;
  v103[0] = swift_getOpaqueTypeConformance2();
  v103[1] = v27;
  v102[0] = MEMORY[0x242615198](v10, v28, v103);
  v102[1] = v102[0];
  v101 = MEMORY[0x242615198](v10, v29, v102);
  MEMORY[0x242615198](MEMORY[0x24BDF4A08], v32, &v101);
  v33 = sub_23BFF9214();
  v34 = sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE5180);
  v35 = sub_23BFF913C();
  v36 = sub_23BF0A0F0();
  v100[0] = MEMORY[0x242615198](&unk_23C0051E8);
  v100[1] = sub_23BEA1BB8((unint64_t *)&qword_256AE5188, (uint64_t (*)(uint64_t))MEMORY[0x24BDF02F8], MEMORY[0x24BDF02F0]);
  v99[0] = v36;
  v99[1] = MEMORY[0x242615198](v23, v92, v100);
  v98 = MEMORY[0x242615198](v10, v93, v99);
  v37 = MEMORY[0x242615198](MEMORY[0x24BDF5578], v91, &v98);
  v97[0] = MEMORY[0x242615198](MEMORY[0x24BDF5210], v33);
  v97[1] = MEMORY[0x24BDECC60];
  v96[0] = v37;
  v96[1] = MEMORY[0x242615198](v23, v34, v97);
  v96[2] = sub_23BF0A154();
  MEMORY[0x242615198](MEMORY[0x24BDF4AF8], v35, v96);
  v38 = sub_23BFF90AC();
  return MEMORY[0x242615198](MEMORY[0x24BDF4700], v38);
}

void sub_23BF13F28()
{
  sub_23BF140F8((void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BF0B458);
}

void sub_23BF13F34()
{
  sub_23BF140F8((void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BF0EF9C);
}

void sub_23BF13F40()
{
  sub_23BF140F8((void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BF0F978);
}

void sub_23BF13F50()
{
  type metadata accessor for VerticalGridView();
}

void sub_23BF14000()
{
  sub_23BF0F6A4();
}

void sub_23BF14090(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_23BF0C7F8(*(_QWORD *)(v1 + 208), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), a1, *(_OWORD *)(v1 + 64), *(_OWORD *)(v1 + 80), *(_OWORD *)(v1 + 96), *(_OWORD *)(v1 + 112), *(_OWORD *)(v1 + 128), *(_OWORD *)(v1 + 144), *(_OWORD *)(v1 + 160), *(_OWORD *)(v1 + 176), *(_QWORD *)(v1 + 192), *(_QWORD *)(v1 + 200));
}

void sub_23BF140EC()
{
  sub_23BF140F8((void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BF0C9F4);
}

void sub_23BF140F8(void (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  a1(v1[26], v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8], v1[9], v1[10], v1[11], v1[12], v1[13], v1[14], v1[15], v1[16], v1[17], v1[18], v1[19],
    v1[20],
    v1[21],
    v1[22],
    v1[23],
    v1[24],
    v1[25]);
  JUMPOUT(0x23BF14154);
}

void objectdestroyTm_1()
{
  type metadata accessor for VerticalGridView();
}

void sub_23BF141FC()
{
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CanvasSectionHeader();
}

uint64_t sub_23BF14268(uint64_t a1)
{
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 48))(v2, 1, a1))
  {
    v6 = sub_23BFF82CC();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v2, v6);
    v7 = v2 + *(int *)(a1 + 52);
    v8 = *(_QWORD *)(v15 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(v8 + 48))(v7, 1))
      (*(void (**)(uint64_t))(v8 + 8))(v7);
    v9 = v2 + *(int *)(a1 + 56);
    v10 = *(_QWORD *)(v4 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v9, 1, v4))
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v4);
  }
  swift_bridgeObjectRelease();
  v11 = v2 + v1[55];
  v12 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v11, 1, v3))
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v3);
  (*(void (**)(uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v2 + v1[59]);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  if (*(_QWORD *)(v2 + v1[65]))
    swift_release();
  if (*(_QWORD *)(v2 + v1[66]))
    swift_release();
  if (*(_QWORD *)(v2 + v1[67]))
    swift_release();
  return swift_deallocObject();
}

void sub_23BF14448()
{
  type metadata accessor for VerticalGridView();
}

void sub_23BF144FC()
{
  sub_23BF0DB24();
}

void sub_23BF14594()
{
  type metadata accessor for VerticalGridView();
}

void sub_23BF14630()
{
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CanvasSectionHeader();
}

uint64_t sub_23BF146B8(uint64_t a1)
{
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 48))(v3, 1, a1))
  {
    v18 = v7;
    v10 = sub_23BFF82CC();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v3, v10);
    v11 = v3 + *(int *)(a1 + 52);
    v12 = *(_QWORD *)(v22 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(v11, 1))
      (*(void (**)(uint64_t))(v12 + 8))(v11);
    v13 = v3 + *(int *)(a1 + 56);
    v14 = *(_QWORD *)(v5 - 8);
    v7 = v18;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v13, 1, v5))
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v5);
  }
  swift_bridgeObjectRelease();
  v15 = v3 + v2[55];
  v16 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v15, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v4);
  (*(void (**)(uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v3 + v2[59]);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  if (*(_QWORD *)(v3 + v2[65]))
    swift_release();
  if (*(_QWORD *)(v3 + v2[66]))
    swift_release();
  if (*(_QWORD *)(v3 + v2[67]))
    swift_release();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v1 + ((v21 + v20 + v8) & ~v8), v6);
  return swift_deallocObject();
}

void sub_23BF148CC()
{
  type metadata accessor for VerticalGridView();
}

#error "23BF149FC: call analysis failed (funcsize=34)"

void sub_23BF14A20(uint64_t a1)
{
  sub_23BF14A38(a1, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BF08CD8);
}

void sub_23BF14A2C(uint64_t a1)
{
  sub_23BF14A38(a1, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BF08E3C);
}

void sub_23BF14A38(uint64_t a1, void (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v2;

  a2(a1, v2[26], v2[27], v2[2], v2[3], v2[4], v2[5], v2[6], v2[7], v2[8], v2[9], v2[10], v2[11], v2[12], v2[13], v2[14], v2[15], v2[16], v2[17],
    v2[18],
    v2[19],
    v2[20],
    v2[21],
    v2[22],
    v2[23],
    v2[24],
    v2[25]);
  JUMPOUT(0x23BF14A9CLL);
}

void sub_23BF14AAC()
{
  type metadata accessor for VerticalGridView();
}

void sub_23BF14B58()
{
  type metadata accessor for VerticalGridView();
}

uint64_t sub_23BF14BFC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (**v3)();

  v3 = (uint64_t (**)())(v2 + *(int *)(result + 264) + v1);
  if (*v3)
    return (*v3)();
  return result;
}

void objectdestroy_9Tm()
{
  type metadata accessor for VerticalGridView();
}

void sub_23BF14CD8()
{
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CanvasSectionHeader();
}

uint64_t sub_23BF14D44(uint64_t a1)
{
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 48))(v2, 1, a1))
  {
    v6 = sub_23BFF82CC();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v2, v6);
    v7 = v2 + *(int *)(a1 + 52);
    v8 = *(_QWORD *)(v15 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(v8 + 48))(v7, 1))
      (*(void (**)(uint64_t))(v8 + 8))(v7);
    v9 = v2 + *(int *)(a1 + 56);
    v10 = *(_QWORD *)(v4 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v9, 1, v4))
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v4);
  }
  swift_bridgeObjectRelease();
  v11 = v2 + v1[55];
  v12 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v11, 1, v3))
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v3);
  (*(void (**)(uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v2 + v1[59]);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  if (*(_QWORD *)(v2 + v1[65]))
    swift_release();
  if (*(_QWORD *)(v2 + v1[66]))
    swift_release();
  if (*(_QWORD *)(v2 + v1[67]))
    swift_release();
  return swift_deallocObject();
}

void sub_23BF14F30()
{
  type metadata accessor for VerticalGridView();
}

void sub_23BF14FDC()
{
  type metadata accessor for VerticalGridView();
}

uint64_t sub_23BF15080(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (**v3)();

  v3 = (uint64_t (**)())(v2 + *(int *)(result + 268) + v1);
  if (*v3)
    return (*v3)();
  return result;
}

uint64_t HGrid.init(maxRowCount:alignment:spacing:items:content:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, double a8@<D0>, double a9@<D1>)
{
  *(_QWORD *)a7 = result;
  *(_QWORD *)(a7 + 8) = a2;
  *(_QWORD *)(a7 + 16) = a3;
  *(double *)(a7 + 24) = a8;
  *(double *)(a7 + 32) = a9;
  *(_QWORD *)(a7 + 40) = a4;
  *(_QWORD *)(a7 + 48) = a5;
  *(_QWORD *)(a7 + 56) = a6;
  return result;
}

uint64_t sub_23BF150D8(uint64_t a1)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  double v6;
  __int128 v7;
  __int128 v8;

  v7 = *v1;
  v8 = v1[2];
  v2 = *(_QWORD *)(a1 + 16);
  v3 = sub_23BFF94C0();
  MEMORY[0x242615198](MEMORY[0x24BEE12E0], v3);
  if ((sub_23BFF964C() & 1) != 0)
    type metadata accessor for HGrid.Row();
  result = MEMORY[0x242614844](*((_QWORD *)&v8 + 1), v2);
  v5 = v7;
  if ((uint64_t)v7 >= result)
    v5 = result;
  v6 = ceil((double)result / (double)v5);
  if ((~*(_QWORD *)&v6 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v6 <= -9.22337204e18)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v6 >= 9.22337204e18)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if ((v5 & 0x8000000000000000) == 0)
  {
    MEMORY[0x24BDAC7A8](result);
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AE53A0);
    type metadata accessor for HGrid.Row();
  }
LABEL_13:
  __break(1u);
  return result;
}

void sub_23BF152C0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[10];

  v8 = *a1 * a2;
  if ((unsigned __int128)(*a1 * (__int128)a2) >> 64 != v8 >> 63)
  {
    __break(1u);
    goto LABEL_10;
  }
  v9 = v8 + a2;
  if (__OFADD__(v8, a2))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v10 = v9 - 1;
  if (__OFSUB__(v9, 1))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v17[9] = v7;
  v15 = MEMORY[0x242614844](*(_QWORD *)(a3 + 40), a4);
  v16 = v15 - 1;
  if (__OFSUB__(v15, 1))
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v16 >= v10)
    v16 = v10;
  if (v16 >= v8)
  {
    v17[1] = v17;
    v17[6] = v8;
    v17[7] = v16;
    MEMORY[0x24BDAC7A8](v15);
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AE53B8);
    v17[2] = a4;
    v17[3] = a5;
    v17[4] = a6;
    v17[5] = a7;
    type metadata accessor for HGrid.RowItem();
  }
LABEL_13:
  __break(1u);
}

void sub_23BF15430(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD v14[4];

  v11 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v13 = (char *)v14 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BFF94F0();
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(a6, v13, a2);
  v14[0] = a2;
  v14[1] = a3;
  v14[2] = a4;
  v14[3] = a5;
  type metadata accessor for HGrid.RowItem();
}

uint64_t sub_23BF154D0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + *(int *)(result + 52)) = v2;
  return result;
}

void HGrid.body.getter()
{
  type metadata accessor for HGrid.Row();
}

void sub_23BF1553C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_23BFF94C0();
  *(_QWORD *)(v4 - 160) = v2;
  *(_QWORD *)(v4 - 152) = v0;
  *(_QWORD *)(v4 - 144) = v1;
  *(_QWORD *)(v4 - 136) = v3;
  *(_QWORD *)(v4 - 256) = v3;
  type metadata accessor for HGrid.RowItem();
}

uint64_t sub_23BF15564()
{
  uint64_t v0;
  _OWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  void (*v27)(_BYTE *, uint64_t);
  _BYTE v29[80];

  v7 = sub_23BFF94C0();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = MEMORY[0x242615198](MEMORY[0x24BEE12D8], v7);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(_QWORD *)(v6 - 160) = v7;
  *(_QWORD *)(v6 - 152) = AssociatedTypeWitness;
  *(_QWORD *)(v6 - 144) = v0;
  *(_QWORD *)(v6 - 136) = v9;
  *(_QWORD *)(v6 - 128) = AssociatedConformanceWitness;
  v11 = sub_23BFF910C();
  *(_QWORD *)(v6 - 168) = v5;
  v12 = MEMORY[0x24BDF4A08];
  MEMORY[0x242615198](MEMORY[0x24BDF4A08], v11, v6 - 168);
  v13 = sub_23BFF9124();
  v14 = MEMORY[0x242615198](MEMORY[0x24BEE12D8], v4);
  v15 = MEMORY[0x24BEE1768];
  *(_QWORD *)(v6 - 160) = v4;
  *(_QWORD *)(v6 - 152) = v15;
  *(_QWORD *)(v6 - 144) = v13;
  *(_QWORD *)(v6 - 136) = v14;
  *(_QWORD *)(v6 - 128) = MEMORY[0x24BEE1778];
  v16 = sub_23BFF910C();
  *(_QWORD *)(v6 - 176) = MEMORY[0x242615198](MEMORY[0x24BDF4A68], v13);
  MEMORY[0x242615198](v12, v16, v6 - 176);
  v17 = sub_23BFF8C14();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v20 = &v29[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v21);
  v23 = &v29[-v22];
  v24 = v1[1];
  *(_OWORD *)(v6 - 160) = *v1;
  *(_OWORD *)(v6 - 144) = v24;
  v25 = v1[3];
  *(_OWORD *)(v6 - 128) = v1[2];
  *(_OWORD *)(v6 - 112) = v25;
  *(_QWORD *)(v6 - 224) = v3;
  *(_QWORD *)(v6 - 216) = v0;
  v26 = *(_QWORD *)(v6 - 256);
  *(_QWORD *)(v6 - 208) = v2;
  *(_QWORD *)(v6 - 200) = v26;
  *(_QWORD *)(v6 - 192) = v6 - 160;
  sub_23BFF8C08();
  MEMORY[0x242615198](MEMORY[0x24BDF19A8], v17);
  sub_23BEA72EC((uint64_t)v20, v17, (uint64_t)v23);
  v27 = *(void (**)(_BYTE *, uint64_t))(v18 + 8);
  v27(v20, v17);
  sub_23BEA5C0C((uint64_t)v23, v17, *(_QWORD *)(v6 - 248));
  return ((uint64_t (*)(_BYTE *, uint64_t))v27)(v23, v17);
}

void type metadata accessor for HGrid.Row()
{
  JUMPOUT(0x2426150F0);
}

void type metadata accessor for HGrid.RowItem()
{
  JUMPOUT(0x2426150F0);
}

void sub_23BF157B8()
{
  type metadata accessor for HGrid.Row();
}

void sub_23BF15804()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 - 248) = sub_23BFF94C0();
  *(_QWORD *)(v4 - 160) = v3;
  *(_QWORD *)(v4 - 152) = v2;
  *(_QWORD *)(v4 - 144) = v1;
  *(_QWORD *)(v4 - 136) = v0;
  type metadata accessor for HGrid.RowItem();
}

void sub_23BF15828()
{
  _OWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;

  v6 = sub_23BFF94C0();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = MEMORY[0x24BEE12D8];
  v9 = MEMORY[0x242615198](MEMORY[0x24BEE12D8], v6);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(_QWORD *)(v5 - 160) = v6;
  *(_QWORD *)(v5 - 152) = AssociatedTypeWitness;
  *(_QWORD *)(v5 - 144) = v3;
  *(_QWORD *)(v5 - 136) = v9;
  *(_QWORD *)(v5 - 128) = AssociatedConformanceWitness;
  v11 = sub_23BFF910C();
  *(_QWORD *)(v5 - 96) = v1;
  MEMORY[0x242615198](MEMORY[0x24BDF4A08], v11, v5 - 96);
  v12 = sub_23BFF9124();
  *(_QWORD *)(v5 - 280) = v12;
  v13 = *(_QWORD *)(v5 - 248);
  v14 = MEMORY[0x242615198](v8, v13);
  *(_QWORD *)(v5 - 272) = v14;
  v15 = MEMORY[0x24BEE1768];
  *(_QWORD *)(v5 - 160) = v13;
  *(_QWORD *)(v5 - 152) = v15;
  *(_QWORD *)(v5 - 144) = v12;
  *(_QWORD *)(v5 - 136) = v14;
  *(_QWORD *)(v5 - 128) = MEMORY[0x24BEE1778];
  v16 = sub_23BFF910C();
  *(_QWORD *)(v5 - 264) = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  MEMORY[0x24BDAC7A8](v17);
  v18 = v0[1];
  *(_OWORD *)(v5 - 160) = *v0;
  *(_OWORD *)(v5 - 144) = v18;
  v19 = v0[3];
  *(_OWORD *)(v5 - 128) = v0[2];
  *(_OWORD *)(v5 - 112) = v19;
  *(_QWORD *)(v5 - 192) = v4;
  *(_QWORD *)(v5 - 184) = v3;
  *(_QWORD *)(v5 - 176) = v2;
  *(_QWORD *)(v5 - 168) = v1;
  type metadata accessor for HGrid();
}

uint64_t sub_23BF1599C(uint64_t a1)
{
  _OWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v15;

  *(_QWORD *)(v9 - 160) = sub_23BF150D8(a1);
  *(_QWORD *)(v9 - 240) = v6;
  *(_QWORD *)(v9 - 232) = v5;
  *(_QWORD *)(v9 - 224) = v4;
  *(_QWORD *)(v9 - 216) = v3;
  swift_getKeyPath();
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = v6;
  *(_QWORD *)(v10 + 24) = v5;
  *(_QWORD *)(v10 + 32) = v4;
  *(_QWORD *)(v10 + 40) = v3;
  v11 = v1[1];
  *(_OWORD *)(v10 + 48) = *v1;
  *(_OWORD *)(v10 + 64) = v11;
  v12 = v1[3];
  *(_OWORD *)(v10 + 80) = v1[2];
  *(_OWORD *)(v10 + 96) = v12;
  sub_23BF16A10((uint64_t)v1);
  v15 = MEMORY[0x242615198](MEMORY[0x24BDF4A68], *(_QWORD *)(v9 - 280));
  sub_23BFF9100();
  *(_QWORD *)(v9 - 200) = v15;
  MEMORY[0x242615198](MEMORY[0x24BDF4A08], v8, v9 - 200);
  sub_23BEA72EC(v2, v8, v7);
  v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 264) + 8);
  v13(v2, v8);
  sub_23BEA5C0C(v7, v8, *(_QWORD *)(v9 - 256));
  return ((uint64_t (*)(uint64_t, uint64_t))v13)(v7, v8);
}

void sub_23BF15ADC()
{
  sub_23BF157B8();
}

void sub_23BF15AEC()
{
  type metadata accessor for HGrid.RowItem();
}

uint64_t sub_23BF15B38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_BYTE *, uint64_t);
  _BYTE v22[96];

  v5 = sub_23BFF94C0();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = MEMORY[0x242615198](MEMORY[0x24BEE12D8], v5);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(_QWORD *)(v4 - 128) = v5;
  *(_QWORD *)(v4 - 120) = AssociatedTypeWitness;
  *(_QWORD *)(v4 - 112) = v2;
  *(_QWORD *)(v4 - 104) = v7;
  *(_QWORD *)(v4 - 96) = AssociatedConformanceWitness;
  v9 = sub_23BFF910C();
  *(_QWORD *)(v4 - 136) = v0;
  MEMORY[0x242615198](MEMORY[0x24BDF4A08], v9, v4 - 136);
  v10 = sub_23BFF9124();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = &v22[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v14);
  v16 = &v22[-v15];
  v17 = *(uint64_t **)(v4 - 232);
  v18 = *v17;
  v19 = v17[1];
  *(_QWORD *)(v4 - 192) = v3;
  *(_QWORD *)(v4 - 184) = v2;
  *(_QWORD *)(v4 - 176) = v1;
  *(_QWORD *)(v4 - 168) = v0;
  *(_QWORD *)(v4 - 160) = v18;
  *(_QWORD *)(v4 - 152) = v19;
  *(_QWORD *)(v4 - 144) = *(_QWORD *)(v4 - 224);
  sub_23BFF9118();
  MEMORY[0x242615198](MEMORY[0x24BDF4A68], v10);
  sub_23BEA72EC((uint64_t)v13, v10, (uint64_t)v16);
  v20 = *(void (**)(_BYTE *, uint64_t))(v11 + 8);
  v20(v13, v10);
  sub_23BEA5C0C((uint64_t)v16, v10, *(_QWORD *)(v4 - 216));
  return ((uint64_t (*)(_BYTE *, uint64_t))v20)(v16, v10);
}

void sub_23BF15CEC()
{
  type metadata accessor for HGrid.RowItem();
}

uint64_t sub_23BF15D3C()
{
  uint64_t v0;
  uint64_t v1;
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  void (*v20)(_BYTE *, uint64_t);
  _BYTE v22[80];

  v7 = sub_23BFF94C0();
  *(_QWORD *)(v6 - 184) = v7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = MEMORY[0x242615198](MEMORY[0x24BEE12D8], v7);
  *(_QWORD *)(v6 - 192) = v9;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(_QWORD *)(v6 - 200) = AssociatedConformanceWitness;
  *(_QWORD *)(v6 - 120) = v7;
  *(_QWORD *)(v6 - 112) = AssociatedTypeWitness;
  *(_QWORD *)(v6 - 104) = v1;
  *(_QWORD *)(v6 - 96) = v9;
  *(_QWORD *)(v6 - 88) = AssociatedConformanceWitness;
  v11 = sub_23BFF910C();
  *(_QWORD *)(v6 - 176) = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v13 = &v22[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v14);
  v16 = &v22[-v15];
  *(_QWORD *)(v6 - 120) = v3;
  *(_QWORD *)(v6 - 160) = v5;
  *(_QWORD *)(v6 - 152) = v1;
  *(_QWORD *)(v6 - 144) = v4;
  *(_QWORD *)(v6 - 136) = v0;
  *(_QWORD *)(v6 - 208) = swift_getKeyPath();
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = v5;
  *(_QWORD *)(v17 + 24) = v1;
  *(_QWORD *)(v17 + 32) = v4;
  *(_QWORD *)(v17 + 40) = v0;
  v18 = v2[1];
  *(_OWORD *)(v17 + 48) = *v2;
  *(_OWORD *)(v17 + 64) = v18;
  v19 = v2[3];
  *(_OWORD *)(v17 + 80) = v2[2];
  *(_OWORD *)(v17 + 96) = v19;
  swift_bridgeObjectRetain();
  sub_23BF16A10((uint64_t)v2);
  sub_23BFF9100();
  *(_QWORD *)(v6 - 128) = v0;
  MEMORY[0x242615198](MEMORY[0x24BDF4A08], v11, v6 - 128);
  sub_23BEA72EC((uint64_t)v13, v11, (uint64_t)v16);
  v20 = *(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v6 - 176) + 8);
  v20(v13, v11);
  sub_23BEA5C0C((uint64_t)v16, v11, *(_QWORD *)(v6 - 168));
  return ((uint64_t (*)(_BYTE *, uint64_t))v20)(v16, v11);
}

void sub_23BF15F28(uint64_t a1)
{
  uint64_t v1;

  MEMORY[0x24BDAC7A8](a1);
  MEMORY[0x24BDAC7A8](v1);
  type metadata accessor for HGrid.RowItem();
}

uint64_t sub_23BF15FB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, _QWORD);
  void (*v8)(uint64_t, uint64_t);

  v7(v5, *(_QWORD *)(v5 + *(int *)(a1 + 52)));
  sub_23BEA72EC(v3, v1, v4);
  v8 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v8(v3, v1);
  sub_23BEA5C0C(v4, v1, v2);
  return ((uint64_t (*)(uint64_t, uint64_t))v8)(v4, v1);
}

uint64_t sub_23BF16030()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23BF16068()
{
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_23BF16090(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

_QWORD *sub_23BF160E8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a2[7];
  a1[6] = a2[6];
  a1[7] = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_23BF1616C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = v4;
  swift_release();
  return a1;
}

uint64_t sub_23BF161C8(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_23BF16210(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for HGrid()
{
  JUMPOUT(0x2426150F0);
}

void sub_23BF1626C()
{
  type metadata accessor for HGrid.Row();
}

void sub_23BF162A8()
{
  sub_23BFF94C0();
  type metadata accessor for HGrid.RowItem();
}

uint64_t sub_23BF162CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t AssociatedConformanceWitness;

  v3 = sub_23BFF94C0();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = MEMORY[0x24BEE12D8];
  v15 = v3;
  v16 = AssociatedTypeWitness;
  v17 = v2;
  v18 = MEMORY[0x242615198](MEMORY[0x24BEE12D8], v3);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v6 = sub_23BFF910C();
  v14 = v1;
  v7 = MEMORY[0x24BDF4A08];
  MEMORY[0x242615198](MEMORY[0x24BDF4A08], v6, &v14);
  v8 = sub_23BFF9124();
  v9 = MEMORY[0x242615198](v5, v0);
  v15 = v0;
  v16 = MEMORY[0x24BEE1768];
  v17 = v8;
  v18 = v9;
  AssociatedConformanceWitness = MEMORY[0x24BEE1778];
  v10 = sub_23BFF910C();
  v13 = MEMORY[0x242615198](MEMORY[0x24BDF4A68], v8);
  MEMORY[0x242615198](v7, v10, &v13);
  v11 = sub_23BFF8C14();
  return MEMORY[0x242615198](MEMORY[0x24BDF19A8], v11);
}

uint64_t sub_23BF16420()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_23BF16498(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t sub_23BF16548(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
}

uint64_t sub_23BF16558(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_23BF165B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_23BF16610(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_23BF1666C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_23BF166C8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 >= a2)
  {
    if (v5)
      return (*(uint64_t (**)(void))(v4 + 48))();
    return 0;
  }
  if (((((*(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
    v6 = 2;
  else
    v6 = a2 - v5 + 1;
  if (v6 >= 0x10000)
    v7 = 4;
  else
    v7 = 2;
  if (v6 < 0x100)
    v7 = 1;
  if (v6 >= 2)
    v8 = v7;
  else
    v8 = 0;
  return ((uint64_t (*)(void))((char *)&loc_23BF16738 + 4 * byte_23BFFF3E0[v8]))();
}

void sub_23BF16790(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 >= a3)
  {
    v11 = 0;
    if (a2 <= v7)
      goto LABEL_14;
  }
  else
  {
    v8 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v9 = v8 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v7)
LABEL_14:
      __asm { BR              X11 }
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v12 = ~v7 + a2;
    bzero(a1, ((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_23BF16878()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_23BF16880(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x23BF16888);
}

void sub_23BF168A4()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_23BF168AC()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_23BF168B4(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v4 + v5) = 0;
  if (!a2)
    JUMPOUT(0x23BF168BCLL);
  return (*(uint64_t (**)(uint64_t))(v3 + 56))(v4);
}

_QWORD *initializeBufferWithCopyOfBuffer for Symbol(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for Symbol()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for Symbol(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for Symbol(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Symbol(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Symbol(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void sub_23BF16A00()
{
  sub_23BF15AEC();
}

uint64_t sub_23BF16A10(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void sub_23BF16A44()
{
  sub_23BF15CEC();
}

uint64_t sub_23BF16A58()
{
  return sub_23BFF9460();
}

uint64_t sub_23BF16A88()
{
  return 32;
}

__n128 sub_23BF16A94(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t objectdestroyTm_2()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

void sub_23BF16AD0(uint64_t a1)
{
  sub_23BF15F28(a1);
}

void sub_23BF16AE0(uint64_t *a1)
{
  uint64_t *v1;

  sub_23BF152C0(a1, v1[6], v1[7], v1[2], v1[3], v1[4], v1[5]);
}

unint64_t sub_23BF16B04()
{
  unint64_t result;

  result = qword_256AE53B0;
  if (!qword_256AE53B0)
  {
    result = MEMORY[0x242615198](MEMORY[0x24BEE1790], MEMORY[0x24BEE1768]);
    atomic_store(result, (unint64_t *)&qword_256AE53B0);
  }
  return result;
}

void sub_23BF16B48(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  sub_23BF15430(a1, v2[2], v2[3], v2[4], v2[5], a2);
}

uint64_t sub_23BF16B6C(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[2];

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v7 = sub_23BF16B04();
    v8[0] = MEMORY[0x24BEE17A8];
    v8[1] = v7;
    result = MEMORY[0x242615198](a3, v6, v8);
    atomic_store(result, a1);
  }
  return result;
}

double sub_23BF16BD8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  double v6;

  v2 = v1 + *(int *)(a1 + 224);
  v3 = *(_QWORD *)v2;
  v4 = *(_QWORD *)(v2 + 8);
  v5 = *(_BYTE *)(v2 + 16);
  sub_23BF1ECC0(*(_QWORD *)v2, v4, v5);
  v6 = sub_23BFCC4F8(v3, v4, v5);
  sub_23BF1E5BC(v3, v4, v5);
  return v6;
}

uint64_t sub_23BF16C50()
{
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5470);
  sub_23BFF8FF8();
  return v1;
}

uint64_t sub_23BF16C98()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5470);
  return sub_23BFF9004();
}

uint64_t sub_23BF16CE4()
{
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5470);
  sub_23BFF9010();
  return v1;
}

uint64_t sub_23BF16D30()
{
  unsigned __int8 v1;

  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5478);
  sub_23BFF8FF8();
  return v1;
}

uint64_t sub_23BF16D84()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5478);
  return sub_23BFF9004();
}

uint64_t sub_23BF16DDC()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_23BFF94C0();
  swift_bridgeObjectRetain();
  MEMORY[0x242615198](MEMORY[0x24BEE12F0], v0);
  sub_23BFF979C();
  v1 = MEMORY[0x242614844]();
  swift_bridgeObjectRelease();
  return v1;
}

void sub_23BF16E9C()
{
  type metadata accessor for CanvasLayout();
}

void sub_23BF16EE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  double v3;

  v3 = sub_23BF16BD8(v0);
  if (((*(uint64_t (**)(uint64_t, uint64_t, double))(v2 + 56))(v1, v2, v3) & 1) != 0)
    sub_23BF16BD8(v0);
}

void CarouselView.init(items:metrics:layout:aspectRatio:pageControlSpacing:artworkViewBuilder:actionButtonViewBuilder:customItemViewBuilder:onItemSelectedWithIdentifier:onItemAppearedAtIndex:onItemDisappearedAtIndex:)(_QWORD *a1@<X8>)
{
  *a1 = 0;
  type metadata accessor for CarouselView();
}

void sub_23BF17048(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,__int128 a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v27 = v23 + a1[56];
  *(_QWORD *)v27 = swift_getKeyPath();
  *(_QWORD *)(v27 + 8) = 0;
  *(_BYTE *)(v27 + 16) = 0;
  v28 = a1[57];
  *(_QWORD *)(v25 - 128) = 0;
  sub_23BFF8FEC();
  *(_OWORD *)(v23 + v28) = a23;
  v29 = v23 + a1[58];
  *(_BYTE *)(v25 - 128) = 0;
  sub_23BFF8FEC();
  *(_BYTE *)v29 = a23;
  *(_QWORD *)(v29 + 8) = *((_QWORD *)&a23 + 1);
  v30 = v23 + a1[59];
  *(_BYTE *)(v25 - 128) = 1;
  sub_23BFF8FEC();
  *(_BYTE *)v30 = a23;
  *(_QWORD *)(v30 + 8) = *((_QWORD *)&a23 + 1);
  *(_QWORD *)(v23 + 8) = v24;
  v31 = v23 + a1[46];
  v32 = sub_23BFF96A0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v31, a9, v32);
  type metadata accessor for CanvasLayout();
}

uint64_t sub_23BF1713C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v2, v15, a1);
  v8 = (_QWORD *)(v1 + v3[48]);
  *v8 = v6;
  v8[1] = v5;
  *(_QWORD *)(v1 + v3[49]) = v4;
  v9 = (_QWORD *)(v1 + v3[50]);
  *v9 = v18;
  v9[1] = v20;
  v10 = (_QWORD *)(v1 + v3[51]);
  *v10 = v22;
  v10[1] = v24;
  v11 = (_QWORD *)(v1 + v3[52]);
  *v11 = v26;
  v11[1] = v16;
  v12 = (_QWORD *)(v1 + v3[53]);
  *v12 = v17;
  v12[1] = v19;
  v13 = (_QWORD *)(v1 + v3[54]);
  *v13 = v21;
  v13[1] = v23;
  v14 = (_QWORD *)(v1 + v3[55]);
  *v14 = v25;
  v14[1] = v27;
  return result;
}

void type metadata accessor for CarouselView()
{
  JUMPOUT(0x2426150F0);
}

void CarouselView.body.getter(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[38];
  __int128 v15;
  uint64_t v16;
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  int64x2_t v24;
  int64x2_t v25;
  uint64_t v26;
  int64x2_t v27;
  uint64_t v28;
  __int128 v29;
  int64x2_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v23 = a2;
  v3 = *(_QWORD *)(a1 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, __n128))(v3 + 16))((char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  v6 = (*(unsigned __int8 *)(v3 + 80) + 176) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v7 = swift_allocObject();
  v20 = v7;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(a1 + 16);
  v24 = *(int64x2_t *)(a1 + 24);
  *(int64x2_t *)(v7 + 24) = v24;
  v27 = *(int64x2_t *)(a1 + 40);
  *(int64x2_t *)(v7 + 40) = v27;
  v15 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v7 + 56) = v15;
  *(_QWORD *)(v7 + 72) = *(_QWORD *)(a1 + 72);
  v8 = *(_OWORD *)(a1 + 96);
  v22 = *(_OWORD *)(a1 + 80);
  v29 = v8;
  *(_OWORD *)(v7 + 80) = v22;
  *(_OWORD *)(v7 + 96) = v8;
  v9 = *(_QWORD *)(a1 + 112);
  v10 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(v7 + 112) = v9;
  *(_QWORD *)(v7 + 120) = v10;
  v19 = v9;
  v12 = *(_QWORD *)(a1 + 128);
  v26 = *(_QWORD *)(a1 + 136);
  v11 = v26;
  *(_QWORD *)(v7 + 128) = v12;
  *(_QWORD *)(v7 + 136) = v11;
  v21 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(v7 + 144) = v21;
  v13 = *(_QWORD *)(a1 + 168);
  v28 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(v7 + 160) = v28;
  *(_QWORD *)(v7 + 168) = v13;
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v7 + v6, (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  v18 = *(_QWORD *)(v13 + 32);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  v16 = sub_23BFF94C0();
  v25 = vzip1q_s64(v27, v24);
  v30 = v25;
  v31 = v24.i64[0];
  v14[36] = v24.i64[0];
  v32 = v12;
  v33 = v10;
  v34 = v10;
  type metadata accessor for ActionCardView();
}

void sub_23BF173D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64x2_t v18;
  int64x2_t v19;
  _OWORD *v20;
  uint64_t v21;

  *(_QWORD *)(v1 + 392) = a1;
  v6 = MEMORY[0x242615198](&unk_23C005608, a1);
  *(_QWORD *)(v1 + 384) = v6;
  *(_QWORD *)(v4 - 216) = a1;
  *(_QWORD *)(v4 - 208) = v6;
  *(_QWORD *)(v1 + 280) = MEMORY[0x24261512C](255, v4 - 216, MEMORY[0x24BDF3948], 0);
  *(_QWORD *)(v1 + 544) = sub_23BFF8ADC();
  v7 = sub_23BFF862C();
  v8 = sub_23BFF862C();
  *(_QWORD *)(v1 + 376) = v8;
  v9 = sub_23BF1E6D8();
  *(_QWORD *)(v1 + 400) = v9;
  *(_QWORD *)(v4 - 104) = v2;
  *(_QWORD *)(v4 - 96) = v9;
  v10 = MEMORY[0x24BDED308];
  v11 = MEMORY[0x242615198](MEMORY[0x24BDED308], v7, v4 - 104);
  v12 = MEMORY[0x24BDEEC40];
  *(_QWORD *)(v4 - 120) = v11;
  *(_QWORD *)(v4 - 112) = v12;
  v13 = MEMORY[0x242615198](v10, v8, v4 - 120);
  *(_QWORD *)(v1 + 368) = v13;
  *(_QWORD *)(v4 - 216) = v8;
  *(_QWORD *)(v4 - 208) = v13;
  v14 = MEMORY[0x24BDF3100];
  MEMORY[0x24261512C](255, v4 - 216, MEMORY[0x24BDF3100], 0);
  v15 = sub_23BFF862C();
  *(_QWORD *)(v1 + 336) = v15;
  v16 = MEMORY[0x24BDEBEE0];
  *(_QWORD *)(v4 - 136) = v11;
  *(_QWORD *)(v4 - 128) = v16;
  v17 = MEMORY[0x242615198](v10, v15, v4 - 136);
  *(_QWORD *)(v1 + 328) = v17;
  *(_QWORD *)(v4 - 216) = v15;
  *(_QWORD *)(v4 - 208) = v17;
  MEMORY[0x24261512C](255, v4 - 216, v14, 0);
  *(_QWORD *)(v1 + 296) = sub_23BFF8968();
  *(_QWORD *)(v1 + 344) = sub_23BFF8FD4();
  *(_QWORD *)(v1 + 264) = sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3910);
  *(_QWORD *)(v1 + 352) = sub_23BFF8968();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3918);
  *(_QWORD *)(v1 + 360) = sub_23BFF8968();
  *(_QWORD *)(v1 + 224) = sub_23BFF8968();
  v18 = *(int64x2_t *)(v1 + 304);
  v19 = vzip1q_s64(*(int64x2_t *)(v1 + 496), v18);
  v20 = (_OWORD *)(v4 - 216);
  *v20 = *(_OWORD *)(v1 + 512);
  v20[1] = v19;
  *(_QWORD *)(v1 + 136) = v18.i64[0];
  *(_QWORD *)(v4 - 184) = *(_QWORD *)(v1 + 576);
  *(_QWORD *)(v4 - 176) = v2;
  *(_QWORD *)(v4 - 168) = v3;
  v21 = *(_QWORD *)(v1 + 536);
  *(_QWORD *)(v4 - 160) = v3;
  *(_QWORD *)(v4 - 152) = v21;
  *(_QWORD *)(v4 - 144) = *(_QWORD *)(v1 + 568);
  type metadata accessor for FullWidthStageView();
}

void sub_23BF175F4(uint64_t a1)
{
  uint64_t v1;
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)(v1 + 496) = a1;
  v9 = MEMORY[0x242615198](&unk_23C0077B8, a1);
  *(_QWORD *)(v1 + 304) = v9;
  *(_QWORD *)(v7 - 216) = a1;
  *(_QWORD *)(v7 - 208) = v9;
  MEMORY[0x24261512C](255, v7 - 216, v5, 0);
  v11 = type metadata accessor for InfoActionCardView(255, *(_QWORD *)(v1 + 288), v6, v10);
  *(_QWORD *)(v1 + 288) = v11;
  v12 = MEMORY[0x242615198](&unk_23C007F20, v11);
  *(_QWORD *)(v1 + 280) = v12;
  *(_QWORD *)(v7 - 216) = v11;
  *(_QWORD *)(v7 - 208) = v12;
  MEMORY[0x24261512C](255, v7 - 216, v5, 0);
  *(_QWORD *)(v1 + 272) = sub_23BFF8968();
  *(_QWORD *)(v1 + 96) = sub_23BFF8968();
  v14 = type metadata accessor for LargeBrickView(255, v3, v4, v13);
  *(_QWORD *)(v1 + 256) = v14;
  v15 = MEMORY[0x242615198](&protocol conformance descriptor for LargeBrickView<A>, v14);
  *(_QWORD *)(v1 + 248) = v15;
  *(_QWORD *)(v7 - 216) = v14;
  *(_QWORD *)(v7 - 208) = v15;
  MEMORY[0x24261512C](255, v7 - 216, v5, 0);
  v17 = type metadata accessor for DynamicBrickView(255, v3, v4, v16);
  *(_QWORD *)(v1 + 240) = v17;
  v18 = MEMORY[0x242615198](&protocol conformance descriptor for DynamicBrickView<A>, v17);
  *(_QWORD *)(v1 + 232) = v18;
  *(_QWORD *)(v7 - 216) = v17;
  *(_QWORD *)(v7 - 208) = v18;
  MEMORY[0x24261512C](255, v7 - 216, v5, 0);
  *(_QWORD *)(v1 + 168) = sub_23BFF8968();
  v20 = type metadata accessor for MonogramVerticalStackView(255, v3, v4, v19);
  *(_QWORD *)(v1 + 216) = v20;
  v21 = MEMORY[0x242615198](&unk_23BFFA1F4, v20);
  *(_QWORD *)(v1 + 208) = v21;
  *(_QWORD *)(v7 - 216) = v20;
  *(_QWORD *)(v7 - 208) = v21;
  MEMORY[0x24261512C](255, v7 - 216, v5, 0);
  *(_QWORD *)(v1 + 192) = sub_23BFF8968();
  *(_QWORD *)(v1 + 200) = sub_23BFF8968();
  *(_QWORD *)(v1 + 8) = sub_23BFF8968();
  v23 = type metadata accessor for StandardCardView(255, v3, v4, v22);
  *(_QWORD *)(v1 + 184) = v23;
  v24 = MEMORY[0x242615198](&unk_23C007BD0, v23);
  *(_QWORD *)(v1 + 176) = v24;
  *(_QWORD *)(v7 - 216) = v23;
  *(_QWORD *)(v7 - 208) = v24;
  MEMORY[0x24261512C](255, v7 - 216, v5, 0);
  *v2 = *(_OWORD *)(v1 + 512);
  *(_QWORD *)(v7 - 200) = v4;
  *(_QWORD *)(v7 - 192) = v6;
  type metadata accessor for StandardHorizontalStackView();
}

void sub_23BF17828(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t OpaqueTypeConformance2;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t AssociatedConformanceWitness;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;

  *(_QWORD *)(v1 + 512) = a1;
  v7 = MEMORY[0x242615198](&unk_23C0008E8, a1);
  *(_QWORD *)(v1 + 160) = v7;
  *(_QWORD *)(v5 - 216) = a1;
  *(_QWORD *)(v5 - 208) = v7;
  MEMORY[0x24261512C](255, v5 - 216, v4, 0);
  *(_QWORD *)(v1 + 32) = sub_23BFF8968();
  v9 = type metadata accessor for StandardVerticalStackView(255, v2, v3, v8);
  *(_QWORD *)(v1 + 152) = v9;
  v10 = MEMORY[0x242615198](&unk_23C0073B8, v9);
  *(_QWORD *)(v1 + 144) = v10;
  *(_QWORD *)(v5 - 216) = v9;
  *(_QWORD *)(v5 - 208) = v10;
  MEMORY[0x24261512C](255, v5 - 216, v4, 0);
  v12 = type metadata accessor for TallCardView(255, v2, v3, v11);
  v13 = MEMORY[0x242615198](&unk_23BFFF0E4, v12);
  *(_QWORD *)(v1 + 128) = v13;
  *(_QWORD *)(v5 - 216) = v12;
  *(_QWORD *)(v5 - 208) = v13;
  MEMORY[0x24261512C](255, v5 - 216, v4, 0);
  *(_QWORD *)(v1 + 120) = sub_23BFF8968();
  *(_QWORD *)(v1 + 16) = sub_23BFF8968();
  v15 = type metadata accessor for VerticalStackCard(255, v2, v3, v14);
  v16 = MEMORY[0x242615198](&unk_23C0000E0, v15);
  *(_QWORD *)(v1 + 104) = v16;
  *(_QWORD *)(v5 - 216) = v15;
  *(_QWORD *)(v5 - 208) = v16;
  MEMORY[0x24261512C](255, v5 - 216, v4, 0);
  *(_QWORD *)(v1 + 24) = sub_23BFF8968();
  v18 = type metadata accessor for WideBrickView(255, v2, v3, v17);
  v19 = MEMORY[0x242615198](&protocol conformance descriptor for WideBrickView<A>, v18);
  *(_QWORD *)(v1 + 56) = v19;
  *(_QWORD *)(v5 - 216) = v18;
  *(_QWORD *)(v5 - 208) = v19;
  MEMORY[0x24261512C](255, v5 - 216, v4, 0);
  *(_QWORD *)(v1 + 40) = sub_23BFF8968();
  *(_QWORD *)(v1 + 48) = sub_23BFF8968();
  *(_QWORD *)(v1 + 64) = sub_23BFF8968();
  *(_QWORD *)(v1 + 72) = sub_23BFF8FD4();
  *(_QWORD *)(v1 + 80) = sub_23BFF862C();
  *(_QWORD *)(v1 + 88) = sub_23BFF8968();
  *(_QWORD *)(v1 + 112) = sub_23BFF862C();
  *(_QWORD *)(v1 + 136) = sub_23BFF862C();
  v20 = *(_QWORD *)(v1 + 384);
  *(_QWORD *)(v5 - 216) = *(_QWORD *)(v1 + 392);
  *(_QWORD *)(v5 - 208) = v20;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v22 = *(_QWORD *)(v1 + 368);
  *(_QWORD *)(v5 - 216) = *(_QWORD *)(v1 + 376);
  *(_QWORD *)(v5 - 208) = v22;
  v23 = swift_getOpaqueTypeConformance2();
  v24 = *(_QWORD *)(v1 + 328);
  *(_QWORD *)(v5 - 216) = *(_QWORD *)(v1 + 336);
  *(_QWORD *)(v5 - 208) = v24;
  v25 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v5 - 232) = v23;
  *(_QWORD *)(v5 - 224) = v25;
  v26 = MEMORY[0x24BDEF3E0];
  *(_QWORD *)(v5 - 240) = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], *(_QWORD *)(v1 + 296), v5 - 232);
  v27 = MEMORY[0x242615198](MEMORY[0x24BDF3F50], *(_QWORD *)(v1 + 344), v5 - 240);
  v28 = MEMORY[0x24BDECC60];
  *(_QWORD *)(v5 - 256) = v27;
  *(_QWORD *)(v5 - 248) = v28;
  v29 = MEMORY[0x24BDED308];
  v30 = MEMORY[0x242615198](MEMORY[0x24BDED308], *(_QWORD *)(v1 + 264), v5 - 256);
  v31 = sub_23BEA1F94(&qword_256AE3920, &qword_256AE3910, MEMORY[0x24BDF43B0]);
  *(_QWORD *)(v1 + 1024) = v30;
  *(_QWORD *)(v1 + 1032) = v31;
  v32 = MEMORY[0x242615198](v26, *(_QWORD *)(v1 + 352), v1 + 1024);
  v33 = sub_23BEA1F94(&qword_256AE3928, &qword_256AE3918, MEMORY[0x24BDF4700]);
  *(_QWORD *)(v1 + 1008) = v32;
  *(_QWORD *)(v1 + 1016) = v33;
  v34 = MEMORY[0x242615198](v26, *(_QWORD *)(v1 + 360), v1 + 1008);
  *(_QWORD *)(v1 + 992) = OpaqueTypeConformance2;
  *(_QWORD *)(v1 + 1000) = v34;
  v35 = MEMORY[0x242615198](v26, *(_QWORD *)(v1 + 224), v1 + 992);
  v36 = *(_QWORD *)(v1 + 304);
  *(_QWORD *)(v5 - 216) = *(_QWORD *)(v1 + 496);
  *(_QWORD *)(v5 - 208) = v36;
  v37 = swift_getOpaqueTypeConformance2();
  v38 = *(_QWORD *)(v1 + 280);
  *(_QWORD *)(v5 - 216) = *(_QWORD *)(v1 + 288);
  *(_QWORD *)(v5 - 208) = v38;
  v39 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v1 + 976) = v37;
  *(_QWORD *)(v1 + 984) = v39;
  v40 = MEMORY[0x242615198](v26, *(_QWORD *)(v1 + 272), v1 + 976);
  *(_QWORD *)(v1 + 960) = v35;
  *(_QWORD *)(v1 + 968) = v40;
  v41 = MEMORY[0x242615198](v26, *(_QWORD *)(v1 + 96), v1 + 960);
  v42 = *(_QWORD *)(v1 + 248);
  *(_QWORD *)(v5 - 216) = *(_QWORD *)(v1 + 256);
  *(_QWORD *)(v5 - 208) = v42;
  v43 = swift_getOpaqueTypeConformance2();
  v44 = *(_QWORD *)(v1 + 232);
  *(_QWORD *)(v5 - 216) = *(_QWORD *)(v1 + 240);
  *(_QWORD *)(v5 - 208) = v44;
  v45 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v1 + 944) = v43;
  *(_QWORD *)(v1 + 952) = v45;
  v46 = MEMORY[0x242615198](v26, *(_QWORD *)(v1 + 168), v1 + 944);
  v47 = *(_QWORD *)(v1 + 208);
  *(_QWORD *)(v5 - 216) = *(_QWORD *)(v1 + 216);
  *(_QWORD *)(v5 - 208) = v47;
  *(_QWORD *)(v1 + 928) = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v1 + 936) = v45;
  v48 = MEMORY[0x242615198](v26, *(_QWORD *)(v1 + 192), v1 + 928);
  *(_QWORD *)(v1 + 912) = v46;
  *(_QWORD *)(v1 + 920) = v48;
  v49 = MEMORY[0x242615198](v26, *(_QWORD *)(v1 + 200), v1 + 912);
  *(_QWORD *)(v1 + 896) = v41;
  *(_QWORD *)(v1 + 904) = v49;
  v50 = MEMORY[0x242615198](v26, *(_QWORD *)(v1 + 8), v1 + 896);
  v51 = *(_QWORD *)(v1 + 176);
  *(_QWORD *)(v5 - 216) = *(_QWORD *)(v1 + 184);
  *(_QWORD *)(v5 - 208) = v51;
  v52 = swift_getOpaqueTypeConformance2();
  v53 = *(_QWORD *)(v1 + 160);
  *(_QWORD *)(v5 - 216) = *(_QWORD *)(v1 + 512);
  *(_QWORD *)(v5 - 208) = v53;
  v54 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v1 + 880) = v52;
  *(_QWORD *)(v1 + 888) = v54;
  v55 = MEMORY[0x242615198](v26, *(_QWORD *)(v1 + 32), v1 + 880);
  v56 = *(_QWORD *)(v1 + 144);
  *(_QWORD *)(v5 - 216) = *(_QWORD *)(v1 + 152);
  *(_QWORD *)(v5 - 208) = v56;
  v57 = swift_getOpaqueTypeConformance2();
  v58 = *(_QWORD *)(v1 + 128);
  *(_QWORD *)(v5 - 216) = v12;
  *(_QWORD *)(v5 - 208) = v58;
  v59 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v1 + 864) = v57;
  *(_QWORD *)(v1 + 872) = v59;
  v60 = MEMORY[0x242615198](v26, *(_QWORD *)(v1 + 120), v1 + 864);
  *(_QWORD *)(v1 + 848) = v55;
  *(_QWORD *)(v1 + 856) = v60;
  v61 = MEMORY[0x242615198](v26, *(_QWORD *)(v1 + 16), v1 + 848);
  v62 = *(_QWORD *)(v1 + 104);
  *(_QWORD *)(v5 - 216) = v15;
  *(_QWORD *)(v5 - 208) = v62;
  *(_QWORD *)(v1 + 832) = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v1 + 840) = *(_QWORD *)(v1 + 536);
  v63 = MEMORY[0x242615198](v26, *(_QWORD *)(v1 + 24), v1 + 832);
  v64 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)(v5 - 216) = v18;
  *(_QWORD *)(v5 - 208) = v64;
  v65 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v1 + 816) = v63;
  *(_QWORD *)(v1 + 824) = v65;
  v66 = MEMORY[0x242615198](v26, *(_QWORD *)(v1 + 40), v1 + 816);
  *(_QWORD *)(v1 + 800) = v61;
  *(_QWORD *)(v1 + 808) = v66;
  v67 = MEMORY[0x242615198](v26, *(_QWORD *)(v1 + 48), v1 + 800);
  *(_QWORD *)(v1 + 784) = v50;
  *(_QWORD *)(v1 + 792) = v67;
  *(_QWORD *)(v1 + 776) = MEMORY[0x242615198](v26, *(_QWORD *)(v1 + 64), v1 + 784);
  *(_QWORD *)(v1 + 760) = MEMORY[0x242615198](MEMORY[0x24BDF3F50], *(_QWORD *)(v1 + 72), v1 + 776);
  v68 = *(_QWORD *)(v1 + 400);
  *(_QWORD *)(v1 + 768) = v68;
  v69 = MEMORY[0x242615198](v29, *(_QWORD *)(v1 + 80), v1 + 760);
  v70 = MEMORY[0x24BDF5138];
  *(_QWORD *)(v1 + 744) = MEMORY[0x24BDF5138];
  *(_QWORD *)(v1 + 752) = v69;
  v71 = MEMORY[0x242615198](v26, *(_QWORD *)(v1 + 88), v1 + 744);
  v72 = MEMORY[0x24BDF0910];
  *(_QWORD *)(v1 + 728) = v71;
  *(_QWORD *)(v1 + 736) = v72;
  *(_QWORD *)(v1 + 712) = MEMORY[0x242615198](v29, *(_QWORD *)(v1 + 112), v1 + 728);
  *(_QWORD *)(v1 + 720) = v72;
  v73 = v29;
  v74 = v29;
  v75 = *(_QWORD *)(v1 + 136);
  v76 = MEMORY[0x242615198](v73, v75, v1 + 712);
  *(_QWORD *)(v5 - 216) = v75;
  *(_QWORD *)(v5 - 208) = v76;
  MEMORY[0x24261512C](255, v5 - 216, MEMORY[0x24BDF2550], 0);
  v77 = sub_23BFF862C();
  *(_QWORD *)(v5 - 216) = v75;
  *(_QWORD *)(v5 - 208) = v76;
  *(_QWORD *)(v1 + 696) = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v1 + 704) = v68;
  v78 = MEMORY[0x242615198](v74, v77, v1 + 696);
  *(_QWORD *)(v5 - 216) = v77;
  *(_QWORD *)(v5 - 208) = v78;
  MEMORY[0x24261512C](255, v5 - 216, MEMORY[0x24BEC6710], 0);
  v79 = sub_23BFF8968();
  v80 = sub_23BFF862C();
  *(_QWORD *)(v5 - 216) = v77;
  *(_QWORD *)(v5 - 208) = v78;
  *(_QWORD *)(v1 + 680) = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v1 + 688) = v78;
  *(_QWORD *)(v1 + 664) = MEMORY[0x242615198](v26, v79, v1 + 680);
  *(_QWORD *)(v1 + 672) = MEMORY[0x24BDEEC40];
  v81 = MEMORY[0x242615198](v74, v80, v1 + 664);
  *(_QWORD *)(v5 - 216) = v80;
  *(_QWORD *)(v5 - 208) = v81;
  MEMORY[0x24261512C](255, v5 - 216, MEMORY[0x24BDF3100], 0);
  v82 = sub_23BFF8968();
  v83 = *(_QWORD *)(v1 + 408);
  v84 = MEMORY[0x242615198](MEMORY[0x24BEE12D8], v83);
  v85 = *(_QWORD *)(v1 + 416);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(_QWORD *)(v5 - 216) = v83;
  *(_QWORD *)(v5 - 208) = v85;
  *(_QWORD *)(v5 - 200) = v82;
  *(_QWORD *)(v5 - 192) = v84;
  *(_QWORD *)(v5 - 184) = AssociatedConformanceWitness;
  v87 = sub_23BFF910C();
  *(_QWORD *)(v5 - 216) = v80;
  *(_QWORD *)(v5 - 208) = v81;
  v88 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v1 + 648) = v70;
  *(_QWORD *)(v1 + 656) = v88;
  *(_QWORD *)(v1 + 640) = MEMORY[0x242615198](v26, v82, v1 + 648);
  MEMORY[0x242615198](MEMORY[0x24BDF4A08], v87, v1 + 640);
  v89 = sub_23BFF9058();
  MEMORY[0x242615198](MEMORY[0x24BDF4498], v89);
  v90 = sub_23BFF8434();
  v91 = sub_23BFF862C();
  v92 = sub_23BFF8AB8();
  v93 = MEMORY[0x242615198](MEMORY[0x24BDEB238], v90);
  v94 = MEMORY[0x24BDF1050];
  *(_QWORD *)(v1 + 624) = v93;
  *(_QWORD *)(v1 + 632) = v94;
  v95 = MEMORY[0x242615198](MEMORY[0x24BDED308], v91, v1 + 624);
  *(_QWORD *)(v5 - 216) = v91;
  *(_QWORD *)(v5 - 208) = v92;
  v96 = MEMORY[0x24BDF0AB8];
  *(_QWORD *)(v5 - 200) = v95;
  *(_QWORD *)(v5 - 192) = v96;
  v97 = MEMORY[0x24261512C](255, v5 - 216, MEMORY[0x24BDF3000], 0);
  *(_QWORD *)(v5 - 216) = v91;
  *(_QWORD *)(v5 - 208) = v92;
  *(_QWORD *)(v5 - 200) = v95;
  *(_QWORD *)(v5 - 192) = v96;
  v98 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v5 - 216) = v97;
  *(_QWORD *)(v5 - 208) = MEMORY[0x24BEE1768];
  v99 = MEMORY[0x24BEE1788];
  *(_QWORD *)(v5 - 200) = v98;
  *(_QWORD *)(v5 - 192) = v99;
  MEMORY[0x24261512C](255, v5 - 216, MEMORY[0x24BDF38E8], 0);
  v100 = *(_OWORD *)(v1 + 576);
  *(_QWORD *)(v5 - 216) = *(_QWORD *)(v1 + 464);
  *(_QWORD *)(v5 - 208) = v100;
  *(_QWORD *)(v5 - 200) = *(_QWORD *)(v1 + 448);
  *(_QWORD *)(v5 - 192) = *(_QWORD *)(v1 + 568);
  type metadata accessor for CanvasLayout();
}

uint64_t sub_23BF181F0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t OpaqueTypeConformance2;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)(v9 - 216) = v6;
  *(_QWORD *)(v9 - 208) = v8;
  *(_QWORD *)(v9 - 200) = v4;
  *(_QWORD *)(v9 - 192) = v7;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v12 = MEMORY[0x242615198](&protocol conformance descriptor for CanvasLayout<A, B>, a1);
  *(_QWORD *)(v9 - 216) = v5;
  *(_QWORD *)(v9 - 208) = a1;
  *(_QWORD *)(v9 - 200) = OpaqueTypeConformance2;
  *(_QWORD *)(v9 - 192) = v12;
  v13 = MEMORY[0x24261512C](255, v9 - 216, v2, 0);
  *(_QWORD *)(v9 - 216) = v5;
  *(_QWORD *)(v9 - 208) = a1;
  *(_QWORD *)(v9 - 200) = OpaqueTypeConformance2;
  *(_QWORD *)(v9 - 192) = v12;
  v14 = swift_getOpaqueTypeConformance2();
  v15 = sub_23BEAA674();
  v16 = MEMORY[0x24BEE50B0];
  *(_QWORD *)(v9 - 216) = v13;
  *(_QWORD *)(v9 - 208) = v16;
  *(_QWORD *)(v9 - 200) = v14;
  *(_QWORD *)(v9 - 192) = v15;
  v17 = MEMORY[0x24261512C](255, v9 - 216, MEMORY[0x24BDF3138], 0);
  *(_QWORD *)(v9 - 216) = v13;
  *(_QWORD *)(v9 - 208) = v16;
  *(_QWORD *)(v9 - 200) = v14;
  *(_QWORD *)(v9 - 192) = v15;
  v18 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v9 - 216) = v17;
  *(_QWORD *)(v9 - 208) = v18;
  MEMORY[0x24261512C](255, v9 - 216, MEMORY[0x24BDF2E58], 0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE53C8);
  v19 = sub_23BFF862C();
  *(_QWORD *)(v9 - 216) = v17;
  *(_QWORD *)(v9 - 208) = v18;
  v20 = swift_getOpaqueTypeConformance2();
  v21 = sub_23BEA1F94(qword_256AE53D0, &qword_256AE53C8, MEMORY[0x24BDEDC10]);
  v1[76] = v20;
  v1[77] = v21;
  MEMORY[0x242615198](v3, v19, v1 + 76);
  v1[74] = sub_23BFF86C8();
  v1[75] = v22;
  v23 = sub_23BFF86D4();
  MEMORY[0x242615198](MEMORY[0x24BDEDA10], v23);
  sub_23BEA72EC((uint64_t)(v1 + 74), v23, v9 - 216);
  swift_release();
  v24 = *(_QWORD *)(v9 - 208);
  v1[74] = *(_QWORD *)(v9 - 216);
  v1[75] = v24;
  sub_23BEA5C0C((uint64_t)(v1 + 74), v23, v1[61]);
  return swift_release();
}

void sub_23BF183F8()
{
  type metadata accessor for CanvasLayout();
}

void sub_23BF184C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v9[67] = a1;
  v9[63] = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9[50] = (char *)&a9 - v20;
  v21 = sub_23BFF8668();
  v22 = *(_QWORD *)(v21 - 8);
  v9[60] = v22;
  v9[61] = v21;
  v9[64] = *(_QWORD *)(v22 + 64);
  MEMORY[0x24BDAC7A8](v21);
  v9[49] = (char *)&a9 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = v9[84];
  *(_QWORD *)(v19 - 248) = v12;
  *(_QWORD *)(v19 - 240) = v24;
  v25 = v9[87];
  *(_QWORD *)(v19 - 232) = v9[77];
  *(_QWORD *)(v19 - 224) = v25;
  v26 = v9[89];
  *(_QWORD *)(v19 - 216) = v9[78];
  *(_QWORD *)(v19 - 208) = v26;
  *(_QWORD *)(v19 - 200) = v18;
  *(_QWORD *)(v19 - 192) = v17;
  *(_QWORD *)(v19 - 184) = v10;
  *(_QWORD *)(v19 - 176) = v15;
  *(_QWORD *)(v19 - 168) = v16;
  *(_QWORD *)(v19 - 160) = v14;
  v27 = v9[85];
  *(_QWORD *)(v19 - 152) = v9[88];
  *(_QWORD *)(v19 - 144) = v27;
  v28 = v9[83];
  *(_QWORD *)(v19 - 136) = v9[86];
  *(_QWORD *)(v19 - 128) = v28;
  v29 = v9[81];
  *(_QWORD *)(v19 - 120) = v11;
  *(_QWORD *)(v19 - 112) = v29;
  v30 = v9[73];
  *(_QWORD *)(v19 - 104) = v13;
  *(_QWORD *)(v19 - 96) = v30;
  type metadata accessor for CarouselView();
}

void sub_23BF18598(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v9[68] = a1;
  v14 = *(_QWORD *)(a1 - 8);
  v9[48] = v14;
  v9[53] = *(_QWORD *)(v14 + 64);
  MEMORY[0x24BDAC7A8](a1);
  v9[59] = (char *)&a9 - v15;
  v16 = sub_23BFF8AB8();
  v9[66] = v16;
  v9[52] = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v9[47] = (char *)&a9 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9[58] = *(_QWORD *)(v10 + 32);
  v9[57] = swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  v9[56] = sub_23BFF94C0();
  v18 = v9[84];
  *(_QWORD *)(v13 - 248) = v9[87];
  *(_QWORD *)(v13 - 240) = v18;
  *(_QWORD *)(v13 - 232) = v18;
  *(_QWORD *)(v13 - 224) = v11;
  *(_QWORD *)(v13 - 216) = v12;
  *(_QWORD *)(v13 - 208) = v12;
  type metadata accessor for ActionCardView();
}

void sub_23BF18688(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1[54] = a1;
  v8 = MEMORY[0x242615198](&unk_23C005608, a1);
  v1[46] = v8;
  *(_QWORD *)(v6 - 248) = a1;
  *(_QWORD *)(v6 - 240) = v8;
  v1[41] = MEMORY[0x24261512C](255, v6 - 248, MEMORY[0x24BDF3948], 0);
  v1[65] = sub_23BFF8ADC();
  v9 = sub_23BFF862C();
  v10 = sub_23BFF862C();
  v1[45] = v10;
  v11 = sub_23BF1E6D8();
  v1[55] = v11;
  v1[201] = v3;
  v1[202] = v11;
  v12 = MEMORY[0x24BDED308];
  v13 = MEMORY[0x242615198](MEMORY[0x24BDED308], v9, v1 + 201);
  v14 = MEMORY[0x24BDEEC40];
  v1[199] = v13;
  v1[200] = v14;
  v15 = MEMORY[0x242615198](v12, v10, v1 + 199);
  v1[44] = v15;
  *(_QWORD *)(v6 - 248) = v10;
  *(_QWORD *)(v6 - 240) = v15;
  v16 = MEMORY[0x24BDF3100];
  MEMORY[0x24261512C](255, v6 - 248, MEMORY[0x24BDF3100], 0);
  v17 = sub_23BFF862C();
  v1[38] = v17;
  v18 = MEMORY[0x24BDEBEE0];
  v1[197] = v13;
  v1[198] = v18;
  v19 = MEMORY[0x242615198](v12, v17, v1 + 197);
  v1[37] = v19;
  *(_QWORD *)(v6 - 248) = v17;
  *(_QWORD *)(v6 - 240) = v19;
  MEMORY[0x24261512C](255, v6 - 248, v16, 0);
  v1[35] = sub_23BFF8968();
  v1[39] = sub_23BFF8FD4();
  v1[36] = sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3910);
  v1[42] = sub_23BFF8968();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3918);
  v1[43] = sub_23BFF8968();
  v1[27] = sub_23BFF8968();
  v20 = v1[84];
  *(_QWORD *)(v6 - 248) = v5;
  *(_QWORD *)(v6 - 240) = v20;
  v21 = v1[89];
  *(_QWORD *)(v6 - 232) = v20;
  *(_QWORD *)(v6 - 224) = v21;
  *(_QWORD *)(v6 - 216) = v1[76];
  *(_QWORD *)(v6 - 208) = v2;
  v22 = v1[85];
  *(_QWORD *)(v6 - 200) = v22;
  *(_QWORD *)(v6 - 192) = v22;
  v23 = v1[80];
  *(_QWORD *)(v6 - 184) = v4;
  *(_QWORD *)(v6 - 176) = v23;
  type metadata accessor for FullWidthStageView();
}

void sub_23BF188A4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1[41] = a1;
  v9 = MEMORY[0x242615198](&unk_23C0077B8, a1);
  v1[40] = v9;
  *(_QWORD *)(v7 - 248) = a1;
  *(_QWORD *)(v7 - 240) = v9;
  MEMORY[0x24261512C](255, v7 - 248, v2, 0);
  v11 = type metadata accessor for InfoActionCardView(255, v6, v5, v10);
  v1[34] = v11;
  v12 = MEMORY[0x242615198](&unk_23C007F20, v11);
  v1[33] = v12;
  *(_QWORD *)(v7 - 248) = v11;
  *(_QWORD *)(v7 - 240) = v12;
  MEMORY[0x24261512C](255, v7 - 248, v2, 0);
  v1[32] = sub_23BFF8968();
  v1[12] = sub_23BFF8968();
  v13 = v3;
  v15 = type metadata accessor for LargeBrickView(255, v4, v3, v14);
  v1[31] = v15;
  v16 = MEMORY[0x242615198](&protocol conformance descriptor for LargeBrickView<A>, v15);
  v1[30] = v16;
  *(_QWORD *)(v7 - 248) = v15;
  *(_QWORD *)(v7 - 240) = v16;
  MEMORY[0x24261512C](255, v7 - 248, v2, 0);
  v18 = type metadata accessor for DynamicBrickView(255, v4, v3, v17);
  v1[29] = v18;
  v19 = MEMORY[0x242615198](&protocol conformance descriptor for DynamicBrickView<A>, v18);
  v1[28] = v19;
  *(_QWORD *)(v7 - 248) = v18;
  *(_QWORD *)(v7 - 240) = v19;
  MEMORY[0x24261512C](255, v7 - 248, v2, 0);
  v1[20] = sub_23BFF8968();
  v21 = type metadata accessor for MonogramVerticalStackView(255, v4, v13, v20);
  v1[26] = v21;
  v22 = MEMORY[0x242615198](&unk_23BFFA1F4, v21);
  v1[25] = v22;
  *(_QWORD *)(v7 - 248) = v21;
  *(_QWORD *)(v7 - 240) = v22;
  MEMORY[0x24261512C](255, v7 - 248, v2, 0);
  v1[23] = sub_23BFF8968();
  v1[24] = sub_23BFF8968();
  *v1 = sub_23BFF8968();
  v24 = type metadata accessor for StandardCardView(255, v4, v13, v23);
  v1[22] = v24;
  v25 = MEMORY[0x242615198](&unk_23C007BD0, v24);
  v1[21] = v25;
  *(_QWORD *)(v7 - 248) = v24;
  *(_QWORD *)(v7 - 240) = v25;
  MEMORY[0x24261512C](255, v7 - 248, v2, 0);
  *(_QWORD *)(v7 - 248) = v4;
  *(_QWORD *)(v7 - 240) = v6;
  *(_QWORD *)(v7 - 232) = v13;
  *(_QWORD *)(v7 - 224) = v5;
  type metadata accessor for StandardHorizontalStackView();
}

uint64_t sub_23BF18AD8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t OpaqueTypeConformance2;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t AssociatedConformanceWitness;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _BYTE *v89;
  uint64_t v90;
  __n128 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void (*v145)(uint64_t, uint64_t, uint64_t);
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void (*v149)(uint64_t, _QWORD, uint64_t);
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  void (*v169)(char *, uint64_t, uint64_t);
  uint64_t v170;
  uint64_t v171;
  char *v172;
  void (*v173)(char *, uint64_t, uint64_t);
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  _QWORD *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  void (*v240)(uint64_t, uint64_t);
  _BYTE v242[80];

  v1[19] = a1;
  v7 = MEMORY[0x242615198](&unk_23C0008E8, a1);
  v1[18] = v7;
  *(_QWORD *)(v5 - 248) = a1;
  *(_QWORD *)(v5 - 240) = v7;
  MEMORY[0x24261512C](255, v5 - 248, v2, 0);
  v1[3] = sub_23BFF8968();
  v9 = type metadata accessor for StandardVerticalStackView(255, v4, v3, v8);
  v1[17] = v9;
  v10 = MEMORY[0x242615198](&unk_23C0073B8, v9);
  v1[16] = v10;
  *(_QWORD *)(v5 - 248) = v9;
  *(_QWORD *)(v5 - 240) = v10;
  MEMORY[0x24261512C](255, v5 - 248, v2, 0);
  v12 = type metadata accessor for TallCardView(255, v4, v3, v11);
  v13 = MEMORY[0x242615198](&unk_23BFFF0E4, v12);
  v1[15] = v13;
  *(_QWORD *)(v5 - 248) = v12;
  *(_QWORD *)(v5 - 240) = v13;
  MEMORY[0x24261512C](255, v5 - 248, v2, 0);
  v1[14] = sub_23BFF8968();
  v1[1] = sub_23BFF8968();
  v15 = type metadata accessor for VerticalStackCard(255, v4, v3, v14);
  v16 = MEMORY[0x242615198](&unk_23C0000E0, v15);
  v1[11] = v16;
  *(_QWORD *)(v5 - 248) = v15;
  *(_QWORD *)(v5 - 240) = v16;
  MEMORY[0x24261512C](255, v5 - 248, v2, 0);
  v1[2] = sub_23BFF8968();
  v18 = type metadata accessor for WideBrickView(255, v4, v3, v17);
  v19 = MEMORY[0x242615198](&protocol conformance descriptor for WideBrickView<A>, v18);
  v1[6] = v19;
  *(_QWORD *)(v5 - 248) = v18;
  *(_QWORD *)(v5 - 240) = v19;
  MEMORY[0x24261512C](255, v5 - 248, v2, 0);
  v1[4] = sub_23BFF8968();
  v1[5] = sub_23BFF8968();
  v1[7] = sub_23BFF8968();
  v1[8] = sub_23BFF8FD4();
  v1[9] = sub_23BFF862C();
  v1[10] = sub_23BFF8968();
  v1[13] = sub_23BFF862C();
  v20 = sub_23BFF862C();
  v21 = v1[46];
  *(_QWORD *)(v5 - 248) = v1[54];
  *(_QWORD *)(v5 - 240) = v21;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v23 = v1[44];
  *(_QWORD *)(v5 - 248) = v1[45];
  *(_QWORD *)(v5 - 240) = v23;
  v24 = swift_getOpaqueTypeConformance2();
  v25 = v1[37];
  *(_QWORD *)(v5 - 248) = v1[38];
  *(_QWORD *)(v5 - 240) = v25;
  v26 = swift_getOpaqueTypeConformance2();
  v1[195] = v24;
  v1[196] = v26;
  v27 = MEMORY[0x24BDEF3E0];
  v1[194] = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v1[35], v1 + 195);
  v28 = MEMORY[0x242615198](MEMORY[0x24BDF3F50], v1[39], v1 + 194);
  v29 = MEMORY[0x24BDECC60];
  v1[192] = v28;
  v1[193] = v29;
  v30 = MEMORY[0x242615198](MEMORY[0x24BDED308], v1[36], v1 + 192);
  v31 = sub_23BEA1F94(&qword_256AE3920, &qword_256AE3910, MEMORY[0x24BDF43B0]);
  v1[190] = v30;
  v1[191] = v31;
  v32 = MEMORY[0x242615198](v27, v1[42], v1 + 190);
  v33 = sub_23BEA1F94(&qword_256AE3928, &qword_256AE3918, MEMORY[0x24BDF4700]);
  v1[188] = v32;
  v1[189] = v33;
  v34 = MEMORY[0x242615198](v27, v1[43], v1 + 188);
  v1[186] = OpaqueTypeConformance2;
  v1[187] = v34;
  v35 = MEMORY[0x242615198](v27, v1[27], v1 + 186);
  v36 = v1[40];
  *(_QWORD *)(v5 - 248) = v1[41];
  *(_QWORD *)(v5 - 240) = v36;
  v37 = swift_getOpaqueTypeConformance2();
  v38 = v1[33];
  *(_QWORD *)(v5 - 248) = v1[34];
  *(_QWORD *)(v5 - 240) = v38;
  v39 = swift_getOpaqueTypeConformance2();
  v1[184] = v37;
  v1[185] = v39;
  v40 = MEMORY[0x242615198](v27, v1[32], v1 + 184);
  v1[182] = v35;
  v1[183] = v40;
  v41 = MEMORY[0x242615198](v27, v1[12], v1 + 182);
  v42 = v1[30];
  *(_QWORD *)(v5 - 248) = v1[31];
  *(_QWORD *)(v5 - 240) = v42;
  v43 = swift_getOpaqueTypeConformance2();
  v44 = v1[28];
  *(_QWORD *)(v5 - 248) = v1[29];
  *(_QWORD *)(v5 - 240) = v44;
  v45 = swift_getOpaqueTypeConformance2();
  v1[180] = v43;
  v1[181] = v45;
  v46 = MEMORY[0x242615198](v27, v1[20], v1 + 180);
  v47 = v1[25];
  *(_QWORD *)(v5 - 248) = v1[26];
  *(_QWORD *)(v5 - 240) = v47;
  v1[178] = swift_getOpaqueTypeConformance2();
  v1[179] = v45;
  v48 = MEMORY[0x242615198](v27, v1[23], v1 + 178);
  v1[176] = v46;
  v1[177] = v48;
  v49 = MEMORY[0x242615198](v27, v1[24], v1 + 176);
  v1[174] = v41;
  v1[175] = v49;
  v50 = MEMORY[0x242615198](v27, *v1, v1 + 174);
  v51 = v1[21];
  *(_QWORD *)(v5 - 248) = v1[22];
  *(_QWORD *)(v5 - 240) = v51;
  v52 = swift_getOpaqueTypeConformance2();
  v53 = v1[18];
  *(_QWORD *)(v5 - 248) = v1[19];
  *(_QWORD *)(v5 - 240) = v53;
  v54 = swift_getOpaqueTypeConformance2();
  v1[172] = v52;
  v1[173] = v54;
  v55 = MEMORY[0x242615198](v27, v1[3], v1 + 172);
  v56 = v1[16];
  *(_QWORD *)(v5 - 248) = v1[17];
  *(_QWORD *)(v5 - 240) = v56;
  v57 = swift_getOpaqueTypeConformance2();
  v58 = v1[15];
  *(_QWORD *)(v5 - 248) = v12;
  *(_QWORD *)(v5 - 240) = v58;
  v59 = swift_getOpaqueTypeConformance2();
  v1[170] = v57;
  v1[171] = v59;
  v60 = MEMORY[0x242615198](v27, v1[14], v1 + 170);
  v1[168] = v55;
  v1[169] = v60;
  v61 = MEMORY[0x242615198](v27, v1[1], v1 + 168);
  v62 = v1[11];
  *(_QWORD *)(v5 - 248) = v15;
  *(_QWORD *)(v5 - 240) = v62;
  v1[166] = swift_getOpaqueTypeConformance2();
  v1[167] = v1[83];
  v63 = MEMORY[0x242615198](v27, v1[2], v1 + 166);
  v64 = v1[6];
  *(_QWORD *)(v5 - 248) = v18;
  *(_QWORD *)(v5 - 240) = v64;
  v65 = swift_getOpaqueTypeConformance2();
  v1[164] = v63;
  v1[165] = v65;
  v66 = MEMORY[0x242615198](v27, v1[4], v1 + 164);
  v1[162] = v61;
  v1[163] = v66;
  v67 = MEMORY[0x242615198](v27, v1[5], v1 + 162);
  v1[160] = v50;
  v1[161] = v67;
  v1[159] = MEMORY[0x242615198](v27, v1[7], v1 + 160);
  v1[157] = MEMORY[0x242615198](MEMORY[0x24BDF3F50], v1[8], v1 + 159);
  v68 = v1[55];
  v1[158] = v68;
  v69 = MEMORY[0x24BDED308];
  v70 = MEMORY[0x242615198](MEMORY[0x24BDED308], v1[9], v1 + 157);
  v1[155] = MEMORY[0x24BDF5138];
  v1[156] = v70;
  v71 = MEMORY[0x242615198](v27, v1[10], v1 + 155);
  v72 = MEMORY[0x24BDF0910];
  v1[153] = v71;
  v1[154] = v72;
  v1[151] = MEMORY[0x242615198](v69, v1[13], v1 + 153);
  v1[152] = v72;
  v73 = MEMORY[0x242615198](v69, v20, v1 + 151);
  *(_QWORD *)(v5 - 248) = v20;
  *(_QWORD *)(v5 - 240) = v73;
  MEMORY[0x24261512C](255, v5 - 248, MEMORY[0x24BDF2550], 0);
  v74 = sub_23BFF862C();
  *(_QWORD *)(v5 - 248) = v20;
  *(_QWORD *)(v5 - 240) = v73;
  v1[149] = swift_getOpaqueTypeConformance2();
  v1[150] = v68;
  v75 = MEMORY[0x242615198](v69, v74, v1 + 149);
  *(_QWORD *)(v5 - 248) = v74;
  *(_QWORD *)(v5 - 240) = v75;
  MEMORY[0x24261512C](255, v5 - 248, MEMORY[0x24BEC6710], 0);
  v76 = sub_23BFF8968();
  v77 = sub_23BFF862C();
  *(_QWORD *)(v5 - 248) = v74;
  *(_QWORD *)(v5 - 240) = v75;
  v1[147] = swift_getOpaqueTypeConformance2();
  v1[148] = v75;
  v1[145] = MEMORY[0x242615198](v27, v76, v1 + 147);
  v1[146] = MEMORY[0x24BDEEC40];
  v78 = MEMORY[0x242615198](v69, v77, v1 + 145);
  *(_QWORD *)(v5 - 248) = v77;
  *(_QWORD *)(v5 - 240) = v78;
  MEMORY[0x24261512C](255, v5 - 248, MEMORY[0x24BDF3100], 0);
  v79 = sub_23BFF8968();
  v80 = v1[56];
  v81 = MEMORY[0x242615198](MEMORY[0x24BEE12D8], v80);
  v82 = v1[57];
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(_QWORD *)(v5 - 248) = v80;
  *(_QWORD *)(v5 - 240) = v82;
  *(_QWORD *)(v5 - 232) = v79;
  *(_QWORD *)(v5 - 224) = v81;
  *(_QWORD *)(v5 - 216) = AssociatedConformanceWitness;
  v84 = sub_23BFF910C();
  *(_QWORD *)(v5 - 248) = v77;
  *(_QWORD *)(v5 - 240) = v78;
  v85 = swift_getOpaqueTypeConformance2();
  v1[143] = MEMORY[0x24BDF5138];
  v1[144] = v85;
  v1[142] = MEMORY[0x242615198](v27, v79, v1 + 143);
  MEMORY[0x242615198](MEMORY[0x24BDF4A08], v84, v1 + 142);
  v86 = sub_23BFF9058();
  v1[25] = v86;
  v1[24] = MEMORY[0x242615198](MEMORY[0x24BDF4498], v86);
  v87 = sub_23BFF8434();
  v1[26] = *(_QWORD *)(v87 - 8);
  MEMORY[0x24BDAC7A8](v87);
  v89 = &v242[-v88];
  v90 = sub_23BFF862C();
  v1[65] = *(_QWORD *)(v90 - 8);
  v91 = MEMORY[0x24BDAC7A8](v90);
  v1[23] = &v242[-v92];
  v93 = MEMORY[0x242615198](MEMORY[0x24BDEB238], v87, v91);
  v1[22] = v93;
  v94 = MEMORY[0x24BDF1050];
  v1[140] = v93;
  v1[141] = v94;
  v95 = MEMORY[0x242615198](MEMORY[0x24BDED308], v90, v1 + 140);
  v1[20] = v90;
  v96 = v1[66];
  *(_QWORD *)(v5 - 248) = v90;
  *(_QWORD *)(v5 - 240) = v96;
  v97 = MEMORY[0x24BDF0AB8];
  *(_QWORD *)(v5 - 232) = v95;
  *(_QWORD *)(v5 - 224) = v97;
  v98 = v95;
  v1[21] = v95;
  v99 = v97;
  v100 = MEMORY[0x24261512C](0, v5 - 248, MEMORY[0x24BDF3000], 0);
  v1[32] = *(_QWORD *)(v100 - 8);
  v101 = v100;
  MEMORY[0x24BDAC7A8](v100);
  v1[54] = &v242[-v102];
  *(_QWORD *)(v5 - 248) = v90;
  *(_QWORD *)(v5 - 240) = v96;
  *(_QWORD *)(v5 - 232) = v98;
  *(_QWORD *)(v5 - 224) = v99;
  v103 = swift_getOpaqueTypeConformance2();
  v104 = v101;
  v1[27] = v101;
  *(_QWORD *)(v5 - 248) = v101;
  v105 = MEMORY[0x24BEE1768];
  *(_QWORD *)(v5 - 240) = MEMORY[0x24BEE1768];
  v106 = MEMORY[0x24BEE1788];
  *(_QWORD *)(v5 - 232) = v103;
  *(_QWORD *)(v5 - 224) = v106;
  v107 = v103;
  v1[28] = v103;
  v108 = v106;
  v109 = MEMORY[0x24BDF38E8];
  v110 = MEMORY[0x24261512C](0, v5 - 248, MEMORY[0x24BDF38E8], 0);
  v1[36] = *(_QWORD *)(v110 - 8);
  v111 = v110;
  MEMORY[0x24BDAC7A8](v110);
  v1[55] = &v242[-v112];
  *(_QWORD *)(v5 - 248) = v104;
  *(_QWORD *)(v5 - 240) = v105;
  *(_QWORD *)(v5 - 232) = v107;
  *(_QWORD *)(v5 - 224) = v108;
  v113 = swift_getOpaqueTypeConformance2();
  v114 = v1[67];
  v115 = MEMORY[0x242615198](&protocol conformance descriptor for CanvasLayout<A, B>, v114);
  *(_QWORD *)(v5 - 248) = v111;
  *(_QWORD *)(v5 - 240) = v114;
  v1[29] = v111;
  v1[30] = v115;
  *(_QWORD *)(v5 - 232) = v113;
  *(_QWORD *)(v5 - 224) = v115;
  v116 = v113;
  v1[31] = v113;
  v117 = v115;
  v118 = MEMORY[0x24261512C](0, v5 - 248, v109, 0);
  v1[39] = *(_QWORD *)(v118 - 8);
  v119 = v118;
  MEMORY[0x24BDAC7A8](v118);
  v1[57] = &v242[-v120];
  *(_QWORD *)(v5 - 248) = v111;
  *(_QWORD *)(v5 - 240) = v114;
  *(_QWORD *)(v5 - 232) = v116;
  *(_QWORD *)(v5 - 224) = v117;
  v121 = swift_getOpaqueTypeConformance2();
  v122 = sub_23BEAA674();
  v123 = MEMORY[0x24BEE50B0];
  *(_QWORD *)(v5 - 248) = v119;
  *(_QWORD *)(v5 - 240) = v123;
  v124 = v119;
  v1[34] = v119;
  v1[35] = v121;
  v125 = v123;
  *(_QWORD *)(v5 - 232) = v121;
  *(_QWORD *)(v5 - 224) = v122;
  v126 = v122;
  v1[33] = v122;
  v127 = MEMORY[0x24261512C](0, v5 - 248, MEMORY[0x24BDF3138], 0);
  v1[41] = *(_QWORD *)(v127 - 8);
  v128 = v127;
  v1[37] = v127;
  MEMORY[0x24BDAC7A8](v127);
  v1[58] = &v242[-v129];
  *(_QWORD *)(v5 - 248) = v124;
  *(_QWORD *)(v5 - 240) = v125;
  *(_QWORD *)(v5 - 232) = v121;
  *(_QWORD *)(v5 - 224) = v126;
  v130 = swift_getOpaqueTypeConformance2();
  v1[38] = v130;
  *(_QWORD *)(v5 - 248) = v128;
  *(_QWORD *)(v5 - 240) = v130;
  v131 = MEMORY[0x24261512C](0, v5 - 248, MEMORY[0x24BDF2E58], 0);
  v1[45] = *(_QWORD *)(v131 - 8);
  v1[42] = v131;
  MEMORY[0x24BDAC7A8](v131);
  v1[56] = &v242[-v132];
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE53C8);
  v133 = sub_23BFF862C();
  v1[44] = v133;
  v1[46] = *(_QWORD *)(v133 - 8);
  MEMORY[0x24BDAC7A8](v133);
  v1[40] = &v242[-((v134 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v135);
  v1[43] = &v242[-v136];
  sub_23BFF8B24();
  v1[116] = v1[82];
  v137 = v1[84];
  v1[117] = v137;
  v1[118] = v1[77];
  v1[119] = v1[87];
  v1[120] = v1[78];
  v1[121] = v1[89];
  v1[122] = v1[71];
  v1[123] = v1[74];
  v1[124] = v1[70];
  v1[125] = v1[79];
  v1[126] = v1[76];
  v1[127] = v1[75];
  v1[128] = v1[88];
  v1[129] = v1[85];
  v1[130] = v1[86];
  v1[131] = v1[83];
  v1[132] = v1[69];
  v1[133] = v1[81];
  v1[134] = v1[80];
  v1[135] = v1[73];
  v138 = v1[72];
  v1[136] = v138;
  sub_23BFF8440();
  sub_23BFF8B54();
  sub_23BFF8650();
  v139 = v1[23];
  sub_23BFF8DA0();
  (*(void (**)(_BYTE *, uint64_t))(v1[26] + 8))(v89, v87);
  v140 = v1[47];
  sub_23BFF8AAC();
  v141 = v1[20];
  v142 = v1[66];
  sub_23BFF8E30();
  (*(void (**)(uint64_t, uint64_t))(v1[52] + 8))(v140, v142);
  (*(void (**)(uint64_t, uint64_t))(v1[65] + 8))(v139, v141);
  v143 = v1[68];
  *(_QWORD *)(v5 - 248) = sub_23BF16C50();
  v144 = v1[48];
  v145 = *(void (**)(uint64_t, uint64_t, uint64_t))(v144 + 16);
  v1[66] = v145;
  v146 = v1[59];
  v145(v146, v138, v143);
  v148 = v1[60];
  v147 = v1[61];
  v149 = *(void (**)(uint64_t, _QWORD, uint64_t))(v148 + 16);
  v1[47] = v149;
  v150 = v1[49];
  v149(v150, v1[62], v147);
  v151 = *(unsigned __int8 *)(v144 + 80);
  v152 = (v151 + 176) & ~v151;
  v153 = v152 + v1[53];
  v1[65] = v152;
  v154 = v151 | 7;
  v1[52] = v151 | 7;
  v1[53] = v153;
  v155 = *(unsigned __int8 *)(v148 + 80);
  v156 = (v153 + v155) & ~v155;
  v157 = v1[64];
  v1[24] = v156;
  v1[25] = v154 | v155;
  v1[26] = v156 + v157;
  v158 = (char *)swift_allocObject();
  *((_QWORD *)v158 + 2) = v1[82];
  *((_QWORD *)v158 + 3) = v137;
  v159 = v137;
  v160 = v1[87];
  *((_QWORD *)v158 + 4) = v1[77];
  *((_QWORD *)v158 + 5) = v160;
  v161 = v1[89];
  *((_QWORD *)v158 + 6) = v1[78];
  *((_QWORD *)v158 + 7) = v161;
  v162 = v1[74];
  *((_QWORD *)v158 + 8) = v1[71];
  *((_QWORD *)v158 + 9) = v162;
  v163 = v1[79];
  *((_QWORD *)v158 + 10) = v1[70];
  *((_QWORD *)v158 + 11) = v163;
  v164 = v1[75];
  *((_QWORD *)v158 + 12) = v1[76];
  *((_QWORD *)v158 + 13) = v164;
  v165 = v1[85];
  *((_QWORD *)v158 + 14) = v1[88];
  *((_QWORD *)v158 + 15) = v165;
  v166 = v1[83];
  *((_QWORD *)v158 + 16) = v1[86];
  *((_QWORD *)v158 + 17) = v166;
  v167 = v1[81];
  *((_QWORD *)v158 + 18) = v1[69];
  *((_QWORD *)v158 + 19) = v167;
  v168 = v1[73];
  *((_QWORD *)v158 + 20) = v1[80];
  *((_QWORD *)v158 + 21) = v168;
  v169 = *(void (**)(char *, uint64_t, uint64_t))(v144 + 32);
  v1[64] = v169;
  v170 = v146;
  v171 = v1[68];
  v169(&v158[v152], v146, v171);
  v172 = &v158[v156];
  v173 = *(void (**)(char *, uint64_t, uint64_t))(v1[60] + 32);
  v174 = v150;
  v173(v172, v150, v147);
  v175 = v1[54];
  v176 = v1[27];
  sub_23BFF8F20();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v1[32] + 8))(v175, v176);
  v177 = v171;
  v178 = v1[72];
  v179 = v1[50];
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v1[63] + 16))(v179, v178 + *(int *)(v171 + 188), v1[67]);
  ((void (*)(uint64_t, uint64_t, uint64_t))v1[66])(v146, v178, v171);
  v180 = v1[61];
  ((void (*)(uint64_t, _QWORD, uint64_t))v1[47])(v174, v1[62], v180);
  v181 = (char *)swift_allocObject();
  *((_QWORD *)v181 + 2) = v1[82];
  *((_QWORD *)v181 + 3) = v159;
  v182 = v1[77];
  v183 = v1[87];
  *((_QWORD *)v181 + 4) = v182;
  *((_QWORD *)v181 + 5) = v183;
  v184 = v1[78];
  v185 = v1[89];
  *((_QWORD *)v181 + 6) = v184;
  *((_QWORD *)v181 + 7) = v185;
  v186 = v1[74];
  *((_QWORD *)v181 + 8) = v1[71];
  *((_QWORD *)v181 + 9) = v186;
  v187 = v1[79];
  *((_QWORD *)v181 + 10) = v1[70];
  *((_QWORD *)v181 + 11) = v187;
  v188 = v1[75];
  *((_QWORD *)v181 + 12) = v1[76];
  *((_QWORD *)v181 + 13) = v188;
  v189 = v1[85];
  *((_QWORD *)v181 + 14) = v1[88];
  *((_QWORD *)v181 + 15) = v189;
  v190 = v1[83];
  *((_QWORD *)v181 + 16) = v1[86];
  *((_QWORD *)v181 + 17) = v190;
  v191 = v1[81];
  *((_QWORD *)v181 + 18) = v1[69];
  *((_QWORD *)v181 + 19) = v191;
  v192 = &v181[v1[65]];
  v193 = v1[73];
  *((_QWORD *)v181 + 20) = v1[80];
  *((_QWORD *)v181 + 21) = v193;
  ((void (*)(char *, uint64_t, uint64_t))v1[64])(v192, v170, v177);
  v173(&v181[v1[24]], v174, v180);
  v194 = v179;
  v195 = v1[29];
  v196 = v1[67];
  v197 = v1[55];
  sub_23BFF8F20();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v1[63] + 8))(v194, v196);
  (*(void (**)(uint64_t, uint64_t))(v1[36] + 8))(v197, v195);
  v198 = v170;
  v199 = v1[68];
  ((void (*)(uint64_t, _QWORD, uint64_t))v1[66])(v170, v1[72], v199);
  v200 = (_QWORD *)swift_allocObject();
  v201 = v1[84];
  v200[2] = v1[82];
  v200[3] = v201;
  v202 = v1[87];
  v200[4] = v182;
  v200[5] = v202;
  v203 = v1[89];
  v200[6] = v184;
  v200[7] = v203;
  v204 = v1[71];
  v205 = v1[74];
  v200[8] = v204;
  v200[9] = v205;
  v206 = v1[70];
  v207 = v1[79];
  v200[10] = v206;
  v200[11] = v207;
  v208 = v1[76];
  v209 = v1[75];
  v200[12] = v208;
  v200[13] = v209;
  v210 = v1[85];
  v200[14] = v1[88];
  v200[15] = v210;
  v211 = v1[83];
  v200[16] = v1[86];
  v200[17] = v211;
  v212 = v1[81];
  v200[18] = v1[69];
  v200[19] = v212;
  v213 = (char *)v200 + v1[65];
  v214 = v1[73];
  v200[20] = v1[80];
  v200[21] = v214;
  ((void (*)(char *, uint64_t, uint64_t))v1[64])(v213, v198, v199);
  v215 = v1[57];
  v216 = v1[34];
  sub_23BFF8E78();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v1[39] + 8))(v215, v216);
  v217 = v1[59];
  v218 = v1[68];
  ((void (*)(uint64_t, _QWORD, uint64_t))v1[66])(v217, v1[72], v218);
  v219 = (_QWORD *)swift_allocObject();
  v220 = v1[84];
  v219[2] = v1[82];
  v219[3] = v220;
  v221 = v1[87];
  v219[4] = v1[77];
  v219[5] = v221;
  v222 = v1[89];
  v219[6] = v1[78];
  v219[7] = v222;
  v223 = v1[74];
  v219[8] = v204;
  v219[9] = v223;
  v224 = v1[79];
  v219[10] = v206;
  v219[11] = v224;
  v225 = v1[75];
  v219[12] = v208;
  v219[13] = v225;
  v226 = v1[85];
  v219[14] = v1[88];
  v219[15] = v226;
  v219[16] = v1[86];
  v219[17] = v211;
  v227 = v1[69];
  v219[18] = v227;
  v219[19] = v212;
  v228 = (char *)v219 + v1[65];
  v229 = v1[80];
  v219[20] = v229;
  v219[21] = v214;
  ((void (*)(char *, uint64_t, uint64_t))v1[64])(v228, v217, v218);
  v230 = v1[37];
  v231 = v1[38];
  v232 = v1[58];
  sub_23BFF8E0C();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v1[41] + 8))(v232, v230);
  v1[68] = sub_23BFF91B4();
  v1[92] = v1[82];
  v1[93] = v1[84];
  v1[94] = v1[77];
  v1[95] = v1[87];
  v1[96] = v1[78];
  v1[97] = v1[89];
  v1[98] = v1[71];
  v1[99] = v1[74];
  v1[100] = v1[70];
  v1[101] = v1[79];
  v1[102] = v1[76];
  v1[103] = v1[75];
  v1[104] = v1[88];
  v1[105] = v226;
  v1[106] = v1[86];
  v1[107] = v1[83];
  v1[108] = v227;
  v1[109] = v1[81];
  v1[110] = v229;
  v1[111] = v214;
  v1[112] = v1[72];
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5458);
  *(_QWORD *)(v5 - 248) = v230;
  *(_QWORD *)(v5 - 240) = v231;
  v233 = swift_getOpaqueTypeConformance2();
  sub_23BF21A34();
  v234 = v1[40];
  v235 = v1[42];
  v236 = v1[56];
  sub_23BFF8ECC();
  (*(void (**)(uint64_t, uint64_t))(v1[45] + 8))(v236, v235);
  v237 = sub_23BEA1F94(qword_256AE53D0, &qword_256AE53C8, MEMORY[0x24BDEDC10]);
  v1[138] = v233;
  v1[139] = v237;
  v238 = v1[44];
  MEMORY[0x242615198](MEMORY[0x24BDED308], v238, v1 + 138);
  v239 = v1[43];
  sub_23BEA72EC(v234, v238, v239);
  v240 = *(void (**)(uint64_t, uint64_t))(v1[46] + 8);
  v240(v234, v238);
  sub_23BEA5C0C(v239, v238, v1[51]);
  return ((uint64_t (*)(uint64_t, uint64_t))v240)(v239, v238);
}

void sub_23BF19FA8()
{
  swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  sub_23BFF94C0();
  type metadata accessor for ActionCardView();
}

void sub_23BF1A0B4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1[49] = a1;
  v8 = MEMORY[0x242615198](&unk_23C005608, a1);
  v1[48] = v8;
  *(_QWORD *)(v6 - 216) = a1;
  *(_QWORD *)(v6 - 208) = v8;
  v1[42] = MEMORY[0x24261512C](255, v6 - 216, MEMORY[0x24BDF3948], 0);
  v1[71] = sub_23BFF8ADC();
  v9 = sub_23BFF862C();
  v10 = sub_23BFF862C();
  v1[47] = v10;
  v11 = sub_23BF1E6D8();
  v1[53] = v11;
  *(_QWORD *)(v6 - 104) = v3;
  *(_QWORD *)(v6 - 96) = v11;
  v12 = MEMORY[0x24BDED308];
  v13 = MEMORY[0x242615198](MEMORY[0x24BDED308], v9, v6 - 104);
  v14 = MEMORY[0x24BDEEC40];
  *(_QWORD *)(v6 - 120) = v13;
  *(_QWORD *)(v6 - 112) = v14;
  v15 = MEMORY[0x242615198](v12, v10, v6 - 120);
  v1[46] = v15;
  *(_QWORD *)(v6 - 216) = v10;
  *(_QWORD *)(v6 - 208) = v15;
  v16 = MEMORY[0x24BDF3100];
  MEMORY[0x24261512C](255, v6 - 216, MEMORY[0x24BDF3100], 0);
  v17 = sub_23BFF862C();
  v1[39] = v17;
  v18 = MEMORY[0x24BDEBEE0];
  *(_QWORD *)(v6 - 136) = v13;
  *(_QWORD *)(v6 - 128) = v18;
  v19 = MEMORY[0x242615198](v12, v17, v6 - 136);
  v1[38] = v19;
  *(_QWORD *)(v6 - 216) = v17;
  *(_QWORD *)(v6 - 208) = v19;
  MEMORY[0x24261512C](255, v6 - 216, v16, 0);
  v1[36] = sub_23BFF8968();
  v1[40] = sub_23BFF8FD4();
  v1[37] = sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3910);
  v1[43] = sub_23BFF8968();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3918);
  v1[44] = sub_23BFF8968();
  v1[28] = sub_23BFF8968();
  *(_QWORD *)(v6 - 216) = v2;
  *(_QWORD *)(v6 - 208) = v4;
  v20 = v1[74];
  *(_QWORD *)(v6 - 200) = v4;
  *(_QWORD *)(v6 - 192) = v20;
  *(_QWORD *)(v6 - 184) = v1[72];
  *(_QWORD *)(v6 - 176) = v3;
  *(_QWORD *)(v6 - 168) = v5;
  *(_QWORD *)(v6 - 160) = v5;
  v21 = v1[73];
  *(_QWORD *)(v6 - 152) = v1[75];
  *(_QWORD *)(v6 - 144) = v21;
  type metadata accessor for FullWidthStageView();
}

void sub_23BF1A2B8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1[42] = a1;
  v8 = MEMORY[0x242615198](&unk_23C0077B8, a1);
  v1[41] = v8;
  *(_QWORD *)(v6 - 216) = a1;
  *(_QWORD *)(v6 - 208) = v8;
  v9 = MEMORY[0x24BDF3948];
  MEMORY[0x24261512C](255, v6 - 216, MEMORY[0x24BDF3948], 0);
  v1[51] = v4;
  v1[52] = v5;
  v11 = type metadata accessor for InfoActionCardView(255, v4, v5, v10);
  v1[35] = v11;
  v12 = MEMORY[0x242615198](&unk_23C007F20, v11);
  v1[34] = v12;
  *(_QWORD *)(v6 - 216) = v11;
  *(_QWORD *)(v6 - 208) = v12;
  MEMORY[0x24261512C](255, v6 - 216, v9, 0);
  v1[33] = sub_23BFF8968();
  v1[11] = sub_23BFF8968();
  v14 = type metadata accessor for LargeBrickView(255, v2, v3, v13);
  v1[32] = v14;
  v15 = MEMORY[0x242615198](&protocol conformance descriptor for LargeBrickView<A>, v14);
  v1[31] = v15;
  *(_QWORD *)(v6 - 216) = v14;
  *(_QWORD *)(v6 - 208) = v15;
  MEMORY[0x24261512C](255, v6 - 216, v9, 0);
  v17 = type metadata accessor for DynamicBrickView(255, v2, v3, v16);
  v1[30] = v17;
  v18 = MEMORY[0x242615198](&protocol conformance descriptor for DynamicBrickView<A>, v17);
  v1[29] = v18;
  *(_QWORD *)(v6 - 216) = v17;
  *(_QWORD *)(v6 - 208) = v18;
  MEMORY[0x24261512C](255, v6 - 216, v9, 0);
  v1[21] = sub_23BFF8968();
  v20 = type metadata accessor for MonogramVerticalStackView(255, v2, v3, v19);
  v1[27] = v20;
  v21 = MEMORY[0x242615198](&unk_23BFFA1F4, v20);
  v1[26] = v21;
  *(_QWORD *)(v6 - 216) = v20;
  *(_QWORD *)(v6 - 208) = v21;
  MEMORY[0x24261512C](255, v6 - 216, v9, 0);
  v1[24] = sub_23BFF8968();
  v1[25] = sub_23BFF8968();
  sub_23BFF8968();
  v23 = type metadata accessor for StandardCardView(255, v2, v3, v22);
  v1[23] = v23;
  v24 = MEMORY[0x242615198](&unk_23C007BD0, v23);
  v1[22] = v24;
  *(_QWORD *)(v6 - 216) = v23;
  *(_QWORD *)(v6 - 208) = v24;
  MEMORY[0x24261512C](255, v6 - 216, v9, 0);
  *(_QWORD *)(v6 - 216) = v2;
  *(_QWORD *)(v6 - 208) = v4;
  *(_QWORD *)(v6 - 200) = v3;
  *(_QWORD *)(v6 - 192) = v5;
  type metadata accessor for StandardHorizontalStackView();
}

uint64_t sub_23BF1A4F0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t OpaqueTypeConformance2;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t AssociatedConformanceWitness;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _BYTE *v92;
  uint64_t v93;
  uint64_t v94;
  _BYTE *v95;
  void (*v96)(_BYTE *, uint64_t);
  _BYTE v98[96];

  v1[20] = a1;
  v8 = MEMORY[0x242615198](&unk_23C0008E8, a1);
  v1[19] = v8;
  *(_QWORD *)(v6 - 216) = a1;
  *(_QWORD *)(v6 - 208) = v8;
  MEMORY[0x24261512C](255, v6 - 216, v4, 0);
  v1[2] = sub_23BFF8968();
  v10 = type metadata accessor for StandardVerticalStackView(255, v2, v5, v9);
  v1[18] = v10;
  v11 = MEMORY[0x242615198](&unk_23C0073B8, v10);
  v1[17] = v11;
  *(_QWORD *)(v6 - 216) = v10;
  *(_QWORD *)(v6 - 208) = v11;
  MEMORY[0x24261512C](255, v6 - 216, v4, 0);
  v13 = type metadata accessor for TallCardView(255, v2, v5, v12);
  v1[15] = v13;
  v14 = MEMORY[0x242615198](&unk_23BFFF0E4, v13);
  v1[14] = v14;
  *(_QWORD *)(v6 - 216) = v13;
  *(_QWORD *)(v6 - 208) = v14;
  MEMORY[0x24261512C](255, v6 - 216, v4, 0);
  v1[13] = sub_23BFF8968();
  *v1 = sub_23BFF8968();
  v1[50] = v2;
  v1[45] = v5;
  v16 = type metadata accessor for VerticalStackCard(255, v2, v5, v15);
  v17 = MEMORY[0x242615198](&unk_23C0000E0, v16);
  v1[10] = v17;
  *(_QWORD *)(v6 - 216) = v16;
  *(_QWORD *)(v6 - 208) = v17;
  MEMORY[0x24261512C](255, v6 - 216, v4, 0);
  v1[1] = sub_23BFF8968();
  v19 = type metadata accessor for WideBrickView(255, v2, v5, v18);
  v20 = MEMORY[0x242615198](&protocol conformance descriptor for WideBrickView<A>, v19);
  v1[5] = v20;
  *(_QWORD *)(v6 - 216) = v19;
  *(_QWORD *)(v6 - 208) = v20;
  MEMORY[0x24261512C](255, v6 - 216, v4, 0);
  v1[3] = sub_23BFF8968();
  v1[4] = sub_23BFF8968();
  v21 = v3;
  v1[6] = sub_23BFF8968();
  v1[7] = sub_23BFF8FD4();
  v1[8] = sub_23BFF862C();
  v1[9] = sub_23BFF8968();
  v1[12] = sub_23BFF862C();
  v1[16] = sub_23BFF862C();
  v22 = v1[48];
  *(_QWORD *)(v6 - 216) = v1[49];
  *(_QWORD *)(v6 - 208) = v22;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v24 = v1[46];
  *(_QWORD *)(v6 - 216) = v1[47];
  *(_QWORD *)(v6 - 208) = v24;
  v25 = swift_getOpaqueTypeConformance2();
  v26 = v1[38];
  *(_QWORD *)(v6 - 216) = v1[39];
  *(_QWORD *)(v6 - 208) = v26;
  v27 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v6 - 232) = v25;
  *(_QWORD *)(v6 - 224) = v27;
  v28 = MEMORY[0x24BDEF3E0];
  *(_QWORD *)(v6 - 240) = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v1[36], v6 - 232);
  v29 = MEMORY[0x242615198](MEMORY[0x24BDF3F50], v1[40], v6 - 240);
  v30 = MEMORY[0x24BDECC60];
  *(_QWORD *)(v6 - 256) = v29;
  *(_QWORD *)(v6 - 248) = v30;
  v31 = MEMORY[0x24BDED308];
  v32 = MEMORY[0x242615198](MEMORY[0x24BDED308], v1[37], v6 - 256);
  v33 = sub_23BEA1F94(&qword_256AE3920, &qword_256AE3910, MEMORY[0x24BDF43B0]);
  v1[148] = v32;
  v1[149] = v33;
  v34 = MEMORY[0x242615198](v28, v1[43], v1 + 148);
  v35 = sub_23BEA1F94(&qword_256AE3928, &qword_256AE3918, MEMORY[0x24BDF4700]);
  v1[146] = v34;
  v1[147] = v35;
  v36 = MEMORY[0x242615198](v28, v1[44], v1 + 146);
  v1[144] = OpaqueTypeConformance2;
  v1[145] = v36;
  v37 = MEMORY[0x242615198](v28, v1[28], v1 + 144);
  v38 = v1[41];
  *(_QWORD *)(v6 - 216) = v1[42];
  *(_QWORD *)(v6 - 208) = v38;
  v39 = swift_getOpaqueTypeConformance2();
  v40 = v1[34];
  *(_QWORD *)(v6 - 216) = v1[35];
  *(_QWORD *)(v6 - 208) = v40;
  v41 = swift_getOpaqueTypeConformance2();
  v1[142] = v39;
  v1[143] = v41;
  v42 = MEMORY[0x242615198](v28, v1[33], v1 + 142);
  v1[140] = v37;
  v1[141] = v42;
  v43 = MEMORY[0x242615198](v28, v1[11], v1 + 140);
  v44 = v1[31];
  *(_QWORD *)(v6 - 216) = v1[32];
  *(_QWORD *)(v6 - 208) = v44;
  v45 = swift_getOpaqueTypeConformance2();
  v46 = v1[29];
  *(_QWORD *)(v6 - 216) = v1[30];
  *(_QWORD *)(v6 - 208) = v46;
  v47 = swift_getOpaqueTypeConformance2();
  v1[138] = v45;
  v1[139] = v47;
  v48 = MEMORY[0x242615198](v28, v1[21], v1 + 138);
  v49 = v1[26];
  *(_QWORD *)(v6 - 216) = v1[27];
  *(_QWORD *)(v6 - 208) = v49;
  v1[136] = swift_getOpaqueTypeConformance2();
  v1[137] = v47;
  v50 = MEMORY[0x242615198](v28, v1[24], v1 + 136);
  v1[134] = v48;
  v1[135] = v50;
  v51 = MEMORY[0x242615198](v28, v1[25], v1 + 134);
  v1[132] = v43;
  v1[133] = v51;
  v52 = MEMORY[0x242615198](v28, v21, v1 + 132);
  v53 = v1[22];
  *(_QWORD *)(v6 - 216) = v1[23];
  *(_QWORD *)(v6 - 208) = v53;
  v54 = swift_getOpaqueTypeConformance2();
  v55 = v1[19];
  *(_QWORD *)(v6 - 216) = v1[20];
  *(_QWORD *)(v6 - 208) = v55;
  v56 = swift_getOpaqueTypeConformance2();
  v1[130] = v54;
  v1[131] = v56;
  v57 = MEMORY[0x242615198](v28, v1[2], v1 + 130);
  v58 = v1[17];
  *(_QWORD *)(v6 - 216) = v1[18];
  *(_QWORD *)(v6 - 208) = v58;
  v59 = swift_getOpaqueTypeConformance2();
  v60 = v1[14];
  *(_QWORD *)(v6 - 216) = v1[15];
  *(_QWORD *)(v6 - 208) = v60;
  v61 = swift_getOpaqueTypeConformance2();
  v1[128] = v59;
  v1[129] = v61;
  v62 = MEMORY[0x242615198](v28, v1[13], v1 + 128);
  v1[126] = v57;
  v1[127] = v62;
  v63 = MEMORY[0x242615198](v28, *v1, v1 + 126);
  v64 = v1[10];
  *(_QWORD *)(v6 - 216) = v16;
  *(_QWORD *)(v6 - 208) = v64;
  v1[124] = swift_getOpaqueTypeConformance2();
  v1[125] = v1[75];
  v65 = MEMORY[0x242615198](v28, v1[1], v1 + 124);
  v66 = v1[5];
  *(_QWORD *)(v6 - 216) = v19;
  *(_QWORD *)(v6 - 208) = v66;
  v67 = swift_getOpaqueTypeConformance2();
  v1[122] = v65;
  v1[123] = v67;
  v68 = MEMORY[0x242615198](v28, v1[3], v1 + 122);
  v1[120] = v63;
  v1[121] = v68;
  v69 = MEMORY[0x242615198](v28, v1[4], v1 + 120);
  v1[118] = v52;
  v1[119] = v69;
  v1[117] = MEMORY[0x242615198](v28, v1[6], v1 + 118);
  v1[115] = MEMORY[0x242615198](MEMORY[0x24BDF3F50], v1[7], v1 + 117);
  v70 = v1[53];
  v1[116] = v70;
  v71 = MEMORY[0x242615198](v31, v1[8], v1 + 115);
  v1[113] = MEMORY[0x24BDF5138];
  v1[114] = v71;
  v72 = MEMORY[0x242615198](v28, v1[9], v1 + 113);
  v73 = MEMORY[0x24BDF0910];
  v1[111] = v72;
  v1[112] = v73;
  v1[109] = MEMORY[0x242615198](v31, v1[12], v1 + 111);
  v1[110] = v73;
  v74 = v1[16];
  v75 = MEMORY[0x242615198](v31, v74, v1 + 109);
  *(_QWORD *)(v6 - 216) = v74;
  *(_QWORD *)(v6 - 208) = v75;
  MEMORY[0x24261512C](255, v6 - 216, MEMORY[0x24BDF2550], 0);
  v76 = sub_23BFF862C();
  *(_QWORD *)(v6 - 216) = v74;
  *(_QWORD *)(v6 - 208) = v75;
  v1[107] = swift_getOpaqueTypeConformance2();
  v1[108] = v70;
  v77 = MEMORY[0x242615198](v31, v76, v1 + 107);
  *(_QWORD *)(v6 - 216) = v76;
  *(_QWORD *)(v6 - 208) = v77;
  MEMORY[0x24261512C](255, v6 - 216, MEMORY[0x24BEC6710], 0);
  v78 = sub_23BFF8968();
  v79 = sub_23BFF862C();
  *(_QWORD *)(v6 - 216) = v76;
  *(_QWORD *)(v6 - 208) = v77;
  v1[105] = swift_getOpaqueTypeConformance2();
  v1[106] = v77;
  v1[103] = MEMORY[0x242615198](v28, v78, v1 + 105);
  v1[104] = MEMORY[0x24BDEEC40];
  v80 = MEMORY[0x242615198](v31, v79, v1 + 103);
  *(_QWORD *)(v6 - 216) = v79;
  *(_QWORD *)(v6 - 208) = v80;
  MEMORY[0x24261512C](255, v6 - 216, MEMORY[0x24BDF3100], 0);
  v81 = sub_23BFF8968();
  v82 = v1[54];
  v83 = MEMORY[0x242615198](MEMORY[0x24BEE12D8], v82);
  v84 = v1[56];
  v85 = v1[55];
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(_QWORD *)(v6 - 216) = v82;
  *(_QWORD *)(v6 - 208) = v85;
  *(_QWORD *)(v6 - 200) = v81;
  *(_QWORD *)(v6 - 192) = v83;
  *(_QWORD *)(v6 - 184) = AssociatedConformanceWitness;
  v87 = sub_23BFF910C();
  *(_QWORD *)(v6 - 216) = v79;
  *(_QWORD *)(v6 - 208) = v80;
  v88 = swift_getOpaqueTypeConformance2();
  v1[101] = MEMORY[0x24BDF5138];
  v1[102] = v88;
  v1[100] = MEMORY[0x242615198](v28, v81, v1 + 101);
  MEMORY[0x242615198](MEMORY[0x24BDF4A08], v87, v1 + 100);
  v89 = sub_23BFF9058();
  v90 = *(_QWORD *)(v89 - 8);
  MEMORY[0x24BDAC7A8](v89);
  v92 = &v98[-((v91 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v93);
  v95 = &v98[-v94];
  sub_23BFF883C();
  v1[78] = v1[61];
  v1[79] = v1[51];
  v1[80] = v1[64];
  v1[81] = v1[50];
  v1[82] = v1[66];
  v1[83] = v1[74];
  v1[84] = v1[68];
  v1[85] = v1[60];
  v1[86] = v1[62];
  v1[87] = v1[59];
  v1[88] = v1[72];
  v1[89] = v1[58];
  v1[90] = v84;
  v1[91] = v1[52];
  v1[92] = v1[45];
  v1[93] = v1[75];
  v1[94] = v1[65];
  v1[95] = v1[67];
  v1[96] = v1[73];
  v1[97] = v1[63];
  v1[98] = v1[69];
  sub_23BFF904C();
  MEMORY[0x242615198](MEMORY[0x24BDF4498], v89);
  sub_23BEA72EC((uint64_t)v92, v89, (uint64_t)v95);
  v96 = *(void (**)(_BYTE *, uint64_t))(v90 + 8);
  v96(v92, v89);
  sub_23BEA5C0C((uint64_t)v95, v89, v1[70]);
  return ((uint64_t (*)(_BYTE *, uint64_t))v96)(v95, v89);
}

void sub_23BF1AF34()
{
  type metadata accessor for CarouselView();
}

void sub_23BF1B008(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v16 = *(_QWORD *)(a1 - 8);
  v9[57] = v16;
  v9[58] = a1;
  v9[59] = *(_QWORD *)(v16 + 64);
  MEMORY[0x24BDAC7A8](a1);
  v9[56] = (char *)&a9 - v17;
  v9[77] = *(_QWORD *)(v10 + 32);
  v9[74] = swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  v9[54] = sub_23BFF94C0();
  *(_QWORD *)(v15 - 248) = v14;
  *(_QWORD *)(v15 - 240) = v13;
  *(_QWORD *)(v15 - 232) = v13;
  *(_QWORD *)(v15 - 224) = v11;
  *(_QWORD *)(v15 - 216) = v12;
  *(_QWORD *)(v15 - 208) = v12;
  type metadata accessor for ActionCardView();
}

void sub_23BF1B0A8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1[48] = a1;
  v8 = MEMORY[0x242615198](&unk_23C005608, a1);
  v1[47] = v8;
  *(_QWORD *)(v6 - 248) = a1;
  *(_QWORD *)(v6 - 240) = v8;
  v1[42] = MEMORY[0x24261512C](255, v6 - 248, MEMORY[0x24BDF3948], 0);
  v1[73] = sub_23BFF8ADC();
  v9 = sub_23BFF862C();
  v10 = sub_23BFF862C();
  v1[46] = v10;
  v11 = sub_23BF1E6D8();
  v1[53] = v11;
  v1[139] = v2;
  v1[140] = v11;
  v12 = MEMORY[0x24BDED308];
  v13 = MEMORY[0x242615198](MEMORY[0x24BDED308], v9, v1 + 139);
  v14 = MEMORY[0x24BDEEC40];
  v1[137] = v13;
  v1[138] = v14;
  v15 = MEMORY[0x242615198](v12, v10, v1 + 137);
  v1[45] = v15;
  *(_QWORD *)(v6 - 248) = v10;
  *(_QWORD *)(v6 - 240) = v15;
  v16 = MEMORY[0x24BDF3100];
  MEMORY[0x24261512C](255, v6 - 248, MEMORY[0x24BDF3100], 0);
  v17 = sub_23BFF862C();
  v1[39] = v17;
  v18 = MEMORY[0x24BDEBEE0];
  v1[135] = v13;
  v1[136] = v18;
  v19 = MEMORY[0x242615198](v12, v17, v1 + 135);
  v1[38] = v19;
  *(_QWORD *)(v6 - 248) = v17;
  *(_QWORD *)(v6 - 240) = v19;
  MEMORY[0x24261512C](255, v6 - 248, v16, 0);
  v1[36] = sub_23BFF8968();
  v1[40] = sub_23BFF8FD4();
  v1[37] = sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3910);
  v1[43] = sub_23BFF8968();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3918);
  v1[44] = sub_23BFF8968();
  v1[28] = sub_23BFF8968();
  *(_QWORD *)(v6 - 248) = v5;
  *(_QWORD *)(v6 - 240) = v4;
  v20 = v1[78];
  *(_QWORD *)(v6 - 232) = v4;
  *(_QWORD *)(v6 - 224) = v20;
  *(_QWORD *)(v6 - 216) = v1[75];
  *(_QWORD *)(v6 - 208) = v2;
  *(_QWORD *)(v6 - 200) = v3;
  *(_QWORD *)(v6 - 192) = v3;
  v21 = v1[76];
  *(_QWORD *)(v6 - 184) = v1[79];
  *(_QWORD *)(v6 - 176) = v21;
  type metadata accessor for FullWidthStageView();
}

void sub_23BF1B2B8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1[42] = a1;
  v8 = MEMORY[0x242615198](&unk_23C0077B8, a1);
  v1[41] = v8;
  *(_QWORD *)(v6 - 248) = a1;
  *(_QWORD *)(v6 - 240) = v8;
  v9 = MEMORY[0x24BDF3948];
  MEMORY[0x24261512C](255, v6 - 248, MEMORY[0x24BDF3948], 0);
  v10 = v4;
  v1[51] = v4;
  v1[52] = v3;
  v12 = type metadata accessor for InfoActionCardView(255, v4, v3, v11);
  v1[35] = v12;
  v13 = MEMORY[0x242615198](&unk_23C007F20, v12);
  v1[34] = v13;
  *(_QWORD *)(v6 - 248) = v12;
  *(_QWORD *)(v6 - 240) = v13;
  MEMORY[0x24261512C](255, v6 - 248, v9, 0);
  v1[33] = sub_23BFF8968();
  v1[13] = sub_23BFF8968();
  v15 = type metadata accessor for LargeBrickView(255, v5, v2, v14);
  v1[32] = v15;
  v16 = MEMORY[0x242615198](&protocol conformance descriptor for LargeBrickView<A>, v15);
  v1[31] = v16;
  *(_QWORD *)(v6 - 248) = v15;
  *(_QWORD *)(v6 - 240) = v16;
  MEMORY[0x24261512C](255, v6 - 248, v9, 0);
  v18 = type metadata accessor for DynamicBrickView(255, v5, v2, v17);
  v1[30] = v18;
  v19 = MEMORY[0x242615198](&protocol conformance descriptor for DynamicBrickView<A>, v18);
  v1[29] = v19;
  *(_QWORD *)(v6 - 248) = v18;
  *(_QWORD *)(v6 - 240) = v19;
  MEMORY[0x24261512C](255, v6 - 248, v9, 0);
  v1[21] = sub_23BFF8968();
  v21 = type metadata accessor for MonogramVerticalStackView(255, v5, v2, v20);
  v1[27] = v21;
  v22 = MEMORY[0x242615198](&unk_23BFFA1F4, v21);
  v1[26] = v22;
  *(_QWORD *)(v6 - 248) = v21;
  *(_QWORD *)(v6 - 240) = v22;
  MEMORY[0x24261512C](255, v6 - 248, v9, 0);
  v1[24] = sub_23BFF8968();
  v1[25] = sub_23BFF8968();
  v1[1] = sub_23BFF8968();
  v24 = type metadata accessor for StandardCardView(255, v5, v2, v23);
  v1[23] = v24;
  v25 = MEMORY[0x242615198](&unk_23C007BD0, v24);
  v1[22] = v25;
  *(_QWORD *)(v6 - 248) = v24;
  *(_QWORD *)(v6 - 240) = v25;
  MEMORY[0x24261512C](255, v6 - 248, v9, 0);
  *(_QWORD *)(v6 - 248) = v5;
  *(_QWORD *)(v6 - 240) = v10;
  *(_QWORD *)(v6 - 232) = v2;
  *(_QWORD *)(v6 - 224) = v3;
  type metadata accessor for StandardHorizontalStackView();
}

uint64_t sub_23BF1B4F8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t OpaqueTypeConformance2;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t AssociatedConformanceWitness;
  uint64_t v86;
  uint64_t v87;
  _BYTE *v88;
  uint64_t v89;
  __n128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t (*v113)(uint64_t, uint64_t);
  _BYTE v115[80];

  v1[20] = a1;
  v7 = MEMORY[0x242615198](&unk_23C0008E8, a1);
  v1[19] = v7;
  *(_QWORD *)(v5 - 248) = a1;
  *(_QWORD *)(v5 - 240) = v7;
  MEMORY[0x24261512C](255, v5 - 248, v3, 0);
  v1[4] = sub_23BFF8968();
  v9 = type metadata accessor for StandardVerticalStackView(255, v4, v2, v8);
  v1[18] = v9;
  v10 = MEMORY[0x242615198](&unk_23C0073B8, v9);
  v1[17] = v10;
  *(_QWORD *)(v5 - 248) = v9;
  *(_QWORD *)(v5 - 240) = v10;
  MEMORY[0x24261512C](255, v5 - 248, v3, 0);
  v12 = type metadata accessor for TallCardView(255, v4, v2, v11);
  v13 = MEMORY[0x242615198](&unk_23BFFF0E4, v12);
  v1[16] = v13;
  *(_QWORD *)(v5 - 248) = v12;
  *(_QWORD *)(v5 - 240) = v13;
  MEMORY[0x24261512C](255, v5 - 248, v3, 0);
  v1[15] = sub_23BFF8968();
  v1[2] = sub_23BFF8968();
  v1[49] = v4;
  v1[50] = v2;
  v15 = type metadata accessor for VerticalStackCard(255, v4, v2, v14);
  v16 = MEMORY[0x242615198](&unk_23C0000E0, v15);
  v1[12] = v16;
  *(_QWORD *)(v5 - 248) = v15;
  *(_QWORD *)(v5 - 240) = v16;
  MEMORY[0x24261512C](255, v5 - 248, v3, 0);
  v1[3] = sub_23BFF8968();
  v18 = type metadata accessor for WideBrickView(255, v4, v2, v17);
  v19 = MEMORY[0x242615198](&protocol conformance descriptor for WideBrickView<A>, v18);
  v1[7] = v19;
  *(_QWORD *)(v5 - 248) = v18;
  *(_QWORD *)(v5 - 240) = v19;
  MEMORY[0x24261512C](255, v5 - 248, v3, 0);
  v1[5] = sub_23BFF8968();
  v1[6] = sub_23BFF8968();
  v1[8] = sub_23BFF8968();
  v1[9] = sub_23BFF8FD4();
  v1[10] = sub_23BFF862C();
  v1[11] = sub_23BFF8968();
  v1[14] = sub_23BFF862C();
  v20 = sub_23BFF862C();
  v21 = v1[47];
  *(_QWORD *)(v5 - 248) = v1[48];
  *(_QWORD *)(v5 - 240) = v21;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v23 = v1[45];
  *(_QWORD *)(v5 - 248) = v1[46];
  *(_QWORD *)(v5 - 240) = v23;
  v24 = swift_getOpaqueTypeConformance2();
  v25 = v1[38];
  *(_QWORD *)(v5 - 248) = v1[39];
  *(_QWORD *)(v5 - 240) = v25;
  v26 = swift_getOpaqueTypeConformance2();
  v1[133] = v24;
  v1[134] = v26;
  v27 = MEMORY[0x24BDEF3E0];
  v1[132] = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v1[36], v1 + 133);
  v28 = MEMORY[0x242615198](MEMORY[0x24BDF3F50], v1[40], v1 + 132);
  v29 = MEMORY[0x24BDECC60];
  v1[130] = v28;
  v1[131] = v29;
  v30 = MEMORY[0x242615198](MEMORY[0x24BDED308], v1[37], v1 + 130);
  v31 = sub_23BEA1F94(&qword_256AE3920, &qword_256AE3910, MEMORY[0x24BDF43B0]);
  v1[128] = v30;
  v1[129] = v31;
  v32 = MEMORY[0x242615198](v27, v1[43], v1 + 128);
  v33 = sub_23BEA1F94(&qword_256AE3928, &qword_256AE3918, MEMORY[0x24BDF4700]);
  v1[126] = v32;
  v1[127] = v33;
  v34 = MEMORY[0x242615198](v27, v1[44], v1 + 126);
  v1[124] = OpaqueTypeConformance2;
  v1[125] = v34;
  v35 = MEMORY[0x242615198](v27, v1[28], v1 + 124);
  v36 = v1[41];
  *(_QWORD *)(v5 - 248) = v1[42];
  *(_QWORD *)(v5 - 240) = v36;
  v37 = swift_getOpaqueTypeConformance2();
  v38 = v1[34];
  *(_QWORD *)(v5 - 248) = v1[35];
  *(_QWORD *)(v5 - 240) = v38;
  v39 = swift_getOpaqueTypeConformance2();
  v1[122] = v37;
  v1[123] = v39;
  v40 = MEMORY[0x242615198](v27, v1[33], v1 + 122);
  v1[120] = v35;
  v1[121] = v40;
  v41 = MEMORY[0x242615198](v27, v1[13], v1 + 120);
  v42 = v1[31];
  *(_QWORD *)(v5 - 248) = v1[32];
  *(_QWORD *)(v5 - 240) = v42;
  v43 = swift_getOpaqueTypeConformance2();
  v44 = v1[29];
  *(_QWORD *)(v5 - 248) = v1[30];
  *(_QWORD *)(v5 - 240) = v44;
  v45 = swift_getOpaqueTypeConformance2();
  v1[118] = v43;
  v1[119] = v45;
  v46 = MEMORY[0x242615198](v27, v1[21], v1 + 118);
  v47 = v1[26];
  *(_QWORD *)(v5 - 248) = v1[27];
  *(_QWORD *)(v5 - 240) = v47;
  v1[116] = swift_getOpaqueTypeConformance2();
  v1[117] = v45;
  v48 = MEMORY[0x242615198](v27, v1[24], v1 + 116);
  v1[114] = v46;
  v1[115] = v48;
  v49 = MEMORY[0x242615198](v27, v1[25], v1 + 114);
  v1[112] = v41;
  v1[113] = v49;
  v50 = MEMORY[0x242615198](v27, v1[1], v1 + 112);
  v51 = v1[22];
  *(_QWORD *)(v5 - 248) = v1[23];
  *(_QWORD *)(v5 - 240) = v51;
  v52 = swift_getOpaqueTypeConformance2();
  v53 = v1[19];
  *(_QWORD *)(v5 - 248) = v1[20];
  *(_QWORD *)(v5 - 240) = v53;
  v54 = swift_getOpaqueTypeConformance2();
  v1[110] = v52;
  v1[111] = v54;
  v55 = MEMORY[0x242615198](v27, v1[4], v1 + 110);
  v56 = v1[17];
  *(_QWORD *)(v5 - 248) = v1[18];
  *(_QWORD *)(v5 - 240) = v56;
  v57 = swift_getOpaqueTypeConformance2();
  v58 = v1[16];
  *(_QWORD *)(v5 - 248) = v12;
  *(_QWORD *)(v5 - 240) = v58;
  v59 = swift_getOpaqueTypeConformance2();
  v1[108] = v57;
  v1[109] = v59;
  v60 = MEMORY[0x242615198](v27, v1[15], v1 + 108);
  v1[106] = v55;
  v1[107] = v60;
  v61 = MEMORY[0x242615198](v27, v1[2], v1 + 106);
  v62 = v1[12];
  *(_QWORD *)(v5 - 248) = v15;
  *(_QWORD *)(v5 - 240) = v62;
  v1[104] = swift_getOpaqueTypeConformance2();
  v1[105] = v1[79];
  v63 = MEMORY[0x242615198](v27, v1[3], v1 + 104);
  v64 = v1[7];
  *(_QWORD *)(v5 - 248) = v18;
  *(_QWORD *)(v5 - 240) = v64;
  v65 = swift_getOpaqueTypeConformance2();
  v1[102] = v63;
  v1[103] = v65;
  v66 = MEMORY[0x242615198](v27, v1[5], v1 + 102);
  v1[100] = v61;
  v1[101] = v66;
  v67 = MEMORY[0x242615198](v27, v1[6], v1 + 100);
  v1[98] = v50;
  v1[99] = v67;
  v68 = v27;
  v1[97] = MEMORY[0x242615198](v27, v1[8], v1 + 98);
  v1[95] = MEMORY[0x242615198](MEMORY[0x24BDF3F50], v1[9], v1 + 97);
  v69 = v1[53];
  v1[96] = v69;
  v70 = MEMORY[0x24BDED308];
  v71 = MEMORY[0x242615198](MEMORY[0x24BDED308], v1[10], v1 + 95);
  v1[93] = MEMORY[0x24BDF5138];
  v1[94] = v71;
  v72 = MEMORY[0x242615198](v68, v1[11], v1 + 93);
  v73 = MEMORY[0x24BDF0910];
  v1[91] = v72;
  v1[92] = v73;
  v1[89] = MEMORY[0x242615198](v70, v1[14], v1 + 91);
  v1[90] = v73;
  v74 = MEMORY[0x242615198](v70, v20, v1 + 89);
  *(_QWORD *)(v5 - 248) = v20;
  *(_QWORD *)(v5 - 240) = v74;
  MEMORY[0x24261512C](255, v5 - 248, MEMORY[0x24BDF2550], 0);
  v75 = sub_23BFF862C();
  *(_QWORD *)(v5 - 248) = v20;
  *(_QWORD *)(v5 - 240) = v74;
  v1[87] = swift_getOpaqueTypeConformance2();
  v1[88] = v69;
  v76 = MEMORY[0x242615198](v70, v75, v1 + 87);
  *(_QWORD *)(v5 - 248) = v75;
  *(_QWORD *)(v5 - 240) = v76;
  MEMORY[0x24261512C](255, v5 - 248, MEMORY[0x24BEC6710], 0);
  v77 = sub_23BFF8968();
  v78 = sub_23BFF862C();
  *(_QWORD *)(v5 - 248) = v75;
  *(_QWORD *)(v5 - 240) = v76;
  v1[85] = swift_getOpaqueTypeConformance2();
  v1[86] = v76;
  v1[83] = MEMORY[0x242615198](v68, v77, v1 + 85);
  v1[84] = MEMORY[0x24BDEEC40];
  v1[53] = v78;
  v79 = MEMORY[0x242615198](v70, v78, v1 + 83);
  v1[48] = v79;
  *(_QWORD *)(v5 - 248) = v78;
  *(_QWORD *)(v5 - 240) = v79;
  MEMORY[0x24261512C](255, v5 - 248, MEMORY[0x24BDF3100], 0);
  v80 = sub_23BFF8968();
  v1[47] = v80;
  v81 = v1[54];
  v82 = MEMORY[0x242615198](MEMORY[0x24BEE12D8], v81);
  v83 = v1[55];
  v84 = v1[74];
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(_QWORD *)(v5 - 248) = v81;
  *(_QWORD *)(v5 - 240) = v84;
  *(_QWORD *)(v5 - 232) = v80;
  *(_QWORD *)(v5 - 224) = v82;
  *(_QWORD *)(v5 - 216) = AssociatedConformanceWitness;
  v86 = sub_23BFF910C();
  v1[73] = *(_QWORD *)(v86 - 8);
  MEMORY[0x24BDAC7A8](v86);
  v88 = &v115[-((v87 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v90 = MEMORY[0x24BDAC7A8](v89);
  v1[54] = &v115[-v91];
  v1[46] = *(_QWORD *)(v1[61] + 8);
  v92 = v1[56];
  v93 = v1[57];
  v94 = v1[58];
  (*(void (**)(uint64_t, __n128))(v93 + 16))(v92, v90);
  v95 = (*(unsigned __int8 *)(v93 + 80) + 176) & ~(unint64_t)*(unsigned __int8 *)(v93 + 80);
  v96 = (char *)swift_allocObject();
  v97 = v1[51];
  *((_QWORD *)v96 + 2) = v1[66];
  *((_QWORD *)v96 + 3) = v97;
  v98 = v1[49];
  *((_QWORD *)v96 + 4) = v1[67];
  *((_QWORD *)v96 + 5) = v98;
  v99 = v1[78];
  *((_QWORD *)v96 + 6) = v1[68];
  *((_QWORD *)v96 + 7) = v99;
  v100 = v1[62];
  *((_QWORD *)v96 + 8) = v1[71];
  *((_QWORD *)v96 + 9) = v100;
  v101 = v1[64];
  *((_QWORD *)v96 + 10) = v1[63];
  *((_QWORD *)v96 + 11) = v101;
  v102 = v1[65];
  *((_QWORD *)v96 + 12) = v1[75];
  *((_QWORD *)v96 + 13) = v102;
  v103 = v1[52];
  *((_QWORD *)v96 + 14) = v83;
  *((_QWORD *)v96 + 15) = v103;
  v104 = v1[79];
  *((_QWORD *)v96 + 16) = v1[50];
  *((_QWORD *)v96 + 17) = v104;
  v105 = v1[70];
  *((_QWORD *)v96 + 18) = v1[69];
  *((_QWORD *)v96 + 19) = v105;
  v106 = v1[60];
  *((_QWORD *)v96 + 20) = v1[76];
  *((_QWORD *)v96 + 21) = v106;
  (*(void (**)(char *, uint64_t, uint64_t))(v93 + 32))(&v96[v95], v92, v94);
  v107 = v1[46];
  swift_bridgeObjectRetain();
  v108 = v1[48];
  *(_QWORD *)(v5 - 248) = v1[53];
  *(_QWORD *)(v5 - 240) = v108;
  v109 = swift_getOpaqueTypeConformance2();
  v1[81] = MEMORY[0x24BDF5138];
  v1[82] = v109;
  v110 = v1[47];
  v111 = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v110, v1 + 81);
  sub_23BF49C10(v107, (uint64_t)sub_23BF21DB8, (uint64_t)v96, v1[74], v110, v83, v111, *(_QWORD *)(v106 + 24), v1[77]);
  v1[80] = v111;
  MEMORY[0x242615198](MEMORY[0x24BDF4A08], v86, v1 + 80);
  v112 = v1[54];
  sub_23BEA72EC((uint64_t)v88, v86, v112);
  v113 = *(uint64_t (**)(uint64_t, uint64_t))(v1[73] + 8);
  v113((uint64_t)v88, v86);
  sub_23BEA5C0C(v112, v86, v1[72]);
  return v113(v112, v86);
}

void sub_23BF1BF88(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[75];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v45 = a8;
  v40 = a7;
  v44 = a6;
  v47 = a5;
  v39 = a3;
  v34[70] = a2;
  v34[69] = a1;
  v34[65] = a9;
  v48 = a24;
  v49 = a23;
  v42 = a22;
  v35 = a21;
  v50 = a20;
  v43 = a19;
  v51 = a18;
  v46 = a10;
  v25 = sub_23BFF8890();
  v34[9] = *(_QWORD *)(v25 - 8);
  v34[10] = v25;
  MEMORY[0x24BDAC7A8](v25);
  v34[8] = (char *)v34 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = *(_QWORD *)(a15 - 8);
  v41 = a15;
  v34[63] = v27;
  MEMORY[0x24BDAC7A8](v28);
  v34[62] = (char *)v34 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = *(_QWORD *)(a17 - 8);
  v34[74] = a17;
  v34[7] = v30;
  MEMORY[0x24BDAC7A8](v31);
  v34[6] = v32;
  v34[66] = (char *)v34 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = a4;
  v52 = a4;
  v53 = v47;
  v54 = v44;
  v55 = v40;
  v56 = v45;
  v57 = a10;
  v58 = a11;
  v37 = a11;
  v36 = a12;
  v59 = a12;
  v60 = a13;
  v34[71] = a13;
  v34[72] = a14;
  v61 = a14;
  v62 = v33;
  v34[73] = a16;
  v63 = a16;
  v64 = a17;
  v65 = v51;
  v66 = v43;
  v67 = v50;
  v68 = v35;
  v69 = v42;
  v70 = v49;
  v71 = v48;
  type metadata accessor for CarouselView();
}

void sub_23BF1C14C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v9[68] = a1;
  v15 = *(_QWORD *)(a1 - 8);
  v9[5] = v15;
  v9[4] = *(_QWORD *)(v15 + 64);
  MEMORY[0x24BDAC7A8](a1);
  v9[64] = (char *)&a9 - v16;
  *(_QWORD *)(v14 - 256) = v10;
  *(_QWORD *)(v14 - 248) = v11;
  *(_QWORD *)(v14 - 240) = v11;
  *(_QWORD *)(v14 - 232) = v12;
  *(_QWORD *)(v14 - 224) = v13;
  *(_QWORD *)(v14 - 216) = v13;
  type metadata accessor for ActionCardView();
}

void sub_23BF1C1A0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1[58] = a1;
  v7 = MEMORY[0x242615198](&unk_23C005608, a1);
  v1[57] = v7;
  *(_QWORD *)(v5 - 256) = a1;
  *(_QWORD *)(v5 - 248) = v7;
  v1[61] = MEMORY[0x24261512C](255, v5 - 256, MEMORY[0x24BDF3948], 0);
  v1[67] = sub_23BFF8ADC();
  v8 = sub_23BFF862C();
  v9 = sub_23BFF862C();
  v1[56] = v9;
  v10 = sub_23BF1E6D8();
  v1[59] = v10;
  v1[154] = v3;
  v1[155] = v10;
  v11 = MEMORY[0x24BDED308];
  v12 = MEMORY[0x242615198](MEMORY[0x24BDED308], v8, v1 + 154);
  v13 = MEMORY[0x24BDEEC40];
  v1[152] = v12;
  v1[153] = v13;
  v14 = MEMORY[0x242615198](v11, v9, v1 + 152);
  v1[55] = v14;
  *(_QWORD *)(v5 - 256) = v9;
  *(_QWORD *)(v5 - 248) = v14;
  v15 = MEMORY[0x24BDF3100];
  MEMORY[0x24261512C](255, v5 - 256, MEMORY[0x24BDF3100], 0);
  v16 = sub_23BFF862C();
  v1[49] = v16;
  v17 = MEMORY[0x24BDEBEE0];
  v1[150] = v12;
  v1[151] = v17;
  v18 = MEMORY[0x242615198](v11, v16, v1 + 150);
  v1[48] = v18;
  *(_QWORD *)(v5 - 256) = v16;
  *(_QWORD *)(v5 - 248) = v18;
  MEMORY[0x24261512C](255, v5 - 256, v15, 0);
  v1[47] = sub_23BFF8968();
  v1[50] = sub_23BFF8FD4();
  v1[39] = sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3910);
  v1[53] = sub_23BFF8968();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3918);
  v1[54] = sub_23BFF8968();
  v1[38] = sub_23BFF8968();
  v19 = v1[87];
  *(_QWORD *)(v5 - 256) = v4;
  *(_QWORD *)(v5 - 248) = v19;
  v20 = v1[86];
  *(_QWORD *)(v5 - 240) = v19;
  *(_QWORD *)(v5 - 232) = v20;
  *(_QWORD *)(v5 - 224) = v1[81];
  *(_QWORD *)(v5 - 216) = v3;
  v21 = v1[91];
  *(_QWORD *)(v5 - 208) = v21;
  *(_QWORD *)(v5 - 200) = v21;
  v22 = v1[89];
  *(_QWORD *)(v5 - 192) = v2;
  *(_QWORD *)(v5 - 184) = v22;
  type metadata accessor for FullWidthStageView();
}

void sub_23BF1C3B8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1[52] = a1;
  v9 = MEMORY[0x242615198](&unk_23C0077B8, a1);
  v1[51] = v9;
  *(_QWORD *)(v7 - 256) = a1;
  *(_QWORD *)(v7 - 248) = v9;
  MEMORY[0x24261512C](255, v7 - 256, v2, 0);
  v11 = type metadata accessor for InfoActionCardView(255, v6, v4, v10);
  v1[46] = v11;
  v12 = MEMORY[0x242615198](&unk_23C007F20, v11);
  v1[45] = v12;
  *(_QWORD *)(v7 - 256) = v11;
  *(_QWORD *)(v7 - 248) = v12;
  MEMORY[0x24261512C](255, v7 - 256, v2, 0);
  v1[44] = sub_23BFF8968();
  v1[23] = sub_23BFF8968();
  v14 = type metadata accessor for LargeBrickView(255, v5, v3, v13);
  v1[43] = v14;
  v15 = MEMORY[0x242615198](&protocol conformance descriptor for LargeBrickView<A>, v14);
  v1[42] = v15;
  *(_QWORD *)(v7 - 256) = v14;
  *(_QWORD *)(v7 - 248) = v15;
  MEMORY[0x24261512C](255, v7 - 256, v2, 0);
  v17 = type metadata accessor for DynamicBrickView(255, v5, v3, v16);
  v1[41] = v17;
  v18 = MEMORY[0x242615198](&protocol conformance descriptor for DynamicBrickView<A>, v17);
  v1[40] = v18;
  *(_QWORD *)(v7 - 256) = v17;
  *(_QWORD *)(v7 - 248) = v18;
  MEMORY[0x24261512C](255, v7 - 256, v2, 0);
  v1[31] = sub_23BFF8968();
  v20 = type metadata accessor for MonogramVerticalStackView(255, v5, v3, v19);
  v1[37] = v20;
  v21 = MEMORY[0x242615198](&unk_23BFFA1F4, v20);
  v1[36] = v21;
  *(_QWORD *)(v7 - 256) = v20;
  *(_QWORD *)(v7 - 248) = v21;
  MEMORY[0x24261512C](255, v7 - 256, v2, 0);
  v1[34] = sub_23BFF8968();
  v1[35] = sub_23BFF8968();
  v1[11] = sub_23BFF8968();
  v23 = type metadata accessor for StandardCardView(255, v5, v3, v22);
  v1[33] = v23;
  v24 = MEMORY[0x242615198](&unk_23C007BD0, v23);
  v1[32] = v24;
  *(_QWORD *)(v7 - 256) = v23;
  *(_QWORD *)(v7 - 248) = v24;
  MEMORY[0x24261512C](255, v7 - 256, v2, 0);
  *(_QWORD *)(v7 - 256) = v5;
  *(_QWORD *)(v7 - 248) = v6;
  *(_QWORD *)(v7 - 240) = v3;
  *(_QWORD *)(v7 - 232) = v4;
  type metadata accessor for StandardHorizontalStackView();
}

uint64_t sub_23BF1C5E8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t OpaqueTypeConformance2;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __n128 v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(uint64_t, _QWORD, _QWORD);
  uint64_t v108;
  uint64_t v109;
  void (*v110)(_QWORD, uint64_t, uint64_t);
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void (*v130)(char *, uint64_t, _QWORD);
  void (*v131)(char *, _QWORD, uint64_t);
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v136;

  v1[30] = a1;
  v7 = MEMORY[0x242615198](&unk_23C0008E8, a1);
  v1[29] = v7;
  *(_QWORD *)(v5 - 256) = a1;
  *(_QWORD *)(v5 - 248) = v7;
  MEMORY[0x24261512C](255, v5 - 256, v2, 0);
  v1[14] = sub_23BFF8968();
  v9 = type metadata accessor for StandardVerticalStackView(255, v4, v3, v8);
  v1[28] = v9;
  v10 = MEMORY[0x242615198](&unk_23C0073B8, v9);
  v1[27] = v10;
  *(_QWORD *)(v5 - 256) = v9;
  *(_QWORD *)(v5 - 248) = v10;
  MEMORY[0x24261512C](255, v5 - 256, v2, 0);
  v12 = type metadata accessor for TallCardView(255, v4, v3, v11);
  v1[26] = v12;
  v13 = MEMORY[0x242615198](&unk_23BFFF0E4, v12);
  v1[25] = v13;
  *(_QWORD *)(v5 - 256) = v12;
  *(_QWORD *)(v5 - 248) = v13;
  MEMORY[0x24261512C](255, v5 - 256, v2, 0);
  v1[24] = sub_23BFF8968();
  v1[12] = sub_23BFF8968();
  v15 = type metadata accessor for VerticalStackCard(255, v4, v3, v14);
  v1[22] = v15;
  v16 = MEMORY[0x242615198](&unk_23C0000E0, v15);
  v1[21] = v16;
  *(_QWORD *)(v5 - 256) = v15;
  *(_QWORD *)(v5 - 248) = v16;
  MEMORY[0x24261512C](255, v5 - 256, v2, 0);
  v1[13] = sub_23BFF8968();
  v18 = type metadata accessor for WideBrickView(255, v4, v3, v17);
  v19 = MEMORY[0x242615198](&protocol conformance descriptor for WideBrickView<A>, v18);
  v1[17] = v19;
  *(_QWORD *)(v5 - 256) = v18;
  *(_QWORD *)(v5 - 248) = v19;
  MEMORY[0x24261512C](255, v5 - 256, v2, 0);
  v1[15] = sub_23BFF8968();
  v1[16] = sub_23BFF8968();
  v1[18] = sub_23BFF8968();
  v1[19] = sub_23BFF8FD4();
  v1[20] = sub_23BFF862C();
  v20 = sub_23BFF8968();
  *v1 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v1[60] = (char *)&v136 - v21;
  v22 = sub_23BFF862C();
  v1[1] = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v1[61] = (char *)&v136 - v23;
  v24 = sub_23BFF862C();
  v1[3] = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v1[2] = (char *)&v136 - v25;
  v26 = v1[57];
  *(_QWORD *)(v5 - 256) = v1[58];
  *(_QWORD *)(v5 - 248) = v26;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v28 = v1[55];
  *(_QWORD *)(v5 - 256) = v1[56];
  *(_QWORD *)(v5 - 248) = v28;
  v29 = swift_getOpaqueTypeConformance2();
  v30 = v1[48];
  *(_QWORD *)(v5 - 256) = v1[49];
  *(_QWORD *)(v5 - 248) = v30;
  v31 = swift_getOpaqueTypeConformance2();
  v1[148] = v29;
  v1[149] = v31;
  v32 = MEMORY[0x24BDEF3E0];
  v1[147] = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v1[47], v1 + 148);
  v33 = MEMORY[0x242615198](MEMORY[0x24BDF3F50], v1[50], v1 + 147);
  v34 = MEMORY[0x24BDECC60];
  v1[145] = v33;
  v1[146] = v34;
  v35 = MEMORY[0x242615198](MEMORY[0x24BDED308], v1[39], v1 + 145);
  v36 = sub_23BEA1F94(&qword_256AE3920, &qword_256AE3910, MEMORY[0x24BDF43B0]);
  v1[143] = v35;
  v1[144] = v36;
  v37 = MEMORY[0x242615198](v32, v1[53], v1 + 143);
  v38 = sub_23BEA1F94(&qword_256AE3928, &qword_256AE3918, MEMORY[0x24BDF4700]);
  v1[141] = v37;
  v1[142] = v38;
  v39 = MEMORY[0x242615198](v32, v1[54], v1 + 141);
  v1[139] = OpaqueTypeConformance2;
  v1[140] = v39;
  v40 = MEMORY[0x242615198](v32, v1[38], v1 + 139);
  v41 = v1[51];
  *(_QWORD *)(v5 - 256) = v1[52];
  *(_QWORD *)(v5 - 248) = v41;
  v42 = swift_getOpaqueTypeConformance2();
  v43 = v1[45];
  *(_QWORD *)(v5 - 256) = v1[46];
  *(_QWORD *)(v5 - 248) = v43;
  v44 = swift_getOpaqueTypeConformance2();
  v1[137] = v42;
  v1[138] = v44;
  v45 = MEMORY[0x242615198](v32, v1[44], v1 + 137);
  v1[135] = v40;
  v1[136] = v45;
  v46 = MEMORY[0x242615198](v32, v1[23], v1 + 135);
  v47 = v1[42];
  *(_QWORD *)(v5 - 256) = v1[43];
  *(_QWORD *)(v5 - 248) = v47;
  v48 = swift_getOpaqueTypeConformance2();
  v49 = v1[40];
  *(_QWORD *)(v5 - 256) = v1[41];
  *(_QWORD *)(v5 - 248) = v49;
  v50 = swift_getOpaqueTypeConformance2();
  v1[133] = v48;
  v1[134] = v50;
  v51 = MEMORY[0x242615198](v32, v1[31], v1 + 133);
  v52 = v1[36];
  *(_QWORD *)(v5 - 256) = v1[37];
  *(_QWORD *)(v5 - 248) = v52;
  v1[131] = swift_getOpaqueTypeConformance2();
  v1[132] = v50;
  v53 = MEMORY[0x242615198](v32, v1[34], v1 + 131);
  v1[129] = v51;
  v1[130] = v53;
  v54 = MEMORY[0x242615198](v32, v1[35], v1 + 129);
  v1[127] = v46;
  v1[128] = v54;
  v55 = MEMORY[0x242615198](v32, v1[11], v1 + 127);
  v56 = v1[32];
  *(_QWORD *)(v5 - 256) = v1[33];
  *(_QWORD *)(v5 - 248) = v56;
  v57 = swift_getOpaqueTypeConformance2();
  v58 = v1[29];
  *(_QWORD *)(v5 - 256) = v1[30];
  *(_QWORD *)(v5 - 248) = v58;
  v59 = swift_getOpaqueTypeConformance2();
  v1[125] = v57;
  v1[126] = v59;
  v60 = MEMORY[0x242615198](v32, v1[14], v1 + 125);
  v61 = v1[27];
  *(_QWORD *)(v5 - 256) = v1[28];
  *(_QWORD *)(v5 - 248) = v61;
  v62 = swift_getOpaqueTypeConformance2();
  v63 = v1[25];
  *(_QWORD *)(v5 - 256) = v1[26];
  *(_QWORD *)(v5 - 248) = v63;
  v64 = swift_getOpaqueTypeConformance2();
  v1[123] = v62;
  v1[124] = v64;
  v65 = MEMORY[0x242615198](v32, v1[24], v1 + 123);
  v1[121] = v60;
  v1[122] = v65;
  v66 = MEMORY[0x242615198](v32, v1[12], v1 + 121);
  v67 = v1[21];
  *(_QWORD *)(v5 - 256) = v1[22];
  *(_QWORD *)(v5 - 248) = v67;
  v1[119] = swift_getOpaqueTypeConformance2();
  v1[120] = v1[90];
  v68 = MEMORY[0x242615198](v32, v1[13], v1 + 119);
  v69 = v1[17];
  *(_QWORD *)(v5 - 256) = v18;
  *(_QWORD *)(v5 - 248) = v69;
  v70 = swift_getOpaqueTypeConformance2();
  v1[117] = v68;
  v1[118] = v70;
  v71 = MEMORY[0x242615198](v32, v1[15], v1 + 117);
  v1[115] = v66;
  v1[116] = v71;
  v72 = MEMORY[0x242615198](v32, v1[16], v1 + 115);
  v1[113] = v55;
  v1[114] = v72;
  v1[112] = MEMORY[0x242615198](v32, v1[18], v1 + 113);
  v1[110] = MEMORY[0x242615198](MEMORY[0x24BDF3F50], v1[19], v1 + 112);
  v73 = v1[59];
  v1[111] = v73;
  v74 = MEMORY[0x24BDED308];
  v75 = MEMORY[0x242615198](MEMORY[0x24BDED308], v1[20], v1 + 110);
  v1[108] = MEMORY[0x24BDF5138];
  v1[109] = v75;
  v1[54] = v20;
  v76 = MEMORY[0x242615198](v32, v20, v1 + 108);
  v77 = MEMORY[0x24BDF0910];
  v1[35] = v76;
  v1[106] = v76;
  v1[107] = v77;
  v1[55] = v22;
  v78 = MEMORY[0x242615198](v74, v22, v1 + 106);
  v1[36] = v78;
  v1[104] = v78;
  v1[105] = v77;
  v79 = MEMORY[0x242615198](v74, v24, v1 + 104);
  *(_QWORD *)(v5 - 256) = v24;
  *(_QWORD *)(v5 - 248) = v79;
  v80 = MEMORY[0x24261512C](0, v5 - 256, MEMORY[0x24BDF2550], 0);
  v1[49] = *(_QWORD *)(v80 - 8);
  MEMORY[0x24BDAC7A8](v80);
  v1[48] = (char *)&v136 - v81;
  v1[50] = v82;
  v83 = sub_23BFF862C();
  v1[52] = *(_QWORD *)(v83 - 8);
  MEMORY[0x24BDAC7A8](v83);
  v1[51] = (char *)&v136 - v84;
  v1[56] = v24;
  *(_QWORD *)(v5 - 256) = v24;
  *(_QWORD *)(v5 - 248) = v79;
  v1[43] = v79;
  v85 = swift_getOpaqueTypeConformance2();
  v1[38] = v85;
  v1[102] = v85;
  v1[103] = v73;
  v86 = MEMORY[0x242615198](v74, v83, v1 + 102);
  *(_QWORD *)(v5 - 256) = v83;
  *(_QWORD *)(v5 - 248) = v86;
  MEMORY[0x24261512C](255, v5 - 256, MEMORY[0x24BEC6710], 0);
  v87 = sub_23BFF8968();
  v1[45] = *(_QWORD *)(v87 - 8);
  MEMORY[0x24BDAC7A8](v87);
  v1[42] = (char *)&v136 - v88;
  v89 = sub_23BFF862C();
  v1[47] = *(_QWORD *)(v89 - 8);
  MEMORY[0x24BDAC7A8](v89);
  v1[44] = (char *)&v136 - v90;
  v1[53] = v83;
  *(_QWORD *)(v5 - 256) = v83;
  *(_QWORD *)(v5 - 248) = v86;
  v1[100] = swift_getOpaqueTypeConformance2();
  v1[40] = v86;
  v1[101] = v86;
  v1[46] = v87;
  v91 = MEMORY[0x242615198](v32, v87, v1 + 100);
  v1[37] = v91;
  v1[98] = v91;
  v1[99] = MEMORY[0x24BDEEC40];
  v92 = MEMORY[0x242615198](v74, v89, v1 + 98);
  v1[67] = v89;
  *(_QWORD *)(v5 - 256) = v89;
  *(_QWORD *)(v5 - 248) = v92;
  v93 = MEMORY[0x24261512C](0, v5 - 256, MEMORY[0x24BDF3100], 0);
  v1[39] = *(_QWORD *)(v93 - 8);
  MEMORY[0x24BDAC7A8](v93);
  v1[34] = (char *)&v136 - ((v94 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v95);
  v1[41] = (char *)&v136 - v96;
  v1[58] = v97;
  v98 = sub_23BFF8968();
  v1[59] = v98;
  v1[57] = *(_QWORD *)(v98 - 8);
  v99 = MEMORY[0x24BDAC7A8](v98);
  v101 = (char *)&v136 - v100;
  v102 = v1[70];
  v103 = v1[74];
  v104 = (*(uint64_t (**)(__n128))(v1[88] + 184))(v99);
  LOBYTE(v83) = sub_23BF29234(3u, v104);
  swift_bridgeObjectRelease();
  if ((v83 & 1) == 0)
  {
    v106 = v1[5];
    v107 = *(void (**)(uint64_t, _QWORD, _QWORD))(v106 + 16);
    v1[32] = v107;
    v108 = v1[64];
    v107(v108, v1[79], v1[68]);
    v109 = v1[7];
    v110 = *(void (**)(_QWORD, uint64_t, uint64_t))(v109 + 16);
    v1[27] = v110;
    v110(v1[66], v102, v103);
    v111 = *(unsigned __int8 *)(v106 + 80);
    v112 = (v111 + 176) & ~v111;
    v113 = v112 + v1[4];
    v1[22] = v113;
    v1[31] = v112;
    v114 = v111 | 7;
    v1[33] = v111 | 7;
    v115 = *(unsigned __int8 *)(v109 + 80);
    v116 = (v113 + v115) & ~v115;
    v117 = v1[6];
    v1[24] = v116;
    v1[25] = v114 | v115;
    v1[26] = v116 + v117;
    v118 = (char *)swift_allocObject();
    v1[28] = v101;
    v119 = v118;
    v120 = v1[87];
    *((_QWORD *)v118 + 2) = v1[78];
    *((_QWORD *)v118 + 3) = v120;
    v121 = v1[80];
    *((_QWORD *)v118 + 4) = v1[84];
    *((_QWORD *)v118 + 5) = v121;
    v122 = v1[86];
    *((_QWORD *)v118 + 6) = v1[85];
    *((_QWORD *)v118 + 7) = v122;
    v123 = v1[76];
    *((_QWORD *)v118 + 8) = v1[77];
    *((_QWORD *)v118 + 9) = v123;
    v124 = v1[72];
    *((_QWORD *)v118 + 10) = v1[71];
    *((_QWORD *)v118 + 11) = v124;
    v1[29] = v92;
    v125 = v1[81];
    *((_QWORD *)v118 + 12) = v125;
    v126 = v125;
    *((_QWORD *)v118 + 13) = v1[73];
    *((_QWORD *)v118 + 14) = v103;
    v127 = v1[83];
    *((_QWORD *)v118 + 15) = v1[91];
    *((_QWORD *)v118 + 16) = v127;
    v128 = v1[75];
    *((_QWORD *)v118 + 17) = v1[90];
    *((_QWORD *)v118 + 18) = v128;
    v129 = v1[89];
    *((_QWORD *)v118 + 19) = v1[82];
    *((_QWORD *)v118 + 20) = v129;
    *((_QWORD *)v118 + 21) = v1[88];
    v130 = *(void (**)(char *, uint64_t, _QWORD))(v106 + 32);
    v1[30] = v130;
    v130(&v118[v112], v108, v1[68]);
    v131 = *(void (**)(char *, _QWORD, uint64_t))(v109 + 32);
    v1[23] = v131;
    v131(&v119[v116], v1[66], v103);
    *(_QWORD *)(v5 - 256) = v1[71];
    *(_QWORD *)(v5 - 248) = v126;
    v132 = v1[89];
    *(_QWORD *)(v5 - 240) = v128;
    *(_QWORD *)(v5 - 232) = v132;
    type metadata accessor for CanvasLayout();
  }
  *(_QWORD *)(v5 - 256) = v1[67];
  *(_QWORD *)(v5 - 248) = v92;
  v105 = swift_getOpaqueTypeConformance2();
  sub_23BEA5C24(v105, MEMORY[0x24BDF5158]);
  *(_QWORD *)(v5 - 256) = v1[67];
  *(_QWORD *)(v5 - 248) = v92;
  v133 = swift_getOpaqueTypeConformance2();
  v1[92] = MEMORY[0x24BDF5138];
  v1[93] = v133;
  v134 = v1[59];
  MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v134, v1 + 92);
  sub_23BEA5C0C((uint64_t)v101, v134, v1[65]);
  return (*(uint64_t (**)(char *, uint64_t))(v1[57] + 8))(v101, v134);
}

void sub_23BF1D9F0(uint64_t a1)
{
  uint64_t v1;

  MEMORY[0x24BDAC7A8](a1);
  MEMORY[0x24BDAC7A8](v1);
  type metadata accessor for CarouselView();
}

uint64_t sub_23BF1DAB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);

  (*(void (**)(uint64_t))(v2 + *(int *)(a1 + 200)))(v4);
  sub_23BEA72EC(v5, v1, v6);
  v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v1);
  sub_23BEA5C0C(v6, v1, v3);
  return ((uint64_t (*)(uint64_t, uint64_t))v8)(v6, v1);
}

void sub_23BF1DB34(uint64_t a1)
{
  uint64_t v1;

  MEMORY[0x24BDAC7A8](a1);
  MEMORY[0x24BDAC7A8](v1);
  type metadata accessor for CarouselView();
}

uint64_t sub_23BF1DC00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + *(int *)(a1 + 208)))(v3, v7, 0);
  sub_23BEA72EC(v6, v2, v4);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v2);
  sub_23BEA5C0C(v4, v2, v1);
  return ((uint64_t (*)(uint64_t, uint64_t))v9)(v4, v2);
}

void sub_23BF1DC84(uint64_t a1)
{
  uint64_t v1;

  MEMORY[0x24BDAC7A8](a1);
  MEMORY[0x24BDAC7A8]((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CarouselView();
}

uint64_t sub_23BF1DD50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + *(int *)(a1 + 204)))(v3, v7, 0);
  sub_23BEA72EC(v6, v1, v4);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v1);
  sub_23BEA5C0C(v4, v1, v2);
  return ((uint64_t (*)(uint64_t, uint64_t))v9)(v4, v1);
}

void sub_23BF1DDD4(uint64_t a1)
{
  MEMORY[0x24BDAC7A8](a1);
  type metadata accessor for CarouselView();
}

uint64_t sub_23BF1DE80(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t);

  v7 = *(void (**)(uint64_t))(v5 + *(int *)(result + 212));
  if (v7)
  {
    (*(void (**)(uint64_t, uint64_t))(v2 + 152))(v3, v2);
    v7(v4);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v4, v1);
  }
  return result;
}

void sub_23BF1DEE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, __int128 a11, uint64_t a12, uint64_t a13, uint64_t a14, __int128 a15, __int128 a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[6];
  uint64_t AssociatedTypeWitness;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v28 = a4;
  v34 = a3;
  v33 = a16;
  v32 = a15;
  v31 = a11;
  v30 = a10;
  v29 = a9;
  v26[3] = *(_QWORD *)(a19 + 32);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v26[5] = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v26[4] = (char *)v26 - v23;
  v26[2] = *(_QWORD *)(a14 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v26[1] = (char *)v26 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = a5;
  v36 = a6;
  v37 = a7;
  v38 = a8;
  v39 = v29;
  v40 = v30;
  v41 = v31;
  v42 = a12;
  v43 = a13;
  v45 = v32;
  v46 = v33;
  v44 = a14;
  v47 = a17;
  v48 = a18;
  v49 = a19;
  type metadata accessor for CarouselView();
}

uint64_t sub_23BF1E07C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_23BF16D30();
  if ((result & 1) == 0)
  {
    *(_QWORD *)(v2 - 272) = *(_QWORD *)(v1 + 8);
    v4 = sub_23BFF94C0();
    MEMORY[0x242615198](MEMORY[0x24BEE12D8], v4);
    sub_23BFF95F8();
    *(_OWORD *)(v2 - 272) = *(_OWORD *)(v2 - 256);
    *(_QWORD *)(v2 - 280) = sub_23BF16C50();
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AE53A0);
    result = sub_23BFF9664();
    if ((result & 1) != 0)
    {
      sub_23BF16C50();
      v5 = *(_QWORD *)(v2 - 424);
      sub_23BFF94F0();
      v6 = *(_QWORD *)(v2 - 400);
      sub_23BFF9460();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 416) + 8))(v5, v0);
      v7 = *(_QWORD *)(v2 - 384);
      swift_getAssociatedConformanceWitness();
      sub_23BFF865C();
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 392) + 8))(v6, v7);
    }
  }
  return result;
}

double sub_23BF1E1F4@<D0>(double *a1@<X8>)
{
  double v2;
  double v3;
  double v4;
  double result;

  sub_23BFF85D8();
  v3 = v2;
  sub_23BFF85CC();
  result = v3 / v4;
  *a1 = result;
  return result;
}

void sub_23BF1E230()
{
  type metadata accessor for CarouselView();
}

uint64_t sub_23BF1E29C()
{
  double v0;
  uint64_t result;
  double v2;

  result = sub_23BF16D30();
  if ((result & 1) != 0)
  {
    v2 = round(v0);
    if ((~*(_QWORD *)&v2 & 0x7FF0000000000000) != 0)
    {
      if (v2 > -9.22337204e18)
      {
        if (v2 < 9.22337204e18)
          return sub_23BF16C98();
LABEL_9:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_9;
  }
  return result;
}

void sub_23BF1E310()
{
  type metadata accessor for CarouselView();
}

uint64_t sub_23BF1E388()
{
  return sub_23BF16D84();
}

void sub_23BF1E3B0()
{
  type metadata accessor for CarouselView();
}

void sub_23BF1E420()
{
  sub_23BF16DDC();
  sub_23BF16CE4();
  sub_23BFF8B78();
  sub_23BF16E9C();
}

uint64_t sub_23BF1E450()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = sub_23BFF83F8();
  *(_QWORD *)v0 = v1;
  *(_QWORD *)(v0 + 8) = v2;
  *(_QWORD *)(v0 + 16) = v3;
  *(_QWORD *)(v0 + 24) = v4;
  *(_BYTE *)(v0 + 32) = v5;
  *(_QWORD *)(v0 + 40) = v7;
  *(_QWORD *)(v0 + 48) = v8;
  *(_QWORD *)(v0 + 56) = v9;
  *(_QWORD *)(v0 + 64) = v10;
  *(_BYTE *)(v0 + 72) = 0;
  return result;
}

double sub_23BF1E490@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;

  sub_23BEFF81C();
  sub_23BFF8800();
  result = *(double *)&v3;
  *a1 = v3;
  return result;
}

double sub_23BF1E4DC@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;

  sub_23BEFF81C();
  sub_23BFF8800();
  result = *(double *)&v3;
  *a1 = v3;
  return result;
}

uint64_t sub_23BF1E528()
{
  sub_23BEFF81C();
  return sub_23BFF880C();
}

uint64_t sub_23BF1E570()
{
  sub_23BEFF81C();
  return sub_23BFF880C();
}

uint64_t sub_23BF1E5BC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) == 0)
    return swift_release();
  return result;
}

void sub_23BF1E5C8()
{
  type metadata accessor for CarouselView();
}

void sub_23BF1E660()
{
  sub_23BF183F8();
}

unint64_t sub_23BF1E6D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256AE3908;
  if (!qword_256AE3908)
  {
    v1 = sub_23BFF8ADC();
    result = MEMORY[0x242615198](MEMORY[0x24BDF1078], v1);
    atomic_store(result, (unint64_t *)&qword_256AE3908);
  }
  return result;
}

uint64_t sub_23BF1E720()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23BF1E774()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_23BF1E77C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23BFF96A0();
  if (v1 <= 0x3F)
    type metadata accessor for CanvasLayout();
  return result;
}

uint64_t *sub_23BF1E87C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  const void *v16;
  unsigned int (*v17)(const void *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t);
  _OWORD *v32;
  _OWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  _QWORD *v60;
  _QWORD *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v3 = *(_QWORD *)(a3 + 88);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (*(_DWORD *)(v4 + 84))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v4 + 64) + 1;
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 96) - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = (v8 | v5) <= 7 && ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v4 + 80)) & 0x100000) == 0;
  if (v9
    && (v10 = v8 | 7,
        ((((((((((((((((((((((((v8 + 64) & ~v8)
                            + *(_QWORD *)(v7 + 64)
                            + 7
                            + (((v8 | 7) + v6 + ((v5 + 16) & ~v5)) & ~(v8 | 7))) & 0xFFFFFFFFFFFFFFF8)
                          + 23) & 0xFFFFFFFFFFFFFFF8)
                        + 15) & 0xFFFFFFFFFFFFFFF8)
                      + 23) & 0xFFFFFFFFFFFFFFF8)
                    + 23) & 0xFFFFFFFFFFFFFFF8)
                  + 23) & 0xFFFFFFFFFFFFFFF8)
                + 23) & 0xFFFFFFFFFFFFFFF8)
              + 23) & 0xFFFFFFFFFFFFFFF8)
            + 47) & 0xFFFFFFFFFFFFFFF8)
          + 23) & 0xFFFFFFFFFFFFFFF8)
        + 23) & 0xFFFFFFFFFFFFFFF8)
      + 16 <= 0x18))
  {
    v68 = ((v8 + 64) & ~v8) + *(_QWORD *)(v7 + 64) + 7;
    v69 = *(_QWORD *)(a3 + 96);
    v11 = ~v10;
    v13 = *a2;
    v12 = (unint64_t)a2 + 15;
    *a1 = v13;
    v67 = ~v8;
    v14 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v14 = *(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF8);
    v15 = (void *)(((unint64_t)v14 + v5 + 8) & ~v5);
    v16 = (const void *)(((v12 & 0xFFFFFFFFFFFFFFF8) + v5 + 8) & ~v5);
    v17 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v4 + 48);
    swift_bridgeObjectRetain();
    if (v17(v16, 1, v3))
    {
      memcpy(v15, v16, v6);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v4 + 16))(v15, v16, v3);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v15, 0, 1, v3);
    }
    v20 = (_QWORD *)(((unint64_t)v16 + v6 + v10) & v11);
    v21 = (_QWORD *)(((unint64_t)v15 + v6 + v10) & v11);
    *v21 = *v20;
    v22 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
    v23 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
    v24 = *(_OWORD *)(v23 + 16);
    *(_OWORD *)v22 = *(_OWORD *)v23;
    *(_OWORD *)(v22 + 16) = v24;
    *(_BYTE *)(v22 + 32) = *(_BYTE *)(v23 + 32);
    v25 = (_QWORD *)(((unint64_t)v21 + 55) & 0xFFFFFFFFFFFFF8);
    v26 = (_QWORD *)(((unint64_t)v20 + 55) & 0xFFFFFFFFFFFFF8);
    *v25 = *v26;
    v27 = (_QWORD *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8);
    v28 = (_QWORD *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v27 = *v28;
    v29 = ((unint64_t)v27 + v8 + 8) & v67;
    v30 = ((unint64_t)v28 + v8 + 8) & v67;
    v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
    swift_bridgeObjectRetain();
    v31(v29, v30, v69);
    v32 = (_OWORD *)(((unint64_t)v21 + v68) & 0xFFFFFFFFFFFFFFF8);
    v33 = (_OWORD *)(((unint64_t)v20 + v68) & 0xFFFFFFFFFFFFFFF8);
    *v32 = *v33;
    v34 = (_QWORD *)(((unint64_t)v33 + 23) & 0xFFFFFFFFFFFFF8);
    v35 = (_QWORD *)(((unint64_t)v32 + 23) & 0xFFFFFFFFFFFFF8);
    *v35 = *v34;
    v36 = (_QWORD *)(((unint64_t)v35 + 15) & 0xFFFFFFFFFFFFFFF8);
    v37 = (_QWORD *)(((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFFFF8);
    v38 = v37[1];
    *v36 = *v37;
    v36[1] = v38;
    v39 = (_QWORD *)(((unint64_t)v36 + 23) & 0xFFFFFFFFFFFFFFF8);
    v40 = (_QWORD *)(((unint64_t)v37 + 23) & 0xFFFFFFFFFFFFFFF8);
    v41 = v40[1];
    *v39 = *v40;
    v39[1] = v41;
    v42 = (_QWORD *)(((unint64_t)v39 + 23) & 0xFFFFFFFFFFFFFFF8);
    v43 = (_QWORD *)(((unint64_t)v40 + 23) & 0xFFFFFFFFFFFFFFF8);
    v44 = v43[1];
    *v42 = *v43;
    v42[1] = v44;
    v45 = ((unint64_t)v42 + 23) & 0xFFFFFFFFFFFFFFF8;
    v46 = (unint64_t *)(((unint64_t)v43 + 23) & 0xFFFFFFFFFFFFFFF8);
    v47 = *v46;
    swift_retain();
    swift_retain();
    swift_retain();
    if (v47 < 0xFFFFFFFF)
    {
      *(_OWORD *)v45 = *(_OWORD *)v46;
    }
    else
    {
      v48 = v46[1];
      *(_QWORD *)v45 = v47;
      *(_QWORD *)(v45 + 8) = v48;
      swift_retain();
    }
    v49 = (v45 + 23) & 0xFFFFFFFFFFFFFFF8;
    v50 = ((unint64_t)v46 + 23) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)v50 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)v49 = *(_OWORD *)v50;
    }
    else
    {
      v51 = *(_QWORD *)(v50 + 8);
      *(_QWORD *)v49 = *(_QWORD *)v50;
      *(_QWORD *)(v49 + 8) = v51;
      swift_retain();
    }
    v52 = (v49 + 23) & 0xFFFFFFFFFFFFFFF8;
    v53 = (v50 + 23) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)v53 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)v52 = *(_OWORD *)v53;
    }
    else
    {
      v54 = *(_QWORD *)(v53 + 8);
      *(_QWORD *)v52 = *(_QWORD *)v53;
      *(_QWORD *)(v52 + 8) = v54;
      swift_retain();
    }
    v55 = (v52 + 23) & 0xFFFFFFFFFFFFFFF8;
    v56 = (v53 + 23) & 0xFFFFFFFFFFFFFFF8;
    v57 = *(_QWORD *)v56;
    v58 = *(_QWORD *)(v56 + 8);
    v59 = *(_BYTE *)(v56 + 16);
    sub_23BF1ECC0(*(_QWORD *)v56, v58, v59);
    *(_QWORD *)v55 = v57;
    *(_QWORD *)(v55 + 8) = v58;
    *(_BYTE *)(v55 + 16) = v59;
    v60 = (_QWORD *)((v52 + 47) & 0xFFFFFFFFFFFFFFF8);
    v61 = (_QWORD *)((v53 + 47) & 0xFFFFFFFFFFFFFFF8);
    *v60 = *v61;
    v60[1] = v61[1];
    v62 = ((unint64_t)v60 + 23) & 0xFFFFFFFFFFFFFFF8;
    v63 = ((unint64_t)v61 + 23) & 0xFFFFFFFFFFFFFFF8;
    *(_BYTE *)v62 = *(_BYTE *)v63;
    *(_QWORD *)(v62 + 8) = *(_QWORD *)(v63 + 8);
    v64 = (v62 + 23) & 0xFFFFFFFFFFFFFFF8;
    v65 = (v63 + 23) & 0xFFFFFFFFFFFFFFF8;
    *(_BYTE *)v64 = *(_BYTE *)v65;
    *(_QWORD *)(v64 + 8) = *(_QWORD *)(v65 + 8);
    swift_retain();
    swift_retain();
    v19 = a1;
  }
  else
  {
    v18 = *a2;
    *a1 = *a2;
    v19 = (uint64_t *)(v18 + (((v8 | v5) & 0xF8 ^ 0x1F8) & ((v8 | v5) + 16)));
  }
  swift_retain();
  return v19;
}

uint64_t sub_23BF1ECC0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) == 0)
    return swift_retain();
  return result;
}

uint64_t sub_23BF1ECCC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;

  v3 = (a1 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 88);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = (v3 + *(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4))
    (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v6, v4);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(_DWORD *)(v5 + 84) == 0;
  v9 = *(_QWORD *)(a2 + 96);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = v7 + v6;
  if (v8)
    ++v12;
  v13 = (v12 + (v11 | 7)) & ~(v11 | 7);
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v10 + 8))((v11 + ((((v13 + 55) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v11, v9);
  v14 = (((((((v11 + 64) & ~v11) + *(_QWORD *)(v10 + 64) + v13 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  swift_release();
  v15 = (_QWORD *)((((((v14 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8);
  if (*v15 >= 0xFFFFFFFFuLL)
    swift_release();
  v16 = (_QWORD *)(((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8);
  if (*v16 >= 0xFFFFFFFFuLL)
    swift_release();
  v17 = (_QWORD *)(((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFFFF8);
  if (*v17 >= 0xFFFFFFFFuLL)
    swift_release();
  sub_23BF1E5BC(*(_QWORD *)(((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)((((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFFFF8) + 8), *(_BYTE *)((((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFFFF8) + 16));
  swift_release();
  swift_release();
  return swift_release();
}

_QWORD *sub_23BF1EE98(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  unsigned int (*v13)(const void *, uint64_t, uint64_t);
  int v14;
  size_t v15;
  size_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  _OWORD *v35;
  _OWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  _QWORD *v63;
  _QWORD *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;

  v6 = *a2;
  v5 = (unint64_t)a2 + 15;
  *a1 = v6;
  v7 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF8);
  v8 = *(_QWORD *)(a3 + 88);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (void *)(((unint64_t)v7 + v10 + 8) & ~v10);
  v12 = (const void *)((v10 + 8 + (v5 & 0xFFFFFFFFFFFFFFF8)) & ~v10);
  v13 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48);
  swift_bridgeObjectRetain();
  if (v13(v12, 1, v8))
  {
    v14 = *(_DWORD *)(v9 + 84);
    v15 = *(_QWORD *)(v9 + 64);
    if (v14)
      v16 = v15;
    else
      v16 = v15 + 1;
    memcpy(v11, v12, v16);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v11, v12, v8);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v11, 0, 1, v8);
    v14 = *(_DWORD *)(v9 + 84);
    v15 = *(_QWORD *)(v9 + 64);
  }
  if (v14)
    v17 = v15;
  else
    v17 = v15 + 1;
  v18 = *(_QWORD *)(a3 + 96);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  v21 = (v20 | 7) + v17;
  v22 = (_QWORD *)(((unint64_t)v12 + v21) & ~(v20 | 7));
  v23 = (_QWORD *)(((unint64_t)v11 + v21) & ~(v20 | 7));
  *v23 = *v22;
  v24 = ((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8;
  v25 = ((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8;
  v26 = *(_OWORD *)(v25 + 16);
  *(_OWORD *)v24 = *(_OWORD *)v25;
  *(_OWORD *)(v24 + 16) = v26;
  *(_BYTE *)(v24 + 32) = *(_BYTE *)(v25 + 32);
  v27 = (_QWORD *)(((unint64_t)v23 + 55) & 0xFFFFFFFFFFFFF8);
  v28 = (_QWORD *)(((unint64_t)v22 + 55) & 0xFFFFFFFFFFFFF8);
  *v27 = *v28;
  v29 = (_QWORD *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8);
  v30 = (_QWORD *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v29 = *v30;
  v31 = ((unint64_t)v29 + v20 + 8) & ~v20;
  v32 = ((unint64_t)v30 + v20 + 8) & ~v20;
  v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16);
  swift_bridgeObjectRetain();
  v33(v31, v32, v18);
  v34 = *(_QWORD *)(v19 + 64) + ((v20 + 64) & ~v20) + 7;
  v35 = (_OWORD *)(((unint64_t)v23 + v34) & 0xFFFFFFFFFFFFFFF8);
  v36 = (_OWORD *)(((unint64_t)v22 + v34) & 0xFFFFFFFFFFFFFFF8);
  *v35 = *v36;
  v37 = (_QWORD *)(((unint64_t)v36 + 23) & 0xFFFFFFFFFFFFFFF8);
  v38 = (_QWORD *)(((unint64_t)v35 + 23) & 0xFFFFFFFFFFFFF8);
  *v38 = *v37;
  v39 = (_QWORD *)(((unint64_t)v38 + 15) & 0xFFFFFFFFFFFFFFF8);
  v40 = (_QWORD *)(((unint64_t)v37 + 15) & 0xFFFFFFFFFFFFFFF8);
  v41 = v40[1];
  *v39 = *v40;
  v39[1] = v41;
  v42 = (_QWORD *)(((unint64_t)v39 + 23) & 0xFFFFFFFFFFFFFFF8);
  v43 = (_QWORD *)(((unint64_t)v40 + 23) & 0xFFFFFFFFFFFFFFF8);
  v44 = v43[1];
  *v42 = *v43;
  v42[1] = v44;
  v45 = (_QWORD *)(((unint64_t)v42 + 23) & 0xFFFFFFFFFFFFFFF8);
  v46 = (_QWORD *)(((unint64_t)v43 + 23) & 0xFFFFFFFFFFFFFFF8);
  v47 = v46[1];
  *v45 = *v46;
  v45[1] = v47;
  v48 = ((unint64_t)v45 + 23) & 0xFFFFFFFFFFFFFFF8;
  v49 = (unint64_t *)(((unint64_t)v46 + 23) & 0xFFFFFFFFFFFFFFF8);
  v50 = *v49;
  swift_retain();
  swift_retain();
  swift_retain();
  if (v50 < 0xFFFFFFFF)
  {
    *(_OWORD *)v48 = *(_OWORD *)v49;
  }
  else
  {
    v51 = v49[1];
    *(_QWORD *)v48 = v50;
    *(_QWORD *)(v48 + 8) = v51;
    swift_retain();
  }
  v52 = (v48 + 23) & 0xFFFFFFFFFFFFFFF8;
  v53 = ((unint64_t)v49 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v53 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v52 = *(_OWORD *)v53;
  }
  else
  {
    v54 = *(_QWORD *)(v53 + 8);
    *(_QWORD *)v52 = *(_QWORD *)v53;
    *(_QWORD *)(v52 + 8) = v54;
    swift_retain();
  }
  v55 = (v52 + 23) & 0xFFFFFFFFFFFFFFF8;
  v56 = (v53 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v56 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v55 = *(_OWORD *)v56;
  }
  else
  {
    v57 = *(_QWORD *)(v56 + 8);
    *(_QWORD *)v55 = *(_QWORD *)v56;
    *(_QWORD *)(v55 + 8) = v57;
    swift_retain();
  }
  v58 = (v55 + 23) & 0xFFFFFFFFFFFFFFF8;
  v59 = (v56 + 23) & 0xFFFFFFFFFFFFFFF8;
  v60 = *(_QWORD *)v59;
  v61 = *(_QWORD *)(v59 + 8);
  v62 = *(_BYTE *)(v59 + 16);
  sub_23BF1ECC0(*(_QWORD *)v59, v61, v62);
  *(_QWORD *)v58 = v60;
  *(_QWORD *)(v58 + 8) = v61;
  *(_BYTE *)(v58 + 16) = v62;
  v63 = (_QWORD *)((v55 + 47) & 0xFFFFFFFFFFFFFFF8);
  v64 = (_QWORD *)((v56 + 47) & 0xFFFFFFFFFFFFFFF8);
  *v63 = *v64;
  v63[1] = v64[1];
  v65 = ((unint64_t)v63 + 23) & 0xFFFFFFFFFFFFFFF8;
  v66 = ((unint64_t)v64 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v65 = *(_BYTE *)v66;
  *(_QWORD *)(v65 + 8) = *(_QWORD *)(v66 + 8);
  v67 = (v65 + 23) & 0xFFFFFFFFFFFFFFF8;
  v68 = (v66 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v67 = *(_BYTE *)v68;
  *(_QWORD *)(v67 + 8) = *(_QWORD *)(v68 + 8);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *sub_23BF1F20C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t (*v12)(void *, uint64_t, uint64_t);
  int v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  _QWORD *v65;
  _QWORD *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;

  *a1 = *a2;
  v5 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a3 + 88);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (void *)(((unint64_t)v5 + v9 + 8) & ~v9);
  v11 = (void *)(((unint64_t)v6 + v9 + 8) & ~v9);
  v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  LODWORD(v6) = v12(v10, 1, v7);
  v13 = v12(v11, 1, v7);
  if ((_DWORD)v6)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 16))(v10, v11, v7);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v10, 0, 1, v7);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 24))(v10, v11, v7);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v10, v7);
  }
  if (*(_DWORD *)(v8 + 84))
    v14 = *(_QWORD *)(v8 + 64);
  else
    v14 = *(_QWORD *)(v8 + 64) + 1;
  memcpy(v10, v11, v14);
LABEL_10:
  if (*(_DWORD *)(v8 + 84))
    v15 = *(_QWORD *)(v8 + 64);
  else
    v15 = *(_QWORD *)(v8 + 64) + 1;
  v16 = *(_QWORD *)(a3 + 96);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  v19 = (v18 | 7) + v15;
  v20 = (_QWORD *)(((unint64_t)v11 + v19) & ~(v18 | 7));
  v21 = (_QWORD *)(((unint64_t)v10 + v19) & ~(v18 | 7));
  *v21 = *v20;
  v22 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
  v23 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *(_QWORD *)(v22 + 8) = *(_QWORD *)(v23 + 8);
  *(_QWORD *)(v22 + 16) = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(v22 + 24) = *(_QWORD *)(v23 + 24);
  *(_BYTE *)(v22 + 32) = *(_BYTE *)(v23 + 32);
  v24 = (_QWORD *)(((unint64_t)v21 + 55) & 0xFFFFFFFFFFFFF8);
  v25 = (_QWORD *)(((unint64_t)v20 + 55) & 0xFFFFFFFFFFFFF8);
  *v24 = *v25;
  v26 = (_QWORD *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
  v27 = (_QWORD *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v26 = *v27;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v17 + 24))(((unint64_t)v26 + v18 + 8) & ~v18, ((unint64_t)v27 + v18 + 8) & ~v18, v16);
  v28 = *(_QWORD *)(v17 + 64) + ((v18 + 64) & ~v18) + 7;
  v29 = (_QWORD *)(((unint64_t)v21 + v28) & 0xFFFFFFFFFFFFFFF8);
  v30 = (_QWORD *)(((unint64_t)v20 + v28) & 0xFFFFFFFFFFFFFFF8);
  *v29 = *v30;
  v29[1] = v30[1];
  v31 = (_QWORD *)(((unint64_t)v29 + 23) & 0xFFFFFFFFFFFFF8);
  v32 = (_QWORD *)(((unint64_t)v30 + 23) & 0xFFFFFFFFFFFFF8);
  *v31 = *v32;
  v33 = (_QWORD *)(((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8);
  v34 = (_QWORD *)(((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8);
  v35 = v34[1];
  *v33 = *v34;
  v33[1] = v35;
  swift_retain();
  swift_release();
  v36 = (_QWORD *)(((unint64_t)v33 + 23) & 0xFFFFFFFFFFFFFFF8);
  v37 = (_QWORD *)(((unint64_t)v34 + 23) & 0xFFFFFFFFFFFFFFF8);
  v38 = v37[1];
  *v36 = *v37;
  v36[1] = v38;
  swift_retain();
  swift_release();
  v39 = (_QWORD *)(((unint64_t)v36 + 23) & 0xFFFFFFFFFFFFFFF8);
  v40 = (_QWORD *)(((unint64_t)v37 + 23) & 0xFFFFFFFFFFFFFFF8);
  v41 = v40[1];
  *v39 = *v40;
  v39[1] = v41;
  swift_retain();
  swift_release();
  v42 = (_QWORD *)(((unint64_t)v39 + 23) & 0xFFFFFFFFFFFFFFF8);
  v43 = (unint64_t *)(((unint64_t)v40 + 23) & 0xFFFFFFFFFFFFFFF8);
  v44 = *v43;
  if (*v42 < 0xFFFFFFFFuLL)
  {
    if (v44 >= 0xFFFFFFFF)
    {
      v46 = v43[1];
      *v42 = v44;
      v42[1] = v46;
      swift_retain();
      goto LABEL_20;
    }
  }
  else
  {
    if (v44 >= 0xFFFFFFFF)
    {
      v45 = v43[1];
      *v42 = v44;
      v42[1] = v45;
      swift_retain();
      swift_release();
      goto LABEL_20;
    }
    swift_release();
  }
  *(_OWORD *)v42 = *(_OWORD *)v43;
LABEL_20:
  v47 = (_QWORD *)(((unint64_t)v42 + 23) & 0xFFFFFFFFFFFFFFF8);
  v48 = (unint64_t *)(((unint64_t)v43 + 23) & 0xFFFFFFFFFFFFFFF8);
  v49 = *v48;
  if (*v47 < 0xFFFFFFFFuLL)
  {
    if (v49 >= 0xFFFFFFFF)
    {
      v51 = v48[1];
      *v47 = v49;
      v47[1] = v51;
      swift_retain();
      goto LABEL_27;
    }
  }
  else
  {
    if (v49 >= 0xFFFFFFFF)
    {
      v50 = v48[1];
      *v47 = v49;
      v47[1] = v50;
      swift_retain();
      swift_release();
      goto LABEL_27;
    }
    swift_release();
  }
  *(_OWORD *)v47 = *(_OWORD *)v48;
LABEL_27:
  v52 = (_QWORD *)(((unint64_t)v47 + 23) & 0xFFFFFFFFFFFFFFF8);
  v53 = (unint64_t *)(((unint64_t)v48 + 23) & 0xFFFFFFFFFFFFFFF8);
  v54 = *v53;
  if (*v52 < 0xFFFFFFFFuLL)
  {
    if (v54 >= 0xFFFFFFFF)
    {
      v56 = v53[1];
      *v52 = v54;
      v52[1] = v56;
      swift_retain();
      goto LABEL_34;
    }
LABEL_33:
    *(_OWORD *)v52 = *(_OWORD *)v53;
    goto LABEL_34;
  }
  if (v54 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_33;
  }
  v55 = v53[1];
  *v52 = v54;
  v52[1] = v55;
  swift_retain();
  swift_release();
LABEL_34:
  v57 = ((unint64_t)v52 + 23) & 0xFFFFFFFFFFFFFFF8;
  v58 = ((unint64_t)v53 + 23) & 0xFFFFFFFFFFFFFFF8;
  v59 = *(_QWORD *)v58;
  v60 = *(_QWORD *)(v58 + 8);
  v61 = *(_BYTE *)(v58 + 16);
  sub_23BF1ECC0(*(_QWORD *)v58, v60, v61);
  v62 = *(_QWORD *)v57;
  v63 = *(_QWORD *)(v57 + 8);
  v64 = *(_BYTE *)(v57 + 16);
  *(_QWORD *)v57 = v59;
  *(_QWORD *)(v57 + 8) = v60;
  *(_BYTE *)(v57 + 16) = v61;
  sub_23BF1E5BC(v62, v63, v64);
  v65 = (_QWORD *)(((unint64_t)v52 + 47) & 0xFFFFFFFFFFFFFFF8);
  v66 = (_QWORD *)(((unint64_t)v53 + 47) & 0xFFFFFFFFFFFFFFF8);
  *v65 = *v66;
  v65[1] = v66[1];
  swift_retain();
  swift_release();
  v67 = ((unint64_t)v65 + 23) & 0xFFFFFFFFFFFFFFF8;
  v68 = ((unint64_t)v66 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v67 = *(_BYTE *)v68;
  *(_QWORD *)(v67 + 8) = *(_QWORD *)(v68 + 8);
  swift_retain();
  swift_release();
  v69 = (v67 + 23) & 0xFFFFFFFFFFFFFFF8;
  v70 = (v68 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v69 = *(_BYTE *)v70;
  *(_QWORD *)(v69 + 8) = *(_QWORD *)(v70 + 8);
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *sub_23BF1F700(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  const void *v11;
  int v12;
  size_t v13;
  size_t v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _OWORD *v30;
  _OWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _OWORD *v34;
  _OWORD *v35;
  _OWORD *v36;
  _OWORD *v37;
  _OWORD *v38;
  _OWORD *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  __int128 v51;
  _OWORD *v52;
  _OWORD *v53;
  _OWORD *v54;
  _OWORD *v55;

  *a1 = *a2;
  v5 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  v7 = *(_QWORD *)(a3 + 88);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (char *)(((unint64_t)v5 + v9 + 8) & ~v9);
  v11 = (const void *)(((unint64_t)v6 + v9 + 8) & ~v9);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v11, 1, v7))
  {
    v12 = *(_DWORD *)(v8 + 84);
    v13 = *(_QWORD *)(v8 + 64);
    if (v12)
      v14 = v13;
    else
      v14 = v13 + 1;
    memcpy(v10, v11, v14);
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v8 + 32))(v10, v11, v7);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v10, 0, 1, v7);
    v12 = *(_DWORD *)(v8 + 84);
    v13 = *(_QWORD *)(v8 + 64);
  }
  if (v12)
    v15 = v13;
  else
    v15 = v13 + 1;
  v16 = *(_QWORD *)(*(_QWORD *)(a3 + 96) - 8);
  v17 = *(unsigned __int8 *)(v16 + 80);
  v18 = (v17 | 7) + v15;
  v19 = (unint64_t)&v10[v18];
  v20 = (_QWORD *)(((unint64_t)v11 + v18) & ~(v17 | 7));
  v21 = (_QWORD *)(v19 & ~(v17 | 7));
  *v21 = *v20;
  v22 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
  v23 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
  v24 = *(_OWORD *)(v23 + 16);
  *(_OWORD *)v22 = *(_OWORD *)v23;
  *(_OWORD *)(v22 + 16) = v24;
  *(_BYTE *)(v22 + 32) = *(_BYTE *)(v23 + 32);
  v25 = (_QWORD *)(((unint64_t)v21 + 55) & 0xFFFFFFFFFFFFF8);
  v26 = (_QWORD *)(((unint64_t)v20 + 55) & 0xFFFFFFFFFFFFF8);
  *v25 = *v26;
  v27 = (_QWORD *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8);
  v28 = (_QWORD *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v27 = *v28;
  (*(void (**)(unint64_t, unint64_t))(v16 + 32))(((unint64_t)v27 + v17 + 8) & ~v17, ((unint64_t)v28 + v17 + 8) & ~v17);
  v29 = *(_QWORD *)(v16 + 64) + ((v17 + 64) & ~v17) + 7;
  v30 = (_OWORD *)(((unint64_t)v21 + v29) & 0xFFFFFFFFFFFFFFF8);
  v31 = (_OWORD *)(((unint64_t)v20 + v29) & 0xFFFFFFFFFFFFFFF8);
  *v30 = *v31;
  v32 = (_QWORD *)(((unint64_t)v30 + 23) & 0xFFFFFFFFFFFFF8);
  v33 = (_QWORD *)(((unint64_t)v31 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v32 = *v33;
  v34 = (_OWORD *)(((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8);
  v35 = (_OWORD *)(((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v34 = *v35;
  v36 = (_OWORD *)(((unint64_t)v34 + 23) & 0xFFFFFFFFFFFFF8);
  v37 = (_OWORD *)(((unint64_t)v35 + 23) & 0xFFFFFFFFFFFFF8);
  *v36 = *v37;
  v38 = (_OWORD *)(((unint64_t)v36 + 23) & 0xFFFFFFFFFFFFF8);
  v39 = (_OWORD *)(((unint64_t)v37 + 23) & 0xFFFFFFFFFFFFF8);
  *v38 = *v39;
  v40 = ((unint64_t)v38 + 23) & 0xFFFFFFFFFFFFFFF8;
  v41 = ((unint64_t)v39 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v41 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v40 = *(_OWORD *)v41;
  }
  else
  {
    v42 = *(_QWORD *)(v41 + 8);
    *(_QWORD *)v40 = *(_QWORD *)v41;
    *(_QWORD *)(v40 + 8) = v42;
  }
  v43 = (v40 + 23) & 0xFFFFFFFFFFFFFFF8;
  v44 = (v41 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v44 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v43 = *(_OWORD *)v44;
  }
  else
  {
    v45 = *(_QWORD *)(v44 + 8);
    *(_QWORD *)v43 = *(_QWORD *)v44;
    *(_QWORD *)(v43 + 8) = v45;
  }
  v46 = (v43 + 23) & 0xFFFFFFFFFFFFFFF8;
  v47 = (v44 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v47 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v46 = *(_OWORD *)v47;
  }
  else
  {
    v48 = *(_QWORD *)(v47 + 8);
    *(_QWORD *)v46 = *(_QWORD *)v47;
    *(_QWORD *)(v46 + 8) = v48;
  }
  v49 = (v46 + 23) & 0xFFFFFFFFFFFFFFF8;
  v50 = (v47 + 23) & 0xFFFFFFFFFFFFFFF8;
  v51 = *(_OWORD *)v50;
  *(_BYTE *)(v49 + 16) = *(_BYTE *)(v50 + 16);
  *(_OWORD *)v49 = v51;
  v52 = (_OWORD *)((v46 + 47) & 0xFFFFFFFFFFFFFFF8);
  v53 = (_OWORD *)((v47 + 47) & 0xFFFFFFFFFFFFFFF8);
  *v52 = *v53;
  v54 = (_OWORD *)(((unint64_t)v52 + 23) & 0xFFFFFFFFFFFFFFF8);
  v55 = (_OWORD *)(((unint64_t)v53 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v54 = *v55;
  *(_OWORD *)(((unint64_t)v54 + 23) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v55 + 23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *sub_23BF1F9CC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  uint64_t v37;
  _OWORD *v38;
  __int128 v39;
  _OWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  _QWORD *v63;
  _QWORD *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;

  *a1 = *a2;
  v5 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a3 + 88);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (char *)(((unint64_t)v5 + v9 + 8) & ~v9);
  v11 = (char *)(((unint64_t)v6 + v9 + 8) & ~v9);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48);
  v13 = v12(v10, 1, v7);
  v14 = v12(v11, 1, v7);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v11, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v10, 0, 1, v7);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 40))(v10, v11, v7);
      goto LABEL_10;
    }
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  if (*(_DWORD *)(v8 + 84))
    v15 = *(_QWORD *)(v8 + 64);
  else
    v15 = *(_QWORD *)(v8 + 64) + 1;
  memcpy(v10, v11, v15);
LABEL_10:
  if (*(_DWORD *)(v8 + 84))
    v16 = *(_QWORD *)(v8 + 64);
  else
    v16 = *(_QWORD *)(v8 + 64) + 1;
  v17 = *(_QWORD *)(a3 + 96);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(unsigned __int8 *)(v18 + 80);
  v20 = (v19 | 7) + v16;
  v21 = (unint64_t)&v10[v20];
  v22 = (_QWORD *)((unint64_t)&v11[v20] & ~(v19 | 7));
  v23 = (_QWORD *)(v21 & ~(v19 | 7));
  *v23 = *v22;
  v24 = ((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8;
  v25 = ((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v24 = *(_QWORD *)v25;
  *(_QWORD *)(v24 + 8) = *(_QWORD *)(v25 + 8);
  *(_QWORD *)(v24 + 16) = *(_QWORD *)(v25 + 16);
  *(_QWORD *)(v24 + 24) = *(_QWORD *)(v25 + 24);
  *(_BYTE *)(v24 + 32) = *(_BYTE *)(v25 + 32);
  v26 = (_QWORD *)(((unint64_t)v23 + 55) & 0xFFFFFFFFFFFFF8);
  v27 = (_QWORD *)(((unint64_t)v22 + 55) & 0xFFFFFFFFFFFFF8);
  *v26 = *v27;
  v28 = (_QWORD *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8);
  v29 = (_QWORD *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v28 = *v29;
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v18 + 40))(((unint64_t)v28 + v19 + 8) & ~v19, ((unint64_t)v29 + v19 + 8) & ~v19, v17);
  v30 = *(_QWORD *)(v18 + 64) + ((v19 + 64) & ~v19) + 7;
  v31 = (_QWORD *)(((unint64_t)v23 + v30) & 0xFFFFFFFFFFFFFFF8);
  v32 = (_QWORD *)(((unint64_t)v22 + v30) & 0xFFFFFFFFFFFFFFF8);
  *v31 = *v32;
  v31[1] = v32[1];
  v33 = (_QWORD *)(((unint64_t)v31 + 23) & 0xFFFFFFFFFFFFF8);
  v34 = ((unint64_t)v32 + 23) & 0xFFFFFFFFFFFFF8;
  v35 = *(_QWORD *)v34;
  v34 += 15;
  *v33 = v35;
  v36 = (_OWORD *)(((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8);
  v37 = (v34 & 0xFFFFFFFFFFFFF8) + 23;
  *v36 = *(_OWORD *)(v34 & 0xFFFFFFFFFFFFF8);
  swift_release();
  v38 = (_OWORD *)(((unint64_t)v36 + 23) & 0xFFFFFFFFFFFFFFF8);
  v37 &= 0xFFFFFFFFFFFFF8uLL;
  v39 = *(_OWORD *)v37;
  v37 += 23;
  *v38 = v39;
  swift_release();
  v40 = (_OWORD *)(((unint64_t)v38 + 23) & 0xFFFFFFFFFFFFFFF8);
  v41 = (v37 & 0xFFFFFFFFFFFFF8) + 23;
  *v40 = *(_OWORD *)(v37 & 0xFFFFFFFFFFFFF8);
  swift_release();
  v42 = (_QWORD *)(((unint64_t)v40 + 23) & 0xFFFFFFFFFFFFFFF8);
  v43 = v41 & 0xFFFFFFFFFFFFFFF8;
  v44 = *(_QWORD *)(v41 & 0xFFFFFFFFFFFFFFF8);
  if (*v42 < 0xFFFFFFFFuLL)
  {
    if (v44 >= 0xFFFFFFFF)
    {
      v46 = *(_QWORD *)(v43 + 8);
      *v42 = v44;
      v42[1] = v46;
      goto LABEL_20;
    }
  }
  else
  {
    if (v44 >= 0xFFFFFFFF)
    {
      v45 = *(_QWORD *)(v43 + 8);
      *v42 = v44;
      v42[1] = v45;
      swift_release();
      goto LABEL_20;
    }
    swift_release();
  }
  *(_OWORD *)v42 = *(_OWORD *)v43;
LABEL_20:
  v47 = (_QWORD *)(((unint64_t)v42 + 23) & 0xFFFFFFFFFFFFFFF8);
  v48 = (unint64_t *)((v43 + 23) & 0xFFFFFFFFFFFFFFF8);
  v49 = *v48;
  if (*v47 < 0xFFFFFFFFuLL)
  {
    if (v49 >= 0xFFFFFFFF)
    {
      v51 = v48[1];
      *v47 = v49;
      v47[1] = v51;
      goto LABEL_27;
    }
  }
  else
  {
    if (v49 >= 0xFFFFFFFF)
    {
      v50 = v48[1];
      *v47 = v49;
      v47[1] = v50;
      swift_release();
      goto LABEL_27;
    }
    swift_release();
  }
  *(_OWORD *)v47 = *(_OWORD *)v48;
LABEL_27:
  v52 = (_QWORD *)(((unint64_t)v47 + 23) & 0xFFFFFFFFFFFFFFF8);
  v53 = (unint64_t *)(((unint64_t)v48 + 23) & 0xFFFFFFFFFFFFFFF8);
  v54 = *v53;
  if (*v52 < 0xFFFFFFFFuLL)
  {
    if (v54 >= 0xFFFFFFFF)
    {
      v56 = v53[1];
      *v52 = v54;
      v52[1] = v56;
      goto LABEL_34;
    }
LABEL_33:
    *(_OWORD *)v52 = *(_OWORD *)v53;
    goto LABEL_34;
  }
  if (v54 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_33;
  }
  v55 = v53[1];
  *v52 = v54;
  v52[1] = v55;
  swift_release();
LABEL_34:
  v57 = ((unint64_t)v52 + 23) & 0xFFFFFFFFFFFFFFF8;
  v58 = ((unint64_t)v53 + 23) & 0xFFFFFFFFFFFFFFF8;
  v59 = *(_BYTE *)(v58 + 16);
  v60 = *(_QWORD *)v57;
  v61 = *(_QWORD *)(v57 + 8);
  v62 = *(_BYTE *)(v57 + 16);
  *(_OWORD *)v57 = *(_OWORD *)v58;
  *(_BYTE *)(v57 + 16) = v59;
  sub_23BF1E5BC(v60, v61, v62);
  v63 = (_QWORD *)(((unint64_t)v52 + 47) & 0xFFFFFFFFFFFFFFF8);
  v64 = (_QWORD *)(((unint64_t)v53 + 47) & 0xFFFFFFFFFFFFFFF8);
  *v63 = *v64;
  v63[1] = v64[1];
  swift_release();
  v65 = ((unint64_t)v63 + 23) & 0xFFFFFFFFFFFFFFF8;
  v66 = ((unint64_t)v64 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v65 = *(_BYTE *)v66;
  *(_QWORD *)(v65 + 8) = *(_QWORD *)(v66 + 8);
  swift_release();
  v67 = (v65 + 23) & 0xFFFFFFFFFFFFFFF8;
  v68 = (v66 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v67 = *(_BYTE *)v68;
  *(_QWORD *)(v67 + 8) = *(_QWORD *)(v68 + 8);
  swift_release();
  return a1;
}

uint64_t sub_23BF1FE38(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v21;
  unsigned int v22;

  v4 = *(_QWORD *)(a3 + 88);
  v3 = *(_QWORD *)(a3 + 96);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 84);
  if (v6)
    v7 = v6 - 1;
  else
    v7 = 0;
  v8 = *(_QWORD *)(v3 - 8);
  if (*(_DWORD *)(v8 + 84) <= 0x7FFFFFFFu)
    v9 = 0x7FFFFFFF;
  else
    v9 = *(_DWORD *)(v8 + 84);
  if (v7 <= v9)
    v10 = v9;
  else
    v10 = v7;
  if (v6)
    v11 = *(_QWORD *)(v5 + 64);
  else
    v11 = *(_QWORD *)(v5 + 64) + 1;
  if (!a2)
    return 0;
  v12 = *(unsigned __int8 *)(v5 + 80);
  v13 = *(unsigned __int8 *)(v8 + 80);
  v14 = v13 | 7;
  if (v10 < a2)
  {
    if (((((((((((((((((((((((((*(_QWORD *)(v8 + 64)
                               + ((v13 + 64) & ~v13)
                               + ((v14 + v11 + ((v12 + 16) & ~v12)) & ~v14)
                               + 7) & 0xFFFFFFFFFFFFFFF8)
                             + 23) & 0xFFFFFFFFFFFFFFF8)
                           + 15) & 0xFFFFFFFFFFFFFFF8)
                         + 23) & 0xFFFFFFFFFFFFFFF8)
                       + 23) & 0xFFFFFFFFFFFFFFF8)
                     + 23) & 0xFFFFFFFFFFFFFFF8)
                   + 23) & 0xFFFFFFFFFFFFFFF8)
                 + 23) & 0xFFFFFFFFFFFFFFF8)
               + 47) & 0xFFFFFFFFFFFFFFF8)
             + 23) & 0xFFFFFFFFFFFFFFF8)
           + 23) & 0xFFFFFFFFFFFFFFF8)
         + 16) & 0xFFFFFFF8) != 0)
      v15 = 2;
    else
      v15 = a2 - v10 + 1;
    if (v15 >= 0x10000)
      v16 = 4;
    else
      v16 = 2;
    if (v15 < 0x100)
      v16 = 1;
    if (v15 >= 2)
      v17 = v16;
    else
      v17 = 0;
    __asm { BR              X19 }
  }
  v18 = (uint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 0x80000000) != 0)
  {
    v21 = ((unint64_t)v18 + v12 + 8) & ~v12;
    if (v7 < v9)
      return (*(uint64_t (**)(unint64_t))(v8 + 48))((v13
                                                                    + ((((((v21 + v11 + v14) & ~v14) + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                      + 55) & 0xFFFFFFFFFFFFFFF8)
                                                                    + 8) & ~v13);
    if (v6 >= 2)
    {
      v22 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 48))(v21, *(unsigned int *)(v5 + 84), v4, v14);
      if (v22 >= 2)
        return v22 - 1;
      else
        return 0;
    }
    return 0;
  }
  v19 = *v18;
  if ((unint64_t)*v18 >= 0xFFFFFFFF)
    LODWORD(v19) = -1;
  return (v19 + 1);
}

void sub_23BF20064(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;

  v5 = 0;
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 88) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7)
    v8 = v7 - 1;
  else
    v8 = 0;
  v9 = *(_QWORD *)(*(_QWORD *)(a4 + 96) - 8);
  if (*(_DWORD *)(v9 + 84) <= 0x7FFFFFFFu)
    v10 = 0x7FFFFFFF;
  else
    v10 = *(_DWORD *)(v9 + 84);
  if (v8 <= v10)
    v11 = v10;
  else
    v11 = v8;
  v12 = *(_QWORD *)(v6 + 64);
  if (!v7)
    ++v12;
  v13 = *(unsigned __int8 *)(v9 + 80);
  if (v11 < a3)
  {
    if ((((((((((((((((((((((((((_DWORD)v13 + 64) & ~(_DWORD)v13)
                             + *(_DWORD *)(v9 + 64)
                             + (((v13 | 7)
                               + (_DWORD)v12
                               + ((*(unsigned __int8 *)(v6 + 80) + 16) & ~*(unsigned __int8 *)(v6 + 80))) & ~(v13 | 7))
                             + 7) & 0xFFFFFFF8)
                           + 23) & 0xFFFFFFF8)
                         + 15) & 0xFFFFFFF8)
                       + 23) & 0xFFFFFFF8)
                     + 23) & 0xFFFFFFF8)
                   + 23) & 0xFFFFFFF8)
                 + 23) & 0xFFFFFFF8)
               + 23) & 0xFFFFFFF8)
             + 47) & 0xFFFFFFF8)
           + 23) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v14 = a3 - v11 + 1;
    else
      v14 = 2;
    if (v14 >= 0x10000)
      v15 = 4;
    else
      v15 = 2;
    if (v14 < 0x100)
      v15 = 1;
    if (v14 >= 2)
      v5 = v15;
    else
      v5 = 0;
  }
  if (a2 > v11)
  {
    if ((((((((((((((((((((((((((_DWORD)v13 + 64) & ~(_DWORD)v13)
                             + *(_DWORD *)(v9 + 64)
                             + (((v13 | 7)
                               + (_DWORD)v12
                               + ((*(unsigned __int8 *)(v6 + 80) + 16) & ~*(unsigned __int8 *)(v6 + 80))) & ~(v13 | 7))
                             + 7) & 0xFFFFFFF8)
                           + 23) & 0xFFFFFFF8)
                         + 15) & 0xFFFFFFF8)
                       + 23) & 0xFFFFFFF8)
                     + 23) & 0xFFFFFFF8)
                   + 23) & 0xFFFFFFF8)
                 + 23) & 0xFFFFFFF8)
               + 23) & 0xFFFFFFF8)
             + 47) & 0xFFFFFFF8)
           + 23) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      v16 = ~v11 + a2;
      bzero(a1, ((((((((((((((((((((((((v13 + 64) & ~v13)+ *(_QWORD *)(v9 + 64)+ (((v13 | 7)+ v12+ ((*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))) & ~(v13 | 7))+ 7) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 47) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 16);
      *a1 = v16;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X23 }
}

uint64_t sub_23BF20204@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  size_t v18;
  size_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  void *v30;
  int v31;
  int v32;

  *(_BYTE *)(v26 + v27) = 0;
  if ((_DWORD)a2)
  {
    v28 = (_QWORD *)((v26 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((result & 0x80000000) != 0)
    {
      result = (uint64_t)v28 + a5 + 8;
      if (v21 >= v23)
      {
        if (v21 >= a2)
        {
          if (v17 >= 2)
            return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v24 + 56))(result & a8, (a2 + 1), v17, a4);
        }
        else if ((_DWORD)v18)
        {
          if (v18 <= 3)
            v32 = v18;
          else
            v32 = 4;
          bzero((void *)(result & a8), v18);
          __asm { BR              X10 }
        }
      }
      else
      {
        v30 = (void *)(((result & a8) + v18 + a6) & a7);
        if (v23 >= a2)
        {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56))((v25 + (((((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 8) & v20, a2, a3, a9);
        }
        else if ((_DWORD)v19)
        {
          if (v19 <= 3)
            v31 = v19;
          else
            v31 = 4;
          bzero(v30, v19);
          __asm { BR              X10 }
        }
      }
    }
    else
    {
      if ((a2 & 0x80000000) != 0)
        v29 = a2 ^ 0x80000000;
      else
        v29 = (a2 - 1);
      *v28 = v29;
    }
  }
  return result;
}

void sub_23BF20348()
{
  _BYTE *v0;
  char v1;

  *v0 = v1;
}

void sub_23BF203A4()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_23BF203B4()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_23BF203BC()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

void sub_23BF203C8()
{
  swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  sub_23BFF94C0();
  type metadata accessor for ActionCardView();
}

void sub_23BF20488(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;
  uint64_t a66;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;

  v82 = MEMORY[0x242615198](&unk_23C005608, a1);
  *(_QWORD *)(v70 - 216) = a1;
  *(_QWORD *)(v70 - 208) = v82;
  MEMORY[0x24261512C](255, v70 - 216, MEMORY[0x24BDF3948], 0);
  sub_23BFF8ADC();
  v72 = sub_23BFF862C();
  v81 = sub_23BFF862C();
  v83 = sub_23BF1E6D8();
  *(_QWORD *)(v70 - 104) = v68;
  *(_QWORD *)(v70 - 96) = v83;
  v73 = MEMORY[0x24BDED308];
  v74 = MEMORY[0x242615198](MEMORY[0x24BDED308], v72, v70 - 104);
  v75 = MEMORY[0x24BDEEC40];
  *(_QWORD *)(v70 - 120) = v74;
  *(_QWORD *)(v70 - 112) = v75;
  v80 = MEMORY[0x242615198](v73, v81, v70 - 120);
  *(_QWORD *)(v70 - 216) = v81;
  *(_QWORD *)(v70 - 208) = v80;
  v76 = MEMORY[0x24BDF3100];
  MEMORY[0x24261512C](255, v70 - 216, MEMORY[0x24BDF3100], 0);
  v79 = sub_23BFF862C();
  v77 = MEMORY[0x24BDEBEE0];
  *(_QWORD *)(v70 - 136) = v74;
  *(_QWORD *)(v70 - 128) = v77;
  v78 = MEMORY[0x242615198](v73, v79, v70 - 136);
  *(_QWORD *)(v70 - 216) = v79;
  *(_QWORD *)(v70 - 208) = v78;
  MEMORY[0x24261512C](255, v70 - 216, v76, 0);
  sub_23BFF8968();
  sub_23BFF8FD4();
  sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3910);
  sub_23BFF8968();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3918);
  sub_23BFF8968();
  sub_23BFF8968();
  *(_QWORD *)(v70 - 216) = v67;
  *(_QWORD *)(v70 - 208) = v66;
  *(_QWORD *)(v70 - 200) = v66;
  *(_QWORD *)(v70 - 192) = a22;
  *(_QWORD *)(v70 - 184) = a65;
  *(_QWORD *)(v70 - 176) = v68;
  *(_QWORD *)(v70 - 168) = v69;
  *(_QWORD *)(v70 - 160) = v69;
  *(_QWORD *)(v70 - 152) = a63;
  *(_QWORD *)(v70 - 144) = a66;
  type metadata accessor for FullWidthStageView();
}

void sub_23BF20690(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = MEMORY[0x242615198](&unk_23C0077B8, a1);
  *(_QWORD *)(v6 - 216) = a1;
  *(_QWORD *)(v6 - 208) = v23;
  MEMORY[0x24261512C](255, v6 - 216, v4, 0);
  v22 = type metadata accessor for InfoActionCardView(255, v1, v5, v8);
  v21 = MEMORY[0x242615198](&unk_23C007F20, v22);
  *(_QWORD *)(v6 - 216) = v22;
  *(_QWORD *)(v6 - 208) = v21;
  MEMORY[0x24261512C](255, v6 - 216, v4, 0);
  sub_23BFF8968();
  sub_23BFF8968();
  v20 = type metadata accessor for LargeBrickView(255, v2, v3, v9);
  v19 = MEMORY[0x242615198](&protocol conformance descriptor for LargeBrickView<A>, v20);
  *(_QWORD *)(v6 - 216) = v20;
  *(_QWORD *)(v6 - 208) = v19;
  MEMORY[0x24261512C](255, v6 - 216, v4, 0);
  v18 = type metadata accessor for DynamicBrickView(255, v2, v3, v10);
  v17 = MEMORY[0x242615198](&protocol conformance descriptor for DynamicBrickView<A>, v18);
  *(_QWORD *)(v6 - 216) = v18;
  *(_QWORD *)(v6 - 208) = v17;
  MEMORY[0x24261512C](255, v6 - 216, v4, 0);
  sub_23BFF8968();
  v16 = type metadata accessor for MonogramVerticalStackView(255, v2, v3, v11);
  v15 = MEMORY[0x242615198](&unk_23BFFA1F4, v16);
  *(_QWORD *)(v6 - 216) = v16;
  *(_QWORD *)(v6 - 208) = v15;
  MEMORY[0x24261512C](255, v6 - 216, v4, 0);
  sub_23BFF8968();
  sub_23BFF8968();
  sub_23BFF8968();
  v14 = type metadata accessor for StandardCardView(255, v2, v3, v12);
  v13 = MEMORY[0x242615198](&unk_23C007BD0, v14);
  *(_QWORD *)(v6 - 216) = v14;
  *(_QWORD *)(v6 - 208) = v13;
  MEMORY[0x24261512C](255, v6 - 216, v4, 0);
  *(_QWORD *)(v6 - 216) = v2;
  *(_QWORD *)(v6 - 208) = v1;
  *(_QWORD *)(v6 - 200) = v3;
  *(_QWORD *)(v6 - 192) = v5;
  type metadata accessor for StandardHorizontalStackView();
}

void sub_23BF208C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,unint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,unint64_t a63)
{
  uint64_t a65;
  uint64_t a66;
  uint64_t a69;
  uint64_t a70;
  uint64_t a71;
  uint64_t a72;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t OpaqueTypeConformance2;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t AssociatedConformanceWitness;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;

  v159 = MEMORY[0x242615198](&unk_23C0008E8, a1);
  *(_QWORD *)(v75 - 216) = a1;
  *(_QWORD *)(v75 - 208) = v159;
  MEMORY[0x24261512C](255, v75 - 216, v74, 0);
  v146 = sub_23BFF8968();
  v78 = type metadata accessor for StandardVerticalStackView(255, v72, v73, v77);
  v158 = MEMORY[0x242615198](&unk_23C0073B8, v78);
  *(_QWORD *)(v75 - 216) = v78;
  *(_QWORD *)(v75 - 208) = v158;
  MEMORY[0x24261512C](255, v75 - 216, v74, 0);
  v80 = type metadata accessor for TallCardView(255, v72, v73, v79);
  v157 = MEMORY[0x242615198](&unk_23BFFF0E4, v80);
  *(_QWORD *)(v75 - 216) = v80;
  *(_QWORD *)(v75 - 208) = v157;
  MEMORY[0x24261512C](255, v75 - 216, v74, 0);
  v156 = sub_23BFF8968();
  v144 = sub_23BFF8968();
  v82 = type metadata accessor for VerticalStackCard(255, v72, v73, v81);
  v154 = MEMORY[0x242615198](&unk_23C0000E0, v82);
  *(_QWORD *)(v75 - 216) = v82;
  *(_QWORD *)(v75 - 208) = v154;
  MEMORY[0x24261512C](255, v75 - 216, v74, 0);
  v145 = sub_23BFF8968();
  v84 = type metadata accessor for WideBrickView(255, v72, v73, v83);
  v149 = MEMORY[0x242615198](&protocol conformance descriptor for WideBrickView<A>, v84);
  *(_QWORD *)(v75 - 216) = v84;
  *(_QWORD *)(v75 - 208) = v149;
  MEMORY[0x24261512C](255, v75 - 216, v74, 0);
  v147 = sub_23BFF8968();
  v148 = sub_23BFF8968();
  v150 = sub_23BFF8968();
  v151 = sub_23BFF8FD4();
  v152 = sub_23BFF862C();
  v153 = sub_23BFF8968();
  v155 = sub_23BFF862C();
  v85 = sub_23BFF862C();
  *(_QWORD *)(v75 - 216) = a55;
  *(_QWORD *)(v75 - 208) = a54;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v75 - 216) = a53;
  *(_QWORD *)(v75 - 208) = a52;
  v87 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v75 - 216) = a46;
  *(_QWORD *)(v75 - 208) = a45;
  v88 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v75 - 232) = v87;
  *(_QWORD *)(v75 - 224) = v88;
  v89 = MEMORY[0x24BDEF3E0];
  *(_QWORD *)(v75 - 240) = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], a43, v75 - 232);
  v90 = MEMORY[0x242615198](MEMORY[0x24BDF3F50], a47, v75 - 240);
  v91 = MEMORY[0x24BDECC60];
  *(_QWORD *)(v75 - 256) = v90;
  *(_QWORD *)(v75 - 248) = v91;
  v92 = MEMORY[0x242615198](MEMORY[0x24BDED308], a44, v75 - 256);
  v93 = sub_23BEA1F94(&qword_256AE3920, &qword_256AE3910, MEMORY[0x24BDF43B0]);
  STACK[0x370] = v92;
  STACK[0x378] = v93;
  v94 = MEMORY[0x242615198](v89, a50, &STACK[0x370]);
  v95 = sub_23BEA1F94(&qword_256AE3928, &qword_256AE3918, MEMORY[0x24BDF4700]);
  STACK[0x360] = v94;
  STACK[0x368] = v95;
  v96 = MEMORY[0x242615198](v89, a51, &STACK[0x360]);
  STACK[0x350] = OpaqueTypeConformance2;
  STACK[0x358] = v96;
  v97 = MEMORY[0x242615198](v89, a35, &STACK[0x350]);
  *(_QWORD *)(v75 - 216) = a49;
  *(_QWORD *)(v75 - 208) = a48;
  v98 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v75 - 216) = a42;
  *(_QWORD *)(v75 - 208) = a41;
  v99 = swift_getOpaqueTypeConformance2();
  STACK[0x340] = v98;
  STACK[0x348] = v99;
  v100 = MEMORY[0x242615198](v89, a40, &STACK[0x340]);
  STACK[0x330] = v97;
  STACK[0x338] = v100;
  v101 = MEMORY[0x242615198](v89, a21, &STACK[0x330]);
  *(_QWORD *)(v75 - 216) = a39;
  *(_QWORD *)(v75 - 208) = a38;
  v102 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v75 - 216) = a37;
  *(_QWORD *)(v75 - 208) = a36;
  v103 = swift_getOpaqueTypeConformance2();
  STACK[0x320] = v102;
  STACK[0x328] = v103;
  v104 = MEMORY[0x242615198](v89, a28, &STACK[0x320]);
  *(_QWORD *)(v75 - 216) = a34;
  *(_QWORD *)(v75 - 208) = a33;
  STACK[0x310] = swift_getOpaqueTypeConformance2();
  STACK[0x318] = v103;
  v105 = MEMORY[0x242615198](v89, a31, &STACK[0x310]);
  STACK[0x300] = v104;
  STACK[0x308] = v105;
  v106 = MEMORY[0x242615198](v89, a32, &STACK[0x300]);
  STACK[0x2F0] = v101;
  STACK[0x2F8] = v106;
  v107 = MEMORY[0x242615198](v89, a9, &STACK[0x2F0]);
  *(_QWORD *)(v75 - 216) = a30;
  *(_QWORD *)(v75 - 208) = a29;
  v108 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v75 - 216) = a1;
  *(_QWORD *)(v75 - 208) = v159;
  v109 = swift_getOpaqueTypeConformance2();
  STACK[0x2E0] = v108;
  STACK[0x2E8] = v109;
  v110 = MEMORY[0x242615198](v89, v146, &STACK[0x2E0]);
  *(_QWORD *)(v75 - 216) = v78;
  *(_QWORD *)(v75 - 208) = v158;
  v111 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v75 - 216) = v80;
  *(_QWORD *)(v75 - 208) = v157;
  v112 = swift_getOpaqueTypeConformance2();
  STACK[0x2D0] = v111;
  STACK[0x2D8] = v112;
  v113 = MEMORY[0x242615198](v89, v156, &STACK[0x2D0]);
  STACK[0x2C0] = v110;
  STACK[0x2C8] = v113;
  v114 = MEMORY[0x242615198](v89, v144, &STACK[0x2C0]);
  *(_QWORD *)(v75 - 216) = v82;
  *(_QWORD *)(v75 - 208) = v154;
  STACK[0x2B0] = swift_getOpaqueTypeConformance2();
  STACK[0x2B8] = a63;
  v115 = MEMORY[0x242615198](v89, v145, &STACK[0x2B0]);
  *(_QWORD *)(v75 - 216) = v84;
  *(_QWORD *)(v75 - 208) = v149;
  v116 = swift_getOpaqueTypeConformance2();
  STACK[0x2A0] = v115;
  STACK[0x2A8] = v116;
  v117 = MEMORY[0x242615198](v89, v147, &STACK[0x2A0]);
  STACK[0x290] = v114;
  STACK[0x298] = v117;
  v118 = MEMORY[0x242615198](v89, v148, &STACK[0x290]);
  STACK[0x280] = v107;
  STACK[0x288] = v118;
  STACK[0x278] = MEMORY[0x242615198](v89, v150, &STACK[0x280]);
  STACK[0x268] = MEMORY[0x242615198](MEMORY[0x24BDF3F50], v151, &STACK[0x278]);
  STACK[0x270] = a56;
  v119 = MEMORY[0x24BDED308];
  v120 = MEMORY[0x242615198](MEMORY[0x24BDED308], v152, &STACK[0x268]);
  v121 = MEMORY[0x24BDF5138];
  STACK[0x258] = MEMORY[0x24BDF5138];
  STACK[0x260] = v120;
  v122 = MEMORY[0x242615198](v89, v153, &STACK[0x258]);
  v123 = MEMORY[0x24BDF0910];
  STACK[0x248] = v122;
  STACK[0x250] = v123;
  STACK[0x238] = MEMORY[0x242615198](v119, v155, &STACK[0x248]);
  STACK[0x240] = v123;
  v124 = MEMORY[0x242615198](v119, v85, &STACK[0x238]);
  *(_QWORD *)(v75 - 216) = v85;
  *(_QWORD *)(v75 - 208) = v124;
  MEMORY[0x24261512C](255, v75 - 216, MEMORY[0x24BDF2550], 0);
  v125 = sub_23BFF862C();
  *(_QWORD *)(v75 - 216) = v85;
  *(_QWORD *)(v75 - 208) = v124;
  STACK[0x228] = swift_getOpaqueTypeConformance2();
  STACK[0x230] = a56;
  v126 = MEMORY[0x242615198](v119, v125, &STACK[0x228]);
  *(_QWORD *)(v75 - 216) = v125;
  *(_QWORD *)(v75 - 208) = v126;
  MEMORY[0x24261512C](255, v75 - 216, MEMORY[0x24BEC6710], 0);
  v127 = sub_23BFF8968();
  v128 = sub_23BFF862C();
  *(_QWORD *)(v75 - 216) = v125;
  *(_QWORD *)(v75 - 208) = v126;
  STACK[0x218] = swift_getOpaqueTypeConformance2();
  STACK[0x220] = v126;
  STACK[0x208] = MEMORY[0x242615198](v89, v127, &STACK[0x218]);
  STACK[0x210] = MEMORY[0x24BDEEC40];
  v129 = MEMORY[0x242615198](v119, v128, &STACK[0x208]);
  *(_QWORD *)(v75 - 216) = v128;
  *(_QWORD *)(v75 - 208) = v129;
  MEMORY[0x24261512C](255, v75 - 216, MEMORY[0x24BDF3100], 0);
  v130 = sub_23BFF8968();
  v131 = MEMORY[0x242615198](MEMORY[0x24BEE12D8], a57);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(_QWORD *)(v75 - 216) = a57;
  *(_QWORD *)(v75 - 208) = a58;
  *(_QWORD *)(v75 - 200) = v130;
  *(_QWORD *)(v75 - 192) = v131;
  *(_QWORD *)(v75 - 184) = AssociatedConformanceWitness;
  v133 = sub_23BFF910C();
  *(_QWORD *)(v75 - 216) = v128;
  *(_QWORD *)(v75 - 208) = v129;
  v134 = swift_getOpaqueTypeConformance2();
  a72 = v121;
  STACK[0x200] = v134;
  a71 = MEMORY[0x242615198](v89, v130, &a72);
  MEMORY[0x242615198](MEMORY[0x24BDF4A08], v133, &a71);
  v135 = sub_23BFF9058();
  MEMORY[0x242615198](MEMORY[0x24BDF4498], v135);
  v136 = sub_23BFF8434();
  v137 = sub_23BFF862C();
  v138 = sub_23BFF8AB8();
  a69 = MEMORY[0x242615198](MEMORY[0x24BDEB238], v136);
  a70 = MEMORY[0x24BDF1050];
  v139 = MEMORY[0x242615198](v119, v137, &a69);
  *(_QWORD *)(v75 - 216) = v137;
  *(_QWORD *)(v75 - 208) = v138;
  v140 = MEMORY[0x24BDF0AB8];
  *(_QWORD *)(v75 - 200) = v139;
  *(_QWORD *)(v75 - 192) = v140;
  v141 = MEMORY[0x24261512C](255, v75 - 216, MEMORY[0x24BDF3000], 0);
  *(_QWORD *)(v75 - 216) = v137;
  *(_QWORD *)(v75 - 208) = v138;
  *(_QWORD *)(v75 - 200) = v139;
  *(_QWORD *)(v75 - 192) = v140;
  v142 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v75 - 216) = v141;
  *(_QWORD *)(v75 - 208) = MEMORY[0x24BEE1768];
  v143 = MEMORY[0x24BEE1788];
  *(_QWORD *)(v75 - 200) = v142;
  *(_QWORD *)(v75 - 192) = v143;
  MEMORY[0x24261512C](255, v75 - 216, MEMORY[0x24BDF38E8], 0);
  *(_QWORD *)(v75 - 216) = a62;
  *(_QWORD *)(v75 - 208) = a65;
  *(_QWORD *)(v75 - 200) = a61;
  *(_QWORD *)(v75 - 192) = a66;
  type metadata accessor for CanvasLayout();
}

uint64_t sub_23BF21268(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t OpaqueTypeConformance2;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[88];

  *(_QWORD *)(v8 - 216) = v4;
  *(_QWORD *)(v8 - 208) = v6;
  *(_QWORD *)(v8 - 200) = v2;
  *(_QWORD *)(v8 - 192) = v5;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v11 = MEMORY[0x242615198](&protocol conformance descriptor for CanvasLayout<A, B>, a1);
  *(_QWORD *)(v8 - 216) = v3;
  *(_QWORD *)(v8 - 208) = a1;
  *(_QWORD *)(v8 - 200) = OpaqueTypeConformance2;
  *(_QWORD *)(v8 - 192) = v11;
  v12 = MEMORY[0x24261512C](255, v8 - 216, v1, 0);
  *(_QWORD *)(v8 - 216) = v3;
  *(_QWORD *)(v8 - 208) = a1;
  *(_QWORD *)(v8 - 200) = OpaqueTypeConformance2;
  *(_QWORD *)(v8 - 192) = v11;
  v13 = swift_getOpaqueTypeConformance2();
  v14 = sub_23BEAA674();
  v15 = MEMORY[0x24BEE50B0];
  *(_QWORD *)(v8 - 216) = v12;
  *(_QWORD *)(v8 - 208) = v15;
  *(_QWORD *)(v8 - 200) = v13;
  *(_QWORD *)(v8 - 192) = v14;
  v16 = MEMORY[0x24261512C](255, v8 - 216, MEMORY[0x24BDF3138], 0);
  *(_QWORD *)(v8 - 216) = v12;
  *(_QWORD *)(v8 - 208) = v15;
  *(_QWORD *)(v8 - 200) = v13;
  *(_QWORD *)(v8 - 192) = v14;
  v17 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v8 - 216) = v16;
  *(_QWORD *)(v8 - 208) = v17;
  MEMORY[0x24261512C](255, v8 - 216, MEMORY[0x24BDF2E58], 0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE53C8);
  v18 = sub_23BFF862C();
  *(_QWORD *)(v8 - 216) = v16;
  *(_QWORD *)(v8 - 208) = v17;
  v21[0] = swift_getOpaqueTypeConformance2();
  v21[1] = sub_23BEA1F94(qword_256AE53D0, &qword_256AE53C8, MEMORY[0x24BDEDC10]);
  MEMORY[0x242615198](v7, v18, v21);
  v19 = sub_23BFF86D4();
  return MEMORY[0x242615198](MEMORY[0x24BDEDA10], v19);
}

void sub_23BF213F8()
{
  sub_23BF21B54((void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BF19FA8);
}

void sub_23BF21408()
{
  type metadata accessor for CarouselView();
}

#error "23BF2152C: call analysis failed (funcsize=35)"

void objectdestroy_3Tm()
{
  type metadata accessor for CarouselView();
}

void sub_23BF215B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v6 = (*(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80) + 176) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  sub_23BFF8668();
  swift_bridgeObjectRelease();
  v4 = v1 + v6 + *(int *)(a1 + 184);
  v5 = *(_QWORD *)(v2 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v4, 1, v2))
    (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v4, v2);
  swift_bridgeObjectRelease();
  type metadata accessor for CanvasLayout();
}

uint64_t sub_23BF2166C(uint64_t a1)
{
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v4 + *(int *)(a1 + 68), v3);
  swift_release();
  swift_release();
  swift_release();
  if (*(_QWORD *)(v6 + v1[53]))
    swift_release();
  if (*(_QWORD *)(v6 + v1[54]))
    swift_release();
  if (*(_QWORD *)(v6 + v1[55]))
    swift_release();
  sub_23BF1E5BC(*(_QWORD *)(v6 + v1[56]), *(_QWORD *)(v6 + v1[56] + 8), *(_BYTE *)(v6 + v1[56] + 16));
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t))(v5 + 8))(v2 + ((v10 + v9 + v7) & ~v7));
  return swift_deallocObject();
}

void sub_23BF217A4()
{
  type metadata accessor for CarouselView();
}

void sub_23BF2183C()
{
  sub_23BF1E230();
}

void sub_23BF218BC()
{
  type metadata accessor for CarouselView();
}

void sub_23BF21958()
{
  sub_23BF1E310();
}

void sub_23BF219DC()
{
  sub_23BF1E3B0();
}

unint64_t sub_23BF21A34()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AE5460;
  if (!qword_256AE5460)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE5458);
    v2[0] = sub_23BF21AA0();
    v2[1] = MEMORY[0x24BDECC60];
    result = MEMORY[0x242615198](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AE5460);
  }
  return result;
}

unint64_t sub_23BF21AA0()
{
  unint64_t result;

  result = qword_256AE5468;
  if (!qword_256AE5468)
  {
    result = MEMORY[0x242615198](&unk_23C009188, &type metadata for PageControlView);
    atomic_store(result, (unint64_t *)&qword_256AE5468);
  }
  return result;
}

BOOL sub_23BF21AE4()
{
  uint64_t v0;
  uint64_t v1;
  BOOL v2;

  v1 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v0 + 168) + 184))(*(_QWORD *)(v0 + 112));
  v2 = sub_23BF29234(3u, v1);
  swift_bridgeObjectRelease();
  return !v2;
}

void sub_23BF21B48()
{
  sub_23BF21B54((void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BF1AF34);
}

void sub_23BF21B54(void (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  a1(v1[22], v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8], v1[9], v1[10], v1[11], v1[12], v1[13], v1[14], v1[15], v1[16], v1[17], v1[18], v1[19],
    v1[20],
    v1[21]);
  JUMPOUT(0x23BF21BA4);
}

void objectdestroyTm_3()
{
  type metadata accessor for CarouselView();
}

void sub_23BF21C18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = v1
     + ((*(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80) + 176) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80));
  swift_bridgeObjectRelease();
  v5 = v4 + *(int *)(a1 + 184);
  v6 = *(_QWORD *)(v2 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v5, 1, v2))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v2);
  swift_bridgeObjectRelease();
  type metadata accessor for CanvasLayout();
}

uint64_t sub_23BF21CAC(uint64_t a1)
{
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v3 + *(int *)(a1 + 68), v2);
  swift_release();
  swift_release();
  swift_release();
  if (*(_QWORD *)(v4 + v1[53]))
    swift_release();
  if (*(_QWORD *)(v4 + v1[54]))
    swift_release();
  if (*(_QWORD *)(v4 + v1[55]))
    swift_release();
  sub_23BF1E5BC(*(_QWORD *)(v4 + v1[56]), *(_QWORD *)(v4 + v1[56] + 8), *(_BYTE *)(v4 + v1[56] + 16));
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_23BF21DB8()
{
  type metadata accessor for CarouselView();
}

#error "23BF21EB0: call analysis failed (funcsize=24)"

void sub_23BF21EDC(uint64_t a1)
{
  sub_23BF1D9F0(a1);
}

void sub_23BF21F28(uint64_t a1)
{
  sub_23BF21F40(a1, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BF1DB34);
}

void sub_23BF21F34(uint64_t a1)
{
  sub_23BF21F40(a1, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BF1DC84);
}

void sub_23BF21F40(uint64_t a1, void (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v2;

  a2(a1, v2[22], v2[23], v2[2], v2[3], v2[4], v2[5], v2[6], v2[7], v2[8], v2[9], v2[10], v2[11], v2[12], v2[13], v2[14], v2[15], v2[16], v2[17],
    v2[18],
    v2[19],
    v2[20],
    v2[21]);
  JUMPOUT(0x23BF21F98);
}

void sub_23BF21FA8()
{
  type metadata accessor for CarouselView();
}

void sub_23BF2203C()
{
  type metadata accessor for CarouselView();
}

uint64_t sub_23BF220C8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (**v3)();

  v3 = (uint64_t (**)())(v2 + *(int *)(result + 216) + v1);
  if (*v3)
    return (*v3)();
  return result;
}

void objectdestroy_21Tm()
{
  type metadata accessor for CarouselView();
}

void sub_23BF22170(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = v1
     + ((*(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80) + 176) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80));
  swift_bridgeObjectRelease();
  v5 = v4 + *(int *)(a1 + 184);
  v6 = *(_QWORD *)(v2 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v5, 1, v2))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v2);
  swift_bridgeObjectRelease();
  type metadata accessor for CanvasLayout();
}

uint64_t sub_23BF22204(uint64_t a1)
{
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v3 + *(int *)(a1 + 68), v2);
  swift_release();
  swift_release();
  swift_release();
  if (*(_QWORD *)(v4 + v1[53]))
    swift_release();
  if (*(_QWORD *)(v4 + v1[54]))
    swift_release();
  if (*(_QWORD *)(v4 + v1[55]))
    swift_release();
  sub_23BF1E5BC(*(_QWORD *)(v4 + v1[56]), *(_QWORD *)(v4 + v1[56] + 8), *(_BYTE *)(v4 + v1[56] + 16));
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_23BF2231C()
{
  type metadata accessor for CarouselView();
}

void sub_23BF223B0()
{
  type metadata accessor for CarouselView();
}

uint64_t sub_23BF2243C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (**v3)();

  v3 = (uint64_t (**)())(v2 + *(int *)(result + 220) + v1);
  if (*v3)
    return (*v3)();
  return result;
}

void objectdestroy_18Tm()
{
  type metadata accessor for CarouselView();
}

void sub_23BF224E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = v1
     + ((*(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80) + 176) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80));
  swift_bridgeObjectRelease();
  v5 = v4 + *(int *)(a1 + 184);
  v6 = *(_QWORD *)(v2 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v5, 1, v2))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v2);
  swift_bridgeObjectRelease();
  type metadata accessor for CanvasLayout();
}

uint64_t sub_23BF22598(uint64_t a1)
{
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v4 + *(int *)(a1 + 68), v3);
  swift_release();
  swift_release();
  swift_release();
  if (*(_QWORD *)(v6 + v2[53]))
    swift_release();
  if (*(_QWORD *)(v6 + v2[54]))
    swift_release();
  if (*(_QWORD *)(v6 + v2[55]))
    swift_release();
  sub_23BF1E5BC(*(_QWORD *)(v6 + v2[56]), *(_QWORD *)(v6 + v2[56] + 8), *(_BYTE *)(v6 + v2[56] + 16));
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t))(v5 + 8))(v1 + ((v10 + v9 + v7) & ~v7));
  return swift_deallocObject();
}

void sub_23BF226CC()
{
  type metadata accessor for CarouselView();
}

void sub_23BF22760(uint64_t a1)
{
  uint64_t v1;

  sub_23BF1DDD4(v1+ ((*(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80) + 176) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80)));
}

double static ContentMargins.zero.getter@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

double ContentMargins.bottom.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

double ContentMargins.leading.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

double ContentMargins.top.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

double ContentMargins.trailing.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

void ContentMargins.init(top:leading:bottom:trailing:)(double *a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  *a1 = a4;
  a1[1] = a3;
  a1[2] = a2;
  a1[3] = a5;
}

uint64_t sub_23BF22828()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23BF22854 + 4 * byte_23BFFF628[*v0]))(0x6D6F74746F62, 0xE600000000000000);
}

uint64_t sub_23BF22854()
{
  return 0x676E696461656CLL;
}

uint64_t sub_23BF2286C()
{
  return 7368564;
}

uint64_t sub_23BF2287C()
{
  return 0x676E696C69617274;
}

uint64_t sub_23BF22894@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BF230BC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BF228B8()
{
  sub_23BF22AC8();
  return sub_23BFF9A30();
}

uint64_t sub_23BF228E0()
{
  sub_23BF22AC8();
  return sub_23BFF9A3C();
}

uint64_t ContentMargins.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5480);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v8 = v1[1];
  v11 = v1[2];
  v10 = v1[3];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BF22AC8();
  sub_23BFF9A18();
  v14 = v9;
  HIBYTE(v13) = 0;
  sub_23BEBFC1C();
  sub_23BFF9940();
  if (!v2)
  {
    v14 = v8;
    HIBYTE(v13) = 1;
    sub_23BFF9940();
    v14 = v11;
    HIBYTE(v13) = 2;
    sub_23BFF9940();
    v14 = v10;
    HIBYTE(v13) = 3;
    sub_23BFF9940();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_23BF22AC8()
{
  unint64_t result;

  result = qword_256AE5488;
  if (!qword_256AE5488)
  {
    result = MEMORY[0x242615198](&unk_23BFFF7D8, &type metadata for ContentMargins.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE5488);
  }
  return result;
}

uint64_t ContentMargins.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5490);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BF22AC8();
  sub_23BFF9A0C();
  if (!v2)
  {
    HIBYTE(v14) = 0;
    sub_23BEC0384();
    sub_23BFF98C8();
    v9 = v15;
    HIBYTE(v14) = 1;
    sub_23BFF98C8();
    v10 = v15;
    HIBYTE(v14) = 2;
    sub_23BFF98C8();
    v12 = v15;
    HIBYTE(v14) = 3;
    sub_23BFF98C8();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v13 = v15;
    *a2 = v9;
    a2[1] = v10;
    a2[2] = v12;
    a2[3] = v13;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_23BF22D14@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return ContentMargins.init(from:)(a1, a2);
}

uint64_t sub_23BF22D28(_QWORD *a1)
{
  return ContentMargins.encode(to:)(a1);
}

uint64_t ContentMargins.hash(into:)()
{
  sub_23BFF99F4();
  sub_23BFF99F4();
  sub_23BFF99F4();
  return sub_23BFF99F4();
}

uint64_t ContentMargins.hashValue.getter()
{
  sub_23BFF99D0();
  ContentMargins.hash(into:)();
  return sub_23BFF9A00();
}

uint64_t sub_23BF22DF0()
{
  sub_23BFF99D0();
  ContentMargins.hash(into:)();
  return sub_23BFF9A00();
}

uint64_t sub_23BF22E3C()
{
  sub_23BFF99D0();
  ContentMargins.hash(into:)();
  return sub_23BFF9A00();
}

BOOL _s15FitnessCanvasUI14ContentMarginsV2eeoiySbAC_ACtFZ_0(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

unint64_t sub_23BF22EC4()
{
  unint64_t result;

  result = qword_256AE5498;
  if (!qword_256AE5498)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for ContentMargins, &type metadata for ContentMargins);
    atomic_store(result, (unint64_t *)&qword_256AE5498);
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentMargins()
{
  return &type metadata for ContentMargins;
}

uint64_t storeEnumTagSinglePayload for ContentMargins.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23BF22F64 + 4 * byte_23BFFF631[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23BF22F98 + 4 * byte_23BFFF62C[v4]))();
}

uint64_t sub_23BF22F98(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BF22FA0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BF22FA8);
  return result;
}

uint64_t sub_23BF22FB4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BF22FBCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23BF22FC0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BF22FC8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ContentMargins.CodingKeys()
{
  return &type metadata for ContentMargins.CodingKeys;
}

unint64_t sub_23BF22FE8()
{
  unint64_t result;

  result = qword_256AE54A0;
  if (!qword_256AE54A0)
  {
    result = MEMORY[0x242615198](&unk_23BFFF7B0, &type metadata for ContentMargins.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE54A0);
  }
  return result;
}

unint64_t sub_23BF23030()
{
  unint64_t result;

  result = qword_256AE54A8;
  if (!qword_256AE54A8)
  {
    result = MEMORY[0x242615198](&unk_23BFFF720, &type metadata for ContentMargins.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE54A8);
  }
  return result;
}

unint64_t sub_23BF23078()
{
  unint64_t result;

  result = qword_256AE54B0;
  if (!qword_256AE54B0)
  {
    result = MEMORY[0x242615198](&unk_23BFFF748, &type metadata for ContentMargins.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE54B0);
  }
  return result;
}

uint64_t sub_23BF230BC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6D6F74746F62 && a2 == 0xE600000000000000;
  if (v2 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x676E696461656CLL && a2 == 0xE700000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 7368564 && a2 == 0xE300000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x676E696C69617274 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_23BFF9964();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t DescriptionView.init(text:lineLimit:sheetTitle:locale:supplementaryView:action:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  char v16;
  int *v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  _QWORD *v37;
  _QWORD *v38;
  char v41;
  uint64_t v42;

  v16 = a4;
  v21 = (int *)type metadata accessor for DescriptionView(0, a13, a14, a4);
  v22 = (uint64_t *)(a9 + v21[9]);
  *v22 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3960);
  swift_storeEnumTagMultiPayload();
  v23 = (_QWORD *)(a9 + v21[10]);
  v24 = sub_23BF234A8();
  *v23 = v25;
  v23[1] = v26;
  v23[2] = v24;
  v27 = (_QWORD *)(a9 + v21[11]);
  v28 = sub_23BF234A8();
  *v27 = v29;
  v27[1] = v30;
  v27[2] = v28;
  v31 = a9 + v21[12];
  sub_23BFF8FEC();
  *(_BYTE *)v31 = v41;
  *(_QWORD *)(v31 + 8) = v42;
  *(_QWORD *)a9 = a3;
  *(_BYTE *)(a9 + 8) = v16 & 1;
  v32 = (_QWORD *)(a9 + v21[13]);
  *v32 = a1;
  v32[1] = a2;
  v33 = (_QWORD *)(a9 + v21[14]);
  *v33 = a5;
  v33[1] = a6;
  v34 = a9 + v21[15];
  v35 = sub_23BFF8368();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v34, a7, v35);
  v37 = (_QWORD *)(a9 + v21[16]);
  *v37 = a8;
  v37[1] = a10;
  v38 = (_QWORD *)(a9 + v21[17]);
  *v38 = a11;
  v38[1] = a12;
  return result;
}

uint64_t type metadata accessor for DescriptionView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DescriptionView);
}

double sub_23BF233FC()
{
  double v1;

  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5640);
  sub_23BFF8FF8();
  return v1;
}

uint64_t sub_23BF23450()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5640);
  return sub_23BFF9004();
}

uint64_t sub_23BF234A8()
{
  uint64_t v1;

  type metadata accessor for CGSize(0);
  sub_23BFF8FEC();
  return v1;
}

double sub_23BF234E4()
{
  double v1;

  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5640);
  sub_23BFF8FF8();
  return v1;
}

uint64_t sub_23BF23538()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5640);
  return sub_23BFF9004();
}

uint64_t sub_23BF23590()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5478);
  return sub_23BFF9004();
}

uint64_t sub_23BF235E8()
{
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5478);
  sub_23BFF9010();
  return v1;
}

uint64_t DescriptionView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t OpaqueTypeConformance2;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  _QWORD v44[2];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD v56[2];
  _QWORD v57[2];
  _QWORD v58[2];
  _QWORD v59[2];
  _QWORD v60[2];
  _QWORD v61[3];

  v46 = a1;
  v48 = a2;
  v45 = *(_QWORD *)(a1 + 16);
  sub_23BFF96A0();
  swift_getTupleTypeMetadata2();
  v2 = sub_23BFF9220();
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v2);
  v3 = sub_23BFF90AC();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE35B0);
  sub_23BFF862C();
  sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE54B8);
  sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE54C0);
  sub_23BFF862C();
  v4 = sub_23BFF862C();
  v5 = sub_23BFF862C();
  v6 = sub_23BFF862C();
  v7 = sub_23BFF862C();
  v8 = sub_23BFF862C();
  v61[0] = MEMORY[0x242615198](MEMORY[0x24BDF4700], v3);
  v61[1] = MEMORY[0x24BDEDBB8];
  v9 = MEMORY[0x24BDED308];
  v60[0] = MEMORY[0x242615198](MEMORY[0x24BDED308], v4, v61);
  v60[1] = MEMORY[0x24BDEDB80];
  v59[0] = MEMORY[0x242615198](v9, v5, v60);
  v59[1] = sub_23BF27974();
  v58[0] = MEMORY[0x242615198](v9, v6, v59);
  v58[1] = sub_23BEA1F94(&qword_256AE54D0, &qword_256AE54B8, MEMORY[0x24BDEF370]);
  v57[0] = MEMORY[0x242615198](v9, v7, v58);
  v57[1] = sub_23BEA1F94(&qword_256AE54D8, &qword_256AE54C0, MEMORY[0x24BDF09B0]);
  MEMORY[0x242615198](v9, v8, v57);
  sub_23BFF8944();
  v44[1] = sub_23BFF862C();
  v10 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE54E0);
  sub_23BFF85C0();
  swift_getTupleTypeMetadata2();
  v11 = sub_23BFF9220();
  v12 = MEMORY[0x24BDF5428];
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v11);
  v13 = sub_23BFF90AC();
  v14 = sub_23BFF862C();
  v56[0] = MEMORY[0x242615198](MEMORY[0x24BDF4700], v13);
  v56[1] = MEMORY[0x24BDECC60];
  v15 = MEMORY[0x242615198](v9, v14, v56);
  v52 = v14;
  v53 = v15;
  v16 = MEMORY[0x24261512C](255, &v52, MEMORY[0x24BDF2FE0], 0);
  v52 = v14;
  v53 = v15;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v52 = v16;
  v53 = OpaqueTypeConformance2;
  MEMORY[0x24261512C](255, &v52, MEMORY[0x24BDF29F8], 0);
  v52 = v16;
  v53 = OpaqueTypeConformance2;
  swift_getOpaqueTypeConformance2();
  v18 = sub_23BFF8434();
  v19 = MEMORY[0x242615198](MEMORY[0x24BDEB238], v18);
  v20 = sub_23BEBF0DC();
  v21 = MEMORY[0x24BEE0D00];
  v52 = v18;
  v53 = MEMORY[0x24BEE0D00];
  v54 = v19;
  v55 = v20;
  v22 = MEMORY[0x24261512C](255, &v52, MEMORY[0x24BDF28C0], 0);
  v52 = v18;
  v53 = v21;
  v54 = v19;
  v55 = v20;
  v23 = swift_getOpaqueTypeConformance2();
  v52 = v22;
  v53 = v23;
  v24 = MEMORY[0x24261512C](255, &v52, MEMORY[0x24BDF33A8], 0);
  v25 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE54E8);
  v52 = v22;
  v53 = v23;
  v26 = swift_getOpaqueTypeConformance2();
  v27 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE54F0);
  v28 = sub_23BEA1F94(&qword_256AE54F8, &qword_256AE54F0, MEMORY[0x24BDEB848]);
  v52 = v27;
  v53 = v28;
  v29 = swift_getOpaqueTypeConformance2();
  v52 = v24;
  v53 = v25;
  v54 = v26;
  v55 = v29;
  MEMORY[0x24261512C](255, &v52, MEMORY[0x24BDF3858], 0);
  v52 = v24;
  v53 = v25;
  v54 = v26;
  v55 = v29;
  swift_getOpaqueTypeConformance2();
  v30 = sub_23BFF8644();
  v31 = sub_23BF279B8();
  v32 = MEMORY[0x242615198](MEMORY[0x24BDED358], v30);
  v52 = v10;
  v53 = v30;
  v54 = v31;
  v55 = v32;
  MEMORY[0x24261512C](255, &v52, MEMORY[0x24BDF3650], 0);
  sub_23BFF96A0();
  swift_getTupleTypeMetadata2();
  v33 = sub_23BFF9220();
  MEMORY[0x242615198](v12, v33);
  v34 = sub_23BFF90C4();
  v35 = *(_QWORD *)(v34 - 8);
  MEMORY[0x24BDAC7A8](v34);
  v37 = (char *)v44 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v38);
  v40 = (char *)v44 - v39;
  sub_23BFF88B4();
  sub_23BFF8824();
  v41 = *(_QWORD *)(v46 + 24);
  v49 = v45;
  v50 = v41;
  v51 = v47;
  sub_23BFF90B8();
  MEMORY[0x242615198](MEMORY[0x24BDF4750], v34);
  sub_23BEA72EC((uint64_t)v37, v34, (uint64_t)v40);
  v42 = *(void (**)(char *, uint64_t))(v35 + 8);
  v42(v37, v34);
  sub_23BEA5C0C((uint64_t)v40, v34, v48);
  return ((uint64_t (*)(char *, uint64_t))v42)(v40, v34);
}

uint64_t sub_23BF23D04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t OpaqueTypeConformance2;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(uint64_t, uint64_t);
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void (*v112)(uint64_t, uint64_t);
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void (*v117)(uint64_t, uint64_t);
  void (*v118)(char *, uint64_t, uint64_t);
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t (*v123)(uint64_t, uint64_t);
  char *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void (*v155)(uint64_t, uint64_t);
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD v174[3];
  _QWORD v175[2];
  uint64_t v176[2];
  _QWORD v177[2];
  _QWORD v178[2];
  _QWORD v179[2];
  _QWORD v180[2];
  _QWORD v181[2];
  _QWORD v182[2];
  _QWORD v183[2];
  _QWORD v184[2];
  _QWORD v185[2];
  _QWORD v186[2];
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  _QWORD v191[3];

  v169 = a1;
  v170 = a3;
  v159 = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE54E0);
  MEMORY[0x24BDAC7A8](v5);
  v158 = (uint64_t)&v127 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BFF85C0();
  sub_23BFF96A0();
  swift_getTupleTypeMetadata2();
  v7 = sub_23BFF9220();
  v8 = MEMORY[0x24BDF5428];
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v7);
  v168 = sub_23BFF90AC();
  v161 = a2;
  swift_getTupleTypeMetadata2();
  v9 = sub_23BFF9220();
  MEMORY[0x242615198](v8, v9);
  v10 = sub_23BFF90AC();
  v11 = sub_23BFF862C();
  v191[0] = MEMORY[0x242615198](MEMORY[0x24BDF4700], v10);
  v191[1] = MEMORY[0x24BDECC60];
  v12 = MEMORY[0x242615198](MEMORY[0x24BDED308], v11, v191);
  v187 = v11;
  v188 = v12;
  v13 = MEMORY[0x24261512C](255, &v187, MEMORY[0x24BDF2FE0], 0);
  v187 = v11;
  v188 = v12;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v187 = v13;
  v188 = OpaqueTypeConformance2;
  MEMORY[0x24261512C](255, &v187, MEMORY[0x24BDF29F8], 0);
  v187 = v13;
  v188 = OpaqueTypeConformance2;
  swift_getOpaqueTypeConformance2();
  v15 = sub_23BFF8434();
  v16 = MEMORY[0x242615198](MEMORY[0x24BDEB238], v15);
  v17 = sub_23BEBF0DC();
  v18 = MEMORY[0x24BEE0D00];
  v187 = v15;
  v188 = MEMORY[0x24BEE0D00];
  v189 = v16;
  v190 = v17;
  v19 = MEMORY[0x24261512C](255, &v187, MEMORY[0x24BDF28C0], 0);
  v187 = v15;
  v188 = v18;
  v189 = v16;
  v190 = v17;
  v20 = swift_getOpaqueTypeConformance2();
  v187 = v19;
  v188 = v20;
  v21 = MEMORY[0x24261512C](255, &v187, MEMORY[0x24BDF33A8], 0);
  v22 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE54E8);
  v187 = v19;
  v188 = v20;
  v23 = swift_getOpaqueTypeConformance2();
  v24 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE54F0);
  v25 = sub_23BEA1F94(&qword_256AE54F8, &qword_256AE54F0, MEMORY[0x24BDEB848]);
  v187 = v24;
  v188 = v25;
  v26 = swift_getOpaqueTypeConformance2();
  v187 = v21;
  v188 = v22;
  v189 = v23;
  v190 = v26;
  MEMORY[0x24261512C](255, &v187, MEMORY[0x24BDF3858], 0);
  v187 = v21;
  v188 = v22;
  v189 = v23;
  v190 = v26;
  swift_getOpaqueTypeConformance2();
  v27 = sub_23BFF8644();
  v28 = sub_23BF279B8();
  v29 = MEMORY[0x242615198](MEMORY[0x24BDED358], v27);
  v164 = v27;
  v165 = v5;
  v187 = v5;
  v188 = v27;
  v163 = v28;
  v189 = v28;
  v190 = v29;
  v134 = v29;
  v30 = MEMORY[0x24261512C](0, &v187, MEMORY[0x24BDF3650], 0);
  v130 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v128 = (char *)&v127 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v32);
  v129 = (uint64_t)&v127 - v33;
  v131 = v34;
  v135 = sub_23BFF96A0();
  v157 = *(_QWORD *)(v135 - 8);
  MEMORY[0x24BDAC7A8](v135);
  v133 = (uint64_t)&v127 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v36);
  v132 = (uint64_t)&v127 - v37;
  v166 = type metadata accessor for DescriptionView(0, a2, v170, v38);
  v153 = *(_QWORD *)(v166 - 8);
  v155 = *(void (**)(uint64_t, uint64_t))(v153 + 64);
  MEMORY[0x24BDAC7A8](v166);
  v160 = (char *)&v127 - v39;
  v40 = swift_checkMetadataState();
  v147 = *(_QWORD *)(v40 - 8);
  MEMORY[0x24BDAC7A8](v40);
  v144 = (uint64_t)&v127 - v41;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE35B0);
  v42 = sub_23BFF862C();
  v43 = *(_QWORD *)(v42 - 8);
  v145 = (char *)v42;
  v149 = v43;
  MEMORY[0x24BDAC7A8](v42);
  v143 = (char *)&v127 - v44;
  v45 = sub_23BFF862C();
  v152 = *(_QWORD *)(v45 - 8);
  v150 = v45;
  MEMORY[0x24BDAC7A8](v45);
  v146 = (char *)&v127 - v46;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE54B8);
  v151 = sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE54C0);
  v47 = sub_23BFF862C();
  v154 = *(_QWORD *)(v47 - 8);
  v137 = v47;
  MEMORY[0x24BDAC7A8](v47);
  v148 = (uint64_t)&v127 - v48;
  v49 = sub_23BFF862C();
  v50 = sub_23BFF862C();
  v51 = sub_23BFF862C();
  v52 = sub_23BFF862C();
  v53 = sub_23BFF862C();
  v54 = MEMORY[0x242615198](MEMORY[0x24BDF4700], v40);
  v186[0] = v54;
  v186[1] = MEMORY[0x24BDEDBB8];
  v55 = MEMORY[0x24BDED308];
  v185[0] = MEMORY[0x242615198](MEMORY[0x24BDED308], v49, v186);
  v185[1] = MEMORY[0x24BDEDB80];
  v56 = v55;
  v57 = MEMORY[0x242615198](v55, v50, v185);
  v58 = sub_23BF27974();
  v184[0] = v57;
  v184[1] = v58;
  v59 = MEMORY[0x242615198](v56, v51, v184);
  v141 = sub_23BEA1F94(&qword_256AE54D0, &qword_256AE54B8, MEMORY[0x24BDEF370]);
  v183[0] = v59;
  v183[1] = v141;
  v60 = MEMORY[0x242615198](v56, v52, v183);
  v138 = sub_23BEA1F94(&qword_256AE54D8, &qword_256AE54C0, MEMORY[0x24BDF09B0]);
  v139 = v53;
  v182[0] = v60;
  v182[1] = v138;
  v140 = MEMORY[0x242615198](v56, v53, v182);
  v142 = sub_23BFF8944();
  v168 = sub_23BFF862C();
  v162 = *(_QWORD *)(v168 - 8);
  MEMORY[0x24BDAC7A8](v168);
  v156 = (char *)&v127 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v62);
  v136 = (char *)&v127 - v63;
  MEMORY[0x24BDAC7A8](v64);
  v167 = (uint64_t)&v127 - v65;
  v66 = v144;
  v67 = v166;
  v68 = v169;
  sub_23BF24AF0(v166, v144);
  v69 = v143;
  sub_23BFF8F68();
  (*(void (**)(uint64_t, uint64_t))(v147 + 8))(v66, v40);
  sub_23BFF91CC();
  v70 = sub_23BEA1F94(&qword_256AE35A8, &qword_256AE35B0, MEMORY[0x24BDF1028]);
  v181[0] = v54;
  v181[1] = v70;
  v125 = v145;
  v126 = MEMORY[0x242615198](v56, v145, v181);
  v71 = v146;
  sub_23BFF8EA8();
  (*(void (**)(char *, char *))(v149 + 8))(v69, v125);
  v72 = v153;
  v73 = v160;
  v74 = v67;
  v147 = *(_QWORD *)(v153 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v147)(v160, v68, v67);
  v75 = *(unsigned __int8 *)(v72 + 80);
  v76 = (v75 + 32) & ~v75;
  v144 = v75 | 7;
  v145 = (char *)v155 + v76;
  v77 = swift_allocObject();
  v78 = v161;
  v79 = v170;
  *(_QWORD *)(v77 + 16) = v161;
  *(_QWORD *)(v77 + 24) = v79;
  v149 = v76;
  v153 = *(_QWORD *)(v72 + 32);
  ((void (*)(uint64_t, char *, uint64_t))v153)(v77 + v76, v73, v74);
  v180[0] = v126;
  v180[1] = MEMORY[0x24BDEDBB8];
  v80 = MEMORY[0x24BDED308];
  v81 = v150;
  v82 = MEMORY[0x242615198](MEMORY[0x24BDED308], v150, v180);
  v83 = v148;
  sub_23BFBC8B4((uint64_t)sub_23BF28CDC, v77, v82, v148);
  swift_release();
  (*(void (**)(char *, uint64_t))(v152 + 8))(v71, v81);
  v171 = v78;
  v172 = v79;
  v84 = v169;
  v173 = v169;
  sub_23BFF91C0();
  v179[0] = v82;
  v179[1] = v141;
  v85 = MEMORY[0x242615198](v80, v151, v179);
  v86 = v137;
  v178[0] = v85;
  v178[1] = v138;
  v87 = MEMORY[0x242615198](v80, v137, v178);
  v88 = (uint64_t)v136;
  v89 = v166;
  sub_23BFF8CBC();
  (*(void (**)(uint64_t, uint64_t))(v154 + 8))(v83, v86);
  v90 = MEMORY[0x242615198](MEMORY[0x24BDEF370], v142);
  v177[0] = v87;
  v177[1] = v90;
  v91 = v168;
  v92 = MEMORY[0x242615198](v80, v168, v177);
  sub_23BEA72EC(v88, v91, v167);
  v93 = *(void (**)(uint64_t, uint64_t))(v162 + 8);
  v93(v88, v91);
  v94 = sub_23BF234E4();
  v96 = v95;
  v97 = sub_23BF233FC();
  v154 = v92;
  v155 = v93;
  if (v94 == v97 && v96 == v98)
  {
    v99 = v133;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v130 + 56))(v133, 1, 1, v131);
    v187 = v165;
    v188 = v164;
    v100 = v134;
    v189 = v163;
    v190 = v134;
    swift_getOpaqueTypeConformance2();
  }
  else
  {
    sub_23BF251E8(v89, v158);
    sub_23BF235E8();
    v101 = v160;
    ((void (*)(char *, uint64_t, uint64_t))v147)(v160, v84, v89);
    v102 = swift_allocObject();
    v103 = v170;
    *(_QWORD *)(v102 + 16) = v161;
    *(_QWORD *)(v102 + 24) = v103;
    ((void (*)(uint64_t, char *, uint64_t))v153)(v102 + v149, v101, v89);
    v104 = swift_checkMetadataState();
    v100 = v134;
    v105 = v163;
    v106 = (uint64_t)v128;
    v107 = v165;
    v108 = v158;
    sub_23BFF8EB4();
    swift_release();
    swift_release();
    swift_release();
    sub_23BE9F3A0(v108, &qword_256AE54E0);
    v187 = v107;
    v188 = v104;
    v189 = v105;
    v190 = v100;
    swift_getOpaqueTypeConformance2();
    v109 = v129;
    v110 = v131;
    sub_23BEA72EC(v106, v131, v129);
    v111 = v130;
    v112 = *(void (**)(uint64_t, uint64_t))(v130 + 8);
    v112(v106, v110);
    v99 = v133;
    sub_23BEA5C0C(v109, v110, v133);
    v112(v109, v110);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v111 + 56))(v99, 0, 1, v110);
  }
  v113 = v135;
  v114 = v132;
  v115 = v162;
  sub_23BF3FAD4(v99, v132);
  v116 = v157;
  v117 = *(void (**)(uint64_t, uint64_t))(v157 + 8);
  v117(v99, v113);
  v118 = *(void (**)(char *, uint64_t, uint64_t))(v115 + 16);
  v119 = (uint64_t)v156;
  v120 = v167;
  v121 = v168;
  v118(v156, v167, v168);
  v176[0] = v119;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v116 + 16))(v99, v114, v113);
  v176[1] = v99;
  v175[0] = v121;
  v175[1] = v113;
  v174[1] = v154;
  v187 = v165;
  v188 = v164;
  v189 = v163;
  v190 = v100;
  v174[0] = swift_getOpaqueTypeConformance2();
  v174[2] = MEMORY[0x242615198](MEMORY[0x24BDF5578], v113, v174);
  sub_23BF93EF0(v176, 2uLL, (uint64_t)v175);
  v117(v114, v113);
  v122 = v120;
  v123 = (uint64_t (*)(uint64_t, uint64_t))v155;
  v155(v122, v121);
  v117(v99, v113);
  return v123(v119, v121);
}

uint64_t sub_23BF24AF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  void (*v15)(_BYTE *, uint64_t);
  _BYTE v17[16];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(_QWORD *)(a1 + 16);
  sub_23BFF96A0();
  swift_getTupleTypeMetadata2();
  v6 = sub_23BFF9220();
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v6);
  v7 = sub_23BFF90AC();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = &v17[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v11);
  v13 = &v17[-v12];
  sub_23BFF88A8();
  v14 = *(_QWORD *)(a1 + 24);
  v18 = v5;
  v19 = v14;
  v20 = v2;
  sub_23BFF90A0();
  MEMORY[0x242615198](MEMORY[0x24BDF4700], v7);
  sub_23BEA72EC((uint64_t)v10, v7, (uint64_t)v13);
  v15 = *(void (**)(_BYTE *, uint64_t))(v8 + 8);
  v15(v10, v7);
  sub_23BEA5C0C((uint64_t)v13, v7, a2);
  return ((uint64_t (*)(_BYTE *, uint64_t))v15)(v13, v7);
}

uint64_t sub_23BF24C70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD v64[2];
  _QWORD v65[2];
  _QWORD v66[2];
  _QWORD v67[2];
  _QWORD v68[3];

  v62 = a3;
  v46 = a1;
  v63 = a5;
  v61 = a2;
  v5 = type metadata accessor for DescriptionView(0, a2, a3, a4);
  v59 = *(_QWORD *)(v5 - 8);
  v47 = v5;
  v60 = *(_QWORD *)(v59 + 64);
  MEMORY[0x24BDAC7A8](v5);
  v58 = (char *)&v45 - v6;
  sub_23BFF96A0();
  swift_getTupleTypeMetadata2();
  v7 = sub_23BFF9220();
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v7);
  v8 = sub_23BFF90AC();
  v49 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v45 - v9;
  v11 = sub_23BFF862C();
  v51 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v45 - v12;
  v14 = sub_23BFF862C();
  v52 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v45 - v15;
  v17 = sub_23BFF862C();
  v56 = *(_QWORD *)(v17 - 8);
  v53 = v17;
  MEMORY[0x24BDAC7A8](v17);
  v48 = (char *)&v45 - v18;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE54B8);
  v54 = sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE54C0);
  v19 = sub_23BFF862C();
  v57 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v50 = (uint64_t)&v45 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v55 = (uint64_t)&v45 - v22;
  sub_23BF24AF0(v5, (uint64_t)v10);
  sub_23BFF91CC();
  v44 = MEMORY[0x242615198](MEMORY[0x24BDF4700], v8);
  sub_23BFF8EA8();
  (*(void (**)(char *, uint64_t))(v49 + 8))(v10, v8);
  v68[0] = v44;
  v68[1] = MEMORY[0x24BDEDBB8];
  v23 = MEMORY[0x24BDED308];
  v24 = MEMORY[0x242615198](MEMORY[0x24BDED308], v11, v68);
  sub_23BFF8F50();
  (*(void (**)(char *, uint64_t))(v51 + 8))(v13, v11);
  v67[0] = v24;
  v67[1] = MEMORY[0x24BDEDB80];
  v25 = MEMORY[0x242615198](v23, v14, v67);
  v26 = v48;
  sub_23BFF8EC0();
  (*(void (**)(char *, uint64_t))(v52 + 8))(v16, v14);
  v28 = v58;
  v27 = v59;
  v29 = v47;
  (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v58, v46, v47);
  v30 = v27;
  v31 = (*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
  v32 = swift_allocObject();
  v33 = v62;
  *(_QWORD *)(v32 + 16) = v61;
  *(_QWORD *)(v32 + 24) = v33;
  (*(void (**)(unint64_t, char *, uint64_t))(v30 + 32))(v32 + v31, v28, v29);
  v34 = sub_23BF27974();
  v66[0] = v25;
  v66[1] = v34;
  v35 = v53;
  v36 = MEMORY[0x242615198](v23, v53, v66);
  v37 = v50;
  sub_23BFBC8B4((uint64_t)sub_23BF291C4, v32, v36, v50);
  swift_release();
  (*(void (**)(char *, uint64_t))(v56 + 8))(v26, v35);
  v38 = sub_23BEA1F94(&qword_256AE54D0, &qword_256AE54B8, MEMORY[0x24BDEF370]);
  v65[0] = v36;
  v65[1] = v38;
  v39 = MEMORY[0x242615198](v23, v54, v65);
  v40 = sub_23BEA1F94(&qword_256AE54D8, &qword_256AE54C0, MEMORY[0x24BDF09B0]);
  v64[0] = v39;
  v64[1] = v40;
  MEMORY[0x242615198](v23, v19, v64);
  v41 = v55;
  sub_23BEA72EC(v37, v19, v55);
  v42 = *(void (**)(uint64_t, uint64_t))(v57 + 8);
  v42(v37, v19);
  sub_23BEA5C0C(v41, v19, v63);
  return ((uint64_t (*)(uint64_t, uint64_t))v42)(v41, v19);
}

uint64_t sub_23BF251E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t *v14;

  *(_QWORD *)a2 = sub_23BFF8848();
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE55B8);
  v7 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  sub_23BF26D30(v2, v7, v6, v8, a2 + *(int *)(v5 + 44));
  v9 = sub_23BFF91C0();
  v11 = v10;
  v12 = a2 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AE54E0) + 36);
  sub_23BF27448(v7, v6, v12);
  result = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5520);
  v14 = (uint64_t *)(v12 + *(int *)(result + 36));
  *v14 = v9;
  v14[1] = v11;
  return result;
}

uint64_t sub_23BF252B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t OpaqueTypeConformance2;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  void (*v34)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD v45[2];

  v37 = a4;
  sub_23BFF85C0();
  sub_23BFF96A0();
  swift_getTupleTypeMetadata2();
  v7 = sub_23BFF9220();
  v8 = MEMORY[0x24BDF5428];
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v7);
  sub_23BFF90AC();
  swift_getTupleTypeMetadata2();
  v9 = sub_23BFF9220();
  MEMORY[0x242615198](v8, v9);
  v10 = sub_23BFF90AC();
  v11 = sub_23BFF862C();
  v45[0] = MEMORY[0x242615198](MEMORY[0x24BDF4700], v10);
  v45[1] = MEMORY[0x24BDECC60];
  v12 = MEMORY[0x242615198](MEMORY[0x24BDED308], v11, v45);
  v41 = v11;
  v42 = v12;
  v13 = MEMORY[0x24261512C](255, &v41, MEMORY[0x24BDF2FE0], 0);
  v41 = v11;
  v42 = v12;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v41 = v13;
  v42 = OpaqueTypeConformance2;
  MEMORY[0x24261512C](255, &v41, MEMORY[0x24BDF29F8], 0);
  v41 = v13;
  v42 = OpaqueTypeConformance2;
  swift_getOpaqueTypeConformance2();
  v15 = sub_23BFF8434();
  v16 = MEMORY[0x242615198](MEMORY[0x24BDEB238], v15);
  v17 = sub_23BEBF0DC();
  v18 = MEMORY[0x24BEE0D00];
  v41 = v15;
  v42 = MEMORY[0x24BEE0D00];
  v43 = v16;
  v44 = v17;
  v19 = MEMORY[0x24261512C](255, &v41, MEMORY[0x24BDF28C0], 0);
  v41 = v15;
  v42 = v18;
  v43 = v16;
  v44 = v17;
  v20 = swift_getOpaqueTypeConformance2();
  v41 = v19;
  v42 = v20;
  v21 = MEMORY[0x24261512C](255, &v41, MEMORY[0x24BDF33A8], 0);
  v22 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE54E8);
  v41 = v19;
  v42 = v20;
  v23 = swift_getOpaqueTypeConformance2();
  v24 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE54F0);
  v25 = sub_23BEA1F94(&qword_256AE54F8, &qword_256AE54F0, MEMORY[0x24BDEB848]);
  v41 = v24;
  v42 = v25;
  v26 = swift_getOpaqueTypeConformance2();
  v41 = v21;
  v42 = v22;
  v43 = v23;
  v44 = v26;
  MEMORY[0x24261512C](255, &v41, MEMORY[0x24BDF3858], 0);
  v41 = v21;
  v42 = v22;
  v43 = v23;
  v44 = v26;
  swift_getOpaqueTypeConformance2();
  v27 = sub_23BFF8644();
  v28 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v30 = (char *)&v36 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v31);
  v33 = (char *)&v36 - v32;
  v38 = a2;
  v39 = a3;
  v40 = a1;
  sub_23BFF8638();
  MEMORY[0x242615198](MEMORY[0x24BDED358], v27);
  sub_23BEA72EC((uint64_t)v30, v27, (uint64_t)v33);
  v34 = *(void (**)(char *, uint64_t))(v28 + 8);
  v34(v30, v27);
  sub_23BEA5C0C((uint64_t)v33, v27, v37);
  return ((uint64_t (*)(char *, uint64_t))v34)(v33, v27);
}

uint64_t sub_23BF256A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t OpaqueTypeConformance2;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t);
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  _QWORD v95[2];

  v83 = a4;
  v84 = a3;
  v81 = a1;
  v82 = sub_23BFF8818();
  v80 = *(_QWORD *)(v82 - 8);
  MEMORY[0x24BDAC7A8](v82);
  v79 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = a2;
  sub_23BFF96A0();
  swift_getTupleTypeMetadata2();
  v6 = sub_23BFF9220();
  v7 = MEMORY[0x24BDF5428];
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v6);
  sub_23BFF90AC();
  swift_getTupleTypeMetadata2();
  v8 = sub_23BFF9220();
  MEMORY[0x242615198](v7, v8);
  v9 = sub_23BFF90AC();
  v10 = sub_23BFF862C();
  v95[0] = MEMORY[0x242615198](MEMORY[0x24BDF4700], v9);
  v95[1] = MEMORY[0x24BDECC60];
  v11 = MEMORY[0x242615198](MEMORY[0x24BDED308], v10, v95);
  v91 = v10;
  v92 = v11;
  v12 = MEMORY[0x24261512C](255, &v91, MEMORY[0x24BDF2FE0], 0);
  v91 = v10;
  v92 = v11;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v91 = v12;
  v92 = OpaqueTypeConformance2;
  v75 = MEMORY[0x24261512C](255, &v91, MEMORY[0x24BDF29F8], 0);
  v91 = v12;
  v92 = OpaqueTypeConformance2;
  v73 = swift_getOpaqueTypeConformance2();
  v14 = sub_23BFF8434();
  v76 = *(_QWORD *)(v14 - 8);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v61 - v16;
  v18 = MEMORY[0x242615198](MEMORY[0x24BDEB238], v14, v15);
  v19 = sub_23BEBF0DC();
  v91 = v14;
  v92 = MEMORY[0x24BEE0D00];
  v20 = MEMORY[0x24BEE0D00];
  v93 = v18;
  v94 = v19;
  v21 = v18;
  v72 = v18;
  v22 = v19;
  v71 = v19;
  v23 = MEMORY[0x24261512C](0, &v91, MEMORY[0x24BDF28C0], 0);
  v77 = *(_QWORD *)(v23 - 8);
  v24 = v23;
  MEMORY[0x24BDAC7A8](v23);
  v26 = (char *)&v61 - v25;
  v91 = v14;
  v92 = v20;
  v93 = v21;
  v94 = v22;
  v27 = swift_getOpaqueTypeConformance2();
  v91 = v24;
  v92 = v27;
  v68 = v24;
  v28 = v27;
  v69 = v27;
  v29 = MEMORY[0x24261512C](0, &v91, MEMORY[0x24BDF33A8], 0);
  v74 = *(_QWORD *)(v29 - 8);
  v30 = v29;
  v67 = v29;
  MEMORY[0x24BDAC7A8](v29);
  v32 = (char *)&v61 - v31;
  v33 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE54E8);
  v66 = v33;
  v91 = v24;
  v92 = v28;
  v34 = swift_getOpaqueTypeConformance2();
  v65 = v34;
  v35 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE54F0);
  v36 = sub_23BEA1F94(&qword_256AE54F8, &qword_256AE54F0, MEMORY[0x24BDEB848]);
  v91 = v35;
  v92 = v36;
  v64 = swift_getOpaqueTypeConformance2();
  v91 = v30;
  v92 = v33;
  v93 = v34;
  v94 = v64;
  v37 = MEMORY[0x24261512C](0, &v91, MEMORY[0x24BDF3858], 0);
  v70 = *(_QWORD *)(v37 - 8);
  MEMORY[0x24BDAC7A8](v37);
  v62 = (char *)&v61 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v39);
  v63 = (uint64_t)&v61 - v40;
  sub_23BFF8B3C();
  v41 = v78;
  v42 = v84;
  v88 = v78;
  v89 = v84;
  v43 = v81;
  v90 = v81;
  sub_23BFF8440();
  v45 = (uint64_t *)(v43 + *(int *)(type metadata accessor for DescriptionView(0, v41, v42, v44) + 56));
  v47 = *v45;
  v46 = v45[1];
  v91 = v47;
  v92 = v46;
  sub_23BFF8DAC();
  (*(void (**)(char *, uint64_t))(v76 + 8))(v17, v14);
  v48 = v80;
  v49 = v79;
  v50 = v82;
  (*(void (**)(char *, _QWORD, uint64_t))(v80 + 104))(v79, *MEMORY[0x24BDEE5F0], v82);
  v51 = v32;
  v52 = v68;
  sub_23BED1564();
  (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v50);
  (*(void (**)(char *, uint64_t))(v77 + 8))(v26, v52);
  v85 = v41;
  v86 = v84;
  v87 = v43;
  v53 = (uint64_t)v62;
  v54 = v67;
  v55 = v66;
  v56 = v65;
  v57 = v64;
  sub_23BFF8EFC();
  (*(void (**)(char *, uint64_t))(v74 + 8))(v51, v54);
  v91 = v54;
  v92 = v55;
  v93 = v56;
  v94 = v57;
  swift_getOpaqueTypeConformance2();
  v58 = v63;
  sub_23BEA72EC(v53, v37, v63);
  v59 = *(void (**)(uint64_t, uint64_t))(v70 + 8);
  v59(v53, v37);
  sub_23BEA5C0C(v58, v37, v83);
  return ((uint64_t (*)(uint64_t, uint64_t))v59)(v58, v37);
}

uint64_t sub_23BF25D34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t OpaqueTypeConformance2;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  unsigned __int8 v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  _QWORD v37[2];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[3];

  v44 = a1;
  v45 = a3;
  v53 = a4;
  v5 = sub_23BFF8A88();
  v51 = *(_QWORD *)(v5 - 8);
  v52 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v50 = (char *)v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_23BFF8998();
  v48 = *(_QWORD *)(v7 - 8);
  v49 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v47 = (char *)v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = a2;
  sub_23BFF96A0();
  swift_getTupleTypeMetadata2();
  v9 = sub_23BFF9220();
  v10 = MEMORY[0x24BDF5428];
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v9);
  sub_23BFF90AC();
  swift_getTupleTypeMetadata2();
  v11 = sub_23BFF9220();
  v37[1] = MEMORY[0x242615198](v10, v11);
  v12 = sub_23BFF90AC();
  v39 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v37 - v13;
  v15 = sub_23BFF862C();
  v40 = *(_QWORD *)(v15 - 8);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)v37 - v17;
  v37[0] = MEMORY[0x242615198](MEMORY[0x24BDF4700], v12, v16);
  v59[0] = v37[0];
  v59[1] = MEMORY[0x24BDECC60];
  v19 = MEMORY[0x242615198](MEMORY[0x24BDED308], v15, v59);
  v57 = v15;
  v58 = v19;
  v20 = MEMORY[0x24261512C](0, &v57, MEMORY[0x24BDF2FE0], 0);
  v46 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)v37 - v21;
  v57 = v15;
  v58 = v19;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v57 = v20;
  v58 = OpaqueTypeConformance2;
  v41 = OpaqueTypeConformance2;
  v24 = MEMORY[0x24261512C](0, &v57, MEMORY[0x24BDF29F8], 0);
  v43 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)v37 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v27);
  v42 = (uint64_t)v37 - v28;
  sub_23BFF88A8();
  v54 = v38;
  v55 = v45;
  v56 = v44;
  sub_23BFF90A0();
  sub_23BFF8B60();
  sub_23BFF8EF0();
  (*(void (**)(char *, uint64_t))(v39 + 8))(v14, v12);
  v29 = v47;
  sub_23BFF898C();
  sub_23BFF8B3C();
  sub_23BFF8E24();
  (*(void (**)(char *, uint64_t))(v48 + 8))(v29, v49);
  v30 = v15;
  v31 = v50;
  (*(void (**)(char *, uint64_t))(v40 + 8))(v18, v30);
  sub_23BFF8A7C();
  LOBYTE(v29) = sub_23BFF8B3C();
  v32 = sub_23BFF8B24();
  sub_23BFF8B30();
  sub_23BFF8B30();
  if (sub_23BFF8B30() != v29)
    sub_23BFF8B30();
  sub_23BFF8B30();
  if (sub_23BFF8B30() != v32)
    sub_23BFF8B30();
  v33 = v41;
  sub_23BFF8DB8();
  (*(void (**)(char *, uint64_t))(v51 + 8))(v31, v52);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v22, v20);
  v57 = v20;
  v58 = v33;
  swift_getOpaqueTypeConformance2();
  v34 = v42;
  sub_23BEA72EC((uint64_t)v26, v24, v42);
  v35 = *(void (**)(char *, uint64_t))(v43 + 8);
  v35(v26, v24);
  sub_23BEA5C0C(v34, v24, v53);
  return ((uint64_t (*)(uint64_t, uint64_t))v35)(v34, v24);
}

uint64_t sub_23BF26230@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t (*v26)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  uint64_t v37[2];

  v33 = a4;
  v32 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v31 = (uint64_t)&v28 - v10;
  sub_23BFF96A0();
  swift_getTupleTypeMetadata2();
  v11 = sub_23BFF9220();
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v11);
  v12 = sub_23BFF90AC();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v28 - v17;
  v20 = type metadata accessor for DescriptionView(0, a2, a3, v19);
  sub_23BF24AF0(v20, (uint64_t)v15);
  v29 = MEMORY[0x242615198](MEMORY[0x24BDF4700], v12);
  sub_23BEA72EC((uint64_t)v15, v12, (uint64_t)v18);
  v30 = *(uint64_t (**)(char *, uint64_t))(v13 + 8);
  v21 = v30(v15, v12);
  (*(void (**)(uint64_t))(a1 + *(int *)(v20 + 64)))(v21);
  v22 = v31;
  v23 = a3;
  sub_23BEA72EC((uint64_t)v8, a2, v31);
  v24 = v32;
  v25 = *(void (**)(char *, uint64_t))(v32 + 8);
  v25(v8, a2);
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v15, v18, v12);
  v37[0] = (uint64_t)v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v8, v22, a2);
  v37[1] = (uint64_t)v8;
  v36[0] = v12;
  v36[1] = a2;
  v34 = v29;
  v35 = v23;
  sub_23BF93EF0(v37, 2uLL, (uint64_t)v36);
  v25((char *)v22, a2);
  v26 = v30;
  v30(v18, v12);
  v25(v8, a2);
  return v26(v15, v12);
}

uint64_t sub_23BF26494(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE v13[16];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = sub_23BFF89C8();
  MEMORY[0x24BDAC7A8](v6);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE54F0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = &v13[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_23BFF89BC();
  v14 = a2;
  v15 = a3;
  v16 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3910);
  sub_23BEA1F94(&qword_256AE3920, &qword_256AE3910, MEMORY[0x24BDF43B0]);
  sub_23BFF8458();
  v11 = sub_23BEA1F94(&qword_256AE54F8, &qword_256AE54F0, MEMORY[0x24BDEB848]);
  MEMORY[0x242613D7C](v10, v7, v11);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_23BF265F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  _BYTE *v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE v15[16];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v7 = type metadata accessor for DescriptionView(0, a2, a3, a4);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = &v15[-v10];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v8 + 16))(&v15[-v10], a1, v7, v9);
  v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = a2;
  *(_QWORD *)(v13 + 24) = a3;
  (*(void (**)(unint64_t, _BYTE *, uint64_t))(v8 + 32))(v13 + v12, v11, v7);
  v16 = a2;
  v17 = a3;
  v18 = a1;
  return sub_23BFF9034();
}

uint64_t sub_23BF26700@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  _QWORD v31[4];

  v8 = sub_23BFF8368();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_23BFF93C4();
  MEMORY[0x24BDAC7A8](v12);
  sub_23BFF93B8();
  if (qword_256AE3368 != -1)
    swift_once();
  v14 = (void *)qword_256B023E0;
  v15 = type metadata accessor for DescriptionView(0, a2, a3, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1 + *(int *)(v15 + 60), v8);
  v16 = v14;
  v31[1] = sub_23BFF93DC();
  v31[2] = v17;
  sub_23BEBF0DC();
  v18 = sub_23BFF8C74();
  v20 = v19;
  v22 = v21 & 1;
  v23 = sub_23BFF8C50();
  v25 = v24;
  v27 = v26;
  v29 = v28;
  sub_23BEA0F64(v18, v20, v22);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a4 = v23;
  *(_QWORD *)(a4 + 8) = v25;
  *(_BYTE *)(a4 + 16) = v27 & 1;
  *(_QWORD *)(a4 + 24) = v29;
  return result;
}

uint64_t sub_23BF268BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(void);
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t);
  uint64_t v52;
  char v53;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD v67[3];
  _QWORD v68[2];
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73[5];

  v6 = a1;
  v57 = a1;
  v66 = a4;
  v59 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v55 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v56 = (uint64_t)&v55 - v9;
  v65 = sub_23BFF96A0();
  v60 = *(_QWORD *)(v65 - 8);
  MEMORY[0x24BDAC7A8](v65);
  v64 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v62 = (uint64_t)&v55 - v12;
  v13 = sub_23BFF8BE4();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = a2;
  v63 = a3;
  v18 = type metadata accessor for DescriptionView(0, a2, a3, v17);
  v19 = (*(uint64_t (**)(void))(v6 + *(int *)(v18 + 52)))();
  v21 = v20;
  v23 = v22 & 1;
  sub_23BFF8BB4();
  (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v16, *MEMORY[0x24BDF17C8], v13);
  sub_23BFF8BF0();
  swift_release();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  v24 = sub_23BFF8C5C();
  v26 = v25;
  LOBYTE(v16) = v27;
  swift_release();
  LOBYTE(v6) = v16 & 1;
  sub_23BEA0F64(v19, v21, v23);
  swift_bridgeObjectRelease();
  LODWORD(v69) = sub_23BFF8A1C();
  v28 = sub_23BFF8C2C();
  v30 = v29;
  v58 = v31;
  v33 = v32;
  v34 = v57;
  sub_23BEA0F64(v24, v26, v6);
  swift_bridgeObjectRelease();
  v35 = sub_23BF234E4();
  v37 = v36;
  v38 = sub_23BF233FC();
  v40 = 1;
  if (v35 == v38)
  {
    v42 = v63;
    v41 = (uint64_t)v64;
    v43 = v61;
    v44 = v59;
    if (v37 == v39)
    {
      v45 = *(void (**)(void))(v34 + *(int *)(v18 + 64));
      v46 = (uint64_t)v55;
      v45();
      v47 = v56;
      sub_23BEA72EC(v46, v43, v56);
      v48 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
      v48(v46, v43);
      sub_23BEA5C0C(v47, v43, v41);
      v48(v47, v43);
      v40 = 0;
    }
  }
  else
  {
    v42 = v63;
    v41 = (uint64_t)v64;
    v43 = v61;
    v44 = v59;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v44 + 56))(v41, v40, 1, v43);
  v49 = v62;
  sub_23BF3FAD4(v41, v62);
  v50 = v60;
  v51 = *(void (**)(uint64_t, uint64_t))(v60 + 8);
  v52 = v65;
  v51(v41, v65);
  v53 = v58 & 1;
  v69 = v28;
  v70 = v30;
  v71 = v58 & 1;
  v72 = v33;
  v73[0] = (uint64_t)&v69;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 16))(v41, v49, v52);
  v73[1] = v41;
  sub_23BEA0EAC(v28, v30, v53);
  swift_bridgeObjectRetain();
  v68[0] = MEMORY[0x24BDF1FA8];
  v68[1] = v52;
  v67[0] = v42;
  v67[1] = MEMORY[0x24BDF1F80];
  v67[2] = MEMORY[0x242615198](MEMORY[0x24BDF5578], v52, v67);
  sub_23BF93EF0(v73, 2uLL, (uint64_t)v68);
  v51(v49, v52);
  sub_23BEA0F64(v28, v30, v53);
  swift_bridgeObjectRelease();
  v51(v41, v52);
  sub_23BEA0F64(v69, v70, v71);
  return swift_bridgeObjectRelease();
}

uint64_t sub_23BF26D30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;
  unsigned __int8 v45;
  uint64_t v46;
  uint64_t v47;

  v35 = a2;
  v36 = a3;
  v7 = type metadata accessor for DescriptionView(0, a2, a3, a4);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v27 - v9;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE55C8);
  v38 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v37 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v34 = (char *)&v27 - v14;
  sub_23BFF91C0();
  sub_23BFF84D0();
  v33 = v42;
  v32 = v43;
  v31 = v44;
  v30 = v45;
  v29 = v46;
  v28 = v47;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  v15 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v16 = swift_allocObject();
  v17 = v35;
  v18 = v36;
  *(_QWORD *)(v16 + 16) = v35;
  *(_QWORD *)(v16 + 24) = v18;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v16 + v15, v10, v7);
  v39 = v17;
  v40 = v18;
  v41 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE55D0);
  sub_23BF28ED4();
  v19 = v34;
  sub_23BFF9034();
  v20 = v37;
  v21 = v38;
  v22 = *(void (**)(char *, char *, uint64_t))(v38 + 16);
  v22(v37, v19, v11);
  *(_QWORD *)a5 = 0;
  *(_BYTE *)(a5 + 8) = 1;
  *(_QWORD *)(a5 + 16) = v33;
  *(_BYTE *)(a5 + 24) = v32;
  *(_QWORD *)(a5 + 32) = v31;
  *(_BYTE *)(a5 + 40) = v30;
  v23 = v28;
  *(_QWORD *)(a5 + 48) = v29;
  *(_QWORD *)(a5 + 56) = v23;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5630);
  v22((char *)(a5 + *(int *)(v24 + 48)), v20, v11);
  v25 = *(void (**)(char *, uint64_t))(v21 + 8);
  v25(v19, v11);
  return ((uint64_t (*)(char *, uint64_t))v25)(v20, v11);
}

uint64_t sub_23BF26FBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t KeyPath;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v48 = a1;
  v55 = a4;
  v6 = sub_23BFF8BE4();
  v53 = *(_QWORD *)(v6 - 8);
  v54 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v52 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5608);
  MEMORY[0x24BDAC7A8](v49);
  v9 = (uint64_t *)((char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5638);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_23BFF8368();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_23BFF93C4();
  MEMORY[0x24BDAC7A8](v17);
  v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE55F8);
  MEMORY[0x24BDAC7A8](v47);
  v19 = (char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE55E8);
  MEMORY[0x24BDAC7A8](v50);
  v51 = (uint64_t)&v47 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BFF93B8();
  if (qword_256AE3368 != -1)
    swift_once();
  v22 = (void *)qword_256B023E0;
  v23 = type metadata accessor for DescriptionView(0, a2, a3, v21);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v48 + *(int *)(v23 + 60), v13);
  v24 = v22;
  v56 = sub_23BFF93DC();
  v57 = v25;
  sub_23BEBF0DC();
  v26 = sub_23BFF8C74();
  v28 = v27;
  v30 = v29;
  v32 = v31 & 1;
  v33 = *MEMORY[0x24BDF1D90];
  v34 = sub_23BFF8C44();
  v35 = *(_QWORD *)(v34 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 104))(v12, v33, v34);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v12, 0, 1, v34);
  KeyPath = swift_getKeyPath();
  sub_23BE9F190((uint64_t)v12, (uint64_t)v9 + *(int *)(v49 + 28), &qword_256AE5638);
  *v9 = KeyPath;
  sub_23BE9F190((uint64_t)v9, (uint64_t)&v19[*(int *)(v47 + 36)], &qword_256AE5608);
  *(_QWORD *)v19 = v26;
  *((_QWORD *)v19 + 1) = v28;
  v19[16] = v32;
  *((_QWORD *)v19 + 3) = v30;
  sub_23BEA0EAC(v26, v28, v32);
  swift_bridgeObjectRetain();
  sub_23BE9F3A0((uint64_t)v9, &qword_256AE5608);
  sub_23BE9F3A0((uint64_t)v12, &qword_256AE5638);
  sub_23BEA0F64(v26, v28, v32);
  swift_bridgeObjectRelease();
  sub_23BFF8BB4();
  sub_23BFF8BC0();
  swift_release();
  v38 = v52;
  v37 = v53;
  v39 = v54;
  (*(void (**)(char *, _QWORD, uint64_t))(v53 + 104))(v52, *MEMORY[0x24BDF17C8], v54);
  v40 = sub_23BFF8BF0();
  swift_release();
  (*(void (**)(char *, uint64_t))(v37 + 8))(v38, v39);
  v41 = swift_getKeyPath();
  v42 = v51;
  sub_23BE9F190((uint64_t)v19, v51, &qword_256AE55F8);
  v43 = (uint64_t *)(v42 + *(int *)(v50 + 36));
  *v43 = v41;
  v43[1] = v40;
  sub_23BE9F3A0((uint64_t)v19, &qword_256AE55F8);
  v44 = sub_23BFF8F98();
  v45 = v55;
  sub_23BE9F190(v42, v55, &qword_256AE55E8);
  *(_QWORD *)(v45 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AE55D0) + 36)) = v44;
  return sub_23BE9F3A0(v42, &qword_256AE55E8);
}

uint64_t sub_23BF27448@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  unsigned __int8 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v6 = sub_23BFF86E0();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_23BFF91E4();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_23BFF8848();
  sub_23BF27624(a1, a2, (uint64_t)&v29);
  v13 = v29;
  v27 = v30;
  v14 = v31;
  v15 = v32;
  v16 = v33;
  v17 = v34;
  v18 = v35;
  v26 = v36;
  v19 = v39;
  v24 = v38;
  v25 = v37;
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, *MEMORY[0x24BDF50A0], v9);
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v8, v12, v9);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE55C0);
  sub_23BF28DE0((uint64_t)v8, a3 + *(int *)(v20 + 36));
  *(_QWORD *)a3 = v28;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = v13;
  *(_OWORD *)(a3 + 32) = v27;
  *(_QWORD *)(a3 + 48) = v14;
  *(_QWORD *)(a3 + 56) = v15;
  *(_QWORD *)(a3 + 64) = v16;
  *(_BYTE *)(a3 + 72) = v17;
  *(_QWORD *)(a3 + 80) = v18;
  *(_BYTE *)(a3 + 88) = v26;
  v21 = v24;
  *(_QWORD *)(a3 + 96) = v25;
  *(_QWORD *)(a3 + 104) = v21;
  *(_QWORD *)(a3 + 112) = v19;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_23BF28E24((uint64_t)v8);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  swift_release();
  return swift_bridgeObjectRelease();
}

double sub_23BF27624@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  void (*v17)(char *, uint64_t);
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double result;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;

  v6 = sub_23BFF8608();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v30 - v11;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5170);
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_23BFFF250;
  *(_QWORD *)(v13 + 32) = sub_23BFF8F8C();
  *(_QWORD *)(v13 + 40) = sub_23BFF8F80();
  v35 = v13;
  sub_23BFF9478();
  *(_QWORD *)&v30 = v35;
  type metadata accessor for DescriptionView(0, a1, a2, v14);
  sub_23BFCC6C8((uint64_t)v12);
  v15 = *MEMORY[0x24BDED100];
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 104);
  v16(v9, v15, v6);
  LOBYTE(v13) = sub_23BFF85FC();
  v17 = *(void (**)(char *, uint64_t))(v7 + 8);
  v17(v9, v6);
  v17(v12, v6);
  if ((v13 & 1) != 0)
    sub_23BFF9268();
  else
    sub_23BFF9274();
  sub_23BFCC6C8((uint64_t)v12);
  v16(v9, v15, v6);
  v18 = sub_23BFF85FC();
  v17(v9, v6);
  v17(v12, v6);
  if ((v18 & 1) != 0)
    sub_23BFF9274();
  else
    sub_23BFF9268();
  MEMORY[0x2426144E4](v30);
  sub_23BFF85B4();
  v19 = v31;
  v30 = v32;
  v20 = v33;
  v21 = v34;
  sub_23BFF91C0();
  sub_23BFF84D0();
  v22 = v35;
  v23 = v36;
  v24 = v37;
  v25 = v38;
  v26 = v39;
  v27 = v40;
  v28 = sub_23BFF8F98();
  *(_QWORD *)a3 = v19;
  result = *(double *)&v30;
  *(_OWORD *)(a3 + 8) = v30;
  *(_QWORD *)(a3 + 24) = v20;
  *(_QWORD *)(a3 + 32) = v21;
  *(_QWORD *)(a3 + 40) = v22;
  *(_BYTE *)(a3 + 48) = v23;
  *(_QWORD *)(a3 + 56) = v24;
  *(_BYTE *)(a3 + 64) = v25;
  *(_QWORD *)(a3 + 72) = v26;
  *(_QWORD *)(a3 + 80) = v27;
  *(_QWORD *)(a3 + 88) = v28;
  return result;
}

uint64_t sub_23BF278B4()
{
  return sub_23BFF8758();
}

uint64_t sub_23BF278D4()
{
  return sub_23BFF8758();
}

uint64_t sub_23BF278F4(uint64_t a1)
{
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = sub_23BFF8608();
  v3 = MEMORY[0x24BDAC7A8](v2);
  (*(void (**)(char *, uint64_t, __n128))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  return sub_23BFF8764();
}

unint64_t sub_23BF27974()
{
  unint64_t result;

  result = qword_256AE54C8;
  if (!qword_256AE54C8)
  {
    result = MEMORY[0x242615198](MEMORY[0x24BDED590], MEMORY[0x24BDED5B8]);
    atomic_store(result, (unint64_t *)&qword_256AE54C8);
  }
  return result;
}

unint64_t sub_23BF279B8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AE5500;
  if (!qword_256AE5500)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE54E0);
    v2[0] = sub_23BEA1F94(&qword_256AE5508, &qword_256AE5510, MEMORY[0x24BDF4498]);
    v2[1] = sub_23BEA1F94(&qword_256AE5518, &qword_256AE5520, MEMORY[0x24BDEF370]);
    result = MEMORY[0x242615198](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AE5500);
  }
  return result;
}

uint64_t sub_23BF27A54@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_23BF23D04(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_23BF27A60()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_23BF27A94()
{
  unint64_t v0;
  unint64_t v1;

  sub_23BF286D8();
  if (v0 <= 0x3F)
  {
    sub_23BFF8368();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t sub_23BF27B54(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4;
  int v5;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *(_QWORD *)a1 = *a2;
    v4 = v11 + ((v5 + 16) & ~(unint64_t)v5);
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v7 = a3[9];
    v8 = (_QWORD *)(a1 + v7);
    v9 = (uint64_t *)((char *)a2 + v7);
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3960);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v10 = sub_23BFF8608();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    }
    else
    {
      *v8 = *v9;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v12 = a3[10];
    v13 = a3[11];
    v14 = v4 + v12;
    v15 = (uint64_t)a2 + v12;
    *(_OWORD *)v14 = *(_OWORD *)v15;
    *(_QWORD *)(v14 + 16) = *(_QWORD *)(v15 + 16);
    v16 = v4 + v13;
    v17 = (uint64_t)a2 + v13;
    *(_OWORD *)v16 = *(_OWORD *)v17;
    *(_QWORD *)(v16 + 16) = *(_QWORD *)(v17 + 16);
    v18 = a3[12];
    v19 = a3[13];
    v20 = v4 + v18;
    v21 = (uint64_t)a2 + v18;
    *(_BYTE *)v20 = *(_BYTE *)v21;
    *(_QWORD *)(v20 + 8) = *(_QWORD *)(v21 + 8);
    v22 = (_QWORD *)(v4 + v19);
    v23 = (uint64_t *)((char *)a2 + v19);
    v24 = v23[1];
    *v22 = *v23;
    v22[1] = v24;
    v25 = a3[14];
    v26 = a3[15];
    v27 = (_QWORD *)(v4 + v25);
    v28 = (uint64_t *)((char *)a2 + v25);
    v29 = v28[1];
    *v27 = *v28;
    v27[1] = v29;
    v41 = v4 + v26;
    v42 = (uint64_t)a2 + v26;
    v30 = sub_23BFF8368();
    v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 16);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v31(v41, v42, v30);
    v32 = a3[16];
    v33 = a3[17];
    v34 = (_QWORD *)(v4 + v32);
    v35 = (uint64_t *)((char *)a2 + v32);
    v36 = v35[1];
    *v34 = *v35;
    v34[1] = v36;
    v37 = (_QWORD *)(v4 + v33);
    v38 = (uint64_t *)((char *)a2 + v33);
    v39 = v38[1];
    *v37 = *v38;
    v37[1] = v39;
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_23BF27D4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a1 + *(int *)(a2 + 36);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3960);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v5 = sub_23BFF8608();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v6 = a1 + *(int *)(a2 + 60);
  v7 = sub_23BFF8368();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  swift_release();
  return swift_release();
}

uint64_t sub_23BF27E54(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = a3[9];
  v7 = (_QWORD *)(a1 + v6);
  v8 = (_QWORD *)(a2 + v6);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3960);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v9 = sub_23BFF8608();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  }
  else
  {
    *v7 = *v8;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v10 = a3[10];
  v11 = a3[11];
  v12 = a1 + v10;
  v13 = a2 + v10;
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *(_QWORD *)(v12 + 16) = *(_QWORD *)(v13 + 16);
  v14 = a1 + v11;
  v15 = a2 + v11;
  *(_OWORD *)v14 = *(_OWORD *)v15;
  *(_QWORD *)(v14 + 16) = *(_QWORD *)(v15 + 16);
  v16 = a3[12];
  v17 = a3[13];
  v18 = a1 + v16;
  v19 = a2 + v16;
  *(_BYTE *)v18 = *(_BYTE *)v19;
  *(_QWORD *)(v18 + 8) = *(_QWORD *)(v19 + 8);
  v20 = (_QWORD *)(a1 + v17);
  v21 = (_QWORD *)(a2 + v17);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  v23 = a3[14];
  v24 = a3[15];
  v25 = (_QWORD *)(a1 + v23);
  v26 = (_QWORD *)(a2 + v23);
  v27 = v26[1];
  *v25 = *v26;
  v25[1] = v27;
  v39 = a1 + v24;
  v40 = a2 + v24;
  v28 = sub_23BFF8368();
  v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v29(v39, v40, v28);
  v30 = a3[16];
  v31 = a3[17];
  v32 = (_QWORD *)(a1 + v30);
  v33 = (_QWORD *)(a2 + v30);
  v34 = v33[1];
  *v32 = *v33;
  v32[1] = v34;
  v35 = (_QWORD *)(a1 + v31);
  v36 = (_QWORD *)(a2 + v31);
  v37 = v36[1];
  *v35 = *v36;
  v35[1] = v37;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_23BF28024(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  if ((uint64_t *)a1 != a2)
  {
    v7 = a3[9];
    v8 = (_QWORD *)(a1 + v7);
    v9 = (uint64_t *)((char *)a2 + v7);
    sub_23BE9F3A0(a1 + v7, &qword_256AE3960);
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3960);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v10 = sub_23BFF8608();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    }
    else
    {
      *v8 = *v9;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  v11 = a3[10];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (uint64_t *)((char *)a2 + v11);
  *v12 = *v13;
  v12[1] = v13[1];
  v12[2] = v13[2];
  swift_retain();
  swift_release();
  v14 = a3[11];
  v15 = (_QWORD *)(a1 + v14);
  v16 = (uint64_t *)((char *)a2 + v14);
  *v15 = *v16;
  v15[1] = v16[1];
  v15[2] = v16[2];
  swift_retain();
  swift_release();
  v17 = a3[12];
  v18 = a1 + v17;
  v19 = (uint64_t)a2 + v17;
  *(_BYTE *)v18 = *(_BYTE *)v19;
  *(_QWORD *)(v18 + 8) = *(_QWORD *)(v19 + 8);
  swift_retain();
  swift_release();
  v20 = a3[13];
  v21 = (_QWORD *)(a1 + v20);
  v22 = (uint64_t *)((char *)a2 + v20);
  v23 = v22[1];
  *v21 = *v22;
  v21[1] = v23;
  swift_retain();
  swift_release();
  v24 = a3[14];
  v25 = (_QWORD *)(a1 + v24);
  v26 = (uint64_t *)((char *)a2 + v24);
  *v25 = *v26;
  v25[1] = v26[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v27 = a3[15];
  v28 = a1 + v27;
  v29 = (uint64_t)a2 + v27;
  v30 = sub_23BFF8368();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 24))(v28, v29, v30);
  v31 = a3[16];
  v32 = (_QWORD *)(a1 + v31);
  v33 = (uint64_t *)((char *)a2 + v31);
  v34 = v33[1];
  *v32 = *v33;
  v32[1] = v34;
  swift_retain();
  swift_release();
  v35 = a3[17];
  v36 = (_QWORD *)(a1 + v35);
  v37 = (uint64_t *)((char *)a2 + v35);
  v38 = v37[1];
  *v36 = *v37;
  v36[1] = v38;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_23BF28250(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = a3[9];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3960);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v10 = sub_23BFF8608();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  v11 = a3[10];
  v12 = a3[11];
  v13 = a1 + v11;
  v14 = (__int128 *)(a2 + v11);
  v15 = *v14;
  *(_QWORD *)(v13 + 16) = *((_QWORD *)v14 + 2);
  *(_OWORD *)v13 = v15;
  v16 = a1 + v12;
  v17 = a2 + v12;
  *(_OWORD *)v16 = *(_OWORD *)v17;
  *(_QWORD *)(v16 + 16) = *(_QWORD *)(v17 + 16);
  v18 = a3[13];
  *(_OWORD *)(a1 + a3[12]) = *(_OWORD *)(a2 + a3[12]);
  *(_OWORD *)(a1 + v18) = *(_OWORD *)(a2 + v18);
  v19 = a3[15];
  *(_OWORD *)(a1 + a3[14]) = *(_OWORD *)(a2 + a3[14]);
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_23BFF8368();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
  v23 = a3[17];
  *(_OWORD *)(a1 + a3[16]) = *(_OWORD *)(a2 + a3[16]);
  *(_OWORD *)(a1 + v23) = *(_OWORD *)(a2 + v23);
  return a1;
}

uint64_t sub_23BF283A0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  if (a1 != a2)
  {
    v6 = a3[9];
    v7 = (void *)(a1 + v6);
    v8 = (const void *)(a2 + v6);
    sub_23BE9F3A0(a1 + v6, &qword_256AE3960);
    v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3960);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v10 = sub_23BFF8608();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
  }
  v11 = a3[10];
  v12 = a1 + v11;
  v13 = a2 + v11;
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *(_QWORD *)(v12 + 16) = *(_QWORD *)(v13 + 16);
  swift_release();
  v14 = a3[11];
  v15 = a1 + v14;
  v16 = a2 + v14;
  *(_OWORD *)v15 = *(_OWORD *)v16;
  *(_QWORD *)(v15 + 16) = *(_QWORD *)(v16 + 16);
  swift_release();
  v17 = a3[12];
  v18 = a1 + v17;
  v19 = a2 + v17;
  *(_BYTE *)v18 = *(_BYTE *)v19;
  *(_QWORD *)(v18 + 8) = *(_QWORD *)(v19 + 8);
  swift_release();
  *(_OWORD *)(a1 + a3[13]) = *(_OWORD *)(a2 + a3[13]);
  swift_release();
  v20 = a3[14];
  v21 = (_QWORD *)(a1 + v20);
  v22 = (uint64_t *)(a2 + v20);
  v24 = *v22;
  v23 = v22[1];
  *v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  v25 = a3[15];
  v26 = a1 + v25;
  v27 = a2 + v25;
  v28 = sub_23BFF8368();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 40))(v26, v27, v28);
  *(_OWORD *)(a1 + a3[16]) = *(_OWORD *)(a2 + a3[16]);
  swift_release();
  *(_OWORD *)(a1 + a3[17]) = *(_OWORD *)(a2 + a3[17]);
  swift_release();
  return a1;
}

uint64_t sub_23BF28574()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BF28580(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v6 = __swift_instantiateConcreteTypeFromMangledName(qword_256AE5528);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[9];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = sub_23BFF8368();
    v7 = *(_QWORD *)(v8 - 8);
    v9 = a3[15];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = *(_QWORD *)(a1 + a3[13]);
  if (v10 >= 0xFFFFFFFF)
    LODWORD(v10) = -1;
  return (v10 + 1);
}

uint64_t sub_23BF28628()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BF28634(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = __swift_instantiateConcreteTypeFromMangledName(qword_256AE5528);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[9];
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + a4[13]) = (a2 - 1);
      return result;
    }
    v10 = sub_23BFF8368();
    v9 = *(_QWORD *)(v10 - 8);
    v11 = a4[15];
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

void sub_23BF286D8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256AE55B0)
  {
    sub_23BFF8608();
    v0 = sub_23BFF844C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256AE55B0);
  }
}

uint64_t sub_23BF2872C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t OpaqueTypeConformance2;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD v39[2];
  _QWORD v40[2];
  _QWORD v41[2];
  _QWORD v42[2];
  _QWORD v43[2];
  _QWORD v44[2];

  sub_23BFF96A0();
  swift_getTupleTypeMetadata2();
  v0 = sub_23BFF9220();
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v0);
  v1 = sub_23BFF90AC();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE35B0);
  sub_23BFF862C();
  sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE54B8);
  sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE54C0);
  sub_23BFF862C();
  v2 = sub_23BFF862C();
  v3 = sub_23BFF862C();
  v4 = sub_23BFF862C();
  v5 = sub_23BFF862C();
  v6 = sub_23BFF862C();
  v7 = MEMORY[0x24BDF4700];
  v44[0] = MEMORY[0x242615198](MEMORY[0x24BDF4700], v1);
  v44[1] = MEMORY[0x24BDEDBB8];
  v8 = MEMORY[0x24BDED308];
  v43[0] = MEMORY[0x242615198](MEMORY[0x24BDED308], v2, v44);
  v43[1] = MEMORY[0x24BDEDB80];
  v42[0] = MEMORY[0x242615198](v8, v3, v43);
  v42[1] = sub_23BF27974();
  v41[0] = MEMORY[0x242615198](v8, v4, v42);
  v41[1] = sub_23BEA1F94(&qword_256AE54D0, &qword_256AE54B8, MEMORY[0x24BDEF370]);
  v40[0] = MEMORY[0x242615198](v8, v5, v41);
  v40[1] = sub_23BEA1F94(&qword_256AE54D8, &qword_256AE54C0, MEMORY[0x24BDF09B0]);
  MEMORY[0x242615198](v8, v6, v40);
  sub_23BFF8944();
  sub_23BFF862C();
  v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE54E0);
  sub_23BFF85C0();
  swift_getTupleTypeMetadata2();
  v10 = sub_23BFF9220();
  v11 = MEMORY[0x24BDF5428];
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v10);
  v12 = sub_23BFF90AC();
  v13 = sub_23BFF862C();
  v39[0] = MEMORY[0x242615198](v7, v12);
  v39[1] = MEMORY[0x24BDECC60];
  v14 = MEMORY[0x242615198](v8, v13, v39);
  v35 = v13;
  v36 = v14;
  v15 = MEMORY[0x24261512C](255, &v35, MEMORY[0x24BDF2FE0], 0);
  v35 = v13;
  v36 = v14;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v35 = v15;
  v36 = OpaqueTypeConformance2;
  MEMORY[0x24261512C](255, &v35, MEMORY[0x24BDF29F8], 0);
  v35 = v15;
  v36 = OpaqueTypeConformance2;
  swift_getOpaqueTypeConformance2();
  v17 = sub_23BFF8434();
  v18 = MEMORY[0x242615198](MEMORY[0x24BDEB238], v17);
  v19 = sub_23BEBF0DC();
  v20 = MEMORY[0x24BEE0D00];
  v35 = v17;
  v36 = MEMORY[0x24BEE0D00];
  v37 = v18;
  v38 = v19;
  v21 = MEMORY[0x24261512C](255, &v35, MEMORY[0x24BDF28C0], 0);
  v35 = v17;
  v36 = v20;
  v37 = v18;
  v38 = v19;
  v22 = swift_getOpaqueTypeConformance2();
  v35 = v21;
  v36 = v22;
  v23 = MEMORY[0x24261512C](255, &v35, MEMORY[0x24BDF33A8], 0);
  v24 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE54E8);
  v35 = v21;
  v36 = v22;
  v25 = swift_getOpaqueTypeConformance2();
  v26 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE54F0);
  v27 = sub_23BEA1F94(&qword_256AE54F8, &qword_256AE54F0, MEMORY[0x24BDEB848]);
  v35 = v26;
  v36 = v27;
  v28 = swift_getOpaqueTypeConformance2();
  v35 = v23;
  v36 = v24;
  v37 = v25;
  v38 = v28;
  MEMORY[0x24261512C](255, &v35, MEMORY[0x24BDF3858], 0);
  v35 = v23;
  v36 = v24;
  v37 = v25;
  v38 = v28;
  swift_getOpaqueTypeConformance2();
  v29 = sub_23BFF8644();
  v30 = sub_23BF279B8();
  v31 = MEMORY[0x242615198](MEMORY[0x24BDED358], v29);
  v35 = v9;
  v36 = v29;
  v37 = v30;
  v38 = v31;
  MEMORY[0x24261512C](255, &v35, MEMORY[0x24BDF3650], 0);
  sub_23BFF96A0();
  swift_getTupleTypeMetadata2();
  v32 = sub_23BFF9220();
  MEMORY[0x242615198](v11, v32);
  v33 = sub_23BFF90C4();
  return MEMORY[0x242615198](MEMORY[0x24BDF4750], v33);
}

uint64_t sub_23BF28CDC(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_23BF291D0((uint64_t (*)(double, double))sub_23BF23538, a1, a2, a4, a5, a6);
}

uint64_t sub_23BF28CE8@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_23BF24C70(v2[4], v2[2], v2[3], a1, a2);
}

uint64_t sub_23BF28CF8@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for DescriptionView(0, v4, v5, a1) - 8) + 80);
  return sub_23BF252B4(v2 + ((v6 + 32) & ~v6), v4, v5, a2);
}

uint64_t sub_23BF28D50@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_23BF256A4(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_23BF28D5C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_23BF25D34(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_23BF28D68()
{
  uint64_t *v0;

  return sub_23BF26494(v0[4], v0[2], v0[3]);
}

uint64_t sub_23BF28D74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return sub_23BF265F0(v4[4], v4[2], v4[3], a4);
}

uint64_t sub_23BF28D84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  type metadata accessor for DescriptionView(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  return sub_23BF23590();
}

uint64_t sub_23BF28DC8@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_23BF26700(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_23BF28DD4@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_23BF26230(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_23BF28DE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23BFF86E0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BF28E24(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_23BFF86E0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23BF28E64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = type metadata accessor for DescriptionView(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80);
  (*(void (**)(void))(v4 + ((v6 + 32) & ~v6) + *(int *)(v5 + 68)))();
  return sub_23BF23590();
}

uint64_t sub_23BF28EC8@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_23BF26FBC(v1[4], v1[2], v1[3], a1);
}

unint64_t sub_23BF28ED4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AE55D8;
  if (!qword_256AE55D8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE55D0);
    v2[0] = sub_23BF28F58();
    v2[1] = sub_23BEA1F94(&qword_256AE5620, &qword_256AE5628, MEMORY[0x24BDF0710]);
    result = MEMORY[0x242615198](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AE55D8);
  }
  return result;
}

unint64_t sub_23BF28F58()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AE55E0;
  if (!qword_256AE55E0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE55E8);
    v2[0] = sub_23BF28FDC();
    v2[1] = sub_23BEA1F94(&qword_256AE5610, &qword_256AE5618, MEMORY[0x24BDF1028]);
    result = MEMORY[0x242615198](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AE55E0);
  }
  return result;
}

unint64_t sub_23BF28FDC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256AE55F0;
  if (!qword_256AE55F0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE55F8);
    v2 = sub_23BEA1F94(&qword_256AE5600, &qword_256AE5608, MEMORY[0x24BDF1028]);
    v3[0] = MEMORY[0x24BDF1F80];
    v3[1] = v2;
    result = MEMORY[0x242615198](MEMORY[0x24BDED308], v1, v3);
    atomic_store(result, (unint64_t *)&qword_256AE55F0);
  }
  return result;
}

uint64_t objectdestroyTm_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = type metadata accessor for DescriptionView(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  v6 = v4
     + ((*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80));
  v7 = v6 + *(int *)(v5 + 36);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3960);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v8 = sub_23BFF8608();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v9 = v6 + *(int *)(v5 + 60);
  v10 = sub_23BFF8368();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23BF291C4(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_23BF291D0((uint64_t (*)(double, double))sub_23BF23450, a1, a2, a4, a5, a6);
}

uint64_t sub_23BF291D0(uint64_t (*a1)(double, double), double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  type metadata accessor for DescriptionView(0, *(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 24), a6);
  return a1(a2, a3);
}

uint64_t sub_23BF29228@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_23BF268BC(v1[4], v1[2], v1[3], a1);
}

BOOL sub_23BF29234(unsigned __int8 a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  uint64_t v10;
  unint64_t v11;
  int v12;

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  v3 = a1;
  sub_23BFF99D0();
  sub_23BFF99DC();
  v4 = sub_23BFF9A00();
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = v4 & ~v5;
  v7 = a2 + 56;
  if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    return 0;
  v8 = *(_QWORD *)(a2 + 48);
  if (*(unsigned __int8 *)(v8 + v6) == v3)
    return 1;
  v10 = ~v5;
  v11 = (v6 + 1) & v10;
  if (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
    return 0;
  do
  {
    v12 = *(unsigned __int8 *)(v8 + v11);
    result = v12 == v3;
    if (v12 == v3)
      break;
    v11 = (v11 + 1) & v10;
  }
  while (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

void sub_23BF29320()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for OrthogonalView();
}

void sub_23BF2A298()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);

  v2 = v0[70];
  v3 = MEMORY[0x242615198](&protocol conformance descriptor for CarouselView<A, B, C, D, E, F, G, H, I, J, K, L, M>, v2);
  v4 = v0[32];
  sub_23BEA72EC(v1, v2, v4);
  v5 = *(void (**)(uint64_t, uint64_t))(v0[17] + 8);
  v5(v1, v2);
  v0[101] = v5;
  sub_23BEA5C0C(v4, v2, v1);
  v6 = v0[69];
  v7 = MEMORY[0x242615198](&protocol conformance descriptor for HorizontalGridView<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>);
  v8 = MEMORY[0x242615198](&protocol conformance descriptor for VerticalGridView<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>, v0[79]);
  v0[114] = v7;
  v0[115] = v8;
  v9 = MEMORY[0x24BDEF3E0];
  v10 = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v0[78], v0 + 114);
  v11 = v0[33];
  sub_23BEA5C24(v1, v2);
  v12 = v1;
  v13 = v0[62];
  v5(v12, v2);
  v0[112] = v3;
  v0[113] = v10;
  v14 = v9;
  v15 = v9;
  v16 = v0[71];
  MEMORY[0x242615198](v14, v16, v0 + 112);
  v17 = MEMORY[0x242615198](&protocol conformance descriptor for ListView<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>, v13);
  v18 = MEMORY[0x242615198](&protocol conformance descriptor for OrthogonalView<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>, v0[68]);
  v0[110] = v17;
  v0[111] = v18;
  v19 = v15;
  v20 = v0[72];
  MEMORY[0x242615198](v19, v20, v0 + 110);
  v21 = v0[50];
  sub_23BEA5C24(v11, v16);
  (*(void (**)(uint64_t, uint64_t))(v0[34] + 8))(v11, v16);
  ((void (*)(_QWORD, uint64_t))v0[101])(v0[32], v2);
  v22 = MEMORY[0x242615198](&protocol conformance descriptor for CarouselView<A, B, C, D, E, F, G, H, I, J, K, L, M>, v2);
  v23 = MEMORY[0x242615198](&protocol conformance descriptor for HorizontalGridView<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>, v6);
  v24 = MEMORY[0x242615198](&protocol conformance descriptor for VerticalGridView<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>, v0[79]);
  v0[144] = v23;
  v0[145] = v24;
  v25 = MEMORY[0x24BDEF3E0];
  v26 = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v0[78], v0 + 144);
  v0[142] = v22;
  v0[143] = v26;
  v27 = MEMORY[0x242615198](v25, v16, v0 + 142);
  v28 = MEMORY[0x242615198](&protocol conformance descriptor for ListView<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>, v13);
  v29 = MEMORY[0x242615198](&protocol conformance descriptor for OrthogonalView<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>, v0[68]);
  v0[140] = v28;
  v0[141] = v29;
  v30 = MEMORY[0x242615198](v25, v20, v0 + 140);
  v0[138] = v27;
  v0[139] = v30;
  v31 = v0[8];
  MEMORY[0x242615198](v25, v31, v0 + 138);
  v32 = v0[53];
  sub_23BEA5C0C(v21, v31, v32);
  sub_23BEA5CE8(v32, MEMORY[0x24BDF5158], v31);
  v33 = *(void (**)(uint64_t, uint64_t))(v0[54] + 8);
  v33(v32, v31);
  v33(v21, v31);
  JUMPOUT(0x23BF2B510);
}

uint64_t sub_23BF2B650(uint64_t a1)
{
  unint64_t v2;

  if (!*(_QWORD *)(a1 + 16))
    return 0;
  sub_23BFF99D0();
  sub_23BFF99DC();
  v2 = sub_23BFF9A00() & ~(-1 << *(_BYTE *)(a1 + 32));
  return (*(_QWORD *)(a1 + ((v2 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v2) & 1;
}

void CanvasItemDescriptor.init(identifier:content:contextMenu:metrics:redactionReasons:)(uint64_t a1@<X0>, uint64_t a2@<X8>, uint64_t a3)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a2, a1, a3);
  type metadata accessor for CanvasItemDescriptor();
}

void sub_23BF2B778()
{
  type metadata accessor for CanvasItemContent();
}

uint64_t sub_23BF2B79C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v1, v9, a1);
  v4 = v2 + v3[34];
  v5 = sub_23BFF96A0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v4, v10, v5);
  v6 = v2 + v3[35];
  v7 = sub_23BFF96A0();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v6, v11, v7);
  *(_QWORD *)(v2 + v3[36]) = v12;
  return result;
}

void type metadata accessor for CanvasItemDescriptor()
{
  JUMPOUT(0x2426150F0);
}

uint64_t CanvasItemDescriptor.identifier.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 40) - 8) + 16))(a2, v2);
}

void CanvasItemDescriptor.content.getter()
{
  type metadata accessor for CanvasItemContent();
}

uint64_t sub_23BF2B89C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, v2, a1);
}

uint64_t CanvasItemDescriptor.contextMenu.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 136);
  v5 = sub_23BFF96A0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t CanvasItemDescriptor.metrics.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 140);
  v5 = sub_23BFF96A0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t CanvasItemDescriptor.redactionReasons.getter(uint64_t a1)
{
  sub_23BF2D380(a1);
  return swift_bridgeObjectRetain();
}

uint64_t sub_23BF2B960(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746E65746E6F63 && a2 == 0xE700000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x4D747865746E6F63 && a2 == 0xEB00000000756E65 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7363697274656DLL && a2 == 0xE700000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000023C01ED40)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_23BFF9964();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_23BF2BB9C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23BF2BBD4 + 4 * byte_23BFFF9A0[a1]))(0x696669746E656469, 0xEA00000000007265);
}

uint64_t sub_23BF2BBD4()
{
  return 0x746E65746E6F63;
}

uint64_t sub_23BF2BBEC()
{
  return 0x4D747865746E6F63;
}

uint64_t sub_23BF2BC0C()
{
  return 0x7363697274656DLL;
}

unint64_t sub_23BF2BC24()
{
  return 0xD000000000000010;
}

BOOL sub_23BF2BC40(char *a1, char *a2)
{
  return sub_23BEAAB9C(*a1, *a2);
}

uint64_t sub_23BF2BC90()
{
  return sub_23BEAADE0();
}

uint64_t sub_23BF2BCDC()
{
  return sub_23BEAABAC();
}

uint64_t sub_23BF2BD20()
{
  sub_23BFF99D0();
  sub_23BEAABAC();
  return sub_23BFF9A00();
}

uint64_t sub_23BF2BD84()
{
  unsigned __int8 *v0;

  return sub_23BF2BB9C(*v0);
}

uint64_t sub_23BF2BDD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BF2B960(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BF2BE24@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23BEAC9E0();
  *a1 = result;
  return result;
}

uint64_t sub_23BF2BE74(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23BFFFDF0, a1);
  return sub_23BFF9A30();
}

uint64_t sub_23BF2BEA8(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23BFFFDF0, a1);
  return sub_23BFF9A3C();
}

uint64_t sub_23BF2BEEC(uint64_t a1)
{
  sub_23BF2D380(a1);
  return swift_bridgeObjectRetain();
}

void CanvasItemDescriptor.encode(to:)()
{
  type metadata accessor for CanvasItemDescriptor.CodingKeys();
}

uint64_t sub_23BF2BFB8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  MEMORY[0x242615198](&unk_23BFFFDF0, a1);
  v3 = sub_23BFF994C();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v12 - v5;
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  sub_23BFF9A18();
  *(_BYTE *)(v2 - 200) = 0;
  v7 = *(_QWORD *)(v2 - 208);
  sub_23BFF9940();
  if (!v7)
  {
    *(_BYTE *)(v2 - 65) = 1;
    v8 = *(_QWORD *)(v2 - 256);
    *(_QWORD *)(v2 - 200) = *(_QWORD *)(v2 - 248);
    *(_QWORD *)(v2 - 192) = v8;
    v9 = *(_QWORD *)(v2 - 272);
    *(_QWORD *)(v2 - 184) = *(_QWORD *)(v2 - 264);
    *(_QWORD *)(v2 - 176) = v9;
    v10 = *(_QWORD *)(v2 - 288);
    *(_QWORD *)(v2 - 168) = *(_QWORD *)(v2 - 280);
    *(_QWORD *)(v2 - 160) = v10;
    type metadata accessor for CanvasItemContent();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void CanvasItemDescriptor.init(from:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X6>, uint64_t a5@<X7>, uint64_t a6@<X8>, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[7];
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v33 = a1;
  v19[1] = a6;
  v34 = a12;
  v28 = a9;
  v31 = a10;
  v32 = a11;
  v30 = a13;
  v27 = a8;
  v29 = a7;
  v20 = sub_23BFF96A0();
  v19[6] = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v19[2] = (char *)v19 - v17;
  v23 = sub_23BFF96A0();
  v21 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v22 = (char *)v19 - v18;
  v35 = a2;
  v36 = a3;
  v26 = a3;
  v37 = a4;
  v38 = a5;
  v24 = a4;
  v25 = a5;
  v39 = v29;
  v40 = v30;
  type metadata accessor for CanvasItemContent();
}

void sub_23BF2C36C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v18 - 360) = a1;
  *(_QWORD *)(v18 - 392) = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v18 - 336) = (char *)&a9 - v19;
  *(_QWORD *)(v18 - 352) = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v20);
  *(_QWORD *)(v18 - 320) = (char *)&a9 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v18 - 200) = v9;
  *(_QWORD *)(v18 - 192) = v14;
  *(_QWORD *)(v18 - 184) = v13;
  *(_QWORD *)(v18 - 176) = v10;
  *(_QWORD *)(v18 - 168) = v17;
  *(_QWORD *)(v18 - 160) = v15;
  *(_QWORD *)(v18 - 152) = v16;
  *(_QWORD *)(v18 - 144) = v12;
  v22 = *(_QWORD *)(v18 - 256);
  *(_QWORD *)(v18 - 136) = *(_QWORD *)(v18 - 264);
  *(_QWORD *)(v18 - 128) = v22;
  v23 = *(_QWORD *)(v18 - 224);
  *(_QWORD *)(v18 - 120) = *(_QWORD *)(v18 - 232);
  *(_QWORD *)(v18 - 112) = v23;
  *(_QWORD *)(v18 - 104) = *(_QWORD *)(v18 - 208);
  *(_QWORD *)(v18 - 96) = v11;
  type metadata accessor for CanvasItemDescriptor.CodingKeys();
}

void sub_23BF2C428(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  MEMORY[0x242615198](&unk_23BFFFDF0, a1);
  v8 = sub_23BFF98E0();
  *(_QWORD *)(v7 - 304) = v8;
  *(_QWORD *)(v7 - 344) = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v9 = *(_QWORD *)(v7 - 280);
  *(_QWORD *)(v7 - 200) = v1;
  *(_QWORD *)(v7 - 192) = v9;
  *(_QWORD *)(v7 - 400) = v4;
  *(_QWORD *)(v7 - 184) = v4;
  *(_QWORD *)(v7 - 176) = v2;
  *(_QWORD *)(v7 - 280) = v2;
  *(_QWORD *)(v7 - 408) = v6;
  v10 = *(_QWORD *)(v7 - 296);
  *(_QWORD *)(v7 - 168) = v6;
  *(_QWORD *)(v7 - 160) = v10;
  v11 = *(_QWORD *)(v7 - 248);
  *(_QWORD *)(v7 - 152) = *(_QWORD *)(v7 - 288);
  *(_QWORD *)(v7 - 144) = v11;
  *(_QWORD *)(v7 - 136) = v5;
  *(_QWORD *)(v7 - 128) = v3;
  v12 = *(_QWORD *)(v7 - 224);
  *(_QWORD *)(v7 - 120) = *(_QWORD *)(v7 - 232);
  *(_QWORD *)(v7 - 112) = v12;
  v13 = *(_QWORD *)(v7 - 240);
  *(_QWORD *)(v7 - 104) = *(_QWORD *)(v7 - 208);
  *(_QWORD *)(v7 - 96) = v13;
  type metadata accessor for CanvasItemDescriptor();
}

uint64_t sub_23BF2C4F4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v21 - v6;
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  *(_QWORD *)(v3 - 224) = v2;
  v8 = *(_QWORD *)(v3 - 272);
  sub_23BFF9A0C();
  if (v8)
    return __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v3 - 216));
  v9 = *(_QWORD *)(v3 - 336);
  *(_QWORD *)(v3 - 248) = v5;
  v10 = *(_QWORD *)(v3 - 328);
  *(_QWORD *)(v3 - 240) = a1;
  *(_QWORD *)(v3 - 232) = v7;
  v11 = *(_QWORD *)(v3 - 312);
  *(_BYTE *)(v3 - 200) = 0;
  v12 = *(_QWORD *)(v3 - 320);
  v13 = *(_QWORD *)(v3 - 280);
  sub_23BFF98C8();
  (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v3 - 352) + 32))(*(_QWORD *)(v3 - 232), v12, v13);
  *(_BYTE *)(v3 - 200) = 1;
  v14 = *(_QWORD *)(v3 - 360);
  MEMORY[0x242615198](&protocol conformance descriptor for CanvasItemContent<A, B, C>, v14);
  sub_23BFF98C8();
  (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v3 - 392) + 32))(*(_QWORD *)(v3 - 232) + *(int *)(*(_QWORD *)(v3 - 240) + 132), v9, v14);
  *(_BYTE *)(v3 - 200) = 2;
  v15 = v10;
  sub_23BFF988C();
  v16 = *(int **)(v3 - 240);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v3 - 368) + 32))(*(_QWORD *)(v3 - 232) + v16[34], v15, v11);
  *(_BYTE *)(v3 - 200) = 3;
  v17 = *(_QWORD *)(v3 - 416);
  sub_23BFF988C();
  (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v3 - 384) + 32))(*(_QWORD *)(v3 - 232) + v16[35], v17, *(_QWORD *)(v3 - 376));
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5648);
  *(_BYTE *)(v3 - 65) = 4;
  sub_23BF2D3DC(&qword_256AE5660, (uint64_t (*)(void))sub_23BF2D444, MEMORY[0x24BEE1720]);
  sub_23BFF98C8();
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v3 - 344) + 8))(*(_QWORD *)(v3 - 224), *(_QWORD *)(v3 - 304));
  v18 = *(_QWORD *)(v3 - 232);
  *(_QWORD *)(v18 + v16[36]) = *(_QWORD *)(v3 - 200);
  v19 = *(_QWORD *)(v3 - 248);
  (*(void (**)(_QWORD, uint64_t, int *))(v19 + 16))(*(_QWORD *)(v3 - 424), v18, v16);
  __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v3 - 216));
  return (*(uint64_t (**)(uint64_t, int *))(v19 + 8))(v18, v16);
}

void sub_23BF2C9A0(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  CanvasItemDescriptor.init(from:)(a1, a2[2], a2[3], a2[7], a2[8], a3, a2[9], a2[10], a2[11], a2[12], a2[13], a2[14], a2[15]);
}

void sub_23BF2C9EC()
{
  CanvasItemDescriptor.encode(to:)();
}

void CanvasItemDescriptor.hash(into:)()
{
  sub_23BFF9388();
  type metadata accessor for CanvasItemContent();
}

uint64_t sub_23BF2CA58(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  CanvasItemContent.hash(into:)(v1, a1);
  sub_23BFF96A0();
  sub_23BFF96AC();
  sub_23BFF96A0();
  sub_23BFF96AC();
  v4 = *(_QWORD *)(v2 + *(int *)(v3 + 144));
  swift_bridgeObjectRetain();
  sub_23BECBE60(v1, v4);
  return swift_bridgeObjectRelease();
}

uint64_t static CanvasItemDescriptor.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v42[17];
  uint64_t TupleTypeMetadata2;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v50 = a4;
  v51 = a8;
  v49 = a3;
  v42[11] = *(_QWORD *)(a7 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v42[7] = (char *)v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_23BFF96A0();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v42[9] = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v22 = (char *)v42 - v21;
  v42[16] = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v42[8] = (char *)v42 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v25);
  v42[14] = (char *)v42 - v26;
  MEMORY[0x24BDAC7A8](v27);
  v42[15] = (char *)v42 - v28;
  v46 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v42[10] = (char *)v42 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = a5;
  v31 = sub_23BFF96A0();
  v47 = swift_getTupleTypeMetadata2();
  v42[13] = *(_QWORD *)(v47 - 8);
  MEMORY[0x24BDAC7A8](v47);
  v48 = (char *)v42 - v32;
  v44 = v31;
  v33 = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v34);
  v42[12] = (char *)v42 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v36);
  v38 = (char *)v42 - v37;
  MEMORY[0x24BDAC7A8](v39);
  v45 = (char *)v42 - v40;
  if ((sub_23BFF93AC() & 1) != 0)
  {
    v42[6] = v38;
    v42[4] = v33;
    v42[2] = v22;
    v42[3] = v20;
    v53 = v49;
    v54 = v50;
    v55 = v52;
    v56 = a6;
    v42[1] = a7;
    v57 = a7;
    v58 = v51;
    v59 = a9;
    v60 = a10;
    v42[0] = a11;
    v61 = a11;
    v62 = a12;
    v63 = a13;
    v64 = a14;
    v65 = a15;
    v66 = a16;
    type metadata accessor for CanvasItemDescriptor();
  }
  return 0;
}

void CanvasItemDescriptor.hashValue.getter()
{
  sub_23BFF99D0();
  CanvasItemDescriptor.hash(into:)();
}

uint64_t sub_23BF2D2D8()
{
  return sub_23BFF9A00();
}

void sub_23BF2D2F8()
{
  sub_23BFF99D0();
  CanvasItemDescriptor.hash(into:)();
}

uint64_t sub_23BF2D320()
{
  return sub_23BFF9A00();
}

uint64_t sub_23BF2D338(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return static CanvasItemDescriptor.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6], a3[7], a3[8], a3[9], a3[10], a3[11], a3[12], a3[13], a3[14], a3[15]) & 1;
}

uint64_t sub_23BF2D380(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 144));
}

void type metadata accessor for CanvasItemDescriptor.CodingKeys()
{
  JUMPOUT(0x2426150F0);
}

unint64_t sub_23BF2D398()
{
  unint64_t result;

  result = qword_256AE5658;
  if (!qword_256AE5658)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for CanvasItemRedactionReason, &type metadata for CanvasItemRedactionReason);
    atomic_store(result, (unint64_t *)&qword_256AE5658);
  }
  return result;
}

uint64_t sub_23BF2D3DC(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE5648);
    v8 = a2();
    result = MEMORY[0x242615198](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23BF2D444()
{
  unint64_t result;

  result = qword_256AE5668;
  if (!qword_256AE5668)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for CanvasItemRedactionReason, &type metadata for CanvasItemRedactionReason);
    atomic_store(result, (unint64_t *)&qword_256AE5668);
  }
  return result;
}

uint64_t sub_23BF2D488(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 64);
}

uint64_t sub_23BF2D490(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 72);
}

uint64_t sub_23BF2D498(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 80);
}

uint64_t sub_23BF2D4A0(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 88);
}

uint64_t sub_23BF2D4A8(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 96);
}

uint64_t sub_23BF2D4B0(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 104);
}

uint64_t sub_23BF2D4B8(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 112);
}

uint64_t sub_23BF2D4C0(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 120);
}

uint64_t sub_23BF2D4C8(_QWORD *a1, uint64_t a2)
{
  uint64_t result;

  a1[1] = MEMORY[0x242615198](&protocol conformance descriptor for CanvasItemDescriptor<A, B, C, D, E, F>);
  a1[2] = MEMORY[0x242615198](&protocol conformance descriptor for CanvasItemDescriptor<A, B, C, D, E, F>, a2);
  a1[3] = MEMORY[0x242615198](&protocol conformance descriptor for CanvasItemDescriptor<A, B, C, D, E, F>, a2);
  result = MEMORY[0x242615198](&protocol conformance descriptor for CanvasItemDescriptor<A, B, C, D, E, F>, a2);
  a1[4] = result;
  return result;
}

void sub_23BF2D534()
{
  JUMPOUT(0x242615198);
}

uint64_t dispatch thunk of CanvasItemDescriptorProtocol.identifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 152))();
}

uint64_t dispatch thunk of CanvasItemDescriptorProtocol.content.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 160))();
}

uint64_t dispatch thunk of CanvasItemDescriptorProtocol.contextMenu.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 168))();
}

uint64_t dispatch thunk of CanvasItemDescriptorProtocol.metrics.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 176))();
}

uint64_t dispatch thunk of CanvasItemDescriptorProtocol.redactionReasons.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 184))();
}

uint64_t sub_23BF2D56C()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_23BF2D574()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
    type metadata accessor for CanvasItemContent();
  return result;
}

uint64_t *sub_23BF2D664(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  size_t v20;
  size_t v21;
  uint64_t v22;
  size_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  size_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  size_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  const void *v75;
  unsigned int (*v76)(const void *, uint64_t, uint64_t);
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  const void *v94;
  unsigned int (*v95)(const void *, uint64_t, uint64_t);
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  void *v100;
  unint64_t v101;
  const void *v102;
  unsigned int (*v103)(const void *, uint64_t, uint64_t);
  unint64_t v104;
  const void *v105;
  unsigned int (*v106)(const void *, uint64_t, uint64_t);
  unint64_t v107;
  const void *v108;
  unsigned int (*v109)(const void *, uint64_t, uint64_t);
  size_t v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  const void *v121;
  unsigned int (*v122)(const void *, uint64_t, uint64_t);
  __int128 v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  const void *v129;
  size_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  const void *v143;
  unsigned int (*v144)(const void *, uint64_t, uint64_t);
  const void *v145;
  unsigned int (*v146)(const void *, uint64_t, uint64_t);
  unint64_t v147;
  const void *v148;
  unsigned int (*v149)(const void *, uint64_t, uint64_t);
  size_t v150;
  uint64_t v151;
  __int128 v152;
  uint64_t v153;
  uint64_t v154;
  void *v155;
  const void *v156;
  unsigned int (*v157)(const void *, uint64_t, uint64_t);
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  uint64_t v163;
  uint64_t v164;
  void *v165;
  const void *v166;
  unsigned int (*v167)(const void *, uint64_t, uint64_t);
  __int128 v168;
  __int128 v169;
  __int128 v170;
  uint64_t v171;
  uint64_t v172;
  void *v173;
  const void *v174;
  unsigned int (*v175)(const void *, uint64_t, uint64_t);
  size_t v176;
  char v177;
  uint64_t v178;
  void *v179;
  const void *v180;
  void *v181;
  const void *v182;
  void *v183;
  const void *v184;
  void *v185;
  const void *v186;
  unint64_t v187;
  unint64_t v188;
  void *v189;
  const void *v190;
  uint64_t v191;
  void *v192;
  const void *v193;
  size_t v194;
  void *v195;
  const void *v196;
  void *v197;
  const void *v198;
  void *v199;
  const void *v200;
  void *v201;
  const void *v202;
  void *v203;
  const void *v204;
  void *v205;
  const void *v206;
  void *v207;
  const void *v208;
  void *v209;
  const void *v210;
  unint64_t v211;
  unint64_t v212;
  void (*v213)(unint64_t, unint64_t, uint64_t);
  void *v214;
  const void *v215;
  void *v216;
  const void *v217;
  unsigned int (*v218)(const void *, uint64_t, uint64_t);
  void *v219;
  const void *v220;
  void *v221;
  const void *v222;
  void *v223;
  const void *v224;
  void *v225;
  const void *v226;
  unint64_t v227;
  unint64_t v228;
  void *v229;
  const void *v230;
  void *v231;
  const void *v232;
  void *v233;
  const void *v234;
  void *v235;
  const void *v236;
  void *v237;
  const void *v238;
  void *v239;
  const void *v240;
  void *v241;
  const void *v242;
  void *v243;
  const void *v244;
  uint64_t *result;
  char v246;
  unsigned int (*v247)(unint64_t, uint64_t, uint64_t);
  void *v248;
  const void *v249;
  size_t v250;
  size_t __n;
  size_t v252;
  size_t v253;
  size_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  size_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t v269;
  unint64_t v270;
  uint64_t v271;
  unint64_t v272;
  unint64_t v273;
  unint64_t v274;
  unint64_t v275;
  unint64_t v276;
  unint64_t v277;
  unint64_t v278;
  unint64_t v279;
  uint64_t v280;
  size_t v281;
  size_t v282;
  size_t v283;
  size_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  unint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  unint64_t v304;
  unint64_t v305;
  unint64_t v306;
  unint64_t v307;
  unint64_t v308;
  unint64_t v309;
  unint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  int v315;
  size_t v316;
  int v317;
  size_t v318;
  int v319;
  uint64_t v320;
  int v321;
  size_t v322;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;

  v303 = a3[5];
  v4 = *(_QWORD *)(v303 - 8);
  v313 = *(_QWORD *)(v4 + 64);
  v298 = a3[3];
  v5 = *(_QWORD *)(v298 - 8);
  v321 = *(_DWORD *)(v5 + 80);
  v6 = v321;
  v299 = sub_23BFF82CC();
  v7 = *(_QWORD *)(v299 - 8);
  v319 = *(_DWORD *)(v7 + 80);
  v8 = v319;
  v296 = a3[2];
  v9 = *(_QWORD *)(v296 - 8);
  v317 = *(_DWORD *)(v9 + 80);
  v10 = v317;
  v260 = sub_23BFF8368();
  v11 = *(_QWORD *)(v260 - 8);
  v315 = *(_DWORD *)(v11 + 80);
  v12 = a3[6];
  v287 = a3[7];
  v13 = *(_QWORD *)(v287 - 8);
  v14 = *(_DWORD *)(v13 + 80);
  v15 = v14;
  v271 = v321 + 248;
  v297 = v5;
  v16 = *(_QWORD *)(v5 + 64);
  v17 = v16 + v319;
  v280 = v17 + 1 + ((v6 + 248) & ~v6);
  v18 = *(_QWORD *)(v7 + 64);
  if (*(_DWORD *)(v7 + 84))
    v19 = *(_QWORD *)(v7 + 64);
  else
    v19 = v18 + 1;
  v20 = v19 + v319;
  v21 = v19 + v317;
  v22 = *(_QWORD *)(v9 + 64);
  v294 = v22 + v317;
  v295 = v9;
  if (*(_DWORD *)(v9 + 84))
    v23 = *(_QWORD *)(v9 + 64);
  else
    v23 = v22 + 1;
  v24 = ((v22
        + v317
        + ((v19
          + v317
          + ((v19
            + v319
            + ((v19 + v319 + (v280 & ~(unint64_t)v319)) & ~(unint64_t)v319)) & ~(unint64_t)v319)) & ~(unint64_t)v317)) & ~(unint64_t)v317)
      + v23;
  v288 = v16;
  if (v18 <= v16)
    v25 = v16;
  else
    v25 = *(_QWORD *)(v7 + 64);
  v258 = v19 + v315;
  v311 = *(_DWORD *)(v11 + 80);
  v259 = *(_QWORD *)(v260 - 8);
  v26 = ((v258 + (v20 & ~(unint64_t)v319)) & ~(unint64_t)v315)
      + *(_QWORD *)(v11 + 64);
  if (v26 <= v25)
    v26 = v25;
  v268 = v321 + 216;
  v283 = v23 + v317;
  v284 = v23 + v14;
  v286 = *(_QWORD *)(v287 - 8);
  v27 = *(_QWORD *)(v13 + 64);
  if (*(_DWORD *)(v13 + 84))
    v28 = *(_QWORD *)(v13 + 64);
  else
    v28 = v27 + 1;
  v267 = v319 + 64;
  v29 = v19 + (v17 & ~(unint64_t)v319);
  v30 = ((v29 + v319) & ~(unint64_t)v319) + v19;
  v285 = v319 + 24;
  v31 = ((v285 + (v29 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)v319) + v19;
  v262 = v321 + 24;
  v263 = v321 + 104;
  v266 = v321 + 160;
  v261 = v321 + 56;
  v265 = v321 + 64;
  v32 = ((v17 + (v265 & ~(unint64_t)v321)) & ~(unint64_t)v319) + v19;
  v278 = v31;
  if (v31 > v24)
    v24 = v31;
  v269 = v26 + 1;
  v289 = v26;
  if (v24 <= v26 + 1)
    v24 = v26 + 1;
  v279 = ((v284
         + ((v283
           + ((v21
             + ((v20
               + ((v20
                 + ((v17 + 1 + (v268 & ~(unint64_t)v321)) & ~(unint64_t)v319)) & ~(unint64_t)v319)) & ~(unint64_t)v319)) & ~(unint64_t)v317)) & ~(unint64_t)v317)) & ~(unint64_t)v14)
       + v28;
  if (v24 <= v279)
    v24 = ((v284
          + ((v283
            + ((v21
              + ((v20
                + ((v20
                  + ((v17 + 1 + (v268 & ~(unint64_t)v321)) & ~(unint64_t)v319)) & ~(unint64_t)v319)) & ~(unint64_t)v319)) & ~(unint64_t)v317)) & ~(unint64_t)v317)) & ~(unint64_t)v14)
        + v28;
  v276 = ((v30 + v319) & ~(unint64_t)v319) + v19;
  v277 = ((v21
         + ((v20 + ((v319 + 64) & ~(unint64_t)v319)) & ~(unint64_t)v319)) & ~(unint64_t)v317)
       + v23;
  if (v24 <= v277)
    v24 = ((v21
          + ((v20 + ((v319 + 64) & ~(unint64_t)v319)) & ~(unint64_t)v319)) & ~(unint64_t)v317)
        + v23;
  if (v24 <= ((v30 + v319) & ~(unint64_t)v319) + v19)
    v24 = ((v30 + v319) & ~(unint64_t)v319) + v19;
  v274 = ((v20
         + ((v20
           + ((v17 + ((v321 + 104) & ~(unint64_t)v321)) & ~(unint64_t)v319)) & ~(unint64_t)v319)) & ~(unint64_t)v319)
       + v19;
  v275 = ((v20
         + ((v17 + ((v321 + 24) & ~(unint64_t)v321)) & ~(unint64_t)v319)) & ~(unint64_t)v319)
       + v19;
  if (v24 <= v275)
    v24 = ((v20
          + ((v17 + ((v321 + 24) & ~(unint64_t)v321)) & ~(unint64_t)v319)) & ~(unint64_t)v319)
        + v19;
  if (v24 <= ((v20
              + ((v20
                + ((v17 + ((v321 + 104) & ~(unint64_t)v321)) & ~(unint64_t)v319)) & ~(unint64_t)v319)) & ~(unint64_t)v319)
            + v19)
    v24 = ((v20
          + ((v20
            + ((v17 + ((v321 + 104) & ~(unint64_t)v321)) & ~(unint64_t)v319)) & ~(unint64_t)v319)) & ~(unint64_t)v319)
        + v19;
  v272 = ((v20
         + ((v20
           + ((v17 + ((v321 + 56) & ~(unint64_t)v321)) & ~(unint64_t)v319)) & ~(unint64_t)v319)) & ~(unint64_t)v319)
       + v19;
  v273 = ((v21
         + ((v20
           + ((v20
             + ((v20
               + ((v17 + ((v321 + 160) & ~(unint64_t)v321)) & ~(unint64_t)v319)) & ~(unint64_t)v319)) & ~(unint64_t)v319)) & ~(unint64_t)v319)) & ~(unint64_t)v317)
       + v23;
  if (v24 <= v273)
    v24 = ((v21
          + ((v20
            + ((v20
              + ((v20
                + ((v17 + ((v321 + 160) & ~(unint64_t)v321)) & ~(unint64_t)v319)) & ~(unint64_t)v319)) & ~(unint64_t)v319)) & ~(unint64_t)v319)) & ~(unint64_t)v317)
        + v23;
  if (v24 <= ((v20
              + ((v20
                + ((v17 + ((v321 + 56) & ~(unint64_t)v321)) & ~(unint64_t)v319)) & ~(unint64_t)v319)) & ~(unint64_t)v319)
            + v19)
    v24 = ((v20
          + ((v20
            + ((v17 + ((v321 + 56) & ~(unint64_t)v321)) & ~(unint64_t)v319)) & ~(unint64_t)v319)) & ~(unint64_t)v319)
        + v19;
  v33 = v32 + 1;
  if (v24 <= v32 + 1)
    v34 = v32 + 1;
  else
    v34 = v24;
  v264 = v321 + 128;
  v270 = ((v20
         + ((v20 + ((v17 + (v264 & ~(unint64_t)v321)) & ~(unint64_t)v319)) & ~(unint64_t)v319)) & ~(unint64_t)v319)
       + v19;
  if (v34 <= v270)
    v34 = ((v20
          + ((v20
            + ((v17 + ((v321 + 128) & ~(unint64_t)v321)) & ~(unint64_t)v319)) & ~(unint64_t)v319)) & ~(unint64_t)v319)
        + v19;
  v281 = v30;
  v282 = *(_QWORD *)(v13 + 64);
  if (v34 <= v30)
    v34 = v30;
  if (v34 <= v27)
    v35 = *(_QWORD *)(v13 + 64);
  else
    v35 = v34;
  v301 = a3[4];
  v36 = *(_QWORD *)(v301 - 8);
  v37 = *(_DWORD *)(v36 + 80);
  if (*(_DWORD *)(v36 + 84))
    v38 = *(_QWORD *)(v36 + 64);
  else
    v38 = *(_QWORD *)(v36 + 64) + 1;
  v39 = *(_QWORD *)(v12 - 8);
  v40 = v319 | (unint64_t)v321 | v317 | (unint64_t)v315 | v14;
  if (*(_DWORD *)(v39 + 84))
    v41 = *(_QWORD *)(v39 + 64);
  else
    v41 = *(_QWORD *)(v39 + 64) + 1;
  v300 = *(_QWORD *)(v301 - 8);
  v42 = *(_DWORD *)(v36 + 80);
  v302 = *(_QWORD *)(v12 - 8);
  v43 = *(_DWORD *)(v39 + 80);
  v44 = v43;
  v45 = v40 | v37 | *(_DWORD *)(v4 + 80) & 0xF8u | v43;
  if (v45 > 7
    || ((v319 | v321 | v317 | v315 | v14 | v37 | v43 | *(_DWORD *)(v4 + 80)) & 0x100000) != 0
    || (v46 = (v40 | 7) + v313,
        ((v41
        + 7
        + ((v38 + v43 + ((v35 + v42 + 1 + (v46 & ~(v40 | 7))) & ~v42)) & ~(unint64_t)v43)) & 0xFFFFFFFFFFFFFFF8)
      + 8 > 0x18))
  {
    v51 = *a2;
    *a1 = *a2;
    v52 = (uint64_t *)(v51 + ((v45 + 16) & ~v45 & 0xFFFFFFFFFFFFFFF8));
    swift_retain();
  }
  else
  {
    v250 = v33;
    __n = v23;
    v252 = v19 + v317;
    v316 = v19 + v319;
    v318 = v19;
    v320 = v7;
    v254 = v41;
    v255 = v35 + v42 + 1;
    v253 = v38;
    v257 = v38 + v43;
    v314 = v41 + 7;
    v256 = v12;
    v47 = ~(v40 | 7);
    v322 = v35;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v4 + 16))(a1, a2, v303);
    v48 = ((unint64_t)a1 + v46) & v47;
    v49 = ((unint64_t)a2 + v46) & v47;
    v53 = ~v6;
    v54 = ~v8;
    v55 = ~v10;
    v56 = ~v15;
    v57 = ~v42;
    v58 = ~v44;
    v59 = (_OWORD *)v48;
    switch(*(_BYTE *)(v49 + v322))
    {
      case 0:
        v290 = v55;
        v60 = *(_OWORD *)v49;
        v61 = *(_OWORD *)(v49 + 16);
        v62 = *(_OWORD *)(v49 + 48);
        *(_OWORD *)(v48 + 32) = *(_OWORD *)(v49 + 32);
        *(_OWORD *)(v48 + 48) = v62;
        *(_OWORD *)v48 = v60;
        *(_OWORD *)(v48 + 16) = v61;
        v63 = *(_OWORD *)(v49 + 64);
        v64 = *(_OWORD *)(v49 + 80);
        v65 = *(_OWORD *)(v49 + 112);
        *(_OWORD *)(v48 + 96) = *(_OWORD *)(v49 + 96);
        *(_OWORD *)(v48 + 112) = v65;
        *(_OWORD *)(v48 + 64) = v63;
        *(_OWORD *)(v48 + 80) = v64;
        v66 = *(_OWORD *)(v49 + 128);
        v67 = *(_OWORD *)(v49 + 144);
        v68 = *(_OWORD *)(v49 + 176);
        *(_OWORD *)(v48 + 160) = *(_OWORD *)(v49 + 160);
        *(_OWORD *)(v48 + 176) = v68;
        *(_OWORD *)(v48 + 128) = v66;
        *(_OWORD *)(v48 + 144) = v67;
        v69 = *(_OWORD *)(v49 + 192);
        v70 = *(_OWORD *)(v49 + 208);
        v71 = *(_OWORD *)(v49 + 224);
        *(_QWORD *)(v48 + 240) = *(_QWORD *)(v49 + 240);
        *(_OWORD *)(v48 + 208) = v70;
        *(_OWORD *)(v48 + 224) = v71;
        *(_OWORD *)(v48 + 192) = v69;
        v72 = (v271 + v48) & v53;
        v304 = v49;
        v73 = (v271 + v49) & v53;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v297 + 16))(v72, v73, v298);
        *(_BYTE *)(v72 + v288) = *(_BYTE *)(v73 + v288);
        v74 = (void *)((v8 + 1 + v72 + v288) & v54);
        v75 = (const void *)((v8 + 1 + v73 + v288) & v54);
        v76 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v320 + 48);
        if (v76(v75, 1, v299))
        {
          memcpy(v74, v75, v318);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v320 + 16))(v74, v75, v299);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v320 + 56))(v74, 0, 1, v299);
        }
        v179 = (void *)(((unint64_t)v74 + v316) & v54);
        v180 = (const void *)(((unint64_t)v75 + v316) & v54);
        v151 = v301;
        v59 = (_OWORD *)v48;
        if (v76(v180, 1, v299))
        {
          memcpy(v179, v180, v318);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v320 + 16))(v179, v180, v299);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v320 + 56))(v179, 0, 1, v299);
        }
        v133 = v256;
        v199 = (void *)(((unint64_t)v179 + v316) & v54);
        v200 = (const void *)(((unint64_t)v180 + v316) & v54);
        if (v76(v200, 1, v299))
        {
          memcpy(v199, v200, v318);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v320 + 16))(v199, v200, v299);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v320 + 56))(v199, 0, 1, v299);
        }
        v52 = a1;
        v211 = ((unint64_t)v199 + v252) & v290;
        v212 = ((unint64_t)v200 + v252) & v290;
        v213 = *(void (**)(unint64_t, unint64_t, uint64_t))(v295 + 16);
        v213(v211, v212, v296);
        v214 = (void *)((v294 + v211) & v290);
        v215 = (const void *)((v294 + v212) & v290);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v295 + 48))(v215, 1, v296))
        {
          memcpy(v214, v215, __n);
        }
        else
        {
          v213((unint64_t)v214, (unint64_t)v215, v296);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v295 + 56))(v214, 0, 1, v296);
        }
        v177 = 0;
        v131 = v302;
        v49 = v304;
        v178 = v255;
        v176 = v322;
        v132 = v300;
        goto LABEL_229;
      case 1:
        v77 = *(unsigned __int8 *)(v49 + v289);
        if (v77 >= 3)
        {
          if (v289 <= 3)
            v78 = v289;
          else
            v78 = 4;
          __asm { BR              X12 }
        }
        if (v77 == 2)
        {
          v247 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v320 + 48);
          if (v247(v49, 1, v299))
          {
            memcpy((void *)v48, (const void *)v49, v318);
          }
          else
          {
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v320 + 16))(v48, v49, v299);
            (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v320 + 56))(v48, 0, 1, v299);
          }
          v248 = (void *)((v316 + v48) & v54);
          v310 = v49;
          v249 = (const void *)((v316 + v49) & v54);
          v132 = v300;
          v133 = v256;
          if (v247((unint64_t)v249, 1, v299))
          {
            memcpy(v248, v249, v318);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v320 + 16))(v248, v249, v299);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v320 + 56))(v248, 0, 1, v299);
          }
          v151 = v301;
          v52 = a1;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v259 + 16))(((unint64_t)v248 + v258) & ~v311, ((unint64_t)v249 + v258) & ~v311, v260);
          v246 = 2;
          v131 = v302;
          v49 = v310;
          v178 = v255;
          v176 = v322;
        }
        else
        {
          if (v77 == 1)
          {
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v320 + 16))(v48, v49, v299);
            v176 = v322;
            v246 = 1;
            v151 = v301;
            v131 = v302;
            v132 = v300;
            v178 = v255;
            v133 = v256;
          }
          else
          {
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v297 + 16))(v48, v49, v298);
            v246 = 0;
            v151 = v301;
            v131 = v302;
            v132 = v300;
            v178 = v255;
            v133 = v256;
            v176 = v322;
          }
          v52 = a1;
        }
        *((_BYTE *)v59 + v289) = v246;
        v177 = 1;
        goto LABEL_229;
      case 2:
        v291 = v55;
        v79 = v57;
        v80 = *(_OWORD *)(v49 + 16);
        *(_OWORD *)v48 = *(_OWORD *)v49;
        *(_OWORD *)(v48 + 16) = v80;
        v81 = *(_OWORD *)(v49 + 32);
        v82 = *(_OWORD *)(v49 + 48);
        v83 = *(_OWORD *)(v49 + 80);
        *(_OWORD *)(v48 + 64) = *(_OWORD *)(v49 + 64);
        *(_OWORD *)(v48 + 80) = v83;
        *(_OWORD *)(v48 + 32) = v81;
        *(_OWORD *)(v48 + 48) = v82;
        v84 = *(_OWORD *)(v49 + 96);
        v85 = *(_OWORD *)(v49 + 112);
        v86 = *(_OWORD *)(v49 + 144);
        *(_OWORD *)(v48 + 128) = *(_OWORD *)(v49 + 128);
        *(_OWORD *)(v48 + 144) = v86;
        *(_OWORD *)(v48 + 96) = v84;
        *(_OWORD *)(v48 + 112) = v85;
        v87 = *(_OWORD *)(v49 + 160);
        v88 = *(_OWORD *)(v49 + 176);
        v89 = *(_OWORD *)(v49 + 192);
        *(_QWORD *)(v48 + 208) = *(_QWORD *)(v49 + 208);
        *(_OWORD *)(v48 + 176) = v88;
        *(_OWORD *)(v48 + 192) = v89;
        *(_OWORD *)(v48 + 160) = v87;
        v90 = (v268 + v48) & v53;
        v305 = v49;
        v91 = (v268 + v49) & v53;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v297 + 16))(v90, v91, v298);
        *(_BYTE *)(v90 + v288) = *(_BYTE *)(v91 + v288);
        v92 = v8 + 1;
        v93 = (void *)((v8 + 1 + v90 + v288) & v54);
        v94 = (const void *)((v92 + v91 + v288) & v54);
        v95 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v320 + 48);
        if (v95(v94, 1, v299))
        {
          memcpy(v93, v94, v318);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v320 + 16))(v93, v94, v299);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v320 + 56))(v93, 0, 1, v299);
        }
        v181 = (void *)(((unint64_t)v93 + v316) & v54);
        v182 = (const void *)(((unint64_t)v94 + v316) & v54);
        v59 = (_OWORD *)v48;
        v57 = v79;
        if (v95(v182, 1, v299))
        {
          memcpy(v181, v182, v318);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v320 + 16))(v181, v182, v299);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v320 + 56))(v181, 0, 1, v299);
        }
        v201 = (void *)(((unint64_t)v181 + v316) & v54);
        v202 = (const void *)(((unint64_t)v182 + v316) & v54);
        if (v95(v202, 1, v299))
        {
          memcpy(v201, v202, v318);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v320 + 16))(v201, v202, v299);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v320 + 56))(v201, 0, 1, v299);
        }
        v52 = a1;
        v216 = (void *)(((unint64_t)v201 + v252) & v291);
        v217 = (const void *)(((unint64_t)v202 + v252) & v291);
        v218 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v295 + 48);
        if (v218(v217, 1, v296))
        {
          memcpy(v216, v217, __n);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v295 + 16))(v216, v217, v296);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v295 + 56))(v216, 0, 1, v296);
        }
        v221 = (void *)(((unint64_t)v216 + v283) & v291);
        v222 = (const void *)(((unint64_t)v217 + v283) & v291);
        v133 = v256;
        if (v218(v222, 1, v296))
        {
          memcpy(v221, v222, __n);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v295 + 16))(v221, v222, v296);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v295 + 56))(v221, 0, 1, v296);
        }
        v132 = v300;
        v225 = (void *)(((unint64_t)v221 + v284) & v56);
        v226 = (const void *)(((unint64_t)v222 + v284) & v56);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v286 + 48))(v226, 1, v287))
        {
          memcpy(v225, v226, v28);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v286 + 16))(v225, v226, v287);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v286 + 56))(v225, 0, 1, v287);
        }
        v177 = 2;
        v151 = v301;
        v131 = v302;
        v178 = v255;
        v49 = v305;
        v176 = v322;
        goto LABEL_229;
      case 3:
        v96 = v55;
        v324 = v57;
        v97 = *(_OWORD *)v49;
        v98 = *(_OWORD *)(v49 + 16);
        v99 = *(_OWORD *)(v49 + 48);
        v59[2] = *(_OWORD *)(v49 + 32);
        v59[3] = v99;
        *v59 = v97;
        v59[1] = v98;
        v100 = (void *)(((unint64_t)v59 + v267) & v54);
        v101 = v49;
        v102 = (const void *)((v267 + v49) & v54);
        v103 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v320 + 48);
        if (v103(v102, 1, v299))
        {
          memcpy(v100, v102, v318);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v320 + 16))(v100, v102, v299);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v320 + 56))(v100, 0, 1, v299);
        }
        v183 = (void *)(((unint64_t)v100 + v316) & v54);
        v184 = (const void *)(((unint64_t)v102 + v316) & v54);
        if (v103(v184, 1, v299))
        {
          memcpy(v183, v184, v318);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v320 + 16))(v183, v184, v299);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v320 + 56))(v183, 0, 1, v299);
        }
        v151 = v301;
        v131 = v302;
        v52 = a1;
        v203 = (void *)(((unint64_t)v183 + v252) & v96);
        v204 = (const void *)(((unint64_t)v184 + v252) & v96);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v295 + 48))(v204, 1, v296))
        {
          memcpy(v203, v204, __n);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v295 + 16))(v203, v204, v296);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v295 + 56))(v203, 0, 1, v296);
        }
        v177 = 3;
        v178 = v255;
        v133 = v256;
        v49 = v101;
        v176 = v322;
        v57 = v324;
        v132 = v300;
        goto LABEL_229;
      case 4:
        v325 = v57;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v297 + 16))(v48, v49, v298);
        v104 = v49;
        v105 = (const void *)((v17 + v49) & v54);
        v106 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v320 + 48);
        if (v106(v105, 1, v299))
        {
          memcpy((void *)((v17 + v48) & v54), v105, v318);
        }
        else
        {
          (*(void (**)(unint64_t, const void *, uint64_t))(v320 + 16))((v17 + v48) & v54, v105, v299);
          (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v320 + 56))((v17 + v48) & v54, 0, 1, v299);
        }
        v312 = v58;
        v185 = (void *)((v316 + ((v17 + v48) & v54)) & v54);
        v186 = (const void *)(((unint64_t)v105 + v316) & v54);
        v132 = v300;
        if (v106(v186, 1, v299))
        {
          memcpy(v185, v186, v318);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v320 + 16))(v185, v186, v299);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v320 + 56))(v185, 0, 1, v299);
        }
        v151 = v301;
        v133 = v256;
        v205 = (void *)(((unint64_t)v185 + v316) & v54);
        v206 = (const void *)(((unint64_t)v186 + v316) & v54);
        if (v106(v206, 1, v299))
        {
          memcpy(v205, v206, v318);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v320 + 16))(v205, v206, v299);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v320 + 56))(v205, 0, 1, v299);
        }
        v177 = 4;
        goto LABEL_226;
      case 5:
        v312 = v58;
        v325 = v57;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v297 + 16))(v48, v49, v298);
        v147 = (v17 + v48) & v54;
        v309 = v49;
        v148 = (const void *)((v17 + v49) & v54);
        v149 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v320 + 48);
        if (v149(v148, 1, v299))
        {
          v150 = v318;
          memcpy((void *)((v17 + v48) & v54), v148, v318);
          v132 = v300;
          v151 = v301;
          v133 = v256;
        }
        else
        {
          (*(void (**)(unint64_t, const void *, uint64_t))(v320 + 16))((v17 + v48) & v54, v148, v299);
          (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v320 + 56))((v17 + v48) & v54, 0, 1, v299);
          v132 = v300;
          v151 = v301;
          v133 = v256;
          v150 = v318;
        }
        *(_BYTE *)(v147 + v150) = *((_BYTE *)v148 + v150);
        v227 = (v147 + v150) & 0xFFFFFFFFFFFFFFF8;
        v228 = ((unint64_t)v148 + v150) & 0xFFFFFFFFFFFFFFF8;
        *(_OWORD *)(v227 + 8) = *(_OWORD *)(v228 + 8);
        v229 = (void *)((v285 + v227) & v54);
        v230 = (const void *)((v285 + v228) & v54);
        if (v149(v230, 1, v299))
        {
          memcpy(v229, v230, v150);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v320 + 16))(v229, v230, v299);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v320 + 56))(v229, 0, 1, v299);
        }
        v177 = 5;
        v131 = v302;
        v49 = v309;
        v178 = v255;
        goto LABEL_227;
      case 6:
        v312 = v58;
        v325 = v57;
        v152 = *(_OWORD *)v49;
        *(_QWORD *)(v48 + 16) = *(_QWORD *)(v49 + 16);
        *(_OWORD *)v48 = v152;
        v153 = (v262 + v48) & v53;
        v104 = v49;
        v154 = (v262 + v49) & v53;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v297 + 16))(v153, v154, v298);
        v155 = (void *)((v17 + v153) & v54);
        v156 = (const void *)((v17 + v154) & v54);
        v157 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v320 + 48);
        if (v157(v156, 1, v299))
        {
          memcpy(v155, v156, v318);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v320 + 16))(v155, v156, v299);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v320 + 56))(v155, 0, 1, v299);
        }
        v132 = v300;
        v151 = v301;
        v133 = v256;
        v231 = (void *)(((unint64_t)v155 + v316) & v54);
        v232 = (const void *)(((unint64_t)v156 + v316) & v54);
        if (v157(v232, 1, v299))
        {
          memcpy(v231, v232, v318);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v320 + 16))(v231, v232, v299);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v320 + 56))(v231, 0, 1, v299);
        }
        v177 = 6;
        goto LABEL_226;
      case 7:
        v326 = v57;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v297 + 16))(v48, v49, v298);
        v107 = (v17 + v48) & v54;
        v306 = v49;
        v108 = (const void *)((v17 + v49) & v54);
        v109 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v320 + 48);
        if (v109(v108, 1, v299))
        {
          v110 = v318;
          memcpy((void *)((v17 + v48) & v54), v108, v318);
        }
        else
        {
          (*(void (**)(unint64_t, const void *, uint64_t))(v320 + 16))((v17 + v48) & v54, v108, v299);
          (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v320 + 56))((v17 + v48) & v54, 0, 1, v299);
          v110 = v318;
        }
        *(_BYTE *)(v107 + v110) = *((_BYTE *)v108 + v110);
        v187 = (v107 + v110) & 0xFFFFFFFFFFFFFFF8;
        v188 = ((unint64_t)v108 + v110) & 0xFFFFFFFFFFFFFFF8;
        *(_OWORD *)(v187 + 8) = *(_OWORD *)(v188 + 8);
        v189 = (void *)((v285 + v187) & v54);
        v190 = (const void *)((v285 + v188) & v54);
        v132 = v300;
        v151 = v301;
        v133 = v256;
        if (v109(v190, 1, v299))
        {
          memcpy(v189, v190, v110);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v320 + 16))(v189, v190, v299);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v320 + 56))(v189, 0, 1, v299);
        }
        v177 = 7;
        goto LABEL_170;
      case 8:
        v325 = v57;
        v158 = *(_OWORD *)v49;
        v159 = *(_OWORD *)(v49 + 32);
        *(_OWORD *)(v48 + 16) = *(_OWORD *)(v49 + 16);
        *(_OWORD *)(v48 + 32) = v159;
        *(_OWORD *)v48 = v158;
        v160 = *(_OWORD *)(v49 + 48);
        v161 = *(_OWORD *)(v49 + 64);
        v162 = *(_OWORD *)(v49 + 80);
        *(_QWORD *)(v48 + 96) = *(_QWORD *)(v49 + 96);
        *(_OWORD *)(v48 + 64) = v161;
        *(_OWORD *)(v48 + 80) = v162;
        *(_OWORD *)(v48 + 48) = v160;
        v163 = (v263 + v48) & v53;
        v104 = v49;
        v164 = (v263 + v49) & v53;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v297 + 16))(v163, v164, v298);
        v165 = (void *)((v17 + v163) & v54);
        v166 = (const void *)((v17 + v164) & v54);
        v167 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v320 + 48);
        if (v167(v166, 1, v299))
        {
          memcpy(v165, v166, v318);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v320 + 16))(v165, v166, v299);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v320 + 56))(v165, 0, 1, v299);
        }
        v132 = v300;
        v233 = (void *)(((unint64_t)v165 + v316) & v54);
        v234 = (const void *)(((unint64_t)v166 + v316) & v54);
        v312 = v58;
        if (v167(v234, 1, v299))
        {
          memcpy(v233, v234, v318);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v320 + 16))(v233, v234, v299);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v320 + 56))(v233, 0, 1, v299);
        }
        v151 = v301;
        v133 = v256;
        v237 = (void *)(((unint64_t)v233 + v316) & v54);
        v238 = (const void *)(((unint64_t)v234 + v316) & v54);
        if (v167(v238, 1, v299))
        {
          memcpy(v237, v238, v318);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v320 + 16))(v237, v238, v299);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v320 + 56))(v237, 0, 1, v299);
        }
        v177 = 8;
        goto LABEL_226;
      case 9:
        v292 = v55;
        v327 = v57;
        v111 = *(_OWORD *)(v49 + 16);
        *(_OWORD *)v48 = *(_OWORD *)v49;
        *(_OWORD *)(v48 + 16) = v111;
        v112 = *(_OWORD *)(v49 + 32);
        v113 = *(_OWORD *)(v49 + 48);
        v114 = *(_OWORD *)(v49 + 80);
        *(_OWORD *)(v48 + 64) = *(_OWORD *)(v49 + 64);
        *(_OWORD *)(v48 + 80) = v114;
        *(_OWORD *)(v48 + 32) = v112;
        *(_OWORD *)(v48 + 48) = v113;
        v115 = *(_OWORD *)(v49 + 96);
        v116 = *(_OWORD *)(v49 + 112);
        v117 = *(_OWORD *)(v49 + 144);
        *(_OWORD *)(v48 + 128) = *(_OWORD *)(v49 + 128);
        *(_OWORD *)(v48 + 144) = v117;
        *(_OWORD *)(v48 + 96) = v115;
        *(_OWORD *)(v48 + 112) = v116;
        v118 = (v266 + v48) & v53;
        v307 = v49;
        v119 = (v266 + v49) & v53;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v297 + 16))(v118, v119, v298);
        v120 = (void *)((v17 + v118) & v54);
        v121 = (const void *)((v17 + v119) & v54);
        v122 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v320 + 48);
        if (v122(v121, 1, v299))
        {
          memcpy(v120, v121, v318);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v320 + 16))(v120, v121, v299);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v320 + 56))(v120, 0, 1, v299);
        }
        v191 = v296;
        v192 = (void *)(((unint64_t)v120 + v316) & v54);
        v193 = (const void *)(((unint64_t)v121 + v316) & v54);
        v132 = v300;
        v151 = v301;
        if (v122(v193, 1, v299))
        {
          memcpy(v192, v193, v318);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v320 + 16))(v192, v193, v299);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v320 + 56))(v192, 0, 1, v299);
        }
        v207 = (void *)(((unint64_t)v192 + v316) & v54);
        v208 = (const void *)(((unint64_t)v193 + v316) & v54);
        if (v122(v208, 1, v299))
        {
          memcpy(v207, v208, v318);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v320 + 16))(v207, v208, v299);
          v191 = v296;
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v320 + 56))(v207, 0, 1, v299);
        }
        v219 = (void *)(((unint64_t)v207 + v316) & v54);
        v220 = (const void *)(((unint64_t)v208 + v316) & v54);
        if (v122(v220, 1, v299))
        {
          memcpy(v219, v220, v318);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v320 + 16))(v219, v220, v299);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v320 + 56))(v219, 0, 1, v299);
        }
        v131 = v302;
        v52 = a1;
        v223 = (void *)(((unint64_t)v219 + v252) & v292);
        v224 = (const void *)(((unint64_t)v220 + v252) & v292);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v295 + 48))(v224, 1, v191))
        {
          memcpy(v223, v224, __n);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v295 + 16))(v223, v224, v191);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v295 + 56))(v223, 0, 1, v191);
        }
        v177 = 9;
        v178 = v255;
        v133 = v256;
        v49 = v307;
        v176 = v322;
        v57 = v327;
        goto LABEL_229;
      case 0xA:
        v325 = v57;
        v168 = *(_OWORD *)v49;
        v169 = *(_OWORD *)(v49 + 16);
        v170 = *(_OWORD *)(v49 + 32);
        *(_QWORD *)(v48 + 48) = *(_QWORD *)(v49 + 48);
        *(_OWORD *)(v48 + 16) = v169;
        *(_OWORD *)(v48 + 32) = v170;
        *(_OWORD *)v48 = v168;
        v171 = (v261 + v48) & v53;
        v104 = v49;
        v172 = (v261 + v49) & v53;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v297 + 16))(v171, v172, v298);
        v173 = (void *)((v17 + v171) & v54);
        v174 = (const void *)((v17 + v172) & v54);
        v175 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v320 + 48);
        if (v175(v174, 1, v299))
        {
          memcpy(v173, v174, v318);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v320 + 16))(v173, v174, v299);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v320 + 56))(v173, 0, 1, v299);
        }
        v132 = v300;
        v235 = (void *)(((unint64_t)v173 + v316) & v54);
        v236 = (const void *)(((unint64_t)v174 + v316) & v54);
        v312 = v58;
        if (v175(v236, 1, v299))
        {
          memcpy(v235, v236, v318);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v320 + 16))(v235, v236, v299);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v320 + 56))(v235, 0, 1, v299);
        }
        v151 = v301;
        v133 = v256;
        v239 = (void *)(((unint64_t)v235 + v316) & v54);
        v240 = (const void *)(((unint64_t)v236 + v316) & v54);
        if (v175(v240, 1, v299))
        {
          memcpy(v239, v240, v318);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v320 + 16))(v239, v240, v299);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v320 + 56))(v239, 0, 1, v299);
        }
        v177 = 10;
        goto LABEL_226;
      case 0xB:
        v293 = v55;
        v328 = v57;
        v123 = *(_OWORD *)v49;
        v124 = *(_OWORD *)(v49 + 16);
        v125 = *(_OWORD *)(v49 + 48);
        *(_OWORD *)(v48 + 32) = *(_OWORD *)(v49 + 32);
        *(_OWORD *)(v48 + 48) = v125;
        *(_OWORD *)v48 = v123;
        *(_OWORD *)(v48 + 16) = v124;
        v126 = (v265 + v48) & v53;
        v308 = v49;
        v127 = (v265 + v49) & v53;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v297 + 16))(v126, v127, v298);
        v128 = (void *)((v17 + v126) & v54);
        v129 = (const void *)((v17 + v127) & v54);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v320 + 48))(v129, 1, v299))
        {
          v130 = v318;
          memcpy(v128, v129, v318);
          v131 = v302;
          v132 = v300;
          v133 = v256;
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v320 + 16))(v128, v129, v299);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v320 + 56))(v128, 0, 1, v299);
          v131 = v302;
          v132 = v300;
          v133 = v256;
          v130 = v318;
        }
        *((_BYTE *)v128 + v130) = *((_BYTE *)v129 + v130);
        v194 = ((v294 + ((v252 + ((v316 + (((v280 | v8) + v130) & v54)) & v54)) & v293)) & v293) + __n;
        if (v269 > v194)
          v194 = v269;
        if (v279 > v194)
          v194 = v279;
        if (v277 > v194)
          v194 = v277;
        if (v276 > v194)
          v194 = v276;
        if (v278 > v194)
          v194 = v278;
        if (v275 > v194)
          v194 = v275;
        if (v278 > v194)
          v194 = v278;
        if (v274 > v194)
          v194 = v274;
        if (v273 > v194)
          v194 = v273;
        if (v272 > v194)
          v194 = v272;
        if (v250 > v194)
          v194 = v250;
        if (v270 > v194)
          v194 = v270;
        if (v282 > v194)
          v194 = v282;
        if (v281 <= v194)
          v176 = v194;
        else
          v176 = v281;
        v177 = 11;
        v151 = v301;
        v178 = v255;
        v49 = v308;
        v57 = v328;
        break;
      case 0xC:
        v325 = v57;
        v134 = *(_OWORD *)v49;
        v135 = *(_OWORD *)(v49 + 16);
        v136 = *(_OWORD *)(v49 + 48);
        *(_OWORD *)(v48 + 32) = *(_OWORD *)(v49 + 32);
        *(_OWORD *)(v48 + 48) = v136;
        *(_OWORD *)v48 = v134;
        *(_OWORD *)(v48 + 16) = v135;
        v137 = *(_OWORD *)(v49 + 64);
        v138 = *(_OWORD *)(v49 + 80);
        v139 = *(_OWORD *)(v49 + 112);
        *(_OWORD *)(v48 + 96) = *(_OWORD *)(v49 + 96);
        *(_OWORD *)(v48 + 112) = v139;
        *(_OWORD *)(v48 + 64) = v137;
        *(_OWORD *)(v48 + 80) = v138;
        v140 = (v264 + v48) & v53;
        v104 = v49;
        v141 = (v264 + v49) & v53;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v297 + 16))(v140, v141, v298);
        v142 = (void *)((v17 + v140) & v54);
        v143 = (const void *)((v17 + v141) & v54);
        v144 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v320 + 48);
        if (v144(v143, 1, v299))
        {
          memcpy(v142, v143, v318);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v320 + 16))(v142, v143, v299);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v320 + 56))(v142, 0, 1, v299);
        }
        v312 = v58;
        v195 = (void *)(((unint64_t)v142 + v316) & v54);
        v196 = (const void *)(((unint64_t)v143 + v316) & v54);
        v132 = v300;
        if (v144(v196, 1, v299))
        {
          memcpy(v195, v196, v318);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v320 + 16))(v195, v196, v299);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v320 + 56))(v195, 0, 1, v299);
        }
        v151 = v301;
        v133 = v256;
        v209 = (void *)(((unint64_t)v195 + v316) & v54);
        v210 = (const void *)(((unint64_t)v196 + v316) & v54);
        if (v144(v210, 1, v299))
        {
          memcpy(v209, v210, v318);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v320 + 16))(v209, v210, v299);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v320 + 56))(v209, 0, 1, v299);
        }
        v177 = 12;
LABEL_226:
        v131 = v302;
        v178 = v255;
        v49 = v104;
LABEL_227:
        v176 = v322;
        v57 = v325;
        v58 = v312;
        break;
      case 0xD:
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v286 + 16))(v48, v49, v287);
        v176 = v322;
        v177 = 13;
        v151 = v301;
        v131 = v302;
        v132 = v300;
        v178 = v255;
        v133 = v256;
        break;
      case 0xE:
        v326 = v57;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v297 + 16))(v48, v49, v298);
        v306 = v49;
        v145 = (const void *)((v17 + v49) & v54);
        v146 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v320 + 48);
        if (v146(v145, 1, v299))
        {
          memcpy((void *)((v17 + v48) & v54), v145, v318);
        }
        else
        {
          (*(void (**)(unint64_t, const void *, uint64_t))(v320 + 16))((v17 + v48) & v54, v145, v299);
          (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v320 + 56))((v17 + v48) & v54, 0, 1, v299);
        }
        v197 = (void *)((v316 + ((v17 + v48) & v54)) & v54);
        v198 = (const void *)(((unint64_t)v145 + v316) & v54);
        v132 = v300;
        v151 = v301;
        v133 = v256;
        if (v146(v198, 1, v299))
        {
          memcpy(v197, v198, v318);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v320 + 16))(v197, v198, v299);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v320 + 56))(v197, 0, 1, v299);
        }
        v177 = 14;
LABEL_170:
        v131 = v302;
        v49 = v306;
        v178 = v255;
        v176 = v322;
        v57 = v326;
        break;
      default:
        if (v322 <= 3)
          v50 = v322;
        else
          v50 = 4;
        __asm { BR              X12 }
        return result;
    }
    v52 = a1;
LABEL_229:
    *((_BYTE *)v59 + v176) = v177;
    v241 = (void *)(((unint64_t)v59 + v178) & v57);
    v242 = (const void *)((v178 + v49) & v57);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v132 + 48))(v242, 1, v151))
    {
      memcpy(v241, v242, v253);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v132 + 16))(v241, v242, v151);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v132 + 56))(v241, 0, 1, v151);
    }
    v243 = (void *)(((unint64_t)v241 + v257) & v58);
    v244 = (const void *)(((unint64_t)v242 + v257) & v58);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v131 + 48))(v244, 1, v133))
    {
      memcpy(v243, v244, v254);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v131 + 16))(v243, v244, v133);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v131 + 56))(v243, 0, 1, v133);
    }
    *(_QWORD *)(((unint64_t)v243 + v314) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v244 + v314) & 0xFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
  }
  return v52;
}

uint64_t sub_23BF2F738(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int (*v50)(uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int (*v55)(uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int (*v68)(uint64_t, uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int (*v75)(uint64_t, uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int (*v86)(uint64_t, uint64_t, uint64_t);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int (*v93)(uint64_t, uint64_t, uint64_t);
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t result;
  void (*v112)(void);
  unsigned int (*v113)(void);
  uint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void (*v150)(uint64_t, uint64_t);
  unsigned int (*v151)(uint64_t, uint64_t, uint64_t);
  uint64_t v152;

  v4 = *(_QWORD *)(a2[5] - 8);
  (*(void (**)(void))(v4 + 8))();
  v5 = *(_QWORD *)(v4 + 64) + a1;
  v126 = a2[3];
  v6 = *(_QWORD *)(v126 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v127 = sub_23BFF82CC();
  v8 = *(_QWORD *)(v127 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v124 = a2[2];
  v10 = *(_QWORD *)(v124 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = sub_23BFF8368();
  v13 = v6;
  v118 = v12;
  v14 = *(_QWORD *)(v12 - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v130 = a2;
  v123 = a2[7];
  v16 = *(_QWORD *)(v123 - 8);
  v17 = *(unsigned __int8 *)(v16 + 80);
  v18 = v7 | v9 | v11 | v15 | v17 | 7;
  v19 = (v5 + v18) & ~v18;
  v20 = *(_QWORD *)(v6 + 64);
  v21 = v20 + v9;
  v22 = v20 + v9 + 1;
  v146 = v22 + ((v7 + 248) & ~v7);
  v23 = *(_DWORD *)(v8 + 84);
  v149 = v8;
  v24 = *(_QWORD *)(v8 + 64);
  v119 = v23;
  if (v23)
    v25 = v24;
  else
    v25 = v24 + 1;
  v26 = v25 + v9;
  v27 = v25 + v11;
  v28 = *(_QWORD *)(v10 + 64);
  v128 = v28 + v11;
  v125 = v10;
  if (*(_DWORD *)(v10 + 84))
    v29 = *(_QWORD *)(v10 + 64);
  else
    v29 = v28 + 1;
  v30 = ((v28 + v11 + ((v25 + v11 + ((v25 + v9 + ((v25 + v9 + (v146 & ~v9)) & ~v9)) & ~v9)) & ~v11)) & ~v11) + v29;
  if (v24 <= v20)
    v31 = v20;
  else
    v31 = v24;
  v117 = v14;
  v32 = *(_QWORD *)(v14 + 64);
  if (((v25 + v15 + (v26 & ~v9)) & ~v15) + v32 > v31)
    v31 = ((v25 + v15 + (v26 & ~v9)) & ~v15) + v32;
  v120 = v29 + v11;
  v121 = v29 + v17;
  v33 = *(_QWORD *)(v16 + 64);
  if (*(_DWORD *)(v16 + 84))
    v34 = *(_QWORD *)(v16 + 64);
  else
    v34 = v33 + 1;
  v35 = v34
      + ((v29
        + v17
        + ((v29 + v11 + ((v27 + ((v26 + ((v26 + ((v22 + ((v7 + 216) & ~v7)) & ~v9)) & ~v9)) & ~v9)) & ~v11)) & ~v11)) & ~v17);
  v36 = ((v27 + ((v26 + ((v9 + 64) & ~v9)) & ~v9)) & ~v11) + v29;
  v37 = v25 + (v21 & ~v9);
  v38 = ((v37 + v9) & ~v9) + v25;
  v39 = ((v9 + 24 + (v37 & 0xFFFFFFFFFFFFFFF8)) & ~v9) + v25;
  v129 = v25 + v11;
  v40 = ((v27 + ((v26 + ((v26 + ((v26 + ((v21 + ((v7 + 160) & ~v7)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v11) + v29;
  v41 = ((v21 + ((v7 + 64) & ~v7)) & ~v9) + v25;
  if (v39 > v30)
    v30 = v39;
  v134 = v31 + 1;
  if (v30 <= v31 + 1)
    v30 = v31 + 1;
  if (v30 <= v35)
    v30 = v35;
  if (v30 <= v36)
    v30 = v36;
  if (v30 <= ((v38 + v9) & ~v9) + v25)
    v30 = ((v38 + v9) & ~v9) + v25;
  v131 = ((v26 + ((v21 + ((v7 + 24) & ~v7)) & ~v9)) & ~v9) + v25;
  if (v30 <= v131)
    v30 = ((v26 + ((v21 + ((v7 + 24) & ~v7)) & ~v9)) & ~v9) + v25;
  v137 = v40;
  v138 = ((v26 + ((v26 + ((v21 + ((v7 + 104) & ~v7)) & ~v9)) & ~v9)) & ~v9) + v25;
  if (v30 <= v138)
    v30 = ((v26 + ((v26 + ((v21 + ((v7 + 104) & ~v7)) & ~v9)) & ~v9)) & ~v9) + v25;
  if (v30 <= v40)
    v30 = v40;
  if (v30 <= ((v26 + ((v26 + ((v21 + ((v7 + 56) & ~v7)) & ~v9)) & ~v9)) & ~v9) + v25)
    v30 = ((v26 + ((v26 + ((v21 + ((v7 + 56) & ~v7)) & ~v9)) & ~v9)) & ~v9) + v25;
  v135 = v41 + 1;
  v136 = ((v26 + ((v26 + ((v21 + ((v7 + 56) & ~v7)) & ~v9)) & ~v9)) & ~v9) + v25;
  if (v30 <= v41 + 1)
    v30 = v41 + 1;
  v133 = ((v26 + ((v26 + ((v21 + ((v7 + 128) & ~v7)) & ~v9)) & ~v9)) & ~v9) + v25;
  if (v30 <= v133)
    v30 = ((v26 + ((v26 + ((v21 + ((v7 + 128) & ~v7)) & ~v9)) & ~v9)) & ~v9) + v25;
  if (v30 <= v38)
    v30 = v38;
  if (v30 <= v33)
    v42 = *(_QWORD *)(v16 + 64);
  else
    v42 = v30;
  v43 = *(unsigned __int8 *)(v19 + v42);
  v45 = ~v7;
  v152 = ~v9;
  v147 = v19;
  v148 = ~v11;
  v46 = ~v15;
  v144 = *(_QWORD *)(v16 + 64);
  v145 = v29;
  v142 = v35;
  v143 = v38;
  v141 = v36;
  v139 = ((v38 + v9) & ~v9) + v25;
  v140 = v39;
  switch(v43)
  {
    case 0:
      v53 = (v19 + v7 + 248) & v45;
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v53, v126);
      v54 = (v22 + v53) & v152;
      v55 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v149 + 48);
      if (!v55(v54, 1, v127))
        (*(void (**)(uint64_t, uint64_t))(v149 + 8))(v54, v127);
      v56 = (v26 + v54) & v152;
      v58 = v128;
      v57 = v129;
      if (!v55(v56, 1, v127))
        (*(void (**)(uint64_t, uint64_t))(v149 + 8))(v56, v127);
      v59 = (v26 + v56) & v152;
      v60 = v130;
      if (!v55(v59, 1, v127))
        (*(void (**)(uint64_t, uint64_t))(v149 + 8))(v59, v127);
      v61 = (v129 + v59) & v148;
      v150 = *(void (**)(uint64_t, uint64_t))(v125 + 8);
      v150(v61, v124);
      v62 = (v128 + v61) & v148;
      v63 = v131;
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v125 + 48))(v62, 1, v124))
        v150(v62, v124);
      goto LABEL_113;
    case 1:
      v64 = *(unsigned __int8 *)(v19 + v31);
      if (v64 >= 3)
      {
        if (v31 <= 3)
          v65 = v31;
        else
          v65 = 4;
        __asm { BR              X13 }
      }
      v63 = ((v26 + ((v21 + ((v7 + 24) & ~v7)) & ~v9)) & ~v9) + v25;
      if (v64 == 2)
      {
        v132 = v25 + v15;
        v113 = *(unsigned int (**)(void))(v149 + 48);
        v114 = v19;
        if (!v113())
          (*(void (**)(uint64_t, uint64_t))(v149 + 8))(v114, v127);
        v115 = (v26 + v114) & v152;
        v116 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v113)(v115, 1, v127);
        v58 = v128;
        v57 = v129;
        if (!v116)
          (*(void (**)(uint64_t, uint64_t))(v149 + 8))(v115, v127);
        (*(void (**)(uint64_t, uint64_t))(v117 + 8))((v132 + v115) & v46, v118);
        v60 = v130;
      }
      else
      {
        if (v64 == 1)
          v112 = *(void (**)(void))(v149 + 8);
        else
          v112 = *(void (**)(void))(v13 + 8);
        v112();
        v57 = v129;
        v60 = v130;
        v58 = v128;
      }
      goto LABEL_113;
    case 2:
      v122 = ~v17;
      v66 = (v19 + v7 + 216) & v45;
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v66, v126);
      v67 = (v22 + v66) & v152;
      v68 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v149 + 48);
      if (!v68(v67, 1, v127))
        (*(void (**)(uint64_t, uint64_t))(v149 + 8))(v67, v127);
      v69 = (v26 + v67) & v152;
      v57 = v129;
      if (!v68(v69, 1, v127))
        (*(void (**)(uint64_t, uint64_t))(v149 + 8))(v69, v127);
      v70 = (v26 + v69) & v152;
      v58 = v128;
      if (!v68(v70, 1, v127))
        (*(void (**)(uint64_t, uint64_t))(v149 + 8))(v70, v127);
      v71 = (v129 + v70) & v148;
      v151 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v125 + 48);
      v60 = v130;
      if (!v151(v71, 1, v124))
        (*(void (**)(uint64_t, uint64_t))(v125 + 8))(v71, v124);
      v72 = (v120 + v71) & v148;
      if (!v151(v72, 1, v124))
        (*(void (**)(uint64_t, uint64_t))(v125 + 8))(v72, v124);
      v73 = (v121 + v72) & v122;
      v63 = v131;
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v73, 1, v123))
        (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v73, v123);
      goto LABEL_113;
    case 3:
      v74 = (v19 + v9 + 64) & v152;
      v75 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v149 + 48);
      v76 = v127;
      if (!v75(v74, 1, v127))
        (*(void (**)(uint64_t, uint64_t))(v149 + 8))(v74, v127);
      v77 = (v26 + v74) & v152;
      v57 = v129;
      v60 = v130;
      v58 = v128;
      if (!v75(v77, 1, v127))
        goto LABEL_79;
      goto LABEL_80;
    case 4:
      v79 = v19;
      (*(void (**)(void))(v13 + 8))();
      v80 = v21 + v79;
      goto LABEL_100;
    case 5:
    case 7:
      v47 = v19;
      (*(void (**)(void))(v13 + 8))();
      v48 = ~v9;
      v49 = (v21 + v47) & v152;
      v50 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v149 + 48);
      v51 = v127;
      if (!v50(v49, 1, v127))
        (*(void (**)(uint64_t, uint64_t))(v149 + 8))(v49, v127);
      v52 = v9 + 24 + ((v49 + v25) & 0xFFFFFFFFFFFFFFF8);
      goto LABEL_111;
    case 6:
      v81 = (v19 + v7 + 24) & v45;
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v81, v126);
      v82 = v21 + v81;
      goto LABEL_108;
    case 8:
      v83 = v19 + v7 + 104;
      goto LABEL_99;
    case 9:
      v84 = (v19 + v7 + 160) & v45;
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v84, v126);
      v85 = (v21 + v84) & v152;
      v86 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v149 + 48);
      v76 = v127;
      if (!v86(v85, 1, v127))
        (*(void (**)(uint64_t, uint64_t))(v149 + 8))(v85, v127);
      v87 = (v26 + v85) & v152;
      if (!v86(v87, 1, v127))
        (*(void (**)(uint64_t, uint64_t))(v149 + 8))(v87, v127);
      v88 = (v26 + v87) & v152;
      v57 = v129;
      v60 = v130;
      v58 = v128;
      if (!v86(v88, 1, v127))
        (*(void (**)(uint64_t, uint64_t))(v149 + 8))(v88, v127);
      v77 = (v26 + v88) & v152;
      if (!v86(v77, 1, v127))
LABEL_79:
        (*(void (**)(uint64_t, uint64_t))(v149 + 8))(v77, v76);
LABEL_80:
      v78 = (v57 + v77) & v148;
      v63 = v131;
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v125 + 48))(v78, 1, v124))
        (*(void (**)(uint64_t, uint64_t))(v125 + 8))(v78, v124);
      goto LABEL_113;
    case 10:
      v83 = v19 + v7 + 56;
      goto LABEL_99;
    case 11:
      v89 = (v19 + v7 + 64) & v45;
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v89, v126);
      v90 = (v21 + v89) & v152;
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v149 + 48))(v90, 1, v127))
        (*(void (**)(uint64_t, uint64_t))(v149 + 8))(v90, v127);
      v57 = v129;
      v60 = v130;
      v58 = v128;
      v63 = v131;
      if (!v119)
        goto LABEL_113;
      goto LABEL_114;
    case 12:
      v83 = v19 + v7 + 128;
LABEL_99:
      v91 = v83 & v45;
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v83 & v45, v126);
      v80 = v21 + v91;
LABEL_100:
      v92 = v80 & v152;
      v93 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v149 + 48);
      v51 = v127;
      if (!v93(v80 & v152, 1, v127))
        (*(void (**)(uint64_t, uint64_t))(v149 + 8))(v92, v127);
      v94 = (v26 + v92) & v152;
      v95 = v93(v94, 1, v127);
      v96 = ~v9;
      v57 = v129;
      v60 = v130;
      v58 = v128;
      v63 = v131;
      if (!v95)
      {
        (*(void (**)(uint64_t, uint64_t))(v149 + 8))(v94, v127);
        v96 = ~v9;
      }
      v97 = (v26 + v94) & v96;
      if (!v93(v97, 1, v127))
        goto LABEL_112;
      goto LABEL_113;
    case 13:
      (*(void (**)(void))(v16 + 8))();
      v57 = v129;
      v60 = v130;
      v58 = v128;
      v63 = v131;
      goto LABEL_113;
    case 14:
      v98 = v19;
      (*(void (**)(void))(v13 + 8))();
      v82 = v21 + v98;
LABEL_108:
      v48 = ~v9;
      v99 = v82 & v152;
      v50 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v149 + 48);
      v51 = v127;
      if (!v50(v82 & v152, 1, v127))
        (*(void (**)(uint64_t, uint64_t))(v149 + 8))(v99, v127);
      v52 = v26 + v99;
LABEL_111:
      v97 = v52 & v48;
      v100 = v50(v52 & v48, 1, v51);
      v57 = v129;
      v60 = v130;
      v58 = v128;
      v63 = v131;
      if (!v100)
LABEL_112:
        (*(void (**)(unint64_t, uint64_t))(v149 + 8))(v97, v51);
LABEL_113:
      v24 = v25;
LABEL_114:
      v101 = ((v58 + ((v57 + ((v26 + (((v146 | v9) + v24) & v152)) & v152)) & v148)) & v148) + v145;
      if (v134 > v101)
        v101 = v134;
      if (v142 > v101)
        v101 = v142;
      if (v141 > v101)
        v101 = v141;
      if (v139 > v101)
        v101 = v139;
      if (v140 > v101)
        v101 = v140;
      if (v63 > v101)
        v101 = v63;
      if (v140 > v101)
        v101 = v140;
      if (v138 > v101)
        v101 = v138;
      if (v137 > v101)
        v101 = v137;
      if (v136 > v101)
        v101 = v136;
      if (v135 > v101)
        v101 = v135;
      if (v133 > v101)
        v101 = v133;
      if (v144 > v101)
        v101 = v144;
      if (v143 > v101)
        v101 = v143;
      v102 = v60[4];
      v103 = *(_QWORD *)(v102 - 8);
      v104 = ((v147 | 1) + *(unsigned __int8 *)(v103 + 80) + v101) & ~(unint64_t)*(unsigned __int8 *)(v103 + 80);
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v103 + 48))(v104, 1, v102))
        (*(void (**)(unint64_t, uint64_t))(v103 + 8))(v104, v102);
      v105 = *(_DWORD *)(v103 + 84);
      v106 = *(_QWORD *)(v103 + 64);
      v107 = v60[6];
      v108 = *(_QWORD *)(v107 - 8);
      v109 = v106 + v104;
      if (!v105)
        ++v109;
      v110 = (v109 + *(unsigned __int8 *)(v108 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v108 + 80);
      if (!(*(unsigned int (**)(unint64_t, uint64_t, _QWORD))(v108 + 48))(v110, 1, v60[6]))
        (*(void (**)(unint64_t, uint64_t))(v108 + 8))(v110, v107);
      return swift_bridgeObjectRelease();
    default:
      if (v45 <= 3)
        v44 = v45;
      else
        v44 = 4;
      __asm { BR              X16 }
      return result;
  }
}

uint64_t sub_23BF304FC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  size_t v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  unint64_t v31;
  size_t v32;
  size_t v33;
  uint64_t v34;
  unint64_t v35;
  size_t v36;
  unint64_t v37;
  size_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  size_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  const void *v69;
  unsigned int (*v70)(const void *, uint64_t, uint64_t);
  size_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  const void *v89;
  unsigned int (*v90)(const void *, uint64_t, uint64_t);
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  void *v96;
  const void *v97;
  const void *v98;
  unsigned int (*v99)(const void *, uint64_t, uint64_t);
  unint64_t v100;
  unint64_t v101;
  const void *v102;
  void *v103;
  const void *v104;
  unsigned int (*v105)(const void *, uint64_t, uint64_t);
  unint64_t v106;
  const void *v107;
  void *v108;
  const void *v109;
  unsigned int (*v110)(const void *, uint64_t, uint64_t);
  size_t v111;
  uint64_t v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  const void *v124;
  unsigned int (*v125)(const void *, uint64_t, uint64_t);
  __int128 v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  uint64_t v130;
  const void *v131;
  uint64_t v132;
  size_t v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  const void *v143;
  unsigned int (*v144)(const void *, uint64_t, uint64_t);
  const void *v145;
  void *v146;
  const void *v147;
  unsigned int (*v148)(const void *, uint64_t, uint64_t);
  const void *v149;
  void *v150;
  const void *v151;
  unsigned int (*v152)(const void *, uint64_t, uint64_t);
  size_t v153;
  uint64_t v154;
  __int128 v155;
  uint64_t v156;
  uint64_t v157;
  void *v158;
  const void *v159;
  unsigned int (*v160)(const void *, uint64_t, uint64_t);
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  uint64_t v166;
  uint64_t v167;
  void *v168;
  const void *v169;
  unsigned int (*v170)(const void *, uint64_t, uint64_t);
  __int128 v171;
  __int128 v172;
  __int128 v173;
  uint64_t v174;
  uint64_t v175;
  void *v176;
  const void *v177;
  unsigned int (*v178)(const void *, uint64_t, uint64_t);
  unint64_t v179;
  const void *v180;
  char v181;
  _QWORD *v182;
  void *v183;
  const void *v184;
  void *v185;
  const void *v186;
  void *v187;
  const void *v188;
  void *v189;
  const void *v190;
  unint64_t v191;
  unint64_t v192;
  void *v193;
  const void *v194;
  uint64_t v195;
  void *v196;
  const void *v197;
  size_t v198;
  void *v199;
  const void *v200;
  void *v201;
  const void *v202;
  void *v203;
  const void *v204;
  void *v205;
  const void *v206;
  void *v207;
  void *v208;
  const void *v209;
  void *v210;
  const void *v211;
  void *v212;
  const void *v213;
  unint64_t v214;
  unint64_t v215;
  void (*v216)(unint64_t, unint64_t, uint64_t);
  void *v217;
  const void *v218;
  unint64_t v219;
  unsigned int (*v220)(unint64_t, uint64_t, uint64_t);
  void *v221;
  const void *v222;
  void *v223;
  const void *v224;
  void *v225;
  void *v226;
  const void *v227;
  unint64_t v228;
  unint64_t v229;
  void *v230;
  const void *v231;
  void *v232;
  const void *v233;
  void *v234;
  const void *v235;
  void *v236;
  const void *v237;
  void *v238;
  const void *v239;
  void *v240;
  const void *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  void *v246;
  const void *v247;
  int v248;
  size_t v249;
  size_t v250;
  size_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  void *v256;
  const void *v257;
  int v258;
  uint64_t v259;
  size_t v260;
  uint64_t v261;
  uint64_t result;
  const void *v263;
  char v264;
  unint64_t v265;
  unsigned int (*v266)(uint64_t, uint64_t, uint64_t);
  const void *v267;
  void *v268;
  const void *v269;
  size_t v270;
  uint64_t v271;
  uint64_t v272;
  const void *v273;
  const void *v274;
  size_t v275;
  size_t v276;
  size_t v277;
  size_t v278;
  unint64_t v279;
  uint64_t v280;
  unint64_t v281;
  size_t v282;
  size_t v283;
  uint64_t v284;
  unint64_t v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  unint64_t v289;
  size_t v290;
  size_t v291;
  size_t __n;
  size_t __na;
  size_t __nb;
  size_t __nc;
  size_t __nd;
  size_t __ne;
  uint64_t v298;
  unint64_t v299;
  unint64_t v300;
  size_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  _QWORD *__dst;
  void *__dsta;
  uint64_t v310;
  _QWORD *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  size_t v315;
  uint64_t v316;

  v6 = *(_QWORD *)(a3[5] - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(v6 + 64);
  __dst = (_QWORD *)a3[3];
  v8 = *(__dst - 1);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v310 = sub_23BFF82CC();
  v10 = *(_QWORD *)(v310 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v305 = a3[2];
  v12 = *(_QWORD *)(v305 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v272 = sub_23BFF8368();
  v14 = *(_QWORD *)(v272 - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v311 = a3;
  v312 = a1;
  v16 = a3[7];
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  v19 = v9 | v11 | v13 | v15 | v18 | 7;
  v313 = (v19 + v7 + a1) & ~v19;
  v20 = (v19 + v7 + a2) & ~v19;
  v307 = v8;
  v21 = *(_QWORD *)(v8 + 64);
  v22 = v21 + v11;
  v23 = v21 + v11 + 1;
  v287 = v23 + ((v9 + 248) & ~v9);
  v314 = v10;
  v24 = *(_QWORD *)(v10 + 64);
  if (*(_DWORD *)(v10 + 84))
    v25 = *(_QWORD *)(v10 + 64);
  else
    v25 = v24 + 1;
  v26 = v25 + v11;
  v27 = v25 + v13;
  v28 = *(_QWORD *)(v12 + 64);
  v29 = v28 + v13;
  v301 = v21;
  v303 = v12;
  if (*(_DWORD *)(v12 + 84))
    v30 = *(_QWORD *)(v12 + 64);
  else
    v30 = v28 + 1;
  v31 = ((v28 + v13 + ((v25 + v13 + ((v25 + v11 + ((v25 + v11 + (v287 & ~v11)) & ~v11)) & ~v11)) & ~v13)) & ~v13) + v30;
  if (v24 <= v21)
    v32 = v21;
  else
    v32 = *(_QWORD *)(v10 + 64);
  v270 = v25 + v15;
  v271 = *(_QWORD *)(v272 - 8);
  v33 = ((v25 + v15 + (v26 & ~v11)) & ~v15) + *(_QWORD *)(v14 + 64);
  if (v33 <= v32)
    v33 = v32;
  v290 = v30 + v13;
  v34 = (v30
       + v18
       + ((v30 + v13 + ((v27 + ((v26 + ((v26 + ((v23 + ((v9 + 216) & ~v9)) & ~v11)) & ~v11)) & ~v11)) & ~v13)) & ~v13)) & ~v18;
  v35 = *(_QWORD *)(v17 + 64);
  if (*(_DWORD *)(v17 + 84))
    v36 = *(_QWORD *)(v17 + 64);
  else
    v36 = v35 + 1;
  v37 = v34 + v36;
  v38 = v25 + (v22 & ~v11);
  v39 = ((v38 + v11) & ~v11) + v25;
  v298 = v11 + 24;
  v40 = ((v11 + 24 + (v38 & 0xFFFFFFFFFFFFFFF8)) & ~v11) + v25;
  v41 = ((v27 + ((v26 + ((v26 + ((v26 + ((v22 + ((v9 + 160) & ~v9)) & ~v11)) & ~v11)) & ~v11)) & ~v11)) & ~v13) + v30;
  v42 = ((v26 + ((v26 + ((v22 + ((v9 + 56) & ~v9)) & ~v11)) & ~v11)) & ~v11) + v25;
  v43 = ((v22 + ((v9 + 64) & ~v9)) & ~v11) + v25;
  v281 = v40;
  v283 = ((v27 + ((v26 + ((v11 + 64) & ~v11)) & ~v11)) & ~v13) + v30;
  if (v40 > v31)
    v31 = v40;
  v275 = v33 + 1;
  v276 = ((v26 + ((v26 + ((v22 + ((v9 + 104) & ~v9)) & ~v11)) & ~v11)) & ~v11) + v25;
  __n = v33;
  if (v31 <= v33 + 1)
    v31 = v33 + 1;
  v285 = v37;
  if (v31 <= v37)
    v31 = v37;
  if (v31 <= ((v27 + ((v26 + ((v11 + 64) & ~v11)) & ~v11)) & ~v13) + v30)
    v31 = ((v27 + ((v26 + ((v11 + 64) & ~v11)) & ~v11)) & ~v13) + v30;
  v277 = ((v26 + ((v22 + ((v9 + 24) & ~v9)) & ~v11)) & ~v11) + v25;
  v279 = ((v39 + v11) & ~v11) + v25;
  if (v31 <= v279)
    v31 = ((v39 + v11) & ~v11) + v25;
  if (v31 <= ((v26 + ((v22 + ((v9 + 24) & ~v9)) & ~v11)) & ~v11) + v25)
    v31 = ((v26 + ((v22 + ((v9 + 24) & ~v9)) & ~v11)) & ~v11) + v25;
  if (v31 <= ((v26 + ((v26 + ((v22 + ((v9 + 104) & ~v9)) & ~v11)) & ~v11)) & ~v11) + v25)
    v31 = ((v26 + ((v26 + ((v22 + ((v9 + 104) & ~v9)) & ~v11)) & ~v11)) & ~v11) + v25;
  if (v31 <= v41)
    v31 = ((v27 + ((v26 + ((v26 + ((v26 + ((v22 + ((v9 + 160) & ~v9)) & ~v11)) & ~v11)) & ~v11)) & ~v11)) & ~v13) + v30;
  if (v31 <= v42)
    v31 = ((v26 + ((v26 + ((v22 + ((v9 + 56) & ~v9)) & ~v11)) & ~v11)) & ~v11) + v25;
  if (v31 <= v43 + 1)
    v31 = v43 + 1;
  v315 = v25;
  v44 = ((v26 + ((v26 + ((v22 + ((v9 + 128) & ~v9)) & ~v11)) & ~v11)) & ~v11) + v25;
  if (v31 <= v44)
    v31 = ((v26 + ((v26 + ((v22 + ((v9 + 128) & ~v9)) & ~v11)) & ~v11)) & ~v11) + v25;
  if (v31 <= v39)
    v31 = v39;
  if (v31 <= v35)
    v45 = *(_QWORD *)(v17 + 64);
  else
    v45 = v31;
  v47 = ~v9;
  v316 = ~v11;
  v48 = ~v13;
  v49 = ~v15;
  switch(*(_BYTE *)(v20 + v45))
  {
    case 0:
      v50 = v29;
      v51 = v48;
      v52 = v27;
      __na = v30;
      v299 = v45;
      v288 = v45;
      v53 = *(_OWORD *)v20;
      v54 = *(_OWORD *)(v20 + 16);
      v55 = *(_OWORD *)(v20 + 48);
      v56 = v313;
      *(_OWORD *)(v313 + 32) = *(_OWORD *)(v20 + 32);
      *(_OWORD *)(v313 + 48) = v55;
      *(_OWORD *)v313 = v53;
      *(_OWORD *)(v313 + 16) = v54;
      v57 = *(_OWORD *)(v20 + 64);
      v58 = *(_OWORD *)(v20 + 80);
      v59 = *(_OWORD *)(v20 + 112);
      *(_OWORD *)(v313 + 96) = *(_OWORD *)(v20 + 96);
      *(_OWORD *)(v313 + 112) = v59;
      *(_OWORD *)(v313 + 64) = v57;
      *(_OWORD *)(v313 + 80) = v58;
      v60 = *(_OWORD *)(v20 + 128);
      v61 = *(_OWORD *)(v20 + 144);
      v62 = *(_OWORD *)(v20 + 176);
      *(_OWORD *)(v313 + 160) = *(_OWORD *)(v20 + 160);
      *(_OWORD *)(v313 + 176) = v62;
      *(_OWORD *)(v313 + 128) = v60;
      *(_OWORD *)(v313 + 144) = v61;
      v63 = *(_OWORD *)(v20 + 192);
      v64 = *(_OWORD *)(v20 + 208);
      v65 = *(_OWORD *)(v20 + 224);
      *(_QWORD *)(v313 + 240) = *(_QWORD *)(v20 + 240);
      *(_OWORD *)(v313 + 208) = v64;
      *(_OWORD *)(v313 + 224) = v65;
      *(_OWORD *)(v313 + 192) = v63;
      v66 = (v313 + v9 + 248) & v47;
      v273 = (const void *)v20;
      v67 = (v20 + v9 + 248) & v47;
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(v307 + 16))(v66, v67, __dst);
      *(_BYTE *)(v66 + v301) = *(_BYTE *)(v67 + v301);
      v68 = (void *)((v11 + 1 + v66 + v301) & v316);
      v69 = (const void *)((v11 + 1 + v67 + v301) & v316);
      v70 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v314 + 48);
      if (v70(v69, 1, v310))
      {
        memcpy(v68, v69, v315);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 16))(v68, v69, v310);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v68, 0, 1, v310);
      }
      v183 = (void *)(((unint64_t)v68 + v26) & v316);
      v184 = (const void *)(((unint64_t)v69 + v26) & v316);
      if (v70(v184, 1, v310))
      {
        memcpy(v183, v184, v315);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 16))(v183, v184, v310);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v183, 0, 1, v310);
      }
      v154 = v312;
      v203 = (void *)(((unint64_t)v183 + v26) & v316);
      v204 = (const void *)(((unint64_t)v184 + v26) & v316);
      if (v70(v204, 1, v310))
      {
        memcpy(v203, v204, v315);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 16))(v203, v204, v310);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v203, 0, 1, v310);
      }
      v214 = ((unint64_t)v203 + v52) & v51;
      v215 = ((unint64_t)v204 + v52) & v51;
      v216 = *(void (**)(unint64_t, unint64_t, uint64_t))(v303 + 16);
      v216(v214, v215, v305);
      v217 = (void *)((v50 + v214) & v51);
      v218 = (const void *)((v50 + v215) & v51);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v303 + 48))(v218, 1, v305))
      {
        memcpy(v217, v218, __na);
      }
      else
      {
        v216((unint64_t)v217, (unint64_t)v218, v305);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v303 + 56))(v217, 0, 1, v305);
      }
      v181 = 0;
      goto LABEL_186;
    case 1:
      v71 = __n;
      v72 = *(unsigned __int8 *)(v20 + __n);
      if (v72 >= 3)
      {
        if (__n <= 3)
          v73 = __n;
        else
          v73 = 4;
        __asm { BR              X12 }
      }
      v56 = v313;
      if (v72 == 2)
      {
        v289 = v45;
        v265 = v45;
        v266 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v314 + 48);
        v97 = (const void *)v20;
        if (v266(v20, 1, v310))
        {
          memcpy((void *)v313, v97, v315);
        }
        else
        {
          (*(void (**)(uint64_t, const void *, uint64_t))(v314 + 16))(v313, v97, v310);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v314 + 56))(v313, 0, 1, v310);
        }
        v268 = (void *)((v26 + v313) & v316);
        v269 = (const void *)(((unint64_t)v97 + v26) & v316);
        v182 = v311;
        if (v266((uint64_t)v269, 1, v310))
        {
          memcpy(v268, v269, v315);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v314 + 16))(v268, v269, v310);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v268, 0, 1, v310);
        }
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v271 + 16))(((unint64_t)v268 + v270) & v49, ((unint64_t)v269 + v270) & v49, v272);
        v264 = 2;
        v154 = v312;
        v56 = v313;
        v101 = v265;
        v179 = v289;
        v71 = __n;
      }
      else
      {
        v179 = v45;
        if (v72 == 1)
        {
          v263 = (const void *)v20;
          v101 = v45;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v314 + 16))(v313, v20, v310);
          v97 = v263;
          v264 = 1;
        }
        else
        {
          v101 = v45;
          v267 = (const void *)v20;
          (*(void (**)(uint64_t, uint64_t, _QWORD *))(v307 + 16))(v313, v20, __dst);
          v97 = v267;
          v264 = 0;
        }
        v182 = v311;
        v154 = v312;
      }
      *(_BYTE *)(v56 + v71) = v264;
      v181 = 1;
      goto LABEL_220;
    case 2:
      v280 = ~v18;
      v282 = v30 + v18;
      v278 = v36;
      v284 = *(_QWORD *)(v16 - 8);
      v286 = v16;
      v74 = v48;
      v75 = v27;
      __nb = v30;
      v299 = v45;
      v288 = v45;
      v76 = *(_OWORD *)(v20 + 16);
      v56 = v313;
      *(_OWORD *)v313 = *(_OWORD *)v20;
      *(_OWORD *)(v313 + 16) = v76;
      v77 = *(_OWORD *)(v20 + 32);
      v78 = *(_OWORD *)(v20 + 48);
      v79 = *(_OWORD *)(v20 + 80);
      *(_OWORD *)(v313 + 64) = *(_OWORD *)(v20 + 64);
      *(_OWORD *)(v313 + 80) = v79;
      *(_OWORD *)(v313 + 32) = v77;
      *(_OWORD *)(v313 + 48) = v78;
      v80 = *(_OWORD *)(v20 + 96);
      v81 = *(_OWORD *)(v20 + 112);
      v82 = *(_OWORD *)(v20 + 144);
      *(_OWORD *)(v313 + 128) = *(_OWORD *)(v20 + 128);
      *(_OWORD *)(v313 + 144) = v82;
      *(_OWORD *)(v313 + 96) = v80;
      *(_OWORD *)(v313 + 112) = v81;
      v83 = *(_OWORD *)(v20 + 160);
      v84 = *(_OWORD *)(v20 + 176);
      v85 = *(_OWORD *)(v20 + 192);
      *(_QWORD *)(v313 + 208) = *(_QWORD *)(v20 + 208);
      *(_OWORD *)(v313 + 176) = v84;
      *(_OWORD *)(v313 + 192) = v85;
      *(_OWORD *)(v313 + 160) = v83;
      v86 = (v313 + v9 + 216) & v47;
      v273 = (const void *)v20;
      v87 = (v20 + v9 + 216) & v47;
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(v307 + 16))(v86, v87, __dst);
      *(_BYTE *)(v86 + v301) = *(_BYTE *)(v87 + v301);
      v88 = (void *)((v11 + 1 + v86 + v301) & v316);
      v89 = (const void *)((v11 + 1 + v87 + v301) & v316);
      v90 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v314 + 48);
      if (v90(v89, 1, v310))
      {
        memcpy(v88, v89, v315);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 16))(v88, v89, v310);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v88, 0, 1, v310);
      }
      v185 = (void *)(((unint64_t)v88 + v26) & v316);
      v186 = (const void *)(((unint64_t)v89 + v26) & v316);
      if (v90(v186, 1, v310))
      {
        memcpy(v185, v186, v315);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 16))(v185, v186, v310);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v185, 0, 1, v310);
      }
      v205 = (void *)(((unint64_t)v185 + v26) & v316);
      v206 = (const void *)(((unint64_t)v186 + v26) & v316);
      if (v90(v206, 1, v310))
      {
        memcpy(v205, v206, v315);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 16))(v205, v206, v310);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v205, 0, 1, v310);
      }
      v219 = ((unint64_t)v205 + v75) & v74;
      v220 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v303 + 48);
      if (v220(((unint64_t)v206 + v75) & v74, 1, v305))
      {
        memcpy((void *)(((unint64_t)v205 + v75) & v74), (const void *)(((unint64_t)v206 + v75) & v74), __nb);
      }
      else
      {
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v303 + 16))(((unint64_t)v205 + v75) & v74, ((unint64_t)v206 + v75) & v74, v305);
        (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v303 + 56))(((unint64_t)v205 + v75) & v74, 0, 1, v305);
      }
      v182 = v311;
      v223 = (void *)((v290 + v219) & v74);
      v224 = (const void *)((v290 + (((unint64_t)v206 + v75) & v74)) & v74);
      if (v220((unint64_t)v224, 1, v305))
      {
        memcpy(v223, v224, __nb);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v303 + 16))(v223, v224, v305);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v303 + 56))(v223, 0, 1, v305);
      }
      v226 = (void *)(((unint64_t)v223 + v282) & v280);
      v227 = (const void *)(((unint64_t)v224 + v282) & v280);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v284 + 48))(v227, 1, v286))
      {
        memcpy(v226, v227, v278);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v284 + 16))(v226, v227, v286);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v284 + 56))(v226, 0, 1, v286);
      }
      v181 = 2;
      v154 = v312;
      goto LABEL_189;
    case 3:
      v91 = v48;
      v92 = v27;
      __nc = v30;
      v299 = v45;
      v288 = v45;
      v93 = *(_OWORD *)v20;
      v94 = *(_OWORD *)(v20 + 16);
      v95 = *(_OWORD *)(v20 + 48);
      v56 = v313;
      *(_OWORD *)(v313 + 32) = *(_OWORD *)(v20 + 32);
      *(_OWORD *)(v313 + 48) = v95;
      *(_OWORD *)v313 = v93;
      *(_OWORD *)(v313 + 16) = v94;
      v96 = (void *)((v313 + v11 + 64) & v316);
      v97 = (const void *)v20;
      v98 = (const void *)((v20 + v11 + 64) & v316);
      v99 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v314 + 48);
      if (v99(v98, 1, v310))
      {
        memcpy(v96, v98, v315);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 16))(v96, v98, v310);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v96, 0, 1, v310);
      }
      v187 = (void *)(((unint64_t)v96 + v26) & v316);
      v188 = (const void *)(((unint64_t)v98 + v26) & v316);
      if (v99(v188, 1, v310))
      {
        memcpy(v187, v188, v315);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 16))(v187, v188, v310);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v187, 0, 1, v310);
      }
      v154 = v312;
      v207 = (void *)(((unint64_t)v187 + v92) & v91);
      if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v303 + 48))(((unint64_t)v188 + v92) & v91, 1, v305))
      {
        memcpy(v207, (const void *)(((unint64_t)v188 + v92) & v91), __nc);
      }
      else
      {
        (*(void (**)(void *, unint64_t, uint64_t))(v303 + 16))(v207, ((unint64_t)v188 + v92) & v91, v305);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v303 + 56))(v207, 0, 1, v305);
      }
      v181 = 3;
      v182 = v311;
      goto LABEL_190;
    case 4:
      v100 = v45;
      v101 = v45;
      v56 = v313;
      v102 = (const void *)v20;
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(v307 + 16))(v313, v20, __dst);
      v103 = (void *)((v22 + v313) & v316);
      v97 = v102;
      v104 = (const void *)(((unint64_t)v102 + v22) & v316);
      v105 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v314 + 48);
      if (v105(v104, 1, v310))
      {
        memcpy(v103, v104, v315);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 16))(v103, v104, v310);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v103, 0, 1, v310);
      }
      v189 = (void *)(((unint64_t)v103 + v26) & v316);
      v190 = (const void *)(((unint64_t)v104 + v26) & v316);
      if (v105(v190, 1, v310))
      {
        memcpy(v189, v190, v315);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 16))(v189, v190, v310);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v189, 0, 1, v310);
      }
      v154 = v312;
      v208 = (void *)(((unint64_t)v189 + v26) & v316);
      v209 = (const void *)(((unint64_t)v190 + v26) & v316);
      if (v105(v209, 1, v310))
      {
        memcpy(v208, v209, v315);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 16))(v208, v209, v310);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v208, 0, 1, v310);
      }
      v181 = 4;
      goto LABEL_218;
    case 5:
      v100 = v45;
      v106 = v45;
      v56 = v313;
      v149 = (const void *)v20;
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(v307 + 16))(v313, v20, __dst);
      v150 = (void *)((v22 + v313) & v316);
      v97 = v149;
      v151 = (const void *)(((unint64_t)v149 + v22) & v316);
      v152 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v314 + 48);
      if (v152(v151, 1, v310))
      {
        v153 = v315;
        memcpy(v150, v151, v315);
        v154 = v312;
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 16))(v150, v151, v310);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v150, 0, 1, v310);
        v154 = v312;
        v153 = v315;
      }
      *((_BYTE *)v150 + v153) = *((_BYTE *)v151 + v153);
      v228 = ((unint64_t)v150 + v153) & 0xFFFFFFFFFFFFFFF8;
      v229 = ((unint64_t)v151 + v153) & 0xFFFFFFFFFFFFFFF8;
      *(_OWORD *)(v228 + 8) = *(_OWORD *)(v229 + 8);
      v230 = (void *)((v298 + v228) & v316);
      v231 = (const void *)((v298 + v229) & v316);
      if (v152(v231, 1, v310))
      {
        memcpy(v230, v231, v153);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 16))(v230, v231, v310);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v230, 0, 1, v310);
      }
      v181 = 5;
      goto LABEL_206;
    case 6:
      v100 = v45;
      v101 = v45;
      v155 = *(_OWORD *)v20;
      v56 = v313;
      *(_QWORD *)(v313 + 16) = *(_QWORD *)(v20 + 16);
      *(_OWORD *)v313 = v155;
      v156 = (v313 + v9 + 24) & v47;
      v97 = (const void *)v20;
      v157 = (v20 + v9 + 24) & v47;
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(v307 + 16))(v156, v157, __dst);
      v158 = (void *)((v22 + v156) & v316);
      v159 = (const void *)((v22 + v157) & v316);
      v160 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v314 + 48);
      if (v160(v159, 1, v310))
      {
        memcpy(v158, v159, v315);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 16))(v158, v159, v310);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v158, 0, 1, v310);
      }
      v154 = v312;
      v232 = (void *)(((unint64_t)v158 + v26) & v316);
      v233 = (const void *)(((unint64_t)v159 + v26) & v316);
      if (v160(v233, 1, v310))
      {
        memcpy(v232, v233, v315);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 16))(v232, v233, v310);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v232, 0, 1, v310);
      }
      v181 = 6;
      goto LABEL_218;
    case 7:
      v100 = v45;
      v106 = v45;
      v56 = v313;
      v107 = (const void *)v20;
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(v307 + 16))(v313, v20, __dst);
      v108 = (void *)((v22 + v313) & v316);
      v97 = v107;
      v109 = (const void *)(((unint64_t)v107 + v22) & v316);
      v110 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v314 + 48);
      if (v110(v109, 1, v310))
      {
        v111 = v315;
        memcpy(v108, v109, v315);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 16))(v108, v109, v310);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v108, 0, 1, v310);
        v111 = v315;
      }
      *((_BYTE *)v108 + v111) = *((_BYTE *)v109 + v111);
      v191 = ((unint64_t)v108 + v111) & 0xFFFFFFFFFFFFFFF8;
      v192 = ((unint64_t)v109 + v111) & 0xFFFFFFFFFFFFFFF8;
      *(_OWORD *)(v191 + 8) = *(_OWORD *)(v192 + 8);
      v193 = (void *)((v298 + v191) & v316);
      v194 = (const void *)((v298 + v192) & v316);
      v154 = v312;
      if (v110(v194, 1, v310))
      {
        memcpy(v193, v194, v111);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 16))(v193, v194, v310);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v193, 0, 1, v310);
      }
      v181 = 7;
LABEL_206:
      v182 = v311;
      v101 = v106;
      goto LABEL_219;
    case 8:
      v100 = v45;
      v101 = v45;
      v161 = *(_OWORD *)v20;
      v162 = *(_OWORD *)(v20 + 32);
      v56 = v313;
      *(_OWORD *)(v313 + 16) = *(_OWORD *)(v20 + 16);
      *(_OWORD *)(v313 + 32) = v162;
      *(_OWORD *)v313 = v161;
      v163 = *(_OWORD *)(v20 + 48);
      v164 = *(_OWORD *)(v20 + 64);
      v165 = *(_OWORD *)(v20 + 80);
      *(_QWORD *)(v313 + 96) = *(_QWORD *)(v20 + 96);
      *(_OWORD *)(v313 + 64) = v164;
      *(_OWORD *)(v313 + 80) = v165;
      *(_OWORD *)(v313 + 48) = v163;
      v166 = (v313 + v9 + 104) & v47;
      v97 = (const void *)v20;
      v167 = (v20 + v9 + 104) & v47;
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(v307 + 16))(v166, v167, __dst);
      v168 = (void *)((v22 + v166) & v316);
      v169 = (const void *)((v22 + v167) & v316);
      v170 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v314 + 48);
      if (v170(v169, 1, v310))
      {
        memcpy(v168, v169, v315);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 16))(v168, v169, v310);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v168, 0, 1, v310);
      }
      v234 = (void *)(((unint64_t)v168 + v26) & v316);
      v235 = (const void *)(((unint64_t)v169 + v26) & v316);
      if (v170(v235, 1, v310))
      {
        memcpy(v234, v235, v315);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 16))(v234, v235, v310);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v234, 0, 1, v310);
      }
      v154 = v312;
      v238 = (void *)(((unint64_t)v234 + v26) & v316);
      v239 = (const void *)(((unint64_t)v235 + v26) & v316);
      if (v170(v239, 1, v310))
      {
        memcpy(v238, v239, v315);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 16))(v238, v239, v310);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v238, 0, 1, v310);
      }
      v181 = 8;
      goto LABEL_218;
    case 9:
      v112 = v48;
      v113 = v27;
      __nd = v30;
      v299 = v45;
      v288 = v45;
      v114 = *(_OWORD *)(v20 + 16);
      v56 = v313;
      *(_OWORD *)v313 = *(_OWORD *)v20;
      *(_OWORD *)(v313 + 16) = v114;
      v115 = *(_OWORD *)(v20 + 32);
      v116 = *(_OWORD *)(v20 + 48);
      v117 = *(_OWORD *)(v20 + 80);
      *(_OWORD *)(v313 + 64) = *(_OWORD *)(v20 + 64);
      *(_OWORD *)(v313 + 80) = v117;
      *(_OWORD *)(v313 + 32) = v115;
      *(_OWORD *)(v313 + 48) = v116;
      v118 = *(_OWORD *)(v20 + 96);
      v119 = *(_OWORD *)(v20 + 112);
      v120 = *(_OWORD *)(v20 + 144);
      *(_OWORD *)(v313 + 128) = *(_OWORD *)(v20 + 128);
      *(_OWORD *)(v313 + 144) = v120;
      *(_OWORD *)(v313 + 96) = v118;
      *(_OWORD *)(v313 + 112) = v119;
      v121 = (v313 + v9 + 160) & v47;
      v273 = (const void *)v20;
      v122 = (v20 + v9 + 160) & v47;
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(v307 + 16))(v121, v122, __dst);
      v123 = (void *)((v22 + v121) & v316);
      v124 = (const void *)((v22 + v122) & v316);
      v125 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v314 + 48);
      if (v125(v124, 1, v310))
      {
        memcpy(v123, v124, v315);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 16))(v123, v124, v310);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v123, 0, 1, v310);
      }
      v195 = v305;
      v196 = (void *)(((unint64_t)v123 + v26) & v316);
      v197 = (const void *)(((unint64_t)v124 + v26) & v316);
      if (v125(v197, 1, v310))
      {
        memcpy(v196, v197, v315);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 16))(v196, v197, v310);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v196, 0, 1, v310);
      }
      v154 = v312;
      v210 = (void *)(((unint64_t)v196 + v26) & v316);
      v211 = (const void *)(((unint64_t)v197 + v26) & v316);
      if (v125(v211, 1, v310))
      {
        memcpy(v210, v211, v315);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 16))(v210, v211, v310);
        v195 = v305;
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v210, 0, 1, v310);
      }
      v221 = (void *)(((unint64_t)v210 + v26) & v316);
      v222 = (const void *)(((unint64_t)v211 + v26) & v316);
      if (v125(v222, 1, v310))
      {
        memcpy(v221, v222, v315);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 16))(v221, v222, v310);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v221, 0, 1, v310);
      }
      v225 = (void *)(((unint64_t)v221 + v113) & v112);
      if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v303 + 48))(((unint64_t)v222 + v113) & v112, 1, v195))
      {
        memcpy(v225, (const void *)(((unint64_t)v222 + v113) & v112), __nd);
      }
      else
      {
        (*(void (**)(void *, unint64_t, uint64_t))(v303 + 16))(v225, ((unint64_t)v222 + v113) & v112, v195);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v303 + 56))(v225, 0, 1, v195);
      }
      v181 = 9;
LABEL_186:
      v182 = v311;
LABEL_189:
      v97 = v273;
LABEL_190:
      v101 = v299;
      v179 = v288;
      goto LABEL_220;
    case 0xA:
      v100 = v45;
      v101 = v45;
      v171 = *(_OWORD *)v20;
      v172 = *(_OWORD *)(v20 + 16);
      v173 = *(_OWORD *)(v20 + 32);
      v56 = v313;
      *(_QWORD *)(v313 + 48) = *(_QWORD *)(v20 + 48);
      *(_OWORD *)(v313 + 16) = v172;
      *(_OWORD *)(v313 + 32) = v173;
      *(_OWORD *)v313 = v171;
      v174 = (v313 + v9 + 56) & v47;
      v97 = (const void *)v20;
      v175 = (v20 + v9 + 56) & v47;
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(v307 + 16))(v174, v175, __dst);
      v176 = (void *)((v22 + v174) & v316);
      v177 = (const void *)((v22 + v175) & v316);
      v178 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v314 + 48);
      if (v178(v177, 1, v310))
      {
        memcpy(v176, v177, v315);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 16))(v176, v177, v310);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v176, 0, 1, v310);
      }
      v236 = (void *)(((unint64_t)v176 + v26) & v316);
      v237 = (const void *)(((unint64_t)v177 + v26) & v316);
      if (v178(v237, 1, v310))
      {
        memcpy(v236, v237, v315);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 16))(v236, v237, v310);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v236, 0, 1, v310);
      }
      v154 = v312;
      v240 = (void *)(((unint64_t)v236 + v26) & v316);
      v241 = (const void *)(((unint64_t)v237 + v26) & v316);
      if (v178(v241, 1, v310))
      {
        memcpy(v240, v241, v315);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 16))(v240, v241, v310);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v240, 0, 1, v310);
      }
      v181 = 10;
      goto LABEL_218;
    case 0xB:
      v291 = v43 + 1;
      __ne = v30;
      v302 = v29;
      v304 = v48;
      v306 = v27;
      v300 = v45;
      v126 = *(_OWORD *)v20;
      v127 = *(_OWORD *)(v20 + 16);
      v128 = *(_OWORD *)(v20 + 48);
      *(_OWORD *)(v313 + 32) = *(_OWORD *)(v20 + 32);
      *(_OWORD *)(v313 + 48) = v128;
      *(_OWORD *)v313 = v126;
      *(_OWORD *)(v313 + 16) = v127;
      v129 = (v313 + v9 + 64) & v47;
      v274 = (const void *)v20;
      v130 = (v20 + v9 + 64) & v47;
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(v307 + 16))(v129, v130, __dst);
      __dsta = (void *)((v22 + v129) & v316);
      v131 = (const void *)((v22 + v130) & v316);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v314 + 48))(v131, 1, v310))
      {
        v132 = (v22 + v129) & v316;
        v133 = v315;
        memcpy(__dsta, v131, v315);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 16))(__dsta, v131, v310);
        v132 = (v22 + v129) & v316;
        (*(void (**)(void))(v314 + 56))();
        v133 = v315;
      }
      *(_BYTE *)(v132 + v133) = *((_BYTE *)v131 + v133);
      v198 = ((v302 + ((v306 + ((v26 + (((v287 | v11) + v133) & v316)) & v316)) & v304)) & v304) + __ne;
      if (v275 > v198)
        v198 = v275;
      if (v285 > v198)
        v198 = v285;
      if (v283 > v198)
        v198 = v283;
      if (v279 > v198)
        v198 = v279;
      if (v281 > v198)
        v198 = v281;
      if (v277 > v198)
        v198 = v277;
      if (v281 > v198)
        v198 = v281;
      if (v276 > v198)
        v198 = v276;
      if (v41 > v198)
        v198 = v41;
      if (v42 > v198)
        v198 = v42;
      if (v291 > v198)
        v198 = v291;
      if (v44 > v198)
        v198 = v44;
      if (v35 > v198)
        v198 = v35;
      if (v39 <= v198)
        v179 = v198;
      else
        v179 = v39;
      v181 = 11;
      v182 = v311;
      v154 = v312;
      v97 = v274;
      v56 = v313;
      v101 = v300;
      goto LABEL_220;
    case 0xC:
      v100 = v45;
      v101 = v45;
      v134 = *(_OWORD *)v20;
      v135 = *(_OWORD *)(v20 + 16);
      v136 = *(_OWORD *)(v20 + 48);
      v56 = v313;
      *(_OWORD *)(v313 + 32) = *(_OWORD *)(v20 + 32);
      *(_OWORD *)(v313 + 48) = v136;
      *(_OWORD *)v313 = v134;
      *(_OWORD *)(v313 + 16) = v135;
      v137 = *(_OWORD *)(v20 + 64);
      v138 = *(_OWORD *)(v20 + 80);
      v139 = *(_OWORD *)(v20 + 112);
      *(_OWORD *)(v313 + 96) = *(_OWORD *)(v20 + 96);
      *(_OWORD *)(v313 + 112) = v139;
      *(_OWORD *)(v313 + 64) = v137;
      *(_OWORD *)(v313 + 80) = v138;
      v140 = (v313 + v9 + 128) & v47;
      v97 = (const void *)v20;
      v141 = (v20 + v9 + 128) & v47;
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(v307 + 16))(v140, v141, __dst);
      v142 = (void *)((v22 + v140) & v316);
      v143 = (const void *)((v22 + v141) & v316);
      v144 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v314 + 48);
      if (v144(v143, 1, v310))
      {
        memcpy(v142, v143, v315);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 16))(v142, v143, v310);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v142, 0, 1, v310);
      }
      v199 = (void *)(((unint64_t)v142 + v26) & v316);
      v200 = (const void *)(((unint64_t)v143 + v26) & v316);
      if (v144(v200, 1, v310))
      {
        memcpy(v199, v200, v315);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 16))(v199, v200, v310);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v199, 0, 1, v310);
      }
      v154 = v312;
      v212 = (void *)(((unint64_t)v199 + v26) & v316);
      v213 = (const void *)(((unint64_t)v200 + v26) & v316);
      if (v144(v213, 1, v310))
      {
        memcpy(v212, v213, v315);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 16))(v212, v213, v310);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v212, 0, 1, v310);
      }
      v181 = 12;
      goto LABEL_218;
    case 0xD:
      v56 = v313;
      v179 = v45;
      v180 = (const void *)v20;
      v101 = v45;
      (*(void (**)(uint64_t, uint64_t))(v17 + 16))(v313, v20);
      v97 = v180;
      v181 = 13;
      v182 = v311;
      v154 = v312;
      goto LABEL_220;
    case 0xE:
      v100 = v45;
      v101 = v45;
      v56 = v313;
      v145 = (const void *)v20;
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(v307 + 16))(v313, v20, __dst);
      v146 = (void *)((v22 + v313) & v316);
      v97 = v145;
      v147 = (const void *)(((unint64_t)v145 + v22) & v316);
      v148 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v314 + 48);
      if (v148(v147, 1, v310))
      {
        memcpy(v146, v147, v315);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 16))(v146, v147, v310);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v146, 0, 1, v310);
      }
      v201 = (void *)(((unint64_t)v146 + v26) & v316);
      v202 = (const void *)(((unint64_t)v147 + v26) & v316);
      v154 = v312;
      if (v148(v202, 1, v310))
      {
        memcpy(v201, v202, v315);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 16))(v201, v202, v310);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v201, 0, 1, v310);
      }
      v181 = 14;
LABEL_218:
      v182 = v311;
LABEL_219:
      v179 = v100;
LABEL_220:
      *(_BYTE *)(v56 + v179) = v181;
      v242 = v182[4];
      v243 = *(_QWORD *)(v242 - 8);
      v244 = *(unsigned __int8 *)(v243 + 80);
      v245 = v101 + v244 + 1;
      v246 = (void *)((v245 + v56) & ~v244);
      v247 = (const void *)(((unint64_t)v97 + v245) & ~v244);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v243 + 48))(v247, 1, v242))
      {
        v248 = *(_DWORD *)(v243 + 84);
        v249 = *(_QWORD *)(v243 + 64);
        if (v248)
          v250 = v249;
        else
          v250 = v249 + 1;
        memcpy(v246, v247, v250);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v243 + 16))(v246, v247, v242);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v243 + 56))(v246, 0, 1, v242);
        v248 = *(_DWORD *)(v243 + 84);
        v249 = *(_QWORD *)(v243 + 64);
      }
      if (v248)
        v251 = v249;
      else
        v251 = v249 + 1;
      v252 = v182[6];
      v253 = *(_QWORD *)(v252 - 8);
      v254 = *(unsigned __int8 *)(v253 + 80);
      v255 = v251 + v254;
      v256 = (void *)(((unint64_t)v246 + v255) & ~v254);
      v257 = (const void *)(((unint64_t)v247 + v255) & ~v254);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v253 + 48))(v257, 1, v252))
      {
        v258 = *(_DWORD *)(v253 + 84);
        v259 = *(_QWORD *)(v253 + 64);
        if (v258)
          v260 = *(_QWORD *)(v253 + 64);
        else
          v260 = v259 + 1;
        memcpy(v256, v257, v260);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v253 + 16))(v256, v257, v252);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v253 + 56))(v256, 0, 1, v252);
        v258 = *(_DWORD *)(v253 + 84);
        v259 = *(_QWORD *)(v253 + 64);
      }
      if (v258)
        v261 = v259;
      else
        v261 = v259 + 1;
      *(_QWORD *)(((unint64_t)v256 + v261 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v257
                                                                                         + v261
                                                                                         + 7) & 0xFFFFFFFFFFFFF8);
      swift_bridgeObjectRetain();
      return v154;
    default:
      if (v45 <= 3)
        v46 = v45;
      else
        v46 = 4;
      __asm { BR              X14 }
      return result;
  }
}

uint64_t sub_23BF32438(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  int v27;
  size_t v28;
  size_t v29;
  size_t v30;
  size_t v31;
  uint64_t v32;
  size_t v33;
  unint64_t v34;
  size_t v35;
  uint64_t v36;
  size_t v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  size_t v41;
  unint64_t v42;
  unint64_t v43;
  size_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  size_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  unsigned int (*v71)(uint64_t, uint64_t, uint64_t);
  size_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int (*v78)(uint64_t, uint64_t, uint64_t);
  uint64_t v79;
  size_t v80;
  uint64_t v81;
  size_t v82;
  void (*v83)(size_t, uint64_t);
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int (*v89)(uint64_t, uint64_t, uint64_t);
  uint64_t v90;
  uint64_t v91;
  size_t v92;
  unsigned int (*v93)(size_t, uint64_t, uint64_t);
  size_t v94;
  size_t v95;
  uint64_t v96;
  unsigned int (*v97)(uint64_t, uint64_t, uint64_t);
  size_t v98;
  size_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int (*v106)(uint64_t, uint64_t, uint64_t);
  size_t v107;
  size_t v108;
  size_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int (*v113)(uint64_t, uint64_t, uint64_t);
  size_t v114;
  unsigned int (*v115)(uint64_t, uint64_t, uint64_t);
  size_t v116;
  size_t v117;
  uint64_t v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  const void *v134;
  unsigned int (*v135)(const void *, uint64_t, uint64_t);
  unsigned int v136;
  uint64_t v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  const void *v151;
  unsigned int (*v152)(const void *, uint64_t, uint64_t);
  __int128 v153;
  __int128 v154;
  __int128 v155;
  uint64_t v156;
  uint64_t v157;
  unsigned int (*v158)(uint64_t, uint64_t, uint64_t);
  uint64_t v159;
  uint64_t v160;
  const void *v161;
  unsigned int (*v162)(uint64_t, uint64_t, uint64_t);
  size_t v163;
  void *v164;
  const void *v165;
  unsigned int (*v166)(const void *, uint64_t, uint64_t);
  uint64_t v167;
  __int128 v168;
  uint64_t v169;
  uint64_t v170;
  void *v171;
  uint64_t v172;
  const void *v173;
  unsigned int (*v174)(uint64_t, uint64_t, uint64_t);
  size_t v175;
  void *v176;
  const void *v177;
  unsigned int (*v178)(const void *, uint64_t, uint64_t);
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  uint64_t v184;
  uint64_t v185;
  void *v186;
  uint64_t v187;
  const void *v188;
  unsigned int (*v189)(uint64_t, uint64_t, uint64_t);
  size_t v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  uint64_t v198;
  uint64_t v199;
  void *v200;
  uint64_t v201;
  const void *v202;
  unsigned int (*v203)(uint64_t, uint64_t, uint64_t);
  size_t v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  uint64_t v208;
  uint64_t v209;
  void *v210;
  uint64_t v211;
  const void *v212;
  unsigned int (*v213)(uint64_t, uint64_t, uint64_t);
  size_t v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  uint64_t v218;
  void *v219;
  const void *v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  uint64_t v227;
  uint64_t v228;
  void *v229;
  uint64_t v230;
  const void *v231;
  unsigned int (*v232)(uint64_t, uint64_t, uint64_t);
  size_t v233;
  uint64_t v234;
  uint64_t v235;
  unsigned int (*v236)(uint64_t, uint64_t, uint64_t);
  size_t v237;
  void *v238;
  const void *v239;
  void *v240;
  const void *v241;
  void *v242;
  const void *v243;
  void *v244;
  const void *v245;
  size_t v246;
  uint64_t v247;
  uint64_t v248;
  unint64_t v249;
  unint64_t v250;
  void *v251;
  const void *v252;
  size_t v253;
  const void *v254;
  unint64_t v255;
  unint64_t v256;
  void *v257;
  const void *v258;
  void *v259;
  const void *v260;
  size_t v261;
  unsigned int (*v262)(const void *, uint64_t, uint64_t);
  uint64_t v263;
  void *v264;
  const void *v265;
  size_t v266;
  uint64_t v267;
  void *v268;
  const void *v269;
  size_t v270;
  unsigned int (*v271)(const void *, uint64_t, uint64_t);
  uint64_t v272;
  size_t v273;
  void *v274;
  const void *v275;
  size_t v276;
  uint64_t v277;
  size_t v278;
  const void *v279;
  void *v280;
  const void *v281;
  void *v282;
  const void *v283;
  void *v284;
  const void *v285;
  void *v286;
  const void *v287;
  void *v288;
  const void *v289;
  void *v290;
  const void *v291;
  void *v292;
  const void *v293;
  void *v294;
  const void *v295;
  unint64_t v296;
  void (*v297)(unint64_t, unint64_t, uint64_t);
  void *v298;
  const void *v299;
  void *v300;
  const void *v301;
  unsigned int (*v302)(const void *, uint64_t, uint64_t);
  char v303;
  uint64_t v304;
  unint64_t v305;
  char v306;
  void *v307;
  const void *v308;
  void *v309;
  const void *v310;
  void *v311;
  const void *v312;
  void *v313;
  const void *v314;
  char v315;
  unsigned int (*v316)(uint64_t, uint64_t, uint64_t);
  uint64_t v317;
  void *v318;
  const void *v319;
  unint64_t v320;
  uint64_t v321;
  unint64_t v322;
  unint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  unint64_t v329;
  unint64_t v330;
  uint64_t v331;
  unint64_t v332;
  unint64_t v333;
  unint64_t v334;
  unint64_t v335;
  unint64_t v336;
  unint64_t v337;
  unint64_t v338;
  unint64_t v339;
  unint64_t v340;
  unint64_t v341;
  unint64_t v342;
  unint64_t v343;
  unint64_t v344;
  unint64_t v345;
  unint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  void *v351;
  void *v352;
  uint64_t (*v353)(void *, uint64_t, uint64_t);
  int v354;
  int v355;
  size_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  void *v362;
  void *v363;
  uint64_t (*v364)(void *, uint64_t, uint64_t);
  int v365;
  int v366;
  size_t v367;
  uint64_t v368;
  uint64_t result;
  uint64_t v370;
  size_t __n;
  size_t v372;
  uint64_t v373;
  int v374;
  size_t v375;
  size_t v376;
  size_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  size_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  unint64_t v395;
  size_t v396;
  size_t v397;
  size_t v398;
  unint64_t v399;
  unint64_t v400;
  size_t v401;
  unint64_t v402;
  unint64_t v403;
  unint64_t v404;
  unint64_t v405;
  unint64_t v406;
  unint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  size_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  size_t v416;
  size_t v417;
  uint64_t v418;
  _QWORD *v419;
  uint64_t v420;
  uint64_t v421;
  unint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;

  v6 = *(_QWORD *)(a3[5] - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(v6 + 64);
  v423 = a3[3];
  v8 = *(_QWORD *)(v423 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v425 = sub_23BFF82CC();
  v10 = *(_QWORD *)(v425 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v411 = a3[2];
  v12 = *(_QWORD *)(v411 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = sub_23BFF8368();
  v15 = v13;
  v16 = *(_QWORD *)(v14 - 8);
  v17 = *(unsigned __int8 *)(v16 + 80);
  v419 = a3;
  v18 = a3[7];
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  v21 = v9 | v11 | v13 | v17 | v20 | 7;
  v22 = (v21 + v7 + a1) & ~v21;
  v23 = (v21 + v7 + a2) & ~v21;
  v24 = ~v9;
  v25 = (v9 + 248) & ~v9;
  v424 = v19;
  v427 = v22;
  v428 = v10;
  v421 = a1;
  v426 = v23;
  if (v22 == v23)
  {
    v54 = ~v11;
    v57 = v25 + v11 + 1;
    v58 = ~v13;
    v59 = ~v17;
    v60 = ((v9 + 216) & v24) + v11 + 1;
    v61 = ~v20;
    v62 = (v11 + 64) & ~v11;
    v63 = v11 + 24;
    v420 = ((v9 + 24) & v24) + v11;
    v64 = ((v9 + 104) & v24) + v11;
    v65 = ((v9 + 160) & v24) + v11;
    v66 = ((v9 + 56) & v24) + v11;
    v67 = ((v9 + 64) & v24) + v11;
    v68 = ((v9 + 128) & v24) + v11;
    v69 = v419;
  }
  else
  {
    v373 = v14;
    v380 = v18;
    v26 = *(_QWORD *)(v8 + 64);
    v386 = v25 + v11 + 1;
    v391 = v386 + v26;
    v27 = *(_DWORD *)(v10 + 84);
    v28 = *(_QWORD *)(v10 + 64);
    v374 = v27;
    if (v27)
      v29 = v28;
    else
      v29 = v28 + 1;
    v30 = v29 + v11;
    v31 = v29 + v15;
    v32 = *(_QWORD *)(v12 + 64);
    v410 = v32 + v15;
    v413 = v12;
    if (*(_DWORD *)(v12 + 84))
      v33 = *(_QWORD *)(v12 + 64);
    else
      v33 = v32 + 1;
    v34 = ((v32 + v15 + ((v29 + v15 + ((v29 + v11 + ((v29 + v11 + ((v386 + v26) & ~v11)) & ~v11)) & ~v11)) & ~v15)) & ~v15)
        + v33;
    if (v28 <= v26)
      v35 = *(_QWORD *)(v8 + 64);
    else
      v35 = v28;
    v372 = v29 + v17;
    v36 = *(_QWORD *)(v16 + 64);
    if (((v29 + v17 + (v30 & ~v11)) & ~v17) + v36 <= v35)
      v37 = v35;
    else
      v37 = ((v29 + v17 + (v30 & ~v11)) & ~v17) + v36;
    v38 = ~v9;
    v385 = ((v9 + 216) & v24) + v11 + 1;
    v375 = v33 + v15;
    v376 = v33 + v20;
    v39 = *(_DWORD *)(v19 + 84);
    v40 = *(_QWORD *)(v19 + 64);
    if (v39)
      v41 = v40;
    else
      v41 = v40 + 1;
    __n = v41;
    v42 = ((v33 + v20 + ((v33 + v15 + ((v31 + ((v30 + ((v30 + ((v385 + v26) & ~v11)) & ~v11)) & ~v11)) & ~v15)) & ~v15)) & ~v20)
        + v41;
    v43 = ((v31 + ((v30 + ((v11 + 64) & ~v11)) & ~v11)) & ~v15) + v33;
    v44 = v29 + ((v26 + v11) & ~v11);
    v45 = ((v44 + v11) & ~v11) + v29;
    v408 = v11 + 24;
    v46 = ((v11 + 24 + (v44 & 0xFFFFFFFFFFFFFFF8)) & ~v11) + v29;
    v420 = ((v9 + 24) & v24) + v11;
    v384 = ((v9 + 104) & v38) + v11;
    v47 = ((v9 + 160) & v38) + v11;
    v416 = v29 + v15;
    v412 = v33;
    v48 = ((v31 + ((v30 + ((v30 + ((v30 + ((v47 + v26) & ~v11)) & ~v11)) & ~v11)) & ~v11)) & ~v15) + v33;
    v49 = ((v9 + 56) & v38) + v11;
    v50 = ((v9 + 64) & v38) + v11;
    v51 = ((v50 + v26) & ~v11) + v29;
    v403 = v46;
    v404 = v43;
    if (v46 > v34)
      v34 = v46;
    v396 = v37 + 1;
    v377 = v37;
    if (v34 <= v37 + 1)
      v34 = v37 + 1;
    v405 = v42;
    if (v34 <= v42)
      v34 = v42;
    if (v34 <= v43)
      v34 = v43;
    v401 = ((v30 + ((v420 + v26) & ~v11)) & ~v11) + v29;
    v402 = ((v45 + v11) & ~v11) + v29;
    if (v34 <= v402)
      v34 = ((v45 + v11) & ~v11) + v29;
    if (v34 <= ((v30 + ((v420 + v26) & ~v11)) & ~v11) + v29)
      v34 = ((v30 + ((v420 + v26) & ~v11)) & ~v11) + v29;
    v399 = v48;
    v400 = ((v30 + ((v30 + ((v384 + v26) & ~v11)) & ~v11)) & ~v11) + v29;
    if (v34 <= v400)
      v34 = ((v30 + ((v30 + ((v384 + v26) & ~v11)) & ~v11)) & ~v11) + v29;
    v52 = v22;
    if (v34 <= v48)
      v34 = v48;
    if (v34 <= ((v30 + ((v30 + ((v49 + v26) & ~v11)) & ~v11)) & ~v11) + v29)
      v34 = ((v30 + ((v30 + ((v49 + v26) & ~v11)) & ~v11)) & ~v11) + v29;
    v397 = v51 + 1;
    v398 = ((v30 + ((v30 + ((v49 + v26) & ~v11)) & ~v11)) & ~v11) + v29;
    if (v34 <= v51 + 1)
      v34 = v51 + 1;
    v394 = ~v9;
    v390 = ((v9 + 128) & v38) + v11;
    v415 = *(_QWORD *)(v8 + 64);
    v417 = v29;
    v395 = ((v30 + ((v30 + ((v390 + v26) & ~v11)) & ~v11)) & ~v11) + v29;
    if (v34 <= v395)
      v34 = ((v30 + ((v30 + ((((v9 + 128) & v38) + v11 + v26) & ~v11)) & ~v11)) & ~v11) + v29;
    v406 = v45;
    v407 = v40;
    if (v34 <= v45)
      v34 = v45;
    if (v34 <= v40)
      v53 = v40;
    else
      v53 = v34;
    v54 = ~v11;
    v55 = ~v15;
    v409 = ~v20;
    v422 = v53;
    v418 = v8;
    v414 = ~v15;
    v388 = v20;
    v389 = v15;
    v392 = v16;
    v393 = ~v17;
    v387 = *(unsigned __int8 *)(v16 + 80);
    v382 = v49;
    v383 = v47;
    v381 = v50;
    switch(*(_BYTE *)(v22 + v53))
    {
      case 0:
        v76 = (v22 + v9 + 248) & v394;
        (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v76, v423);
        v77 = (v11 + v415 + v76 + 1) & v54;
        v78 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v428 + 48);
        if (!v78(v77, 1, v425))
          (*(void (**)(uint64_t, uint64_t))(v428 + 8))(v77, v425);
        v79 = (v30 + v77) & v54;
        v72 = v417;
        v80 = v391;
        if (!v78(v79, 1, v425))
          (*(void (**)(uint64_t, uint64_t))(v428 + 8))(v79, v425);
        v81 = (v30 + v79) & v54;
        if (!v78(v81, 1, v425))
          (*(void (**)(uint64_t, uint64_t))(v428 + 8))(v81, v425);
        v82 = (v416 + v81) & v55;
        v83 = *(void (**)(size_t, uint64_t))(v413 + 8);
        v83(v82, v411);
        v84 = (v410 + v82) & v414;
        v55 = v414;
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v413 + 48))(v84, 1, v411))
          v83(v84, v411);
        break;
      case 1:
        v85 = *(unsigned __int8 *)(v22 + v37);
        if (v85 >= 3)
        {
          if (v37 <= 3)
            v86 = v37;
          else
            v86 = 4;
          __asm { BR              X12 }
        }
        if (v85 == 2)
        {
          v115 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v428 + 48);
          if (!v115(v22, 1, v425))
            (*(void (**)(uint64_t, uint64_t))(v428 + 8))(v52, v425);
          v72 = v417;
          v116 = (v52 + v11 + v417) & v54;
          v80 = v391;
          if (!v115(v116, 1, v425))
            (*(void (**)(size_t, uint64_t))(v428 + 8))(v116, v425);
          (*(void (**)(size_t, uint64_t))(v392 + 8))((v372 + v116) & v393, v373);
        }
        else
        {
          if (v85 == 1)
            (*(void (**)(uint64_t, uint64_t))(v428 + 8))(v22, v425);
          else
            (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v22, v423);
LABEL_127:
          v72 = v417;
          v80 = v391;
        }
        break;
      case 2:
        v87 = (v22 + v9 + 216) & v394;
        (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v87, v423);
        v88 = (v11 + v415 + v87 + 1) & v54;
        v89 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v428 + 48);
        if (!v89(v88, 1, v425))
          (*(void (**)(uint64_t, uint64_t))(v428 + 8))(v88, v425);
        v90 = (v30 + v88) & v54;
        v72 = v417;
        v80 = v391;
        if (!v89(v90, 1, v425))
          (*(void (**)(uint64_t, uint64_t))(v428 + 8))(v90, v425);
        v91 = (v30 + v90) & v54;
        if (!v89(v91, 1, v425))
          (*(void (**)(uint64_t, uint64_t))(v428 + 8))(v91, v425);
        v92 = (v416 + v91) & v55;
        v93 = *(unsigned int (**)(size_t, uint64_t, uint64_t))(v413 + 48);
        if (!v93(v92, 1, v411))
          (*(void (**)(size_t, uint64_t))(v413 + 8))(v92, v411);
        v94 = (v375 + v92) & v55;
        if (!v93(v94, 1, v411))
          (*(void (**)(size_t, uint64_t))(v413 + 8))(v94, v411);
        v95 = (v376 + v94) & v409;
        if (!(*(unsigned int (**)(size_t, uint64_t, uint64_t))(v424 + 48))(v95, 1, v380))
          (*(void (**)(size_t, uint64_t))(v424 + 8))(v95, v380);
        break;
      case 3:
        v96 = v22 + v11 + 64;
        v97 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v428 + 48);
        if (!v97(v96 & v54, 1, v425))
          (*(void (**)(uint64_t, uint64_t))(v428 + 8))(v96 & v54, v425);
        v98 = ((v96 | v11) + v417) & v54;
        v80 = v391;
        if (!v97(v98, 1, v425))
          (*(void (**)(size_t, uint64_t))(v428 + 8))(v98, v425);
        v99 = (v416 + v98) & v55;
        v72 = v417;
        if (!(*(unsigned int (**)(size_t, uint64_t, uint64_t))(v413 + 48))(v99, 1, v411))
          goto LABEL_97;
        break;
      case 4:
        (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v22, v423);
        v100 = v52 + v11 + v415;
        goto LABEL_105;
      case 5:
      case 7:
        (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v22, v423);
        v70 = (v52 + v11 + v415) & v54;
        v71 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v428 + 48);
        if (!v71(v70, 1, v425))
          (*(void (**)(uint64_t, uint64_t))(v428 + 8))(v70, v425);
        v72 = v417;
        v73 = (v408 + ((v417 + v70) & 0xFFFFFFFFFFFFFFF8)) & v54;
        v74 = v73;
        v75 = v425;
        goto LABEL_116;
      case 6:
        v101 = (v22 + v9 + 24) & v394;
        (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v101, v423);
        v102 = v101 + v11 + v415;
        goto LABEL_113;
      case 8:
        v103 = v22 + v9 + 104;
        goto LABEL_104;
      case 9:
        v104 = (v22 + v9 + 160) & v394;
        (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v104, v423);
        v105 = v104 + v11 + v415;
        v106 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v428 + 48);
        if (!v106(v105 & v54, 1, v425))
          (*(void (**)(uint64_t, uint64_t))(v428 + 8))(v105 & v54, v425);
        v107 = ((v105 | v11) + v417) & v54;
        v80 = v391;
        if (!v106(v107, 1, v425))
          (*(void (**)(size_t, uint64_t))(v428 + 8))(v107, v425);
        v108 = (v30 + v107) & v54;
        if (!v106(v108, 1, v425))
          (*(void (**)(size_t, uint64_t))(v428 + 8))(v108, v425);
        v109 = (v30 + v108) & v54;
        v72 = v417;
        if (!v106(v109, 1, v425))
          (*(void (**)(size_t, uint64_t))(v428 + 8))(v109, v425);
        v99 = (v416 + v109) & v55;
        if (!(*(unsigned int (**)(size_t, uint64_t, uint64_t))(v413 + 48))(v99, 1, v411))
LABEL_97:
          (*(void (**)(size_t, uint64_t))(v413 + 8))(v99, v411);
        break;
      case 0xA:
        v103 = v22 + v9 + 56;
        goto LABEL_104;
      case 0xB:
        v110 = (v22 + v9 + 64) & v394;
        (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v110, v423);
        v111 = (v110 + v11 + v415) & v54;
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v428 + 48))(v111, 1, v425))
          (*(void (**)(uint64_t, uint64_t))(v428 + 8))(v111, v425);
        v72 = v417;
        v80 = v391;
        if (!v374)
          break;
        goto LABEL_129;
      case 0xC:
        v103 = v22 + v9 + 128;
LABEL_104:
        v112 = v103 & v394;
        (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v103 & v394, v423);
        v100 = v112 + v11 + v415;
LABEL_105:
        v113 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v428 + 48);
        if (!v113(v100 & v54, 1, v425))
          (*(void (**)(uint64_t, uint64_t))(v428 + 8))(v100 & v54, v425);
        v114 = ((v100 | v11) + v417) & v54;
        v80 = v391;
        if (!v113(v114, 1, v425))
          (*(void (**)(size_t, uint64_t))(v428 + 8))(v114, v425);
        v73 = (v30 + v114) & v54;
        v72 = v417;
        if (!v113(v73, 1, v425))
          goto LABEL_117;
        break;
      case 0xD:
        (*(void (**)(uint64_t, uint64_t))(v424 + 8))(v22, v380);
        goto LABEL_127;
      case 0xE:
        (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v22, v423);
        v102 = v52 + v11 + v415;
LABEL_113:
        v71 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v428 + 48);
        if (!v71(v102 & v54, 1, v425))
          (*(void (**)(uint64_t, uint64_t))(v428 + 8))(v102 & v54, v425);
        v73 = ((v102 | v11) + v417) & v54;
        v74 = v73;
        v75 = v425;
        v72 = v417;
LABEL_116:
        v80 = v391;
        if (!v71(v74, 1, v75))
LABEL_117:
          (*(void (**)(unint64_t, uint64_t))(v428 + 8))(v73, v425);
        break;
      default:
        if (v53 <= 3)
          v56 = v53;
        else
          v56 = 4;
        __asm { BR              X12 }
        return result;
    }
    v28 = v72;
LABEL_129:
    v117 = ((v410 + ((v416 + ((v30 + (((v80 | v11) + v28) & v54)) & v54)) & v55)) & v55) + v412;
    if (v396 > v117)
      v117 = v396;
    if (v42 > v117)
      v117 = v42;
    if (v404 > v117)
      v117 = v404;
    if (v402 > v117)
      v117 = v402;
    if (v403 > v117)
      v117 = v403;
    if (v401 > v117)
      v117 = v401;
    if (v403 > v117)
      v117 = v403;
    if (v400 > v117)
      v117 = v400;
    if (v399 > v117)
      v117 = v399;
    if (v398 > v117)
      v117 = v398;
    if (v397 > v117)
      v117 = v397;
    if (v395 > v117)
      v117 = v395;
    if (v407 > v117)
      v117 = v407;
    if (v406 > v117)
      v117 = v406;
    switch(*(_BYTE *)(v426 + v117))
    {
      case 0:
        v119 = *(_OWORD *)v426;
        v120 = *(_OWORD *)(v426 + 16);
        v121 = *(_OWORD *)(v426 + 48);
        *(_OWORD *)(v427 + 32) = *(_OWORD *)(v426 + 32);
        *(_OWORD *)(v427 + 48) = v121;
        *(_OWORD *)v427 = v119;
        *(_OWORD *)(v427 + 16) = v120;
        v122 = *(_OWORD *)(v426 + 64);
        v123 = *(_OWORD *)(v426 + 80);
        v124 = *(_OWORD *)(v426 + 112);
        *(_OWORD *)(v427 + 96) = *(_OWORD *)(v426 + 96);
        *(_OWORD *)(v427 + 112) = v124;
        *(_OWORD *)(v427 + 64) = v122;
        *(_OWORD *)(v427 + 80) = v123;
        v125 = *(_OWORD *)(v426 + 128);
        v126 = *(_OWORD *)(v426 + 144);
        v127 = *(_OWORD *)(v426 + 176);
        *(_OWORD *)(v427 + 160) = *(_OWORD *)(v426 + 160);
        *(_OWORD *)(v427 + 176) = v127;
        *(_OWORD *)(v427 + 128) = v125;
        *(_OWORD *)(v427 + 144) = v126;
        v128 = *(_OWORD *)(v426 + 192);
        v129 = *(_OWORD *)(v426 + 208);
        v130 = *(_OWORD *)(v426 + 224);
        *(_QWORD *)(v427 + 240) = *(_QWORD *)(v426 + 240);
        *(_OWORD *)(v427 + 208) = v129;
        *(_OWORD *)(v427 + 224) = v130;
        *(_OWORD *)(v427 + 192) = v128;
        v131 = (v427 + v9 + 248) & v394;
        v132 = (v426 + v9 + 248) & v394;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v418 + 16))(v131, v132, v423);
        *(_BYTE *)(v415 + v131) = *(_BYTE *)(v415 + v132);
        v133 = (void *)((v11 + 1 + v415 + v131) & v54);
        v134 = (const void *)((v11 + 1 + v415 + v132) & v54);
        v135 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v428 + 48);
        if (v135(v134, 1, v425))
        {
          memcpy(v133, v134, v72);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v428 + 16))(v133, v134, v425);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v133, 0, 1, v425);
        }
        v238 = (void *)(((unint64_t)v133 + v30) & v54);
        v239 = (const void *)(((unint64_t)v134 + v30) & v54);
        if (v135(v239, 1, v425))
        {
          memcpy(v238, v239, v72);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v428 + 16))(v238, v239, v425);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v238, 0, 1, v425);
        }
        v280 = (void *)(((unint64_t)v238 + v30) & v54);
        v281 = (const void *)(((unint64_t)v239 + v30) & v54);
        if (v135(v281, 1, v425))
        {
          memcpy(v280, v281, v72);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v428 + 16))(v280, v281, v425);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v280, 0, 1, v425);
        }
        v12 = v413;
        v296 = ((unint64_t)v280 + v416) & v414;
        v297 = *(void (**)(unint64_t, unint64_t, uint64_t))(v413 + 16);
        v297(v296, ((unint64_t)v281 + v416) & v414, v411);
        v298 = (void *)((v410 + v296) & v414);
        v299 = (const void *)((v410 + (((unint64_t)v281 + v416) & v414)) & v414);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v413 + 48))(v299, 1, v411))
        {
          memcpy(v298, v299, v412);
        }
        else
        {
          v297((unint64_t)v298, (unint64_t)v299, v411);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v413 + 56))(v298, 0, 1, v411);
        }
        v68 = v390;
        v61 = v409;
        *(_BYTE *)(v427 + v422) = 0;
        goto LABEL_329;
      case 1:
        v136 = *(unsigned __int8 *)(v426 + v377);
        if (v136 >= 3)
        {
          if (v377 <= 3)
            v137 = v377;
          else
            v137 = 4;
          __asm { BR              X12 }
        }
        v379 = ~v11;
        v370 = v11;
        if (v136 == 2)
        {
          v316 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v428 + 48);
          if (v316(v426, 1, v425))
          {
            memcpy((void *)v427, (const void *)v426, v72);
          }
          else
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v428 + 16))(v427, v426, v425);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v428 + 56))(v427, 0, 1, v425);
          }
          v318 = (void *)((v427 + v11 + v72) & v54);
          v319 = (const void *)((v426 + v11 + v72) & v54);
          v69 = v419;
          v12 = v413;
          v248 = v11 + 24;
          v68 = v390;
          if (v316((uint64_t)v319, 1, v425))
          {
            memcpy(v318, v319, v72);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v428 + 16))(v318, v319, v425);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v318, 0, 1, v425);
          }
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v392 + 16))(((unint64_t)v318 + v372) & v393, ((unint64_t)v319 + v372) & v393, v373);
          v16 = v392;
          v315 = 2;
          v317 = v427;
          v20 = v388;
          v15 = v389;
          v8 = v418;
          v57 = v386;
          v17 = v387;
          v62 = (v11 + 64) & ~v11;
          v60 = v385;
          v65 = v383;
          v64 = v384;
          v67 = v381;
          v66 = v382;
        }
        else
        {
          if (v136 == 1)
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v428 + 16))(v427, v426, v425);
            v8 = v418;
            v315 = 1;
          }
          else
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v418 + 16))(v427, v426, v423);
            v8 = v418;
            v315 = 0;
          }
          v69 = v419;
          v20 = v388;
          v15 = v389;
          v16 = v392;
          v12 = v413;
          v57 = v386;
          v17 = v387;
          v62 = (v11 + 64) & ~v11;
          v60 = v385;
          v248 = v11 + 24;
          v65 = v383;
          v64 = v384;
          v67 = v381;
          v66 = v382;
          v317 = v427;
          v68 = v390;
        }
        v61 = v409;
        *(_BYTE *)(v317 + v377) = v315;
        *(_BYTE *)(v317 + v422) = 1;
        v58 = v414;
        v59 = v393;
        goto LABEL_346;
      case 2:
        v138 = *(_OWORD *)(v426 + 16);
        *(_OWORD *)v427 = *(_OWORD *)v426;
        *(_OWORD *)(v427 + 16) = v138;
        v139 = *(_OWORD *)(v426 + 32);
        v140 = *(_OWORD *)(v426 + 48);
        v141 = *(_OWORD *)(v426 + 80);
        *(_OWORD *)(v427 + 64) = *(_OWORD *)(v426 + 64);
        *(_OWORD *)(v427 + 80) = v141;
        *(_OWORD *)(v427 + 32) = v139;
        *(_OWORD *)(v427 + 48) = v140;
        v142 = *(_OWORD *)(v426 + 96);
        v143 = *(_OWORD *)(v426 + 112);
        v144 = *(_OWORD *)(v426 + 144);
        *(_OWORD *)(v427 + 128) = *(_OWORD *)(v426 + 128);
        *(_OWORD *)(v427 + 144) = v144;
        *(_OWORD *)(v427 + 96) = v142;
        *(_OWORD *)(v427 + 112) = v143;
        v145 = *(_OWORD *)(v426 + 160);
        v146 = *(_OWORD *)(v426 + 176);
        v147 = *(_OWORD *)(v426 + 192);
        *(_QWORD *)(v427 + 208) = *(_QWORD *)(v426 + 208);
        *(_OWORD *)(v427 + 176) = v146;
        *(_OWORD *)(v427 + 192) = v147;
        *(_OWORD *)(v427 + 160) = v145;
        v148 = (v427 + v9 + 216) & v394;
        v149 = (v426 + v9 + 216) & v394;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v418 + 16))(v148, v149, v423);
        *(_BYTE *)(v415 + v148) = *(_BYTE *)(v415 + v149);
        v150 = (void *)((v11 + 1 + v415 + v148) & v54);
        v151 = (const void *)((v11 + 1 + v415 + v149) & v54);
        v152 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v428 + 48);
        if (v152(v151, 1, v425))
        {
          memcpy(v150, v151, v72);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v428 + 16))(v150, v151, v425);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v150, 0, 1, v425);
        }
        v240 = (void *)(((unint64_t)v150 + v30) & v54);
        v241 = (const void *)(((unint64_t)v151 + v30) & v54);
        if (v152(v241, 1, v425))
        {
          memcpy(v240, v241, v72);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v428 + 16))(v240, v241, v425);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v240, 0, 1, v425);
        }
        v282 = (void *)(((unint64_t)v240 + v30) & v54);
        v283 = (const void *)(((unint64_t)v241 + v30) & v54);
        if (v152(v283, 1, v425))
        {
          memcpy(v282, v283, v72);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v428 + 16))(v282, v283, v425);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v282, 0, 1, v425);
        }
        v12 = v413;
        v300 = (void *)(((unint64_t)v282 + v416) & v414);
        v301 = (const void *)(((unint64_t)v283 + v416) & v414);
        v302 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v413 + 48);
        if (v302(v301, 1, v411))
        {
          memcpy(v300, v301, v412);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v413 + 16))(v300, v301, v411);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v413 + 56))(v300, 0, 1, v411);
        }
        v309 = (void *)(((unint64_t)v300 + v375) & v414);
        v310 = (const void *)(((unint64_t)v301 + v375) & v414);
        if (v302(v310, 1, v411))
        {
          memcpy(v309, v310, v412);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v413 + 16))(v309, v310, v411);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v413 + 56))(v309, 0, 1, v411);
        }
        v313 = (void *)(((unint64_t)v309 + v376) & v409);
        v314 = (const void *)(((unint64_t)v310 + v376) & v409);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v424 + 48))(v314, 1, v380))
        {
          memcpy(v313, v314, __n);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v424 + 16))(v313, v314, v380);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v424 + 56))(v313, 0, 1, v380);
        }
        v15 = v389;
        v68 = v390;
        *(_BYTE *)(v427 + v422) = 2;
        v17 = v387;
        v20 = v388;
        v16 = v392;
        v59 = v393;
        v8 = v418;
        v69 = v419;
        v60 = v385;
        v57 = v386;
        v64 = v384;
        v62 = (v11 + 64) & ~v11;
        v63 = v11 + 24;
        v61 = v409;
        v66 = v382;
        v65 = v383;
        v67 = v381;
        v58 = v414;
        break;
      case 3:
        v153 = *(_OWORD *)v426;
        v154 = *(_OWORD *)(v426 + 16);
        v155 = *(_OWORD *)(v426 + 48);
        *(_OWORD *)(v427 + 32) = *(_OWORD *)(v426 + 32);
        *(_OWORD *)(v427 + 48) = v155;
        *(_OWORD *)v427 = v153;
        *(_OWORD *)(v427 + 16) = v154;
        v156 = v427 + v11 + 64;
        v157 = v426 + v11 + 64;
        v158 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v428 + 48);
        if (v158(v157 & v54, 1, v425))
        {
          memcpy((void *)(v156 & v54), (const void *)(v157 & v54), v72);
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v428 + 16))(v156 & v54, v157 & v54, v425);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v428 + 56))(v156 & v54, 0, 1, v425);
        }
        v242 = (void *)(((v156 | v11) + v72) & v54);
        v243 = (const void *)(((v157 | v11) + v72) & v54);
        if (v158((uint64_t)v243, 1, v425))
        {
          memcpy(v242, v243, v72);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v428 + 16))(v242, v243, v425);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v242, 0, 1, v425);
        }
        v69 = v419;
        v12 = v413;
        v68 = v390;
        v284 = (void *)(((unint64_t)v242 + v416) & v414);
        v285 = (const void *)(((unint64_t)v243 + v416) & v414);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v413 + 48))(v285, 1, v411))
        {
          memcpy(v284, v285, v412);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v413 + 16))(v284, v285, v411);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v413 + 56))(v284, 0, 1, v411);
        }
        v63 = v11 + 24;
        v61 = v409;
        *(_BYTE *)(v427 + v422) = 3;
        v20 = v388;
        v15 = v389;
        v16 = v392;
        v59 = v393;
        v8 = v418;
        v57 = v386;
        v17 = v387;
        v62 = (v11 + 64) & ~v11;
        v60 = v385;
        goto LABEL_330;
      case 4:
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v418 + 16))(v427, v426, v423);
        v159 = v427 + v11 + v415;
        v160 = v426 + v11 + v415;
        v161 = (const void *)(v160 & v54);
        v162 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v428 + 48);
        if (v162(v160 & v54, 1, v425))
        {
          v163 = v417;
          memcpy((void *)(v159 & v54), v161, v417);
        }
        else
        {
          (*(void (**)(uint64_t, const void *, uint64_t))(v428 + 16))(v159 & v54, v161, v425);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v428 + 56))(v159 & v54, 0, 1, v425);
          v163 = v417;
        }
        v244 = (void *)(((v159 | v11) + v163) & v54);
        v245 = (const void *)(((v160 | v11) + v163) & v54);
        v246 = v163;
        if (v162((uint64_t)v245, 1, v425))
        {
          memcpy(v244, v245, v163);
          v69 = v419;
          v247 = v428;
        }
        else
        {
          v247 = v428;
          (*(void (**)(void *, const void *, uint64_t))(v428 + 16))(v244, v245, v425);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v244, 0, 1, v425);
          v69 = v419;
        }
        v286 = (void *)(((unint64_t)v244 + v30) & v54);
        v378 = ~v11;
        v287 = (const void *)(((unint64_t)v245 + v30) & v54);
        if (v162((uint64_t)v287, 1, v425))
        {
          memcpy(v286, v287, v246);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v247 + 16))(v286, v287, v425);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v247 + 56))(v286, 0, 1, v425);
        }
        v12 = v413;
        v63 = v11 + 24;
        v68 = v390;
        v303 = 4;
        goto LABEL_314;
      case 5:
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v418 + 16))(v427, v426, v423);
        v164 = (void *)((v427 + v11 + v415) & v54);
        v165 = (const void *)((v426 + v11 + v415) & v54);
        v166 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v428 + 48);
        v167 = ~v11;
        if (v166(v165, 1, v425))
        {
          memcpy(v164, v165, v72);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v428 + 16))(v164, v165, v425);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v164, 0, 1, v425);
        }
        v248 = v11 + 24;
        *((_BYTE *)v164 + v72) = *((_BYTE *)v165 + v72);
        v249 = ((unint64_t)v164 + v72) & 0xFFFFFFFFFFFFFFF8;
        v250 = ((unint64_t)v165 + v72) & 0xFFFFFFFFFFFFFFF8;
        *(_OWORD *)(v249 + 8) = *(_OWORD *)(v250 + 8);
        v251 = (void *)((v408 + v249) & v167);
        v379 = ~v11;
        v252 = (const void *)((v408 + v250) & v167);
        v370 = v11;
        if (v166(v252, 1, v425))
        {
          memcpy(v251, v252, v72);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v428 + 16))(v251, v252, v425);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v251, 0, 1, v425);
        }
        v20 = v388;
        v15 = v389;
        v16 = v392;
        v59 = v393;
        v12 = v413;
        v58 = v414;
        v57 = v386;
        v17 = v387;
        v62 = (v11 + 64) & ~v11;
        v60 = v385;
        v65 = v383;
        v64 = v384;
        v67 = v381;
        v66 = v382;
        v61 = v409;
        *(_BYTE *)(v427 + v422) = 5;
        v8 = v418;
        v69 = v419;
        v68 = v390;
LABEL_346:
        v63 = v248;
        goto LABEL_347;
      case 6:
        v168 = *(_OWORD *)v426;
        *(_QWORD *)(v427 + 16) = *(_QWORD *)(v426 + 16);
        *(_OWORD *)v427 = v168;
        v169 = (v427 + v9 + 24) & v394;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v418 + 16))(v169, (v426 + v9 + 24) & v394, v423);
        v170 = v169 + v11 + v415;
        v171 = (void *)(v170 & v54);
        v172 = ((v426 + v9 + 24) & v394) + v11 + v415;
        v173 = (const void *)(v172 & v54);
        v174 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v428 + 48);
        if (v174(v172 & v54, 1, v425))
        {
          v175 = v417;
          memcpy(v171, v173, v417);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v428 + 16))(v171, v173, v425);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v171, 0, 1, v425);
          v175 = v417;
        }
        v253 = ((v170 | v11) + v175) & v54;
        v254 = (const void *)(((v172 | v11) + v175) & v54);
        v379 = ~v11;
        v370 = v11;
        if (v174((uint64_t)v254, 1, v425))
        {
          memcpy((void *)(((v170 | v11) + v175) & v54), v254, v175);
        }
        else
        {
          (*(void (**)(size_t, const void *, uint64_t))(v428 + 16))(v253, v254, v425);
          (*(void (**)(size_t, _QWORD, uint64_t, uint64_t))(v428 + 56))(v253, 0, 1, v425);
        }
        v20 = v388;
        v15 = v389;
        v16 = v392;
        v59 = v393;
        v12 = v413;
        v58 = v414;
        v8 = v418;
        v69 = v419;
        v57 = v386;
        v17 = v387;
        v62 = (v11 + 64) & ~v11;
        v60 = v385;
        v63 = v11 + 24;
        v61 = v409;
        v65 = v383;
        v64 = v384;
        v67 = v381;
        v66 = v382;
        *(_BYTE *)(v427 + v422) = 6;
        v68 = v390;
        goto LABEL_347;
      case 7:
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v418 + 16))(v427, v426, v423);
        v176 = (void *)((v427 + v11 + v415) & v54);
        v378 = ~v11;
        v177 = (const void *)((v426 + v11 + v415) & v54);
        v178 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v428 + 48);
        if (v178(v177, 1, v425))
        {
          memcpy(v176, v177, v72);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v428 + 16))(v176, v177, v425);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v176, 0, 1, v425);
        }
        *((_BYTE *)v176 + v72) = *((_BYTE *)v177 + v72);
        v255 = ((unint64_t)v176 + v72) & 0xFFFFFFFFFFFFFFF8;
        v256 = ((unint64_t)v177 + v72) & 0xFFFFFFFFFFFFFFF8;
        *(_OWORD *)(v255 + 8) = *(_OWORD *)(v256 + 8);
        v257 = (void *)((v408 + v255) & v378);
        v258 = (const void *)((v408 + v256) & v378);
        v69 = v419;
        if (v178(v258, 1, v425))
        {
          memcpy(v257, v258, v72);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v428 + 16))(v257, v258, v425);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v257, 0, 1, v425);
        }
        v12 = v413;
        v58 = v414;
        *(_BYTE *)(v427 + v422) = 7;
        v20 = v388;
        v15 = v389;
        v16 = v392;
        v59 = v393;
        v8 = v418;
        v57 = v386;
        v17 = v387;
        v62 = (v11 + 64) & ~v11;
        v60 = v385;
        v65 = v383;
        v64 = v384;
        v67 = v381;
        v66 = v382;
        v61 = v409;
        v68 = v390;
        v63 = v11 + 24;
        goto LABEL_315;
      case 8:
        v179 = *(_OWORD *)v426;
        v180 = *(_OWORD *)(v426 + 32);
        *(_OWORD *)(v427 + 16) = *(_OWORD *)(v426 + 16);
        *(_OWORD *)(v427 + 32) = v180;
        *(_OWORD *)v427 = v179;
        v181 = *(_OWORD *)(v426 + 48);
        v182 = *(_OWORD *)(v426 + 64);
        v183 = *(_OWORD *)(v426 + 80);
        *(_QWORD *)(v427 + 96) = *(_QWORD *)(v426 + 96);
        *(_OWORD *)(v427 + 64) = v182;
        *(_OWORD *)(v427 + 80) = v183;
        *(_OWORD *)(v427 + 48) = v181;
        v184 = (v427 + v9 + 104) & v394;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v418 + 16))(v184, (v426 + v9 + 104) & v394, v423);
        v185 = v184 + v11 + v415;
        v186 = (void *)(v185 & v54);
        v187 = ((v426 + v9 + 104) & v394) + v11 + v415;
        v188 = (const void *)(v187 & v54);
        v189 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v428 + 48);
        if (v189(v187 & v54, 1, v425))
        {
          v190 = v417;
          memcpy(v186, v188, v417);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v428 + 16))(v186, v188, v425);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v186, 0, 1, v425);
          v190 = v417;
        }
        v259 = (void *)(((v185 | v11) + v190) & v54);
        v260 = (const void *)(((v187 | v11) + v190) & v54);
        v261 = v190;
        v262 = (unsigned int (*)(const void *, uint64_t, uint64_t))v189;
        if (v189((uint64_t)v260, 1, v425))
        {
          memcpy(v259, v260, v190);
          v69 = v419;
          v263 = v428;
        }
        else
        {
          v263 = v428;
          (*(void (**)(void *, const void *, uint64_t))(v428 + 16))(v259, v260, v425);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v259, 0, 1, v425);
          v69 = v419;
        }
        v288 = (void *)(((unint64_t)v259 + v30) & v54);
        v289 = (const void *)(((unint64_t)v260 + v30) & v54);
        v379 = ~v11;
        v370 = v11;
        if (v262(v289, 1, v425))
        {
          memcpy(v288, v289, v261);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v263 + 16))(v288, v289, v425);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v263 + 56))(v288, 0, 1, v425);
        }
        v304 = v427;
        v20 = v388;
        v15 = v389;
        v16 = v392;
        v12 = v413;
        v8 = v418;
        v57 = v386;
        v17 = v387;
        v62 = (v11 + 64) & ~v11;
        v60 = v385;
        v63 = v11 + 24;
        v61 = v409;
        v65 = v383;
        v64 = v384;
        v67 = v381;
        v66 = v382;
        v68 = v390;
        v305 = v422;
        v306 = 8;
        goto LABEL_311;
      case 9:
        v191 = *(_OWORD *)(v426 + 16);
        *(_OWORD *)v427 = *(_OWORD *)v426;
        *(_OWORD *)(v427 + 16) = v191;
        v192 = *(_OWORD *)(v426 + 32);
        v193 = *(_OWORD *)(v426 + 48);
        v194 = *(_OWORD *)(v426 + 80);
        *(_OWORD *)(v427 + 64) = *(_OWORD *)(v426 + 64);
        *(_OWORD *)(v427 + 80) = v194;
        *(_OWORD *)(v427 + 32) = v192;
        *(_OWORD *)(v427 + 48) = v193;
        v195 = *(_OWORD *)(v426 + 96);
        v196 = *(_OWORD *)(v426 + 112);
        v197 = *(_OWORD *)(v426 + 144);
        *(_OWORD *)(v427 + 128) = *(_OWORD *)(v426 + 128);
        *(_OWORD *)(v427 + 144) = v197;
        *(_OWORD *)(v427 + 96) = v195;
        *(_OWORD *)(v427 + 112) = v196;
        v198 = (v427 + v9 + 160) & v394;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v418 + 16))(v198, (v426 + v9 + 160) & v394, v423);
        v199 = v198 + v11 + v415;
        v200 = (void *)(v199 & v54);
        v201 = ((v426 + v9 + 160) & v394) + v11 + v415;
        v202 = (const void *)(v201 & v54);
        v203 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v428 + 48);
        if (v203(v201 & v54, 1, v425))
        {
          v204 = v417;
          memcpy(v200, v202, v417);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v428 + 16))(v200, v202, v425);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v200, 0, 1, v425);
          v204 = v417;
        }
        v264 = (void *)(((v199 | v11) + v204) & v54);
        v265 = (const void *)(((v201 | v11) + v204) & v54);
        v266 = v204;
        if (v203((uint64_t)v265, 1, v425))
        {
          memcpy(v264, v265, v204);
          v267 = v428;
        }
        else
        {
          v267 = v428;
          (*(void (**)(void *, const void *, uint64_t))(v428 + 16))(v264, v265, v425);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v264, 0, 1, v425);
        }
        v290 = (void *)(((unint64_t)v264 + v30) & v54);
        v291 = (const void *)(((unint64_t)v265 + v30) & v54);
        if (v203((uint64_t)v291, 1, v425))
        {
          memcpy(v290, v291, v266);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v267 + 16))(v290, v291, v425);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v267 + 56))(v290, 0, 1, v425);
        }
        v307 = (void *)(((unint64_t)v290 + v30) & v54);
        v308 = (const void *)(((unint64_t)v291 + v30) & v54);
        if (v203((uint64_t)v308, 1, v425))
        {
          memcpy(v307, v308, v266);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v267 + 16))(v307, v308, v425);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v267 + 56))(v307, 0, 1, v425);
        }
        v12 = v413;
        v68 = v390;
        v311 = (void *)(((unint64_t)v307 + v416) & v414);
        v312 = (const void *)(((unint64_t)v308 + v416) & v414);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v413 + 48))(v312, 1, v411))
        {
          memcpy(v311, v312, v412);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v413 + 16))(v311, v312, v411);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v413 + 56))(v311, 0, 1, v411);
        }
        v61 = v409;
        *(_BYTE *)(v427 + v422) = 9;
LABEL_329:
        v20 = v388;
        v15 = v389;
        v16 = v392;
        v59 = v393;
        v8 = v418;
        v69 = v419;
        v57 = v386;
        v17 = v387;
        v62 = (v11 + 64) & ~v11;
        v60 = v385;
        v63 = v11 + 24;
LABEL_330:
        v65 = v383;
        v64 = v384;
        v67 = v381;
        v66 = v382;
        v58 = v414;
        break;
      case 0xA:
        v205 = *(_OWORD *)v426;
        v206 = *(_OWORD *)(v426 + 16);
        v207 = *(_OWORD *)(v426 + 32);
        *(_QWORD *)(v427 + 48) = *(_QWORD *)(v426 + 48);
        *(_OWORD *)(v427 + 16) = v206;
        *(_OWORD *)(v427 + 32) = v207;
        *(_OWORD *)v427 = v205;
        v208 = (v427 + v9 + 56) & v394;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v418 + 16))(v208, (v426 + v9 + 56) & v394, v423);
        v209 = v208 + v11 + v415;
        v210 = (void *)(v209 & v54);
        v211 = ((v426 + v9 + 56) & v394) + v11 + v415;
        v212 = (const void *)(v211 & v54);
        v213 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v428 + 48);
        if (v213(v211 & v54, 1, v425))
        {
          v214 = v417;
          memcpy(v210, v212, v417);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v428 + 16))(v210, v212, v425);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v210, 0, 1, v425);
          v214 = v417;
        }
        v268 = (void *)(((v209 | v11) + v214) & v54);
        v269 = (const void *)(((v211 | v11) + v214) & v54);
        v270 = v214;
        v271 = (unsigned int (*)(const void *, uint64_t, uint64_t))v213;
        if (v213((uint64_t)v269, 1, v425))
        {
          memcpy(v268, v269, v214);
          v69 = v419;
          v272 = v428;
        }
        else
        {
          v272 = v428;
          (*(void (**)(void *, const void *, uint64_t))(v428 + 16))(v268, v269, v425);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v268, 0, 1, v425);
          v69 = v419;
        }
        v292 = (void *)(((unint64_t)v268 + v30) & v54);
        v293 = (const void *)(((unint64_t)v269 + v30) & v54);
        v379 = ~v11;
        v370 = v11;
        if (v271(v293, 1, v425))
        {
          memcpy(v292, v293, v270);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v272 + 16))(v292, v293, v425);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v292, 0, 1, v425);
        }
        v304 = v427;
        v20 = v388;
        v15 = v389;
        v16 = v392;
        v12 = v413;
        v8 = v418;
        v57 = v386;
        v17 = v387;
        v62 = (v11 + 64) & ~v11;
        v60 = v385;
        v63 = v11 + 24;
        v61 = v409;
        v65 = v383;
        v64 = v384;
        v67 = v381;
        v66 = v382;
        v68 = v390;
        v305 = v422;
        v306 = 10;
LABEL_311:
        *(_BYTE *)(v304 + v305) = v306;
        v58 = v414;
        v59 = v393;
LABEL_347:
        v54 = v379;
        v11 = v370;
        break;
      case 0xB:
        v215 = *(_OWORD *)v426;
        v216 = *(_OWORD *)(v426 + 16);
        v217 = *(_OWORD *)(v426 + 48);
        *(_OWORD *)(v427 + 32) = *(_OWORD *)(v426 + 32);
        *(_OWORD *)(v427 + 48) = v217;
        *(_OWORD *)v427 = v215;
        *(_OWORD *)(v427 + 16) = v216;
        v218 = (v427 + v9 + 64) & v394;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v418 + 16))(v218, (v426 + v9 + 64) & v394, v423);
        v219 = (void *)((v218 + v11 + v415) & v54);
        v220 = (const void *)((((v426 + v9 + 64) & v394) + v11 + v415) & v54);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v428 + 48))(v220, 1, v425))
        {
          memcpy(v219, v220, v72);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v428 + 16))(v219, v220, v425);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v219, 0, 1, v425);
        }
        v69 = v419;
        *((_BYTE *)v219 + v72) = *((_BYTE *)v220 + v72);
        v58 = v414;
        v61 = v409;
        v273 = ((v410 + ((v416 + ((v30 + (((v80 | v11) + v72) & v54)) & v54)) & v58)) & v58) + v412;
        if (v396 > v273)
          v273 = v396;
        if (v405 > v273)
          v273 = v405;
        if (v404 > v273)
          v273 = v404;
        if (v402 > v273)
          v273 = v402;
        if (v403 > v273)
          v273 = v403;
        if (v401 > v273)
          v273 = v401;
        if (v403 > v273)
          v273 = v403;
        if (v400 > v273)
          v273 = v400;
        if (v399 > v273)
          v273 = v399;
        if (v398 > v273)
          v273 = v398;
        if (v397 > v273)
          v273 = v397;
        if (v395 > v273)
          v273 = v395;
        if (v407 > v273)
          v273 = v407;
        if (v406 > v273)
          v273 = v406;
        *(_BYTE *)(v427 + v273) = 11;
        v20 = v388;
        v15 = v389;
        v16 = v392;
        v59 = v393;
        v12 = v413;
        v8 = v418;
        v57 = v386;
        v17 = v387;
        v62 = (v11 + 64) & ~v11;
        v60 = v385;
        v63 = v11 + 24;
        v65 = v383;
        v64 = v384;
        v67 = v381;
        v66 = v382;
        v68 = v390;
        break;
      case 0xC:
        v221 = *(_OWORD *)v426;
        v222 = *(_OWORD *)(v426 + 16);
        v223 = *(_OWORD *)(v426 + 48);
        *(_OWORD *)(v427 + 32) = *(_OWORD *)(v426 + 32);
        *(_OWORD *)(v427 + 48) = v223;
        *(_OWORD *)v427 = v221;
        *(_OWORD *)(v427 + 16) = v222;
        v224 = *(_OWORD *)(v426 + 64);
        v225 = *(_OWORD *)(v426 + 80);
        v226 = *(_OWORD *)(v426 + 112);
        *(_OWORD *)(v427 + 96) = *(_OWORD *)(v426 + 96);
        *(_OWORD *)(v427 + 112) = v226;
        *(_OWORD *)(v427 + 64) = v224;
        *(_OWORD *)(v427 + 80) = v225;
        v227 = (v427 + v9 + 128) & v394;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v418 + 16))(v227, (v426 + v9 + 128) & v394, v423);
        v228 = v227 + v11 + v415;
        v229 = (void *)(v228 & v54);
        v230 = ((v426 + v9 + 128) & v394) + v11 + v415;
        v231 = (const void *)(v230 & v54);
        v232 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v428 + 48);
        if (v232(v230 & v54, 1, v425))
        {
          v233 = v417;
          memcpy(v229, v231, v417);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v428 + 16))(v229, v231, v425);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v229, 0, 1, v425);
          v233 = v417;
        }
        v274 = (void *)(((v228 | v11) + v233) & v54);
        v275 = (const void *)(((v230 | v11) + v233) & v54);
        v276 = v233;
        if (v232((uint64_t)v275, 1, v425))
        {
          memcpy(v274, v275, v233);
          v69 = v419;
          v277 = v428;
        }
        else
        {
          v277 = v428;
          (*(void (**)(void *, const void *, uint64_t))(v428 + 16))(v274, v275, v425);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v274, 0, 1, v425);
          v69 = v419;
        }
        v294 = (void *)(((unint64_t)v274 + v30) & v54);
        v378 = ~v11;
        v295 = (const void *)(((unint64_t)v275 + v30) & v54);
        if (v232((uint64_t)v295, 1, v425))
        {
          memcpy(v294, v295, v276);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v277 + 16))(v294, v295, v425);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v277 + 56))(v294, 0, 1, v425);
        }
        v12 = v413;
        v63 = v11 + 24;
        v68 = v390;
        v303 = 12;
LABEL_314:
        *(_BYTE *)(v427 + v422) = v303;
        v20 = v388;
        v15 = v389;
        v16 = v392;
        v59 = v393;
        v8 = v418;
        v57 = v386;
        v17 = v387;
        v62 = (v11 + 64) & ~v11;
        v60 = v385;
        v65 = v383;
        v64 = v384;
        v67 = v381;
        v66 = v382;
        v58 = v414;
        v61 = v409;
        goto LABEL_315;
      case 0xD:
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v424 + 16))(v427, v426, v380);
        v8 = v418;
        v69 = v419;
        *(_BYTE *)(v427 + v422) = 13;
        v20 = v388;
        v15 = v389;
        v16 = v392;
        v59 = v393;
        v58 = v55;
        v12 = v413;
        v57 = v386;
        v17 = v387;
        v62 = (v11 + 64) & ~v11;
        v60 = v385;
        v63 = v11 + 24;
        v61 = v409;
        v65 = v383;
        v64 = v384;
        v67 = v381;
        v66 = v382;
        v68 = v390;
        break;
      case 0xE:
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v418 + 16))(v427, v426, v423);
        v234 = v427 + v11 + v415;
        v235 = v426 + v11 + v415;
        v236 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v428 + 48);
        if (v236(v235 & v54, 1, v425))
        {
          v237 = v417;
          memcpy((void *)(v234 & v54), (const void *)(v235 & v54), v417);
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v428 + 16))(v234 & v54, v235 & v54, v425);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v428 + 56))(v234 & v54, 0, 1, v425);
          v237 = v417;
        }
        v278 = ((v234 | v11) + v237) & v54;
        v378 = ~v11;
        v279 = (const void *)(((v235 | v11) + v237) & v54);
        v69 = v419;
        if (v236((uint64_t)v279, 1, v425))
        {
          memcpy((void *)(((v234 | v11) + v237) & v54), v279, v237);
        }
        else
        {
          (*(void (**)(size_t, const void *, uint64_t))(v428 + 16))(v278, v279, v425);
          (*(void (**)(size_t, _QWORD, uint64_t, uint64_t))(v428 + 56))(v278, 0, 1, v425);
        }
        v12 = v413;
        v58 = v414;
        v63 = v11 + 24;
        v61 = v409;
        *(_BYTE *)(v427 + v422) = 14;
        v20 = v388;
        v15 = v389;
        v16 = v392;
        v59 = v393;
        v8 = v418;
        v57 = v386;
        v17 = v387;
        v62 = (v11 + 64) & ~v11;
        v60 = v385;
        v65 = v383;
        v64 = v384;
        v67 = v381;
        v66 = v382;
        v68 = v390;
LABEL_315:
        v54 = v378;
        break;
      default:
        if (v422 <= 3)
          v118 = v422;
        else
          v118 = 4;
        __asm { BR              X12 }
        return result;
    }
  }
  v320 = *(_QWORD *)(v8 + 64);
  v321 = (v57 + v320) & v54;
  v322 = *(_QWORD *)(v428 + 64);
  if (*(_DWORD *)(v428 + 84))
    v323 = *(_QWORD *)(v428 + 64);
  else
    v323 = v322 + 1;
  v324 = v323 + v11;
  v325 = v323 + v15;
  v326 = *(_QWORD *)(v12 + 64);
  v327 = (v326 + v15 + ((v323 + v15 + ((v323 + v11 + ((v323 + v11 + v321) & v54)) & v54)) & v58)) & v58;
  if (*(_DWORD *)(v12 + 84))
    v328 = *(_QWORD *)(v12 + 64);
  else
    v328 = v326 + 1;
  v329 = v327 + v328;
  if (v322 <= v320)
    v322 = *(_QWORD *)(v8 + 64);
  v330 = ((v323 + v17 + (v324 & v54)) & v59) + *(_QWORD *)(v16 + 64);
  if (v330 <= v322)
    v330 = v322;
  v331 = (v328 + v20 + ((v328 + v15 + ((v325 + ((v324 + ((v324 + ((v60 + v320) & v54)) & v54)) & v54)) & v58)) & v58)) & v61;
  v332 = *(_QWORD *)(v424 + 64);
  if (*(_DWORD *)(v424 + 84))
    v333 = *(_QWORD *)(v424 + 64);
  else
    v333 = v332 + 1;
  v334 = v333 + v331;
  v335 = ((v325 + ((v324 + v62) & v54)) & v58) + v328;
  v336 = v323 + ((v320 + v11) & v54);
  v337 = ((v336 + v11) & v54) + v323;
  v338 = ((v337 + v11) & v54) + v323;
  v339 = ((v63 + (v336 & 0xFFFFFFFFFFFFFFF8)) & v54) + v323;
  v340 = ((v324 + ((v420 + v320) & v54)) & v54) + v323;
  v341 = ((v324 + ((v324 + ((v64 + v320) & v54)) & v54)) & v54) + v323;
  v342 = ((v325 + ((v324 + ((v324 + ((v324 + ((v65 + v320) & v54)) & v54)) & v54)) & v54)) & v58) + v328;
  v343 = ((v324 + ((v324 + ((v66 + v320) & v54)) & v54)) & v54) + v323;
  v344 = ((v67 + v320) & v54) + v323;
  v345 = ((v324 + ((v324 + ((v68 + v320) & v54)) & v54)) & v54) + v323;
  if (v339 <= v329)
    v346 = v329;
  else
    v346 = v339;
  if (v346 <= v330 + 1)
    v346 = v330 + 1;
  if (v346 <= v334)
    v346 = v334;
  if (v346 <= v335)
    v346 = v335;
  if (v346 <= v338)
    v346 = v338;
  if (v346 <= v340)
    v346 = v340;
  if (v346 <= v341)
    v346 = v341;
  if (v346 <= v342)
    v346 = v342;
  if (v346 <= v343)
    v346 = v343;
  if (v346 <= v344 + 1)
    v346 = v344 + 1;
  if (v346 > v345)
    v345 = v346;
  if (v345 <= v337)
    v345 = v337;
  if (v345 <= v332)
    v345 = *(_QWORD *)(v424 + 64);
  v347 = v69[4];
  v348 = *(_QWORD *)(v347 - 8);
  v349 = *(unsigned __int8 *)(v348 + 80);
  v350 = v345 + v349 + 1;
  v351 = (void *)((v350 + v427) & ~v349);
  v352 = (void *)((v350 + v426) & ~v349);
  v353 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v348 + 48);
  v354 = v353(v351, 1, v347);
  v355 = v353(v352, 1, v347);
  if (v354)
  {
    if (!v355)
    {
      (*(void (**)(void *, void *, uint64_t))(v348 + 16))(v351, v352, v347);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v348 + 56))(v351, 0, 1, v347);
      goto LABEL_397;
    }
  }
  else
  {
    if (!v355)
    {
      (*(void (**)(void *, void *, uint64_t))(v348 + 24))(v351, v352, v347);
      goto LABEL_397;
    }
    (*(void (**)(void *, uint64_t))(v348 + 8))(v351, v347);
  }
  if (*(_DWORD *)(v348 + 84))
    v356 = *(_QWORD *)(v348 + 64);
  else
    v356 = *(_QWORD *)(v348 + 64) + 1;
  memcpy(v351, v352, v356);
LABEL_397:
  if (*(_DWORD *)(v348 + 84))
    v357 = *(_QWORD *)(v348 + 64);
  else
    v357 = *(_QWORD *)(v348 + 64) + 1;
  v358 = v69[6];
  v359 = *(_QWORD *)(v358 - 8);
  v360 = *(unsigned __int8 *)(v359 + 80);
  v361 = v357 + v360;
  v362 = (void *)(((unint64_t)v351 + v361) & ~v360);
  v363 = (void *)(((unint64_t)v352 + v361) & ~v360);
  v364 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v359 + 48);
  v365 = v364(v362, 1, v358);
  v366 = v364(v363, 1, v358);
  if (v365)
  {
    if (!v366)
    {
      (*(void (**)(void *, void *, uint64_t))(v359 + 16))(v362, v363, v358);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v359 + 56))(v362, 0, 1, v358);
      goto LABEL_409;
    }
  }
  else
  {
    if (!v366)
    {
      (*(void (**)(void *, void *, uint64_t))(v359 + 24))(v362, v363, v358);
      goto LABEL_409;
    }
    (*(void (**)(void *, uint64_t))(v359 + 8))(v362, v358);
  }
  if (*(_DWORD *)(v359 + 84))
    v367 = *(_QWORD *)(v359 + 64);
  else
    v367 = *(_QWORD *)(v359 + 64) + 1;
  memcpy(v362, v363, v367);
LABEL_409:
  if (*(_DWORD *)(v359 + 84))
    v368 = *(_QWORD *)(v359 + 64);
  else
    v368 = *(_QWORD *)(v359 + 64) + 1;
  *(_QWORD *)(((unint64_t)v362 + v368 + 7) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v363
                                                                                       + v368
                                                                                       + 7) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v421;
}

uint64_t sub_23BF353EC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  size_t v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  unint64_t v31;
  size_t v32;
  size_t v33;
  uint64_t v34;
  unint64_t v35;
  size_t v36;
  unint64_t v37;
  size_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  size_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  const void *v69;
  unsigned int (*v70)(const void *, uint64_t, uint64_t);
  size_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  const void *v89;
  unsigned int (*v90)(const void *, uint64_t, uint64_t);
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  void *v96;
  const void *v97;
  const void *v98;
  unsigned int (*v99)(const void *, uint64_t, uint64_t);
  unint64_t v100;
  unint64_t v101;
  const void *v102;
  void *v103;
  const void *v104;
  unsigned int (*v105)(const void *, uint64_t, uint64_t);
  unint64_t v106;
  const void *v107;
  void *v108;
  const void *v109;
  unsigned int (*v110)(const void *, uint64_t, uint64_t);
  size_t v111;
  uint64_t v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  const void *v124;
  unsigned int (*v125)(const void *, uint64_t, uint64_t);
  __int128 v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  uint64_t v130;
  const void *v131;
  uint64_t v132;
  size_t v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  const void *v143;
  unsigned int (*v144)(const void *, uint64_t, uint64_t);
  const void *v145;
  void *v146;
  const void *v147;
  unsigned int (*v148)(const void *, uint64_t, uint64_t);
  const void *v149;
  void *v150;
  const void *v151;
  unsigned int (*v152)(const void *, uint64_t, uint64_t);
  size_t v153;
  uint64_t v154;
  __int128 v155;
  uint64_t v156;
  uint64_t v157;
  void *v158;
  const void *v159;
  unsigned int (*v160)(const void *, uint64_t, uint64_t);
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  uint64_t v166;
  uint64_t v167;
  void *v168;
  const void *v169;
  unsigned int (*v170)(const void *, uint64_t, uint64_t);
  __int128 v171;
  __int128 v172;
  __int128 v173;
  uint64_t v174;
  uint64_t v175;
  void *v176;
  const void *v177;
  unsigned int (*v178)(const void *, uint64_t, uint64_t);
  unint64_t v179;
  const void *v180;
  char v181;
  _QWORD *v182;
  void *v183;
  const void *v184;
  void *v185;
  const void *v186;
  void *v187;
  const void *v188;
  void *v189;
  const void *v190;
  unint64_t v191;
  unint64_t v192;
  void *v193;
  const void *v194;
  uint64_t v195;
  void *v196;
  const void *v197;
  size_t v198;
  void *v199;
  const void *v200;
  void *v201;
  const void *v202;
  void *v203;
  const void *v204;
  void *v205;
  const void *v206;
  void *v207;
  void *v208;
  const void *v209;
  void *v210;
  const void *v211;
  void *v212;
  const void *v213;
  unint64_t v214;
  unint64_t v215;
  void (*v216)(unint64_t, unint64_t, uint64_t);
  void *v217;
  const void *v218;
  unint64_t v219;
  unsigned int (*v220)(unint64_t, uint64_t, uint64_t);
  void *v221;
  const void *v222;
  void *v223;
  const void *v224;
  void *v225;
  void *v226;
  const void *v227;
  unint64_t v228;
  unint64_t v229;
  void *v230;
  const void *v231;
  void *v232;
  const void *v233;
  void *v234;
  const void *v235;
  void *v236;
  const void *v237;
  void *v238;
  const void *v239;
  void *v240;
  const void *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  void *v246;
  const void *v247;
  int v248;
  size_t v249;
  size_t v250;
  size_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  void *v256;
  const void *v257;
  int v258;
  uint64_t v259;
  size_t v260;
  uint64_t v261;
  uint64_t result;
  const void *v263;
  char v264;
  unint64_t v265;
  unsigned int (*v266)(uint64_t, uint64_t, uint64_t);
  const void *v267;
  void *v268;
  const void *v269;
  size_t v270;
  uint64_t v271;
  uint64_t v272;
  const void *v273;
  const void *v274;
  size_t v275;
  size_t v276;
  size_t v277;
  size_t v278;
  unint64_t v279;
  uint64_t v280;
  unint64_t v281;
  size_t v282;
  size_t v283;
  uint64_t v284;
  unint64_t v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  unint64_t v289;
  size_t v290;
  size_t v291;
  size_t __n;
  size_t __na;
  size_t __nb;
  size_t __nc;
  size_t __nd;
  size_t __ne;
  uint64_t v298;
  unint64_t v299;
  unint64_t v300;
  size_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  _QWORD *__dst;
  void *__dsta;
  uint64_t v310;
  _QWORD *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  size_t v315;
  uint64_t v316;

  v6 = *(_QWORD *)(a3[5] - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(v6 + 64);
  __dst = (_QWORD *)a3[3];
  v8 = *(__dst - 1);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v310 = sub_23BFF82CC();
  v10 = *(_QWORD *)(v310 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v305 = a3[2];
  v12 = *(_QWORD *)(v305 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v272 = sub_23BFF8368();
  v14 = *(_QWORD *)(v272 - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v311 = a3;
  v312 = a1;
  v16 = a3[7];
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  v19 = v9 | v11 | v13 | v15 | v18 | 7;
  v313 = (v19 + v7 + a1) & ~v19;
  v20 = (v19 + v7 + a2) & ~v19;
  v307 = v8;
  v21 = *(_QWORD *)(v8 + 64);
  v22 = v21 + v11;
  v23 = v21 + v11 + 1;
  v287 = v23 + ((v9 + 248) & ~v9);
  v314 = v10;
  v24 = *(_QWORD *)(v10 + 64);
  if (*(_DWORD *)(v10 + 84))
    v25 = *(_QWORD *)(v10 + 64);
  else
    v25 = v24 + 1;
  v26 = v25 + v11;
  v27 = v25 + v13;
  v28 = *(_QWORD *)(v12 + 64);
  v29 = v28 + v13;
  v301 = v21;
  v303 = v12;
  if (*(_DWORD *)(v12 + 84))
    v30 = *(_QWORD *)(v12 + 64);
  else
    v30 = v28 + 1;
  v31 = ((v28 + v13 + ((v25 + v13 + ((v25 + v11 + ((v25 + v11 + (v287 & ~v11)) & ~v11)) & ~v11)) & ~v13)) & ~v13) + v30;
  if (v24 <= v21)
    v32 = v21;
  else
    v32 = *(_QWORD *)(v10 + 64);
  v270 = v25 + v15;
  v271 = *(_QWORD *)(v272 - 8);
  v33 = ((v25 + v15 + (v26 & ~v11)) & ~v15) + *(_QWORD *)(v14 + 64);
  if (v33 <= v32)
    v33 = v32;
  v290 = v30 + v13;
  v34 = (v30
       + v18
       + ((v30 + v13 + ((v27 + ((v26 + ((v26 + ((v23 + ((v9 + 216) & ~v9)) & ~v11)) & ~v11)) & ~v11)) & ~v13)) & ~v13)) & ~v18;
  v35 = *(_QWORD *)(v17 + 64);
  if (*(_DWORD *)(v17 + 84))
    v36 = *(_QWORD *)(v17 + 64);
  else
    v36 = v35 + 1;
  v37 = v34 + v36;
  v38 = v25 + (v22 & ~v11);
  v39 = ((v38 + v11) & ~v11) + v25;
  v298 = v11 + 24;
  v40 = ((v11 + 24 + (v38 & 0xFFFFFFFFFFFFFFF8)) & ~v11) + v25;
  v41 = ((v27 + ((v26 + ((v26 + ((v26 + ((v22 + ((v9 + 160) & ~v9)) & ~v11)) & ~v11)) & ~v11)) & ~v11)) & ~v13) + v30;
  v42 = ((v26 + ((v26 + ((v22 + ((v9 + 56) & ~v9)) & ~v11)) & ~v11)) & ~v11) + v25;
  v43 = ((v22 + ((v9 + 64) & ~v9)) & ~v11) + v25;
  v281 = v40;
  v283 = ((v27 + ((v26 + ((v11 + 64) & ~v11)) & ~v11)) & ~v13) + v30;
  if (v40 > v31)
    v31 = v40;
  v275 = v33 + 1;
  v276 = ((v26 + ((v26 + ((v22 + ((v9 + 104) & ~v9)) & ~v11)) & ~v11)) & ~v11) + v25;
  __n = v33;
  if (v31 <= v33 + 1)
    v31 = v33 + 1;
  v285 = v37;
  if (v31 <= v37)
    v31 = v37;
  if (v31 <= ((v27 + ((v26 + ((v11 + 64) & ~v11)) & ~v11)) & ~v13) + v30)
    v31 = ((v27 + ((v26 + ((v11 + 64) & ~v11)) & ~v11)) & ~v13) + v30;
  v277 = ((v26 + ((v22 + ((v9 + 24) & ~v9)) & ~v11)) & ~v11) + v25;
  v279 = ((v39 + v11) & ~v11) + v25;
  if (v31 <= v279)
    v31 = ((v39 + v11) & ~v11) + v25;
  if (v31 <= ((v26 + ((v22 + ((v9 + 24) & ~v9)) & ~v11)) & ~v11) + v25)
    v31 = ((v26 + ((v22 + ((v9 + 24) & ~v9)) & ~v11)) & ~v11) + v25;
  if (v31 <= ((v26 + ((v26 + ((v22 + ((v9 + 104) & ~v9)) & ~v11)) & ~v11)) & ~v11) + v25)
    v31 = ((v26 + ((v26 + ((v22 + ((v9 + 104) & ~v9)) & ~v11)) & ~v11)) & ~v11) + v25;
  if (v31 <= v41)
    v31 = ((v27 + ((v26 + ((v26 + ((v26 + ((v22 + ((v9 + 160) & ~v9)) & ~v11)) & ~v11)) & ~v11)) & ~v11)) & ~v13) + v30;
  if (v31 <= v42)
    v31 = ((v26 + ((v26 + ((v22 + ((v9 + 56) & ~v9)) & ~v11)) & ~v11)) & ~v11) + v25;
  if (v31 <= v43 + 1)
    v31 = v43 + 1;
  v315 = v25;
  v44 = ((v26 + ((v26 + ((v22 + ((v9 + 128) & ~v9)) & ~v11)) & ~v11)) & ~v11) + v25;
  if (v31 <= v44)
    v31 = ((v26 + ((v26 + ((v22 + ((v9 + 128) & ~v9)) & ~v11)) & ~v11)) & ~v11) + v25;
  if (v31 <= v39)
    v31 = v39;
  if (v31 <= v35)
    v45 = *(_QWORD *)(v17 + 64);
  else
    v45 = v31;
  v47 = ~v9;
  v316 = ~v11;
  v48 = ~v13;
  v49 = ~v15;
  switch(*(_BYTE *)(v20 + v45))
  {
    case 0:
      v50 = v29;
      v51 = v48;
      v52 = v27;
      __na = v30;
      v299 = v45;
      v288 = v45;
      v53 = *(_OWORD *)v20;
      v54 = *(_OWORD *)(v20 + 16);
      v55 = *(_OWORD *)(v20 + 48);
      v56 = v313;
      *(_OWORD *)(v313 + 32) = *(_OWORD *)(v20 + 32);
      *(_OWORD *)(v313 + 48) = v55;
      *(_OWORD *)v313 = v53;
      *(_OWORD *)(v313 + 16) = v54;
      v57 = *(_OWORD *)(v20 + 64);
      v58 = *(_OWORD *)(v20 + 80);
      v59 = *(_OWORD *)(v20 + 112);
      *(_OWORD *)(v313 + 96) = *(_OWORD *)(v20 + 96);
      *(_OWORD *)(v313 + 112) = v59;
      *(_OWORD *)(v313 + 64) = v57;
      *(_OWORD *)(v313 + 80) = v58;
      v60 = *(_OWORD *)(v20 + 128);
      v61 = *(_OWORD *)(v20 + 144);
      v62 = *(_OWORD *)(v20 + 176);
      *(_OWORD *)(v313 + 160) = *(_OWORD *)(v20 + 160);
      *(_OWORD *)(v313 + 176) = v62;
      *(_OWORD *)(v313 + 128) = v60;
      *(_OWORD *)(v313 + 144) = v61;
      v63 = *(_OWORD *)(v20 + 192);
      v64 = *(_OWORD *)(v20 + 208);
      v65 = *(_OWORD *)(v20 + 224);
      *(_QWORD *)(v313 + 240) = *(_QWORD *)(v20 + 240);
      *(_OWORD *)(v313 + 208) = v64;
      *(_OWORD *)(v313 + 224) = v65;
      *(_OWORD *)(v313 + 192) = v63;
      v66 = (v313 + v9 + 248) & v47;
      v273 = (const void *)v20;
      v67 = (v20 + v9 + 248) & v47;
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(v307 + 32))(v66, v67, __dst);
      *(_BYTE *)(v66 + v301) = *(_BYTE *)(v67 + v301);
      v68 = (void *)((v11 + 1 + v66 + v301) & v316);
      v69 = (const void *)((v11 + 1 + v67 + v301) & v316);
      v70 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v314 + 48);
      if (v70(v69, 1, v310))
      {
        memcpy(v68, v69, v315);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 32))(v68, v69, v310);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v68, 0, 1, v310);
      }
      v183 = (void *)(((unint64_t)v68 + v26) & v316);
      v184 = (const void *)(((unint64_t)v69 + v26) & v316);
      if (v70(v184, 1, v310))
      {
        memcpy(v183, v184, v315);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 32))(v183, v184, v310);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v183, 0, 1, v310);
      }
      v154 = v312;
      v203 = (void *)(((unint64_t)v183 + v26) & v316);
      v204 = (const void *)(((unint64_t)v184 + v26) & v316);
      if (v70(v204, 1, v310))
      {
        memcpy(v203, v204, v315);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 32))(v203, v204, v310);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v203, 0, 1, v310);
      }
      v214 = ((unint64_t)v203 + v52) & v51;
      v215 = ((unint64_t)v204 + v52) & v51;
      v216 = *(void (**)(unint64_t, unint64_t, uint64_t))(v303 + 32);
      v216(v214, v215, v305);
      v217 = (void *)((v50 + v214) & v51);
      v218 = (const void *)((v50 + v215) & v51);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v303 + 48))(v218, 1, v305))
      {
        memcpy(v217, v218, __na);
      }
      else
      {
        v216((unint64_t)v217, (unint64_t)v218, v305);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v303 + 56))(v217, 0, 1, v305);
      }
      v181 = 0;
      goto LABEL_186;
    case 1:
      v71 = __n;
      v72 = *(unsigned __int8 *)(v20 + __n);
      if (v72 >= 3)
      {
        if (__n <= 3)
          v73 = __n;
        else
          v73 = 4;
        __asm { BR              X12 }
      }
      v56 = v313;
      if (v72 == 2)
      {
        v289 = v45;
        v265 = v45;
        v266 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v314 + 48);
        v97 = (const void *)v20;
        if (v266(v20, 1, v310))
        {
          memcpy((void *)v313, v97, v315);
        }
        else
        {
          (*(void (**)(uint64_t, const void *, uint64_t))(v314 + 32))(v313, v97, v310);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v314 + 56))(v313, 0, 1, v310);
        }
        v268 = (void *)((v26 + v313) & v316);
        v269 = (const void *)(((unint64_t)v97 + v26) & v316);
        v182 = v311;
        if (v266((uint64_t)v269, 1, v310))
        {
          memcpy(v268, v269, v315);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v314 + 32))(v268, v269, v310);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v268, 0, 1, v310);
        }
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v271 + 32))(((unint64_t)v268 + v270) & v49, ((unint64_t)v269 + v270) & v49, v272);
        v264 = 2;
        v154 = v312;
        v56 = v313;
        v101 = v265;
        v179 = v289;
        v71 = __n;
      }
      else
      {
        v179 = v45;
        if (v72 == 1)
        {
          v263 = (const void *)v20;
          v101 = v45;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v314 + 32))(v313, v20, v310);
          v97 = v263;
          v264 = 1;
        }
        else
        {
          v101 = v45;
          v267 = (const void *)v20;
          (*(void (**)(uint64_t, uint64_t, _QWORD *))(v307 + 32))(v313, v20, __dst);
          v97 = v267;
          v264 = 0;
        }
        v182 = v311;
        v154 = v312;
      }
      *(_BYTE *)(v56 + v71) = v264;
      v181 = 1;
      goto LABEL_220;
    case 2:
      v280 = ~v18;
      v282 = v30 + v18;
      v278 = v36;
      v284 = *(_QWORD *)(v16 - 8);
      v286 = v16;
      v74 = v48;
      v75 = v27;
      __nb = v30;
      v299 = v45;
      v288 = v45;
      v76 = *(_OWORD *)(v20 + 16);
      v56 = v313;
      *(_OWORD *)v313 = *(_OWORD *)v20;
      *(_OWORD *)(v313 + 16) = v76;
      v77 = *(_OWORD *)(v20 + 32);
      v78 = *(_OWORD *)(v20 + 48);
      v79 = *(_OWORD *)(v20 + 80);
      *(_OWORD *)(v313 + 64) = *(_OWORD *)(v20 + 64);
      *(_OWORD *)(v313 + 80) = v79;
      *(_OWORD *)(v313 + 32) = v77;
      *(_OWORD *)(v313 + 48) = v78;
      v80 = *(_OWORD *)(v20 + 96);
      v81 = *(_OWORD *)(v20 + 112);
      v82 = *(_OWORD *)(v20 + 144);
      *(_OWORD *)(v313 + 128) = *(_OWORD *)(v20 + 128);
      *(_OWORD *)(v313 + 144) = v82;
      *(_OWORD *)(v313 + 96) = v80;
      *(_OWORD *)(v313 + 112) = v81;
      v83 = *(_OWORD *)(v20 + 160);
      v84 = *(_OWORD *)(v20 + 176);
      v85 = *(_OWORD *)(v20 + 192);
      *(_QWORD *)(v313 + 208) = *(_QWORD *)(v20 + 208);
      *(_OWORD *)(v313 + 176) = v84;
      *(_OWORD *)(v313 + 192) = v85;
      *(_OWORD *)(v313 + 160) = v83;
      v86 = (v313 + v9 + 216) & v47;
      v273 = (const void *)v20;
      v87 = (v20 + v9 + 216) & v47;
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(v307 + 32))(v86, v87, __dst);
      *(_BYTE *)(v86 + v301) = *(_BYTE *)(v87 + v301);
      v88 = (void *)((v11 + 1 + v86 + v301) & v316);
      v89 = (const void *)((v11 + 1 + v87 + v301) & v316);
      v90 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v314 + 48);
      if (v90(v89, 1, v310))
      {
        memcpy(v88, v89, v315);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 32))(v88, v89, v310);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v88, 0, 1, v310);
      }
      v185 = (void *)(((unint64_t)v88 + v26) & v316);
      v186 = (const void *)(((unint64_t)v89 + v26) & v316);
      if (v90(v186, 1, v310))
      {
        memcpy(v185, v186, v315);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 32))(v185, v186, v310);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v185, 0, 1, v310);
      }
      v205 = (void *)(((unint64_t)v185 + v26) & v316);
      v206 = (const void *)(((unint64_t)v186 + v26) & v316);
      if (v90(v206, 1, v310))
      {
        memcpy(v205, v206, v315);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 32))(v205, v206, v310);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v205, 0, 1, v310);
      }
      v219 = ((unint64_t)v205 + v75) & v74;
      v220 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v303 + 48);
      if (v220(((unint64_t)v206 + v75) & v74, 1, v305))
      {
        memcpy((void *)(((unint64_t)v205 + v75) & v74), (const void *)(((unint64_t)v206 + v75) & v74), __nb);
      }
      else
      {
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v303 + 32))(((unint64_t)v205 + v75) & v74, ((unint64_t)v206 + v75) & v74, v305);
        (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v303 + 56))(((unint64_t)v205 + v75) & v74, 0, 1, v305);
      }
      v182 = v311;
      v223 = (void *)((v290 + v219) & v74);
      v224 = (const void *)((v290 + (((unint64_t)v206 + v75) & v74)) & v74);
      if (v220((unint64_t)v224, 1, v305))
      {
        memcpy(v223, v224, __nb);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v303 + 32))(v223, v224, v305);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v303 + 56))(v223, 0, 1, v305);
      }
      v226 = (void *)(((unint64_t)v223 + v282) & v280);
      v227 = (const void *)(((unint64_t)v224 + v282) & v280);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v284 + 48))(v227, 1, v286))
      {
        memcpy(v226, v227, v278);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v284 + 32))(v226, v227, v286);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v284 + 56))(v226, 0, 1, v286);
      }
      v181 = 2;
      v154 = v312;
      goto LABEL_189;
    case 3:
      v91 = v48;
      v92 = v27;
      __nc = v30;
      v299 = v45;
      v288 = v45;
      v93 = *(_OWORD *)v20;
      v94 = *(_OWORD *)(v20 + 16);
      v95 = *(_OWORD *)(v20 + 48);
      v56 = v313;
      *(_OWORD *)(v313 + 32) = *(_OWORD *)(v20 + 32);
      *(_OWORD *)(v313 + 48) = v95;
      *(_OWORD *)v313 = v93;
      *(_OWORD *)(v313 + 16) = v94;
      v96 = (void *)((v313 + v11 + 64) & v316);
      v97 = (const void *)v20;
      v98 = (const void *)((v20 + v11 + 64) & v316);
      v99 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v314 + 48);
      if (v99(v98, 1, v310))
      {
        memcpy(v96, v98, v315);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 32))(v96, v98, v310);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v96, 0, 1, v310);
      }
      v187 = (void *)(((unint64_t)v96 + v26) & v316);
      v188 = (const void *)(((unint64_t)v98 + v26) & v316);
      if (v99(v188, 1, v310))
      {
        memcpy(v187, v188, v315);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 32))(v187, v188, v310);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v187, 0, 1, v310);
      }
      v154 = v312;
      v207 = (void *)(((unint64_t)v187 + v92) & v91);
      if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v303 + 48))(((unint64_t)v188 + v92) & v91, 1, v305))
      {
        memcpy(v207, (const void *)(((unint64_t)v188 + v92) & v91), __nc);
      }
      else
      {
        (*(void (**)(void *, unint64_t, uint64_t))(v303 + 32))(v207, ((unint64_t)v188 + v92) & v91, v305);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v303 + 56))(v207, 0, 1, v305);
      }
      v181 = 3;
      v182 = v311;
      goto LABEL_190;
    case 4:
      v100 = v45;
      v101 = v45;
      v56 = v313;
      v102 = (const void *)v20;
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(v307 + 32))(v313, v20, __dst);
      v103 = (void *)((v22 + v313) & v316);
      v97 = v102;
      v104 = (const void *)(((unint64_t)v102 + v22) & v316);
      v105 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v314 + 48);
      if (v105(v104, 1, v310))
      {
        memcpy(v103, v104, v315);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 32))(v103, v104, v310);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v103, 0, 1, v310);
      }
      v189 = (void *)(((unint64_t)v103 + v26) & v316);
      v190 = (const void *)(((unint64_t)v104 + v26) & v316);
      if (v105(v190, 1, v310))
      {
        memcpy(v189, v190, v315);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 32))(v189, v190, v310);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v189, 0, 1, v310);
      }
      v154 = v312;
      v208 = (void *)(((unint64_t)v189 + v26) & v316);
      v209 = (const void *)(((unint64_t)v190 + v26) & v316);
      if (v105(v209, 1, v310))
      {
        memcpy(v208, v209, v315);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 32))(v208, v209, v310);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v208, 0, 1, v310);
      }
      v181 = 4;
      goto LABEL_218;
    case 5:
      v100 = v45;
      v106 = v45;
      v56 = v313;
      v149 = (const void *)v20;
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(v307 + 32))(v313, v20, __dst);
      v150 = (void *)((v22 + v313) & v316);
      v97 = v149;
      v151 = (const void *)(((unint64_t)v149 + v22) & v316);
      v152 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v314 + 48);
      if (v152(v151, 1, v310))
      {
        v153 = v315;
        memcpy(v150, v151, v315);
        v154 = v312;
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 32))(v150, v151, v310);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v150, 0, 1, v310);
        v154 = v312;
        v153 = v315;
      }
      *((_BYTE *)v150 + v153) = *((_BYTE *)v151 + v153);
      v228 = ((unint64_t)v150 + v153) & 0xFFFFFFFFFFFFFFF8;
      v229 = ((unint64_t)v151 + v153) & 0xFFFFFFFFFFFFFFF8;
      *(_OWORD *)(v228 + 8) = *(_OWORD *)(v229 + 8);
      v230 = (void *)((v298 + v228) & v316);
      v231 = (const void *)((v298 + v229) & v316);
      if (v152(v231, 1, v310))
      {
        memcpy(v230, v231, v153);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 32))(v230, v231, v310);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v230, 0, 1, v310);
      }
      v181 = 5;
      goto LABEL_206;
    case 6:
      v100 = v45;
      v101 = v45;
      v155 = *(_OWORD *)v20;
      v56 = v313;
      *(_QWORD *)(v313 + 16) = *(_QWORD *)(v20 + 16);
      *(_OWORD *)v313 = v155;
      v156 = (v313 + v9 + 24) & v47;
      v97 = (const void *)v20;
      v157 = (v20 + v9 + 24) & v47;
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(v307 + 32))(v156, v157, __dst);
      v158 = (void *)((v22 + v156) & v316);
      v159 = (const void *)((v22 + v157) & v316);
      v160 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v314 + 48);
      if (v160(v159, 1, v310))
      {
        memcpy(v158, v159, v315);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 32))(v158, v159, v310);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v158, 0, 1, v310);
      }
      v154 = v312;
      v232 = (void *)(((unint64_t)v158 + v26) & v316);
      v233 = (const void *)(((unint64_t)v159 + v26) & v316);
      if (v160(v233, 1, v310))
      {
        memcpy(v232, v233, v315);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 32))(v232, v233, v310);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v232, 0, 1, v310);
      }
      v181 = 6;
      goto LABEL_218;
    case 7:
      v100 = v45;
      v106 = v45;
      v56 = v313;
      v107 = (const void *)v20;
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(v307 + 32))(v313, v20, __dst);
      v108 = (void *)((v22 + v313) & v316);
      v97 = v107;
      v109 = (const void *)(((unint64_t)v107 + v22) & v316);
      v110 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v314 + 48);
      if (v110(v109, 1, v310))
      {
        v111 = v315;
        memcpy(v108, v109, v315);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 32))(v108, v109, v310);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v108, 0, 1, v310);
        v111 = v315;
      }
      *((_BYTE *)v108 + v111) = *((_BYTE *)v109 + v111);
      v191 = ((unint64_t)v108 + v111) & 0xFFFFFFFFFFFFFFF8;
      v192 = ((unint64_t)v109 + v111) & 0xFFFFFFFFFFFFFFF8;
      *(_OWORD *)(v191 + 8) = *(_OWORD *)(v192 + 8);
      v193 = (void *)((v298 + v191) & v316);
      v194 = (const void *)((v298 + v192) & v316);
      v154 = v312;
      if (v110(v194, 1, v310))
      {
        memcpy(v193, v194, v111);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 32))(v193, v194, v310);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v193, 0, 1, v310);
      }
      v181 = 7;
LABEL_206:
      v182 = v311;
      v101 = v106;
      goto LABEL_219;
    case 8:
      v100 = v45;
      v101 = v45;
      v161 = *(_OWORD *)v20;
      v162 = *(_OWORD *)(v20 + 32);
      v56 = v313;
      *(_OWORD *)(v313 + 16) = *(_OWORD *)(v20 + 16);
      *(_OWORD *)(v313 + 32) = v162;
      *(_OWORD *)v313 = v161;
      v163 = *(_OWORD *)(v20 + 48);
      v164 = *(_OWORD *)(v20 + 64);
      v165 = *(_OWORD *)(v20 + 80);
      *(_QWORD *)(v313 + 96) = *(_QWORD *)(v20 + 96);
      *(_OWORD *)(v313 + 64) = v164;
      *(_OWORD *)(v313 + 80) = v165;
      *(_OWORD *)(v313 + 48) = v163;
      v166 = (v313 + v9 + 104) & v47;
      v97 = (const void *)v20;
      v167 = (v20 + v9 + 104) & v47;
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(v307 + 32))(v166, v167, __dst);
      v168 = (void *)((v22 + v166) & v316);
      v169 = (const void *)((v22 + v167) & v316);
      v170 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v314 + 48);
      if (v170(v169, 1, v310))
      {
        memcpy(v168, v169, v315);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 32))(v168, v169, v310);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v168, 0, 1, v310);
      }
      v234 = (void *)(((unint64_t)v168 + v26) & v316);
      v235 = (const void *)(((unint64_t)v169 + v26) & v316);
      if (v170(v235, 1, v310))
      {
        memcpy(v234, v235, v315);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 32))(v234, v235, v310);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v234, 0, 1, v310);
      }
      v154 = v312;
      v238 = (void *)(((unint64_t)v234 + v26) & v316);
      v239 = (const void *)(((unint64_t)v235 + v26) & v316);
      if (v170(v239, 1, v310))
      {
        memcpy(v238, v239, v315);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 32))(v238, v239, v310);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v238, 0, 1, v310);
      }
      v181 = 8;
      goto LABEL_218;
    case 9:
      v112 = v48;
      v113 = v27;
      __nd = v30;
      v299 = v45;
      v288 = v45;
      v114 = *(_OWORD *)(v20 + 16);
      v56 = v313;
      *(_OWORD *)v313 = *(_OWORD *)v20;
      *(_OWORD *)(v313 + 16) = v114;
      v115 = *(_OWORD *)(v20 + 32);
      v116 = *(_OWORD *)(v20 + 48);
      v117 = *(_OWORD *)(v20 + 80);
      *(_OWORD *)(v313 + 64) = *(_OWORD *)(v20 + 64);
      *(_OWORD *)(v313 + 80) = v117;
      *(_OWORD *)(v313 + 32) = v115;
      *(_OWORD *)(v313 + 48) = v116;
      v118 = *(_OWORD *)(v20 + 96);
      v119 = *(_OWORD *)(v20 + 112);
      v120 = *(_OWORD *)(v20 + 144);
      *(_OWORD *)(v313 + 128) = *(_OWORD *)(v20 + 128);
      *(_OWORD *)(v313 + 144) = v120;
      *(_OWORD *)(v313 + 96) = v118;
      *(_OWORD *)(v313 + 112) = v119;
      v121 = (v313 + v9 + 160) & v47;
      v273 = (const void *)v20;
      v122 = (v20 + v9 + 160) & v47;
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(v307 + 32))(v121, v122, __dst);
      v123 = (void *)((v22 + v121) & v316);
      v124 = (const void *)((v22 + v122) & v316);
      v125 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v314 + 48);
      if (v125(v124, 1, v310))
      {
        memcpy(v123, v124, v315);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 32))(v123, v124, v310);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v123, 0, 1, v310);
      }
      v195 = v305;
      v196 = (void *)(((unint64_t)v123 + v26) & v316);
      v197 = (const void *)(((unint64_t)v124 + v26) & v316);
      if (v125(v197, 1, v310))
      {
        memcpy(v196, v197, v315);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 32))(v196, v197, v310);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v196, 0, 1, v310);
      }
      v154 = v312;
      v210 = (void *)(((unint64_t)v196 + v26) & v316);
      v211 = (const void *)(((unint64_t)v197 + v26) & v316);
      if (v125(v211, 1, v310))
      {
        memcpy(v210, v211, v315);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 32))(v210, v211, v310);
        v195 = v305;
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v210, 0, 1, v310);
      }
      v221 = (void *)(((unint64_t)v210 + v26) & v316);
      v222 = (const void *)(((unint64_t)v211 + v26) & v316);
      if (v125(v222, 1, v310))
      {
        memcpy(v221, v222, v315);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 32))(v221, v222, v310);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v221, 0, 1, v310);
      }
      v225 = (void *)(((unint64_t)v221 + v113) & v112);
      if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v303 + 48))(((unint64_t)v222 + v113) & v112, 1, v195))
      {
        memcpy(v225, (const void *)(((unint64_t)v222 + v113) & v112), __nd);
      }
      else
      {
        (*(void (**)(void *, unint64_t, uint64_t))(v303 + 32))(v225, ((unint64_t)v222 + v113) & v112, v195);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v303 + 56))(v225, 0, 1, v195);
      }
      v181 = 9;
LABEL_186:
      v182 = v311;
LABEL_189:
      v97 = v273;
LABEL_190:
      v101 = v299;
      v179 = v288;
      goto LABEL_220;
    case 0xA:
      v100 = v45;
      v101 = v45;
      v171 = *(_OWORD *)v20;
      v172 = *(_OWORD *)(v20 + 16);
      v173 = *(_OWORD *)(v20 + 32);
      v56 = v313;
      *(_QWORD *)(v313 + 48) = *(_QWORD *)(v20 + 48);
      *(_OWORD *)(v313 + 16) = v172;
      *(_OWORD *)(v313 + 32) = v173;
      *(_OWORD *)v313 = v171;
      v174 = (v313 + v9 + 56) & v47;
      v97 = (const void *)v20;
      v175 = (v20 + v9 + 56) & v47;
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(v307 + 32))(v174, v175, __dst);
      v176 = (void *)((v22 + v174) & v316);
      v177 = (const void *)((v22 + v175) & v316);
      v178 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v314 + 48);
      if (v178(v177, 1, v310))
      {
        memcpy(v176, v177, v315);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 32))(v176, v177, v310);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v176, 0, 1, v310);
      }
      v236 = (void *)(((unint64_t)v176 + v26) & v316);
      v237 = (const void *)(((unint64_t)v177 + v26) & v316);
      if (v178(v237, 1, v310))
      {
        memcpy(v236, v237, v315);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 32))(v236, v237, v310);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v236, 0, 1, v310);
      }
      v154 = v312;
      v240 = (void *)(((unint64_t)v236 + v26) & v316);
      v241 = (const void *)(((unint64_t)v237 + v26) & v316);
      if (v178(v241, 1, v310))
      {
        memcpy(v240, v241, v315);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 32))(v240, v241, v310);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v240, 0, 1, v310);
      }
      v181 = 10;
      goto LABEL_218;
    case 0xB:
      v291 = v43 + 1;
      __ne = v30;
      v302 = v29;
      v304 = v48;
      v306 = v27;
      v300 = v45;
      v126 = *(_OWORD *)v20;
      v127 = *(_OWORD *)(v20 + 16);
      v128 = *(_OWORD *)(v20 + 48);
      *(_OWORD *)(v313 + 32) = *(_OWORD *)(v20 + 32);
      *(_OWORD *)(v313 + 48) = v128;
      *(_OWORD *)v313 = v126;
      *(_OWORD *)(v313 + 16) = v127;
      v129 = (v313 + v9 + 64) & v47;
      v274 = (const void *)v20;
      v130 = (v20 + v9 + 64) & v47;
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(v307 + 32))(v129, v130, __dst);
      __dsta = (void *)((v22 + v129) & v316);
      v131 = (const void *)((v22 + v130) & v316);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v314 + 48))(v131, 1, v310))
      {
        v132 = (v22 + v129) & v316;
        v133 = v315;
        memcpy(__dsta, v131, v315);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 32))(__dsta, v131, v310);
        v132 = (v22 + v129) & v316;
        (*(void (**)(void))(v314 + 56))();
        v133 = v315;
      }
      *(_BYTE *)(v132 + v133) = *((_BYTE *)v131 + v133);
      v198 = ((v302 + ((v306 + ((v26 + (((v287 | v11) + v133) & v316)) & v316)) & v304)) & v304) + __ne;
      if (v275 > v198)
        v198 = v275;
      if (v285 > v198)
        v198 = v285;
      if (v283 > v198)
        v198 = v283;
      if (v279 > v198)
        v198 = v279;
      if (v281 > v198)
        v198 = v281;
      if (v277 > v198)
        v198 = v277;
      if (v281 > v198)
        v198 = v281;
      if (v276 > v198)
        v198 = v276;
      if (v41 > v198)
        v198 = v41;
      if (v42 > v198)
        v198 = v42;
      if (v291 > v198)
        v198 = v291;
      if (v44 > v198)
        v198 = v44;
      if (v35 > v198)
        v198 = v35;
      if (v39 <= v198)
        v179 = v198;
      else
        v179 = v39;
      v181 = 11;
      v182 = v311;
      v154 = v312;
      v97 = v274;
      v56 = v313;
      v101 = v300;
      goto LABEL_220;
    case 0xC:
      v100 = v45;
      v101 = v45;
      v134 = *(_OWORD *)v20;
      v135 = *(_OWORD *)(v20 + 16);
      v136 = *(_OWORD *)(v20 + 48);
      v56 = v313;
      *(_OWORD *)(v313 + 32) = *(_OWORD *)(v20 + 32);
      *(_OWORD *)(v313 + 48) = v136;
      *(_OWORD *)v313 = v134;
      *(_OWORD *)(v313 + 16) = v135;
      v137 = *(_OWORD *)(v20 + 64);
      v138 = *(_OWORD *)(v20 + 80);
      v139 = *(_OWORD *)(v20 + 112);
      *(_OWORD *)(v313 + 96) = *(_OWORD *)(v20 + 96);
      *(_OWORD *)(v313 + 112) = v139;
      *(_OWORD *)(v313 + 64) = v137;
      *(_OWORD *)(v313 + 80) = v138;
      v140 = (v313 + v9 + 128) & v47;
      v97 = (const void *)v20;
      v141 = (v20 + v9 + 128) & v47;
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(v307 + 32))(v140, v141, __dst);
      v142 = (void *)((v22 + v140) & v316);
      v143 = (const void *)((v22 + v141) & v316);
      v144 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v314 + 48);
      if (v144(v143, 1, v310))
      {
        memcpy(v142, v143, v315);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 32))(v142, v143, v310);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v142, 0, 1, v310);
      }
      v199 = (void *)(((unint64_t)v142 + v26) & v316);
      v200 = (const void *)(((unint64_t)v143 + v26) & v316);
      if (v144(v200, 1, v310))
      {
        memcpy(v199, v200, v315);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 32))(v199, v200, v310);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v199, 0, 1, v310);
      }
      v154 = v312;
      v212 = (void *)(((unint64_t)v199 + v26) & v316);
      v213 = (const void *)(((unint64_t)v200 + v26) & v316);
      if (v144(v213, 1, v310))
      {
        memcpy(v212, v213, v315);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 32))(v212, v213, v310);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v212, 0, 1, v310);
      }
      v181 = 12;
      goto LABEL_218;
    case 0xD:
      v56 = v313;
      v179 = v45;
      v180 = (const void *)v20;
      v101 = v45;
      (*(void (**)(uint64_t, uint64_t))(v17 + 32))(v313, v20);
      v97 = v180;
      v181 = 13;
      v182 = v311;
      v154 = v312;
      goto LABEL_220;
    case 0xE:
      v100 = v45;
      v101 = v45;
      v56 = v313;
      v145 = (const void *)v20;
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(v307 + 32))(v313, v20, __dst);
      v146 = (void *)((v22 + v313) & v316);
      v97 = v145;
      v147 = (const void *)(((unint64_t)v145 + v22) & v316);
      v148 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v314 + 48);
      if (v148(v147, 1, v310))
      {
        memcpy(v146, v147, v315);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 32))(v146, v147, v310);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v146, 0, 1, v310);
      }
      v201 = (void *)(((unint64_t)v146 + v26) & v316);
      v202 = (const void *)(((unint64_t)v147 + v26) & v316);
      v154 = v312;
      if (v148(v202, 1, v310))
      {
        memcpy(v201, v202, v315);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v314 + 32))(v201, v202, v310);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v314 + 56))(v201, 0, 1, v310);
      }
      v181 = 14;
LABEL_218:
      v182 = v311;
LABEL_219:
      v179 = v100;
LABEL_220:
      *(_BYTE *)(v56 + v179) = v181;
      v242 = v182[4];
      v243 = *(_QWORD *)(v242 - 8);
      v244 = *(unsigned __int8 *)(v243 + 80);
      v245 = v101 + v244 + 1;
      v246 = (void *)((v245 + v56) & ~v244);
      v247 = (const void *)(((unint64_t)v97 + v245) & ~v244);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v243 + 48))(v247, 1, v242))
      {
        v248 = *(_DWORD *)(v243 + 84);
        v249 = *(_QWORD *)(v243 + 64);
        if (v248)
          v250 = v249;
        else
          v250 = v249 + 1;
        memcpy(v246, v247, v250);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v243 + 32))(v246, v247, v242);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v243 + 56))(v246, 0, 1, v242);
        v248 = *(_DWORD *)(v243 + 84);
        v249 = *(_QWORD *)(v243 + 64);
      }
      if (v248)
        v251 = v249;
      else
        v251 = v249 + 1;
      v252 = v182[6];
      v253 = *(_QWORD *)(v252 - 8);
      v254 = *(unsigned __int8 *)(v253 + 80);
      v255 = v251 + v254;
      v256 = (void *)(((unint64_t)v246 + v255) & ~v254);
      v257 = (const void *)(((unint64_t)v247 + v255) & ~v254);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v253 + 48))(v257, 1, v252))
      {
        v258 = *(_DWORD *)(v253 + 84);
        v259 = *(_QWORD *)(v253 + 64);
        if (v258)
          v260 = *(_QWORD *)(v253 + 64);
        else
          v260 = v259 + 1;
        memcpy(v256, v257, v260);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v253 + 32))(v256, v257, v252);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v253 + 56))(v256, 0, 1, v252);
        v258 = *(_DWORD *)(v253 + 84);
        v259 = *(_QWORD *)(v253 + 64);
      }
      if (v258)
        v261 = v259;
      else
        v261 = v259 + 1;
      *(_QWORD *)(((unint64_t)v256 + v261 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v257
                                                                                         + v261
                                                                                         + 7) & 0xFFFFFFFFFFFFF8);
      return v154;
    default:
      if (v45 <= 3)
        v46 = v45;
      else
        v46 = 4;
      __asm { BR              X14 }
      return result;
  }
}

uint64_t sub_23BF37324(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  int v27;
  size_t v28;
  size_t v29;
  size_t v30;
  size_t v31;
  uint64_t v32;
  size_t v33;
  unint64_t v34;
  size_t v35;
  uint64_t v36;
  size_t v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  size_t v41;
  unint64_t v42;
  unint64_t v43;
  size_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  size_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  unsigned int (*v71)(uint64_t, uint64_t, uint64_t);
  size_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int (*v78)(uint64_t, uint64_t, uint64_t);
  uint64_t v79;
  size_t v80;
  uint64_t v81;
  size_t v82;
  void (*v83)(size_t, uint64_t);
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int (*v89)(uint64_t, uint64_t, uint64_t);
  uint64_t v90;
  uint64_t v91;
  size_t v92;
  unsigned int (*v93)(size_t, uint64_t, uint64_t);
  size_t v94;
  size_t v95;
  uint64_t v96;
  unsigned int (*v97)(uint64_t, uint64_t, uint64_t);
  size_t v98;
  size_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int (*v106)(uint64_t, uint64_t, uint64_t);
  size_t v107;
  size_t v108;
  size_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int (*v113)(uint64_t, uint64_t, uint64_t);
  size_t v114;
  unsigned int (*v115)(uint64_t, uint64_t, uint64_t);
  size_t v116;
  size_t v117;
  uint64_t v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  const void *v134;
  unsigned int (*v135)(const void *, uint64_t, uint64_t);
  unsigned int v136;
  uint64_t v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  const void *v151;
  unsigned int (*v152)(const void *, uint64_t, uint64_t);
  __int128 v153;
  __int128 v154;
  __int128 v155;
  uint64_t v156;
  uint64_t v157;
  unsigned int (*v158)(uint64_t, uint64_t, uint64_t);
  uint64_t v159;
  uint64_t v160;
  const void *v161;
  unsigned int (*v162)(uint64_t, uint64_t, uint64_t);
  size_t v163;
  void *v164;
  const void *v165;
  unsigned int (*v166)(const void *, uint64_t, uint64_t);
  uint64_t v167;
  __int128 v168;
  uint64_t v169;
  uint64_t v170;
  void *v171;
  uint64_t v172;
  const void *v173;
  unsigned int (*v174)(uint64_t, uint64_t, uint64_t);
  size_t v175;
  void *v176;
  const void *v177;
  unsigned int (*v178)(const void *, uint64_t, uint64_t);
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  uint64_t v184;
  uint64_t v185;
  void *v186;
  uint64_t v187;
  const void *v188;
  unsigned int (*v189)(uint64_t, uint64_t, uint64_t);
  size_t v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  uint64_t v198;
  uint64_t v199;
  void *v200;
  uint64_t v201;
  const void *v202;
  unsigned int (*v203)(uint64_t, uint64_t, uint64_t);
  size_t v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  uint64_t v208;
  uint64_t v209;
  void *v210;
  uint64_t v211;
  const void *v212;
  unsigned int (*v213)(uint64_t, uint64_t, uint64_t);
  size_t v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  uint64_t v218;
  void *v219;
  const void *v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  uint64_t v227;
  uint64_t v228;
  void *v229;
  uint64_t v230;
  const void *v231;
  unsigned int (*v232)(uint64_t, uint64_t, uint64_t);
  size_t v233;
  uint64_t v234;
  uint64_t v235;
  unsigned int (*v236)(uint64_t, uint64_t, uint64_t);
  size_t v237;
  void *v238;
  const void *v239;
  void *v240;
  const void *v241;
  void *v242;
  const void *v243;
  void *v244;
  const void *v245;
  size_t v246;
  uint64_t v247;
  uint64_t v248;
  unint64_t v249;
  unint64_t v250;
  void *v251;
  const void *v252;
  size_t v253;
  const void *v254;
  unint64_t v255;
  unint64_t v256;
  void *v257;
  const void *v258;
  void *v259;
  const void *v260;
  size_t v261;
  unsigned int (*v262)(const void *, uint64_t, uint64_t);
  uint64_t v263;
  void *v264;
  const void *v265;
  size_t v266;
  uint64_t v267;
  void *v268;
  const void *v269;
  size_t v270;
  unsigned int (*v271)(const void *, uint64_t, uint64_t);
  uint64_t v272;
  size_t v273;
  void *v274;
  const void *v275;
  size_t v276;
  uint64_t v277;
  size_t v278;
  const void *v279;
  void *v280;
  const void *v281;
  void *v282;
  const void *v283;
  void *v284;
  const void *v285;
  void *v286;
  const void *v287;
  void *v288;
  const void *v289;
  void *v290;
  const void *v291;
  void *v292;
  const void *v293;
  void *v294;
  const void *v295;
  unint64_t v296;
  void (*v297)(unint64_t, unint64_t, uint64_t);
  void *v298;
  const void *v299;
  void *v300;
  const void *v301;
  unsigned int (*v302)(const void *, uint64_t, uint64_t);
  char v303;
  uint64_t v304;
  unint64_t v305;
  char v306;
  void *v307;
  const void *v308;
  void *v309;
  const void *v310;
  void *v311;
  const void *v312;
  void *v313;
  const void *v314;
  char v315;
  unsigned int (*v316)(uint64_t, uint64_t, uint64_t);
  uint64_t v317;
  void *v318;
  const void *v319;
  unint64_t v320;
  uint64_t v321;
  unint64_t v322;
  unint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  unint64_t v329;
  unint64_t v330;
  uint64_t v331;
  unint64_t v332;
  unint64_t v333;
  unint64_t v334;
  unint64_t v335;
  unint64_t v336;
  unint64_t v337;
  unint64_t v338;
  unint64_t v339;
  unint64_t v340;
  unint64_t v341;
  unint64_t v342;
  unint64_t v343;
  unint64_t v344;
  unint64_t v345;
  unint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  void *v351;
  void *v352;
  uint64_t (*v353)(void *, uint64_t, uint64_t);
  int v354;
  int v355;
  size_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  void *v362;
  void *v363;
  uint64_t (*v364)(void *, uint64_t, uint64_t);
  int v365;
  int v366;
  size_t v367;
  uint64_t v368;
  uint64_t result;
  uint64_t v370;
  size_t __n;
  size_t v372;
  uint64_t v373;
  int v374;
  size_t v375;
  size_t v376;
  size_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  size_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  unint64_t v395;
  size_t v396;
  size_t v397;
  size_t v398;
  unint64_t v399;
  unint64_t v400;
  size_t v401;
  unint64_t v402;
  unint64_t v403;
  unint64_t v404;
  unint64_t v405;
  unint64_t v406;
  unint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  size_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  size_t v416;
  size_t v417;
  uint64_t v418;
  _QWORD *v419;
  uint64_t v420;
  uint64_t v421;
  unint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;

  v6 = *(_QWORD *)(a3[5] - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(v6 + 64);
  v423 = a3[3];
  v8 = *(_QWORD *)(v423 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v425 = sub_23BFF82CC();
  v10 = *(_QWORD *)(v425 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v411 = a3[2];
  v12 = *(_QWORD *)(v411 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = sub_23BFF8368();
  v15 = v13;
  v16 = *(_QWORD *)(v14 - 8);
  v17 = *(unsigned __int8 *)(v16 + 80);
  v419 = a3;
  v18 = a3[7];
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  v21 = v9 | v11 | v13 | v17 | v20 | 7;
  v22 = (v21 + v7 + a1) & ~v21;
  v23 = (v21 + v7 + a2) & ~v21;
  v24 = ~v9;
  v25 = (v9 + 248) & ~v9;
  v424 = v19;
  v427 = v22;
  v428 = v10;
  v421 = a1;
  v426 = v23;
  if (v22 == v23)
  {
    v54 = ~v11;
    v57 = v25 + v11 + 1;
    v58 = ~v13;
    v59 = ~v17;
    v60 = ((v9 + 216) & v24) + v11 + 1;
    v61 = ~v20;
    v62 = (v11 + 64) & ~v11;
    v63 = v11 + 24;
    v420 = ((v9 + 24) & v24) + v11;
    v64 = ((v9 + 104) & v24) + v11;
    v65 = ((v9 + 160) & v24) + v11;
    v66 = ((v9 + 56) & v24) + v11;
    v67 = ((v9 + 64) & v24) + v11;
    v68 = ((v9 + 128) & v24) + v11;
    v69 = v419;
  }
  else
  {
    v373 = v14;
    v380 = v18;
    v26 = *(_QWORD *)(v8 + 64);
    v386 = v25 + v11 + 1;
    v391 = v386 + v26;
    v27 = *(_DWORD *)(v10 + 84);
    v28 = *(_QWORD *)(v10 + 64);
    v374 = v27;
    if (v27)
      v29 = v28;
    else
      v29 = v28 + 1;
    v30 = v29 + v11;
    v31 = v29 + v15;
    v32 = *(_QWORD *)(v12 + 64);
    v410 = v32 + v15;
    v413 = v12;
    if (*(_DWORD *)(v12 + 84))
      v33 = *(_QWORD *)(v12 + 64);
    else
      v33 = v32 + 1;
    v34 = ((v32 + v15 + ((v29 + v15 + ((v29 + v11 + ((v29 + v11 + ((v386 + v26) & ~v11)) & ~v11)) & ~v11)) & ~v15)) & ~v15)
        + v33;
    if (v28 <= v26)
      v35 = *(_QWORD *)(v8 + 64);
    else
      v35 = v28;
    v372 = v29 + v17;
    v36 = *(_QWORD *)(v16 + 64);
    if (((v29 + v17 + (v30 & ~v11)) & ~v17) + v36 <= v35)
      v37 = v35;
    else
      v37 = ((v29 + v17 + (v30 & ~v11)) & ~v17) + v36;
    v38 = ~v9;
    v385 = ((v9 + 216) & v24) + v11 + 1;
    v375 = v33 + v15;
    v376 = v33 + v20;
    v39 = *(_DWORD *)(v19 + 84);
    v40 = *(_QWORD *)(v19 + 64);
    if (v39)
      v41 = v40;
    else
      v41 = v40 + 1;
    __n = v41;
    v42 = ((v33 + v20 + ((v33 + v15 + ((v31 + ((v30 + ((v30 + ((v385 + v26) & ~v11)) & ~v11)) & ~v11)) & ~v15)) & ~v15)) & ~v20)
        + v41;
    v43 = ((v31 + ((v30 + ((v11 + 64) & ~v11)) & ~v11)) & ~v15) + v33;
    v44 = v29 + ((v26 + v11) & ~v11);
    v45 = ((v44 + v11) & ~v11) + v29;
    v408 = v11 + 24;
    v46 = ((v11 + 24 + (v44 & 0xFFFFFFFFFFFFFFF8)) & ~v11) + v29;
    v420 = ((v9 + 24) & v24) + v11;
    v384 = ((v9 + 104) & v38) + v11;
    v47 = ((v9 + 160) & v38) + v11;
    v416 = v29 + v15;
    v412 = v33;
    v48 = ((v31 + ((v30 + ((v30 + ((v30 + ((v47 + v26) & ~v11)) & ~v11)) & ~v11)) & ~v11)) & ~v15) + v33;
    v49 = ((v9 + 56) & v38) + v11;
    v50 = ((v9 + 64) & v38) + v11;
    v51 = ((v50 + v26) & ~v11) + v29;
    v403 = v46;
    v404 = v43;
    if (v46 > v34)
      v34 = v46;
    v396 = v37 + 1;
    v377 = v37;
    if (v34 <= v37 + 1)
      v34 = v37 + 1;
    v405 = v42;
    if (v34 <= v42)
      v34 = v42;
    if (v34 <= v43)
      v34 = v43;
    v401 = ((v30 + ((v420 + v26) & ~v11)) & ~v11) + v29;
    v402 = ((v45 + v11) & ~v11) + v29;
    if (v34 <= v402)
      v34 = ((v45 + v11) & ~v11) + v29;
    if (v34 <= ((v30 + ((v420 + v26) & ~v11)) & ~v11) + v29)
      v34 = ((v30 + ((v420 + v26) & ~v11)) & ~v11) + v29;
    v399 = v48;
    v400 = ((v30 + ((v30 + ((v384 + v26) & ~v11)) & ~v11)) & ~v11) + v29;
    if (v34 <= v400)
      v34 = ((v30 + ((v30 + ((v384 + v26) & ~v11)) & ~v11)) & ~v11) + v29;
    v52 = v22;
    if (v34 <= v48)
      v34 = v48;
    if (v34 <= ((v30 + ((v30 + ((v49 + v26) & ~v11)) & ~v11)) & ~v11) + v29)
      v34 = ((v30 + ((v30 + ((v49 + v26) & ~v11)) & ~v11)) & ~v11) + v29;
    v397 = v51 + 1;
    v398 = ((v30 + ((v30 + ((v49 + v26) & ~v11)) & ~v11)) & ~v11) + v29;
    if (v34 <= v51 + 1)
      v34 = v51 + 1;
    v394 = ~v9;
    v390 = ((v9 + 128) & v38) + v11;
    v415 = *(_QWORD *)(v8 + 64);
    v417 = v29;
    v395 = ((v30 + ((v30 + ((v390 + v26) & ~v11)) & ~v11)) & ~v11) + v29;
    if (v34 <= v395)
      v34 = ((v30 + ((v30 + ((((v9 + 128) & v38) + v11 + v26) & ~v11)) & ~v11)) & ~v11) + v29;
    v406 = v45;
    v407 = v40;
    if (v34 <= v45)
      v34 = v45;
    if (v34 <= v40)
      v53 = v40;
    else
      v53 = v34;
    v54 = ~v11;
    v55 = ~v15;
    v409 = ~v20;
    v422 = v53;
    v418 = v8;
    v414 = ~v15;
    v388 = v20;
    v389 = v15;
    v392 = v16;
    v393 = ~v17;
    v387 = *(unsigned __int8 *)(v16 + 80);
    v382 = v49;
    v383 = v47;
    v381 = v50;
    switch(*(_BYTE *)(v22 + v53))
    {
      case 0:
        v76 = (v22 + v9 + 248) & v394;
        (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v76, v423);
        v77 = (v11 + v415 + v76 + 1) & v54;
        v78 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v428 + 48);
        if (!v78(v77, 1, v425))
          (*(void (**)(uint64_t, uint64_t))(v428 + 8))(v77, v425);
        v79 = (v30 + v77) & v54;
        v72 = v417;
        v80 = v391;
        if (!v78(v79, 1, v425))
          (*(void (**)(uint64_t, uint64_t))(v428 + 8))(v79, v425);
        v81 = (v30 + v79) & v54;
        if (!v78(v81, 1, v425))
          (*(void (**)(uint64_t, uint64_t))(v428 + 8))(v81, v425);
        v82 = (v416 + v81) & v55;
        v83 = *(void (**)(size_t, uint64_t))(v413 + 8);
        v83(v82, v411);
        v84 = (v410 + v82) & v414;
        v55 = v414;
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v413 + 48))(v84, 1, v411))
          v83(v84, v411);
        break;
      case 1:
        v85 = *(unsigned __int8 *)(v22 + v37);
        if (v85 >= 3)
        {
          if (v37 <= 3)
            v86 = v37;
          else
            v86 = 4;
          __asm { BR              X12 }
        }
        if (v85 == 2)
        {
          v115 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v428 + 48);
          if (!v115(v22, 1, v425))
            (*(void (**)(uint64_t, uint64_t))(v428 + 8))(v52, v425);
          v72 = v417;
          v116 = (v52 + v11 + v417) & v54;
          v80 = v391;
          if (!v115(v116, 1, v425))
            (*(void (**)(size_t, uint64_t))(v428 + 8))(v116, v425);
          (*(void (**)(size_t, uint64_t))(v392 + 8))((v372 + v116) & v393, v373);
        }
        else
        {
          if (v85 == 1)
            (*(void (**)(uint64_t, uint64_t))(v428 + 8))(v22, v425);
          else
            (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v22, v423);
LABEL_127:
          v72 = v417;
          v80 = v391;
        }
        break;
      case 2:
        v87 = (v22 + v9 + 216) & v394;
        (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v87, v423);
        v88 = (v11 + v415 + v87 + 1) & v54;
        v89 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v428 + 48);
        if (!v89(v88, 1, v425))
          (*(void (**)(uint64_t, uint64_t))(v428 + 8))(v88, v425);
        v90 = (v30 + v88) & v54;
        v72 = v417;
        v80 = v391;
        if (!v89(v90, 1, v425))
          (*(void (**)(uint64_t, uint64_t))(v428 + 8))(v90, v425);
        v91 = (v30 + v90) & v54;
        if (!v89(v91, 1, v425))
          (*(void (**)(uint64_t, uint64_t))(v428 + 8))(v91, v425);
        v92 = (v416 + v91) & v55;
        v93 = *(unsigned int (**)(size_t, uint64_t, uint64_t))(v413 + 48);
        if (!v93(v92, 1, v411))
          (*(void (**)(size_t, uint64_t))(v413 + 8))(v92, v411);
        v94 = (v375 + v92) & v55;
        if (!v93(v94, 1, v411))
          (*(void (**)(size_t, uint64_t))(v413 + 8))(v94, v411);
        v95 = (v376 + v94) & v409;
        if (!(*(unsigned int (**)(size_t, uint64_t, uint64_t))(v424 + 48))(v95, 1, v380))
          (*(void (**)(size_t, uint64_t))(v424 + 8))(v95, v380);
        break;
      case 3:
        v96 = v22 + v11 + 64;
        v97 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v428 + 48);
        if (!v97(v96 & v54, 1, v425))
          (*(void (**)(uint64_t, uint64_t))(v428 + 8))(v96 & v54, v425);
        v98 = ((v96 | v11) + v417) & v54;
        v80 = v391;
        if (!v97(v98, 1, v425))
          (*(void (**)(size_t, uint64_t))(v428 + 8))(v98, v425);
        v99 = (v416 + v98) & v55;
        v72 = v417;
        if (!(*(unsigned int (**)(size_t, uint64_t, uint64_t))(v413 + 48))(v99, 1, v411))
          goto LABEL_97;
        break;
      case 4:
        (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v22, v423);
        v100 = v52 + v11 + v415;
        goto LABEL_105;
      case 5:
      case 7:
        (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v22, v423);
        v70 = (v52 + v11 + v415) & v54;
        v71 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v428 + 48);
        if (!v71(v70, 1, v425))
          (*(void (**)(uint64_t, uint64_t))(v428 + 8))(v70, v425);
        v72 = v417;
        v73 = (v408 + ((v417 + v70) & 0xFFFFFFFFFFFFFFF8)) & v54;
        v74 = v73;
        v75 = v425;
        goto LABEL_116;
      case 6:
        v101 = (v22 + v9 + 24) & v394;
        (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v101, v423);
        v102 = v101 + v11 + v415;
        goto LABEL_113;
      case 8:
        v103 = v22 + v9 + 104;
        goto LABEL_104;
      case 9:
        v104 = (v22 + v9 + 160) & v394;
        (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v104, v423);
        v105 = v104 + v11 + v415;
        v106 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v428 + 48);
        if (!v106(v105 & v54, 1, v425))
          (*(void (**)(uint64_t, uint64_t))(v428 + 8))(v105 & v54, v425);
        v107 = ((v105 | v11) + v417) & v54;
        v80 = v391;
        if (!v106(v107, 1, v425))
          (*(void (**)(size_t, uint64_t))(v428 + 8))(v107, v425);
        v108 = (v30 + v107) & v54;
        if (!v106(v108, 1, v425))
          (*(void (**)(size_t, uint64_t))(v428 + 8))(v108, v425);
        v109 = (v30 + v108) & v54;
        v72 = v417;
        if (!v106(v109, 1, v425))
          (*(void (**)(size_t, uint64_t))(v428 + 8))(v109, v425);
        v99 = (v416 + v109) & v55;
        if (!(*(unsigned int (**)(size_t, uint64_t, uint64_t))(v413 + 48))(v99, 1, v411))
LABEL_97:
          (*(void (**)(size_t, uint64_t))(v413 + 8))(v99, v411);
        break;
      case 0xA:
        v103 = v22 + v9 + 56;
        goto LABEL_104;
      case 0xB:
        v110 = (v22 + v9 + 64) & v394;
        (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v110, v423);
        v111 = (v110 + v11 + v415) & v54;
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v428 + 48))(v111, 1, v425))
          (*(void (**)(uint64_t, uint64_t))(v428 + 8))(v111, v425);
        v72 = v417;
        v80 = v391;
        if (!v374)
          break;
        goto LABEL_129;
      case 0xC:
        v103 = v22 + v9 + 128;
LABEL_104:
        v112 = v103 & v394;
        (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v103 & v394, v423);
        v100 = v112 + v11 + v415;
LABEL_105:
        v113 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v428 + 48);
        if (!v113(v100 & v54, 1, v425))
          (*(void (**)(uint64_t, uint64_t))(v428 + 8))(v100 & v54, v425);
        v114 = ((v100 | v11) + v417) & v54;
        v80 = v391;
        if (!v113(v114, 1, v425))
          (*(void (**)(size_t, uint64_t))(v428 + 8))(v114, v425);
        v73 = (v30 + v114) & v54;
        v72 = v417;
        if (!v113(v73, 1, v425))
          goto LABEL_117;
        break;
      case 0xD:
        (*(void (**)(uint64_t, uint64_t))(v424 + 8))(v22, v380);
        goto LABEL_127;
      case 0xE:
        (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v22, v423);
        v102 = v52 + v11 + v415;
LABEL_113:
        v71 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v428 + 48);
        if (!v71(v102 & v54, 1, v425))
          (*(void (**)(uint64_t, uint64_t))(v428 + 8))(v102 & v54, v425);
        v73 = ((v102 | v11) + v417) & v54;
        v74 = v73;
        v75 = v425;
        v72 = v417;
LABEL_116:
        v80 = v391;
        if (!v71(v74, 1, v75))
LABEL_117:
          (*(void (**)(unint64_t, uint64_t))(v428 + 8))(v73, v425);
        break;
      default:
        if (v53 <= 3)
          v56 = v53;
        else
          v56 = 4;
        __asm { BR              X12 }
        return result;
    }
    v28 = v72;
LABEL_129:
    v117 = ((v410 + ((v416 + ((v30 + (((v80 | v11) + v28) & v54)) & v54)) & v55)) & v55) + v412;
    if (v396 > v117)
      v117 = v396;
    if (v42 > v117)
      v117 = v42;
    if (v404 > v117)
      v117 = v404;
    if (v402 > v117)
      v117 = v402;
    if (v403 > v117)
      v117 = v403;
    if (v401 > v117)
      v117 = v401;
    if (v403 > v117)
      v117 = v403;
    if (v400 > v117)
      v117 = v400;
    if (v399 > v117)
      v117 = v399;
    if (v398 > v117)
      v117 = v398;
    if (v397 > v117)
      v117 = v397;
    if (v395 > v117)
      v117 = v395;
    if (v407 > v117)
      v117 = v407;
    if (v406 > v117)
      v117 = v406;
    switch(*(_BYTE *)(v426 + v117))
    {
      case 0:
        v119 = *(_OWORD *)v426;
        v120 = *(_OWORD *)(v426 + 16);
        v121 = *(_OWORD *)(v426 + 48);
        *(_OWORD *)(v427 + 32) = *(_OWORD *)(v426 + 32);
        *(_OWORD *)(v427 + 48) = v121;
        *(_OWORD *)v427 = v119;
        *(_OWORD *)(v427 + 16) = v120;
        v122 = *(_OWORD *)(v426 + 64);
        v123 = *(_OWORD *)(v426 + 80);
        v124 = *(_OWORD *)(v426 + 112);
        *(_OWORD *)(v427 + 96) = *(_OWORD *)(v426 + 96);
        *(_OWORD *)(v427 + 112) = v124;
        *(_OWORD *)(v427 + 64) = v122;
        *(_OWORD *)(v427 + 80) = v123;
        v125 = *(_OWORD *)(v426 + 128);
        v126 = *(_OWORD *)(v426 + 144);
        v127 = *(_OWORD *)(v426 + 176);
        *(_OWORD *)(v427 + 160) = *(_OWORD *)(v426 + 160);
        *(_OWORD *)(v427 + 176) = v127;
        *(_OWORD *)(v427 + 128) = v125;
        *(_OWORD *)(v427 + 144) = v126;
        v128 = *(_OWORD *)(v426 + 192);
        v129 = *(_OWORD *)(v426 + 208);
        v130 = *(_OWORD *)(v426 + 224);
        *(_QWORD *)(v427 + 240) = *(_QWORD *)(v426 + 240);
        *(_OWORD *)(v427 + 208) = v129;
        *(_OWORD *)(v427 + 224) = v130;
        *(_OWORD *)(v427 + 192) = v128;
        v131 = (v427 + v9 + 248) & v394;
        v132 = (v426 + v9 + 248) & v394;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v418 + 32))(v131, v132, v423);
        *(_BYTE *)(v415 + v131) = *(_BYTE *)(v415 + v132);
        v133 = (void *)((v11 + 1 + v415 + v131) & v54);
        v134 = (const void *)((v11 + 1 + v415 + v132) & v54);
        v135 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v428 + 48);
        if (v135(v134, 1, v425))
        {
          memcpy(v133, v134, v72);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v428 + 32))(v133, v134, v425);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v133, 0, 1, v425);
        }
        v238 = (void *)(((unint64_t)v133 + v30) & v54);
        v239 = (const void *)(((unint64_t)v134 + v30) & v54);
        if (v135(v239, 1, v425))
        {
          memcpy(v238, v239, v72);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v428 + 32))(v238, v239, v425);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v238, 0, 1, v425);
        }
        v280 = (void *)(((unint64_t)v238 + v30) & v54);
        v281 = (const void *)(((unint64_t)v239 + v30) & v54);
        if (v135(v281, 1, v425))
        {
          memcpy(v280, v281, v72);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v428 + 32))(v280, v281, v425);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v280, 0, 1, v425);
        }
        v12 = v413;
        v296 = ((unint64_t)v280 + v416) & v414;
        v297 = *(void (**)(unint64_t, unint64_t, uint64_t))(v413 + 32);
        v297(v296, ((unint64_t)v281 + v416) & v414, v411);
        v298 = (void *)((v410 + v296) & v414);
        v299 = (const void *)((v410 + (((unint64_t)v281 + v416) & v414)) & v414);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v413 + 48))(v299, 1, v411))
        {
          memcpy(v298, v299, v412);
        }
        else
        {
          v297((unint64_t)v298, (unint64_t)v299, v411);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v413 + 56))(v298, 0, 1, v411);
        }
        v68 = v390;
        v61 = v409;
        *(_BYTE *)(v427 + v422) = 0;
        goto LABEL_329;
      case 1:
        v136 = *(unsigned __int8 *)(v426 + v377);
        if (v136 >= 3)
        {
          if (v377 <= 3)
            v137 = v377;
          else
            v137 = 4;
          __asm { BR              X12 }
        }
        v379 = ~v11;
        v370 = v11;
        if (v136 == 2)
        {
          v316 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v428 + 48);
          if (v316(v426, 1, v425))
          {
            memcpy((void *)v427, (const void *)v426, v72);
          }
          else
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v428 + 32))(v427, v426, v425);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v428 + 56))(v427, 0, 1, v425);
          }
          v318 = (void *)((v427 + v11 + v72) & v54);
          v319 = (const void *)((v426 + v11 + v72) & v54);
          v69 = v419;
          v12 = v413;
          v248 = v11 + 24;
          v68 = v390;
          if (v316((uint64_t)v319, 1, v425))
          {
            memcpy(v318, v319, v72);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v428 + 32))(v318, v319, v425);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v318, 0, 1, v425);
          }
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v392 + 32))(((unint64_t)v318 + v372) & v393, ((unint64_t)v319 + v372) & v393, v373);
          v16 = v392;
          v315 = 2;
          v317 = v427;
          v20 = v388;
          v15 = v389;
          v8 = v418;
          v57 = v386;
          v17 = v387;
          v62 = (v11 + 64) & ~v11;
          v60 = v385;
          v65 = v383;
          v64 = v384;
          v67 = v381;
          v66 = v382;
        }
        else
        {
          if (v136 == 1)
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v428 + 32))(v427, v426, v425);
            v8 = v418;
            v315 = 1;
          }
          else
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v418 + 32))(v427, v426, v423);
            v8 = v418;
            v315 = 0;
          }
          v69 = v419;
          v20 = v388;
          v15 = v389;
          v16 = v392;
          v12 = v413;
          v57 = v386;
          v17 = v387;
          v62 = (v11 + 64) & ~v11;
          v60 = v385;
          v248 = v11 + 24;
          v65 = v383;
          v64 = v384;
          v67 = v381;
          v66 = v382;
          v317 = v427;
          v68 = v390;
        }
        v61 = v409;
        *(_BYTE *)(v317 + v377) = v315;
        *(_BYTE *)(v317 + v422) = 1;
        v58 = v414;
        v59 = v393;
        goto LABEL_346;
      case 2:
        v138 = *(_OWORD *)(v426 + 16);
        *(_OWORD *)v427 = *(_OWORD *)v426;
        *(_OWORD *)(v427 + 16) = v138;
        v139 = *(_OWORD *)(v426 + 32);
        v140 = *(_OWORD *)(v426 + 48);
        v141 = *(_OWORD *)(v426 + 80);
        *(_OWORD *)(v427 + 64) = *(_OWORD *)(v426 + 64);
        *(_OWORD *)(v427 + 80) = v141;
        *(_OWORD *)(v427 + 32) = v139;
        *(_OWORD *)(v427 + 48) = v140;
        v142 = *(_OWORD *)(v426 + 96);
        v143 = *(_OWORD *)(v426 + 112);
        v144 = *(_OWORD *)(v426 + 144);
        *(_OWORD *)(v427 + 128) = *(_OWORD *)(v426 + 128);
        *(_OWORD *)(v427 + 144) = v144;
        *(_OWORD *)(v427 + 96) = v142;
        *(_OWORD *)(v427 + 112) = v143;
        v145 = *(_OWORD *)(v426 + 160);
        v146 = *(_OWORD *)(v426 + 176);
        v147 = *(_OWORD *)(v426 + 192);
        *(_QWORD *)(v427 + 208) = *(_QWORD *)(v426 + 208);
        *(_OWORD *)(v427 + 176) = v146;
        *(_OWORD *)(v427 + 192) = v147;
        *(_OWORD *)(v427 + 160) = v145;
        v148 = (v427 + v9 + 216) & v394;
        v149 = (v426 + v9 + 216) & v394;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v418 + 32))(v148, v149, v423);
        *(_BYTE *)(v415 + v148) = *(_BYTE *)(v415 + v149);
        v150 = (void *)((v11 + 1 + v415 + v148) & v54);
        v151 = (const void *)((v11 + 1 + v415 + v149) & v54);
        v152 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v428 + 48);
        if (v152(v151, 1, v425))
        {
          memcpy(v150, v151, v72);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v428 + 32))(v150, v151, v425);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v150, 0, 1, v425);
        }
        v240 = (void *)(((unint64_t)v150 + v30) & v54);
        v241 = (const void *)(((unint64_t)v151 + v30) & v54);
        if (v152(v241, 1, v425))
        {
          memcpy(v240, v241, v72);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v428 + 32))(v240, v241, v425);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v240, 0, 1, v425);
        }
        v282 = (void *)(((unint64_t)v240 + v30) & v54);
        v283 = (const void *)(((unint64_t)v241 + v30) & v54);
        if (v152(v283, 1, v425))
        {
          memcpy(v282, v283, v72);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v428 + 32))(v282, v283, v425);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v282, 0, 1, v425);
        }
        v12 = v413;
        v300 = (void *)(((unint64_t)v282 + v416) & v414);
        v301 = (const void *)(((unint64_t)v283 + v416) & v414);
        v302 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v413 + 48);
        if (v302(v301, 1, v411))
        {
          memcpy(v300, v301, v412);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v413 + 32))(v300, v301, v411);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v413 + 56))(v300, 0, 1, v411);
        }
        v309 = (void *)(((unint64_t)v300 + v375) & v414);
        v310 = (const void *)(((unint64_t)v301 + v375) & v414);
        if (v302(v310, 1, v411))
        {
          memcpy(v309, v310, v412);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v413 + 32))(v309, v310, v411);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v413 + 56))(v309, 0, 1, v411);
        }
        v313 = (void *)(((unint64_t)v309 + v376) & v409);
        v314 = (const void *)(((unint64_t)v310 + v376) & v409);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v424 + 48))(v314, 1, v380))
        {
          memcpy(v313, v314, __n);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v424 + 32))(v313, v314, v380);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v424 + 56))(v313, 0, 1, v380);
        }
        v15 = v389;
        v68 = v390;
        *(_BYTE *)(v427 + v422) = 2;
        v17 = v387;
        v20 = v388;
        v16 = v392;
        v59 = v393;
        v8 = v418;
        v69 = v419;
        v60 = v385;
        v57 = v386;
        v64 = v384;
        v62 = (v11 + 64) & ~v11;
        v63 = v11 + 24;
        v61 = v409;
        v66 = v382;
        v65 = v383;
        v67 = v381;
        v58 = v414;
        break;
      case 3:
        v153 = *(_OWORD *)v426;
        v154 = *(_OWORD *)(v426 + 16);
        v155 = *(_OWORD *)(v426 + 48);
        *(_OWORD *)(v427 + 32) = *(_OWORD *)(v426 + 32);
        *(_OWORD *)(v427 + 48) = v155;
        *(_OWORD *)v427 = v153;
        *(_OWORD *)(v427 + 16) = v154;
        v156 = v427 + v11 + 64;
        v157 = v426 + v11 + 64;
        v158 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v428 + 48);
        if (v158(v157 & v54, 1, v425))
        {
          memcpy((void *)(v156 & v54), (const void *)(v157 & v54), v72);
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v428 + 32))(v156 & v54, v157 & v54, v425);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v428 + 56))(v156 & v54, 0, 1, v425);
        }
        v242 = (void *)(((v156 | v11) + v72) & v54);
        v243 = (const void *)(((v157 | v11) + v72) & v54);
        if (v158((uint64_t)v243, 1, v425))
        {
          memcpy(v242, v243, v72);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v428 + 32))(v242, v243, v425);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v242, 0, 1, v425);
        }
        v69 = v419;
        v12 = v413;
        v68 = v390;
        v284 = (void *)(((unint64_t)v242 + v416) & v414);
        v285 = (const void *)(((unint64_t)v243 + v416) & v414);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v413 + 48))(v285, 1, v411))
        {
          memcpy(v284, v285, v412);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v413 + 32))(v284, v285, v411);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v413 + 56))(v284, 0, 1, v411);
        }
        v63 = v11 + 24;
        v61 = v409;
        *(_BYTE *)(v427 + v422) = 3;
        v20 = v388;
        v15 = v389;
        v16 = v392;
        v59 = v393;
        v8 = v418;
        v57 = v386;
        v17 = v387;
        v62 = (v11 + 64) & ~v11;
        v60 = v385;
        goto LABEL_330;
      case 4:
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v418 + 32))(v427, v426, v423);
        v159 = v427 + v11 + v415;
        v160 = v426 + v11 + v415;
        v161 = (const void *)(v160 & v54);
        v162 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v428 + 48);
        if (v162(v160 & v54, 1, v425))
        {
          v163 = v417;
          memcpy((void *)(v159 & v54), v161, v417);
        }
        else
        {
          (*(void (**)(uint64_t, const void *, uint64_t))(v428 + 32))(v159 & v54, v161, v425);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v428 + 56))(v159 & v54, 0, 1, v425);
          v163 = v417;
        }
        v244 = (void *)(((v159 | v11) + v163) & v54);
        v245 = (const void *)(((v160 | v11) + v163) & v54);
        v246 = v163;
        if (v162((uint64_t)v245, 1, v425))
        {
          memcpy(v244, v245, v163);
          v69 = v419;
          v247 = v428;
        }
        else
        {
          v247 = v428;
          (*(void (**)(void *, const void *, uint64_t))(v428 + 32))(v244, v245, v425);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v244, 0, 1, v425);
          v69 = v419;
        }
        v286 = (void *)(((unint64_t)v244 + v30) & v54);
        v378 = ~v11;
        v287 = (const void *)(((unint64_t)v245 + v30) & v54);
        if (v162((uint64_t)v287, 1, v425))
        {
          memcpy(v286, v287, v246);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v247 + 32))(v286, v287, v425);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v247 + 56))(v286, 0, 1, v425);
        }
        v12 = v413;
        v63 = v11 + 24;
        v68 = v390;
        v303 = 4;
        goto LABEL_314;
      case 5:
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v418 + 32))(v427, v426, v423);
        v164 = (void *)((v427 + v11 + v415) & v54);
        v165 = (const void *)((v426 + v11 + v415) & v54);
        v166 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v428 + 48);
        v167 = ~v11;
        if (v166(v165, 1, v425))
        {
          memcpy(v164, v165, v72);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v428 + 32))(v164, v165, v425);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v164, 0, 1, v425);
        }
        v248 = v11 + 24;
        *((_BYTE *)v164 + v72) = *((_BYTE *)v165 + v72);
        v249 = ((unint64_t)v164 + v72) & 0xFFFFFFFFFFFFFFF8;
        v250 = ((unint64_t)v165 + v72) & 0xFFFFFFFFFFFFFFF8;
        *(_OWORD *)(v249 + 8) = *(_OWORD *)(v250 + 8);
        v251 = (void *)((v408 + v249) & v167);
        v379 = ~v11;
        v252 = (const void *)((v408 + v250) & v167);
        v370 = v11;
        if (v166(v252, 1, v425))
        {
          memcpy(v251, v252, v72);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v428 + 32))(v251, v252, v425);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v251, 0, 1, v425);
        }
        v20 = v388;
        v15 = v389;
        v16 = v392;
        v59 = v393;
        v12 = v413;
        v58 = v414;
        v57 = v386;
        v17 = v387;
        v62 = (v11 + 64) & ~v11;
        v60 = v385;
        v65 = v383;
        v64 = v384;
        v67 = v381;
        v66 = v382;
        v61 = v409;
        *(_BYTE *)(v427 + v422) = 5;
        v8 = v418;
        v69 = v419;
        v68 = v390;
LABEL_346:
        v63 = v248;
        goto LABEL_347;
      case 6:
        v168 = *(_OWORD *)v426;
        *(_QWORD *)(v427 + 16) = *(_QWORD *)(v426 + 16);
        *(_OWORD *)v427 = v168;
        v169 = (v427 + v9 + 24) & v394;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v418 + 32))(v169, (v426 + v9 + 24) & v394, v423);
        v170 = v169 + v11 + v415;
        v171 = (void *)(v170 & v54);
        v172 = ((v426 + v9 + 24) & v394) + v11 + v415;
        v173 = (const void *)(v172 & v54);
        v174 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v428 + 48);
        if (v174(v172 & v54, 1, v425))
        {
          v175 = v417;
          memcpy(v171, v173, v417);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v428 + 32))(v171, v173, v425);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v171, 0, 1, v425);
          v175 = v417;
        }
        v253 = ((v170 | v11) + v175) & v54;
        v254 = (const void *)(((v172 | v11) + v175) & v54);
        v379 = ~v11;
        v370 = v11;
        if (v174((uint64_t)v254, 1, v425))
        {
          memcpy((void *)(((v170 | v11) + v175) & v54), v254, v175);
        }
        else
        {
          (*(void (**)(size_t, const void *, uint64_t))(v428 + 32))(v253, v254, v425);
          (*(void (**)(size_t, _QWORD, uint64_t, uint64_t))(v428 + 56))(v253, 0, 1, v425);
        }
        v20 = v388;
        v15 = v389;
        v16 = v392;
        v59 = v393;
        v12 = v413;
        v58 = v414;
        v8 = v418;
        v69 = v419;
        v57 = v386;
        v17 = v387;
        v62 = (v11 + 64) & ~v11;
        v60 = v385;
        v63 = v11 + 24;
        v61 = v409;
        v65 = v383;
        v64 = v384;
        v67 = v381;
        v66 = v382;
        *(_BYTE *)(v427 + v422) = 6;
        v68 = v390;
        goto LABEL_347;
      case 7:
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v418 + 32))(v427, v426, v423);
        v176 = (void *)((v427 + v11 + v415) & v54);
        v378 = ~v11;
        v177 = (const void *)((v426 + v11 + v415) & v54);
        v178 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v428 + 48);
        if (v178(v177, 1, v425))
        {
          memcpy(v176, v177, v72);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v428 + 32))(v176, v177, v425);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v176, 0, 1, v425);
        }
        *((_BYTE *)v176 + v72) = *((_BYTE *)v177 + v72);
        v255 = ((unint64_t)v176 + v72) & 0xFFFFFFFFFFFFFFF8;
        v256 = ((unint64_t)v177 + v72) & 0xFFFFFFFFFFFFFFF8;
        *(_OWORD *)(v255 + 8) = *(_OWORD *)(v256 + 8);
        v257 = (void *)((v408 + v255) & v378);
        v258 = (const void *)((v408 + v256) & v378);
        v69 = v419;
        if (v178(v258, 1, v425))
        {
          memcpy(v257, v258, v72);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v428 + 32))(v257, v258, v425);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v257, 0, 1, v425);
        }
        v12 = v413;
        v58 = v414;
        *(_BYTE *)(v427 + v422) = 7;
        v20 = v388;
        v15 = v389;
        v16 = v392;
        v59 = v393;
        v8 = v418;
        v57 = v386;
        v17 = v387;
        v62 = (v11 + 64) & ~v11;
        v60 = v385;
        v65 = v383;
        v64 = v384;
        v67 = v381;
        v66 = v382;
        v61 = v409;
        v68 = v390;
        v63 = v11 + 24;
        goto LABEL_315;
      case 8:
        v179 = *(_OWORD *)v426;
        v180 = *(_OWORD *)(v426 + 32);
        *(_OWORD *)(v427 + 16) = *(_OWORD *)(v426 + 16);
        *(_OWORD *)(v427 + 32) = v180;
        *(_OWORD *)v427 = v179;
        v181 = *(_OWORD *)(v426 + 48);
        v182 = *(_OWORD *)(v426 + 64);
        v183 = *(_OWORD *)(v426 + 80);
        *(_QWORD *)(v427 + 96) = *(_QWORD *)(v426 + 96);
        *(_OWORD *)(v427 + 64) = v182;
        *(_OWORD *)(v427 + 80) = v183;
        *(_OWORD *)(v427 + 48) = v181;
        v184 = (v427 + v9 + 104) & v394;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v418 + 32))(v184, (v426 + v9 + 104) & v394, v423);
        v185 = v184 + v11 + v415;
        v186 = (void *)(v185 & v54);
        v187 = ((v426 + v9 + 104) & v394) + v11 + v415;
        v188 = (const void *)(v187 & v54);
        v189 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v428 + 48);
        if (v189(v187 & v54, 1, v425))
        {
          v190 = v417;
          memcpy(v186, v188, v417);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v428 + 32))(v186, v188, v425);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v186, 0, 1, v425);
          v190 = v417;
        }
        v259 = (void *)(((v185 | v11) + v190) & v54);
        v260 = (const void *)(((v187 | v11) + v190) & v54);
        v261 = v190;
        v262 = (unsigned int (*)(const void *, uint64_t, uint64_t))v189;
        if (v189((uint64_t)v260, 1, v425))
        {
          memcpy(v259, v260, v190);
          v69 = v419;
          v263 = v428;
        }
        else
        {
          v263 = v428;
          (*(void (**)(void *, const void *, uint64_t))(v428 + 32))(v259, v260, v425);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v259, 0, 1, v425);
          v69 = v419;
        }
        v288 = (void *)(((unint64_t)v259 + v30) & v54);
        v289 = (const void *)(((unint64_t)v260 + v30) & v54);
        v379 = ~v11;
        v370 = v11;
        if (v262(v289, 1, v425))
        {
          memcpy(v288, v289, v261);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v263 + 32))(v288, v289, v425);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v263 + 56))(v288, 0, 1, v425);
        }
        v304 = v427;
        v20 = v388;
        v15 = v389;
        v16 = v392;
        v12 = v413;
        v8 = v418;
        v57 = v386;
        v17 = v387;
        v62 = (v11 + 64) & ~v11;
        v60 = v385;
        v63 = v11 + 24;
        v61 = v409;
        v65 = v383;
        v64 = v384;
        v67 = v381;
        v66 = v382;
        v68 = v390;
        v305 = v422;
        v306 = 8;
        goto LABEL_311;
      case 9:
        v191 = *(_OWORD *)(v426 + 16);
        *(_OWORD *)v427 = *(_OWORD *)v426;
        *(_OWORD *)(v427 + 16) = v191;
        v192 = *(_OWORD *)(v426 + 32);
        v193 = *(_OWORD *)(v426 + 48);
        v194 = *(_OWORD *)(v426 + 80);
        *(_OWORD *)(v427 + 64) = *(_OWORD *)(v426 + 64);
        *(_OWORD *)(v427 + 80) = v194;
        *(_OWORD *)(v427 + 32) = v192;
        *(_OWORD *)(v427 + 48) = v193;
        v195 = *(_OWORD *)(v426 + 96);
        v196 = *(_OWORD *)(v426 + 112);
        v197 = *(_OWORD *)(v426 + 144);
        *(_OWORD *)(v427 + 128) = *(_OWORD *)(v426 + 128);
        *(_OWORD *)(v427 + 144) = v197;
        *(_OWORD *)(v427 + 96) = v195;
        *(_OWORD *)(v427 + 112) = v196;
        v198 = (v427 + v9 + 160) & v394;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v418 + 32))(v198, (v426 + v9 + 160) & v394, v423);
        v199 = v198 + v11 + v415;
        v200 = (void *)(v199 & v54);
        v201 = ((v426 + v9 + 160) & v394) + v11 + v415;
        v202 = (const void *)(v201 & v54);
        v203 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v428 + 48);
        if (v203(v201 & v54, 1, v425))
        {
          v204 = v417;
          memcpy(v200, v202, v417);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v428 + 32))(v200, v202, v425);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v200, 0, 1, v425);
          v204 = v417;
        }
        v264 = (void *)(((v199 | v11) + v204) & v54);
        v265 = (const void *)(((v201 | v11) + v204) & v54);
        v266 = v204;
        if (v203((uint64_t)v265, 1, v425))
        {
          memcpy(v264, v265, v204);
          v267 = v428;
        }
        else
        {
          v267 = v428;
          (*(void (**)(void *, const void *, uint64_t))(v428 + 32))(v264, v265, v425);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v264, 0, 1, v425);
        }
        v290 = (void *)(((unint64_t)v264 + v30) & v54);
        v291 = (const void *)(((unint64_t)v265 + v30) & v54);
        if (v203((uint64_t)v291, 1, v425))
        {
          memcpy(v290, v291, v266);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v267 + 32))(v290, v291, v425);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v267 + 56))(v290, 0, 1, v425);
        }
        v307 = (void *)(((unint64_t)v290 + v30) & v54);
        v308 = (const void *)(((unint64_t)v291 + v30) & v54);
        if (v203((uint64_t)v308, 1, v425))
        {
          memcpy(v307, v308, v266);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v267 + 32))(v307, v308, v425);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v267 + 56))(v307, 0, 1, v425);
        }
        v12 = v413;
        v68 = v390;
        v311 = (void *)(((unint64_t)v307 + v416) & v414);
        v312 = (const void *)(((unint64_t)v308 + v416) & v414);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v413 + 48))(v312, 1, v411))
        {
          memcpy(v311, v312, v412);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v413 + 32))(v311, v312, v411);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v413 + 56))(v311, 0, 1, v411);
        }
        v61 = v409;
        *(_BYTE *)(v427 + v422) = 9;
LABEL_329:
        v20 = v388;
        v15 = v389;
        v16 = v392;
        v59 = v393;
        v8 = v418;
        v69 = v419;
        v57 = v386;
        v17 = v387;
        v62 = (v11 + 64) & ~v11;
        v60 = v385;
        v63 = v11 + 24;
LABEL_330:
        v65 = v383;
        v64 = v384;
        v67 = v381;
        v66 = v382;
        v58 = v414;
        break;
      case 0xA:
        v205 = *(_OWORD *)v426;
        v206 = *(_OWORD *)(v426 + 16);
        v207 = *(_OWORD *)(v426 + 32);
        *(_QWORD *)(v427 + 48) = *(_QWORD *)(v426 + 48);
        *(_OWORD *)(v427 + 16) = v206;
        *(_OWORD *)(v427 + 32) = v207;
        *(_OWORD *)v427 = v205;
        v208 = (v427 + v9 + 56) & v394;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v418 + 32))(v208, (v426 + v9 + 56) & v394, v423);
        v209 = v208 + v11 + v415;
        v210 = (void *)(v209 & v54);
        v211 = ((v426 + v9 + 56) & v394) + v11 + v415;
        v212 = (const void *)(v211 & v54);
        v213 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v428 + 48);
        if (v213(v211 & v54, 1, v425))
        {
          v214 = v417;
          memcpy(v210, v212, v417);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v428 + 32))(v210, v212, v425);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v210, 0, 1, v425);
          v214 = v417;
        }
        v268 = (void *)(((v209 | v11) + v214) & v54);
        v269 = (const void *)(((v211 | v11) + v214) & v54);
        v270 = v214;
        v271 = (unsigned int (*)(const void *, uint64_t, uint64_t))v213;
        if (v213((uint64_t)v269, 1, v425))
        {
          memcpy(v268, v269, v214);
          v69 = v419;
          v272 = v428;
        }
        else
        {
          v272 = v428;
          (*(void (**)(void *, const void *, uint64_t))(v428 + 32))(v268, v269, v425);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v268, 0, 1, v425);
          v69 = v419;
        }
        v292 = (void *)(((unint64_t)v268 + v30) & v54);
        v293 = (const void *)(((unint64_t)v269 + v30) & v54);
        v379 = ~v11;
        v370 = v11;
        if (v271(v293, 1, v425))
        {
          memcpy(v292, v293, v270);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v272 + 32))(v292, v293, v425);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v292, 0, 1, v425);
        }
        v304 = v427;
        v20 = v388;
        v15 = v389;
        v16 = v392;
        v12 = v413;
        v8 = v418;
        v57 = v386;
        v17 = v387;
        v62 = (v11 + 64) & ~v11;
        v60 = v385;
        v63 = v11 + 24;
        v61 = v409;
        v65 = v383;
        v64 = v384;
        v67 = v381;
        v66 = v382;
        v68 = v390;
        v305 = v422;
        v306 = 10;
LABEL_311:
        *(_BYTE *)(v304 + v305) = v306;
        v58 = v414;
        v59 = v393;
LABEL_347:
        v54 = v379;
        v11 = v370;
        break;
      case 0xB:
        v215 = *(_OWORD *)v426;
        v216 = *(_OWORD *)(v426 + 16);
        v217 = *(_OWORD *)(v426 + 48);
        *(_OWORD *)(v427 + 32) = *(_OWORD *)(v426 + 32);
        *(_OWORD *)(v427 + 48) = v217;
        *(_OWORD *)v427 = v215;
        *(_OWORD *)(v427 + 16) = v216;
        v218 = (v427 + v9 + 64) & v394;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v418 + 32))(v218, (v426 + v9 + 64) & v394, v423);
        v219 = (void *)((v218 + v11 + v415) & v54);
        v220 = (const void *)((((v426 + v9 + 64) & v394) + v11 + v415) & v54);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v428 + 48))(v220, 1, v425))
        {
          memcpy(v219, v220, v72);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v428 + 32))(v219, v220, v425);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v219, 0, 1, v425);
        }
        v69 = v419;
        *((_BYTE *)v219 + v72) = *((_BYTE *)v220 + v72);
        v58 = v414;
        v61 = v409;
        v273 = ((v410 + ((v416 + ((v30 + (((v80 | v11) + v72) & v54)) & v54)) & v58)) & v58) + v412;
        if (v396 > v273)
          v273 = v396;
        if (v405 > v273)
          v273 = v405;
        if (v404 > v273)
          v273 = v404;
        if (v402 > v273)
          v273 = v402;
        if (v403 > v273)
          v273 = v403;
        if (v401 > v273)
          v273 = v401;
        if (v403 > v273)
          v273 = v403;
        if (v400 > v273)
          v273 = v400;
        if (v399 > v273)
          v273 = v399;
        if (v398 > v273)
          v273 = v398;
        if (v397 > v273)
          v273 = v397;
        if (v395 > v273)
          v273 = v395;
        if (v407 > v273)
          v273 = v407;
        if (v406 > v273)
          v273 = v406;
        *(_BYTE *)(v427 + v273) = 11;
        v20 = v388;
        v15 = v389;
        v16 = v392;
        v59 = v393;
        v12 = v413;
        v8 = v418;
        v57 = v386;
        v17 = v387;
        v62 = (v11 + 64) & ~v11;
        v60 = v385;
        v63 = v11 + 24;
        v65 = v383;
        v64 = v384;
        v67 = v381;
        v66 = v382;
        v68 = v390;
        break;
      case 0xC:
        v221 = *(_OWORD *)v426;
        v222 = *(_OWORD *)(v426 + 16);
        v223 = *(_OWORD *)(v426 + 48);
        *(_OWORD *)(v427 + 32) = *(_OWORD *)(v426 + 32);
        *(_OWORD *)(v427 + 48) = v223;
        *(_OWORD *)v427 = v221;
        *(_OWORD *)(v427 + 16) = v222;
        v224 = *(_OWORD *)(v426 + 64);
        v225 = *(_OWORD *)(v426 + 80);
        v226 = *(_OWORD *)(v426 + 112);
        *(_OWORD *)(v427 + 96) = *(_OWORD *)(v426 + 96);
        *(_OWORD *)(v427 + 112) = v226;
        *(_OWORD *)(v427 + 64) = v224;
        *(_OWORD *)(v427 + 80) = v225;
        v227 = (v427 + v9 + 128) & v394;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v418 + 32))(v227, (v426 + v9 + 128) & v394, v423);
        v228 = v227 + v11 + v415;
        v229 = (void *)(v228 & v54);
        v230 = ((v426 + v9 + 128) & v394) + v11 + v415;
        v231 = (const void *)(v230 & v54);
        v232 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v428 + 48);
        if (v232(v230 & v54, 1, v425))
        {
          v233 = v417;
          memcpy(v229, v231, v417);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v428 + 32))(v229, v231, v425);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v229, 0, 1, v425);
          v233 = v417;
        }
        v274 = (void *)(((v228 | v11) + v233) & v54);
        v275 = (const void *)(((v230 | v11) + v233) & v54);
        v276 = v233;
        if (v232((uint64_t)v275, 1, v425))
        {
          memcpy(v274, v275, v233);
          v69 = v419;
          v277 = v428;
        }
        else
        {
          v277 = v428;
          (*(void (**)(void *, const void *, uint64_t))(v428 + 32))(v274, v275, v425);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v274, 0, 1, v425);
          v69 = v419;
        }
        v294 = (void *)(((unint64_t)v274 + v30) & v54);
        v378 = ~v11;
        v295 = (const void *)(((unint64_t)v275 + v30) & v54);
        if (v232((uint64_t)v295, 1, v425))
        {
          memcpy(v294, v295, v276);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v277 + 32))(v294, v295, v425);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v277 + 56))(v294, 0, 1, v425);
        }
        v12 = v413;
        v63 = v11 + 24;
        v68 = v390;
        v303 = 12;
LABEL_314:
        *(_BYTE *)(v427 + v422) = v303;
        v20 = v388;
        v15 = v389;
        v16 = v392;
        v59 = v393;
        v8 = v418;
        v57 = v386;
        v17 = v387;
        v62 = (v11 + 64) & ~v11;
        v60 = v385;
        v65 = v383;
        v64 = v384;
        v67 = v381;
        v66 = v382;
        v58 = v414;
        v61 = v409;
        goto LABEL_315;
      case 0xD:
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v424 + 32))(v427, v426, v380);
        v8 = v418;
        v69 = v419;
        *(_BYTE *)(v427 + v422) = 13;
        v20 = v388;
        v15 = v389;
        v16 = v392;
        v59 = v393;
        v58 = v55;
        v12 = v413;
        v57 = v386;
        v17 = v387;
        v62 = (v11 + 64) & ~v11;
        v60 = v385;
        v63 = v11 + 24;
        v61 = v409;
        v65 = v383;
        v64 = v384;
        v67 = v381;
        v66 = v382;
        v68 = v390;
        break;
      case 0xE:
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v418 + 32))(v427, v426, v423);
        v234 = v427 + v11 + v415;
        v235 = v426 + v11 + v415;
        v236 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v428 + 48);
        if (v236(v235 & v54, 1, v425))
        {
          v237 = v417;
          memcpy((void *)(v234 & v54), (const void *)(v235 & v54), v417);
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v428 + 32))(v234 & v54, v235 & v54, v425);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v428 + 56))(v234 & v54, 0, 1, v425);
          v237 = v417;
        }
        v278 = ((v234 | v11) + v237) & v54;
        v378 = ~v11;
        v279 = (const void *)(((v235 | v11) + v237) & v54);
        v69 = v419;
        if (v236((uint64_t)v279, 1, v425))
        {
          memcpy((void *)(((v234 | v11) + v237) & v54), v279, v237);
        }
        else
        {
          (*(void (**)(size_t, const void *, uint64_t))(v428 + 32))(v278, v279, v425);
          (*(void (**)(size_t, _QWORD, uint64_t, uint64_t))(v428 + 56))(v278, 0, 1, v425);
        }
        v12 = v413;
        v58 = v414;
        v63 = v11 + 24;
        v61 = v409;
        *(_BYTE *)(v427 + v422) = 14;
        v20 = v388;
        v15 = v389;
        v16 = v392;
        v59 = v393;
        v8 = v418;
        v57 = v386;
        v17 = v387;
        v62 = (v11 + 64) & ~v11;
        v60 = v385;
        v65 = v383;
        v64 = v384;
        v67 = v381;
        v66 = v382;
        v68 = v390;
LABEL_315:
        v54 = v378;
        break;
      default:
        if (v422 <= 3)
          v118 = v422;
        else
          v118 = 4;
        __asm { BR              X12 }
        return result;
    }
  }
  v320 = *(_QWORD *)(v8 + 64);
  v321 = (v57 + v320) & v54;
  v322 = *(_QWORD *)(v428 + 64);
  if (*(_DWORD *)(v428 + 84))
    v323 = *(_QWORD *)(v428 + 64);
  else
    v323 = v322 + 1;
  v324 = v323 + v11;
  v325 = v323 + v15;
  v326 = *(_QWORD *)(v12 + 64);
  v327 = (v326 + v15 + ((v323 + v15 + ((v323 + v11 + ((v323 + v11 + v321) & v54)) & v54)) & v58)) & v58;
  if (*(_DWORD *)(v12 + 84))
    v328 = *(_QWORD *)(v12 + 64);
  else
    v328 = v326 + 1;
  v329 = v327 + v328;
  if (v322 <= v320)
    v322 = *(_QWORD *)(v8 + 64);
  v330 = ((v323 + v17 + (v324 & v54)) & v59) + *(_QWORD *)(v16 + 64);
  if (v330 <= v322)
    v330 = v322;
  v331 = (v328 + v20 + ((v328 + v15 + ((v325 + ((v324 + ((v324 + ((v60 + v320) & v54)) & v54)) & v54)) & v58)) & v58)) & v61;
  v332 = *(_QWORD *)(v424 + 64);
  if (*(_DWORD *)(v424 + 84))
    v333 = *(_QWORD *)(v424 + 64);
  else
    v333 = v332 + 1;
  v334 = v333 + v331;
  v335 = ((v325 + ((v324 + v62) & v54)) & v58) + v328;
  v336 = v323 + ((v320 + v11) & v54);
  v337 = ((v336 + v11) & v54) + v323;
  v338 = ((v337 + v11) & v54) + v323;
  v339 = ((v63 + (v336 & 0xFFFFFFFFFFFFFFF8)) & v54) + v323;
  v340 = ((v324 + ((v420 + v320) & v54)) & v54) + v323;
  v341 = ((v324 + ((v324 + ((v64 + v320) & v54)) & v54)) & v54) + v323;
  v342 = ((v325 + ((v324 + ((v324 + ((v324 + ((v65 + v320) & v54)) & v54)) & v54)) & v54)) & v58) + v328;
  v343 = ((v324 + ((v324 + ((v66 + v320) & v54)) & v54)) & v54) + v323;
  v344 = ((v67 + v320) & v54) + v323;
  v345 = ((v324 + ((v324 + ((v68 + v320) & v54)) & v54)) & v54) + v323;
  if (v339 <= v329)
    v346 = v329;
  else
    v346 = v339;
  if (v346 <= v330 + 1)
    v346 = v330 + 1;
  if (v346 <= v334)
    v346 = v334;
  if (v346 <= v335)
    v346 = v335;
  if (v346 <= v338)
    v346 = v338;
  if (v346 <= v340)
    v346 = v340;
  if (v346 <= v341)
    v346 = v341;
  if (v346 <= v342)
    v346 = v342;
  if (v346 <= v343)
    v346 = v343;
  if (v346 <= v344 + 1)
    v346 = v344 + 1;
  if (v346 > v345)
    v345 = v346;
  if (v345 <= v337)
    v345 = v337;
  if (v345 <= v332)
    v345 = *(_QWORD *)(v424 + 64);
  v347 = v69[4];
  v348 = *(_QWORD *)(v347 - 8);
  v349 = *(unsigned __int8 *)(v348 + 80);
  v350 = v345 + v349 + 1;
  v351 = (void *)((v350 + v427) & ~v349);
  v352 = (void *)((v350 + v426) & ~v349);
  v353 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v348 + 48);
  v354 = v353(v351, 1, v347);
  v355 = v353(v352, 1, v347);
  if (v354)
  {
    if (!v355)
    {
      (*(void (**)(void *, void *, uint64_t))(v348 + 32))(v351, v352, v347);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v348 + 56))(v351, 0, 1, v347);
      goto LABEL_397;
    }
  }
  else
  {
    if (!v355)
    {
      (*(void (**)(void *, void *, uint64_t))(v348 + 40))(v351, v352, v347);
      goto LABEL_397;
    }
    (*(void (**)(void *, uint64_t))(v348 + 8))(v351, v347);
  }
  if (*(_DWORD *)(v348 + 84))
    v356 = *(_QWORD *)(v348 + 64);
  else
    v356 = *(_QWORD *)(v348 + 64) + 1;
  memcpy(v351, v352, v356);
LABEL_397:
  if (*(_DWORD *)(v348 + 84))
    v357 = *(_QWORD *)(v348 + 64);
  else
    v357 = *(_QWORD *)(v348 + 64) + 1;
  v358 = v69[6];
  v359 = *(_QWORD *)(v358 - 8);
  v360 = *(unsigned __int8 *)(v359 + 80);
  v361 = v357 + v360;
  v362 = (void *)(((unint64_t)v351 + v361) & ~v360);
  v363 = (void *)(((unint64_t)v352 + v361) & ~v360);
  v364 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v359 + 48);
  v365 = v364(v362, 1, v358);
  v366 = v364(v363, 1, v358);
  if (v365)
  {
    if (!v366)
    {
      (*(void (**)(void *, void *, uint64_t))(v359 + 32))(v362, v363, v358);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v359 + 56))(v362, 0, 1, v358);
      goto LABEL_409;
    }
  }
  else
  {
    if (!v366)
    {
      (*(void (**)(void *, void *, uint64_t))(v359 + 40))(v362, v363, v358);
      goto LABEL_409;
    }
    (*(void (**)(void *, uint64_t))(v359 + 8))(v362, v358);
  }
  if (*(_DWORD *)(v359 + 84))
    v367 = *(_QWORD *)(v359 + 64);
  else
    v367 = *(_QWORD *)(v359 + 64) + 1;
  memcpy(v362, v363, v367);
LABEL_409:
  if (*(_DWORD *)(v359 + 84))
    v368 = *(_QWORD *)(v359 + 64);
  else
    v368 = *(_QWORD *)(v359 + 64) + 1;
  *(_QWORD *)(((unint64_t)v362 + v368 + 7) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v363
                                                                                       + v368
                                                                                       + 7) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease();
  return v421;
}

uint64_t sub_23BF3A2D0(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  int v81;
  int v82;

  v77 = a3[5];
  v79 = *(_QWORD *)(v77 - 8);
  v4 = *(_DWORD *)(v79 + 84);
  v5 = *(_QWORD *)(a3[3] - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(_QWORD *)(sub_23BFF82CC() - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = v7 + v9 + 1;
  v12 = *(_DWORD *)(v8 + 84);
  v13 = *(_QWORD *)(v8 + 64);
  v14 = *(_QWORD *)(a3[2] - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = *(_QWORD *)(v14 + 64);
  v81 = *(_DWORD *)(v14 + 84);
  v82 = v12;
  if (v13 > v7)
    v7 = v13;
  v17 = sub_23BFF8368();
  v18 = *(_QWORD *)(a3[4] - 8);
  v19 = *(_DWORD *)(v18 + 84);
  if (v19)
    v20 = v19 - 1;
  else
    v20 = 0;
  v78 = v4;
  if (v4 <= v20)
    v21 = v20;
  else
    v21 = v4;
  v76 = a3[6];
  v22 = *(_QWORD *)(v76 - 8);
  v23 = *(_DWORD *)(v22 + 84);
  v24 = v23 - 1;
  if (!v23)
    v24 = 0;
  if (v21 <= v24)
    v21 = v24;
  if (v21 <= 0x7FFFFFFF)
    v21 = 0x7FFFFFFF;
  if (v82)
    v25 = v13;
  else
    v25 = v13 + 1;
  v26 = *(_QWORD *)(v17 - 8);
  v27 = *(unsigned __int8 *)(v26 + 80);
  v28 = *(_QWORD *)(v26 + 64);
  v29 = (v11 + ((v6 + 216) & ~v6)) & ~v9;
  v30 = *(_QWORD *)(a3[7] - 8);
  v31 = *(unsigned __int8 *)(v30 + 80);
  v32 = *(_DWORD *)(v30 + 84);
  v33 = *(_QWORD *)(v30 + 64);
  v34 = v25 + v9;
  v35 = v25 + v15;
  if (v81)
    v36 = v16;
  else
    v36 = v16 + 1;
  v37 = ((v16 + v15 + ((v25 + v15 + ((v25 + v9 + ((v25 + v9 + ((v11 + ((v6 + 248) & ~v6)) & ~v9)) & ~v9)) & ~v9)) & ~v15)) & ~v15)
      + v36;
  v38 = (((v34 & ~v9) + v25 + v27) & ~v27) + v28;
  if (v38 <= v7)
    v38 = v7;
  if (v38 + 1 > v37)
    v37 = v38 + 1;
  v39 = v32 == 0;
  v41 = v10 + ((v6 + 24) & ~v6);
  v42 = v10 + ((v6 + 104) & ~v6);
  v43 = v10 + ((v6 + 160) & ~v6);
  v44 = v10 + ((v6 + 56) & ~v6);
  v45 = v10 + ((v6 + 64) & ~v6);
  if (v39)
    v46 = v33 + 1;
  else
    v46 = v33;
  v47 = v46 + ((((v36 + v15 + ((v35 + ((v34 + ((v34 + v29) & ~v9)) & ~v9)) & ~v15)) & ~v15) + v36 + v31) & ~v31);
  v48 = v10 + ((v6 + 128) & ~v6);
  v49 = v10 & ~v9;
  if (v47 <= v37)
    v47 = v37;
  v40 = (v9 + 64) & ~v9;
  if (((v35 + ((v34 + v40) & ~v9)) & (unint64_t)~v15) + v36 > v47)
    v47 = ((v35 + ((v34 + v40) & ~v9)) & ~v15) + v36;
  v50 = v49 + v25;
  v51 = ((v49 + v25 + v9) & ~v9) + v25;
  if (((v51 + v9) & ~v9) + v25 > v47)
    v47 = ((v51 + v9) & ~v9) + v25;
  v52 = ((v9 + (v50 & 0xFFFFFFFFFFFFFFF8) + 24) & ~v9) + v25;
  if (v52 > v47)
    v47 = v52;
  if (((v34 + (v41 & ~v9)) & ~v9) + v25 > v47)
    v47 = ((v34 + (v41 & ~v9)) & ~v9) + v25;
  if (v52 > v47)
    v47 = v52;
  if (((v34 + ((v34 + (v42 & ~v9)) & ~v9)) & ~v9) + v25 > v47)
    v47 = ((v34 + ((v34 + (v42 & ~v9)) & ~v9)) & ~v9) + v25;
  v53 = ((v35 + ((v34 + ((v34 + ((v34 + (v43 & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v15) + v36;
  if (v53 <= v47)
    v53 = v47;
  v54 = v44 & ~v9;
  v55 = v45 & ~v9;
  v56 = ((v34 + ((v34 + v54) & ~v9)) & ~v9) + v25;
  if (v56 > v53)
    v53 = v56;
  if (v55 + v25 + 1 > v53)
    v53 = v55 + v25 + 1;
  v57 = ((v34 + ((v34 + (v48 & ~v9)) & ~v9)) & ~v9) + v25;
  if (v57 <= v53)
    v57 = v53;
  if (v33 > v57)
    v57 = v33;
  if (v51 <= v57)
    v58 = v57;
  else
    v58 = v51;
  v59 = *(_QWORD *)(v18 + 64);
  if (!v19)
    ++v59;
  if (v23)
    v60 = *(_QWORD *)(v22 + 64);
  else
    v60 = *(_QWORD *)(v22 + 64) + 1;
  if (!a2)
    return 0;
  v61 = v6 | v9 | v15 | v27 | v31 | 7;
  v62 = *(_QWORD *)(v79 + 64) + v61;
  v63 = v58 + 1;
  v64 = *(unsigned __int8 *)(v18 + 80);
  v65 = *(unsigned __int8 *)(v22 + 80);
  v66 = v59 + v65;
  v67 = v60 + 7;
  if (v21 < a2)
  {
    if (((((v67 + ((v66 + ((v63 + v64 + (v62 & ~v61)) & ~v64)) & ~v65)) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v68 = 2;
    else
      v68 = a2 - v21 + 1;
    if (v68 >= 0x10000)
      v69 = 4;
    else
      v69 = 2;
    if (v68 < 0x100)
      v69 = 1;
    if (v68 >= 2)
      v70 = v69;
    else
      v70 = 0;
    __asm { BR              X21 }
  }
  if (v78 == v21)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v79 + 48))(a1, v78, v77);
  v72 = (((v62 + a1) & ~v61) + v64 + v63) & ~v64;
  if (v20 == v21)
  {
    if (v19 >= 2)
    {
      v73 = (*(uint64_t (**)(uint64_t))(v18 + 48))(v72);
      goto LABEL_86;
    }
    return 0;
  }
  v74 = (v66 + v72) & ~v65;
  if (v24 == v21)
  {
    if (v23 >= 2)
    {
      v73 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v22 + 48))(v74, *(unsigned int *)(v22 + 84), v76);
LABEL_86:
      if (v73 >= 2)
        return v73 - 1;
      else
        return 0;
    }
    return 0;
  }
  v75 = *(_QWORD *)((v67 + v74) & 0xFFFFFFFFFFFFF8);
  if (v75 >= 0xFFFFFFFF)
    LODWORD(v75) = -1;
  return (v75 + 1);
}

void sub_23BF3A830(unsigned int *a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  size_t v66;
  unsigned int v67;
  int v68;
  int v69;
  unsigned int v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  int v78;

  v74 = *(_QWORD *)(a4[5] - 8);
  v5 = *(_DWORD *)(v74 + 84);
  v6 = *(_QWORD *)(a4[3] - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(_QWORD *)(sub_23BFF82CC() - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = v8 + v10;
  v12 = v8 + v10 + 1;
  v73 = (v12 + ((v7 + 248) & ~v7)) & ~v10;
  v13 = *(_DWORD *)(v9 + 84);
  v14 = *(_QWORD *)(v9 + 64);
  v15 = *(_QWORD *)(a4[2] - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = *(_QWORD *)(v15 + 64);
  v71 = *(_DWORD *)(v15 + 84);
  v72 = v13;
  if (v14 > v8)
    v8 = v14;
  v18 = sub_23BFF8368();
  v78 = 0;
  v19 = *(_QWORD *)(a4[4] - 8);
  v20 = *(_DWORD *)(v19 + 84);
  if (v20)
    v21 = v20 - 1;
  else
    v21 = 0;
  if (v5 <= v21)
    v22 = v21;
  else
    v22 = v5;
  v23 = *(_QWORD *)(a4[6] - 8);
  v24 = *(_DWORD *)(v23 + 84);
  if (v24)
    v25 = v24 - 1;
  else
    v25 = 0;
  if (v22 <= v25)
    v22 = v25;
  if (v22 <= 0x7FFFFFFF)
    v26 = 0x7FFFFFFF;
  else
    v26 = v22;
  if (v72)
    v27 = v14;
  else
    v27 = v14 + 1;
  v28 = *(_QWORD *)(v18 - 8);
  v29 = *(unsigned __int8 *)(v28 + 80);
  v30 = *(_QWORD *)(v28 + 64);
  v31 = (v12 + ((v7 + 216) & ~v7)) & ~v10;
  v32 = *(_QWORD *)(a4[7] - 8);
  v33 = *(unsigned __int8 *)(v32 + 80);
  v34 = *(_DWORD *)(v32 + 84);
  v35 = *(_QWORD *)(v32 + 64);
  v36 = v27 + v10;
  v37 = v27 + v16;
  if (v71)
    v38 = v17;
  else
    v38 = v17 + 1;
  v39 = (((v36 & ~v10) + v27 + v29) & ~v29) + v30;
  if (v39 <= v8)
    v39 = v8;
  if (v39 + 1 > ((v17 + v16 + ((v27 + v16 + ((v27 + v10 + ((v27 + v10 + v73) & ~v10)) & ~v10)) & ~v16)) & ~v16) + v38)
    v40 = v39 + 1;
  else
    v40 = ((v17 + v16 + ((v27 + v16 + ((v27 + v10 + ((v27 + v10 + v73) & ~v10)) & ~v10)) & ~v16)) & ~v16) + v38;
  v41 = v34 == 0;
  v42 = v11 + ((v7 + 24) & ~v7);
  v43 = v11 + ((v7 + 104) & ~v7);
  v44 = v11 + ((v7 + 160) & ~v7);
  v45 = v11 + ((v7 + 56) & ~v7);
  v46 = v11 + ((v7 + 64) & ~v7);
  v47 = (((v38 + v16 + ((v37 + ((v36 + ((v36 + v31) & ~v10)) & ~v10)) & ~v16)) & ~v16) + v38 + v33) & ~v33;
  if (v41)
    v48 = v35 + 1;
  else
    v48 = v35;
  v49 = v48 + v47;
  v50 = v11 + ((v7 + 128) & ~v7);
  v51 = v11 & ~v10;
  if (v49 > v40)
    v40 = v49;
  v52 = ((v37 + ((v36 + ((v10 + 64) & ~v10)) & ~v10)) & ~v16) + v38;
  if (v52 <= v40)
    v52 = v40;
  v53 = v51 + v27;
  v54 = ((v53 + v10) & ~v10) + v27;
  if (((v54 + v10) & ~v10) + v27 > v52)
    v52 = ((v54 + v10) & ~v10) + v27;
  v55 = ((v10 + (v53 & 0xFFFFFFFFFFFFFFF8) + 24) & ~v10) + v27;
  if (v55 > v52)
    v52 = v55;
  if (((v36 + (v42 & ~v10)) & ~v10) + v27 > v52)
    v52 = ((v36 + (v42 & ~v10)) & ~v10) + v27;
  if (v55 <= v52)
    v55 = v52;
  if (((v36 + ((v36 + (v43 & ~v10)) & ~v10)) & ~v10) + v27 > v55)
    v55 = ((v36 + ((v36 + (v43 & ~v10)) & ~v10)) & ~v10) + v27;
  v56 = ((v37 + ((v36 + ((v36 + ((v36 + (v44 & ~v10)) & ~v10)) & ~v10)) & ~v10)) & ~v16) + v38;
  if (v56 <= v55)
    v56 = v55;
  v57 = v45 & ~v10;
  v58 = v46 & ~v10;
  v59 = ((v36 + ((v36 + v57) & ~v10)) & ~v10) + v27;
  if (v59 > v56)
    v56 = v59;
  if (v58 + v27 + 1 > v56)
    v56 = v58 + v27 + 1;
  v60 = ((v36 + ((v36 + (v50 & ~v10)) & ~v10)) & ~v10) + v27;
  if (v60 <= v56)
    v60 = v56;
  if (v35 > v60)
    v60 = v35;
  if (v54 <= v60)
    v61 = v60;
  else
    v61 = v54;
  if (v20)
    v62 = *(_QWORD *)(v19 + 64);
  else
    v62 = *(_QWORD *)(v19 + 64) + 1;
  v63 = v7 | v10 | v16 | v29 | v33 | 7;
  v64 = (v62
       + *(unsigned __int8 *)(v23 + 80)
       + ((v61 + 1 + *(unsigned __int8 *)(v19 + 80) + ((*(_QWORD *)(v74 + 64) + v63) & ~v63)) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
  v65 = *(_QWORD *)(v23 + 64);
  if (!v24)
    ++v65;
  v66 = ((v65 + 7 + v64) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v26 < a3)
  {
    if ((((_DWORD)v65 + 7 + (_DWORD)v64) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v67 = a3 - v26 + 1;
    else
      v67 = 2;
    if (v67 >= 0x10000)
      v68 = 4;
    else
      v68 = 2;
    if (v67 < 0x100)
      v68 = 1;
    if (v67 >= 2)
      v69 = v68;
    else
      v69 = 0;
    v78 = v69;
  }
  if (a2 > v26)
  {
    if ((_DWORD)v66)
    {
      v70 = ~v26 + a2;
      bzero(a1, v66);
      *a1 = v70;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X19 }
}

uint64_t sub_23BF3ACD0@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X5>, uint64_t a4@<X6>, uint64_t a5@<X8>)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void);
  uint64_t v18;
  uint64_t v19;
  int v20;

  *(_BYTE *)(result + v16) = 0;
  if (a2)
  {
    if (v20 == v8)
    {
      v17 = *(uint64_t (**)(void))(v15 + 56);
      return v17();
    }
    v18 = (((v11 + result) & a4) + v14 + v10) & a3;
    if (v6 == v8)
    {
      v17 = *(uint64_t (**)(void))(v5 + 56);
      return v17();
    }
    result = (v13 + v18) & a5;
    if (v9 == v8)
    {
      v17 = *(uint64_t (**)(void))(v7 + 56);
      return v17();
    }
    if (a2 < 0)
      v19 = a2 ^ 0x80000000;
    else
      v19 = (a2 - 1);
    *(_QWORD *)((v12 + result) & 0xFFFFFFFFFFFFFFF8) = v19;
  }
  return result;
}

uint64_t sub_23BF3ADC4()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_23BF3ADCC(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_23BF3AE18 + 4 * byte_23BFFFB28[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_23BF3AE4C + 4 * byte_23BFFFB23[v4]))();
}

uint64_t sub_23BF3AE4C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BF3AE54(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BF3AE5CLL);
  return result;
}

uint64_t sub_23BF3AE68(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BF3AE70);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_23BF3AE74(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BF3AE7C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void sub_23BF3AE88()
{
  JUMPOUT(0x242615198);
}

void sub_23BF3AE98()
{
  JUMPOUT(0x242615198);
}

void sub_23BF3AEA8()
{
  JUMPOUT(0x242615198);
}

__n128 sub_23BF3AEC0@<Q0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>, uint64_t a10, uint64_t a11, __n128 a12, unint64_t a13, unint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  int *v28;
  char *v29;
  char *v30;
  __n128 *v31;
  __n128 result;
  char *v33;

  v24 = a1[5];
  *((_OWORD *)a9 + 4) = a1[4];
  *((_OWORD *)a9 + 5) = v24;
  v25 = a1[7];
  *((_OWORD *)a9 + 6) = a1[6];
  *((_OWORD *)a9 + 7) = v25;
  v26 = a1[1];
  *(_OWORD *)a9 = *a1;
  *((_OWORD *)a9 + 1) = v26;
  v27 = a1[3];
  *((_OWORD *)a9 + 2) = a1[2];
  *((_OWORD *)a9 + 3) = v27;
  v28 = (int *)type metadata accessor for VerticalStackCard(0, a17, a18, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a17 - 8) + 32))(&a9[v28[9]], a2, a17);
  v29 = &a9[v28[10]];
  *(_QWORD *)v29 = a3;
  *((_QWORD *)v29 + 1) = a4;
  *((_QWORD *)v29 + 2) = a5;
  *((_QWORD *)v29 + 3) = a6;
  v30 = &a9[v28[11]];
  *(_QWORD *)v30 = a7;
  *((_QWORD *)v30 + 1) = a8;
  *((_QWORD *)v30 + 2) = a10;
  *((_QWORD *)v30 + 3) = a11;
  v31 = (__n128 *)&a9[v28[12]];
  result = a12;
  *v31 = a12;
  v31[1].n128_u64[0] = a13;
  v31[1].n128_u64[1] = a14;
  v33 = &a9[v28[13]];
  *(_QWORD *)v33 = a15;
  *((_QWORD *)v33 + 1) = a16;
  return result;
}

double VerticalStackCardLayout.artworkAspectRatio.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

uint64_t VerticalStackCardLayout.titleLineLimit.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t VerticalStackCardLayout.subtitleLineLimit.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t VerticalStackCardLayout.captionLineLimit.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

__n128 VerticalStackCardLayout.contentInsets.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 40);
  v3 = *(_OWORD *)(v1 + 56);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 VerticalStackCardLayout.contentBackgroundColor.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 72);
  v3 = *(_OWORD *)(v1 + 88);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

double VerticalStackCardLayout.contentCornerRadius.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 104);
}

double VerticalStackCardLayout.subtitleFromTitle.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 112);
}

double VerticalStackCardLayout.detailFromSubtitle.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 120);
}

__n128 VerticalStackCardLayout.init(artworkAspectRatio:titleLineLimit:subtitleLineLimit:captionLineLimit:subtitleFromTitle:detailFromSubtitle:contentInsets:contentBackgroundColor:contentCornerRadius:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, double a7@<D0>, double a8@<D1>, double a9@<D2>, double a10@<D3>, double a11@<D4>)
{
  __int128 v11;
  __n128 result;
  __int128 v13;

  *(double *)a6 = a7;
  *(double *)(a6 + 8) = a8;
  *(_QWORD *)(a6 + 16) = a1;
  *(_QWORD *)(a6 + 24) = a2;
  *(_QWORD *)(a6 + 32) = a3;
  v11 = a4[1];
  *(_OWORD *)(a6 + 40) = *a4;
  *(_OWORD *)(a6 + 56) = v11;
  result = *(__n128 *)a5;
  v13 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)(a6 + 72) = *(_OWORD *)a5;
  *(_OWORD *)(a6 + 88) = v13;
  *(double *)(a6 + 104) = a11;
  *(double *)(a6 + 112) = a9;
  *(double *)(a6 + 120) = a10;
  return result;
}

uint64_t sub_23BF3B080(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_23BF3B0BC + 4 * byte_23BFFFE40[a1]))(0xD000000000000012, 0x800000023C01E950);
}

uint64_t sub_23BF3B0BC()
{
  return 0x6E694C656C746974;
}

unint64_t sub_23BF3B0E0()
{
  return 0xD000000000000011;
}

void sub_23BF3B15C()
{
  JUMPOUT(0x23BF3B168);
}

uint64_t sub_23BF3B174()
{
  unsigned __int8 *v0;

  return sub_23BF3B080(*v0);
}

uint64_t sub_23BF3B17C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BF3E1F8(a1, a2);
  *a3 = result;
  return result;
}

void sub_23BF3B1A0(_BYTE *a1@<X8>)
{
  *a1 = 9;
}

uint64_t sub_23BF3B1AC()
{
  sub_23BF3CB9C();
  return sub_23BFF9A30();
}

uint64_t sub_23BF3B1D4()
{
  sub_23BF3CB9C();
  return sub_23BFF9A3C();
}

double static VerticalStackCardLayout.standard.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_OWORD *)a1 = xmmword_23C000160;
  *(int64x2_t *)(a1 + 16) = vdupq_n_s64(2uLL);
  *(_QWORD *)(a1 + 32) = 2;
  __asm { FMOV            V0.2D, #24.0 }
  *(_OWORD *)(a1 + 40) = _Q0;
  *(_OWORD *)(a1 + 56) = _Q0;
  *(_OWORD *)(a1 + 72) = xmmword_23C000170;
  *(_OWORD *)(a1 + 88) = xmmword_23C000180;
  result = 12.0;
  *(_OWORD *)(a1 + 104) = xmmword_23C000190;
  *(_QWORD *)(a1 + 120) = 0x4028000000000000;
  return result;
}

double static VerticalStackCardLayout.compact.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_OWORD *)a1 = xmmword_23C000160;
  *(int64x2_t *)(a1 + 16) = vdupq_n_s64(2uLL);
  *(_QWORD *)(a1 + 32) = 2;
  *(_OWORD *)(a1 + 40) = xmmword_23C0001A0;
  *(_OWORD *)(a1 + 56) = xmmword_23C0001B0;
  *(_OWORD *)(a1 + 72) = xmmword_23C000170;
  *(_OWORD *)(a1 + 88) = xmmword_23C000180;
  result = 12.0;
  *(_OWORD *)(a1 + 104) = xmmword_23C0001C0;
  *(_QWORD *)(a1 + 120) = 0x4020000000000000;
  return result;
}

uint64_t VerticalStackCardLayout.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5830);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v9 = v1[1];
  v10 = v1[2];
  v30 = v1[3];
  v31 = v10;
  v11 = v1[5];
  v28 = v1[6];
  v29 = v11;
  v12 = v1[7];
  v25 = v1[8];
  v26 = v12;
  v13 = v1[10];
  v27 = v1[9];
  v15 = v1[11];
  v14 = v1[12];
  v16 = v1[13];
  v17 = v1[14];
  v18 = v1[15];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BF3CB9C();
  sub_23BFF9A18();
  v32 = v8;
  v33 = v9;
  v36 = 0;
  type metadata accessor for CGSize(0);
  sub_23BEA1BB8(&qword_256AE3468, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, MEMORY[0x24BDBD848]);
  sub_23BFF9940();
  if (!v2)
  {
    v20 = v28;
    v19 = v29;
    v23 = v14;
    v24 = v15;
    v21 = v27;
    LOBYTE(v32) = 1;
    sub_23BFF9934();
    LOBYTE(v32) = 2;
    sub_23BFF9934();
    LOBYTE(v32) = 3;
    sub_23BFF9934();
    v32 = v19;
    v33 = v20;
    v34 = v26;
    v35 = v25;
    v36 = 4;
    sub_23BF3CBE0();
    sub_23BFF9940();
    v32 = v21;
    v33 = v13;
    v34 = v24;
    v35 = v23;
    v36 = 5;
    sub_23BF3CC24();
    sub_23BFF9940();
    v32 = v16;
    v36 = 6;
    sub_23BEBFC1C();
    sub_23BFF9940();
    v32 = v17;
    v36 = 7;
    sub_23BFF9940();
    v32 = v18;
    v36 = 8;
    sub_23BFF9940();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t VerticalStackCardLayout.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5850);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BF3CB9C();
  sub_23BFF9A0C();
  if (!v2)
  {
    type metadata accessor for CGSize(0);
    v41 = 0;
    sub_23BEA1BB8(&qword_256AE3478, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, MEMORY[0x24BDBD860]);
    sub_23BFF98C8();
    v9 = v37;
    v10 = v38;
    LOBYTE(v37) = 1;
    v11 = sub_23BFF98BC();
    LOBYTE(v37) = 2;
    v12 = sub_23BFF98BC();
    LOBYTE(v37) = 3;
    v36 = sub_23BFF98BC();
    v41 = 4;
    sub_23BF3CC68();
    sub_23BFF98C8();
    v13 = v37;
    v14 = v38;
    v15 = v39;
    v16 = v40;
    v41 = 5;
    sub_23BF3CCAC();
    sub_23BFF98C8();
    v33 = v14;
    v34 = v13;
    v18 = v37;
    v17 = v38;
    v20 = v39;
    v19 = v40;
    v41 = 6;
    v35 = sub_23BEC0384();
    sub_23BFF98C8();
    v29 = v19;
    v30 = v17;
    v31 = v18;
    v32 = v20;
    v21 = v37;
    v41 = 7;
    sub_23BFF98C8();
    v23 = v37;
    v41 = 8;
    sub_23BFF98C8();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v24 = v37;
    *a2 = v9;
    a2[1] = v10;
    a2[2] = v11;
    a2[3] = v12;
    a2[4] = v36;
    v25 = v33;
    a2[5] = v34;
    a2[6] = v25;
    a2[7] = v15;
    a2[8] = v16;
    v26 = v30;
    a2[9] = v31;
    a2[10] = v26;
    v27 = v29;
    a2[11] = v32;
    a2[12] = v27;
    a2[13] = v21;
    a2[14] = v23;
    a2[15] = v24;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_23BF3B978@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return VerticalStackCardLayout.init(from:)(a1, a2);
}

uint64_t sub_23BF3B98C(_QWORD *a1)
{
  return VerticalStackCardLayout.encode(to:)(a1);
}

uint64_t VerticalStackCardLayout.hash(into:)()
{
  sub_23BEA0B6C();
  sub_23BFF99DC();
  sub_23BFF99DC();
  sub_23BFF99DC();
  sub_23BFF99F4();
  sub_23BFF99F4();
  sub_23BFF99F4();
  sub_23BFF99F4();
  sub_23BFF99F4();
  sub_23BFF99F4();
  sub_23BFF99F4();
  sub_23BFF99F4();
  sub_23BFF99F4();
  sub_23BFF99F4();
  return sub_23BFF99F4();
}

uint64_t VerticalStackCardLayout.hashValue.getter()
{
  sub_23BFF99D0();
  VerticalStackCardLayout.hash(into:)();
  return sub_23BFF9A00();
}

uint64_t sub_23BF3BB08()
{
  sub_23BFF99D0();
  VerticalStackCardLayout.hash(into:)();
  return sub_23BFF9A00();
}

uint64_t sub_23BF3BB48()
{
  sub_23BFF99D0();
  VerticalStackCardLayout.hash(into:)();
  return sub_23BFF9A00();
}

uint64_t sub_23BF3BB84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[3];

  v55 = a2;
  v4 = sub_23BFF8680();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x24BDED868];
  v6 = *(_QWORD *)(v4 - 8);
  v7 = v4;
  v44 = v4;
  v54 = v6;
  MEMORY[0x24BDAC7A8](v4);
  v53 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 - 8);
  v52 = *(_QWORD *)(v9 + 64);
  v10 = v9;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = *(_QWORD *)(a1 + 16);
  sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE5908);
  swift_getTupleTypeMetadata2();
  v14 = sub_23BFF9220();
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v14);
  v15 = sub_23BFF90AC();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3C28);
  v16 = sub_23BFF862C();
  v17 = MEMORY[0x242615198](MEMORY[0x24BDF4700], v15);
  v18 = sub_23BEA1F94(qword_256AE3C30, &qword_256AE3C28, MEMORY[0x24BDEB950]);
  v63[0] = v17;
  v63[1] = v18;
  v47 = v16;
  v48 = MEMORY[0x242615198](MEMORY[0x24BDED308], v16, v63);
  v19 = sub_23BFF9040();
  v50 = *(_QWORD *)(v19 - 8);
  v20 = MEMORY[0x24BDAC7A8](v19);
  v46 = (char *)&v42 - v21;
  v22 = MEMORY[0x242615198](MEMORY[0x24BDF43B0], v19, v20);
  v43 = v22;
  v42 = sub_23BEA1BB8(&qword_256AE3558, v5, MEMORY[0x24BDED858]);
  v59 = v19;
  v60 = v7;
  v61 = v22;
  v62 = v42;
  v23 = MEMORY[0x24261512C](0, &v59, MEMORY[0x24BDF22B8], 0);
  v49 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)&v42 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x24BDAC7A8](v26);
  v45 = (uint64_t)&v42 - v28;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16))(v13, v2, a1, v27);
  v29 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v30 = swift_allocObject();
  v31 = a1;
  v32 = *(_QWORD *)(a1 + 24);
  v33 = v51;
  *(_QWORD *)(v30 + 16) = v51;
  *(_QWORD *)(v30 + 24) = v32;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v30 + v29, v13, v31);
  v56 = v33;
  v57 = v32;
  v58 = v2;
  v34 = v46;
  sub_23BFF9034();
  v35 = v53;
  sub_23BFF8674();
  v36 = v44;
  v37 = v43;
  v38 = v42;
  sub_23BFF8CF8();
  (*(void (**)(char *, uint64_t))(v54 + 8))(v35, v36);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v34, v19);
  v59 = v19;
  v60 = v36;
  v61 = v37;
  v62 = v38;
  swift_getOpaqueTypeConformance2();
  v39 = v45;
  sub_23BEA72EC((uint64_t)v25, v23, v45);
  v40 = *(void (**)(char *, uint64_t))(v49 + 8);
  v40(v25, v23);
  sub_23BEA5C0C(v39, v23, v55);
  return ((uint64_t (*)(uint64_t, uint64_t))v40)(v39, v23);
}

uint64_t sub_23BF3BF98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];

  v23 = a3;
  v24 = a4;
  sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE5908);
  swift_getTupleTypeMetadata2();
  v6 = sub_23BFF9220();
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v6);
  v7 = sub_23BFF90AC();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v21 - v9;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3C28);
  v11 = sub_23BFF862C();
  v22 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v21 - v15;
  v25 = a2;
  v26 = v23;
  v27 = a1;
  sub_23BFF889C();
  sub_23BFF90A0();
  v17 = MEMORY[0x242615198](MEMORY[0x24BDF4700], v7);
  sub_23BFF8D58();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v18 = sub_23BEA1F94(qword_256AE3C30, &qword_256AE3C28, MEMORY[0x24BDEB950]);
  v28[0] = v17;
  v28[1] = v18;
  MEMORY[0x242615198](MEMORY[0x24BDED308], v11, v28);
  sub_23BEA72EC((uint64_t)v13, v11, (uint64_t)v16);
  v19 = *(void (**)(char *, uint64_t))(v22 + 8);
  v19(v13, v11);
  sub_23BEA5C0C((uint64_t)v16, v11, v24);
  return ((uint64_t (*)(char *, uint64_t))v19)(v16, v11);
}

uint64_t sub_23BF3C1E4@<X0>(double *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  double v37;
  double v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t (*v47)(uint64_t, uint64_t);
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _QWORD v66[2];
  uint64_t v67[2];
  _QWORD v68[3];

  v63 = a4;
  v7 = sub_23BFF8F74();
  v61 = *(_QWORD *)(v7 - 8);
  v62 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v60 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5910);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5918);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5920);
  MEMORY[0x24BDAC7A8](v56);
  v54 = (uint64_t)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5908);
  MEMORY[0x24BDAC7A8](v59);
  v57 = (uint64_t)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v58 = (uint64_t)&v49 - v18;
  v19 = sub_23BFF862C();
  v51 = *(_QWORD *)(v19 - 8);
  v20 = v51;
  MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v49 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = v22;
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)&v49 - v24;
  v52 = (char *)&v49 - v24;
  type metadata accessor for VerticalStackCard(0, a2, a3, v26);
  sub_23BFF8CEC();
  v68[0] = a3;
  v68[1] = MEMORY[0x24BDEEC40];
  v53 = MEMORY[0x242615198](MEMORY[0x24BDED308], v19, v68);
  sub_23BEA72EC((uint64_t)v22, v19, (uint64_t)v25);
  v55 = *(void (**)(char *, uint64_t))(v20 + 8);
  v55(v22, v19);
  *(_QWORD *)v11 = sub_23BFF88A8();
  *((_QWORD *)v11 + 1) = 0;
  v11[16] = 0;
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5928);
  sub_23BF3C6C4(a1, a2, a3, (uint64_t)&v11[*(int *)(v27 + 44)]);
  v28 = sub_23BFF91CC();
  sub_23BF94780(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v14, 0.0, 1, 0.0, 1, v28, v29);
  sub_23BE9F3A0((uint64_t)v11, &qword_256AE5910);
  v30 = *((_QWORD *)a1 + 5);
  v31 = *((_QWORD *)a1 + 6);
  v33 = *((_QWORD *)a1 + 7);
  v32 = *((_QWORD *)a1 + 8);
  LOBYTE(a3) = sub_23BFF8B60();
  v34 = v54;
  sub_23BE9F190((uint64_t)v14, v54, &qword_256AE5918);
  v35 = v34 + *(int *)(v56 + 36);
  *(_BYTE *)v35 = a3;
  *(_QWORD *)(v35 + 8) = v33;
  *(_QWORD *)(v35 + 16) = v31;
  *(_QWORD *)(v35 + 24) = v30;
  *(_QWORD *)(v35 + 32) = v32;
  *(_BYTE *)(v35 + 40) = 0;
  sub_23BE9F3A0((uint64_t)v14, &qword_256AE5918);
  v36 = a1[10];
  v37 = a1[11];
  v38 = a1[12];
  v39 = v60;
  (*(void (**)(char *, _QWORD, uint64_t))(v61 + 104))(v60, *MEMORY[0x24BDF3C28], v62);
  v40 = MEMORY[0x242614358](v39, v38, v37, v36, 1.0);
  LOBYTE(v30) = sub_23BFF8B60();
  v41 = v57;
  sub_23BE9F190(v34, v57, &qword_256AE5920);
  v42 = v59;
  v43 = v41 + *(int *)(v59 + 36);
  *(_QWORD *)v43 = v40;
  *(_BYTE *)(v43 + 8) = v30;
  sub_23BE9F3A0(v34, &qword_256AE5920);
  v44 = v58;
  sub_23BEC42E0(v41, v58, &qword_256AE5908);
  v45 = (uint64_t)v50;
  v46 = v52;
  (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v50, v52, v19);
  v67[0] = v45;
  sub_23BE9F190(v44, v41, &qword_256AE5908);
  v67[1] = v41;
  v66[0] = v19;
  v66[1] = v42;
  v64 = v53;
  v65 = sub_23BF3DFF8();
  sub_23BF93EF0(v67, 2uLL, (uint64_t)v66);
  sub_23BE9F3A0(v44, &qword_256AE5908);
  v47 = (uint64_t (*)(uint64_t, uint64_t))v55;
  v55(v46, v19);
  sub_23BE9F3A0(v41, &qword_256AE5908);
  return v47(v45, v19);
}

uint64_t sub_23BF3C6C4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t KeyPath;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE v66[12];
  int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _BYTE *v74;
  _BYTE *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;

  v73 = a4;
  v7 = sub_23BFF8890();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = &v66[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5960);
  MEMORY[0x24BDAC7A8](v11);
  v75 = &v66[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v13);
  v74 = &v66[-v14];
  v16 = (int *)type metadata accessor for VerticalStackCard(0, a2, a3, v15);
  v17 = (_QWORD *)((char *)a1 + v16[10]);
  v18 = *v17;
  v19 = v17[1];
  v20 = v17[2];
  v21 = v17[3];
  v22 = a1[2];
  KeyPath = swift_getKeyPath();
  v76 = v18;
  v77 = v19;
  v78 = v20;
  v79 = v21;
  v80 = KeyPath;
  v81 = v22;
  v82 = 0;
  sub_23BEA1DC0(v18, v19, v20, v21);
  sub_23BFF8884();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5968);
  sub_23BF3E174();
  v24 = v75;
  sub_23BFF8E3C();
  (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
  sub_23BEBF0A4(v76, v77, v78, v79);
  swift_release();
  v25 = v74;
  sub_23BEC42E0((uint64_t)v24, (uint64_t)v74, &qword_256AE5960);
  v26 = (_QWORD *)((char *)a1 + v16[11]);
  v28 = v26[1];
  v70 = *v26;
  v27 = v70;
  v29 = v26[2];
  v30 = v26[3];
  v72 = a1[3];
  v71 = swift_getKeyPath();
  sub_23BEA1DC0(v27, v28, v29, v30);
  v69 = sub_23BFF8B6C();
  sub_23BFF83F8();
  v32 = v31;
  v34 = v33;
  v36 = v35;
  v38 = v37;
  v39 = (_QWORD *)((char *)a1 + v16[12]);
  v40 = *v39;
  v41 = v39[1];
  v42 = v39[2];
  v43 = v39[3];
  v68 = a1[4];
  v44 = swift_getKeyPath();
  sub_23BEA1DC0(v40, v41, v42, v43);
  v67 = sub_23BFF8B6C();
  sub_23BFF83F8();
  v46 = v45;
  v48 = v47;
  v50 = v49;
  v52 = v51;
  v53 = (uint64_t)v25;
  v54 = v75;
  sub_23BE9F190(v53, (uint64_t)v75, &qword_256AE5960);
  v55 = (uint64_t)v54;
  v56 = v73;
  sub_23BE9F190(v55, v73, &qword_256AE5960);
  v57 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5978);
  v58 = v56 + *(int *)(v57 + 48);
  v59 = v70;
  v60 = v71;
  *(_QWORD *)v58 = v70;
  *(_QWORD *)(v58 + 8) = v28;
  *(_QWORD *)(v58 + 16) = v29;
  *(_QWORD *)(v58 + 24) = v30;
  v61 = v72;
  *(_QWORD *)(v58 + 32) = v60;
  *(_QWORD *)(v58 + 40) = v61;
  *(_BYTE *)(v58 + 48) = 0;
  *(_BYTE *)(v58 + 56) = v69;
  *(_QWORD *)(v58 + 64) = v32;
  *(_QWORD *)(v58 + 72) = v34;
  *(_QWORD *)(v58 + 80) = v36;
  *(_QWORD *)(v58 + 88) = v38;
  *(_BYTE *)(v58 + 96) = 0;
  v62 = v56 + *(int *)(v57 + 64);
  *(_QWORD *)v62 = v40;
  *(_QWORD *)(v62 + 8) = v41;
  *(_QWORD *)(v62 + 16) = v42;
  *(_QWORD *)(v62 + 24) = v43;
  v63 = v68;
  *(_QWORD *)(v62 + 32) = v44;
  *(_QWORD *)(v62 + 40) = v63;
  *(_BYTE *)(v62 + 48) = 0;
  *(_BYTE *)(v62 + 56) = v67;
  *(_QWORD *)(v62 + 64) = v46;
  *(_QWORD *)(v62 + 72) = v48;
  *(_QWORD *)(v62 + 80) = v50;
  *(_QWORD *)(v62 + 88) = v52;
  *(_BYTE *)(v62 + 96) = 0;
  v64 = v59;
  sub_23BEA1DC0(v59, v28, v29, v30);
  swift_retain();
  sub_23BEA1DC0(v40, v41, v42, v43);
  swift_retain();
  sub_23BE9F3A0((uint64_t)v74, &qword_256AE5960);
  sub_23BEBF0A4(v40, v41, v42, v43);
  swift_release();
  sub_23BEBF0A4(v64, v28, v29, v30);
  swift_release();
  return sub_23BE9F3A0((uint64_t)v75, &qword_256AE5960);
}

BOOL _s15FitnessCanvasUI23VerticalStackCardLayoutV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  result = 0;
  if ((vminv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64((float64x2_t)vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL), (float64x2_t)vextq_s8(*(int8x16_t *)a2, *(int8x16_t *)a2, 8uLL)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 40), *(float64x2_t *)(a2 + 40))), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 56),
                                                              *(float64x2_t *)(a2 + 56)),
                                                 (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 72), *(float64x2_t *)(a2 + 72))))), 7uLL))) & 1) != 0&& (~vaddv_s16((int16x4_t)vand_s8((int8x8_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 88), *(float64x2_t *)(a2 + 88)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 104), *(float64x2_t *)(a2 + 104)))), 0xFuLL)), (int8x8_t)0x8000400020001)) & 0xF) == 0&& *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16)&& *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24)&& *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32))
  {
    return *(double *)(a1 + 120) == *(double *)(a2 + 120);
  }
  return result;
}

unint64_t sub_23BF3CB9C()
{
  unint64_t result;

  result = qword_256AE5838;
  if (!qword_256AE5838)
  {
    result = MEMORY[0x242615198](&unk_23C000090, &type metadata for VerticalStackCardLayout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE5838);
  }
  return result;
}

unint64_t sub_23BF3CBE0()
{
  unint64_t result;

  result = qword_256AE5840;
  if (!qword_256AE5840)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for ContentMargins, &type metadata for ContentMargins);
    atomic_store(result, (unint64_t *)&qword_256AE5840);
  }
  return result;
}

unint64_t sub_23BF3CC24()
{
  unint64_t result;

  result = qword_256AE5848;
  if (!qword_256AE5848)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for CanvasColor, &type metadata for CanvasColor);
    atomic_store(result, (unint64_t *)&qword_256AE5848);
  }
  return result;
}

unint64_t sub_23BF3CC68()
{
  unint64_t result;

  result = qword_256AE5858;
  if (!qword_256AE5858)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for ContentMargins, &type metadata for ContentMargins);
    atomic_store(result, (unint64_t *)&qword_256AE5858);
  }
  return result;
}

unint64_t sub_23BF3CCAC()
{
  unint64_t result;

  result = qword_256AE5860;
  if (!qword_256AE5860)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for CanvasColor, &type metadata for CanvasColor);
    atomic_store(result, (unint64_t *)&qword_256AE5860);
  }
  return result;
}

unint64_t sub_23BF3CCF4()
{
  unint64_t result;

  result = qword_256AE5868[0];
  if (!qword_256AE5868[0])
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for VerticalStackCardLayout, &type metadata for VerticalStackCardLayout);
    atomic_store(result, qword_256AE5868);
  }
  return result;
}

__n128 __swift_memcpy128_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t getEnumTagSinglePayload for VerticalStackCardLayout(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 128))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for VerticalStackCardLayout(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 128) = v3;
  return result;
}

ValueMetadata *type metadata accessor for VerticalStackCardLayout()
{
  return &type metadata for VerticalStackCardLayout;
}

uint64_t storeEnumTagSinglePayload for VerticalStackCardLayout.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_23BF3CE24 + 4 * byte_23BFFFE4E[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_23BF3CE58 + 4 * byte_23BFFFE49[v4]))();
}

uint64_t sub_23BF3CE58(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BF3CE60(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BF3CE68);
  return result;
}

uint64_t sub_23BF3CE74(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BF3CE7CLL);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_23BF3CE80(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BF3CE88(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VerticalStackCardLayout.CodingKeys()
{
  return &type metadata for VerticalStackCardLayout.CodingKeys;
}

uint64_t sub_23BF3CEA4()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *sub_23BF3CF38(_OWORD *a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64) + 7;
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((((((((v6 + ((v5 + 128) & ~v5)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8)
       + 39) & 0xFFFFFFFFFFFFFFF8)
     + 16 > 0x18)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v9 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
  }
  else
  {
    v10 = *((_OWORD *)a2 + 5);
    a1[4] = *((_OWORD *)a2 + 4);
    a1[5] = v10;
    v11 = *((_OWORD *)a2 + 7);
    a1[6] = *((_OWORD *)a2 + 6);
    a1[7] = v11;
    v12 = *((_OWORD *)a2 + 1);
    *a1 = *(_OWORD *)a2;
    a1[1] = v12;
    v13 = *((_OWORD *)a2 + 3);
    a1[2] = *((_OWORD *)a2 + 2);
    a1[3] = v13;
    v14 = ((unint64_t)a1 + v5 + 128) & ~v5;
    v15 = ((unint64_t)a2 + v5 + 128) & ~v5;
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v14, v15);
    v16 = (v6 + v14) & 0xFFFFFFFFFFFFFFF8;
    v17 = (v6 + v15) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)(v17 + 24) < 0xFFFFFFFFuLL)
    {
      v21 = *(_OWORD *)(v17 + 16);
      *(_OWORD *)v16 = *(_OWORD *)v17;
      *(_OWORD *)(v16 + 16) = v21;
    }
    else
    {
      v18 = *(_QWORD *)v17;
      v19 = *(_QWORD *)(v17 + 8);
      v20 = *(_BYTE *)(v17 + 16);
      sub_23BEA0EAC(*(_QWORD *)v17, v19, v20);
      *(_QWORD *)v16 = v18;
      *(_QWORD *)(v16 + 8) = v19;
      *(_BYTE *)(v16 + 16) = v20;
      *(_QWORD *)(v16 + 24) = *(_QWORD *)(v17 + 24);
      swift_bridgeObjectRetain();
    }
    v22 = (v16 + 39) & 0xFFFFFFFFFFFFFFF8;
    v23 = (v17 + 39) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)(v23 + 24) < 0xFFFFFFFFuLL)
    {
      v27 = *(_OWORD *)(v23 + 16);
      *(_OWORD *)v22 = *(_OWORD *)v23;
      *(_OWORD *)(v22 + 16) = v27;
    }
    else
    {
      v24 = *(_QWORD *)v23;
      v25 = *(_QWORD *)(v23 + 8);
      v26 = *(_BYTE *)(v23 + 16);
      sub_23BEA0EAC(*(_QWORD *)v23, v25, v26);
      *(_QWORD *)v22 = v24;
      *(_QWORD *)(v22 + 8) = v25;
      *(_BYTE *)(v22 + 16) = v26;
      *(_QWORD *)(v22 + 24) = *(_QWORD *)(v23 + 24);
      swift_bridgeObjectRetain();
    }
    v28 = (v22 + 39) & 0xFFFFFFFFFFFFFFF8;
    v29 = (v23 + 39) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)(v29 + 24) < 0xFFFFFFFFuLL)
    {
      v33 = *(_OWORD *)(v29 + 16);
      *(_OWORD *)v28 = *(_OWORD *)v29;
      *(_OWORD *)(v28 + 16) = v33;
    }
    else
    {
      v30 = *(_QWORD *)v29;
      v31 = *(_QWORD *)(v29 + 8);
      v32 = *(_BYTE *)(v29 + 16);
      sub_23BEA0EAC(*(_QWORD *)v29, v31, v32);
      *(_QWORD *)v28 = v30;
      *(_QWORD *)(v28 + 8) = v31;
      *(_BYTE *)(v28 + 16) = v32;
      *(_QWORD *)(v28 + 24) = *(_QWORD *)(v29 + 24);
      swift_bridgeObjectRetain();
    }
    v34 = (_QWORD *)((v29 + 39) & 0xFFFFFFFFFFFFFFF8);
    v35 = v34[1];
    v36 = (_QWORD *)((v28 + 39) & 0xFFFFFFFFFFFFFFF8);
    *v36 = *v34;
    v36[1] = v35;
  }
  swift_retain();
  return v3;
}

uint64_t sub_23BF3D150(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = (a1 + *(unsigned __int8 *)(v2 + 80) + 128) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  (*(void (**)(unint64_t))(v2 + 8))(v3);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v4 + 24) >= 0xFFFFFFFFuLL)
  {
    sub_23BEA0F64(*(_QWORD *)v4, *(_QWORD *)(v4 + 8), *(_BYTE *)(v4 + 16));
    swift_bridgeObjectRelease();
  }
  v5 = (v4 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v5 + 24) >= 0xFFFFFFFFuLL)
  {
    sub_23BEA0F64(*(_QWORD *)v5, *(_QWORD *)(v5 + 8), *(_BYTE *)(v5 + 16));
    swift_bridgeObjectRelease();
  }
  v6 = (v5 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v6 + 24) >= 0xFFFFFFFFuLL)
  {
    sub_23BEA0F64(*(_QWORD *)v6, *(_QWORD *)(v6 + 8), *(_BYTE *)(v6 + 16));
    swift_bridgeObjectRelease();
  }
  return swift_release();
}

_OWORD *sub_23BF3D224(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;

  v4 = a2[5];
  a1[4] = a2[4];
  a1[5] = v4;
  v5 = a2[7];
  a1[6] = a2[6];
  a1[7] = v5;
  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = ((unint64_t)a1 + v9 + 128) & ~v9;
  v11 = ((unint64_t)a2 + v9 + 128) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v10, v11);
  v12 = *(_QWORD *)(v8 + 64) + 7;
  v13 = (v12 + v10) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v12 + v11) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v14 + 24) < 0xFFFFFFFFuLL)
  {
    v18 = *(_OWORD *)(v14 + 16);
    *(_OWORD *)v13 = *(_OWORD *)v14;
    *(_OWORD *)(v13 + 16) = v18;
  }
  else
  {
    v15 = *(_QWORD *)v14;
    v16 = *(_QWORD *)(v14 + 8);
    v17 = *(_BYTE *)(v14 + 16);
    sub_23BEA0EAC(*(_QWORD *)v14, v16, v17);
    *(_QWORD *)v13 = v15;
    *(_QWORD *)(v13 + 8) = v16;
    *(_BYTE *)(v13 + 16) = v17;
    *(_QWORD *)(v13 + 24) = *(_QWORD *)(v14 + 24);
    swift_bridgeObjectRetain();
  }
  v19 = (v13 + 39) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v14 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v20 + 24) < 0xFFFFFFFFuLL)
  {
    v24 = *(_OWORD *)(v20 + 16);
    *(_OWORD *)v19 = *(_OWORD *)v20;
    *(_OWORD *)(v19 + 16) = v24;
  }
  else
  {
    v21 = *(_QWORD *)v20;
    v22 = *(_QWORD *)(v20 + 8);
    v23 = *(_BYTE *)(v20 + 16);
    sub_23BEA0EAC(*(_QWORD *)v20, v22, v23);
    *(_QWORD *)v19 = v21;
    *(_QWORD *)(v19 + 8) = v22;
    *(_BYTE *)(v19 + 16) = v23;
    *(_QWORD *)(v19 + 24) = *(_QWORD *)(v20 + 24);
    swift_bridgeObjectRetain();
  }
  v25 = (v19 + 39) & 0xFFFFFFFFFFFFFFF8;
  v26 = (v20 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v26 + 24) < 0xFFFFFFFFuLL)
  {
    v30 = *(_OWORD *)(v26 + 16);
    *(_OWORD *)v25 = *(_OWORD *)v26;
    *(_OWORD *)(v25 + 16) = v30;
  }
  else
  {
    v27 = *(_QWORD *)v26;
    v28 = *(_QWORD *)(v26 + 8);
    v29 = *(_BYTE *)(v26 + 16);
    sub_23BEA0EAC(*(_QWORD *)v26, v28, v29);
    *(_QWORD *)v25 = v27;
    *(_QWORD *)(v25 + 8) = v28;
    *(_BYTE *)(v25 + 16) = v29;
    *(_QWORD *)(v25 + 24) = *(_QWORD *)(v26 + 24);
    swift_bridgeObjectRetain();
  }
  v31 = (_QWORD *)((v26 + 39) & 0xFFFFFFFFFFFFFFF8);
  v32 = v31[1];
  v33 = (_QWORD *)((v25 + 39) & 0xFFFFFFFFFFFFFFF8);
  *v33 = *v31;
  v33[1] = v32;
  swift_retain();
  return a1;
}

_QWORD *sub_23BF3D3D0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  __int128 v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  a1[10] = a2[10];
  a1[11] = a2[11];
  a1[12] = a2[12];
  a1[13] = a2[13];
  a1[14] = a2[14];
  a1[15] = a2[15];
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = ((unint64_t)a1 + v5 + 128) & ~v5;
  v7 = ((unint64_t)a2 + v5 + 128) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 24))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  v9 = (v8 + v6) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v8 + v7) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_QWORD *)(v10 + 24);
  if (*(_QWORD *)(v9 + 24) < 0xFFFFFFFFuLL)
  {
    if (v11 >= 0xFFFFFFFF)
    {
      v18 = *(_QWORD *)v10;
      v19 = *(_QWORD *)(v10 + 8);
      v20 = *(_BYTE *)(v10 + 16);
      sub_23BEA0EAC(*(_QWORD *)v10, v19, v20);
      *(_QWORD *)v9 = v18;
      *(_QWORD *)(v9 + 8) = v19;
      *(_BYTE *)(v9 + 16) = v20;
      *(_QWORD *)(v9 + 24) = *(_QWORD *)(v10 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
  }
  else
  {
    if (v11 >= 0xFFFFFFFF)
    {
      v12 = *(_QWORD *)v10;
      v13 = *(_QWORD *)(v10 + 8);
      v14 = *(_BYTE *)(v10 + 16);
      sub_23BEA0EAC(*(_QWORD *)v10, v13, v14);
      v15 = *(_QWORD *)v9;
      v16 = *(_QWORD *)(v9 + 8);
      v17 = *(_BYTE *)(v9 + 16);
      *(_QWORD *)v9 = v12;
      *(_QWORD *)(v9 + 8) = v13;
      *(_BYTE *)(v9 + 16) = v14;
      sub_23BEA0F64(v15, v16, v17);
      *(_QWORD *)(v9 + 24) = *(_QWORD *)(v10 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    sub_23BEA0F64(*(_QWORD *)v9, *(_QWORD *)(v9 + 8), *(_BYTE *)(v9 + 16));
    swift_bridgeObjectRelease();
  }
  v21 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v21;
LABEL_8:
  v22 = (v9 + 39) & 0xFFFFFFFFFFFFFFF8;
  v23 = (v10 + 39) & 0xFFFFFFFFFFFFFFF8;
  v24 = *(_QWORD *)(v23 + 24);
  if (*(_QWORD *)(v22 + 24) < 0xFFFFFFFFuLL)
  {
    if (v24 >= 0xFFFFFFFF)
    {
      v31 = *(_QWORD *)v23;
      v32 = *(_QWORD *)(v23 + 8);
      v33 = *(_BYTE *)(v23 + 16);
      sub_23BEA0EAC(*(_QWORD *)v23, v32, v33);
      *(_QWORD *)v22 = v31;
      *(_QWORD *)(v22 + 8) = v32;
      *(_BYTE *)(v22 + 16) = v33;
      *(_QWORD *)(v22 + 24) = *(_QWORD *)(v23 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_15;
    }
  }
  else
  {
    if (v24 >= 0xFFFFFFFF)
    {
      v25 = *(_QWORD *)v23;
      v26 = *(_QWORD *)(v23 + 8);
      v27 = *(_BYTE *)(v23 + 16);
      sub_23BEA0EAC(*(_QWORD *)v23, v26, v27);
      v28 = *(_QWORD *)v22;
      v29 = *(_QWORD *)(v22 + 8);
      v30 = *(_BYTE *)(v22 + 16);
      *(_QWORD *)v22 = v25;
      *(_QWORD *)(v22 + 8) = v26;
      *(_BYTE *)(v22 + 16) = v27;
      sub_23BEA0F64(v28, v29, v30);
      *(_QWORD *)(v22 + 24) = *(_QWORD *)(v23 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_15;
    }
    sub_23BEA0F64(*(_QWORD *)v22, *(_QWORD *)(v22 + 8), *(_BYTE *)(v22 + 16));
    swift_bridgeObjectRelease();
  }
  v34 = *(_OWORD *)(v23 + 16);
  *(_OWORD *)v22 = *(_OWORD *)v23;
  *(_OWORD *)(v22 + 16) = v34;
LABEL_15:
  v35 = (v22 + 39) & 0xFFFFFFFFFFFFFFF8;
  v36 = (v23 + 39) & 0xFFFFFFFFFFFFFFF8;
  v37 = *(_QWORD *)(v36 + 24);
  if (*(_QWORD *)(v35 + 24) < 0xFFFFFFFFuLL)
  {
    if (v37 >= 0xFFFFFFFF)
    {
      v44 = *(_QWORD *)v36;
      v45 = *(_QWORD *)(v36 + 8);
      v46 = *(_BYTE *)(v36 + 16);
      sub_23BEA0EAC(*(_QWORD *)v36, v45, v46);
      *(_QWORD *)v35 = v44;
      *(_QWORD *)(v35 + 8) = v45;
      *(_BYTE *)(v35 + 16) = v46;
      *(_QWORD *)(v35 + 24) = *(_QWORD *)(v36 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_22;
    }
LABEL_21:
    v47 = *(_OWORD *)(v36 + 16);
    *(_OWORD *)v35 = *(_OWORD *)v36;
    *(_OWORD *)(v35 + 16) = v47;
    goto LABEL_22;
  }
  if (v37 < 0xFFFFFFFF)
  {
    sub_23BEA0F64(*(_QWORD *)v35, *(_QWORD *)(v35 + 8), *(_BYTE *)(v35 + 16));
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  v38 = *(_QWORD *)v36;
  v39 = *(_QWORD *)(v36 + 8);
  v40 = *(_BYTE *)(v36 + 16);
  sub_23BEA0EAC(*(_QWORD *)v36, v39, v40);
  v41 = *(_QWORD *)v35;
  v42 = *(_QWORD *)(v35 + 8);
  v43 = *(_BYTE *)(v35 + 16);
  *(_QWORD *)v35 = v38;
  *(_QWORD *)(v35 + 8) = v39;
  *(_BYTE *)(v35 + 16) = v40;
  sub_23BEA0F64(v41, v42, v43);
  *(_QWORD *)(v35 + 24) = *(_QWORD *)(v36 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_22:
  v48 = (_QWORD *)((v35 + 39) & 0xFFFFFFFFFFFFFFF8);
  v49 = (_QWORD *)((v36 + 39) & 0xFFFFFFFFFFFFFFF8);
  v50 = v49[1];
  *v48 = *v49;
  v48[1] = v50;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *sub_23BF3D750(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  __int128 v15;
  _OWORD *v16;
  _OWORD *v17;
  __int128 v18;
  _OWORD *v19;
  _OWORD *v20;
  __int128 v21;

  v4 = a2[5];
  a1[4] = a2[4];
  a1[5] = v4;
  v5 = a2[7];
  a1[6] = a2[6];
  a1[7] = v5;
  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = ((unint64_t)a1 + v9 + 128) & ~v9;
  v11 = ((unint64_t)a2 + v9 + 128) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v10, v11);
  v12 = *(_QWORD *)(v8 + 64) + 7;
  v13 = (_OWORD *)((v12 + v10) & 0xFFFFFFFFFFFFFFF8);
  v14 = (_OWORD *)((v12 + v11) & 0xFFFFFFFFFFFFFFF8);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  v16 = (_OWORD *)(((unint64_t)v13 + 39) & 0xFFFFFFFFFFFFFFF8);
  v17 = (_OWORD *)(((unint64_t)v14 + 39) & 0xFFFFFFFFFFFFFFF8);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  v19 = (_OWORD *)(((unint64_t)v16 + 39) & 0xFFFFFFFFFFFFFFF8);
  v20 = (_OWORD *)(((unint64_t)v17 + 39) & 0xFFFFFFFFFFFFFFF8);
  v21 = v20[1];
  *v19 = *v20;
  v19[1] = v21;
  *(_OWORD *)(((unint64_t)v19 + 39) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v20 + 39) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_23BF3D830(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  __int128 v30;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 128 + a1) & ~v6;
  v8 = (v6 + 128 + a2) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v5 + 40))(v7, v8);
  v9 = *(_QWORD *)(v5 + 64) + 7;
  v10 = (v9 + v7) & 0xFFFFFFFFFFFFFFF8;
  v11 = (v9 + v8) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v10 + 24) >= 0xFFFFFFFFuLL)
  {
    if (*(_QWORD *)(v11 + 24) >= 0xFFFFFFFFuLL)
    {
      v12 = *(_BYTE *)(v11 + 16);
      v13 = *(_QWORD *)v10;
      v14 = *(_QWORD *)(v10 + 8);
      v15 = *(_BYTE *)(v10 + 16);
      *(_OWORD *)v10 = *(_OWORD *)v11;
      *(_BYTE *)(v10 + 16) = v12;
      sub_23BEA0F64(v13, v14, v15);
      *(_QWORD *)(v10 + 24) = *(_QWORD *)(v11 + 24);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_23BEA0F64(*(_QWORD *)v10, *(_QWORD *)(v10 + 8), *(_BYTE *)(v10 + 16));
    swift_bridgeObjectRelease();
  }
  v16 = *(_OWORD *)(v11 + 16);
  *(_OWORD *)v10 = *(_OWORD *)v11;
  *(_OWORD *)(v10 + 16) = v16;
LABEL_6:
  v17 = (v10 + 39) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v11 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v17 + 24) >= 0xFFFFFFFFuLL)
  {
    if (*(_QWORD *)(v18 + 24) >= 0xFFFFFFFFuLL)
    {
      v19 = *(_BYTE *)(v18 + 16);
      v20 = *(_QWORD *)v17;
      v21 = *(_QWORD *)(v17 + 8);
      v22 = *(_BYTE *)(v17 + 16);
      *(_OWORD *)v17 = *(_OWORD *)v18;
      *(_BYTE *)(v17 + 16) = v19;
      sub_23BEA0F64(v20, v21, v22);
      *(_QWORD *)(v17 + 24) = *(_QWORD *)(v18 + 24);
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    sub_23BEA0F64(*(_QWORD *)v17, *(_QWORD *)(v17 + 8), *(_BYTE *)(v17 + 16));
    swift_bridgeObjectRelease();
  }
  v23 = *(_OWORD *)(v18 + 16);
  *(_OWORD *)v17 = *(_OWORD *)v18;
  *(_OWORD *)(v17 + 16) = v23;
LABEL_11:
  v24 = (v17 + 39) & 0xFFFFFFFFFFFFFFF8;
  v25 = (v18 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v24 + 24) < 0xFFFFFFFFuLL)
  {
LABEL_15:
    v30 = *(_OWORD *)(v25 + 16);
    *(_OWORD *)v24 = *(_OWORD *)v25;
    *(_OWORD *)(v24 + 16) = v30;
    goto LABEL_16;
  }
  if (*(_QWORD *)(v25 + 24) < 0xFFFFFFFFuLL)
  {
    sub_23BEA0F64(*(_QWORD *)v24, *(_QWORD *)(v24 + 8), *(_BYTE *)(v24 + 16));
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  v26 = *(_BYTE *)(v25 + 16);
  v27 = *(_QWORD *)v24;
  v28 = *(_QWORD *)(v24 + 8);
  v29 = *(_BYTE *)(v24 + 16);
  *(_OWORD *)v24 = *(_OWORD *)v25;
  *(_BYTE *)(v24 + 16) = v26;
  sub_23BEA0F64(v27, v28, v29);
  *(_QWORD *)(v24 + 24) = *(_QWORD *)(v25 + 24);
  swift_bridgeObjectRelease();
LABEL_16:
  *(_OWORD *)((v24 + 39) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v25 + 39) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t sub_23BF3DA64(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  if (v6 >= a2)
  {
    v13 = (a1 + v7 + 128) & ~v7;
    if (v5 < 0x7FFFFFFF)
    {
      v14 = *(_QWORD *)((((((((v8 + v13) & 0xFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFF8)
                       + 39) & 0xFFFFFFFFFFFFF8);
      if (v14 >= 0xFFFFFFFF)
        LODWORD(v14) = -1;
      return (v14 + 1);
    }
    else
    {
      return (*(uint64_t (**)(uint64_t))(v4 + 48))(v13);
    }
  }
  else
  {
    if (((((((((((v8 + ((v7 + 128) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8)
           + 39) & 0xFFFFFFFFFFFFFFF8)
         + 16) & 0xFFFFFFF8) != 0)
      v9 = 2;
    else
      v9 = a2 - v6 + 1;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    return ((uint64_t (*)(void))((char *)&loc_23BF3DB08 + 4 * byte_23BFFFE53[v11]))();
  }
}

void sub_23BF3DBB0(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (v6 >= a3)
  {
    v10 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((((((*(_DWORD *)(v5 + 64) + 7 + (((_DWORD)v7 + 128) & ~(_DWORD)v7)) & 0xFFFFFFF8) + 39) & 0xFFFFFFF8) + 39) & 0xFFFFFFF8)
         + 39) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v8 = a3 - v6 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X14 }
  }
  if (((((((((*(_DWORD *)(v5 + 64) + 7 + (((_DWORD)v7 + 128) & ~(_DWORD)v7)) & 0xFFFFFFF8) + 39) & 0xFFFFFFF8) + 39) & 0xFFFFFFF8)
       + 39) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v11 = ~v6 + a2;
    bzero(a1, ((((((((*(_QWORD *)(v5 + 64) + 7 + ((v7 + 128) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8)+ 39) & 0xFFFFFFFFFFFFFFF8)+ 16);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_23BF3DCD0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x23BF3DD64);
}

void sub_23BF3DCD8(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x23BF3DCE0);
  JUMPOUT(0x23BF3DD64);
}

void sub_23BF3DD3C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x23BF3DD64);
}

void sub_23BF3DD44()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x23BF3DD64);
}

uint64_t sub_23BF3DD4C@<X0>(int a1@<W1>, unsigned int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a1)
    JUMPOUT(0x23BF3DD64);
  if (a2 < 0x7FFFFFFF)
  {
    if ((a1 & 0x80000000) == 0)
      JUMPOUT(0x23BF3DD60);
    JUMPOUT(0x23BF3DD58);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))((v6 + v5 + 128) & a3);
}

uint64_t type metadata accessor for VerticalStackCard(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for VerticalStackCard);
}

unint64_t sub_23BF3DD8C()
{
  unint64_t result;

  result = qword_256AE58F0;
  if (!qword_256AE58F0)
  {
    result = MEMORY[0x242615198](&unk_23C000068, &type metadata for VerticalStackCardLayout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE58F0);
  }
  return result;
}

unint64_t sub_23BF3DDD4()
{
  unint64_t result;

  result = qword_256AE58F8;
  if (!qword_256AE58F8)
  {
    result = MEMORY[0x242615198](&unk_23BFFFFD8, &type metadata for VerticalStackCardLayout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE58F8);
  }
  return result;
}

unint64_t sub_23BF3DE1C()
{
  unint64_t result;

  result = qword_256AE5900;
  if (!qword_256AE5900)
  {
    result = MEMORY[0x242615198](&unk_23C000000, &type metadata for VerticalStackCardLayout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE5900);
  }
  return result;
}

uint64_t sub_23BF3DE60()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23BF3DE94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = (int *)type metadata accessor for VerticalStackCard(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *(unsigned __int8 *)(*((_QWORD *)v6 - 1) + 80);
  v8 = v4 + ((v7 + 32) & ~v7);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v8 + v6[9], v5);
  v9 = v8 + v6[10];
  if (*(_QWORD *)(v9 + 24))
  {
    sub_23BEA0F64(*(_QWORD *)v9, *(_QWORD *)(v9 + 8), *(_BYTE *)(v9 + 16));
    swift_bridgeObjectRelease();
  }
  v10 = v8 + v6[11];
  if (*(_QWORD *)(v10 + 24))
  {
    sub_23BEA0F64(*(_QWORD *)v10, *(_QWORD *)(v10 + 8), *(_BYTE *)(v10 + 16));
    swift_bridgeObjectRelease();
  }
  v11 = v8 + v6[12];
  if (*(_QWORD *)(v11 + 24))
  {
    sub_23BEA0F64(*(_QWORD *)v11, *(_QWORD *)(v11 + 8), *(_BYTE *)(v11 + 16));
    swift_bridgeObjectRelease();
  }
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23BF3DF98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = type metadata accessor for VerticalStackCard(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80);
  return (*(uint64_t (**)(void))(v4 + *(int *)(v5 + 52) + ((v6 + 32) & ~v6)))();
}

uint64_t sub_23BF3DFE0@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_23BF3BF98(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_23BF3DFEC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23BF3C1E4(*(double **)(v1 + 32), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

unint64_t sub_23BF3DFF8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AE5930;
  if (!qword_256AE5930)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE5908);
    v2[0] = sub_23BF3E07C();
    v2[1] = sub_23BEA1F94(&qword_256AE5950, &qword_256AE5958, MEMORY[0x24BDF06D0]);
    result = MEMORY[0x242615198](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AE5930);
  }
  return result;
}

unint64_t sub_23BF3E07C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AE5938;
  if (!qword_256AE5938)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE5920);
    v2[0] = sub_23BF3E0E8();
    v2[1] = MEMORY[0x24BDECC60];
    result = MEMORY[0x242615198](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AE5938);
  }
  return result;
}

unint64_t sub_23BF3E0E8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AE5940;
  if (!qword_256AE5940)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE5918);
    v2[0] = sub_23BEA1F94(&qword_256AE5948, &qword_256AE5910, MEMORY[0x24BDF4700]);
    v2[1] = MEMORY[0x24BDEDBB8];
    result = MEMORY[0x242615198](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AE5940);
  }
  return result;
}

unint64_t sub_23BF3E174()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AE5970;
  if (!qword_256AE5970)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE5968);
    v2[0] = sub_23BF059E0();
    v2[1] = sub_23BEA1F94(&qword_256AE35A8, &qword_256AE35B0, MEMORY[0x24BDF1028]);
    result = MEMORY[0x242615198](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AE5970);
  }
  return result;
}

uint64_t sub_23BF3E1F8(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000012 && a2 == 0x800000023C01E950 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E694C656C746974 && a2 == 0xEE0074696D694C65 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000023C01EF30 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000023C01EF50 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x49746E65746E6F63 && a2 == 0xED0000737465736ELL || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x800000023C01EF70 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000023C01EF90 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000023C01EFB0 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000023C01EFD0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else
  {
    v5 = sub_23BFF9964();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 8;
    else
      return 9;
  }
}

uint64_t sub_23BF3E59C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  _QWORD v6[2];

  sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE5908);
  swift_getTupleTypeMetadata2();
  v0 = sub_23BFF9220();
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v0);
  v1 = sub_23BFF90AC();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3C28);
  v2 = sub_23BFF862C();
  v6[0] = MEMORY[0x242615198](MEMORY[0x24BDF4700], v1);
  v6[1] = sub_23BEA1F94(qword_256AE3C30, &qword_256AE3C28, MEMORY[0x24BDEB950]);
  MEMORY[0x242615198](MEMORY[0x24BDED308], v2, v6);
  v3 = sub_23BFF9040();
  sub_23BFF8680();
  v4 = (uint64_t (*)(uint64_t))MEMORY[0x24BDED868];
  MEMORY[0x242615198](MEMORY[0x24BDF43B0], v3);
  sub_23BEA1BB8(&qword_256AE3558, v4, MEMORY[0x24BDED858]);
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23BF3E70C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v30 = a1;
  v31 = a4;
  v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5988);
  MEMORY[0x24BDAC7A8](v32);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5990);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_23BFF86BC();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (uint64_t *)((char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5998);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v29 - v18;
  if ((a3 & 1) != 0)
  {
    v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE59A0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v7, v30, v27);
    *(_WORD *)&v7[*(int *)(v32 + 36)] = 256;
    v25 = &qword_256AE5988;
    sub_23BE9F190((uint64_t)v7, (uint64_t)v10, &qword_256AE5988);
    swift_storeEnumTagMultiPayload();
    sub_23BF3EB88(&qword_256AE59A8, &qword_256AE5998, qword_256AE3C30, &qword_256AE3C28);
    sub_23BF3EB88(&qword_256AE59B8, &qword_256AE5988, &qword_256AE3570, &qword_256AE3520);
    sub_23BFF895C();
    v26 = (uint64_t)v7;
  }
  else
  {
    v20 = (char *)v13 + *(int *)(v11 + 20);
    v21 = *MEMORY[0x24BDEEB68];
    v22 = sub_23BFF8854();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v20, v21, v22);
    *v13 = a2;
    v13[1] = a2;
    v23 = (uint64_t)&v16[*(int *)(v14 + 36)];
    sub_23BF3EC28((uint64_t)v13, v23);
    *(_WORD *)(v23 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AE3C28) + 36)) = 256;
    v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE59A0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v16, v30, v24);
    sub_23BEC4004((uint64_t)v13);
    sub_23BF3EC6C((uint64_t)v16, (uint64_t)v19);
    v25 = &qword_256AE5998;
    sub_23BE9F190((uint64_t)v19, (uint64_t)v10, &qword_256AE5998);
    swift_storeEnumTagMultiPayload();
    sub_23BF3EB88(&qword_256AE59A8, &qword_256AE5998, qword_256AE3C30, &qword_256AE3C28);
    sub_23BF3EB88(&qword_256AE59B8, &qword_256AE5988, &qword_256AE3570, &qword_256AE3520);
    sub_23BFF895C();
    v26 = (uint64_t)v19;
  }
  return sub_23BE9F3A0(v26, v25);
}

uint64_t sub_23BF3EA5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_23BF3E70C(a1, *(_QWORD *)v2, *(_BYTE *)(v2 + 8), a2);
}

uint64_t View.artworkClipShape(_:)(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v4;
  char v5;

  v4 = a1;
  v5 = a2 & 1;
  return MEMORY[0x2426142A4](&v4, a3, &type metadata for ArtworkClipShapeModifier);
}

uint64_t sub_23BF3EAA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = sub_23BFF862C();
  v4[0] = v1;
  v4[1] = sub_23BF3EAF8();
  return MEMORY[0x242615198](MEMORY[0x24BDED308], v2, v4);
}

unint64_t sub_23BF3EAF8()
{
  unint64_t result;

  result = qword_256AE5980;
  if (!qword_256AE5980)
  {
    result = MEMORY[0x242615198](&unk_23C0001FC, &type metadata for ArtworkClipShapeModifier);
    atomic_store(result, (unint64_t *)&qword_256AE5980);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ArtworkClipShapeModifier(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ArtworkClipShapeModifier()
{
  return &type metadata for ArtworkClipShapeModifier;
}

uint64_t sub_23BF3EB78()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23BF3EB88(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  result = *a1;
  if (!result)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v9[0] = sub_23BEA1F94(&qword_256AE59B0, &qword_256AE59A0, MEMORY[0x24BDEFB78]);
    v9[1] = sub_23BEA1F94(a3, a4, MEMORY[0x24BDEB950]);
    result = MEMORY[0x242615198](MEMORY[0x24BDED308], v8, v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23BF3EC28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23BFF86BC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BF3EC6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5998);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_23BF3ECB8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AE59C0;
  if (!qword_256AE59C0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE59C8);
    v2[0] = sub_23BF3EB88(&qword_256AE59A8, &qword_256AE5998, qword_256AE3C30, &qword_256AE3C28);
    v2[1] = sub_23BF3EB88(&qword_256AE59B8, &qword_256AE5988, &qword_256AE3570, &qword_256AE3520);
    result = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AE59C0);
  }
  return result;
}

ValueMetadata *type metadata accessor for ActionCardButtonStyle()
{
  return &type metadata for ActionCardButtonStyle;
}

uint64_t sub_23BF3ED74()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23BF3ED84()
{
  return sub_23BFF8A64();
}

unint64_t sub_23BF3EDA8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256AE59D0;
  if (!qword_256AE59D0)
  {
    v1 = sub_23BFF8A58();
    result = MEMORY[0x242615198](MEMORY[0x24BDF0438], v1);
    atomic_store(result, (unint64_t *)&qword_256AE59D0);
  }
  return result;
}

uint64_t Symbol.systemName.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

FitnessCanvasUI::Symbol __swiftcall Symbol.init(systemName:)(FitnessCanvasUI::Symbol systemName)
{
  FitnessCanvasUI::Symbol *v1;

  *v1 = systemName;
  return systemName;
}

uint64_t Symbol.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_23BFF93F4();
  return swift_bridgeObjectRelease();
}

uint64_t static Symbol.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return sub_23BFF9964();
}

uint64_t sub_23BF3EE98()
{
  return 0x614E6D6574737973;
}

uint64_t sub_23BF3EEB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x614E6D6574737973 && a2 == 0xEA0000000000656DLL)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_23BFF9964();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_23BF3EF54()
{
  sub_23BF3F090();
  return sub_23BFF9A30();
}

uint64_t sub_23BF3EF7C()
{
  sub_23BF3F090();
  return sub_23BFF9A3C();
}

uint64_t Symbol.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE59E8);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BF3F090();
  sub_23BFF9A18();
  sub_23BFF9910();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t sub_23BF3F090()
{
  unint64_t result;

  result = qword_256AE59F0;
  if (!qword_256AE59F0)
  {
    result = MEMORY[0x242615198](&unk_23C0005B4, &type metadata for Symbol.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE59F0);
  }
  return result;
}

uint64_t Symbol.hashValue.getter()
{
  sub_23BFF99D0();
  swift_bridgeObjectRetain();
  sub_23BFF93F4();
  swift_bridgeObjectRelease();
  return sub_23BFF9A00();
}

uint64_t Symbol.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE59F8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BF3F090();
  sub_23BFF9A0C();
  if (!v2)
  {
    v9 = sub_23BFF9898();
    v11 = v10;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v9;
    a2[1] = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_23BF3F248()
{
  sub_23BFF99D0();
  swift_bridgeObjectRetain();
  sub_23BFF93F4();
  swift_bridgeObjectRelease();
  return sub_23BFF9A00();
}

uint64_t sub_23BF3F2A0()
{
  swift_bridgeObjectRetain();
  sub_23BFF93F4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23BF3F2E4()
{
  sub_23BFF99D0();
  swift_bridgeObjectRetain();
  sub_23BFF93F4();
  swift_bridgeObjectRelease();
  return sub_23BFF9A00();
}

uint64_t sub_23BF3F338@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return Symbol.init(from:)(a1, a2);
}

uint64_t sub_23BF3F34C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE59E8);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BF3F090();
  sub_23BFF9A18();
  sub_23BFF9910();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_23BF3F438(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return sub_23BFF9964();
}

uint64_t static SymbolAttribute.name.getter()
{
  uint64_t v0;

  swift_beginAccess();
  v0 = *(_QWORD *)aSymbol_1;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t static SymbolAttribute.name.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(_QWORD *)aSymbol_1 = a1;
  qword_256AE59E0 = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*static SymbolAttribute.name.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_23BF3F554()
{
  sub_23BF3FA90();
  return sub_23BFF8344();
}

uint64_t sub_23BF3F5B0()
{
  sub_23BF3FA4C();
  return sub_23BFF8350();
}

uint64_t sub_23BF3F60C()
{
  uint64_t v0;

  swift_beginAccess();
  v0 = *(_QWORD *)aSymbol_1;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t (*AttributeScopes.CustomAttributes.symbol.modify())()
{
  return nullsub_1;
}

void sub_23BF3F688()
{
  sub_23BF3FA08();
  JUMPOUT(0x2426135C0);
}

void sub_23BF3F6C0()
{
  sub_23BF3FA08();
  JUMPOUT(0x2426135CCLL);
}

unint64_t sub_23BF3F700()
{
  unint64_t result;

  result = qword_256AE5A00;
  if (!qword_256AE5A00)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for Symbol, &type metadata for Symbol);
    atomic_store(result, (unint64_t *)&qword_256AE5A00);
  }
  return result;
}

unint64_t sub_23BF3F748()
{
  unint64_t result;

  result = qword_256AE5A08;
  if (!qword_256AE5A08)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for SymbolAttribute, &type metadata for SymbolAttribute);
    atomic_store(result, (unint64_t *)&qword_256AE5A08);
  }
  return result;
}

unint64_t sub_23BF3F790()
{
  unint64_t result;

  result = qword_256AE5A10;
  if (!qword_256AE5A10)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for Symbol, &type metadata for Symbol);
    atomic_store(result, (unint64_t *)&qword_256AE5A10);
  }
  return result;
}

unint64_t sub_23BF3F7D8()
{
  unint64_t result;

  result = qword_256AE5A18;
  if (!qword_256AE5A18)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for AttributeScopes.CustomAttributes, &type metadata for AttributeScopes.CustomAttributes);
    atomic_store(result, (unint64_t *)&qword_256AE5A18);
  }
  return result;
}

unint64_t sub_23BF3F820()
{
  unint64_t result;

  result = qword_256AE5A20;
  if (!qword_256AE5A20)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for AttributeScopes.CustomAttributes, &type metadata for AttributeScopes.CustomAttributes);
    atomic_store(result, (unint64_t *)&qword_256AE5A20);
  }
  return result;
}

ValueMetadata *type metadata accessor for Symbol()
{
  return &type metadata for Symbol;
}

ValueMetadata *type metadata accessor for SymbolAttribute()
{
  return &type metadata for SymbolAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.CustomAttributes()
{
  return &type metadata for AttributeScopes.CustomAttributes;
}

uint64_t storeEnumTagSinglePayload for Symbol.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23BF3F8D4 + 4 * byte_23C0002A0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23BF3F8F4 + 4 * byte_23C0002A5[v4]))();
}

_BYTE *sub_23BF3F8D4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23BF3F8F4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BF3F8FC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BF3F904(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BF3F90C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BF3F914(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for Symbol.CodingKeys()
{
  return &type metadata for Symbol.CodingKeys;
}

unint64_t sub_23BF3F934()
{
  unint64_t result;

  result = qword_256AE5A28;
  if (!qword_256AE5A28)
  {
    result = MEMORY[0x242615198](&unk_23C00058C, &type metadata for Symbol.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE5A28);
  }
  return result;
}

unint64_t sub_23BF3F97C()
{
  unint64_t result;

  result = qword_256AE5A30;
  if (!qword_256AE5A30)
  {
    result = MEMORY[0x242615198](&unk_23C0004FC, &type metadata for Symbol.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE5A30);
  }
  return result;
}

unint64_t sub_23BF3F9C4()
{
  unint64_t result;

  result = qword_256AE5A38;
  if (!qword_256AE5A38)
  {
    result = MEMORY[0x242615198](&unk_23C000524, &type metadata for Symbol.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE5A38);
  }
  return result;
}

unint64_t sub_23BF3FA08()
{
  unint64_t result;

  result = qword_256AE5A40;
  if (!qword_256AE5A40)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for AttributeScopes.CustomAttributes, &type metadata for AttributeScopes.CustomAttributes);
    atomic_store(result, (unint64_t *)&qword_256AE5A40);
  }
  return result;
}

unint64_t sub_23BF3FA4C()
{
  unint64_t result;

  result = qword_256AE5A48;
  if (!qword_256AE5A48)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for Symbol, &type metadata for Symbol);
    atomic_store(result, (unint64_t *)&qword_256AE5A48);
  }
  return result;
}

unint64_t sub_23BF3FA90()
{
  unint64_t result;

  result = qword_256AE5A50;
  if (!qword_256AE5A50)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for Symbol, &type metadata for Symbol);
    atomic_store(result, (unint64_t *)&qword_256AE5A50);
  }
  return result;
}

uint64_t sub_23BF3FAD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = sub_23BFF96A0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
}

void sub_23BF3FB10(uint64_t *a1@<X8>)
{
  *a1 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3728);
  swift_storeEnumTagMultiPayload();
  type metadata accessor for StandardHorizontalStackView();
}

uint64_t sub_23BF3FBE8(int *a1)
{
  uint64_t v1;
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  _QWORD *v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v9 = (_OWORD *)(v1 + a1[13]);
  v10 = v2[5];
  v9[4] = v2[4];
  v9[5] = v10;
  v11 = v2[3];
  v9[2] = v2[2];
  v9[3] = v11;
  v12 = v2[9];
  v9[8] = v2[8];
  v9[9] = v12;
  v13 = v2[7];
  v9[6] = v2[6];
  v9[7] = v13;
  v14 = v2[1];
  *v9 = *v2;
  v9[1] = v14;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(v1 + a1[14], v7, v3);
  v15 = (_QWORD *)(v1 + a1[15]);
  *v15 = v6;
  v15[1] = v25;
  v15[2] = v27;
  v15[3] = v28;
  v16 = (_QWORD *)(v1 + a1[16]);
  *v16 = v31;
  v16[1] = v33;
  v16[2] = v4;
  v16[3] = v5;
  v17 = v1 + a1[17];
  *(_OWORD *)v17 = v23;
  *(_QWORD *)(v17 + 16) = v24;
  *(_QWORD *)(v17 + 24) = v26;
  v18 = v1 + a1[18];
  *(_OWORD *)v18 = v29;
  *(_QWORD *)(v18 + 16) = v30;
  *(_QWORD *)(v18 + 24) = v32;
  v19 = v1 + a1[19];
  v20 = sub_23BFF96A0();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v19, v35, v20);
  v22 = (_QWORD *)(v1 + a1[20]);
  *v22 = v36;
  v22[1] = v34;
  return result;
}

double static StandardHorizontalStackViewLayout.default.getter@<D0>(_OWORD *a1@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  double result;
  __int128 v7;

  if (qword_256AE3378 != -1)
    swift_once();
  v2 = unk_256AE5AC8;
  a1[6] = xmmword_256AE5AB8;
  a1[7] = v2;
  v3 = xmmword_256AE5AE8;
  a1[8] = xmmword_256AE5AD8;
  a1[9] = v3;
  v4 = unk_256AE5A88;
  a1[2] = xmmword_256AE5A78;
  a1[3] = v4;
  v5 = *(_OWORD *)&qword_256AE5AA8;
  a1[4] = xmmword_256AE5A98;
  a1[5] = v5;
  result = *(double *)&xmmword_256AE5A58;
  v7 = *(_OWORD *)&qword_256AE5A68;
  *a1 = xmmword_256AE5A58;
  a1[1] = v7;
  return result;
}

double StandardHorizontalStackViewLayout.artworkAspectRatio.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

uint64_t StandardHorizontalStackViewLayout.artworkClipShape.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

double StandardHorizontalStackViewLayout.artworkContentSpacing.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

__n128 StandardHorizontalStackViewLayout.contentMargins.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 40);
  v3 = *(_OWORD *)(v1 + 56);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

double StandardHorizontalStackViewLayout.sectionDensity.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;
  uint64_t v3;

  result = *(double *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 88);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 72);
  *(double *)(a1 + 8) = result;
  *(_QWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t StandardHorizontalStackViewLayout.displaySeparator.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 96);
}

uint64_t StandardHorizontalStackViewLayout.titleLineLimit.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 104);
}

uint64_t StandardHorizontalStackViewLayout.subtitleLineLimit.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 112);
}

uint64_t StandardHorizontalStackViewLayout.captionLineLimit.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 120);
}

double StandardHorizontalStackViewLayout.artworkHeight.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 128);
}

uint64_t StandardHorizontalStackViewLayout.showChevron.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 136);
}

double StandardHorizontalStackViewLayout.interItemSpacing.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 144);
}

double StandardHorizontalStackViewLayout.artworkVerticalPadding.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 152);
}

__n128 StandardHorizontalStackViewLayout.init(artworkAspectRatio:artworkClipShape:artworkContentSpacing:contentMargins:displaySeparator:sectionDensity:titleLineLimit:subtitleLineLimit:captionLineLimit:artworkHeight:showChevron:interItemSpacing:artworkVerticalPadding:)@<Q0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, double a12@<D2>, double a13@<D3>, double a14@<D4>, double a15@<D5>, char a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 result;
  __int128 v20;

  v16 = *a5;
  v17 = a5[1];
  v18 = a5[2];
  *(double *)a9 = a10;
  *(double *)(a9 + 8) = a11;
  *(_QWORD *)(a9 + 16) = a1;
  *(_BYTE *)(a9 + 24) = a2 & 1;
  *(double *)(a9 + 32) = a12;
  result = *(__n128 *)a3;
  v20 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a9 + 40) = *(_OWORD *)a3;
  *(_OWORD *)(a9 + 56) = v20;
  *(_QWORD *)(a9 + 72) = v16;
  *(_QWORD *)(a9 + 80) = v17;
  *(_QWORD *)(a9 + 88) = v18;
  *(_BYTE *)(a9 + 96) = a4;
  *(_QWORD *)(a9 + 104) = a6;
  *(_QWORD *)(a9 + 112) = a7;
  *(_QWORD *)(a9 + 120) = a8;
  *(double *)(a9 + 128) = a13;
  *(_BYTE *)(a9 + 136) = a16;
  *(double *)(a9 + 144) = a14;
  *(double *)(a9 + 152) = a15;
  return result;
}

uint64_t sub_23BF3FE68(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_23BF3FEA4 + 4 * byte_23C000610[a1]))(0xD000000000000012, 0x800000023C01E950);
}

unint64_t sub_23BF3FEA4()
{
  return 0xD000000000000010;
}

void sub_23BF3FFB4()
{
  JUMPOUT(0x23BF3FFC0);
}

uint64_t sub_23BF3FFCC()
{
  unsigned __int8 *v0;

  return sub_23BF3FE68(*v0);
}

uint64_t sub_23BF3FFD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BF476BC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BF3FFF8()
{
  sub_23BF44A10();
  return sub_23BFF9A30();
}

uint64_t sub_23BF40020()
{
  sub_23BF44A10();
  return sub_23BFF9A3C();
}

double sub_23BF40048()
{
  double result;

  xmmword_256AE5A58 = xmmword_23C000A00;
  qword_256AE5A68 = 0x4020000000000000;
  byte_256AE5A70 = 0;
  result = 10.0;
  xmmword_256AE5A78 = xmmword_23C000A10;
  unk_256AE5A88 = xmmword_23C000A20;
  *(_QWORD *)&xmmword_256AE5A98 = 0x4034000000000000;
  *((_QWORD *)&xmmword_256AE5A98 + 1) = 2;
  qword_256AE5AA8 = 0x4024000000000000;
  unk_256AE5AB0 = 1;
  LOBYTE(xmmword_256AE5AB8) = 0;
  *(__int128 *)((char *)&xmmword_256AE5AB8 + 8) = (__int128)vdupq_n_s64(2uLL);
  qword_256AE5AD0 = 2;
  *(_QWORD *)&xmmword_256AE5AD8 = 0x405E000000000000;
  BYTE8(xmmword_256AE5AD8) = 1;
  xmmword_256AE5AE8 = xmmword_23C000A10;
  return result;
}

uint64_t StandardHorizontalStackViewLayout.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _DWORD v29[4];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  char v46;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5AF8);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v9 = v1[1];
  v40 = v1[2];
  LODWORD(v39) = *((unsigned __int8 *)v1 + 24);
  v10 = v1[5];
  v37 = v1[4];
  v38 = v10;
  v11 = v1[7];
  v36 = v1[6];
  v12 = v1[8];
  v13 = v1[9];
  v14 = v1[10];
  v34 = v1[11];
  v35 = v13;
  v45 = *((unsigned __int8 *)v1 + 96);
  v15 = v1[13];
  v32 = v1[14];
  v33 = v15;
  v31 = v1[15];
  v16 = v1[16];
  v17 = *((unsigned __int8 *)v1 + 136);
  v19 = v1[18];
  v18 = v1[19];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BF44A10();
  sub_23BFF9A18();
  v41 = v8;
  v42 = v9;
  v46 = 0;
  type metadata accessor for CGSize(0);
  sub_23BEA1BB8(&qword_256AE3468, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, MEMORY[0x24BDBD848]);
  sub_23BFF9940();
  if (v2)
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v20 = v37;
  v30 = v12;
  v21 = v11;
  v22 = v36;
  v23 = v38;
  v25 = v34;
  v24 = v35;
  v29[3] = v17;
  v26 = v5;
  v41 = v40;
  LOBYTE(v42) = v39;
  v46 = 1;
  sub_23BF44A54();
  sub_23BFF9940();
  v41 = v20;
  v46 = 2;
  v27 = sub_23BEBFC1C();
  sub_23BFF9940();
  v39 = v27;
  v40 = v26;
  v41 = v23;
  v42 = v22;
  v43 = v21;
  v44 = v30;
  v46 = 3;
  sub_23BF3CBE0();
  sub_23BFF9940();
  v41 = v24;
  v42 = v14;
  v43 = v25;
  v46 = 4;
  sub_23BF44A98();
  sub_23BFF9940();
  LOBYTE(v41) = 5;
  sub_23BFF991C();
  LOBYTE(v41) = 6;
  sub_23BFF9934();
  LOBYTE(v41) = 7;
  sub_23BFF9934();
  LOBYTE(v41) = 8;
  sub_23BFF9934();
  v41 = v16;
  v46 = 9;
  sub_23BFF9940();
  LOBYTE(v41) = 10;
  sub_23BFF991C();
  v41 = v19;
  v46 = 11;
  sub_23BFF9940();
  v41 = v18;
  v46 = 12;
  sub_23BFF9940();
  return (*(uint64_t (**)(char *, _QWORD))(v26 + 8))(v7, 0);
}

uint64_t StandardHorizontalStackViewLayout.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5B18);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BF44A10();
  sub_23BFF9A0C();
  if (!v2)
  {
    type metadata accessor for CGSize(0);
    v42 = 0;
    sub_23BEA1BB8(&qword_256AE3478, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, MEMORY[0x24BDBD860]);
    sub_23BFF98C8();
    v9 = v37;
    v10 = v38;
    v42 = 1;
    sub_23BF44ADC();
    sub_23BFF98C8();
    v36 = v37;
    v11 = v38;
    v42 = 2;
    v12 = sub_23BEC0384();
    sub_23BFF98C8();
    v35 = v12;
    v34 = v11;
    v13 = v37;
    v42 = 3;
    sub_23BF3CC68();
    sub_23BFF98C8();
    v14 = v37;
    v15 = v38;
    v16 = v39;
    v17 = v40;
    v42 = 4;
    sub_23BF44B20();
    sub_23BFF98C8();
    v18 = v37;
    v19 = v38;
    v20 = v39;
    LOBYTE(v37) = 5;
    v33 = sub_23BFF98A4();
    LOBYTE(v37) = 6;
    v32 = sub_23BFF98BC();
    LOBYTE(v37) = 7;
    v31 = sub_23BFF98BC();
    LOBYTE(v37) = 8;
    v30 = sub_23BFF98BC();
    v42 = 9;
    sub_23BFF98C8();
    v29 = v37;
    LOBYTE(v37) = 10;
    v28 = sub_23BFF98A4();
    v42 = 11;
    sub_23BFF98C8();
    v27 = v37;
    v42 = 12;
    sub_23BFF98C8();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v22 = v37;
    v23 = v33;
    v24 = v34;
    v41 = v34;
    v25 = v28 & 1;
    *(_QWORD *)a2 = v9;
    *(_QWORD *)(a2 + 8) = v10;
    *(_QWORD *)(a2 + 16) = v36;
    *(_BYTE *)(a2 + 24) = v24;
    *(_QWORD *)(a2 + 32) = v13;
    *(_QWORD *)(a2 + 40) = v14;
    *(_QWORD *)(a2 + 48) = v15;
    *(_QWORD *)(a2 + 56) = v16;
    *(_QWORD *)(a2 + 64) = v17;
    *(_QWORD *)(a2 + 72) = v18;
    *(_QWORD *)(a2 + 80) = v19;
    *(_QWORD *)(a2 + 88) = v20;
    *(_BYTE *)(a2 + 96) = v23 & 1;
    v26 = v31;
    *(_QWORD *)(a2 + 104) = v32;
    *(_QWORD *)(a2 + 112) = v26;
    *(_QWORD *)(a2 + 120) = v30;
    *(_QWORD *)(a2 + 128) = v29;
    *(_BYTE *)(a2 + 136) = v25;
    *(_QWORD *)(a2 + 144) = v27;
    *(_QWORD *)(a2 + 152) = v22;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_23BF409C0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return StandardHorizontalStackViewLayout.init(from:)(a1, a2);
}

uint64_t sub_23BF409D4(_QWORD *a1)
{
  return StandardHorizontalStackViewLayout.encode(to:)(a1);
}

uint64_t StandardHorizontalStackViewLayout.hash(into:)()
{
  uint64_t v0;
  char v1;

  v1 = *(_BYTE *)(v0 + 24);
  sub_23BEA0B6C();
  sub_23BFF99DC();
  if ((v1 & 1) == 0)
    sub_23BFF99F4();
  sub_23BFF99F4();
  sub_23BFF99F4();
  sub_23BFF99F4();
  sub_23BFF99F4();
  sub_23BFF99F4();
  sub_23BFF99DC();
  sub_23BFF99F4();
  sub_23BFF99DC();
  sub_23BFF99E8();
  sub_23BFF99DC();
  sub_23BFF99DC();
  sub_23BFF99DC();
  sub_23BFF99F4();
  sub_23BFF99E8();
  sub_23BFF99F4();
  return sub_23BFF99F4();
}

uint64_t StandardHorizontalStackViewLayout.hashValue.getter()
{
  sub_23BFF99D0();
  StandardHorizontalStackViewLayout.hash(into:)();
  return sub_23BFF9A00();
}

uint64_t sub_23BF40B8C()
{
  sub_23BFF99D0();
  StandardHorizontalStackViewLayout.hash(into:)();
  return sub_23BFF9A00();
}

uint64_t sub_23BF40BCC()
{
  sub_23BFF99D0();
  StandardHorizontalStackViewLayout.hash(into:)();
  return sub_23BFF9A00();
}

uint64_t sub_23BF40C08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t OpaqueTypeConformance2;
  void (*v59)(uint64_t, uint64_t);
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t);
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  _QWORD v120[2];
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD v125[2];
  _QWORD v126[2];
  _QWORD v127[2];
  _QWORD v128[2];
  _QWORD v129[2];

  v111 = a2;
  v95 = sub_23BFF90F4();
  v93 = *(_QWORD *)(v95 - 8);
  MEMORY[0x24BDAC7A8](v95);
  v91 = (char *)&v89 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5BD0);
  MEMORY[0x24BDAC7A8](v90);
  v94 = (char *)&v89 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5BD8);
  MEMORY[0x24BDAC7A8](v97);
  v96 = (uint64_t)&v89 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5BE0);
  v107 = *(_QWORD *)(v108 - 8);
  MEMORY[0x24BDAC7A8](v108);
  v92 = (char *)&v89 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5BE8);
  MEMORY[0x24BDAC7A8](v109);
  v110 = (uint64_t)&v89 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v105 = (char *)&v89 - v9;
  v104 = sub_23BFF8AA0();
  v103 = *(_QWORD *)(v104 - 8);
  MEMORY[0x24BDAC7A8](v104);
  v102 = (char *)&v89 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1;
  v101 = *(_QWORD *)(a1 + 16);
  v12 = sub_23BFF862C();
  v13 = sub_23BFF862C();
  v100 = *(_QWORD *)(v11 + 32);
  v14 = v11;
  v112 = v11;
  v129[0] = v100;
  v129[1] = MEMORY[0x24BDEEC40];
  v15 = MEMORY[0x24BDED308];
  v16 = MEMORY[0x242615198](MEMORY[0x24BDED308], v12, v129);
  v17 = sub_23BF3EAF8();
  v128[0] = v16;
  v128[1] = v17;
  v18 = MEMORY[0x242615198](v15, v13, v128);
  v121 = v13;
  v122 = v18;
  MEMORY[0x24261512C](255, &v121, MEMORY[0x24BDF30F0], 0);
  v19 = sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE5BF0);
  swift_getTupleTypeMetadata2();
  v20 = sub_23BFF9220();
  v21 = MEMORY[0x24BDF5428];
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v20);
  v22 = sub_23BFF9058();
  v121 = v13;
  v122 = v18;
  v127[0] = swift_getOpaqueTypeConformance2();
  v127[1] = MEMORY[0x24BDECC60];
  MEMORY[0x242615198](v15, v19, v127);
  sub_23BFF9058();
  swift_getTupleTypeMetadata2();
  v23 = sub_23BFF9220();
  MEMORY[0x242615198](v21, v23);
  v24 = sub_23BFF90AC();
  v25 = sub_23BFF8968();
  v26 = MEMORY[0x24BDF4498];
  v27 = MEMORY[0x242615198](MEMORY[0x24BDF4498], v22);
  v28 = MEMORY[0x24BDF4700];
  v29 = MEMORY[0x242615198](MEMORY[0x24BDF4700], v24);
  v126[0] = v27;
  v126[1] = v29;
  MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v25, v126);
  v30 = sub_23BFF90AC();
  MEMORY[0x242615198](v28, v30);
  v31 = sub_23BFF9040();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3538);
  v32 = sub_23BFF862C();
  v33 = sub_23BFF8680();
  v34 = (uint64_t (*)(uint64_t))MEMORY[0x24BDED868];
  v35 = MEMORY[0x242615198](MEMORY[0x24BDF43B0], v31);
  v36 = sub_23BEA1F94(&qword_256AE3540, &qword_256AE3538, MEMORY[0x24BDEFAD8]);
  v125[0] = v35;
  v125[1] = v36;
  v37 = MEMORY[0x242615198](v15, v32, v125);
  v38 = sub_23BEA1BB8(&qword_256AE3558, v34, MEMORY[0x24BDED858]);
  v121 = v32;
  v122 = v33;
  v123 = v37;
  v124 = v38;
  MEMORY[0x24261512C](255, &v121, MEMORY[0x24BDF22B8], 0);
  v39 = *(_QWORD *)(v14 + 24);
  swift_getTupleTypeMetadata2();
  sub_23BFF9220();
  sub_23BFF96A0();
  swift_getTupleTypeMetadata2();
  v40 = sub_23BFF9220();
  MEMORY[0x242615198](v21, v40);
  v41 = sub_23BFF9058();
  v98 = *(_QWORD *)(v41 - 8);
  v42 = MEMORY[0x24BDAC7A8](v41);
  v44 = (char *)&v89 - v43;
  v45 = MEMORY[0x242615198](v26, v41, v42);
  v121 = v41;
  v122 = v45;
  v46 = MEMORY[0x24261512C](0, &v121, MEMORY[0x24BDF2F10], 0);
  v47 = *(_QWORD *)(v46 - 8);
  MEMORY[0x24BDAC7A8](v46);
  v99 = (char *)&v89 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v49);
  v51 = (char *)&v89 - v50;
  MEMORY[0x24BDAC7A8](v52);
  v54 = (char *)&v89 - v53;
  v113 = v101;
  v114 = v39;
  v55 = *(_QWORD *)(v112 + 40);
  v115 = v100;
  v116 = v55;
  v56 = v106;
  v117 = v106;
  sub_23BFF8848();
  sub_23BFF904C();
  v57 = v102;
  sub_23BFF8A94();
  sub_23BFF8E18();
  (*(void (**)(char *, uint64_t))(v103 + 8))(v57, v104);
  (*(void (**)(char *, uint64_t))(v98 + 8))(v44, v41);
  v121 = v41;
  v122 = v45;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v104 = (uint64_t)v54;
  sub_23BEA72EC((uint64_t)v51, v46, (uint64_t)v54);
  v103 = v47;
  v59 = *(void (**)(uint64_t, uint64_t))(v47 + 8);
  v60 = v46;
  v61 = v59;
  v62 = v51;
  v63 = (uint64_t)v105;
  v59((uint64_t)v62, v60);
  v64 = 1;
  if (*(_BYTE *)(v56 + *(int *)(v112 + 52) + 96) == 1)
  {
    v65 = v91;
    sub_23BFF90E8();
    v66 = sub_23BFF8B9C();
    sub_23BFF83F8();
    v68 = v67;
    v70 = v69;
    v72 = v71;
    v74 = v73;
    v75 = v93;
    v76 = (uint64_t)v94;
    v77 = v95;
    (*(void (**)(char *, char *, uint64_t))(v93 + 16))(v94, v65, v95);
    v78 = v76 + *(int *)(v90 + 36);
    *(_BYTE *)v78 = v66;
    *(_QWORD *)(v78 + 8) = v68;
    *(_QWORD *)(v78 + 16) = v70;
    *(_QWORD *)(v78 + 24) = v72;
    *(_QWORD *)(v78 + 32) = v74;
    *(_BYTE *)(v78 + 40) = 0;
    (*(void (**)(char *, uint64_t))(v75 + 8))(v65, v77);
    v79 = sub_23BFF8650();
    LOBYTE(v77) = sub_23BFF8B60();
    v80 = OpaqueTypeConformance2;
    v81 = v96;
    sub_23BE9F190(v76, v96, &qword_256AE5BD0);
    v82 = v81 + *(int *)(v97 + 36);
    *(_QWORD *)v82 = v79;
    *(_BYTE *)(v82 + 8) = v77;
    sub_23BE9F3A0(v76, &qword_256AE5BD0);
    sub_23BF47528(&qword_256AE5C08, &qword_256AE5BD8, (uint64_t (*)(void))sub_23BF46F1C, MEMORY[0x24BDF1050]);
    v83 = (uint64_t)v92;
    sub_23BFF8E00();
    v84 = v81;
    OpaqueTypeConformance2 = v80;
    sub_23BE9F3A0(v84, &qword_256AE5BD8);
    sub_23BEC42E0(v83, v63, &qword_256AE5BE0);
    v64 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v107 + 56))(v63, v64, 1, v108);
  v85 = (uint64_t)v99;
  v86 = v104;
  (*(void (**)(char *, uint64_t, uint64_t))(v103 + 16))(v99, v104, v60);
  v121 = v85;
  v87 = v110;
  sub_23BE9F190(v63, v110, &qword_256AE5BE8);
  v122 = v87;
  v120[0] = v60;
  v120[1] = v109;
  v118 = OpaqueTypeConformance2;
  v119 = sub_23BF46E14();
  sub_23BF93EF0(&v121, 2uLL, (uint64_t)v120);
  sub_23BE9F3A0(v63, &qword_256AE5BE8);
  v61(v86, v60);
  sub_23BE9F3A0(v87, &qword_256AE5BE8);
  return ((uint64_t (*)(uint64_t, uint64_t))v61)(v85, v60);
}

void sub_23BF4161C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[27];
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v33 = a5;
  v23[21] = a2;
  v34 = a1;
  v32 = a6;
  v24 = sub_23BFF96A0();
  v26 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v25 = (char *)v23 - v10;
  v23[26] = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v23[3] = (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v23[2] = (char *)v23 - v14;
  MEMORY[0x24BDAC7A8](v15);
  v23[1] = (char *)v23 - v16;
  v23[22] = a3;
  swift_getTupleTypeMetadata2();
  v28 = sub_23BFF9220();
  v31 = sub_23BFF96A0();
  v27 = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  v30 = (char *)v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v29 = (char *)v23 - v19;
  v20 = sub_23BFF8680();
  v21 = *(_QWORD *)(v20 - 8);
  v23[7] = v20;
  v23[25] = v21;
  MEMORY[0x24BDAC7A8](v20);
  v23[24] = (char *)v23 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = a2;
  v36 = a3;
  v23[19] = a4;
  v37 = a4;
  v38 = a5;
  type metadata accessor for StandardHorizontalStackView();
}

uint64_t sub_23BF41858(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t OpaqueTypeConformance2;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t, uint64_t);
  uint64_t v81;
  void (*v82)(uint64_t, uint64_t, uint64_t);
  uint64_t v83;
  uint64_t v84;
  void (*v85)(uint64_t, uint64_t);
  void (*v86)(uint64_t, uint64_t, uint64_t);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _BYTE v91[96];

  *(_QWORD *)(v3 - 336) = a1;
  v4 = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v3 - 480) = *(_QWORD *)(v4 + 64);
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v3 - 496) = &v91[-v5];
  v6 = sub_23BFF862C();
  v7 = sub_23BFF862C();
  v8 = MEMORY[0x24BDEEC40];
  *(_QWORD *)(v3 - 136) = v1;
  *(_QWORD *)(v3 - 128) = v8;
  v9 = MEMORY[0x24BDED308];
  v10 = MEMORY[0x242615198](MEMORY[0x24BDED308], v6, v3 - 136);
  v11 = sub_23BF3EAF8();
  *(_QWORD *)(v3 - 152) = v10;
  *(_QWORD *)(v3 - 144) = v11;
  v12 = MEMORY[0x242615198](v9, v7, v3 - 152);
  *(_QWORD *)(v3 - 120) = v7;
  *(_QWORD *)(v3 - 112) = v12;
  MEMORY[0x24261512C](255, v3 - 120, MEMORY[0x24BDF30F0], 0);
  v13 = sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE5BF0);
  swift_getTupleTypeMetadata2();
  v14 = sub_23BFF9220();
  v15 = MEMORY[0x24BDF5428];
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v14);
  v16 = sub_23BFF9058();
  *(_QWORD *)(v3 - 120) = v7;
  *(_QWORD *)(v3 - 112) = v12;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v18 = MEMORY[0x24BDECC60];
  *(_QWORD *)(v3 - 168) = OpaqueTypeConformance2;
  *(_QWORD *)(v3 - 160) = v18;
  MEMORY[0x242615198](v9, v13, v3 - 168);
  sub_23BFF9058();
  swift_getTupleTypeMetadata2();
  v19 = sub_23BFF9220();
  MEMORY[0x242615198](v15, v19);
  v20 = sub_23BFF90AC();
  v21 = sub_23BFF8968();
  v22 = MEMORY[0x242615198](MEMORY[0x24BDF4498], v16);
  v23 = MEMORY[0x24BDF4700];
  v24 = MEMORY[0x242615198](MEMORY[0x24BDF4700], v20);
  *(_QWORD *)(v3 - 184) = v22;
  *(_QWORD *)(v3 - 176) = v24;
  MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v21, v3 - 184);
  v25 = sub_23BFF90AC();
  *(_QWORD *)(v3 - 528) = v25;
  *(_QWORD *)(v3 - 520) = MEMORY[0x242615198](v23, v25);
  v26 = sub_23BFF9040();
  *(_QWORD *)(v3 - 512) = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  *(_QWORD *)(v3 - 536) = &v91[-v27];
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3538);
  *(_QWORD *)(v3 - 560) = v26;
  v28 = sub_23BFF862C();
  *(_QWORD *)(v3 - 504) = *(_QWORD *)(v28 - 8);
  *(_QWORD *)(v3 - 576) = v28;
  v29 = MEMORY[0x24BDAC7A8](v28);
  *(_QWORD *)(v3 - 552) = &v91[-v30];
  v31 = MEMORY[0x242615198](MEMORY[0x24BDF43B0], v26, v29);
  *(_QWORD *)(v3 - 568) = v31;
  v32 = sub_23BEA1F94(&qword_256AE3540, &qword_256AE3538, MEMORY[0x24BDEFAD8]);
  *(_QWORD *)(v3 - 200) = v31;
  *(_QWORD *)(v3 - 192) = v32;
  v33 = MEMORY[0x242615198](v9, v28, v3 - 200);
  *(_QWORD *)(v3 - 592) = v33;
  v34 = sub_23BEA1BB8(&qword_256AE3558, (uint64_t (*)(uint64_t))MEMORY[0x24BDED868], MEMORY[0x24BDED858]);
  *(_QWORD *)(v3 - 600) = v34;
  *(_QWORD *)(v3 - 120) = v28;
  *(_QWORD *)(v3 - 112) = v2;
  *(_QWORD *)(v3 - 104) = v33;
  *(_QWORD *)(v3 - 96) = v34;
  v35 = MEMORY[0x24261512C](0, v3 - 120, MEMORY[0x24BDF22B8], 0);
  *(_QWORD *)(v3 - 544) = *(_QWORD *)(v35 - 8);
  MEMORY[0x24BDAC7A8](v35);
  *(_QWORD *)(v3 - 456) = &v91[-((v36 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v37);
  *(_QWORD *)(v3 - 608) = &v91[-v38];
  v40 = MEMORY[0x24BDAC7A8](v39);
  *(_QWORD *)(v3 - 344) = &v91[-v41];
  v42 = v4;
  v43 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v4 + 16);
  v44 = *(_QWORD *)(v3 - 496);
  v45 = *(_QWORD *)(v3 - 328);
  v46 = *(_QWORD *)(v3 - 336);
  v43(v44, v45, v46, v40);
  v47 = (*(unsigned __int8 *)(v42 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80);
  v48 = (_QWORD *)swift_allocObject();
  v49 = *(_QWORD *)(v3 - 472);
  v50 = *(_QWORD *)(v3 - 464);
  v48[2] = v49;
  v48[3] = v50;
  v51 = *(_QWORD *)(v3 - 488);
  v52 = *(_QWORD *)(v3 - 352);
  v48[4] = v51;
  v48[5] = v52;
  v53 = (char *)v48 + v47;
  v54 = v52;
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 32))(v53, v44, v46);
  *(_QWORD *)(v3 - 304) = v49;
  *(_QWORD *)(v3 - 296) = v50;
  *(_QWORD *)(v3 - 288) = v51;
  v55 = v35;
  *(_QWORD *)(v3 - 280) = v54;
  *(_QWORD *)(v3 - 272) = v45;
  v56 = *(_QWORD *)(v3 - 536);
  sub_23BFF9034();
  sub_23BEA1D38();
  v57 = *(_QWORD *)(v3 - 552);
  v58 = *(_QWORD *)(v3 - 560);
  sub_23BFF8D4C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 512) + 8))(v56, v58);
  v59 = *(_QWORD *)(v3 - 448);
  sub_23BFF8674();
  v60 = *(_QWORD *)(v3 - 608);
  v61 = *(_QWORD *)(v3 - 576);
  v62 = *(_QWORD *)(v3 - 584);
  v63 = *(_QWORD *)(v3 - 592);
  v64 = *(_QWORD *)(v3 - 600);
  sub_23BFF8CF8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 440) + 8))(v59, v62);
  v65 = v50;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 504) + 8))(v57, v61);
  *(_QWORD *)(v3 - 120) = v61;
  *(_QWORD *)(v3 - 112) = v62;
  *(_QWORD *)(v3 - 104) = v63;
  *(_QWORD *)(v3 - 96) = v64;
  v66 = *(_QWORD *)(v3 - 416);
  v67 = swift_getOpaqueTypeConformance2();
  v68 = *(_QWORD *)(v3 - 344);
  *(_QWORD *)(v3 - 440) = v67;
  sub_23BEA72EC(v60, v55, v68);
  v69 = *(_QWORD *)(v3 - 544);
  v70 = *(void (**)(uint64_t, uint64_t))(v69 + 8);
  v71 = *(_QWORD *)(v3 - 408);
  *(_QWORD *)(v3 - 448) = v55;
  v70(v60, v55);
  v72 = *(_QWORD *)(v3 - 424);
  (*(void (**)(uint64_t, _QWORD))(v71 + 16))(v66, *(_QWORD *)(v3 - 328) + *(int *)(*(_QWORD *)(v3 - 336) + 76));
  v73 = *(_QWORD *)(v3 - 432);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v73 + 48))(v66, 1, v65) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v66, v72);
    v74 = *(_QWORD *)(v3 - 392);
    v75 = *(_QWORD *)(v3 - 376);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 56))(v75, 1, 1, v74);
  }
  else
  {
    v76 = *(_QWORD *)(v3 - 632);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v73 + 32))(v76, v66, v65);
    v77 = *(_QWORD *)(v3 - 624);
    v78 = *(_QWORD *)(v3 - 352);
    sub_23BEA72EC(v76, v65, v77);
    *(_QWORD *)(v3 - 256) = 0;
    *(_BYTE *)(v3 - 248) = 1;
    *(_QWORD *)(v3 - 120) = v3 - 256;
    v79 = *(_QWORD *)(v3 - 616);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v73 + 16))(v79, v77, v65);
    *(_QWORD *)(v3 - 112) = v79;
    *(_QWORD *)(v3 - 216) = MEMORY[0x24BDF4638];
    *(_QWORD *)(v3 - 208) = v65;
    *(_QWORD *)(v3 - 232) = MEMORY[0x24BDF4610];
    *(_QWORD *)(v3 - 224) = v78;
    v75 = *(_QWORD *)(v3 - 376);
    sub_23BF93EF0((uint64_t *)(v3 - 120), 2uLL, v3 - 216);
    v80 = *(void (**)(uint64_t, uint64_t))(v73 + 8);
    v80(v77, v65);
    v80(v76, v65);
    v80(v79, v65);
    v74 = *(_QWORD *)(v3 - 392);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 56))(v75, 0, 1, v74);
  }
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v74);
  v81 = *(_QWORD *)(v3 - 400);
  v82 = *(void (**)(uint64_t, uint64_t, uint64_t))(v81 + 16);
  v83 = *(_QWORD *)(v3 - 384);
  v84 = *(_QWORD *)(v3 - 368);
  v82(v83, v75, v84);
  v85 = *(void (**)(uint64_t, uint64_t))(v81 + 8);
  v85(v75, v84);
  v86 = *(void (**)(uint64_t, uint64_t, uint64_t))(v69 + 16);
  v87 = *(_QWORD *)(v3 - 456);
  v88 = *(_QWORD *)(v3 - 344);
  v89 = *(_QWORD *)(v3 - 448);
  v86(v87, v88, v89);
  *(_QWORD *)(v3 - 120) = v87;
  v82(v75, v83, v84);
  *(_QWORD *)(v3 - 112) = v75;
  *(_QWORD *)(v3 - 216) = v89;
  *(_QWORD *)(v3 - 208) = v84;
  *(_QWORD *)(v3 - 232) = *(_QWORD *)(v3 - 440);
  *(_QWORD *)(v3 - 240) = MEMORY[0x242615198](MEMORY[0x24BDF5428], v74);
  *(_QWORD *)(v3 - 224) = MEMORY[0x242615198](MEMORY[0x24BDF5578], v84, v3 - 240);
  sub_23BF93EF0((uint64_t *)(v3 - 120), 2uLL, v3 - 216);
  v85(v83, v84);
  v70(v88, v89);
  v85(v75, v84);
  return ((uint64_t (*)(uint64_t, uint64_t))v70)(v87, v89);
}

uint64_t sub_23BF42194@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  void (*v28)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[2];
  _QWORD v40[2];
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[2];
  _QWORD v44[3];

  v31 = a1;
  v32 = a5;
  v30 = a3;
  v33 = a6;
  v8 = sub_23BFF862C();
  v9 = sub_23BFF862C();
  v44[0] = a4;
  v44[1] = MEMORY[0x24BDEEC40];
  v10 = MEMORY[0x24BDED308];
  v43[0] = MEMORY[0x242615198](MEMORY[0x24BDED308], v8, v44);
  v43[1] = sub_23BF3EAF8();
  v11 = MEMORY[0x242615198](v10, v9, v43);
  v41 = v9;
  v42 = v11;
  MEMORY[0x24261512C](255, &v41, MEMORY[0x24BDF30F0], 0);
  v12 = sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE5BF0);
  swift_getTupleTypeMetadata2();
  v13 = sub_23BFF9220();
  v14 = MEMORY[0x24BDF5428];
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v13);
  v15 = sub_23BFF9058();
  v41 = v9;
  v42 = v11;
  v40[0] = swift_getOpaqueTypeConformance2();
  v40[1] = MEMORY[0x24BDECC60];
  MEMORY[0x242615198](v10, v12, v40);
  sub_23BFF9058();
  swift_getTupleTypeMetadata2();
  v16 = sub_23BFF9220();
  MEMORY[0x242615198](v14, v16);
  v17 = sub_23BFF90AC();
  v18 = sub_23BFF8968();
  v19 = MEMORY[0x242615198](MEMORY[0x24BDF4498], v15);
  v20 = MEMORY[0x24BDF4700];
  v39[0] = v19;
  v39[1] = MEMORY[0x242615198](MEMORY[0x24BDF4700], v17);
  MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v18, v39);
  v21 = sub_23BFF90AC();
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v30 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)&v30 - v26;
  sub_23BFF88A8();
  v34 = a2;
  v35 = v30;
  v36 = a4;
  v37 = v32;
  v38 = v31;
  sub_23BFF90A0();
  MEMORY[0x242615198](v20, v21);
  sub_23BEA72EC((uint64_t)v24, v21, (uint64_t)v27);
  v28 = *(void (**)(char *, uint64_t))(v22 + 8);
  v28(v24, v21);
  sub_23BEA5C0C((uint64_t)v27, v21, v33);
  return ((uint64_t (*)(char *, uint64_t))v28)(v27, v21);
}

void sub_23BF424C0()
{
  type metadata accessor for StandardHorizontalStackView();
}

uint64_t sub_23BF42508(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t OpaqueTypeConformance2;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(_BYTE *, uint64_t);
  _BYTE v44[96];

  *(_QWORD *)(v3 - 264) = a1;
  v4 = *(_QWORD *)(a1 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  *(_QWORD *)(v3 - 232) = v4;
  *(_QWORD *)(v3 - 224) = v5;
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v3 - 240) = &v44[-v6];
  v7 = *(_QWORD *)(v2 - 8);
  *(_QWORD *)(v3 - 304) = v7;
  MEMORY[0x24BDAC7A8](v8);
  *(_QWORD *)(v3 - 256) = &v44[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = sub_23BFF862C();
  v11 = sub_23BFF862C();
  v12 = MEMORY[0x24BDEEC40];
  *(_QWORD *)(v3 - 136) = v1;
  *(_QWORD *)(v3 - 128) = v12;
  v13 = MEMORY[0x24BDED308];
  v14 = MEMORY[0x242615198](MEMORY[0x24BDED308], v10, v3 - 136);
  v15 = sub_23BF3EAF8();
  *(_QWORD *)(v3 - 152) = v14;
  *(_QWORD *)(v3 - 144) = v15;
  v16 = MEMORY[0x242615198](v13, v11, v3 - 152);
  *(_QWORD *)(v3 - 120) = v11;
  *(_QWORD *)(v3 - 112) = v16;
  MEMORY[0x24261512C](255, v3 - 120, MEMORY[0x24BDF30F0], 0);
  v17 = sub_23BFF862C();
  *(_QWORD *)(v3 - 280) = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE5BF0);
  swift_getTupleTypeMetadata2();
  v18 = sub_23BFF9220();
  v19 = MEMORY[0x24BDF5428];
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v18);
  *(_QWORD *)(v3 - 296) = sub_23BFF9058();
  *(_QWORD *)(v3 - 120) = v11;
  *(_QWORD *)(v3 - 112) = v16;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v21 = MEMORY[0x24BDECC60];
  *(_QWORD *)(v3 - 168) = OpaqueTypeConformance2;
  *(_QWORD *)(v3 - 160) = v21;
  MEMORY[0x242615198](v13, v17, v3 - 168);
  sub_23BFF9058();
  swift_getTupleTypeMetadata2();
  v22 = sub_23BFF9220();
  MEMORY[0x242615198](v19, v22);
  *(_QWORD *)(v3 - 288) = sub_23BFF90AC();
  v23 = sub_23BFF8968();
  *(_QWORD *)(v3 - 272) = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v25 = &v44[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v27 = MEMORY[0x24BDAC7A8](v26);
  v29 = &v44[-v28];
  v30 = *(_QWORD *)(v3 - 264);
  v31 = *(_QWORD *)(v3 - 192);
  v32 = *(_QWORD *)(v3 - 256);
  (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v7 + 16))(v32, v31 + *(int *)(v30 + 56), v2, v27);
  v34 = *(_QWORD *)(v3 - 240);
  v33 = *(_QWORD *)(v3 - 232);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16))(v34, v31, v30);
  v35 = (*(unsigned __int8 *)(v33 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
  v36 = (char *)swift_allocObject();
  v37 = *(_QWORD *)(v3 - 216);
  *((_QWORD *)v36 + 2) = v2;
  *((_QWORD *)v36 + 3) = v37;
  v38 = *(_QWORD *)(v3 - 208);
  *((_QWORD *)v36 + 4) = *(_QWORD *)(v3 - 248);
  *((_QWORD *)v36 + 5) = v38;
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 32))(&v36[v35], v34, v30);
  v39 = sub_23BEA1F94(&qword_256AE5C18, &qword_256AE5BF0, MEMORY[0x24BDF5428]);
  sub_23BF43388(v32, (uint64_t)sub_23BF46FD8, (uint64_t)v36, v30, *(_QWORD *)(v3 - 280), v39, (uint64_t)v25);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 304) + 8))(v32, v2);
  v40 = MEMORY[0x242615198](MEMORY[0x24BDF4498], *(_QWORD *)(v3 - 296));
  v41 = MEMORY[0x242615198](MEMORY[0x24BDF4700], *(_QWORD *)(v3 - 288));
  *(_QWORD *)(v3 - 184) = v40;
  *(_QWORD *)(v3 - 176) = v41;
  MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v23, v3 - 184);
  sub_23BEA72EC((uint64_t)v25, v23, (uint64_t)v29);
  v42 = *(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v3 - 272) + 8);
  v42(v25, v23);
  sub_23BEA5C0C((uint64_t)v29, v23, *(_QWORD *)(v3 - 200));
  return ((uint64_t (*)(_BYTE *, uint64_t))v42)(v29, v23);
}

void sub_23BF42934(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v22 = a4;
  v20 = a5;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5C20);
  v16 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v15 = &v12[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5C28);
  MEMORY[0x24BDAC7A8](v13);
  v17 = &v12[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5C30);
  v21 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v14 = &v12[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v23 = a1;
  v24 = a2;
  v25 = a3;
  v26 = a4;
  type metadata accessor for StandardHorizontalStackView();
}

void sub_23BF42A58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  MEMORY[0x24BDAC7A8](a1);
  v9[9] = (char *)&a9 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v9 = v12;
  MEMORY[0x24BDAC7A8](v13);
  v9[16] = (char *)&a9 - v14;
  v15 = sub_23BFF96A0();
  v9[14] = *(_QWORD *)(v15 - 8);
  v9[15] = v15;
  MEMORY[0x24BDAC7A8](v15);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5C38);
  MEMORY[0x24BDAC7A8](v16);
  v9[10] = (char *)&a9 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v9[17] = (char *)&a9 - v19;
  v9[13] = sub_23BFF88A8();
  v9[1] = v10;
  v9[2] = v11;
  sub_23BF42F84();
}

uint64_t sub_23BF42B6C()
{
  uint64_t v0;
  uint64_t v1;
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  char v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t KeyPath;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v8 = *(_OWORD *)(v0 + 1056);
  *(_OWORD *)((char *)v2 + 71) = *(_OWORD *)(v0 + 1040);
  v9 = *(_OWORD *)(v0 + 1008);
  *(_OWORD *)((char *)v2 + 55) = *(_OWORD *)(v0 + 1024);
  v10 = *(_OWORD *)(v0 + 1072);
  *(_OWORD *)((char *)v2 + 119) = *(_OWORD *)(v0 + 1088);
  v11 = *(_OWORD *)(v0 + 1120);
  *(_OWORD *)((char *)v2 + 135) = *(_OWORD *)(v0 + 1104);
  *(_OWORD *)((char *)v2 + 151) = v11;
  *(_BYTE *)(v0 + 1311) = *(_BYTE *)(v0 + 1136);
  *(_OWORD *)((char *)v2 + 87) = v8;
  *(_OWORD *)((char *)v2 + 103) = v10;
  v12 = *(_OWORD *)(v0 + 992);
  *(_OWORD *)((char *)v2 + 7) = *(_OWORD *)(v0 + 976);
  *(_OWORD *)((char *)v2 + 23) = v12;
  *(_OWORD *)((char *)v2 + 39) = v9;
  v13 = v2[6];
  *(_OWORD *)(v6 + 129) = v2[7];
  v14 = v2[9];
  *(_OWORD *)(v6 + 145) = v2[8];
  *(_OWORD *)(v6 + 161) = v14;
  v15 = v2[2];
  *(_OWORD *)(v6 + 65) = v2[3];
  v16 = v2[5];
  *(_OWORD *)(v6 + 81) = v2[4];
  *(_OWORD *)(v6 + 97) = v16;
  *(_OWORD *)(v6 + 113) = v13;
  v17 = v2[1];
  *(_OWORD *)(v6 + 17) = *v2;
  *(_OWORD *)(v6 + 33) = v17;
  *(_BYTE *)(v0 + 1312) = 0;
  *(_QWORD *)(v0 + 784) = *(_QWORD *)(v0 + 104);
  *(_QWORD *)(v0 + 792) = 0;
  *(_BYTE *)(v0 + 800) = 0;
  *(_QWORD *)(v6 + 177) = *(_QWORD *)(v0 + 1304);
  *(_OWORD *)(v6 + 49) = v15;
  sub_23BFF91CC();
  sub_23BF947D8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (_OWORD *)(v0 + 1320), 0.0, 1, 0.0, 1);
  sub_23BF470B4((uint64_t *)(v0 + 976));
  v18 = v4;
  v19 = v4 + *(int *)(v5 + 76);
  v21 = *(_QWORD *)(v0 + 112);
  v20 = *(_QWORD *)(v0 + 120);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v3, v19, v20);
  v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v3, 1, v7);
  v23 = v3;
  v24 = *(_QWORD *)(v0 + 128);
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v23, v20);
  v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16);
  v25(v24, v18, v5);
  if (v22 == 1)
  {
    v26 = *(_QWORD *)(v0 + 72);
    v27 = *(_BYTE *)(v24 + *(int *)(v5 + 52) + 136);
    (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v24, v5);
    v28 = *(_QWORD *)(v0 + 88);
    v29 = *(void **)(v0 + 96);
    v30 = *(_QWORD *)(v0 + 144);
    v31 = *(_QWORD *)(v0 + 80);
    if ((v27 & 1) != 0)
    {
      v32 = v18;
      v33 = *(_QWORD *)(v0 + 88);
      v25(v26, v32, v5);
      v34 = v1;
      v35 = (*(unsigned __int8 *)(v1 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
      v36 = (char *)swift_allocObject();
      *((_QWORD *)v36 + 2) = *(_QWORD *)(v0 + 8);
      *((_QWORD *)v36 + 3) = v7;
      v37 = *(_QWORD *)(v0 + 152);
      *((_QWORD *)v36 + 4) = *(_QWORD *)(v0 + 16);
      *((_QWORD *)v36 + 5) = v37;
      (*(void (**)(char *, uint64_t, uint64_t))(v34 + 32))(&v36[v35], v26, v5);
      __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5C48);
      sub_23BF47528(&qword_256AE5C50, &qword_256AE5C48, (uint64_t (*)(void))sub_23BF47590, MEMORY[0x24BDEDBB8]);
      v38 = *(_QWORD *)(v0 + 40);
      sub_23BFF9034();
      v39 = *(_QWORD *)(v0 + 48);
      v40 = *(_QWORD *)(v0 + 56);
      v41 = *(_QWORD *)(v0 + 64);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v40, v38, v41);
      *(_BYTE *)(v40 + *(int *)(*(_QWORD *)(v0 + 24) + 36)) = 0;
      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v38, v41);
      v42 = sub_23BFF8FB0();
      KeyPath = swift_getKeyPath();
      v44 = *(_QWORD *)(v0 + 32);
      sub_23BE9F190(v40, v44, &qword_256AE5C28);
      v45 = (uint64_t *)(v44 + *(int *)(v33 + 36));
      *v45 = KeyPath;
      v45[1] = v42;
      sub_23BE9F3A0(v40, &qword_256AE5C28);
      v46 = *(_QWORD *)(v0 + 136);
      sub_23BEC42E0(v44, v46, &qword_256AE5C30);
      v30 = *(_QWORD *)(v0 + 144);
      v47 = 0;
      v28 = v33;
    }
    else
    {
      v47 = 1;
      v46 = *(_QWORD *)(v0 + 136);
    }
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v24, v5);
    v47 = 1;
    v28 = *(_QWORD *)(v0 + 88);
    v29 = *(void **)(v0 + 96);
    v46 = *(_QWORD *)(v0 + 136);
    v30 = *(_QWORD *)(v0 + 144);
    v31 = *(_QWORD *)(v0 + 80);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56))(v46, v47, 1, v28);
  sub_23BE9F190(v46, v31, &qword_256AE5C38);
  memcpy((void *)(v0 + 160), (const void *)(v0 + 1320), 0x130uLL);
  *(_BYTE *)(v0 + 464) = 0;
  memcpy(v29, (const void *)(v0 + 160), 0x131uLL);
  v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5C40);
  sub_23BE9F190(v31, (uint64_t)v29 + *(int *)(v48 + 48), &qword_256AE5C38);
  sub_23BF471F8(v0 + 160, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_23BF471BC);
  sub_23BE9F3A0(v46, &qword_256AE5C38);
  sub_23BE9F3A0(v31, &qword_256AE5C38);
  memcpy((void *)(v0 + 472), (const void *)(v0 + 1320), 0x130uLL);
  *(_BYTE *)(v0 + 776) = 0;
  return sub_23BF471F8(v0 + 472, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_23BF47180);
}

void sub_23BF42F84()
{
  type metadata accessor for StandardHorizontalStackView();
}

uint64_t sub_23BF42FC0(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t KeyPath;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v5 = (uint64_t *)(v1 + a1[17]);
  v6 = *v5;
  v7 = v5[1];
  v8 = v5[2];
  v43 = v5[3];
  v37 = v8;
  if (v43)
  {
    *(_QWORD *)(v3 - 144) = v8 & 1;
    *(_QWORD *)(v3 - 128) = *(_QWORD *)(v1 + a1[13] + 120);
    *(_QWORD *)(v3 - 136) = swift_getKeyPath();
    v9 = v6;
    v10 = v7;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    *(_QWORD *)(v3 - 144) = 0;
    *(_QWORD *)(v3 - 136) = 0;
    *(_QWORD *)(v3 - 128) = 0;
  }
  v11 = (uint64_t *)(v1 + a1[15]);
  v12 = *v11;
  v40 = v11[1];
  v13 = v11[2];
  v33 = v11[3];
  v34 = *v11;
  v32 = v13;
  if (v33)
  {
    v44 = v13 & 1;
    v36 = *(_QWORD *)(v1 + a1[13] + 104);
    KeyPath = swift_getKeyPath();
    v14 = v40;
  }
  else
  {
    v12 = 0;
    v14 = 0;
    v44 = 0;
    KeyPath = 0;
    v36 = 0;
  }
  v38 = v7;
  v39 = v6;
  v15 = (uint64_t *)(v1 + a1[16]);
  v16 = *v15;
  v17 = v15[1];
  v18 = v15[2];
  v19 = v15[3];
  v30 = v17;
  v31 = v18;
  v29 = *v15;
  if (v19)
  {
    v41 = *(_QWORD *)(v1 + a1[13] + 112);
    v42 = v18 & 1;
    v20 = swift_getKeyPath();
    v21 = v16;
  }
  else
  {
    v21 = 0;
    v17 = 0;
    v41 = 0;
    v42 = 0;
    v20 = 0;
  }
  *(_QWORD *)v2 = v9;
  *(_QWORD *)(v2 + 8) = v10;
  v22 = *(_QWORD *)(v3 - 144);
  *(_QWORD *)(v2 + 16) = v22;
  v23 = v22;
  *(_QWORD *)(v3 - 144) = v22;
  *(_QWORD *)(v2 + 24) = v43;
  v24 = *(_QWORD *)(v3 - 136);
  *(_QWORD *)(v2 + 32) = v24;
  *(_QWORD *)(v3 - 136) = v24;
  v25 = *(_QWORD *)(v3 - 128);
  *(_QWORD *)(v2 + 40) = v25;
  *(_QWORD *)(v3 - 128) = v25;
  *(_BYTE *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = v12;
  *(_QWORD *)(v2 + 64) = v14;
  *(_QWORD *)(v2 + 72) = v44;
  *(_QWORD *)(v2 + 80) = v33;
  *(_QWORD *)(v2 + 88) = KeyPath;
  *(_QWORD *)(v2 + 96) = v36;
  *(_BYTE *)(v2 + 104) = 0;
  *(_QWORD *)(v2 + 112) = v21;
  *(_QWORD *)(v2 + 120) = v17;
  *(_QWORD *)(v2 + 128) = v42;
  *(_QWORD *)(v2 + 136) = v19;
  *(_QWORD *)(v2 + 144) = v20;
  *(_QWORD *)(v2 + 152) = v41;
  *(_BYTE *)(v2 + 160) = 0;
  v26 = v19;
  v27 = v21;
  sub_23BF471BC(v9, v10, v23, v43);
  sub_23BF471BC(v12, v14, v44, v33);
  sub_23BF471BC(v27, v17, v42, v26);
  sub_23BEA1DC0(v39, v38, v37, v43);
  sub_23BEA1DC0(v34, v40, v32, v33);
  sub_23BEA1DC0(v29, v30, v31, v26);
  sub_23BF47180(v27, v17, v42, v26);
  sub_23BF47180(v12, v14, v44, v33);
  return sub_23BF47180(v9, v10, *(_QWORD *)(v3 - 144), v43);
}

__n128 sub_23BF43274@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  _OWORD v11[8];
  uint64_t v12;

  v2 = sub_23BFF8FE0();
  v3 = sub_23BFF8BFC();
  KeyPath = swift_getKeyPath();
  v5 = sub_23BFF91D8();
  sub_23BF949A4(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, (uint64_t)v11, 0.0, 1, INFINITY, 0, v5, v6, v2, KeyPath, v3);
  swift_release();
  swift_release();
  swift_release();
  v7 = v11[7];
  *(_OWORD *)(a1 + 96) = v11[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_QWORD *)(a1 + 128) = v12;
  v8 = v11[3];
  *(_OWORD *)(a1 + 32) = v11[2];
  *(_OWORD *)(a1 + 48) = v8;
  v9 = v11[5];
  *(_OWORD *)(a1 + 64) = v11[4];
  *(_OWORD *)(a1 + 80) = v9;
  result = (__n128)v11[1];
  *(_OWORD *)a1 = v11[0];
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t sub_23BF43388@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD v62[3];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD v81[2];
  _QWORD v82[2];
  uint64_t v83;
  uint64_t v84;
  _QWORD v85[2];
  _QWORD v86[3];

  v77 = a6;
  v78 = a2;
  v79 = a3;
  v80 = a7;
  v76 = a1;
  v73 = *(_QWORD *)(a4 + 16);
  v10 = sub_23BFF862C();
  v11 = sub_23BFF862C();
  v75 = a4;
  v72 = *(_QWORD *)(a4 + 32);
  v86[0] = v72;
  v86[1] = MEMORY[0x24BDEEC40];
  v12 = MEMORY[0x24BDED308];
  v85[0] = MEMORY[0x242615198](MEMORY[0x24BDED308], v10, v86);
  v85[1] = sub_23BF3EAF8();
  v13 = MEMORY[0x242615198](v12, v11, v85);
  v83 = v11;
  v84 = v13;
  MEMORY[0x24261512C](255, &v83, MEMORY[0x24BDF30F0], 0);
  v14 = sub_23BFF862C();
  v83 = v11;
  v84 = v13;
  v82[0] = swift_getOpaqueTypeConformance2();
  v82[1] = MEMORY[0x24BDECC60];
  MEMORY[0x242615198](v12, v14, v82);
  sub_23BFF9058();
  swift_getTupleTypeMetadata2();
  v15 = sub_23BFF9220();
  v16 = MEMORY[0x24BDF5428];
  v66 = v15;
  v65 = MEMORY[0x242615198](MEMORY[0x24BDF5428], v15);
  v17 = sub_23BFF90AC();
  v67 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)v62 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v68 = (uint64_t)v62 - v21;
  v74 = a5;
  swift_getTupleTypeMetadata2();
  v22 = sub_23BFF9220();
  v23 = MEMORY[0x242615198](v16, v22);
  v62[2] = v22;
  v62[1] = v23;
  v24 = sub_23BFF9058();
  v63 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)v62 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v27);
  v64 = (uint64_t)v62 - v28;
  v29 = sub_23BFF85F0();
  v30 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v32 = (char *)v62 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v33);
  v35 = (char *)v62 - v34;
  v36 = sub_23BFF8968();
  v70 = *(_QWORD *)(v36 - 8);
  v71 = v36;
  MEMORY[0x24BDAC7A8](v36);
  v69 = (char *)v62 - v37;
  sub_23BFCC4C4((uint64_t)v35);
  (*(void (**)(char *, _QWORD, uint64_t))(v30 + 104))(v32, *MEMORY[0x24BDECEA0], v29);
  LOBYTE(a5) = sub_23BFF85E4();
  v38 = *(void (**)(char *, uint64_t))(v30 + 8);
  v38(v32, v29);
  v39 = ((uint64_t (*)(char *, uint64_t))v38)(v35, v29);
  if ((a5 & 1) != 0)
  {
    MEMORY[0x24BDAC7A8](v39);
    v41 = *(_QWORD *)(v40 + 24);
    v62[-10] = v73;
    v62[-9] = v41;
    v42 = v72;
    v62[-8] = v74;
    v62[-7] = v42;
    v43 = v77;
    v62[-6] = *(_QWORD *)(v40 + 40);
    v62[-5] = v43;
    v62[-4] = v76;
    v62[-3] = v7;
    v44 = v79;
    v62[-2] = v78;
    v62[-1] = v44;
    sub_23BFF8848();
    sub_23BFF904C();
    MEMORY[0x242615198](MEMORY[0x24BDF4498], v24);
    v45 = v64;
    sub_23BEA72EC((uint64_t)v26, v24, v64);
    v46 = *(void (**)(char *, uint64_t))(v63 + 8);
    v46(v26, v24);
    sub_23BEA5C0C(v45, v24, (uint64_t)v26);
    MEMORY[0x242615198](MEMORY[0x24BDF4700], v17);
    v47 = (uint64_t)v69;
    sub_23BEA5C24((uint64_t)v26, v24);
    v46(v26, v24);
    v48 = v45;
    v49 = v24;
  }
  else
  {
    v50 = sub_23BFF88A8();
    MEMORY[0x24BDAC7A8](v50);
    v52 = *(_QWORD *)(v51 + 24);
    v62[-10] = v73;
    v62[-9] = v52;
    v53 = v72;
    v62[-8] = v74;
    v62[-7] = v53;
    v54 = v77;
    v62[-6] = *(_QWORD *)(v51 + 40);
    v62[-5] = v54;
    v55 = v76;
    v62[-4] = v7;
    v62[-3] = v55;
    v56 = v79;
    v62[-2] = v78;
    v62[-1] = v56;
    sub_23BFF90A0();
    MEMORY[0x242615198](MEMORY[0x24BDF4700], v17);
    v57 = v68;
    sub_23BEA72EC((uint64_t)v19, v17, v68);
    v46 = *(void (**)(char *, uint64_t))(v67 + 8);
    v46(v19, v17);
    sub_23BEA5C0C(v57, v17, (uint64_t)v19);
    MEMORY[0x242615198](MEMORY[0x24BDF4498], v24);
    v47 = (uint64_t)v69;
    sub_23BEA5CE8((uint64_t)v19, v24, v17);
    v46(v19, v17);
    v48 = v57;
    v49 = v17;
  }
  v46((char *)v48, v49);
  v58 = MEMORY[0x242615198](MEMORY[0x24BDF4498], v24);
  v59 = MEMORY[0x242615198](MEMORY[0x24BDF4700], v17);
  v81[0] = v58;
  v81[1] = v59;
  v60 = v71;
  MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v71, v81);
  sub_23BEA5C0C(v47, v60, v80);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v70 + 8))(v47, v60);
}

void sub_23BF43A18(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD v54[2];
  _QWORD v55[2];

  v33 = a6;
  v43 = a4;
  v44 = a3;
  v34 = a2;
  v36 = a1;
  v47 = a9;
  v31 = a10;
  v49 = a7;
  v45 = *(_QWORD *)(a7 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v48 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v46 = (char *)&v29 - v14;
  v15 = sub_23BFF862C();
  v32 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v16 = sub_23BFF862C();
  v35 = *(_QWORD *)(v16 - 8);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v55[0] = a8;
  v55[1] = MEMORY[0x24BDEEC40];
  v18 = MEMORY[0x24BDED308];
  v19 = MEMORY[0x242615198](MEMORY[0x24BDED308], v15, v55, v17);
  v20 = sub_23BF3EAF8();
  v54[0] = v19;
  v54[1] = v20;
  v21 = MEMORY[0x242615198](v18, v16, v54);
  v50 = v16;
  v51 = v21;
  v22 = MEMORY[0x24261512C](0, &v50, MEMORY[0x24BDF30F0], 0);
  v38 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v39 = v23;
  v30 = sub_23BFF862C();
  v40 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v42 = (char *)&v29 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v25);
  v37 = (char *)&v29 - v26;
  MEMORY[0x24BDAC7A8](v27);
  v41 = (char *)&v29 - v28;
  v50 = a5;
  v51 = v33;
  v52 = a8;
  v53 = v31;
  type metadata accessor for StandardHorizontalStackView();
}

uint64_t sub_23BF43CC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t OpaqueTypeConformance2;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  void (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);

  v8 = *(_QWORD *)(v7 - 344) + *(int *)(a1 + 52);
  sub_23BFF8CEC();
  View.artworkClipShape(_:)(*(_QWORD *)(v8 + 16), *(_BYTE *)(v8 + 24), v1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 360) + 8))(v2, v1);
  sub_23BFF8B24();
  sub_23BFF91C0();
  sub_23BFF8E48();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 336) + 8))(v6, v3);
  v9 = sub_23BFF8B6C();
  v10 = sub_23BFF8B78();
  sub_23BFF8B90();
  sub_23BFF8B90();
  if (sub_23BFF8B90() != v9)
    sub_23BFF8B90();
  v11 = *(_QWORD *)(v7 + 24);
  sub_23BFF8B90();
  if (sub_23BFF8B90() != v10)
    sub_23BFF8B90();
  *(_QWORD *)(v7 - 168) = v3;
  *(_QWORD *)(v7 - 160) = v5;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v13 = *(_QWORD *)(v7 - 320);
  v14 = *(_QWORD *)(v7 - 304);
  sub_23BFF8EF0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 312) + 8))(v4, v14);
  v15 = MEMORY[0x24BDECC60];
  *(_QWORD *)(v7 - 184) = OpaqueTypeConformance2;
  *(_QWORD *)(v7 - 176) = v15;
  v16 = *(_QWORD *)(v7 - 376);
  v17 = MEMORY[0x242615198](MEMORY[0x24BDED308], v16, v7 - 184);
  v18 = *(_QWORD *)(v7 - 288);
  sub_23BEA72EC(v13, v16, v18);
  v19 = *(_QWORD *)(v7 - 296);
  v20 = *(uint64_t (**)(uint64_t, uint64_t))(v19 + 8);
  *(_QWORD *)(v7 - 304) = v20;
  v21 = v20(v13, v16);
  v22 = *(_QWORD *)(v7 - 232);
  (*(void (**)(uint64_t))(v7 - 264))(v21);
  v23 = *(_QWORD *)(v7 - 248);
  v24 = *(_QWORD *)(v7 - 224);
  sub_23BEA72EC(v22, v24, v23);
  v25 = *(_QWORD *)(v7 - 256);
  v26 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
  v26(v22, v24);
  v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16);
  v28 = *(_QWORD *)(v7 - 280);
  v27(v28, v18, v16);
  *(_QWORD *)(v7 - 168) = v28;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v22, v23, v24);
  *(_QWORD *)(v7 - 160) = v22;
  *(_QWORD *)(v7 - 200) = v16;
  *(_QWORD *)(v7 - 192) = v24;
  *(_QWORD *)(v7 - 216) = v17;
  *(_QWORD *)(v7 - 208) = v11;
  sub_23BF93EF0((uint64_t *)(v7 - 168), 2uLL, v7 - 200);
  v26(v23, v24);
  v29 = v18;
  v30 = *(void (**)(uint64_t, uint64_t))(v7 - 304);
  v30(v29, v16);
  v26(v22, v24);
  return ((uint64_t (*)(uint64_t, uint64_t))v30)(v28, v16);
}

void sub_23BF43FBC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[27];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[2];
  _QWORD v33[2];
  _QWORD v34[2];

  v27[2] = a7;
  v27[8] = a4;
  v27[9] = a3;
  v27[5] = a2;
  v27[3] = a1;
  v27[11] = a9;
  v27[4] = a11;
  v27[10] = *(_QWORD *)(a7 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v27[6] = (char *)v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v27[7] = (char *)v27 - v16;
  v17 = sub_23BFF862C();
  v18 = sub_23BFF862C();
  v34[0] = a8;
  v34[1] = MEMORY[0x24BDEEC40];
  v19 = MEMORY[0x24BDED308];
  v20 = MEMORY[0x242615198](MEMORY[0x24BDED308], v17, v34);
  v21 = sub_23BF3EAF8();
  v33[0] = v20;
  v33[1] = v21;
  v22 = MEMORY[0x242615198](v19, v18, v33);
  v28 = v18;
  v29 = v22;
  MEMORY[0x24261512C](255, &v28, MEMORY[0x24BDF30F0], 0);
  v23 = sub_23BFF862C();
  v28 = v18;
  v29 = v22;
  v32[0] = swift_getOpaqueTypeConformance2();
  v32[1] = MEMORY[0x24BDECC60];
  MEMORY[0x242615198](v19, v23, v32);
  v24 = sub_23BFF9058();
  v27[1] = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  MEMORY[0x24BDAC7A8](v25);
  v27[0] = (char *)v27 - v26;
  v28 = a5;
  v29 = a6;
  v30 = a8;
  v31 = a10;
  type metadata accessor for StandardHorizontalStackView();
}

uint64_t sub_23BF441EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  void (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);

  v8 = *(_QWORD *)(v7 - 360);
  *(_QWORD *)(v7 - 272) = v1;
  *(_QWORD *)(v7 - 264) = v3;
  v9 = *(_QWORD *)(v7 - 368);
  *(_QWORD *)(v7 - 256) = v9;
  *(_QWORD *)(v7 - 248) = v5;
  *(_QWORD *)(v7 - 240) = v2;
  v10 = *(_QWORD *)(v7 - 352);
  v11 = *(_QWORD *)(v7 - 344);
  *(_QWORD *)(v7 - 232) = v10;
  *(_QWORD *)(v7 - 224) = v11;
  *(_QWORD *)(v7 - 216) = v8;
  sub_23BFF8848();
  sub_23BFF904C();
  v12 = MEMORY[0x242615198](MEMORY[0x24BDF4498], v4);
  sub_23BEA72EC(v6, v4, v0);
  v13 = *(_QWORD *)(v7 - 376);
  v14 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 8);
  *(_QWORD *)(v7 - 344) = v14;
  v15 = v14(v6, v4);
  v16 = *(_QWORD *)(v7 - 336);
  (*(void (**)(uint64_t))(v7 - 312))(v15);
  v17 = *(_QWORD *)(v7 - 328);
  v18 = v9;
  sub_23BEA72EC(v16, v9, v17);
  v19 = *(_QWORD *)(v7 - 304);
  v20 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
  v20(v16, v18);
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16);
  v22 = *(_QWORD *)(v7 - 384);
  v21(v6, v22, v4);
  *(_QWORD *)(v7 - 168) = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v16, v17, v18);
  *(_QWORD *)(v7 - 160) = v16;
  *(_QWORD *)(v7 - 184) = v4;
  *(_QWORD *)(v7 - 176) = v18;
  *(_QWORD *)(v7 - 200) = v12;
  *(_QWORD *)(v7 - 192) = v10;
  sub_23BF93EF0((uint64_t *)(v7 - 168), 2uLL, v7 - 184);
  v20(v17, v18);
  v23 = *(void (**)(uint64_t, uint64_t))(v7 - 344);
  v23(v22, v4);
  v20(v16, v18);
  return ((uint64_t (*)(uint64_t, uint64_t))v23)(v6, v4);
}

void sub_23BF443B4(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[2];
  _QWORD v36[3];

  v21 = a5;
  v20 = a3;
  v22 = a1;
  v30 = a6;
  v8 = sub_23BFF862C();
  v23 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v9 = sub_23BFF862C();
  v24 = *(_QWORD *)(v9 - 8);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v36[0] = a4;
  v36[1] = MEMORY[0x24BDEEC40];
  v11 = MEMORY[0x24BDED308];
  v19 = MEMORY[0x242615198](MEMORY[0x24BDED308], v8, v36, v10);
  v35[0] = v19;
  v35[1] = sub_23BF3EAF8();
  v31 = v9;
  v32 = MEMORY[0x242615198](v11, v9, v35);
  v12 = MEMORY[0x24261512C](0, &v31, MEMORY[0x24BDF30F0], 0);
  v26 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v27 = v13;
  v14 = sub_23BFF862C();
  v29 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v25 = (char *)&v18 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v28 = (char *)&v18 - v17;
  v31 = a2;
  v32 = v20;
  v33 = a4;
  v34 = v21;
  type metadata accessor for StandardHorizontalStackView();
}

uint64_t sub_23BF445AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  uint64_t OpaqueTypeConformance2;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);

  v10 = v7 + *(int *)(a1 + 52);
  sub_23BFF8CEC();
  View.artworkClipShape(_:)(*(_QWORD *)(v10 + 16), *(_BYTE *)(v10 + 24), v1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 248) + 8))(v4, v1);
  sub_23BFF8B24();
  sub_23BFF91C0();
  sub_23BFF8E48();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 240) + 8))(v8, v2);
  v11 = sub_23BFF8B6C();
  v12 = sub_23BFF8B78();
  sub_23BFF8B90();
  sub_23BFF8B90();
  if (sub_23BFF8B90() != v11)
    sub_23BFF8B90();
  sub_23BFF8B90();
  if (sub_23BFF8B90() != v12)
    sub_23BFF8B90();
  *(_QWORD *)(v9 - 168) = v2;
  *(_QWORD *)(v9 - 160) = v5;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v14 = *(_QWORD *)(v9 - 232);
  v15 = *(_QWORD *)(v9 - 216);
  sub_23BFF8EF0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 224) + 8))(v6, v15);
  v16 = MEMORY[0x24BDECC60];
  *(_QWORD *)(v9 - 184) = OpaqueTypeConformance2;
  *(_QWORD *)(v9 - 176) = v16;
  MEMORY[0x242615198](MEMORY[0x24BDED308], v3, v9 - 184);
  v17 = *(_QWORD *)(v9 - 208);
  sub_23BEA72EC(v14, v3, v17);
  v18 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 200) + 8);
  v18(v14, v3);
  sub_23BEA5C0C(v17, v3, *(_QWORD *)(v9 - 192));
  return ((uint64_t (*)(uint64_t, uint64_t))v18)(v17, v3);
}

uint64_t sub_23BF447B8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_23BFF8788();
  *a1 = result;
  return result;
}

uint64_t sub_23BF447E0()
{
  swift_retain();
  return sub_23BFF8794();
}

BOOL _s15FitnessCanvasUI33StandardHorizontalStackViewLayoutV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float64x2_t v14;
  int v15;
  double v16;
  double v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float64x2_t v27;
  BOOL v28;
  BOOL v29;
  BOOL v30;
  int8x8_t v31;
  _BOOL4 v32;
  BOOL v33;
  BOOL v34;
  _BOOL4 v35;
  _BOOL4 v36;
  _BOOL4 v37;
  uint16x4_t v38;

  result = 0;
  if (*(double *)a1 == *(double *)a2 && *(double *)(a1 + 8) == *(double *)(a2 + 8))
  {
    v5 = *(float64x2_t *)(a1 + 32);
    v4 = *(float64x2_t *)(a1 + 48);
    v6.f64[0] = *(float64_t *)(a1 + 64);
    v7 = *(_QWORD *)(a1 + 72);
    v8 = *(double *)(a1 + 80);
    v9 = *(_QWORD *)(a1 + 88);
    v10 = *(unsigned __int8 *)(a1 + 96);
    v11 = *(_QWORD *)(a1 + 104);
    v12 = *(_QWORD *)(a1 + 112);
    v13 = *(_QWORD *)(a1 + 120);
    v14.f64[0] = *(float64_t *)(a1 + 128);
    v15 = *(unsigned __int8 *)(a1 + 136);
    v17 = *(double *)(a1 + 144);
    v16 = *(double *)(a1 + 152);
    v19 = *(float64x2_t *)(a2 + 32);
    v18 = *(float64x2_t *)(a2 + 48);
    v20.f64[0] = *(float64_t *)(a2 + 64);
    v21 = *(_QWORD *)(a2 + 72);
    v22 = *(_QWORD *)(a2 + 88);
    v23 = *(unsigned __int8 *)(a2 + 96);
    v25 = *(_QWORD *)(a2 + 104);
    v24 = *(_QWORD *)(a2 + 112);
    v26 = *(_QWORD *)(a2 + 120);
    v27.f64[0] = *(float64_t *)(a2 + 128);
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    {
      result = 0;
      if (!*(_BYTE *)(a2 + 24))
        return result;
      v28 = v11 == v25;
      v29 = v12 == v24;
      v30 = v13 == v26;
      if (v10 != v23)
        return result;
      v6.f64[1] = *(float64_t *)(a1 + 80);
      v14.f64[1] = *(float64_t *)(a1 + 144);
      v20.f64[1] = *(float64_t *)(a2 + 80);
      v27.f64[1] = *(float64_t *)(a2 + 144);
      v31 = vand_s8(vcltz_s8(vshl_n_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64((float64x2_t)vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL), (float64x2_t)vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL)), (int32x4_t)vceqq_f64(v4, v18)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(v6, v20), (int32x4_t)vceqq_f64(v14, v27)))), 7uLL)), (int8x8_t)0x8040201008040201);
      v31.i8[0] = vaddv_s8(v31);
      if (v31.i32[0] != 255 || v7 != v21 || v9 != v22 || !v28 || !v29 || !v30)
        return result;
LABEL_16:
      if (((v15 ^ *(unsigned __int8 *)(a2 + 136)) & 1) == 0)
        return v16 == *(double *)(a2 + 152);
      return result;
    }
    result = 0;
    v32 = *(double *)(a1 + 16) == *(double *)(a2 + 16);
    v33 = v7 == v21;
    v34 = v9 == v22;
    v35 = v11 == v25;
    v36 = v12 == v24;
    v37 = v13 == v26;
    if (v10 == v23)
    {
      v38 = (uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(v5, v19), (int32x4_t)vceqq_f64(v4, v18))), 0xFuLL));
      v38.i16[0] = vminv_u16(v38);
      if ((v38.i32[0] & v32 & (v6.f64[0] == v20.f64[0]
                             && v8 == *(double *)(a2 + 80)
                             && v14.f64[0] == v27.f64[0]
                             && v17 == *(double *)(a2 + 144)
                             && v33
                             && v34)) != 0
        && ((v35 && v36) & ~*(unsigned __int8 *)(a2 + 24) & v37 & 1) != 0)
      {
        goto LABEL_16;
      }
    }
  }
  return result;
}

unint64_t sub_23BF44A10()
{
  unint64_t result;

  result = qword_256AE5B00;
  if (!qword_256AE5B00)
  {
    result = MEMORY[0x242615198](&unk_23C000898, &type metadata for StandardHorizontalStackViewLayout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE5B00);
  }
  return result;
}

unint64_t sub_23BF44A54()
{
  unint64_t result;

  result = qword_256AE5B08;
  if (!qword_256AE5B08)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for ArtworkClipShape, &type metadata for ArtworkClipShape);
    atomic_store(result, (unint64_t *)&qword_256AE5B08);
  }
  return result;
}

unint64_t sub_23BF44A98()
{
  unint64_t result;

  result = qword_256AE5B10;
  if (!qword_256AE5B10)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for CanvasSectionDensityFactor, &type metadata for CanvasSectionDensityFactor);
    atomic_store(result, (unint64_t *)&qword_256AE5B10);
  }
  return result;
}

unint64_t sub_23BF44ADC()
{
  unint64_t result;

  result = qword_256AE5B20;
  if (!qword_256AE5B20)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for ArtworkClipShape, &type metadata for ArtworkClipShape);
    atomic_store(result, (unint64_t *)&qword_256AE5B20);
  }
  return result;
}

unint64_t sub_23BF44B20()
{
  unint64_t result;

  result = qword_256AE5B28;
  if (!qword_256AE5B28)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for CanvasSectionDensityFactor, &type metadata for CanvasSectionDensityFactor);
    atomic_store(result, (unint64_t *)&qword_256AE5B28);
  }
  return result;
}

unint64_t sub_23BF44B68()
{
  unint64_t result;

  result = qword_256AE5B30[0];
  if (!qword_256AE5B30[0])
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for StandardHorizontalStackViewLayout, &type metadata for StandardHorizontalStackViewLayout);
    atomic_store(result, qword_256AE5B30);
  }
  return result;
}

__n128 __swift_memcpy160_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 112) = v7;
  return result;
}

uint64_t getEnumTagSinglePayload for StandardHorizontalStackViewLayout(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 160))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 96);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for StandardHorizontalStackViewLayout(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 160) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 160) = 0;
    if (a2)
      *(_BYTE *)(result + 96) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for StandardHorizontalStackViewLayout()
{
  return &type metadata for StandardHorizontalStackViewLayout;
}

uint64_t storeEnumTagSinglePayload for StandardHorizontalStackViewLayout.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 12 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 12) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF4)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF3)
    return ((uint64_t (*)(void))((char *)&loc_23BF44CF4 + 4 * byte_23C000622[v4]))();
  *a1 = a2 + 12;
  return ((uint64_t (*)(void))((char *)sub_23BF44D28 + 4 * byte_23C00061D[v4]))();
}

uint64_t sub_23BF44D28(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BF44D30(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BF44D38);
  return result;
}

uint64_t sub_23BF44D44(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BF44D4CLL);
  *(_BYTE *)result = a2 + 12;
  return result;
}

uint64_t sub_23BF44D50(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BF44D58(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StandardHorizontalStackViewLayout.CodingKeys()
{
  return &type metadata for StandardHorizontalStackViewLayout.CodingKeys;
}

uint64_t sub_23BF44D74()
{
  return swift_allocateGenericValueMetadata();
}

void sub_23BF44D7C()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  sub_23BEA9ED8();
  if (v0 <= 0x3F)
  {
    swift_checkMetadataState();
    if (v1 <= 0x3F)
    {
      sub_23BFF96A0();
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

_QWORD *sub_23BF44E48(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  _OWORD *v24;
  _OWORD *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  __int128 v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  __int128 v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  __int128 v59;
  void *v60;
  const void *v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  size_t __n;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v5 = sub_23BFF85F0();
  v6 = *(_QWORD *)(v5 - 8);
  if (*(_QWORD *)(v6 + 64) <= 8uLL)
    v7 = 8;
  else
    v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v12 = *(_DWORD *)(v11 + 80);
  if (*(_DWORD *)(v11 + 84))
    v13 = *(_QWORD *)(v11 + 64);
  else
    v13 = *(_QWORD *)(v11 + 64) + 1;
  v14 = v12 | *(_DWORD *)(v6 + 80) & 0xF8 | v10;
  v15 = v14 <= 7 && ((*(_DWORD *)(v11 + 80) | *(_DWORD *)(v9 + 80) | *(_DWORD *)(v6 + 80)) & 0x100000) == 0;
  if (v15
    && (v16 = *(_QWORD *)(v9 + 64) + 7,
        ((v13
        + 7
        + ((v12
          + 32
          + ((((((((v16 + (((v7 & 0xFFFFFFFFFFFFFFF8) + v10 + 168) & ~v10)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8)
              + 39) & 0xFFFFFFFFFFFFFFF8)
            + 39) & 0xFFFFFFFFFFFFFFF8)) & ~v12)) & 0xFFFFFFFFFFFFFFF8)
      + 16 <= 0x18))
  {
    v17 = *((unsigned __int8 *)a2 + v7);
    __n = v13;
    if (v17 >= 2)
    {
      if (v7 <= 3)
        v18 = v7;
      else
        v18 = 4;
      __asm { BR              X13 }
    }
    v67 = *(_DWORD *)(v11 + 80);
    v68 = v12 + 32;
    v69 = v13 + 7;
    v70 = *(_QWORD *)(a3 + 24);
    v21 = v7 + 1;
    v22 = ~v10;
    v20 = a1;
    if (v17 == 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16))(a1, a2, v5);
      v23 = 1;
    }
    else
    {
      *a1 = *a2;
      swift_retain();
      v23 = 0;
    }
    *((_BYTE *)a1 + v7) = v23;
    v24 = (_OWORD *)(((unint64_t)a1 + v21 + 7) & 0xFFFFFFFFFFFFFFF8);
    v25 = (_OWORD *)(((unint64_t)a2 + v21 + 7) & 0xFFFFFFFFFFFFFFF8);
    v26 = v25[1];
    *v24 = *v25;
    v24[1] = v26;
    v27 = v25[2];
    v28 = v25[3];
    v29 = v25[5];
    v24[4] = v25[4];
    v24[5] = v29;
    v24[2] = v27;
    v24[3] = v28;
    v30 = v25[6];
    v31 = v25[7];
    v32 = v25[9];
    v24[8] = v25[8];
    v24[9] = v32;
    v24[6] = v30;
    v24[7] = v31;
    v33 = ((unint64_t)v24 + v10 + 160) & v22;
    v34 = ((unint64_t)v25 + v10 + 160) & v22;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v33, v34, v8);
    v35 = (v16 + v33) & 0xFFFFFFFFFFFFFFF8;
    v36 = (v16 + v34) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)(v36 + 24) < 0xFFFFFFFFuLL)
    {
      v40 = *(_OWORD *)(v36 + 16);
      *(_OWORD *)v35 = *(_OWORD *)v36;
      *(_OWORD *)(v35 + 16) = v40;
    }
    else
    {
      v37 = *(_QWORD *)v36;
      v38 = *(_QWORD *)(v36 + 8);
      v39 = *(_BYTE *)(v36 + 16);
      sub_23BEA0EAC(*(_QWORD *)v36, v38, v39);
      *(_QWORD *)v35 = v37;
      *(_QWORD *)(v35 + 8) = v38;
      *(_BYTE *)(v35 + 16) = v39;
      *(_QWORD *)(v35 + 24) = *(_QWORD *)(v36 + 24);
      swift_bridgeObjectRetain();
    }
    v41 = (v35 + 39) & 0xFFFFFFFFFFFFFFF8;
    v42 = (v36 + 39) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)(v42 + 24) < 0xFFFFFFFFuLL)
    {
      v46 = *(_OWORD *)(v42 + 16);
      *(_OWORD *)v41 = *(_OWORD *)v42;
      *(_OWORD *)(v41 + 16) = v46;
    }
    else
    {
      v43 = *(_QWORD *)v42;
      v44 = *(_QWORD *)(v42 + 8);
      v45 = *(_BYTE *)(v42 + 16);
      sub_23BEA0EAC(*(_QWORD *)v42, v44, v45);
      *(_QWORD *)v41 = v43;
      *(_QWORD *)(v41 + 8) = v44;
      *(_BYTE *)(v41 + 16) = v45;
      *(_QWORD *)(v41 + 24) = *(_QWORD *)(v42 + 24);
      swift_bridgeObjectRetain();
    }
    v47 = (v41 + 39) & 0xFFFFFFFFFFFFFFF8;
    v48 = (v42 + 39) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)(v48 + 24) < 0xFFFFFFFFuLL)
    {
      v52 = *(_OWORD *)(v48 + 16);
      *(_OWORD *)v47 = *(_OWORD *)v48;
      *(_OWORD *)(v47 + 16) = v52;
    }
    else
    {
      v49 = *(_QWORD *)v48;
      v50 = *(_QWORD *)(v48 + 8);
      v51 = *(_BYTE *)(v48 + 16);
      sub_23BEA0EAC(*(_QWORD *)v48, v50, v51);
      *(_QWORD *)v47 = v49;
      *(_QWORD *)(v47 + 8) = v50;
      *(_BYTE *)(v47 + 16) = v51;
      *(_QWORD *)(v47 + 24) = *(_QWORD *)(v48 + 24);
      swift_bridgeObjectRetain();
    }
    v53 = ~v67;
    v54 = (v47 + 39) & 0xFFFFFFFFFFFFFFF8;
    v55 = (v48 + 39) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)(v55 + 24) < 0xFFFFFFFFuLL)
    {
      v59 = *(_OWORD *)(v55 + 16);
      *(_OWORD *)v54 = *(_OWORD *)v55;
      *(_OWORD *)(v54 + 16) = v59;
    }
    else
    {
      v56 = *(_QWORD *)v55;
      v57 = *(_QWORD *)(v55 + 8);
      v58 = *(_BYTE *)(v55 + 16);
      sub_23BEA0EAC(*(_QWORD *)v55, v57, v58);
      *(_QWORD *)v54 = v56;
      *(_QWORD *)(v54 + 8) = v57;
      *(_BYTE *)(v54 + 16) = v58;
      *(_QWORD *)(v54 + 24) = *(_QWORD *)(v55 + 24);
      swift_bridgeObjectRetain();
    }
    v60 = (void *)((v68 + v54) & v53);
    v61 = (const void *)((v68 + v55) & v53);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v61, 1, v70))
    {
      memcpy(v60, v61, __n);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v60, v61, v70);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v60, 0, 1, v70);
    }
    v62 = (_QWORD *)(((unint64_t)v61 + v69) & 0xFFFFFFFFFFFFFFF8);
    v63 = v62[1];
    v64 = (_QWORD *)(((unint64_t)v60 + v69) & 0xFFFFFFFFFFFFFFF8);
    *v64 = *v62;
    v64[1] = v63;
  }
  else
  {
    v19 = *a2;
    *a1 = *a2;
    v20 = (_QWORD *)(v19 + (((v14 | 7) + 16) & ~(unint64_t)(v14 | 7)));
  }
  swift_retain();
  return v20;
}

uint64_t sub_23BF452C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v4 = sub_23BFF85F0();
  v5 = *(_QWORD *)(v4 - 8);
  if (*(_QWORD *)(v5 + 64) <= 8uLL)
    v6 = 8;
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *(unsigned __int8 *)(a1 + v6);
  if (v7 >= 2)
  {
    if (v6 <= 3)
      v8 = v6;
    else
      v8 = 4;
    __asm { BR              X13 }
  }
  if (v7 == 1)
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  else
    swift_release();
  v9 = (a1 + v6 + 8) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v11 = (v9 + *(unsigned __int8 *)(v10 + 80) + 160) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  (*(void (**)(unint64_t))(v10 + 8))(v11);
  v12 = (*(_QWORD *)(v10 + 64) + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v12 + 24) >= 0xFFFFFFFFuLL)
  {
    sub_23BEA0F64(*(_QWORD *)v12, *(_QWORD *)(v12 + 8), *(_BYTE *)(v12 + 16));
    swift_bridgeObjectRelease();
  }
  v13 = (v12 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v13 + 24) >= 0xFFFFFFFFuLL)
  {
    sub_23BEA0F64(*(_QWORD *)v13, *(_QWORD *)(v13 + 8), *(_BYTE *)(v13 + 16));
    swift_bridgeObjectRelease();
  }
  v14 = (v13 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v14 + 24) >= 0xFFFFFFFFuLL)
  {
    sub_23BEA0F64(*(_QWORD *)v14, *(_QWORD *)(v14 + 8), *(_BYTE *)(v14 + 16));
    swift_bridgeObjectRelease();
  }
  v15 = (v14 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v15 + 24) >= 0xFFFFFFFFuLL)
  {
    sub_23BEA0F64(*(_QWORD *)v15, *(_QWORD *)(v15 + 8), *(_BYTE *)(v15 + 16));
    swift_bridgeObjectRelease();
  }
  v16 = *(_QWORD *)(a2 + 24);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = (v15 + *(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v17 + 48))(v18, 1, v16))
    (*(void (**)(unint64_t, uint64_t))(v17 + 8))(v18, v16);
  return swift_release();
}

_QWORD *sub_23BF454FC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  char v11;
  _OWORD *v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  __int128 v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  __int128 v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  const void *v54;
  int v55;
  size_t v56;
  size_t v57;
  size_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;

  v6 = sub_23BFF85F0();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_QWORD *)(v7 + 64) <= 8uLL)
    v8 = 8;
  else
    v8 = *(_QWORD *)(v7 + 64);
  v9 = *((unsigned __int8 *)a2 + v8);
  if (v9 >= 2)
  {
    if (v8 <= 3)
      v10 = v8;
    else
      v10 = 4;
    __asm { BR              X13 }
  }
  if (v9 == 1)
  {
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(a1, a2, v6);
    v11 = 1;
  }
  else
  {
    *a1 = *a2;
    swift_retain();
    v11 = 0;
  }
  *((_BYTE *)a1 + v8) = v11;
  v12 = (_OWORD *)(((unint64_t)a1 + v8 + 8) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_OWORD *)(((unint64_t)a2 + v8 + 8) & 0xFFFFFFFFFFFFFFF8);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v15 = v13[2];
  v16 = v13[3];
  v17 = v13[5];
  v12[4] = v13[4];
  v12[5] = v17;
  v12[2] = v15;
  v12[3] = v16;
  v18 = v13[6];
  v19 = v13[7];
  v20 = v13[9];
  v12[8] = v13[8];
  v12[9] = v20;
  v12[6] = v18;
  v12[7] = v19;
  v21 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v22 = *(unsigned __int8 *)(v21 + 80);
  v23 = ((unint64_t)v12 + v22 + 160) & ~v22;
  v24 = ((unint64_t)v13 + v22 + 160) & ~v22;
  (*(void (**)(uint64_t, uint64_t))(v21 + 16))(v23, v24);
  v25 = *(_QWORD *)(v21 + 64) + 7;
  v26 = (v25 + v23) & 0xFFFFFFFFFFFFFFF8;
  v27 = (v25 + v24) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v27 + 24) < 0xFFFFFFFFuLL)
  {
    v31 = *(_OWORD *)(v27 + 16);
    *(_OWORD *)v26 = *(_OWORD *)v27;
    *(_OWORD *)(v26 + 16) = v31;
  }
  else
  {
    v28 = *(_QWORD *)v27;
    v29 = *(_QWORD *)(v27 + 8);
    v30 = *(_BYTE *)(v27 + 16);
    sub_23BEA0EAC(*(_QWORD *)v27, v29, v30);
    *(_QWORD *)v26 = v28;
    *(_QWORD *)(v26 + 8) = v29;
    *(_BYTE *)(v26 + 16) = v30;
    *(_QWORD *)(v26 + 24) = *(_QWORD *)(v27 + 24);
    swift_bridgeObjectRetain();
  }
  v32 = (v26 + 39) & 0xFFFFFFFFFFFFFFF8;
  v33 = (v27 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v33 + 24) < 0xFFFFFFFFuLL)
  {
    v37 = *(_OWORD *)(v33 + 16);
    *(_OWORD *)v32 = *(_OWORD *)v33;
    *(_OWORD *)(v32 + 16) = v37;
  }
  else
  {
    v34 = *(_QWORD *)v33;
    v35 = *(_QWORD *)(v33 + 8);
    v36 = *(_BYTE *)(v33 + 16);
    sub_23BEA0EAC(*(_QWORD *)v33, v35, v36);
    *(_QWORD *)v32 = v34;
    *(_QWORD *)(v32 + 8) = v35;
    *(_BYTE *)(v32 + 16) = v36;
    *(_QWORD *)(v32 + 24) = *(_QWORD *)(v33 + 24);
    swift_bridgeObjectRetain();
  }
  v38 = (v32 + 39) & 0xFFFFFFFFFFFFFFF8;
  v39 = (v33 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v39 + 24) < 0xFFFFFFFFuLL)
  {
    v43 = *(_OWORD *)(v39 + 16);
    *(_OWORD *)v38 = *(_OWORD *)v39;
    *(_OWORD *)(v38 + 16) = v43;
  }
  else
  {
    v40 = *(_QWORD *)v39;
    v41 = *(_QWORD *)(v39 + 8);
    v42 = *(_BYTE *)(v39 + 16);
    sub_23BEA0EAC(*(_QWORD *)v39, v41, v42);
    *(_QWORD *)v38 = v40;
    *(_QWORD *)(v38 + 8) = v41;
    *(_BYTE *)(v38 + 16) = v42;
    *(_QWORD *)(v38 + 24) = *(_QWORD *)(v39 + 24);
    swift_bridgeObjectRetain();
  }
  v44 = (v38 + 39) & 0xFFFFFFFFFFFFFFF8;
  v45 = (v39 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v45 + 24) < 0xFFFFFFFFuLL)
  {
    v49 = *(_OWORD *)(v45 + 16);
    *(_OWORD *)v44 = *(_OWORD *)v45;
    *(_OWORD *)(v44 + 16) = v49;
  }
  else
  {
    v46 = *(_QWORD *)v45;
    v47 = *(_QWORD *)(v45 + 8);
    v48 = *(_BYTE *)(v45 + 16);
    sub_23BEA0EAC(*(_QWORD *)v45, v47, v48);
    *(_QWORD *)v44 = v46;
    *(_QWORD *)(v44 + 8) = v47;
    *(_BYTE *)(v44 + 16) = v48;
    *(_QWORD *)(v44 + 24) = *(_QWORD *)(v45 + 24);
    swift_bridgeObjectRetain();
  }
  v50 = *(_QWORD *)(a3 + 24);
  v51 = *(_QWORD *)(v50 - 8);
  v52 = *(unsigned __int8 *)(v51 + 80);
  v53 = (void *)((v44 + v52 + 32) & ~v52);
  v54 = (const void *)((v45 + v52 + 32) & ~v52);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v51 + 48))(v54, 1, v50))
  {
    v55 = *(_DWORD *)(v51 + 84);
    v56 = *(_QWORD *)(v51 + 64);
    if (v55)
      v57 = v56;
    else
      v57 = v56 + 1;
    memcpy(v53, v54, v57);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v51 + 16))(v53, v54, v50);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v53, 0, 1, v50);
    v55 = *(_DWORD *)(v51 + 84);
    v56 = *(_QWORD *)(v51 + 64);
  }
  if (v55)
    v58 = v56;
  else
    v58 = v56 + 1;
  v59 = (uint64_t)v53 + v58 + 7;
  v60 = (uint64_t *)(((unint64_t)v54 + v58 + 7) & 0xFFFFFFFFFFFFFFF8);
  v62 = *v60;
  v61 = v60[1];
  v63 = (_QWORD *)(v59 & 0xFFFFFFFFFFFFFFF8);
  *v63 = v62;
  v63[1] = v61;
  swift_retain();
  return a1;
}

_QWORD *sub_23BF458AC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  __int128 v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  __int128 v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  __int128 v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  void *v79;
  uint64_t (*v80)(void *, uint64_t, uint64_t);
  int v81;
  int v82;
  size_t v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;

  if (a1 != a2)
  {
    v6 = sub_23BFF85F0();
    v7 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v7 + 64) <= 8uLL)
      v8 = 8;
    else
      v8 = *(_QWORD *)(v7 + 64);
    v9 = *((unsigned __int8 *)a1 + v8);
    if (v9 >= 2)
    {
      if (v8 <= 3)
        v10 = v8;
      else
        v10 = 4;
      __asm { BR              X12 }
    }
    if (v9 == 1)
      (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(a1, v6);
    else
      swift_release();
    v11 = *((unsigned __int8 *)a2 + v8);
    if (v11 >= 2)
    {
      if (v8 <= 3)
        v12 = v8;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    if (v11 == 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(a1, a2, v6);
      *((_BYTE *)a1 + v8) = 1;
    }
    else
    {
      *a1 = *a2;
      *((_BYTE *)a1 + v8) = 0;
      swift_retain();
    }
  }
  v13 = *(_QWORD *)(*(_QWORD *)(sub_23BFF85F0() - 8) + 64);
  if (v13 <= 8)
    v13 = 8;
  v14 = v13 + 8;
  v15 = ((unint64_t)a1 + v14) & 0xFFFFFFFFFFFFFFF8;
  v16 = ((unint64_t)a2 + v14) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_QWORD *)(v15 + 8) = *(_QWORD *)(v16 + 8);
  v17 = *(_BYTE *)(v16 + 24);
  *(_QWORD *)(v15 + 16) = *(_QWORD *)(v16 + 16);
  *(_BYTE *)(v15 + 24) = v17;
  *(_QWORD *)(v15 + 32) = *(_QWORD *)(v16 + 32);
  *(_QWORD *)(v15 + 40) = *(_QWORD *)(v16 + 40);
  *(_QWORD *)(v15 + 48) = *(_QWORD *)(v16 + 48);
  *(_QWORD *)(v15 + 56) = *(_QWORD *)(v16 + 56);
  *(_QWORD *)(v15 + 64) = *(_QWORD *)(v16 + 64);
  *(_QWORD *)(v15 + 72) = *(_QWORD *)(v16 + 72);
  *(_QWORD *)(v15 + 80) = *(_QWORD *)(v16 + 80);
  *(_QWORD *)(v15 + 88) = *(_QWORD *)(v16 + 88);
  *(_BYTE *)(v15 + 96) = *(_BYTE *)(v16 + 96);
  *(_QWORD *)(v15 + 104) = *(_QWORD *)(v16 + 104);
  *(_QWORD *)(v15 + 112) = *(_QWORD *)(v16 + 112);
  *(_QWORD *)(v15 + 120) = *(_QWORD *)(v16 + 120);
  *(_QWORD *)(v15 + 128) = *(_QWORD *)(v16 + 128);
  *(_BYTE *)(v15 + 136) = *(_BYTE *)(v16 + 136);
  *(_QWORD *)(v15 + 144) = *(_QWORD *)(v16 + 144);
  *(_QWORD *)(v15 + 152) = *(_QWORD *)(v16 + 152);
  v18 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v19 = *(unsigned __int8 *)(v18 + 80);
  v20 = (v19 + 160 + v15) & ~v19;
  v21 = (v19 + 160 + v16) & ~v19;
  (*(void (**)(uint64_t, uint64_t))(v18 + 24))(v20, v21);
  v22 = *(_QWORD *)(v18 + 64) + 7;
  v23 = (v22 + v20) & 0xFFFFFFFFFFFFFFF8;
  v24 = (v22 + v21) & 0xFFFFFFFFFFFFFFF8;
  v25 = *(_QWORD *)(v24 + 24);
  if (*(_QWORD *)(v23 + 24) < 0xFFFFFFFFuLL)
  {
    if (v25 >= 0xFFFFFFFF)
    {
      v32 = *(_QWORD *)v24;
      v33 = *(_QWORD *)(v24 + 8);
      v34 = *(_BYTE *)(v24 + 16);
      sub_23BEA0EAC(*(_QWORD *)v24, v33, v34);
      *(_QWORD *)v23 = v32;
      *(_QWORD *)(v23 + 8) = v33;
      *(_BYTE *)(v23 + 16) = v34;
      *(_QWORD *)(v23 + 24) = *(_QWORD *)(v24 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_30;
    }
  }
  else
  {
    if (v25 >= 0xFFFFFFFF)
    {
      v26 = *(_QWORD *)v24;
      v27 = *(_QWORD *)(v24 + 8);
      v28 = *(_BYTE *)(v24 + 16);
      sub_23BEA0EAC(*(_QWORD *)v24, v27, v28);
      v29 = *(_QWORD *)v23;
      v30 = *(_QWORD *)(v23 + 8);
      v31 = *(_BYTE *)(v23 + 16);
      *(_QWORD *)v23 = v26;
      *(_QWORD *)(v23 + 8) = v27;
      *(_BYTE *)(v23 + 16) = v28;
      sub_23BEA0F64(v29, v30, v31);
      *(_QWORD *)(v23 + 24) = *(_QWORD *)(v24 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_30;
    }
    sub_23BEA0F64(*(_QWORD *)v23, *(_QWORD *)(v23 + 8), *(_BYTE *)(v23 + 16));
    swift_bridgeObjectRelease();
  }
  v35 = *(_OWORD *)(v24 + 16);
  *(_OWORD *)v23 = *(_OWORD *)v24;
  *(_OWORD *)(v23 + 16) = v35;
LABEL_30:
  v36 = (v23 + 39) & 0xFFFFFFFFFFFFFFF8;
  v37 = (v24 + 39) & 0xFFFFFFFFFFFFFFF8;
  v38 = *(_QWORD *)(v37 + 24);
  if (*(_QWORD *)(v36 + 24) < 0xFFFFFFFFuLL)
  {
    if (v38 >= 0xFFFFFFFF)
    {
      v45 = *(_QWORD *)v37;
      v46 = *(_QWORD *)(v37 + 8);
      v47 = *(_BYTE *)(v37 + 16);
      sub_23BEA0EAC(*(_QWORD *)v37, v46, v47);
      *(_QWORD *)v36 = v45;
      *(_QWORD *)(v36 + 8) = v46;
      *(_BYTE *)(v36 + 16) = v47;
      *(_QWORD *)(v36 + 24) = *(_QWORD *)(v37 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_37;
    }
  }
  else
  {
    if (v38 >= 0xFFFFFFFF)
    {
      v39 = *(_QWORD *)v37;
      v40 = *(_QWORD *)(v37 + 8);
      v41 = *(_BYTE *)(v37 + 16);
      sub_23BEA0EAC(*(_QWORD *)v37, v40, v41);
      v42 = *(_QWORD *)v36;
      v43 = *(_QWORD *)(v36 + 8);
      v44 = *(_BYTE *)(v36 + 16);
      *(_QWORD *)v36 = v39;
      *(_QWORD *)(v36 + 8) = v40;
      *(_BYTE *)(v36 + 16) = v41;
      sub_23BEA0F64(v42, v43, v44);
      *(_QWORD *)(v36 + 24) = *(_QWORD *)(v37 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_37;
    }
    sub_23BEA0F64(*(_QWORD *)v36, *(_QWORD *)(v36 + 8), *(_BYTE *)(v36 + 16));
    swift_bridgeObjectRelease();
  }
  v48 = *(_OWORD *)(v37 + 16);
  *(_OWORD *)v36 = *(_OWORD *)v37;
  *(_OWORD *)(v36 + 16) = v48;
LABEL_37:
  v49 = (v36 + 39) & 0xFFFFFFFFFFFFFFF8;
  v50 = (v37 + 39) & 0xFFFFFFFFFFFFFFF8;
  v51 = *(_QWORD *)(v50 + 24);
  if (*(_QWORD *)(v49 + 24) < 0xFFFFFFFFuLL)
  {
    if (v51 >= 0xFFFFFFFF)
    {
      v58 = *(_QWORD *)v50;
      v59 = *(_QWORD *)(v50 + 8);
      v60 = *(_BYTE *)(v50 + 16);
      sub_23BEA0EAC(*(_QWORD *)v50, v59, v60);
      *(_QWORD *)v49 = v58;
      *(_QWORD *)(v49 + 8) = v59;
      *(_BYTE *)(v49 + 16) = v60;
      *(_QWORD *)(v49 + 24) = *(_QWORD *)(v50 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_44;
    }
  }
  else
  {
    if (v51 >= 0xFFFFFFFF)
    {
      v52 = *(_QWORD *)v50;
      v53 = *(_QWORD *)(v50 + 8);
      v54 = *(_BYTE *)(v50 + 16);
      sub_23BEA0EAC(*(_QWORD *)v50, v53, v54);
      v55 = *(_QWORD *)v49;
      v56 = *(_QWORD *)(v49 + 8);
      v57 = *(_BYTE *)(v49 + 16);
      *(_QWORD *)v49 = v52;
      *(_QWORD *)(v49 + 8) = v53;
      *(_BYTE *)(v49 + 16) = v54;
      sub_23BEA0F64(v55, v56, v57);
      *(_QWORD *)(v49 + 24) = *(_QWORD *)(v50 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_44;
    }
    sub_23BEA0F64(*(_QWORD *)v49, *(_QWORD *)(v49 + 8), *(_BYTE *)(v49 + 16));
    swift_bridgeObjectRelease();
  }
  v61 = *(_OWORD *)(v50 + 16);
  *(_OWORD *)v49 = *(_OWORD *)v50;
  *(_OWORD *)(v49 + 16) = v61;
LABEL_44:
  v62 = (v49 + 39) & 0xFFFFFFFFFFFFFFF8;
  v63 = (v50 + 39) & 0xFFFFFFFFFFFFFFF8;
  v64 = *(_QWORD *)(v63 + 24);
  if (*(_QWORD *)(v62 + 24) < 0xFFFFFFFFuLL)
  {
    if (v64 >= 0xFFFFFFFF)
    {
      v71 = *(_QWORD *)v63;
      v72 = *(_QWORD *)(v63 + 8);
      v73 = *(_BYTE *)(v63 + 16);
      sub_23BEA0EAC(*(_QWORD *)v63, v72, v73);
      *(_QWORD *)v62 = v71;
      *(_QWORD *)(v62 + 8) = v72;
      *(_BYTE *)(v62 + 16) = v73;
      *(_QWORD *)(v62 + 24) = *(_QWORD *)(v63 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_51;
    }
  }
  else
  {
    if (v64 >= 0xFFFFFFFF)
    {
      v65 = *(_QWORD *)v63;
      v66 = *(_QWORD *)(v63 + 8);
      v67 = *(_BYTE *)(v63 + 16);
      sub_23BEA0EAC(*(_QWORD *)v63, v66, v67);
      v68 = *(_QWORD *)v62;
      v69 = *(_QWORD *)(v62 + 8);
      v70 = *(_BYTE *)(v62 + 16);
      *(_QWORD *)v62 = v65;
      *(_QWORD *)(v62 + 8) = v66;
      *(_BYTE *)(v62 + 16) = v67;
      sub_23BEA0F64(v68, v69, v70);
      *(_QWORD *)(v62 + 24) = *(_QWORD *)(v63 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_51;
    }
    sub_23BEA0F64(*(_QWORD *)v62, *(_QWORD *)(v62 + 8), *(_BYTE *)(v62 + 16));
    swift_bridgeObjectRelease();
  }
  v74 = *(_OWORD *)(v63 + 16);
  *(_OWORD *)v62 = *(_OWORD *)v63;
  *(_OWORD *)(v62 + 16) = v74;
LABEL_51:
  v75 = *(_QWORD *)(a3 + 24);
  v76 = *(_QWORD *)(v75 - 8);
  v77 = *(unsigned __int8 *)(v76 + 80);
  v78 = (void *)((v62 + v77 + 32) & ~v77);
  v79 = (void *)((v63 + v77 + 32) & ~v77);
  v80 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v76 + 48);
  v81 = v80(v78, 1, v75);
  v82 = v80(v79, 1, v75);
  if (v81)
  {
    if (!v82)
    {
      (*(void (**)(void *, void *, uint64_t))(v76 + 16))(v78, v79, v75);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v76 + 56))(v78, 0, 1, v75);
      goto LABEL_60;
    }
  }
  else
  {
    if (!v82)
    {
      (*(void (**)(void *, void *, uint64_t))(v76 + 24))(v78, v79, v75);
      goto LABEL_60;
    }
    (*(void (**)(void *, uint64_t))(v76 + 8))(v78, v75);
  }
  if (*(_DWORD *)(v76 + 84))
    v83 = *(_QWORD *)(v76 + 64);
  else
    v83 = *(_QWORD *)(v76 + 64) + 1;
  memcpy(v78, v79, v83);
LABEL_60:
  if (*(_DWORD *)(v76 + 84))
    v84 = *(_QWORD *)(v76 + 64);
  else
    v84 = *(_QWORD *)(v76 + 64) + 1;
  v85 = (_QWORD *)(((unint64_t)v78 + v84 + 7) & 0xFFFFFFFFFFFFFFF8);
  v86 = (_QWORD *)(((unint64_t)v79 + v84 + 7) & 0xFFFFFFFFFFFFFFF8);
  v87 = v86[1];
  *v85 = *v86;
  v85[1] = v87;
  swift_retain();
  swift_release();
  return a1;
}

