_QWORD *sub_23BF45FDC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  char v11;
  _OWORD *v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  _OWORD *v27;
  __int128 v28;
  _OWORD *v29;
  _OWORD *v30;
  __int128 v31;
  _OWORD *v32;
  _OWORD *v33;
  __int128 v34;
  _OWORD *v35;
  _OWORD *v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  const void *v42;
  int v43;
  size_t v44;
  size_t v45;
  size_t v46;

  v6 = sub_23BFF85F0();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_QWORD *)(v7 + 64) <= 8uLL)
    v8 = 8;
  else
    v8 = *(_QWORD *)(v7 + 64);
  v9 = *((unsigned __int8 *)a2 + v8);
  if (v9 >= 2)
  {
    if (v8 <= 3)
      v10 = v8;
    else
      v10 = 4;
    __asm { BR              X13 }
  }
  if (v9 == 1)
  {
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 32))(a1, a2, v6);
    v11 = 1;
  }
  else
  {
    v11 = 0;
    *a1 = *a2;
  }
  *((_BYTE *)a1 + v8) = v11;
  v12 = (_OWORD *)(((unint64_t)a1 + v8 + 8) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_OWORD *)(((unint64_t)a2 + v8 + 8) & 0xFFFFFFFFFFFFFFF8);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v15 = v13[2];
  v16 = v13[3];
  v17 = v13[5];
  v12[4] = v13[4];
  v12[5] = v17;
  v12[2] = v15;
  v12[3] = v16;
  v18 = v13[6];
  v19 = v13[7];
  v20 = v13[9];
  v12[8] = v13[8];
  v12[9] = v20;
  v12[6] = v18;
  v12[7] = v19;
  v21 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v22 = *(unsigned __int8 *)(v21 + 80);
  v23 = ((unint64_t)v12 + v22 + 160) & ~v22;
  v24 = ((unint64_t)v13 + v22 + 160) & ~v22;
  (*(void (**)(uint64_t, uint64_t))(v21 + 32))(v23, v24);
  v25 = *(_QWORD *)(v21 + 64) + 7;
  v26 = (_OWORD *)((v25 + v23) & 0xFFFFFFFFFFFFFFF8);
  v27 = (_OWORD *)((v25 + v24) & 0xFFFFFFFFFFFFFFF8);
  v28 = v27[1];
  *v26 = *v27;
  v26[1] = v28;
  v29 = (_OWORD *)(((unint64_t)v26 + 39) & 0xFFFFFFFFFFFFFFF8);
  v30 = (_OWORD *)(((unint64_t)v27 + 39) & 0xFFFFFFFFFFFFFFF8);
  v31 = v30[1];
  *v29 = *v30;
  v29[1] = v31;
  v32 = (_OWORD *)(((unint64_t)v29 + 39) & 0xFFFFFFFFFFFFFFF8);
  v33 = (_OWORD *)(((unint64_t)v30 + 39) & 0xFFFFFFFFFFFFFFF8);
  v34 = v33[1];
  *v32 = *v33;
  v32[1] = v34;
  v35 = (_OWORD *)(((unint64_t)v32 + 39) & 0xFFFFFFFFFFFFFFF8);
  v36 = (_OWORD *)(((unint64_t)v33 + 39) & 0xFFFFFFFFFFFFFFF8);
  v37 = v36[1];
  *v35 = *v36;
  v35[1] = v37;
  v38 = *(_QWORD *)(a3 + 24);
  v39 = *(_QWORD *)(v38 - 8);
  v40 = *(unsigned __int8 *)(v39 + 80);
  v41 = (void *)(((unint64_t)v35 + v40 + 32) & ~v40);
  v42 = (const void *)(((unint64_t)v36 + v40 + 32) & ~v40);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v39 + 48))(v42, 1, v38))
  {
    v43 = *(_DWORD *)(v39 + 84);
    v44 = *(_QWORD *)(v39 + 64);
    if (v43)
      v45 = v44;
    else
      v45 = v44 + 1;
    memcpy(v41, v42, v45);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v39 + 32))(v41, v42, v38);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v41, 0, 1, v38);
    v43 = *(_DWORD *)(v39 + 84);
    v44 = *(_QWORD *)(v39 + 64);
  }
  if (v43)
    v46 = v44;
  else
    v46 = v44 + 1;
  *(_OWORD *)(((unint64_t)v41 + v46 + 7) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v42 + v46 + 7) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *sub_23BF4627C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  __int128 v37;
  unint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  unint64_t v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void *v56;
  uint64_t (*v57)(void *, uint64_t, uint64_t);
  int v58;
  int v59;
  size_t v60;
  uint64_t v61;

  if (a1 != a2)
  {
    v6 = sub_23BFF85F0();
    v7 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v7 + 64) <= 8uLL)
      v8 = 8;
    else
      v8 = *(_QWORD *)(v7 + 64);
    v9 = *((unsigned __int8 *)a1 + v8);
    if (v9 >= 2)
    {
      if (v8 <= 3)
        v10 = v8;
      else
        v10 = 4;
      __asm { BR              X12 }
    }
    if (v9 == 1)
      (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(a1, v6);
    else
      swift_release();
    v11 = *((unsigned __int8 *)a2 + v8);
    if (v11 >= 2)
    {
      if (v8 <= 3)
        v12 = v8;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    if (v11 == 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 32))(a1, a2, v6);
      v13 = 1;
    }
    else
    {
      v13 = 0;
      *a1 = *a2;
    }
    *((_BYTE *)a1 + v8) = v13;
  }
  v14 = *(_QWORD *)(*(_QWORD *)(sub_23BFF85F0() - 8) + 64);
  if (v14 <= 8)
    v14 = 8;
  v15 = v14 + 8;
  v16 = ((unint64_t)a1 + v15) & 0xFFFFFFFFFFFFFFF8;
  v17 = ((unint64_t)a2 + v15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_QWORD *)(v16 + 8) = *(_QWORD *)(v17 + 8);
  v18 = *(_BYTE *)(v17 + 24);
  *(_QWORD *)(v16 + 16) = *(_QWORD *)(v17 + 16);
  *(_BYTE *)(v16 + 24) = v18;
  *(_QWORD *)(v16 + 32) = *(_QWORD *)(v17 + 32);
  *(_QWORD *)(v16 + 40) = *(_QWORD *)(v17 + 40);
  *(_QWORD *)(v16 + 48) = *(_QWORD *)(v17 + 48);
  *(_QWORD *)(v16 + 56) = *(_QWORD *)(v17 + 56);
  *(_QWORD *)(v16 + 64) = *(_QWORD *)(v17 + 64);
  *(_QWORD *)(v16 + 72) = *(_QWORD *)(v17 + 72);
  *(_QWORD *)(v16 + 80) = *(_QWORD *)(v17 + 80);
  *(_QWORD *)(v16 + 88) = *(_QWORD *)(v17 + 88);
  *(_BYTE *)(v16 + 96) = *(_BYTE *)(v17 + 96);
  *(_QWORD *)(v16 + 104) = *(_QWORD *)(v17 + 104);
  *(_QWORD *)(v16 + 112) = *(_QWORD *)(v17 + 112);
  *(_QWORD *)(v16 + 120) = *(_QWORD *)(v17 + 120);
  *(_QWORD *)(v16 + 128) = *(_QWORD *)(v17 + 128);
  *(_BYTE *)(v16 + 136) = *(_BYTE *)(v17 + 136);
  *(_QWORD *)(v16 + 144) = *(_QWORD *)(v17 + 144);
  *(_QWORD *)(v16 + 152) = *(_QWORD *)(v17 + 152);
  v19 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  v21 = (v20 + 160 + v16) & ~v20;
  v22 = (v20 + 160 + v17) & ~v20;
  (*(void (**)(uint64_t, uint64_t))(v19 + 40))(v21, v22);
  v23 = *(_QWORD *)(v19 + 64) + 7;
  v24 = (v23 + v21) & 0xFFFFFFFFFFFFFFF8;
  v25 = (v23 + v22) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v24 + 24) >= 0xFFFFFFFFuLL)
  {
    if (*(_QWORD *)(v25 + 24) >= 0xFFFFFFFFuLL)
    {
      v26 = *(_BYTE *)(v25 + 16);
      v27 = *(_QWORD *)v24;
      v28 = *(_QWORD *)(v24 + 8);
      v29 = *(_BYTE *)(v24 + 16);
      *(_OWORD *)v24 = *(_OWORD *)v25;
      *(_BYTE *)(v24 + 16) = v26;
      sub_23BEA0F64(v27, v28, v29);
      *(_QWORD *)(v24 + 24) = *(_QWORD *)(v25 + 24);
      swift_bridgeObjectRelease();
      goto LABEL_29;
    }
    sub_23BEA0F64(*(_QWORD *)v24, *(_QWORD *)(v24 + 8), *(_BYTE *)(v24 + 16));
    swift_bridgeObjectRelease();
  }
  v30 = *(_OWORD *)(v25 + 16);
  *(_OWORD *)v24 = *(_OWORD *)v25;
  *(_OWORD *)(v24 + 16) = v30;
LABEL_29:
  v31 = (v24 + 39) & 0xFFFFFFFFFFFFFFF8;
  v32 = (v25 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v31 + 24) >= 0xFFFFFFFFuLL)
  {
    if (*(_QWORD *)(v32 + 24) >= 0xFFFFFFFFuLL)
    {
      v33 = *(_BYTE *)(v32 + 16);
      v34 = *(_QWORD *)v31;
      v35 = *(_QWORD *)(v31 + 8);
      v36 = *(_BYTE *)(v31 + 16);
      *(_OWORD *)v31 = *(_OWORD *)v32;
      *(_BYTE *)(v31 + 16) = v33;
      sub_23BEA0F64(v34, v35, v36);
      *(_QWORD *)(v31 + 24) = *(_QWORD *)(v32 + 24);
      swift_bridgeObjectRelease();
      goto LABEL_34;
    }
    sub_23BEA0F64(*(_QWORD *)v31, *(_QWORD *)(v31 + 8), *(_BYTE *)(v31 + 16));
    swift_bridgeObjectRelease();
  }
  v37 = *(_OWORD *)(v32 + 16);
  *(_OWORD *)v31 = *(_OWORD *)v32;
  *(_OWORD *)(v31 + 16) = v37;
LABEL_34:
  v38 = (v31 + 39) & 0xFFFFFFFFFFFFFFF8;
  v39 = (v32 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v38 + 24) >= 0xFFFFFFFFuLL)
  {
    if (*(_QWORD *)(v39 + 24) >= 0xFFFFFFFFuLL)
    {
      v40 = *(_BYTE *)(v39 + 16);
      v41 = *(_QWORD *)v38;
      v42 = *(_QWORD *)(v38 + 8);
      v43 = *(_BYTE *)(v38 + 16);
      *(_OWORD *)v38 = *(_OWORD *)v39;
      *(_BYTE *)(v38 + 16) = v40;
      sub_23BEA0F64(v41, v42, v43);
      *(_QWORD *)(v38 + 24) = *(_QWORD *)(v39 + 24);
      swift_bridgeObjectRelease();
      goto LABEL_39;
    }
    sub_23BEA0F64(*(_QWORD *)v38, *(_QWORD *)(v38 + 8), *(_BYTE *)(v38 + 16));
    swift_bridgeObjectRelease();
  }
  v44 = *(_OWORD *)(v39 + 16);
  *(_OWORD *)v38 = *(_OWORD *)v39;
  *(_OWORD *)(v38 + 16) = v44;
LABEL_39:
  v45 = (v38 + 39) & 0xFFFFFFFFFFFFFFF8;
  v46 = (v39 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v45 + 24) >= 0xFFFFFFFFuLL)
  {
    if (*(_QWORD *)(v46 + 24) >= 0xFFFFFFFFuLL)
    {
      v47 = *(_BYTE *)(v46 + 16);
      v48 = *(_QWORD *)v45;
      v49 = *(_QWORD *)(v45 + 8);
      v50 = *(_BYTE *)(v45 + 16);
      *(_OWORD *)v45 = *(_OWORD *)v46;
      *(_BYTE *)(v45 + 16) = v47;
      sub_23BEA0F64(v48, v49, v50);
      *(_QWORD *)(v45 + 24) = *(_QWORD *)(v46 + 24);
      swift_bridgeObjectRelease();
      goto LABEL_44;
    }
    sub_23BEA0F64(*(_QWORD *)v45, *(_QWORD *)(v45 + 8), *(_BYTE *)(v45 + 16));
    swift_bridgeObjectRelease();
  }
  v51 = *(_OWORD *)(v46 + 16);
  *(_OWORD *)v45 = *(_OWORD *)v46;
  *(_OWORD *)(v45 + 16) = v51;
LABEL_44:
  v52 = *(_QWORD *)(a3 + 24);
  v53 = *(_QWORD *)(v52 - 8);
  v54 = *(unsigned __int8 *)(v53 + 80);
  v55 = (void *)((v45 + v54 + 32) & ~v54);
  v56 = (void *)((v46 + v54 + 32) & ~v54);
  v57 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v53 + 48);
  v58 = v57(v55, 1, v52);
  v59 = v57(v56, 1, v52);
  if (v58)
  {
    if (!v59)
    {
      (*(void (**)(void *, void *, uint64_t))(v53 + 32))(v55, v56, v52);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v55, 0, 1, v52);
      goto LABEL_53;
    }
  }
  else
  {
    if (!v59)
    {
      (*(void (**)(void *, void *, uint64_t))(v53 + 40))(v55, v56, v52);
      goto LABEL_53;
    }
    (*(void (**)(void *, uint64_t))(v53 + 8))(v55, v52);
  }
  if (*(_DWORD *)(v53 + 84))
    v60 = *(_QWORD *)(v53 + 64);
  else
    v60 = *(_QWORD *)(v53 + 64) + 1;
  memcpy(v55, v56, v60);
LABEL_53:
  if (*(_DWORD *)(v53 + 84))
    v61 = *(_QWORD *)(v53 + 64);
  else
    v61 = *(_QWORD *)(v53 + 64) + 1;
  *(_OWORD *)(((unint64_t)v55 + v61 + 7) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v56 + v61 + 7) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t sub_23BF46850(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;

  v6 = sub_23BFF85F0();
  if (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) <= 8uLL)
    v7 = 8;
  else
    v7 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(_DWORD *)(v8 + 84);
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v11 = *(_DWORD *)(v10 + 84);
  if (v11)
    v12 = v11 - 1;
  else
    v12 = 0;
  if (v9 <= v12)
    v13 = v12;
  else
    v13 = *(_DWORD *)(v8 + 84);
  if (v13 <= 0x7FFFFFFF)
    v13 = 0x7FFFFFFF;
  v14 = *(_QWORD *)(v10 + 64);
  if (!v11)
    ++v14;
  if (!a2)
    return 0;
  v15 = *(unsigned __int8 *)(v8 + 80);
  v16 = *(_QWORD *)(v8 + 64) + 7;
  v17 = *(unsigned __int8 *)(v10 + 80);
  v18 = v17 + 32;
  v19 = v14 + 7;
  if (v13 < a2)
  {
    if (((((v19
           + ((v18
             + ((((((((v16 + (((v7 & 0xFFFFFFFFFFFFFFF8) + v15 + 168) & ~v15)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8)
                 + 39) & 0xFFFFFFFFFFFFFFF8)
               + 39) & 0xFFFFFFFFFFFFFFF8)) & ~v17)) & 0xFFFFFFFFFFFFFFF8)
         + 16) & 0xFFFFFFF8) != 0)
      v20 = 2;
    else
      v20 = a2 - v13 + 1;
    if (v20 >= 0x10000)
      v21 = 4;
    else
      v21 = 2;
    if (v20 < 0x100)
      v21 = 1;
    if (v20 >= 2)
      v22 = v21;
    else
      v22 = 0;
    __asm { BR              X20 }
  }
  v23 = (((a1 + v7 + 8) & 0xFFFFFFFFFFFFFFF8) + v15 + 160) & ~v15;
  if (v9 == v13)
    return (*(uint64_t (**)(unint64_t, _QWORD, _QWORD))(v8 + 48))(v23, *(unsigned int *)(v8 + 84), *(_QWORD *)(a3 + 16));
  v25 = (v18
       + ((((((((v16 + v23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8)) & ~v17;
  if (v12 == v13)
  {
    if (v11 < 2)
      return 0;
    v27 = (*(uint64_t (**)(unint64_t))(v10 + 48))(v25);
    if (v27 >= 2)
      return v27 - 1;
    else
      return 0;
  }
  else
  {
    v26 = *(_QWORD *)((v19 + v25) & 0xFFFFFFFFFFFFF8);
    if (v26 >= 0xFFFFFFFF)
      LODWORD(v26) = -1;
    return (v26 + 1);
  }
}

void sub_23BF46A84(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;

  v8 = sub_23BFF85F0();
  v9 = 0;
  if (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) <= 8uLL)
    v10 = 8;
  else
    v10 = *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64);
  v11 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v12 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v13 = *(_DWORD *)(v12 + 84);
  if (v13)
    v14 = v13 - 1;
  else
    v14 = 0;
  if (*(_DWORD *)(v11 + 84) <= v14)
    v15 = v14;
  else
    v15 = *(_DWORD *)(v11 + 84);
  if (v15 <= 0x7FFFFFFF)
    v15 = 0x7FFFFFFF;
  v16 = *(_QWORD *)(v12 + 64);
  if (!v13)
    ++v16;
  if (v15 < a3)
  {
    if ((((int)v16
         + 7
         + ((*(unsigned __int8 *)(v12 + 80)
           + 32
           + ((((((((*(_DWORD *)(v11 + 64)
                   + 7
                   + (((v10 & 0xFFFFFFF8) + *(unsigned __int8 *)(v11 + 80) + 168) & ~*(unsigned __int8 *)(v11 + 80))) & 0xFFFFFFF8)
                 + 39) & 0xFFFFFFF8)
               + 39) & 0xFFFFFFF8)
             + 39) & 0xFFFFFFF8)) & ~*(unsigned __int8 *)(v12 + 80))) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v17 = a3 - v15 + 1;
    else
      v17 = 2;
    if (v17 >= 0x10000)
      v18 = 4;
    else
      v18 = 2;
    if (v17 < 0x100)
      v18 = 1;
    if (v17 >= 2)
      v9 = v18;
    else
      v9 = 0;
  }
  if (a2 > v15)
  {
    if ((((int)v16
         + 7
         + ((*(unsigned __int8 *)(v12 + 80)
           + 32
           + ((((((((*(_DWORD *)(v11 + 64)
                   + 7
                   + (((v10 & 0xFFFFFFF8) + *(unsigned __int8 *)(v11 + 80) + 168) & ~*(unsigned __int8 *)(v11 + 80))) & 0xFFFFFFF8)
                 + 39) & 0xFFFFFFF8)
               + 39) & 0xFFFFFFF8)
             + 39) & 0xFFFFFFF8)) & ~*(unsigned __int8 *)(v12 + 80))) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      v19 = ~v15 + a2;
      bzero(a1, ((v16+ 7+ ((*(unsigned __int8 *)(v12 + 80)+ 32+ ((((((((*(_QWORD *)(v11 + 64)+ 7+ (((v10 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v11 + 80) + 168) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))) & 0xFFFFFFFFFFFFFFF8)+ 39) & 0xFFFFFFFFFFFFFFF8)+ 39) & 0xFFFFFFFFFFFFFFF8)+ 39) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))) & 0xFFFFFFFFFFFFFFF8)+ 16);
      *a1 = v19;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X7 }
}

void sub_23BF46C08(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void (*v19)(unint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;

  *(_BYTE *)(v16 + v17) = 0;
  if ((_DWORD)v15)
  {
    v18 = (((v16 + v11 + 8) & 0xFFFFFFFFFFFFFFF8) + v13 + 160) & a5;
    if ((_DWORD)v6 == v8)
    {
      v19 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
      v20 = v15;
      a2 = v6;
      a3 = a6;
LABEL_6:
      v19(v18, v20, a2, a3);
      return;
    }
    v18 = (a1
         + ((((((((v12 + v18) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8)) & a4;
    if (v9 == v8)
    {
      v20 = (v15 + 1);
      v19 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);
      goto LABEL_6;
    }
    v21 = (_QWORD *)((v14 + v18) & 0xFFFFFFFFFFFFFFF8);
    if ((v15 & 0x80000000) != 0)
    {
      v22 = v15 ^ 0x80000000;
      v21[1] = 0;
    }
    else
    {
      v22 = (v15 - 1);
    }
    *v21 = v22;
  }
}

void type metadata accessor for StandardHorizontalStackView()
{
  JUMPOUT(0x2426150F0);
}

unint64_t sub_23BF46D00()
{
  unint64_t result;

  result = qword_256AE5BB8;
  if (!qword_256AE5BB8)
  {
    result = MEMORY[0x242615198](&unk_23C000870, &type metadata for StandardHorizontalStackViewLayout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE5BB8);
  }
  return result;
}

unint64_t sub_23BF46D48()
{
  unint64_t result;

  result = qword_256AE5BC0;
  if (!qword_256AE5BC0)
  {
    result = MEMORY[0x242615198](&unk_23C0007E0, &type metadata for StandardHorizontalStackViewLayout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE5BC0);
  }
  return result;
}

unint64_t sub_23BF46D90()
{
  unint64_t result;

  result = qword_256AE5BC8;
  if (!qword_256AE5BC8)
  {
    result = MEMORY[0x242615198](&unk_23C000808, &type metadata for StandardHorizontalStackViewLayout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE5BC8);
  }
  return result;
}

uint64_t sub_23BF46DD4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23BF46E08()
{
  return sub_23BF46FC0((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BF4161C);
}

unint64_t sub_23BF46E14()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_256AE5BF8;
  if (!qword_256AE5BF8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE5BE8);
    v2 = sub_23BF46E78();
    result = MEMORY[0x242615198](MEMORY[0x24BDF5578], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_256AE5BF8);
  }
  return result;
}

unint64_t sub_23BF46E78()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AE5C00;
  if (!qword_256AE5C00)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE5BE0);
    v2[0] = sub_23BF47528(&qword_256AE5C08, &qword_256AE5BD8, (uint64_t (*)(void))sub_23BF46F1C, MEMORY[0x24BDF1050]);
    v2[1] = sub_23BEA1BB8((unint64_t *)&qword_256AE3908, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088], MEMORY[0x24BDF1078]);
    result = MEMORY[0x242615198](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AE5C00);
  }
  return result;
}

unint64_t sub_23BF46F1C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AE5C10;
  if (!qword_256AE5C10)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE5BD0);
    v2[0] = sub_23BEA1BB8((unint64_t *)&qword_256AE3418, (uint64_t (*)(uint64_t))MEMORY[0x24BDF4918], MEMORY[0x24BDF4900]);
    v2[1] = MEMORY[0x24BDECC60];
    result = MEMORY[0x242615198](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AE5C10);
  }
  return result;
}

uint64_t sub_23BF46FA8()
{
  return sub_23BF46FC0((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BF42194);
}

uint64_t sub_23BF46FB4()
{
  return sub_23BF46FC0((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BF424C0);
}

uint64_t sub_23BF46FC0(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[6], v1[2], v1[3], v1[4], v1[5]);
}

void sub_23BF46FD8()
{
  type metadata accessor for StandardHorizontalStackView();
}

void sub_23BF47010()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_23BF42934(v1, v2, v3, v4, v0);
}

void sub_23BF47050()
{
  sub_23BF47068((void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BF43FBC);
}

void sub_23BF4705C()
{
  sub_23BF47068((void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BF43A18);
}

void sub_23BF47068(void (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  a1(v1[8], v1[9], v1[10], v1[11], v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
  JUMPOUT(0x23BF47094);
}

void sub_23BF470A0(uint64_t a1@<X8>)
{
  uint64_t *v1;

  sub_23BF443B4(v1[8], v1[2], v1[3], v1[5], v1[6], a1);
}

uint64_t *sub_23BF470B4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = a1[7];
  v3 = a1[8];
  v4 = a1[9];
  v5 = a1[10];
  v6 = a1[16];
  v9 = a1[15];
  v10 = a1[14];
  v8 = a1[17];
  sub_23BF47180(*a1, a1[1], a1[2], a1[3]);
  sub_23BF47180(v2, v3, v4, v5);
  sub_23BF47180(v10, v9, v6, v8);
  return a1;
}

uint64_t sub_23BF47180(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_23BEA0F64(result, a2, a3 & 1);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_23BF471BC(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_23BEA0EAC(result, a2, a3 & 1);
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_23BF471F8(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *(_QWORD *)(a1 + 80);
  v5 = *(_QWORD *)(a1 + 88);
  v6 = *(_QWORD *)(a1 + 96);
  v7 = *(_QWORD *)(a1 + 104);
  v8 = *(_QWORD *)(a1 + 112);
  v9 = *(_QWORD *)(a1 + 120);
  v17 = *(_QWORD *)(a1 + 144);
  v18 = *(_QWORD *)(a1 + 136);
  v15 = *(_QWORD *)(a1 + 160);
  v16 = *(_QWORD *)(a1 + 152);
  v13 = *(_QWORD *)(a1 + 176);
  v14 = *(_QWORD *)(a1 + 168);
  v10 = *(unsigned __int8 *)(a1 + 128);
  v11 = *(unsigned __int8 *)(a1 + 184);
  a2(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(unsigned __int8 *)(a1 + 72));
  a2(v4, v5, v6, v7, v8, v9, v10);
  a2(v18, v17, v16, v15, v14, v13, v11);
  return a1;
}

void objectdestroyTm_5()
{
  type metadata accessor for StandardHorizontalStackView();
}

uint64_t sub_23BF47314(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v4 = *(unsigned __int8 *)(*((_QWORD *)a1 - 1) + 80);
  v5 = (v4 + 48) & ~v4;
  v6 = v1 + v5;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3728);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = sub_23BFF85F0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v1 + v5, v7);
  }
  else
  {
    swift_release();
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v6 + a1[14], v2);
  v8 = v6 + a1[15];
  if (*(_QWORD *)(v8 + 24))
  {
    sub_23BEA0F64(*(_QWORD *)v8, *(_QWORD *)(v8 + 8), *(_BYTE *)(v8 + 16));
    swift_bridgeObjectRelease();
  }
  v9 = v6 + a1[16];
  if (*(_QWORD *)(v9 + 24))
  {
    sub_23BEA0F64(*(_QWORD *)v9, *(_QWORD *)(v9 + 8), *(_BYTE *)(v9 + 16));
    swift_bridgeObjectRelease();
  }
  v10 = v6 + a1[17];
  if (*(_QWORD *)(v10 + 24))
  {
    sub_23BEA0F64(*(_QWORD *)v10, *(_QWORD *)(v10 + 8), *(_BYTE *)(v10 + 16));
    swift_bridgeObjectRelease();
  }
  v11 = v6 + a1[18];
  if (*(_QWORD *)(v11 + 24))
  {
    sub_23BEA0F64(*(_QWORD *)v11, *(_QWORD *)(v11 + 8), *(_BYTE *)(v11 + 16));
    swift_bridgeObjectRelease();
  }
  v12 = v6 + a1[19];
  v13 = *(_QWORD *)(v15 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v13 + 48))(v12, 1))
    (*(void (**)(uint64_t))(v13 + 8))(v12);
  swift_release();
  return swift_deallocObject();
}

void sub_23BF474A4()
{
  type metadata accessor for StandardHorizontalStackView();
}

void sub_23BF474D8()
{
  type metadata accessor for StandardHorizontalStackView();
}

uint64_t sub_23BF474FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(void))(v1 + *(int *)(a1 + 80) + v2))();
}

uint64_t sub_23BF47528(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  result = *a1;
  if (!result)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v9[0] = a3();
    v9[1] = a4;
    result = MEMORY[0x242615198](MEMORY[0x24BDED308], v8, v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23BF47590()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256AE5C58;
  if (!qword_256AE5C58)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE5C60);
    v2 = sub_23BEA1F94(&qword_256AE5610, &qword_256AE5618, MEMORY[0x24BDF1028]);
    v3[0] = MEMORY[0x24BDF40E8];
    v3[1] = v2;
    result = MEMORY[0x242615198](MEMORY[0x24BDED308], v1, v3);
    atomic_store(result, (unint64_t *)&qword_256AE5C58);
  }
  return result;
}

uint64_t sub_23BF47614@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_23BFF87D0();
  *a1 = result;
  return result;
}

uint64_t sub_23BF4763C()
{
  swift_retain();
  return sub_23BFF87DC();
}

uint64_t sub_23BF47664@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_23BFF8788();
  *a1 = result;
  return result;
}

uint64_t sub_23BF4768C()
{
  swift_retain();
  return sub_23BFF8794();
}

uint64_t sub_23BF476BC(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000012 && a2 == 0x800000023C01E950 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000023C01EFF0 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000023C01F010 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x4D746E65746E6F63 && a2 == 0xEE00736E69677261 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x446E6F6974636573 && a2 == 0xEE00797469736E65 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000023C01F030 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6E694C656C746974 && a2 == 0xEE0074696D694C65 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000023C01EF30 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000023C01EF50 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x486B726F77747261 && a2 == 0xED00007468676965 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x76656843776F6873 && a2 == 0xEB000000006E6F72 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000023C01F050 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x800000023C01F070)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else
  {
    v5 = sub_23BFF9964();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 12;
    else
      return 13;
  }
}

uint64_t sub_23BF47C48(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[2];
  _QWORD v36[2];
  _QWORD v37[2];
  _QWORD v38[2];
  _QWORD v39[2];

  v1 = *(_QWORD *)(a1 + 16);
  v2 = sub_23BFF862C();
  v3 = sub_23BFF862C();
  v39[0] = v1;
  v39[1] = MEMORY[0x24BDEEC40];
  v4 = MEMORY[0x24BDED308];
  v38[0] = MEMORY[0x242615198](MEMORY[0x24BDED308], v2, v39);
  v38[1] = sub_23BF3EAF8();
  v5 = MEMORY[0x242615198](v4, v3, v38);
  v31 = v3;
  v32 = v5;
  MEMORY[0x24261512C](255, &v31, MEMORY[0x24BDF30F0], 0);
  v6 = sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE5BF0);
  swift_getTupleTypeMetadata2();
  v7 = sub_23BFF9220();
  v8 = MEMORY[0x24BDF5428];
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v7);
  v9 = sub_23BFF9058();
  v31 = v3;
  v32 = v5;
  v37[0] = swift_getOpaqueTypeConformance2();
  v37[1] = MEMORY[0x24BDECC60];
  MEMORY[0x242615198](v4, v6, v37);
  sub_23BFF9058();
  swift_getTupleTypeMetadata2();
  v10 = sub_23BFF9220();
  MEMORY[0x242615198](v8, v10);
  v11 = sub_23BFF90AC();
  v12 = sub_23BFF8968();
  v13 = MEMORY[0x24BDF4498];
  v14 = MEMORY[0x242615198](MEMORY[0x24BDF4498], v9);
  v15 = MEMORY[0x24BDF4700];
  v16 = MEMORY[0x242615198](MEMORY[0x24BDF4700], v11);
  v36[0] = v14;
  v36[1] = v16;
  MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v12, v36);
  v17 = sub_23BFF90AC();
  MEMORY[0x242615198](v15, v17);
  v18 = sub_23BFF9040();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3538);
  v19 = sub_23BFF862C();
  v20 = sub_23BFF8680();
  v21 = (uint64_t (*)(uint64_t))MEMORY[0x24BDED868];
  v22 = MEMORY[0x242615198](MEMORY[0x24BDF43B0], v18);
  v23 = sub_23BEA1F94(&qword_256AE3540, &qword_256AE3538, MEMORY[0x24BDEFAD8]);
  v35[0] = v22;
  v35[1] = v23;
  v24 = MEMORY[0x242615198](v4, v19, v35);
  v25 = sub_23BEA1BB8(&qword_256AE3558, v21, MEMORY[0x24BDED858]);
  v31 = v19;
  v32 = v20;
  v33 = v24;
  v34 = v25;
  MEMORY[0x24261512C](255, &v31, MEMORY[0x24BDF22B8], 0);
  swift_getTupleTypeMetadata2();
  sub_23BFF9220();
  sub_23BFF96A0();
  swift_getTupleTypeMetadata2();
  v26 = sub_23BFF9220();
  MEMORY[0x242615198](v8, v26);
  v27 = sub_23BFF9058();
  v28 = MEMORY[0x242615198](v13, v27);
  v31 = v27;
  v32 = v28;
  MEMORY[0x24261512C](255, &v31, MEMORY[0x24BDF2F10], 0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE5BE8);
  swift_getTupleTypeMetadata2();
  v29 = sub_23BFF9220();
  return MEMORY[0x242615198](v8, v29);
}

uint64_t CanvasItemPlaceholder.identifier.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t CanvasItemPlaceholder.content.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v5[16];

  sub_23BEA44DC((__int128 *)(v2 + *(int *)(a1 + 52)), (uint64_t)v5);
  return sub_23BEA44DC(v5, a2);
}

void CanvasItemPlaceholder.init(identifier:content:)(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _BYTE v7[256];

  sub_23BEA44DC(a2, (uint64_t)v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a4, a1, a3);
  type metadata accessor for CanvasItemPlaceholder();
}

uint64_t sub_23BF48110(uint64_t a1)
{
  uint64_t v1;
  __int128 v3;

  return sub_23BEA44DC(&v3, v1 + *(int *)(a1 + 52));
}

void type metadata accessor for CanvasItemPlaceholder()
{
  JUMPOUT(0x2426150F0);
}

uint64_t sub_23BF48148(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746E65746E6F63 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23BFF9964();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23BF48244(char a1)
{
  if ((a1 & 1) != 0)
    return 0x746E65746E6F63;
  else
    return 0x696669746E656469;
}

BOOL sub_23BF48280(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_23BEBF13C(*a1, *a2);
}

uint64_t sub_23BF48298()
{
  return sub_23BEBF3D0();
}

uint64_t sub_23BF482AC()
{
  return sub_23BEBF14C();
}

uint64_t sub_23BF482C0()
{
  sub_23BFF99D0();
  sub_23BEBF14C();
  return sub_23BFF9A00();
}

uint64_t sub_23BF48308()
{
  char *v0;

  return sub_23BF48244(*v0);
}

uint64_t sub_23BF4831C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BF48148(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BF4834C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23BEC1558();
  *a1 = result;
  return result;
}

uint64_t sub_23BF4837C(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23C000C78, a1);
  return sub_23BFF9A30();
}

uint64_t sub_23BF483B0(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23C000C78, a1);
  return sub_23BFF9A3C();
}

void CanvasItemPlaceholder.encode(to:)()
{
  type metadata accessor for CanvasItemPlaceholder.CodingKeys();
}

uint64_t sub_23BF48434(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  MEMORY[0x242615198](&unk_23C000C78, a1);
  v4 = sub_23BFF994C();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v11 - v6;
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  v8 = *(_QWORD *)(v1 + 48);
  sub_23BFF9A18();
  *(_BYTE *)(v3 - 97) = 0;
  v9 = *(_QWORD *)(v3 - 72);
  sub_23BFF9940();
  if (!v9)
  {
    sub_23BEA44DC((__int128 *)(v8 + *(int *)(*(_QWORD *)(v1 + 8) + 52)), v1 + 320);
    sub_23BEA44DC((__int128 *)(v1 + 320), v1 + 64);
    *(_BYTE *)(v1 + 63) = 1;
    sub_23BF48584();
    sub_23BFF9940();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void type metadata accessor for CanvasItemPlaceholder.CodingKeys()
{
  JUMPOUT(0x2426150F0);
}

unint64_t sub_23BF48584()
{
  unint64_t result;

  result = qword_256AE5C68;
  if (!qword_256AE5C68)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for LazyCanvasItemContent, &type metadata for LazyCanvasItemContent);
    atomic_store(result, (unint64_t *)&qword_256AE5C68);
  }
  return result;
}

void CanvasItemPlaceholder.init(from:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[76];

  v8[1] = a3;
  v8[3] = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8[5] = (char *)v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8[43] = v4;
  v8[44] = v5;
  v8[45] = v6;
  v8[46] = v7;
  type metadata accessor for CanvasItemPlaceholder.CodingKeys();
}

void sub_23BF48650(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1[9] = MEMORY[0x242615198](&unk_23C000C78, a1);
  v6 = sub_23BFF98E0();
  v1[8] = v6;
  v1[2] = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v1[6] = v3;
  v1[43] = v3;
  v1[44] = v2;
  v1[4] = v2;
  v1[45] = v5;
  v1[46] = v4;
  type metadata accessor for CanvasItemPlaceholder();
}

uint64_t sub_23BF486C4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v6 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v14 - v7;
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  *(_QWORD *)(v1 + 56) = v3;
  v9 = *(_QWORD *)(v1 + 80);
  sub_23BFF9A0C();
  if (v9)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  v10 = *(_QWORD *)(v1 + 16);
  v11 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 80) = v6;
  *(_BYTE *)(v1 + 344) = 0;
  sub_23BFF98C8();
  (*(void (**)(char *, _QWORD, _QWORD))(v11 + 32))(v8, *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
  *(_BYTE *)(v4 - 65) = 1;
  sub_23BF48864();
  sub_23BFF98C8();
  (*(void (**)(_QWORD, _QWORD))(v10 + 8))(*(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64));
  sub_23BEA44DC((__int128 *)(v1 + 344), v1 + 88);
  sub_23BEA44DC((__int128 *)(v1 + 88), (uint64_t)&v8[*(int *)(a1 + 52)]);
  v12 = *(_QWORD *)(v1 + 80);
  (*(void (**)(_QWORD, char *, uint64_t))(v12 + 16))(*(_QWORD *)(v1 + 8), v8, a1);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v8, a1);
}

unint64_t sub_23BF48864()
{
  unint64_t result;

  result = qword_256AE5C70[0];
  if (!qword_256AE5C70[0])
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for LazyCanvasItemContent, &type metadata for LazyCanvasItemContent);
    atomic_store(result, qword_256AE5C70);
  }
  return result;
}

void sub_23BF488A8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  CanvasItemPlaceholder.init(from:)(a1, *(_QWORD *)(a2 + 16), a3);
}

void sub_23BF488C8()
{
  CanvasItemPlaceholder.encode(to:)();
}

void CanvasItemPlaceholder.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  __int128 v5[16];

  sub_23BFF9388();
  sub_23BEA44DC((__int128 *)(v2 + *(int *)(a2 + 52)), (uint64_t)v5);
  sub_23BEA44DC(v5, (uint64_t)&v4);
  LazyCanvasItemContent.hash(into:)();
}

uint64_t static CanvasItemPlaceholder.== infix(_:_:)()
{
  if ((sub_23BFF93AC() & 1) != 0)
    type metadata accessor for CanvasItemPlaceholder();
  return 0;
}

uint64_t CanvasItemPlaceholder.hashValue.getter(uint64_t a1)
{
  _BYTE v3[72];

  sub_23BFF99D0();
  CanvasItemPlaceholder.hash(into:)((uint64_t)v3, a1);
  return sub_23BFF9A00();
}

uint64_t sub_23BF48A58(uint64_t a1, uint64_t a2)
{
  _BYTE v4[72];

  sub_23BFF99D0();
  CanvasItemPlaceholder.hash(into:)((uint64_t)v4, a2);
  return sub_23BFF9A00();
}

uint64_t sub_23BF48A98()
{
  return static CanvasItemPlaceholder.== infix(_:_:)();
}

void sub_23BF48AA8()
{
  JUMPOUT(0x242615198);
}

uint64_t sub_23BF48AB8()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_23BF48B2C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 249 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v12 = *(unsigned __int8 *)(v11 + 248);
    if (v12 >= 0xB)
      v12 = *(_DWORD *)v11 + 11;
    v13 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    switch(v12)
    {
      case 0u:
        v14 = *(_OWORD *)v11;
        v15 = *(_OWORD *)(v11 + 16);
        v16 = *(_OWORD *)(v11 + 48);
        *(_OWORD *)(v13 + 32) = *(_OWORD *)(v11 + 32);
        *(_OWORD *)(v13 + 48) = v16;
        *(_OWORD *)v13 = v14;
        *(_OWORD *)(v13 + 16) = v15;
        v17 = *(_OWORD *)(v11 + 64);
        v18 = *(_OWORD *)(v11 + 80);
        v19 = *(_OWORD *)(v11 + 112);
        *(_OWORD *)(v13 + 96) = *(_OWORD *)(v11 + 96);
        *(_OWORD *)(v13 + 112) = v19;
        *(_OWORD *)(v13 + 64) = v17;
        *(_OWORD *)(v13 + 80) = v18;
        v20 = *(_OWORD *)(v11 + 128);
        v21 = *(_OWORD *)(v11 + 144);
        v22 = *(_OWORD *)(v11 + 176);
        *(_OWORD *)(v13 + 160) = *(_OWORD *)(v11 + 160);
        *(_OWORD *)(v13 + 176) = v22;
        *(_OWORD *)(v13 + 128) = v20;
        *(_OWORD *)(v13 + 144) = v21;
        v23 = *(_OWORD *)(v11 + 192);
        v24 = *(_OWORD *)(v11 + 208);
        v25 = *(_OWORD *)(v11 + 224);
        *(_QWORD *)(v13 + 240) = *(_QWORD *)(v11 + 240);
        *(_OWORD *)(v13 + 208) = v24;
        *(_OWORD *)(v13 + 224) = v25;
        *(_OWORD *)(v13 + 192) = v23;
        *(_BYTE *)(v13 + 248) = 0;
        break;
      case 1u:
        v38 = *(_OWORD *)(v11 + 16);
        *(_OWORD *)v13 = *(_OWORD *)v11;
        *(_OWORD *)(v13 + 16) = v38;
        v39 = *(_OWORD *)(v11 + 32);
        v40 = *(_OWORD *)(v11 + 48);
        v41 = *(_OWORD *)(v11 + 80);
        *(_OWORD *)(v13 + 64) = *(_OWORD *)(v11 + 64);
        *(_OWORD *)(v13 + 80) = v41;
        *(_OWORD *)(v13 + 32) = v39;
        *(_OWORD *)(v13 + 48) = v40;
        v42 = *(_OWORD *)(v11 + 96);
        v43 = *(_OWORD *)(v11 + 112);
        v44 = *(_OWORD *)(v11 + 144);
        *(_OWORD *)(v13 + 128) = *(_OWORD *)(v11 + 128);
        *(_OWORD *)(v13 + 144) = v44;
        *(_OWORD *)(v13 + 96) = v42;
        *(_OWORD *)(v13 + 112) = v43;
        v45 = *(_OWORD *)(v11 + 160);
        v46 = *(_OWORD *)(v11 + 176);
        v47 = *(_OWORD *)(v11 + 192);
        *(_QWORD *)(v13 + 208) = *(_QWORD *)(v11 + 208);
        *(_OWORD *)(v13 + 176) = v46;
        *(_OWORD *)(v13 + 192) = v47;
        *(_OWORD *)(v13 + 160) = v45;
        *(_BYTE *)(v13 + 248) = 1;
        break;
      case 2u:
        v48 = *(_OWORD *)v11;
        v49 = *(_OWORD *)(v11 + 16);
        v50 = *(_OWORD *)(v11 + 48);
        *(_OWORD *)(v13 + 32) = *(_OWORD *)(v11 + 32);
        *(_OWORD *)(v13 + 48) = v50;
        *(_OWORD *)v13 = v48;
        *(_OWORD *)(v13 + 16) = v49;
        *(_BYTE *)(v13 + 248) = 2;
        break;
      case 3u:
        *(_OWORD *)v13 = *(_OWORD *)v11;
        *(_BYTE *)(v13 + 248) = 3;
        break;
      case 4u:
        v51 = *(_OWORD *)v11;
        *(_QWORD *)(v13 + 16) = *(_QWORD *)(v11 + 16);
        *(_OWORD *)v13 = v51;
        *(_BYTE *)(v13 + 248) = 4;
        break;
      case 5u:
        *(_OWORD *)v13 = *(_OWORD *)v11;
        *(_BYTE *)(v13 + 248) = 5;
        break;
      case 6u:
        v52 = *(_OWORD *)v11;
        v53 = *(_OWORD *)(v11 + 32);
        *(_OWORD *)(v13 + 16) = *(_OWORD *)(v11 + 16);
        *(_OWORD *)(v13 + 32) = v53;
        *(_OWORD *)v13 = v52;
        v54 = *(_OWORD *)(v11 + 48);
        v55 = *(_OWORD *)(v11 + 64);
        v56 = *(_OWORD *)(v11 + 80);
        *(_QWORD *)(v13 + 96) = *(_QWORD *)(v11 + 96);
        *(_OWORD *)(v13 + 64) = v55;
        *(_OWORD *)(v13 + 80) = v56;
        *(_OWORD *)(v13 + 48) = v54;
        *(_BYTE *)(v13 + 248) = 6;
        break;
      case 7u:
        v57 = *(_OWORD *)(v11 + 16);
        *(_OWORD *)v13 = *(_OWORD *)v11;
        *(_OWORD *)(v13 + 16) = v57;
        v58 = *(_OWORD *)(v11 + 32);
        v59 = *(_OWORD *)(v11 + 48);
        v60 = *(_OWORD *)(v11 + 80);
        *(_OWORD *)(v13 + 64) = *(_OWORD *)(v11 + 64);
        *(_OWORD *)(v13 + 80) = v60;
        *(_OWORD *)(v13 + 32) = v58;
        *(_OWORD *)(v13 + 48) = v59;
        v61 = *(_OWORD *)(v11 + 96);
        v62 = *(_OWORD *)(v11 + 112);
        v63 = *(_OWORD *)(v11 + 144);
        *(_OWORD *)(v13 + 128) = *(_OWORD *)(v11 + 128);
        *(_OWORD *)(v13 + 144) = v63;
        *(_OWORD *)(v13 + 96) = v61;
        *(_OWORD *)(v13 + 112) = v62;
        *(_BYTE *)(v13 + 248) = 7;
        break;
      case 8u:
        v64 = *(_OWORD *)v11;
        v65 = *(_OWORD *)(v11 + 16);
        v66 = *(_OWORD *)(v11 + 32);
        *(_QWORD *)(v13 + 48) = *(_QWORD *)(v11 + 48);
        *(_OWORD *)(v13 + 16) = v65;
        *(_OWORD *)(v13 + 32) = v66;
        *(_OWORD *)v13 = v64;
        *(_BYTE *)(v13 + 248) = 8;
        break;
      case 9u:
        v67 = *(_OWORD *)v11;
        v68 = *(_OWORD *)(v11 + 16);
        v69 = *(_OWORD *)(v11 + 48);
        *(_OWORD *)(v13 + 32) = *(_OWORD *)(v11 + 32);
        *(_OWORD *)(v13 + 48) = v69;
        *(_OWORD *)v13 = v67;
        *(_OWORD *)(v13 + 16) = v68;
        *(_BYTE *)(v13 + 248) = 9;
        break;
      case 0xAu:
        v70 = *(_OWORD *)v11;
        v71 = *(_OWORD *)(v11 + 16);
        v72 = *(_OWORD *)(v11 + 48);
        *(_OWORD *)(v13 + 32) = *(_OWORD *)(v11 + 32);
        *(_OWORD *)(v13 + 48) = v72;
        *(_OWORD *)v13 = v70;
        *(_OWORD *)(v13 + 16) = v71;
        v73 = *(_OWORD *)(v11 + 64);
        v74 = *(_OWORD *)(v11 + 80);
        v75 = *(_OWORD *)(v11 + 112);
        *(_OWORD *)(v13 + 96) = *(_OWORD *)(v11 + 96);
        *(_OWORD *)(v13 + 112) = v75;
        *(_OWORD *)(v13 + 64) = v73;
        *(_OWORD *)(v13 + 80) = v74;
        *(_BYTE *)(v13 + 248) = 10;
        break;
      default:
        v26 = *(_OWORD *)v11;
        v27 = *(_OWORD *)(v11 + 16);
        v28 = *(_OWORD *)(v11 + 48);
        *(_OWORD *)(v13 + 32) = *(_OWORD *)(v11 + 32);
        *(_OWORD *)(v13 + 48) = v28;
        *(_OWORD *)v13 = v26;
        *(_OWORD *)(v13 + 16) = v27;
        v29 = *(_OWORD *)(v11 + 64);
        v30 = *(_OWORD *)(v11 + 80);
        v31 = *(_OWORD *)(v11 + 112);
        *(_OWORD *)(v13 + 96) = *(_OWORD *)(v11 + 96);
        *(_OWORD *)(v13 + 112) = v31;
        *(_OWORD *)(v13 + 64) = v29;
        *(_OWORD *)(v13 + 80) = v30;
        v32 = *(_OWORD *)(v11 + 128);
        v33 = *(_OWORD *)(v11 + 144);
        v34 = *(_OWORD *)(v11 + 176);
        *(_OWORD *)(v13 + 160) = *(_OWORD *)(v11 + 160);
        *(_OWORD *)(v13 + 176) = v34;
        *(_OWORD *)(v13 + 128) = v32;
        *(_OWORD *)(v13 + 144) = v33;
        v35 = *(_OWORD *)(v11 + 192);
        v36 = *(_OWORD *)(v11 + 208);
        v37 = *(_OWORD *)(v11 + 224);
        *(_OWORD *)(v13 + 233) = *(_OWORD *)(v11 + 233);
        *(_OWORD *)(v13 + 208) = v36;
        *(_OWORD *)(v13 + 224) = v37;
        *(_OWORD *)(v13 + 192) = v35;
        break;
    }
  }
  return v4;
}

uint64_t sub_23BF48E24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  char v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = v6 + a1;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(unsigned __int8 *)(v8 + 248);
  if (v9 >= 0xB)
    v9 = *(_DWORD *)v8 + 11;
  v10 = v7 & 0xFFFFFFFFFFFFFFF8;
  switch(v9)
  {
    case 0u:
      v11 = *(_OWORD *)v8;
      v12 = *(_OWORD *)(v8 + 16);
      v13 = *(_OWORD *)(v8 + 48);
      *(_OWORD *)(v10 + 32) = *(_OWORD *)(v8 + 32);
      *(_OWORD *)(v10 + 48) = v13;
      *(_OWORD *)v10 = v11;
      *(_OWORD *)(v10 + 16) = v12;
      v14 = *(_OWORD *)(v8 + 64);
      v15 = *(_OWORD *)(v8 + 80);
      v16 = *(_OWORD *)(v8 + 112);
      *(_OWORD *)(v10 + 96) = *(_OWORD *)(v8 + 96);
      *(_OWORD *)(v10 + 112) = v16;
      *(_OWORD *)(v10 + 64) = v14;
      *(_OWORD *)(v10 + 80) = v15;
      v17 = *(_OWORD *)(v8 + 128);
      v18 = *(_OWORD *)(v8 + 144);
      v19 = *(_OWORD *)(v8 + 176);
      *(_OWORD *)(v10 + 160) = *(_OWORD *)(v8 + 160);
      *(_OWORD *)(v10 + 176) = v19;
      *(_OWORD *)(v10 + 128) = v17;
      *(_OWORD *)(v10 + 144) = v18;
      v20 = *(_OWORD *)(v8 + 192);
      v21 = *(_OWORD *)(v8 + 208);
      v22 = *(_OWORD *)(v8 + 224);
      *(_QWORD *)(v10 + 240) = *(_QWORD *)(v8 + 240);
      *(_OWORD *)(v10 + 208) = v21;
      *(_OWORD *)(v10 + 224) = v22;
      *(_OWORD *)(v10 + 192) = v20;
      *(_BYTE *)(v10 + 248) = 0;
      return a1;
    case 1u:
      v35 = *(_OWORD *)(v8 + 16);
      *(_OWORD *)v10 = *(_OWORD *)v8;
      *(_OWORD *)(v10 + 16) = v35;
      v36 = *(_OWORD *)(v8 + 32);
      v37 = *(_OWORD *)(v8 + 48);
      v38 = *(_OWORD *)(v8 + 80);
      *(_OWORD *)(v10 + 64) = *(_OWORD *)(v8 + 64);
      *(_OWORD *)(v10 + 80) = v38;
      *(_OWORD *)(v10 + 32) = v36;
      *(_OWORD *)(v10 + 48) = v37;
      v39 = *(_OWORD *)(v8 + 96);
      v40 = *(_OWORD *)(v8 + 112);
      v41 = *(_OWORD *)(v8 + 144);
      *(_OWORD *)(v10 + 128) = *(_OWORD *)(v8 + 128);
      *(_OWORD *)(v10 + 144) = v41;
      *(_OWORD *)(v10 + 96) = v39;
      *(_OWORD *)(v10 + 112) = v40;
      v42 = *(_OWORD *)(v8 + 160);
      v43 = *(_OWORD *)(v8 + 176);
      v44 = *(_OWORD *)(v8 + 192);
      *(_QWORD *)(v10 + 208) = *(_QWORD *)(v8 + 208);
      *(_OWORD *)(v10 + 176) = v43;
      *(_OWORD *)(v10 + 192) = v44;
      *(_OWORD *)(v10 + 160) = v42;
      v45 = 1;
      goto LABEL_16;
    case 2u:
      v46 = *(_OWORD *)v8;
      v47 = *(_OWORD *)(v8 + 16);
      v48 = *(_OWORD *)(v8 + 48);
      *(_OWORD *)(v10 + 32) = *(_OWORD *)(v8 + 32);
      *(_OWORD *)(v10 + 48) = v48;
      *(_OWORD *)v10 = v46;
      *(_OWORD *)(v10 + 16) = v47;
      v45 = 2;
      goto LABEL_16;
    case 3u:
      *(_OWORD *)v10 = *(_OWORD *)v8;
      v45 = 3;
      goto LABEL_16;
    case 4u:
      v49 = *(_OWORD *)v8;
      *(_QWORD *)(v10 + 16) = *(_QWORD *)(v8 + 16);
      *(_OWORD *)v10 = v49;
      v45 = 4;
      goto LABEL_16;
    case 5u:
      *(_OWORD *)v10 = *(_OWORD *)v8;
      v45 = 5;
      goto LABEL_16;
    case 6u:
      v50 = *(_OWORD *)v8;
      v51 = *(_OWORD *)(v8 + 32);
      *(_OWORD *)(v10 + 16) = *(_OWORD *)(v8 + 16);
      *(_OWORD *)(v10 + 32) = v51;
      *(_OWORD *)v10 = v50;
      v52 = *(_OWORD *)(v8 + 48);
      v53 = *(_OWORD *)(v8 + 64);
      v54 = *(_OWORD *)(v8 + 80);
      *(_QWORD *)(v10 + 96) = *(_QWORD *)(v8 + 96);
      *(_OWORD *)(v10 + 64) = v53;
      *(_OWORD *)(v10 + 80) = v54;
      *(_OWORD *)(v10 + 48) = v52;
      v45 = 6;
      goto LABEL_16;
    case 7u:
      v55 = *(_OWORD *)(v8 + 16);
      *(_OWORD *)v10 = *(_OWORD *)v8;
      *(_OWORD *)(v10 + 16) = v55;
      v56 = *(_OWORD *)(v8 + 32);
      v57 = *(_OWORD *)(v8 + 48);
      v58 = *(_OWORD *)(v8 + 80);
      *(_OWORD *)(v10 + 64) = *(_OWORD *)(v8 + 64);
      *(_OWORD *)(v10 + 80) = v58;
      *(_OWORD *)(v10 + 32) = v56;
      *(_OWORD *)(v10 + 48) = v57;
      v59 = *(_OWORD *)(v8 + 96);
      v60 = *(_OWORD *)(v8 + 112);
      v61 = *(_OWORD *)(v8 + 144);
      *(_OWORD *)(v10 + 128) = *(_OWORD *)(v8 + 128);
      *(_OWORD *)(v10 + 144) = v61;
      *(_OWORD *)(v10 + 96) = v59;
      *(_OWORD *)(v10 + 112) = v60;
      v45 = 7;
      goto LABEL_16;
    case 8u:
      v62 = *(_OWORD *)v8;
      v63 = *(_OWORD *)(v8 + 16);
      v64 = *(_OWORD *)(v8 + 32);
      *(_QWORD *)(v10 + 48) = *(_QWORD *)(v8 + 48);
      *(_OWORD *)(v10 + 16) = v63;
      *(_OWORD *)(v10 + 32) = v64;
      *(_OWORD *)v10 = v62;
      v45 = 8;
      goto LABEL_16;
    case 9u:
      v65 = *(_OWORD *)v8;
      v66 = *(_OWORD *)(v8 + 16);
      v67 = *(_OWORD *)(v8 + 48);
      *(_OWORD *)(v10 + 32) = *(_OWORD *)(v8 + 32);
      *(_OWORD *)(v10 + 48) = v67;
      *(_OWORD *)v10 = v65;
      *(_OWORD *)(v10 + 16) = v66;
      v45 = 9;
      goto LABEL_16;
    case 0xAu:
      v68 = *(_OWORD *)v8;
      v69 = *(_OWORD *)(v8 + 16);
      v70 = *(_OWORD *)(v8 + 48);
      *(_OWORD *)(v10 + 32) = *(_OWORD *)(v8 + 32);
      *(_OWORD *)(v10 + 48) = v70;
      *(_OWORD *)v10 = v68;
      *(_OWORD *)(v10 + 16) = v69;
      v71 = *(_OWORD *)(v8 + 64);
      v72 = *(_OWORD *)(v8 + 80);
      v73 = *(_OWORD *)(v8 + 112);
      *(_OWORD *)(v10 + 96) = *(_OWORD *)(v8 + 96);
      *(_OWORD *)(v10 + 112) = v73;
      *(_OWORD *)(v10 + 64) = v71;
      *(_OWORD *)(v10 + 80) = v72;
      v45 = 10;
LABEL_16:
      *(_BYTE *)(v10 + 248) = v45;
      break;
    default:
      v23 = *(_OWORD *)v8;
      v24 = *(_OWORD *)(v8 + 16);
      v25 = *(_OWORD *)(v8 + 48);
      *(_OWORD *)(v10 + 32) = *(_OWORD *)(v8 + 32);
      *(_OWORD *)(v10 + 48) = v25;
      *(_OWORD *)v10 = v23;
      *(_OWORD *)(v10 + 16) = v24;
      v26 = *(_OWORD *)(v8 + 64);
      v27 = *(_OWORD *)(v8 + 80);
      v28 = *(_OWORD *)(v8 + 112);
      *(_OWORD *)(v10 + 96) = *(_OWORD *)(v8 + 96);
      *(_OWORD *)(v10 + 112) = v28;
      *(_OWORD *)(v10 + 64) = v26;
      *(_OWORD *)(v10 + 80) = v27;
      v29 = *(_OWORD *)(v8 + 128);
      v30 = *(_OWORD *)(v8 + 144);
      v31 = *(_OWORD *)(v8 + 176);
      *(_OWORD *)(v10 + 160) = *(_OWORD *)(v8 + 160);
      *(_OWORD *)(v10 + 176) = v31;
      *(_OWORD *)(v10 + 128) = v29;
      *(_OWORD *)(v10 + 144) = v30;
      v32 = *(_OWORD *)(v8 + 192);
      v33 = *(_OWORD *)(v8 + 208);
      v34 = *(_OWORD *)(v8 + 224);
      *(_OWORD *)(v10 + 233) = *(_OWORD *)(v8 + 233);
      *(_OWORD *)(v10 + 208) = v33;
      *(_OWORD *)(v10 + 224) = v34;
      *(_OWORD *)(v10 + 192) = v32;
      break;
  }
  return a1;
}

uint64_t sub_23BF490A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  char v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  if (v7 != v8)
  {
    v9 = *(unsigned __int8 *)(v8 + 248);
    if (v9 >= 0xB)
      v9 = *(_DWORD *)v8 + 11;
    switch(v9)
    {
      case 0u:
        v10 = *(_OWORD *)v8;
        v11 = *(_OWORD *)(v8 + 16);
        v12 = *(_OWORD *)(v8 + 48);
        *(_OWORD *)(v7 + 32) = *(_OWORD *)(v8 + 32);
        *(_OWORD *)(v7 + 48) = v12;
        *(_OWORD *)v7 = v10;
        *(_OWORD *)(v7 + 16) = v11;
        v13 = *(_OWORD *)(v8 + 64);
        v14 = *(_OWORD *)(v8 + 80);
        v15 = *(_OWORD *)(v8 + 112);
        *(_OWORD *)(v7 + 96) = *(_OWORD *)(v8 + 96);
        *(_OWORD *)(v7 + 112) = v15;
        *(_OWORD *)(v7 + 64) = v13;
        *(_OWORD *)(v7 + 80) = v14;
        v16 = *(_OWORD *)(v8 + 128);
        v17 = *(_OWORD *)(v8 + 144);
        v18 = *(_OWORD *)(v8 + 176);
        *(_OWORD *)(v7 + 160) = *(_OWORD *)(v8 + 160);
        *(_OWORD *)(v7 + 176) = v18;
        *(_OWORD *)(v7 + 128) = v16;
        *(_OWORD *)(v7 + 144) = v17;
        v19 = *(_OWORD *)(v8 + 192);
        v20 = *(_OWORD *)(v8 + 208);
        v21 = *(_OWORD *)(v8 + 224);
        *(_QWORD *)(v7 + 240) = *(_QWORD *)(v8 + 240);
        *(_OWORD *)(v7 + 208) = v20;
        *(_OWORD *)(v7 + 224) = v21;
        *(_OWORD *)(v7 + 192) = v19;
        *(_BYTE *)(v7 + 248) = 0;
        return a1;
      case 1u:
        v34 = *(_OWORD *)(v8 + 16);
        *(_OWORD *)v7 = *(_OWORD *)v8;
        *(_OWORD *)(v7 + 16) = v34;
        v35 = *(_OWORD *)(v8 + 32);
        v36 = *(_OWORD *)(v8 + 48);
        v37 = *(_OWORD *)(v8 + 80);
        *(_OWORD *)(v7 + 64) = *(_OWORD *)(v8 + 64);
        *(_OWORD *)(v7 + 80) = v37;
        *(_OWORD *)(v7 + 32) = v35;
        *(_OWORD *)(v7 + 48) = v36;
        v38 = *(_OWORD *)(v8 + 96);
        v39 = *(_OWORD *)(v8 + 112);
        v40 = *(_OWORD *)(v8 + 144);
        *(_OWORD *)(v7 + 128) = *(_OWORD *)(v8 + 128);
        *(_OWORD *)(v7 + 144) = v40;
        *(_OWORD *)(v7 + 96) = v38;
        *(_OWORD *)(v7 + 112) = v39;
        v41 = *(_OWORD *)(v8 + 160);
        v42 = *(_OWORD *)(v8 + 176);
        v43 = *(_OWORD *)(v8 + 192);
        *(_QWORD *)(v7 + 208) = *(_QWORD *)(v8 + 208);
        *(_OWORD *)(v7 + 176) = v42;
        *(_OWORD *)(v7 + 192) = v43;
        *(_OWORD *)(v7 + 160) = v41;
        v44 = 1;
        goto LABEL_17;
      case 2u:
        v45 = *(_OWORD *)v8;
        v46 = *(_OWORD *)(v8 + 16);
        v47 = *(_OWORD *)(v8 + 48);
        *(_OWORD *)(v7 + 32) = *(_OWORD *)(v8 + 32);
        *(_OWORD *)(v7 + 48) = v47;
        *(_OWORD *)v7 = v45;
        *(_OWORD *)(v7 + 16) = v46;
        v44 = 2;
        goto LABEL_17;
      case 3u:
        *(_OWORD *)v7 = *(_OWORD *)v8;
        v44 = 3;
        goto LABEL_17;
      case 4u:
        v48 = *(_OWORD *)v8;
        *(_QWORD *)(v7 + 16) = *(_QWORD *)(v8 + 16);
        *(_OWORD *)v7 = v48;
        v44 = 4;
        goto LABEL_17;
      case 5u:
        *(_OWORD *)v7 = *(_OWORD *)v8;
        v44 = 5;
        goto LABEL_17;
      case 6u:
        v49 = *(_OWORD *)v8;
        v50 = *(_OWORD *)(v8 + 32);
        *(_OWORD *)(v7 + 16) = *(_OWORD *)(v8 + 16);
        *(_OWORD *)(v7 + 32) = v50;
        *(_OWORD *)v7 = v49;
        v51 = *(_OWORD *)(v8 + 48);
        v52 = *(_OWORD *)(v8 + 64);
        v53 = *(_OWORD *)(v8 + 80);
        *(_QWORD *)(v7 + 96) = *(_QWORD *)(v8 + 96);
        *(_OWORD *)(v7 + 64) = v52;
        *(_OWORD *)(v7 + 80) = v53;
        *(_OWORD *)(v7 + 48) = v51;
        v44 = 6;
        goto LABEL_17;
      case 7u:
        v54 = *(_OWORD *)(v8 + 16);
        *(_OWORD *)v7 = *(_OWORD *)v8;
        *(_OWORD *)(v7 + 16) = v54;
        v55 = *(_OWORD *)(v8 + 32);
        v56 = *(_OWORD *)(v8 + 48);
        v57 = *(_OWORD *)(v8 + 80);
        *(_OWORD *)(v7 + 64) = *(_OWORD *)(v8 + 64);
        *(_OWORD *)(v7 + 80) = v57;
        *(_OWORD *)(v7 + 32) = v55;
        *(_OWORD *)(v7 + 48) = v56;
        v58 = *(_OWORD *)(v8 + 96);
        v59 = *(_OWORD *)(v8 + 112);
        v60 = *(_OWORD *)(v8 + 144);
        *(_OWORD *)(v7 + 128) = *(_OWORD *)(v8 + 128);
        *(_OWORD *)(v7 + 144) = v60;
        *(_OWORD *)(v7 + 96) = v58;
        *(_OWORD *)(v7 + 112) = v59;
        v44 = 7;
        goto LABEL_17;
      case 8u:
        v61 = *(_OWORD *)v8;
        v62 = *(_OWORD *)(v8 + 16);
        v63 = *(_OWORD *)(v8 + 32);
        *(_QWORD *)(v7 + 48) = *(_QWORD *)(v8 + 48);
        *(_OWORD *)(v7 + 16) = v62;
        *(_OWORD *)(v7 + 32) = v63;
        *(_OWORD *)v7 = v61;
        v44 = 8;
        goto LABEL_17;
      case 9u:
        v64 = *(_OWORD *)v8;
        v65 = *(_OWORD *)(v8 + 16);
        v66 = *(_OWORD *)(v8 + 48);
        *(_OWORD *)(v7 + 32) = *(_OWORD *)(v8 + 32);
        *(_OWORD *)(v7 + 48) = v66;
        *(_OWORD *)v7 = v64;
        *(_OWORD *)(v7 + 16) = v65;
        v44 = 9;
        goto LABEL_17;
      case 0xAu:
        v67 = *(_OWORD *)v8;
        v68 = *(_OWORD *)(v8 + 16);
        v69 = *(_OWORD *)(v8 + 48);
        *(_OWORD *)(v7 + 32) = *(_OWORD *)(v8 + 32);
        *(_OWORD *)(v7 + 48) = v69;
        *(_OWORD *)v7 = v67;
        *(_OWORD *)(v7 + 16) = v68;
        v70 = *(_OWORD *)(v8 + 64);
        v71 = *(_OWORD *)(v8 + 80);
        v72 = *(_OWORD *)(v8 + 112);
        *(_OWORD *)(v7 + 96) = *(_OWORD *)(v8 + 96);
        *(_OWORD *)(v7 + 112) = v72;
        *(_OWORD *)(v7 + 64) = v70;
        *(_OWORD *)(v7 + 80) = v71;
        v44 = 10;
LABEL_17:
        *(_BYTE *)(v7 + 248) = v44;
        break;
      default:
        v22 = *(_OWORD *)v8;
        v23 = *(_OWORD *)(v8 + 16);
        v24 = *(_OWORD *)(v8 + 48);
        *(_OWORD *)(v7 + 32) = *(_OWORD *)(v8 + 32);
        *(_OWORD *)(v7 + 48) = v24;
        *(_OWORD *)v7 = v22;
        *(_OWORD *)(v7 + 16) = v23;
        v25 = *(_OWORD *)(v8 + 64);
        v26 = *(_OWORD *)(v8 + 80);
        v27 = *(_OWORD *)(v8 + 112);
        *(_OWORD *)(v7 + 96) = *(_OWORD *)(v8 + 96);
        *(_OWORD *)(v7 + 112) = v27;
        *(_OWORD *)(v7 + 64) = v25;
        *(_OWORD *)(v7 + 80) = v26;
        v28 = *(_OWORD *)(v8 + 128);
        v29 = *(_OWORD *)(v8 + 144);
        v30 = *(_OWORD *)(v8 + 176);
        *(_OWORD *)(v7 + 160) = *(_OWORD *)(v8 + 160);
        *(_OWORD *)(v7 + 176) = v30;
        *(_OWORD *)(v7 + 128) = v28;
        *(_OWORD *)(v7 + 144) = v29;
        v31 = *(_OWORD *)(v8 + 192);
        v32 = *(_OWORD *)(v8 + 208);
        v33 = *(_OWORD *)(v8 + 224);
        *(_OWORD *)(v7 + 233) = *(_OWORD *)(v8 + 233);
        *(_OWORD *)(v7 + 208) = v32;
        *(_OWORD *)(v7 + 224) = v33;
        *(_OWORD *)(v7 + 192) = v31;
        break;
    }
  }
  return a1;
}

uint64_t sub_23BF4932C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  char v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = v6 + a1;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(unsigned __int8 *)(v8 + 248);
  if (v9 >= 0xB)
    v9 = *(_DWORD *)v8 + 11;
  v10 = v7 & 0xFFFFFFFFFFFFFFF8;
  switch(v9)
  {
    case 0u:
      v11 = *(_OWORD *)v8;
      v12 = *(_OWORD *)(v8 + 16);
      v13 = *(_OWORD *)(v8 + 48);
      *(_OWORD *)(v10 + 32) = *(_OWORD *)(v8 + 32);
      *(_OWORD *)(v10 + 48) = v13;
      *(_OWORD *)v10 = v11;
      *(_OWORD *)(v10 + 16) = v12;
      v14 = *(_OWORD *)(v8 + 64);
      v15 = *(_OWORD *)(v8 + 80);
      v16 = *(_OWORD *)(v8 + 112);
      *(_OWORD *)(v10 + 96) = *(_OWORD *)(v8 + 96);
      *(_OWORD *)(v10 + 112) = v16;
      *(_OWORD *)(v10 + 64) = v14;
      *(_OWORD *)(v10 + 80) = v15;
      v17 = *(_OWORD *)(v8 + 128);
      v18 = *(_OWORD *)(v8 + 144);
      v19 = *(_OWORD *)(v8 + 176);
      *(_OWORD *)(v10 + 160) = *(_OWORD *)(v8 + 160);
      *(_OWORD *)(v10 + 176) = v19;
      *(_OWORD *)(v10 + 128) = v17;
      *(_OWORD *)(v10 + 144) = v18;
      v20 = *(_OWORD *)(v8 + 192);
      v21 = *(_OWORD *)(v8 + 208);
      v22 = *(_OWORD *)(v8 + 224);
      *(_QWORD *)(v10 + 240) = *(_QWORD *)(v8 + 240);
      *(_OWORD *)(v10 + 208) = v21;
      *(_OWORD *)(v10 + 224) = v22;
      *(_OWORD *)(v10 + 192) = v20;
      *(_BYTE *)(v10 + 248) = 0;
      return a1;
    case 1u:
      v35 = *(_OWORD *)(v8 + 16);
      *(_OWORD *)v10 = *(_OWORD *)v8;
      *(_OWORD *)(v10 + 16) = v35;
      v36 = *(_OWORD *)(v8 + 32);
      v37 = *(_OWORD *)(v8 + 48);
      v38 = *(_OWORD *)(v8 + 80);
      *(_OWORD *)(v10 + 64) = *(_OWORD *)(v8 + 64);
      *(_OWORD *)(v10 + 80) = v38;
      *(_OWORD *)(v10 + 32) = v36;
      *(_OWORD *)(v10 + 48) = v37;
      v39 = *(_OWORD *)(v8 + 96);
      v40 = *(_OWORD *)(v8 + 112);
      v41 = *(_OWORD *)(v8 + 144);
      *(_OWORD *)(v10 + 128) = *(_OWORD *)(v8 + 128);
      *(_OWORD *)(v10 + 144) = v41;
      *(_OWORD *)(v10 + 96) = v39;
      *(_OWORD *)(v10 + 112) = v40;
      v42 = *(_OWORD *)(v8 + 160);
      v43 = *(_OWORD *)(v8 + 176);
      v44 = *(_OWORD *)(v8 + 192);
      *(_QWORD *)(v10 + 208) = *(_QWORD *)(v8 + 208);
      *(_OWORD *)(v10 + 176) = v43;
      *(_OWORD *)(v10 + 192) = v44;
      *(_OWORD *)(v10 + 160) = v42;
      v45 = 1;
      goto LABEL_16;
    case 2u:
      v46 = *(_OWORD *)v8;
      v47 = *(_OWORD *)(v8 + 16);
      v48 = *(_OWORD *)(v8 + 48);
      *(_OWORD *)(v10 + 32) = *(_OWORD *)(v8 + 32);
      *(_OWORD *)(v10 + 48) = v48;
      *(_OWORD *)v10 = v46;
      *(_OWORD *)(v10 + 16) = v47;
      v45 = 2;
      goto LABEL_16;
    case 3u:
      *(_OWORD *)v10 = *(_OWORD *)v8;
      v45 = 3;
      goto LABEL_16;
    case 4u:
      v49 = *(_OWORD *)v8;
      *(_QWORD *)(v10 + 16) = *(_QWORD *)(v8 + 16);
      *(_OWORD *)v10 = v49;
      v45 = 4;
      goto LABEL_16;
    case 5u:
      *(_OWORD *)v10 = *(_OWORD *)v8;
      v45 = 5;
      goto LABEL_16;
    case 6u:
      v50 = *(_OWORD *)v8;
      v51 = *(_OWORD *)(v8 + 32);
      *(_OWORD *)(v10 + 16) = *(_OWORD *)(v8 + 16);
      *(_OWORD *)(v10 + 32) = v51;
      *(_OWORD *)v10 = v50;
      v52 = *(_OWORD *)(v8 + 48);
      v53 = *(_OWORD *)(v8 + 64);
      v54 = *(_OWORD *)(v8 + 80);
      *(_QWORD *)(v10 + 96) = *(_QWORD *)(v8 + 96);
      *(_OWORD *)(v10 + 64) = v53;
      *(_OWORD *)(v10 + 80) = v54;
      *(_OWORD *)(v10 + 48) = v52;
      v45 = 6;
      goto LABEL_16;
    case 7u:
      v55 = *(_OWORD *)(v8 + 16);
      *(_OWORD *)v10 = *(_OWORD *)v8;
      *(_OWORD *)(v10 + 16) = v55;
      v56 = *(_OWORD *)(v8 + 32);
      v57 = *(_OWORD *)(v8 + 48);
      v58 = *(_OWORD *)(v8 + 80);
      *(_OWORD *)(v10 + 64) = *(_OWORD *)(v8 + 64);
      *(_OWORD *)(v10 + 80) = v58;
      *(_OWORD *)(v10 + 32) = v56;
      *(_OWORD *)(v10 + 48) = v57;
      v59 = *(_OWORD *)(v8 + 96);
      v60 = *(_OWORD *)(v8 + 112);
      v61 = *(_OWORD *)(v8 + 144);
      *(_OWORD *)(v10 + 128) = *(_OWORD *)(v8 + 128);
      *(_OWORD *)(v10 + 144) = v61;
      *(_OWORD *)(v10 + 96) = v59;
      *(_OWORD *)(v10 + 112) = v60;
      v45 = 7;
      goto LABEL_16;
    case 8u:
      v62 = *(_OWORD *)v8;
      v63 = *(_OWORD *)(v8 + 16);
      v64 = *(_OWORD *)(v8 + 32);
      *(_QWORD *)(v10 + 48) = *(_QWORD *)(v8 + 48);
      *(_OWORD *)(v10 + 16) = v63;
      *(_OWORD *)(v10 + 32) = v64;
      *(_OWORD *)v10 = v62;
      v45 = 8;
      goto LABEL_16;
    case 9u:
      v65 = *(_OWORD *)v8;
      v66 = *(_OWORD *)(v8 + 16);
      v67 = *(_OWORD *)(v8 + 48);
      *(_OWORD *)(v10 + 32) = *(_OWORD *)(v8 + 32);
      *(_OWORD *)(v10 + 48) = v67;
      *(_OWORD *)v10 = v65;
      *(_OWORD *)(v10 + 16) = v66;
      v45 = 9;
      goto LABEL_16;
    case 0xAu:
      v68 = *(_OWORD *)v8;
      v69 = *(_OWORD *)(v8 + 16);
      v70 = *(_OWORD *)(v8 + 48);
      *(_OWORD *)(v10 + 32) = *(_OWORD *)(v8 + 32);
      *(_OWORD *)(v10 + 48) = v70;
      *(_OWORD *)v10 = v68;
      *(_OWORD *)(v10 + 16) = v69;
      v71 = *(_OWORD *)(v8 + 64);
      v72 = *(_OWORD *)(v8 + 80);
      v73 = *(_OWORD *)(v8 + 112);
      *(_OWORD *)(v10 + 96) = *(_OWORD *)(v8 + 96);
      *(_OWORD *)(v10 + 112) = v73;
      *(_OWORD *)(v10 + 64) = v71;
      *(_OWORD *)(v10 + 80) = v72;
      v45 = 10;
LABEL_16:
      *(_BYTE *)(v10 + 248) = v45;
      break;
    default:
      v23 = *(_OWORD *)v8;
      v24 = *(_OWORD *)(v8 + 16);
      v25 = *(_OWORD *)(v8 + 48);
      *(_OWORD *)(v10 + 32) = *(_OWORD *)(v8 + 32);
      *(_OWORD *)(v10 + 48) = v25;
      *(_OWORD *)v10 = v23;
      *(_OWORD *)(v10 + 16) = v24;
      v26 = *(_OWORD *)(v8 + 64);
      v27 = *(_OWORD *)(v8 + 80);
      v28 = *(_OWORD *)(v8 + 112);
      *(_OWORD *)(v10 + 96) = *(_OWORD *)(v8 + 96);
      *(_OWORD *)(v10 + 112) = v28;
      *(_OWORD *)(v10 + 64) = v26;
      *(_OWORD *)(v10 + 80) = v27;
      v29 = *(_OWORD *)(v8 + 128);
      v30 = *(_OWORD *)(v8 + 144);
      v31 = *(_OWORD *)(v8 + 176);
      *(_OWORD *)(v10 + 160) = *(_OWORD *)(v8 + 160);
      *(_OWORD *)(v10 + 176) = v31;
      *(_OWORD *)(v10 + 128) = v29;
      *(_OWORD *)(v10 + 144) = v30;
      v32 = *(_OWORD *)(v8 + 192);
      v33 = *(_OWORD *)(v8 + 208);
      v34 = *(_OWORD *)(v8 + 224);
      *(_OWORD *)(v10 + 233) = *(_OWORD *)(v8 + 233);
      *(_OWORD *)(v10 + 208) = v33;
      *(_OWORD *)(v10 + 224) = v34;
      *(_OWORD *)(v10 + 192) = v32;
      break;
  }
  return a1;
}

uint64_t sub_23BF495AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  char v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  if (v7 != v8)
  {
    v9 = *(unsigned __int8 *)(v8 + 248);
    if (v9 >= 0xB)
      v9 = *(_DWORD *)v8 + 11;
    switch(v9)
    {
      case 0u:
        v10 = *(_OWORD *)v8;
        v11 = *(_OWORD *)(v8 + 16);
        v12 = *(_OWORD *)(v8 + 48);
        *(_OWORD *)(v7 + 32) = *(_OWORD *)(v8 + 32);
        *(_OWORD *)(v7 + 48) = v12;
        *(_OWORD *)v7 = v10;
        *(_OWORD *)(v7 + 16) = v11;
        v13 = *(_OWORD *)(v8 + 64);
        v14 = *(_OWORD *)(v8 + 80);
        v15 = *(_OWORD *)(v8 + 112);
        *(_OWORD *)(v7 + 96) = *(_OWORD *)(v8 + 96);
        *(_OWORD *)(v7 + 112) = v15;
        *(_OWORD *)(v7 + 64) = v13;
        *(_OWORD *)(v7 + 80) = v14;
        v16 = *(_OWORD *)(v8 + 128);
        v17 = *(_OWORD *)(v8 + 144);
        v18 = *(_OWORD *)(v8 + 176);
        *(_OWORD *)(v7 + 160) = *(_OWORD *)(v8 + 160);
        *(_OWORD *)(v7 + 176) = v18;
        *(_OWORD *)(v7 + 128) = v16;
        *(_OWORD *)(v7 + 144) = v17;
        v19 = *(_OWORD *)(v8 + 192);
        v20 = *(_OWORD *)(v8 + 208);
        v21 = *(_OWORD *)(v8 + 224);
        *(_QWORD *)(v7 + 240) = *(_QWORD *)(v8 + 240);
        *(_OWORD *)(v7 + 208) = v20;
        *(_OWORD *)(v7 + 224) = v21;
        *(_OWORD *)(v7 + 192) = v19;
        *(_BYTE *)(v7 + 248) = 0;
        return a1;
      case 1u:
        v34 = *(_OWORD *)(v8 + 16);
        *(_OWORD *)v7 = *(_OWORD *)v8;
        *(_OWORD *)(v7 + 16) = v34;
        v35 = *(_OWORD *)(v8 + 32);
        v36 = *(_OWORD *)(v8 + 48);
        v37 = *(_OWORD *)(v8 + 80);
        *(_OWORD *)(v7 + 64) = *(_OWORD *)(v8 + 64);
        *(_OWORD *)(v7 + 80) = v37;
        *(_OWORD *)(v7 + 32) = v35;
        *(_OWORD *)(v7 + 48) = v36;
        v38 = *(_OWORD *)(v8 + 96);
        v39 = *(_OWORD *)(v8 + 112);
        v40 = *(_OWORD *)(v8 + 144);
        *(_OWORD *)(v7 + 128) = *(_OWORD *)(v8 + 128);
        *(_OWORD *)(v7 + 144) = v40;
        *(_OWORD *)(v7 + 96) = v38;
        *(_OWORD *)(v7 + 112) = v39;
        v41 = *(_OWORD *)(v8 + 160);
        v42 = *(_OWORD *)(v8 + 176);
        v43 = *(_OWORD *)(v8 + 192);
        *(_QWORD *)(v7 + 208) = *(_QWORD *)(v8 + 208);
        *(_OWORD *)(v7 + 176) = v42;
        *(_OWORD *)(v7 + 192) = v43;
        *(_OWORD *)(v7 + 160) = v41;
        v44 = 1;
        goto LABEL_17;
      case 2u:
        v45 = *(_OWORD *)v8;
        v46 = *(_OWORD *)(v8 + 16);
        v47 = *(_OWORD *)(v8 + 48);
        *(_OWORD *)(v7 + 32) = *(_OWORD *)(v8 + 32);
        *(_OWORD *)(v7 + 48) = v47;
        *(_OWORD *)v7 = v45;
        *(_OWORD *)(v7 + 16) = v46;
        v44 = 2;
        goto LABEL_17;
      case 3u:
        *(_OWORD *)v7 = *(_OWORD *)v8;
        v44 = 3;
        goto LABEL_17;
      case 4u:
        v48 = *(_OWORD *)v8;
        *(_QWORD *)(v7 + 16) = *(_QWORD *)(v8 + 16);
        *(_OWORD *)v7 = v48;
        v44 = 4;
        goto LABEL_17;
      case 5u:
        *(_OWORD *)v7 = *(_OWORD *)v8;
        v44 = 5;
        goto LABEL_17;
      case 6u:
        v49 = *(_OWORD *)v8;
        v50 = *(_OWORD *)(v8 + 32);
        *(_OWORD *)(v7 + 16) = *(_OWORD *)(v8 + 16);
        *(_OWORD *)(v7 + 32) = v50;
        *(_OWORD *)v7 = v49;
        v51 = *(_OWORD *)(v8 + 48);
        v52 = *(_OWORD *)(v8 + 64);
        v53 = *(_OWORD *)(v8 + 80);
        *(_QWORD *)(v7 + 96) = *(_QWORD *)(v8 + 96);
        *(_OWORD *)(v7 + 64) = v52;
        *(_OWORD *)(v7 + 80) = v53;
        *(_OWORD *)(v7 + 48) = v51;
        v44 = 6;
        goto LABEL_17;
      case 7u:
        v54 = *(_OWORD *)(v8 + 16);
        *(_OWORD *)v7 = *(_OWORD *)v8;
        *(_OWORD *)(v7 + 16) = v54;
        v55 = *(_OWORD *)(v8 + 32);
        v56 = *(_OWORD *)(v8 + 48);
        v57 = *(_OWORD *)(v8 + 80);
        *(_OWORD *)(v7 + 64) = *(_OWORD *)(v8 + 64);
        *(_OWORD *)(v7 + 80) = v57;
        *(_OWORD *)(v7 + 32) = v55;
        *(_OWORD *)(v7 + 48) = v56;
        v58 = *(_OWORD *)(v8 + 96);
        v59 = *(_OWORD *)(v8 + 112);
        v60 = *(_OWORD *)(v8 + 144);
        *(_OWORD *)(v7 + 128) = *(_OWORD *)(v8 + 128);
        *(_OWORD *)(v7 + 144) = v60;
        *(_OWORD *)(v7 + 96) = v58;
        *(_OWORD *)(v7 + 112) = v59;
        v44 = 7;
        goto LABEL_17;
      case 8u:
        v61 = *(_OWORD *)v8;
        v62 = *(_OWORD *)(v8 + 16);
        v63 = *(_OWORD *)(v8 + 32);
        *(_QWORD *)(v7 + 48) = *(_QWORD *)(v8 + 48);
        *(_OWORD *)(v7 + 16) = v62;
        *(_OWORD *)(v7 + 32) = v63;
        *(_OWORD *)v7 = v61;
        v44 = 8;
        goto LABEL_17;
      case 9u:
        v64 = *(_OWORD *)v8;
        v65 = *(_OWORD *)(v8 + 16);
        v66 = *(_OWORD *)(v8 + 48);
        *(_OWORD *)(v7 + 32) = *(_OWORD *)(v8 + 32);
        *(_OWORD *)(v7 + 48) = v66;
        *(_OWORD *)v7 = v64;
        *(_OWORD *)(v7 + 16) = v65;
        v44 = 9;
        goto LABEL_17;
      case 0xAu:
        v67 = *(_OWORD *)v8;
        v68 = *(_OWORD *)(v8 + 16);
        v69 = *(_OWORD *)(v8 + 48);
        *(_OWORD *)(v7 + 32) = *(_OWORD *)(v8 + 32);
        *(_OWORD *)(v7 + 48) = v69;
        *(_OWORD *)v7 = v67;
        *(_OWORD *)(v7 + 16) = v68;
        v70 = *(_OWORD *)(v8 + 64);
        v71 = *(_OWORD *)(v8 + 80);
        v72 = *(_OWORD *)(v8 + 112);
        *(_OWORD *)(v7 + 96) = *(_OWORD *)(v8 + 96);
        *(_OWORD *)(v7 + 112) = v72;
        *(_OWORD *)(v7 + 64) = v70;
        *(_OWORD *)(v7 + 80) = v71;
        v44 = 10;
LABEL_17:
        *(_BYTE *)(v7 + 248) = v44;
        break;
      default:
        v22 = *(_OWORD *)v8;
        v23 = *(_OWORD *)(v8 + 16);
        v24 = *(_OWORD *)(v8 + 48);
        *(_OWORD *)(v7 + 32) = *(_OWORD *)(v8 + 32);
        *(_OWORD *)(v7 + 48) = v24;
        *(_OWORD *)v7 = v22;
        *(_OWORD *)(v7 + 16) = v23;
        v25 = *(_OWORD *)(v8 + 64);
        v26 = *(_OWORD *)(v8 + 80);
        v27 = *(_OWORD *)(v8 + 112);
        *(_OWORD *)(v7 + 96) = *(_OWORD *)(v8 + 96);
        *(_OWORD *)(v7 + 112) = v27;
        *(_OWORD *)(v7 + 64) = v25;
        *(_OWORD *)(v7 + 80) = v26;
        v28 = *(_OWORD *)(v8 + 128);
        v29 = *(_OWORD *)(v8 + 144);
        v30 = *(_OWORD *)(v8 + 176);
        *(_OWORD *)(v7 + 160) = *(_OWORD *)(v8 + 160);
        *(_OWORD *)(v7 + 176) = v30;
        *(_OWORD *)(v7 + 128) = v28;
        *(_OWORD *)(v7 + 144) = v29;
        v31 = *(_OWORD *)(v8 + 192);
        v32 = *(_OWORD *)(v8 + 208);
        v33 = *(_OWORD *)(v8 + 224);
        *(_OWORD *)(v7 + 233) = *(_OWORD *)(v8 + 233);
        *(_OWORD *)(v7 + 208) = v32;
        *(_OWORD *)(v7 + 224) = v33;
        *(_OWORD *)(v7 + 192) = v31;
        break;
    }
  }
  return a1;
}

uint64_t sub_23BF49834(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v13;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xF4)
    v6 = 244;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0xF4)
    {
      v13 = *(unsigned __int8 *)(((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 0xF8);
      if (v13 >= 0xC)
        return (v13 ^ 0xFF) + 1;
      else
        return 0;
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    v8 = (a2 - v6 + 255) >> (8 * (((v7 + 7) & 0xF8) - 7));
    if ((((_DWORD)v7 + 7) & 0xFFFFFFF8) + 249 < 4)
      v9 = v8 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    return ((uint64_t (*)(void))((char *)&loc_23BF498BC + 4 * byte_23C000A77[v11]))();
  }
}

void sub_23BF49948(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xF4u)
    v6 = 244;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 249;
  if (v6 >= a3)
  {
    v10 = 0;
    if (v6 >= a2)
      goto LABEL_17;
  }
  else
  {
    if (v7 <= 3)
      v8 = ((a3 - v6 + 255) >> (8 * (((*(_BYTE *)(v5 + 64) + 7) & 0xF8) - 7))) + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (v6 >= a2)
LABEL_17:
      __asm { BR              X12 }
  }
  if (v7 >= 4)
    v11 = ~v6 + a2;
  else
    v11 = (~(_BYTE)v6 + a2);
  bzero(a1, v7);
  if ((_DWORD)v7 == 1)
    *a1 = v11;
  else
    *(_DWORD *)a1 = v11;
  __asm { BR              X10 }
}

void sub_23BF49A64()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x23BF49B04);
}

void sub_23BF49A6C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x23BF49A74);
  JUMPOUT(0x23BF49B04);
}

void sub_23BF49AB8()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x23BF49B04);
}

void sub_23BF49AC0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x23BF49B04);
}

uint64_t sub_23BF49AC8(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0xF4)
  {
    if (a2 > 0xF4)
      JUMPOUT(0x23BF49AD4);
    *(_BYTE *)(((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 248) = -(char)a2;
LABEL_6:
    JUMPOUT(0x23BF49B04);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

uint64_t sub_23BF49B1C()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_23BF49B24(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23BF49B70 + 4 * byte_23C000A8B[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23BF49BA4 + 4 * byte_23C000A86[v4]))();
}

uint64_t sub_23BF49BA4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BF49BAC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BF49BB4);
  return result;
}

uint64_t sub_23BF49BC0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BF49BC8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23BF49BCC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BF49BD4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void sub_23BF49BE0()
{
  JUMPOUT(0x242615198);
}

void sub_23BF49BF0()
{
  JUMPOUT(0x242615198);
}

void sub_23BF49C00()
{
  JUMPOUT(0x242615198);
}

uint64_t sub_23BF49C10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  char v27[16];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v35 = a1;
  v28 = a4;
  v29 = a5;
  v30 = a6;
  v31 = a7;
  v32 = a8;
  v33 = a9;
  v13 = sub_23BFF94C0();
  v14 = MEMORY[0x242615198](MEMORY[0x24BEE12E0], v13);
  v34 = sub_23BF8EE44((void (*)(char *, char *))sub_23BF49EC8, (uint64_t)v27, v13, a4, MEMORY[0x24BEE4078], v14, MEMORY[0x24BEE40A8], v15);
  v16 = sub_23BFF94C0();
  MEMORY[0x242615198](MEMORY[0x24BEE12C8], v16);
  sub_23BFF943C();
  swift_bridgeObjectRelease();
  v34 = v35;
  swift_getTupleTypeMetadata2();
  v17 = sub_23BFF982C();
  MEMORY[0x242615198](MEMORY[0x24BEE2FC0], v17);
  sub_23BFF94E4();
  swift_getTupleTypeMetadata2();
  v18 = sub_23BFF9808();
  swift_bridgeObjectRelease();
  v35 = v18;
  swift_getKeyPath();
  v19 = (_QWORD *)swift_allocObject();
  v19[2] = a4;
  v19[3] = a5;
  v19[4] = a6;
  v19[5] = a7;
  v19[6] = a8;
  v19[7] = a9;
  v19[8] = a2;
  v19[9] = a3;
  v19[10] = a1;
  v20 = (_QWORD *)swift_allocObject();
  v20[2] = a4;
  v20[3] = a5;
  v20[4] = a6;
  v20[5] = a7;
  v20[6] = a8;
  v20[7] = a9;
  v20[8] = sub_23BF4A06C;
  v20[9] = v19;
  v21 = sub_23BFF94C0();
  MEMORY[0x242615198](MEMORY[0x24BEE12D8], v21);
  swift_getAssociatedConformanceWitness();
  return sub_23BFF9100();
}

uint64_t sub_23BF49EC8()
{
  return sub_23BFF9460();
}

uint64_t sub_23BF49EFC@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t, char *)@<X2>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, uint64_t);
  void (*v21)(uint64_t, char *);
  uint64_t v22;

  v21 = a2;
  v22 = a5;
  v8 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v21 - v17;
  sub_23BFF94F0();
  v21(a1, v10);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, a4);
  sub_23BEA72EC((uint64_t)v15, a3, (uint64_t)v18);
  v19 = *(void (**)(char *, uint64_t))(v12 + 8);
  v19(v15, a3);
  sub_23BEA5C0C((uint64_t)v18, a3, v22);
  return ((uint64_t (*)(char *, uint64_t))v19)(v18, a3);
}

uint64_t sub_23BF4A040()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23BF4A06C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_23BF49EFC(a1, *(void (**)(uint64_t, char *))(v2 + 64), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), a2);
}

uint64_t sub_23BF4A0A4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23BF4A0C8(char *a1)
{
  uint64_t v1;
  uint64_t (*v3)(uint64_t, char *);
  uint64_t v4;
  uint64_t TupleTypeMetadata2;

  v3 = *(uint64_t (**)(uint64_t, char *))(v1 + 64);
  v4 = *(_QWORD *)a1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return v3(v4, &a1[*(int *)(TupleTypeMetadata2 + 48)]);
}

uint64_t sub_23BF4A130(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 128);
}

uint64_t sub_23BF4A138(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 136);
}

uint64_t sub_23BF4A140(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 168);
}

uint64_t sub_23BF4A148(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x242615198](&protocol conformance descriptor for LazyCanvasSectionDescriptor<A, B, C, D, E, F, G, H, I>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_23BF4A174(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x242615198](&protocol conformance descriptor for LazyCanvasSectionViewDescriptor<A, B, C, D, E, F, G, H>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t dispatch thunk of LazySectionDescriptorProtocol.items.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 128))();
}

void CanvasSectionViewDescriptor.footer.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

void CanvasSectionViewDescriptor.header.getter()
{
  type metadata accessor for CanvasSectionHeader();
}

uint64_t sub_23BF4A208()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_23BFF96A0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v0, v1, v2);
}

uint64_t CanvasSectionViewDescriptor.identifier.getter(uint64_t a1)
{
  uint64_t v1;

  v1 = sub_23BF4C054(a1);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CanvasSectionViewDescriptor.items.getter(uint64_t a1)
{
  sub_23BEAC9C8(a1);
  return swift_bridgeObjectRetain();
}

uint64_t CanvasSectionViewDescriptor.items.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;

  v4 = *(int *)(a2 + 172);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + v4) = a1;
  return result;
}

uint64_t (*CanvasSectionViewDescriptor.items.modify())()
{
  return nullsub_1;
}

uint64_t CanvasSectionViewDescriptor.metrics.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 176);
  v5 = sub_23BFF96A0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

void CanvasSectionViewDescriptor.init(identifier:header:footer:items:metrics:)()
{
  type metadata accessor for CanvasSectionViewDescriptor();
}

void sub_23BF4A3A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v4 = (_QWORD *)(v1 + *(int *)(a1 + 168));
  *v4 = v3;
  v4[1] = v2;
  type metadata accessor for CanvasSectionHeader();
}

uint64_t sub_23BF4A3CC()
{
  _BYTE *v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = sub_23BFF96A0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(v2, v8, v4);
  *v0 = v1;
  *(_QWORD *)&v0[*(int *)(v3 + 172)] = v9;
  v5 = &v0[*(int *)(v3 + 176)];
  v6 = sub_23BFF96A0();
  return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v5, v10, v6);
}

uint64_t sub_23BF4A44C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7265746F6F66 && a2 == 0xE600000000000000;
  if (v2 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x726564616568 && a2 == 0xE600000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x736D657469 && a2 == 0xE500000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x7363697274656DLL && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_23BFF9964();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_23BF4A65C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23BF4A68C + 4 * byte_23C000DB0[a1]))(0x7265746F6F66, 0xE600000000000000);
}

uint64_t sub_23BF4A68C()
{
  return 0x726564616568;
}

uint64_t sub_23BF4A69C()
{
  return 0x696669746E656469;
}

uint64_t sub_23BF4A6B8()
{
  return 0x736D657469;
}

uint64_t sub_23BF4A6CC()
{
  return 0x7363697274656DLL;
}

uint64_t sub_23BF4A6E4()
{
  unsigned __int8 *v0;

  return sub_23BF4A65C(*v0);
}

uint64_t sub_23BF4A73C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BF4A44C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BF4A798(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23C001138, a1);
  return sub_23BFF9A30();
}

uint64_t sub_23BF4A7CC(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23C001138, a1);
  return sub_23BFF9A3C();
}

uint64_t sub_23BF4A800@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;

  *a2 = sub_23BF4C054(a1);
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_23BF4A830(uint64_t a1)
{
  uint64_t v1;

  v1 = sub_23BF4C054(a1);
  swift_bridgeObjectRetain();
  return v1;
}

void CanvasSectionViewDescriptor.encode(to:)()
{
  type metadata accessor for CanvasSectionViewDescriptor.CodingKeys();
}

uint64_t sub_23BF4A980(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  MEMORY[0x242615198](&unk_23C001138, a1);
  v3 = sub_23BFF994C();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v12 - v5;
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  v7 = *(_BYTE **)(v2 - 264);
  sub_23BFF9A18();
  *(_BYTE *)(v2 - 232) = *v7;
  *(_BYTE *)(v2 - 72) = 0;
  sub_23BEAC9FC();
  v8 = *(_QWORD *)(v2 - 256);
  sub_23BFF9940();
  if (!v8)
  {
    *(_BYTE *)(v2 - 72) = 1;
    v9 = *(_QWORD *)(v2 - 288);
    *(_QWORD *)(v2 - 232) = *(_QWORD *)(v2 - 272);
    *(_QWORD *)(v2 - 224) = v9;
    v10 = *(_QWORD *)(v2 - 304);
    *(_QWORD *)(v2 - 216) = *(_QWORD *)(v2 - 280);
    *(_QWORD *)(v2 - 208) = v10;
    type metadata accessor for CanvasSectionHeader();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void CanvasSectionViewDescriptor.init(from:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v43 = a6;
  v42 = a5;
  v41 = a4;
  v32 = a3;
  v40 = a1;
  v25 = a9;
  v44 = a20;
  v39 = a17;
  v38 = a16;
  v37 = a15;
  v36 = a14;
  v35 = a13;
  v34 = a12;
  v33 = a10;
  v30 = a18;
  v29 = a7;
  v24 = sub_23BFF96A0();
  v23 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)&v23 - v22;
  v45 = a2;
  v46 = a8;
  v31 = a2;
  v27 = a8;
  v47 = a11;
  v48 = a19;
  v28 = a19;
  type metadata accessor for CanvasSectionHeader();
}

void sub_23BF4ADC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  *(_QWORD *)(v17 - 416) = a1;
  v18 = sub_23BFF96A0();
  *(_QWORD *)(v17 - 448) = v18;
  *(_QWORD *)(v17 - 440) = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  *(_QWORD *)(v17 - 424) = (char *)&a9 - v19;
  *(_QWORD *)(v17 - 232) = v11;
  *(_QWORD *)(v17 - 224) = v14;
  v20 = *(_QWORD *)(v17 - 264);
  *(_QWORD *)(v17 - 216) = *(_QWORD *)(v17 - 272);
  *(_QWORD *)(v17 - 208) = v20;
  *(_QWORD *)(v17 - 200) = *(_QWORD *)(v17 - 256);
  *(_QWORD *)(v17 - 192) = v10;
  *(_QWORD *)(v17 - 184) = v12;
  *(_QWORD *)(v17 - 176) = v13;
  v21 = *(_QWORD *)(v17 - 328);
  *(_QWORD *)(v17 - 168) = v15;
  *(_QWORD *)(v17 - 160) = v21;
  v22 = *(_QWORD *)(v17 - 312);
  *(_QWORD *)(v17 - 152) = v9;
  *(_QWORD *)(v17 - 144) = v22;
  v23 = *(_QWORD *)(v17 - 296);
  *(_QWORD *)(v17 - 136) = *(_QWORD *)(v17 - 304);
  *(_QWORD *)(v17 - 128) = v23;
  v24 = *(_QWORD *)(v17 - 360);
  *(_QWORD *)(v17 - 120) = *(_QWORD *)(v17 - 288);
  *(_QWORD *)(v17 - 112) = v24;
  v25 = *(_QWORD *)(v17 - 248);
  *(_QWORD *)(v17 - 104) = v16;
  *(_QWORD *)(v17 - 96) = v25;
  type metadata accessor for CanvasSectionViewDescriptor.CodingKeys();
}

void sub_23BF4AE94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v8 - 384) = MEMORY[0x242615198](&unk_23C001138, a1);
  v9 = sub_23BFF98E0();
  *(_QWORD *)(v8 - 408) = v9;
  *(_QWORD *)(v8 - 432) = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v10 = *(_QWORD *)(v8 - 344);
  *(_QWORD *)(v8 - 232) = *(_QWORD *)(v8 - 352);
  *(_QWORD *)(v8 - 224) = v10;
  v11 = *(_QWORD *)(v8 - 264);
  *(_QWORD *)(v8 - 216) = *(_QWORD *)(v8 - 272);
  *(_QWORD *)(v8 - 208) = v11;
  v12 = *(_QWORD *)(v8 - 368);
  *(_QWORD *)(v8 - 200) = *(_QWORD *)(v8 - 256);
  *(_QWORD *)(v8 - 192) = v12;
  v13 = *(_QWORD *)(v8 - 336);
  *(_QWORD *)(v8 - 184) = *(_QWORD *)(v8 - 400);
  *(_QWORD *)(v8 - 176) = v13;
  *(_QWORD *)(v8 - 400) = v7;
  *(_QWORD *)(v8 - 168) = v7;
  *(_QWORD *)(v8 - 160) = v4;
  *(_QWORD *)(v8 - 152) = *(_QWORD *)(v8 - 320);
  *(_QWORD *)(v8 - 144) = v6;
  *(_QWORD *)(v8 - 136) = v5;
  *(_QWORD *)(v8 - 128) = v1;
  *(_QWORD *)(v8 - 120) = v2;
  *(_QWORD *)(v8 - 112) = v3;
  v14 = *(_QWORD *)(v8 - 248);
  *(_QWORD *)(v8 - 104) = *(_QWORD *)(v8 - 392);
  *(_QWORD *)(v8 - 96) = v14;
  type metadata accessor for CanvasSectionViewDescriptor();
}

uint64_t sub_23BF4AF80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v23 - v5;
  v7 = *(_QWORD **)(v2 - 280);
  __swift_project_boxed_opaque_existential_1(v7, v7[3]);
  *(_QWORD *)(v2 - 392) = v1;
  v8 = *(_QWORD *)(v2 - 376);
  sub_23BFF9A0C();
  if (!v8)
  {
    v9 = *(_QWORD *)(v2 - 416);
    v10 = *(_QWORD *)(v2 - 424);
    *(_QWORD *)(v2 - 384) = v4;
    *(_QWORD *)(v2 - 376) = v6;
    *(_BYTE *)(v2 - 72) = 0;
    sub_23BEACA40();
    sub_23BFF98C8();
    v11 = *(_BYTE **)(v2 - 376);
    *v11 = *(_BYTE *)(v2 - 232);
    *(_BYTE *)(v2 - 232) = 1;
    MEMORY[0x242615198](&protocol conformance descriptor for CanvasSectionHeader<A, B>, v9);
    sub_23BFF988C();
    (*(void (**)(_BYTE *, uint64_t, _QWORD))(*(_QWORD *)(v2 - 440) + 32))(&v11[*(int *)(a1 + 164)], v10, *(_QWORD *)(v2 - 448));
    *(_BYTE *)(v2 - 232) = 2;
    v13 = sub_23BFF9898();
    v14 = (uint64_t *)&v11[*(int *)(a1 + 168)];
    *v14 = v13;
    v14[1] = v15;
    v16 = *(_QWORD *)(v2 - 344);
    *(_QWORD *)(v2 - 232) = *(_QWORD *)(v2 - 352);
    *(_QWORD *)(v2 - 224) = v16;
    v17 = *(_QWORD *)(v2 - 264);
    *(_QWORD *)(v2 - 216) = *(_QWORD *)(v2 - 272);
    *(_QWORD *)(v2 - 208) = v17;
    v18 = *(_QWORD *)(v2 - 336);
    *(_QWORD *)(v2 - 200) = *(_QWORD *)(v2 - 256);
    *(_QWORD *)(v2 - 192) = v18;
    v19 = *(_QWORD *)(v2 - 328);
    *(_QWORD *)(v2 - 184) = *(_QWORD *)(v2 - 400);
    *(_QWORD *)(v2 - 176) = v19;
    v20 = *(_QWORD *)(v2 - 312);
    *(_QWORD *)(v2 - 168) = *(_QWORD *)(v2 - 320);
    *(_QWORD *)(v2 - 160) = v20;
    v21 = *(_QWORD *)(v2 - 296);
    *(_QWORD *)(v2 - 152) = *(_QWORD *)(v2 - 304);
    *(_QWORD *)(v2 - 144) = v21;
    v22 = *(_QWORD *)(v2 - 248);
    *(_QWORD *)(v2 - 136) = *(_QWORD *)(v2 - 288);
    *(_QWORD *)(v2 - 128) = v22;
    type metadata accessor for CanvasItemDescriptor();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
}

void sub_23BF4B450(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  CanvasSectionViewDescriptor.init(from:)(a1, a2[2], a2[3], a2[4], a2[5], a2[6], a2[7], a2[8], a3, a2[9], a2[10], a2[11], a2[12], a2[13], a2[14], a2[15], a2[16], a2[17], a2[18],
    a2[19]);
}

void sub_23BF4B4A8()
{
  CanvasSectionViewDescriptor.encode(to:)();
}

void CanvasSectionViewDescriptor.hash(into:)()
{
  sub_23BFF99DC();
  type metadata accessor for CanvasSectionHeader();
}

void sub_23BF4B51C(uint64_t a1)
{
  sub_23BFF96A0();
  MEMORY[0x242615198](&protocol conformance descriptor for CanvasSectionHeader<A, B>, a1);
  sub_23BFF96AC();
  swift_bridgeObjectRetain();
  sub_23BFF93F4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  type metadata accessor for CanvasItemDescriptor();
}

uint64_t sub_23BF4B5D4(uint64_t a1)
{
  MEMORY[0x242615198](&protocol conformance descriptor for CanvasItemDescriptor<A, B, C, D, E, F>, a1);
  sub_23BFF94CC();
  swift_bridgeObjectRelease();
  sub_23BFF96A0();
  return sub_23BFF96AC();
}

void static CanvasSectionViewDescriptor.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[26];
  uint64_t TupleTypeMetadata2;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v35 = a7;
  v34 = a6;
  v33 = a5;
  v32 = a4;
  v28[23] = *(_QWORD *)(a8 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v28[19] = (char *)v28 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_23BFF96A0();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v28[21] = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v28[22] = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v28[20] = (char *)v28 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v24);
  v28[24] = (char *)v28 - v25;
  MEMORY[0x24BDAC7A8](v26);
  v28[25] = (char *)v28 - v27;
  v37 = a3;
  v38 = a3;
  v31 = a9;
  v39 = a9;
  v40 = a11;
  v36 = a11;
  v30 = a19;
  v41 = a19;
  type metadata accessor for CanvasSectionHeader();
}

uint64_t sub_23BF4B7F0(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t TupleTypeMetadata2;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;

  *(v6 - 31) = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  *(v6 - 41) = (char *)&v26 - v7;
  *(v6 - 40) = v8;
  sub_23BFF96A0();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  MEMORY[0x24BDAC7A8](v10);
  MEMORY[0x24BDAC7A8](v11);
  MEMORY[0x24BDAC7A8](v12);
  v15 = *v3;
  *(v6 - 33) = v2;
  if (v15 == *v2)
  {
    *(v6 - 53) = v14;
    *(v6 - 52) = v13;
    *(v6 - 66) = v5;
    *(v6 - 65) = v4;
    v16 = v6[13];
    v18 = v6[10];
    v17 = v6[11];
    v20 = v6[8];
    v19 = v6[9];
    v22 = v6[6];
    v21 = v6[7];
    v23 = v6[5];
    v24 = v6[3];
    *(v6 - 29) = *(v6 - 30);
    *(v6 - 28) = *(v6 - 37);
    *(v6 - 27) = *(v6 - 36);
    *(v6 - 26) = *(v6 - 35);
    *(v6 - 25) = *(v6 - 34);
    *(v6 - 24) = v1;
    *(v6 - 64) = v1;
    *(v6 - 23) = *(v6 - 38);
    *(v6 - 22) = v24;
    *(v6 - 63) = v24;
    *(v6 - 21) = *(v6 - 32);
    *(v6 - 20) = v23;
    *(v6 - 62) = v23;
    *(v6 - 61) = v22;
    *(v6 - 19) = v22;
    *(v6 - 18) = v21;
    *(v6 - 60) = v21;
    *(v6 - 59) = v20;
    *(v6 - 17) = v20;
    *(v6 - 16) = v19;
    *(v6 - 58) = v19;
    *(v6 - 57) = v18;
    *(v6 - 15) = v18;
    *(v6 - 14) = v17;
    *(v6 - 67) = v17;
    *(v6 - 13) = *(v6 - 39);
    *(v6 - 12) = v16;
    *(v6 - 56) = v16;
    type metadata accessor for CanvasSectionViewDescriptor();
  }
  return 0;
}

void CanvasSectionViewDescriptor.hashValue.getter()
{
  sub_23BFF99D0();
  CanvasSectionViewDescriptor.hash(into:)();
}

uint64_t sub_23BF4BFA4()
{
  return sub_23BFF9A00();
}

void sub_23BF4BFC4()
{
  sub_23BFF99D0();
  CanvasSectionViewDescriptor.hash(into:)();
}

uint64_t sub_23BF4BFEC()
{
  return sub_23BFF9A00();
}

void sub_23BF4C004(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  static CanvasSectionViewDescriptor.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6], a3[7], a3[8], a3[9], a3[10], a3[11], a3[12], a3[13], a3[14], a3[15], a3[16], a3[17], a3[18]);
}

uint64_t sub_23BF4C044(char a1)
{
  return a1 & 1;
}

uint64_t sub_23BF4C054(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 168));
}

void type metadata accessor for CanvasSectionViewDescriptor()
{
  JUMPOUT(0x2426150F0);
}

void type metadata accessor for CanvasSectionViewDescriptor.CodingKeys()
{
  JUMPOUT(0x2426150F0);
}

uint64_t sub_23BF4C07C(_QWORD *a1, uint64_t a2)
{
  uint64_t result;

  a1[1] = MEMORY[0x242615198](&protocol conformance descriptor for CanvasSectionViewDescriptor<A, B, C, D, E, F, G, H>);
  a1[2] = MEMORY[0x242615198](&protocol conformance descriptor for CanvasSectionViewDescriptor<A, B, C, D, E, F, G, H>, a2);
  a1[3] = MEMORY[0x242615198](&protocol conformance descriptor for CanvasSectionViewDescriptor<A, B, C, D, E, F, G, H>, a2);
  result = MEMORY[0x242615198](&protocol conformance descriptor for CanvasSectionViewDescriptor<A, B, C, D, E, F, G, H>, a2);
  a1[4] = result;
  return result;
}

void sub_23BF4C0E8()
{
  JUMPOUT(0x242615198);
}

uint64_t dispatch thunk of CanvasSectionViewDescriptorProtocol.footer.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 136))();
}

uint64_t dispatch thunk of CanvasSectionViewDescriptorProtocol.header.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 144))();
}

uint64_t dispatch thunk of CanvasSectionViewDescriptorProtocol.identifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 152))();
}

uint64_t dispatch thunk of CanvasSectionViewDescriptorProtocol.items.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 160))();
}

uint64_t dispatch thunk of CanvasSectionViewDescriptorProtocol.metrics.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 168))();
}

void sub_23BF4C120()
{
  type metadata accessor for CanvasSectionHeader();
}

uint64_t sub_23BF4C164()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_23BFF96A0();
  if (v1 <= 0x3F)
  {
    result = sub_23BFF96A0();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_23BF4C1F4(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  size_t v24;
  uint64_t v25;
  size_t v26;
  size_t v27;
  size_t v28;
  size_t v29;
  size_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  void *v43;
  _BYTE *v44;
  size_t v45;
  uint64_t v46;
  uint64_t v47;
  size_t v48;
  int v49;
  int v50;
  int v51;
  unint64_t v52;
  size_t v53;
  unsigned int v54;
  void *v55;
  const void *v56;
  void *v57;
  const void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  void *v66;
  const void *v67;
  unsigned int (*v68)(const void *, uint64_t, uint64_t);
  size_t v70;
  size_t v71;
  uint64_t v72;
  size_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  size_t v77;
  size_t v78;
  size_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  void *__dst;
  uint64_t v84;
  uint64_t v85;

  v6 = sub_23BFF82CC();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = a3[7];
  v9 = a3[8];
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_DWORD *)(v10 + 84);
  v12 = *(_DWORD *)(v10 + 80);
  v13 = *(unsigned int *)(v7 + 84);
  v14 = *(_DWORD *)(v10 + 80) | *(_DWORD *)(v7 + 80);
  v84 = a3[2];
  v15 = *(_QWORD *)(v84 - 8);
  v16 = *(unsigned int *)(v15 + 84);
  v17 = *(_DWORD *)(v15 + 80);
  v18 = v14 | *(_DWORD *)(v15 + 80);
  v19 = (v14 | *(_BYTE *)(v15 + 80));
  v20 = v11 - 1;
  if (!v11)
    v20 = 0;
  if (v20 <= v13)
    v21 = *(_DWORD *)(v7 + 84);
  else
    v21 = v20;
  v22 = v16 - 1;
  if (!(_DWORD)v16)
    v22 = 0;
  if (v22 <= v21)
    v23 = v21;
  else
    v23 = v22;
  if (v11)
    v24 = *(_QWORD *)(v10 + 64);
  else
    v24 = *(_QWORD *)(v10 + 64) + 1;
  v25 = *(_QWORD *)(v7 + 64) + v12;
  v26 = v24 + v17;
  if ((_DWORD)v16)
    v28 = *(_QWORD *)(v15 + 64);
  else
    v28 = *(_QWORD *)(v15 + 64) + 1;
  v27 = (v24 + v17 + (v25 & ~v12)) & ~v17;
  v29 = v27 + v28;
  if (v23)
    v30 = v27 + v28;
  else
    v30 = v29 + 1;
  v85 = v8;
  v31 = *(_QWORD *)(v8 - 8);
  v32 = *(_DWORD *)(v31 + 80);
  v33 = *(_QWORD *)(v31 + 64);
  if (!*(_DWORD *)(v31 + 84))
    ++v33;
  v34 = (*(_DWORD *)(v31 + 80) | v18) & 0x100000;
  if ((v32 | v19) > 7
    || v34 != 0
    || ((v32 + 8 + ((((v30 + ((v19 + 1) & ~v19) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)) & ~v32)
     + v33 > 0x18)
  {
    v37 = *a2;
    *a1 = *a2;
    v38 = v37 + (((v32 | v19) & 0xF8 ^ 0x1F8) & ((v32 | v19) + 16));
    swift_retain();
    return (uint64_t *)v38;
  }
  v39 = ~v19;
  v40 = ~v12;
  *(_BYTE *)a1 = *(_BYTE *)a2;
  v81 = v32 + 8;
  v82 = a1;
  v41 = (char *)a1 + v19;
  v42 = (char *)a2 + v19;
  v43 = (void *)((unint64_t)(v41 + 1) & v39);
  v44 = (_BYTE *)((unint64_t)(v42 + 1) & v39);
  v79 = v33;
  v80 = ~v32;
  v75 = ~v17;
  v76 = v9;
  __dst = v43;
  v74 = v40;
  if (v23)
  {
    if ((_DWORD)v13 == v23)
    {
      v45 = v29;
      v70 = v30;
      v71 = v28;
      v46 = (unint64_t)(v42 + 1) & v39;
      v47 = v6;
      v48 = v24 + v17;
      v49 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v46, v13, v6);
      v26 = v48;
      v6 = v47;
      v44 = (_BYTE *)v46;
      v30 = v70;
      v28 = v71;
      v29 = v45;
      v43 = __dst;
      if (!v49)
        goto LABEL_47;
    }
    else
    {
      v72 = v6;
      v77 = v29;
      v52 = (unint64_t)&v44[v25] & v40;
      v53 = v24 + v17;
      if (v20 == v23)
        v54 = (*(uint64_t (**)(unint64_t))(v10 + 48))(v52);
      else
        v54 = (*(uint64_t (**)(size_t, uint64_t, uint64_t))(v15 + 48))((v26 + v52) & ~v17, v16, v84);
      v26 = v53;
      v29 = v77;
      v43 = __dst;
      v6 = v72;
      if (v54 < 2)
      {
LABEL_47:
        v73 = v26;
        v78 = v29;
        (*(void (**)(void *, _BYTE *, uint64_t))(v7 + 16))(v43, v44, v6);
        v55 = (void *)(((unint64_t)v43 + v25) & v74);
        v56 = (const void *)((unint64_t)&v44[v25] & v74);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v56, 1, v76))
        {
          memcpy(v55, v56, v24);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v55, v56, v76);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v55, 0, 1, v76);
        }
        v57 = (void *)(((unint64_t)v55 + v73) & v75);
        v58 = (const void *)(((unint64_t)v56 + v73) & v75);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v58, 1, v84))
        {
          memcpy(v57, v58, v28);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v57, v58, v84);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v57, 0, 1, v84);
        }
        v59 = v85;
        v43 = __dst;
        v61 = v80;
        v60 = v81;
        if (!v23)
          *((_BYTE *)__dst + v78) = 0;
        goto LABEL_57;
      }
    }
  }
  else
  {
    if (!v44[v29])
      goto LABEL_47;
    v50 = (v44[v29] - 1) << (8 * v29);
    if (v29 > 3)
      v50 = 0;
    if ((_DWORD)v29)
    {
      if (v29 <= 3)
        v51 = v29;
      else
        v51 = 4;
      __asm { BR              X11 }
    }
    if (v50 == -1)
      goto LABEL_47;
  }
  memcpy(v43, v44, v30);
  v59 = v85;
  v61 = v80;
  v60 = v81;
LABEL_57:
  v62 = (_QWORD *)(((unint64_t)v43 + v30 + 7) & 0xFFFFFFFFFFFFFFF8);
  v63 = (_QWORD *)((unint64_t)&v44[v30 + 7] & 0xFFFFFFFFFFFFFFF8);
  *v62 = *v63;
  v62[1] = v63[1];
  v64 = (_QWORD *)(((unint64_t)v62 + 23) & 0xFFFFFFFFFFFFFFF8);
  v65 = (_QWORD *)(((unint64_t)v63 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v64 = *v65;
  v66 = (void *)(((unint64_t)v64 + v60) & v61);
  v67 = (const void *)(((unint64_t)v65 + v60) & v61);
  v68 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v31 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v68(v67, 1, v59))
  {
    memcpy(v66, v67, v79);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v31 + 16))(v66, v67, v59);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v66, 0, 1, v59);
  }
  return v82;
}

uint64_t sub_23BF4C6CC(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t result;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v4 = sub_23BFF82CC();
  v5 = *(_QWORD *)(v4 - 8);
  v42 = a2[8];
  v6 = *(_QWORD *)(v42 - 8);
  v7 = *(unsigned int *)(v5 + 84);
  v8 = *(_DWORD *)(v6 + 84);
  v43 = a2[2];
  v9 = *(_QWORD *)(v43 - 8);
  v10 = *(unsigned int *)(v9 + 84);
  v11 = (*(_DWORD *)(v6 + 80) | *(_DWORD *)(v5 + 80) | *(_DWORD *)(v9 + 80));
  v12 = *(_DWORD *)(v6 + 80);
  v13 = *(_DWORD *)(v9 + 80);
  v14 = (a1 + v11 + 1) & ~v11;
  v15 = v8 - 1;
  if (!v8)
    v15 = 0;
  if (v15 <= v7)
    v16 = *(_DWORD *)(v5 + 84);
  else
    v16 = v15;
  v17 = v10 - 1;
  if (!(_DWORD)v10)
    v17 = 0;
  if (v17 <= v16)
    v18 = v16;
  else
    v18 = v17;
  v19 = *(_QWORD *)(v6 + 64);
  if (!v8)
    ++v19;
  v20 = ~v12;
  v21 = *(_QWORD *)(v5 + 64) + v12;
  v22 = v21 & ~v12;
  v23 = ~v13;
  v24 = v19 + v13;
  v25 = (v19 + v13 + v22) & ~v13;
  v26 = *(_QWORD *)(v9 + 64);
  if (!(_DWORD)v10)
    ++v26;
  v27 = v26 + v25;
  v40 = v20;
  v41 = v23;
  if (v18)
  {
    if ((_DWORD)v7 == v18)
    {
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v14, v7, v4))
        goto LABEL_37;
    }
    else
    {
      v30 = (v21 + v14) & v20;
      if (v15 == v18)
        v31 = (*(uint64_t (**)(uint64_t))(v6 + 48))(v30);
      else
        v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))((v24 + v30) & v23, v10, v43);
      if (v31 >= 2)
        goto LABEL_37;
    }
    goto LABEL_33;
  }
  if (!*(_BYTE *)(v14 + v27))
    goto LABEL_33;
  v28 = (*(unsigned __int8 *)(v14 + v27) - 1) << (8 * v27);
  if (v27 > 3)
    v28 = 0;
  if ((_DWORD)v27)
  {
    if (v27 <= 3)
      v29 = v26 + v25;
    else
      v29 = 4;
    __asm { BR              X11 }
  }
  if (v28 == -1)
  {
LABEL_33:
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v14, v4);
    v32 = (v21 + v14) & v40;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v32, 1, v42))
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v32, v42);
    v33 = (v24 + v32) & v41;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v33, 1, v43))
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v33, v43);
  }
LABEL_37:
  if (v18)
    v34 = v14;
  else
    v34 = v14 + 1;
  v35 = (v34 + v27 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v36 = a2[7];
  v37 = *(_QWORD *)(v36 - 8);
  v38 = (((v35 + 23) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v37 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v37 + 48))(v38, 1, v36);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v37 + 8))(v38, v36);
  return result;
}

_BYTE *sub_23BF4C9B8(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  size_t v27;
  int v28;
  int v29;
  unint64_t v30;
  void *v31;
  const void *v32;
  void *v33;
  const void *v34;
  void *v35;
  uint64_t v36;
  size_t v37;
  size_t v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  const void *v47;
  unsigned int (*v48)(const void *, uint64_t, uint64_t);
  size_t v49;
  size_t __n;
  size_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  void *__dst;

  *a1 = *a2;
  v6 = sub_23BFF82CC();
  v7 = *(_QWORD *)(v6 - 8);
  v54 = *(_QWORD *)(a3 + 64);
  v8 = *(_QWORD *)(v54 - 8);
  v9 = *(_DWORD *)(v8 + 84);
  v10 = *(_DWORD *)(v8 + 80);
  v11 = *(unsigned int *)(v7 + 84);
  v55 = *(_QWORD *)(a3 + 16);
  v56 = a3;
  v12 = *(_QWORD *)(v55 - 8);
  v13 = *(unsigned int *)(v12 + 84);
  v14 = *(_DWORD *)(v12 + 80);
  v15 = (*(_DWORD *)(v8 + 80) | *(_DWORD *)(v7 + 80) | *(_DWORD *)(v12 + 80));
  v57 = a1;
  __dst = (void *)((unint64_t)&a1[v15 + 1] & ~v15);
  v16 = (_BYTE *)((unint64_t)&a2[v15 + 1] & ~v15);
  v17 = v9 - 1;
  if (!v9)
    v17 = 0;
  if (v17 <= v11)
    v18 = *(_DWORD *)(v7 + 84);
  else
    v18 = v17;
  v19 = v13 - 1;
  if (!(_DWORD)v13)
    v19 = 0;
  if (v19 <= v18)
    v20 = v18;
  else
    v20 = v19;
  if (v9)
    v21 = *(_QWORD *)(v8 + 64);
  else
    v21 = *(_QWORD *)(v8 + 64) + 1;
  v22 = ~v10;
  v23 = *(_QWORD *)(v7 + 64) + v10;
  v24 = v21 + v14;
  v25 = (v21 + v14 + (v23 & ~v10)) & ~v14;
  v26 = *(_QWORD *)(v12 + 64);
  if (!(_DWORD)v13)
    ++v26;
  v27 = v25 + v26;
  v52 = v26;
  v53 = ~v14;
  __n = v21;
  if (!v20)
  {
    if (!v16[v27])
      goto LABEL_32;
    v28 = (v16[v27] - 1) << (8 * v27);
    if (v27 > 3)
      v28 = 0;
    if ((_DWORD)v27)
    {
      if (v27 <= 3)
        v29 = v25 + v26;
      else
        v29 = 4;
      __asm { BR              X11 }
    }
    if (v28 == -1)
      goto LABEL_32;
    goto LABEL_41;
  }
  if ((_DWORD)v11 != v20)
  {
    v30 = (unint64_t)&v16[v23] & v22;
    if (v17 == v20)
    {
      if ((*(unsigned int (**)(unint64_t))(v8 + 48))(v30) < 2)
        goto LABEL_32;
    }
    else if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v12 + 48))((v24 + v30) & ~v14, v13, v55) < 2)
    {
      goto LABEL_32;
    }
LABEL_41:
    if (v20)
      v37 = v27;
    else
      v37 = v27 + 1;
    v35 = __dst;
    memcpy(__dst, v16, v37);
    v36 = v56;
    goto LABEL_45;
  }
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v7 + 48))(v16, v11, v6))
    goto LABEL_41;
LABEL_32:
  (*(void (**)(void *, _BYTE *, uint64_t))(v7 + 16))(__dst, v16, v6);
  v31 = (void *)(((unint64_t)__dst + v23) & v22);
  v32 = (const void *)((unint64_t)&v16[v23] & v22);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v32, 1, v54))
  {
    memcpy(v31, v32, __n);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(v31, v32, v54);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v31, 0, 1, v54);
  }
  v33 = (void *)(((unint64_t)v31 + v24) & v53);
  v34 = (const void *)(((unint64_t)v32 + v24) & v53);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v34, 1, v55))
  {
    memcpy(v33, v34, v52);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 16))(v33, v34, v55);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v33, 0, 1, v55);
  }
  v35 = __dst;
  v36 = v56;
  if (!v20)
    *((_BYTE *)__dst + v27) = 0;
LABEL_45:
  if (v20)
    v38 = v27;
  else
    v38 = v27 + 1;
  v39 = (_QWORD *)(((unint64_t)v35 + v38 + 7) & 0xFFFFFFFFFFFFFFF8);
  v40 = (_QWORD *)((unint64_t)&v16[v38 + 7] & 0xFFFFFFFFFFFFFFF8);
  *v39 = *v40;
  v39[1] = v40[1];
  v41 = (_QWORD *)(((unint64_t)v39 + 23) & 0xFFFFFFFFFFFFFFF8);
  v42 = (_QWORD *)(((unint64_t)v40 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v41 = *v42;
  v43 = *(_QWORD *)(v36 + 56);
  v44 = *(_QWORD *)(v43 - 8);
  v45 = *(unsigned __int8 *)(v44 + 80);
  v46 = (void *)(((unint64_t)v41 + v45 + 8) & ~v45);
  v47 = (const void *)(((unint64_t)v42 + v45 + 8) & ~v45);
  v48 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v44 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v48(v47, 1, v43))
  {
    if (*(_DWORD *)(v44 + 84))
      v49 = *(_QWORD *)(v44 + 64);
    else
      v49 = *(_QWORD *)(v44 + 64) + 1;
    memcpy(v46, v47, v49);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v44 + 16))(v46, v47, v43);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v46, 0, 1, v43);
  }
  return v57;
}

_BYTE *sub_23BF4CDC0(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  void *v29;
  int v30;
  const void *v31;
  _BYTE *v32;
  uint64_t v33;
  char v34;
  int v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  size_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  uint64_t (*v51)(void *, uint64_t, uint64_t);
  int v52;
  int v53;
  uint64_t v54;
  void *v55;
  void *v56;
  uint64_t (*v57)(void *, uint64_t, uint64_t);
  uint64_t v58;
  int v59;
  int v60;
  void *v61;
  const void *v62;
  void *v63;
  const void *v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  void *v74;
  uint64_t (*v75)(void *, uint64_t, uint64_t);
  int v76;
  int v77;
  size_t v78;
  int v80;
  uint64_t v81;
  size_t __n;
  size_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *__dst;
  _BYTE *v92;
  uint64_t v93;

  *a1 = *a2;
  v6 = sub_23BFF82CC();
  v7 = *(_QWORD *)(v6 - 8);
  v86 = *(_QWORD *)(a3 + 64);
  v8 = *(_QWORD *)(v86 - 8);
  v9 = *(unsigned int *)(v8 + 84);
  v10 = *(_DWORD *)(v8 + 80);
  v11 = *(unsigned int *)(v7 + 84);
  v90 = a3;
  v12 = *(_QWORD *)(a3 + 16);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned int *)(v13 + 84);
  v15 = *(_DWORD *)(v13 + 80);
  v16 = (*(_DWORD *)(v8 + 80) | *(_DWORD *)(v7 + 80) | *(_DWORD *)(v13 + 80));
  v92 = a1;
  v17 = (unint64_t)&a1[v16 + 1] & ~v16;
  v93 = (unint64_t)&a2[v16 + 1] & ~v16;
  if ((_DWORD)v9)
    v18 = v9 - 1;
  else
    v18 = 0;
  if (v18 <= v11)
    v19 = *(_DWORD *)(v7 + 84);
  else
    v19 = v18;
  v20 = v14 - 1;
  if (!(_DWORD)v14)
    v20 = 0;
  if (v20 <= v19)
    v21 = v19;
  else
    v21 = v20;
  if ((_DWORD)v9)
    v22 = *(_QWORD *)(v8 + 64);
  else
    v22 = *(_QWORD *)(v8 + 64) + 1;
  v23 = *(_QWORD *)(v7 + 64) + v10;
  if ((_DWORD)v14)
    v24 = *(_QWORD *)(v13 + 64);
  else
    v24 = *(_QWORD *)(v13 + 64) + 1;
  v25 = ((v22 + v15 + (v23 & ~v10)) & ~v15) + v24;
  __dst = (void *)v17;
  v83 = v24;
  v84 = v22 + v15;
  v85 = ~v15;
  __n = v22;
  v88 = ~v10;
  v89 = *(_QWORD *)(v86 - 8);
  v87 = *(_QWORD *)(v7 + 64) + v10;
  if (!v21)
  {
    v34 = 8 * v25;
    v32 = v92;
    v33 = v90;
    v31 = (const void *)v93;
    v29 = (void *)v17;
    if (!*(_BYTE *)(v17 + v25))
      goto LABEL_49;
    v35 = (*(unsigned __int8 *)(v17 + v25) - 1) << v34;
    if (v25 > 3)
      v35 = 0;
    if ((_DWORD)v25)
    {
      if (v25 <= 3)
        v36 = v25;
      else
        v36 = 4;
      __asm { BR              X12 }
    }
    if (v35 == -1)
    {
LABEL_49:
      if (!*(_BYTE *)(v93 + v25))
        goto LABEL_67;
      v43 = (*(unsigned __int8 *)(v93 + v25) - 1) << v34;
      if (v25 > 3)
        v43 = 0;
      if ((_DWORD)v25)
      {
        if (v25 <= 3)
          v44 = v25;
        else
          v44 = 4;
        __asm { BR              X11 }
      }
      v30 = v43 + 1;
      goto LABEL_58;
    }
    if (!*(_BYTE *)(v93 + v25) || (*(unsigned __int8 *)(v93 + v25) - 1) << v34 == -1)
      goto LABEL_87;
LABEL_83:
    if (v21)
      v47 = v25;
    else
      v47 = v25 + 1;
LABEL_86:
    memcpy(v29, v31, v47);
    goto LABEL_93;
  }
  if ((_DWORD)v11 == v21)
  {
    v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v27 = *(_QWORD *)(v6 - 8);
    v80 = v26(v17, v11, v6);
    v28 = v11;
    v29 = __dst;
    v30 = v26(v93, v28, v6);
    v7 = v27;
    v31 = (const void *)v93;
    v32 = v92;
    v33 = v90;
    if (v80)
    {
      if (!v30)
        goto LABEL_87;
      goto LABEL_83;
    }
LABEL_58:
    if (v30)
    {
LABEL_59:
      (*(void (**)(void *, uint64_t))(v7 + 8))(v29, v6);
      v45 = ((unint64_t)v29 + v87) & v88;
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v89 + 48))(v45, 1, v86))
        (*(void (**)(unint64_t, uint64_t))(v89 + 8))(v45, v86);
      v46 = (v84 + v45) & v85;
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v13 + 48))(v46, 1, v12))
        (*(void (**)(unint64_t, uint64_t))(v13 + 8))(v46, v12);
      if (v21)
        v47 = v25;
      else
        v47 = v25 + 1;
      v29 = __dst;
      goto LABEL_86;
    }
LABEL_67:
    v48 = v13;
    (*(void (**)(void *, const void *, uint64_t))(v7 + 24))(v29, v31, v6);
    v49 = (void *)(((unint64_t)v29 + v87) & v88);
    v50 = (void *)(((unint64_t)v31 + v87) & v88);
    v51 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v89 + 48);
    v52 = v51(v49, 1, v86);
    v53 = v51(v50, 1, v86);
    if (v52)
    {
      v54 = v12;
      if (!v53)
      {
        (*(void (**)(void *, void *, uint64_t))(v89 + 16))(v49, v50, v86);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v89 + 56))(v49, 0, 1, v86);
        goto LABEL_73;
      }
    }
    else
    {
      v54 = v12;
      if (!v53)
      {
        (*(void (**)(void *, void *, uint64_t))(v89 + 24))(v49, v50, v86);
LABEL_73:
        v31 = (const void *)v93;
        v55 = (void *)(((unint64_t)v49 + v84) & v85);
        v56 = (void *)(((unint64_t)v50 + v84) & v85);
        v57 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v48 + 48);
        v58 = v54;
        v59 = v57(v55, 1, v54);
        v60 = v57(v56, 1, v58);
        if (v59)
        {
          if (!v60)
          {
            (*(void (**)(void *, void *, uint64_t))(v48 + 16))(v55, v56, v58);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v55, 0, 1, v58);
LABEL_79:
            v29 = __dst;
            v32 = v92;
            v33 = v90;
            goto LABEL_93;
          }
        }
        else
        {
          if (!v60)
          {
            (*(void (**)(void *, void *, uint64_t))(v48 + 24))(v55, v56, v58);
            goto LABEL_79;
          }
          (*(void (**)(void *, uint64_t))(v48 + 8))(v55, v58);
        }
        memcpy(v55, v56, v83);
        goto LABEL_79;
      }
      (*(void (**)(void *, uint64_t))(v89 + 8))(v49, v86);
    }
    memcpy(v49, v50, __n);
    goto LABEL_73;
  }
  v81 = *(_QWORD *)(v6 - 8);
  v29 = (void *)v17;
  v37 = (v23 + v17) & ~v10;
  if (v18 == v21)
    v38 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v37, v9, v86);
  else
    v38 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))((v22 + v15 + v37) & ~v15, v14, v12);
  if (v38 < 2)
  {
    v39 = (v87 + v93) & v88;
    if (v18 == v21)
      v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v89 + 48))(v39, v9, v86);
    else
      v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))((v84 + v39) & v85, v14, v12);
    v32 = v92;
    v33 = v90;
    v31 = (const void *)v93;
    v7 = v81;
    if (v40 >= 2)
      goto LABEL_59;
    goto LABEL_67;
  }
  v41 = (v87 + v93) & v88;
  if (v18 == v21)
    v42 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v89 + 48))(v41, v9, v86);
  else
    v42 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))((v84 + v41) & v85, v14, v12);
  v32 = v92;
  v33 = v90;
  v31 = (const void *)v93;
  v7 = v81;
  if (v42 >= 2)
    goto LABEL_83;
LABEL_87:
  (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v29, v31, v6);
  v61 = (void *)(((unint64_t)v29 + v87) & v88);
  v62 = (const void *)(((unint64_t)v31 + v87) & v88);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v89 + 48))(v62, 1, v86))
  {
    memcpy(v61, v62, __n);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v89 + 16))(v61, v62, v86);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v89 + 56))(v61, 0, 1, v86);
  }
  v63 = (void *)(((unint64_t)v61 + v84) & v85);
  v64 = (const void *)(((unint64_t)v62 + v84) & v85);
  v32 = v92;
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v64, 1, v12))
  {
    memcpy(v63, v64, v83);
    v29 = __dst;
    if (v21)
      goto LABEL_93;
    goto LABEL_92;
  }
  (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(v63, v64, v12);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v63, 0, 1, v12);
  v29 = __dst;
  if (!v21)
LABEL_92:
    *((_BYTE *)v29 + v25) = 0;
LABEL_93:
  if (v21)
    v65 = v25;
  else
    v65 = v25 + 1;
  v66 = (_QWORD *)(((unint64_t)v29 + v65 + 7) & 0xFFFFFFFFFFFFFFF8);
  v67 = (_QWORD *)(((unint64_t)v31 + v65 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v66 = *v67;
  v66[1] = v67[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v68 = (_QWORD *)(((unint64_t)v66 + 23) & 0xFFFFFFFFFFFFFFF8);
  v69 = (_QWORD *)(((unint64_t)v67 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v68 = *v69;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v70 = *(_QWORD *)(v33 + 56);
  v71 = *(_QWORD *)(v70 - 8);
  v72 = *(unsigned __int8 *)(v71 + 80);
  v73 = (void *)(((unint64_t)v68 + v72 + 8) & ~v72);
  v74 = (void *)(((unint64_t)v69 + v72 + 8) & ~v72);
  v75 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v71 + 48);
  v76 = v75(v73, 1, v70);
  v77 = v75(v74, 1, v70);
  if (v76)
  {
    if (!v77)
    {
      (*(void (**)(void *, void *, uint64_t))(v71 + 16))(v73, v74, v70);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v71 + 56))(v73, 0, 1, v70);
      return v32;
    }
  }
  else
  {
    if (!v77)
    {
      (*(void (**)(void *, void *, uint64_t))(v71 + 24))(v73, v74, v70);
      return v32;
    }
    (*(void (**)(void *, uint64_t))(v71 + 8))(v73, v70);
  }
  if (*(_DWORD *)(v71 + 84))
    v78 = *(_QWORD *)(v71 + 64);
  else
    v78 = *(_QWORD *)(v71 + 64) + 1;
  memcpy(v73, v74, v78);
  return v32;
}

_BYTE *sub_23BF4D6A8(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  size_t v27;
  int v28;
  int v29;
  unint64_t v30;
  void *v31;
  const void *v32;
  void *v33;
  const void *v34;
  void *v35;
  uint64_t v36;
  size_t v37;
  size_t v38;
  _OWORD *v39;
  _OWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  const void *v47;
  size_t v48;
  size_t __n;
  size_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  void *__dst;

  *a1 = *a2;
  v6 = sub_23BFF82CC();
  v7 = *(_QWORD *)(v6 - 8);
  v53 = *(_QWORD *)(a3 + 64);
  v8 = *(_QWORD *)(v53 - 8);
  v9 = *(_DWORD *)(v8 + 84);
  v10 = *(_DWORD *)(v8 + 80);
  v11 = *(unsigned int *)(v7 + 84);
  v54 = *(_QWORD *)(a3 + 16);
  v55 = a3;
  v12 = *(_QWORD *)(v54 - 8);
  v13 = *(unsigned int *)(v12 + 84);
  v14 = *(_DWORD *)(v12 + 80);
  v15 = (*(_DWORD *)(v8 + 80) | *(_DWORD *)(v7 + 80) | *(_DWORD *)(v12 + 80));
  v56 = a1;
  __dst = (void *)((unint64_t)&a1[v15 + 1] & ~v15);
  v16 = (_BYTE *)((unint64_t)&a2[v15 + 1] & ~v15);
  v17 = v9 - 1;
  if (!v9)
    v17 = 0;
  if (v17 <= v11)
    v18 = *(_DWORD *)(v7 + 84);
  else
    v18 = v17;
  v19 = v13 - 1;
  if (!(_DWORD)v13)
    v19 = 0;
  if (v19 <= v18)
    v20 = v18;
  else
    v20 = v19;
  if (v9)
    v21 = *(_QWORD *)(v8 + 64);
  else
    v21 = *(_QWORD *)(v8 + 64) + 1;
  v22 = ~v10;
  v23 = *(_QWORD *)(v7 + 64) + v10;
  v24 = v21 + v14;
  v25 = (v21 + v14 + (v23 & ~v10)) & ~v14;
  v26 = *(_QWORD *)(v12 + 64);
  if (!(_DWORD)v13)
    ++v26;
  v27 = v25 + v26;
  v51 = v26;
  v52 = ~v14;
  __n = v21;
  if (!v20)
  {
    if (!v16[v27])
      goto LABEL_32;
    v28 = (v16[v27] - 1) << (8 * v27);
    if (v27 > 3)
      v28 = 0;
    if ((_DWORD)v27)
    {
      if (v27 <= 3)
        v29 = v25 + v26;
      else
        v29 = 4;
      __asm { BR              X11 }
    }
    if (v28 == -1)
      goto LABEL_32;
    goto LABEL_41;
  }
  if ((_DWORD)v11 != v20)
  {
    v30 = (unint64_t)&v16[v23] & v22;
    if (v17 == v20)
    {
      if ((*(unsigned int (**)(unint64_t))(v8 + 48))(v30) < 2)
        goto LABEL_32;
    }
    else if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v12 + 48))((v24 + v30) & ~v14, v13, v54) < 2)
    {
      goto LABEL_32;
    }
LABEL_41:
    if (v20)
      v37 = v27;
    else
      v37 = v27 + 1;
    v35 = __dst;
    memcpy(__dst, v16, v37);
    v36 = v55;
    goto LABEL_45;
  }
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v7 + 48))(v16, v11, v6))
    goto LABEL_41;
LABEL_32:
  (*(void (**)(void *, _BYTE *, uint64_t))(v7 + 32))(__dst, v16, v6);
  v31 = (void *)(((unint64_t)__dst + v23) & v22);
  v32 = (const void *)((unint64_t)&v16[v23] & v22);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v32, 1, v53))
  {
    memcpy(v31, v32, __n);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(v31, v32, v53);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v31, 0, 1, v53);
  }
  v33 = (void *)(((unint64_t)v31 + v24) & v52);
  v34 = (const void *)(((unint64_t)v32 + v24) & v52);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v34, 1, v54))
  {
    memcpy(v33, v34, v51);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v33, v34, v54);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v33, 0, 1, v54);
  }
  v35 = __dst;
  v36 = v55;
  if (!v20)
    *((_BYTE *)__dst + v27) = 0;
LABEL_45:
  if (v20)
    v38 = v27;
  else
    v38 = v27 + 1;
  v39 = (_OWORD *)(((unint64_t)v35 + v38 + 7) & 0xFFFFFFFFFFFFFFF8);
  v40 = (_OWORD *)((unint64_t)&v16[v38 + 7] & 0xFFFFFFFFFFFFFFF8);
  *v39 = *v40;
  v41 = (_QWORD *)(((unint64_t)v39 + 23) & 0xFFFFFFFFFFFFFFF8);
  v42 = (_QWORD *)(((unint64_t)v40 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v41 = *v42;
  v43 = *(_QWORD *)(v36 + 56);
  v44 = *(_QWORD *)(v43 - 8);
  v45 = *(unsigned __int8 *)(v44 + 80);
  v46 = (void *)(((unint64_t)v41 + v45 + 8) & ~v45);
  v47 = (const void *)(((unint64_t)v42 + v45 + 8) & ~v45);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v44 + 48))(v47, 1, v43))
  {
    if (*(_DWORD *)(v44 + 84))
      v48 = *(_QWORD *)(v44 + 64);
    else
      v48 = *(_QWORD *)(v44 + 64) + 1;
    memcpy(v46, v47, v48);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v44 + 32))(v46, v47, v43);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v46, 0, 1, v43);
  }
  return v56;
}

_BYTE *sub_23BF4DA94(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  void *v29;
  int v30;
  const void *v31;
  _BYTE *v32;
  uint64_t v33;
  char v34;
  int v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  size_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  uint64_t (*v51)(void *, uint64_t, uint64_t);
  int v52;
  int v53;
  uint64_t v54;
  void *v55;
  void *v56;
  uint64_t (*v57)(void *, uint64_t, uint64_t);
  uint64_t v58;
  int v59;
  int v60;
  void *v61;
  const void *v62;
  void *v63;
  const void *v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  void *v74;
  uint64_t (*v75)(void *, uint64_t, uint64_t);
  int v76;
  size_t v77;
  int v79;
  uint64_t v80;
  size_t __n;
  size_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *__dst;
  _BYTE *v91;
  uint64_t v92;

  *a1 = *a2;
  v6 = sub_23BFF82CC();
  v7 = *(_QWORD *)(v6 - 8);
  v85 = *(_QWORD *)(a3 + 64);
  v8 = *(_QWORD *)(v85 - 8);
  v9 = *(unsigned int *)(v8 + 84);
  v10 = *(_DWORD *)(v8 + 80);
  v11 = *(unsigned int *)(v7 + 84);
  v89 = a3;
  v12 = *(_QWORD *)(a3 + 16);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned int *)(v13 + 84);
  v15 = *(_DWORD *)(v13 + 80);
  v16 = (*(_DWORD *)(v8 + 80) | *(_DWORD *)(v7 + 80) | *(_DWORD *)(v13 + 80));
  v91 = a1;
  v17 = (unint64_t)&a1[v16 + 1] & ~v16;
  v92 = (unint64_t)&a2[v16 + 1] & ~v16;
  if ((_DWORD)v9)
    v18 = v9 - 1;
  else
    v18 = 0;
  if (v18 <= v11)
    v19 = *(_DWORD *)(v7 + 84);
  else
    v19 = v18;
  v20 = v14 - 1;
  if (!(_DWORD)v14)
    v20 = 0;
  if (v20 <= v19)
    v21 = v19;
  else
    v21 = v20;
  if ((_DWORD)v9)
    v22 = *(_QWORD *)(v8 + 64);
  else
    v22 = *(_QWORD *)(v8 + 64) + 1;
  v23 = *(_QWORD *)(v7 + 64) + v10;
  if ((_DWORD)v14)
    v24 = *(_QWORD *)(v13 + 64);
  else
    v24 = *(_QWORD *)(v13 + 64) + 1;
  v25 = ((v22 + v15 + (v23 & ~v10)) & ~v15) + v24;
  __dst = (void *)v17;
  v82 = v24;
  v83 = v22 + v15;
  v84 = ~v15;
  __n = v22;
  v87 = ~v10;
  v88 = *(_QWORD *)(v85 - 8);
  v86 = *(_QWORD *)(v7 + 64) + v10;
  if (!v21)
  {
    v34 = 8 * v25;
    v32 = v91;
    v33 = v89;
    v31 = (const void *)v92;
    v29 = (void *)v17;
    if (!*(_BYTE *)(v17 + v25))
      goto LABEL_49;
    v35 = (*(unsigned __int8 *)(v17 + v25) - 1) << v34;
    if (v25 > 3)
      v35 = 0;
    if ((_DWORD)v25)
    {
      if (v25 <= 3)
        v36 = v25;
      else
        v36 = 4;
      __asm { BR              X12 }
    }
    if (v35 == -1)
    {
LABEL_49:
      if (!*(_BYTE *)(v92 + v25))
        goto LABEL_67;
      v43 = (*(unsigned __int8 *)(v92 + v25) - 1) << v34;
      if (v25 > 3)
        v43 = 0;
      if ((_DWORD)v25)
      {
        if (v25 <= 3)
          v44 = v25;
        else
          v44 = 4;
        __asm { BR              X11 }
      }
      v30 = v43 + 1;
      goto LABEL_58;
    }
    if (!*(_BYTE *)(v92 + v25) || (*(unsigned __int8 *)(v92 + v25) - 1) << v34 == -1)
      goto LABEL_87;
LABEL_83:
    if (v21)
      v47 = v25;
    else
      v47 = v25 + 1;
LABEL_86:
    memcpy(v29, v31, v47);
    goto LABEL_93;
  }
  if ((_DWORD)v11 == v21)
  {
    v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v27 = *(_QWORD *)(v6 - 8);
    v79 = v26(v17, v11, v6);
    v28 = v11;
    v29 = __dst;
    v30 = v26(v92, v28, v6);
    v7 = v27;
    v31 = (const void *)v92;
    v32 = v91;
    v33 = v89;
    if (v79)
    {
      if (!v30)
        goto LABEL_87;
      goto LABEL_83;
    }
LABEL_58:
    if (v30)
    {
LABEL_59:
      (*(void (**)(void *, uint64_t))(v7 + 8))(v29, v6);
      v45 = ((unint64_t)v29 + v86) & v87;
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v88 + 48))(v45, 1, v85))
        (*(void (**)(unint64_t, uint64_t))(v88 + 8))(v45, v85);
      v46 = (v83 + v45) & v84;
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v13 + 48))(v46, 1, v12))
        (*(void (**)(unint64_t, uint64_t))(v13 + 8))(v46, v12);
      if (v21)
        v47 = v25;
      else
        v47 = v25 + 1;
      v29 = __dst;
      goto LABEL_86;
    }
LABEL_67:
    v48 = v13;
    (*(void (**)(void *, const void *, uint64_t))(v7 + 40))(v29, v31, v6);
    v49 = (void *)(((unint64_t)v29 + v86) & v87);
    v50 = (void *)(((unint64_t)v31 + v86) & v87);
    v51 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v88 + 48);
    v52 = v51(v49, 1, v85);
    v53 = v51(v50, 1, v85);
    if (v52)
    {
      v54 = v12;
      if (!v53)
      {
        (*(void (**)(void *, void *, uint64_t))(v88 + 32))(v49, v50, v85);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v88 + 56))(v49, 0, 1, v85);
        goto LABEL_73;
      }
    }
    else
    {
      v54 = v12;
      if (!v53)
      {
        (*(void (**)(void *, void *, uint64_t))(v88 + 40))(v49, v50, v85);
LABEL_73:
        v31 = (const void *)v92;
        v55 = (void *)(((unint64_t)v49 + v83) & v84);
        v56 = (void *)(((unint64_t)v50 + v83) & v84);
        v57 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v48 + 48);
        v58 = v54;
        v59 = v57(v55, 1, v54);
        v60 = v57(v56, 1, v58);
        if (v59)
        {
          if (!v60)
          {
            (*(void (**)(void *, void *, uint64_t))(v48 + 32))(v55, v56, v58);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v55, 0, 1, v58);
LABEL_79:
            v29 = __dst;
            v32 = v91;
            v33 = v89;
            goto LABEL_93;
          }
        }
        else
        {
          if (!v60)
          {
            (*(void (**)(void *, void *, uint64_t))(v48 + 40))(v55, v56, v58);
            goto LABEL_79;
          }
          (*(void (**)(void *, uint64_t))(v48 + 8))(v55, v58);
        }
        memcpy(v55, v56, v82);
        goto LABEL_79;
      }
      (*(void (**)(void *, uint64_t))(v88 + 8))(v49, v85);
    }
    memcpy(v49, v50, __n);
    goto LABEL_73;
  }
  v80 = *(_QWORD *)(v6 - 8);
  v29 = (void *)v17;
  v37 = (v23 + v17) & ~v10;
  if (v18 == v21)
    v38 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v37, v9, v85);
  else
    v38 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))((v22 + v15 + v37) & ~v15, v14, v12);
  if (v38 < 2)
  {
    v39 = (v86 + v92) & v87;
    if (v18 == v21)
      v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v88 + 48))(v39, v9, v85);
    else
      v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))((v83 + v39) & v84, v14, v12);
    v32 = v91;
    v33 = v89;
    v31 = (const void *)v92;
    v7 = v80;
    if (v40 >= 2)
      goto LABEL_59;
    goto LABEL_67;
  }
  v41 = (v86 + v92) & v87;
  if (v18 == v21)
    v42 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v88 + 48))(v41, v9, v85);
  else
    v42 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))((v83 + v41) & v84, v14, v12);
  v32 = v91;
  v33 = v89;
  v31 = (const void *)v92;
  v7 = v80;
  if (v42 >= 2)
    goto LABEL_83;
LABEL_87:
  (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(v29, v31, v6);
  v61 = (void *)(((unint64_t)v29 + v86) & v87);
  v62 = (const void *)(((unint64_t)v31 + v86) & v87);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v88 + 48))(v62, 1, v85))
  {
    memcpy(v61, v62, __n);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v88 + 32))(v61, v62, v85);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v88 + 56))(v61, 0, 1, v85);
  }
  v63 = (void *)(((unint64_t)v61 + v83) & v84);
  v64 = (const void *)(((unint64_t)v62 + v83) & v84);
  v32 = v91;
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v64, 1, v12))
  {
    memcpy(v63, v64, v82);
    v29 = __dst;
    if (v21)
      goto LABEL_93;
    goto LABEL_92;
  }
  (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v63, v64, v12);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v63, 0, 1, v12);
  v29 = __dst;
  if (!v21)
LABEL_92:
    *((_BYTE *)v29 + v25) = 0;
LABEL_93:
  if (v21)
    v65 = v25;
  else
    v65 = v25 + 1;
  v66 = (_QWORD *)(((unint64_t)v29 + v65 + 7) & 0xFFFFFFFFFFFFFFF8);
  v67 = (_QWORD *)(((unint64_t)v31 + v65 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v66 = *v67;
  v66[1] = v67[1];
  swift_bridgeObjectRelease();
  v68 = (_QWORD *)(((unint64_t)v66 + 23) & 0xFFFFFFFFFFFFFFF8);
  v69 = (_QWORD *)(((unint64_t)v67 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v68 = *v69;
  swift_bridgeObjectRelease();
  v70 = *(_QWORD *)(v33 + 56);
  v71 = *(_QWORD *)(v70 - 8);
  v72 = *(unsigned __int8 *)(v71 + 80);
  v73 = (void *)(((unint64_t)v68 + v72 + 8) & ~v72);
  v74 = (void *)(((unint64_t)v69 + v72 + 8) & ~v72);
  v75 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v71 + 48);
  LODWORD(v68) = v75(v73, 1, v70);
  v76 = v75(v74, 1, v70);
  if ((_DWORD)v68)
  {
    if (!v76)
    {
      (*(void (**)(void *, void *, uint64_t))(v71 + 32))(v73, v74, v70);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v71 + 56))(v73, 0, 1, v70);
      return v32;
    }
  }
  else
  {
    if (!v76)
    {
      (*(void (**)(void *, void *, uint64_t))(v71 + 40))(v73, v74, v70);
      return v32;
    }
    (*(void (**)(void *, uint64_t))(v71 + 8))(v73, v70);
  }
  if (*(_DWORD *)(v71 + 84))
    v77 = *(_QWORD *)(v71 + 64);
  else
    v77 = *(_QWORD *)(v71 + 64) + 1;
  memcpy(v73, v74, v77);
  return v32;
}

uint64_t sub_23BF4E36C(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  char v38;
  int v39;
  unsigned int v40;
  int v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unsigned int v48;

  v6 = *(_QWORD *)(sub_23BFF82CC() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v9 = a3[7];
  v8 = a3[8];
  v10 = *(_QWORD *)(v8 - 8);
  v11 = *(unsigned int *)(v10 + 84);
  if ((_DWORD)v11)
    v12 = v11 - 1;
  else
    v12 = 0;
  if (v12 <= v7)
    v13 = *(_DWORD *)(v6 + 84);
  else
    v13 = v12;
  v14 = a3[2];
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned int *)(v15 + 84);
  v17 = v16 - 1;
  if (!(_DWORD)v16)
    v17 = 0;
  if (v17 <= v13)
    v18 = v13;
  else
    v18 = v17;
  if (v18)
    v19 = v18 - 1;
  else
    v19 = 0;
  v20 = *(_QWORD *)(v9 - 8);
  v21 = *(unsigned int *)(v20 + 84);
  v22 = v21 - 1;
  if (!(_DWORD)v21)
    v22 = 0;
  if (v19 <= v22)
    v23 = v22;
  else
    v23 = v19;
  if (v23 <= 0x7FFFFFFF)
    v24 = 0x7FFFFFFF;
  else
    v24 = v23;
  if ((_DWORD)v11)
    v25 = *(_QWORD *)(v10 + 64);
  else
    v25 = *(_QWORD *)(v10 + 64) + 1;
  if ((_DWORD)v16)
    v26 = v18 == 0;
  else
    v26 = (v18 == 0) + 1;
  if ((_DWORD)v21)
    v27 = *(_QWORD *)(v20 + 64);
  else
    v27 = *(_QWORD *)(v20 + 64) + 1;
  if (!a2)
    return 0;
  v28 = *(_DWORD *)(v10 + 80);
  v29 = *(_DWORD *)(v15 + 80);
  v30 = (*(_DWORD *)(v10 + 80) | *(_DWORD *)(v6 + 80) | *(_DWORD *)(v15 + 80));
  v31 = *(_QWORD *)(v6 + 64) + v28;
  v32 = v25 + v29;
  v33 = v26 + *(_QWORD *)(v15 + 64) + ((v32 + (v31 & ~v28)) & ~v29);
  v34 = *(unsigned __int8 *)(v20 + 80);
  v35 = v34 + 8;
  v36 = a2 - v24;
  if (a2 <= v24)
    goto LABEL_51;
  v37 = v27 + ((v35 + ((((v33 + ((v30 + 1) & ~v30) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)) & ~v34);
  v38 = 8 * v37;
  if (v37 > 3)
    goto LABEL_35;
  v40 = ((v36 + ~(-1 << v38)) >> v38) + 1;
  if (HIWORD(v40))
  {
    v39 = *(_DWORD *)(a1 + v37);
    v35 = v34 + 8;
    if (v39)
      goto LABEL_42;
  }
  else
  {
    if (v40 <= 0xFF)
    {
      v35 = v34 + 8;
      if (v40 < 2)
        goto LABEL_51;
LABEL_35:
      v39 = *(unsigned __int8 *)(a1 + v37);
      if (!*(_BYTE *)(a1 + v37))
        goto LABEL_51;
LABEL_42:
      v41 = (v39 - 1) << v38;
      if (v37 > 3)
        v41 = 0;
      if ((_DWORD)v37)
      {
        if (v37 <= 3)
          v42 = v37;
        else
          v42 = 4;
        __asm { BR              X11 }
      }
      return v24 + v41 + 1;
    }
    v39 = *(unsigned __int16 *)(a1 + v37);
    v35 = v34 + 8;
    if (*(_WORD *)(a1 + v37))
      goto LABEL_42;
  }
LABEL_51:
  v43 = (a1 + v30 + 1) & ~v30;
  if (v19 == v24)
  {
    if (v18 >= 2)
    {
      if (v7 == v18)
      {
        v44 = (*(uint64_t (**)(uint64_t))(v6 + 48))(v43);
      }
      else
      {
        v47 = (v31 + v43) & ~v28;
        if (v12 == v18)
          v48 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v47, v11, v8);
        else
          v48 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))((v32 + v47) & ~v29, v16, v14);
        if (v48 >= 2)
          v44 = v48 - 1;
        else
          v44 = 0;
      }
      goto LABEL_68;
    }
    return 0;
  }
  v45 = (v43 + v33 + 7) & 0xFFFFFFFFFFFFFFF8;
  if ((v23 & 0x80000000) != 0)
  {
    if (v21 >= 2)
    {
      v44 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v20 + 48))((v35 + ((v45 + 23) & 0xFFFFFFFFFFFFFFF8)) & ~v34, v21, v9);
LABEL_68:
      if (v44 >= 2)
        return v44 - 1;
      else
        return 0;
    }
    return 0;
  }
  v46 = *(_QWORD *)(v45 + 8);
  if (v46 >= 0xFFFFFFFF)
    LODWORD(v46) = -1;
  return (v46 + 1);
}

void sub_23BF4E6A8(_BYTE *a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  BOOL v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;

  v7 = 0;
  v8 = *(_QWORD *)(sub_23BFF82CC() - 8);
  v9 = *(_QWORD *)(a4[8] - 8);
  v10 = *(_DWORD *)(v9 + 84);
  if (v10)
    v11 = v10 - 1;
  else
    v11 = 0;
  if (v11 <= *(_DWORD *)(v8 + 84))
    v12 = *(_DWORD *)(v8 + 84);
  else
    v12 = v11;
  v13 = *(_QWORD *)(a4[2] - 8);
  v14 = *(_DWORD *)(v13 + 84);
  if (v14)
    v15 = v14 - 1;
  else
    v15 = 0;
  if (v15 <= v12)
    v16 = v12;
  else
    v16 = v15;
  if (v16)
    v17 = v16 - 1;
  else
    v17 = 0;
  v18 = *(_QWORD *)(a4[7] - 8);
  v19 = *(_DWORD *)(v18 + 84);
  v20 = v19 - 1;
  if (!v19)
    v20 = 0;
  if (v17 <= v20)
    v21 = v20;
  else
    v21 = v17;
  if (v21 <= 0x7FFFFFFF)
    v22 = 0x7FFFFFFF;
  else
    v22 = v21;
  if (v10)
    v23 = *(_QWORD *)(v9 + 64);
  else
    v23 = *(_QWORD *)(v9 + 64) + 1;
  if (v14)
    v24 = *(_QWORD *)(v13 + 64);
  else
    v24 = *(_QWORD *)(v13 + 64) + 1;
  v25 = (*(_QWORD *)(v8 + 64) + *(_DWORD *)(v9 + 80)) & ~(unint64_t)*(_DWORD *)(v9 + 80);
  v26 = v23 + *(_DWORD *)(v13 + 80);
  if (v16)
    v27 = ((v26 + v25) & ~(unint64_t)*(_DWORD *)(v13 + 80)) + v24;
  else
    v27 = ((v26 + v25) & ~(unint64_t)*(_DWORD *)(v13 + 80)) + v24 + 1;
  v29 = *(_QWORD *)(v18 + 64);
  if (!v19)
    ++v29;
  v28 = (*(_DWORD *)(v9 + 80) | *(_DWORD *)(v8 + 80) | *(_DWORD *)(v13 + 80));
  v30 = v29
      + ((*(unsigned __int8 *)(v18 + 80)
        + 8
        + ((((v27 + ((v28 + 1) & ~v28) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
  v31 = a3 >= v22;
  v32 = a3 - v22;
  if (v32 != 0 && v31)
  {
    if (v30 > 3)
    {
      v7 = 1u;
      if (v22 < a2)
        goto LABEL_45;
      goto LABEL_39;
    }
    v33 = ((v32 + ~(-1 << (8 * v30))) >> (8 * v30)) + 1;
    if (HIWORD(v33))
    {
      v7 = 4u;
      if (v22 < a2)
      {
LABEL_45:
        v34 = ~v22 + a2;
        if (v30 < 4)
        {
          if ((_DWORD)v30)
          {
            v35 = v34 & ~(-1 << (8 * v30));
            bzero(a1, v30);
            if ((_DWORD)v30 == 3)
            {
              *(_WORD *)a1 = v35;
              a1[2] = BYTE2(v35);
            }
            else if ((_DWORD)v30 == 2)
            {
              *(_WORD *)a1 = v35;
            }
            else
            {
              *a1 = v35;
            }
          }
        }
        else
        {
          bzero(a1, v30);
          *(_DWORD *)a1 = v34;
        }
        __asm { BR              X10 }
      }
LABEL_39:
      __asm { BR              X23 }
    }
    if (v33 >= 0x100)
      v7 = 2;
    else
      v7 = v33 > 1;
  }
  if (v22 < a2)
    goto LABEL_45;
  goto LABEL_39;
}

uint64_t sub_23BF4EB74(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_23BF4EBC0 + 4 * byte_23C000DF8[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_23BF4EBF4 + 4 * byte_23C000DF3[v4]))();
}

uint64_t sub_23BF4EBF4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BF4EBFC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BF4EC04);
  return result;
}

uint64_t sub_23BF4EC10(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BF4EC18);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_23BF4EC1C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BF4EC24(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void sub_23BF4EC30()
{
  JUMPOUT(0x242615198);
}

void sub_23BF4EC40()
{
  JUMPOUT(0x242615198);
}

void sub_23BF4EC50()
{
  JUMPOUT(0x242615198);
}

BOOL static ActionCardViewStyle.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_23BF4EC78()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6465726F7272696DLL;
  if (*v0 != 1)
    v1 = 0x72657474616C70;
  if (*v0)
    return v1;
  else
    return 1819047270;
}

uint64_t sub_23BF4ECCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BF4FA6C(a1, a2);
  *a3 = result;
  return result;
}

void sub_23BF4ECF0(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_23BF4ECFC()
{
  sub_23BF4F0A0();
  return sub_23BFF9A30();
}

uint64_t sub_23BF4ED24()
{
  sub_23BF4F0A0();
  return sub_23BFF9A3C();
}

uint64_t sub_23BF4ED4C()
{
  sub_23BF4F16C();
  return sub_23BFF9A30();
}

uint64_t sub_23BF4ED74()
{
  sub_23BF4F16C();
  return sub_23BFF9A3C();
}

uint64_t sub_23BF4ED9C()
{
  sub_23BF4F128();
  return sub_23BFF9A30();
}

uint64_t sub_23BF4EDC4()
{
  sub_23BF4F128();
  return sub_23BFF9A3C();
}

uint64_t sub_23BF4EDEC()
{
  sub_23BF4F0E4();
  return sub_23BFF9A30();
}

uint64_t sub_23BF4EE14()
{
  sub_23BF4F0E4();
  return sub_23BFF9A3C();
}

uint64_t ActionCardViewStyle.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  char *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6038);
  v22 = *(_QWORD *)(v4 - 8);
  v23 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v21 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6040);
  v19 = *(_QWORD *)(v6 - 8);
  v20 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6048);
  v9 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6050);
  v24 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *v2;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BF4F0A0();
  sub_23BFF9A18();
  if (v15)
  {
    if (v15 == 1)
    {
      v26 = 1;
      sub_23BF4F128();
      sub_23BFF98EC();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v8, v20);
    }
    else
    {
      v27 = 2;
      sub_23BF4F0E4();
      v16 = v21;
      sub_23BFF98EC();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v16, v23);
    }
  }
  else
  {
    v25 = 0;
    sub_23BF4F16C();
    sub_23BFF98EC();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v14, v12);
}

unint64_t sub_23BF4F0A0()
{
  unint64_t result;

  result = qword_256AE6058;
  if (!qword_256AE6058)
  {
    result = MEMORY[0x242615198](&unk_23C00156C, &type metadata for ActionCardViewStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6058);
  }
  return result;
}

unint64_t sub_23BF4F0E4()
{
  unint64_t result;

  result = qword_256AE6060;
  if (!qword_256AE6060)
  {
    result = MEMORY[0x242615198](&unk_23C00151C, &type metadata for ActionCardViewStyle.PlatterCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6060);
  }
  return result;
}

unint64_t sub_23BF4F128()
{
  unint64_t result;

  result = qword_256AE6068;
  if (!qword_256AE6068)
  {
    result = MEMORY[0x242615198](&unk_23C0014CC, &type metadata for ActionCardViewStyle.MirroredCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6068);
  }
  return result;
}

unint64_t sub_23BF4F16C()
{
  unint64_t result;

  result = qword_256AE6070;
  if (!qword_256AE6070)
  {
    result = MEMORY[0x242615198](&unk_23C00147C, &type metadata for ActionCardViewStyle.FullCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6070);
  }
  return result;
}

uint64_t ActionCardViewStyle.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  char *v39;
  char *v40;
  _QWORD *v41;
  char v42;
  char v43;
  char v44;

  v38 = a2;
  v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6078);
  v34 = *(_QWORD *)(v37 - 8);
  MEMORY[0x24BDAC7A8](v37);
  v40 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6080);
  v35 = *(_QWORD *)(v4 - 8);
  v36 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v39 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6088);
  v6 = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6090);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BF4F0A0();
  v13 = v41;
  sub_23BFF9A0C();
  if (v13)
    goto LABEL_7;
  v31 = v6;
  v32 = v10;
  v14 = v39;
  v15 = v40;
  v41 = a1;
  v16 = v12;
  v17 = sub_23BFF98D4();
  v18 = v9;
  if (*(_QWORD *)(v17 + 16) != 1)
  {
    v23 = sub_23BFF9784();
    swift_allocError();
    v25 = v24;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3978);
    *v25 = &type metadata for ActionCardViewStyle;
    sub_23BFF9874();
    sub_23BFF9778();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v25, *MEMORY[0x24BEE26D0], v23);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v16, v9);
    a1 = v41;
LABEL_7:
    v26 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v26);
  }
  v19 = *(unsigned __int8 *)(v17 + 32);
  if (*(_BYTE *)(v17 + 32))
  {
    if (v19 == 1)
    {
      v43 = 1;
      sub_23BF4F128();
      v20 = v9;
      sub_23BFF9868();
      v21 = v38;
      v22 = v32;
      (*(void (**)(char *, uint64_t))(v35 + 8))(v14, v36);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v16, v20);
    }
    else
    {
      v44 = 2;
      sub_23BF4F0E4();
      v28 = v15;
      sub_23BFF9868();
      v21 = v38;
      v29 = v32;
      (*(void (**)(char *, uint64_t))(v34 + 8))(v28, v37);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v29 + 8))(v16, v18);
    }
  }
  else
  {
    v42 = 0;
    sub_23BF4F16C();
    sub_23BFF9868();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v33);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v16, v9);
    v21 = v38;
  }
  *v21 = v19;
  v26 = (uint64_t)v41;
  return __swift_destroy_boxed_opaque_existential_1(v26);
}

uint64_t sub_23BF4F5F4@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return ActionCardViewStyle.init(from:)(a1, a2);
}

uint64_t sub_23BF4F608(_QWORD *a1)
{
  return ActionCardViewStyle.encode(to:)(a1);
}

uint64_t ActionCardViewStyle.hash(into:)()
{
  return sub_23BFF99DC();
}

uint64_t ActionCardViewStyle.hashValue.getter()
{
  sub_23BFF99D0();
  sub_23BFF99DC();
  return sub_23BFF9A00();
}

unint64_t sub_23BF4F68C()
{
  unint64_t result;

  result = qword_256AE6098;
  if (!qword_256AE6098)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for ActionCardViewStyle, &type metadata for ActionCardViewStyle);
    atomic_store(result, (unint64_t *)&qword_256AE6098);
  }
  return result;
}

ValueMetadata *type metadata accessor for ActionCardViewStyle()
{
  return &type metadata for ActionCardViewStyle;
}

uint64_t _s15FitnessCanvasUI19ActionCardViewStyleOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23BF4F734 + 4 * byte_23C001195[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23BF4F768 + 4 * byte_23C001190[v4]))();
}

uint64_t sub_23BF4F768(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BF4F770(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BF4F778);
  return result;
}

uint64_t sub_23BF4F784(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BF4F78CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23BF4F790(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BF4F798(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ActionCardViewStyle.CodingKeys()
{
  return &type metadata for ActionCardViewStyle.CodingKeys;
}

ValueMetadata *type metadata accessor for ActionCardViewStyle.FullCodingKeys()
{
  return &type metadata for ActionCardViewStyle.FullCodingKeys;
}

ValueMetadata *type metadata accessor for ActionCardViewStyle.MirroredCodingKeys()
{
  return &type metadata for ActionCardViewStyle.MirroredCodingKeys;
}

ValueMetadata *type metadata accessor for ActionCardViewStyle.PlatterCodingKeys()
{
  return &type metadata for ActionCardViewStyle.PlatterCodingKeys;
}

unint64_t sub_23BF4F7E8()
{
  unint64_t result;

  result = qword_256AE60A0;
  if (!qword_256AE60A0)
  {
    result = MEMORY[0x242615198](&unk_23C001454, &type metadata for ActionCardViewStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE60A0);
  }
  return result;
}

unint64_t sub_23BF4F830()
{
  unint64_t result;

  result = qword_256AE60A8;
  if (!qword_256AE60A8)
  {
    result = MEMORY[0x242615198](&unk_23C001374, &type metadata for ActionCardViewStyle.FullCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE60A8);
  }
  return result;
}

unint64_t sub_23BF4F878()
{
  unint64_t result;

  result = qword_256AE60B0;
  if (!qword_256AE60B0)
  {
    result = MEMORY[0x242615198](&unk_23C00139C, &type metadata for ActionCardViewStyle.FullCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE60B0);
  }
  return result;
}

unint64_t sub_23BF4F8C0()
{
  unint64_t result;

  result = qword_256AE60B8;
  if (!qword_256AE60B8)
  {
    result = MEMORY[0x242615198](&unk_23C001324, &type metadata for ActionCardViewStyle.MirroredCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE60B8);
  }
  return result;
}

unint64_t sub_23BF4F908()
{
  unint64_t result;

  result = qword_256AE60C0;
  if (!qword_256AE60C0)
  {
    result = MEMORY[0x242615198](&unk_23C00134C, &type metadata for ActionCardViewStyle.MirroredCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE60C0);
  }
  return result;
}

unint64_t sub_23BF4F950()
{
  unint64_t result;

  result = qword_256AE60C8;
  if (!qword_256AE60C8)
  {
    result = MEMORY[0x242615198](&unk_23C0012D4, &type metadata for ActionCardViewStyle.PlatterCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE60C8);
  }
  return result;
}

unint64_t sub_23BF4F998()
{
  unint64_t result;

  result = qword_256AE60D0;
  if (!qword_256AE60D0)
  {
    result = MEMORY[0x242615198](&unk_23C0012FC, &type metadata for ActionCardViewStyle.PlatterCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE60D0);
  }
  return result;
}

unint64_t sub_23BF4F9E0()
{
  unint64_t result;

  result = qword_256AE60D8;
  if (!qword_256AE60D8)
  {
    result = MEMORY[0x242615198](&unk_23C0013C4, &type metadata for ActionCardViewStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE60D8);
  }
  return result;
}

unint64_t sub_23BF4FA28()
{
  unint64_t result;

  result = qword_256AE60E0;
  if (!qword_256AE60E0)
  {
    result = MEMORY[0x242615198](&unk_23C0013EC, &type metadata for ActionCardViewStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE60E0);
  }
  return result;
}

uint64_t sub_23BF4FA6C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1819047270 && a2 == 0xE400000000000000;
  if (v2 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6465726F7272696DLL && a2 == 0xE800000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x72657474616C70 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_23BFF9964();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t dispatch thunk of CanvasItemPlaceholderCacheProviding.cache<A, B, C, D, E, F>(for:representedBy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  return (*(uint64_t (**)(void))(a16 + 8))();
}

uint64_t sub_23BF4FBE0()
{
  sub_23BFF99D0();
  sub_23BFF99DC();
  sub_23BFF99DC();
  sub_23BFF99DC();
  sub_23BFF99DC();
  sub_23BFF99DC();
  sub_23BFF99DC();
  return sub_23BFF9A00();
}

uint64_t sub_23BF4FC64()
{
  sub_23BFF99DC();
  sub_23BFF99DC();
  sub_23BFF99DC();
  sub_23BFF99DC();
  sub_23BFF99DC();
  return sub_23BFF99DC();
}

uint64_t sub_23BF4FCD4()
{
  sub_23BFF99D0();
  sub_23BFF99DC();
  sub_23BFF99DC();
  sub_23BFF99DC();
  sub_23BFF99DC();
  sub_23BFF99DC();
  sub_23BFF99DC();
  return sub_23BFF9A00();
}

BOOL sub_23BF4FD70(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[3];
  _OWORD v8[3];

  v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  v3 = *a2;
  v4 = a2[1];
  v7[2] = a1[2];
  v8[0] = v3;
  v5 = a2[2];
  v8[1] = v4;
  v8[2] = v5;
  return sub_23BF51510((uint64_t *)v7, (uint64_t *)v8);
}

uint64_t sub_23BF4FDB4()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CanvasItemPlaceholderCacheProvider()
{
  return objc_opt_self();
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for CanvasItemPlaceholderCacheProvider.Identifier(uint64_t a1, int a2)
{
  int v3;

  if (!a2)
    return 0;
  if (a2 != 1 && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 2);
  if (*(_QWORD *)a1)
    v3 = -1;
  else
    v3 = 0;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for CanvasItemPlaceholderCacheProvider.Identifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 2;
    if (a3 >= 2)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 2)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_QWORD *)result = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for CanvasItemPlaceholderCacheProvider.Identifier()
{
  return &type metadata for CanvasItemPlaceholderCacheProvider.Identifier;
}

unint64_t sub_23BF4FEB0()
{
  unint64_t result;

  result = qword_256AE6188;
  if (!qword_256AE6188)
  {
    result = MEMORY[0x242615198](&unk_23C001620, &type metadata for CanvasItemPlaceholderCacheProvider.Identifier);
    atomic_store(result, (unint64_t *)&qword_256AE6188);
  }
  return result;
}

void sub_23BF4FEF4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, __int128 a10, __int128 a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  _QWORD v16[2];
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[7];

  v24 = a7;
  v25 = a8;
  v23 = a9;
  v26 = v16;
  v22 = a10;
  v21 = a11;
  v33[0] = a2;
  v33[1] = a3;
  v33[2] = a4;
  v33[3] = a5;
  v33[4] = a1;
  v33[5] = a6;
  v14 = *(_QWORD *)(v13 + 16);
  v27 = a1;
  v28 = a2;
  v29 = a3;
  v30 = a4;
  v31 = a5;
  v32 = a6;
  swift_getExtendedExistentialTypeMetadata();
  v15 = (uint64_t *)(v14 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v14 + 16));
  os_unfair_lock_lock((os_unfair_lock_t)(v14 + ((*(unsigned int *)(*(_QWORD *)v14 + 48) + 3) & 0x1FFFFFFFCLL)));
  v19 = a12;
  v20 = a13;
  v17 = v22;
  v18 = v21;
  v16[0] = v24;
  v16[1] = v25;
  sub_23BF50028(v15, v33);
}

void sub_23BF50028(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  char v4;
  _BYTE v5[40];

  v2 = *a1;
  if (*(_QWORD *)(*a1 + 16))
  {
    v3 = sub_23BF503EC(a2);
    if ((v4 & 1) != 0)
    {
      sub_23BF50480(*(_QWORD *)(v2 + 56) + 32 * v3, (uint64_t)v5);
      type metadata accessor for CanvasItemPlaceholderCache();
    }
  }
  type metadata accessor for CanvasItemPlaceholderCache();
}

void sub_23BF50188()
{
  sub_23BFDA42C();
}

void sub_23BF50198(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  _QWORD *v20;

  a20 = a1;
  swift_retain();
  sub_23BF501F8((uint64_t)&a20, v20);
  JUMPOUT(0x23BF501B8);
}

uint64_t sub_23BF501F8(uint64_t a1, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v7;
  char v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[2];

  v3 = v2;
  if (*(_QWORD *)(a1 + 24))
  {
    sub_23BF5131C((_OWORD *)a1, v14);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v12 = *v2;
    *v2 = 0x8000000000000000;
    sub_23BF50E9C(v14, a2, isUniquelyReferenced_nonNull_native);
    *v2 = v12;
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_23BF504BC(a1);
    v7 = sub_23BF503EC(a2);
    if ((v8 & 1) != 0)
    {
      v9 = v7;
      v10 = swift_isUniquelyReferenced_nonNull_native();
      v11 = *v2;
      v13 = *v3;
      *v3 = 0x8000000000000000;
      if ((v10 & 1) == 0)
      {
        sub_23BF51130();
        v11 = v13;
      }
      sub_23BF5131C((_OWORD *)(*(_QWORD *)(v11 + 56) + 32 * v9), v14);
      sub_23BF50C58(v9, v11);
      *v3 = v11;
      swift_bridgeObjectRelease();
    }
    else
    {
      memset(v14, 0, sizeof(v14));
    }
    return sub_23BF504BC((uint64_t)v14);
  }
}

void sub_23BF502F8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, __int128 a10, __int128 a11, uint64_t a12, uint64_t a13)
{
  sub_23BF4FEF4(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

unint64_t sub_23BF50330(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23BFF99D0();
  sub_23BFF93F4();
  v4 = sub_23BFF9A00();
  return sub_23BF504FC(a1, a2, v4);
}

unint64_t sub_23BF50394(unsigned __int8 a1)
{
  uint64_t v2;

  sub_23BFF99D0();
  sub_23BFF99DC();
  v2 = sub_23BFF9A00();
  return sub_23BF505DC(a1, v2);
}

unint64_t sub_23BF503EC(_QWORD *a1)
{
  uint64_t v2;

  sub_23BFF99D0();
  sub_23BFF99DC();
  sub_23BFF99DC();
  sub_23BFF99DC();
  sub_23BFF99DC();
  sub_23BFF99DC();
  sub_23BFF99DC();
  v2 = sub_23BFF9A00();
  return sub_23BF5067C(a1, v2);
}

uint64_t sub_23BF50480(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_23BF504BC(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6190);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_23BF504FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_23BFF9964() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_23BFF9964() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_23BF505DC(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_23BF5067C(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v6 = ~v4;
    v7 = *(_QWORD *)(v2 + 48);
    do
    {
      v8 = (_QWORD *)(v7 + 48 * result);
      if (*v8 == *a1
        && *(_QWORD *)(v7 + 48 * result + 8) == a1[1]
        && v8[2] == a1[2]
        && v8[3] == a1[3]
        && v8[4] == a1[4]
        && v8[5] == a1[5])
      {
        break;
      }
      result = (result + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

uint64_t sub_23BF5074C(uint64_t a1, char a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  __int128 *v19;
  _OWORD *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _OWORD v25[2];
  _OWORD v26[3];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6198);
  v6 = (_QWORD *)sub_23BFF9844();
  if (*(_QWORD *)(v5 + 16))
  {
    v7 = 1 << *(_BYTE *)(v5 + 32);
    v8 = (_QWORD *)(v5 + 64);
    v9 = -1;
    if (v7 < 64)
      v9 = ~(-1 << v7);
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v11 = (unint64_t)(v7 + 63) >> 6;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v14 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v15 = v14 | (v13 << 6);
      }
      else
      {
        v16 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
          __break(1u);
LABEL_30:
          __break(1u);
          return result;
        }
        if (v16 >= v11)
          goto LABEL_23;
        v17 = v8[v16];
        ++v13;
        if (!v17)
        {
          v13 = v16 + 1;
          if (v16 + 1 >= v11)
            goto LABEL_23;
          v17 = v8[v13];
          if (!v17)
          {
            v18 = v16 + 2;
            if (v18 >= v11)
            {
LABEL_23:
              swift_release();
              if ((a2 & 1) != 0)
              {
                v21 = 1 << *(_BYTE *)(v5 + 32);
                if (v21 >= 64)
                  bzero((void *)(v5 + 64), ((unint64_t)(v21 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v21;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v17 = v8[v18];
            if (!v17)
            {
              while (1)
              {
                v13 = v18 + 1;
                if (__OFADD__(v18, 1))
                  goto LABEL_30;
                if (v13 >= v11)
                  goto LABEL_23;
                v17 = v8[v13];
                ++v18;
                if (v17)
                  goto LABEL_20;
              }
            }
            v13 = v18;
          }
        }
LABEL_20:
        v10 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v13 << 6);
      }
      v19 = (__int128 *)(*(_QWORD *)(v5 + 48) + 48 * v15);
      v20 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v15);
      v23 = v19[1];
      v24 = v19[2];
      v22 = *v19;
      if ((a2 & 1) != 0)
        sub_23BF5131C(v20, v25);
      else
        sub_23BF50480((uint64_t)v20, (uint64_t)v25);
      v26[0] = v22;
      v26[1] = v23;
      v26[2] = v24;
      result = (uint64_t)sub_23BF50FB4(v26, v25, v6);
    }
  }
  result = swift_release();
  *v3 = v6;
  return result;
}

uint64_t sub_23BF5095C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  _QWORD *v34;
  _OWORD v35[2];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE61A0);
  v6 = sub_23BFF9844();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v34 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33)
          goto LABEL_34;
        v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v33)
            goto LABEL_34;
          v19 = v34[v13];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              v3 = v2;
              if ((a2 & 1) != 0)
              {
                v32 = 1 << *(_BYTE *)(v5 + 32);
                if (v32 >= 64)
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v34 = -1 << v32;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                v13 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_41;
                if (v13 >= v33)
                  goto LABEL_34;
                v19 = v34[v13];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v13 = v20;
          }
        }
LABEL_21:
        v10 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
      v23 = *v21;
      v22 = v21[1];
      v24 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v17);
      if ((a2 & 1) != 0)
      {
        sub_23BF5131C(v24, v35);
      }
      else
      {
        sub_23BF50480((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      sub_23BFF99D0();
      sub_23BFF93F4();
      result = sub_23BFF9A00();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v14);
      *v15 = v23;
      v15[1] = v22;
      result = (uint64_t)sub_23BF5131C(v35, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v14));
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

unint64_t sub_23BF50C58(unint64_t result, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  unint64_t v9;
  uint64_t v10;
  __int128 *v11;
  __int128 *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;

  v2 = a2;
  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_23BFF96F4();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v24 = v2;
      v25 = v4;
      v26 = (result + 1) & v7;
      do
      {
        sub_23BFF99D0();
        sub_23BFF99DC();
        sub_23BFF99DC();
        sub_23BFF99DC();
        sub_23BFF99DC();
        sub_23BFF99DC();
        sub_23BFF99DC();
        result = sub_23BFF9A00();
        v9 = result & v7;
        if (v3 >= (uint64_t)v26)
        {
          if (v9 < v26)
          {
            v2 = v24;
            v4 = v25;
          }
          else
          {
            v2 = v24;
            v4 = v25;
            if (v3 >= (uint64_t)v9)
              goto LABEL_12;
          }
        }
        else
        {
          v2 = v24;
          v4 = v25;
          if (v9 >= v26 || v3 >= (uint64_t)v9)
          {
LABEL_12:
            v10 = *(_QWORD *)(v2 + 48);
            v11 = (__int128 *)(v10 + 48 * v3);
            v12 = (__int128 *)(v10 + 48 * v6);
            if (v3 != v6 || v11 >= v12 + 3)
            {
              v13 = *v12;
              v14 = v12[2];
              v11[1] = v12[1];
              v11[2] = v14;
              *v11 = v13;
            }
            v15 = *(_QWORD *)(v2 + 56);
            v16 = (_OWORD *)(v15 + 32 * v3);
            v17 = (_OWORD *)(v15 + 32 * v6);
            if (v3 != v6 || (v3 = v6, v16 >= v17 + 2))
            {
              v8 = v17[1];
              *v16 = *v17;
              v16[1] = v8;
              v3 = v6;
            }
          }
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(v2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v2 + 16) = v23;
    ++*(_DWORD *)(v2 + 36);
  }
  return result;
}

_OWORD *sub_23BF50E9C(_OWORD *a1, _QWORD *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  _OWORD *v17;
  _OWORD *result;
  unint64_t v19;
  char v20;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_23BF503EC(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = (_OWORD *)(v16[7] + 32 * v10);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
        return sub_23BF5131C(a1, v17);
      }
      return sub_23BF510B8(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_23BF51130();
      goto LABEL_7;
    }
    sub_23BF5074C(v13, a3 & 1);
    v19 = sub_23BF503EC(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return sub_23BF510B8(v10, a2, a1, v16);
    }
  }
  result = (_OWORD *)sub_23BFF997C();
  __break(1u);
  return result;
}

_OWORD *sub_23BF50FB4(_OWORD *a1, _OWORD *a2, _QWORD *a3)
{
  unint64_t v6;
  _OWORD *v7;
  __int128 v8;
  _OWORD *result;

  sub_23BFF99D0();
  sub_23BFF99DC();
  sub_23BFF99DC();
  sub_23BFF99DC();
  sub_23BFF99DC();
  sub_23BFF99DC();
  sub_23BFF99DC();
  sub_23BFF9A00();
  v6 = sub_23BFF9700();
  *(_QWORD *)((char *)a3 + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v6;
  v7 = (_OWORD *)(a3[6] + 48 * v6);
  v8 = a1[1];
  *v7 = *a1;
  v7[1] = v8;
  v7[2] = a1[2];
  result = sub_23BF5131C(a2, (_OWORD *)(a3[7] + 32 * v6));
  ++a3[2];
  return result;
}

_OWORD *sub_23BF510B8(unint64_t a1, _OWORD *a2, _OWORD *a3, _QWORD *a4)
{
  _OWORD *v5;
  __int128 v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v5 = (_OWORD *)(a4[6] + 48 * a1);
  v6 = a2[1];
  *v5 = *a2;
  v5[1] = v6;
  v5[2] = a2[2];
  result = sub_23BF5131C(a3, (_OWORD *)(a4[7] + 32 * a1));
  v8 = a4[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a4[2] = v10;
  return result;
}

void *sub_23BF51130()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 *v17;
  uint64_t v18;
  _OWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[2];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6198);
  v2 = *v0;
  v3 = sub_23BFF9838();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 48 * v15;
    v17 = (__int128 *)(*(_QWORD *)(v2 + 48) + 48 * v15);
    v23 = *v17;
    v24 = v17[1];
    v25 = v17[2];
    v18 = 32 * v15;
    sub_23BF50480(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    v19 = (_OWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = v23;
    v19[1] = v24;
    v19[2] = v25;
    result = sub_23BF5131C(v26, (_OWORD *)(*(_QWORD *)(v4 + 56) + v18));
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

_OWORD *sub_23BF5131C(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void *sub_23BF5132C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE61A0);
  v2 = *v0;
  v3 = sub_23BFF9838();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    sub_23BF50480(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_23BF5131C(v26, (_OWORD *)(*(_QWORD *)(v4 + 56) + v20));
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

BOOL sub_23BF51510(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  v5 = a2[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = a2[2];
  v9 = a2[3];
  v10 = a1[4];
  v11 = a1[5];
  v12 = a2[4];
  v13 = a2[5];
  return v2 == v4 && v3 == v5 && v6 == v8 && v7 == v9 && v10 == v12 && v11 == v13;
}

__n128 sub_23BF51548@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X5>, uint64_t *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, __n128 a11, unint64_t a12, unint64_t a13, uint64_t a14, uint64_t a15)
{
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  __n128 *v28;
  __n128 result;

  v20 = *a6;
  v21 = *a7;
  v22 = a7[1];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a14 - 8) + 32))(a9, a1, a14);
  v24 = (int *)type metadata accessor for DynamicBrickView(0, a14, a15, v23);
  v25 = (_QWORD *)(a9 + v24[9]);
  *v25 = a2;
  v25[1] = a3;
  v25[2] = a4;
  v25[3] = a5;
  *(_BYTE *)(a9 + v24[10]) = v20;
  v26 = (_QWORD *)(a9 + v24[11]);
  *v26 = v21;
  v26[1] = v22;
  v27 = (_QWORD *)(a9 + v24[12]);
  *v27 = a8;
  v27[1] = a10;
  v28 = (__n128 *)(a9 + v24[13]);
  result = a11;
  *v28 = a11;
  v28[1].n128_u64[0] = a12;
  v28[1].n128_u64[1] = a13;
  return result;
}

BOOL static DynamicBrickViewLayout.== infix(_:_:)(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

double DynamicBrickViewLayout.horizontalMargin.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

double DynamicBrickViewLayout.verticalMargin.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

FitnessCanvasUI::DynamicBrickViewLayout __swiftcall DynamicBrickViewLayout.init(horizontalMargin:verticalMargin:)(Swift::Double horizontalMargin, Swift::Double verticalMargin)
{
  Swift::Double *v2;
  FitnessCanvasUI::DynamicBrickViewLayout result;

  *v2 = horizontalMargin;
  v2[1] = verticalMargin;
  result.verticalMargin = verticalMargin;
  result.horizontalMargin = horizontalMargin;
  return result;
}

uint64_t sub_23BF51684()
{
  _BYTE *v0;

  if (*v0)
    return 0x6C61636974726576;
  else
    return 0xD000000000000010;
}

uint64_t sub_23BF516D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BF55238(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BF516F4()
{
  sub_23BF51860();
  return sub_23BFF9A30();
}

uint64_t sub_23BF5171C()
{
  sub_23BF51860();
  return sub_23BFF9A3C();
}

uint64_t DynamicBrickViewLayout.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE61A8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BF51860();
  sub_23BFF9A18();
  v8[15] = 0;
  sub_23BFF9928();
  if (!v1)
  {
    v8[14] = 1;
    sub_23BFF9928();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_23BF51860()
{
  unint64_t result;

  result = qword_256AE61B0;
  if (!qword_256AE61B0)
  {
    result = MEMORY[0x242615198](&unk_23C001944, &type metadata for DynamicBrickViewLayout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE61B0);
  }
  return result;
}

uint64_t DynamicBrickViewLayout.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;
  char v16;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE61B8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BF51860();
  sub_23BFF9A0C();
  if (!v2)
  {
    v16 = 0;
    sub_23BFF98B0();
    v10 = v9;
    v15 = 1;
    sub_23BFF98B0();
    v12 = v11;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10;
    a2[1] = v12;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_23BF519F4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return DynamicBrickViewLayout.init(from:)(a1, a2);
}

uint64_t sub_23BF51A08(_QWORD *a1)
{
  return DynamicBrickViewLayout.encode(to:)(a1);
}

uint64_t DynamicBrickViewLayout.hash(into:)()
{
  sub_23BFF99F4();
  return sub_23BFF99F4();
}

uint64_t DynamicBrickViewLayout.hashValue.getter()
{
  sub_23BFF99D0();
  sub_23BFF99F4();
  sub_23BFF99F4();
  return sub_23BFF9A00();
}

uint64_t sub_23BF51AC8()
{
  sub_23BFF99D0();
  sub_23BFF99F4();
  sub_23BFF99F4();
  return sub_23BFF9A00();
}

BOOL sub_23BF51B24(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

uint64_t DynamicBrickView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD v65[2];
  _QWORD v66[3];

  v57 = a2;
  v4 = sub_23BFF8680();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x24BDED868];
  v6 = *(_QWORD *)(v4 - 8);
  v7 = v4;
  v46 = v4;
  v56 = v6;
  MEMORY[0x24BDAC7A8](v4);
  v9 = *(_QWORD *)(a1 - 8);
  v54 = *(_QWORD *)(v9 + 64);
  v55 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = *(_QWORD *)(a1 + 16);
  v13 = a1;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE61C0);
  swift_getTupleTypeMetadata2();
  v14 = sub_23BFF9220();
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v14);
  v15 = sub_23BFF859C();
  MEMORY[0x242615198](MEMORY[0x24BDEC6F8], v15);
  v16 = sub_23BFF90C4();
  v17 = sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3C28);
  v18 = sub_23BFF862C();
  v66[0] = MEMORY[0x242615198](MEMORY[0x24BDF4750], v16);
  v66[1] = MEMORY[0x24BDEEC40];
  v19 = MEMORY[0x24BDED308];
  v20 = MEMORY[0x242615198](MEMORY[0x24BDED308], v17, v66);
  v21 = sub_23BEA1F94(qword_256AE3C30, &qword_256AE3C28, MEMORY[0x24BDEB950]);
  v65[0] = v20;
  v65[1] = v21;
  v49 = v18;
  v50 = MEMORY[0x242615198](v19, v18, v65);
  v22 = sub_23BFF9040();
  v52 = *(_QWORD *)(v22 - 8);
  v23 = MEMORY[0x24BDAC7A8](v22);
  v48 = (char *)&v44 - v24;
  v25 = MEMORY[0x242615198](MEMORY[0x24BDF43B0], v22, v23);
  v45 = v25;
  v44 = sub_23BEA1BB8(&qword_256AE3558, v5, MEMORY[0x24BDED858]);
  v61 = v22;
  v62 = v7;
  v63 = v25;
  v64 = v44;
  v26 = MEMORY[0x24261512C](0, &v61, MEMORY[0x24BDF22B8], 0);
  v51 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v28 = (char *)&v44 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = MEMORY[0x24BDAC7A8](v29);
  v47 = (uint64_t)&v44 - v31;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16))(v12, v2, v13, v30);
  v32 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v33 = swift_allocObject();
  v34 = *(_QWORD *)(v13 + 24);
  v35 = v53;
  *(_QWORD *)(v33 + 16) = v53;
  *(_QWORD *)(v33 + 24) = v34;
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v33 + v32, v12, v13);
  v58 = v35;
  v59 = v34;
  v60 = v2;
  v36 = v48;
  sub_23BFF9034();
  v37 = v55;
  sub_23BFF8674();
  v38 = v46;
  v39 = v45;
  v40 = v44;
  sub_23BFF8CF8();
  (*(void (**)(char *, uint64_t))(v56 + 8))(v37, v38);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v36, v22);
  v61 = v22;
  v62 = v38;
  v63 = v39;
  v64 = v40;
  swift_getOpaqueTypeConformance2();
  v41 = v47;
  sub_23BEA72EC((uint64_t)v28, v26, v47);
  v42 = *(void (**)(char *, uint64_t))(v51 + 8);
  v42(v28, v26);
  sub_23BEA5C0C(v41, v26, v57);
  return ((uint64_t (*)(uint64_t, uint64_t))v42)(v41, v26);
}

uint64_t type metadata accessor for DynamicBrickView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DynamicBrickView);
}

uint64_t sub_23BF51FD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = type metadata accessor for DynamicBrickView(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80);
  return (*(uint64_t (**)(void))(v4 + *(int *)(v5 + 48) + ((v6 + 32) & ~v6)))();
}

uint64_t sub_23BF52018@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[2];
  _QWORD v40[2];
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  char v44;
  char v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  char v51;
  char v52;

  v33 = a3;
  v32 = a1;
  v35 = a4;
  v5 = sub_23BFF86BC();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (_OWORD *)((char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE61C0);
  swift_getTupleTypeMetadata2();
  v8 = sub_23BFF9220();
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v8);
  v9 = sub_23BFF859C();
  MEMORY[0x242615198](MEMORY[0x24BDEC6F8], v9);
  v10 = sub_23BFF90C4();
  v11 = sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3C28);
  v12 = sub_23BFF862C();
  v34 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v32 - v16;
  v36 = a2;
  v37 = v33;
  v38 = v32;
  sub_23BFF91C0();
  sub_23BFF90B8();
  v46 = v41;
  v47 = v42;
  v18 = MEMORY[0x242615198](MEMORY[0x24BDF4750], v10);
  sub_23BFF8CE0();
  swift_release();
  v41 = v48;
  v42 = v49;
  v43 = v50;
  v44 = v51;
  v45 = v52;
  v19 = (char *)v7 + *(int *)(v5 + 20);
  v20 = *MEMORY[0x24BDEEB68];
  v21 = sub_23BFF8854();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v19, v20, v21);
  __asm { FMOV            V0.2D, #8.0 }
  *v7 = _Q0;
  v40[0] = v18;
  v40[1] = MEMORY[0x24BDEEC40];
  v27 = MEMORY[0x24BDED308];
  v28 = MEMORY[0x242615198](MEMORY[0x24BDED308], v11, v40);
  sub_23BEA1BB8(&qword_256AE3CB8, (uint64_t (*)(uint64_t))MEMORY[0x24BDED998], MEMORY[0x24BDED990]);
  sub_23BFF8F44();
  sub_23BEC4004((uint64_t)v7);
  swift_release();
  v29 = sub_23BEA1F94(qword_256AE3C30, &qword_256AE3C28, MEMORY[0x24BDEB950]);
  v39[0] = v28;
  v39[1] = v29;
  MEMORY[0x242615198](v27, v12, v39);
  sub_23BEA72EC((uint64_t)v14, v12, (uint64_t)v17);
  v30 = *(void (**)(char *, uint64_t))(v34 + 8);
  v30(v14, v12);
  sub_23BEA5C0C((uint64_t)v17, v12, v35);
  return ((uint64_t (*)(char *, uint64_t))v30)(v17, v12);
}

uint64_t sub_23BF523AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_23BF52018(v1[4], v1[2], v1[3], a1);
}

unint64_t sub_23BF523BC()
{
  unint64_t result;

  result = qword_256AE61C8[0];
  if (!qword_256AE61C8[0])
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for DynamicBrickViewLayout, &type metadata for DynamicBrickViewLayout);
    atomic_store(result, qword_256AE61C8);
  }
  return result;
}

uint64_t sub_23BF52400()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23BF52434@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v9 = type metadata accessor for DynamicBrickView(0, a2, a3, a4);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v20 - v12;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16))((char *)&v20 - v12, a1, v9, v11);
  v14 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = a2;
  *(_QWORD *)(v15 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v15 + v14, v13, v9);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE61C0);
  swift_getTupleTypeMetadata2();
  v16 = sub_23BFF9220();
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v16);
  v20 = sub_23BFF8590();
  v21 = v17;
  v18 = sub_23BFF859C();
  MEMORY[0x242615198](MEMORY[0x24BDEC6F8], v18);
  sub_23BEA72EC((uint64_t)&v20, v18, (uint64_t)v22);
  swift_release();
  v20 = v22[0];
  v21 = v22[1];
  sub_23BEA5C0C((uint64_t)&v20, v18, a5);
  return swift_release();
}

uint64_t sub_23BF525DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  _QWORD v19[2];
  _QWORD v20[2];
  _OWORD v21[25];
  uint64_t v22[2];
  _BYTE v23[328];
  _BYTE v24[344];
  char v25;
  _BYTE v26[408];

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v19 - v12;
  sub_23BEA72EC(v14, v15, (uint64_t)v19 - v12);
  v16 = sub_23BFF8848();
  sub_23BF527D4(a2, a1, a3, a4);
  v24[336] = 0;
  memcpy(&v24[7], v23, 0x142uLL);
  LOBYTE(a2) = sub_23BFF8B60();
  v25 = 0;
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v13, a3);
  v22[0] = (uint64_t)v10;
  v21[0] = (unint64_t)v16;
  LOBYTE(v21[1]) = 0;
  memcpy((char *)&v21[1] + 1, v24, 0x149uLL);
  LOBYTE(v21[22]) = a2;
  *((_QWORD *)&v21[22] + 1) = 0x4028000000000000;
  v21[23] = xmmword_23C0016A0;
  *(_QWORD *)&v21[24] = 0x4030000000000000;
  BYTE8(v21[24]) = v25;
  v22[1] = (uint64_t)v21;
  sub_23BF5580C((uint64_t)v23, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_23BF55494, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_23BF5574C);
  v20[0] = a3;
  v20[1] = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE61C0);
  v19[0] = a4;
  v19[1] = sub_23BF55788();
  sub_23BF93EF0(v22, 2uLL, (uint64_t)v20);
  sub_23BF5580C((uint64_t)v23, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_23BF55A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_23BF55D20);
  v17 = *(void (**)(char *, uint64_t))(v8 + 8);
  v17(v13, a3);
  memcpy(v26, v21, 0x189uLL);
  sub_23BF55D5C((uint64_t)v26);
  return ((uint64_t (*)(char *, uint64_t))v17)(v10, a3);
}

void sub_23BF527D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;

  v4 = (char *)sub_23BF5284C
     + 4
     * word_23C0016B0[*(unsigned __int8 *)(a1
                                         + *(int *)(type metadata accessor for DynamicBrickView(0, a3, a4, a4) + 40))];
  __asm { BR              X10 }
}

void *sub_23BF5284C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  _BYTE v21[512];
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _QWORD v35[2];
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  _BYTE v41[344];
  _BYTE v42[336];
  _OWORD v43[13];
  _BYTE v44[448];

  v7 = v0;
  v8 = sub_23BFF889C();
  sub_23BF53318(v3, v2, v1, (uint64_t)v43);
  v9 = v43[5];
  *(_OWORD *)(v5 + 71) = v43[4];
  *(_OWORD *)(v5 + 87) = v9;
  *(_OWORD *)(v5 + 103) = v43[6];
  v34 = *(_OWORD *)(v6 + 105);
  v10 = v43[1];
  *(_OWORD *)(v5 + 7) = v43[0];
  *(_OWORD *)(v5 + 23) = v10;
  v11 = v43[3];
  *(_OWORD *)(v5 + 39) = v43[2];
  v41[328] = 1;
  *(_OWORD *)(v5 + 55) = v11;
  sub_23BFF84DC();
  sub_23BFF91C0();
  sub_23BFF84D0();
  v12 = v32;
  *(_OWORD *)(v4 + 81) = v31;
  *(_OWORD *)(v4 + 97) = v12;
  v13 = v34;
  *(_OWORD *)(v4 + 113) = v33;
  *(_OWORD *)(v4 + 129) = v13;
  v14 = v28;
  *(_OWORD *)(v4 + 17) = v27;
  *(_OWORD *)(v4 + 33) = v14;
  v15 = v30;
  *(_OWORD *)(v4 + 49) = v29;
  v16 = v22;
  v17 = v23;
  v18 = v24;
  v19 = v25;
  v21[328] = v23;
  v41[336] = v25;
  v35[0] = v8;
  v35[1] = 0;
  v36 = 1;
  *(_OWORD *)(v4 + 65) = v15;
  v37 = v16;
  v38 = v17;
  v39 = v18;
  v40 = v19;
  *(_OWORD *)(v4 + 184) = v26;
  sub_23BF562E0((uint64_t)v35);
  sub_23BEC42E0((uint64_t)v35, (uint64_t)v44, &qword_256AE6330);
  sub_23BF562E8((uint64_t *)v43);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE62F0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6310);
  sub_23BF55F80();
  sub_23BF56004();
  sub_23BFF895C();
  memcpy(v42, v21, 0x141uLL);
  sub_23BF56258((uint64_t)v42);
  sub_23BEC42E0((uint64_t)v42, (uint64_t)v44, &qword_256AE62C8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE62D0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE62D8);
  sub_23BF56088(&qword_256AE62E0, &qword_256AE62D0, (uint64_t (*)(void))sub_23BF55F80, (uint64_t (*)(void))sub_23BF56004);
  sub_23BF56088(&qword_256AE6328, &qword_256AE62D8, (uint64_t (*)(void))sub_23BF55E6C, (uint64_t (*)(void))sub_23BF55EF0);
  sub_23BFF895C();
  sub_23BF56334((uint64_t *)v43);
  memcpy(v44, v41, 0x142uLL);
  return memcpy(v7, v44, 0x142uLL);
}

uint64_t sub_23BF53318@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  _QWORD v22[6];
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  char v30;

  v8 = sub_23BFF8848();
  sub_23BF54298(a1, a2, a3, v9, (uint64_t)v22);
  v10 = v22[0];
  v11 = v22[1];
  v12 = v22[2];
  v13 = v22[3];
  v15 = v22[4];
  v14 = v22[5];
  v16 = v23;
  v17 = v24;
  v18 = v25;
  v19 = v26;
  v20 = v27;
  LOBYTE(v22[0]) = 0;
  v30 = 0;
  v29 = v23;
  v28 = v27;
  *(_QWORD *)a4 = 0;
  *(_BYTE *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = v8;
  *(_QWORD *)(a4 + 24) = 0;
  *(_BYTE *)(a4 + 32) = 0;
  *(_QWORD *)(a4 + 40) = v10;
  *(_QWORD *)(a4 + 48) = v11;
  *(_QWORD *)(a4 + 56) = v12;
  *(_QWORD *)(a4 + 64) = v13;
  *(_QWORD *)(a4 + 72) = v15;
  *(_QWORD *)(a4 + 80) = v14;
  *(_BYTE *)(a4 + 88) = v16;
  *(_QWORD *)(a4 + 96) = v17;
  *(_BYTE *)(a4 + 104) = v18;
  *(_QWORD *)(a4 + 112) = v19;
  *(_BYTE *)(a4 + 120) = v20;
  sub_23BEA1DC0(v10, v11, v12, v13);
  swift_retain();
  swift_retain();
  sub_23BEBF0A4(v10, v11, v12, v13);
  swift_release();
  return swift_release();
}

double sub_23BF53420@<D0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  double result;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t KeyPath;
  uint64_t v66;
  char v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  _BYTE v77[32];
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  _BYTE v83[32];
  __int128 v84;
  char v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  _BYTE v94[32];
  __int128 v95;
  char v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int16 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  _BYTE v117[32];
  __int128 v118;
  char v119;
  __int128 v120;
  _BYTE v121[32];
  __int128 v122;
  _BYTE v123[32];
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int16 v129;

  v8 = type metadata accessor for DynamicBrickView(0, a2, a3, a3);
  v9 = v8;
  v10 = (uint64_t *)(a1 + *(int *)(v8 + 52));
  v12 = *v10;
  v11 = v10[1];
  v13 = v10[2];
  v75 = v10[3];
  if (v75)
  {
    v14 = v10[2] & 1;
    v15 = (uint64_t *)(a1 + *(int *)(v8 + 36));
    if (v15[3])
    {
      v68 = v14 != 0;
      v71 = a1;
      v73 = v13 & 1;
      v17 = v15[1];
      v16 = v15[2];
      v60 = v12;
      v61 = v17;
      v18 = *v15;
      v66 = *v15;
      v59 = v11;
      v19 = v12;
      v20 = v12;
      v21 = v11;
      v22 = v13;
      v23 = v15[3];
      sub_23BEA1DC0(v20, v11, v22, v75);
      sub_23BEA1DC0(v18, v17, v16, v23);
      v57 = sub_23BFF889C();
      sub_23BF53F04(v19, v21, v68, v75, v71, a2, a3, (uint64_t)&v120);
      v24 = v120;
      LOBYTE(v17) = v121[0];
      v76 = (unint64_t)v57;
      v77[0] = 0;
      *(_OWORD *)&v77[8] = v120;
      v77[24] = v121[0];
      v78 = *(_OWORD *)&v121[8];
      *(_QWORD *)&v79 = *(_QWORD *)&v121[24];
      BYTE8(v79) = v122;
      *(_QWORD *)&v80 = *((_QWORD *)&v122 + 1);
      BYTE8(v80) = v123[0];
      v81 = *(_OWORD *)&v123[8];
      *(_QWORD *)&v82 = v66;
      *((_QWORD *)&v82 + 1) = v61;
      v83[0] = v16 & 1;
      *(_QWORD *)&v83[8] = v23;
      *(_QWORD *)&v83[16] = swift_getKeyPath();
      *(_QWORD *)&v83[24] = 2;
      LOBYTE(v84) = 0;
      *((_QWORD *)&v84 + 1) = swift_getKeyPath();
      v85 = 1;
      v92 = v81;
      v93 = v82;
      v90 = v79;
      v91 = v80;
      v96 = 1;
      *(_OWORD *)&v94[16] = *(_OWORD *)&v83[16];
      v95 = v84;
      *(_OWORD *)v94 = *(_OWORD *)v83;
      v88 = *(_OWORD *)&v77[16];
      v89 = v78;
      v86 = (unint64_t)v57;
      v87 = *(_OWORD *)v77;
      v63 = *(_QWORD *)&v77[8];
      v62 = v17;
      sub_23BEA0EAC(v24, *((uint64_t *)&v24 + 1), v17);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      sub_23BEA0EAC(v66, v61, v16 & 1);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      sub_23BEA0EAC(v66, v61, v16 & 1);
      swift_bridgeObjectRetain();
      sub_23BEA0EAC(v24, *((uint64_t *)&v24 + 1), v17);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      sub_23BEA0EAC(v66, v61, v16 & 1);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      sub_23BEA0F64(v66, v61, v16 & 1);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      sub_23BEA0F64(*(uint64_t *)&v77[8], *((uint64_t *)&v24 + 1), v17);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      *(_OWORD *)v117 = *(_OWORD *)v83;
      *(_OWORD *)&v117[16] = *(_OWORD *)&v83[16];
      v118 = v84;
      v119 = 1;
      v113 = v79;
      v114 = v80;
      v115 = v81;
      v116 = v82;
      v109 = (unint64_t)v57;
      v110 = *(_OWORD *)v77;
      v111 = *(_OWORD *)&v77[16];
      v112 = v78;
      sub_23BF56458((uint64_t)&v109);
      sub_23BEC42E0((uint64_t)&v109, (uint64_t)&v120, &qword_256AE6338);
      sub_23BF56460((uint64_t)&v86);
      __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6340);
      __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6348);
      v25 = MEMORY[0x24BDF5428];
      sub_23BEA1F94(&qword_256AE6350, &qword_256AE6340, MEMORY[0x24BDF5428]);
      sub_23BEA1F94(&qword_256AE6358, &qword_256AE6348, v25);
      sub_23BFF895C();
      sub_23BEA0F64(v60, v59, v73);
      swift_bridgeObjectRelease();
      sub_23BEA0F64(v66, v61, v16 & 1);
      swift_bridgeObjectRelease();
      sub_23BF56508((uint64_t)&v76);
      sub_23BEA0F64(v66, v61, v16 & 1);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      sub_23BEA0F64(v63, *((uint64_t *)&v24 + 1), v62);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      v126 = v105;
      v127 = v106;
      v128 = v107;
      v129 = v108;
      *(_OWORD *)v123 = v101;
      *(_OWORD *)&v123[16] = v102;
      v124 = v103;
      v125 = v104;
      v120 = v97;
      *(_OWORD *)v121 = v98;
      *(_OWORD *)&v121[16] = v99;
      v122 = v100;
      goto LABEL_10;
    }
    v27 = v11;
    sub_23BEA0EAC(v12, v11, v13 & 1);
    swift_bridgeObjectRetain();
    sub_23BEA0F64(v12, v27, v14);
    swift_bridgeObjectRelease();
    KeyPath = swift_getKeyPath();
    v28 = swift_getKeyPath();
    v11 = v27;
    v26 = v28;
    v67 = 1;
    v70 = v12;
    v72 = 2;
    v69 = v11;
  }
  else
  {
    v69 = 0;
    v70 = 0;
    v14 = 0;
    KeyPath = 0;
    v72 = 0;
    v26 = 0;
    v67 = 0;
  }
  v29 = (uint64_t *)(a1 + *(int *)(v9 + 36));
  v30 = v29[3];
  v58 = a4;
  v74 = v14;
  if (v30)
  {
    v31 = v29[1];
    v32 = v29[2];
    v33 = v29[3];
    v34 = *v29;
    v35 = v13;
    v36 = v32 & 1;
    v37 = v11;
    v38 = swift_getKeyPath();
    v39 = swift_getKeyPath();
    v40 = v12;
    v41 = v34;
    v42 = v33;
    v43 = v39;
    sub_23BEA1DC0(v40, v37, v35, v75);
    sub_23BEA0EAC(v41, v31, v32 & 1);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    v14 = v74;
    sub_23BEA1DC0(v41, v31, v32, v42);
    v64 = v41;
    v44 = v31;
    v45 = v31;
    v46 = v36;
    sub_23BEA0F64(v41, v45, v36);
    swift_release();
    v47 = v38;
    swift_release();
    v30 = v42;
    swift_bridgeObjectRelease();
    v48 = 1;
    v49 = 2;
  }
  else
  {
    sub_23BEA1DC0(v12, v11, v13, v75);
    v64 = 0;
    v44 = 0;
    v46 = 0;
    v47 = 0;
    v49 = 0;
    v43 = 0;
    v48 = 0;
  }
  *(_QWORD *)&v76 = v70;
  *((_QWORD *)&v76 + 1) = v69;
  *(_QWORD *)v77 = v14;
  *(_QWORD *)&v77[8] = v75;
  *(_QWORD *)&v77[16] = KeyPath;
  *(_QWORD *)&v77[24] = v72;
  *(_QWORD *)&v78 = 0;
  *((_QWORD *)&v78 + 1) = v26;
  LOBYTE(v79) = v67;
  *((_QWORD *)&v79 + 1) = 0;
  *(_QWORD *)&v80 = 0;
  *((_QWORD *)&v80 + 1) = v64;
  *(_QWORD *)&v81 = v44;
  *((_QWORD *)&v81 + 1) = v46;
  *(_QWORD *)&v82 = v30;
  *((_QWORD *)&v82 + 1) = v47;
  *(_QWORD *)v83 = v49;
  *(_QWORD *)&v83[8] = 0;
  *(_QWORD *)&v83[16] = v43;
  v83[24] = v48;
  v93 = v82;
  *(_OWORD *)v94 = (unint64_t)v49;
  v86 = v76;
  v87 = *(_OWORD *)v77;
  v91 = v80;
  v92 = v81;
  v89 = v78;
  v90 = (unint64_t)v79;
  v88 = *(_OWORD *)&v77[16];
  *(_OWORD *)&v94[9] = *(_OWORD *)&v83[9];
  sub_23BF556A0(v70, v69, v14, v75);
  sub_23BF556F0(0, 0, v64, v44, v46, v30);
  sub_23BF556A0(v70, v69, v74, v75);
  sub_23BF556F0(0, 0, v64, v44, v46, v30);
  sub_23BF55CC4(0, 0, v64, v44, v46, v30);
  sub_23BF55C74(v70, v69, v74, v75);
  v115 = v81;
  v116 = v82;
  *(_OWORD *)v117 = *(unint64_t *)v83;
  *(_OWORD *)&v117[9] = *(_OWORD *)&v83[9];
  v111 = *(_OWORD *)&v77[16];
  v112 = v78;
  v113 = (unint64_t)v79;
  v114 = v80;
  v109 = v76;
  v110 = *(_OWORD *)v77;
  sub_23BF56390((uint64_t)&v109);
  sub_23BEC42E0((uint64_t)&v109, (uint64_t)&v120, &qword_256AE6338);
  sub_23BF5639C((uint64_t)&v86, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_23BF556A0, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))sub_23BF556F0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6340);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6348);
  v50 = MEMORY[0x24BDF5428];
  sub_23BEA1F94(&qword_256AE6350, &qword_256AE6340, MEMORY[0x24BDF5428]);
  sub_23BEA1F94(&qword_256AE6358, &qword_256AE6348, v50);
  sub_23BFF895C();
  sub_23BF55CC4(0, 0, v64, v44, v46, v30);
  sub_23BF55C74(v70, v69, v74, v75);
  sub_23BF5639C((uint64_t)&v76, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_23BF55C74, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))sub_23BF55CC4);
  v126 = v105;
  v127 = v106;
  v128 = v107;
  v129 = v108;
  *(_OWORD *)v123 = v101;
  *(_OWORD *)&v123[16] = v102;
  v124 = v103;
  v125 = v104;
  v120 = v97;
  *(_OWORD *)v121 = v98;
  *(_OWORD *)&v121[16] = v99;
  v122 = v100;
  a4 = v58;
LABEL_10:
  v51 = v127;
  *(_OWORD *)(a4 + 128) = v126;
  *(_OWORD *)(a4 + 144) = v51;
  *(_OWORD *)(a4 + 160) = v128;
  *(_WORD *)(a4 + 176) = v129;
  v52 = *(_OWORD *)&v123[16];
  *(_OWORD *)(a4 + 64) = *(_OWORD *)v123;
  *(_OWORD *)(a4 + 80) = v52;
  v53 = v125;
  *(_OWORD *)(a4 + 96) = v124;
  *(_OWORD *)(a4 + 112) = v53;
  v54 = *(_OWORD *)v121;
  *(_OWORD *)a4 = v120;
  *(_OWORD *)(a4 + 16) = v54;
  result = *(double *)&v121[16];
  v56 = v122;
  *(_OWORD *)(a4 + 32) = *(_OWORD *)&v121[16];
  *(_OWORD *)(a4 + 48) = v56;
  return result;
}

CGFloat sub_23BF53F04@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  double v16;
  CGFloat v17;
  double v18;
  CGFloat v19;
  double v20;
  CGFloat v21;
  double v22;
  CGFloat v23;
  void (*v24)(char *, uint64_t);
  double MidX;
  uint64_t v26;
  uint64_t v27;
  double *v28;
  double v29;
  double v30;
  CGFloat v31;
  double v32;
  CGFloat v33;
  double v34;
  CGFloat v35;
  double v36;
  CGFloat v37;
  CGFloat result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t KeyPath;
  CGRect v46;
  CGRect v47;

  v41 = a6;
  v42 = a7;
  v43 = a5;
  v40 = a4;
  v12 = sub_23BFF8974();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath();
  v44 = swift_getKeyPath();
  a3 &= 1u;
  sub_23BEA0EAC(a1, a2, a3);
  swift_bridgeObjectRetain();
  sub_23BFF8A28();
  sub_23BFF84E8();
  v17 = v16;
  v19 = v18;
  v21 = v20;
  v23 = v22;
  v24 = *(void (**)(char *, uint64_t))(v13 + 8);
  v24(v15, v12);
  v46.origin.x = v17;
  v46.origin.y = v19;
  v46.size.width = v21;
  v46.size.height = v23;
  MidX = CGRectGetMidX(v46);
  v27 = type metadata accessor for DynamicBrickView(0, v41, v42, v26);
  v28 = (double *)(v43 + *(int *)(v27 + 44));
  v29 = MidX - *v28;
  sub_23BFF8A28();
  sub_23BFF84E8();
  v31 = v30;
  v33 = v32;
  v35 = v34;
  v37 = v36;
  v24(v15, v12);
  v47.origin.x = v31;
  v47.origin.y = v33;
  v47.size.width = v35;
  v47.size.height = v37;
  result = CGRectGetMidY(v47) - v28[1];
  *(_QWORD *)a8 = a1;
  *(_QWORD *)(a8 + 8) = a2;
  *(_BYTE *)(a8 + 16) = a3;
  v39 = KeyPath;
  *(_QWORD *)(a8 + 24) = v40;
  *(_QWORD *)(a8 + 32) = v39;
  *(_QWORD *)(a8 + 40) = 2;
  *(_BYTE *)(a8 + 48) = 0;
  *(_QWORD *)(a8 + 56) = v44;
  *(_BYTE *)(a8 + 64) = 1;
  *(double *)(a8 + 72) = v29;
  *(CGFloat *)(a8 + 80) = result;
  return result;
}

__n128 sub_23BF540F0@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  __n128 result;
  __int128 v18;
  _OWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;

  v8 = sub_23BFF8848();
  sub_23BF54298(a1, a2, a3, v9, (uint64_t)v19);
  v10 = v20;
  v11 = v21;
  v12 = v22;
  v13 = v23;
  v14 = v24;
  v15 = v25;
  v16 = v26;
  result = (__n128)v19[0];
  v18 = v19[1];
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = 0;
  *(_BYTE *)(a4 + 16) = 0;
  *(__n128 *)(a4 + 24) = result;
  *(_OWORD *)(a4 + 40) = v18;
  *(_QWORD *)(a4 + 56) = v10;
  *(_QWORD *)(a4 + 64) = v11;
  *(_BYTE *)(a4 + 72) = v12;
  *(_QWORD *)(a4 + 80) = v13;
  *(_BYTE *)(a4 + 88) = v14;
  *(_QWORD *)(a4 + 96) = v15;
  *(_BYTE *)(a4 + 104) = v16;
  return result;
}

uint64_t sub_23BF54190@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  _QWORD v22[6];
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  char v30;

  v8 = sub_23BFF8848();
  sub_23BF54298(a1, a2, a3, v9, (uint64_t)v22);
  v10 = v22[0];
  v11 = v22[1];
  v12 = v22[2];
  v13 = v22[3];
  v15 = v22[4];
  v14 = v22[5];
  v16 = v23;
  v17 = v24;
  v18 = v25;
  v19 = v26;
  v20 = v27;
  LOBYTE(v22[0]) = 0;
  v30 = v23;
  v29 = v27;
  v28 = 0;
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = 0;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 24) = v10;
  *(_QWORD *)(a4 + 32) = v11;
  *(_QWORD *)(a4 + 40) = v12;
  *(_QWORD *)(a4 + 48) = v13;
  *(_QWORD *)(a4 + 56) = v15;
  *(_QWORD *)(a4 + 64) = v14;
  *(_BYTE *)(a4 + 72) = v16;
  *(_QWORD *)(a4 + 80) = v17;
  *(_BYTE *)(a4 + 88) = v18;
  *(_QWORD *)(a4 + 96) = v19;
  *(_BYTE *)(a4 + 104) = v20;
  *(_QWORD *)(a4 + 112) = 0;
  *(_BYTE *)(a4 + 120) = 0;
  sub_23BEA1DC0(v10, v11, v12, v13);
  swift_retain();
  swift_retain();
  sub_23BEBF0A4(v10, v11, v12, v13);
  swift_release();
  return swift_release();
}

uint64_t sub_23BF54298@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;

  v6 = (uint64_t *)(a1 + *(int *)(type metadata accessor for DynamicBrickView(0, a2, a3, a4) + 52));
  v7 = *v6;
  v8 = v6[1];
  v9 = v6[2];
  v10 = v6[3];
  KeyPath = swift_getKeyPath();
  v12 = swift_getKeyPath();
  *(_QWORD *)a5 = v7;
  *(_QWORD *)(a5 + 8) = v8;
  *(_QWORD *)(a5 + 16) = v9;
  *(_QWORD *)(a5 + 24) = v10;
  *(_QWORD *)(a5 + 32) = KeyPath;
  *(_QWORD *)(a5 + 40) = 2;
  *(_BYTE *)(a5 + 48) = 0;
  *(_QWORD *)(a5 + 56) = v12;
  *(_BYTE *)(a5 + 64) = 0;
  *(_QWORD *)(a5 + 72) = 0;
  *(_BYTE *)(a5 + 80) = 0;
  sub_23BEA1DC0(v7, v8, v9, v10);
  swift_retain();
  swift_retain();
  sub_23BEA1DC0(v7, v8, v9, v10);
  sub_23BEBF0A4(v7, v8, v9, v10);
  swift_release();
  return swift_release();
}

ValueMetadata *type metadata accessor for DynamicBrickViewLayout()
{
  return &type metadata for DynamicBrickViewLayout;
}

uint64_t sub_23BF54398()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_23BF54430(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  _OWORD *v18;
  _OWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  __int128 v29;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((v6 + 47) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 32 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (char *)v4 + v6;
    v11 = (char *)a2 + v6;
    v12 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v13 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)(v13 + 24) < 0xFFFFFFFFuLL)
    {
      v17 = *(_OWORD *)(v13 + 16);
      *(_OWORD *)v12 = *(_OWORD *)v13;
      *(_OWORD *)(v12 + 16) = v17;
    }
    else
    {
      v14 = *(_QWORD *)v13;
      v15 = *(_QWORD *)(v13 + 8);
      v16 = *(_BYTE *)(v13 + 16);
      sub_23BEA0EAC(*(_QWORD *)v13, v15, v16);
      *(_QWORD *)v12 = v14;
      *(_QWORD *)(v12 + 8) = v15;
      *(_BYTE *)(v12 + 16) = v16;
      *(_QWORD *)(v12 + 24) = *(_QWORD *)(v13 + 24);
      swift_bridgeObjectRetain();
    }
    *(_BYTE *)(v12 + 32) = *(_BYTE *)(v13 + 32);
    v18 = (_OWORD *)((unint64_t)(v10 + 47) & 0xFFFFFFFFFFFFFFF8);
    v19 = (_OWORD *)((unint64_t)(v11 + 47) & 0xFFFFFFFFFFFFFFF8);
    *v18 = *v19;
    v20 = (_QWORD *)(((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFFFF8);
    v21 = (_QWORD *)(((unint64_t)v19 + 23) & 0xFFFFFFFFFFFFFFF8);
    v22 = v21[1];
    *v20 = *v21;
    v20[1] = v22;
    v23 = ((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF8;
    v24 = ((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8;
    v25 = *(_QWORD *)(v24 + 24);
    swift_retain();
    if (v25 < 0xFFFFFFFF)
    {
      v29 = *(_OWORD *)(v24 + 16);
      *(_OWORD *)v23 = *(_OWORD *)v24;
      *(_OWORD *)(v23 + 16) = v29;
    }
    else
    {
      v26 = *(_QWORD *)v24;
      v27 = *(_QWORD *)(v24 + 8);
      v28 = *(_BYTE *)(v24 + 16);
      sub_23BEA0EAC(*(_QWORD *)v24, v27, v28);
      *(_QWORD *)v23 = v26;
      *(_QWORD *)(v23 + 8) = v27;
      *(_BYTE *)(v23 + 16) = v28;
      *(_QWORD *)(v23 + 24) = *(_QWORD *)(v24 + 24);
      swift_bridgeObjectRetain();
    }
  }
  return v4;
}

uint64_t sub_23BF545CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  unint64_t v7;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = *(_QWORD *)(v3 + 64) + a1;
  v5 = (v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v5 + 24) >= 0xFFFFFFFFuLL)
  {
    sub_23BEA0F64(*(_QWORD *)v5, *(_QWORD *)(v5 + 8), *(_BYTE *)(v5 + 16));
    swift_bridgeObjectRelease();
  }
  result = swift_release();
  v7 = (((((v4 + 47) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v7 + 24) >= 0xFFFFFFFFuLL)
  {
    sub_23BEA0F64(*(_QWORD *)v7, *(_QWORD *)(v7 + 8), *(_BYTE *)(v7 + 16));
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_23BF54678(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  _OWORD *v15;
  _OWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  __int128 v26;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  v9 = (v6 + a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v6 + a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v10 + 24) < 0xFFFFFFFFuLL)
  {
    v14 = *(_OWORD *)(v10 + 16);
    *(_OWORD *)v9 = *(_OWORD *)v10;
    *(_OWORD *)(v9 + 16) = v14;
  }
  else
  {
    v11 = *(_QWORD *)v10;
    v12 = *(_QWORD *)(v10 + 8);
    v13 = *(_BYTE *)(v10 + 16);
    sub_23BEA0EAC(*(_QWORD *)v10, v12, v13);
    *(_QWORD *)v9 = v11;
    *(_QWORD *)(v9 + 8) = v12;
    *(_BYTE *)(v9 + 16) = v13;
    *(_QWORD *)(v9 + 24) = *(_QWORD *)(v10 + 24);
    swift_bridgeObjectRetain();
  }
  *(_BYTE *)(v9 + 32) = *(_BYTE *)(v10 + 32);
  v15 = (_OWORD *)((v7 + 47) & 0xFFFFFFFFFFFFFFF8);
  v16 = (_OWORD *)((v8 + 47) & 0xFFFFFFFFFFFFFFF8);
  *v15 = *v16;
  v17 = (_QWORD *)(((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8);
  v18 = (_QWORD *)(((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFFFF8);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  v20 = ((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFFFF8;
  v21 = ((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFFFF8;
  v22 = *(_QWORD *)(v21 + 24);
  swift_retain();
  if (v22 < 0xFFFFFFFF)
  {
    v26 = *(_OWORD *)(v21 + 16);
    *(_OWORD *)v20 = *(_OWORD *)v21;
    *(_OWORD *)(v20 + 16) = v26;
  }
  else
  {
    v23 = *(_QWORD *)v21;
    v24 = *(_QWORD *)(v21 + 8);
    v25 = *(_BYTE *)(v21 + 16);
    sub_23BEA0EAC(*(_QWORD *)v21, v24, v25);
    *(_QWORD *)v20 = v23;
    *(_QWORD *)(v20 + 8) = v24;
    *(_BYTE *)(v20 + 16) = v25;
    *(_QWORD *)(v20 + 24) = *(_QWORD *)(v21 + 24);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_23BF547B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  __int128 v39;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  v9 = (v6 + a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v6 + a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_QWORD *)(v10 + 24);
  if (*(_QWORD *)(v9 + 24) < 0xFFFFFFFFuLL)
  {
    if (v11 >= 0xFFFFFFFF)
    {
      v18 = *(_QWORD *)v10;
      v19 = *(_QWORD *)(v10 + 8);
      v20 = *(_BYTE *)(v10 + 16);
      sub_23BEA0EAC(*(_QWORD *)v10, v19, v20);
      *(_QWORD *)v9 = v18;
      *(_QWORD *)(v9 + 8) = v19;
      *(_BYTE *)(v9 + 16) = v20;
      *(_QWORD *)(v9 + 24) = *(_QWORD *)(v10 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
  }
  else
  {
    if (v11 >= 0xFFFFFFFF)
    {
      v12 = *(_QWORD *)v10;
      v13 = *(_QWORD *)(v10 + 8);
      v14 = *(_BYTE *)(v10 + 16);
      sub_23BEA0EAC(*(_QWORD *)v10, v13, v14);
      v15 = *(_QWORD *)v9;
      v16 = *(_QWORD *)(v9 + 8);
      v17 = *(_BYTE *)(v9 + 16);
      *(_QWORD *)v9 = v12;
      *(_QWORD *)(v9 + 8) = v13;
      *(_BYTE *)(v9 + 16) = v14;
      sub_23BEA0F64(v15, v16, v17);
      *(_QWORD *)(v9 + 24) = *(_QWORD *)(v10 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    sub_23BEA0F64(*(_QWORD *)v9, *(_QWORD *)(v9 + 8), *(_BYTE *)(v9 + 16));
    swift_bridgeObjectRelease();
  }
  v21 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v21;
LABEL_8:
  *(_BYTE *)(v9 + 32) = *(_BYTE *)(v10 + 32);
  v22 = (_QWORD *)((v7 + 47) & 0xFFFFFFFFFFFFFFF8);
  v23 = (_QWORD *)((v8 + 47) & 0xFFFFFFFFFFFFFFF8);
  *v22 = *v23;
  v22[1] = v23[1];
  v24 = (_QWORD *)(((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFFFF8);
  v25 = (_QWORD *)(((unint64_t)v23 + 23) & 0xFFFFFFFFFFFFFFF8);
  v26 = v25[1];
  *v24 = *v25;
  v24[1] = v26;
  swift_retain();
  swift_release();
  v27 = ((unint64_t)v24 + 23) & 0xFFFFFFFFFFFFFFF8;
  v28 = ((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFFFF8;
  v29 = *(_QWORD *)(v28 + 24);
  if (*(_QWORD *)(v27 + 24) < 0xFFFFFFFFuLL)
  {
    if (v29 >= 0xFFFFFFFF)
    {
      v36 = *(_QWORD *)v28;
      v37 = *(_QWORD *)(v28 + 8);
      v38 = *(_BYTE *)(v28 + 16);
      sub_23BEA0EAC(*(_QWORD *)v28, v37, v38);
      *(_QWORD *)v27 = v36;
      *(_QWORD *)(v27 + 8) = v37;
      *(_BYTE *)(v27 + 16) = v38;
      *(_QWORD *)(v27 + 24) = *(_QWORD *)(v28 + 24);
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_14:
    v39 = *(_OWORD *)(v28 + 16);
    *(_OWORD *)v27 = *(_OWORD *)v28;
    *(_OWORD *)(v27 + 16) = v39;
    return a1;
  }
  if (v29 < 0xFFFFFFFF)
  {
    sub_23BEA0F64(*(_QWORD *)v27, *(_QWORD *)(v27 + 8), *(_BYTE *)(v27 + 16));
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  v30 = *(_QWORD *)v28;
  v31 = *(_QWORD *)(v28 + 8);
  v32 = *(_BYTE *)(v28 + 16);
  sub_23BEA0EAC(*(_QWORD *)v28, v31, v32);
  v33 = *(_QWORD *)v27;
  v34 = *(_QWORD *)(v27 + 8);
  v35 = *(_BYTE *)(v27 + 16);
  *(_QWORD *)v27 = v30;
  *(_QWORD *)(v27 + 8) = v31;
  *(_BYTE *)(v27 + 16) = v32;
  sub_23BEA0F64(v33, v34, v35);
  *(_QWORD *)(v27 + 24) = *(_QWORD *)(v28 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23BF549FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  _OWORD *v12;
  _OWORD *v13;
  _OWORD *v14;
  _OWORD *v15;
  _OWORD *v16;
  _OWORD *v17;
  __int128 v18;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  v9 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v11;
  *(_BYTE *)(v9 + 32) = *(_BYTE *)(v10 + 32);
  v12 = (_OWORD *)((v7 + 47) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_OWORD *)((v8 + 47) & 0xFFFFFFFFFFFFFFF8);
  *v12 = *v13;
  v14 = (_OWORD *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFF8);
  v15 = (_OWORD *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFF8);
  *v14 = *v15;
  v16 = (_OWORD *)(((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8);
  v17 = (_OWORD *)(((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  return a1;
}

uint64_t sub_23BF54A9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  _QWORD *v16;
  _QWORD *v17;
  _OWORD *v18;
  _OWORD *v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  __int128 v26;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  v9 = (v6 + a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v9 + 24) >= 0xFFFFFFFFuLL)
  {
    if (*(_QWORD *)(v10 + 24) >= 0xFFFFFFFFuLL)
    {
      v11 = *(_BYTE *)(v10 + 16);
      v12 = *(_QWORD *)v9;
      v13 = *(_QWORD *)(v9 + 8);
      v14 = *(_BYTE *)(v9 + 16);
      *(_OWORD *)v9 = *(_OWORD *)v10;
      *(_BYTE *)(v9 + 16) = v11;
      sub_23BEA0F64(v12, v13, v14);
      *(_QWORD *)(v9 + 24) = *(_QWORD *)(v10 + 24);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_23BEA0F64(*(_QWORD *)v9, *(_QWORD *)(v9 + 8), *(_BYTE *)(v9 + 16));
    swift_bridgeObjectRelease();
  }
  v15 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v15;
LABEL_6:
  *(_BYTE *)(v9 + 32) = *(_BYTE *)(v10 + 32);
  v16 = (_QWORD *)((v7 + 47) & 0xFFFFFFFFFFFFFFF8);
  v17 = (_QWORD *)((v8 + 47) & 0xFFFFFFFFFFFFFFF8);
  *v16 = *v17;
  v16[1] = v17[1];
  v18 = (_OWORD *)(((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFFFF8);
  v19 = (_OWORD *)(((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFF8);
  *v18 = *v19;
  swift_release();
  v20 = ((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFFFF8;
  v21 = ((unint64_t)v19 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v20 + 24) < 0xFFFFFFFFuLL)
  {
LABEL_10:
    v26 = *(_OWORD *)(v21 + 16);
    *(_OWORD *)v20 = *(_OWORD *)v21;
    *(_OWORD *)(v20 + 16) = v26;
    return a1;
  }
  if (*(_QWORD *)(v21 + 24) < 0xFFFFFFFFuLL)
  {
    sub_23BEA0F64(*(_QWORD *)v20, *(_QWORD *)(v20 + 8), *(_BYTE *)(v20 + 16));
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  v22 = *(_BYTE *)(v21 + 16);
  v23 = *(_QWORD *)v20;
  v24 = *(_QWORD *)(v20 + 8);
  v25 = *(_BYTE *)(v20 + 16);
  *(_OWORD *)v20 = *(_OWORD *)v21;
  *(_BYTE *)(v20 + 16) = v22;
  sub_23BEA0F64(v23, v24, v25);
  *(_QWORD *)(v20 + 24) = *(_QWORD *)(v21 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23BF54C28(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 63) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((((((v7 + 47) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 32) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_23BF54CB4 + 4 * byte_23C0016B8[v10]))();
  }
}

void sub_23BF54D40(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((((*(_DWORD *)(v5 + 64) + 47) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFE0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((((*(_DWORD *)(v5 + 64) + 47) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFE0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((((((*(_QWORD *)(v5 + 64) + 47) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)+ 32);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_23BF54E44()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x23BF54EC4);
}

void sub_23BF54E4C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x23BF54E54);
  JUMPOUT(0x23BF54EC4);
}

void sub_23BF54E9C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x23BF54EC4);
}

void sub_23BF54EA4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x23BF54EC4);
}

uint64_t sub_23BF54EAC(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x23BF54EC4);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x23BF54EC0);
    JUMPOUT(0x23BF54EB8);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t sub_23BF54EDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  _QWORD v9[2];
  _QWORD v10[2];

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE61C0);
  swift_getTupleTypeMetadata2();
  v0 = sub_23BFF9220();
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v0);
  v1 = sub_23BFF859C();
  MEMORY[0x242615198](MEMORY[0x24BDEC6F8], v1);
  v2 = sub_23BFF90C4();
  v3 = sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3C28);
  v4 = sub_23BFF862C();
  v10[0] = MEMORY[0x242615198](MEMORY[0x24BDF4750], v2);
  v10[1] = MEMORY[0x24BDEEC40];
  v5 = MEMORY[0x24BDED308];
  v9[0] = MEMORY[0x242615198](MEMORY[0x24BDED308], v3, v10);
  v9[1] = sub_23BEA1F94(qword_256AE3C30, &qword_256AE3C28, MEMORY[0x24BDEB950]);
  MEMORY[0x242615198](v5, v4, v9);
  v6 = sub_23BFF9040();
  sub_23BFF8680();
  v7 = (uint64_t (*)(uint64_t))MEMORY[0x24BDED868];
  MEMORY[0x242615198](MEMORY[0x24BDF43B0], v6);
  sub_23BEA1BB8(&qword_256AE3558, v7, MEMORY[0x24BDED858]);
  return swift_getOpaqueTypeConformance2();
}

uint64_t storeEnumTagSinglePayload for DynamicBrickViewLayout.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23BF550E0 + 4 * byte_23C0016CC[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23BF55114 + 4 * byte_23C0016C7[v4]))();
}

uint64_t sub_23BF55114(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BF5511C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BF55124);
  return result;
}

uint64_t sub_23BF55130(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BF55138);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23BF5513C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BF55144(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DynamicBrickViewLayout.CodingKeys()
{
  return &type metadata for DynamicBrickViewLayout.CodingKeys;
}

unint64_t sub_23BF55164()
{
  unint64_t result;

  result = qword_256AE6250;
  if (!qword_256AE6250)
  {
    result = MEMORY[0x242615198](&unk_23C00191C, &type metadata for DynamicBrickViewLayout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6250);
  }
  return result;
}

unint64_t sub_23BF551AC()
{
  unint64_t result;

  result = qword_256AE6258;
  if (!qword_256AE6258)
  {
    result = MEMORY[0x242615198](&unk_23C00188C, &type metadata for DynamicBrickViewLayout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6258);
  }
  return result;
}

unint64_t sub_23BF551F4()
{
  unint64_t result;

  result = qword_256AE6260;
  if (!qword_256AE6260)
  {
    result = MEMORY[0x242615198](&unk_23C0018B4, &type metadata for DynamicBrickViewLayout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6260);
  }
  return result;
}

uint64_t sub_23BF55238(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000010 && a2 == 0x800000023C01F0F0 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C61636974726576 && a2 == 0xEE006E696772614DLL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v5 = sub_23BFF9964();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23BF55348@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_23BF52434(v2[4], v2[2], v2[3], a1, a2);
}

uint64_t objectdestroyTm_6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for DynamicBrickView(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80);
  v8 = v4 + ((v7 + 32) & ~v7);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v8, v5);
  v9 = v8 + *(int *)(v6 + 36);
  if (*(_QWORD *)(v9 + 24))
  {
    sub_23BEA0F64(*(_QWORD *)v9, *(_QWORD *)(v9 + 8), *(_BYTE *)(v9 + 16));
    swift_bridgeObjectRelease();
  }
  swift_release();
  v10 = v8 + *(int *)(v6 + 52);
  if (*(_QWORD *)(v10 + 24))
  {
    sub_23BEA0F64(*(_QWORD *)v10, *(_QWORD *)(v10 + 8), *(_BYTE *)(v10 + 16));
    swift_bridgeObjectRelease();
  }
  return swift_deallocObject();
}

uint64_t sub_23BF5542C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for DynamicBrickView(0, v6, v7, a4) - 8) + 80);
  return sub_23BF525DC(a1, v4 + ((v8 + 32) & ~v8), v6, v7);
}

uint64_t sub_23BF55494(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,__int16 a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  if ((a41 & 1) != 0)
    return sub_23BF55574(a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22,
             a23,
             a24,
             a25,
             a26,
             (unsigned __int16)(a26 & 0x1FF) >> 8);
  sub_23BEA1DC0(a9, a10, a11, a12);
  swift_retain();
  return swift_retain();
}

uint64_t sub_23BF55574(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,char a24)
{
  if ((a24 & 1) != 0)
  {
    sub_23BF556A0(a1, a2, a3, a4);
    return sub_23BF556F0(a10, a11, a12, a13, a14, a15);
  }
  else
  {
    sub_23BEA0EAC(a4, a5, a6 & 1);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    sub_23BEA0EAC(a15, a16, a17 & 1);
    swift_bridgeObjectRetain();
    swift_retain();
    return swift_retain();
  }
}

uint64_t sub_23BF556A0(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_23BEA0EAC(result, a2, a3 & 1);
    swift_bridgeObjectRetain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_23BF556F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t result;

  if (a6)
  {
    sub_23BEA0EAC(a3, a4, a5 & 1);
    swift_bridgeObjectRetain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_23BF5574C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10)
{
  sub_23BEA1DC0(a7, a8, a9, a10);
  swift_retain();
  return swift_retain();
}

unint64_t sub_23BF55788()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AE6268;
  if (!qword_256AE6268)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE61C0);
    v2[0] = sub_23BEA1F94(&qword_256AE6270, &qword_256AE6278, MEMORY[0x24BDF4498]);
    v2[1] = MEMORY[0x24BDECC60];
    result = MEMORY[0x242615198](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AE6268);
  }
  return result;
}

uint64_t sub_23BF5580C(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  v9 = *(_OWORD *)(a1 + 272);
  v10 = *(_OWORD *)(a1 + 288);
  v7 = *(_OWORD *)(a1 + 240);
  v8 = *(_OWORD *)(a1 + 256);
  v5 = *(_OWORD *)(a1 + 208);
  v6 = *(_OWORD *)(a1 + 224);
  sub_23BF558B0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    v5,
    *((uint64_t *)&v5 + 1),
    v6,
    *((uint64_t *)&v6 + 1),
    v7,
    *((uint64_t *)&v7 + 1),
    v8,
    *((uint64_t *)&v8 + 1),
    v9,
    *((uint64_t *)&v9 + 1),
    v10,
    *((uint64_t *)&v10 + 1),
    *(_QWORD *)(a1 + 304),
    *(_QWORD *)(a1 + 312),
    *(_BYTE *)(a1 + 320),
    *(_BYTE *)(a1 + 321),
    a2,
    a3);
  return a1;
}

uint64_t sub_23BF558B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,char a42,uint64_t (*a43)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t),uint64_t (*a44)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  if ((a42 & 1) != 0)
    return a44(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28,
             a29,
             a30,
             a31);
  else
    return a43(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28,
             a29,
             a30,
             a31,
             a32,
             a33,
             a34,
             a35,
             a36,
             a37,
             a38,
             a39,
             a40);
}

uint64_t sub_23BF55A60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,__int16 a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  if ((a41 & 1) != 0)
    return sub_23BF55B40(a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22,
             a23,
             a24,
             a25,
             a26,
             (unsigned __int16)(a26 & 0x1FF) >> 8);
  sub_23BEBF0A4(a9, a10, a11, a12);
  swift_release();
  return swift_release();
}

uint64_t sub_23BF55B40(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,char a24)
{
  if ((a24 & 1) != 0)
  {
    sub_23BF55C74(a1, a2, a3, a4);
    return sub_23BF55CC4(a10, a11, a12, a13, a14, a15);
  }
  else
  {
    sub_23BEA0F64(a4, a5, a6 & 1);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    sub_23BEA0F64(a15, a16, a17 & 1);
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_23BF55C74(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_23BEA0F64(result, a2, a3 & 1);
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_23BF55CC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t result;

  if (a6)
  {
    sub_23BEA0F64(a3, a4, a5 & 1);
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_23BF55D20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10)
{
  sub_23BEBF0A4(a7, a8, a9, a10);
  swift_release();
  return swift_release();
}

uint64_t sub_23BF55D5C(uint64_t a1)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v6 = *(_OWORD *)(a1 + 296);
  v7 = *(_OWORD *)(a1 + 312);
  v4 = *(_OWORD *)(a1 + 264);
  v5 = *(_OWORD *)(a1 + 280);
  v3 = *(_OWORD *)(a1 + 232);
  sub_23BF558B0(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 152), *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    *(_QWORD *)(a1 + 224),
    v3,
    *((uint64_t *)&v3 + 1),
    *(_QWORD *)(a1 + 248),
    *(_QWORD *)(a1 + 256),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1),
    v6,
    *((uint64_t *)&v6 + 1),
    v7,
    *((uint64_t *)&v7 + 1),
    *(_QWORD *)(a1 + 328),
    *(_QWORD *)(a1 + 336),
    *(_BYTE *)(a1 + 344),
    *(_BYTE *)(a1 + 345),
    (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_23BF55A60,
    (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_23BF55D20);
  return a1;
}

uint64_t *sub_23BF55E20(uint64_t *a1)
{
  sub_23BEA1DC0(a1[3], a1[4], a1[5], a1[6]);
  swift_retain();
  swift_retain();
  return a1;
}

unint64_t sub_23BF55E6C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AE6298;
  if (!qword_256AE6298)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE6288);
    v2[0] = sub_23BEA1F94(&qword_256AE62A0, &qword_256AE62A8, MEMORY[0x24BDF4700]);
    v2[1] = MEMORY[0x24BDEDBB8];
    result = MEMORY[0x242615198](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AE6298);
  }
  return result;
}

unint64_t sub_23BF55EF0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AE62B0;
  if (!qword_256AE62B0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE6290);
    v2[0] = sub_23BEA1F94(&qword_256AE62B8, &qword_256AE62C0, MEMORY[0x24BDF4700]);
    v2[1] = MEMORY[0x24BDEBEE0];
    result = MEMORY[0x242615198](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AE62B0);
  }
  return result;
}

uint64_t sub_23BF55F74(uint64_t result)
{
  *(_BYTE *)(result + 321) = 1;
  return result;
}

unint64_t sub_23BF55F80()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AE62E8;
  if (!qword_256AE62E8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE62F0);
    v2[0] = sub_23BEA1F94(&qword_256AE62F8, &qword_256AE6300, MEMORY[0x24BDF4700]);
    v2[1] = MEMORY[0x24BDEBEE0];
    result = MEMORY[0x242615198](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AE62E8);
  }
  return result;
}

unint64_t sub_23BF56004()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AE6308;
  if (!qword_256AE6308)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE6310);
    v2[0] = sub_23BEA1F94(&qword_256AE6318, &qword_256AE6320, MEMORY[0x24BDF4700]);
    v2[1] = MEMORY[0x24BDEDBB8];
    result = MEMORY[0x242615198](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AE6308);
  }
  return result;
}

uint64_t sub_23BF56088(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  result = *a1;
  if (!result)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v9[0] = a3();
    v9[1] = a4();
    result = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v8, v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *sub_23BF560F8(uint64_t *a1)
{
  sub_23BEBF0A4(a1[3], a1[4], a1[5], a1[6]);
  swift_release();
  swift_release();
  return a1;
}

uint64_t *sub_23BF56144(uint64_t *a1)
{
  sub_23BEA1DC0(a1[6], a1[7], a1[8], a1[9]);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t *sub_23BF56190(uint64_t *a1)
{
  sub_23BEBF0A4(a1[6], a1[7], a1[8], a1[9]);
  swift_release();
  swift_release();
  return a1;
}

uint64_t sub_23BF561DC(uint64_t a1)
{
  sub_23BF55B40(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_OWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_BYTE *)(a1 + 176),
    *(_BYTE *)(a1 + 177));
  return a1;
}

uint64_t sub_23BF5624C(uint64_t result)
{
  *(_BYTE *)(result + 320) = 1;
  return result;
}

uint64_t sub_23BF56258(uint64_t result)
{
  *(_BYTE *)(result + 321) = 0;
  return result;
}

uint64_t sub_23BF56260(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _WORD))
{
  a2(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 152), *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_WORD *)(a1 + 200));
  return a1;
}

uint64_t sub_23BF562E0(uint64_t result)
{
  *(_BYTE *)(result + 320) = 0;
  return result;
}

uint64_t *sub_23BF562E8(uint64_t *a1)
{
  sub_23BEA1DC0(a1[5], a1[6], a1[7], a1[8]);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t *sub_23BF56334(uint64_t *a1)
{
  sub_23BEBF0A4(a1[5], a1[6], a1[7], a1[8]);
  swift_release();
  swift_release();
  return a1;
}

uint64_t sub_23BF56390(uint64_t result)
{
  *(_BYTE *)(result + 177) = 1;
  return result;
}

uint64_t sub_23BF5639C(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char), void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_QWORD *)(a1 + 88);
  v16 = *(_QWORD *)(a1 + 80);
  v17 = *(_QWORD *)(a1 + 72);
  v5 = *(_QWORD *)(a1 + 96);
  v6 = *(_QWORD *)(a1 + 104);
  v7 = *(_QWORD *)(a1 + 112);
  v8 = *(_QWORD *)(a1 + 120);
  v10 = *(_QWORD *)(a1 + 128);
  v9 = *(_QWORD *)(a1 + 136);
  v11 = *(_QWORD *)(a1 + 144);
  v12 = *(_BYTE *)(a1 + 152);
  v14 = *(_BYTE *)(a1 + 64);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), v14);
  v15 = v12;
  a3(v17, v16, v4, v5, v6, v7, v8, v10, v9, v11, v15);
  return a1;
}

uint64_t sub_23BF56458(uint64_t result)
{
  *(_BYTE *)(result + 177) = 0;
  return result;
}

uint64_t sub_23BF56460(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)(a1 + 112);
  v3 = *(_QWORD *)(a1 + 120);
  v4 = *(_BYTE *)(a1 + 128);
  sub_23BEA0EAC(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  sub_23BEA0EAC(v2, v3, v4);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_23BF56508(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)(a1 + 112);
  v3 = *(_QWORD *)(a1 + 120);
  v4 = *(_BYTE *)(a1 + 128);
  sub_23BEA0F64(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_23BEA0F64(v2, v3, v4);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

BOOL static DynamicSizeClass.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_23BF565C4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23BF565FC + 4 * byte_23C001A00[*v0]))(0x616D536172747865, 0xEA00000000006C6CLL);
}

uint64_t sub_23BF565FC()
{
  return 0x6C6C616D73;
}

uint64_t sub_23BF56610()
{
  return 0x72616C75676572;
}

uint64_t sub_23BF56628()
{
  return 0x6D756964656DLL;
}

uint64_t sub_23BF5663C()
{
  return 0x656772616CLL;
}

uint64_t sub_23BF56650()
{
  return 0x72614C6172747865;
}

uint64_t sub_23BF5666C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BF57D78(a1, a2);
  *a3 = result;
  return result;
}

void sub_23BF56690(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_23BF5669C()
{
  sub_23BF56D80();
  return sub_23BFF9A30();
}

uint64_t sub_23BF566C4()
{
  sub_23BF56D80();
  return sub_23BFF9A3C();
}

uint64_t sub_23BF566EC()
{
  sub_23BF56DC4();
  return sub_23BFF9A30();
}

uint64_t sub_23BF56714()
{
  sub_23BF56DC4();
  return sub_23BFF9A3C();
}

uint64_t sub_23BF5673C()
{
  sub_23BF56F18();
  return sub_23BFF9A30();
}

uint64_t sub_23BF56764()
{
  sub_23BF56F18();
  return sub_23BFF9A3C();
}

uint64_t sub_23BF5678C()
{
  sub_23BF56E08();
  return sub_23BFF9A30();
}

uint64_t sub_23BF567B4()
{
  sub_23BF56E08();
  return sub_23BFF9A3C();
}

uint64_t sub_23BF567DC()
{
  sub_23BF56E4C();
  return sub_23BFF9A30();
}

uint64_t sub_23BF56804()
{
  sub_23BF56E4C();
  return sub_23BFF9A3C();
}

uint64_t sub_23BF5682C()
{
  sub_23BF56E90();
  return sub_23BFF9A30();
}

uint64_t sub_23BF56854()
{
  sub_23BF56E90();
  return sub_23BFF9A3C();
}

uint64_t sub_23BF5687C()
{
  sub_23BF56ED4();
  return sub_23BFF9A30();
}

uint64_t sub_23BF568A4()
{
  sub_23BF56ED4();
  return sub_23BFF9A3C();
}

void static DynamicSizeClass.default.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

BOOL DynamicSizeClass.isCompact.getter()
{
  unsigned __int8 *v0;

  return *v0 < 3u;
}

Swift::Bool __swiftcall DynamicSizeClass.shouldOffsetForCarousel(containerSize:)(CGSize containerSize)
{
  unsigned __int8 *v1;

  return containerSize.width > containerSize.height && *v1 > 2u;
}

uint64_t DynamicSizeClass.init(canvasWidth:)@<X0>(_BYTE *a1@<X8>, double a2@<D0>)
{
  uint64_t result;
  char v4;

  result = DynamicSizeClass.init(width:)(&v4, a2);
  *a1 = v4;
  return result;
}

BOOL sub_23BF56930()
{
  unsigned __int8 *v0;

  return *v0 < 3u;
}

uint64_t sub_23BF56940@<X0>(_BYTE *a1@<X8>, double a2@<D0>)
{
  uint64_t result;
  char v4;

  result = DynamicSizeClass.init(width:)(&v4, a2);
  *a1 = v4;
  return result;
}

BOOL sub_23BF56974(double a1, double a2)
{
  unsigned __int8 *v2;

  return a1 > a2 && *v2 > 2u;
}

void DynamicSizeClass.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[17];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6360);
  v15[13] = *(_QWORD *)(v3 - 8);
  v15[14] = v3;
  MEMORY[0x24BDAC7A8](v3);
  v15[12] = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6368);
  v15[10] = *(_QWORD *)(v5 - 8);
  v15[11] = v5;
  MEMORY[0x24BDAC7A8](v5);
  v15[9] = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6370);
  v15[7] = *(_QWORD *)(v7 - 8);
  v15[8] = v7;
  MEMORY[0x24BDAC7A8](v7);
  v15[6] = (char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6378);
  v15[4] = *(_QWORD *)(v9 - 8);
  v15[5] = v9;
  MEMORY[0x24BDAC7A8](v9);
  v15[3] = (char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6380);
  v15[1] = *(_QWORD *)(v11 - 8);
  v15[2] = v11;
  MEMORY[0x24BDAC7A8](v11);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6388);
  MEMORY[0x24BDAC7A8](v12);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6390);
  v15[15] = *(_QWORD *)(v13 - 8);
  v15[16] = v13;
  MEMORY[0x24BDAC7A8](v13);
  v14 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BF56D80();
  sub_23BFF9A18();
  __asm { BR              X9 }
}

uint64_t sub_23BF56BBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v4 - 70) = 0;
  sub_23BF56F18();
  v5 = *(_QWORD *)(v4 - 96);
  sub_23BFF98EC();
  (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 104) + 8))(v1, v5);
}

unint64_t sub_23BF56D80()
{
  unint64_t result;

  result = qword_256AE6398;
  if (!qword_256AE6398)
  {
    result = MEMORY[0x242615198](&unk_23C002050, &type metadata for DynamicSizeClass.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6398);
  }
  return result;
}

unint64_t sub_23BF56DC4()
{
  unint64_t result;

  result = qword_256AE63A0;
  if (!qword_256AE63A0)
  {
    result = MEMORY[0x242615198](&unk_23C002000, &type metadata for DynamicSizeClass.ExtraLargeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE63A0);
  }
  return result;
}

unint64_t sub_23BF56E08()
{
  unint64_t result;

  result = qword_256AE63A8;
  if (!qword_256AE63A8)
  {
    result = MEMORY[0x242615198](&unk_23C001FB0, &type metadata for DynamicSizeClass.LargeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE63A8);
  }
  return result;
}

unint64_t sub_23BF56E4C()
{
  unint64_t result;

  result = qword_256AE63B0;
  if (!qword_256AE63B0)
  {
    result = MEMORY[0x242615198](&unk_23C001F60, &type metadata for DynamicSizeClass.MediumCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE63B0);
  }
  return result;
}

unint64_t sub_23BF56E90()
{
  unint64_t result;

  result = qword_256AE63B8;
  if (!qword_256AE63B8)
  {
    result = MEMORY[0x242615198](&unk_23C001F10, &type metadata for DynamicSizeClass.RegularCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE63B8);
  }
  return result;
}

unint64_t sub_23BF56ED4()
{
  unint64_t result;

  result = qword_256AE63C0;
  if (!qword_256AE63C0)
  {
    result = MEMORY[0x242615198](&unk_23C001EC0, &type metadata for DynamicSizeClass.SmallCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE63C0);
  }
  return result;
}

unint64_t sub_23BF56F18()
{
  unint64_t result;

  result = qword_256AE63C8;
  if (!qword_256AE63C8)
  {
    result = MEMORY[0x242615198](&unk_23C001E70, &type metadata for DynamicSizeClass.ExtraSmallCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE63C8);
  }
  return result;
}

uint64_t DynamicSizeClass.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD v29[4];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;

  v46 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE63D0);
  v31 = *(_QWORD *)(v3 - 8);
  v32 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v45 = (char *)v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE63D8);
  v37 = *(_QWORD *)(v44 - 8);
  MEMORY[0x24BDAC7A8](v44);
  v43 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE63E0);
  v38 = *(_QWORD *)(v6 - 8);
  v39 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v42 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE63E8);
  v35 = *(_QWORD *)(v8 - 8);
  v36 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v41 = (char *)v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE63F0);
  v33 = *(_QWORD *)(v10 - 8);
  v34 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v40 = (char *)v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE63F8);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6400);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = a1[3];
  v47 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v20);
  sub_23BF56D80();
  v21 = v48;
  sub_23BFF9A0C();
  if (!v21)
  {
    v29[3] = v15;
    v29[1] = v13;
    v29[2] = v12;
    v30 = v17;
    v48 = v16;
    v22 = v19;
    v23 = sub_23BFF98D4();
    if (*(_QWORD *)(v23 + 16) == 1)
    {
      v29[0] = v23;
      __asm { BR              X9 }
    }
    v24 = sub_23BFF9784();
    swift_allocError();
    v26 = v25;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3978);
    *v26 = &type metadata for DynamicSizeClass;
    v27 = v48;
    sub_23BFF9874();
    sub_23BFF9778();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v26, *MEMORY[0x24BEE26D0], v24);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v22, v27);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
}

void sub_23BF57344()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  v6 = v0;
  *(_BYTE *)(v5 - 69) = 1;
  sub_23BF56ED4();
  v7 = *(_QWORD *)(v5 - 160);
  v8 = *(_QWORD *)(v5 - 96);
  sub_23BFF9868();
  if (!v2)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 216) + 8))(v7, *(_QWORD *)(v5 - 208));
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v8);
    *v3 = v6;
    JUMPOUT(0x23BF5731CLL);
  }
  swift_bridgeObjectRelease();
  JUMPOUT(0x23BF57314);
}

uint64_t sub_23BF57590@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return DynamicSizeClass.init(from:)(a1, a2);
}

void sub_23BF575A4(_QWORD *a1)
{
  DynamicSizeClass.encode(to:)(a1);
}

uint64_t DynamicSizeClass.hash(into:)()
{
  return sub_23BFF99DC();
}

uint64_t DynamicSizeClass.hashValue.getter()
{
  sub_23BFF99D0();
  sub_23BFF99DC();
  return sub_23BFF9A00();
}

unint64_t sub_23BF57624(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_23BF57658();
  a1[2] = sub_23BF5769C();
  result = sub_23BF576E0();
  a1[3] = result;
  return result;
}

unint64_t sub_23BF57658()
{
  unint64_t result;

  result = qword_256AE6408;
  if (!qword_256AE6408)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for DynamicSizeClass, &type metadata for DynamicSizeClass);
    atomic_store(result, (unint64_t *)&qword_256AE6408);
  }
  return result;
}

unint64_t sub_23BF5769C()
{
  unint64_t result;

  result = qword_256AE6410;
  if (!qword_256AE6410)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for DynamicSizeClass, &type metadata for DynamicSizeClass);
    atomic_store(result, (unint64_t *)&qword_256AE6410);
  }
  return result;
}

unint64_t sub_23BF576E0()
{
  unint64_t result;

  result = qword_256AE6418;
  if (!qword_256AE6418)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for DynamicSizeClass, &type metadata for DynamicSizeClass);
    atomic_store(result, (unint64_t *)&qword_256AE6418);
  }
  return result;
}

unint64_t sub_23BF57728()
{
  unint64_t result;

  result = qword_256AE6420;
  if (!qword_256AE6420)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for DynamicSizeClass, &type metadata for DynamicSizeClass);
    atomic_store(result, (unint64_t *)&qword_256AE6420);
  }
  return result;
}

ValueMetadata *type metadata accessor for DynamicSizeClass()
{
  return &type metadata for DynamicSizeClass;
}

uint64_t _s15FitnessCanvasUI16DynamicSizeClassOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s15FitnessCanvasUI16DynamicSizeClassOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_23BF57860 + 4 * byte_23C001A17[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_23BF57894 + 4 * byte_23C001A12[v4]))();
}

uint64_t sub_23BF57894(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BF5789C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BF578A4);
  return result;
}

uint64_t sub_23BF578B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BF578B8);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_23BF578BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BF578C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DynamicSizeClass.CodingKeys()
{
  return &type metadata for DynamicSizeClass.CodingKeys;
}

ValueMetadata *type metadata accessor for DynamicSizeClass.ExtraSmallCodingKeys()
{
  return &type metadata for DynamicSizeClass.ExtraSmallCodingKeys;
}

ValueMetadata *type metadata accessor for DynamicSizeClass.SmallCodingKeys()
{
  return &type metadata for DynamicSizeClass.SmallCodingKeys;
}

ValueMetadata *type metadata accessor for DynamicSizeClass.RegularCodingKeys()
{
  return &type metadata for DynamicSizeClass.RegularCodingKeys;
}

ValueMetadata *type metadata accessor for DynamicSizeClass.MediumCodingKeys()
{
  return &type metadata for DynamicSizeClass.MediumCodingKeys;
}

ValueMetadata *type metadata accessor for DynamicSizeClass.LargeCodingKeys()
{
  return &type metadata for DynamicSizeClass.LargeCodingKeys;
}

ValueMetadata *type metadata accessor for DynamicSizeClass.ExtraLargeCodingKeys()
{
  return &type metadata for DynamicSizeClass.ExtraLargeCodingKeys;
}

unint64_t sub_23BF57944()
{
  unint64_t result;

  result = qword_256AE6428;
  if (!qword_256AE6428)
  {
    result = MEMORY[0x242615198](&unk_23C001E48, &type metadata for DynamicSizeClass.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6428);
  }
  return result;
}

unint64_t sub_23BF5798C()
{
  unint64_t result;

  result = qword_256AE6430;
  if (!qword_256AE6430)
  {
    result = MEMORY[0x242615198](&unk_23C001D68, &type metadata for DynamicSizeClass.ExtraSmallCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6430);
  }
  return result;
}

unint64_t sub_23BF579D4()
{
  unint64_t result;

  result = qword_256AE6438;
  if (!qword_256AE6438)
  {
    result = MEMORY[0x242615198](&unk_23C001D90, &type metadata for DynamicSizeClass.ExtraSmallCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6438);
  }
  return result;
}

unint64_t sub_23BF57A1C()
{
  unint64_t result;

  result = qword_256AE6440;
  if (!qword_256AE6440)
  {
    result = MEMORY[0x242615198](&unk_23C001D18, &type metadata for DynamicSizeClass.SmallCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6440);
  }
  return result;
}

unint64_t sub_23BF57A64()
{
  unint64_t result;

  result = qword_256AE6448;
  if (!qword_256AE6448)
  {
    result = MEMORY[0x242615198](&unk_23C001D40, &type metadata for DynamicSizeClass.SmallCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6448);
  }
  return result;
}

unint64_t sub_23BF57AAC()
{
  unint64_t result;

  result = qword_256AE6450;
  if (!qword_256AE6450)
  {
    result = MEMORY[0x242615198](&unk_23C001CC8, &type metadata for DynamicSizeClass.RegularCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6450);
  }
  return result;
}

unint64_t sub_23BF57AF4()
{
  unint64_t result;

  result = qword_256AE6458;
  if (!qword_256AE6458)
  {
    result = MEMORY[0x242615198](&unk_23C001CF0, &type metadata for DynamicSizeClass.RegularCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6458);
  }
  return result;
}

unint64_t sub_23BF57B3C()
{
  unint64_t result;

  result = qword_256AE6460;
  if (!qword_256AE6460)
  {
    result = MEMORY[0x242615198](&unk_23C001C78, &type metadata for DynamicSizeClass.MediumCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6460);
  }
  return result;
}

unint64_t sub_23BF57B84()
{
  unint64_t result;

  result = qword_256AE6468;
  if (!qword_256AE6468)
  {
    result = MEMORY[0x242615198](&unk_23C001CA0, &type metadata for DynamicSizeClass.MediumCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6468);
  }
  return result;
}

unint64_t sub_23BF57BCC()
{
  unint64_t result;

  result = qword_256AE6470;
  if (!qword_256AE6470)
  {
    result = MEMORY[0x242615198](&unk_23C001C28, &type metadata for DynamicSizeClass.LargeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6470);
  }
  return result;
}

unint64_t sub_23BF57C14()
{
  unint64_t result;

  result = qword_256AE6478;
  if (!qword_256AE6478)
  {
    result = MEMORY[0x242615198](&unk_23C001C50, &type metadata for DynamicSizeClass.LargeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6478);
  }
  return result;
}

unint64_t sub_23BF57C5C()
{
  unint64_t result;

  result = qword_256AE6480;
  if (!qword_256AE6480)
  {
    result = MEMORY[0x242615198](&unk_23C001BD8, &type metadata for DynamicSizeClass.ExtraLargeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6480);
  }
  return result;
}

unint64_t sub_23BF57CA4()
{
  unint64_t result;

  result = qword_256AE6488;
  if (!qword_256AE6488)
  {
    result = MEMORY[0x242615198](&unk_23C001C00, &type metadata for DynamicSizeClass.ExtraLargeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6488);
  }
  return result;
}

unint64_t sub_23BF57CEC()
{
  unint64_t result;

  result = qword_256AE6490;
  if (!qword_256AE6490)
  {
    result = MEMORY[0x242615198](&unk_23C001DB8, &type metadata for DynamicSizeClass.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6490);
  }
  return result;
}

unint64_t sub_23BF57D34()
{
  unint64_t result;

  result = qword_256AE6498;
  if (!qword_256AE6498)
  {
    result = MEMORY[0x242615198](&unk_23C001DE0, &type metadata for DynamicSizeClass.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6498);
  }
  return result;
}

uint64_t sub_23BF57D78(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0x616D536172747865 && a2 == 0xEA00000000006C6CLL || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C6C616D73 && a2 == 0xE500000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x72616C75676572 && a2 == 0xE700000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6D756964656DLL && a2 == 0xE600000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x656772616CLL && a2 == 0xE500000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x72614C6172747865 && a2 == 0xEA00000000006567)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v5 = sub_23BFF9964();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

void LazyCanvasItemDescriptor.transformed(with:missingPlaceholders:)(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[21];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v13[20] = a4;
  v13[7] = a2;
  v13[13] = a1;
  v17 = a3[6];
  v5 = sub_23BFF96A0();
  MEMORY[0x24BDAC7A8](v5);
  v13[11] = (char *)v13 - v6;
  v7 = sub_23BFF96A0();
  MEMORY[0x24BDAC7A8](v7);
  v13[10] = (char *)v13 - v8;
  v9 = a3[2];
  v10 = a3[3];
  v12 = a3[7];
  v11 = a3[8];
  v15 = a3[9];
  v16 = v11;
  v14 = a3[15];
  v18 = v9;
  v19 = v10;
  v20 = v12;
  v21 = v11;
  v22 = v15;
  v23 = v14;
  type metadata accessor for CanvasItemContent();
}

void sub_23BF580D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  MEMORY[0x24BDAC7A8](a1);
  v9[18] = (char *)&a9 - v15;
  v16 = v10[5];
  v9[1] = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v9[16] = v12;
  v9[17] = (char *)&a9 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = v10[10];
  v20 = v10[11];
  v21 = v10[12];
  v22 = v10[13];
  v23 = v10[14];
  v9[57] = v12;
  v9[58] = v13;
  v9[15] = v13;
  v9[8] = v14;
  v9[9] = v11;
  v9[59] = v11;
  v9[60] = v16;
  v9[61] = v9[24];
  v9[62] = v14;
  v24 = v9[22];
  v9[63] = v9[23];
  v9[64] = v24;
  v9[6] = v19;
  v9[65] = v19;
  v9[66] = v20;
  v9[67] = v21;
  v9[68] = v22;
  v9[2] = v23;
  v9[69] = v23;
  v9[70] = v9[21];
  type metadata accessor for CanvasItemDescriptor();
}

void sub_23BF58194()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = sub_23BFF96A0();
  MEMORY[0x24BDAC7A8](v5);
  v0[14] = v1;
  v0[57] = v1;
  v0[58] = v2;
  v0[4] = v3;
  v0[5] = v2;
  v0[59] = v3;
  v0[60] = v4;
  v0[3] = v4;
  type metadata accessor for CanvasItemPlaceholder();
}

uint64_t sub_23BF581F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v20;

  *(_QWORD *)(v1 + 96) = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v20 - v8;
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v14 + 16))(v13, *(_QWORD *)(v1 + 152), v2, v11);
  if (swift_getEnumCaseMultiPayload() != 1)
    return (*(uint64_t (**)(_QWORD, char *, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(*(_QWORD *)(v1 + 160), v13, v3);
  *(_QWORD *)v1 = v5;
  *(_QWORD *)(v1 + 152) = v4;
  v15 = *(_QWORD *)(v1 + 96);
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v9, v13, a1);
  v16 = MEMORY[0x242615198](&protocol conformance descriptor for CanvasItemPlaceholder<A>, a1);
  MEMORY[0x242614700](v9, *(_QWORD *)(v1 + 104), a1, v3, v16);
  v17 = *(_QWORD *)(v3 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v6, 1, v3) == 1)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v1 + 8))(v6, *(_QWORD *)(v1 + 152));
    if ((sub_23BFF95A4() & 1) != 0)
      v18 = &unk_250CE8CA8;
    else
      v18 = &unk_250CE8CD0;
    *(_QWORD *)(v1 + 152) = sub_23BF584A0((uint64_t)v18);
    (*(void (**)(_QWORD, char *, _QWORD))(*(_QWORD *)(v1 + 8) + 16))(*(_QWORD *)(v1 + 136), v9, *(_QWORD *)(v1 + 112));
    sub_23BEA44DC((__int128 *)&v9[*(int *)(a1 + 52)], v1 + 456);
    sub_23BEA44DC((__int128 *)(v1 + 456), v1 + 200);
    LazyCanvasItemContent.transformed<A, B, C>()();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v9, a1);
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(v1 + 72) - 8) + 56))(*(_QWORD *)(v1 + 80), 1, 1, *(_QWORD *)(v1 + 72));
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(v1 + 192) - 8) + 56))(*(_QWORD *)(v1 + 88), 1, 1, *(_QWORD *)(v1 + 192));
    CanvasItemDescriptor.init(identifier:content:contextMenu:metrics:redactionReasons:)(*(_QWORD *)(v1 + 136), *(_QWORD *)(v1 + 160), *(_QWORD *)(v1 + 112));
  }
  (*(void (**)(char *, uint64_t))(v15 + 8))(v9, a1);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v17 + 32))(*(_QWORD *)(v1 + 160), v6, v3);
}

uint64_t sub_23BF584A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AE64A0);
    v3 = sub_23BFF9724();
    v4 = 0;
    v5 = v3 + 56;
    v6 = a1 + 32;
    while (1)
    {
      v7 = *(unsigned __int8 *)(v6 + v4);
      sub_23BFF99D0();
      sub_23BFF99DC();
      result = sub_23BFF9A00();
      v9 = -1 << *(_BYTE *)(v3 + 32);
      v10 = result & ~v9;
      v11 = v10 >> 6;
      v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
      v13 = 1 << v10;
      v14 = *(_QWORD *)(v3 + 48);
      if (((1 << v10) & v12) != 0)
      {
        if (*(unsigned __int8 *)(v14 + v10) == v7)
          goto LABEL_3;
        v15 = ~v9;
        while (1)
        {
          v10 = (v10 + 1) & v15;
          v11 = v10 >> 6;
          v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
          v13 = 1 << v10;
          if ((v12 & (1 << v10)) == 0)
            break;
          if (*(unsigned __int8 *)(v14 + v10) == v7)
            goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v11) = v13 | v12;
      *(_BYTE *)(v14 + v10) = v7;
      v16 = *(_QWORD *)(v3 + 16);
      v17 = __OFADD__(v16, 1);
      v18 = v16 + 1;
      if (v17)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v18;
LABEL_3:
      if (++v4 == v1)
        return v3;
    }
  }
  return MEMORY[0x24BEE4B08];
}

uint64_t sub_23BF585E0()
{
  uint64_t v0;

  v0 = sub_23BFF83D4();
  __swift_allocate_value_buffer(v0, qword_256B02400);
  __swift_project_value_buffer(v0, (uint64_t)qword_256B02400);
  return sub_23BFF83C8();
}

uint64_t sub_23BF58654@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t AssociatedConformanceWitness;
  uint64_t inited;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(uint64_t, uint64_t);
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD v119[2];
  uint64_t v120;
  uint64_t v121;

  v103 = a3;
  v90 = a2;
  v116 = a5;
  v118 = a12;
  v109 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v108 = (char *)&v88 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v107 = (uint64_t)&v88 - v15;
  v16 = sub_23BFF92E0();
  v100 = *(_QWORD *)(v16 - 8);
  v101 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v99 = (char *)&v88 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_23BFF928C();
  MEMORY[0x24BDAC7A8](v18);
  v95 = (char *)&v88 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = a7;
  v91 = sub_23BFF96A0();
  v106 = *(_QWORD *)(v91 - 8);
  MEMORY[0x24BDAC7A8](v91);
  v105 = (char *)&v88 - v20;
  v21 = sub_23BFF92A4();
  MEMORY[0x24BDAC7A8](v21);
  v102 = (char *)&v88 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE64A8);
  v24 = MEMORY[0x24BDAC7A8](v23);
  v94 = (char *)&v88 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = a4;
  v121 = a10;
  v115 = a10;
  v26 = MEMORY[0x24261512C](0, &v120, MEMORY[0x24BEC6710], 0, v24);
  v96 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v98 = (uint64_t)&v88 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v28);
  v93 = (char *)&v88 - v29;
  MEMORY[0x24BDAC7A8](v30);
  v97 = (uint64_t)&v88 - v31;
  v104 = sub_23BFF96A0();
  v32 = *(_QWORD *)(v104 - 8);
  MEMORY[0x24BDAC7A8](v104);
  v34 = (char *)&v88 - v33;
  MEMORY[0x24BDAC7A8](v35);
  v37 = (char *)&v88 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = v26;
  v110 = a4;
  v39 = v38;
  v40 = sub_23BFF8968();
  v112 = *(_QWORD *)(v40 - 8);
  v41 = MEMORY[0x24BDAC7A8](v40);
  v111 = (char *)&v88 - v42;
  v43 = v118;
  (*(void (**)(char *, __n128))(v118 + 176))(a9, v41);
  v44 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v39 + 48))(v34, 1, a6);
  v117 = v40;
  if (v44 == 1)
  {
    (*(void (**)(char *, uint64_t))(v32 + 8))(v34, v104);
LABEL_5:
    v49 = v115;
    v48 = v116;
    v50 = v113;
    v52 = (uint64_t)v111;
    v51 = v112;
    v54 = v109;
    v53 = v110;
    v56 = v107;
    v55 = (uint64_t)v108;
    sub_23BEA72EC(v114, v110, v107);
    sub_23BEA5C0C(v56, v53, v55);
    v120 = v53;
    v121 = v49;
    swift_getOpaqueTypeConformance2();
    sub_23BEA5CE8(v55, v50, v53);
    v57 = *(void (**)(uint64_t, uint64_t))(v54 + 8);
    v57(v55, v53);
    v57(v56, v53);
    goto LABEL_6;
  }
  v46 = v105;
  v45 = v106;
  (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v37, v34, a6);
  v47 = *(_QWORD *)((*(uint64_t (**)(char *, uint64_t))(v43 + 184))(a9, v43) + 16);
  swift_bridgeObjectRelease();
  if (v47)
  {
    (*(void (**)(char *, uint64_t))(v39 + 8))(v37, a6);
    goto LABEL_5;
  }
  v107 = a6;
  v108 = a9;
  v89 = v37;
  v109 = v39;
  v60 = v46;
  v61 = v91;
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v46, v90, v91);
  v62 = v92;
  v63 = *(_QWORD *)(v92 - 8);
  v64 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v63 + 48))(v46, 1, v92);
  v49 = v115;
  v53 = v110;
  v52 = (uint64_t)v111;
  if (v64 == 1)
  {
    (*(void (**)(char *, uint64_t))(v45 + 8))(v60, v61);
  }
  else
  {
    (*(void (**)(uint64_t))(a11 + 32))(v62);
    (*(void (**)(char *, uint64_t))(v63 + 8))(v60, v62);
  }
  v65 = v107;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(v65, AssociatedConformanceWitness);
  sub_23BFF9298();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE64B0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23C0020A0;
  *(_QWORD *)(inited + 32) = 1701667182;
  *(_QWORD *)(inited + 40) = 0xE400000000000000;
  v68 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 56))(v65, AssociatedConformanceWitness);
  v70 = v69;
  v71 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE64D0);
  *(_QWORD *)(inited + 48) = v68;
  *(_QWORD *)(inited + 56) = v70;
  *(_QWORD *)(inited + 72) = v71;
  strcpy((char *)(inited + 80), "impressionType");
  *(_BYTE *)(inited + 95) = -18;
  v72 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(v65, AssociatedConformanceWitness);
  v73 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(inited + 96) = v72;
  *(_QWORD *)(inited + 104) = v74;
  *(_QWORD *)(inited + 120) = v73;
  *(_QWORD *)(inited + 128) = 0x6973736572706D69;
  v75 = MEMORY[0x24BEE1768];
  *(_QWORD *)(inited + 136) = 0xEF7865646E496E6FLL;
  *(_QWORD *)(inited + 144) = v103;
  *(_QWORD *)(inited + 168) = v75;
  *(_QWORD *)(inited + 176) = 0x657079546469;
  *(_QWORD *)(inited + 184) = 0xE600000000000000;
  v76 = v65;
  v77 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(v65, AssociatedConformanceWitness);
  *(_QWORD *)(inited + 216) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(inited + 192) = v77;
  *(_QWORD *)(inited + 200) = v78;
  sub_23BFD04A8(inited);
  sub_23BFF9280();
  v79 = MEMORY[0x24BEE4AF8];
  sub_23BF5995C(MEMORY[0x24BEE4AF8]);
  sub_23BF5995C(v79);
  v80 = (uint64_t)v94;
  sub_23BFF92B0();
  v81 = sub_23BFF92BC();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 56))(v80, 0, 1, v81);
  v82 = v99;
  sub_23BFF92C8();
  v83 = (uint64_t)v93;
  sub_23BFF8C98();
  (*(void (**)(char *, uint64_t))(v100 + 8))(v82, v101);
  sub_23BE9F3A0(v80, &qword_256AE64A8);
  v120 = v53;
  v121 = v49;
  swift_getOpaqueTypeConformance2();
  v84 = v97;
  v85 = v113;
  sub_23BEA72EC(v83, v113, v97);
  v86 = *(void (**)(uint64_t, uint64_t))(v96 + 8);
  v86(v83, v85);
  v87 = v98;
  sub_23BEA5C0C(v84, v85, v98);
  sub_23BEA5C24(v87, v85);
  v86(v87, v85);
  v86(v84, v85);
  (*(void (**)(char *, uint64_t))(v109 + 8))(v89, v76);
  v48 = v116;
  v51 = v112;
LABEL_6:
  v120 = v53;
  v121 = v49;
  v119[0] = swift_getOpaqueTypeConformance2();
  v119[1] = v49;
  v58 = v117;
  MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v117, v119);
  sub_23BEA5C0C(v52, v58, v48);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v51 + 8))(v52, v58);
}

uint64_t sub_23BF58E78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t);
  uint64_t inited;
  uint64_t AssociatedConformanceWitness;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t);
  _QWORD v73[3];
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  _QWORD v95[2];
  unint64_t v96;
  uint64_t v97;

  v78 = a2;
  v93 = a4;
  v85 = a9;
  v84 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v83 = (uint64_t)v73 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v82 = (uint64_t)v73 - v14;
  v15 = sub_23BFF92E0();
  v80 = *(_QWORD *)(v15 - 8);
  v81 = v15;
  MEMORY[0x24BDAC7A8](v15);
  v79 = (char *)v73 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_23BFF928C();
  MEMORY[0x24BDAC7A8](v17);
  v73[2] = (char *)v73 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_23BFF92A4();
  MEMORY[0x24BDAC7A8](v19);
  v73[1] = (char *)v73 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE64A8);
  v22 = MEMORY[0x24BDAC7A8](v21);
  v74 = (char *)v73 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = a3;
  v97 = a10;
  v92 = a10;
  v24 = MEMORY[0x24261512C](0, &v96, MEMORY[0x24BEC6710], 0, v22);
  v75 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v77 = (char *)v73 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v26);
  v76 = (uint64_t)v73 - v27;
  v28 = sub_23BFF96A0();
  v29 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v31 = (char *)v73 - v30;
  v32 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v94 = (char *)v73 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = v24;
  v86 = a3;
  v35 = sub_23BFF8968();
  v89 = *(_QWORD *)(v35 - 8);
  v90 = v35;
  v36 = MEMORY[0x24BDAC7A8](v35);
  v87 = (char *)v73 - v37;
  v38 = v85;
  (*(void (**)(__n128))(a11 + 192))(v36);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v31, 1, a5) == 1)
  {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v31, v28);
  }
  else
  {
    v39 = v94;
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v94, v31, a5);
    v40 = *(_QWORD *)((*(uint64_t (**)(uint64_t, uint64_t))(a11 + 200))(v38, a11) + 16);
    swift_bridgeObjectRelease();
    if (!v40)
    {
      v84 = v32;
      __swift_instantiateConcreteTypeFromMangledName(&qword_256AE64B0);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_23C0020A0;
      *(_QWORD *)(inited + 32) = 1701667182;
      *(_QWORD *)(inited + 40) = 0xE400000000000000;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v53 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 64))(a5, AssociatedConformanceWitness);
      v54 = MEMORY[0x24BEE0D00];
      *(_QWORD *)(inited + 48) = v53;
      *(_QWORD *)(inited + 56) = v55;
      *(_QWORD *)(inited + 72) = v54;
      strcpy((char *)(inited + 80), "impressionType");
      *(_BYTE *)(inited + 95) = -18;
      *(_QWORD *)(inited + 96) = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(a5, AssociatedConformanceWitness);
      *(_QWORD *)(inited + 104) = v56;
      *(_QWORD *)(inited + 120) = v54;
      *(_QWORD *)(inited + 128) = 0x6973736572706D69;
      v57 = MEMORY[0x24BEE1768];
      v58 = v78;
      *(_QWORD *)(inited + 136) = 0xEF7865646E496E6FLL;
      *(_QWORD *)(inited + 144) = v58;
      *(_QWORD *)(inited + 168) = v57;
      *(_QWORD *)(inited + 176) = 0x657079546469;
      *(_QWORD *)(inited + 184) = 0xE600000000000000;
      v59 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(a5, AssociatedConformanceWitness);
      *(_QWORD *)(inited + 216) = v54;
      *(_QWORD *)(inited + 192) = v59;
      *(_QWORD *)(inited + 200) = v60;
      v61 = sub_23BFD04A8(inited);
      v62 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 56))(a5, AssociatedConformanceWitness);
      v63 = sub_23BF595F4(v62);
      swift_bridgeObjectRelease();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v96 = v61;
      sub_23BF59C6C(v63, (uint64_t)sub_23BF59C2C, 0, isUniquelyReferenced_nonNull_native, (uint64_t)&v96);
      v45 = v86;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(a5, AssociatedConformanceWitness);
      sub_23BFF9298();
      sub_23BFF9280();
      v65 = MEMORY[0x24BEE4AF8];
      sub_23BF5995C(MEMORY[0x24BEE4AF8]);
      sub_23BF5995C(v65);
      v66 = (uint64_t)v74;
      sub_23BFF92B0();
      v67 = sub_23BFF92BC();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 56))(v66, 0, 1, v67);
      v68 = v79;
      sub_23BFF92D4();
      v69 = (uint64_t)v77;
      v42 = v92;
      sub_23BFF8C98();
      (*(void (**)(char *, uint64_t))(v80 + 8))(v68, v81);
      sub_23BE9F3A0(v66, &qword_256AE64A8);
      v96 = v45;
      v97 = v42;
      swift_getOpaqueTypeConformance2();
      v70 = v76;
      v71 = v88;
      sub_23BEA72EC(v69, v88, v76);
      v72 = *(void (**)(uint64_t, uint64_t))(v75 + 8);
      v72(v69, v71);
      sub_23BEA5C0C(v70, v71, v69);
      v48 = (uint64_t)v87;
      sub_23BEA5C24(v69, v71);
      v72(v69, v71);
      v72(v70, v71);
      (*(void (**)(char *, uint64_t))(v84 + 8))(v94, a5);
      v41 = v93;
      v44 = v89;
      v43 = v90;
      goto LABEL_6;
    }
    (*(void (**)(char *, uint64_t))(v32 + 8))(v39, a5);
  }
  v42 = v92;
  v41 = v93;
  v44 = v89;
  v43 = v90;
  v45 = v86;
  v46 = v82;
  sub_23BEA72EC(v91, v86, v82);
  v47 = v83;
  sub_23BEA5C0C(v46, v45, v83);
  v96 = v45;
  v97 = v42;
  swift_getOpaqueTypeConformance2();
  v48 = (uint64_t)v87;
  sub_23BEA5CE8(v47, v88, v45);
  v49 = *(void (**)(uint64_t, uint64_t))(v84 + 8);
  v49(v47, v45);
  v49(v46, v45);
LABEL_6:
  v96 = v45;
  v97 = v42;
  v95[0] = swift_getOpaqueTypeConformance2();
  v95[1] = v42;
  MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v43, v95);
  sub_23BEA5C0C(v48, v43, v41);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v44 + 8))(v48, v43);
}

unint64_t sub_23BF595F4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t result;
  int64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _OWORD *v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  uint64_t *v24;
  unint64_t v25;
  char v26;
  uint64_t *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  _OWORD v40[2];

  v1 = a1;
  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AE61A0);
    v2 = (_QWORD *)sub_23BFF9850();
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
  }
  v32 = v1 + 64;
  v3 = -1 << *(_BYTE *)(v1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(v1 + 64);
  v31 = (unint64_t)(63 - v3) >> 6;
  v6 = &v37;
  v7 = &v39;
  result = swift_bridgeObjectRetain();
  i = 0;
  v10 = MEMORY[0x24BEE4AD8] + 8;
  v11 = MEMORY[0x24BEE0D00];
  if (v5)
    goto LABEL_10;
LABEL_11:
  v20 = i + 1;
  if (__OFADD__(i, 1))
    goto LABEL_35;
  if (v20 >= v31)
    goto LABEL_32;
  v21 = *(_QWORD *)(v32 + 8 * v20);
  v22 = i + 1;
  if (!v21)
  {
    v22 = i + 2;
    if (i + 2 >= v31)
      goto LABEL_32;
    v21 = *(_QWORD *)(v32 + 8 * v22);
    if (!v21)
    {
      v22 = i + 3;
      if (i + 3 >= v31)
        goto LABEL_32;
      v21 = *(_QWORD *)(v32 + 8 * v22);
      if (!v21)
      {
        v22 = i + 4;
        if (i + 4 >= v31)
          goto LABEL_32;
        v21 = *(_QWORD *)(v32 + 8 * v22);
        if (!v21)
        {
          v23 = i + 5;
          if (i + 5 < v31)
          {
            v21 = *(_QWORD *)(v32 + 8 * v23);
            if (v21)
            {
              v22 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              v22 = v23 + 1;
              if (__OFADD__(v23, 1))
                goto LABEL_36;
              if (v22 >= v31)
                break;
              v21 = *(_QWORD *)(v32 + 8 * v22);
              ++v23;
              if (v21)
                goto LABEL_26;
            }
          }
LABEL_32:
          sub_23BF5A1E4();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  v34 = (v21 - 1) & v21;
  v19 = __clz(__rbit64(v21)) + (v22 << 6);
  for (i = v22; ; v19 = __clz(__rbit64(v5)) | (i << 6))
  {
    v24 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v19);
    v35 = *v24;
    v36 = v24[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    sub_23BF5131C(v6, v7);
    sub_23BF5131C(v7, v40);
    sub_23BF5131C(v40, &v38);
    result = sub_23BF50330(v35, v36);
    v25 = result;
    if ((v26 & 1) != 0)
    {
      v33 = i;
      v12 = v7;
      v13 = v6;
      v14 = v1;
      v15 = v11;
      v16 = v10;
      v17 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *v17 = v35;
      v17[1] = v36;
      v10 = v16;
      v11 = v15;
      v1 = v14;
      v6 = v13;
      v7 = v12;
      i = v33;
      v18 = (_OWORD *)(v2[7] + 32 * v25);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
      result = (unint64_t)sub_23BF5131C(&v38, v18);
      v5 = v34;
      if (!v34)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (v2[2] >= v2[3])
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v27 = (uint64_t *)(v2[6] + 16 * result);
    *v27 = v35;
    v27[1] = v36;
    result = (unint64_t)sub_23BF5131C(&v38, (_OWORD *)(v2[7] + 32 * result));
    v28 = v2[2];
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (v29)
      goto LABEL_34;
    v2[2] = v30;
    v5 = v34;
    if (!v34)
      goto LABEL_11;
LABEL_10:
    v34 = (v5 - 1) & v5;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

unint64_t sub_23BF5995C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE61A0);
  v2 = sub_23BFF9850();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_23BF59FC0(v6, (uint64_t)&v15);
    v7 = v15;
    v8 = v16;
    result = sub_23BF59A84(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)sub_23BF5131C(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_23BF59A84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23BFF99D0();
  sub_23BFF93F4();
  v4 = sub_23BFF9A00();
  return sub_23BF59AE8(a1, a2, v4);
}

unint64_t sub_23BF59AE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v15;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  i = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * i);
    if ((*v10 != a1 || v10[1] != a2) && (sub_23BFF9964() & 1) == 0)
    {
      v12 = ~v5;
      i = (i + 1) & v12;
      if (((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
      {
        v13 = (_QWORD *)(v9 + 16 * i);
        if ((*v13 != a1 || v13[1] != a2) && (sub_23BFF9964() & 1) == 0)
        {
          for (i = (i + 1) & v12; ((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v12)
          {
            v15 = (_QWORD *)(v9 + 16 * i);
            if (*v15 == a1 && v15[1] == a2)
              break;
            if ((sub_23BFF9964() & 1) != 0)
              break;
          }
        }
      }
    }
  }
  return i;
}

uint64_t sub_23BF59C2C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v4 = *a1;
  v3 = a1[1];
  sub_23BF50480((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  *a2 = v4;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_23BF59C6C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  _OWORD *v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t i;
  _OWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  char v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t result;
  _OWORD v46[2];
  _OWORD v47[2];
  __int128 v48;
  _OWORD v49[2];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v7 = -1 << *(_BYTE *)(a1 + 32);
  v8 = ~v7;
  v9 = *(_QWORD *)(a1 + 64);
  v10 = -v7;
  v50 = a1;
  v51 = a1 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v52 = v8;
  v53 = 0;
  v54 = v11 & v9;
  v55 = a2;
  v56 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_23BF5A008(&v48);
  v12 = *((_QWORD *)&v48 + 1);
  if (!*((_QWORD *)&v48 + 1))
    goto LABEL_27;
  v13 = v48;
  sub_23BF5131C(v49, v47);
  v14 = *(_QWORD **)a5;
  v16 = sub_23BF50330(v13, v12);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v20 = v15;
  if (v14[3] >= v19)
  {
    if ((a4 & 1) != 0)
    {
      if ((v15 & 1) != 0)
        goto LABEL_12;
    }
    else
    {
      sub_23BF5132C();
      if ((v20 & 1) != 0)
        goto LABEL_12;
    }
LABEL_14:
    v24 = *(_QWORD **)a5;
    *(_QWORD *)(*(_QWORD *)a5 + 8 * (v16 >> 6) + 64) |= 1 << v16;
    v25 = (uint64_t *)(v24[6] + 16 * v16);
    *v25 = v13;
    v25[1] = v12;
    sub_23BF5131C(v47, (_OWORD *)(v24[7] + 32 * v16));
    v26 = v24[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (v27)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    v24[2] = v28;
LABEL_16:
    sub_23BF5A008(&v48);
    for (i = *((_QWORD *)&v48 + 1); *((_QWORD *)&v48 + 1); i = *((_QWORD *)&v48 + 1))
    {
      v31 = v48;
      sub_23BF5131C(v49, v47);
      v32 = *(_QWORD **)a5;
      v34 = sub_23BF50330(v31, i);
      v35 = v32[2];
      v36 = (v33 & 1) == 0;
      v37 = v35 + v36;
      if (__OFADD__(v35, v36))
        goto LABEL_28;
      v38 = v33;
      if (v32[3] < v37)
      {
        sub_23BF5095C(v37, 1);
        v39 = sub_23BF50330(v31, i);
        if ((v38 & 1) != (v40 & 1))
          goto LABEL_30;
        v34 = v39;
      }
      if ((v38 & 1) != 0)
      {
        sub_23BF50480((uint64_t)v47, (uint64_t)v46);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
        swift_bridgeObjectRelease();
        v30 = (_OWORD *)(*(_QWORD *)(*(_QWORD *)a5 + 56) + 32 * v34);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
        sub_23BF5131C(v46, v30);
      }
      else
      {
        v41 = *(_QWORD **)a5;
        *(_QWORD *)(*(_QWORD *)a5 + 8 * (v34 >> 6) + 64) |= 1 << v34;
        v42 = (uint64_t *)(v41[6] + 16 * v34);
        *v42 = v31;
        v42[1] = i;
        sub_23BF5131C(v47, (_OWORD *)(v41[7] + 32 * v34));
        v43 = v41[2];
        v27 = __OFADD__(v43, 1);
        v44 = v43 + 1;
        if (v27)
          goto LABEL_29;
        v41[2] = v44;
      }
      sub_23BF5A008(&v48);
    }
LABEL_27:
    swift_release();
    swift_bridgeObjectRelease();
    sub_23BF5A1E4();
    return swift_release();
  }
  sub_23BF5095C(v19, a4 & 1);
  v21 = sub_23BF50330(v13, v12);
  if ((v20 & 1) == (v22 & 1))
  {
    v16 = v21;
    if ((v20 & 1) == 0)
      goto LABEL_14;
LABEL_12:
    sub_23BF50480((uint64_t)v47, (uint64_t)v46);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
    swift_bridgeObjectRelease();
    v23 = (_OWORD *)(*(_QWORD *)(*(_QWORD *)a5 + 56) + 32 * v16);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
    sub_23BF5131C(v46, v23);
    goto LABEL_16;
  }
LABEL_30:
  result = sub_23BFF997C();
  __break(1u);
  return result;
}

uint64_t sub_23BF59FC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE64B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BF5A008@<X0>(_OWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  void (*v19)(_OWORD *);
  uint64_t result;
  _OWORD v21[3];
  _OWORD v22[3];
  __int128 v23;
  _OWORD v24[2];

  v3 = *v1;
  v4 = v1[1];
  v6 = v1[2];
  v5 = v1[3];
  v7 = v5;
  v8 = v1[4];
  if (v8)
  {
    v9 = (v8 - 1) & v8;
    v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    v11 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v10);
    v13 = *v11;
    v12 = v11[1];
    sub_23BF50480(*(_QWORD *)(v3 + 56) + 32 * v10, (uint64_t)v24);
    *(_QWORD *)&v23 = v13;
    *((_QWORD *)&v23 + 1) = v12;
    swift_bridgeObjectRetain();
    goto LABEL_23;
  }
  v14 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  v15 = (unint64_t)(v6 + 64) >> 6;
  if (v14 < v15)
  {
    v16 = *(_QWORD *)(v4 + 8 * v14);
    if (v16)
    {
LABEL_7:
      v9 = (v16 - 1) & v16;
      v10 = __clz(__rbit64(v16)) + (v14 << 6);
      v7 = v14;
      goto LABEL_3;
    }
    v17 = v5 + 2;
    v7 = v5 + 1;
    if (v5 + 2 < v15)
    {
      v16 = *(_QWORD *)(v4 + 8 * v17);
      if (v16)
      {
LABEL_10:
        v14 = v17;
        goto LABEL_7;
      }
      v7 = v5 + 2;
      if (v5 + 3 < v15)
      {
        v16 = *(_QWORD *)(v4 + 8 * (v5 + 3));
        if (v16)
        {
          v14 = v5 + 3;
          goto LABEL_7;
        }
        v17 = v5 + 4;
        v7 = v5 + 3;
        if (v5 + 4 < v15)
        {
          v16 = *(_QWORD *)(v4 + 8 * v17);
          if (v16)
            goto LABEL_10;
          v14 = v5 + 5;
          v7 = v5 + 4;
          if (v5 + 5 < v15)
          {
            v16 = *(_QWORD *)(v4 + 8 * v14);
            if (v16)
              goto LABEL_7;
            v7 = v15 - 1;
            v18 = v5 + 6;
            while (v15 != v18)
            {
              v16 = *(_QWORD *)(v4 + 8 * v18++);
              if (v16)
              {
                v14 = v18 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  v9 = 0;
  memset(v24, 0, sizeof(v24));
  v23 = 0u;
LABEL_23:
  *v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  v19 = (void (*)(_OWORD *))v1[5];
  result = sub_23BF5A1EC((uint64_t)&v23, (uint64_t)v22);
  if (*((_QWORD *)&v22[0] + 1))
  {
    v21[0] = v22[0];
    v21[1] = v22[1];
    v21[2] = v22[2];
    v19(v21);
    return sub_23BE9F3A0((uint64_t)v21, &qword_256AE64C8);
  }
  else
  {
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  return result;
}

uint64_t sub_23BF5A1E4()
{
  return swift_release();
}

uint64_t sub_23BF5A1EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE64C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

double ContentMargins.transformed()()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

void CanvasColor.init(red:green:blue:alpha:)(double *a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  *a1 = a5;
  a1[1] = a4;
  a1[2] = a3;
  a1[3] = a2;
}

double CanvasColor.alpha.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

double CanvasColor.blue.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

double CanvasColor.green.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

double CanvasColor.red.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

uint64_t sub_23BF5A270()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23BF5A29C
                                                            + 4 * asc_23C0020E0[*v0]))(0x6168706C61, 0xE500000000000000);
}

uint64_t sub_23BF5A29C()
{
  return 1702194274;
}

uint64_t sub_23BF5A2AC()
{
  return 0x6E65657267;
}

uint64_t sub_23BF5A2BC()
{
  return 6579570;
}

uint64_t sub_23BF5A2CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BF5AAB0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BF5A2F0()
{
  sub_23BF5A870();
  return sub_23BFF9A30();
}

uint64_t sub_23BF5A318()
{
  sub_23BF5A870();
  return sub_23BFF9A3C();
}

uint64_t CanvasColor.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE64D8);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v8 = v1[1];
  v11 = v1[2];
  v10 = v1[3];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BF5A870();
  sub_23BFF9A18();
  v14 = v9;
  HIBYTE(v13) = 0;
  sub_23BEBFC1C();
  sub_23BFF9940();
  if (!v2)
  {
    v14 = v8;
    HIBYTE(v13) = 1;
    sub_23BFF9940();
    v14 = v11;
    HIBYTE(v13) = 2;
    sub_23BFF9940();
    v14 = v10;
    HIBYTE(v13) = 3;
    sub_23BFF9940();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t CanvasColor.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE64E8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BF5A870();
  sub_23BFF9A0C();
  if (!v2)
  {
    HIBYTE(v14) = 0;
    sub_23BEC0384();
    sub_23BFF98C8();
    v9 = v15;
    HIBYTE(v14) = 1;
    sub_23BFF98C8();
    v10 = v15;
    HIBYTE(v14) = 2;
    sub_23BFF98C8();
    v12 = v15;
    HIBYTE(v14) = 3;
    sub_23BFF98C8();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v13 = v15;
    *a2 = v9;
    a2[1] = v10;
    a2[2] = v12;
    a2[3] = v13;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_23BF5A708@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return CanvasColor.init(from:)(a1, a2);
}

uint64_t sub_23BF5A71C(_QWORD *a1)
{
  return CanvasColor.encode(to:)(a1);
}

uint64_t CanvasColor.hash(into:)()
{
  sub_23BFF99F4();
  sub_23BFF99F4();
  sub_23BFF99F4();
  return sub_23BFF99F4();
}

uint64_t CanvasColor.hashValue.getter()
{
  sub_23BFF99D0();
  CanvasColor.hash(into:)();
  return sub_23BFF9A00();
}

uint64_t sub_23BF5A7E0()
{
  sub_23BFF99D0();
  CanvasColor.hash(into:)();
  return sub_23BFF9A00();
}

uint64_t sub_23BF5A82C()
{
  sub_23BFF99D0();
  CanvasColor.hash(into:)();
  return sub_23BFF9A00();
}

unint64_t sub_23BF5A870()
{
  unint64_t result;

  result = qword_256AE64E0;
  if (!qword_256AE64E0)
  {
    result = MEMORY[0x242615198](&unk_23C00228C, &type metadata for CanvasColor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE64E0);
  }
  return result;
}

unint64_t sub_23BF5A8B8()
{
  unint64_t result;

  result = qword_256AE64F0;
  if (!qword_256AE64F0)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for CanvasColor, &type metadata for CanvasColor);
    atomic_store(result, (unint64_t *)&qword_256AE64F0);
  }
  return result;
}

ValueMetadata *type metadata accessor for CanvasColor()
{
  return &type metadata for CanvasColor;
}

uint64_t storeEnumTagSinglePayload for CanvasColor.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23BF5A958 + 4 * byte_23C0020E9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23BF5A98C + 4 * byte_23C0020E4[v4]))();
}

uint64_t sub_23BF5A98C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BF5A994(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BF5A99CLL);
  return result;
}

uint64_t sub_23BF5A9A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BF5A9B0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23BF5A9B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BF5A9BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CanvasColor.CodingKeys()
{
  return &type metadata for CanvasColor.CodingKeys;
}

unint64_t sub_23BF5A9DC()
{
  unint64_t result;

  result = qword_256AE64F8;
  if (!qword_256AE64F8)
  {
    result = MEMORY[0x242615198](&unk_23C002264, &type metadata for CanvasColor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE64F8);
  }
  return result;
}

unint64_t sub_23BF5AA24()
{
  unint64_t result;

  result = qword_256AE6500;
  if (!qword_256AE6500)
  {
    result = MEMORY[0x242615198](&unk_23C0021D4, &type metadata for CanvasColor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6500);
  }
  return result;
}

unint64_t sub_23BF5AA6C()
{
  unint64_t result;

  result = qword_256AE6508;
  if (!qword_256AE6508)
  {
    result = MEMORY[0x242615198](&unk_23C0021FC, &type metadata for CanvasColor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6508);
  }
  return result;
}

uint64_t sub_23BF5AAB0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6168706C61 && a2 == 0xE500000000000000;
  if (v2 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1702194274 && a2 == 0xE400000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E65657267 && a2 == 0xE500000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 6579570 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_23BFF9964();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

void OrthogonalView.init(header:items:footer:metrics:contentMargins:densityFactor:dynamicTypeSize:sizeClass:artworkViewBuilder:actionButtonViewBuilder:contextMenuViewModifierBuilder:customItemViewBuilder:sectionHeaderSubtitleViewBuilder:onItemAppearedAtIndex:onItemDisappearedAtIndex:onItemSelectedWithIdentifier:)()
{
  type metadata accessor for OrthogonalView();
}

void sub_23BF5AD9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39)
{
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v41 = v39 + *(int *)(a1 + 272);
  *(_QWORD *)(v40 - 136) = 0;
  *(_BYTE *)(v40 - 128) = 1;
  __swift_instantiateConcreteTypeFromMangledName(qword_256AE6600);
  sub_23BFF8FEC();
  *(_QWORD *)v41 = a37;
  *(_BYTE *)(v41 + 8) = a38;
  *(_QWORD *)(v41 + 16) = a39;
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CanvasSectionHeader();
}

uint64_t sub_23BF5AE1C()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t result;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v6 = sub_23BFF96A0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v0, v26, v6);
  *(_QWORD *)(v0 + v2[53]) = v27;
  *(_BYTE *)(v0 + v2[54]) = v20;
  v7 = v0 + v2[55];
  v8 = sub_23BFF96A0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v7, v32, v8);
  v9 = (_QWORD *)(v0 + v2[60]);
  *v9 = v21;
  v9[1] = v22;
  v10 = (_QWORD *)(v0 + v2[63]);
  *v10 = v28;
  v10[1] = v29;
  v11 = (_QWORD *)(v0 + v2[61]);
  *v11 = v30;
  v11[1] = v31;
  v12 = v0 + v2[56];
  *(_OWORD *)v12 = v25;
  *(_QWORD *)(v12 + 16) = v3;
  *(_QWORD *)(v12 + 24) = v4;
  v13 = (_QWORD *)(v0 + v2[62]);
  *v13 = v33;
  v13[1] = v34;
  v14 = (_QWORD *)(v0 + v2[64]);
  *v14 = v35;
  v14[1] = v36;
  v15 = (_QWORD *)(v0 + v2[57]);
  *v15 = v23;
  v15[1] = v5;
  v15[2] = v24;
  *(_BYTE *)(v0 + v2[58]) = v38;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v0 + v2[59], v42, v1);
  v17 = (_QWORD *)(v0 + v2[65]);
  *v17 = v37;
  v17[1] = v39;
  v18 = (_QWORD *)(v0 + v2[66]);
  *v18 = v40;
  v18[1] = v41;
  v19 = (_QWORD *)(v0 + v2[67]);
  *v19 = v43;
  v19[1] = v44;
  return result;
}

void type metadata accessor for OrthogonalView()
{
  JUMPOUT(0x2426150F0);
}

uint64_t sub_23BF5AFB0()
{
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE65A8);
  sub_23BFF8FF8();
  return v1;
}

uint64_t sub_23BF5B010()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE65A8);
  return sub_23BFF9004();
}

void OrthogonalView.body.getter(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[64];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v11[51] = a2;
  v15 = a1[14];
  v14 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11[50] = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64);
  v11[48] = *(_QWORD *)(v4 - 8);
  v11[49] = v5;
  MEMORY[0x24BDAC7A8](v4);
  v11[47] = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_23BFF8A04();
  v11[45] = *(_QWORD *)(v7 - 8);
  v11[46] = v7;
  MEMORY[0x24BDAC7A8](v7);
  v11[44] = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3528);
  v9 = a1[3];
  v13 = a1[12];
  v10 = a1[17];
  v12 = a1[22];
  v16 = v9;
  v17 = v13;
  v18 = v10;
  v19 = v12;
  type metadata accessor for CanvasSectionHeaderView();
}

void sub_23BF5B198(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1[59] = a1;
  sub_23BFF8A4C();
  v1[60] = sub_23BFF862C();
  v1[61] = sub_23BFF8968();
  v6 = sub_23BFF96A0();
  v7 = v3[25];
  v1[79] = v7;
  v1[57] = *(_QWORD *)(v7 + 32);
  v1[58] = v6;
  v1[76] = v3[16];
  v1[56] = swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  v1[55] = sub_23BFF94C0();
  v8 = v3[5];
  v9 = v3[18];
  *(_QWORD *)(v5 - 248) = v8;
  *(_QWORD *)(v5 - 240) = v4;
  v1[77] = v8;
  *(_QWORD *)(v5 - 232) = v4;
  *(_QWORD *)(v5 - 224) = v9;
  *(_QWORD *)(v5 - 216) = v2;
  *(_QWORD *)(v5 - 208) = v2;
  type metadata accessor for ActionCardView();
}

void sub_23BF5B264(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1[69] = a1;
  v8 = MEMORY[0x242615198](&unk_23C005608, a1);
  v1[68] = v8;
  *(_QWORD *)(v6 - 248) = a1;
  *(_QWORD *)(v6 - 240) = v8;
  v1[78] = MEMORY[0x24261512C](255, v6 - 248, MEMORY[0x24BDF3948], 0);
  v1[54] = sub_23BFF8ADC();
  v9 = (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088];
  v10 = sub_23BFF862C();
  v11 = sub_23BFF862C();
  v1[53] = v11;
  v12 = sub_23BEA1BB8((unint64_t *)&qword_256AE3908, v9, MEMORY[0x24BDF1078]);
  v1[70] = v12;
  *(_QWORD *)(v6 - 136) = v5;
  *(_QWORD *)(v6 - 128) = v12;
  v13 = MEMORY[0x24BDED308];
  v14 = MEMORY[0x242615198](MEMORY[0x24BDED308], v10, v6 - 136);
  v15 = MEMORY[0x24BDEEC40];
  *(_QWORD *)(v6 - 152) = v14;
  *(_QWORD *)(v6 - 144) = v15;
  v16 = MEMORY[0x242615198](v13, v11, v6 - 152);
  v1[52] = v16;
  *(_QWORD *)(v6 - 248) = v11;
  *(_QWORD *)(v6 - 240) = v16;
  v17 = MEMORY[0x24BDF3100];
  MEMORY[0x24261512C](255, v6 - 248, MEMORY[0x24BDF3100], 0);
  v18 = sub_23BFF862C();
  v1[40] = v18;
  v19 = MEMORY[0x24BDEBEE0];
  *(_QWORD *)(v6 - 168) = v14;
  *(_QWORD *)(v6 - 160) = v19;
  v20 = MEMORY[0x242615198](v13, v18, v6 - 168);
  v1[39] = v20;
  *(_QWORD *)(v6 - 248) = v18;
  *(_QWORD *)(v6 - 240) = v20;
  MEMORY[0x24261512C](255, v6 - 248, v17, 0);
  v1[35] = sub_23BFF8968();
  v1[41] = sub_23BFF8FD4();
  v1[38] = sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3910);
  v1[42] = sub_23BFF8968();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3918);
  v1[43] = sub_23BFF8968();
  v1[27] = sub_23BFF8968();
  v1[62] = v3;
  v21 = v3[8];
  v1[78] = v21;
  v22 = v3[20];
  v1[75] = v22;
  v23 = v3[24];
  v1[72] = v23;
  *(_QWORD *)(v6 - 248) = v1[77];
  *(_QWORD *)(v6 - 240) = v4;
  *(_QWORD *)(v6 - 232) = v4;
  *(_QWORD *)(v6 - 224) = v21;
  *(_QWORD *)(v6 - 216) = v1[74];
  *(_QWORD *)(v6 - 208) = v5;
  *(_QWORD *)(v6 - 200) = v2;
  *(_QWORD *)(v6 - 192) = v2;
  *(_QWORD *)(v6 - 184) = v22;
  *(_QWORD *)(v6 - 176) = v23;
  type metadata accessor for FullWidthStageView();
}

void sub_23BF5B498(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1[37] = a1;
  v8 = MEMORY[0x242615198](&unk_23C0077B8, a1);
  v1[36] = v8;
  *(_QWORD *)(v6 - 248) = a1;
  *(_QWORD *)(v6 - 240) = v8;
  v9 = MEMORY[0x24BDF3948];
  MEMORY[0x24261512C](255, v6 - 248, MEMORY[0x24BDF3948], 0);
  v1[73] = v4;
  v1[63] = v3;
  v11 = type metadata accessor for InfoActionCardView(255, v4, v3, v10);
  v1[34] = v11;
  v12 = MEMORY[0x242615198](&unk_23C007F20, v11);
  v1[33] = v12;
  *(_QWORD *)(v6 - 248) = v11;
  *(_QWORD *)(v6 - 240) = v12;
  MEMORY[0x24261512C](255, v6 - 248, v9, 0);
  v1[32] = sub_23BFF8968();
  v1[12] = sub_23BFF8968();
  v14 = type metadata accessor for LargeBrickView(255, v2, v5, v13);
  v1[31] = v14;
  v15 = MEMORY[0x242615198](&protocol conformance descriptor for LargeBrickView<A>, v14);
  v1[30] = v15;
  *(_QWORD *)(v6 - 248) = v14;
  *(_QWORD *)(v6 - 240) = v15;
  MEMORY[0x24261512C](255, v6 - 248, v9, 0);
  v17 = type metadata accessor for DynamicBrickView(255, v2, v5, v16);
  v1[29] = v17;
  v18 = MEMORY[0x242615198](&protocol conformance descriptor for DynamicBrickView<A>, v17);
  v1[28] = v18;
  *(_QWORD *)(v6 - 248) = v17;
  *(_QWORD *)(v6 - 240) = v18;
  MEMORY[0x24261512C](255, v6 - 248, v9, 0);
  v1[20] = sub_23BFF8968();
  v20 = type metadata accessor for MonogramVerticalStackView(255, v2, v5, v19);
  v1[26] = v20;
  v21 = MEMORY[0x242615198](&unk_23BFFA1F4, v20);
  v1[25] = v21;
  *(_QWORD *)(v6 - 248) = v20;
  *(_QWORD *)(v6 - 240) = v21;
  MEMORY[0x24261512C](255, v6 - 248, v9, 0);
  v1[23] = sub_23BFF8968();
  v1[24] = sub_23BFF8968();
  *v1 = sub_23BFF8968();
  v23 = type metadata accessor for StandardCardView(255, v2, v5, v22);
  v1[22] = v23;
  v24 = MEMORY[0x242615198](&unk_23C007BD0, v23);
  v1[21] = v24;
  *(_QWORD *)(v6 - 248) = v23;
  *(_QWORD *)(v6 - 240) = v24;
  MEMORY[0x24261512C](255, v6 - 248, v9, 0);
  *(_QWORD *)(v6 - 248) = v2;
  *(_QWORD *)(v6 - 240) = v4;
  *(_QWORD *)(v6 - 232) = v5;
  *(_QWORD *)(v6 - 224) = v3;
  type metadata accessor for StandardHorizontalStackView();
}

void sub_23BF5B6DC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t OpaqueTypeConformance2;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t AssociatedConformanceWitness;
  uint64_t v87;

  v1[19] = a1;
  v7 = MEMORY[0x242615198](&unk_23C0008E8, a1);
  v1[18] = v7;
  *(_QWORD *)(v5 - 248) = a1;
  *(_QWORD *)(v5 - 240) = v7;
  MEMORY[0x24261512C](255, v5 - 248, v3, 0);
  v1[3] = sub_23BFF8968();
  v8 = v4;
  v10 = type metadata accessor for StandardVerticalStackView(255, v2, v4, v9);
  v1[17] = v10;
  v11 = MEMORY[0x242615198](&unk_23C0073B8, v10);
  v1[16] = v11;
  *(_QWORD *)(v5 - 248) = v10;
  *(_QWORD *)(v5 - 240) = v11;
  MEMORY[0x24261512C](255, v5 - 248, v3, 0);
  v13 = type metadata accessor for TallCardView(255, v2, v4, v12);
  v14 = MEMORY[0x242615198](&unk_23BFFF0E4, v13);
  v1[15] = v14;
  *(_QWORD *)(v5 - 248) = v13;
  *(_QWORD *)(v5 - 240) = v14;
  MEMORY[0x24261512C](255, v5 - 248, v3, 0);
  v1[14] = sub_23BFF8968();
  v1[1] = sub_23BFF8968();
  v1[71] = v8;
  v16 = type metadata accessor for VerticalStackCard(255, v2, v8, v15);
  v17 = MEMORY[0x242615198](&unk_23C0000E0, v16);
  v1[11] = v17;
  *(_QWORD *)(v5 - 248) = v16;
  *(_QWORD *)(v5 - 240) = v17;
  MEMORY[0x24261512C](255, v5 - 248, v3, 0);
  v1[2] = sub_23BFF8968();
  v19 = type metadata accessor for WideBrickView(255, v2, v8, v18);
  v20 = MEMORY[0x242615198](&protocol conformance descriptor for WideBrickView<A>, v19);
  v1[6] = v20;
  *(_QWORD *)(v5 - 248) = v19;
  *(_QWORD *)(v5 - 240) = v20;
  MEMORY[0x24261512C](255, v5 - 248, v3, 0);
  v1[4] = sub_23BFF8968();
  v1[5] = sub_23BFF8968();
  v1[7] = sub_23BFF8968();
  v1[8] = sub_23BFF8FD4();
  v1[9] = sub_23BFF862C();
  v1[10] = sub_23BFF8968();
  v1[13] = sub_23BFF862C();
  v1[54] = sub_23BFF862C();
  v21 = v1[68];
  *(_QWORD *)(v5 - 248) = v1[69];
  *(_QWORD *)(v5 - 240) = v21;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v23 = v1[52];
  *(_QWORD *)(v5 - 248) = v1[53];
  *(_QWORD *)(v5 - 240) = v23;
  v24 = swift_getOpaqueTypeConformance2();
  v25 = v1[39];
  *(_QWORD *)(v5 - 248) = v1[40];
  *(_QWORD *)(v5 - 240) = v25;
  v26 = swift_getOpaqueTypeConformance2();
  v1[171] = v24;
  v1[172] = v26;
  v27 = MEMORY[0x24BDEF3E0];
  v1[170] = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v1[35], v1 + 171);
  v28 = MEMORY[0x242615198](MEMORY[0x24BDF3F50], v1[41], v1 + 170);
  v29 = MEMORY[0x24BDECC60];
  v1[168] = v28;
  v1[169] = v29;
  v30 = MEMORY[0x24BDED308];
  v31 = MEMORY[0x242615198](MEMORY[0x24BDED308], v1[38], v1 + 168);
  v32 = sub_23BEA1F94(&qword_256AE3920, &qword_256AE3910, MEMORY[0x24BDF43B0]);
  v1[166] = v31;
  v1[167] = v32;
  v33 = MEMORY[0x242615198](v27, v1[42], v1 + 166);
  v34 = sub_23BEA1F94(&qword_256AE3928, &qword_256AE3918, MEMORY[0x24BDF4700]);
  v1[164] = v33;
  v1[165] = v34;
  v35 = MEMORY[0x242615198](v27, v1[43], v1 + 164);
  v1[162] = OpaqueTypeConformance2;
  v1[163] = v35;
  v36 = MEMORY[0x242615198](v27, v1[27], v1 + 162);
  v37 = v1[36];
  *(_QWORD *)(v5 - 248) = v1[37];
  *(_QWORD *)(v5 - 240) = v37;
  v38 = swift_getOpaqueTypeConformance2();
  v39 = v1[33];
  *(_QWORD *)(v5 - 248) = v1[34];
  *(_QWORD *)(v5 - 240) = v39;
  v40 = swift_getOpaqueTypeConformance2();
  v1[160] = v38;
  v1[161] = v40;
  v41 = MEMORY[0x242615198](v27, v1[32], v1 + 160);
  v1[158] = v36;
  v1[159] = v41;
  v42 = MEMORY[0x242615198](v27, v1[12], v1 + 158);
  v43 = v1[30];
  *(_QWORD *)(v5 - 248) = v1[31];
  *(_QWORD *)(v5 - 240) = v43;
  v44 = swift_getOpaqueTypeConformance2();
  v45 = v1[28];
  *(_QWORD *)(v5 - 248) = v1[29];
  *(_QWORD *)(v5 - 240) = v45;
  v46 = swift_getOpaqueTypeConformance2();
  v1[156] = v44;
  v1[157] = v46;
  v47 = MEMORY[0x242615198](v27, v1[20], v1 + 156);
  v48 = v1[25];
  *(_QWORD *)(v5 - 248) = v1[26];
  *(_QWORD *)(v5 - 240) = v48;
  v1[154] = swift_getOpaqueTypeConformance2();
  v1[155] = v46;
  v49 = MEMORY[0x242615198](v27, v1[23], v1 + 154);
  v1[152] = v47;
  v1[153] = v49;
  v50 = MEMORY[0x242615198](v27, v1[24], v1 + 152);
  v1[150] = v42;
  v1[151] = v50;
  v51 = MEMORY[0x242615198](v27, *v1, v1 + 150);
  v52 = v1[21];
  *(_QWORD *)(v5 - 248) = v1[22];
  *(_QWORD *)(v5 - 240) = v52;
  v53 = swift_getOpaqueTypeConformance2();
  v54 = v1[18];
  *(_QWORD *)(v5 - 248) = v1[19];
  *(_QWORD *)(v5 - 240) = v54;
  v55 = swift_getOpaqueTypeConformance2();
  v1[148] = v53;
  v1[149] = v55;
  v56 = MEMORY[0x242615198](v27, v1[3], v1 + 148);
  v57 = v1[16];
  *(_QWORD *)(v5 - 248) = v1[17];
  *(_QWORD *)(v5 - 240) = v57;
  v58 = swift_getOpaqueTypeConformance2();
  v59 = v1[15];
  *(_QWORD *)(v5 - 248) = v13;
  *(_QWORD *)(v5 - 240) = v59;
  v60 = swift_getOpaqueTypeConformance2();
  v1[146] = v58;
  v1[147] = v60;
  v61 = MEMORY[0x242615198](v27, v1[14], v1 + 146);
  v1[144] = v56;
  v1[145] = v61;
  v62 = MEMORY[0x242615198](v27, v1[1], v1 + 144);
  v63 = v1[11];
  *(_QWORD *)(v5 - 248) = v16;
  *(_QWORD *)(v5 - 240) = v63;
  v1[142] = swift_getOpaqueTypeConformance2();
  v1[143] = v1[75];
  v64 = MEMORY[0x242615198](v27, v1[2], v1 + 142);
  v65 = v1[6];
  *(_QWORD *)(v5 - 248) = v19;
  *(_QWORD *)(v5 - 240) = v65;
  v66 = swift_getOpaqueTypeConformance2();
  v1[140] = v64;
  v1[141] = v66;
  v67 = MEMORY[0x242615198](v27, v1[4], v1 + 140);
  v1[138] = v62;
  v1[139] = v67;
  v68 = MEMORY[0x242615198](v27, v1[5], v1 + 138);
  v1[136] = v51;
  v1[137] = v68;
  v1[135] = MEMORY[0x242615198](v27, v1[7], v1 + 136);
  v1[133] = MEMORY[0x242615198](MEMORY[0x24BDF3F50], v1[8], v1 + 135);
  v1[134] = v1[70];
  v69 = MEMORY[0x242615198](v30, v1[9], v1 + 133);
  v1[131] = MEMORY[0x24BDF5138];
  v1[132] = v69;
  v70 = MEMORY[0x242615198](v27, v1[10], v1 + 131);
  v71 = MEMORY[0x24BDF0910];
  v1[129] = v70;
  v1[130] = v71;
  v1[127] = MEMORY[0x242615198](v30, v1[13], v1 + 129);
  v1[128] = v71;
  v72 = v1[54];
  v73 = MEMORY[0x242615198](v30, v72, v1 + 127);
  *(_QWORD *)(v5 - 248) = v72;
  *(_QWORD *)(v5 - 240) = v73;
  v74 = v72;
  MEMORY[0x24261512C](255, v5 - 248, MEMORY[0x24BDF30F0], 0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE6510);
  v75 = sub_23BFF862C();
  v76 = sub_23BFF862C();
  *(_QWORD *)(v5 - 248) = v74;
  *(_QWORD *)(v5 - 240) = v73;
  v77 = swift_getOpaqueTypeConformance2();
  v78 = sub_23BEA1F94(&qword_256AE6518, &qword_256AE6510, MEMORY[0x24BDEF370]);
  v1[125] = v77;
  v1[126] = v78;
  v79 = MEMORY[0x242615198](v30, v75, v1 + 125);
  v80 = MEMORY[0x24BDEDB80];
  v1[123] = v79;
  v1[124] = v80;
  v81 = MEMORY[0x242615198](v30, v76, v1 + 123);
  *(_QWORD *)(v5 - 248) = v76;
  *(_QWORD *)(v5 - 240) = v81;
  MEMORY[0x24261512C](255, v5 - 248, MEMORY[0x24BEC6710], 0);
  sub_23BFF8968();
  v82 = v1[62];
  v83 = *(_QWORD *)(v82 + 48);
  v84 = *(_QWORD *)(v82 + 56);
  v1[69] = v83;
  v1[68] = v84;
  v85 = v82;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v87 = *(_QWORD *)(v85 + 152);
  v1[70] = v87;
  *(_QWORD *)(v5 - 248) = v83;
  *(_QWORD *)(v5 - 240) = v84;
  *(_QWORD *)(v5 - 232) = AssociatedConformanceWitness;
  *(_QWORD *)(v5 - 224) = v87;
  type metadata accessor for CanvasContextMenu();
}

uint64_t sub_23BF5BEEC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedConformanceWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t OpaqueTypeConformance2;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  double *v78;
  double v79;
  double v80;
  double v81;
  double v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(uint64_t, uint64_t, uint64_t);
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(char *, uint64_t, uint64_t);
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void (*v127)(uint64_t, uint64_t);
  _BYTE v129[128];

  v8 = sub_23BFF862C();
  v9 = v1[55];
  v10 = MEMORY[0x242615198](MEMORY[0x24BEE12D8], v9);
  v11 = v1[56];
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(_QWORD *)(v6 - 248) = v9;
  *(_QWORD *)(v6 - 240) = v11;
  *(_QWORD *)(v6 - 232) = v8;
  *(_QWORD *)(v6 - 224) = v10;
  *(_QWORD *)(v6 - 216) = AssociatedConformanceWitness;
  v13 = sub_23BFF910C();
  *(_QWORD *)(v6 - 248) = v2;
  *(_QWORD *)(v6 - 240) = v3;
  v1[121] = swift_getOpaqueTypeConformance2();
  v1[122] = v3;
  v14 = MEMORY[0x242615198](v4, v5, v1 + 121);
  v15 = MEMORY[0x242615198](&unk_23BFFEE18, a1);
  v1[119] = v14;
  v1[120] = v15;
  v16 = MEMORY[0x24BDED308];
  v1[118] = MEMORY[0x242615198](MEMORY[0x24BDED308], v8, v1 + 119);
  MEMORY[0x242615198](MEMORY[0x24BDF4A08], v13, v1 + 118);
  v17 = sub_23BFF8410();
  v18 = sub_23BFF862C();
  v1[116] = MEMORY[0x242615198](MEMORY[0x24BDEB168], v17);
  v1[117] = MEMORY[0x24BDEBEE0];
  v19 = MEMORY[0x242615198](v16, v18, v1 + 116);
  *(_QWORD *)(v6 - 248) = v18;
  *(_QWORD *)(v6 - 240) = v19;
  MEMORY[0x24261512C](255, v6 - 248, MEMORY[0x24BDF2D58], 0);
  *(_QWORD *)(v6 - 248) = v18;
  *(_QWORD *)(v6 - 240) = v19;
  swift_getOpaqueTypeConformance2();
  v20 = sub_23BFF8434();
  v21 = sub_23BFF8B0C();
  v22 = MEMORY[0x242615198](MEMORY[0x24BDEB238], v20);
  *(_QWORD *)(v6 - 248) = v20;
  *(_QWORD *)(v6 - 240) = v21;
  v23 = MEMORY[0x24BDF10F0];
  *(_QWORD *)(v6 - 232) = v22;
  *(_QWORD *)(v6 - 224) = v23;
  MEMORY[0x24261512C](255, v6 - 248, MEMORY[0x24BDF3000], 0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE5180);
  v24 = v1[58];
  v25 = sub_23BFF913C();
  v26 = sub_23BF0A0F0();
  v27 = MEMORY[0x242615198](&unk_23C0051E8, v1[59]);
  v28 = sub_23BEA1BB8((unint64_t *)&qword_256AE5188, (uint64_t (*)(uint64_t))MEMORY[0x24BDF02F8], MEMORY[0x24BDF02F0]);
  v1[114] = v27;
  v1[115] = v28;
  v29 = MEMORY[0x242615198](MEMORY[0x24BDED308], v1[60], v1 + 114);
  v1[112] = v26;
  v1[113] = v29;
  v1[111] = MEMORY[0x242615198](v4, v1[61], v1 + 112);
  v30 = MEMORY[0x242615198](MEMORY[0x24BDF5578], v24, v1 + 111);
  *(_QWORD *)(v6 - 248) = v20;
  *(_QWORD *)(v6 - 240) = v21;
  *(_QWORD *)(v6 - 232) = v22;
  *(_QWORD *)(v6 - 224) = MEMORY[0x24BDF10F0];
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v32 = sub_23BF0A154();
  v1[108] = v30;
  v1[109] = OpaqueTypeConformance2;
  v1[110] = v32;
  v33 = MEMORY[0x24BDF4AF8];
  v1[29] = v25;
  v1[28] = MEMORY[0x242615198](v33, v25, v1 + 108);
  v34 = sub_23BFF90AC();
  v1[33] = *(_QWORD *)(v34 - 8);
  v35 = MEMORY[0x24BDAC7A8](v34);
  v37 = &v129[-v36];
  v38 = MEMORY[0x242615198](MEMORY[0x24BDF4700], v34, v35);
  *(_QWORD *)(v6 - 248) = v34;
  *(_QWORD *)(v6 - 240) = v38;
  v39 = v38;
  v1[27] = v38;
  v40 = MEMORY[0x24261512C](0, v6 - 248, MEMORY[0x24BDF2D38], 0);
  v1[34] = *(_QWORD *)(v40 - 8);
  MEMORY[0x24BDAC7A8](v40);
  v1[25] = &v129[-v41];
  *(_QWORD *)(v6 - 248) = v34;
  *(_QWORD *)(v6 - 240) = v39;
  v42 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v6 - 248) = v40;
  *(_QWORD *)(v6 - 240) = v42;
  v43 = v42;
  v1[26] = v42;
  v44 = MEMORY[0x24261512C](0, v6 - 248, MEMORY[0x24BDF26E8], 0);
  v1[36] = *(_QWORD *)(v44 - 8);
  v45 = v44;
  MEMORY[0x24BDAC7A8](v44);
  v1[60] = &v129[-v46];
  *(_QWORD *)(v6 - 248) = v40;
  *(_QWORD *)(v6 - 240) = v43;
  v47 = swift_getOpaqueTypeConformance2();
  v48 = sub_23BF5C8F4();
  *(_QWORD *)(v6 - 248) = v45;
  *(_QWORD *)(v6 - 240) = &type metadata for DynamicTypeSize;
  v49 = v45;
  v1[30] = v45;
  v1[31] = v48;
  *(_QWORD *)(v6 - 232) = v47;
  *(_QWORD *)(v6 - 224) = v48;
  v1[32] = v47;
  v50 = MEMORY[0x24BDF3908];
  v51 = MEMORY[0x24261512C](0, v6 - 248, MEMORY[0x24BDF3908], 0);
  v1[43] = *(_QWORD *)(v51 - 8);
  v52 = v51;
  v1[39] = v51;
  MEMORY[0x24BDAC7A8](v51);
  v1[61] = &v129[-v53];
  *(_QWORD *)(v6 - 248) = v49;
  *(_QWORD *)(v6 - 240) = &type metadata for DynamicTypeSize;
  *(_QWORD *)(v6 - 232) = v47;
  *(_QWORD *)(v6 - 224) = v48;
  v54 = swift_getOpaqueTypeConformance2();
  v55 = v1[72];
  v56 = *(_QWORD *)(*(_QWORD *)(v55 + 24) + 8);
  v1[37] = v56;
  v1[38] = v54;
  *(_QWORD *)(v6 - 248) = v52;
  v57 = v1[74];
  *(_QWORD *)(v6 - 240) = v57;
  *(_QWORD *)(v6 - 232) = v54;
  *(_QWORD *)(v6 - 224) = v56;
  v58 = MEMORY[0x24261512C](0, v6 - 248, v50, 0);
  v59 = *(_QWORD *)(v58 - 8);
  v1[41] = v58;
  v1[42] = v59;
  MEMORY[0x24BDAC7A8](v58);
  v1[35] = &v129[-((v60 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v61);
  v1[40] = &v129[-v62];
  sub_23BFF88A8();
  v63 = v1[62];
  v64 = *(_QWORD *)(v63 + 16);
  v1[59] = v64;
  v1[82] = v64;
  v1[83] = v1[73];
  v65 = *(_QWORD *)(v63 + 32);
  v1[58] = v65;
  v1[84] = v65;
  v1[85] = v1[77];
  v1[86] = v1[69];
  v1[87] = v1[68];
  v66 = *(_QWORD *)(v63 + 72);
  v67 = *(_QWORD *)(v63 + 80);
  v1[88] = v1[78];
  v1[89] = v66;
  v68 = *(_QWORD *)(v63 + 88);
  v1[56] = v68;
  v1[57] = v66;
  v1[90] = v67;
  v1[91] = v68;
  v69 = *(_QWORD *)(v63 + 104);
  v1[54] = v69;
  v1[55] = v67;
  v1[92] = v1[66];
  v1[93] = v69;
  v70 = *(_QWORD *)(v63 + 120);
  v1[94] = v57;
  v1[95] = v70;
  v71 = v70;
  v1[24] = v70;
  v1[96] = v1[76];
  v72 = v1[64];
  v1[97] = v1[63];
  v1[98] = v1[71];
  v1[99] = v1[70];
  v73 = *(_QWORD *)(v63 + 168);
  v1[100] = v1[75];
  v1[101] = v73;
  v74 = *(_QWORD *)(v63 + 184);
  v1[52] = v74;
  v1[53] = v73;
  v1[102] = v72;
  v1[103] = v74;
  v1[104] = v55;
  v1[105] = v1[79];
  v75 = v1[65];
  v1[106] = v75;
  sub_23BFF90A0();
  v76 = v1[25];
  sub_23BFF8DE8();
  (*(void (**)(_BYTE *, uint64_t))(v1[33] + 8))(v37, v34);
  v77 = sub_23BFF8B54();
  v78 = (double *)(v75 + *(int *)(v63 + 224));
  v79 = *v78;
  v80 = v78[1];
  v81 = v78[2];
  v82 = v78[3];
  v83 = v1[44];
  sub_23BFF89F8();
  MEMORY[0x242614124](v77, v83, v40, v1[26], v81, v80, v79, v82);
  (*(void (**)(uint64_t, _QWORD))(v1[45] + 8))(v83, v1[46]);
  (*(void (**)(uint64_t, uint64_t))(v1[34] + 8))(v76, v40);
  *(_BYTE *)(v6 - 248) = *(_BYTE *)(v75 + *(int *)(v63 + 232));
  v85 = v1[47];
  v84 = v1[48];
  v86 = *(void (**)(uint64_t, uint64_t, uint64_t))(v84 + 16);
  v1[46] = v86;
  v86(v85, v75, v63);
  v87 = *(unsigned __int8 *)(v84 + 80);
  v88 = (v87 + 208) & ~v87;
  v1[49] += v88;
  v1[45] = v87 | 7;
  v89 = (char *)swift_allocObject();
  v90 = v1[73];
  *((_QWORD *)v89 + 2) = v1[59];
  *((_QWORD *)v89 + 3) = v90;
  v91 = v1[77];
  *((_QWORD *)v89 + 4) = v1[58];
  *((_QWORD *)v89 + 5) = v91;
  v92 = v1[68];
  *((_QWORD *)v89 + 6) = v1[69];
  *((_QWORD *)v89 + 7) = v92;
  v93 = v1[57];
  *((_QWORD *)v89 + 8) = v1[78];
  *((_QWORD *)v89 + 9) = v93;
  v94 = v1[56];
  *((_QWORD *)v89 + 10) = v1[55];
  *((_QWORD *)v89 + 11) = v94;
  v95 = v1[66];
  v96 = v1[54];
  *((_QWORD *)v89 + 12) = v95;
  *((_QWORD *)v89 + 13) = v96;
  v97 = v1[74];
  *((_QWORD *)v89 + 14) = v97;
  *((_QWORD *)v89 + 15) = v71;
  v98 = v1[63];
  *((_QWORD *)v89 + 16) = v1[76];
  *((_QWORD *)v89 + 17) = v98;
  v99 = v1[70];
  *((_QWORD *)v89 + 18) = v1[71];
  *((_QWORD *)v89 + 19) = v99;
  v100 = v1[53];
  *((_QWORD *)v89 + 20) = v1[75];
  *((_QWORD *)v89 + 21) = v100;
  v101 = v1[52];
  *((_QWORD *)v89 + 22) = v72;
  *((_QWORD *)v89 + 23) = v101;
  v102 = v1[79];
  *((_QWORD *)v89 + 24) = v1[72];
  *((_QWORD *)v89 + 25) = v102;
  v103 = *(void (**)(char *, uint64_t, uint64_t))(v84 + 32);
  v1[48] = v103;
  v103(&v89[v88], v85, v63);
  v104 = v1[60];
  v105 = v1[30];
  sub_23BFF8F2C();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v1[36] + 8))(v104, v105);
  v106 = v1[65];
  v107 = v1[50];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1[67] + 16))(v107, v106 + *(int *)(v63 + 236), v97);
  ((void (*)(uint64_t, uint64_t, uint64_t))v1[46])(v85, v106, v63);
  v108 = (_QWORD *)swift_allocObject();
  v109 = v1[73];
  v108[2] = v1[59];
  v108[3] = v109;
  v110 = v1[77];
  v108[4] = v1[58];
  v108[5] = v110;
  v111 = v1[68];
  v108[6] = v1[69];
  v108[7] = v111;
  v112 = v1[57];
  v108[8] = v1[78];
  v108[9] = v112;
  v113 = v1[56];
  v108[10] = v1[55];
  v108[11] = v113;
  v114 = v1[54];
  v108[12] = v95;
  v108[13] = v114;
  v115 = v1[24];
  v108[14] = v97;
  v108[15] = v115;
  v108[16] = v1[76];
  v108[17] = v98;
  v116 = v1[70];
  v108[18] = v1[71];
  v108[19] = v116;
  v117 = v1[53];
  v108[20] = v1[75];
  v108[21] = v117;
  v118 = v1[52];
  v108[22] = v1[64];
  v108[23] = v118;
  v119 = v1[79];
  v108[24] = v1[72];
  v108[25] = v119;
  ((void (*)(char *, uint64_t, uint64_t))v1[48])((char *)v108 + v88, v85, v63);
  v120 = v1[35];
  v122 = v1[38];
  v121 = v1[39];
  v123 = v1[37];
  v124 = v1[61];
  sub_23BFF8F2C();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v1[67] + 8))(v107, v97);
  (*(void (**)(uint64_t, uint64_t))(v1[43] + 8))(v124, v121);
  *(_QWORD *)(v6 - 248) = v121;
  *(_QWORD *)(v6 - 240) = v97;
  *(_QWORD *)(v6 - 232) = v122;
  *(_QWORD *)(v6 - 224) = v123;
  swift_getOpaqueTypeConformance2();
  v126 = v1[40];
  v125 = v1[41];
  sub_23BEA72EC(v120, v125, v126);
  v127 = *(void (**)(uint64_t, uint64_t))(v1[42] + 8);
  v127(v120, v125);
  sub_23BEA5C0C(v126, v125, v1[51]);
  return ((uint64_t (*)(uint64_t, uint64_t))v127)(v126, v125);
}

unint64_t sub_23BF5C8F4()
{
  unint64_t result;

  result = qword_256AE6520[0];
  if (!qword_256AE6520[0])
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for DynamicTypeSize, &type metadata for DynamicTypeSize);
    atomic_store(result, qword_256AE6520);
  }
  return result;
}

void sub_23BF5C938()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3528);
  type metadata accessor for CanvasSectionHeaderView();
}

void sub_23BF5CA20(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1[68] = a1;
  sub_23BFF8A4C();
  v1[69] = sub_23BFF862C();
  v1[70] = sub_23BFF8968();
  v8 = sub_23BFF96A0();
  v1[54] = *(_QWORD *)(v2 + 32);
  v1[55] = v8;
  v1[53] = swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  v1[52] = sub_23BFF94C0();
  v1[72] = v6;
  *(_QWORD *)(v7 - 216) = v6;
  *(_QWORD *)(v7 - 208) = v4;
  *(_QWORD *)(v7 - 200) = v4;
  *(_QWORD *)(v7 - 192) = v3;
  *(_QWORD *)(v7 - 184) = v5;
  *(_QWORD *)(v7 - 176) = v5;
  type metadata accessor for ActionCardView();
}

void sub_23BF5CAD4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1[47] = a1;
  v7 = MEMORY[0x242615198](&unk_23C005608, a1);
  v1[46] = v7;
  *(_QWORD *)(v5 - 216) = a1;
  *(_QWORD *)(v5 - 208) = v7;
  v1[40] = MEMORY[0x24261512C](255, v5 - 216, MEMORY[0x24BDF3948], 0);
  v1[45] = sub_23BFF8ADC();
  v8 = (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088];
  v9 = sub_23BFF862C();
  v10 = sub_23BFF862C();
  v1[44] = v10;
  v11 = sub_23BEA1BB8((unint64_t *)&qword_256AE3908, v8, MEMORY[0x24BDF1078]);
  v1[49] = v11;
  *(_QWORD *)(v5 - 104) = v2;
  *(_QWORD *)(v5 - 96) = v11;
  v12 = MEMORY[0x24BDED308];
  v13 = MEMORY[0x242615198](MEMORY[0x24BDED308], v9, v5 - 104);
  v14 = MEMORY[0x24BDEEC40];
  *(_QWORD *)(v5 - 120) = v13;
  *(_QWORD *)(v5 - 112) = v14;
  v15 = MEMORY[0x242615198](v12, v10, v5 - 120);
  v1[43] = v15;
  *(_QWORD *)(v5 - 216) = v10;
  *(_QWORD *)(v5 - 208) = v15;
  v16 = MEMORY[0x24BDF3100];
  MEMORY[0x24261512C](255, v5 - 216, MEMORY[0x24BDF3100], 0);
  v17 = sub_23BFF862C();
  v1[37] = v17;
  v18 = MEMORY[0x24BDEBEE0];
  *(_QWORD *)(v5 - 136) = v13;
  *(_QWORD *)(v5 - 128) = v18;
  v19 = MEMORY[0x242615198](v12, v17, v5 - 136);
  v1[36] = v19;
  *(_QWORD *)(v5 - 216) = v17;
  *(_QWORD *)(v5 - 208) = v19;
  MEMORY[0x24261512C](255, v5 - 216, v16, 0);
  v1[34] = sub_23BFF8968();
  v1[38] = sub_23BFF8FD4();
  v1[35] = sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3910);
  v1[41] = sub_23BFF8968();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3918);
  v1[42] = sub_23BFF8968();
  v1[26] = sub_23BFF8968();
  *(_QWORD *)(v5 - 216) = v1[72];
  *(_QWORD *)(v5 - 208) = v3;
  v20 = v1[80];
  *(_QWORD *)(v5 - 200) = v3;
  *(_QWORD *)(v5 - 192) = v20;
  *(_QWORD *)(v5 - 184) = v1[77];
  *(_QWORD *)(v5 - 176) = v2;
  *(_QWORD *)(v5 - 168) = v4;
  *(_QWORD *)(v5 - 160) = v4;
  v21 = v1[76];
  *(_QWORD *)(v5 - 152) = v1[81];
  *(_QWORD *)(v5 - 144) = v21;
  type metadata accessor for FullWidthStageView();
}

void sub_23BF5CCFC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1[40] = a1;
  v9 = MEMORY[0x242615198](&unk_23C0077B8, a1);
  v1[39] = v9;
  *(_QWORD *)(v7 - 216) = a1;
  *(_QWORD *)(v7 - 208) = v9;
  MEMORY[0x24261512C](255, v7 - 216, v2, 0);
  v1[50] = v4;
  v1[51] = v5;
  v11 = type metadata accessor for InfoActionCardView(255, v4, v5, v10);
  v1[33] = v11;
  v12 = MEMORY[0x242615198](&unk_23C007F20, v11);
  v1[32] = v12;
  *(_QWORD *)(v7 - 216) = v11;
  *(_QWORD *)(v7 - 208) = v12;
  MEMORY[0x24261512C](255, v7 - 216, v2, 0);
  v1[31] = sub_23BFF8968();
  v1[12] = sub_23BFF8968();
  v14 = type metadata accessor for LargeBrickView(255, v6, v3, v13);
  v1[30] = v14;
  v15 = MEMORY[0x242615198](&protocol conformance descriptor for LargeBrickView<A>, v14);
  v1[29] = v15;
  *(_QWORD *)(v7 - 216) = v14;
  *(_QWORD *)(v7 - 208) = v15;
  MEMORY[0x24261512C](255, v7 - 216, v2, 0);
  v17 = type metadata accessor for DynamicBrickView(255, v6, v3, v16);
  v1[28] = v17;
  v18 = MEMORY[0x242615198](&protocol conformance descriptor for DynamicBrickView<A>, v17);
  v1[27] = v18;
  *(_QWORD *)(v7 - 216) = v17;
  *(_QWORD *)(v7 - 208) = v18;
  MEMORY[0x24261512C](255, v7 - 216, v2, 0);
  v1[19] = sub_23BFF8968();
  v19 = v3;
  v21 = type metadata accessor for MonogramVerticalStackView(255, v6, v3, v20);
  v1[25] = v21;
  v22 = MEMORY[0x242615198](&unk_23BFFA1F4, v21);
  v1[24] = v22;
  *(_QWORD *)(v7 - 216) = v21;
  *(_QWORD *)(v7 - 208) = v22;
  MEMORY[0x24261512C](255, v7 - 216, v2, 0);
  v1[22] = sub_23BFF8968();
  v1[23] = sub_23BFF8968();
  sub_23BFF8968();
  v24 = type metadata accessor for StandardCardView(255, v6, v19, v23);
  v1[21] = v24;
  v25 = MEMORY[0x242615198](&unk_23C007BD0, v24);
  v1[20] = v25;
  *(_QWORD *)(v7 - 216) = v24;
  *(_QWORD *)(v7 - 208) = v25;
  MEMORY[0x24261512C](255, v7 - 216, v2, 0);
  *(_QWORD *)(v7 - 216) = v6;
  *(_QWORD *)(v7 - 208) = v4;
  *(_QWORD *)(v7 - 200) = v19;
  *(_QWORD *)(v7 - 192) = v5;
  type metadata accessor for StandardHorizontalStackView();
}

void sub_23BF5CF30(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t OpaqueTypeConformance2;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t AssociatedConformanceWitness;
  uint64_t v86;
  uint64_t v87;

  v1[18] = a1;
  v8 = MEMORY[0x242615198](&unk_23C0008E8, a1);
  v1[17] = v8;
  *(_QWORD *)(v6 - 216) = a1;
  *(_QWORD *)(v6 - 208) = v8;
  MEMORY[0x24261512C](255, v6 - 216, v3, 0);
  v1[2] = sub_23BFF8968();
  v10 = type metadata accessor for StandardVerticalStackView(255, v5, v2, v9);
  v1[11] = v10;
  v11 = MEMORY[0x242615198](&unk_23C0073B8, v10);
  v1[16] = v11;
  *(_QWORD *)(v6 - 216) = v10;
  *(_QWORD *)(v6 - 208) = v11;
  MEMORY[0x24261512C](255, v6 - 216, v3, 0);
  v13 = type metadata accessor for TallCardView(255, v5, v2, v12);
  v14 = MEMORY[0x242615198](&unk_23BFFF0E4, v13);
  v1[15] = v14;
  *(_QWORD *)(v6 - 216) = v13;
  *(_QWORD *)(v6 - 208) = v14;
  MEMORY[0x24261512C](255, v6 - 216, v3, 0);
  v1[14] = sub_23BFF8968();
  *v1 = sub_23BFF8968();
  v1[48] = v2;
  v16 = type metadata accessor for VerticalStackCard(255, v5, v2, v15);
  v17 = MEMORY[0x242615198](&unk_23C0000E0, v16);
  v1[10] = v17;
  *(_QWORD *)(v6 - 216) = v16;
  *(_QWORD *)(v6 - 208) = v17;
  MEMORY[0x24261512C](255, v6 - 216, v3, 0);
  v1[1] = sub_23BFF8968();
  v19 = type metadata accessor for WideBrickView(255, v5, v2, v18);
  v20 = MEMORY[0x242615198](&protocol conformance descriptor for WideBrickView<A>, v19);
  v1[5] = v20;
  *(_QWORD *)(v6 - 216) = v19;
  *(_QWORD *)(v6 - 208) = v20;
  MEMORY[0x24261512C](255, v6 - 216, v3, 0);
  v1[3] = sub_23BFF8968();
  v1[4] = sub_23BFF8968();
  v21 = v4;
  v1[6] = sub_23BFF8968();
  v1[7] = sub_23BFF8FD4();
  v1[8] = sub_23BFF862C();
  v1[9] = sub_23BFF8968();
  v1[13] = sub_23BFF862C();
  v1[45] = sub_23BFF862C();
  v22 = v1[46];
  *(_QWORD *)(v6 - 216) = v1[47];
  *(_QWORD *)(v6 - 208) = v22;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v24 = v1[43];
  *(_QWORD *)(v6 - 216) = v1[44];
  *(_QWORD *)(v6 - 208) = v24;
  v25 = swift_getOpaqueTypeConformance2();
  v26 = v1[36];
  *(_QWORD *)(v6 - 216) = v1[37];
  *(_QWORD *)(v6 - 208) = v26;
  v27 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v6 - 232) = v25;
  *(_QWORD *)(v6 - 224) = v27;
  v28 = MEMORY[0x24BDEF3E0];
  *(_QWORD *)(v6 - 240) = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v1[34], v6 - 232);
  v29 = MEMORY[0x242615198](MEMORY[0x24BDF3F50], v1[38], v6 - 240);
  v30 = MEMORY[0x24BDECC60];
  *(_QWORD *)(v6 - 256) = v29;
  *(_QWORD *)(v6 - 248) = v30;
  v31 = MEMORY[0x242615198](MEMORY[0x24BDED308], v1[35], v6 - 256);
  v32 = sub_23BEA1F94(&qword_256AE3920, &qword_256AE3910, MEMORY[0x24BDF43B0]);
  v1[224] = v31;
  v1[225] = v32;
  v33 = MEMORY[0x242615198](v28, v1[41], v1 + 224);
  v34 = sub_23BEA1F94(&qword_256AE3928, &qword_256AE3918, MEMORY[0x24BDF4700]);
  v1[222] = v33;
  v1[223] = v34;
  v35 = MEMORY[0x242615198](v28, v1[42], v1 + 222);
  v1[220] = OpaqueTypeConformance2;
  v1[221] = v35;
  v36 = MEMORY[0x242615198](v28, v1[26], v1 + 220);
  v37 = v1[39];
  *(_QWORD *)(v6 - 216) = v1[40];
  *(_QWORD *)(v6 - 208) = v37;
  v38 = swift_getOpaqueTypeConformance2();
  v39 = v1[32];
  *(_QWORD *)(v6 - 216) = v1[33];
  *(_QWORD *)(v6 - 208) = v39;
  v40 = swift_getOpaqueTypeConformance2();
  v1[218] = v38;
  v1[219] = v40;
  v41 = MEMORY[0x242615198](v28, v1[31], v1 + 218);
  v1[216] = v36;
  v1[217] = v41;
  v42 = MEMORY[0x242615198](v28, v1[12], v1 + 216);
  v43 = v1[29];
  *(_QWORD *)(v6 - 216) = v1[30];
  *(_QWORD *)(v6 - 208) = v43;
  v44 = swift_getOpaqueTypeConformance2();
  v45 = v1[27];
  *(_QWORD *)(v6 - 216) = v1[28];
  *(_QWORD *)(v6 - 208) = v45;
  v46 = swift_getOpaqueTypeConformance2();
  v1[214] = v44;
  v1[215] = v46;
  v47 = MEMORY[0x242615198](v28, v1[19], v1 + 214);
  v48 = v1[24];
  *(_QWORD *)(v6 - 216) = v1[25];
  *(_QWORD *)(v6 - 208) = v48;
  v1[212] = swift_getOpaqueTypeConformance2();
  v1[213] = v46;
  v49 = MEMORY[0x242615198](v28, v1[22], v1 + 212);
  v1[210] = v47;
  v1[211] = v49;
  v50 = MEMORY[0x242615198](v28, v1[23], v1 + 210);
  v1[208] = v42;
  v1[209] = v50;
  v51 = MEMORY[0x242615198](v28, v21, v1 + 208);
  v52 = v1[20];
  *(_QWORD *)(v6 - 216) = v1[21];
  *(_QWORD *)(v6 - 208) = v52;
  v53 = swift_getOpaqueTypeConformance2();
  v54 = v1[17];
  *(_QWORD *)(v6 - 216) = v1[18];
  *(_QWORD *)(v6 - 208) = v54;
  v55 = swift_getOpaqueTypeConformance2();
  v1[206] = v53;
  v1[207] = v55;
  v56 = MEMORY[0x242615198](v28, v1[2], v1 + 206);
  v57 = v1[16];
  *(_QWORD *)(v6 - 216) = v1[11];
  *(_QWORD *)(v6 - 208) = v57;
  v58 = swift_getOpaqueTypeConformance2();
  v59 = v1[15];
  *(_QWORD *)(v6 - 216) = v13;
  *(_QWORD *)(v6 - 208) = v59;
  v60 = swift_getOpaqueTypeConformance2();
  v1[204] = v58;
  v1[205] = v60;
  v61 = MEMORY[0x242615198](v28, v1[14], v1 + 204);
  v1[202] = v56;
  v1[203] = v61;
  v62 = MEMORY[0x242615198](v28, *v1, v1 + 202);
  v63 = v1[10];
  *(_QWORD *)(v6 - 216) = v16;
  *(_QWORD *)(v6 - 208) = v63;
  v1[200] = swift_getOpaqueTypeConformance2();
  v1[201] = v1[81];
  v64 = MEMORY[0x242615198](v28, v1[1], v1 + 200);
  v65 = v1[5];
  *(_QWORD *)(v6 - 216) = v19;
  *(_QWORD *)(v6 - 208) = v65;
  v66 = swift_getOpaqueTypeConformance2();
  v1[198] = v64;
  v1[199] = v66;
  v67 = MEMORY[0x242615198](v28, v1[3], v1 + 198);
  v1[196] = v62;
  v1[197] = v67;
  v68 = MEMORY[0x242615198](v28, v1[4], v1 + 196);
  v1[194] = v51;
  v1[195] = v68;
  v69 = v28;
  v1[193] = MEMORY[0x242615198](v28, v1[6], v1 + 194);
  v1[191] = MEMORY[0x242615198](MEMORY[0x24BDF3F50], v1[7], v1 + 193);
  v1[192] = v1[49];
  v70 = MEMORY[0x24BDED308];
  v71 = MEMORY[0x242615198](MEMORY[0x24BDED308], v1[8], v1 + 191);
  v1[189] = MEMORY[0x24BDF5138];
  v1[190] = v71;
  v72 = MEMORY[0x242615198](v69, v1[9], v1 + 189);
  v73 = MEMORY[0x24BDF0910];
  v1[187] = v72;
  v1[188] = v73;
  v1[185] = MEMORY[0x242615198](v70, v1[13], v1 + 187);
  v1[186] = v73;
  v74 = v1[45];
  v75 = MEMORY[0x242615198](v70, v74, v1 + 185);
  *(_QWORD *)(v6 - 216) = v74;
  *(_QWORD *)(v6 - 208) = v75;
  v76 = v74;
  MEMORY[0x24261512C](255, v6 - 216, MEMORY[0x24BDF30F0], 0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE6510);
  v77 = sub_23BFF862C();
  v78 = sub_23BFF862C();
  *(_QWORD *)(v6 - 216) = v76;
  *(_QWORD *)(v6 - 208) = v75;
  v79 = swift_getOpaqueTypeConformance2();
  v80 = sub_23BEA1F94(&qword_256AE6518, &qword_256AE6510, MEMORY[0x24BDEF370]);
  v1[183] = v79;
  v1[184] = v80;
  v81 = MEMORY[0x242615198](v70, v77, v1 + 183);
  v82 = MEMORY[0x24BDEDB80];
  v1[181] = v81;
  v1[182] = v82;
  v83 = MEMORY[0x242615198](v70, v78, v1 + 181);
  *(_QWORD *)(v6 - 216) = v78;
  *(_QWORD *)(v6 - 208) = v83;
  MEMORY[0x24261512C](255, v6 - 216, MEMORY[0x24BEC6710], 0);
  sub_23BFF8968();
  v84 = v1[74];
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v86 = v1[79];
  *(_QWORD *)(v6 - 216) = v84;
  *(_QWORD *)(v6 - 208) = v86;
  v87 = v1[78];
  *(_QWORD *)(v6 - 200) = AssociatedConformanceWitness;
  *(_QWORD *)(v6 - 192) = v87;
  type metadata accessor for CanvasContextMenu();
}

uint64_t sub_23BF5D738(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(uint64_t, uint64_t);
  uint64_t OpaqueTypeConformance2;
  unint64_t v64;
  _BYTE v65[64];

  v7 = sub_23BFF862C();
  v8 = v1[52];
  v9 = MEMORY[0x242615198](MEMORY[0x24BEE12D8], v8);
  v10 = v1[53];
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(_QWORD *)(v5 - 216) = v8;
  *(_QWORD *)(v5 - 208) = v10;
  *(_QWORD *)(v5 - 200) = v7;
  *(_QWORD *)(v5 - 192) = v9;
  *(_QWORD *)(v5 - 184) = AssociatedConformanceWitness;
  v12 = sub_23BFF910C();
  *(_QWORD *)(v5 - 216) = v2;
  *(_QWORD *)(v5 - 208) = v3;
  v1[179] = swift_getOpaqueTypeConformance2();
  v1[180] = v3;
  v13 = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v4, v1 + 179);
  v14 = MEMORY[0x242615198](&unk_23BFFEE18, a1);
  v1[177] = v13;
  v1[178] = v14;
  v15 = MEMORY[0x24BDED308];
  v1[176] = MEMORY[0x242615198](MEMORY[0x24BDED308], v7, v1 + 177);
  MEMORY[0x242615198](MEMORY[0x24BDF4A08], v12, v1 + 176);
  v16 = sub_23BFF8410();
  v17 = sub_23BFF862C();
  v1[174] = MEMORY[0x242615198](MEMORY[0x24BDEB168], v16);
  v1[175] = MEMORY[0x24BDEBEE0];
  v18 = MEMORY[0x242615198](v15, v17, v1 + 174);
  *(_QWORD *)(v5 - 216) = v17;
  *(_QWORD *)(v5 - 208) = v18;
  MEMORY[0x24261512C](255, v5 - 216, MEMORY[0x24BDF2D58], 0);
  *(_QWORD *)(v5 - 216) = v17;
  *(_QWORD *)(v5 - 208) = v18;
  swift_getOpaqueTypeConformance2();
  v19 = sub_23BFF8434();
  v1[49] = v19;
  v20 = sub_23BFF8B0C();
  v1[47] = v20;
  v21 = MEMORY[0x242615198](MEMORY[0x24BDEB238], v19);
  v1[46] = v21;
  *(_QWORD *)(v5 - 216) = v19;
  *(_QWORD *)(v5 - 208) = v20;
  v22 = MEMORY[0x24BDF10F0];
  *(_QWORD *)(v5 - 200) = v21;
  *(_QWORD *)(v5 - 192) = v22;
  v1[53] = MEMORY[0x24261512C](255, v5 - 216, MEMORY[0x24BDF3000], 0);
  v1[45] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE5180);
  v23 = v1[55];
  v24 = sub_23BFF913C();
  v1[54] = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v26 = &v65[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v27);
  v1[52] = &v65[-v28];
  v30 = v1[62];
  v29 = v1[63];
  v1[140] = v29;
  v31 = v1[50];
  v1[141] = v31;
  v32 = v1[65];
  v1[142] = v32;
  v33 = v1[72];
  v1[143] = v33;
  v34 = v1[74];
  v1[144] = v34;
  v35 = v1[79];
  v1[145] = v35;
  v36 = v1[80];
  v1[146] = v36;
  v38 = v1[58];
  v37 = v1[59];
  v1[147] = v37;
  v1[148] = v30;
  v1[149] = v38;
  v40 = v1[56];
  v39 = v1[57];
  v1[150] = v40;
  v42 = v1[60];
  v41 = v1[61];
  v1[151] = v42;
  v43 = v1[77];
  v1[152] = v43;
  v1[153] = v41;
  v44 = v1[73];
  v1[154] = v44;
  v45 = v1[51];
  v1[155] = v45;
  v46 = v1[48];
  v1[156] = v46;
  v47 = v1[78];
  v1[157] = v47;
  v48 = v1[81];
  v1[158] = v48;
  v49 = v1[64];
  v1[159] = v49;
  v1[160] = v39;
  v50 = v1[66];
  v1[161] = v50;
  v51 = v1[76];
  v1[162] = v51;
  v52 = v1[75];
  v1[163] = v52;
  v53 = v1[67];
  v1[164] = v53;
  v1[112] = v29;
  v1[113] = v31;
  v1[114] = v32;
  v1[115] = v33;
  v1[116] = v34;
  v1[117] = v35;
  v1[118] = v36;
  v1[119] = v37;
  v1[120] = v30;
  v1[121] = v38;
  v1[122] = v40;
  v1[123] = v42;
  v1[124] = v43;
  v1[125] = v41;
  v1[126] = v44;
  v1[127] = v45;
  v1[128] = v46;
  v1[129] = v47;
  v1[130] = v48;
  v1[131] = v49;
  v1[132] = v39;
  v1[133] = v50;
  v1[134] = v51;
  v1[135] = v52;
  v1[136] = v53;
  v1[84] = v29;
  v1[85] = v31;
  v1[86] = v32;
  v1[87] = v33;
  v1[88] = v34;
  v1[89] = v35;
  v1[90] = v36;
  v1[91] = v37;
  v1[92] = v30;
  v1[93] = v38;
  v1[94] = v40;
  v1[95] = v42;
  v1[96] = v43;
  v1[97] = v41;
  v1[98] = v44;
  v1[99] = v45;
  v1[100] = v46;
  v1[101] = v47;
  v1[102] = v48;
  v1[103] = v49;
  v1[104] = v39;
  v1[105] = v50;
  v1[106] = v51;
  v1[107] = v52;
  v1[108] = v53;
  v54 = sub_23BF0A0F0();
  v55 = MEMORY[0x242615198](&unk_23C0051E8, v1[68]);
  v56 = sub_23BEA1BB8((unint64_t *)&qword_256AE5188, (uint64_t (*)(uint64_t))MEMORY[0x24BDF02F8], MEMORY[0x24BDF02F0]);
  v1[172] = v55;
  v1[173] = v56;
  v57 = MEMORY[0x242615198](MEMORY[0x24BDED308], v1[69], v1 + 172);
  v1[170] = v54;
  v1[171] = v57;
  v1[169] = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v1[70], v1 + 170);
  v58 = MEMORY[0x242615198](MEMORY[0x24BDF5578], v23, v1 + 169);
  v59 = v1[47];
  *(_QWORD *)(v5 - 216) = v1[49];
  *(_QWORD *)(v5 - 208) = v59;
  *(_QWORD *)(v5 - 200) = v1[46];
  *(_QWORD *)(v5 - 192) = MEMORY[0x24BDF10F0];
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v64 = sub_23BF0A154();
  sub_23BFAE500((uint64_t)sub_23BF69A08, (uint64_t)(v1 + 138), (uint64_t)sub_23BF69A14, (uint64_t)(v1 + 110), (void (*)(uint64_t))sub_23BF69A20);
  v1[166] = v58;
  v1[167] = OpaqueTypeConformance2;
  v1[168] = v64;
  MEMORY[0x242615198](MEMORY[0x24BDF4AF8], v24, v1 + 166);
  v60 = v1[52];
  sub_23BEA72EC((uint64_t)v26, v24, v60);
  v61 = *(uint64_t (**)(uint64_t, uint64_t))(v1[54] + 8);
  v61((uint64_t)v26, v24);
  sub_23BEA5C0C(v60, v24, v1[71]);
  return v61(v60, v24);
}

void sub_23BF5DCC8()
{
  sub_23BF140F8((void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BF5C938);
}

void sub_23BF5DCD4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[56];
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v56 = a8;
  v55 = a7;
  v50 = a6;
  v42 = a4;
  v39 = a2;
  v47 = a1;
  v48 = a9;
  v46 = a23;
  v45 = a22;
  v40 = a13;
  v38 = a12;
  v37 = a11;
  v35 = a10;
  v43 = a24;
  v53 = a25;
  v54 = a20;
  v57 = a21;
  v36 = a14;
  v52 = a15;
  v34 = a16;
  v49 = a17;
  v51 = a26;
  v28 = sub_23BFF8AF4();
  MEMORY[0x24BDAC7A8](v28);
  v41 = (char *)v31 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_23BFF8B0C();
  v44 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v33 = (char *)v31 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31[55] = *(_QWORD *)(a26 + 32);
  v31[54] = swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  v31[53] = sub_23BFF94C0();
  v58 = a5;
  v59 = a3;
  v60 = a3;
  v61 = a19;
  v62 = a18;
  v63 = a18;
  type metadata accessor for ActionCardView();
}

void sub_23BF5DE80(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1[47] = a1;
  v8 = MEMORY[0x242615198](&unk_23C005608, a1);
  v1[46] = v8;
  *(_QWORD *)(v6 - 216) = a1;
  *(_QWORD *)(v6 - 208) = v8;
  v1[40] = MEMORY[0x24261512C](255, v6 - 216, MEMORY[0x24BDF3948], 0);
  v1[45] = sub_23BFF8ADC();
  v9 = (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088];
  v10 = sub_23BFF862C();
  v11 = sub_23BFF862C();
  v1[44] = v11;
  v12 = sub_23BEA1BB8((unint64_t *)&qword_256AE3908, v9, MEMORY[0x24BDF1078]);
  v1[50] = v12;
  *(_QWORD *)(v6 - 104) = v2;
  *(_QWORD *)(v6 - 96) = v12;
  v13 = v2;
  v14 = MEMORY[0x24BDED308];
  v15 = MEMORY[0x242615198](MEMORY[0x24BDED308], v10, v6 - 104);
  v16 = MEMORY[0x24BDEEC40];
  *(_QWORD *)(v6 - 120) = v15;
  *(_QWORD *)(v6 - 112) = v16;
  v17 = MEMORY[0x242615198](v14, v11, v6 - 120);
  v1[43] = v17;
  *(_QWORD *)(v6 - 216) = v11;
  *(_QWORD *)(v6 - 208) = v17;
  v18 = MEMORY[0x24BDF3100];
  MEMORY[0x24261512C](255, v6 - 216, MEMORY[0x24BDF3100], 0);
  v19 = sub_23BFF862C();
  v1[37] = v19;
  v20 = MEMORY[0x24BDEBEE0];
  *(_QWORD *)(v6 - 136) = v15;
  *(_QWORD *)(v6 - 128) = v20;
  v21 = MEMORY[0x242615198](v14, v19, v6 - 136);
  v1[36] = v21;
  *(_QWORD *)(v6 - 216) = v19;
  *(_QWORD *)(v6 - 208) = v21;
  MEMORY[0x24261512C](255, v6 - 216, v18, 0);
  v1[34] = sub_23BFF8968();
  v1[38] = sub_23BFF8FD4();
  v1[35] = sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3910);
  v1[41] = sub_23BFF8968();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3918);
  v1[42] = sub_23BFF8968();
  v1[26] = sub_23BFF8968();
  *(_QWORD *)(v6 - 216) = v5;
  *(_QWORD *)(v6 - 208) = v4;
  v22 = v1[80];
  *(_QWORD *)(v6 - 200) = v4;
  *(_QWORD *)(v6 - 192) = v22;
  *(_QWORD *)(v6 - 184) = v1[76];
  *(_QWORD *)(v6 - 176) = v13;
  *(_QWORD *)(v6 - 168) = v3;
  *(_QWORD *)(v6 - 160) = v3;
  v23 = v1[77];
  *(_QWORD *)(v6 - 152) = v1[81];
  *(_QWORD *)(v6 - 144) = v23;
  type metadata accessor for FullWidthStageView();
}

void sub_23BF5E0A4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1[40] = a1;
  v8 = MEMORY[0x242615198](&unk_23C0077B8, a1);
  v1[39] = v8;
  *(_QWORD *)(v6 - 216) = a1;
  *(_QWORD *)(v6 - 208) = v8;
  v9 = MEMORY[0x24BDF3948];
  MEMORY[0x24261512C](255, v6 - 216, MEMORY[0x24BDF3948], 0);
  v1[51] = v4;
  v1[52] = v3;
  v11 = type metadata accessor for InfoActionCardView(255, v4, v3, v10);
  v1[33] = v11;
  v12 = MEMORY[0x242615198](&unk_23C007F20, v11);
  v1[32] = v12;
  *(_QWORD *)(v6 - 216) = v11;
  *(_QWORD *)(v6 - 208) = v12;
  MEMORY[0x24261512C](255, v6 - 216, v9, 0);
  v1[31] = sub_23BFF8968();
  v1[12] = sub_23BFF8968();
  v13 = v2;
  v15 = type metadata accessor for LargeBrickView(255, v5, v2, v14);
  v1[30] = v15;
  v16 = MEMORY[0x242615198](&protocol conformance descriptor for LargeBrickView<A>, v15);
  v1[29] = v16;
  *(_QWORD *)(v6 - 216) = v15;
  *(_QWORD *)(v6 - 208) = v16;
  v17 = v9;
  MEMORY[0x24261512C](255, v6 - 216, v9, 0);
  v19 = type metadata accessor for DynamicBrickView(255, v5, v13, v18);
  v1[28] = v19;
  v20 = MEMORY[0x242615198](&protocol conformance descriptor for DynamicBrickView<A>, v19);
  v1[27] = v20;
  *(_QWORD *)(v6 - 216) = v19;
  *(_QWORD *)(v6 - 208) = v20;
  MEMORY[0x24261512C](255, v6 - 216, v17, 0);
  v1[19] = sub_23BFF8968();
  v22 = type metadata accessor for MonogramVerticalStackView(255, v5, v13, v21);
  v1[25] = v22;
  v23 = MEMORY[0x242615198](&unk_23BFFA1F4, v22);
  v1[24] = v23;
  *(_QWORD *)(v6 - 216) = v22;
  *(_QWORD *)(v6 - 208) = v23;
  MEMORY[0x24261512C](255, v6 - 216, v17, 0);
  v1[22] = sub_23BFF8968();
  v1[23] = sub_23BFF8968();
  sub_23BFF8968();
  v25 = type metadata accessor for StandardCardView(255, v5, v13, v24);
  v1[21] = v25;
  v26 = MEMORY[0x242615198](&unk_23C007BD0, v25);
  v1[20] = v26;
  *(_QWORD *)(v6 - 216) = v25;
  *(_QWORD *)(v6 - 208) = v26;
  MEMORY[0x24261512C](255, v6 - 216, v17, 0);
  *(_QWORD *)(v6 - 216) = v5;
  *(_QWORD *)(v6 - 208) = v4;
  *(_QWORD *)(v6 - 200) = v13;
  *(_QWORD *)(v6 - 192) = v3;
  type metadata accessor for StandardHorizontalStackView();
}

void sub_23BF5E2E4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t OpaqueTypeConformance2;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t AssociatedConformanceWitness;
  uint64_t v86;
  uint64_t v87;

  v1[18] = a1;
  v8 = MEMORY[0x242615198](&unk_23C0008E8, a1);
  v1[17] = v8;
  *(_QWORD *)(v6 - 216) = a1;
  *(_QWORD *)(v6 - 208) = v8;
  MEMORY[0x24261512C](255, v6 - 216, v2, 0);
  v1[2] = sub_23BFF8968();
  v10 = type metadata accessor for StandardVerticalStackView(255, v5, v4, v9);
  v1[11] = v10;
  v11 = MEMORY[0x242615198](&unk_23C0073B8, v10);
  v1[16] = v11;
  *(_QWORD *)(v6 - 216) = v10;
  *(_QWORD *)(v6 - 208) = v11;
  MEMORY[0x24261512C](255, v6 - 216, v2, 0);
  v13 = type metadata accessor for TallCardView(255, v5, v4, v12);
  v14 = MEMORY[0x242615198](&unk_23BFFF0E4, v13);
  v1[15] = v14;
  *(_QWORD *)(v6 - 216) = v13;
  *(_QWORD *)(v6 - 208) = v14;
  MEMORY[0x24261512C](255, v6 - 216, v2, 0);
  v1[14] = sub_23BFF8968();
  *v1 = sub_23BFF8968();
  v1[48] = v5;
  v1[49] = v4;
  v15 = v4;
  v17 = type metadata accessor for VerticalStackCard(255, v5, v4, v16);
  v18 = MEMORY[0x242615198](&unk_23C0000E0, v17);
  v1[10] = v18;
  *(_QWORD *)(v6 - 216) = v17;
  *(_QWORD *)(v6 - 208) = v18;
  MEMORY[0x24261512C](255, v6 - 216, v2, 0);
  v1[1] = sub_23BFF8968();
  v20 = type metadata accessor for WideBrickView(255, v5, v15, v19);
  v21 = MEMORY[0x242615198](&protocol conformance descriptor for WideBrickView<A>, v20);
  v1[5] = v21;
  *(_QWORD *)(v6 - 216) = v20;
  *(_QWORD *)(v6 - 208) = v21;
  MEMORY[0x24261512C](255, v6 - 216, v2, 0);
  v1[3] = sub_23BFF8968();
  v1[4] = sub_23BFF8968();
  v22 = v3;
  v1[6] = sub_23BFF8968();
  v1[7] = sub_23BFF8FD4();
  v1[8] = sub_23BFF862C();
  v1[9] = sub_23BFF8968();
  v1[13] = sub_23BFF862C();
  v1[45] = sub_23BFF862C();
  v23 = v1[46];
  *(_QWORD *)(v6 - 216) = v1[47];
  *(_QWORD *)(v6 - 208) = v23;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v25 = v1[43];
  *(_QWORD *)(v6 - 216) = v1[44];
  *(_QWORD *)(v6 - 208) = v25;
  v26 = swift_getOpaqueTypeConformance2();
  v27 = v1[36];
  *(_QWORD *)(v6 - 216) = v1[37];
  *(_QWORD *)(v6 - 208) = v27;
  v28 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v6 - 232) = v26;
  *(_QWORD *)(v6 - 224) = v28;
  v29 = MEMORY[0x24BDEF3E0];
  *(_QWORD *)(v6 - 240) = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v1[34], v6 - 232);
  v30 = MEMORY[0x242615198](MEMORY[0x24BDF3F50], v1[38], v6 - 240);
  v31 = MEMORY[0x24BDECC60];
  *(_QWORD *)(v6 - 256) = v30;
  *(_QWORD *)(v6 - 248) = v31;
  v32 = MEMORY[0x242615198](MEMORY[0x24BDED308], v1[35], v6 - 256);
  v33 = sub_23BEA1F94(&qword_256AE3920, &qword_256AE3910, MEMORY[0x24BDF43B0]);
  v1[160] = v32;
  v1[161] = v33;
  v34 = MEMORY[0x242615198](v29, v1[41], v1 + 160);
  v35 = sub_23BEA1F94(&qword_256AE3928, &qword_256AE3918, MEMORY[0x24BDF4700]);
  v1[158] = v34;
  v1[159] = v35;
  v36 = MEMORY[0x242615198](v29, v1[42], v1 + 158);
  v1[156] = OpaqueTypeConformance2;
  v1[157] = v36;
  v37 = MEMORY[0x242615198](v29, v1[26], v1 + 156);
  v38 = v1[39];
  *(_QWORD *)(v6 - 216) = v1[40];
  *(_QWORD *)(v6 - 208) = v38;
  v39 = swift_getOpaqueTypeConformance2();
  v40 = v1[32];
  *(_QWORD *)(v6 - 216) = v1[33];
  *(_QWORD *)(v6 - 208) = v40;
  v41 = swift_getOpaqueTypeConformance2();
  v1[154] = v39;
  v1[155] = v41;
  v42 = MEMORY[0x242615198](v29, v1[31], v1 + 154);
  v1[152] = v37;
  v1[153] = v42;
  v43 = MEMORY[0x242615198](v29, v1[12], v1 + 152);
  v44 = v1[29];
  *(_QWORD *)(v6 - 216) = v1[30];
  *(_QWORD *)(v6 - 208) = v44;
  v45 = swift_getOpaqueTypeConformance2();
  v46 = v1[27];
  *(_QWORD *)(v6 - 216) = v1[28];
  *(_QWORD *)(v6 - 208) = v46;
  v47 = swift_getOpaqueTypeConformance2();
  v1[150] = v45;
  v1[151] = v47;
  v48 = MEMORY[0x242615198](v29, v1[19], v1 + 150);
  v49 = v1[24];
  *(_QWORD *)(v6 - 216) = v1[25];
  *(_QWORD *)(v6 - 208) = v49;
  v1[148] = swift_getOpaqueTypeConformance2();
  v1[149] = v47;
  v50 = MEMORY[0x242615198](v29, v1[22], v1 + 148);
  v1[146] = v48;
  v1[147] = v50;
  v51 = MEMORY[0x242615198](v29, v1[23], v1 + 146);
  v1[144] = v43;
  v1[145] = v51;
  v52 = MEMORY[0x242615198](v29, v22, v1 + 144);
  v53 = v1[20];
  *(_QWORD *)(v6 - 216) = v1[21];
  *(_QWORD *)(v6 - 208) = v53;
  v54 = swift_getOpaqueTypeConformance2();
  v55 = v1[17];
  *(_QWORD *)(v6 - 216) = v1[18];
  *(_QWORD *)(v6 - 208) = v55;
  v56 = swift_getOpaqueTypeConformance2();
  v1[142] = v54;
  v1[143] = v56;
  v57 = MEMORY[0x242615198](v29, v1[2], v1 + 142);
  v58 = v1[16];
  *(_QWORD *)(v6 - 216) = v1[11];
  *(_QWORD *)(v6 - 208) = v58;
  v59 = swift_getOpaqueTypeConformance2();
  v60 = v1[15];
  *(_QWORD *)(v6 - 216) = v13;
  *(_QWORD *)(v6 - 208) = v60;
  v61 = swift_getOpaqueTypeConformance2();
  v1[140] = v59;
  v1[141] = v61;
  v62 = MEMORY[0x242615198](v29, v1[14], v1 + 140);
  v1[138] = v57;
  v1[139] = v62;
  v63 = MEMORY[0x242615198](v29, *v1, v1 + 138);
  v64 = v1[10];
  *(_QWORD *)(v6 - 216) = v17;
  *(_QWORD *)(v6 - 208) = v64;
  v1[136] = swift_getOpaqueTypeConformance2();
  v1[137] = v1[81];
  v65 = MEMORY[0x242615198](v29, v1[1], v1 + 136);
  v66 = v1[5];
  *(_QWORD *)(v6 - 216) = v20;
  *(_QWORD *)(v6 - 208) = v66;
  v67 = swift_getOpaqueTypeConformance2();
  v1[134] = v65;
  v1[135] = v67;
  v68 = MEMORY[0x242615198](v29, v1[3], v1 + 134);
  v1[132] = v63;
  v1[133] = v68;
  v69 = MEMORY[0x242615198](v29, v1[4], v1 + 132);
  v1[130] = v52;
  v1[131] = v69;
  v1[129] = MEMORY[0x242615198](v29, v1[6], v1 + 130);
  v1[127] = MEMORY[0x242615198](MEMORY[0x24BDF3F50], v1[7], v1 + 129);
  v1[128] = v1[50];
  v70 = MEMORY[0x24BDED308];
  v71 = MEMORY[0x242615198](MEMORY[0x24BDED308], v1[8], v1 + 127);
  v1[125] = MEMORY[0x24BDF5138];
  v1[126] = v71;
  v72 = MEMORY[0x242615198](v29, v1[9], v1 + 125);
  v73 = MEMORY[0x24BDF0910];
  v1[123] = v72;
  v1[124] = v73;
  v1[121] = MEMORY[0x242615198](v70, v1[13], v1 + 123);
  v1[122] = v73;
  v74 = v1[45];
  v75 = MEMORY[0x242615198](v70, v74, v1 + 121);
  *(_QWORD *)(v6 - 216) = v74;
  *(_QWORD *)(v6 - 208) = v75;
  v76 = v74;
  MEMORY[0x24261512C](255, v6 - 216, MEMORY[0x24BDF30F0], 0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE6510);
  v77 = sub_23BFF862C();
  v78 = sub_23BFF862C();
  *(_QWORD *)(v6 - 216) = v76;
  *(_QWORD *)(v6 - 208) = v75;
  v79 = swift_getOpaqueTypeConformance2();
  v80 = sub_23BEA1F94(&qword_256AE6518, &qword_256AE6510, MEMORY[0x24BDEF370]);
  v1[119] = v79;
  v1[120] = v80;
  v81 = MEMORY[0x242615198](v70, v77, v1 + 119);
  v82 = MEMORY[0x24BDEDB80];
  v1[117] = v81;
  v1[118] = v82;
  v83 = MEMORY[0x242615198](v70, v78, v1 + 117);
  *(_QWORD *)(v6 - 216) = v78;
  *(_QWORD *)(v6 - 208) = v83;
  MEMORY[0x24261512C](255, v6 - 216, MEMORY[0x24BEC6710], 0);
  sub_23BFF8968();
  v84 = v1[74];
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v86 = v1[79];
  *(_QWORD *)(v6 - 216) = v84;
  *(_QWORD *)(v6 - 208) = v86;
  v87 = v1[78];
  *(_QWORD *)(v6 - 200) = AssociatedConformanceWitness;
  *(_QWORD *)(v6 - 192) = v87;
  type metadata accessor for CanvasContextMenu();
}

uint64_t sub_23BF5EAE4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedConformanceWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(_BYTE *, uint64_t);
  _BYTE v39[96];

  v8 = sub_23BFF862C();
  v9 = v1[53];
  v10 = MEMORY[0x242615198](MEMORY[0x24BEE12D8], v9);
  v11 = v1[54];
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(_QWORD *)(v6 - 216) = v9;
  *(_QWORD *)(v6 - 208) = v11;
  *(_QWORD *)(v6 - 200) = v8;
  *(_QWORD *)(v6 - 192) = v10;
  *(_QWORD *)(v6 - 184) = AssociatedConformanceWitness;
  v13 = sub_23BFF910C();
  *(_QWORD *)(v6 - 216) = v2;
  *(_QWORD *)(v6 - 208) = v3;
  v1[115] = swift_getOpaqueTypeConformance2();
  v1[116] = v3;
  v14 = MEMORY[0x242615198](v4, v5, v1 + 115);
  v15 = MEMORY[0x242615198](&unk_23BFFEE18, a1);
  v1[113] = v14;
  v1[114] = v15;
  v16 = MEMORY[0x24BDED308];
  v1[112] = MEMORY[0x242615198](MEMORY[0x24BDED308], v8, v1 + 113);
  MEMORY[0x242615198](MEMORY[0x24BDF4A08], v13, v1 + 112);
  v17 = sub_23BFF8410();
  v18 = sub_23BFF862C();
  v1[110] = MEMORY[0x242615198](MEMORY[0x24BDEB168], v17);
  v1[111] = MEMORY[0x24BDEBEE0];
  v19 = MEMORY[0x242615198](v16, v18, v1 + 110);
  *(_QWORD *)(v6 - 216) = v18;
  *(_QWORD *)(v6 - 208) = v19;
  MEMORY[0x24261512C](255, v6 - 216, MEMORY[0x24BDF2D58], 0);
  *(_QWORD *)(v6 - 216) = v18;
  *(_QWORD *)(v6 - 208) = v19;
  swift_getOpaqueTypeConformance2();
  v20 = sub_23BFF8434();
  v1[55] = *(_QWORD *)(v20 - 8);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v23 = &v39[-v22];
  v24 = MEMORY[0x242615198](MEMORY[0x24BDEB238], v20, v21);
  v25 = v1[56];
  *(_QWORD *)(v6 - 216) = v20;
  *(_QWORD *)(v6 - 208) = v25;
  v26 = MEMORY[0x24BDF10F0];
  *(_QWORD *)(v6 - 200) = v24;
  *(_QWORD *)(v6 - 192) = v26;
  v27 = MEMORY[0x24261512C](0, v6 - 216, MEMORY[0x24BDF3000], 0);
  v1[54] = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v29 = &v39[-((v28 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v30);
  v32 = &v39[-v31];
  sub_23BFF8B24();
  v1[84] = v1[63];
  v1[85] = v1[51];
  v1[86] = v1[66];
  v1[87] = v1[48];
  v1[88] = v1[74];
  v1[89] = v1[79];
  v1[90] = v1[80];
  v1[91] = v1[59];
  v1[92] = v1[61];
  v1[93] = v1[62];
  v1[94] = v1[64];
  v1[95] = v1[60];
  v1[96] = v1[76];
  v1[97] = v1[58];
  v1[98] = v1[73];
  v1[99] = v1[52];
  v1[100] = v1[49];
  v1[101] = v1[78];
  v1[102] = v1[81];
  v1[103] = v1[69];
  v1[104] = v1[70];
  v1[105] = v1[67];
  v1[106] = v1[77];
  v1[107] = v1[75];
  v1[108] = v1[71];
  sub_23BFF8440();
  sub_23BFF8AE8();
  v33 = v1[57];
  sub_23BFF8B00();
  v34 = v33;
  v35 = v25;
  v36 = MEMORY[0x24BDF10F0];
  sub_23BFF8E30();
  (*(void (**)(uint64_t, uint64_t))(v1[68] + 8))(v34, v35);
  (*(void (**)(_BYTE *, uint64_t))(v1[55] + 8))(v23, v20);
  *(_QWORD *)(v6 - 216) = v20;
  *(_QWORD *)(v6 - 208) = v35;
  *(_QWORD *)(v6 - 200) = v24;
  *(_QWORD *)(v6 - 192) = v36;
  swift_getOpaqueTypeConformance2();
  sub_23BEA72EC((uint64_t)v29, v27, (uint64_t)v32);
  v37 = *(void (**)(_BYTE *, uint64_t))(v1[54] + 8);
  v37(v29, v27);
  sub_23BEA5C0C((uint64_t)v32, v27, v1[72]);
  return ((uint64_t (*)(_BYTE *, uint64_t))v37)(v32, v27);
}

void sub_23BF5EF1C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[196];

  v30[74] = a8;
  v30[67] = a7;
  v30[76] = a6;
  v30[54] = a4;
  v30[73] = a2;
  v30[59] = a1;
  v30[60] = a9;
  v30[57] = a23;
  v30[56] = a22;
  v30[53] = a13;
  v30[72] = a12;
  v30[71] = a11;
  v30[69] = a10;
  v30[55] = a24;
  v30[66] = a25;
  v30[65] = a20;
  v30[79] = a21;
  v30[70] = a14;
  v30[78] = a15;
  v30[68] = a16;
  v30[75] = a17;
  v30[77] = a26;
  v28 = sub_23BFF89D4();
  MEMORY[0x24BDAC7A8](v28);
  v30[58] = (char *)v30 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30[52] = *(_QWORD *)(a26 + 32);
  v30[51] = swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  v30[50] = sub_23BFF94C0();
  v30[108] = a5;
  v30[109] = a3;
  v30[110] = a3;
  v30[111] = a19;
  v30[112] = a18;
  v30[113] = a18;
  type metadata accessor for ActionCardView();
}

void sub_23BF5F08C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1[48] = a1;
  v8 = MEMORY[0x242615198](&unk_23C005608, a1);
  v1[47] = v8;
  v1[108] = a1;
  v1[109] = v8;
  v1[41] = MEMORY[0x24261512C](255, v1 + 108, MEMORY[0x24BDF3948], 0);
  v1[46] = sub_23BFF8ADC();
  v9 = (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088];
  v10 = sub_23BFF862C();
  v11 = sub_23BFF862C();
  v1[45] = v11;
  v12 = sub_23BEA1BB8((unint64_t *)&qword_256AE3908, v9, MEMORY[0x24BDF1078]);
  v1[49] = v12;
  *(_QWORD *)(v6 - 104) = v3;
  *(_QWORD *)(v6 - 96) = v12;
  v13 = MEMORY[0x24BDED308];
  v14 = MEMORY[0x242615198](MEMORY[0x24BDED308], v10, v6 - 104);
  v15 = MEMORY[0x24BDEEC40];
  *(_QWORD *)(v6 - 120) = v14;
  *(_QWORD *)(v6 - 112) = v15;
  v16 = MEMORY[0x242615198](v13, v11, v6 - 120);
  v1[44] = v16;
  v1[108] = v11;
  v1[109] = v16;
  v17 = MEMORY[0x24BDF3100];
  MEMORY[0x24261512C](255, v1 + 108, MEMORY[0x24BDF3100], 0);
  v18 = sub_23BFF862C();
  v1[28] = v18;
  v19 = MEMORY[0x24BDEBEE0];
  *(_QWORD *)(v6 - 136) = v14;
  *(_QWORD *)(v6 - 128) = v19;
  v20 = MEMORY[0x242615198](v13, v18, v6 - 136);
  v1[38] = v20;
  v1[108] = v18;
  v1[109] = v20;
  MEMORY[0x24261512C](255, v1 + 108, v17, 0);
  v1[36] = sub_23BFF8968();
  v1[39] = sub_23BFF8FD4();
  v1[37] = sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3910);
  v1[42] = sub_23BFF8968();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3918);
  v1[43] = sub_23BFF8968();
  v1[27] = sub_23BFF8968();
  v1[108] = v2;
  v1[109] = v4;
  v1[110] = v4;
  v1[111] = v1[74];
  v1[112] = v1[78];
  v1[113] = v3;
  v1[114] = v5;
  v1[115] = v5;
  v1[116] = v1[79];
  v1[117] = v1[66];
  type metadata accessor for FullWidthStageView();
}

void sub_23BF5F2D0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1[41] = a1;
  v7 = MEMORY[0x242615198](&unk_23C0077B8, a1);
  v1[40] = v7;
  v1[108] = a1;
  v1[109] = v7;
  v8 = MEMORY[0x24BDF3948];
  MEMORY[0x24261512C](255, v1 + 108, MEMORY[0x24BDF3948], 0);
  v9 = v2;
  v1[63] = v2;
  v1[64] = v5;
  v11 = type metadata accessor for InfoActionCardView(255, v2, v5, v10);
  v1[35] = v11;
  v12 = MEMORY[0x242615198](&unk_23C007F20, v11);
  v1[34] = v12;
  v1[108] = v11;
  v1[109] = v12;
  MEMORY[0x24261512C](255, v1 + 108, v8, 0);
  v1[33] = sub_23BFF8968();
  v1[13] = sub_23BFF8968();
  v14 = type metadata accessor for LargeBrickView(255, v3, v4, v13);
  v1[32] = v14;
  v15 = MEMORY[0x242615198](&protocol conformance descriptor for LargeBrickView<A>, v14);
  v1[31] = v15;
  v1[108] = v14;
  v1[109] = v15;
  MEMORY[0x24261512C](255, v1 + 108, v8, 0);
  v17 = type metadata accessor for DynamicBrickView(255, v3, v4, v16);
  v1[30] = v17;
  v18 = MEMORY[0x242615198](&protocol conformance descriptor for DynamicBrickView<A>, v17);
  v1[29] = v18;
  v1[108] = v17;
  v1[109] = v18;
  MEMORY[0x24261512C](255, v1 + 108, v8, 0);
  v1[20] = sub_23BFF8968();
  v20 = type metadata accessor for MonogramVerticalStackView(255, v3, v4, v19);
  v1[26] = v20;
  v21 = MEMORY[0x242615198](&unk_23BFFA1F4, v20);
  v1[25] = v21;
  v1[108] = v20;
  v1[109] = v21;
  MEMORY[0x24261512C](255, v1 + 108, v8, 0);
  v1[23] = sub_23BFF8968();
  v1[24] = sub_23BFF8968();
  v1[1] = sub_23BFF8968();
  v23 = type metadata accessor for StandardCardView(255, v3, v4, v22);
  v1[22] = v23;
  v24 = MEMORY[0x242615198](&unk_23C007BD0, v23);
  v1[21] = v24;
  v1[108] = v23;
  v1[109] = v24;
  MEMORY[0x24261512C](255, v1 + 108, v8, 0);
  v1[108] = v3;
  v1[109] = v9;
  v1[110] = v4;
  v1[111] = v5;
  type metadata accessor for StandardHorizontalStackView();
}

void sub_23BF5F530(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t OpaqueTypeConformance2;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t AssociatedConformanceWitness;

  v1[19] = a1;
  v7 = MEMORY[0x242615198](&unk_23C0008E8, a1);
  v1[18] = v7;
  v1[108] = a1;
  v1[109] = v7;
  MEMORY[0x24261512C](255, v1 + 108, v4, 0);
  v1[4] = sub_23BFF8968();
  v8 = v2;
  v10 = type metadata accessor for StandardVerticalStackView(255, v2, v3, v9);
  v11 = MEMORY[0x242615198](&unk_23C0073B8, v10);
  v1[17] = v11;
  v1[108] = v10;
  v1[109] = v11;
  MEMORY[0x24261512C](255, v1 + 108, v4, 0);
  v13 = type metadata accessor for TallCardView(255, v8, v3, v12);
  v14 = MEMORY[0x242615198](&unk_23BFFF0E4, v13);
  v1[16] = v14;
  v1[108] = v13;
  v1[109] = v14;
  MEMORY[0x24261512C](255, v1 + 108, v4, 0);
  v1[15] = sub_23BFF8968();
  v1[2] = sub_23BFF8968();
  v1[61] = v8;
  v1[62] = v3;
  v16 = type metadata accessor for VerticalStackCard(255, v8, v3, v15);
  v17 = MEMORY[0x242615198](&unk_23C0000E0, v16);
  v1[12] = v17;
  v1[108] = v16;
  v1[109] = v17;
  MEMORY[0x24261512C](255, v1 + 108, v4, 0);
  v1[3] = sub_23BFF8968();
  v19 = type metadata accessor for WideBrickView(255, v8, v3, v18);
  v20 = MEMORY[0x242615198](&protocol conformance descriptor for WideBrickView<A>, v19);
  v1[7] = v20;
  v1[108] = v19;
  v1[109] = v20;
  MEMORY[0x24261512C](255, v1 + 108, v4, 0);
  v1[5] = sub_23BFF8968();
  v1[6] = sub_23BFF8968();
  v1[8] = sub_23BFF8968();
  v1[9] = sub_23BFF8FD4();
  v1[10] = sub_23BFF862C();
  v1[11] = sub_23BFF8968();
  v1[14] = sub_23BFF862C();
  v1[46] = sub_23BFF862C();
  v1[108] = v1[48];
  v1[109] = v1[47];
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v1[108] = v1[45];
  v1[109] = v1[44];
  v22 = swift_getOpaqueTypeConformance2();
  v1[108] = v1[28];
  v1[109] = v1[38];
  v23 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v5 - 152) = v22;
  *(_QWORD *)(v5 - 144) = v23;
  v24 = MEMORY[0x24BDEF3E0];
  *(_QWORD *)(v5 - 160) = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v1[36], v5 - 152);
  v25 = MEMORY[0x242615198](MEMORY[0x24BDF3F50], v1[39], v5 - 160);
  v26 = MEMORY[0x24BDECC60];
  *(_QWORD *)(v5 - 176) = v25;
  *(_QWORD *)(v5 - 168) = v26;
  v27 = MEMORY[0x242615198](MEMORY[0x24BDED308], v1[37], v5 - 176);
  v28 = sub_23BEA1F94(&qword_256AE3920, &qword_256AE3910, MEMORY[0x24BDF43B0]);
  *(_QWORD *)(v5 - 192) = v27;
  *(_QWORD *)(v5 - 184) = v28;
  v29 = MEMORY[0x242615198](v24, v1[42], v5 - 192);
  v30 = sub_23BEA1F94(&qword_256AE3928, &qword_256AE3918, MEMORY[0x24BDF4700]);
  *(_QWORD *)(v5 - 208) = v29;
  *(_QWORD *)(v5 - 200) = v30;
  v31 = MEMORY[0x242615198](v24, v1[43], v5 - 208);
  *(_QWORD *)(v5 - 224) = OpaqueTypeConformance2;
  *(_QWORD *)(v5 - 216) = v31;
  v32 = MEMORY[0x242615198](v24, v1[27], v5 - 224);
  v1[108] = v1[41];
  v1[109] = v1[40];
  v33 = swift_getOpaqueTypeConformance2();
  v1[108] = v1[35];
  v1[109] = v1[34];
  v34 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v5 - 240) = v33;
  *(_QWORD *)(v5 - 232) = v34;
  v35 = MEMORY[0x242615198](v24, v1[33], v5 - 240);
  *(_QWORD *)(v5 - 256) = v32;
  *(_QWORD *)(v5 - 248) = v35;
  v36 = MEMORY[0x242615198](v24, v1[13], v5 - 256);
  v1[108] = v1[32];
  v1[109] = v1[31];
  v37 = swift_getOpaqueTypeConformance2();
  v1[108] = v1[30];
  v1[109] = v1[29];
  v38 = swift_getOpaqueTypeConformance2();
  v1[172] = v37;
  v1[173] = v38;
  v39 = MEMORY[0x242615198](v24, v1[20], v1 + 172);
  v1[108] = v1[26];
  v1[109] = v1[25];
  v1[170] = swift_getOpaqueTypeConformance2();
  v1[171] = v38;
  v40 = MEMORY[0x242615198](v24, v1[23], v1 + 170);
  v1[168] = v39;
  v1[169] = v40;
  v41 = MEMORY[0x242615198](v24, v1[24], v1 + 168);
  v1[166] = v36;
  v1[167] = v41;
  v42 = MEMORY[0x242615198](v24, v1[1], v1 + 166);
  v1[108] = v1[22];
  v1[109] = v1[21];
  v43 = swift_getOpaqueTypeConformance2();
  v1[108] = v1[19];
  v1[109] = v1[18];
  v44 = swift_getOpaqueTypeConformance2();
  v1[164] = v43;
  v1[165] = v44;
  v45 = MEMORY[0x242615198](v24, v1[4], v1 + 164);
  v1[108] = v10;
  v1[109] = v1[17];
  v46 = swift_getOpaqueTypeConformance2();
  v1[108] = v13;
  v1[109] = v1[16];
  v47 = swift_getOpaqueTypeConformance2();
  v1[162] = v46;
  v1[163] = v47;
  v48 = MEMORY[0x242615198](v24, v1[15], v1 + 162);
  v1[160] = v45;
  v1[161] = v48;
  v49 = MEMORY[0x242615198](v24, v1[2], v1 + 160);
  v1[108] = v16;
  v1[109] = v1[12];
  v1[158] = swift_getOpaqueTypeConformance2();
  v1[159] = v1[79];
  v50 = MEMORY[0x242615198](v24, v1[3], v1 + 158);
  v1[108] = v19;
  v1[109] = v1[7];
  v51 = swift_getOpaqueTypeConformance2();
  v1[156] = v50;
  v1[157] = v51;
  v52 = MEMORY[0x242615198](v24, v1[5], v1 + 156);
  v1[154] = v49;
  v1[155] = v52;
  v53 = MEMORY[0x242615198](v24, v1[6], v1 + 154);
  v1[152] = v42;
  v1[153] = v53;
  v54 = v24;
  v1[151] = MEMORY[0x242615198](v24, v1[8], v1 + 152);
  v1[149] = MEMORY[0x242615198](MEMORY[0x24BDF3F50], v1[9], v1 + 151);
  v1[150] = v1[49];
  v55 = MEMORY[0x24BDED308];
  v56 = MEMORY[0x242615198](MEMORY[0x24BDED308], v1[10], v1 + 149);
  v1[147] = MEMORY[0x24BDF5138];
  v1[148] = v56;
  v57 = MEMORY[0x242615198](v54, v1[11], v1 + 147);
  v58 = MEMORY[0x24BDF0910];
  v1[145] = v57;
  v1[146] = v58;
  v1[143] = MEMORY[0x242615198](v55, v1[14], v1 + 145);
  v1[144] = v58;
  v59 = v1[46];
  v60 = MEMORY[0x242615198](v55, v59, v1 + 143);
  v1[108] = v59;
  v61 = v59;
  v1[109] = v60;
  MEMORY[0x24261512C](255, v1 + 108, MEMORY[0x24BDF30F0], 0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE6510);
  v62 = sub_23BFF862C();
  v63 = sub_23BFF862C();
  v1[108] = v61;
  v1[109] = v60;
  v64 = swift_getOpaqueTypeConformance2();
  v65 = sub_23BEA1F94(&qword_256AE6518, &qword_256AE6510, MEMORY[0x24BDEF370]);
  v1[141] = v64;
  v1[142] = v65;
  v66 = MEMORY[0x242615198](v55, v62, v1 + 141);
  v67 = MEMORY[0x24BDEDB80];
  v1[139] = v66;
  v1[140] = v67;
  v68 = MEMORY[0x242615198](v55, v63, v1 + 139);
  v1[108] = v63;
  v1[109] = v68;
  MEMORY[0x24261512C](255, v1 + 108, MEMORY[0x24BEC6710], 0);
  sub_23BFF8968();
  v69 = v1[76];
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v1[108] = v69;
  v1[109] = v1[67];
  v1[110] = AssociatedConformanceWitness;
  v1[111] = v1[65];
  type metadata accessor for CanvasContextMenu();
}

void sub_23BF5FD78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t AssociatedConformanceWitness;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v15 = sub_23BFF862C();
  v16 = v9[50];
  v17 = MEMORY[0x242615198](MEMORY[0x24BEE12D8], v16);
  v18 = v9[51];
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9[108] = v16;
  v9[109] = v18;
  v9[110] = v15;
  v9[111] = v17;
  v9[112] = AssociatedConformanceWitness;
  v20 = sub_23BFF910C();
  v9[108] = v10;
  v9[109] = v11;
  v9[137] = swift_getOpaqueTypeConformance2();
  v9[138] = v11;
  v21 = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v12, v9 + 137);
  v22 = MEMORY[0x242615198](&unk_23BFFEE18, a1);
  v9[135] = v21;
  v9[136] = v22;
  v23 = MEMORY[0x24BDED308];
  v9[134] = MEMORY[0x242615198](MEMORY[0x24BDED308], v15, v9 + 135);
  v24 = MEMORY[0x24BDF4A08];
  v9[41] = v20;
  v9[42] = MEMORY[0x242615198](v24, v20, v9 + 134);
  v25 = sub_23BFF8410();
  v9[52] = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v9[45] = (char *)&a9 - v26;
  v9[47] = v25;
  v27 = sub_23BFF862C();
  v28 = *(_QWORD *)(v27 - 8);
  v9[48] = v27;
  v9[51] = v28;
  v29 = MEMORY[0x24BDAC7A8](v27);
  v9[44] = (char *)&a9 - v30;
  v31 = MEMORY[0x242615198](MEMORY[0x24BDEB168], v25, v29);
  v9[43] = v31;
  v9[132] = v31;
  v9[133] = MEMORY[0x24BDEBEE0];
  v32 = MEMORY[0x242615198](v23, v27, v9 + 132);
  v9[46] = v32;
  v9[108] = v27;
  v9[109] = v32;
  v33 = MEMORY[0x24261512C](0, v9 + 108, MEMORY[0x24BDF2D58], 0);
  v34 = *(_QWORD *)(v33 - 8);
  v9[49] = v33;
  v9[50] = v34;
  MEMORY[0x24BDAC7A8](v33);
  v9[39] = (char *)&a9 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v36);
  v9[40] = (char *)&a9 - v37;
  v9[38] = sub_23BFF8830();
  v9[108] = v9[73];
  v9[109] = v9[63];
  v38 = v9[53];
  v9[110] = v9[54];
  v9[111] = v9[61];
  v9[112] = v9[76];
  v9[113] = v9[67];
  v9[114] = v9[74];
  v9[115] = v9[69];
  v9[116] = v9[71];
  v9[117] = v9[72];
  v9[118] = v38;
  v9[119] = v9[70];
  v9[120] = v9[78];
  v9[121] = v9[68];
  v9[122] = v9[75];
  v9[123] = v9[64];
  v9[124] = v9[62];
  v9[125] = v13;
  v9[126] = v9[79];
  v39 = v9[57];
  v9[127] = v9[56];
  v9[128] = v39;
  v9[129] = v9[55];
  v9[130] = v9[66];
  v9[131] = v9[77];
  type metadata accessor for OrthogonalView();
}

uint64_t sub_23BF60080(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);

  v10 = v1[59];
  v1[36] = *(_QWORD *)(v10 + *(int *)(a1 + 228) + 8);
  v1[37] = a1;
  v1[82] = v1[73];
  v1[83] = v1[63];
  v1[84] = v4;
  v1[85] = v1[61];
  v1[86] = v1[76];
  v1[87] = v3;
  v1[88] = v2;
  v1[89] = v1[69];
  v1[90] = v1[71];
  v1[91] = v1[72];
  v1[92] = v6;
  v1[93] = v1[70];
  v1[94] = v1[78];
  v1[95] = v1[68];
  v1[96] = v1[75];
  v1[97] = v1[64];
  v1[98] = v1[62];
  v1[99] = v1[65];
  v1[100] = v1[79];
  v1[101] = v7;
  v1[102] = v8;
  v1[103] = v5;
  v1[104] = v9;
  v1[105] = v1[77];
  v1[106] = v10;
  sub_23BF0EF38();
  v11 = v1[45];
  sub_23BFF8404();
  sub_23BF5AFB0();
  sub_23BFF91C0();
  v12 = v1[44];
  v13 = v1[47];
  sub_23BFF8E9C();
  (*(void (**)(uint64_t, uint64_t))(v1[52] + 8))(v11, v13);
  v14 = v1[39];
  v15 = v1[48];
  v16 = v1[46];
  sub_23BFF8DF4();
  (*(void (**)(uint64_t, uint64_t))(v1[51] + 8))(v12, v15);
  v1[108] = v15;
  v1[109] = v16;
  swift_getOpaqueTypeConformance2();
  v17 = v1[40];
  v18 = v1[49];
  sub_23BEA72EC(v14, v18, v17);
  v19 = *(void (**)(uint64_t, uint64_t))(v1[50] + 8);
  v19(v14, v18);
  sub_23BEA5C0C(v17, v18, v1[60]);
  return ((uint64_t (*)(uint64_t, uint64_t))v19)(v17, v18);
}

void sub_23BF602A0()
{
  type metadata accessor for OrthogonalView();
}

void sub_23BF603CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v15 = *(_QWORD *)(a1 - 8);
  v9[55] = a1;
  v9[56] = v15;
  v9[57] = *(_QWORD *)(v15 + 64);
  MEMORY[0x24BDAC7A8](a1);
  v9[54] = (char *)&a9 - v16;
  v9[79] = *(_QWORD *)(v10 + 32);
  v9[72] = swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  v9[53] = sub_23BFF94C0();
  v9[143] = v11;
  v9[144] = v13;
  v9[145] = v13;
  v9[146] = v14;
  v9[147] = v12;
  v9[148] = v12;
  type metadata accessor for ActionCardView();
}

void sub_23BF60478(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1[47] = a1;
  v7 = MEMORY[0x242615198](&unk_23C005608, a1);
  v1[46] = v7;
  v1[143] = a1;
  v1[144] = v7;
  v1[40] = MEMORY[0x24261512C](255, v1 + 143, MEMORY[0x24BDF3948], 0);
  v1[45] = sub_23BFF8ADC();
  v8 = (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088];
  v9 = sub_23BFF862C();
  v10 = sub_23BFF862C();
  v1[44] = v10;
  v11 = sub_23BEA1BB8((unint64_t *)&qword_256AE3908, v8, MEMORY[0x24BDF1078]);
  v1[52] = v11;
  v1[141] = v5;
  v1[142] = v11;
  v12 = MEMORY[0x24BDED308];
  v13 = MEMORY[0x242615198](MEMORY[0x24BDED308], v9, v1 + 141);
  v14 = MEMORY[0x24BDEEC40];
  v1[139] = v13;
  v1[140] = v14;
  v15 = MEMORY[0x242615198](v12, v10, v1 + 139);
  v1[43] = v15;
  v1[143] = v10;
  v1[144] = v15;
  v16 = MEMORY[0x24BDF3100];
  MEMORY[0x24261512C](255, v1 + 143, MEMORY[0x24BDF3100], 0);
  v17 = sub_23BFF862C();
  v1[37] = v17;
  v18 = MEMORY[0x24BDEBEE0];
  v1[137] = v13;
  v1[138] = v18;
  v19 = MEMORY[0x242615198](v12, v17, v1 + 137);
  v1[36] = v19;
  v1[143] = v17;
  v1[144] = v19;
  MEMORY[0x24261512C](255, v1 + 143, v16, 0);
  v1[34] = sub_23BFF8968();
  v1[38] = sub_23BFF8FD4();
  v1[35] = sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3910);
  v1[41] = sub_23BFF8968();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3918);
  v1[42] = sub_23BFF8968();
  v1[26] = sub_23BFF8968();
  v1[143] = v2;
  v1[144] = v4;
  v1[145] = v4;
  v1[146] = v1[80];
  v1[147] = v1[77];
  v1[148] = v5;
  v1[149] = v3;
  v1[150] = v3;
  v1[151] = v1[81];
  v1[152] = v1[78];
  type metadata accessor for FullWidthStageView();
}

void sub_23BF606C4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1[40] = a1;
  v7 = MEMORY[0x242615198](&unk_23C0077B8, a1);
  v1[39] = v7;
  v1[143] = a1;
  v1[144] = v7;
  v8 = MEMORY[0x24BDF3948];
  MEMORY[0x24261512C](255, v1 + 143, MEMORY[0x24BDF3948], 0);
  v1[50] = v4;
  v1[51] = v3;
  v10 = type metadata accessor for InfoActionCardView(255, v4, v3, v9);
  v1[33] = v10;
  v11 = MEMORY[0x242615198](&unk_23C007F20, v10);
  v1[32] = v11;
  v1[143] = v10;
  v1[144] = v11;
  MEMORY[0x24261512C](255, v1 + 143, v8, 0);
  v1[31] = sub_23BFF8968();
  v1[12] = sub_23BFF8968();
  v13 = type metadata accessor for LargeBrickView(255, v2, v5, v12);
  v1[30] = v13;
  v14 = MEMORY[0x242615198](&protocol conformance descriptor for LargeBrickView<A>, v13);
  v1[29] = v14;
  v1[143] = v13;
  v1[144] = v14;
  MEMORY[0x24261512C](255, v1 + 143, v8, 0);
  v16 = type metadata accessor for DynamicBrickView(255, v2, v5, v15);
  v1[28] = v16;
  v17 = MEMORY[0x242615198](&protocol conformance descriptor for DynamicBrickView<A>, v16);
  v1[27] = v17;
  v1[143] = v16;
  v1[144] = v17;
  MEMORY[0x24261512C](255, v1 + 143, v8, 0);
  v1[19] = sub_23BFF8968();
  v19 = type metadata accessor for MonogramVerticalStackView(255, v2, v5, v18);
  v1[25] = v19;
  v20 = MEMORY[0x242615198](&unk_23BFFA1F4, v19);
  v1[24] = v20;
  v1[143] = v19;
  v1[144] = v20;
  MEMORY[0x24261512C](255, v1 + 143, v8, 0);
  v1[22] = sub_23BFF8968();
  v1[23] = sub_23BFF8968();
  *v1 = sub_23BFF8968();
  v22 = type metadata accessor for StandardCardView(255, v2, v5, v21);
  v1[21] = v22;
  v23 = MEMORY[0x242615198](&unk_23C007BD0, v22);
  v1[20] = v23;
  v1[143] = v22;
  v1[144] = v23;
  MEMORY[0x24261512C](255, v1 + 143, v8, 0);
  v1[143] = v2;
  v1[144] = v4;
  v1[145] = v5;
  v1[146] = v3;
  type metadata accessor for StandardHorizontalStackView();
}

void sub_23BF60920(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t OpaqueTypeConformance2;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t AssociatedConformanceWitness;

  v1[18] = a1;
  v6 = MEMORY[0x242615198](&unk_23C0008E8, a1);
  v1[17] = v6;
  v1[143] = a1;
  v1[144] = v6;
  MEMORY[0x24261512C](255, v1 + 143, v2, 0);
  v1[3] = sub_23BFF8968();
  v8 = type metadata accessor for StandardVerticalStackView(255, v3, v4, v7);
  v1[11] = v8;
  v9 = MEMORY[0x242615198](&unk_23C0073B8, v8);
  v1[16] = v9;
  v1[143] = v8;
  v1[144] = v9;
  MEMORY[0x24261512C](255, v1 + 143, v2, 0);
  v11 = type metadata accessor for TallCardView(255, v3, v4, v10);
  v12 = MEMORY[0x242615198](&unk_23BFFF0E4, v11);
  v1[15] = v12;
  v1[143] = v11;
  v1[144] = v12;
  MEMORY[0x24261512C](255, v1 + 143, v2, 0);
  v1[14] = sub_23BFF8968();
  v1[1] = sub_23BFF8968();
  v1[48] = v3;
  v1[49] = v4;
  v14 = type metadata accessor for VerticalStackCard(255, v3, v4, v13);
  v15 = MEMORY[0x242615198](&unk_23C0000E0, v14);
  v1[10] = v15;
  v1[143] = v14;
  v1[144] = v15;
  MEMORY[0x24261512C](255, v1 + 143, v2, 0);
  v1[2] = sub_23BFF8968();
  v17 = type metadata accessor for WideBrickView(255, v3, v4, v16);
  v18 = MEMORY[0x242615198](&protocol conformance descriptor for WideBrickView<A>, v17);
  v1[6] = v18;
  v1[143] = v17;
  v1[144] = v18;
  MEMORY[0x24261512C](255, v1 + 143, v2, 0);
  v1[4] = sub_23BFF8968();
  v1[5] = sub_23BFF8968();
  v1[7] = sub_23BFF8968();
  v1[8] = sub_23BFF8FD4();
  v19 = sub_23BFF862C();
  v1[9] = sub_23BFF8968();
  v1[13] = sub_23BFF862C();
  v1[45] = sub_23BFF862C();
  v1[143] = v1[47];
  v1[144] = v1[46];
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v1[143] = v1[44];
  v1[144] = v1[43];
  v21 = swift_getOpaqueTypeConformance2();
  v1[143] = v1[37];
  v1[144] = v1[36];
  v22 = swift_getOpaqueTypeConformance2();
  v1[135] = v21;
  v1[136] = v22;
  v23 = MEMORY[0x24BDEF3E0];
  v1[134] = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v1[34], v1 + 135);
  v24 = MEMORY[0x242615198](MEMORY[0x24BDF3F50], v1[38], v1 + 134);
  v25 = MEMORY[0x24BDECC60];
  v1[132] = v24;
  v1[133] = v25;
  v26 = MEMORY[0x242615198](MEMORY[0x24BDED308], v1[35], v1 + 132);
  v27 = sub_23BEA1F94(&qword_256AE3920, &qword_256AE3910, MEMORY[0x24BDF43B0]);
  v1[130] = v26;
  v1[131] = v27;
  v28 = MEMORY[0x242615198](v23, v1[41], v1 + 130);
  v29 = sub_23BEA1F94(&qword_256AE3928, &qword_256AE3918, MEMORY[0x24BDF4700]);
  v1[128] = v28;
  v1[129] = v29;
  v30 = MEMORY[0x242615198](v23, v1[42], v1 + 128);
  v1[126] = OpaqueTypeConformance2;
  v1[127] = v30;
  v31 = MEMORY[0x242615198](v23, v1[26], v1 + 126);
  v1[143] = v1[40];
  v1[144] = v1[39];
  v32 = swift_getOpaqueTypeConformance2();
  v1[143] = v1[33];
  v1[144] = v1[32];
  v33 = swift_getOpaqueTypeConformance2();
  v1[124] = v32;
  v1[125] = v33;
  v34 = MEMORY[0x242615198](v23, v1[31], v1 + 124);
  v1[122] = v31;
  v1[123] = v34;
  v35 = MEMORY[0x242615198](v23, v1[12], v1 + 122);
  v1[143] = v1[30];
  v1[144] = v1[29];
  v36 = swift_getOpaqueTypeConformance2();
  v1[143] = v1[28];
  v1[144] = v1[27];
  v37 = swift_getOpaqueTypeConformance2();
  v1[120] = v36;
  v1[121] = v37;
  v38 = MEMORY[0x242615198](v23, v1[19], v1 + 120);
  v1[143] = v1[25];
  v1[144] = v1[24];
  v1[118] = swift_getOpaqueTypeConformance2();
  v1[119] = v37;
  v39 = v23;
  v40 = MEMORY[0x242615198](v23, v1[22], v1 + 118);
  v1[116] = v38;
  v1[117] = v40;
  v41 = MEMORY[0x242615198](v23, v1[23], v1 + 116);
  v1[114] = v35;
  v1[115] = v41;
  v42 = MEMORY[0x242615198](v23, *v1, v1 + 114);
  v1[143] = v1[21];
  v1[144] = v1[20];
  v43 = swift_getOpaqueTypeConformance2();
  v1[143] = v1[18];
  v1[144] = v1[17];
  v44 = swift_getOpaqueTypeConformance2();
  v1[112] = v43;
  v1[113] = v44;
  v45 = MEMORY[0x242615198](v23, v1[3], v1 + 112);
  v1[143] = v1[11];
  v1[144] = v1[16];
  v46 = swift_getOpaqueTypeConformance2();
  v1[143] = v11;
  v1[144] = v1[15];
  v47 = swift_getOpaqueTypeConformance2();
  v1[110] = v46;
  v1[111] = v47;
  v48 = MEMORY[0x242615198](v39, v1[14], v1 + 110);
  v1[108] = v45;
  v1[109] = v48;
  v49 = MEMORY[0x242615198](v39, v1[1], v1 + 108);
  v1[143] = v14;
  v1[144] = v1[10];
  v1[106] = swift_getOpaqueTypeConformance2();
  v1[107] = v1[81];
  v50 = MEMORY[0x242615198](v39, v1[2], v1 + 106);
  v1[143] = v17;
  v1[144] = v1[6];
  v51 = swift_getOpaqueTypeConformance2();
  v1[104] = v50;
  v1[105] = v51;
  v52 = MEMORY[0x242615198](v39, v1[4], v1 + 104);
  v1[102] = v49;
  v1[103] = v52;
  v53 = MEMORY[0x242615198](v39, v1[5], v1 + 102);
  v1[100] = v42;
  v1[101] = v53;
  v1[99] = MEMORY[0x242615198](v39, v1[7], v1 + 100);
  v1[97] = MEMORY[0x242615198](MEMORY[0x24BDF3F50], v1[8], v1 + 99);
  v1[98] = v1[52];
  v54 = MEMORY[0x24BDED308];
  v55 = MEMORY[0x242615198](MEMORY[0x24BDED308], v19, v1 + 97);
  v1[95] = MEMORY[0x24BDF5138];
  v1[96] = v55;
  v56 = MEMORY[0x242615198](v39, v1[9], v1 + 95);
  v57 = MEMORY[0x24BDF0910];
  v1[93] = v56;
  v1[94] = v57;
  v1[91] = MEMORY[0x242615198](v54, v1[13], v1 + 93);
  v1[92] = v57;
  v58 = v1[45];
  v59 = MEMORY[0x242615198](v54, v58, v1 + 91);
  v1[143] = v58;
  v1[144] = v59;
  MEMORY[0x24261512C](255, v1 + 143, MEMORY[0x24BDF30F0], 0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE6510);
  v60 = sub_23BFF862C();
  v61 = sub_23BFF862C();
  v1[143] = v58;
  v1[144] = v59;
  v62 = swift_getOpaqueTypeConformance2();
  v63 = sub_23BEA1F94(&qword_256AE6518, &qword_256AE6510, MEMORY[0x24BDEF370]);
  v1[89] = v62;
  v1[90] = v63;
  v64 = MEMORY[0x242615198](v54, v60, v1 + 89);
  v65 = MEMORY[0x24BDEDB80];
  v1[87] = v64;
  v1[88] = v65;
  v66 = MEMORY[0x242615198](v54, v61, v1 + 87);
  v1[52] = v66;
  v1[143] = v61;
  v1[47] = v61;
  v1[144] = v66;
  MEMORY[0x24261512C](255, v1 + 143, MEMORY[0x24BEC6710], 0);
  v1[45] = sub_23BFF8968();
  v67 = v1[73];
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v1[143] = v67;
  v1[144] = v1[74];
  v1[145] = AssociatedConformanceWitness;
  v1[146] = v1[76];
  type metadata accessor for CanvasContextMenu();
}

uint64_t sub_23BF6118C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(_BYTE *, uint64_t);
  _BYTE v41[80];

  v1[46] = a1;
  v3 = sub_23BFF862C();
  v1[44] = v3;
  v4 = v1[53];
  v5 = MEMORY[0x242615198](MEMORY[0x24BEE12D8], v4);
  v6 = v2;
  v7 = v1[72];
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v1[143] = v4;
  v1[144] = v7;
  v1[145] = v3;
  v1[146] = v5;
  v1[147] = AssociatedConformanceWitness;
  v9 = sub_23BFF910C();
  v1[53] = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = &v41[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = &v41[-v14];
  v16 = v1[55];
  v17 = v1[56];
  v1[43] = *(_QWORD *)(v1[58] + *(int *)(v16 + 212));
  v18 = v1[54];
  (*(void (**)(uint64_t, __n128))(v17 + 16))(v18, v13);
  v19 = (*(unsigned __int8 *)(v17 + 80) + 208) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  v20 = (char *)swift_allocObject();
  v21 = v1[50];
  *((_QWORD *)v20 + 2) = v1[65];
  *((_QWORD *)v20 + 3) = v21;
  v22 = v1[48];
  *((_QWORD *)v20 + 4) = v1[66];
  *((_QWORD *)v20 + 5) = v22;
  v23 = v1[74];
  *((_QWORD *)v20 + 6) = v1[73];
  *((_QWORD *)v20 + 7) = v23;
  v24 = v1[59];
  *((_QWORD *)v20 + 8) = v1[80];
  *((_QWORD *)v20 + 9) = v24;
  v25 = v1[61];
  *((_QWORD *)v20 + 10) = v1[60];
  *((_QWORD *)v20 + 11) = v25;
  v26 = v1[63];
  *((_QWORD *)v20 + 12) = v1[62];
  *((_QWORD *)v20 + 13) = v26;
  v27 = v1[64];
  *((_QWORD *)v20 + 14) = v1[77];
  *((_QWORD *)v20 + 15) = v27;
  v28 = v1[51];
  *((_QWORD *)v20 + 16) = v6;
  *((_QWORD *)v20 + 17) = v28;
  v29 = v1[76];
  *((_QWORD *)v20 + 18) = v1[49];
  *((_QWORD *)v20 + 19) = v29;
  v30 = v1[67];
  *((_QWORD *)v20 + 20) = v1[81];
  *((_QWORD *)v20 + 21) = v30;
  v31 = v1[69];
  *((_QWORD *)v20 + 22) = v1[68];
  *((_QWORD *)v20 + 23) = v31;
  v32 = v1[75];
  *((_QWORD *)v20 + 24) = v1[78];
  *((_QWORD *)v20 + 25) = v32;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 32))(&v20[v19], v18, v16);
  v33 = v1[43];
  swift_bridgeObjectRetain();
  v1[143] = v1[47];
  v34 = v1[52];
  v1[144] = v34;
  v1[85] = swift_getOpaqueTypeConformance2();
  v1[86] = v34;
  v35 = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v1[45], v1 + 85);
  v36 = MEMORY[0x242615198](&unk_23BFFEE18, v1[46]);
  v1[83] = v35;
  v1[84] = v36;
  v37 = v1[44];
  v38 = MEMORY[0x242615198](MEMORY[0x24BDED308], v37, v1 + 83);
  sub_23BF49C10(v33, (uint64_t)sub_23BF69E88, (uint64_t)v20, v1[72], v37, v1[71], v38, *(_QWORD *)(v32 + 24), v1[79]);
  v1[82] = v38;
  MEMORY[0x242615198](MEMORY[0x24BDF4A08], v9, v1 + 82);
  sub_23BEA72EC((uint64_t)v11, v9, (uint64_t)v15);
  v39 = *(void (**)(_BYTE *, uint64_t))(v1[53] + 8);
  v39(v11, v9);
  sub_23BEA5C0C((uint64_t)v15, v9, v1[70]);
  return ((uint64_t (*)(_BYTE *, uint64_t))v39)(v15, v9);
}

void sub_23BF61488(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[52];
  uint64_t AssociatedConformanceWitness;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v35 = a6;
  v41 = a5;
  v52 = a4;
  v39 = a3;
  v34 = a2;
  v33 = a1;
  v32 = a8;
  v44 = a26;
  v38 = a25;
  v51 = a24;
  v50 = a23;
  v43 = a20;
  v54 = a19;
  v40 = a14;
  v47 = a13;
  v55 = a12;
  v45 = a11;
  v56 = a15;
  v53 = a22;
  v42 = a10;
  v46 = a17;
  v28 = sub_23BFF96A0();
  MEMORY[0x24BDAC7A8](v28);
  v30[51] = (char *)v30 - v29;
  v37 = a27;
  v49 = a7;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v57 = a7;
  v58 = a9;
  v36 = a9;
  v59 = AssociatedConformanceWitness;
  v48 = a21;
  v60 = a21;
  type metadata accessor for CanvasContextMenu();
}

void sub_23BF615E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v9[69] = a1;
  v9[53] = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9[50] = (char *)&a9 - v19;
  v9[75] = v18;
  v9[68] = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v9[67] = (char *)&a9 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *(_QWORD *)(v17 - 8);
  v9[74] = v17;
  v9[66] = v22;
  v9[49] = *(_QWORD *)(v22 + 64);
  MEMORY[0x24BDAC7A8](v23);
  v9[65] = (char *)&a9 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9[246] = v9[93];
  v9[247] = v13;
  v9[248] = v9[81];
  v9[249] = v9[73];
  v9[250] = v15;
  v9[251] = v14;
  v9[252] = v11;
  v9[253] = v12;
  v9[254] = v9[96];
  v9[255] = v9[88];
  v9[256] = v9[80];
  v9[257] = v9[97];
  v9[258] = v25;
  v9[259] = v9[87];
  v9[260] = v17;
  v9[261] = v9[95];
  v9[262] = v9[83];
  v9[263] = v16;
  v9[264] = v9[94];
  v9[265] = v9[91];
  v9[266] = v9[92];
  v9[267] = v9[78];
  v9[268] = v9[85];
  v9[269] = v10;
  type metadata accessor for OrthogonalView();
}

void sub_23BF61738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v9[71] = a1;
  v14 = *(_QWORD *)(a1 - 8);
  v9[64] = v14;
  v9[56] = *(_QWORD *)(v14 + 64);
  MEMORY[0x24BDAC7A8](a1);
  v9[63] = (char *)&a9 - v15;
  v9[246] = v11;
  v9[84] = v13;
  v9[247] = v13;
  v9[248] = v13;
  v9[249] = v10;
  v9[250] = v12;
  v9[251] = v12;
  type metadata accessor for ActionCardView();
}

void sub_23BF6179C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1[57] = a1;
  v6 = MEMORY[0x242615198](&unk_23C005608, a1);
  v1[55] = v6;
  v1[246] = a1;
  v1[247] = v6;
  v1[61] = MEMORY[0x24261512C](255, v1 + 246, MEMORY[0x24BDF3948], 0);
  v1[62] = sub_23BFF8ADC();
  v7 = (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088];
  v8 = v3;
  v9 = sub_23BFF862C();
  v10 = sub_23BFF862C();
  v1[44] = v10;
  v11 = sub_23BEA1BB8((unint64_t *)&qword_256AE3908, v7, MEMORY[0x24BDF1078]);
  v1[58] = v11;
  v1[244] = v4;
  v12 = v4;
  v1[245] = v11;
  v13 = MEMORY[0x24BDED308];
  v14 = MEMORY[0x242615198](MEMORY[0x24BDED308], v9, v1 + 244);
  v15 = MEMORY[0x24BDEEC40];
  v1[242] = v14;
  v1[243] = v15;
  v16 = MEMORY[0x242615198](v13, v10, v1 + 242);
  v1[43] = v16;
  v1[246] = v10;
  v1[247] = v16;
  v17 = MEMORY[0x24BDF3100];
  MEMORY[0x24261512C](255, v1 + 246, MEMORY[0x24BDF3100], 0);
  v18 = sub_23BFF862C();
  v1[37] = v18;
  v19 = MEMORY[0x24BDEBEE0];
  v1[240] = v14;
  v1[241] = v19;
  v20 = MEMORY[0x242615198](v13, v18, v1 + 240);
  v1[36] = v20;
  v1[246] = v18;
  v1[247] = v20;
  MEMORY[0x24261512C](255, v1 + 246, v17, 0);
  v1[34] = sub_23BFF8968();
  v1[38] = sub_23BFF8FD4();
  v1[35] = sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3910);
  v1[41] = sub_23BFF8968();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3918);
  v1[42] = sub_23BFF8968();
  v1[26] = sub_23BFF8968();
  v1[246] = v8;
  v21 = v1[84];
  v1[247] = v21;
  v1[248] = v21;
  v1[249] = v1[82];
  v1[250] = v1[75];
  v1[251] = v12;
  v22 = v1[95];
  v1[252] = v22;
  v1[253] = v22;
  v1[254] = v1[94];
  v1[255] = v2;
  type metadata accessor for FullWidthStageView();
}

void sub_23BF619F8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1[40] = a1;
  v7 = MEMORY[0x242615198](&unk_23C0077B8, a1);
  v1[39] = v7;
  v1[246] = a1;
  v1[247] = v7;
  v8 = MEMORY[0x24BDF3948];
  MEMORY[0x24261512C](255, v1 + 246, MEMORY[0x24BDF3948], 0);
  v9 = v3;
  v11 = type metadata accessor for InfoActionCardView(255, v3, v5, v10);
  v1[33] = v11;
  v12 = MEMORY[0x242615198](&unk_23C007F20, v11);
  v1[32] = v12;
  v1[246] = v11;
  v1[247] = v12;
  MEMORY[0x24261512C](255, v1 + 246, v8, 0);
  v1[31] = sub_23BFF8968();
  v1[11] = sub_23BFF8968();
  v13 = v2;
  v15 = type metadata accessor for LargeBrickView(255, v4, v2, v14);
  v1[30] = v15;
  v16 = MEMORY[0x242615198](&protocol conformance descriptor for LargeBrickView<A>, v15);
  v1[29] = v16;
  v1[246] = v15;
  v1[247] = v16;
  v17 = v8;
  MEMORY[0x24261512C](255, v1 + 246, v8, 0);
  v19 = type metadata accessor for DynamicBrickView(255, v4, v13, v18);
  v1[28] = v19;
  v20 = MEMORY[0x242615198](&protocol conformance descriptor for DynamicBrickView<A>, v19);
  v1[27] = v20;
  v1[246] = v19;
  v1[247] = v20;
  MEMORY[0x24261512C](255, v1 + 246, v8, 0);
  v1[19] = sub_23BFF8968();
  v22 = type metadata accessor for MonogramVerticalStackView(255, v4, v13, v21);
  v1[25] = v22;
  v23 = MEMORY[0x242615198](&unk_23BFFA1F4, v22);
  v1[24] = v23;
  v1[246] = v22;
  v1[247] = v23;
  MEMORY[0x24261512C](255, v1 + 246, v17, 0);
  v1[22] = sub_23BFF8968();
  v1[23] = sub_23BFF8968();
  *v1 = sub_23BFF8968();
  v25 = type metadata accessor for StandardCardView(255, v4, v13, v24);
  v1[21] = v25;
  v26 = MEMORY[0x242615198](&unk_23C007BD0, v25);
  v1[20] = v26;
  v1[246] = v25;
  v1[247] = v26;
  MEMORY[0x24261512C](255, v1 + 246, v17, 0);
  v1[246] = v4;
  v1[247] = v9;
  v1[248] = v13;
  v1[249] = v5;
  type metadata accessor for StandardHorizontalStackView();
}

void sub_23BF61C5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t OpaqueTypeConformance2;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __n128 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(uint64_t, _QWORD, _QWORD, __n128);
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void (*v119)(char *, uint64_t, uint64_t);
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  __int128 v159;

  *(_QWORD *)(v9 + 144) = a1;
  v14 = MEMORY[0x242615198](&unk_23C0008E8, a1);
  *(_QWORD *)(v9 + 136) = v14;
  *(_QWORD *)(v9 + 1968) = a1;
  *(_QWORD *)(v9 + 1976) = v14;
  MEMORY[0x24261512C](255, v9 + 1968, v10, 0);
  *(_QWORD *)(v9 + 24) = sub_23BFF8968();
  v16 = type metadata accessor for StandardVerticalStackView(255, v12, v11, v15);
  *(_QWORD *)(v9 + 120) = v16;
  v17 = MEMORY[0x242615198](&unk_23C0073B8, v16);
  *(_QWORD *)(v9 + 112) = v17;
  *(_QWORD *)(v9 + 1968) = v16;
  *(_QWORD *)(v9 + 1976) = v17;
  MEMORY[0x24261512C](255, v9 + 1968, v10, 0);
  v19 = type metadata accessor for TallCardView(255, v12, v11, v18);
  v20 = MEMORY[0x242615198](&unk_23BFFF0E4, v19);
  *(_QWORD *)(v9 + 104) = v20;
  *(_QWORD *)(v9 + 1968) = v19;
  *(_QWORD *)(v9 + 1976) = v20;
  MEMORY[0x24261512C](255, v9 + 1968, v10, 0);
  *(_QWORD *)(v9 + 96) = sub_23BFF8968();
  *(_QWORD *)(v9 + 8) = sub_23BFF8968();
  v22 = type metadata accessor for VerticalStackCard(255, v12, v11, v21);
  v23 = MEMORY[0x242615198](&unk_23C0000E0, v22);
  *(_QWORD *)(v9 + 80) = v23;
  *(_QWORD *)(v9 + 1968) = v22;
  *(_QWORD *)(v9 + 1976) = v23;
  MEMORY[0x24261512C](255, v9 + 1968, v10, 0);
  *(_QWORD *)(v9 + 16) = sub_23BFF8968();
  v25 = type metadata accessor for WideBrickView(255, v12, v11, v24);
  v26 = MEMORY[0x242615198](&protocol conformance descriptor for WideBrickView<A>, v25);
  *(_QWORD *)(v9 + 48) = v26;
  *(_QWORD *)(v9 + 1968) = v25;
  *(_QWORD *)(v9 + 1976) = v26;
  MEMORY[0x24261512C](255, v9 + 1968, v10, 0);
  *(_QWORD *)(v9 + 32) = sub_23BFF8968();
  *(_QWORD *)(v9 + 40) = sub_23BFF8968();
  *(_QWORD *)(v9 + 56) = sub_23BFF8968();
  *(_QWORD *)(v9 + 64) = sub_23BFF8FD4();
  *(_QWORD *)(v9 + 72) = sub_23BFF862C();
  v27 = sub_23BFF8968();
  *(_QWORD *)(v9 + 360) = *(_QWORD *)(v27 - 8);
  *(_QWORD *)(v9 + 488) = v27;
  MEMORY[0x24BDAC7A8](v27);
  *(_QWORD *)(v9 + 472) = (char *)&a9 - v28;
  v29 = sub_23BFF862C();
  *(_QWORD *)(v9 + 376) = *(_QWORD *)(v29 - 8);
  *(_QWORD *)(v9 + 496) = v29;
  MEMORY[0x24BDAC7A8](v29);
  *(_QWORD *)(v9 + 480) = (char *)&a9 - v30;
  v31 = sub_23BFF862C();
  *(_QWORD *)(v9 + 384) = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  *(_QWORD *)(v9 + 368) = (char *)&a9 - v32;
  *(_QWORD *)(v9 + 1968) = *(_QWORD *)(v9 + 456);
  *(_QWORD *)(v9 + 1976) = *(_QWORD *)(v9 + 440);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v9 + 1968) = *(_QWORD *)(v9 + 352);
  *(_QWORD *)(v9 + 1976) = *(_QWORD *)(v9 + 344);
  v34 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v9 + 1968) = *(_QWORD *)(v9 + 296);
  *(_QWORD *)(v9 + 1976) = *(_QWORD *)(v9 + 288);
  v35 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v9 + 1904) = v34;
  *(_QWORD *)(v9 + 1912) = v35;
  v36 = MEMORY[0x24BDEF3E0];
  *(_QWORD *)(v9 + 1896) = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], *(_QWORD *)(v9 + 272), v9 + 1904);
  v37 = MEMORY[0x242615198](MEMORY[0x24BDF3F50], *(_QWORD *)(v9 + 304), v9 + 1896);
  v38 = MEMORY[0x24BDECC60];
  *(_QWORD *)(v9 + 1880) = v37;
  *(_QWORD *)(v9 + 1888) = v38;
  v39 = MEMORY[0x242615198](MEMORY[0x24BDED308], *(_QWORD *)(v9 + 280), v9 + 1880);
  v40 = sub_23BEA1F94(&qword_256AE3920, &qword_256AE3910, MEMORY[0x24BDF43B0]);
  *(_QWORD *)(v9 + 1864) = v39;
  *(_QWORD *)(v9 + 1872) = v40;
  v41 = MEMORY[0x242615198](v36, *(_QWORD *)(v9 + 328), v9 + 1864);
  v42 = sub_23BEA1F94(&qword_256AE3928, &qword_256AE3918, MEMORY[0x24BDF4700]);
  *(_QWORD *)(v9 + 1848) = v41;
  *(_QWORD *)(v9 + 1856) = v42;
  v43 = MEMORY[0x242615198](v36, *(_QWORD *)(v9 + 336), v9 + 1848);
  *(_QWORD *)(v9 + 1832) = OpaqueTypeConformance2;
  *(_QWORD *)(v9 + 1840) = v43;
  v44 = MEMORY[0x242615198](v36, *(_QWORD *)(v9 + 208), v9 + 1832);
  *(_QWORD *)(v9 + 1968) = *(_QWORD *)(v9 + 320);
  *(_QWORD *)(v9 + 1976) = *(_QWORD *)(v9 + 312);
  v45 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v9 + 1968) = *(_QWORD *)(v9 + 264);
  *(_QWORD *)(v9 + 1976) = *(_QWORD *)(v9 + 256);
  v46 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v9 + 1816) = v45;
  *(_QWORD *)(v9 + 1824) = v46;
  v47 = MEMORY[0x242615198](v36, *(_QWORD *)(v9 + 248), v9 + 1816);
  *(_QWORD *)(v9 + 1800) = v44;
  *(_QWORD *)(v9 + 1808) = v47;
  v48 = MEMORY[0x242615198](v36, *(_QWORD *)(v9 + 88), v9 + 1800);
  *(_QWORD *)(v9 + 1968) = *(_QWORD *)(v9 + 240);
  *(_QWORD *)(v9 + 1976) = *(_QWORD *)(v9 + 232);
  v49 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v9 + 1968) = *(_QWORD *)(v9 + 224);
  *(_QWORD *)(v9 + 1976) = *(_QWORD *)(v9 + 216);
  v50 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v9 + 1784) = v49;
  *(_QWORD *)(v9 + 1792) = v50;
  v51 = MEMORY[0x242615198](v36, *(_QWORD *)(v9 + 152), v9 + 1784);
  *(_QWORD *)(v9 + 1968) = *(_QWORD *)(v9 + 200);
  *(_QWORD *)(v9 + 1976) = *(_QWORD *)(v9 + 192);
  *(_QWORD *)(v9 + 1768) = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v9 + 1776) = v50;
  v52 = MEMORY[0x242615198](v36, *(_QWORD *)(v9 + 176), v9 + 1768);
  *(_QWORD *)(v9 + 1752) = v51;
  *(_QWORD *)(v9 + 1760) = v52;
  v53 = MEMORY[0x242615198](v36, *(_QWORD *)(v9 + 184), v9 + 1752);
  *(_QWORD *)(v9 + 1736) = v48;
  *(_QWORD *)(v9 + 1744) = v53;
  v54 = MEMORY[0x242615198](v36, *(_QWORD *)v9, v9 + 1736);
  *(_QWORD *)(v9 + 1968) = *(_QWORD *)(v9 + 168);
  *(_QWORD *)(v9 + 1976) = *(_QWORD *)(v9 + 160);
  v55 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v9 + 1968) = *(_QWORD *)(v9 + 144);
  *(_QWORD *)(v9 + 1976) = *(_QWORD *)(v9 + 136);
  v56 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v9 + 1720) = v55;
  *(_QWORD *)(v9 + 1728) = v56;
  v57 = MEMORY[0x242615198](v36, *(_QWORD *)(v9 + 24), v9 + 1720);
  *(_QWORD *)(v9 + 1968) = *(_QWORD *)(v9 + 120);
  *(_QWORD *)(v9 + 1976) = *(_QWORD *)(v9 + 112);
  v58 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v9 + 1968) = v19;
  *(_QWORD *)(v9 + 1976) = *(_QWORD *)(v9 + 104);
  v59 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v9 + 1704) = v58;
  *(_QWORD *)(v9 + 1712) = v59;
  v60 = MEMORY[0x242615198](v36, *(_QWORD *)(v9 + 96), v9 + 1704);
  *(_QWORD *)(v9 + 1688) = v57;
  *(_QWORD *)(v9 + 1696) = v60;
  v61 = MEMORY[0x242615198](v36, *(_QWORD *)(v9 + 8), v9 + 1688);
  *(_QWORD *)(v9 + 1968) = v22;
  *(_QWORD *)(v9 + 1976) = *(_QWORD *)(v9 + 80);
  *(_QWORD *)(v9 + 1672) = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v9 + 1680) = *(_QWORD *)(v9 + 752);
  v62 = MEMORY[0x242615198](v36, *(_QWORD *)(v9 + 16), v9 + 1672);
  *(_QWORD *)(v9 + 1968) = v25;
  *(_QWORD *)(v9 + 1976) = *(_QWORD *)(v9 + 48);
  v63 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v9 + 1656) = v62;
  *(_QWORD *)(v9 + 1664) = v63;
  v64 = MEMORY[0x242615198](v36, *(_QWORD *)(v9 + 32), v9 + 1656);
  *(_QWORD *)(v9 + 1640) = v61;
  *(_QWORD *)(v9 + 1648) = v64;
  v65 = MEMORY[0x242615198](v36, *(_QWORD *)(v9 + 40), v9 + 1640);
  *(_QWORD *)(v9 + 1624) = v54;
  *(_QWORD *)(v9 + 1632) = v65;
  *(_QWORD *)(v9 + 1616) = MEMORY[0x242615198](v36, *(_QWORD *)(v9 + 56), v9 + 1624);
  *(_QWORD *)(v9 + 1600) = MEMORY[0x242615198](MEMORY[0x24BDF3F50], *(_QWORD *)(v9 + 64), v9 + 1616);
  *(_QWORD *)(v9 + 1608) = *(_QWORD *)(v9 + 464);
  v66 = MEMORY[0x24BDED308];
  v67 = MEMORY[0x242615198](MEMORY[0x24BDED308], *(_QWORD *)(v9 + 72), v9 + 1600);
  *(_QWORD *)(v9 + 1584) = MEMORY[0x24BDF5138];
  *(_QWORD *)(v9 + 1592) = v67;
  v68 = MEMORY[0x242615198](v36, *(_QWORD *)(v9 + 488), v9 + 1584);
  *(_QWORD *)(v9 + 192) = v68;
  v69 = MEMORY[0x24BDF0910];
  *(_QWORD *)(v9 + 1568) = v68;
  *(_QWORD *)(v9 + 1576) = v69;
  v70 = MEMORY[0x242615198](v66, *(_QWORD *)(v9 + 496), v9 + 1568);
  *(_QWORD *)(v9 + 224) = v70;
  *(_QWORD *)(v9 + 1552) = v70;
  *(_QWORD *)(v9 + 1560) = v69;
  v71 = MEMORY[0x242615198](v66, v31, v9 + 1552);
  *(_QWORD *)(v9 + 1968) = v31;
  *(_QWORD *)(v9 + 128) = v31;
  *(_QWORD *)(v9 + 1976) = v71;
  v72 = v71;
  *(_QWORD *)(v9 + 200) = v71;
  v73 = MEMORY[0x24261512C](0, v9 + 1968, MEMORY[0x24BDF30F0], 0);
  *(_QWORD *)(v9 + 336) = *(_QWORD *)(v73 - 8);
  *(_QWORD *)(v9 + 296) = v73;
  MEMORY[0x24BDAC7A8](v73);
  *(_QWORD *)(v9 + 216) = (char *)&a9 - v74;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE6510);
  v75 = sub_23BFF862C();
  *(_QWORD *)(v9 + 312) = *(_QWORD *)(v75 - 8);
  MEMORY[0x24BDAC7A8](v75);
  *(_QWORD *)(v9 + 280) = (char *)&a9 - v76;
  *(_QWORD *)(v9 + 256) = v75;
  v77 = sub_23BFF862C();
  *(_QWORD *)(v9 + 328) = *(_QWORD *)(v77 - 8);
  MEMORY[0x24BDAC7A8](v77);
  *(_QWORD *)(v9 + 264) = (char *)&a9 - v78;
  *(_QWORD *)(v9 + 1968) = v31;
  *(_QWORD *)(v9 + 1976) = v72;
  v79 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v9 + 232) = v79;
  v80 = sub_23BEA1F94(&qword_256AE6518, &qword_256AE6510, MEMORY[0x24BDEF370]);
  *(_QWORD *)(v9 + 1536) = v79;
  *(_QWORD *)(v9 + 1544) = v80;
  v81 = MEMORY[0x242615198](v66, v75, v9 + 1536);
  *(_QWORD *)(v9 + 248) = v81;
  v82 = MEMORY[0x24BDEDB80];
  *(_QWORD *)(v9 + 1520) = v81;
  *(_QWORD *)(v9 + 1528) = v82;
  v83 = MEMORY[0x242615198](v66, v77, v9 + 1520);
  *(_QWORD *)(v9 + 464) = v83;
  *(_QWORD *)(v9 + 1968) = v77;
  *(_QWORD *)(v9 + 240) = v77;
  *(_QWORD *)(v9 + 1976) = v83;
  MEMORY[0x24261512C](255, v9 + 1968, MEMORY[0x24BEC6710], 0);
  v84 = sub_23BFF8968();
  v85 = *(_QWORD *)(v84 - 8);
  *(_QWORD *)(v9 + 288) = v84;
  *(_QWORD *)(v9 + 320) = v85;
  MEMORY[0x24BDAC7A8](v84);
  *(_QWORD *)(v9 + 208) = (char *)&a9 - v86;
  v87 = sub_23BFF862C();
  v88 = *(_QWORD *)(v87 - 8);
  *(_QWORD *)(v9 + 344) = v87;
  *(_QWORD *)(v9 + 352) = v88;
  MEMORY[0x24BDAC7A8](v87);
  *(_QWORD *)(v9 + 272) = (char *)&a9 - ((v89 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = MEMORY[0x24BDAC7A8](v90);
  *(_QWORD *)(v9 + 304) = (char *)&a9 - v92;
  v93 = *(_QWORD *)(v9 + 504);
  v94 = *(_QWORD *)(v9 + 512);
  v95 = *(void (**)(uint64_t, _QWORD, _QWORD, __n128))(v94 + 16);
  *(_QWORD *)(v9 + 456) = v95;
  v95(v93, *(_QWORD *)(v9 + 632), *(_QWORD *)(v9 + 568), v91);
  v96 = *(_QWORD *)(v9 + 528);
  v97 = *(_QWORD *)(v9 + 592);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(v96 + 16))(*(_QWORD *)(v9 + 520), *(_QWORD *)(v9 + 576), v97);
  v98 = *(unsigned __int8 *)(v94 + 80);
  v99 = (v98 + 208) & ~v98;
  v100 = v99 + *(_QWORD *)(v9 + 448);
  *(_QWORD *)(v9 + 184) = v100;
  *(_QWORD *)(v9 + 440) = v99;
  *(_QWORD *)(v9 + 448) = v98 | 7;
  v101 = (v100 + *(unsigned __int8 *)(v96 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v96 + 80);
  v102 = (char *)swift_allocObject();
  v103 = *(_QWORD *)(v9 + 672);
  *((_QWORD *)v102 + 2) = *(_QWORD *)(v9 + 744);
  *((_QWORD *)v102 + 3) = v103;
  v104 = *(_QWORD *)(v9 + 648);
  v105 = *(_QWORD *)(v9 + 584);
  *((_QWORD *)v102 + 4) = v104;
  *((_QWORD *)v102 + 5) = v105;
  v106 = *(_QWORD *)(v9 + 608);
  *((_QWORD *)v102 + 6) = *(_QWORD *)(v9 + 720);
  *((_QWORD *)v102 + 7) = v106;
  v107 = *(_QWORD *)(v9 + 688);
  *((_QWORD *)v102 + 8) = *(_QWORD *)(v9 + 656);
  *((_QWORD *)v102 + 9) = v107;
  v108 = *(_QWORD *)(v9 + 704);
  *((_QWORD *)v102 + 10) = *(_QWORD *)(v9 + 768);
  *((_QWORD *)v102 + 11) = v108;
  v109 = *(_QWORD *)(v9 + 640);
  v110 = *(_QWORD *)(v9 + 776);
  *((_QWORD *)v102 + 12) = v109;
  *((_QWORD *)v102 + 13) = v110;
  v111 = *(_QWORD *)(v9 + 600);
  v112 = *(_QWORD *)(v9 + 696);
  *((_QWORD *)v102 + 14) = v111;
  *((_QWORD *)v102 + 15) = v112;
  v113 = *(_QWORD *)(v9 + 760);
  *((_QWORD *)v102 + 16) = v97;
  *((_QWORD *)v102 + 17) = v113;
  v114 = *(_QWORD *)(v9 + 712);
  *((_QWORD *)v102 + 18) = *(_QWORD *)(v9 + 664);
  *((_QWORD *)v102 + 19) = v114;
  v115 = *(_QWORD *)(v9 + 752);
  v116 = *(_QWORD *)(v9 + 728);
  *((_QWORD *)v102 + 20) = v115;
  *((_QWORD *)v102 + 21) = v116;
  v117 = *(_QWORD *)(v9 + 624);
  *((_QWORD *)v102 + 22) = *(_QWORD *)(v9 + 736);
  *((_QWORD *)v102 + 23) = v117;
  v118 = *(_QWORD *)(v9 + 616);
  *((_QWORD *)v102 + 24) = *(_QWORD *)(v9 + 680);
  *((_QWORD *)v102 + 25) = v118;
  v119 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 + 512) + 32);
  *(_QWORD *)(v9 + 512) = v119;
  v120 = v93;
  v121 = *(_QWORD *)(v9 + 568);
  v119(&v102[v99], v120, v121);
  (*(void (**)(char *, _QWORD, uint64_t))(*(_QWORD *)(v9 + 528) + 32))(&v102[v101], *(_QWORD *)(v9 + 520), v97);
  v122 = *(_QWORD *)(v9 + 632);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 + 544) + 16))(*(_QWORD *)(v9 + 536), v122 + *(int *)(v121 + 236), v111);
  v123 = (uint64_t *)(v122 + *(int *)(v121 + 240));
  v124 = v122;
  v126 = *v123;
  v125 = v123[1];
  *(_QWORD *)(v9 + 528) = v126;
  *(_QWORD *)(v9 + 520) = v125;
  v127 = *(_QWORD *)(v9 + 744);
  *(_QWORD *)(v9 + 1248) = v127;
  v128 = *(_QWORD *)(v9 + 672);
  *(_QWORD *)(v9 + 1256) = v128;
  v129 = v104;
  *(_QWORD *)(v9 + 1264) = v104;
  v130 = *(_QWORD *)(v9 + 584);
  *(_QWORD *)(v9 + 1272) = v130;
  v131 = *(_QWORD *)(v9 + 720);
  *(_QWORD *)(v9 + 1280) = v131;
  v132 = *(_QWORD *)(v9 + 608);
  *(_QWORD *)(v9 + 1288) = v132;
  v133 = *(_QWORD *)(v9 + 656);
  *(_QWORD *)(v9 + 1296) = v133;
  v134 = *(_QWORD *)(v9 + 688);
  *(_QWORD *)(v9 + 1304) = v134;
  v135 = *(_QWORD *)(v9 + 768);
  *(_QWORD *)(v9 + 1312) = v135;
  v136 = *(_QWORD *)(v9 + 704);
  *(_QWORD *)(v9 + 1320) = v136;
  v137 = v109;
  *(_QWORD *)(v9 + 1328) = v109;
  v138 = *(_QWORD *)(v9 + 776);
  *(_QWORD *)(v9 + 1336) = v138;
  *(_QWORD *)(v9 + 1344) = v111;
  v139 = *(_QWORD *)(v9 + 696);
  *(_QWORD *)(v9 + 1352) = v139;
  *(_QWORD *)(v9 + 1360) = v97;
  v140 = *(_QWORD *)(v9 + 760);
  *(_QWORD *)(v9 + 1368) = v140;
  v141 = *(_QWORD *)(v9 + 664);
  *(_QWORD *)(v9 + 1376) = v141;
  v142 = *(_QWORD *)(v9 + 712);
  *(_QWORD *)(v9 + 1384) = v142;
  v143 = v115;
  *(_QWORD *)(v9 + 1392) = v115;
  v144 = *(_QWORD *)(v9 + 728);
  *(_QWORD *)(v9 + 1400) = v144;
  v145 = *(_QWORD *)(v9 + 736);
  *(_QWORD *)(v9 + 1408) = v145;
  v146 = *(_QWORD *)(v9 + 624);
  *(_QWORD *)(v9 + 1416) = v146;
  v147 = *(_QWORD *)(v9 + 680);
  *(_QWORD *)(v9 + 1424) = v147;
  v148 = *(_QWORD *)(v9 + 616);
  *(_QWORD *)(v9 + 1432) = v148;
  *(_QWORD *)(v9 + 1440) = v124;
  v149 = v124;
  v150 = *(_QWORD *)(v9 + 560);
  *(_QWORD *)(v9 + 1448) = v150;
  *(_QWORD *)(v9 + 1024) = v127;
  *(_QWORD *)(v9 + 1032) = v128;
  *(_QWORD *)(v9 + 1040) = v129;
  *(_QWORD *)(v9 + 1048) = v130;
  v151 = v130;
  *(_QWORD *)(v9 + 1056) = v131;
  *(_QWORD *)(v9 + 1064) = v132;
  *(_QWORD *)(v9 + 1072) = v133;
  *(_QWORD *)(v9 + 1080) = v134;
  *(_QWORD *)(v9 + 1088) = v135;
  *(_QWORD *)(v9 + 1096) = v136;
  *(_QWORD *)(v9 + 1104) = v137;
  *(_QWORD *)(v9 + 1112) = v138;
  *(_QWORD *)(v9 + 1120) = v111;
  *(_QWORD *)(v9 + 1128) = v139;
  *(_QWORD *)(v9 + 1136) = v97;
  v152 = v140;
  *(_QWORD *)(v9 + 1144) = v140;
  v153 = v141;
  *(_QWORD *)(v9 + 1152) = v141;
  *(_QWORD *)(v9 + 1160) = v142;
  *(_QWORD *)(v9 + 1168) = v143;
  *(_QWORD *)(v9 + 1176) = v144;
  *(_QWORD *)(v9 + 1184) = v145;
  *(_QWORD *)(v9 + 1192) = v146;
  *(_QWORD *)(v9 + 1200) = v147;
  *(_QWORD *)(v9 + 1208) = v148;
  *(_QWORD *)(v9 + 1216) = v149;
  *(_QWORD *)(v9 + 1224) = v150;
  v154 = v143;
  v155 = v151;
  v156 = v133;
  v157 = v128;
  v158 = v147;
  sub_23BFDD104((_OWORD *)(v9 + 1968));
  v159 = *(_OWORD *)(v9 + 1984);
  *(_OWORD *)(v9 + 1488) = *(_OWORD *)(v9 + 1968);
  *(_OWORD *)(v9 + 1504) = v159;
  sub_23BEAF590((uint64_t)sub_23BF69FD8, (uint64_t)v102, *(_QWORD *)(v9 + 536), v9 + 1488, *(_QWORD *)(v9 + 528), *(_QWORD *)(v9 + 520), (uint64_t)sub_23BF6A12C, v9 + 1232, *(_QWORD *)(v9 + 472), (uint64_t)sub_23BF6A138, v9 + 1008, *(_QWORD *)(v9 + 592), *(_QWORD *)(v9 + 600), v155, v156, v157, v148, v158, v153,
    v154,
    v152);
}

void sub_23BF629C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t);
  uint64_t v61;
  uint64_t v62;

  swift_release();
  v6 = v4;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 544) + 8))(v2, v4);
  v7 = *(_QWORD *)(v0 + 504);
  v8 = *(_QWORD *)(v0 + 568);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 456))(v7, *(_QWORD *)(v0 + 632), v8);
  v9 = (*(_QWORD *)(v0 + 184) + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v0 + 536) = v9 + 8;
  *(_QWORD *)(v0 + 544) = v9;
  v10 = (_QWORD *)swift_allocObject();
  v11 = *(_QWORD *)(v0 + 744);
  v12 = *(_QWORD *)(v0 + 672);
  v10[2] = v11;
  v10[3] = v12;
  v10[4] = *(_QWORD *)(v0 + 648);
  v10[5] = v3;
  v13 = *(_QWORD *)(v0 + 608);
  v10[6] = *(_QWORD *)(v0 + 720);
  v10[7] = v13;
  v14 = *(_QWORD *)(v0 + 688);
  v10[8] = v5;
  v10[9] = v14;
  v15 = *(_QWORD *)(v0 + 704);
  v10[10] = *(_QWORD *)(v0 + 768);
  v10[11] = v15;
  v16 = *(_QWORD *)(v0 + 776);
  v10[12] = *(_QWORD *)(v0 + 640);
  v10[13] = v16;
  v17 = *(_QWORD *)(v0 + 696);
  v10[14] = v6;
  v10[15] = v17;
  v18 = *(_QWORD *)(v0 + 760);
  v10[16] = v1;
  v10[17] = v18;
  v19 = *(_QWORD *)(v0 + 712);
  v10[18] = *(_QWORD *)(v0 + 664);
  v10[19] = v19;
  v20 = *(_QWORD *)(v0 + 728);
  v10[20] = *(_QWORD *)(v0 + 752);
  v10[21] = v20;
  v21 = *(_QWORD *)(v0 + 624);
  v10[22] = *(_QWORD *)(v0 + 736);
  v10[23] = v21;
  v22 = (char *)v10 + *(_QWORD *)(v0 + 440);
  v23 = *(_QWORD *)(v0 + 616);
  v10[24] = *(_QWORD *)(v0 + 680);
  v10[25] = v23;
  v24 = v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v0 + 512))(v22, v7, v8);
  v25 = *(_QWORD *)(v0 + 560);
  *(_QWORD *)((char *)v10 + v9) = v25;
  v26 = *(_QWORD *)(v0 + 488);
  v27 = *(_QWORD *)(v0 + 472);
  sub_23BFF8F14();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 360) + 8))(v27, v26);
  v28 = *(_QWORD *)(v0 + 632);
  v29 = v24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 456))(v7, v28, v24);
  v30 = (_QWORD *)swift_allocObject();
  v31 = *(_QWORD *)(v0 + 672);
  v30[2] = v11;
  v30[3] = v31;
  v32 = *(_QWORD *)(v0 + 648);
  v33 = *(_QWORD *)(v0 + 584);
  v30[4] = v32;
  v30[5] = v33;
  v34 = *(_QWORD *)(v0 + 608);
  v30[6] = *(_QWORD *)(v0 + 720);
  v30[7] = v34;
  v35 = *(_QWORD *)(v0 + 688);
  v30[8] = *(_QWORD *)(v0 + 656);
  v30[9] = v35;
  v36 = *(_QWORD *)(v0 + 704);
  v30[10] = *(_QWORD *)(v0 + 768);
  v30[11] = v36;
  v37 = *(_QWORD *)(v0 + 776);
  v30[12] = *(_QWORD *)(v0 + 640);
  v30[13] = v37;
  v30[14] = *(_QWORD *)(v0 + 600);
  v30[15] = v17;
  v38 = *(_QWORD *)(v0 + 760);
  v30[16] = *(_QWORD *)(v0 + 592);
  v30[17] = v38;
  v39 = *(_QWORD *)(v0 + 712);
  v30[18] = *(_QWORD *)(v0 + 664);
  v30[19] = v39;
  v40 = *(_QWORD *)(v0 + 728);
  v30[20] = *(_QWORD *)(v0 + 752);
  v30[21] = v40;
  v41 = *(_QWORD *)(v0 + 624);
  v30[22] = *(_QWORD *)(v0 + 736);
  v30[23] = v41;
  v42 = (char *)v30 + *(_QWORD *)(v0 + 440);
  v43 = *(_QWORD *)(v0 + 616);
  v30[24] = *(_QWORD *)(v0 + 680);
  v30[25] = v43;
  (*(void (**)(char *, uint64_t, uint64_t))(v0 + 512))(v42, v7, v29);
  *(_QWORD *)((char *)v30 + *(_QWORD *)(v0 + 544)) = v25;
  v44 = *(_QWORD *)(v0 + 368);
  v45 = *(_QWORD *)(v0 + 496);
  v46 = *(_QWORD *)(v0 + 480);
  sub_23BFF8D34();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 376) + 8))(v46, v45);
  sub_23BFF8B24();
  v47 = v28;
  sub_23BFF9190();
  v48 = *(_QWORD *)(v0 + 216);
  v49 = *(_QWORD *)(v0 + 128);
  sub_23BFF8E48();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 384) + 8))(v44, v49);
  *(_QWORD *)(v0 + 800) = *(_QWORD *)(v0 + 744);
  *(_QWORD *)(v0 + 808) = *(_QWORD *)(v0 + 672);
  *(_QWORD *)(v0 + 816) = v32;
  *(_QWORD *)(v0 + 824) = *(_QWORD *)(v0 + 584);
  *(_QWORD *)(v0 + 832) = *(_QWORD *)(v0 + 720);
  *(_QWORD *)(v0 + 840) = v34;
  *(_QWORD *)(v0 + 848) = *(_QWORD *)(v0 + 656);
  *(_QWORD *)(v0 + 856) = *(_QWORD *)(v0 + 688);
  *(_QWORD *)(v0 + 864) = *(_QWORD *)(v0 + 768);
  *(_QWORD *)(v0 + 872) = *(_QWORD *)(v0 + 704);
  *(_QWORD *)(v0 + 880) = *(_QWORD *)(v0 + 640);
  *(_QWORD *)(v0 + 888) = *(_QWORD *)(v0 + 776);
  *(_QWORD *)(v0 + 896) = *(_QWORD *)(v0 + 600);
  *(_QWORD *)(v0 + 904) = *(_QWORD *)(v0 + 696);
  *(_QWORD *)(v0 + 912) = *(_QWORD *)(v0 + 592);
  *(_QWORD *)(v0 + 920) = *(_QWORD *)(v0 + 760);
  *(_QWORD *)(v0 + 928) = *(_QWORD *)(v0 + 664);
  *(_QWORD *)(v0 + 936) = *(_QWORD *)(v0 + 712);
  *(_QWORD *)(v0 + 944) = *(_QWORD *)(v0 + 752);
  *(_QWORD *)(v0 + 952) = *(_QWORD *)(v0 + 728);
  *(_QWORD *)(v0 + 960) = *(_QWORD *)(v0 + 736);
  *(_QWORD *)(v0 + 968) = v41;
  *(_QWORD *)(v0 + 976) = *(_QWORD *)(v0 + 680);
  v50 = *(_QWORD *)(v0 + 616);
  *(_QWORD *)(v0 + 984) = v50;
  *(_QWORD *)(v0 + 992) = v47;
  v51 = v47;
  *(_QWORD *)(v0 + 1000) = *(_QWORD *)(v0 + 576);
  sub_23BFF91C0();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE65B0);
  sub_23BEA1F94(&qword_256AE65B8, &qword_256AE65B0, MEMORY[0x24BDEC6F8]);
  v52 = *(_QWORD *)(v0 + 280);
  v53 = *(_QWORD *)(v0 + 296);
  sub_23BFF8CBC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 336) + 8))(v48, v53);
  v54 = *(_QWORD *)(v0 + 256);
  v55 = *(_QWORD *)(v0 + 264);
  sub_23BFF8F5C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 312) + 8))(v52, v54);
  v56 = v50;
  v62 = v50;
  v57 = *(char **)(v0 + 592);
  v58 = *(_QWORD *)(v0 + 240);
  sub_23BF58654(*(_QWORD *)(v0 + 576), v51 + *(int *)(*(_QWORD *)(v0 + 568) + 220), *(_QWORD *)(v0 + 560), v58, *(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 768), *(_QWORD *)(v0 + 776), *(_QWORD *)(v0 + 696), v57, *(_QWORD *)(v0 + 464), v41, v62);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 328) + 8))(v55, v58);
  v59 = v56;
  v60 = *(void (**)(char *, uint64_t))(v56 + 168);
  v61 = *(_QWORD *)(v0 + 408);
  v60(v57, v59);
  sub_23BF006B4(v61, *(_QWORD *)(v0 + 400));
}

uint64_t sub_23BF62EEC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);

  swift_retain();
  v0[246] = v2;
  v4 = v0[58];
  v0[247] = v4;
  v0[184] = swift_getOpaqueTypeConformance2();
  v0[185] = v4;
  v5 = v0[36];
  v6 = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v5, v0 + 184);
  v7 = v0[34];
  v8 = v1;
  v9 = v1;
  v10 = v0[69];
  MEMORY[0x2426142A4](v8, v5, v10, v6);
  (*(void (**)(uint64_t, uint64_t))(v0[53] + 8))(v9, v10);
  (*(void (**)(uint64_t, uint64_t))(v0[40] + 8))(v3, v5);
  v11 = MEMORY[0x242615198](&unk_23BFFEE18, v10);
  v0[182] = v6;
  v0[183] = v11;
  v12 = v0[43];
  MEMORY[0x242615198](MEMORY[0x24BDED308], v12, v0 + 182);
  v13 = v0[38];
  sub_23BEA72EC(v7, v12, v13);
  v14 = *(void (**)(uint64_t, uint64_t))(v0[44] + 8);
  v14(v7, v12);
  sub_23BEA5C0C(v13, v12, v0[54]);
  return ((uint64_t (*)(uint64_t, uint64_t))v14)(v13, v12);
}

void sub_23BF6302C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  __n128 v15;
  uint64_t v16;
  __int128 v17;

  v15 = MEMORY[0x24BDAC7A8](a15);
  *(_OWORD *)(v16 + 136) = v17;
  *(__n128 *)(v16 + 152) = v15;
  type metadata accessor for OrthogonalView();
}

uint64_t sub_23BF630F0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t);

  v7 = *(void (**)(uint64_t))(v5 + *(int *)(result + 260));
  if (v7)
  {
    (*(void (**)(uint64_t, uint64_t))(v1 + 152))(v3, v1);
    v7(v4);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v4, v2);
  }
  return result;
}

void sub_23BF63154(uint64_t a1)
{
  uint64_t v1;
  __n128 v2;
  uint64_t v3;
  __int128 v4;

  MEMORY[0x24BDAC7A8](a1);
  v2 = MEMORY[0x24BDAC7A8]((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)(v3 + 152) = v4;
  *(__n128 *)(v3 + 168) = v2;
  type metadata accessor for OrthogonalView();
}

uint64_t sub_23BF63234(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  (*(void (**)(uint64_t, uint64_t, _QWORD))(v4 + *(int *)(a1 + 252)))(v3, v7, 0);
  sub_23BEA72EC(v6, v2, v5);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v2);
  sub_23BEA5C0C(v5, v2, v1);
  return ((uint64_t (*)(uint64_t, uint64_t))v9)(v5, v2);
}

void sub_23BF632B8(uint64_t a1)
{
  uint64_t v1;

  MEMORY[0x24BDAC7A8](a1);
  MEMORY[0x24BDAC7A8]((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OrthogonalView();
}

uint64_t sub_23BF6339C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + *(int *)(a1 + 244)))(v3, v7, 0);
  sub_23BEA72EC(v6, v1, v4);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v1);
  sub_23BEA5C0C(v4, v1, v2);
  return ((uint64_t (*)(uint64_t, uint64_t))v9)(v4, v1);
}

void sub_23BF63420(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[2];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  v60 = a8;
  v58 = a7;
  v56 = a6;
  v54 = a5;
  v53 = a4;
  v52 = a3;
  v64 = a2;
  v63 = a1;
  v65 = a9;
  v67 = a27;
  v66 = a26;
  v42 = a25;
  v62 = a24;
  v61 = a23;
  v59 = a22;
  v57 = a21;
  v55 = a20;
  v51 = a17;
  v50 = a16;
  v49 = a15;
  v47 = a14;
  v46 = a13;
  v45 = a12;
  v44 = a11;
  v43 = a10;
  v48 = a19;
  v40[0] = a18;
  v41 = *(_QWORD *)(a18 - 8);
  v27 = *(_QWORD *)(v41 + 64);
  MEMORY[0x24BDAC7A8](a23);
  v40[1] = (char *)v40 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = v28;
  v69 = v29;
  v70 = v30;
  v71 = v31;
  v72 = v32;
  v73 = v33;
  v74 = v34;
  v75 = a11;
  v76 = v35;
  v77 = a13;
  v78 = a14;
  v79 = a15;
  v80 = a16;
  v81 = a17;
  v82 = a18;
  v83 = a19;
  v84 = a20;
  v85 = a21;
  v86 = v36;
  v87 = v37;
  v88 = v38;
  v89 = v39;
  v90 = a26;
  v91 = a27;
  type metadata accessor for OrthogonalView();
}

uint64_t sub_23BF63604(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  void (**v27)();
  _BYTE v28[96];

  v4 = *(_QWORD *)(a1 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = MEMORY[0x24BDAC7A8](a1);
  v8 = &v28[-v7];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, __n128))(v4 + 16))(&v28[-v7], *(_QWORD *)(v2 - 320), a1, v6);
  v9 = *(_QWORD *)(v2 - 496);
  v10 = *(_QWORD *)(v2 - 504);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v9 + 16))(v10, *(_QWORD *)(v2 - 312), v1);
  v11 = (*(unsigned __int8 *)(v4 + 80) + 208) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v12 = (v5 + *(unsigned __int8 *)(v9 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v13 = (char *)swift_allocObject();
  v14 = *(_QWORD *)(v2 - 400);
  *((_QWORD *)v13 + 2) = *(_QWORD *)(v2 - 408);
  *((_QWORD *)v13 + 3) = v14;
  v15 = *(_QWORD *)(v2 - 376);
  *((_QWORD *)v13 + 4) = *(_QWORD *)(v2 - 392);
  *((_QWORD *)v13 + 5) = v15;
  v16 = *(_QWORD *)(v2 - 344);
  *((_QWORD *)v13 + 6) = *(_QWORD *)(v2 - 360);
  *((_QWORD *)v13 + 7) = v16;
  v17 = *(_QWORD *)(v2 - 472);
  *((_QWORD *)v13 + 8) = *(_QWORD *)(v2 - 480);
  *((_QWORD *)v13 + 9) = v17;
  v18 = *(_QWORD *)(v2 - 456);
  *((_QWORD *)v13 + 10) = *(_QWORD *)(v2 - 464);
  *((_QWORD *)v13 + 11) = v18;
  v19 = *(_QWORD *)(v2 - 432);
  *((_QWORD *)v13 + 12) = *(_QWORD *)(v2 - 448);
  *((_QWORD *)v13 + 13) = v19;
  v20 = *(_QWORD *)(v2 - 416);
  *((_QWORD *)v13 + 14) = *(_QWORD *)(v2 - 424);
  *((_QWORD *)v13 + 15) = v20;
  v21 = *(_QWORD *)(v2 - 440);
  *((_QWORD *)v13 + 16) = v1;
  *((_QWORD *)v13 + 17) = v21;
  v22 = *(_QWORD *)(v2 - 368);
  *((_QWORD *)v13 + 18) = *(_QWORD *)(v2 - 384);
  *((_QWORD *)v13 + 19) = v22;
  v23 = *(_QWORD *)(v2 - 336);
  *((_QWORD *)v13 + 20) = *(_QWORD *)(v2 - 352);
  *((_QWORD *)v13 + 21) = v23;
  v24 = *(_QWORD *)(v2 - 488);
  *((_QWORD *)v13 + 22) = *(_QWORD *)(v2 - 328);
  *((_QWORD *)v13 + 23) = v24;
  v25 = *(_QWORD *)(v2 - 288);
  *((_QWORD *)v13 + 24) = *(_QWORD *)(v2 - 296);
  *((_QWORD *)v13 + 25) = v25;
  (*(void (**)(char *, _BYTE *, uint64_t))(v4 + 32))(&v13[v11], v8, a1);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 32))(&v13[v12], v10, v1);
  v27 = *(void (***)())(v2 - 304);
  *v27 = sub_23BF6A7CC;
  v27[1] = (void (*)())v13;
  return result;
}

void sub_23BF637F0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[3];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;

  v70 = a8;
  v69 = a7;
  v64 = a6;
  v46 = a5;
  v55 = a4;
  v58 = a3;
  v57 = a2;
  v56 = a1;
  v44 = a9;
  v62 = a28;
  v63 = a27;
  v72 = a26;
  v71 = a25;
  v61 = a24;
  v65 = a23;
  v68 = a22;
  v67 = a21;
  v60 = a20;
  v66 = a17;
  v54 = a16;
  v53 = a15;
  v52 = a14;
  v51 = a13;
  v50 = a12;
  v49 = a11;
  v48 = a10;
  v59 = a18;
  v43 = sub_23BFF8560();
  MEMORY[0x24BDAC7A8](v43);
  v42 = (char *)v35 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = sub_23BFF9538();
  v40 = *(_QWORD *)(v41 - 8);
  MEMORY[0x24BDAC7A8](v41);
  v39 = (char *)v35 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_23BFF8500();
  v36 = *(_QWORD *)(v37 - 8);
  v38 = *(_QWORD *)(v36 + 64);
  MEMORY[0x24BDAC7A8](v37);
  v47 = (char *)v35 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = *(_QWORD *)(a19 - 8);
  v32 = *(_QWORD *)(v45 + 64);
  MEMORY[0x24BDAC7A8](v33);
  v35[2] = (char *)v35 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = a4;
  v74 = v46;
  v75 = v64;
  v76 = v69;
  v77 = v70;
  v78 = a10;
  v79 = a11;
  v80 = a12;
  v81 = a13;
  v82 = a14;
  v83 = a15;
  v84 = a16;
  v85 = v66;
  v86 = v59;
  v87 = v34;
  v88 = v60;
  v89 = v67;
  v90 = v68;
  v91 = v65;
  v92 = v61;
  v93 = v71;
  v94 = v72;
  v95 = v63;
  v96 = v62;
  type metadata accessor for OrthogonalView();
}

uint64_t sub_23BF63B28(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(_BYTE *, _QWORD, uint64_t);
  uint64_t v14;
  void (*v15)(uint64_t, _QWORD, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, _BYTE *, uint64_t);
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE v63[96];

  v7 = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v5 - 664) = a1;
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x24BDAC7A8](a1);
  v10 = &v63[-v9];
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE65C0);
  *(_QWORD *)(v5 - 584) = v11;
  MEMORY[0x24BDAC7A8](v11);
  *(_QWORD *)(v5 - 496) = &v63[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *(_QWORD *)(v5 - 608) = sub_23BFF8F8C();
  v13 = *(void (**)(_BYTE *, _QWORD, uint64_t))(v7 + 16);
  *(_QWORD *)(v5 - 568) = v13;
  *(_QWORD *)(v5 - 672) = v10;
  v13(v10, *(_QWORD *)(v5 - 408), a1);
  v14 = *(_QWORD *)(v5 - 512);
  v15 = *(void (**)(uint64_t, _QWORD, uint64_t))(v14 + 16);
  *(_QWORD *)(v5 - 576) = v15;
  v15(v2, *(_QWORD *)(v5 - 400), v1);
  v16 = *(_QWORD *)(v5 - 648);
  v17 = *(_QWORD *)(v5 - 640);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(v16 + 16))(*(_QWORD *)(v5 - 488), *(_QWORD *)(v5 - 416), v17);
  v18 = *(unsigned __int8 *)(v7 + 80);
  v19 = (v18 + 208) & ~v18;
  v20 = *(unsigned __int8 *)(v14 + 80);
  *(_QWORD *)(v5 - 624) = v19;
  v21 = (v8 + v20 + v19) & ~v20;
  *(_QWORD *)(v5 - 592) = v21 + v3;
  *(_QWORD *)(v5 - 632) = v21;
  *(_QWORD *)(v5 - 600) = v18 | v20 | 7;
  v22 = (v21 + v3 + *(unsigned __int8 *)(v16 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v23 = (char *)swift_allocObject();
  *((_QWORD *)v23 + 2) = *(_QWORD *)(v5 - 424);
  *((_QWORD *)v23 + 3) = v4;
  v24 = *(_QWORD *)(v5 - 312);
  *((_QWORD *)v23 + 4) = *(_QWORD *)(v5 - 352);
  *((_QWORD *)v23 + 5) = v24;
  v25 = *(_QWORD *)(v5 - 480);
  *((_QWORD *)v23 + 6) = *(_QWORD *)(v5 - 304);
  *((_QWORD *)v23 + 7) = v25;
  v26 = *(_QWORD *)(v5 - 464);
  *((_QWORD *)v23 + 8) = *(_QWORD *)(v5 - 472);
  *((_QWORD *)v23 + 9) = v26;
  v27 = *(_QWORD *)(v5 - 448);
  *((_QWORD *)v23 + 10) = *(_QWORD *)(v5 - 456);
  *((_QWORD *)v23 + 11) = v27;
  v28 = *(_QWORD *)(v5 - 432);
  *((_QWORD *)v23 + 12) = *(_QWORD *)(v5 - 440);
  *((_QWORD *)v23 + 13) = v28;
  v29 = *(_QWORD *)(v5 - 392);
  *((_QWORD *)v23 + 14) = *(_QWORD *)(v5 - 336);
  *((_QWORD *)v23 + 15) = v29;
  v30 = v1;
  v31 = *(_QWORD *)(v5 - 384);
  *((_QWORD *)v23 + 16) = v1;
  *((_QWORD *)v23 + 17) = v31;
  v32 = *(_QWORD *)(v5 - 320);
  *((_QWORD *)v23 + 18) = *(_QWORD *)(v5 - 328);
  *((_QWORD *)v23 + 19) = v32;
  v33 = *(_QWORD *)(v5 - 376);
  *((_QWORD *)v23 + 20) = *(_QWORD *)(v5 - 344);
  *((_QWORD *)v23 + 21) = v33;
  v34 = *(_QWORD *)(v5 - 288);
  *((_QWORD *)v23 + 22) = *(_QWORD *)(v5 - 296);
  *((_QWORD *)v23 + 23) = v34;
  v35 = *(_QWORD *)(v5 - 368);
  *((_QWORD *)v23 + 24) = *(_QWORD *)(v5 - 360);
  *((_QWORD *)v23 + 25) = v35;
  v36 = *(void (**)(char *, _BYTE *, uint64_t))(v7 + 32);
  *(_QWORD *)(v5 - 616) = v36;
  v37 = *(_QWORD *)(v5 - 664);
  v36(&v23[v19], v10, v37);
  v38 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 512) + 32);
  *(_QWORD *)(v5 - 512) = v38;
  v39 = *(_QWORD *)(v5 - 656);
  v38(&v23[v21], v39, v1);
  (*(void (**)(char *, _QWORD, uint64_t))(v16 + 32))(&v23[v22], *(_QWORD *)(v5 - 488), v17);
  v40 = *(_QWORD *)(v5 - 560);
  sub_23BFF9520();
  v41 = *(char **)(v5 - 536);
  v42 = *(_QWORD *)(v5 - 552);
  v43 = *(_QWORD *)(v5 - 544);
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(&v41[*(int *)(*(_QWORD *)(v5 - 528) + 20)], v40, v43);
  *(_QWORD *)v41 = &unk_256AE65D0;
  *((_QWORD *)v41 + 1) = v23;
  v44 = *(_QWORD **)(v5 - 496);
  sub_23BF6AEF4((uint64_t)v41, (uint64_t)v44 + *(int *)(*(_QWORD *)(v5 - 584) + 36));
  *v44 = *(_QWORD *)(v5 - 608);
  swift_retain();
  sub_23BF6AF38((uint64_t)v41);
  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v40, v43);
  swift_release();
  sub_23BFF84DC();
  *(_QWORD *)(v5 - 280) = v45;
  v46 = *(_QWORD *)(v5 - 672);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 - 568))(v46, *(_QWORD *)(v5 - 408), v37);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 - 576))(v39, *(_QWORD *)(v5 - 400), v30);
  v47 = (char *)swift_allocObject();
  v48 = *(_QWORD *)(v5 - 504);
  *((_QWORD *)v47 + 2) = *(_QWORD *)(v5 - 424);
  *((_QWORD *)v47 + 3) = v48;
  v49 = *(_QWORD *)(v5 - 312);
  *((_QWORD *)v47 + 4) = *(_QWORD *)(v5 - 352);
  *((_QWORD *)v47 + 5) = v49;
  v50 = *(_QWORD *)(v5 - 480);
  *((_QWORD *)v47 + 6) = *(_QWORD *)(v5 - 304);
  *((_QWORD *)v47 + 7) = v50;
  v51 = *(_QWORD *)(v5 - 464);
  *((_QWORD *)v47 + 8) = *(_QWORD *)(v5 - 472);
  *((_QWORD *)v47 + 9) = v51;
  v52 = *(_QWORD *)(v5 - 448);
  *((_QWORD *)v47 + 10) = *(_QWORD *)(v5 - 456);
  *((_QWORD *)v47 + 11) = v52;
  v53 = *(_QWORD *)(v5 - 432);
  *((_QWORD *)v47 + 12) = *(_QWORD *)(v5 - 440);
  *((_QWORD *)v47 + 13) = v53;
  v54 = *(_QWORD *)(v5 - 392);
  *((_QWORD *)v47 + 14) = *(_QWORD *)(v5 - 336);
  *((_QWORD *)v47 + 15) = v54;
  v55 = *(_QWORD *)(v5 - 384);
  *((_QWORD *)v47 + 16) = v30;
  *((_QWORD *)v47 + 17) = v55;
  v56 = *(_QWORD *)(v5 - 320);
  *((_QWORD *)v47 + 18) = *(_QWORD *)(v5 - 328);
  *((_QWORD *)v47 + 19) = v56;
  v57 = *(_QWORD *)(v5 - 376);
  *((_QWORD *)v47 + 20) = *(_QWORD *)(v5 - 344);
  *((_QWORD *)v47 + 21) = v57;
  v58 = *(_QWORD *)(v5 - 288);
  *((_QWORD *)v47 + 22) = *(_QWORD *)(v5 - 296);
  *((_QWORD *)v47 + 23) = v58;
  v59 = &v47[*(_QWORD *)(v5 - 624)];
  v60 = *(_QWORD *)(v5 - 368);
  *((_QWORD *)v47 + 24) = *(_QWORD *)(v5 - 360);
  *((_QWORD *)v47 + 25) = v60;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 - 616))(v59, v46, v37);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 - 512))(&v47[*(_QWORD *)(v5 - 632)], v39, v30);
  sub_23BF6B424();
  sub_23BEAA674();
  v61 = *(_QWORD *)(v5 - 496);
  sub_23BFF8F20();
  swift_release();
  return sub_23BF6B4A8(v61);
}

uint64_t sub_23BF640AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  *(_QWORD *)(v8 + 416) = v21;
  *(_OWORD *)(v8 + 384) = v19;
  *(_OWORD *)(v8 + 400) = v20;
  *(_OWORD *)(v8 + 352) = v17;
  *(_OWORD *)(v8 + 368) = v18;
  *(_OWORD *)(v8 + 320) = v15;
  *(_OWORD *)(v8 + 336) = v16;
  *(_OWORD *)(v8 + 288) = v13;
  *(_OWORD *)(v8 + 304) = v14;
  *(_OWORD *)(v8 + 272) = v12;
  *(_QWORD *)(v8 + 256) = a7;
  *(_QWORD *)(v8 + 264) = a8;
  *(_QWORD *)(v8 + 240) = a5;
  *(_QWORD *)(v8 + 248) = a6;
  *(_QWORD *)(v8 + 224) = a3;
  *(_QWORD *)(v8 + 232) = a4;
  *(_QWORD *)(v8 + 208) = a1;
  *(_QWORD *)(v8 + 216) = a2;
  v9 = sub_23BFF97F0();
  *(_QWORD *)(v8 + 424) = v9;
  *(_QWORD *)(v8 + 432) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 440) = swift_task_alloc();
  sub_23BFF9514();
  *(_QWORD *)(v8 + 448) = sub_23BFF9508();
  *(_QWORD *)(v8 + 456) = sub_23BFF94FC();
  *(_QWORD *)(v8 + 464) = v10;
  return swift_task_switch();
}

uint64_t sub_23BF64180()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t, char);

  v1 = sub_23BFF9A24();
  v3 = v2;
  sub_23BFF97E4();
  v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_256AE65E8 + dword_256AE65E8);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 472) = v4;
  *v4 = v0;
  v4[1] = sub_23BF64218;
  return v6(v1, v3, 0, 0, 1);
}

uint64_t sub_23BF64218()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (_QWORD *)*v1;
  swift_task_dealloc();
  v4 = v2[54];
  v3 = v2[55];
  v5 = v2[53];
  if (v0)
  {
    MEMORY[0x242615084](v0);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v4 + 8))(v2[55], v2[53]);
  }
  return swift_task_switch();
}

void sub_23BF642B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v2 = *(_QWORD *)(v0 + 408);
  v1 = *(_QWORD *)(v0 + 416);
  v11 = *(_OWORD *)(v0 + 248);
  v12 = *(_OWORD *)(v0 + 232);
  v9 = *(_OWORD *)(v0 + 280);
  v10 = *(_OWORD *)(v0 + 264);
  v7 = *(_OWORD *)(v0 + 312);
  v8 = *(_OWORD *)(v0 + 296);
  v6 = *(_OWORD *)(v0 + 328);
  v13 = *(_OWORD *)(v0 + 344);
  v4 = *(_OWORD *)(v0 + 376);
  v5 = *(_OWORD *)(v0 + 360);
  v3 = *(_OWORD *)(v0 + 392);
  swift_release();
  sub_23BFF84DC();
  *(_OWORD *)(v0 + 16) = v12;
  *(_OWORD *)(v0 + 32) = v11;
  *(_OWORD *)(v0 + 48) = v10;
  *(_OWORD *)(v0 + 64) = v9;
  *(_OWORD *)(v0 + 80) = v8;
  *(_OWORD *)(v0 + 96) = v7;
  *(_OWORD *)(v0 + 112) = v6;
  *(_OWORD *)(v0 + 128) = v13;
  *(_OWORD *)(v0 + 144) = v5;
  *(_OWORD *)(v0 + 160) = v4;
  *(_OWORD *)(v0 + 176) = v3;
  *(_QWORD *)(v0 + 192) = v2;
  *(_QWORD *)(v0 + 200) = v1;
  type metadata accessor for OrthogonalView();
}

uint64_t sub_23BF64398(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;

  sub_23BF643F4(v5, v3, a1, *(_QWORD *)(v4 - 80), v2);
  sub_23BF5B010();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_23BF643F4(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  double v8;
  char v9;

  v6 = *(_QWORD *)((*(uint64_t (**)(uint64_t, uint64_t))(a5 + 184))(a4, a5) + 16);
  swift_bridgeObjectRelease();
  if (v6)
    return 0;
  v8 = COERCE_DOUBLE(sub_23BF5AFB0());
  if ((v9 & 1) != 0)
    v8 = 0.0;
  if (v8 <= a1)
    v8 = a1;
  return *(_QWORD *)&v8;
}

void sub_23BF64480()
{
  type metadata accessor for OrthogonalView();
}

uint64_t sub_23BF64508(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double v4;

  sub_23BF643F4(v4, v1, a1, v3, v2);
  return sub_23BF5B010();
}

void sub_23BF6454C()
{
  type metadata accessor for OrthogonalView();
}

void sub_23BF6462C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v9[8] = a1;
  v14 = *(_QWORD *)(a1 - 8);
  v9[5] = v14;
  v9[4] = *(_QWORD *)(v14 + 64);
  MEMORY[0x24BDAC7A8](a1);
  v9[31] = (char *)&a9 - v15;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3528);
  v9[34] = v10;
  v9[54] = v10;
  v9[55] = v13;
  v9[27] = v13;
  v9[28] = v12;
  v9[56] = v12;
  v9[57] = v11;
  v9[29] = v11;
  type metadata accessor for CanvasSectionHeaderView();
}

void sub_23BF64694(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t AssociatedConformanceWitness;
  uint64_t v20;

  sub_23BFF8A4C();
  v9[37] = a1;
  v9[38] = sub_23BFF862C();
  v15 = sub_23BFF8968();
  v9[33] = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v9[23] = (char *)&a9 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v9[3] = (char *)&a9 - v18;
  v9[26] = v10;
  v9[14] = v12;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9[13] = v13;
  v9[54] = v13;
  v9[55] = v11;
  v9[9] = v11;
  v20 = v9[40];
  v9[56] = AssociatedConformanceWitness;
  v9[57] = v20;
  type metadata accessor for CanvasSectionHeader();
}

uint64_t sub_23BF64768(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v26;
  int *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  __int128 v48;
  uint64_t v49;
  uint64_t (*v50)(uint64_t, uint64_t);
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE v57[64];

  v4 = sub_23BFF96A0();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = &v57[-v6];
  v8 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = &v57[-v10];
  v12 = sub_23BFF96A0();
  *(_QWORD *)(v1 + 288) = v12;
  *(_QWORD *)(v1 + 256) = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = &v57[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = MEMORY[0x24BDAC7A8](v15);
  *(_QWORD *)(v1 + 280) = &v57[-v17];
  v18 = *(_QWORD *)(v1 + 240);
  (*(void (**)(_BYTE *, __n128))(v5 + 16))(v7, v16);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48))(v7, 1, a1) != 1)
  {
    v25 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 32);
    *(_QWORD *)v1 = v11;
    v25(v11, v7, a1);
    *(_QWORD *)(v1 + 8) = v8;
    *(_QWORD *)(v1 + 16) = v2;
    v26 = *(_QWORD *)(v1 + 40);
    v27 = *(int **)(v1 + 64);
    (*(void (**)(_QWORD, uint64_t, int *))(v26 + 16))(*(_QWORD *)(v1 + 248), v18, v27);
    v28 = (*(unsigned __int8 *)(v26 + 80) + 208) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
    v29 = (char *)swift_allocObject();
    v30 = *(_QWORD *)(v1 + 272);
    *((_QWORD *)v29 + 2) = *(_QWORD *)(v1 + 104);
    *((_QWORD *)v29 + 3) = v30;
    v31 = *(_QWORD *)(v1 + 136);
    *((_QWORD *)v29 + 4) = *(_QWORD *)(v1 + 120);
    *((_QWORD *)v29 + 5) = v31;
    v32 = *(_QWORD *)(v1 + 168);
    *((_QWORD *)v29 + 6) = *(_QWORD *)(v1 + 152);
    *((_QWORD *)v29 + 7) = v32;
    v33 = *(_QWORD *)(v1 + 48);
    *((_QWORD *)v29 + 8) = *(_QWORD *)(v1 + 176);
    *((_QWORD *)v29 + 9) = v33;
    v34 = *(_QWORD *)(v1 + 72);
    *((_QWORD *)v29 + 10) = *(_QWORD *)(v1 + 56);
    *((_QWORD *)v29 + 11) = v34;
    v35 = *(_QWORD *)(v1 + 216);
    v36 = *(_QWORD *)(v1 + 224);
    v37 = *(_QWORD *)(v1 + 80);
    *((_QWORD *)v29 + 12) = v35;
    *((_QWORD *)v29 + 13) = v37;
    v38 = *(_QWORD *)(v1 + 96);
    *((_QWORD *)v29 + 14) = *(_QWORD *)(v1 + 88);
    *((_QWORD *)v29 + 15) = v38;
    *((_QWORD *)v29 + 16) = *(_QWORD *)(v1 + 112);
    *((_QWORD *)v29 + 17) = v36;
    v39 = *(_QWORD *)(v1 + 144);
    *((_QWORD *)v29 + 18) = *(_QWORD *)(v1 + 128);
    *((_QWORD *)v29 + 19) = v39;
    v40 = *(_QWORD *)(v1 + 320);
    *((_QWORD *)v29 + 20) = *(_QWORD *)(v1 + 160);
    *((_QWORD *)v29 + 21) = v40;
    *(_QWORD *)(v1 + 320) = v14;
    v41 = *(_QWORD *)(v1 + 232);
    v42 = *(_QWORD *)(v1 + 192);
    *((_QWORD *)v29 + 22) = v41;
    *((_QWORD *)v29 + 23) = v42;
    v43 = *(_QWORD *)(v1 + 208);
    *((_QWORD *)v29 + 24) = *(_QWORD *)(v1 + 200);
    *((_QWORD *)v29 + 25) = v43;
    (*(void (**)(char *, _QWORD, int *))(v26 + 32))(&v29[v28], *(_QWORD *)(v1 + 248), v27);
    v44 = (uint64_t *)(v18 + v27[64]);
    v45 = *v44;
    v46 = v44[1];
    v47 = (_OWORD *)(v18 + v27[56]);
    v48 = v47[1];
    *(_OWORD *)(v1 + 432) = *v47;
    *(_OWORD *)(v1 + 448) = v48;
    sub_23BFF67FC((uint64_t)sub_23BF69A30, (uint64_t)v29, v45, v46, *(unsigned __int8 *)(v18 + v27[58]), *(_QWORD *)(v1 + 272), *(_QWORD *)(v1 + 184), v35, v36, v41);
  }
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 + 264) + 56))(v14, 1, 1, v2);
  v19 = sub_23BF0A0F0();
  v20 = *(_QWORD *)(v1 + 296);
  v21 = MEMORY[0x242615198](&unk_23C0051E8, v20);
  v22 = sub_23BEA1BB8((unint64_t *)&qword_256AE5188, (uint64_t (*)(uint64_t))MEMORY[0x24BDF02F8], MEMORY[0x24BDF02F0]);
  *(_QWORD *)(v1 + 416) = v21;
  *(_QWORD *)(v1 + 424) = v22;
  v23 = *(_QWORD *)(v1 + 304);
  v24 = MEMORY[0x242615198](MEMORY[0x24BDED308], v23, v1 + 416);
  *(_QWORD *)(v1 + 400) = v19;
  *(_QWORD *)(v1 + 408) = v24;
  MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v2, v1 + 400);
  v49 = *(_QWORD *)(v1 + 280);
  sub_23BF3FAD4((uint64_t)v14, v49);
  v50 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 256) + 8);
  v51 = *(_QWORD *)(v1 + 288);
  v50((uint64_t)v14, v51);
  v52 = sub_23BF0A0F0();
  v53 = MEMORY[0x242615198](&unk_23C0051E8, v20);
  v54 = sub_23BEA1BB8((unint64_t *)&qword_256AE5188, (uint64_t (*)(uint64_t))MEMORY[0x24BDF02F8], MEMORY[0x24BDF02F0]);
  *(_QWORD *)(v1 + 384) = v53;
  *(_QWORD *)(v1 + 392) = v54;
  v55 = MEMORY[0x242615198](MEMORY[0x24BDED308], v23, v1 + 384);
  *(_QWORD *)(v1 + 368) = v52;
  *(_QWORD *)(v1 + 376) = v55;
  *(_QWORD *)(v1 + 360) = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v2, v1 + 368);
  MEMORY[0x242615198](MEMORY[0x24BDF5578], v51, v1 + 360);
  sub_23BEA5C0C(v49, v51, *(_QWORD *)(v1 + 312));
  return v50(v49, v51);
}

void sub_23BF64C54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_23BFF96A0();
  MEMORY[0x24BDAC7A8](v2);
  MEMORY[0x24BDAC7A8](v0);
  MEMORY[0x24BDAC7A8](v1);
  type metadata accessor for OrthogonalView();
}

uint64_t sub_23BF64E50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, _QWORD, uint64_t);
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);

  v9 = *(void (**)(uint64_t, _QWORD, uint64_t))(v3 + *(int *)(a1 + 244));
  v10 = *(_QWORD *)(v5 - 8);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v10 + 16))(v7, *(_QWORD *)(v8 - 312), v5);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v5);
  v9(v7, 0, 1);
  (*(void (**)(uint64_t, _QWORD))(v2 + 8))(v7, *(_QWORD *)(v8 - 296));
  sub_23BEA72EC(v6, v1, v4);
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 304) + 8);
  v11(v6, v1);
  sub_23BEA5C0C(v4, v1, *(_QWORD *)(v8 - 288));
  return ((uint64_t (*)(uint64_t, uint64_t))v11)(v4, v1);
}

void sub_23BF64F28()
{
  type metadata accessor for OrthogonalView();
}

uint64_t sub_23BF64F9C()
{
  _BYTE *v0;

  return sub_23BE9ED7C(v0);
}

void sub_23BF64FE0()
{
  type metadata accessor for OrthogonalView();
}

void sub_23BF6508C()
{
  type metadata accessor for OrthogonalView();
}

uint64_t sub_23BF65118()
{
  return sub_23BF5B010();
}

uint64_t sub_23BF65148()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23BF651A8()
{
  return swift_allocateGenericValueMetadata();
}

void sub_23BF651B0()
{
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CanvasSectionHeader();
}

uint64_t sub_23BF65208()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = sub_23BFF96A0();
  if (v1 <= 0x3F)
  {
    result = sub_23BFF96A0();
    if (v2 <= 0x3F)
    {
      result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

_QWORD *sub_23BF65304(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  _QWORD *v38;
  int v39;
  int v40;
  unint64_t v41;
  unsigned int v42;
  void *v43;
  char *v44;
  size_t v45;
  char *v46;
  void *v47;
  const void *v48;
  uint64_t v49;
  size_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  void *v55;
  const void *v56;
  unsigned int (*v57)(const void *, uint64_t, uint64_t);
  _OWORD *v58;
  _OWORD *v59;
  __int128 v60;
  unint64_t v61;
  unint64_t v62;
  __int128 v63;
  unint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unsigned int v95;
  uint64_t v96;
  size_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  size_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  size_t v111;
  size_t __n;
  uint64_t v113;

  v4 = sub_23BFF82CC();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = a3[11];
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  if ((_DWORD)v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  v10 = *(unsigned int *)(v5 + 84);
  if (v9 <= v10)
    v11 = *(_DWORD *)(v5 + 84);
  else
    v11 = v9;
  v12 = a3[2];
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned int *)(v13 + 84);
  v15 = v14 - 1;
  if (!(_DWORD)v14)
    v15 = 0;
  if (v15 <= v11)
    v16 = v11;
  else
    v16 = v15;
  if ((_DWORD)v8)
    v17 = *(_QWORD *)(v7 + 64);
  else
    v17 = *(_QWORD *)(v7 + 64) + 1;
  v18 = *(_DWORD *)(v7 + 80);
  v19 = *(_QWORD *)(v5 + 64) + v18;
  v20 = *(_DWORD *)(v13 + 80);
  __n = v17;
  v21 = (v17 + v20 + (v19 & ~v18)) & ~v20;
  if ((_DWORD)v14)
    v22 = *(_QWORD *)(v13 + 64);
  else
    v22 = *(_QWORD *)(v13 + 64) + 1;
  v23 = v21 + v22;
  if (v16)
    v24 = v21 + v22;
  else
    v24 = v23 + 1;
  v25 = a3[14];
  v113 = a3[13];
  v26 = *(_QWORD *)(v113 - 8);
  v27 = *(_DWORD *)(v26 + 80);
  if (*(_DWORD *)(v26 + 84))
    v28 = *(_QWORD *)(v26 + 64);
  else
    v28 = *(_QWORD *)(v26 + 64) + 1;
  v29 = *(_QWORD *)(v25 - 8);
  v30 = *(_DWORD *)(v29 + 80);
  v31 = *(_DWORD *)(v7 + 80) | *(_DWORD *)(v5 + 80) | *(_DWORD *)(v13 + 80);
  v32 = v30 | v27 | v31 & 0xF8;
  if (v32 > 7
    || ((*(_DWORD *)(v29 + 80) | *(_DWORD *)(v26 + 80) | v31) & 0x100000) != 0
    || (v33 = v27 + 9,
        v34 = *(_QWORD *)(v29 + 64) + 7,
        ((((((((((((((((((v34
                        + ((v30
                          + 25
                          + ((((v28 + 7 + ((v27 + 9 + ((v24 + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v27)) & 0xFFFFFFFFFFFFFFF8)
                            + 39) & 0xFFFFFFFFFFFFFFF8)) & ~v30)) & 0xFFFFFFFFFFFFFFF8)
                      + 23) & 0xFFFFFFFFFFFFFFF8)
                    + 23) & 0xFFFFFFFFFFFFFFF8)
                  + 23) & 0xFFFFFFFFFFFFFFF8)
                + 23) & 0xFFFFFFFFFFFFFFF8)
              + 23) & 0xFFFFFFFFFFFFFFF8)
            + 23) & 0xFFFFFFFFFFFFFFF8)
          + 23) & 0xFFFFFFFFFFFFFFF8)
        + 23) & 0xFFFFFFFFFFFFFFF8) != 0
     && ((((((((((((((((((v34
                        + ((v30
                          + 25
                          + ((((v28 + 7 + ((v27 + 9 + ((v24 + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v27)) & 0xFFFFFFFFFFFFFFF8)
                            + 39) & 0xFFFFFFFFFFFFFFF8)) & ~v30)) & 0xFFFFFFFFFFFFFFF8)
                      + 23) & 0xFFFFFFFFFFFFFFF8)
                    + 23) & 0xFFFFFFFFFFFFFFF8)
                  + 23) & 0xFFFFFFFFFFFFFFF8)
                + 23) & 0xFFFFFFFFFFFFFFF8)
              + 23) & 0xFFFFFFFFFFFFFFF8)
            + 23) & 0xFFFFFFFFFFFFFFF8)
          + 23) & 0xFFFFFFFFFFFFFFF8)
        + 23) & 0xFFFFFFFFFFFFFFF8) < 0xFFFFFFFFFFFFFFE8))
  {
    v37 = *a2;
    *a1 = *a2;
    v38 = (_QWORD *)(v37 + (((v32 | 7) + 16) & ~(unint64_t)(v32 | 7)));
    goto LABEL_67;
  }
  v110 = *(_QWORD *)(v29 + 64) + 7;
  v111 = v24;
  v108 = *(_QWORD *)(v25 - 8);
  v109 = v25;
  v106 = v28 + 7;
  v107 = v30 + 25;
  v104 = v28;
  v105 = ~v27;
  v99 = ~v20;
  v100 = v6;
  v97 = v22;
  v98 = ~v18;
  if (v16)
  {
    if ((_DWORD)v10 == v16)
    {
      v95 = v16;
      v35 = v23;
      v36 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v5 + 48))(a2, v10, v4);
      v23 = v35;
      v16 = v95;
      v24 = v111;
      if (!v36)
        goto LABEL_44;
    }
    else
    {
      v102 = v23;
      v41 = ((unint64_t)a2 + v19) & ~v18;
      if (v9 == v16)
        v42 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(v41, v8, v6);
      else
        v42 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v13 + 48))((v41 + v17 + v20) & ~v20, v14, v12);
      v24 = v111;
      v23 = v102;
      if (v42 < 2)
      {
LABEL_44:
        v103 = v23;
        v96 = v33;
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 16))(a1, a2, v4);
        v43 = (void *)(((unint64_t)a1 + v19) & v98);
        v44 = (char *)(((unint64_t)a2 + v19) & v98);
        v101 = v12;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v44, 1, v100))
        {
          v45 = __n;
          memcpy(v43, v44, __n);
        }
        else
        {
          (*(void (**)(void *, char *, uint64_t))(v7 + 16))(v43, v44, v100);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v43, 0, 1, v100);
          v45 = __n;
        }
        v46 = &v44[v45];
        v47 = (void *)(((unint64_t)v43 + v45 + v20) & v99);
        v48 = (const void *)((unint64_t)&v46[v20] & v99);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v48, 1, v101))
        {
          memcpy(v47, v48, v97);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(v47, v48, v101);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v47, 0, 1, v101);
        }
        v49 = v113;
        v38 = a1;
        v50 = v111;
        v33 = v96;
        v51 = v105;
        if (!v16)
          *((_BYTE *)a1 + v103) = 0;
        goto LABEL_54;
      }
    }
  }
  else
  {
    if (!*((_BYTE *)a2 + v23))
      goto LABEL_44;
    v39 = (*((unsigned __int8 *)a2 + v23) - 1) << (8 * v23);
    if (v23 > 3)
      v39 = 0;
    if ((_DWORD)v23)
    {
      if (v23 <= 3)
        v40 = v23;
      else
        v40 = 4;
      __asm { BR              X11 }
    }
    if (v39 == -1)
      goto LABEL_44;
  }
  v38 = a1;
  memcpy(a1, a2, v24);
  v50 = v111;
  v49 = v113;
  v51 = v105;
LABEL_54:
  v52 = ~v30;
  v53 = ((unint64_t)v38 + v50 + 7) & 0xFFFFFFFFFFFFFFF8;
  v54 = ((unint64_t)a2 + v50 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v53 = *(_QWORD *)v54;
  *(_BYTE *)(v53 + 8) = *(_BYTE *)(v54 + 8);
  v55 = (void *)((v33 + v53) & v51);
  v56 = (const void *)((v33 + v54) & v51);
  v57 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v26 + 48);
  swift_bridgeObjectRetain();
  if (v57(v56, 1, v49))
  {
    memcpy(v55, v56, v104);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v26 + 16))(v55, v56, v49);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v55, 0, 1, v49);
  }
  v58 = (_OWORD *)(((unint64_t)v55 + v106) & 0xFFFFFFFFFFFFFFF8);
  v59 = (_OWORD *)(((unint64_t)v56 + v106) & 0xFFFFFFFFFFFFFFF8);
  v60 = v59[1];
  *v58 = *v59;
  v58[1] = v60;
  v61 = ((unint64_t)v58 + 39) & 0xFFFFFFFFFFFFFFF8;
  v62 = ((unint64_t)v59 + 39) & 0xFFFFFFFFFFFFFFF8;
  v63 = *(_OWORD *)v62;
  *(_QWORD *)(v61 + 16) = *(_QWORD *)(v62 + 16);
  *(_OWORD *)v61 = v63;
  *(_BYTE *)(v61 + 24) = *(_BYTE *)(v62 + 24);
  v64 = (v107 + v61) & v52;
  v65 = (v107 + v62) & v52;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v108 + 16))(v64, v65, v109);
  v66 = (_QWORD *)((v110 + v64) & 0xFFFFFFFFFFFFFFF8);
  v67 = (_QWORD *)((v110 + v65) & 0xFFFFFFFFFFFFFFF8);
  v68 = v67[1];
  *v66 = *v67;
  v66[1] = v68;
  v69 = (_QWORD *)(((unint64_t)v66 + 23) & 0xFFFFFFFFFFFFFFF8);
  v70 = (_QWORD *)(((unint64_t)v67 + 23) & 0xFFFFFFFFFFFFFFF8);
  v71 = v70[1];
  *v69 = *v70;
  v69[1] = v71;
  v72 = (_QWORD *)(((unint64_t)v69 + 23) & 0xFFFFFFFFFFFFFFF8);
  v73 = (_QWORD *)(((unint64_t)v70 + 23) & 0xFFFFFFFFFFFFFFF8);
  v74 = v73[1];
  *v72 = *v73;
  v72[1] = v74;
  v75 = (_QWORD *)(((unint64_t)v72 + 23) & 0xFFFFFFFFFFFFFFF8);
  v76 = (_QWORD *)(((unint64_t)v73 + 23) & 0xFFFFFFFFFFFFFFF8);
  v77 = v76[1];
  *v75 = *v76;
  v75[1] = v77;
  v78 = (_QWORD *)(((unint64_t)v75 + 23) & 0xFFFFFFFFFFFFFFF8);
  v79 = (_QWORD *)(((unint64_t)v76 + 23) & 0xFFFFFFFFFFFFFFF8);
  v80 = v79[1];
  *v78 = *v79;
  v78[1] = v80;
  v81 = ((unint64_t)v78 + 23) & 0xFFFFFFFFFFFFFFF8;
  v82 = (unint64_t *)(((unint64_t)v79 + 23) & 0xFFFFFFFFFFFFFFF8);
  v83 = *v82;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  if (v83 < 0xFFFFFFFF)
  {
    *(_OWORD *)v81 = *(_OWORD *)v82;
  }
  else
  {
    v84 = v82[1];
    *(_QWORD *)v81 = v83;
    *(_QWORD *)(v81 + 8) = v84;
    swift_retain();
  }
  v85 = (v81 + 23) & 0xFFFFFFFFFFFFFFF8;
  v86 = ((unint64_t)v82 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v86 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v85 = *(_OWORD *)v86;
  }
  else
  {
    v87 = *(_QWORD *)(v86 + 8);
    *(_QWORD *)v85 = *(_QWORD *)v86;
    *(_QWORD *)(v85 + 8) = v87;
    swift_retain();
  }
  v88 = (v85 + 23) & 0xFFFFFFFFFFFFFFF8;
  v89 = (v86 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v89 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v88 = *(_OWORD *)v89;
  }
  else
  {
    v90 = *(_QWORD *)(v89 + 8);
    *(_QWORD *)v88 = *(_QWORD *)v89;
    *(_QWORD *)(v88 + 8) = v90;
    swift_retain();
  }
  v91 = (v88 + 23) & 0xFFFFFFFFFFFFFFF8;
  v92 = (v89 + 23) & 0xFFFFFFFFFFFFFFF8;
  v93 = *(_QWORD *)v92;
  *(_BYTE *)(v91 + 8) = *(_BYTE *)(v92 + 8);
  *(_QWORD *)v91 = v93;
  *(_QWORD *)(v91 + 16) = *(_QWORD *)(v92 + 16);
LABEL_67:
  swift_retain();
  return v38;
}

uint64_t sub_23BF65A10(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v4 = sub_23BFF82CC();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int *)(v5 + 84);
  v43 = a2[11];
  v7 = *(_QWORD *)(v43 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  if ((_DWORD)v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v9 <= v6)
    v10 = *(_DWORD *)(v5 + 84);
  else
    v10 = v9;
  v44 = a2[2];
  v11 = *(_QWORD *)(v44 - 8);
  v12 = *(unsigned int *)(v11 + 84);
  v13 = v12 - 1;
  if (!(_DWORD)v12)
    v13 = 0;
  if (v13 <= v10)
    v14 = v10;
  else
    v14 = v13;
  if ((_DWORD)v8)
    v15 = *(_QWORD *)(v7 + 64);
  else
    v15 = *(_QWORD *)(v7 + 64) + 1;
  v16 = *(unsigned __int8 *)(v7 + 80);
  v17 = ~v16;
  v18 = *(_QWORD *)(v5 + 64) + v16;
  v19 = *(unsigned __int8 *)(v11 + 80);
  v20 = (v15 + v19 + (v18 & ~v16)) & ~v19;
  v21 = *(_QWORD *)(v11 + 64);
  if (!(_DWORD)v12)
    ++v21;
  v22 = v21 + v20;
  v42 = v15;
  v41 = v17;
  if (v14)
  {
    if ((_DWORD)v6 == v14)
    {
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, v6, v4))
        goto LABEL_39;
    }
    else
    {
      v25 = (v18 + a1) & v17;
      if (v9 == v14)
        v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v25, v8, v43);
      else
        v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))((v25 + v15 + v19) & ~v19, v12, v44);
      if (v26 >= 2)
        goto LABEL_39;
    }
    goto LABEL_35;
  }
  if (!*(_BYTE *)(a1 + v22))
    goto LABEL_35;
  v23 = (*(unsigned __int8 *)(a1 + v22) - 1) << (8 * v22);
  if (v22 > 3)
    v23 = 0;
  if ((_DWORD)v22)
  {
    if (v22 <= 3)
      v24 = v21 + v20;
    else
      v24 = 4;
    __asm { BR              X11 }
  }
  if (v23 == -1)
  {
LABEL_35:
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
    v27 = (v18 + a1) & v41;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v27, 1, v43))
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v27, v43);
    v28 = (v27 + v42 + v19) & ~v19;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v28, 1, v44))
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v28, v44);
  }
LABEL_39:
  if (v14)
    v29 = a1;
  else
    v29 = a1 + 1;
  v30 = (v29 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  v31 = a2[13];
  v32 = *(_QWORD *)(v31 - 8);
  v33 = (v30 + *(unsigned __int8 *)(v32 + 80) + 9) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v32 + 48))(v33, 1, v31))
    (*(void (**)(unint64_t, uint64_t))(v32 + 8))(v33, v31);
  v34 = v33 + *(_QWORD *)(v32 + 64);
  if (!*(_DWORD *)(v32 + 84))
    ++v34;
  v35 = *(_QWORD *)(a2[14] - 8);
  v36 = (*(unsigned __int8 *)(v35 + 80) + ((((v34 + 7) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 25) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
  (*(void (**)(unint64_t))(v35 + 8))(v36);
  v37 = (*(_QWORD *)(v35 + 64) + v36 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v38 = (_QWORD *)((((((((((v37 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
                    + 23) & 0xFFFFFFFFFFFFFFF8)
                  + 23) & 0xFFFFFFFFFFFFFFF8);
  if (*v38 >= 0xFFFFFFFFuLL)
    swift_release();
  v39 = (_QWORD *)(((unint64_t)v38 + 23) & 0xFFFFFFFFFFFFFFF8);
  if (*v39 >= 0xFFFFFFFFuLL)
    swift_release();
  if (*(_QWORD *)(((unint64_t)v39 + 23) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL)
    swift_release();
  return swift_release();
}

_BYTE *sub_23BF65DCC(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  size_t v22;
  size_t v23;
  int v24;
  int v25;
  unint64_t v26;
  unsigned int v27;
  void *v28;
  const void *v29;
  void *v30;
  const void *v31;
  uint64_t v32;
  _BYTE *v33;
  size_t v34;
  size_t v35;
  size_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const void *v43;
  unsigned int (*v44)(const void *, uint64_t, uint64_t);
  int v45;
  size_t v46;
  size_t v47;
  size_t v48;
  _OWORD *v49;
  _OWORD *v50;
  __int128 v51;
  unint64_t v52;
  unint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  size_t __n;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;

  v5 = sub_23BFF82CC();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v92 = *(_QWORD *)(a3 + 88);
  v8 = *(_QWORD *)(v92 - 8);
  v9 = *(unsigned int *)(v8 + 84);
  if ((_DWORD)v9)
    v10 = v9 - 1;
  else
    v10 = 0;
  if (v10 <= v7)
    v11 = *(_DWORD *)(v6 + 84);
  else
    v11 = v10;
  v93 = *(_QWORD *)(a3 + 16);
  v94 = a3;
  v12 = *(_QWORD *)(v93 - 8);
  v13 = *(unsigned int *)(v12 + 84);
  v14 = v13 - 1;
  if (!(_DWORD)v13)
    v14 = 0;
  if (v14 <= v11)
    v15 = v11;
  else
    v15 = v14;
  if ((_DWORD)v9)
    v16 = *(_QWORD *)(v8 + 64);
  else
    v16 = *(_QWORD *)(v8 + 64) + 1;
  v17 = *(unsigned __int8 *)(v8 + 80);
  v18 = ~v17;
  v19 = *(_QWORD *)(v6 + 64) + v17;
  v20 = *(unsigned __int8 *)(v12 + 80);
  v21 = (v16 + v20 + (v19 & ~v17)) & ~v20;
  v22 = *(_QWORD *)(v12 + 64);
  if (!(_DWORD)v13)
    ++v22;
  v23 = v21 + v22;
  __n = v22;
  v90 = v18;
  v91 = ~v20;
  if (!v15)
  {
    if (!a2[v23])
      goto LABEL_33;
    v24 = (a2[v23] - 1) << (8 * v23);
    if (v23 > 3)
      v24 = 0;
    if ((_DWORD)v23)
    {
      if (v23 <= 3)
        v25 = v21 + v22;
      else
        v25 = 4;
      __asm { BR              X11 }
    }
    if (v24 == -1)
      goto LABEL_33;
    goto LABEL_42;
  }
  if ((_DWORD)v7 != v15)
  {
    v26 = (unint64_t)&a2[v19] & v18;
    if (v10 == v15)
      v27 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(v26, v9, v92);
    else
      v27 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v12 + 48))((v26 + v16 + v20) & ~v20, v13, v93);
    if (v27 < 2)
      goto LABEL_33;
LABEL_42:
    if (v15)
      v34 = v23;
    else
      v34 = v23 + 1;
    v33 = a1;
    memcpy(a1, a2, v34);
    v32 = v94;
    goto LABEL_46;
  }
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v6 + 48))(a2, v7, v5))
    goto LABEL_42;
LABEL_33:
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 16))(a1, a2, v5);
  v28 = (void *)((unint64_t)&a1[v19] & v90);
  v29 = (const void *)((unint64_t)&a2[v19] & v90);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v29, 1, v92))
  {
    memcpy(v28, v29, v16);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(v28, v29, v92);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v28, 0, 1, v92);
  }
  v30 = (void *)(((unint64_t)v28 + v16 + v20) & v91);
  v31 = (const void *)(((unint64_t)v29 + v16 + v20) & v91);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v31, 1, v93))
  {
    memcpy(v30, v31, __n);
    v32 = v94;
    v33 = a1;
    if (v15)
      goto LABEL_46;
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 16))(v30, v31, v93);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v30, 0, 1, v93);
    v32 = v94;
    v33 = a1;
    if (v15)
      goto LABEL_46;
  }
  v33[v23] = 0;
LABEL_46:
  if (v15)
    v35 = v23;
  else
    v35 = v23 + 1;
  v36 = v35 + 7;
  v37 = (unint64_t)&v33[v36] & 0xFFFFFFFFFFFFFFF8;
  v38 = (unint64_t)&a2[v36] & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v37 = *(_QWORD *)v38;
  *(_BYTE *)(v37 + 8) = *(_BYTE *)(v38 + 8);
  v39 = *(_QWORD *)(v32 + 104);
  v40 = *(_QWORD *)(v39 - 8);
  v41 = *(unsigned __int8 *)(v40 + 80);
  v42 = (void *)((v41 + 9 + v37) & ~v41);
  v43 = (const void *)((v41 + 9 + v38) & ~v41);
  v44 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v40 + 48);
  swift_bridgeObjectRetain();
  if (v44(v43, 1, v39))
  {
    v45 = *(_DWORD *)(v40 + 84);
    v46 = *(_QWORD *)(v40 + 64);
    if (v45)
      v47 = v46;
    else
      v47 = v46 + 1;
    memcpy(v42, v43, v47);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v40 + 16))(v42, v43, v39);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v42, 0, 1, v39);
    v45 = *(_DWORD *)(v40 + 84);
    v46 = *(_QWORD *)(v40 + 64);
  }
  if (v45)
    v48 = v46;
  else
    v48 = v46 + 1;
  v49 = (_OWORD *)(((unint64_t)v42 + v48 + 7) & 0xFFFFFFFFFFFFFFF8);
  v50 = (_OWORD *)(((unint64_t)v43 + v48 + 7) & 0xFFFFFFFFFFFFFFF8);
  v51 = v50[1];
  *v49 = *v50;
  v49[1] = v51;
  v52 = ((unint64_t)v49 + 39) & 0xFFFFFFFFFFFFFFF8;
  v53 = ((unint64_t)v50 + 39) & 0xFFFFFFFFFFFFFFF8;
  v54 = *(_OWORD *)v53;
  *(_QWORD *)(v52 + 16) = *(_QWORD *)(v53 + 16);
  *(_OWORD *)v52 = v54;
  *(_BYTE *)(v52 + 24) = *(_BYTE *)(v53 + 24);
  v55 = *(_QWORD *)(*(_QWORD *)(v32 + 112) - 8);
  v56 = *(unsigned __int8 *)(v55 + 80);
  v57 = (v56 + 25 + v52) & ~v56;
  v58 = (v56 + 25 + v53) & ~v56;
  (*(void (**)(uint64_t, uint64_t))(v55 + 16))(v57, v58);
  v59 = *(_QWORD *)(v55 + 64) + 7;
  v60 = (_QWORD *)((v59 + v57) & 0xFFFFFFFFFFFFFFF8);
  v61 = (_QWORD *)((v59 + v58) & 0xFFFFFFFFFFFFFFF8);
  v62 = v61[1];
  *v60 = *v61;
  v60[1] = v62;
  v63 = (_QWORD *)(((unint64_t)v60 + 23) & 0xFFFFFFFFFFFFFFF8);
  v64 = (_QWORD *)(((unint64_t)v61 + 23) & 0xFFFFFFFFFFFFFFF8);
  v65 = v64[1];
  *v63 = *v64;
  v63[1] = v65;
  v66 = (_QWORD *)(((unint64_t)v63 + 23) & 0xFFFFFFFFFFFFFFF8);
  v67 = (_QWORD *)(((unint64_t)v64 + 23) & 0xFFFFFFFFFFFFFFF8);
  v68 = v67[1];
  *v66 = *v67;
  v66[1] = v68;
  v69 = (_QWORD *)(((unint64_t)v66 + 23) & 0xFFFFFFFFFFFFFFF8);
  v70 = (_QWORD *)(((unint64_t)v67 + 23) & 0xFFFFFFFFFFFFFFF8);
  v71 = v70[1];
  *v69 = *v70;
  v69[1] = v71;
  v72 = (_QWORD *)(((unint64_t)v69 + 23) & 0xFFFFFFFFFFFFFFF8);
  v73 = (_QWORD *)(((unint64_t)v70 + 23) & 0xFFFFFFFFFFFFFFF8);
  v74 = v73[1];
  *v72 = *v73;
  v72[1] = v74;
  v75 = ((unint64_t)v72 + 23) & 0xFFFFFFFFFFFFFFF8;
  v76 = (unint64_t *)(((unint64_t)v73 + 23) & 0xFFFFFFFFFFFFFFF8);
  v77 = *v76;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  if (v77 < 0xFFFFFFFF)
  {
    *(_OWORD *)v75 = *(_OWORD *)v76;
  }
  else
  {
    v78 = v76[1];
    *(_QWORD *)v75 = v77;
    *(_QWORD *)(v75 + 8) = v78;
    swift_retain();
  }
  v79 = (v75 + 23) & 0xFFFFFFFFFFFFFFF8;
  v80 = ((unint64_t)v76 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v80 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v79 = *(_OWORD *)v80;
  }
  else
  {
    v81 = *(_QWORD *)(v80 + 8);
    *(_QWORD *)v79 = *(_QWORD *)v80;
    *(_QWORD *)(v79 + 8) = v81;
    swift_retain();
  }
  v82 = (v79 + 23) & 0xFFFFFFFFFFFFFFF8;
  v83 = (v80 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v83 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v82 = *(_OWORD *)v83;
  }
  else
  {
    v84 = *(_QWORD *)(v83 + 8);
    *(_QWORD *)v82 = *(_QWORD *)v83;
    *(_QWORD *)(v82 + 8) = v84;
    swift_retain();
  }
  v85 = (v82 + 23) & 0xFFFFFFFFFFFFFFF8;
  v86 = (v83 + 23) & 0xFFFFFFFFFFFFFFF8;
  v87 = *(_QWORD *)v86;
  *(_BYTE *)(v85 + 8) = *(_BYTE *)(v86 + 8);
  *(_QWORD *)v85 = v87;
  *(_QWORD *)(v85 + 16) = *(_QWORD *)(v86 + 16);
  swift_retain();
  return v33;
}

_BYTE *sub_23BF6638C(_BYTE *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  uint64_t (*v25)(unsigned __int8 *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  uint64_t v32;
  int v33;
  const void *v34;
  int v35;
  uint64_t v36;
  size_t v37;
  char v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  unsigned int v42;
  unint64_t v43;
  unsigned int v44;
  unint64_t v45;
  unsigned int v46;
  int v47;
  int v48;
  unint64_t v49;
  size_t v50;
  const void *v51;
  void *v52;
  void *v53;
  uint64_t (*v54)(void *, uint64_t, uint64_t);
  int v55;
  int v56;
  size_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  uint64_t (*v61)(void *, uint64_t, uint64_t);
  int v62;
  int v63;
  unsigned int v64;
  size_t v65;
  void *v66;
  const void *v67;
  size_t v68;
  void *v69;
  const void *v70;
  size_t v71;
  size_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  void *v79;
  uint64_t (*v80)(void *, uint64_t, uint64_t);
  int v81;
  int v82;
  size_t v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  _QWORD *v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  _QWORD *v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  _QWORD *v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v128;
  size_t v129;
  uint64_t v130;
  size_t __n;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unsigned int v137;

  v5 = sub_23BFF82CC();
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  v133 = *(_QWORD *)(a3 + 88);
  v9 = *(_QWORD *)(v133 - 8);
  v10 = *(unsigned int *)(v9 + 84);
  if ((_DWORD)v10)
    v11 = v10 - 1;
  else
    v11 = 0;
  if (v11 <= v8)
    v12 = *(_DWORD *)(v7 + 84);
  else
    v12 = v11;
  v136 = a3;
  v132 = *(_QWORD *)(a3 + 16);
  v13 = *(_QWORD *)(v132 - 8);
  v14 = *(unsigned int *)(v13 + 84);
  v15 = v14 - 1;
  if (!(_DWORD)v14)
    v15 = 0;
  if (v15 <= v12)
    v16 = v12;
  else
    v16 = v15;
  if ((_DWORD)v10)
    v17 = *(_QWORD *)(v9 + 64);
  else
    v17 = *(_QWORD *)(v9 + 64) + 1;
  v18 = *(unsigned __int8 *)(v9 + 80);
  v19 = ~v18;
  v20 = *(_QWORD *)(v7 + 64) + v18;
  v21 = *(unsigned __int8 *)(v13 + 80);
  v130 = ~v21;
  __n = v17;
  v22 = (v17 + v21 + (v20 & ~v18)) & ~v21;
  if ((_DWORD)v14)
    v23 = *(_QWORD *)(v13 + 64);
  else
    v23 = *(_QWORD *)(v13 + 64) + 1;
  v24 = v22 + v23;
  v137 = v16;
  v134 = *(_QWORD *)(v7 + 64) + v18;
  v135 = v22 + v23;
  v129 = v23;
  if (!v16)
  {
    v38 = 8 * v24;
    v36 = v136;
    v34 = a2;
    v37 = v24;
    if (a1[v24])
    {
      v39 = (a1[v24] - 1) << v38;
      if (v24 > 3)
        v39 = 0;
      if ((_DWORD)v24)
      {
        if (v24 > 3)
          LODWORD(v24) = 4;
        __asm { BR              X12 }
      }
      if (v39 != -1)
      {
        if (!a2[v24])
          goto LABEL_83;
        v37 = v135;
        if ((a2[v24] - 1) << v38 == -1)
          goto LABEL_83;
        goto LABEL_79;
      }
    }
    if (!a2[v24])
      goto LABEL_62;
    v47 = (a2[v24] - 1) << v38;
    if (v135 > 3)
      v47 = 0;
    if ((_DWORD)v135)
    {
      if (v135 <= 3)
        v48 = v135;
      else
        v48 = 4;
      __asm { BR              X11 }
    }
    v35 = v47 + 1;
    goto LABEL_57;
  }
  if ((_DWORD)v8 == v16)
  {
    v25 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v7 + 48);
    v128 = *(_QWORD *)(v133 - 8);
    v26 = *(_QWORD *)(v5 - 8);
    v27 = *(unsigned __int8 *)(v13 + 80);
    v28 = ~v18;
    v29 = *(_QWORD *)(v132 - 8);
    v30 = a1;
    v31 = a1;
    v32 = v6;
    v33 = ((uint64_t (*)(_BYTE *, uint64_t))v25)(v31, v8);
    v34 = a2;
    v35 = v25(a2, v8, v32);
    v6 = v32;
    a1 = v30;
    v13 = v29;
    v19 = v28;
    v21 = v27;
    v7 = v26;
    v9 = v128;
    v36 = v136;
    if (v33)
    {
      v37 = v135;
      if (!v35)
        goto LABEL_83;
LABEL_79:
      if (v137)
        v65 = v37;
      else
        v65 = v37 + 1;
      memcpy(a1, v34, v65);
      v64 = v137;
      goto LABEL_91;
    }
LABEL_57:
    if (v35)
    {
LABEL_58:
      (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(a1, v6);
      v49 = (unint64_t)&a1[v134] & v19;
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(v49, 1, v133))
        (*(void (**)(unint64_t, uint64_t))(v9 + 8))(v49, v133);
      v50 = (v49 + __n + v21) & v130;
      v37 = v135;
      if (!(*(unsigned int (**)(size_t, uint64_t, uint64_t))(v13 + 48))(v50, 1, v132))
        (*(void (**)(size_t, uint64_t))(v13 + 8))(v50, v132);
      goto LABEL_79;
    }
LABEL_62:
    (*(void (**)(_BYTE *, const void *, uint64_t))(v7 + 24))(a1, v34, v6);
    v51 = v34;
    v52 = (void *)((unint64_t)&a1[v134] & v19);
    v53 = (void *)(((unint64_t)v51 + v134) & v19);
    v54 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v9 + 48);
    v55 = v54(v52, 1, v133);
    v56 = v54(v53, 1, v133);
    if (v55)
    {
      if (!v56)
      {
        (*(void (**)(void *, void *, uint64_t))(v9 + 16))(v52, v53, v133);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v52, 0, 1, v133);
LABEL_69:
        v57 = __n;
        v58 = v132;
LABEL_70:
        v59 = (void *)(((unint64_t)v52 + v57 + v21) & v130);
        v60 = (void *)(((unint64_t)v53 + v57 + v21) & v130);
        v61 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
        v62 = v61(v59, 1, v58);
        v63 = v61(v60, 1, v58);
        if (v62)
        {
          if (!v63)
          {
            (*(void (**)(void *, void *, uint64_t))(v13 + 16))(v59, v60, v58);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v59, 0, 1, v58);
LABEL_76:
            v37 = v135;
            v36 = v136;
            v34 = a2;
            v64 = v137;
            goto LABEL_91;
          }
        }
        else
        {
          if (!v63)
          {
            (*(void (**)(void *, void *, uint64_t))(v13 + 24))(v59, v60, v58);
            goto LABEL_76;
          }
          (*(void (**)(void *, uint64_t))(v13 + 8))(v59, v58);
        }
        memcpy(v59, v60, v129);
        goto LABEL_76;
      }
    }
    else
    {
      if (!v56)
      {
        (*(void (**)(void *, void *, uint64_t))(v9 + 24))(v52, v53, v133);
        goto LABEL_69;
      }
      (*(void (**)(void *, uint64_t))(v9 + 8))(v52, v133);
    }
    v57 = __n;
    memcpy(v52, v53, __n);
    v58 = v132;
    goto LABEL_70;
  }
  v40 = v5;
  v41 = (unint64_t)&a1[v20] & v19;
  if (v11 == v16)
    v42 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(v41, v10, v133);
  else
    v42 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v13 + 48))((v41 + __n + v21) & ~v21, v14, v132);
  if (v42 < 2)
  {
    v43 = (unint64_t)&a2[v134] & v19;
    if (v11 == v137)
      v44 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(v43, v10, v133);
    else
      v44 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v13 + 48))((v43 + __n + v21) & v130, v14, v132);
    v36 = v136;
    v34 = a2;
    v6 = v40;
    if (v44 >= 2)
      goto LABEL_58;
    goto LABEL_62;
  }
  v45 = (unint64_t)&a2[v134] & v19;
  if (v11 == v137)
    v46 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(v45, v10, v133);
  else
    v46 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v13 + 48))((v45 + __n + v21) & v130, v14, v132);
  v37 = v135;
  v36 = v136;
  v34 = a2;
  v6 = v40;
  if (v46 >= 2)
    goto LABEL_79;
LABEL_83:
  (*(void (**)(_BYTE *, const void *, uint64_t))(v7 + 16))(a1, v34, v6);
  v66 = (void *)((unint64_t)&a1[v134] & v19);
  v67 = (const void *)(((unint64_t)v34 + v134) & v19);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v67, 1, v133))
  {
    v68 = __n;
    memcpy(v66, v67, __n);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v66, v67, v133);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v66, 0, 1, v133);
    v68 = __n;
  }
  v69 = (void *)(((unint64_t)v66 + v68 + v21) & v130);
  v70 = (const void *)(((unint64_t)v67 + v68 + v21) & v130);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v70, 1, v132))
  {
    memcpy(v69, v70, v129);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(v69, v70, v132);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v69, 0, 1, v132);
  }
  v34 = a2;
  v64 = v137;
  if (!v137)
    a1[v37] = 0;
LABEL_91:
  if (v64)
    v71 = v37;
  else
    v71 = v37 + 1;
  v72 = v71 + 7;
  v73 = (unint64_t)&a1[v72] & 0xFFFFFFFFFFFFFFF8;
  v74 = ((unint64_t)v34 + v72) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v73 = *(_QWORD *)v74;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v73 + 8) = *(_BYTE *)(v74 + 8);
  v75 = *(_QWORD *)(v36 + 104);
  v76 = *(_QWORD *)(v75 - 8);
  v77 = *(unsigned __int8 *)(v76 + 80);
  v78 = (void *)((v77 + 9 + v73) & ~v77);
  v79 = (void *)((v77 + 9 + v74) & ~v77);
  v80 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v76 + 48);
  v81 = v80(v78, 1, v75);
  v82 = v80(v79, 1, v75);
  if (v81)
  {
    if (!v82)
    {
      (*(void (**)(void *, void *, uint64_t))(v76 + 16))(v78, v79, v75);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v76 + 56))(v78, 0, 1, v75);
      goto LABEL_103;
    }
  }
  else
  {
    if (!v82)
    {
      (*(void (**)(void *, void *, uint64_t))(v76 + 24))(v78, v79, v75);
      goto LABEL_103;
    }
    (*(void (**)(void *, uint64_t))(v76 + 8))(v78, v75);
  }
  if (*(_DWORD *)(v76 + 84))
    v83 = *(_QWORD *)(v76 + 64);
  else
    v83 = *(_QWORD *)(v76 + 64) + 1;
  memcpy(v78, v79, v83);
LABEL_103:
  if (*(_DWORD *)(v76 + 84))
    v84 = *(_QWORD *)(v76 + 64);
  else
    v84 = *(_QWORD *)(v76 + 64) + 1;
  v85 = (_QWORD *)(((unint64_t)v78 + v84 + 7) & 0xFFFFFFFFFFFFFFF8);
  v86 = (_QWORD *)(((unint64_t)v79 + v84 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v85 = *v86;
  v85[1] = v86[1];
  v85[2] = v86[2];
  v85[3] = v86[3];
  v87 = ((unint64_t)v85 + 39) & 0xFFFFFFFFFFFFFFF8;
  v88 = ((unint64_t)v86 + 39) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v87 = *(_QWORD *)v88;
  *(_QWORD *)(v87 + 8) = *(_QWORD *)(v88 + 8);
  *(_QWORD *)(v87 + 16) = *(_QWORD *)(v88 + 16);
  *(_BYTE *)(v87 + 24) = *(_BYTE *)(v88 + 24);
  v89 = *(_QWORD *)(*(_QWORD *)(v36 + 112) - 8);
  v90 = *(unsigned __int8 *)(v89 + 80);
  v91 = (v90 + 25 + v87) & ~v90;
  v92 = (v90 + 25 + v88) & ~v90;
  (*(void (**)(uint64_t, uint64_t))(v89 + 24))(v91, v92);
  v93 = *(_QWORD *)(v89 + 64) + 7;
  v94 = (_QWORD *)((v93 + v91) & 0xFFFFFFFFFFFFFFF8);
  v95 = (_QWORD *)((v93 + v92) & 0xFFFFFFFFFFFFFFF8);
  v96 = v95[1];
  *v94 = *v95;
  v94[1] = v96;
  swift_retain();
  swift_release();
  v97 = (_QWORD *)(((unint64_t)v94 + 23) & 0xFFFFFFFFFFFFFFF8);
  v98 = (_QWORD *)(((unint64_t)v95 + 23) & 0xFFFFFFFFFFFFFFF8);
  v99 = v98[1];
  *v97 = *v98;
  v97[1] = v99;
  swift_retain();
  swift_release();
  v100 = (_QWORD *)(((unint64_t)v97 + 23) & 0xFFFFFFFFFFFFFFF8);
  v101 = (_QWORD *)(((unint64_t)v98 + 23) & 0xFFFFFFFFFFFFFFF8);
  v102 = v101[1];
  *v100 = *v101;
  v100[1] = v102;
  swift_retain();
  swift_release();
  v103 = (_QWORD *)(((unint64_t)v100 + 23) & 0xFFFFFFFFFFFFFFF8);
  v104 = (_QWORD *)(((unint64_t)v101 + 23) & 0xFFFFFFFFFFFFFFF8);
  v105 = v104[1];
  *v103 = *v104;
  v103[1] = v105;
  swift_retain();
  swift_release();
  v106 = (_QWORD *)(((unint64_t)v103 + 23) & 0xFFFFFFFFFFFFFFF8);
  v107 = (_QWORD *)(((unint64_t)v104 + 23) & 0xFFFFFFFFFFFFFFF8);
  v108 = v107[1];
  *v106 = *v107;
  v106[1] = v108;
  swift_retain();
  swift_release();
  v109 = (_QWORD *)(((unint64_t)v106 + 23) & 0xFFFFFFFFFFFFFFF8);
  v110 = (unint64_t *)(((unint64_t)v107 + 23) & 0xFFFFFFFFFFFFFFF8);
  v111 = *v110;
  if (*v109 < 0xFFFFFFFFuLL)
  {
    if (v111 >= 0xFFFFFFFF)
    {
      v113 = v110[1];
      *v109 = v111;
      v109[1] = v113;
      swift_retain();
      goto LABEL_113;
    }
  }
  else
  {
    if (v111 >= 0xFFFFFFFF)
    {
      v112 = v110[1];
      *v109 = v111;
      v109[1] = v112;
      swift_retain();
      swift_release();
      goto LABEL_113;
    }
    swift_release();
  }
  *(_OWORD *)v109 = *(_OWORD *)v110;
LABEL_113:
  v114 = (_QWORD *)(((unint64_t)v109 + 23) & 0xFFFFFFFFFFFFFFF8);
  v115 = (unint64_t *)(((unint64_t)v110 + 23) & 0xFFFFFFFFFFFFFFF8);
  v116 = *v115;
  if (*v114 < 0xFFFFFFFFuLL)
  {
    if (v116 >= 0xFFFFFFFF)
    {
      v118 = v115[1];
      *v114 = v116;
      v114[1] = v118;
      swift_retain();
      goto LABEL_120;
    }
  }
  else
  {
    if (v116 >= 0xFFFFFFFF)
    {
      v117 = v115[1];
      *v114 = v116;
      v114[1] = v117;
      swift_retain();
      swift_release();
      goto LABEL_120;
    }
    swift_release();
  }
  *(_OWORD *)v114 = *(_OWORD *)v115;
LABEL_120:
  v119 = (_QWORD *)(((unint64_t)v114 + 23) & 0xFFFFFFFFFFFFFFF8);
  v120 = (unint64_t *)(((unint64_t)v115 + 23) & 0xFFFFFFFFFFFFFFF8);
  v121 = *v120;
  if (*v119 < 0xFFFFFFFFuLL)
  {
    if (v121 >= 0xFFFFFFFF)
    {
      v123 = v120[1];
      *v119 = v121;
      v119[1] = v123;
      swift_retain();
      goto LABEL_127;
    }
LABEL_126:
    *(_OWORD *)v119 = *(_OWORD *)v120;
    goto LABEL_127;
  }
  if (v121 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_126;
  }
  v122 = v120[1];
  *v119 = v121;
  v119[1] = v122;
  swift_retain();
  swift_release();
LABEL_127:
  v124 = ((unint64_t)v119 + 23) & 0xFFFFFFFFFFFFFFF8;
  v125 = ((unint64_t)v120 + 23) & 0xFFFFFFFFFFFFFFF8;
  v126 = *(_QWORD *)v125;
  *(_BYTE *)(v124 + 8) = *(_BYTE *)(v125 + 8);
  *(_QWORD *)v124 = v126;
  *(_QWORD *)(v124 + 16) = *(_QWORD *)(v125 + 16);
  swift_retain();
  swift_release();
  return a1;
}

_BYTE *sub_23BF66F14(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  size_t v22;
  size_t v23;
  int v24;
  int v25;
  unint64_t v26;
  unsigned int v27;
  void *v28;
  const void *v29;
  void *v30;
  const void *v31;
  _BYTE *v32;
  uint64_t v33;
  size_t v34;
  size_t v35;
  size_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const void *v43;
  int v44;
  size_t v45;
  size_t v46;
  size_t v47;
  _OWORD *v48;
  _OWORD *v49;
  __int128 v50;
  unint64_t v51;
  unint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD *v59;
  _OWORD *v60;
  _OWORD *v61;
  _OWORD *v62;
  _OWORD *v63;
  _OWORD *v64;
  _OWORD *v65;
  _OWORD *v66;
  _OWORD *v67;
  _OWORD *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  __int128 v79;
  unint64_t v80;
  size_t __n;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;

  v5 = sub_23BFF82CC();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v85 = *(_QWORD *)(a3 + 88);
  v8 = *(_QWORD *)(v85 - 8);
  v9 = *(unsigned int *)(v8 + 84);
  if ((_DWORD)v9)
    v10 = v9 - 1;
  else
    v10 = 0;
  if (v10 <= v7)
    v11 = *(_DWORD *)(v6 + 84);
  else
    v11 = v10;
  v86 = *(_QWORD *)(a3 + 16);
  v87 = a3;
  v12 = *(_QWORD *)(v86 - 8);
  v13 = *(unsigned int *)(v12 + 84);
  v14 = v13 - 1;
  if (!(_DWORD)v13)
    v14 = 0;
  if (v14 <= v11)
    v15 = v11;
  else
    v15 = v14;
  if ((_DWORD)v9)
    v16 = *(_QWORD *)(v8 + 64);
  else
    v16 = *(_QWORD *)(v8 + 64) + 1;
  v17 = *(unsigned __int8 *)(v8 + 80);
  v18 = ~v17;
  v19 = *(_QWORD *)(v6 + 64) + v17;
  v20 = *(unsigned __int8 *)(v12 + 80);
  v21 = (v16 + v20 + (v19 & ~v17)) & ~v20;
  v22 = *(_QWORD *)(v12 + 64);
  if (!(_DWORD)v13)
    ++v22;
  v23 = v21 + v22;
  __n = v22;
  v83 = v18;
  v84 = ~v20;
  if (!v15)
  {
    if (!a2[v23])
      goto LABEL_33;
    v24 = (a2[v23] - 1) << (8 * v23);
    if (v23 > 3)
      v24 = 0;
    if ((_DWORD)v23)
    {
      if (v23 <= 3)
        v25 = v21 + v22;
      else
        v25 = 4;
      __asm { BR              X11 }
    }
    if (v24 == -1)
      goto LABEL_33;
    goto LABEL_42;
  }
  if ((_DWORD)v7 != v15)
  {
    v26 = (unint64_t)&a2[v19] & v18;
    if (v10 == v15)
      v27 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(v26, v9, v85);
    else
      v27 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v12 + 48))((v26 + v16 + v20) & ~v20, v13, v86);
    if (v27 < 2)
      goto LABEL_33;
LABEL_42:
    if (v15)
      v34 = v23;
    else
      v34 = v23 + 1;
    v32 = a1;
    memcpy(a1, a2, v34);
    v33 = v87;
    goto LABEL_46;
  }
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v6 + 48))(a2, v7, v5))
    goto LABEL_42;
LABEL_33:
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 32))(a1, a2, v5);
  v28 = (void *)((unint64_t)&a1[v19] & v83);
  v29 = (const void *)((unint64_t)&a2[v19] & v83);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v29, 1, v85))
  {
    memcpy(v28, v29, v16);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(v28, v29, v85);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v28, 0, 1, v85);
  }
  v30 = (void *)(((unint64_t)v28 + v16 + v20) & v84);
  v31 = (const void *)(((unint64_t)v29 + v16 + v20) & v84);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v31, 1, v86))
  {
    memcpy(v30, v31, __n);
    v33 = v87;
    v32 = a1;
    if (v15)
      goto LABEL_46;
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v30, v31, v86);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v30, 0, 1, v86);
    v33 = v87;
    v32 = a1;
    if (v15)
      goto LABEL_46;
  }
  v32[v23] = 0;
LABEL_46:
  if (v15)
    v35 = v23;
  else
    v35 = v23 + 1;
  v36 = v35 + 7;
  v37 = (unint64_t)&v32[v36] & 0xFFFFFFFFFFFFFFF8;
  v38 = (unint64_t)&a2[v36] & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v37 = *(_QWORD *)v38;
  *(_BYTE *)(v37 + 8) = *(_BYTE *)(v38 + 8);
  v39 = *(_QWORD *)(v33 + 104);
  v40 = *(_QWORD *)(v39 - 8);
  v41 = *(unsigned __int8 *)(v40 + 80);
  v42 = (void *)((v41 + 9 + v37) & ~v41);
  v43 = (const void *)((v41 + 9 + v38) & ~v41);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v40 + 48))(v43, 1, v39))
  {
    v44 = *(_DWORD *)(v40 + 84);
    v45 = *(_QWORD *)(v40 + 64);
    if (v44)
      v46 = v45;
    else
      v46 = v45 + 1;
    memcpy(v42, v43, v46);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v40 + 32))(v42, v43, v39);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v42, 0, 1, v39);
    v44 = *(_DWORD *)(v40 + 84);
    v45 = *(_QWORD *)(v40 + 64);
  }
  if (v44)
    v47 = v45;
  else
    v47 = v45 + 1;
  v48 = (_OWORD *)(((unint64_t)v42 + v47 + 7) & 0xFFFFFFFFFFFFFFF8);
  v49 = (_OWORD *)(((unint64_t)v43 + v47 + 7) & 0xFFFFFFFFFFFFFFF8);
  v50 = v49[1];
  *v48 = *v49;
  v48[1] = v50;
  v51 = ((unint64_t)v48 + 39) & 0xFFFFFFFFFFFFFFF8;
  v52 = ((unint64_t)v49 + 39) & 0xFFFFFFFFFFFFFFF8;
  v53 = *(_OWORD *)v52;
  *(_QWORD *)(v51 + 16) = *(_QWORD *)(v52 + 16);
  *(_OWORD *)v51 = v53;
  *(_BYTE *)(v51 + 24) = *(_BYTE *)(v52 + 24);
  v54 = *(_QWORD *)(*(_QWORD *)(v33 + 112) - 8);
  v55 = *(unsigned __int8 *)(v54 + 80);
  v56 = (v55 + 25 + v51) & ~v55;
  v57 = (v55 + 25 + v52) & ~v55;
  (*(void (**)(uint64_t, uint64_t))(v54 + 32))(v56, v57);
  v58 = *(_QWORD *)(v54 + 64) + 7;
  v59 = (_OWORD *)((v58 + v56) & 0xFFFFFFFFFFFFFFF8);
  v60 = (_OWORD *)((v58 + v57) & 0xFFFFFFFFFFFFFFF8);
  *v59 = *v60;
  v61 = (_OWORD *)(((unint64_t)v59 + 23) & 0xFFFFFFFFFFFFF8);
  v62 = (_OWORD *)(((unint64_t)v60 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v61 = *v62;
  v63 = (_OWORD *)(((unint64_t)v61 + 23) & 0xFFFFFFFFFFFFFFF8);
  v64 = (_OWORD *)(((unint64_t)v62 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v63 = *v64;
  v65 = (_OWORD *)(((unint64_t)v63 + 23) & 0xFFFFFFFFFFFFF8);
  v66 = (_OWORD *)(((unint64_t)v64 + 23) & 0xFFFFFFFFFFFFF8);
  *v65 = *v66;
  v67 = (_OWORD *)(((unint64_t)v65 + 23) & 0xFFFFFFFFFFFFF8);
  v68 = (_OWORD *)(((unint64_t)v66 + 23) & 0xFFFFFFFFFFFFF8);
  *v67 = *v68;
  v69 = ((unint64_t)v67 + 23) & 0xFFFFFFFFFFFFFFF8;
  v70 = ((unint64_t)v68 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v70 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v69 = *(_OWORD *)v70;
  }
  else
  {
    v71 = *(_QWORD *)(v70 + 8);
    *(_QWORD *)v69 = *(_QWORD *)v70;
    *(_QWORD *)(v69 + 8) = v71;
  }
  v72 = (v69 + 23) & 0xFFFFFFFFFFFFFFF8;
  v73 = (v70 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v73 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v72 = *(_OWORD *)v73;
  }
  else
  {
    v74 = *(_QWORD *)(v73 + 8);
    *(_QWORD *)v72 = *(_QWORD *)v73;
    *(_QWORD *)(v72 + 8) = v74;
  }
  v75 = (v72 + 23) & 0xFFFFFFFFFFFFFFF8;
  v76 = (v73 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v76 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v75 = *(_OWORD *)v76;
  }
  else
  {
    v77 = *(_QWORD *)(v76 + 8);
    *(_QWORD *)v75 = *(_QWORD *)v76;
    *(_QWORD *)(v75 + 8) = v77;
  }
  v78 = (v76 + 23) & 0xFFFFFFFFFFFFFFF8;
  v79 = *(_OWORD *)v78;
  v80 = (v75 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v80 + 16) = *(_QWORD *)(v78 + 16);
  *(_OWORD *)v80 = v79;
  return v32;
}

_BYTE *sub_23BF6746C(_BYTE *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  uint64_t (*v25)(unsigned __int8 *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  uint64_t v32;
  int v33;
  const void *v34;
  int v35;
  uint64_t v36;
  size_t v37;
  char v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  unsigned int v42;
  unint64_t v43;
  unsigned int v44;
  unint64_t v45;
  unsigned int v46;
  int v47;
  int v48;
  unint64_t v49;
  size_t v50;
  const void *v51;
  void *v52;
  void *v53;
  uint64_t (*v54)(void *, uint64_t, uint64_t);
  int v55;
  int v56;
  size_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  uint64_t (*v61)(void *, uint64_t, uint64_t);
  int v62;
  int v63;
  unsigned int v64;
  size_t v65;
  void *v66;
  const void *v67;
  size_t v68;
  void *v69;
  const void *v70;
  size_t v71;
  size_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  void *v79;
  uint64_t (*v80)(void *, uint64_t, uint64_t);
  int v81;
  int v82;
  size_t v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _OWORD *v94;
  uint64_t v95;
  unint64_t v96;
  _OWORD *v97;
  _OWORD *v98;
  _OWORD *v99;
  _OWORD *v100;
  uint64_t v101;
  __int128 v102;
  _OWORD *v103;
  uint64_t v104;
  _QWORD *v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  _QWORD *v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v124;
  size_t v125;
  uint64_t v126;
  size_t __n;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;

  v5 = sub_23BFF82CC();
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  v129 = *(_QWORD *)(a3 + 88);
  v9 = *(_QWORD *)(v129 - 8);
  v10 = *(unsigned int *)(v9 + 84);
  if ((_DWORD)v10)
    v11 = v10 - 1;
  else
    v11 = 0;
  if (v11 <= v8)
    v12 = *(_DWORD *)(v7 + 84);
  else
    v12 = v11;
  v132 = a3;
  v128 = *(_QWORD *)(a3 + 16);
  v13 = *(_QWORD *)(v128 - 8);
  v14 = *(unsigned int *)(v13 + 84);
  v15 = v14 - 1;
  if (!(_DWORD)v14)
    v15 = 0;
  if (v15 <= v12)
    v16 = v12;
  else
    v16 = v15;
  if ((_DWORD)v10)
    v17 = *(_QWORD *)(v9 + 64);
  else
    v17 = *(_QWORD *)(v9 + 64) + 1;
  v18 = *(unsigned __int8 *)(v9 + 80);
  v19 = ~v18;
  v20 = *(_QWORD *)(v7 + 64) + v18;
  v21 = *(unsigned __int8 *)(v13 + 80);
  v126 = ~v21;
  __n = v17;
  v22 = (v17 + v21 + (v20 & ~v18)) & ~v21;
  if ((_DWORD)v14)
    v23 = *(_QWORD *)(v13 + 64);
  else
    v23 = *(_QWORD *)(v13 + 64) + 1;
  v24 = v22 + v23;
  v133 = v16;
  v130 = *(_QWORD *)(v7 + 64) + v18;
  v131 = v22 + v23;
  v125 = v23;
  if (!v16)
  {
    v38 = 8 * v24;
    v36 = v132;
    v34 = a2;
    v37 = v24;
    if (a1[v24])
    {
      v39 = (a1[v24] - 1) << v38;
      if (v24 > 3)
        v39 = 0;
      if ((_DWORD)v24)
      {
        if (v24 > 3)
          LODWORD(v24) = 4;
        __asm { BR              X12 }
      }
      if (v39 != -1)
      {
        if (!a2[v24])
          goto LABEL_83;
        v37 = v131;
        if ((a2[v24] - 1) << v38 == -1)
          goto LABEL_83;
        goto LABEL_79;
      }
    }
    if (!a2[v24])
      goto LABEL_62;
    v47 = (a2[v24] - 1) << v38;
    if (v131 > 3)
      v47 = 0;
    if ((_DWORD)v131)
    {
      if (v131 <= 3)
        v48 = v131;
      else
        v48 = 4;
      __asm { BR              X11 }
    }
    v35 = v47 + 1;
    goto LABEL_57;
  }
  if ((_DWORD)v8 == v16)
  {
    v25 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v7 + 48);
    v124 = *(_QWORD *)(v129 - 8);
    v26 = *(_QWORD *)(v5 - 8);
    v27 = *(unsigned __int8 *)(v13 + 80);
    v28 = ~v18;
    v29 = *(_QWORD *)(v128 - 8);
    v30 = a1;
    v31 = a1;
    v32 = v6;
    v33 = ((uint64_t (*)(_BYTE *, uint64_t))v25)(v31, v8);
    v34 = a2;
    v35 = v25(a2, v8, v32);
    v6 = v32;
    a1 = v30;
    v13 = v29;
    v19 = v28;
    v21 = v27;
    v7 = v26;
    v9 = v124;
    v36 = v132;
    if (v33)
    {
      v37 = v131;
      if (!v35)
        goto LABEL_83;
LABEL_79:
      if (v133)
        v65 = v37;
      else
        v65 = v37 + 1;
      memcpy(a1, v34, v65);
      v64 = v133;
      goto LABEL_91;
    }
LABEL_57:
    if (v35)
    {
LABEL_58:
      (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(a1, v6);
      v49 = (unint64_t)&a1[v130] & v19;
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(v49, 1, v129))
        (*(void (**)(unint64_t, uint64_t))(v9 + 8))(v49, v129);
      v50 = (v49 + __n + v21) & v126;
      v37 = v131;
      if (!(*(unsigned int (**)(size_t, uint64_t, uint64_t))(v13 + 48))(v50, 1, v128))
        (*(void (**)(size_t, uint64_t))(v13 + 8))(v50, v128);
      goto LABEL_79;
    }
LABEL_62:
    (*(void (**)(_BYTE *, const void *, uint64_t))(v7 + 40))(a1, v34, v6);
    v51 = v34;
    v52 = (void *)((unint64_t)&a1[v130] & v19);
    v53 = (void *)(((unint64_t)v51 + v130) & v19);
    v54 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v9 + 48);
    v55 = v54(v52, 1, v129);
    v56 = v54(v53, 1, v129);
    if (v55)
    {
      if (!v56)
      {
        (*(void (**)(void *, void *, uint64_t))(v9 + 32))(v52, v53, v129);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v52, 0, 1, v129);
LABEL_69:
        v57 = __n;
        v58 = v128;
LABEL_70:
        v59 = (void *)(((unint64_t)v52 + v57 + v21) & v126);
        v60 = (void *)(((unint64_t)v53 + v57 + v21) & v126);
        v61 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
        v62 = v61(v59, 1, v58);
        v63 = v61(v60, 1, v58);
        if (v62)
        {
          if (!v63)
          {
            (*(void (**)(void *, void *, uint64_t))(v13 + 32))(v59, v60, v58);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v59, 0, 1, v58);
LABEL_76:
            v37 = v131;
            v36 = v132;
            v34 = a2;
            v64 = v133;
            goto LABEL_91;
          }
        }
        else
        {
          if (!v63)
          {
            (*(void (**)(void *, void *, uint64_t))(v13 + 40))(v59, v60, v58);
            goto LABEL_76;
          }
          (*(void (**)(void *, uint64_t))(v13 + 8))(v59, v58);
        }
        memcpy(v59, v60, v125);
        goto LABEL_76;
      }
    }
    else
    {
      if (!v56)
      {
        (*(void (**)(void *, void *, uint64_t))(v9 + 40))(v52, v53, v129);
        goto LABEL_69;
      }
      (*(void (**)(void *, uint64_t))(v9 + 8))(v52, v129);
    }
    v57 = __n;
    memcpy(v52, v53, __n);
    v58 = v128;
    goto LABEL_70;
  }
  v40 = v5;
  v41 = (unint64_t)&a1[v20] & v19;
  if (v11 == v16)
    v42 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(v41, v10, v129);
  else
    v42 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v13 + 48))((v41 + __n + v21) & ~v21, v14, v128);
  if (v42 < 2)
  {
    v43 = (unint64_t)&a2[v130] & v19;
    if (v11 == v133)
      v44 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(v43, v10, v129);
    else
      v44 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v13 + 48))((v43 + __n + v21) & v126, v14, v128);
    v36 = v132;
    v34 = a2;
    v6 = v40;
    if (v44 >= 2)
      goto LABEL_58;
    goto LABEL_62;
  }
  v45 = (unint64_t)&a2[v130] & v19;
  if (v11 == v133)
    v46 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(v45, v10, v129);
  else
    v46 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v13 + 48))((v45 + __n + v21) & v126, v14, v128);
  v37 = v131;
  v36 = v132;
  v34 = a2;
  v6 = v40;
  if (v46 >= 2)
    goto LABEL_79;
LABEL_83:
  (*(void (**)(_BYTE *, const void *, uint64_t))(v7 + 32))(a1, v34, v6);
  v66 = (void *)((unint64_t)&a1[v130] & v19);
  v67 = (const void *)(((unint64_t)v34 + v130) & v19);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v67, 1, v129))
  {
    v68 = __n;
    memcpy(v66, v67, __n);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(v66, v67, v129);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v66, 0, 1, v129);
    v68 = __n;
  }
  v69 = (void *)(((unint64_t)v66 + v68 + v21) & v126);
  v70 = (const void *)(((unint64_t)v67 + v68 + v21) & v126);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v70, 1, v128))
  {
    memcpy(v69, v70, v125);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v69, v70, v128);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v69, 0, 1, v128);
  }
  v34 = a2;
  v64 = v133;
  if (!v133)
    a1[v37] = 0;
LABEL_91:
  if (v64)
    v71 = v37;
  else
    v71 = v37 + 1;
  v72 = v71 + 7;
  v73 = (unint64_t)&a1[v72] & 0xFFFFFFFFFFFFFFF8;
  v74 = ((unint64_t)v34 + v72) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v73 = *(_QWORD *)v74;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v73 + 8) = *(_BYTE *)(v74 + 8);
  v75 = *(_QWORD *)(v36 + 104);
  v76 = *(_QWORD *)(v75 - 8);
  v77 = *(unsigned __int8 *)(v76 + 80);
  v78 = (void *)((v77 + 9 + v73) & ~v77);
  v79 = (void *)((v77 + 9 + v74) & ~v77);
  v80 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v76 + 48);
  v81 = v80(v78, 1, v75);
  v82 = v80(v79, 1, v75);
  if (v81)
  {
    if (!v82)
    {
      (*(void (**)(void *, void *, uint64_t))(v76 + 32))(v78, v79, v75);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v76 + 56))(v78, 0, 1, v75);
      goto LABEL_103;
    }
  }
  else
  {
    if (!v82)
    {
      (*(void (**)(void *, void *, uint64_t))(v76 + 40))(v78, v79, v75);
      goto LABEL_103;
    }
    (*(void (**)(void *, uint64_t))(v76 + 8))(v78, v75);
  }
  if (*(_DWORD *)(v76 + 84))
    v83 = *(_QWORD *)(v76 + 64);
  else
    v83 = *(_QWORD *)(v76 + 64) + 1;
  memcpy(v78, v79, v83);
LABEL_103:
  if (*(_DWORD *)(v76 + 84))
    v84 = *(_QWORD *)(v76 + 64);
  else
    v84 = *(_QWORD *)(v76 + 64) + 1;
  v85 = (_QWORD *)(((unint64_t)v78 + v84 + 7) & 0xFFFFFFFFFFFFFFF8);
  v86 = (_QWORD *)(((unint64_t)v79 + v84 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v85 = *v86;
  v85[1] = v86[1];
  v85[2] = v86[2];
  v85[3] = v86[3];
  v87 = ((unint64_t)v85 + 39) & 0xFFFFFFFFFFFFFFF8;
  v88 = ((unint64_t)v86 + 39) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v87 = *(_QWORD *)v88;
  *(_QWORD *)(v87 + 8) = *(_QWORD *)(v88 + 8);
  *(_QWORD *)(v87 + 16) = *(_QWORD *)(v88 + 16);
  *(_BYTE *)(v87 + 24) = *(_BYTE *)(v88 + 24);
  v89 = *(_QWORD *)(*(_QWORD *)(v36 + 112) - 8);
  v90 = *(unsigned __int8 *)(v89 + 80);
  v91 = (v90 + 25 + v87) & ~v90;
  v92 = (v90 + 25 + v88) & ~v90;
  (*(void (**)(uint64_t, uint64_t))(v89 + 40))(v91, v92);
  v93 = *(_QWORD *)(v89 + 64) + 7;
  v94 = (_OWORD *)((v93 + v91) & 0xFFFFFFFFFFFFFFF8);
  v95 = v93 + v92;
  v96 = (v95 & 0xFFFFFFFFFFFFFFF8) + 23;
  *v94 = *(_OWORD *)(v95 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  v97 = (_OWORD *)(((unint64_t)v94 + 23) & 0xFFFFFFFFFFFFFFF8);
  v96 &= 0xFFFFFFFFFFFFF8uLL;
  *v97 = *(_OWORD *)v96;
  swift_release();
  v98 = (_OWORD *)(((unint64_t)v97 + 23) & 0xFFFFFFFFFFFFFFF8);
  v99 = (_OWORD *)((v96 + 23) & 0xFFFFFFFFFFFFF8);
  *v98 = *v99;
  swift_release();
  v100 = (_OWORD *)(((unint64_t)v98 + 23) & 0xFFFFFFFFFFFFFFF8);
  v101 = ((unint64_t)v99 + 23) & 0xFFFFFFFFFFFFF8;
  v102 = *(_OWORD *)v101;
  v101 += 23;
  *v100 = v102;
  swift_release();
  v103 = (_OWORD *)(((unint64_t)v100 + 23) & 0xFFFFFFFFFFFFFFF8);
  v104 = (v101 & 0xFFFFFFFFFFFFF8) + 23;
  *v103 = *(_OWORD *)(v101 & 0xFFFFFFFFFFFFF8);
  swift_release();
  v105 = (_QWORD *)(((unint64_t)v103 + 23) & 0xFFFFFFFFFFFFFFF8);
  v106 = v104 & 0xFFFFFFFFFFFFFFF8;
  v107 = *(_QWORD *)(v104 & 0xFFFFFFFFFFFFFFF8);
  if (*v105 < 0xFFFFFFFFuLL)
  {
    if (v107 >= 0xFFFFFFFF)
    {
      v109 = *(_QWORD *)(v106 + 8);
      *v105 = v107;
      v105[1] = v109;
      goto LABEL_113;
    }
  }
  else
  {
    if (v107 >= 0xFFFFFFFF)
    {
      v108 = *(_QWORD *)(v106 + 8);
      *v105 = v107;
      v105[1] = v108;
      swift_release();
      goto LABEL_113;
    }
    swift_release();
  }
  *(_OWORD *)v105 = *(_OWORD *)v106;
LABEL_113:
  v110 = (_QWORD *)(((unint64_t)v105 + 23) & 0xFFFFFFFFFFFFFFF8);
  v111 = (unint64_t *)((v106 + 23) & 0xFFFFFFFFFFFFFFF8);
  v112 = *v111;
  if (*v110 < 0xFFFFFFFFuLL)
  {
    if (v112 >= 0xFFFFFFFF)
    {
      v114 = v111[1];
      *v110 = v112;
      v110[1] = v114;
      goto LABEL_120;
    }
  }
  else
  {
    if (v112 >= 0xFFFFFFFF)
    {
      v113 = v111[1];
      *v110 = v112;
      v110[1] = v113;
      swift_release();
      goto LABEL_120;
    }
    swift_release();
  }
  *(_OWORD *)v110 = *(_OWORD *)v111;
LABEL_120:
  v115 = (_QWORD *)(((unint64_t)v110 + 23) & 0xFFFFFFFFFFFFFFF8);
  v116 = (unint64_t *)(((unint64_t)v111 + 23) & 0xFFFFFFFFFFFFFFF8);
  v117 = *v116;
  if (*v115 < 0xFFFFFFFFuLL)
  {
    if (v117 >= 0xFFFFFFFF)
    {
      v119 = v116[1];
      *v115 = v117;
      v115[1] = v119;
      goto LABEL_127;
    }
LABEL_126:
    *(_OWORD *)v115 = *(_OWORD *)v116;
    goto LABEL_127;
  }
  if (v117 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_126;
  }
  v118 = v116[1];
  *v115 = v117;
  v115[1] = v118;
  swift_release();
LABEL_127:
  v120 = ((unint64_t)v115 + 23) & 0xFFFFFFFFFFFFFFF8;
  v121 = ((unint64_t)v116 + 23) & 0xFFFFFFFFFFFFFFF8;
  v122 = *(_QWORD *)v121;
  *(_BYTE *)(v120 + 8) = *(_BYTE *)(v121 + 8);
  *(_QWORD *)v120 = v122;
  *(_QWORD *)(v120 + 16) = *(_QWORD *)(v121 + 16);
  swift_release();
  return a1;
}

uint64_t sub_23BF67F84(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t *v41;
  unint64_t v42;
  unsigned int v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v6 = sub_23BFF82CC();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  v9 = a3[11];
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int *)(v10 + 84);
  if ((_DWORD)v11)
    v12 = v11 - 1;
  else
    v12 = 0;
  if (v12 <= v8)
    v13 = *(_DWORD *)(v7 + 84);
  else
    v13 = v12;
  v14 = a3[2];
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned int *)(v15 + 84);
  v17 = v16 - 1;
  if (!(_DWORD)v16)
    v17 = 0;
  if (v17 <= v13)
    v18 = v13;
  else
    v18 = v17;
  v19 = v18 == 0;
  if (v18)
    v20 = v18 - 1;
  else
    v20 = 0;
  v21 = a3[13];
  v22 = a3[14];
  v23 = *(_QWORD *)(v21 - 8);
  v24 = *(unsigned int *)(v23 + 84);
  if ((_DWORD)v24)
    v25 = v24 - 1;
  else
    v25 = 0;
  if (v20 <= v25)
    v26 = v25;
  else
    v26 = v20;
  v27 = *(_QWORD *)(v22 - 8);
  v28 = *(unsigned int *)(v27 + 84);
  if (v26 <= v28)
    v29 = *(_DWORD *)(v27 + 84);
  else
    v29 = v26;
  if (v29 <= 0x7FFFFFFF)
    v30 = 0x7FFFFFFF;
  else
    v30 = v29;
  v31 = *(_QWORD *)(v10 + 64);
  if (!(_DWORD)v11)
    ++v31;
  if (!(_DWORD)v16)
    ++v19;
  if ((_DWORD)v24)
    v32 = *(_QWORD *)(v23 + 64);
  else
    v32 = *(_QWORD *)(v23 + 64) + 1;
  if (!a2)
    return 0;
  v51 = a1;
  v33 = *(unsigned __int8 *)(v10 + 80);
  v47 = *(_QWORD *)(v7 + 64) + v33;
  v34 = *(unsigned __int8 *)(v15 + 80);
  v50 = v19 + *(_QWORD *)(v15 + 64) + ((v31 + v34 + (v47 & ~v33)) & ~v34);
  v35 = *(unsigned __int8 *)(v23 + 80);
  v49 = v35 + 9;
  v48 = v32 + 7;
  v36 = *(unsigned __int8 *)(v27 + 80);
  v37 = v36 + 25;
  if (v30 < a2)
  {
    if (((((((((((((((((((((*(_QWORD *)(v27 + 64)
                           + ((v37
                             + ((((v48 + ((v49 + ((v50 + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v35)) & 0xFFFFFFFFFFFFFFF8)
                               + 39) & 0xFFFFFFFFFFFFFFF8)) & ~v36)
                           + 7) & 0xFFFFFFFFFFFFFFF8)
                         + 23) & 0xFFFFFFFFFFFFFFF8)
                       + 23) & 0xFFFFFFFFFFFFFFF8)
                     + 23) & 0xFFFFFFFFFFFFFFF8)
                   + 23) & 0xFFFFFFFFFFFFFFF8)
                 + 23) & 0xFFFFFFFFFFFFFFF8)
               + 23) & 0xFFFFFFFFFFFFFFF8)
             + 23) & 0xFFFFFFFFFFFFFFF8)
           + 23) & 0xFFFFFFFFFFFFFFF8)
         + 24) & 0xFFFFFFF8) != 0)
      v38 = 2;
    else
      v38 = a2 - v30 + 1;
    if (v38 >= 0x10000)
      LODWORD(v39) = 4;
    else
      LODWORD(v39) = 2;
    if (v38 < 0x100)
      LODWORD(v39) = 1;
    if (v38 >= 2)
      v39 = v39;
    else
      v39 = 0;
    __asm { BR              X23 }
  }
  if (v20 == v30)
  {
    if (v18 < 2)
      return 0;
    if ((_DWORD)v8 == v18)
    {
      v43 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v51, v8, v6);
    }
    else
    {
      v45 = (v47 + v51) & ~v33;
      if (v12 == v18)
        v46 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v45, v11, v9);
      else
        v46 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))((v45 + v31 + v34) & ~v34, v16, v14);
      if (v46 >= 2)
        v43 = v46 - 1;
      else
        v43 = 0;
    }
LABEL_67:
    if (v43 >= 2)
      return v43 - 1;
    else
      return 0;
  }
  v41 = (unint64_t *)((v51 + v50 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((v29 & 0x80000000) != 0)
  {
    v44 = ((unint64_t)v41 + v49) & ~v35;
    if (v25 != v30)
      return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v27 + 48))((v37 + ((((v48 + v44) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8)) & ~v36, v28, v22);
    if (v24 < 2)
      return 0;
    v43 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v23 + 48))(v44, v24, v21);
    goto LABEL_67;
  }
  v42 = *v41;
  if (v42 >= 0xFFFFFFFF)
    LODWORD(v42) = -1;
  return (v42 + 1);
}

void sub_23BF68360(_DWORD *a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  int v30;

  v6 = 0;
  v7 = *(_QWORD *)(sub_23BFF82CC() - 8);
  v8 = *(_QWORD *)(a4[11] - 8);
  v9 = *(_DWORD *)(v8 + 84);
  if (v9)
    v10 = v9 - 1;
  else
    v10 = 0;
  if (v10 <= *(_DWORD *)(v7 + 84))
    v11 = *(_DWORD *)(v7 + 84);
  else
    v11 = v10;
  v12 = *(_QWORD *)(a4[2] - 8);
  v13 = *(_DWORD *)(v12 + 84);
  v14 = v13 - 1;
  if (!v13)
    v14 = 0;
  if (v14 <= v11)
    v15 = v11;
  else
    v15 = v14;
  if (v15)
    v16 = v15 - 1;
  else
    v16 = 0;
  v17 = *(_QWORD *)(a4[13] - 8);
  v18 = *(_DWORD *)(v17 + 84);
  if (v18)
    v19 = v18 - 1;
  else
    v19 = 0;
  if (v16 <= v19)
    v20 = v19;
  else
    v20 = v16;
  v21 = *(_QWORD *)(a4[14] - 8);
  if (v20 <= *(_DWORD *)(v21 + 84))
    v22 = *(_DWORD *)(v21 + 84);
  else
    v22 = v20;
  if (v22 <= 0x7FFFFFFF)
    v23 = 0x7FFFFFFF;
  else
    v23 = v22;
  if (v9)
    v24 = *(_QWORD *)(v8 + 64);
  else
    v24 = *(_QWORD *)(v8 + 64) + 1;
  if (v13)
    v25 = *(_QWORD *)(v12 + 64);
  else
    v25 = *(_QWORD *)(v12 + 64) + 1;
  v26 = ((v24
        + *(unsigned __int8 *)(v12 + 80)
        + ((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))
      + v25;
  if (v15)
    v27 = v26;
  else
    v27 = v26 + 1;
  v28 = *(_QWORD *)(v17 + 64);
  if (!v18)
    ++v28;
  if (v23 < a3)
  {
    if (((((((((((((((((((*(_DWORD *)(v21 + 64)
                         + ((*(unsigned __int8 *)(v21 + 80)
                           + 25
                           + (((((_DWORD)v28
                               + 7
                               + ((*(unsigned __int8 *)(v17 + 80) + 9 + (((_DWORD)v27 + 7) & 0xFFFFFFF8)) & ~*(unsigned __int8 *)(v17 + 80))) & 0xFFFFFFF8)
                             + 39) & 0xFFFFFFF8)) & ~*(unsigned __int8 *)(v21 + 80))
                         + 7) & 0xFFFFFFF8)
                       + 23) & 0xFFFFFFF8)
                     + 23) & 0xFFFFFFF8)
                   + 23) & 0xFFFFFFF8)
                 + 23) & 0xFFFFFFF8)
               + 23) & 0xFFFFFFF8)
             + 23) & 0xFFFFFFF8)
           + 23) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8) == 0xFFFFFFE8)
      v29 = a3 - v23 + 1;
    else
      v29 = 2;
    if (v29 >= 0x10000)
      v30 = 4;
    else
      v30 = 2;
    if (v29 < 0x100)
      v30 = 1;
    if (v29 >= 2)
      v6 = v30;
    else
      v6 = 0;
  }
  if (a2 > v23)
  {
    if (((((((((((((((((((*(_DWORD *)(v21 + 64)
                         + ((*(unsigned __int8 *)(v21 + 80)
                           + 25
                           + (((((_DWORD)v28
                               + 7
                               + ((*(unsigned __int8 *)(v17 + 80) + 9 + (((_DWORD)v27 + 7) & 0xFFFFFFF8)) & ~*(unsigned __int8 *)(v17 + 80))) & 0xFFFFFFF8)
                             + 39) & 0xFFFFFFF8)) & ~*(unsigned __int8 *)(v21 + 80))
                         + 7) & 0xFFFFFFF8)
                       + 23) & 0xFFFFFFF8)
                     + 23) & 0xFFFFFFF8)
                   + 23) & 0xFFFFFFF8)
                 + 23) & 0xFFFFFFF8)
               + 23) & 0xFFFFFFF8)
             + 23) & 0xFFFFFFF8)
           + 23) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8) != 0xFFFFFFE8)
    {
      bzero(a1, ((((((((((((((((((*(_QWORD *)(v21 + 64)+ ((*(unsigned __int8 *)(v21 + 80)+ 25+ ((((v28+ 7+ ((*(unsigned __int8 *)(v17 + 80) + 9 + ((v27 + 7) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80))) & 0xFFFFFFFFFFFFFFF8)+ 39) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80))+ 7) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 24);
      *a1 = ~v23 + a2;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X28 }
}

unint64_t sub_23BF685E4@<X0>(unint64_t result@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X5>, unsigned int a5@<W6>, int a6@<W7>, uint64_t a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, size_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, int a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  size_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  int v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  _QWORD *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  size_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;

  v48[v45] = 0;
  v53 = *(unsigned int *)(v51 - 84);
  if ((_DWORD)v53)
  {
    if (v52 == v49)
    {
      if ((int)v53 + 1 <= a5)
      {
        if ((_DWORD)v53 != -1)
        {
          if ((_DWORD)v36 == a5)
          {
            return (*(uint64_t (**)(_BYTE *, _QWORD, uint64_t))(result + 56))(v48, (v53 + 1), v36);
          }
          else
          {
            result = (unint64_t)&v48[v64] & v59;
            if (a6 == a5)
            {
              return (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(a3 + 56))(result, (v53 + 2), a2);
            }
            else if ((int)v53 + 1 <= v63)
            {
              return (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(a4 + 56))((result + v62 + a7) & v58, (v53 + 2), v34);
            }
            else if ((_DWORD)v61)
            {
              if (v61 <= 3)
                v57 = v61;
              else
                v57 = 4;
              bzero((void *)((result + v62 + a7) & v58), v61);
              __asm { BR              X10 }
            }
          }
        }
      }
      else if ((_DWORD)v41)
      {
        if (v41 <= 3)
          v54 = v41;
        else
          v54 = 4;
        bzero(v48, v41);
        __asm { BR              X10 }
      }
    }
    else
    {
      v55 = (_QWORD *)((unint64_t)&v48[v37 + 7] & 0xFFFFFFFFFFFFFFF8);
      if (v35 < 0)
      {
        result = ((unint64_t)v55 + v38) & v44;
        if (v50 == v49)
        {
          if (v39 >= 2)
            return (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v46 + 56))(result, (v53 + 1), v39);
        }
        else
        {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v47 + 56))((v42 + ((((v43 + result) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8)) & v60, v53, v40);
        }
      }
      else
      {
        if ((v53 & 0x80000000) != 0)
          v56 = v53 ^ 0x80000000;
        else
          v56 = (v53 - 1);
        *v55 = v56;
      }
    }
  }
  return result;
}

void sub_23BF68760()
{
  int v0;
  uint64_t v1;

  *(_WORD *)v1 = v0;
  *(_BYTE *)(v1 + 2) = BYTE2(v0);
}

void sub_23BF68770()
{
  __int16 v0;
  _WORD *v1;

  *v1 = v0;
}

void sub_23BF68818()
{
  char v0;
  _BYTE *v1;

  *v1 = v0;
}

void sub_23BF68854()
{
  __int16 v0;
  _WORD *v1;

  *v1 = v0;
}

void sub_23BF6885C()
{
  int v0;
  uint64_t v1;

  *(_WORD *)v1 = v0;
  *(_BYTE *)(v1 + 2) = BYTE2(v0);
}

void sub_23BF6886C()
{
  int v0;
  _DWORD *v1;

  *v1 = v0;
}

void sub_23BF68878()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3528);
  type metadata accessor for CanvasSectionHeaderView();
}

void sub_23BF68900()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_23BFF8A4C();
  sub_23BFF862C();
  sub_23BFF8968();
  sub_23BFF96A0();
  swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  sub_23BFF94C0();
  *(_QWORD *)(v4 - 224) = v1;
  *(_QWORD *)(v4 - 216) = v0;
  *(_QWORD *)(v4 - 208) = v0;
  *(_QWORD *)(v4 - 200) = v2;
  *(_QWORD *)(v4 - 192) = v3;
  *(_QWORD *)(v4 - 184) = v3;
  type metadata accessor for ActionCardView();
}

void sub_23BF689B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a67;
  uint64_t a69;
  uint64_t a70;
  uint64_t a71;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t (*v77)(uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;

  v88 = MEMORY[0x242615198](&unk_23C005608, a1);
  *(_QWORD *)(v75 - 224) = a1;
  *(_QWORD *)(v75 - 216) = v88;
  MEMORY[0x24261512C](255, v75 - 224, MEMORY[0x24BDF3948], 0);
  sub_23BFF8ADC();
  v77 = (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088];
  v78 = sub_23BFF862C();
  v87 = sub_23BFF862C();
  v89 = sub_23BEA1BB8((unint64_t *)&qword_256AE3908, v77, MEMORY[0x24BDF1078]);
  *(_QWORD *)(v75 - 104) = v73;
  *(_QWORD *)(v75 - 96) = v89;
  v79 = MEMORY[0x24BDED308];
  v80 = MEMORY[0x242615198](MEMORY[0x24BDED308], v78, v75 - 104);
  v81 = MEMORY[0x24BDEEC40];
  *(_QWORD *)(v75 - 120) = v80;
  *(_QWORD *)(v75 - 112) = v81;
  v86 = MEMORY[0x242615198](v79, v87, v75 - 120);
  *(_QWORD *)(v75 - 224) = v87;
  *(_QWORD *)(v75 - 216) = v86;
  v82 = MEMORY[0x24BDF3100];
  MEMORY[0x24261512C](255, v75 - 224, MEMORY[0x24BDF3100], 0);
  v85 = sub_23BFF862C();
  v83 = MEMORY[0x24BDEBEE0];
  *(_QWORD *)(v75 - 136) = v80;
  *(_QWORD *)(v75 - 128) = v83;
  v84 = MEMORY[0x242615198](v79, v85, v75 - 136);
  *(_QWORD *)(v75 - 224) = v85;
  *(_QWORD *)(v75 - 216) = v84;
  MEMORY[0x24261512C](255, v75 - 224, v82, 0);
  sub_23BFF8968();
  sub_23BFF8FD4();
  sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3910);
  sub_23BFF8968();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3918);
  sub_23BFF8968();
  sub_23BFF8968();
  *(_QWORD *)(v75 - 224) = v72;
  *(_QWORD *)(v75 - 216) = v71;
  *(_QWORD *)(v75 - 208) = v71;
  *(_QWORD *)(v75 - 200) = a67;
  *(_QWORD *)(v75 - 192) = a71;
  *(_QWORD *)(v75 - 184) = v73;
  *(_QWORD *)(v75 - 176) = v74;
  *(_QWORD *)(v75 - 168) = v74;
  *(_QWORD *)(v75 - 160) = a69;
  *(_QWORD *)(v75 - 152) = a70;
  type metadata accessor for FullWidthStageView();
}

void sub_23BF68BD4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = MEMORY[0x242615198](&unk_23C0077B8, a1);
  *(_QWORD *)(v5 - 224) = a1;
  *(_QWORD *)(v5 - 216) = v23;
  v7 = MEMORY[0x24BDF3948];
  MEMORY[0x24261512C](255, v5 - 224, MEMORY[0x24BDF3948], 0);
  v22 = type metadata accessor for InfoActionCardView(255, v1, v4, v8);
  v21 = MEMORY[0x242615198](&unk_23C007F20, v22);
  *(_QWORD *)(v5 - 224) = v22;
  *(_QWORD *)(v5 - 216) = v21;
  MEMORY[0x24261512C](255, v5 - 224, v7, 0);
  sub_23BFF8968();
  sub_23BFF8968();
  v20 = type metadata accessor for LargeBrickView(255, v2, v3, v9);
  v19 = MEMORY[0x242615198](&protocol conformance descriptor for LargeBrickView<A>, v20);
  *(_QWORD *)(v5 - 224) = v20;
  *(_QWORD *)(v5 - 216) = v19;
  MEMORY[0x24261512C](255, v5 - 224, v7, 0);
  v18 = type metadata accessor for DynamicBrickView(255, v2, v3, v10);
  v17 = MEMORY[0x242615198](&protocol conformance descriptor for DynamicBrickView<A>, v18);
  *(_QWORD *)(v5 - 224) = v18;
  *(_QWORD *)(v5 - 216) = v17;
  MEMORY[0x24261512C](255, v5 - 224, v7, 0);
  sub_23BFF8968();
  v16 = type metadata accessor for MonogramVerticalStackView(255, v2, v3, v11);
  v15 = MEMORY[0x242615198](&unk_23BFFA1F4, v16);
  *(_QWORD *)(v5 - 224) = v16;
  *(_QWORD *)(v5 - 216) = v15;
  MEMORY[0x24261512C](255, v5 - 224, v7, 0);
  sub_23BFF8968();
  sub_23BFF8968();
  sub_23BFF8968();
  v14 = type metadata accessor for StandardCardView(255, v2, v3, v12);
  v13 = MEMORY[0x242615198](&unk_23C007BD0, v14);
  *(_QWORD *)(v5 - 224) = v14;
  *(_QWORD *)(v5 - 216) = v13;
  MEMORY[0x24261512C](255, v5 - 224, v7, 0);
  *(_QWORD *)(v5 - 224) = v2;
  *(_QWORD *)(v5 - 216) = v1;
  *(_QWORD *)(v5 - 208) = v3;
  *(_QWORD *)(v5 - 200) = v4;
  type metadata accessor for StandardHorizontalStackView();
}

void sub_23BF68E0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,unint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  unint64_t a69;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t OpaqueTypeConformance2;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t AssociatedConformanceWitness;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  __int128 v147;

  v145 = MEMORY[0x242615198](&unk_23C0008E8, a1);
  *(_QWORD *)(v73 - 224) = a1;
  *(_QWORD *)(v73 - 216) = v145;
  MEMORY[0x24261512C](255, v73 - 224, v72, 0);
  v132 = sub_23BFF8968();
  v76 = type metadata accessor for StandardVerticalStackView(255, v70, v71, v75);
  v144 = MEMORY[0x242615198](&unk_23C0073B8, v76);
  *(_QWORD *)(v73 - 224) = v76;
  *(_QWORD *)(v73 - 216) = v144;
  MEMORY[0x24261512C](255, v73 - 224, v72, 0);
  v78 = type metadata accessor for TallCardView(255, v70, v71, v77);
  v143 = MEMORY[0x242615198](&unk_23BFFF0E4, v78);
  *(_QWORD *)(v73 - 224) = v78;
  *(_QWORD *)(v73 - 216) = v143;
  MEMORY[0x24261512C](255, v73 - 224, v72, 0);
  v142 = sub_23BFF8968();
  v130 = sub_23BFF8968();
  v80 = type metadata accessor for VerticalStackCard(255, v70, v71, v79);
  v139 = MEMORY[0x242615198](&unk_23C0000E0, v80);
  *(_QWORD *)(v73 - 224) = v80;
  *(_QWORD *)(v73 - 216) = v139;
  MEMORY[0x24261512C](255, v73 - 224, v72, 0);
  v131 = sub_23BFF8968();
  v82 = type metadata accessor for WideBrickView(255, v70, v71, v81);
  v135 = MEMORY[0x242615198](&protocol conformance descriptor for WideBrickView<A>, v82);
  *(_QWORD *)(v73 - 224) = v82;
  *(_QWORD *)(v73 - 216) = v135;
  MEMORY[0x24261512C](255, v73 - 224, v72, 0);
  v133 = sub_23BFF8968();
  v134 = sub_23BFF8968();
  v136 = sub_23BFF8968();
  v137 = sub_23BFF8FD4();
  v83 = sub_23BFF862C();
  v138 = sub_23BFF8968();
  v141 = sub_23BFF862C();
  v146 = sub_23BFF862C();
  *(_QWORD *)(v73 - 224) = a55;
  *(_QWORD *)(v73 - 216) = a54;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v73 - 224) = a52;
  *(_QWORD *)(v73 - 216) = a51;
  v85 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v73 - 224) = a44;
  *(_QWORD *)(v73 - 216) = a43;
  v86 = swift_getOpaqueTypeConformance2();
  v147 = *(_OWORD *)(v69 + 32);
  *(_QWORD *)(v73 - 240) = v85;
  *(_QWORD *)(v73 - 232) = v86;
  v87 = MEMORY[0x24BDEF3E0];
  *(_QWORD *)(v73 - 248) = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], a42, v73 - 240);
  v88 = MEMORY[0x242615198](MEMORY[0x24BDF3F50], a46, v73 - 248);
  v89 = MEMORY[0x24BDECC60];
  STACK[0x3D8] = v88;
  STACK[0x3E0] = v89;
  v90 = MEMORY[0x242615198](MEMORY[0x24BDED308], a45, &STACK[0x3D8]);
  v91 = sub_23BEA1F94(&qword_256AE3920, &qword_256AE3910, MEMORY[0x24BDF43B0]);
  STACK[0x3C8] = v90;
  STACK[0x3D0] = v91;
  v92 = MEMORY[0x242615198](v87, a49, &STACK[0x3C8]);
  v93 = sub_23BEA1F94(&qword_256AE3928, &qword_256AE3918, MEMORY[0x24BDF4700]);
  STACK[0x3B8] = v92;
  STACK[0x3C0] = v93;
  v94 = MEMORY[0x242615198](v87, a50, &STACK[0x3B8]);
  STACK[0x3A8] = OpaqueTypeConformance2;
  STACK[0x3B0] = v94;
  v95 = MEMORY[0x242615198](v87, a34, &STACK[0x3A8]);
  *(_QWORD *)(v73 - 224) = a48;
  *(_QWORD *)(v73 - 216) = a47;
  v96 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v73 - 224) = a41;
  *(_QWORD *)(v73 - 216) = a40;
  v97 = swift_getOpaqueTypeConformance2();
  STACK[0x398] = v96;
  STACK[0x3A0] = v97;
  v98 = MEMORY[0x242615198](v87, a39, &STACK[0x398]);
  STACK[0x388] = v95;
  STACK[0x390] = v98;
  v99 = MEMORY[0x242615198](v87, a21, &STACK[0x388]);
  *(_QWORD *)(v73 - 224) = a38;
  *(_QWORD *)(v73 - 216) = a37;
  v100 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v73 - 224) = a36;
  *(_QWORD *)(v73 - 216) = a35;
  v101 = swift_getOpaqueTypeConformance2();
  STACK[0x378] = v100;
  STACK[0x380] = v101;
  v102 = MEMORY[0x242615198](v87, a27, &STACK[0x378]);
  *(_QWORD *)(v73 - 224) = a33;
  *(_QWORD *)(v73 - 216) = a32;
  STACK[0x368] = swift_getOpaqueTypeConformance2();
  STACK[0x370] = v101;
  v103 = MEMORY[0x242615198](v87, a30, &STACK[0x368]);
  STACK[0x358] = v102;
  STACK[0x360] = v103;
  v104 = MEMORY[0x242615198](v87, a31, &STACK[0x358]);
  STACK[0x348] = v99;
  STACK[0x350] = v104;
  v105 = MEMORY[0x242615198](v87, a9, &STACK[0x348]);
  *(_QWORD *)(v73 - 224) = a29;
  *(_QWORD *)(v73 - 216) = a28;
  v106 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v73 - 224) = a1;
  *(_QWORD *)(v73 - 216) = v145;
  v107 = swift_getOpaqueTypeConformance2();
  STACK[0x338] = v106;
  STACK[0x340] = v107;
  v108 = MEMORY[0x242615198](v87, v132, &STACK[0x338]);
  *(_QWORD *)(v73 - 224) = v76;
  *(_QWORD *)(v73 - 216) = v144;
  v109 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v73 - 224) = v78;
  *(_QWORD *)(v73 - 216) = v143;
  v110 = swift_getOpaqueTypeConformance2();
  STACK[0x328] = v109;
  STACK[0x330] = v110;
  v111 = MEMORY[0x242615198](v87, v142, &STACK[0x328]);
  STACK[0x318] = v108;
  STACK[0x320] = v111;
  v112 = MEMORY[0x242615198](v87, v130, &STACK[0x318]);
  *(_QWORD *)(v73 - 224) = v80;
  *(_QWORD *)(v73 - 216) = v139;
  STACK[0x308] = swift_getOpaqueTypeConformance2();
  STACK[0x310] = a69;
  v113 = MEMORY[0x242615198](v87, v131, &STACK[0x308]);
  *(_QWORD *)(v73 - 224) = v82;
  *(_QWORD *)(v73 - 216) = v135;
  v114 = swift_getOpaqueTypeConformance2();
  STACK[0x2F8] = v113;
  STACK[0x300] = v114;
  v115 = MEMORY[0x242615198](v87, v133, &STACK[0x2F8]);
  STACK[0x2E8] = v112;
  STACK[0x2F0] = v115;
  v116 = MEMORY[0x242615198](v87, v134, &STACK[0x2E8]);
  STACK[0x2D8] = v105;
  STACK[0x2E0] = v116;
  STACK[0x2D0] = MEMORY[0x242615198](v87, v136, &STACK[0x2D8]);
  STACK[0x2C0] = MEMORY[0x242615198](MEMORY[0x24BDF3F50], v137, &STACK[0x2D0]);
  STACK[0x2C8] = a56;
  v117 = MEMORY[0x24BDED308];
  v118 = MEMORY[0x242615198](MEMORY[0x24BDED308], v83, &STACK[0x2C0]);
  STACK[0x2B0] = MEMORY[0x24BDF5138];
  STACK[0x2B8] = v118;
  v119 = MEMORY[0x242615198](v87, v138, &STACK[0x2B0]);
  v120 = MEMORY[0x24BDF0910];
  STACK[0x2A0] = v119;
  STACK[0x2A8] = v120;
  STACK[0x290] = MEMORY[0x242615198](v117, v141, &STACK[0x2A0]);
  STACK[0x298] = v120;
  v121 = MEMORY[0x242615198](v117, v146, &STACK[0x290]);
  *(_QWORD *)(v73 - 224) = v146;
  *(_QWORD *)(v73 - 216) = v121;
  MEMORY[0x24261512C](255, v73 - 224, MEMORY[0x24BDF30F0], 0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE6510);
  v122 = sub_23BFF862C();
  v123 = sub_23BFF862C();
  *(_QWORD *)(v73 - 224) = v146;
  *(_QWORD *)(v73 - 216) = v121;
  v124 = swift_getOpaqueTypeConformance2();
  v125 = sub_23BEA1F94(&qword_256AE6518, &qword_256AE6510, MEMORY[0x24BDEF370]);
  STACK[0x280] = v124;
  STACK[0x288] = v125;
  v126 = MEMORY[0x242615198](v117, v122, &STACK[0x280]);
  v127 = MEMORY[0x24BDEDB80];
  STACK[0x270] = v126;
  STACK[0x278] = v127;
  v128 = MEMORY[0x242615198](v117, v123, &STACK[0x270]);
  *(_QWORD *)(v73 - 224) = v123;
  *(_QWORD *)(v73 - 216) = v128;
  MEMORY[0x24261512C](255, v73 - 224, MEMORY[0x24BEC6710], 0);
  sub_23BFF8968();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(_OWORD *)(v73 - 224) = v147;
  *(_QWORD *)(v73 - 208) = AssociatedConformanceWitness;
  *(_QWORD *)(v73 - 200) = a62;
  type metadata accessor for CanvasContextMenu();
}

uint64_t sub_23BF69608(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[3];
  uint64_t v41;
  _QWORD v42[2];
  _QWORD v43[2];
  _QWORD v44[2];
  uint64_t v45;
  _QWORD v46[2];
  uint64_t OpaqueTypeConformance2;
  uint64_t v48;

  v7 = sub_23BFF862C();
  v8 = MEMORY[0x242615198](MEMORY[0x24BEE12D8]);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(_QWORD *)(v5 - 224) = v33;
  *(_QWORD *)(v5 - 216) = v34;
  *(_QWORD *)(v5 - 208) = v7;
  *(_QWORD *)(v5 - 200) = v8;
  *(_QWORD *)(v5 - 192) = AssociatedConformanceWitness;
  v10 = sub_23BFF910C();
  *(_QWORD *)(v5 - 224) = v2;
  *(_QWORD *)(v5 - 216) = v1;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v48 = v1;
  v46[0] = MEMORY[0x242615198](v3, v4, &OpaqueTypeConformance2);
  v46[1] = MEMORY[0x242615198](&unk_23BFFEE18, a1);
  v11 = MEMORY[0x24BDED308];
  v45 = MEMORY[0x242615198](MEMORY[0x24BDED308], v7, v46);
  MEMORY[0x242615198](MEMORY[0x24BDF4A08], v10, &v45);
  v12 = sub_23BFF8410();
  v13 = sub_23BFF862C();
  v44[0] = MEMORY[0x242615198](MEMORY[0x24BDEB168], v12);
  v44[1] = MEMORY[0x24BDEBEE0];
  v14 = MEMORY[0x242615198](v11, v13, v44);
  *(_QWORD *)(v5 - 224) = v13;
  *(_QWORD *)(v5 - 216) = v14;
  MEMORY[0x24261512C](255, v5 - 224, MEMORY[0x24BDF2D58], 0);
  *(_QWORD *)(v5 - 224) = v13;
  *(_QWORD *)(v5 - 216) = v14;
  swift_getOpaqueTypeConformance2();
  v15 = sub_23BFF8434();
  v16 = sub_23BFF8B0C();
  v17 = MEMORY[0x242615198](MEMORY[0x24BDEB238], v15);
  *(_QWORD *)(v5 - 224) = v15;
  *(_QWORD *)(v5 - 216) = v16;
  v18 = MEMORY[0x24BDF10F0];
  *(_QWORD *)(v5 - 208) = v17;
  *(_QWORD *)(v5 - 200) = v18;
  MEMORY[0x24261512C](255, v5 - 224, MEMORY[0x24BDF3000], 0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE5180);
  v19 = sub_23BFF913C();
  v20 = sub_23BF0A0F0();
  v43[0] = MEMORY[0x242615198](&unk_23C0051E8);
  v43[1] = sub_23BEA1BB8((unint64_t *)&qword_256AE5188, (uint64_t (*)(uint64_t))MEMORY[0x24BDF02F8], MEMORY[0x24BDF02F0]);
  v42[0] = v20;
  v42[1] = MEMORY[0x242615198](MEMORY[0x24BDED308], v36, v43);
  v41 = MEMORY[0x242615198](v3, v37, v42);
  v21 = MEMORY[0x242615198](MEMORY[0x24BDF5578], v35, &v41);
  *(_QWORD *)(v5 - 224) = v15;
  *(_QWORD *)(v5 - 216) = v16;
  *(_QWORD *)(v5 - 208) = v17;
  *(_QWORD *)(v5 - 200) = v18;
  v40[0] = v21;
  v40[1] = swift_getOpaqueTypeConformance2();
  v40[2] = sub_23BF0A154();
  MEMORY[0x242615198](MEMORY[0x24BDF4AF8], v19, v40);
  v22 = sub_23BFF90AC();
  v23 = MEMORY[0x242615198](MEMORY[0x24BDF4700], v22);
  *(_QWORD *)(v5 - 224) = v22;
  *(_QWORD *)(v5 - 216) = v23;
  v24 = MEMORY[0x24261512C](255, v5 - 224, MEMORY[0x24BDF2D38], 0);
  *(_QWORD *)(v5 - 224) = v22;
  *(_QWORD *)(v5 - 216) = v23;
  v25 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v5 - 224) = v24;
  *(_QWORD *)(v5 - 216) = v25;
  v26 = MEMORY[0x24261512C](255, v5 - 224, MEMORY[0x24BDF26E8], 0);
  *(_QWORD *)(v5 - 224) = v24;
  *(_QWORD *)(v5 - 216) = v25;
  v27 = swift_getOpaqueTypeConformance2();
  v28 = sub_23BF5C8F4();
  *(_QWORD *)(v5 - 224) = v26;
  *(_QWORD *)(v5 - 216) = &type metadata for DynamicTypeSize;
  *(_QWORD *)(v5 - 208) = v27;
  *(_QWORD *)(v5 - 200) = v28;
  v29 = MEMORY[0x24261512C](255, v5 - 224, MEMORY[0x24BDF3908], 0);
  *(_QWORD *)(v5 - 224) = v26;
  *(_QWORD *)(v5 - 216) = &type metadata for DynamicTypeSize;
  *(_QWORD *)(v5 - 208) = v27;
  *(_QWORD *)(v5 - 200) = v28;
  v30 = swift_getOpaqueTypeConformance2();
  v31 = *(_QWORD *)(*(_QWORD *)(v38 + 24) + 8);
  *(_QWORD *)(v5 - 224) = v29;
  *(_QWORD *)(v5 - 216) = v39;
  *(_QWORD *)(v5 - 208) = v30;
  *(_QWORD *)(v5 - 200) = v31;
  return swift_getOpaqueTypeConformance2();
}

void sub_23BF69A08()
{
  sub_23BF140F8((void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BF5DCD4);
}

void sub_23BF69A14()
{
  sub_23BF140F8((void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BF6454C);
}

void sub_23BF69A20()
{
  sub_23BF140F8((void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BF64F28);
}

void sub_23BF69A30()
{
  type metadata accessor for OrthogonalView();
}

void sub_23BF69AE0()
{
  sub_23BF64C54();
}

void sub_23BF69B70()
{
  sub_23BF140F8((void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BF5EF1C);
}

void sub_23BF69B7C()
{
  sub_23BF140F8((void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BF602A0);
}

void objectdestroyTm_7()
{
  type metadata accessor for OrthogonalView();
}

void sub_23BF69C24()
{
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CanvasSectionHeader();
}

uint64_t sub_23BF69C90(uint64_t a1)
{
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 48))(v2, 1, a1))
  {
    v6 = sub_23BFF82CC();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v2, v6);
    v7 = v2 + *(int *)(a1 + 52);
    v8 = *(_QWORD *)(v15 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(v8 + 48))(v7, 1))
      (*(void (**)(uint64_t))(v8 + 8))(v7);
    v9 = v2 + *(int *)(a1 + 56);
    v10 = *(_QWORD *)(v4 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v9, 1, v4))
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v4);
  }
  swift_bridgeObjectRelease();
  v11 = v2 + v1[55];
  v12 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v11, 1, v3))
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v3);
  (*(void (**)(uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v2 + v1[59]);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  if (*(_QWORD *)(v2 + v1[65]))
    swift_release();
  if (*(_QWORD *)(v2 + v1[66]))
    swift_release();
  if (*(_QWORD *)(v2 + v1[67]))
    swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_23BF69E88()
{
  type metadata accessor for OrthogonalView();
}

#error "23BF69FB0: call analysis failed (funcsize=30)"

void sub_23BF69FD8()
{
  type metadata accessor for OrthogonalView();
}

#error "23BF6A108: call analysis failed (funcsize=34)"

void sub_23BF6A12C(uint64_t a1)
{
  sub_23BF14A38(a1, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BF63154);
}

void sub_23BF6A138(uint64_t a1)
{
  sub_23BF14A38(a1, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BF632B8);
}

void sub_23BF6A148()
{
  type metadata accessor for OrthogonalView();
}

void sub_23BF6A1F4()
{
  type metadata accessor for OrthogonalView();
}

uint64_t sub_23BF6A298(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (**v3)();

  v3 = (uint64_t (**)())(v2 + *(int *)(result + 264) + v1);
  if (*v3)
    return (*v3)();
  return result;
}

void objectdestroy_15Tm()
{
  type metadata accessor for OrthogonalView();
}

void sub_23BF6A374()
{
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CanvasSectionHeader();
}

uint64_t sub_23BF6A3E0(uint64_t a1)
{
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 48))(v2, 1, a1))
  {
    v6 = sub_23BFF82CC();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v2, v6);
    v7 = v2 + *(int *)(a1 + 52);
    v8 = *(_QWORD *)(v15 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(v8 + 48))(v7, 1))
      (*(void (**)(uint64_t))(v8 + 8))(v7);
    v9 = v2 + *(int *)(a1 + 56);
    v10 = *(_QWORD *)(v4 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v9, 1, v4))
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v4);
  }
  swift_bridgeObjectRelease();
  v11 = v2 + v1[55];
  v12 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v11, 1, v3))
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v3);
  (*(void (**)(uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v2 + v1[59]);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  if (*(_QWORD *)(v2 + v1[65]))
    swift_release();
  if (*(_QWORD *)(v2 + v1[66]))
    swift_release();
  if (*(_QWORD *)(v2 + v1[67]))
    swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_23BF6A5E4()
{
  type metadata accessor for OrthogonalView();
}

void sub_23BF6A690()
{
  type metadata accessor for OrthogonalView();
}

uint64_t sub_23BF6A734(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (**v3)();

  v3 = (uint64_t (**)())(v2 + *(int *)(result + 268) + v1);
  if (*v3)
    return (*v3)();
  return result;
}

void sub_23BF6A774(uint64_t a1@<X8>)
{
  uint64_t *v1;

  sub_23BF63420(v1[26], v1[27], v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], a1, v1[8], v1[9], v1[10], v1[11], v1[12], v1[13], v1[14], v1[15], v1[16], v1[17],
    v1[18],
    v1[19],
    v1[20],
    v1[21],
    v1[22],
    v1[23],
    v1[24],
    v1[25]);
}

void sub_23BF6A7CC()
{
  type metadata accessor for OrthogonalView();
}

#error "23BF6A908: call analysis failed (funcsize=36)"

void sub_23BF6A92C()
{
  type metadata accessor for OrthogonalView();
}

void sub_23BF6A9C8()
{
  sub_23BFF8500();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CanvasSectionHeader();
}

uint64_t sub_23BF6AA78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 48))(v4, 1, a1))
  {
    v19 = v8;
    v10 = sub_23BFF82CC();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v4, v10);
    v11 = v4 + *(int *)(a1 + 52);
    v12 = *(_QWORD *)(v27 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(v11, 1))
      (*(void (**)(uint64_t))(v12 + 8))(v11);
    v13 = v4 + *(int *)(a1 + 56);
    v14 = *(_QWORD *)(v6 - 8);
    v8 = v19;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v13, 1, v6))
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v6);
  }
  swift_bridgeObjectRelease();
  v15 = v4 + v3[55];
  v16 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v15, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v5);
  (*(void (**)(uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v4 + v3[59]);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  if (*(_QWORD *)(v4 + v3[65]))
    swift_release();
  if (*(_QWORD *)(v4 + v3[66]))
    swift_release();
  if (*(_QWORD *)(v4 + v3[67]))
    swift_release();
  v17 = (v24 + v23 + v22) & ~v22;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v1 + v17, v7);
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v1 + ((v17 + v21 + v2) & ~v2), v8);
  return swift_deallocObject();
}

void sub_23BF6ACCC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = v0[4];
  v24 = v0[3];
  v3 = v0[6];
  v23 = v0[5];
  v4 = v0[8];
  v22 = v0[7];
  v5 = v0[10];
  v21 = v0[9];
  v6 = v0[12];
  v20 = v0[11];
  v7 = v0[14];
  v19 = v0[13];
  v9 = v0[16];
  v8 = v0[17];
  v18 = v0[15];
  v10 = v0[19];
  v17 = v0[18];
  v11 = v0[21];
  v16 = v0[20];
  v12 = v0[22];
  v13 = v0[23];
  v15 = v0[24];
  v14 = v0[25];
  v1[2] = v0[2];
  v1[3] = v24;
  v1[4] = v2;
  v1[5] = v23;
  v1[6] = v3;
  v1[7] = v22;
  v1[8] = v4;
  v1[9] = v21;
  v1[10] = v5;
  v1[11] = v20;
  v1[12] = v6;
  v1[13] = v19;
  v1[14] = v7;
  v1[15] = v18;
  v1[16] = v9;
  v1[17] = v8;
  v1[18] = v17;
  v1[19] = v10;
  v1[20] = v16;
  v1[21] = v11;
  v1[22] = v12;
  v1[23] = v13;
  v1[24] = v15;
  v1[25] = v14;
  type metadata accessor for OrthogonalView();
}

uint64_t sub_23BF6AD88(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v9 = *(_QWORD *)(a1 - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 208) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v4 - 8);
  v12 = (v10 + *(_QWORD *)(v9 + 64) + *(unsigned __int8 *)(v11 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v13 = *(_QWORD *)(v11 + 64);
  v14 = *(unsigned __int8 *)(*(_QWORD *)(sub_23BFF8500() - 8) + 80);
  v15 = v12 + v13 + v14;
  v16 = v2 + v10;
  v17 = v2 + v12;
  v18 = v2 + (v15 & ~v14);
  v19 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 208) = v19;
  *v19 = v3;
  v19[1] = sub_23BF6AEAC;
  v8[19] = v7;
  v8[20] = v1;
  v8[17] = v5;
  v8[18] = v6;
  v8[16] = v21;
  v8[15] = v22;
  v8[14] = v23;
  v8[13] = v24;
  v8[11] = v4;
  v8[12] = v25;
  v8[10] = v26;
  v8[9] = v27;
  v8[8] = v28;
  v8[7] = v29;
  v8[6] = v30;
  v8[5] = v31;
  v8[4] = v32;
  v8[3] = v33;
  v8[2] = v34;
  return sub_23BF640AC(v16, v17, v18, v8[21], *(v8 - 11), *(v8 - 12), *(v8 - 13), *(v8 - 14));
}

uint64_t sub_23BF6AEAC()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_23BF6AEF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23BFF8560();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BF6AF38(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_23BFF8560();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void objectdestroy_12Tm()
{
  type metadata accessor for OrthogonalView();
}

void sub_23BF6B014()
{
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CanvasSectionHeader();
}

uint64_t sub_23BF6B09C(uint64_t a1)
{
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 48))(v3, 1, a1))
  {
    v18 = v7;
    v10 = sub_23BFF82CC();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v3, v10);
    v11 = v3 + *(int *)(a1 + 52);
    v12 = *(_QWORD *)(v22 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(v11, 1))
      (*(void (**)(uint64_t))(v12 + 8))(v11);
    v13 = v3 + *(int *)(a1 + 56);
    v14 = *(_QWORD *)(v5 - 8);
    v7 = v18;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v13, 1, v5))
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v5);
  }
  swift_bridgeObjectRelease();
  v15 = v3 + v2[55];
  v16 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v15, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v4);
  (*(void (**)(uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v3 + v2[59]);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  if (*(_QWORD *)(v3 + v2[65]))
    swift_release();
  if (*(_QWORD *)(v3 + v2[66]))
    swift_release();
  if (*(_QWORD *)(v3 + v2[67]))
    swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v1 + ((v21 + v20 + v8) & ~v8), v6);
  return swift_deallocObject();
}

void sub_23BF6B2C0()
{
  type metadata accessor for OrthogonalView();
}

void sub_23BF6B370()
{
  sub_23BF64480();
}

unint64_t sub_23BF6B424()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256AE65D8;
  if (!qword_256AE65D8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE65C0);
    v2 = sub_23BEA1BB8(&qword_256AE65E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC4E0], MEMORY[0x24BDEC4C8]);
    v3[0] = MEMORY[0x24BDF3E20];
    v3[1] = v2;
    result = MEMORY[0x242615198](MEMORY[0x24BDED308], v1, v3);
    atomic_store(result, (unint64_t *)&qword_256AE65D8);
  }
  return result;
}

uint64_t sub_23BF6B4A8(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE65C0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23BF6B4E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;

  *(_QWORD *)(v6 + 56) = v5;
  v12 = sub_23BFF97D8();
  *(_QWORD *)(v6 + 64) = v12;
  *(_QWORD *)(v6 + 72) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v6 + 80) = swift_task_alloc();
  *(_QWORD *)(v6 + 88) = swift_task_alloc();
  *(_QWORD *)(v6 + 40) = a1;
  *(_QWORD *)(v6 + 48) = a2;
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  *(_BYTE *)(v6 + 32) = a5 & 1;
  return swift_task_switch();
}

uint64_t sub_23BF6B58C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  _QWORD *v5;

  v1 = v0[10];
  v2 = v0[8];
  v3 = v0[9];
  sub_23BFF97F0();
  sub_23BEA1BB8(&qword_256AE65F0, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6E10], MEMORY[0x24BEE6E20]);
  sub_23BFF9988();
  sub_23BEA1BB8(&qword_256AE65F8, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6DC8], MEMORY[0x24BEE6E00]);
  sub_23BFF97FC();
  v4 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v4;
  v4(v1, v2);
  v5 = (_QWORD *)swift_task_alloc();
  v0[13] = v5;
  *v5 = v0;
  v5[1] = sub_23BF6B6A4;
  return sub_23BFF9994();
}

uint64_t sub_23BF6B6A4()
{
  uint64_t v0;
  uint64_t *v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  v3 = *(_QWORD *)(*v1 + 88);
  v4 = *(_QWORD *)(*v1 + 64);
  v5 = *v1;
  *(_QWORD *)(v5 + 112) = v0;
  swift_task_dealloc();
  v2(v3, v4);
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_23BF6B750()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23BF6B790(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1835365481 && a2 == 0xE400000000000000;
  if (v2 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C6F686563616C70 && a2 == 0xEB00000000726564)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23BFF9964();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23BF6B888(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6C6F686563616C70;
  else
    return 1835365481;
}

BOOL sub_23BF6B8C0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_23BEBF13C(*a1, *a2);
}

uint64_t sub_23BF6B910()
{
  return sub_23BEBF3D0();
}

uint64_t sub_23BF6B960()
{
  return sub_23BEBF14C();
}

uint64_t sub_23BF6B9A8()
{
  sub_23BFF99D0();
  sub_23BEBF14C();
  return sub_23BFF9A00();
}

uint64_t sub_23BF6BA0C()
{
  char *v0;

  return sub_23BF6B888(*v0);
}

uint64_t sub_23BF6BA5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BF6B790(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BF6BAB0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23BEC1558();
  *a1 = result;
  return result;
}

uint64_t sub_23BF6BB00(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23C002980, a1);
  return sub_23BFF9A30();
}

uint64_t sub_23BF6BB34(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23C002980, a1);
  return sub_23BFF9A3C();
}

uint64_t sub_23BF6BB6C@<X0>(_QWORD *a1@<X1>, _BYTE *a2@<X8>)
{
  return sub_23BF6BC44(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BEBF6D0, a2);
}

uint64_t sub_23BF6BB78(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23C0029D0, a1);
  return sub_23BFF9A30();
}

uint64_t sub_23BF6BBAC(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23C0029D0, a1);
  return sub_23BFF9A3C();
}

uint64_t sub_23BF6BBE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BEBF448(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_23BF6BC38@<X0>(_QWORD *a1@<X1>, _BYTE *a2@<X8>)
{
  return sub_23BF6BC44(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BF7BC74, a2);
}

uint64_t sub_23BF6BC44@<X0>(_QWORD *a1@<X1>, uint64_t (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD)@<X3>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = a2(a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15]);
  *a3 = result & 1;
  return result;
}

uint64_t sub_23BF6BC9C(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23C002A20, a1);
  return sub_23BFF9A30();
}

uint64_t sub_23BF6BCD0(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23C002A20, a1);
  return sub_23BFF9A3C();
}

void LazyCanvasItemDescriptor.encode(to:)()
{
  type metadata accessor for LazyCanvasItemDescriptor.PlaceholderCodingKeys();
}

void sub_23BF6BDBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v15 = MEMORY[0x242615198](&unk_23C002A20, a1);
  *(_QWORD *)(v13 - 384) = a1;
  *(_QWORD *)(v13 - 400) = v15;
  v16 = sub_23BFF994C();
  *(_QWORD *)(v13 - 344) = v16;
  *(_QWORD *)(v13 - 352) = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  *(_QWORD *)(v13 - 368) = (char *)&a9 - v17;
  *(_QWORD *)(v13 - 328) = v9;
  *(_QWORD *)(v13 - 200) = v9;
  *(_QWORD *)(v13 - 192) = v11;
  *(_QWORD *)(v13 - 320) = v11;
  *(_QWORD *)(v13 - 336) = v12;
  *(_QWORD *)(v13 - 184) = v12;
  *(_QWORD *)(v13 - 176) = v10;
  *(_QWORD *)(v13 - 312) = v10;
  type metadata accessor for CanvasItemPlaceholder();
}

void sub_23BF6BE68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)(v16 - 360) = a1;
  *(_QWORD *)(v16 - 376) = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v16 - 392) = (char *)&a9 - v17;
  *(_QWORD *)(v16 - 200) = v15;
  *(_QWORD *)(v16 - 192) = *(_QWORD *)(v16 - 216);
  *(_QWORD *)(v16 - 184) = v10;
  *(_QWORD *)(v16 - 176) = v9;
  *(_QWORD *)(v16 - 168) = v12;
  v18 = *(_QWORD *)(v16 - 232);
  v19 = *(_QWORD *)(v16 - 224);
  *(_QWORD *)(v16 - 160) = *(_QWORD *)(v16 - 288);
  *(_QWORD *)(v16 - 152) = v19;
  v20 = *(_QWORD *)(v16 - 240);
  *(_QWORD *)(v16 - 144) = v18;
  *(_QWORD *)(v16 - 136) = v20;
  *(_QWORD *)(v16 - 128) = v13;
  *(_QWORD *)(v16 - 120) = v14;
  *(_QWORD *)(v16 - 112) = v11;
  v21 = *(_QWORD *)(v16 - 296);
  *(_QWORD *)(v16 - 104) = *(_QWORD *)(v16 - 248);
  *(_QWORD *)(v16 - 96) = v21;
  type metadata accessor for LazyCanvasItemDescriptor.ItemCodingKeys();
}

void sub_23BF6BEF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v18 = MEMORY[0x242615198](&unk_23C0029D0, a1);
  *(_QWORD *)(v16 - 440) = a1;
  *(_QWORD *)(v16 - 448) = v18;
  v19 = sub_23BFF994C();
  *(_QWORD *)(v16 - 408) = v19;
  *(_QWORD *)(v16 - 416) = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  *(_QWORD *)(v16 - 424) = (char *)&a9 - v20;
  *(_QWORD *)(v16 - 200) = *(_QWORD *)(v16 - 72);
  *(_QWORD *)(v16 - 192) = v15;
  v21 = *(_QWORD *)(v16 - 328);
  *(_QWORD *)(v16 - 184) = *(_QWORD *)(v16 - 208);
  *(_QWORD *)(v16 - 176) = v21;
  *(_QWORD *)(v16 - 168) = *(_QWORD *)(v16 - 304);
  *(_QWORD *)(v16 - 160) = v14;
  *(_QWORD *)(v16 - 152) = v12;
  *(_QWORD *)(v16 - 144) = v9;
  v22 = *(_QWORD *)(v16 - 320);
  *(_QWORD *)(v16 - 136) = v10;
  *(_QWORD *)(v16 - 128) = v22;
  v23 = *(_QWORD *)(v16 - 312);
  *(_QWORD *)(v16 - 120) = *(_QWORD *)(v16 - 336);
  *(_QWORD *)(v16 - 112) = v23;
  *(_QWORD *)(v16 - 104) = v11;
  *(_QWORD *)(v16 - 96) = v13;
  type metadata accessor for CanvasItemDescriptor();
}

void sub_23BF6BFC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)(v17 - 432) = a1;
  *(_QWORD *)(v17 - 456) = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v17 - 464) = (char *)&a9 - v18;
  *(_QWORD *)(v17 - 280) = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v20 = *(_QWORD *)(v17 - 216);
  *(_QWORD *)(v17 - 200) = *(_QWORD *)(v17 - 72);
  *(_QWORD *)(v17 - 192) = v20;
  *(_QWORD *)(v17 - 184) = *(_QWORD *)(v17 - 208);
  *(_QWORD *)(v17 - 176) = v16;
  *(_QWORD *)(v17 - 168) = v15;
  *(_QWORD *)(v17 - 160) = v14;
  v21 = *(_QWORD *)(v17 - 232);
  *(_QWORD *)(v17 - 152) = *(_QWORD *)(v17 - 224);
  *(_QWORD *)(v17 - 144) = v21;
  *(_QWORD *)(v17 - 136) = *(_QWORD *)(v17 - 240);
  *(_QWORD *)(v17 - 128) = v9;
  *(_QWORD *)(v17 - 120) = v11;
  *(_QWORD *)(v17 - 112) = v10;
  *(_QWORD *)(v17 - 104) = *(_QWORD *)(v17 - 248);
  *(_QWORD *)(v17 - 96) = v12;
  type metadata accessor for LazyCanvasItemDescriptor.CodingKeys();
}

uint64_t sub_23BF6C078(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  MEMORY[0x242615198](&unk_23C002980, a1);
  v4 = sub_23BFF994C();
  *(_QWORD *)(v3 - 72) = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v18 - v5;
  __swift_project_boxed_opaque_existential_1(*(_QWORD **)(v3 - 272), *(_QWORD *)(*(_QWORD *)(v3 - 272) + 24));
  sub_23BFF9A18();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v3 - 280) + 16))(v1, *(_QWORD *)(v3 - 264), v2);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = *(_QWORD *)(v3 - 376);
    v8 = *(_QWORD *)(v3 - 392);
    v9 = *(_QWORD *)(v3 - 360);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v8, v1, v9);
    *(_BYTE *)(v3 - 200) = 1;
    v10 = *(_QWORD *)(v3 - 368);
    sub_23BFF98EC();
    MEMORY[0x242615198](&protocol conformance descriptor for CanvasItemPlaceholder<A>, v9);
    v11 = *(_QWORD *)(v3 - 344);
    sub_23BFF9940();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 352) + 8))(v10, v11);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  }
  else
  {
    v12 = *(_QWORD *)(v3 - 456);
    v13 = *(_QWORD *)(v3 - 464);
    v14 = *(_QWORD *)(v3 - 432);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v13, v1, v14);
    *(_BYTE *)(v3 - 200) = 0;
    v15 = *(_QWORD *)(v3 - 424);
    sub_23BFF98EC();
    MEMORY[0x242615198](&protocol conformance descriptor for CanvasItemDescriptor<A, B, C, D, E, F>, v14);
    v16 = *(_QWORD *)(v3 - 408);
    sub_23BFF9940();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 416) + 8))(v15, v16);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v14);
  }
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v3 - 72) + 8))(v6, v4);
}

void type metadata accessor for LazyCanvasItemDescriptor.PlaceholderCodingKeys()
{
  JUMPOUT(0x2426150F0);
}

void type metadata accessor for LazyCanvasItemDescriptor.ItemCodingKeys()
{
  JUMPOUT(0x2426150F0);
}

void type metadata accessor for LazyCanvasItemDescriptor.CodingKeys()
{
  JUMPOUT(0x2426150F0);
}

void LazyCanvasItemDescriptor.init(from:)()
{
  type metadata accessor for LazyCanvasItemDescriptor.PlaceholderCodingKeys();
}

void sub_23BF6C3F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v19 = MEMORY[0x242615198](&unk_23C002A20, a1);
  *(_QWORD *)(v17 - 408) = a1;
  *(_QWORD *)(v17 - 424) = v19;
  v20 = sub_23BFF98E0();
  *(_QWORD *)(v17 - 464) = v20;
  *(_QWORD *)(v17 - 448) = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  *(_QWORD *)(v17 - 400) = (char *)&a9 - v21;
  *(_QWORD *)(v17 - 352) = v9;
  *(_QWORD *)(v17 - 208) = v9;
  *(_QWORD *)(v17 - 200) = v16;
  *(_QWORD *)(v17 - 336) = v14;
  *(_QWORD *)(v17 - 192) = v14;
  *(_QWORD *)(v17 - 184) = v15;
  *(_QWORD *)(v17 - 288) = v15;
  *(_QWORD *)(v17 - 176) = v10;
  *(_QWORD *)(v17 - 168) = *(_QWORD *)(v17 - 256);
  *(_QWORD *)(v17 - 160) = v13;
  *(_QWORD *)(v17 - 272) = v12;
  v22 = *(_QWORD *)(v17 - 264);
  *(_QWORD *)(v17 - 152) = v12;
  *(_QWORD *)(v17 - 144) = v22;
  *(_QWORD *)(v17 - 136) = *(_QWORD *)(v17 - 248);
  *(_QWORD *)(v17 - 128) = v11;
  v23 = *(_QWORD *)(v17 - 328);
  *(_QWORD *)(v17 - 120) = *(_QWORD *)(v17 - 72);
  *(_QWORD *)(v17 - 112) = v23;
  *(_QWORD *)(v17 - 104) = *(_QWORD *)(v17 - 312);
  type metadata accessor for LazyCanvasItemDescriptor.ItemCodingKeys();
}

void sub_23BF6C4E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v19 = MEMORY[0x242615198](&unk_23C0029D0, a1);
  *(_QWORD *)(v17 - 432) = a1;
  *(_QWORD *)(v17 - 440) = v19;
  v20 = sub_23BFF98E0();
  *(_QWORD *)(v17 - 472) = v20;
  *(_QWORD *)(v17 - 456) = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  *(_QWORD *)(v17 - 416) = (char *)&a9 - v21;
  v22 = *(_QWORD *)(v17 - 344);
  *(_QWORD *)(v17 - 208) = v9;
  *(_QWORD *)(v17 - 200) = v22;
  *(_QWORD *)(v17 - 192) = v16;
  *(_QWORD *)(v17 - 184) = v14;
  *(_QWORD *)(v17 - 176) = *(_QWORD *)(v17 - 320);
  *(_QWORD *)(v17 - 168) = v10;
  *(_QWORD *)(v17 - 160) = *(_QWORD *)(v17 - 304);
  *(_QWORD *)(v17 - 152) = v12;
  v23 = *(_QWORD *)(v17 - 248);
  *(_QWORD *)(v17 - 144) = *(_QWORD *)(v17 - 264);
  *(_QWORD *)(v17 - 136) = v23;
  *(_QWORD *)(v17 - 128) = *(_QWORD *)(v17 - 296);
  *(_QWORD *)(v17 - 120) = v11;
  *(_QWORD *)(v17 - 112) = v15;
  *(_QWORD *)(v17 - 104) = v13;
  type metadata accessor for LazyCanvasItemDescriptor.CodingKeys();
}

void sub_23BF6C5AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v9 - 368) = MEMORY[0x242615198](&unk_23C002980, a1);
  v10 = sub_23BFF98E0();
  *(_QWORD *)(v9 - 376) = v10;
  *(_QWORD *)(v9 - 384) = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  *(_QWORD *)(v9 - 208) = *(_QWORD *)(v9 - 352);
  *(_QWORD *)(v9 - 200) = v1;
  v11 = *(_QWORD *)(v9 - 288);
  *(_QWORD *)(v9 - 192) = *(_QWORD *)(v9 - 336);
  *(_QWORD *)(v9 - 184) = v11;
  v12 = *(_QWORD *)(v9 - 256);
  *(_QWORD *)(v9 - 176) = v2;
  *(_QWORD *)(v9 - 168) = v12;
  v13 = *(_QWORD *)(v9 - 272);
  *(_QWORD *)(v9 - 160) = v3;
  *(_QWORD *)(v9 - 152) = v13;
  *(_QWORD *)(v9 - 144) = v6;
  *(_QWORD *)(v9 - 136) = v8;
  v14 = *(_QWORD *)(v9 - 72);
  *(_QWORD *)(v9 - 128) = v5;
  *(_QWORD *)(v9 - 120) = v14;
  *(_QWORD *)(v9 - 112) = v7;
  *(_QWORD *)(v9 - 104) = v4;
  type metadata accessor for LazyCanvasItemDescriptor();
}

uint64_t sub_23BF6C66C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[96];

  *(_QWORD *)(v2 - 392) = a1;
  *(_QWORD *)(v2 - 480) = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v4 = &v39[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v5);
  v7 = &v39[-v6];
  MEMORY[0x24BDAC7A8](v8);
  v10 = &v39[-v9];
  v11 = *(_QWORD **)(v2 - 280);
  __swift_project_boxed_opaque_existential_1(v11, v11[3]);
  v12 = *(_QWORD *)(v2 - 360);
  sub_23BFF9A0C();
  if (!v12)
  {
    *(_QWORD *)(v2 - 504) = v4;
    *(_QWORD *)(v2 - 496) = v7;
    *(_QWORD *)(v2 - 512) = v10;
    v13 = *(_QWORD *)(v2 - 272);
    *(_QWORD *)(v2 - 368) = 0;
    v14 = *(_QWORD *)(v2 - 376);
    *(_QWORD *)(v2 - 360) = v1;
    *(_QWORD *)(v2 - 208) = sub_23BFF98D4();
    v15 = sub_23BFF94C0();
    MEMORY[0x242615198](MEMORY[0x24BEE12C8], v15);
    *(_QWORD *)(v2 - 240) = sub_23BFF96DC();
    *(_QWORD *)(v2 - 232) = v16;
    *(_QWORD *)(v2 - 224) = v17;
    *(_QWORD *)(v2 - 216) = v18;
    v19 = sub_23BFF96D0();
    MEMORY[0x242615198](MEMORY[0x24BEE2190], v19);
    sub_23BFF9634();
    v20 = *(unsigned __int8 *)(v2 - 208);
    if (v20 == 2
      || (v22 = *(_OWORD *)(v2 - 240),
          v21 = *(_OWORD *)(v2 - 224),
          *(_OWORD *)(v2 - 528) = v22,
          *(_OWORD *)(v2 - 208) = v22,
          *(_OWORD *)(v2 - 192) = v21,
          (sub_23BFF964C() & 1) == 0))
    {
      v31 = sub_23BFF9784();
      swift_allocError();
      v33 = v32;
      __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3978);
      *v33 = *(_QWORD *)(v2 - 392);
      v34 = *(_QWORD *)(v2 - 360);
      sub_23BFF9874();
      sub_23BFF9778();
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v31 - 8) + 104))(v33, *MEMORY[0x24BEE26D0], v31);
      swift_willThrow();
      swift_unknownObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 384) + 8))(v34, v14);
    }
    else
    {
      if ((v20 & 1) != 0)
      {
        *(_BYTE *)(v2 - 208) = 1;
        v23 = *(_QWORD *)(v2 - 360);
        v35 = *(_QWORD *)(v2 - 368);
        sub_23BFF9868();
        if (!v35)
        {
          v37 = *(_QWORD *)(v2 - 248);
          *(_QWORD *)(v2 - 208) = *(_QWORD *)(v2 - 288);
          *(_QWORD *)(v2 - 200) = v37;
          v38 = *(_QWORD *)(v2 - 72);
          *(_QWORD *)(v2 - 192) = *(_QWORD *)(v2 - 296);
          *(_QWORD *)(v2 - 184) = v38;
          type metadata accessor for CanvasItemPlaceholder();
        }
      }
      else
      {
        *(_BYTE *)(v2 - 208) = 0;
        v23 = *(_QWORD *)(v2 - 360);
        v24 = *(_QWORD *)(v2 - 368);
        sub_23BFF9868();
        if (!v24)
        {
          v25 = *(_QWORD *)(v2 - 344);
          *(_QWORD *)(v2 - 208) = *(_QWORD *)(v2 - 352);
          *(_QWORD *)(v2 - 200) = v25;
          v26 = *(_QWORD *)(v2 - 288);
          *(_QWORD *)(v2 - 192) = *(_QWORD *)(v2 - 336);
          *(_QWORD *)(v2 - 184) = v26;
          v27 = *(_QWORD *)(v2 - 256);
          *(_QWORD *)(v2 - 176) = *(_QWORD *)(v2 - 320);
          *(_QWORD *)(v2 - 168) = v27;
          *(_QWORD *)(v2 - 160) = *(_QWORD *)(v2 - 304);
          *(_QWORD *)(v2 - 152) = v13;
          v28 = *(_QWORD *)(v2 - 248);
          *(_QWORD *)(v2 - 144) = *(_QWORD *)(v2 - 264);
          *(_QWORD *)(v2 - 136) = v28;
          v29 = *(_QWORD *)(v2 - 72);
          *(_QWORD *)(v2 - 128) = *(_QWORD *)(v2 - 296);
          *(_QWORD *)(v2 - 120) = v29;
          v30 = *(_QWORD *)(v2 - 312);
          *(_QWORD *)(v2 - 112) = *(_QWORD *)(v2 - 328);
          *(_QWORD *)(v2 - 104) = v30;
          type metadata accessor for CanvasItemDescriptor();
        }
      }
      swift_unknownObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 384) + 8))(v23, v14);
    }
    v11 = *(_QWORD **)(v2 - 280);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
}

void sub_23BF6CAFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  MEMORY[0x242615198](&protocol conformance descriptor for CanvasItemPlaceholder<A>, a1);
  v6 = *(_QWORD *)(v5 - 464);
  sub_23BFF98C8();
  v7 = *(_QWORD *)(v5 - 384);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 448) + 8))(v3, v6);
    swift_unknownObjectRelease();
    JUMPOUT(0x23BF6CA90);
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 448) + 8))(v3, v6);
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v2, v1);
  JUMPOUT(0x23BF6CC04);
}

void type metadata accessor for LazyCanvasItemDescriptor()
{
  JUMPOUT(0x2426150F0);
}

void sub_23BF6CC58()
{
  LazyCanvasItemDescriptor.init(from:)();
}

void sub_23BF6CCA4()
{
  LazyCanvasItemDescriptor.encode(to:)();
}

void LazyCanvasItemDescriptor.hash(into:)()
{
  type metadata accessor for CanvasItemPlaceholder();
}

void sub_23BF6CD04(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  MEMORY[0x24BDAC7A8](a1);
  v7 = *(_QWORD *)(v1 + 32);
  v8 = *(_QWORD *)(v1 + 80);
  *(_OWORD *)(v6 - 192) = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(v6 - 176) = v7;
  *(_QWORD *)(v6 - 168) = v2;
  v9 = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(v6 - 160) = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v6 - 144) = v9;
  *(_QWORD *)(v6 - 128) = v8;
  *(_QWORD *)(v6 - 120) = v3;
  *(_QWORD *)(v6 - 112) = v4;
  *(_QWORD *)(v6 - 104) = v5;
  *(_OWORD *)(v6 - 96) = *(_OWORD *)(v1 + 112);
  type metadata accessor for CanvasItemDescriptor();
}

uint64_t sub_23BF6CD68(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _BYTE v17[96];

  v8 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = &v17[-v9];
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = &v17[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v15 + 16))(v14, v5, v4, v12);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 32))(v10, v14, a1);
    sub_23BFF99DC();
    CanvasItemDescriptor.hash(into:)();
  }
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v6 + 32))(v3, v14, v1);
  sub_23BFF99DC();
  CanvasItemPlaceholder.hash(into:)(v2, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v3, v1);
}

void static LazyCanvasItemDescriptor.== infix(_:_:)()
{
  type metadata accessor for CanvasItemPlaceholder();
}

void sub_23BF6CEFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)(v19 - 312) = a1;
  *(_QWORD *)(v19 - 320) = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v19 - 368) = (char *)&a9 - v20;
  *(_QWORD *)(v19 - 200) = v17;
  *(_QWORD *)(v19 - 192) = *(_QWORD *)(v19 - 240);
  *(_QWORD *)(v19 - 184) = v15;
  *(_QWORD *)(v19 - 176) = v9;
  *(_QWORD *)(v19 - 168) = v16;
  v21 = *(_QWORD *)(v19 - 208);
  *(_QWORD *)(v19 - 160) = *(_QWORD *)(v19 - 216);
  *(_QWORD *)(v19 - 152) = v13;
  *(_QWORD *)(v19 - 144) = v14;
  *(_QWORD *)(v19 - 136) = v18;
  *(_QWORD *)(v19 - 128) = v12;
  *(_QWORD *)(v19 - 120) = v11;
  *(_QWORD *)(v19 - 112) = v10;
  *(_QWORD *)(v19 - 104) = v21;
  *(_QWORD *)(v19 - 96) = *(_QWORD *)(v19 - 256);
  type metadata accessor for CanvasItemDescriptor();
}

void sub_23BF6CF74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v19 - 328) = a1;
  *(_QWORD *)(v19 - 336) = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v19 - 376) = (char *)&a9 - v20;
  *(_QWORD *)(v19 - 200) = *(_QWORD *)(v19 - 248);
  *(_QWORD *)(v19 - 192) = v17;
  *(_QWORD *)(v19 - 184) = *(_QWORD *)(v19 - 232);
  *(_QWORD *)(v19 - 176) = v9;
  *(_QWORD *)(v19 - 280) = v9;
  *(_QWORD *)(v19 - 168) = *(_QWORD *)(v19 - 224);
  *(_QWORD *)(v19 - 160) = v15;
  *(_QWORD *)(v19 - 344) = v13;
  *(_QWORD *)(v19 - 152) = v13;
  *(_QWORD *)(v19 - 144) = v14;
  *(_QWORD *)(v19 - 352) = v14;
  *(_QWORD *)(v19 - 360) = v18;
  *(_QWORD *)(v19 - 136) = v18;
  *(_QWORD *)(v19 - 128) = v12;
  *(_QWORD *)(v19 - 304) = v12;
  *(_QWORD *)(v19 - 296) = v11;
  *(_QWORD *)(v19 - 120) = v11;
  *(_QWORD *)(v19 - 112) = v10;
  *(_QWORD *)(v19 - 288) = v10;
  *(_QWORD *)(v19 - 104) = *(_QWORD *)(v19 - 208);
  *(_QWORD *)(v19 - 96) = v16;
  type metadata accessor for LazyCanvasItemDescriptor();
}

uint64_t sub_23BF6D024(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t TupleTypeMetadata2;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  void (*v16)(_BYTE *, _QWORD, uint64_t, __n128);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  _BYTE v27[32];

  v2 = a1;
  v3 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v5 = &v27[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v6);
  v8 = &v27[-v7];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v10 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v11 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v13 = &v27[-v12];
  v15 = &v27[*(int *)(v14 + 48) - v12];
  v16 = *(void (**)(_BYTE *, _QWORD, uint64_t, __n128))(v3 + 16);
  v16(&v27[-v12], *(_QWORD *)(v1 - 272), v2, v11);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v16)(v15, *(_QWORD *)(v1 - 264), v2);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    ((void (*)(_BYTE *, _BYTE *, uint64_t))v16)(v5, v13, v2);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v17 = *(_QWORD *)(v1 - 320);
      v18 = *(_QWORD *)(v1 - 368);
      v19 = *(_QWORD *)(v1 - 312);
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(v17 + 32))(v18, v15, v19);
      v20 = static CanvasItemPlaceholder.== infix(_:_:)();
      v21 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
      v21(v18, v19);
      v21((uint64_t)v5, v19);
      goto LABEL_10;
    }
    (*(void (**)(_BYTE *, _QWORD))(*(_QWORD *)(v1 - 320) + 8))(v5, *(_QWORD *)(v1 - 312));
LABEL_7:
    v20 = 0;
    v3 = v10;
    v2 = TupleTypeMetadata2;
    goto LABEL_10;
  }
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v16)(v8, v13, v2);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(_BYTE *, _QWORD))(*(_QWORD *)(v1 - 336) + 8))(v8, *(_QWORD *)(v1 - 328));
    goto LABEL_7;
  }
  v22 = *(_QWORD *)(v1 - 336);
  v23 = *(_QWORD *)(v1 - 376);
  v24 = *(_QWORD *)(v1 - 328);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v22 + 32))(v23, v15, v24);
  v20 = static CanvasItemDescriptor.== infix(_:_:)((uint64_t)v8, v23, *(_QWORD *)(v1 - 248), *(_QWORD *)(v1 - 240), *(_QWORD *)(v1 - 232), *(_QWORD *)(v1 - 280), *(_QWORD *)(v1 - 224), *(_QWORD *)(v1 - 216), *(_QWORD *)(v1 - 344), *(_QWORD *)(v1 - 352), *(_QWORD *)(v1 - 360), *(_QWORD *)(v1 - 304), *(_QWORD *)(v1 - 296), *(_QWORD *)(v1 - 288), *(_QWORD *)(v1 - 208), *(_QWORD *)(v1 - 256));
  v25 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
  v25(v23, v24);
  v25((uint64_t)v8, v24);
LABEL_10:
  (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v13, v2);
  return v20 & 1;
}

void LazyCanvasItemDescriptor.hashValue.getter()
{
  sub_23BFF99D0();
  LazyCanvasItemDescriptor.hash(into:)();
}

uint64_t sub_23BF6D320()
{
  return sub_23BFF9A00();
}

void sub_23BF6D340()
{
  sub_23BFF99D0();
  LazyCanvasItemDescriptor.hash(into:)();
}

uint64_t sub_23BF6D368()
{
  return sub_23BFF9A00();
}

void sub_23BF6D380()
{
  JUMPOUT(0x242615198);
}

void sub_23BF6D390()
{
  static LazyCanvasItemDescriptor.== infix(_:_:)();
}

uint64_t sub_23BF6D3C8(char a1)
{
  return a1 & 1;
}

uint64_t sub_23BF6D3D8()
{
  return swift_allocateGenericValueMetadata();
}

void sub_23BF6D3E0()
{
  type metadata accessor for CanvasItemDescriptor();
}

_QWORD *sub_23BF6D4C8(_QWORD *a1, unsigned __int8 *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  size_t v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;
  unint64_t v27;
  unint64_t v28;
  size_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unsigned int v51;
  int v52;
  int v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  unsigned int v57;
  unint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  const void *v94;
  unsigned int (*v95)(const void *, uint64_t, uint64_t);
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  unint64_t v146;
  unsigned int v147;
  uint64_t v148;
  uint64_t v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  uint64_t v160;
  uint64_t v161;
  void *v162;
  const void *v163;
  unsigned int (*v164)(const void *, uint64_t, uint64_t);
  unint64_t v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  void *v169;
  const void *v170;
  unsigned int (*v171)(const void *, uint64_t, uint64_t);
  unint64_t v172;
  void *v173;
  const void *v174;
  unsigned int (*v175)(const void *, uint64_t, uint64_t);
  void *v176;
  const void *v177;
  unsigned int (*v178)(const void *, uint64_t, uint64_t);
  unint64_t v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  uint64_t v187;
  uint64_t v188;
  void *v189;
  const void *v190;
  unsigned int (*v191)(const void *, uint64_t, uint64_t);
  __int128 v192;
  __int128 v193;
  __int128 v194;
  uint64_t v195;
  uint64_t v196;
  void *v197;
  const void *v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  uint64_t v205;
  uint64_t v206;
  void *v207;
  const void *v208;
  unsigned int (*v209)(const void *, uint64_t, uint64_t);
  void *v210;
  const void *v211;
  unsigned int (*v212)(const void *, uint64_t, uint64_t);
  void *v213;
  const void *v214;
  unsigned int (*v215)(const void *, uint64_t, uint64_t);
  __int128 v216;
  uint64_t v217;
  uint64_t v218;
  void *v219;
  const void *v220;
  unsigned int (*v221)(const void *, uint64_t, uint64_t);
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  uint64_t v227;
  uint64_t v228;
  void *v229;
  const void *v230;
  unsigned int (*v231)(const void *, uint64_t, uint64_t);
  __int128 v232;
  __int128 v233;
  __int128 v234;
  uint64_t v235;
  uint64_t v236;
  void *v237;
  const void *v238;
  unsigned int (*v239)(const void *, uint64_t, uint64_t);
  size_t v240;
  char v241;
  uint64_t v242;
  uint64_t v243;
  void *v244;
  const void *v245;
  void *v246;
  const void *v247;
  void *v248;
  const void *v249;
  void *v250;
  const void *v251;
  unint64_t v252;
  unint64_t v253;
  void *v254;
  const void *v255;
  uint64_t v256;
  void *v257;
  const void *v258;
  size_t v259;
  void *v260;
  const void *v261;
  void *v262;
  const void *v263;
  void *v264;
  const void *v265;
  void *v266;
  const void *v267;
  void *v268;
  const void *v269;
  void *v270;
  const void *v271;
  void *v272;
  const void *v273;
  void *v274;
  const void *v275;
  unint64_t v276;
  unint64_t v277;
  void (*v278)(unint64_t, unint64_t, uint64_t);
  void *v279;
  const void *v280;
  void *v281;
  const void *v282;
  unsigned int (*v283)(const void *, uint64_t, uint64_t);
  size_t v284;
  void *v285;
  const void *v286;
  void *v287;
  const void *v288;
  void *v289;
  const void *v290;
  void *v291;
  const void *v292;
  unint64_t v293;
  unint64_t v294;
  void *v295;
  const void *v296;
  void *v297;
  const void *v298;
  void *v299;
  const void *v300;
  void *v301;
  const void *v302;
  void *v303;
  const void *v304;
  void *v305;
  const void *v306;
  void *v307;
  const void *v308;
  void *v309;
  const void *v310;
  _QWORD *result;
  char v312;
  unsigned int (*v313)(unint64_t, uint64_t, uint64_t);
  unint64_t v314;
  void *v315;
  const void *v316;
  size_t v317;
  size_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  size_t v325;
  size_t v326;
  uint64_t v327;
  uint64_t v328;
  size_t __n;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  unint64_t v338;
  unint64_t v339;
  size_t v340;
  uint64_t v341;
  unint64_t v342;
  unint64_t v343;
  unint64_t v344;
  unint64_t v345;
  unint64_t v346;
  unint64_t v347;
  unint64_t v348;
  unint64_t v349;
  uint64_t v350;
  size_t v351;
  size_t v352;
  uint64_t v353;
  uint64_t v354;
  unint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  unint64_t v359;
  uint64_t v360;
  size_t v361;
  uint64_t v362;
  size_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  unint64_t v373;
  int v374;
  int v375;
  size_t v376;
  int v377;
  unint64_t v378;
  unint64_t v380;
  unint64_t v381;
  uint64_t v383;
  uint64_t v384;

  v383 = *(_QWORD *)(a3[5] - 8);
  v4 = *(_QWORD *)(v383 + 64);
  v366 = a3[3];
  v5 = *(_QWORD *)(v366 - 8);
  v377 = *(_DWORD *)(v5 + 80);
  v6 = v377;
  v367 = sub_23BFF82CC();
  v7 = *(_QWORD *)(v367 - 8);
  v375 = *(_DWORD *)(v7 + 80);
  v8 = v375;
  v364 = a3[2];
  v9 = *(_QWORD *)(v364 - 8);
  v374 = *(_DWORD *)(v9 + 80);
  v328 = sub_23BFF8368();
  v10 = *(_QWORD *)(v328 - 8);
  v11 = *(_DWORD *)(v10 + 80);
  v358 = a3[7];
  v12 = *(_QWORD *)(v358 - 8);
  v13 = *(_DWORD *)(v12 + 80);
  v341 = v377 + 248;
  v365 = v5;
  v14 = *(_QWORD *)(v5 + 64);
  v15 = v14 + v375;
  v350 = v15 + 1 + ((v6 + 248) & ~v6);
  v372 = v7;
  v16 = *(_QWORD *)(v7 + 64);
  if (*(_DWORD *)(v7 + 84))
    v17 = *(_QWORD *)(v7 + 64);
  else
    v17 = v16 + 1;
  v18 = v17 + v375;
  v19 = v17 + v374;
  v20 = *(_QWORD *)(v9 + 64);
  v359 = v14;
  v360 = v20 + v374;
  v362 = v9;
  if (*(_DWORD *)(v9 + 84))
    v21 = *(_QWORD *)(v9 + 64);
  else
    v21 = v20 + 1;
  v22 = ((v20
        + v374
        + ((v17
          + v374
          + ((v17
            + v375
            + ((v17 + v375 + (v350 & ~(unint64_t)v375)) & ~(unint64_t)v375)) & ~(unint64_t)v375)) & ~(unint64_t)v374)) & ~(unint64_t)v374)
      + v21;
  if (v16 <= v14)
    v23 = v14;
  else
    v23 = *(_QWORD *)(v7 + 64);
  v326 = v17 + v11;
  v370 = *(_DWORD *)(v10 + 80);
  v327 = *(_QWORD *)(v328 - 8);
  v24 = ((v326 + (v18 & ~(unint64_t)v375)) & ~(unint64_t)v11)
      + *(_QWORD *)(v10 + 64);
  if (v24 <= v23)
    v24 = v23;
  v337 = v377 + 216;
  v353 = v21 + v374;
  v354 = v21 + v13;
  v357 = *(_QWORD *)(v358 - 8);
  v25 = *(_QWORD *)(v12 + 64);
  if (*(_DWORD *)(v12 + 84))
    v26 = *(_QWORD *)(v12 + 64);
  else
    v26 = v25 + 1;
  __n = v26;
  v27 = ((v354
        + ((v353
          + ((v19
            + ((v18
              + ((v18
                + ((v15 + 1 + (v337 & ~(unint64_t)v377)) & ~(unint64_t)v375)) & ~(unint64_t)v375)) & ~(unint64_t)v375)) & ~(unint64_t)v374)) & ~(unint64_t)v374)) & ~(unint64_t)v13)
      + v26;
  v336 = v375 + 64;
  v28 = ((v19 + ((v18 + (v336 & ~(unint64_t)v375)) & ~(unint64_t)v375)) & ~(unint64_t)v374)
      + v21;
  v29 = v17 + (v15 & ~(unint64_t)v375);
  v30 = ((v29 + v375) & ~(unint64_t)v375) + v17;
  v356 = v375 + 24;
  v31 = ((v356 + (v29 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)v375) + v17;
  v331 = v377 + 24;
  v332 = v377 + 104;
  v335 = v377 + 160;
  v363 = v17 + v374;
  v361 = v21;
  v32 = ((v19
        + ((v18
          + ((v18
            + ((v18
              + ((v15 + (v335 & ~(unint64_t)v377)) & ~(unint64_t)v375)) & ~(unint64_t)v375)) & ~(unint64_t)v375)) & ~(unint64_t)v375)) & ~(unint64_t)v374)
      + v21;
  v330 = v377 + 56;
  v334 = v377 + 64;
  v33 = ((v15 + (v334 & ~(unint64_t)v377)) & ~(unint64_t)v375) + v17;
  v348 = v31;
  v349 = v27;
  if (v31 > v22)
    v22 = v31;
  v338 = v24 + 1;
  v355 = v24;
  if (v22 <= v24 + 1)
    v22 = v24 + 1;
  if (v22 <= v27)
    v22 = v27;
  v346 = ((v30 + v375) & ~(unint64_t)v375) + v17;
  v347 = v28;
  if (v22 <= v28)
    v22 = v28;
  if (v22 <= ((v30 + v375) & ~(unint64_t)v375) + v17)
    v22 = ((v30 + v375) & ~(unint64_t)v375) + v17;
  v344 = ((v18
         + ((v18
           + ((v15 + ((v377 + 104) & ~(unint64_t)v377)) & ~(unint64_t)v375)) & ~(unint64_t)v375)) & ~(unint64_t)v375)
       + v17;
  v345 = ((v18
         + ((v15 + ((v377 + 24) & ~(unint64_t)v377)) & ~(unint64_t)v375)) & ~(unint64_t)v375)
       + v17;
  if (v22 <= v345)
    v22 = ((v18
          + ((v15 + ((v377 + 24) & ~(unint64_t)v377)) & ~(unint64_t)v375)) & ~(unint64_t)v375)
        + v17;
  if (v22 <= ((v18
              + ((v18
                + ((v15 + ((v377 + 104) & ~(unint64_t)v377)) & ~(unint64_t)v375)) & ~(unint64_t)v375)) & ~(unint64_t)v375)
            + v17)
    v22 = ((v18
          + ((v18
            + ((v15 + ((v377 + 104) & ~(unint64_t)v377)) & ~(unint64_t)v375)) & ~(unint64_t)v375)) & ~(unint64_t)v375)
        + v17;
  v342 = ((v18
         + ((v18
           + ((v15 + ((v377 + 56) & ~(unint64_t)v377)) & ~(unint64_t)v375)) & ~(unint64_t)v375)) & ~(unint64_t)v375)
       + v17;
  v343 = v32;
  if (v22 <= v32)
    v22 = v32;
  if (v22 <= ((v18
              + ((v18
                + ((v15 + ((v377 + 56) & ~(unint64_t)v377)) & ~(unint64_t)v375)) & ~(unint64_t)v375)) & ~(unint64_t)v375)
            + v17)
    v22 = ((v18
          + ((v18
            + ((v15 + ((v377 + 56) & ~(unint64_t)v377)) & ~(unint64_t)v375)) & ~(unint64_t)v375)) & ~(unint64_t)v375)
        + v17;
  v34 = v33 + 1;
  if (v22 <= v33 + 1)
    v35 = v33 + 1;
  else
    v35 = v22;
  v333 = v377 + 128;
  v339 = ((v18
         + ((v18 + ((v15 + (v333 & ~(unint64_t)v377)) & ~(unint64_t)v375)) & ~(unint64_t)v375)) & ~(unint64_t)v375)
       + v17;
  v340 = v34;
  if (v35 <= v339)
    v35 = ((v18
          + ((v18
            + ((v15 + ((v377 + 128) & ~(unint64_t)v377)) & ~(unint64_t)v375)) & ~(unint64_t)v375)) & ~(unint64_t)v375)
        + v17;
  v351 = v30;
  v352 = *(_QWORD *)(v12 + 64);
  if (v35 <= v30)
    v35 = v30;
  if (v35 <= v25)
    v36 = *(_QWORD *)(v12 + 64);
  else
    v36 = v35;
  v37 = a3[4];
  v38 = *(_QWORD *)(v37 - 8);
  if (*(_DWORD *)(v38 + 84))
    v39 = *(_QWORD *)(v38 + 64);
  else
    v39 = *(_QWORD *)(v38 + 64) + 1;
  v371 = a3[6];
  v40 = *(_QWORD *)(v371 - 8);
  v368 = v13;
  v41 = v375 | (unint64_t)v377 | v374 | (unint64_t)v11 | v13;
  v42 = *(_DWORD *)(v38 + 80);
  v43 = v36 + v42 + 1;
  v44 = v41 | 7;
  v45 = v4;
  v46 = (v41 | 7) + v4;
  v47 = *(_DWORD *)(v40 + 80);
  if (*(_DWORD *)(v40 + 84))
    v48 = *(_QWORD *)(v40 + 64);
  else
    v48 = *(_QWORD *)(v40 + 64) + 1;
  v369 = v45;
  if (((v45 + 7) & 0xFFFFFFFFFFFFFFF8) + 249 <= ((v48 + 7 + ((v39 + v47 + ((v43 + (v46 & ~(v41 | 7))) & ~v42)) & ~v47)) & 0xFFFFFFFFFFFFFFF8)
                                                 + 8)
    v49 = ((v48 + 7 + ((v39 + v47 + ((v43 + (v46 & ~(v41 | 7))) & ~v42)) & ~v47)) & 0xFFFFFFFFFFFFFFF8) + 8;
  else
    v49 = ((v45 + 7) & 0xFFFFFFFFFFFFFFF8) + 249;
  v50 = v41 | v47 | *(_DWORD *)(v383 + 80) & 0xF8 | v42 | 7;
  if (v50 != 7
    || ((v375 | v377 | v374 | v11 | v13 | *(_DWORD *)(v38 + 80) | *(_DWORD *)(v40 + 80) | *(_DWORD *)(v383 + 80)) & 0x100000) != 0
    || v49 > 0x17)
  {
    v54 = *(_QWORD *)a2;
    *a1 = *(_QWORD *)a2;
    v55 = (_QWORD *)(v54 + ((v50 + 16) & ~v50));
    swift_retain();
    return v55;
  }
  v325 = v17 + v375;
  v320 = *(_QWORD *)(v37 - 8);
  v321 = v37;
  v323 = *(_QWORD *)(v371 - 8);
  v51 = a2[v49];
  v376 = v36;
  if (v51 >= 2)
  {
    v52 = v49 <= 3 ? v49 : 4;
    if (v52)
    {
      if (v52 == 4)
      {
        v53 = *(_DWORD *)a2;
        if (v49 >= 4)
        {
LABEL_62:
          v51 = v53 + 2;
          goto LABEL_66;
        }
      }
      else
      {
        v53 = *a2;
        if (v49 >= 4)
          goto LABEL_62;
      }
      v51 = (v53 | ((v51 - 2) << (8 * v49))) + 2;
    }
  }
LABEL_66:
  v318 = v48;
  v319 = v36 + v42 + 1;
  v317 = v39;
  v322 = v39 + v47;
  v324 = v48 + 7;
  v378 = v49;
  v55 = a1;
  (*(void (**)(_QWORD *))(v383 + 16))(a1);
  if (v51 == 1)
  {
    v56 = (unint64_t)&a2[v369 + 7] & 0xFFFFFFFFFFFFFFF8;
    v57 = *(unsigned __int8 *)(v56 + 248);
    if (v57 >= 0xB)
      v57 = *(_DWORD *)v56 + 11;
    v58 = ((unint64_t)a1 + v369 + 7) & 0xFFFFFFFFFFFFFFF8;
    switch(v57)
    {
      case 0u:
        v59 = *(_OWORD *)v56;
        v60 = *(_OWORD *)(v56 + 16);
        v61 = *(_OWORD *)(v56 + 48);
        *(_OWORD *)(v58 + 32) = *(_OWORD *)(v56 + 32);
        *(_OWORD *)(v58 + 48) = v61;
        *(_OWORD *)v58 = v59;
        *(_OWORD *)(v58 + 16) = v60;
        v62 = *(_OWORD *)(v56 + 64);
        v63 = *(_OWORD *)(v56 + 80);
        v64 = *(_OWORD *)(v56 + 112);
        *(_OWORD *)(v58 + 96) = *(_OWORD *)(v56 + 96);
        *(_OWORD *)(v58 + 112) = v64;
        *(_OWORD *)(v58 + 64) = v62;
        *(_OWORD *)(v58 + 80) = v63;
        v65 = *(_OWORD *)(v56 + 128);
        v66 = *(_OWORD *)(v56 + 144);
        v67 = *(_OWORD *)(v56 + 176);
        *(_OWORD *)(v58 + 160) = *(_OWORD *)(v56 + 160);
        *(_OWORD *)(v58 + 176) = v67;
        *(_OWORD *)(v58 + 128) = v65;
        *(_OWORD *)(v58 + 144) = v66;
        v68 = *(_OWORD *)(v56 + 192);
        v69 = *(_OWORD *)(v56 + 208);
        v70 = *(_OWORD *)(v56 + 224);
        *(_QWORD *)(v58 + 240) = *(_QWORD *)(v56 + 240);
        *(_OWORD *)(v58 + 208) = v69;
        *(_OWORD *)(v58 + 224) = v70;
        *(_OWORD *)(v58 + 192) = v68;
        *(_BYTE *)(v58 + 248) = 0;
        break;
      case 1u:
        v96 = *(_OWORD *)(v56 + 16);
        *(_OWORD *)v58 = *(_OWORD *)v56;
        *(_OWORD *)(v58 + 16) = v96;
        v97 = *(_OWORD *)(v56 + 32);
        v98 = *(_OWORD *)(v56 + 48);
        v99 = *(_OWORD *)(v56 + 80);
        *(_OWORD *)(v58 + 64) = *(_OWORD *)(v56 + 64);
        *(_OWORD *)(v58 + 80) = v99;
        *(_OWORD *)(v58 + 32) = v97;
        *(_OWORD *)(v58 + 48) = v98;
        v100 = *(_OWORD *)(v56 + 96);
        v101 = *(_OWORD *)(v56 + 112);
        v102 = *(_OWORD *)(v56 + 144);
        *(_OWORD *)(v58 + 128) = *(_OWORD *)(v56 + 128);
        *(_OWORD *)(v58 + 144) = v102;
        *(_OWORD *)(v58 + 96) = v100;
        *(_OWORD *)(v58 + 112) = v101;
        v103 = *(_OWORD *)(v56 + 160);
        v104 = *(_OWORD *)(v56 + 176);
        v105 = *(_OWORD *)(v56 + 192);
        *(_QWORD *)(v58 + 208) = *(_QWORD *)(v56 + 208);
        *(_OWORD *)(v58 + 176) = v104;
        *(_OWORD *)(v58 + 192) = v105;
        *(_OWORD *)(v58 + 160) = v103;
        *(_BYTE *)(v58 + 248) = 1;
        break;
      case 2u:
        v106 = *(_OWORD *)v56;
        v107 = *(_OWORD *)(v56 + 16);
        v108 = *(_OWORD *)(v56 + 48);
        *(_OWORD *)(v58 + 32) = *(_OWORD *)(v56 + 32);
        *(_OWORD *)(v58 + 48) = v108;
        *(_OWORD *)v58 = v106;
        *(_OWORD *)(v58 + 16) = v107;
        *(_BYTE *)(v58 + 248) = 2;
        break;
      case 3u:
        *(_OWORD *)v58 = *(_OWORD *)v56;
        *(_BYTE *)(v58 + 248) = 3;
        break;
      case 4u:
        v109 = *(_OWORD *)v56;
        *(_QWORD *)(v58 + 16) = *(_QWORD *)(v56 + 16);
        *(_OWORD *)v58 = v109;
        *(_BYTE *)(v58 + 248) = 4;
        break;
      case 5u:
        *(_OWORD *)v58 = *(_OWORD *)v56;
        *(_BYTE *)(v58 + 248) = 5;
        break;
      case 6u:
        v110 = *(_OWORD *)v56;
        v111 = *(_OWORD *)(v56 + 32);
        *(_OWORD *)(v58 + 16) = *(_OWORD *)(v56 + 16);
        *(_OWORD *)(v58 + 32) = v111;
        *(_OWORD *)v58 = v110;
        v112 = *(_OWORD *)(v56 + 48);
        v113 = *(_OWORD *)(v56 + 64);
        v114 = *(_OWORD *)(v56 + 80);
        *(_QWORD *)(v58 + 96) = *(_QWORD *)(v56 + 96);
        *(_OWORD *)(v58 + 64) = v113;
        *(_OWORD *)(v58 + 80) = v114;
        *(_OWORD *)(v58 + 48) = v112;
        *(_BYTE *)(v58 + 248) = 6;
        break;
      case 7u:
        v115 = *(_OWORD *)(v56 + 16);
        *(_OWORD *)v58 = *(_OWORD *)v56;
        *(_OWORD *)(v58 + 16) = v115;
        v116 = *(_OWORD *)(v56 + 32);
        v117 = *(_OWORD *)(v56 + 48);
        v118 = *(_OWORD *)(v56 + 80);
        *(_OWORD *)(v58 + 64) = *(_OWORD *)(v56 + 64);
        *(_OWORD *)(v58 + 80) = v118;
        *(_OWORD *)(v58 + 32) = v116;
        *(_OWORD *)(v58 + 48) = v117;
        v119 = *(_OWORD *)(v56 + 96);
        v120 = *(_OWORD *)(v56 + 112);
        v121 = *(_OWORD *)(v56 + 144);
        *(_OWORD *)(v58 + 128) = *(_OWORD *)(v56 + 128);
        *(_OWORD *)(v58 + 144) = v121;
        *(_OWORD *)(v58 + 96) = v119;
        *(_OWORD *)(v58 + 112) = v120;
        *(_BYTE *)(v58 + 248) = 7;
        break;
      case 8u:
        v122 = *(_OWORD *)v56;
        v123 = *(_OWORD *)(v56 + 16);
        v124 = *(_OWORD *)(v56 + 32);
        *(_QWORD *)(v58 + 48) = *(_QWORD *)(v56 + 48);
        *(_OWORD *)(v58 + 16) = v123;
        *(_OWORD *)(v58 + 32) = v124;
        *(_OWORD *)v58 = v122;
        *(_BYTE *)(v58 + 248) = 8;
        break;
      case 9u:
        v125 = *(_OWORD *)v56;
        v126 = *(_OWORD *)(v56 + 16);
        v127 = *(_OWORD *)(v56 + 48);
        *(_OWORD *)(v58 + 32) = *(_OWORD *)(v56 + 32);
        *(_OWORD *)(v58 + 48) = v127;
        *(_OWORD *)v58 = v125;
        *(_OWORD *)(v58 + 16) = v126;
        *(_BYTE *)(v58 + 248) = 9;
        break;
      case 0xAu:
        v128 = *(_OWORD *)v56;
        v129 = *(_OWORD *)(v56 + 16);
        v130 = *(_OWORD *)(v56 + 48);
        *(_OWORD *)(v58 + 32) = *(_OWORD *)(v56 + 32);
        *(_OWORD *)(v58 + 48) = v130;
        *(_OWORD *)v58 = v128;
        *(_OWORD *)(v58 + 16) = v129;
        v131 = *(_OWORD *)(v56 + 64);
        v132 = *(_OWORD *)(v56 + 80);
        v133 = *(_OWORD *)(v56 + 112);
        *(_OWORD *)(v58 + 96) = *(_OWORD *)(v56 + 96);
        *(_OWORD *)(v58 + 112) = v133;
        *(_OWORD *)(v58 + 64) = v131;
        *(_OWORD *)(v58 + 80) = v132;
        *(_BYTE *)(v58 + 248) = 10;
        break;
      default:
        v134 = *(_OWORD *)v56;
        v135 = *(_OWORD *)(v56 + 16);
        v136 = *(_OWORD *)(v56 + 48);
        *(_OWORD *)(v58 + 32) = *(_OWORD *)(v56 + 32);
        *(_OWORD *)(v58 + 48) = v136;
        *(_OWORD *)v58 = v134;
        *(_OWORD *)(v58 + 16) = v135;
        v137 = *(_OWORD *)(v56 + 64);
        v138 = *(_OWORD *)(v56 + 80);
        v139 = *(_OWORD *)(v56 + 112);
        *(_OWORD *)(v58 + 96) = *(_OWORD *)(v56 + 96);
        *(_OWORD *)(v58 + 112) = v139;
        *(_OWORD *)(v58 + 64) = v137;
        *(_OWORD *)(v58 + 80) = v138;
        v140 = *(_OWORD *)(v56 + 128);
        v141 = *(_OWORD *)(v56 + 144);
        v142 = *(_OWORD *)(v56 + 176);
        *(_OWORD *)(v58 + 160) = *(_OWORD *)(v56 + 160);
        *(_OWORD *)(v58 + 176) = v142;
        *(_OWORD *)(v58 + 128) = v140;
        *(_OWORD *)(v58 + 144) = v141;
        v143 = *(_OWORD *)(v56 + 192);
        v144 = *(_OWORD *)(v56 + 208);
        v145 = *(_OWORD *)(v56 + 224);
        *(_OWORD *)(v58 + 233) = *(_OWORD *)(v56 + 233);
        *(_OWORD *)(v58 + 208) = v144;
        *(_OWORD *)(v58 + 224) = v145;
        *(_OWORD *)(v58 + 192) = v143;
        break;
    }
    *((_BYTE *)a1 + v378) = 1;
  }
  else
  {
    v71 = ((unint64_t)a1 + v46) & ~v44;
    v72 = (unint64_t)&a2[v46] & ~v44;
    v74 = ~v6;
    v384 = ~v8;
    v75 = ~v368;
    v76 = ~v42;
    v77 = ~v47;
    switch(*(_BYTE *)(v72 + v376))
    {
      case 0:
        v78 = ~(unint64_t)v374;
        v79 = *(_OWORD *)v72;
        v80 = *(_OWORD *)(v72 + 16);
        v81 = *(_OWORD *)(v72 + 48);
        *(_OWORD *)(v71 + 32) = *(_OWORD *)(v72 + 32);
        *(_OWORD *)(v71 + 48) = v81;
        *(_OWORD *)v71 = v79;
        *(_OWORD *)(v71 + 16) = v80;
        v82 = *(_OWORD *)(v72 + 64);
        v83 = *(_OWORD *)(v72 + 80);
        v84 = *(_OWORD *)(v72 + 112);
        *(_OWORD *)(v71 + 96) = *(_OWORD *)(v72 + 96);
        *(_OWORD *)(v71 + 112) = v84;
        *(_OWORD *)(v71 + 64) = v82;
        *(_OWORD *)(v71 + 80) = v83;
        v85 = *(_OWORD *)(v72 + 128);
        v86 = *(_OWORD *)(v72 + 144);
        v87 = *(_OWORD *)(v72 + 176);
        *(_OWORD *)(v71 + 160) = *(_OWORD *)(v72 + 160);
        *(_OWORD *)(v71 + 176) = v87;
        *(_OWORD *)(v71 + 128) = v85;
        *(_OWORD *)(v71 + 144) = v86;
        v88 = *(_OWORD *)(v72 + 192);
        v89 = *(_OWORD *)(v72 + 208);
        v90 = *(_OWORD *)(v72 + 224);
        *(_QWORD *)(v71 + 240) = *(_QWORD *)(v72 + 240);
        *(_OWORD *)(v71 + 208) = v89;
        *(_OWORD *)(v71 + 224) = v90;
        *(_OWORD *)(v71 + 192) = v88;
        v380 = v71;
        v91 = (v341 + v71) & v74;
        v92 = (v341 + v72) & v74;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v365 + 16))(v91, v92, v366);
        *(_BYTE *)(v91 + v359) = *(_BYTE *)(v92 + v359);
        v93 = (void *)((v8 + 1 + v91 + v359) & v384);
        v94 = (const void *)((v8 + 1 + v92 + v359) & v384);
        v95 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v372 + 48);
        if (v95(v94, 1, v367))
        {
          memcpy(v93, v94, v17);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v372 + 16))(v93, v94, v367);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v372 + 56))(v93, 0, 1, v367);
        }
        v243 = v364;
        v244 = (void *)(((unint64_t)v93 + v325) & v384);
        v245 = (const void *)(((unint64_t)v94 + v325) & v384);
        if (v95(v245, 1, v367))
        {
          memcpy(v244, v245, v17);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v372 + 16))(v244, v245, v367);
          v243 = v364;
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v372 + 56))(v244, 0, 1, v367);
        }
        v264 = (void *)(((unint64_t)v244 + v325) & v384);
        v265 = (const void *)(((unint64_t)v245 + v325) & v384);
        if (v95(v265, 1, v367))
        {
          memcpy(v264, v265, v17);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v372 + 16))(v264, v265, v367);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v372 + 56))(v264, 0, 1, v367);
        }
        v276 = ((unint64_t)v264 + v363) & v78;
        v277 = ((unint64_t)v265 + v363) & v78;
        v278 = *(void (**)(unint64_t, unint64_t, uint64_t))(v362 + 16);
        v278(v276, v277, v243);
        v279 = (void *)((v360 + v276) & v78);
        v280 = (const void *)((v360 + v277) & v78);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v362 + 48))(v280, 1, v243))
        {
          memcpy(v279, v280, v361);
        }
        else
        {
          v278((unint64_t)v279, (unint64_t)v280, v243);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v362 + 56))(v279, 0, 1, v243);
        }
        v241 = 0;
        goto LABEL_227;
      case 1:
        v146 = v355;
        v147 = *(unsigned __int8 *)(v72 + v355);
        if (v147 >= 3)
        {
          if (v355 <= 3)
            v148 = v355;
          else
            v148 = 4;
          __asm { BR              X12 }
        }
        if (v147 == 2)
        {
          v313 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v372 + 48);
          if (v313(v72, 1, v367))
          {
            memcpy((void *)v71, (const void *)v72, v17);
          }
          else
          {
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v372 + 16))(v71, v72, v367);
            (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v372 + 56))(v71, 0, 1, v367);
          }
          v314 = v71;
          v315 = (void *)((v325 + v71) & v384);
          v316 = (const void *)((v325 + v72) & v384);
          if (v313((unint64_t)v316, 1, v367))
          {
            memcpy(v315, v316, v17);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v372 + 16))(v315, v316, v367);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v372 + 56))(v315, 0, 1, v367);
          }
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v327 + 16))(((unint64_t)v315 + v326) & ~v370, ((unint64_t)v316 + v326) & ~v370, v328);
          v312 = 2;
          v242 = v319;
          v71 = v314;
          v240 = v376;
          v146 = v355;
        }
        else if (v147 == 1)
        {
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v372 + 16))(v71, v72, v367);
          v240 = v376;
          v312 = 1;
          v242 = v319;
        }
        else
        {
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v365 + 16))(v71, v72, v366);
          v312 = 0;
          v242 = v319;
          v240 = v376;
        }
        *(_BYTE *)(v71 + v146) = v312;
        v241 = 1;
        goto LABEL_258;
      case 2:
        v373 = ~(unint64_t)v374;
        v149 = ~v42;
        v150 = *(_OWORD *)(v72 + 16);
        *(_OWORD *)v71 = *(_OWORD *)v72;
        *(_OWORD *)(v71 + 16) = v150;
        v151 = *(_OWORD *)(v72 + 32);
        v152 = *(_OWORD *)(v72 + 48);
        v153 = *(_OWORD *)(v72 + 80);
        *(_OWORD *)(v71 + 64) = *(_OWORD *)(v72 + 64);
        *(_OWORD *)(v71 + 80) = v153;
        *(_OWORD *)(v71 + 32) = v151;
        *(_OWORD *)(v71 + 48) = v152;
        v154 = *(_OWORD *)(v72 + 96);
        v155 = *(_OWORD *)(v72 + 112);
        v156 = *(_OWORD *)(v72 + 144);
        *(_OWORD *)(v71 + 128) = *(_OWORD *)(v72 + 128);
        *(_OWORD *)(v71 + 144) = v156;
        *(_OWORD *)(v71 + 96) = v154;
        *(_OWORD *)(v71 + 112) = v155;
        v157 = *(_OWORD *)(v72 + 160);
        v158 = *(_OWORD *)(v72 + 176);
        v159 = *(_OWORD *)(v72 + 192);
        *(_QWORD *)(v71 + 208) = *(_QWORD *)(v72 + 208);
        *(_OWORD *)(v71 + 176) = v158;
        *(_OWORD *)(v71 + 192) = v159;
        *(_OWORD *)(v71 + 160) = v157;
        v381 = v71;
        v160 = (v337 + v71) & v74;
        v161 = (v337 + v72) & v74;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v365 + 16))(v160, v161, v366);
        *(_BYTE *)(v160 + v359) = *(_BYTE *)(v161 + v359);
        v162 = (void *)((v8 + 1 + v160 + v359) & v384);
        v163 = (const void *)((v8 + 1 + v161 + v359) & v384);
        v164 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v372 + 48);
        if (v164(v163, 1, v367))
        {
          memcpy(v162, v163, v17);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v372 + 16))(v162, v163, v367);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v372 + 56))(v162, 0, 1, v367);
        }
        v246 = (void *)(((unint64_t)v162 + v325) & v384);
        v247 = (const void *)(((unint64_t)v163 + v325) & v384);
        v76 = v149;
        if (v164(v247, 1, v367))
        {
          memcpy(v246, v247, v17);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v372 + 16))(v246, v247, v367);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v372 + 56))(v246, 0, 1, v367);
        }
        v266 = (void *)(((unint64_t)v246 + v325) & v384);
        v267 = (const void *)(((unint64_t)v247 + v325) & v384);
        if (v164(v267, 1, v367))
        {
          memcpy(v266, v267, v17);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v372 + 16))(v266, v267, v367);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v372 + 56))(v266, 0, 1, v367);
        }
        v281 = (void *)(((unint64_t)v266 + v363) & v373);
        v282 = (const void *)(((unint64_t)v267 + v363) & v373);
        v283 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v362 + 48);
        if (v283(v282, 1, v364))
        {
          v284 = v361;
          memcpy(v281, v282, v361);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v362 + 16))(v281, v282, v364);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v362 + 56))(v281, 0, 1, v364);
          v284 = v361;
        }
        v287 = (void *)(((unint64_t)v281 + v353) & v373);
        v288 = (const void *)(((unint64_t)v282 + v353) & v373);
        if (v283(v288, 1, v364))
        {
          memcpy(v287, v288, v284);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v362 + 16))(v287, v288, v364);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v362 + 56))(v287, 0, 1, v364);
        }
        v71 = v381;
        v291 = (void *)(((unint64_t)v287 + v354) & v75);
        v292 = (const void *)(((unint64_t)v288 + v354) & v75);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v357 + 48))(v292, 1, v358))
        {
          memcpy(v291, v292, __n);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v357 + 16))(v291, v292, v358);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v357 + 56))(v291, 0, 1, v358);
        }
        v241 = 2;
        v242 = v319;
        goto LABEL_257;
      case 3:
        v165 = ~(unint64_t)v374;
        v166 = *(_OWORD *)v72;
        v167 = *(_OWORD *)(v72 + 16);
        v168 = *(_OWORD *)(v72 + 48);
        *(_OWORD *)(v71 + 32) = *(_OWORD *)(v72 + 32);
        *(_OWORD *)(v71 + 48) = v168;
        *(_OWORD *)v71 = v166;
        *(_OWORD *)(v71 + 16) = v167;
        v380 = v71;
        v169 = (void *)((v336 + v71) & v384);
        v170 = (const void *)((v336 + v72) & v384);
        v171 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v372 + 48);
        if (v171(v170, 1, v367))
        {
          memcpy(v169, v170, v17);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v372 + 16))(v169, v170, v367);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v372 + 56))(v169, 0, 1, v367);
        }
        v248 = (void *)(((unint64_t)v169 + v325) & v384);
        v249 = (const void *)(((unint64_t)v170 + v325) & v384);
        if (v171(v249, 1, v367))
        {
          memcpy(v248, v249, v17);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v372 + 16))(v248, v249, v367);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v372 + 56))(v248, 0, 1, v367);
        }
        v268 = (void *)(((unint64_t)v248 + v363) & v165);
        v269 = (const void *)(((unint64_t)v249 + v363) & v165);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v362 + 48))(v269, 1, v364))
        {
          memcpy(v268, v269, v361);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v362 + 16))(v268, v269, v364);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v362 + 56))(v268, 0, 1, v364);
        }
        v241 = 3;
        goto LABEL_227;
      case 4:
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v365 + 16))(v71, v72, v366);
        v172 = v71;
        v173 = (void *)((v15 + v71) & v384);
        v174 = (const void *)((v15 + v72) & v384);
        v175 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v372 + 48);
        if (v175(v174, 1, v367))
        {
          memcpy(v173, v174, v17);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v372 + 16))(v173, v174, v367);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v372 + 56))(v173, 0, 1, v367);
        }
        v250 = (void *)(((unint64_t)v173 + v325) & v384);
        v251 = (const void *)(((unint64_t)v174 + v325) & v384);
        if (v175(v251, 1, v367))
        {
          memcpy(v250, v251, v17);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v372 + 16))(v250, v251, v367);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v372 + 56))(v250, 0, 1, v367);
        }
        v270 = (void *)(((unint64_t)v250 + v325) & v384);
        v271 = (const void *)(((unint64_t)v251 + v325) & v384);
        if (v175(v271, 1, v367))
        {
          memcpy(v270, v271, v17);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v372 + 16))(v270, v271, v367);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v372 + 56))(v270, 0, 1, v367);
        }
        v241 = 4;
        goto LABEL_256;
      case 5:
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v365 + 16))(v71, v72, v366);
        v172 = v71;
        v213 = (void *)((v15 + v71) & v384);
        v214 = (const void *)((v15 + v72) & v384);
        v215 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v372 + 48);
        if (v215(v214, 1, v367))
        {
          memcpy(v213, v214, v17);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v372 + 16))(v213, v214, v367);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v372 + 56))(v213, 0, 1, v367);
        }
        *((_BYTE *)v213 + v17) = *((_BYTE *)v214 + v17);
        v293 = ((unint64_t)v213 + v17) & 0xFFFFFFFFFFFFFFF8;
        v294 = ((unint64_t)v214 + v17) & 0xFFFFFFFFFFFFFFF8;
        *(_OWORD *)(v293 + 8) = *(_OWORD *)(v294 + 8);
        v295 = (void *)((v356 + v293) & v384);
        v296 = (const void *)((v356 + v294) & v384);
        if (v215(v296, 1, v367))
        {
          memcpy(v295, v296, v17);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v372 + 16))(v295, v296, v367);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v372 + 56))(v295, 0, 1, v367);
        }
        v241 = 5;
        goto LABEL_256;
      case 6:
        v216 = *(_OWORD *)v72;
        *(_QWORD *)(v71 + 16) = *(_QWORD *)(v72 + 16);
        *(_OWORD *)v71 = v216;
        v172 = v71;
        v217 = (v331 + v71) & v74;
        v218 = (v331 + v72) & v74;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v365 + 16))(v217, v218, v366);
        v219 = (void *)((v15 + v217) & v384);
        v220 = (const void *)((v15 + v218) & v384);
        v221 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v372 + 48);
        if (v221(v220, 1, v367))
        {
          memcpy(v219, v220, v17);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v372 + 16))(v219, v220, v367);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v372 + 56))(v219, 0, 1, v367);
        }
        v297 = (void *)(((unint64_t)v219 + v325) & v384);
        v298 = (const void *)(((unint64_t)v220 + v325) & v384);
        if (v221(v298, 1, v367))
        {
          memcpy(v297, v298, v17);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v372 + 16))(v297, v298, v367);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v372 + 56))(v297, 0, 1, v367);
        }
        v241 = 6;
        goto LABEL_256;
      case 7:
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v365 + 16))(v71, v72, v366);
        v172 = v71;
        v176 = (void *)((v15 + v71) & v384);
        v177 = (const void *)((v15 + v72) & v384);
        v178 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v372 + 48);
        if (v178(v177, 1, v367))
        {
          memcpy(v176, v177, v17);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v372 + 16))(v176, v177, v367);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v372 + 56))(v176, 0, 1, v367);
        }
        *((_BYTE *)v176 + v17) = *((_BYTE *)v177 + v17);
        v252 = ((unint64_t)v176 + v17) & 0xFFFFFFFFFFFFFFF8;
        v253 = ((unint64_t)v177 + v17) & 0xFFFFFFFFFFFFFFF8;
        *(_OWORD *)(v252 + 8) = *(_OWORD *)(v253 + 8);
        v254 = (void *)((v356 + v252) & v384);
        v255 = (const void *)((v356 + v253) & v384);
        if (v178(v255, 1, v367))
        {
          memcpy(v254, v255, v17);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v372 + 16))(v254, v255, v367);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v372 + 56))(v254, 0, 1, v367);
        }
        v241 = 7;
        goto LABEL_256;
      case 8:
        v222 = *(_OWORD *)v72;
        v223 = *(_OWORD *)(v72 + 32);
        *(_OWORD *)(v71 + 16) = *(_OWORD *)(v72 + 16);
        *(_OWORD *)(v71 + 32) = v223;
        *(_OWORD *)v71 = v222;
        v224 = *(_OWORD *)(v72 + 48);
        v225 = *(_OWORD *)(v72 + 64);
        v226 = *(_OWORD *)(v72 + 80);
        *(_QWORD *)(v71 + 96) = *(_QWORD *)(v72 + 96);
        *(_OWORD *)(v71 + 64) = v225;
        *(_OWORD *)(v71 + 80) = v226;
        *(_OWORD *)(v71 + 48) = v224;
        v172 = v71;
        v227 = (v332 + v71) & v74;
        v228 = (v332 + v72) & v74;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v365 + 16))(v227, v228, v366);
        v229 = (void *)((v15 + v227) & v384);
        v230 = (const void *)((v15 + v228) & v384);
        v231 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v372 + 48);
        if (v231(v230, 1, v367))
        {
          memcpy(v229, v230, v17);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v372 + 16))(v229, v230, v367);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v372 + 56))(v229, 0, 1, v367);
        }
        v299 = (void *)(((unint64_t)v229 + v325) & v384);
        v300 = (const void *)(((unint64_t)v230 + v325) & v384);
        if (v231(v300, 1, v367))
        {
          memcpy(v299, v300, v17);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v372 + 16))(v299, v300, v367);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v372 + 56))(v299, 0, 1, v367);
        }
        v303 = (void *)(((unint64_t)v299 + v325) & v384);
        v304 = (const void *)(((unint64_t)v300 + v325) & v384);
        if (v231(v304, 1, v367))
        {
          memcpy(v303, v304, v17);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v372 + 16))(v303, v304, v367);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v372 + 56))(v303, 0, 1, v367);
        }
        v241 = 8;
        goto LABEL_256;
      case 9:
        v179 = ~(unint64_t)v374;
        v180 = *(_OWORD *)(v72 + 16);
        *(_OWORD *)v71 = *(_OWORD *)v72;
        *(_OWORD *)(v71 + 16) = v180;
        v181 = *(_OWORD *)(v72 + 32);
        v182 = *(_OWORD *)(v72 + 48);
        v183 = *(_OWORD *)(v72 + 80);
        *(_OWORD *)(v71 + 64) = *(_OWORD *)(v72 + 64);
        *(_OWORD *)(v71 + 80) = v183;
        *(_OWORD *)(v71 + 32) = v181;
        *(_OWORD *)(v71 + 48) = v182;
        v184 = *(_OWORD *)(v72 + 96);
        v185 = *(_OWORD *)(v72 + 112);
        v186 = *(_OWORD *)(v72 + 144);
        *(_OWORD *)(v71 + 128) = *(_OWORD *)(v72 + 128);
        *(_OWORD *)(v71 + 144) = v186;
        *(_OWORD *)(v71 + 96) = v184;
        *(_OWORD *)(v71 + 112) = v185;
        v380 = v71;
        v187 = (v335 + v71) & v74;
        v188 = (v335 + v72) & v74;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v365 + 16))(v187, v188, v366);
        v189 = (void *)((v15 + v187) & v384);
        v190 = (const void *)((v15 + v188) & v384);
        v191 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v372 + 48);
        if (v191(v190, 1, v367))
        {
          memcpy(v189, v190, v17);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v372 + 16))(v189, v190, v367);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v372 + 56))(v189, 0, 1, v367);
        }
        v256 = v364;
        v257 = (void *)(((unint64_t)v189 + v325) & v384);
        v258 = (const void *)(((unint64_t)v190 + v325) & v384);
        if (v191(v258, 1, v367))
        {
          memcpy(v257, v258, v17);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v372 + 16))(v257, v258, v367);
          v256 = v364;
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v372 + 56))(v257, 0, 1, v367);
        }
        v272 = (void *)(((unint64_t)v257 + v325) & v384);
        v273 = (const void *)(((unint64_t)v258 + v325) & v384);
        if (v191(v273, 1, v367))
        {
          memcpy(v272, v273, v17);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v372 + 16))(v272, v273, v367);
          v256 = v364;
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v372 + 56))(v272, 0, 1, v367);
        }
        v285 = (void *)(((unint64_t)v272 + v325) & v384);
        v286 = (const void *)(((unint64_t)v273 + v325) & v384);
        if (v191(v286, 1, v367))
        {
          memcpy(v285, v286, v17);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v372 + 16))(v285, v286, v367);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v372 + 56))(v285, 0, 1, v367);
        }
        v289 = (void *)(((unint64_t)v285 + v363) & v179);
        v290 = (const void *)(((unint64_t)v286 + v363) & v179);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v362 + 48))(v290, 1, v256))
        {
          memcpy(v289, v290, v361);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v362 + 16))(v289, v290, v256);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v362 + 56))(v289, 0, 1, v256);
        }
        v241 = 9;
LABEL_227:
        v242 = v319;
        v71 = v380;
        goto LABEL_257;
      case 0xA:
        v232 = *(_OWORD *)v72;
        v233 = *(_OWORD *)(v72 + 16);
        v234 = *(_OWORD *)(v72 + 32);
        *(_QWORD *)(v71 + 48) = *(_QWORD *)(v72 + 48);
        *(_OWORD *)(v71 + 16) = v233;
        *(_OWORD *)(v71 + 32) = v234;
        *(_OWORD *)v71 = v232;
        v172 = v71;
        v235 = (v330 + v71) & v74;
        v236 = (v330 + v72) & v74;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v365 + 16))(v235, v236, v366);
        v237 = (void *)((v15 + v235) & v384);
        v238 = (const void *)((v15 + v236) & v384);
        v239 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v372 + 48);
        if (v239(v238, 1, v367))
        {
          memcpy(v237, v238, v17);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v372 + 16))(v237, v238, v367);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v372 + 56))(v237, 0, 1, v367);
        }
        v301 = (void *)(((unint64_t)v237 + v325) & v384);
        v302 = (const void *)(((unint64_t)v238 + v325) & v384);
        if (v239(v302, 1, v367))
        {
          memcpy(v301, v302, v17);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v372 + 16))(v301, v302, v367);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v372 + 56))(v301, 0, 1, v367);
        }
        v305 = (void *)(((unint64_t)v301 + v325) & v384);
        v306 = (const void *)(((unint64_t)v302 + v325) & v384);
        if (v239(v306, 1, v367))
        {
          memcpy(v305, v306, v17);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v372 + 16))(v305, v306, v367);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v372 + 56))(v305, 0, 1, v367);
        }
        v241 = 10;
        goto LABEL_256;
      case 0xB:
        v192 = *(_OWORD *)v72;
        v193 = *(_OWORD *)(v72 + 16);
        v194 = *(_OWORD *)(v72 + 48);
        *(_OWORD *)(v71 + 32) = *(_OWORD *)(v72 + 32);
        *(_OWORD *)(v71 + 48) = v194;
        *(_OWORD *)v71 = v192;
        *(_OWORD *)(v71 + 16) = v193;
        v195 = (v334 + v71) & v74;
        v196 = (v334 + v72) & v74;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v365 + 16))(v195, v196, v366);
        v197 = (void *)((v15 + v195) & v384);
        v198 = (const void *)((v15 + v196) & v384);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v372 + 48))(v198, 1, v367))
        {
          memcpy(v197, v198, v17);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v372 + 16))(v197, v198, v367);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v372 + 56))(v197, 0, 1, v367);
        }
        *((_BYTE *)v197 + v17) = *((_BYTE *)v198 + v17);
        v259 = ((v360
               + ((v363 + ((v325 + (((v350 | v8) + v17) & v384)) & v384)) & ~(unint64_t)v374)) & ~(unint64_t)v374)
             + v361;
        if (v338 > v259)
          v259 = v338;
        if (v349 > v259)
          v259 = v349;
        if (v347 > v259)
          v259 = v347;
        if (v346 > v259)
          v259 = v346;
        if (v348 > v259)
          v259 = v348;
        if (v345 > v259)
          v259 = v345;
        if (v348 > v259)
          v259 = v348;
        if (v344 > v259)
          v259 = v344;
        if (v343 > v259)
          v259 = v343;
        if (v342 > v259)
          v259 = v342;
        if (v340 > v259)
          v259 = v340;
        if (v339 > v259)
          v259 = v339;
        if (v352 > v259)
          v259 = v352;
        if (v351 <= v259)
          v240 = v259;
        else
          v240 = v351;
        v241 = 11;
        v242 = v319;
        goto LABEL_258;
      case 0xC:
        v199 = *(_OWORD *)v72;
        v200 = *(_OWORD *)(v72 + 16);
        v201 = *(_OWORD *)(v72 + 48);
        *(_OWORD *)(v71 + 32) = *(_OWORD *)(v72 + 32);
        *(_OWORD *)(v71 + 48) = v201;
        *(_OWORD *)v71 = v199;
        *(_OWORD *)(v71 + 16) = v200;
        v202 = *(_OWORD *)(v72 + 64);
        v203 = *(_OWORD *)(v72 + 80);
        v204 = *(_OWORD *)(v72 + 112);
        *(_OWORD *)(v71 + 96) = *(_OWORD *)(v72 + 96);
        *(_OWORD *)(v71 + 112) = v204;
        *(_OWORD *)(v71 + 64) = v202;
        *(_OWORD *)(v71 + 80) = v203;
        v172 = v71;
        v205 = (v333 + v71) & v74;
        v206 = (v333 + v72) & v74;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v365 + 16))(v205, v206, v366);
        v207 = (void *)((v15 + v205) & v384);
        v208 = (const void *)((v15 + v206) & v384);
        v209 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v372 + 48);
        if (v209(v208, 1, v367))
        {
          memcpy(v207, v208, v17);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v372 + 16))(v207, v208, v367);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v372 + 56))(v207, 0, 1, v367);
        }
        v260 = (void *)(((unint64_t)v207 + v325) & v384);
        v261 = (const void *)(((unint64_t)v208 + v325) & v384);
        if (v209(v261, 1, v367))
        {
          memcpy(v260, v261, v17);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v372 + 16))(v260, v261, v367);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v372 + 56))(v260, 0, 1, v367);
        }
        v274 = (void *)(((unint64_t)v260 + v325) & v384);
        v275 = (const void *)(((unint64_t)v261 + v325) & v384);
        if (v209(v275, 1, v367))
        {
          memcpy(v274, v275, v17);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v372 + 16))(v274, v275, v367);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v372 + 56))(v274, 0, 1, v367);
        }
        v241 = 12;
        goto LABEL_256;
      case 0xD:
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v357 + 16))(v71, v72, v358);
        v240 = v376;
        v241 = 13;
        v242 = v319;
        goto LABEL_258;
      case 0xE:
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v365 + 16))(v71, v72, v366);
        v172 = v71;
        v210 = (void *)((v15 + v71) & v384);
        v211 = (const void *)((v15 + v72) & v384);
        v212 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v372 + 48);
        if (v212(v211, 1, v367))
        {
          memcpy(v210, v211, v17);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v372 + 16))(v210, v211, v367);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v372 + 56))(v210, 0, 1, v367);
        }
        v262 = (void *)(((unint64_t)v210 + v325) & v384);
        v263 = (const void *)(((unint64_t)v211 + v325) & v384);
        if (v212(v263, 1, v367))
        {
          memcpy(v262, v263, v17);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v372 + 16))(v262, v263, v367);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v372 + 56))(v262, 0, 1, v367);
        }
        v241 = 14;
LABEL_256:
        v242 = v319;
        v71 = v172;
LABEL_257:
        v240 = v376;
LABEL_258:
        *(_BYTE *)(v71 + v240) = v241;
        v307 = (void *)((v242 + v71) & v76);
        v308 = (const void *)((v242 + v72) & v76);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v320 + 48))(v308, 1, v321))
        {
          memcpy(v307, v308, v317);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v320 + 16))(v307, v308, v321);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v320 + 56))(v307, 0, 1, v321);
        }
        v309 = (void *)(((unint64_t)v307 + v322) & v77);
        v310 = (const void *)(((unint64_t)v308 + v322) & v77);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v323 + 48))(v310, 1, v371))
        {
          memcpy(v309, v310, v318);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v323 + 16))(v309, v310, v371);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v323 + 56))(v309, 0, 1, v371);
        }
        *(_QWORD *)(((unint64_t)v309 + v324) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v310 + v324) & 0xFFFFFFFFFFFFF8);
        *((_BYTE *)a1 + v378) = 0;
        swift_bridgeObjectRetain();
        break;
      default:
        if (v376 <= 3)
          v73 = v376;
        else
          v73 = 4;
        __asm { BR              X12 }
        return result;
    }
  }
  return v55;
}

uint64_t sub_23BF6F79C(unsigned __int8 *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unsigned int v45;
  int v46;
  int v47;
  uint64_t result;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int (*v55)(unint64_t, uint64_t, uint64_t);
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unsigned int (*v64)(uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unsigned int (*v73)(uint64_t, uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int (*v83)(uint64_t, uint64_t, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unsigned int (*v92)(unint64_t, uint64_t, uint64_t);
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unsigned int (*v100)(uint64_t, uint64_t, uint64_t);
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int (*v105)(uint64_t, uint64_t, uint64_t);
  unint64_t v106;
  uint64_t v107;
  unsigned int (*v108)(unint64_t, uint64_t, uint64_t);
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  void (*v162)(uint64_t, uint64_t);
  unsigned int (*v163)(uint64_t, uint64_t, uint64_t);
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;

  v167 = a2[5];
  v165 = *(_QWORD *)(v167 - 8);
  v164 = *(_QWORD *)(v165 + 64);
  v132 = a2[3];
  v4 = *(_QWORD *)(v132 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v133 = sub_23BFF82CC();
  v6 = *(_QWORD *)(v133 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v129 = a2[2];
  v8 = *(_QWORD *)(v129 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v112 = sub_23BFF8368();
  v10 = *(_QWORD *)(v112 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v127 = a2[7];
  v12 = *(_QWORD *)(v127 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = v5 | v7 | v9 | v11;
  v120 = v5 + 248;
  v131 = v4;
  v15 = *(_QWORD *)(v4 + 64);
  v16 = v15 + v7;
  v17 = v15 + v7 + 1;
  v134 = v17 + ((v5 + 248) & ~v5);
  v161 = v6;
  v18 = *(_QWORD *)(v6 + 64);
  v121 = *(_DWORD *)(v6 + 84);
  if (v121)
    v19 = *(_QWORD *)(v6 + 64);
  else
    v19 = v18 + 1;
  v20 = v19 + v7;
  v21 = v19 + v9;
  v22 = *(_QWORD *)(v8 + 64);
  v157 = v22 + v9;
  v130 = v8;
  if (*(_DWORD *)(v8 + 84))
    v23 = *(_QWORD *)(v8 + 64);
  else
    v23 = v22 + 1;
  v24 = ((v22 + v9 + ((v19 + v9 + ((v19 + v7 + ((v19 + v7 + (v134 & ~v7)) & ~v7)) & ~v7)) & ~v9)) & ~v9) + v23;
  v122 = *(_QWORD *)(v6 + 64);
  if (v18 > v15)
    v15 = *(_QWORD *)(v6 + 64);
  v110 = v19 + v11;
  v111 = *(_QWORD *)(v112 - 8);
  v139 = *(unsigned __int8 *)(v10 + 80);
  v25 = *(_QWORD *)(v10 + 64);
  if (((v19 + v11 + (v20 & ~v7)) & ~v11) + v25 <= v15)
    v26 = v15;
  else
    v26 = ((v19 + v11 + (v20 & ~v7)) & ~v11) + v25;
  v119 = v5 + 216;
  v128 = v17;
  v123 = v23 + v9;
  v124 = v23 + v13;
  v126 = *(_QWORD *)(v127 - 8);
  v27 = *(_QWORD *)(v12 + 64);
  if (*(_DWORD *)(v12 + 84))
    v28 = *(_QWORD *)(v12 + 64);
  else
    v28 = v27 + 1;
  v29 = v28
      + ((v23
        + v13
        + ((v23 + v9 + ((v21 + ((v20 + ((v20 + ((v17 + ((v5 + 216) & ~v5)) & ~v7)) & ~v7)) & ~v7)) & ~v9)) & ~v9)) & ~v13);
  v30 = ((v21 + ((v20 + ((v7 + 64) & ~v7)) & ~v7)) & ~v9) + v23;
  v31 = v19 + (v16 & ~v7);
  v32 = ((v31 + v7) & ~v7) + v19;
  v33 = ((v7 + 24 + (v31 & 0xFFFFFFFFFFFFFFF8)) & ~v7) + v19;
  v115 = v5 + 24;
  v114 = v5 + 104;
  v118 = v5 + 160;
  v160 = v19 + v9;
  v156 = v23;
  v34 = ((v21 + ((v20 + ((v20 + ((v20 + ((v16 + ((v5 + 160) & ~v5)) & ~v7)) & ~v7)) & ~v7)) & ~v7)) & ~v9) + v23;
  v113 = v5 + 56;
  v117 = v5 + 64;
  v35 = ((v16 + ((v5 + 64) & ~v5)) & ~v7) + v19;
  v153 = v33;
  if (v33 > v24)
    v24 = v33;
  v141 = v26 + 1;
  v125 = v26;
  if (v24 <= v26 + 1)
    v24 = v26 + 1;
  v154 = v29;
  if (v24 <= v29)
    v24 = v29;
  v151 = ((v32 + v7) & ~v7) + v19;
  v152 = v30;
  if (v24 <= v30)
    v24 = v30;
  if (v24 <= ((v32 + v7) & ~v7) + v19)
    v24 = ((v32 + v7) & ~v7) + v19;
  v148 = ((v20 + ((v20 + ((v16 + ((v5 + 104) & ~v5)) & ~v7)) & ~v7)) & ~v7) + v19;
  v149 = ((v20 + ((v16 + ((v5 + 24) & ~v5)) & ~v7)) & ~v7) + v19;
  if (v24 <= v149)
    v24 = ((v20 + ((v16 + ((v5 + 24) & ~v5)) & ~v7)) & ~v7) + v19;
  if (v24 <= ((v20 + ((v20 + ((v16 + ((v5 + 104) & ~v5)) & ~v7)) & ~v7)) & ~v7) + v19)
    v24 = ((v20 + ((v20 + ((v16 + ((v5 + 104) & ~v5)) & ~v7)) & ~v7)) & ~v7) + v19;
  v145 = ((v20 + ((v20 + ((v16 + ((v5 + 56) & ~v5)) & ~v7)) & ~v7)) & ~v7) + v19;
  v146 = v34;
  if (v24 <= v34)
    v24 = v34;
  if (v24 <= ((v20 + ((v20 + ((v16 + ((v5 + 56) & ~v5)) & ~v7)) & ~v7)) & ~v7) + v19)
    v24 = ((v20 + ((v20 + ((v16 + ((v5 + 56) & ~v5)) & ~v7)) & ~v7)) & ~v7) + v19;
  v143 = v35 + 1;
  if (v24 <= v35 + 1)
    v24 = v35 + 1;
  v116 = v5 + 128;
  v158 = v19 + v7;
  v159 = v19;
  v142 = ((v20 + ((v20 + ((v16 + ((v5 + 128) & ~v5)) & ~v7)) & ~v7)) & ~v7) + v19;
  if (v24 <= v142)
    v24 = ((v20 + ((v20 + ((v16 + ((v5 + 128) & ~v5)) & ~v7)) & ~v7)) & ~v7) + v19;
  v135 = v32;
  v136 = v27;
  if (v24 <= v32)
    v24 = v32;
  if (v24 <= v27)
    v36 = v27;
  else
    v36 = v24;
  v150 = a2[4];
  v37 = *(_QWORD *)(v150 - 8);
  v38 = *(_QWORD *)(v37 + 64);
  if (!*(_DWORD *)(v37 + 84))
    ++v38;
  v137 = a2[6];
  v138 = v13;
  v39 = *(_QWORD *)(v137 - 8);
  v40 = v14 | v13 | 7;
  v147 = *(_QWORD *)(v150 - 8);
  v169 = *(unsigned __int8 *)(v37 + 80);
  v41 = *(unsigned __int8 *)(v39 + 80);
  v144 = v38 + v41;
  v42 = (v38 + v41 + ((v169 + ((v40 + v164) & ~v40) + v36 + 1) & ~v169)) & ~v41;
  v155 = v39;
  v43 = *(_QWORD *)(v39 + 64);
  if (!*(_DWORD *)(v39 + 84))
    ++v43;
  v44 = ((v43 + 7 + v42) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (((v164 + 7) & 0xFFFFFFFFFFFFFFF8) + 249 > v44)
    v44 = ((v164 + 7) & 0xFFFFFFFFFFFFFFF8) + 249;
  v45 = a1[v44];
  if (v45 >= 2)
  {
    v46 = v44 <= 3 ? v44 : 4;
    if (v46)
    {
      if (v46 == 4)
      {
        v47 = *(_DWORD *)a1;
        if (v44 < 4)
        {
LABEL_55:
          v45 = (v47 | ((v45 - 2) << (8 * v44))) + 2;
          goto LABEL_58;
        }
      }
      else
      {
        v47 = *a1;
        if (v44 < 4)
          goto LABEL_55;
      }
      v45 = v47 + 2;
    }
  }
LABEL_58:
  result = (*(uint64_t (**)(unsigned __int8 *, uint64_t))(v165 + 8))(a1, v167);
  if (v45 != 1)
  {
    v49 = (unint64_t)&a1[v40 + v164] & ~v40;
    v51 = ~v5;
    v52 = ~v7;
    v53 = ~v9;
    v54 = ~v139;
    v166 = (unint64_t)&a1[v40 + v164] & ~v40;
    v140 = ~v41;
    v168 = v53;
    switch(*(_BYTE *)(v49 + v36))
    {
      case 0:
        v62 = (v120 + v49) & v51;
        (*(void (**)(unint64_t, uint64_t))(v131 + 8))(v62, v132);
        v63 = (v128 + v62) & v52;
        v64 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v161 + 48);
        if (!v64(v63, 1, v133))
          (*(void (**)(uint64_t, uint64_t))(v161 + 8))(v63, v133);
        v61 = v158;
        v65 = (v158 + v63) & v52;
        if (!v64(v65, 1, v133))
          (*(void (**)(uint64_t, uint64_t))(v161 + 8))(v65, v133);
        v66 = (v158 + v65) & v52;
        v59 = v135;
        v57 = v136;
        v60 = v134;
        if (!v64(v66, 1, v133))
          (*(void (**)(uint64_t, uint64_t))(v161 + 8))(v66, v133);
        v67 = (v160 + v66) & v168;
        v162 = *(void (**)(uint64_t, uint64_t))(v130 + 8);
        v162(v67, v129);
        v68 = (v157 + v67) & v168;
        v58 = v137;
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v130 + 48))(v68, 1, v129))
          v162(v68, v129);
        goto LABEL_130;
      case 1:
        v69 = *(unsigned __int8 *)(v49 + v125);
        if (v69 >= 3)
        {
          if (v125 <= 3)
            v70 = v125;
          else
            v70 = 4;
          __asm { BR              X12 }
        }
        v57 = v136;
        v58 = v137;
        v60 = v134;
        v59 = v135;
        v61 = v158;
        if (v69 == 2)
        {
          v108 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v161 + 48);
          if (!v108(v49, 1, v133))
            (*(void (**)(unint64_t, uint64_t))(v161 + 8))(v49, v133);
          v109 = (v49 + v7 + v159) & v52;
          if (!v108(v109, 1, v133))
            (*(void (**)(unint64_t, uint64_t))(v161 + 8))(v109, v133);
          (*(void (**)(unint64_t, uint64_t))(v111 + 8))((v110 + v109) & v54, v112);
          v61 = v158;
        }
        else if (v69 == 1)
        {
          (*(void (**)(unint64_t, uint64_t))(v161 + 8))(v49, v133);
        }
        else
        {
          (*(void (**)(unint64_t, uint64_t))(v131 + 8))(v49, v132);
        }
        goto LABEL_130;
      case 2:
        v71 = (v119 + v49) & v51;
        (*(void (**)(unint64_t, uint64_t))(v131 + 8))(v71, v132);
        v72 = (v128 + v71) & v52;
        v73 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v161 + 48);
        if (!v73(v72, 1, v133))
          (*(void (**)(uint64_t, uint64_t))(v161 + 8))(v72, v133);
        v74 = (v158 + v72) & v52;
        if (!v73(v74, 1, v133))
          (*(void (**)(uint64_t, uint64_t))(v161 + 8))(v74, v133);
        v75 = (v158 + v74) & v52;
        if (!v73(v75, 1, v133))
          (*(void (**)(uint64_t, uint64_t))(v161 + 8))(v75, v133);
        v76 = (v160 + v75) & v53;
        v163 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v130 + 48);
        v57 = v136;
        v58 = v137;
        v77 = v53;
        v60 = v134;
        v59 = v135;
        if (!v163(v76, 1, v129))
          (*(void (**)(uint64_t, uint64_t))(v130 + 8))(v76, v129);
        v78 = (v123 + v76) & v77;
        if (!v163(v78, 1, v129))
          (*(void (**)(uint64_t, uint64_t))(v130 + 8))(v78, v129);
        v79 = (v124 + v78) & ~v138;
        v81 = v126;
        v80 = v127;
        v61 = v158;
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v126 + 48))(v79, 1, v127))
          goto LABEL_99;
        goto LABEL_130;
      case 3:
        v82 = (v7 + 64 + v49) & v52;
        v83 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v161 + 48);
        v84 = v133;
        if (!v83(v82, 1, v133))
          (*(void (**)(uint64_t, uint64_t))(v161 + 8))(v82, v133);
        v61 = v158;
        v85 = (v158 + v82) & v52;
        v57 = v136;
        v58 = v137;
        v60 = v134;
        v59 = v135;
        if (!v83(v85, 1, v133))
          goto LABEL_97;
        goto LABEL_98;
      case 4:
        (*(void (**)(unint64_t, uint64_t))(v131 + 8))(v49, v132);
        v86 = v16 + v49;
        goto LABEL_118;
      case 5:
      case 7:
        (*(void (**)(unint64_t, uint64_t))(v131 + 8))(v49, v132);
        v55 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v161 + 48);
        if (!v55((v16 + v49) & v52, 1, v133))
          (*(void (**)(unint64_t, uint64_t))(v161 + 8))((v16 + v49) & v52, v133);
        v56 = (v7 + 24 + ((((v16 + v49) & v52) + v159) & 0xFFFFFFFFFFFFFFF8)) & v52;
        v57 = v136;
        v58 = v137;
        v60 = v134;
        v59 = v135;
        v61 = v158;
        if (!v55(v56, 1, v133))
          (*(void (**)(unint64_t, uint64_t))(v161 + 8))(v56, v133);
        goto LABEL_130;
      case 6:
        v87 = (v115 + v49) & v51;
        (*(void (**)(unint64_t, uint64_t))(v131 + 8))(v87, v132);
        v88 = v16 + v87;
        goto LABEL_126;
      case 8:
        v89 = v114;
        goto LABEL_117;
      case 9:
        v90 = (v118 + v49) & v51;
        (*(void (**)(unint64_t, uint64_t))(v131 + 8))(v90, v132);
        v91 = (v16 + v90) & v52;
        v92 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v161 + 48);
        v84 = v133;
        if (!v92(v91, 1, v133))
          (*(void (**)(unint64_t, uint64_t))(v161 + 8))((v16 + v90) & v52, v133);
        v61 = v158;
        v93 = (v158 + v91) & v52;
        if (!v92(v93, 1, v133))
          (*(void (**)(uint64_t, uint64_t))(v161 + 8))(v93, v133);
        v94 = (v158 + v93) & v52;
        v57 = v136;
        v58 = v137;
        v60 = v134;
        v59 = v135;
        if (!v92(v94, 1, v133))
          (*(void (**)(uint64_t, uint64_t))(v161 + 8))(v94, v133);
        v85 = (v158 + v94) & v52;
        if (!v92(v85, 1, v133))
LABEL_97:
          (*(void (**)(uint64_t, uint64_t))(v161 + 8))(v85, v84);
LABEL_98:
        v79 = (v160 + v85) & v168;
        v80 = v129;
        v81 = v130;
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v130 + 48))(v79, 1, v129))
LABEL_99:
          (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v79, v80);
        goto LABEL_130;
      case 0xA:
        v89 = v113;
        goto LABEL_117;
      case 0xB:
        v95 = (v117 + v49) & v51;
        (*(void (**)(unint64_t, uint64_t))(v131 + 8))(v95, v132);
        v96 = (v16 + v95) & v52;
        if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v161 + 48))(v96, 1, v133))
          (*(void (**)(unint64_t, uint64_t))(v161 + 8))(v96, v133);
        v57 = v136;
        v58 = v137;
        v60 = v134;
        v59 = v135;
        v61 = v158;
        v97 = v122;
        if (!v121)
          goto LABEL_130;
        goto LABEL_131;
      case 0xC:
        v89 = v116;
LABEL_117:
        v98 = (v89 + v49) & v51;
        (*(void (**)(unint64_t, uint64_t))(v131 + 8))(v98, v132);
        v86 = v16 + v98;
LABEL_118:
        v99 = v86 & v52;
        v100 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v161 + 48);
        v101 = v133;
        if (!v100(v86 & v52, 1, v133))
          (*(void (**)(uint64_t, uint64_t))(v161 + 8))(v99, v133);
        v61 = v158;
        v102 = (v158 + v99) & v52;
        v57 = v136;
        v58 = v137;
        v60 = v134;
        v59 = v135;
        if (!v100(v102, 1, v133))
          (*(void (**)(uint64_t, uint64_t))(v161 + 8))(v102, v133);
        v103 = (v158 + v102) & v52;
        if (!v100(v103, 1, v133))
          goto LABEL_129;
        goto LABEL_130;
      case 0xD:
        (*(void (**)(unint64_t, uint64_t))(v126 + 8))(v49, v127);
        v57 = v136;
        v58 = v137;
        v60 = v134;
        v59 = v135;
        v61 = v158;
        goto LABEL_130;
      case 0xE:
        (*(void (**)(unint64_t, uint64_t))(v131 + 8))(v49, v132);
        v88 = v16 + v49;
LABEL_126:
        v104 = v88 & v52;
        v105 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v161 + 48);
        v101 = v133;
        if (!v105(v88 & v52, 1, v133))
          (*(void (**)(uint64_t, uint64_t))(v161 + 8))(v104, v133);
        v61 = v158;
        v103 = (v158 + v104) & v52;
        v57 = v136;
        v58 = v137;
        v60 = v134;
        v59 = v135;
        if (!v105(v103, 1, v133))
LABEL_129:
          (*(void (**)(uint64_t, uint64_t))(v161 + 8))(v103, v101);
LABEL_130:
        v97 = v159;
LABEL_131:
        v106 = ((v157 + ((v160 + ((v61 + (((v60 | v7) + v97) & v52)) & v52)) & v168)) & v168) + v156;
        if (v141 > v106)
          v106 = v141;
        if (v154 > v106)
          v106 = v154;
        if (v152 > v106)
          v106 = v152;
        if (v151 > v106)
          v106 = v151;
        if (v153 > v106)
          v106 = v153;
        if (v149 > v106)
          v106 = v149;
        if (v153 > v106)
          v106 = v153;
        if (v148 > v106)
          v106 = v148;
        if (v146 > v106)
          v106 = v146;
        if (v145 > v106)
          v106 = v145;
        if (v143 > v106)
          v106 = v143;
        if (v142 > v106)
          v106 = v142;
        if (v57 > v106)
          v106 = v57;
        if (v59 > v106)
          v106 = v59;
        v107 = ((v166 | 1) + v169 + v106) & ~v169;
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v147 + 48))(v107, 1, v150))
          (*(void (**)(uint64_t, uint64_t))(v147 + 8))(v107, v150);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v155 + 48))((v144 + v107) & v140, 1, v58))
          (*(void (**)(uint64_t, uint64_t))(v155 + 8))((v144 + v107) & v140, v58);
        result = swift_bridgeObjectRelease();
        break;
      default:
        if (v36 <= 3)
          v50 = v36;
        else
          v50 = 4;
        __asm { BR              X12 }
        return result;
    }
  }
  return result;
}

uint64_t sub_23BF70704(uint64_t a1, unsigned __int8 *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  size_t v20;
  size_t v21;
  size_t v22;
  uint64_t v23;
  size_t v24;
  unint64_t v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  size_t v30;
  unint64_t v31;
  size_t v32;
  unint64_t v33;
  unint64_t v34;
  size_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unsigned int v47;
  int v48;
  int v49;
  unint64_t v50;
  unsigned int v51;
  unint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  unint64_t v89;
  void *v90;
  const void *v91;
  unsigned int (*v92)(const void *, uint64_t, uint64_t);
  size_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  unsigned int v144;
  uint64_t v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  uint64_t v156;
  unint64_t v157;
  void *v158;
  const void *v159;
  unsigned int (*v160)(const void *, uint64_t, uint64_t);
  size_t v161;
  uint64_t v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  void *v166;
  const void *v167;
  unsigned int (*v168)(const void *, uint64_t, uint64_t);
  uint64_t v169;
  unint64_t v170;
  void *v171;
  const void *v172;
  unsigned int (*v173)(const void *, uint64_t, uint64_t);
  uint64_t v174;
  unint64_t v175;
  void *v176;
  const void *v177;
  unsigned int (*v178)(const void *, uint64_t, uint64_t);
  size_t v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  uint64_t v187;
  unint64_t v188;
  void *v189;
  const void *v190;
  unsigned int (*v191)(const void *, uint64_t, uint64_t);
  __int128 v192;
  __int128 v193;
  __int128 v194;
  uint64_t v195;
  unint64_t v196;
  void *v197;
  const void *v198;
  uint64_t v199;
  size_t v200;
  uint64_t v201;
  uint64_t v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  uint64_t v209;
  unint64_t v210;
  void *v211;
  const void *v212;
  unsigned int (*v213)(const void *, uint64_t, uint64_t);
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  void *v217;
  unint64_t v218;
  uint64_t v219;
  const void *v220;
  unsigned int (*v221)(const void *, uint64_t, uint64_t);
  uint64_t v222;
  unint64_t v223;
  void *v224;
  const void *v225;
  unsigned int (*v226)(const void *, uint64_t, uint64_t);
  uint64_t v227;
  size_t v228;
  __int128 v229;
  uint64_t v230;
  unint64_t v231;
  void *v232;
  const void *v233;
  unsigned int (*v234)(const void *, uint64_t, uint64_t);
  uint64_t v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  uint64_t v241;
  unint64_t v242;
  void *v243;
  const void *v244;
  unsigned int (*v245)(const void *, uint64_t, uint64_t);
  uint64_t v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  uint64_t v250;
  unint64_t v251;
  void *v252;
  const void *v253;
  unsigned int (*v254)(const void *, uint64_t, uint64_t);
  uint64_t v255;
  _BYTE *v256;
  unint64_t v257;
  size_t v258;
  size_t v259;
  uint64_t v260;
  char v261;
  uint64_t v262;
  uint64_t v263;
  void *v264;
  uint64_t v265;
  const void *v266;
  void *v267;
  uint64_t v268;
  const void *v269;
  void *v270;
  const void *v271;
  void *v272;
  uint64_t v273;
  const void *v274;
  unint64_t v275;
  unint64_t v276;
  void *v277;
  const void *v278;
  void *v279;
  uint64_t v280;
  const void *v281;
  size_t v282;
  void *v283;
  uint64_t v284;
  const void *v285;
  void *v286;
  const void *v287;
  void *v288;
  const void *v289;
  void *v290;
  const void *v291;
  void *v292;
  const void *v293;
  void *v294;
  const void *v295;
  void *v296;
  const void *v297;
  void *v298;
  const void *v299;
  unint64_t v300;
  unint64_t v301;
  void (*v302)(unint64_t, unint64_t, uint64_t);
  void *v303;
  const void *v304;
  void *v305;
  const void *v306;
  unsigned int (*v307)(const void *, uint64_t, uint64_t);
  void *v308;
  const void *v309;
  void *v310;
  const void *v311;
  void *v312;
  const void *v313;
  void *v314;
  const void *v315;
  unint64_t v316;
  unint64_t v317;
  void *v318;
  const void *v319;
  void *v320;
  const void *v321;
  void *v322;
  const void *v323;
  void *v324;
  const void *v325;
  void *v326;
  const void *v327;
  void *v328;
  const void *v329;
  void *v330;
  const void *v331;
  void *v332;
  const void *v333;
  uint64_t result;
  unint64_t v335;
  size_t v336;
  char v337;
  uint64_t v338;
  unsigned int (*v339)(unint64_t, uint64_t, uint64_t);
  const void *v340;
  uint64_t v341;
  unint64_t v342;
  void *v343;
  const void *v344;
  size_t v345;
  uint64_t v346;
  uint64_t v347;
  size_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  unint64_t v357;
  size_t v358;
  unint64_t v359;
  unint64_t v360;
  uint64_t v361;
  unint64_t v362;
  unint64_t v363;
  unint64_t v364;
  unint64_t v365;
  unint64_t v366;
  unint64_t v367;
  size_t v368;
  uint64_t v369;
  size_t v370;
  size_t v371;
  size_t v372;
  size_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  size_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  size_t __n;
  size_t v383;
  size_t v384;
  size_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  unint64_t v404;
  unint64_t v405;
  unint64_t v406;
  unint64_t v407;
  unint64_t v408;
  uint64_t v409;
  size_t v410;
  size_t v411;
  size_t v412;
  size_t v413;
  size_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  size_t v419;
  size_t v420;
  unint64_t v421;
  uint64_t v422;
  _BYTE *v423;
  _BYTE *v424;
  _BYTE *v425;
  _BYTE *v426;
  void *v427;
  uint64_t v428;
  uint64_t v429;

  v428 = a3[5];
  v422 = *(_QWORD *)(v428 - 8);
  v5 = *(_QWORD *)(v422 + 64);
  v387 = a3[3];
  v6 = *(_QWORD *)(v387 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v409 = sub_23BFF82CC();
  v8 = *(_QWORD *)(v409 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v381 = a3[2];
  v10 = *(_QWORD *)(v381 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v347 = sub_23BFF8368();
  v12 = *(_QWORD *)(v347 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v376 = a3[7];
  v14 = *(_QWORD *)(v376 - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v361 = v7 + 248;
  v16 = *(_QWORD *)(v6 + 64);
  v17 = v16 + v9;
  v18 = v16 + v9 + 1;
  v369 = v18 + ((v7 + 248) & ~v7);
  v418 = v8;
  v19 = *(_QWORD *)(v8 + 64);
  if (*(_DWORD *)(v8 + 84))
    v20 = *(_QWORD *)(v8 + 64);
  else
    v20 = v19 + 1;
  v21 = v20 + v9;
  v22 = v20 + v11;
  v23 = *(_QWORD *)(v10 + 64);
  v379 = v23 + v11;
  v380 = v10;
  if (*(_DWORD *)(v10 + 84))
    v24 = *(_QWORD *)(v10 + 64);
  else
    v24 = v23 + 1;
  v25 = ((v23 + v11 + ((v20 + v11 + ((v20 + v9 + ((v20 + v9 + (v369 & ~v9)) & ~v9)) & ~v9)) & ~v11)) & ~v11) + v24;
  v377 = *(_QWORD *)(v6 + 64);
  if (v19 <= v16)
    v26 = *(_QWORD *)(v6 + 64);
  else
    v26 = *(_QWORD *)(v8 + 64);
  v345 = v20 + v13;
  v403 = *(unsigned __int8 *)(v12 + 80);
  v346 = *(_QWORD *)(v347 - 8);
  v27 = *(_QWORD *)(v12 + 64);
  if (((v20 + v13 + (v21 & ~v9)) & ~v13) + v27 > v26)
    v26 = ((v20 + v13 + (v21 & ~v9)) & ~v13) + v27;
  v368 = v26 + 1;
  v378 = v26;
  if (v26 + 1 > v25)
    v25 = v26 + 1;
  v356 = v7 + 216;
  v372 = v24 + v11;
  v373 = v24 + v15;
  v28 = (v24
       + v15
       + ((v24 + v11 + ((v22 + ((v21 + ((v21 + ((v18 + ((v7 + 216) & ~v7)) & ~v9)) & ~v9)) & ~v9)) & ~v11)) & ~v11)) & ~v15;
  v375 = *(_QWORD *)(v376 - 8);
  v29 = *(_QWORD *)(v14 + 64);
  if (*(_DWORD *)(v14 + 84))
    v30 = *(_QWORD *)(v14 + 64);
  else
    v30 = v29 + 1;
  v348 = v30;
  v31 = v28 + v30;
  v367 = v31;
  if (v31 > v25)
    v25 = v31;
  v355 = v9 + 64;
  v366 = ((v22 + ((v21 + ((v9 + 64) & ~v9)) & ~v9)) & ~v11) + v24;
  if (v366 > v25)
    v25 = ((v22 + ((v21 + ((v9 + 64) & ~v9)) & ~v9)) & ~v11) + v24;
  v32 = v20 + (v17 & ~v9);
  v33 = ((v32 + v9) & ~v9) + v20;
  v364 = ((v33 + v9) & ~v9) + v20;
  if (v364 > v25)
    v25 = ((v33 + v9) & ~v9) + v20;
  v374 = v9 + 24;
  v34 = (v9 + 24 + (v32 & 0xFFFFFFFFFFFFFFF8)) & ~v9;
  if (v34 + v20 > v25)
    v25 = v34 + v20;
  v350 = v7 + 24;
  v363 = ((v21 + ((v17 + ((v7 + 24) & ~v7)) & ~v9)) & ~v9) + v20;
  if (v363 > v25)
    v25 = ((v21 + ((v17 + ((v7 + 24) & ~v7)) & ~v9)) & ~v9) + v20;
  v365 = v34 + v20;
  if (v34 + v20 > v25)
    v25 = v34 + v20;
  v351 = v7 + 104;
  v362 = ((v21 + ((v21 + ((v17 + ((v7 + 104) & ~v7)) & ~v9)) & ~v9)) & ~v9) + v20;
  if (v362 > v25)
    v25 = ((v21 + ((v21 + ((v17 + ((v7 + 104) & ~v7)) & ~v9)) & ~v9)) & ~v9) + v20;
  v354 = v7 + 160;
  v383 = v20 + v11;
  v398 = v11;
  __n = v24;
  v360 = ((v22 + ((v21 + ((v21 + ((v21 + ((v17 + ((v7 + 160) & ~v7)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v11) + v24;
  if (v360 > v25)
    v25 = ((v22 + ((v21 + ((v21 + ((v21 + ((v17 + ((v7 + 160) & ~v7)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v11) + v24;
  v349 = v7 + 56;
  v359 = ((v21 + ((v21 + ((v17 + ((v7 + 56) & ~v7)) & ~v9)) & ~v9)) & ~v9) + v20;
  if (v359 > v25)
    v25 = ((v21 + ((v21 + ((v17 + ((v7 + 56) & ~v7)) & ~v9)) & ~v9)) & ~v9) + v20;
  v352 = v7 + 64;
  v35 = ((v17 + ((v7 + 64) & ~v7)) & ~v9) + v20;
  v358 = v35 + 1;
  if (v35 + 1 > v25)
    v25 = v35 + 1;
  v353 = v7 + 128;
  v386 = v16 + v9;
  v419 = v20 + v9;
  v420 = v20;
  v357 = ((v21 + ((v21 + ((v17 + ((v7 + 128) & ~v7)) & ~v9)) & ~v9)) & ~v9) + v20;
  if (v357 > v25)
    v25 = ((v21 + ((v21 + ((v17 + ((v7 + 128) & ~v7)) & ~v9)) & ~v9)) & ~v9) + v20;
  v370 = v33;
  v371 = *(_QWORD *)(v14 + 64);
  if (v29 > v25)
    v25 = *(_QWORD *)(v14 + 64);
  if (v33 <= v25)
    v36 = v25;
  else
    v36 = v33;
  v415 = a3[4];
  v37 = *(_QWORD *)(v415 - 8);
  if (*(_DWORD *)(v37 + 84))
    v38 = *(_QWORD *)(v37 + 64);
  else
    v38 = *(_QWORD *)(v37 + 64) + 1;
  v390 = a3[6];
  v391 = *(_QWORD *)(v415 - 8);
  v39 = *(_QWORD *)(v390 - 8);
  v392 = *(unsigned __int8 *)(v14 + 80);
  v40 = v7 | v9 | v11 | v13 | v15 | 7;
  v41 = *(unsigned __int8 *)(v37 + 80);
  v42 = v5;
  v43 = v40 + v5;
  v389 = v36 + v41 + 1;
  v44 = *(unsigned __int8 *)(v39 + 80);
  v384 = v38;
  v416 = v38 + v44;
  v417 = v39;
  if (*(_DWORD *)(v39 + 84))
    v45 = *(_QWORD *)(v39 + 64);
  else
    v45 = *(_QWORD *)(v39 + 64) + 1;
  v393 = v42;
  v385 = v45;
  v388 = v45 + 7;
  if (((v42 + 7) & 0xFFFFFFFFFFFFFFF8) + 249 <= ((v45 + 7 + ((v38 + v44 + ((v389 + (v43 & ~v40)) & ~v41)) & ~v44)) & 0xFFFFFFFFFFFFFFF8)
                                                 + 8)
    v46 = ((v45 + 7 + ((v38 + v44 + ((v389 + (v43 & ~v40)) & ~v41)) & ~v44)) & 0xFFFFFFFFFFFFFFF8) + 8;
  else
    v46 = ((v42 + 7) & 0xFFFFFFFFFFFFFFF8) + 249;
  v47 = a2[v46];
  if (v47 >= 2)
  {
    v48 = v46 <= 3 ? v46 : 4;
    if (v48)
    {
      if (v48 == 4)
      {
        v49 = *(_DWORD *)a2;
        if (v46 >= 4)
        {
LABEL_60:
          v47 = v49 + 2;
          goto LABEL_63;
        }
      }
      else
      {
        v49 = *a2;
        if (v46 >= 4)
          goto LABEL_60;
      }
      v47 = (v49 | ((v47 - 2) << (8 * v46))) + 2;
    }
  }
LABEL_63:
  v421 = v46;
  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v422 + 16))(a1, a2, v428);
  if (v47 == 1)
  {
    v50 = (unint64_t)&a2[v393 + 7] & 0xFFFFFFFFFFFFFFF8;
    v51 = *(unsigned __int8 *)(v50 + 248);
    if (v51 >= 0xB)
      v51 = *(_DWORD *)v50 + 11;
    v52 = (a1 + v393 + 7) & 0xFFFFFFFFFFFFFFF8;
    switch(v51)
    {
      case 0u:
        v53 = *(_OWORD *)v50;
        v54 = *(_OWORD *)(v50 + 16);
        v55 = *(_OWORD *)(v50 + 48);
        *(_OWORD *)(v52 + 32) = *(_OWORD *)(v50 + 32);
        *(_OWORD *)(v52 + 48) = v55;
        *(_OWORD *)v52 = v53;
        *(_OWORD *)(v52 + 16) = v54;
        v56 = *(_OWORD *)(v50 + 64);
        v57 = *(_OWORD *)(v50 + 80);
        v58 = *(_OWORD *)(v50 + 112);
        *(_OWORD *)(v52 + 96) = *(_OWORD *)(v50 + 96);
        *(_OWORD *)(v52 + 112) = v58;
        *(_OWORD *)(v52 + 64) = v56;
        *(_OWORD *)(v52 + 80) = v57;
        v59 = *(_OWORD *)(v50 + 128);
        v60 = *(_OWORD *)(v50 + 144);
        v61 = *(_OWORD *)(v50 + 176);
        *(_OWORD *)(v52 + 160) = *(_OWORD *)(v50 + 160);
        *(_OWORD *)(v52 + 176) = v61;
        *(_OWORD *)(v52 + 128) = v59;
        *(_OWORD *)(v52 + 144) = v60;
        v62 = *(_OWORD *)(v50 + 192);
        v63 = *(_OWORD *)(v50 + 208);
        v64 = *(_OWORD *)(v50 + 224);
        *(_QWORD *)(v52 + 240) = *(_QWORD *)(v50 + 240);
        *(_OWORD *)(v52 + 208) = v63;
        *(_OWORD *)(v52 + 224) = v64;
        *(_OWORD *)(v52 + 192) = v62;
        *(_BYTE *)(v52 + 248) = 0;
        break;
      case 1u:
        v94 = *(_OWORD *)(v50 + 16);
        *(_OWORD *)v52 = *(_OWORD *)v50;
        *(_OWORD *)(v52 + 16) = v94;
        v95 = *(_OWORD *)(v50 + 32);
        v96 = *(_OWORD *)(v50 + 48);
        v97 = *(_OWORD *)(v50 + 80);
        *(_OWORD *)(v52 + 64) = *(_OWORD *)(v50 + 64);
        *(_OWORD *)(v52 + 80) = v97;
        *(_OWORD *)(v52 + 32) = v95;
        *(_OWORD *)(v52 + 48) = v96;
        v98 = *(_OWORD *)(v50 + 96);
        v99 = *(_OWORD *)(v50 + 112);
        v100 = *(_OWORD *)(v50 + 144);
        *(_OWORD *)(v52 + 128) = *(_OWORD *)(v50 + 128);
        *(_OWORD *)(v52 + 144) = v100;
        *(_OWORD *)(v52 + 96) = v98;
        *(_OWORD *)(v52 + 112) = v99;
        v101 = *(_OWORD *)(v50 + 160);
        v102 = *(_OWORD *)(v50 + 176);
        v103 = *(_OWORD *)(v50 + 192);
        *(_QWORD *)(v52 + 208) = *(_QWORD *)(v50 + 208);
        *(_OWORD *)(v52 + 176) = v102;
        *(_OWORD *)(v52 + 192) = v103;
        *(_OWORD *)(v52 + 160) = v101;
        *(_BYTE *)(v52 + 248) = 1;
        break;
      case 2u:
        v104 = *(_OWORD *)v50;
        v105 = *(_OWORD *)(v50 + 16);
        v106 = *(_OWORD *)(v50 + 48);
        *(_OWORD *)(v52 + 32) = *(_OWORD *)(v50 + 32);
        *(_OWORD *)(v52 + 48) = v106;
        *(_OWORD *)v52 = v104;
        *(_OWORD *)(v52 + 16) = v105;
        *(_BYTE *)(v52 + 248) = 2;
        break;
      case 3u:
        *(_OWORD *)v52 = *(_OWORD *)v50;
        *(_BYTE *)(v52 + 248) = 3;
        break;
      case 4u:
        v107 = *(_OWORD *)v50;
        *(_QWORD *)(v52 + 16) = *(_QWORD *)(v50 + 16);
        *(_OWORD *)v52 = v107;
        *(_BYTE *)(v52 + 248) = 4;
        break;
      case 5u:
        *(_OWORD *)v52 = *(_OWORD *)v50;
        *(_BYTE *)(v52 + 248) = 5;
        break;
      case 6u:
        v108 = *(_OWORD *)v50;
        v109 = *(_OWORD *)(v50 + 32);
        *(_OWORD *)(v52 + 16) = *(_OWORD *)(v50 + 16);
        *(_OWORD *)(v52 + 32) = v109;
        *(_OWORD *)v52 = v108;
        v110 = *(_OWORD *)(v50 + 48);
        v111 = *(_OWORD *)(v50 + 64);
        v112 = *(_OWORD *)(v50 + 80);
        *(_QWORD *)(v52 + 96) = *(_QWORD *)(v50 + 96);
        *(_OWORD *)(v52 + 64) = v111;
        *(_OWORD *)(v52 + 80) = v112;
        *(_OWORD *)(v52 + 48) = v110;
        *(_BYTE *)(v52 + 248) = 6;
        break;
      case 7u:
        v113 = *(_OWORD *)(v50 + 16);
        *(_OWORD *)v52 = *(_OWORD *)v50;
        *(_OWORD *)(v52 + 16) = v113;
        v114 = *(_OWORD *)(v50 + 32);
        v115 = *(_OWORD *)(v50 + 48);
        v116 = *(_OWORD *)(v50 + 80);
        *(_OWORD *)(v52 + 64) = *(_OWORD *)(v50 + 64);
        *(_OWORD *)(v52 + 80) = v116;
        *(_OWORD *)(v52 + 32) = v114;
        *(_OWORD *)(v52 + 48) = v115;
        v117 = *(_OWORD *)(v50 + 96);
        v118 = *(_OWORD *)(v50 + 112);
        v119 = *(_OWORD *)(v50 + 144);
        *(_OWORD *)(v52 + 128) = *(_OWORD *)(v50 + 128);
        *(_OWORD *)(v52 + 144) = v119;
        *(_OWORD *)(v52 + 96) = v117;
        *(_OWORD *)(v52 + 112) = v118;
        *(_BYTE *)(v52 + 248) = 7;
        break;
      case 8u:
        v120 = *(_OWORD *)v50;
        v121 = *(_OWORD *)(v50 + 16);
        v122 = *(_OWORD *)(v50 + 32);
        *(_QWORD *)(v52 + 48) = *(_QWORD *)(v50 + 48);
        *(_OWORD *)(v52 + 16) = v121;
        *(_OWORD *)(v52 + 32) = v122;
        *(_OWORD *)v52 = v120;
        *(_BYTE *)(v52 + 248) = 8;
        break;
      case 9u:
        v123 = *(_OWORD *)v50;
        v124 = *(_OWORD *)(v50 + 16);
        v125 = *(_OWORD *)(v50 + 48);
        *(_OWORD *)(v52 + 32) = *(_OWORD *)(v50 + 32);
        *(_OWORD *)(v52 + 48) = v125;
        *(_OWORD *)v52 = v123;
        *(_OWORD *)(v52 + 16) = v124;
        *(_BYTE *)(v52 + 248) = 9;
        break;
      case 0xAu:
        v126 = *(_OWORD *)v50;
        v127 = *(_OWORD *)(v50 + 16);
        v128 = *(_OWORD *)(v50 + 48);
        *(_OWORD *)(v52 + 32) = *(_OWORD *)(v50 + 32);
        *(_OWORD *)(v52 + 48) = v128;
        *(_OWORD *)v52 = v126;
        *(_OWORD *)(v52 + 16) = v127;
        v129 = *(_OWORD *)(v50 + 64);
        v130 = *(_OWORD *)(v50 + 80);
        v131 = *(_OWORD *)(v50 + 112);
        *(_OWORD *)(v52 + 96) = *(_OWORD *)(v50 + 96);
        *(_OWORD *)(v52 + 112) = v131;
        *(_OWORD *)(v52 + 64) = v129;
        *(_OWORD *)(v52 + 80) = v130;
        *(_BYTE *)(v52 + 248) = 10;
        break;
      default:
        v132 = *(_OWORD *)v50;
        v133 = *(_OWORD *)(v50 + 16);
        v134 = *(_OWORD *)(v50 + 48);
        *(_OWORD *)(v52 + 32) = *(_OWORD *)(v50 + 32);
        *(_OWORD *)(v52 + 48) = v134;
        *(_OWORD *)v52 = v132;
        *(_OWORD *)(v52 + 16) = v133;
        v135 = *(_OWORD *)(v50 + 64);
        v136 = *(_OWORD *)(v50 + 80);
        v137 = *(_OWORD *)(v50 + 112);
        *(_OWORD *)(v52 + 96) = *(_OWORD *)(v50 + 96);
        *(_OWORD *)(v52 + 112) = v137;
        *(_OWORD *)(v52 + 64) = v135;
        *(_OWORD *)(v52 + 80) = v136;
        v138 = *(_OWORD *)(v50 + 128);
        v139 = *(_OWORD *)(v50 + 144);
        v140 = *(_OWORD *)(v50 + 176);
        *(_OWORD *)(v52 + 160) = *(_OWORD *)(v50 + 160);
        *(_OWORD *)(v52 + 176) = v140;
        *(_OWORD *)(v52 + 128) = v138;
        *(_OWORD *)(v52 + 144) = v139;
        v141 = *(_OWORD *)(v50 + 192);
        v142 = *(_OWORD *)(v50 + 208);
        v143 = *(_OWORD *)(v50 + 224);
        *(_OWORD *)(v52 + 233) = *(_OWORD *)(v50 + 233);
        *(_OWORD *)(v52 + 208) = v142;
        *(_OWORD *)(v52 + 224) = v143;
        *(_OWORD *)(v52 + 192) = v141;
        break;
    }
    *(_BYTE *)(a1 + v421) = 1;
  }
  else
  {
    v65 = (v43 + a1) & ~v40;
    v66 = (unint64_t)&a2[v43] & ~v40;
    v67 = v36;
    v68 = *(unsigned __int8 *)(v66 + v36);
    v70 = v409;
    v71 = ~v7;
    v72 = ~v9;
    v73 = ~v403;
    v74 = ~v392;
    v75 = ~v44;
    v429 = ~v41;
    switch(v68)
    {
      case 0:
        v394 = ~v44;
        v399 = ~v398;
        v410 = v67;
        v76 = *(_OWORD *)v66;
        v77 = *(_OWORD *)(v66 + 16);
        v78 = *(_OWORD *)(v66 + 48);
        *(_OWORD *)(v65 + 32) = *(_OWORD *)(v66 + 32);
        *(_OWORD *)(v65 + 48) = v78;
        *(_OWORD *)v65 = v76;
        *(_OWORD *)(v65 + 16) = v77;
        v79 = *(_OWORD *)(v66 + 64);
        v80 = *(_OWORD *)(v66 + 80);
        v81 = *(_OWORD *)(v66 + 112);
        *(_OWORD *)(v65 + 96) = *(_OWORD *)(v66 + 96);
        *(_OWORD *)(v65 + 112) = v81;
        *(_OWORD *)(v65 + 64) = v79;
        *(_OWORD *)(v65 + 80) = v80;
        v82 = *(_OWORD *)(v66 + 128);
        v83 = *(_OWORD *)(v66 + 144);
        v84 = *(_OWORD *)(v66 + 176);
        *(_OWORD *)(v65 + 160) = *(_OWORD *)(v66 + 160);
        *(_OWORD *)(v65 + 176) = v84;
        *(_OWORD *)(v65 + 128) = v82;
        *(_OWORD *)(v65 + 144) = v83;
        v85 = *(_OWORD *)(v66 + 192);
        v86 = *(_OWORD *)(v66 + 208);
        v87 = *(_OWORD *)(v66 + 224);
        *(_QWORD *)(v65 + 240) = *(_QWORD *)(v66 + 240);
        *(_OWORD *)(v65 + 208) = v86;
        *(_OWORD *)(v65 + 224) = v87;
        *(_OWORD *)(v65 + 192) = v85;
        v423 = (_BYTE *)v65;
        v88 = (v361 + v65) & v71;
        v404 = v66;
        v89 = (v361 + v66) & v71;
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16))(v88, v89, v387);
        *(_BYTE *)(v88 + v377) = *(_BYTE *)(v89 + v377);
        v90 = (void *)((v9 + 1 + v88 + v377) & v72);
        v91 = (const void *)((v9 + 1 + v89 + v377) & v72);
        v92 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v418 + 48);
        if (v92(v91, 1, v70))
        {
          v93 = v420;
          memcpy(v90, v91, v420);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v418 + 16))(v90, v91, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v418 + 56))(v90, 0, 1, v70);
          v93 = v420;
        }
        v264 = (void *)(((unint64_t)v90 + v419) & v72);
        v265 = v72;
        v266 = (const void *)(((unint64_t)v91 + v419) & v72);
        if (v92(v266, 1, v70))
        {
          memcpy(v264, v266, v93);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v418 + 16))(v264, v266, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v418 + 56))(v264, 0, 1, v70);
        }
        v201 = v388;
        v288 = (void *)(((unint64_t)v264 + v419) & v265);
        v289 = (const void *)(((unint64_t)v266 + v419) & v265);
        if (v92(v289, 1, v70))
        {
          memcpy(v288, v289, v93);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v418 + 16))(v288, v289, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v418 + 56))(v288, 0, 1, v70);
        }
        v202 = v391;
        v199 = v417;
        v300 = ((unint64_t)v288 + v383) & v399;
        v301 = ((unint64_t)v289 + v383) & v399;
        v302 = *(void (**)(unint64_t, unint64_t, uint64_t))(v380 + 16);
        v302(v300, v301, v381);
        v303 = (void *)((v379 + v300) & v399);
        v304 = (const void *)((v379 + v301) & v399);
        v75 = v394;
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v380 + 48))(v304, 1, v381))
        {
          memcpy(v303, v304, __n);
        }
        else
        {
          v302((unint64_t)v303, (unint64_t)v304, v381);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v380 + 56))(v303, 0, 1, v381);
        }
        v261 = 0;
        v263 = v390;
        goto LABEL_224;
      case 1:
        v144 = *(unsigned __int8 *)(v66 + v378);
        if (v144 >= 3)
        {
          if (v378 <= 3)
            v145 = v378;
          else
            v145 = 4;
          __asm { BR              X12 }
        }
        if (v144 == 2)
        {
          v338 = ~v9;
          v413 = v67;
          v427 = (void *)v65;
          v397 = ~v44;
          v339 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v418 + 48);
          v340 = (const void *)v66;
          v341 = v65;
          if (v339(v66, 1, v70))
          {
            memcpy(v427, v340, v420);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v418 + 16))(v427, v340, v70);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v418 + 56))(v427, 0, 1, v70);
          }
          v343 = (void *)((v341 + v9 + v420) & v338);
          v408 = (unint64_t)v340;
          v344 = (const void *)(((unint64_t)v340 + v9 + v420) & v338);
          v201 = v388;
          v199 = v417;
          if (v339((unint64_t)v344, 1, v70))
          {
            memcpy(v343, v344, v420);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v418 + 16))(v343, v344, v70);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v418 + 56))(v343, 0, 1, v70);
          }
          v75 = v397;
          v202 = v391;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v346 + 16))(((unint64_t)v343 + v345) & v73, ((unint64_t)v344 + v345) & v73, v347);
          v337 = 2;
          v262 = v389;
          v263 = v390;
          v218 = v408;
          v259 = v413;
          v256 = v427;
          v260 = v429;
        }
        else
        {
          if (v144 == 1)
          {
            v199 = v417;
            v256 = (_BYTE *)v65;
            v335 = v66;
            v336 = v67;
            (*(void (**)(uint64_t, unint64_t, uint64_t))(v418 + 16))(v65, v66, v409);
            v259 = v336;
            v260 = ~v41;
            v218 = v335;
            v337 = 1;
            v262 = v389;
            v263 = v390;
            v201 = v388;
          }
          else
          {
            v414 = v67;
            v199 = v417;
            v256 = (_BYTE *)v65;
            v342 = v66;
            (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16))(v65, v66, v387);
            v218 = v342;
            v337 = 0;
            v262 = v389;
            v263 = v390;
            v201 = v388;
            v260 = v429;
            v259 = v414;
          }
          v202 = v391;
        }
        v256[v378] = v337;
        v261 = 1;
        goto LABEL_258;
      case 2:
        v395 = ~v44;
        v400 = ~v398;
        v410 = v67;
        v146 = *(_OWORD *)(v66 + 16);
        *(_OWORD *)v65 = *(_OWORD *)v66;
        *(_OWORD *)(v65 + 16) = v146;
        v147 = *(_OWORD *)(v66 + 32);
        v148 = *(_OWORD *)(v66 + 48);
        v149 = *(_OWORD *)(v66 + 80);
        *(_OWORD *)(v65 + 64) = *(_OWORD *)(v66 + 64);
        *(_OWORD *)(v65 + 80) = v149;
        *(_OWORD *)(v65 + 32) = v147;
        *(_OWORD *)(v65 + 48) = v148;
        v150 = *(_OWORD *)(v66 + 96);
        v151 = *(_OWORD *)(v66 + 112);
        v152 = *(_OWORD *)(v66 + 144);
        *(_OWORD *)(v65 + 128) = *(_OWORD *)(v66 + 128);
        *(_OWORD *)(v65 + 144) = v152;
        *(_OWORD *)(v65 + 96) = v150;
        *(_OWORD *)(v65 + 112) = v151;
        v153 = *(_OWORD *)(v66 + 160);
        v154 = *(_OWORD *)(v66 + 176);
        v155 = *(_OWORD *)(v66 + 192);
        *(_QWORD *)(v65 + 208) = *(_QWORD *)(v66 + 208);
        *(_OWORD *)(v65 + 176) = v154;
        *(_OWORD *)(v65 + 192) = v155;
        *(_OWORD *)(v65 + 160) = v153;
        v423 = (_BYTE *)v65;
        v156 = (v356 + v65) & v71;
        v404 = v66;
        v157 = (v356 + v66) & v71;
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16))(v156, v157, v387);
        *(_BYTE *)(v156 + v377) = *(_BYTE *)(v157 + v377);
        v158 = (void *)((v9 + 1 + v156 + v377) & v72);
        v159 = (const void *)((v9 + 1 + v157 + v377) & v72);
        v160 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v418 + 48);
        if (v160(v159, 1, v70))
        {
          v161 = v420;
          memcpy(v158, v159, v420);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v418 + 16))(v158, v159, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v418 + 56))(v158, 0, 1, v70);
          v161 = v420;
        }
        v267 = (void *)(((unint64_t)v158 + v419) & v72);
        v268 = v72;
        v269 = (const void *)(((unint64_t)v159 + v419) & v72);
        if (v160(v269, 1, v70))
        {
          memcpy(v267, v269, v161);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v418 + 16))(v267, v269, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v418 + 56))(v267, 0, 1, v70);
        }
        v201 = v388;
        v290 = (void *)(((unint64_t)v267 + v419) & v268);
        v291 = (const void *)(((unint64_t)v269 + v419) & v268);
        if (v160(v291, 1, v70))
        {
          memcpy(v290, v291, v161);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v418 + 16))(v290, v291, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v418 + 56))(v290, 0, 1, v70);
        }
        v202 = v391;
        v199 = v417;
        v305 = (void *)(((unint64_t)v290 + v383) & v400);
        v306 = (const void *)(((unint64_t)v291 + v383) & v400);
        v307 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v380 + 48);
        if (v307(v306, 1, v381))
        {
          memcpy(v305, v306, __n);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v380 + 16))(v305, v306, v381);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v380 + 56))(v305, 0, 1, v381);
        }
        v310 = (void *)(((unint64_t)v305 + v372) & v400);
        v311 = (const void *)(((unint64_t)v306 + v372) & v400);
        if (v307(v311, 1, v381))
        {
          memcpy(v310, v311, __n);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v380 + 16))(v310, v311, v381);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v380 + 56))(v310, 0, 1, v381);
        }
        v314 = (void *)(((unint64_t)v310 + v373) & v74);
        v315 = (const void *)(((unint64_t)v311 + v373) & v74);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v375 + 48))(v315, 1, v376))
        {
          memcpy(v314, v315, v348);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v375 + 16))(v314, v315, v376);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v375 + 56))(v314, 0, 1, v376);
        }
        v261 = 2;
        v262 = v389;
        v263 = v390;
        v75 = v395;
        goto LABEL_227;
      case 3:
        v162 = ~v398;
        v410 = v67;
        v163 = *(_OWORD *)v66;
        v164 = *(_OWORD *)(v66 + 16);
        v165 = *(_OWORD *)(v66 + 48);
        *(_OWORD *)(v65 + 32) = *(_OWORD *)(v66 + 32);
        *(_OWORD *)(v65 + 48) = v165;
        *(_OWORD *)v65 = v163;
        *(_OWORD *)(v65 + 16) = v164;
        v423 = (_BYTE *)v65;
        v166 = (void *)((v355 + v65) & v72);
        v404 = v66;
        v167 = (const void *)((v355 + v66) & v72);
        v168 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v418 + 48);
        if (v168(v167, 1, v70))
        {
          memcpy(v166, v167, v420);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v418 + 16))(v166, v167, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v418 + 56))(v166, 0, 1, v70);
        }
        v270 = (void *)(((unint64_t)v166 + v419) & v72);
        v271 = (const void *)(((unint64_t)v167 + v419) & v72);
        if (v168(v271, 1, v70))
        {
          memcpy(v270, v271, v420);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v418 + 16))(v270, v271, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v418 + 56))(v270, 0, 1, v70);
        }
        v263 = v390;
        v202 = v391;
        v201 = v388;
        v199 = v417;
        v292 = (void *)(((unint64_t)v270 + v383) & v162);
        v293 = (const void *)(((unint64_t)v271 + v383) & v162);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v380 + 48))(v293, 1, v381))
        {
          memcpy(v292, v293, __n);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v380 + 16))(v292, v293, v381);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v380 + 56))(v292, 0, 1, v381);
        }
        v261 = 3;
        goto LABEL_224;
      case 4:
        v411 = v67;
        v169 = v65;
        v170 = v66;
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16))(v65, v66, v387);
        v424 = (_BYTE *)v169;
        v171 = (void *)((v386 + v169) & v72);
        v405 = v170;
        v172 = (const void *)((v386 + v170) & v72);
        v173 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v418 + 48);
        if (v173(v172, 1, v70))
        {
          memcpy(v171, v172, v420);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v418 + 16))(v171, v172, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v418 + 56))(v171, 0, 1, v70);
        }
        v272 = (void *)(((unint64_t)v171 + v419) & v72);
        v273 = v72;
        v274 = (const void *)(((unint64_t)v172 + v419) & v72);
        v201 = v388;
        if (v173(v274, 1, v70))
        {
          memcpy(v272, v274, v420);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v418 + 16))(v272, v274, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v418 + 56))(v272, 0, 1, v70);
        }
        v199 = v417;
        v294 = (void *)(((unint64_t)v272 + v419) & v273);
        v295 = (const void *)(((unint64_t)v274 + v419) & v273);
        if (v173(v295, 1, v70))
        {
          memcpy(v294, v295, v420);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v418 + 16))(v294, v295, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v418 + 56))(v294, 0, 1, v70);
        }
        v261 = 4;
        goto LABEL_255;
      case 5:
        v412 = v67;
        v222 = v65;
        v223 = v66;
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16))(v65, v66, v387);
        v426 = (_BYTE *)v222;
        v224 = (void *)((v386 + v222) & v72);
        v407 = v223;
        v225 = (const void *)((v386 + v223) & v72);
        v226 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v418 + 48);
        v396 = ~v44;
        v227 = v72;
        if (v226(v225, 1, v70))
        {
          v228 = v420;
          memcpy(v224, v225, v420);
          v201 = v388;
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v418 + 16))(v224, v225, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v418 + 56))(v224, 0, 1, v70);
          v201 = v388;
          v228 = v420;
        }
        *((_BYTE *)v224 + v228) = *((_BYTE *)v225 + v228);
        v316 = ((unint64_t)v224 + v228) & 0xFFFFFFFFFFFFFFF8;
        v317 = ((unint64_t)v225 + v228) & 0xFFFFFFFFFFFFFFF8;
        *(_OWORD *)(v316 + 8) = *(_OWORD *)(v317 + 8);
        v318 = (void *)((v374 + v316) & v227);
        v319 = (const void *)((v374 + v317) & v227);
        v199 = v417;
        if (v226(v319, 1, v70))
        {
          memcpy(v318, v319, v228);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v418 + 16))(v318, v319, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v418 + 56))(v318, 0, 1, v70);
        }
        v261 = 5;
        v262 = v389;
        v263 = v390;
        v218 = v407;
        goto LABEL_244;
      case 6:
        v412 = v67;
        v229 = *(_OWORD *)v66;
        *(_QWORD *)(v65 + 16) = *(_QWORD *)(v66 + 16);
        *(_OWORD *)v65 = v229;
        v426 = (_BYTE *)v65;
        v230 = (v350 + v65) & v71;
        v218 = v66;
        v231 = (v350 + v66) & v71;
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16))(v230, v231, v387);
        v232 = (void *)((v386 + v230) & v72);
        v233 = (const void *)((v386 + v231) & v72);
        v234 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v418 + 48);
        v396 = ~v44;
        v235 = v72;
        if (v234(v233, 1, v70))
        {
          memcpy(v232, v233, v420);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v418 + 16))(v232, v233, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v418 + 56))(v232, 0, 1, v70);
        }
        v201 = v388;
        v320 = (void *)(((unint64_t)v232 + v419) & v235);
        v321 = (const void *)(((unint64_t)v233 + v419) & v235);
        v199 = v417;
        if (v234(v321, 1, v70))
        {
          memcpy(v320, v321, v420);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v418 + 16))(v320, v321, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v418 + 56))(v320, 0, 1, v70);
        }
        v261 = 6;
        v262 = v389;
        v263 = v390;
LABEL_244:
        v256 = v426;
        v260 = v429;
        v259 = v412;
        v202 = v391;
        v75 = v396;
        goto LABEL_258;
      case 7:
        v411 = v67;
        v174 = v65;
        v175 = v66;
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16))(v65, v66, v387);
        v424 = (_BYTE *)v174;
        v176 = (void *)((v386 + v174) & v72);
        v405 = v175;
        v177 = (const void *)((v386 + v175) & v72);
        v178 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v418 + 48);
        if (v178(v177, 1, v70))
        {
          v179 = v420;
          memcpy(v176, v177, v420);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v418 + 16))(v176, v177, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v418 + 56))(v176, 0, 1, v70);
          v179 = v420;
        }
        v199 = v417;
        *((_BYTE *)v176 + v179) = *((_BYTE *)v177 + v179);
        v275 = ((unint64_t)v176 + v179) & 0xFFFFFFFFFFFFFFF8;
        v276 = ((unint64_t)v177 + v179) & 0xFFFFFFFFFFFFFFF8;
        *(_OWORD *)(v275 + 8) = *(_OWORD *)(v276 + 8);
        v277 = (void *)((v374 + v275) & v72);
        v278 = (const void *)((v374 + v276) & v72);
        v201 = v388;
        if (v178(v278, 1, v70))
        {
          memcpy(v277, v278, v179);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v418 + 16))(v277, v278, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v418 + 56))(v277, 0, 1, v70);
        }
        v261 = 7;
        goto LABEL_255;
      case 8:
        v411 = v67;
        v236 = *(_OWORD *)v66;
        v237 = *(_OWORD *)(v66 + 32);
        *(_OWORD *)(v65 + 16) = *(_OWORD *)(v66 + 16);
        *(_OWORD *)(v65 + 32) = v237;
        *(_OWORD *)v65 = v236;
        v238 = *(_OWORD *)(v66 + 48);
        v239 = *(_OWORD *)(v66 + 64);
        v240 = *(_OWORD *)(v66 + 80);
        *(_QWORD *)(v65 + 96) = *(_QWORD *)(v66 + 96);
        *(_OWORD *)(v65 + 64) = v239;
        *(_OWORD *)(v65 + 80) = v240;
        *(_OWORD *)(v65 + 48) = v238;
        v424 = (_BYTE *)v65;
        v241 = (v351 + v65) & v71;
        v405 = v66;
        v242 = (v351 + v66) & v71;
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16))(v241, v242, v387);
        v243 = (void *)((v386 + v241) & v72);
        v244 = (const void *)((v386 + v242) & v72);
        v245 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v418 + 48);
        v246 = v72;
        if (v245(v244, 1, v70))
        {
          memcpy(v243, v244, v420);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v418 + 16))(v243, v244, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v418 + 56))(v243, 0, 1, v70);
        }
        v201 = v388;
        v322 = (void *)(((unint64_t)v243 + v419) & v246);
        v323 = (const void *)(((unint64_t)v244 + v419) & v246);
        if (v245(v323, 1, v70))
        {
          memcpy(v322, v323, v420);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v418 + 16))(v322, v323, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v418 + 56))(v322, 0, 1, v70);
        }
        v326 = (void *)(((unint64_t)v322 + v419) & v246);
        v327 = (const void *)(((unint64_t)v323 + v419) & v246);
        v199 = v417;
        if (v245(v327, 1, v70))
        {
          memcpy(v326, v327, v420);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v418 + 16))(v326, v327, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v418 + 56))(v326, 0, 1, v70);
        }
        v261 = 8;
        goto LABEL_255;
      case 9:
        v401 = ~v398;
        v410 = v67;
        v180 = *(_OWORD *)(v66 + 16);
        *(_OWORD *)v65 = *(_OWORD *)v66;
        *(_OWORD *)(v65 + 16) = v180;
        v181 = *(_OWORD *)(v66 + 32);
        v182 = *(_OWORD *)(v66 + 48);
        v183 = *(_OWORD *)(v66 + 80);
        *(_OWORD *)(v65 + 64) = *(_OWORD *)(v66 + 64);
        *(_OWORD *)(v65 + 80) = v183;
        *(_OWORD *)(v65 + 32) = v181;
        *(_OWORD *)(v65 + 48) = v182;
        v184 = *(_OWORD *)(v66 + 96);
        v185 = *(_OWORD *)(v66 + 112);
        v186 = *(_OWORD *)(v66 + 144);
        *(_OWORD *)(v65 + 128) = *(_OWORD *)(v66 + 128);
        *(_OWORD *)(v65 + 144) = v186;
        *(_OWORD *)(v65 + 96) = v184;
        *(_OWORD *)(v65 + 112) = v185;
        v423 = (_BYTE *)v65;
        v187 = (v354 + v65) & v71;
        v404 = v66;
        v188 = (v354 + v66) & v71;
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16))(v187, v188, v387);
        v189 = (void *)((v386 + v187) & v72);
        v190 = (const void *)((v386 + v188) & v72);
        v191 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v418 + 48);
        if (v191(v190, 1, v70))
        {
          memcpy(v189, v190, v420);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v418 + 16))(v189, v190, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v418 + 56))(v189, 0, 1, v70);
        }
        v279 = (void *)(((unint64_t)v189 + v419) & v72);
        v280 = v72;
        v281 = (const void *)(((unint64_t)v190 + v419) & v72);
        v201 = v388;
        if (v191(v281, 1, v70))
        {
          memcpy(v279, v281, v420);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v418 + 16))(v279, v281, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v418 + 56))(v279, 0, 1, v70);
        }
        v296 = (void *)(((unint64_t)v279 + v419) & v280);
        v297 = (const void *)(((unint64_t)v281 + v419) & v280);
        if (v191(v297, 1, v70))
        {
          memcpy(v296, v297, v420);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v418 + 16))(v296, v297, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v418 + 56))(v296, 0, 1, v70);
        }
        v308 = (void *)(((unint64_t)v296 + v419) & v280);
        v309 = (const void *)(((unint64_t)v297 + v419) & v280);
        if (v191(v309, 1, v70))
        {
          memcpy(v308, v309, v420);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v418 + 16))(v308, v309, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v418 + 56))(v308, 0, 1, v70);
        }
        v263 = v390;
        v202 = v391;
        v199 = v417;
        v312 = (void *)(((unint64_t)v308 + v383) & v401);
        v313 = (const void *)(((unint64_t)v309 + v383) & v401);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v380 + 48))(v313, 1, v381))
        {
          memcpy(v312, v313, __n);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v380 + 16))(v312, v313, v381);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v380 + 56))(v312, 0, 1, v381);
        }
        v261 = 9;
LABEL_224:
        v262 = v389;
LABEL_227:
        v218 = v404;
        v259 = v410;
        v256 = v423;
        v260 = v429;
        goto LABEL_258;
      case 10:
        v411 = v67;
        v247 = *(_OWORD *)v66;
        v248 = *(_OWORD *)(v66 + 16);
        v249 = *(_OWORD *)(v66 + 32);
        *(_QWORD *)(v65 + 48) = *(_QWORD *)(v66 + 48);
        *(_OWORD *)(v65 + 16) = v248;
        *(_OWORD *)(v65 + 32) = v249;
        *(_OWORD *)v65 = v247;
        v424 = (_BYTE *)v65;
        v250 = (v349 + v65) & v71;
        v405 = v66;
        v251 = (v349 + v66) & v71;
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16))(v250, v251, v387);
        v252 = (void *)((v386 + v250) & v72);
        v253 = (const void *)((v386 + v251) & v72);
        v254 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v418 + 48);
        v255 = v72;
        if (v254(v253, 1, v70))
        {
          memcpy(v252, v253, v420);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v418 + 16))(v252, v253, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v418 + 56))(v252, 0, 1, v70);
        }
        v201 = v388;
        v324 = (void *)(((unint64_t)v252 + v419) & v255);
        v325 = (const void *)(((unint64_t)v253 + v419) & v255);
        if (v254(v325, 1, v70))
        {
          memcpy(v324, v325, v420);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v418 + 16))(v324, v325, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v418 + 56))(v324, 0, 1, v70);
        }
        v328 = (void *)(((unint64_t)v324 + v419) & v255);
        v329 = (const void *)(((unint64_t)v325 + v419) & v255);
        v199 = v417;
        if (v254(v329, 1, v70))
        {
          memcpy(v328, v329, v420);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v418 + 16))(v328, v329, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v418 + 56))(v328, 0, 1, v70);
        }
        v261 = 10;
        goto LABEL_255;
      case 11:
        v402 = ~v398;
        v192 = *(_OWORD *)v66;
        v193 = *(_OWORD *)(v66 + 16);
        v194 = *(_OWORD *)(v66 + 48);
        *(_OWORD *)(v65 + 32) = *(_OWORD *)(v66 + 32);
        *(_OWORD *)(v65 + 48) = v194;
        *(_OWORD *)v65 = v192;
        *(_OWORD *)(v65 + 16) = v193;
        v425 = (_BYTE *)v65;
        v195 = (v352 + v65) & v71;
        v406 = v66;
        v196 = (v352 + v66) & v71;
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16))(v195, v196, v387);
        v197 = (void *)((v386 + v195) & v72);
        v198 = (const void *)((v386 + v196) & ~v9);
        v199 = v417;
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v418 + 48))(v198, 1, v409))
        {
          v200 = v420;
          memcpy(v197, v198, v420);
          v201 = v388;
          v202 = v391;
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v418 + 16))(v197, v198, v409);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v418 + 56))(v197, 0, 1, v409);
          v201 = v388;
          v202 = v391;
          v200 = v420;
        }
        *((_BYTE *)v197 + v200) = *((_BYTE *)v198 + v200);
        v282 = ((v379 + ((v383 + ((v419 + (((v369 | v9) + v200) & ~v9)) & ~v9)) & v402)) & v402) + __n;
        if (v368 > v282)
          v282 = v368;
        if (v367 > v282)
          v282 = v367;
        if (v366 > v282)
          v282 = v366;
        if (v364 > v282)
          v282 = v364;
        if (v365 > v282)
          v282 = v365;
        if (v363 > v282)
          v282 = v363;
        if (v365 > v282)
          v282 = v365;
        if (v362 > v282)
          v282 = v362;
        if (v360 > v282)
          v282 = v360;
        if (v359 > v282)
          v282 = v359;
        if (v358 > v282)
          v282 = v358;
        if (v357 > v282)
          v282 = v357;
        if (v371 > v282)
          v282 = v371;
        if (v370 <= v282)
          v259 = v282;
        else
          v259 = v370;
        v261 = 11;
        v262 = v389;
        v263 = v390;
        v218 = v406;
        v256 = v425;
        v260 = v429;
        goto LABEL_258;
      case 12:
        v411 = v67;
        v203 = *(_OWORD *)v66;
        v204 = *(_OWORD *)(v66 + 16);
        v205 = *(_OWORD *)(v66 + 48);
        *(_OWORD *)(v65 + 32) = *(_OWORD *)(v66 + 32);
        *(_OWORD *)(v65 + 48) = v205;
        *(_OWORD *)v65 = v203;
        *(_OWORD *)(v65 + 16) = v204;
        v206 = *(_OWORD *)(v66 + 64);
        v207 = *(_OWORD *)(v66 + 80);
        v208 = *(_OWORD *)(v66 + 112);
        *(_OWORD *)(v65 + 96) = *(_OWORD *)(v66 + 96);
        *(_OWORD *)(v65 + 112) = v208;
        *(_OWORD *)(v65 + 64) = v206;
        *(_OWORD *)(v65 + 80) = v207;
        v424 = (_BYTE *)v65;
        v209 = (v353 + v65) & v71;
        v405 = v66;
        v210 = (v353 + v66) & v71;
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16))(v209, v210, v387);
        v211 = (void *)((v386 + v209) & v72);
        v212 = (const void *)((v386 + v210) & v72);
        v213 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v418 + 48);
        if (v213(v212, 1, v70))
        {
          memcpy(v211, v212, v420);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v418 + 16))(v211, v212, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v418 + 56))(v211, 0, 1, v70);
        }
        v283 = (void *)(((unint64_t)v211 + v419) & v72);
        v284 = v72;
        v285 = (const void *)(((unint64_t)v212 + v419) & v72);
        v201 = v388;
        if (v213(v285, 1, v70))
        {
          memcpy(v283, v285, v420);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v418 + 16))(v283, v285, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v418 + 56))(v283, 0, 1, v70);
        }
        v199 = v417;
        v298 = (void *)(((unint64_t)v283 + v419) & v284);
        v299 = (const void *)(((unint64_t)v285 + v419) & v284);
        if (v213(v299, 1, v70))
        {
          memcpy(v298, v299, v420);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v418 + 16))(v298, v299, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v418 + 56))(v298, 0, 1, v70);
        }
        v261 = 12;
LABEL_255:
        v262 = v389;
        v263 = v390;
        v218 = v405;
        goto LABEL_256;
      case 13:
        v199 = v417;
        v256 = (_BYTE *)v65;
        v257 = v66;
        v258 = v67;
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v375 + 16))(v65, v66, v376);
        v259 = v258;
        v260 = ~v41;
        v218 = v257;
        v261 = 13;
        v262 = v389;
        v263 = v390;
        v201 = v388;
        goto LABEL_257;
      case 14:
        v411 = v67;
        v214 = ~v9;
        v199 = v417;
        v215 = v65;
        v216 = v66;
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16))(v65, v66, v387);
        v424 = (_BYTE *)v215;
        v217 = (void *)((v386 + v215) & v214);
        v218 = v216;
        v219 = v214;
        v220 = (const void *)((v386 + v216) & v214);
        v221 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v418 + 48);
        if (v221(v220, 1, v70))
        {
          memcpy(v217, v220, v420);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v418 + 16))(v217, v220, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v418 + 56))(v217, 0, 1, v70);
        }
        v286 = (void *)(((unint64_t)v217 + v419) & v219);
        v287 = (const void *)(((unint64_t)v220 + v419) & v219);
        v201 = v388;
        if (v221(v287, 1, v70))
        {
          memcpy(v286, v287, v420);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v418 + 16))(v286, v287, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v418 + 56))(v286, 0, 1, v70);
        }
        v261 = 14;
        v262 = v389;
        v263 = v390;
LABEL_256:
        v256 = v424;
        v260 = v429;
        v259 = v411;
LABEL_257:
        v202 = v391;
LABEL_258:
        v256[v259] = v261;
        v330 = (void *)((unint64_t)&v256[v262] & v260);
        v331 = (const void *)((v262 + v218) & v260);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v202 + 48))(v331, 1, v415))
        {
          memcpy(v330, v331, v384);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v202 + 16))(v330, v331, v415);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v202 + 56))(v330, 0, 1, v415);
        }
        v332 = (void *)(((unint64_t)v330 + v416) & v75);
        v333 = (const void *)(((unint64_t)v331 + v416) & v75);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v199 + 48))(v333, 1, v263))
        {
          memcpy(v332, v333, v385);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v199 + 16))(v332, v333, v263);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v199 + 56))(v332, 0, 1, v263);
        }
        *(_QWORD *)(((unint64_t)v332 + v201) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v333 + v201) & 0xFFFFFFFFFFFFF8);
        *(_BYTE *)(a1 + v421) = 0;
        swift_bridgeObjectRetain();
        break;
      default:
        if (v67 <= 3)
          v69 = v67;
        else
          v69 = 4;
        __asm { BR              X12 }
        return result;
    }
  }
  return a1;
}

unsigned __int8 *sub_23BF72A8C(unsigned __int8 *a1, unsigned __int8 *a2, _QWORD *a3)
{
  unsigned __int8 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  size_t v21;
  size_t v22;
  uint64_t v23;
  size_t v24;
  uint64_t v25;
  size_t v26;
  unint64_t v27;
  size_t v28;
  uint64_t v29;
  unint64_t v30;
  size_t v31;
  size_t v32;
  unint64_t v33;
  unint64_t v34;
  size_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  size_t v45;
  size_t v46;
  unint64_t v47;
  unsigned int v48;
  int v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unsigned int (*v57)(unint64_t, uint64_t, uint64_t);
  size_t v58;
  uint64_t v59;
  unsigned int (*v60)(uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  size_t v63;
  void (*v64)(size_t, uint64_t);
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int (*v69)(uint64_t, uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  size_t v72;
  unsigned int (*v73)(size_t, uint64_t, uint64_t);
  size_t v74;
  size_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unsigned int (*v79)(unint64_t, uint64_t, uint64_t);
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unsigned int (*v85)(unint64_t, uint64_t, uint64_t);
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unsigned int (*v92)(uint64_t, uint64_t, uint64_t);
  uint64_t v93;
  size_t v94;
  uint64_t v95;
  void (*v96)(unint64_t, uint64_t);
  unint64_t v97;
  size_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  size_t v102;
  int v103;
  int v104;
  unint64_t v105;
  unsigned int v106;
  unint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  _OWORD *v120;
  __int128 *v121;
  uint64_t v122;
  uint64_t v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  unint64_t v136;
  unint64_t v137;
  void *v138;
  const void *v139;
  unsigned int (*v140)(const void *, uint64_t, uint64_t);
  size_t v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  size_t v192;
  unsigned int v193;
  uint64_t v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  unint64_t v205;
  unint64_t v206;
  void *v207;
  const void *v208;
  unsigned int (*v209)(const void *, uint64_t, uint64_t);
  size_t v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  void *v214;
  const void *v215;
  unsigned int (*v216)(const void *, uint64_t, uint64_t);
  size_t v217;
  void *v218;
  const void *v219;
  unsigned int (*v220)(const void *, uint64_t, uint64_t);
  size_t v221;
  _OWORD *v222;
  void *v223;
  const void *v224;
  unsigned int (*v225)(const void *, uint64_t, uint64_t);
  size_t v226;
  __int128 v227;
  unint64_t v228;
  void *v229;
  const void *v230;
  unsigned int (*v231)(const void *, uint64_t, uint64_t);
  size_t v232;
  void *v233;
  const void *v234;
  unsigned int (*v235)(const void *, uint64_t, uint64_t);
  size_t v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  unint64_t v242;
  void *v243;
  const void *v244;
  unsigned int (*v245)(const void *, uint64_t, uint64_t);
  size_t v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  void *v254;
  const void *v255;
  unsigned int (*v256)(const void *, uint64_t, uint64_t);
  size_t v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  unint64_t v261;
  void *v262;
  const void *v263;
  unsigned int (*v264)(const void *, uint64_t, uint64_t);
  size_t v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  void *v269;
  const void *v270;
  size_t v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  unint64_t v278;
  void *v279;
  const void *v280;
  unsigned int (*v281)(const void *, uint64_t, uint64_t);
  size_t v282;
  char v283;
  uint64_t v284;
  void *v285;
  const void *v286;
  unsigned int (*v287)(const void *, uint64_t, uint64_t);
  size_t v288;
  void *v289;
  const void *v290;
  void *v291;
  const void *v292;
  void *v293;
  const void *v294;
  void *v295;
  const void *v296;
  unint64_t v297;
  unint64_t v298;
  void *v299;
  const void *v300;
  void *v301;
  const void *v302;
  unint64_t v303;
  unint64_t v304;
  void *v305;
  const void *v306;
  void *v307;
  const void *v308;
  void *v309;
  const void *v310;
  void *v311;
  const void *v312;
  size_t v313;
  void *v314;
  const void *v315;
  void *v316;
  const void *v317;
  void *v318;
  const void *v319;
  void *v320;
  const void *v321;
  void *v322;
  const void *v323;
  void *v324;
  const void *v325;
  void *v326;
  const void *v327;
  void *v328;
  const void *v329;
  void *v330;
  const void *v331;
  void *v332;
  const void *v333;
  unint64_t v334;
  unint64_t v335;
  void (*v336)(unint64_t, unint64_t, uint64_t);
  void *v337;
  const void *v338;
  void *v339;
  const void *v340;
  unsigned int (*v341)(const void *, uint64_t, uint64_t);
  void *v342;
  const void *v343;
  void *v344;
  const void *v345;
  void *v346;
  const void *v347;
  void *v348;
  const void *v349;
  void *v350;
  const void *v351;
  void *v352;
  const void *v353;
  unsigned __int8 *result;
  unsigned int (*v355)(unint64_t, uint64_t, uint64_t);
  size_t v356;
  char v357;
  unsigned int (*v358)(__int128 *, uint64_t, uint64_t);
  void *v359;
  void *v360;
  size_t __n;
  size_t __na;
  size_t __nb;
  size_t __nc;
  size_t __nd;
  unint64_t v366;
  size_t v367;
  uint64_t v368;
  size_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  size_t v381;
  uint64_t v382;
  size_t v383;
  size_t v384;
  size_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  size_t v389;
  size_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  unint64_t v397;
  size_t v398;
  unint64_t v399;
  unint64_t v400;
  unint64_t v401;
  unint64_t v402;
  unint64_t v403;
  unint64_t v404;
  unint64_t v405;
  unint64_t v406;
  size_t v407;
  uint64_t v408;
  size_t v409;
  unint64_t v410;
  uint64_t v411;
  uint64_t v412;
  size_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  size_t v425;
  size_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  unint64_t v431;
  uint64_t v432;
  uint64_t v433;
  _OWORD *v434;
  uint64_t v435;
  unint64_t v436;

  v3 = a1;
  if (a1 != a2)
  {
    v433 = a3[5];
    v432 = *(_QWORD *)(v433 - 8);
    v5 = *(_QWORD *)(v432 + 64);
    v415 = a3[3];
    v6 = *(_QWORD *)(v415 - 8);
    v7 = *(unsigned __int8 *)(v6 + 80);
    v427 = sub_23BFF82CC();
    v8 = *(_QWORD *)(v427 - 8);
    v9 = *(unsigned __int8 *)(v8 + 80);
    v392 = a3[2];
    v10 = *(_QWORD *)(v392 - 8);
    v11 = v3;
    v12 = *(unsigned __int8 *)(v10 + 80);
    v371 = sub_23BFF8368();
    v13 = *(_QWORD *)(v371 - 8);
    v14 = *(unsigned __int8 *)(v13 + 80);
    v388 = a3[7];
    v15 = *(_QWORD *)(v388 - 8);
    v16 = *(unsigned __int8 *)(v15 + 80);
    v380 = v7 + 248;
    v414 = v6;
    v17 = *(_QWORD *)(v6 + 64);
    v18 = v17 + v9;
    v19 = v17 + v9 + 1;
    v408 = v19 + ((v7 + 248) & ~v7);
    v20 = *(_DWORD *)(v8 + 84);
    v428 = v8;
    v21 = *(_QWORD *)(v8 + 64);
    if (v20)
      v22 = v21;
    else
      v22 = v21 + 1;
    v23 = v22 + v9;
    v24 = v22 + v12;
    v25 = *(_QWORD *)(v10 + 64);
    v411 = v25 + v12;
    v391 = v10;
    if (*(_DWORD *)(v10 + 84))
      v26 = *(_QWORD *)(v10 + 64);
    else
      v26 = v25 + 1;
    v27 = ((v25 + v12 + ((v22 + v12 + ((v22 + v9 + ((v22 + v9 + (v408 & ~v9)) & ~v9)) & ~v9)) & ~v12)) & ~v12) + v26;
    v381 = v17;
    if (v21 <= v17)
      v28 = v17;
    else
      v28 = v21;
    v369 = v22 + v14;
    v370 = *(_QWORD *)(v371 - 8);
    v29 = *(_QWORD *)(v13 + 64);
    if (((v22 + v14 + (v23 & ~v9)) & ~v14) + v29 > v28)
      v28 = ((v22 + v14 + (v23 & ~v9)) & ~v14) + v29;
    v407 = v28 + 1;
    v385 = v28;
    if (v28 + 1 > v27)
      v27 = v28 + 1;
    v379 = v7 + 216;
    v383 = v26 + v12;
    v384 = v26 + v16;
    v387 = *(_QWORD *)(v388 - 8);
    v30 = *(_QWORD *)(v15 + 64);
    if (*(_DWORD *)(v15 + 84))
      v31 = *(_QWORD *)(v15 + 64);
    else
      v31 = v30 + 1;
    v367 = v31;
    v406 = ((v26
           + v16
           + ((v26 + v12 + ((v24 + ((v23 + ((v23 + ((v19 + ((v7 + 216) & ~v7)) & ~v9)) & ~v9)) & ~v9)) & ~v12)) & ~v12)) & ~v16)
         + v31;
    if (v406 > v27)
      v27 = ((v26
            + v16
            + ((v26 + v12 + ((v24 + ((v23 + ((v23 + ((v19 + ((v7 + 216) & ~v7)) & ~v9)) & ~v9)) & ~v9)) & ~v12)) & ~v12)) & ~v16)
          + v31;
    v378 = v9 + 64;
    v405 = ((v24 + ((v23 + ((v9 + 64) & ~v9)) & ~v9)) & ~v12) + v26;
    if (v405 > v27)
      v27 = ((v24 + ((v23 + ((v9 + 64) & ~v9)) & ~v9)) & ~v12) + v26;
    v32 = v22 + (v18 & ~v9);
    v33 = ((v32 + v9) & ~v9) + v22;
    v403 = ((v33 + v9) & ~v9) + v22;
    if (v403 > v27)
      v27 = ((v33 + v9) & ~v9) + v22;
    v386 = v9 + 24;
    v34 = (v9 + 24 + (v32 & 0xFFFFFFFFFFFFFFF8)) & ~v9;
    if (v34 + v22 > v27)
      v27 = v34 + v22;
    v373 = v7 + 24;
    v402 = ((v23 + ((v18 + ((v7 + 24) & ~v7)) & ~v9)) & ~v9) + v22;
    if (v402 > v27)
      v27 = ((v23 + ((v18 + ((v7 + 24) & ~v7)) & ~v9)) & ~v9) + v22;
    v404 = v34 + v22;
    if (v34 + v22 > v27)
      v27 = v34 + v22;
    v374 = v7 + 104;
    v401 = ((v23 + ((v23 + ((v18 + ((v7 + 104) & ~v7)) & ~v9)) & ~v9)) & ~v9) + v22;
    if (v401 > v27)
      v27 = ((v23 + ((v23 + ((v18 + ((v7 + 104) & ~v7)) & ~v9)) & ~v9)) & ~v9) + v22;
    v377 = v7 + 160;
    v413 = v22 + v12;
    v400 = ((v24 + ((v23 + ((v23 + ((v23 + ((v18 + ((v7 + 160) & ~v7)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v12) + v26;
    if (v400 > v27)
      v27 = ((v24 + ((v23 + ((v23 + ((v23 + ((v18 + ((v7 + 160) & ~v7)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v12) + v26;
    v372 = v7 + 56;
    v399 = ((v23 + ((v23 + ((v18 + ((v7 + 56) & ~v7)) & ~v9)) & ~v9)) & ~v9) + v22;
    if (v399 > v27)
      v27 = ((v23 + ((v23 + ((v18 + ((v7 + 56) & ~v7)) & ~v9)) & ~v9)) & ~v9) + v22;
    v375 = v7 + 64;
    v35 = ((v18 + ((v7 + 64) & ~v7)) & ~v9) + v22;
    v398 = v35 + 1;
    if (v35 + 1 > v27)
      v27 = v35 + 1;
    v376 = v7 + 128;
    v412 = v17 + v9;
    v426 = v22;
    v397 = ((v23 + ((v23 + ((v18 + ((v7 + 128) & ~v7)) & ~v9)) & ~v9)) & ~v9) + v22;
    if (v397 > v27)
      v27 = ((v23 + ((v23 + ((v18 + ((v7 + 128) & ~v7)) & ~v9)) & ~v9)) & ~v9) + v22;
    v409 = v33;
    v410 = v30;
    if (v30 > v27)
      v27 = v30;
    if (v33 <= v27)
      v36 = v27;
    else
      v36 = v33;
    v422 = a3[4];
    v37 = *(_QWORD *)(v422 - 8);
    if (*(_DWORD *)(v37 + 84))
      v38 = *(_QWORD *)(v37 + 64);
    else
      v38 = *(_QWORD *)(v37 + 64) + 1;
    v430 = a3[6];
    v431 = v36;
    v39 = *(_QWORD *)(v430 - 8);
    v40 = *(_DWORD *)(v39 + 84) == 0;
    v41 = v7 | v9 | v12 | v14 | v16 | 7;
    v421 = *(_QWORD *)(v422 - 8);
    v42 = *(unsigned __int8 *)(v37 + 80);
    v417 = v41 + v5;
    v393 = v36 + v42 + 1;
    v43 = *(unsigned __int8 *)(v39 + 80);
    v389 = v38;
    v423 = v38 + v43;
    v424 = v39;
    v44 = (v38 + v43 + ((v393 + ((v41 + v5) & ~v41)) & ~v42)) & ~v43;
    v45 = *(_QWORD *)(v39 + 64);
    if (v40)
      v46 = v45 + 1;
    else
      v46 = v45;
    v395 = v5;
    v390 = v46;
    v425 = v46 + 7;
    v47 = ((v46 + 7 + v44) & 0xFFFFFFFFFFFFFFF8) + 8;
    if (((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 249 > v47)
      v47 = ((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 249;
    v436 = v47;
    v48 = v11[v47];
    if (v48 >= 2)
    {
      v49 = v47 <= 3 ? v47 : 4;
      if (v49)
      {
        if (v49 == 4)
          v50 = *(_DWORD *)v11;
        else
          v50 = *v11;
        if (v47 < 4)
          v48 = (v50 | ((v48 - 2) << (8 * v47))) + 2;
        else
          v48 = v50 + 2;
      }
    }
    v429 = v23;
    v51 = ~v41;
    v396 = ~v7;
    v435 = ~v9;
    v416 = ~v12;
    v368 = ~v14;
    v382 = ~v16;
    v394 = v42;
    v419 = ~v42;
    v420 = ~v43;
    v3 = v11;
    (*(void (**)(unsigned __int8 *, uint64_t))(v432 + 8))(v11, v433);
    if (v48 != 1)
    {
      v52 = (unint64_t)&v11[v417] & v51;
      switch(*(_BYTE *)(v52 + v431))
      {
        case 0:
          (*(void (**)(unint64_t, uint64_t))(v414 + 8))((v380 + v52) & v396, v415);
          v59 = (v19 + ((v380 + v52) & v396)) & v435;
          v60 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v428 + 48);
          if (!v60(v59, 1, v427))
            (*(void (**)(uint64_t, uint64_t))(v428 + 8))(v59, v427);
          v61 = (v429 + v59) & v435;
          if (!v60(v61, 1, v427))
            (*(void (**)(uint64_t, uint64_t))(v428 + 8))(v61, v427);
          v62 = (v429 + v61) & v435;
          if (!v60(v62, 1, v427))
            (*(void (**)(uint64_t, uint64_t))(v428 + 8))(v62, v427);
          v63 = (v413 + v62) & v416;
          v64 = *(void (**)(size_t, uint64_t))(v391 + 8);
          v64(v63, v392);
          v65 = (v411 + v63) & v416;
          v52 = (unint64_t)&v3[v417] & v51;
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v391 + 48))(v65, 1, v392))
            v64(v65, v392);
          goto LABEL_140;
        case 1:
          v66 = *(unsigned __int8 *)(v52 + v385);
          if (v66 >= 3)
          {
            if (v385 <= 3)
              v67 = v385;
            else
              v67 = 4;
            __asm { BR              X12 }
          }
          if (v66 == 2)
          {
            v355 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v428 + 48);
            if (!v355((unint64_t)&v3[v417] & v51, 1, v427))
              (*(void (**)(unint64_t, uint64_t))(v428 + 8))(v52, v427);
            v356 = (v52 + v9 + v426) & v435;
            if (!v355(v356, 1, v427))
              (*(void (**)(size_t, uint64_t))(v428 + 8))(v356, v427);
            (*(void (**)(size_t, uint64_t))(v370 + 8))((v369 + v356) & v368, v371);
          }
          else if (v66 == 1)
          {
            v96 = *(void (**)(unint64_t, uint64_t))(v428 + 8);
            v97 = (unint64_t)&v3[v417] & v51;
LABEL_139:
            v96(v97, v427);
          }
          else
          {
            (*(void (**)(unint64_t, uint64_t))(v414 + 8))((unint64_t)&v3[v417] & v51, v415);
          }
LABEL_140:
          v21 = v426;
LABEL_141:
          v98 = ((v411 + ((v413 + ((v429 + (((v408 | v9) + v21) & v435)) & v435)) & v416)) & v416) + v26;
          if (v407 > v98)
            v98 = v407;
          if (v406 > v98)
            v98 = v406;
          if (v405 > v98)
            v98 = v405;
          if (v403 > v98)
            v98 = v403;
          if (v404 > v98)
            v98 = v404;
          if (v402 > v98)
            v98 = v402;
          if (v404 > v98)
            v98 = v404;
          if (v401 > v98)
            v98 = v401;
          if (v400 > v98)
            v98 = v400;
          if (v399 > v98)
            v98 = v399;
          if (v398 > v98)
            v98 = v398;
          if (v397 > v98)
            v98 = v397;
          if (v410 > v98)
            v98 = v410;
          if (v409 > v98)
            v98 = v409;
          v99 = ((v52 | 1) + v394 + v98) & v419;
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v421 + 48))(v99, 1, v422))
            (*(void (**)(uint64_t, uint64_t))(v421 + 8))(v99, v422);
          v100 = (v423 + v99) & v420;
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v424 + 48))(v100, 1, v430))
            (*(void (**)(uint64_t, uint64_t))(v424 + 8))(v100, v430);
          swift_bridgeObjectRelease();
          break;
        case 2:
          (*(void (**)(unint64_t, uint64_t))(v414 + 8))((v379 + v52) & v396, v415);
          v68 = (v19 + ((v379 + v52) & v396)) & v435;
          v69 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v428 + 48);
          if (!v69(v68, 1, v427))
            (*(void (**)(uint64_t, uint64_t))(v428 + 8))(v68, v427);
          v70 = (v429 + v68) & v435;
          if (!v69(v70, 1, v427))
            (*(void (**)(uint64_t, uint64_t))(v428 + 8))(v70, v427);
          v71 = (v429 + v70) & v435;
          if (!v69(v71, 1, v427))
            (*(void (**)(uint64_t, uint64_t))(v428 + 8))(v71, v427);
          v72 = (v413 + v71) & v416;
          v73 = *(unsigned int (**)(size_t, uint64_t, uint64_t))(v391 + 48);
          v52 = (unint64_t)&v3[v417] & v51;
          if (!v73(v72, 1, v392))
            (*(void (**)(size_t, uint64_t))(v391 + 8))(v72, v392);
          v74 = (v383 + v72) & v416;
          if (!v73(v74, 1, v392))
            (*(void (**)(size_t, uint64_t))(v391 + 8))(v74, v392);
          v75 = (v384 + v74) & v382;
          if ((*(unsigned int (**)(size_t, uint64_t, uint64_t))(v387 + 48))(v75, 1, v388))
            goto LABEL_140;
          v77 = v387;
          v76 = v388;
          goto LABEL_118;
        case 3:
          v78 = (v378 + v52) & v435;
          v79 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v428 + 48);
          if (!v79(v78, 1, v427))
            (*(void (**)(unint64_t, uint64_t))(v428 + 8))(v78, v427);
          v80 = (v429 + v78) & v435;
          if (!v79(v80, 1, v427))
            (*(void (**)(unint64_t, uint64_t))(v428 + 8))(v80, v427);
          v75 = (v413 + v80) & v416;
          if (!(*(unsigned int (**)(size_t, uint64_t, uint64_t))(v391 + 48))(v75, 1, v392))
            goto LABEL_117;
          goto LABEL_140;
        case 4:
          (*(void (**)(unint64_t, uint64_t))(v414 + 8))((unint64_t)&v3[v417] & v51, v415);
          v366 = v52;
          v81 = v412 + v52;
          goto LABEL_126;
        case 5:
        case 7:
          (*(void (**)(unint64_t, uint64_t))(v414 + 8))((unint64_t)&v3[v417] & v51, v415);
          v54 = ~v9;
          v55 = (v412 + v52) & v435;
          v56 = v427;
          v57 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v428 + 48);
          if (!v57(v55, 1, v427))
            (*(void (**)(unint64_t, uint64_t))(v428 + 8))(v55, v427);
          v58 = v386 + ((v55 + v426) & 0xFFFFFFFFFFFFFFF8);
          goto LABEL_137;
        case 6:
          (*(void (**)(unint64_t, uint64_t))(v414 + 8))((v373 + v52) & v396, v415);
          v82 = v412 + ((v373 + v52) & v396);
          goto LABEL_134;
        case 8:
          v83 = v7 + 104;
          goto LABEL_125;
        case 9:
          (*(void (**)(unint64_t, uint64_t))(v414 + 8))((v377 + v52) & v396, v415);
          v84 = (v412 + ((v377 + v52) & v396)) & v435;
          v85 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v428 + 48);
          if (!v85(v84, 1, v427))
            (*(void (**)(unint64_t, uint64_t))(v428 + 8))(v84, v427);
          v86 = (v429 + v84) & v435;
          if (!v85(v86, 1, v427))
            (*(void (**)(unint64_t, uint64_t))(v428 + 8))(v86, v427);
          v87 = (v429 + v86) & v435;
          if (!v85(v87, 1, v427))
            (*(void (**)(uint64_t, uint64_t))(v428 + 8))(v87, v427);
          v88 = (v429 + v87) & v435;
          if (!v85(v88, 1, v427))
            (*(void (**)(uint64_t, uint64_t))(v428 + 8))(v88, v427);
          v75 = (v413 + v88) & v416;
          v52 = (unint64_t)&v3[v417] & v51;
          if ((*(unsigned int (**)(size_t, uint64_t, uint64_t))(v391 + 48))(v75, 1, v392))
            goto LABEL_140;
LABEL_117:
          v77 = v391;
          v76 = v392;
LABEL_118:
          (*(void (**)(size_t, uint64_t))(v77 + 8))(v75, v76);
          goto LABEL_140;
        case 0xA:
          v83 = v7 + 56;
          goto LABEL_125;
        case 0xB:
          (*(void (**)(unint64_t, uint64_t))(v414 + 8))((v375 + v52) & v396, v415);
          v89 = (v412 + ((v375 + v52) & v396)) & v435;
          if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v428 + 48))(v89, 1, v427))
            (*(void (**)(unint64_t, uint64_t))(v428 + 8))(v89, v427);
          if (!v20)
            goto LABEL_140;
          goto LABEL_141;
        case 0xC:
          v83 = v7 + 128;
LABEL_125:
          v366 = (unint64_t)&v3[v417] & v51;
          v90 = (v83 + v52) & v396;
          (*(void (**)(unint64_t, uint64_t))(v414 + 8))(v90, v415);
          v81 = v412 + v90;
LABEL_126:
          v91 = v81 & v435;
          v92 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v428 + 48);
          if (!v92(v81 & v435, 1, v427))
            (*(void (**)(uint64_t, uint64_t))(v428 + 8))(v91, v427);
          v93 = (v429 + v91) & v435;
          if (!v92(v93, 1, v427))
            (*(void (**)(uint64_t, uint64_t))(v428 + 8))(v93, v427);
          v94 = (v429 + v93) & v435;
          v52 = v366;
          if (!v92(v94, 1, v427))
            goto LABEL_138;
          goto LABEL_140;
        case 0xD:
          (*(void (**)(unint64_t, uint64_t))(v387 + 8))((unint64_t)&v3[v417] & v51, v388);
          goto LABEL_140;
        case 0xE:
          (*(void (**)(unint64_t, uint64_t))(v414 + 8))((unint64_t)&v3[v417] & v51, v415);
          v82 = v412 + v52;
LABEL_134:
          v54 = ~v9;
          v95 = v82 & v435;
          v56 = v427;
          v57 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v428 + 48);
          if (!v57(v82 & v435, 1, v427))
            (*(void (**)(uint64_t, uint64_t))(v428 + 8))(v95, v427);
          v58 = v429 + v95;
LABEL_137:
          v94 = v58 & v54;
          if (v57(v58 & v54, 1, v56))
            goto LABEL_140;
LABEL_138:
          v96 = *(void (**)(unint64_t, uint64_t))(v428 + 8);
          v97 = v94;
          goto LABEL_139;
        default:
          if (v431 <= 3)
            v53 = v431;
          else
            v53 = 4;
          __asm { BR              X12 }
          return result;
      }
    }
    v101 = a2[v436];
    v102 = v431;
    if (v101 >= 2)
    {
      v103 = v436 <= 3 ? v436 : 4;
      if (v103)
      {
        if (v103 == 4)
          v104 = *(_DWORD *)a2;
        else
          v104 = *a2;
        if (v436 < 4)
          v101 = (v104 | ((v101 - 2) << (8 * v436))) + 2;
        else
          v101 = v104 + 2;
      }
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v432 + 16))(v3, a2, v433);
    if (v101 == 1)
    {
      v105 = (unint64_t)&a2[v395 + 7] & 0xFFFFFFFFFFFFFFF8;
      v106 = *(unsigned __int8 *)(v105 + 248);
      if (v106 >= 0xB)
        v106 = *(_DWORD *)v105 + 11;
      v107 = (unint64_t)&v3[v395 + 7] & 0xFFFFFFFFFFFFFFF8;
      switch(v106)
      {
        case 0u:
          v108 = *(_OWORD *)v105;
          v109 = *(_OWORD *)(v105 + 16);
          v110 = *(_OWORD *)(v105 + 48);
          *(_OWORD *)(v107 + 32) = *(_OWORD *)(v105 + 32);
          *(_OWORD *)(v107 + 48) = v110;
          *(_OWORD *)v107 = v108;
          *(_OWORD *)(v107 + 16) = v109;
          v111 = *(_OWORD *)(v105 + 64);
          v112 = *(_OWORD *)(v105 + 80);
          v113 = *(_OWORD *)(v105 + 112);
          *(_OWORD *)(v107 + 96) = *(_OWORD *)(v105 + 96);
          *(_OWORD *)(v107 + 112) = v113;
          *(_OWORD *)(v107 + 64) = v111;
          *(_OWORD *)(v107 + 80) = v112;
          v114 = *(_OWORD *)(v105 + 128);
          v115 = *(_OWORD *)(v105 + 144);
          v116 = *(_OWORD *)(v105 + 176);
          *(_OWORD *)(v107 + 160) = *(_OWORD *)(v105 + 160);
          *(_OWORD *)(v107 + 176) = v116;
          *(_OWORD *)(v107 + 128) = v114;
          *(_OWORD *)(v107 + 144) = v115;
          v117 = *(_OWORD *)(v105 + 192);
          v118 = *(_OWORD *)(v105 + 208);
          v119 = *(_OWORD *)(v105 + 224);
          *(_QWORD *)(v107 + 240) = *(_QWORD *)(v105 + 240);
          *(_OWORD *)(v107 + 208) = v118;
          *(_OWORD *)(v107 + 224) = v119;
          *(_OWORD *)(v107 + 192) = v117;
          *(_BYTE *)(v107 + 248) = 0;
          break;
        case 1u:
          v142 = *(_OWORD *)(v105 + 16);
          *(_OWORD *)v107 = *(_OWORD *)v105;
          *(_OWORD *)(v107 + 16) = v142;
          v143 = *(_OWORD *)(v105 + 32);
          v144 = *(_OWORD *)(v105 + 48);
          v145 = *(_OWORD *)(v105 + 80);
          *(_OWORD *)(v107 + 64) = *(_OWORD *)(v105 + 64);
          *(_OWORD *)(v107 + 80) = v145;
          *(_OWORD *)(v107 + 32) = v143;
          *(_OWORD *)(v107 + 48) = v144;
          v146 = *(_OWORD *)(v105 + 96);
          v147 = *(_OWORD *)(v105 + 112);
          v148 = *(_OWORD *)(v105 + 144);
          *(_OWORD *)(v107 + 128) = *(_OWORD *)(v105 + 128);
          *(_OWORD *)(v107 + 144) = v148;
          *(_OWORD *)(v107 + 96) = v146;
          *(_OWORD *)(v107 + 112) = v147;
          v149 = *(_OWORD *)(v105 + 160);
          v150 = *(_OWORD *)(v105 + 176);
          v151 = *(_OWORD *)(v105 + 192);
          *(_QWORD *)(v107 + 208) = *(_QWORD *)(v105 + 208);
          *(_OWORD *)(v107 + 176) = v150;
          *(_OWORD *)(v107 + 192) = v151;
          *(_OWORD *)(v107 + 160) = v149;
          *(_BYTE *)(v107 + 248) = 1;
          break;
        case 2u:
          v152 = *(_OWORD *)v105;
          v153 = *(_OWORD *)(v105 + 16);
          v154 = *(_OWORD *)(v105 + 48);
          *(_OWORD *)(v107 + 32) = *(_OWORD *)(v105 + 32);
          *(_OWORD *)(v107 + 48) = v154;
          *(_OWORD *)v107 = v152;
          *(_OWORD *)(v107 + 16) = v153;
          *(_BYTE *)(v107 + 248) = 2;
          break;
        case 3u:
          *(_OWORD *)v107 = *(_OWORD *)v105;
          *(_BYTE *)(v107 + 248) = 3;
          break;
        case 4u:
          v155 = *(_OWORD *)v105;
          *(_QWORD *)(v107 + 16) = *(_QWORD *)(v105 + 16);
          *(_OWORD *)v107 = v155;
          *(_BYTE *)(v107 + 248) = 4;
          break;
        case 5u:
          *(_OWORD *)v107 = *(_OWORD *)v105;
          *(_BYTE *)(v107 + 248) = 5;
          break;
        case 6u:
          v156 = *(_OWORD *)v105;
          v157 = *(_OWORD *)(v105 + 32);
          *(_OWORD *)(v107 + 16) = *(_OWORD *)(v105 + 16);
          *(_OWORD *)(v107 + 32) = v157;
          *(_OWORD *)v107 = v156;
          v158 = *(_OWORD *)(v105 + 48);
          v159 = *(_OWORD *)(v105 + 64);
          v160 = *(_OWORD *)(v105 + 80);
          *(_QWORD *)(v107 + 96) = *(_QWORD *)(v105 + 96);
          *(_OWORD *)(v107 + 64) = v159;
          *(_OWORD *)(v107 + 80) = v160;
          *(_OWORD *)(v107 + 48) = v158;
          *(_BYTE *)(v107 + 248) = 6;
          break;
        case 7u:
          v161 = *(_OWORD *)(v105 + 16);
          *(_OWORD *)v107 = *(_OWORD *)v105;
          *(_OWORD *)(v107 + 16) = v161;
          v162 = *(_OWORD *)(v105 + 32);
          v163 = *(_OWORD *)(v105 + 48);
          v164 = *(_OWORD *)(v105 + 80);
          *(_OWORD *)(v107 + 64) = *(_OWORD *)(v105 + 64);
          *(_OWORD *)(v107 + 80) = v164;
          *(_OWORD *)(v107 + 32) = v162;
          *(_OWORD *)(v107 + 48) = v163;
          v165 = *(_OWORD *)(v105 + 96);
          v166 = *(_OWORD *)(v105 + 112);
          v167 = *(_OWORD *)(v105 + 144);
          *(_OWORD *)(v107 + 128) = *(_OWORD *)(v105 + 128);
          *(_OWORD *)(v107 + 144) = v167;
          *(_OWORD *)(v107 + 96) = v165;
          *(_OWORD *)(v107 + 112) = v166;
          *(_BYTE *)(v107 + 248) = 7;
          break;
        case 8u:
          v168 = *(_OWORD *)v105;
          v169 = *(_OWORD *)(v105 + 16);
          v170 = *(_OWORD *)(v105 + 32);
          *(_QWORD *)(v107 + 48) = *(_QWORD *)(v105 + 48);
          *(_OWORD *)(v107 + 16) = v169;
          *(_OWORD *)(v107 + 32) = v170;
          *(_OWORD *)v107 = v168;
          *(_BYTE *)(v107 + 248) = 8;
          break;
        case 9u:
          v171 = *(_OWORD *)v105;
          v172 = *(_OWORD *)(v105 + 16);
          v173 = *(_OWORD *)(v105 + 48);
          *(_OWORD *)(v107 + 32) = *(_OWORD *)(v105 + 32);
          *(_OWORD *)(v107 + 48) = v173;
          *(_OWORD *)v107 = v171;
          *(_OWORD *)(v107 + 16) = v172;
          *(_BYTE *)(v107 + 248) = 9;
          break;
        case 0xAu:
          v174 = *(_OWORD *)v105;
          v175 = *(_OWORD *)(v105 + 16);
          v176 = *(_OWORD *)(v105 + 48);
          *(_OWORD *)(v107 + 32) = *(_OWORD *)(v105 + 32);
          *(_OWORD *)(v107 + 48) = v176;
          *(_OWORD *)v107 = v174;
          *(_OWORD *)(v107 + 16) = v175;
          v177 = *(_OWORD *)(v105 + 64);
          v178 = *(_OWORD *)(v105 + 80);
          v179 = *(_OWORD *)(v105 + 112);
          *(_OWORD *)(v107 + 96) = *(_OWORD *)(v105 + 96);
          *(_OWORD *)(v107 + 112) = v179;
          *(_OWORD *)(v107 + 64) = v177;
          *(_OWORD *)(v107 + 80) = v178;
          *(_BYTE *)(v107 + 248) = 10;
          break;
        default:
          v180 = *(_OWORD *)v105;
          v181 = *(_OWORD *)(v105 + 16);
          v182 = *(_OWORD *)(v105 + 48);
          *(_OWORD *)(v107 + 32) = *(_OWORD *)(v105 + 32);
          *(_OWORD *)(v107 + 48) = v182;
          *(_OWORD *)v107 = v180;
          *(_OWORD *)(v107 + 16) = v181;
          v183 = *(_OWORD *)(v105 + 64);
          v184 = *(_OWORD *)(v105 + 80);
          v185 = *(_OWORD *)(v105 + 112);
          *(_OWORD *)(v107 + 96) = *(_OWORD *)(v105 + 96);
          *(_OWORD *)(v107 + 112) = v185;
          *(_OWORD *)(v107 + 64) = v183;
          *(_OWORD *)(v107 + 80) = v184;
          v186 = *(_OWORD *)(v105 + 128);
          v187 = *(_OWORD *)(v105 + 144);
          v188 = *(_OWORD *)(v105 + 176);
          *(_OWORD *)(v107 + 160) = *(_OWORD *)(v105 + 160);
          *(_OWORD *)(v107 + 176) = v188;
          *(_OWORD *)(v107 + 128) = v186;
          *(_OWORD *)(v107 + 144) = v187;
          v189 = *(_OWORD *)(v105 + 192);
          v190 = *(_OWORD *)(v105 + 208);
          v191 = *(_OWORD *)(v105 + 224);
          *(_OWORD *)(v107 + 233) = *(_OWORD *)(v105 + 233);
          *(_OWORD *)(v107 + 208) = v190;
          *(_OWORD *)(v107 + 224) = v191;
          *(_OWORD *)(v107 + 192) = v189;
          break;
      }
      v3[v436] = 1;
    }
    else
    {
      v120 = (_OWORD *)((unint64_t)&v3[v417] & v51);
      v121 = (__int128 *)((unint64_t)&a2[v417] & v51);
      v123 = v430;
      switch(*((_BYTE *)v121 + v431))
      {
        case 0:
          __n = v26;
          v124 = *v121;
          v125 = *(_OWORD *)(((unint64_t)&a2[v417] & v51) + 0x10);
          v126 = *(_OWORD *)(((unint64_t)&a2[v417] & v51) + 0x30);
          *(_OWORD *)(((unint64_t)&v3[v417] & v51) + 0x20) = *(_OWORD *)(((unint64_t)&a2[v417] & v51)
                                                                              + 0x20);
          *(_OWORD *)(((unint64_t)&v3[v417] & v51) + 0x30) = v126;
          *v120 = v124;
          *(_OWORD *)(((unint64_t)&v3[v417] & v51) + 0x10) = v125;
          v127 = *(_OWORD *)(((unint64_t)&a2[v417] & v51) + 0x40);
          v128 = *(_OWORD *)(((unint64_t)&a2[v417] & v51) + 0x50);
          v129 = *(_OWORD *)(((unint64_t)&a2[v417] & v51) + 0x70);
          *(_OWORD *)(((unint64_t)&v3[v417] & v51) + 0x60) = *(_OWORD *)(((unint64_t)&a2[v417] & v51)
                                                                              + 0x60);
          *(_OWORD *)(((unint64_t)&v3[v417] & v51) + 0x70) = v129;
          *(_OWORD *)(((unint64_t)&v3[v417] & v51) + 0x40) = v127;
          *(_OWORD *)(((unint64_t)&v3[v417] & v51) + 0x50) = v128;
          v130 = *(_OWORD *)(((unint64_t)&a2[v417] & v51) + 0x80);
          v131 = *(_OWORD *)(((unint64_t)&a2[v417] & v51) + 0x90);
          v132 = *(_OWORD *)(((unint64_t)&a2[v417] & v51) + 0xB0);
          *(_OWORD *)(((unint64_t)&v3[v417] & v51) + 0xA0) = *(_OWORD *)(((unint64_t)&a2[v417] & v51)
                                                                              + 0xA0);
          *(_OWORD *)(((unint64_t)&v3[v417] & v51) + 0xB0) = v132;
          *(_OWORD *)(((unint64_t)&v3[v417] & v51) + 0x80) = v130;
          *(_OWORD *)(((unint64_t)&v3[v417] & v51) + 0x90) = v131;
          v133 = *(_OWORD *)(((unint64_t)&a2[v417] & v51) + 0xC0);
          v134 = *(_OWORD *)(((unint64_t)&a2[v417] & v51) + 0xD0);
          v135 = *(_OWORD *)(((unint64_t)&a2[v417] & v51) + 0xE0);
          *(_QWORD *)(((unint64_t)&v3[v417] & v51) + 0xF0) = *(_QWORD *)(((unint64_t)&a2[v417] & v51)
                                                                              + 0xF0);
          *(_OWORD *)(((unint64_t)&v3[v417] & v51) + 0xD0) = v134;
          *(_OWORD *)(((unint64_t)&v3[v417] & v51) + 0xE0) = v135;
          *(_OWORD *)(((unint64_t)&v3[v417] & v51) + 0xC0) = v133;
          v434 = (_OWORD *)((unint64_t)&v3[v417] & v51);
          v136 = ((unint64_t)v120 + v380) & v396;
          v137 = ((unint64_t)v121 + v380) & v396;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v414 + 16))(v136, v137, v415);
          *(_BYTE *)(v136 + v381) = *(_BYTE *)(v137 + v381);
          v138 = (void *)((v9 + 1 + v136 + v381) & v435);
          v139 = (const void *)((v9 + 1 + v137 + v381) & v435);
          v140 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v428 + 48);
          if (v140(v139, 1, v427))
          {
            v141 = v426;
            memcpy(v138, v139, v426);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v428 + 16))(v138, v139, v427);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v138, 0, 1, v427);
            v141 = v426;
          }
          v289 = (void *)(((unint64_t)v138 + v429) & v435);
          v290 = (const void *)(((unint64_t)v139 + v429) & v435);
          if (v140(v290, 1, v427))
          {
            memcpy(v289, v290, v141);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v428 + 16))(v289, v290, v427);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v289, 0, 1, v427);
          }
          v318 = (void *)(((unint64_t)v289 + v429) & v435);
          v319 = (const void *)(((unint64_t)v290 + v429) & v435);
          if (v140(v319, 1, v427))
          {
            memcpy(v318, v319, v141);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v428 + 16))(v318, v319, v427);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v318, 0, 1, v427);
          }
          v123 = v430;
          v334 = ((unint64_t)v318 + v413) & v416;
          v335 = ((unint64_t)v319 + v413) & v416;
          v336 = *(void (**)(unint64_t, unint64_t, uint64_t))(v391 + 16);
          v336(v334, v335, v392);
          v337 = (void *)((v411 + v334) & v416);
          v338 = (const void *)((v411 + v335) & v416);
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v391 + 48))(v338, 1, v392))
          {
            memcpy(v337, v338, __n);
          }
          else
          {
            v336((unint64_t)v337, (unint64_t)v338, v392);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v391 + 56))(v337, 0, 1, v392);
          }
          v283 = 0;
          goto LABEL_377;
        case 1:
          v192 = v385;
          v193 = *((unsigned __int8 *)v121 + v385);
          if (v193 >= 3)
          {
            if (v385 <= 3)
              v194 = v385;
            else
              v194 = 4;
            __asm { BR              X12 }
          }
          if (v193 == 2)
          {
            v358 = *(unsigned int (**)(__int128 *, uint64_t, uint64_t))(v428 + 48);
            if (v358(v121, 1, v427))
            {
              memcpy(v120, v121, v426);
            }
            else
            {
              (*(void (**)(_OWORD *, __int128 *, uint64_t))(v428 + 16))(v120, v121, v427);
              (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v120, 0, 1, v427);
            }
            v359 = (void *)(((unint64_t)v120 + v9 + v426) & v435);
            v360 = (void *)(((unint64_t)v121 + v9 + v426) & v435);
            if (v358((__int128 *)v360, 1, v427))
            {
              memcpy(v359, v360, v426);
            }
            else
            {
              (*(void (**)(void *, void *, uint64_t))(v428 + 16))(v359, v360, v427);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v359, 0, 1, v427);
            }
            v123 = v430;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v370 + 16))(((unint64_t)v359 + v369) & v368, ((unint64_t)v360 + v369) & v368, v371);
            v357 = 2;
            v284 = v393;
            v120 = (_OWORD *)((unint64_t)&v3[v417] & v51);
            v192 = v385;
          }
          else
          {
            if (v193 == 1)
            {
              (*(void (**)(unint64_t, __int128 *, uint64_t))(v428 + 16))((unint64_t)&v3[v417] & v51, v121, v427);
              v357 = 1;
            }
            else
            {
              (*(void (**)(unint64_t, __int128 *, uint64_t))(v414 + 16))((unint64_t)&v3[v417] & v51, v121, v415);
              v357 = 0;
            }
            v284 = v393;
            v123 = v430;
          }
          *((_BYTE *)v120 + v192) = v357;
          v283 = 1;
          goto LABEL_379;
        case 2:
          __na = v26;
          v195 = *(_OWORD *)(((unint64_t)&a2[v417] & v51) + 0x10);
          *v120 = *v121;
          *(_OWORD *)(((unint64_t)&v3[v417] & v51) + 0x10) = v195;
          v196 = *(_OWORD *)(((unint64_t)&a2[v417] & v51) + 0x20);
          v197 = *(_OWORD *)(((unint64_t)&a2[v417] & v51) + 0x30);
          v198 = *(_OWORD *)(((unint64_t)&a2[v417] & v51) + 0x50);
          *(_OWORD *)(((unint64_t)&v3[v417] & v51) + 0x40) = *(_OWORD *)(((unint64_t)&a2[v417] & v51)
                                                                              + 0x40);
          *(_OWORD *)(((unint64_t)&v3[v417] & v51) + 0x50) = v198;
          *(_OWORD *)(((unint64_t)&v3[v417] & v51) + 0x20) = v196;
          *(_OWORD *)(((unint64_t)&v3[v417] & v51) + 0x30) = v197;
          v199 = *(_OWORD *)(((unint64_t)&a2[v417] & v51) + 0x60);
          v200 = *(_OWORD *)(((unint64_t)&a2[v417] & v51) + 0x70);
          v201 = *(_OWORD *)(((unint64_t)&a2[v417] & v51) + 0x90);
          *(_OWORD *)(((unint64_t)&v3[v417] & v51) + 0x80) = *(_OWORD *)(((unint64_t)&a2[v417] & v51)
                                                                              + 0x80);
          *(_OWORD *)(((unint64_t)&v3[v417] & v51) + 0x90) = v201;
          *(_OWORD *)(((unint64_t)&v3[v417] & v51) + 0x60) = v199;
          *(_OWORD *)(((unint64_t)&v3[v417] & v51) + 0x70) = v200;
          v202 = *(_OWORD *)(((unint64_t)&a2[v417] & v51) + 0xA0);
          v203 = *(_OWORD *)(((unint64_t)&a2[v417] & v51) + 0xB0);
          v204 = *(_OWORD *)(((unint64_t)&a2[v417] & v51) + 0xC0);
          *(_QWORD *)(((unint64_t)&v3[v417] & v51) + 0xD0) = *(_QWORD *)(((unint64_t)&a2[v417] & v51)
                                                                              + 0xD0);
          *(_OWORD *)(((unint64_t)&v3[v417] & v51) + 0xB0) = v203;
          *(_OWORD *)(((unint64_t)&v3[v417] & v51) + 0xC0) = v204;
          *(_OWORD *)(((unint64_t)&v3[v417] & v51) + 0xA0) = v202;
          v434 = (_OWORD *)((unint64_t)&v3[v417] & v51);
          v205 = ((unint64_t)v120 + v379) & v396;
          v206 = ((unint64_t)v121 + v379) & v396;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v414 + 16))(v205, v206, v415);
          *(_BYTE *)(v205 + v381) = *(_BYTE *)(v206 + v381);
          v207 = (void *)((v9 + 1 + v205 + v381) & v435);
          v208 = (const void *)((v9 + 1 + v206 + v381) & v435);
          v209 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v428 + 48);
          if (v209(v208, 1, v427))
          {
            v210 = v426;
            memcpy(v207, v208, v426);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v428 + 16))(v207, v208, v427);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v207, 0, 1, v427);
            v210 = v426;
          }
          v291 = (void *)(((unint64_t)v207 + v429) & v435);
          v292 = (const void *)(((unint64_t)v208 + v429) & v435);
          if (v209(v292, 1, v427))
          {
            memcpy(v291, v292, v210);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v428 + 16))(v291, v292, v427);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v291, 0, 1, v427);
          }
          v320 = (void *)(((unint64_t)v291 + v429) & v435);
          v321 = (const void *)(((unint64_t)v292 + v429) & v435);
          if (v209(v321, 1, v427))
          {
            memcpy(v320, v321, v210);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v428 + 16))(v320, v321, v427);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v320, 0, 1, v427);
          }
          v123 = v430;
          v339 = (void *)(((unint64_t)v320 + v413) & v416);
          v340 = (const void *)(((unint64_t)v321 + v413) & v416);
          v341 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v391 + 48);
          if (v341(v340, 1, v392))
          {
            memcpy(v339, v340, __na);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v391 + 16))(v339, v340, v392);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v391 + 56))(v339, 0, 1, v392);
          }
          v344 = (void *)(((unint64_t)v339 + v383) & v416);
          v345 = (const void *)(((unint64_t)v340 + v383) & v416);
          if (v341(v345, 1, v392))
          {
            memcpy(v344, v345, __na);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v391 + 16))(v344, v345, v392);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v391 + 56))(v344, 0, 1, v392);
          }
          v348 = (void *)(((unint64_t)v344 + v384) & v382);
          v349 = (const void *)(((unint64_t)v345 + v384) & v382);
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v387 + 48))(v349, 1, v388))
          {
            memcpy(v348, v349, v367);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v387 + 16))(v348, v349, v388);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v387 + 56))(v348, 0, 1, v388);
          }
          v283 = 2;
          goto LABEL_377;
        case 3:
          __nb = v26;
          v211 = *v121;
          v212 = *(_OWORD *)(((unint64_t)&a2[v417] & v51) + 0x10);
          v213 = *(_OWORD *)(((unint64_t)&a2[v417] & v51) + 0x30);
          *(_OWORD *)(((unint64_t)&v3[v417] & v51) + 0x20) = *(_OWORD *)(((unint64_t)&a2[v417] & v51)
                                                                              + 0x20);
          *(_OWORD *)(((unint64_t)&v3[v417] & v51) + 0x30) = v213;
          *v120 = v211;
          *(_OWORD *)(((unint64_t)&v3[v417] & v51) + 0x10) = v212;
          v434 = (_OWORD *)((unint64_t)&v3[v417] & v51);
          v214 = (void *)(((unint64_t)v120 + v378) & v435);
          v215 = (const void *)(((unint64_t)v121 + v378) & v435);
          v216 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v428 + 48);
          if (v216(v215, 1, v427))
          {
            v217 = v426;
            memcpy(v214, v215, v426);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v428 + 16))(v214, v215, v427);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v214, 0, 1, v427);
            v217 = v426;
          }
          v293 = (void *)(((unint64_t)v214 + v429) & v435);
          v294 = (const void *)(((unint64_t)v215 + v429) & v435);
          if (v216(v294, 1, v427))
          {
            memcpy(v293, v294, v217);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v428 + 16))(v293, v294, v427);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v293, 0, 1, v427);
          }
          v322 = (void *)(((unint64_t)v293 + v413) & v416);
          v323 = (const void *)(((unint64_t)v294 + v413) & v416);
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v391 + 48))(v323, 1, v392))
          {
            memcpy(v322, v323, __nb);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v391 + 16))(v322, v323, v392);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v391 + 56))(v322, 0, 1, v392);
          }
          v283 = 3;
          goto LABEL_377;
        case 4:
          (*(void (**)(unint64_t, __int128 *, uint64_t))(v414 + 16))((unint64_t)&v3[v417] & v51, v121, v415);
          v434 = (_OWORD *)((unint64_t)&v3[v417] & v51);
          v218 = (void *)(((unint64_t)v120 + v412) & v435);
          v219 = (const void *)(((unint64_t)v121 + v412) & v435);
          v220 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v428 + 48);
          if (v220(v219, 1, v427))
          {
            v221 = v426;
            memcpy(v218, v219, v426);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v428 + 16))(v218, v219, v427);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v218, 0, 1, v427);
            v221 = v426;
          }
          v295 = (void *)(((unint64_t)v218 + v429) & v435);
          v296 = (const void *)(((unint64_t)v219 + v429) & v435);
          if (v220(v296, 1, v427))
          {
            memcpy(v295, v296, v221);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v428 + 16))(v295, v296, v427);
            v221 = v426;
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v295, 0, 1, v427);
          }
          v324 = (void *)(((unint64_t)v295 + v429) & v435);
          v325 = (const void *)(((unint64_t)v296 + v429) & v435);
          if (v220(v325, 1, v427))
          {
            memcpy(v324, v325, v221);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v428 + 16))(v324, v325, v427);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v324, 0, 1, v427);
          }
          v283 = 4;
          goto LABEL_361;
        case 5:
          (*(void (**)(unint64_t, __int128 *, uint64_t))(v414 + 16))((unint64_t)&v3[v417] & v51, v121, v415);
          v222 = (_OWORD *)((unint64_t)&v3[v417] & v51);
          v223 = (void *)(((unint64_t)v120 + v412) & v435);
          v224 = (const void *)(((unint64_t)v121 + v412) & v435);
          v225 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v428 + 48);
          if (v225(v224, 1, v427))
          {
            v226 = v426;
            memcpy(v223, v224, v426);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v428 + 16))(v223, v224, v427);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v223, 0, 1, v427);
            v226 = v426;
          }
          *((_BYTE *)v223 + v226) = *((_BYTE *)v224 + v226);
          v297 = ((unint64_t)v223 + v226) & 0xFFFFFFFFFFFFFFF8;
          v298 = ((unint64_t)v224 + v226) & 0xFFFFFFFFFFFFFFF8;
          *(_OWORD *)(v297 + 8) = *(_OWORD *)(v298 + 8);
          v299 = (void *)((v386 + v297) & v435);
          v300 = (const void *)((v386 + v298) & v435);
          if (v225(v300, 1, v427))
          {
            memcpy(v299, v300, v226);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v428 + 16))(v299, v300, v427);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v299, 0, 1, v427);
          }
          v283 = 5;
          goto LABEL_329;
        case 6:
          v227 = *v121;
          *(_QWORD *)(((unint64_t)&v3[v417] & v51) + 0x10) = *(_QWORD *)(((unint64_t)&a2[v417] & v51)
                                                                              + 0x10);
          *v120 = v227;
          v434 = (_OWORD *)((unint64_t)&v3[v417] & v51);
          v228 = ((unint64_t)v120 + v373) & v396;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v414 + 16))(v228, ((unint64_t)v121 + v373) & v396, v415);
          v229 = (void *)((v412 + v228) & v435);
          v230 = (const void *)((v412 + (((unint64_t)v121 + v373) & v396)) & v435);
          v231 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v428 + 48);
          if (v231(v230, 1, v427))
          {
            v232 = v426;
            memcpy(v229, v230, v426);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v428 + 16))(v229, v230, v427);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v229, 0, 1, v427);
            v232 = v426;
          }
          v301 = (void *)(((unint64_t)v229 + v429) & v435);
          v302 = (const void *)(((unint64_t)v230 + v429) & v435);
          if (v231(v302, 1, v427))
          {
            memcpy(v301, v302, v232);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v428 + 16))(v301, v302, v427);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v301, 0, 1, v427);
          }
          v283 = 6;
          goto LABEL_361;
        case 7:
          (*(void (**)(unint64_t, __int128 *, uint64_t))(v414 + 16))((unint64_t)&v3[v417] & v51, v121, v415);
          v222 = (_OWORD *)((unint64_t)&v3[v417] & v51);
          v233 = (void *)(((unint64_t)v120 + v412) & v435);
          v234 = (const void *)(((unint64_t)v121 + v412) & v435);
          v235 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v428 + 48);
          if (v235(v234, 1, v427))
          {
            v236 = v426;
            memcpy(v233, v234, v426);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v428 + 16))(v233, v234, v427);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v233, 0, 1, v427);
            v236 = v426;
          }
          *((_BYTE *)v233 + v236) = *((_BYTE *)v234 + v236);
          v303 = ((unint64_t)v233 + v236) & 0xFFFFFFFFFFFFFFF8;
          v304 = ((unint64_t)v234 + v236) & 0xFFFFFFFFFFFFFFF8;
          *(_OWORD *)(v303 + 8) = *(_OWORD *)(v304 + 8);
          v305 = (void *)((v386 + v303) & v435);
          v306 = (const void *)((v386 + v304) & v435);
          if (v235(v306, 1, v427))
          {
            memcpy(v305, v306, v236);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v428 + 16))(v305, v306, v427);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v305, 0, 1, v427);
          }
          v283 = 7;
LABEL_329:
          v284 = v393;
          v123 = v430;
          v120 = v222;
          goto LABEL_379;
        case 8:
          v237 = *v121;
          v238 = *(_OWORD *)(((unint64_t)&a2[v417] & v51) + 0x20);
          *(_OWORD *)(((unint64_t)&v3[v417] & v51) + 0x10) = *(_OWORD *)(((unint64_t)&a2[v417] & v51)
                                                                              + 0x10);
          *(_OWORD *)(((unint64_t)&v3[v417] & v51) + 0x20) = v238;
          *v120 = v237;
          v239 = *(_OWORD *)(((unint64_t)&a2[v417] & v51) + 0x30);
          v240 = *(_OWORD *)(((unint64_t)&a2[v417] & v51) + 0x40);
          v241 = *(_OWORD *)(((unint64_t)&a2[v417] & v51) + 0x50);
          *(_QWORD *)(((unint64_t)&v3[v417] & v51) + 0x60) = *(_QWORD *)(((unint64_t)&a2[v417] & v51)
                                                                              + 0x60);
          *(_OWORD *)(((unint64_t)&v3[v417] & v51) + 0x40) = v240;
          *(_OWORD *)(((unint64_t)&v3[v417] & v51) + 0x50) = v241;
          *(_OWORD *)(((unint64_t)&v3[v417] & v51) + 0x30) = v239;
          v434 = (_OWORD *)((unint64_t)&v3[v417] & v51);
          v242 = ((unint64_t)v120 + v374) & v396;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v414 + 16))(v242, ((unint64_t)v121 + v374) & v396, v415);
          v243 = (void *)((v412 + v242) & v435);
          v244 = (const void *)((v412 + (((unint64_t)v121 + v374) & v396)) & v435);
          v245 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v428 + 48);
          if (v245(v244, 1, v427))
          {
            v246 = v426;
            memcpy(v243, v244, v426);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v428 + 16))(v243, v244, v427);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v243, 0, 1, v427);
            v246 = v426;
          }
          v307 = (void *)(((unint64_t)v243 + v429) & v435);
          v308 = (const void *)(((unint64_t)v244 + v429) & v435);
          if (v245(v308, 1, v427))
          {
            memcpy(v307, v308, v246);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v428 + 16))(v307, v308, v427);
            v246 = v426;
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v307, 0, 1, v427);
          }
          v326 = (void *)(((unint64_t)v307 + v429) & v435);
          v327 = (const void *)(((unint64_t)v308 + v429) & v435);
          if (v245(v327, 1, v427))
          {
            memcpy(v326, v327, v246);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v428 + 16))(v326, v327, v427);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v326, 0, 1, v427);
          }
          v283 = 8;
          goto LABEL_361;
        case 9:
          __nc = v26;
          v247 = *(_OWORD *)(((unint64_t)&a2[v417] & v51) + 0x10);
          *v120 = *v121;
          *(_OWORD *)(((unint64_t)&v3[v417] & v51) + 0x10) = v247;
          v248 = *(_OWORD *)(((unint64_t)&a2[v417] & v51) + 0x20);
          v249 = *(_OWORD *)(((unint64_t)&a2[v417] & v51) + 0x30);
          v250 = *(_OWORD *)(((unint64_t)&a2[v417] & v51) + 0x50);
          *(_OWORD *)(((unint64_t)&v3[v417] & v51) + 0x40) = *(_OWORD *)(((unint64_t)&a2[v417] & v51)
                                                                              + 0x40);
          *(_OWORD *)(((unint64_t)&v3[v417] & v51) + 0x50) = v250;
          *(_OWORD *)(((unint64_t)&v3[v417] & v51) + 0x20) = v248;
          *(_OWORD *)(((unint64_t)&v3[v417] & v51) + 0x30) = v249;
          v251 = *(_OWORD *)(((unint64_t)&a2[v417] & v51) + 0x60);
          v252 = *(_OWORD *)(((unint64_t)&a2[v417] & v51) + 0x70);
          v253 = *(_OWORD *)(((unint64_t)&a2[v417] & v51) + 0x90);
          *(_OWORD *)(((unint64_t)&v3[v417] & v51) + 0x80) = *(_OWORD *)(((unint64_t)&a2[v417] & v51)
                                                                              + 0x80);
          *(_OWORD *)(((unint64_t)&v3[v417] & v51) + 0x90) = v253;
          *(_OWORD *)(((unint64_t)&v3[v417] & v51) + 0x60) = v251;
          *(_OWORD *)(((unint64_t)&v3[v417] & v51) + 0x70) = v252;
          v434 = (_OWORD *)((unint64_t)&v3[v417] & v51);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v414 + 16))(((unint64_t)v120 + v377) & v396, ((unint64_t)v121 + v377) & v396, v415);
          v254 = (void *)((v412 + (((unint64_t)v120 + v377) & v396)) & v435);
          v255 = (const void *)((v412 + (((unint64_t)v121 + v377) & v396)) & v435);
          v256 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v428 + 48);
          if (v256(v255, 1, v427))
          {
            v257 = v426;
            memcpy(v254, v255, v426);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v428 + 16))(v254, v255, v427);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v254, 0, 1, v427);
            v257 = v426;
          }
          v309 = (void *)(((unint64_t)v254 + v429) & v435);
          v310 = (const void *)(((unint64_t)v255 + v429) & v435);
          if (v256(v310, 1, v427))
          {
            memcpy(v309, v310, v257);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v428 + 16))(v309, v310, v427);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v309, 0, 1, v427);
          }
          v328 = (void *)(((unint64_t)v309 + v429) & v435);
          v329 = (const void *)(((unint64_t)v310 + v429) & v435);
          if (v256(v329, 1, v427))
          {
            memcpy(v328, v329, v257);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v428 + 16))(v328, v329, v427);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v328, 0, 1, v427);
          }
          v342 = (void *)(((unint64_t)v328 + v429) & v435);
          v343 = (const void *)(((unint64_t)v329 + v429) & v435);
          if (v256(v343, 1, v427))
          {
            memcpy(v342, v343, v257);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v428 + 16))(v342, v343, v427);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v342, 0, 1, v427);
          }
          v123 = v430;
          v346 = (void *)(((unint64_t)v342 + v413) & v416);
          v347 = (const void *)(((unint64_t)v343 + v413) & v416);
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v391 + 48))(v347, 1, v392))
          {
            memcpy(v346, v347, __nc);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v391 + 16))(v346, v347, v392);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v391 + 56))(v346, 0, 1, v392);
          }
          v283 = 9;
LABEL_377:
          v284 = v393;
          v102 = v431;
          goto LABEL_378;
        case 0xA:
          v258 = *v121;
          v259 = *(_OWORD *)(((unint64_t)&a2[v417] & v51) + 0x10);
          v260 = *(_OWORD *)(((unint64_t)&a2[v417] & v51) + 0x20);
          *(_QWORD *)(((unint64_t)&v3[v417] & v51) + 0x30) = *(_QWORD *)(((unint64_t)&a2[v417] & v51)
                                                                              + 0x30);
          *(_OWORD *)(((unint64_t)&v3[v417] & v51) + 0x10) = v259;
          *(_OWORD *)(((unint64_t)&v3[v417] & v51) + 0x20) = v260;
          *v120 = v258;
          v434 = (_OWORD *)((unint64_t)&v3[v417] & v51);
          v261 = ((unint64_t)v120 + v372) & v396;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v414 + 16))(v261, ((unint64_t)v121 + v372) & v396, v415);
          v262 = (void *)((v412 + v261) & v435);
          v263 = (const void *)((v412 + (((unint64_t)v121 + v372) & v396)) & v435);
          v264 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v428 + 48);
          if (v264(v263, 1, v427))
          {
            v265 = v426;
            memcpy(v262, v263, v426);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v428 + 16))(v262, v263, v427);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v262, 0, 1, v427);
            v265 = v426;
          }
          v311 = (void *)(((unint64_t)v262 + v429) & v435);
          v312 = (const void *)(((unint64_t)v263 + v429) & v435);
          if (v264(v312, 1, v427))
          {
            memcpy(v311, v312, v265);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v428 + 16))(v311, v312, v427);
            v265 = v426;
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v311, 0, 1, v427);
          }
          v330 = (void *)(((unint64_t)v311 + v429) & v435);
          v331 = (const void *)(((unint64_t)v312 + v429) & v435);
          if (v264(v331, 1, v427))
          {
            memcpy(v330, v331, v265);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v428 + 16))(v330, v331, v427);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v330, 0, 1, v427);
          }
          v283 = 10;
          goto LABEL_361;
        case 0xB:
          __nd = v26;
          v266 = *v121;
          v267 = *(_OWORD *)(((unint64_t)&a2[v417] & v51) + 0x10);
          v268 = *(_OWORD *)(((unint64_t)&a2[v417] & v51) + 0x30);
          *(_OWORD *)(((unint64_t)&v3[v417] & v51) + 0x20) = *(_OWORD *)(((unint64_t)&a2[v417] & v51)
                                                                              + 0x20);
          *(_OWORD *)(((unint64_t)&v3[v417] & v51) + 0x30) = v268;
          *v120 = v266;
          *(_OWORD *)(((unint64_t)&v3[v417] & v51) + 0x10) = v267;
          v434 = (_OWORD *)((unint64_t)&v3[v417] & v51);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v414 + 16))(((unint64_t)v120 + v375) & v396, ((unint64_t)v121 + v375) & v396, v415);
          v269 = (void *)((v412 + (((unint64_t)v120 + v375) & v396)) & v435);
          v270 = (const void *)((v412 + (((unint64_t)v121 + v375) & v396)) & v435);
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v428 + 48))(v270, 1, v427))
          {
            v271 = v426;
            memcpy(v269, v270, v426);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v428 + 16))(v269, v270, v427);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v269, 0, 1, v427);
            v271 = v426;
          }
          *((_BYTE *)v269 + v271) = *((_BYTE *)v270 + v271);
          v313 = ((v411 + ((v413 + ((v429 + (((v408 | v9) + v271) & v435)) & v435)) & v416)) & v416) + __nd;
          if (v407 > v313)
            v313 = v407;
          if (v406 > v313)
            v313 = v406;
          if (v405 > v313)
            v313 = v405;
          if (v403 > v313)
            v313 = v403;
          if (v404 > v313)
            v313 = v404;
          if (v402 > v313)
            v313 = v402;
          if (v404 > v313)
            v313 = v404;
          if (v401 > v313)
            v313 = v401;
          if (v400 > v313)
            v313 = v400;
          if (v399 > v313)
            v313 = v399;
          if (v398 > v313)
            v313 = v398;
          if (v397 > v313)
            v313 = v397;
          if (v410 > v313)
            v313 = v410;
          if (v409 <= v313)
            v102 = v313;
          else
            v102 = v409;
          v283 = 11;
          v284 = v393;
          goto LABEL_378;
        case 0xC:
          v272 = *v121;
          v273 = *(_OWORD *)(((unint64_t)&a2[v417] & v51) + 0x10);
          v274 = *(_OWORD *)(((unint64_t)&a2[v417] & v51) + 0x30);
          *(_OWORD *)(((unint64_t)&v3[v417] & v51) + 0x20) = *(_OWORD *)(((unint64_t)&a2[v417] & v51)
                                                                              + 0x20);
          *(_OWORD *)(((unint64_t)&v3[v417] & v51) + 0x30) = v274;
          *v120 = v272;
          *(_OWORD *)(((unint64_t)&v3[v417] & v51) + 0x10) = v273;
          v275 = *(_OWORD *)(((unint64_t)&a2[v417] & v51) + 0x40);
          v276 = *(_OWORD *)(((unint64_t)&a2[v417] & v51) + 0x50);
          v277 = *(_OWORD *)(((unint64_t)&a2[v417] & v51) + 0x70);
          *(_OWORD *)(((unint64_t)&v3[v417] & v51) + 0x60) = *(_OWORD *)(((unint64_t)&a2[v417] & v51)
                                                                              + 0x60);
          *(_OWORD *)(((unint64_t)&v3[v417] & v51) + 0x70) = v277;
          *(_OWORD *)(((unint64_t)&v3[v417] & v51) + 0x40) = v275;
          *(_OWORD *)(((unint64_t)&v3[v417] & v51) + 0x50) = v276;
          v434 = (_OWORD *)((unint64_t)&v3[v417] & v51);
          v278 = ((unint64_t)v120 + v376) & v396;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v414 + 16))(v278, ((unint64_t)v121 + v376) & v396, v415);
          v279 = (void *)((v412 + v278) & v435);
          v280 = (const void *)((v412 + (((unint64_t)v121 + v376) & v396)) & v435);
          v281 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v428 + 48);
          if (v281(v280, 1, v427))
          {
            v282 = v426;
            memcpy(v279, v280, v426);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v428 + 16))(v279, v280, v427);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v279, 0, 1, v427);
            v282 = v426;
          }
          v314 = (void *)(((unint64_t)v279 + v429) & v435);
          v315 = (const void *)(((unint64_t)v280 + v429) & v435);
          if (v281(v315, 1, v427))
          {
            memcpy(v314, v315, v282);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v428 + 16))(v314, v315, v427);
            v282 = v426;
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v314, 0, 1, v427);
          }
          v332 = (void *)(((unint64_t)v314 + v429) & v435);
          v333 = (const void *)(((unint64_t)v315 + v429) & v435);
          if (v281(v333, 1, v427))
          {
            memcpy(v332, v333, v282);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v428 + 16))(v332, v333, v427);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v332, 0, 1, v427);
          }
          v283 = 12;
          goto LABEL_361;
        case 0xD:
          (*(void (**)(unint64_t, __int128 *, uint64_t))(v387 + 16))((unint64_t)&v3[v417] & v51, v121, v388);
          v283 = 13;
          v284 = v393;
          goto LABEL_379;
        case 0xE:
          (*(void (**)(unint64_t, __int128 *, uint64_t))(v414 + 16))((unint64_t)&v3[v417] & v51, v121, v415);
          v434 = (_OWORD *)((unint64_t)&v3[v417] & v51);
          v285 = (void *)(((unint64_t)v120 + v412) & v435);
          v286 = (const void *)(((unint64_t)v121 + v412) & v435);
          v287 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v428 + 48);
          if (v287(v286, 1, v427))
          {
            v288 = v426;
            memcpy(v285, v286, v426);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v428 + 16))(v285, v286, v427);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v285, 0, 1, v427);
            v288 = v426;
          }
          v316 = (void *)(((unint64_t)v285 + v429) & v435);
          v317 = (const void *)(((unint64_t)v286 + v429) & v435);
          if (v287(v317, 1, v427))
          {
            memcpy(v316, v317, v288);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v428 + 16))(v316, v317, v427);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v428 + 56))(v316, 0, 1, v427);
          }
          v283 = 14;
LABEL_361:
          v284 = v393;
          v123 = v430;
LABEL_378:
          v120 = v434;
LABEL_379:
          *((_BYTE *)v120 + v102) = v283;
          v350 = (void *)(((unint64_t)v120 + v284) & v419);
          v351 = (const void *)(((unint64_t)v121 + v284) & v419);
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v421 + 48))(v351, 1, v422))
          {
            memcpy(v350, v351, v389);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v421 + 16))(v350, v351, v422);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v421 + 56))(v350, 0, 1, v422);
          }
          v352 = (void *)(((unint64_t)v350 + v423) & v420);
          v353 = (const void *)(((unint64_t)v351 + v423) & v420);
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v424 + 48))(v353, 1, v123))
          {
            memcpy(v352, v353, v390);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v424 + 16))(v352, v353, v123);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v424 + 56))(v352, 0, 1, v123);
          }
          *(_QWORD *)(((unint64_t)v352 + v425) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v353 + v425) & 0xFFFFFFFFFFFFF8);
          v3[v436] = 0;
          swift_bridgeObjectRetain();
          break;
        default:
          if (v431 <= 3)
            v122 = v431;
          else
            v122 = 4;
          __asm { BR              X12 }
          return result;
      }
    }
  }
  return v3;
}

uint64_t sub_23BF757EC(uint64_t a1, unsigned __int8 *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  size_t v20;
  size_t v21;
  size_t v22;
  uint64_t v23;
  size_t v24;
  unint64_t v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  size_t v30;
  unint64_t v31;
  size_t v32;
  unint64_t v33;
  unint64_t v34;
  size_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unsigned int v47;
  int v48;
  int v49;
  unint64_t v50;
  unsigned int v51;
  unint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  unint64_t v89;
  void *v90;
  const void *v91;
  unsigned int (*v92)(const void *, uint64_t, uint64_t);
  size_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  char v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  unsigned int v145;
  uint64_t v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  uint64_t v157;
  unint64_t v158;
  void *v159;
  const void *v160;
  unsigned int (*v161)(const void *, uint64_t, uint64_t);
  size_t v162;
  uint64_t v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  void *v167;
  const void *v168;
  unsigned int (*v169)(const void *, uint64_t, uint64_t);
  uint64_t v170;
  unint64_t v171;
  void *v172;
  const void *v173;
  unsigned int (*v174)(const void *, uint64_t, uint64_t);
  uint64_t v175;
  unint64_t v176;
  void *v177;
  const void *v178;
  unsigned int (*v179)(const void *, uint64_t, uint64_t);
  size_t v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  uint64_t v188;
  unint64_t v189;
  void *v190;
  const void *v191;
  unsigned int (*v192)(const void *, uint64_t, uint64_t);
  __int128 v193;
  __int128 v194;
  __int128 v195;
  uint64_t v196;
  unint64_t v197;
  void *v198;
  const void *v199;
  uint64_t v200;
  size_t v201;
  uint64_t v202;
  uint64_t v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  uint64_t v210;
  unint64_t v211;
  void *v212;
  const void *v213;
  unsigned int (*v214)(const void *, uint64_t, uint64_t);
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  void *v218;
  unint64_t v219;
  uint64_t v220;
  const void *v221;
  unsigned int (*v222)(const void *, uint64_t, uint64_t);
  uint64_t v223;
  unint64_t v224;
  void *v225;
  const void *v226;
  unsigned int (*v227)(const void *, uint64_t, uint64_t);
  uint64_t v228;
  size_t v229;
  __int128 v230;
  uint64_t v231;
  unint64_t v232;
  void *v233;
  const void *v234;
  unsigned int (*v235)(const void *, uint64_t, uint64_t);
  uint64_t v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  uint64_t v242;
  unint64_t v243;
  void *v244;
  const void *v245;
  unsigned int (*v246)(const void *, uint64_t, uint64_t);
  uint64_t v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  uint64_t v251;
  unint64_t v252;
  void *v253;
  const void *v254;
  unsigned int (*v255)(const void *, uint64_t, uint64_t);
  uint64_t v256;
  _BYTE *v257;
  unint64_t v258;
  size_t v259;
  size_t v260;
  uint64_t v261;
  char v262;
  uint64_t v263;
  uint64_t v264;
  void *v265;
  uint64_t v266;
  const void *v267;
  void *v268;
  uint64_t v269;
  const void *v270;
  void *v271;
  const void *v272;
  void *v273;
  uint64_t v274;
  const void *v275;
  unint64_t v276;
  unint64_t v277;
  void *v278;
  const void *v279;
  void *v280;
  uint64_t v281;
  const void *v282;
  size_t v283;
  void *v284;
  uint64_t v285;
  const void *v286;
  void *v287;
  const void *v288;
  void *v289;
  const void *v290;
  void *v291;
  const void *v292;
  void *v293;
  const void *v294;
  void *v295;
  const void *v296;
  void *v297;
  const void *v298;
  void *v299;
  const void *v300;
  unint64_t v301;
  unint64_t v302;
  void (*v303)(unint64_t, unint64_t, uint64_t);
  void *v304;
  const void *v305;
  void *v306;
  const void *v307;
  unsigned int (*v308)(const void *, uint64_t, uint64_t);
  void *v309;
  const void *v310;
  void *v311;
  const void *v312;
  void *v313;
  const void *v314;
  void *v315;
  const void *v316;
  unint64_t v317;
  unint64_t v318;
  void *v319;
  const void *v320;
  void *v321;
  const void *v322;
  void *v323;
  const void *v324;
  void *v325;
  const void *v326;
  void *v327;
  const void *v328;
  void *v329;
  const void *v330;
  void *v331;
  const void *v332;
  void *v333;
  const void *v334;
  uint64_t result;
  unint64_t v336;
  size_t v337;
  char v338;
  uint64_t v339;
  unsigned int (*v340)(unint64_t, uint64_t, uint64_t);
  const void *v341;
  uint64_t v342;
  unint64_t v343;
  void *v344;
  const void *v345;
  size_t v346;
  uint64_t v347;
  uint64_t v348;
  size_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  unint64_t v358;
  size_t v359;
  unint64_t v360;
  unint64_t v361;
  uint64_t v362;
  unint64_t v363;
  unint64_t v364;
  unint64_t v365;
  unint64_t v366;
  unint64_t v367;
  unint64_t v368;
  size_t v369;
  uint64_t v370;
  size_t v371;
  size_t v372;
  size_t v373;
  size_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  size_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  size_t __n;
  size_t v384;
  size_t v385;
  size_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  unint64_t v405;
  unint64_t v406;
  unint64_t v407;
  unint64_t v408;
  unint64_t v409;
  uint64_t v410;
  size_t v411;
  size_t v412;
  size_t v413;
  size_t v414;
  size_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  size_t v420;
  size_t v421;
  unint64_t v422;
  uint64_t v423;
  _BYTE *v424;
  _BYTE *v425;
  _BYTE *v426;
  _BYTE *v427;
  void *v428;
  uint64_t v429;
  uint64_t v430;

  v429 = a3[5];
  v423 = *(_QWORD *)(v429 - 8);
  v5 = *(_QWORD *)(v423 + 64);
  v388 = a3[3];
  v6 = *(_QWORD *)(v388 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v410 = sub_23BFF82CC();
  v8 = *(_QWORD *)(v410 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v382 = a3[2];
  v10 = *(_QWORD *)(v382 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v348 = sub_23BFF8368();
  v12 = *(_QWORD *)(v348 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v377 = a3[7];
  v14 = *(_QWORD *)(v377 - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v362 = v7 + 248;
  v16 = *(_QWORD *)(v6 + 64);
  v17 = v16 + v9;
  v18 = v16 + v9 + 1;
  v370 = v18 + ((v7 + 248) & ~v7);
  v419 = v8;
  v19 = *(_QWORD *)(v8 + 64);
  if (*(_DWORD *)(v8 + 84))
    v20 = *(_QWORD *)(v8 + 64);
  else
    v20 = v19 + 1;
  v21 = v20 + v9;
  v22 = v20 + v11;
  v23 = *(_QWORD *)(v10 + 64);
  v380 = v23 + v11;
  v381 = v10;
  if (*(_DWORD *)(v10 + 84))
    v24 = *(_QWORD *)(v10 + 64);
  else
    v24 = v23 + 1;
  v25 = ((v23 + v11 + ((v20 + v11 + ((v20 + v9 + ((v20 + v9 + (v370 & ~v9)) & ~v9)) & ~v9)) & ~v11)) & ~v11) + v24;
  v378 = *(_QWORD *)(v6 + 64);
  if (v19 <= v16)
    v26 = *(_QWORD *)(v6 + 64);
  else
    v26 = *(_QWORD *)(v8 + 64);
  v346 = v20 + v13;
  v404 = *(unsigned __int8 *)(v12 + 80);
  v347 = *(_QWORD *)(v348 - 8);
  v27 = *(_QWORD *)(v12 + 64);
  if (((v20 + v13 + (v21 & ~v9)) & ~v13) + v27 > v26)
    v26 = ((v20 + v13 + (v21 & ~v9)) & ~v13) + v27;
  v369 = v26 + 1;
  v379 = v26;
  if (v26 + 1 > v25)
    v25 = v26 + 1;
  v357 = v7 + 216;
  v373 = v24 + v11;
  v374 = v24 + v15;
  v28 = (v24
       + v15
       + ((v24 + v11 + ((v22 + ((v21 + ((v21 + ((v18 + ((v7 + 216) & ~v7)) & ~v9)) & ~v9)) & ~v9)) & ~v11)) & ~v11)) & ~v15;
  v376 = *(_QWORD *)(v377 - 8);
  v29 = *(_QWORD *)(v14 + 64);
  if (*(_DWORD *)(v14 + 84))
    v30 = *(_QWORD *)(v14 + 64);
  else
    v30 = v29 + 1;
  v349 = v30;
  v31 = v28 + v30;
  v368 = v31;
  if (v31 > v25)
    v25 = v31;
  v356 = v9 + 64;
  v367 = ((v22 + ((v21 + ((v9 + 64) & ~v9)) & ~v9)) & ~v11) + v24;
  if (v367 > v25)
    v25 = ((v22 + ((v21 + ((v9 + 64) & ~v9)) & ~v9)) & ~v11) + v24;
  v32 = v20 + (v17 & ~v9);
  v33 = ((v32 + v9) & ~v9) + v20;
  v365 = ((v33 + v9) & ~v9) + v20;
  if (v365 > v25)
    v25 = ((v33 + v9) & ~v9) + v20;
  v375 = v9 + 24;
  v34 = (v9 + 24 + (v32 & 0xFFFFFFFFFFFFFFF8)) & ~v9;
  if (v34 + v20 > v25)
    v25 = v34 + v20;
  v351 = v7 + 24;
  v364 = ((v21 + ((v17 + ((v7 + 24) & ~v7)) & ~v9)) & ~v9) + v20;
  if (v364 > v25)
    v25 = ((v21 + ((v17 + ((v7 + 24) & ~v7)) & ~v9)) & ~v9) + v20;
  v366 = v34 + v20;
  if (v34 + v20 > v25)
    v25 = v34 + v20;
  v352 = v7 + 104;
  v363 = ((v21 + ((v21 + ((v17 + ((v7 + 104) & ~v7)) & ~v9)) & ~v9)) & ~v9) + v20;
  if (v363 > v25)
    v25 = ((v21 + ((v21 + ((v17 + ((v7 + 104) & ~v7)) & ~v9)) & ~v9)) & ~v9) + v20;
  v355 = v7 + 160;
  v384 = v20 + v11;
  v399 = v11;
  __n = v24;
  v361 = ((v22 + ((v21 + ((v21 + ((v21 + ((v17 + ((v7 + 160) & ~v7)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v11) + v24;
  if (v361 > v25)
    v25 = ((v22 + ((v21 + ((v21 + ((v21 + ((v17 + ((v7 + 160) & ~v7)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v11) + v24;
  v350 = v7 + 56;
  v360 = ((v21 + ((v21 + ((v17 + ((v7 + 56) & ~v7)) & ~v9)) & ~v9)) & ~v9) + v20;
  if (v360 > v25)
    v25 = ((v21 + ((v21 + ((v17 + ((v7 + 56) & ~v7)) & ~v9)) & ~v9)) & ~v9) + v20;
  v353 = v7 + 64;
  v35 = ((v17 + ((v7 + 64) & ~v7)) & ~v9) + v20;
  v359 = v35 + 1;
  if (v35 + 1 > v25)
    v25 = v35 + 1;
  v354 = v7 + 128;
  v387 = v16 + v9;
  v420 = v20 + v9;
  v421 = v20;
  v358 = ((v21 + ((v21 + ((v17 + ((v7 + 128) & ~v7)) & ~v9)) & ~v9)) & ~v9) + v20;
  if (v358 > v25)
    v25 = ((v21 + ((v21 + ((v17 + ((v7 + 128) & ~v7)) & ~v9)) & ~v9)) & ~v9) + v20;
  v371 = v33;
  v372 = *(_QWORD *)(v14 + 64);
  if (v29 > v25)
    v25 = *(_QWORD *)(v14 + 64);
  if (v33 <= v25)
    v36 = v25;
  else
    v36 = v33;
  v416 = a3[4];
  v37 = *(_QWORD *)(v416 - 8);
  if (*(_DWORD *)(v37 + 84))
    v38 = *(_QWORD *)(v37 + 64);
  else
    v38 = *(_QWORD *)(v37 + 64) + 1;
  v391 = a3[6];
  v392 = *(_QWORD *)(v416 - 8);
  v39 = *(_QWORD *)(v391 - 8);
  v393 = *(unsigned __int8 *)(v14 + 80);
  v40 = v7 | v9 | v11 | v13 | v15 | 7;
  v41 = *(unsigned __int8 *)(v37 + 80);
  v42 = v5;
  v43 = v40 + v5;
  v390 = v36 + v41 + 1;
  v44 = *(unsigned __int8 *)(v39 + 80);
  v385 = v38;
  v417 = v38 + v44;
  v418 = v39;
  if (*(_DWORD *)(v39 + 84))
    v45 = *(_QWORD *)(v39 + 64);
  else
    v45 = *(_QWORD *)(v39 + 64) + 1;
  v394 = v42;
  v386 = v45;
  v389 = v45 + 7;
  if (((v42 + 7) & 0xFFFFFFFFFFFFFFF8) + 249 <= ((v45 + 7 + ((v38 + v44 + ((v390 + (v43 & ~v40)) & ~v41)) & ~v44)) & 0xFFFFFFFFFFFFFFF8)
                                                 + 8)
    v46 = ((v45 + 7 + ((v38 + v44 + ((v390 + (v43 & ~v40)) & ~v41)) & ~v44)) & 0xFFFFFFFFFFFFFFF8) + 8;
  else
    v46 = ((v42 + 7) & 0xFFFFFFFFFFFFFFF8) + 249;
  v47 = a2[v46];
  if (v47 >= 2)
  {
    v48 = v46 <= 3 ? v46 : 4;
    if (v48)
    {
      if (v48 == 4)
      {
        v49 = *(_DWORD *)a2;
        if (v46 >= 4)
        {
LABEL_60:
          v47 = v49 + 2;
          goto LABEL_63;
        }
      }
      else
      {
        v49 = *a2;
        if (v46 >= 4)
          goto LABEL_60;
      }
      v47 = (v49 | ((v47 - 2) << (8 * v46))) + 2;
    }
  }
LABEL_63:
  v422 = v46;
  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v423 + 32))(a1, a2, v429);
  if (v47 == 1)
  {
    v50 = (unint64_t)&a2[v394 + 7] & 0xFFFFFFFFFFFFFFF8;
    v51 = *(unsigned __int8 *)(v50 + 248);
    if (v51 >= 0xB)
      v51 = *(_DWORD *)v50 + 11;
    v52 = (a1 + v394 + 7) & 0xFFFFFFFFFFFFFFF8;
    switch(v51)
    {
      case 0u:
        v53 = *(_OWORD *)v50;
        v54 = *(_OWORD *)(v50 + 16);
        v55 = *(_OWORD *)(v50 + 48);
        *(_OWORD *)(v52 + 32) = *(_OWORD *)(v50 + 32);
        *(_OWORD *)(v52 + 48) = v55;
        *(_OWORD *)v52 = v53;
        *(_OWORD *)(v52 + 16) = v54;
        v56 = *(_OWORD *)(v50 + 64);
        v57 = *(_OWORD *)(v50 + 80);
        v58 = *(_OWORD *)(v50 + 112);
        *(_OWORD *)(v52 + 96) = *(_OWORD *)(v50 + 96);
        *(_OWORD *)(v52 + 112) = v58;
        *(_OWORD *)(v52 + 64) = v56;
        *(_OWORD *)(v52 + 80) = v57;
        v59 = *(_OWORD *)(v50 + 128);
        v60 = *(_OWORD *)(v50 + 144);
        v61 = *(_OWORD *)(v50 + 176);
        *(_OWORD *)(v52 + 160) = *(_OWORD *)(v50 + 160);
        *(_OWORD *)(v52 + 176) = v61;
        *(_OWORD *)(v52 + 128) = v59;
        *(_OWORD *)(v52 + 144) = v60;
        v62 = *(_OWORD *)(v50 + 192);
        v63 = *(_OWORD *)(v50 + 208);
        v64 = *(_OWORD *)(v50 + 224);
        *(_QWORD *)(v52 + 240) = *(_QWORD *)(v50 + 240);
        *(_OWORD *)(v52 + 208) = v63;
        *(_OWORD *)(v52 + 224) = v64;
        *(_OWORD *)(v52 + 192) = v62;
        *(_BYTE *)(v52 + 248) = 0;
        goto LABEL_87;
      case 1u:
        v94 = *(_OWORD *)(v50 + 16);
        *(_OWORD *)v52 = *(_OWORD *)v50;
        *(_OWORD *)(v52 + 16) = v94;
        v95 = *(_OWORD *)(v50 + 32);
        v96 = *(_OWORD *)(v50 + 48);
        v97 = *(_OWORD *)(v50 + 80);
        *(_OWORD *)(v52 + 64) = *(_OWORD *)(v50 + 64);
        *(_OWORD *)(v52 + 80) = v97;
        *(_OWORD *)(v52 + 32) = v95;
        *(_OWORD *)(v52 + 48) = v96;
        v98 = *(_OWORD *)(v50 + 96);
        v99 = *(_OWORD *)(v50 + 112);
        v100 = *(_OWORD *)(v50 + 144);
        *(_OWORD *)(v52 + 128) = *(_OWORD *)(v50 + 128);
        *(_OWORD *)(v52 + 144) = v100;
        *(_OWORD *)(v52 + 96) = v98;
        *(_OWORD *)(v52 + 112) = v99;
        v101 = *(_OWORD *)(v50 + 160);
        v102 = *(_OWORD *)(v50 + 176);
        v103 = *(_OWORD *)(v50 + 192);
        *(_QWORD *)(v52 + 208) = *(_QWORD *)(v50 + 208);
        *(_OWORD *)(v52 + 176) = v102;
        *(_OWORD *)(v52 + 192) = v103;
        *(_OWORD *)(v52 + 160) = v101;
        v104 = 1;
        *(_BYTE *)(v52 + 248) = 1;
        break;
      case 2u:
        v105 = *(_OWORD *)v50;
        v106 = *(_OWORD *)(v50 + 16);
        v107 = *(_OWORD *)(v50 + 48);
        *(_OWORD *)(v52 + 32) = *(_OWORD *)(v50 + 32);
        *(_OWORD *)(v52 + 48) = v107;
        *(_OWORD *)v52 = v105;
        *(_OWORD *)(v52 + 16) = v106;
        *(_BYTE *)(v52 + 248) = 2;
        goto LABEL_87;
      case 3u:
        *(_OWORD *)v52 = *(_OWORD *)v50;
        *(_BYTE *)(v52 + 248) = 3;
        goto LABEL_87;
      case 4u:
        v108 = *(_OWORD *)v50;
        *(_QWORD *)(v52 + 16) = *(_QWORD *)(v50 + 16);
        *(_OWORD *)v52 = v108;
        *(_BYTE *)(v52 + 248) = 4;
        goto LABEL_87;
      case 5u:
        *(_OWORD *)v52 = *(_OWORD *)v50;
        *(_BYTE *)(v52 + 248) = 5;
        goto LABEL_87;
      case 6u:
        v109 = *(_OWORD *)v50;
        v110 = *(_OWORD *)(v50 + 32);
        *(_OWORD *)(v52 + 16) = *(_OWORD *)(v50 + 16);
        *(_OWORD *)(v52 + 32) = v110;
        *(_OWORD *)v52 = v109;
        v111 = *(_OWORD *)(v50 + 48);
        v112 = *(_OWORD *)(v50 + 64);
        v113 = *(_OWORD *)(v50 + 80);
        *(_QWORD *)(v52 + 96) = *(_QWORD *)(v50 + 96);
        *(_OWORD *)(v52 + 64) = v112;
        *(_OWORD *)(v52 + 80) = v113;
        *(_OWORD *)(v52 + 48) = v111;
        *(_BYTE *)(v52 + 248) = 6;
        goto LABEL_87;
      case 7u:
        v114 = *(_OWORD *)(v50 + 16);
        *(_OWORD *)v52 = *(_OWORD *)v50;
        *(_OWORD *)(v52 + 16) = v114;
        v115 = *(_OWORD *)(v50 + 32);
        v116 = *(_OWORD *)(v50 + 48);
        v117 = *(_OWORD *)(v50 + 80);
        *(_OWORD *)(v52 + 64) = *(_OWORD *)(v50 + 64);
        *(_OWORD *)(v52 + 80) = v117;
        *(_OWORD *)(v52 + 32) = v115;
        *(_OWORD *)(v52 + 48) = v116;
        v118 = *(_OWORD *)(v50 + 96);
        v119 = *(_OWORD *)(v50 + 112);
        v120 = *(_OWORD *)(v50 + 144);
        *(_OWORD *)(v52 + 128) = *(_OWORD *)(v50 + 128);
        *(_OWORD *)(v52 + 144) = v120;
        *(_OWORD *)(v52 + 96) = v118;
        *(_OWORD *)(v52 + 112) = v119;
        *(_BYTE *)(v52 + 248) = 7;
        goto LABEL_87;
      case 8u:
        v121 = *(_OWORD *)v50;
        v122 = *(_OWORD *)(v50 + 16);
        v123 = *(_OWORD *)(v50 + 32);
        *(_QWORD *)(v52 + 48) = *(_QWORD *)(v50 + 48);
        *(_OWORD *)(v52 + 16) = v122;
        *(_OWORD *)(v52 + 32) = v123;
        *(_OWORD *)v52 = v121;
        *(_BYTE *)(v52 + 248) = 8;
        goto LABEL_87;
      case 9u:
        v124 = *(_OWORD *)v50;
        v125 = *(_OWORD *)(v50 + 16);
        v126 = *(_OWORD *)(v50 + 48);
        *(_OWORD *)(v52 + 32) = *(_OWORD *)(v50 + 32);
        *(_OWORD *)(v52 + 48) = v126;
        *(_OWORD *)v52 = v124;
        *(_OWORD *)(v52 + 16) = v125;
        *(_BYTE *)(v52 + 248) = 9;
        goto LABEL_87;
      case 0xAu:
        v127 = *(_OWORD *)v50;
        v128 = *(_OWORD *)(v50 + 16);
        v129 = *(_OWORD *)(v50 + 48);
        *(_OWORD *)(v52 + 32) = *(_OWORD *)(v50 + 32);
        *(_OWORD *)(v52 + 48) = v129;
        *(_OWORD *)v52 = v127;
        *(_OWORD *)(v52 + 16) = v128;
        v130 = *(_OWORD *)(v50 + 64);
        v131 = *(_OWORD *)(v50 + 80);
        v132 = *(_OWORD *)(v50 + 112);
        *(_OWORD *)(v52 + 96) = *(_OWORD *)(v50 + 96);
        *(_OWORD *)(v52 + 112) = v132;
        *(_OWORD *)(v52 + 64) = v130;
        *(_OWORD *)(v52 + 80) = v131;
        *(_BYTE *)(v52 + 248) = 10;
        goto LABEL_87;
      default:
        v133 = *(_OWORD *)v50;
        v134 = *(_OWORD *)(v50 + 16);
        v135 = *(_OWORD *)(v50 + 48);
        *(_OWORD *)(v52 + 32) = *(_OWORD *)(v50 + 32);
        *(_OWORD *)(v52 + 48) = v135;
        *(_OWORD *)v52 = v133;
        *(_OWORD *)(v52 + 16) = v134;
        v136 = *(_OWORD *)(v50 + 64);
        v137 = *(_OWORD *)(v50 + 80);
        v138 = *(_OWORD *)(v50 + 112);
        *(_OWORD *)(v52 + 96) = *(_OWORD *)(v50 + 96);
        *(_OWORD *)(v52 + 112) = v138;
        *(_OWORD *)(v52 + 64) = v136;
        *(_OWORD *)(v52 + 80) = v137;
        v139 = *(_OWORD *)(v50 + 128);
        v140 = *(_OWORD *)(v50 + 144);
        v141 = *(_OWORD *)(v50 + 176);
        *(_OWORD *)(v52 + 160) = *(_OWORD *)(v50 + 160);
        *(_OWORD *)(v52 + 176) = v141;
        *(_OWORD *)(v52 + 128) = v139;
        *(_OWORD *)(v52 + 144) = v140;
        v142 = *(_OWORD *)(v50 + 192);
        v143 = *(_OWORD *)(v50 + 208);
        v144 = *(_OWORD *)(v50 + 224);
        *(_OWORD *)(v52 + 233) = *(_OWORD *)(v50 + 233);
        *(_OWORD *)(v52 + 208) = v143;
        *(_OWORD *)(v52 + 224) = v144;
        *(_OWORD *)(v52 + 192) = v142;
LABEL_87:
        v104 = 1;
        break;
    }
  }
  else
  {
    v65 = (v43 + a1) & ~v40;
    v66 = (unint64_t)&a2[v43] & ~v40;
    v67 = v36;
    v68 = *(unsigned __int8 *)(v66 + v36);
    v70 = v410;
    v71 = ~v7;
    v72 = ~v9;
    v73 = ~v404;
    v74 = ~v393;
    v75 = ~v44;
    v430 = ~v41;
    switch(v68)
    {
      case 0:
        v395 = ~v44;
        v400 = ~v399;
        v411 = v67;
        v76 = *(_OWORD *)v66;
        v77 = *(_OWORD *)(v66 + 16);
        v78 = *(_OWORD *)(v66 + 48);
        *(_OWORD *)(v65 + 32) = *(_OWORD *)(v66 + 32);
        *(_OWORD *)(v65 + 48) = v78;
        *(_OWORD *)v65 = v76;
        *(_OWORD *)(v65 + 16) = v77;
        v79 = *(_OWORD *)(v66 + 64);
        v80 = *(_OWORD *)(v66 + 80);
        v81 = *(_OWORD *)(v66 + 112);
        *(_OWORD *)(v65 + 96) = *(_OWORD *)(v66 + 96);
        *(_OWORD *)(v65 + 112) = v81;
        *(_OWORD *)(v65 + 64) = v79;
        *(_OWORD *)(v65 + 80) = v80;
        v82 = *(_OWORD *)(v66 + 128);
        v83 = *(_OWORD *)(v66 + 144);
        v84 = *(_OWORD *)(v66 + 176);
        *(_OWORD *)(v65 + 160) = *(_OWORD *)(v66 + 160);
        *(_OWORD *)(v65 + 176) = v84;
        *(_OWORD *)(v65 + 128) = v82;
        *(_OWORD *)(v65 + 144) = v83;
        v85 = *(_OWORD *)(v66 + 192);
        v86 = *(_OWORD *)(v66 + 208);
        v87 = *(_OWORD *)(v66 + 224);
        *(_QWORD *)(v65 + 240) = *(_QWORD *)(v66 + 240);
        *(_OWORD *)(v65 + 208) = v86;
        *(_OWORD *)(v65 + 224) = v87;
        *(_OWORD *)(v65 + 192) = v85;
        v424 = (_BYTE *)v65;
        v88 = (v362 + v65) & v71;
        v405 = v66;
        v89 = (v362 + v66) & v71;
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 32))(v88, v89, v388);
        *(_BYTE *)(v88 + v378) = *(_BYTE *)(v89 + v378);
        v90 = (void *)((v9 + 1 + v88 + v378) & v72);
        v91 = (const void *)((v9 + 1 + v89 + v378) & v72);
        v92 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v419 + 48);
        if (v92(v91, 1, v70))
        {
          v93 = v421;
          memcpy(v90, v91, v421);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v419 + 32))(v90, v91, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v419 + 56))(v90, 0, 1, v70);
          v93 = v421;
        }
        v265 = (void *)(((unint64_t)v90 + v420) & v72);
        v266 = v72;
        v267 = (const void *)(((unint64_t)v91 + v420) & v72);
        if (v92(v267, 1, v70))
        {
          memcpy(v265, v267, v93);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v419 + 32))(v265, v267, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v419 + 56))(v265, 0, 1, v70);
        }
        v202 = v389;
        v289 = (void *)(((unint64_t)v265 + v420) & v266);
        v290 = (const void *)(((unint64_t)v267 + v420) & v266);
        if (v92(v290, 1, v70))
        {
          memcpy(v289, v290, v93);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v419 + 32))(v289, v290, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v419 + 56))(v289, 0, 1, v70);
        }
        v203 = v392;
        v200 = v418;
        v301 = ((unint64_t)v289 + v384) & v400;
        v302 = ((unint64_t)v290 + v384) & v400;
        v303 = *(void (**)(unint64_t, unint64_t, uint64_t))(v381 + 32);
        v303(v301, v302, v382);
        v304 = (void *)((v380 + v301) & v400);
        v305 = (const void *)((v380 + v302) & v400);
        v75 = v395;
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v381 + 48))(v305, 1, v382))
        {
          memcpy(v304, v305, __n);
        }
        else
        {
          v303((unint64_t)v304, (unint64_t)v305, v382);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v381 + 56))(v304, 0, 1, v382);
        }
        v262 = 0;
        v264 = v391;
        goto LABEL_224;
      case 1:
        v145 = *(unsigned __int8 *)(v66 + v379);
        if (v145 >= 3)
        {
          if (v379 <= 3)
            v146 = v379;
          else
            v146 = 4;
          __asm { BR              X12 }
        }
        if (v145 == 2)
        {
          v339 = ~v9;
          v414 = v67;
          v428 = (void *)v65;
          v398 = ~v44;
          v340 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v419 + 48);
          v341 = (const void *)v66;
          v342 = v65;
          if (v340(v66, 1, v70))
          {
            memcpy(v428, v341, v421);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v419 + 32))(v428, v341, v70);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v419 + 56))(v428, 0, 1, v70);
          }
          v344 = (void *)((v342 + v9 + v421) & v339);
          v409 = (unint64_t)v341;
          v345 = (const void *)(((unint64_t)v341 + v9 + v421) & v339);
          v202 = v389;
          v200 = v418;
          if (v340((unint64_t)v345, 1, v70))
          {
            memcpy(v344, v345, v421);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v419 + 32))(v344, v345, v70);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v419 + 56))(v344, 0, 1, v70);
          }
          v75 = v398;
          v203 = v392;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v347 + 32))(((unint64_t)v344 + v346) & v73, ((unint64_t)v345 + v346) & v73, v348);
          v338 = 2;
          v263 = v390;
          v264 = v391;
          v219 = v409;
          v260 = v414;
          v257 = v428;
          v261 = v430;
        }
        else
        {
          if (v145 == 1)
          {
            v200 = v418;
            v257 = (_BYTE *)v65;
            v336 = v66;
            v337 = v67;
            (*(void (**)(uint64_t, unint64_t, uint64_t))(v419 + 32))(v65, v66, v410);
            v260 = v337;
            v261 = ~v41;
            v219 = v336;
            v338 = 1;
            v263 = v390;
            v264 = v391;
            v202 = v389;
          }
          else
          {
            v415 = v67;
            v200 = v418;
            v257 = (_BYTE *)v65;
            v343 = v66;
            (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 32))(v65, v66, v388);
            v219 = v343;
            v338 = 0;
            v263 = v390;
            v264 = v391;
            v202 = v389;
            v261 = v430;
            v260 = v415;
          }
          v203 = v392;
        }
        v257[v379] = v338;
        v262 = 1;
        goto LABEL_258;
      case 2:
        v396 = ~v44;
        v401 = ~v399;
        v411 = v67;
        v147 = *(_OWORD *)(v66 + 16);
        *(_OWORD *)v65 = *(_OWORD *)v66;
        *(_OWORD *)(v65 + 16) = v147;
        v148 = *(_OWORD *)(v66 + 32);
        v149 = *(_OWORD *)(v66 + 48);
        v150 = *(_OWORD *)(v66 + 80);
        *(_OWORD *)(v65 + 64) = *(_OWORD *)(v66 + 64);
        *(_OWORD *)(v65 + 80) = v150;
        *(_OWORD *)(v65 + 32) = v148;
        *(_OWORD *)(v65 + 48) = v149;
        v151 = *(_OWORD *)(v66 + 96);
        v152 = *(_OWORD *)(v66 + 112);
        v153 = *(_OWORD *)(v66 + 144);
        *(_OWORD *)(v65 + 128) = *(_OWORD *)(v66 + 128);
        *(_OWORD *)(v65 + 144) = v153;
        *(_OWORD *)(v65 + 96) = v151;
        *(_OWORD *)(v65 + 112) = v152;
        v154 = *(_OWORD *)(v66 + 160);
        v155 = *(_OWORD *)(v66 + 176);
        v156 = *(_OWORD *)(v66 + 192);
        *(_QWORD *)(v65 + 208) = *(_QWORD *)(v66 + 208);
        *(_OWORD *)(v65 + 176) = v155;
        *(_OWORD *)(v65 + 192) = v156;
        *(_OWORD *)(v65 + 160) = v154;
        v424 = (_BYTE *)v65;
        v157 = (v357 + v65) & v71;
        v405 = v66;
        v158 = (v357 + v66) & v71;
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 32))(v157, v158, v388);
        *(_BYTE *)(v157 + v378) = *(_BYTE *)(v158 + v378);
        v159 = (void *)((v9 + 1 + v157 + v378) & v72);
        v160 = (const void *)((v9 + 1 + v158 + v378) & v72);
        v161 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v419 + 48);
        if (v161(v160, 1, v70))
        {
          v162 = v421;
          memcpy(v159, v160, v421);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v419 + 32))(v159, v160, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v419 + 56))(v159, 0, 1, v70);
          v162 = v421;
        }
        v268 = (void *)(((unint64_t)v159 + v420) & v72);
        v269 = v72;
        v270 = (const void *)(((unint64_t)v160 + v420) & v72);
        if (v161(v270, 1, v70))
        {
          memcpy(v268, v270, v162);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v419 + 32))(v268, v270, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v419 + 56))(v268, 0, 1, v70);
        }
        v202 = v389;
        v291 = (void *)(((unint64_t)v268 + v420) & v269);
        v292 = (const void *)(((unint64_t)v270 + v420) & v269);
        if (v161(v292, 1, v70))
        {
          memcpy(v291, v292, v162);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v419 + 32))(v291, v292, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v419 + 56))(v291, 0, 1, v70);
        }
        v203 = v392;
        v200 = v418;
        v306 = (void *)(((unint64_t)v291 + v384) & v401);
        v307 = (const void *)(((unint64_t)v292 + v384) & v401);
        v308 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v381 + 48);
        if (v308(v307, 1, v382))
        {
          memcpy(v306, v307, __n);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v381 + 32))(v306, v307, v382);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v381 + 56))(v306, 0, 1, v382);
        }
        v311 = (void *)(((unint64_t)v306 + v373) & v401);
        v312 = (const void *)(((unint64_t)v307 + v373) & v401);
        if (v308(v312, 1, v382))
        {
          memcpy(v311, v312, __n);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v381 + 32))(v311, v312, v382);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v381 + 56))(v311, 0, 1, v382);
        }
        v315 = (void *)(((unint64_t)v311 + v374) & v74);
        v316 = (const void *)(((unint64_t)v312 + v374) & v74);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v376 + 48))(v316, 1, v377))
        {
          memcpy(v315, v316, v349);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v376 + 32))(v315, v316, v377);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v376 + 56))(v315, 0, 1, v377);
        }
        v262 = 2;
        v263 = v390;
        v264 = v391;
        v75 = v396;
        goto LABEL_227;
      case 3:
        v163 = ~v399;
        v411 = v67;
        v164 = *(_OWORD *)v66;
        v165 = *(_OWORD *)(v66 + 16);
        v166 = *(_OWORD *)(v66 + 48);
        *(_OWORD *)(v65 + 32) = *(_OWORD *)(v66 + 32);
        *(_OWORD *)(v65 + 48) = v166;
        *(_OWORD *)v65 = v164;
        *(_OWORD *)(v65 + 16) = v165;
        v424 = (_BYTE *)v65;
        v167 = (void *)((v356 + v65) & v72);
        v405 = v66;
        v168 = (const void *)((v356 + v66) & v72);
        v169 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v419 + 48);
        if (v169(v168, 1, v70))
        {
          memcpy(v167, v168, v421);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v419 + 32))(v167, v168, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v419 + 56))(v167, 0, 1, v70);
        }
        v271 = (void *)(((unint64_t)v167 + v420) & v72);
        v272 = (const void *)(((unint64_t)v168 + v420) & v72);
        if (v169(v272, 1, v70))
        {
          memcpy(v271, v272, v421);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v419 + 32))(v271, v272, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v419 + 56))(v271, 0, 1, v70);
        }
        v264 = v391;
        v203 = v392;
        v202 = v389;
        v200 = v418;
        v293 = (void *)(((unint64_t)v271 + v384) & v163);
        v294 = (const void *)(((unint64_t)v272 + v384) & v163);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v381 + 48))(v294, 1, v382))
        {
          memcpy(v293, v294, __n);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v381 + 32))(v293, v294, v382);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v381 + 56))(v293, 0, 1, v382);
        }
        v262 = 3;
        goto LABEL_224;
      case 4:
        v412 = v67;
        v170 = v65;
        v171 = v66;
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 32))(v65, v66, v388);
        v425 = (_BYTE *)v170;
        v172 = (void *)((v387 + v170) & v72);
        v406 = v171;
        v173 = (const void *)((v387 + v171) & v72);
        v174 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v419 + 48);
        if (v174(v173, 1, v70))
        {
          memcpy(v172, v173, v421);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v419 + 32))(v172, v173, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v419 + 56))(v172, 0, 1, v70);
        }
        v273 = (void *)(((unint64_t)v172 + v420) & v72);
        v274 = v72;
        v275 = (const void *)(((unint64_t)v173 + v420) & v72);
        v202 = v389;
        if (v174(v275, 1, v70))
        {
          memcpy(v273, v275, v421);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v419 + 32))(v273, v275, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v419 + 56))(v273, 0, 1, v70);
        }
        v200 = v418;
        v295 = (void *)(((unint64_t)v273 + v420) & v274);
        v296 = (const void *)(((unint64_t)v275 + v420) & v274);
        if (v174(v296, 1, v70))
        {
          memcpy(v295, v296, v421);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v419 + 32))(v295, v296, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v419 + 56))(v295, 0, 1, v70);
        }
        v262 = 4;
        goto LABEL_255;
      case 5:
        v413 = v67;
        v223 = v65;
        v224 = v66;
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 32))(v65, v66, v388);
        v427 = (_BYTE *)v223;
        v225 = (void *)((v387 + v223) & v72);
        v408 = v224;
        v226 = (const void *)((v387 + v224) & v72);
        v227 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v419 + 48);
        v397 = ~v44;
        v228 = v72;
        if (v227(v226, 1, v70))
        {
          v229 = v421;
          memcpy(v225, v226, v421);
          v202 = v389;
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v419 + 32))(v225, v226, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v419 + 56))(v225, 0, 1, v70);
          v202 = v389;
          v229 = v421;
        }
        *((_BYTE *)v225 + v229) = *((_BYTE *)v226 + v229);
        v317 = ((unint64_t)v225 + v229) & 0xFFFFFFFFFFFFFFF8;
        v318 = ((unint64_t)v226 + v229) & 0xFFFFFFFFFFFFFFF8;
        *(_OWORD *)(v317 + 8) = *(_OWORD *)(v318 + 8);
        v319 = (void *)((v375 + v317) & v228);
        v320 = (const void *)((v375 + v318) & v228);
        v200 = v418;
        if (v227(v320, 1, v70))
        {
          memcpy(v319, v320, v229);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v419 + 32))(v319, v320, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v419 + 56))(v319, 0, 1, v70);
        }
        v262 = 5;
        v263 = v390;
        v264 = v391;
        v219 = v408;
        goto LABEL_244;
      case 6:
        v413 = v67;
        v230 = *(_OWORD *)v66;
        *(_QWORD *)(v65 + 16) = *(_QWORD *)(v66 + 16);
        *(_OWORD *)v65 = v230;
        v427 = (_BYTE *)v65;
        v231 = (v351 + v65) & v71;
        v219 = v66;
        v232 = (v351 + v66) & v71;
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 32))(v231, v232, v388);
        v233 = (void *)((v387 + v231) & v72);
        v234 = (const void *)((v387 + v232) & v72);
        v235 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v419 + 48);
        v397 = ~v44;
        v236 = v72;
        if (v235(v234, 1, v70))
        {
          memcpy(v233, v234, v421);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v419 + 32))(v233, v234, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v419 + 56))(v233, 0, 1, v70);
        }
        v202 = v389;
        v321 = (void *)(((unint64_t)v233 + v420) & v236);
        v322 = (const void *)(((unint64_t)v234 + v420) & v236);
        v200 = v418;
        if (v235(v322, 1, v70))
        {
          memcpy(v321, v322, v421);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v419 + 32))(v321, v322, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v419 + 56))(v321, 0, 1, v70);
        }
        v262 = 6;
        v263 = v390;
        v264 = v391;
LABEL_244:
        v257 = v427;
        v261 = v430;
        v260 = v413;
        v203 = v392;
        v75 = v397;
        goto LABEL_258;
      case 7:
        v412 = v67;
        v175 = v65;
        v176 = v66;
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 32))(v65, v66, v388);
        v425 = (_BYTE *)v175;
        v177 = (void *)((v387 + v175) & v72);
        v406 = v176;
        v178 = (const void *)((v387 + v176) & v72);
        v179 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v419 + 48);
        if (v179(v178, 1, v70))
        {
          v180 = v421;
          memcpy(v177, v178, v421);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v419 + 32))(v177, v178, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v419 + 56))(v177, 0, 1, v70);
          v180 = v421;
        }
        v200 = v418;
        *((_BYTE *)v177 + v180) = *((_BYTE *)v178 + v180);
        v276 = ((unint64_t)v177 + v180) & 0xFFFFFFFFFFFFFFF8;
        v277 = ((unint64_t)v178 + v180) & 0xFFFFFFFFFFFFFFF8;
        *(_OWORD *)(v276 + 8) = *(_OWORD *)(v277 + 8);
        v278 = (void *)((v375 + v276) & v72);
        v279 = (const void *)((v375 + v277) & v72);
        v202 = v389;
        if (v179(v279, 1, v70))
        {
          memcpy(v278, v279, v180);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v419 + 32))(v278, v279, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v419 + 56))(v278, 0, 1, v70);
        }
        v262 = 7;
        goto LABEL_255;
      case 8:
        v412 = v67;
        v237 = *(_OWORD *)v66;
        v238 = *(_OWORD *)(v66 + 32);
        *(_OWORD *)(v65 + 16) = *(_OWORD *)(v66 + 16);
        *(_OWORD *)(v65 + 32) = v238;
        *(_OWORD *)v65 = v237;
        v239 = *(_OWORD *)(v66 + 48);
        v240 = *(_OWORD *)(v66 + 64);
        v241 = *(_OWORD *)(v66 + 80);
        *(_QWORD *)(v65 + 96) = *(_QWORD *)(v66 + 96);
        *(_OWORD *)(v65 + 64) = v240;
        *(_OWORD *)(v65 + 80) = v241;
        *(_OWORD *)(v65 + 48) = v239;
        v425 = (_BYTE *)v65;
        v242 = (v352 + v65) & v71;
        v406 = v66;
        v243 = (v352 + v66) & v71;
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 32))(v242, v243, v388);
        v244 = (void *)((v387 + v242) & v72);
        v245 = (const void *)((v387 + v243) & v72);
        v246 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v419 + 48);
        v247 = v72;
        if (v246(v245, 1, v70))
        {
          memcpy(v244, v245, v421);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v419 + 32))(v244, v245, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v419 + 56))(v244, 0, 1, v70);
        }
        v202 = v389;
        v323 = (void *)(((unint64_t)v244 + v420) & v247);
        v324 = (const void *)(((unint64_t)v245 + v420) & v247);
        if (v246(v324, 1, v70))
        {
          memcpy(v323, v324, v421);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v419 + 32))(v323, v324, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v419 + 56))(v323, 0, 1, v70);
        }
        v327 = (void *)(((unint64_t)v323 + v420) & v247);
        v328 = (const void *)(((unint64_t)v324 + v420) & v247);
        v200 = v418;
        if (v246(v328, 1, v70))
        {
          memcpy(v327, v328, v421);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v419 + 32))(v327, v328, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v419 + 56))(v327, 0, 1, v70);
        }
        v262 = 8;
        goto LABEL_255;
      case 9:
        v402 = ~v399;
        v411 = v67;
        v181 = *(_OWORD *)(v66 + 16);
        *(_OWORD *)v65 = *(_OWORD *)v66;
        *(_OWORD *)(v65 + 16) = v181;
        v182 = *(_OWORD *)(v66 + 32);
        v183 = *(_OWORD *)(v66 + 48);
        v184 = *(_OWORD *)(v66 + 80);
        *(_OWORD *)(v65 + 64) = *(_OWORD *)(v66 + 64);
        *(_OWORD *)(v65 + 80) = v184;
        *(_OWORD *)(v65 + 32) = v182;
        *(_OWORD *)(v65 + 48) = v183;
        v185 = *(_OWORD *)(v66 + 96);
        v186 = *(_OWORD *)(v66 + 112);
        v187 = *(_OWORD *)(v66 + 144);
        *(_OWORD *)(v65 + 128) = *(_OWORD *)(v66 + 128);
        *(_OWORD *)(v65 + 144) = v187;
        *(_OWORD *)(v65 + 96) = v185;
        *(_OWORD *)(v65 + 112) = v186;
        v424 = (_BYTE *)v65;
        v188 = (v355 + v65) & v71;
        v405 = v66;
        v189 = (v355 + v66) & v71;
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 32))(v188, v189, v388);
        v190 = (void *)((v387 + v188) & v72);
        v191 = (const void *)((v387 + v189) & v72);
        v192 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v419 + 48);
        if (v192(v191, 1, v70))
        {
          memcpy(v190, v191, v421);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v419 + 32))(v190, v191, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v419 + 56))(v190, 0, 1, v70);
        }
        v280 = (void *)(((unint64_t)v190 + v420) & v72);
        v281 = v72;
        v282 = (const void *)(((unint64_t)v191 + v420) & v72);
        v202 = v389;
        if (v192(v282, 1, v70))
        {
          memcpy(v280, v282, v421);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v419 + 32))(v280, v282, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v419 + 56))(v280, 0, 1, v70);
        }
        v297 = (void *)(((unint64_t)v280 + v420) & v281);
        v298 = (const void *)(((unint64_t)v282 + v420) & v281);
        if (v192(v298, 1, v70))
        {
          memcpy(v297, v298, v421);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v419 + 32))(v297, v298, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v419 + 56))(v297, 0, 1, v70);
        }
        v309 = (void *)(((unint64_t)v297 + v420) & v281);
        v310 = (const void *)(((unint64_t)v298 + v420) & v281);
        if (v192(v310, 1, v70))
        {
          memcpy(v309, v310, v421);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v419 + 32))(v309, v310, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v419 + 56))(v309, 0, 1, v70);
        }
        v264 = v391;
        v203 = v392;
        v200 = v418;
        v313 = (void *)(((unint64_t)v309 + v384) & v402);
        v314 = (const void *)(((unint64_t)v310 + v384) & v402);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v381 + 48))(v314, 1, v382))
        {
          memcpy(v313, v314, __n);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v381 + 32))(v313, v314, v382);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v381 + 56))(v313, 0, 1, v382);
        }
        v262 = 9;
LABEL_224:
        v263 = v390;
LABEL_227:
        v219 = v405;
        v260 = v411;
        v257 = v424;
        v261 = v430;
        goto LABEL_258;
      case 10:
        v412 = v67;
        v248 = *(_OWORD *)v66;
        v249 = *(_OWORD *)(v66 + 16);
        v250 = *(_OWORD *)(v66 + 32);
        *(_QWORD *)(v65 + 48) = *(_QWORD *)(v66 + 48);
        *(_OWORD *)(v65 + 16) = v249;
        *(_OWORD *)(v65 + 32) = v250;
        *(_OWORD *)v65 = v248;
        v425 = (_BYTE *)v65;
        v251 = (v350 + v65) & v71;
        v406 = v66;
        v252 = (v350 + v66) & v71;
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 32))(v251, v252, v388);
        v253 = (void *)((v387 + v251) & v72);
        v254 = (const void *)((v387 + v252) & v72);
        v255 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v419 + 48);
        v256 = v72;
        if (v255(v254, 1, v70))
        {
          memcpy(v253, v254, v421);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v419 + 32))(v253, v254, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v419 + 56))(v253, 0, 1, v70);
        }
        v202 = v389;
        v325 = (void *)(((unint64_t)v253 + v420) & v256);
        v326 = (const void *)(((unint64_t)v254 + v420) & v256);
        if (v255(v326, 1, v70))
        {
          memcpy(v325, v326, v421);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v419 + 32))(v325, v326, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v419 + 56))(v325, 0, 1, v70);
        }
        v329 = (void *)(((unint64_t)v325 + v420) & v256);
        v330 = (const void *)(((unint64_t)v326 + v420) & v256);
        v200 = v418;
        if (v255(v330, 1, v70))
        {
          memcpy(v329, v330, v421);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v419 + 32))(v329, v330, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v419 + 56))(v329, 0, 1, v70);
        }
        v262 = 10;
        goto LABEL_255;
      case 11:
        v403 = ~v399;
        v193 = *(_OWORD *)v66;
        v194 = *(_OWORD *)(v66 + 16);
        v195 = *(_OWORD *)(v66 + 48);
        *(_OWORD *)(v65 + 32) = *(_OWORD *)(v66 + 32);
        *(_OWORD *)(v65 + 48) = v195;
        *(_OWORD *)v65 = v193;
        *(_OWORD *)(v65 + 16) = v194;
        v426 = (_BYTE *)v65;
        v196 = (v353 + v65) & v71;
        v407 = v66;
        v197 = (v353 + v66) & v71;
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 32))(v196, v197, v388);
        v198 = (void *)((v387 + v196) & v72);
        v199 = (const void *)((v387 + v197) & ~v9);
        v200 = v418;
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v419 + 48))(v199, 1, v410))
        {
          v201 = v421;
          memcpy(v198, v199, v421);
          v202 = v389;
          v203 = v392;
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v419 + 32))(v198, v199, v410);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v419 + 56))(v198, 0, 1, v410);
          v202 = v389;
          v203 = v392;
          v201 = v421;
        }
        *((_BYTE *)v198 + v201) = *((_BYTE *)v199 + v201);
        v283 = ((v380 + ((v384 + ((v420 + (((v370 | v9) + v201) & ~v9)) & ~v9)) & v403)) & v403) + __n;
        if (v369 > v283)
          v283 = v369;
        if (v368 > v283)
          v283 = v368;
        if (v367 > v283)
          v283 = v367;
        if (v365 > v283)
          v283 = v365;
        if (v366 > v283)
          v283 = v366;
        if (v364 > v283)
          v283 = v364;
        if (v366 > v283)
          v283 = v366;
        if (v363 > v283)
          v283 = v363;
        if (v361 > v283)
          v283 = v361;
        if (v360 > v283)
          v283 = v360;
        if (v359 > v283)
          v283 = v359;
        if (v358 > v283)
          v283 = v358;
        if (v372 > v283)
          v283 = v372;
        if (v371 <= v283)
          v260 = v283;
        else
          v260 = v371;
        v262 = 11;
        v263 = v390;
        v264 = v391;
        v219 = v407;
        v257 = v426;
        v261 = v430;
        goto LABEL_258;
      case 12:
        v412 = v67;
        v204 = *(_OWORD *)v66;
        v205 = *(_OWORD *)(v66 + 16);
        v206 = *(_OWORD *)(v66 + 48);
        *(_OWORD *)(v65 + 32) = *(_OWORD *)(v66 + 32);
        *(_OWORD *)(v65 + 48) = v206;
        *(_OWORD *)v65 = v204;
        *(_OWORD *)(v65 + 16) = v205;
        v207 = *(_OWORD *)(v66 + 64);
        v208 = *(_OWORD *)(v66 + 80);
        v209 = *(_OWORD *)(v66 + 112);
        *(_OWORD *)(v65 + 96) = *(_OWORD *)(v66 + 96);
        *(_OWORD *)(v65 + 112) = v209;
        *(_OWORD *)(v65 + 64) = v207;
        *(_OWORD *)(v65 + 80) = v208;
        v425 = (_BYTE *)v65;
        v210 = (v354 + v65) & v71;
        v406 = v66;
        v211 = (v354 + v66) & v71;
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 32))(v210, v211, v388);
        v212 = (void *)((v387 + v210) & v72);
        v213 = (const void *)((v387 + v211) & v72);
        v214 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v419 + 48);
        if (v214(v213, 1, v70))
        {
          memcpy(v212, v213, v421);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v419 + 32))(v212, v213, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v419 + 56))(v212, 0, 1, v70);
        }
        v284 = (void *)(((unint64_t)v212 + v420) & v72);
        v285 = v72;
        v286 = (const void *)(((unint64_t)v213 + v420) & v72);
        v202 = v389;
        if (v214(v286, 1, v70))
        {
          memcpy(v284, v286, v421);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v419 + 32))(v284, v286, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v419 + 56))(v284, 0, 1, v70);
        }
        v200 = v418;
        v299 = (void *)(((unint64_t)v284 + v420) & v285);
        v300 = (const void *)(((unint64_t)v286 + v420) & v285);
        if (v214(v300, 1, v70))
        {
          memcpy(v299, v300, v421);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v419 + 32))(v299, v300, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v419 + 56))(v299, 0, 1, v70);
        }
        v262 = 12;
LABEL_255:
        v263 = v390;
        v264 = v391;
        v219 = v406;
        goto LABEL_256;
      case 13:
        v200 = v418;
        v257 = (_BYTE *)v65;
        v258 = v66;
        v259 = v67;
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v376 + 32))(v65, v66, v377);
        v260 = v259;
        v261 = ~v41;
        v219 = v258;
        v262 = 13;
        v263 = v390;
        v264 = v391;
        v202 = v389;
        goto LABEL_257;
      case 14:
        v412 = v67;
        v215 = ~v9;
        v200 = v418;
        v216 = v65;
        v217 = v66;
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 32))(v65, v66, v388);
        v425 = (_BYTE *)v216;
        v218 = (void *)((v387 + v216) & v215);
        v219 = v217;
        v220 = v215;
        v221 = (const void *)((v387 + v217) & v215);
        v222 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v419 + 48);
        if (v222(v221, 1, v70))
        {
          memcpy(v218, v221, v421);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v419 + 32))(v218, v221, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v419 + 56))(v218, 0, 1, v70);
        }
        v287 = (void *)(((unint64_t)v218 + v420) & v220);
        v288 = (const void *)(((unint64_t)v221 + v420) & v220);
        v202 = v389;
        if (v222(v288, 1, v70))
        {
          memcpy(v287, v288, v421);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v419 + 32))(v287, v288, v70);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v419 + 56))(v287, 0, 1, v70);
        }
        v262 = 14;
        v263 = v390;
        v264 = v391;
LABEL_256:
        v257 = v425;
        v261 = v430;
        v260 = v412;
LABEL_257:
        v203 = v392;
LABEL_258:
        v257[v260] = v262;
        v331 = (void *)((unint64_t)&v257[v263] & v261);
        v332 = (const void *)((v263 + v219) & v261);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v203 + 48))(v332, 1, v416))
        {
          memcpy(v331, v332, v385);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v203 + 32))(v331, v332, v416);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v203 + 56))(v331, 0, 1, v416);
        }
        v333 = (void *)(((unint64_t)v331 + v417) & v75);
        v334 = (const void *)(((unint64_t)v332 + v417) & v75);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v200 + 48))(v334, 1, v264))
        {
          memcpy(v333, v334, v386);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v200 + 32))(v333, v334, v264);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v200 + 56))(v333, 0, 1, v264);
        }
        v104 = 0;
        *(_QWORD *)(((unint64_t)v333 + v202) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v334 + v202) & 0xFFFFFFFFFFFFF8);
        break;
      default:
        if (v67 <= 3)
          v69 = v67;
        else
          v69 = 4;
        __asm { BR              X12 }
        return result;
    }
  }
  *(_BYTE *)(a1 + v422) = v104;
  return a1;
}

unsigned __int8 *sub_23BF77B6C(unsigned __int8 *a1, unsigned __int8 *a2, _QWORD *a3)
{
  unsigned __int8 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  size_t v21;
  size_t v22;
  uint64_t v23;
  size_t v24;
  uint64_t v25;
  size_t v26;
  unint64_t v27;
  size_t v28;
  uint64_t v29;
  unint64_t v30;
  size_t v31;
  size_t v32;
  unint64_t v33;
  unint64_t v34;
  size_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  size_t v45;
  size_t v46;
  unint64_t v47;
  unsigned int v48;
  int v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unsigned int (*v57)(unint64_t, uint64_t, uint64_t);
  size_t v58;
  uint64_t v59;
  unsigned int (*v60)(uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  size_t v63;
  void (*v64)(size_t, uint64_t);
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int (*v69)(uint64_t, uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  size_t v72;
  unsigned int (*v73)(size_t, uint64_t, uint64_t);
  size_t v74;
  size_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unsigned int (*v79)(unint64_t, uint64_t, uint64_t);
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unsigned int (*v85)(unint64_t, uint64_t, uint64_t);
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unsigned int (*v92)(uint64_t, uint64_t, uint64_t);
  uint64_t v93;
  size_t v94;
  uint64_t v95;
  void (*v96)(unint64_t, uint64_t);
  unint64_t v97;
  size_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  size_t v102;
  int v103;
  int v104;
  unint64_t v105;
  unsigned int v106;
  unint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  _OWORD *v120;
  __int128 *v121;
  uint64_t v122;
  uint64_t v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  unint64_t v136;
  unint64_t v137;
  void *v138;
  const void *v139;
  unsigned int (*v140)(const void *, uint64_t, uint64_t);
  size_t v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  char v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  size_t v193;
  unsigned int v194;
  uint64_t v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  unint64_t v206;
  unint64_t v207;
  void *v208;
  const void *v209;
  unsigned int (*v210)(const void *, uint64_t, uint64_t);
  size_t v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  void *v215;
  const void *v216;
  unsigned int (*v217)(const void *, uint64_t, uint64_t);
  size_t v218;
  void *v219;
  const void *v220;
  unsigned int (*v221)(const void *, uint64_t, uint64_t);
  size_t v222;
  _OWORD *v223;
  void *v224;
  const void *v225;
  unsigned int (*v226)(const void *, uint64_t, uint64_t);
  size_t v227;
  __int128 v228;
  unint64_t v229;
  void *v230;
  const void *v231;
  unsigned int (*v232)(const void *, uint64_t, uint64_t);
  size_t v233;
  void *v234;
  const void *v235;
  unsigned int (*v236)(const void *, uint64_t, uint64_t);
  size_t v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  unint64_t v243;
  void *v244;
  const void *v245;
  unsigned int (*v246)(const void *, uint64_t, uint64_t);
  size_t v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  void *v255;
  const void *v256;
  unsigned int (*v257)(const void *, uint64_t, uint64_t);
  size_t v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  unint64_t v262;
  void *v263;
  const void *v264;
  unsigned int (*v265)(const void *, uint64_t, uint64_t);
  size_t v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  void *v270;
  const void *v271;
  size_t v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  unint64_t v279;
  void *v280;
  const void *v281;
  unsigned int (*v282)(const void *, uint64_t, uint64_t);
  size_t v283;
  char v284;
  uint64_t v285;
  void *v286;
  const void *v287;
  unsigned int (*v288)(const void *, uint64_t, uint64_t);
  size_t v289;
  void *v290;
  const void *v291;
  void *v292;
  const void *v293;
  void *v294;
  const void *v295;
  void *v296;
  const void *v297;
  unint64_t v298;
  unint64_t v299;
  void *v300;
  const void *v301;
  void *v302;
  const void *v303;
  unint64_t v304;
  unint64_t v305;
  void *v306;
  const void *v307;
  void *v308;
  const void *v309;
  void *v310;
  const void *v311;
  void *v312;
  const void *v313;
  size_t v314;
  void *v315;
  const void *v316;
  void *v317;
  const void *v318;
  void *v319;
  const void *v320;
  void *v321;
  const void *v322;
  void *v323;
  const void *v324;
  void *v325;
  const void *v326;
  void *v327;
  const void *v328;
  void *v329;
  const void *v330;
  void *v331;
  const void *v332;
  void *v333;
  const void *v334;
  unint64_t v335;
  unint64_t v336;
  void (*v337)(unint64_t, unint64_t, uint64_t);
  void *v338;
  const void *v339;
  void *v340;
  const void *v341;
  unsigned int (*v342)(const void *, uint64_t, uint64_t);
  void *v343;
  const void *v344;
  void *v345;
  const void *v346;
  void *v347;
  const void *v348;
  void *v349;
  const void *v350;
  void *v351;
  const void *v352;
  void *v353;
  const void *v354;
  unsigned __int8 *result;
  unsigned int (*v356)(unint64_t, uint64_t, uint64_t);
  size_t v357;
  char v358;
  unsigned int (*v359)(__int128 *, uint64_t, uint64_t);
  void *v360;
  void *v361;
  size_t __n;
  size_t __na;
  size_t __nb;
  size_t __nc;
  size_t __nd;
  unint64_t v367;
  size_t v368;
  uint64_t v369;
  size_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  size_t v382;
  uint64_t v383;
  size_t v384;
  size_t v385;
  size_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  size_t v390;
  size_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  unint64_t v398;
  size_t v399;
  unint64_t v400;
  unint64_t v401;
  unint64_t v402;
  unint64_t v403;
  unint64_t v404;
  unint64_t v405;
  unint64_t v406;
  unint64_t v407;
  size_t v408;
  uint64_t v409;
  size_t v410;
  unint64_t v411;
  uint64_t v412;
  uint64_t v413;
  size_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  size_t v426;
  size_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  unint64_t v432;
  uint64_t v433;
  uint64_t v434;
  _OWORD *v435;
  uint64_t v436;
  unint64_t v437;

  v3 = a1;
  if (a1 != a2)
  {
    v434 = a3[5];
    v433 = *(_QWORD *)(v434 - 8);
    v5 = *(_QWORD *)(v433 + 64);
    v416 = a3[3];
    v6 = *(_QWORD *)(v416 - 8);
    v7 = *(unsigned __int8 *)(v6 + 80);
    v428 = sub_23BFF82CC();
    v8 = *(_QWORD *)(v428 - 8);
    v9 = *(unsigned __int8 *)(v8 + 80);
    v393 = a3[2];
    v10 = *(_QWORD *)(v393 - 8);
    v11 = v3;
    v12 = *(unsigned __int8 *)(v10 + 80);
    v372 = sub_23BFF8368();
    v13 = *(_QWORD *)(v372 - 8);
    v14 = *(unsigned __int8 *)(v13 + 80);
    v389 = a3[7];
    v15 = *(_QWORD *)(v389 - 8);
    v16 = *(unsigned __int8 *)(v15 + 80);
    v381 = v7 + 248;
    v415 = v6;
    v17 = *(_QWORD *)(v6 + 64);
    v18 = v17 + v9;
    v19 = v17 + v9 + 1;
    v409 = v19 + ((v7 + 248) & ~v7);
    v20 = *(_DWORD *)(v8 + 84);
    v429 = v8;
    v21 = *(_QWORD *)(v8 + 64);
    if (v20)
      v22 = v21;
    else
      v22 = v21 + 1;
    v23 = v22 + v9;
    v24 = v22 + v12;
    v25 = *(_QWORD *)(v10 + 64);
    v412 = v25 + v12;
    v392 = v10;
    if (*(_DWORD *)(v10 + 84))
      v26 = *(_QWORD *)(v10 + 64);
    else
      v26 = v25 + 1;
    v27 = ((v25 + v12 + ((v22 + v12 + ((v22 + v9 + ((v22 + v9 + (v409 & ~v9)) & ~v9)) & ~v9)) & ~v12)) & ~v12) + v26;
    v382 = v17;
    if (v21 <= v17)
      v28 = v17;
    else
      v28 = v21;
    v370 = v22 + v14;
    v371 = *(_QWORD *)(v372 - 8);
    v29 = *(_QWORD *)(v13 + 64);
    if (((v22 + v14 + (v23 & ~v9)) & ~v14) + v29 > v28)
      v28 = ((v22 + v14 + (v23 & ~v9)) & ~v14) + v29;
    v408 = v28 + 1;
    v386 = v28;
    if (v28 + 1 > v27)
      v27 = v28 + 1;
    v380 = v7 + 216;
    v384 = v26 + v12;
    v385 = v26 + v16;
    v388 = *(_QWORD *)(v389 - 8);
    v30 = *(_QWORD *)(v15 + 64);
    if (*(_DWORD *)(v15 + 84))
      v31 = *(_QWORD *)(v15 + 64);
    else
      v31 = v30 + 1;
    v368 = v31;
    v407 = ((v26
           + v16
           + ((v26 + v12 + ((v24 + ((v23 + ((v23 + ((v19 + ((v7 + 216) & ~v7)) & ~v9)) & ~v9)) & ~v9)) & ~v12)) & ~v12)) & ~v16)
         + v31;
    if (v407 > v27)
      v27 = ((v26
            + v16
            + ((v26 + v12 + ((v24 + ((v23 + ((v23 + ((v19 + ((v7 + 216) & ~v7)) & ~v9)) & ~v9)) & ~v9)) & ~v12)) & ~v12)) & ~v16)
          + v31;
    v379 = v9 + 64;
    v406 = ((v24 + ((v23 + ((v9 + 64) & ~v9)) & ~v9)) & ~v12) + v26;
    if (v406 > v27)
      v27 = ((v24 + ((v23 + ((v9 + 64) & ~v9)) & ~v9)) & ~v12) + v26;
    v32 = v22 + (v18 & ~v9);
    v33 = ((v32 + v9) & ~v9) + v22;
    v404 = ((v33 + v9) & ~v9) + v22;
    if (v404 > v27)
      v27 = ((v33 + v9) & ~v9) + v22;
    v387 = v9 + 24;
    v34 = (v9 + 24 + (v32 & 0xFFFFFFFFFFFFFFF8)) & ~v9;
    if (v34 + v22 > v27)
      v27 = v34 + v22;
    v374 = v7 + 24;
    v403 = ((v23 + ((v18 + ((v7 + 24) & ~v7)) & ~v9)) & ~v9) + v22;
    if (v403 > v27)
      v27 = ((v23 + ((v18 + ((v7 + 24) & ~v7)) & ~v9)) & ~v9) + v22;
    v405 = v34 + v22;
    if (v34 + v22 > v27)
      v27 = v34 + v22;
    v375 = v7 + 104;
    v402 = ((v23 + ((v23 + ((v18 + ((v7 + 104) & ~v7)) & ~v9)) & ~v9)) & ~v9) + v22;
    if (v402 > v27)
      v27 = ((v23 + ((v23 + ((v18 + ((v7 + 104) & ~v7)) & ~v9)) & ~v9)) & ~v9) + v22;
    v378 = v7 + 160;
    v414 = v22 + v12;
    v401 = ((v24 + ((v23 + ((v23 + ((v23 + ((v18 + ((v7 + 160) & ~v7)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v12) + v26;
    if (v401 > v27)
      v27 = ((v24 + ((v23 + ((v23 + ((v23 + ((v18 + ((v7 + 160) & ~v7)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v12) + v26;
    v373 = v7 + 56;
    v400 = ((v23 + ((v23 + ((v18 + ((v7 + 56) & ~v7)) & ~v9)) & ~v9)) & ~v9) + v22;
    if (v400 > v27)
      v27 = ((v23 + ((v23 + ((v18 + ((v7 + 56) & ~v7)) & ~v9)) & ~v9)) & ~v9) + v22;
    v376 = v7 + 64;
    v35 = ((v18 + ((v7 + 64) & ~v7)) & ~v9) + v22;
    v399 = v35 + 1;
    if (v35 + 1 > v27)
      v27 = v35 + 1;
    v377 = v7 + 128;
    v413 = v17 + v9;
    v427 = v22;
    v398 = ((v23 + ((v23 + ((v18 + ((v7 + 128) & ~v7)) & ~v9)) & ~v9)) & ~v9) + v22;
    if (v398 > v27)
      v27 = ((v23 + ((v23 + ((v18 + ((v7 + 128) & ~v7)) & ~v9)) & ~v9)) & ~v9) + v22;
    v410 = v33;
    v411 = v30;
    if (v30 > v27)
      v27 = v30;
    if (v33 <= v27)
      v36 = v27;
    else
      v36 = v33;
    v423 = a3[4];
    v37 = *(_QWORD *)(v423 - 8);
    if (*(_DWORD *)(v37 + 84))
      v38 = *(_QWORD *)(v37 + 64);
    else
      v38 = *(_QWORD *)(v37 + 64) + 1;
    v431 = a3[6];
    v432 = v36;
    v39 = *(_QWORD *)(v431 - 8);
    v40 = *(_DWORD *)(v39 + 84) == 0;
    v41 = v7 | v9 | v12 | v14 | v16 | 7;
    v422 = *(_QWORD *)(v423 - 8);
    v42 = *(unsigned __int8 *)(v37 + 80);
    v418 = v41 + v5;
    v394 = v36 + v42 + 1;
    v43 = *(unsigned __int8 *)(v39 + 80);
    v390 = v38;
    v424 = v38 + v43;
    v425 = v39;
    v44 = (v38 + v43 + ((v394 + ((v41 + v5) & ~v41)) & ~v42)) & ~v43;
    v45 = *(_QWORD *)(v39 + 64);
    if (v40)
      v46 = v45 + 1;
    else
      v46 = v45;
    v396 = v5;
    v391 = v46;
    v426 = v46 + 7;
    v47 = ((v46 + 7 + v44) & 0xFFFFFFFFFFFFFFF8) + 8;
    if (((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 249 > v47)
      v47 = ((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 249;
    v437 = v47;
    v48 = v11[v47];
    if (v48 >= 2)
    {
      v49 = v47 <= 3 ? v47 : 4;
      if (v49)
      {
        if (v49 == 4)
          v50 = *(_DWORD *)v11;
        else
          v50 = *v11;
        if (v47 < 4)
          v48 = (v50 | ((v48 - 2) << (8 * v47))) + 2;
        else
          v48 = v50 + 2;
      }
    }
    v430 = v23;
    v51 = ~v41;
    v397 = ~v7;
    v436 = ~v9;
    v417 = ~v12;
    v369 = ~v14;
    v383 = ~v16;
    v395 = v42;
    v420 = ~v42;
    v421 = ~v43;
    v3 = v11;
    (*(void (**)(unsigned __int8 *, uint64_t))(v433 + 8))(v11, v434);
    if (v48 != 1)
    {
      v52 = (unint64_t)&v11[v418] & v51;
      switch(*(_BYTE *)(v52 + v432))
      {
        case 0:
          (*(void (**)(unint64_t, uint64_t))(v415 + 8))((v381 + v52) & v397, v416);
          v59 = (v19 + ((v381 + v52) & v397)) & v436;
          v60 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v429 + 48);
          if (!v60(v59, 1, v428))
            (*(void (**)(uint64_t, uint64_t))(v429 + 8))(v59, v428);
          v61 = (v430 + v59) & v436;
          if (!v60(v61, 1, v428))
            (*(void (**)(uint64_t, uint64_t))(v429 + 8))(v61, v428);
          v62 = (v430 + v61) & v436;
          if (!v60(v62, 1, v428))
            (*(void (**)(uint64_t, uint64_t))(v429 + 8))(v62, v428);
          v63 = (v414 + v62) & v417;
          v64 = *(void (**)(size_t, uint64_t))(v392 + 8);
          v64(v63, v393);
          v65 = (v412 + v63) & v417;
          v52 = (unint64_t)&v3[v418] & v51;
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v392 + 48))(v65, 1, v393))
            v64(v65, v393);
          goto LABEL_140;
        case 1:
          v66 = *(unsigned __int8 *)(v52 + v386);
          if (v66 >= 3)
          {
            if (v386 <= 3)
              v67 = v386;
            else
              v67 = 4;
            __asm { BR              X12 }
          }
          if (v66 == 2)
          {
            v356 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v429 + 48);
            if (!v356((unint64_t)&v3[v418] & v51, 1, v428))
              (*(void (**)(unint64_t, uint64_t))(v429 + 8))(v52, v428);
            v357 = (v52 + v9 + v427) & v436;
            if (!v356(v357, 1, v428))
              (*(void (**)(size_t, uint64_t))(v429 + 8))(v357, v428);
            (*(void (**)(size_t, uint64_t))(v371 + 8))((v370 + v357) & v369, v372);
          }
          else if (v66 == 1)
          {
            v96 = *(void (**)(unint64_t, uint64_t))(v429 + 8);
            v97 = (unint64_t)&v3[v418] & v51;
LABEL_139:
            v96(v97, v428);
          }
          else
          {
            (*(void (**)(unint64_t, uint64_t))(v415 + 8))((unint64_t)&v3[v418] & v51, v416);
          }
LABEL_140:
          v21 = v427;
LABEL_141:
          v98 = ((v412 + ((v414 + ((v430 + (((v409 | v9) + v21) & v436)) & v436)) & v417)) & v417) + v26;
          if (v408 > v98)
            v98 = v408;
          if (v407 > v98)
            v98 = v407;
          if (v406 > v98)
            v98 = v406;
          if (v404 > v98)
            v98 = v404;
          if (v405 > v98)
            v98 = v405;
          if (v403 > v98)
            v98 = v403;
          if (v405 > v98)
            v98 = v405;
          if (v402 > v98)
            v98 = v402;
          if (v401 > v98)
            v98 = v401;
          if (v400 > v98)
            v98 = v400;
          if (v399 > v98)
            v98 = v399;
          if (v398 > v98)
            v98 = v398;
          if (v411 > v98)
            v98 = v411;
          if (v410 > v98)
            v98 = v410;
          v99 = ((v52 | 1) + v395 + v98) & v420;
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v422 + 48))(v99, 1, v423))
            (*(void (**)(uint64_t, uint64_t))(v422 + 8))(v99, v423);
          v100 = (v424 + v99) & v421;
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v425 + 48))(v100, 1, v431))
            (*(void (**)(uint64_t, uint64_t))(v425 + 8))(v100, v431);
          swift_bridgeObjectRelease();
          break;
        case 2:
          (*(void (**)(unint64_t, uint64_t))(v415 + 8))((v380 + v52) & v397, v416);
          v68 = (v19 + ((v380 + v52) & v397)) & v436;
          v69 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v429 + 48);
          if (!v69(v68, 1, v428))
            (*(void (**)(uint64_t, uint64_t))(v429 + 8))(v68, v428);
          v70 = (v430 + v68) & v436;
          if (!v69(v70, 1, v428))
            (*(void (**)(uint64_t, uint64_t))(v429 + 8))(v70, v428);
          v71 = (v430 + v70) & v436;
          if (!v69(v71, 1, v428))
            (*(void (**)(uint64_t, uint64_t))(v429 + 8))(v71, v428);
          v72 = (v414 + v71) & v417;
          v73 = *(unsigned int (**)(size_t, uint64_t, uint64_t))(v392 + 48);
          v52 = (unint64_t)&v3[v418] & v51;
          if (!v73(v72, 1, v393))
            (*(void (**)(size_t, uint64_t))(v392 + 8))(v72, v393);
          v74 = (v384 + v72) & v417;
          if (!v73(v74, 1, v393))
            (*(void (**)(size_t, uint64_t))(v392 + 8))(v74, v393);
          v75 = (v385 + v74) & v383;
          if ((*(unsigned int (**)(size_t, uint64_t, uint64_t))(v388 + 48))(v75, 1, v389))
            goto LABEL_140;
          v77 = v388;
          v76 = v389;
          goto LABEL_118;
        case 3:
          v78 = (v379 + v52) & v436;
          v79 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v429 + 48);
          if (!v79(v78, 1, v428))
            (*(void (**)(unint64_t, uint64_t))(v429 + 8))(v78, v428);
          v80 = (v430 + v78) & v436;
          if (!v79(v80, 1, v428))
            (*(void (**)(unint64_t, uint64_t))(v429 + 8))(v80, v428);
          v75 = (v414 + v80) & v417;
          if (!(*(unsigned int (**)(size_t, uint64_t, uint64_t))(v392 + 48))(v75, 1, v393))
            goto LABEL_117;
          goto LABEL_140;
        case 4:
          (*(void (**)(unint64_t, uint64_t))(v415 + 8))((unint64_t)&v3[v418] & v51, v416);
          v367 = v52;
          v81 = v413 + v52;
          goto LABEL_126;
        case 5:
        case 7:
          (*(void (**)(unint64_t, uint64_t))(v415 + 8))((unint64_t)&v3[v418] & v51, v416);
          v54 = ~v9;
          v55 = (v413 + v52) & v436;
          v56 = v428;
          v57 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v429 + 48);
          if (!v57(v55, 1, v428))
            (*(void (**)(unint64_t, uint64_t))(v429 + 8))(v55, v428);
          v58 = v387 + ((v55 + v427) & 0xFFFFFFFFFFFFFFF8);
          goto LABEL_137;
        case 6:
          (*(void (**)(unint64_t, uint64_t))(v415 + 8))((v374 + v52) & v397, v416);
          v82 = v413 + ((v374 + v52) & v397);
          goto LABEL_134;
        case 8:
          v83 = v7 + 104;
          goto LABEL_125;
        case 9:
          (*(void (**)(unint64_t, uint64_t))(v415 + 8))((v378 + v52) & v397, v416);
          v84 = (v413 + ((v378 + v52) & v397)) & v436;
          v85 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v429 + 48);
          if (!v85(v84, 1, v428))
            (*(void (**)(unint64_t, uint64_t))(v429 + 8))(v84, v428);
          v86 = (v430 + v84) & v436;
          if (!v85(v86, 1, v428))
            (*(void (**)(unint64_t, uint64_t))(v429 + 8))(v86, v428);
          v87 = (v430 + v86) & v436;
          if (!v85(v87, 1, v428))
            (*(void (**)(uint64_t, uint64_t))(v429 + 8))(v87, v428);
          v88 = (v430 + v87) & v436;
          if (!v85(v88, 1, v428))
            (*(void (**)(uint64_t, uint64_t))(v429 + 8))(v88, v428);
          v75 = (v414 + v88) & v417;
          v52 = (unint64_t)&v3[v418] & v51;
          if ((*(unsigned int (**)(size_t, uint64_t, uint64_t))(v392 + 48))(v75, 1, v393))
            goto LABEL_140;
LABEL_117:
          v77 = v392;
          v76 = v393;
LABEL_118:
          (*(void (**)(size_t, uint64_t))(v77 + 8))(v75, v76);
          goto LABEL_140;
        case 0xA:
          v83 = v7 + 56;
          goto LABEL_125;
        case 0xB:
          (*(void (**)(unint64_t, uint64_t))(v415 + 8))((v376 + v52) & v397, v416);
          v89 = (v413 + ((v376 + v52) & v397)) & v436;
          if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v429 + 48))(v89, 1, v428))
            (*(void (**)(unint64_t, uint64_t))(v429 + 8))(v89, v428);
          if (!v20)
            goto LABEL_140;
          goto LABEL_141;
        case 0xC:
          v83 = v7 + 128;
LABEL_125:
          v367 = (unint64_t)&v3[v418] & v51;
          v90 = (v83 + v52) & v397;
          (*(void (**)(unint64_t, uint64_t))(v415 + 8))(v90, v416);
          v81 = v413 + v90;
LABEL_126:
          v91 = v81 & v436;
          v92 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v429 + 48);
          if (!v92(v81 & v436, 1, v428))
            (*(void (**)(uint64_t, uint64_t))(v429 + 8))(v91, v428);
          v93 = (v430 + v91) & v436;
          if (!v92(v93, 1, v428))
            (*(void (**)(uint64_t, uint64_t))(v429 + 8))(v93, v428);
          v94 = (v430 + v93) & v436;
          v52 = v367;
          if (!v92(v94, 1, v428))
            goto LABEL_138;
          goto LABEL_140;
        case 0xD:
          (*(void (**)(unint64_t, uint64_t))(v388 + 8))((unint64_t)&v3[v418] & v51, v389);
          goto LABEL_140;
        case 0xE:
          (*(void (**)(unint64_t, uint64_t))(v415 + 8))((unint64_t)&v3[v418] & v51, v416);
          v82 = v413 + v52;
LABEL_134:
          v54 = ~v9;
          v95 = v82 & v436;
          v56 = v428;
          v57 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v429 + 48);
          if (!v57(v82 & v436, 1, v428))
            (*(void (**)(uint64_t, uint64_t))(v429 + 8))(v95, v428);
          v58 = v430 + v95;
LABEL_137:
          v94 = v58 & v54;
          if (v57(v58 & v54, 1, v56))
            goto LABEL_140;
LABEL_138:
          v96 = *(void (**)(unint64_t, uint64_t))(v429 + 8);
          v97 = v94;
          goto LABEL_139;
        default:
          if (v432 <= 3)
            v53 = v432;
          else
            v53 = 4;
          __asm { BR              X12 }
          return result;
      }
    }
    v101 = a2[v437];
    v102 = v432;
    if (v101 >= 2)
    {
      v103 = v437 <= 3 ? v437 : 4;
      if (v103)
      {
        if (v103 == 4)
          v104 = *(_DWORD *)a2;
        else
          v104 = *a2;
        if (v437 < 4)
          v101 = (v104 | ((v101 - 2) << (8 * v437))) + 2;
        else
          v101 = v104 + 2;
      }
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v433 + 32))(v3, a2, v434);
    if (v101 == 1)
    {
      v105 = (unint64_t)&a2[v396 + 7] & 0xFFFFFFFFFFFFFFF8;
      v106 = *(unsigned __int8 *)(v105 + 248);
      if (v106 >= 0xB)
        v106 = *(_DWORD *)v105 + 11;
      v107 = (unint64_t)&v3[v396 + 7] & 0xFFFFFFFFFFFFFFF8;
      switch(v106)
      {
        case 0u:
          v108 = *(_OWORD *)v105;
          v109 = *(_OWORD *)(v105 + 16);
          v110 = *(_OWORD *)(v105 + 48);
          *(_OWORD *)(v107 + 32) = *(_OWORD *)(v105 + 32);
          *(_OWORD *)(v107 + 48) = v110;
          *(_OWORD *)v107 = v108;
          *(_OWORD *)(v107 + 16) = v109;
          v111 = *(_OWORD *)(v105 + 64);
          v112 = *(_OWORD *)(v105 + 80);
          v113 = *(_OWORD *)(v105 + 112);
          *(_OWORD *)(v107 + 96) = *(_OWORD *)(v105 + 96);
          *(_OWORD *)(v107 + 112) = v113;
          *(_OWORD *)(v107 + 64) = v111;
          *(_OWORD *)(v107 + 80) = v112;
          v114 = *(_OWORD *)(v105 + 128);
          v115 = *(_OWORD *)(v105 + 144);
          v116 = *(_OWORD *)(v105 + 176);
          *(_OWORD *)(v107 + 160) = *(_OWORD *)(v105 + 160);
          *(_OWORD *)(v107 + 176) = v116;
          *(_OWORD *)(v107 + 128) = v114;
          *(_OWORD *)(v107 + 144) = v115;
          v117 = *(_OWORD *)(v105 + 192);
          v118 = *(_OWORD *)(v105 + 208);
          v119 = *(_OWORD *)(v105 + 224);
          *(_QWORD *)(v107 + 240) = *(_QWORD *)(v105 + 240);
          *(_OWORD *)(v107 + 208) = v118;
          *(_OWORD *)(v107 + 224) = v119;
          *(_OWORD *)(v107 + 192) = v117;
          *(_BYTE *)(v107 + 248) = 0;
          goto LABEL_209;
        case 1u:
          v142 = *(_OWORD *)(v105 + 16);
          *(_OWORD *)v107 = *(_OWORD *)v105;
          *(_OWORD *)(v107 + 16) = v142;
          v143 = *(_OWORD *)(v105 + 32);
          v144 = *(_OWORD *)(v105 + 48);
          v145 = *(_OWORD *)(v105 + 80);
          *(_OWORD *)(v107 + 64) = *(_OWORD *)(v105 + 64);
          *(_OWORD *)(v107 + 80) = v145;
          *(_OWORD *)(v107 + 32) = v143;
          *(_OWORD *)(v107 + 48) = v144;
          v146 = *(_OWORD *)(v105 + 96);
          v147 = *(_OWORD *)(v105 + 112);
          v148 = *(_OWORD *)(v105 + 144);
          *(_OWORD *)(v107 + 128) = *(_OWORD *)(v105 + 128);
          *(_OWORD *)(v107 + 144) = v148;
          *(_OWORD *)(v107 + 96) = v146;
          *(_OWORD *)(v107 + 112) = v147;
          v149 = *(_OWORD *)(v105 + 160);
          v150 = *(_OWORD *)(v105 + 176);
          v151 = *(_OWORD *)(v105 + 192);
          *(_QWORD *)(v107 + 208) = *(_QWORD *)(v105 + 208);
          *(_OWORD *)(v107 + 176) = v150;
          *(_OWORD *)(v107 + 192) = v151;
          *(_OWORD *)(v107 + 160) = v149;
          v152 = 1;
          *(_BYTE *)(v107 + 248) = 1;
          break;
        case 2u:
          v153 = *(_OWORD *)v105;
          v154 = *(_OWORD *)(v105 + 16);
          v155 = *(_OWORD *)(v105 + 48);
          *(_OWORD *)(v107 + 32) = *(_OWORD *)(v105 + 32);
          *(_OWORD *)(v107 + 48) = v155;
          *(_OWORD *)v107 = v153;
          *(_OWORD *)(v107 + 16) = v154;
          *(_BYTE *)(v107 + 248) = 2;
          goto LABEL_209;
        case 3u:
          *(_OWORD *)v107 = *(_OWORD *)v105;
          *(_BYTE *)(v107 + 248) = 3;
          goto LABEL_209;
        case 4u:
          v156 = *(_OWORD *)v105;
          *(_QWORD *)(v107 + 16) = *(_QWORD *)(v105 + 16);
          *(_OWORD *)v107 = v156;
          *(_BYTE *)(v107 + 248) = 4;
          goto LABEL_209;
        case 5u:
          *(_OWORD *)v107 = *(_OWORD *)v105;
          *(_BYTE *)(v107 + 248) = 5;
          goto LABEL_209;
        case 6u:
          v157 = *(_OWORD *)v105;
          v158 = *(_OWORD *)(v105 + 32);
          *(_OWORD *)(v107 + 16) = *(_OWORD *)(v105 + 16);
          *(_OWORD *)(v107 + 32) = v158;
          *(_OWORD *)v107 = v157;
          v159 = *(_OWORD *)(v105 + 48);
          v160 = *(_OWORD *)(v105 + 64);
          v161 = *(_OWORD *)(v105 + 80);
          *(_QWORD *)(v107 + 96) = *(_QWORD *)(v105 + 96);
          *(_OWORD *)(v107 + 64) = v160;
          *(_OWORD *)(v107 + 80) = v161;
          *(_OWORD *)(v107 + 48) = v159;
          *(_BYTE *)(v107 + 248) = 6;
          goto LABEL_209;
        case 7u:
          v162 = *(_OWORD *)(v105 + 16);
          *(_OWORD *)v107 = *(_OWORD *)v105;
          *(_OWORD *)(v107 + 16) = v162;
          v163 = *(_OWORD *)(v105 + 32);
          v164 = *(_OWORD *)(v105 + 48);
          v165 = *(_OWORD *)(v105 + 80);
          *(_OWORD *)(v107 + 64) = *(_OWORD *)(v105 + 64);
          *(_OWORD *)(v107 + 80) = v165;
          *(_OWORD *)(v107 + 32) = v163;
          *(_OWORD *)(v107 + 48) = v164;
          v166 = *(_OWORD *)(v105 + 96);
          v167 = *(_OWORD *)(v105 + 112);
          v168 = *(_OWORD *)(v105 + 144);
          *(_OWORD *)(v107 + 128) = *(_OWORD *)(v105 + 128);
          *(_OWORD *)(v107 + 144) = v168;
          *(_OWORD *)(v107 + 96) = v166;
          *(_OWORD *)(v107 + 112) = v167;
          *(_BYTE *)(v107 + 248) = 7;
          goto LABEL_209;
        case 8u:
          v169 = *(_OWORD *)v105;
          v170 = *(_OWORD *)(v105 + 16);
          v171 = *(_OWORD *)(v105 + 32);
          *(_QWORD *)(v107 + 48) = *(_QWORD *)(v105 + 48);
          *(_OWORD *)(v107 + 16) = v170;
          *(_OWORD *)(v107 + 32) = v171;
          *(_OWORD *)v107 = v169;
          *(_BYTE *)(v107 + 248) = 8;
          goto LABEL_209;
        case 9u:
          v172 = *(_OWORD *)v105;
          v173 = *(_OWORD *)(v105 + 16);
          v174 = *(_OWORD *)(v105 + 48);
          *(_OWORD *)(v107 + 32) = *(_OWORD *)(v105 + 32);
          *(_OWORD *)(v107 + 48) = v174;
          *(_OWORD *)v107 = v172;
          *(_OWORD *)(v107 + 16) = v173;
          *(_BYTE *)(v107 + 248) = 9;
          goto LABEL_209;
        case 0xAu:
          v175 = *(_OWORD *)v105;
          v176 = *(_OWORD *)(v105 + 16);
          v177 = *(_OWORD *)(v105 + 48);
          *(_OWORD *)(v107 + 32) = *(_OWORD *)(v105 + 32);
          *(_OWORD *)(v107 + 48) = v177;
          *(_OWORD *)v107 = v175;
          *(_OWORD *)(v107 + 16) = v176;
          v178 = *(_OWORD *)(v105 + 64);
          v179 = *(_OWORD *)(v105 + 80);
          v180 = *(_OWORD *)(v105 + 112);
          *(_OWORD *)(v107 + 96) = *(_OWORD *)(v105 + 96);
          *(_OWORD *)(v107 + 112) = v180;
          *(_OWORD *)(v107 + 64) = v178;
          *(_OWORD *)(v107 + 80) = v179;
          *(_BYTE *)(v107 + 248) = 10;
          goto LABEL_209;
        default:
          v181 = *(_OWORD *)v105;
          v182 = *(_OWORD *)(v105 + 16);
          v183 = *(_OWORD *)(v105 + 48);
          *(_OWORD *)(v107 + 32) = *(_OWORD *)(v105 + 32);
          *(_OWORD *)(v107 + 48) = v183;
          *(_OWORD *)v107 = v181;
          *(_OWORD *)(v107 + 16) = v182;
          v184 = *(_OWORD *)(v105 + 64);
          v185 = *(_OWORD *)(v105 + 80);
          v186 = *(_OWORD *)(v105 + 112);
          *(_OWORD *)(v107 + 96) = *(_OWORD *)(v105 + 96);
          *(_OWORD *)(v107 + 112) = v186;
          *(_OWORD *)(v107 + 64) = v184;
          *(_OWORD *)(v107 + 80) = v185;
          v187 = *(_OWORD *)(v105 + 128);
          v188 = *(_OWORD *)(v105 + 144);
          v189 = *(_OWORD *)(v105 + 176);
          *(_OWORD *)(v107 + 160) = *(_OWORD *)(v105 + 160);
          *(_OWORD *)(v107 + 176) = v189;
          *(_OWORD *)(v107 + 128) = v187;
          *(_OWORD *)(v107 + 144) = v188;
          v190 = *(_OWORD *)(v105 + 192);
          v191 = *(_OWORD *)(v105 + 208);
          v192 = *(_OWORD *)(v105 + 224);
          *(_OWORD *)(v107 + 233) = *(_OWORD *)(v105 + 233);
          *(_OWORD *)(v107 + 208) = v191;
          *(_OWORD *)(v107 + 224) = v192;
          *(_OWORD *)(v107 + 192) = v190;
LABEL_209:
          v152 = 1;
          break;
      }
    }
    else
    {
      v120 = (_OWORD *)((unint64_t)&v3[v418] & v51);
      v121 = (__int128 *)((unint64_t)&a2[v418] & v51);
      v123 = v431;
      switch(*((_BYTE *)v121 + v432))
      {
        case 0:
          __n = v26;
          v124 = *v121;
          v125 = *(_OWORD *)(((unint64_t)&a2[v418] & v51) + 0x10);
          v126 = *(_OWORD *)(((unint64_t)&a2[v418] & v51) + 0x30);
          *(_OWORD *)(((unint64_t)&v3[v418] & v51) + 0x20) = *(_OWORD *)(((unint64_t)&a2[v418] & v51)
                                                                              + 0x20);
          *(_OWORD *)(((unint64_t)&v3[v418] & v51) + 0x30) = v126;
          *v120 = v124;
          *(_OWORD *)(((unint64_t)&v3[v418] & v51) + 0x10) = v125;
          v127 = *(_OWORD *)(((unint64_t)&a2[v418] & v51) + 0x40);
          v128 = *(_OWORD *)(((unint64_t)&a2[v418] & v51) + 0x50);
          v129 = *(_OWORD *)(((unint64_t)&a2[v418] & v51) + 0x70);
          *(_OWORD *)(((unint64_t)&v3[v418] & v51) + 0x60) = *(_OWORD *)(((unint64_t)&a2[v418] & v51)
                                                                              + 0x60);
          *(_OWORD *)(((unint64_t)&v3[v418] & v51) + 0x70) = v129;
          *(_OWORD *)(((unint64_t)&v3[v418] & v51) + 0x40) = v127;
          *(_OWORD *)(((unint64_t)&v3[v418] & v51) + 0x50) = v128;
          v130 = *(_OWORD *)(((unint64_t)&a2[v418] & v51) + 0x80);
          v131 = *(_OWORD *)(((unint64_t)&a2[v418] & v51) + 0x90);
          v132 = *(_OWORD *)(((unint64_t)&a2[v418] & v51) + 0xB0);
          *(_OWORD *)(((unint64_t)&v3[v418] & v51) + 0xA0) = *(_OWORD *)(((unint64_t)&a2[v418] & v51)
                                                                              + 0xA0);
          *(_OWORD *)(((unint64_t)&v3[v418] & v51) + 0xB0) = v132;
          *(_OWORD *)(((unint64_t)&v3[v418] & v51) + 0x80) = v130;
          *(_OWORD *)(((unint64_t)&v3[v418] & v51) + 0x90) = v131;
          v133 = *(_OWORD *)(((unint64_t)&a2[v418] & v51) + 0xC0);
          v134 = *(_OWORD *)(((unint64_t)&a2[v418] & v51) + 0xD0);
          v135 = *(_OWORD *)(((unint64_t)&a2[v418] & v51) + 0xE0);
          *(_QWORD *)(((unint64_t)&v3[v418] & v51) + 0xF0) = *(_QWORD *)(((unint64_t)&a2[v418] & v51)
                                                                              + 0xF0);
          *(_OWORD *)(((unint64_t)&v3[v418] & v51) + 0xD0) = v134;
          *(_OWORD *)(((unint64_t)&v3[v418] & v51) + 0xE0) = v135;
          *(_OWORD *)(((unint64_t)&v3[v418] & v51) + 0xC0) = v133;
          v435 = (_OWORD *)((unint64_t)&v3[v418] & v51);
          v136 = ((unint64_t)v120 + v381) & v397;
          v137 = ((unint64_t)v121 + v381) & v397;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v415 + 32))(v136, v137, v416);
          *(_BYTE *)(v136 + v382) = *(_BYTE *)(v137 + v382);
          v138 = (void *)((v9 + 1 + v136 + v382) & v436);
          v139 = (const void *)((v9 + 1 + v137 + v382) & v436);
          v140 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v429 + 48);
          if (v140(v139, 1, v428))
          {
            v141 = v427;
            memcpy(v138, v139, v427);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v429 + 32))(v138, v139, v428);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v429 + 56))(v138, 0, 1, v428);
            v141 = v427;
          }
          v290 = (void *)(((unint64_t)v138 + v430) & v436);
          v291 = (const void *)(((unint64_t)v139 + v430) & v436);
          if (v140(v291, 1, v428))
          {
            memcpy(v290, v291, v141);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v429 + 32))(v290, v291, v428);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v429 + 56))(v290, 0, 1, v428);
          }
          v319 = (void *)(((unint64_t)v290 + v430) & v436);
          v320 = (const void *)(((unint64_t)v291 + v430) & v436);
          if (v140(v320, 1, v428))
          {
            memcpy(v319, v320, v141);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v429 + 32))(v319, v320, v428);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v429 + 56))(v319, 0, 1, v428);
          }
          v123 = v431;
          v335 = ((unint64_t)v319 + v414) & v417;
          v336 = ((unint64_t)v320 + v414) & v417;
          v337 = *(void (**)(unint64_t, unint64_t, uint64_t))(v392 + 32);
          v337(v335, v336, v393);
          v338 = (void *)((v412 + v335) & v417);
          v339 = (const void *)((v412 + v336) & v417);
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v392 + 48))(v339, 1, v393))
          {
            memcpy(v338, v339, __n);
          }
          else
          {
            v337((unint64_t)v338, (unint64_t)v339, v393);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v392 + 56))(v338, 0, 1, v393);
          }
          v284 = 0;
          goto LABEL_377;
        case 1:
          v193 = v386;
          v194 = *((unsigned __int8 *)v121 + v386);
          if (v194 >= 3)
          {
            if (v386 <= 3)
              v195 = v386;
            else
              v195 = 4;
            __asm { BR              X12 }
          }
          if (v194 == 2)
          {
            v359 = *(unsigned int (**)(__int128 *, uint64_t, uint64_t))(v429 + 48);
            if (v359(v121, 1, v428))
            {
              memcpy(v120, v121, v427);
            }
            else
            {
              (*(void (**)(_OWORD *, __int128 *, uint64_t))(v429 + 32))(v120, v121, v428);
              (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v429 + 56))(v120, 0, 1, v428);
            }
            v360 = (void *)(((unint64_t)v120 + v9 + v427) & v436);
            v361 = (void *)(((unint64_t)v121 + v9 + v427) & v436);
            if (v359((__int128 *)v361, 1, v428))
            {
              memcpy(v360, v361, v427);
            }
            else
            {
              (*(void (**)(void *, void *, uint64_t))(v429 + 32))(v360, v361, v428);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v429 + 56))(v360, 0, 1, v428);
            }
            v123 = v431;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v371 + 32))(((unint64_t)v360 + v370) & v369, ((unint64_t)v361 + v370) & v369, v372);
            v358 = 2;
            v285 = v394;
            v120 = (_OWORD *)((unint64_t)&v3[v418] & v51);
            v193 = v386;
          }
          else
          {
            if (v194 == 1)
            {
              (*(void (**)(unint64_t, __int128 *, uint64_t))(v429 + 32))((unint64_t)&v3[v418] & v51, v121, v428);
              v358 = 1;
            }
            else
            {
              (*(void (**)(unint64_t, __int128 *, uint64_t))(v415 + 32))((unint64_t)&v3[v418] & v51, v121, v416);
              v358 = 0;
            }
            v285 = v394;
            v123 = v431;
          }
          *((_BYTE *)v120 + v193) = v358;
          v284 = 1;
          goto LABEL_379;
        case 2:
          __na = v26;
          v196 = *(_OWORD *)(((unint64_t)&a2[v418] & v51) + 0x10);
          *v120 = *v121;
          *(_OWORD *)(((unint64_t)&v3[v418] & v51) + 0x10) = v196;
          v197 = *(_OWORD *)(((unint64_t)&a2[v418] & v51) + 0x20);
          v198 = *(_OWORD *)(((unint64_t)&a2[v418] & v51) + 0x30);
          v199 = *(_OWORD *)(((unint64_t)&a2[v418] & v51) + 0x50);
          *(_OWORD *)(((unint64_t)&v3[v418] & v51) + 0x40) = *(_OWORD *)(((unint64_t)&a2[v418] & v51)
                                                                              + 0x40);
          *(_OWORD *)(((unint64_t)&v3[v418] & v51) + 0x50) = v199;
          *(_OWORD *)(((unint64_t)&v3[v418] & v51) + 0x20) = v197;
          *(_OWORD *)(((unint64_t)&v3[v418] & v51) + 0x30) = v198;
          v200 = *(_OWORD *)(((unint64_t)&a2[v418] & v51) + 0x60);
          v201 = *(_OWORD *)(((unint64_t)&a2[v418] & v51) + 0x70);
          v202 = *(_OWORD *)(((unint64_t)&a2[v418] & v51) + 0x90);
          *(_OWORD *)(((unint64_t)&v3[v418] & v51) + 0x80) = *(_OWORD *)(((unint64_t)&a2[v418] & v51)
                                                                              + 0x80);
          *(_OWORD *)(((unint64_t)&v3[v418] & v51) + 0x90) = v202;
          *(_OWORD *)(((unint64_t)&v3[v418] & v51) + 0x60) = v200;
          *(_OWORD *)(((unint64_t)&v3[v418] & v51) + 0x70) = v201;
          v203 = *(_OWORD *)(((unint64_t)&a2[v418] & v51) + 0xA0);
          v204 = *(_OWORD *)(((unint64_t)&a2[v418] & v51) + 0xB0);
          v205 = *(_OWORD *)(((unint64_t)&a2[v418] & v51) + 0xC0);
          *(_QWORD *)(((unint64_t)&v3[v418] & v51) + 0xD0) = *(_QWORD *)(((unint64_t)&a2[v418] & v51)
                                                                              + 0xD0);
          *(_OWORD *)(((unint64_t)&v3[v418] & v51) + 0xB0) = v204;
          *(_OWORD *)(((unint64_t)&v3[v418] & v51) + 0xC0) = v205;
          *(_OWORD *)(((unint64_t)&v3[v418] & v51) + 0xA0) = v203;
          v435 = (_OWORD *)((unint64_t)&v3[v418] & v51);
          v206 = ((unint64_t)v120 + v380) & v397;
          v207 = ((unint64_t)v121 + v380) & v397;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v415 + 32))(v206, v207, v416);
          *(_BYTE *)(v206 + v382) = *(_BYTE *)(v207 + v382);
          v208 = (void *)((v9 + 1 + v206 + v382) & v436);
          v209 = (const void *)((v9 + 1 + v207 + v382) & v436);
          v210 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v429 + 48);
          if (v210(v209, 1, v428))
          {
            v211 = v427;
            memcpy(v208, v209, v427);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v429 + 32))(v208, v209, v428);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v429 + 56))(v208, 0, 1, v428);
            v211 = v427;
          }
          v292 = (void *)(((unint64_t)v208 + v430) & v436);
          v293 = (const void *)(((unint64_t)v209 + v430) & v436);
          if (v210(v293, 1, v428))
          {
            memcpy(v292, v293, v211);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v429 + 32))(v292, v293, v428);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v429 + 56))(v292, 0, 1, v428);
          }
          v321 = (void *)(((unint64_t)v292 + v430) & v436);
          v322 = (const void *)(((unint64_t)v293 + v430) & v436);
          if (v210(v322, 1, v428))
          {
            memcpy(v321, v322, v211);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v429 + 32))(v321, v322, v428);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v429 + 56))(v321, 0, 1, v428);
          }
          v123 = v431;
          v340 = (void *)(((unint64_t)v321 + v414) & v417);
          v341 = (const void *)(((unint64_t)v322 + v414) & v417);
          v342 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v392 + 48);
          if (v342(v341, 1, v393))
          {
            memcpy(v340, v341, __na);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v392 + 32))(v340, v341, v393);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v392 + 56))(v340, 0, 1, v393);
          }
          v345 = (void *)(((unint64_t)v340 + v384) & v417);
          v346 = (const void *)(((unint64_t)v341 + v384) & v417);
          if (v342(v346, 1, v393))
          {
            memcpy(v345, v346, __na);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v392 + 32))(v345, v346, v393);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v392 + 56))(v345, 0, 1, v393);
          }
          v349 = (void *)(((unint64_t)v345 + v385) & v383);
          v350 = (const void *)(((unint64_t)v346 + v385) & v383);
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v388 + 48))(v350, 1, v389))
          {
            memcpy(v349, v350, v368);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v388 + 32))(v349, v350, v389);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v388 + 56))(v349, 0, 1, v389);
          }
          v284 = 2;
          goto LABEL_377;
        case 3:
          __nb = v26;
          v212 = *v121;
          v213 = *(_OWORD *)(((unint64_t)&a2[v418] & v51) + 0x10);
          v214 = *(_OWORD *)(((unint64_t)&a2[v418] & v51) + 0x30);
          *(_OWORD *)(((unint64_t)&v3[v418] & v51) + 0x20) = *(_OWORD *)(((unint64_t)&a2[v418] & v51)
                                                                              + 0x20);
          *(_OWORD *)(((unint64_t)&v3[v418] & v51) + 0x30) = v214;
          *v120 = v212;
          *(_OWORD *)(((unint64_t)&v3[v418] & v51) + 0x10) = v213;
          v435 = (_OWORD *)((unint64_t)&v3[v418] & v51);
          v215 = (void *)(((unint64_t)v120 + v379) & v436);
          v216 = (const void *)(((unint64_t)v121 + v379) & v436);
          v217 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v429 + 48);
          if (v217(v216, 1, v428))
          {
            v218 = v427;
            memcpy(v215, v216, v427);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v429 + 32))(v215, v216, v428);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v429 + 56))(v215, 0, 1, v428);
            v218 = v427;
          }
          v294 = (void *)(((unint64_t)v215 + v430) & v436);
          v295 = (const void *)(((unint64_t)v216 + v430) & v436);
          if (v217(v295, 1, v428))
          {
            memcpy(v294, v295, v218);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v429 + 32))(v294, v295, v428);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v429 + 56))(v294, 0, 1, v428);
          }
          v323 = (void *)(((unint64_t)v294 + v414) & v417);
          v324 = (const void *)(((unint64_t)v295 + v414) & v417);
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v392 + 48))(v324, 1, v393))
          {
            memcpy(v323, v324, __nb);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v392 + 32))(v323, v324, v393);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v392 + 56))(v323, 0, 1, v393);
          }
          v284 = 3;
          goto LABEL_377;
        case 4:
          (*(void (**)(unint64_t, __int128 *, uint64_t))(v415 + 32))((unint64_t)&v3[v418] & v51, v121, v416);
          v435 = (_OWORD *)((unint64_t)&v3[v418] & v51);
          v219 = (void *)(((unint64_t)v120 + v413) & v436);
          v220 = (const void *)(((unint64_t)v121 + v413) & v436);
          v221 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v429 + 48);
          if (v221(v220, 1, v428))
          {
            v222 = v427;
            memcpy(v219, v220, v427);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v429 + 32))(v219, v220, v428);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v429 + 56))(v219, 0, 1, v428);
            v222 = v427;
          }
          v296 = (void *)(((unint64_t)v219 + v430) & v436);
          v297 = (const void *)(((unint64_t)v220 + v430) & v436);
          if (v221(v297, 1, v428))
          {
            memcpy(v296, v297, v222);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v429 + 32))(v296, v297, v428);
            v222 = v427;
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v429 + 56))(v296, 0, 1, v428);
          }
          v325 = (void *)(((unint64_t)v296 + v430) & v436);
          v326 = (const void *)(((unint64_t)v297 + v430) & v436);
          if (v221(v326, 1, v428))
          {
            memcpy(v325, v326, v222);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v429 + 32))(v325, v326, v428);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v429 + 56))(v325, 0, 1, v428);
          }
          v284 = 4;
          goto LABEL_361;
        case 5:
          (*(void (**)(unint64_t, __int128 *, uint64_t))(v415 + 32))((unint64_t)&v3[v418] & v51, v121, v416);
          v223 = (_OWORD *)((unint64_t)&v3[v418] & v51);
          v224 = (void *)(((unint64_t)v120 + v413) & v436);
          v225 = (const void *)(((unint64_t)v121 + v413) & v436);
          v226 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v429 + 48);
          if (v226(v225, 1, v428))
          {
            v227 = v427;
            memcpy(v224, v225, v427);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v429 + 32))(v224, v225, v428);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v429 + 56))(v224, 0, 1, v428);
            v227 = v427;
          }
          *((_BYTE *)v224 + v227) = *((_BYTE *)v225 + v227);
          v298 = ((unint64_t)v224 + v227) & 0xFFFFFFFFFFFFFFF8;
          v299 = ((unint64_t)v225 + v227) & 0xFFFFFFFFFFFFFFF8;
          *(_OWORD *)(v298 + 8) = *(_OWORD *)(v299 + 8);
          v300 = (void *)((v387 + v298) & v436);
          v301 = (const void *)((v387 + v299) & v436);
          if (v226(v301, 1, v428))
          {
            memcpy(v300, v301, v227);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v429 + 32))(v300, v301, v428);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v429 + 56))(v300, 0, 1, v428);
          }
          v284 = 5;
          goto LABEL_329;
        case 6:
          v228 = *v121;
          *(_QWORD *)(((unint64_t)&v3[v418] & v51) + 0x10) = *(_QWORD *)(((unint64_t)&a2[v418] & v51)
                                                                              + 0x10);
          *v120 = v228;
          v435 = (_OWORD *)((unint64_t)&v3[v418] & v51);
          v229 = ((unint64_t)v120 + v374) & v397;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v415 + 32))(v229, ((unint64_t)v121 + v374) & v397, v416);
          v230 = (void *)((v413 + v229) & v436);
          v231 = (const void *)((v413 + (((unint64_t)v121 + v374) & v397)) & v436);
          v232 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v429 + 48);
          if (v232(v231, 1, v428))
          {
            v233 = v427;
            memcpy(v230, v231, v427);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v429 + 32))(v230, v231, v428);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v429 + 56))(v230, 0, 1, v428);
            v233 = v427;
          }
          v302 = (void *)(((unint64_t)v230 + v430) & v436);
          v303 = (const void *)(((unint64_t)v231 + v430) & v436);
          if (v232(v303, 1, v428))
          {
            memcpy(v302, v303, v233);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v429 + 32))(v302, v303, v428);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v429 + 56))(v302, 0, 1, v428);
          }
          v284 = 6;
          goto LABEL_361;
        case 7:
          (*(void (**)(unint64_t, __int128 *, uint64_t))(v415 + 32))((unint64_t)&v3[v418] & v51, v121, v416);
          v223 = (_OWORD *)((unint64_t)&v3[v418] & v51);
          v234 = (void *)(((unint64_t)v120 + v413) & v436);
          v235 = (const void *)(((unint64_t)v121 + v413) & v436);
          v236 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v429 + 48);
          if (v236(v235, 1, v428))
          {
            v237 = v427;
            memcpy(v234, v235, v427);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v429 + 32))(v234, v235, v428);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v429 + 56))(v234, 0, 1, v428);
            v237 = v427;
          }
          *((_BYTE *)v234 + v237) = *((_BYTE *)v235 + v237);
          v304 = ((unint64_t)v234 + v237) & 0xFFFFFFFFFFFFFFF8;
          v305 = ((unint64_t)v235 + v237) & 0xFFFFFFFFFFFFFFF8;
          *(_OWORD *)(v304 + 8) = *(_OWORD *)(v305 + 8);
          v306 = (void *)((v387 + v304) & v436);
          v307 = (const void *)((v387 + v305) & v436);
          if (v236(v307, 1, v428))
          {
            memcpy(v306, v307, v237);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v429 + 32))(v306, v307, v428);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v429 + 56))(v306, 0, 1, v428);
          }
          v284 = 7;
LABEL_329:
          v285 = v394;
          v123 = v431;
          v120 = v223;
          goto LABEL_379;
        case 8:
          v238 = *v121;
          v239 = *(_OWORD *)(((unint64_t)&a2[v418] & v51) + 0x20);
          *(_OWORD *)(((unint64_t)&v3[v418] & v51) + 0x10) = *(_OWORD *)(((unint64_t)&a2[v418] & v51)
                                                                              + 0x10);
          *(_OWORD *)(((unint64_t)&v3[v418] & v51) + 0x20) = v239;
          *v120 = v238;
          v240 = *(_OWORD *)(((unint64_t)&a2[v418] & v51) + 0x30);
          v241 = *(_OWORD *)(((unint64_t)&a2[v418] & v51) + 0x40);
          v242 = *(_OWORD *)(((unint64_t)&a2[v418] & v51) + 0x50);
          *(_QWORD *)(((unint64_t)&v3[v418] & v51) + 0x60) = *(_QWORD *)(((unint64_t)&a2[v418] & v51)
                                                                              + 0x60);
          *(_OWORD *)(((unint64_t)&v3[v418] & v51) + 0x40) = v241;
          *(_OWORD *)(((unint64_t)&v3[v418] & v51) + 0x50) = v242;
          *(_OWORD *)(((unint64_t)&v3[v418] & v51) + 0x30) = v240;
          v435 = (_OWORD *)((unint64_t)&v3[v418] & v51);
          v243 = ((unint64_t)v120 + v375) & v397;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v415 + 32))(v243, ((unint64_t)v121 + v375) & v397, v416);
          v244 = (void *)((v413 + v243) & v436);
          v245 = (const void *)((v413 + (((unint64_t)v121 + v375) & v397)) & v436);
          v246 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v429 + 48);
          if (v246(v245, 1, v428))
          {
            v247 = v427;
            memcpy(v244, v245, v427);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v429 + 32))(v244, v245, v428);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v429 + 56))(v244, 0, 1, v428);
            v247 = v427;
          }
          v308 = (void *)(((unint64_t)v244 + v430) & v436);
          v309 = (const void *)(((unint64_t)v245 + v430) & v436);
          if (v246(v309, 1, v428))
          {
            memcpy(v308, v309, v247);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v429 + 32))(v308, v309, v428);
            v247 = v427;
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v429 + 56))(v308, 0, 1, v428);
          }
          v327 = (void *)(((unint64_t)v308 + v430) & v436);
          v328 = (const void *)(((unint64_t)v309 + v430) & v436);
          if (v246(v328, 1, v428))
          {
            memcpy(v327, v328, v247);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v429 + 32))(v327, v328, v428);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v429 + 56))(v327, 0, 1, v428);
          }
          v284 = 8;
          goto LABEL_361;
        case 9:
          __nc = v26;
          v248 = *(_OWORD *)(((unint64_t)&a2[v418] & v51) + 0x10);
          *v120 = *v121;
          *(_OWORD *)(((unint64_t)&v3[v418] & v51) + 0x10) = v248;
          v249 = *(_OWORD *)(((unint64_t)&a2[v418] & v51) + 0x20);
          v250 = *(_OWORD *)(((unint64_t)&a2[v418] & v51) + 0x30);
          v251 = *(_OWORD *)(((unint64_t)&a2[v418] & v51) + 0x50);
          *(_OWORD *)(((unint64_t)&v3[v418] & v51) + 0x40) = *(_OWORD *)(((unint64_t)&a2[v418] & v51)
                                                                              + 0x40);
          *(_OWORD *)(((unint64_t)&v3[v418] & v51) + 0x50) = v251;
          *(_OWORD *)(((unint64_t)&v3[v418] & v51) + 0x20) = v249;
          *(_OWORD *)(((unint64_t)&v3[v418] & v51) + 0x30) = v250;
          v252 = *(_OWORD *)(((unint64_t)&a2[v418] & v51) + 0x60);
          v253 = *(_OWORD *)(((unint64_t)&a2[v418] & v51) + 0x70);
          v254 = *(_OWORD *)(((unint64_t)&a2[v418] & v51) + 0x90);
          *(_OWORD *)(((unint64_t)&v3[v418] & v51) + 0x80) = *(_OWORD *)(((unint64_t)&a2[v418] & v51)
                                                                              + 0x80);
          *(_OWORD *)(((unint64_t)&v3[v418] & v51) + 0x90) = v254;
          *(_OWORD *)(((unint64_t)&v3[v418] & v51) + 0x60) = v252;
          *(_OWORD *)(((unint64_t)&v3[v418] & v51) + 0x70) = v253;
          v435 = (_OWORD *)((unint64_t)&v3[v418] & v51);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v415 + 32))(((unint64_t)v120 + v378) & v397, ((unint64_t)v121 + v378) & v397, v416);
          v255 = (void *)((v413 + (((unint64_t)v120 + v378) & v397)) & v436);
          v256 = (const void *)((v413 + (((unint64_t)v121 + v378) & v397)) & v436);
          v257 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v429 + 48);
          if (v257(v256, 1, v428))
          {
            v258 = v427;
            memcpy(v255, v256, v427);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v429 + 32))(v255, v256, v428);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v429 + 56))(v255, 0, 1, v428);
            v258 = v427;
          }
          v310 = (void *)(((unint64_t)v255 + v430) & v436);
          v311 = (const void *)(((unint64_t)v256 + v430) & v436);
          if (v257(v311, 1, v428))
          {
            memcpy(v310, v311, v258);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v429 + 32))(v310, v311, v428);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v429 + 56))(v310, 0, 1, v428);
          }
          v329 = (void *)(((unint64_t)v310 + v430) & v436);
          v330 = (const void *)(((unint64_t)v311 + v430) & v436);
          if (v257(v330, 1, v428))
          {
            memcpy(v329, v330, v258);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v429 + 32))(v329, v330, v428);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v429 + 56))(v329, 0, 1, v428);
          }
          v343 = (void *)(((unint64_t)v329 + v430) & v436);
          v344 = (const void *)(((unint64_t)v330 + v430) & v436);
          if (v257(v344, 1, v428))
          {
            memcpy(v343, v344, v258);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v429 + 32))(v343, v344, v428);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v429 + 56))(v343, 0, 1, v428);
          }
          v123 = v431;
          v347 = (void *)(((unint64_t)v343 + v414) & v417);
          v348 = (const void *)(((unint64_t)v344 + v414) & v417);
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v392 + 48))(v348, 1, v393))
          {
            memcpy(v347, v348, __nc);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v392 + 32))(v347, v348, v393);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v392 + 56))(v347, 0, 1, v393);
          }
          v284 = 9;
LABEL_377:
          v285 = v394;
          v102 = v432;
          goto LABEL_378;
        case 0xA:
          v259 = *v121;
          v260 = *(_OWORD *)(((unint64_t)&a2[v418] & v51) + 0x10);
          v261 = *(_OWORD *)(((unint64_t)&a2[v418] & v51) + 0x20);
          *(_QWORD *)(((unint64_t)&v3[v418] & v51) + 0x30) = *(_QWORD *)(((unint64_t)&a2[v418] & v51)
                                                                              + 0x30);
          *(_OWORD *)(((unint64_t)&v3[v418] & v51) + 0x10) = v260;
          *(_OWORD *)(((unint64_t)&v3[v418] & v51) + 0x20) = v261;
          *v120 = v259;
          v435 = (_OWORD *)((unint64_t)&v3[v418] & v51);
          v262 = ((unint64_t)v120 + v373) & v397;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v415 + 32))(v262, ((unint64_t)v121 + v373) & v397, v416);
          v263 = (void *)((v413 + v262) & v436);
          v264 = (const void *)((v413 + (((unint64_t)v121 + v373) & v397)) & v436);
          v265 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v429 + 48);
          if (v265(v264, 1, v428))
          {
            v266 = v427;
            memcpy(v263, v264, v427);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v429 + 32))(v263, v264, v428);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v429 + 56))(v263, 0, 1, v428);
            v266 = v427;
          }
          v312 = (void *)(((unint64_t)v263 + v430) & v436);
          v313 = (const void *)(((unint64_t)v264 + v430) & v436);
          if (v265(v313, 1, v428))
          {
            memcpy(v312, v313, v266);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v429 + 32))(v312, v313, v428);
            v266 = v427;
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v429 + 56))(v312, 0, 1, v428);
          }
          v331 = (void *)(((unint64_t)v312 + v430) & v436);
          v332 = (const void *)(((unint64_t)v313 + v430) & v436);
          if (v265(v332, 1, v428))
          {
            memcpy(v331, v332, v266);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v429 + 32))(v331, v332, v428);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v429 + 56))(v331, 0, 1, v428);
          }
          v284 = 10;
          goto LABEL_361;
        case 0xB:
          __nd = v26;
          v267 = *v121;
          v268 = *(_OWORD *)(((unint64_t)&a2[v418] & v51) + 0x10);
          v269 = *(_OWORD *)(((unint64_t)&a2[v418] & v51) + 0x30);
          *(_OWORD *)(((unint64_t)&v3[v418] & v51) + 0x20) = *(_OWORD *)(((unint64_t)&a2[v418] & v51)
                                                                              + 0x20);
          *(_OWORD *)(((unint64_t)&v3[v418] & v51) + 0x30) = v269;
          *v120 = v267;
          *(_OWORD *)(((unint64_t)&v3[v418] & v51) + 0x10) = v268;
          v435 = (_OWORD *)((unint64_t)&v3[v418] & v51);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v415 + 32))(((unint64_t)v120 + v376) & v397, ((unint64_t)v121 + v376) & v397, v416);
          v270 = (void *)((v413 + (((unint64_t)v120 + v376) & v397)) & v436);
          v271 = (const void *)((v413 + (((unint64_t)v121 + v376) & v397)) & v436);
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v429 + 48))(v271, 1, v428))
          {
            v272 = v427;
            memcpy(v270, v271, v427);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v429 + 32))(v270, v271, v428);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v429 + 56))(v270, 0, 1, v428);
            v272 = v427;
          }
          *((_BYTE *)v270 + v272) = *((_BYTE *)v271 + v272);
          v314 = ((v412 + ((v414 + ((v430 + (((v409 | v9) + v272) & v436)) & v436)) & v417)) & v417) + __nd;
          if (v408 > v314)
            v314 = v408;
          if (v407 > v314)
            v314 = v407;
          if (v406 > v314)
            v314 = v406;
          if (v404 > v314)
            v314 = v404;
          if (v405 > v314)
            v314 = v405;
          if (v403 > v314)
            v314 = v403;
          if (v405 > v314)
            v314 = v405;
          if (v402 > v314)
            v314 = v402;
          if (v401 > v314)
            v314 = v401;
          if (v400 > v314)
            v314 = v400;
          if (v399 > v314)
            v314 = v399;
          if (v398 > v314)
            v314 = v398;
          if (v411 > v314)
            v314 = v411;
          if (v410 <= v314)
            v102 = v314;
          else
            v102 = v410;
          v284 = 11;
          v285 = v394;
          goto LABEL_378;
        case 0xC:
          v273 = *v121;
          v274 = *(_OWORD *)(((unint64_t)&a2[v418] & v51) + 0x10);
          v275 = *(_OWORD *)(((unint64_t)&a2[v418] & v51) + 0x30);
          *(_OWORD *)(((unint64_t)&v3[v418] & v51) + 0x20) = *(_OWORD *)(((unint64_t)&a2[v418] & v51)
                                                                              + 0x20);
          *(_OWORD *)(((unint64_t)&v3[v418] & v51) + 0x30) = v275;
          *v120 = v273;
          *(_OWORD *)(((unint64_t)&v3[v418] & v51) + 0x10) = v274;
          v276 = *(_OWORD *)(((unint64_t)&a2[v418] & v51) + 0x40);
          v277 = *(_OWORD *)(((unint64_t)&a2[v418] & v51) + 0x50);
          v278 = *(_OWORD *)(((unint64_t)&a2[v418] & v51) + 0x70);
          *(_OWORD *)(((unint64_t)&v3[v418] & v51) + 0x60) = *(_OWORD *)(((unint64_t)&a2[v418] & v51)
                                                                              + 0x60);
          *(_OWORD *)(((unint64_t)&v3[v418] & v51) + 0x70) = v278;
          *(_OWORD *)(((unint64_t)&v3[v418] & v51) + 0x40) = v276;
          *(_OWORD *)(((unint64_t)&v3[v418] & v51) + 0x50) = v277;
          v435 = (_OWORD *)((unint64_t)&v3[v418] & v51);
          v279 = ((unint64_t)v120 + v377) & v397;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v415 + 32))(v279, ((unint64_t)v121 + v377) & v397, v416);
          v280 = (void *)((v413 + v279) & v436);
          v281 = (const void *)((v413 + (((unint64_t)v121 + v377) & v397)) & v436);
          v282 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v429 + 48);
          if (v282(v281, 1, v428))
          {
            v283 = v427;
            memcpy(v280, v281, v427);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v429 + 32))(v280, v281, v428);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v429 + 56))(v280, 0, 1, v428);
            v283 = v427;
          }
          v315 = (void *)(((unint64_t)v280 + v430) & v436);
          v316 = (const void *)(((unint64_t)v281 + v430) & v436);
          if (v282(v316, 1, v428))
          {
            memcpy(v315, v316, v283);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v429 + 32))(v315, v316, v428);
            v283 = v427;
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v429 + 56))(v315, 0, 1, v428);
          }
          v333 = (void *)(((unint64_t)v315 + v430) & v436);
          v334 = (const void *)(((unint64_t)v316 + v430) & v436);
          if (v282(v334, 1, v428))
          {
            memcpy(v333, v334, v283);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v429 + 32))(v333, v334, v428);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v429 + 56))(v333, 0, 1, v428);
          }
          v284 = 12;
          goto LABEL_361;
        case 0xD:
          (*(void (**)(unint64_t, __int128 *, uint64_t))(v388 + 32))((unint64_t)&v3[v418] & v51, v121, v389);
          v284 = 13;
          v285 = v394;
          goto LABEL_379;
        case 0xE:
          (*(void (**)(unint64_t, __int128 *, uint64_t))(v415 + 32))((unint64_t)&v3[v418] & v51, v121, v416);
          v435 = (_OWORD *)((unint64_t)&v3[v418] & v51);
          v286 = (void *)(((unint64_t)v120 + v413) & v436);
          v287 = (const void *)(((unint64_t)v121 + v413) & v436);
          v288 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v429 + 48);
          if (v288(v287, 1, v428))
          {
            v289 = v427;
            memcpy(v286, v287, v427);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v429 + 32))(v286, v287, v428);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v429 + 56))(v286, 0, 1, v428);
            v289 = v427;
          }
          v317 = (void *)(((unint64_t)v286 + v430) & v436);
          v318 = (const void *)(((unint64_t)v287 + v430) & v436);
          if (v288(v318, 1, v428))
          {
            memcpy(v317, v318, v289);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v429 + 32))(v317, v318, v428);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v429 + 56))(v317, 0, 1, v428);
          }
          v284 = 14;
LABEL_361:
          v285 = v394;
          v123 = v431;
LABEL_378:
          v120 = v435;
LABEL_379:
          *((_BYTE *)v120 + v102) = v284;
          v351 = (void *)(((unint64_t)v120 + v285) & v420);
          v352 = (const void *)(((unint64_t)v121 + v285) & v420);
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v422 + 48))(v352, 1, v423))
          {
            memcpy(v351, v352, v390);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v422 + 32))(v351, v352, v423);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v422 + 56))(v351, 0, 1, v423);
          }
          v353 = (void *)(((unint64_t)v351 + v424) & v421);
          v354 = (const void *)(((unint64_t)v352 + v424) & v421);
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v425 + 48))(v354, 1, v123))
          {
            memcpy(v353, v354, v391);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v425 + 32))(v353, v354, v123);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v425 + 56))(v353, 0, 1, v123);
          }
          v152 = 0;
          *(_QWORD *)(((unint64_t)v353 + v426) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v354 + v426) & 0xFFFFFFFFFFFFF8);
          break;
        default:
          if (v432 <= 3)
            v122 = v432;
          else
            v122 = 4;
          __asm { BR              X12 }
          return result;
      }
    }
    v3[v437] = v152;
  }
  return v3;
}

uint64_t sub_23BF7A8C4(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char v65;
  int v66;
  unsigned int v68;
  int v69;
  unsigned int v70;

  v6 = *(_QWORD *)(*(_QWORD *)(a3[5] - 8) + 64);
  v7 = *(_QWORD *)(a3[3] - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(sub_23BFF82CC() - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(a3[2] - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = *(_QWORD *)(sub_23BFF8368() - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = a3[6];
  v16 = *(_QWORD *)(a3[7] - 8);
  v17 = *(unsigned __int8 *)(v16 + 80);
  v18 = v8 | v10 | v12 | v14 | v17 | 7;
  v19 = (v18 + v6) & ~v18;
  v20 = *(_QWORD *)(v7 + 64);
  v21 = v20 + v10;
  v22 = v20 + v10 + 1;
  v23 = (v22 + ((v8 + 248) & ~v8)) & ~v10;
  v24 = *(_QWORD *)(v9 + 64);
  if (v24 > v20)
    v20 = *(_QWORD *)(v9 + 64);
  v25 = *(_QWORD *)(v11 + 64);
  if (*(_DWORD *)(v9 + 84))
    v26 = *(_QWORD *)(v9 + 64);
  else
    v26 = v24 + 1;
  v27 = *(_QWORD *)(v13 + 64);
  v28 = (v22 + ((v8 + 216) & ~v8)) & ~v10;
  v29 = *(_DWORD *)(v16 + 84);
  v30 = *(_QWORD *)(v16 + 64);
  v31 = v26 + v10;
  v32 = v26 + v12;
  v33 = (v25 + v12 + ((v26 + v12 + ((v26 + v10 + ((v26 + v10 + v23) & ~v10)) & ~v10)) & ~v12)) & ~v12;
  if (!*(_DWORD *)(v11 + 84))
    ++v25;
  v34 = v33 + v25;
  v35 = ((v26 + v14 + (v31 & ~v10)) & ~v14) + v27;
  if (v35 <= v20)
    v35 = v20;
  if (v35 + 1 > v34)
    v36 = v35 + 1;
  else
    v36 = v34;
  v37 = v29 == 0;
  v39 = v21 & ~v10;
  v40 = (v21 + ((v8 + 24) & ~v8)) & ~v10;
  v41 = (v21 + ((v8 + 104) & ~v8)) & ~v10;
  v42 = (v21 + ((v8 + 160) & ~v8)) & ~v10;
  v43 = (v21 + ((v8 + 56) & ~v8)) & ~v10;
  v44 = (v21 + ((v8 + 64) & ~v8)) & ~v10;
  v45 = (v21 + ((v8 + 128) & ~v8)) & ~v10;
  v46 = *(_QWORD *)(a3[4] - 8);
  v47 = *(unsigned __int8 *)(v46 + 80);
  v48 = *(_DWORD *)(v46 + 84);
  v49 = *(_QWORD *)(v46 + 64);
  v50 = (v25 + v17 + ((v25 + v12 + ((v32 + ((v31 + ((v31 + v28) & ~v10)) & ~v10)) & ~v12)) & ~v12)) & ~v17;
  if (v37)
    v51 = v30 + 1;
  else
    v51 = v30;
  v52 = v51 + v50;
  if (v52 > v36)
    v36 = v52;
  v38 = (v10 + 64) & ~v10;
  if (((v32 + ((v31 + v38) & ~v10)) & (unint64_t)~v12) + v25 > v36)
    v36 = ((v32 + ((v31 + v38) & ~v10)) & ~v12) + v25;
  v53 = ((v26 + v39 + v10) & ~v10) + v26;
  if (((v53 + v10) & ~v10) + v26 > v36)
    v36 = ((v53 + v10) & ~v10) + v26;
  v54 = ((v10 + ((v26 + v39) & 0xFFFFFFFFFFFFFFF8) + 24) & ~v10) + v26;
  if (v54 > v36)
    v36 = ((v10 + ((v26 + v39) & 0xFFFFFFFFFFFFFFF8) + 24) & ~v10) + v26;
  if (((v31 + v40) & ~v10) + v26 > v36)
    v36 = ((v31 + v40) & ~v10) + v26;
  if (v54 > v36)
    v36 = ((v10 + ((v26 + v39) & 0xFFFFFFFFFFFFFFF8) + 24) & ~v10) + v26;
  if (((v31 + ((v31 + v41) & ~v10)) & ~v10) + v26 > v36)
    v36 = ((v31 + ((v31 + v41) & ~v10)) & ~v10) + v26;
  if (((v32 + ((v31 + ((v31 + ((v31 + v42) & ~v10)) & ~v10)) & ~v10)) & (unint64_t)~v12) + v25 > v36)
    v36 = ((v32 + ((v31 + ((v31 + ((v31 + v42) & ~v10)) & ~v10)) & ~v10)) & ~v12) + v25;
  if (((v31 + ((v31 + v43) & ~v10)) & ~v10) + v26 > v36)
    v36 = ((v31 + ((v31 + v43) & ~v10)) & ~v10) + v26;
  if (v44 + v26 + 1 > v36)
    v36 = v44 + v26 + 1;
  v55 = ((v31 + ((v31 + v45) & ~v10)) & ~v10) + v26;
  if (v55 > v36)
    v36 = v55;
  if (v30 > v36)
    v36 = v30;
  if (v53 > v36)
    v36 = v53;
  v56 = *(_QWORD *)(v15 - 8);
  v57 = *(unsigned __int8 *)(v56 + 80);
  v58 = *(_DWORD *)(v56 + 84);
  v59 = *(_QWORD *)(v56 + 64);
  if (v48)
    v60 = v49;
  else
    v60 = v49 + 1;
  v61 = (v60 + v57 + ((v47 + v19 + v36 + 1) & ~v47)) & ~v57;
  if (!v58)
    ++v59;
  v62 = ((v59 + v61 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 249 <= v62)
    v63 = v62;
  else
    v63 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 249;
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_68;
  v64 = v63 + 1;
  v65 = 8 * (v63 + 1);
  if ((v63 + 1) <= 3)
  {
    v68 = ((a2 + ~(-1 << v65) - 254) >> v65) + 1;
    if (HIWORD(v68))
    {
      v66 = *(_DWORD *)(a1 + v64);
      if (!v66)
        goto LABEL_68;
      goto LABEL_61;
    }
    if (v68 > 0xFF)
    {
      v66 = *(unsigned __int16 *)(a1 + v64);
      if (!*(_WORD *)(a1 + v64))
        goto LABEL_68;
      goto LABEL_61;
    }
    if (v68 < 2)
    {
LABEL_68:
      v70 = *(unsigned __int8 *)(a1 + v63);
      if (v70 >= 2)
        return (v70 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v66 = *(unsigned __int8 *)(a1 + v64);
  if (!*(_BYTE *)(a1 + v64))
    goto LABEL_68;
LABEL_61:
  v69 = (v66 - 1) << v65;
  if (v64 > 3)
    v69 = 0;
  if ((_DWORD)v64)
  {
    if (v64 > 3)
      LODWORD(v64) = 4;
    __asm { BR              X11 }
  }
  return (v69 + 255);
}

void sub_23BF7AD5C(_BYTE *a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  size_t v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  int v68;

  v7 = *(_QWORD *)(*(_QWORD *)(a4[5] - 8) + 64);
  v8 = *(_QWORD *)(a4[3] - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(sub_23BFF82CC() - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = *(_QWORD *)(a4[2] - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = *(_QWORD *)(sub_23BFF8368() - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = a4[6];
  v17 = *(_QWORD *)(a4[7] - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  v19 = v9 | v11 | v13 | v15 | v18 | 7;
  v20 = (v19 + v7) & ~v19;
  v21 = *(_QWORD *)(v8 + 64);
  v22 = v21 + v11;
  v23 = v21 + v11 + 1;
  v24 = (v23 + ((v9 + 248) & ~v9)) & ~v11;
  v25 = *(_QWORD *)(v10 + 64);
  if (v25 > v21)
    v21 = *(_QWORD *)(v10 + 64);
  v26 = *(_QWORD *)(v12 + 64);
  if (*(_DWORD *)(v10 + 84))
    v27 = *(_QWORD *)(v10 + 64);
  else
    v27 = v25 + 1;
  v28 = *(_QWORD *)(v14 + 64);
  v29 = (v23 + ((v9 + 216) & ~v9)) & ~v11;
  v30 = *(_DWORD *)(v17 + 84);
  v31 = *(_QWORD *)(v17 + 64);
  v32 = v27 + v11;
  v33 = v27 + v13;
  v34 = (v26 + v13 + ((v27 + v13 + ((v27 + v11 + ((v27 + v11 + v24) & ~v11)) & ~v11)) & ~v13)) & ~v13;
  if (!*(_DWORD *)(v12 + 84))
    ++v26;
  v35 = v34 + v26;
  v36 = ((v27 + v15 + (v32 & ~v11)) & ~v15) + v28;
  if (v36 <= v21)
    v36 = v21;
  if (v36 + 1 > v35)
    v37 = v36 + 1;
  else
    v37 = v35;
  v38 = v30 == 0;
  v40 = v22 & ~v11;
  v41 = (v22 + ((v9 + 24) & ~v9)) & ~v11;
  v42 = (v22 + ((v9 + 104) & ~v9)) & ~v11;
  v43 = (v22 + ((v9 + 160) & ~v9)) & ~v11;
  v44 = (v22 + ((v9 + 56) & ~v9)) & ~v11;
  v45 = (v22 + ((v9 + 64) & ~v9)) & ~v11;
  v46 = (v22 + ((v9 + 128) & ~v9)) & ~v11;
  v47 = *(_QWORD *)(a4[4] - 8);
  v48 = *(unsigned __int8 *)(v47 + 80);
  v49 = *(_DWORD *)(v47 + 84);
  v50 = *(_QWORD *)(v47 + 64);
  v51 = (v26 + v18 + ((v26 + v13 + ((v33 + ((v32 + ((v32 + v29) & ~v11)) & ~v11)) & ~v13)) & ~v13)) & ~v18;
  if (v38)
    v52 = v31 + 1;
  else
    v52 = v31;
  v53 = v52 + v51;
  if (v53 > v37)
    v37 = v53;
  v39 = (v11 + 64) & ~v11;
  if (((v33 + ((v32 + v39) & ~v11)) & (unint64_t)~v13) + v26 > v37)
    v37 = ((v33 + ((v32 + v39) & ~v11)) & ~v13) + v26;
  v54 = ((v27 + v40 + v11) & ~v11) + v27;
  if (((v54 + v11) & ~v11) + v27 > v37)
    v37 = ((v54 + v11) & ~v11) + v27;
  v55 = ((v11 + ((v27 + v40) & 0xFFFFFFFFFFFFFFF8) + 24) & ~v11) + v27;
  if (v55 > v37)
    v37 = ((v11 + ((v27 + v40) & 0xFFFFFFFFFFFFFFF8) + 24) & ~v11) + v27;
  if (((v32 + v41) & ~v11) + v27 > v37)
    v37 = ((v32 + v41) & ~v11) + v27;
  if (v55 > v37)
    v37 = ((v11 + ((v27 + v40) & 0xFFFFFFFFFFFFFFF8) + 24) & ~v11) + v27;
  if (((v32 + ((v32 + v42) & ~v11)) & ~v11) + v27 > v37)
    v37 = ((v32 + ((v32 + v42) & ~v11)) & ~v11) + v27;
  if (((v33 + ((v32 + ((v32 + ((v32 + v43) & ~v11)) & ~v11)) & ~v11)) & (unint64_t)~v13) + v26 > v37)
    v37 = ((v33 + ((v32 + ((v32 + ((v32 + v43) & ~v11)) & ~v11)) & ~v11)) & ~v13) + v26;
  if (((v32 + ((v32 + v44) & ~v11)) & ~v11) + v27 > v37)
    v37 = ((v32 + ((v32 + v44) & ~v11)) & ~v11) + v27;
  if (v45 + v27 + 1 > v37)
    v37 = v45 + v27 + 1;
  v56 = ((v32 + ((v32 + v46) & ~v11)) & ~v11) + v27;
  if (v56 > v37)
    v37 = v56;
  if (v31 > v37)
    v37 = v31;
  if (v54 > v37)
    v37 = v54;
  v57 = *(_QWORD *)(v16 - 8);
  v58 = *(unsigned __int8 *)(v57 + 80);
  v59 = *(_DWORD *)(v57 + 84);
  v60 = *(_QWORD *)(v57 + 64);
  if (v49)
    v61 = v50;
  else
    v61 = v50 + 1;
  v62 = (v61 + v58 + ((v48 + v20 + v37 + 1) & ~v48)) & ~v58;
  if (!v59)
    ++v60;
  v63 = ((v60 + v62 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 249 > v63)
    v63 = ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 249;
  v64 = v63 + 1;
  if (a3 < 0xFF)
  {
    v65 = 0;
  }
  else if (v64 <= 3)
  {
    v67 = ((a3 + ~(-1 << (8 * v64)) - 254) >> (8 * v64)) + 1;
    if (HIWORD(v67))
    {
      v65 = 4u;
    }
    else if (v67 >= 0x100)
    {
      v65 = 2;
    }
    else
    {
      v65 = v67 > 1;
    }
  }
  else
  {
    v65 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v66 = a2 - 255;
  if (v64 < 4)
  {
    if ((_DWORD)v63 != -1)
    {
      v68 = v66 & ~(-1 << (8 * v64));
      bzero(a1, v64);
      if ((_DWORD)v64 == 3)
      {
        *(_WORD *)a1 = v68;
        a1[2] = BYTE2(v68);
      }
      else if ((_DWORD)v64 == 2)
      {
        *(_WORD *)a1 = v68;
      }
      else
      {
        *a1 = v68;
      }
    }
  }
  else
  {
    bzero(a1, v63 + 1);
    *(_DWORD *)a1 = v66;
  }
  __asm { BR              X10 }
}

uint64_t sub_23BF7B274(unsigned __int8 *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t result;
  int v56;
  int v57;

  v4 = *(_QWORD *)(*(_QWORD *)(a2[5] - 8) + 64);
  v5 = *(_QWORD *)(a2[3] - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(sub_23BFF82CC() - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(a2[2] - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(sub_23BFF8368() - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = *(_QWORD *)(a2[7] - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v6 | v8 | v10 | v12 | v14 | 7;
  v16 = (v15 + v4) & ~v15;
  v17 = *(_QWORD *)(v5 + 64);
  v18 = v17 + v8;
  v19 = v17 + v8 + 1;
  v20 = *(_QWORD *)(v7 + 64);
  if (*(_DWORD *)(v7 + 84))
    v21 = *(_QWORD *)(v7 + 64);
  else
    v21 = v20 + 1;
  v22 = v21 + v8;
  v23 = v21 + v10;
  v24 = *(_QWORD *)(v9 + 64);
  v25 = (v24 + v10 + ((v21 + v10 + ((v21 + v8 + ((v21 + v8 + ((v19 + ((v6 + 248) & ~v6)) & ~v8)) & ~v8)) & ~v8)) & ~v10)) & ~v10;
  if (!*(_DWORD *)(v9 + 84))
    ++v24;
  v26 = v25 + v24;
  if (v20 > v17)
    v17 = *(_QWORD *)(v7 + 64);
  v27 = ((v21 + v12 + (v22 & ~v8)) & ~v12) + *(_QWORD *)(v11 + 64);
  if (v27 <= v17)
    v27 = v17;
  v28 = (v24
       + v14
       + ((v24 + v10 + ((v23 + ((v22 + ((v22 + ((v19 + ((v6 + 216) & ~v6)) & ~v8)) & ~v8)) & ~v8)) & ~v10)) & ~v10)) & ~v14;
  v29 = *(_DWORD *)(v13 + 84);
  v30 = *(_QWORD *)(v13 + 64);
  if (v29)
    v31 = v30;
  else
    v31 = v30 + 1;
  v32 = v31 + v28;
  v33 = ((v23 + ((v22 + ((v8 + 64) & ~v8)) & ~v8)) & ~v10) + v24;
  v34 = v21 + (v18 & ~v8);
  v35 = ((v34 + v8) & ~v8) + v21;
  v36 = ((v35 + v8) & ~v8) + v21;
  v37 = ((v8 + (v34 & 0xFFFFFFFFFFFFFFF8) + 24) & ~v8) + v21;
  v38 = ((v22 + ((v18 + ((v6 + 24) & ~v6)) & ~v8)) & ~v8) + v21;
  v39 = ((v22 + ((v22 + ((v18 + ((v6 + 104) & ~v6)) & ~v8)) & ~v8)) & ~v8) + v21;
  v40 = ((v23 + ((v22 + ((v22 + ((v22 + ((v18 + ((v6 + 160) & ~v6)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v10) + v24;
  v41 = ((v22 + ((v22 + ((v18 + ((v6 + 56) & ~v6)) & ~v8)) & ~v8)) & ~v8) + v21;
  v42 = ((v18 + ((v6 + 64) & ~v6)) & ~v8) + v21;
  v43 = ((v22 + ((v22 + ((v18 + ((v6 + 128) & ~v6)) & ~v8)) & ~v8)) & ~v8) + v21;
  if (v37 <= v26)
    v44 = v26;
  else
    v44 = v37;
  if (v44 <= v27 + 1)
    v45 = v27 + 1;
  else
    v45 = v44;
  if (v45 <= v32)
    v45 = v32;
  if (v45 <= v33)
    v45 = v33;
  if (v45 <= v36)
    v45 = v36;
  if (v45 <= v38)
    v45 = v38;
  if (v45 <= v39)
    v45 = v39;
  if (v45 <= v40)
    v45 = v40;
  if (v45 <= v41)
    v45 = v41;
  if (v45 <= v42 + 1)
    v45 = v42 + 1;
  if (v45 <= v43)
    v45 = v43;
  if (v45 <= v35)
    v45 = v35;
  if (v45 <= v30)
    v45 = v30;
  v46 = *(_QWORD *)(a2[4] - 8);
  v47 = (*(unsigned __int8 *)(v46 + 80) + v16 + v45 + 1) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
  v48 = *(_DWORD *)(v46 + 84);
  v49 = *(_QWORD *)(v46 + 64);
  if (!v48)
    ++v49;
  v50 = *(_QWORD *)(a2[6] - 8);
  v51 = (v49 + *(unsigned __int8 *)(v50 + 80) + v47) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80);
  v52 = *(_DWORD *)(v50 + 84);
  v53 = *(_QWORD *)(v50 + 64);
  if (!v52)
    ++v53;
  v54 = ((v53 + v51 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (((v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 249 > v54)
    v54 = ((v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 249;
  result = a1[v54];
  if (result >= 2)
  {
    v56 = v54 <= 3 ? v54 : 4;
    if (v56)
    {
      if (v56 == 4)
      {
        v57 = *(_DWORD *)a1;
        if (v54 < 4)
          return (v57 | (((_DWORD)result - 2) << (8 * v54))) + 2;
      }
      else
      {
        v57 = *a1;
        if (v54 < 4)
          return (v57 | (((_DWORD)result - 2) << (8 * v54))) + 2;
      }
      return (v57 + 2);
    }
  }
  return result;
}

void sub_23BF7B660(_BYTE *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _BOOL8 v47;
  unint64_t v48;
  unint64_t v49;
  size_t v50;
  char v51;
  int v52;
  int v53;

  v6 = *(_QWORD *)(*(_QWORD *)(a3[5] - 8) + 64);
  v7 = *(_QWORD *)(a3[3] - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(sub_23BFF82CC() - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(a3[2] - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = *(_QWORD *)(sub_23BFF8368() - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = *(_QWORD *)(a3[7] - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = v8 | v10 | v12 | v14 | v16 | 7;
  v18 = (v17 + v6) & ~v17;
  v19 = *(_QWORD *)(v7 + 64);
  v20 = v19 + v10;
  v21 = v19 + v10 + 1;
  v22 = *(_QWORD *)(v9 + 64);
  if (*(_DWORD *)(v9 + 84))
    v23 = *(_QWORD *)(v9 + 64);
  else
    v23 = v22 + 1;
  v24 = v23 + v10;
  v25 = v23 + v12;
  v26 = *(_QWORD *)(v11 + 64);
  v27 = (v26
       + v12
       + ((v23 + v12 + ((v23 + v10 + ((v23 + v10 + ((v21 + ((v8 + 248) & ~v8)) & ~v10)) & ~v10)) & ~v10)) & ~v12)) & ~v12;
  if (!*(_DWORD *)(v11 + 84))
    ++v26;
  v28 = v27 + v26;
  if (v22 > v19)
    v19 = *(_QWORD *)(v9 + 64);
  v29 = ((v23 + v14 + (v24 & ~v10)) & ~v14) + *(_QWORD *)(v13 + 64);
  if (v29 <= v19)
    v29 = v19;
  if (v29 + 1 > v28)
    v30 = v29 + 1;
  else
    v30 = v28;
  v31 = (v26
       + v16
       + ((v26 + v12 + ((v25 + ((v24 + ((v24 + ((v21 + ((v8 + 216) & ~v8)) & ~v10)) & ~v10)) & ~v10)) & ~v12)) & ~v12)) & ~v16;
  v32 = *(_DWORD *)(v15 + 84);
  v33 = *(_QWORD *)(v15 + 64);
  if (v32)
    v34 = v33;
  else
    v34 = v33 + 1;
  v35 = v34 + v31;
  if (v35 > v30)
    v30 = v35;
  if (((v25 + ((v24 + ((v10 + 64) & ~v10)) & ~v10)) & (unint64_t)~v12) + v26 > v30)
    v30 = ((v25 + ((v24 + ((v10 + 64) & ~v10)) & ~v10)) & ~v12) + v26;
  v36 = v23 + (v20 & ~v10);
  v37 = ((v36 + v10) & ~v10) + v23;
  if (((v37 + v10) & ~v10) + v23 > v30)
    v30 = ((v37 + v10) & ~v10) + v23;
  v38 = ((v10 + (v36 & 0xFFFFFFFFFFFFFFF8) + 24) & ~v10) + v23;
  if (v38 > v30)
    v30 = v38;
  if (((v24 + ((v20 + ((v8 + 24) & ~v8)) & ~v10)) & ~v10) + v23 > v30)
    v30 = ((v24 + ((v20 + ((v8 + 24) & ~v8)) & ~v10)) & ~v10) + v23;
  if (v38 > v30)
    v30 = v38;
  if (((v24 + ((v24 + ((v20 + ((v8 + 104) & ~v8)) & ~v10)) & ~v10)) & ~v10) + v23 > v30)
    v30 = ((v24 + ((v24 + ((v20 + ((v8 + 104) & ~v8)) & ~v10)) & ~v10)) & ~v10) + v23;
  if (((v25 + ((v24 + ((v24 + ((v24 + ((v20 + ((v8 + 160) & ~v8)) & ~v10)) & ~v10)) & ~v10)) & ~v10)) & (unint64_t)~v12)
     + v26 > v30)
    v30 = ((v25 + ((v24 + ((v24 + ((v24 + ((v20 + ((v8 + 160) & ~v8)) & ~v10)) & ~v10)) & ~v10)) & ~v10)) & ~v12) + v26;
  if (((v24 + ((v24 + ((v20 + ((v8 + 56) & ~v8)) & ~v10)) & ~v10)) & ~v10) + v23 > v30)
    v30 = ((v24 + ((v24 + ((v20 + ((v8 + 56) & ~v8)) & ~v10)) & ~v10)) & ~v10) + v23;
  v39 = ((v20 + ((v8 + 64) & ~v8)) & ~v10) + v23;
  if (v39 + 1 > v30)
    v30 = v39 + 1;
  if (((v24 + ((v24 + ((v20 + ((v8 + 128) & ~v8)) & ~v10)) & ~v10)) & ~v10) + v23 > v30)
    v30 = ((v24 + ((v24 + ((v20 + ((v8 + 128) & ~v8)) & ~v10)) & ~v10)) & ~v10) + v23;
  if (v33 > v30)
    v30 = v33;
  if (v37 > v30)
    v30 = v37;
  v40 = *(_QWORD *)(a3[4] - 8);
  v41 = (*(unsigned __int8 *)(v40 + 80) + v18 + v30 + 1) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
  v42 = *(_DWORD *)(v40 + 84);
  v43 = *(_QWORD *)(v40 + 64);
  if (!v42)
    ++v43;
  v44 = *(_QWORD *)(a3[6] - 8);
  v45 = (v43 + *(unsigned __int8 *)(v44 + 80) + v41) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80);
  v46 = *(_QWORD *)(v44 + 64);
  v47 = *(_DWORD *)(v44 + 84) == 0;
  if (a2 > 1)
  {
    v49 = ((v46 + v47 + v45 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    if (((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 249 <= v49)
      v50 = v49;
    else
      v50 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 249;
    if (v50 <= 3)
      v51 = ((a2 - 2) >> (8 * v50)) + 2;
    else
      v51 = 2;
    if (v50 <= 3)
      v52 = (a2 - 2) & ~(-1 << (8 * v50));
    else
      v52 = a2 - 2;
    a1[v50] = v51;
    if (v50 >= 4)
      v53 = 4;
    else
      v53 = v50;
    bzero(a1, v50);
    if (v53 == 1)
      *a1 = v52;
    else
      *(_DWORD *)a1 = v52;
  }
  else
  {
    v48 = ((v46 + v47 + v45 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    if (((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 249 > v48)
      v48 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 249;
    a1[v48] = a2;
  }
}

uint64_t sub_23BF7BA98(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23BF7BAE4 + 4 * byte_23C0025E6[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23BF7BB18 + 4 * byte_23C0025E1[v4]))();
}

uint64_t sub_23BF7BB18(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BF7BB20(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BF7BB28);
  return result;
}

uint64_t sub_23BF7BB34(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BF7BB3CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23BF7BB40(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BF7BB48(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BF7BB58(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23BF7BB98 + 4 * byte_23C0025EB[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23BF7BBB8 + 4 * byte_23C0025F0[v4]))();
}

_BYTE *sub_23BF7BB98(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23BF7BBB8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BF7BBC0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BF7BBC8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BF7BBD0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BF7BBD8(_DWORD *result)
{
  *result = 0;
  return result;
}

void sub_23BF7BBE4()
{
  JUMPOUT(0x242615198);
}

void sub_23BF7BBF4()
{
  JUMPOUT(0x242615198);
}

void sub_23BF7BC04()
{
  JUMPOUT(0x242615198);
}

void sub_23BF7BC14()
{
  JUMPOUT(0x242615198);
}

void sub_23BF7BC24()
{
  JUMPOUT(0x242615198);
}

void sub_23BF7BC34()
{
  JUMPOUT(0x242615198);
}

void sub_23BF7BC44()
{
  JUMPOUT(0x242615198);
}

void sub_23BF7BC54()
{
  JUMPOUT(0x242615198);
}

void sub_23BF7BC64()
{
  JUMPOUT(0x242615198);
}

uint64_t sub_23BF7BC74()
{
  return sub_23BEBF6D0();
}

uint64_t static FullWidthItemDescriptor.== infix(_:_:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t TupleTypeMetadata2;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  void (*v46)(char *, uint64_t, uint64_t);
  int EnumCaseMultiPayload;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char v52;
  void (*v53)(char *, uint64_t);
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  void (*v64)(char *, char *, uint64_t);
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t (*v73)(uint64_t, uint64_t, uint64_t);
  int v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(char *, uint64_t);
  char *v78;
  char v79;
  void (*v80)(char *, uint64_t);
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(char *, uint64_t);
  char *v89;
  uint64_t v90;
  char v91;
  void (*v92)(char *, uint64_t);
  char *v93;
  char *v94;
  char *v95;
  void (*v96)(char *, uint64_t);
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;

  v119 = a1;
  v120 = a2;
  v104 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE46A8);
  v6 = MEMORY[0x24BDAC7A8](v104);
  v101 = (uint64_t)&v98 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v107 = (uint64_t)&v98 - v8;
  v111 = sub_23BFF8368();
  v115 = *(_QWORD *)(v111 - 8);
  v9 = MEMORY[0x24BDAC7A8](v111);
  v108 = (char *)&v98 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v105 = (char *)&v98 - v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3618);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v99 = (uint64_t)&v98 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v102 = (uint64_t)&v98 - v16;
  v17 = MEMORY[0x24BDAC7A8](v15);
  v112 = (uint64_t)&v98 - v18;
  v19 = MEMORY[0x24BDAC7A8](v17);
  v113 = (uint64_t)&v98 - v20;
  MEMORY[0x24BDAC7A8](v19);
  v106 = (uint64_t)&v98 - v21;
  v22 = sub_23BFF82CC();
  v117 = *(_QWORD *)(v22 - 8);
  v118 = v22;
  v23 = MEMORY[0x24BDAC7A8](v22);
  v100 = (char *)&v98 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x24BDAC7A8](v23);
  v103 = (char *)&v98 - v26;
  v27 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v29 = (char *)&v98 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = a3;
  v110 = a4;
  v31 = type metadata accessor for FullWidthItemDescriptor(0, a3, a4, v30);
  v32 = *(_QWORD *)(v31 - 8);
  v33 = MEMORY[0x24BDAC7A8](v31);
  v35 = (char *)&v98 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = MEMORY[0x24BDAC7A8](v33);
  v38 = (char *)&v98 - v37;
  MEMORY[0x24BDAC7A8](v36);
  v40 = (char *)&v98 - v39;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v116 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v42 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v44 = (char *)&v98 - v43;
  v45 = (char *)&v98 + *(int *)(v42 + 48) - v43;
  v114 = v32;
  v46 = *(void (**)(char *, uint64_t, uint64_t))(v32 + 16);
  v46((char *)&v98 - v43, v119, v31);
  v46(v45, (uint64_t)v120, v31);
  v120 = v44;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    v56 = v109;
    v48 = v120;
    v46(v40, (uint64_t)v120, v31);
    if (!swift_getEnumCaseMultiPayload())
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v29, v45, v56);
      v52 = sub_23BFF93AC();
      v53 = *(void (**)(char *, uint64_t))(v27 + 8);
      v53(v29, v56);
      v54 = v40;
      v55 = v56;
      goto LABEL_15;
    }
    (*(void (**)(char *, uint64_t))(v27 + 8))(v40, v56);
    goto LABEL_12;
  }
  if (EnumCaseMultiPayload != 1)
  {
    v46(v35, (uint64_t)v120, v31);
    v57 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3930);
    v58 = *(int *)(v57 + 48);
    v59 = *(int *)(v57 + 64);
    v60 = &v35[v59];
    if (swift_getEnumCaseMultiPayload() != 2)
    {
      (*(void (**)(char *, uint64_t))(v115 + 8))(&v35[v59], v111);
      sub_23BE9F3A0((uint64_t)&v35[v58], &qword_256AE3618);
      sub_23BE9F3A0((uint64_t)v35, &qword_256AE3618);
      v52 = 0;
      v75 = v116;
      v31 = TupleTypeMetadata2;
      v48 = v120;
      goto LABEL_30;
    }
    v61 = (uint64_t)&v45[v58];
    v62 = &v45[v59];
    v63 = v106;
    sub_23BEBEF90((uint64_t)v45, v106);
    sub_23BEBEF90((uint64_t)&v35[v58], v113);
    v64 = *(void (**)(char *, char *, uint64_t))(v115 + 32);
    v65 = v105;
    v66 = v60;
    v67 = v111;
    v64(v105, v66, v111);
    sub_23BEBEF90(v61, v112);
    v64(v108, v62, v67);
    v68 = v104;
    v69 = v107;
    v70 = v107 + *(int *)(v104 + 48);
    sub_23BEBEF90((uint64_t)v35, v107);
    sub_23BEF2434(v63, v70);
    v72 = v117;
    v71 = v118;
    v73 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v117 + 48);
    if (v73(v69, 1, v118) == 1)
    {
      v74 = v73(v70, 1, v71);
      v48 = v120;
      if (v74 == 1)
      {
        sub_23BE9F3A0(v107, &qword_256AE3618);
        goto LABEL_21;
      }
    }
    else
    {
      v76 = v102;
      sub_23BEF2434(v69, v102);
      if (v73(v70, 1, v71) != 1)
      {
        v78 = v100;
        (*(void (**)(char *, uint64_t, uint64_t))(v72 + 32))(v100, v70, v71);
        sub_23BEA1BB8(qword_256AE46B0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], MEMORY[0x24BDCC5C8]);
        v79 = sub_23BFF93AC();
        v80 = *(void (**)(char *, uint64_t))(v72 + 8);
        v81 = v78;
        v65 = v105;
        v80(v81, v118);
        v80((char *)v76, v118);
        v71 = v118;
        sub_23BE9F3A0(v69, &qword_256AE3618);
        v48 = v120;
        v63 = v106;
        if ((v79 & 1) != 0)
        {
LABEL_21:
          v82 = *(int *)(v68 + 48);
          v83 = v101;
          v84 = v101 + v82;
          sub_23BEF2434(v113, v101);
          sub_23BEF2434(v112, v84);
          if (v73(v83, 1, v71) == 1)
          {
            v85 = v73(v84, 1, v71);
            v75 = v114;
            v86 = v115;
            if (v85 == 1)
            {
              sub_23BE9F3A0(v83, &qword_256AE3618);
LABEL_29:
              v94 = v108;
              v95 = v65;
              v52 = MEMORY[0x2426136F8](v65, v108);
              v96 = *(void (**)(char *, uint64_t))(v86 + 8);
              v96(v94, v67);
              sub_23BE9F3A0(v112, &qword_256AE3618);
              v96(v95, v67);
              sub_23BE9F3A0(v113, &qword_256AE3618);
              sub_23BE9F3A0(v63, &qword_256AE3618);
              goto LABEL_30;
            }
          }
          else
          {
            v87 = v99;
            sub_23BEF2434(v83, v99);
            if (v73(v84, 1, v71) != 1)
            {
              v89 = v100;
              (*(void (**)(char *, uint64_t, uint64_t))(v117 + 32))(v100, v84, v71);
              sub_23BEA1BB8(qword_256AE46B0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], MEMORY[0x24BDCC5C8]);
              v90 = v71;
              v91 = sub_23BFF93AC();
              v92 = *(void (**)(char *, uint64_t))(v117 + 8);
              v93 = v89;
              v65 = v105;
              v92(v93, v90);
              v92((char *)v87, v90);
              sub_23BE9F3A0(v83, &qword_256AE3618);
              v75 = v114;
              v86 = v115;
              if ((v91 & 1) != 0)
                goto LABEL_29;
LABEL_27:
              v88 = *(void (**)(char *, uint64_t))(v86 + 8);
              v88(v108, v67);
              sub_23BE9F3A0(v112, &qword_256AE3618);
              v88(v65, v67);
              sub_23BE9F3A0(v113, &qword_256AE3618);
              sub_23BE9F3A0(v63, &qword_256AE3618);
              v52 = 0;
              goto LABEL_30;
            }
            (*(void (**)(uint64_t, uint64_t))(v117 + 8))(v87, v71);
            v75 = v114;
            v86 = v115;
          }
          sub_23BE9F3A0(v83, &qword_256AE46A8);
          goto LABEL_27;
        }
LABEL_19:
        v77 = *(void (**)(char *, uint64_t))(v115 + 8);
        v77(v108, v67);
        sub_23BE9F3A0(v112, &qword_256AE3618);
        v77(v65, v67);
        sub_23BE9F3A0(v113, &qword_256AE3618);
        sub_23BE9F3A0(v63, &qword_256AE3618);
        v52 = 0;
        v75 = v114;
        goto LABEL_30;
      }
      (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v76, v71);
      v48 = v120;
      v63 = v106;
    }
    sub_23BE9F3A0(v107, &qword_256AE46A8);
    goto LABEL_19;
  }
  v48 = v120;
  v46(v38, (uint64_t)v120, v31);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v49 = v117;
    v50 = v118;
    v51 = v103;
    (*(void (**)(char *, char *, uint64_t))(v117 + 32))(v103, v45, v118);
    v52 = sub_23BFF826C();
    v53 = *(void (**)(char *, uint64_t))(v49 + 8);
    v53(v51, v50);
    v54 = v38;
    v55 = v50;
LABEL_15:
    v53(v54, v55);
    v75 = v114;
    goto LABEL_30;
  }
  (*(void (**)(char *, uint64_t))(v117 + 8))(v38, v118);
LABEL_12:
  v52 = 0;
  v75 = v116;
  v31 = TupleTypeMetadata2;
LABEL_30:
  (*(void (**)(char *, uint64_t))(v75 + 8))(v48, v31);
  return v52 & 1;
}

uint64_t type metadata accessor for FullWidthItemDescriptor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FullWidthItemDescriptor);
}

uint64_t sub_23BF7C5D4(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x6B726F77747261 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_23BFF9964();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_23BF7C658(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x7475626972747461 && a2 == 0xEF656C7469546465)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_23BFF9964();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_23BF7C700(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6B726F77747261 && a2 == 0xE700000000000000;
  if (v2 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F74747562 && a2 == 0xE600000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E69646E61707865 && a2 == 0xED00007478655467)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_23BFF9964();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_23BF7C870(char a1)
{
  if (!a1)
    return 0x6B726F77747261;
  if (a1 == 1)
    return 0x6E6F74747562;
  return 0x6E69646E61707865;
}

uint64_t sub_23BF7C8D0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7475626972747461 && a2 == 0xEF656C7469546465;
  if (v2 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7475626972747461 && a2 == 0xEE00747865546465 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_23BFF9964();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_23BF7CA5C(unsigned __int8 a1)
{
  uint64_t result;

  result = 0x7475626972747461;
  if (a1 >= 2u)
    return 0x656C61636F6CLL;
  return result;
}

uint64_t sub_23BF7CABC()
{
  return 0x6B726F77747261;
}

uint64_t sub_23BF7CAD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BF7C5D4(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_23BF7CB04(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23C002F88, a1);
  return sub_23BFF9A30();
}

uint64_t sub_23BF7CB38(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23C002F88, a1);
  return sub_23BFF9A3C();
}

uint64_t sub_23BF7CB6C()
{
  return 0x7475626972747461;
}

uint64_t sub_23BF7CB90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BF7C658(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_23BF7CBC0(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23C002FD8, a1);
  return sub_23BFF9A30();
}

uint64_t sub_23BF7CBF4(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23C002FD8, a1);
  return sub_23BFF9A3C();
}

BOOL sub_23BF7CC28(char *a1, char *a2)
{
  return sub_23BEAAB9C(*a1, *a2);
}

uint64_t sub_23BF7CC3C()
{
  return sub_23BEAADE0();
}

uint64_t sub_23BF7CC58()
{
  return sub_23BEAABAC();
}

uint64_t sub_23BF7CC64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23BF7CD44(a1, a2, a3, (void (*)(_BYTE *, _QWORD, _QWORD, _QWORD))sub_23BEAABAC);
}

uint64_t sub_23BF7CC70()
{
  char *v0;

  return sub_23BF7C870(*v0);
}

uint64_t sub_23BF7CC7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BF7C700(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BF7CCA8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23BEFF718();
  *a1 = result;
  return result;
}

uint64_t sub_23BF7CCD0(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23C002F38, a1);
  return sub_23BFF9A30();
}

uint64_t sub_23BF7CD04(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23C002F38, a1);
  return sub_23BFF9A3C();
}

uint64_t sub_23BF7CD38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23BF7CD44(a1, a2, a3, (void (*)(_BYTE *, _QWORD, _QWORD, _QWORD))sub_23BEFF724);
}

uint64_t sub_23BF7CD44(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_BYTE *, _QWORD, _QWORD, _QWORD))
{
  unsigned __int8 *v4;
  _BYTE v8[72];

  sub_23BFF99D0();
  a4(v8, *v4, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  return sub_23BFF9A00();
}

uint64_t sub_23BF7CD94()
{
  unsigned __int8 *v0;

  return sub_23BF7CA5C(*v0);
}

uint64_t sub_23BF7CDA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BF7C8D0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BF7CDCC(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23C003028, a1);
  return sub_23BFF9A30();
}

uint64_t sub_23BF7CE00(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23C003028, a1);
  return sub_23BFF9A3C();
}

uint64_t FullWidthItemDescriptor.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  int EnumCaseMultiPayload;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t (*v55)(char *, uint64_t);
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char v95;
  char v96;
  char v97;
  char v98;
  char v99;
  char v100;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = type metadata accessor for FullWidthItemDescriptor.ExpandingTextCodingKeys(255, v6, v7, a4);
  v77 = MEMORY[0x242615198](&unk_23C003028, v8);
  v78 = v8;
  v89 = sub_23BFF994C();
  v66 = *(_QWORD *)(v89 - 8);
  MEMORY[0x24BDAC7A8](v89);
  v80 = (char *)&v64 - v9;
  v81 = sub_23BFF8368();
  v87 = *(_QWORD *)(v81 - 8);
  MEMORY[0x24BDAC7A8](v81);
  v86 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3618);
  MEMORY[0x24BDAC7A8](v11);
  v85 = (uint64_t)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v82 = (uint64_t)&v64 - v14;
  v16 = type metadata accessor for FullWidthItemDescriptor.ButtonCodingKeys(255, v6, v7, v15);
  v17 = MEMORY[0x242615198](&unk_23C002FD8, v16);
  v71 = v16;
  v70 = v17;
  v75 = sub_23BFF994C();
  v65 = *(_QWORD *)(v75 - 8);
  MEMORY[0x24BDAC7A8](v75);
  v74 = (char *)&v64 - v18;
  v88 = sub_23BFF82CC();
  v73 = *(_QWORD *)(v88 - 8);
  MEMORY[0x24BDAC7A8](v88);
  v72 = (char *)&v64 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for FullWidthItemDescriptor.ArtworkCodingKeys(255, v6, v7, v20);
  v67 = MEMORY[0x242615198](&unk_23C002F88, v21);
  v69 = sub_23BFF994C();
  v64 = *(_QWORD *)(v69 - 8);
  MEMORY[0x24BDAC7A8](v69);
  v83 = (char *)&v64 - v22;
  v68 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v84 = (char *)&v64 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v28 = (char *)&v64 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = v6;
  v76 = v7;
  v30 = type metadata accessor for FullWidthItemDescriptor.CodingKeys(255, v6, v7, v29);
  MEMORY[0x242615198](&unk_23C002F38, v30);
  v92 = sub_23BFF994C();
  v90 = *(_QWORD *)(v92 - 8);
  MEMORY[0x24BDAC7A8](v92);
  v32 = (char *)&v64 - v31;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v94 = v32;
  sub_23BFF9A18();
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v28, v93, a2);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    v41 = v68;
    v42 = v79;
    (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v84, v28, v79);
    v95 = 0;
    v38 = v92;
    v39 = v94;
    sub_23BFF98EC();
    v43 = v69;
    sub_23BFF9940();
    (*(void (**)(char *, uint64_t))(v64 + 8))(v83, v43);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v84, v42);
    return (*(uint64_t (**)(char *, uint64_t))(v90 + 8))(v39, v38);
  }
  if (EnumCaseMultiPayload == 1)
  {
    v34 = v73;
    v35 = v72;
    v36 = v88;
    (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v72, v28, v88);
    v96 = 1;
    v37 = v74;
    v38 = v92;
    v39 = v94;
    sub_23BFF98EC();
    sub_23BEA1BB8(&qword_256AE4650, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], MEMORY[0x24BDCC5B8]);
    v40 = v75;
    sub_23BFF9940();
    (*(void (**)(char *, uint64_t))(v65 + 8))(v37, v40);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v35, v36);
    return (*(uint64_t (**)(char *, uint64_t))(v90 + 8))(v39, v38);
  }
  v45 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3930);
  v46 = (uint64_t)&v28[*(int *)(v45 + 48)];
  v47 = &v28[*(int *)(v45 + 64)];
  v48 = (uint64_t)v28;
  v49 = v82;
  sub_23BEBEF90(v48, v82);
  sub_23BEBEF90(v46, v85);
  v50 = v81;
  (*(void (**)(char *, char *, uint64_t))(v87 + 32))(v86, v47, v81);
  v100 = 2;
  v51 = v80;
  v52 = v92;
  v53 = v94;
  sub_23BFF98EC();
  v99 = 0;
  sub_23BEA1BB8(&qword_256AE4650, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], MEMORY[0x24BDCC5B8]);
  v54 = v91;
  sub_23BFF9904();
  if (v54)
  {
    (*(void (**)(char *, uint64_t))(v66 + 8))(v51, v89);
    (*(void (**)(char *, uint64_t))(v87 + 8))(v86, v50);
    sub_23BE9F3A0(v85, &qword_256AE3618);
    sub_23BE9F3A0(v49, &qword_256AE3618);
    v55 = *(uint64_t (**)(char *, uint64_t))(v90 + 8);
    v56 = v53;
  }
  else
  {
    v57 = v49;
    v98 = 1;
    v58 = v85;
    v59 = v51;
    sub_23BFF9904();
    v60 = v58;
    v97 = 2;
    sub_23BEA1BB8(&qword_256AE6808, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], MEMORY[0x24BDCEEC8]);
    v61 = v86;
    sub_23BFF9940();
    v62 = v87;
    v63 = v94;
    (*(void (**)(char *, uint64_t))(v66 + 8))(v59, v89);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v61, v50);
    sub_23BE9F3A0(v60, &qword_256AE3618);
    sub_23BE9F3A0(v57, &qword_256AE3618);
    v55 = *(uint64_t (**)(char *, uint64_t))(v90 + 8);
    v56 = v63;
  }
  return v55(v56, v52);
}

uint64_t type metadata accessor for FullWidthItemDescriptor.ExpandingTextCodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FullWidthItemDescriptor.ExpandingTextCodingKeys);
}

uint64_t type metadata accessor for FullWidthItemDescriptor.ButtonCodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FullWidthItemDescriptor.ButtonCodingKeys);
}

uint64_t type metadata accessor for FullWidthItemDescriptor.ArtworkCodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FullWidthItemDescriptor.ArtworkCodingKeys);
}

uint64_t type metadata accessor for FullWidthItemDescriptor.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FullWidthItemDescriptor.CodingKeys);
}

uint64_t FullWidthItemDescriptor.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(char *, char *, uint64_t);
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  _QWORD *v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;

  v106 = a5;
  v103 = type metadata accessor for FullWidthItemDescriptor.ExpandingTextCodingKeys(255, a2, a3, a4);
  v101 = MEMORY[0x242615198](&unk_23C003028, v103);
  v95 = sub_23BFF98E0();
  v90 = *(_QWORD *)(v95 - 8);
  MEMORY[0x24BDAC7A8](v95);
  v104 = (char *)&v83 - v8;
  v10 = type metadata accessor for FullWidthItemDescriptor.ButtonCodingKeys(255, a2, a3, v9);
  v11 = MEMORY[0x242615198](&unk_23C002FD8, v10);
  v100 = v10;
  v99 = v11;
  v92 = sub_23BFF98E0();
  v89 = *(_QWORD *)(v92 - 8);
  MEMORY[0x24BDAC7A8](v92);
  v102 = (char *)&v83 - v12;
  v14 = type metadata accessor for FullWidthItemDescriptor.ArtworkCodingKeys(255, a2, a3, v13);
  v15 = MEMORY[0x242615198](&unk_23C002F88, v14);
  v97 = v14;
  v96 = v15;
  v91 = sub_23BFF98E0();
  v88 = *(_QWORD *)(v91 - 8);
  MEMORY[0x24BDAC7A8](v91);
  v98 = (char *)&v83 - v16;
  v18 = type metadata accessor for FullWidthItemDescriptor.CodingKeys(255, a2, a3, v17);
  MEMORY[0x242615198](&unk_23C002F38, v18);
  v110 = sub_23BFF98E0();
  v107 = *(_QWORD *)(v110 - 8);
  MEMORY[0x24BDAC7A8](v110);
  v20 = (char *)&v83 - v19;
  v94 = a2;
  v93 = a3;
  v108 = type metadata accessor for FullWidthItemDescriptor(0, a2, a3, v21);
  v105 = *(_QWORD *)(v108 - 8);
  MEMORY[0x24BDAC7A8](v108);
  v23 = (char *)&v83 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)&v83 - v25;
  MEMORY[0x24BDAC7A8](v27);
  v29 = (char *)&v83 - v28;
  MEMORY[0x24BDAC7A8](v30);
  v32 = (char *)&v83 - v31;
  v33 = a1[3];
  v111 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v33);
  v109 = v20;
  v34 = v116;
  sub_23BFF9A0C();
  v116 = v34;
  if (v34)
    goto LABEL_10;
  v85 = v29;
  v86 = v26;
  v87 = v23;
  v84 = v32;
  v36 = v108;
  v35 = v109;
  *(_QWORD *)&v112 = sub_23BFF98D4();
  v37 = sub_23BFF94C0();
  MEMORY[0x242615198](MEMORY[0x24BEE12C8], v37);
  *(_QWORD *)&v114 = sub_23BFF96DC();
  *((_QWORD *)&v114 + 1) = v38;
  *(_QWORD *)&v115 = v39;
  *((_QWORD *)&v115 + 1) = v40;
  v41 = sub_23BFF96D0();
  MEMORY[0x242615198](MEMORY[0x24BEE2190], v41);
  sub_23BFF9634();
  v42 = v112;
  if (v112 != 3)
  {
    v83 = v114;
    v112 = v114;
    v113 = v115;
    if ((sub_23BFF964C() & 1) != 0)
    {
      if (v42)
      {
        if (v42 == 1)
        {
          LOBYTE(v112) = 1;
          v43 = v102;
          v44 = v110;
          v45 = v116;
          sub_23BFF9868();
          v46 = v35;
          v47 = v106;
          v116 = v45;
          if (v45)
          {
            swift_unknownObjectRelease();
            v48 = *(void (**)(char *, uint64_t))(v107 + 8);
LABEL_18:
            v55 = v46;
            v56 = v44;
            goto LABEL_9;
          }
          sub_23BFF82CC();
          sub_23BEA1BB8(&qword_256AE4678, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], MEMORY[0x24BDCC5D0]);
          v66 = v86;
          v67 = v92;
          v68 = v116;
          sub_23BFF98C8();
          v69 = v107;
          v116 = v68;
          if (v68)
          {
            (*(void (**)(char *, uint64_t))(v89 + 8))(v43, v67);
            swift_unknownObjectRelease();
            v48 = *(void (**)(char *, uint64_t))(v69 + 8);
            goto LABEL_18;
          }
          (*(void (**)(char *, uint64_t))(v89 + 8))(v43, v67);
          swift_unknownObjectRelease();
          (*(void (**)(char *, uint64_t))(v69 + 8))(v46, v44);
          v70 = v36;
          swift_storeEnumTagMultiPayload();
          v77 = *(void (**)(char *, char *, uint64_t))(v105 + 32);
          v78 = v84;
          v77(v84, v66, v36);
          v76 = (uint64_t)v111;
LABEL_24:
          v77(v47, v78, v70);
          v57 = v76;
          return __swift_destroy_boxed_opaque_existential_1(v57);
        }
        LOBYTE(v112) = 2;
        v63 = v104;
        v64 = v110;
        v65 = v116;
        sub_23BFF9868();
        v116 = v65;
        if (v65)
        {
          swift_unknownObjectRelease();
          (*(void (**)(char *, uint64_t))(v107 + 8))(v35, v64);
          goto LABEL_10;
        }
        sub_23BFF82CC();
        LOBYTE(v112) = 0;
        sub_23BEA1BB8(&qword_256AE4678, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], MEMORY[0x24BDCC5D0]);
        v73 = (uint64_t)v87;
        v74 = v95;
        v75 = v116;
        sub_23BFF988C();
        if (v75)
        {
          (*(void (**)(char *, uint64_t))(v90 + 8))(v63, v74);
          swift_unknownObjectRelease();
          (*(void (**)(char *, uint64_t))(v107 + 8))(v109, v64);
          v57 = (uint64_t)v111;
          v116 = v75;
          return __swift_destroy_boxed_opaque_existential_1(v57);
        }
        v79 = v73 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AE3930) + 48);
        LOBYTE(v112) = 1;
        sub_23BFF988C();
        v116 = 0;
        v80 = v79;
        sub_23BFF8368();
        LOBYTE(v112) = 2;
        sub_23BEA1BB8(&qword_256AE6810, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], MEMORY[0x24BDCEEE8]);
        v81 = v95;
        v82 = v116;
        sub_23BFF98C8();
        v116 = v82;
        if (v82)
        {
          (*(void (**)(char *, uint64_t))(v90 + 8))(v63, v81);
          swift_unknownObjectRelease();
          (*(void (**)(char *, uint64_t))(v107 + 8))(v109, v64);
          sub_23BE9F3A0(v80, &qword_256AE3618);
          sub_23BE9F3A0(v73, &qword_256AE3618);
          goto LABEL_10;
        }
        (*(void (**)(char *, uint64_t))(v90 + 8))(v63, v81);
        swift_unknownObjectRelease();
        (*(void (**)(char *, uint64_t))(v107 + 8))(v109, v64);
        v70 = v36;
        swift_storeEnumTagMultiPayload();
        v77 = *(void (**)(char *, char *, uint64_t))(v105 + 32);
        v78 = v84;
        v77(v84, (char *)v73, v36);
      }
      else
      {
        LOBYTE(v112) = 0;
        v59 = v98;
        v60 = v110;
        v61 = v116;
        sub_23BFF9868();
        v62 = v105;
        v116 = v61;
        if (v61)
        {
          swift_unknownObjectRelease();
          (*(void (**)(char *, uint64_t))(v107 + 8))(v35, v60);
          goto LABEL_10;
        }
        v70 = v36;
        v71 = v85;
        v72 = v91;
        sub_23BFF98C8();
        v116 = 0;
        (*(void (**)(char *, uint64_t))(v88 + 8))(v59, v72);
        swift_unknownObjectRelease();
        (*(void (**)(char *, uint64_t))(v107 + 8))(v35, v60);
        swift_storeEnumTagMultiPayload();
        v77 = *(void (**)(char *, char *, uint64_t))(v62 + 32);
        v78 = v84;
        v77(v84, v71, v36);
      }
      v76 = (uint64_t)v111;
      v47 = v106;
      goto LABEL_24;
    }
  }
  v49 = sub_23BFF9784();
  v50 = swift_allocError();
  v51 = v35;
  v53 = v52;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3978);
  *v53 = v36;
  v54 = v110;
  sub_23BFF9874();
  sub_23BFF9778();
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v49 - 8) + 104))(v53, *MEMORY[0x24BEE26D0], v49);
  v116 = v50;
  swift_willThrow();
  swift_unknownObjectRelease();
  v48 = *(void (**)(char *, uint64_t))(v107 + 8);
  v55 = v51;
  v56 = v54;
LABEL_9:
  v48(v55, v56);
LABEL_10:
  v57 = (uint64_t)v111;
  return __swift_destroy_boxed_opaque_existential_1(v57);
}

uint64_t sub_23BF7E060@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, char *a4@<X8>)
{
  return FullWidthItemDescriptor.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3, a4);
}

uint64_t sub_23BF7E07C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return FullWidthItemDescriptor.encode(to:)(a1, a2, a3, a4);
}

uint64_t FullWidthItemDescriptor.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  int EnumCaseMultiPayload;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  unsigned int (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v45 = a1;
  v41 = sub_23BFF8368();
  v43 = *(_QWORD *)(v41 - 8);
  MEMORY[0x24BDAC7A8](v41);
  v40 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3618);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v39 = (uint64_t)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v38 - v9;
  v11 = MEMORY[0x24BDAC7A8](v8);
  v44 = (uint64_t)&v38 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v42 = (uint64_t)&v38 - v13;
  v14 = sub_23BFF82CC();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_QWORD *)(a2 + 16);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = MEMORY[0x24BDAC7A8](v16);
  v23 = (char *)&v38 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v25 = (char *)&v38 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v25, v2, a2);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v25, v14);
      sub_23BFF99DC();
      sub_23BEA1BB8(&qword_256AE46A0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], MEMORY[0x24BDCC5C0]);
      sub_23BFF9388();
      return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    }
    else
    {
      v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3930);
      v30 = (uint64_t)&v25[*(int *)(v29 + 48)];
      v31 = &v25[*(int *)(v29 + 64)];
      v32 = (uint64_t)v25;
      v33 = v42;
      sub_23BEBEF90(v32, v42);
      sub_23BEBEF90(v30, v44);
      v35 = v40;
      v34 = v41;
      (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v40, v31, v41);
      sub_23BFF99DC();
      sub_23BEF2434(v33, (uint64_t)v10);
      v36 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
      if (v36(v10, 1, v14) == 1)
      {
        sub_23BFF99E8();
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v10, v14);
        sub_23BFF99E8();
        sub_23BEA1BB8(&qword_256AE46A0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], MEMORY[0x24BDCC5C0]);
        sub_23BFF9388();
        (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
      }
      v37 = v39;
      sub_23BEF2434(v44, v39);
      if (v36((char *)v37, 1, v14) == 1)
      {
        sub_23BFF99E8();
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v18, v37, v14);
        sub_23BFF99E8();
        sub_23BEA1BB8(&qword_256AE46A0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], MEMORY[0x24BDCC5C0]);
        sub_23BFF9388();
        (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
      }
      sub_23BEA1BB8(qword_256AE6818, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], MEMORY[0x24BDCEED0]);
      sub_23BFF9388();
      (*(void (**)(char *, uint64_t))(v43 + 8))(v35, v34);
      sub_23BE9F3A0(v44, &qword_256AE3618);
      return sub_23BE9F3A0(v42, &qword_256AE3618);
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v23, v25, v19);
    sub_23BFF99DC();
    sub_23BFF9388();
    return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v23, v19);
  }
}

uint64_t FullWidthItemDescriptor.hashValue.getter(uint64_t a1)
{
  _BYTE v3[72];

  sub_23BFF99D0();
  FullWidthItemDescriptor.hash(into:)((uint64_t)v3, a1);
  return sub_23BFF9A00();
}

uint64_t sub_23BF7E564(uint64_t a1, uint64_t a2)
{
  _BYTE v4[72];

  sub_23BFF99D0();
  FullWidthItemDescriptor.hash(into:)((uint64_t)v4, a2);
  return sub_23BFF9A00();
}

void sub_23BF7E5A4()
{
  JUMPOUT(0x242615198);
}

uint64_t sub_23BF7E5B4(uint64_t a1, char *a2, uint64_t a3)
{
  return static FullWidthItemDescriptor.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t sub_23BF7E5C0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;

  v0 = swift_checkMetadataState();
  v1 = v0;
  if (v2 <= 0x3F)
  {
    v11 = *(_QWORD *)(v0 - 8) + 64;
    v3 = sub_23BFF82CC();
    v1 = v3;
    if (v4 <= 0x3F)
    {
      v12 = *(_QWORD *)(v3 - 8) + 64;
      sub_23BEFEB9C();
      v1 = v5;
      if (v6 <= 0x3F)
      {
        v7 = sub_23BFF8368();
        if (v8 > 0x3F)
        {
          return v7;
        }
        else
        {
          swift_getTupleTypeLayout3();
          v13 = &v10;
          swift_initEnumMetadataMultiPayload();
          return 0;
        }
      }
    }
  }
  return v1;
}

uint64_t *sub_23BF7E6A4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  size_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v23;
  uint64_t *v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int (*v28)(uint64_t *, uint64_t, uint64_t);
  void *v29;
  void *v30;
  char v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  size_t v36;
  uint64_t v37;

  v34 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v34 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = sub_23BFF82CC();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  if (v9 <= v6)
    v10 = v6;
  else
    v10 = *(_QWORD *)(v8 + 64);
  v11 = *(_DWORD *)(v8 + 80);
  if (*(_DWORD *)(v8 + 84))
    v12 = *(_QWORD *)(v8 + 64);
  else
    v12 = v9 + 1;
  v36 = v12 + *(_DWORD *)(v8 + 80);
  v37 = v7;
  v13 = v36 & ~(unint64_t)*(_DWORD *)(v8 + 80);
  v14 = sub_23BFF8368();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_DWORD *)(v15 + 80);
  v17 = v16;
  if (((v12 + v17 + v13) & ~v17) + *(_QWORD *)(v15 + 64) > v10)
    v10 = ((v12 + v16 + v13) & ~(unint64_t)v16) + *(_QWORD *)(v15 + 64);
  v18 = v11 | v16 | *(_DWORD *)(v5 + 80);
  v19 = (v11 | v16 | *(_BYTE *)(v5 + 80));
  v20 = v18 & 0x100000;
  if (v19 > 7 || v20 != 0 || v10 + 1 > 0x18)
  {
    v23 = *a2;
    *a1 = *a2;
    v24 = (uint64_t *)(v23 + ((v19 + 16) & ~v19));
    swift_retain();
  }
  else
  {
    v25 = *((unsigned __int8 *)a2 + v10);
    if (v25 >= 3)
    {
      if (v10 <= 3)
        v26 = v10;
      else
        v26 = 4;
      __asm { BR              X12 }
    }
    v24 = a1;
    if (v25 == 2)
    {
      v33 = *(_QWORD *)(v14 - 8);
      v35 = v14;
      v27 = ~(unint64_t)v11;
      v28 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48);
      if (v28(a2, 1, v37))
      {
        memcpy(v24, a2, v12);
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v24, a2, v37);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v24, 0, 1, v37);
      }
      v29 = (void *)(((unint64_t)v24 + v36) & v27);
      v30 = (void *)(((unint64_t)a2 + v36) & v27);
      if (v28((uint64_t *)v30, 1, v37))
      {
        memcpy(v29, v30, v12);
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v8 + 16))(v29, v30, v37);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v29, 0, 1, v37);
      }
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v33 + 16))(((unint64_t)v29 + v12 + v17) & ~v17, ((unint64_t)v30 + v12 + v17) & ~v17, v35);
      v31 = 2;
    }
    else
    {
      if (v25 != 1)
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, v34);
        *((_BYTE *)a1 + v10) = 0;
        return v24;
      }
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v37);
      v31 = 1;
    }
    *((_BYTE *)v24 + v10) = v31;
  }
  return v24;
}

void sub_23BF7E964()
{
  unsigned __int16 *v0;
  unsigned int v1;

  if (v1 >= 4)
  {
    if ((*v0 | (*((unsigned __int8 *)v0 + 2) << 16)) == 0xFFFFFFFF)
      JUMPOUT(0x23BF7E7D4);
    JUMPOUT(0x23BF7E900);
  }
  JUMPOUT(0x23BF7E8E8);
}

uint64_t sub_23BF7E998(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;

  v25 = *(_QWORD *)(a2 + 16);
  v24 = *(_QWORD *)(v25 - 8);
  v3 = *(_QWORD *)(v24 + 64);
  v4 = sub_23BFF82CC();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  if (v6 <= v3)
    v7 = v3;
  else
    v7 = *(_QWORD *)(v5 + 64);
  if (*(_DWORD *)(v5 + 84))
    v8 = *(_QWORD *)(v5 + 64);
  else
    v8 = v6 + 1;
  v9 = *(unsigned __int8 *)(v5 + 80);
  v10 = v8 + v9;
  v11 = sub_23BFF8368();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = ((v8 + v13 + ((v8 + v9) & ~v9)) & ~v13) + *(_QWORD *)(v12 + 64);
  if (v14 <= v7)
    v14 = v7;
  v15 = *(unsigned __int8 *)(a1 + v14);
  if (v15 >= 3)
  {
    if (v14 <= 3)
      v16 = v14;
    else
      v16 = 4;
    __asm { BR              X13 }
  }
  if (v15 == 2)
  {
    v25 = v11;
    v20 = ~v9;
    v21 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    if (!v21(a1, 1, v4))
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
    v22 = (v10 + a1) & v20;
    if (!v21(v22, 1, v4))
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v22, v4);
    v18 = (v22 + v8 + v13) & ~v13;
    v17 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 8);
    goto LABEL_23;
  }
  if (v15 != 1)
  {
    v17 = *(uint64_t (**)(uint64_t, uint64_t))(v24 + 8);
    v18 = a1;
LABEL_23:
    v19 = v25;
    return v17(v18, v19);
  }
  v17 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  v18 = a1;
  v19 = v4;
  return v17(v18, v19);
}

_BYTE *sub_23BF7EB64(_BYTE *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  unsigned int v17;
  uint64_t v18;
  _BYTE *v19;
  char v20;
  uint64_t v21;
  void *v22;
  void *v23;
  unsigned int (*v25)(unsigned __int8 *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;

  v27 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v27 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = sub_23BFF82CC();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  if (v9 <= v6)
    v10 = v6;
  else
    v10 = *(_QWORD *)(v8 + 64);
  if (*(_DWORD *)(v8 + 84))
    v11 = *(_QWORD *)(v8 + 64);
  else
    v11 = v9 + 1;
  v12 = *(unsigned __int8 *)(v8 + 80);
  v29 = v11 + v12;
  v13 = sub_23BFF8368();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = (v11 + v15 + ((v11 + v12) & ~v12)) & ~v15;
  if (v16 + *(_QWORD *)(v14 + 64) > v10)
    v10 = v16 + *(_QWORD *)(v14 + 64);
  v17 = a2[v10];
  if (v17 >= 3)
  {
    if (v10 <= 3)
      v18 = v10;
    else
      v18 = 4;
    __asm { BR              X12 }
  }
  v19 = a1;
  if (v17 == 2)
  {
    v26 = *(_QWORD *)(v13 - 8);
    v28 = v13;
    v21 = ~v12;
    v25 = *(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v8 + 48);
    if (v25(a2, 1, v7))
    {
      memcpy(a1, a2, v11);
    }
    else
    {
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v22 = (void *)((unint64_t)&a1[v29] & v21);
    v23 = (void *)((unint64_t)&a2[v29] & v21);
    if (v25((unsigned __int8 *)v23, 1, v7))
    {
      memcpy(v22, v23, v11);
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 16))(v22, v23, v7);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v22, 0, 1, v7);
    }
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v26 + 16))(((unint64_t)v22 + v11 + v15) & ~v15, ((unint64_t)v23 + v11 + v15) & ~v15, v28);
    v20 = 2;
  }
  else if (v17 == 1)
  {
    (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v7);
    v20 = 1;
  }
  else
  {
    (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, v27);
    v20 = 0;
  }
  v19[v10] = v20;
  return v19;
}

unsigned __int8 *sub_23BF7EDEC(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  size_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  size_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(unsigned __int8 *, uint64_t, uint64_t);
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unsigned int (*v26)(unsigned __int8 *, uint64_t, uint64_t);
  void *v27;
  void *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  size_t v36;
  uint64_t v37;

  if (a1 != a2)
  {
    v35 = *(_QWORD *)(a3 + 16);
    v34 = *(_QWORD *)(v35 - 8);
    v5 = *(_QWORD *)(v34 + 64);
    v6 = sub_23BFF82CC();
    v7 = *(_QWORD *)(v6 - 8);
    v8 = *(_QWORD *)(v7 + 64);
    if (v8 <= v5)
      v9 = v5;
    else
      v9 = *(_QWORD *)(v7 + 64);
    if (*(_DWORD *)(v7 + 84))
      v10 = *(_QWORD *)(v7 + 64);
    else
      v10 = v8 + 1;
    v11 = *(unsigned __int8 *)(v7 + 80);
    v36 = v10 + v11;
    v12 = sub_23BFF8368();
    v37 = v12;
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned __int8 *)(v13 + 80);
    v15 = (v10 + v14 + ((v10 + v11) & ~v11)) & ~v14;
    if (v15 + *(_QWORD *)(v13 + 64) <= v9)
      v16 = v9;
    else
      v16 = v15 + *(_QWORD *)(v13 + 64);
    v17 = a1[v16];
    if (v17 >= 3)
    {
      if (v16 <= 3)
        v18 = v16;
      else
        v18 = 4;
      __asm { BR              X12 }
    }
    v19 = ~v11;
    v20 = ~v14;
    if (v17 == 2)
    {
      v30 = *(_QWORD *)(v12 - 8);
      v21 = *(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v7 + 48);
      if (!v21(a1, 1, v6))
        (*(void (**)(unsigned __int8 *, uint64_t))(v7 + 8))(a1, v6);
      v31 = v19;
      v22 = (unint64_t)&a1[v36] & v19;
      if (!v21((unsigned __int8 *)v22, 1, v6))
        (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v22, v6);
      v20 = ~v14;
      v13 = v30;
      (*(void (**)(unint64_t, uint64_t))(v30 + 8))((v22 + v10 + v14) & ~v14, v37);
      v19 = v31;
    }
    else if (v17 == 1)
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v7 + 8))(a1, v6);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v34 + 8))(a1, v35);
    }
    v23 = a2[v16];
    if (v23 >= 3)
    {
      if (v16 <= 3)
        v24 = v16;
      else
        v24 = 4;
      __asm { BR              X12 }
    }
    if (v23 == 2)
    {
      v32 = v19;
      v26 = *(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v7 + 48);
      v33 = v20;
      if (v26(a2, 1, v6))
      {
        memcpy(a1, a2, v10);
      }
      else
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, v6);
        (*(void (**)(unsigned __int8 *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      }
      v27 = (void *)((unint64_t)&a1[v36] & v32);
      v28 = (void *)((unint64_t)&a2[v36] & v32);
      if (v26((unsigned __int8 *)v28, 1, v6))
      {
        memcpy(v27, v28, v10);
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v27, v28, v6);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v27, 0, 1, v6);
      }
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v13 + 16))(((unint64_t)v27 + v10 + v14) & v33, ((unint64_t)v28 + v10 + v14) & v33, v37);
      v25 = 2;
    }
    else if (v23 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, v6);
      v25 = 1;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v34 + 16))(a1, a2, v35);
      v25 = 0;
    }
    a1[v16] = v25;
  }
  return a1;
}

_BYTE *sub_23BF7F1D8(_BYTE *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  unsigned int v17;
  uint64_t v18;
  _BYTE *v19;
  char v20;
  uint64_t v21;
  void *v22;
  void *v23;
  unsigned int (*v25)(unsigned __int8 *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;

  v27 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v27 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = sub_23BFF82CC();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  if (v9 <= v6)
    v10 = v6;
  else
    v10 = *(_QWORD *)(v8 + 64);
  if (*(_DWORD *)(v8 + 84))
    v11 = *(_QWORD *)(v8 + 64);
  else
    v11 = v9 + 1;
  v12 = *(unsigned __int8 *)(v8 + 80);
  v29 = v11 + v12;
  v13 = sub_23BFF8368();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = (v11 + v15 + ((v11 + v12) & ~v12)) & ~v15;
  if (v16 + *(_QWORD *)(v14 + 64) > v10)
    v10 = v16 + *(_QWORD *)(v14 + 64);
  v17 = a2[v10];
  if (v17 >= 3)
  {
    if (v10 <= 3)
      v18 = v10;
    else
      v18 = 4;
    __asm { BR              X12 }
  }
  v19 = a1;
  if (v17 == 2)
  {
    v26 = *(_QWORD *)(v13 - 8);
    v28 = v13;
    v21 = ~v12;
    v25 = *(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v8 + 48);
    if (v25(a2, 1, v7))
    {
      memcpy(a1, a2, v11);
    }
    else
    {
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v8 + 32))(a1, a2, v7);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v22 = (void *)((unint64_t)&a1[v29] & v21);
    v23 = (void *)((unint64_t)&a2[v29] & v21);
    if (v25((unsigned __int8 *)v23, 1, v7))
    {
      memcpy(v22, v23, v11);
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 32))(v22, v23, v7);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v22, 0, 1, v7);
    }
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v26 + 32))(((unint64_t)v22 + v11 + v15) & ~v15, ((unint64_t)v23 + v11 + v15) & ~v15, v28);
    v20 = 2;
  }
  else if (v17 == 1)
  {
    (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v8 + 32))(a1, a2, v7);
    v20 = 1;
  }
  else
  {
    (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, v27);
    v20 = 0;
  }
  v19[v10] = v20;
  return v19;
}

unsigned __int8 *sub_23BF7F460(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  size_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  size_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(unsigned __int8 *, uint64_t, uint64_t);
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unsigned int (*v26)(unsigned __int8 *, uint64_t, uint64_t);
  void *v27;
  void *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  size_t v36;
  uint64_t v37;

  if (a1 != a2)
  {
    v35 = *(_QWORD *)(a3 + 16);
    v34 = *(_QWORD *)(v35 - 8);
    v5 = *(_QWORD *)(v34 + 64);
    v6 = sub_23BFF82CC();
    v7 = *(_QWORD *)(v6 - 8);
    v8 = *(_QWORD *)(v7 + 64);
    if (v8 <= v5)
      v9 = v5;
    else
      v9 = *(_QWORD *)(v7 + 64);
    if (*(_DWORD *)(v7 + 84))
      v10 = *(_QWORD *)(v7 + 64);
    else
      v10 = v8 + 1;
    v11 = *(unsigned __int8 *)(v7 + 80);
    v36 = v10 + v11;
    v12 = sub_23BFF8368();
    v37 = v12;
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned __int8 *)(v13 + 80);
    v15 = (v10 + v14 + ((v10 + v11) & ~v11)) & ~v14;
    if (v15 + *(_QWORD *)(v13 + 64) <= v9)
      v16 = v9;
    else
      v16 = v15 + *(_QWORD *)(v13 + 64);
    v17 = a1[v16];
    if (v17 >= 3)
    {
      if (v16 <= 3)
        v18 = v16;
      else
        v18 = 4;
      __asm { BR              X12 }
    }
    v19 = ~v11;
    v20 = ~v14;
    if (v17 == 2)
    {
      v30 = *(_QWORD *)(v12 - 8);
      v21 = *(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v7 + 48);
      if (!v21(a1, 1, v6))
        (*(void (**)(unsigned __int8 *, uint64_t))(v7 + 8))(a1, v6);
      v31 = v19;
      v22 = (unint64_t)&a1[v36] & v19;
      if (!v21((unsigned __int8 *)v22, 1, v6))
        (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v22, v6);
      v20 = ~v14;
      v13 = v30;
      (*(void (**)(unint64_t, uint64_t))(v30 + 8))((v22 + v10 + v14) & ~v14, v37);
      v19 = v31;
    }
    else if (v17 == 1)
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v7 + 8))(a1, v6);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v34 + 8))(a1, v35);
    }
    v23 = a2[v16];
    if (v23 >= 3)
    {
      if (v16 <= 3)
        v24 = v16;
      else
        v24 = 4;
      __asm { BR              X12 }
    }
    if (v23 == 2)
    {
      v32 = v19;
      v26 = *(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v7 + 48);
      v33 = v20;
      if (v26(a2, 1, v6))
      {
        memcpy(a1, a2, v10);
      }
      else
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 32))(a1, a2, v6);
        (*(void (**)(unsigned __int8 *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      }
      v27 = (void *)((unint64_t)&a1[v36] & v32);
      v28 = (void *)((unint64_t)&a2[v36] & v32);
      if (v26((unsigned __int8 *)v28, 1, v6))
      {
        memcpy(v27, v28, v10);
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v27, v28, v6);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v27, 0, 1, v6);
      }
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v13 + 32))(((unint64_t)v27 + v10 + v14) & v33, ((unint64_t)v28 + v10 + v14) & v33, v37);
      v25 = 2;
    }
    else if (v23 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 32))(a1, a2, v6);
      v25 = 1;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v34 + 32))(a1, a2, v35);
      v25 = 0;
    }
    a1[v16] = v25;
  }
  return a1;
}

uint64_t sub_23BF7F84C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  int v18;
  unsigned int v20;
  int v21;
  unsigned int v22;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  v6 = *(_QWORD *)(sub_23BFF82CC() - 8);
  v7 = *(_QWORD *)(v6 + 64);
  if (v7 > v5)
    v5 = *(_QWORD *)(v6 + 64);
  v8 = *(_DWORD *)(v6 + 84);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(sub_23BFF8368() - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = *(_QWORD *)(v10 + 64);
  if (v8)
    v13 = v7;
  else
    v13 = v7 + 1;
  v14 = ((((v13 + v9) & ~v9) + v13 + v11) & ~v11) + v12;
  if (v14 <= v5)
    v15 = v5;
  else
    v15 = v14;
  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_27;
  v16 = v15 + 1;
  v17 = 8 * (v15 + 1);
  if ((v15 + 1) <= 3)
  {
    v20 = ((a2 + ~(-1 << v17) - 253) >> v17) + 1;
    if (HIWORD(v20))
    {
      v18 = *(_DWORD *)(a1 + v16);
      if (!v18)
        goto LABEL_27;
      goto LABEL_20;
    }
    if (v20 > 0xFF)
    {
      v18 = *(unsigned __int16 *)(a1 + v16);
      if (!*(_WORD *)(a1 + v16))
        goto LABEL_27;
      goto LABEL_20;
    }
    if (v20 < 2)
    {
LABEL_27:
      v22 = *(unsigned __int8 *)(a1 + v15);
      if (v22 >= 3)
        return (v22 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v18 = *(unsigned __int8 *)(a1 + v16);
  if (!*(_BYTE *)(a1 + v16))
    goto LABEL_27;
LABEL_20:
  v21 = (v18 - 1) << v17;
  if (v16 > 3)
    v21 = 0;
  if ((_DWORD)v16)
  {
    if (v16 > 3)
      LODWORD(v16) = 4;
    __asm { BR              X11 }
  }
  return (v21 + 254);
}

void sub_23BF7F9D8(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;

  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  v8 = *(_QWORD *)(sub_23BFF82CC() - 8);
  v9 = *(_QWORD *)(v8 + 64);
  if (v9 > v7)
    v7 = *(_QWORD *)(v8 + 64);
  v10 = *(_DWORD *)(v8 + 84);
  v11 = *(unsigned __int8 *)(v8 + 80);
  v12 = *(_QWORD *)(sub_23BFF8368() - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = *(_QWORD *)(v12 + 64);
  if (v10)
    v15 = v9;
  else
    v15 = v9 + 1;
  v16 = ((((v15 + v11) & ~v11) + v15 + v13) & ~v13) + v14;
  if (v16 <= v7)
    v16 = v7;
  v17 = v16 + 1;
  if (a3 < 0xFE)
  {
    v18 = 0;
  }
  else if (v17 <= 3)
  {
    v20 = ((a3 + ~(-1 << (8 * v17)) - 253) >> (8 * v17)) + 1;
    if (HIWORD(v20))
    {
      v18 = 4u;
    }
    else if (v20 >= 0x100)
    {
      v18 = 2;
    }
    else
    {
      v18 = v20 > 1;
    }
  }
  else
  {
    v18 = 1u;
  }
  if (a2 <= 0xFD)
    __asm { BR              X11 }
  v19 = a2 - 254;
  if (v17 < 4)
  {
    if ((_DWORD)v16 != -1)
    {
      v21 = v19 & ~(-1 << (8 * v17));
      bzero(a1, v17);
      if ((_DWORD)v17 == 3)
      {
        *(_WORD *)a1 = v21;
        a1[2] = BYTE2(v21);
      }
      else if ((_DWORD)v17 == 2)
      {
        *(_WORD *)a1 = v21;
      }
      else
      {
        *a1 = v21;
      }
    }
  }
  else
  {
    bzero(a1, v16 + 1);
    *(_DWORD *)a1 = v19;
  }
  __asm { BR              X10 }
}

uint64_t sub_23BF7FBE0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  v4 = *(_QWORD *)(sub_23BFF82CC() - 8);
  v5 = *(_QWORD *)(v4 + 64);
  if (v5 > v3)
    v3 = *(_QWORD *)(v4 + 64);
  if (*(_DWORD *)(v4 + 84))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = v5 + 1;
  v7 = (v6 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v8 = sub_23BFF8368();
  v9 = ((v7 + v6 + *(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64);
  if (v9 <= v3)
    v9 = v3;
  result = *(unsigned __int8 *)(a1 + v9);
  if (result >= 3)
  {
    if (v9 <= 3)
      v11 = v9;
    else
      v11 = 4;
    __asm { BR              X12 }
  }
  return result;
}

uint64_t sub_23BF7FCDC(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t result;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  char v14;
  int v15;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  v6 = *(_QWORD *)(sub_23BFF82CC() - 8);
  v7 = *(_QWORD *)(v6 + 64);
  if (v7 > v5)
    v5 = *(_QWORD *)(v6 + 64);
  if (*(_DWORD *)(v6 + 84))
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = v7 + 1;
  v9 = (v8 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  if (a2 > 2)
  {
    v12 = sub_23BFF8368();
    if (((v9 + v8 + *(unsigned __int8 *)(*(_QWORD *)(v12 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v12 - 8) + 80))
       + *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) <= v5)
      v13 = v5;
    else
      v13 = ((v9 + v8 + *(unsigned __int8 *)(*(_QWORD *)(v12 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v12 - 8) + 80))
          + *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64);
    if (v13 <= 3)
      v14 = ((a2 - 3) >> (8 * v13)) + 3;
    else
      v14 = 3;
    a1[v13] = v14;
    if (v13 >= 4)
      v15 = 4;
    else
      v15 = v13;
    bzero(a1, v13);
    __asm { BR              X10 }
  }
  result = sub_23BFF8368();
  v11 = ((v9 + v8 + *(unsigned __int8 *)(*(_QWORD *)(result - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(result - 8) + 80))
      + *(_QWORD *)(*(_QWORD *)(result - 8) + 64);
  if (v11 <= v5)
    v11 = v5;
  a1[v11] = a2;
  return result;
}

uint64_t sub_23BF7FE3C(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23BF7FE7C + 4 * byte_23C002AAF[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23BF7FE9C + 4 * byte_23C002AB4[v4]))();
}

_BYTE *sub_23BF7FE7C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23BF7FE9C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BF7FEA4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BF7FEAC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BF7FEB4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BF7FEBC(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_23BF7FEC8(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23BF7FF14 + 4 * byte_23C002ABE[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23BF7FF48 + 4 * byte_23C002AB9[v4]))();
}

uint64_t sub_23BF7FF48(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BF7FF50(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BF7FF58);
  return result;
}

uint64_t sub_23BF7FF64(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BF7FF6CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23BF7FF70(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BF7FF78(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void sub_23BF7FF84()
{
  JUMPOUT(0x242615198);
}

void sub_23BF7FF94()
{
  JUMPOUT(0x242615198);
}

void sub_23BF7FFA4()
{
  JUMPOUT(0x242615198);
}

void sub_23BF7FFB4()
{
  JUMPOUT(0x242615198);
}

void sub_23BF7FFC4()
{
  JUMPOUT(0x242615198);
}

void sub_23BF7FFD4()
{
  JUMPOUT(0x242615198);
}

void sub_23BF7FFE4()
{
  JUMPOUT(0x242615198);
}

void sub_23BF7FFF4()
{
  JUMPOUT(0x242615198);
}

void sub_23BF80004()
{
  JUMPOUT(0x242615198);
}

void sub_23BF80014()
{
  JUMPOUT(0x242615198);
}

void sub_23BF80024()
{
  JUMPOUT(0x242615198);
}

void sub_23BF80034()
{
  JUMPOUT(0x242615198);
}

BOOL static DynamicTypeSize.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t sub_23BF80064(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23BF800A0 + 4 * byte_23C003080[a1]))(0x616D536172747865, 0xEA00000000006C6CLL);
}

uint64_t sub_23BF800A0()
{
  return 0x6C6C616D73;
}

uint64_t sub_23BF800B4()
{
  return 0x6D756964656DLL;
}

uint64_t sub_23BF800C8()
{
  return 0x656772616CLL;
}

uint64_t sub_23BF800DC()
{
  return 0x72614C6172747865;
}

uint64_t sub_23BF800F8()
{
  return 0x7478456172747865;
}

unint64_t sub_23BF8011C()
{
  return 0xD000000000000014;
}

uint64_t sub_23BF80138()
{
  return 0x6269737365636361;
}

uint64_t sub_23BF8019C()
{
  sub_23BF80EEC();
  return sub_23BFF9A30();
}

uint64_t sub_23BF801C4()
{
  sub_23BF80EEC();
  return sub_23BFF9A3C();
}

uint64_t sub_23BF801EC()
{
  sub_23BF80EA8();
  return sub_23BFF9A30();
}

uint64_t sub_23BF80214()
{
  sub_23BF80EA8();
  return sub_23BFF9A3C();
}

uint64_t sub_23BF8023C()
{
  sub_23BF80E64();
  return sub_23BFF9A30();
}

uint64_t sub_23BF80264()
{
  sub_23BF80E64();
  return sub_23BFF9A3C();
}

uint64_t sub_23BF8028C()
{
  sub_23BF80E20();
  return sub_23BFF9A30();
}

uint64_t sub_23BF802B4()
{
  sub_23BF80E20();
  return sub_23BFF9A3C();
}

uint64_t sub_23BF802DC()
{
  sub_23BF80DDC();
  return sub_23BFF9A30();
}

uint64_t sub_23BF80304()
{
  sub_23BF80DDC();
  return sub_23BFF9A3C();
}

uint64_t sub_23BF8032C()
{
  unsigned __int8 *v0;

  return sub_23BF80064(*v0);
}

uint64_t sub_23BF80334@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BF81228(a1, a2);
  *a3 = result;
  return result;
}

void sub_23BF80358(_BYTE *a1@<X8>)
{
  *a1 = 12;
}

uint64_t sub_23BF80364()
{
  sub_23BF80D98();
  return sub_23BFF9A30();
}

uint64_t sub_23BF8038C()
{
  sub_23BF80D98();
  return sub_23BFF9A3C();
}

uint64_t sub_23BF803B4()
{
  sub_23BF80F30();
  return sub_23BFF9A30();
}

uint64_t sub_23BF803DC()
{
  sub_23BF80F30();
  return sub_23BFF9A3C();
}

uint64_t sub_23BF80404()
{
  sub_23BF80F74();
  return sub_23BFF9A30();
}

uint64_t sub_23BF8042C()
{
  sub_23BF80F74();
  return sub_23BFF9A3C();
}

uint64_t sub_23BF80454()
{
  sub_23BF80FB8();
  return sub_23BFF9A30();
}

uint64_t sub_23BF8047C()
{
  sub_23BF80FB8();
  return sub_23BFF9A3C();
}

uint64_t sub_23BF804A4()
{
  sub_23BF810C8();
  return sub_23BFF9A30();
}

uint64_t sub_23BF804CC()
{
  sub_23BF810C8();
  return sub_23BFF9A3C();
}

uint64_t sub_23BF804F4()
{
  sub_23BF80FFC();
  return sub_23BFF9A30();
}

uint64_t sub_23BF8051C()
{
  sub_23BF80FFC();
  return sub_23BFF9A3C();
}

uint64_t sub_23BF80544()
{
  sub_23BF81040();
  return sub_23BFF9A30();
}

uint64_t sub_23BF8056C()
{
  sub_23BF81040();
  return sub_23BFF9A3C();
}

uint64_t sub_23BF80594()
{
  sub_23BF81084();
  return sub_23BFF9A30();
}

uint64_t sub_23BF805BC()
{
  sub_23BF81084();
  return sub_23BFF9A3C();
}

void DynamicTypeSize.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _QWORD v21[3];
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;

  v50 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6AA0);
  v48 = *(_QWORD *)(v3 - 8);
  v49 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v47 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6AA8);
  v45 = *(_QWORD *)(v5 - 8);
  v46 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v44 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6AB0);
  v42 = *(_QWORD *)(v7 - 8);
  v43 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v41 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6AB8);
  v39 = *(_QWORD *)(v9 - 8);
  v40 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v38 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6AC0);
  v36 = *(_QWORD *)(v11 - 8);
  v37 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v35 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6AC8);
  v33 = *(_QWORD *)(v34 - 8);
  MEMORY[0x24BDAC7A8](v34);
  v32 = (char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6AD0);
  v30 = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  v29 = (char *)v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6AD8);
  v27 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v26 = (char *)v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6AE0);
  v24 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v23 = (char *)v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6AE8);
  v21[2] = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v21[1] = (char *)v21 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21[0] = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6AF0);
  MEMORY[0x24BDAC7A8](v21[0]);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6AF8);
  MEMORY[0x24BDAC7A8](v18);
  v53 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6B00);
  v51 = *(_QWORD *)(v53 - 8);
  MEMORY[0x24BDAC7A8](v53);
  v20 = (char *)v21 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BF80D98();
  v52 = v20;
  sub_23BFF9A18();
  __asm { BR              X10 }
}

uint64_t sub_23BF809F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v3 - 92) = 0;
  sub_23BF810C8();
  v4 = *(_QWORD *)(v3 - 112);
  v5 = *(_QWORD *)(v3 - 104);
  sub_23BFF98EC();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 120) + 8))(v4, v5);
}

unint64_t sub_23BF80D98()
{
  unint64_t result;

  result = qword_256AE6B08;
  if (!qword_256AE6B08)
  {
    result = MEMORY[0x242615198](&unk_23C003B74, &type metadata for DynamicTypeSize.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6B08);
  }
  return result;
}

unint64_t sub_23BF80DDC()
{
  unint64_t result;

  result = qword_256AE6B10;
  if (!qword_256AE6B10)
  {
    result = MEMORY[0x242615198](&unk_23C003B24, &type metadata for DynamicTypeSize.Accessibility5CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6B10);
  }
  return result;
}

unint64_t sub_23BF80E20()
{
  unint64_t result;

  result = qword_256AE6B18;
  if (!qword_256AE6B18)
  {
    result = MEMORY[0x242615198](&unk_23C003AD4, &type metadata for DynamicTypeSize.Accessibility4CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6B18);
  }
  return result;
}

unint64_t sub_23BF80E64()
{
  unint64_t result;

  result = qword_256AE6B20;
  if (!qword_256AE6B20)
  {
    result = MEMORY[0x242615198](&unk_23C003A84, &type metadata for DynamicTypeSize.Accessibility3CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6B20);
  }
  return result;
}

unint64_t sub_23BF80EA8()
{
  unint64_t result;

  result = qword_256AE6B28;
  if (!qword_256AE6B28)
  {
    result = MEMORY[0x242615198](&unk_23C003A34, &type metadata for DynamicTypeSize.Accessibility2CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6B28);
  }
  return result;
}

unint64_t sub_23BF80EEC()
{
  unint64_t result;

  result = qword_256AE6B30;
  if (!qword_256AE6B30)
  {
    result = MEMORY[0x242615198](&unk_23C0039E4, &type metadata for DynamicTypeSize.Accessibility1CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6B30);
  }
  return result;
}

unint64_t sub_23BF80F30()
{
  unint64_t result;

  result = qword_256AE6B38;
  if (!qword_256AE6B38)
  {
    result = MEMORY[0x242615198](&unk_23C003994, &type metadata for DynamicTypeSize.ExtraExtraExtraLargeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6B38);
  }
  return result;
}

unint64_t sub_23BF80F74()
{
  unint64_t result;

  result = qword_256AE6B40;
  if (!qword_256AE6B40)
  {
    result = MEMORY[0x242615198](&unk_23C003944, &type metadata for DynamicTypeSize.ExtraExtraLargeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6B40);
  }
  return result;
}

unint64_t sub_23BF80FB8()
{
  unint64_t result;

  result = qword_256AE6B48;
  if (!qword_256AE6B48)
  {
    result = MEMORY[0x242615198](&unk_23C0038F4, &type metadata for DynamicTypeSize.ExtraLargeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6B48);
  }
  return result;
}

unint64_t sub_23BF80FFC()
{
  unint64_t result;

  result = qword_256AE6B50;
  if (!qword_256AE6B50)
  {
    result = MEMORY[0x242615198](&unk_23C0038A4, &type metadata for DynamicTypeSize.LargeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6B50);
  }
  return result;
}

unint64_t sub_23BF81040()
{
  unint64_t result;

  result = qword_256AE6B58;
  if (!qword_256AE6B58)
  {
    result = MEMORY[0x242615198](&unk_23C003854, &type metadata for DynamicTypeSize.MediumCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6B58);
  }
  return result;
}

unint64_t sub_23BF81084()
{
  unint64_t result;

  result = qword_256AE6B60;
  if (!qword_256AE6B60)
  {
    result = MEMORY[0x242615198](&unk_23C003804, &type metadata for DynamicTypeSize.SmallCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6B60);
  }
  return result;
}

unint64_t sub_23BF810C8()
{
  unint64_t result;

  result = qword_256AE6B68;
  if (!qword_256AE6B68)
  {
    result = MEMORY[0x242615198](&unk_23C0037B4, &type metadata for DynamicTypeSize.ExtraSmallCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6B68);
  }
  return result;
}

uint64_t DynamicTypeSize.init(from:)(_QWORD *a1)
{
  return sub_23BF8178C(a1);
}

uint64_t sub_23BF81120@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_23BF8178C(a1);
  if (!v2)
    *a2 = result;
  return result;
}

void sub_23BF81148(_QWORD *a1)
{
  unsigned __int8 *v1;

  DynamicTypeSize.encode(to:)(a1, *v1);
}

BOOL static DynamicTypeSize.< infix(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  return a1 < a2;
}

BOOL sub_23BF81170(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

BOOL sub_23BF81184(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 >= *a1;
}

BOOL sub_23BF81198(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 >= *a2;
}

BOOL sub_23BF811AC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 < *a1;
}

uint64_t DynamicTypeSize.hash(into:)()
{
  return sub_23BFF99DC();
}

uint64_t DynamicTypeSize.hashValue.getter()
{
  sub_23BFF99D0();
  sub_23BFF99DC();
  return sub_23BFF9A00();
}

uint64_t sub_23BF81228(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0x616D536172747865 && a2 == 0xEA00000000006C6CLL || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C6C616D73 && a2 == 0xE500000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6D756964656DLL && a2 == 0xE600000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x656772616CLL && a2 == 0xE500000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x72614C6172747865 && a2 == 0xEA00000000006567 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x7478456172747865 && a2 == 0xEF656772614C6172 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000023C01F130 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6269737365636361 && a2 == 0xEE00317974696C69 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x6269737365636361 && a2 == 0xEE00327974696C69 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x6269737365636361 && a2 == 0xEE00337974696C69 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x6269737365636361 && a2 == 0xEE00347974696C69 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x6269737365636361 && a2 == 0xEE00357974696C69)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else
  {
    v5 = sub_23BFF9964();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 11;
    else
      return 12;
  }
}

uint64_t sub_23BF8178C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD v34[4];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  _QWORD *v67;
  uint64_t v68;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6C48);
  v54 = *(_QWORD *)(v2 - 8);
  v55 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v63 = (char *)v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6C50);
  v52 = *(_QWORD *)(v4 - 8);
  v53 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v62 = (char *)v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6C58);
  v50 = *(_QWORD *)(v6 - 8);
  v51 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v61 = (char *)v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6C60);
  v34[3] = *(_QWORD *)(v35 - 8);
  MEMORY[0x24BDAC7A8](v35);
  v60 = (char *)v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6C68);
  v47 = *(_QWORD *)(v49 - 8);
  MEMORY[0x24BDAC7A8](v49);
  v66 = (char *)v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6C70);
  v44 = *(_QWORD *)(v48 - 8);
  MEMORY[0x24BDAC7A8](v48);
  v58 = (char *)v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6C78);
  v45 = *(_QWORD *)(v46 - 8);
  MEMORY[0x24BDAC7A8](v46);
  v65 = (char *)v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6C80);
  v42 = *(_QWORD *)(v43 - 8);
  MEMORY[0x24BDAC7A8](v43);
  v59 = (char *)v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6C88);
  v40 = *(_QWORD *)(v41 - 8);
  MEMORY[0x24BDAC7A8](v41);
  v64 = (char *)v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6C90);
  v38 = *(_QWORD *)(v39 - 8);
  MEMORY[0x24BDAC7A8](v39);
  v57 = (char *)v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6C98);
  v36 = *(_QWORD *)(v37 - 8);
  MEMORY[0x24BDAC7A8](v37);
  v56 = (char *)v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6CA0);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6CA8);
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)v34 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = a1[3];
  v67 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v24);
  sub_23BF80D98();
  v25 = v68;
  sub_23BFF9A0C();
  if (!v25)
  {
    v34[2] = v19;
    v34[0] = v17;
    v34[1] = v16;
    v68 = 0;
    v26 = v21;
    v27 = v23;
    v28 = sub_23BFF98D4();
    v29 = v20;
    if (*(_QWORD *)(v28 + 16) == 1)
      __asm { BR              X9 }
    v30 = sub_23BFF9784();
    swift_allocError();
    v32 = v31;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3978);
    *v32 = &type metadata for DynamicTypeSize;
    sub_23BFF9874();
    sub_23BFF9778();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v30 - 8) + 104))(v32, *MEMORY[0x24BEE26D0], v30);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v27, v29);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v67);
}

ValueMetadata *type metadata accessor for DynamicTypeSize()
{
  return &type metadata for DynamicTypeSize;
}

uint64_t getEnumTagSinglePayload for FullWidthStageViewLayout.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF5)
    goto LABEL_17;
  if (a2 + 11 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 11) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 11;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 11;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 11;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xC;
  v8 = v6 - 12;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s15FitnessCanvasUI15DynamicTypeSizeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_23BF82210 + 4 * byte_23C0030B5[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_23BF82244 + 4 * byte_23C0030B0[v4]))();
}

uint64_t sub_23BF82244(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BF8224C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BF82254);
  return result;
}

uint64_t sub_23BF82260(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BF82268);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_23BF8226C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BF82274(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DynamicTypeSize.CodingKeys()
{
  return &type metadata for DynamicTypeSize.CodingKeys;
}

ValueMetadata *type metadata accessor for DynamicTypeSize.ExtraSmallCodingKeys()
{
  return &type metadata for DynamicTypeSize.ExtraSmallCodingKeys;
}

ValueMetadata *type metadata accessor for DynamicTypeSize.SmallCodingKeys()
{
  return &type metadata for DynamicTypeSize.SmallCodingKeys;
}

ValueMetadata *type metadata accessor for DynamicTypeSize.MediumCodingKeys()
{
  return &type metadata for DynamicTypeSize.MediumCodingKeys;
}

ValueMetadata *type metadata accessor for DynamicTypeSize.LargeCodingKeys()
{
  return &type metadata for DynamicTypeSize.LargeCodingKeys;
}

ValueMetadata *type metadata accessor for DynamicTypeSize.ExtraLargeCodingKeys()
{
  return &type metadata for DynamicTypeSize.ExtraLargeCodingKeys;
}

ValueMetadata *type metadata accessor for DynamicTypeSize.ExtraExtraLargeCodingKeys()
{
  return &type metadata for DynamicTypeSize.ExtraExtraLargeCodingKeys;
}

ValueMetadata *type metadata accessor for DynamicTypeSize.ExtraExtraExtraLargeCodingKeys()
{
  return &type metadata for DynamicTypeSize.ExtraExtraExtraLargeCodingKeys;
}

ValueMetadata *type metadata accessor for DynamicTypeSize.Accessibility1CodingKeys()
{
  return &type metadata for DynamicTypeSize.Accessibility1CodingKeys;
}

ValueMetadata *type metadata accessor for DynamicTypeSize.Accessibility2CodingKeys()
{
  return &type metadata for DynamicTypeSize.Accessibility2CodingKeys;
}

ValueMetadata *type metadata accessor for DynamicTypeSize.Accessibility3CodingKeys()
{
  return &type metadata for DynamicTypeSize.Accessibility3CodingKeys;
}

ValueMetadata *type metadata accessor for DynamicTypeSize.Accessibility4CodingKeys()
{
  return &type metadata for DynamicTypeSize.Accessibility4CodingKeys;
}

ValueMetadata *type metadata accessor for DynamicTypeSize.Accessibility5CodingKeys()
{
  return &type metadata for DynamicTypeSize.Accessibility5CodingKeys;
}

unint64_t sub_23BF82354()
{
  unint64_t result;

  result = qword_256AE6B70;
  if (!qword_256AE6B70)
  {
    result = MEMORY[0x242615198](&unk_23C00378C, &type metadata for DynamicTypeSize.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6B70);
  }
  return result;
}

unint64_t sub_23BF8239C()
{
  unint64_t result;

  result = qword_256AE6B78;
  if (!qword_256AE6B78)
  {
    result = MEMORY[0x242615198](&unk_23C0036AC, &type metadata for DynamicTypeSize.ExtraSmallCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6B78);
  }
  return result;
}

unint64_t sub_23BF823E4()
{
  unint64_t result;

  result = qword_256AE6B80;
  if (!qword_256AE6B80)
  {
    result = MEMORY[0x242615198](&unk_23C0036D4, &type metadata for DynamicTypeSize.ExtraSmallCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6B80);
  }
  return result;
}

unint64_t sub_23BF8242C()
{
  unint64_t result;

  result = qword_256AE6B88;
  if (!qword_256AE6B88)
  {
    result = MEMORY[0x242615198](&unk_23C00365C, &type metadata for DynamicTypeSize.SmallCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6B88);
  }
  return result;
}

unint64_t sub_23BF82474()
{
  unint64_t result;

  result = qword_256AE6B90;
  if (!qword_256AE6B90)
  {
    result = MEMORY[0x242615198](&unk_23C003684, &type metadata for DynamicTypeSize.SmallCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6B90);
  }
  return result;
}

unint64_t sub_23BF824BC()
{
  unint64_t result;

  result = qword_256AE6B98;
  if (!qword_256AE6B98)
  {
    result = MEMORY[0x242615198](&unk_23C00360C, &type metadata for DynamicTypeSize.MediumCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6B98);
  }
  return result;
}

unint64_t sub_23BF82504()
{
  unint64_t result;

  result = qword_256AE6BA0;
  if (!qword_256AE6BA0)
  {
    result = MEMORY[0x242615198](&unk_23C003634, &type metadata for DynamicTypeSize.MediumCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6BA0);
  }
  return result;
}

unint64_t sub_23BF8254C()
{
  unint64_t result;

  result = qword_256AE6BA8;
  if (!qword_256AE6BA8)
  {
    result = MEMORY[0x242615198](&unk_23C0035BC, &type metadata for DynamicTypeSize.LargeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6BA8);
  }
  return result;
}

unint64_t sub_23BF82594()
{
  unint64_t result;

  result = qword_256AE6BB0;
  if (!qword_256AE6BB0)
  {
    result = MEMORY[0x242615198](&unk_23C0035E4, &type metadata for DynamicTypeSize.LargeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6BB0);
  }
  return result;
}

unint64_t sub_23BF825DC()
{
  unint64_t result;

  result = qword_256AE6BB8;
  if (!qword_256AE6BB8)
  {
    result = MEMORY[0x242615198](&unk_23C00356C, &type metadata for DynamicTypeSize.ExtraLargeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6BB8);
  }
  return result;
}

unint64_t sub_23BF82624()
{
  unint64_t result;

  result = qword_256AE6BC0;
  if (!qword_256AE6BC0)
  {
    result = MEMORY[0x242615198](&unk_23C003594, &type metadata for DynamicTypeSize.ExtraLargeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6BC0);
  }
  return result;
}

unint64_t sub_23BF8266C()
{
  unint64_t result;

  result = qword_256AE6BC8;
  if (!qword_256AE6BC8)
  {
    result = MEMORY[0x242615198](&unk_23C00351C, &type metadata for DynamicTypeSize.ExtraExtraLargeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6BC8);
  }
  return result;
}

unint64_t sub_23BF826B4()
{
  unint64_t result;

  result = qword_256AE6BD0;
  if (!qword_256AE6BD0)
  {
    result = MEMORY[0x242615198](&unk_23C003544, &type metadata for DynamicTypeSize.ExtraExtraLargeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6BD0);
  }
  return result;
}

unint64_t sub_23BF826FC()
{
  unint64_t result;

  result = qword_256AE6BD8;
  if (!qword_256AE6BD8)
  {
    result = MEMORY[0x242615198](&unk_23C0034CC, &type metadata for DynamicTypeSize.ExtraExtraExtraLargeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6BD8);
  }
  return result;
}

unint64_t sub_23BF82744()
{
  unint64_t result;

  result = qword_256AE6BE0;
  if (!qword_256AE6BE0)
  {
    result = MEMORY[0x242615198](&unk_23C0034F4, &type metadata for DynamicTypeSize.ExtraExtraExtraLargeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6BE0);
  }
  return result;
}

unint64_t sub_23BF8278C()
{
  unint64_t result;

  result = qword_256AE6BE8;
  if (!qword_256AE6BE8)
  {
    result = MEMORY[0x242615198](&unk_23C00347C, &type metadata for DynamicTypeSize.Accessibility1CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6BE8);
  }
  return result;
}

unint64_t sub_23BF827D4()
{
  unint64_t result;

  result = qword_256AE6BF0;
  if (!qword_256AE6BF0)
  {
    result = MEMORY[0x242615198](&unk_23C0034A4, &type metadata for DynamicTypeSize.Accessibility1CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6BF0);
  }
  return result;
}

unint64_t sub_23BF8281C()
{
  unint64_t result;

  result = qword_256AE6BF8;
  if (!qword_256AE6BF8)
  {
    result = MEMORY[0x242615198](&unk_23C00342C, &type metadata for DynamicTypeSize.Accessibility2CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6BF8);
  }
  return result;
}

unint64_t sub_23BF82864()
{
  unint64_t result;

  result = qword_256AE6C00;
  if (!qword_256AE6C00)
  {
    result = MEMORY[0x242615198](&unk_23C003454, &type metadata for DynamicTypeSize.Accessibility2CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6C00);
  }
  return result;
}

unint64_t sub_23BF828AC()
{
  unint64_t result;

  result = qword_256AE6C08;
  if (!qword_256AE6C08)
  {
    result = MEMORY[0x242615198](&unk_23C0033DC, &type metadata for DynamicTypeSize.Accessibility3CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6C08);
  }
  return result;
}

unint64_t sub_23BF828F4()
{
  unint64_t result;

  result = qword_256AE6C10;
  if (!qword_256AE6C10)
  {
    result = MEMORY[0x242615198](&unk_23C003404, &type metadata for DynamicTypeSize.Accessibility3CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6C10);
  }
  return result;
}

unint64_t sub_23BF8293C()
{
  unint64_t result;

  result = qword_256AE6C18;
  if (!qword_256AE6C18)
  {
    result = MEMORY[0x242615198](&unk_23C00338C, &type metadata for DynamicTypeSize.Accessibility4CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6C18);
  }
  return result;
}

unint64_t sub_23BF82984()
{
  unint64_t result;

  result = qword_256AE6C20;
  if (!qword_256AE6C20)
  {
    result = MEMORY[0x242615198](&unk_23C0033B4, &type metadata for DynamicTypeSize.Accessibility4CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6C20);
  }
  return result;
}

unint64_t sub_23BF829CC()
{
  unint64_t result;

  result = qword_256AE6C28;
  if (!qword_256AE6C28)
  {
    result = MEMORY[0x242615198](&unk_23C00333C, &type metadata for DynamicTypeSize.Accessibility5CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6C28);
  }
  return result;
}

unint64_t sub_23BF82A14()
{
  unint64_t result;

  result = qword_256AE6C30;
  if (!qword_256AE6C30)
  {
    result = MEMORY[0x242615198](&unk_23C003364, &type metadata for DynamicTypeSize.Accessibility5CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6C30);
  }
  return result;
}

unint64_t sub_23BF82A5C()
{
  unint64_t result;

  result = qword_256AE6C38;
  if (!qword_256AE6C38)
  {
    result = MEMORY[0x242615198](&unk_23C0036FC, &type metadata for DynamicTypeSize.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6C38);
  }
  return result;
}

unint64_t sub_23BF82AA4()
{
  unint64_t result;

  result = qword_256AE6C40;
  if (!qword_256AE6C40)
  {
    result = MEMORY[0x242615198](&unk_23C003724, &type metadata for DynamicTypeSize.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6C40);
  }
  return result;
}

uint64_t dispatch thunk of static CanvasArtworkProtocol.placeholder.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t sub_23BF82AF8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v11;

  v2 = sub_23BFF86B0();
  MEMORY[0x24BDAC7A8](v2);
  sub_23BF82E64(&qword_256AE6CB0, MEMORY[0x24BDED950]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6CB8);
  sub_23BF82E18();
  sub_23BFF96E8();
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 56);
  v11 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  if (v5)
  {
    v6 = __clz(__rbit64(v5));
    goto LABEL_22;
  }
  if (v11 > 1)
  {
    v7 = *(_QWORD *)(a1 + 64);
    v8 = 1;
    if (v7)
      goto LABEL_21;
    v8 = 2;
    if (v11 <= 2)
      return swift_release();
    v7 = *(_QWORD *)(a1 + 72);
    if (v7)
      goto LABEL_21;
    v8 = 3;
    if (v11 <= 3)
      return swift_release();
    v7 = *(_QWORD *)(a1 + 80);
    if (v7)
      goto LABEL_21;
    v8 = 4;
    if (v11 <= 4)
      return swift_release();
    v7 = *(_QWORD *)(a1 + 88);
    if (v7)
      goto LABEL_21;
    v8 = 5;
    if (v11 <= 5)
      return swift_release();
    v7 = *(_QWORD *)(a1 + 96);
    if (v7)
    {
LABEL_21:
      v6 = __clz(__rbit64(v7)) + (v8 << 6);
LABEL_22:
      __asm { BR              X9 }
    }
    v9 = 6;
    if (v11 > 6)
    {
      v7 = *(_QWORD *)(a1 + 104);
      if (v7)
      {
        v8 = 6;
        goto LABEL_21;
      }
      while (1)
      {
        v8 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          JUMPOUT(0x23BF82E08);
        }
        if (v8 >= v11)
          break;
        v7 = *(_QWORD *)(a1 + 56 + 8 * v8);
        ++v9;
        if (v7)
          goto LABEL_21;
      }
    }
  }
  return swift_release();
}

unint64_t sub_23BF82E18()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256AE6CC0;
  if (!qword_256AE6CC0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE6CB8);
    result = MEMORY[0x242615198](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&qword_256AE6CC0);
  }
  return result;
}

uint64_t sub_23BF82E64(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_23BFF86B0();
    result = MEMORY[0x242615198](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t View.magicPocketTarget()@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  void (*v13)(char *, uint64_t);
  _QWORD v15[2];

  v4 = sub_23BFF862C();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v15 - v10;
  MEMORY[0x2426142A4](v9);
  v12 = sub_23BF82FCC();
  v15[0] = a1;
  v15[1] = v12;
  MEMORY[0x242615198](MEMORY[0x24BDED308], v4, v15);
  sub_23BEA72EC((uint64_t)v7, v4, (uint64_t)v11);
  v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v7, v4);
  sub_23BEA5C0C((uint64_t)v11, v4, a2);
  return ((uint64_t (*)(char *, uint64_t))v13)(v11, v4);
}

unint64_t sub_23BF82FCC()
{
  unint64_t result;

  result = qword_256AE6CE0[0];
  if (!qword_256AE6CE0[0])
  {
    result = MEMORY[0x242615198](&unk_23C003CB0, &type metadata for MagicPocketTargetViewModifier);
    atomic_store(result, qword_256AE6CE0);
  }
  return result;
}

void View.magicPocket<A, B>(backgroundStyle:content:)(uint64_t a1)
{
  MEMORY[0x24BDAC7A8](a1);
  type metadata accessor for MagicPocketViewModifier();
}

void sub_23BF83094(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;

  MEMORY[0x24BDAC7A8](a1);
  v14 = (char *)&a9 - v13;
  v15 = sub_23BFF862C();
  *(_QWORD *)(v12 - 160) = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v17 = MEMORY[0x24BDAC7A8](v16);
  (*(void (**)(uint64_t, _QWORD, uint64_t, __n128))(v11 + 16))(v9, *(_QWORD *)(v12 - 184), v10, v17);
  swift_retain();
  sub_23BF8322C(v9, v10, (uint64_t)v14);
}

uint64_t sub_23BF83160()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v7 = *(_QWORD *)(v6 - 152);
  MEMORY[0x2426142A4](v4, *(_QWORD *)(v6 - 208), v1, v7);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v1);
  v8 = MEMORY[0x242615198](&unk_23C003C60, v1);
  *(_QWORD *)(v6 - 128) = v7;
  *(_QWORD *)(v6 - 120) = v8;
  MEMORY[0x242615198](MEMORY[0x24BDED308], v2, v6 - 128);
  sub_23BEA72EC(v3, v2, v0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 160) + 8);
  v9(v3, v2);
  sub_23BEA5C0C(v0, v2, *(_QWORD *)(v6 - 136));
  return ((uint64_t (*)(uint64_t, uint64_t))v9)(v0, v2);
}

void type metadata accessor for MagicPocketViewModifier()
{
  JUMPOUT(0x2426150F0);
}

void sub_23BF8322C(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for MagicPocketViewModifier();
}

uint64_t sub_23BF83290(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = (_QWORD *)(v3 + *(int *)(a1 + 52));
  *v4 = v2;
  v4[1] = v1;
  v5 = (_QWORD *)(v3 + *(int *)(a1 + 56));
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6D98);
  result = sub_23BFF8FEC();
  *v5 = v7;
  v5[1] = v8;
  return result;
}

uint64_t sub_23BF832F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = sub_23BFF862C();
  v4[0] = v1;
  v4[1] = sub_23BF82FCC();
  return MEMORY[0x242615198](MEMORY[0x24BDED308], v2, v4);
}

void sub_23BF83344()
{
  type metadata accessor for MagicPocketViewModifier();
}

uint64_t sub_23BF83378(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD v5[12];

  v3 = sub_23BFF862C();
  v5[0] = v1;
  v5[1] = MEMORY[0x242615198](&unk_23C003C60, a1);
  return MEMORY[0x242615198](MEMORY[0x24BDED308], v3, v5);
}

uint64_t sub_23BF833CC()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_23BF83450(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v9 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v11 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (_QWORD *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8);
    v14 = (_QWORD *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8);
    *v13 = *v14;
    v13[1] = v14[1];
    swift_retain();
    swift_bridgeObjectRetain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_23BF83538(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_23BF83590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  v10 = (_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v11 = (_QWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v10 = *v11;
  v10[1] = v11[1];
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t sub_23BF83620(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  v10 = (_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v11 = (_QWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v10 = *v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10[1] = v11[1];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_23BF836CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  *(_OWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_23BF83738(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = v6 + a2;
  v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 23;
  *v7 = *(_OWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  v10 = (_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v9 &= 0xFFFFFFFFFFFFFFF8;
  *v10 = *(_QWORD *)v9;
  swift_bridgeObjectRelease();
  v10[1] = *(_QWORD *)(v9 + 8);
  swift_release();
  return a1;
}

uint64_t sub_23BF837C8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_23BF8384C + 4 * byte_23C003BF0[v10]))();
  }
}

void sub_23BF838D0(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_23BF839CC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x23BF83A44);
}

void sub_23BF839D4(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x23BF839DCLL);
  JUMPOUT(0x23BF83A44);
}

void sub_23BF83A1C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x23BF83A44);
}

void sub_23BF83A24()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x23BF83A44);
}

uint64_t sub_23BF83A2C(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x23BF83A44);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x23BF83A40);
    JUMPOUT(0x23BF83A38);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

ValueMetadata *type metadata accessor for MagicPocketTargetViewModifier()
{
  return &type metadata for MagicPocketTargetViewModifier;
}

uint64_t sub_23BF83A6C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23BF83AA0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v6;

  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6D78);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_23C003D70;
  *(_QWORD *)(v4 + 32) = a1;
  v6 = v4;
  sub_23BFF9478();
  *a2 = v6;
  return swift_retain();
}

uint64_t sub_23BF83B10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t *v7;

  v4 = sub_23BFF9028();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6D68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  result = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6D70);
  v7 = (uint64_t *)(a2 + *(int *)(result + 36));
  *v7 = v4;
  v7[1] = (uint64_t)sub_23BF83AA0;
  v7[2] = 0;
  return result;
}

void sub_23BF83B88()
{
  qword_256AE6CD8 = MEMORY[0x24BEE4AF8];
}

uint64_t sub_23BF83B9C(uint64_t a1)
{
  uint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_20;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v1 = v3;
  if ((_DWORD)isUniquelyReferenced_nonNull_native)
  {
    v8 = *(_QWORD *)(v3 + 24) >> 1;
    if (v8 >= v5)
    {
      v9 = *(_QWORD *)(a1 + 16);
      if (v9)
        goto LABEL_5;
LABEL_17:
      if (!v2)
        goto LABEL_18;
      goto LABEL_20;
    }
  }
  if (v4 <= v5)
    v4 += v2;
  swift_bridgeObjectRetain();
  v3 = MEMORY[0x242614B08](isUniquelyReferenced_nonNull_native, v4, 1, v3);
  swift_bridgeObjectRelease();
  *v1 = v3;
  v8 = *(_QWORD *)(v3 + 24) >> 1;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_17;
LABEL_5:
  v10 = *(_QWORD *)(v3 + 16);
  if (v8 - v10 < (uint64_t)v9)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v11 = v3 + 8 * v10 + 32;
  if (a1 + 32 < v11 + 8 * v9 && v11 < a1 + 32 + 8 * v9)
    goto LABEL_23;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6DA8);
  swift_arrayInitWithCopy();
  if (v9 < v2)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v13 = *(_QWORD *)(*v1 + 16);
  v14 = __OFADD__(v13, v9);
  v15 = v13 + v9;
  if (!v14)
  {
    *(_QWORD *)(*v1 + 16) = v15;
LABEL_18:
    swift_bridgeObjectRelease();
    return sub_23BFF9478();
  }
LABEL_22:
  __break(1u);
LABEL_23:
  result = sub_23BFF985C();
  __break(1u);
  return result;
}

uint64_t sub_23BF83D34@<X0>(_QWORD *a1@<X8>)
{
  if (qword_256AE3388 != -1)
    swift_once();
  *a1 = qword_256AE6CD8;
  return swift_bridgeObjectRetain();
}

uint64_t sub_23BF83D84(uint64_t a1, void (*a2)(uint64_t *__return_ptr))
{
  uint64_t v3;

  a2(&v3);
  return sub_23BF83B9C(v3);
}

uint64_t sub_23BF83DC8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD v67[2];
  _QWORD v68[2];
  _QWORD v69[2];
  _QWORD v70[2];
  _QWORD v71[4];

  v59 = a1;
  v61 = a3;
  v58 = *(a2 - 1);
  v60 = *(_QWORD *)(v58 + 64);
  v4 = MEMORY[0x24BDAC7A8](a1);
  v57 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x242615198](&unk_23C003C60, v4);
  v6 = sub_23BFF89EC();
  v46 = a2[2];
  v7 = v46;
  v8 = sub_23BFF862C();
  v54 = a2[3];
  v47 = a2[5];
  v9 = v47;
  v10 = sub_23BFF8A70();
  sub_23BFF862C();
  v11 = sub_23BFF8968();
  v12 = MEMORY[0x242615198](MEMORY[0x24BDF06D0], v10);
  v13 = MEMORY[0x24BDF3E20];
  v71[2] = MEMORY[0x24BDF3E20];
  v71[3] = v12;
  v14 = MEMORY[0x24BDED308];
  v71[0] = MEMORY[0x242615198]();
  v71[1] = v13;
  MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v11, v71);
  v15 = sub_23BFF859C();
  MEMORY[0x242615198](MEMORY[0x24BDEC6F8], v15);
  v16 = sub_23BFF8944();
  v17 = sub_23BFF862C();
  v70[0] = a2[4];
  v70[1] = MEMORY[0x24BDEDBB8];
  v18 = v70[0];
  v45 = v70[0];
  v19 = MEMORY[0x242615198](v14, v8, v70);
  v20 = MEMORY[0x242615198](MEMORY[0x24BDEF370], v16);
  v69[0] = v19;
  v69[1] = v20;
  v49 = v17;
  MEMORY[0x242615198](v14, v17, v69);
  v51 = sub_23BFF8860();
  v21 = sub_23BFF862C();
  v53 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v48 = (char *)&v44 - v22;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE6D80);
  v23 = sub_23BFF862C();
  v55 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v50 = (char *)&v44 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v25);
  v52 = (uint64_t)&v44 - v26;
  v27 = v54;
  v62 = v7;
  v63 = v54;
  v64 = v18;
  v65 = v9;
  v28 = v56;
  v66 = v56;
  sub_23BFF889C();
  v43 = MEMORY[0x242615198](MEMORY[0x24BDEFB78], v6);
  sub_23BFF8D70();
  v29 = v58;
  v30 = v57;
  (*(void (**)(char *, uint64_t, _QWORD *))(v58 + 16))(v57, v28, a2);
  v31 = (*(unsigned __int8 *)(v29 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
  v32 = (char *)swift_allocObject();
  *((_QWORD *)v32 + 2) = v46;
  *((_QWORD *)v32 + 3) = v27;
  v33 = v47;
  *((_QWORD *)v32 + 4) = v45;
  *((_QWORD *)v32 + 5) = v33;
  (*(void (**)(char *, char *, _QWORD *))(v29 + 32))(&v32[v31], v30, a2);
  v34 = MEMORY[0x242615198](MEMORY[0x24BDEEC88], v51);
  v68[0] = v43;
  v68[1] = v34;
  v35 = MEMORY[0x24BDED308];
  v36 = MEMORY[0x242615198](MEMORY[0x24BDED308], v21, v68);
  sub_23BF84E50();
  sub_23BF84EB8(&qword_256AE6D90, &qword_256AE6D98, sub_23BF84E94, MEMORY[0x24BEE12C0]);
  v37 = (uint64_t)v50;
  v38 = v48;
  sub_23BFF8DDC();
  swift_release();
  (*(void (**)(char *, uint64_t))(v53 + 8))(v38, v21);
  v39 = sub_23BEA1F94(&qword_256AE6DB8, &qword_256AE6D80, MEMORY[0x24BDF09B0]);
  v67[0] = v36;
  v67[1] = v39;
  MEMORY[0x242615198](v35, v23, v67);
  v40 = v52;
  sub_23BEA72EC(v37, v23, v52);
  v41 = *(void (**)(uint64_t, uint64_t))(v55 + 8);
  v41(v37, v23);
  sub_23BEA5C0C(v40, v23, v61);
  return ((uint64_t (*)(uint64_t, uint64_t))v41)(v40, v23);
}

void sub_23BF84320(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[11];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[2];
  _QWORD v27[3];

  v21 = a5;
  v20[7] = a1;
  v20[10] = a6;
  v20[8] = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9 = sub_23BFF862C();
  v10 = *(_QWORD *)(v9 - 8);
  v20[2] = v9;
  v20[9] = v10;
  MEMORY[0x24BDAC7A8](v9);
  v20[6] = (char *)v20 - v11;
  v20[1] = a3;
  v12 = sub_23BFF8A70();
  v13 = sub_23BFF862C();
  v14 = sub_23BFF8968();
  v15 = MEMORY[0x242615198](MEMORY[0x24BDF06D0], v12);
  v16 = MEMORY[0x24BDF3E20];
  v27[0] = MEMORY[0x24BDF3E20];
  v27[1] = v15;
  v26[0] = MEMORY[0x242615198](MEMORY[0x24BDED308], v13, v27);
  v26[1] = v16;
  MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v14, v26);
  v17 = sub_23BFF859C();
  v20[3] = MEMORY[0x242615198](MEMORY[0x24BDEC6F8], v17);
  v20[4] = sub_23BFF8944();
  v18 = sub_23BFF862C();
  v20[5] = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  MEMORY[0x24BDAC7A8](v19);
  v22 = a2;
  v23 = a3;
  v24 = a4;
  v25 = v21;
  type metadata accessor for MagicPocketViewModifier();
}

uint64_t sub_23BF8453C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);

  v8 = *(_QWORD *)(v7 - 280);
  (*(void (**)(void))(v8 + *(int *)(a1 + 52)))();
  sub_23BFF91C0();
  v9 = *(_QWORD *)(v7 - 288);
  sub_23BFF8EA8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 272) + 8))(v1, v5);
  v10 = *(_QWORD *)(v7 - 328);
  *(_QWORD *)(v7 - 224) = v5;
  *(_QWORD *)(v7 - 216) = v10;
  v11 = *(_QWORD *)(v7 - 248);
  *(_QWORD *)(v7 - 208) = v2;
  *(_QWORD *)(v7 - 200) = v11;
  *(_QWORD *)(v7 - 192) = v8;
  sub_23BFF91C0();
  v12 = MEMORY[0x24BDEDBB8];
  *(_QWORD *)(v7 - 168) = v2;
  *(_QWORD *)(v7 - 160) = v12;
  v13 = MEMORY[0x24BDED308];
  v14 = *(_QWORD *)(v7 - 320);
  v15 = MEMORY[0x242615198](MEMORY[0x24BDED308], v14, v7 - 168);
  sub_23BFF8CBC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 264) + 8))(v9, v14);
  v16 = MEMORY[0x242615198](MEMORY[0x24BDEF370], *(_QWORD *)(v7 - 304));
  *(_QWORD *)(v7 - 184) = v15;
  *(_QWORD *)(v7 - 176) = v16;
  MEMORY[0x242615198](v13, v6, v7 - 184);
  sub_23BEA72EC(v3, v6, v4);
  v17 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 296) + 8);
  v17(v3, v6);
  sub_23BEA5C0C(v4, v6, *(_QWORD *)(v7 - 256));
  return ((uint64_t (*)(uint64_t, uint64_t))v17)(v4, v6);
}

void sub_23BF84704()
{
  type metadata accessor for MagicPocketViewModifier();
}

uint64_t sub_23BF84750(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v23[96];

  v8 = *(_QWORD *)(a1 - 8);
  v9 = MEMORY[0x24BDAC7A8](a1);
  v11 = &v23[-v10];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v8 + 16))(&v23[-v10], v1, a1, v9);
  v12 = (*(unsigned __int8 *)(v8 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v13 = (char *)swift_allocObject();
  *((_QWORD *)v13 + 2) = v5;
  *((_QWORD *)v13 + 3) = v3;
  *((_QWORD *)v13 + 4) = v4;
  *((_QWORD *)v13 + 5) = v2;
  (*(void (**)(char *, _BYTE *, uint64_t))(v8 + 32))(&v13[v12], v11, a1);
  v14 = sub_23BFF8A70();
  v15 = sub_23BFF862C();
  v16 = sub_23BFF8968();
  v17 = MEMORY[0x242615198](MEMORY[0x24BDF06D0], v14);
  v18 = MEMORY[0x24BDF3E20];
  *(_QWORD *)(v6 - 128) = MEMORY[0x24BDF3E20];
  *(_QWORD *)(v6 - 120) = v17;
  *(_QWORD *)(v6 - 144) = MEMORY[0x242615198](MEMORY[0x24BDED308], v15, v6 - 128);
  *(_QWORD *)(v6 - 136) = v18;
  MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v16, v6 - 144);
  *(_QWORD *)(v6 - 160) = sub_23BFF8590();
  *(_QWORD *)(v6 - 152) = v19;
  v20 = sub_23BFF859C();
  MEMORY[0x242615198](MEMORY[0x24BDEC6F8], v20);
  sub_23BEA72EC(v6 - 160, v20, v6 - 112);
  swift_release();
  v21 = *(_QWORD *)(v6 - 104);
  *(_QWORD *)(v6 - 160) = *(_QWORD *)(v6 - 112);
  *(_QWORD *)(v6 - 152) = v21;
  sub_23BEA5C0C(v6 - 160, v20, *(_QWORD *)(v6 - 168));
  return swift_release();
}

void sub_23BF8490C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_23BFF8A70();
  v0 = sub_23BFF862C();
  MEMORY[0x24BDAC7A8](v0);
  MEMORY[0x24BDAC7A8](v1);
  v2 = sub_23BFF8968();
  MEMORY[0x24BDAC7A8](v2);
  type metadata accessor for MagicPocketViewModifier();
}

uint64_t sub_23BF84A14(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_23BF84C00(*(_QWORD *)(v5 - 216), a1);
  v7 = sub_23BFF8F8C();
  v8 = MEMORY[0x24BDF3E20];
  *(_QWORD *)(v5 - 112) = v7;
  if ((v6 & 1) != 0)
  {
    sub_23BFF8B60();
    sub_23BFF8CC8();
    swift_release();
    v9 = *(_QWORD *)(v5 - 192);
    v10 = MEMORY[0x242615198](MEMORY[0x24BDF06D0], v9);
    *(_QWORD *)(v5 - 176) = v8;
    *(_QWORD *)(v5 - 168) = v10;
    MEMORY[0x242615198](MEMORY[0x24BDED308], v1, v5 - 176);
    sub_23BEA72EC(v3, v1, v4);
    v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 224) + 8);
    v11(v3, v1);
    sub_23BEA5C0C(v4, v1, v3);
    sub_23BEA5C24(v3, v1);
    v11(v3, v1);
    v11(v4, v1);
  }
  else
  {
    v9 = *(_QWORD *)(v5 - 192);
    v12 = MEMORY[0x242615198](MEMORY[0x24BDF06D0], v9);
    *(_QWORD *)(v5 - 128) = v8;
    *(_QWORD *)(v5 - 120) = v12;
    MEMORY[0x242615198](MEMORY[0x24BDED308], v1, v5 - 128);
    sub_23BEA5CE8(v5 - 112, v1, MEMORY[0x24BDF3E48]);
    swift_release();
  }
  v13 = MEMORY[0x242615198](MEMORY[0x24BDF06D0], v9);
  *(_QWORD *)(v5 - 144) = v8;
  *(_QWORD *)(v5 - 136) = v13;
  *(_QWORD *)(v5 - 160) = MEMORY[0x242615198](MEMORY[0x24BDED308], v1, v5 - 144);
  *(_QWORD *)(v5 - 152) = v8;
  v14 = *(_QWORD *)(v5 - 208);
  MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v14, v5 - 160);
  sub_23BEA5C0C(v2, v14, *(_QWORD *)(v5 - 184));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 200) + 8))(v2, v14);
}

uint64_t sub_23BF84C00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  CGFloat *v3;
  CGFloat v4;
  CGFloat v5;
  uint64_t v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  uint64_t v11;
  uint64_t v12;
  CGFloat v15;
  CGFloat v16;
  uint64_t v17;
  CGRect v18;
  CGRect v19;

  v3 = (CGFloat *)(v2 + *(int *)(a2 + 56));
  v4 = *v3;
  v5 = v3[1];
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6DC0);
  sub_23BFF8FF8();
  v6 = *(_QWORD *)(v17 + 16);
  swift_bridgeObjectRelease();
  if (v6)
  {
    sub_23BFF84DC();
    v8 = v7;
    v10 = v9;
    sub_23BFF8FF8();
    v6 = *(_QWORD *)(v17 + 16);
    if (v6)
    {
      type metadata accessor for CGRect(0);
      swift_bridgeObjectRetain();
      v11 = 0;
      v12 = v6 - 1;
      do
      {
        swift_retain();
        sub_23BFF850C();
        v19.origin.x = v4;
        v19.origin.y = v5;
        v19.size.width = v15;
        v19.size.height = v16;
        v18.origin.x = 0.0;
        v18.origin.y = 0.0;
        v18.size.width = v8;
        v18.size.height = v10;
        v6 = CGRectIntersectsRect(v18, v19);
        swift_release();
        if ((v6 & 1) != 0)
          break;
      }
      while (v12 != v11++);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  return v6;
}

void sub_23BF84D3C()
{
  type metadata accessor for MagicPocketViewModifier();
}

uint64_t sub_23BF84D68()
{
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6DC0);
  return sub_23BFF9004();
}

uint64_t sub_23BF84DB4()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_23BF84DC4(uint64_t a1@<X8>)
{
  uint64_t *v1;

  sub_23BF84320(v1[6], v1[2], v1[3], v1[4], v1[5], a1);
}

void sub_23BF84DD8()
{
  type metadata accessor for MagicPocketViewModifier();
}

void sub_23BF84E10()
{
  sub_23BF84D3C();
}

unint64_t sub_23BF84E50()
{
  unint64_t result;

  result = qword_256AE6D88;
  if (!qword_256AE6D88)
  {
    result = MEMORY[0x242615198](&unk_23C003D28, &type metadata for MagicPocketTargetBoundsPreferenceKey);
    atomic_store(result, (unint64_t *)&qword_256AE6D88);
  }
  return result;
}

uint64_t sub_23BF84E94()
{
  return sub_23BF84EB8(&qword_256AE6DA0, &qword_256AE6DA8, (uint64_t (*)(void))sub_23BF84F1C, MEMORY[0x24BDF4320]);
}

uint64_t sub_23BF84EB8(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v9 = a3();
    result = MEMORY[0x242615198](a4, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23BF84F1C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256AE6DB0;
  if (!qword_256AE6DB0)
  {
    type metadata accessor for CGRect(255);
    result = MEMORY[0x242615198](MEMORY[0x24BDBD830], v1);
    atomic_store(result, (unint64_t *)&qword_256AE6DB0);
  }
  return result;
}

void sub_23BF84F64()
{
  sub_23BF84704();
}

void objectdestroyTm_8()
{
  type metadata accessor for MagicPocketViewModifier();
}

uint64_t sub_23BF84FB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  (*(void (**)(uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v1 + ((v2 + 48) & ~v2));
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

void sub_23BF85044()
{
  type metadata accessor for MagicPocketViewModifier();
}

void sub_23BF85084()
{
  sub_23BF8490C();
}

ValueMetadata *type metadata accessor for MagicPocketTargetBoundsPreferenceKey()
{
  return &type metadata for MagicPocketTargetBoundsPreferenceKey;
}

unint64_t sub_23BF850E0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AE6DC8;
  if (!qword_256AE6DC8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE6D70);
    v2[0] = sub_23BEA1F94(&qword_256AE6DD0, &qword_256AE6D68, MEMORY[0x24BDEFB78]);
    v2[1] = sub_23BEA1F94(&qword_256AE6DD8, &qword_256AE6DE0, MEMORY[0x24BDEFF30]);
    result = MEMORY[0x242615198](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AE6DC8);
  }
  return result;
}

void sub_23BF8517C()
{
  type metadata accessor for MagicPocketViewModifier();
}

uint64_t sub_23BF851B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[2];
  _QWORD v18[2];
  _QWORD v19[2];
  _QWORD v20[2];
  _QWORD v21[2];
  _QWORD v22[16];

  MEMORY[0x242615198](&unk_23C003C60, a1);
  v2 = sub_23BFF89EC();
  v3 = sub_23BFF862C();
  v4 = sub_23BFF8A70();
  v5 = sub_23BFF862C();
  v6 = sub_23BFF8968();
  v7 = MEMORY[0x242615198](MEMORY[0x24BDF06D0], v4);
  v8 = MEMORY[0x24BDF3E20];
  v22[0] = MEMORY[0x24BDF3E20];
  v22[1] = v7;
  v9 = MEMORY[0x24BDED308];
  v21[0] = MEMORY[0x242615198](MEMORY[0x24BDED308], v5, v22);
  v21[1] = v8;
  MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v6, v21);
  v10 = sub_23BFF859C();
  MEMORY[0x242615198](MEMORY[0x24BDEC6F8], v10);
  v11 = sub_23BFF8944();
  v12 = sub_23BFF862C();
  v20[0] = v1;
  v20[1] = MEMORY[0x24BDEDBB8];
  v19[0] = MEMORY[0x242615198](v9, v3, v20);
  v19[1] = MEMORY[0x242615198](MEMORY[0x24BDEF370], v11);
  MEMORY[0x242615198](v9, v12, v19);
  v13 = sub_23BFF8860();
  v14 = sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE6D80);
  v15 = sub_23BFF862C();
  v18[0] = MEMORY[0x242615198](MEMORY[0x24BDEFB78], v2);
  v18[1] = MEMORY[0x242615198](MEMORY[0x24BDEEC88], v13);
  v17[0] = MEMORY[0x242615198](v9, v14, v18);
  v17[1] = sub_23BEA1F94(&qword_256AE6DB8, &qword_256AE6D80, MEMORY[0x24BDF09B0]);
  return MEMORY[0x242615198](v9, v15, v17);
}

void sub_23BF853E8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  _QWORD v28[5];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;

  v35 = a4;
  v36 = a1;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = type metadata accessor for CanvasVerticalGridLayout(0, v4, v5, a3);
  v30 = *(_QWORD *)(v6 - 8);
  v31 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v28[2] = (char *)v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v28[4] = (char *)v28 - v9;
  v29 = type metadata accessor for CanvasHorizontalGridLayout(0, v4, v5, v10);
  v28[3] = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v28[0] = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v28[1] = (char *)v28 - v13;
  v15 = type metadata accessor for CanvasGridAxis(0, v4, v5, v14);
  v32 = *(_QWORD *)(v15 - 8);
  v33 = v15;
  MEMORY[0x24BDAC7A8](v15);
  MEMORY[0x24BDAC7A8](v16);
  v34 = (char *)v28 - v17;
  MEMORY[0x24BDAC7A8](v18);
  MEMORY[0x24BDAC7A8](v19);
  MEMORY[0x24BDAC7A8](v20);
  MEMORY[0x24BDAC7A8](v21);
  v23 = type metadata accessor for CanvasSectionLayout(0, v4, v5, v22);
  v24 = MEMORY[0x24BDAC7A8](v23);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v25 + 16))((char *)v28 - v26, v36, v23, v24);
  v27 = (char *)sub_23BF8563C + 4 * byte_23C003D80[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void sub_23BF8563C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = *(_QWORD **)(v0 - 128);
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
}

void CanvasSectionDescriptor.transformed()()
{
  uint64_t v0;

  v0 = sub_23BFF96A0();
  MEMORY[0x24BDAC7A8](v0);
  type metadata accessor for CanvasSectionHeader();
}

void sub_23BF859E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char *v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;

  v15 = sub_23BFF96A0();
  v16 = MEMORY[0x24BDAC7A8](v15);
  *(_QWORD *)(v14 - 152) = *(_QWORD *)v9;
  (*(void (**)(char *, char *, __n128))(v17 + 16))((char *)&a9 - v18, &v9[v11[46]], v16);
  *(_BYTE *)(v14 - 112) = v9[v11[47]];
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 16))(v10, &v9[v11[49]], v13);
  CanvasSectionViewDescriptor.init(identifier:header:footer:items:metrics:)();
}

uint64_t sub_23BF85AD0()
{
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void LazyCanvasSectionViewDescriptor.transformed(with:missingPlaceholders:)(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[26];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v10[3] = a1;
  v10[4] = a2;
  v10[15] = a4;
  v10[9] = a3[7];
  v5 = sub_23BFF96A0();
  v10[13] = *(_QWORD *)(v5 - 8);
  v10[14] = v5;
  MEMORY[0x24BDAC7A8](v5);
  v10[12] = (char *)v10 - v6;
  v7 = a3[8];
  v8 = a3[10];
  v9 = a3[18];
  v11 = a3[2];
  v12 = v9;
  v13 = v11;
  v14 = v7;
  v10[8] = v7;
  v15 = v8;
  v16 = v9;
  type metadata accessor for CanvasSectionHeader();
}

void sub_23BF85BAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v17 = sub_23BFF96A0();
  v18 = MEMORY[0x24BDAC7A8](v17);
  v20 = *v10;
  v21 = v10[1];
  v9[10] = (char *)&a9 - v19;
  v9[11] = v20;
  v9[6] = v21;
  (*(void (**)(__n128))(v22 + 16))(v18);
  v23 = *(int *)(v14 + 168);
  v24 = *(int *)(v14 + 172);
  v9[7] = v10;
  *(_BYTE *)(v16 - 89) = *((_BYTE *)v10 + v23);
  *(_QWORD *)(v16 - 104) = *(_QWORD *)((char *)v10 + v24);
  v25 = *(_QWORD *)(v14 + 24);
  v26 = *(_QWORD *)(v14 + 32);
  v9[24] = v26;
  v9[25] = v25;
  v9[30] = v12;
  v9[31] = v25;
  v27 = *(_QWORD *)(v14 + 40);
  v28 = *(_QWORD *)(v14 + 48);
  v9[22] = v28;
  v9[23] = v27;
  v9[32] = v26;
  v9[33] = v27;
  v9[34] = v28;
  v9[35] = v11;
  v29 = *(_QWORD *)(v14 + 72);
  v9[21] = v29;
  v9[36] = v13;
  v9[37] = v29;
  v30 = *(_QWORD *)(v14 + 88);
  v31 = *(_QWORD *)(v14 + 96);
  v9[20] = v30;
  v32 = v15;
  v9[1] = v31;
  v9[2] = v15;
  v9[38] = v15;
  v9[39] = v30;
  v33 = *(_QWORD *)(v14 + 104);
  v34 = *(_QWORD *)(v14 + 112);
  v9[19] = v33;
  v9[40] = v31;
  v9[41] = v33;
  v35 = *(_QWORD *)(v14 + 120);
  v36 = *(_QWORD *)(v14 + 128);
  *v9 = v35;
  v9[17] = v34;
  v9[18] = v36;
  v9[42] = v34;
  v9[43] = v35;
  v37 = *(_QWORD *)(v14 + 136);
  v9[5] = v37;
  v9[44] = v36;
  v9[45] = v37;
  v38 = *(_QWORD *)(v14 + 152);
  v9[16] = v38;
  v9[46] = v9[27];
  v9[47] = v38;
  v9[48] = v9[3];
  v9[49] = v9[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v39 = v9[25];
  *(_QWORD *)(v16 - 224) = v9[26];
  *(_QWORD *)(v16 - 216) = v39;
  v40 = v9[23];
  *(_QWORD *)(v16 - 208) = v26;
  *(_QWORD *)(v16 - 200) = v40;
  *(_QWORD *)(v16 - 192) = v28;
  *(_QWORD *)(v16 - 184) = v9[21];
  *(_QWORD *)(v16 - 176) = v32;
  v41 = v9[19];
  *(_QWORD *)(v16 - 168) = v9[20];
  *(_QWORD *)(v16 - 160) = v31;
  v43 = v9[17];
  v42 = v9[18];
  *(_QWORD *)(v16 - 152) = v41;
  *(_QWORD *)(v16 - 144) = v43;
  *(_QWORD *)(v16 - 136) = *v9;
  *(_QWORD *)(v16 - 128) = v42;
  *(_QWORD *)(v16 - 120) = v9[16];
  type metadata accessor for LazyCanvasItemDescriptor();
}

void sub_23BF85CF4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v0[4] = sub_23BFF94C0();
  *(_QWORD *)(v9 - 224) = v1;
  *(_QWORD *)(v9 - 216) = v8;
  *(_QWORD *)(v9 - 208) = v0[24];
  *(_QWORD *)(v9 - 200) = v5;
  *(_QWORD *)(v9 - 192) = v0[22];
  *(_QWORD *)(v9 - 184) = v7;
  v10 = v0[1];
  *(_QWORD *)(v9 - 176) = v0[2];
  *(_QWORD *)(v9 - 168) = v4;
  *(_QWORD *)(v9 - 160) = v10;
  *(_QWORD *)(v9 - 152) = v6;
  *(_QWORD *)(v9 - 144) = v2;
  *(_QWORD *)(v9 - 136) = v3;
  v11 = v0[16];
  *(_QWORD *)(v9 - 128) = v0[18];
  *(_QWORD *)(v9 - 120) = v11;
  type metadata accessor for CanvasItemDescriptor();
}

void sub_23BF85D40()
{
  _QWORD *v0;
  uint64_t v1;

  MEMORY[0x242615198](MEMORY[0x24BEE12C8], v0[4]);
  sub_23BFF9430();
  swift_bridgeObjectRelease();
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[13] + 16))(v0[12], v0[7] + *(int *)(v1 + 176), v0[14]);
  CanvasSectionViewDescriptor.init(identifier:header:footer:items:metrics:)();
}

void sub_23BF85E50()
{
  type metadata accessor for LazyCanvasItemDescriptor();
}

void sub_23BF85EE0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;

  LazyCanvasItemDescriptor.transformed(with:missingPlaceholders:)(a17, a18, a1, v18);
}

void sub_23BF85EF4()
{
  type metadata accessor for CanvasItemDescriptor();
}

uint64_t sub_23BF85F34(uint64_t a1)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(v2, 0, 1, a1);
}

void sub_23BF85F74()
{
  sub_23BF85E50();
}

BOOL static CanvasItemRedactionReason.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_23BF85FE0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23BF86018 + 4 * byte_23C003D90[*v0]))(0x6C6F686563616C70, 0xEB00000000726564);
}

uint64_t sub_23BF86018()
{
  return 0x79636176697270;
}

uint64_t sub_23BF86030()
{
  return 0x6164696C61766E69;
}

uint64_t sub_23BF86050()
{
  return 0x6F5464656C696166;
}

uint64_t sub_23BF86074@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BF87000(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BF86098()
{
  sub_23BF86514();
  return sub_23BFF9A30();
}

uint64_t sub_23BF860C0()
{
  sub_23BF86514();
  return sub_23BFF9A3C();
}

uint64_t sub_23BF860E8()
{
  sub_23BF86558();
  return sub_23BFF9A30();
}

uint64_t sub_23BF86110()
{
  sub_23BF86558();
  return sub_23BFF9A3C();
}

uint64_t sub_23BF86138()
{
  sub_23BF8659C();
  return sub_23BFF9A30();
}

uint64_t sub_23BF86160()
{
  sub_23BF8659C();
  return sub_23BFF9A3C();
}

uint64_t sub_23BF86188()
{
  sub_23BF86624();
  return sub_23BFF9A30();
}

uint64_t sub_23BF861B0()
{
  sub_23BF86624();
  return sub_23BFF9A3C();
}

uint64_t sub_23BF861D8()
{
  sub_23BF865E0();
  return sub_23BFF9A30();
}

uint64_t sub_23BF86200()
{
  sub_23BF865E0();
  return sub_23BFF9A3C();
}

void CanvasItemRedactionReason.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6DE8);
  v19 = *(_QWORD *)(v4 - 8);
  v20 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v18 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6DF0);
  v16 = *(_QWORD *)(v6 - 8);
  v17 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v15 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6DF8);
  v13 = *(_QWORD *)(v8 - 8);
  v14 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6E00);
  MEMORY[0x24BDAC7A8](v12);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6E08);
  v21 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v10 = *v2;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BF86514();
  sub_23BFF9A18();
  __asm { BR              X9 }
}

uint64_t sub_23BF863E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v4 - 68) = 0;
  sub_23BF86624();
  sub_23BFF98EC();
  (*(void (**)(uint64_t, _QWORD))(v3 + 8))(v2, *(_QWORD *)(v4 - 168));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 96) + 8))(v1, v0);
}

unint64_t sub_23BF86514()
{
  unint64_t result;

  result = qword_256AE6E10;
  if (!qword_256AE6E10)
  {
    result = MEMORY[0x242615198](&unk_23C004260, &type metadata for CanvasItemRedactionReason.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6E10);
  }
  return result;
}

unint64_t sub_23BF86558()
{
  unint64_t result;

  result = qword_256AE6E18;
  if (!qword_256AE6E18)
  {
    result = MEMORY[0x242615198](&unk_23C004210, &type metadata for CanvasItemRedactionReason.FailedToFetchCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6E18);
  }
  return result;
}

unint64_t sub_23BF8659C()
{
  unint64_t result;

  result = qword_256AE6E20;
  if (!qword_256AE6E20)
  {
    result = MEMORY[0x242615198](&unk_23C0041C0, &type metadata for CanvasItemRedactionReason.InvalidatedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6E20);
  }
  return result;
}

unint64_t sub_23BF865E0()
{
  unint64_t result;

  result = qword_256AE6E28;
  if (!qword_256AE6E28)
  {
    result = MEMORY[0x242615198](&unk_23C004170, &type metadata for CanvasItemRedactionReason.PrivacyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6E28);
  }
  return result;
}

unint64_t sub_23BF86624()
{
  unint64_t result;

  result = qword_256AE6E30;
  if (!qword_256AE6E30)
  {
    result = MEMORY[0x242615198](&unk_23C004120, &type metadata for CanvasItemRedactionReason.PlaceholderCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6E30);
  }
  return result;
}

uint64_t CanvasItemRedactionReason.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD v21[7];
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;

  v23 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6E38);
  v21[5] = *(_QWORD *)(v3 - 8);
  v21[6] = v3;
  MEMORY[0x24BDAC7A8](v3);
  v26 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6E40);
  v21[4] = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6E48);
  v21[2] = *(_QWORD *)(v6 - 8);
  v21[3] = v6;
  MEMORY[0x24BDAC7A8](v6);
  v24 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6E50);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6E58);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v27 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v14);
  sub_23BF86514();
  v15 = v28;
  sub_23BFF9A0C();
  if (!v15)
  {
    v21[0] = v9;
    v21[1] = v8;
    v28 = v11;
    v16 = sub_23BFF98D4();
    if (*(_QWORD *)(v16 + 16) == 1)
      __asm { BR              X9 }
    v17 = sub_23BFF9784();
    swift_allocError();
    v19 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3978);
    *v19 = &type metadata for CanvasItemRedactionReason;
    sub_23BFF9874();
    sub_23BFF9778();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v19, *MEMORY[0x24BEE26D0], v17);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v13, v10);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
}

uint64_t sub_23BF86AEC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return CanvasItemRedactionReason.init(from:)(a1, a2);
}

void sub_23BF86B00(_QWORD *a1)
{
  CanvasItemRedactionReason.encode(to:)(a1);
}

uint64_t CanvasItemRedactionReason.hash(into:)()
{
  return sub_23BFF99DC();
}

uint64_t CanvasItemRedactionReason.hashValue.getter()
{
  sub_23BFF99D0();
  sub_23BFF99DC();
  return sub_23BFF9A00();
}

unint64_t sub_23BF86B84()
{
  unint64_t result;

  result = qword_256AE6E60;
  if (!qword_256AE6E60)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for CanvasItemRedactionReason, &type metadata for CanvasItemRedactionReason);
    atomic_store(result, (unint64_t *)&qword_256AE6E60);
  }
  return result;
}

ValueMetadata *type metadata accessor for CanvasItemRedactionReason()
{
  return &type metadata for CanvasItemRedactionReason;
}

uint64_t _s15FitnessCanvasUI25CanvasItemRedactionReasonOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23BF86C28 + 4 * byte_23C003DA1[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23BF86C5C + 4 * byte_23C003D9C[v4]))();
}

uint64_t sub_23BF86C5C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BF86C64(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BF86C6CLL);
  return result;
}

uint64_t sub_23BF86C78(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BF86C80);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23BF86C84(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BF86C8C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CanvasItemRedactionReason.CodingKeys()
{
  return &type metadata for CanvasItemRedactionReason.CodingKeys;
}

ValueMetadata *type metadata accessor for CanvasItemRedactionReason.PlaceholderCodingKeys()
{
  return &type metadata for CanvasItemRedactionReason.PlaceholderCodingKeys;
}

ValueMetadata *type metadata accessor for CanvasItemRedactionReason.PrivacyCodingKeys()
{
  return &type metadata for CanvasItemRedactionReason.PrivacyCodingKeys;
}

ValueMetadata *type metadata accessor for CanvasItemRedactionReason.InvalidatedCodingKeys()
{
  return &type metadata for CanvasItemRedactionReason.InvalidatedCodingKeys;
}

ValueMetadata *type metadata accessor for CanvasItemRedactionReason.FailedToFetchCodingKeys()
{
  return &type metadata for CanvasItemRedactionReason.FailedToFetchCodingKeys;
}

unint64_t sub_23BF86CEC()
{
  unint64_t result;

  result = qword_256AE6E68;
  if (!qword_256AE6E68)
  {
    result = MEMORY[0x242615198](&unk_23C0040F8, &type metadata for CanvasItemRedactionReason.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6E68);
  }
  return result;
}

unint64_t sub_23BF86D34()
{
  unint64_t result;

  result = qword_256AE6E70;
  if (!qword_256AE6E70)
  {
    result = MEMORY[0x242615198](&unk_23C004018, &type metadata for CanvasItemRedactionReason.PlaceholderCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6E70);
  }
  return result;
}

unint64_t sub_23BF86D7C()
{
  unint64_t result;

  result = qword_256AE6E78;
  if (!qword_256AE6E78)
  {
    result = MEMORY[0x242615198](&unk_23C004040, &type metadata for CanvasItemRedactionReason.PlaceholderCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6E78);
  }
  return result;
}

unint64_t sub_23BF86DC4()
{
  unint64_t result;

  result = qword_256AE6E80;
  if (!qword_256AE6E80)
  {
    result = MEMORY[0x242615198](&unk_23C003FC8, &type metadata for CanvasItemRedactionReason.PrivacyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6E80);
  }
  return result;
}

unint64_t sub_23BF86E0C()
{
  unint64_t result;

  result = qword_256AE6E88;
  if (!qword_256AE6E88)
  {
    result = MEMORY[0x242615198](&unk_23C003FF0, &type metadata for CanvasItemRedactionReason.PrivacyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6E88);
  }
  return result;
}

unint64_t sub_23BF86E54()
{
  unint64_t result;

  result = qword_256AE6E90;
  if (!qword_256AE6E90)
  {
    result = MEMORY[0x242615198](&unk_23C003F78, &type metadata for CanvasItemRedactionReason.InvalidatedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6E90);
  }
  return result;
}

unint64_t sub_23BF86E9C()
{
  unint64_t result;

  result = qword_256AE6E98;
  if (!qword_256AE6E98)
  {
    result = MEMORY[0x242615198](&unk_23C003FA0, &type metadata for CanvasItemRedactionReason.InvalidatedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6E98);
  }
  return result;
}

unint64_t sub_23BF86EE4()
{
  unint64_t result;

  result = qword_256AE6EA0;
  if (!qword_256AE6EA0)
  {
    result = MEMORY[0x242615198](&unk_23C003F28, &type metadata for CanvasItemRedactionReason.FailedToFetchCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6EA0);
  }
  return result;
}

unint64_t sub_23BF86F2C()
{
  unint64_t result;

  result = qword_256AE6EA8;
  if (!qword_256AE6EA8)
  {
    result = MEMORY[0x242615198](&unk_23C003F50, &type metadata for CanvasItemRedactionReason.FailedToFetchCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6EA8);
  }
  return result;
}

unint64_t sub_23BF86F74()
{
  unint64_t result;

  result = qword_256AE6EB0;
  if (!qword_256AE6EB0)
  {
    result = MEMORY[0x242615198](&unk_23C004068, &type metadata for CanvasItemRedactionReason.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6EB0);
  }
  return result;
}

unint64_t sub_23BF86FBC()
{
  unint64_t result;

  result = qword_256AE6EB8;
  if (!qword_256AE6EB8)
  {
    result = MEMORY[0x242615198](&unk_23C004090, &type metadata for CanvasItemRedactionReason.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6EB8);
  }
  return result;
}

uint64_t sub_23BF87000(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6C6F686563616C70 && a2 == 0xEB00000000726564;
  if (v2 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x79636176697270 && a2 == 0xE700000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6164696C61766E69 && a2 == 0xEB00000000646574 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6F5464656C696166 && a2 == 0xED00006863746546)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_23BFF9964();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t static CanvasSectionRedactionReason.== infix(_:_:)()
{
  return 1;
}

uint64_t sub_23BF87214()
{
  return 0x6F5464656C696166;
}

uint64_t sub_23BF87238@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x6F5464656C696166 && a2 == 0xED00006863746546)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_23BFF9964();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_23BF872F0()
{
  sub_23BF874CC();
  return sub_23BFF9A30();
}

uint64_t sub_23BF87318()
{
  sub_23BF874CC();
  return sub_23BFF9A3C();
}

uint64_t sub_23BF87340()
{
  sub_23BF87510();
  return sub_23BFF9A30();
}

uint64_t sub_23BF87368()
{
  sub_23BF87510();
  return sub_23BFF9A3C();
}

uint64_t CanvasSectionRedactionReason.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6EC0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6EC8);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BF874CC();
  sub_23BFF9A18();
  sub_23BF87510();
  sub_23BFF98EC();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_23BF874CC()
{
  unint64_t result;

  result = qword_256AE6ED0;
  if (!qword_256AE6ED0)
  {
    result = MEMORY[0x242615198](&unk_23C004520, &type metadata for CanvasSectionRedactionReason.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6ED0);
  }
  return result;
}

unint64_t sub_23BF87510()
{
  unint64_t result;

  result = qword_256AE6ED8;
  if (!qword_256AE6ED8)
  {
    result = MEMORY[0x242615198](&unk_23C0044D0, &type metadata for CanvasSectionRedactionReason.FailedToFetchCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6ED8);
  }
  return result;
}

uint64_t CanvasSectionRedactionReason.init(from:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6EE0);
  v2 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6EE8);
  v5 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BF874CC();
  v8 = v23;
  sub_23BFF9A0C();
  if (v8)
    goto LABEL_7;
  v20 = a1;
  v23 = v5;
  v10 = v21;
  v9 = v22;
  if (*(_QWORD *)(sub_23BFF98D4() + 16) != 1)
  {
    v14 = sub_23BFF9784();
    swift_allocError();
    v16 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3978);
    *v16 = &type metadata for CanvasSectionRedactionReason;
    sub_23BFF9874();
    sub_23BFF9778();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v16, *MEMORY[0x24BEE26D0], v14);
    swift_willThrow();
    v17 = v23;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v7, v9);
    a1 = v20;
LABEL_7:
    v13 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v13);
  }
  sub_23BF87510();
  v11 = v4;
  sub_23BFF9868();
  v12 = v23;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v11, v10);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
  v13 = (uint64_t)v20;
  return __swift_destroy_boxed_opaque_existential_1(v13);
}

uint64_t sub_23BF877B0(_QWORD *a1)
{
  return CanvasSectionRedactionReason.init(from:)(a1);
}

uint64_t sub_23BF877C4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6EC0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6EC8);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BF874CC();
  sub_23BFF9A18();
  sub_23BF87510();
  sub_23BFF98EC();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t CanvasSectionRedactionReason.hash(into:)()
{
  return sub_23BFF99DC();
}

uint64_t CanvasSectionRedactionReason.hashValue.getter()
{
  sub_23BFF99D0();
  sub_23BFF99DC();
  return sub_23BFF9A00();
}

unint64_t sub_23BF87968()
{
  unint64_t result;

  result = qword_256AE6EF0;
  if (!qword_256AE6EF0)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for CanvasSectionRedactionReason, &type metadata for CanvasSectionRedactionReason);
    atomic_store(result, (unint64_t *)&qword_256AE6EF0);
  }
  return result;
}

ValueMetadata *type metadata accessor for CanvasSectionRedactionReason()
{
  return &type metadata for CanvasSectionRedactionReason;
}

uint64_t _s15FitnessCanvasUI28CanvasSectionRedactionReasonOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23BF87A00 + 4 * byte_23C0042B0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23BF87A20 + 4 * byte_23C0042B5[v4]))();
}

_BYTE *sub_23BF87A00(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23BF87A20(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BF87A28(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BF87A30(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BF87A38(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BF87A40(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CanvasSectionRedactionReason.CodingKeys()
{
  return &type metadata for CanvasSectionRedactionReason.CodingKeys;
}

ValueMetadata *type metadata accessor for CanvasSectionRedactionReason.FailedToFetchCodingKeys()
{
  return &type metadata for CanvasSectionRedactionReason.FailedToFetchCodingKeys;
}

unint64_t sub_23BF87A70()
{
  unint64_t result;

  result = qword_256AE6EF8;
  if (!qword_256AE6EF8)
  {
    result = MEMORY[0x242615198](&unk_23C0044A8, &type metadata for CanvasSectionRedactionReason.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6EF8);
  }
  return result;
}

unint64_t sub_23BF87AB8()
{
  unint64_t result;

  result = qword_256AE6F00;
  if (!qword_256AE6F00)
  {
    result = MEMORY[0x242615198](&unk_23C0043C8, &type metadata for CanvasSectionRedactionReason.FailedToFetchCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6F00);
  }
  return result;
}

unint64_t sub_23BF87B00()
{
  unint64_t result;

  result = qword_256AE6F08;
  if (!qword_256AE6F08)
  {
    result = MEMORY[0x242615198](&unk_23C0043F0, &type metadata for CanvasSectionRedactionReason.FailedToFetchCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6F08);
  }
  return result;
}

unint64_t sub_23BF87B48()
{
  unint64_t result;

  result = qword_256AE6F10;
  if (!qword_256AE6F10)
  {
    result = MEMORY[0x242615198](&unk_23C004418, &type metadata for CanvasSectionRedactionReason.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6F10);
  }
  return result;
}

unint64_t sub_23BF87B90()
{
  unint64_t result;

  result = qword_256AE6F18;
  if (!qword_256AE6F18)
  {
    result = MEMORY[0x242615198](&unk_23C004440, &type metadata for CanvasSectionRedactionReason.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6F18);
  }
  return result;
}

uint64_t sub_23BF87BD4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;

  v2 = sub_23BFF85F0();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(a1, v2);
  if (v4 == *MEMORY[0x24BDECF20])
    return 0;
  if (v4 == *MEMORY[0x24BDECF08])
    return 1;
  if (v4 == *MEMORY[0x24BDECF10])
    return 2;
  if (v4 == *MEMORY[0x24BDECF00])
    return 3;
  if (v4 == *MEMORY[0x24BDECF18])
    return 4;
  if (v4 == *MEMORY[0x24BDECF28])
    return 5;
  if (v4 == *MEMORY[0x24BDECF38])
    return 6;
  if (v4 == *MEMORY[0x24BDECEA0])
    return 7;
  if (v4 == *MEMORY[0x24BDECEA8])
    return 8;
  if (v4 == *MEMORY[0x24BDECEC0])
    return 9;
  if (v4 == *MEMORY[0x24BDECED0])
    return 10;
  if (v4 != *MEMORY[0x24BDECEE0])
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
    return 3;
  }
  return 11;
}

void static CanvasSectionDensityFactor.zero.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t CanvasSectionDensityFactor.init(count:span:spacing:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  *(_QWORD *)a3 = result;
  *(double *)(a3 + 8) = a4;
  *(_QWORD *)(a3 + 16) = a2;
  return result;
}

BOOL static CanvasSectionDensityFactor.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a1 == *(_QWORD *)a2
      && *(double *)(a1 + 8) == *(double *)(a2 + 8)
      && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
}

uint64_t CanvasSectionDensityFactor.count.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

double CanvasSectionDensityFactor.spacing.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

uint64_t CanvasSectionDensityFactor.span.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t sub_23BF87DE4()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x676E6963617073;
  if (*v0 != 1)
    v1 = 1851879539;
  if (*v0)
    return v1;
  else
    return 0x746E756F63;
}

uint64_t sub_23BF87E34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BF885BC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BF87E58()
{
  sub_23BF88018();
  return sub_23BFF9A30();
}

uint64_t sub_23BF87E80()
{
  sub_23BF88018();
  return sub_23BFF9A3C();
}

uint64_t CanvasSectionDensityFactor.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  char v14;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6F20);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v1 + 8);
  v10 = *(_QWORD *)(v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BF88018();
  sub_23BFF9A18();
  v14 = 0;
  sub_23BFF9934();
  if (!v2)
  {
    v13 = v8;
    v12 = 1;
    sub_23BEBFC1C();
    sub_23BFF9940();
    v11 = 2;
    sub_23BFF9934();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_23BF88018()
{
  unint64_t result;

  result = qword_256AE6F28;
  if (!qword_256AE6F28)
  {
    result = MEMORY[0x242615198](&unk_23C004730, &type metadata for CanvasSectionDensityFactor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6F28);
  }
  return result;
}

uint64_t CanvasSectionDensityFactor.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[16];
  uint64_t v14;
  char v15;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6F30);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BF88018();
  sub_23BFF9A0C();
  if (!v2)
  {
    v15 = 0;
    v9 = sub_23BFF98BC();
    v13[15] = 1;
    sub_23BEC0384();
    sub_23BFF98C8();
    v11 = v14;
    v13[14] = 2;
    v12 = sub_23BFF98BC();
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v9;
    a2[1] = v11;
    a2[2] = v12;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_23BF881F8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return CanvasSectionDensityFactor.init(from:)(a1, a2);
}

uint64_t sub_23BF8820C(_QWORD *a1)
{
  return CanvasSectionDensityFactor.encode(to:)(a1);
}

uint64_t CanvasSectionDensityFactor.hash(into:)()
{
  sub_23BFF99DC();
  sub_23BFF99F4();
  return sub_23BFF99DC();
}

uint64_t CanvasSectionDensityFactor.hashValue.getter()
{
  sub_23BFF99D0();
  sub_23BFF99DC();
  sub_23BFF99F4();
  sub_23BFF99DC();
  return sub_23BFF9A00();
}

uint64_t sub_23BF882D8()
{
  sub_23BFF99DC();
  sub_23BFF99F4();
  return sub_23BFF99DC();
}

uint64_t sub_23BF88320()
{
  sub_23BFF99D0();
  sub_23BFF99DC();
  sub_23BFF99F4();
  sub_23BFF99DC();
  return sub_23BFF9A00();
}

unint64_t sub_23BF8838C()
{
  unint64_t result;

  result = qword_256AE6F38;
  if (!qword_256AE6F38)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for CanvasSectionDensityFactor, &type metadata for CanvasSectionDensityFactor);
    atomic_store(result, (unint64_t *)&qword_256AE6F38);
  }
  return result;
}

BOOL sub_23BF883D0(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a1 == *(_QWORD *)a2
      && *(double *)(a1 + 8) == *(double *)(a2 + 8)
      && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
}

ValueMetadata *type metadata accessor for CanvasSectionDensityFactor()
{
  return &type metadata for CanvasSectionDensityFactor;
}

uint64_t storeEnumTagSinglePayload for CanvasSectionDensityFactor.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23BF88464 + 4 * byte_23C004575[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23BF88498 + 4 * byte_23C004570[v4]))();
}

uint64_t sub_23BF88498(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BF884A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BF884A8);
  return result;
}

uint64_t sub_23BF884B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BF884BCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23BF884C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BF884C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CanvasSectionDensityFactor.CodingKeys()
{
  return &type metadata for CanvasSectionDensityFactor.CodingKeys;
}

unint64_t sub_23BF884E8()
{
  unint64_t result;

  result = qword_256AE6F40;
  if (!qword_256AE6F40)
  {
    result = MEMORY[0x242615198](&unk_23C004708, &type metadata for CanvasSectionDensityFactor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6F40);
  }
  return result;
}

unint64_t sub_23BF88530()
{
  unint64_t result;

  result = qword_256AE6F48;
  if (!qword_256AE6F48)
  {
    result = MEMORY[0x242615198](&unk_23C004678, &type metadata for CanvasSectionDensityFactor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6F48);
  }
  return result;
}

unint64_t sub_23BF88578()
{
  unint64_t result;

  result = qword_256AE6F50[0];
  if (!qword_256AE6F50[0])
  {
    result = MEMORY[0x242615198](&unk_23C0046A0, &type metadata for CanvasSectionDensityFactor.CodingKeys);
    atomic_store(result, qword_256AE6F50);
  }
  return result;
}

uint64_t sub_23BF885BC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x746E756F63 && a2 == 0xE500000000000000;
  if (v2 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x676E6963617073 && a2 == 0xE700000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1851879539 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_23BFF9964();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_23BF886F8(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24) >= 0xFFFFFFFFuLL)
    return __swift_destroy_boxed_opaque_existential_1(a1);
  return a1;
}

uint64_t sub_23BF88710(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  __int128 v5;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3 < 0xFFFFFFFF)
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  }
  else
  {
    v4 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v3;
    *(_QWORD *)(a1 + 32) = v4;
    (**(void (***)(uint64_t))(v3 - 8))(a1);
  }
  return a1;
}

uint64_t sub_23BF8876C(uint64_t a1, __int128 *a2)
{
  unint64_t v4;
  __int128 v5;
  __int128 v6;

  v4 = *((_QWORD *)a2 + 3);
  if (*(_QWORD *)(a1 + 24) < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *(_QWORD *)(a1 + 24) = v4;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v4 - 8))(a1, a2);
      return a1;
    }
LABEL_7:
    v5 = *a2;
    v6 = a2[1];
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    *(_OWORD *)a1 = v5;
    *(_OWORD *)(a1 + 16) = v6;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_23BF88818(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  if (*(_QWORD *)(a1 + 24) >= 0xFFFFFFFFuLL)
    __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t sub_23BF88864(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t sub_23BF888B4(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 32) = 0;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

uint64_t sub_23BF88910(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

double sub_23BF88928(uint64_t a1, int a2)
{
  double result;

  if (a2 < 0)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    *(_QWORD *)(a1 + 24) = (a2 - 1);
  }
  return result;
}

void type metadata accessor for CanvasLayoutProviderSource()
{
  JUMPOUT(0x2426150F0);
}

BOOL static CanvasSectionFooter.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_23BF88978()
{
  _BYTE *v0;

  if (*v0)
    return 0x72656469766964;
  else
    return 1701736302;
}

uint64_t sub_23BF889AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BF8948C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BF889D0()
{
  sub_23BF88C94();
  return sub_23BFF9A30();
}

uint64_t sub_23BF889F8()
{
  sub_23BF88C94();
  return sub_23BFF9A3C();
}

uint64_t sub_23BF88A20()
{
  sub_23BF88CD8();
  return sub_23BFF9A30();
}

uint64_t sub_23BF88A48()
{
  sub_23BF88CD8();
  return sub_23BFF9A3C();
}

uint64_t sub_23BF88A70()
{
  sub_23BF88D1C();
  return sub_23BFF9A30();
}

uint64_t sub_23BF88A98()
{
  sub_23BF88D1C();
  return sub_23BFF9A3C();
}

uint64_t CanvasSectionFooter.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6FD8);
  v16 = *(_QWORD *)(v3 - 8);
  v17 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6FE0);
  v14 = *(_QWORD *)(v6 - 8);
  v15 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE6FE8);
  v18 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BF88C94();
  sub_23BFF9A18();
  if ((v12 & 1) != 0)
  {
    v20 = 1;
    sub_23BF88CD8();
    sub_23BFF98EC();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v5, v17);
  }
  else
  {
    v19 = 0;
    sub_23BF88D1C();
    sub_23BFF98EC();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v11, v9);
}

unint64_t sub_23BF88C94()
{
  unint64_t result;

  result = qword_256AE6FF0;
  if (!qword_256AE6FF0)
  {
    result = MEMORY[0x242615198](&unk_23C004ADC, &type metadata for CanvasSectionFooter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6FF0);
  }
  return result;
}

unint64_t sub_23BF88CD8()
{
  unint64_t result;

  result = qword_256AE6FF8;
  if (!qword_256AE6FF8)
  {
    result = MEMORY[0x242615198](&unk_23C004A8C, &type metadata for CanvasSectionFooter.DividerCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE6FF8);
  }
  return result;
}

unint64_t sub_23BF88D1C()
{
  unint64_t result;

  result = qword_256AE7000;
  if (!qword_256AE7000)
  {
    result = MEMORY[0x242615198](&unk_23C004A3C, &type metadata for CanvasSectionFooter.NoneCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE7000);
  }
  return result;
}

uint64_t CanvasSectionFooter.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;

  v30 = a2;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE7008);
  v32 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v31 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE7010);
  v4 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE7018);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BF88C94();
  v11 = v33;
  sub_23BFF9A0C();
  if (v11)
    goto LABEL_7;
  v26 = v4;
  v27 = a1;
  v12 = v31;
  v13 = v32;
  v33 = v8;
  v14 = sub_23BFF98D4();
  v15 = v7;
  if (*(_QWORD *)(v14 + 16) != 1)
  {
    v19 = sub_23BFF9784();
    swift_allocError();
    v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3978);
    *v21 = &type metadata for CanvasSectionFooter;
    sub_23BFF9874();
    sub_23BFF9778();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x24BEE26D0], v19);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v15);
    a1 = v27;
LABEL_7:
    v24 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v24);
  }
  v16 = *(_BYTE *)(v14 + 32);
  if ((v16 & 1) != 0)
  {
    LODWORD(v28) = *(unsigned __int8 *)(v14 + 32);
    v35 = 1;
    sub_23BF88CD8();
    sub_23BFF9868();
    v17 = v33;
    v18 = v30;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v12, v29);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v10, v15);
    v16 = v28;
  }
  else
  {
    v34 = 0;
    sub_23BF88D1C();
    v22 = v6;
    sub_23BFF9868();
    v23 = v33;
    v18 = v30;
    (*(void (**)(char *, uint64_t))(v26 + 8))(v22, v28);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v15);
  }
  *v18 = v16;
  v24 = (uint64_t)v27;
  return __swift_destroy_boxed_opaque_existential_1(v24);
}

uint64_t sub_23BF890B8@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return CanvasSectionFooter.init(from:)(a1, a2);
}

uint64_t sub_23BF890CC(_QWORD *a1)
{
  return CanvasSectionFooter.encode(to:)(a1);
}

uint64_t CanvasSectionFooter.hash(into:)()
{
  return sub_23BFF99DC();
}

uint64_t CanvasSectionFooter.hashValue.getter()
{
  sub_23BFF99D0();
  sub_23BFF99DC();
  return sub_23BFF9A00();
}

unint64_t sub_23BF89150()
{
  unint64_t result;

  result = qword_256AE7020;
  if (!qword_256AE7020)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for CanvasSectionFooter, &type metadata for CanvasSectionFooter);
    atomic_store(result, (unint64_t *)&qword_256AE7020);
  }
  return result;
}

ValueMetadata *type metadata accessor for CanvasSectionFooter()
{
  return &type metadata for CanvasSectionFooter;
}

uint64_t _s15FitnessCanvasUI19CanvasSectionFooterOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23BF891F4 + 4 * byte_23C0047C5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23BF89228 + 4 * byte_23C0047C0[v4]))();
}

uint64_t sub_23BF89228(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BF89230(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BF89238);
  return result;
}

uint64_t sub_23BF89244(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BF8924CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23BF89250(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BF89258(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CanvasSectionFooter.CodingKeys()
{
  return &type metadata for CanvasSectionFooter.CodingKeys;
}

ValueMetadata *type metadata accessor for CanvasSectionFooter.NoneCodingKeys()
{
  return &type metadata for CanvasSectionFooter.NoneCodingKeys;
}

ValueMetadata *type metadata accessor for CanvasSectionFooter.DividerCodingKeys()
{
  return &type metadata for CanvasSectionFooter.DividerCodingKeys;
}

unint64_t sub_23BF89298()
{
  unint64_t result;

  result = qword_256AE7028;
  if (!qword_256AE7028)
  {
    result = MEMORY[0x242615198](&unk_23C004A14, &type metadata for CanvasSectionFooter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE7028);
  }
  return result;
}

unint64_t sub_23BF892E0()
{
  unint64_t result;

  result = qword_256AE7030;
  if (!qword_256AE7030)
  {
    result = MEMORY[0x242615198](&unk_23C004934, &type metadata for CanvasSectionFooter.NoneCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE7030);
  }
  return result;
}

unint64_t sub_23BF89328()
{
  unint64_t result;

  result = qword_256AE7038;
  if (!qword_256AE7038)
  {
    result = MEMORY[0x242615198](&unk_23C00495C, &type metadata for CanvasSectionFooter.NoneCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE7038);
  }
  return result;
}

unint64_t sub_23BF89370()
{
  unint64_t result;

  result = qword_256AE7040;
  if (!qword_256AE7040)
  {
    result = MEMORY[0x242615198](&unk_23C0048E4, &type metadata for CanvasSectionFooter.DividerCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE7040);
  }
  return result;
}

unint64_t sub_23BF893B8()
{
  unint64_t result;

  result = qword_256AE7048;
  if (!qword_256AE7048)
  {
    result = MEMORY[0x242615198](&unk_23C00490C, &type metadata for CanvasSectionFooter.DividerCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE7048);
  }
  return result;
}

unint64_t sub_23BF89400()
{
  unint64_t result;

  result = qword_256AE7050;
  if (!qword_256AE7050)
  {
    result = MEMORY[0x242615198](&unk_23C004984, &type metadata for CanvasSectionFooter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE7050);
  }
  return result;
}

unint64_t sub_23BF89448()
{
  unint64_t result;

  result = qword_256AE7058;
  if (!qword_256AE7058)
  {
    result = MEMORY[0x242615198](&unk_23C0049AC, &type metadata for CanvasSectionFooter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE7058);
  }
  return result;
}

uint64_t sub_23BF8948C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701736302 && a2 == 0xE400000000000000;
  if (v2 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x72656469766964 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23BFF9964();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t dispatch thunk of CanvasSectionMetricsProtocol.identifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of CanvasSectionMetricsProtocol.identifierType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of CanvasSectionMetricsProtocol.impressionType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of CanvasSectionMetricsProtocol.metadata.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of CanvasSectionMetricsProtocol.name.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t sub_23BF89594()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  type metadata accessor for CanvasItemPlaceholderFetcherProvider();
  v0 = (_QWORD *)swift_allocObject();
  v1 = type metadata accessor for CanvasItemPlaceholderCacheProvider();
  v2 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE7110);
  result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 16) = MEMORY[0x24BEE4B00];
  *(_QWORD *)(v2 + 16) = result;
  v0[5] = v1;
  v0[6] = &off_250CED4A0;
  v0[2] = v2;
  qword_256AE7060 = (uint64_t)v0;
  return result;
}

uint64_t static CanvasItemPlaceholderFetcherProvider.shared.getter()
{
  if (qword_256AE3390 != -1)
    swift_once();
  swift_beginAccess();
  return swift_retain();
}

uint64_t static CanvasItemPlaceholderFetcherProvider.shared.setter(uint64_t a1)
{
  if (qword_256AE3390 != -1)
    swift_once();
  swift_beginAccess();
  qword_256AE7060 = a1;
  return swift_release();
}

uint64_t (*static CanvasItemPlaceholderFetcherProvider.shared.modify())()
{
  if (qword_256AE3390 != -1)
    swift_once();
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t CanvasItemPlaceholderFetcherProvider.cacheProvider.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23BF8A1C0(v1 + 16, a1);
}

uint64_t CanvasItemPlaceholderFetcherProvider.deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return v0;
}

uint64_t CanvasItemPlaceholderFetcherProvider.__deallocating_deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocClassInstance();
}

void CanvasItemPlaceholderFetcherProvider.makeFetcher<A, B, C, D, E, F>(fetchItemForPlaceholders:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;
  _QWORD v25[6];

  v19 = v16[5];
  v18 = v16[6];
  __swift_project_boxed_opaque_existential_1(v16 + 2, v19);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 8))(v25, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, v19, v18);
  type metadata accessor for CanvasItemPlaceholderFetcher();
}

void sub_23BF898DC()
{
  swift_retain();
  sub_23BF90E3C();
}

uint64_t sub_23BF89900(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[296];

  swift_release();
  if (qword_256AE3380 != -1)
    swift_once();
  v4 = sub_23BFF83D4();
  __swift_project_value_buffer(v4, (uint64_t)qword_256B02400);
  sub_23BF8A1C0(v2 - 128, (uint64_t)v23);
  swift_retain();
  v5 = sub_23BFF83BC();
  v6 = sub_23BFF9694();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = swift_slowAlloc();
    v8 = swift_slowAlloc();
    v22 = v8;
    *(_DWORD *)v7 = 136315394;
    v9 = sub_23BF90A24();
    *(_QWORD *)(v2 - 240) = sub_23BF89B80(v9, v10, &v22);
    sub_23BFF96B8();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    sub_23BF8A1C0((uint64_t)v23, (uint64_t)&v21);
    *(_QWORD *)(v2 - 240) = v14;
    *(_QWORD *)(v2 - 232) = v16;
    *(_QWORD *)(v2 - 224) = v17;
    *(_QWORD *)(v2 - 216) = v18;
    *(_QWORD *)(v2 - 208) = v19;
    *(_QWORD *)(v2 - 200) = v20;
    swift_getExtendedExistentialTypeMetadata();
    v11 = sub_23BFF93D0();
    *(_QWORD *)(v2 - 240) = sub_23BF89B80(v11, v12, &v22);
    sub_23BFF96B8();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
    _os_log_impl(&dword_23BE9D000, v5, v6, "Making a new fetcher (%s) from %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x242615234](v8, -1, -1);
    MEMORY[0x242615234](v7, -1, -1);
  }
  else
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  }

  v15[3] = v1;
  v15[4] = MEMORY[0x242615198](&unk_23C005158, v1);
  *v15 = a1;
  return __swift_destroy_boxed_opaque_existential_1(v2 - 128);
}

void sub_23BF89B40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  CanvasItemPlaceholderFetcherProvider.makeFetcher<A, B, C, D, E, F>(fetchItemForPlaceholders:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t sub_23BF89B80(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = sub_23BF89C50(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_23BF50480((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x24BEE2520];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_23BF50480((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t sub_23BF89C50(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_23BFF96C4();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_23BF89E08(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = sub_23BFF9790();
  if (!v8)
  {
    sub_23BFF9814();
    __break(1u);
LABEL_17:
    result = sub_23BFF985C();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t sub_23BF89E08(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_23BF89E9C(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_23BF8A074(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_23BF8A074(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_23BF89E9C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = sub_23BF8A010(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = sub_23BFF9748();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      sub_23BFF9814();
      __break(1u);
LABEL_10:
      v2 = sub_23BFF940C();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    sub_23BFF985C();
    __break(1u);
LABEL_14:
    result = sub_23BFF9814();
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

_QWORD *sub_23BF8A010(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE7108);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_23BF8A074(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AE7108);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_23BFF985C();
  __break(1u);
  return result;
}

uint64_t sub_23BF8A1C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t dispatch thunk of CanvasItemPlaceholderFetcherProviding.makeFetcher<A, B, C, D, E, F>(fetchItemForPlaceholders:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  return (*(uint64_t (**)(void))(a18 + 8))();
}

uint64_t type metadata accessor for CanvasItemPlaceholderFetcherProvider()
{
  return objc_opt_self();
}

uint64_t method lookup function for CanvasItemPlaceholderFetcherProvider()
{
  return swift_lookUpClassMethod();
}

int *sub_23BF8A268@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v19;
  int *result;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a13 - 8) + 32))(a9, a1, a13);
  result = (int *)type metadata accessor for WideBrickView(0, a13, a14, v19);
  v21 = (_QWORD *)(a9 + result[10]);
  *v21 = a2;
  v21[1] = a3;
  v21[2] = a4;
  v21[3] = a5;
  v22 = (_QWORD *)(a9 + result[11]);
  *v22 = a6;
  v22[1] = a7;
  v22[2] = a8;
  v22[3] = a10;
  v23 = (_QWORD *)(a9 + result[9]);
  *v23 = a11;
  v23[1] = a12;
  return result;
}

uint64_t WideBrickView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD v65[2];
  _QWORD v66[3];

  v57 = a2;
  v4 = sub_23BFF8680();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x24BDED868];
  v6 = *(_QWORD *)(v4 - 8);
  v7 = v4;
  v46 = v4;
  v56 = v6;
  MEMORY[0x24BDAC7A8](v4);
  v9 = *(_QWORD *)(a1 - 8);
  v54 = *(_QWORD *)(v9 + 64);
  v55 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = *(_QWORD *)(a1 + 16);
  v13 = a1;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_256AE7118);
  swift_getTupleTypeMetadata2();
  v14 = sub_23BFF9220();
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v14);
  v15 = sub_23BFF859C();
  MEMORY[0x242615198](MEMORY[0x24BDEC6F8], v15);
  v16 = sub_23BFF90C4();
  v17 = sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3C28);
  v18 = sub_23BFF862C();
  v66[0] = MEMORY[0x242615198](MEMORY[0x24BDF4750], v16);
  v66[1] = MEMORY[0x24BDEEC40];
  v19 = MEMORY[0x24BDED308];
  v20 = MEMORY[0x242615198](MEMORY[0x24BDED308], v17, v66);
  v21 = sub_23BEA1F94(qword_256AE3C30, &qword_256AE3C28, MEMORY[0x24BDEB950]);
  v65[0] = v20;
  v65[1] = v21;
  v49 = v18;
  v50 = MEMORY[0x242615198](v19, v18, v65);
  v22 = sub_23BFF9040();
  v52 = *(_QWORD *)(v22 - 8);
  v23 = MEMORY[0x24BDAC7A8](v22);
  v48 = (char *)&v44 - v24;
  v25 = MEMORY[0x242615198](MEMORY[0x24BDF43B0], v22, v23);
  v45 = v25;
  v44 = sub_23BEA1BB8(&qword_256AE3558, v5, MEMORY[0x24BDED858]);
  v61 = v22;
  v62 = v7;
  v63 = v25;
  v64 = v44;
  v26 = MEMORY[0x24261512C](0, &v61, MEMORY[0x24BDF22B8], 0);
  v51 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v28 = (char *)&v44 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = MEMORY[0x24BDAC7A8](v29);
  v47 = (uint64_t)&v44 - v31;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16))(v12, v2, v13, v30);
  v32 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v33 = swift_allocObject();
  v34 = *(_QWORD *)(v13 + 24);
  v35 = v53;
  *(_QWORD *)(v33 + 16) = v53;
  *(_QWORD *)(v33 + 24) = v34;
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v33 + v32, v12, v13);
  v58 = v35;
  v59 = v34;
  v60 = v2;
  v36 = v48;
  sub_23BFF9034();
  v37 = v55;
  sub_23BFF8674();
  v38 = v46;
  v39 = v45;
  v40 = v44;
  sub_23BFF8CF8();
  (*(void (**)(char *, uint64_t))(v56 + 8))(v37, v38);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v36, v22);
  v61 = v22;
  v62 = v38;
  v63 = v39;
  v64 = v40;
  swift_getOpaqueTypeConformance2();
  v41 = v47;
  sub_23BEA72EC((uint64_t)v28, v26, v47);
  v42 = *(void (**)(char *, uint64_t))(v51 + 8);
  v42(v28, v26);
  sub_23BEA5C0C(v41, v26, v57);
  return ((uint64_t (*)(uint64_t, uint64_t))v42)(v41, v26);
}

uint64_t type metadata accessor for WideBrickView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WideBrickView);
}

uint64_t sub_23BF8A7B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = type metadata accessor for WideBrickView(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80);
  return (*(uint64_t (**)(void))(v4 + *(int *)(v5 + 36) + ((v6 + 32) & ~v6)))();
}

uint64_t sub_23BF8A7F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[2];
  _QWORD v40[2];
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  char v44;
  char v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  char v51;
  char v52;

  v33 = a3;
  v32 = a1;
  v35 = a4;
  v5 = sub_23BFF86BC();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (_OWORD *)((char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_256AE7118);
  swift_getTupleTypeMetadata2();
  v8 = sub_23BFF9220();
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v8);
  v9 = sub_23BFF859C();
  MEMORY[0x242615198](MEMORY[0x24BDEC6F8], v9);
  v10 = sub_23BFF90C4();
  v11 = sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3C28);
  v12 = sub_23BFF862C();
  v34 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v32 - v16;
  v36 = a2;
  v37 = v33;
  v38 = v32;
  sub_23BFF91C0();
  sub_23BFF90B8();
  v46 = v41;
  v47 = v42;
  v18 = MEMORY[0x242615198](MEMORY[0x24BDF4750], v10);
  sub_23BFF8CE0();
  swift_release();
  v41 = v48;
  v42 = v49;
  v43 = v50;
  v44 = v51;
  v45 = v52;
  v19 = (char *)v7 + *(int *)(v5 + 20);
  v20 = *MEMORY[0x24BDEEB68];
  v21 = sub_23BFF8854();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v19, v20, v21);
  __asm { FMOV            V0.2D, #8.0 }
  *v7 = _Q0;
  v40[0] = v18;
  v40[1] = MEMORY[0x24BDEEC40];
  v27 = MEMORY[0x24BDED308];
  v28 = MEMORY[0x242615198](MEMORY[0x24BDED308], v11, v40);
  sub_23BEA1BB8(&qword_256AE3CB8, (uint64_t (*)(uint64_t))MEMORY[0x24BDED998], MEMORY[0x24BDED990]);
  sub_23BFF8F44();
  sub_23BEC4004((uint64_t)v7);
  swift_release();
  v29 = sub_23BEA1F94(qword_256AE3C30, &qword_256AE3C28, MEMORY[0x24BDEB950]);
  v39[0] = v28;
  v39[1] = v29;
  MEMORY[0x242615198](v27, v12, v39);
  sub_23BEA72EC((uint64_t)v14, v12, (uint64_t)v17);
  v30 = *(void (**)(char *, uint64_t))(v34 + 8);
  v30(v14, v12);
  sub_23BEA5C0C((uint64_t)v17, v12, v35);
  return ((uint64_t (*)(char *, uint64_t))v30)(v17, v12);
}

uint64_t sub_23BF8AB80@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_23BF8A7F8(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_23BF8AB8C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23BF8ABC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v9 = type metadata accessor for WideBrickView(0, a2, a3, a4);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v20 - v12;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16))((char *)&v20 - v12, a1, v9, v11);
  v14 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = a2;
  *(_QWORD *)(v15 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v15 + v14, v13, v9);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_256AE7118);
  swift_getTupleTypeMetadata2();
  v16 = sub_23BFF9220();
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v16);
  v20 = sub_23BFF8590();
  v21 = v17;
  v18 = sub_23BFF859C();
  MEMORY[0x242615198](MEMORY[0x24BDEC6F8], v18);
  sub_23BEA72EC((uint64_t)&v20, v18, (uint64_t)v22);
  swift_release();
  v20 = v22[0];
  v21 = v22[1];
  sub_23BEA5C0C((uint64_t)&v20, v18, a5);
  return swift_release();
}

uint64_t sub_23BF8AD68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  void (*v34)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD v42[2];
  uint64_t v43[2];

  v38 = a1;
  v39 = a5;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE71A0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(qword_256AE7118);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v36 - v15;
  v17 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v36 - v22;
  v37 = a4;
  sub_23BEA72EC(a2, a3, (uint64_t)&v36 - v22);
  *(_QWORD *)v10 = sub_23BFF8848();
  *((_QWORD *)v10 + 1) = 0;
  v10[16] = 0;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE71A8);
  sub_23BF8AFEC(a2, a3, a4, (uint64_t)&v10[*(int *)(v24 + 44)]);
  LOBYTE(a2) = sub_23BFF8B60();
  sub_23BFF83F8();
  v26 = v25;
  v28 = v27;
  v30 = v29;
  v32 = v31;
  sub_23BE9F190((uint64_t)v10, (uint64_t)v13, &qword_256AE71A0);
  v33 = &v13[*(int *)(v11 + 36)];
  *v33 = a2;
  *((_QWORD *)v33 + 1) = v26;
  *((_QWORD *)v33 + 2) = v28;
  *((_QWORD *)v33 + 3) = v30;
  *((_QWORD *)v33 + 4) = v32;
  v33[40] = 0;
  sub_23BE9F3A0((uint64_t)v10, &qword_256AE71A0);
  sub_23BEC42E0((uint64_t)v13, (uint64_t)v16, qword_256AE7118);
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v20, v23, a3);
  v43[0] = (uint64_t)v20;
  sub_23BE9F190((uint64_t)v16, (uint64_t)v13, qword_256AE7118);
  v43[1] = (uint64_t)v13;
  v42[0] = a3;
  v42[1] = v11;
  v40 = v37;
  v41 = sub_23BF8C790();
  sub_23BF93EF0(v43, 2uLL, (uint64_t)v42);
  sub_23BE9F3A0((uint64_t)v16, qword_256AE7118);
  v34 = *(void (**)(char *, uint64_t))(v17 + 8);
  v34(v23, a3);
  sub_23BE9F3A0((uint64_t)v13, qword_256AE7118);
  return ((uint64_t (*)(char *, uint64_t))v34)(v20, a3);
}

uint64_t sub_23BF8AFEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  _OWORD v22[3];

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE71C0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE71C8);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)v22 - v15;
  *(_QWORD *)v10 = sub_23BFF88A8();
  *((_QWORD *)v10 + 1) = 0x4014000000000000;
  v10[16] = 0;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE71D0);
  sub_23BF8B1DC(a1, a2, a3, (uint64_t)&v10[*(int *)(v17 + 44)]);
  sub_23BFF84DC();
  sub_23BFF91C0();
  sub_23BFF84D0();
  sub_23BE9F190((uint64_t)v10, (uint64_t)v13, &qword_256AE71C0);
  v18 = &v13[*(int *)(v11 + 36)];
  v19 = v22[1];
  *(_OWORD *)v18 = v22[0];
  *((_OWORD *)v18 + 1) = v19;
  *((_OWORD *)v18 + 2) = v22[2];
  sub_23BE9F3A0((uint64_t)v10, &qword_256AE71C0);
  sub_23BEC42E0((uint64_t)v13, (uint64_t)v16, &qword_256AE71C8);
  sub_23BE9F190((uint64_t)v16, (uint64_t)v13, &qword_256AE71C8);
  sub_23BE9F190((uint64_t)v13, a4, &qword_256AE71C8);
  v20 = a4 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AE71D8) + 48);
  *(_QWORD *)v20 = 0;
  *(_BYTE *)(v20 + 8) = 0;
  sub_23BE9F3A0((uint64_t)v16, &qword_256AE71C8);
  return sub_23BE9F3A0((uint64_t)v13, &qword_256AE71C8);
}

uint64_t sub_23BF8B1DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3D00);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v25 - v12;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3D08);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v25 - v18;
  *(_QWORD *)v19 = sub_23BFF8848();
  *((_QWORD *)v19 + 1) = 0;
  v19[16] = 1;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3D10);
  sub_23BF8B3D4(a1, a2, a3, (uint64_t)&v19[*(int *)(v20 + 44)]);
  *(_QWORD *)v13 = sub_23BFF8848();
  *((_QWORD *)v13 + 1) = 0;
  v13[16] = 1;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3D18);
  sub_23BF8B740(a1, a2, a3, (uint64_t)&v13[*(int *)(v21 + 44)]);
  sub_23BE9F190((uint64_t)v19, (uint64_t)v16, &qword_256AE3D08);
  sub_23BE9F190((uint64_t)v13, (uint64_t)v10, &qword_256AE3D00);
  sub_23BE9F190((uint64_t)v16, a4, &qword_256AE3D08);
  v22 = __swift_instantiateConcreteTypeFromMangledName(qword_256AE71E0);
  sub_23BE9F190((uint64_t)v10, a4 + *(int *)(v22 + 48), &qword_256AE3D00);
  v23 = a4 + *(int *)(v22 + 64);
  *(_QWORD *)v23 = 0;
  *(_BYTE *)(v23 + 8) = 0;
  sub_23BE9F3A0((uint64_t)v13, &qword_256AE3D00);
  sub_23BE9F3A0((uint64_t)v19, &qword_256AE3D08);
  sub_23BE9F3A0((uint64_t)v10, &qword_256AE3D00);
  return sub_23BE9F3A0((uint64_t)v16, &qword_256AE3D08);
}

uint64_t sub_23BF8B3D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t KeyPath;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v41 = a4;
  v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3D28);
  MEMORY[0x24BDAC7A8](v38);
  v8 = (uint64_t *)((char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = sub_23BFF8C20();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3D30);
  MEMORY[0x24BDAC7A8](v36);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3D40);
  MEMORY[0x24BDAC7A8](v40);
  v37 = (uint64_t)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v39 = (uint64_t)&v32 - v17;
  v19 = (uint64_t *)(a1 + *(int *)(type metadata accessor for WideBrickView(0, a2, a3, v18) + 44));
  v20 = *v19;
  v21 = v19[1];
  v22 = v19[2];
  v23 = v19[3];
  sub_23BEA1DC0(*v19, v21, v22, v23);
  v35 = sub_23BFF8A10();
  KeyPath = swift_getKeyPath();
  v32 = swift_getKeyPath();
  v24 = *MEMORY[0x24BDF1CD0];
  v34 = v10;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 104))(v12, v24, v9);
  v25 = swift_getKeyPath();
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))((char *)v8 + *(int *)(v38 + 28), v12, v9);
  *v8 = v25;
  sub_23BE9F190((uint64_t)v8, (uint64_t)&v14[*(int *)(v36 + 36)], &qword_256AE3D28);
  *(_QWORD *)v14 = v20;
  *((_QWORD *)v14 + 1) = v21;
  *((_QWORD *)v14 + 2) = v22;
  *((_QWORD *)v14 + 3) = v23;
  *((_DWORD *)v14 + 8) = v35;
  v26 = v32;
  *((_QWORD *)v14 + 5) = KeyPath;
  *((_QWORD *)v14 + 6) = 3;
  v14[56] = 0;
  *((_QWORD *)v14 + 8) = v26;
  v14[72] = 0;
  sub_23BEA1DC0(v20, v21, v22, v23);
  swift_retain();
  swift_retain();
  sub_23BE9F3A0((uint64_t)v8, &qword_256AE3D28);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v12, v9);
  sub_23BEBF0A4(v20, v21, v22, v23);
  swift_release();
  swift_release();
  v27 = v37;
  sub_23BE9F190((uint64_t)v14, v37, &qword_256AE3D30);
  *(_QWORD *)(v27 + *(int *)(v40 + 36)) = 0x4000000000000000;
  sub_23BE9F3A0((uint64_t)v14, &qword_256AE3D30);
  v28 = v39;
  sub_23BEC42E0(v27, v39, &qword_256AE3D40);
  sub_23BE9F190(v28, v27, &qword_256AE3D40);
  v29 = v41;
  sub_23BE9F190(v27, v41, &qword_256AE3D40);
  v30 = v29 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AE3D48) + 48);
  *(_QWORD *)v30 = 0;
  *(_BYTE *)(v30 + 8) = 0;
  sub_23BE9F3A0(v28, &qword_256AE3D40);
  return sub_23BE9F3A0(v27, &qword_256AE3D40);
}

uint64_t sub_23BF8B740@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t KeyPath;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v39 = a4;
  v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3D28);
  MEMORY[0x24BDAC7A8](v37);
  v8 = (uint64_t *)((char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = sub_23BFF8C20();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3D30);
  MEMORY[0x24BDAC7A8](v36);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v38 = (uint64_t)&v32 - v16;
  v18 = (uint64_t *)(a1 + *(int *)(type metadata accessor for WideBrickView(0, a2, a3, v17) + 40));
  v20 = *v18;
  v19 = v18[1];
  v21 = v18[2];
  v22 = v18[3];
  sub_23BEA1DC0(*v18, v19, v21, v22);
  v35 = sub_23BFF8A10();
  KeyPath = swift_getKeyPath();
  v32 = swift_getKeyPath();
  v23 = *MEMORY[0x24BDF1CD0];
  v34 = v10;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 104))(v12, v23, v9);
  v24 = swift_getKeyPath();
  v25 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v26 = v9;
  v25((char *)v8 + *(int *)(v37 + 28), v12, v9);
  *v8 = v24;
  sub_23BE9F190((uint64_t)v8, (uint64_t)&v14[*(int *)(v36 + 36)], &qword_256AE3D28);
  *(_QWORD *)v14 = v20;
  *((_QWORD *)v14 + 1) = v19;
  *((_QWORD *)v14 + 2) = v21;
  *((_QWORD *)v14 + 3) = v22;
  *((_DWORD *)v14 + 8) = v35;
  v27 = v32;
  *((_QWORD *)v14 + 5) = KeyPath;
  *((_QWORD *)v14 + 6) = 2;
  v14[56] = 0;
  *((_QWORD *)v14 + 8) = v27;
  v14[72] = 0;
  sub_23BEA1DC0(v20, v19, v21, v22);
  swift_retain();
  swift_retain();
  sub_23BE9F3A0((uint64_t)v8, &qword_256AE3D28);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v12, v26);
  sub_23BEBF0A4(v20, v19, v21, v22);
  swift_release();
  swift_release();
  v28 = v38;
  sub_23BEC42E0((uint64_t)v14, v38, &qword_256AE3D30);
  sub_23BE9F190(v28, (uint64_t)v14, &qword_256AE3D30);
  v29 = v39;
  sub_23BE9F190((uint64_t)v14, v39, &qword_256AE3D30);
  v30 = v29 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AE3D38) + 48);
  *(_QWORD *)v30 = 0;
  *(_BYTE *)(v30 + 8) = 0;
  sub_23BE9F3A0(v28, &qword_256AE3D30);
  return sub_23BE9F3A0((uint64_t)v14, &qword_256AE3D30);
}

uint64_t sub_23BF8BA3C()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_23BF8BAC0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int128 v25;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 32 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v11 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = ((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8;
    v14 = ((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8;
    v15 = *(_QWORD *)(v14 + 24);
    swift_retain();
    if (v15 < 0xFFFFFFFF)
    {
      v19 = *(_OWORD *)(v14 + 16);
      *(_OWORD *)v13 = *(_OWORD *)v14;
      *(_OWORD *)(v13 + 16) = v19;
    }
    else
    {
      v16 = *(_QWORD *)v14;
      v17 = *(_QWORD *)(v14 + 8);
      v18 = *(_BYTE *)(v14 + 16);
      sub_23BEA0EAC(*(_QWORD *)v14, v17, v18);
      *(_QWORD *)v13 = v16;
      *(_QWORD *)(v13 + 8) = v17;
      *(_BYTE *)(v13 + 16) = v18;
      *(_QWORD *)(v13 + 24) = *(_QWORD *)(v14 + 24);
      swift_bridgeObjectRetain();
    }
    v20 = (v13 + 39) & 0xFFFFFFFFFFFFFFF8;
    v21 = (v14 + 39) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)(v21 + 24) < 0xFFFFFFFFuLL)
    {
      v25 = *(_OWORD *)(v21 + 16);
      *(_OWORD *)v20 = *(_OWORD *)v21;
      *(_OWORD *)(v20 + 16) = v25;
    }
    else
    {
      v22 = *(_QWORD *)v21;
      v23 = *(_QWORD *)(v21 + 8);
      v24 = *(_BYTE *)(v21 + 16);
      sub_23BEA0EAC(*(_QWORD *)v21, v23, v24);
      *(_QWORD *)v20 = v22;
      *(_QWORD *)(v20 + 8) = v23;
      *(_BYTE *)(v20 + 16) = v24;
      *(_QWORD *)(v20 + 24) = *(_QWORD *)(v21 + 24);
      swift_bridgeObjectRetain();
    }
  }
  return v4;
}

uint64_t sub_23BF8BC3C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  unint64_t v6;
  unint64_t v7;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = (a1 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  result = swift_release();
  v6 = (v4 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v6 + 24) >= 0xFFFFFFFFuLL)
  {
    sub_23BEA0F64(*(_QWORD *)v6, *(_QWORD *)(v6 + 8), *(_BYTE *)(v6 + 16));
    result = swift_bridgeObjectRelease();
  }
  v7 = (v6 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v7 + 24) >= 0xFFFFFFFFuLL)
  {
    sub_23BEA0F64(*(_QWORD *)v7, *(_QWORD *)(v7 + 8), *(_BYTE *)(v7 + 16));
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_23BF8BCE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int128 v22;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  v10 = ((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  v11 = ((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  v12 = *(_QWORD *)(v11 + 24);
  swift_retain();
  if (v12 < 0xFFFFFFFF)
  {
    v16 = *(_OWORD *)(v11 + 16);
    *(_OWORD *)v10 = *(_OWORD *)v11;
    *(_OWORD *)(v10 + 16) = v16;
  }
  else
  {
    v13 = *(_QWORD *)v11;
    v14 = *(_QWORD *)(v11 + 8);
    v15 = *(_BYTE *)(v11 + 16);
    sub_23BEA0EAC(*(_QWORD *)v11, v14, v15);
    *(_QWORD *)v10 = v13;
    *(_QWORD *)(v10 + 8) = v14;
    *(_BYTE *)(v10 + 16) = v15;
    *(_QWORD *)(v10 + 24) = *(_QWORD *)(v11 + 24);
    swift_bridgeObjectRetain();
  }
  v17 = (v10 + 39) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v11 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v18 + 24) < 0xFFFFFFFFuLL)
  {
    v22 = *(_OWORD *)(v18 + 16);
    *(_OWORD *)v17 = *(_OWORD *)v18;
    *(_OWORD *)(v17 + 16) = v22;
  }
  else
  {
    v19 = *(_QWORD *)v18;
    v20 = *(_QWORD *)(v18 + 8);
    v21 = *(_BYTE *)(v18 + 16);
    sub_23BEA0EAC(*(_QWORD *)v18, v20, v21);
    *(_QWORD *)v17 = v19;
    *(_QWORD *)(v17 + 8) = v20;
    *(_BYTE *)(v17 + 16) = v21;
    *(_QWORD *)(v17 + 24) = *(_QWORD *)(v18 + 24);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_23BF8BDF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  __int128 v35;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  v10 = ((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  v11 = ((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  v12 = *(_QWORD *)(v11 + 24);
  if (*(_QWORD *)(v10 + 24) < 0xFFFFFFFFuLL)
  {
    if (v12 >= 0xFFFFFFFF)
    {
      v19 = *(_QWORD *)v11;
      v20 = *(_QWORD *)(v11 + 8);
      v21 = *(_BYTE *)(v11 + 16);
      sub_23BEA0EAC(*(_QWORD *)v11, v20, v21);
      *(_QWORD *)v10 = v19;
      *(_QWORD *)(v10 + 8) = v20;
      *(_BYTE *)(v10 + 16) = v21;
      *(_QWORD *)(v10 + 24) = *(_QWORD *)(v11 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
  }
  else
  {
    if (v12 >= 0xFFFFFFFF)
    {
      v13 = *(_QWORD *)v11;
      v14 = *(_QWORD *)(v11 + 8);
      v15 = *(_BYTE *)(v11 + 16);
      sub_23BEA0EAC(*(_QWORD *)v11, v14, v15);
      v16 = *(_QWORD *)v10;
      v17 = *(_QWORD *)(v10 + 8);
      v18 = *(_BYTE *)(v10 + 16);
      *(_QWORD *)v10 = v13;
      *(_QWORD *)(v10 + 8) = v14;
      *(_BYTE *)(v10 + 16) = v15;
      sub_23BEA0F64(v16, v17, v18);
      *(_QWORD *)(v10 + 24) = *(_QWORD *)(v11 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    sub_23BEA0F64(*(_QWORD *)v10, *(_QWORD *)(v10 + 8), *(_BYTE *)(v10 + 16));
    swift_bridgeObjectRelease();
  }
  v22 = *(_OWORD *)(v11 + 16);
  *(_OWORD *)v10 = *(_OWORD *)v11;
  *(_OWORD *)(v10 + 16) = v22;
LABEL_8:
  v23 = (v10 + 39) & 0xFFFFFFFFFFFFFFF8;
  v24 = (v11 + 39) & 0xFFFFFFFFFFFFFFF8;
  v25 = *(_QWORD *)(v24 + 24);
  if (*(_QWORD *)(v23 + 24) < 0xFFFFFFFFuLL)
  {
    if (v25 >= 0xFFFFFFFF)
    {
      v32 = *(_QWORD *)v24;
      v33 = *(_QWORD *)(v24 + 8);
      v34 = *(_BYTE *)(v24 + 16);
      sub_23BEA0EAC(*(_QWORD *)v24, v33, v34);
      *(_QWORD *)v23 = v32;
      *(_QWORD *)(v23 + 8) = v33;
      *(_BYTE *)(v23 + 16) = v34;
      *(_QWORD *)(v23 + 24) = *(_QWORD *)(v24 + 24);
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_14:
    v35 = *(_OWORD *)(v24 + 16);
    *(_OWORD *)v23 = *(_OWORD *)v24;
    *(_OWORD *)(v23 + 16) = v35;
    return a1;
  }
  if (v25 < 0xFFFFFFFF)
  {
    sub_23BEA0F64(*(_QWORD *)v23, *(_QWORD *)(v23 + 8), *(_BYTE *)(v23 + 16));
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  v26 = *(_QWORD *)v24;
  v27 = *(_QWORD *)(v24 + 8);
  v28 = *(_BYTE *)(v24 + 16);
  sub_23BEA0EAC(*(_QWORD *)v24, v27, v28);
  v29 = *(_QWORD *)v23;
  v30 = *(_QWORD *)(v23 + 8);
  v31 = *(_BYTE *)(v23 + 16);
  *(_QWORD *)v23 = v26;
  *(_QWORD *)(v23 + 8) = v27;
  *(_BYTE *)(v23 + 16) = v28;
  sub_23BEA0F64(v29, v30, v31);
  *(_QWORD *)(v23 + 24) = *(_QWORD *)(v24 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23BF8C00C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  _OWORD *v10;
  __int128 v11;
  _OWORD *v12;
  _OWORD *v13;
  __int128 v14;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = v6 + a1;
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v7 &= 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)v7 = *v8;
  v9 = (_OWORD *)((v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_OWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = (_OWORD *)(((unint64_t)v9 + 39) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_OWORD *)(((unint64_t)v10 + 39) & 0xFFFFFFFFFFFFFFF8);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  return a1;
}

uint64_t sub_23BF8C090(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __int128 v23;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = v6 + a2;
  v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 23;
  *v7 = *(_OWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  v10 = ((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  v11 = v9 & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v10 + 24) >= 0xFFFFFFFFuLL)
  {
    if (*(_QWORD *)(v11 + 24) >= 0xFFFFFFFFuLL)
    {
      v12 = *(_BYTE *)(v11 + 16);
      v13 = *(_QWORD *)v10;
      v14 = *(_QWORD *)(v10 + 8);
      v15 = *(_BYTE *)(v10 + 16);
      *(_OWORD *)v10 = *(_OWORD *)v11;
      *(_BYTE *)(v10 + 16) = v12;
      sub_23BEA0F64(v13, v14, v15);
      *(_QWORD *)(v10 + 24) = *(_QWORD *)(v11 + 24);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_23BEA0F64(*(_QWORD *)v10, *(_QWORD *)(v10 + 8), *(_BYTE *)(v10 + 16));
    swift_bridgeObjectRelease();
  }
  v16 = *(_OWORD *)(v11 + 16);
  *(_OWORD *)v10 = *(_OWORD *)v11;
  *(_OWORD *)(v10 + 16) = v16;
LABEL_6:
  v17 = (v10 + 39) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v11 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v17 + 24) < 0xFFFFFFFFuLL)
  {
LABEL_10:
    v23 = *(_OWORD *)(v18 + 16);
    *(_OWORD *)v17 = *(_OWORD *)v18;
    *(_OWORD *)(v17 + 16) = v23;
    return a1;
  }
  if (*(_QWORD *)(v18 + 24) < 0xFFFFFFFFuLL)
  {
    sub_23BEA0F64(*(_QWORD *)v17, *(_QWORD *)(v17 + 8), *(_BYTE *)(v17 + 16));
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  v19 = *(_BYTE *)(v18 + 16);
  v20 = *(_QWORD *)v17;
  v21 = *(_QWORD *)(v17 + 8);
  v22 = *(_BYTE *)(v17 + 16);
  *(_OWORD *)v17 = *(_OWORD *)v18;
  *(_BYTE *)(v17 + 16) = v19;
  sub_23BEA0F64(v20, v21, v22);
  *(_QWORD *)(v17 + 24) = *(_QWORD *)(v18 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23BF8C1E8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 32) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_23BF8C274 + 4 * byte_23C004C78[v10]))();
  }
}

void sub_23BF8C2F8(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 39) & 0xFFFFFFF8) == 0xFFFFFFE0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 39) & 0xFFFFFFF8) != 0xFFFFFFE0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8)+ 32);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_23BF8C3FC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x23BF8C474);
}

void sub_23BF8C404(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x23BF8C40CLL);
  JUMPOUT(0x23BF8C474);
}

void sub_23BF8C44C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x23BF8C474);
}

void sub_23BF8C454()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x23BF8C474);
}

uint64_t sub_23BF8C45C(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x23BF8C474);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x23BF8C470);
    JUMPOUT(0x23BF8C468);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t sub_23BF8C48C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  _QWORD v9[2];
  _QWORD v10[2];

  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_256AE7118);
  swift_getTupleTypeMetadata2();
  v0 = sub_23BFF9220();
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v0);
  v1 = sub_23BFF859C();
  MEMORY[0x242615198](MEMORY[0x24BDEC6F8], v1);
  v2 = sub_23BFF90C4();
  v3 = sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3C28);
  v4 = sub_23BFF862C();
  v10[0] = MEMORY[0x242615198](MEMORY[0x24BDF4750], v2);
  v10[1] = MEMORY[0x24BDEEC40];
  v5 = MEMORY[0x24BDED308];
  v9[0] = MEMORY[0x242615198](MEMORY[0x24BDED308], v3, v10);
  v9[1] = sub_23BEA1F94(qword_256AE3C30, &qword_256AE3C28, MEMORY[0x24BDEB950]);
  MEMORY[0x242615198](v5, v4, v9);
  v6 = sub_23BFF9040();
  sub_23BFF8680();
  v7 = (uint64_t (*)(uint64_t))MEMORY[0x24BDED868];
  MEMORY[0x242615198](MEMORY[0x24BDF43B0], v6);
  sub_23BEA1BB8(&qword_256AE3558, v7, MEMORY[0x24BDED858]);
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23BF8C644@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_23BF8ABC0(v2[4], v2[2], v2[3], a1, a2);
}

uint64_t objectdestroyTm_9(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for WideBrickView(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80);
  v8 = v4 + ((v7 + 32) & ~v7);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v8, v5);
  swift_release();
  v9 = v8 + *(int *)(v6 + 40);
  if (*(_QWORD *)(v9 + 24))
  {
    sub_23BEA0F64(*(_QWORD *)v9, *(_QWORD *)(v9 + 8), *(_BYTE *)(v9 + 16));
    swift_bridgeObjectRelease();
  }
  v10 = v8 + *(int *)(v6 + 44);
  if (*(_QWORD *)(v10 + 24))
  {
    sub_23BEA0F64(*(_QWORD *)v10, *(_QWORD *)(v10 + 8), *(_BYTE *)(v10 + 16));
    swift_bridgeObjectRelease();
  }
  return swift_deallocObject();
}

uint64_t sub_23BF8C728@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for WideBrickView(0, v6, v7, a2) - 8) + 80);
  return sub_23BF8AD68(a1, v3 + ((v8 + 32) & ~v8), v6, v7, a3);
}

unint64_t sub_23BF8C790()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AE71B0;
  if (!qword_256AE71B0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_256AE7118);
    v2[0] = sub_23BEA1F94(&qword_256AE71B8, &qword_256AE71A0, MEMORY[0x24BDF4498]);
    v2[1] = MEMORY[0x24BDECC60];
    result = MEMORY[0x242615198](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AE71B0);
  }
  return result;
}

uint64_t sub_23BF8C824()
{
  return sub_23BFF8728();
}

uint64_t sub_23BF8C844()
{
  return sub_23BFF8728();
}

uint64_t sub_23BF8C864(uint64_t a1)
{
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = sub_23BFF8C20();
  v3 = MEMORY[0x24BDAC7A8](v2);
  (*(void (**)(char *, uint64_t, __n128))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  return sub_23BFF8734();
}

void CanvasSectionHeader.init(title:subtitle:action:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = sub_23BFF82CC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  type metadata accessor for CanvasSectionHeader();
}

uint64_t sub_23BF8C954(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = v3 + *(int *)(a1 + 52);
  v6 = sub_23BFF96A0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v5, v2, v6);
  v7 = v3 + *(int *)(a1 + 56);
  v8 = sub_23BFF96A0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v7, v1, v8);
}

void type metadata accessor for CanvasSectionHeader()
{
  JUMPOUT(0x2426150F0);
}

uint64_t CanvasSectionHeader.title.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_23BFF82CC();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t CanvasSectionHeader.subtitle.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 52);
  v5 = sub_23BFF96A0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t CanvasSectionHeader.action.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 56);
  v5 = sub_23BFF96A0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_23BF8CA98(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656C746974 && a2 == 0xE500000000000000;
  if (v2 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C746974627573 && a2 == 0xE800000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E6F69746361 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_23BFF9964();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_23BF8CBDC(char a1)
{
  if (!a1)
    return 0x656C746974;
  if (a1 == 1)
    return 0x656C746974627573;
  return 0x6E6F69746361;
}

BOOL sub_23BF8CC2C(char *a1, char *a2)
{
  return sub_23BEAAB9C(*a1, *a2);
}

uint64_t sub_23BF8CC44()
{
  return sub_23BEAADE0();
}

uint64_t sub_23BF8CC54()
{
  return sub_23BEAABAC();
}

uint64_t sub_23BF8CC64()
{
  sub_23BFF99D0();
  sub_23BEAABAC();
  return sub_23BFF9A00();
}

uint64_t sub_23BF8CCAC()
{
  char *v0;

  return sub_23BF8CBDC(*v0);
}

uint64_t sub_23BF8CCBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BF8CA98(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BF8CCEC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23BEFF718();
  *a1 = result;
  return result;
}

uint64_t sub_23BF8CD1C(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23C004FA0, a1);
  return sub_23BFF9A30();
}

uint64_t sub_23BF8CD50(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23C004FA0, a1);
  return sub_23BFF9A3C();
}

void CanvasSectionHeader.encode(to:)()
{
  type metadata accessor for CanvasSectionHeader.CodingKeys();
}

uint64_t sub_23BF8CDD8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  MEMORY[0x242615198](&unk_23C004FA0, a1);
  v3 = sub_23BFF994C();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - v5;
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  sub_23BFF9A18();
  *(_BYTE *)(v2 - 112) = 0;
  sub_23BFF82CC();
  sub_23BEF247C(&qword_256AE4650, MEMORY[0x24BDCC5B8]);
  v7 = *(_QWORD *)(v2 - 72);
  sub_23BFF9940();
  if (!v7)
  {
    *(_BYTE *)(v2 - 112) = 1;
    sub_23BFF9904();
    *(_BYTE *)(v2 - 112) = 2;
    sub_23BFF9904();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void type metadata accessor for CanvasSectionHeader.CodingKeys()
{
  JUMPOUT(0x2426150F0);
}

void CanvasSectionHeader.init(from:)(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[9];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v13[2] = a5;
  v9 = sub_23BFF96A0();
  v13[3] = *(_QWORD *)(v9 - 8);
  v13[4] = v9;
  MEMORY[0x24BDAC7A8](v9);
  v13[6] = (char *)v13 - v10;
  v14 = sub_23BFF96A0();
  v16 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v13[8] = (char *)v13 - v11;
  v18 = sub_23BFF82CC();
  v15 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v17 = (char *)v13 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = a1;
  v20 = a2;
  v21 = a3;
  v22 = a4;
  type metadata accessor for CanvasSectionHeader.CodingKeys();
}

void sub_23BF8D05C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  MEMORY[0x242615198](&unk_23C004FA0, a1);
  v6 = sub_23BFF98E0();
  *(_QWORD *)(v5 - 144) = v6;
  *(_QWORD *)(v5 - 184) = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  *(_QWORD *)(v5 - 216) = v1;
  *(_QWORD *)(v5 - 120) = v1;
  *(_QWORD *)(v5 - 112) = v4;
  *(_QWORD *)(v5 - 168) = v4;
  *(_QWORD *)(v5 - 160) = v3;
  *(_QWORD *)(v5 - 232) = v2;
  *(_QWORD *)(v5 - 104) = v2;
  *(_QWORD *)(v5 - 96) = v3;
  type metadata accessor for CanvasSectionHeader();
}

uint64_t sub_23BF8D0D4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v14 - v6;
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  *(_QWORD *)(v3 - 128) = v1;
  v8 = *(_QWORD *)(v3 - 72);
  sub_23BFF9A0C();
  if (v8)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  *(_QWORD *)(v3 - 264) = v5;
  v9 = *(_QWORD *)(v3 - 176);
  *(_QWORD *)(v3 - 72) = v2;
  *(_BYTE *)(v3 - 120) = 0;
  sub_23BEF247C(&qword_256AE4678, MEMORY[0x24BDCC5D0]);
  sub_23BFF98C8();
  (*(void (**)(char *, _QWORD, _QWORD))(*(_QWORD *)(v3 - 192) + 32))(v7, *(_QWORD *)(v3 - 152), *(_QWORD *)(v3 - 136));
  *(_BYTE *)(v3 - 120) = 1;
  v10 = *(_QWORD *)(v3 - 208);
  sub_23BFF988C();
  (*(void (**)(char *, uint64_t, _QWORD))(v9 + 32))(&v7[*(int *)(a1 + 52)], v10, *(_QWORD *)(v3 - 200));
  *(_BYTE *)(v3 - 120) = 2;
  v11 = *(_QWORD *)(v3 - 224);
  sub_23BFF988C();
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v3 - 184) + 8))(*(_QWORD *)(v3 - 128), *(_QWORD *)(v3 - 144));
  (*(void (**)(char *, uint64_t, _QWORD))(*(_QWORD *)(v3 - 248) + 32))(&v7[*(int *)(a1 + 56)], v11, *(_QWORD *)(v3 - 240));
  v12 = *(_QWORD *)(v3 - 264);
  (*(void (**)(_QWORD, char *, uint64_t))(v12 + 16))(*(_QWORD *)(v3 - 256), v7, a1);
  __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v3 - 72));
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v7, a1);
}

void sub_23BF8D364(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  CanvasSectionHeader.init(from:)(a1[2], a1[3], a1[4], a1[5], a2);
}

void sub_23BF8D384()
{
  CanvasSectionHeader.encode(to:)();
}

uint64_t CanvasSectionHeader.hash(into:)()
{
  sub_23BFF82CC();
  sub_23BEF247C(&qword_256AE46A0, MEMORY[0x24BDCC5C0]);
  sub_23BFF9388();
  sub_23BFF96A0();
  sub_23BFF96AC();
  sub_23BFF96A0();
  return sub_23BFF96AC();
}

uint64_t static CanvasSectionHeader.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _QWORD v31[16];
  uint64_t TupleTypeMetadata2;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v35 = a5;
  v36 = a6;
  v40 = a2;
  v31[13] = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v31[9] = (char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = v8;
  v9 = sub_23BFF96A0();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v31[11] = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v10 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v31[14] = (char *)v31 - v11;
  v31[12] = *(_QWORD *)(v9 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v31[10] = (char *)v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v31[15] = (char *)v31 - v15;
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)v31 - v17;
  v38 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)v31 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = a4;
  v21 = sub_23BFF96A0();
  v22 = swift_getTupleTypeMetadata2();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = MEMORY[0x24BDAC7A8](v22);
  v33 = (char *)v31 - v25;
  v39 = *(_QWORD *)(v21 - 8);
  v26 = MEMORY[0x24BDAC7A8](v24);
  v28 = (char *)v31 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = MEMORY[0x24BDAC7A8](v26);
  MEMORY[0x24BDAC7A8](v29);
  if ((sub_23BFF826C() & 1) != 0)
  {
    v31[5] = v28;
    v31[2] = v20;
    v31[8] = v23;
    v31[7] = v18;
    v31[4] = v9;
    v41 = v37;
    v42 = v34;
    v43 = v35;
    v44 = v36;
    type metadata accessor for CanvasSectionHeader();
  }
  return 0;
}

uint64_t CanvasSectionHeader.hashValue.getter()
{
  sub_23BFF99D0();
  CanvasSectionHeader.hash(into:)();
  return sub_23BFF9A00();
}

uint64_t sub_23BF8DB34()
{
  sub_23BFF99D0();
  CanvasSectionHeader.hash(into:)();
  return sub_23BFF9A00();
}

uint64_t sub_23BF8DB74(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return static CanvasSectionHeader.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], a3[5]);
}

void sub_23BF8DB84()
{
  JUMPOUT(0x242615198);
}

uint64_t sub_23BF8DB94()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = sub_23BFF82CC();
  if (v1 <= 0x3F)
  {
    result = sub_23BFF96A0();
    if (v2 <= 0x3F)
    {
      result = sub_23BFF96A0();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t *sub_23BF8DC3C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v20;
  uint64_t v21;
  const void *v22;
  void *v23;
  const void *v24;
  size_t __n;
  uint64_t v27;
  uint64_t v28;

  v6 = sub_23BFF82CC();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(a3 + 24);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = *(_QWORD *)(v7 + 64) + v10;
  if (*(_DWORD *)(v9 + 84))
    v12 = *(_QWORD *)(v9 + 64);
  else
    v12 = *(_QWORD *)(v9 + 64) + 1;
  v13 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v14 = *(_DWORD *)(v13 + 80);
  v15 = v12 + v14;
  v16 = *(_QWORD *)(v13 + 64);
  if (!*(_DWORD *)(v13 + 84))
    ++v16;
  v17 = (*(_BYTE *)(v9 + 80) | *(_BYTE *)(v7 + 80) | *(_BYTE *)(v13 + 80));
  if (v17 <= 7
    && v16 + ((v12 + v14 + (v11 & ~v10)) & ~v14) <= 0x18
    && ((*(_DWORD *)(v9 + 80) | *(_DWORD *)(v7 + 80) | *(_DWORD *)(v13 + 80)) & 0x100000) == 0)
  {
    v28 = *(_QWORD *)(a3 + 16);
    v21 = ~v10;
    __n = v16;
    v27 = ~v14;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
    v22 = (const void *)(((unint64_t)a2 + v11) & v21);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v22, 1, v8))
    {
      memcpy((void *)(((unint64_t)a1 + v11) & v21), v22, v12);
    }
    else
    {
      (*(void (**)(unint64_t, const void *, uint64_t))(v9 + 16))(((unint64_t)a1 + v11) & v21, v22, v8);
      (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(((unint64_t)a1 + v11) & v21, 0, 1, v8);
    }
    v23 = (void *)((v15 + (((unint64_t)a1 + v11) & v21)) & v27);
    v24 = (const void *)(((unint64_t)v22 + v15) & v27);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v24, 1, v28))
    {
      memcpy(v23, v24, __n);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(v23, v24, v28);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v23, 0, 1, v28);
    }
  }
  else
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v17 + 16) & ~v17));
    swift_retain();
  }
  return a1;
}

uint64_t sub_23BF8DE20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  v4 = sub_23BFF82CC();
  v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v6 = *(_QWORD *)(v5 + 64) + a1;
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = (v6 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(v9, 1, v7))
    (*(void (**)(unint64_t, uint64_t))(v8 + 8))(v9, v7);
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v8 + 64) + v9;
  if (!*(_DWORD *)(v8 + 84))
    ++v12;
  v13 = (v12 + *(unsigned __int8 *)(v11 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v11 + 48))(v13, 1, v10);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v11 + 8))(v13, v10);
  return result;
}

uint64_t sub_23BF8DF04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  int v14;
  size_t v15;
  size_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const void *v23;
  size_t v24;

  v6 = sub_23BFF82CC();
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, a2, v6);
  v8 = *(_QWORD *)(a3 + 24);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v7 + 64) + v10;
  v12 = (void *)((v11 + a1) & ~v10);
  v13 = (const void *)((v11 + a2) & ~v10);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8))
  {
    v14 = *(_DWORD *)(v9 + 84);
    v15 = *(_QWORD *)(v9 + 64);
    if (v14)
      v16 = v15;
    else
      v16 = v15 + 1;
    memcpy(v12, v13, v16);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v12, v13, v8);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v12, 0, 1, v8);
    v14 = *(_DWORD *)(v9 + 84);
    v15 = *(_QWORD *)(v9 + 64);
  }
  if (v14)
    v17 = v15;
  else
    v17 = v15 + 1;
  v18 = *(_QWORD *)(a3 + 16);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  v21 = v17 + v20;
  v22 = (void *)(((unint64_t)v12 + v21) & ~v20);
  v23 = (const void *)(((unint64_t)v13 + v21) & ~v20);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48))(v23, 1, v18))
  {
    if (*(_DWORD *)(v19 + 84))
      v24 = *(_QWORD *)(v19 + 64);
    else
      v24 = *(_QWORD *)(v19 + 64) + 1;
    memcpy(v22, v23, v24);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v19 + 16))(v22, v23, v18);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v22, 0, 1, v18);
  }
  return a1;
}

uint64_t sub_23BF8E078(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t (*v14)(void *, uint64_t, uint64_t);
  int v15;
  int v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t (*v25)(void *, uint64_t, uint64_t);
  int v26;
  int v27;
  size_t v28;

  v6 = sub_23BFF82CC();
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24))(a1, a2, v6);
  v8 = *(_QWORD *)(a3 + 24);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v7 + 64) + v10;
  v12 = (void *)((v11 + a1) & ~v10);
  v13 = (void *)((v11 + a2) & ~v10);
  v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v9 + 48);
  v15 = v14(v12, 1, v8);
  v16 = v14(v13, 1, v8);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 16))(v12, v13, v8);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v12, 0, 1, v8);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 24))(v12, v13, v8);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(v12, v8);
  }
  if (*(_DWORD *)(v9 + 84))
    v17 = *(_QWORD *)(v9 + 64);
  else
    v17 = *(_QWORD *)(v9 + 64) + 1;
  memcpy(v12, v13, v17);
LABEL_10:
  if (*(_DWORD *)(v9 + 84))
    v18 = *(_QWORD *)(v9 + 64);
  else
    v18 = *(_QWORD *)(v9 + 64) + 1;
  v19 = *(_QWORD *)(a3 + 16);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(unsigned __int8 *)(v20 + 80);
  v22 = v18 + v21;
  v23 = (void *)(((unint64_t)v12 + v22) & ~v21);
  v24 = (void *)(((unint64_t)v13 + v22) & ~v21);
  v25 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v20 + 48);
  v26 = v25(v23, 1, v19);
  v27 = v25(v24, 1, v19);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(void *, void *, uint64_t))(v20 + 16))(v23, v24, v19);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v23, 0, 1, v19);
      return a1;
    }
  }
  else
  {
    if (!v27)
    {
      (*(void (**)(void *, void *, uint64_t))(v20 + 24))(v23, v24, v19);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v20 + 8))(v23, v19);
  }
  if (*(_DWORD *)(v20 + 84))
    v28 = *(_QWORD *)(v20 + 64);
  else
    v28 = *(_QWORD *)(v20 + 64) + 1;
  memcpy(v23, v24, v28);
  return a1;
}

uint64_t sub_23BF8E27C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  int v14;
  size_t v15;
  size_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const void *v23;
  size_t v24;

  v6 = sub_23BFF82CC();
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(a1, a2, v6);
  v8 = *(_QWORD *)(a3 + 24);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v7 + 64) + v10;
  v12 = (void *)((v11 + a1) & ~v10);
  v13 = (const void *)((v11 + a2) & ~v10);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8))
  {
    v14 = *(_DWORD *)(v9 + 84);
    v15 = *(_QWORD *)(v9 + 64);
    if (v14)
      v16 = v15;
    else
      v16 = v15 + 1;
    memcpy(v12, v13, v16);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(v12, v13, v8);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v12, 0, 1, v8);
    v14 = *(_DWORD *)(v9 + 84);
    v15 = *(_QWORD *)(v9 + 64);
  }
  if (v14)
    v17 = v15;
  else
    v17 = v15 + 1;
  v18 = *(_QWORD *)(a3 + 16);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  v21 = v17 + v20;
  v22 = (void *)(((unint64_t)v12 + v21) & ~v20);
  v23 = (const void *)(((unint64_t)v13 + v21) & ~v20);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48))(v23, 1, v18))
  {
    if (*(_DWORD *)(v19 + 84))
      v24 = *(_QWORD *)(v19 + 64);
    else
      v24 = *(_QWORD *)(v19 + 64) + 1;
    memcpy(v22, v23, v24);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v19 + 32))(v22, v23, v18);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v22, 0, 1, v18);
  }
  return a1;
}

uint64_t sub_23BF8E3F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t (*v14)(void *, uint64_t, uint64_t);
  int v15;
  int v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t (*v25)(void *, uint64_t, uint64_t);
  int v26;
  int v27;
  size_t v28;

  v6 = sub_23BFF82CC();
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40))(a1, a2, v6);
  v8 = *(_QWORD *)(a3 + 24);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v7 + 64) + v10;
  v12 = (void *)((v11 + a1) & ~v10);
  v13 = (void *)((v11 + a2) & ~v10);
  v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v9 + 48);
  v15 = v14(v12, 1, v8);
  v16 = v14(v13, 1, v8);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 32))(v12, v13, v8);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v12, 0, 1, v8);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 40))(v12, v13, v8);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(v12, v8);
  }
  if (*(_DWORD *)(v9 + 84))
    v17 = *(_QWORD *)(v9 + 64);
  else
    v17 = *(_QWORD *)(v9 + 64) + 1;
  memcpy(v12, v13, v17);
LABEL_10:
  if (*(_DWORD *)(v9 + 84))
    v18 = *(_QWORD *)(v9 + 64);
  else
    v18 = *(_QWORD *)(v9 + 64) + 1;
  v19 = *(_QWORD *)(a3 + 16);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(unsigned __int8 *)(v20 + 80);
  v22 = v18 + v21;
  v23 = (void *)(((unint64_t)v12 + v22) & ~v21);
  v24 = (void *)(((unint64_t)v13 + v22) & ~v21);
  v25 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v20 + 48);
  v26 = v25(v23, 1, v19);
  v27 = v25(v24, 1, v19);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(void *, void *, uint64_t))(v20 + 32))(v23, v24, v19);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v23, 0, 1, v19);
      return a1;
    }
  }
  else
  {
    if (!v27)
    {
      (*(void (**)(void *, void *, uint64_t))(v20 + 40))(v23, v24, v19);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v20 + 8))(v23, v19);
  }
  if (*(_DWORD *)(v20 + 84))
    v28 = *(_QWORD *)(v20 + 64);
  else
    v28 = *(_QWORD *)(v20 + 64) + 1;
  memcpy(v23, v24, v28);
  return a1;
}

uint64_t sub_23BF8E5F4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  uint64_t v26;
  unsigned int v27;

  v6 = *(_QWORD *)(sub_23BFF82CC() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(_DWORD *)(v8 + 84);
  if (v9)
    v10 = v9 - 1;
  else
    v10 = 0;
  if (v10 <= v7)
    v11 = *(_DWORD *)(v6 + 84);
  else
    v11 = v10;
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v13 = *(_DWORD *)(v12 + 84);
  v14 = v13 - 1;
  if (!v13)
    v14 = 0;
  if (v14 > v11)
    v11 = v14;
  v15 = *(_QWORD *)(v8 + 64);
  if (!v9)
    ++v15;
  if (v13)
    v16 = *(_QWORD *)(v12 + 64);
  else
    v16 = *(_QWORD *)(v12 + 64) + 1;
  if (!a2)
    return 0;
  v17 = *(unsigned __int8 *)(v8 + 80);
  v18 = *(_QWORD *)(v6 + 64) + v17;
  v19 = *(unsigned __int8 *)(v12 + 80);
  if (a2 <= v11)
    goto LABEL_35;
  v20 = v16 + ((v15 + v19 + (v18 & ~v17)) & ~v19);
  v21 = 8 * v20;
  if (v20 <= 3)
  {
    v23 = ((a2 - v11 + ~(-1 << v21)) >> v21) + 1;
    if (HIWORD(v23))
    {
      v22 = *(_DWORD *)(a1 + v20);
      if (!v22)
        goto LABEL_35;
      goto LABEL_26;
    }
    if (v23 > 0xFF)
    {
      v22 = *(unsigned __int16 *)(a1 + v20);
      if (!*(_WORD *)(a1 + v20))
        goto LABEL_35;
      goto LABEL_26;
    }
    if (v23 < 2)
    {
LABEL_35:
      if (v11)
      {
        if (v7 == v11)
          return (*(uint64_t (**)(uint64_t))(v6 + 48))(a1);
        v26 = (v18 + a1) & ~v17;
        if (v10 == v11)
          v27 = (*(uint64_t (**)(uint64_t, _QWORD))(v8 + 48))(v26, *(unsigned int *)(v8 + 84));
        else
          v27 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v12 + 48))((v26 + v15 + v19) & ~v19, *(unsigned int *)(v12 + 84), *(_QWORD *)(a3 + 16));
        if (v27 >= 2)
          return v27 - 1;
        else
          return 0;
      }
      return 0;
    }
  }
  v22 = *(unsigned __int8 *)(a1 + v20);
  if (!*(_BYTE *)(a1 + v20))
    goto LABEL_35;
LABEL_26:
  v24 = (v22 - 1) << v21;
  if (v20 > 3)
    v24 = 0;
  if ((_DWORD)v20)
  {
    if (v20 <= 3)
      v25 = v20;
    else
      v25 = 4;
    __asm { BR              X11 }
  }
  return v11 + v24 + 1;
}

void sub_23BF8E804(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  int v24;

  v8 = 0;
  v9 = *(_QWORD *)(sub_23BFF82CC() - 8);
  v10 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v11 = *(_DWORD *)(v10 + 84);
  if (v11)
    v12 = v11 - 1;
  else
    v12 = 0;
  if (v12 <= *(_DWORD *)(v9 + 84))
    v13 = *(_DWORD *)(v9 + 84);
  else
    v13 = v12;
  v14 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v15 = *(_DWORD *)(v14 + 84);
  v16 = v15 - 1;
  if (!v15)
    v16 = 0;
  if (v16 > v13)
    v13 = v16;
  if (v11)
    v17 = *(_QWORD *)(v10 + 64);
  else
    v17 = *(_QWORD *)(v10 + 64) + 1;
  v18 = *(unsigned __int8 *)(v10 + 80);
  v19 = *(unsigned __int8 *)(v14 + 80);
  v20 = *(_QWORD *)(v14 + 64);
  if (!v15)
    ++v20;
  v21 = ((v17 + v19 + ((*(_QWORD *)(v9 + 64) + v18) & ~v18)) & ~v19) + v20;
  if (a3 > v13)
  {
    if (v21 > 3)
    {
      v8 = 1u;
      if (v13 >= a2)
LABEL_32:
        __asm { BR              X24 }
LABEL_25:
      v23 = ~v13 + a2;
      if (v21 < 4)
      {
        if ((_DWORD)v21)
        {
          v24 = v23 & ~(-1 << (8 * v21));
          bzero(a1, ((v17 + v19 + ((*(_QWORD *)(v9 + 64) + v18) & ~v18)) & ~v19) + v20);
          if ((_DWORD)v21 == 3)
          {
            *(_WORD *)a1 = v24;
            a1[2] = BYTE2(v24);
          }
          else if ((_DWORD)v21 == 2)
          {
            *(_WORD *)a1 = v24;
          }
          else
          {
            *a1 = v24;
          }
        }
      }
      else
      {
        bzero(a1, ((v17 + v19 + ((*(_QWORD *)(v9 + 64) + v18) & ~v18)) & ~v19) + v20);
        *(_DWORD *)a1 = v23;
      }
      __asm { BR              X10 }
    }
    v22 = ((a3 - v13 + ~(-1 << (8 * v21))) >> (8 * v21)) + 1;
    if (HIWORD(v22))
    {
      v8 = 4u;
      if (v13 >= a2)
        goto LABEL_32;
      goto LABEL_25;
    }
    if (v22 >= 0x100)
      v8 = 2;
    else
      v8 = v22 > 1;
  }
  if (v13 >= a2)
    goto LABEL_32;
  goto LABEL_25;
}

void sub_23BF8EAAC()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
}

void sub_23BF8EAB4()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
}

void sub_23BF8EB00()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_23BF8EB10()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_23BF8EB18()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

uint64_t sub_23BF8EB24(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23BF8EB70 + 4 * byte_23C004DC7[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23BF8EBA4 + 4 * byte_23C004DC2[v4]))();
}

uint64_t sub_23BF8EBA4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BF8EBAC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BF8EBB4);
  return result;
}

uint64_t sub_23BF8EBC0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BF8EBC8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23BF8EBCC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BF8EBD4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void sub_23BF8EBE0()
{
  JUMPOUT(0x242615198);
}

void sub_23BF8EBF0()
{
  JUMPOUT(0x242615198);
}

void sub_23BF8EC00()
{
  JUMPOUT(0x242615198);
}

uint64_t dispatch thunk of CanvasItemPlaceholderFetching.fetchPlaceholders(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a3 + 120) + *(_QWORD *)(a3 + 120));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_23BF8EC88;
  return v9(a1, a2, a3);
}

uint64_t sub_23BF8EC88()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t dispatch thunk of CanvasItemPlaceholderFetching.invalidatePlaceholders(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a3 + 128) + *(_QWORD *)(a3 + 128));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_23BF90EBC;
  return v9(a1, a2, a3);
}

uint64_t dispatch thunk of CanvasItemPlaceholderFetching.transformResolvedItems<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v13;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a6 + 136)
                                                                                     + *(_QWORD *)(a6 + 136));
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v13;
  *v13 = v6;
  v13[1] = sub_23BF90EBC;
  return v15(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_23BF8EDEC()
{
  return swift_initClassMetadata2();
}

uint64_t sub_23BF8EE44(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  void (*v24)(char *, _QWORD);
  void (*v25)(char *);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, char *);
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char v43[32];
  uint64_t v44;

  v30 = a5;
  v31 = a8;
  v38 = a1;
  v39 = a2;
  v29 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v40 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v13 = (char *)&v29 - v12;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = swift_getAssociatedTypeWitness();
  v32 = *(_QWORD *)(v17 - 8);
  v33 = v17;
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v29 - v18;
  v20 = sub_23BFF9610();
  if (!v20)
    return sub_23BFF9490();
  v36 = AssociatedTypeWitness;
  v21 = v20;
  v44 = sub_23BFF97C0();
  v34 = sub_23BFF97CC();
  sub_23BFF97A8();
  v37 = v8;
  result = sub_23BFF9604();
  if ((v21 & 0x8000000000000000) == 0)
  {
    v23 = v21;
    v35 = v16;
    while (v23)
    {
      v41 = v23;
      v24 = (void (*)(char *, _QWORD))sub_23BFF9658();
      v25 = *(void (**)(char *))(v11 + 16);
      v26 = v11;
      v27 = v36;
      v25(v13);
      v24(v43, 0);
      v28 = v42;
      v38(v13, v40);
      if (v28)
      {
        (*(void (**)(char *, uint64_t))(v26 + 8))(v13, v27);
        (*(void (**)(char *, uint64_t))(v32 + 8))(v19, v33);
        swift_release();
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v29 + 32))(v31, v40, v30);
      }
      v42 = 0;
      (*(void (**)(char *, uint64_t))(v26 + 8))(v13, v27);
      sub_23BFF97B4();
      result = sub_23BFF9628();
      v23 = v41 - 1;
      v11 = v26;
      if (v41 == 1)
      {
        (*(void (**)(char *, uint64_t))(v32 + 8))(v19, v33);
        return v44;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_23BF8F134()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[19];
  v2 = v0[20];
  __swift_project_boxed_opaque_existential_1(v0 + 16, v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 128))(v1, v2);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 16));
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_23BF8F1A4()
{
  sub_23BF8F134();
  return swift_defaultActor_deallocate();
}

void type metadata accessor for CanvasItemPlaceholderFetcher()
{
  JUMPOUT(0x2426150F0);
}

uint64_t sub_23BF8F1C8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23BF8F1D4()
{
  return sub_23BF8F1C8();
}

uint64_t sub_23BF8F1EC(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v2[49] = a1;
  v2[50] = v1;
  v2[51] = *v1;
  return swift_task_switch();
}

uint64_t sub_23BF8F20C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(_QWORD, uint64_t, uint64_t);

  v1 = (_QWORD *)v0[50];
  v2 = v1[19];
  v3 = v1[20];
  __swift_project_boxed_opaque_existential_1(v1 + 16, v2);
  v6 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(**(int **)(v3 + 144) + *(_QWORD *)(v3 + 144));
  v4 = (_QWORD *)swift_task_alloc();
  v0[52] = v4;
  *v4 = v0;
  v4[1] = sub_23BF8F290;
  return v6(v0[49], v2, v3);
}

uint64_t sub_23BF8F290(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 424) = a1;
  *(_QWORD *)(v3 + 432) = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23BF8F2FC()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD *v10;
  uint64_t (*v12)(_QWORD);
  uint64_t v13;

  if (qword_256AE3380 != -1)
    swift_once();
  v1 = sub_23BFF83D4();
  *(_QWORD *)(v0 + 440) = __swift_project_value_buffer(v1, (uint64_t)qword_256B02400);
  swift_bridgeObjectRetain_n();
  swift_retain();
  v2 = sub_23BFF83BC();
  v3 = sub_23BFF9694();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *(_QWORD *)(v0 + 408);
    v5 = swift_slowAlloc();
    v13 = swift_slowAlloc();
    *(_DWORD *)v5 = 136446466;
    v6 = sub_23BF90A24();
    *(_QWORD *)(v0 + 368) = sub_23BF89B80(v6, v7, &v13);
    sub_23BFF96B8();
    swift_bridgeObjectRelease();
    swift_release();
    *(_WORD *)(v5 + 12) = 2048;
    v8 = *(_QWORD *)(v4 + 168);
    v9 = *(_OWORD *)(v4 + 152);
    *(_QWORD *)(v0 + 128) = *(_QWORD *)(v4 + 104);
    *(_OWORD *)(v0 + 136) = v9;
    *(_QWORD *)(v0 + 152) = v8;
    type metadata accessor for CanvasItemPlaceholder();
  }
  swift_bridgeObjectRelease_n();
  swift_release();

  v12 = (uint64_t (*)(_QWORD))(**(int **)(*(_QWORD *)(v0 + 400) + 112)
                                       + *(_QWORD *)(*(_QWORD *)(v0 + 400) + 112));
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 448) = v10;
  *v10 = v0;
  v10[1] = sub_23BF8F584;
  return v12(*(_QWORD *)(v0 + 424));
}

uint64_t sub_23BF8F584(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 456) = a1;
  *(_QWORD *)(v3 + 464) = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

void sub_23BF8F5F0()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = (_QWORD *)v0[51];
  v0[32] = v0[49];
  v2 = (_QWORD *)swift_task_alloc();
  v17 = v1[10];
  v0[59] = v17;
  v2[2] = v17;
  v12 = v1[11];
  v0[60] = v12;
  v2[3] = v12;
  v11 = v1[12];
  v0[61] = v11;
  v2[4] = v11;
  v3 = v1[13];
  v0[62] = v3;
  v2[5] = v3;
  v10 = v1[14];
  v0[63] = v10;
  v2[6] = v10;
  v9 = v1[15];
  v0[64] = v9;
  v2[7] = v9;
  v8 = v1[16];
  v0[65] = v8;
  v2[8] = v8;
  v16 = v1[17];
  v0[66] = v16;
  v2[9] = v16;
  v15 = v1[18];
  v0[67] = v15;
  v2[10] = v15;
  v4 = v1[19];
  v0[68] = v4;
  v2[11] = v4;
  v5 = v4;
  v6 = v1[20];
  v0[69] = v6;
  v2[12] = v6;
  v7 = v1[21];
  v0[70] = v7;
  v2[13] = v7;
  v14 = v1[22];
  v0[71] = v14;
  v2[14] = v14;
  v13 = v1[23];
  v0[72] = v13;
  v2[15] = v13;
  v0[24] = v3;
  v0[25] = v5;
  v0[26] = v6;
  v0[27] = v7;
  type metadata accessor for CanvasItemPlaceholder();
}

void sub_23BF8F73C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t TupleTypeMetadata2;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v26[73] = a1;
  v31 = MEMORY[0x242615198](&protocol conformance descriptor for CanvasItemPlaceholder<A>, a1);
  *(_QWORD *)(v30 - 104) = v31;
  v26[74] = v31;
  v32 = sub_23BFF95E0();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v34 = MEMORY[0x242615198](MEMORY[0x24BEE1728], v32);
  v36 = sub_23BF8EE44((void (*)(char *, char *))sub_23BF90C30, v27, v32, TupleTypeMetadata2, MEMORY[0x24BEE4078], v34, MEMORY[0x24BEE40A8], v35);
  swift_task_dealloc();
  v26[34] = v36;
  v37 = sub_23BFF94C0();
  MEMORY[0x242615198](MEMORY[0x24BEE12C8], v37);
  v39 = sub_23BFF9304();
  v26[2] = *(_QWORD *)(v30 - 112);
  v26[75] = v39;
  v26[36] = a20;
  v26[3] = a19;
  v26[4] = a18;
  v26[5] = v28;
  v26[6] = a17;
  v26[7] = a16;
  v26[8] = a14;
  v38 = *(_QWORD *)(v30 - 128);
  v26[9] = *(_QWORD *)(v30 - 120);
  v26[10] = v38;
  v26[11] = a24;
  v26[12] = a23;
  v26[13] = v29;
  v26[14] = a26;
  v26[15] = a25;
  type metadata accessor for CanvasItemDescriptor();
}

uint64_t sub_23BF8F8A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v5[36] = sub_23BFF92EC();
  v11 = (_QWORD *)swift_task_alloc();
  v11[2] = *(_QWORD *)(v9 - 112);
  v11[3] = v6;
  v11[4] = v3;
  v11[5] = v29;
  v11[6] = v8;
  v11[7] = v7;
  v12 = *(_QWORD *)(v9 - 120);
  v11[8] = v2;
  v11[9] = v12;
  v11[10] = *(_QWORD *)(v9 - 128);
  v11[11] = v33;
  v11[12] = v32;
  v11[13] = v28;
  v11[14] = v35;
  v11[15] = v34;
  v11[16] = v30;
  MEMORY[0x242615198](&protocol conformance descriptor for CanvasItemDescriptor<A, B, C, D, E, F>, a1);
  v13 = sub_23BFF95E0();
  v5[74] = v13;
  *(_QWORD *)(v9 - 112) = v1;
  sub_23BFF934C();
  v5[75] = MEMORY[0x242615198](MEMORY[0x24BEE1718], v13);
  sub_23BFF9448();
  v5[76] = v31;
  swift_task_dealloc();
  v14 = v5[33];
  v5[77] = v14;
  swift_bridgeObjectRetain_n();
  swift_retain();
  v15 = sub_23BFF83BC();
  v16 = sub_23BFF9694();
  if (os_log_type_enabled(v15, v16))
  {
    *(_QWORD *)(v9 - 128) = v4 + 44;
    v17 = swift_slowAlloc();
    v18 = swift_slowAlloc();
    *(_QWORD *)(v9 - 120) = v18;
    *(_QWORD *)(v9 - 96) = v18;
    *(_DWORD *)v17 = 136446466;
    v19 = sub_23BF90A24();
    v4[44] = sub_23BF89B80(v19, v20, (uint64_t *)(v9 - 96));
    sub_23BFF96B8();
    swift_bridgeObjectRelease();
    swift_release();
    *(_WORD *)(v17 + 12) = 2048;
    v21 = sub_23BFF931C();
    swift_bridgeObjectRelease();
    v4[45] = v21;
    sub_23BFF96B8();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23BE9D000, v15, v16, "%{public}s registering %ld resolved items(s)", (uint8_t *)v17, 0x16u);
    v22 = *(_QWORD *)(v9 - 120);
    swift_arrayDestroy();
    MEMORY[0x242615234](v22, -1, -1);
    MEMORY[0x242615234](v17, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_release();
  }

  v23 = (_QWORD *)v4[50];
  v24 = v23[19];
  v25 = v23[20];
  __swift_project_boxed_opaque_existential_1(v23 + 16, v24);
  *(_QWORD *)(v9 - 104) = **(int **)(v25 + 152) + *(_QWORD *)(v25 + 152);
  v26 = (_QWORD *)swift_task_alloc();
  v4[80] = v26;
  *v26 = v4;
  v26[1] = sub_23BF8FB94;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 - 104))(v14, v24, v25);
}

uint64_t sub_23BF8FB94()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_23BF8FBF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28[2];

  v1 = *(_QWORD *)(v0 + 600);
  *(_QWORD *)(v0 + 312) = *(_QWORD *)(v0 + 456);
  v2 = swift_task_alloc();
  v3 = *(_OWORD *)(v0 + 488);
  v4 = *(_OWORD *)(v0 + 504);
  v5 = *(_OWORD *)(v0 + 520);
  v6 = *(_OWORD *)(v0 + 536);
  v7 = *(_OWORD *)(v0 + 552);
  v8 = *(_OWORD *)(v0 + 568);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 472);
  *(_OWORD *)(v2 + 32) = v3;
  *(_OWORD *)(v2 + 48) = v4;
  *(_OWORD *)(v2 + 64) = v5;
  *(_OWORD *)(v2 + 80) = v6;
  *(_OWORD *)(v2 + 96) = v7;
  *(_OWORD *)(v2 + 112) = v8;
  *(_QWORD *)(v2 + 128) = v1;
  v9 = sub_23BFF9430();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  *(_QWORD *)(v0 + 320) = v9;
  v10 = sub_23BFF94C0();
  MEMORY[0x242615198](MEMORY[0x24BEE12C8], v10);
  v11 = sub_23BFF9568();
  *(_QWORD *)(v0 + 648) = v11;
  swift_bridgeObjectRelease();
  if (sub_23BFF9580() >= 1)
  {
    swift_bridgeObjectRetain_n();
    swift_retain();
    v12 = sub_23BFF83BC();
    v13 = sub_23BFF967C();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = swift_slowAlloc();
      v26 = swift_slowAlloc();
      v28[0] = v26;
      *(_DWORD *)v14 = 136446722;
      v15 = sub_23BF90A24();
      *(_QWORD *)(v0 + 328) = sub_23BF89B80(v15, v16, v28);
      sub_23BFF96B8();
      swift_bridgeObjectRelease();
      swift_release();
      *(_WORD *)(v14 + 12) = 2048;
      v17 = sub_23BFF9580();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 336) = v17;
      sub_23BFF96B8();
      swift_bridgeObjectRelease();
      *(_WORD *)(v14 + 22) = 2080;
      v18 = sub_23BFF9550();
      v20 = v19;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 344) = sub_23BF89B80(v18, v20, v28);
      sub_23BFF96B8();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23BE9D000, v12, v13, "%{public}s Unexpected missing placeholders (%ld) in fetchItemsForPlaceholders response: %s", (uint8_t *)v14, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x242615234](v26, -1, -1);
      MEMORY[0x242615234](v14, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_release();
    }

  }
  v21 = *(_QWORD **)(v0 + 400);
  v22 = v21[19];
  v23 = v21[20];
  __swift_project_boxed_opaque_existential_1(v21 + 16, v22);
  v27 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(v23 + 136) + *(_QWORD *)(v23 + 136));
  v24 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 656) = v24;
  *v24 = v0;
  v24[1] = sub_23BF8FF90;
  return v27(v11, v22, v23);
}

uint64_t sub_23BF8FF90()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_23BF8FFE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 432);
  *(_QWORD *)(v0 + 376) = v1;
  MEMORY[0x242615090](v1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE7440);
  if (!swift_dynamicCast())
    goto LABEL_6;
  v2 = *(_QWORD *)(v0 + 224);
  v3 = *(_QWORD *)(v0 + 232);
  v4 = *(_QWORD *)(v0 + 240);
  if (*(_BYTE *)(v0 + 248) == 1)
    goto LABEL_6;
  if (v2 < 1)
  {
    sub_23BF90BEC();
    swift_allocError();
    *(_QWORD *)v6 = v2;
    *(_QWORD *)(v6 + 8) = v3;
    *(_QWORD *)(v6 + 16) = v4;
    *(_BYTE *)(v6 + 24) = 0;
    swift_willThrow();
    MEMORY[0x242615084](v1);
LABEL_6:
    MEMORY[0x242615084](*(_QWORD *)(v0 + 376));
    v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5();
  }
  MEMORY[0x242615084](v1);
  MEMORY[0x242615084](*(_QWORD *)(v0 + 376));
  v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_23BF900E4()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t (*v13)(_QWORD, uint64_t, uint64_t);
  uint64_t v14;

  swift_bridgeObjectRetain_n();
  swift_retain();
  v1 = sub_23BFF83BC();
  v2 = sub_23BFF967C();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = *(_QWORD *)(v0 + 408);
    v4 = swift_slowAlloc();
    v14 = swift_slowAlloc();
    *(_DWORD *)v4 = 136446466;
    v5 = sub_23BF90A24();
    *(_QWORD *)(v0 + 296) = sub_23BF89B80(v5, v6, &v14);
    sub_23BFF96B8();
    swift_bridgeObjectRelease();
    swift_release();
    *(_QWORD *)(v0 + 160) = *(_QWORD *)(v3 + 104);
    *(_WORD *)(v4 + 12) = 2048;
    v7 = *(_QWORD *)(v3 + 168);
    *(_OWORD *)(v0 + 168) = *(_OWORD *)(v3 + 152);
    *(_QWORD *)(v0 + 184) = v7;
    type metadata accessor for CanvasItemPlaceholder();
  }
  swift_bridgeObjectRelease_n();
  swift_release();

  v8 = *(_QWORD **)(v0 + 400);
  v9 = v8[19];
  v10 = v8[20];
  __swift_project_boxed_opaque_existential_1(v8 + 16, v9);
  v13 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(**(int **)(v10 + 160) + *(_QWORD *)(v10 + 160));
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 664) = v11;
  *v11 = v0;
  v11[1] = sub_23BF90338;
  return v13(*(_QWORD *)(v0 + 424), v9, v10);
}

uint64_t sub_23BF90338()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_23BF9039C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v6;

  swift_willThrow();
  v1 = *(_QWORD *)(v0 + 464);
  *(_QWORD *)(v0 + 376) = v1;
  MEMORY[0x242615090](v1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE7440);
  if (!swift_dynamicCast())
    goto LABEL_6;
  v2 = *(_QWORD *)(v0 + 224);
  v3 = *(_QWORD *)(v0 + 232);
  v4 = *(_QWORD *)(v0 + 240);
  if (*(_BYTE *)(v0 + 248) == 1)
    goto LABEL_6;
  if (v2 < 1)
  {
    sub_23BF90BEC();
    swift_allocError();
    *(_QWORD *)v6 = v2;
    *(_QWORD *)(v6 + 8) = v3;
    *(_QWORD *)(v6 + 16) = v4;
    *(_BYTE *)(v6 + 24) = 0;
    swift_willThrow();
    MEMORY[0x242615084](v1);
LABEL_6:
    MEMORY[0x242615084](*(_QWORD *)(v0 + 376));
    v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5();
  }
  MEMORY[0x242615084](v1);
  MEMORY[0x242615084](*(_QWORD *)(v0 + 376));
  v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

void sub_23BF904A0()
{
  type metadata accessor for CanvasItemDescriptor();
}

void sub_23BF90510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)(v13 - 232) = a1;
  v14 = sub_23BFF96A0();
  MEMORY[0x24BDAC7A8](v14);
  *(_QWORD *)(v13 - 240) = (char *)&a9 - v15;
  *(_QWORD *)(v13 - 200) = v11;
  *(_QWORD *)(v13 - 192) = v10;
  *(_QWORD *)(v13 - 184) = v9;
  *(_QWORD *)(v13 - 176) = v12;
  type metadata accessor for CanvasItemPlaceholder();
}

uint64_t sub_23BF90560(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[96];

  v5 = sub_23BFF96A0();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v21[-v7];
  v9 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = &v21[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = &v21[-v15];
  MEMORY[0x242614700](*(_QWORD *)(v3 - 72), *(_QWORD *)(v3 - 216), v1, a1, v2, v14);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v9 + 48))(v8, 1, a1) == 1)
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v9 + 32))(v16, v8, a1);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v9 + 16))(v12, v16, a1);
  v19 = *(_QWORD *)(v3 - 240);
  v18 = *(_QWORD *)(v3 - 232);
  v20 = *(_QWORD *)(v18 - 8);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v20 + 16))(v19, *(_QWORD *)(v3 - 72), v18);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v20 + 56))(v19, 0, 1, v18);
  MEMORY[0x242615198](&protocol conformance descriptor for CanvasItemPlaceholder<A>, a1);
  sub_23BFF934C();
  sub_23BFF9370();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v9 + 8))(v16, a1);
}

uint64_t sub_23BF906F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return swift_task_switch();
}

uint64_t sub_23BF90714()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t);

  v1 = (_QWORD *)v0[6];
  v2 = v1[19];
  v3 = v1[20];
  __swift_project_boxed_opaque_existential_1(v1 + 16, v2);
  v6 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(**(int **)(v3 + 184)
                                                                                + *(_QWORD *)(v3 + 184));
  v4 = (_QWORD *)swift_task_alloc();
  v0[7] = v4;
  *v4 = v0;
  v4[1] = sub_23BF9079C;
  return v6(v0[2], v0[3], v0[4], v0[5], v2, v3);
}

uint64_t sub_23BF9079C()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_23BF907E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t sub_23BF907FC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(_QWORD, uint64_t, uint64_t);

  v1 = (_QWORD *)v0[3];
  v2 = v1[19];
  v3 = v1[20];
  __swift_project_boxed_opaque_existential_1(v1 + 16, v2);
  v6 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(**(int **)(v3 + 176) + *(_QWORD *)(v3 + 176));
  v4 = (_QWORD *)swift_task_alloc();
  v0[4] = v4;
  *v4 = v0;
  v4[1] = sub_23BF90880;
  return v6(v0[2], v2, v3);
}

uint64_t sub_23BF90880()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_23BF908CC(uint64_t a1)
{
  _QWORD **v1;
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;

  v4 = *v1;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_23BF8EC88;
  v5[49] = a1;
  v5[50] = v4;
  v5[51] = *v4;
  return swift_task_switch();
}

uint64_t sub_23BF90938(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *v1;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_23BF90EBC;
  v5[2] = a1;
  v5[3] = v4;
  return swift_task_switch();
}

uint64_t sub_23BF9099C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v10;
  _QWORD *v11;

  v10 = *v4;
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = sub_23BF90EBC;
  v11[5] = a4;
  v11[6] = v10;
  v11[3] = a2;
  v11[4] = a3;
  v11[2] = a1;
  return swift_task_switch();
}

uint64_t sub_23BF90A24()
{
  sub_23BFF973C();
  sub_23BFF9400();
  sub_23BFF9A54();
  sub_23BFF9400();
  swift_bridgeObjectRelease();
  sub_23BFF9400();
  sub_23BFF9A54();
  sub_23BFF9400();
  swift_bridgeObjectRelease();
  sub_23BFF9400();
  sub_23BFF9A54();
  sub_23BFF9400();
  swift_bridgeObjectRelease();
  sub_23BFF9400();
  sub_23BFF9A54();
  sub_23BFF9400();
  swift_bridgeObjectRelease();
  sub_23BFF9400();
  sub_23BFF9A54();
  sub_23BFF9400();
  swift_bridgeObjectRelease();
  sub_23BFF9400();
  sub_23BFF93D0();
  sub_23BFF9400();
  swift_bridgeObjectRelease();
  sub_23BFF9400();
  return 0;
}

uint64_t sub_23BF90BBC()
{
  return sub_23BF90A24();
}

uint64_t sub_23BF90BDC(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 176);
}

uint64_t sub_23BF90BE4(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 184);
}

unint64_t sub_23BF90BEC()
{
  unint64_t result;

  result = qword_256AE7448[0];
  if (!qword_256AE7448[0])
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for CanvasLazyFetcherError, &type metadata for CanvasLazyFetcherError);
    atomic_store(result, qword_256AE7448);
  }
  return result;
}

void sub_23BF90C30()
{
  type metadata accessor for CanvasItemPlaceholder();
}

uint64_t sub_23BF90C78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = v2 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(v2, v1, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v5, v1, a1);
}

void sub_23BF90CE8()
{
  sub_23BF904A0();
}

void sub_23BF90D30()
{
  type metadata accessor for CanvasItemPlaceholder();
}

uint64_t sub_23BF90D7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return MEMORY[0x242614700](v1, v4, v2, a1, v3);
}

_QWORD *sub_23BF90DB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v4 = v3;
  swift_defaultActor_initialize();
  sub_23BF8A1C0(a1, (uint64_t)(v4 + 16));
  v4[14] = a2;
  v4[15] = a3;
  v8 = v4[19];
  v9 = v4[20];
  __swift_project_boxed_opaque_existential_1(v4 + 16, v8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 120);
  swift_retain();
  v10(v8, v9);
  return v4;
}

void sub_23BF90E3C()
{
  type metadata accessor for CanvasItemPlaceholderFetcher();
}

_QWORD *sub_23BF90E88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_allocObject();
  return sub_23BF90DB4(v2, v1, v0);
}

uint64_t sub_23BF90EC0()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_23BFF96A0();
  if (v1 <= 0x3F)
  {
    result = sub_23BFF96A0();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unint64_t sub_23BF90F70(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void *v19;
  const void *v20;
  unsigned int (*v21)(const void *, uint64_t, uint64_t);
  void *v22;
  const void *v23;
  size_t __n;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (*(_DWORD *)(v4 + 84))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v4 + 64) + 1;
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  if (!*(_DWORD *)(v7 + 84))
    ++v9;
  if ((v8 | v5) > 7
    || ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v4 + 80)) & 0x100000) != 0
    || v9 + ((v6 + v8 + ((v5 + 48) & ~v5)) & ~v8) > 0x18)
  {
    v12 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v13 = v12 + (((v8 | v5) & 0xF8 ^ 0x1F8) & ((v8 | v5) + 16));
    swift_retain();
  }
  else
  {
    v28 = *(_QWORD *)(a3 + 16);
    __n = v9;
    v26 = ~v8;
    v27 = *(_QWORD *)(a3 + 24);
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
    v14 = ((a1 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
    v15 = ((a2 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
    v16 = *(_QWORD *)v15;
    v17 = *(_QWORD *)(v15 + 8);
    v18 = *(_BYTE *)(v15 + 16);
    sub_23BEA0EAC(*(_QWORD *)v15, v17, v18);
    *(_QWORD *)v14 = v16;
    *(_QWORD *)(v14 + 8) = v17;
    *(_BYTE *)(v14 + 16) = v18;
    *(_QWORD *)(v14 + 24) = *(_QWORD *)(v15 + 24);
    v19 = (void *)((v14 + v5 + 32) & ~v5);
    v20 = (const void *)((v15 + v5 + 32) & ~v5);
    v21 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v4 + 48);
    swift_bridgeObjectRetain();
    if (v21(v20, 1, v27))
    {
      memcpy(v19, v20, v6);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v4 + 16))(v19, v20, v27);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v19, 0, 1, v27);
    }
    v22 = (void *)(((unint64_t)v19 + v6 + v8) & v26);
    v23 = (const void *)(((unint64_t)v20 + v6 + v8) & v26);
    v13 = a1;
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v23, 1, v28))
    {
      memcpy(v22, v23, __n);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v22, v23, v28);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v22, 0, 1, v28);
    }
  }
  return v13;
}

uint64_t sub_23BF911A0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t result;

  v3 = ((a1 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  sub_23BEA0F64(*(_QWORD *)v3, *(_QWORD *)(v3 + 8), *(_BYTE *)(v3 + 16));
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = (v3 + *(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4))
    (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v6, v4);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v5 + 64) + v6;
  if (!*(_DWORD *)(v5 + 84))
    ++v9;
  v10 = (v9 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(v10, 1, v7);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v8 + 8))(v10, v7);
  return result;
}

unint64_t sub_23BF91280(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  unsigned int (*v15)(const void *, uint64_t, uint64_t);
  int v16;
  size_t v17;
  size_t v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const void *v25;
  size_t v26;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  v5 = ((a1 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  v6 = ((a2 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)v6;
  v8 = *(_QWORD *)(v6 + 8);
  v9 = *(_BYTE *)(v6 + 16);
  sub_23BEA0EAC(*(_QWORD *)v6, v8, v9);
  *(_QWORD *)v5 = v7;
  *(_QWORD *)(v5 + 8) = v8;
  *(_BYTE *)(v5 + 16) = v9;
  *(_QWORD *)(v5 + 24) = *(_QWORD *)(v6 + 24);
  v10 = *(_QWORD *)(a3 + 24);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (void *)((v12 + 32 + v5) & ~v12);
  v14 = (const void *)((v12 + 32 + v6) & ~v12);
  v15 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  if (v15(v14, 1, v10))
  {
    v16 = *(_DWORD *)(v11 + 84);
    v17 = *(_QWORD *)(v11 + 64);
    if (v16)
      v18 = v17;
    else
      v18 = v17 + 1;
    memcpy(v13, v14, v18);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v13, v14, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v13, 0, 1, v10);
    v16 = *(_DWORD *)(v11 + 84);
    v17 = *(_QWORD *)(v11 + 64);
  }
  if (v16)
    v19 = v17;
  else
    v19 = v17 + 1;
  v20 = *(_QWORD *)(a3 + 16);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(unsigned __int8 *)(v21 + 80);
  v23 = v19 + v22;
  v24 = (void *)(((unint64_t)v13 + v23) & ~v22);
  v25 = (const void *)(((unint64_t)v14 + v23) & ~v22);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48))(v25, 1, v20))
  {
    if (*(_DWORD *)(v21 + 84))
      v26 = *(_QWORD *)(v21 + 64);
    else
      v26 = *(_QWORD *)(v21 + 64) + 1;
    memcpy(v24, v25, v26);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v21 + 16))(v24, v25, v20);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v24, 0, 1, v20);
  }
  return a1;
}

unint64_t sub_23BF91428(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t (*v18)(void *, uint64_t, uint64_t);
  int v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t (*v28)(void *, uint64_t, uint64_t);
  int v29;
  int v30;
  size_t v31;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  v5 = ((a1 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  v6 = ((a2 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)v6;
  v8 = *(_QWORD *)(v6 + 8);
  v9 = *(_BYTE *)(v6 + 16);
  sub_23BEA0EAC(*(_QWORD *)v6, v8, v9);
  v10 = *(_QWORD *)v5;
  v11 = *(_QWORD *)(v5 + 8);
  v12 = *(_BYTE *)(v5 + 16);
  *(_QWORD *)v5 = v7;
  *(_QWORD *)(v5 + 8) = v8;
  *(_BYTE *)(v5 + 16) = v9;
  sub_23BEA0F64(v10, v11, v12);
  *(_QWORD *)(v5 + 24) = *(_QWORD *)(v6 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13 = *(_QWORD *)(a3 + 24);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = (void *)((v15 + 32 + v5) & ~v15);
  v17 = (void *)((v15 + 32 + v6) & ~v15);
  v18 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  LODWORD(v5) = v18(v16, 1, v13);
  v19 = v18(v17, 1, v13);
  if ((_DWORD)v5)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 16))(v16, v17, v13);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v16, 0, 1, v13);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 24))(v16, v17, v13);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v14 + 8))(v16, v13);
  }
  if (*(_DWORD *)(v14 + 84))
    v20 = *(_QWORD *)(v14 + 64);
  else
    v20 = *(_QWORD *)(v14 + 64) + 1;
  memcpy(v16, v17, v20);
LABEL_10:
  if (*(_DWORD *)(v14 + 84))
    v21 = *(_QWORD *)(v14 + 64);
  else
    v21 = *(_QWORD *)(v14 + 64) + 1;
  v22 = *(_QWORD *)(a3 + 16);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(unsigned __int8 *)(v23 + 80);
  v25 = v21 + v24;
  v26 = (void *)(((unint64_t)v16 + v25) & ~v24);
  v27 = (void *)(((unint64_t)v17 + v25) & ~v24);
  v28 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v23 + 48);
  v29 = v28(v26, 1, v22);
  v30 = v28(v27, 1, v22);
  if (v29)
  {
    if (!v30)
    {
      (*(void (**)(void *, void *, uint64_t))(v23 + 16))(v26, v27, v22);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v26, 0, 1, v22);
      return a1;
    }
  }
  else
  {
    if (!v30)
    {
      (*(void (**)(void *, void *, uint64_t))(v23 + 24))(v26, v27, v22);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v23 + 8))(v26, v22);
  }
  if (*(_DWORD *)(v23 + 84))
    v31 = *(_QWORD *)(v23 + 64);
  else
    v31 = *(_QWORD *)(v23 + 64) + 1;
  memcpy(v26, v27, v31);
  return a1;
}

unint64_t sub_23BF91670(unint64_t a1, unint64_t a2, uint64_t a3)
{
  _OWORD *v5;
  _OWORD *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  int v13;
  size_t v14;
  size_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const void *v22;
  size_t v23;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  v5 = (_OWORD *)(((a1 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_OWORD *)(((a2 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8);
  v7 = v6[1];
  *v5 = *v6;
  v5[1] = v7;
  v8 = *(_QWORD *)(a3 + 24);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (void *)(((unint64_t)v5 + v10 + 32) & ~v10);
  v12 = (const void *)(((unint64_t)v6 + v10 + 32) & ~v10);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v12, 1, v8))
  {
    v13 = *(_DWORD *)(v9 + 84);
    v14 = *(_QWORD *)(v9 + 64);
    if (v13)
      v15 = v14;
    else
      v15 = v14 + 1;
    memcpy(v11, v12, v15);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(v11, v12, v8);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v11, 0, 1, v8);
    v13 = *(_DWORD *)(v9 + 84);
    v14 = *(_QWORD *)(v9 + 64);
  }
  if (v13)
    v16 = v14;
  else
    v16 = v14 + 1;
  v17 = *(_QWORD *)(a3 + 16);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(unsigned __int8 *)(v18 + 80);
  v20 = v16 + v19;
  v21 = (void *)(((unint64_t)v11 + v20) & ~v19);
  v22 = (const void *)(((unint64_t)v12 + v20) & ~v19);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v18 + 48))(v22, 1, v17))
  {
    if (*(_DWORD *)(v18 + 84))
      v23 = *(_QWORD *)(v18 + 64);
    else
      v23 = *(_QWORD *)(v18 + 64) + 1;
    memcpy(v21, v22, v23);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v18 + 32))(v21, v22, v17);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v21, 0, 1, v17);
  }
  return a1;
}

unint64_t sub_23BF917EC(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t (*v16)(void *, uint64_t, uint64_t);
  int v17;
  int v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t (*v27)(void *, uint64_t, uint64_t);
  int v28;
  int v29;
  size_t v30;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  v5 = ((a1 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  v6 = ((a2 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_BYTE *)(v6 + 16);
  v8 = *(_QWORD *)v5;
  v9 = *(_QWORD *)(v5 + 8);
  v10 = *(_BYTE *)(v5 + 16);
  *(_OWORD *)v5 = *(_OWORD *)v6;
  *(_BYTE *)(v5 + 16) = v7;
  sub_23BEA0F64(v8, v9, v10);
  *(_QWORD *)(v5 + 24) = *(_QWORD *)(v6 + 24);
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(a3 + 24);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = (void *)((v13 + 32 + v5) & ~v13);
  v15 = (void *)((v13 + 32 + v6) & ~v13);
  v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  v17 = v16(v14, 1, v11);
  v18 = v16(v15, 1, v11);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v14, v15, v11);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v14, 0, 1, v11);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v14, v15, v11);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v14, v11);
  }
  if (*(_DWORD *)(v12 + 84))
    v19 = *(_QWORD *)(v12 + 64);
  else
    v19 = *(_QWORD *)(v12 + 64) + 1;
  memcpy(v14, v15, v19);
LABEL_10:
  if (*(_DWORD *)(v12 + 84))
    v20 = *(_QWORD *)(v12 + 64);
  else
    v20 = *(_QWORD *)(v12 + 64) + 1;
  v21 = *(_QWORD *)(a3 + 16);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(unsigned __int8 *)(v22 + 80);
  v24 = v20 + v23;
  v25 = (void *)(((unint64_t)v14 + v24) & ~v23);
  v26 = (void *)(((unint64_t)v15 + v24) & ~v23);
  v27 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v22 + 48);
  v28 = v27(v25, 1, v21);
  v29 = v27(v26, 1, v21);
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(void *, void *, uint64_t))(v22 + 32))(v25, v26, v21);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v25, 0, 1, v21);
      return a1;
    }
  }
  else
  {
    if (!v29)
    {
      (*(void (**)(void *, void *, uint64_t))(v22 + 40))(v25, v26, v21);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v22 + 8))(v25, v21);
  }
  if (*(_DWORD *)(v22 + 84))
    v30 = *(_QWORD *)(v22 + 64);
  else
    v30 = *(_QWORD *)(v22 + 64) + 1;
  memcpy(v25, v26, v30);
  return a1;
}

uint64_t sub_23BF91A1C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char v18;
  int v19;
  unsigned int v20;
  int v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = v5 - 1;
  else
    v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = v8 - 1;
  if (!v8)
    v9 = 0;
  if (v6 <= v9)
    v10 = v9;
  else
    v10 = v6;
  if (v10 <= 0x7FFFFFFF)
    v11 = 0x7FFFFFFF;
  else
    v11 = v10;
  v12 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v12;
  if (v8)
    v13 = *(_QWORD *)(v7 + 64);
  else
    v13 = *(_QWORD *)(v7 + 64) + 1;
  if (!a2)
    return 0;
  v14 = *(unsigned __int8 *)(v4 + 80);
  v15 = *(unsigned __int8 *)(v7 + 80);
  v16 = a2 - v11;
  if (a2 <= v11)
    goto LABEL_36;
  v17 = v13 + ((v12 + v15 + ((v14 + 48) & ~v14)) & ~v15);
  v18 = 8 * v17;
  if (v17 <= 3)
  {
    v20 = ((v16 + ~(-1 << v18)) >> v18) + 1;
    if (HIWORD(v20))
    {
      v19 = *(_DWORD *)(a1 + v17);
      if (!v19)
        goto LABEL_36;
      goto LABEL_27;
    }
    if (v20 > 0xFF)
    {
      v19 = *(unsigned __int16 *)(a1 + v17);
      if (!*(_WORD *)(a1 + v17))
        goto LABEL_36;
      goto LABEL_27;
    }
    if (v20 < 2)
    {
LABEL_36:
      v23 = ((a1 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
      if ((v10 & 0x80000000) == 0)
      {
        v24 = *(_QWORD *)(v23 + 24);
        if (v24 >= 0xFFFFFFFF)
          LODWORD(v24) = -1;
        return (v24 + 1);
      }
      v25 = (v23 + v14 + 32) & ~v14;
      if (v6 == v11)
      {
        if (v5 >= 2)
        {
          v26 = (*(uint64_t (**)(uint64_t, _QWORD))(v4 + 48))(v25, *(unsigned int *)(v4 + 84));
          goto LABEL_46;
        }
      }
      else if (v8 >= 2)
      {
        v26 = (*(uint64_t (**)(uint64_t))(v7 + 48))((v25 + v12 + v15) & ~v15);
LABEL_46:
        if (v26 >= 2)
          return v26 - 1;
        else
          return 0;
      }
      return 0;
    }
  }
  v19 = *(unsigned __int8 *)(a1 + v17);
  if (!*(_BYTE *)(a1 + v17))
    goto LABEL_36;
LABEL_27:
  v21 = (v19 - 1) << v18;
  if (v17 > 3)
    v21 = 0;
  if ((_DWORD)v17)
  {
    if (v17 <= 3)
      v22 = v17;
    else
      v22 = 4;
    __asm { BR              X12 }
  }
  return v11 + v21 + 1;
}

void sub_23BF91C24(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  BOOL v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  v10 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v11 = *(_DWORD *)(v10 + 84);
  v12 = v11 - 1;
  if (!v11)
    v12 = 0;
  if (v9 <= v12)
    v13 = v12;
  else
    v13 = v9;
  if (v13 <= 0x7FFFFFFF)
    v14 = 0x7FFFFFFF;
  else
    v14 = v13;
  v15 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v15;
  v16 = *(_QWORD *)(v10 + 64);
  if (!v11)
    ++v16;
  v17 = v16
      + ((v15
        + *(unsigned __int8 *)(v10 + 80)
        + ((*(unsigned __int8 *)(v7 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  v18 = a3 >= v14;
  v19 = a3 - v14;
  if (v19 != 0 && v18)
  {
    if (v17 > 3)
    {
      v6 = 1u;
      if (v14 < a2)
        goto LABEL_26;
      goto LABEL_33;
    }
    v20 = ((v19 + ~(-1 << (8 * v17))) >> (8 * v17)) + 1;
    if (HIWORD(v20))
    {
      v6 = 4u;
      if (v14 < a2)
      {
LABEL_26:
        v21 = ~v14 + a2;
        if (v17 < 4)
        {
          if ((_DWORD)v17)
          {
            v22 = v21 & ~(-1 << (8 * v17));
            bzero(a1, v17);
            if ((_DWORD)v17 == 3)
            {
              *a1 = v22;
              *((_BYTE *)a1 + 2) = BYTE2(v22);
            }
            else if ((_DWORD)v17 == 2)
            {
              *a1 = v22;
            }
            else
            {
              *(_BYTE *)a1 = v22;
            }
          }
        }
        else
        {
          bzero(a1, v17);
          *(_DWORD *)a1 = v21;
        }
        __asm { BR              X10 }
      }
LABEL_33:
      __asm { BR              X7 }
    }
    if (v20 >= 0x100)
      v6 = 2;
    else
      v6 = v20 > 1;
  }
  if (v14 < a2)
    goto LABEL_26;
  goto LABEL_33;
}

void sub_23BF91E94()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_23BF91E9C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void type metadata accessor for CanvasSectionHeaderView()
{
  JUMPOUT(0x2426150F0);
}

uint64_t sub_23BF91ECC()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_23BF91F00(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>, double a7@<D0>)
{
  *(_BYTE *)a6 = a1;
  *(double *)(a6 + 8) = a7;
  *(_QWORD *)(a6 + 16) = a2;
  *(_QWORD *)(a6 + 24) = a3;
  *(_BYTE *)(a6 + 32) = a4 & 1;
  *(_QWORD *)(a6 + 40) = a5;
  type metadata accessor for CanvasSectionHeaderView();
}

uint64_t sub_23BF91F60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = v3 + *(int *)(a1 + 60);
  v6 = sub_23BFF96A0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v5, v2, v6);
  v7 = v3 + *(int *)(a1 + 64);
  v8 = sub_23BFF96A0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v7, v1, v8);
}

uint64_t sub_23BF91FD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  _QWORD v40[2];
  uint64_t v41;
  _QWORD v42[2];
  _QWORD v43[3];

  v35 = a2;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE74D0);
  v3 = *(_QWORD *)(a1 + 16);
  v33 = a1;
  v30 = v3;
  swift_getTupleTypeMetadata2();
  sub_23BFF9220();
  sub_23BFF96A0();
  swift_getTupleTypeMetadata2();
  v4 = sub_23BFF9220();
  v5 = MEMORY[0x24BDF5428];
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v4);
  sub_23BFF9058();
  v6 = *(_QWORD *)(a1 + 24);
  sub_23BFF96A0();
  swift_getTupleTypeMetadata2();
  v7 = sub_23BFF9220();
  MEMORY[0x242615198](v5, v7);
  v8 = sub_23BFF90AC();
  sub_23BFF96A0();
  swift_getTupleTypeMetadata3();
  v9 = sub_23BFF9220();
  MEMORY[0x242615198](v5, v9);
  v10 = sub_23BFF90AC();
  v11 = sub_23BFF862C();
  v12 = sub_23BFF8968();
  v13 = sub_23BFF8FD4();
  v31 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v30 - v14;
  v16 = sub_23BFF862C();
  v32 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v30 - v20;
  v36 = v30;
  v37 = v6;
  v38 = *(_OWORD *)(v33 + 32);
  v39 = v34;
  v22 = MEMORY[0x24BDF4700];
  v23 = MEMORY[0x242615198](MEMORY[0x24BDF4700], v8);
  v43[0] = MEMORY[0x242615198](v22, v10);
  v43[1] = MEMORY[0x24BDEDBB8];
  v24 = MEMORY[0x24BDED308];
  v25 = MEMORY[0x242615198](MEMORY[0x24BDED308], v11, v43);
  v42[0] = v23;
  v42[1] = v25;
  v26 = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v12, v42);
  sub_23BFF8FC8();
  sub_23BFF8B78();
  v41 = v26;
  v27 = MEMORY[0x242615198](MEMORY[0x24BDF3F50], v13, &v41);
  sub_23BFF8EF0();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v15, v13);
  v40[0] = v27;
  v40[1] = MEMORY[0x24BDECC60];
  MEMORY[0x242615198](v24, v16, v40);
  sub_23BEA72EC((uint64_t)v18, v16, (uint64_t)v21);
  v28 = *(void (**)(char *, uint64_t))(v32 + 8);
  v28(v18, v16);
  sub_23BEA5C0C((uint64_t)v21, v16, v35);
  return ((uint64_t (*)(char *, uint64_t))v28)(v21, v16);
}

uint64_t sub_23BF923A0@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[2];
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 *v61;
  _QWORD v62[2];
  _QWORD v63[2];
  _QWORD v64[2];
  _QWORD v65[3];

  v51 = a5;
  v50 = a4;
  v49 = a3;
  v56 = a6;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE74D0);
  sub_23BFF96A0();
  v48 = a2;
  sub_23BFF96A0();
  swift_getTupleTypeMetadata3();
  v8 = sub_23BFF9220();
  v9 = MEMORY[0x24BDF5428];
  v42[1] = v8;
  v42[0] = MEMORY[0x242615198](MEMORY[0x24BDF5428], v8);
  v10 = sub_23BFF90AC();
  v45 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v44 = (char *)v42 - v11;
  v55 = v12;
  v13 = sub_23BFF862C();
  v46 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v43 = (char *)v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v47 = (uint64_t)v42 - v16;
  swift_getTupleTypeMetadata2();
  sub_23BFF9220();
  sub_23BFF96A0();
  swift_getTupleTypeMetadata2();
  v17 = sub_23BFF9220();
  MEMORY[0x242615198](v9, v17);
  sub_23BFF9058();
  swift_getTupleTypeMetadata2();
  v18 = sub_23BFF9220();
  MEMORY[0x242615198](v9, v18);
  v19 = sub_23BFF90AC();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)v42 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)v42 - v24;
  v26 = sub_23BFF8968();
  v53 = *(_QWORD *)(v26 - 8);
  v54 = v26;
  MEMORY[0x24BDAC7A8](v26);
  v52 = (char *)v42 - v27;
  LODWORD(a2) = *a1;
  sub_23BFF88A8();
  v57 = v48;
  v58 = v49;
  v59 = v50;
  v60 = v51;
  v61 = a1;
  if (a2 > 6)
  {
    v32 = v44;
    sub_23BFF90A0();
    sub_23BFF91CC();
    v28 = MEMORY[0x24BDF4700];
    v30 = v55;
    v40 = v55;
    v41 = MEMORY[0x242615198](MEMORY[0x24BDF4700], v55);
    v33 = (uint64_t)v43;
    sub_23BFF8EA8();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v32, v40);
    v65[0] = v41;
    v65[1] = MEMORY[0x24BDEDBB8];
    MEMORY[0x242615198](MEMORY[0x24BDED308], v13, v65);
    v34 = v47;
    sub_23BEA72EC(v33, v13, v47);
    v35 = *(void (**)(uint64_t, uint64_t))(v46 + 8);
    v35(v33, v13);
    sub_23BEA5C0C(v34, v13, v33);
    MEMORY[0x242615198](v28, v19);
    v31 = (uint64_t)v52;
    sub_23BEA5CE8(v33, v19, v13);
    v35(v33, v13);
    v35(v34, v13);
  }
  else
  {
    sub_23BFF90A0();
    v28 = MEMORY[0x24BDF4700];
    MEMORY[0x242615198](MEMORY[0x24BDF4700], v19);
    sub_23BEA72EC((uint64_t)v22, v19, (uint64_t)v25);
    v29 = *(void (**)(char *, uint64_t))(v20 + 8);
    v29(v22, v19);
    sub_23BEA5C0C((uint64_t)v25, v19, (uint64_t)v22);
    v30 = v55;
    v62[0] = MEMORY[0x242615198](v28, v55);
    v62[1] = MEMORY[0x24BDEDBB8];
    MEMORY[0x242615198](MEMORY[0x24BDED308], v13, v62);
    v31 = (uint64_t)v52;
    sub_23BEA5C24((uint64_t)v22, v19);
    v29(v22, v19);
    v29(v25, v19);
  }
  v36 = MEMORY[0x242615198](v28, v19);
  v64[0] = MEMORY[0x242615198](v28, v30);
  v64[1] = MEMORY[0x24BDEDBB8];
  v37 = MEMORY[0x242615198](MEMORY[0x24BDED308], v13, v64);
  v63[0] = v36;
  v63[1] = v37;
  v38 = v54;
  MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v54, v63);
  sub_23BEA5C0C(v31, v38, v56);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v53 + 8))(v31, v38);
}

void sub_23BF929C0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[6];
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v38 = a6;
  v39 = a5;
  v36 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v31[2] = (char *)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v31[1] = (char *)v31 - v12;
  v32 = sub_23BFF96A0();
  v40 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v35 = (char *)v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v31[5] = (char *)v31 - v15;
  MEMORY[0x24BDAC7A8](v16);
  v41 = (char *)v31 - v17;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE74D0);
  swift_getTupleTypeMetadata2();
  sub_23BFF9220();
  sub_23BFF96A0();
  swift_getTupleTypeMetadata2();
  v18 = sub_23BFF9220();
  v34 = MEMORY[0x242615198](MEMORY[0x24BDF5428], v18);
  v19 = sub_23BFF9058();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v37 = (char *)v31 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)v31 - v23;
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)v31 - v26;
  sub_23BFF8848();
  v28 = a2;
  v42 = a2;
  v43 = a3;
  v29 = v39;
  v44 = a4;
  v45 = v39;
  v46 = a1;
  sub_23BFF904C();
  v30 = MEMORY[0x242615198](MEMORY[0x24BDF4498], v19);
  v31[3] = v27;
  v31[4] = v30;
  sub_23BEA72EC((uint64_t)v24, v19, (uint64_t)v27);
  v34 = v20;
  v33 = *(void (**)(char *, uint64_t))(v20 + 8);
  v33(v24, v19);
  v47 = v28;
  v48 = a3;
  v49 = a4;
  v50 = v29;
  type metadata accessor for CanvasSectionHeaderView();
}

uint64_t sub_23BF92C9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);

  v7 = v3 + *(int *)(a1 + 60);
  v8 = *(_QWORD *)(v6 - 312);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 240) + 16);
  v9(v8, v7, v1);
  v10 = *(_QWORD *)(v6 - 272);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v5) == 1)
  {
    v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 240) + 8);
    v11(v8, v1);
    v12 = *(_QWORD *)(v6 - 280);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v12, 1, 1, v2);
    v13 = *(_QWORD *)(v6 - 248);
    sub_23BF3FAD4(v12, *(_QWORD *)(v6 - 232));
  }
  else
  {
    v14 = *(_QWORD *)(v6 - 344);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v14, v8, v2);
    v15 = v9;
    v16 = *(_QWORD *)(v6 - 336);
    v13 = *(_QWORD *)(v6 - 248);
    sub_23BEA72EC(v14, v2, v16);
    v17 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v17(v14, v2);
    v12 = *(_QWORD *)(v6 - 280);
    sub_23BEA5C0C(v16, v2, v12);
    v18 = v16;
    v9 = v15;
    v17(v18, v2);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(v12, 0, 1, v2);
    sub_23BF3FAD4(v12, *(_QWORD *)(v6 - 232));
    v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 240) + 8);
  }
  v11(v12, v1);
  v19 = *(_QWORD *)(v6 - 264);
  v20 = *(_QWORD *)(v6 - 328);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 288) + 16))(v19, v20, v4);
  *(_QWORD *)(v6 - 120) = v19;
  v21 = *(_QWORD *)(v6 - 232);
  v9(v12, v21, v1);
  *(_QWORD *)(v6 - 112) = v12;
  *(_QWORD *)(v6 - 136) = v4;
  *(_QWORD *)(v6 - 128) = v1;
  v22 = *(_QWORD *)(v6 - 320);
  *(_QWORD *)(v6 - 160) = v13;
  *(_QWORD *)(v6 - 152) = v22;
  *(_QWORD *)(v6 - 144) = MEMORY[0x242615198](MEMORY[0x24BDF5578], v1, v6 - 160);
  sub_23BF93EF0((uint64_t *)(v6 - 120), 2uLL, v6 - 136);
  v11(v21, v1);
  v23 = v20;
  v24 = *(void (**)(uint64_t, uint64_t))(v6 - 296);
  v24(v23, v4);
  v11(v12, v1);
  return ((uint64_t (*)(uint64_t, uint64_t))v24)(v19, v4);
}

void sub_23BF92ED4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[5];
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v36 = a5;
  v32 = a4;
  v35 = a3;
  v42 = a6;
  v34 = sub_23BFF96A0();
  v31[4] = *(_QWORD *)(v34 - 8);
  MEMORY[0x24BDAC7A8](v34);
  v33 = (char *)v31 - v8;
  v31[3] = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v31[2] = (char *)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v31[1] = (char *)v31 - v12;
  MEMORY[0x24BDAC7A8](v13);
  v31[0] = (char *)v31 - v14;
  swift_getTupleTypeMetadata2();
  v40 = sub_23BFF9220();
  v15 = sub_23BFF96A0();
  v39 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  MEMORY[0x24BDAC7A8](v16);
  v41 = (char *)v31 - v17;
  v18 = sub_23BFF8890();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)v31 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE74D0);
  MEMORY[0x24BDAC7A8](v38);
  v23 = (char *)v31 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)v31 - v25;
  v27 = *(_QWORD *)(a1 + 24);
  v28 = *(_BYTE *)(a1 + 32);
  v29 = *(_QWORD *)(a1 + 40);
  v43 = *(_QWORD *)(a1 + 16);
  v44 = v27;
  LOBYTE(v45) = v28;
  v46 = v29;
  sub_23BEA0EAC(v43, v27, v28);
  swift_bridgeObjectRetain();
  sub_23BFF8884();
  sub_23BFF8E3C();
  v30 = v32;
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  sub_23BEA0F64(v43, v44, v45);
  swift_bridgeObjectRelease();
  v37 = v26;
  sub_23BF93B3C((uint64_t)v23, (uint64_t)v26);
  v43 = a2;
  v44 = v35;
  v45 = v30;
  v46 = v36;
  type metadata accessor for CanvasSectionHeaderView();
}

uint64_t sub_23BF931A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;

  v11 = v4 + *(int *)(a1 + 64);
  v12 = *(_QWORD *)(v10 - 248);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v9, v11, v12);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v9, 1, v8) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v12);
    v13 = *(_QWORD *)(v10 - 200);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v3, 1, 1, v13);
  }
  else
  {
    v14 = *(_QWORD *)(v10 - 304);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v14, v9, v8);
    v15 = *(_QWORD *)(v10 - 296);
    sub_23BEA72EC(v14, v8, v15);
    *(_QWORD *)(v10 - 176) = 0;
    *(_BYTE *)(v10 - 168) = 1;
    *(_QWORD *)(v10 - 120) = v10 - 176;
    v16 = *(_QWORD *)(v10 - 288);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v16, v15, v8);
    *(_QWORD *)(v10 - 112) = v16;
    *(_QWORD *)(v10 - 136) = MEMORY[0x24BDF4638];
    *(_QWORD *)(v10 - 128) = v8;
    *(_QWORD *)(v10 - 152) = MEMORY[0x24BDF4610];
    *(_QWORD *)(v10 - 144) = v1;
    sub_23BF93EF0((uint64_t *)(v10 - 120), 2uLL, v10 - 136);
    v17 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v17(v15, v8);
    v17(v14, v8);
    v17(v16, v8);
    v13 = *(_QWORD *)(v10 - 200);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v3, 0, 1, v13);
  }
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v13);
  v18 = *(_QWORD *)(v10 - 192);
  sub_23BF3FAD4(v3, v18);
  v19 = *(_QWORD *)(v10 - 208);
  v20 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
  v20(v3, v2);
  v21 = *(_QWORD *)(v10 - 224);
  sub_23BF93B84(v21, v6);
  *(_QWORD *)(v10 - 120) = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v3, v18, v2);
  *(_QWORD *)(v10 - 112) = v3;
  *(_QWORD *)(v10 - 136) = *(_QWORD *)(v10 - 216);
  *(_QWORD *)(v10 - 128) = v2;
  *(_QWORD *)(v10 - 152) = sub_23BF93BCC();
  *(_QWORD *)(v10 - 160) = MEMORY[0x242615198](MEMORY[0x24BDF5428], v13);
  *(_QWORD *)(v10 - 144) = MEMORY[0x242615198](MEMORY[0x24BDF5578], v2, v10 - 160);
  sub_23BF93EF0((uint64_t *)(v10 - 120), 2uLL, v10 - 136);
  v20(v18, v2);
  sub_23BF93C38(v21);
  v20(v3, v2);
  return sub_23BF93C38(v6);
}

void sub_23BF933F0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[4];
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v55 = a5;
  v56 = a4;
  v52 = a6;
  v8 = *(_QWORD *)(a2 - 8);
  v41 = a2;
  v48 = v8;
  MEMORY[0x24BDAC7A8](a1);
  v40[3] = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v40[2] = (char *)v40 - v11;
  v51 = sub_23BFF96A0();
  v53 = *(_QWORD *)(v51 - 8);
  MEMORY[0x24BDAC7A8](v51);
  v50 = (char *)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v43 = (char *)v40 - v14;
  MEMORY[0x24BDAC7A8](v15);
  v49 = (char *)v40 - v16;
  v47 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v40[1] = (char *)v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v40[0] = (char *)v40 - v20;
  v57 = sub_23BFF96A0();
  v42 = *(_QWORD *)(v57 - 8);
  MEMORY[0x24BDAC7A8](v57);
  MEMORY[0x24BDAC7A8](v21);
  MEMORY[0x24BDAC7A8](v22);
  v54 = (char *)v40 - v23;
  v24 = sub_23BFF8890();
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v27 = (char *)v40 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE74D0);
  MEMORY[0x24BDAC7A8](v44);
  v29 = (char *)v40 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v30);
  v32 = (char *)v40 - v31;
  v33 = *(_QWORD *)(a1 + 24);
  v34 = *(_BYTE *)(a1 + 32);
  v35 = *(_QWORD *)(a1 + 40);
  v58 = *(_QWORD *)(a1 + 16);
  v59 = v33;
  LOBYTE(v60) = v34;
  v61 = v35;
  sub_23BEA0EAC(v58, v33, v34);
  swift_bridgeObjectRetain();
  sub_23BFF8884();
  sub_23BFF8E3C();
  v36 = v27;
  v37 = v55;
  v38 = v24;
  v39 = v41;
  (*(void (**)(char *, uint64_t))(v25 + 8))(v36, v38);
  sub_23BEA0F64(v58, v59, v60);
  swift_bridgeObjectRelease();
  v46 = v29;
  v45 = v32;
  sub_23BF93B3C((uint64_t)v29, (uint64_t)v32);
  v58 = v39;
  v59 = a3;
  v60 = v56;
  v61 = v37;
  type metadata accessor for CanvasSectionHeaderView();
}

uint64_t sub_23BF93740(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, _QWORD, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  void (*v29)(uint64_t, _QWORD, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t);

  v10 = *(int *)(a1 + 60);
  *(_QWORD *)(v8 - 328) = v7;
  v11 = v7 + v10;
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v13 = *(_QWORD *)(v8 - 192);
  *(_QWORD *)(v8 - 320) = v12;
  v12(v1, v11, v13);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v1, 1, v4) == 1)
  {
    v14 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
    v14(v1, *(_QWORD *)(v8 - 192));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v5, 1, 1, v4);
    sub_23BF3FAD4(v5, *(_QWORD *)(v8 - 216));
  }
  else
  {
    v15 = *(_QWORD *)(v8 - 368);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v15, v1, v4);
    v16 = *(_QWORD *)(v8 - 360);
    sub_23BEA72EC(v15, v4, v16);
    v17 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v17(v15, v4);
    sub_23BEA5C0C(v16, v4, v5);
    v17(v16, v4);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v5, 0, 1, v4);
    sub_23BF3FAD4(v5, *(_QWORD *)(v8 - 216));
    v14 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  }
  *(_QWORD *)(v8 - 272) = v5;
  v18 = *(_QWORD *)(v8 - 192);
  *(_QWORD *)(v8 - 312) = v14;
  v14(v5, v18);
  v19 = *(_QWORD *)(v8 - 224);
  v20 = *(void (**)(uint64_t, _QWORD, uint64_t))(v19 + 16);
  v21 = *(_QWORD *)(v8 - 304);
  v22 = *(_QWORD *)(v8 - 240);
  v20(v21, *(_QWORD *)(v8 - 328) + *(int *)(a1 + 64), v22);
  v23 = *(_QWORD *)(v8 - 264);
  v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v21, 1, v3);
  v25 = *(_QWORD *)(v8 - 256);
  v26 = *(_QWORD *)(v8 - 248);
  if (v24 == 1)
  {
    v27 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v27(v21, v22);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(v26, 1, 1, v3);
    sub_23BF3FAD4(v26, v25);
  }
  else
  {
    v28 = *(_QWORD *)(v8 - 256);
    v29 = v20;
    v30 = *(_QWORD *)(v8 - 352);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 32))(v30, v21, v3);
    v31 = v3;
    v32 = *(_QWORD *)(v8 - 344);
    sub_23BEA72EC(v30, v31, v32);
    v33 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
    v34 = v30;
    v20 = v29;
    v25 = v28;
    v33(v34, v31);
    sub_23BEA5C0C(v32, v31, v26);
    v33(v32, v31);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v23 + 56))(v26, 0, 1, v31);
    sub_23BF3FAD4(v26, v28);
    v27 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 224) + 8);
  }
  v27(v26, v22);
  v35 = *(_QWORD *)(v8 - 288);
  v36 = *(_QWORD *)(v8 - 280);
  sub_23BF93B84(v35, v36);
  *(_QWORD *)(v8 - 120) = v36;
  v37 = *(_QWORD *)(v8 - 272);
  v38 = *(_QWORD *)(v8 - 216);
  v39 = *(_QWORD *)(v8 - 192);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 - 320))(v37, v38, v39);
  *(_QWORD *)(v8 - 112) = v37;
  v20(v26, v25, v22);
  *(_QWORD *)(v8 - 104) = v26;
  *(_QWORD *)(v8 - 144) = *(_QWORD *)(v8 - 296);
  *(_QWORD *)(v8 - 136) = v39;
  *(_QWORD *)(v8 - 128) = v22;
  v40 = sub_23BF93BCC();
  *(_QWORD *)(v8 - 176) = *(_QWORD *)(v8 - 208);
  *(_QWORD *)(v8 - 168) = v40;
  v41 = MEMORY[0x24BDF5578];
  *(_QWORD *)(v8 - 160) = MEMORY[0x242615198](MEMORY[0x24BDF5578], v39, v8 - 176);
  *(_QWORD *)(v8 - 184) = *(_QWORD *)(v8 - 200);
  *(_QWORD *)(v8 - 152) = MEMORY[0x242615198](v41, v22, v8 - 184);
  sub_23BF93EF0((uint64_t *)(v8 - 120), 3uLL, v8 - 144);
  v27(v25, v22);
  v42 = *(void (**)(uint64_t, uint64_t))(v8 - 312);
  v42(v38, v39);
  sub_23BF93C38(v35);
  v27(v26, v22);
  v42(v37, v39);
  return sub_23BF93C38(v36);
}

uint64_t sub_23BF93B0C()
{
  return sub_23BF46FC0((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BF923A0);
}

uint64_t sub_23BF93B18()
{
  return sub_23BF46FC0((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BF933F0);
}

uint64_t sub_23BF93B24()
{
  return sub_23BF46FC0((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BF929C0);
}

uint64_t sub_23BF93B30()
{
  return sub_23BF46FC0((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BF92ED4);
}

uint64_t sub_23BF93B3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE74D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BF93B84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE74D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_23BF93BCC()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;
  _QWORD v3[2];

  result = qword_256AE74D8;
  if (!qword_256AE74D8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE74D0);
    v2 = sub_23BF1E6D8();
    v3[0] = MEMORY[0x24BDF1F80];
    v3[1] = v2;
    result = MEMORY[0x242615198](MEMORY[0x24BDED308], v1, v3);
    atomic_store(result, (unint64_t *)&qword_256AE74D8);
  }
  return result;
}

uint64_t sub_23BF93C38(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE74D0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for CanvasSectionHeaderViewLayout()
{
  return &type metadata for CanvasSectionHeaderViewLayout;
}

uint64_t sub_23BF93C88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];
  uint64_t v15;
  _QWORD v16[2];
  _QWORD v17[2];

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE74D0);
  swift_getTupleTypeMetadata2();
  sub_23BFF9220();
  sub_23BFF96A0();
  swift_getTupleTypeMetadata2();
  v0 = sub_23BFF9220();
  v1 = MEMORY[0x24BDF5428];
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v0);
  sub_23BFF9058();
  sub_23BFF96A0();
  swift_getTupleTypeMetadata2();
  v2 = sub_23BFF9220();
  MEMORY[0x242615198](v1, v2);
  v3 = sub_23BFF90AC();
  sub_23BFF96A0();
  swift_getTupleTypeMetadata3();
  v4 = sub_23BFF9220();
  MEMORY[0x242615198](v1, v4);
  v5 = sub_23BFF90AC();
  v6 = sub_23BFF862C();
  v7 = sub_23BFF8968();
  v8 = sub_23BFF8FD4();
  v9 = sub_23BFF862C();
  v10 = MEMORY[0x24BDF4700];
  v11 = MEMORY[0x242615198](MEMORY[0x24BDF4700], v3);
  v17[0] = MEMORY[0x242615198](v10, v5);
  v17[1] = MEMORY[0x24BDEDBB8];
  v12 = MEMORY[0x24BDED308];
  v16[0] = v11;
  v16[1] = MEMORY[0x242615198](MEMORY[0x24BDED308], v6, v17);
  v15 = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v7, v16);
  v14[0] = MEMORY[0x242615198](MEMORY[0x24BDF3F50], v8, &v15);
  v14[1] = MEMORY[0x24BDECC60];
  return MEMORY[0x242615198](v12, v9, v14);
}

uint64_t sub_23BF93EF0(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t TupleTypeMetadata;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;

  v5 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 == 1)
  {
    TupleTypeMetadata = *v5;
    MEMORY[0x24BDAC7A8]();
    v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
LABEL_12:
    v22 = 32;
    v23 = a2;
    do
    {
      if (a2 == 1)
        v24 = 0;
      else
        v24 = *(_DWORD *)(TupleTypeMetadata + v22);
      v26 = *v5++;
      v25 = v26;
      v27 = *a1++;
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(&v8[v24], v27);
      v22 += 16;
      --v23;
    }
    while (v23);
    return sub_23BFF922C();
  }
  MEMORY[0x24BDAC7A8]();
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v11 = 0;
    if (a2 < 4)
      goto LABEL_9;
    if ((unint64_t)(v10 - (char *)v5) < 0x20)
      goto LABEL_9;
    v11 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (__int128 *)(v5 + 2);
    v13 = v10 + 16;
    v14 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v11 != a2)
    {
LABEL_9:
      v16 = a2 - v11;
      v17 = v11;
      v18 = &v10[8 * v11];
      v19 = &v5[v17];
      do
      {
        v20 = *v19++;
        *(_QWORD *)v18 = v20;
        v18 += 8;
        --v16;
      }
      while (v16);
    }
  }
  TupleTypeMetadata = swift_getTupleTypeMetadata();
  MEMORY[0x24BDAC7A8]();
  v8 = (char *)&v29 - v21;
  if (a2)
    goto LABEL_12;
  return sub_23BFF922C();
}

void sub_23BF940A4()
{
  type metadata accessor for ActionCardView();
}

uint64_t sub_23BF94154(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  _QWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  _QWORD *v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v10 = (_QWORD *)(v1 + a1[25]);
  *(_QWORD *)(v8 - 96) = 0;
  sub_23BFF8FEC();
  *v10 = v38;
  v10[1] = v39;
  v11 = *(_OWORD *)(v3 + 208);
  *(_OWORD *)(v1 + 192) = *(_OWORD *)(v3 + 192);
  *(_OWORD *)(v1 + 208) = v11;
  *(_OWORD *)(v1 + 224) = *(_OWORD *)(v3 + 224);
  *(_QWORD *)(v1 + 240) = *(_QWORD *)(v3 + 240);
  v12 = *(_OWORD *)(v3 + 144);
  *(_OWORD *)(v1 + 128) = *(_OWORD *)(v3 + 128);
  *(_OWORD *)(v1 + 144) = v12;
  v13 = *(_OWORD *)(v3 + 176);
  *(_OWORD *)(v1 + 160) = *(_OWORD *)(v3 + 160);
  *(_OWORD *)(v1 + 176) = v13;
  v14 = *(_OWORD *)(v3 + 80);
  *(_OWORD *)(v1 + 64) = *(_OWORD *)(v3 + 64);
  *(_OWORD *)(v1 + 80) = v14;
  v15 = *(_OWORD *)(v3 + 112);
  *(_OWORD *)(v1 + 96) = *(_OWORD *)(v3 + 96);
  *(_OWORD *)(v1 + 112) = v15;
  v16 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)v1 = *(_OWORD *)v3;
  *(_OWORD *)(v1 + 16) = v16;
  v17 = *(_OWORD *)(v3 + 48);
  *(_OWORD *)(v1 + 32) = *(_OWORD *)(v3 + 32);
  *(_OWORD *)(v1 + 48) = v17;
  *(_BYTE *)(v1 + a1[21]) = v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(v1 + a1[17], v2, v4);
  v18 = (_QWORD *)(v1 + a1[18]);
  *v18 = v27;
  v18[1] = v29;
  v18[2] = v31;
  v18[3] = v32;
  v19 = v1 + a1[19];
  *(_QWORD *)v19 = v33;
  *(_OWORD *)(v19 + 8) = v25;
  *(_QWORD *)(v19 + 24) = v5;
  v20 = v1 + a1[20];
  *(_OWORD *)v20 = v26;
  *(_QWORD *)(v20 + 16) = v28;
  *(_QWORD *)(v20 + 24) = v30;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v1 + a1[22], v34, v6);
  v21 = v1 + a1[23];
  v22 = sub_23BFF96A0();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v21, v35, v22);
  v24 = (_QWORD *)(v1 + a1[24]);
  *v24 = v36;
  v24[1] = v37;
  return result;
}

double static ActionCardViewLayout.mirroredCard.getter@<D0>(uint64_t a1@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  double result;
  __int128 v9;

  if (qword_256AE33A0 != -1)
    swift_once();
  v2 = *(_OWORD *)&qword_256AE76A8;
  *(_OWORD *)(a1 + 192) = xmmword_256AE7698;
  *(_OWORD *)(a1 + 208) = v2;
  *(_OWORD *)(a1 + 224) = xmmword_256AE76B8;
  *(_QWORD *)(a1 + 240) = qword_256AE76C8;
  v3 = unk_256AE7668;
  *(_OWORD *)(a1 + 128) = xmmword_256AE7658;
  *(_OWORD *)(a1 + 144) = v3;
  v4 = unk_256AE7688;
  *(_OWORD *)(a1 + 160) = xmmword_256AE7678;
  *(_OWORD *)(a1 + 176) = v4;
  v5 = unk_256AE7628;
  *(_OWORD *)(a1 + 64) = xmmword_256AE7618;
  *(_OWORD *)(a1 + 80) = v5;
  v6 = unk_256AE7648;
  *(_OWORD *)(a1 + 96) = xmmword_256AE7638;
  *(_OWORD *)(a1 + 112) = v6;
  v7 = unk_256AE75E8;
  *(_OWORD *)a1 = xmmword_256AE75D8;
  *(_OWORD *)(a1 + 16) = v7;
  result = *(double *)&xmmword_256AE75F8;
  v9 = unk_256AE7608;
  *(_OWORD *)(a1 + 32) = xmmword_256AE75F8;
  *(_OWORD *)(a1 + 48) = v9;
  return result;
}

double sub_23BF9435C@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_23BF9440C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_256AE5100, &qword_256AE50E8).n128_u64[0];
  return result;
}

double sub_23BF943B4@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_23BF9440C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_256AE5138, &qword_256AE5140).n128_u64[0];
  return result;
}

__n128 sub_23BF9440C@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t *a17)
{
  uint64_t v17;
  uint64_t *v19;
  void *v28;
  _OWORD *v29;
  __n128 result;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __n128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  v19 = a17;
  if ((a2 & 1) != 0)
    a1 = -INFINITY;
  if ((a4 & 1) != 0)
    a3 = a1;
  if ((a6 & 1) != 0)
    a5 = a3;
  if (a1 > a3 || a3 > a5)
    goto LABEL_22;
  if ((a8 & 1) != 0)
    a7 = -INFINITY;
  if ((a11 & 1) != 0)
    a10 = a7;
  if ((a13 & 1) != 0)
    a12 = a10;
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    sub_23BFF9688();
    v28 = (void *)sub_23BFF8B18();
    sub_23BFF83B0();

    v19 = a17;
  }
  sub_23BFF86EC();
  sub_23BE9F190(v17, a9, a16);
  v29 = (_OWORD *)(a9 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(v19) + 36));
  v29[4] = v35;
  v29[5] = v36;
  v29[6] = v37;
  *v29 = v31;
  v29[1] = v32;
  result = v34;
  v29[2] = v33;
  v29[3] = v34;
  return result;
}

__n128 sub_23BF945D8@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  char v18;
  void *v27;
  __n128 result;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __n128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  v18 = a17;
  if ((a2 & 1) != 0)
    a1 = -INFINITY;
  if ((a4 & 1) != 0)
    a3 = a1;
  if ((a6 & 1) != 0)
    a5 = a3;
  if (a1 > a3 || a3 > a5)
    goto LABEL_22;
  if ((a8 & 1) != 0)
    a7 = -INFINITY;
  if ((a11 & 1) != 0)
    a10 = a7;
  if ((a13 & 1) != 0)
    a12 = a10;
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    sub_23BFF9688();
    v27 = (void *)sub_23BFF8B18();
    sub_23BFF83B0();

    v18 = a17;
  }
  sub_23BFF86EC();
  *(_QWORD *)a9 = a16;
  *(_BYTE *)(a9 + 8) = v18 & 1;
  *(_OWORD *)(a9 + 80) = v33;
  *(_OWORD *)(a9 + 96) = v34;
  *(_OWORD *)(a9 + 112) = v35;
  *(_OWORD *)(a9 + 16) = v29;
  *(_OWORD *)(a9 + 32) = v30;
  result = v32;
  *(_OWORD *)(a9 + 48) = v31;
  *(__n128 *)(a9 + 64) = v32;
  return result;
}

double sub_23BF94780@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_23BF9440C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_256AE5910, &qword_256AE5918).n128_u64[0];
  return result;
}

uint64_t *sub_23BF947D8@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, _OWORD *a9@<X8>, double a10, char a11, double a12, char a13)
{
  uint64_t v13;
  void *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  if ((a2 & 1) != 0)
    a1 = -INFINITY;
  if ((a4 & 1) != 0)
    a3 = a1;
  if ((a6 & 1) != 0)
    a5 = a3;
  if (a1 > a3 || a3 > a5)
    goto LABEL_22;
  if ((a8 & 1) != 0)
    a7 = -INFINITY;
  if ((a11 & 1) != 0)
    a10 = a7;
  if ((a13 & 1) != 0)
    a12 = a10;
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    sub_23BFF9688();
    v23 = (void *)sub_23BFF8B18();
    sub_23BFF83B0();

  }
  sub_23BFF86EC();
  v24 = *(_OWORD *)(v13 + 144);
  a9[8] = *(_OWORD *)(v13 + 128);
  a9[9] = v24;
  a9[10] = *(_OWORD *)(v13 + 160);
  *(_OWORD *)((char *)a9 + 169) = *(_OWORD *)(v13 + 169);
  v25 = *(_OWORD *)(v13 + 80);
  a9[4] = *(_OWORD *)(v13 + 64);
  a9[5] = v25;
  v26 = *(_OWORD *)(v13 + 112);
  a9[6] = *(_OWORD *)(v13 + 96);
  a9[7] = v26;
  v27 = *(_OWORD *)(v13 + 16);
  *a9 = *(_OWORD *)v13;
  a9[1] = v27;
  v28 = *(_OWORD *)(v13 + 48);
  a9[2] = *(_OWORD *)(v13 + 32);
  a9[3] = v28;
  a9[16] = v34;
  a9[17] = v35;
  a9[18] = v36;
  a9[12] = v30;
  a9[13] = v31;
  a9[14] = v32;
  a9[15] = v33;
  return sub_23BFA0600((uint64_t *)v13);
}

uint64_t sub_23BF949A4@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v19;
  uint64_t v20;
  void *v29;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  v20 = a17;
  v19 = a18;
  if ((a2 & 1) != 0)
    a1 = -INFINITY;
  if ((a4 & 1) != 0)
    a3 = a1;
  if ((a6 & 1) != 0)
    a5 = a3;
  if (a1 > a3 || a3 > a5)
    goto LABEL_22;
  if ((a8 & 1) != 0)
    a7 = -INFINITY;
  if ((a11 & 1) != 0)
    a10 = a7;
  if ((a13 & 1) != 0)
    a12 = a10;
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    sub_23BFF9688();
    v29 = (void *)sub_23BFF8B18();
    sub_23BFF83B0();

    v20 = a17;
    v19 = a18;
  }
  sub_23BFF86EC();
  *(_OWORD *)(a9 + 72) = v34;
  *(_OWORD *)(a9 + 88) = v35;
  *(_OWORD *)(a9 + 104) = v36;
  *(_OWORD *)(a9 + 120) = v37;
  *(_OWORD *)(a9 + 24) = v31;
  *(_OWORD *)(a9 + 40) = v32;
  *(_QWORD *)a9 = a16;
  *(_QWORD *)(a9 + 8) = v20;
  *(_QWORD *)(a9 + 16) = v19;
  *(_OWORD *)(a9 + 56) = v33;
  swift_retain();
  swift_retain();
  return swift_retain();
}

uint64_t sub_23BF94B78@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, _OWORD *a9@<X8>, double a10, char a11, double a12, char a13)
{
  _OWORD *v13;
  void *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  if ((a2 & 1) != 0)
    a1 = -INFINITY;
  if ((a4 & 1) != 0)
    a3 = a1;
  if ((a6 & 1) != 0)
    a5 = a3;
  if (a1 > a3 || a3 > a5)
    goto LABEL_22;
  if ((a8 & 1) != 0)
    a7 = -INFINITY;
  if ((a11 & 1) != 0)
    a10 = a7;
  if ((a13 & 1) != 0)
    a12 = a10;
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    sub_23BFF9688();
    v23 = (void *)sub_23BFF8B18();
    sub_23BFF83B0();

  }
  sub_23BFF86EC();
  v24 = v13[11];
  a9[10] = v13[10];
  a9[11] = v24;
  *(_OWORD *)((char *)a9 + 186) = *(_OWORD *)((char *)v13 + 186);
  v25 = v13[7];
  a9[6] = v13[6];
  a9[7] = v25;
  v26 = v13[9];
  a9[8] = v13[8];
  a9[9] = v26;
  v27 = v13[3];
  a9[2] = v13[2];
  a9[3] = v27;
  v28 = v13[5];
  a9[4] = v13[4];
  a9[5] = v28;
  v29 = v13[1];
  *a9 = *v13;
  a9[1] = v29;
  a9[17] = v35;
  a9[18] = v36;
  a9[19] = v37;
  a9[13] = v31;
  a9[14] = v32;
  a9[15] = v33;
  a9[16] = v34;
  return sub_23BFA0C70((uint64_t)v13);
}

uint64_t *sub_23BF94D44@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13)
{
  uint64_t v13;
  void *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  if ((a2 & 1) != 0)
    a1 = -INFINITY;
  if ((a4 & 1) != 0)
    a3 = a1;
  if ((a6 & 1) != 0)
    a5 = a3;
  if (a1 > a3 || a3 > a5)
    goto LABEL_22;
  if ((a8 & 1) != 0)
    a7 = -INFINITY;
  if ((a11 & 1) != 0)
    a10 = a7;
  if ((a13 & 1) != 0)
    a12 = a10;
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    sub_23BFF9688();
    v23 = (void *)sub_23BFF8B18();
    sub_23BFF83B0();

  }
  sub_23BFF86EC();
  v24 = *(_OWORD *)(v13 + 112);
  *(_OWORD *)(a9 + 96) = *(_OWORD *)(v13 + 96);
  *(_OWORD *)(a9 + 112) = v24;
  v25 = *(_OWORD *)(v13 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v13 + 32);
  *(_OWORD *)(a9 + 48) = v25;
  v26 = *(_OWORD *)(v13 + 80);
  *(_OWORD *)(a9 + 64) = *(_OWORD *)(v13 + 64);
  *(_OWORD *)(a9 + 80) = v26;
  v27 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v13;
  *(_OWORD *)(a9 + 16) = v27;
  *(_OWORD *)(a9 + 184) = v32;
  *(_OWORD *)(a9 + 200) = v33;
  *(_OWORD *)(a9 + 216) = v34;
  *(_OWORD *)(a9 + 232) = v35;
  *(_OWORD *)(a9 + 136) = v29;
  *(_OWORD *)(a9 + 152) = v30;
  *(_BYTE *)(a9 + 128) = *(_BYTE *)(v13 + 128);
  *(_OWORD *)(a9 + 168) = v31;
  return sub_23BF56144((uint64_t *)v13);
}

uint64_t sub_23BF94F0C@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13)
{
  uint64_t v13;
  void *v23;
  __int128 v24;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  if ((a2 & 1) != 0)
    a1 = -INFINITY;
  if ((a4 & 1) != 0)
    a3 = a1;
  if ((a6 & 1) != 0)
    a5 = a3;
  if (a1 > a3 || a3 > a5)
    goto LABEL_22;
  if ((a8 & 1) != 0)
    a7 = -INFINITY;
  if ((a11 & 1) != 0)
    a10 = a7;
  if ((a13 & 1) != 0)
    a12 = a10;
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    sub_23BFF9688();
    v23 = (void *)sub_23BFF8B18();
    sub_23BFF83B0();

  }
  sub_23BFF86EC();
  v24 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v13;
  *(_OWORD *)(a9 + 16) = v24;
  *(_OWORD *)(a9 + 88) = v29;
  *(_OWORD *)(a9 + 104) = v30;
  *(_OWORD *)(a9 + 120) = v31;
  *(_OWORD *)(a9 + 136) = v32;
  *(_OWORD *)(a9 + 40) = v26;
  *(_OWORD *)(a9 + 56) = v27;
  *(_QWORD *)(a9 + 32) = *(_QWORD *)(v13 + 32);
  *(_OWORD *)(a9 + 72) = v28;
  return swift_bridgeObjectRetain();
}

uint64_t sub_23BF950C4@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v20;
  uint64_t v21;
  int v24;
  void *v31;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;

  v21 = a18;
  v20 = a19;
  if ((a2 & 1) != 0)
    a1 = -INFINITY;
  if ((a4 & 1) != 0)
    a3 = a1;
  v24 = a8 & 1;
  if ((a6 & 1) != 0)
    a5 = a3;
  if (a1 > a3 || a3 > a5)
    goto LABEL_22;
  if (v24)
    a7 = -INFINITY;
  if ((a11 & 1) != 0)
    a10 = a7;
  if ((a13 & 1) != 0)
    a12 = a10;
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    sub_23BFF9688();
    v31 = (void *)sub_23BFF8B18();
    sub_23BFF83B0();

    v20 = a19;
    v21 = a18;
  }
  sub_23BFF86EC();
  *(_QWORD *)a9 = a16;
  *(_QWORD *)(a9 + 8) = a17;
  *(_QWORD *)(a9 + 16) = v21;
  *(_QWORD *)(a9 + 24) = v20;
  *(_OWORD *)(a9 + 96) = v37;
  *(_OWORD *)(a9 + 112) = v38;
  *(_OWORD *)(a9 + 128) = v39;
  *(_OWORD *)(a9 + 32) = v33;
  *(_OWORD *)(a9 + 48) = v34;
  *(_OWORD *)(a9 + 64) = v35;
  *(_OWORD *)(a9 + 80) = v36;
  return sub_23BEA1DC0(a16, a17, v21, v20);
}

double ActionCardViewLayout.aspectRatio.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

double ActionCardViewLayout.mirroredArtworkAspectRatio.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

double ActionCardViewLayout.cornerRadius.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

double ActionCardViewLayout.mirrorHeightPercentage.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 40);
}

double ActionCardViewLayout.platterCornerRadius.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 48);
}

__n128 ActionCardViewLayout.titlePadding.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 56);
  v3 = *(_OWORD *)(v1 + 72);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 ActionCardViewLayout.subtitlePadding.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 88);
  v3 = *(_OWORD *)(v1 + 104);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 ActionCardViewLayout.captionPadding.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 120);
  v3 = *(_OWORD *)(v1 + 136);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 ActionCardViewLayout.primaryButtonPadding.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 152);
  v3 = *(_OWORD *)(v1 + 168);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 ActionCardViewLayout.secondaryButtonPadding.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 184);
  v3 = *(_OWORD *)(v1 + 200);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t ActionCardViewLayout.titleLineLimit.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 216);
}

uint64_t ActionCardViewLayout.subtitleLineLimit.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 224);
}

uint64_t ActionCardViewLayout.captionLineLimit.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 240);
}

__n128 ActionCardViewLayout.init(aspectRatio:mirroredArtworkAspectRatio:cornerRadius:mirrorHeightPercentage:platterCornerRadius:titlePadding:subtitlePadding:captionPadding:primaryButtonPadding:secondaryButtonPadding:titleLineLimit:subtitleLineLimit:captionLineLimit:)@<Q0>(_OWORD *a1@<X0>, _OWORD *a2@<X1>, _OWORD *a3@<X2>, _OWORD *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, double a12@<D2>, double a13@<D3>, double a14@<D4>, double a15@<D5>, double a16@<D6>, uint64_t a17)
{
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 result;
  __int128 v22;

  *(double *)a9 = a10;
  *(double *)(a9 + 8) = a11;
  *(double *)(a9 + 16) = a12;
  *(double *)(a9 + 24) = a13;
  *(double *)(a9 + 32) = a14;
  *(double *)(a9 + 40) = a15;
  *(double *)(a9 + 48) = a16;
  v17 = a1[1];
  *(_OWORD *)(a9 + 56) = *a1;
  *(_OWORD *)(a9 + 72) = v17;
  v18 = a2[1];
  *(_OWORD *)(a9 + 88) = *a2;
  *(_OWORD *)(a9 + 104) = v18;
  v19 = a3[1];
  *(_OWORD *)(a9 + 120) = *a3;
  *(_OWORD *)(a9 + 136) = v19;
  v20 = a4[1];
  *(_OWORD *)(a9 + 152) = *a4;
  *(_OWORD *)(a9 + 168) = v20;
  result = *(__n128 *)a5;
  v22 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)(a9 + 184) = *(_OWORD *)a5;
  *(_OWORD *)(a9 + 200) = v22;
  *(_QWORD *)(a9 + 216) = a6;
  *(_QWORD *)(a9 + 224) = a7;
  *(_BYTE *)(a9 + 232) = a8 & 1;
  *(_QWORD *)(a9 + 240) = a17;
  return result;
}

double sub_23BF95394()
{
  double result;

  xmmword_256AE74E0 = xmmword_23C005260;
  *(_OWORD *)algn_256AE74F0 = xmmword_23C005270;
  xmmword_256AE7500 = xmmword_23C005280;
  unk_256AE7510 = xmmword_23C005290;
  xmmword_256AE7520 = xmmword_23C0052A0;
  unk_256AE7530 = xmmword_23C0052B0;
  xmmword_256AE7540 = xmmword_23C0052C0;
  unk_256AE7550 = xmmword_23C0052B0;
  xmmword_256AE7560 = xmmword_23C0052D0;
  unk_256AE7570 = xmmword_23C0052E0;
  xmmword_256AE7580 = xmmword_23C0052F0;
  qword_256AE7590 = 0x4042000000000000;
  *(_OWORD *)algn_256AE7598 = 0u;
  *(__int128 *)((char *)&xmmword_256AE75A0 + 8) = 0u;
  *(_QWORD *)&result = 3;
  unk_256AE75B8 = xmmword_23C005300;
  byte_256AE75C8 = 0;
  qword_256AE75D0 = 1;
  return result;
}

double static ActionCardViewLayout.fullCard.getter@<D0>(uint64_t a1@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  double result;
  __int128 v9;

  if (qword_256AE3398 != -1)
    swift_once();
  v2 = unk_256AE75B0;
  *(_OWORD *)(a1 + 192) = xmmword_256AE75A0;
  *(_OWORD *)(a1 + 208) = v2;
  *(_OWORD *)(a1 + 224) = unk_256AE75C0;
  *(_QWORD *)(a1 + 240) = qword_256AE75D0;
  v3 = unk_256AE7570;
  *(_OWORD *)(a1 + 128) = xmmword_256AE7560;
  *(_OWORD *)(a1 + 144) = v3;
  v4 = *(_OWORD *)&qword_256AE7590;
  *(_OWORD *)(a1 + 160) = xmmword_256AE7580;
  *(_OWORD *)(a1 + 176) = v4;
  v5 = unk_256AE7530;
  *(_OWORD *)(a1 + 64) = xmmword_256AE7520;
  *(_OWORD *)(a1 + 80) = v5;
  v6 = unk_256AE7550;
  *(_OWORD *)(a1 + 96) = xmmword_256AE7540;
  *(_OWORD *)(a1 + 112) = v6;
  v7 = *(_OWORD *)algn_256AE74F0;
  *(_OWORD *)a1 = xmmword_256AE74E0;
  *(_OWORD *)(a1 + 16) = v7;
  result = *(double *)&xmmword_256AE7500;
  v9 = unk_256AE7510;
  *(_OWORD *)(a1 + 32) = xmmword_256AE7500;
  *(_OWORD *)(a1 + 48) = v9;
  return result;
}

double sub_23BF954D4()
{
  double result;

  xmmword_256AE75D8 = xmmword_23C005260;
  unk_256AE75E8 = xmmword_23C005270;
  xmmword_256AE75F8 = xmmword_23C005280;
  unk_256AE7608 = xmmword_23C005290;
  xmmword_256AE7618 = xmmword_23C0052A0;
  unk_256AE7628 = xmmword_23C0052B0;
  xmmword_256AE7638 = xmmword_23C0052C0;
  unk_256AE7648 = xmmword_23C0052B0;
  __asm { FMOV            V0.2D, #16.0 }
  xmmword_256AE7658 = _Q0;
  unk_256AE7668 = xmmword_23C0052E0;
  xmmword_256AE7678 = xmmword_23C0052F0;
  unk_256AE7688 = xmmword_23C005310;
  xmmword_256AE7698 = xmmword_23C0052D0;
  qword_256AE76A8 = 0;
  *(_QWORD *)&result = 2;
  unk_256AE76B0 = xmmword_23C005320;
  BYTE8(xmmword_256AE76B8) = 0;
  qword_256AE76C8 = 1;
  return result;
}

double sub_23BF95580()
{
  double result;

  xmmword_256AE76D0 = xmmword_23C005260;
  unk_256AE76E0 = xmmword_23C005270;
  xmmword_256AE76F0 = xmmword_23C005280;
  unk_256AE7700 = xmmword_23C005290;
  xmmword_256AE7710 = xmmword_23C0052A0;
  unk_256AE7720 = xmmword_23C0052B0;
  xmmword_256AE7730 = xmmword_23C0052C0;
  unk_256AE7740 = xmmword_23C0052B0;
  __asm { FMOV            V1.2D, #16.0 }
  xmmword_256AE7750 = xmmword_23C0016A0;
  unk_256AE7760 = _Q1;
  xmmword_256AE7770 = xmmword_23C005330;
  qword_256AE7780 = 0x4030000000000000;
  *(_OWORD *)algn_256AE7788 = 0u;
  *(__int128 *)((char *)&xmmword_256AE7790 + 8) = 0u;
  *(_QWORD *)&result = 2;
  unk_256AE77A8 = xmmword_23BFFF250;
  byte_256AE77B8 = 0;
  qword_256AE77C0 = 1;
  return result;
}

double static ActionCardViewLayout.platterCard.getter@<D0>(uint64_t a1@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  double result;
  __int128 v9;

  if (qword_256AE33A8 != -1)
    swift_once();
  v2 = unk_256AE77A0;
  *(_OWORD *)(a1 + 192) = xmmword_256AE7790;
  *(_OWORD *)(a1 + 208) = v2;
  *(_OWORD *)(a1 + 224) = unk_256AE77B0;
  *(_QWORD *)(a1 + 240) = qword_256AE77C0;
  v3 = unk_256AE7760;
  *(_OWORD *)(a1 + 128) = xmmword_256AE7750;
  *(_OWORD *)(a1 + 144) = v3;
  v4 = *(_OWORD *)&qword_256AE7780;
  *(_OWORD *)(a1 + 160) = xmmword_256AE7770;
  *(_OWORD *)(a1 + 176) = v4;
  v5 = unk_256AE7720;
  *(_OWORD *)(a1 + 64) = xmmword_256AE7710;
  *(_OWORD *)(a1 + 80) = v5;
  v6 = unk_256AE7740;
  *(_OWORD *)(a1 + 96) = xmmword_256AE7730;
  *(_OWORD *)(a1 + 112) = v6;
  v7 = unk_256AE76E0;
  *(_OWORD *)a1 = xmmword_256AE76D0;
  *(_OWORD *)(a1 + 16) = v7;
  result = *(double *)&xmmword_256AE76F0;
  v9 = unk_256AE7700;
  *(_OWORD *)(a1 + 32) = xmmword_256AE76F0;
  *(_OWORD *)(a1 + 48) = v9;
  return result;
}

uint64_t sub_23BF956BC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23BF956F8 + 4 * byte_23C005340[a1]))(0x6152746365707361, 0xEB000000006F6974);
}

unint64_t sub_23BF956F8()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_23BF9584C()
{
  unsigned __int8 *v0;

  return sub_23BF956BC(*v0);
}

uint64_t sub_23BF95854@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BFA06CC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BF95878()
{
  sub_23BF9DCBC();
  return sub_23BFF9A30();
}

uint64_t sub_23BF958A0()
{
  sub_23BF9DCBC();
  return sub_23BFF9A3C();
}

uint64_t ActionCardViewLayout.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v27[2];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  char v58;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE77C8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = v1[1];
  v9 = v1[2];
  v50 = v1[3];
  v51 = v9;
  v10 = v1[4];
  v48 = v1[5];
  v49 = v10;
  v43 = v1[6];
  v39 = v1[7];
  v40 = v1[8];
  v42 = v1[9];
  v41 = v1[10];
  v35 = v1[11];
  v36 = v1[12];
  v38 = v1[13];
  v37 = v1[14];
  v31 = v1[15];
  v32 = v1[16];
  v34 = v1[17];
  v33 = v1[18];
  v11 = v1[19];
  v12 = v1[21];
  v46 = v1[20];
  v47 = v11;
  v14 = v1[22];
  v13 = v1[23];
  v15 = v1[24];
  v16 = v1[25];
  v17 = v1[26];
  v18 = v1[27];
  v44 = v1[28];
  v45 = v18;
  v19 = *((unsigned __int8 *)v1 + 232);
  v20 = v1[30];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BF9DCBC();
  sub_23BFF9A18();
  v53 = v7;
  v54 = v8;
  v58 = 0;
  type metadata accessor for CGSize(0);
  sub_23BEA1BB8(&qword_256AE3468, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, MEMORY[0x24BDBD848]);
  v21 = v52;
  sub_23BFF9940();
  if (!v21)
  {
    v22 = v48;
    v23 = v49;
    v30 = v14;
    v52 = v12;
    v24 = v46;
    v25 = v47;
    v28 = v17;
    v29 = v16;
    v57 = v19;
    v27[1] = v20;
    v53 = v51;
    v54 = v50;
    v58 = 1;
    sub_23BFF9940();
    v53 = v23;
    v58 = 2;
    sub_23BEBFC1C();
    sub_23BFF9940();
    v53 = v22;
    v58 = 3;
    sub_23BFF9940();
    v53 = v43;
    v58 = 4;
    sub_23BFF9940();
    v53 = v39;
    v54 = v40;
    v55 = v42;
    v56 = v41;
    v58 = 5;
    sub_23BF3CBE0();
    sub_23BFF9940();
    v53 = v35;
    v54 = v36;
    v55 = v38;
    v56 = v37;
    v58 = 6;
    sub_23BFF9940();
    v53 = v31;
    v54 = v32;
    v55 = v34;
    v56 = v33;
    v58 = 7;
    sub_23BFF9940();
    v53 = v25;
    v54 = v24;
    v55 = v52;
    v56 = v30;
    v58 = 8;
    sub_23BFF9940();
    v53 = v13;
    v54 = v15;
    v55 = v29;
    v56 = v28;
    v58 = 9;
    sub_23BFF9940();
    LOBYTE(v53) = 10;
    sub_23BFF9934();
    LOBYTE(v53) = 11;
    sub_23BFF98F8();
    LOBYTE(v53) = 12;
    sub_23BFF9934();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t ActionCardViewLayout.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE77D8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BF9DCBC();
  sub_23BFF9A0C();
  if (!v2)
  {
    type metadata accessor for CGSize(0);
    v62 = 0;
    sub_23BEA1BB8(&qword_256AE3478, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, MEMORY[0x24BDBD860]);
    sub_23BFF98C8();
    v9 = v58;
    v10 = v59;
    v62 = 1;
    sub_23BFF98C8();
    v11 = v58;
    v12 = v59;
    v62 = 2;
    sub_23BEC0384();
    sub_23BFF98C8();
    v13 = v58;
    v62 = 3;
    sub_23BFF98C8();
    v14 = v58;
    v62 = 4;
    sub_23BFF98C8();
    v15 = v58;
    v62 = 5;
    sub_23BF3CC68();
    sub_23BFF98C8();
    v55 = v14;
    v56 = v15;
    v16 = v59;
    v57 = v58;
    v18 = v60;
    v17 = v61;
    v62 = 6;
    sub_23BFF98C8();
    v52 = v17;
    v53 = v18;
    v54 = v16;
    v19 = v58;
    v20 = v59;
    v21 = v60;
    v51 = v61;
    v62 = 7;
    sub_23BFF98C8();
    v49 = v59;
    v50 = v58;
    v48 = v60;
    v47 = v61;
    v62 = 8;
    sub_23BFF98C8();
    v46 = v58;
    v45 = v59;
    v44 = v60;
    v43 = v61;
    v62 = 9;
    sub_23BFF98C8();
    v42 = v58;
    v41 = v59;
    v40 = v60;
    v39 = v61;
    LOBYTE(v58) = 10;
    v22 = sub_23BFF98BC();
    LOBYTE(v58) = 11;
    v38 = sub_23BFF9880();
    v24 = v23;
    LOBYTE(v58) = 12;
    v26 = sub_23BFF98BC();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v62 = v24 & 1;
    *(_QWORD *)a2 = v9;
    *(_QWORD *)(a2 + 8) = v10;
    *(_QWORD *)(a2 + 16) = v11;
    *(_QWORD *)(a2 + 24) = v12;
    v27 = v55;
    *(_QWORD *)(a2 + 32) = v13;
    *(_QWORD *)(a2 + 40) = v27;
    v28 = v57;
    *(_QWORD *)(a2 + 48) = v56;
    *(_QWORD *)(a2 + 56) = v28;
    v29 = v53;
    *(_QWORD *)(a2 + 64) = v54;
    *(_QWORD *)(a2 + 72) = v29;
    *(_QWORD *)(a2 + 80) = v52;
    *(_QWORD *)(a2 + 88) = v19;
    *(_QWORD *)(a2 + 96) = v20;
    *(_QWORD *)(a2 + 104) = v21;
    v30 = v50;
    *(_QWORD *)(a2 + 112) = v51;
    *(_QWORD *)(a2 + 120) = v30;
    v31 = v48;
    *(_QWORD *)(a2 + 128) = v49;
    *(_QWORD *)(a2 + 136) = v31;
    v32 = v46;
    *(_QWORD *)(a2 + 144) = v47;
    *(_QWORD *)(a2 + 152) = v32;
    v33 = v44;
    *(_QWORD *)(a2 + 160) = v45;
    *(_QWORD *)(a2 + 168) = v33;
    v34 = v42;
    *(_QWORD *)(a2 + 176) = v43;
    *(_QWORD *)(a2 + 184) = v34;
    v35 = v40;
    *(_QWORD *)(a2 + 192) = v41;
    *(_QWORD *)(a2 + 200) = v35;
    *(_QWORD *)(a2 + 208) = v39;
    v36 = v38;
    *(_QWORD *)(a2 + 216) = v22;
    *(_QWORD *)(a2 + 224) = v36;
    *(_BYTE *)(a2 + 232) = v62;
    *(_QWORD *)(a2 + 240) = v26;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_23BF963DC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ActionCardViewLayout.init(from:)(a1, a2);
}

uint64_t sub_23BF963F0(_QWORD *a1)
{
  return ActionCardViewLayout.encode(to:)(a1);
}

uint64_t ActionCardViewLayout.hash(into:)()
{
  uint64_t v0;
  int v2;

  v2 = *(unsigned __int8 *)(v0 + 232);
  sub_23BEA0B6C();
  sub_23BEA0B6C();
  sub_23BFF99F4();
  sub_23BFF99F4();
  sub_23BFF99F4();
  sub_23BFF99F4();
  sub_23BFF99F4();
  sub_23BFF99F4();
  sub_23BFF99F4();
  sub_23BFF99F4();
  sub_23BFF99F4();
  sub_23BFF99F4();
  sub_23BFF99F4();
  sub_23BFF99F4();
  sub_23BFF99F4();
  sub_23BFF99F4();
  sub_23BFF99F4();
  sub_23BFF99F4();
  sub_23BFF99F4();
  sub_23BFF99F4();
  sub_23BFF99F4();
  sub_23BFF99F4();
  sub_23BFF99F4();
  sub_23BFF99F4();
  sub_23BFF99F4();
  sub_23BFF99DC();
  sub_23BFF99E8();
  if (v2 != 1)
    sub_23BFF99DC();
  return sub_23BFF99DC();
}

uint64_t ActionCardViewLayout.hashValue.getter()
{
  sub_23BFF99D0();
  ActionCardViewLayout.hash(into:)();
  return sub_23BFF9A00();
}

uint64_t sub_23BF966B4()
{
  sub_23BFF99D0();
  ActionCardViewLayout.hash(into:)();
  return sub_23BFF9A00();
}

uint64_t sub_23BF966F4()
{
  sub_23BFF99D0();
  ActionCardViewLayout.hash(into:)();
  return sub_23BFF9A00();
}

uint64_t sub_23BF96730@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  _QWORD v44[2];
  _QWORD v45[2];
  _QWORD v46[2];
  _QWORD v47[3];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[2];

  v38 = a2;
  v34 = sub_23BFF8890();
  *(_QWORD *)&v33 = *(_QWORD *)(v34 - 8);
  MEMORY[0x24BDAC7A8](v34);
  v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  sub_23BFF8ADC();
  v32 = v6;
  v7 = sub_23BFF862C();
  v31 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v31 - v11;
  v35 = sub_23BFF862C();
  v37 = *(_QWORD *)(v35 - 8);
  MEMORY[0x24BDAC7A8](v35);
  v36 = (char *)&v31 - v13;
  v14 = *(_QWORD *)(a1 + 40);
  sub_23BFF8E00();
  sub_23BFF886C();
  sub_23BFF8620();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v5, v34);
  v15 = *(void (**)(char *, uint64_t))(v31 + 8);
  v15(v9, v7);
  v16 = sub_23BEA1BB8((unint64_t *)&qword_256AE3908, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088], MEMORY[0x24BDF1078]);
  v51[0] = v14;
  v51[1] = v16;
  v17 = MEMORY[0x24BDED308];
  v18 = MEMORY[0x242615198](MEMORY[0x24BDED308], v7, v51);
  sub_23BFF8CEC();
  v15(v12, v7);
  v34 = sub_23BFF91B4();
  v39 = v32;
  v33 = *(_OWORD *)(a1 + 24);
  v40 = v33;
  v41 = v14;
  v42 = *(_OWORD *)(a1 + 48);
  v43 = v2;
  v47[2] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE7898);
  v48 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE78A0);
  v49 = v48;
  v50 = sub_23BFF862C();
  swift_getTupleTypeMetadata();
  v19 = sub_23BFF9220();
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v19);
  v20 = sub_23BFF90AC();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE5160);
  v21 = sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3C28);
  v22 = sub_23BFF862C();
  v23 = sub_23BFF862C();
  v47[0] = v18;
  v47[1] = MEMORY[0x24BDEEC40];
  v24 = v35;
  MEMORY[0x242615198](v17, v35, v47);
  v25 = MEMORY[0x242615198](MEMORY[0x24BDF4700], v20);
  v26 = sub_23BEA1F94(&qword_256AE78A8, &qword_256AE5160, MEMORY[0x24BDF06D0]);
  v46[0] = v25;
  v46[1] = v26;
  v27 = MEMORY[0x242615198](v17, v21, v46);
  v28 = sub_23BEA1F94(qword_256AE3C30, &qword_256AE3C28, MEMORY[0x24BDEB950]);
  v45[0] = v27;
  v45[1] = v28;
  v44[0] = MEMORY[0x242615198](v17, v22, v45);
  v44[1] = MEMORY[0x24BDECC60];
  MEMORY[0x242615198](v17, v23, v44);
  v29 = v36;
  sub_23BFF8ECC();
  return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v29, v24);
}

uint64_t sub_23BF96BB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD v72[2];
  _QWORD v73[2];
  _QWORD v74[3];
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v54 = a7;
  v53 = a6;
  v52 = a5;
  v49 = a4;
  v48 = a2;
  v51 = a1;
  v64 = a8;
  v57 = sub_23BFF86BC();
  MEMORY[0x24BDAC7A8](v57);
  v10 = (uint64_t *)((char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v55 = sub_23BFF9184();
  v56 = *(_QWORD *)(v55 - 8);
  MEMORY[0x24BDAC7A8](v55);
  v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74[2] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE7898);
  v75 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE78A0);
  v76 = v75;
  v77 = sub_23BFF862C();
  swift_getTupleTypeMetadata();
  v13 = sub_23BFF9220();
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v13);
  v14 = sub_23BFF90AC();
  v47 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v47 - v15;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE5160);
  v17 = sub_23BFF862C();
  v50 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v47 - v18;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3C28);
  v20 = sub_23BFF862C();
  v60 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v47 - v21;
  v61 = v23;
  v58 = sub_23BFF862C();
  v63 = *(_QWORD *)(v58 - 8);
  MEMORY[0x24BDAC7A8](v58);
  v59 = (char *)&v47 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v25);
  v62 = (uint64_t)&v47 - v26;
  sub_23BFF889C();
  v65 = v48;
  v66 = a3;
  v67 = v49;
  v68 = v52;
  v69 = v53;
  v70 = v54;
  v27 = v51;
  v71 = v51;
  sub_23BFF90A0();
  sub_23BFF9178();
  sub_23BFF8B60();
  v28 = MEMORY[0x242615198](MEMORY[0x24BDF4700], v14);
  v29 = v55;
  sub_23BFF8CC8();
  (*(void (**)(char *, uint64_t))(v56 + 8))(v12, v29);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v16, v14);
  v30 = *(_QWORD *)(v27 + 48);
  v31 = (char *)v10 + *(int *)(v57 + 20);
  v32 = *MEMORY[0x24BDEEB68];
  v33 = sub_23BFF8854();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 104))(v31, v32, v33);
  *v10 = v30;
  v10[1] = v30;
  v34 = sub_23BEA1F94(&qword_256AE78A8, &qword_256AE5160, MEMORY[0x24BDF06D0]);
  v74[0] = v28;
  v74[1] = v34;
  v35 = MEMORY[0x242615198](MEMORY[0x24BDED308], v17, v74);
  sub_23BEA1BB8(&qword_256AE3CB8, (uint64_t (*)(uint64_t))MEMORY[0x24BDED998], MEMORY[0x24BDED990]);
  sub_23BFF8F44();
  sub_23BEC4004((uint64_t)v10);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v19, v17);
  LOBYTE(v28) = sub_23BFF8B78();
  v36 = sub_23BFF8B84();
  v37 = sub_23BFF8B9C();
  sub_23BFF8B90();
  sub_23BFF8B90();
  if (sub_23BFF8B90() != v28)
    sub_23BFF8B90();
  sub_23BFF8B90();
  if (sub_23BFF8B90() != v36)
    sub_23BFF8B90();
  sub_23BFF8B90();
  if (sub_23BFF8B90() != v37)
    sub_23BFF8B90();
  v38 = sub_23BEA1F94(qword_256AE3C30, &qword_256AE3C28, MEMORY[0x24BDEB950]);
  v73[0] = v35;
  v73[1] = v38;
  v39 = MEMORY[0x24BDED308];
  v40 = v61;
  v41 = MEMORY[0x242615198](MEMORY[0x24BDED308], v61, v73);
  v42 = (uint64_t)v59;
  sub_23BFF8EF0();
  (*(void (**)(char *, uint64_t))(v60 + 8))(v22, v40);
  v72[0] = v41;
  v72[1] = MEMORY[0x24BDECC60];
  v43 = v58;
  MEMORY[0x242615198](v39, v58, v72);
  v44 = v62;
  sub_23BEA72EC(v42, v43, v62);
  v45 = *(void (**)(uint64_t, uint64_t))(v63 + 8);
  v45(v42, v43);
  sub_23BEA5C0C(v44, v43, v64);
  return ((uint64_t (*)(uint64_t, uint64_t))v45)(v44, v43);
}

void sub_23BF971EC(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[40];
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  _BYTE *v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  _BYTE *v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v62 = a6;
  v59 = a4;
  v51 = a3;
  v46 = a7;
  v48 = sub_23BFF862C();
  v44 = *(_QWORD *)(v48 - 8);
  MEMORY[0x24BDAC7A8](v48);
  v47 = &v30[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v11);
  v45 = &v30[-v12];
  v55 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE7970);
  v54 = *(_QWORD *)(v55 - 8);
  MEMORY[0x24BDAC7A8](v55);
  v53 = &v30[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE7978);
  MEMORY[0x24BDAC7A8](v52);
  v57 = &v30[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v61 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE7980);
  v49 = *(_QWORD *)(v61 - 8);
  MEMORY[0x24BDAC7A8](v61);
  v56 = &v30[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE78A0);
  MEMORY[0x24BDAC7A8](v40);
  v43 = &v30[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v17);
  v42 = &v30[-v18];
  MEMORY[0x24BDAC7A8](v19);
  v64 = &v30[-v20];
  MEMORY[0x24BDAC7A8](v21);
  v65 = &v30[-v22];
  v63 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE78E8);
  MEMORY[0x24BDAC7A8](v63);
  v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5608);
  MEMORY[0x24BDAC7A8](v37);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5638);
  MEMORY[0x24BDAC7A8](v23);
  v60 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE79A8);
  MEMORY[0x24BDAC7A8](v60);
  v58 = &v30[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE79B0);
  v33 = *(_QWORD *)(v35 - 8);
  MEMORY[0x24BDAC7A8](v35);
  v32 = &v30[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE79B8);
  MEMORY[0x24BDAC7A8](v31);
  v36 = &v30[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE79C0);
  MEMORY[0x24BDAC7A8](v50);
  v34 = &v30[-((v27 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE7898);
  MEMORY[0x24BDAC7A8](v38);
  v39 = &v30[-((v28 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v29);
  v66 = a1;
  v67 = a2;
  v41 = a2;
  v68 = v51;
  v69 = v59;
  v51 = a5;
  v70 = a5;
  v71 = v62;
  type metadata accessor for ActionCardView();
}

uint64_t sub_23BF976CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t KeyPath;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t);
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(uint64_t);
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t (*v84)(uint64_t);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void (*v109)(uint64_t, uint64_t);
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;

  v8 = *(int *)(a1 + 80);
  *(_QWORD *)(v7 - 224) = v1;
  v9 = (uint64_t *)(v1 + v8);
  v10 = v9[3];
  v11 = 1;
  v12 = (unsigned int *)MEMORY[0x24BDECF38];
  *(_QWORD *)(v7 - 264) = a1;
  *(_QWORD *)(v7 - 288) = v10;
  *(_QWORD *)(v7 - 240) = v3;
  *(_QWORD *)(v7 - 304) = v6;
  if (v10)
  {
    *(_QWORD *)(v7 - 536) = v2;
    v13 = *v9;
    v14 = v9[1];
    v15 = v9[2];
    *(_QWORD *)(v7 - 528) = v15 & 1;
    KeyPath = swift_getKeyPath();
    v17 = *MEMORY[0x24BDF1D90];
    v18 = sub_23BFF8C44();
    v19 = *(_QWORD *)(v18 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 104))(v4, v17, v18);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v19 + 56))(v4, 0, 1, v18);
    v20 = swift_getKeyPath();
    sub_23BE9F190(v4, (uint64_t)v5 + *(int *)(*(_QWORD *)(v7 - 472) + 28), &qword_256AE5638);
    *v5 = v20;
    v21 = *(_QWORD *)(v7 - 296);
    sub_23BE9F190((uint64_t)v5, v21 + *(int *)(*(_QWORD *)(v7 - 280) + 36), &qword_256AE5608);
    *(_QWORD *)v21 = v13;
    *(_QWORD *)(v21 + 8) = v14;
    v22 = *(_QWORD *)(v7 - 528);
    *(_BYTE *)(v21 + 16) = v22;
    v23 = *(_QWORD *)(v7 - 288);
    *(_QWORD *)(v21 + 24) = v23;
    *(_QWORD *)(v21 + 32) = KeyPath;
    *(_BYTE *)(v21 + 40) = 1;
    *(_QWORD *)(v7 - 552) = v15;
    sub_23BEA1DC0(v13, v14, v15, v23);
    *(_QWORD *)(v7 - 472) = v13;
    *(_QWORD *)(v7 - 544) = v14;
    v24 = v14;
    v6 = *(_QWORD *)(v7 - 304);
    sub_23BEA0EAC(v13, v24, v22);
    swift_bridgeObjectRetain();
    swift_retain();
    sub_23BE9F3A0((uint64_t)v5, &qword_256AE5608);
    sub_23BE9F3A0(v4, &qword_256AE5638);
    swift_release();
    v25 = (unsigned int *)MEMORY[0x24BDECF38];
    v26 = *MEMORY[0x24BDECF38];
    v27 = sub_23BFF85F0();
    v28 = (uint64_t (*)(uint64_t))MEMORY[0x24BDECF50];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 104))(v6, v26, v27);
    sub_23BEA1BB8((unint64_t *)&qword_256AE3740, v28, MEMORY[0x24BDECF78]);
    result = sub_23BFF93AC();
    if ((result & 1) == 0)
    {
      __break(1u);
      goto LABEL_15;
    }
    v30 = *(_QWORD *)(v7 - 552) & 1;
    sub_23BFA00F0();
    sub_23BEA1F94(&qword_256AE7918, &qword_256AE78E8, MEMORY[0x24BEE30C8]);
    v31 = *(_QWORD *)(v7 - 512);
    v32 = *(_QWORD *)(v7 - 296);
    sub_23BFF8D94();
    sub_23BE9F3A0(v6, &qword_256AE78E8);
    sub_23BE9F3A0(v32, &qword_256AE79A8);
    v33 = *(_QWORD **)(v7 - 224);
    v34 = v33[30];
    v35 = swift_getKeyPath();
    v36 = *(_QWORD *)(v7 - 504);
    v37 = *(_QWORD *)(v7 - 480);
    v38 = *(_QWORD *)(v7 - 488);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16))(v37, v31, v38);
    v39 = v37 + *(int *)(*(_QWORD *)(v7 - 520) + 36);
    *(_QWORD *)v39 = v35;
    *(_QWORD *)(v39 + 8) = v34;
    *(_BYTE *)(v39 + 16) = 0;
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v31, v38);
    v40 = v33[15];
    v41 = v33[16];
    v42 = v33[17];
    v43 = v33[18];
    LOBYTE(v35) = sub_23BFF8B60();
    v44 = *(_QWORD *)(v7 - 496);
    sub_23BE9F190(v37, v44, &qword_256AE79B8);
    sub_23BEA0F64(*(_QWORD *)(v7 - 472), *(_QWORD *)(v7 - 544), v30);
    swift_bridgeObjectRelease();
    v45 = *(_QWORD *)(v7 - 368);
    v46 = v44 + *(int *)(v45 + 36);
    *(_BYTE *)v46 = v35;
    *(_QWORD *)(v46 + 8) = v42;
    *(_QWORD *)(v46 + 16) = v41;
    *(_QWORD *)(v46 + 24) = v40;
    *(_QWORD *)(v46 + 32) = v43;
    *(_BYTE *)(v46 + 40) = 0;
    sub_23BE9F3A0(v37, &qword_256AE79B8);
    v3 = *(_QWORD *)(v7 - 240);
    sub_23BEC42E0(v44, v3, &qword_256AE79C0);
    v11 = 0;
    v47 = *(_QWORD *)(v7 - 264);
    v2 = *(_QWORD *)(v7 - 536);
  }
  else
  {
    v47 = a1;
    v25 = v12;
    v45 = *(_QWORD *)(v7 - 368);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 56))(v3, v11, 1, v45);
  v48 = (uint64_t *)(*(_QWORD *)(v7 - 224) + *(int *)(v47 + 72));
  v49 = v48[3];
  if (!v49)
  {
    v74 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 376) + 56);
    v71 = *(_QWORD *)(v7 - 272);
    v74(*(_QWORD *)(v7 - 232), 1, 1, v71);
    goto LABEL_9;
  }
  v50 = *v48;
  v51 = v48[1];
  v52 = v48[2];
  v53 = swift_getKeyPath();
  *(_QWORD *)(v7 - 136) = v50;
  *(_QWORD *)(v7 - 128) = v51;
  *(_BYTE *)(v7 - 120) = v52 & 1;
  *(_QWORD *)(v7 - 112) = v49;
  *(_QWORD *)(v7 - 104) = v53;
  *(_BYTE *)(v7 - 96) = 1;
  v54 = *v25;
  v55 = sub_23BFF85F0();
  v56 = (uint64_t (*)(uint64_t))MEMORY[0x24BDECF50];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 104))(v6, v54, v55);
  sub_23BEA1DC0(v50, v51, v52, v49);
  sub_23BEA0EAC(v50, v51, v52 & 1);
  sub_23BEA1BB8((unint64_t *)&qword_256AE3740, v56, MEMORY[0x24BDECF78]);
  swift_bridgeObjectRetain();
  result = sub_23BFF93AC();
  if ((result & 1) == 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  *(_DWORD *)(v7 - 280) = v52 & 1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE79E0);
  sub_23BFA0048();
  sub_23BEA1F94(&qword_256AE7918, &qword_256AE78E8, MEMORY[0x24BEE30C8]);
  *(_QWORD *)(v7 - 288) = v51;
  v57 = v6;
  v58 = *(_QWORD *)(v7 - 344);
  sub_23BFF8D94();
  sub_23BE9F3A0(v57, &qword_256AE78E8);
  sub_23BEA0F64(*(_QWORD *)(v7 - 136), *(_QWORD *)(v7 - 128), *(_BYTE *)(v7 - 120));
  swift_bridgeObjectRelease();
  swift_release();
  v59 = *(_QWORD **)(v7 - 224);
  v60 = v59[27];
  v61 = swift_getKeyPath();
  v62 = *(_QWORD *)(v7 - 336);
  v63 = *(_QWORD *)(v7 - 312);
  v64 = *(_QWORD *)(v7 - 328);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 16))(v63, v58, v64);
  v65 = v63 + *(int *)(*(_QWORD *)(v7 - 352) + 36);
  *(_QWORD *)v65 = v61;
  *(_QWORD *)(v65 + 8) = v60;
  *(_BYTE *)(v65 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v58, v64);
  v66 = v59[7];
  v67 = v59[8];
  v69 = v59[9];
  v68 = v59[10];
  LOBYTE(v61) = sub_23BFF8B60();
  v70 = *(_QWORD *)(v7 - 320);
  sub_23BE9F190(v63, v70, &qword_256AE7978);
  sub_23BEA0F64(v50, *(_QWORD *)(v7 - 288), *(_DWORD *)(v7 - 280));
  swift_bridgeObjectRelease();
  v71 = *(_QWORD *)(v7 - 272);
  v72 = v70 + *(int *)(v71 + 36);
  *(_BYTE *)v72 = v61;
  *(_QWORD *)(v72 + 8) = v69;
  *(_QWORD *)(v72 + 16) = v67;
  *(_QWORD *)(v72 + 24) = v66;
  *(_QWORD *)(v72 + 32) = v68;
  *(_BYTE *)(v72 + 40) = 0;
  sub_23BE9F3A0(v63, &qword_256AE7978);
  v73 = *(_QWORD *)(v7 - 232);
  sub_23BEC42E0(v70, v73, &qword_256AE7980);
  v74 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 376) + 56);
  v74(v73, 0, 1, v71);
  v47 = *(_QWORD *)(v7 - 264);
  v25 = (unsigned int *)MEMORY[0x24BDECF38];
LABEL_9:
  v75 = (uint64_t *)(*(_QWORD *)(v7 - 224) + *(int *)(v47 + 76));
  v76 = v75[3];
  v77 = 1;
  if (!v76)
  {
    v101 = *(_QWORD *)(v7 - 248);
    goto LABEL_13;
  }
  v78 = *v75;
  v79 = v75[1];
  v80 = v75[2];
  v81 = swift_getKeyPath();
  *(_QWORD *)(v7 - 136) = v78;
  *(_QWORD *)(v7 - 128) = v79;
  *(_BYTE *)(v7 - 120) = v80 & 1;
  *(_QWORD *)(v7 - 112) = v76;
  *(_QWORD *)(v7 - 104) = v81;
  *(_BYTE *)(v7 - 96) = 1;
  v82 = *v25;
  v83 = sub_23BFF85F0();
  v84 = (uint64_t (*)(uint64_t))MEMORY[0x24BDECF50];
  v85 = *(_QWORD *)(v7 - 304);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v83 - 8) + 104))(v85, v82, v83);
  sub_23BEA1DC0(v78, v79, v80, v76);
  *(_QWORD *)(v7 - 280) = v79;
  sub_23BEA0EAC(v78, v79, v80 & 1);
  sub_23BEA1BB8((unint64_t *)&qword_256AE3740, v84, MEMORY[0x24BDECF78]);
  swift_bridgeObjectRetain();
  result = sub_23BFF93AC();
  if ((result & 1) != 0)
  {
    *(_DWORD *)(v7 - 296) = v80 & 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AE79E0);
    sub_23BFA0048();
    sub_23BEA1F94(&qword_256AE7918, &qword_256AE78E8, MEMORY[0x24BEE30C8]);
    *(_QWORD *)(v7 - 288) = v74;
    v86 = *(_QWORD *)(v7 - 344);
    sub_23BFF8D94();
    sub_23BE9F3A0(v85, &qword_256AE78E8);
    sub_23BEA0F64(*(_QWORD *)(v7 - 136), *(_QWORD *)(v7 - 128), *(_BYTE *)(v7 - 120));
    swift_bridgeObjectRelease();
    swift_release();
    v87 = *(_QWORD *)(v7 - 224);
    v88 = *(_QWORD *)(v87 + 224);
    v89 = *(_BYTE *)(v87 + 232);
    v90 = swift_getKeyPath();
    v91 = *(_QWORD *)(v7 - 336);
    v92 = *(_QWORD *)(v7 - 312);
    v93 = *(_QWORD *)(v7 - 328);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v91 + 16))(v92, v86, v93);
    v94 = v92 + *(int *)(*(_QWORD *)(v7 - 352) + 36);
    *(_QWORD *)v94 = v90;
    *(_QWORD *)(v94 + 8) = v88;
    *(_BYTE *)(v94 + 16) = v89;
    (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v86, v93);
    v95 = *(_QWORD *)(v87 + 88);
    v96 = *(_QWORD *)(v87 + 96);
    v97 = *(_QWORD *)(v87 + 104);
    v98 = *(_QWORD *)(v87 + 112);
    LOBYTE(v90) = sub_23BFF8B60();
    v99 = *(_QWORD *)(v7 - 320);
    sub_23BE9F190(v92, v99, &qword_256AE7978);
    sub_23BEA0F64(v78, *(_QWORD *)(v7 - 280), *(_DWORD *)(v7 - 296));
    swift_bridgeObjectRelease();
    v71 = *(_QWORD *)(v7 - 272);
    v100 = v99 + *(int *)(v71 + 36);
    *(_BYTE *)v100 = v90;
    *(_QWORD *)(v100 + 8) = v97;
    *(_QWORD *)(v100 + 16) = v96;
    *(_QWORD *)(v100 + 24) = v95;
    *(_QWORD *)(v100 + 32) = v98;
    v74 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 - 288);
    *(_BYTE *)(v100 + 40) = 0;
    sub_23BE9F3A0(v92, &qword_256AE7978);
    v101 = *(_QWORD *)(v7 - 248);
    sub_23BEC42E0(v99, v101, &qword_256AE7980);
    v77 = 0;
LABEL_13:
    v74(v101, v77, 1, v71);
    v102 = *(_QWORD *)(v7 - 392);
    v103 = *(_QWORD *)(v7 - 360);
    sub_23BFF8EE4();
    v104 = MEMORY[0x24BDECC60];
    *(_QWORD *)(v7 - 152) = v103;
    *(_QWORD *)(v7 - 144) = v104;
    v105 = *(_QWORD *)(v7 - 384);
    v106 = MEMORY[0x242615198](MEMORY[0x24BDED308], v105, v7 - 152);
    v107 = *(_QWORD *)(v7 - 408);
    sub_23BEA72EC(v102, v105, v107);
    v108 = *(_QWORD *)(v7 - 416);
    v109 = *(void (**)(uint64_t, uint64_t))(v108 + 8);
    v109(v102, v105);
    v110 = *(_QWORD *)(v7 - 456);
    sub_23BE9F190(*(_QWORD *)(v7 - 240), v110, &qword_256AE7898);
    *(_QWORD *)(v7 - 136) = v110;
    v111 = *(_QWORD *)(v7 - 432);
    sub_23BE9F190(*(_QWORD *)(v7 - 232), v111, &qword_256AE78A0);
    *(_QWORD *)(v7 - 128) = v111;
    v112 = v101;
    v113 = *(_QWORD *)(v7 - 424);
    sub_23BE9F190(v112, v113, &qword_256AE78A0);
    *(_QWORD *)(v7 - 120) = v113;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v108 + 16))(v102, v107, v105);
    *(_QWORD *)(v7 - 112) = v102;
    v114 = *(_QWORD *)(v7 - 448);
    *(_QWORD *)(v7 - 184) = *(_QWORD *)(v7 - 464);
    *(_QWORD *)(v7 - 176) = v114;
    *(_QWORD *)(v7 - 168) = v114;
    *(_QWORD *)(v7 - 160) = v105;
    *(_QWORD *)(v7 - 216) = sub_23BFA039C(&qword_256AE79F8, &qword_256AE7898, (uint64_t (*)(void))sub_23BFA0400);
    v115 = sub_23BFA039C(&qword_256AE7A10, &qword_256AE78A0, (uint64_t (*)(void))sub_23BFA0574);
    *(_QWORD *)(v7 - 208) = v115;
    *(_QWORD *)(v7 - 200) = v115;
    *(_QWORD *)(v7 - 192) = v106;
    sub_23BF93EF0((uint64_t *)(v7 - 136), 4uLL, v7 - 184);
    v109(v107, v105);
    sub_23BE9F3A0(*(_QWORD *)(v7 - 248), &qword_256AE78A0);
    sub_23BE9F3A0(*(_QWORD *)(v7 - 232), &qword_256AE78A0);
    sub_23BE9F3A0(*(_QWORD *)(v7 - 240), &qword_256AE7898);
    v109(v102, v105);
    sub_23BE9F3A0(v113, &qword_256AE78A0);
    sub_23BE9F3A0(v111, &qword_256AE78A0);
    return sub_23BE9F3A0(v110, &qword_256AE7898);
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_23BF98238(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE v10[16];
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  _QWORD v16[2];

  v3 = *(_QWORD *)(a1 + 16);
  v4 = sub_23BFF862C();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = &v10[-v6];
  v8 = *(_QWORD *)(a1 + 40);
  sub_23BFF8CEC();
  sub_23BFF9190();
  v11 = v3;
  v12 = *(_OWORD *)(a1 + 24);
  v13 = v8;
  v14 = *(_OWORD *)(a1 + 48);
  v15 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE78C0);
  v16[0] = v8;
  v16[1] = MEMORY[0x24BDEEC40];
  MEMORY[0x242615198](MEMORY[0x24BDED308], v4, v16);
  sub_23BEA1F94(&qword_256AE78C8, &qword_256AE78C0, MEMORY[0x24BDF4700]);
  sub_23BFF8ECC();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
}

void sub_23BF983A4(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v14;

  *(_QWORD *)a7 = sub_23BFF88A8();
  *(_QWORD *)(a7 + 8) = 0;
  *(_BYTE *)(a7 + 16) = 0;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE78D0);
  sub_23BF98434(a1, a2, a3, a4, a5, a6, a7 + *(int *)(v14 + 44));
}

void sub_23BF98434(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[8];
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v48 = a6;
  v40 = a5;
  v37 = a7;
  v32 = sub_23BFF8890();
  v31[7] = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v31[6] = (char *)v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE78D8);
  v38 = *(_QWORD *)(v12 - 8);
  v39 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v31[5] = (char *)v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE78E0);
  MEMORY[0x24BDAC7A8](v14);
  v36 = (char *)v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v41 = (char *)v31 - v17;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE78E8);
  MEMORY[0x24BDAC7A8](v18);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE78F0);
  v45 = *(_QWORD *)(v19 - 8);
  v46 = v19;
  MEMORY[0x24BDAC7A8](v19);
  v43 = (char *)v31 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE78F8);
  MEMORY[0x24BDAC7A8](v42);
  v47 = (char *)v31 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE7900);
  MEMORY[0x24BDAC7A8](v22);
  v44 = (char *)v31 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE7908);
  MEMORY[0x24BDAC7A8](v24);
  v34 = (char *)v31 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v26);
  v35 = (char *)v31 - v27;
  MEMORY[0x24BDAC7A8](v28);
  v33 = (char *)v31 - v29;
  MEMORY[0x24BDAC7A8](v30);
  v49 = a1;
  v50 = a2;
  v51 = a3;
  v52 = a4;
  v53 = v40;
  v54 = v48;
  type metadata accessor for ActionCardView();
}

uint64_t sub_23BF98724(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t (*v72)(uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v8 = (uint64_t *)(v3 + *(int *)(a1 + 80));
  v9 = v8[3];
  v10 = (unsigned int *)MEMORY[0x24BDECF38];
  *(_QWORD *)(v7 - 144) = v5;
  *(_QWORD *)(v7 - 208) = v1;
  *(_QWORD *)(v7 - 184) = v2;
  *(_QWORD *)(v7 - 232) = a1;
  *(_QWORD *)(v7 - 224) = v6;
  if (v9)
  {
    *(_QWORD *)(v7 - 296) = v4;
    v12 = *v8;
    v11 = v8[1];
    v13 = v8[2];
    *(_QWORD *)(v7 - 136) = *v8;
    *(_QWORD *)(v7 - 128) = v11;
    *(_BYTE *)(v7 - 120) = v13 & 1;
    *(_QWORD *)(v7 - 112) = v9;
    v14 = *v10;
    v15 = sub_23BFF85F0();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v6, v14, v15);
    *(_QWORD *)(v7 - 336) = v12;
    *(_QWORD *)(v7 - 344) = v11;
    sub_23BEA0EAC(v12, v11, v13 & 1);
    sub_23BEA1BB8((unint64_t *)&qword_256AE3740, (uint64_t (*)(uint64_t))MEMORY[0x24BDECF50], MEMORY[0x24BDECF78]);
    swift_bridgeObjectRetain();
    result = sub_23BFF93AC();
    if ((result & 1) == 0)
    {
      __break(1u);
      goto LABEL_15;
    }
    *(_DWORD *)(v7 - 348) = v13 & 1;
    sub_23BEA1F94(&qword_256AE7918, &qword_256AE78E8, MEMORY[0x24BEE30C8]);
    v17 = *(_QWORD *)(v7 - 192);
    sub_23BFF8D94();
    sub_23BE9F3A0(v6, &qword_256AE78E8);
    v18 = *(_QWORD *)(v3 + 240);
    KeyPath = swift_getKeyPath();
    v21 = *(_QWORD *)(v7 - 168);
    v20 = *(_QWORD *)(v7 - 160);
    v22 = *(_QWORD *)(v7 - 152);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v22, v17, v20);
    v23 = v22 + *(int *)(*(_QWORD *)(v7 - 200) + 36);
    *(_QWORD *)v23 = KeyPath;
    *(_QWORD *)(v23 + 8) = v18;
    *(_BYTE *)(v23 + 16) = 0;
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v17, v20);
    v24 = *(_QWORD *)(v3 + 120);
    v25 = *(_QWORD *)(v3 + 128);
    v26 = *(_QWORD *)(v3 + 136);
    v27 = *(_QWORD *)(v3 + 144);
    LOBYTE(KeyPath) = sub_23BFF8B60();
    v28 = *(_QWORD *)(v7 - 176);
    sub_23BE9F190(v22, v28, &qword_256AE78F8);
    v29 = *(_QWORD *)(v7 - 144);
    v30 = v28 + *(int *)(v29 + 36);
    *(_BYTE *)v30 = KeyPath;
    *(_QWORD *)(v30 + 8) = v26;
    *(_QWORD *)(v30 + 16) = v25;
    v5 = v29;
    *(_QWORD *)(v30 + 24) = v24;
    *(_QWORD *)(v30 + 32) = v27;
    *(_BYTE *)(v30 + 40) = 0;
    sub_23BEA0F64(*(_QWORD *)(v7 - 336), *(_QWORD *)(v7 - 344), *(_DWORD *)(v7 - 348));
    swift_bridgeObjectRelease();
    v31 = v22;
    v32 = *(_QWORD *)(v7 - 232);
    v10 = (unsigned int *)MEMORY[0x24BDECF38];
    sub_23BE9F3A0(v31, &qword_256AE78F8);
    v33 = *(_QWORD *)(v7 - 208);
    sub_23BEC42E0(v28, v33, &qword_256AE7900);
    v34 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 296) + 56);
    v35 = v33;
    v36 = 0;
  }
  else
  {
    v32 = a1;
    v34 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
    v35 = v1;
    v36 = 1;
  }
  *(_QWORD *)(v7 - 296) = v34;
  v34(v35, v36, 1, v5);
  v37 = (uint64_t *)(v3 + *(int *)(v32 + 72));
  v38 = v37[3];
  if (!v38)
  {
    v63 = 1;
    v62 = *(_QWORD *)(v7 - 216);
    goto LABEL_9;
  }
  *(_QWORD *)(v7 - 344) = v3;
  v39 = *v37;
  v40 = v37[1];
  v41 = v37[2];
  *(_QWORD *)(v7 - 136) = *v37;
  *(_QWORD *)(v7 - 128) = v40;
  *(_BYTE *)(v7 - 120) = v41 & 1;
  *(_QWORD *)(v7 - 112) = v38;
  v42 = *v10;
  v43 = sub_23BFF85F0();
  v44 = (uint64_t (*)(uint64_t))MEMORY[0x24BDECF50];
  v45 = *(_QWORD *)(v7 - 224);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 104))(v45, v42, v43);
  *(_QWORD *)(v7 - 336) = v40;
  sub_23BEA0EAC(v39, v40, v41 & 1);
  sub_23BEA1BB8((unint64_t *)&qword_256AE3740, v44, MEMORY[0x24BDECF78]);
  swift_bridgeObjectRetain();
  result = sub_23BFF93AC();
  if ((result & 1) == 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  *(_DWORD *)(v7 - 348) = v41 & 1;
  sub_23BEA1F94(&qword_256AE7918, &qword_256AE78E8, MEMORY[0x24BEE30C8]);
  *(_QWORD *)(v7 - 360) = v39;
  v46 = *(_QWORD *)(v7 - 192);
  sub_23BFF8D94();
  sub_23BE9F3A0(v45, &qword_256AE78E8);
  v3 = *(_QWORD *)(v7 - 344);
  v47 = *(_QWORD *)(v3 + 216);
  v48 = swift_getKeyPath();
  v50 = *(_QWORD *)(v7 - 168);
  v49 = *(_QWORD *)(v7 - 160);
  v51 = *(_QWORD *)(v7 - 152);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 16))(v51, v46, v49);
  v52 = v51 + *(int *)(*(_QWORD *)(v7 - 200) + 36);
  *(_QWORD *)v52 = v48;
  *(_QWORD *)(v52 + 8) = v47;
  *(_BYTE *)(v52 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v46, v49);
  v53 = *(_QWORD *)(v3 + 56);
  v54 = *(_QWORD *)(v3 + 64);
  v55 = *(_QWORD *)(v3 + 72);
  v56 = *(_QWORD *)(v3 + 80);
  LOBYTE(v48) = sub_23BFF8B60();
  v57 = *(_QWORD *)(v7 - 176);
  sub_23BE9F190(v51, v57, &qword_256AE78F8);
  v58 = *(_QWORD *)(v7 - 144);
  v59 = v57 + *(int *)(v58 + 36);
  *(_BYTE *)v59 = v48;
  *(_QWORD *)(v59 + 8) = v55;
  *(_QWORD *)(v59 + 16) = v54;
  v5 = v58;
  *(_QWORD *)(v59 + 24) = v53;
  *(_QWORD *)(v59 + 32) = v56;
  *(_BYTE *)(v59 + 40) = 0;
  sub_23BE9F3A0(v51, &qword_256AE78F8);
  v60 = *(_QWORD *)(v7 - 320);
  sub_23BFF8884();
  sub_23BF47528(&qword_256AE7920, &qword_256AE7900, (uint64_t (*)(void))sub_23BF9F9E4, MEMORY[0x24BDECC60]);
  v61 = *(_QWORD *)(v7 - 328);
  sub_23BFF8E3C();
  sub_23BEA0F64(*(_QWORD *)(v7 - 360), *(_QWORD *)(v7 - 336), *(_DWORD *)(v7 - 348));
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 312) + 8))(v60, *(_QWORD *)(v7 - 304));
  sub_23BE9F3A0(v57, &qword_256AE7900);
  v62 = *(_QWORD *)(v7 - 216);
  sub_23BEC42E0(v61, v62, &qword_256AE78D8);
  v63 = 0;
  v10 = (unsigned int *)MEMORY[0x24BDECF38];
  v32 = *(_QWORD *)(v7 - 232);
LABEL_9:
  v64 = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v7 - 248) + 56))(v62, v63, 1, *(_QWORD *)(v7 - 240));
  v65 = (uint64_t *)(v3 + *(int *)(v32 + 76));
  v66 = v65[3];
  if (!v66)
  {
    v89 = *(_QWORD *)(v7 - 288);
    goto LABEL_13;
  }
  v68 = *v65;
  v67 = v65[1];
  v69 = v65[2];
  *(_QWORD *)(v7 - 136) = *v65;
  *(_QWORD *)(v7 - 128) = v67;
  *(_BYTE *)(v7 - 120) = v69 & 1;
  *(_QWORD *)(v7 - 112) = v66;
  v70 = *v10;
  v71 = sub_23BFF85F0();
  v72 = (uint64_t (*)(uint64_t))MEMORY[0x24BDECF50];
  v73 = *(_QWORD *)(v7 - 224);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 104))(v73, v70, v71);
  *(_QWORD *)(v7 - 232) = v68;
  sub_23BEA0EAC(v68, v67, v69 & 1);
  sub_23BEA1BB8((unint64_t *)&qword_256AE3740, v72, MEMORY[0x24BDECF78]);
  swift_bridgeObjectRetain();
  result = sub_23BFF93AC();
  if ((result & 1) != 0)
  {
    *(_DWORD *)(v7 - 240) = v69 & 1;
    sub_23BEA1F94(&qword_256AE7918, &qword_256AE78E8, MEMORY[0x24BEE30C8]);
    v74 = *(_QWORD *)(v7 - 192);
    sub_23BFF8D94();
    sub_23BE9F3A0(v73, &qword_256AE78E8);
    v75 = *(_QWORD *)(v3 + 224);
    v76 = *(_BYTE *)(v3 + 232);
    v77 = swift_getKeyPath();
    v79 = *(_QWORD *)(v7 - 168);
    v78 = *(_QWORD *)(v7 - 160);
    v80 = *(_QWORD *)(v7 - 152);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v79 + 16))(v80, v74, v78);
    v81 = v80 + *(int *)(*(_QWORD *)(v7 - 200) + 36);
    *(_QWORD *)v81 = v77;
    *(_QWORD *)(v81 + 8) = v75;
    *(_BYTE *)(v81 + 16) = v76;
    (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v74, v78);
    v82 = *(_QWORD *)(v3 + 88);
    v83 = *(_QWORD *)(v3 + 96);
    v85 = *(_QWORD *)(v3 + 104);
    v84 = *(_QWORD *)(v3 + 112);
    LOBYTE(v77) = sub_23BFF8B60();
    v86 = *(_QWORD *)(v7 - 176);
    sub_23BE9F190(v80, v86, &qword_256AE78F8);
    v87 = *(_QWORD *)(v7 - 144);
    v88 = v86 + *(int *)(v87 + 36);
    *(_BYTE *)v88 = v77;
    *(_QWORD *)(v88 + 8) = v85;
    *(_QWORD *)(v88 + 16) = v83;
    v5 = v87;
    *(_QWORD *)(v88 + 24) = v82;
    *(_QWORD *)(v88 + 32) = v84;
    *(_BYTE *)(v88 + 40) = 0;
    sub_23BEA0F64(*(_QWORD *)(v7 - 232), v67, *(_DWORD *)(v7 - 240));
    swift_bridgeObjectRelease();
    sub_23BE9F3A0(v80, &qword_256AE78F8);
    v89 = *(_QWORD *)(v7 - 288);
    sub_23BEC42E0(v86, v89, &qword_256AE7900);
    v64 = 0;
    v62 = *(_QWORD *)(v7 - 216);
LABEL_13:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 - 296))(v89, v64, 1, v5);
    v90 = *(_QWORD *)(v7 - 208);
    v91 = *(_QWORD *)(v7 - 272);
    sub_23BE9F190(v90, v91, &qword_256AE7908);
    v92 = *(_QWORD *)(v7 - 264);
    sub_23BE9F190(v62, v92, &qword_256AE78E0);
    v93 = *(_QWORD *)(v7 - 280);
    sub_23BE9F190(v89, v93, &qword_256AE7908);
    v94 = *(_QWORD *)(v7 - 256);
    sub_23BE9F190(v91, v94, &qword_256AE7908);
    v95 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE7910);
    sub_23BE9F190(v92, v94 + *(int *)(v95 + 48), &qword_256AE78E0);
    sub_23BE9F190(v93, v94 + *(int *)(v95 + 64), &qword_256AE7908);
    sub_23BE9F3A0(v89, &qword_256AE7908);
    sub_23BE9F3A0(v62, &qword_256AE78E0);
    sub_23BE9F3A0(v90, &qword_256AE7908);
    sub_23BE9F3A0(v93, &qword_256AE7908);
    sub_23BE9F3A0(v92, &qword_256AE78E0);
    return sub_23BE9F3A0(v91, &qword_256AE7908);
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_23BF98F88@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[2];
  _QWORD v45[2];
  _QWORD v46[2];
  _QWORD v47[2];
  uint64_t v48;

  v29 = a2;
  v3 = a1[2];
  v4 = sub_23BFF862C();
  v5 = a1[4];
  v6 = sub_23BFF96A0();
  v7 = sub_23BFF862C();
  v48 = a1[7];
  v8 = v48;
  v47[0] = MEMORY[0x242615198](MEMORY[0x24BDF5578], v6, &v48);
  v47[1] = MEMORY[0x24BDECC60];
  v9 = MEMORY[0x24BDED308];
  MEMORY[0x242615198](MEMORY[0x24BDED308], v7, v47);
  sub_23BFF86F8();
  sub_23BFF862C();
  v10 = sub_23BFF862C();
  v46[0] = a1[5];
  v46[1] = MEMORY[0x24BDEEC40];
  v11 = v46[0];
  v45[0] = MEMORY[0x242615198](v9, v4, v46);
  v45[1] = MEMORY[0x24BDEBF50];
  v44[0] = v10;
  v44[1] = MEMORY[0x242615198](v9, v10, v45);
  MEMORY[0x24261512C](255, v44, MEMORY[0x24BDF3110], 0);
  swift_getTupleTypeMetadata2();
  v12 = sub_23BFF9220();
  v13 = MEMORY[0x24BDF5428];
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v12);
  sub_23BFF90AC();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE7888);
  v14 = a1[3];
  sub_23BFF862C();
  swift_getTupleTypeMetadata2();
  v15 = sub_23BFF9220();
  MEMORY[0x242615198](v13, v15);
  sub_23BFF90AC();
  sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE5160);
  sub_23BFF862C();
  swift_getTupleTypeMetadata2();
  v16 = sub_23BFF9220();
  MEMORY[0x242615198](v13, v16);
  v26 = sub_23BFF90C4();
  v27 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v18 = (char *)&v26 - v17;
  sub_23BFF91B4();
  v37 = v3;
  v38 = v14;
  v19 = v14;
  v39 = v5;
  v40 = v11;
  v20 = v11;
  v21 = a1[6];
  v41 = v21;
  v42 = v8;
  v22 = v8;
  v23 = v28;
  v43 = v28;
  sub_23BFF90B8();
  v30 = v3;
  v31 = v19;
  v32 = v5;
  v33 = v20;
  v34 = v21;
  v35 = v22;
  v36 = v23;
  sub_23BFF91C0();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE7930);
  v24 = v26;
  MEMORY[0x242615198](MEMORY[0x24BDF4750], v26);
  sub_23BEA1F94(&qword_256AE7938, &qword_256AE7930, MEMORY[0x24BDEC6F8]);
  sub_23BFF8CBC();
  return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v18, v24);
}

void sub_23BF99388(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD v91[2];
  _QWORD v92[2];
  _QWORD v93[2];
  uint64_t v94;

  v53 = a6;
  v54 = a1;
  v46 = a4;
  v51 = a3;
  v69 = a8;
  v11 = sub_23BFF9184();
  v12 = *(_QWORD *)(v11 - 8);
  v67 = v11;
  v68 = v12;
  MEMORY[0x24BDAC7A8](v11);
  v66 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE7888);
  sub_23BFF862C();
  swift_getTupleTypeMetadata2();
  v56 = sub_23BFF9220();
  v55 = MEMORY[0x242615198](MEMORY[0x24BDF5428], v56);
  v14 = sub_23BFF90AC();
  v15 = *(_QWORD *)(v14 - 8);
  v57 = v14;
  v61 = v15;
  MEMORY[0x24BDAC7A8](v14);
  v52 = (char *)&v43 - v16;
  v17 = sub_23BFF862C();
  v64 = *(_QWORD *)(v17 - 8);
  v60 = v17;
  MEMORY[0x24BDAC7A8](v17);
  v58 = (char *)&v43 - v18;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE5160);
  v63 = sub_23BFF862C();
  v65 = *(_QWORD *)(v63 - 8);
  MEMORY[0x24BDAC7A8](v63);
  v59 = (char *)&v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v62 = (char *)&v43 - v21;
  v22 = sub_23BFF862C();
  v23 = sub_23BFF96A0();
  v24 = sub_23BFF862C();
  v94 = a7;
  v93[0] = MEMORY[0x242615198](MEMORY[0x24BDF5578], v23, &v94);
  v93[1] = MEMORY[0x24BDECC60];
  v25 = MEMORY[0x24BDED308];
  MEMORY[0x242615198](MEMORY[0x24BDED308], v24, v93);
  sub_23BFF86F8();
  sub_23BFF862C();
  v26 = sub_23BFF862C();
  v92[0] = a5;
  v92[1] = MEMORY[0x24BDEEC40];
  v27 = a5;
  v45 = a5;
  v91[0] = MEMORY[0x242615198](v25, v22, v92);
  v91[1] = MEMORY[0x24BDEBF50];
  v28 = MEMORY[0x242615198](v25, v26, v91);
  v85 = v26;
  v86 = v28;
  MEMORY[0x24261512C](255, &v85, MEMORY[0x24BDF3110], 0);
  swift_getTupleTypeMetadata2();
  v29 = sub_23BFF9220();
  v50 = (void (*)(char *, uint64_t))MEMORY[0x242615198](MEMORY[0x24BDF5428], v29);
  v44 = sub_23BFF90AC();
  v70 = *(_QWORD *)(v44 - 8);
  MEMORY[0x24BDAC7A8](v44);
  v31 = (char *)&v43 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v32);
  v34 = (char *)&v43 - v33;
  v48 = (char *)&v43 - v33;
  v35 = v51;
  v78 = a2;
  v79 = v51;
  v36 = v46;
  v80 = v46;
  v81 = v27;
  v37 = v53;
  v82 = v53;
  v83 = a7;
  v38 = a7;
  v39 = v54;
  v84 = v54;
  sub_23BFF889C();
  v47 = v31;
  sub_23BFF90A0();
  v40 = v44;
  v49 = MEMORY[0x242615198](MEMORY[0x24BDF4700], v44);
  sub_23BEA72EC((uint64_t)v31, v40, (uint64_t)v34);
  v50 = *(void (**)(char *, uint64_t))(v70 + 8);
  v50(v31, v40);
  sub_23BFF889C();
  v71 = a2;
  v72 = v35;
  v41 = a2;
  v42 = v45;
  v73 = v36;
  v74 = v45;
  v75 = v37;
  v76 = v38;
  v77 = v39;
  sub_23BFF90A0();
  v85 = v41;
  v86 = v35;
  v87 = v36;
  v88 = v42;
  v89 = v37;
  v90 = v38;
  type metadata accessor for ActionCardView();
}

uint64_t sub_23BF9981C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;

  v6 = (uint64_t *)(v2 + *(int *)(a1 + 100));
  v7 = *v6;
  v8 = v6[1];
  *(_QWORD *)(v5 - 192) = v7;
  *(_QWORD *)(v5 - 184) = v8;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE7940);
  sub_23BFF8FF8();
  sub_23BFF91C0();
  v28 = v1[14];
  v29 = MEMORY[0x242615198](MEMORY[0x24BDF4700], v28);
  v9 = v1[15];
  sub_23BFF8EA8();
  (*(void (**)(uint64_t, uint64_t))(v1[18] + 8))(v4, v28);
  v10 = v1[23];
  sub_23BFF9178();
  sub_23BFF8B60();
  v11 = MEMORY[0x24BDEDBB8];
  *(_QWORD *)(v5 - 208) = v29;
  *(_QWORD *)(v5 - 200) = v11;
  v12 = MEMORY[0x24BDED308];
  v13 = v1[17];
  v14 = MEMORY[0x242615198](MEMORY[0x24BDED308], v13, v5 - 208);
  v15 = v1[16];
  v16 = v1[24];
  sub_23BFF8CC8();
  (*(void (**)(uint64_t, uint64_t))(v1[25] + 8))(v10, v16);
  (*(void (**)(uint64_t, uint64_t))(v1[21] + 8))(v9, v13);
  v17 = sub_23BEA1F94(&qword_256AE78A8, &qword_256AE5160, MEMORY[0x24BDF06D0]);
  *(_QWORD *)(v5 - 224) = v14;
  *(_QWORD *)(v5 - 216) = v17;
  v18 = v1[20];
  v19 = MEMORY[0x242615198](v12, v18, v5 - 224);
  v20 = v1[19];
  sub_23BEA72EC(v15, v18, v20);
  v21 = v1[22];
  v22 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
  v23 = v15;
  v22(v15, v18);
  v24 = v1[4];
  v25 = v1[5];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1[27] + 16))(v24, v25, v3);
  *(_QWORD *)(v5 - 192) = v24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v23, v20, v18);
  *(_QWORD *)(v5 - 184) = v23;
  *(_QWORD *)(v5 - 240) = v3;
  *(_QWORD *)(v5 - 232) = v18;
  *(_QWORD *)(v5 - 256) = v1[6];
  *(_QWORD *)(v5 - 248) = v19;
  sub_23BF93EF0((uint64_t *)(v5 - 192), 2uLL, v5 - 240);
  v22(v20, v18);
  v26 = (void (*)(uint64_t, uint64_t))v1[7];
  v26(v25, v3);
  v22(v23, v18);
  return ((uint64_t (*)(uint64_t, uint64_t))v26)(v24, v3);
}

void sub_23BF99A98()
{
  type metadata accessor for ActionCardView();
}

uint64_t sub_23BF99B14(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(_BYTE *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(_BYTE *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t OpaqueTypeConformance2;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t);
  _BYTE v67[96];

  v6 = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v5 - 424) = v6;
  *(_QWORD *)(v5 - 520) = a1;
  *(_QWORD *)(v5 - 408) = *(_QWORD *)(v6 + 64);
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v5 - 440) = &v67[-v8];
  v9 = sub_23BFF862C();
  v10 = sub_23BFF862C();
  *(_QWORD *)(v5 - 400) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v5 - 448) = v10;
  v11 = MEMORY[0x24BDAC7A8](v10);
  *(_QWORD *)(v5 - 480) = &v67[-v12];
  v13 = MEMORY[0x24BDEEC40];
  *(_QWORD *)(v5 - 152) = v4;
  *(_QWORD *)(v5 - 144) = v13;
  v14 = MEMORY[0x24BDED308];
  v15 = MEMORY[0x242615198](MEMORY[0x24BDED308], v9, v5 - 152, v11);
  *(_QWORD *)(v5 - 496) = v15;
  v16 = MEMORY[0x24BDEBF50];
  *(_QWORD *)(v5 - 168) = v15;
  *(_QWORD *)(v5 - 160) = v16;
  v17 = MEMORY[0x242615198](v14, v10, v5 - 168);
  *(_QWORD *)(v5 - 456) = v17;
  *(_QWORD *)(v5 - 136) = v10;
  *(_QWORD *)(v5 - 128) = v17;
  v18 = MEMORY[0x24261512C](0, v5 - 136, MEMORY[0x24BDF3110], 0);
  *(_QWORD *)(v5 - 432) = v18;
  *(_QWORD *)(v5 - 416) = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  *(_QWORD *)(v5 - 472) = &v67[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v20);
  *(_QWORD *)(v5 - 464) = &v67[-v21];
  *(_QWORD *)(v5 - 488) = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v24 = &v67[-v23];
  v25 = sub_23BFF96A0();
  v26 = sub_23BFF862C();
  *(_QWORD *)(v5 - 176) = v1;
  v27 = MEMORY[0x242615198](MEMORY[0x24BDF5578], v25, v5 - 176);
  v28 = MEMORY[0x24BDECC60];
  *(_QWORD *)(v5 - 192) = v27;
  *(_QWORD *)(v5 - 184) = v28;
  MEMORY[0x242615198](v14, v26, v5 - 192);
  v29 = sub_23BFF86F8();
  v30 = sub_23BFF862C();
  *(_QWORD *)(v5 - 384) = v30;
  *(_QWORD *)(v5 - 344) = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v32 = &v67[-((v31 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v33);
  *(_QWORD *)(v5 - 360) = &v67[-v34];
  v35 = *(int *)(a1 + 68);
  v36 = v3;
  *(_QWORD *)(v5 - 528) = v3 + v35;
  *(_QWORD *)(v5 - 536) = v2;
  v37 = *(_QWORD *)(v5 - 376);
  sub_23BFF8CEC();
  sub_23BFF9190();
  *(_QWORD *)(v5 - 304) = v2;
  *(_QWORD *)(v5 - 296) = *(_QWORD *)(v5 - 336);
  *(_QWORD *)(v5 - 288) = *(_QWORD *)(v5 - 352);
  *(_QWORD *)(v5 - 280) = v37;
  *(_QWORD *)(v5 - 272) = *(_QWORD *)(v5 - 328);
  *(_QWORD *)(v5 - 264) = *(_QWORD *)(v5 - 368);
  *(_QWORD *)(v5 - 256) = v36;
  v38 = *(_QWORD *)(v5 - 496);
  sub_23BFF8ECC();
  v39 = *(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v5 - 488) + 8);
  v39(v24, v9);
  v40 = MEMORY[0x242615198](MEMORY[0x24BDEDC10], v29);
  *(_QWORD *)(v5 - 208) = v38;
  *(_QWORD *)(v5 - 200) = v40;
  v41 = *(_QWORD *)(v5 - 384);
  *(_QWORD *)(v5 - 504) = MEMORY[0x242615198](MEMORY[0x24BDED308], v41, v5 - 208);
  v42 = *(_QWORD *)(v5 - 360);
  *(_QWORD *)(v5 - 512) = v32;
  sub_23BEA72EC((uint64_t)v32, v41, v42);
  v43 = *(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v5 - 344) + 8);
  *(_QWORD *)(v5 - 488) = v43;
  v43(v32, v41);
  v44 = *(_QWORD *)(v5 - 536);
  sub_23BFF8CEC();
  sub_23BFF925C();
  v45 = *(_QWORD *)(v5 - 480);
  sub_23BFF8D40();
  v39(v24, v9);
  *(_DWORD *)(v5 - 496) = sub_23BFF8B3C();
  sub_23BFF91A8();
  v46 = *(_QWORD *)(v5 - 424);
  v47 = *(_QWORD *)(v5 - 440);
  v48 = *(_QWORD *)(v5 - 520);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 16))(v47, v36, v48);
  v49 = (*(unsigned __int8 *)(v46 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
  v50 = (char *)swift_allocObject();
  v51 = *(_QWORD *)(v5 - 336);
  *((_QWORD *)v50 + 2) = v44;
  *((_QWORD *)v50 + 3) = v51;
  v52 = *(_QWORD *)(v5 - 376);
  *((_QWORD *)v50 + 4) = *(_QWORD *)(v5 - 352);
  *((_QWORD *)v50 + 5) = v52;
  v53 = *(_QWORD *)(v5 - 368);
  *((_QWORD *)v50 + 6) = *(_QWORD *)(v5 - 328);
  *((_QWORD *)v50 + 7) = v53;
  (*(void (**)(char *, uint64_t, uint64_t))(v46 + 32))(&v50[v49], v47, v48);
  v54 = *(_QWORD *)(v5 - 472);
  v55 = *(_QWORD *)(v5 - 448);
  v56 = *(_QWORD *)(v5 - 456);
  sub_23BFF8E60();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 400) + 8))(v45, v55);
  *(_QWORD *)(v5 - 136) = v55;
  *(_QWORD *)(v5 - 128) = v56;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v58 = *(_QWORD *)(v5 - 464);
  v59 = *(_QWORD *)(v5 - 432);
  sub_23BEA72EC(v54, v59, v58);
  v60 = *(_QWORD *)(v5 - 416);
  v61 = *(void (**)(uint64_t, uint64_t))(v60 + 8);
  v61(v54, v59);
  v62 = *(_QWORD *)(v5 - 512);
  v63 = *(_QWORD *)(v5 - 360);
  v64 = *(_QWORD *)(v5 - 384);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 344) + 16))(v62, v63, v64);
  *(_QWORD *)(v5 - 136) = v62;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 16))(v54, v58, v59);
  *(_QWORD *)(v5 - 128) = v54;
  *(_QWORD *)(v5 - 224) = v64;
  *(_QWORD *)(v5 - 216) = v59;
  *(_QWORD *)(v5 - 240) = *(_QWORD *)(v5 - 504);
  *(_QWORD *)(v5 - 232) = OpaqueTypeConformance2;
  sub_23BF93EF0((uint64_t *)(v5 - 136), 2uLL, v5 - 224);
  v61(v58, v59);
  v65 = *(void (**)(uint64_t, uint64_t))(v5 - 488);
  v65(v63, v64);
  v61(v54, v59);
  return ((uint64_t (*)(uint64_t, uint64_t))v65)(v62, v64);
}

void sub_23BF9A1C0()
{
  uint64_t v0;
  uint64_t v1;

  sub_23BFF96A0();
  v0 = sub_23BFF862C();
  MEMORY[0x24BDAC7A8](v0);
  MEMORY[0x24BDAC7A8](v1);
  type metadata accessor for ActionCardView();
}

uint64_t sub_23BF9A298()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);

  *(_QWORD *)(v5 - 168) = v3;
  v6 = MEMORY[0x242615198](MEMORY[0x24BDF5578], v4, v5 - 168);
  sub_23BFF8EE4();
  v7 = MEMORY[0x24BDECC60];
  *(_QWORD *)(v5 - 184) = v6;
  *(_QWORD *)(v5 - 176) = v7;
  MEMORY[0x242615198](MEMORY[0x24BDED308], v0, v5 - 184);
  sub_23BEA72EC(v2, v0, v1);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 200) + 8);
  v8(v2, v0);
  sub_23BEA5C0C(v1, v0, *(_QWORD *)(v5 - 192));
  return ((uint64_t (*)(uint64_t, uint64_t))v8)(v1, v0);
}

void sub_23BF9A378(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[5];
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v20 = a5;
  v21 = a6;
  v19[2] = a3;
  v19[3] = a4;
  v25 = a7;
  v19[1] = a2;
  v11 = sub_23BFF862C();
  v24 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  MEMORY[0x24BDAC7A8](v12);
  v22 = (char *)v19 - v13;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE7948);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE7888);
  MEMORY[0x24BDAC7A8](v23);
  MEMORY[0x24BDAC7A8](v17);
  v19[4] = (char *)v19 - v18;
  sub_23BF9A6BC(a1, a2, a3, a4, v20, v21, (uint64_t)v16);
}

void sub_23BF9A4E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = sub_23BFF91C0();
  sub_23BF9440C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v3, 0.0, 1, 0.0, 1, v7, v8, v4, &qword_256AE7888);
  sub_23BE9F3A0(v0, v4);
  sub_23BEC42E0(v3, *(_QWORD *)(v6 - 240), &qword_256AE7888);
  *(_QWORD *)(v6 - 136) = v5;
  v9 = *(_QWORD *)(v6 - 256);
  *(_QWORD *)(v6 - 128) = *(_QWORD *)(v6 - 264);
  *(_QWORD *)(v6 - 120) = v9;
  *(_QWORD *)(v6 - 112) = *(_QWORD *)(v6 - 248);
  *(_QWORD *)(v6 - 104) = v1;
  *(_QWORD *)(v6 - 96) = v2;
  type metadata accessor for ActionCardView();
}

uint64_t sub_23BF9A58C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);

  sub_23BFF8EE4();
  v7 = MEMORY[0x24BDECC60];
  *(_QWORD *)(v6 - 152) = v2;
  *(_QWORD *)(v6 - 144) = v7;
  v8 = MEMORY[0x242615198](MEMORY[0x24BDED308], v0, v6 - 152);
  v9 = *(_QWORD *)(v6 - 216);
  sub_23BEA72EC(v1, v0, v9);
  v10 = *(_QWORD *)(v6 - 200);
  v11 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
  v11(v1, v0);
  sub_23BE9F190(v4, v3, v5);
  *(_QWORD *)(v6 - 136) = v3;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v1, v9, v0);
  *(_QWORD *)(v6 - 128) = v1;
  *(_QWORD *)(v6 - 168) = *(_QWORD *)(v6 - 208);
  *(_QWORD *)(v6 - 160) = v0;
  *(_QWORD *)(v6 - 184) = sub_23BF47528(&qword_256AE7950, v5, (uint64_t (*)(void))sub_23BF9FEF4, MEMORY[0x24BDEDBB8]);
  *(_QWORD *)(v6 - 176) = v8;
  sub_23BF93EF0((uint64_t *)(v6 - 136), 2uLL, v6 - 168);
  v11(v9, v0);
  sub_23BE9F3A0(v4, v5);
  v11(v1, v0);
  return sub_23BE9F3A0(v3, v5);
}

void sub_23BF9A6BC(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[32];
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  _BYTE *v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  _BYTE *v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v68 = a5;
  v69 = a4;
  v65 = a2;
  v66 = a3;
  v54 = a7;
  v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE7970);
  v37 = *(_QWORD *)(v38 - 8);
  MEMORY[0x24BDAC7A8](v38);
  v36 = &v34[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE7978);
  MEMORY[0x24BDAC7A8](v35);
  v40 = &v34[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v51 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE7980);
  v50 = *(_QWORD *)(v51 - 8);
  MEMORY[0x24BDAC7A8](v51);
  v39 = &v34[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE78A0);
  MEMORY[0x24BDAC7A8](v12);
  v53 = &v34[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v14);
  v52 = &v34[-v15];
  v16 = sub_23BFF8890();
  v63 = *(_QWORD *)(v16 - 8);
  v64 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v62 = &v34[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v58 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE7988);
  v57 = *(_QWORD *)(v58 - 8);
  MEMORY[0x24BDAC7A8](v58);
  v56 = &v34[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v55 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE7990);
  MEMORY[0x24BDAC7A8](v55);
  v59 = &v34[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v60 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE7998);
  MEMORY[0x24BDAC7A8](v60);
  v61 = &v34[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE79A0);
  MEMORY[0x24BDAC7A8](v21);
  v71 = &v34[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v23);
  v70 = &v34[-v24];
  v72 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE78E8);
  MEMORY[0x24BDAC7A8](v72);
  v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5608);
  MEMORY[0x24BDAC7A8](v47);
  v48 = &v34[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5638);
  MEMORY[0x24BDAC7A8](v26);
  v67 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE79A8);
  MEMORY[0x24BDAC7A8](v67);
  v45 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE79B0);
  v43 = *(_QWORD *)(v45 - 8);
  MEMORY[0x24BDAC7A8](v45);
  v42 = &v34[-((v27 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE79B8);
  MEMORY[0x24BDAC7A8](v41);
  v46 = &v34[-((v28 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE79C0);
  MEMORY[0x24BDAC7A8](v29);
  v44 = &v34[-((v30 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE7898);
  MEMORY[0x24BDAC7A8](v31);
  v49 = &v34[-((v32 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v33);
  v73 = a1;
  v74 = v65;
  v75 = v66;
  v76 = v69;
  v77 = v68;
  v78 = a6;
  type metadata accessor for ActionCardView();
}

uint64_t sub_23BF9AC08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t KeyPath;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t);
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(uint64_t);
  void (*v53)(uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;

  v9 = (_QWORD *)((char *)v7 + *(int *)(a1 + 80));
  v10 = v9[3];
  *(_QWORD *)(v8 - 184) = v1;
  *(_QWORD *)(v8 - 176) = a1;
  *(_QWORD *)(v8 - 168) = v4;
  if (v10)
  {
    *(_QWORD *)(v8 - 464) = v6;
    *(_QWORD *)(v8 - 456) = v5;
    *(_QWORD *)(v8 - 208) = v7;
    v11 = *v9;
    v12 = v9[1];
    v13 = v2;
    v14 = v9[2];
    *(_QWORD *)(v8 - 200) = v14 & 1;
    KeyPath = swift_getKeyPath();
    v16 = *MEMORY[0x24BDF1D90];
    v17 = sub_23BFF8C44();
    v18 = *(_QWORD *)(v17 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 104))(v13, v16, v17);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v18 + 56))(v13, 0, 1, v17);
    v19 = swift_getKeyPath();
    v20 = *(uint64_t **)(v8 - 344);
    sub_23BE9F190(v13, (uint64_t)v20 + *(int *)(*(_QWORD *)(v8 - 352) + 28), &qword_256AE5638);
    *v20 = v19;
    sub_23BE9F190((uint64_t)v20, v3 + *(int *)(*(_QWORD *)(v8 - 192) + 36), &qword_256AE5608);
    *(_QWORD *)v3 = v11;
    *(_QWORD *)(v3 + 8) = v12;
    v21 = *(_QWORD *)(v8 - 200);
    *(_BYTE *)(v3 + 16) = v21;
    *(_QWORD *)(v3 + 24) = v10;
    *(_QWORD *)(v3 + 32) = KeyPath;
    *(_BYTE *)(v3 + 40) = 1;
    v22 = *(_QWORD *)(v8 - 168);
    *(_QWORD *)(v8 - 480) = v14;
    sub_23BEA1DC0(v11, v12, v14, v10);
    *(_QWORD *)(v8 - 472) = v11;
    *(_QWORD *)(v8 - 352) = v12;
    sub_23BEA0EAC(v11, v12, v21);
    swift_bridgeObjectRetain();
    swift_retain();
    sub_23BE9F3A0((uint64_t)v20, &qword_256AE5608);
    sub_23BE9F3A0(v13, &qword_256AE5638);
    swift_release();
    v23 = *MEMORY[0x24BDECF38];
    v24 = sub_23BFF85F0();
    v25 = (uint64_t (*)(uint64_t))MEMORY[0x24BDECF50];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v22, v23, v24);
    sub_23BEA1BB8((unint64_t *)&qword_256AE3740, v25, MEMORY[0x24BDECF78]);
    result = sub_23BFF93AC();
    if ((result & 1) == 0)
    {
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }
    *(_DWORD *)(v8 - 200) = *(_DWORD *)(v8 - 480) & 1;
    sub_23BFA00F0();
    sub_23BEA1F94(&qword_256AE7918, &qword_256AE78E8, MEMORY[0x24BEE30C8]);
    v27 = *(_QWORD *)(v8 - 392);
    sub_23BFF8D94();
    sub_23BE9F3A0(v22, &qword_256AE78E8);
    sub_23BE9F3A0(v3, &qword_256AE79A8);
    v7 = *(_QWORD **)(v8 - 208);
    v28 = v7[30];
    v29 = swift_getKeyPath();
    v30 = *(_QWORD *)(v8 - 384);
    v31 = *(_QWORD *)(v8 - 360);
    v32 = *(_QWORD *)(v8 - 368);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v31, v27, v32);
    v33 = v31 + *(int *)(*(_QWORD *)(v8 - 400) + 36);
    *(_QWORD *)v33 = v29;
    *(_QWORD *)(v33 + 8) = v28;
    *(_BYTE *)(v33 + 16) = 0;
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v27, v32);
    v34 = v7[15];
    v35 = v7[16];
    v36 = v23;
    v37 = v7[17];
    v38 = v7[18];
    LOBYTE(v29) = sub_23BFF8B60();
    v39 = *(_QWORD *)(v8 - 376);
    sub_23BE9F190(v31, v39, &qword_256AE79B8);
    sub_23BEA0F64(*(_QWORD *)(v8 - 472), *(_QWORD *)(v8 - 352), *(_DWORD *)(v8 - 200));
    swift_bridgeObjectRelease();
    v40 = *(_QWORD *)(v8 - 456);
    v41 = v39 + *(int *)(v40 + 36);
    *(_BYTE *)v41 = v29;
    *(_QWORD *)(v41 + 8) = v37;
    *(_QWORD *)(v41 + 16) = v35;
    v4 = *(_QWORD *)(v8 - 168);
    *(_QWORD *)(v41 + 24) = v34;
    *(_QWORD *)(v41 + 32) = v38;
    v42 = v36;
    *(_BYTE *)(v41 + 40) = 0;
    sub_23BE9F3A0(v31, &qword_256AE79B8);
    v43 = *(_QWORD *)(v8 - 184);
    sub_23BEC42E0(v39, v43, &qword_256AE79C0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 464) + 56))(v43, 0, 1, v40);
    v44 = *(_QWORD *)(v8 - 176);
  }
  else
  {
    v44 = a1;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v1, 1, 1, v5);
    v42 = *MEMORY[0x24BDECF38];
  }
  v45 = (_QWORD *)((char *)v7 + *(int *)(v44 + 72));
  v46 = *v45;
  v47 = v45[1];
  v48 = v45[2];
  v49 = v45[3];
  v50 = swift_getKeyPath();
  *(_QWORD *)(v8 - 136) = v46;
  *(_QWORD *)(v8 - 128) = v47;
  *(_QWORD *)(v8 - 120) = v48;
  *(_QWORD *)(v8 - 112) = v49;
  *(_QWORD *)(v8 - 104) = v50;
  *(_BYTE *)(v8 - 96) = 1;
  v51 = sub_23BFF85F0();
  v52 = (uint64_t (*)(uint64_t))MEMORY[0x24BDECF50];
  v53 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 104);
  *(_QWORD *)(v8 - 192) = v53;
  v53(v4, v42, v51);
  sub_23BEA1DC0(v46, v47, v48, v49);
  v54 = sub_23BEA1BB8((unint64_t *)&qword_256AE3740, v52, MEMORY[0x24BDECF78]);
  result = sub_23BFF93AC();
  if ((result & 1) == 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  *(_QWORD *)(v8 - 344) = v54;
  *(_QWORD *)(v8 - 208) = v51;
  *(_DWORD *)(v8 - 200) = v42;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5098);
  sub_23BF0595C();
  v55 = sub_23BEA1F94(&qword_256AE7918, &qword_256AE78E8, MEMORY[0x24BEE30C8]);
  v56 = *(_QWORD *)(v8 - 280);
  *(_QWORD *)(v8 - 352) = v55;
  sub_23BFF8D94();
  sub_23BE9F3A0(v4, &qword_256AE78E8);
  sub_23BEBF0A4(*(_QWORD *)(v8 - 136), *(_QWORD *)(v8 - 128), *(_QWORD *)(v8 - 120), *(_QWORD *)(v8 - 112));
  swift_release();
  v57 = v7[27];
  v58 = swift_getKeyPath();
  v59 = *(_QWORD *)(v8 - 272);
  v60 = *(_QWORD *)(v8 - 256);
  v61 = *(_QWORD *)(v8 - 264);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 16))(v60, v56, v61);
  v62 = v60 + *(int *)(*(_QWORD *)(v8 - 288) + 36);
  *(_QWORD *)v62 = v58;
  *(_QWORD *)(v62 + 8) = v57;
  *(_BYTE *)(v62 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v56, v61);
  v63 = v7[7];
  v64 = v7[8];
  v65 = v7[9];
  v66 = v7[10];
  LOBYTE(v59) = sub_23BFF8B60();
  v67 = *(_QWORD *)(v8 - 240);
  sub_23BE9F190(v60, v67, &qword_256AE7990);
  v68 = v67 + *(int *)(*(_QWORD *)(v8 - 248) + 36);
  *(_BYTE *)v68 = v59;
  *(_QWORD *)(v68 + 8) = v65;
  *(_QWORD *)(v68 + 16) = v64;
  *(_QWORD *)(v68 + 24) = v63;
  *(_QWORD *)(v68 + 32) = v66;
  *(_BYTE *)(v68 + 40) = 0;
  sub_23BE9F3A0(v60, &qword_256AE7990);
  v69 = *(_QWORD *)(v8 - 232);
  sub_23BFF8884();
  sub_23BF9FFBC();
  v70 = *(_QWORD *)(v8 - 152);
  sub_23BFF8E3C();
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v8 - 224) + 8))(v69, *(_QWORD *)(v8 - 216));
  sub_23BE9F3A0(v67, &qword_256AE7998);
  sub_23BEC42E0(v70, *(_QWORD *)(v8 - 160), &qword_256AE79A0);
  v71 = (_QWORD *)((char *)v7 + *(int *)(*(_QWORD *)(v8 - 176) + 76));
  v72 = v71[3];
  v73 = 1;
  if (!v72)
  {
    v97 = *(_QWORD *)(v8 - 312);
    v95 = *(_QWORD *)(v8 - 320);
    goto LABEL_10;
  }
  v74 = v7;
  v75 = *v71;
  v76 = v71[1];
  v77 = v71[2];
  v78 = swift_getKeyPath();
  *(_QWORD *)(v8 - 136) = v75;
  *(_QWORD *)(v8 - 128) = v76;
  *(_BYTE *)(v8 - 120) = v77 & 1;
  *(_QWORD *)(v8 - 112) = v72;
  *(_QWORD *)(v8 - 104) = v78;
  *(_BYTE *)(v8 - 96) = 1;
  v79 = *(_QWORD *)(v8 - 168);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v8 - 192))(v79, *(unsigned int *)(v8 - 200), *(_QWORD *)(v8 - 208));
  sub_23BEA1DC0(v75, v76, v77, v72);
  sub_23BEA0EAC(v75, v76, v77 & 1);
  swift_bridgeObjectRetain();
  result = sub_23BFF93AC();
  if ((result & 1) != 0)
  {
    *(_QWORD *)(v8 - 192) = v75;
    *(_DWORD *)(v8 - 176) = v77 & 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AE79E0);
    sub_23BFA0048();
    v80 = *(_QWORD *)(v8 - 440);
    sub_23BFF8D94();
    sub_23BE9F3A0(v79, &qword_256AE78E8);
    sub_23BEA0F64(*(_QWORD *)(v8 - 136), *(_QWORD *)(v8 - 128), *(_BYTE *)(v8 - 120));
    swift_bridgeObjectRelease();
    swift_release();
    v81 = v74;
    v82 = v74[28];
    v83 = *((_BYTE *)v74 + 232);
    v84 = swift_getKeyPath();
    v85 = v76;
    v86 = *(_QWORD *)(v8 - 432);
    v87 = *(_QWORD *)(v8 - 408);
    v88 = *(_QWORD *)(v8 - 424);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v86 + 16))(v87, v80, v88);
    v89 = v87 + *(int *)(*(_QWORD *)(v8 - 448) + 36);
    *(_QWORD *)v89 = v84;
    *(_QWORD *)(v89 + 8) = v82;
    *(_BYTE *)(v89 + 16) = v83;
    (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v80, v88);
    v90 = v81[11];
    v91 = v81[12];
    v92 = v81[13];
    v93 = v81[14];
    LOBYTE(v84) = sub_23BFF8B60();
    v94 = *(_QWORD *)(v8 - 416);
    sub_23BE9F190(v87, v94, &qword_256AE7978);
    sub_23BEA0F64(*(_QWORD *)(v8 - 192), v85, *(_DWORD *)(v8 - 176));
    swift_bridgeObjectRelease();
    v95 = *(_QWORD *)(v8 - 320);
    v96 = v94 + *(int *)(v95 + 36);
    *(_BYTE *)v96 = v84;
    *(_QWORD *)(v96 + 8) = v92;
    *(_QWORD *)(v96 + 16) = v91;
    *(_QWORD *)(v96 + 24) = v90;
    *(_QWORD *)(v96 + 32) = v93;
    *(_BYTE *)(v96 + 40) = 0;
    sub_23BE9F3A0(v87, &qword_256AE7978);
    v97 = *(_QWORD *)(v8 - 312);
    sub_23BEC42E0(v94, v97, &qword_256AE7980);
    v73 = 0;
LABEL_10:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 328) + 56))(v97, v73, 1, v95);
    v98 = *(_QWORD *)(v8 - 184);
    v99 = *(_QWORD *)(v8 - 336);
    sub_23BE9F190(v98, v99, &qword_256AE7898);
    v101 = *(_QWORD *)(v8 - 160);
    v100 = *(_QWORD *)(v8 - 152);
    sub_23BE9F190(v101, v100, &qword_256AE79A0);
    v102 = *(_QWORD *)(v8 - 304);
    sub_23BE9F190(v97, v102, &qword_256AE78A0);
    v103 = *(_QWORD *)(v8 - 296);
    sub_23BE9F190(v99, v103, &qword_256AE7898);
    v104 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE79D8);
    sub_23BE9F190(v100, v103 + *(int *)(v104 + 48), &qword_256AE79A0);
    sub_23BE9F190(v102, v103 + *(int *)(v104 + 64), &qword_256AE78A0);
    sub_23BE9F3A0(v97, &qword_256AE78A0);
    sub_23BE9F3A0(v101, &qword_256AE79A0);
    sub_23BE9F3A0(v98, &qword_256AE7898);
    sub_23BE9F3A0(v102, &qword_256AE78A0);
    sub_23BE9F3A0(v100, &qword_256AE79A0);
    return sub_23BE9F3A0(v99, &qword_256AE7898);
  }
LABEL_13:
  __break(1u);
  return result;
}

void sub_23BF9B5AC()
{
  type metadata accessor for ActionCardView();
}

uint64_t sub_23BF9B600(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t result;
  void (**v16)();
  _BYTE v17[96];

  v8 = *(_QWORD *)(a1 - 8);
  v9 = MEMORY[0x24BDAC7A8](a1);
  v11 = &v17[-v10];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v8 + 16))(&v17[-v10], v5, a1, v9);
  v12 = (*(unsigned __int8 *)(v8 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v13 = (char *)swift_allocObject();
  *((_QWORD *)v13 + 2) = v4;
  *((_QWORD *)v13 + 3) = v3;
  *((_QWORD *)v13 + 4) = v2;
  *((_QWORD *)v13 + 5) = v1;
  v14 = *(_QWORD *)(v6 - 144);
  *((_QWORD *)v13 + 6) = *(_QWORD *)(v6 - 152);
  *((_QWORD *)v13 + 7) = v14;
  result = (*(uint64_t (**)(char *, _BYTE *, uint64_t))(v8 + 32))(&v13[v12], v11, a1);
  v16 = *(void (***)())(v6 - 136);
  *v16 = sub_23BF9FAE8;
  v16[1] = (void (*)())v13;
  return result;
}

void sub_23BF9B6C0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v25 = a8;
  v26 = a7;
  v21 = a6;
  v22 = a3;
  v23 = a4;
  v24 = a5;
  v19 = a2;
  v20 = a9;
  v18 = a1;
  v17 = sub_23BFF8500();
  v15 = *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64);
  MEMORY[0x24BDAC7A8](v17);
  v16 = (char *)&v16 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = a3;
  v28 = a4;
  v29 = a5;
  v30 = a6;
  v31 = a7;
  v32 = a8;
  type metadata accessor for ActionCardView();
}

uint64_t sub_23BF9B76C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t, uint64_t);
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;

  v7 = *(_QWORD *)(a1 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v37 - v9;
  *(_QWORD *)(v5 - 240) = sub_23BFF8F8C();
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  *(_QWORD *)(v5 - 224) = v11;
  v11(v10, v3, a1);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  *(_QWORD *)(v5 - 232) = v12;
  v13 = v4;
  v14 = *(_QWORD *)(v5 - 248);
  v15 = *(_QWORD *)(v5 - 280);
  v12(v13, v14, v15);
  v16 = *(unsigned __int8 *)(v7 + 80);
  v17 = (v16 + 64) & ~v16;
  v18 = *(unsigned __int8 *)(v2 + 80);
  v19 = (v8 + v18 + v17) & ~v18;
  *(_QWORD *)(v5 - 256) = v19 + v1;
  *(_QWORD *)(v5 - 264) = v16 | v18 | 7;
  v20 = (char *)swift_allocObject();
  v21 = *(_QWORD *)(v5 - 184);
  *((_QWORD *)v20 + 2) = *(_QWORD *)(v5 - 192);
  *((_QWORD *)v20 + 3) = v21;
  v22 = *(_QWORD *)(v5 - 200);
  *((_QWORD *)v20 + 4) = *(_QWORD *)(v5 - 176);
  *((_QWORD *)v20 + 5) = v22;
  v23 = *(_QWORD *)(v5 - 168);
  *((_QWORD *)v20 + 6) = *(_QWORD *)(v5 - 160);
  *((_QWORD *)v20 + 7) = v23;
  v24 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
  *(_QWORD *)(v5 - 272) = v24;
  v24(&v20[v17], v10, a1);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 32);
  v26 = *(_QWORD *)(v5 - 288);
  v27 = v15;
  v25(&v20[v19], v26, v15);
  v28 = v25;
  *(_QWORD *)(v5 - 136) = *(_QWORD *)(v5 - 240);
  *(_QWORD *)(v5 - 128) = sub_23BF9FB8C;
  *(_QWORD *)(v5 - 112) = 0;
  *(_QWORD *)(v5 - 104) = 0;
  *(_QWORD *)(v5 - 120) = v20;
  sub_23BFF84DC();
  *(_QWORD *)(v5 - 152) = v29;
  *(_QWORD *)(v5 - 144) = v30;
  (*(void (**)(char *, _QWORD, uint64_t))(v5 - 224))(v10, *(_QWORD *)(v5 - 216), a1);
  v31 = v27;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 - 232))(v26, v14, v27);
  v32 = (char *)swift_allocObject();
  v33 = *(_QWORD *)(v5 - 184);
  *((_QWORD *)v32 + 2) = *(_QWORD *)(v5 - 192);
  *((_QWORD *)v32 + 3) = v33;
  v34 = *(_QWORD *)(v5 - 200);
  *((_QWORD *)v32 + 4) = *(_QWORD *)(v5 - 176);
  *((_QWORD *)v32 + 5) = v34;
  v35 = *(_QWORD *)(v5 - 168);
  *((_QWORD *)v32 + 6) = *(_QWORD *)(v5 - 160);
  *((_QWORD *)v32 + 7) = v35;
  (*(void (**)(char *, char *, uint64_t))(v5 - 272))(&v32[v17], v10, a1);
  v28(&v32[v19], v26, v31);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE37E0);
  type metadata accessor for CGSize(0);
  sub_23BEAA610();
  sub_23BEA1BB8(qword_256AE4F48, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, MEMORY[0x24BDBD858]);
  sub_23BFF8F20();
  swift_release();
  swift_release();
  sub_23BEAA6B8(*(_QWORD *)(v5 - 128));
  return sub_23BEAA6B8(*(_QWORD *)(v5 - 112));
}

void sub_23BF9B9F0()
{
  sub_23BFF84DC();
  type metadata accessor for ActionCardView();
}

uint64_t sub_23BF9BA50()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE7940);
  return sub_23BFF9004();
}

void sub_23BF9BAA4()
{
  sub_23BFF84DC();
  type metadata accessor for ActionCardView();
}

uint64_t sub_23BF9BB00()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE7940);
  return sub_23BFF9004();
}

uint64_t sub_23BF9BB54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  _QWORD *v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(uint64_t, uint64_t);
  char *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD v105[2];
  uint64_t v106;
  _QWORD v107[2];
  _QWORD v108[2];
  _QWORD v109[2];
  _QWORD v110[2];
  _QWORD v111[2];
  _QWORD v112[2];
  _QWORD v113[2];
  _QWORD v114[2];
  _QWORD v115[2];
  _QWORD v116[2];
  uint64_t v117;
  ValueMetadata *v118;
  uint64_t v119;
  unint64_t v120;
  _QWORD v121[2];
  _QWORD v122[2];
  _QWORD v123[2];
  uint64_t v124;

  v93 = a2;
  v96 = *(_QWORD *)(a1 - 8);
  v92 = *(_QWORD *)(v96 + 64);
  MEMORY[0x24BDAC7A8](a1);
  v91 = (char *)&v76 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = v3;
  v86 = v3[2];
  v5 = sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE7880);
  v82 = sub_23BFF862C();
  v90 = v4[4];
  v6 = sub_23BFF96A0();
  v7 = sub_23BFF862C();
  v89 = v4[7];
  v124 = v89;
  v123[0] = MEMORY[0x242615198](MEMORY[0x24BDF5578], v6, &v124);
  v123[1] = MEMORY[0x24BDECC60];
  v8 = MEMORY[0x24BDED308];
  MEMORY[0x242615198](MEMORY[0x24BDED308], v7, v123);
  sub_23BFF86F8();
  sub_23BFF862C();
  v9 = sub_23BFF862C();
  v95 = v4[5];
  v10 = v4;
  v87 = v4;
  v122[0] = v95;
  v122[1] = MEMORY[0x24BDEEC40];
  v85 = MEMORY[0x242615198](v8, v5, v122);
  v121[0] = v85;
  v121[1] = MEMORY[0x24BDEBF50];
  v11 = MEMORY[0x242615198](v8, v9, v121);
  v117 = v9;
  v118 = (ValueMetadata *)v11;
  MEMORY[0x24261512C](255, &v117, MEMORY[0x24BDF3110], 0);
  swift_getTupleTypeMetadata2();
  v12 = sub_23BFF9220();
  v13 = MEMORY[0x24BDF5428];
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v12);
  sub_23BFF90AC();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE7888);
  v88 = v10[3];
  v14 = sub_23BFF862C();
  swift_getTupleTypeMetadata2();
  v15 = sub_23BFF9220();
  MEMORY[0x242615198](v13, v15);
  sub_23BFF90AC();
  sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE5160);
  sub_23BFF862C();
  swift_getTupleTypeMetadata2();
  v16 = sub_23BFF9220();
  MEMORY[0x242615198](v13, v16);
  v17 = sub_23BFF90C4();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE7890);
  v83 = sub_23BFF862C();
  v80 = sub_23BFF8968();
  sub_23BFF8ADC();
  v84 = sub_23BFF862C();
  v79 = sub_23BFF862C();
  v117 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE7898);
  v118 = (ValueMetadata *)__swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE78A0);
  v119 = (uint64_t)v118;
  v120 = v14;
  swift_getTupleTypeMetadata();
  v18 = sub_23BFF9220();
  MEMORY[0x242615198](v13, v18);
  v19 = sub_23BFF90AC();
  v20 = sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3C28);
  v21 = sub_23BFF862C();
  v22 = sub_23BFF862C();
  v23 = MEMORY[0x242615198](MEMORY[0x24BDF4700], v19);
  v24 = sub_23BEA1F94(&qword_256AE78A8, &qword_256AE5160, MEMORY[0x24BDF06D0]);
  v116[0] = v23;
  v116[1] = v24;
  v25 = MEMORY[0x24BDED308];
  v26 = MEMORY[0x242615198](MEMORY[0x24BDED308], v20, v116);
  v81 = (char *)sub_23BEA1F94(qword_256AE3C30, &qword_256AE3C28, MEMORY[0x24BDEB950]);
  v115[0] = v26;
  v115[1] = v81;
  v114[0] = MEMORY[0x242615198](v25, v21, v115);
  v114[1] = MEMORY[0x24BDECC60];
  MEMORY[0x242615198](v25, v22, v114);
  v27 = sub_23BFF86F8();
  v28 = sub_23BFF862C();
  v29 = v80;
  v30 = sub_23BFF8968();
  v31 = sub_23BFF8FD4();
  v94 = sub_23BFF862C();
  v32 = MEMORY[0x24BDEDC10];
  v33 = sub_23BEA1F94(&qword_256AE78B0, &qword_256AE7880, MEMORY[0x24BDEDC10]);
  v113[0] = v85;
  v113[1] = v33;
  v34 = MEMORY[0x242615198](v25, v82, v113);
  v35 = MEMORY[0x242615198](MEMORY[0x24BDF4750], v17);
  v36 = sub_23BEA1F94(&qword_256AE78B8, &qword_256AE7890, MEMORY[0x24BDEF370]);
  v112[0] = v35;
  v112[1] = v36;
  v37 = MEMORY[0x242615198](v25, v83, v112);
  v111[0] = v34;
  v111[1] = v37;
  v38 = MEMORY[0x24BDEF3E0];
  v39 = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v29, v111);
  v40 = sub_23BEA1BB8((unint64_t *)&qword_256AE3908, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088], MEMORY[0x24BDF1078]);
  v110[0] = v95;
  v110[1] = v40;
  v109[0] = MEMORY[0x242615198](v25, v84, v110);
  v109[1] = MEMORY[0x24BDEEC40];
  v41 = MEMORY[0x242615198](v25, v79, v109);
  v42 = MEMORY[0x242615198](v32, v27);
  v108[0] = v41;
  v108[1] = v42;
  v43 = MEMORY[0x242615198](v25, v28, v108);
  v107[0] = v39;
  v107[1] = v43;
  v106 = MEMORY[0x242615198](v38, v30, v107);
  v105[0] = MEMORY[0x242615198](MEMORY[0x24BDF3F50], v31, &v106);
  v105[1] = v81;
  v84 = MEMORY[0x242615198](v25, v94, v105);
  v44 = sub_23BFF9040();
  v85 = *(_QWORD *)(v44 - 8);
  v80 = v44;
  v45 = MEMORY[0x24BDAC7A8](v44);
  v81 = (char *)&v76 - v46;
  v47 = MEMORY[0x242615198](MEMORY[0x24BDF43B0], v44, v45);
  v79 = v47;
  v78 = sub_23BF05790();
  v117 = v44;
  v118 = &type metadata for ActionCardButtonStyle;
  v119 = v47;
  v120 = v78;
  v48 = MEMORY[0x24261512C](0, &v117, MEMORY[0x24BDF22E0], 0);
  v49 = *(_QWORD *)(v48 - 8);
  v82 = v48;
  v83 = v49;
  MEMORY[0x24BDAC7A8](v48);
  v76 = (char *)&v76 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = MEMORY[0x24BDAC7A8](v51);
  v77 = (uint64_t)&v76 - v53;
  v54 = v96;
  v55 = v91;
  v56 = v87;
  (*(void (**)(char *, uint64_t, _QWORD *, __n128))(v96 + 16))(v91, v97, v87, v52);
  v57 = (*(unsigned __int8 *)(v54 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80);
  v58 = (char *)swift_allocObject();
  v59 = v86;
  v61 = v88;
  v60 = v89;
  *((_QWORD *)v58 + 2) = v86;
  *((_QWORD *)v58 + 3) = v61;
  v62 = v90;
  v64 = v95;
  v63 = v96;
  *((_QWORD *)v58 + 4) = v90;
  *((_QWORD *)v58 + 5) = v64;
  v65 = v56;
  v66 = v56[6];
  *((_QWORD *)v58 + 6) = v66;
  *((_QWORD *)v58 + 7) = v60;
  (*(void (**)(char *, char *, _QWORD *))(v63 + 32))(&v58[v57], v55, v65);
  v98 = v59;
  v99 = v61;
  v100 = v62;
  v101 = v64;
  v102 = v66;
  v103 = v60;
  v104 = v97;
  v67 = v81;
  sub_23BFF9034();
  v68 = (uint64_t)v76;
  v70 = v79;
  v69 = v80;
  v71 = v78;
  sub_23BFF8D04();
  (*(void (**)(char *, uint64_t))(v85 + 8))(v67, v69);
  v117 = v69;
  v118 = &type metadata for ActionCardButtonStyle;
  v119 = v70;
  v120 = v71;
  swift_getOpaqueTypeConformance2();
  v72 = v77;
  v73 = v82;
  sub_23BEA72EC(v68, v82, v77);
  v74 = *(void (**)(uint64_t, uint64_t))(v83 + 8);
  v74(v68, v73);
  sub_23BEA5C0C(v72, v73, v93);
  return ((uint64_t (*)(uint64_t, uint64_t))v74)(v72, v73);
}

uint64_t sub_23BF9C450@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD v98[2];
  uint64_t v99;
  _QWORD v100[2];
  _QWORD v101[2];
  _QWORD v102[2];
  _QWORD v103[2];
  _QWORD v104[2];
  _QWORD v105[2];
  _QWORD v106[2];
  _QWORD v107[2];
  _QWORD v108[2];
  _QWORD v109[2];
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD v114[2];
  _QWORD v115[2];
  _QWORD v116[2];
  uint64_t v117;

  v84 = a7;
  v85 = a4;
  v86 = a6;
  v81 = a3;
  v82 = a5;
  v89 = a8;
  v90 = a1;
  v88 = sub_23BFF86BC();
  MEMORY[0x24BDAC7A8](v88);
  v87 = (char *)&v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = a2;
  v12 = sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE7880);
  v76 = sub_23BFF862C();
  v13 = sub_23BFF96A0();
  v14 = sub_23BFF862C();
  v117 = a7;
  v116[0] = MEMORY[0x242615198](MEMORY[0x24BDF5578], v13, &v117);
  v116[1] = MEMORY[0x24BDECC60];
  v15 = MEMORY[0x24BDED308];
  MEMORY[0x242615198](MEMORY[0x24BDED308], v14, v116);
  sub_23BFF86F8();
  sub_23BFF862C();
  v16 = sub_23BFF862C();
  v115[0] = a5;
  v115[1] = MEMORY[0x24BDEEC40];
  v83 = MEMORY[0x242615198](v15, v12, v115);
  v114[0] = v83;
  v114[1] = MEMORY[0x24BDEBF50];
  v17 = MEMORY[0x242615198](v15, v16, v114);
  v110 = v16;
  v111 = v17;
  MEMORY[0x24261512C](255, &v110, MEMORY[0x24BDF3110], 0);
  swift_getTupleTypeMetadata2();
  v18 = sub_23BFF9220();
  v19 = MEMORY[0x24BDF5428];
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v18);
  sub_23BFF90AC();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE7888);
  v20 = sub_23BFF862C();
  swift_getTupleTypeMetadata2();
  v21 = sub_23BFF9220();
  MEMORY[0x242615198](v19, v21);
  sub_23BFF90AC();
  sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE5160);
  sub_23BFF862C();
  swift_getTupleTypeMetadata2();
  v22 = sub_23BFF9220();
  MEMORY[0x242615198](v19, v22);
  v77 = sub_23BFF90C4();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE7890);
  v78 = sub_23BFF862C();
  v23 = sub_23BFF8968();
  sub_23BFF8ADC();
  v80 = sub_23BFF862C();
  v68 = sub_23BFF862C();
  v110 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE7898);
  v111 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE78A0);
  v112 = v111;
  v113 = v20;
  swift_getTupleTypeMetadata();
  v24 = sub_23BFF9220();
  MEMORY[0x242615198](v19, v24);
  v25 = sub_23BFF90AC();
  v26 = sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3C28);
  v27 = sub_23BFF862C();
  v28 = sub_23BFF862C();
  v29 = MEMORY[0x242615198](MEMORY[0x24BDF4700], v25);
  v30 = sub_23BEA1F94(&qword_256AE78A8, &qword_256AE5160, MEMORY[0x24BDF06D0]);
  v109[0] = v29;
  v109[1] = v30;
  v31 = MEMORY[0x24BDED308];
  v32 = MEMORY[0x242615198](MEMORY[0x24BDED308], v26, v109);
  v79 = sub_23BEA1F94(qword_256AE3C30, &qword_256AE3C28, MEMORY[0x24BDEB950]);
  v108[0] = v32;
  v108[1] = v79;
  v107[0] = MEMORY[0x242615198](v31, v27, v108);
  v107[1] = MEMORY[0x24BDECC60];
  v33 = v31;
  MEMORY[0x242615198](v31, v28, v107);
  v69 = sub_23BFF86F8();
  v70 = sub_23BFF862C();
  v34 = v23;
  v35 = sub_23BFF8968();
  v36 = sub_23BFF8FD4();
  v74 = *(_QWORD *)(v36 - 8);
  MEMORY[0x24BDAC7A8](v36);
  v38 = (char *)&v67 - v37;
  v39 = sub_23BFF862C();
  v75 = *(_QWORD *)(v39 - 8);
  MEMORY[0x24BDAC7A8](v39);
  v71 = (char *)&v67 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v41);
  v72 = (uint64_t)&v67 - v42;
  v43 = v82;
  v91 = v73;
  v92 = v81;
  v93 = v85;
  v94 = v82;
  v95 = v86;
  v96 = v84;
  v97 = v90;
  v44 = sub_23BEA1F94(&qword_256AE78B0, &qword_256AE7880, MEMORY[0x24BDEDC10]);
  v106[0] = v83;
  v106[1] = v44;
  v45 = v33;
  v46 = MEMORY[0x242615198](v33, v76, v106);
  v47 = MEMORY[0x242615198](MEMORY[0x24BDF4750], v77);
  v48 = sub_23BEA1F94(&qword_256AE78B8, &qword_256AE7890, MEMORY[0x24BDEF370]);
  v105[0] = v47;
  v105[1] = v48;
  v49 = MEMORY[0x242615198](v45, v78, v105);
  v104[0] = v46;
  v104[1] = v49;
  v50 = MEMORY[0x24BDEF3E0];
  v51 = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v34, v104);
  v52 = sub_23BEA1BB8((unint64_t *)&qword_256AE3908, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088], MEMORY[0x24BDF1078]);
  v103[0] = v43;
  v103[1] = v52;
  v102[0] = MEMORY[0x242615198](v45, v80, v103);
  v102[1] = MEMORY[0x24BDEEC40];
  v53 = MEMORY[0x242615198](v45, v68, v102);
  v54 = MEMORY[0x242615198](MEMORY[0x24BDEDC10], v69);
  v101[0] = v53;
  v101[1] = v54;
  v55 = MEMORY[0x242615198](v45, v70, v101);
  v100[0] = v51;
  v100[1] = v55;
  v56 = MEMORY[0x242615198](v50, v35, v100);
  sub_23BFF8FC8();
  v57 = *(_QWORD *)(v90 + 32);
  v58 = v87;
  v59 = &v87[*(int *)(v88 + 20)];
  v60 = *MEMORY[0x24BDEEB68];
  v61 = sub_23BFF8854();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 104))(v59, v60, v61);
  *v58 = v57;
  v58[1] = v57;
  v99 = v56;
  v62 = MEMORY[0x242615198](MEMORY[0x24BDF3F50], v36, &v99);
  sub_23BEA1BB8(&qword_256AE3CB8, (uint64_t (*)(uint64_t))MEMORY[0x24BDED998], MEMORY[0x24BDED990]);
  v63 = (uint64_t)v71;
  sub_23BFF8F44();
  sub_23BEC4004((uint64_t)v58);
  (*(void (**)(char *, uint64_t))(v74 + 8))(v38, v36);
  v98[0] = v62;
  v98[1] = v79;
  MEMORY[0x242615198](v45, v39, v98);
  v64 = v72;
  sub_23BEA72EC(v63, v39, v72);
  v65 = *(void (**)(uint64_t, uint64_t))(v75 + 8);
  v65(v63, v39);
  sub_23BEA5C0C(v64, v39, v89);
  return ((uint64_t (*)(uint64_t, uint64_t))v65)(v64, v39);
}

void sub_23BF9CCC0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[7];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD v66[2];
  _QWORD v67[2];
  _QWORD v68[2];
  uint64_t v69;
  _QWORD v70[2];
  _QWORD v71[2];
  _QWORD v72[3];

  v53 = a4;
  v54 = a7;
  v43 = a3;
  v44 = a6;
  v59 = a5;
  v45 = a1;
  v51 = a8;
  sub_23BFF8ADC();
  v42 = a2;
  v57 = sub_23BFF862C();
  v9 = sub_23BFF862C();
  v60 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE7898);
  v61 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE78A0);
  v62 = v61;
  v55 = sub_23BFF862C();
  v63 = v55;
  swift_getTupleTypeMetadata();
  v10 = sub_23BFF9220();
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v10);
  v11 = sub_23BFF90AC();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE5160);
  v12 = sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3C28);
  v13 = sub_23BFF862C();
  v14 = sub_23BFF862C();
  v72[0] = MEMORY[0x242615198](MEMORY[0x24BDF4700], v11);
  v72[1] = sub_23BEA1F94(&qword_256AE78A8, &qword_256AE5160, MEMORY[0x24BDF06D0]);
  v15 = MEMORY[0x24BDED308];
  v71[0] = MEMORY[0x242615198](MEMORY[0x24BDED308], v12, v72);
  v71[1] = sub_23BEA1F94(qword_256AE3C30, &qword_256AE3C28, MEMORY[0x24BDEB950]);
  v16 = MEMORY[0x242615198](v15, v13, v71);
  v17 = MEMORY[0x24BDECC60];
  v70[0] = v16;
  v70[1] = MEMORY[0x24BDECC60];
  MEMORY[0x242615198](v15, v14, v70);
  v58 = v9;
  v56 = sub_23BFF86F8();
  v18 = sub_23BFF862C();
  v41[1] = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v41[2] = (char *)v41 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v41[6] = (char *)v41 - v21;
  v22 = sub_23BFF862C();
  v23 = sub_23BFF96A0();
  v24 = sub_23BFF862C();
  v69 = v54;
  v68[0] = MEMORY[0x242615198](MEMORY[0x24BDF5578], v23, &v69);
  v68[1] = v17;
  MEMORY[0x242615198](v15, v24, v68);
  sub_23BFF86F8();
  sub_23BFF862C();
  v25 = sub_23BFF862C();
  v26 = v59;
  v67[0] = v59;
  v67[1] = MEMORY[0x24BDEEC40];
  v52 = MEMORY[0x242615198](v15, v22, v67);
  v66[0] = v52;
  v66[1] = MEMORY[0x24BDEBF50];
  v27 = MEMORY[0x242615198](v15, v25, v66);
  v60 = v25;
  v61 = v27;
  MEMORY[0x24261512C](255, &v60, MEMORY[0x24BDF3110], 0);
  swift_getTupleTypeMetadata2();
  v28 = sub_23BFF9220();
  v29 = MEMORY[0x24BDF5428];
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v28);
  sub_23BFF90AC();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE7888);
  swift_getTupleTypeMetadata2();
  v30 = sub_23BFF9220();
  MEMORY[0x242615198](v29, v30);
  sub_23BFF90AC();
  sub_23BFF862C();
  sub_23BFF862C();
  swift_getTupleTypeMetadata2();
  v31 = sub_23BFF9220();
  MEMORY[0x242615198](v29, v31);
  v32 = sub_23BFF90C4();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE7890);
  v55 = v32;
  v33 = sub_23BFF862C();
  MEMORY[0x24BDAC7A8](v33);
  MEMORY[0x24BDAC7A8](v34);
  v41[3] = (char *)v41 - v35;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE7880);
  sub_23BFF862C();
  v48 = v33;
  v36 = sub_23BFF8968();
  v41[5] = *(_QWORD *)(v36 - 8);
  MEMORY[0x24BDAC7A8](v36);
  v41[4] = (char *)v41 - v37;
  MEMORY[0x24BDAC7A8](v38);
  MEMORY[0x24BDAC7A8](v39);
  v46 = v40;
  v50 = v18;
  v49 = sub_23BFF8968();
  v47 = *(_QWORD *)(v49 - 8);
  MEMORY[0x24BDAC7A8](v49);
  v60 = v42;
  v61 = v43;
  v62 = v53;
  v63 = v26;
  v64 = v44;
  v65 = v54;
  type metadata accessor for ActionCardView();
}

uint64_t sub_23BF9D2DC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v10 = *(unsigned __int8 *)(v1[10] + *(int *)(a1 + 84));
  v1[20] = v3;
  if (v10)
  {
    if (v10 == 1)
    {
      sub_23BF98F88((_QWORD *)a1, v8);
      v11 = MEMORY[0x242615198](MEMORY[0x24BDF4750], v1[21]);
      v12 = sub_23BEA1F94(&qword_256AE78B8, &qword_256AE7890, MEMORY[0x24BDEF370]);
      v1[48] = v11;
      v1[49] = v12;
      v13 = MEMORY[0x24BDED308];
      v14 = v1[13];
      v15 = MEMORY[0x242615198](MEMORY[0x24BDED308], v14, v1 + 48);
      v16 = v1[3];
      sub_23BEA72EC(v8, v14, v16);
      v17 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
      v17(v8, v14);
      sub_23BEA5C0C(v16, v14, v8);
      v18 = sub_23BEA1F94(&qword_256AE78B0, &qword_256AE7880, MEMORY[0x24BDEDC10]);
      v1[46] = v1[17];
      v1[47] = v18;
      v19 = MEMORY[0x242615198](v13, v2, v1 + 46);
      v20 = v1[4];
      sub_23BEA5CE8(v8, v2, v14);
      v17(v8, v14);
      v1[44] = v19;
      v1[45] = v15;
      v21 = v1[11];
      MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v21, v1 + 44);
      v22 = sub_23BEA1BB8((unint64_t *)&qword_256AE3908, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088], MEMORY[0x24BDF1078]);
      v23 = v1[25];
      v1[42] = v23;
      v1[43] = v22;
      v24 = MEMORY[0x24BDED308];
      v1[40] = MEMORY[0x242615198](MEMORY[0x24BDED308], v1[23], v1 + 42);
      v1[41] = MEMORY[0x24BDEEC40];
      v25 = MEMORY[0x242615198](v24, v1[24], v1 + 40);
      v26 = MEMORY[0x242615198](MEMORY[0x24BDEDC10], v1[22]);
      v1[38] = v25;
      v1[39] = v26;
      v27 = v1[15];
      MEMORY[0x242615198](v24, v27, v1 + 38);
      sub_23BEA5C24(v20, v21);
      v28 = v20;
      v29 = v1[17];
      (*(void (**)(uint64_t, uint64_t))(v1[5] + 8))(v28, v21);
      v30 = v14;
      v17(v1[3], v14);
    }
    else
    {
      v47 = v1[2];
      sub_23BF96730(a1, v47);
      v48 = sub_23BEA1BB8((unint64_t *)&qword_256AE3908, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088], MEMORY[0x24BDF1078]);
      *(_QWORD *)(v9 - 256) = v1[25];
      *(_QWORD *)(v9 - 248) = v48;
      v49 = MEMORY[0x24BDED308];
      v1[72] = MEMORY[0x242615198](MEMORY[0x24BDED308], v1[23], v9 - 256);
      v1[73] = MEMORY[0x24BDEEC40];
      v50 = MEMORY[0x242615198](v49, v1[24], v1 + 72);
      v51 = MEMORY[0x24BDEDC10];
      v52 = MEMORY[0x242615198](MEMORY[0x24BDEDC10], v1[22]);
      v1[70] = v50;
      v1[71] = v52;
      v53 = v1[15];
      MEMORY[0x242615198](v49, v53, v1 + 70);
      v54 = v1[6];
      sub_23BEA72EC(v47, v53, v54);
      v55 = *(void (**)(uint64_t, uint64_t))(v1[1] + 8);
      v55(v47, v53);
      sub_23BEA5C0C(v54, v53, v47);
      v56 = sub_23BEA1F94(&qword_256AE78B0, &qword_256AE7880, v51);
      v57 = v1[17];
      v1[68] = v57;
      v1[69] = v56;
      v58 = MEMORY[0x242615198](v49, v2, v1 + 68);
      v59 = MEMORY[0x242615198](MEMORY[0x24BDF4750], v1[21]);
      v60 = sub_23BEA1F94(&qword_256AE78B8, &qword_256AE7890, MEMORY[0x24BDEF370]);
      v1[66] = v59;
      v27 = v53;
      v29 = v57;
      v1[67] = v60;
      v30 = v1[13];
      v61 = MEMORY[0x242615198](v49, v30, v1 + 66);
      v1[64] = v58;
      v1[65] = v61;
      v21 = v1[11];
      MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v21, v1 + 64);
      sub_23BEA5CE8(v47, v21, v27);
      v55(v47, v27);
      v55(v1[6], v27);
      v23 = v1[25];
    }
  }
  else
  {
    sub_23BF98238(a1);
    v31 = sub_23BEA1F94(&qword_256AE78B0, &qword_256AE7880, MEMORY[0x24BDEDC10]);
    v1[36] = v1[17];
    v1[37] = v31;
    v32 = MEMORY[0x24BDED308];
    v33 = MEMORY[0x242615198](MEMORY[0x24BDED308], v2, v1 + 36);
    sub_23BEA72EC(v6, v2, v5);
    v34 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v34(v6, v2);
    sub_23BEA5C0C(v5, v2, v6);
    v35 = MEMORY[0x242615198](MEMORY[0x24BDF4750], v1[21]);
    v36 = sub_23BEA1F94(&qword_256AE78B8, &qword_256AE7890, MEMORY[0x24BDEF370]);
    v1[34] = v35;
    v1[35] = v36;
    v37 = v32;
    v38 = v1[13];
    v39 = MEMORY[0x242615198](v37, v38, v1 + 34);
    v40 = v1[4];
    sub_23BEA5C24(v6, v2);
    v34(v6, v2);
    v1[32] = v33;
    v1[33] = v39;
    v21 = v1[11];
    MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v21, v1 + 32);
    v41 = sub_23BEA1BB8((unint64_t *)&qword_256AE3908, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088], MEMORY[0x24BDF1078]);
    v23 = v1[25];
    v1[30] = v23;
    v1[31] = v41;
    v42 = MEMORY[0x24BDED308];
    v1[28] = MEMORY[0x242615198](MEMORY[0x24BDED308], v1[23], v1 + 30);
    v1[29] = MEMORY[0x24BDEEC40];
    v43 = MEMORY[0x242615198](v42, v1[24], v1 + 28);
    v44 = MEMORY[0x242615198](MEMORY[0x24BDEDC10], v1[22]);
    v1[26] = v43;
    v1[27] = v44;
    v30 = v38;
    v45 = v1[15];
    MEMORY[0x242615198](MEMORY[0x24BDED308], v45, v1 + 26);
    v27 = v45;
    sub_23BEA5C24(v40, v21);
    v46 = v40;
    v29 = v1[17];
    (*(void (**)(uint64_t, uint64_t))(v1[5] + 8))(v46, v21);
    v34(v5, v2);
  }
  v62 = MEMORY[0x24BDEDC10];
  v63 = sub_23BEA1F94(&qword_256AE78B0, &qword_256AE7880, MEMORY[0x24BDEDC10]);
  v1[62] = v29;
  v1[63] = v63;
  v64 = MEMORY[0x24BDED308];
  v65 = MEMORY[0x242615198](MEMORY[0x24BDED308], v2, v1 + 62);
  v66 = MEMORY[0x242615198](MEMORY[0x24BDF4750], v1[21]);
  v67 = sub_23BEA1F94(&qword_256AE78B8, &qword_256AE7890, MEMORY[0x24BDEF370]);
  v1[60] = v66;
  v1[61] = v67;
  v68 = MEMORY[0x242615198](v64, v30, v1 + 60);
  v1[58] = v65;
  v1[59] = v68;
  v69 = MEMORY[0x24BDEF3E0];
  v70 = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v21, v1 + 58);
  v71 = sub_23BEA1BB8((unint64_t *)&qword_256AE3908, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088], MEMORY[0x24BDF1078]);
  v1[56] = v23;
  v1[57] = v71;
  v1[54] = MEMORY[0x242615198](v64, v1[23], v1 + 56);
  v1[55] = MEMORY[0x24BDEEC40];
  v72 = MEMORY[0x242615198](v64, v1[24], v1 + 54);
  v73 = MEMORY[0x242615198](v62, v1[22]);
  v1[52] = v72;
  v1[53] = v73;
  v74 = MEMORY[0x242615198](v64, v27, v1 + 52);
  v1[50] = v70;
  v1[51] = v74;
  v75 = v1[14];
  MEMORY[0x242615198](v69, v75, v1 + 50);
  v76 = v1[20];
  sub_23BEA5C0C(v76, v75, v1[16]);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1[12] + 8))(v76, v75);
}

uint64_t sub_23BF9DA18@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = sub_23BFF87B8();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_23BF9DA48()
{
  return sub_23BFF87C4();
}

uint64_t sub_23BF9DA74@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23BFF8770();
  *a1 = result;
  return result;
}

uint64_t sub_23BF9DA9C()
{
  return sub_23BFF877C();
}

uint64_t sub_23BF9DAC0()
{
  return sub_23BFF87A0();
}

uint64_t sub_23BF9DAE0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5638);
  MEMORY[0x24BDAC7A8](v2);
  sub_23BE9F190(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_256AE5638);
  return sub_23BFF87AC();
}

BOOL _s15FitnessCanvasUI20ActionCardViewLayoutV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  int8x8_t v4;
  uint64_t v5;
  char v6;

  result = 0;
  if ((vminvq_u8((uint8x16_t)vcltzq_s8(vshlq_n_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)a1, *(float64x2_t *)a2), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 16), *(float64x2_t *)(a2 + 16))), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 32), *(float64x2_t *)(a2 + 32)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 48), *(float64x2_t *)(a2 + 48)))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32(
                                                              (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 64), *(float64x2_t *)(a2 + 64)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 80), *(float64x2_t *)(a2 + 80))), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 96), *(float64x2_t *)(a2 + 96)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 112), *(float64x2_t *)(a2 + 112))))), 7uLL))) & 1) != 0)
  {
    v4 = vand_s8(vcltz_s8(vshl_n_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 128), *(float64x2_t *)(a2 + 128)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 144), *(float64x2_t *)(a2 + 144))), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 160), *(float64x2_t *)(a2 + 160)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 176), *(float64x2_t *)(a2 + 176))))), 7uLL)), (int8x8_t)0x8040201008040201);
    v4.i8[0] = vaddv_s8(v4);
    if (v4.i32[0] == 255
      && *(double *)(a1 + 192) == *(double *)(a2 + 192)
      && *(double *)(a1 + 200) == *(double *)(a2 + 200)
      && *(double *)(a1 + 208) == *(double *)(a2 + 208)
      && *(_QWORD *)(a1 + 216) == *(_QWORD *)(a2 + 216))
    {
      v5 = *(_QWORD *)(a1 + 240);
      if ((*(_BYTE *)(a1 + 232) & 1) != 0)
      {
        if (!*(_BYTE *)(a2 + 232))
          return 0;
      }
      else
      {
        if (*(_QWORD *)(a1 + 224) == *(_QWORD *)(a2 + 224))
          v6 = *(_BYTE *)(a2 + 232);
        else
          v6 = 1;
        if ((v6 & 1) != 0)
          return 0;
      }
      return v5 == *(_QWORD *)(a2 + 240);
    }
  }
  return result;
}

unint64_t sub_23BF9DCBC()
{
  unint64_t result;

  result = qword_256AE77D0;
  if (!qword_256AE77D0)
  {
    result = MEMORY[0x242615198](&unk_23C0055B8, &type metadata for ActionCardViewLayout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE77D0);
  }
  return result;
}

unint64_t sub_23BF9DD04()
{
  unint64_t result;

  result = qword_256AE77E0[0];
  if (!qword_256AE77E0[0])
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for ActionCardViewLayout, &type metadata for ActionCardViewLayout);
    atomic_store(result, qword_256AE77E0);
  }
  return result;
}

__n128 __swift_memcpy248_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __n128 result;
  __int128 v12;
  __int128 v13;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  v8 = a2[8];
  v9 = a2[9];
  v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  result = (__n128)a2[12];
  v12 = a2[13];
  v13 = a2[14];
  *(_QWORD *)(a1 + 240) = *((_QWORD *)a2 + 30);
  *(_OWORD *)(a1 + 208) = v12;
  *(_OWORD *)(a1 + 224) = v13;
  *(__n128 *)(a1 + 192) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ActionCardViewLayout(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 248))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ActionCardViewLayout(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 248) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ActionCardViewLayout()
{
  return &type metadata for ActionCardViewLayout;
}

uint64_t storeEnumTagSinglePayload for ActionCardViewLayout.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 12 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 12) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF4)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF3)
    return ((uint64_t (*)(void))((char *)&loc_23BF9DE78 + 4 * byte_23C005352[v4]))();
  *a1 = a2 + 12;
  return ((uint64_t (*)(void))((char *)sub_23BF9DEAC + 4 * byte_23C00534D[v4]))();
}

uint64_t sub_23BF9DEAC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BF9DEB4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BF9DEBCLL);
  return result;
}

uint64_t sub_23BF9DEC8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BF9DED0);
  *(_BYTE *)result = a2 + 12;
  return result;
}

uint64_t sub_23BF9DED4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BF9DEDC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ActionCardViewLayout.CodingKeys()
{
  return &type metadata for ActionCardViewLayout.CodingKeys;
}

uint64_t sub_23BF9DEF8()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_23BF9DF00()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      result = sub_23BFF96A0();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_23BF9DFE8(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  __int128 v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  __int128 v43;
  unint64_t v44;
  void *v45;
  const void *v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  size_t __n;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  size_t v57;
  uint64_t v58;

  v3 = a1;
  v4 = *(_QWORD *)(a3[2] - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v6 = *(_QWORD *)(a3[3] - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = *(_QWORD *)(a3[4] - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 64);
  if (!*(_DWORD *)(v8 + 84))
    ++v10;
  v11 = v7 | v5 | v9;
  v12 = v11 <= 7 && ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v4 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) == 0;
  if (v12
    && (v13 = *(_QWORD *)(v4 + 64) + 7,
        ((((v10
          + 7
          + ((*(_QWORD *)(v6 + 64)
            + v9
            + ((v7
              + 33
              + ((((((v13 + ((v5 + 248) & ~v5)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8)) & ~v7)) & ~v9)) & 0xFFFFFFFFFFFFFFF8)
        + 23) & 0xFFFFFFFFFFFFFFF8)
      + 16 <= 0x18))
  {
    v54 = v7 + 33;
    v55 = a3[3];
    v56 = *(_QWORD *)(v6 + 64) + v9;
    v57 = v10 + 7;
    __n = v10;
    v58 = a3[4];
    v14 = *((_OWORD *)a2 + 13);
    *(_OWORD *)(a1 + 192) = *((_OWORD *)a2 + 12);
    *(_OWORD *)(a1 + 208) = v14;
    *(_OWORD *)(a1 + 224) = *((_OWORD *)a2 + 14);
    *(_QWORD *)(a1 + 240) = a2[30];
    v15 = *((_OWORD *)a2 + 9);
    *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
    *(_OWORD *)(a1 + 144) = v15;
    v16 = *((_OWORD *)a2 + 11);
    *(_OWORD *)(a1 + 160) = *((_OWORD *)a2 + 10);
    *(_OWORD *)(a1 + 176) = v16;
    v17 = *((_OWORD *)a2 + 5);
    *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
    *(_OWORD *)(a1 + 80) = v17;
    v18 = *((_OWORD *)a2 + 7);
    *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
    *(_OWORD *)(a1 + 112) = v18;
    v19 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v19;
    v20 = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 48) = v20;
    v21 = (a1 + v5 + 248) & ~v5;
    v22 = ((unint64_t)a2 + v5 + 248) & ~v5;
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v21, v22);
    v23 = (v13 + v21) & 0xFFFFFFFFFFFFFFF8;
    v24 = (v13 + v22) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)(v24 + 24) < 0xFFFFFFFFuLL)
    {
      v29 = *(_OWORD *)(v24 + 16);
      *(_OWORD *)v23 = *(_OWORD *)v24;
      *(_OWORD *)(v23 + 16) = v29;
    }
    else
    {
      v25 = *(_QWORD *)v24;
      v26 = *(_QWORD *)(v24 + 8);
      v27 = *(_BYTE *)(v24 + 16);
      sub_23BEA0EAC(*(_QWORD *)v24, v26, v27);
      *(_QWORD *)v23 = v25;
      *(_QWORD *)(v23 + 8) = v26;
      *(_BYTE *)(v23 + 16) = v27;
      *(_QWORD *)(v23 + 24) = *(_QWORD *)(v24 + 24);
      swift_bridgeObjectRetain();
    }
    v30 = (v23 + 39) & 0xFFFFFFFFFFFFFFF8;
    v31 = (v24 + 39) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)(v31 + 24) < 0xFFFFFFFFuLL)
    {
      v35 = *(_OWORD *)(v31 + 16);
      *(_OWORD *)v30 = *(_OWORD *)v31;
      *(_OWORD *)(v30 + 16) = v35;
    }
    else
    {
      v32 = *(_QWORD *)v31;
      v33 = *(_QWORD *)(v31 + 8);
      v34 = *(_BYTE *)(v31 + 16);
      sub_23BEA0EAC(*(_QWORD *)v31, v33, v34);
      *(_QWORD *)v30 = v32;
      *(_QWORD *)(v30 + 8) = v33;
      *(_BYTE *)(v30 + 16) = v34;
      *(_QWORD *)(v30 + 24) = *(_QWORD *)(v31 + 24);
      swift_bridgeObjectRetain();
    }
    v36 = ~v7;
    v37 = ~v9;
    v38 = (v30 + 39) & 0xFFFFFFFFFFFFFFF8;
    v39 = (v31 + 39) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)(v39 + 24) < 0xFFFFFFFFuLL)
    {
      v43 = *(_OWORD *)(v39 + 16);
      *(_OWORD *)v38 = *(_OWORD *)v39;
      *(_OWORD *)(v38 + 16) = v43;
    }
    else
    {
      v40 = *(_QWORD *)v39;
      v41 = *(_QWORD *)(v39 + 8);
      v42 = *(_BYTE *)(v39 + 16);
      sub_23BEA0EAC(*(_QWORD *)v39, v41, v42);
      *(_QWORD *)v38 = v40;
      *(_QWORD *)(v38 + 8) = v41;
      *(_BYTE *)(v38 + 16) = v42;
      *(_QWORD *)(v38 + 24) = *(_QWORD *)(v39 + 24);
      swift_bridgeObjectRetain();
    }
    *(_BYTE *)(v38 + 32) = *(_BYTE *)(v39 + 32);
    v44 = (v54 + v39) & v36;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))((v54 + v38) & v36, v44, v55);
    v45 = (void *)((v56 + ((v54 + v38) & v36)) & v37);
    v46 = (const void *)((v56 + v44) & v37);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v46, 1, v58))
    {
      memcpy(v45, v46, __n);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(v45, v46, v58);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v45, 0, 1, v58);
    }
    v47 = (_QWORD *)(((unint64_t)v45 + v57) & 0xFFFFFFFFFFFFFFF8);
    v48 = (_QWORD *)(((unint64_t)v46 + v57) & 0xFFFFFFFFFFFFFFF8);
    v49 = v48[1];
    *v47 = *v48;
    v47[1] = v49;
    v50 = (_QWORD *)(((unint64_t)v47 + 23) & 0xFFFFFFFFFFFFFFF8);
    v51 = (_QWORD *)(((unint64_t)v48 + 23) & 0xFFFFFFFFFFFFFFF8);
    *v50 = *v51;
    v50[1] = v51[1];
    swift_retain();
  }
  else
  {
    v28 = *a2;
    *(_QWORD *)a1 = *a2;
    v3 = v28 + ((v11 & 0xF8 ^ 0x1F8) & (v11 + 16));
  }
  swift_retain();
  return v3;
}

uint64_t sub_23BF9E388(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v3 = *(_QWORD *)(a2[2] - 8);
  v4 = (a1 + *(unsigned __int8 *)(v3 + 80) + 248) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  (*(void (**)(unint64_t))(v3 + 8))(v4);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v5 + 24) >= 0xFFFFFFFFuLL)
  {
    sub_23BEA0F64(*(_QWORD *)v5, *(_QWORD *)(v5 + 8), *(_BYTE *)(v5 + 16));
    swift_bridgeObjectRelease();
  }
  v6 = (v5 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v6 + 24) >= 0xFFFFFFFFuLL)
  {
    sub_23BEA0F64(*(_QWORD *)v6, *(_QWORD *)(v6 + 8), *(_BYTE *)(v6 + 16));
    swift_bridgeObjectRelease();
  }
  v7 = (v6 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v7 + 24) >= 0xFFFFFFFFuLL)
  {
    sub_23BEA0F64(*(_QWORD *)v7, *(_QWORD *)(v7 + 8), *(_BYTE *)(v7 + 16));
    swift_bridgeObjectRelease();
  }
  v8 = *(_QWORD *)(a2[3] - 8);
  v9 = (v7 + *(unsigned __int8 *)(v8 + 80) + 33) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t))(v8 + 8))(v9);
  v10 = *(_QWORD *)(v8 + 64);
  v11 = a2[4];
  v12 = *(_QWORD *)(v11 - 8);
  v13 = (v9 + v10 + *(unsigned __int8 *)(v12 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v12 + 48))(v13, 1, v11))
    (*(void (**)(unint64_t, uint64_t))(v12 + 8))(v13, v11);
  swift_release();
  return swift_release();
}

uint64_t sub_23BF9E4F4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  __int128 v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  const void *v45;
  int v46;
  uint64_t v47;
  size_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;

  v5 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v5;
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  v6 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v6;
  v7 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v7;
  v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v8;
  v9 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v9;
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  v11 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v11;
  v12 = *(_QWORD *)(a3[2] - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = (v13 + 248 + a1) & ~v13;
  v15 = (v13 + 248 + a2) & ~v13;
  (*(void (**)(uint64_t, uint64_t))(v12 + 16))(v14, v15);
  v16 = *(_QWORD *)(v12 + 64) + 7;
  v17 = (v16 + v14) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v16 + v15) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v18 + 24) < 0xFFFFFFFFuLL)
  {
    v22 = *(_OWORD *)(v18 + 16);
    *(_OWORD *)v17 = *(_OWORD *)v18;
    *(_OWORD *)(v17 + 16) = v22;
  }
  else
  {
    v19 = *(_QWORD *)v18;
    v20 = *(_QWORD *)(v18 + 8);
    v21 = *(_BYTE *)(v18 + 16);
    sub_23BEA0EAC(*(_QWORD *)v18, v20, v21);
    *(_QWORD *)v17 = v19;
    *(_QWORD *)(v17 + 8) = v20;
    *(_BYTE *)(v17 + 16) = v21;
    *(_QWORD *)(v17 + 24) = *(_QWORD *)(v18 + 24);
    swift_bridgeObjectRetain();
  }
  v23 = (v17 + 39) & 0xFFFFFFFFFFFFFFF8;
  v24 = (v18 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v24 + 24) < 0xFFFFFFFFuLL)
  {
    v28 = *(_OWORD *)(v24 + 16);
    *(_OWORD *)v23 = *(_OWORD *)v24;
    *(_OWORD *)(v23 + 16) = v28;
  }
  else
  {
    v25 = *(_QWORD *)v24;
    v26 = *(_QWORD *)(v24 + 8);
    v27 = *(_BYTE *)(v24 + 16);
    sub_23BEA0EAC(*(_QWORD *)v24, v26, v27);
    *(_QWORD *)v23 = v25;
    *(_QWORD *)(v23 + 8) = v26;
    *(_BYTE *)(v23 + 16) = v27;
    *(_QWORD *)(v23 + 24) = *(_QWORD *)(v24 + 24);
    swift_bridgeObjectRetain();
  }
  v29 = (v23 + 39) & 0xFFFFFFFFFFFFFFF8;
  v30 = (v24 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v30 + 24) < 0xFFFFFFFFuLL)
  {
    v34 = *(_OWORD *)(v30 + 16);
    *(_OWORD *)v29 = *(_OWORD *)v30;
    *(_OWORD *)(v29 + 16) = v34;
  }
  else
  {
    v31 = *(_QWORD *)v30;
    v32 = *(_QWORD *)(v30 + 8);
    v33 = *(_BYTE *)(v30 + 16);
    sub_23BEA0EAC(*(_QWORD *)v30, v32, v33);
    *(_QWORD *)v29 = v31;
    *(_QWORD *)(v29 + 8) = v32;
    *(_BYTE *)(v29 + 16) = v33;
    *(_QWORD *)(v29 + 24) = *(_QWORD *)(v30 + 24);
    swift_bridgeObjectRetain();
  }
  *(_BYTE *)(v29 + 32) = *(_BYTE *)(v30 + 32);
  v35 = *(_QWORD *)(a3[3] - 8);
  v36 = *(unsigned __int8 *)(v35 + 80);
  v37 = (v29 + v36 + 33) & ~v36;
  v38 = (v30 + v36 + 33) & ~v36;
  (*(void (**)(uint64_t, uint64_t))(v35 + 16))(v37, v38);
  v39 = *(_QWORD *)(v35 + 64);
  v40 = a3[4];
  v41 = *(_QWORD *)(v40 - 8);
  v42 = *(unsigned __int8 *)(v41 + 80);
  v43 = v39 + v42;
  v44 = (void *)((v43 + v37) & ~v42);
  v45 = (const void *)((v43 + v38) & ~v42);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v41 + 48))(v45, 1, v40))
  {
    v46 = *(_DWORD *)(v41 + 84);
    v47 = *(_QWORD *)(v41 + 64);
    if (v46)
      v48 = *(_QWORD *)(v41 + 64);
    else
      v48 = v47 + 1;
    memcpy(v44, v45, v48);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v41 + 16))(v44, v45, v40);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v44, 0, 1, v40);
    v46 = *(_DWORD *)(v41 + 84);
    v47 = *(_QWORD *)(v41 + 64);
  }
  if (v46)
    v49 = v47;
  else
    v49 = v47 + 1;
  v50 = (_QWORD *)(((unint64_t)v44 + v49 + 7) & 0xFFFFFFFFFFFFFFF8);
  v51 = (_QWORD *)(((unint64_t)v45 + v49 + 7) & 0xFFFFFFFFFFFFFFF8);
  v52 = v51[1];
  *v50 = *v51;
  v50[1] = v52;
  v53 = (_QWORD *)(((unint64_t)v50 + 23) & 0xFFFFFFFFFFFFFFF8);
  v54 = (_QWORD *)(((unint64_t)v51 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v53 = *v54;
  v53[1] = v54[1];
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_23BF9E7D8(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  uint64_t (*v61)(void *, uint64_t, uint64_t);
  int v62;
  size_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  v5 = *(_QWORD *)(a2 + 224);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = v5;
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  v6 = *(_QWORD *)(a3[2] - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 248 + a1) & ~v7;
  v9 = (v7 + 248 + a2) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 24))(v8, v9);
  v10 = *(_QWORD *)(v6 + 64) + 7;
  v11 = (v10 + v8) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v10 + v9) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_QWORD *)(v12 + 24);
  if (*(_QWORD *)(v11 + 24) < 0xFFFFFFFFuLL)
  {
    if (v13 >= 0xFFFFFFFF)
    {
      v20 = *(_QWORD *)v12;
      v21 = *(_QWORD *)(v12 + 8);
      v22 = *(_BYTE *)(v12 + 16);
      sub_23BEA0EAC(*(_QWORD *)v12, v21, v22);
      *(_QWORD *)v11 = v20;
      *(_QWORD *)(v11 + 8) = v21;
      *(_BYTE *)(v11 + 16) = v22;
      *(_QWORD *)(v11 + 24) = *(_QWORD *)(v12 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
  }
  else
  {
    if (v13 >= 0xFFFFFFFF)
    {
      v14 = *(_QWORD *)v12;
      v15 = *(_QWORD *)(v12 + 8);
      v16 = *(_BYTE *)(v12 + 16);
      sub_23BEA0EAC(*(_QWORD *)v12, v15, v16);
      v17 = *(_QWORD *)v11;
      v18 = *(_QWORD *)(v11 + 8);
      v19 = *(_BYTE *)(v11 + 16);
      *(_QWORD *)v11 = v14;
      *(_QWORD *)(v11 + 8) = v15;
      *(_BYTE *)(v11 + 16) = v16;
      sub_23BEA0F64(v17, v18, v19);
      *(_QWORD *)(v11 + 24) = *(_QWORD *)(v12 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    sub_23BEA0F64(*(_QWORD *)v11, *(_QWORD *)(v11 + 8), *(_BYTE *)(v11 + 16));
    swift_bridgeObjectRelease();
  }
  v23 = *(_OWORD *)(v12 + 16);
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *(_OWORD *)(v11 + 16) = v23;
LABEL_8:
  v24 = (v11 + 39) & 0xFFFFFFFFFFFFFFF8;
  v25 = (v12 + 39) & 0xFFFFFFFFFFFFFFF8;
  v26 = *(_QWORD *)(v25 + 24);
  if (*(_QWORD *)(v24 + 24) < 0xFFFFFFFFuLL)
  {
    if (v26 >= 0xFFFFFFFF)
    {
      v33 = *(_QWORD *)v25;
      v34 = *(_QWORD *)(v25 + 8);
      v35 = *(_BYTE *)(v25 + 16);
      sub_23BEA0EAC(*(_QWORD *)v25, v34, v35);
      *(_QWORD *)v24 = v33;
      *(_QWORD *)(v24 + 8) = v34;
      *(_BYTE *)(v24 + 16) = v35;
      *(_QWORD *)(v24 + 24) = *(_QWORD *)(v25 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_15;
    }
  }
  else
  {
    if (v26 >= 0xFFFFFFFF)
    {
      v27 = *(_QWORD *)v25;
      v28 = *(_QWORD *)(v25 + 8);
      v29 = *(_BYTE *)(v25 + 16);
      sub_23BEA0EAC(*(_QWORD *)v25, v28, v29);
      v30 = *(_QWORD *)v24;
      v31 = *(_QWORD *)(v24 + 8);
      v32 = *(_BYTE *)(v24 + 16);
      *(_QWORD *)v24 = v27;
      *(_QWORD *)(v24 + 8) = v28;
      *(_BYTE *)(v24 + 16) = v29;
      sub_23BEA0F64(v30, v31, v32);
      *(_QWORD *)(v24 + 24) = *(_QWORD *)(v25 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_15;
    }
    sub_23BEA0F64(*(_QWORD *)v24, *(_QWORD *)(v24 + 8), *(_BYTE *)(v24 + 16));
    swift_bridgeObjectRelease();
  }
  v36 = *(_OWORD *)(v25 + 16);
  *(_OWORD *)v24 = *(_OWORD *)v25;
  *(_OWORD *)(v24 + 16) = v36;
LABEL_15:
  v37 = (v24 + 39) & 0xFFFFFFFFFFFFFFF8;
  v38 = (v25 + 39) & 0xFFFFFFFFFFFFFFF8;
  v39 = *(_QWORD *)(v38 + 24);
  if (*(_QWORD *)(v37 + 24) < 0xFFFFFFFFuLL)
  {
    if (v39 >= 0xFFFFFFFF)
    {
      v46 = *(_QWORD *)v38;
      v47 = *(_QWORD *)(v38 + 8);
      v48 = *(_BYTE *)(v38 + 16);
      sub_23BEA0EAC(*(_QWORD *)v38, v47, v48);
      *(_QWORD *)v37 = v46;
      *(_QWORD *)(v37 + 8) = v47;
      *(_BYTE *)(v37 + 16) = v48;
      *(_QWORD *)(v37 + 24) = *(_QWORD *)(v38 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_22;
    }
  }
  else
  {
    if (v39 >= 0xFFFFFFFF)
    {
      v40 = *(_QWORD *)v38;
      v41 = *(_QWORD *)(v38 + 8);
      v42 = *(_BYTE *)(v38 + 16);
      sub_23BEA0EAC(*(_QWORD *)v38, v41, v42);
      v43 = *(_QWORD *)v37;
      v44 = *(_QWORD *)(v37 + 8);
      v45 = *(_BYTE *)(v37 + 16);
      *(_QWORD *)v37 = v40;
      *(_QWORD *)(v37 + 8) = v41;
      *(_BYTE *)(v37 + 16) = v42;
      sub_23BEA0F64(v43, v44, v45);
      *(_QWORD *)(v37 + 24) = *(_QWORD *)(v38 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_22;
    }
    sub_23BEA0F64(*(_QWORD *)v37, *(_QWORD *)(v37 + 8), *(_BYTE *)(v37 + 16));
    swift_bridgeObjectRelease();
  }
  v49 = *(_OWORD *)(v38 + 16);
  *(_OWORD *)v37 = *(_OWORD *)v38;
  *(_OWORD *)(v37 + 16) = v49;
LABEL_22:
  *(_BYTE *)(v37 + 32) = *(_BYTE *)(v38 + 32);
  v50 = *(_QWORD *)(a3[3] - 8);
  v51 = *(unsigned __int8 *)(v50 + 80);
  v52 = (v37 + v51 + 33) & ~v51;
  v53 = (v38 + v51 + 33) & ~v51;
  (*(void (**)(uint64_t, uint64_t))(v50 + 24))(v52, v53);
  v54 = *(_QWORD *)(v50 + 64);
  v55 = a3[4];
  v56 = *(_QWORD *)(v55 - 8);
  v57 = *(unsigned __int8 *)(v56 + 80);
  v58 = v54 + v57;
  v59 = (void *)((v58 + v52) & ~v57);
  v60 = (void *)((v58 + v53) & ~v57);
  v61 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v56 + 48);
  LODWORD(v53) = v61(v59, 1, v55);
  v62 = v61(v60, 1, v55);
  if ((_DWORD)v53)
  {
    if (!v62)
    {
      (*(void (**)(void *, void *, uint64_t))(v56 + 16))(v59, v60, v55);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v59, 0, 1, v55);
      goto LABEL_31;
    }
  }
  else
  {
    if (!v62)
    {
      (*(void (**)(void *, void *, uint64_t))(v56 + 24))(v59, v60, v55);
      goto LABEL_31;
    }
    (*(void (**)(void *, uint64_t))(v56 + 8))(v59, v55);
  }
  if (*(_DWORD *)(v56 + 84))
    v63 = *(_QWORD *)(v56 + 64);
  else
    v63 = *(_QWORD *)(v56 + 64) + 1;
  memcpy(v59, v60, v63);
LABEL_31:
  if (*(_DWORD *)(v56 + 84))
    v64 = *(_QWORD *)(v56 + 64);
  else
    v64 = *(_QWORD *)(v56 + 64) + 1;
  v65 = (_QWORD *)(((unint64_t)v59 + v64 + 7) & 0xFFFFFFFFFFFFFFF8);
  v66 = (_QWORD *)(((unint64_t)v60 + v64 + 7) & 0xFFFFFFFFFFFFFFF8);
  v67 = v66[1];
  *v65 = *v66;
  v65[1] = v67;
  swift_retain();
  swift_release();
  v68 = (_QWORD *)(((unint64_t)v65 + 23) & 0xFFFFFFFFFFFFFFF8);
  v69 = (_QWORD *)(((unint64_t)v66 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v68 = *v69;
  v68[1] = v69[1];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_23BF9ED2C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  __int128 v19;
  _OWORD *v20;
  _OWORD *v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  const void *v36;
  int v37;
  uint64_t v38;
  size_t v39;
  uint64_t v40;
  _OWORD *v41;
  _OWORD *v42;

  v5 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v5;
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  v6 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v6;
  v7 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v7;
  v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v8;
  v9 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v9;
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  v11 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v11;
  v12 = *(_QWORD *)(a3[2] - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = (v13 + 248 + a1) & ~v13;
  v15 = (v13 + 248 + a2) & ~v13;
  (*(void (**)(uint64_t, uint64_t))(v12 + 32))(v14, v15);
  v16 = *(_QWORD *)(v12 + 64) + 7;
  v17 = (_OWORD *)((v16 + v14) & 0xFFFFFFFFFFFFFFF8);
  v18 = (_OWORD *)((v16 + v15) & 0xFFFFFFFFFFFFFFF8);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  v20 = (_OWORD *)(((unint64_t)v17 + 39) & 0xFFFFFFFFFFFFFFF8);
  v21 = (_OWORD *)(((unint64_t)v18 + 39) & 0xFFFFFFFFFFFFFFF8);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  v23 = ((unint64_t)v20 + 39) & 0xFFFFFFFFFFFFFFF8;
  v24 = ((unint64_t)v21 + 39) & 0xFFFFFFFFFFFFFFF8;
  v25 = *(_OWORD *)(v24 + 16);
  *(_OWORD *)v23 = *(_OWORD *)v24;
  *(_OWORD *)(v23 + 16) = v25;
  *(_BYTE *)(v23 + 32) = *(_BYTE *)(v24 + 32);
  v26 = *(_QWORD *)(a3[3] - 8);
  v27 = *(unsigned __int8 *)(v26 + 80);
  v28 = (v23 + v27 + 33) & ~v27;
  v29 = (v24 + v27 + 33) & ~v27;
  (*(void (**)(uint64_t, uint64_t))(v26 + 32))(v28, v29);
  v30 = *(_QWORD *)(v26 + 64);
  v31 = a3[4];
  v32 = *(_QWORD *)(v31 - 8);
  v33 = *(unsigned __int8 *)(v32 + 80);
  v34 = v30 + v33;
  v35 = (void *)((v34 + v28) & ~v33);
  v36 = (const void *)((v34 + v29) & ~v33);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v32 + 48))(v36, 1, v31))
  {
    v37 = *(_DWORD *)(v32 + 84);
    v38 = *(_QWORD *)(v32 + 64);
    if (v37)
      v39 = *(_QWORD *)(v32 + 64);
    else
      v39 = v38 + 1;
    memcpy(v35, v36, v39);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v32 + 32))(v35, v36, v31);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v35, 0, 1, v31);
    v37 = *(_DWORD *)(v32 + 84);
    v38 = *(_QWORD *)(v32 + 64);
  }
  if (v37)
    v40 = v38;
  else
    v40 = v38 + 1;
  v41 = (_OWORD *)(((unint64_t)v35 + v40 + 7) & 0xFFFFFFFFFFFFF8);
  v42 = (_OWORD *)(((unint64_t)v36 + v40 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v41 = *v42;
  *(_OWORD *)(((unint64_t)v41 + 23) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v42 + 23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_23BF9EF2C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  uint64_t (*v49)(void *, uint64_t, uint64_t);
  int v50;
  size_t v51;
  uint64_t v52;
  _OWORD *v53;
  uint64_t v54;
  unint64_t v55;
  _QWORD *v56;

  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v8;
  v9 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v9;
  v10 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  v11 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = v11;
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  v12 = *(_QWORD *)(a3[2] - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = (v13 + 248 + a1) & ~v13;
  v15 = (v13 + 248 + a2) & ~v13;
  (*(void (**)(uint64_t, uint64_t))(v12 + 40))(v14, v15);
  v16 = *(_QWORD *)(v12 + 64) + 7;
  v17 = (v16 + v14) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v16 + v15) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v17 + 24) >= 0xFFFFFFFFuLL)
  {
    if (*(_QWORD *)(v18 + 24) >= 0xFFFFFFFFuLL)
    {
      v19 = *(_BYTE *)(v18 + 16);
      v20 = *(_QWORD *)v17;
      v21 = *(_QWORD *)(v17 + 8);
      v22 = *(_BYTE *)(v17 + 16);
      *(_OWORD *)v17 = *(_OWORD *)v18;
      *(_BYTE *)(v17 + 16) = v19;
      sub_23BEA0F64(v20, v21, v22);
      *(_QWORD *)(v17 + 24) = *(_QWORD *)(v18 + 24);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_23BEA0F64(*(_QWORD *)v17, *(_QWORD *)(v17 + 8), *(_BYTE *)(v17 + 16));
    swift_bridgeObjectRelease();
  }
  v23 = *(_OWORD *)(v18 + 16);
  *(_OWORD *)v17 = *(_OWORD *)v18;
  *(_OWORD *)(v17 + 16) = v23;
LABEL_6:
  v24 = (v17 + 39) & 0xFFFFFFFFFFFFFFF8;
  v25 = (v18 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v24 + 24) >= 0xFFFFFFFFuLL)
  {
    if (*(_QWORD *)(v25 + 24) >= 0xFFFFFFFFuLL)
    {
      v26 = *(_BYTE *)(v25 + 16);
      v27 = *(_QWORD *)v24;
      v28 = *(_QWORD *)(v24 + 8);
      v29 = *(_BYTE *)(v24 + 16);
      *(_OWORD *)v24 = *(_OWORD *)v25;
      *(_BYTE *)(v24 + 16) = v26;
      sub_23BEA0F64(v27, v28, v29);
      *(_QWORD *)(v24 + 24) = *(_QWORD *)(v25 + 24);
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    sub_23BEA0F64(*(_QWORD *)v24, *(_QWORD *)(v24 + 8), *(_BYTE *)(v24 + 16));
    swift_bridgeObjectRelease();
  }
  v30 = *(_OWORD *)(v25 + 16);
  *(_OWORD *)v24 = *(_OWORD *)v25;
  *(_OWORD *)(v24 + 16) = v30;
LABEL_11:
  v31 = (v24 + 39) & 0xFFFFFFFFFFFFFFF8;
  v32 = (v25 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v31 + 24) >= 0xFFFFFFFFuLL)
  {
    if (*(_QWORD *)(v32 + 24) >= 0xFFFFFFFFuLL)
    {
      v33 = *(_BYTE *)(v32 + 16);
      v34 = *(_QWORD *)v31;
      v35 = *(_QWORD *)(v31 + 8);
      v36 = *(_BYTE *)(v31 + 16);
      *(_OWORD *)v31 = *(_OWORD *)v32;
      *(_BYTE *)(v31 + 16) = v33;
      sub_23BEA0F64(v34, v35, v36);
      *(_QWORD *)(v31 + 24) = *(_QWORD *)(v32 + 24);
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
    sub_23BEA0F64(*(_QWORD *)v31, *(_QWORD *)(v31 + 8), *(_BYTE *)(v31 + 16));
    swift_bridgeObjectRelease();
  }
  v37 = *(_OWORD *)(v32 + 16);
  *(_OWORD *)v31 = *(_OWORD *)v32;
  *(_OWORD *)(v31 + 16) = v37;
LABEL_16:
  *(_BYTE *)(v31 + 32) = *(_BYTE *)(v32 + 32);
  v38 = *(_QWORD *)(a3[3] - 8);
  v39 = *(unsigned __int8 *)(v38 + 80);
  v40 = (v31 + v39 + 33) & ~v39;
  v41 = (v32 + v39 + 33) & ~v39;
  (*(void (**)(uint64_t, uint64_t))(v38 + 40))(v40, v41);
  v42 = *(_QWORD *)(v38 + 64);
  v43 = a3[4];
  v44 = *(_QWORD *)(v43 - 8);
  v45 = *(unsigned __int8 *)(v44 + 80);
  v46 = v42 + v45;
  v47 = (void *)((v46 + v40) & ~v45);
  v48 = (void *)((v46 + v41) & ~v45);
  v49 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v44 + 48);
  LODWORD(v41) = v49(v47, 1, v43);
  v50 = v49(v48, 1, v43);
  if ((_DWORD)v41)
  {
    if (!v50)
    {
      (*(void (**)(void *, void *, uint64_t))(v44 + 32))(v47, v48, v43);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v47, 0, 1, v43);
      goto LABEL_25;
    }
  }
  else
  {
    if (!v50)
    {
      (*(void (**)(void *, void *, uint64_t))(v44 + 40))(v47, v48, v43);
      goto LABEL_25;
    }
    (*(void (**)(void *, uint64_t))(v44 + 8))(v47, v43);
  }
  if (*(_DWORD *)(v44 + 84))
    v51 = *(_QWORD *)(v44 + 64);
  else
    v51 = *(_QWORD *)(v44 + 64) + 1;
  memcpy(v47, v48, v51);
LABEL_25:
  if (*(_DWORD *)(v44 + 84))
    v52 = *(_QWORD *)(v44 + 64);
  else
    v52 = *(_QWORD *)(v44 + 64) + 1;
  v53 = (_OWORD *)(((unint64_t)v47 + v52 + 7) & 0xFFFFFFFFFFFFFFF8);
  v54 = (uint64_t)v48 + v52 + 7;
  v55 = (v54 & 0xFFFFFFFFFFFFFFF8) + 23;
  *v53 = *(_OWORD *)(v54 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  v56 = (_QWORD *)(((unint64_t)v53 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v56 = *(_QWORD *)(v55 & 0xFFFFFFFFFFFFFFF8);
  v56[1] = *(_QWORD *)((v55 & 0xFFFFFFFFFFFFFFF8) + 8);
  swift_release();
  return a1;
}

uint64_t sub_23BF9F2D0(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t (*v24)(unint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;

  v4 = *(_QWORD *)(a3[2] - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(a3[3] - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v5 <= v7)
    v8 = *(_DWORD *)(v6 + 84);
  else
    v8 = *(_DWORD *)(v4 + 84);
  v9 = *(_QWORD *)(a3[4] - 8);
  v10 = *(_DWORD *)(v9 + 84);
  v11 = v10 - 1;
  if (!v10)
    v11 = 0;
  if (v8 <= v11)
    v8 = v11;
  if (v8 <= 0x7FFFFFFF)
    v8 = 0x7FFFFFFF;
  v12 = *(_QWORD *)(v9 + 64);
  if (!v10)
    ++v12;
  if (!a2)
    return 0;
  v13 = *(unsigned __int8 *)(v4 + 80);
  v14 = *(_QWORD *)(v4 + 64) + 7;
  v15 = *(unsigned __int8 *)(v6 + 80);
  v16 = v15 + 33;
  v17 = *(unsigned __int8 *)(v9 + 80);
  v18 = *(_QWORD *)(v6 + 64) + v17;
  v19 = v12 + 7;
  if (v8 < a2)
  {
    if (((((((v19
             + ((v18
               + ((v16
                 + ((((((v14 + ((v13 + 248) & ~v13)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8)) & ~v15)) & ~v17)) & 0xFFFFFFFFFFFFFFF8)
           + 23) & 0xFFFFFFFFFFFFFFF8)
         + 16) & 0xFFFFFFF8) != 0)
      v20 = 2;
    else
      v20 = a2 - v8 + 1;
    if (v20 >= 0x10000)
      v21 = 4;
    else
      v21 = 2;
    if (v20 < 0x100)
      v21 = 1;
    if (v20 >= 2)
      v22 = v21;
    else
      v22 = 0;
    __asm { BR              X24 }
  }
  v23 = (a1 + v13 + 248) & ~v13;
  if (v5 == v8)
  {
    v24 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v4 + 48);
    v25 = *(unsigned int *)(v4 + 84);
    v26 = a3[2];
    return v24(v23, v25, v26);
  }
  v23 = (v16 + ((((((v14 + v23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8)) & ~v15;
  if (v7 == v8)
  {
    v24 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48);
    v25 = *(unsigned int *)(v6 + 84);
    v26 = a3[3];
    return v24(v23, v25, v26);
  }
  v28 = (v18 + v23) & ~v17;
  if (v11 == v8)
  {
    if (v10 < 2)
      return 0;
    v30 = (*(uint64_t (**)(unint64_t))(v9 + 48))(v28);
    if (v30 >= 2)
      return v30 - 1;
    else
      return 0;
  }
  else
  {
    v29 = *(_QWORD *)((v19 + v28) & 0xFFFFFFFFFFFFF8);
    if (v29 >= 0xFFFFFFFF)
      LODWORD(v29) = -1;
    return (v29 + 1);
  }
}

void sub_23BF9F528(unsigned int *a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;

  v6 = 0;
  v7 = *(_QWORD *)(a4[2] - 8);
  v8 = *(_QWORD *)(a4[3] - 8);
  if (*(_DWORD *)(v7 + 84) <= *(_DWORD *)(v8 + 84))
    v9 = *(_DWORD *)(v8 + 84);
  else
    v9 = *(_DWORD *)(v7 + 84);
  v10 = *(_QWORD *)(a4[4] - 8);
  v11 = *(_DWORD *)(v10 + 84);
  v12 = v11 - 1;
  if (!v11)
    v12 = 0;
  if (v9 <= v12)
    v9 = v12;
  if (v9 <= 0x7FFFFFFF)
    v9 = 0x7FFFFFFF;
  v13 = *(_QWORD *)(v10 + 64);
  if (!v11)
    ++v13;
  if (v9 < a3)
  {
    v14 = a3 - v9;
    if ((((((_DWORD)v13
           + 7
           + ((*(_DWORD *)(v8 + 64)
             + *(unsigned __int8 *)(v10 + 80)
             + ((*(unsigned __int8 *)(v8 + 80)
               + 33
               + ((((((*(_DWORD *)(v7 + 64)
                     + 7
                     + ((*(unsigned __int8 *)(v7 + 80) + 248) & ~*(unsigned __int8 *)(v7 + 80))) & 0xFFFFFFF8)
                   + 39) & 0xFFFFFFF8)
                 + 39) & 0xFFFFFFF8)) & ~*(unsigned __int8 *)(v8 + 80))) & ~*(unsigned __int8 *)(v10 + 80))) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v15 = v14 + 1;
    else
      v15 = 2;
    if (v15 >= 0x10000)
      v6 = 4;
    else
      v6 = 2;
    if (v15 < 0x100)
      v6 = 1;
    if (v15 < 2)
      v6 = 0;
  }
  if (a2 > v9)
  {
    if ((((((_DWORD)v13
           + 7
           + ((*(_DWORD *)(v8 + 64)
             + *(unsigned __int8 *)(v10 + 80)
             + ((*(unsigned __int8 *)(v8 + 80)
               + 33
               + ((((((*(_DWORD *)(v7 + 64)
                     + 7
                     + ((*(unsigned __int8 *)(v7 + 80) + 248) & ~*(unsigned __int8 *)(v7 + 80))) & 0xFFFFFFF8)
                   + 39) & 0xFFFFFFF8)
                 + 39) & 0xFFFFFFF8)) & ~*(unsigned __int8 *)(v8 + 80))) & ~*(unsigned __int8 *)(v10 + 80))) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      v16 = ~v9 + a2;
      bzero(a1, ((((v13+ 7+ ((*(_QWORD *)(v8 + 64)+ *(unsigned __int8 *)(v10 + 80)+ ((*(unsigned __int8 *)(v8 + 80)+ 33+ ((((((*(_QWORD *)(v7 + 64)+ 7+ ((*(unsigned __int8 *)(v7 + 80) + 248) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))) & 0xFFFFFFFFFFFFFFF8)+ 39) & 0xFFFFFFFFFFFFFFF8)+ 39) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 16);
      *a1 = v16;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X25 }
}

unint64_t sub_23BF9F6B0@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(unint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v23;
  uint64_t v24;

  *(_BYTE *)(v18 + v19) = 0;
  if ((_DWORD)a2)
  {
    result = (v18 + result + 248) & v21;
    if ((_DWORD)v11 == v15)
    {
      v22 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56);
      a3 = v11;
      a4 = v10;
      return v22(result, a2, a3, a4);
    }
    result = (a7 + ((((((a5 + result) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8)) & v20;
    if ((_DWORD)v9 == v15)
    {
      v22 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
      a3 = v9;
      a4 = a9;
      return v22(result, a2, a3, a4);
    }
    result = (a8 + result) & v12;
    if (v16 == v15)
    {
      a2 = (a2 + 1);
      v22 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56);
      return v22(result, a2, a3, a4);
    }
    v23 = (_QWORD *)((a6 + result) & 0xFFFFFFFFFFFFFFF8);
    if ((a2 & 0x80000000) != 0)
    {
      v24 = a2 ^ 0x80000000;
      v23[1] = 0;
    }
    else
    {
      v24 = (a2 - 1);
    }
    *v23 = v24;
  }
  return result;
}

void type metadata accessor for ActionCardView()
{
  JUMPOUT(0x2426150F0);
}

unint64_t sub_23BF9F7B8()
{
  unint64_t result;

  result = qword_256AE7868;
  if (!qword_256AE7868)
  {
    result = MEMORY[0x242615198](&unk_23C005590, &type metadata for ActionCardViewLayout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE7868);
  }
  return result;
}

unint64_t sub_23BF9F800()
{
  unint64_t result;

  result = qword_256AE7870;
  if (!qword_256AE7870)
  {
    result = MEMORY[0x242615198](&unk_23C005500, &type metadata for ActionCardViewLayout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE7870);
  }
  return result;
}

unint64_t sub_23BF9F848()
{
  unint64_t result;

  result = qword_256AE7878;
  if (!qword_256AE7878)
  {
    result = MEMORY[0x242615198](&unk_23C005528, &type metadata for ActionCardViewLayout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE7878);
  }
  return result;
}

uint64_t sub_23BF9F88C()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_23BF9F8CC()
{
  type metadata accessor for ActionCardView();
}

void sub_23BF9F90C()
{
  type metadata accessor for ActionCardView();
}

uint64_t sub_23BF9F934(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(void))(v1 + *(int *)(a1 + 96) + v2))();
}

uint64_t sub_23BF9F964()
{
  return sub_23BFA0384((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BF9C450);
}

uint64_t sub_23BF9F970()
{
  return sub_23BFA0384((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BF9CCC0);
}

uint64_t sub_23BF9F97C()
{
  return sub_23BFA0384((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BF983A4);
}

uint64_t sub_23BF9F988@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = sub_23BFF87B8();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_23BF9F9B8()
{
  return sub_23BFF87C4();
}

unint64_t sub_23BF9F9E4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[6];

  result = qword_256AE7928;
  if (!qword_256AE7928)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE78F8);
    v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE78E8);
    v3 = sub_23BEA1F94(&qword_256AE7918, &qword_256AE78E8, MEMORY[0x24BEE30C8]);
    v4[2] = MEMORY[0x24BDF1FA8];
    v4[3] = v2;
    v4[4] = MEMORY[0x24BDF1F80];
    v4[5] = v3;
    v4[0] = swift_getOpaqueTypeConformance2();
    v4[1] = sub_23BEA1F94(&qword_256AE35A8, &qword_256AE35B0, MEMORY[0x24BDF1028]);
    result = MEMORY[0x242615198](MEMORY[0x24BDED308], v1, v4);
    atomic_store(result, (unint64_t *)&qword_256AE7928);
  }
  return result;
}

uint64_t sub_23BF9FAC4()
{
  return sub_23BFA0384((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BF99388);
}

void sub_23BF9FAD0()
{
  sub_23BF9B5AC();
}

void sub_23BF9FAE8()
{
  type metadata accessor for ActionCardView();
}

void sub_23BF9FB34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  sub_23BF9B6C0(v1, v2 + ((v10 + 64) & ~v10), v4, v5, v6, v7, v8, v9, v3);
}

void sub_23BF9FB8C()
{
  type metadata accessor for ActionCardView();
}

void sub_23BF9FBD0()
{
  sub_23BFF8500();
  sub_23BF9B9F0();
}

void objectdestroy_5Tm()
{
  type metadata accessor for ActionCardView();
}

uint64_t sub_23BF9FC84(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *((_QWORD *)a1 - 1);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v17 = *(_QWORD *)(v5 + 64);
  v18 = sub_23BFF8500();
  v7 = *(_QWORD *)(v18 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = v1 + v6;
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v1 + v6 + a1[17], v3);
  v10 = v1 + v6 + a1[18];
  if (*(_QWORD *)(v10 + 24))
  {
    sub_23BEA0F64(*(_QWORD *)v10, *(_QWORD *)(v10 + 8), *(_BYTE *)(v10 + 16));
    swift_bridgeObjectRelease();
  }
  v11 = v9 + a1[19];
  if (*(_QWORD *)(v11 + 24))
  {
    sub_23BEA0F64(*(_QWORD *)v11, *(_QWORD *)(v11 + 8), *(_BYTE *)(v11 + 16));
    swift_bridgeObjectRelease();
  }
  v12 = v9 + a1[20];
  if (*(_QWORD *)(v12 + 24))
  {
    sub_23BEA0F64(*(_QWORD *)v12, *(_QWORD *)(v12 + 8), *(_BYTE *)(v12 + 16));
    swift_bridgeObjectRelease();
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v9 + a1[22], v2);
  v13 = v9 + a1[23];
  v14 = *(_QWORD *)(v16 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v14 + 48))(v13, 1))
    (*(void (**)(uint64_t))(v14 + 8))(v13);
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v1 + ((v6 + v17 + v8) & ~v8), v18);
  return swift_deallocObject();
}

void sub_23BF9FE18()
{
  type metadata accessor for ActionCardView();
}

void sub_23BF9FE64()
{
  sub_23BFF8500();
  sub_23BF9BAA4();
}

uint64_t sub_23BF9FEDC()
{
  return sub_23BFA0384((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BF99A98);
}

uint64_t sub_23BF9FEE8()
{
  return sub_23BFA0384((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BF9A378);
}

unint64_t sub_23BF9FEF4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_256AE7958;
  if (!qword_256AE7958)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE7948);
    v2 = sub_23BEA1F94(&qword_256AE7960, &qword_256AE7968, MEMORY[0x24BDF5428]);
    result = MEMORY[0x242615198](MEMORY[0x24BDF3F50], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_256AE7958);
  }
  return result;
}

uint64_t sub_23BF9FF70@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23BFF8770();
  *a1 = result;
  return result;
}

uint64_t sub_23BF9FF98()
{
  return sub_23BFF877C();
}

unint64_t sub_23BF9FFBC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AE79C8;
  if (!qword_256AE79C8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE7998);
    v2[0] = sub_23BFA048C(&qword_256AE79D0, &qword_256AE7990, &qword_256AE5098, (uint64_t (*)(void))sub_23BF0595C);
    v2[1] = MEMORY[0x24BDECC60];
    result = MEMORY[0x242615198](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AE79C8);
  }
  return result;
}

unint64_t sub_23BFA0048()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256AE79E8;
  if (!qword_256AE79E8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE79E0);
    v2 = sub_23BEA1F94(&qword_256AE50D0, &qword_256AE50D8, MEMORY[0x24BDF1028]);
    v3[0] = MEMORY[0x24BDF1F80];
    v3[1] = v2;
    result = MEMORY[0x242615198](MEMORY[0x24BDED308], v1, v3);
    atomic_store(result, (unint64_t *)&qword_256AE79E8);
  }
  return result;
}

uint64_t sub_23BFA00CC()
{
  return sub_23BFF87A0();
}

unint64_t sub_23BFA00F0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AE79F0;
  if (!qword_256AE79F0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE79A8);
    v2[0] = sub_23BFA0048();
    v2[1] = sub_23BEA1F94(&qword_256AE5600, &qword_256AE5608, MEMORY[0x24BDF1028]);
    result = MEMORY[0x242615198](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AE79F0);
  }
  return result;
}

uint64_t sub_23BFA0174()
{
  return sub_23BFA0384((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BF9A1C0);
}

void objectdestroyTm_10()
{
  type metadata accessor for ActionCardView();
}

uint64_t sub_23BFA01C4(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v5 = *(unsigned __int8 *)(*((_QWORD *)a1 - 1) + 80);
  v6 = v1 + ((v5 + 64) & ~v5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v6 + a1[17], v3);
  v7 = v6 + a1[18];
  if (*(_QWORD *)(v7 + 24))
  {
    sub_23BEA0F64(*(_QWORD *)v7, *(_QWORD *)(v7 + 8), *(_BYTE *)(v7 + 16));
    swift_bridgeObjectRelease();
  }
  v8 = v6 + a1[19];
  if (*(_QWORD *)(v8 + 24))
  {
    sub_23BEA0F64(*(_QWORD *)v8, *(_QWORD *)(v8 + 8), *(_BYTE *)(v8 + 16));
    swift_bridgeObjectRelease();
  }
  v9 = v6 + a1[20];
  if (*(_QWORD *)(v9 + 24))
  {
    sub_23BEA0F64(*(_QWORD *)v9, *(_QWORD *)(v9 + 8), *(_BYTE *)(v9 + 16));
    swift_bridgeObjectRelease();
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v6 + a1[22], v2);
  v10 = v6 + a1[23];
  v11 = *(_QWORD *)(v13 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v11 + 48))(v10, 1))
    (*(void (**)(uint64_t))(v11 + 8))(v10);
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_23BFA0310()
{
  type metadata accessor for ActionCardView();
}

double sub_23BFA0340(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  return *(double *)(v1 + ((v3 + 64) & ~v3) + 40) * v2;
}

uint64_t sub_23BFA036C()
{
  return sub_23BFA0384((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BF96BB0);
}

uint64_t sub_23BFA0378()
{
  return sub_23BFA0384((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BF971EC);
}

uint64_t sub_23BFA0384(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[8], v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

uint64_t sub_23BFA039C(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v7 = a3();
    result = MEMORY[0x242615198](MEMORY[0x24BDF5578], v6, &v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23BFA0400()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AE7A00;
  if (!qword_256AE7A00)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE79C0);
    v2[0] = sub_23BFA048C(&qword_256AE7A08, &qword_256AE79B8, &qword_256AE79A8, (uint64_t (*)(void))sub_23BFA00F0);
    v2[1] = MEMORY[0x24BDECC60];
    result = MEMORY[0x242615198](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AE7A00);
  }
  return result;
}

uint64_t sub_23BFA048C(unint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t result;
  uint64_t v8;
  _QWORD v9[6];

  result = *a1;
  if (!result)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v9[2] = __swift_instantiateConcreteTypeFromMangledNameAbstract(a3);
    v9[3] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE78E8);
    v9[4] = a4();
    v9[5] = sub_23BEA1F94(&qword_256AE7918, &qword_256AE78E8, MEMORY[0x24BEE30C8]);
    v9[0] = swift_getOpaqueTypeConformance2();
    v9[1] = sub_23BEA1F94(&qword_256AE35A8, &qword_256AE35B0, MEMORY[0x24BDF1028]);
    result = MEMORY[0x242615198](MEMORY[0x24BDED308], v8, v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23BFA0574()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AE7A18;
  if (!qword_256AE7A18)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE7980);
    v2[0] = sub_23BFA048C(qword_256AE7A20, &qword_256AE7978, &qword_256AE79E0, (uint64_t (*)(void))sub_23BFA0048);
    v2[1] = MEMORY[0x24BDECC60];
    result = MEMORY[0x242615198](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AE7A18);
  }
  return result;
}

uint64_t *sub_23BFA0600(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = a1[10];
  v3 = a1[11];
  v4 = a1[12];
  v5 = a1[13];
  v6 = a1[19];
  v9 = a1[18];
  v10 = a1[17];
  v8 = a1[20];
  sub_23BF471BC(a1[3], a1[4], a1[5], a1[6]);
  sub_23BF471BC(v2, v3, v4, v5);
  sub_23BF471BC(v10, v9, v6, v8);
  return a1;
}

uint64_t sub_23BFA06CC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6152746365707361 && a2 == 0xEB000000006F6974;
  if (v2 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x800000023C01F3F0 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x615272656E726F63 && a2 == 0xEC00000073756964 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x800000023C01F410 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000023C01F430 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x646150656C746974 && a2 == 0xEC000000676E6964 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x656C746974627573 && a2 == 0xEF676E6964646150 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x506E6F6974706163 && a2 == 0xEE00676E69646461 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000023C01F450 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x800000023C01F470 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x6E694C656C746974 && a2 == 0xEE0074696D694C65 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000023C01EF30 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000023C01EF50)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else
  {
    v6 = sub_23BFF9964();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 12;
    else
      return 13;
  }
}

uint64_t sub_23BFA0C70(uint64_t a1)
{
  sub_23BF55574(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144), *(_OWORD *)(a1 + 152), *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_BYTE *)(a1 + 200),
    *(_BYTE *)(a1 + 201));
  return a1;
}

uint64_t sub_23BFA0CEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[2];
  uint64_t v45;
  _QWORD v46[2];
  _QWORD v47[2];
  _QWORD v48[2];
  _QWORD v49[2];
  _QWORD v50[2];
  _QWORD v51[2];
  _QWORD v52[2];
  _QWORD v53[2];
  _QWORD v54[2];
  _QWORD v55[2];
  uint64_t v56;
  ValueMetadata *v57;
  uint64_t v58;
  unint64_t v59;
  _QWORD v60[2];
  _QWORD v61[2];
  _QWORD v62[2];
  uint64_t v63;

  v1 = *(_QWORD *)(a1 + 24);
  v43 = v1;
  v2 = *(_QWORD *)(a1 + 40);
  v3 = sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE7880);
  v39 = sub_23BFF862C();
  v4 = sub_23BFF96A0();
  v5 = sub_23BFF862C();
  v63 = v2;
  v62[0] = MEMORY[0x242615198](MEMORY[0x24BDF5578], v4, &v63);
  v62[1] = MEMORY[0x24BDECC60];
  v6 = MEMORY[0x24BDED308];
  MEMORY[0x242615198](MEMORY[0x24BDED308], v5, v62);
  sub_23BFF86F8();
  sub_23BFF862C();
  v7 = sub_23BFF862C();
  v61[0] = v1;
  v61[1] = MEMORY[0x24BDEEC40];
  v42 = MEMORY[0x242615198](v6, v3, v61);
  v60[0] = v42;
  v60[1] = MEMORY[0x24BDEBF50];
  v56 = v7;
  v57 = (ValueMetadata *)MEMORY[0x242615198](v6, v7, v60);
  MEMORY[0x24261512C](255, &v56, MEMORY[0x24BDF3110], 0);
  swift_getTupleTypeMetadata2();
  v8 = sub_23BFF9220();
  v9 = MEMORY[0x24BDF5428];
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v8);
  sub_23BFF90AC();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE7888);
  v10 = sub_23BFF862C();
  swift_getTupleTypeMetadata2();
  v11 = sub_23BFF9220();
  MEMORY[0x242615198](v9, v11);
  sub_23BFF90AC();
  sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE5160);
  sub_23BFF862C();
  swift_getTupleTypeMetadata2();
  v12 = sub_23BFF9220();
  MEMORY[0x242615198](v9, v12);
  v13 = sub_23BFF90C4();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE7890);
  v40 = sub_23BFF862C();
  v14 = sub_23BFF8968();
  sub_23BFF8ADC();
  v41 = sub_23BFF862C();
  v15 = sub_23BFF862C();
  v56 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE7898);
  v57 = (ValueMetadata *)__swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE78A0);
  v58 = (uint64_t)v57;
  v59 = v10;
  swift_getTupleTypeMetadata();
  v16 = sub_23BFF9220();
  MEMORY[0x242615198](v9, v16);
  v17 = sub_23BFF90AC();
  v18 = sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3C28);
  v19 = sub_23BFF862C();
  v20 = sub_23BFF862C();
  v55[0] = MEMORY[0x242615198](MEMORY[0x24BDF4700], v17);
  v55[1] = sub_23BEA1F94(&qword_256AE78A8, &qword_256AE5160, MEMORY[0x24BDF06D0]);
  v21 = MEMORY[0x24BDED308];
  v22 = MEMORY[0x242615198](MEMORY[0x24BDED308], v18, v55);
  v38 = sub_23BEA1F94(qword_256AE3C30, &qword_256AE3C28, MEMORY[0x24BDEB950]);
  v54[0] = v22;
  v54[1] = v38;
  v53[0] = MEMORY[0x242615198](v21, v19, v54);
  v53[1] = MEMORY[0x24BDECC60];
  v23 = v21;
  MEMORY[0x242615198](v21, v20, v53);
  v24 = sub_23BFF86F8();
  v25 = v15;
  v26 = sub_23BFF862C();
  v27 = v14;
  v28 = sub_23BFF8968();
  v29 = sub_23BFF8FD4();
  v30 = sub_23BFF862C();
  v52[0] = v42;
  v52[1] = sub_23BEA1F94(&qword_256AE78B0, &qword_256AE7880, MEMORY[0x24BDEDC10]);
  v31 = MEMORY[0x242615198](v23, v39, v52);
  v51[0] = MEMORY[0x242615198](MEMORY[0x24BDF4750], v13);
  v51[1] = sub_23BEA1F94(&qword_256AE78B8, &qword_256AE7890, MEMORY[0x24BDEF370]);
  v50[0] = v31;
  v50[1] = MEMORY[0x242615198](v23, v40, v51);
  v32 = MEMORY[0x24BDEF3E0];
  v33 = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v27, v50);
  v49[0] = v43;
  v49[1] = sub_23BEA1BB8((unint64_t *)&qword_256AE3908, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088], MEMORY[0x24BDF1078]);
  v48[0] = MEMORY[0x242615198](v23, v41, v49);
  v48[1] = MEMORY[0x24BDEEC40];
  v47[0] = MEMORY[0x242615198](v23, v25, v48);
  v47[1] = MEMORY[0x242615198](MEMORY[0x24BDEDC10], v24);
  v46[0] = v33;
  v46[1] = MEMORY[0x242615198](v23, v26, v47);
  v45 = MEMORY[0x242615198](v32, v28, v46);
  v44[0] = MEMORY[0x242615198](MEMORY[0x24BDF3F50], v29, &v45);
  v44[1] = v38;
  MEMORY[0x242615198](v23, v30, v44);
  v34 = sub_23BFF9040();
  v35 = MEMORY[0x242615198](MEMORY[0x24BDF43B0], v34);
  v36 = sub_23BF05790();
  v56 = v34;
  v57 = &type metadata for ActionCardButtonStyle;
  v58 = v35;
  v59 = v36;
  return swift_getOpaqueTypeConformance2();
}

uint64_t LazyCanvasSectionDescriptor.items.getter(uint64_t a1)
{
  sub_23BECBFC8(a1);
  return swift_bridgeObjectRetain();
}

uint64_t LazyCanvasSectionDescriptor.identifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t LazyCanvasSectionDescriptor.layout.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v5 = v3 + *(int *)(a1 + 180);
  v6 = type metadata accessor for CanvasSectionLayout(0, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 152), a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a3, v5, v6);
}

void LazyCanvasSectionDescriptor.header.getter()
{
  type metadata accessor for CanvasSectionHeader();
}

uint64_t sub_23BFA1454()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_23BFF96A0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v0, v1, v2);
}

uint64_t LazyCanvasSectionDescriptor.footer.getter@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  *a2 = *(_BYTE *)(v2 + *(int *)(result + 188));
  return result;
}

uint64_t LazyCanvasSectionDescriptor.metrics.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 196);
  v5 = sub_23BFF96A0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

void LazyCanvasSectionDescriptor.init(identifier:layout:header:footer:items:metrics:)(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = a1;
  a3[1] = a2;
  type metadata accessor for LazyCanvasSectionDescriptor();
}

void sub_23BFA157C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v12 = v9 + *(int *)(a1 + 180);
  v13 = type metadata accessor for CanvasSectionLayout(0, v11, v10, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v12, a9, v13);
  type metadata accessor for CanvasSectionHeader();
}

uint64_t sub_23BFA15CC()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = sub_23BFF96A0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(v0, v8, v3);
  *(_BYTE *)(v1 + v2[47]) = v7;
  *(_QWORD *)(v1 + v2[48]) = v9;
  v4 = v1 + v2[49];
  v5 = sub_23BFF96A0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v4, v10, v5);
}

uint64_t sub_23BFA1654(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x74756F79616CLL && a2 == 0xE600000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x726564616568 && a2 == 0xE600000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7265746F6F66 && a2 == 0xE600000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x736D657469 && a2 == 0xE500000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x7363697274656DLL && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = sub_23BFF9964();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_23BFA18C0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23BFA18F8 + 4 * byte_23C0056F0[a1]))(0x696669746E656469, 0xEA00000000007265);
}

uint64_t sub_23BFA18F8()
{
  return 0x74756F79616CLL;
}

uint64_t sub_23BFA190C()
{
  return 0x726564616568;
}

uint64_t sub_23BFA1920()
{
  return 0x7265746F6F66;
}

uint64_t sub_23BFA1934()
{
  return 0x736D657469;
}

uint64_t sub_23BFA1948()
{
  return 0x7363697274656DLL;
}

uint64_t sub_23BFA1960()
{
  unsigned __int8 *v0;

  return sub_23BFA18C0(*v0);
}

uint64_t sub_23BFA19BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BFA1654(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BFA1A18@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23BFA79F0();
  *a1 = result;
  return result;
}

uint64_t sub_23BFA1A78(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23C005A58, a1);
  return sub_23BFF9A30();
}

uint64_t sub_23BFA1AAC(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23C005A58, a1);
  return sub_23BFF9A3C();
}

uint64_t LazyCanvasSectionDescriptor.id.getter()
{
  uint64_t v0;

  v0 = sub_23BEAC9E8();
  swift_bridgeObjectRetain();
  return v0;
}

void LazyCanvasSectionDescriptor.encode(to:)()
{
  type metadata accessor for LazyCanvasSectionDescriptor.CodingKeys();
}

uint64_t sub_23BFA1C48(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  MEMORY[0x242615198](&unk_23C005A58, a1);
  v3 = sub_23BFF994C();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v14 - v5;
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  sub_23BFF9A18();
  *(_BYTE *)(v2 - 248) = 0;
  v7 = *(_QWORD *)(v2 - 272);
  sub_23BFF9910();
  if (!v7)
  {
    v10 = *(_QWORD *)(v2 - 296);
    *(_QWORD *)(v2 - 272) = v4;
    *(_BYTE *)(v2 - 248) = 1;
    v11 = type metadata accessor for CanvasSectionLayout(0, *(_QWORD *)(v2 - 288), *(_QWORD *)(v2 - 304), v8);
    MEMORY[0x242615198](&protocol conformance descriptor for CanvasSectionLayout<A>, v11);
    sub_23BFF9940();
    *(_BYTE *)(v2 - 72) = 2;
    v12 = *(_QWORD *)(v2 - 320);
    *(_QWORD *)(v2 - 248) = v10;
    *(_QWORD *)(v2 - 240) = v12;
    v13 = *(_QWORD *)(v2 - 328);
    *(_QWORD *)(v2 - 232) = *(_QWORD *)(v2 - 312);
    *(_QWORD *)(v2 - 224) = v13;
    type metadata accessor for CanvasSectionHeader();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void LazyCanvasSectionDescriptor.init(from:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v23;
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v40 = a8;
  v30 = a7;
  v45 = a6;
  v44 = a5;
  v36 = a4;
  v42 = a3;
  v39 = a1;
  v26 = a9;
  v47 = a22;
  v41 = a19;
  v46 = a18;
  v38 = a17;
  v37 = a16;
  v43 = a15;
  v35 = a14;
  v34 = a13;
  v32 = a11;
  v25 = sub_23BFF96A0();
  v24[1] = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)v24 - v23;
  v48 = a2;
  v49 = a10;
  v31 = a2;
  v28 = a10;
  v50 = a12;
  v51 = a21;
  v33 = a12;
  v29 = a21;
  type metadata accessor for CanvasSectionHeader();
}

void sub_23BFA2110(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  *(_QWORD *)(v15 - 448) = a1;
  v16 = sub_23BFF96A0();
  *(_QWORD *)(v15 - 496) = v16;
  *(_QWORD *)(v15 - 504) = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  *(_QWORD *)(v15 - 456) = (char *)&a9 - v17;
  v18 = *(_QWORD *)(v15 - 320);
  v20 = type metadata accessor for CanvasSectionLayout(0, v18, v14, v19);
  *(_QWORD *)(v15 - 480) = v20;
  *(_QWORD *)(v15 - 488) = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  *(_QWORD *)(v15 - 464) = (char *)&a9 - v21;
  v22 = *(_QWORD *)(v15 - 304);
  *(_QWORD *)(v15 - 248) = v13;
  *(_QWORD *)(v15 - 240) = v22;
  v23 = *(_QWORD *)(v15 - 288);
  *(_QWORD *)(v15 - 232) = *(_QWORD *)(v15 - 352);
  *(_QWORD *)(v15 - 224) = v23;
  v24 = *(_QWORD *)(v15 - 400);
  *(_QWORD *)(v15 - 216) = *(_QWORD *)(v15 - 280);
  *(_QWORD *)(v15 - 208) = v24;
  *(_QWORD *)(v15 - 200) = v18;
  *(_QWORD *)(v15 - 192) = v9;
  *(_QWORD *)(v15 - 184) = *(_QWORD *)(v15 - 384);
  *(_QWORD *)(v15 - 176) = v10;
  *(_QWORD *)(v15 - 168) = v11;
  v25 = *(_QWORD *)(v15 - 296);
  *(_QWORD *)(v15 - 160) = *(_QWORD *)(v15 - 360);
  *(_QWORD *)(v15 - 152) = v25;
  v26 = *(_QWORD *)(v15 - 336);
  *(_QWORD *)(v15 - 144) = *(_QWORD *)(v15 - 344);
  *(_QWORD *)(v15 - 136) = v26;
  v27 = *(_QWORD *)(v15 - 312);
  *(_QWORD *)(v15 - 128) = *(_QWORD *)(v15 - 272);
  *(_QWORD *)(v15 - 120) = v27;
  *(_QWORD *)(v15 - 112) = v14;
  *(_QWORD *)(v15 - 104) = v12;
  *(_QWORD *)(v15 - 96) = *(_QWORD *)(v15 - 264);
  type metadata accessor for LazyCanvasSectionDescriptor.CodingKeys();
}

void sub_23BFA225C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)(v8 - 416) = MEMORY[0x242615198](&unk_23C005A58, a1);
  v9 = sub_23BFF98E0();
  *(_QWORD *)(v8 - 440) = v9;
  *(_QWORD *)(v8 - 472) = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v10 = *(_QWORD *)(v8 - 304);
  *(_QWORD *)(v8 - 248) = *(_QWORD *)(v8 - 392);
  *(_QWORD *)(v8 - 240) = v10;
  v11 = *(_QWORD *)(v8 - 288);
  *(_QWORD *)(v8 - 232) = v6;
  *(_QWORD *)(v8 - 224) = v11;
  *(_QWORD *)(v8 - 216) = *(_QWORD *)(v8 - 280);
  *(_QWORD *)(v8 - 208) = v7;
  v12 = *(_QWORD *)(v8 - 432);
  *(_QWORD *)(v8 - 200) = *(_QWORD *)(v8 - 320);
  *(_QWORD *)(v8 - 192) = v12;
  v13 = *(_QWORD *)(v8 - 376);
  *(_QWORD *)(v8 - 184) = v1;
  *(_QWORD *)(v8 - 176) = v13;
  *(_QWORD *)(v8 - 168) = *(_QWORD *)(v8 - 368);
  *(_QWORD *)(v8 - 160) = v3;
  *(_QWORD *)(v8 - 152) = *(_QWORD *)(v8 - 296);
  *(_QWORD *)(v8 - 144) = v4;
  v14 = *(_QWORD *)(v8 - 272);
  *(_QWORD *)(v8 - 136) = v2;
  *(_QWORD *)(v8 - 128) = v14;
  *(_QWORD *)(v8 - 120) = *(_QWORD *)(v8 - 312);
  *(_QWORD *)(v8 - 112) = v5;
  v15 = *(_QWORD *)(v8 - 264);
  *(_QWORD *)(v8 - 104) = *(_QWORD *)(v8 - 424);
  *(_QWORD *)(v8 - 96) = v15;
  type metadata accessor for LazyCanvasSectionDescriptor();
}

uint64_t sub_23BFA235C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v24 - v5;
  v7 = *(_QWORD **)(v2 - 328);
  __swift_project_boxed_opaque_existential_1(v7, v7[3]);
  *(_QWORD *)(v2 - 320) = v1;
  v8 = *(_QWORD *)(v2 - 408);
  sub_23BFF9A0C();
  if (!v8)
  {
    v9 = *(_QWORD *)(v2 - 464);
    v10 = *(_QWORD *)(v2 - 448);
    v11 = *(_QWORD *)(v2 - 456);
    *(_QWORD *)(v2 - 416) = v4;
    *(_QWORD *)(v2 - 408) = v6;
    *(_BYTE *)(v2 - 248) = 0;
    v12 = sub_23BFF9898();
    v14 = *(uint64_t **)(v2 - 408);
    *v14 = v12;
    v14[1] = v15;
    *(_BYTE *)(v2 - 248) = 1;
    v16 = *(_QWORD *)(v2 - 480);
    MEMORY[0x242615198](&protocol conformance descriptor for CanvasSectionLayout<A>, v16);
    sub_23BFF98C8();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v2 - 488) + 32))((char *)v14 + *(int *)(a1 + 180), v9, v16);
    *(_BYTE *)(v2 - 248) = 2;
    MEMORY[0x242615198](&protocol conformance descriptor for CanvasSectionHeader<A, B>, v10);
    sub_23BFF988C();
    *(_QWORD *)(v2 - 424) = a1;
    (*(void (**)(char *, uint64_t, _QWORD))(*(_QWORD *)(v2 - 504) + 32))((char *)v14 + *(int *)(a1 + 184), v11, *(_QWORD *)(v2 - 496));
    *(_BYTE *)(v2 - 72) = 3;
    sub_23BEACA40();
    sub_23BFF98C8();
    *((_BYTE *)v14 + *(int *)(*(_QWORD *)(v2 - 424) + 188)) = *(_BYTE *)(v2 - 248);
    v17 = *(_QWORD *)(v2 - 304);
    *(_QWORD *)(v2 - 248) = *(_QWORD *)(v2 - 392);
    *(_QWORD *)(v2 - 240) = v17;
    v18 = *(_QWORD *)(v2 - 288);
    *(_QWORD *)(v2 - 232) = *(_QWORD *)(v2 - 352);
    *(_QWORD *)(v2 - 224) = v18;
    v19 = *(_QWORD *)(v2 - 384);
    *(_QWORD *)(v2 - 216) = *(_QWORD *)(v2 - 280);
    *(_QWORD *)(v2 - 208) = v19;
    v20 = *(_QWORD *)(v2 - 368);
    *(_QWORD *)(v2 - 200) = *(_QWORD *)(v2 - 376);
    *(_QWORD *)(v2 - 192) = v20;
    v21 = *(_QWORD *)(v2 - 296);
    *(_QWORD *)(v2 - 184) = *(_QWORD *)(v2 - 360);
    *(_QWORD *)(v2 - 176) = v21;
    v22 = *(_QWORD *)(v2 - 336);
    *(_QWORD *)(v2 - 168) = *(_QWORD *)(v2 - 344);
    *(_QWORD *)(v2 - 160) = v22;
    v23 = *(_QWORD *)(v2 - 264);
    *(_QWORD *)(v2 - 152) = *(_QWORD *)(v2 - 272);
    *(_QWORD *)(v2 - 144) = v23;
    type metadata accessor for LazyCanvasItemDescriptor();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
}

void sub_23BFA292C(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  LazyCanvasSectionDescriptor.init(from:)(a1, a2[2], a2[3], a2[4], a2[5], a2[6], a2[7], a2[8], a3, a2[9], a2[10], a2[11], a2[12], a2[13], a2[14], a2[15], a2[16], a2[17], a2[18],
    a2[19],
    a2[20],
    a2[21]);
}

void sub_23BFA2988()
{
  LazyCanvasSectionDescriptor.encode(to:)();
}

void LazyCanvasSectionDescriptor.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_bridgeObjectRetain();
  sub_23BFF93F4();
  swift_bridgeObjectRelease();
  v5 = type metadata accessor for CanvasSectionLayout(0, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 152), v4);
  CanvasSectionLayout.hash(into:)(a1, v5, v6, v7);
  type metadata accessor for CanvasSectionHeader();
}

void sub_23BFA2A3C(uint64_t a1)
{
  sub_23BFF96A0();
  MEMORY[0x242615198](&protocol conformance descriptor for CanvasSectionHeader<A, B>, a1);
  sub_23BFF96AC();
  sub_23BFF99DC();
  swift_bridgeObjectRetain();
  type metadata accessor for LazyCanvasItemDescriptor();
}

uint64_t sub_23BFA2AD4(uint64_t a1)
{
  MEMORY[0x242615198](&protocol conformance descriptor for LazyCanvasItemDescriptor<A, B, C, D, E, F>, a1);
  sub_23BFF94CC();
  swift_bridgeObjectRelease();
  sub_23BFF96A0();
  return sub_23BFF96AC();
}

void static LazyCanvasSectionDescriptor.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[21];
  uint64_t TupleTypeMetadata2;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v36 = a7;
  v35 = a6;
  v34 = a5;
  v33 = a4;
  MEMORY[0x24BDAC7A8](a1);
  v30[15] = (char *)v30 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_23BFF96A0();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v30[17] = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v30[20] = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v30[16] = (char *)v30 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v26);
  v30[19] = (char *)v30 - v27;
  MEMORY[0x24BDAC7A8](v28);
  v32 = (char *)v30 - v29;
  v39 = a3;
  v41 = a3;
  v42 = a10;
  v37 = a10;
  v40 = a12;
  v43 = a12;
  v44 = a21;
  v38 = a21;
  type metadata accessor for CanvasSectionHeader();
}

uint64_t sub_23BFA2CEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t TupleTypeMetadata2;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE v41[96];

  *(v7 - 46) = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  *(v7 - 52) = &v41[-v9];
  v10 = sub_23BFF96A0();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *(v7 - 42) = TupleTypeMetadata2;
  *(v7 - 48) = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  *(v7 - 45) = &v41[-v12];
  v13 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v16 = &v41[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v17);
  *(v7 - 44) = &v41[-v18];
  MEMORY[0x24BDAC7A8](v19);
  *(v7 - 43) = &v41[-v20];
  v21 = *v2;
  v22 = v2[1];
  *(v7 - 35) = v2;
  v23 = *v4;
  v24 = v4[1];
  *(v7 - 34) = v4;
  if (v21 == v23 && v22 == v24 || (v25 = sub_23BFF9964(), result = 0, (v25 & 1) != 0))
  {
    *(v7 - 51) = v13;
    *(v7 - 50) = v10;
    *(v7 - 60) = v16;
    *(v7 - 49) = a1;
    *(v7 - 56) = v6;
    *(v7 - 66) = v5;
    *(v7 - 65) = v1;
    v27 = v7[15];
    v28 = v7[12];
    v29 = v7[13];
    v31 = v7[10];
    v30 = v7[11];
    v32 = v3;
    v33 = v7[8];
    v34 = v7[9];
    v36 = v7[6];
    v35 = v7[7];
    v37 = v7[4];
    v38 = v7[2];
    *(v7 - 31) = *(v7 - 33);
    *(v7 - 30) = *(v7 - 41);
    *(v7 - 29) = *(v7 - 40);
    *(v7 - 28) = *(v7 - 39);
    *(v7 - 27) = *(v7 - 38);
    *(v7 - 26) = v32;
    *(v7 - 64) = v32;
    v39 = *(v7 - 37);
    *(v7 - 25) = v38;
    *(v7 - 24) = v39;
    v40 = *(v7 - 32);
    *(v7 - 23) = v37;
    *(v7 - 22) = v40;
    *(v7 - 21) = v36;
    *(v7 - 20) = v35;
    *(v7 - 19) = v33;
    *(v7 - 18) = v34;
    *(v7 - 63) = v31;
    *(v7 - 17) = v31;
    *(v7 - 16) = v30;
    *(v7 - 62) = v30;
    *(v7 - 67) = v28;
    *(v7 - 15) = v28;
    *(v7 - 14) = v29;
    *(v7 - 13) = *(v7 - 36);
    *(v7 - 12) = v27;
    *(v7 - 61) = v27;
    type metadata accessor for LazyCanvasSectionDescriptor();
  }
  return result;
}

void LazyCanvasSectionDescriptor.hashValue.getter(uint64_t a1)
{
  _BYTE v2[72];

  sub_23BFF99D0();
  LazyCanvasSectionDescriptor.hash(into:)((uint64_t)v2, a1);
}

uint64_t sub_23BFA3524()
{
  return sub_23BFF9A00();
}

void sub_23BFA3544(uint64_t a1, uint64_t a2)
{
  _BYTE v3[72];

  sub_23BFF99D0();
  LazyCanvasSectionDescriptor.hash(into:)((uint64_t)v3, a2);
}

uint64_t sub_23BFA356C()
{
  return sub_23BFF9A00();
}

void sub_23BFA3584(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  static LazyCanvasSectionDescriptor.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6], a3[7], a3[8], a3[9], a3[10], a3[11], a3[12], a3[13], a3[14], a3[15], a3[16], a3[17], a3[18],
    a3[19],
    a3[20]);
}

uint64_t sub_23BFA35C4(char a1)
{
  return a1 & 1;
}

void type metadata accessor for LazyCanvasSectionDescriptor()
{
  JUMPOUT(0x2426150F0);
}

void type metadata accessor for LazyCanvasSectionDescriptor.CodingKeys()
{
  JUMPOUT(0x2426150F0);
}

void sub_23BFA35EC()
{
  JUMPOUT(0x242615198);
}

uint64_t sub_23BFA35FC()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_23BFA3604(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for CanvasSectionLayout(319, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 152), a4);
  if (v5 <= 0x3F)
    type metadata accessor for CanvasSectionHeader();
  return result;
}

uint64_t *sub_23BFA36FC(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  size_t v43;
  size_t v44;
  uint64_t v45;
  int v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  char v77;
  __int128 v78;
  char v79;
  unint64_t v80;
  uint64_t v81;
  _BYTE *v82;
  _BYTE *v83;
  int v84;
  int v85;
  unint64_t v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  const void *v92;
  void *v93;
  const void *v94;
  uint64_t v95;
  size_t v96;
  unint64_t v97;
  unint64_t v98;
  void *v99;
  const void *v100;
  unsigned int (*v101)(const void *, uint64_t, uint64_t);
  uint64_t *result;
  size_t __n;
  size_t v104;
  size_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  size_t v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;

  v121 = a3[8];
  v5 = *(_QWORD *)(v121 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  v8 = v6 | 7;
  v120 = v5;
  v9 = *(_QWORD *)(v5 + 64);
  if (v9 <= 0x10)
    v10 = 16;
  else
    v10 = v9;
  v11 = ((v6 + 8) & ~(unint64_t)v6) + v9;
  if (v11 <= 0x18)
    v11 = 24;
  v119 = v11;
  v12 = v11 + 1;
  if (v12 <= v10 + 1)
    v13 = v10 + 1;
  else
    v13 = v12;
  v125 = v13;
  if (v13 + 1 > v10)
    v14 = v13 + 1;
  else
    v14 = v10;
  v15 = sub_23BFF82CC();
  v16 = v14;
  v17 = *(_QWORD *)(v15 - 8);
  v18 = a3[9];
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(_DWORD *)(v17 + 84);
  v22 = *(_DWORD *)(v19 + 80);
  v21 = *(_DWORD *)(v19 + 84);
  v23 = a3[2];
  v24 = *(_QWORD *)(v23 - 8);
  v26 = *(_DWORD *)(v24 + 80);
  v25 = *(_DWORD *)(v24 + 84);
  v27 = v22 | *(_DWORD *)(v17 + 80) | v26;
  v28 = (v22 | *(_BYTE *)(v17 + 80) | v26);
  v29 = v22;
  v30 = v26;
  if (v21)
    v31 = v21 - 1;
  else
    v31 = 0;
  if (v31 <= v20)
    v32 = *(_DWORD *)(v17 + 84);
  else
    v32 = v31;
  v33 = v25 - 1;
  if (!v25)
    v33 = 0;
  if (v33 <= v32)
    v34 = v32;
  else
    v34 = v33;
  if (v21)
    v35 = *(_QWORD *)(v19 + 64);
  else
    v35 = *(_QWORD *)(v19 + 64) + 1;
  v123 = *(_QWORD *)(v17 + 64) + v29;
  v124 = *(_QWORD *)(v15 - 8);
  v122 = v35 + v30;
  if (v25)
    v36 = *(_QWORD *)(v24 + 64);
  else
    v36 = *(_QWORD *)(v24 + 64) + 1;
  v126 = v34;
  v128 = ((v35 + v30 + (v123 & ~v29)) & ~v30) + v36;
  if (v34)
    v37 = ((v35 + v30 + (v123 & ~v29)) & ~v30) + v36;
  else
    v37 = ((v35 + v30 + (v123 & ~v29)) & ~v30) + v36 + 1;
  v38 = a3[7];
  v39 = *(_QWORD *)(v38 - 8);
  v41 = *(_DWORD *)(v39 + 80);
  v40 = *(_DWORD *)(v39 + 84);
  v42 = v41;
  v127 = v39;
  v43 = *(_QWORD *)(v39 + 64);
  if (v40)
    v44 = v43;
  else
    v44 = v43 + 1;
  v45 = v8 | v41 | v28;
  v46 = (v27 | v6 | v41) & 0x100000;
  v47 = v45 == 7 && v46 == 0;
  if (!v47
    || ((v42 + 16 + ((v37 + ((v16 + v28 + 1 + ((v6 + 16) & ~v8)) & ~v28)) & 0xFFFFFFFFFFFFFFF8)) & ~v42)
     + v44 > 0x18)
  {
    v53 = *a2;
    *a1 = *a2;
    v54 = v53 + ((v45 + 16) & ~v45);
    swift_retain();
    return (uint64_t *)v54;
  }
  v114 = v16 + v28 + 1;
  v115 = v31;
  v116 = v20;
  v117 = *(_DWORD *)(v24 + 84);
  v118 = *(_DWORD *)(v19 + 84);
  __n = v35;
  v104 = v36;
  v110 = v15;
  v111 = v42 + 16;
  v107 = *(_QWORD *)(v18 - 8);
  v108 = v18;
  v105 = v44;
  v106 = *(_QWORD *)(v23 - 8);
  v109 = v23;
  v112 = v37;
  v48 = a2[1];
  *a1 = *a2;
  a1[1] = v48;
  v113 = ((unint64_t)a1 + v8 + 16) & ~v8;
  v49 = ((unint64_t)a2 + v8 + 16) & ~v8;
  v50 = *(unsigned __int8 *)(v49 + v16);
  v51 = v16;
  swift_bridgeObjectRetain();
  v55 = v51;
  v56 = ~v28;
  v57 = ~v29;
  v58 = ~v30;
  v59 = ~v42;
  switch(v50)
  {
    case 0:
      v60 = 0;
      *(_OWORD *)v113 = *(_OWORD *)v49;
      goto LABEL_51;
    case 1:
      v61 = v55;
      v62 = v56;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v120 + 16))(v113, v49, v121);
      v56 = v62;
      v55 = v61;
      v60 = 1;
      goto LABEL_51;
    case 2:
      v63 = v55;
      v64 = v56;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v120 + 16))(v113, v49, v121);
      v56 = v64;
      v55 = v63;
      v60 = 2;
LABEL_51:
      v66 = v117;
      v65 = v118;
      v68 = v115;
      v67 = v116;
      break;
    case 3:
      v69 = *(unsigned __int8 *)(v49 + v125);
      if (v69 >= 2)
      {
        if (v125 <= 3)
          v70 = v125;
        else
          v70 = 4;
        __asm { BR              X13 }
      }
      if (v69 == 1)
      {
        v10 = v119;
        v71 = *(unsigned __int8 *)(v49 + v119);
        if (v71 >= 2)
        {
          if (v119 <= 3)
            v72 = v119;
          else
            v72 = 4;
          __asm { BR              X13 }
        }
        if (v71 == 1)
        {
          *(_QWORD *)v113 = *(_QWORD *)v49;
          v75 = v55;
          v76 = v56;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v120 + 16))((v7 + 8 + v113) & ~v7, (v7 + 8 + v49) & ~v7, v121);
          v56 = v76;
          v58 = ~v30;
          v55 = v75;
          v77 = 1;
        }
        else
        {
          v77 = 0;
          v78 = *(_OWORD *)v49;
          *(_QWORD *)(v113 + 16) = *(_QWORD *)(v49 + 16);
          *(_OWORD *)v113 = v78;
        }
        v79 = 1;
      }
      else
      {
        v73 = *(unsigned __int8 *)(v49 + v10);
        if (v73 >= 2)
        {
          if (v10 <= 3)
            v74 = v10;
          else
            v74 = 4;
          __asm { BR              X12 }
        }
        if (v73 == 1)
        {
          v80 = v55;
          v81 = v56;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v120 + 16))(v113, v49, v121);
          v56 = v81;
          v58 = ~v30;
          v55 = v80;
          v79 = 0;
          v77 = 1;
        }
        else
        {
          v77 = 0;
          v79 = 0;
          *(_OWORD *)v113 = *(_OWORD *)v49;
        }
      }
      v66 = v117;
      v65 = v118;
      v68 = v115;
      v67 = v116;
      *(_BYTE *)(v113 + v10) = v77;
      *(_BYTE *)(v113 + v125) = v79;
      v60 = 3;
      break;
    default:
      if (v58 <= 3)
        v52 = v58;
      else
        v52 = 4;
      __asm { BR              X11 }
      return result;
  }
  *(_BYTE *)(v113 + v55) = v60;
  v82 = (_BYTE *)((v114 + v113) & v56);
  v83 = (_BYTE *)((v114 + v49) & v56);
  if (v126)
  {
    if ((_DWORD)v67 == v126)
    {
      if (!(*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v124 + 48))(v83, v67, v110))
        goto LABEL_92;
    }
    else
    {
      v86 = (unint64_t)&v83[v123] & v57;
      if (v68 == v126)
        v87 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v107 + 48))(v86, v65, v108);
      else
        v87 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v106 + 48))((v122 + v86) & v58, v66, v109);
      if (v87 < 2)
      {
LABEL_92:
        v88 = v38;
        v89 = v58;
        v90 = v59;
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v124 + 16))(v82, v83, v110);
        v91 = (void *)((unint64_t)&v82[v123] & v57);
        v92 = (const void *)((unint64_t)&v83[v123] & v57);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v107 + 48))(v92, 1, v108))
        {
          memcpy(v91, v92, __n);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v107 + 16))(v91, v92, v108);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v107 + 56))(v91, 0, 1, v108);
        }
        v93 = (void *)(((unint64_t)v91 + v122) & v89);
        v94 = (const void *)(((unint64_t)v92 + v122) & v89);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v106 + 48))(v94, 1, v109))
        {
          memcpy(v93, v94, v104);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v106 + 16))(v93, v94, v109);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v106 + 56))(v93, 0, 1, v109);
        }
        v95 = v111;
        v96 = v112;
        v59 = v90;
        v38 = v88;
        if (!v126)
          v82[v128] = 0;
        goto LABEL_102;
      }
    }
  }
  else
  {
    if (!v83[v128])
      goto LABEL_92;
    v84 = (v83[v128] - 1) << (8 * v128);
    if (v128 > 3)
      v84 = 0;
    if ((_DWORD)v128)
    {
      if (v128 <= 3)
        v85 = v128;
      else
        v85 = 4;
      __asm { BR              X11 }
    }
    if (v84 == -1)
      goto LABEL_92;
  }
  v96 = v112;
  memcpy(v82, v83, v112);
  v95 = v42 + 16;
LABEL_102:
  v82[v96] = v83[v96];
  v97 = (unint64_t)&v82[v96] & 0xFFFFFFFFFFFFFFF8;
  v98 = (unint64_t)&v83[v96] & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v97 + 8) = *(_QWORD *)(v98 + 8);
  v99 = (void *)((v95 + v97) & v59);
  v100 = (const void *)((v95 + v98) & v59);
  v101 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v127 + 48);
  swift_bridgeObjectRetain();
  if (v101(v100, 1, v38))
  {
    memcpy(v99, v100, v105);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v127 + 16))(v99, v100, v38);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v127 + 56))(v99, 0, 1, v38);
  }
  return a1;
}

uint64_t sub_23BFA3FBC(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t result;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;

  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2[8] - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (a1 + (v5 | 7) + 16) & ~(v5 | 7);
  v7 = *(_QWORD *)(v4 + 64);
  if (v7 <= 0x10)
    v8 = 16;
  else
    v8 = *(_QWORD *)(v4 + 64);
  v9 = v5 + 8;
  v10 = ((v5 + 8) & ~v5) + v7;
  if (v10 <= 0x18)
    v10 = 24;
  if (v10 + 1 <= v8 + 1)
    v11 = v8 + 1;
  else
    v11 = v10 + 1;
  if (v11 + 1 > v8)
    v12 = v11 + 1;
  else
    v12 = v8;
  v14 = ~v5;
  switch(*(_BYTE *)(v6 + v12))
  {
    case 0:
      goto LABEL_19;
    case 1:
    case 2:
      goto LABEL_18;
    case 3:
      v42 = *(unsigned __int8 *)(v6 + v11);
      if (v42 >= 2)
      {
        if (v11 <= 3)
          v43 = v11;
        else
          v43 = 4;
        __asm { BR              X0 }
      }
      if (v42 == 1)
      {
        v51 = *(unsigned __int8 *)(v6 + v10);
        if (v51 >= 2)
        {
          if (v10 <= 3)
            v52 = v10;
          else
            v52 = 4;
          __asm { BR              X16 }
        }
        if (v51 == 1)
          (*(void (**)(uint64_t))(v4 + 8))((v9 + v6) & v14);
      }
      else
      {
        v53 = *(unsigned __int8 *)(v6 + v8);
        if (v53 >= 2)
        {
          if (v8 <= 3)
            v54 = v8;
          else
            v54 = 4;
          __asm { BR              X14 }
        }
        if (v53 == 1)
LABEL_18:
          (*(void (**)(uint64_t))(v4 + 8))(v6);
      }
LABEL_19:
      v15 = sub_23BFF82CC();
      v16 = *(_QWORD *)(v15 - 8);
      v57 = a2[9];
      v58 = a2;
      v17 = *(_QWORD *)(v57 - 8);
      v18 = *(_DWORD *)(v17 + 84);
      v19 = *(_DWORD *)(v17 + 80);
      v20 = *(unsigned int *)(v16 + 84);
      v21 = a2[2];
      v22 = *(_QWORD *)(v21 - 8);
      v23 = *(unsigned int *)(v22 + 84);
      v24 = *(_DWORD *)(v22 + 80);
      v25 = (*(_DWORD *)(v17 + 80) | *(_DWORD *)(v16 + 80) | *(_DWORD *)(v22 + 80));
      v26 = ((v6 | 1) + v25 + v12) & ~v25;
      v27 = v18 - 1;
      if (!v18)
        v27 = 0;
      if (v27 <= v20)
        v28 = *(_DWORD *)(v16 + 84);
      else
        v28 = v27;
      v29 = v23 - 1;
      if (!(_DWORD)v23)
        v29 = 0;
      if (v29 <= v28)
        v30 = v28;
      else
        v30 = v29;
      v31 = *(_QWORD *)(v17 + 64);
      if (!v18)
        ++v31;
      v32 = ~v19;
      v33 = *(_QWORD *)(v16 + 64) + v19;
      v34 = v31 + v24;
      v35 = (v31 + v24 + (v33 & ~v19)) & ~v24;
      v36 = *(_QWORD *)(v22 + 64);
      if (!(_DWORD)v23)
        ++v36;
      v37 = v36 + v35;
      v55 = v32;
      v56 = ~v24;
      if (v30)
      {
        if ((_DWORD)v20 == v30)
        {
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v26, v20, v15))
            goto LABEL_60;
        }
        else
        {
          v40 = (v33 + v26) & v32;
          if (v27 == v30)
            v41 = (*(uint64_t (**)(uint64_t))(v17 + 48))(v40);
          else
            v41 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))((v34 + v40) & ~v24, v23, v21);
          if (v41 >= 2)
            goto LABEL_60;
        }
        goto LABEL_56;
      }
      if (!*(_BYTE *)(v26 + v37))
        goto LABEL_56;
      v38 = (*(unsigned __int8 *)(v26 + v37) - 1) << (8 * v37);
      if (v37 > 3)
        v38 = 0;
      if ((_DWORD)v37)
      {
        if (v37 <= 3)
          v39 = v36 + v35;
        else
          v39 = 4;
        __asm { BR              X11 }
      }
      if (v38 == -1)
      {
LABEL_56:
        (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v26, v15);
        v44 = (v33 + v26) & v55;
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v44, 1, v57))
          (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v44, v57);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))((v34 + v44) & v56, 1, v21))
          (*(void (**)(uint64_t, uint64_t))(v22 + 8))((v34 + v44) & v56, v21);
      }
LABEL_60:
      if (v30)
        v45 = v26;
      else
        v45 = v26 + 1;
      v46 = (v45 + v37) & 0xFFFFFFFFFFFFFFF8;
      swift_bridgeObjectRelease();
      v47 = v58[7];
      v48 = *(_QWORD *)(v47 - 8);
      v49 = (v46 + *(unsigned __int8 *)(v48 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80);
      result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v48 + 48))(v49, 1, v47);
      if (!(_DWORD)result)
        return (*(uint64_t (**)(unint64_t, uint64_t))(v48 + 8))(v49, v47);
      return result;
    default:
      if (v12 <= 3)
        v13 = v12;
      else
        v13 = 4;
      __asm { BR              X0 }
      return result;
  }
}

_QWORD *sub_23BFA4518(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  char v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  size_t v50;
  size_t v51;
  int v52;
  int v53;
  unint64_t v54;
  void *v55;
  const void *v56;
  char *v57;
  void *v58;
  const void *v59;
  _QWORD *v60;
  size_t v61;
  size_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  const void *v69;
  unsigned int (*v70)(const void *, uint64_t, uint64_t);
  size_t v71;
  _QWORD *result;
  size_t __n;
  size_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *__dst;
  char *__dsta;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  __dst = (_QWORD *)a3[8];
  v5 = *(__dst - 1);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 | 7) + 16;
  v78 = a1;
  v8 = ((unint64_t)a1 + v7) & ~(v6 | 7);
  v9 = ((unint64_t)a2 + v7) & ~(v6 | 7);
  v10 = *(_QWORD *)(v5 + 64);
  if (v10 <= 0x10)
    v11 = 16;
  else
    v11 = *(_QWORD *)(v5 + 64);
  v12 = ((v6 + 8) & ~v6) + v10;
  if (v12 <= 0x18)
    v13 = 24;
  else
    v13 = v12;
  if (v13 + 1 <= v11 + 1)
    v14 = v11 + 1;
  else
    v14 = v13 + 1;
  if (v14 + 1 > v11)
    v15 = v14 + 1;
  else
    v15 = v11;
  v16 = *(unsigned __int8 *)(v9 + v15);
  swift_bridgeObjectRetain();
  switch(v16)
  {
    case 0:
      v18 = 0;
      *(_OWORD *)v8 = *(_OWORD *)v9;
      break;
    case 1:
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(v5 + 16))(v8, v9, __dst);
      v18 = 1;
      break;
    case 2:
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(v5 + 16))(v8, v9, __dst);
      v18 = 2;
      break;
    case 3:
      v19 = *(unsigned __int8 *)(v9 + v14);
      if (v19 >= 2)
      {
        if (v14 <= 3)
          v20 = v14;
        else
          v20 = 4;
        __asm { BR              X13 }
      }
      if (v19 == 1)
      {
        v21 = *(unsigned __int8 *)(v9 + v13);
        if (v21 >= 2)
        {
          if (v13 <= 3)
            v22 = v13;
          else
            v22 = 4;
          __asm { BR              X13 }
        }
        if (v21 == 1)
        {
          *(_QWORD *)v8 = *(_QWORD *)v9;
          (*(void (**)(uint64_t, uint64_t, _QWORD *))(v5 + 16))((v6 + 8 + v8) & ~v6, (v6 + 8 + v9) & ~v6, __dst);
          v25 = 1;
          v11 = v13;
          v26 = 1;
        }
        else
        {
          v25 = 0;
          v27 = *(_OWORD *)v9;
          *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
          *(_OWORD *)v8 = v27;
          v26 = 1;
          v11 = v13;
        }
      }
      else
      {
        v23 = *(unsigned __int8 *)(v9 + v11);
        if (v23 >= 2)
        {
          if (v11 <= 3)
            v24 = v11;
          else
            v24 = 4;
          __asm { BR              X12 }
        }
        if (v23 == 1)
        {
          (*(void (**)(uint64_t, uint64_t, _QWORD *))(v5 + 16))(v8, v9, __dst);
          v26 = 0;
          v25 = 1;
        }
        else
        {
          v25 = 0;
          v26 = 0;
          *(_OWORD *)v8 = *(_OWORD *)v9;
        }
      }
      *(_BYTE *)(v8 + v11) = v25;
      *(_BYTE *)(v8 + v14) = v26;
      v18 = 3;
      break;
    default:
      if (v15 <= 3)
        v17 = v15;
      else
        v17 = 4;
      __asm { BR              X11 }
      return result;
  }
  *(_BYTE *)(v8 + v15) = v18;
  v28 = sub_23BFF82CC();
  v29 = *(_QWORD *)(v28 - 8);
  v77 = a3[9];
  v30 = *(_QWORD *)(v77 - 8);
  v31 = *(unsigned int *)(v29 + 84);
  v32 = *(_DWORD *)(v30 + 84);
  v76 = a3[2];
  v33 = *(_QWORD *)(v76 - 8);
  v34 = *(unsigned int *)(v33 + 84);
  v35 = (*(_DWORD *)(v30 + 80) | *(_DWORD *)(v29 + 80) | *(_DWORD *)(v33 + 80));
  v36 = *(_DWORD *)(v30 + 80);
  v37 = *(_DWORD *)(v33 + 80);
  v38 = v15 + v35 + 1;
  __dsta = (char *)((v38 + v8) & ~v35);
  v39 = (_BYTE *)((v38 + v9) & ~v35);
  v40 = v32 - 1;
  if (!v32)
    v40 = 0;
  if (v40 <= v31)
    v41 = *(_DWORD *)(v29 + 84);
  else
    v41 = v40;
  v42 = v34 - 1;
  if (!(_DWORD)v34)
    v42 = 0;
  if (v42 <= v41)
    v43 = v41;
  else
    v43 = v42;
  if (v32)
    v44 = *(_QWORD *)(v30 + 64);
  else
    v44 = *(_QWORD *)(v30 + 64) + 1;
  v45 = ~v36;
  v46 = *(_QWORD *)(v29 + 64) + v36;
  v47 = ~v37;
  v48 = v44 + v37;
  v49 = (v44 + v37 + (v46 & ~v36)) & ~v37;
  v50 = *(_QWORD *)(v33 + 64);
  if (!(_DWORD)v34)
    ++v50;
  __n = v44;
  v74 = v50;
  v51 = v49 + v50;
  v75 = v47;
  if (!v43)
  {
    if (!v39[v51])
      goto LABEL_76;
    v52 = (v39[v51] - 1) << (8 * v51);
    if (v51 > 3)
      v52 = 0;
    if ((_DWORD)v51)
    {
      if (v51 <= 3)
        v53 = v49 + v50;
      else
        v53 = 4;
      __asm { BR              X11 }
    }
    if (v52 == -1)
      goto LABEL_76;
    goto LABEL_85;
  }
  if ((_DWORD)v31 == v43)
  {
    if (!(*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v29 + 48))(v39, v31, v28))
      goto LABEL_76;
LABEL_85:
    if (v43)
      v61 = v51;
    else
      v61 = v51 + 1;
    v57 = __dsta;
    memcpy(__dsta, v39, v61);
    v60 = v78;
    goto LABEL_89;
  }
  v54 = (unint64_t)&v39[v46] & v45;
  if (v40 == v43)
  {
    if ((*(unsigned int (**)(unint64_t))(v30 + 48))(v54) >= 2)
      goto LABEL_85;
  }
  else if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v33 + 48))((v48 + v54) & v47, v34, v76) >= 2)
  {
    goto LABEL_85;
  }
LABEL_76:
  (*(void (**)(char *, _BYTE *, uint64_t))(v29 + 16))(__dsta, v39, v28);
  v55 = (void *)((unint64_t)&__dsta[v46] & v45);
  v56 = (const void *)((unint64_t)&v39[v46] & v45);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v30 + 48))(v56, 1, v77))
  {
    memcpy(v55, v56, __n);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v30 + 16))(v55, v56, v77);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v55, 0, 1, v77);
  }
  v57 = __dsta;
  v58 = (void *)(((unint64_t)v55 + v48) & v75);
  v59 = (const void *)(((unint64_t)v56 + v48) & v75);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v33 + 48))(v59, 1, v76))
  {
    memcpy(v58, v59, v74);
    v60 = v78;
    if (v43)
      goto LABEL_89;
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v33 + 16))(v58, v59, v76);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v58, 0, 1, v76);
    v60 = v78;
    if (v43)
      goto LABEL_89;
  }
  __dsta[v51] = 0;
LABEL_89:
  if (v43)
    v62 = v51;
  else
    v62 = v51 + 1;
  v63 = (unint64_t)&v57[v62];
  v64 = (unint64_t)&v39[v62];
  *(_BYTE *)v63 = *(_BYTE *)v64;
  v63 &= 0xFFFFFFFFFFFFFFF8;
  v64 &= 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v63 + 8) = *(_QWORD *)(v64 + 8);
  v65 = a3[7];
  v66 = *(_QWORD *)(v65 - 8);
  v67 = *(unsigned __int8 *)(v66 + 80);
  v68 = (void *)((v67 + 16 + v63) & ~v67);
  v69 = (const void *)((v67 + 16 + v64) & ~v67);
  v70 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v66 + 48);
  swift_bridgeObjectRetain();
  if (v70(v69, 1, v65))
  {
    if (*(_DWORD *)(v66 + 84))
      v71 = *(_QWORD *)(v66 + 64);
    else
      v71 = *(_QWORD *)(v66 + 64) + 1;
    memcpy(v68, v69, v71);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v66 + 16))(v68, v69, v65);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v66 + 56))(v68, 0, 1, v65);
  }
  return v60;
}

_QWORD *sub_23BFA4C74(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  char v35;
  char v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  size_t v60;
  size_t v61;
  char *v62;
  uint64_t (*v63)(char *, uint64_t);
  uint64_t v64;
  int v65;
  int v66;
  char v67;
  int v68;
  int v69;
  uint64_t v70;
  unint64_t v71;
  unsigned int v72;
  unint64_t v73;
  unint64_t v74;
  unsigned int v75;
  unint64_t v76;
  unsigned int v77;
  int v78;
  int v79;
  unint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  size_t v83;
  unsigned int v84;
  size_t v85;
  void *v86;
  void *v87;
  uint64_t (*v88)(void *, uint64_t, uint64_t);
  int v89;
  int v90;
  void *v91;
  void *v92;
  uint64_t (*v93)(void *, uint64_t, uint64_t);
  int v94;
  int v95;
  size_t v96;
  void *v97;
  const void *v98;
  void *v99;
  const void *v100;
  size_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  void *v110;
  uint64_t (*v111)(void *, uint64_t, uint64_t);
  int v112;
  int v113;
  size_t v114;
  _QWORD *result;
  size_t v116;
  size_t __n;
  size_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int v125;
  uint64_t v126;
  _QWORD *v127;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v127 = a3;
  v6 = a3[8];
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 | 7) + 16;
  v121 = a1;
  v10 = ((unint64_t)a1 + v9) & ~(v8 | 7);
  v11 = ((unint64_t)a2 + v9) & ~(v8 | 7);
  v12 = *(_QWORD *)(v7 + 64);
  if (v12 <= 0x10)
    v13 = 16;
  else
    v13 = *(_QWORD *)(v7 + 64);
  v14 = v8 + 8;
  v15 = v12 + ((v8 + 8) & ~v8);
  if (v15 <= 0x18)
    v16 = 24;
  else
    v16 = v15;
  if (v16 + 1 <= v13 + 1)
    v17 = v13 + 1;
  else
    v17 = v16 + 1;
  if (v17 + 1 > v13)
    v18 = v17 + 1;
  else
    v18 = v13;
  if (v10 != v11)
  {
    v20 = ~v8;
    switch(*(_BYTE *)(v10 + v18))
    {
      case 0:
        goto LABEL_31;
      case 1:
      case 2:
        goto LABEL_20;
      case 3:
        v22 = *(unsigned __int8 *)(v10 + v17);
        if (v22 >= 2)
        {
          if (v17 <= 3)
            v23 = v17;
          else
            v23 = 4;
          __asm { BR              X12 }
        }
        if (v22 == 1)
        {
          v27 = *(unsigned __int8 *)(v10 + v16);
          if (v27 >= 2)
          {
            if (v16 <= 3)
              v28 = v16;
            else
              v28 = 4;
            __asm { BR              X12 }
          }
          if (v27 == 1)
            (*(void (**)(uint64_t, uint64_t))(v7 + 8))((v14 + v10) & v20, v6);
        }
        else
        {
          v29 = *(unsigned __int8 *)(v10 + v13);
          if (v29 >= 2)
          {
            if (v13 <= 3)
              v30 = v13;
            else
              v30 = 4;
            __asm { BR              X12 }
          }
          if (v29 == 1)
LABEL_20:
            (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v10, v6);
        }
LABEL_31:
        switch(*(_BYTE *)(v11 + v18))
        {
          case 0:
            v24 = 0;
            *(_OWORD *)v10 = *(_OWORD *)v11;
            break;
          case 1:
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v10, v11, v6);
            v24 = 1;
            break;
          case 2:
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v10, v11, v6);
            v24 = 2;
            break;
          case 3:
            v25 = *(unsigned __int8 *)(v11 + v17);
            if (v25 >= 2)
            {
              if (v17 <= 3)
                v26 = v17;
              else
                v26 = 4;
              __asm { BR              X12 }
            }
            if (v25 == 1)
            {
              v31 = *(unsigned __int8 *)(v11 + v16);
              if (v31 >= 2)
              {
                if (v16 <= 3)
                  v32 = v16;
                else
                  v32 = 4;
                __asm { BR              X12 }
              }
              if (v31 == 1)
              {
                *(_QWORD *)v10 = *(_QWORD *)v11;
                (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))((v14 + v10) & v20, (v14 + v11) & v20, v6);
                v35 = 1;
                v13 = v16;
                v36 = 1;
              }
              else
              {
                v35 = 0;
                v37 = *(_OWORD *)v11;
                *(_QWORD *)(v10 + 16) = *(_QWORD *)(v11 + 16);
                *(_OWORD *)v10 = v37;
                v36 = 1;
                v13 = v16;
              }
            }
            else
            {
              v33 = *(unsigned __int8 *)(v11 + v13);
              if (v33 >= 2)
              {
                if (v13 <= 3)
                  v34 = v13;
                else
                  v34 = 4;
                __asm { BR              X12 }
              }
              if (v33 == 1)
              {
                (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v10, v11, v6);
                v36 = 0;
                v35 = 1;
              }
              else
              {
                v35 = 0;
                v36 = 0;
                *(_OWORD *)v10 = *(_OWORD *)v11;
              }
            }
            *(_BYTE *)(v10 + v13) = v35;
            *(_BYTE *)(v10 + v17) = v36;
            v24 = 3;
            break;
          default:
            if (v18 <= 3)
              v21 = v18;
            else
              v21 = 4;
            __asm { BR              X12 }
            return result;
        }
        *(_BYTE *)(v10 + v18) = v24;
        break;
      default:
        if (v18 <= 3)
          v19 = v18;
        else
          v19 = 4;
        __asm { BR              X13 }
        return result;
    }
  }
  v38 = sub_23BFF82CC();
  v39 = v38;
  v40 = *(_QWORD *)(v38 - 8);
  v123 = v127[9];
  v41 = *(_QWORD *)(v123 - 8);
  v42 = *(unsigned int *)(v40 + 84);
  v43 = *(unsigned int *)(v41 + 84);
  v122 = v127[2];
  v44 = *(_QWORD *)(v122 - 8);
  v45 = *(unsigned int *)(v44 + 84);
  v46 = (*(_DWORD *)(v41 + 80) | *(_DWORD *)(v40 + 80) | *(_DWORD *)(v44 + 80));
  v47 = *(_DWORD *)(v41 + 80);
  v48 = *(_DWORD *)(v44 + 80);
  v49 = v18 + v46 + 1;
  v50 = (char *)((v49 + v10) & ~v46);
  v51 = (char *)((v49 + v11) & ~v46);
  if ((_DWORD)v43)
    v52 = v43 - 1;
  else
    v52 = 0;
  if (v52 <= v42)
    v53 = *(_DWORD *)(v40 + 84);
  else
    v53 = v52;
  v54 = v45 - 1;
  if (!(_DWORD)v45)
    v54 = 0;
  if (v54 <= v53)
    v55 = v53;
  else
    v55 = v54;
  if ((_DWORD)v43)
    v56 = *(_QWORD *)(v41 + 64);
  else
    v56 = *(_QWORD *)(v41 + 64) + 1;
  v57 = *(_QWORD *)(v40 + 64);
  v126 = ~v47;
  v58 = v57 + v47;
  v59 = (v56 + v48 + ((v57 + v47) & ~v47)) & ~v48;
  v124 = *(_QWORD *)(v122 - 8);
  v60 = *(_QWORD *)(v44 + 64);
  if (!(_DWORD)v45)
    ++v60;
  __n = v56;
  v118 = v60;
  v61 = v59 + v60;
  v125 = v55;
  v119 = v56 + v48;
  v120 = ~v48;
  if (v55)
  {
    v116 = v59 + v60;
    v62 = v50;
    if ((_DWORD)v42 != v55)
    {
      v70 = v38;
      v71 = (unint64_t)&v50[v58] & v126;
      if (v52 == v55)
        v72 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v41 + 48))(v71, v43, v123);
      else
        v72 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v44 + 48))((v56 + v48 + v71) & ~v48, v45, v122);
      v73 = (unint64_t)&v51[v58];
      if (v72 >= 2)
      {
        v76 = v73 & v126;
        if (v52 == v125)
          v77 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v41 + 48))(v76, v43, v123);
        else
          v77 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v124 + 48))((v119 + v76) & v120, v45, v122);
        v61 = v116;
        v39 = v70;
        if (v77 < 2)
          goto LABEL_159;
        goto LABEL_155;
      }
      v74 = v73 & v126;
      if (v52 == v125)
        v75 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v41 + 48))(v74, v43, v123);
      else
        v75 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v124 + 48))((v119 + v74) & v120, v45, v122);
      v61 = v116;
      v39 = v70;
      if (v75 >= 2)
      {
LABEL_131:
        (*(void (**)(char *, uint64_t))(v40 + 8))(v62, v39);
        v80 = (unint64_t)&v62[v58] & v126;
        if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v41 + 48))(v80, 1, v123))
          (*(void (**)(unint64_t, uint64_t))(v41 + 8))(v80, v123);
        v81 = (v119 + v80) & v120;
        v82 = v121;
        if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v124 + 48))(v81, 1, v122))
          (*(void (**)(unint64_t, uint64_t))(v124 + 8))(v81, v122);
        if (v125)
          v83 = v61;
        else
          v83 = v61 + 1;
        memcpy(v62, v51, v83);
        v84 = v125;
        goto LABEL_165;
      }
LABEL_139:
      v85 = v61;
      (*(void (**)(char *, char *, uint64_t))(v40 + 24))(v62, v51, v39);
      v86 = (void *)((unint64_t)&v62[v58] & v126);
      v87 = (void *)((unint64_t)&v51[v58] & v126);
      v88 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v41 + 48);
      v89 = v88(v86, 1, v123);
      v90 = v88(v87, 1, v123);
      if (v89)
      {
        if (!v90)
        {
          (*(void (**)(void *, void *, uint64_t))(v41 + 16))(v86, v87, v123);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v86, 0, 1, v123);
          goto LABEL_145;
        }
      }
      else
      {
        if (!v90)
        {
          (*(void (**)(void *, void *, uint64_t))(v41 + 24))(v86, v87, v123);
LABEL_145:
          v91 = (void *)(((unint64_t)v86 + v119) & v120);
          v92 = (void *)(((unint64_t)v87 + v119) & v120);
          v93 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v124 + 48);
          v94 = v93(v91, 1, v122);
          v95 = v93(v92, 1, v122);
          v61 = v85;
          if (v94)
          {
            if (!v95)
            {
              (*(void (**)(void *, void *, uint64_t))(v124 + 16))(v91, v92, v122);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v124 + 56))(v91, 0, 1, v122);
LABEL_151:
              v82 = v121;
              v84 = v125;
              goto LABEL_165;
            }
          }
          else
          {
            if (!v95)
            {
              (*(void (**)(void *, void *, uint64_t))(v124 + 24))(v91, v92, v122);
              goto LABEL_151;
            }
            (*(void (**)(void *, uint64_t))(v124 + 8))(v91, v122);
          }
          memcpy(v91, v92, v118);
          goto LABEL_151;
        }
        (*(void (**)(void *, uint64_t))(v41 + 8))(v86, v123);
      }
      memcpy(v86, v87, __n);
      goto LABEL_145;
    }
    v63 = *(uint64_t (**)(char *, uint64_t))(v40 + 48);
    v64 = v38;
    v65 = v63(v50, v42);
    v66 = ((uint64_t (*)(char *, uint64_t, uint64_t))v63)(v51, v42, v64);
    v39 = v64;
    v61 = v116;
    if (v65)
    {
      if (!v66)
        goto LABEL_159;
LABEL_155:
      if (v125)
        v96 = v61;
      else
        v96 = v61 + 1;
      memcpy(v62, v51, v96);
      v84 = v125;
      v82 = v121;
      goto LABEL_165;
    }
LABEL_130:
    if (v66)
      goto LABEL_131;
    goto LABEL_139;
  }
  v67 = 8 * v61;
  v62 = v50;
  if (!v50[v61])
    goto LABEL_121;
  v68 = (v50[v61] - 1) << v67;
  if (v61 > 3)
    v68 = 0;
  if ((_DWORD)v61)
  {
    if (v61 <= 3)
      v69 = v61;
    else
      v69 = 4;
    __asm { BR              X12 }
  }
  if (v68 == -1)
  {
LABEL_121:
    if (!v51[v61])
      goto LABEL_139;
    v78 = (v51[v61] - 1) << v67;
    if (v61 > 3)
      v78 = 0;
    if ((_DWORD)v61)
    {
      if (v61 <= 3)
        v79 = v61;
      else
        v79 = 4;
      __asm { BR              X11 }
    }
    v66 = v78 + 1;
    goto LABEL_130;
  }
  if (v51[v61] && (v51[v61] - 1) << v67 != -1)
    goto LABEL_155;
LABEL_159:
  (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v62, v51, v39);
  v97 = (void *)((unint64_t)&v62[v58] & v126);
  v98 = (const void *)((unint64_t)&v51[v58] & v126);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v41 + 48))(v98, 1, v123))
  {
    memcpy(v97, v98, __n);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v41 + 16))(v97, v98, v123);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v97, 0, 1, v123);
  }
  v99 = (void *)(((unint64_t)v97 + v119) & v120);
  v100 = (const void *)(((unint64_t)v98 + v119) & v120);
  v82 = v121;
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v124 + 48))(v100, 1, v122))
  {
    memcpy(v99, v100, v118);
    v84 = v125;
    if (v125)
      goto LABEL_165;
    goto LABEL_164;
  }
  (*(void (**)(void *, const void *, uint64_t))(v124 + 16))(v99, v100, v122);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v124 + 56))(v99, 0, 1, v122);
  v84 = v125;
  if (!v125)
LABEL_164:
    v62[v61] = 0;
LABEL_165:
  if (v84)
    v101 = v61;
  else
    v101 = v61 + 1;
  v102 = (unint64_t)&v62[v101];
  v103 = (unint64_t)&v51[v101];
  *(_BYTE *)v102 = *(_BYTE *)v103;
  v104 = v102 & 0xFFFFFFFFFFFFFFF8;
  v105 = v103 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)((v102 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_QWORD *)((v103 & 0xFFFFFFFFFFFFFFF8) + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v106 = v127[7];
  v107 = *(_QWORD *)(v106 - 8);
  v108 = *(unsigned __int8 *)(v107 + 80);
  v109 = (void *)((v108 + 16 + v104) & ~v108);
  v110 = (void *)((v108 + 16 + v105) & ~v108);
  v111 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v107 + 48);
  v112 = v111(v109, 1, v106);
  v113 = v111(v110, 1, v106);
  if (v112)
  {
    if (!v113)
    {
      (*(void (**)(void *, void *, uint64_t))(v107 + 16))(v109, v110, v106);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v107 + 56))(v109, 0, 1, v106);
      return v82;
    }
  }
  else
  {
    if (!v113)
    {
      (*(void (**)(void *, void *, uint64_t))(v107 + 24))(v109, v110, v106);
      return v82;
    }
    (*(void (**)(void *, uint64_t))(v107 + 8))(v109, v106);
  }
  if (*(_DWORD *)(v107 + 84))
    v114 = *(_QWORD *)(v107 + 64);
  else
    v114 = *(_QWORD *)(v107 + 64) + 1;
  memcpy(v109, v110, v114);
  return v82;
}

_OWORD *sub_23BFA5AB0(_OWORD *a1, _OWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  char v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  size_t v50;
  size_t v51;
  int v52;
  int v53;
  unint64_t v54;
  void *v55;
  const void *v56;
  _QWORD *v57;
  void *v58;
  const void *v59;
  _OWORD *v60;
  _BYTE *v61;
  size_t v62;
  size_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  const void *v70;
  size_t v71;
  _OWORD *result;
  size_t __n;
  size_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  _BYTE *__dst;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3[8] - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 | 7) + 16;
  v7 = ((unint64_t)a1 + v6) & ~(v5 | 7);
  v8 = ((unint64_t)a2 + v6) & ~(v5 | 7);
  v9 = *(_QWORD *)(v4 + 64);
  if (v9 <= 0x10)
    v10 = 16;
  else
    v10 = *(_QWORD *)(v4 + 64);
  v11 = v5 + 8;
  v12 = ((v5 + 8) & ~v5) + v9;
  if (v12 <= 0x18)
    v13 = 24;
  else
    v13 = v12;
  if (v13 + 1 <= v10 + 1)
    v14 = v10 + 1;
  else
    v14 = v13 + 1;
  if (v14 + 1 > v10)
    v15 = v14 + 1;
  else
    v15 = v10;
  v17 = ~v5;
  switch(*(_BYTE *)(v8 + v15))
  {
    case 0:
      v18 = 0;
      *(_OWORD *)v7 = *(_OWORD *)v8;
      break;
    case 1:
      (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v7, v8);
      v18 = 1;
      break;
    case 2:
      (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v7, v8);
      v18 = 2;
      break;
    case 3:
      v19 = *(unsigned __int8 *)(v8 + v14);
      if (v19 >= 2)
      {
        if (v14 <= 3)
          v20 = v14;
        else
          v20 = 4;
        __asm { BR              X15 }
      }
      if (v19 == 1)
      {
        v21 = *(unsigned __int8 *)(v8 + v13);
        if (v21 >= 2)
        {
          if (v13 <= 3)
            v22 = v13;
          else
            v22 = 4;
          __asm { BR              X15 }
        }
        if (v21 == 1)
        {
          *(_QWORD *)v7 = *(_QWORD *)v8;
          (*(void (**)(uint64_t, uint64_t))(v4 + 32))((v11 + v7) & v17, (v11 + v8) & v17);
          v25 = 1;
          v10 = v13;
          v26 = 1;
        }
        else
        {
          v25 = 0;
          v27 = *(_OWORD *)v8;
          *(_QWORD *)(v7 + 16) = *(_QWORD *)(v8 + 16);
          *(_OWORD *)v7 = v27;
          v26 = 1;
          v10 = v13;
        }
      }
      else
      {
        v23 = *(unsigned __int8 *)(v8 + v10);
        if (v23 >= 2)
        {
          if (v10 <= 3)
            v24 = v10;
          else
            v24 = 4;
          __asm { BR              X13 }
        }
        if (v23 == 1)
        {
          (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v7, v8);
          v26 = 0;
          v25 = 1;
        }
        else
        {
          v25 = 0;
          v26 = 0;
          *(_OWORD *)v7 = *(_OWORD *)v8;
        }
      }
      *(_BYTE *)(v7 + v10) = v25;
      *(_BYTE *)(v7 + v14) = v26;
      v18 = 3;
      break;
    default:
      if (v15 <= 3)
        v16 = v15;
      else
        v16 = 4;
      __asm { BR              X15 }
      return result;
  }
  *(_BYTE *)(v7 + v15) = v18;
  v28 = sub_23BFF82CC();
  v29 = *(_QWORD *)(v28 - 8);
  v77 = a3[9];
  v78 = a3;
  v30 = *(_QWORD *)(v77 - 8);
  v31 = *(unsigned int *)(v29 + 84);
  v32 = *(_DWORD *)(v30 + 84);
  v76 = a3[2];
  v33 = *(_QWORD *)(v76 - 8);
  v34 = *(unsigned int *)(v33 + 84);
  v35 = (*(_DWORD *)(v30 + 80) | *(_DWORD *)(v29 + 80) | *(_DWORD *)(v33 + 80));
  v36 = *(_DWORD *)(v30 + 80);
  v37 = *(_DWORD *)(v33 + 80);
  v38 = v15 + v35 + 1;
  __dst = (_BYTE *)((v38 + v7) & ~v35);
  v39 = (_BYTE *)((v38 + v8) & ~v35);
  v40 = v32 - 1;
  if (!v32)
    v40 = 0;
  if (v40 <= v31)
    v41 = *(_DWORD *)(v29 + 84);
  else
    v41 = v40;
  v42 = v34 - 1;
  if (!(_DWORD)v34)
    v42 = 0;
  if (v42 <= v41)
    v43 = v41;
  else
    v43 = v42;
  if (v32)
    v44 = *(_QWORD *)(v30 + 64);
  else
    v44 = *(_QWORD *)(v30 + 64) + 1;
  v45 = ~v36;
  v46 = *(_QWORD *)(v29 + 64) + v36;
  v47 = ~v37;
  v48 = v44 + v37;
  v49 = (v44 + v37 + (v46 & ~v36)) & ~v37;
  v50 = *(_QWORD *)(v33 + 64);
  if (!(_DWORD)v34)
    ++v50;
  __n = v44;
  v74 = v50;
  v51 = v49 + v50;
  v75 = v47;
  if (!v43)
  {
    if (!v39[v51])
      goto LABEL_75;
    v52 = (v39[v51] - 1) << (8 * v51);
    if (v51 > 3)
      v52 = 0;
    if ((_DWORD)v51)
    {
      if (v51 <= 3)
        v53 = v49 + v50;
      else
        v53 = 4;
      __asm { BR              X11 }
    }
    if (v52 == -1)
      goto LABEL_75;
    goto LABEL_84;
  }
  if ((_DWORD)v31 == v43)
  {
    if (!(*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v29 + 48))(v39, v31, v28))
      goto LABEL_75;
LABEL_84:
    if (v43)
      v62 = v51;
    else
      v62 = v51 + 1;
    v61 = __dst;
    memcpy(__dst, v39, v62);
    v57 = v78;
    v60 = a1;
    goto LABEL_88;
  }
  v54 = (unint64_t)&v39[v46] & v45;
  if (v40 == v43)
  {
    if ((*(unsigned int (**)(unint64_t))(v30 + 48))(v54) >= 2)
      goto LABEL_84;
  }
  else if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v33 + 48))((v48 + v54) & v47, v34, v76) >= 2)
  {
    goto LABEL_84;
  }
LABEL_75:
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v29 + 32))(__dst, v39, v28);
  v55 = (void *)((unint64_t)&__dst[v46] & v45);
  v56 = (const void *)((unint64_t)&v39[v46] & v45);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v30 + 48))(v56, 1, v77))
  {
    memcpy(v55, v56, __n);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v30 + 32))(v55, v56, v77);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v55, 0, 1, v77);
  }
  v57 = v78;
  v58 = (void *)(((unint64_t)v55 + v48) & v75);
  v59 = (const void *)(((unint64_t)v56 + v48) & v75);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v33 + 48))(v59, 1, v76))
  {
    memcpy(v58, v59, v74);
    v60 = a1;
    v61 = __dst;
    if (v43)
      goto LABEL_88;
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v33 + 32))(v58, v59, v76);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v58, 0, 1, v76);
    v60 = a1;
    v61 = __dst;
    if (v43)
      goto LABEL_88;
  }
  v61[v51] = 0;
LABEL_88:
  if (v43)
    v63 = v51;
  else
    v63 = v51 + 1;
  v64 = (unint64_t)&v61[v63];
  v65 = (unint64_t)&v39[v63];
  *(_BYTE *)v64 = *(_BYTE *)v65;
  v64 &= 0xFFFFFFFFFFFFFFF8;
  v65 &= 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v64 + 8) = *(_QWORD *)(v65 + 8);
  v66 = v57[7];
  v67 = *(_QWORD *)(v66 - 8);
  v68 = *(unsigned __int8 *)(v67 + 80);
  v69 = (void *)((v68 + 16 + v64) & ~v68);
  v70 = (const void *)((v68 + 16 + v65) & ~v68);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v67 + 48))(v70, 1, v66))
  {
    if (*(_DWORD *)(v67 + 84))
      v71 = *(_QWORD *)(v67 + 64);
    else
      v71 = *(_QWORD *)(v67 + 64) + 1;
    memcpy(v69, v70, v71);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v67 + 32))(v69, v70, v66);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v69, 0, 1, v66);
  }
  return v60;
}

_QWORD *sub_23BFA61E8(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  char v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  size_t v61;
  size_t v62;
  char *v63;
  uint64_t (*v64)(char *, uint64_t);
  uint64_t v65;
  int v66;
  int v67;
  char v68;
  int v69;
  int v70;
  uint64_t v71;
  unint64_t v72;
  unsigned int v73;
  unint64_t v74;
  unint64_t v75;
  unsigned int v76;
  unint64_t v77;
  unsigned int v78;
  int v79;
  int v80;
  unint64_t v81;
  unint64_t v82;
  _QWORD *v83;
  size_t v84;
  unsigned int v85;
  size_t v86;
  void *v87;
  void *v88;
  uint64_t (*v89)(void *, uint64_t, uint64_t);
  int v90;
  int v91;
  void *v92;
  void *v93;
  uint64_t (*v94)(void *, uint64_t, uint64_t);
  int v95;
  int v96;
  size_t v97;
  void *v98;
  const void *v99;
  void *v100;
  const void *v101;
  size_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  void *v111;
  uint64_t (*v112)(void *, uint64_t, uint64_t);
  int v113;
  size_t v114;
  _QWORD *result;
  size_t v116;
  size_t __n;
  size_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int v125;
  uint64_t v126;
  _QWORD *v127;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v127 = a3;
  v7 = a3[8];
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 | 7) + 16;
  v121 = a1;
  v11 = ((unint64_t)a1 + v10) & ~(v9 | 7);
  v12 = ((unint64_t)a2 + v10) & ~(v9 | 7);
  v13 = *(_QWORD *)(v8 + 64);
  if (v13 <= 0x10)
    v14 = 16;
  else
    v14 = *(_QWORD *)(v8 + 64);
  v15 = v9 + 8;
  v16 = v13 + ((v9 + 8) & ~v9);
  if (v16 <= 0x18)
    v17 = 24;
  else
    v17 = v16;
  if (v17 + 1 <= v14 + 1)
    v18 = v14 + 1;
  else
    v18 = v17 + 1;
  if (v18 + 1 > v14)
    v19 = v18 + 1;
  else
    v19 = v14;
  if (v11 != v12)
  {
    v21 = ~v9;
    switch(*(_BYTE *)(v11 + v19))
    {
      case 0:
        goto LABEL_31;
      case 1:
      case 2:
        goto LABEL_20;
      case 3:
        v23 = *(unsigned __int8 *)(v11 + v18);
        if (v23 >= 2)
        {
          if (v18 <= 3)
            v24 = v18;
          else
            v24 = 4;
          __asm { BR              X12 }
        }
        if (v23 == 1)
        {
          v28 = *(unsigned __int8 *)(v11 + v17);
          if (v28 >= 2)
          {
            if (v17 <= 3)
              v29 = v17;
            else
              v29 = 4;
            __asm { BR              X12 }
          }
          if (v28 == 1)
            (*(void (**)(uint64_t, uint64_t))(v8 + 8))((v15 + v11) & v21, v7);
        }
        else
        {
          v30 = *(unsigned __int8 *)(v11 + v14);
          if (v30 >= 2)
          {
            if (v14 <= 3)
              v31 = v14;
            else
              v31 = 4;
            __asm { BR              X12 }
          }
          if (v30 == 1)
LABEL_20:
            (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v11, v7);
        }
LABEL_31:
        switch(*(_BYTE *)(v12 + v19))
        {
          case 0:
            v25 = 0;
            *(_OWORD *)v11 = *(_OWORD *)v12;
            break;
          case 1:
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v11, v12, v7);
            v25 = 1;
            break;
          case 2:
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v11, v12, v7);
            v25 = 2;
            break;
          case 3:
            v26 = *(unsigned __int8 *)(v12 + v18);
            if (v26 >= 2)
            {
              if (v18 <= 3)
                v27 = v18;
              else
                v27 = 4;
              __asm { BR              X12 }
            }
            if (v26 == 1)
            {
              v32 = *(unsigned __int8 *)(v12 + v17);
              if (v32 >= 2)
              {
                if (v17 <= 3)
                  v33 = v17;
                else
                  v33 = 4;
                __asm { BR              X12 }
              }
              if (v32 == 1)
              {
                *(_QWORD *)v11 = *(_QWORD *)v12;
                (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))((v15 + v11) & v21, (v15 + v12) & v21, v7);
                v36 = 1;
                v14 = v17;
                v37 = 1;
              }
              else
              {
                v36 = 0;
                v38 = *(_OWORD *)v12;
                *(_QWORD *)(v11 + 16) = *(_QWORD *)(v12 + 16);
                *(_OWORD *)v11 = v38;
                v37 = 1;
                v14 = v17;
              }
            }
            else
            {
              v34 = *(unsigned __int8 *)(v12 + v14);
              if (v34 >= 2)
              {
                if (v14 <= 3)
                  v35 = v14;
                else
                  v35 = 4;
                __asm { BR              X12 }
              }
              if (v34 == 1)
              {
                (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v11, v12, v7);
                v37 = 0;
                v36 = 1;
              }
              else
              {
                v36 = 0;
                v37 = 0;
                *(_OWORD *)v11 = *(_OWORD *)v12;
              }
            }
            *(_BYTE *)(v11 + v14) = v36;
            *(_BYTE *)(v11 + v18) = v37;
            v25 = 3;
            break;
          default:
            if (v19 <= 3)
              v22 = v19;
            else
              v22 = 4;
            __asm { BR              X12 }
            return result;
        }
        *(_BYTE *)(v11 + v19) = v25;
        break;
      default:
        if (v19 <= 3)
          v20 = v19;
        else
          v20 = 4;
        __asm { BR              X13 }
        return result;
    }
  }
  v39 = sub_23BFF82CC();
  v40 = v39;
  v41 = *(_QWORD *)(v39 - 8);
  v123 = v127[9];
  v42 = *(_QWORD *)(v123 - 8);
  v43 = *(unsigned int *)(v41 + 84);
  v44 = *(unsigned int *)(v42 + 84);
  v122 = v127[2];
  v45 = *(_QWORD *)(v122 - 8);
  v46 = *(unsigned int *)(v45 + 84);
  v47 = (*(_DWORD *)(v42 + 80) | *(_DWORD *)(v41 + 80) | *(_DWORD *)(v45 + 80));
  v48 = *(_DWORD *)(v42 + 80);
  v49 = *(_DWORD *)(v45 + 80);
  v50 = v19 + v47 + 1;
  v51 = (char *)((v50 + v11) & ~v47);
  v52 = (char *)((v50 + v12) & ~v47);
  if ((_DWORD)v44)
    v53 = v44 - 1;
  else
    v53 = 0;
  if (v53 <= v43)
    v54 = *(_DWORD *)(v41 + 84);
  else
    v54 = v53;
  v55 = v46 - 1;
  if (!(_DWORD)v46)
    v55 = 0;
  if (v55 <= v54)
    v56 = v54;
  else
    v56 = v55;
  if ((_DWORD)v44)
    v57 = *(_QWORD *)(v42 + 64);
  else
    v57 = *(_QWORD *)(v42 + 64) + 1;
  v58 = *(_QWORD *)(v41 + 64);
  v126 = ~v48;
  v59 = v58 + v48;
  v60 = (v57 + v49 + ((v58 + v48) & ~v48)) & ~v49;
  v124 = *(_QWORD *)(v122 - 8);
  v61 = *(_QWORD *)(v45 + 64);
  if (!(_DWORD)v46)
    ++v61;
  __n = v57;
  v118 = v61;
  v62 = v60 + v61;
  v125 = v56;
  v119 = v57 + v49;
  v120 = ~v49;
  if (v56)
  {
    v116 = v60 + v61;
    v63 = v51;
    if ((_DWORD)v43 != v56)
    {
      v71 = v39;
      v72 = (unint64_t)&v51[v59] & v126;
      if (v53 == v56)
        v73 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v42 + 48))(v72, v44, v123);
      else
        v73 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v45 + 48))((v57 + v49 + v72) & ~v49, v46, v122);
      v74 = (unint64_t)&v52[v59];
      if (v73 >= 2)
      {
        v77 = v74 & v126;
        if (v53 == v125)
          v78 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v42 + 48))(v77, v44, v123);
        else
          v78 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v124 + 48))((v119 + v77) & v120, v46, v122);
        v62 = v116;
        v40 = v71;
        if (v78 < 2)
          goto LABEL_159;
        goto LABEL_155;
      }
      v75 = v74 & v126;
      if (v53 == v125)
        v76 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v42 + 48))(v75, v44, v123);
      else
        v76 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v124 + 48))((v119 + v75) & v120, v46, v122);
      v62 = v116;
      v40 = v71;
      if (v76 >= 2)
      {
LABEL_131:
        (*(void (**)(char *, uint64_t))(v41 + 8))(v63, v40);
        v81 = (unint64_t)&v63[v59] & v126;
        if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v42 + 48))(v81, 1, v123))
          (*(void (**)(unint64_t, uint64_t))(v42 + 8))(v81, v123);
        v82 = (v119 + v81) & v120;
        v83 = v121;
        if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v124 + 48))(v82, 1, v122))
          (*(void (**)(unint64_t, uint64_t))(v124 + 8))(v82, v122);
        if (v125)
          v84 = v62;
        else
          v84 = v62 + 1;
        memcpy(v63, v52, v84);
        v85 = v125;
        goto LABEL_165;
      }
LABEL_139:
      v86 = v62;
      (*(void (**)(char *, char *, uint64_t))(v41 + 40))(v63, v52, v40);
      v87 = (void *)((unint64_t)&v63[v59] & v126);
      v88 = (void *)((unint64_t)&v52[v59] & v126);
      v89 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v42 + 48);
      v90 = v89(v87, 1, v123);
      v91 = v89(v88, 1, v123);
      if (v90)
      {
        if (!v91)
        {
          (*(void (**)(void *, void *, uint64_t))(v42 + 32))(v87, v88, v123);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v87, 0, 1, v123);
          goto LABEL_145;
        }
      }
      else
      {
        if (!v91)
        {
          (*(void (**)(void *, void *, uint64_t))(v42 + 40))(v87, v88, v123);
LABEL_145:
          v92 = (void *)(((unint64_t)v87 + v119) & v120);
          v93 = (void *)(((unint64_t)v88 + v119) & v120);
          v94 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v124 + 48);
          v95 = v94(v92, 1, v122);
          v96 = v94(v93, 1, v122);
          v62 = v86;
          if (v95)
          {
            if (!v96)
            {
              (*(void (**)(void *, void *, uint64_t))(v124 + 32))(v92, v93, v122);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v124 + 56))(v92, 0, 1, v122);
LABEL_151:
              v83 = v121;
              v85 = v125;
              goto LABEL_165;
            }
          }
          else
          {
            if (!v96)
            {
              (*(void (**)(void *, void *, uint64_t))(v124 + 40))(v92, v93, v122);
              goto LABEL_151;
            }
            (*(void (**)(void *, uint64_t))(v124 + 8))(v92, v122);
          }
          memcpy(v92, v93, v118);
          goto LABEL_151;
        }
        (*(void (**)(void *, uint64_t))(v42 + 8))(v87, v123);
      }
      memcpy(v87, v88, __n);
      goto LABEL_145;
    }
    v64 = *(uint64_t (**)(char *, uint64_t))(v41 + 48);
    v65 = v39;
    v66 = v64(v51, v43);
    v67 = ((uint64_t (*)(char *, uint64_t, uint64_t))v64)(v52, v43, v65);
    v40 = v65;
    v62 = v116;
    if (v66)
    {
      if (!v67)
        goto LABEL_159;
LABEL_155:
      if (v125)
        v97 = v62;
      else
        v97 = v62 + 1;
      memcpy(v63, v52, v97);
      v85 = v125;
      v83 = v121;
      goto LABEL_165;
    }
LABEL_130:
    if (v67)
      goto LABEL_131;
    goto LABEL_139;
  }
  v68 = 8 * v62;
  v63 = v51;
  if (!v51[v62])
    goto LABEL_121;
  v69 = (v51[v62] - 1) << v68;
  if (v62 > 3)
    v69 = 0;
  if ((_DWORD)v62)
  {
    if (v62 <= 3)
      v70 = v62;
    else
      v70 = 4;
    __asm { BR              X12 }
  }
  if (v69 == -1)
  {
LABEL_121:
    if (!v52[v62])
      goto LABEL_139;
    v79 = (v52[v62] - 1) << v68;
    if (v62 > 3)
      v79 = 0;
    if ((_DWORD)v62)
    {
      if (v62 <= 3)
        v80 = v62;
      else
        v80 = 4;
      __asm { BR              X11 }
    }
    v67 = v79 + 1;
    goto LABEL_130;
  }
  if (v52[v62] && (v52[v62] - 1) << v68 != -1)
    goto LABEL_155;
LABEL_159:
  (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v63, v52, v40);
  v98 = (void *)((unint64_t)&v63[v59] & v126);
  v99 = (const void *)((unint64_t)&v52[v59] & v126);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v42 + 48))(v99, 1, v123))
  {
    memcpy(v98, v99, __n);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v42 + 32))(v98, v99, v123);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v98, 0, 1, v123);
  }
  v100 = (void *)(((unint64_t)v98 + v119) & v120);
  v101 = (const void *)(((unint64_t)v99 + v119) & v120);
  v83 = v121;
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v124 + 48))(v101, 1, v122))
  {
    memcpy(v100, v101, v118);
    v85 = v125;
    if (v125)
      goto LABEL_165;
    goto LABEL_164;
  }
  (*(void (**)(void *, const void *, uint64_t))(v124 + 32))(v100, v101, v122);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v124 + 56))(v100, 0, 1, v122);
  v85 = v125;
  if (!v125)
LABEL_164:
    v63[v62] = 0;
LABEL_165:
  if (v85)
    v102 = v62;
  else
    v102 = v62 + 1;
  v103 = (unint64_t)&v63[v102];
  v104 = (unint64_t)&v52[v102];
  *(_BYTE *)v103 = *(_BYTE *)v104;
  v105 = v103 & 0xFFFFFFFFFFFFFFF8;
  v106 = v104 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)((v103 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_QWORD *)((v104 & 0xFFFFFFFFFFFFFFF8) + 8);
  swift_bridgeObjectRelease();
  v107 = v127[7];
  v108 = *(_QWORD *)(v107 - 8);
  v109 = *(unsigned __int8 *)(v108 + 80);
  v110 = (void *)((v109 + 16 + v105) & ~v109);
  v111 = (void *)((v109 + 16 + v106) & ~v109);
  v112 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v108 + 48);
  LODWORD(v105) = v112(v110, 1, v107);
  v113 = v112(v111, 1, v107);
  if ((_DWORD)v105)
  {
    if (!v113)
    {
      (*(void (**)(void *, void *, uint64_t))(v108 + 32))(v110, v111, v107);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v108 + 56))(v110, 0, 1, v107);
      return v83;
    }
  }
  else
  {
    if (!v113)
    {
      (*(void (**)(void *, void *, uint64_t))(v108 + 40))(v110, v111, v107);
      return v83;
    }
    (*(void (**)(void *, uint64_t))(v108 + 8))(v110, v107);
  }
  if (*(_DWORD *)(v108 + 84))
    v114 = *(_QWORD *)(v108 + 64);
  else
    v114 = *(_QWORD *)(v108 + 64) + 1;
  memcpy(v110, v111, v114);
  return v83;
}

uint64_t sub_23BFA700C(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  char v46;
  int v47;
  unsigned int v48;
  int v49;
  int v50;
  unint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v6 = *(_QWORD *)(a3[8] - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = 16;
  if (v7 > 0x10)
    v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = ((v9 + 8) & ~v9) + v7;
  if (v10 <= 0x18)
    v10 = 24;
  v11 = v10 + 1;
  if (v11 <= v8 + 1)
    v11 = v8 + 1;
  if (v11 + 1 > v8)
    v12 = v11 + 1;
  else
    v12 = v8;
  v13 = sub_23BFF82CC();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned int *)(v14 + 84);
  v16 = a3[9];
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(unsigned int *)(v17 + 84);
  if ((_DWORD)v18)
    v19 = v18 - 1;
  else
    v19 = 0;
  if (v19 <= v15)
    v20 = *(_DWORD *)(v14 + 84);
  else
    v20 = v19;
  v21 = a3[2];
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(unsigned int *)(v22 + 84);
  v24 = v23 - 1;
  if (!(_DWORD)v23)
    v24 = 0;
  if (v24 <= v20)
    v25 = v20;
  else
    v25 = v24;
  if (v25)
    v26 = v25 - 1;
  else
    v26 = 0;
  v27 = a3[7];
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(unsigned int *)(v28 + 84);
  v30 = v29 - 1;
  if (!(_DWORD)v29)
    v30 = 0;
  if (v26 <= v30)
    v31 = v30;
  else
    v31 = v26;
  if (v31 <= 0x7FFFFFFF)
    v32 = 0x7FFFFFFF;
  else
    v32 = v31;
  v33 = *(_QWORD *)(v17 + 64);
  if (!(_DWORD)v18)
    ++v33;
  if ((_DWORD)v23)
    v34 = v25 == 0;
  else
    v34 = (v25 == 0) + 1;
  if ((_DWORD)v29)
    v35 = *(_QWORD *)(v28 + 64);
  else
    v35 = *(_QWORD *)(v28 + 64) + 1;
  if (!a2)
    return 0;
  v58 = v16;
  v36 = v9 | 7;
  v37 = (*(_DWORD *)(v17 + 80) | *(_DWORD *)(v14 + 80) | *(_DWORD *)(v22 + 80));
  v38 = *(_DWORD *)(v17 + 80);
  v39 = *(_DWORD *)(v22 + 80);
  v40 = v12 + v37 + 1;
  v41 = *(_QWORD *)(v14 + 64) + v38;
  v57 = v33 + v39;
  v42 = v34 + *(_QWORD *)(v22 + 64) + ((v33 + v39 + (v41 & ~v38)) & ~v39);
  v43 = *(unsigned __int8 *)(v28 + 80);
  v59 = v43 + 16;
  v44 = a2 - v32;
  if (a2 <= v32)
    goto LABEL_59;
  v45 = v35 + ((v59 + ((v42 + ((v40 + ((v9 + 16) & ~v36)) & ~v37)) & 0xFFFFFFFFFFFFFFF8)) & ~v43);
  v46 = 8 * v45;
  if (v45 <= 3)
  {
    v48 = ((v44 + ~(-1 << v46)) >> v46) + 1;
    if (HIWORD(v48))
    {
      v47 = *(_DWORD *)(a1 + v45);
      if (!v47)
        goto LABEL_59;
      goto LABEL_50;
    }
    if (v48 > 0xFF)
    {
      v47 = *(unsigned __int16 *)(a1 + v45);
      if (!*(_WORD *)(a1 + v45))
        goto LABEL_59;
      goto LABEL_50;
    }
    if (v48 < 2)
    {
LABEL_59:
      if ((v31 & 0x80000000) == 0)
      {
        v51 = *(_QWORD *)(a1 + 8);
        if (v51 >= 0xFFFFFFFF)
          LODWORD(v51) = -1;
        return (v51 + 1);
      }
      v52 = (v40 + ((a1 + v36 + 16) & ~v36)) & ~v37;
      if (v26 == v32)
      {
        if (v25 >= 2)
        {
          if ((_DWORD)v15 == v25)
          {
            v53 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v52, v15, v13);
          }
          else
          {
            v55 = (v41 + v52) & ~v38;
            if (v19 == v25)
              v56 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v55, v18, v58);
            else
              v56 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))((v57 + v55) & ~v39, v23, v21);
            if (v56 >= 2)
              v53 = v56 - 1;
            else
              v53 = 0;
          }
          goto LABEL_76;
        }
      }
      else if (v29 >= 2)
      {
        v53 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v28 + 48))((v59 + ((v42 + v52) & 0xFFFFFFFFFFFFFFF8)) & ~v43, v29, v27);
LABEL_76:
        if (v53 >= 2)
          return v53 - 1;
        else
          return 0;
      }
      return 0;
    }
  }
  v47 = *(unsigned __int8 *)(a1 + v45);
  if (!*(_BYTE *)(a1 + v45))
    goto LABEL_59;
LABEL_50:
  v49 = (v47 - 1) << v46;
  if (v45 > 3)
    v49 = 0;
  if ((_DWORD)v45)
  {
    if (v45 <= 3)
      v50 = v45;
    else
      v50 = 4;
    __asm { BR              X11 }
  }
  return v32 + v49 + 1;
}

void sub_23BFA73C4(_BYTE *a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  size_t v36;
  BOOL v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  int v42;
  uint64_t v43;

  v6 = *(_QWORD *)(a4[8] - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = 16;
  if (v7 > 0x10)
    v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = ((v9 + 8) & ~v9) + v7;
  if (v10 <= 0x18)
    v10 = 24;
  v11 = v10 + 1;
  if (v11 <= v8 + 1)
    v11 = v8 + 1;
  if (v11 + 1 > v8)
    v12 = v11 + 1;
  else
    v12 = v8;
  v13 = sub_23BFF82CC();
  v14 = 0;
  v15 = *(_QWORD *)(v13 - 8);
  v16 = *(_QWORD *)(a4[9] - 8);
  v17 = *(_DWORD *)(v16 + 84);
  if (v17)
    v18 = v17 - 1;
  else
    v18 = 0;
  if (v18 <= *(_DWORD *)(v15 + 84))
    v19 = *(_DWORD *)(v15 + 84);
  else
    v19 = v18;
  v20 = *(_QWORD *)(a4[2] - 8);
  v21 = *(_DWORD *)(v20 + 84);
  if (v21)
    v22 = v21 - 1;
  else
    v22 = 0;
  if (v22 <= v19)
    v23 = v19;
  else
    v23 = v22;
  if (v23)
    v24 = v23 - 1;
  else
    v24 = 0;
  v25 = *(_QWORD *)(a4[7] - 8);
  v26 = *(_DWORD *)(v25 + 84);
  v27 = v26 - 1;
  if (!v26)
    v27 = 0;
  if (v24 <= v27)
    v28 = v27;
  else
    v28 = v24;
  if (v28 <= 0x7FFFFFFF)
    v29 = 0x7FFFFFFF;
  else
    v29 = v28;
  if (v17)
    v30 = *(_QWORD *)(v16 + 64);
  else
    v30 = *(_QWORD *)(v16 + 64) + 1;
  if (v21)
    v31 = *(_QWORD *)(v20 + 64);
  else
    v31 = *(_QWORD *)(v20 + 64) + 1;
  v32 = (*(_QWORD *)(v15 + 64) + *(_DWORD *)(v16 + 80)) & ~(unint64_t)*(_DWORD *)(v16 + 80);
  v43 = v30 + *(_DWORD *)(v20 + 80);
  if (v23)
    v34 = ((v43 + v32) & ~(unint64_t)*(_DWORD *)(v20 + 80)) + v31;
  else
    v34 = ((v43 + v32) & ~(unint64_t)*(_DWORD *)(v20 + 80)) + v31 + 1;
  v35 = *(_QWORD *)(v25 + 64);
  if (!v26)
    ++v35;
  v33 = *(_DWORD *)(v16 + 80) | *(_DWORD *)(v15 + 80);
  v36 = v35
      + ((*(unsigned __int8 *)(v25 + 80)
        + 16
        + ((v34
          + ((v12 + (v33 | *(_DWORD *)(v20 + 80)) + 1 + ((v9 + 16) & ~(v9 | 7))) & ~(unint64_t)(v33 | *(_DWORD *)(v20 + 80)))) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80));
  v37 = a3 >= v29;
  v38 = a3 - v29;
  if (v38 != 0 && v37)
  {
    if (v36 <= 3)
    {
      v39 = ((v38 + ~(-1 << (8 * v36))) >> (8 * v36)) + 1;
      if (HIWORD(v39))
      {
        v14 = 4u;
      }
      else
      {
        v14 = v39 > 1;
        if (v39 >= 0x100)
          v14 = 2;
      }
    }
    else
    {
      v14 = 1u;
    }
  }
  v40 = v14;
  if (v29 < a2)
  {
    v41 = ~v29 + a2;
    if (v36 < 4)
    {
      if ((_DWORD)v36)
      {
        v42 = v41 & ~(-1 << (8 * v36));
        bzero(a1, v36);
        if ((_DWORD)v36 == 3)
        {
          *(_WORD *)a1 = v42;
          a1[2] = BYTE2(v42);
        }
        else if ((_DWORD)v36 == 2)
        {
          *(_WORD *)a1 = v42;
        }
        else
        {
          *a1 = v42;
        }
      }
    }
    else
    {
      bzero(a1, v36);
      *(_DWORD *)a1 = v41;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X7 }
}

void sub_23BFA77DC()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
}

void sub_23BFA77E4()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
}

void sub_23BFA78C8()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_23BFA78D0()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_23BFA78E0()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

uint64_t sub_23BFA7904(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_23BFA7950 + 4 * byte_23C0057F9[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_23BFA7984 + 4 * byte_23C0057F4[v4]))();
}

uint64_t sub_23BFA7984(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BFA798C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BFA7994);
  return result;
}

uint64_t sub_23BFA79A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BFA79A8);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_23BFA79AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BFA79B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void sub_23BFA79C0()
{
  JUMPOUT(0x242615198);
}

void sub_23BFA79D0()
{
  JUMPOUT(0x242615198);
}

void sub_23BFA79E0()
{
  JUMPOUT(0x242615198);
}

uint64_t sub_23BFA79F0()
{
  return 6;
}

BOOL static DynamicSectionDensity.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_23BFA7A0C()
{
  sub_23BFA820C();
  return sub_23BFF9A30();
}

uint64_t sub_23BFA7A34()
{
  sub_23BFA820C();
  return sub_23BFF9A3C();
}

uint64_t sub_23BFA7A5C()
{
  sub_23BFA81C8();
  return sub_23BFF9A30();
}

uint64_t sub_23BFA7A84()
{
  sub_23BFA81C8();
  return sub_23BFF9A3C();
}

uint64_t sub_23BFA7AAC()
{
  sub_23BFA8184();
  return sub_23BFF9A30();
}

uint64_t sub_23BFA7AD4()
{
  sub_23BFA8184();
  return sub_23BFF9A3C();
}

uint64_t sub_23BFA7AFC()
{
  unsigned __int8 *v0;

  return *v0 + 65;
}

uint64_t sub_23BFA7B0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BFA8FD8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BFA7B30()
{
  sub_23BFA8074();
  return sub_23BFF9A30();
}

uint64_t sub_23BFA7B58()
{
  sub_23BFA8074();
  return sub_23BFF9A3C();
}

uint64_t sub_23BFA7B80()
{
  sub_23BFA8140();
  return sub_23BFF9A30();
}

uint64_t sub_23BFA7BA8()
{
  sub_23BFA8140();
  return sub_23BFF9A3C();
}

uint64_t sub_23BFA7BD0()
{
  sub_23BFA80FC();
  return sub_23BFF9A30();
}

uint64_t sub_23BFA7BF8()
{
  sub_23BFA80FC();
  return sub_23BFF9A3C();
}

uint64_t sub_23BFA7C20()
{
  sub_23BFA80B8();
  return sub_23BFF9A30();
}

uint64_t sub_23BFA7C48()
{
  sub_23BFA80B8();
  return sub_23BFF9A3C();
}

void static DynamicSectionDensity.default.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void DynamicSectionDensity.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[17];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE7B28);
  v15[13] = *(_QWORD *)(v3 - 8);
  v15[14] = v3;
  MEMORY[0x24BDAC7A8](v3);
  v15[12] = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE7B30);
  v15[10] = *(_QWORD *)(v5 - 8);
  v15[11] = v5;
  MEMORY[0x24BDAC7A8](v5);
  v15[9] = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE7B38);
  v15[7] = *(_QWORD *)(v7 - 8);
  v15[8] = v7;
  MEMORY[0x24BDAC7A8](v7);
  v15[6] = (char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE7B40);
  v15[4] = *(_QWORD *)(v9 - 8);
  v15[5] = v9;
  MEMORY[0x24BDAC7A8](v9);
  v15[3] = (char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE7B48);
  v15[1] = *(_QWORD *)(v11 - 8);
  v15[2] = v11;
  MEMORY[0x24BDAC7A8](v11);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE7B50);
  MEMORY[0x24BDAC7A8](v12);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE7B58);
  v15[15] = *(_QWORD *)(v13 - 8);
  v15[16] = v13;
  MEMORY[0x24BDAC7A8](v13);
  v14 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BFA8074();
  sub_23BFF9A18();
  __asm { BR              X9 }
}

uint64_t sub_23BFA7EB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v4 - 70) = 0;
  sub_23BFA820C();
  v5 = *(_QWORD *)(v4 - 96);
  sub_23BFF98EC();
  (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 104) + 8))(v1, v5);
}

unint64_t sub_23BFA8074()
{
  unint64_t result;

  result = qword_256AE7B60;
  if (!qword_256AE7B60)
  {
    result = MEMORY[0x242615198](&unk_23C00609C, &type metadata for DynamicSectionDensity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE7B60);
  }
  return result;
}

unint64_t sub_23BFA80B8()
{
  unint64_t result;

  result = qword_256AE7B68;
  if (!qword_256AE7B68)
  {
    result = MEMORY[0x242615198](&unk_23C00604C, &type metadata for DynamicSectionDensity.FCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE7B68);
  }
  return result;
}

unint64_t sub_23BFA80FC()
{
  unint64_t result;

  result = qword_256AE7B70;
  if (!qword_256AE7B70)
  {
    result = MEMORY[0x242615198](&unk_23C005FFC, &type metadata for DynamicSectionDensity.ECodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE7B70);
  }
  return result;
}

unint64_t sub_23BFA8140()
{
  unint64_t result;

  result = qword_256AE7B78;
  if (!qword_256AE7B78)
  {
    result = MEMORY[0x242615198](&unk_23C005FAC, &type metadata for DynamicSectionDensity.DCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE7B78);
  }
  return result;
}

unint64_t sub_23BFA8184()
{
  unint64_t result;

  result = qword_256AE7B80;
  if (!qword_256AE7B80)
  {
    result = MEMORY[0x242615198](&unk_23C005F5C, &type metadata for DynamicSectionDensity.CCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE7B80);
  }
  return result;
}

unint64_t sub_23BFA81C8()
{
  unint64_t result;

  result = qword_256AE7B88;
  if (!qword_256AE7B88)
  {
    result = MEMORY[0x242615198](&unk_23C005F0C, &type metadata for DynamicSectionDensity.BCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE7B88);
  }
  return result;
}

unint64_t sub_23BFA820C()
{
  unint64_t result;

  result = qword_256AE7B90;
  if (!qword_256AE7B90)
  {
    result = MEMORY[0x242615198](&unk_23C005EBC, &type metadata for DynamicSectionDensity.ACodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE7B90);
  }
  return result;
}

uint64_t DynamicSectionDensity.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD v29[4];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;

  v46 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE7B98);
  v31 = *(_QWORD *)(v3 - 8);
  v32 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v45 = (char *)v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE7BA0);
  v37 = *(_QWORD *)(v44 - 8);
  MEMORY[0x24BDAC7A8](v44);
  v43 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE7BA8);
  v38 = *(_QWORD *)(v6 - 8);
  v39 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v42 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE7BB0);
  v35 = *(_QWORD *)(v8 - 8);
  v36 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v41 = (char *)v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE7BB8);
  v33 = *(_QWORD *)(v10 - 8);
  v34 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v40 = (char *)v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE7BC0);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE7BC8);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = a1[3];
  v47 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v20);
  sub_23BFA8074();
  v21 = v48;
  sub_23BFF9A0C();
  if (!v21)
  {
    v29[3] = v15;
    v29[1] = v13;
    v29[2] = v12;
    v30 = v17;
    v48 = v16;
    v22 = v19;
    v23 = sub_23BFF98D4();
    if (*(_QWORD *)(v23 + 16) == 1)
    {
      v29[0] = v23;
      __asm { BR              X9 }
    }
    v24 = sub_23BFF9784();
    swift_allocError();
    v26 = v25;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3978);
    *v26 = &type metadata for DynamicSectionDensity;
    v27 = v48;
    sub_23BFF9874();
    sub_23BFF9778();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v26, *MEMORY[0x24BEE26D0], v24);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v22, v27);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
}

void sub_23BFA8638()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  v6 = v0;
  *(_BYTE *)(v5 - 69) = 1;
  sub_23BFA81C8();
  v7 = *(_QWORD *)(v5 - 160);
  v8 = *(_QWORD *)(v5 - 96);
  sub_23BFF9868();
  if (!v2)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 216) + 8))(v7, *(_QWORD *)(v5 - 208));
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v8);
    *v3 = v6;
    JUMPOUT(0x23BFA8610);
  }
  swift_bridgeObjectRelease();
  JUMPOUT(0x23BFA8608);
}

uint64_t sub_23BFA8884@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return DynamicSectionDensity.init(from:)(a1, a2);
}

void sub_23BFA8898(_QWORD *a1)
{
  DynamicSectionDensity.encode(to:)(a1);
}

uint64_t DynamicSectionDensity.hash(into:)()
{
  return sub_23BFF99DC();
}

uint64_t DynamicSectionDensity.hashValue.getter()
{
  sub_23BFF99D0();
  sub_23BFF99DC();
  return sub_23BFF9A00();
}

unint64_t sub_23BFA8918(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_23BFA894C();
  a1[2] = sub_23BFA8990();
  result = sub_23BFA89D4();
  a1[3] = result;
  return result;
}

unint64_t sub_23BFA894C()
{
  unint64_t result;

  result = qword_256AE7BD0;
  if (!qword_256AE7BD0)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for DynamicSectionDensity, &type metadata for DynamicSectionDensity);
    atomic_store(result, (unint64_t *)&qword_256AE7BD0);
  }
  return result;
}

unint64_t sub_23BFA8990()
{
  unint64_t result;

  result = qword_256AE7BD8;
  if (!qword_256AE7BD8)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for DynamicSectionDensity, &type metadata for DynamicSectionDensity);
    atomic_store(result, (unint64_t *)&qword_256AE7BD8);
  }
  return result;
}

unint64_t sub_23BFA89D4()
{
  unint64_t result;

  result = qword_256AE7BE0;
  if (!qword_256AE7BE0)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for DynamicSectionDensity, &type metadata for DynamicSectionDensity);
    atomic_store(result, (unint64_t *)&qword_256AE7BE0);
  }
  return result;
}

unint64_t sub_23BFA8A1C()
{
  unint64_t result;

  result = qword_256AE7BE8;
  if (!qword_256AE7BE8)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for DynamicSectionDensity, &type metadata for DynamicSectionDensity);
    atomic_store(result, (unint64_t *)&qword_256AE7BE8);
  }
  return result;
}

ValueMetadata *type metadata accessor for DynamicSectionDensity()
{
  return &type metadata for DynamicSectionDensity;
}

uint64_t _s15FitnessCanvasUI21DynamicSectionDensityOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_23BFA8AC0 + 4 * byte_23C005AC1[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_23BFA8AF4 + 4 * byte_23C005ABC[v4]))();
}

uint64_t sub_23BFA8AF4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BFA8AFC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BFA8B04);
  return result;
}

uint64_t sub_23BFA8B10(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BFA8B18);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_23BFA8B1C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BFA8B24(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DynamicSectionDensity.CodingKeys()
{
  return &type metadata for DynamicSectionDensity.CodingKeys;
}

ValueMetadata *type metadata accessor for DynamicSectionDensity.ACodingKeys()
{
  return &type metadata for DynamicSectionDensity.ACodingKeys;
}

ValueMetadata *type metadata accessor for DynamicSectionDensity.BCodingKeys()
{
  return &type metadata for DynamicSectionDensity.BCodingKeys;
}

ValueMetadata *type metadata accessor for DynamicSectionDensity.CCodingKeys()
{
  return &type metadata for DynamicSectionDensity.CCodingKeys;
}

ValueMetadata *type metadata accessor for DynamicSectionDensity.DCodingKeys()
{
  return &type metadata for DynamicSectionDensity.DCodingKeys;
}

ValueMetadata *type metadata accessor for DynamicSectionDensity.ECodingKeys()
{
  return &type metadata for DynamicSectionDensity.ECodingKeys;
}

ValueMetadata *type metadata accessor for DynamicSectionDensity.FCodingKeys()
{
  return &type metadata for DynamicSectionDensity.FCodingKeys;
}

unint64_t sub_23BFA8BA4()
{
  unint64_t result;

  result = qword_256AE7BF0;
  if (!qword_256AE7BF0)
  {
    result = MEMORY[0x242615198](&unk_23C005E94, &type metadata for DynamicSectionDensity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE7BF0);
  }
  return result;
}

unint64_t sub_23BFA8BEC()
{
  unint64_t result;

  result = qword_256AE7BF8;
  if (!qword_256AE7BF8)
  {
    result = MEMORY[0x242615198](&unk_23C005DB4, &type metadata for DynamicSectionDensity.ACodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE7BF8);
  }
  return result;
}

unint64_t sub_23BFA8C34()
{
  unint64_t result;

  result = qword_256AE7C00;
  if (!qword_256AE7C00)
  {
    result = MEMORY[0x242615198](&unk_23C005DDC, &type metadata for DynamicSectionDensity.ACodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE7C00);
  }
  return result;
}

unint64_t sub_23BFA8C7C()
{
  unint64_t result;

  result = qword_256AE7C08;
  if (!qword_256AE7C08)
  {
    result = MEMORY[0x242615198](&unk_23C005D64, &type metadata for DynamicSectionDensity.BCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE7C08);
  }
  return result;
}

unint64_t sub_23BFA8CC4()
{
  unint64_t result;

  result = qword_256AE7C10;
  if (!qword_256AE7C10)
  {
    result = MEMORY[0x242615198](&unk_23C005D8C, &type metadata for DynamicSectionDensity.BCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE7C10);
  }
  return result;
}

unint64_t sub_23BFA8D0C()
{
  unint64_t result;

  result = qword_256AE7C18;
  if (!qword_256AE7C18)
  {
    result = MEMORY[0x242615198](&unk_23C005D14, &type metadata for DynamicSectionDensity.CCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE7C18);
  }
  return result;
}

unint64_t sub_23BFA8D54()
{
  unint64_t result;

  result = qword_256AE7C20;
  if (!qword_256AE7C20)
  {
    result = MEMORY[0x242615198](&unk_23C005D3C, &type metadata for DynamicSectionDensity.CCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE7C20);
  }
  return result;
}

unint64_t sub_23BFA8D9C()
{
  unint64_t result;

  result = qword_256AE7C28;
  if (!qword_256AE7C28)
  {
    result = MEMORY[0x242615198](&unk_23C005CC4, &type metadata for DynamicSectionDensity.DCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE7C28);
  }
  return result;
}

unint64_t sub_23BFA8DE4()
{
  unint64_t result;

  result = qword_256AE7C30;
  if (!qword_256AE7C30)
  {
    result = MEMORY[0x242615198](&unk_23C005CEC, &type metadata for DynamicSectionDensity.DCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE7C30);
  }
  return result;
}

unint64_t sub_23BFA8E2C()
{
  unint64_t result;

  result = qword_256AE7C38;
  if (!qword_256AE7C38)
  {
    result = MEMORY[0x242615198](&unk_23C005C74, &type metadata for DynamicSectionDensity.ECodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE7C38);
  }
  return result;
}

unint64_t sub_23BFA8E74()
{
  unint64_t result;

  result = qword_256AE7C40;
  if (!qword_256AE7C40)
  {
    result = MEMORY[0x242615198](&unk_23C005C9C, &type metadata for DynamicSectionDensity.ECodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE7C40);
  }
  return result;
}

unint64_t sub_23BFA8EBC()
{
  unint64_t result;

  result = qword_256AE7C48;
  if (!qword_256AE7C48)
  {
    result = MEMORY[0x242615198](&unk_23C005C24, &type metadata for DynamicSectionDensity.FCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE7C48);
  }
  return result;
}

unint64_t sub_23BFA8F04()
{
  unint64_t result;

  result = qword_256AE7C50;
  if (!qword_256AE7C50)
  {
    result = MEMORY[0x242615198](&unk_23C005C4C, &type metadata for DynamicSectionDensity.FCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE7C50);
  }
  return result;
}

unint64_t sub_23BFA8F4C()
{
  unint64_t result;

  result = qword_256AE7C58;
  if (!qword_256AE7C58)
  {
    result = MEMORY[0x242615198](&unk_23C005E04, &type metadata for DynamicSectionDensity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE7C58);
  }
  return result;
}

unint64_t sub_23BFA8F94()
{
  unint64_t result;

  result = qword_256AE7C60;
  if (!qword_256AE7C60)
  {
    result = MEMORY[0x242615198](&unk_23C005E2C, &type metadata for DynamicSectionDensity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE7C60);
  }
  return result;
}

uint64_t sub_23BFA8FD8(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 65 && a2 == 0xE100000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 66 && a2 == 0xE100000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 67 && a2 == 0xE100000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 68 && a2 == 0xE100000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 69 && a2 == 0xE100000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 70 && a2 == 0xE100000000000000)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v5 = sub_23BFF9964();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

BOOL static FullWidthStageViewStyle.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_23BFA91C8()
{
  sub_23BFA97A8();
  return sub_23BFF9A30();
}

uint64_t sub_23BFA91F0()
{
  sub_23BFA97A8();
  return sub_23BFF9A3C();
}

uint64_t sub_23BFA9218()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23BFA9248 + 4 * byte_23C006110[*v0]))(0x676E696461656CLL, 0xE700000000000000);
}

uint64_t sub_23BFA9248()
{
  return 0x7265746E6563;
}

uint64_t sub_23BFA925C()
{
  return 0x69566D6F74737563;
}

uint64_t sub_23BFA9278()
{
  return 0x72657474616C70;
}

uint64_t sub_23BFA928C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BFAA1C8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BFA92B0()
{
  sub_23BFA96DC();
  return sub_23BFF9A30();
}

uint64_t sub_23BFA92D8()
{
  sub_23BFA96DC();
  return sub_23BFF9A3C();
}

uint64_t sub_23BFA9300()
{
  sub_23BFA9764();
  return sub_23BFF9A30();
}

uint64_t sub_23BFA9328()
{
  sub_23BFA9764();
  return sub_23BFF9A3C();
}

uint64_t sub_23BFA9350()
{
  sub_23BFA97EC();
  return sub_23BFF9A30();
}

uint64_t sub_23BFA9378()
{
  sub_23BFA97EC();
  return sub_23BFF9A3C();
}

uint64_t sub_23BFA93A0()
{
  sub_23BFA9720();
  return sub_23BFF9A30();
}

uint64_t sub_23BFA93C8()
{
  sub_23BFA9720();
  return sub_23BFF9A3C();
}

void FullWidthStageViewStyle.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE7C68);
  v19 = *(_QWORD *)(v4 - 8);
  v20 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v18 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE7C70);
  v16 = *(_QWORD *)(v6 - 8);
  v17 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v15 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE7C78);
  v13 = *(_QWORD *)(v8 - 8);
  v14 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE7C80);
  MEMORY[0x24BDAC7A8](v12);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE7C88);
  v21 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v10 = *v2;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BFA96DC();
  sub_23BFF9A18();
  __asm { BR              X9 }
}

uint64_t sub_23BFA95A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v4 - 68) = 0;
  sub_23BFA97EC();
  sub_23BFF98EC();
  (*(void (**)(uint64_t, _QWORD))(v3 + 8))(v2, *(_QWORD *)(v4 - 168));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 96) + 8))(v1, v0);
}

unint64_t sub_23BFA96DC()
{
  unint64_t result;

  result = qword_256AE7C90;
  if (!qword_256AE7C90)
  {
    result = MEMORY[0x242615198](&unk_23C0065DC, &type metadata for FullWidthStageViewStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE7C90);
  }
  return result;
}

unint64_t sub_23BFA9720()
{
  unint64_t result;

  result = qword_256AE7C98;
  if (!qword_256AE7C98)
  {
    result = MEMORY[0x242615198](&unk_23C00658C, &type metadata for FullWidthStageViewStyle.PlatterCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE7C98);
  }
  return result;
}

unint64_t sub_23BFA9764()
{
  unint64_t result;

  result = qword_256AE7CA0;
  if (!qword_256AE7CA0)
  {
    result = MEMORY[0x242615198](&unk_23C00653C, &type metadata for FullWidthStageViewStyle.CustomViewCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE7CA0);
  }
  return result;
}

unint64_t sub_23BFA97A8()
{
  unint64_t result;

  result = qword_256AE7CA8;
  if (!qword_256AE7CA8)
  {
    result = MEMORY[0x242615198](&unk_23C0064EC, &type metadata for FullWidthStageViewStyle.CenterCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE7CA8);
  }
  return result;
}

unint64_t sub_23BFA97EC()
{
  unint64_t result;

  result = qword_256AE7CB0;
  if (!qword_256AE7CB0)
  {
    result = MEMORY[0x242615198](&unk_23C00649C, &type metadata for FullWidthStageViewStyle.LeadingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE7CB0);
  }
  return result;
}

uint64_t FullWidthStageViewStyle.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD v21[7];
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;

  v23 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE7CB8);
  v21[5] = *(_QWORD *)(v3 - 8);
  v21[6] = v3;
  MEMORY[0x24BDAC7A8](v3);
  v26 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE7CC0);
  v21[4] = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE7CC8);
  v21[2] = *(_QWORD *)(v6 - 8);
  v21[3] = v6;
  MEMORY[0x24BDAC7A8](v6);
  v24 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE7CD0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE7CD8);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v27 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v14);
  sub_23BFA96DC();
  v15 = v28;
  sub_23BFF9A0C();
  if (!v15)
  {
    v21[0] = v9;
    v21[1] = v8;
    v28 = v11;
    v16 = sub_23BFF98D4();
    if (*(_QWORD *)(v16 + 16) == 1)
      __asm { BR              X9 }
    v17 = sub_23BFF9784();
    swift_allocError();
    v19 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3978);
    *v19 = &type metadata for FullWidthStageViewStyle;
    sub_23BFF9874();
    sub_23BFF9778();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v19, *MEMORY[0x24BEE26D0], v17);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v13, v10);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
}

uint64_t sub_23BFA9CB4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FullWidthStageViewStyle.init(from:)(a1, a2);
}

void sub_23BFA9CC8(_QWORD *a1)
{
  FullWidthStageViewStyle.encode(to:)(a1);
}

uint64_t FullWidthStageViewStyle.hash(into:)()
{
  return sub_23BFF99DC();
}

uint64_t FullWidthStageViewStyle.hashValue.getter()
{
  sub_23BFF99D0();
  sub_23BFF99DC();
  return sub_23BFF9A00();
}

unint64_t sub_23BFA9D4C()
{
  unint64_t result;

  result = qword_256AE7CE0;
  if (!qword_256AE7CE0)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for FullWidthStageViewStyle, &type metadata for FullWidthStageViewStyle);
    atomic_store(result, (unint64_t *)&qword_256AE7CE0);
  }
  return result;
}

ValueMetadata *type metadata accessor for FullWidthStageViewStyle()
{
  return &type metadata for FullWidthStageViewStyle;
}

uint64_t _s15FitnessCanvasUI23FullWidthStageViewStyleOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23BFA9DF0 + 4 * byte_23C006121[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23BFA9E24 + 4 * byte_23C00611C[v4]))();
}

uint64_t sub_23BFA9E24(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BFA9E2C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BFA9E34);
  return result;
}

uint64_t sub_23BFA9E40(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BFA9E48);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23BFA9E4C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BFA9E54(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FullWidthStageViewStyle.CodingKeys()
{
  return &type metadata for FullWidthStageViewStyle.CodingKeys;
}

ValueMetadata *type metadata accessor for FullWidthStageViewStyle.LeadingCodingKeys()
{
  return &type metadata for FullWidthStageViewStyle.LeadingCodingKeys;
}

ValueMetadata *type metadata accessor for FullWidthStageViewStyle.CenterCodingKeys()
{
  return &type metadata for FullWidthStageViewStyle.CenterCodingKeys;
}

ValueMetadata *type metadata accessor for FullWidthStageViewStyle.CustomViewCodingKeys()
{
  return &type metadata for FullWidthStageViewStyle.CustomViewCodingKeys;
}

ValueMetadata *type metadata accessor for FullWidthStageViewStyle.PlatterCodingKeys()
{
  return &type metadata for FullWidthStageViewStyle.PlatterCodingKeys;
}

unint64_t sub_23BFA9EB4()
{
  unint64_t result;

  result = qword_256AE7CE8;
  if (!qword_256AE7CE8)
  {
    result = MEMORY[0x242615198](&unk_23C006474, &type metadata for FullWidthStageViewStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE7CE8);
  }
  return result;
}

unint64_t sub_23BFA9EFC()
{
  unint64_t result;

  result = qword_256AE7CF0;
  if (!qword_256AE7CF0)
  {
    result = MEMORY[0x242615198](&unk_23C006394, &type metadata for FullWidthStageViewStyle.LeadingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE7CF0);
  }
  return result;
}

unint64_t sub_23BFA9F44()
{
  unint64_t result;

  result = qword_256AE7CF8;
  if (!qword_256AE7CF8)
  {
    result = MEMORY[0x242615198](&unk_23C0063BC, &type metadata for FullWidthStageViewStyle.LeadingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE7CF8);
  }
  return result;
}

unint64_t sub_23BFA9F8C()
{
  unint64_t result;

  result = qword_256AE7D00;
  if (!qword_256AE7D00)
  {
    result = MEMORY[0x242615198](&unk_23C006344, &type metadata for FullWidthStageViewStyle.CenterCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE7D00);
  }
  return result;
}

unint64_t sub_23BFA9FD4()
{
  unint64_t result;

  result = qword_256AE7D08;
  if (!qword_256AE7D08)
  {
    result = MEMORY[0x242615198](&unk_23C00636C, &type metadata for FullWidthStageViewStyle.CenterCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE7D08);
  }
  return result;
}

unint64_t sub_23BFAA01C()
{
  unint64_t result;

  result = qword_256AE7D10;
  if (!qword_256AE7D10)
  {
    result = MEMORY[0x242615198](&unk_23C0062F4, &type metadata for FullWidthStageViewStyle.CustomViewCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE7D10);
  }
  return result;
}

unint64_t sub_23BFAA064()
{
  unint64_t result;

  result = qword_256AE7D18;
  if (!qword_256AE7D18)
  {
    result = MEMORY[0x242615198](&unk_23C00631C, &type metadata for FullWidthStageViewStyle.CustomViewCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE7D18);
  }
  return result;
}

unint64_t sub_23BFAA0AC()
{
  unint64_t result;

  result = qword_256AE7D20;
  if (!qword_256AE7D20)
  {
    result = MEMORY[0x242615198](&unk_23C0062A4, &type metadata for FullWidthStageViewStyle.PlatterCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE7D20);
  }
  return result;
}

unint64_t sub_23BFAA0F4()
{
  unint64_t result;

  result = qword_256AE7D28;
  if (!qword_256AE7D28)
  {
    result = MEMORY[0x242615198](&unk_23C0062CC, &type metadata for FullWidthStageViewStyle.PlatterCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE7D28);
  }
  return result;
}

unint64_t sub_23BFAA13C()
{
  unint64_t result;

  result = qword_256AE7D30;
  if (!qword_256AE7D30)
  {
    result = MEMORY[0x242615198](&unk_23C0063E4, &type metadata for FullWidthStageViewStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE7D30);
  }
  return result;
}

unint64_t sub_23BFAA184()
{
  unint64_t result;

  result = qword_256AE7D38[0];
  if (!qword_256AE7D38[0])
  {
    result = MEMORY[0x242615198](&unk_23C00640C, &type metadata for FullWidthStageViewStyle.CodingKeys);
    atomic_store(result, qword_256AE7D38);
  }
  return result;
}

uint64_t sub_23BFAA1C8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x676E696461656CLL && a2 == 0xE700000000000000;
  if (v2 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7265746E6563 && a2 == 0xE600000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x69566D6F74737563 && a2 == 0xEA00000000007765 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x72657474616C70 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_23BFF9964();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

void static CanvasSectionLayout.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t TupleTypeMetadata2;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void (*v23)(char *, uint64_t, uint64_t);
  char *v24;
  _QWORD v25[10];
  uint64_t v26;
  uint64_t v27;

  v26 = a1;
  v27 = a2;
  v6 = type metadata accessor for CanvasGridAxis(0, a3, a4, a4);
  v25[4] = *(_QWORD *)(v6 - 8);
  v25[5] = v6;
  v7 = MEMORY[0x24BDAC7A8](v6);
  v25[3] = (char *)v25 - v8;
  v25[9] = *(_QWORD *)(a3 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v25[2] = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v25[1] = (char *)v25 - v11;
  v25[7] = a4;
  v13 = type metadata accessor for CanvasSectionLayout(0, a3, a4, v12);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v25[6] = (char *)v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v18 = MEMORY[0x24BDAC7A8](v17);
  MEMORY[0x24BDAC7A8](v18);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v20 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v22 = (char *)v25 + *(int *)(v20 + 48) - v21;
  v25[8] = v14;
  v23 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v23((char *)v25 - v21, v26, v13);
  v23(v22, v27, v13);
  v24 = (char *)sub_23BFAA57C + 4 * byte_23C006630[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

BOOL sub_23BFAA57C()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(double *, uint64_t, uint64_t);
  uint64_t v3;
  double *v4;
  double *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  v2(v4, v0, v1);
  if (swift_getEnumCaseMultiPayload())
  {
    v8 = 0;
  }
  else
  {
    v8 = v4[1] == v5[1] && *v4 == *v5;
    v6 = *(_QWORD *)(v7 - 112);
    v3 = v1;
  }
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0, v3);
  return v8;
}

uint64_t type metadata accessor for CanvasSectionLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CanvasSectionLayout);
}

uint64_t sub_23BFAA7B8(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x6152746365707361 && a2 == 0xEB000000006F6974)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_23BFF9964();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_23BFAA854(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6C6573756F726163 && a2 == 0xE800000000000000;
  if (v2 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F676F6874726FLL && a2 == 0xEA00000000006C61 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1953720684 && a2 == 0xE400000000000000 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 1684632167 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_23BFF9964();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_23BFAA9F8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23BFAAA2C + 4 * byte_23C006634[a1]))(0x6C6573756F726163, 0xE800000000000000);
}

uint64_t sub_23BFAAA2C()
{
  return 0x6E6F676F6874726FLL;
}

uint64_t sub_23BFAAA48()
{
  return 1953720684;
}

uint64_t sub_23BFAAA58()
{
  return 1684632167;
}

uint64_t sub_23BFAAA68(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 1936291937 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_23BFF9964();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_23BFAAADC(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x46797469736E6564 && a2 == 0xED0000726F746361)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_23BFF9964();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_23BFAAB84()
{
  return 0x6152746365707361;
}

uint64_t sub_23BFAABA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BFAA7B8(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_23BFAABD4(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23C006CE0, a1);
  return sub_23BFF9A30();
}

uint64_t sub_23BFAAC08(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23C006CE0, a1);
  return sub_23BFF9A3C();
}

uint64_t sub_23BFAAC3C()
{
  return sub_23BEAADE0();
}

uint64_t sub_23BFAAC48()
{
  sub_23BFF99D0();
  sub_23BEAABAC();
  return sub_23BFF9A00();
}

uint64_t sub_23BFAAC8C()
{
  unsigned __int8 *v0;

  return sub_23BFAA9F8(*v0);
}

uint64_t sub_23BFAAC98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BFAA854(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BFAACC4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23BEFF710();
  *a1 = result;
  return result;
}

uint64_t sub_23BFAACEC(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23C006C90, a1);
  return sub_23BFF9A30();
}

uint64_t sub_23BFAAD20(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23C006C90, a1);
  return sub_23BFF9A3C();
}

uint64_t sub_23BFAAD54()
{
  return 1936291937;
}

uint64_t sub_23BFAAD64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BFAAA68(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_23BFAAD94(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23C006DD0, a1);
  return sub_23BFF9A30();
}

uint64_t sub_23BFAADC8(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23C006DD0, a1);
  return sub_23BFF9A3C();
}

uint64_t sub_23BFAADFC()
{
  return 0x46797469736E6564;
}

uint64_t sub_23BFAAE20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BFAAADC(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_23BFAAE50(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23C006D80, a1);
  return sub_23BFF9A30();
}

uint64_t sub_23BFAAE84(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23C006D80, a1);
  return sub_23BFF9A3C();
}

uint64_t sub_23BFAAEB8(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23C006D30, a1);
  return sub_23BFF9A30();
}

uint64_t sub_23BFAAEEC(uint64_t a1)
{
  MEMORY[0x242615198](&unk_23C006D30, a1);
  return sub_23BFF9A3C();
}

void CanvasSectionLayout.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  _QWORD v37[3];
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v64 = a2;
  v6 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v53 = type metadata accessor for CanvasSectionLayout.GridCodingKeys(255, v6, v5, a4);
  v51 = MEMORY[0x242615198](&unk_23C006DD0, v53);
  v8 = sub_23BFF994C();
  v57 = *(_QWORD *)(v8 - 8);
  v58 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v55 = (char *)v37 - v9;
  v56 = type metadata accessor for CanvasGridAxis(0, v6, v5, v10);
  v54 = *(_QWORD *)(v56 - 8);
  MEMORY[0x24BDAC7A8](v56);
  v52 = (char *)v37 - v11;
  v13 = type metadata accessor for CanvasSectionLayout.ListCodingKeys(255, v6, v5, v12);
  v14 = MEMORY[0x242615198](&unk_23C006D80, v13);
  v48 = v13;
  v46 = v14;
  v15 = sub_23BFF994C();
  v49 = *(_QWORD *)(v15 - 8);
  v50 = v15;
  MEMORY[0x24BDAC7A8](v15);
  v47 = (char *)v37 - v16;
  v18 = type metadata accessor for CanvasSectionLayout.OrthogonalCodingKeys(255, v6, v5, v17);
  v19 = MEMORY[0x242615198](&unk_23C006D30, v18);
  v43 = v18;
  v40 = v19;
  v45 = sub_23BFF994C();
  v44 = *(_QWORD *)(v45 - 8);
  MEMORY[0x24BDAC7A8](v45);
  v42 = (char *)v37 - v20;
  v59 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v41 = (char *)v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v39 = (char *)v37 - v24;
  v26 = type metadata accessor for CanvasSectionLayout.CarouselCodingKeys(255, v6, v5, v25);
  v37[0] = MEMORY[0x242615198](&unk_23C006CE0, v26);
  v38 = sub_23BFF994C();
  v37[2] = *(_QWORD *)(v38 - 8);
  MEMORY[0x24BDAC7A8](v38);
  v37[1] = (char *)v37 - v27;
  v28 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v31 = (char *)v37 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = v5;
  v33 = type metadata accessor for CanvasSectionLayout.CodingKeys(255, v6, v5, v32);
  MEMORY[0x242615198](&unk_23C006C90, v33);
  v63 = sub_23BFF994C();
  v61 = *(_QWORD *)(v63 - 8);
  MEMORY[0x24BDAC7A8](v63);
  v35 = (char *)v37 - v34;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v62 = v35;
  sub_23BFF9A18();
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v31, v65, v64);
  v36 = (char *)sub_23BFAB2F0 + 4 * byte_23C006638[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_23BFAB2F0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *v0;
  v3 = v0[1];
  *(_BYTE *)(v1 - 120) = 0;
  v4 = *(_QWORD *)(v1 - 360);
  v6 = *(_QWORD *)(v1 - 152);
  v5 = *(_QWORD *)(v1 - 144);
  sub_23BFF98EC();
  *(_QWORD *)(v1 - 120) = v2;
  *(_QWORD *)(v1 - 112) = v3;
  type metadata accessor for CGSize(0);
  sub_23BFABFCC(&qword_256AE3468, MEMORY[0x24BDBD848]);
  v7 = *(_QWORD *)(v1 - 344);
  sub_23BFF9940();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 352) + 8))(v4, v7);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 160) + 8))(v6, v5);
}

uint64_t type metadata accessor for CanvasSectionLayout.GridCodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CanvasSectionLayout.GridCodingKeys);
}

uint64_t type metadata accessor for CanvasSectionLayout.ListCodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CanvasSectionLayout.ListCodingKeys);
}

uint64_t type metadata accessor for CanvasSectionLayout.OrthogonalCodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CanvasSectionLayout.OrthogonalCodingKeys);
}

uint64_t type metadata accessor for CanvasSectionLayout.CarouselCodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CanvasSectionLayout.CarouselCodingKeys);
}

uint64_t type metadata accessor for CanvasSectionLayout.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CanvasSectionLayout.CodingKeys);
}

uint64_t CanvasSectionLayout.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  __int128 v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;

  v70 = a5;
  v8 = type metadata accessor for CanvasSectionLayout.GridCodingKeys(255, a2, a3, a4);
  v82 = MEMORY[0x242615198](&unk_23C006DD0, v8);
  v83 = v8;
  v69 = sub_23BFF98E0();
  v68 = *(_QWORD *)(v69 - 8);
  MEMORY[0x24BDAC7A8](v69);
  v74 = (char *)&v58 - v9;
  v11 = type metadata accessor for CanvasSectionLayout.ListCodingKeys(255, a2, a3, v10);
  v12 = MEMORY[0x242615198](&unk_23C006D80, v11);
  v81 = v11;
  v80 = v12;
  v67 = sub_23BFF98E0();
  v66 = *(_QWORD *)(v67 - 8);
  MEMORY[0x24BDAC7A8](v67);
  v73 = (char *)&v58 - v13;
  v15 = type metadata accessor for CanvasSectionLayout.OrthogonalCodingKeys(255, a2, a3, v14);
  v16 = MEMORY[0x242615198](&unk_23C006D30, v15);
  v78 = v15;
  v77 = v16;
  v65 = sub_23BFF98E0();
  v79 = *(_QWORD *)(v65 - 8);
  MEMORY[0x24BDAC7A8](v65);
  v72 = (char *)&v58 - v17;
  v19 = type metadata accessor for CanvasSectionLayout.CarouselCodingKeys(255, a2, a3, v18);
  v20 = MEMORY[0x242615198](&unk_23C006CE0, v19);
  v76 = v19;
  v75 = v20;
  v64 = sub_23BFF98E0();
  v63 = *(_QWORD *)(v64 - 8);
  MEMORY[0x24BDAC7A8](v64);
  v71 = (char *)&v58 - v21;
  v23 = type metadata accessor for CanvasSectionLayout.CodingKeys(255, a2, a3, v22);
  v92 = MEMORY[0x242615198](&unk_23C006C90, v23);
  v24 = sub_23BFF98E0();
  v86 = *(_QWORD *)(v24 - 8);
  v87 = v24;
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)&v58 - v25;
  v89 = a2;
  v90 = a3;
  v28 = type metadata accessor for CanvasSectionLayout(0, a2, a3, v27);
  v84 = *(_QWORD *)(v28 - 8);
  v85 = v28;
  MEMORY[0x24BDAC7A8](v28);
  v30 = (char *)&v58 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v31);
  v33 = (char *)&v58 - v32;
  MEMORY[0x24BDAC7A8](v34);
  v36 = (char *)&v58 - v35;
  MEMORY[0x24BDAC7A8](v37);
  v39 = (char *)&v58 - v38;
  MEMORY[0x24BDAC7A8](v40);
  v42 = (char *)&v58 - v41;
  v43 = a1[3];
  v91 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v43);
  v88 = v26;
  v44 = v97;
  sub_23BFF9A0C();
  if (!v44)
  {
    v60 = v36;
    v61 = v33;
    v59 = v39;
    v62 = v30;
    v92 = (uint64_t)v42;
    v97 = 0;
    v45 = v88;
    v46 = v87;
    *(_QWORD *)&v93 = sub_23BFF98D4();
    v47 = sub_23BFF94C0();
    MEMORY[0x242615198](MEMORY[0x24BEE12C8], v47);
    *(_QWORD *)&v95 = sub_23BFF96DC();
    *((_QWORD *)&v95 + 1) = v48;
    *(_QWORD *)&v96 = v49;
    *((_QWORD *)&v96 + 1) = v50;
    v51 = sub_23BFF96D0();
    MEMORY[0x242615198](MEMORY[0x24BEE2190], v51);
    sub_23BFF9634();
    v52 = v93;
    if (v93 != 4)
    {
      v58 = v95;
      v93 = v95;
      v94 = v96;
      if ((sub_23BFF964C() & 1) != 0)
        __asm { BR              X9 }
    }
    v53 = v45;
    v54 = sub_23BFF9784();
    swift_allocError();
    v56 = v55;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3978);
    *v56 = v85;
    sub_23BFF9874();
    sub_23BFF9778();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v54 - 8) + 104))(v56, *MEMORY[0x24BEE26D0], v54);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v86 + 8))(v53, v46);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v91);
}

uint64_t sub_23BFABFCC(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for CGSize(255);
    result = MEMORY[0x242615198](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23BFAC00C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return CanvasSectionLayout.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3, a4);
}

void sub_23BFAC028(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CanvasSectionLayout.encode(to:)(a1, a2, a3, a4);
}

void CanvasSectionLayout.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD v14[2];

  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 16);
  v14[1] = v6;
  v8 = type metadata accessor for CanvasGridAxis(0, v7, v6, a4);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v10 = MEMORY[0x24BDAC7A8](v9);
  MEMORY[0x24BDAC7A8](v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v4, a2);
  v13 = (char *)sub_23BFAC140 + 4 * byte_23C006640[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_23BFAC140()
{
  sub_23BFF99DC();
  return sub_23BEA0B6C();
}

uint64_t CanvasSectionLayout.hashValue.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[72];

  sub_23BFF99D0();
  CanvasSectionLayout.hash(into:)((uint64_t)v5, a1, v2, v3);
  return sub_23BFF9A00();
}

uint64_t sub_23BFAC26C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[72];

  sub_23BFF99D0();
  CanvasSectionLayout.hash(into:)((uint64_t)v6, a2, v3, v4);
  return sub_23BFF9A00();
}

void sub_23BFAC2AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  static CanvasSectionLayout.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

void sub_23BFAC2B8()
{
  JUMPOUT(0x242615198);
}

uint64_t sub_23BFAC2C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = swift_checkMetadataState();
  v4 = v2;
  if (v5 <= 0x3F)
  {
    v4 = type metadata accessor for CanvasGridAxis(319, v2, *(_QWORD *)(a1 + 24), v3);
    if (v6 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return v4;
}

_QWORD *sub_23BFAC36C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v15;
  _QWORD *result;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  char v24;
  char v25;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_QWORD *)(v4 + 64);
  if (v5 <= 0x10)
    v6 = 16;
  else
    v6 = *(_QWORD *)(v4 + 64);
  v7 = *(_DWORD *)(v4 + 80);
  v8 = v7;
  v9 = ((v8 + 8) & ~v8) + v5;
  if (v9 <= 0x18)
    v10 = 24;
  else
    v10 = v9;
  if (v10 + 1 <= v6 + 1)
    v11 = v6 + 1;
  else
    v11 = v10 + 1;
  if (v11 + 1 > v6)
    v12 = v11 + 1;
  else
    v12 = v6;
  if (v7 > 7u || (v7 & 0x100000) != 0 || v12 + 1 > 0x18)
  {
    v15 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v15 + ((v7 & 0xF8 ^ 0x1F8u) & (v7 + 16)));
    swift_retain();
  }
  else
  {
    switch(*((_BYTE *)a2 + v12))
    {
      case 0:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_BYTE *)a1 + v12) = 0;
        break;
      case 1:
        (*(void (**)(_QWORD *))(v4 + 16))(a1);
        *((_BYTE *)v3 + v12) = 1;
        break;
      case 2:
        (*(void (**)(_QWORD *))(v4 + 16))(a1);
        *((_BYTE *)v3 + v12) = 2;
        break;
      case 3:
        v18 = *((unsigned __int8 *)a2 + v11);
        if (v18 >= 2)
        {
          if (v11 <= 3)
            v19 = v11;
          else
            v19 = 4;
          __asm { BR              X15 }
        }
        if (v18 == 1)
        {
          v20 = *((unsigned __int8 *)a2 + v10);
          if (v20 >= 2)
          {
            if (v10 <= 3)
              v21 = v10;
            else
              v21 = 4;
            __asm { BR              X15 }
          }
          if (v20 == 1)
          {
            *a1 = *a2;
            (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + v8 + 8) & ~v8, ((unint64_t)a2 + v8 + 8) & ~v8);
            v24 = 1;
            v6 = v10;
            v25 = 1;
          }
          else
          {
            v24 = 0;
            *(_OWORD *)a1 = *(_OWORD *)a2;
            a1[2] = a2[2];
            v25 = 1;
            v6 = v10;
          }
        }
        else
        {
          v22 = *((unsigned __int8 *)a2 + v6);
          if (v22 >= 2)
          {
            if (v6 <= 3)
              v23 = v6;
            else
              v23 = 4;
            __asm { BR              X13 }
          }
          if (v22 == 1)
          {
            (*(void (**)(_QWORD *))(v4 + 16))(a1);
            v25 = 0;
            v24 = 1;
          }
          else
          {
            v24 = 0;
            v25 = 0;
            *(_OWORD *)a1 = *(_OWORD *)a2;
          }
        }
        *((_BYTE *)v3 + v6) = v24;
        *((_BYTE *)v3 + v11) = v25;
        *((_BYTE *)v3 + v12) = 3;
        break;
      default:
        if (v12 <= 3)
          v17 = v12;
        else
          v17 = 4;
        __asm { BR              X14 }
        return result;
    }
  }
  return v3;
}

uint64_t sub_23BFAC704(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_QWORD *)(v2 + 64);
  if (v3 <= 0x10)
    v4 = 16;
  else
    v4 = *(_QWORD *)(v2 + 64);
  v5 = *(unsigned __int8 *)(v2 + 80);
  v6 = ((v5 + 8) & ~v5) + v3;
  if (v6 <= 0x18)
    v6 = 24;
  v7 = v6 + 1;
  if (v6 + 1 <= v4 + 1)
    v7 = v4 + 1;
  if (v7 + 1 > v4)
    v8 = v7 + 1;
  else
    v8 = v4;
  v9 = *(unsigned __int8 *)(result + v8);
  v11 = ~v5;
  switch(v9)
  {
    case 0:
      return result;
    case 1:
    case 2:
      goto LABEL_17;
    case 3:
      v12 = *(unsigned __int8 *)(result + v7);
      if (v12 < 2)
      {
        if (v12 == 1)
        {
          v14 = *(unsigned __int8 *)(result + v6);
          if (v14 < 2)
          {
            if (v14 == 1)
              result = (*(uint64_t (**)(uint64_t))(v2 + 8))((result + v5 + 8) & v11);
          }
          else
          {
            if (v6 <= 3)
              v15 = v6;
            else
              v15 = 4;
            result = ((uint64_t (*)(void))((char *)&loc_23BFAC880 + 4 * byte_23C00666F[v15]))();
          }
        }
        else
        {
          v16 = *(unsigned __int8 *)(result + v4);
          if (v16 < 2)
          {
            if (v16 == 1)
LABEL_17:
              result = (*(uint64_t (**)(void))(v2 + 8))();
          }
          else
          {
            if (v4 <= 3)
              v17 = v4;
            else
              v17 = 4;
            result = ((uint64_t (*)(void))((char *)&loc_23BFAC8E8 + 4 * byte_23C00666A[v17]))();
          }
        }
      }
      else
      {
        if (v7 <= 3)
          v13 = v7;
        else
          v13 = 4;
        result = ((uint64_t (*)(void))((char *)&loc_23BFAC81C + 4 * byte_23C006665[v13]))();
      }
      break;
    default:
      if (v11 <= 3)
        v10 = v11;
      else
        v10 = 4;
      result = ((uint64_t (*)(void))((char *)&loc_23BFAC784 + 4 * byte_23C00665C[v10]))();
      break;
  }
  return result;
}

uint64_t sub_23BFAC9A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t result;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_QWORD *)(v4 + 64);
  if (v5 <= 0x10)
    v6 = 16;
  else
    v6 = *(_QWORD *)(v4 + 64);
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = ((v7 + 8) & ~v7) + v5;
  if (v8 <= 0x18)
    v9 = 24;
  else
    v9 = v8;
  if (v9 + 1 <= v6 + 1)
    v10 = v6 + 1;
  else
    v10 = v9 + 1;
  if (v10 + 1 > v6)
    v11 = v10 + 1;
  else
    v11 = v6;
  switch(*(_BYTE *)(a2 + v11))
  {
    case 0:
      v13 = 0;
      *(_OWORD *)a1 = *(_OWORD *)a2;
      break;
    case 1:
      (*(void (**)(uint64_t))(v4 + 16))(a1);
      v13 = 1;
      break;
    case 2:
      (*(void (**)(uint64_t))(v4 + 16))(a1);
      v13 = 2;
      break;
    case 3:
      v14 = *(unsigned __int8 *)(a2 + v10);
      if (v14 >= 2)
      {
        if (v10 <= 3)
          v15 = v10;
        else
          v15 = 4;
        __asm { BR              X15 }
      }
      if (v14 == 1)
      {
        v16 = *(unsigned __int8 *)(a2 + v9);
        if (v16 >= 2)
        {
          if (v9 <= 3)
            v17 = v9;
          else
            v17 = 4;
          __asm { BR              X15 }
        }
        if (v16 == 1)
        {
          *(_QWORD *)a1 = *(_QWORD *)a2;
          (*(void (**)(uint64_t, uint64_t))(v4 + 16))((a1 + v7 + 8) & ~v7, (a2 + v7 + 8) & ~v7);
          v20 = 1;
          v6 = v9;
          v21 = 1;
        }
        else
        {
          v20 = 0;
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
          v21 = 1;
          v6 = v9;
        }
      }
      else
      {
        v18 = *(unsigned __int8 *)(a2 + v6);
        if (v18 >= 2)
        {
          if (v6 <= 3)
            v19 = v6;
          else
            v19 = 4;
          __asm { BR              X13 }
        }
        if (v18 == 1)
        {
          (*(void (**)(uint64_t))(v4 + 16))(a1);
          v21 = 0;
          v20 = 1;
        }
        else
        {
          v20 = 0;
          v21 = 0;
          *(_OWORD *)a1 = *(_OWORD *)a2;
        }
      }
      *(_BYTE *)(a1 + v6) = v20;
      *(_BYTE *)(a1 + v10) = v21;
      v13 = 3;
      break;
    default:
      if (v11 <= 3)
        v12 = v11;
      else
        v12 = 4;
      __asm { BR              X14 }
      return result;
  }
  *(_BYTE *)(a1 + v11) = v13;
  return a1;
}

uint64_t sub_23BFACD0C(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void (*v15)(void);
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  char v30;
  char v31;
  __int128 v32;
  uint64_t result;

  if ((__int128 *)a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    if (v7 <= 0x10)
      v8 = 16;
    else
      v8 = *(_QWORD *)(v6 + 64);
    v9 = *(unsigned __int8 *)(v6 + 80);
    v10 = ((v9 + 8) & ~v9) + v7;
    if (v10 <= 0x18)
      v11 = 24;
    else
      v11 = v10;
    if (v11 + 1 <= v8 + 1)
      v12 = v8 + 1;
    else
      v12 = v11 + 1;
    if (v12 + 1 > v8)
      v13 = v12 + 1;
    else
      v13 = v8;
    switch(*(_BYTE *)(a1 + v13))
    {
      case 0:
        goto LABEL_31;
      case 1:
      case 2:
        goto LABEL_19;
      case 3:
        v17 = *(unsigned __int8 *)(a1 + v12);
        if (v17 >= 2)
        {
          if (v12 <= 3)
            v18 = v12;
          else
            v18 = 4;
          __asm { BR              X12 }
        }
        if (v17 == 1)
        {
          v22 = *(unsigned __int8 *)(a1 + v11);
          if (v22 >= 2)
          {
            if (v11 <= 3)
              v23 = v11;
            else
              v23 = 4;
            __asm { BR              X12 }
          }
          if (v22 == 1)
          {
            v15 = *(void (**)(void))(v6 + 8);
            goto LABEL_20;
          }
        }
        else
        {
          v24 = *(unsigned __int8 *)(a1 + v8);
          if (v24 >= 2)
          {
            if (v8 <= 3)
              v25 = v8;
            else
              v25 = 4;
            __asm { BR              X12 }
          }
          if (v24 == 1)
          {
LABEL_19:
            v15 = *(void (**)(void))(v6 + 8);
LABEL_20:
            v15();
          }
        }
LABEL_31:
        switch(*((_BYTE *)a2 + v13))
        {
          case 0:
            v19 = 0;
            *(_OWORD *)a1 = *a2;
            break;
          case 1:
            (*(void (**)(uint64_t, __int128 *, uint64_t))(v6 + 16))(a1, a2, v5);
            v19 = 1;
            break;
          case 2:
            (*(void (**)(uint64_t, __int128 *, uint64_t))(v6 + 16))(a1, a2, v5);
            v19 = 2;
            break;
          case 3:
            v20 = *((unsigned __int8 *)a2 + v12);
            if (v20 >= 2)
            {
              if (v12 <= 3)
                v21 = v12;
              else
                v21 = 4;
              __asm { BR              X12 }
            }
            if (v20 == 1)
            {
              v26 = *((unsigned __int8 *)a2 + v11);
              if (v26 >= 2)
              {
                if (v11 <= 3)
                  v27 = v11;
                else
                  v27 = 4;
                __asm { BR              X12 }
              }
              if (v26 == 1)
              {
                *(_QWORD *)a1 = *(_QWORD *)a2;
                (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16))((a1 + v9 + 8) & ~v9, ((unint64_t)a2 + v9 + 8) & ~v9, v5);
                v30 = 1;
                v8 = v11;
                v31 = 1;
              }
              else
              {
                v30 = 0;
                v32 = *a2;
                *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
                *(_OWORD *)a1 = v32;
                v31 = 1;
                v8 = v11;
              }
            }
            else
            {
              v28 = *((unsigned __int8 *)a2 + v8);
              if (v28 >= 2)
              {
                if (v8 <= 3)
                  v29 = v8;
                else
                  v29 = 4;
                __asm { BR              X12 }
              }
              if (v28 == 1)
              {
                (*(void (**)(uint64_t, __int128 *, uint64_t))(v6 + 16))(a1, a2, v5);
                v31 = 0;
                v30 = 1;
              }
              else
              {
                v30 = 0;
                v31 = 0;
                *(_OWORD *)a1 = *a2;
              }
            }
            *(_BYTE *)(a1 + v8) = v30;
            *(_BYTE *)(a1 + v12) = v31;
            v19 = 3;
            break;
          default:
            if (v13 <= 3)
              v16 = v13;
            else
              v16 = 4;
            __asm { BR              X12 }
            return result;
        }
        *(_BYTE *)(a1 + v13) = v19;
        break;
      default:
        if (v13 <= 3)
          v14 = v13;
        else
          v14 = 4;
        __asm { BR              X12 }
        return result;
    }
  }
  return a1;
}

uint64_t sub_23BFAD2C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t result;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_QWORD *)(v4 + 64);
  if (v5 <= 0x10)
    v6 = 16;
  else
    v6 = *(_QWORD *)(v4 + 64);
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = ((v7 + 8) & ~v7) + v5;
  if (v8 <= 0x18)
    v9 = 24;
  else
    v9 = v8;
  if (v9 + 1 <= v6 + 1)
    v10 = v6 + 1;
  else
    v10 = v9 + 1;
  if (v10 + 1 > v6)
    v11 = v10 + 1;
  else
    v11 = v6;
  switch(*(_BYTE *)(a2 + v11))
  {
    case 0:
      v13 = 0;
      *(_OWORD *)a1 = *(_OWORD *)a2;
      break;
    case 1:
      (*(void (**)(uint64_t))(v4 + 32))(a1);
      v13 = 1;
      break;
    case 2:
      (*(void (**)(uint64_t))(v4 + 32))(a1);
      v13 = 2;
      break;
    case 3:
      v14 = *(unsigned __int8 *)(a2 + v10);
      if (v14 >= 2)
      {
        if (v10 <= 3)
          v15 = v10;
        else
          v15 = 4;
        __asm { BR              X15 }
      }
      if (v14 == 1)
      {
        v16 = *(unsigned __int8 *)(a2 + v9);
        if (v16 >= 2)
        {
          if (v9 <= 3)
            v17 = v9;
          else
            v17 = 4;
          __asm { BR              X15 }
        }
        if (v16 == 1)
        {
          *(_QWORD *)a1 = *(_QWORD *)a2;
          (*(void (**)(uint64_t, uint64_t))(v4 + 32))((a1 + v7 + 8) & ~v7, (a2 + v7 + 8) & ~v7);
          v20 = 1;
          v6 = v9;
          v21 = 1;
        }
        else
        {
          v20 = 0;
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
          v21 = 1;
          v6 = v9;
        }
      }
      else
      {
        v18 = *(unsigned __int8 *)(a2 + v6);
        if (v18 >= 2)
        {
          if (v6 <= 3)
            v19 = v6;
          else
            v19 = 4;
          __asm { BR              X13 }
        }
        if (v18 == 1)
        {
          (*(void (**)(uint64_t))(v4 + 32))(a1);
          v21 = 0;
          v20 = 1;
        }
        else
        {
          v20 = 0;
          v21 = 0;
          *(_OWORD *)a1 = *(_OWORD *)a2;
        }
      }
      *(_BYTE *)(a1 + v6) = v20;
      *(_BYTE *)(a1 + v10) = v21;
      v13 = 3;
      break;
    default:
      if (v11 <= 3)
        v12 = v11;
      else
        v12 = 4;
      __asm { BR              X14 }
      return result;
  }
  *(_BYTE *)(a1 + v11) = v13;
  return a1;
}

uint64_t sub_23BFAD62C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void (*v15)(void);
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t result;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    if (v7 <= 0x10)
      v8 = 16;
    else
      v8 = *(_QWORD *)(v6 + 64);
    v9 = *(unsigned __int8 *)(v6 + 80);
    v10 = ((v9 + 8) & ~v9) + v7;
    if (v10 <= 0x18)
      v11 = 24;
    else
      v11 = v10;
    if (v11 + 1 <= v8 + 1)
      v12 = v8 + 1;
    else
      v12 = v11 + 1;
    if (v12 + 1 > v8)
      v13 = v12 + 1;
    else
      v13 = v8;
    switch(*(_BYTE *)(a1 + v13))
    {
      case 0:
        goto LABEL_31;
      case 1:
      case 2:
        goto LABEL_19;
      case 3:
        v17 = *(unsigned __int8 *)(a1 + v12);
        if (v17 >= 2)
        {
          if (v12 <= 3)
            v18 = v12;
          else
            v18 = 4;
          __asm { BR              X12 }
        }
        if (v17 == 1)
        {
          v22 = *(unsigned __int8 *)(a1 + v11);
          if (v22 >= 2)
          {
            if (v11 <= 3)
              v23 = v11;
            else
              v23 = 4;
            __asm { BR              X12 }
          }
          if (v22 == 1)
          {
            v15 = *(void (**)(void))(v6 + 8);
            goto LABEL_20;
          }
        }
        else
        {
          v24 = *(unsigned __int8 *)(a1 + v8);
          if (v24 >= 2)
          {
            if (v8 <= 3)
              v25 = v8;
            else
              v25 = 4;
            __asm { BR              X12 }
          }
          if (v24 == 1)
          {
LABEL_19:
            v15 = *(void (**)(void))(v6 + 8);
LABEL_20:
            v15();
          }
        }
LABEL_31:
        switch(*(_BYTE *)(a2 + v13))
        {
          case 0:
            v19 = 0;
            *(_OWORD *)a1 = *(_OWORD *)a2;
            break;
          case 1:
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(a1, a2, v5);
            v19 = 1;
            break;
          case 2:
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(a1, a2, v5);
            v19 = 2;
            break;
          case 3:
            v20 = *(unsigned __int8 *)(a2 + v12);
            if (v20 >= 2)
            {
              if (v12 <= 3)
                v21 = v12;
              else
                v21 = 4;
              __asm { BR              X12 }
            }
            if (v20 == 1)
            {
              v26 = *(unsigned __int8 *)(a2 + v11);
              if (v26 >= 2)
              {
                if (v11 <= 3)
                  v27 = v11;
                else
                  v27 = 4;
                __asm { BR              X12 }
              }
              if (v26 == 1)
              {
                *(_QWORD *)a1 = *(_QWORD *)a2;
                (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))((a1 + v9 + 8) & ~v9, (a2 + v9 + 8) & ~v9, v5);
                v30 = 1;
                v8 = v11;
                v31 = 1;
              }
              else
              {
                v30 = 0;
                *(_OWORD *)a1 = *(_OWORD *)a2;
                *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
                v31 = 1;
                v8 = v11;
              }
            }
            else
            {
              v28 = *(unsigned __int8 *)(a2 + v8);
              if (v28 >= 2)
              {
                if (v8 <= 3)
                  v29 = v8;
                else
                  v29 = 4;
                __asm { BR              X12 }
              }
              if (v28 == 1)
              {
                (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(a1, a2, v5);
                v31 = 0;
                v30 = 1;
              }
              else
              {
                v30 = 0;
                v31 = 0;
                *(_OWORD *)a1 = *(_OWORD *)a2;
              }
            }
            *(_BYTE *)(a1 + v8) = v30;
            *(_BYTE *)(a1 + v12) = v31;
            v19 = 3;
            break;
          default:
            if (v13 <= 3)
              v16 = v13;
            else
              v16 = 4;
            __asm { BR              X12 }
            return result;
        }
        *(_BYTE *)(a1 + v13) = v19;
        break;
      default:
        if (v13 <= 3)
          v14 = v13;
        else
          v14 = 4;
        __asm { BR              X12 }
        return result;
    }
  }
  return a1;
}

uint64_t sub_23BFADBE0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = 16;
  if (v4 > 0x10)
    v5 = *(_QWORD *)(v3 + 64);
  v6 = ((*(unsigned __int8 *)(v3 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)) + v4;
  if (v6 <= 0x18)
    v6 = 24;
  v7 = v6 + 1;
  if (v7 <= v5 + 1)
    v7 = v5 + 1;
  if (v7 + 1 > v5)
    v8 = v7 + 1;
  else
    v8 = v5;
  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_28;
  v9 = v8 + 1;
  v10 = 8 * (v8 + 1);
  if ((v8 + 1) <= 3)
  {
    v13 = ((a2 + ~(-1 << v10) - 252) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_28;
      goto LABEL_21;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_28;
      goto LABEL_21;
    }
    if (v13 < 2)
    {
LABEL_28:
      v15 = *(unsigned __int8 *)(a1 + v8);
      if (v15 >= 4)
        return (v15 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_28;
LABEL_21:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return (v14 + 253);
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_23BFADCDC + 4 * byte_23C006704[(v9 - 1)]))();
}

void sub_23BFADD28(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = 16;
  if (v6 > 0x10)
    v7 = *(_QWORD *)(v5 + 64);
  v8 = ((*(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + v6;
  if (v8 <= 0x18)
    v8 = 24;
  v9 = v8 + 1;
  if (v9 <= v7 + 1)
    v9 = v7 + 1;
  if (v9 + 1 > v7)
    v10 = v9 + 1;
  else
    v10 = v7;
  v11 = v10 + 1;
  if (a3 < 0xFD)
  {
    v12 = 0;
  }
  else if (v11 <= 3)
  {
    v14 = ((a3 + ~(-1 << (8 * v11)) - 252) >> (8 * v11)) + 1;
    if (HIWORD(v14))
    {
      v12 = 4u;
    }
    else if (v14 >= 0x100)
    {
      v12 = 2;
    }
    else
    {
      v12 = v14 > 1;
    }
  }
  else
  {
    v12 = 1u;
  }
  if (a2 <= 0xFC)
    __asm { BR              X11 }
  v13 = a2 - 253;
  if (v11 < 4)
  {
    if ((_DWORD)v10 != -1)
    {
      v15 = v13 & ~(-1 << (8 * v11));
      bzero(a1, v11);
      if ((_DWORD)v11 == 3)
      {
        *a1 = v15;
        *((_BYTE *)a1 + 2) = BYTE2(v15);
      }
      else if ((_DWORD)v11 == 2)
      {
        *a1 = v15;
      }
      else
      {
        *(_BYTE *)a1 = v15;
      }
    }
  }
  else
  {
    bzero(a1, v10 + 1);
    *(_DWORD *)a1 = v13;
  }
  __asm { BR              X10 }
}

uint64_t sub_23BFADF08(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_QWORD *)(v2 + 64);
  v4 = 16;
  if (v3 > 0x10)
    v4 = *(_QWORD *)(v2 + 64);
  v5 = ((*(unsigned __int8 *)(v2 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)) + v3;
  if (v5 <= 0x18)
    v5 = 24;
  v6 = v5 + 1;
  if (v6 <= v4 + 1)
    v6 = v4 + 1;
  if (v6 + 1 > v4)
    v7 = v6 + 1;
  else
    v7 = v4;
  if (*(unsigned __int8 *)(a1 + v7) < 4u)
    return *(unsigned __int8 *)(a1 + v7);
  if (v7 <= 3)
    v8 = v7;
  else
    v8 = 4;
  return ((uint64_t (*)(void))((char *)&loc_23BFADF88 + 4 * byte_23C006712[v8]))();
}

void sub_23BFADFD0(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  size_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (a2 > 3)
  {
    v9 = *(_QWORD *)(v4 + 64);
    v10 = 16;
    if (v9 > 0x10)
      v10 = *(_QWORD *)(v4 + 64);
    v11 = ((*(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)) + v9;
    if (v11 <= 0x18)
      v11 = 24;
    v12 = v11 + 1;
    if (v12 <= v10 + 1)
      v12 = v10 + 1;
    if (v12 + 1 > v10)
      v13 = v12 + 1;
    else
      v13 = v10;
    v14 = a2 - 4;
    if (v13 < 4)
    {
      v15 = v14 >> (8 * v13);
      v16 = v14 & ~(-1 << (8 * v13));
      a1[v13] = v15 + 4;
      bzero(a1, v13);
      if ((_DWORD)v13 == 3)
      {
        *(_WORD *)a1 = v16;
        a1[2] = BYTE2(v16);
      }
      else if ((_DWORD)v13 == 2)
      {
        *(_WORD *)a1 = v16;
      }
      else
      {
        *a1 = v16;
      }
    }
    else
    {
      a1[v13] = 4;
      bzero(a1, v13);
      *(_DWORD *)a1 = v14;
    }
  }
  else
  {
    v5 = (*(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    v6 = *(_QWORD *)(v4 + 64);
    v7 = v5 + v6;
    if (v7 <= 0x18)
      v7 = 24;
    v8 = v7 + 1;
    if (v6 <= 0x10)
      v6 = 16;
    if (v8 <= v6 + 1)
      v8 = v6 + 1;
    if (v8 + 1 > v6)
      v6 = v8 + 1;
    a1[v6] = a2;
  }
}

uint64_t sub_23BFAE118(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23BFAE164 + 4 * byte_23C00671C[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23BFAE198 + 4 * byte_23C006717[v4]))();
}

uint64_t sub_23BFAE198(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BFAE1A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BFAE1A8);
  return result;
}

uint64_t sub_23BFAE1B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BFAE1BCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23BFAE1C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BFAE1C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BFAE1D8(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23BFAE218 + 4 * byte_23C006721[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23BFAE238 + 4 * byte_23C006726[v4]))();
}

_BYTE *sub_23BFAE218(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23BFAE238(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BFAE240(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BFAE248(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BFAE250(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BFAE258(_DWORD *result)
{
  *result = 0;
  return result;
}

void sub_23BFAE264()
{
  JUMPOUT(0x242615198);
}

void sub_23BFAE274()
{
  JUMPOUT(0x242615198);
}

void sub_23BFAE284()
{
  JUMPOUT(0x242615198);
}

void sub_23BFAE294()
{
  JUMPOUT(0x242615198);
}

void sub_23BFAE2A4()
{
  JUMPOUT(0x242615198);
}

void sub_23BFAE2B4()
{
  JUMPOUT(0x242615198);
}

void sub_23BFAE2C4()
{
  JUMPOUT(0x242615198);
}

void sub_23BFAE2D4()
{
  JUMPOUT(0x242615198);
}

void sub_23BFAE2E4()
{
  JUMPOUT(0x242615198);
}

void sub_23BFAE2F4()
{
  JUMPOUT(0x242615198);
}

void sub_23BFAE304()
{
  JUMPOUT(0x242615198);
}

void sub_23BFAE314()
{
  JUMPOUT(0x242615198);
}

void sub_23BFAE324()
{
  JUMPOUT(0x242615198);
}

void sub_23BFAE334()
{
  JUMPOUT(0x242615198);
}

void sub_23BFAE344()
{
  JUMPOUT(0x242615198);
}

void sub_23BFAE358(void (*a1)(uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t *);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v5 = v4;
  v19 = a1;
  v20 = a2;
  v18 = sub_23BFF9160();
  v8 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = a3;
  v11 = a4 - a3;
  if (__OFSUB__(a4, a3))
    goto LABEL_21;
  if (v11)
  {
    v23 = MEMORY[0x24BEE4AF8];
    sub_23BFF7A94(0, v11 & ~(v11 >> 63), 0);
    if (v11 < 0)
    {
LABEL_22:
      __break(1u);
      return;
    }
    v12 = v23;
    v13 = v21;
    if (a4 <= v21)
      v14 = v21;
    else
      v14 = a4;
    v17 = v14;
    while (a4 != v13)
    {
      v22 = v13;
      v19(&v22);
      if (v5)
      {
        swift_release();
        return;
      }
      v5 = 0;
      v23 = v12;
      v16 = *(_QWORD *)(v12 + 16);
      v15 = *(_QWORD *)(v12 + 24);
      if (v16 >= v15 >> 1)
      {
        sub_23BFF7A94(v15 > 1, v16 + 1, 1);
        v12 = v23;
      }
      *(_QWORD *)(v12 + 16) = v16 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v12+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v16, v10, v18);
      if (a4 < v21)
        goto LABEL_19;
      if (v17 == v13)
        goto LABEL_20;
      if (a4 == ++v13)
        return;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
}

uint64_t sub_23BFAE500(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t))
{
  uint64_t v6;
  __n128 v7;
  uint64_t (*v8)(__n128);
  uint64_t v9;

  MEMORY[0x24BDAC7A8](a1);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = v8(v7);
  a5(v9);
  return sub_23BFF9130();
}

void HorizontalGridView.init(header:items:footer:metrics:rowCount:contentMargins:densityFactor:dynamicTypeSize:sizeClass:artworkViewBuilder:actionButtonViewBuilder:contextMenuViewModifierBuilder:customItemViewBuilder:sectionHeaderSubtitleViewBuilder:onItemAppearedAtIndex:onItemDisappearedAtIndex:onItemSelectedWithIdentifier:)()
{
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CanvasSectionHeader();
}

void sub_23BFAE780(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,__int128 a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;

  v30 = sub_23BFF96A0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v27, a27, v30);
  STACK[0x200] = v28;
  *(_OWORD *)&STACK[0x208] = a25;
  STACK[0x218] = a14;
  STACK[0x220] = v29;
  type metadata accessor for HorizontalGridView();
}

uint64_t sub_23BFAE824(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t result;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  char v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  *(_QWORD *)(v1 + a1[53]) = v24;
  *(_BYTE *)(v1 + a1[54]) = v20;
  v7 = v1 + a1[55];
  v8 = sub_23BFF96A0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v7, v27, v8);
  *(_QWORD *)(v1 + a1[56]) = v28;
  v9 = v1 + a1[57];
  *(_OWORD *)v9 = v21;
  *(_QWORD *)(v9 + 16) = v4;
  *(_QWORD *)(v9 + 24) = v5;
  v10 = (_QWORD *)(v1 + a1[62]);
  *v10 = v25;
  v10[1] = v26;
  v11 = (_QWORD *)(v1 + a1[58]);
  *v11 = v23;
  v11[1] = v3;
  v11[2] = v22;
  *(_BYTE *)(v1 + a1[59]) = v36;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(v1 + a1[60], v30, v2);
  v13 = (_QWORD *)(v1 + a1[61]);
  *v13 = v31;
  v13[1] = v32;
  v14 = (_QWORD *)(v1 + a1[63]);
  *v14 = v33;
  v14[1] = v35;
  v15 = (_QWORD *)(v1 + a1[64]);
  *v15 = v37;
  v15[1] = v34;
  v16 = (_QWORD *)(v1 + a1[65]);
  *v16 = v38;
  v16[1] = v39;
  v17 = (_QWORD *)(v1 + a1[66]);
  *v17 = v40;
  v17[1] = v41;
  v18 = (_QWORD *)(v1 + a1[67]);
  *v18 = v42;
  v18[1] = v43;
  v19 = (_QWORD *)(v1 + a1[68]);
  *v19 = v44;
  v19[1] = v29;
  return result;
}

void type metadata accessor for HorizontalGridView()
{
  JUMPOUT(0x2426150F0);
}

void HorizontalGridView.body.getter()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3528);
  type metadata accessor for CanvasSectionHeaderView();
}

void sub_23BFAEA10(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1[65] = a1;
  sub_23BFF8A4C();
  v1[66] = sub_23BFF862C();
  v1[67] = sub_23BFF8968();
  v1[64] = sub_23BFF96A0();
  v6 = v2[25];
  v1[76] = v6;
  v1[61] = *(_QWORD *)(v6 + 32);
  v1[77] = v2[16];
  v1[60] = swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  v1[59] = sub_23BFF94C0();
  v7 = v2[5];
  v8 = v2[18];
  *(_QWORD *)(v5 - 216) = v7;
  *(_QWORD *)(v5 - 208) = v4;
  v1[72] = v7;
  *(_QWORD *)(v5 - 200) = v4;
  *(_QWORD *)(v5 - 192) = v8;
  v1[74] = v8;
  *(_QWORD *)(v5 - 184) = v3;
  *(_QWORD *)(v5 - 176) = v3;
  type metadata accessor for ActionCardView();
}

void sub_23BFAEAE4(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1[52] = a1;
  v8 = MEMORY[0x242615198](&unk_23C005608, a1);
  v1[51] = v8;
  *(_QWORD *)(v6 - 216) = a1;
  *(_QWORD *)(v6 - 208) = v8;
  MEMORY[0x24261512C](255, v6 - 216, MEMORY[0x24BDF3948], 0);
  v1[55] = sub_23BFF8ADC();
  v9 = (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088];
  v10 = sub_23BFF862C();
  v11 = sub_23BFF862C();
  v1[50] = v11;
  v12 = sub_23BEA1BB8((unint64_t *)&qword_256AE3908, v9, MEMORY[0x24BDF1078]);
  v1[56] = v12;
  *(_QWORD *)(v6 - 104) = v3;
  *(_QWORD *)(v6 - 96) = v12;
  v13 = MEMORY[0x24BDED308];
  v14 = MEMORY[0x242615198](MEMORY[0x24BDED308], v10, v6 - 104);
  v15 = MEMORY[0x24BDEEC40];
  *(_QWORD *)(v6 - 120) = v14;
  *(_QWORD *)(v6 - 112) = v15;
  v16 = MEMORY[0x242615198](v13, v11, v6 - 120);
  v1[49] = v16;
  *(_QWORD *)(v6 - 216) = v11;
  *(_QWORD *)(v6 - 208) = v16;
  v17 = MEMORY[0x24BDF3100];
  MEMORY[0x24261512C](255, v6 - 216, MEMORY[0x24BDF3100], 0);
  v18 = sub_23BFF862C();
  v1[45] = v18;
  v19 = MEMORY[0x24BDEBEE0];
  *(_QWORD *)(v6 - 136) = v14;
  *(_QWORD *)(v6 - 128) = v19;
  v20 = MEMORY[0x242615198](v13, v18, v6 - 136);
  v1[44] = v20;
  *(_QWORD *)(v6 - 216) = v18;
  *(_QWORD *)(v6 - 208) = v20;
  MEMORY[0x24261512C](255, v6 - 216, v17, 0);
  v1[42] = sub_23BFF8968();
  v1[46] = sub_23BFF8FD4();
  v1[43] = sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3910);
  v1[47] = sub_23BFF8968();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3918);
  v1[48] = sub_23BFF8968();
  v1[32] = sub_23BFF8968();
  *v1 = v2;
  v21 = v2[8];
  v1[73] = v21;
  v22 = v2[14];
  v23 = v2[20];
  v1[75] = v23;
  v24 = v2[24];
  v1[62] = v22;
  v1[63] = v24;
  *(_QWORD *)(v6 - 216) = v1[72];
  *(_QWORD *)(v6 - 208) = v5;
  *(_QWORD *)(v6 - 200) = v5;
  *(_QWORD *)(v6 - 192) = v21;
  v25 = v1[74];
  *(_QWORD *)(v6 - 184) = v22;
  *(_QWORD *)(v6 - 176) = v25;
  *(_QWORD *)(v6 - 168) = v4;
  *(_QWORD *)(v6 - 160) = v4;
  *(_QWORD *)(v6 - 152) = v23;
  *(_QWORD *)(v6 - 144) = v24;
  type metadata accessor for FullWidthStageView();
}

void sub_23BFAED1C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1[41] = a1;
  v8 = MEMORY[0x242615198](&unk_23C0077B8, a1);
  v1[40] = v8;
  *(_QWORD *)(v6 - 216) = a1;
  *(_QWORD *)(v6 - 208) = v8;
  v9 = MEMORY[0x24BDF3948];
  MEMORY[0x24261512C](255, v6 - 216, MEMORY[0x24BDF3948], 0);
  v1[57] = v4;
  v1[58] = v3;
  v11 = type metadata accessor for InfoActionCardView(255, v4, v3, v10);
  v1[39] = v11;
  v12 = MEMORY[0x242615198](&unk_23C007F20, v11);
  v1[38] = v12;
  *(_QWORD *)(v6 - 216) = v11;
  *(_QWORD *)(v6 - 208) = v12;
  MEMORY[0x24261512C](255, v6 - 216, v9, 0);
  v1[37] = sub_23BFF8968();
  v1[16] = sub_23BFF8968();
  v13 = v2;
  v15 = type metadata accessor for LargeBrickView(255, v2, v5, v14);
  v1[36] = v15;
  v16 = MEMORY[0x242615198](&protocol conformance descriptor for LargeBrickView<A>, v15);
  v1[35] = v16;
  *(_QWORD *)(v6 - 216) = v15;
  *(_QWORD *)(v6 - 208) = v16;
  v17 = v9;
  MEMORY[0x24261512C](255, v6 - 216, v9, 0);
  v19 = type metadata accessor for DynamicBrickView(255, v13, v5, v18);
  v1[34] = v19;
  v20 = MEMORY[0x242615198](&protocol conformance descriptor for DynamicBrickView<A>, v19);
  v1[33] = v20;
  *(_QWORD *)(v6 - 216) = v19;
  *(_QWORD *)(v6 - 208) = v20;
  MEMORY[0x24261512C](255, v6 - 216, v9, 0);
  v1[25] = sub_23BFF8968();
  v22 = type metadata accessor for MonogramVerticalStackView(255, v13, v5, v21);
  v1[31] = v22;
  v23 = MEMORY[0x242615198](&unk_23BFFA1F4, v22);
  v1[30] = v23;
  *(_QWORD *)(v6 - 216) = v22;
  *(_QWORD *)(v6 - 208) = v23;
  MEMORY[0x24261512C](255, v6 - 216, v17, 0);
  v1[28] = sub_23BFF8968();
  v1[29] = sub_23BFF8968();
  sub_23BFF8968();
  v25 = type metadata accessor for StandardCardView(255, v13, v5, v24);
  v1[27] = v25;
  v26 = MEMORY[0x242615198](&unk_23C007BD0, v25);
  v1[26] = v26;
  *(_QWORD *)(v6 - 216) = v25;
  *(_QWORD *)(v6 - 208) = v26;
  MEMORY[0x24261512C](255, v6 - 216, v17, 0);
  *(_QWORD *)(v6 - 216) = v13;
  *(_QWORD *)(v6 - 208) = v4;
  *(_QWORD *)(v6 - 200) = v5;
  *(_QWORD *)(v6 - 192) = v3;
  type metadata accessor for StandardHorizontalStackView();
}

void sub_23BFAEF5C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t AssociatedConformanceWitness;
  uint64_t v24;

  v1[24] = a1;
  v7 = MEMORY[0x242615198](&unk_23C0008E8, a1);
  v1[23] = v7;
  *(_QWORD *)(v5 - 216) = a1;
  *(_QWORD *)(v5 - 208) = v7;
  MEMORY[0x24261512C](255, v5 - 216, v3, 0);
  v1[3] = sub_23BFF8968();
  v9 = type metadata accessor for StandardVerticalStackView(255, v2, v4, v8);
  v1[22] = v9;
  v10 = MEMORY[0x242615198](&unk_23C0073B8, v9);
  v1[21] = v10;
  *(_QWORD *)(v5 - 216) = v9;
  *(_QWORD *)(v5 - 208) = v10;
  MEMORY[0x24261512C](255, v5 - 216, v3, 0);
  v12 = type metadata accessor for TallCardView(255, v2, v4, v11);
  v1[20] = v12;
  v13 = MEMORY[0x242615198](&unk_23BFFF0E4, v12);
  v1[19] = v13;
  *(_QWORD *)(v5 - 216) = v12;
  *(_QWORD *)(v5 - 208) = v13;
  MEMORY[0x24261512C](255, v5 - 216, v3, 0);
  v1[18] = sub_23BFF8968();
  v1[1] = sub_23BFF8968();
  v15 = type metadata accessor for VerticalStackCard(255, v2, v4, v14);
  v1[15] = v15;
  v16 = MEMORY[0x242615198](&unk_23C0000E0, v15);
  v1[14] = v16;
  *(_QWORD *)(v5 - 216) = v15;
  *(_QWORD *)(v5 - 208) = v16;
  MEMORY[0x24261512C](255, v5 - 216, v3, 0);
  v1[2] = sub_23BFF8968();
  v18 = type metadata accessor for WideBrickView(255, v2, v4, v17);
  v19 = MEMORY[0x242615198](&protocol conformance descriptor for WideBrickView<A>, v18);
  v1[8] = v19;
  *(_QWORD *)(v5 - 216) = v18;
  *(_QWORD *)(v5 - 208) = v19;
  MEMORY[0x24261512C](255, v5 - 216, v3, 0);
  v1[5] = sub_23BFF8968();
  v1[7] = sub_23BFF8968();
  v1[9] = sub_23BFF8968();
  v1[10] = sub_23BFF8FD4();
  v1[12] = sub_23BFF862C();
  v1[13] = sub_23BFF8968();
  v1[17] = sub_23BFF862C();
  v1[4] = sub_23BFF862C();
  v20 = *v1;
  v21 = *(_QWORD *)(*v1 + 48);
  v22 = *(_QWORD *)(*v1 + 56);
  v1[53] = v22;
  v1[54] = v21;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v24 = *(_QWORD *)(v20 + 152);
  v1[55] = v24;
  *(_QWORD *)(v5 - 216) = v21;
  *(_QWORD *)(v5 - 208) = v22;
  *(_QWORD *)(v5 - 200) = AssociatedConformanceWitness;
  *(_QWORD *)(v5 - 192) = v24;
  type metadata accessor for CanvasContextMenu();
}

uint64_t sub_23BFAF1F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t OpaqueTypeConformance2;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t AssociatedConformanceWitness;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _BYTE *v91;
  uint64_t v92;
  uint64_t v93;
  _BYTE *v94;
  void (*v95)(_BYTE *, uint64_t);
  _BYTE v97[96];

  *(_QWORD *)(v1 + 48) = a1;
  *(_QWORD *)(v1 + 88) = sub_23BFF862C();
  v6 = *(_QWORD *)(v1 + 408);
  *(_QWORD *)(v5 - 216) = *(_QWORD *)(v1 + 416);
  *(_QWORD *)(v5 - 208) = v6;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v8 = *(_QWORD *)(v1 + 392);
  *(_QWORD *)(v5 - 216) = *(_QWORD *)(v1 + 400);
  *(_QWORD *)(v5 - 208) = v8;
  v9 = swift_getOpaqueTypeConformance2();
  v10 = *(_QWORD *)(v1 + 352);
  *(_QWORD *)(v5 - 216) = *(_QWORD *)(v1 + 360);
  *(_QWORD *)(v5 - 208) = v10;
  v11 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v5 - 232) = v9;
  *(_QWORD *)(v5 - 224) = v11;
  v12 = MEMORY[0x24BDEF3E0];
  *(_QWORD *)(v5 - 240) = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], *(_QWORD *)(v1 + 336), v5 - 232);
  v13 = MEMORY[0x242615198](MEMORY[0x24BDF3F50], *(_QWORD *)(v1 + 368), v5 - 240);
  v14 = MEMORY[0x24BDECC60];
  *(_QWORD *)(v5 - 256) = v13;
  *(_QWORD *)(v5 - 248) = v14;
  v15 = MEMORY[0x242615198](MEMORY[0x24BDED308], *(_QWORD *)(v1 + 344), v5 - 256);
  v16 = sub_23BEA1F94(&qword_256AE3920, &qword_256AE3910, MEMORY[0x24BDF43B0]);
  *(_QWORD *)(v1 + 1264) = v15;
  *(_QWORD *)(v1 + 1272) = v16;
  v17 = MEMORY[0x242615198](v12, *(_QWORD *)(v1 + 376), v1 + 1264);
  v18 = sub_23BEA1F94(&qword_256AE3928, &qword_256AE3918, MEMORY[0x24BDF4700]);
  *(_QWORD *)(v1 + 1248) = v17;
  *(_QWORD *)(v1 + 1256) = v18;
  v19 = MEMORY[0x242615198](v12, *(_QWORD *)(v1 + 384), v1 + 1248);
  *(_QWORD *)(v1 + 1232) = OpaqueTypeConformance2;
  *(_QWORD *)(v1 + 1240) = v19;
  v20 = MEMORY[0x242615198](v12, *(_QWORD *)(v1 + 256), v1 + 1232);
  v21 = *(_QWORD *)(v1 + 320);
  *(_QWORD *)(v5 - 216) = *(_QWORD *)(v1 + 328);
  *(_QWORD *)(v5 - 208) = v21;
  v22 = swift_getOpaqueTypeConformance2();
  v23 = *(_QWORD *)(v1 + 304);
  *(_QWORD *)(v5 - 216) = *(_QWORD *)(v1 + 312);
  *(_QWORD *)(v5 - 208) = v23;
  v24 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v1 + 1216) = v22;
  *(_QWORD *)(v1 + 1224) = v24;
  v25 = MEMORY[0x242615198](v12, *(_QWORD *)(v1 + 296), v1 + 1216);
  *(_QWORD *)(v1 + 1200) = v20;
  *(_QWORD *)(v1 + 1208) = v25;
  v26 = MEMORY[0x242615198](v12, *(_QWORD *)(v1 + 128), v1 + 1200);
  v27 = *(_QWORD *)(v1 + 280);
  *(_QWORD *)(v5 - 216) = *(_QWORD *)(v1 + 288);
  *(_QWORD *)(v5 - 208) = v27;
  v28 = swift_getOpaqueTypeConformance2();
  v29 = *(_QWORD *)(v1 + 264);
  *(_QWORD *)(v5 - 216) = *(_QWORD *)(v1 + 272);
  *(_QWORD *)(v5 - 208) = v29;
  v30 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v1 + 1184) = v28;
  *(_QWORD *)(v1 + 1192) = v30;
  v31 = MEMORY[0x242615198](v12, *(_QWORD *)(v1 + 200), v1 + 1184);
  v32 = *(_QWORD *)(v1 + 240);
  *(_QWORD *)(v5 - 216) = *(_QWORD *)(v1 + 248);
  *(_QWORD *)(v5 - 208) = v32;
  *(_QWORD *)(v1 + 1168) = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v1 + 1176) = v30;
  v33 = MEMORY[0x242615198](v12, *(_QWORD *)(v1 + 224), v1 + 1168);
  *(_QWORD *)(v1 + 1152) = v31;
  *(_QWORD *)(v1 + 1160) = v33;
  v34 = MEMORY[0x242615198](v12, *(_QWORD *)(v1 + 232), v1 + 1152);
  *(_QWORD *)(v1 + 1136) = v26;
  *(_QWORD *)(v1 + 1144) = v34;
  v35 = MEMORY[0x242615198](v12, v3, v1 + 1136);
  v36 = *(_QWORD *)(v1 + 208);
  *(_QWORD *)(v5 - 216) = *(_QWORD *)(v1 + 216);
  *(_QWORD *)(v5 - 208) = v36;
  v37 = swift_getOpaqueTypeConformance2();
  v38 = *(_QWORD *)(v1 + 184);
  *(_QWORD *)(v5 - 216) = *(_QWORD *)(v1 + 192);
  *(_QWORD *)(v5 - 208) = v38;
  v39 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v1 + 1120) = v37;
  *(_QWORD *)(v1 + 1128) = v39;
  v40 = MEMORY[0x242615198](v12, *(_QWORD *)(v1 + 24), v1 + 1120);
  v41 = *(_QWORD *)(v1 + 168);
  *(_QWORD *)(v5 - 216) = *(_QWORD *)(v1 + 176);
  *(_QWORD *)(v5 - 208) = v41;
  v42 = swift_getOpaqueTypeConformance2();
  v43 = *(_QWORD *)(v1 + 152);
  *(_QWORD *)(v5 - 216) = *(_QWORD *)(v1 + 160);
  *(_QWORD *)(v5 - 208) = v43;
  v44 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v1 + 1104) = v42;
  *(_QWORD *)(v1 + 1112) = v44;
  v45 = MEMORY[0x242615198](v12, *(_QWORD *)(v1 + 144), v1 + 1104);
  *(_QWORD *)(v1 + 1088) = v40;
  *(_QWORD *)(v1 + 1096) = v45;
  v46 = MEMORY[0x242615198](v12, *(_QWORD *)(v1 + 8), v1 + 1088);
  v47 = *(_QWORD *)(v1 + 112);
  *(_QWORD *)(v5 - 216) = *(_QWORD *)(v1 + 120);
  *(_QWORD *)(v5 - 208) = v47;
  *(_QWORD *)(v1 + 1072) = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v1 + 1080) = *(_QWORD *)(v1 + 600);
  v48 = MEMORY[0x242615198](v12, *(_QWORD *)(v1 + 16), v1 + 1072);
  v49 = *(_QWORD *)(v1 + 64);
  *(_QWORD *)(v5 - 216) = v4;
  *(_QWORD *)(v5 - 208) = v49;
  v50 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v1 + 1056) = v48;
  *(_QWORD *)(v1 + 1064) = v50;
  v51 = MEMORY[0x242615198](v12, *(_QWORD *)(v1 + 40), v1 + 1056);
  *(_QWORD *)(v1 + 1040) = v46;
  *(_QWORD *)(v1 + 1048) = v51;
  v52 = MEMORY[0x242615198](v12, *(_QWORD *)(v1 + 56), v1 + 1040);
  *(_QWORD *)(v1 + 1024) = v35;
  *(_QWORD *)(v1 + 1032) = v52;
  *(_QWORD *)(v1 + 1016) = MEMORY[0x242615198](v12, *(_QWORD *)(v1 + 72), v1 + 1024);
  *(_QWORD *)(v1 + 1000) = MEMORY[0x242615198](MEMORY[0x24BDF3F50], *(_QWORD *)(v1 + 80), v1 + 1016);
  *(_QWORD *)(v1 + 1008) = *(_QWORD *)(v1 + 448);
  v53 = MEMORY[0x24BDED308];
  v54 = MEMORY[0x242615198](MEMORY[0x24BDED308], *(_QWORD *)(v1 + 96), v1 + 1000);
  *(_QWORD *)(v1 + 984) = MEMORY[0x24BDF5138];
  *(_QWORD *)(v1 + 992) = v54;
  v55 = MEMORY[0x242615198](v12, *(_QWORD *)(v1 + 104), v1 + 984);
  v56 = MEMORY[0x24BDF0910];
  *(_QWORD *)(v1 + 968) = v55;
  *(_QWORD *)(v1 + 976) = v56;
  *(_QWORD *)(v1 + 952) = MEMORY[0x242615198](v53, *(_QWORD *)(v1 + 136), v1 + 968);
  *(_QWORD *)(v1 + 960) = v56;
  v57 = MEMORY[0x242615198](v53, *(_QWORD *)(v1 + 32), v1 + 952);
  v58 = MEMORY[0x242615198](&unk_23BFFEE18, *(_QWORD *)(v1 + 48));
  *(_QWORD *)(v1 + 936) = v57;
  *(_QWORD *)(v1 + 944) = v58;
  v59 = v53;
  v60 = *(_QWORD *)(v1 + 88);
  v61 = MEMORY[0x242615198](v59, v60, v1 + 936);
  *(_QWORD *)(v5 - 216) = v60;
  *(_QWORD *)(v5 - 208) = v61;
  v62 = v60;
  v63 = MEMORY[0x24261512C](255, v5 - 216, MEMORY[0x24BDF30F0], 0);
  *(_QWORD *)(v5 - 216) = v62;
  *(_QWORD *)(v5 - 208) = v61;
  v64 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v5 - 216) = v63;
  *(_QWORD *)(v5 - 208) = v64;
  MEMORY[0x24261512C](255, v5 - 216, MEMORY[0x24BEC6710], 0);
  v65 = sub_23BFF8968();
  v66 = *(_QWORD *)(v1 + 472);
  v67 = MEMORY[0x242615198](MEMORY[0x24BEE12D8], v66);
  v68 = *(_QWORD *)(v1 + 480);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(_QWORD *)(v5 - 216) = v66;
  *(_QWORD *)(v5 - 208) = v68;
  *(_QWORD *)(v5 - 200) = v65;
  *(_QWORD *)(v5 - 192) = v67;
  *(_QWORD *)(v5 - 184) = AssociatedConformanceWitness;
  v70 = sub_23BFF910C();
  *(_QWORD *)(v5 - 216) = v63;
  *(_QWORD *)(v5 - 208) = v64;
  *(_QWORD *)(v1 + 920) = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v1 + 928) = v64;
  *(_QWORD *)(v1 + 912) = MEMORY[0x242615198](v12, v65, v1 + 920);
  MEMORY[0x242615198](MEMORY[0x24BDF4A08], v70, v1 + 912);
  v71 = sub_23BFF91FC();
  v72 = MEMORY[0x242615198](MEMORY[0x24BDF5198], v71);
  *(_QWORD *)(v5 - 216) = v71;
  *(_QWORD *)(v5 - 208) = v72;
  MEMORY[0x24261512C](255, v5 - 216, MEMORY[0x24BDF2D58], 0);
  *(_QWORD *)(v5 - 216) = v71;
  *(_QWORD *)(v5 - 208) = v72;
  swift_getOpaqueTypeConformance2();
  v73 = sub_23BFF8434();
  v74 = sub_23BFF8B0C();
  v75 = MEMORY[0x242615198](MEMORY[0x24BDEB238], v73);
  *(_QWORD *)(v5 - 216) = v73;
  *(_QWORD *)(v5 - 208) = v74;
  v76 = MEMORY[0x24BDF10F0];
  *(_QWORD *)(v5 - 200) = v75;
  *(_QWORD *)(v5 - 192) = v76;
  v77 = MEMORY[0x24261512C](255, v5 - 216, MEMORY[0x24BDF3000], 0);
  *(_QWORD *)(v5 - 216) = v73;
  *(_QWORD *)(v5 - 208) = v74;
  *(_QWORD *)(v5 - 200) = v75;
  *(_QWORD *)(v5 - 192) = v76;
  v78 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v5 - 216) = v77;
  *(_QWORD *)(v5 - 208) = v78;
  MEMORY[0x24261512C](255, v5 - 216, MEMORY[0x24BDF26E8], 0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE5180);
  v79 = *(_QWORD *)(v1 + 512);
  v80 = sub_23BFF913C();
  v81 = sub_23BF0A0F0();
  v82 = MEMORY[0x242615198](&unk_23C0051E8, *(_QWORD *)(v1 + 520));
  v83 = sub_23BEA1BB8((unint64_t *)&qword_256AE5188, (uint64_t (*)(uint64_t))MEMORY[0x24BDF02F8], MEMORY[0x24BDF02F0]);
  *(_QWORD *)(v1 + 896) = v82;
  *(_QWORD *)(v1 + 904) = v83;
  v84 = MEMORY[0x242615198](MEMORY[0x24BDED308], *(_QWORD *)(v1 + 528), v1 + 896);
  *(_QWORD *)(v1 + 880) = v81;
  *(_QWORD *)(v1 + 888) = v84;
  *(_QWORD *)(v1 + 872) = MEMORY[0x242615198](v12, *(_QWORD *)(v1 + 536), v1 + 880);
  v85 = MEMORY[0x242615198](MEMORY[0x24BDF5578], v79, v1 + 872);
  *(_QWORD *)(v5 - 216) = v77;
  *(_QWORD *)(v5 - 208) = v78;
  v86 = swift_getOpaqueTypeConformance2();
  v87 = sub_23BF0A154();
  *(_QWORD *)(v1 + 848) = v85;
  *(_QWORD *)(v1 + 856) = v86;
  *(_QWORD *)(v1 + 864) = v87;
  MEMORY[0x242615198](MEMORY[0x24BDF4AF8], v80, v1 + 848);
  v88 = sub_23BFF90AC();
  v89 = *(_QWORD *)(v88 - 8);
  MEMORY[0x24BDAC7A8](v88);
  v91 = &v97[-((v90 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v92);
  v94 = &v97[-v93];
  sub_23BFF88A8();
  *(_QWORD *)(v1 + 640) = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v1 + 648) = *(_QWORD *)(v1 + 456);
  *(_QWORD *)(v1 + 656) = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v1 + 664) = *(_QWORD *)(v1 + 576);
  *(_QWORD *)(v1 + 672) = *(_QWORD *)(v1 + 432);
  *(_QWORD *)(v1 + 680) = *(_QWORD *)(v1 + 424);
  *(_QWORD *)(v1 + 688) = *(_QWORD *)(v1 + 584);
  *(_OWORD *)(v1 + 696) = *(_OWORD *)(v2 + 72);
  *(_QWORD *)(v1 + 712) = *(_QWORD *)(v2 + 88);
  *(_QWORD *)(v1 + 720) = *(_QWORD *)(v1 + 544);
  *(_QWORD *)(v1 + 728) = *(_QWORD *)(v2 + 104);
  *(_QWORD *)(v1 + 736) = *(_QWORD *)(v1 + 496);
  *(_QWORD *)(v1 + 744) = *(_QWORD *)(v2 + 120);
  *(_QWORD *)(v1 + 752) = *(_QWORD *)(v1 + 616);
  *(_QWORD *)(v1 + 760) = *(_QWORD *)(v1 + 464);
  *(_QWORD *)(v1 + 768) = *(_QWORD *)(v1 + 592);
  *(_QWORD *)(v1 + 776) = *(_QWORD *)(v1 + 440);
  *(_QWORD *)(v1 + 784) = *(_QWORD *)(v1 + 600);
  *(_QWORD *)(v1 + 792) = *(_QWORD *)(v2 + 168);
  *(_QWORD *)(v1 + 800) = *(_QWORD *)(v1 + 552);
  *(_QWORD *)(v1 + 808) = *(_QWORD *)(v2 + 184);
  *(_QWORD *)(v1 + 816) = *(_QWORD *)(v1 + 504);
  *(_QWORD *)(v1 + 824) = *(_QWORD *)(v1 + 608);
  *(_QWORD *)(v1 + 832) = *(_QWORD *)(v1 + 560);
  sub_23BFF90A0();
  MEMORY[0x242615198](MEMORY[0x24BDF4700], v88);
  sub_23BEA72EC((uint64_t)v91, v88, (uint64_t)v94);
  v95 = *(void (**)(_BYTE *, uint64_t))(v89 + 8);
  v95(v91, v88);
  sub_23BEA5C0C((uint64_t)v94, v88, *(_QWORD *)(v1 + 568));
  return ((uint64_t (*)(_BYTE *, uint64_t))v95)(v94, v88);
}

void sub_23BFAFB70()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3528);
  type metadata accessor for CanvasSectionHeaderView();
}

void sub_23BFAFC58(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1[71] = a1;
  sub_23BFF8A4C();
  v1[72] = sub_23BFF862C();
  v1[73] = sub_23BFF8968();
  v8 = sub_23BFF96A0();
  v1[57] = *(_QWORD *)(v3 + 32);
  v1[58] = v8;
  v1[56] = swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  v1[55] = sub_23BFF94C0();
  *(_QWORD *)(v7 - 216) = v2;
  *(_QWORD *)(v7 - 208) = v4;
  *(_QWORD *)(v7 - 200) = v4;
  *(_QWORD *)(v7 - 192) = v6;
  *(_QWORD *)(v7 - 184) = v5;
  *(_QWORD *)(v7 - 176) = v5;
  type metadata accessor for ActionCardView();
}

void sub_23BFAFD08(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1[49] = a1;
  v8 = MEMORY[0x242615198](&unk_23C005608, a1);
  v1[48] = v8;
  *(_QWORD *)(v6 - 216) = a1;
  *(_QWORD *)(v6 - 208) = v8;
  v1[43] = MEMORY[0x24261512C](255, v6 - 216, MEMORY[0x24BDF3948], 0);
  v1[36] = sub_23BFF8ADC();
  v9 = (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088];
  v10 = sub_23BFF862C();
  v11 = sub_23BFF862C();
  v1[47] = v11;
  v12 = sub_23BEA1BB8((unint64_t *)&qword_256AE3908, v9, MEMORY[0x24BDF1078]);
  v1[54] = v12;
  *(_QWORD *)(v6 - 104) = v5;
  *(_QWORD *)(v6 - 96) = v12;
  v13 = MEMORY[0x24BDED308];
  v14 = MEMORY[0x242615198](MEMORY[0x24BDED308], v10, v6 - 104);
  v15 = MEMORY[0x24BDEEC40];
  *(_QWORD *)(v6 - 120) = v14;
  *(_QWORD *)(v6 - 112) = v15;
  v16 = MEMORY[0x242615198](v13, v11, v6 - 120);
  v1[46] = v16;
  *(_QWORD *)(v6 - 216) = v11;
  *(_QWORD *)(v6 - 208) = v16;
  v17 = MEMORY[0x24BDF3100];
  MEMORY[0x24261512C](255, v6 - 216, MEMORY[0x24BDF3100], 0);
  v18 = sub_23BFF862C();
  v1[40] = v18;
  v19 = MEMORY[0x24BDEBEE0];
  *(_QWORD *)(v6 - 136) = v14;
  *(_QWORD *)(v6 - 128) = v19;
  v20 = MEMORY[0x242615198](v13, v18, v6 - 136);
  v1[39] = v20;
  *(_QWORD *)(v6 - 216) = v18;
  *(_QWORD *)(v6 - 208) = v20;
  MEMORY[0x24261512C](255, v6 - 216, v17, 0);
  v1[37] = sub_23BFF8968();
  v1[41] = sub_23BFF8FD4();
  v1[38] = sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3910);
  v1[44] = sub_23BFF8968();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3918);
  v1[45] = sub_23BFF8968();
  v1[28] = sub_23BFF8968();
  *(_QWORD *)(v6 - 216) = v2;
  *(_QWORD *)(v6 - 208) = v3;
  v21 = v1[82];
  *(_QWORD *)(v6 - 200) = v3;
  *(_QWORD *)(v6 - 192) = v21;
  *(_QWORD *)(v6 - 184) = v1[78];
  *(_QWORD *)(v6 - 176) = v5;
  *(_QWORD *)(v6 - 168) = v4;
  *(_QWORD *)(v6 - 160) = v4;
  v22 = v1[80];
  *(_QWORD *)(v6 - 152) = v1[83];
  *(_QWORD *)(v6 - 144) = v22;
  type metadata accessor for FullWidthStageView();
}

void sub_23BFAFF28(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1[43] = a1;
  v8 = MEMORY[0x242615198](&unk_23C0077B8, a1);
  v1[42] = v8;
  *(_QWORD *)(v6 - 216) = a1;
  *(_QWORD *)(v6 - 208) = v8;
  v9 = MEMORY[0x24BDF3948];
  MEMORY[0x24261512C](255, v6 - 216, MEMORY[0x24BDF3948], 0);
  v1[52] = v3;
  v1[53] = v4;
  v11 = type metadata accessor for InfoActionCardView(255, v3, v4, v10);
  v1[35] = v11;
  v12 = MEMORY[0x242615198](&unk_23C007F20, v11);
  v1[34] = v12;
  *(_QWORD *)(v6 - 216) = v11;
  *(_QWORD *)(v6 - 208) = v12;
  MEMORY[0x24261512C](255, v6 - 216, v9, 0);
  v1[33] = sub_23BFF8968();
  v1[13] = sub_23BFF8968();
  v13 = v2;
  v14 = v2;
  v15 = v5;
  v17 = type metadata accessor for LargeBrickView(255, v14, v5, v16);
  v1[32] = v17;
  v18 = MEMORY[0x242615198](&protocol conformance descriptor for LargeBrickView<A>, v17);
  v1[31] = v18;
  *(_QWORD *)(v6 - 216) = v17;
  *(_QWORD *)(v6 - 208) = v18;
  MEMORY[0x24261512C](255, v6 - 216, v9, 0);
  v20 = type metadata accessor for DynamicBrickView(255, v13, v5, v19);
  v1[30] = v20;
  v21 = MEMORY[0x242615198](&protocol conformance descriptor for DynamicBrickView<A>, v20);
  v1[29] = v21;
  *(_QWORD *)(v6 - 216) = v20;
  *(_QWORD *)(v6 - 208) = v21;
  MEMORY[0x24261512C](255, v6 - 216, v9, 0);
  v1[21] = sub_23BFF8968();
  v23 = type metadata accessor for MonogramVerticalStackView(255, v13, v5, v22);
  v1[27] = v23;
  v24 = MEMORY[0x242615198](&unk_23BFFA1F4, v23);
  v1[26] = v24;
  *(_QWORD *)(v6 - 216) = v23;
  *(_QWORD *)(v6 - 208) = v24;
  MEMORY[0x24261512C](255, v6 - 216, v9, 0);
  v1[24] = sub_23BFF8968();
  v1[25] = sub_23BFF8968();
  sub_23BFF8968();
  v26 = type metadata accessor for StandardCardView(255, v13, v15, v25);
  v1[23] = v26;
  v27 = MEMORY[0x242615198](&unk_23C007BD0, v26);
  v1[22] = v27;
  *(_QWORD *)(v6 - 216) = v26;
  *(_QWORD *)(v6 - 208) = v27;
  MEMORY[0x24261512C](255, v6 - 216, v9, 0);
  *(_QWORD *)(v6 - 216) = v13;
  *(_QWORD *)(v6 - 208) = v3;
  *(_QWORD *)(v6 - 200) = v15;
  *(_QWORD *)(v6 - 192) = v4;
  type metadata accessor for StandardHorizontalStackView();
}

void sub_23BFB0170(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedConformanceWitness;
  uint64_t v23;
  uint64_t v24;

  v1[20] = a1;
  v7 = MEMORY[0x242615198](&unk_23C0008E8, a1);
  v1[19] = v7;
  *(_QWORD *)(v5 - 216) = a1;
  *(_QWORD *)(v5 - 208) = v7;
  MEMORY[0x24261512C](255, v5 - 216, v4, 0);
  v1[2] = sub_23BFF8968();
  v9 = type metadata accessor for StandardVerticalStackView(255, v3, v2, v8);
  v1[18] = v9;
  v10 = MEMORY[0x242615198](&unk_23C0073B8, v9);
  v1[17] = v10;
  *(_QWORD *)(v5 - 216) = v9;
  *(_QWORD *)(v5 - 208) = v10;
  MEMORY[0x24261512C](255, v5 - 216, v4, 0);
  v12 = type metadata accessor for TallCardView(255, v3, v2, v11);
  v1[16] = v12;
  v13 = MEMORY[0x242615198](&unk_23BFFF0E4, v12);
  v1[15] = v13;
  *(_QWORD *)(v5 - 216) = v12;
  *(_QWORD *)(v5 - 208) = v13;
  MEMORY[0x24261512C](255, v5 - 216, v4, 0);
  v1[14] = sub_23BFF8968();
  *v1 = sub_23BFF8968();
  v14 = v3;
  v1[50] = v3;
  v1[51] = v2;
  v16 = type metadata accessor for VerticalStackCard(255, v3, v2, v15);
  v17 = MEMORY[0x242615198](&unk_23C0000E0, v16);
  v1[12] = v17;
  *(_QWORD *)(v5 - 216) = v16;
  *(_QWORD *)(v5 - 208) = v17;
  MEMORY[0x24261512C](255, v5 - 216, v4, 0);
  v1[1] = sub_23BFF8968();
  v19 = type metadata accessor for WideBrickView(255, v14, v2, v18);
  v20 = MEMORY[0x242615198](&protocol conformance descriptor for WideBrickView<A>, v19);
  v1[6] = v20;
  *(_QWORD *)(v5 - 216) = v19;
  *(_QWORD *)(v5 - 208) = v20;
  MEMORY[0x24261512C](255, v5 - 216, v4, 0);
  v1[3] = sub_23BFF8968();
  v1[5] = sub_23BFF8968();
  v1[8] = sub_23BFF8968();
  v1[9] = sub_23BFF8FD4();
  v1[10] = sub_23BFF862C();
  v1[11] = sub_23BFF8968();
  v1[36] = sub_23BFF862C();
  v1[4] = sub_23BFF862C();
  v21 = v1[76];
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v23 = v1[81];
  *(_QWORD *)(v5 - 216) = v21;
  *(_QWORD *)(v5 - 208) = v23;
  v24 = v1[79];
  *(_QWORD *)(v5 - 200) = AssociatedConformanceWitness;
  *(_QWORD *)(v5 - 192) = v24;
  type metadata accessor for CanvasContextMenu();
}

uint64_t sub_23BFB0404(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t OpaqueTypeConformance2;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t AssociatedConformanceWitness;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _BYTE *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t (*v117)(uint64_t, uint64_t);
  uint64_t v119;
  unint64_t v120;
  _BYTE v121[64];

  v1[7] = a1;
  v6 = sub_23BFF862C();
  v7 = v1[48];
  *(_QWORD *)(v5 - 216) = v1[49];
  *(_QWORD *)(v5 - 208) = v7;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v9 = v1[46];
  *(_QWORD *)(v5 - 216) = v1[47];
  *(_QWORD *)(v5 - 208) = v9;
  v10 = swift_getOpaqueTypeConformance2();
  v11 = v1[39];
  *(_QWORD *)(v5 - 216) = v1[40];
  *(_QWORD *)(v5 - 208) = v11;
  v12 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v5 - 232) = v10;
  *(_QWORD *)(v5 - 224) = v12;
  v13 = MEMORY[0x24BDEF3E0];
  *(_QWORD *)(v5 - 240) = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v1[37], v5 - 232);
  v14 = MEMORY[0x242615198](MEMORY[0x24BDF3F50], v1[41], v5 - 240);
  v15 = MEMORY[0x24BDECC60];
  *(_QWORD *)(v5 - 256) = v14;
  *(_QWORD *)(v5 - 248) = v15;
  v16 = MEMORY[0x242615198](MEMORY[0x24BDED308], v1[38], v5 - 256);
  v17 = sub_23BEA1F94(&qword_256AE3920, &qword_256AE3910, MEMORY[0x24BDF43B0]);
  v1[220] = v16;
  v1[221] = v17;
  v18 = MEMORY[0x242615198](v13, v1[44], v1 + 220);
  v19 = sub_23BEA1F94(&qword_256AE3928, &qword_256AE3918, MEMORY[0x24BDF4700]);
  v1[218] = v18;
  v1[219] = v19;
  v20 = MEMORY[0x242615198](v13, v1[45], v1 + 218);
  v1[216] = OpaqueTypeConformance2;
  v1[217] = v20;
  v21 = MEMORY[0x242615198](v13, v1[28], v1 + 216);
  v22 = v1[42];
  *(_QWORD *)(v5 - 216) = v1[43];
  *(_QWORD *)(v5 - 208) = v22;
  v23 = swift_getOpaqueTypeConformance2();
  v24 = v1[34];
  *(_QWORD *)(v5 - 216) = v1[35];
  *(_QWORD *)(v5 - 208) = v24;
  v25 = swift_getOpaqueTypeConformance2();
  v1[214] = v23;
  v1[215] = v25;
  v26 = MEMORY[0x242615198](v13, v1[33], v1 + 214);
  v1[212] = v21;
  v1[213] = v26;
  v27 = MEMORY[0x242615198](v13, v1[13], v1 + 212);
  v28 = v1[31];
  *(_QWORD *)(v5 - 216) = v1[32];
  *(_QWORD *)(v5 - 208) = v28;
  v29 = swift_getOpaqueTypeConformance2();
  v30 = v1[29];
  *(_QWORD *)(v5 - 216) = v1[30];
  *(_QWORD *)(v5 - 208) = v30;
  v31 = swift_getOpaqueTypeConformance2();
  v1[210] = v29;
  v1[211] = v31;
  v32 = MEMORY[0x242615198](v13, v1[21], v1 + 210);
  v33 = v1[26];
  *(_QWORD *)(v5 - 216) = v1[27];
  *(_QWORD *)(v5 - 208) = v33;
  v1[208] = swift_getOpaqueTypeConformance2();
  v1[209] = v31;
  v34 = MEMORY[0x242615198](v13, v1[24], v1 + 208);
  v1[206] = v32;
  v1[207] = v34;
  v35 = MEMORY[0x242615198](v13, v1[25], v1 + 206);
  v1[204] = v27;
  v1[205] = v35;
  v36 = MEMORY[0x242615198](v13, v4, v1 + 204);
  v37 = v1[22];
  *(_QWORD *)(v5 - 216) = v1[23];
  *(_QWORD *)(v5 - 208) = v37;
  v38 = swift_getOpaqueTypeConformance2();
  v39 = v1[19];
  *(_QWORD *)(v5 - 216) = v1[20];
  *(_QWORD *)(v5 - 208) = v39;
  v40 = swift_getOpaqueTypeConformance2();
  v1[202] = v38;
  v1[203] = v40;
  v41 = MEMORY[0x242615198](v13, v1[2], v1 + 202);
  v42 = v1[17];
  *(_QWORD *)(v5 - 216) = v1[18];
  *(_QWORD *)(v5 - 208) = v42;
  v43 = swift_getOpaqueTypeConformance2();
  v44 = v1[15];
  *(_QWORD *)(v5 - 216) = v1[16];
  *(_QWORD *)(v5 - 208) = v44;
  v45 = swift_getOpaqueTypeConformance2();
  v1[200] = v43;
  v1[201] = v45;
  v46 = MEMORY[0x242615198](v13, v1[14], v1 + 200);
  v1[198] = v41;
  v1[199] = v46;
  v47 = MEMORY[0x242615198](v13, *v1, v1 + 198);
  v48 = v1[12];
  *(_QWORD *)(v5 - 216) = v3;
  *(_QWORD *)(v5 - 208) = v48;
  v1[196] = swift_getOpaqueTypeConformance2();
  v1[197] = v1[83];
  v49 = MEMORY[0x242615198](v13, v1[1], v1 + 196);
  v50 = v1[6];
  *(_QWORD *)(v5 - 216) = v2;
  *(_QWORD *)(v5 - 208) = v50;
  v51 = swift_getOpaqueTypeConformance2();
  v1[194] = v49;
  v1[195] = v51;
  v52 = MEMORY[0x242615198](v13, v1[3], v1 + 194);
  v1[192] = v47;
  v1[193] = v52;
  v53 = MEMORY[0x242615198](v13, v1[5], v1 + 192);
  v1[190] = v36;
  v1[191] = v53;
  v54 = v13;
  v1[189] = MEMORY[0x242615198](v13, v1[8], v1 + 190);
  v1[187] = MEMORY[0x242615198](MEMORY[0x24BDF3F50], v1[9], v1 + 189);
  v1[188] = v1[54];
  v55 = MEMORY[0x24BDED308];
  v56 = MEMORY[0x242615198](MEMORY[0x24BDED308], v1[10], v1 + 187);
  v1[185] = MEMORY[0x24BDF5138];
  v1[186] = v56;
  v57 = MEMORY[0x242615198](v13, v1[11], v1 + 185);
  v58 = MEMORY[0x24BDF0910];
  v1[183] = v57;
  v1[184] = v58;
  v1[181] = MEMORY[0x242615198](v55, v1[36], v1 + 183);
  v1[182] = v58;
  v59 = MEMORY[0x242615198](v55, v1[4], v1 + 181);
  v60 = MEMORY[0x242615198](&unk_23BFFEE18, v1[7]);
  v1[179] = v59;
  v1[180] = v60;
  v61 = MEMORY[0x242615198](v55, v6, v1 + 179);
  *(_QWORD *)(v5 - 216) = v6;
  *(_QWORD *)(v5 - 208) = v61;
  v62 = MEMORY[0x24261512C](255, v5 - 216, MEMORY[0x24BDF30F0], 0);
  *(_QWORD *)(v5 - 216) = v6;
  *(_QWORD *)(v5 - 208) = v61;
  v63 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v5 - 216) = v62;
  *(_QWORD *)(v5 - 208) = v63;
  MEMORY[0x24261512C](255, v5 - 216, MEMORY[0x24BEC6710], 0);
  v64 = sub_23BFF8968();
  v65 = v1[55];
  v66 = MEMORY[0x242615198](MEMORY[0x24BEE12D8], v65);
  v67 = v1[56];
  v68 = v1[75];
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(_QWORD *)(v5 - 216) = v65;
  *(_QWORD *)(v5 - 208) = v67;
  *(_QWORD *)(v5 - 200) = v64;
  *(_QWORD *)(v5 - 192) = v66;
  *(_QWORD *)(v5 - 184) = AssociatedConformanceWitness;
  v70 = sub_23BFF910C();
  *(_QWORD *)(v5 - 216) = v62;
  *(_QWORD *)(v5 - 208) = v63;
  v1[177] = swift_getOpaqueTypeConformance2();
  v1[178] = v63;
  v1[176] = MEMORY[0x242615198](v54, v64, v1 + 177);
  MEMORY[0x242615198](MEMORY[0x24BDF4A08], v70, v1 + 176);
  v71 = sub_23BFF91FC();
  v72 = MEMORY[0x242615198](MEMORY[0x24BDF5198], v71);
  *(_QWORD *)(v5 - 216) = v71;
  *(_QWORD *)(v5 - 208) = v72;
  MEMORY[0x24261512C](255, v5 - 216, MEMORY[0x24BDF2D58], 0);
  *(_QWORD *)(v5 - 216) = v71;
  *(_QWORD *)(v5 - 208) = v72;
  swift_getOpaqueTypeConformance2();
  v73 = sub_23BFF8434();
  v74 = sub_23BFF8B0C();
  v75 = MEMORY[0x242615198](MEMORY[0x24BDEB238], v73);
  *(_QWORD *)(v5 - 216) = v73;
  *(_QWORD *)(v5 - 208) = v74;
  v76 = MEMORY[0x24BDF10F0];
  *(_QWORD *)(v5 - 200) = v75;
  *(_QWORD *)(v5 - 192) = v76;
  v77 = MEMORY[0x24261512C](255, v5 - 216, MEMORY[0x24BDF3000], 0);
  v1[54] = v77;
  *(_QWORD *)(v5 - 216) = v73;
  *(_QWORD *)(v5 - 208) = v74;
  *(_QWORD *)(v5 - 200) = v75;
  *(_QWORD *)(v5 - 192) = v76;
  v78 = swift_getOpaqueTypeConformance2();
  v1[49] = v78;
  *(_QWORD *)(v5 - 216) = v77;
  *(_QWORD *)(v5 - 208) = v78;
  v1[56] = MEMORY[0x24261512C](255, v5 - 216, MEMORY[0x24BDF26E8], 0);
  v1[48] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE5180);
  v79 = v1[58];
  v80 = sub_23BFF913C();
  v1[57] = *(_QWORD *)(v80 - 8);
  MEMORY[0x24BDAC7A8](v80);
  v82 = &v121[-((v81 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v83);
  v1[55] = &v121[-v84];
  v85 = v1[66];
  v1[142] = v85;
  v86 = v1[52];
  v1[143] = v86;
  v87 = v1[68];
  v1[144] = v87;
  v88 = v1[50];
  v1[145] = v88;
  v89 = v1[76];
  v1[146] = v89;
  v90 = v1[81];
  v1[147] = v90;
  v91 = v1[82];
  v1[148] = v91;
  v93 = v1[61];
  v92 = v1[62];
  v1[149] = v92;
  v94 = v1[65];
  v1[150] = v94;
  v1[151] = v93;
  v95 = v1[59];
  v96 = v1[60];
  v1[152] = v95;
  v98 = v1[63];
  v97 = v1[64];
  v1[153] = v98;
  v99 = v1[78];
  v1[154] = v99;
  v1[155] = v97;
  v100 = v68;
  v1[156] = v68;
  v101 = v1[53];
  v1[157] = v101;
  v102 = v1[51];
  v1[158] = v102;
  v103 = v1[79];
  v1[159] = v103;
  v104 = v1[83];
  v1[160] = v104;
  v105 = v1[67];
  v1[161] = v105;
  v1[162] = v96;
  v106 = v1[69];
  v1[163] = v106;
  v107 = v1[80];
  v1[164] = v107;
  v108 = v1[77];
  v1[165] = v108;
  v109 = v1[70];
  v1[166] = v109;
  v1[114] = v85;
  v1[115] = v86;
  v1[116] = v87;
  v1[117] = v88;
  v1[118] = v89;
  v1[119] = v90;
  v1[120] = v91;
  v1[121] = v92;
  v1[122] = v94;
  v1[123] = v93;
  v1[124] = v95;
  v1[125] = v98;
  v1[126] = v99;
  v1[127] = v97;
  v1[128] = v100;
  v1[129] = v101;
  v1[130] = v102;
  v1[131] = v103;
  v1[132] = v104;
  v1[133] = v105;
  v1[134] = v96;
  v1[135] = v106;
  v1[136] = v107;
  v1[137] = v108;
  v1[138] = v109;
  v1[86] = v85;
  v1[87] = v86;
  v1[88] = v87;
  v1[89] = v88;
  v1[90] = v89;
  v1[91] = v90;
  v1[92] = v91;
  v1[93] = v92;
  v1[94] = v94;
  v1[95] = v93;
  v1[96] = v95;
  v1[97] = v98;
  v1[98] = v99;
  v1[99] = v97;
  v1[100] = v100;
  v1[101] = v101;
  v1[102] = v102;
  v1[103] = v103;
  v1[104] = v104;
  v1[105] = v105;
  v1[106] = v96;
  v1[107] = v106;
  v1[108] = v107;
  v1[109] = v108;
  v1[110] = v109;
  v110 = sub_23BF0A0F0();
  v111 = MEMORY[0x242615198](&unk_23C0051E8, v1[71]);
  v112 = sub_23BEA1BB8((unint64_t *)&qword_256AE5188, (uint64_t (*)(uint64_t))MEMORY[0x24BDF02F8], MEMORY[0x24BDF02F0]);
  v1[174] = v111;
  v1[175] = v112;
  v113 = MEMORY[0x242615198](MEMORY[0x24BDED308], v1[72], v1 + 174);
  v1[172] = v110;
  v1[173] = v113;
  v1[171] = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v1[73], v1 + 172);
  v114 = MEMORY[0x242615198](MEMORY[0x24BDF5578], v79, v1 + 171);
  v115 = v1[49];
  *(_QWORD *)(v5 - 216) = v1[54];
  *(_QWORD *)(v5 - 208) = v115;
  v119 = swift_getOpaqueTypeConformance2();
  v120 = sub_23BF0A154();
  sub_23BFAE500((uint64_t)sub_23BFBB790, (uint64_t)(v1 + 140), (uint64_t)sub_23BFBB79C, (uint64_t)(v1 + 112), (void (*)(uint64_t))sub_23BFBB7A8);
  v1[168] = v114;
  v1[169] = v119;
  v1[170] = v120;
  MEMORY[0x242615198](MEMORY[0x24BDF4AF8], v80, v1 + 168);
  v116 = v1[55];
  sub_23BEA72EC((uint64_t)v82, v80, v116);
  v117 = *(uint64_t (**)(uint64_t, uint64_t))(v1[57] + 8);
  v117((uint64_t)v82, v80);
  sub_23BEA5C0C(v116, v80, v1[74]);
  return v117(v116, v80);
}

void sub_23BFB0E68()
{
  sub_23BF140F8((void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BFAFB70);
}

uint64_t sub_23BFB0E74()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_23BFB0ED0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[65];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v49 = a8;
  v38 = a7;
  v47 = a6;
  v46 = a4;
  v45 = a2;
  v33[64] = a1;
  v33[6] = a9;
  v36 = a26;
  v37 = a25;
  v33[63] = a24;
  v33[62] = a23;
  v35 = a22;
  v50 = a21;
  v48 = a20;
  v52 = a17;
  v44 = a16;
  v51 = a15;
  v43 = a14;
  v42 = a13;
  v41 = a12;
  v40 = a11;
  v39 = a10;
  v28 = sub_23BFF8A04();
  v33[4] = *(_QWORD *)(v28 - 8);
  v33[5] = v28;
  MEMORY[0x24BDAC7A8](v28);
  v33[3] = (char *)v33 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_23BFF8AF4();
  MEMORY[0x24BDAC7A8](v30);
  v33[1] = (char *)v33 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_23BFF8B0C();
  v33[2] = *(_QWORD *)(v34 - 8);
  MEMORY[0x24BDAC7A8](v34);
  v33[0] = (char *)v33 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33[61] = *(_QWORD *)(a26 + 32);
  v33[60] = swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  v33[59] = sub_23BFF94C0();
  v53 = a5;
  v54 = a3;
  v55 = a3;
  v56 = a19;
  v57 = a18;
  v58 = a18;
  type metadata accessor for ActionCardView();
}

void sub_23BFB10C8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1[57] = a1;
  v8 = MEMORY[0x242615198](&unk_23C005608, a1);
  v1[56] = v8;
  v1[90] = a1;
  v1[91] = v8;
  v1[51] = MEMORY[0x24261512C](255, v1 + 90, MEMORY[0x24BDF3948], 0);
  v1[44] = sub_23BFF8ADC();
  v9 = (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088];
  v10 = sub_23BFF862C();
  v11 = sub_23BFF862C();
  v1[55] = v11;
  v12 = sub_23BEA1BB8((unint64_t *)&qword_256AE3908, v9, MEMORY[0x24BDF1078]);
  v1[58] = v12;
  *(_QWORD *)(v6 - 136) = v4;
  *(_QWORD *)(v6 - 128) = v12;
  v13 = MEMORY[0x24BDED308];
  v14 = MEMORY[0x242615198](MEMORY[0x24BDED308], v10, v6 - 136);
  v15 = MEMORY[0x24BDEEC40];
  *(_QWORD *)(v6 - 152) = v14;
  *(_QWORD *)(v6 - 144) = v15;
  v16 = MEMORY[0x242615198](v13, v11, v6 - 152);
  v1[54] = v16;
  v1[90] = v11;
  v1[91] = v16;
  v17 = MEMORY[0x24BDF3100];
  MEMORY[0x24261512C](255, v1 + 90, MEMORY[0x24BDF3100], 0);
  v18 = sub_23BFF862C();
  v1[48] = v18;
  v19 = MEMORY[0x24BDEBEE0];
  *(_QWORD *)(v6 - 168) = v14;
  *(_QWORD *)(v6 - 160) = v19;
  v20 = MEMORY[0x242615198](v13, v18, v6 - 168);
  v1[47] = v20;
  v1[90] = v18;
  v1[91] = v20;
  MEMORY[0x24261512C](255, v1 + 90, v17, 0);
  v1[45] = sub_23BFF8968();
  v1[49] = sub_23BFF8FD4();
  v1[46] = sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3910);
  v1[52] = sub_23BFF8968();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3918);
  v1[53] = sub_23BFF8968();
  v1[36] = sub_23BFF8968();
  v1[90] = v5;
  v1[91] = v3;
  v1[92] = v3;
  v1[93] = v1[84];
  v1[94] = v1[86];
  v1[95] = v4;
  v1[96] = v2;
  v1[97] = v2;
  v1[98] = v1[85];
  v1[99] = v1[68];
  type metadata accessor for FullWidthStageView();
}

void sub_23BFB130C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1[51] = a1;
  v7 = MEMORY[0x242615198](&unk_23C0077B8, a1);
  v1[50] = v7;
  v1[90] = a1;
  v1[91] = v7;
  v8 = MEMORY[0x24BDF3948];
  MEMORY[0x24261512C](255, v1 + 90, MEMORY[0x24BDF3948], 0);
  v1[77] = v3;
  v1[78] = v2;
  v10 = type metadata accessor for InfoActionCardView(255, v3, v2, v9);
  v1[43] = v10;
  v11 = MEMORY[0x242615198](&unk_23C007F20, v10);
  v1[42] = v11;
  v1[90] = v10;
  v1[91] = v11;
  MEMORY[0x24261512C](255, v1 + 90, v8, 0);
  v1[41] = sub_23BFF8968();
  v1[21] = sub_23BFF8968();
  v13 = type metadata accessor for LargeBrickView(255, v5, v4, v12);
  v1[40] = v13;
  v14 = MEMORY[0x242615198](&protocol conformance descriptor for LargeBrickView<A>, v13);
  v1[39] = v14;
  v1[90] = v13;
  v1[91] = v14;
  MEMORY[0x24261512C](255, v1 + 90, v8, 0);
  v15 = v4;
  v17 = type metadata accessor for DynamicBrickView(255, v5, v4, v16);
  v1[38] = v17;
  v18 = MEMORY[0x242615198](&protocol conformance descriptor for DynamicBrickView<A>, v17);
  v1[37] = v18;
  v1[90] = v17;
  v1[91] = v18;
  MEMORY[0x24261512C](255, v1 + 90, v8, 0);
  v1[29] = sub_23BFF8968();
  v20 = type metadata accessor for MonogramVerticalStackView(255, v5, v4, v19);
  v1[35] = v20;
  v21 = MEMORY[0x242615198](&unk_23BFFA1F4, v20);
  v1[34] = v21;
  v1[90] = v20;
  v1[91] = v21;
  MEMORY[0x24261512C](255, v1 + 90, v8, 0);
  v1[32] = sub_23BFF8968();
  v1[33] = sub_23BFF8968();
  sub_23BFF8968();
  v23 = type metadata accessor for StandardCardView(255, v5, v15, v22);
  v1[31] = v23;
  v24 = MEMORY[0x242615198](&unk_23C007BD0, v23);
  v1[30] = v24;
  v1[90] = v23;
  v1[91] = v24;
  MEMORY[0x24261512C](255, v1 + 90, v8, 0);
  v1[90] = v5;
  v1[91] = v3;
  v1[92] = v15;
  v1[93] = v2;
  type metadata accessor for StandardHorizontalStackView();
}

void sub_23BFB156C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t AssociatedConformanceWitness;

  v1[28] = a1;
  v6 = MEMORY[0x242615198](&unk_23C0008E8, a1);
  v1[27] = v6;
  v1[90] = a1;
  v1[91] = v6;
  v7 = v2;
  MEMORY[0x24261512C](255, v1 + 90, v2, 0);
  v1[9] = sub_23BFF8968();
  v9 = type metadata accessor for StandardVerticalStackView(255, v4, v3, v8);
  v1[26] = v9;
  v10 = MEMORY[0x242615198](&unk_23C0073B8, v9);
  v1[25] = v10;
  v1[90] = v9;
  v1[91] = v10;
  MEMORY[0x24261512C](255, v1 + 90, v2, 0);
  v12 = type metadata accessor for TallCardView(255, v4, v3, v11);
  v1[24] = v12;
  v13 = MEMORY[0x242615198](&unk_23BFFF0E4, v12);
  v1[23] = v13;
  v1[90] = v12;
  v1[91] = v13;
  MEMORY[0x24261512C](255, v1 + 90, v7, 0);
  v1[22] = sub_23BFF8968();
  v1[7] = sub_23BFF8968();
  v1[81] = v4;
  v1[80] = v3;
  v15 = type metadata accessor for VerticalStackCard(255, v4, v3, v14);
  v16 = MEMORY[0x242615198](&unk_23C0000E0, v15);
  v1[20] = v16;
  v1[90] = v15;
  v1[91] = v16;
  MEMORY[0x24261512C](255, v1 + 90, v7, 0);
  v1[8] = sub_23BFF8968();
  v18 = type metadata accessor for WideBrickView(255, v4, v3, v17);
  v1[14] = v18;
  v19 = MEMORY[0x242615198](&protocol conformance descriptor for WideBrickView<A>, v18);
  v1[13] = v19;
  v1[90] = v18;
  v1[91] = v19;
  MEMORY[0x24261512C](255, v1 + 90, v7, 0);
  v1[10] = sub_23BFF8968();
  v1[12] = sub_23BFF8968();
  v1[16] = sub_23BFF8968();
  v1[17] = sub_23BFF8FD4();
  v1[18] = sub_23BFF862C();
  v1[19] = sub_23BFF8968();
  v1[44] = sub_23BFF862C();
  v1[11] = sub_23BFF862C();
  v20 = v1[82];
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v1[90] = v20;
  v1[91] = v1[69];
  v1[92] = AssociatedConformanceWitness;
  v1[93] = v1[83];
  type metadata accessor for CanvasContextMenu();
}

void sub_23BFB1820(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t OpaqueTypeConformance2;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t AssociatedConformanceWitness;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __n128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v9[15] = a1;
  v13 = sub_23BFF862C();
  v9[90] = v9[57];
  v9[91] = v9[56];
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v9[90] = v9[55];
  v9[91] = v9[54];
  v15 = swift_getOpaqueTypeConformance2();
  v9[90] = v9[48];
  v9[91] = v9[47];
  v16 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v12 - 184) = v15;
  *(_QWORD *)(v12 - 176) = v16;
  v17 = MEMORY[0x24BDEF3E0];
  *(_QWORD *)(v12 - 192) = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v9[45], v12 - 184);
  v18 = MEMORY[0x242615198](MEMORY[0x24BDF3F50], v9[49], v12 - 192);
  v19 = MEMORY[0x24BDECC60];
  *(_QWORD *)(v12 - 208) = v18;
  *(_QWORD *)(v12 - 200) = v19;
  v20 = MEMORY[0x24BDED308];
  v21 = MEMORY[0x242615198](MEMORY[0x24BDED308], v9[46], v12 - 208);
  v22 = sub_23BEA1F94(&qword_256AE3920, &qword_256AE3910, MEMORY[0x24BDF43B0]);
  *(_QWORD *)(v12 - 224) = v21;
  *(_QWORD *)(v12 - 216) = v22;
  v23 = MEMORY[0x242615198](v17, v9[52], v12 - 224);
  v24 = sub_23BEA1F94(&qword_256AE3928, &qword_256AE3918, MEMORY[0x24BDF4700]);
  *(_QWORD *)(v12 - 240) = v23;
  *(_QWORD *)(v12 - 232) = v24;
  v25 = MEMORY[0x242615198](v17, v9[53], v12 - 240);
  *(_QWORD *)(v12 - 256) = OpaqueTypeConformance2;
  *(_QWORD *)(v12 - 248) = v25;
  v26 = MEMORY[0x242615198](v17, v9[36], v12 - 256);
  v9[90] = v9[51];
  v9[91] = v9[50];
  v27 = swift_getOpaqueTypeConformance2();
  v9[90] = v9[43];
  v9[91] = v9[42];
  v28 = swift_getOpaqueTypeConformance2();
  v9[152] = v27;
  v9[153] = v28;
  v29 = MEMORY[0x242615198](v17, v9[41], v9 + 152);
  v9[150] = v26;
  v9[151] = v29;
  v30 = MEMORY[0x242615198](v17, v9[21], v9 + 150);
  v9[90] = v9[40];
  v9[91] = v9[39];
  v31 = swift_getOpaqueTypeConformance2();
  v9[90] = v9[38];
  v9[91] = v9[37];
  v32 = swift_getOpaqueTypeConformance2();
  v9[148] = v31;
  v9[149] = v32;
  v33 = MEMORY[0x242615198](v17, v9[29], v9 + 148);
  v9[90] = v9[35];
  v9[91] = v9[34];
  v9[146] = swift_getOpaqueTypeConformance2();
  v9[147] = v32;
  v34 = MEMORY[0x242615198](v17, v9[32], v9 + 146);
  v9[144] = v33;
  v9[145] = v34;
  v35 = MEMORY[0x242615198](v17, v9[33], v9 + 144);
  v9[142] = v30;
  v9[143] = v35;
  v36 = MEMORY[0x242615198](v17, v11, v9 + 142);
  v9[90] = v9[31];
  v9[91] = v9[30];
  v37 = swift_getOpaqueTypeConformance2();
  v9[90] = v9[28];
  v9[91] = v9[27];
  v38 = swift_getOpaqueTypeConformance2();
  v9[140] = v37;
  v9[141] = v38;
  v39 = MEMORY[0x242615198](v17, v9[9], v9 + 140);
  v9[90] = v9[26];
  v9[91] = v9[25];
  v40 = swift_getOpaqueTypeConformance2();
  v9[90] = v9[24];
  v9[91] = v9[23];
  v41 = swift_getOpaqueTypeConformance2();
  v9[138] = v40;
  v9[139] = v41;
  v42 = MEMORY[0x242615198](v17, v9[22], v9 + 138);
  v9[136] = v39;
  v9[137] = v42;
  v43 = MEMORY[0x242615198](v17, v9[7], v9 + 136);
  v9[90] = v10;
  v9[91] = v9[20];
  v9[134] = swift_getOpaqueTypeConformance2();
  v9[135] = v9[85];
  v44 = MEMORY[0x242615198](v17, v9[8], v9 + 134);
  v9[90] = v9[14];
  v9[91] = v9[13];
  v45 = swift_getOpaqueTypeConformance2();
  v9[132] = v44;
  v9[133] = v45;
  v46 = MEMORY[0x242615198](v17, v9[10], v9 + 132);
  v9[130] = v43;
  v9[131] = v46;
  v47 = MEMORY[0x242615198](v17, v9[12], v9 + 130);
  v9[128] = v36;
  v9[129] = v47;
  v9[127] = MEMORY[0x242615198](v17, v9[16], v9 + 128);
  v9[125] = MEMORY[0x242615198](MEMORY[0x24BDF3F50], v9[17], v9 + 127);
  v9[126] = v9[58];
  v48 = MEMORY[0x242615198](v20, v9[18], v9 + 125);
  v9[123] = MEMORY[0x24BDF5138];
  v9[124] = v48;
  v49 = MEMORY[0x242615198](v17, v9[19], v9 + 123);
  v50 = MEMORY[0x24BDF0910];
  v9[121] = v49;
  v9[122] = v50;
  v9[119] = MEMORY[0x242615198](v20, v9[44], v9 + 121);
  v9[120] = v50;
  v51 = MEMORY[0x242615198](v20, v9[11], v9 + 119);
  v52 = MEMORY[0x242615198](&unk_23BFFEE18, v9[15]);
  v9[117] = v51;
  v9[118] = v52;
  v53 = MEMORY[0x242615198](v20, v13, v9 + 117);
  v9[90] = v13;
  v9[91] = v53;
  v54 = MEMORY[0x24261512C](255, v9 + 90, MEMORY[0x24BDF30F0], 0);
  v9[90] = v13;
  v9[91] = v53;
  v55 = swift_getOpaqueTypeConformance2();
  v9[90] = v54;
  v9[91] = v55;
  MEMORY[0x24261512C](255, v9 + 90, MEMORY[0x24BEC6710], 0);
  v56 = sub_23BFF8968();
  v57 = v9[59];
  v58 = MEMORY[0x242615198](MEMORY[0x24BEE12D8], v57);
  v59 = v9[60];
  v60 = v9[87];
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9[90] = v57;
  v9[91] = v59;
  v9[92] = v56;
  v9[93] = v58;
  v9[94] = AssociatedConformanceWitness;
  v62 = sub_23BFF910C();
  v9[90] = v54;
  v9[91] = v55;
  v9[115] = swift_getOpaqueTypeConformance2();
  v9[116] = v55;
  v9[114] = MEMORY[0x242615198](v17, v56, v9 + 115);
  MEMORY[0x242615198](MEMORY[0x24BDF4A08], v62, v9 + 114);
  v63 = sub_23BFF91FC();
  v64 = MEMORY[0x242615198](MEMORY[0x24BDF5198], v63);
  v9[90] = v63;
  v9[91] = v64;
  v65 = MEMORY[0x24261512C](255, v9 + 90, MEMORY[0x24BDF2D58], 0);
  v9[90] = v63;
  v9[91] = v64;
  v9[49] = swift_getOpaqueTypeConformance2();
  v9[50] = v65;
  v66 = sub_23BFF8434();
  v9[57] = *(_QWORD *)(v66 - 8);
  v67 = MEMORY[0x24BDAC7A8](v66);
  v9[53] = (char *)&a9 - v68;
  v69 = MEMORY[0x242615198](MEMORY[0x24BDEB238], v66, v67);
  v9[90] = v66;
  v70 = v9[65];
  v9[91] = v70;
  v71 = MEMORY[0x24BDF10F0];
  v9[92] = v69;
  v9[93] = v71;
  v72 = MEMORY[0x24261512C](0, v9 + 90, MEMORY[0x24BDF3000], 0);
  v9[59] = *(_QWORD *)(v72 - 8);
  MEMORY[0x24BDAC7A8](v72);
  v9[56] = (char *)&a9 - v73;
  v9[58] = v66;
  v9[90] = v66;
  v9[91] = v70;
  v9[48] = v69;
  v9[92] = v69;
  v9[93] = v71;
  v74 = swift_getOpaqueTypeConformance2();
  v9[61] = v72;
  v9[90] = v72;
  v9[52] = v74;
  v9[91] = v74;
  v75 = MEMORY[0x24261512C](0, v9 + 90, MEMORY[0x24BDF26E8], 0);
  v9[60] = v75;
  v9[55] = *(_QWORD *)(v75 - 8);
  MEMORY[0x24BDAC7A8](v75);
  v9[51] = (char *)&a9 - ((v76 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v77);
  v9[54] = (char *)&a9 - v78;
  v9[90] = v9[76];
  v9[91] = v9[77];
  v9[92] = v9[79];
  v9[93] = v9[81];
  v9[94] = v9[82];
  v9[95] = v9[69];
  v9[96] = v9[84];
  v9[97] = v9[70];
  v9[98] = v9[71];
  v9[99] = v9[72];
  v9[100] = v9[73];
  v9[101] = v9[74];
  v9[102] = v9[86];
  v9[103] = v9[75];
  v9[104] = v60;
  v9[105] = v9[78];
  v9[106] = v9[80];
  v9[107] = v9[83];
  v9[108] = v9[85];
  v9[109] = v9[66];
  v9[110] = v9[62];
  v9[111] = v9[63];
  v9[112] = v9[68];
  v9[113] = v9[67];
  type metadata accessor for HorizontalGridView();
}

uint64_t sub_23BFB20E8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double *v55;
  double v56;
  double v57;
  double v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t, uint64_t);
  _QWORD v67[21];
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  if ((*(_QWORD *)(v9[64] + *(int *)(result + 224)) & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v9[46] = (uint64_t)&a9;
    MEMORY[0x24BDAC7A8](result);
    v19 = v9[77];
    v67[2] = v9[76];
    v67[3] = v19;
    v20 = v9[81];
    v67[4] = v9[79];
    v67[5] = v20;
    v67[6] = v13;
    v67[7] = v12;
    v21 = v12;
    v22 = v15;
    v23 = v9[70];
    v67[8] = v15;
    v67[9] = v23;
    v24 = v9[72];
    v67[10] = v9[71];
    v67[11] = v24;
    v25 = v9[74];
    v67[12] = v9[73];
    v67[13] = v25;
    v26 = v9[75];
    v67[14] = v9[86];
    v67[15] = v26;
    v27 = v9[78];
    v67[16] = v9[87];
    v67[17] = v27;
    v67[18] = v9[80];
    v67[19] = v17;
    v28 = v16;
    v67[20] = v16;
    v68 = v9[66];
    v29 = v68;
    v69 = v14;
    v30 = v14;
    v31 = v10;
    v70 = v10;
    v71 = v18;
    v32 = v18;
    v33 = v11;
    v72 = v11;
    v73 = v34;
    v9[47] = v35;
    sub_23BFAE358((void (*)(uint64_t *))sub_23BFBB8F8, (uint64_t)v67, 0, v36);
    v38 = v37;
    v39 = sub_23BFF8B24();
    v9[46] = (uint64_t)v67;
    MEMORY[0x24BDAC7A8](v39);
    v40 = v9[77];
    v67[-26] = v9[76];
    v67[-25] = v40;
    v41 = v9[81];
    v67[-24] = v9[79];
    v67[-23] = v41;
    v67[-22] = v9[82];
    v67[-21] = v21;
    v42 = v9[70];
    v67[-20] = v22;
    v67[-19] = v42;
    v43 = v9[72];
    v67[-18] = v9[71];
    v67[-17] = v43;
    v44 = v9[74];
    v67[-16] = v9[73];
    v67[-15] = v44;
    v45 = v9[75];
    v67[-14] = v9[86];
    v67[-13] = v45;
    v46 = v9[78];
    v67[-12] = v9[87];
    v67[-11] = v46;
    v47 = v9[83];
    v67[-10] = v9[80];
    v67[-9] = v47;
    v67[-8] = v28;
    v67[-7] = v29;
    v67[-6] = v30;
    v67[-5] = v31;
    v67[-4] = v32;
    v67[-3] = v33;
    v48 = v9[64];
    v67[-2] = v38;
    v67[-1] = v48;
    v49 = v9[53];
    sub_23BFF8440();
    swift_bridgeObjectRelease();
    sub_23BFF8AE8();
    v50 = *v9;
    sub_23BFF8B00();
    v51 = v9[56];
    v52 = v9[58];
    v53 = v9[65];
    sub_23BFF8E30();
    (*(void (**)(uint64_t, uint64_t))(v9[2] + 8))(v50, v53);
    (*(void (**)(uint64_t, uint64_t))(v9[57] + 8))(v49, v52);
    v54 = sub_23BFF8B54();
    v55 = (double *)(v48 + *(int *)(v9[47] + 228));
    v56 = *v55;
    v57 = v55[1];
    v58 = v55[2];
    v59 = v55[3];
    v60 = v9[3];
    sub_23BFF89F8();
    v62 = v9[51];
    v61 = v9[52];
    v63 = v9[61];
    MEMORY[0x242614124](v54, v60, v63, v61, v58, v57, v56, v59);
    (*(void (**)(uint64_t, uint64_t))(v9[4] + 8))(v60, v9[5]);
    (*(void (**)(uint64_t, uint64_t))(v9[59] + 8))(v51, v63);
    v9[90] = v63;
    v9[91] = v61;
    swift_getOpaqueTypeConformance2();
    v64 = v9[54];
    v65 = v9[60];
    sub_23BEA72EC(v62, v65, v64);
    v66 = *(void (**)(uint64_t, uint64_t))(v9[55] + 8);
    v66(v62, v65);
    sub_23BEA5C0C(v64, v65, v9[6]);
    return ((uint64_t (*)(uint64_t, uint64_t))v66)(v64, v65);
  }
  return result;
}

void sub_23BFB2430(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, __int128 a9, __int128 a10, __int128 a11, __int128 a12, __int128 a13, __int128 a14, __int128 a15, __int128 a16, uint64_t a17, uint64_t a18)
{
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;

  v36 = a1;
  v37 = a8;
  v35 = a16;
  v34 = a15;
  v33 = a14;
  v32 = a13;
  v31 = a12;
  v30 = a11;
  v29 = a10;
  v28 = a9;
  v24 = sub_23BFF9154();
  MEMORY[0x24BDAC7A8](v24);
  v26 = (__int128 *)((char *)&v28 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v26 = xmmword_23BFFF290;
  (*(void (**)(_OWORD *, _QWORD))(v27 + 104))(v26, *MEMORY[0x24BDF4D40]);
  v38 = a2;
  v39 = a3;
  v40 = a4;
  v41 = a5;
  v42 = a6;
  v43 = a7;
  v44 = v28;
  v45 = v29;
  v46 = v30;
  v47 = v31;
  v48 = v32;
  v49 = v33;
  v50 = v34;
  v51 = v35;
  v52 = a17;
  v53 = a18;
  type metadata accessor for HorizontalGridView();
}

uint64_t sub_23BFB25CC()
{
  sub_23BFF9190();
  return sub_23BFF916C();
}

void sub_23BFB262C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[192];

  v31[68] = a8;
  v31[75] = a7;
  v31[56] = a5;
  v31[73] = a3;
  v31[61] = a2;
  v31[62] = a9;
  v31[74] = a1;
  v31[59] = a25;
  v31[58] = a24;
  v31[55] = a15;
  v31[54] = a14;
  v31[72] = a13;
  v31[70] = a12;
  v31[57] = a23;
  v31[76] = a22;
  v31[71] = a17;
  v31[77] = a16;
  v31[69] = a11;
  v31[81] = a10;
  v31[80] = a21;
  v31[78] = a18;
  v31[67] = a26;
  v31[79] = a27;
  v29 = sub_23BFF89D4();
  MEMORY[0x24BDAC7A8](v29);
  v31[60] = (char *)v31 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31[53] = *(_QWORD *)(a27 + 32);
  v31[52] = swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  v31[51] = sub_23BFF94C0();
  v31[110] = a6;
  v31[111] = a4;
  v31[112] = a4;
  v31[113] = a20;
  v31[114] = a19;
  v31[115] = a19;
  type metadata accessor for ActionCardView();
}

void sub_23BFB27A4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1[49] = a1;
  v8 = MEMORY[0x242615198](&unk_23C005608, a1);
  v1[48] = v8;
  v1[110] = a1;
  v1[111] = v8;
  v1[43] = MEMORY[0x24261512C](255, v1 + 110, MEMORY[0x24BDF3948], 0);
  v1[36] = sub_23BFF8ADC();
  v9 = (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088];
  v10 = sub_23BFF862C();
  v11 = sub_23BFF862C();
  v1[47] = v11;
  v12 = sub_23BEA1BB8((unint64_t *)&qword_256AE3908, v9, MEMORY[0x24BDF1078]);
  v1[50] = v12;
  *(_QWORD *)(v6 - 104) = v5;
  *(_QWORD *)(v6 - 96) = v12;
  v13 = MEMORY[0x24BDED308];
  v14 = MEMORY[0x242615198](MEMORY[0x24BDED308], v10, v6 - 104);
  v15 = MEMORY[0x24BDEEC40];
  *(_QWORD *)(v6 - 120) = v14;
  *(_QWORD *)(v6 - 112) = v15;
  v16 = MEMORY[0x242615198](v13, v11, v6 - 120);
  v1[46] = v16;
  v1[110] = v11;
  v1[111] = v16;
  v17 = MEMORY[0x24BDF3100];
  MEMORY[0x24261512C](255, v1 + 110, MEMORY[0x24BDF3100], 0);
  v18 = sub_23BFF862C();
  v1[40] = v18;
  v19 = MEMORY[0x24BDEBEE0];
  *(_QWORD *)(v6 - 136) = v14;
  *(_QWORD *)(v6 - 128) = v19;
  v20 = MEMORY[0x242615198](v13, v18, v6 - 136);
  v1[39] = v20;
  v1[110] = v18;
  v1[111] = v20;
  MEMORY[0x24261512C](255, v1 + 110, v17, 0);
  v1[37] = sub_23BFF8968();
  v1[41] = sub_23BFF8FD4();
  v1[38] = sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3910);
  v1[44] = sub_23BFF8968();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3918);
  v1[45] = sub_23BFF8968();
  v1[28] = sub_23BFF8968();
  v1[110] = v3;
  v1[111] = v4;
  v1[112] = v4;
  v1[113] = v1[81];
  v1[114] = v1[77];
  v1[115] = v5;
  v1[116] = v2;
  v1[117] = v2;
  v1[118] = v1[76];
  v1[119] = v1[67];
  type metadata accessor for FullWidthStageView();
}

void sub_23BFB29E4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1[43] = a1;
  v7 = MEMORY[0x242615198](&unk_23C0077B8, a1);
  v1[42] = v7;
  v1[110] = a1;
  v1[111] = v7;
  v8 = MEMORY[0x24BDF3948];
  MEMORY[0x24261512C](255, v1 + 110, MEMORY[0x24BDF3948], 0);
  v1[65] = v4;
  v1[66] = v2;
  v10 = type metadata accessor for InfoActionCardView(255, v4, v2, v9);
  v1[35] = v10;
  v11 = MEMORY[0x242615198](&unk_23C007F20, v10);
  v1[34] = v11;
  v1[110] = v10;
  v1[111] = v11;
  MEMORY[0x24261512C](255, v1 + 110, v8, 0);
  v1[33] = sub_23BFF8968();
  v1[14] = sub_23BFF8968();
  v13 = type metadata accessor for LargeBrickView(255, v3, v5, v12);
  v1[32] = v13;
  v14 = MEMORY[0x242615198](&protocol conformance descriptor for LargeBrickView<A>, v13);
  v1[31] = v14;
  v1[110] = v13;
  v1[111] = v14;
  MEMORY[0x24261512C](255, v1 + 110, v8, 0);
  v16 = type metadata accessor for DynamicBrickView(255, v3, v5, v15);
  v1[30] = v16;
  v17 = MEMORY[0x242615198](&protocol conformance descriptor for DynamicBrickView<A>, v16);
  v1[29] = v17;
  v1[110] = v16;
  v1[111] = v17;
  MEMORY[0x24261512C](255, v1 + 110, v8, 0);
  v1[21] = sub_23BFF8968();
  v19 = type metadata accessor for MonogramVerticalStackView(255, v3, v5, v18);
  v1[27] = v19;
  v20 = MEMORY[0x242615198](&unk_23BFFA1F4, v19);
  v1[26] = v20;
  v1[110] = v19;
  v1[111] = v20;
  MEMORY[0x24261512C](255, v1 + 110, v8, 0);
  v1[24] = sub_23BFF8968();
  v1[25] = sub_23BFF8968();
  *v1 = sub_23BFF8968();
  v22 = type metadata accessor for StandardCardView(255, v3, v5, v21);
  v1[23] = v22;
  v23 = MEMORY[0x242615198](&unk_23C007BD0, v22);
  v1[22] = v23;
  v1[110] = v22;
  v1[111] = v23;
  MEMORY[0x24261512C](255, v1 + 110, v8, 0);
  v1[110] = v3;
  v1[111] = v4;
  v1[112] = v5;
  v1[113] = v2;
  type metadata accessor for StandardHorizontalStackView();
}

void sub_23BFB2C44(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t AssociatedConformanceWitness;

  v1[20] = a1;
  v6 = MEMORY[0x242615198](&unk_23C0008E8, a1);
  v1[19] = v6;
  v1[110] = a1;
  v1[111] = v6;
  MEMORY[0x24261512C](255, v1 + 110, v2, 0);
  v1[3] = sub_23BFF8968();
  v7 = v4;
  v9 = type metadata accessor for StandardVerticalStackView(255, v3, v4, v8);
  v1[18] = v9;
  v10 = MEMORY[0x242615198](&unk_23C0073B8, v9);
  v1[17] = v10;
  v1[110] = v9;
  v1[111] = v10;
  MEMORY[0x24261512C](255, v1 + 110, v2, 0);
  v12 = type metadata accessor for TallCardView(255, v3, v4, v11);
  v13 = MEMORY[0x242615198](&unk_23BFFF0E4, v12);
  v1[16] = v13;
  v1[110] = v12;
  v1[111] = v13;
  MEMORY[0x24261512C](255, v1 + 110, v2, 0);
  v1[15] = sub_23BFF8968();
  v1[1] = sub_23BFF8968();
  v1[63] = v3;
  v1[64] = v7;
  v15 = type metadata accessor for VerticalStackCard(255, v3, v7, v14);
  v16 = MEMORY[0x242615198](&unk_23C0000E0, v15);
  v1[13] = v16;
  v1[110] = v15;
  v1[111] = v16;
  MEMORY[0x24261512C](255, v1 + 110, v2, 0);
  v1[2] = sub_23BFF8968();
  v18 = type metadata accessor for WideBrickView(255, v3, v7, v17);
  v19 = MEMORY[0x242615198](&protocol conformance descriptor for WideBrickView<A>, v18);
  v1[7] = v19;
  v1[110] = v18;
  v1[111] = v19;
  MEMORY[0x24261512C](255, v1 + 110, v2, 0);
  v1[4] = sub_23BFF8968();
  v1[6] = sub_23BFF8968();
  v1[9] = sub_23BFF8968();
  v1[10] = sub_23BFF8FD4();
  v1[11] = sub_23BFF862C();
  v1[12] = sub_23BFF8968();
  v1[36] = sub_23BFF862C();
  v1[5] = sub_23BFF862C();
  v20 = v1[75];
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v1[110] = v20;
  v1[111] = v1[68];
  v1[112] = AssociatedConformanceWitness;
  v1[113] = v1[80];
  type metadata accessor for CanvasContextMenu();
}

void sub_23BFB2EEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t OpaqueTypeConformance2;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t AssociatedConformanceWitness;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __n128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v9[8] = a1;
  v14 = sub_23BFF862C();
  v9[110] = v9[49];
  v9[111] = v9[48];
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v9[110] = v9[47];
  v9[111] = v9[46];
  v16 = swift_getOpaqueTypeConformance2();
  v9[110] = v9[40];
  v9[111] = v9[39];
  v17 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v13 - 152) = v16;
  *(_QWORD *)(v13 - 144) = v17;
  v18 = MEMORY[0x24BDEF3E0];
  *(_QWORD *)(v13 - 160) = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v9[37], v13 - 152);
  v19 = MEMORY[0x242615198](MEMORY[0x24BDF3F50], v9[41], v13 - 160);
  v20 = MEMORY[0x24BDECC60];
  *(_QWORD *)(v13 - 176) = v19;
  *(_QWORD *)(v13 - 168) = v20;
  v21 = MEMORY[0x242615198](MEMORY[0x24BDED308], v9[38], v13 - 176);
  v22 = sub_23BEA1F94(&qword_256AE3920, &qword_256AE3910, MEMORY[0x24BDF43B0]);
  *(_QWORD *)(v13 - 192) = v21;
  *(_QWORD *)(v13 - 184) = v22;
  v23 = MEMORY[0x242615198](v18, v9[44], v13 - 192);
  v24 = sub_23BEA1F94(&qword_256AE3928, &qword_256AE3918, MEMORY[0x24BDF4700]);
  *(_QWORD *)(v13 - 208) = v23;
  *(_QWORD *)(v13 - 200) = v24;
  v25 = MEMORY[0x242615198](v18, v9[45], v13 - 208);
  *(_QWORD *)(v13 - 224) = OpaqueTypeConformance2;
  *(_QWORD *)(v13 - 216) = v25;
  v26 = MEMORY[0x242615198](v18, v9[28], v13 - 224);
  v9[110] = v9[43];
  v9[111] = v9[42];
  v27 = swift_getOpaqueTypeConformance2();
  v9[110] = v9[35];
  v9[111] = v9[34];
  v28 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v13 - 240) = v27;
  *(_QWORD *)(v13 - 232) = v28;
  v29 = MEMORY[0x242615198](v18, v9[33], v13 - 240);
  *(_QWORD *)(v13 - 256) = v26;
  *(_QWORD *)(v13 - 248) = v29;
  v30 = MEMORY[0x242615198](v18, v9[14], v13 - 256);
  v9[110] = v9[32];
  v9[111] = v9[31];
  v31 = swift_getOpaqueTypeConformance2();
  v9[110] = v9[30];
  v9[111] = v9[29];
  v32 = swift_getOpaqueTypeConformance2();
  v9[168] = v31;
  v9[169] = v32;
  v33 = MEMORY[0x242615198](v18, v9[21], v9 + 168);
  v9[110] = v9[27];
  v9[111] = v9[26];
  v9[166] = swift_getOpaqueTypeConformance2();
  v9[167] = v32;
  v34 = MEMORY[0x242615198](v18, v9[24], v9 + 166);
  v9[164] = v33;
  v9[165] = v34;
  v35 = MEMORY[0x242615198](v18, v9[25], v9 + 164);
  v9[162] = v30;
  v9[163] = v35;
  v36 = MEMORY[0x242615198](v18, *v9, v9 + 162);
  v9[110] = v9[23];
  v9[111] = v9[22];
  v37 = swift_getOpaqueTypeConformance2();
  v9[110] = v9[20];
  v9[111] = v9[19];
  v38 = swift_getOpaqueTypeConformance2();
  v9[160] = v37;
  v9[161] = v38;
  v39 = MEMORY[0x242615198](v18, v9[3], v9 + 160);
  v9[110] = v9[18];
  v9[111] = v9[17];
  v40 = swift_getOpaqueTypeConformance2();
  v9[110] = v12;
  v9[111] = v9[16];
  v41 = swift_getOpaqueTypeConformance2();
  v9[158] = v40;
  v9[159] = v41;
  v42 = MEMORY[0x242615198](v18, v9[15], v9 + 158);
  v9[156] = v39;
  v9[157] = v42;
  v43 = MEMORY[0x242615198](v18, v9[1], v9 + 156);
  v9[110] = v10;
  v9[111] = v9[13];
  v9[154] = swift_getOpaqueTypeConformance2();
  v9[155] = v9[76];
  v44 = MEMORY[0x242615198](v18, v9[2], v9 + 154);
  v9[110] = v11;
  v9[111] = v9[7];
  v45 = swift_getOpaqueTypeConformance2();
  v9[152] = v44;
  v9[153] = v45;
  v46 = MEMORY[0x242615198](v18, v9[4], v9 + 152);
  v9[150] = v43;
  v9[151] = v46;
  v47 = MEMORY[0x242615198](v18, v9[6], v9 + 150);
  v9[148] = v36;
  v9[149] = v47;
  v9[147] = MEMORY[0x242615198](v18, v9[9], v9 + 148);
  v9[145] = MEMORY[0x242615198](MEMORY[0x24BDF3F50], v9[10], v9 + 147);
  v9[146] = v9[50];
  v48 = MEMORY[0x24BDED308];
  v49 = MEMORY[0x242615198](MEMORY[0x24BDED308], v9[11], v9 + 145);
  v9[143] = MEMORY[0x24BDF5138];
  v9[144] = v49;
  v50 = MEMORY[0x242615198](v18, v9[12], v9 + 143);
  v51 = MEMORY[0x24BDF0910];
  v9[141] = v50;
  v9[142] = v51;
  v9[139] = MEMORY[0x242615198](v48, v9[36], v9 + 141);
  v9[140] = v51;
  v52 = MEMORY[0x242615198](v48, v9[5], v9 + 139);
  v53 = MEMORY[0x242615198](&unk_23BFFEE18, v9[8]);
  v9[137] = v52;
  v9[138] = v53;
  v54 = MEMORY[0x242615198](v48, v14, v9 + 137);
  v9[110] = v14;
  v9[111] = v54;
  v55 = MEMORY[0x24261512C](255, v9 + 110, MEMORY[0x24BDF30F0], 0);
  v9[110] = v14;
  v9[111] = v54;
  v56 = swift_getOpaqueTypeConformance2();
  v9[110] = v55;
  v9[111] = v56;
  MEMORY[0x24261512C](255, v9 + 110, MEMORY[0x24BEC6710], 0);
  v57 = sub_23BFF8968();
  v58 = v9[51];
  v59 = MEMORY[0x242615198](MEMORY[0x24BEE12D8], v58);
  v60 = v9[52];
  v61 = v9[78];
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9[110] = v58;
  v9[111] = v60;
  v9[112] = v57;
  v9[113] = v59;
  v9[114] = AssociatedConformanceWitness;
  v63 = sub_23BFF910C();
  v9[47] = v63;
  v9[110] = v55;
  v9[111] = v56;
  v9[135] = swift_getOpaqueTypeConformance2();
  v9[136] = v56;
  v9[134] = MEMORY[0x242615198](v18, v57, v9 + 135);
  v9[46] = MEMORY[0x242615198](MEMORY[0x24BDF4A08], v63, v9 + 134);
  v64 = sub_23BFF91FC();
  v65 = *(_QWORD *)(v64 - 8);
  v9[49] = v64;
  v9[53] = v65;
  v66 = MEMORY[0x24BDAC7A8](v64);
  v9[50] = (char *)&a9 - v67;
  v68 = MEMORY[0x242615198](MEMORY[0x24BDF5198], v64, v66);
  v9[48] = v68;
  v9[110] = v64;
  v9[111] = v68;
  v69 = MEMORY[0x24261512C](0, v9 + 110, MEMORY[0x24BDF2D58], 0);
  v70 = *(_QWORD *)(v69 - 8);
  v9[51] = v69;
  v9[52] = v70;
  MEMORY[0x24BDAC7A8](v69);
  v9[44] = (char *)&a9 - ((v71 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v72);
  v9[45] = (char *)&a9 - v73;
  swift_bridgeObjectRetain();
  v9[43] = sub_23BFF8830();
  v9[110] = v9[73];
  v9[111] = v9[65];
  v74 = v9[55];
  v9[112] = v9[56];
  v9[113] = v9[63];
  v9[114] = v9[75];
  v9[115] = v9[68];
  v9[116] = v9[81];
  v9[117] = v9[69];
  v9[118] = v9[70];
  v9[119] = v9[72];
  v9[120] = v9[54];
  v9[121] = v74;
  v9[122] = v9[77];
  v9[123] = v9[71];
  v9[124] = v61;
  v9[125] = v9[66];
  v9[126] = v9[64];
  v9[127] = v9[80];
  v9[128] = v9[76];
  v75 = v9[58];
  v9[129] = v9[57];
  v9[130] = v75;
  v9[131] = v9[59];
  v9[132] = v9[67];
  v9[133] = v9[79];
  type metadata accessor for HorizontalGridView();
}

uint64_t sub_23BFB368C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);

  v11 = v1[61];
  v1[42] = *(_QWORD *)(v11 + *(int *)(a1 + 232) + 8);
  v1[84] = v1[73];
  v1[85] = v1[65];
  v1[86] = v6;
  v1[87] = v1[63];
  v1[88] = v1[75];
  v1[89] = v9;
  v1[90] = v1[81];
  v1[91] = v1[69];
  v1[92] = v1[70];
  v1[93] = v1[72];
  v1[94] = v5;
  v1[95] = v7;
  v1[96] = v1[77];
  v1[97] = v1[71];
  v1[98] = v1[78];
  v1[99] = v1[66];
  v1[100] = v1[64];
  v1[101] = v1[80];
  v1[102] = v10;
  v1[103] = v4;
  v1[104] = v8;
  v1[105] = v2;
  v1[106] = v3;
  v1[107] = v1[79];
  v1[108] = v11;
  sub_23BF0EF38();
  v12 = v1[50];
  sub_23BFF91F0();
  v13 = v1[44];
  v15 = v1[48];
  v14 = v1[49];
  sub_23BFF8DF4();
  (*(void (**)(uint64_t, uint64_t))(v1[53] + 8))(v12, v14);
  v1[110] = v14;
  v1[111] = v15;
  swift_getOpaqueTypeConformance2();
  v16 = v1[45];
  v17 = v1[51];
  sub_23BEA72EC(v13, v17, v16);
  v18 = *(void (**)(uint64_t, uint64_t))(v1[52] + 8);
  v18(v13, v17);
  sub_23BEA5C0C(v16, v17, v1[62]);
  return ((uint64_t (*)(uint64_t, uint64_t))v18)(v16, v17);
}

void sub_23BFB3850()
{
  type metadata accessor for HorizontalGridView();
}

void sub_23BFB3980(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v9[74] = a1;
  v15 = *(_QWORD *)(a1 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  v9[57] = v15;
  v9[58] = v16;
  MEMORY[0x24BDAC7A8](a1);
  v9[56] = (char *)&a9 - v17;
  v9[80] = *(_QWORD *)(v10 + 32);
  v9[73] = swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  v9[55] = sub_23BFF94C0();
  v9[141] = v12;
  v9[142] = v13;
  v9[143] = v13;
  v9[144] = v14;
  v9[145] = v11;
  v9[146] = v11;
  type metadata accessor for ActionCardView();
}

void sub_23BFB3A2C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1[49] = a1;
  v7 = MEMORY[0x242615198](&unk_23C005608, a1);
  v1[48] = v7;
  v1[141] = a1;
  v1[142] = v7;
  v1[43] = MEMORY[0x24261512C](255, v1 + 141, MEMORY[0x24BDF3948], 0);
  v1[37] = sub_23BFF8ADC();
  v8 = (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088];
  v9 = sub_23BFF862C();
  v10 = sub_23BFF862C();
  v1[47] = v10;
  v11 = sub_23BEA1BB8((unint64_t *)&qword_256AE3908, v8, MEMORY[0x24BDF1078]);
  v1[54] = v11;
  v1[139] = v5;
  v1[140] = v11;
  v12 = MEMORY[0x24BDED308];
  v13 = MEMORY[0x242615198](MEMORY[0x24BDED308], v9, v1 + 139);
  v14 = MEMORY[0x24BDEEC40];
  v1[137] = v13;
  v1[138] = v14;
  v15 = MEMORY[0x242615198](v12, v10, v1 + 137);
  v1[46] = v15;
  v1[141] = v10;
  v1[142] = v15;
  v16 = MEMORY[0x24BDF3100];
  MEMORY[0x24261512C](255, v1 + 141, MEMORY[0x24BDF3100], 0);
  v17 = sub_23BFF862C();
  v1[36] = v17;
  v18 = MEMORY[0x24BDEBEE0];
  v1[135] = v13;
  v1[136] = v18;
  v19 = MEMORY[0x242615198](v12, v17, v1 + 135);
  v1[40] = v19;
  v1[141] = v17;
  v1[142] = v19;
  MEMORY[0x24261512C](255, v1 + 141, v16, 0);
  v1[38] = sub_23BFF8968();
  v1[41] = sub_23BFF8FD4();
  v1[39] = sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3910);
  v1[44] = sub_23BFF8968();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3918);
  v1[45] = sub_23BFF8968();
  v1[28] = sub_23BFF8968();
  v1[141] = v3;
  v1[142] = v4;
  v1[143] = v4;
  v1[144] = v1[81];
  v1[145] = v1[76];
  v1[146] = v5;
  v1[147] = v2;
  v1[148] = v2;
  v1[149] = v1[82];
  v1[150] = v1[77];
  type metadata accessor for FullWidthStageView();
}

void sub_23BFB3C78(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1[43] = a1;
  v7 = MEMORY[0x242615198](&unk_23C0077B8, a1);
  v1[42] = v7;
  v1[141] = a1;
  v1[142] = v7;
  v8 = MEMORY[0x24BDF3948];
  MEMORY[0x24261512C](255, v1 + 141, MEMORY[0x24BDF3948], 0);
  v1[52] = v4;
  v1[53] = v2;
  v10 = type metadata accessor for InfoActionCardView(255, v4, v2, v9);
  v1[35] = v10;
  v11 = MEMORY[0x242615198](&unk_23C007F20, v10);
  v1[34] = v11;
  v1[141] = v10;
  v1[142] = v11;
  MEMORY[0x24261512C](255, v1 + 141, v8, 0);
  v1[33] = sub_23BFF8968();
  v1[14] = sub_23BFF8968();
  v13 = type metadata accessor for LargeBrickView(255, v3, v5, v12);
  v1[32] = v13;
  v14 = MEMORY[0x242615198](&protocol conformance descriptor for LargeBrickView<A>, v13);
  v1[31] = v14;
  v1[141] = v13;
  v1[142] = v14;
  MEMORY[0x24261512C](255, v1 + 141, v8, 0);
  v16 = type metadata accessor for DynamicBrickView(255, v3, v5, v15);
  v1[30] = v16;
  v17 = MEMORY[0x242615198](&protocol conformance descriptor for DynamicBrickView<A>, v16);
  v1[29] = v17;
  v1[141] = v16;
  v1[142] = v17;
  MEMORY[0x24261512C](255, v1 + 141, v8, 0);
  v1[21] = sub_23BFF8968();
  v19 = type metadata accessor for MonogramVerticalStackView(255, v3, v5, v18);
  v1[27] = v19;
  v20 = MEMORY[0x242615198](&unk_23BFFA1F4, v19);
  v1[26] = v20;
  v1[141] = v19;
  v1[142] = v20;
  MEMORY[0x24261512C](255, v1 + 141, v8, 0);
  v1[24] = sub_23BFF8968();
  v1[25] = sub_23BFF8968();
  *v1 = sub_23BFF8968();
  v22 = type metadata accessor for StandardCardView(255, v3, v5, v21);
  v1[23] = v22;
  v23 = MEMORY[0x242615198](&unk_23C007BD0, v22);
  v1[22] = v23;
  v1[141] = v22;
  v1[142] = v23;
  MEMORY[0x24261512C](255, v1 + 141, v8, 0);
  v1[141] = v3;
  v1[142] = v4;
  v1[143] = v5;
  v1[144] = v2;
  type metadata accessor for StandardHorizontalStackView();
}

void sub_23BFB3ED4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t AssociatedConformanceWitness;

  v1[20] = a1;
  v6 = MEMORY[0x242615198](&unk_23C0008E8, a1);
  v1[19] = v6;
  v1[141] = a1;
  v1[142] = v6;
  MEMORY[0x24261512C](255, v1 + 141, v2, 0);
  v1[3] = sub_23BFF8968();
  v8 = type metadata accessor for StandardVerticalStackView(255, v3, v4, v7);
  v1[18] = v8;
  v9 = MEMORY[0x242615198](&unk_23C0073B8, v8);
  v1[17] = v9;
  v1[141] = v8;
  v1[142] = v9;
  MEMORY[0x24261512C](255, v1 + 141, v2, 0);
  v11 = type metadata accessor for TallCardView(255, v3, v4, v10);
  v12 = MEMORY[0x242615198](&unk_23BFFF0E4, v11);
  v1[16] = v12;
  v1[141] = v11;
  v1[142] = v12;
  MEMORY[0x24261512C](255, v1 + 141, v2, 0);
  v1[15] = sub_23BFF8968();
  v1[1] = sub_23BFF8968();
  v1[50] = v3;
  v1[51] = v4;
  v14 = type metadata accessor for VerticalStackCard(255, v3, v4, v13);
  v15 = MEMORY[0x242615198](&unk_23C0000E0, v14);
  v1[13] = v15;
  v1[141] = v14;
  v1[142] = v15;
  MEMORY[0x24261512C](255, v1 + 141, v2, 0);
  v1[2] = sub_23BFF8968();
  v17 = type metadata accessor for WideBrickView(255, v3, v4, v16);
  v18 = MEMORY[0x242615198](&protocol conformance descriptor for WideBrickView<A>, v17);
  v1[7] = v18;
  v1[141] = v17;
  v1[142] = v18;
  MEMORY[0x24261512C](255, v1 + 141, v2, 0);
  v1[4] = sub_23BFF8968();
  v1[6] = sub_23BFF8968();
  v1[9] = sub_23BFF8968();
  v1[10] = sub_23BFF8FD4();
  v1[11] = sub_23BFF862C();
  v1[12] = sub_23BFF8968();
  v1[37] = sub_23BFF862C();
  v1[5] = sub_23BFF862C();
  v19 = v1[72];
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v1[141] = v19;
  v1[142] = v1[79];
  v1[143] = AssociatedConformanceWitness;
  v1[144] = v1[78];
  type metadata accessor for CanvasContextMenu();
}

uint64_t sub_23BFB4178(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t OpaqueTypeConformance2;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t AssociatedConformanceWitness;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  uint64_t v57;
  __n128 v58;
  uint64_t v59;
  _BYTE *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(_BYTE *, uint64_t);
  _BYTE v83[80];

  v1[8] = a1;
  v5 = sub_23BFF862C();
  v1[141] = v1[49];
  v1[142] = v1[48];
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v1[141] = v1[47];
  v1[142] = v1[46];
  v7 = swift_getOpaqueTypeConformance2();
  v1[141] = v1[36];
  v1[142] = v1[40];
  v8 = swift_getOpaqueTypeConformance2();
  v1[133] = v7;
  v1[134] = v8;
  v9 = MEMORY[0x24BDEF3E0];
  v1[132] = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v1[38], v1 + 133);
  v10 = MEMORY[0x242615198](MEMORY[0x24BDF3F50], v1[41], v1 + 132);
  v11 = MEMORY[0x24BDECC60];
  v1[130] = v10;
  v1[131] = v11;
  v12 = MEMORY[0x242615198](MEMORY[0x24BDED308], v1[39], v1 + 130);
  v13 = sub_23BEA1F94(&qword_256AE3920, &qword_256AE3910, MEMORY[0x24BDF43B0]);
  v1[128] = v12;
  v1[129] = v13;
  v14 = MEMORY[0x242615198](v9, v1[44], v1 + 128);
  v15 = sub_23BEA1F94(&qword_256AE3928, &qword_256AE3918, MEMORY[0x24BDF4700]);
  v1[126] = v14;
  v1[127] = v15;
  v16 = MEMORY[0x242615198](v9, v1[45], v1 + 126);
  v1[124] = OpaqueTypeConformance2;
  v1[125] = v16;
  v17 = MEMORY[0x242615198](v9, v1[28], v1 + 124);
  v1[141] = v1[43];
  v1[142] = v1[42];
  v18 = swift_getOpaqueTypeConformance2();
  v1[141] = v1[35];
  v1[142] = v1[34];
  v19 = swift_getOpaqueTypeConformance2();
  v1[122] = v18;
  v1[123] = v19;
  v20 = MEMORY[0x242615198](v9, v1[33], v1 + 122);
  v1[120] = v17;
  v1[121] = v20;
  v21 = MEMORY[0x242615198](v9, v1[14], v1 + 120);
  v1[141] = v1[32];
  v1[142] = v1[31];
  v22 = swift_getOpaqueTypeConformance2();
  v1[141] = v1[30];
  v1[142] = v1[29];
  v23 = swift_getOpaqueTypeConformance2();
  v1[118] = v22;
  v1[119] = v23;
  v24 = MEMORY[0x242615198](v9, v1[21], v1 + 118);
  v1[141] = v1[27];
  v1[142] = v1[26];
  v1[116] = swift_getOpaqueTypeConformance2();
  v1[117] = v23;
  v25 = MEMORY[0x242615198](v9, v1[24], v1 + 116);
  v1[114] = v24;
  v1[115] = v25;
  v26 = MEMORY[0x242615198](v9, v1[25], v1 + 114);
  v1[112] = v21;
  v1[113] = v26;
  v27 = MEMORY[0x242615198](v9, *v1, v1 + 112);
  v1[141] = v1[23];
  v1[142] = v1[22];
  v28 = swift_getOpaqueTypeConformance2();
  v1[141] = v1[20];
  v1[142] = v1[19];
  v29 = swift_getOpaqueTypeConformance2();
  v1[110] = v28;
  v1[111] = v29;
  v30 = MEMORY[0x242615198](v9, v1[3], v1 + 110);
  v1[141] = v1[18];
  v1[142] = v1[17];
  v31 = swift_getOpaqueTypeConformance2();
  v1[141] = v2;
  v1[142] = v1[16];
  v32 = swift_getOpaqueTypeConformance2();
  v1[108] = v31;
  v1[109] = v32;
  v33 = MEMORY[0x242615198](v9, v1[15], v1 + 108);
  v1[106] = v30;
  v1[107] = v33;
  v34 = MEMORY[0x242615198](v9, v1[1], v1 + 106);
  v1[141] = v3;
  v1[142] = v1[13];
  v1[104] = swift_getOpaqueTypeConformance2();
  v1[105] = v1[82];
  v35 = MEMORY[0x242615198](v9, v1[2], v1 + 104);
  v1[141] = v4;
  v1[142] = v1[7];
  v36 = swift_getOpaqueTypeConformance2();
  v1[102] = v35;
  v1[103] = v36;
  v37 = MEMORY[0x242615198](v9, v1[4], v1 + 102);
  v1[100] = v34;
  v1[101] = v37;
  v38 = MEMORY[0x242615198](v9, v1[6], v1 + 100);
  v1[98] = v27;
  v1[99] = v38;
  v1[97] = MEMORY[0x242615198](v9, v1[9], v1 + 98);
  v1[95] = MEMORY[0x242615198](MEMORY[0x24BDF3F50], v1[10], v1 + 97);
  v1[96] = v1[54];
  v39 = MEMORY[0x24BDED308];
  v40 = MEMORY[0x242615198](MEMORY[0x24BDED308], v1[11], v1 + 95);
  v1[93] = MEMORY[0x24BDF5138];
  v1[94] = v40;
  v41 = MEMORY[0x242615198](v9, v1[12], v1 + 93);
  v42 = MEMORY[0x24BDF0910];
  v1[91] = v41;
  v1[92] = v42;
  v1[89] = MEMORY[0x242615198](v39, v1[37], v1 + 91);
  v1[90] = v42;
  v43 = MEMORY[0x242615198](v39, v1[5], v1 + 89);
  v44 = MEMORY[0x242615198](&unk_23BFFEE18, v1[8]);
  v1[87] = v43;
  v1[88] = v44;
  v45 = MEMORY[0x242615198](v39, v5, v1 + 87);
  v1[141] = v5;
  v1[142] = v45;
  v46 = MEMORY[0x24261512C](255, v1 + 141, MEMORY[0x24BDF30F0], 0);
  v1[141] = v5;
  v1[142] = v45;
  v47 = swift_getOpaqueTypeConformance2();
  v1[54] = v47;
  v1[49] = v46;
  v1[141] = v46;
  v1[142] = v47;
  MEMORY[0x24261512C](255, v1 + 141, MEMORY[0x24BEC6710], 0);
  v48 = sub_23BFF8968();
  v1[48] = v48;
  v49 = v1[55];
  v50 = MEMORY[0x242615198](MEMORY[0x24BEE12D8], v49);
  v51 = v1[83];
  v52 = v1[73];
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v1[141] = v49;
  v1[142] = v52;
  v1[143] = v48;
  v1[144] = v50;
  v1[145] = AssociatedConformanceWitness;
  v54 = sub_23BFF910C();
  v1[55] = *(_QWORD *)(v54 - 8);
  MEMORY[0x24BDAC7A8](v54);
  v56 = &v83[-((v55 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v58 = MEMORY[0x24BDAC7A8](v57);
  v60 = &v83[-v59];
  v1[47] = *(_QWORD *)(v1[59] + *(int *)(v1[74] + 212));
  v61 = v1[56];
  v62 = v1[57];
  (*(void (**)(uint64_t, __n128))(v62 + 16))(v61, v58);
  v63 = (*(unsigned __int8 *)(v62 + 80) + 208) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80);
  v64 = (char *)swift_allocObject();
  v65 = v1[52];
  *((_QWORD *)v64 + 2) = v1[66];
  *((_QWORD *)v64 + 3) = v65;
  v66 = v1[50];
  *((_QWORD *)v64 + 4) = v1[67];
  *((_QWORD *)v64 + 5) = v66;
  v67 = v1[79];
  *((_QWORD *)v64 + 6) = v1[72];
  *((_QWORD *)v64 + 7) = v67;
  v68 = v1[60];
  *((_QWORD *)v64 + 8) = v1[81];
  *((_QWORD *)v64 + 9) = v68;
  v69 = v1[62];
  *((_QWORD *)v64 + 10) = v1[61];
  *((_QWORD *)v64 + 11) = v69;
  v70 = v1[64];
  *((_QWORD *)v64 + 12) = v1[63];
  *((_QWORD *)v64 + 13) = v70;
  v71 = v1[65];
  *((_QWORD *)v64 + 14) = v1[76];
  *((_QWORD *)v64 + 15) = v71;
  v72 = v1[53];
  *((_QWORD *)v64 + 16) = v51;
  *((_QWORD *)v64 + 17) = v72;
  v73 = v1[78];
  *((_QWORD *)v64 + 18) = v1[51];
  *((_QWORD *)v64 + 19) = v73;
  v74 = v1[68];
  *((_QWORD *)v64 + 20) = v1[82];
  *((_QWORD *)v64 + 21) = v74;
  v75 = v1[70];
  *((_QWORD *)v64 + 22) = v1[69];
  *((_QWORD *)v64 + 23) = v75;
  v76 = v1[75];
  *((_QWORD *)v64 + 24) = v1[77];
  *((_QWORD *)v64 + 25) = v76;
  (*(void (**)(char *, uint64_t, _QWORD))(v62 + 32))(&v64[v63], v61, v1[74]);
  v77 = v1[47];
  swift_bridgeObjectRetain();
  v1[141] = v1[49];
  v78 = v1[54];
  v1[142] = v78;
  v1[85] = swift_getOpaqueTypeConformance2();
  v1[86] = v78;
  v79 = v1[48];
  v80 = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v79, v1 + 85);
  sub_23BF49C10(v77, (uint64_t)sub_23BFBBC9C, (uint64_t)v64, v1[73], v79, v1[83], v80, *(_QWORD *)(v76 + 24), v1[80]);
  v1[84] = v80;
  MEMORY[0x242615198](MEMORY[0x24BDF4A08], v54, v1 + 84);
  sub_23BEA72EC((uint64_t)v56, v54, (uint64_t)v60);
  v81 = *(void (**)(_BYTE *, uint64_t))(v1[55] + 8);
  v81(v56, v54);
  sub_23BEA5C0C((uint64_t)v60, v54, v1[71]);
  return ((uint64_t (*)(_BYTE *, uint64_t))v81)(v60, v54);
}

void sub_23BFB4994(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[56];
  uint64_t AssociatedConformanceWitness;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v40 = a6;
  v51 = a5;
  v38 = a4;
  v36 = a3;
  v37 = a2;
  v39 = a1;
  v32 = a8;
  v52 = a26;
  v56 = a25;
  v50 = a24;
  v49 = a23;
  v42 = a20;
  v57 = a19;
  v47 = a14;
  v46 = a13;
  v54 = a12;
  v34 = a11;
  v55 = a15;
  v43 = a16;
  v33 = a22;
  v41 = a10;
  v53 = a17;
  v28 = sub_23BFF96A0();
  MEMORY[0x24BDAC7A8](v28);
  v30[55] = (char *)v30 - v29;
  v45 = a27;
  v48 = a7;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v58 = a7;
  v59 = a9;
  v44 = a9;
  v60 = AssociatedConformanceWitness;
  v35 = a21;
  v61 = a21;
  type metadata accessor for CanvasContextMenu();
}

void sub_23BFB4AF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v9[73] = a1;
  v9[57] = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9[54] = (char *)&a9 - v18;
  v9[72] = *(_QWORD *)(v9[87] - 8);
  MEMORY[0x24BDAC7A8](v19);
  v9[71] = (char *)&a9 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(_QWORD *)(v16 - 8);
  v9[70] = v21;
  v9[76] = v16;
  v9[53] = *(_QWORD *)(v21 + 64);
  MEMORY[0x24BDAC7A8](v22);
  v9[69] = (char *)&a9 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9[218] = v9[81];
  v9[219] = v10;
  v9[220] = v9[95];
  v9[221] = v9[83];
  v9[222] = v15;
  v9[223] = v14;
  v9[224] = v11;
  v9[225] = v13;
  v9[226] = v9[98];
  v9[227] = v9[90];
  v9[228] = v9[91];
  v9[229] = v9[99];
  v9[230] = v24;
  v9[231] = v9[97];
  v9[232] = v25;
  v9[233] = v9[101];
  v9[234] = v9[85];
  v9[235] = v17;
  v9[236] = v9[75];
  v9[237] = v9[93];
  v9[238] = v9[94];
  v9[239] = v9[100];
  v9[240] = v9[96];
  v9[241] = v12;
  type metadata accessor for HorizontalGridView();
}

void sub_23BFB4C48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v9[74] = a1;
  v14 = *(_QWORD *)(a1 - 8);
  v9[68] = v14;
  v9[60] = *(_QWORD *)(v14 + 64);
  MEMORY[0x24BDAC7A8](a1);
  v9[67] = (char *)&a9 - v15;
  v9[218] = v11;
  v9[86] = v13;
  v9[219] = v13;
  v9[220] = v13;
  v9[221] = v12;
  v9[222] = v10;
  v9[223] = v10;
  type metadata accessor for ActionCardView();
}

void sub_23BFB4CA8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1[59] = a1;
  v6 = MEMORY[0x242615198](&unk_23C005608, a1);
  v1[46] = v6;
  v1[218] = a1;
  v1[219] = v6;
  MEMORY[0x24261512C](255, v1 + 218, MEMORY[0x24BDF3948], 0);
  v1[66] = sub_23BFF8ADC();
  v7 = (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088];
  v8 = v2;
  v9 = sub_23BFF862C();
  v10 = sub_23BFF862C();
  v1[45] = v10;
  v11 = sub_23BEA1BB8((unint64_t *)&qword_256AE3908, v7, MEMORY[0x24BDF1078]);
  v1[61] = v11;
  v1[216] = v3;
  v1[217] = v11;
  v12 = MEMORY[0x24BDED308];
  v13 = MEMORY[0x242615198](MEMORY[0x24BDED308], v9, v1 + 216);
  v14 = MEMORY[0x24BDEEC40];
  v1[214] = v13;
  v1[215] = v14;
  v15 = MEMORY[0x242615198](v12, v10, v1 + 214);
  v1[44] = v15;
  v1[218] = v10;
  v1[219] = v15;
  v16 = MEMORY[0x24BDF3100];
  MEMORY[0x24261512C](255, v1 + 218, MEMORY[0x24BDF3100], 0);
  v17 = sub_23BFF862C();
  v1[38] = v17;
  v18 = MEMORY[0x24BDEBEE0];
  v1[212] = v13;
  v1[213] = v18;
  v19 = MEMORY[0x242615198](v12, v17, v1 + 212);
  v1[37] = v19;
  v1[218] = v17;
  v1[219] = v19;
  MEMORY[0x24261512C](255, v1 + 218, v16, 0);
  v1[35] = sub_23BFF8968();
  v1[39] = sub_23BFF8FD4();
  v1[36] = sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3910);
  v1[42] = sub_23BFF8968();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3918);
  v1[43] = sub_23BFF8968();
  v1[27] = sub_23BFF8968();
  v1[218] = v8;
  v20 = v1[86];
  v1[219] = v20;
  v1[220] = v20;
  v1[221] = v1[84];
  v1[222] = v1[87];
  v1[223] = v3;
  v21 = v1[101];
  v1[224] = v21;
  v1[225] = v21;
  v1[226] = v4;
  v1[227] = v1[96];
  type metadata accessor for FullWidthStageView();
}

void sub_23BFB4F00(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1[41] = a1;
  v7 = MEMORY[0x242615198](&unk_23C0077B8, a1);
  v1[40] = v7;
  v1[218] = a1;
  v1[219] = v7;
  v8 = MEMORY[0x24BDF3948];
  MEMORY[0x24261512C](255, v1 + 218, MEMORY[0x24BDF3948], 0);
  v9 = v3;
  v11 = type metadata accessor for InfoActionCardView(255, v3, v5, v10);
  v1[34] = v11;
  v12 = MEMORY[0x242615198](&unk_23C007F20, v11);
  v1[33] = v12;
  v1[218] = v11;
  v1[219] = v12;
  MEMORY[0x24261512C](255, v1 + 218, v8, 0);
  v1[32] = sub_23BFF8968();
  sub_23BFF8968();
  v14 = type metadata accessor for LargeBrickView(255, v2, v4, v13);
  v1[31] = v14;
  v15 = MEMORY[0x242615198](&protocol conformance descriptor for LargeBrickView<A>, v14);
  v1[30] = v15;
  v1[218] = v14;
  v1[219] = v15;
  MEMORY[0x24261512C](255, v1 + 218, v8, 0);
  v17 = type metadata accessor for DynamicBrickView(255, v2, v4, v16);
  v1[29] = v17;
  v18 = MEMORY[0x242615198](&protocol conformance descriptor for DynamicBrickView<A>, v17);
  v1[28] = v18;
  v1[218] = v17;
  v1[219] = v18;
  MEMORY[0x24261512C](255, v1 + 218, v8, 0);
  v1[20] = sub_23BFF8968();
  v20 = type metadata accessor for MonogramVerticalStackView(255, v2, v4, v19);
  v1[26] = v20;
  v21 = MEMORY[0x242615198](&unk_23BFFA1F4, v20);
  v1[25] = v21;
  v1[218] = v20;
  v1[219] = v21;
  MEMORY[0x24261512C](255, v1 + 218, v8, 0);
  v1[23] = sub_23BFF8968();
  v1[24] = sub_23BFF8968();
  v1[1] = sub_23BFF8968();
  v23 = type metadata accessor for StandardCardView(255, v2, v4, v22);
  v1[22] = v23;
  v24 = MEMORY[0x242615198](&unk_23C007BD0, v23);
  v1[21] = v24;
  v1[218] = v23;
  v1[219] = v24;
  MEMORY[0x24261512C](255, v1 + 218, v8, 0);
  v1[218] = v2;
  v1[219] = v9;
  v1[220] = v4;
  v1[221] = v1[101];
  type metadata accessor for StandardHorizontalStackView();
}

void sub_23BFB5168(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t OpaqueTypeConformance2;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __n128 v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(uint64_t, _QWORD, _QWORD, __n128);
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void (*v115)(char *, uint64_t, uint64_t);
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  __int128 v149;

  *(_QWORD *)(v9 + 152) = a1;
  v16 = MEMORY[0x242615198](&unk_23C0008E8, a1);
  *(_QWORD *)(v9 + 144) = v16;
  *(_QWORD *)(v9 + 1744) = a1;
  *(_QWORD *)(v9 + 1752) = v16;
  MEMORY[0x24261512C](255, v9 + 1744, v13, 0);
  *(_QWORD *)(v9 + 32) = sub_23BFF8968();
  v18 = type metadata accessor for StandardVerticalStackView(255, v10, v12, v17);
  *(_QWORD *)(v9 + 136) = v18;
  v19 = MEMORY[0x242615198](&unk_23C0073B8, v18);
  *(_QWORD *)(v9 + 128) = v19;
  *(_QWORD *)(v9 + 1744) = v18;
  *(_QWORD *)(v9 + 1752) = v19;
  MEMORY[0x24261512C](255, v9 + 1744, v13, 0);
  v21 = type metadata accessor for TallCardView(255, v10, v12, v20);
  *(_QWORD *)(v9 + 112) = v21;
  v22 = MEMORY[0x242615198](&unk_23BFFF0E4, v21);
  *(_QWORD *)(v9 + 104) = v22;
  *(_QWORD *)(v9 + 1744) = v21;
  *(_QWORD *)(v9 + 1752) = v22;
  MEMORY[0x24261512C](255, v9 + 1744, v13, 0);
  *(_QWORD *)(v9 + 96) = sub_23BFF8968();
  *(_QWORD *)(v9 + 16) = sub_23BFF8968();
  v24 = type metadata accessor for VerticalStackCard(255, v10, v11, v23);
  v25 = MEMORY[0x242615198](&unk_23C0000E0, v24);
  *(_QWORD *)(v9 + 88) = v25;
  *(_QWORD *)(v9 + 1744) = v24;
  *(_QWORD *)(v9 + 1752) = v25;
  MEMORY[0x24261512C](255, v9 + 1744, v13, 0);
  *(_QWORD *)(v9 + 24) = sub_23BFF8968();
  v27 = type metadata accessor for WideBrickView(255, v10, v11, v26);
  v28 = MEMORY[0x242615198](&protocol conformance descriptor for WideBrickView<A>, v27);
  *(_QWORD *)(v9 + 56) = v28;
  *(_QWORD *)(v9 + 1744) = v27;
  *(_QWORD *)(v9 + 1752) = v28;
  MEMORY[0x24261512C](255, v9 + 1744, v13, 0);
  *(_QWORD *)(v9 + 40) = sub_23BFF8968();
  *(_QWORD *)(v9 + 48) = sub_23BFF8968();
  *(_QWORD *)(v9 + 64) = sub_23BFF8968();
  *(_QWORD *)(v9 + 72) = sub_23BFF8FD4();
  *(_QWORD *)(v9 + 80) = sub_23BFF862C();
  v29 = sub_23BFF8968();
  *(_QWORD *)(v9 + 376) = *(_QWORD *)(v29 - 8);
  *(_QWORD *)(v9 + 512) = v29;
  MEMORY[0x24BDAC7A8](v29);
  *(_QWORD *)(v9 + 496) = (char *)&a9 - v30;
  v31 = sub_23BFF862C();
  *(_QWORD *)(v9 + 400) = *(_QWORD *)(v31 - 8);
  *(_QWORD *)(v9 + 520) = v31;
  MEMORY[0x24BDAC7A8](v31);
  *(_QWORD *)(v9 + 504) = (char *)&a9 - v32;
  v33 = sub_23BFF862C();
  *(_QWORD *)(v9 + 408) = *(_QWORD *)(v33 - 8);
  *(_QWORD *)(v9 + 528) = v33;
  MEMORY[0x24BDAC7A8](v33);
  *(_QWORD *)(v9 + 384) = (char *)&a9 - v34;
  v35 = sub_23BFF862C();
  *(_QWORD *)(v9 + 416) = *(_QWORD *)(v35 - 8);
  MEMORY[0x24BDAC7A8](v35);
  *(_QWORD *)(v9 + 392) = (char *)&a9 - v36;
  *(_QWORD *)(v9 + 1744) = *(_QWORD *)(v9 + 472);
  *(_QWORD *)(v9 + 1752) = *(_QWORD *)(v9 + 368);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v9 + 1744) = *(_QWORD *)(v9 + 360);
  *(_QWORD *)(v9 + 1752) = *(_QWORD *)(v9 + 352);
  v38 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v9 + 1744) = *(_QWORD *)(v9 + 304);
  *(_QWORD *)(v9 + 1752) = *(_QWORD *)(v9 + 296);
  v39 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v9 + 1680) = v38;
  *(_QWORD *)(v9 + 1688) = v39;
  v40 = MEMORY[0x24BDEF3E0];
  *(_QWORD *)(v9 + 1672) = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], *(_QWORD *)(v9 + 280), v9 + 1680);
  v41 = MEMORY[0x242615198](MEMORY[0x24BDF3F50], *(_QWORD *)(v9 + 312), v9 + 1672);
  v42 = MEMORY[0x24BDECC60];
  *(_QWORD *)(v9 + 1656) = v41;
  *(_QWORD *)(v9 + 1664) = v42;
  v43 = MEMORY[0x24BDED308];
  v44 = MEMORY[0x242615198](MEMORY[0x24BDED308], *(_QWORD *)(v9 + 288), v9 + 1656);
  v45 = sub_23BEA1F94(&qword_256AE3920, &qword_256AE3910, MEMORY[0x24BDF43B0]);
  *(_QWORD *)(v9 + 1640) = v44;
  *(_QWORD *)(v9 + 1648) = v45;
  v46 = MEMORY[0x242615198](v40, *(_QWORD *)(v9 + 336), v9 + 1640);
  v47 = sub_23BEA1F94(&qword_256AE3928, &qword_256AE3918, MEMORY[0x24BDF4700]);
  *(_QWORD *)(v9 + 1624) = v46;
  *(_QWORD *)(v9 + 1632) = v47;
  v48 = MEMORY[0x242615198](v40, *(_QWORD *)(v9 + 344), v9 + 1624);
  *(_QWORD *)(v9 + 1608) = OpaqueTypeConformance2;
  *(_QWORD *)(v9 + 1616) = v48;
  v49 = MEMORY[0x242615198](v40, *(_QWORD *)(v9 + 216), v9 + 1608);
  *(_QWORD *)(v9 + 1744) = *(_QWORD *)(v9 + 328);
  *(_QWORD *)(v9 + 1752) = *(_QWORD *)(v9 + 320);
  v50 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v9 + 1744) = *(_QWORD *)(v9 + 272);
  *(_QWORD *)(v9 + 1752) = *(_QWORD *)(v9 + 264);
  v51 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v9 + 1592) = v50;
  *(_QWORD *)(v9 + 1600) = v51;
  v52 = MEMORY[0x242615198](v40, *(_QWORD *)(v9 + 256), v9 + 1592);
  *(_QWORD *)(v9 + 1576) = v49;
  *(_QWORD *)(v9 + 1584) = v52;
  v53 = MEMORY[0x242615198](v40, v14, v9 + 1576);
  *(_QWORD *)(v9 + 1744) = *(_QWORD *)(v9 + 248);
  *(_QWORD *)(v9 + 1752) = *(_QWORD *)(v9 + 240);
  v54 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v9 + 1744) = *(_QWORD *)(v9 + 232);
  *(_QWORD *)(v9 + 1752) = *(_QWORD *)(v9 + 224);
  v55 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v9 + 1560) = v54;
  *(_QWORD *)(v9 + 1568) = v55;
  v56 = MEMORY[0x242615198](v40, *(_QWORD *)(v9 + 160), v9 + 1560);
  *(_QWORD *)(v9 + 1744) = *(_QWORD *)(v9 + 208);
  *(_QWORD *)(v9 + 1752) = *(_QWORD *)(v9 + 200);
  *(_QWORD *)(v9 + 1544) = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v9 + 1552) = v55;
  v57 = MEMORY[0x242615198](v40, *(_QWORD *)(v9 + 184), v9 + 1544);
  *(_QWORD *)(v9 + 1528) = v56;
  *(_QWORD *)(v9 + 1536) = v57;
  v58 = MEMORY[0x242615198](v40, *(_QWORD *)(v9 + 192), v9 + 1528);
  *(_QWORD *)(v9 + 1512) = v53;
  *(_QWORD *)(v9 + 1520) = v58;
  v59 = MEMORY[0x242615198](v40, *(_QWORD *)(v9 + 8), v9 + 1512);
  *(_QWORD *)(v9 + 1744) = *(_QWORD *)(v9 + 176);
  *(_QWORD *)(v9 + 1752) = *(_QWORD *)(v9 + 168);
  v60 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v9 + 1744) = *(_QWORD *)(v9 + 152);
  *(_QWORD *)(v9 + 1752) = *(_QWORD *)(v9 + 144);
  v61 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v9 + 1496) = v60;
  *(_QWORD *)(v9 + 1504) = v61;
  v62 = MEMORY[0x242615198](v40, *(_QWORD *)(v9 + 32), v9 + 1496);
  *(_QWORD *)(v9 + 1744) = *(_QWORD *)(v9 + 136);
  *(_QWORD *)(v9 + 1752) = *(_QWORD *)(v9 + 128);
  v63 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v9 + 1744) = *(_QWORD *)(v9 + 112);
  *(_QWORD *)(v9 + 1752) = *(_QWORD *)(v9 + 104);
  v64 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v9 + 1480) = v63;
  *(_QWORD *)(v9 + 1488) = v64;
  v65 = v40;
  v66 = MEMORY[0x242615198](v40, *(_QWORD *)(v9 + 96), v9 + 1480);
  *(_QWORD *)(v9 + 1464) = v62;
  *(_QWORD *)(v9 + 1472) = v66;
  v67 = MEMORY[0x242615198](v40, *(_QWORD *)(v9 + 16), v9 + 1464);
  *(_QWORD *)(v9 + 1744) = v24;
  *(_QWORD *)(v9 + 1752) = *(_QWORD *)(v9 + 88);
  *(_QWORD *)(v9 + 1448) = swift_getOpaqueTypeConformance2();
  v68 = *(_QWORD *)(v9 + 600);
  *(_QWORD *)(v9 + 1456) = v68;
  v69 = MEMORY[0x242615198](v65, *(_QWORD *)(v9 + 24), v9 + 1448);
  *(_QWORD *)(v9 + 1744) = v27;
  *(_QWORD *)(v9 + 1752) = *(_QWORD *)(v9 + 56);
  v70 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v9 + 1432) = v69;
  *(_QWORD *)(v9 + 1440) = v70;
  v71 = MEMORY[0x242615198](v65, *(_QWORD *)(v9 + 40), v9 + 1432);
  *(_QWORD *)(v9 + 1416) = v67;
  *(_QWORD *)(v9 + 1424) = v71;
  v72 = MEMORY[0x242615198](v65, *(_QWORD *)(v9 + 48), v9 + 1416);
  *(_QWORD *)(v9 + 1400) = v59;
  *(_QWORD *)(v9 + 1408) = v72;
  *(_QWORD *)(v9 + 1392) = MEMORY[0x242615198](v65, *(_QWORD *)(v9 + 64), v9 + 1400);
  *(_QWORD *)(v9 + 1376) = MEMORY[0x242615198](MEMORY[0x24BDF3F50], *(_QWORD *)(v9 + 72), v9 + 1392);
  *(_QWORD *)(v9 + 1384) = *(_QWORD *)(v9 + 488);
  v73 = MEMORY[0x242615198](v43, *(_QWORD *)(v9 + 80), v9 + 1376);
  *(_QWORD *)(v9 + 1360) = MEMORY[0x24BDF5138];
  *(_QWORD *)(v9 + 1368) = v73;
  v74 = MEMORY[0x242615198](v65, *(_QWORD *)(v9 + 512), v9 + 1360);
  *(_QWORD *)(v9 + 280) = v74;
  v75 = MEMORY[0x24BDF0910];
  *(_QWORD *)(v9 + 1344) = v74;
  *(_QWORD *)(v9 + 1352) = v75;
  v76 = MEMORY[0x242615198](v43, *(_QWORD *)(v9 + 520), v9 + 1344);
  *(_QWORD *)(v9 + 288) = v76;
  *(_QWORD *)(v9 + 1328) = v76;
  *(_QWORD *)(v9 + 1336) = v75;
  v77 = MEMORY[0x242615198](v43, *(_QWORD *)(v9 + 528), v9 + 1328);
  *(_QWORD *)(v9 + 312) = v77;
  v78 = MEMORY[0x242615198](&unk_23BFFEE18, *(_QWORD *)(v9 + 584));
  *(_QWORD *)(v9 + 1312) = v77;
  *(_QWORD *)(v9 + 1320) = v78;
  v79 = MEMORY[0x242615198](v43, v35, v9 + 1312);
  *(_QWORD *)(v9 + 1744) = v35;
  *(_QWORD *)(v9 + 120) = v35;
  *(_QWORD *)(v9 + 1752) = v79;
  v80 = v79;
  *(_QWORD *)(v9 + 320) = v79;
  v81 = MEMORY[0x24261512C](0, v9 + 1744, MEMORY[0x24BDF30F0], 0);
  *(_QWORD *)(v9 + 368) = *(_QWORD *)(v81 - 8);
  *(_QWORD *)(v9 + 328) = v81;
  MEMORY[0x24BDAC7A8](v81);
  *(_QWORD *)(v9 + 304) = (char *)&a9 - v82;
  *(_QWORD *)(v9 + 1744) = v35;
  *(_QWORD *)(v9 + 1752) = v80;
  v83 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v9 + 336) = v83;
  *(_QWORD *)(v9 + 1744) = v81;
  *(_QWORD *)(v9 + 1752) = v83;
  MEMORY[0x24261512C](255, v9 + 1744, MEMORY[0x24BEC6710], 0);
  v84 = sub_23BFF8968();
  v85 = *(_QWORD *)(v84 - 8);
  *(_QWORD *)(v9 + 352) = v84;
  *(_QWORD *)(v9 + 360) = v85;
  MEMORY[0x24BDAC7A8](v84);
  *(_QWORD *)(v9 + 296) = (char *)&a9 - ((v86 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = MEMORY[0x24BDAC7A8](v87);
  *(_QWORD *)(v9 + 344) = (char *)&a9 - v89;
  v90 = *(_QWORD *)(v9 + 544);
  v91 = *(void (**)(uint64_t, _QWORD, _QWORD, __n128))(v90 + 16);
  *(_QWORD *)(v9 + 488) = v91;
  v92 = *(_QWORD *)(v9 + 536);
  v91(v92, *(_QWORD *)(v9 + 632), *(_QWORD *)(v9 + 592), v88);
  v93 = *(_QWORD *)(v9 + 560);
  v94 = *(_QWORD *)(v9 + 608);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(v93 + 16))(*(_QWORD *)(v9 + 552), *(_QWORD *)(v9 + 640), v94);
  v95 = *(unsigned __int8 *)(v90 + 80);
  v96 = (v95 + 208) & ~v95;
  v97 = v96 + *(_QWORD *)(v9 + 480);
  *(_QWORD *)(v9 + 272) = v97;
  *(_QWORD *)(v9 + 472) = v96;
  *(_QWORD *)(v9 + 480) = v95 | 7;
  v98 = (v97 + *(unsigned __int8 *)(v93 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v93 + 80);
  v99 = (char *)swift_allocObject();
  v100 = *(_QWORD *)(v9 + 648);
  v101 = *(_QWORD *)(v9 + 688);
  *((_QWORD *)v99 + 2) = v100;
  *((_QWORD *)v99 + 3) = v101;
  v102 = *(_QWORD *)(v9 + 760);
  v103 = *(_QWORD *)(v9 + 664);
  *((_QWORD *)v99 + 4) = v102;
  *((_QWORD *)v99 + 5) = v103;
  v104 = *(_QWORD *)(v9 + 704);
  *((_QWORD *)v99 + 6) = *(_QWORD *)(v9 + 736);
  *((_QWORD *)v99 + 7) = v104;
  v105 = *(_QWORD *)(v9 + 616);
  *((_QWORD *)v99 + 8) = *(_QWORD *)(v9 + 672);
  *((_QWORD *)v99 + 9) = v105;
  v106 = *(_QWORD *)(v9 + 720);
  *((_QWORD *)v99 + 10) = *(_QWORD *)(v9 + 784);
  *((_QWORD *)v99 + 11) = v106;
  v107 = *(_QWORD *)(v9 + 792);
  *((_QWORD *)v99 + 12) = *(_QWORD *)(v9 + 728);
  *((_QWORD *)v99 + 13) = v107;
  v108 = *(_QWORD *)(v9 + 696);
  v109 = *(_QWORD *)(v9 + 776);
  *((_QWORD *)v99 + 14) = v108;
  *((_QWORD *)v99 + 15) = v109;
  v110 = *(_QWORD *)(v9 + 808);
  *((_QWORD *)v99 + 16) = v94;
  *((_QWORD *)v99 + 17) = v110;
  v111 = *(_QWORD *)(v9 + 624);
  *((_QWORD *)v99 + 18) = *(_QWORD *)(v9 + 680);
  *((_QWORD *)v99 + 19) = v111;
  v112 = *(_QWORD *)(v9 + 744);
  *((_QWORD *)v99 + 20) = v68;
  *((_QWORD *)v99 + 21) = v112;
  v113 = *(_QWORD *)(v9 + 800);
  *((_QWORD *)v99 + 22) = *(_QWORD *)(v9 + 752);
  *((_QWORD *)v99 + 23) = v113;
  v114 = *(_QWORD *)(v9 + 712);
  *((_QWORD *)v99 + 24) = *(_QWORD *)(v9 + 768);
  *((_QWORD *)v99 + 25) = v114;
  v115 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 + 544) + 32);
  *(_QWORD *)(v9 + 544) = v115;
  v116 = v92;
  v117 = *(_QWORD *)(v9 + 592);
  v115(&v99[v96], v116, v117);
  (*(void (**)(char *, _QWORD, uint64_t))(*(_QWORD *)(v9 + 560) + 32))(&v99[v98], *(_QWORD *)(v9 + 552), v94);
  v118 = *(_QWORD *)(v9 + 632);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 + 576) + 16))(*(_QWORD *)(v9 + 568), v118 + *(int *)(v117 + 240), v108);
  v119 = (uint64_t *)(v118 + *(int *)(v117 + 244));
  v121 = *v119;
  v120 = v119[1];
  *(_QWORD *)(v9 + 560) = v121;
  *(_QWORD *)(v9 + 552) = v120;
  v122 = v100;
  *(_QWORD *)(v9 + 1056) = v100;
  v123 = *(_QWORD *)(v9 + 688);
  *(_QWORD *)(v9 + 1064) = v123;
  v124 = v102;
  *(_QWORD *)(v9 + 1072) = v102;
  v125 = *(_QWORD *)(v9 + 664);
  *(_QWORD *)(v9 + 1080) = v125;
  v126 = *(_QWORD *)(v9 + 736);
  *(_QWORD *)(v9 + 1088) = v126;
  v127 = *(_QWORD *)(v9 + 704);
  *(_QWORD *)(v9 + 1096) = v127;
  v128 = *(_QWORD *)(v9 + 672);
  *(_QWORD *)(v9 + 1104) = v128;
  v129 = *(_QWORD *)(v9 + 616);
  *(_QWORD *)(v9 + 1112) = v129;
  v130 = *(_QWORD *)(v9 + 784);
  *(_QWORD *)(v9 + 1120) = v130;
  v131 = *(_QWORD *)(v9 + 720);
  *(_QWORD *)(v9 + 1128) = v131;
  v132 = *(_QWORD *)(v9 + 728);
  *(_QWORD *)(v9 + 1136) = v132;
  v133 = *(_QWORD *)(v9 + 792);
  *(_QWORD *)(v9 + 1144) = v133;
  *(_QWORD *)(v9 + 1152) = v108;
  v134 = *(_QWORD *)(v9 + 776);
  *(_QWORD *)(v9 + 1160) = v134;
  *(_QWORD *)(v9 + 1168) = v94;
  v135 = *(_QWORD *)(v9 + 808);
  *(_QWORD *)(v9 + 1176) = v135;
  v136 = *(_QWORD *)(v9 + 680);
  *(_QWORD *)(v9 + 1184) = v136;
  v137 = *(_QWORD *)(v9 + 624);
  *(_QWORD *)(v9 + 1192) = v137;
  *(_QWORD *)(v9 + 1200) = v68;
  v138 = *(_QWORD *)(v9 + 744);
  *(_QWORD *)(v9 + 1208) = v138;
  v139 = *(_QWORD *)(v9 + 752);
  *(_QWORD *)(v9 + 1216) = v139;
  v140 = *(_QWORD *)(v9 + 800);
  *(_QWORD *)(v9 + 1224) = v140;
  v141 = *(_QWORD *)(v9 + 768);
  *(_QWORD *)(v9 + 1232) = v141;
  v142 = *(_QWORD *)(v9 + 712);
  *(_QWORD *)(v9 + 1240) = v142;
  *(_QWORD *)(v9 + 1248) = v118;
  v143 = *(_QWORD *)(v9 + 656);
  *(_QWORD *)(v9 + 1256) = v143;
  *(_QWORD *)(v9 + 832) = v122;
  *(_QWORD *)(v9 + 840) = v123;
  *(_QWORD *)(v9 + 848) = v124;
  *(_QWORD *)(v9 + 856) = v125;
  *(_QWORD *)(v9 + 864) = v126;
  *(_QWORD *)(v9 + 872) = v127;
  *(_QWORD *)(v9 + 880) = v128;
  *(_QWORD *)(v9 + 888) = v129;
  *(_QWORD *)(v9 + 896) = v130;
  *(_QWORD *)(v9 + 904) = v131;
  *(_QWORD *)(v9 + 912) = v132;
  *(_QWORD *)(v9 + 920) = v133;
  *(_QWORD *)(v9 + 928) = v108;
  *(_QWORD *)(v9 + 936) = v134;
  *(_QWORD *)(v9 + 944) = v94;
  *(_QWORD *)(v9 + 952) = v135;
  *(_QWORD *)(v9 + 960) = v136;
  *(_QWORD *)(v9 + 968) = v137;
  *(_QWORD *)(v9 + 976) = v68;
  *(_QWORD *)(v9 + 984) = v138;
  *(_QWORD *)(v9 + 992) = v139;
  *(_QWORD *)(v9 + 1000) = v140;
  *(_QWORD *)(v9 + 1008) = v141;
  *(_QWORD *)(v9 + 1016) = v142;
  *(_QWORD *)(v9 + 1024) = v118;
  *(_QWORD *)(v9 + 1032) = v143;
  v144 = v135;
  v145 = v68;
  v146 = v123;
  v147 = v142;
  v148 = v141;
  sub_23BFDD104((_OWORD *)(v9 + 1744));
  v149 = *(_OWORD *)(v9 + 1760);
  *(_OWORD *)(v9 + 1280) = *(_OWORD *)(v9 + 1744);
  *(_OWORD *)(v9 + 1296) = v149;
  sub_23BEAF590((uint64_t)sub_23BFBC120, (uint64_t)v99, *(_QWORD *)(v9 + 568), v9 + 1280, *(_QWORD *)(v9 + 560), *(_QWORD *)(v9 + 552), (uint64_t)sub_23BFBC274, v9 + 1040, *(_QWORD *)(v9 + 496), (uint64_t)sub_23BFBC280, v9 + 816, *(_QWORD *)(v9 + 608), *(_QWORD *)(v9 + 696), *(_QWORD *)(v9 + 664), v128, v146, v147, v148, v136,
    v145,
    v144);
}

void sub_23BFB5E04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 576) + 8))(v2, v3);
  v7 = *(_QWORD *)(v0 + 536);
  v8 = *(_QWORD *)(v0 + 592);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 488))(v7, v5, v8);
  v9 = (*(_QWORD *)(v0 + 272) + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v0 + 576) = v9 + 8;
  v10 = (_QWORD *)swift_allocObject();
  v11 = *(_QWORD *)(v0 + 648);
  v12 = *(_QWORD *)(v0 + 688);
  v10[2] = v11;
  v10[3] = v12;
  v10[4] = *(_QWORD *)(v0 + 760);
  v10[5] = v6;
  v13 = *(_QWORD *)(v0 + 704);
  v10[6] = *(_QWORD *)(v0 + 736);
  v10[7] = v13;
  v14 = *(_QWORD *)(v0 + 616);
  v10[8] = v1;
  v10[9] = v14;
  v15 = *(_QWORD *)(v0 + 720);
  v10[10] = *(_QWORD *)(v0 + 784);
  v10[11] = v15;
  v16 = *(_QWORD *)(v0 + 792);
  v10[12] = *(_QWORD *)(v0 + 728);
  v10[13] = v16;
  v17 = *(_QWORD *)(v0 + 776);
  v10[14] = v3;
  v10[15] = v17;
  v18 = *(_QWORD *)(v0 + 808);
  v10[16] = v4;
  v10[17] = v18;
  v19 = *(_QWORD *)(v0 + 624);
  v10[18] = *(_QWORD *)(v0 + 680);
  v10[19] = v19;
  v20 = *(_QWORD *)(v0 + 744);
  v10[20] = *(_QWORD *)(v0 + 600);
  v10[21] = v20;
  v21 = *(_QWORD *)(v0 + 800);
  v10[22] = *(_QWORD *)(v0 + 752);
  v10[23] = v21;
  v22 = (char *)v10 + *(_QWORD *)(v0 + 472);
  v23 = *(_QWORD *)(v0 + 712);
  v10[24] = *(_QWORD *)(v0 + 768);
  v10[25] = v23;
  v24 = v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v0 + 544))(v22, v7, v8);
  *(_QWORD *)((char *)v10 + v9) = *(_QWORD *)(v0 + 656);
  v25 = *(_QWORD *)(v0 + 512);
  v26 = *(_QWORD *)(v0 + 496);
  sub_23BFF8F14();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 376) + 8))(v26, v25);
  v27 = v7;
  v28 = v24;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 488))(v7, *(_QWORD *)(v0 + 632), v24);
  v29 = (_QWORD *)swift_allocObject();
  v30 = *(_QWORD *)(v0 + 688);
  v29[2] = v11;
  v29[3] = v30;
  v31 = *(_QWORD *)(v0 + 664);
  v29[4] = *(_QWORD *)(v0 + 760);
  v29[5] = v31;
  v32 = *(_QWORD *)(v0 + 704);
  v29[6] = *(_QWORD *)(v0 + 736);
  v29[7] = v32;
  v29[8] = *(_QWORD *)(v0 + 672);
  v29[9] = v14;
  v33 = *(_QWORD *)(v0 + 720);
  v29[10] = *(_QWORD *)(v0 + 784);
  v29[11] = v33;
  v34 = *(_QWORD *)(v0 + 792);
  v29[12] = *(_QWORD *)(v0 + 728);
  v29[13] = v34;
  v35 = *(_QWORD *)(v0 + 776);
  v29[14] = *(_QWORD *)(v0 + 696);
  v29[15] = v35;
  v36 = *(_QWORD *)(v0 + 608);
  v37 = *(_QWORD *)(v0 + 808);
  v29[16] = v36;
  v29[17] = v37;
  v38 = *(_QWORD *)(v0 + 624);
  v29[18] = *(_QWORD *)(v0 + 680);
  v29[19] = v38;
  v39 = *(_QWORD *)(v0 + 744);
  v29[20] = *(_QWORD *)(v0 + 600);
  v29[21] = v39;
  v40 = *(_QWORD *)(v0 + 800);
  v29[22] = *(_QWORD *)(v0 + 752);
  v29[23] = v40;
  v41 = (char *)v29 + *(_QWORD *)(v0 + 472);
  v42 = *(_QWORD *)(v0 + 712);
  v29[24] = *(_QWORD *)(v0 + 768);
  v29[25] = v42;
  (*(void (**)(char *, uint64_t, uint64_t))(v0 + 544))(v41, v27, v28);
  *(_QWORD *)((char *)v29 + v9) = *(_QWORD *)(v0 + 656);
  v43 = *(_QWORD *)(v0 + 520);
  v44 = *(_QWORD *)(v0 + 504);
  sub_23BFF8D34();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 400) + 8))(v44, v43);
  v45 = *(_QWORD *)(v0 + 440);
  (*(void (**)(uint64_t, uint64_t))(v42 + 168))(v36, v42);
  sub_23BF006B4(v45, *(_QWORD *)(v0 + 432));
}

uint64_t sub_23BFB60C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);

  swift_retain();
  v5 = *(_QWORD *)(v0 + 392);
  v6 = *(_QWORD *)(v0 + 528);
  v7 = *(_QWORD *)(v0 + 584);
  MEMORY[0x2426142A4](v4, v6, v7, *(_QWORD *)(v0 + 312));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 456) + 8))(v4, v7);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 408) + 8))(v3, v6);
  sub_23BFF8B24();
  sub_23BFF91A8();
  v8 = *(_QWORD *)(v0 + 304);
  v9 = *(_QWORD *)(v0 + 120);
  sub_23BFF8E48();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 416) + 8))(v5, v9);
  v10 = v2 + *(int *)(v1 + 220);
  v11 = *(_QWORD *)(v0 + 336);
  v12 = *(_QWORD *)(v0 + 296);
  v13 = *(_QWORD *)(v0 + 328);
  sub_23BF58654(*(_QWORD *)(v0 + 640), v10, *(_QWORD *)(v0 + 656), v13, v12, *(_QWORD *)(v0 + 784), *(_QWORD *)(v0 + 792), *(_QWORD *)(v0 + 776), *(char **)(v0 + 608), v11, *(_QWORD *)(v0 + 800), *(_QWORD *)(v0 + 712));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 368) + 8))(v8, v13);
  *(_QWORD *)(v0 + 1744) = v13;
  *(_QWORD *)(v0 + 1752) = v11;
  *(_QWORD *)(v0 + 1264) = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v0 + 1272) = v11;
  v14 = *(_QWORD *)(v0 + 352);
  MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v14, v0 + 1264);
  v15 = *(_QWORD *)(v0 + 344);
  sub_23BEA72EC(v12, v14, v15);
  v16 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 360) + 8);
  v16(v12, v14);
  sub_23BEA5C0C(v15, v14, *(_QWORD *)(v0 + 464));
  return ((uint64_t (*)(uint64_t, uint64_t))v16)(v15, v14);
}

void sub_23BFB62BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  __n128 v15;
  uint64_t v16;
  __int128 v17;

  v15 = MEMORY[0x24BDAC7A8](a15);
  *(_OWORD *)(v16 + 136) = v17;
  *(__n128 *)(v16 + 152) = v15;
  type metadata accessor for HorizontalGridView();
}

uint64_t sub_23BFB6380(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t);

  v7 = *(void (**)(uint64_t))(v5 + *(int *)(result + 272));
  if (v7)
  {
    (*(void (**)(uint64_t, uint64_t))(v1 + 152))(v3, v1);
    v7(v4);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v4, v2);
  }
  return result;
}

void sub_23BFB63E4(uint64_t a1)
{
  uint64_t v1;
  __n128 v2;
  uint64_t v3;
  __int128 v4;

  MEMORY[0x24BDAC7A8](a1);
  v2 = MEMORY[0x24BDAC7A8]((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)(v3 + 152) = v4;
  *(__n128 *)(v3 + 168) = v2;
  type metadata accessor for HorizontalGridView();
}

uint64_t sub_23BFB64C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  (*(void (**)(uint64_t, uint64_t, _QWORD))(v4 + *(int *)(a1 + 252)))(v3, v7, 0);
  sub_23BEA72EC(v6, v2, v5);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v2);
  sub_23BEA5C0C(v5, v2, v1);
  return ((uint64_t (*)(uint64_t, uint64_t))v9)(v5, v2);
}

void sub_23BFB6548(uint64_t a1)
{
  uint64_t v1;

  MEMORY[0x24BDAC7A8](a1);
  MEMORY[0x24BDAC7A8]((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for HorizontalGridView();
}

uint64_t sub_23BFB662C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + *(int *)(a1 + 256)))(v3, v7, 0);
  sub_23BEA72EC(v6, v1, v4);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v1);
  sub_23BEA5C0C(v4, v1, v2);
  return ((uint64_t (*)(uint64_t, uint64_t))v9)(v4, v1);
}

void sub_23BFB66B0()
{
  type metadata accessor for HorizontalGridView();
}

void sub_23BFB6790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v9[8] = a1;
  v14 = *(_QWORD *)(a1 - 8);
  v9[5] = v14;
  v9[4] = *(_QWORD *)(v14 + 64);
  MEMORY[0x24BDAC7A8](a1);
  v9[31] = (char *)&a9 - v15;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3528);
  v9[34] = v10;
  v9[54] = v10;
  v9[55] = v13;
  v9[27] = v13;
  v9[28] = v12;
  v9[56] = v12;
  v9[57] = v11;
  v9[29] = v11;
  type metadata accessor for CanvasSectionHeaderView();
}

void sub_23BFB67F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t AssociatedConformanceWitness;
  uint64_t v20;

  sub_23BFF8A4C();
  v9[37] = a1;
  v9[38] = sub_23BFF862C();
  v15 = sub_23BFF8968();
  v9[33] = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v9[23] = (char *)&a9 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v9[3] = (char *)&a9 - v18;
  v9[26] = v10;
  v9[14] = v12;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9[13] = v13;
  v9[54] = v13;
  v9[55] = v11;
  v9[9] = v11;
  v20 = v9[40];
  v9[56] = AssociatedConformanceWitness;
  v9[57] = v20;
  type metadata accessor for CanvasSectionHeader();
}

uint64_t sub_23BFB68CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v26;
  int *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  __int128 v48;
  uint64_t v49;
  uint64_t (*v50)(uint64_t, uint64_t);
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE v57[64];

  v4 = sub_23BFF96A0();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = &v57[-v6];
  v8 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = &v57[-v10];
  v12 = sub_23BFF96A0();
  *(_QWORD *)(v1 + 288) = v12;
  *(_QWORD *)(v1 + 256) = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = &v57[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = MEMORY[0x24BDAC7A8](v15);
  *(_QWORD *)(v1 + 280) = &v57[-v17];
  v18 = *(_QWORD *)(v1 + 240);
  (*(void (**)(_BYTE *, __n128))(v5 + 16))(v7, v16);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48))(v7, 1, a1) != 1)
  {
    v25 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 32);
    *(_QWORD *)v1 = v11;
    v25(v11, v7, a1);
    *(_QWORD *)(v1 + 8) = v8;
    *(_QWORD *)(v1 + 16) = v2;
    v26 = *(_QWORD *)(v1 + 40);
    v27 = *(int **)(v1 + 64);
    (*(void (**)(_QWORD, uint64_t, int *))(v26 + 16))(*(_QWORD *)(v1 + 248), v18, v27);
    v28 = (*(unsigned __int8 *)(v26 + 80) + 208) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
    v29 = (char *)swift_allocObject();
    v30 = *(_QWORD *)(v1 + 272);
    *((_QWORD *)v29 + 2) = *(_QWORD *)(v1 + 104);
    *((_QWORD *)v29 + 3) = v30;
    v31 = *(_QWORD *)(v1 + 136);
    *((_QWORD *)v29 + 4) = *(_QWORD *)(v1 + 120);
    *((_QWORD *)v29 + 5) = v31;
    v32 = *(_QWORD *)(v1 + 168);
    *((_QWORD *)v29 + 6) = *(_QWORD *)(v1 + 152);
    *((_QWORD *)v29 + 7) = v32;
    v33 = *(_QWORD *)(v1 + 48);
    *((_QWORD *)v29 + 8) = *(_QWORD *)(v1 + 176);
    *((_QWORD *)v29 + 9) = v33;
    v34 = *(_QWORD *)(v1 + 72);
    *((_QWORD *)v29 + 10) = *(_QWORD *)(v1 + 56);
    *((_QWORD *)v29 + 11) = v34;
    v35 = *(_QWORD *)(v1 + 216);
    v36 = *(_QWORD *)(v1 + 224);
    v37 = *(_QWORD *)(v1 + 80);
    *((_QWORD *)v29 + 12) = v35;
    *((_QWORD *)v29 + 13) = v37;
    v38 = *(_QWORD *)(v1 + 96);
    *((_QWORD *)v29 + 14) = *(_QWORD *)(v1 + 88);
    *((_QWORD *)v29 + 15) = v38;
    *((_QWORD *)v29 + 16) = *(_QWORD *)(v1 + 112);
    *((_QWORD *)v29 + 17) = v36;
    v39 = *(_QWORD *)(v1 + 144);
    *((_QWORD *)v29 + 18) = *(_QWORD *)(v1 + 128);
    *((_QWORD *)v29 + 19) = v39;
    v40 = *(_QWORD *)(v1 + 320);
    *((_QWORD *)v29 + 20) = *(_QWORD *)(v1 + 160);
    *((_QWORD *)v29 + 21) = v40;
    *(_QWORD *)(v1 + 320) = v14;
    v41 = *(_QWORD *)(v1 + 232);
    v42 = *(_QWORD *)(v1 + 192);
    *((_QWORD *)v29 + 22) = v41;
    *((_QWORD *)v29 + 23) = v42;
    v43 = *(_QWORD *)(v1 + 208);
    *((_QWORD *)v29 + 24) = *(_QWORD *)(v1 + 200);
    *((_QWORD *)v29 + 25) = v43;
    (*(void (**)(char *, _QWORD, int *))(v26 + 32))(&v29[v28], *(_QWORD *)(v1 + 248), v27);
    v44 = (uint64_t *)(v18 + v27[65]);
    v45 = *v44;
    v46 = v44[1];
    v47 = (_OWORD *)(v18 + v27[57]);
    v48 = v47[1];
    *(_OWORD *)(v1 + 432) = *v47;
    *(_OWORD *)(v1 + 448) = v48;
    sub_23BFF67FC((uint64_t)sub_23BFBB7B8, (uint64_t)v29, v45, v46, *(unsigned __int8 *)(v18 + v27[59]), *(_QWORD *)(v1 + 272), *(_QWORD *)(v1 + 184), v35, v36, v41);
  }
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 + 264) + 56))(v14, 1, 1, v2);
  v19 = sub_23BF0A0F0();
  v20 = *(_QWORD *)(v1 + 296);
  v21 = MEMORY[0x242615198](&unk_23C0051E8, v20);
  v22 = sub_23BEA1BB8((unint64_t *)&qword_256AE5188, (uint64_t (*)(uint64_t))MEMORY[0x24BDF02F8], MEMORY[0x24BDF02F0]);
  *(_QWORD *)(v1 + 416) = v21;
  *(_QWORD *)(v1 + 424) = v22;
  v23 = *(_QWORD *)(v1 + 304);
  v24 = MEMORY[0x242615198](MEMORY[0x24BDED308], v23, v1 + 416);
  *(_QWORD *)(v1 + 400) = v19;
  *(_QWORD *)(v1 + 408) = v24;
  MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v2, v1 + 400);
  v49 = *(_QWORD *)(v1 + 280);
  sub_23BF3FAD4((uint64_t)v14, v49);
  v50 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 256) + 8);
  v51 = *(_QWORD *)(v1 + 288);
  v50((uint64_t)v14, v51);
  v52 = sub_23BF0A0F0();
  v53 = MEMORY[0x242615198](&unk_23C0051E8, v20);
  v54 = sub_23BEA1BB8((unint64_t *)&qword_256AE5188, (uint64_t (*)(uint64_t))MEMORY[0x24BDF02F8], MEMORY[0x24BDF02F0]);
  *(_QWORD *)(v1 + 384) = v53;
  *(_QWORD *)(v1 + 392) = v54;
  v55 = MEMORY[0x242615198](MEMORY[0x24BDED308], v23, v1 + 384);
  *(_QWORD *)(v1 + 368) = v52;
  *(_QWORD *)(v1 + 376) = v55;
  *(_QWORD *)(v1 + 360) = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v2, v1 + 368);
  MEMORY[0x242615198](MEMORY[0x24BDF5578], v51, v1 + 360);
  sub_23BEA5C0C(v49, v51, *(_QWORD *)(v1 + 312));
  return v50(v49, v51);
}

void sub_23BFB6DB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_23BFF96A0();
  MEMORY[0x24BDAC7A8](v2);
  MEMORY[0x24BDAC7A8](v0);
  MEMORY[0x24BDAC7A8](v1);
  type metadata accessor for HorizontalGridView();
}

uint64_t sub_23BFB6FB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, _QWORD, uint64_t);
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);

  v9 = *(void (**)(uint64_t, _QWORD, uint64_t))(v3 + *(int *)(a1 + 256));
  v10 = *(_QWORD *)(v5 - 8);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v10 + 16))(v7, *(_QWORD *)(v8 - 312), v5);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v5);
  v9(v7, 0, 1);
  (*(void (**)(uint64_t, _QWORD))(v2 + 8))(v7, *(_QWORD *)(v8 - 296));
  sub_23BEA72EC(v6, v1, v4);
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 304) + 8);
  v11(v6, v1);
  sub_23BEA5C0C(v4, v1, *(_QWORD *)(v8 - 288));
  return ((uint64_t (*)(uint64_t, uint64_t))v11)(v4, v1);
}

void sub_23BFB708C()
{
  type metadata accessor for HorizontalGridView();
}

uint64_t sub_23BFB7100()
{
  _BYTE *v0;

  return sub_23BE9ED7C(v0);
}

void sub_23BFB713C()
{
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CanvasSectionHeader();
}

uint64_t sub_23BFB7194()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = sub_23BFF96A0();
  if (v1 <= 0x3F)
  {
    result = sub_23BFF96A0();
    if (v2 <= 0x3F)
    {
      result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

_QWORD *sub_23BFB7298(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  _QWORD *v37;
  int v38;
  int v39;
  unint64_t v40;
  unsigned int v41;
  void *v42;
  char *v43;
  size_t v44;
  char *v45;
  void *v46;
  const void *v47;
  uint64_t v48;
  size_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  void *v54;
  const void *v55;
  unsigned int (*v56)(const void *, uint64_t, uint64_t);
  _QWORD *v57;
  _QWORD *v58;
  _OWORD *v59;
  _OWORD *v60;
  __int128 v61;
  unint64_t v62;
  unint64_t v63;
  __int128 v64;
  unint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unsigned int v93;
  uint64_t v94;
  size_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  size_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  size_t v109;
  size_t __n;
  uint64_t v111;

  v4 = sub_23BFF82CC();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = a3[11];
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  if ((_DWORD)v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  v10 = *(unsigned int *)(v5 + 84);
  if (v9 <= v10)
    v11 = *(_DWORD *)(v5 + 84);
  else
    v11 = v9;
  v12 = a3[2];
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned int *)(v13 + 84);
  v15 = v14 - 1;
  if (!(_DWORD)v14)
    v15 = 0;
  if (v15 <= v11)
    v16 = v11;
  else
    v16 = v15;
  if ((_DWORD)v8)
    v17 = *(_QWORD *)(v7 + 64);
  else
    v17 = *(_QWORD *)(v7 + 64) + 1;
  v18 = *(_DWORD *)(v7 + 80);
  v19 = *(_QWORD *)(v5 + 64) + v18;
  v20 = *(_DWORD *)(v13 + 80);
  __n = v17;
  v21 = (v17 + v20 + (v19 & ~v18)) & ~v20;
  if ((_DWORD)v14)
    v22 = *(_QWORD *)(v13 + 64);
  else
    v22 = *(_QWORD *)(v13 + 64) + 1;
  v23 = v21 + v22;
  if (v16)
    v24 = v21 + v22;
  else
    v24 = v23 + 1;
  v25 = a3[14];
  v111 = a3[13];
  v26 = *(_QWORD *)(v111 - 8);
  v27 = *(_DWORD *)(v26 + 80);
  if (*(_DWORD *)(v26 + 84))
    v28 = *(_QWORD *)(v26 + 64);
  else
    v28 = *(_QWORD *)(v26 + 64) + 1;
  v29 = *(_QWORD *)(v25 - 8);
  v30 = *(_DWORD *)(v29 + 80);
  v31 = *(_DWORD *)(v7 + 80) | *(_DWORD *)(v5 + 80) | *(_DWORD *)(v13 + 80);
  v32 = v30 | v27 | v31 & 0xF8;
  if (v32 > 7
    || ((*(_DWORD *)(v29 + 80) | *(_DWORD *)(v26 + 80) | v31) & 0x100000) != 0
    || (v33 = v27 + 9,
        ((((((((((((((((*(_QWORD *)(v29 + 64)
                      + 7
                      + ((v30
                        + 25
                        + ((((((v28 + 7 + ((v27 + 9 + ((v24 + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v27)) & 0xFFFFFFFFFFFFFFF8)
                            + 15) & 0xFFFFFFFFFFFFFFF8)
                          + 39) & 0xFFFFFFFFFFFFFFF8)) & ~v30)) & 0xFFFFFFFFFFFFFFF8)
                    + 23) & 0xFFFFFFFFFFFFFFF8)
                  + 23) & 0xFFFFFFFFFFFFFFF8)
                + 23) & 0xFFFFFFFFFFFFFFF8)
              + 23) & 0xFFFFFFFFFFFFFFF8)
            + 23) & 0xFFFFFFFFFFFFFFF8)
          + 23) & 0xFFFFFFFFFFFFFFF8)
        + 23) & 0xFFFFFFFFFFFFFFF8)
      + 16 > 0x18))
  {
    v36 = *a2;
    *a1 = *a2;
    v37 = (_QWORD *)(v36 + (((v32 | 7) + 16) & ~(unint64_t)(v32 | 7)));
    goto LABEL_65;
  }
  v108 = *(_QWORD *)(v29 + 64) + 7;
  v109 = v24;
  v106 = *(_QWORD *)(v25 - 8);
  v107 = v25;
  v104 = v28 + 7;
  v105 = v30 + 25;
  v102 = v28;
  v103 = ~v27;
  v97 = ~v20;
  v98 = v6;
  v95 = v22;
  v96 = ~v18;
  if (v16)
  {
    if ((_DWORD)v10 == v16)
    {
      v93 = v16;
      v34 = v23;
      v35 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v5 + 48))(a2, v10, v4);
      v23 = v34;
      v16 = v93;
      v24 = v109;
      if (!v35)
        goto LABEL_44;
    }
    else
    {
      v100 = v23;
      v40 = ((unint64_t)a2 + v19) & ~v18;
      if (v9 == v16)
        v41 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(v40, v8, v6);
      else
        v41 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v13 + 48))((v40 + v17 + v20) & ~v20, v14, v12);
      v24 = v109;
      v23 = v100;
      if (v41 < 2)
      {
LABEL_44:
        v101 = v23;
        v94 = v33;
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 16))(a1, a2, v4);
        v42 = (void *)(((unint64_t)a1 + v19) & v96);
        v43 = (char *)(((unint64_t)a2 + v19) & v96);
        v99 = v12;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v43, 1, v98))
        {
          v44 = __n;
          memcpy(v42, v43, __n);
        }
        else
        {
          (*(void (**)(void *, char *, uint64_t))(v7 + 16))(v42, v43, v98);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v42, 0, 1, v98);
          v44 = __n;
        }
        v45 = &v43[v44];
        v46 = (void *)(((unint64_t)v42 + v44 + v20) & v97);
        v47 = (const void *)((unint64_t)&v45[v20] & v97);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v47, 1, v99))
        {
          memcpy(v46, v47, v95);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(v46, v47, v99);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v46, 0, 1, v99);
        }
        v48 = v111;
        v37 = a1;
        v49 = v109;
        v33 = v94;
        v50 = v103;
        if (!v16)
          *((_BYTE *)a1 + v101) = 0;
        goto LABEL_54;
      }
    }
  }
  else
  {
    if (!*((_BYTE *)a2 + v23))
      goto LABEL_44;
    v38 = (*((unsigned __int8 *)a2 + v23) - 1) << (8 * v23);
    if (v23 > 3)
      v38 = 0;
    if ((_DWORD)v23)
    {
      if (v23 <= 3)
        v39 = v23;
      else
        v39 = 4;
      __asm { BR              X11 }
    }
    if (v38 == -1)
      goto LABEL_44;
  }
  v37 = a1;
  memcpy(a1, a2, v24);
  v49 = v109;
  v48 = v111;
  v50 = v103;
LABEL_54:
  v51 = ~v30;
  v52 = ((unint64_t)v37 + v49 + 7) & 0xFFFFFFFFFFFFFFF8;
  v53 = ((unint64_t)a2 + v49 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v52 = *(_QWORD *)v53;
  *(_BYTE *)(v52 + 8) = *(_BYTE *)(v53 + 8);
  v54 = (void *)((v33 + v52) & v50);
  v55 = (const void *)((v33 + v53) & v50);
  v56 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v26 + 48);
  swift_bridgeObjectRetain();
  if (v56(v55, 1, v48))
  {
    memcpy(v54, v55, v102);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v26 + 16))(v54, v55, v48);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v54, 0, 1, v48);
  }
  v57 = (_QWORD *)(((unint64_t)v55 + v104) & 0xFFFFFFFFFFFFFFF8);
  v58 = (_QWORD *)(((unint64_t)v54 + v104) & 0xFFFFFFFFFFFFF8);
  *v58 = *v57;
  v59 = (_OWORD *)(((unint64_t)v58 + 15) & 0xFFFFFFFFFFFFFFF8);
  v60 = (_OWORD *)(((unint64_t)v57 + 15) & 0xFFFFFFFFFFFFFFF8);
  v61 = v60[1];
  *v59 = *v60;
  v59[1] = v61;
  v62 = ((unint64_t)v59 + 39) & 0xFFFFFFFFFFFFFFF8;
  v63 = ((unint64_t)v60 + 39) & 0xFFFFFFFFFFFFFFF8;
  v64 = *(_OWORD *)v63;
  *(_QWORD *)(v62 + 16) = *(_QWORD *)(v63 + 16);
  *(_OWORD *)v62 = v64;
  *(_BYTE *)(v62 + 24) = *(_BYTE *)(v63 + 24);
  v65 = (v105 + v62) & v51;
  v66 = (v105 + v63) & v51;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v106 + 16))(v65, v66, v107);
  v67 = (_QWORD *)((v108 + v65) & 0xFFFFFFFFFFFFFFF8);
  v68 = (_QWORD *)((v108 + v66) & 0xFFFFFFFFFFFFFFF8);
  v69 = v68[1];
  *v67 = *v68;
  v67[1] = v69;
  v70 = (_QWORD *)(((unint64_t)v67 + 23) & 0xFFFFFFFFFFFFFFF8);
  v71 = (_QWORD *)(((unint64_t)v68 + 23) & 0xFFFFFFFFFFFFFFF8);
  v72 = v71[1];
  *v70 = *v71;
  v70[1] = v72;
  v73 = (_QWORD *)(((unint64_t)v70 + 23) & 0xFFFFFFFFFFFFFFF8);
  v74 = (_QWORD *)(((unint64_t)v71 + 23) & 0xFFFFFFFFFFFFFFF8);
  v75 = v74[1];
  *v73 = *v74;
  v73[1] = v75;
  v76 = (_QWORD *)(((unint64_t)v73 + 23) & 0xFFFFFFFFFFFFFFF8);
  v77 = (_QWORD *)(((unint64_t)v74 + 23) & 0xFFFFFFFFFFFFFFF8);
  v78 = v77[1];
  *v76 = *v77;
  v76[1] = v78;
  v79 = (_QWORD *)(((unint64_t)v76 + 23) & 0xFFFFFFFFFFFFFFF8);
  v80 = (_QWORD *)(((unint64_t)v77 + 23) & 0xFFFFFFFFFFFFFFF8);
  v81 = v80[1];
  *v79 = *v80;
  v79[1] = v81;
  v82 = ((unint64_t)v79 + 23) & 0xFFFFFFFFFFFFFFF8;
  v83 = (unint64_t *)(((unint64_t)v80 + 23) & 0xFFFFFFFFFFFFFFF8);
  v84 = *v83;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  if (v84 < 0xFFFFFFFF)
  {
    *(_OWORD *)v82 = *(_OWORD *)v83;
  }
  else
  {
    v85 = v83[1];
    *(_QWORD *)v82 = v84;
    *(_QWORD *)(v82 + 8) = v85;
    swift_retain();
  }
  v86 = (v82 + 23) & 0xFFFFFFFFFFFFFFF8;
  v87 = ((unint64_t)v83 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v87 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v86 = *(_OWORD *)v87;
  }
  else
  {
    v88 = *(_QWORD *)(v87 + 8);
    *(_QWORD *)v86 = *(_QWORD *)v87;
    *(_QWORD *)(v86 + 8) = v88;
    swift_retain();
  }
  v89 = (v86 + 23) & 0xFFFFFFFFFFFFFFF8;
  v90 = (v87 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v90 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v89 = *(_OWORD *)v90;
    return v37;
  }
  v91 = *(_QWORD *)(v90 + 8);
  *(_QWORD *)v89 = *(_QWORD *)v90;
  *(_QWORD *)(v89 + 8) = v91;
LABEL_65:
  swift_retain();
  return v37;
}

uint64_t sub_23BFB7988(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t result;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v4 = sub_23BFF82CC();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int *)(v5 + 84);
  v43 = a2[11];
  v7 = *(_QWORD *)(v43 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  if ((_DWORD)v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v9 <= v6)
    v10 = *(_DWORD *)(v5 + 84);
  else
    v10 = v9;
  v44 = a2[2];
  v11 = *(_QWORD *)(v44 - 8);
  v12 = *(unsigned int *)(v11 + 84);
  v13 = v12 - 1;
  if (!(_DWORD)v12)
    v13 = 0;
  if (v13 <= v10)
    v14 = v10;
  else
    v14 = v13;
  if ((_DWORD)v8)
    v15 = *(_QWORD *)(v7 + 64);
  else
    v15 = *(_QWORD *)(v7 + 64) + 1;
  v16 = *(unsigned __int8 *)(v7 + 80);
  v17 = ~v16;
  v18 = *(_QWORD *)(v5 + 64) + v16;
  v19 = *(unsigned __int8 *)(v11 + 80);
  v20 = (v15 + v19 + (v18 & ~v16)) & ~v19;
  v21 = *(_QWORD *)(v11 + 64);
  if (!(_DWORD)v12)
    ++v21;
  v22 = v21 + v20;
  v42 = v15;
  v41 = v17;
  if (v14)
  {
    if ((_DWORD)v6 == v14)
    {
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, v6, v4))
        goto LABEL_39;
    }
    else
    {
      v25 = (v18 + a1) & v17;
      if (v9 == v14)
        v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v25, v8, v43);
      else
        v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))((v25 + v15 + v19) & ~v19, v12, v44);
      if (v26 >= 2)
        goto LABEL_39;
    }
    goto LABEL_35;
  }
  if (!*(_BYTE *)(a1 + v22))
    goto LABEL_35;
  v23 = (*(unsigned __int8 *)(a1 + v22) - 1) << (8 * v22);
  if (v22 > 3)
    v23 = 0;
  if ((_DWORD)v22)
  {
    if (v22 <= 3)
      v24 = v21 + v20;
    else
      v24 = 4;
    __asm { BR              X11 }
  }
  if (v23 == -1)
  {
LABEL_35:
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
    v27 = (v18 + a1) & v41;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v27, 1, v43))
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v27, v43);
    v28 = (v27 + v42 + v19) & ~v19;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v28, 1, v44))
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v28, v44);
  }
LABEL_39:
  if (v14)
    v29 = a1;
  else
    v29 = a1 + 1;
  v30 = (v29 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  v31 = a2[13];
  v32 = *(_QWORD *)(v31 - 8);
  v33 = (v30 + *(unsigned __int8 *)(v32 + 80) + 9) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v32 + 48))(v33, 1, v31))
    (*(void (**)(unint64_t, uint64_t))(v32 + 8))(v33, v31);
  v34 = v33 + *(_QWORD *)(v32 + 64);
  if (!*(_DWORD *)(v32 + 84))
    ++v34;
  v35 = *(_QWORD *)(a2[14] - 8);
  v36 = (*(unsigned __int8 *)(v35 + 80)
       + ((((((v34 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8)
       + 25) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
  (*(void (**)(unint64_t))(v35 + 8))(v36);
  v37 = (*(_QWORD *)(v35 + 64) + v36 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  result = swift_release();
  v39 = (_QWORD *)((((((((((v37 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
                    + 23) & 0xFFFFFFFFFFFFFFF8)
                  + 23) & 0xFFFFFFFFFFFFFFF8);
  if (*v39 >= 0xFFFFFFFFuLL)
    result = swift_release();
  v40 = (_QWORD *)(((unint64_t)v39 + 23) & 0xFFFFFFFFFFFFFFF8);
  if (*v40 >= 0xFFFFFFFFuLL)
    result = swift_release();
  if (*(_QWORD *)(((unint64_t)v40 + 23) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL)
    return swift_release();
  return result;
}

_BYTE *sub_23BFB7D5C(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  size_t v22;
  size_t v23;
  int v24;
  int v25;
  unint64_t v26;
  unsigned int v27;
  void *v28;
  const void *v29;
  void *v30;
  const void *v31;
  uint64_t v32;
  _BYTE *v33;
  size_t v34;
  size_t v35;
  size_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const void *v43;
  unsigned int (*v44)(const void *, uint64_t, uint64_t);
  int v45;
  size_t v46;
  size_t v47;
  size_t v48;
  _QWORD *v49;
  _QWORD *v50;
  _OWORD *v51;
  _OWORD *v52;
  __int128 v53;
  unint64_t v54;
  unint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  size_t __n;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;

  v5 = sub_23BFF82CC();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v91 = *(_QWORD *)(a3 + 88);
  v8 = *(_QWORD *)(v91 - 8);
  v9 = *(unsigned int *)(v8 + 84);
  if ((_DWORD)v9)
    v10 = v9 - 1;
  else
    v10 = 0;
  if (v10 <= v7)
    v11 = *(_DWORD *)(v6 + 84);
  else
    v11 = v10;
  v92 = *(_QWORD *)(a3 + 16);
  v93 = a3;
  v12 = *(_QWORD *)(v92 - 8);
  v13 = *(unsigned int *)(v12 + 84);
  v14 = v13 - 1;
  if (!(_DWORD)v13)
    v14 = 0;
  if (v14 <= v11)
    v15 = v11;
  else
    v15 = v14;
  if ((_DWORD)v9)
    v16 = *(_QWORD *)(v8 + 64);
  else
    v16 = *(_QWORD *)(v8 + 64) + 1;
  v17 = *(unsigned __int8 *)(v8 + 80);
  v18 = ~v17;
  v19 = *(_QWORD *)(v6 + 64) + v17;
  v20 = *(unsigned __int8 *)(v12 + 80);
  v21 = (v16 + v20 + (v19 & ~v17)) & ~v20;
  v22 = *(_QWORD *)(v12 + 64);
  if (!(_DWORD)v13)
    ++v22;
  v23 = v21 + v22;
  __n = v22;
  v89 = v18;
  v90 = ~v20;
  if (!v15)
  {
    if (!a2[v23])
      goto LABEL_33;
    v24 = (a2[v23] - 1) << (8 * v23);
    if (v23 > 3)
      v24 = 0;
    if ((_DWORD)v23)
    {
      if (v23 <= 3)
        v25 = v21 + v22;
      else
        v25 = 4;
      __asm { BR              X11 }
    }
    if (v24 == -1)
      goto LABEL_33;
    goto LABEL_42;
  }
  if ((_DWORD)v7 != v15)
  {
    v26 = (unint64_t)&a2[v19] & v18;
    if (v10 == v15)
      v27 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(v26, v9, v91);
    else
      v27 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v12 + 48))((v26 + v16 + v20) & ~v20, v13, v92);
    if (v27 < 2)
      goto LABEL_33;
LABEL_42:
    if (v15)
      v34 = v23;
    else
      v34 = v23 + 1;
    v33 = a1;
    memcpy(a1, a2, v34);
    v32 = v93;
    goto LABEL_46;
  }
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v6 + 48))(a2, v7, v5))
    goto LABEL_42;
LABEL_33:
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 16))(a1, a2, v5);
  v28 = (void *)((unint64_t)&a1[v19] & v89);
  v29 = (const void *)((unint64_t)&a2[v19] & v89);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v29, 1, v91))
  {
    memcpy(v28, v29, v16);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(v28, v29, v91);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v28, 0, 1, v91);
  }
  v30 = (void *)(((unint64_t)v28 + v16 + v20) & v90);
  v31 = (const void *)(((unint64_t)v29 + v16 + v20) & v90);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v31, 1, v92))
  {
    memcpy(v30, v31, __n);
    v32 = v93;
    v33 = a1;
    if (v15)
      goto LABEL_46;
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 16))(v30, v31, v92);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v30, 0, 1, v92);
    v32 = v93;
    v33 = a1;
    if (v15)
      goto LABEL_46;
  }
  v33[v23] = 0;
LABEL_46:
  if (v15)
    v35 = v23;
  else
    v35 = v23 + 1;
  v36 = v35 + 7;
  v37 = (unint64_t)&v33[v36] & 0xFFFFFFFFFFFFFFF8;
  v38 = (unint64_t)&a2[v36] & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v37 = *(_QWORD *)v38;
  *(_BYTE *)(v37 + 8) = *(_BYTE *)(v38 + 8);
  v39 = *(_QWORD *)(v32 + 104);
  v40 = *(_QWORD *)(v39 - 8);
  v41 = *(unsigned __int8 *)(v40 + 80);
  v42 = (void *)((v41 + 9 + v37) & ~v41);
  v43 = (const void *)((v41 + 9 + v38) & ~v41);
  v44 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v40 + 48);
  swift_bridgeObjectRetain();
  if (v44(v43, 1, v39))
  {
    v45 = *(_DWORD *)(v40 + 84);
    v46 = *(_QWORD *)(v40 + 64);
    if (v45)
      v47 = v46;
    else
      v47 = v46 + 1;
    memcpy(v42, v43, v47);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v40 + 16))(v42, v43, v39);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v42, 0, 1, v39);
    v45 = *(_DWORD *)(v40 + 84);
    v46 = *(_QWORD *)(v40 + 64);
  }
  if (v45)
    v48 = v46;
  else
    v48 = v46 + 1;
  v49 = (_QWORD *)(((unint64_t)v42 + v48 + 7) & 0xFFFFFFFFFFFFF8);
  v50 = (_QWORD *)(((unint64_t)v43 + v48 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v49 = *v50;
  v51 = (_OWORD *)(((unint64_t)v49 + 15) & 0xFFFFFFFFFFFFFFF8);
  v52 = (_OWORD *)(((unint64_t)v50 + 15) & 0xFFFFFFFFFFFFFFF8);
  v53 = v52[1];
  *v51 = *v52;
  v51[1] = v53;
  v54 = ((unint64_t)v51 + 39) & 0xFFFFFFFFFFFFFFF8;
  v55 = ((unint64_t)v52 + 39) & 0xFFFFFFFFFFFFFFF8;
  v56 = *(_OWORD *)v55;
  *(_QWORD *)(v54 + 16) = *(_QWORD *)(v55 + 16);
  *(_OWORD *)v54 = v56;
  *(_BYTE *)(v54 + 24) = *(_BYTE *)(v55 + 24);
  v57 = *(_QWORD *)(*(_QWORD *)(v32 + 112) - 8);
  v58 = *(unsigned __int8 *)(v57 + 80);
  v59 = (v58 + 25 + v54) & ~v58;
  v60 = (v58 + 25 + v55) & ~v58;
  (*(void (**)(uint64_t, uint64_t))(v57 + 16))(v59, v60);
  v61 = *(_QWORD *)(v57 + 64) + 7;
  v62 = (_QWORD *)((v61 + v59) & 0xFFFFFFFFFFFFFFF8);
  v63 = (_QWORD *)((v61 + v60) & 0xFFFFFFFFFFFFFFF8);
  v64 = v63[1];
  *v62 = *v63;
  v62[1] = v64;
  v65 = (_QWORD *)(((unint64_t)v62 + 23) & 0xFFFFFFFFFFFFFFF8);
  v66 = (_QWORD *)(((unint64_t)v63 + 23) & 0xFFFFFFFFFFFFFFF8);
  v67 = v66[1];
  *v65 = *v66;
  v65[1] = v67;
  v68 = (_QWORD *)(((unint64_t)v65 + 23) & 0xFFFFFFFFFFFFFFF8);
  v69 = (_QWORD *)(((unint64_t)v66 + 23) & 0xFFFFFFFFFFFFFFF8);
  v70 = v69[1];
  *v68 = *v69;
  v68[1] = v70;
  v71 = (_QWORD *)(((unint64_t)v68 + 23) & 0xFFFFFFFFFFFFFFF8);
  v72 = (_QWORD *)(((unint64_t)v69 + 23) & 0xFFFFFFFFFFFFFFF8);
  v73 = v72[1];
  *v71 = *v72;
  v71[1] = v73;
  v74 = (_QWORD *)(((unint64_t)v71 + 23) & 0xFFFFFFFFFFFFFFF8);
  v75 = (_QWORD *)(((unint64_t)v72 + 23) & 0xFFFFFFFFFFFFFFF8);
  v76 = v75[1];
  *v74 = *v75;
  v74[1] = v76;
  v77 = ((unint64_t)v74 + 23) & 0xFFFFFFFFFFFFFFF8;
  v78 = (unint64_t *)(((unint64_t)v75 + 23) & 0xFFFFFFFFFFFFFFF8);
  v79 = *v78;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  if (v79 < 0xFFFFFFFF)
  {
    *(_OWORD *)v77 = *(_OWORD *)v78;
  }
  else
  {
    v80 = v78[1];
    *(_QWORD *)v77 = v79;
    *(_QWORD *)(v77 + 8) = v80;
    swift_retain();
  }
  v81 = (v77 + 23) & 0xFFFFFFFFFFFFFFF8;
  v82 = ((unint64_t)v78 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v82 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v81 = *(_OWORD *)v82;
  }
  else
  {
    v83 = *(_QWORD *)(v82 + 8);
    *(_QWORD *)v81 = *(_QWORD *)v82;
    *(_QWORD *)(v81 + 8) = v83;
    swift_retain();
  }
  v84 = (v81 + 23) & 0xFFFFFFFFFFFFFFF8;
  v85 = (v82 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v85 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v84 = *(_OWORD *)v85;
  }
  else
  {
    v86 = *(_QWORD *)(v85 + 8);
    *(_QWORD *)v84 = *(_QWORD *)v85;
    *(_QWORD *)(v84 + 8) = v86;
    swift_retain();
  }
  return v33;
}

_BYTE *sub_23BFB8300(_BYTE *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  uint64_t (*v25)(unsigned __int8 *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  uint64_t v32;
  int v33;
  const void *v34;
  int v35;
  uint64_t v36;
  size_t v37;
  char v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  unsigned int v42;
  unint64_t v43;
  unsigned int v44;
  unint64_t v45;
  unsigned int v46;
  int v47;
  int v48;
  unint64_t v49;
  size_t v50;
  const void *v51;
  void *v52;
  void *v53;
  uint64_t (*v54)(void *, uint64_t, uint64_t);
  int v55;
  int v56;
  size_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  uint64_t (*v61)(void *, uint64_t, uint64_t);
  int v62;
  int v63;
  unsigned int v64;
  size_t v65;
  void *v66;
  const void *v67;
  size_t v68;
  void *v69;
  const void *v70;
  size_t v71;
  size_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  void *v79;
  uint64_t (*v80)(void *, uint64_t, uint64_t);
  int v81;
  int v82;
  size_t v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t v110;
  _QWORD *v111;
  unint64_t *v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  _QWORD *v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  _QWORD *v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v127;
  size_t v128;
  uint64_t v129;
  size_t __n;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int v136;

  v5 = sub_23BFF82CC();
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  v132 = *(_QWORD *)(a3 + 88);
  v9 = *(_QWORD *)(v132 - 8);
  v10 = *(unsigned int *)(v9 + 84);
  if ((_DWORD)v10)
    v11 = v10 - 1;
  else
    v11 = 0;
  if (v11 <= v8)
    v12 = *(_DWORD *)(v7 + 84);
  else
    v12 = v11;
  v135 = a3;
  v131 = *(_QWORD *)(a3 + 16);
  v13 = *(_QWORD *)(v131 - 8);
  v14 = *(unsigned int *)(v13 + 84);
  v15 = v14 - 1;
  if (!(_DWORD)v14)
    v15 = 0;
  if (v15 <= v12)
    v16 = v12;
  else
    v16 = v15;
  if ((_DWORD)v10)
    v17 = *(_QWORD *)(v9 + 64);
  else
    v17 = *(_QWORD *)(v9 + 64) + 1;
  v18 = *(unsigned __int8 *)(v9 + 80);
  v19 = ~v18;
  v20 = *(_QWORD *)(v7 + 64) + v18;
  v21 = *(unsigned __int8 *)(v13 + 80);
  v129 = ~v21;
  __n = v17;
  v22 = (v17 + v21 + (v20 & ~v18)) & ~v21;
  if ((_DWORD)v14)
    v23 = *(_QWORD *)(v13 + 64);
  else
    v23 = *(_QWORD *)(v13 + 64) + 1;
  v24 = v22 + v23;
  v136 = v16;
  v133 = *(_QWORD *)(v7 + 64) + v18;
  v134 = v22 + v23;
  v128 = v23;
  if (!v16)
  {
    v38 = 8 * v24;
    v36 = v135;
    v34 = a2;
    v37 = v24;
    if (a1[v24])
    {
      v39 = (a1[v24] - 1) << v38;
      if (v24 > 3)
        v39 = 0;
      if ((_DWORD)v24)
      {
        if (v24 > 3)
          LODWORD(v24) = 4;
        __asm { BR              X12 }
      }
      if (v39 != -1)
      {
        if (!a2[v24])
          goto LABEL_83;
        v37 = v134;
        if ((a2[v24] - 1) << v38 == -1)
          goto LABEL_83;
        goto LABEL_79;
      }
    }
    if (!a2[v24])
      goto LABEL_62;
    v47 = (a2[v24] - 1) << v38;
    if (v134 > 3)
      v47 = 0;
    if ((_DWORD)v134)
    {
      if (v134 <= 3)
        v48 = v134;
      else
        v48 = 4;
      __asm { BR              X11 }
    }
    v35 = v47 + 1;
    goto LABEL_57;
  }
  if ((_DWORD)v8 == v16)
  {
    v25 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v7 + 48);
    v127 = *(_QWORD *)(v132 - 8);
    v26 = *(_QWORD *)(v5 - 8);
    v27 = *(unsigned __int8 *)(v13 + 80);
    v28 = ~v18;
    v29 = *(_QWORD *)(v131 - 8);
    v30 = a1;
    v31 = a1;
    v32 = v6;
    v33 = ((uint64_t (*)(_BYTE *, uint64_t))v25)(v31, v8);
    v34 = a2;
    v35 = v25(a2, v8, v32);
    v6 = v32;
    a1 = v30;
    v13 = v29;
    v19 = v28;
    v21 = v27;
    v7 = v26;
    v9 = v127;
    v36 = v135;
    if (v33)
    {
      v37 = v134;
      if (!v35)
        goto LABEL_83;
LABEL_79:
      if (v136)
        v65 = v37;
      else
        v65 = v37 + 1;
      memcpy(a1, v34, v65);
      v64 = v136;
      goto LABEL_91;
    }
LABEL_57:
    if (v35)
    {
LABEL_58:
      (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(a1, v6);
      v49 = (unint64_t)&a1[v133] & v19;
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(v49, 1, v132))
        (*(void (**)(unint64_t, uint64_t))(v9 + 8))(v49, v132);
      v50 = (v49 + __n + v21) & v129;
      v37 = v134;
      if (!(*(unsigned int (**)(size_t, uint64_t, uint64_t))(v13 + 48))(v50, 1, v131))
        (*(void (**)(size_t, uint64_t))(v13 + 8))(v50, v131);
      goto LABEL_79;
    }
LABEL_62:
    (*(void (**)(_BYTE *, const void *, uint64_t))(v7 + 24))(a1, v34, v6);
    v51 = v34;
    v52 = (void *)((unint64_t)&a1[v133] & v19);
    v53 = (void *)(((unint64_t)v51 + v133) & v19);
    v54 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v9 + 48);
    v55 = v54(v52, 1, v132);
    v56 = v54(v53, 1, v132);
    if (v55)
    {
      if (!v56)
      {
        (*(void (**)(void *, void *, uint64_t))(v9 + 16))(v52, v53, v132);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v52, 0, 1, v132);
LABEL_69:
        v57 = __n;
        v58 = v131;
LABEL_70:
        v59 = (void *)(((unint64_t)v52 + v57 + v21) & v129);
        v60 = (void *)(((unint64_t)v53 + v57 + v21) & v129);
        v61 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
        v62 = v61(v59, 1, v58);
        v63 = v61(v60, 1, v58);
        if (v62)
        {
          if (!v63)
          {
            (*(void (**)(void *, void *, uint64_t))(v13 + 16))(v59, v60, v58);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v59, 0, 1, v58);
LABEL_76:
            v37 = v134;
            v36 = v135;
            v34 = a2;
            v64 = v136;
            goto LABEL_91;
          }
        }
        else
        {
          if (!v63)
          {
            (*(void (**)(void *, void *, uint64_t))(v13 + 24))(v59, v60, v58);
            goto LABEL_76;
          }
          (*(void (**)(void *, uint64_t))(v13 + 8))(v59, v58);
        }
        memcpy(v59, v60, v128);
        goto LABEL_76;
      }
    }
    else
    {
      if (!v56)
      {
        (*(void (**)(void *, void *, uint64_t))(v9 + 24))(v52, v53, v132);
        goto LABEL_69;
      }
      (*(void (**)(void *, uint64_t))(v9 + 8))(v52, v132);
    }
    v57 = __n;
    memcpy(v52, v53, __n);
    v58 = v131;
    goto LABEL_70;
  }
  v40 = v5;
  v41 = (unint64_t)&a1[v20] & v19;
  if (v11 == v16)
    v42 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(v41, v10, v132);
  else
    v42 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v13 + 48))((v41 + __n + v21) & ~v21, v14, v131);
  if (v42 < 2)
  {
    v43 = (unint64_t)&a2[v133] & v19;
    if (v11 == v136)
      v44 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(v43, v10, v132);
    else
      v44 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v13 + 48))((v43 + __n + v21) & v129, v14, v131);
    v36 = v135;
    v34 = a2;
    v6 = v40;
    if (v44 >= 2)
      goto LABEL_58;
    goto LABEL_62;
  }
  v45 = (unint64_t)&a2[v133] & v19;
  if (v11 == v136)
    v46 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(v45, v10, v132);
  else
    v46 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v13 + 48))((v45 + __n + v21) & v129, v14, v131);
  v37 = v134;
  v36 = v135;
  v34 = a2;
  v6 = v40;
  if (v46 >= 2)
    goto LABEL_79;
LABEL_83:
  (*(void (**)(_BYTE *, const void *, uint64_t))(v7 + 16))(a1, v34, v6);
  v66 = (void *)((unint64_t)&a1[v133] & v19);
  v67 = (const void *)(((unint64_t)v34 + v133) & v19);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v67, 1, v132))
  {
    v68 = __n;
    memcpy(v66, v67, __n);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v66, v67, v132);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v66, 0, 1, v132);
    v68 = __n;
  }
  v69 = (void *)(((unint64_t)v66 + v68 + v21) & v129);
  v70 = (const void *)(((unint64_t)v67 + v68 + v21) & v129);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v70, 1, v131))
  {
    memcpy(v69, v70, v128);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(v69, v70, v131);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v69, 0, 1, v131);
  }
  v34 = a2;
  v64 = v136;
  if (!v136)
    a1[v37] = 0;
LABEL_91:
  if (v64)
    v71 = v37;
  else
    v71 = v37 + 1;
  v72 = v71 + 7;
  v73 = (unint64_t)&a1[v72] & 0xFFFFFFFFFFFFFFF8;
  v74 = ((unint64_t)v34 + v72) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v73 = *(_QWORD *)v74;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v73 + 8) = *(_BYTE *)(v74 + 8);
  v75 = *(_QWORD *)(v36 + 104);
  v76 = *(_QWORD *)(v75 - 8);
  v77 = *(unsigned __int8 *)(v76 + 80);
  v78 = (void *)((v77 + 9 + v73) & ~v77);
  v79 = (void *)((v77 + 9 + v74) & ~v77);
  v80 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v76 + 48);
  v81 = v80(v78, 1, v75);
  v82 = v80(v79, 1, v75);
  if (v81)
  {
    if (!v82)
    {
      (*(void (**)(void *, void *, uint64_t))(v76 + 16))(v78, v79, v75);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v76 + 56))(v78, 0, 1, v75);
      goto LABEL_103;
    }
  }
  else
  {
    if (!v82)
    {
      (*(void (**)(void *, void *, uint64_t))(v76 + 24))(v78, v79, v75);
      goto LABEL_103;
    }
    (*(void (**)(void *, uint64_t))(v76 + 8))(v78, v75);
  }
  if (*(_DWORD *)(v76 + 84))
    v83 = *(_QWORD *)(v76 + 64);
  else
    v83 = *(_QWORD *)(v76 + 64) + 1;
  memcpy(v78, v79, v83);
LABEL_103:
  if (*(_DWORD *)(v76 + 84))
    v84 = *(_QWORD *)(v76 + 64);
  else
    v84 = *(_QWORD *)(v76 + 64) + 1;
  v85 = (_QWORD *)(((unint64_t)v78 + v84 + 7) & 0xFFFFFFFFFFFFF8);
  v86 = (_QWORD *)(((unint64_t)v79 + v84 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v85 = *v86;
  v87 = (_QWORD *)(((unint64_t)v85 + 15) & 0xFFFFFFFFFFFFFFF8);
  v88 = (_QWORD *)(((unint64_t)v86 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v87 = *v88;
  v87[1] = v88[1];
  v87[2] = v88[2];
  v87[3] = v88[3];
  v89 = ((unint64_t)v87 + 39) & 0xFFFFFFFFFFFFFFF8;
  v90 = ((unint64_t)v88 + 39) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v89 = *(_QWORD *)v90;
  *(_QWORD *)(v89 + 8) = *(_QWORD *)(v90 + 8);
  *(_QWORD *)(v89 + 16) = *(_QWORD *)(v90 + 16);
  *(_BYTE *)(v89 + 24) = *(_BYTE *)(v90 + 24);
  v91 = *(_QWORD *)(*(_QWORD *)(v36 + 112) - 8);
  v92 = *(unsigned __int8 *)(v91 + 80);
  v93 = (v92 + 25 + v89) & ~v92;
  v94 = (v92 + 25 + v90) & ~v92;
  (*(void (**)(uint64_t, uint64_t))(v91 + 24))(v93, v94);
  v95 = *(_QWORD *)(v91 + 64) + 7;
  v96 = (_QWORD *)((v95 + v93) & 0xFFFFFFFFFFFFFFF8);
  v97 = (_QWORD *)((v95 + v94) & 0xFFFFFFFFFFFFFFF8);
  v98 = v97[1];
  *v96 = *v97;
  v96[1] = v98;
  swift_retain();
  swift_release();
  v99 = (_QWORD *)(((unint64_t)v96 + 23) & 0xFFFFFFFFFFFFFFF8);
  v100 = (_QWORD *)(((unint64_t)v97 + 23) & 0xFFFFFFFFFFFFFFF8);
  v101 = v100[1];
  *v99 = *v100;
  v99[1] = v101;
  swift_retain();
  swift_release();
  v102 = (_QWORD *)(((unint64_t)v99 + 23) & 0xFFFFFFFFFFFFFFF8);
  v103 = (_QWORD *)(((unint64_t)v100 + 23) & 0xFFFFFFFFFFFFFFF8);
  v104 = v103[1];
  *v102 = *v103;
  v102[1] = v104;
  swift_retain();
  swift_release();
  v105 = (_QWORD *)(((unint64_t)v102 + 23) & 0xFFFFFFFFFFFFFFF8);
  v106 = (_QWORD *)(((unint64_t)v103 + 23) & 0xFFFFFFFFFFFFFFF8);
  v107 = v106[1];
  *v105 = *v106;
  v105[1] = v107;
  swift_retain();
  swift_release();
  v108 = (_QWORD *)(((unint64_t)v105 + 23) & 0xFFFFFFFFFFFFFFF8);
  v109 = (_QWORD *)(((unint64_t)v106 + 23) & 0xFFFFFFFFFFFFFFF8);
  v110 = v109[1];
  *v108 = *v109;
  v108[1] = v110;
  swift_retain();
  swift_release();
  v111 = (_QWORD *)(((unint64_t)v108 + 23) & 0xFFFFFFFFFFFFFFF8);
  v112 = (unint64_t *)(((unint64_t)v109 + 23) & 0xFFFFFFFFFFFFFFF8);
  v113 = *v112;
  if (*v111 < 0xFFFFFFFFuLL)
  {
    if (v113 >= 0xFFFFFFFF)
    {
      v115 = v112[1];
      *v111 = v113;
      v111[1] = v115;
      swift_retain();
      goto LABEL_113;
    }
  }
  else
  {
    if (v113 >= 0xFFFFFFFF)
    {
      v114 = v112[1];
      *v111 = v113;
      v111[1] = v114;
      swift_retain();
      swift_release();
      goto LABEL_113;
    }
    swift_release();
  }
  *(_OWORD *)v111 = *(_OWORD *)v112;
LABEL_113:
  v116 = (_QWORD *)(((unint64_t)v111 + 23) & 0xFFFFFFFFFFFFFFF8);
  v117 = (unint64_t *)(((unint64_t)v112 + 23) & 0xFFFFFFFFFFFFFFF8);
  v118 = *v117;
  if (*v116 < 0xFFFFFFFFuLL)
  {
    if (v118 >= 0xFFFFFFFF)
    {
      v120 = v117[1];
      *v116 = v118;
      v116[1] = v120;
      swift_retain();
      goto LABEL_120;
    }
  }
  else
  {
    if (v118 >= 0xFFFFFFFF)
    {
      v119 = v117[1];
      *v116 = v118;
      v116[1] = v119;
      swift_retain();
      swift_release();
      goto LABEL_120;
    }
    swift_release();
  }
  *(_OWORD *)v116 = *(_OWORD *)v117;
LABEL_120:
  v121 = (_QWORD *)(((unint64_t)v116 + 23) & 0xFFFFFFFFFFFFFFF8);
  v122 = (unint64_t *)(((unint64_t)v117 + 23) & 0xFFFFFFFFFFFFFFF8);
  v123 = *v122;
  if (*v121 < 0xFFFFFFFFuLL)
  {
    if (v123 >= 0xFFFFFFFF)
    {
      v125 = v122[1];
      *v121 = v123;
      v121[1] = v125;
      swift_retain();
      return a1;
    }
LABEL_126:
    *(_OWORD *)v121 = *(_OWORD *)v122;
    return a1;
  }
  if (v123 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_126;
  }
  v124 = v122[1];
  *v121 = v123;
  v121[1] = v124;
  swift_retain();
  swift_release();
  return a1;
}

_BYTE *sub_23BFB8E60(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  size_t v22;
  size_t v23;
  int v24;
  int v25;
  unint64_t v26;
  unsigned int v27;
  void *v28;
  const void *v29;
  void *v30;
  const void *v31;
  _BYTE *v32;
  uint64_t v33;
  size_t v34;
  size_t v35;
  size_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const void *v43;
  int v44;
  size_t v45;
  size_t v46;
  size_t v47;
  _QWORD *v48;
  _QWORD *v49;
  _OWORD *v50;
  _OWORD *v51;
  __int128 v52;
  unint64_t v53;
  unint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _OWORD *v61;
  _OWORD *v62;
  _OWORD *v63;
  _OWORD *v64;
  _OWORD *v65;
  _OWORD *v66;
  _OWORD *v67;
  _OWORD *v68;
  _OWORD *v69;
  _OWORD *v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  size_t __n;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;

  v5 = sub_23BFF82CC();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v85 = *(_QWORD *)(a3 + 88);
  v8 = *(_QWORD *)(v85 - 8);
  v9 = *(unsigned int *)(v8 + 84);
  if ((_DWORD)v9)
    v10 = v9 - 1;
  else
    v10 = 0;
  if (v10 <= v7)
    v11 = *(_DWORD *)(v6 + 84);
  else
    v11 = v10;
  v86 = *(_QWORD *)(a3 + 16);
  v87 = a3;
  v12 = *(_QWORD *)(v86 - 8);
  v13 = *(unsigned int *)(v12 + 84);
  v14 = v13 - 1;
  if (!(_DWORD)v13)
    v14 = 0;
  if (v14 <= v11)
    v15 = v11;
  else
    v15 = v14;
  if ((_DWORD)v9)
    v16 = *(_QWORD *)(v8 + 64);
  else
    v16 = *(_QWORD *)(v8 + 64) + 1;
  v17 = *(unsigned __int8 *)(v8 + 80);
  v18 = ~v17;
  v19 = *(_QWORD *)(v6 + 64) + v17;
  v20 = *(unsigned __int8 *)(v12 + 80);
  v21 = (v16 + v20 + (v19 & ~v17)) & ~v20;
  v22 = *(_QWORD *)(v12 + 64);
  if (!(_DWORD)v13)
    ++v22;
  v23 = v21 + v22;
  __n = v22;
  v83 = v18;
  v84 = ~v20;
  if (!v15)
  {
    if (!a2[v23])
      goto LABEL_33;
    v24 = (a2[v23] - 1) << (8 * v23);
    if (v23 > 3)
      v24 = 0;
    if ((_DWORD)v23)
    {
      if (v23 <= 3)
        v25 = v21 + v22;
      else
        v25 = 4;
      __asm { BR              X11 }
    }
    if (v24 == -1)
      goto LABEL_33;
    goto LABEL_42;
  }
  if ((_DWORD)v7 != v15)
  {
    v26 = (unint64_t)&a2[v19] & v18;
    if (v10 == v15)
      v27 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(v26, v9, v85);
    else
      v27 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v12 + 48))((v26 + v16 + v20) & ~v20, v13, v86);
    if (v27 < 2)
      goto LABEL_33;
LABEL_42:
    if (v15)
      v34 = v23;
    else
      v34 = v23 + 1;
    v32 = a1;
    memcpy(a1, a2, v34);
    v33 = v87;
    goto LABEL_46;
  }
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v6 + 48))(a2, v7, v5))
    goto LABEL_42;
LABEL_33:
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 32))(a1, a2, v5);
  v28 = (void *)((unint64_t)&a1[v19] & v83);
  v29 = (const void *)((unint64_t)&a2[v19] & v83);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v29, 1, v85))
  {
    memcpy(v28, v29, v16);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(v28, v29, v85);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v28, 0, 1, v85);
  }
  v30 = (void *)(((unint64_t)v28 + v16 + v20) & v84);
  v31 = (const void *)(((unint64_t)v29 + v16 + v20) & v84);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v31, 1, v86))
  {
    memcpy(v30, v31, __n);
    v33 = v87;
    v32 = a1;
    if (v15)
      goto LABEL_46;
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v30, v31, v86);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v30, 0, 1, v86);
    v33 = v87;
    v32 = a1;
    if (v15)
      goto LABEL_46;
  }
  v32[v23] = 0;
LABEL_46:
  if (v15)
    v35 = v23;
  else
    v35 = v23 + 1;
  v36 = v35 + 7;
  v37 = (unint64_t)&v32[v36] & 0xFFFFFFFFFFFFFFF8;
  v38 = (unint64_t)&a2[v36] & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v37 = *(_QWORD *)v38;
  *(_BYTE *)(v37 + 8) = *(_BYTE *)(v38 + 8);
  v39 = *(_QWORD *)(v33 + 104);
  v40 = *(_QWORD *)(v39 - 8);
  v41 = *(unsigned __int8 *)(v40 + 80);
  v42 = (void *)((v41 + 9 + v37) & ~v41);
  v43 = (const void *)((v41 + 9 + v38) & ~v41);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v40 + 48))(v43, 1, v39))
  {
    v44 = *(_DWORD *)(v40 + 84);
    v45 = *(_QWORD *)(v40 + 64);
    if (v44)
      v46 = v45;
    else
      v46 = v45 + 1;
    memcpy(v42, v43, v46);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v40 + 32))(v42, v43, v39);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v42, 0, 1, v39);
    v44 = *(_DWORD *)(v40 + 84);
    v45 = *(_QWORD *)(v40 + 64);
  }
  if (v44)
    v47 = v45;
  else
    v47 = v45 + 1;
  v48 = (_QWORD *)(((unint64_t)v42 + v47 + 7) & 0xFFFFFFFFFFFFF8);
  v49 = (_QWORD *)(((unint64_t)v43 + v47 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v48 = *v49;
  v50 = (_OWORD *)(((unint64_t)v48 + 15) & 0xFFFFFFFFFFFFFFF8);
  v51 = (_OWORD *)(((unint64_t)v49 + 15) & 0xFFFFFFFFFFFFFFF8);
  v52 = v51[1];
  *v50 = *v51;
  v50[1] = v52;
  v53 = ((unint64_t)v50 + 39) & 0xFFFFFFFFFFFFFFF8;
  v54 = ((unint64_t)v51 + 39) & 0xFFFFFFFFFFFFFFF8;
  v55 = *(_OWORD *)v54;
  *(_QWORD *)(v53 + 16) = *(_QWORD *)(v54 + 16);
  *(_OWORD *)v53 = v55;
  *(_BYTE *)(v53 + 24) = *(_BYTE *)(v54 + 24);
  v56 = *(_QWORD *)(*(_QWORD *)(v33 + 112) - 8);
  v57 = *(unsigned __int8 *)(v56 + 80);
  v58 = (v57 + 25 + v53) & ~v57;
  v59 = (v57 + 25 + v54) & ~v57;
  (*(void (**)(uint64_t, uint64_t))(v56 + 32))(v58, v59);
  v60 = *(_QWORD *)(v56 + 64) + 7;
  v61 = (_OWORD *)((v60 + v58) & 0xFFFFFFFFFFFFFFF8);
  v62 = (_OWORD *)((v60 + v59) & 0xFFFFFFFFFFFFFFF8);
  *v61 = *v62;
  v63 = (_OWORD *)(((unint64_t)v61 + 23) & 0xFFFFFFFFFFFFF8);
  v64 = (_OWORD *)(((unint64_t)v62 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v63 = *v64;
  v65 = (_OWORD *)(((unint64_t)v63 + 23) & 0xFFFFFFFFFFFFFFF8);
  v66 = (_OWORD *)(((unint64_t)v64 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v65 = *v66;
  v67 = (_OWORD *)(((unint64_t)v65 + 23) & 0xFFFFFFFFFFFFF8);
  v68 = (_OWORD *)(((unint64_t)v66 + 23) & 0xFFFFFFFFFFFFF8);
  *v67 = *v68;
  v69 = (_OWORD *)(((unint64_t)v67 + 23) & 0xFFFFFFFFFFFFF8);
  v70 = (_OWORD *)(((unint64_t)v68 + 23) & 0xFFFFFFFFFFFFF8);
  *v69 = *v70;
  v71 = ((unint64_t)v69 + 23) & 0xFFFFFFFFFFFFFFF8;
  v72 = ((unint64_t)v70 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v72 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v71 = *(_OWORD *)v72;
  }
  else
  {
    v73 = *(_QWORD *)(v72 + 8);
    *(_QWORD *)v71 = *(_QWORD *)v72;
    *(_QWORD *)(v71 + 8) = v73;
  }
  v74 = (v71 + 23) & 0xFFFFFFFFFFFFFFF8;
  v75 = (v72 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v75 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v74 = *(_OWORD *)v75;
  }
  else
  {
    v76 = *(_QWORD *)(v75 + 8);
    *(_QWORD *)v74 = *(_QWORD *)v75;
    *(_QWORD *)(v74 + 8) = v76;
  }
  v77 = (v74 + 23) & 0xFFFFFFFFFFFFFFF8;
  v78 = (uint64_t *)((v75 + 23) & 0xFFFFFFFFFFFFFFF8);
  v79 = *v78;
  if ((unint64_t)*v78 < 0xFFFFFFFF)
  {
    *(_OWORD *)v77 = *(_OWORD *)v78;
  }
  else
  {
    v80 = v78[1];
    *(_QWORD *)v77 = v79;
    *(_QWORD *)(v77 + 8) = v80;
  }
  return v32;
}

_BYTE *sub_23BFB93A8(_BYTE *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  uint64_t (*v25)(unsigned __int8 *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  uint64_t v32;
  int v33;
  const void *v34;
  int v35;
  uint64_t v36;
  size_t v37;
  char v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  unsigned int v42;
  unint64_t v43;
  unsigned int v44;
  unint64_t v45;
  unsigned int v46;
  int v47;
  int v48;
  unint64_t v49;
  size_t v50;
  const void *v51;
  void *v52;
  void *v53;
  uint64_t (*v54)(void *, uint64_t, uint64_t);
  int v55;
  int v56;
  size_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  uint64_t (*v61)(void *, uint64_t, uint64_t);
  int v62;
  int v63;
  unsigned int v64;
  size_t v65;
  void *v66;
  const void *v67;
  size_t v68;
  void *v69;
  const void *v70;
  size_t v71;
  size_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  void *v79;
  uint64_t (*v80)(void *, uint64_t, uint64_t);
  int v81;
  int v82;
  size_t v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _OWORD *v96;
  uint64_t v97;
  unint64_t v98;
  _OWORD *v99;
  _OWORD *v100;
  _OWORD *v101;
  _OWORD *v102;
  uint64_t v103;
  __int128 v104;
  _OWORD *v105;
  uint64_t v106;
  _QWORD *v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  _QWORD *v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v123;
  size_t v124;
  uint64_t v125;
  size_t __n;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int v132;

  v5 = sub_23BFF82CC();
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  v128 = *(_QWORD *)(a3 + 88);
  v9 = *(_QWORD *)(v128 - 8);
  v10 = *(unsigned int *)(v9 + 84);
  if ((_DWORD)v10)
    v11 = v10 - 1;
  else
    v11 = 0;
  if (v11 <= v8)
    v12 = *(_DWORD *)(v7 + 84);
  else
    v12 = v11;
  v131 = a3;
  v127 = *(_QWORD *)(a3 + 16);
  v13 = *(_QWORD *)(v127 - 8);
  v14 = *(unsigned int *)(v13 + 84);
  v15 = v14 - 1;
  if (!(_DWORD)v14)
    v15 = 0;
  if (v15 <= v12)
    v16 = v12;
  else
    v16 = v15;
  if ((_DWORD)v10)
    v17 = *(_QWORD *)(v9 + 64);
  else
    v17 = *(_QWORD *)(v9 + 64) + 1;
  v18 = *(unsigned __int8 *)(v9 + 80);
  v19 = ~v18;
  v20 = *(_QWORD *)(v7 + 64) + v18;
  v21 = *(unsigned __int8 *)(v13 + 80);
  v125 = ~v21;
  __n = v17;
  v22 = (v17 + v21 + (v20 & ~v18)) & ~v21;
  if ((_DWORD)v14)
    v23 = *(_QWORD *)(v13 + 64);
  else
    v23 = *(_QWORD *)(v13 + 64) + 1;
  v24 = v22 + v23;
  v132 = v16;
  v129 = *(_QWORD *)(v7 + 64) + v18;
  v130 = v22 + v23;
  v124 = v23;
  if (!v16)
  {
    v38 = 8 * v24;
    v36 = v131;
    v34 = a2;
    v37 = v24;
    if (a1[v24])
    {
      v39 = (a1[v24] - 1) << v38;
      if (v24 > 3)
        v39 = 0;
      if ((_DWORD)v24)
      {
        if (v24 > 3)
          LODWORD(v24) = 4;
        __asm { BR              X12 }
      }
      if (v39 != -1)
      {
        if (!a2[v24])
          goto LABEL_83;
        v37 = v130;
        if ((a2[v24] - 1) << v38 == -1)
          goto LABEL_83;
        goto LABEL_79;
      }
    }
    if (!a2[v24])
      goto LABEL_62;
    v47 = (a2[v24] - 1) << v38;
    if (v130 > 3)
      v47 = 0;
    if ((_DWORD)v130)
    {
      if (v130 <= 3)
        v48 = v130;
      else
        v48 = 4;
      __asm { BR              X11 }
    }
    v35 = v47 + 1;
    goto LABEL_57;
  }
  if ((_DWORD)v8 == v16)
  {
    v25 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v7 + 48);
    v123 = *(_QWORD *)(v128 - 8);
    v26 = *(_QWORD *)(v5 - 8);
    v27 = *(unsigned __int8 *)(v13 + 80);
    v28 = ~v18;
    v29 = *(_QWORD *)(v127 - 8);
    v30 = a1;
    v31 = a1;
    v32 = v6;
    v33 = ((uint64_t (*)(_BYTE *, uint64_t))v25)(v31, v8);
    v34 = a2;
    v35 = v25(a2, v8, v32);
    v6 = v32;
    a1 = v30;
    v13 = v29;
    v19 = v28;
    v21 = v27;
    v7 = v26;
    v9 = v123;
    v36 = v131;
    if (v33)
    {
      v37 = v130;
      if (!v35)
        goto LABEL_83;
LABEL_79:
      if (v132)
        v65 = v37;
      else
        v65 = v37 + 1;
      memcpy(a1, v34, v65);
      v64 = v132;
      goto LABEL_91;
    }
LABEL_57:
    if (v35)
    {
LABEL_58:
      (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(a1, v6);
      v49 = (unint64_t)&a1[v129] & v19;
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(v49, 1, v128))
        (*(void (**)(unint64_t, uint64_t))(v9 + 8))(v49, v128);
      v50 = (v49 + __n + v21) & v125;
      v37 = v130;
      if (!(*(unsigned int (**)(size_t, uint64_t, uint64_t))(v13 + 48))(v50, 1, v127))
        (*(void (**)(size_t, uint64_t))(v13 + 8))(v50, v127);
      goto LABEL_79;
    }
LABEL_62:
    (*(void (**)(_BYTE *, const void *, uint64_t))(v7 + 40))(a1, v34, v6);
    v51 = v34;
    v52 = (void *)((unint64_t)&a1[v129] & v19);
    v53 = (void *)(((unint64_t)v51 + v129) & v19);
    v54 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v9 + 48);
    v55 = v54(v52, 1, v128);
    v56 = v54(v53, 1, v128);
    if (v55)
    {
      if (!v56)
      {
        (*(void (**)(void *, void *, uint64_t))(v9 + 32))(v52, v53, v128);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v52, 0, 1, v128);
LABEL_69:
        v57 = __n;
        v58 = v127;
LABEL_70:
        v59 = (void *)(((unint64_t)v52 + v57 + v21) & v125);
        v60 = (void *)(((unint64_t)v53 + v57 + v21) & v125);
        v61 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
        v62 = v61(v59, 1, v58);
        v63 = v61(v60, 1, v58);
        if (v62)
        {
          if (!v63)
          {
            (*(void (**)(void *, void *, uint64_t))(v13 + 32))(v59, v60, v58);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v59, 0, 1, v58);
LABEL_76:
            v37 = v130;
            v36 = v131;
            v34 = a2;
            v64 = v132;
            goto LABEL_91;
          }
        }
        else
        {
          if (!v63)
          {
            (*(void (**)(void *, void *, uint64_t))(v13 + 40))(v59, v60, v58);
            goto LABEL_76;
          }
          (*(void (**)(void *, uint64_t))(v13 + 8))(v59, v58);
        }
        memcpy(v59, v60, v124);
        goto LABEL_76;
      }
    }
    else
    {
      if (!v56)
      {
        (*(void (**)(void *, void *, uint64_t))(v9 + 40))(v52, v53, v128);
        goto LABEL_69;
      }
      (*(void (**)(void *, uint64_t))(v9 + 8))(v52, v128);
    }
    v57 = __n;
    memcpy(v52, v53, __n);
    v58 = v127;
    goto LABEL_70;
  }
  v40 = v5;
  v41 = (unint64_t)&a1[v20] & v19;
  if (v11 == v16)
    v42 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(v41, v10, v128);
  else
    v42 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v13 + 48))((v41 + __n + v21) & ~v21, v14, v127);
  if (v42 < 2)
  {
    v43 = (unint64_t)&a2[v129] & v19;
    if (v11 == v132)
      v44 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(v43, v10, v128);
    else
      v44 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v13 + 48))((v43 + __n + v21) & v125, v14, v127);
    v36 = v131;
    v34 = a2;
    v6 = v40;
    if (v44 >= 2)
      goto LABEL_58;
    goto LABEL_62;
  }
  v45 = (unint64_t)&a2[v129] & v19;
  if (v11 == v132)
    v46 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(v45, v10, v128);
  else
    v46 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v13 + 48))((v45 + __n + v21) & v125, v14, v127);
  v37 = v130;
  v36 = v131;
  v34 = a2;
  v6 = v40;
  if (v46 >= 2)
    goto LABEL_79;
LABEL_83:
  (*(void (**)(_BYTE *, const void *, uint64_t))(v7 + 32))(a1, v34, v6);
  v66 = (void *)((unint64_t)&a1[v129] & v19);
  v67 = (const void *)(((unint64_t)v34 + v129) & v19);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v67, 1, v128))
  {
    v68 = __n;
    memcpy(v66, v67, __n);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(v66, v67, v128);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v66, 0, 1, v128);
    v68 = __n;
  }
  v69 = (void *)(((unint64_t)v66 + v68 + v21) & v125);
  v70 = (const void *)(((unint64_t)v67 + v68 + v21) & v125);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v70, 1, v127))
  {
    memcpy(v69, v70, v124);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v69, v70, v127);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v69, 0, 1, v127);
  }
  v34 = a2;
  v64 = v132;
  if (!v132)
    a1[v37] = 0;
LABEL_91:
  if (v64)
    v71 = v37;
  else
    v71 = v37 + 1;
  v72 = v71 + 7;
  v73 = (unint64_t)&a1[v72] & 0xFFFFFFFFFFFFFFF8;
  v74 = ((unint64_t)v34 + v72) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v73 = *(_QWORD *)v74;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v73 + 8) = *(_BYTE *)(v74 + 8);
  v75 = *(_QWORD *)(v36 + 104);
  v76 = *(_QWORD *)(v75 - 8);
  v77 = *(unsigned __int8 *)(v76 + 80);
  v78 = (void *)((v77 + 9 + v73) & ~v77);
  v79 = (void *)((v77 + 9 + v74) & ~v77);
  v80 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v76 + 48);
  v81 = v80(v78, 1, v75);
  v82 = v80(v79, 1, v75);
  if (v81)
  {
    if (!v82)
    {
      (*(void (**)(void *, void *, uint64_t))(v76 + 32))(v78, v79, v75);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v76 + 56))(v78, 0, 1, v75);
      goto LABEL_103;
    }
  }
  else
  {
    if (!v82)
    {
      (*(void (**)(void *, void *, uint64_t))(v76 + 40))(v78, v79, v75);
      goto LABEL_103;
    }
    (*(void (**)(void *, uint64_t))(v76 + 8))(v78, v75);
  }
  if (*(_DWORD *)(v76 + 84))
    v83 = *(_QWORD *)(v76 + 64);
  else
    v83 = *(_QWORD *)(v76 + 64) + 1;
  memcpy(v78, v79, v83);
LABEL_103:
  if (*(_DWORD *)(v76 + 84))
    v84 = *(_QWORD *)(v76 + 64);
  else
    v84 = *(_QWORD *)(v76 + 64) + 1;
  v85 = (_QWORD *)(((unint64_t)v78 + v84 + 7) & 0xFFFFFFFFFFFFF8);
  v86 = (_QWORD *)(((unint64_t)v79 + v84 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v85 = *v86;
  v87 = (_QWORD *)(((unint64_t)v85 + 15) & 0xFFFFFFFFFFFFFFF8);
  v88 = (_QWORD *)(((unint64_t)v86 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v87 = *v88;
  v87[1] = v88[1];
  v87[2] = v88[2];
  v87[3] = v88[3];
  v89 = ((unint64_t)v87 + 39) & 0xFFFFFFFFFFFFFFF8;
  v90 = ((unint64_t)v88 + 39) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v89 = *(_QWORD *)v90;
  *(_QWORD *)(v89 + 8) = *(_QWORD *)(v90 + 8);
  *(_QWORD *)(v89 + 16) = *(_QWORD *)(v90 + 16);
  *(_BYTE *)(v89 + 24) = *(_BYTE *)(v90 + 24);
  v91 = *(_QWORD *)(*(_QWORD *)(v36 + 112) - 8);
  v92 = *(unsigned __int8 *)(v91 + 80);
  v93 = (v92 + 25 + v89) & ~v92;
  v94 = (v92 + 25 + v90) & ~v92;
  (*(void (**)(uint64_t, uint64_t))(v91 + 40))(v93, v94);
  v95 = *(_QWORD *)(v91 + 64) + 7;
  v96 = (_OWORD *)((v95 + v93) & 0xFFFFFFFFFFFFFFF8);
  v97 = v95 + v94;
  v98 = (v97 & 0xFFFFFFFFFFFFFFF8) + 23;
  *v96 = *(_OWORD *)(v97 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  v99 = (_OWORD *)(((unint64_t)v96 + 23) & 0xFFFFFFFFFFFFFFF8);
  v98 &= 0xFFFFFFFFFFFFF8uLL;
  *v99 = *(_OWORD *)v98;
  swift_release();
  v100 = (_OWORD *)(((unint64_t)v99 + 23) & 0xFFFFFFFFFFFFFFF8);
  v101 = (_OWORD *)((v98 + 23) & 0xFFFFFFFFFFFFF8);
  *v100 = *v101;
  swift_release();
  v102 = (_OWORD *)(((unint64_t)v100 + 23) & 0xFFFFFFFFFFFFFFF8);
  v103 = ((unint64_t)v101 + 23) & 0xFFFFFFFFFFFFF8;
  v104 = *(_OWORD *)v103;
  v103 += 23;
  *v102 = v104;
  swift_release();
  v105 = (_OWORD *)(((unint64_t)v102 + 23) & 0xFFFFFFFFFFFFFFF8);
  v106 = (v103 & 0xFFFFFFFFFFFFF8) + 23;
  *v105 = *(_OWORD *)(v103 & 0xFFFFFFFFFFFFF8);
  swift_release();
  v107 = (_QWORD *)(((unint64_t)v105 + 23) & 0xFFFFFFFFFFFFFFF8);
  v108 = v106 & 0xFFFFFFFFFFFFFFF8;
  v109 = *(_QWORD *)(v106 & 0xFFFFFFFFFFFFFFF8);
  if (*v107 < 0xFFFFFFFFuLL)
  {
    if (v109 >= 0xFFFFFFFF)
    {
      v111 = *(_QWORD *)(v108 + 8);
      *v107 = v109;
      v107[1] = v111;
      goto LABEL_113;
    }
  }
  else
  {
    if (v109 >= 0xFFFFFFFF)
    {
      v110 = *(_QWORD *)(v108 + 8);
      *v107 = v109;
      v107[1] = v110;
      swift_release();
      goto LABEL_113;
    }
    swift_release();
  }
  *(_OWORD *)v107 = *(_OWORD *)v108;
LABEL_113:
  v112 = (_QWORD *)(((unint64_t)v107 + 23) & 0xFFFFFFFFFFFFFFF8);
  v113 = (unint64_t *)((v108 + 23) & 0xFFFFFFFFFFFFFFF8);
  v114 = *v113;
  if (*v112 < 0xFFFFFFFFuLL)
  {
    if (v114 >= 0xFFFFFFFF)
    {
      v116 = v113[1];
      *v112 = v114;
      v112[1] = v116;
      goto LABEL_120;
    }
  }
  else
  {
    if (v114 >= 0xFFFFFFFF)
    {
      v115 = v113[1];
      *v112 = v114;
      v112[1] = v115;
      swift_release();
      goto LABEL_120;
    }
    swift_release();
  }
  *(_OWORD *)v112 = *(_OWORD *)v113;
LABEL_120:
  v117 = (_QWORD *)(((unint64_t)v112 + 23) & 0xFFFFFFFFFFFFFFF8);
  v118 = (unint64_t *)(((unint64_t)v113 + 23) & 0xFFFFFFFFFFFFFFF8);
  v119 = *v118;
  if (*v117 < 0xFFFFFFFFuLL)
  {
    if (v119 >= 0xFFFFFFFF)
    {
      v121 = v118[1];
      *v117 = v119;
      v117[1] = v121;
      return a1;
    }
LABEL_126:
    *(_OWORD *)v117 = *(_OWORD *)v118;
    return a1;
  }
  if (v119 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_126;
  }
  v120 = v118[1];
  *v117 = v119;
  v117[1] = v120;
  swift_release();
  return a1;
}

uint64_t sub_23BFB9EA0(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t *v41;
  unint64_t v42;
  unsigned int v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v6 = sub_23BFF82CC();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  v9 = a3[11];
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int *)(v10 + 84);
  if ((_DWORD)v11)
    v12 = v11 - 1;
  else
    v12 = 0;
  if (v12 <= v8)
    v13 = *(_DWORD *)(v7 + 84);
  else
    v13 = v12;
  v14 = a3[2];
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned int *)(v15 + 84);
  v17 = v16 - 1;
  if (!(_DWORD)v16)
    v17 = 0;
  if (v17 <= v13)
    v18 = v13;
  else
    v18 = v17;
  v19 = v18 == 0;
  if (v18)
    v20 = v18 - 1;
  else
    v20 = 0;
  v21 = a3[13];
  v22 = a3[14];
  v23 = *(_QWORD *)(v21 - 8);
  v24 = *(unsigned int *)(v23 + 84);
  if ((_DWORD)v24)
    v25 = v24 - 1;
  else
    v25 = 0;
  if (v20 <= v25)
    v26 = v25;
  else
    v26 = v20;
  v27 = *(_QWORD *)(v22 - 8);
  v28 = *(unsigned int *)(v27 + 84);
  if (v26 <= v28)
    v29 = *(_DWORD *)(v27 + 84);
  else
    v29 = v26;
  if (v29 <= 0x7FFFFFFF)
    v30 = 0x7FFFFFFF;
  else
    v30 = v29;
  v31 = *(_QWORD *)(v10 + 64);
  if (!(_DWORD)v11)
    ++v31;
  if (!(_DWORD)v16)
    ++v19;
  if ((_DWORD)v24)
    v32 = *(_QWORD *)(v23 + 64);
  else
    v32 = *(_QWORD *)(v23 + 64) + 1;
  if (!a2)
    return 0;
  v51 = a1;
  v33 = *(unsigned __int8 *)(v10 + 80);
  v47 = *(_QWORD *)(v7 + 64) + v33;
  v34 = *(unsigned __int8 *)(v15 + 80);
  v50 = v19 + *(_QWORD *)(v15 + 64) + ((v31 + v34 + (v47 & ~v33)) & ~v34);
  v35 = *(unsigned __int8 *)(v23 + 80);
  v49 = v35 + 9;
  v48 = v32 + 7;
  v36 = *(unsigned __int8 *)(v27 + 80);
  v37 = v36 + 25;
  if (v30 < a2)
  {
    if (((((((((((((((((((*(_QWORD *)(v27 + 64)
                         + ((v37
                           + ((((((v48 + ((v49 + ((v50 + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v35)) & 0xFFFFFFFFFFFFFFF8)
                               + 15) & 0xFFFFFFFFFFFFFFF8)
                             + 39) & 0xFFFFFFFFFFFFFFF8)) & ~v36)
                         + 7) & 0xFFFFFFFFFFFFFFF8)
                       + 23) & 0xFFFFFFFFFFFFFFF8)
                     + 23) & 0xFFFFFFFFFFFFFFF8)
                   + 23) & 0xFFFFFFFFFFFFFFF8)
                 + 23) & 0xFFFFFFFFFFFFFFF8)
               + 23) & 0xFFFFFFFFFFFFFFF8)
             + 23) & 0xFFFFFFFFFFFFFFF8)
           + 23) & 0xFFFFFFFFFFFFFFF8)
         + 16) & 0xFFFFFFF8) != 0)
      v38 = 2;
    else
      v38 = a2 - v30 + 1;
    if (v38 >= 0x10000)
      LODWORD(v39) = 4;
    else
      LODWORD(v39) = 2;
    if (v38 < 0x100)
      LODWORD(v39) = 1;
    if (v38 >= 2)
      v39 = v39;
    else
      v39 = 0;
    __asm { BR              X23 }
  }
  if (v20 == v30)
  {
    if (v18 < 2)
      return 0;
    if ((_DWORD)v8 == v18)
    {
      v43 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v51, v8, v6);
    }
    else
    {
      v45 = (v47 + v51) & ~v33;
      if (v12 == v18)
        v46 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v45, v11, v9);
      else
        v46 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))((v45 + v31 + v34) & ~v34, v16, v14);
      if (v46 >= 2)
        v43 = v46 - 1;
      else
        v43 = 0;
    }
LABEL_67:
    if (v43 >= 2)
      return v43 - 1;
    else
      return 0;
  }
  v41 = (unint64_t *)((v51 + v50 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((v29 & 0x80000000) != 0)
  {
    v44 = ((unint64_t)v41 + v49) & ~v35;
    if (v25 != v30)
      return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v27 + 48))((v37+ ((((((v48 + v44) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8)) & ~v36, v28, v22);
    if (v24 < 2)
      return 0;
    v43 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v23 + 48))(v44, v24, v21);
    goto LABEL_67;
  }
  v42 = *v41;
  if (v42 >= 0xFFFFFFFF)
    LODWORD(v42) = -1;
  return (v42 + 1);
}

void sub_23BFBA284(_DWORD *a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  int v30;

  v6 = 0;
  v7 = *(_QWORD *)(sub_23BFF82CC() - 8);
  v8 = *(_QWORD *)(a4[11] - 8);
  v9 = *(_DWORD *)(v8 + 84);
  if (v9)
    v10 = v9 - 1;
  else
    v10 = 0;
  if (v10 <= *(_DWORD *)(v7 + 84))
    v11 = *(_DWORD *)(v7 + 84);
  else
    v11 = v10;
  v12 = *(_QWORD *)(a4[2] - 8);
  v13 = *(_DWORD *)(v12 + 84);
  v14 = v13 - 1;
  if (!v13)
    v14 = 0;
  if (v14 <= v11)
    v15 = v11;
  else
    v15 = v14;
  if (v15)
    v16 = v15 - 1;
  else
    v16 = 0;
  v17 = *(_QWORD *)(a4[13] - 8);
  v18 = *(_DWORD *)(v17 + 84);
  if (v18)
    v19 = v18 - 1;
  else
    v19 = 0;
  if (v16 <= v19)
    v20 = v19;
  else
    v20 = v16;
  v21 = *(_QWORD *)(a4[14] - 8);
  if (v20 <= *(_DWORD *)(v21 + 84))
    v22 = *(_DWORD *)(v21 + 84);
  else
    v22 = v20;
  if (v22 <= 0x7FFFFFFF)
    v23 = 0x7FFFFFFF;
  else
    v23 = v22;
  if (v9)
    v24 = *(_QWORD *)(v8 + 64);
  else
    v24 = *(_QWORD *)(v8 + 64) + 1;
  if (v13)
    v25 = *(_QWORD *)(v12 + 64);
  else
    v25 = *(_QWORD *)(v12 + 64) + 1;
  v26 = ((v24
        + *(unsigned __int8 *)(v12 + 80)
        + ((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))
      + v25;
  if (v15)
    v27 = v26;
  else
    v27 = v26 + 1;
  v28 = *(_QWORD *)(v17 + 64);
  if (!v18)
    ++v28;
  if (v23 < a3)
  {
    if (((((((((((((((((*(_DWORD *)(v21 + 64)
                       + ((*(unsigned __int8 *)(v21 + 80)
                         + 25
                         + (((((((_DWORD)v28
                               + 7
                               + ((*(unsigned __int8 *)(v17 + 80) + 9 + (((_DWORD)v27 + 7) & 0xFFFFFFF8)) & ~*(unsigned __int8 *)(v17 + 80))) & 0xFFFFFFF8)
                             + 15) & 0xFFFFFFF8)
                           + 39) & 0xFFFFFFF8)) & ~*(unsigned __int8 *)(v21 + 80))
                       + 7) & 0xFFFFFFF8)
                     + 23) & 0xFFFFFFF8)
                   + 23) & 0xFFFFFFF8)
                 + 23) & 0xFFFFFFF8)
               + 23) & 0xFFFFFFF8)
             + 23) & 0xFFFFFFF8)
           + 23) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v29 = a3 - v23 + 1;
    else
      v29 = 2;
    if (v29 >= 0x10000)
      v30 = 4;
    else
      v30 = 2;
    if (v29 < 0x100)
      v30 = 1;
    if (v29 >= 2)
      v6 = v30;
    else
      v6 = 0;
  }
  if (a2 > v23)
  {
    if (((((((((((((((((*(_DWORD *)(v21 + 64)
                       + ((*(unsigned __int8 *)(v21 + 80)
                         + 25
                         + (((((((_DWORD)v28
                               + 7
                               + ((*(unsigned __int8 *)(v17 + 80) + 9 + (((_DWORD)v27 + 7) & 0xFFFFFFF8)) & ~*(unsigned __int8 *)(v17 + 80))) & 0xFFFFFFF8)
                             + 15) & 0xFFFFFFF8)
                           + 39) & 0xFFFFFFF8)) & ~*(unsigned __int8 *)(v21 + 80))
                       + 7) & 0xFFFFFFF8)
                     + 23) & 0xFFFFFFF8)
                   + 23) & 0xFFFFFFF8)
                 + 23) & 0xFFFFFFF8)
               + 23) & 0xFFFFFFF8)
             + 23) & 0xFFFFFFF8)
           + 23) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      bzero(a1, ((((((((((((((((*(_QWORD *)(v21 + 64)+ ((*(unsigned __int8 *)(v21 + 80)+ 25+ ((((((v28+ 7+ ((*(unsigned __int8 *)(v17 + 80) + 9 + ((v27 + 7) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80))) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 39) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80))+ 7) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 16);
      *a1 = ~v23 + a2;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X28 }
}

unint64_t sub_23BFBA508@<X0>(unint64_t result@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X5>, unsigned int a5@<W6>, int a6@<W7>, uint64_t a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, size_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, int a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  size_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  int v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  _QWORD *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  size_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;

  v48[v45] = 0;
  v53 = *(unsigned int *)(v51 - 84);
  if ((_DWORD)v53)
  {
    if (v52 == v49)
    {
      if ((int)v53 + 1 <= a5)
      {
        if ((_DWORD)v53 != -1)
        {
          if ((_DWORD)v36 == a5)
          {
            return (*(uint64_t (**)(_BYTE *, _QWORD, uint64_t))(result + 56))(v48, (v53 + 1), v36);
          }
          else
          {
            result = (unint64_t)&v48[v64] & v59;
            if (a6 == a5)
            {
              return (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(a3 + 56))(result, (v53 + 2), a2);
            }
            else if ((int)v53 + 1 <= v63)
            {
              return (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(a4 + 56))((result + v62 + a7) & v58, (v53 + 2), v34);
            }
            else if ((_DWORD)v61)
            {
              if (v61 <= 3)
                v57 = v61;
              else
                v57 = 4;
              bzero((void *)((result + v62 + a7) & v58), v61);
              __asm { BR              X10 }
            }
          }
        }
      }
      else if ((_DWORD)v41)
      {
        if (v41 <= 3)
          v54 = v41;
        else
          v54 = 4;
        bzero(v48, v41);
        __asm { BR              X10 }
      }
    }
    else
    {
      v55 = (_QWORD *)((unint64_t)&v48[v37 + 7] & 0xFFFFFFFFFFFFFFF8);
      if (v35 < 0)
      {
        result = ((unint64_t)v55 + v38) & v44;
        if (v50 == v49)
        {
          if (v39 >= 2)
            return (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v46 + 56))(result, (v53 + 1), v39);
        }
        else
        {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v47 + 56))((v42+ ((((((v43 + result) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8)) & v60, v53, v40);
        }
      }
      else
      {
        if ((v53 & 0x80000000) != 0)
          v56 = v53 ^ 0x80000000;
        else
          v56 = (v53 - 1);
        *v55 = v56;
      }
    }
  }
  return result;
}

void sub_23BFBA68C()
{
  int v0;
  uint64_t v1;

  *(_WORD *)v1 = v0;
  *(_BYTE *)(v1 + 2) = BYTE2(v0);
}

void sub_23BFBA69C()
{
  __int16 v0;
  _WORD *v1;

  *v1 = v0;
}

void sub_23BFBA744()
{
  char v0;
  _BYTE *v1;

  *v1 = v0;
}

void sub_23BFBA780()
{
  __int16 v0;
  _WORD *v1;

  *v1 = v0;
}

void sub_23BFBA788()
{
  int v0;
  uint64_t v1;

  *(_WORD *)v1 = v0;
  *(_BYTE *)(v1 + 2) = BYTE2(v0);
}

void sub_23BFBA798()
{
  int v0;
  _DWORD *v1;

  *v1 = v0;
}

void sub_23BFBA7A4()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3528);
  type metadata accessor for CanvasSectionHeaderView();
}

void sub_23BFBA824()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_23BFF8A4C();
  sub_23BFF862C();
  sub_23BFF8968();
  sub_23BFF96A0();
  swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  sub_23BFF94C0();
  *(_QWORD *)(v4 - 224) = v1;
  *(_QWORD *)(v4 - 216) = v0;
  *(_QWORD *)(v4 - 208) = v0;
  *(_QWORD *)(v4 - 200) = v2;
  *(_QWORD *)(v4 - 192) = v3;
  *(_QWORD *)(v4 - 184) = v3;
  type metadata accessor for ActionCardView();
}

void sub_23BFBA8D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a69;
  uint64_t a70;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t (*v76)(uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  v87 = MEMORY[0x242615198](&unk_23C005608, a1);
  *(_QWORD *)(v74 - 224) = a1;
  *(_QWORD *)(v74 - 216) = v87;
  MEMORY[0x24261512C](255, v74 - 224, MEMORY[0x24BDF3948], 0);
  sub_23BFF8ADC();
  v76 = (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088];
  v77 = sub_23BFF862C();
  v86 = sub_23BFF862C();
  v88 = sub_23BEA1BB8((unint64_t *)&qword_256AE3908, v76, MEMORY[0x24BDF1078]);
  *(_QWORD *)(v74 - 104) = v72;
  *(_QWORD *)(v74 - 96) = v88;
  v78 = MEMORY[0x24BDED308];
  v79 = MEMORY[0x242615198](MEMORY[0x24BDED308], v77, v74 - 104);
  v80 = MEMORY[0x24BDEEC40];
  *(_QWORD *)(v74 - 120) = v79;
  *(_QWORD *)(v74 - 112) = v80;
  v85 = MEMORY[0x242615198](v78, v86, v74 - 120);
  *(_QWORD *)(v74 - 224) = v86;
  *(_QWORD *)(v74 - 216) = v85;
  v81 = MEMORY[0x24BDF3100];
  MEMORY[0x24261512C](255, v74 - 224, MEMORY[0x24BDF3100], 0);
  v84 = sub_23BFF862C();
  v82 = MEMORY[0x24BDEBEE0];
  *(_QWORD *)(v74 - 136) = v79;
  *(_QWORD *)(v74 - 128) = v82;
  v83 = MEMORY[0x242615198](v78, v84, v74 - 136);
  *(_QWORD *)(v74 - 224) = v84;
  *(_QWORD *)(v74 - 216) = v83;
  MEMORY[0x24261512C](255, v74 - 224, v81, 0);
  sub_23BFF8968();
  sub_23BFF8FD4();
  sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3910);
  sub_23BFF8968();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3918);
  sub_23BFF8968();
  sub_23BFF8968();
  *(_QWORD *)(v74 - 224) = v71;
  *(_QWORD *)(v74 - 216) = v70;
  *(_QWORD *)(v74 - 208) = v70;
  *(_QWORD *)(v74 - 200) = a69;
  *(_QWORD *)(v74 - 192) = a52;
  *(_QWORD *)(v74 - 184) = v72;
  *(_QWORD *)(v74 - 176) = v73;
  *(_QWORD *)(v74 - 168) = v73;
  *(_QWORD *)(v74 - 160) = a70;
  *(_QWORD *)(v74 - 152) = a51;
  type metadata accessor for FullWidthStageView();
}

void sub_23BFBAAF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = MEMORY[0x242615198](&unk_23C0077B8, a1);
  *(_QWORD *)(v5 - 224) = a1;
  *(_QWORD *)(v5 - 216) = v23;
  v7 = MEMORY[0x24BDF3948];
  MEMORY[0x24261512C](255, v5 - 224, MEMORY[0x24BDF3948], 0);
  v22 = type metadata accessor for InfoActionCardView(255, v1, v4, v8);
  v21 = MEMORY[0x242615198](&unk_23C007F20, v22);
  *(_QWORD *)(v5 - 224) = v22;
  *(_QWORD *)(v5 - 216) = v21;
  MEMORY[0x24261512C](255, v5 - 224, v7, 0);
  sub_23BFF8968();
  sub_23BFF8968();
  v20 = type metadata accessor for LargeBrickView(255, v2, v3, v9);
  v19 = MEMORY[0x242615198](&protocol conformance descriptor for LargeBrickView<A>, v20);
  *(_QWORD *)(v5 - 224) = v20;
  *(_QWORD *)(v5 - 216) = v19;
  MEMORY[0x24261512C](255, v5 - 224, v7, 0);
  v18 = type metadata accessor for DynamicBrickView(255, v2, v3, v10);
  v17 = MEMORY[0x242615198](&protocol conformance descriptor for DynamicBrickView<A>, v18);
  *(_QWORD *)(v5 - 224) = v18;
  *(_QWORD *)(v5 - 216) = v17;
  MEMORY[0x24261512C](255, v5 - 224, v7, 0);
  sub_23BFF8968();
  v16 = type metadata accessor for MonogramVerticalStackView(255, v2, v3, v11);
  v15 = MEMORY[0x242615198](&unk_23BFFA1F4, v16);
  *(_QWORD *)(v5 - 224) = v16;
  *(_QWORD *)(v5 - 216) = v15;
  MEMORY[0x24261512C](255, v5 - 224, v7, 0);
  sub_23BFF8968();
  sub_23BFF8968();
  sub_23BFF8968();
  v14 = type metadata accessor for StandardCardView(255, v2, v3, v12);
  v13 = MEMORY[0x242615198](&unk_23C007BD0, v14);
  *(_QWORD *)(v5 - 224) = v14;
  *(_QWORD *)(v5 - 216) = v13;
  MEMORY[0x24261512C](255, v5 - 224, v7, 0);
  *(_QWORD *)(v5 - 224) = v2;
  *(_QWORD *)(v5 - 216) = v1;
  *(_QWORD *)(v5 - 208) = v3;
  *(_QWORD *)(v5 - 200) = v4;
  type metadata accessor for StandardHorizontalStackView();
}

void sub_23BFBAD2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t AssociatedConformanceWitness;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  v80 = MEMORY[0x242615198](&unk_23C0008E8, a1);
  *(_QWORD *)(v64 - 224) = a1;
  *(_QWORD *)(v64 - 216) = v80;
  MEMORY[0x24261512C](255, v64 - 224, v60, 0);
  sub_23BFF8968();
  v67 = type metadata accessor for StandardVerticalStackView(255, v62, v63, v66);
  v79 = MEMORY[0x242615198](&unk_23C0073B8, v67);
  *(_QWORD *)(v64 - 224) = v67;
  *(_QWORD *)(v64 - 216) = v79;
  MEMORY[0x24261512C](255, v64 - 224, v60, 0);
  v69 = type metadata accessor for TallCardView(255, v62, v63, v68);
  v78 = MEMORY[0x242615198](&unk_23BFFF0E4, v69);
  *(_QWORD *)(v64 - 224) = v69;
  *(_QWORD *)(v64 - 216) = v78;
  MEMORY[0x24261512C](255, v64 - 224, v60, 0);
  sub_23BFF8968();
  sub_23BFF8968();
  v71 = type metadata accessor for VerticalStackCard(255, v62, v63, v70);
  v77 = MEMORY[0x242615198](&unk_23C0000E0, v71);
  *(_QWORD *)(v64 - 224) = v71;
  *(_QWORD *)(v64 - 216) = v77;
  MEMORY[0x24261512C](255, v64 - 224, v60, 0);
  sub_23BFF8968();
  v73 = type metadata accessor for WideBrickView(255, v62, v63, v72);
  v76 = MEMORY[0x242615198](&protocol conformance descriptor for WideBrickView<A>, v73);
  *(_QWORD *)(v64 - 224) = v73;
  *(_QWORD *)(v64 - 216) = v76;
  MEMORY[0x24261512C](255, v64 - 224, v60, 0);
  sub_23BFF8968();
  sub_23BFF8968();
  sub_23BFF8968();
  sub_23BFF8FD4();
  sub_23BFF862C();
  sub_23BFF8968();
  sub_23BFF862C();
  sub_23BFF862C();
  v75 = *(_OWORD *)(v61 + 32);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(_OWORD *)(v64 - 224) = v75;
  *(_QWORD *)(v64 - 208) = AssociatedConformanceWitness;
  *(_QWORD *)(v64 - 200) = a60;
  type metadata accessor for CanvasContextMenu();
}

uint64_t sub_23BFBAFB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t OpaqueTypeConformance2;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t AssociatedConformanceWitness;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD v103[3];
  uint64_t v104;
  _QWORD v105[2];
  _QWORD v106[2];
  uint64_t v107;
  _QWORD v108[2];
  _QWORD v109[2];
  _QWORD v110[2];
  _QWORD v111[2];
  _QWORD v112[2];
  _QWORD v113[2];
  uint64_t v114;
  _QWORD v115[2];
  _QWORD v116[2];
  _QWORD v117[2];
  _QWORD v118[2];
  _QWORD v119[2];
  _QWORD v120[2];
  _QWORD v121[2];
  _QWORD v122[2];
  _QWORD v123[2];
  _QWORD v124[2];
  _QWORD v125[2];
  _QWORD v126[2];
  _QWORD v127[2];
  _QWORD v128[2];
  _QWORD v129[2];
  _QWORD v130[2];
  _QWORD v131[35];

  v6 = sub_23BFF862C();
  *(_QWORD *)(v5 - 224) = v93;
  *(_QWORD *)(v5 - 216) = v92;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v5 - 224) = v91;
  *(_QWORD *)(v5 - 216) = v90;
  v8 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v5 - 224) = v84;
  *(_QWORD *)(v5 - 216) = v83;
  v9 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v5 - 240) = v8;
  *(_QWORD *)(v5 - 232) = v9;
  v10 = MEMORY[0x24BDEF3E0];
  *(_QWORD *)(v5 - 248) = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v81, v5 - 240);
  v131[0] = MEMORY[0x242615198](MEMORY[0x24BDF3F50], v85, v5 - 248);
  v131[1] = MEMORY[0x24BDECC60];
  v130[0] = MEMORY[0x242615198](MEMORY[0x24BDED308], v82, v131);
  v130[1] = sub_23BEA1F94(&qword_256AE3920, &qword_256AE3910, MEMORY[0x24BDF43B0]);
  v129[0] = MEMORY[0x242615198](v10, v88, v130);
  v129[1] = sub_23BEA1F94(&qword_256AE3928, &qword_256AE3918, MEMORY[0x24BDF4700]);
  v128[0] = OpaqueTypeConformance2;
  v128[1] = MEMORY[0x242615198](v10, v89, v129);
  v11 = MEMORY[0x242615198](v10, v72, v128);
  *(_QWORD *)(v5 - 224) = v87;
  *(_QWORD *)(v5 - 216) = v86;
  v12 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v5 - 224) = v79;
  *(_QWORD *)(v5 - 216) = v78;
  v127[0] = v12;
  v127[1] = swift_getOpaqueTypeConformance2();
  v126[0] = v11;
  v126[1] = MEMORY[0x242615198](v10, v77, v127);
  v13 = MEMORY[0x242615198](v10, v59, v126);
  *(_QWORD *)(v5 - 224) = v76;
  *(_QWORD *)(v5 - 216) = v75;
  v14 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v5 - 224) = v74;
  *(_QWORD *)(v5 - 216) = v73;
  v15 = swift_getOpaqueTypeConformance2();
  v125[0] = v14;
  v125[1] = v15;
  v16 = MEMORY[0x242615198](v10, v65, v125);
  *(_QWORD *)(v5 - 224) = v71;
  *(_QWORD *)(v5 - 216) = v70;
  v124[0] = swift_getOpaqueTypeConformance2();
  v124[1] = v15;
  v123[0] = v16;
  v123[1] = MEMORY[0x242615198](v10, v68, v124);
  v122[0] = v13;
  v122[1] = MEMORY[0x242615198](v10, v69, v123);
  v17 = MEMORY[0x242615198](v10, v47, v122);
  *(_QWORD *)(v5 - 224) = v67;
  *(_QWORD *)(v5 - 216) = v66;
  v18 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v5 - 224) = v64;
  *(_QWORD *)(v5 - 216) = v63;
  v121[0] = v18;
  v121[1] = swift_getOpaqueTypeConformance2();
  v19 = MEMORY[0x242615198](v10, v50, v121);
  *(_QWORD *)(v5 - 224) = v4;
  *(_QWORD *)(v5 - 216) = v62;
  v20 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v5 - 224) = v3;
  *(_QWORD *)(v5 - 216) = v61;
  v120[0] = v20;
  v120[1] = swift_getOpaqueTypeConformance2();
  v119[0] = v19;
  v119[1] = MEMORY[0x242615198](v10, v60, v120);
  v21 = MEMORY[0x242615198](v10, v48, v119);
  *(_QWORD *)(v5 - 224) = v2;
  *(_QWORD *)(v5 - 216) = v58;
  v118[0] = swift_getOpaqueTypeConformance2();
  v118[1] = v102;
  v22 = MEMORY[0x242615198](v10, v49, v118);
  *(_QWORD *)(v5 - 224) = v1;
  *(_QWORD *)(v5 - 216) = v54;
  v117[0] = v22;
  v117[1] = swift_getOpaqueTypeConformance2();
  v116[0] = v21;
  v116[1] = MEMORY[0x242615198](v10, v52, v117);
  v115[0] = v17;
  v115[1] = MEMORY[0x242615198](v10, v53, v116);
  v114 = MEMORY[0x242615198](v10, v55, v115);
  v113[0] = MEMORY[0x242615198](MEMORY[0x24BDF3F50], v56, &v114);
  v113[1] = v95;
  v23 = MEMORY[0x24BDED308];
  v24 = MEMORY[0x242615198](MEMORY[0x24BDED308], v57, v113);
  v112[0] = MEMORY[0x24BDF5138];
  v112[1] = v24;
  v25 = MEMORY[0x242615198](v10, v80, v112);
  v26 = MEMORY[0x24BDF0910];
  v111[0] = v25;
  v111[1] = MEMORY[0x24BDF0910];
  v110[0] = MEMORY[0x242615198](v23, v101, v111);
  v110[1] = v26;
  v109[0] = MEMORY[0x242615198](v23, v51, v110);
  v109[1] = MEMORY[0x242615198](&unk_23BFFEE18, a1);
  v27 = MEMORY[0x242615198](v23, v6, v109);
  *(_QWORD *)(v5 - 224) = v6;
  *(_QWORD *)(v5 - 216) = v27;
  v28 = MEMORY[0x24261512C](255, v5 - 224, MEMORY[0x24BDF30F0], 0);
  *(_QWORD *)(v5 - 224) = v6;
  *(_QWORD *)(v5 - 216) = v27;
  v29 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v5 - 224) = v28;
  *(_QWORD *)(v5 - 216) = v29;
  MEMORY[0x24261512C](255, v5 - 224, MEMORY[0x24BEC6710], 0);
  v30 = sub_23BFF8968();
  v31 = MEMORY[0x242615198](MEMORY[0x24BEE12D8]);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(_QWORD *)(v5 - 224) = v96;
  *(_QWORD *)(v5 - 216) = v97;
  *(_QWORD *)(v5 - 208) = v30;
  *(_QWORD *)(v5 - 200) = v31;
  *(_QWORD *)(v5 - 192) = AssociatedConformanceWitness;
  v33 = sub_23BFF910C();
  *(_QWORD *)(v5 - 224) = v28;
  *(_QWORD *)(v5 - 216) = v29;
  v108[0] = swift_getOpaqueTypeConformance2();
  v108[1] = v29;
  v107 = MEMORY[0x242615198](v10, v30, v108);
  MEMORY[0x242615198](MEMORY[0x24BDF4A08], v33, &v107);
  v34 = sub_23BFF91FC();
  v35 = MEMORY[0x242615198](MEMORY[0x24BDF5198], v34);
  *(_QWORD *)(v5 - 224) = v34;
  *(_QWORD *)(v5 - 216) = v35;
  MEMORY[0x24261512C](255, v5 - 224, MEMORY[0x24BDF2D58], 0);
  *(_QWORD *)(v5 - 224) = v34;
  *(_QWORD *)(v5 - 216) = v35;
  swift_getOpaqueTypeConformance2();
  v36 = sub_23BFF8434();
  v37 = sub_23BFF8B0C();
  v38 = MEMORY[0x242615198](MEMORY[0x24BDEB238], v36);
  *(_QWORD *)(v5 - 224) = v36;
  *(_QWORD *)(v5 - 216) = v37;
  v39 = MEMORY[0x24BDF10F0];
  *(_QWORD *)(v5 - 208) = v38;
  *(_QWORD *)(v5 - 200) = v39;
  v40 = MEMORY[0x24261512C](255, v5 - 224, MEMORY[0x24BDF3000], 0);
  *(_QWORD *)(v5 - 224) = v36;
  *(_QWORD *)(v5 - 216) = v37;
  *(_QWORD *)(v5 - 208) = v38;
  *(_QWORD *)(v5 - 200) = v39;
  v41 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v5 - 224) = v40;
  *(_QWORD *)(v5 - 216) = v41;
  MEMORY[0x24261512C](255, v5 - 224, MEMORY[0x24BDF26E8], 0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE5180);
  v42 = sub_23BFF913C();
  v43 = sub_23BF0A0F0();
  v106[0] = MEMORY[0x242615198](&unk_23C0051E8);
  v106[1] = sub_23BEA1BB8((unint64_t *)&qword_256AE5188, (uint64_t (*)(uint64_t))MEMORY[0x24BDF02F8], MEMORY[0x24BDF02F0]);
  v105[0] = v43;
  v105[1] = MEMORY[0x242615198](v23, v99, v106);
  v104 = MEMORY[0x242615198](v10, v100, v105);
  v44 = MEMORY[0x242615198](MEMORY[0x24BDF5578], v98, &v104);
  *(_QWORD *)(v5 - 224) = v40;
  *(_QWORD *)(v5 - 216) = v41;
  v103[0] = v44;
  v103[1] = swift_getOpaqueTypeConformance2();
  v103[2] = sub_23BF0A154();
  MEMORY[0x242615198](MEMORY[0x24BDF4AF8], v42, v103);
  v45 = sub_23BFF90AC();
  return MEMORY[0x242615198](MEMORY[0x24BDF4700], v45);
}

void sub_23BFBB790()
{
  sub_23BF140F8((void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BFB0ED0);
}

void sub_23BFBB79C()
{
  sub_23BF140F8((void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BFB66B0);
}

void sub_23BFBB7A8()
{
  sub_23BF140F8((void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BFB708C);
}

void sub_23BFBB7B8()
{
  type metadata accessor for HorizontalGridView();
}

void sub_23BFBB868()
{
  sub_23BFB6DB8();
}

void sub_23BFBB8F8(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_23BFB2430(*(_QWORD *)(v1 + 208), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), a1, *(_OWORD *)(v1 + 64), *(_OWORD *)(v1 + 80), *(_OWORD *)(v1 + 96), *(_OWORD *)(v1 + 112), *(_OWORD *)(v1 + 128), *(_OWORD *)(v1 + 144), *(_OWORD *)(v1 + 160), *(_OWORD *)(v1 + 176), *(_QWORD *)(v1 + 192), *(_QWORD *)(v1 + 200));
}

void sub_23BFBB954(uint64_t a1@<X8>)
{
  uint64_t *v1;

  sub_23BFB262C(v1[26], v1[27], v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], a1, v1[8], v1[9], v1[10], v1[11], v1[12], v1[13], v1[14], v1[15], v1[16], v1[17],
    v1[18],
    v1[19],
    v1[20],
    v1[21],
    v1[22],
    v1[23],
    v1[24],
    v1[25]);
}

void sub_23BFBB9A8()
{
  sub_23BF140F8((void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BFB3850);
}

void objectdestroyTm_11()
{
  type metadata accessor for HorizontalGridView();
}

void sub_23BFBBA50()
{
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CanvasSectionHeader();
}

uint64_t sub_23BFBBABC(uint64_t a1)
{
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 48))(v2, 1, a1))
  {
    v6 = sub_23BFF82CC();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v2, v6);
    v7 = v2 + *(int *)(a1 + 52);
    v8 = *(_QWORD *)(v15 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(v8 + 48))(v7, 1))
      (*(void (**)(uint64_t))(v8 + 8))(v7);
    v9 = v2 + *(int *)(a1 + 56);
    v10 = *(_QWORD *)(v4 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v9, 1, v4))
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v4);
  }
  swift_bridgeObjectRelease();
  v11 = v2 + v1[55];
  v12 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v11, 1, v3))
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v3);
  (*(void (**)(uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v2 + v1[60]);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  if (*(_QWORD *)(v2 + v1[66]))
    swift_release();
  if (*(_QWORD *)(v2 + v1[67]))
    swift_release();
  if (*(_QWORD *)(v2 + v1[68]))
    swift_release();
  return swift_deallocObject();
}

void sub_23BFBBC9C()
{
  type metadata accessor for HorizontalGridView();
}

#error "23BFBBDC4: call analysis failed (funcsize=30)"

void sub_23BFBBDE8()
{
  type metadata accessor for HorizontalGridView();
}

void sub_23BFBBE84()
{
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CanvasSectionHeader();
}

uint64_t sub_23BFBBF0C(uint64_t a1)
{
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 48))(v3, 1, a1))
  {
    v18 = v7;
    v10 = sub_23BFF82CC();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v3, v10);
    v11 = v3 + *(int *)(a1 + 52);
    v12 = *(_QWORD *)(v22 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(v11, 1))
      (*(void (**)(uint64_t))(v12 + 8))(v11);
    v13 = v3 + *(int *)(a1 + 56);
    v14 = *(_QWORD *)(v5 - 8);
    v7 = v18;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v13, 1, v5))
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v5);
  }
  swift_bridgeObjectRelease();
  v15 = v3 + v2[55];
  v16 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v15, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v4);
  (*(void (**)(uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v3 + v2[60]);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  if (*(_QWORD *)(v3 + v2[66]))
    swift_release();
  if (*(_QWORD *)(v3 + v2[67]))
    swift_release();
  if (*(_QWORD *)(v3 + v2[68]))
    swift_release();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v1 + ((v21 + v20 + v8) & ~v8), v6);
  return swift_deallocObject();
}

void sub_23BFBC120()
{
  type metadata accessor for HorizontalGridView();
}

#error "23BFBC250: call analysis failed (funcsize=34)"

void sub_23BFBC274(uint64_t a1)
{
  sub_23BF14A38(a1, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BFB63E4);
}

void sub_23BFBC280(uint64_t a1)
{
  sub_23BF14A38(a1, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BFB6548);
}

void sub_23BFBC290()
{
  type metadata accessor for HorizontalGridView();
}

void sub_23BFBC33C()
{
  type metadata accessor for HorizontalGridView();
}

uint64_t sub_23BFBC3E0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (**v3)();

  v3 = (uint64_t (**)())(v2 + *(int *)(result + 264) + v1);
  if (*v3)
    return (*v3)();
  return result;
}

void objectdestroy_9Tm_0()
{
  type metadata accessor for HorizontalGridView();
}

void sub_23BFBC4BC()
{
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CanvasSectionHeader();
}

uint64_t sub_23BFBC528(uint64_t a1)
{
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 48))(v2, 1, a1))
  {
    v6 = sub_23BFF82CC();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v2, v6);
    v7 = v2 + *(int *)(a1 + 52);
    v8 = *(_QWORD *)(v15 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(v8 + 48))(v7, 1))
      (*(void (**)(uint64_t))(v8 + 8))(v7);
    v9 = v2 + *(int *)(a1 + 56);
    v10 = *(_QWORD *)(v4 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v9, 1, v4))
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v4);
  }
  swift_bridgeObjectRelease();
  v11 = v2 + v1[55];
  v12 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v11, 1, v3))
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v3);
  (*(void (**)(uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v2 + v1[60]);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  if (*(_QWORD *)(v2 + v1[66]))
    swift_release();
  if (*(_QWORD *)(v2 + v1[67]))
    swift_release();
  if (*(_QWORD *)(v2 + v1[68]))
    swift_release();
  return swift_deallocObject();
}

void sub_23BFBC714()
{
  type metadata accessor for HorizontalGridView();
}

void sub_23BFBC7C0()
{
  type metadata accessor for HorizontalGridView();
}

uint64_t sub_23BFBC864(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (**v3)();

  v3 = (uint64_t (**)())(v2 + *(int *)(result + 268) + v1);
  if (*v3)
    return (*v3)();
  return result;
}

ValueMetadata *type metadata accessor for SizePreferenceKey()
{
  return &type metadata for SizePreferenceKey;
}

uint64_t sub_23BFBC8B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[4];

  v13 = a1;
  v15 = a4;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE54B8);
  v6 = sub_23BFF862C();
  v14 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v12 - v7;
  v16[2] = sub_23BFBCAD8;
  v16[3] = 0;
  sub_23BFF91C0();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE80C0);
  sub_23BEA1F94(&qword_256AE80C8, &qword_256AE80C0, MEMORY[0x24BDEC6F8]);
  sub_23BFF8CD4();
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v13;
  *(_QWORD *)(v9 + 24) = a2;
  v10 = sub_23BEA1F94(&qword_256AE54D0, &qword_256AE54B8, MEMORY[0x24BDEF370]);
  v16[0] = a3;
  v16[1] = v10;
  swift_retain();
  MEMORY[0x242615198](MEMORY[0x24BDED308], v6, v16);
  sub_23BFBCB5C();
  sub_23BEFF870();
  sub_23BFF8DDC();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v8, v6);
}

void sub_23BFBCA78()
{
  xmmword_256B02420 = 0uLL;
}

double sub_23BFBCA88@<D0>(_OWORD *a1@<X8>)
{
  double result;

  if (qword_256AE33B0 != -1)
    swift_once();
  result = *(double *)&xmmword_256B02420;
  *a1 = xmmword_256B02420;
  return result;
}

uint64_t sub_23BFBCAD8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v2 = sub_23BFF8F8C();
  result = sub_23BFF84DC();
  *a1 = v2;
  a1[1] = v4;
  a1[2] = v5;
  return result;
}

uint64_t sub_23BFBCB14()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23BFBCB38(double *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(double, double))(v1 + 16))(*a1, a1[1]);
}

unint64_t sub_23BFBCB5C()
{
  unint64_t result;

  result = qword_256AE80D0;
  if (!qword_256AE80D0)
  {
    result = MEMORY[0x242615198](&unk_23C006F74, &type metadata for SizePreferenceKey);
    atomic_store(result, &qword_256AE80D0);
  }
  return result;
}

uint64_t sub_23BFBCBA0()
{
  sub_23BFC0490();
  return swift_bridgeObjectRetain();
}

uint64_t sub_23BFBCBB4(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 112) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t LazyCanvasItemPlaceholderFetcher.batchSize.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 120);
}

_QWORD *LazyCanvasItemPlaceholderFetcher.__allocating_init(batchSize:fetcherProvider:fetchItemForPlaceholders:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;

  swift_allocObject();
  v8 = sub_23BFC04C0(a1, a2, a3, a4);
  swift_release();
  return v8;
}

_QWORD *LazyCanvasItemPlaceholderFetcher.init(batchSize:fetcherProvider:fetchItemForPlaceholders:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4 = sub_23BFC04C0(a1, a2, a3, a4);
  swift_release();
  return v4;
}

uint64_t sub_23BFBCCA0(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[29] = a1;
  v2[30] = v1;
  v3 = *v1;
  v2[31] = *v1;
  v4 = *(_QWORD *)(v3 + 80);
  v2[32] = v4;
  v2[33] = *(_QWORD *)(v4 - 8);
  v2[34] = swift_task_alloc();
  return swift_task_switch();
}

void sub_23BFBCD04()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;

  v1 = v0[32];
  v2 = sub_23BFF8398();
  swift_beginAccess();
  v3 = swift_bridgeObjectRetain();
  v4 = MEMORY[0x242614844](v3, v1);
  swift_bridgeObjectRelease();
  if (v2 >= v4)
  {
    sub_23BF90BEC();
    swift_allocError();
    *(_QWORD *)(v16 + 8) = 0;
    *(_QWORD *)(v16 + 16) = 0;
    *(_QWORD *)v16 = 0;
    *(_BYTE *)(v16 + 24) = 1;
    swift_willThrow();
    swift_task_dealloc();
    __asm { BR              X0 }
  }
  v5 = v0[30];
  sub_23BFF8398();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_23BFF94F0();
  swift_bridgeObjectRelease();
  v6 = sub_23BFF838C();
  v7 = *(_QWORD *)(v5 + 120);
  if (v7)
  {
    if (v6 == 0x8000000000000000 && v7 == -1)
      goto LABEL_11;
    v8 = v6 / v7 * v7;
    if ((unsigned __int128)(v6 / v7 * (__int128)v7) >> 64 == v8 >> 63)
    {
      if (!__OFADD__(v8, v7))
      {
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0[31] + 88) + 128))(v0[32], *(_QWORD *)(v0[31] + 88));
        AssociatedTypeWitness = swift_getAssociatedTypeWitness();
        v19 = swift_getAssociatedTypeWitness();
        v17 = swift_getAssociatedTypeWitness();
        v9 = swift_getAssociatedTypeWitness();
        v10 = swift_getAssociatedTypeWitness();
        v21 = swift_getAssociatedTypeWitness();
        AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
        v20 = swift_getAssociatedConformanceWitness();
        v18 = swift_getAssociatedConformanceWitness();
        v11 = swift_getAssociatedConformanceWitness();
        v12 = swift_getAssociatedConformanceWitness();
        v13 = swift_getAssociatedConformanceWitness();
        v14 = swift_getAssociatedConformanceWitness();
        v15 = swift_getAssociatedConformanceWitness();
        v0[2] = AssociatedTypeWitness;
        v0[3] = v19;
        v0[4] = v17;
        v0[5] = v9;
        v0[6] = v10;
        v0[7] = v21;
        v0[8] = AssociatedConformanceWitness;
        v0[9] = v20;
        v0[10] = v18;
        v0[11] = v11;
        v0[12] = v12;
        v0[13] = v13;
        v0[14] = v14;
        v0[15] = v15;
        type metadata accessor for LazyCanvasItemDescriptor();
      }
LABEL_11:
      __break(1u);
      JUMPOUT(0x23BFBD2B4);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  goto LABEL_11;
}

uint64_t sub_23BFBD2BC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 296) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_23BFBD32C()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 264) + 8))(*(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 256));
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23BFBD374()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 264) + 8))(*(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 256));
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_23BFBD3B8()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for LazyCanvasItemDescriptor();
}

void sub_23BFBD628(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;

  v5 = MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(uint64_t, uint64_t, __n128))(v1 + 128))(v2, v1, v5);
  sub_23BFF94F0();
  swift_bridgeObjectRelease();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = *(_QWORD *)(v4 - 232);
    *(_QWORD *)(v4 - 200) = *(_QWORD *)(v4 - 248);
    *(_QWORD *)(v4 - 192) = v6;
    *(_QWORD *)(v4 - 184) = *(_QWORD *)(v4 - 240);
    *(_QWORD *)(v4 - 176) = v3;
    type metadata accessor for CanvasItemPlaceholder();
  }
  v7 = *(_QWORD *)(v4 - 232);
  *(_QWORD *)(v4 - 200) = *(_QWORD *)(v4 - 248);
  *(_QWORD *)(v4 - 192) = v7;
  *(_QWORD *)(v4 - 184) = *(_QWORD *)(v4 - 240);
  *(_QWORD *)(v4 - 176) = v3;
  type metadata accessor for CanvasItemPlaceholder();
}

void sub_23BFBD71C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(*(_QWORD *)(v4 - 208), 1, 1, a1);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  JUMPOUT(0x23BFBD748);
}

uint64_t sub_23BFBD76C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[14] = a1;
  v2[15] = v1;
  v2[16] = *v1;
  v4 = sub_23BFF83A4();
  v2[17] = v4;
  v2[18] = *(_QWORD *)(v4 - 8);
  v2[19] = swift_task_alloc();
  v2[20] = swift_task_alloc();
  v5 = (_QWORD *)swift_task_alloc();
  v2[21] = v5;
  *v5 = v2;
  v5[1] = sub_23BFBD804;
  return sub_23BFBCCA0(a1);
}

uint64_t sub_23BFBD804()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 176) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_23BFBD884()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v0 + 96) = *(_QWORD *)(v0 + 176);
  MEMORY[0x242615090]();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE7440);
  if (swift_dynamicCast()
    && *(_BYTE *)(v0 + 40) == 1
    && !(*(_QWORD *)(v0 + 24) | *(_QWORD *)(v0 + 32) | *(_QWORD *)(v0 + 16)))
  {
    v2 = *(_QWORD *)(v0 + 120);
    MEMORY[0x242615084](*(_QWORD *)(v0 + 176));
    swift_beginAccess();
    *(_QWORD *)(v0 + 104) = *(_QWORD *)(v2 + 112);
    v3 = sub_23BFF94C0();
    MEMORY[0x242615198](MEMORY[0x24BEE12E0], v3);
    if ((sub_23BFF964C() & 1) != 0)
    {
      v4 = *(char **)(v0 + 152);
      v5 = *(_QWORD *)(v0 + 160);
      v6 = *(_QWORD *)(v0 + 136);
      v7 = *(_QWORD *)(v0 + 144);
      (*(void (**)(char *, _QWORD, uint64_t))(v7 + 16))(v4, *(_QWORD *)(v0 + 112), v6);
      swift_beginAccess();
      sub_23BFBFB04(v5, v4);
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
      swift_endAccess();
      sub_23BF90BEC();
      swift_allocError();
      *(_QWORD *)(v8 + 8) = 0;
      *(_QWORD *)(v8 + 16) = 0;
      *(_QWORD *)v8 = 1;
    }
    else
    {
      sub_23BF90BEC();
      swift_allocError();
      *(_QWORD *)(v8 + 8) = 0;
      *(_QWORD *)(v8 + 16) = 0;
      *(_QWORD *)v8 = 0;
    }
    *(_BYTE *)(v8 + 24) = 1;
    swift_willThrow();
    MEMORY[0x242615084](*(_QWORD *)(v0 + 96));
  }
  else
  {
    MEMORY[0x242615084](*(_QWORD *)(v0 + 96));
    swift_willThrow();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23BFBDA90(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v2[11] = a1;
  v2[12] = v1;
  v2[13] = *v1;
  return swift_task_switch();
}

uint64_t sub_23BFBDAB0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(_QWORD, uint64_t, uint64_t);

  v1 = (_QWORD *)v0[12];
  v2 = v1[19];
  v3 = v1[20];
  __swift_project_boxed_opaque_existential_1(v1 + 16, v2);
  v6 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(**(int **)(v3 + 128) + *(_QWORD *)(v3 + 128));
  v4 = (_QWORD *)swift_task_alloc();
  v0[14] = v4;
  *v4 = v0;
  v4[1] = sub_23BFBDB34;
  return v6(v0[11], v2, v3);
}

uint64_t sub_23BFBDB34()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 120) = v0;
  swift_task_dealloc();
  if (v0)
    return (*(uint64_t (**)(void))(v2 + 8))();
  else
    return swift_task_switch();
}

void sub_23BFBDBA0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;

  v1 = v0[13];
  v2 = v0[11];
  v3 = v0[12];
  swift_beginAccess();
  v0[9] = *(_QWORD *)(v3 + 112);
  v4 = (_QWORD *)swift_task_alloc();
  v4[2] = *(_QWORD *)(v1 + 80);
  v4[3] = *(_QWORD *)(v1 + 88);
  v4[4] = v2;
  sub_23BFF94C0();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v7 = swift_getAssociatedConformanceWitness();
  v8 = swift_getAssociatedConformanceWitness();
  swift_bridgeObjectRetain();
  v0[2] = AssociatedTypeWitness;
  v0[3] = AssociatedConformanceWitness;
  v0[4] = v7;
  v0[5] = v8;
  type metadata accessor for CanvasItemPlaceholder();
}

uint64_t sub_23BFBDCD4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  _QWORD *v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);

  v3 = sub_23BFF94C0();
  v4 = MEMORY[0x24BEE12C8];
  MEMORY[0x242615198](MEMORY[0x24BEE12C8]);
  MEMORY[0x242615198](v4, v3);
  v5 = sub_23BFF9454();
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(v11 + 152);
  v7 = *(_QWORD *)(v11 + 160);
  __swift_project_boxed_opaque_existential_1(v12, v6);
  v1[10] = v5;
  MEMORY[0x242615198](&protocol conformance descriptor for CanvasItemPlaceholder<A>, a1);
  v8 = sub_23BFF95EC();
  v1[16] = v8;
  v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(v7 + 120) + *(_QWORD *)(v7 + 120));
  v9 = (_QWORD *)swift_task_alloc();
  v1[17] = v9;
  *v9 = v1;
  v9[1] = sub_23BFBDDF8;
  return v13(v8, v6, v7);
}

uint64_t sub_23BFBDDF8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 144) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_23BFBDE6C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_23BFBDEA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(uint64_t, uint64_t))(a4 + 128))(a3, a4);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for LazyCanvasItemDescriptor();
}

void sub_23BFBE104()
{
  sub_23BFF94C0();
  type metadata accessor for CanvasItemPlaceholder();
}

uint64_t sub_23BFBE128()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t *v3;

  MEMORY[0x242615198](MEMORY[0x24BEE12C8], v0);
  v1 = sub_23BFF9430();
  result = swift_bridgeObjectRelease();
  *v3 = v1;
  return result;
}

void sub_23BFBE19C()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CanvasItemPlaceholder();
}

void sub_23BFBE284(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedConformanceWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)(v9 - 280) = a1;
  *(_QWORD *)(v9 - 288) = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v9 - 304) = (char *)&a9 - v10;
  *(_QWORD *)(v9 - 248) = swift_getAssociatedTypeWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = swift_getAssociatedTypeWitness();
  v13 = swift_getAssociatedTypeWitness();
  v14 = swift_getAssociatedTypeWitness();
  *(_QWORD *)(v9 - 240) = swift_getAssociatedConformanceWitness();
  *(_QWORD *)(v9 - 256) = swift_getAssociatedConformanceWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v16 = swift_getAssociatedConformanceWitness();
  v17 = *(_QWORD *)(v9 - 232);
  v18 = swift_getAssociatedConformanceWitness();
  *(_QWORD *)(v9 - 200) = *(_QWORD *)(v9 - 248);
  *(_QWORD *)(v9 - 192) = AssociatedTypeWitness;
  *(_QWORD *)(v9 - 184) = v12;
  *(_QWORD *)(v9 - 176) = v17;
  *(_QWORD *)(v9 - 168) = v13;
  *(_QWORD *)(v9 - 160) = v14;
  v19 = *(_QWORD *)(v9 - 256);
  *(_QWORD *)(v9 - 152) = *(_QWORD *)(v9 - 240);
  *(_QWORD *)(v9 - 144) = v19;
  v20 = *(_QWORD *)(v9 - 208);
  *(_QWORD *)(v9 - 136) = AssociatedConformanceWitness;
  *(_QWORD *)(v9 - 128) = v20;
  v21 = *(_QWORD *)(v9 - 224);
  *(_QWORD *)(v9 - 120) = *(_QWORD *)(v9 - 216);
  *(_QWORD *)(v9 - 112) = v21;
  *(_QWORD *)(v9 - 104) = v16;
  *(_QWORD *)(v9 - 96) = v18;
  type metadata accessor for LazyCanvasItemDescriptor();
}

uint64_t sub_23BFBE444(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  void (*v8)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  _BYTE v14[96];

  v3 = *(_QWORD *)(a1 - 8);
  v4 = MEMORY[0x24BDAC7A8](a1);
  v6 = &v14[-v5];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, __n128))(v3 + 16))(&v14[-v5], *(_QWORD *)(v1 - 72), a1, v4);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = *(_QWORD *)(v1 - 288);
    v8 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 32);
    v9 = *(_BYTE **)(v1 - 304);
    v10 = *(_QWORD *)(v1 - 280);
    v8(v9, v6, v10);
    v11 = sub_23BFF95A4();
    v12 = *(_QWORD *)(v1 - 272);
    if ((v11 & 1) != 0)
    {
      v8(*(_BYTE **)(v1 - 272), v9, v10);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(v12, 0, 1, v10);
    }
    else
    {
      (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v10);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(v12, 1, 1, v10);
    }
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v1 - 288) + 56))(*(_QWORD *)(v1 - 272), 1, 1, *(_QWORD *)(v1 - 280));
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v3 + 8))(v6, a1);
  }
}

uint64_t sub_23BFBE59C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return swift_task_switch();
}

uint64_t sub_23BFBE5BC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __int128 v8;

  v2 = *(_QWORD *)(v0 + 40);
  v1 = *(_QWORD **)(v0 + 48);
  v3 = v1[19];
  v4 = v1[20];
  v8 = *(_OWORD *)(v0 + 24);
  __swift_project_boxed_opaque_existential_1(v1 + 16, v3);
  v5 = swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v5;
  *(_QWORD *)(v5 + 16) = v2;
  *(_OWORD *)(v5 + 24) = v8;
  *(_QWORD *)(v5 + 40) = v1;
  *(_QWORD *)&v8 = **(int **)(v4 + 136) + *(_QWORD *)(v4 + 136);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v6;
  *v6 = v0;
  v6[1] = sub_23BFBE688;
  return ((uint64_t (*)(_QWORD, uint64_t (*)(uint64_t, uint64_t), uint64_t, _QWORD, uint64_t, uint64_t))v8)(*(_QWORD *)(v0 + 16), sub_23BFC0830, v5, *(_QWORD *)(v0 + 40), v3, v4);
}

uint64_t sub_23BFBE688()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 72) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_23BFBE6FC()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23BFBE730(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;

  swift_beginAccess();
  v6 = swift_bridgeObjectRetain();
  a3(v6, a1, a2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_23BFBE7CC(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v2[8] = a1;
  v2[9] = v1;
  v2[10] = *v1;
  return swift_task_switch();
}

uint64_t sub_23BFBE7EC()
{
  uint64_t v0;
  _QWORD *v1;
  char v2;
  uint64_t v3;

  v1 = (_QWORD *)(*(_QWORD *)(v0 + 72) + 112);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v2 = sub_23BFF94D8();
  swift_bridgeObjectRelease();
  if ((v2 & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + 64);
    swift_bridgeObjectRetain();
    swift_beginAccess();
    *v1 = v3;
    swift_bridgeObjectRelease();
  }
  sub_23BFBE8B4();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23BFBE8B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE81B0);
  MEMORY[0x24BDAC7A8](v1);
  swift_beginAccess();
  v2 = sub_23BFF94C0();
  MEMORY[0x242615198](MEMORY[0x24BEE12E0], v2);
  result = sub_23BFF964C();
  if ((result & 1) == 0)
  {
    result = swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)(v0 + 168) + 16))
    {
      swift_beginAccess();
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&qword_256AE81B8);
      swift_getAssociatedTypeWitness();
      swift_getAssociatedConformanceWitness();
      swift_getAssociatedConformanceWitness();
      swift_getAssociatedConformanceWitness();
      type metadata accessor for CanvasItemPlaceholder();
    }
  }
  return result;
}

void sub_23BFBEB64()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for LazyCanvasItemDescriptor();
}

void sub_23BFBEE10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  int EnumCaseMultiPayload;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[96];

  *(_QWORD *)(v3 - 296) = a1;
  v4 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = &v23[-v5];
  v7 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v8);
  *(_QWORD *)(v3 - 304) = &v23[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = sub_23BFF8398();
  swift_beginAccess();
  v11 = swift_bridgeObjectRetain();
  v12 = MEMORY[0x242614844](v11, v1);
  swift_bridgeObjectRelease();
  if (v10 >= v12)
  {
    *(_QWORD *)(v3 - 248) = *(_QWORD *)(v3 - 280);
  }
  else
  {
    *(_QWORD *)(v3 - 264) = v7;
    *(_QWORD *)(v3 - 320) = v4;
    *(_QWORD *)(v3 - 312) = v6;
    v13 = *(_QWORD *)(v3 - 280);
    sub_23BFF8398();
    swift_beginAccess();
    swift_bridgeObjectRetain();
    v14 = *(_QWORD *)(v3 - 304);
    sub_23BFF94F0();
    swift_bridgeObjectRelease();
    v15 = sub_23BFF8380();
    v16 = *(void (**)(uint64_t, uint64_t))(v2 + 128);
    v16(v1, v2);
    v17 = MEMORY[0x242614844]();
    swift_bridgeObjectRelease();
    if (v15 < v17)
    {
      v16(v1, v2);
      sub_23BFF8380();
      sub_23BFF94F0();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 264) + 8))(v14, v1);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      v19 = *(_QWORD *)(v3 - 72);
      v20 = *(_QWORD *)(v3 - 272);
      v21 = *(_QWORD *)(v3 - 288);
      if (EnumCaseMultiPayload == 1)
      {
        *(_QWORD *)(v3 - 248) = v13;
        *(_QWORD *)(v3 - 240) = v19;
        *(_QWORD *)(v3 - 232) = v20;
        *(_QWORD *)(v3 - 224) = v21;
        type metadata accessor for CanvasItemPlaceholder();
      }
      *(_QWORD *)(v3 - 248) = v13;
      *(_QWORD *)(v3 - 240) = v19;
      *(_QWORD *)(v3 - 232) = v20;
      *(_QWORD *)(v3 - 224) = v21;
      type metadata accessor for CanvasItemPlaceholder();
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 264) + 8))(v14, v1);
    *(_QWORD *)(v3 - 248) = v13;
  }
  v22 = *(_QWORD *)(v3 - 272);
  *(_QWORD *)(v3 - 240) = *(_QWORD *)(v3 - 72);
  *(_QWORD *)(v3 - 232) = v22;
  *(_QWORD *)(v3 - 224) = *(_QWORD *)(v3 - 288);
  type metadata accessor for CanvasItemPlaceholder();
}

void sub_23BFBF108(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(v1, 1, 1, a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 320) + 8))(v2, v3);
  JUMPOUT(0x23BFBF0D0);
}

uint64_t sub_23BFBF140(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;

  v5[13] = a4;
  v5[14] = a5;
  v5[15] = *a5;
  return swift_task_switch();
}

void sub_23BFBF160()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _DWORD *v4;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (qword_256AE3380 != -1)
    swift_once();
  v1 = sub_23BFF83D4();
  v0[16] = __swift_project_value_buffer(v1, (uint64_t)qword_256B02400);
  swift_bridgeObjectRetain();
  v2 = sub_23BFF83BC();
  v3 = sub_23BFF9670();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (_DWORD *)swift_slowAlloc();
    swift_slowAlloc();
    *v4 = 136315138;
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v7 = swift_getAssociatedConformanceWitness();
    v8 = swift_getAssociatedConformanceWitness();
    v0[6] = AssociatedTypeWitness;
    v0[7] = AssociatedConformanceWitness;
    v0[8] = v7;
    v0[9] = v8;
    type metadata accessor for CanvasItemPlaceholder();
  }
  swift_bridgeObjectRelease();

  v9 = v0[13];
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0[14] + 128), *(_QWORD *)(v0[14] + 152));
  v0[10] = v9;
  v10 = swift_getAssociatedTypeWitness();
  v11 = swift_getAssociatedConformanceWitness();
  v12 = swift_getAssociatedConformanceWitness();
  v13 = swift_getAssociatedConformanceWitness();
  swift_bridgeObjectRetain();
  v0[2] = v10;
  v0[3] = v11;
  v0[4] = v12;
  v0[5] = v13;
  type metadata accessor for CanvasItemPlaceholder();
}

uint64_t sub_23BFBF534()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 152) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_23BFBF5A8()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint8_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 152);
  swift_bridgeObjectRelease();
  MEMORY[0x242615090](v1);
  MEMORY[0x242615090](v1);
  v2 = sub_23BFF83BC();
  v3 = sub_23BFF967C();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *(_QWORD *)(v0 + 152);
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v5 = 138412290;
    MEMORY[0x242615090](v4);
    v7 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 88) = v7;
    sub_23BFF96B8();
    *v6 = v7;
    MEMORY[0x242615084](v4);
    MEMORY[0x242615084](v4);
    _os_log_impl(&dword_23BE9D000, v2, v3, "Failed to fetch previous placeholder: %@", v5, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AE81D8);
    swift_arrayDestroy();
    MEMORY[0x242615234](v6, -1, -1);
    MEMORY[0x242615234](v5, -1, -1);

    MEMORY[0x242615084](v4);
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 152);
    MEMORY[0x242615084](v8);
    MEMORY[0x242615084](v8);
    MEMORY[0x242615084](v8);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t LazyCanvasItemPlaceholderFetcher.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 128);
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t LazyCanvasItemPlaceholderFetcher.__deallocating_deinit()
{
  LazyCanvasItemPlaceholderFetcher.deinit();
  return swift_defaultActor_deallocate();
}

uint64_t LazyCanvasItemPlaceholderFetcher.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23BFBF788()
{
  return LazyCanvasItemPlaceholderFetcher.unownedExecutor.getter();
}

uint64_t sub_23BFBF7A0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void (*v24)(char *, unint64_t, uint64_t);
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int64_t v34;
  _QWORD *v35;
  uint64_t v36;

  v1 = v0;
  v2 = sub_23BFF83A4();
  v36 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE81F0);
  v6 = sub_23BFF9718();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v9 = *(_QWORD *)(v5 + 56);
    v35 = (_QWORD *)(v5 + 56);
    if (v8 < 64)
      v10 = ~(-1 << v8);
    else
      v10 = -1;
    v11 = v10 & v9;
    v33 = v0;
    v34 = (unint64_t)(v8 + 63) >> 6;
    v12 = v6 + 56;
    result = swift_retain();
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v17 = v16 | (v14 << 6);
      }
      else
      {
        v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v34)
          goto LABEL_33;
        v19 = v35[v18];
        ++v14;
        if (!v19)
        {
          v14 = v18 + 1;
          if (v18 + 1 >= v34)
            goto LABEL_33;
          v19 = v35[v14];
          if (!v19)
          {
            v14 = v18 + 2;
            if (v18 + 2 >= v34)
              goto LABEL_33;
            v19 = v35[v14];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v34)
              {
LABEL_33:
                swift_release();
                v1 = v33;
                v32 = 1 << *(_BYTE *)(v5 + 32);
                if (v32 > 63)
                  bzero(v35, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v35 = -1 << v32;
                *(_QWORD *)(v5 + 16) = 0;
                break;
              }
              v19 = v35[v20];
              if (!v19)
              {
                while (1)
                {
                  v14 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_39;
                  if (v14 >= v34)
                    goto LABEL_33;
                  v19 = v35[v14];
                  ++v20;
                  if (v19)
                    goto LABEL_23;
                }
              }
              v14 = v20;
            }
          }
        }
LABEL_23:
        v11 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      v21 = v5;
      v22 = *(_QWORD *)(v36 + 72);
      v23 = *(_QWORD *)(v5 + 48) + v22 * v17;
      v24 = *(void (**)(char *, unint64_t, uint64_t))(v36 + 32);
      v24(v4, v23, v2);
      sub_23BFC0C80(&qword_256AE81E0, MEMORY[0x24BDCF690]);
      result = sub_23BFF937C();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v12 + 8 * v27);
        }
        while (v31 == -1);
        v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      result = ((uint64_t (*)(unint64_t, char *, uint64_t))v24)(*(_QWORD *)(v7 + 48) + v15 * v22, v4, v2);
      ++*(_QWORD *)(v7 + 16);
      v5 = v21;
    }
  }
  result = swift_release();
  *v1 = v7;
  return result;
}

uint64_t sub_23BFBFB04(uint64_t a1, char *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD, _QWORD, _QWORD);
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  char v21;
  void (*v22)(char *, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  char *v24;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;

  v3 = v2;
  v6 = sub_23BFF83A4();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  sub_23BFC0C80(&qword_256AE81E0, MEMORY[0x24BDCF690]);
  swift_bridgeObjectRetain();
  v30 = a2;
  v11 = sub_23BFF937C();
  v12 = -1 << *(_BYTE *)(v10 + 32);
  v13 = v11 & ~v12;
  v14 = v10;
  v15 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v26 = v2;
    v27 = a1;
    v28 = ~v12;
    v16 = v7;
    v17 = *(_QWORD *)(v7 + 72);
    v29 = v16;
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v16 + 16);
    while (1)
    {
      v19 = v14;
      v20 = v18;
      v18(v9, *(_QWORD *)(v14 + 48) + v17 * v13, v6);
      sub_23BFC0C80(&qword_256AE81E8, MEMORY[0x24BDCF6A0]);
      v21 = sub_23BFF93AC();
      v22 = *(void (**)(char *, uint64_t))(v29 + 8);
      v22(v9, v6);
      if ((v21 & 1) != 0)
        break;
      v13 = (v13 + 1) & v28;
      v14 = v19;
      v18 = v20;
      if (((*(_QWORD *)(v15 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v26;
        a1 = v27;
        v7 = v29;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v30, v6);
    v20(v27, *(_QWORD *)(*v26 + 48) + v17 * v13, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v24 = v30;
    v18(v9, v30, v6);
    v31 = *v3;
    *v3 = 0x8000000000000000;
    sub_23BFBFD58((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *v3 = v31;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

uint64_t sub_23BFBFD58(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, unint64_t, uint64_t);
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;

  v27 = a1;
  v6 = sub_23BFF83A4();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(*v3 + 16);
  v12 = *(_QWORD *)(*v3 + 24);
  v26 = v3;
  if (v12 > v11 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    sub_23BFBF7A0();
  }
  else
  {
    if (v12 > v11)
    {
      sub_23BFBFF4C();
      goto LABEL_12;
    }
    sub_23BFC0170();
  }
  v13 = *v3;
  sub_23BFC0C80(&qword_256AE81E0, MEMORY[0x24BDCF690]);
  v14 = sub_23BFF937C();
  v15 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v14 & ~v15;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v16 = ~v15;
    v17 = *(_QWORD *)(v7 + 72);
    v18 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v18(v10, *(_QWORD *)(v13 + 48) + v17 * a2, v6);
      sub_23BFC0C80(&qword_256AE81E8, MEMORY[0x24BDCF6A0]);
      v19 = sub_23BFF93AC();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      if ((v19 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v16;
    }
    while (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v20 = v27;
  v21 = *v26;
  *(_QWORD *)(*v26 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, __n128))(v7 + 32))(*(_QWORD *)(v21 + 48) + *(_QWORD *)(v7 + 72) * a2, v20, v6, v8);
  v23 = *(_QWORD *)(v21 + 16);
  v24 = __OFADD__(v23, 1);
  v25 = v23 + 1;
  if (!v24)
  {
    *(_QWORD *)(v21 + 16) = v25;
    return result;
  }
  __break(1u);
LABEL_15:
  result = sub_23BFF9970();
  __break(1u);
  return result;
}

void *sub_23BFBFF4C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  uint64_t v10;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;

  v1 = v0;
  v2 = sub_23BFF83A4();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE81F0);
  v6 = *v0;
  v7 = sub_23BFF970C();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release();
LABEL_30:
    *v1 = v8;
    return result;
  }
  v25 = v1;
  result = (void *)(v7 + 56);
  v10 = v6 + 56;
  v11 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v11)
    result = memmove(result, (const void *)(v6 + 56), 8 * v11);
  v13 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v14 = 1 << *(_BYTE *)(v6 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v6 + 56);
  v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v21 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v21);
    ++v13;
    if (!v22)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v17)
        goto LABEL_28;
      v22 = *(_QWORD *)(v10 + 8 * v13);
      if (!v22)
      {
        v13 = v21 + 2;
        if (v21 + 2 >= v17)
          goto LABEL_28;
        v22 = *(_QWORD *)(v10 + 8 * v13);
        if (!v22)
          break;
      }
    }
LABEL_27:
    v16 = (v22 - 1) & v22;
    v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v3 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v20, v2);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v20, v5, v2);
  }
  v23 = v21 + 3;
  if (v23 >= v17)
  {
LABEL_28:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_30;
  }
  v22 = *(_QWORD *)(v10 + 8 * v23);
  if (v22)
  {
    v13 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    v13 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v13 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v13);
    ++v23;
    if (v22)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_23BFC0170()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int64_t v33;

  v1 = v0;
  v2 = sub_23BFF83A4();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE81F0);
  v7 = sub_23BFF9718();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v8;
    return result;
  }
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v10 = *(_QWORD *)(v6 + 56);
  v31 = v0;
  v32 = v6 + 56;
  if (v9 < 64)
    v11 = ~(-1 << v9);
  else
    v11 = -1;
  v12 = v11 & v10;
  v33 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 56;
  result = swift_retain();
  v15 = 0;
  while (1)
  {
    if (v12)
    {
      v17 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v18 = v17 | (v15 << 6);
      goto LABEL_24;
    }
    v19 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v19 >= v33)
      goto LABEL_33;
    v20 = *(_QWORD *)(v32 + 8 * v19);
    ++v15;
    if (!v20)
    {
      v15 = v19 + 1;
      if (v19 + 1 >= v33)
        goto LABEL_33;
      v20 = *(_QWORD *)(v32 + 8 * v15);
      if (!v20)
      {
        v15 = v19 + 2;
        if (v19 + 2 >= v33)
          goto LABEL_33;
        v20 = *(_QWORD *)(v32 + 8 * v15);
        if (!v20)
          break;
      }
    }
LABEL_23:
    v12 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v15 << 6);
LABEL_24:
    v22 = *(_QWORD *)(v3 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v22 * v18, v2);
    sub_23BFC0C80(&qword_256AE81E0, MEMORY[0x24BDCF690]);
    result = sub_23BFF937C();
    v23 = -1 << *(_BYTE *)(v8 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6))) != 0)
    {
      v16 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v13 + 8 * v25);
      }
      while (v29 == -1);
      v16 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v16 * v22, v5, v2);
    ++*(_QWORD *)(v8 + 16);
  }
  v21 = v19 + 3;
  if (v21 >= v33)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v31;
    goto LABEL_35;
  }
  v20 = *(_QWORD *)(v32 + 8 * v21);
  if (v20)
  {
    v15 = v21;
    goto LABEL_23;
  }
  while (1)
  {
    v15 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v15 >= v33)
      goto LABEL_33;
    v20 = *(_QWORD *)(v32 + 8 * v15);
    ++v21;
    if (v20)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_23BFC0490()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 112);
}

_QWORD *sub_23BFC04C0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v25;
  void (*v26)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  __int128 v30[3];

  v5 = v4;
  swift_defaultActor_initialize();
  v8 = sub_23BFF9490();
  v5[21] = MEMORY[0x24BEE4B08];
  v5[14] = v8;
  v5[15] = a1;
  v27 = (uint64_t)a2;
  v9 = a2[4];
  v25 = a2[3];
  __swift_project_boxed_opaque_existential_1(a2, v25);
  v26 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v22 = swift_getAssociatedTypeWitness();
  v19 = swift_getAssociatedTypeWitness();
  v10 = swift_getAssociatedTypeWitness();
  v11 = swift_getAssociatedTypeWitness();
  v20 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v21 = swift_getAssociatedConformanceWitness();
  v18 = swift_getAssociatedConformanceWitness();
  v12 = swift_getAssociatedConformanceWitness();
  v13 = swift_getAssociatedConformanceWitness();
  v14 = swift_getAssociatedConformanceWitness();
  v15 = swift_getAssociatedConformanceWitness();
  v16 = swift_getAssociatedConformanceWitness();
  v26(v30, a3, a4, AssociatedTypeWitness, v22, v19, v10, v11, v20, AssociatedConformanceWitness, v21, v18, v12, v13, v14, v15, v16, v25, v9);
  sub_23BEA883C(v30, (uint64_t)(v5 + 16));
  __swift_destroy_boxed_opaque_existential_1(v27);
  return v5;
}

void sub_23BFC078C()
{
  sub_23BFBD3B8();
}

unint64_t sub_23BFC07A8()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;
  _QWORD v3[2];

  result = qword_256AE80E0[0];
  if (!qword_256AE80E0[0])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE53B8);
    v2 = sub_23BF16B04();
    v3[0] = MEMORY[0x24BEE17A8];
    v3[1] = v2;
    result = MEMORY[0x242615198](MEMORY[0x24BEE08F0], v1, v3);
    atomic_store(result, qword_256AE80E0);
  }
  return result;
}

void sub_23BFC0814(uint64_t a1)
{
  uint64_t *v1;

  sub_23BFBDEA0(a1, v1[4], v1[2], v1[3]);
}

uint64_t sub_23BFC0830(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_23BFBE730(a1, a2, *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 24));
}

uint64_t sub_23BFC084C@<X0>(uint64_t *a1@<X8>)
{
  *a1 = sub_23BFC0490();
  return swift_bridgeObjectRetain();
}

uint64_t sub_23BFC0874()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  return sub_23BFBCBB4(v0);
}

uint64_t sub_23BFC089C()
{
  return 16;
}

__n128 sub_23BFC08A8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_23BFC08B4()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for LazyCanvasItemPlaceholderFetcher(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LazyCanvasItemPlaceholderFetcher);
}

uint64_t method lookup function for LazyCanvasItemPlaceholderFetcher()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LazyCanvasItemPlaceholderFetcher.descriptors.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of LazyCanvasItemPlaceholderFetcher.__allocating_init(batchSize:fetcherProvider:fetchItemForPlaceholders:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t dispatch thunk of LazyCanvasItemPlaceholderFetcher.fetchItems(at:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 192) + *(_QWORD *)(*(_QWORD *)v1 + 192));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_23BF90EBC;
  return v6(a1);
}

uint64_t dispatch thunk of LazyCanvasItemPlaceholderFetcher.onItemAppeared(at:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 200) + *(_QWORD *)(*(_QWORD *)v1 + 200));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_23BF8EC88;
  return v6(a1);
}

uint64_t dispatch thunk of LazyCanvasItemPlaceholderFetcher.invalidatePlaceholders(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 208) + *(_QWORD *)(*(_QWORD *)v1 + 208));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_23BF90EBC;
  return v6(a1);
}

uint64_t dispatch thunk of LazyCanvasItemPlaceholderFetcher.transformDescriptors<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v10;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);

  v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v4 + 216)
                                                                   + *(_QWORD *)(*(_QWORD *)v4 + 216));
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v10;
  *v10 = v5;
  v10[1] = sub_23BF90EBC;
  return v12(a1, a2, a3, a4);
}

uint64_t dispatch thunk of LazyCanvasItemPlaceholderFetcher.updateLazySectionDescriptors(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 224) + *(_QWORD *)(*(_QWORD *)v1 + 224));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_23BF8EC88;
  return v6(a1);
}

void sub_23BFC0B64()
{
  sub_23BFBEB64();
}

unint64_t sub_23BFC0B7C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256AE81C0;
  if (!qword_256AE81C0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE81B8);
    result = MEMORY[0x242615198](MEMORY[0x24BEE1718], v1);
    atomic_store(result, &qword_256AE81C0);
  }
  return result;
}

uint64_t sub_23BFC0BC8()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23BFC0BFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD **)(v0 + 40);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_23BF90EBC;
  v4[13] = v2;
  v4[14] = v3;
  v4[15] = *v3;
  return swift_task_switch();
}

void sub_23BFC0C64()
{
  sub_23BFBE19C();
}

uint64_t sub_23BFC0C80(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_23BFF83A4();
    result = MEMORY[0x242615198](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

__n128 sub_23BFC0CC0@<Q0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11, __n128 a12, unint64_t a13, unint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  char *v30;
  _QWORD *v31;
  _QWORD *v32;
  __n128 *v33;
  __n128 result;
  _QWORD *v35;

  v21 = *a1;
  v22 = *((_QWORD *)a1 + 1);
  v23 = *((_QWORD *)a1 + 2);
  v24 = *((_QWORD *)a1 + 3);
  v25 = a1[32];
  v26 = *((_QWORD *)a1 + 5);
  v27 = *((_QWORD *)a1 + 6);
  *a9 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3728);
  swift_storeEnumTagMultiPayload();
  v29 = (int *)type metadata accessor for StandardVerticalStackView(0, a17, a18, v28);
  v30 = (char *)a9 + v29[9];
  *v30 = v21;
  *((_QWORD *)v30 + 1) = v22;
  *((_QWORD *)v30 + 2) = v23;
  *((_QWORD *)v30 + 3) = v24;
  v30[32] = v25;
  *((_QWORD *)v30 + 5) = v26;
  *((_QWORD *)v30 + 6) = v27;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a17 - 8) + 32))((char *)a9 + v29[10], a2, a17);
  v31 = (uint64_t *)((char *)a9 + v29[11]);
  *v31 = a3;
  v31[1] = a4;
  v31[2] = a5;
  v31[3] = a6;
  v32 = (uint64_t *)((char *)a9 + v29[12]);
  *v32 = a7;
  v32[1] = a8;
  v32[2] = a10;
  v32[3] = a11;
  v33 = (__n128 *)((char *)a9 + v29[13]);
  result = a12;
  *v33 = a12;
  v33[1].n128_u64[0] = a13;
  v33[1].n128_u64[1] = a14;
  v35 = (uint64_t *)((char *)a9 + v29[14]);
  *v35 = a15;
  v35[1] = a16;
  return result;
}

double static StandardVerticalStackViewLayout.default.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_BYTE *)a1 = 0;
  result = 16.0;
  *(_OWORD *)(a1 + 8) = xmmword_23C000A00;
  *(_QWORD *)(a1 + 24) = 0x4020000000000000;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0x4024000000000000;
  *(_QWORD *)(a1 + 48) = 2;
  return result;
}

void StandardVerticalStackViewLayout.alignment.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

double StandardVerticalStackViewLayout.artworkAspectRatio.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

uint64_t StandardVerticalStackViewLayout.artworkClipShape.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

double StandardVerticalStackViewLayout.artworkToCaptionSpacing.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 40);
}

uint64_t StandardVerticalStackViewLayout.titleLineLimit.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

_BYTE *StandardVerticalStackViewLayout.init(alignment:artworkAspectRatio:artworkClipShape:artworkToCaptionSpacing:titleLineLimit:)@<X0>(_BYTE *result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>, double a8@<D2>)
{
  *(_BYTE *)a5 = *result;
  *(double *)(a5 + 8) = a6;
  *(double *)(a5 + 16) = a7;
  *(_QWORD *)(a5 + 24) = a2;
  *(_BYTE *)(a5 + 32) = a3 & 1;
  *(double *)(a5 + 40) = a8;
  *(_QWORD *)(a5 + 48) = a4;
  return result;
}

uint64_t sub_23BFC0EE8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23BFC0F20 + 4 * byte_23C007100[a1]))(0x6E656D6E67696C61, 0xE900000000000074);
}

unint64_t sub_23BFC0F20()
{
  return 0xD000000000000012;
}

uint64_t sub_23BFC0F74()
{
  return 0x6E694C656C746974;
}

uint64_t sub_23BFC0F98()
{
  unsigned __int8 *v0;

  return sub_23BFC0EE8(*v0);
}

uint64_t sub_23BFC0FA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BFC4C94(a1, a2);
  *a3 = result;
  return result;
}

void sub_23BFC0FC4(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_23BFC0FD0()
{
  sub_23BFC2D7C();
  return sub_23BFF9A30();
}

uint64_t sub_23BFC0FF8()
{
  sub_23BFC2D7C();
  return sub_23BFF9A3C();
}

uint64_t StandardVerticalStackViewLayout.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE81F8);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v9 = *((_QWORD *)v1 + 1);
  v10 = *((_QWORD *)v1 + 2);
  v16 = *((_QWORD *)v1 + 3);
  v15 = v1[32];
  v14 = *((_QWORD *)v1 + 6);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BFC2D7C();
  sub_23BFF9A18();
  LOBYTE(v17) = v8;
  v19 = 0;
  sub_23BFC2DC0();
  sub_23BFF9940();
  if (!v2)
  {
    v11 = v15;
    v12 = v16;
    v17 = v9;
    v18 = v10;
    v19 = 1;
    type metadata accessor for CGSize(0);
    sub_23BEA1BB8(&qword_256AE3468, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, MEMORY[0x24BDBD848]);
    sub_23BFF9940();
    v17 = v12;
    LOBYTE(v18) = v11;
    v19 = 2;
    sub_23BF44A54();
    sub_23BFF9940();
    LOBYTE(v17) = 3;
    sub_23BFF9928();
    LOBYTE(v17) = 4;
    sub_23BFF9934();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t StandardVerticalStackViewLayout.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE8210);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BFC2D7C();
  sub_23BFF9A0C();
  if (!v2)
  {
    v22 = 0;
    sub_23BFC2E04();
    sub_23BFF98C8();
    v9 = v20;
    type metadata accessor for CGSize(0);
    v22 = 1;
    sub_23BEA1BB8(&qword_256AE3478, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, MEMORY[0x24BDBD860]);
    sub_23BFF98C8();
    v10 = v20;
    v11 = v21;
    v22 = 2;
    sub_23BF44ADC();
    sub_23BFF98C8();
    v19 = v20;
    v12 = v21;
    LOBYTE(v20) = 3;
    sub_23BFF98B0();
    v15 = v14;
    v18 = v12;
    LOBYTE(v20) = 4;
    v16 = sub_23BFF98BC();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(_BYTE *)a2 = v9;
    *(_QWORD *)(a2 + 8) = v10;
    *(_QWORD *)(a2 + 16) = v11;
    *(_QWORD *)(a2 + 24) = v19;
    *(_BYTE *)(a2 + 32) = v18;
    *(_QWORD *)(a2 + 40) = v15;
    *(_QWORD *)(a2 + 48) = v16;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_23BFC14B4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return StandardVerticalStackViewLayout.init(from:)(a1, a2);
}

uint64_t sub_23BFC14C8(_QWORD *a1)
{
  return StandardVerticalStackViewLayout.encode(to:)(a1);
}

uint64_t StandardVerticalStackViewLayout.hash(into:)()
{
  uint64_t v0;
  char v1;

  v1 = *(_BYTE *)(v0 + 32);
  sub_23BFF99DC();
  sub_23BEA0B6C();
  sub_23BFF99DC();
  if ((v1 & 1) == 0)
    sub_23BFF99F4();
  sub_23BFF99F4();
  return sub_23BFF99DC();
}

uint64_t StandardVerticalStackViewLayout.hashValue.getter()
{
  sub_23BFF99D0();
  StandardVerticalStackViewLayout.hash(into:)();
  return sub_23BFF9A00();
}

uint64_t sub_23BFC15E4()
{
  sub_23BFF99D0();
  StandardVerticalStackViewLayout.hash(into:)();
  return sub_23BFF9A00();
}

uint64_t sub_23BFC1658()
{
  sub_23BFF99D0();
  StandardVerticalStackViewLayout.hash(into:)();
  return sub_23BFF9A00();
}

uint64_t sub_23BFC16C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[2];
  _QWORD v64[2];
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v3 = v2;
  v59 = a2;
  v5 = sub_23BFF8680();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = v5;
  v49 = v5;
  v58 = v6;
  MEMORY[0x24BDAC7A8](v5);
  v57 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(*(_QWORD *)(a1 - 8) + 64);
  v10 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v12 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = *(_QWORD *)(a1 + 16);
  sub_23BFF862C();
  sub_23BFF862C();
  sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE82C0);
  swift_getTupleTypeMetadata2();
  v13 = sub_23BFF9220();
  v14 = MEMORY[0x24BDF5428];
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v13);
  v65 = sub_23BFF9058();
  v66 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3528);
  v67 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE82C8);
  v68 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE82D0);
  v69 = v68;
  swift_getTupleTypeMetadata();
  v15 = sub_23BFF9220();
  MEMORY[0x242615198](v14, v15);
  v16 = sub_23BFF90AC();
  v17 = sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3538);
  v18 = sub_23BFF862C();
  v64[0] = MEMORY[0x242615198](MEMORY[0x24BDF4700], v16);
  v64[1] = MEMORY[0x24BDEBEE0];
  v19 = MEMORY[0x24BDED308];
  v20 = MEMORY[0x242615198](MEMORY[0x24BDED308], v17, v64);
  v21 = sub_23BEA1F94(&qword_256AE3540, &qword_256AE3538, MEMORY[0x24BDEFAD8]);
  v63[0] = v20;
  v63[1] = v21;
  v52 = v18;
  v53 = MEMORY[0x242615198](v19, v18, v63);
  v22 = sub_23BFF9040();
  v55 = *(_QWORD *)(v22 - 8);
  v23 = MEMORY[0x24BDAC7A8](v22);
  v51 = (char *)&v46 - v24;
  v25 = MEMORY[0x242615198](MEMORY[0x24BDF43B0], v22, v23);
  v48 = v25;
  v47 = sub_23BEA1BB8(&qword_256AE3558, (uint64_t (*)(uint64_t))MEMORY[0x24BDED868], MEMORY[0x24BDED858]);
  v65 = v22;
  v66 = v7;
  v67 = v25;
  v68 = v47;
  v26 = MEMORY[0x24261512C](0, &v65, MEMORY[0x24BDF22B8], 0);
  v54 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v28 = (char *)&v46 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = MEMORY[0x24BDAC7A8](v29);
  v50 = (uint64_t)&v46 - v31;
  v32 = v10;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16))(v12, v3, a1, v30);
  v33 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v34 = swift_allocObject();
  v35 = a1;
  v36 = *(_QWORD *)(a1 + 24);
  v37 = v56;
  *(_QWORD *)(v34 + 16) = v56;
  *(_QWORD *)(v34 + 24) = v36;
  (*(void (**)(unint64_t, char *, uint64_t))(v32 + 32))(v34 + v33, v12, v35);
  v60 = v37;
  v61 = v36;
  v62 = v3;
  v38 = v51;
  sub_23BFF9034();
  v39 = v57;
  sub_23BFF8674();
  v40 = v49;
  v41 = v48;
  v42 = v47;
  sub_23BFF8CF8();
  (*(void (**)(char *, uint64_t))(v58 + 8))(v39, v40);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v38, v22);
  v65 = v22;
  v66 = v40;
  v67 = v41;
  v68 = v42;
  swift_getOpaqueTypeConformance2();
  v43 = v50;
  sub_23BEA72EC((uint64_t)v28, v26, v50);
  v44 = *(void (**)(char *, uint64_t))(v54 + 8);
  v44(v28, v26);
  sub_23BEA5C0C(v43, v26, v59);
  return ((uint64_t (*)(uint64_t, uint64_t))v44)(v43, v26);
}

uint64_t sub_23BFC1BCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  _QWORD v31[3];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[2];
  _QWORD v39[5];
  uint64_t v40;
  uint64_t v41;

  v36 = a1;
  v37 = a4;
  sub_23BFF862C();
  sub_23BFF862C();
  sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE82C0);
  swift_getTupleTypeMetadata2();
  v6 = sub_23BFF9220();
  v7 = MEMORY[0x24BDF5428];
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v6);
  v39[2] = sub_23BFF9058();
  v39[3] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3528);
  v39[4] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE82C8);
  v40 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE82D0);
  v41 = v40;
  swift_getTupleTypeMetadata();
  v8 = sub_23BFF9220();
  v31[1] = MEMORY[0x242615198](v7, v8);
  v31[2] = v8;
  v9 = sub_23BFF90AC();
  v32 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v31 - v10;
  v12 = sub_23BFF862C();
  v33 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v31 - v13;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3538);
  v15 = sub_23BFF862C();
  v35 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v34 = (uint64_t)v31 - v19;
  v21 = type metadata accessor for StandardVerticalStackView(0, a2, a3, v20);
  v22 = v36;
  if ((*(_BYTE *)(v36 + *(int *)(v21 + 36)) & 1) != 0)
    v23 = sub_23BFF889C();
  else
    v23 = sub_23BFF88A8();
  MEMORY[0x24BDAC7A8](v23);
  v31[-4] = a2;
  v31[-3] = a3;
  v31[-2] = v22;
  sub_23BFF90A0();
  sub_23BFF91A8();
  v24 = MEMORY[0x242615198](MEMORY[0x24BDF4700], v9);
  sub_23BFF8E9C();
  (*(void (**)(char *, uint64_t))(v32 + 8))(v11, v9);
  v39[0] = v24;
  v39[1] = MEMORY[0x24BDEBEE0];
  v25 = MEMORY[0x24BDED308];
  v26 = MEMORY[0x242615198](MEMORY[0x24BDED308], v12, v39);
  sub_23BEA1D38();
  sub_23BFF8D4C();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v14, v12);
  v27 = sub_23BEA1F94(&qword_256AE3540, &qword_256AE3538, MEMORY[0x24BDEFAD8]);
  v38[0] = v26;
  v38[1] = v27;
  MEMORY[0x242615198](v25, v15, v38);
  v28 = v34;
  sub_23BEA72EC((uint64_t)v17, v15, v34);
  v29 = *(void (**)(char *, uint64_t))(v35 + 8);
  v29(v17, v15);
  sub_23BEA5C0C(v28, v15, v37);
  return ((uint64_t (*)(uint64_t, uint64_t))v29)(v28, v15);
}

uint64_t sub_23BFC1FCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(char *, uint64_t);
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t KeyPath;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t (*v81)(char *, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t (*v100)(char *, uint64_t);
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD v119[3];
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __int16 v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  __int16 v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  uint64_t v138;
  char v139;
  uint64_t v140;
  char v141;
  uint64_t v142;
  char v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146[6];
  unsigned __int8 v147;
  uint64_t v148;
  unsigned __int8 v149;
  uint64_t v150;
  uint64_t v151;

  v102 = a4;
  v86 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5608);
  MEMORY[0x24BDAC7A8](v86);
  v89 = (uint64_t *)((char *)&v83 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5638);
  MEMORY[0x24BDAC7A8](v8);
  v87 = (uint64_t)&v83 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE82D8);
  MEMORY[0x24BDAC7A8](v85);
  v103 = (char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE82E0);
  v12 = *(_QWORD *)(v11 - 8);
  v104 = v11;
  v105 = v12;
  MEMORY[0x24BDAC7A8](v11);
  v88 = (uint64_t)&v83 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE82C8);
  MEMORY[0x24BDAC7A8](v101);
  v109 = (uint64_t)&v83 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v110 = (uint64_t)&v83 - v16;
  sub_23BFF862C();
  sub_23BFF862C();
  sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE82C0);
  swift_getTupleTypeMetadata2();
  v17 = sub_23BFF9220();
  v108 = MEMORY[0x242615198](MEMORY[0x24BDF5428], v17);
  v18 = sub_23BFF9058();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v107 = (char *)&v83 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v83 - v22;
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)&v83 - v25;
  v106 = sub_23BFF8830();
  v28 = type metadata accessor for StandardVerticalStackView(0, a2, a3, v27);
  v29 = a1;
  v30 = a1 + *(int *)(v28 + 36);
  v111 = a2;
  v112 = a3;
  v113 = v29;
  v31 = v29;
  sub_23BFF904C();
  v32 = MEMORY[0x242615198](MEMORY[0x24BDF4498], v18);
  v106 = (uint64_t)v26;
  v99 = v32;
  sub_23BEA72EC((uint64_t)v23, v18, (uint64_t)v26);
  v98 = v19;
  v33 = *(uint64_t (**)(char *, uint64_t))(v19 + 8);
  v108 = v18;
  v100 = v33;
  v33(v23, v18);
  v96 = v30;
  sub_23BFF91C0();
  sub_23BFF84D0();
  v95 = v146[5];
  v94 = v147;
  v93 = v148;
  v92 = v149;
  v90 = v151;
  v91 = v150;
  v97 = v28;
  v34 = (uint64_t *)(v31 + *(int *)(v28 + 52));
  v35 = v34[3];
  if (v35)
  {
    v36 = v34[1];
    v83 = v34[2];
    v37 = *v34;
    v38 = v83 & 1;
    v39 = *MEMORY[0x24BDF1D90];
    v40 = sub_23BFF8C44();
    v84 = v31;
    v41 = v40;
    v42 = *(_QWORD *)(v40 - 8);
    v43 = v87;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 104))(v87, v39, v40);
    v44 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v42 + 56);
    v45 = v110;
    v44(v43, 0, 1, v41);
    KeyPath = swift_getKeyPath();
    v47 = v89;
    sub_23BE9F190(v43, (uint64_t)v89 + *(int *)(v86 + 28), &qword_256AE5638);
    *v47 = KeyPath;
    v48 = (uint64_t)v103;
    sub_23BE9F190((uint64_t)v47, (uint64_t)&v103[*(int *)(v85 + 36)], &qword_256AE5608);
    *(_QWORD *)v48 = v37;
    *(_QWORD *)(v48 + 8) = v36;
    *(_BYTE *)(v48 + 16) = v38;
    *(_QWORD *)(v48 + 24) = v35;
    *(_WORD *)(v48 + 32) = 256;
    sub_23BEA1DC0(v37, v36, v83, v35);
    sub_23BEA0EAC(v37, v36, v38);
    swift_bridgeObjectRetain();
    v31 = v84;
    sub_23BE9F3A0((uint64_t)v47, &qword_256AE5608);
    sub_23BE9F3A0(v43, &qword_256AE5638);
    sub_23BEA0F64(v37, v36, v38);
    swift_bridgeObjectRelease();
    v49 = swift_getKeyPath();
    v50 = v88;
    sub_23BE9F190(v48, v88, &qword_256AE82D8);
    v51 = v104;
    v52 = v50 + *(int *)(v104 + 36);
    *(_QWORD *)v52 = v49;
    *(_QWORD *)(v52 + 8) = 2;
    *(_BYTE *)(v52 + 16) = 0;
    sub_23BE9F3A0(v48, &qword_256AE82D8);
    sub_23BEC42E0(v50, v45, &qword_256AE82E0);
    v53 = 0;
    v54 = v51;
  }
  else
  {
    v53 = 1;
    v54 = v104;
  }
  v55 = v110;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v105 + 56))(v110, v53, 1, v54);
  v56 = v97;
  v57 = (uint64_t *)(v31 + *(int *)(v97 + 44));
  v58 = *v57;
  v59 = v57[1];
  v61 = (char *)v57[2];
  v60 = v57[3];
  v103 = v61;
  v104 = v60;
  v105 = v58;
  v88 = *(_QWORD *)(v96 + 48);
  v62 = swift_getKeyPath();
  v63 = (uint64_t *)(v31 + *(int *)(v56 + 48));
  v64 = *v63;
  v65 = v63[1];
  v66 = v63[2];
  v87 = v63[3];
  v67 = v87;
  v68 = swift_getKeyPath();
  v97 = v68;
  v69 = (uint64_t)v107;
  (*(void (**)(void))(v98 + 16))();
  v138 = 0;
  v139 = 1;
  v140 = v95;
  v141 = v94;
  v142 = v93;
  v143 = v92;
  v144 = v91;
  v145 = v90;
  v146[0] = v69;
  v146[1] = (uint64_t)&v138;
  v70 = v109;
  sub_23BE9F190(v55, v109, &qword_256AE82C8);
  v71 = v105;
  v130 = v105;
  v131 = v59;
  v132 = v103;
  v133 = v104;
  v134 = 256;
  v96 = v62;
  v135 = v62;
  v136 = v88;
  v137 = 0;
  v146[2] = v70;
  v146[3] = (uint64_t)&v130;
  v122 = v64;
  v123 = v65;
  v124 = v66;
  v125 = v67;
  v126 = 256;
  v127 = v68;
  v128 = 2;
  v129 = 0;
  v146[4] = (uint64_t)&v122;
  v72 = v59;
  v89 = (uint64_t *)v59;
  v73 = v59;
  LOBYTE(v59) = (_BYTE)v103;
  v74 = v104;
  sub_23BEA1DC0(v105, v73, (char)v103, v104);
  v75 = v64;
  v76 = v64;
  v77 = v65;
  v78 = v65;
  v79 = v87;
  sub_23BEA1DC0(v75, v77, v66, v87);
  sub_23BEA1DC0(v71, v72, v59, v74);
  swift_retain();
  sub_23BEA1DC0(v76, v78, v66, v79);
  swift_retain();
  v80 = v108;
  v119[0] = v108;
  v119[1] = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3528);
  v119[2] = v101;
  v120 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE82D0);
  v121 = v120;
  v114 = v99;
  v115 = sub_23BEA1F34((unint64_t *)&qword_256AE3578, &qword_256AE3528, MEMORY[0x24BDF4610], MEMORY[0x24BDEBEE0]);
  v116 = sub_23BFC49D0();
  v117 = sub_23BFC4AF0(&qword_256AE8300, &qword_256AE82D0, (uint64_t (*)(void))sub_23BFC4B74);
  v118 = v117;
  sub_23BF93EF0(v146, 5uLL, (uint64_t)v119);
  sub_23BEBF0A4(v76, v78, v66, v79);
  swift_release();
  sub_23BEBF0A4(v105, (uint64_t)v89, (char)v103, v104);
  swift_release();
  sub_23BE9F3A0(v110, &qword_256AE82C8);
  v81 = v100;
  v100((char *)v106, v80);
  sub_23BEBF0A4(v122, v123, v124, v125);
  swift_release();
  sub_23BEBF0A4(v130, v131, (char)v132, v133);
  swift_release();
  sub_23BE9F3A0(v109, &qword_256AE82C8);
  return v81(v107, v80);
}

uint64_t sub_23BFC2838@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void (**v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  void (**v42)(char *, uint64_t);
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  void (**v53)(char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _QWORD v58[2];
  uint64_t v59[2];
  _BYTE v60[136];
  _QWORD v61[2];
  _QWORD v62[2];
  _QWORD v63[2];
  _BYTE v64[144];

  v54 = a4;
  v7 = sub_23BFF85F0();
  v51 = *(_QWORD *)(v7 - 8);
  v52 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v50 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v49 = (uint64_t)&v45 - v10;
  v11 = sub_23BFF862C();
  v47 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v45 - v12;
  v14 = sub_23BFF862C();
  v53 = *(void (***)(char *, uint64_t))(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v45 = (char *)&v45 - v15;
  v46 = sub_23BFF862C();
  v55 = *(_QWORD *)(v46 - 8);
  MEMORY[0x24BDAC7A8](v46);
  v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (void (**)(char *, uint64_t))((char *)&v45 - v19);
  v22 = *(int *)(type metadata accessor for StandardVerticalStackView(0, a2, a3, v21) + 36);
  v48 = a1;
  v23 = a1 + v22;
  sub_23BFF8CEC();
  v24 = *(_QWORD *)(v23 + 24);
  LOBYTE(a2) = *(_BYTE *)(v23 + 32);
  v63[0] = a3;
  v63[1] = MEMORY[0x24BDEEC40];
  v25 = MEMORY[0x242615198](MEMORY[0x24BDED308], v11, v63);
  v26 = v45;
  View.artworkClipShape(_:)(v24, a2, v11);
  v27 = v11;
  v28 = (uint64_t)v17;
  v29 = v46;
  (*(void (**)(char *, uint64_t))(v47 + 8))(v13, v27);
  sub_23BFF91C0();
  v30 = sub_23BF3EAF8();
  v62[0] = v25;
  v62[1] = v30;
  v44 = MEMORY[0x242615198](MEMORY[0x24BDED308], v14, v62);
  sub_23BFF8EA8();
  v53[1](v26, v14);
  v61[0] = v44;
  v61[1] = MEMORY[0x24BDEDBB8];
  v31 = MEMORY[0x242615198](MEMORY[0x24BDED308], v29, v61);
  v53 = v20;
  sub_23BEA72EC(v28, v29, (uint64_t)v20);
  v32 = *(void (**)(uint64_t, uint64_t))(v55 + 8);
  v32(v28, v29);
  v33 = v49;
  sub_23BFCC4C4(v49);
  v35 = v50;
  v34 = v51;
  v36 = v52;
  (*(void (**)(char *, _QWORD, uint64_t))(v51 + 104))(v50, *MEMORY[0x24BDECEA0], v52);
  sub_23BEA1BB8(&qword_256AE8318, (uint64_t (*)(uint64_t))MEMORY[0x24BDECF50], MEMORY[0x24BDECF70]);
  v37 = v35;
  v38 = v36;
  LOBYTE(v36) = sub_23BFF93A0();
  v39 = *(void (**)(char *, uint64_t))(v34 + 8);
  v39(v37, v38);
  v39((char *)v33, v38);
  if ((v36 & 1) != 0)
  {
    sub_23BFC4C74((uint64_t)v60);
  }
  else
  {
    v40 = sub_23BFF91C0();
    sub_23BF945D8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v60, 0.0, 1, 0.0, 1, v40, v41, 0, 1);
    sub_23BFC4BE8((uint64_t)v60);
  }
  sub_23BEC42E0((uint64_t)v60, (uint64_t)v64, &qword_256AE82C0);
  v42 = v53;
  (*(void (**)(uint64_t, void (**)(char *, uint64_t), uint64_t))(v55 + 16))(v28, v53, v29);
  v59[0] = v28;
  sub_23BEC42E0((uint64_t)v64, (uint64_t)v60, &qword_256AE82C0);
  v59[1] = (uint64_t)v60;
  v58[0] = v29;
  v58[1] = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE82C0);
  v56 = v31;
  v57 = sub_23BFC4BF0();
  sub_23BF93EF0(v59, 2uLL, (uint64_t)v58);
  v32((uint64_t)v42, v29);
  return ((uint64_t (*)(uint64_t, uint64_t))v32)(v28, v29);
}

BOOL _s15FitnessCanvasUI31StandardVerticalStackViewLayoutV2eeoiySbAC_ACtFZ_0(double *a1, double *a2)
{
  _BOOL8 result;
  double v5;
  uint64_t v6;
  double v7;
  int v8;

  result = 0;
  if (((*(unsigned __int8 *)a1 ^ *(unsigned __int8 *)a2) & 1) == 0 && a1[1] == a2[1] && a1[2] == a2[2])
  {
    v5 = a1[5];
    v6 = *((_QWORD *)a1 + 6);
    v7 = a2[5];
    if (((_BYTE)a1[4] & 1) != 0)
    {
      if (v5 == v7)
        v8 = *((unsigned __int8 *)a2 + 32);
      else
        v8 = 0;
      if (v8 != 1)
        return 0;
    }
    else
    {
      result = 0;
      if (((_BYTE)a2[4] & 1) != 0)
        return result;
      if (a1[3] != a2[3] || v5 != v7)
        return result;
    }
    return v6 == *((_QWORD *)a2 + 6);
  }
  return result;
}

unint64_t sub_23BFC2D7C()
{
  unint64_t result;

  result = qword_256AE8200;
  if (!qword_256AE8200)
  {
    result = MEMORY[0x242615198](&unk_23C007368, &type metadata for StandardVerticalStackViewLayout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE8200);
  }
  return result;
}

unint64_t sub_23BFC2DC0()
{
  unint64_t result;

  result = qword_256AE8208;
  if (!qword_256AE8208)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for VerticalStackHorizontalAlignment, &type metadata for VerticalStackHorizontalAlignment);
    atomic_store(result, (unint64_t *)&qword_256AE8208);
  }
  return result;
}

unint64_t sub_23BFC2E04()
{
  unint64_t result;

  result = qword_256AE8218;
  if (!qword_256AE8218)
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for VerticalStackHorizontalAlignment, &type metadata for VerticalStackHorizontalAlignment);
    atomic_store(result, (unint64_t *)&qword_256AE8218);
  }
  return result;
}

unint64_t sub_23BFC2E4C()
{
  unint64_t result;

  result = qword_256AE8220[0];
  if (!qword_256AE8220[0])
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for StandardVerticalStackViewLayout, &type metadata for StandardVerticalStackViewLayout);
    atomic_store(result, qword_256AE8220);
  }
  return result;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for StandardVerticalStackViewLayout(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[56])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for StandardVerticalStackViewLayout(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 56) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for StandardVerticalStackViewLayout()
{
  return &type metadata for StandardVerticalStackViewLayout;
}

uint64_t storeEnumTagSinglePayload for StandardVerticalStackViewLayout.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_23BFC2F9C + 4 * byte_23C00710A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_23BFC2FD0 + 4 * byte_23C007105[v4]))();
}

uint64_t sub_23BFC2FD0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BFC2FD8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BFC2FE0);
  return result;
}

uint64_t sub_23BFC2FEC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BFC2FF4);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_23BFC2FF8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BFC3000(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StandardVerticalStackViewLayout.CodingKeys()
{
  return &type metadata for StandardVerticalStackViewLayout.CodingKeys;
}

void sub_23BFC301C()
{
  unint64_t v0;
  unint64_t v1;

  sub_23BEA9ED8();
  if (v0 <= 0x3F)
  {
    swift_checkMetadataState();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t *sub_23BFC30C8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  __int128 v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;

  v6 = sub_23BFF85F0();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_QWORD *)(v7 + 64) <= 8uLL)
    v8 = 8;
  else
    v8 = *(_QWORD *)(v7 + 64);
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_DWORD *)(v10 + 80);
  v12 = *(_QWORD *)(v10 + 64) + 7;
  v13 = v11 | *(_DWORD *)(v7 + 80) & 0xF8;
  if (v13 > 7
    || ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v10 + 80)) & 0x100000) != 0
    || ((((((((v12 + (((v8 & 0xFFFFFFFFFFFFFFF8) + v11 + 64) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8)
         + 39) & 0xFFFFFFFFFFFFFFF8)
       + 39) & 0xFFFFFFFFFFFFFFF8)
     + 16 > 0x18)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + (((v13 | 7) + 16) & ~(unint64_t)(v13 | 7)));
  }
  else
  {
    v17 = *((unsigned __int8 *)a2 + v8);
    if (v17 >= 2)
    {
      if (v8 <= 3)
        v18 = v8;
      else
        v18 = 4;
      __asm { BR              X13 }
    }
    v19 = v8 + 1;
    v20 = ~v11;
    if (v17 == 1)
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
      v21 = 1;
    }
    else
    {
      *a1 = *a2;
      swift_retain();
      v21 = 0;
    }
    *((_BYTE *)a1 + v8) = v21;
    v22 = ((unint64_t)a1 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
    v23 = ((unint64_t)a2 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
    v24 = *(_OWORD *)v23;
    v25 = *(_OWORD *)(v23 + 16);
    v26 = *(_OWORD *)(v23 + 32);
    *(_QWORD *)(v22 + 48) = *(_QWORD *)(v23 + 48);
    *(_OWORD *)(v22 + 16) = v25;
    *(_OWORD *)(v22 + 32) = v26;
    *(_OWORD *)v22 = v24;
    v27 = (v22 + v11 + 56) & v20;
    v28 = (v23 + v11 + 56) & v20;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v27, v28, v9);
    v29 = (v12 + v27) & 0xFFFFFFFFFFFFFFF8;
    v30 = (v12 + v28) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)(v30 + 24) < 0xFFFFFFFFuLL)
    {
      v34 = *(_OWORD *)(v30 + 16);
      *(_OWORD *)v29 = *(_OWORD *)v30;
      *(_OWORD *)(v29 + 16) = v34;
    }
    else
    {
      v31 = *(_QWORD *)v30;
      v32 = *(_QWORD *)(v30 + 8);
      v33 = *(_BYTE *)(v30 + 16);
      sub_23BEA0EAC(*(_QWORD *)v30, v32, v33);
      *(_QWORD *)v29 = v31;
      *(_QWORD *)(v29 + 8) = v32;
      *(_BYTE *)(v29 + 16) = v33;
      *(_QWORD *)(v29 + 24) = *(_QWORD *)(v30 + 24);
      swift_bridgeObjectRetain();
    }
    v35 = (v29 + 39) & 0xFFFFFFFFFFFFFFF8;
    v36 = (v30 + 39) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)(v36 + 24) < 0xFFFFFFFFuLL)
    {
      v40 = *(_OWORD *)(v36 + 16);
      *(_OWORD *)v35 = *(_OWORD *)v36;
      *(_OWORD *)(v35 + 16) = v40;
    }
    else
    {
      v37 = *(_QWORD *)v36;
      v38 = *(_QWORD *)(v36 + 8);
      v39 = *(_BYTE *)(v36 + 16);
      sub_23BEA0EAC(*(_QWORD *)v36, v38, v39);
      *(_QWORD *)v35 = v37;
      *(_QWORD *)(v35 + 8) = v38;
      *(_BYTE *)(v35 + 16) = v39;
      *(_QWORD *)(v35 + 24) = *(_QWORD *)(v36 + 24);
      swift_bridgeObjectRetain();
    }
    v41 = (v35 + 39) & 0xFFFFFFFFFFFFFFF8;
    v42 = (v36 + 39) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)(v42 + 24) < 0xFFFFFFFFuLL)
    {
      v46 = *(_OWORD *)(v42 + 16);
      *(_OWORD *)v41 = *(_OWORD *)v42;
      *(_OWORD *)(v41 + 16) = v46;
    }
    else
    {
      v43 = *(_QWORD *)v42;
      v44 = *(_QWORD *)(v42 + 8);
      v45 = *(_BYTE *)(v42 + 16);
      sub_23BEA0EAC(*(_QWORD *)v42, v44, v45);
      *(_QWORD *)v41 = v43;
      *(_QWORD *)(v41 + 8) = v44;
      *(_BYTE *)(v41 + 16) = v45;
      *(_QWORD *)(v41 + 24) = *(_QWORD *)(v42 + 24);
      swift_bridgeObjectRetain();
    }
    v47 = (_QWORD *)((v42 + 39) & 0xFFFFFFFFFFFFFFF8);
    v48 = v47[1];
    v49 = (_QWORD *)((v41 + 39) & 0xFFFFFFFFFFFFFFF8);
    *v49 = *v47;
    v49[1] = v48;
  }
  swift_retain();
  return a1;
}

uint64_t sub_23BFC3400(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v4 = sub_23BFF85F0();
  v5 = *(_QWORD *)(v4 - 8);
  if (*(_QWORD *)(v5 + 64) <= 8uLL)
    v6 = 8;
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *(unsigned __int8 *)(a1 + v6);
  if (v7 >= 2)
  {
    if (v6 <= 3)
      v8 = v6;
    else
      v8 = 4;
    __asm { BR              X13 }
  }
  if (v7 == 1)
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  else
    swift_release();
  v9 = (a1 + v6 + 8) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v11 = (v9 + *(unsigned __int8 *)(v10 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  (*(void (**)(unint64_t))(v10 + 8))(v11);
  v12 = (*(_QWORD *)(v10 + 64) + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v12 + 24) >= 0xFFFFFFFFuLL)
  {
    sub_23BEA0F64(*(_QWORD *)v12, *(_QWORD *)(v12 + 8), *(_BYTE *)(v12 + 16));
    swift_bridgeObjectRelease();
  }
  v13 = (v12 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v13 + 24) >= 0xFFFFFFFFuLL)
  {
    sub_23BEA0F64(*(_QWORD *)v13, *(_QWORD *)(v13 + 8), *(_BYTE *)(v13 + 16));
    swift_bridgeObjectRelease();
  }
  v14 = (v13 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v14 + 24) >= 0xFFFFFFFFuLL)
  {
    sub_23BEA0F64(*(_QWORD *)v14, *(_QWORD *)(v14 + 8), *(_BYTE *)(v14 + 16));
    swift_bridgeObjectRelease();
  }
  return swift_release();
}

_QWORD *sub_23BFC35BC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;

  v6 = sub_23BFF85F0();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_QWORD *)(v7 + 64) <= 8uLL)
    v8 = 8;
  else
    v8 = *(_QWORD *)(v7 + 64);
  v9 = *((unsigned __int8 *)a2 + v8);
  if (v9 >= 2)
  {
    if (v8 <= 3)
      v10 = v8;
    else
      v10 = 4;
    __asm { BR              X13 }
  }
  if (v9 == 1)
  {
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(a1, a2, v6);
    v11 = 1;
  }
  else
  {
    *a1 = *a2;
    swift_retain();
    v11 = 0;
  }
  *((_BYTE *)a1 + v8) = v11;
  v12 = ((unint64_t)a1 + v8 + 8) & 0xFFFFFFFFFFFFFFF8;
  v13 = ((unint64_t)a2 + v8 + 8) & 0xFFFFFFFFFFFFFFF8;
  v14 = *(_OWORD *)v13;
  v15 = *(_OWORD *)(v13 + 16);
  v16 = *(_OWORD *)(v13 + 32);
  *(_QWORD *)(v12 + 48) = *(_QWORD *)(v13 + 48);
  *(_OWORD *)(v12 + 16) = v15;
  *(_OWORD *)(v12 + 32) = v16;
  *(_OWORD *)v12 = v14;
  v17 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  v19 = (v18 + 56 + v12) & ~v18;
  v20 = (v18 + 56 + v13) & ~v18;
  (*(void (**)(uint64_t, uint64_t))(v17 + 16))(v19, v20);
  v21 = *(_QWORD *)(v17 + 64) + 7;
  v22 = (v21 + v19) & 0xFFFFFFFFFFFFFFF8;
  v23 = (v21 + v20) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v23 + 24) < 0xFFFFFFFFuLL)
  {
    v27 = *(_OWORD *)(v23 + 16);
    *(_OWORD *)v22 = *(_OWORD *)v23;
    *(_OWORD *)(v22 + 16) = v27;
  }
  else
  {
    v24 = *(_QWORD *)v23;
    v25 = *(_QWORD *)(v23 + 8);
    v26 = *(_BYTE *)(v23 + 16);
    sub_23BEA0EAC(*(_QWORD *)v23, v25, v26);
    *(_QWORD *)v22 = v24;
    *(_QWORD *)(v22 + 8) = v25;
    *(_BYTE *)(v22 + 16) = v26;
    *(_QWORD *)(v22 + 24) = *(_QWORD *)(v23 + 24);
    swift_bridgeObjectRetain();
  }
  v28 = (v22 + 39) & 0xFFFFFFFFFFFFFFF8;
  v29 = (v23 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v29 + 24) < 0xFFFFFFFFuLL)
  {
    v33 = *(_OWORD *)(v29 + 16);
    *(_OWORD *)v28 = *(_OWORD *)v29;
    *(_OWORD *)(v28 + 16) = v33;
  }
  else
  {
    v30 = *(_QWORD *)v29;
    v31 = *(_QWORD *)(v29 + 8);
    v32 = *(_BYTE *)(v29 + 16);
    sub_23BEA0EAC(*(_QWORD *)v29, v31, v32);
    *(_QWORD *)v28 = v30;
    *(_QWORD *)(v28 + 8) = v31;
    *(_BYTE *)(v28 + 16) = v32;
    *(_QWORD *)(v28 + 24) = *(_QWORD *)(v29 + 24);
    swift_bridgeObjectRetain();
  }
  v34 = (v28 + 39) & 0xFFFFFFFFFFFFFFF8;
  v35 = (v29 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v35 + 24) < 0xFFFFFFFFuLL)
  {
    v39 = *(_OWORD *)(v35 + 16);
    *(_OWORD *)v34 = *(_OWORD *)v35;
    *(_OWORD *)(v34 + 16) = v39;
  }
  else
  {
    v36 = *(_QWORD *)v35;
    v37 = *(_QWORD *)(v35 + 8);
    v38 = *(_BYTE *)(v35 + 16);
    sub_23BEA0EAC(*(_QWORD *)v35, v37, v38);
    *(_QWORD *)v34 = v36;
    *(_QWORD *)(v34 + 8) = v37;
    *(_BYTE *)(v34 + 16) = v38;
    *(_QWORD *)(v34 + 24) = *(_QWORD *)(v35 + 24);
    swift_bridgeObjectRetain();
  }
  v40 = (_QWORD *)((v35 + 39) & 0xFFFFFFFFFFFFFFF8);
  v41 = v40[1];
  v42 = (_QWORD *)((v34 + 39) & 0xFFFFFFFFFFFFFFF8);
  *v42 = *v40;
  v42[1] = v41;
  swift_retain();
  return a1;
}

_QWORD *sub_23BFC385C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  __int128 v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  __int128 v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  __int128 v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;

  if (a1 != a2)
  {
    v6 = sub_23BFF85F0();
    v7 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v7 + 64) <= 8uLL)
      v8 = 8;
    else
      v8 = *(_QWORD *)(v7 + 64);
    v9 = *((unsigned __int8 *)a1 + v8);
    if (v9 >= 2)
    {
      if (v8 <= 3)
        v10 = v8;
      else
        v10 = 4;
      __asm { BR              X12 }
    }
    if (v9 == 1)
      (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(a1, v6);
    else
      swift_release();
    v11 = *((unsigned __int8 *)a2 + v8);
    if (v11 >= 2)
    {
      if (v8 <= 3)
        v12 = v8;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    if (v11 == 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(a1, a2, v6);
      *((_BYTE *)a1 + v8) = 1;
    }
    else
    {
      *a1 = *a2;
      *((_BYTE *)a1 + v8) = 0;
      swift_retain();
    }
  }
  v13 = *(_QWORD *)(*(_QWORD *)(sub_23BFF85F0() - 8) + 64);
  if (v13 <= 8)
    v13 = 8;
  v14 = v13 + 8;
  v15 = ((unint64_t)a1 + v14) & 0xFFFFFFFFFFFFFFF8;
  v16 = ((unint64_t)a2 + v14) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v15 = *(_BYTE *)v16;
  *(_QWORD *)(v15 + 8) = *(_QWORD *)(v16 + 8);
  *(_QWORD *)(v15 + 16) = *(_QWORD *)(v16 + 16);
  v17 = *(_BYTE *)(v16 + 32);
  *(_QWORD *)(v15 + 24) = *(_QWORD *)(v16 + 24);
  *(_BYTE *)(v15 + 32) = v17;
  *(_QWORD *)(v15 + 40) = *(_QWORD *)(v16 + 40);
  *(_QWORD *)(v15 + 48) = *(_QWORD *)(v16 + 48);
  v18 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v19 = *(unsigned __int8 *)(v18 + 80);
  v20 = (v19 + 56 + v15) & ~v19;
  v21 = (v19 + 56 + v16) & ~v19;
  (*(void (**)(uint64_t, uint64_t))(v18 + 24))(v20, v21);
  v22 = *(_QWORD *)(v18 + 64) + 7;
  v23 = (v22 + v20) & 0xFFFFFFFFFFFFFFF8;
  v24 = (v22 + v21) & 0xFFFFFFFFFFFFFFF8;
  v25 = *(_QWORD *)(v24 + 24);
  if (*(_QWORD *)(v23 + 24) < 0xFFFFFFFFuLL)
  {
    if (v25 >= 0xFFFFFFFF)
    {
      v32 = *(_QWORD *)v24;
      v33 = *(_QWORD *)(v24 + 8);
      v34 = *(_BYTE *)(v24 + 16);
      sub_23BEA0EAC(*(_QWORD *)v24, v33, v34);
      *(_QWORD *)v23 = v32;
      *(_QWORD *)(v23 + 8) = v33;
      *(_BYTE *)(v23 + 16) = v34;
      *(_QWORD *)(v23 + 24) = *(_QWORD *)(v24 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_30;
    }
  }
  else
  {
    if (v25 >= 0xFFFFFFFF)
    {
      v26 = *(_QWORD *)v24;
      v27 = *(_QWORD *)(v24 + 8);
      v28 = *(_BYTE *)(v24 + 16);
      sub_23BEA0EAC(*(_QWORD *)v24, v27, v28);
      v29 = *(_QWORD *)v23;
      v30 = *(_QWORD *)(v23 + 8);
      v31 = *(_BYTE *)(v23 + 16);
      *(_QWORD *)v23 = v26;
      *(_QWORD *)(v23 + 8) = v27;
      *(_BYTE *)(v23 + 16) = v28;
      sub_23BEA0F64(v29, v30, v31);
      *(_QWORD *)(v23 + 24) = *(_QWORD *)(v24 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_30;
    }
    sub_23BEA0F64(*(_QWORD *)v23, *(_QWORD *)(v23 + 8), *(_BYTE *)(v23 + 16));
    swift_bridgeObjectRelease();
  }
  v35 = *(_OWORD *)(v24 + 16);
  *(_OWORD *)v23 = *(_OWORD *)v24;
  *(_OWORD *)(v23 + 16) = v35;
LABEL_30:
  v36 = (v23 + 39) & 0xFFFFFFFFFFFFFFF8;
  v37 = (v24 + 39) & 0xFFFFFFFFFFFFFFF8;
  v38 = *(_QWORD *)(v37 + 24);
  if (*(_QWORD *)(v36 + 24) < 0xFFFFFFFFuLL)
  {
    if (v38 >= 0xFFFFFFFF)
    {
      v45 = *(_QWORD *)v37;
      v46 = *(_QWORD *)(v37 + 8);
      v47 = *(_BYTE *)(v37 + 16);
      sub_23BEA0EAC(*(_QWORD *)v37, v46, v47);
      *(_QWORD *)v36 = v45;
      *(_QWORD *)(v36 + 8) = v46;
      *(_BYTE *)(v36 + 16) = v47;
      *(_QWORD *)(v36 + 24) = *(_QWORD *)(v37 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_37;
    }
  }
  else
  {
    if (v38 >= 0xFFFFFFFF)
    {
      v39 = *(_QWORD *)v37;
      v40 = *(_QWORD *)(v37 + 8);
      v41 = *(_BYTE *)(v37 + 16);
      sub_23BEA0EAC(*(_QWORD *)v37, v40, v41);
      v42 = *(_QWORD *)v36;
      v43 = *(_QWORD *)(v36 + 8);
      v44 = *(_BYTE *)(v36 + 16);
      *(_QWORD *)v36 = v39;
      *(_QWORD *)(v36 + 8) = v40;
      *(_BYTE *)(v36 + 16) = v41;
      sub_23BEA0F64(v42, v43, v44);
      *(_QWORD *)(v36 + 24) = *(_QWORD *)(v37 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_37;
    }
    sub_23BEA0F64(*(_QWORD *)v36, *(_QWORD *)(v36 + 8), *(_BYTE *)(v36 + 16));
    swift_bridgeObjectRelease();
  }
  v48 = *(_OWORD *)(v37 + 16);
  *(_OWORD *)v36 = *(_OWORD *)v37;
  *(_OWORD *)(v36 + 16) = v48;
LABEL_37:
  v49 = (v36 + 39) & 0xFFFFFFFFFFFFFFF8;
  v50 = (v37 + 39) & 0xFFFFFFFFFFFFFFF8;
  v51 = *(_QWORD *)(v50 + 24);
  if (*(_QWORD *)(v49 + 24) < 0xFFFFFFFFuLL)
  {
    if (v51 >= 0xFFFFFFFF)
    {
      v58 = *(_QWORD *)v50;
      v59 = *(_QWORD *)(v50 + 8);
      v60 = *(_BYTE *)(v50 + 16);
      sub_23BEA0EAC(*(_QWORD *)v50, v59, v60);
      *(_QWORD *)v49 = v58;
      *(_QWORD *)(v49 + 8) = v59;
      *(_BYTE *)(v49 + 16) = v60;
      *(_QWORD *)(v49 + 24) = *(_QWORD *)(v50 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_44;
    }
LABEL_43:
    v61 = *(_OWORD *)(v50 + 16);
    *(_OWORD *)v49 = *(_OWORD *)v50;
    *(_OWORD *)(v49 + 16) = v61;
    goto LABEL_44;
  }
  if (v51 < 0xFFFFFFFF)
  {
    sub_23BEA0F64(*(_QWORD *)v49, *(_QWORD *)(v49 + 8), *(_BYTE *)(v49 + 16));
    swift_bridgeObjectRelease();
    goto LABEL_43;
  }
  v52 = *(_QWORD *)v50;
  v53 = *(_QWORD *)(v50 + 8);
  v54 = *(_BYTE *)(v50 + 16);
  sub_23BEA0EAC(*(_QWORD *)v50, v53, v54);
  v55 = *(_QWORD *)v49;
  v56 = *(_QWORD *)(v49 + 8);
  v57 = *(_BYTE *)(v49 + 16);
  *(_QWORD *)v49 = v52;
  *(_QWORD *)(v49 + 8) = v53;
  *(_BYTE *)(v49 + 16) = v54;
  sub_23BEA0F64(v55, v56, v57);
  *(_QWORD *)(v49 + 24) = *(_QWORD *)(v50 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_44:
  v62 = (_QWORD *)((v49 + 39) & 0xFFFFFFFFFFFFFFF8);
  v63 = (_QWORD *)((v50 + 39) & 0xFFFFFFFFFFFFFFF8);
  v64 = v63[1];
  *v62 = *v63;
  v62[1] = v64;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *sub_23BFC3D68(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  __int128 v24;
  _OWORD *v25;
  _OWORD *v26;
  __int128 v27;
  _OWORD *v28;
  _OWORD *v29;
  __int128 v30;

  v6 = sub_23BFF85F0();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_QWORD *)(v7 + 64) <= 8uLL)
    v8 = 8;
  else
    v8 = *(_QWORD *)(v7 + 64);
  v9 = *((unsigned __int8 *)a2 + v8);
  if (v9 >= 2)
  {
    if (v8 <= 3)
      v10 = v8;
    else
      v10 = 4;
    __asm { BR              X13 }
  }
  if (v9 == 1)
  {
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 32))(a1, a2, v6);
    v11 = 1;
  }
  else
  {
    v11 = 0;
    *a1 = *a2;
  }
  *((_BYTE *)a1 + v8) = v11;
  v12 = ((unint64_t)a1 + v8 + 8) & 0xFFFFFFFFFFFFFFF8;
  v13 = ((unint64_t)a2 + v8 + 8) & 0xFFFFFFFFFFFFFFF8;
  v14 = *(_OWORD *)v13;
  v15 = *(_OWORD *)(v13 + 16);
  v16 = *(_OWORD *)(v13 + 32);
  *(_QWORD *)(v12 + 48) = *(_QWORD *)(v13 + 48);
  *(_OWORD *)(v12 + 16) = v15;
  *(_OWORD *)(v12 + 32) = v16;
  *(_OWORD *)v12 = v14;
  v17 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  v19 = (v18 + 56 + v12) & ~v18;
  v20 = (v18 + 56 + v13) & ~v18;
  (*(void (**)(uint64_t, uint64_t))(v17 + 32))(v19, v20);
  v21 = *(_QWORD *)(v17 + 64) + 7;
  v22 = (_OWORD *)((v21 + v19) & 0xFFFFFFFFFFFFFFF8);
  v23 = (_OWORD *)((v21 + v20) & 0xFFFFFFFFFFFFFFF8);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  v25 = (_OWORD *)(((unint64_t)v22 + 39) & 0xFFFFFFFFFFFFFFF8);
  v26 = (_OWORD *)(((unint64_t)v23 + 39) & 0xFFFFFFFFFFFFFFF8);
  v27 = v26[1];
  *v25 = *v26;
  v25[1] = v27;
  v28 = (_OWORD *)(((unint64_t)v25 + 39) & 0xFFFFFFFFFFFFFFF8);
  v29 = (_OWORD *)(((unint64_t)v26 + 39) & 0xFFFFFFFFFFFFFFF8);
  v30 = v29[1];
  *v28 = *v29;
  v28[1] = v30;
  *(_OWORD *)(((unint64_t)v28 + 39) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v29 + 39) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *sub_23BFC3F38(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  __int128 v37;
  unint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  __int128 v44;

  if (a1 != a2)
  {
    v6 = sub_23BFF85F0();
    v7 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v7 + 64) <= 8uLL)
      v8 = 8;
    else
      v8 = *(_QWORD *)(v7 + 64);
    v9 = *((unsigned __int8 *)a1 + v8);
    if (v9 >= 2)
    {
      if (v8 <= 3)
        v10 = v8;
      else
        v10 = 4;
      __asm { BR              X12 }
    }
    if (v9 == 1)
      (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(a1, v6);
    else
      swift_release();
    v11 = *((unsigned __int8 *)a2 + v8);
    if (v11 >= 2)
    {
      if (v8 <= 3)
        v12 = v8;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    if (v11 == 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 32))(a1, a2, v6);
      v13 = 1;
    }
    else
    {
      v13 = 0;
      *a1 = *a2;
    }
    *((_BYTE *)a1 + v8) = v13;
  }
  v14 = *(_QWORD *)(*(_QWORD *)(sub_23BFF85F0() - 8) + 64);
  if (v14 <= 8)
    v14 = 8;
  v15 = v14 + 8;
  v16 = ((unint64_t)a1 + v15) & 0xFFFFFFFFFFFFFFF8;
  v17 = ((unint64_t)a2 + v15) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v16 = *(_BYTE *)v17;
  *(_QWORD *)(v16 + 8) = *(_QWORD *)(v17 + 8);
  *(_QWORD *)(v16 + 16) = *(_QWORD *)(v17 + 16);
  v18 = *(_BYTE *)(v17 + 32);
  *(_QWORD *)(v16 + 24) = *(_QWORD *)(v17 + 24);
  *(_BYTE *)(v16 + 32) = v18;
  *(_QWORD *)(v16 + 40) = *(_QWORD *)(v17 + 40);
  *(_QWORD *)(v16 + 48) = *(_QWORD *)(v17 + 48);
  v19 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  v21 = (v20 + 56 + v16) & ~v20;
  v22 = (v20 + 56 + v17) & ~v20;
  (*(void (**)(uint64_t, uint64_t))(v19 + 40))(v21, v22);
  v23 = *(_QWORD *)(v19 + 64) + 7;
  v24 = (v23 + v21) & 0xFFFFFFFFFFFFFFF8;
  v25 = (v23 + v22) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v24 + 24) >= 0xFFFFFFFFuLL)
  {
    if (*(_QWORD *)(v25 + 24) >= 0xFFFFFFFFuLL)
    {
      v26 = *(_BYTE *)(v25 + 16);
      v27 = *(_QWORD *)v24;
      v28 = *(_QWORD *)(v24 + 8);
      v29 = *(_BYTE *)(v24 + 16);
      *(_OWORD *)v24 = *(_OWORD *)v25;
      *(_BYTE *)(v24 + 16) = v26;
      sub_23BEA0F64(v27, v28, v29);
      *(_QWORD *)(v24 + 24) = *(_QWORD *)(v25 + 24);
      swift_bridgeObjectRelease();
      goto LABEL_29;
    }
    sub_23BEA0F64(*(_QWORD *)v24, *(_QWORD *)(v24 + 8), *(_BYTE *)(v24 + 16));
    swift_bridgeObjectRelease();
  }
  v30 = *(_OWORD *)(v25 + 16);
  *(_OWORD *)v24 = *(_OWORD *)v25;
  *(_OWORD *)(v24 + 16) = v30;
LABEL_29:
  v31 = (v24 + 39) & 0xFFFFFFFFFFFFFFF8;
  v32 = (v25 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v31 + 24) >= 0xFFFFFFFFuLL)
  {
    if (*(_QWORD *)(v32 + 24) >= 0xFFFFFFFFuLL)
    {
      v33 = *(_BYTE *)(v32 + 16);
      v34 = *(_QWORD *)v31;
      v35 = *(_QWORD *)(v31 + 8);
      v36 = *(_BYTE *)(v31 + 16);
      *(_OWORD *)v31 = *(_OWORD *)v32;
      *(_BYTE *)(v31 + 16) = v33;
      sub_23BEA0F64(v34, v35, v36);
      *(_QWORD *)(v31 + 24) = *(_QWORD *)(v32 + 24);
      swift_bridgeObjectRelease();
      goto LABEL_34;
    }
    sub_23BEA0F64(*(_QWORD *)v31, *(_QWORD *)(v31 + 8), *(_BYTE *)(v31 + 16));
    swift_bridgeObjectRelease();
  }
  v37 = *(_OWORD *)(v32 + 16);
  *(_OWORD *)v31 = *(_OWORD *)v32;
  *(_OWORD *)(v31 + 16) = v37;
LABEL_34:
  v38 = (v31 + 39) & 0xFFFFFFFFFFFFFFF8;
  v39 = (v32 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v38 + 24) < 0xFFFFFFFFuLL)
  {
LABEL_38:
    v44 = *(_OWORD *)(v39 + 16);
    *(_OWORD *)v38 = *(_OWORD *)v39;
    *(_OWORD *)(v38 + 16) = v44;
    goto LABEL_39;
  }
  if (*(_QWORD *)(v39 + 24) < 0xFFFFFFFFuLL)
  {
    sub_23BEA0F64(*(_QWORD *)v38, *(_QWORD *)(v38 + 8), *(_BYTE *)(v38 + 16));
    swift_bridgeObjectRelease();
    goto LABEL_38;
  }
  v40 = *(_BYTE *)(v39 + 16);
  v41 = *(_QWORD *)v38;
  v42 = *(_QWORD *)(v38 + 8);
  v43 = *(_BYTE *)(v38 + 16);
  *(_OWORD *)v38 = *(_OWORD *)v39;
  *(_BYTE *)(v38 + 16) = v40;
  sub_23BEA0F64(v41, v42, v43);
  *(_QWORD *)(v38 + 24) = *(_QWORD *)(v39 + 24);
  swift_bridgeObjectRelease();
LABEL_39:
  *(_OWORD *)((v38 + 39) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v39 + 39) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t sub_23BFC433C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v17;
  unint64_t v18;

  v6 = sub_23BFF85F0();
  if (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) <= 8uLL)
    v7 = 8;
  else
    v7 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(_DWORD *)(v8 + 84);
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = *(_DWORD *)(v8 + 84);
  if (!a2)
    return 0;
  v11 = *(unsigned __int8 *)(v8 + 80);
  v12 = *(_QWORD *)(v8 + 64) + 7;
  if (v10 < a2)
  {
    if (((((((((((v12 + (((v7 & 0xFFFFFFFFFFFFFFF8) + v11 + 64) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8)
             + 39) & 0xFFFFFFFFFFFFFFF8)
           + 39) & 0xFFFFFFFFFFFFFFF8)
         + 16) & 0xFFFFFFF8) != 0)
      v13 = 2;
    else
      v13 = a2 - v10 + 1;
    if (v13 >= 0x10000)
      v14 = 4;
    else
      v14 = 2;
    if (v13 < 0x100)
      v14 = 1;
    if (v13 >= 2)
      v15 = v14;
    else
      v15 = 0;
    __asm { BR              X17 }
  }
  v17 = (((a1 + v7 + 8) & 0xFFFFFFFFFFFFFFF8) + v11 + 56) & ~v11;
  if (v9 >= 0x7FFFFFFF)
    return (*(uint64_t (**)(unint64_t))(v8 + 48))(v17);
  v18 = *(_QWORD *)((((((((v12 + v17) & 0xFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFF8);
  if (v18 >= 0xFFFFFFFF)
    LODWORD(v18) = -1;
  return (v18 + 1);
}

void sub_23BFC44F0(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;

  v8 = sub_23BFF85F0();
  v9 = 8;
  if (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) > 8uLL)
    v9 = *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64);
  v10 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v10 + 84) <= 0x7FFFFFFFu)
    v11 = 0x7FFFFFFF;
  else
    v11 = *(_DWORD *)(v10 + 84);
  if (v11 >= a3)
  {
    v14 = 0;
    if (a2 <= v11)
      goto LABEL_19;
  }
  else
  {
    if (((((((((*(_DWORD *)(v10 + 64)
               + 7
               + (((v9 & 0xFFFFFFF8) + *(unsigned __int8 *)(v10 + 80) + 64) & ~*(unsigned __int8 *)(v10 + 80))) & 0xFFFFFFF8)
             + 39) & 0xFFFFFFF8)
           + 39) & 0xFFFFFFF8)
         + 39) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v12 = a3 - v11 + 1;
    else
      v12 = 2;
    if (v12 >= 0x10000)
      v13 = 4;
    else
      v13 = 2;
    if (v12 < 0x100)
      v13 = 1;
    if (v12 >= 2)
      v14 = v13;
    else
      v14 = 0;
    if (a2 <= v11)
LABEL_19:
      __asm { BR              X15 }
  }
  if (((((((((*(_DWORD *)(v10 + 64)
             + 7
             + (((v9 & 0xFFFFFFF8) + *(unsigned __int8 *)(v10 + 80) + 64) & ~*(unsigned __int8 *)(v10 + 80))) & 0xFFFFFFF8)
           + 39) & 0xFFFFFFF8)
         + 39) & 0xFFFFFFF8)
       + 39) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v15 = ~v11 + a2;
    bzero(a1, ((((((((*(_QWORD *)(v10 + 64)+ 7+ (((v9 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v10 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))) & 0xFFFFFFFFFFFFFFF8)+ 39) & 0xFFFFFFFFFFFFFFF8)+ 39) & 0xFFFFFFFFFFFFFFF8)+ 39) & 0xFFFFFFFFFFFFFFF8)+ 16);
    *a1 = v15;
  }
  __asm { BR              X10 }
}

void sub_23BFC463C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x23BFC46E0);
}

void sub_23BFC4644()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = 0;
  if (v0)
    JUMPOUT(0x23BFC464CLL);
  JUMPOUT(0x23BFC46E0);
}

void sub_23BFC46B8()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x23BFC46E0);
}

void sub_23BFC46C0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x23BFC46E0);
}

uint64_t sub_23BFC46C8@<X0>(unsigned int a1@<W2>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_WORD *)(v7 + v8) = 0;
  if (!(_DWORD)v6)
    JUMPOUT(0x23BFC46E0);
  if (a1 < 0x7FFFFFFF)
  {
    if ((v6 & 0x80000000) == 0)
      JUMPOUT(0x23BFC46DCLL);
    JUMPOUT(0x23BFC46D4);
  }
  return (*(uint64_t (**)(unint64_t, uint64_t))(a2 + 56))((((v7 + v3 + 8) & 0xFFFFFFFFFFFFFFF8) + v4 + 56) & v5, v6);
}

uint64_t type metadata accessor for StandardVerticalStackView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StandardVerticalStackView);
}

unint64_t sub_23BFC4708()
{
  unint64_t result;

  result = qword_256AE82A8;
  if (!qword_256AE82A8)
  {
    result = MEMORY[0x242615198](&unk_23C007340, &type metadata for StandardVerticalStackViewLayout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE82A8);
  }
  return result;
}

unint64_t sub_23BFC4750()
{
  unint64_t result;

  result = qword_256AE82B0;
  if (!qword_256AE82B0)
  {
    result = MEMORY[0x242615198](&unk_23C0072B0, &type metadata for StandardVerticalStackViewLayout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE82B0);
  }
  return result;
}

unint64_t sub_23BFC4798()
{
  unint64_t result;

  result = qword_256AE82B8;
  if (!qword_256AE82B8)
  {
    result = MEMORY[0x242615198](&unk_23C0072D8, &type metadata for StandardVerticalStackViewLayout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE82B8);
  }
  return result;
}

uint64_t sub_23BFC47DC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23BFC4810(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = (int *)type metadata accessor for StandardVerticalStackView(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *(unsigned __int8 *)(*((_QWORD *)v6 - 1) + 80);
  v8 = (v7 + 32) & ~v7;
  v9 = v4 + v8;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE3728);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v10 = sub_23BFF85F0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v4 + v8, v10);
  }
  else
  {
    swift_release();
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v9 + v6[10], v5);
  v11 = v9 + v6[11];
  if (*(_QWORD *)(v11 + 24))
  {
    sub_23BEA0F64(*(_QWORD *)v11, *(_QWORD *)(v11 + 8), *(_BYTE *)(v11 + 16));
    swift_bridgeObjectRelease();
  }
  v12 = v9 + v6[12];
  if (*(_QWORD *)(v12 + 24))
  {
    sub_23BEA0F64(*(_QWORD *)v12, *(_QWORD *)(v12 + 8), *(_BYTE *)(v12 + 16));
    swift_bridgeObjectRelease();
  }
  v13 = v9 + v6[13];
  if (*(_QWORD *)(v13 + 24))
  {
    sub_23BEA0F64(*(_QWORD *)v13, *(_QWORD *)(v13 + 8), *(_BYTE *)(v13 + 16));
    swift_bridgeObjectRelease();
  }
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23BFC495C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = type metadata accessor for StandardVerticalStackView(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80);
  return (*(uint64_t (**)(void))(v4 + *(int *)(v5 + 56) + ((v6 + 32) & ~v6)))();
}

uint64_t sub_23BFC49A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_23BFC1BCC(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_23BFC49B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_23BFC1FCC(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_23BFC49BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_23BFC2838(v1[4], v1[2], v1[3], a1);
}

unint64_t sub_23BFC49D0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_256AE82E8;
  if (!qword_256AE82E8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE82C8);
    v2 = sub_23BFC4AF0(&qword_256AE82F0, &qword_256AE82E0, (uint64_t (*)(void))sub_23BFC4A4C);
    result = MEMORY[0x242615198](MEMORY[0x24BDF5578], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_256AE82E8);
  }
  return result;
}

unint64_t sub_23BFC4A4C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AE82F8;
  if (!qword_256AE82F8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE82D8);
    v2[0] = sub_23BEA1F34(&qword_256AE3598, &qword_256AE35A0, MEMORY[0x24BDF1F80], MEMORY[0x24BDEDB80]);
    v2[1] = sub_23BEA1F94(&qword_256AE5600, &qword_256AE5608, MEMORY[0x24BDF1028]);
    result = MEMORY[0x242615198](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AE82F8);
  }
  return result;
}

uint64_t sub_23BFC4AF0(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t result;
  uint64_t v6;
  _QWORD v7[2];

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v7[0] = a3();
    v7[1] = sub_23BEA1F94(&qword_256AE35A8, &qword_256AE35B0, MEMORY[0x24BDF1028]);
    result = MEMORY[0x242615198](MEMORY[0x24BDED308], v6, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23BFC4B74()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AE8308;
  if (!qword_256AE8308)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE8310);
    v2[0] = sub_23BF059E0();
    v2[1] = MEMORY[0x24BDEDB80];
    result = MEMORY[0x242615198](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AE8308);
  }
  return result;
}

uint64_t sub_23BFC4BE8(uint64_t result)
{
  *(_BYTE *)(result + 128) = 0;
  return result;
}

unint64_t sub_23BFC4BF0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_256AE8320;
  if (!qword_256AE8320)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE82C0);
    v2 = sub_23BEA1F34((unint64_t *)&qword_256AE50E0, &qword_256AE5090, MEMORY[0x24BDF4610], MEMORY[0x24BDEDBB8]);
    result = MEMORY[0x242615198](MEMORY[0x24BDF5578], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_256AE8320);
  }
  return result;
}

double sub_23BFC4C74(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 128) = 1;
  return result;
}

uint64_t sub_23BFC4C94(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E656D6E67696C61 && a2 == 0xE900000000000074;
  if (v2 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000023C01E950 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000023C01EFF0 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x800000023C01F4E0 || (sub_23BFF9964() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6E694C656C746974 && a2 == 0xEE0074696D694C65)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_23BFF9964();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_23BFC4ECC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];
  _QWORD v14[2];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  sub_23BFF862C();
  sub_23BFF862C();
  sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE82C0);
  swift_getTupleTypeMetadata2();
  v0 = sub_23BFF9220();
  v1 = MEMORY[0x24BDF5428];
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v0);
  v15 = sub_23BFF9058();
  v16 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3528);
  v17 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE82C8);
  v18 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE82D0);
  v19 = v18;
  swift_getTupleTypeMetadata();
  v2 = sub_23BFF9220();
  MEMORY[0x242615198](v1, v2);
  v3 = sub_23BFF90AC();
  v4 = sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3538);
  v5 = sub_23BFF862C();
  v14[0] = MEMORY[0x242615198](MEMORY[0x24BDF4700], v3);
  v14[1] = MEMORY[0x24BDEBEE0];
  v6 = MEMORY[0x24BDED308];
  v13[0] = MEMORY[0x242615198](MEMORY[0x24BDED308], v4, v14);
  v13[1] = sub_23BEA1F94(&qword_256AE3540, &qword_256AE3538, MEMORY[0x24BDEFAD8]);
  MEMORY[0x242615198](v6, v5, v13);
  v7 = sub_23BFF9040();
  v8 = sub_23BFF8680();
  v9 = (uint64_t (*)(uint64_t))MEMORY[0x24BDED868];
  v10 = MEMORY[0x242615198](MEMORY[0x24BDF43B0], v7);
  v11 = sub_23BEA1BB8(&qword_256AE3558, v9, MEMORY[0x24BDED858]);
  v15 = v7;
  v16 = v8;
  v17 = v10;
  v18 = v11;
  return swift_getOpaqueTypeConformance2();
}

uint64_t dispatch thunk of static CanvasSizeClassProtocol.default.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of CanvasSizeClassProtocol.isCompact.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of CanvasSizeClassProtocol.init(canvasWidth:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of CanvasSizeClassProtocol.shouldOffsetForCarousel(containerSize:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

void sub_23BFC5138()
{
  type metadata accessor for FullWidthStageView();
}

uint64_t sub_23BFC5228(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v8 = v1 + a1[34];
  *(_QWORD *)v8 = swift_getKeyPath();
  *(_QWORD *)(v8 + 8) = 0;
  *(_BYTE *)(v8 + 16) = 0;
  v9 = v1 + a1[35];
  type metadata accessor for CGSize(0);
  *(_QWORD *)(v6 - 104) = 0;
  *(_QWORD *)(v6 - 96) = 0;
  sub_23BFF8FEC();
  *(_OWORD *)v9 = v31;
  *(_QWORD *)(v9 + 16) = v32;
  *(_OWORD *)(v1 + 160) = v43;
  *(_OWORD *)(v1 + 176) = v44;
  *(_OWORD *)(v1 + 192) = v45;
  *(_QWORD *)(v1 + 208) = v46;
  *(_OWORD *)(v1 + 96) = v39;
  *(_OWORD *)(v1 + 112) = v40;
  *(_OWORD *)(v1 + 128) = v41;
  *(_OWORD *)(v1 + 144) = v42;
  *(_OWORD *)(v1 + 32) = v35;
  *(_OWORD *)(v1 + 48) = v36;
  *(_OWORD *)(v1 + 64) = v37;
  *(_OWORD *)(v1 + 80) = v38;
  *(_OWORD *)v1 = v33;
  *(_OWORD *)(v1 + 16) = v34;
  *(_BYTE *)(v1 + 216) = v5;
  *(_QWORD *)(v1 + 224) = v20;
  *(_QWORD *)(v1 + 232) = v21;
  *(_QWORD *)(v1 + 240) = v22;
  *(_QWORD *)(v1 + 248) = v23;
  *(_QWORD *)(v1 + 256) = v25;
  *(_QWORD *)(v1 + 264) = v26;
  *(_OWORD *)(v1 + 272) = v17;
  *(_OWORD *)(v1 + 288) = v18;
  *(_QWORD *)(v1 + 304) = v2;
  *(_QWORD *)(v1 + 312) = v19;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(v1 + a1[29], v24, v4);
  v10 = v1 + a1[30];
  v11 = sub_23BFF96A0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10, v27, v11);
  v12 = v1 + a1[31];
  v13 = sub_23BFF96A0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v12, v28, v13);
  v14 = v1 + a1[32];
  v15 = sub_23BFF96A0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v14, v30, v15);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(v1 + a1[33], v29, v3);
}

double static FullWidthStageViewLayout.default.getter@<D0>(uint64_t a1@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  double result;
  __int128 v8;

  if (qword_256AE33B8 != -1)
    swift_once();
  v2 = unk_256AE83D8;
  *(_OWORD *)(a1 + 160) = xmmword_256AE83C8;
  *(_OWORD *)(a1 + 176) = v2;
  *(_OWORD *)(a1 + 192) = xmmword_256AE83E8;
  *(_QWORD *)(a1 + 208) = qword_256AE83F8;
  v3 = *(_OWORD *)&qword_256AE8398;
  *(_OWORD *)(a1 + 96) = xmmword_256AE8388;
  *(_OWORD *)(a1 + 112) = v3;
  v4 = unk_256AE83B8;
  *(_OWORD *)(a1 + 128) = xmmword_256AE83A8;
  *(_OWORD *)(a1 + 144) = v4;
  v5 = *(_OWORD *)&qword_256AE8358;
  *(_OWORD *)(a1 + 32) = xmmword_256AE8348;
  *(_OWORD *)(a1 + 48) = v5;
  v6 = unk_256AE8378;
  *(_OWORD *)(a1 + 64) = xmmword_256AE8368;
  *(_OWORD *)(a1 + 80) = v6;
  result = *(double *)&xmmword_256AE8328;
  v8 = xmmword_256AE8338;
  *(_OWORD *)a1 = xmmword_256AE8328;
  *(_OWORD *)(a1 + 16) = v8;
  return result;
}

__n128 FullWidthStageViewLayout.titlePadding.getter@<Q0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)v1;
  v3 = *(_OWORD *)(v1 + 16);
  *a1 = *(_OWORD *)v1;
  a1[1] = v3;
  return result;
}

__n128 FullWidthStageViewLayout.subtitlePadding.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 32);
  v3 = *(_OWORD *)(v1 + 48);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 FullWidthStageViewLayout.captionPadding.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 64);
  v3 = *(_OWORD *)(v1 + 80);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t FullWidthStageViewLayout.titleLineLimit.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 96);
}

uint64_t FullWidthStageViewLayout.subtitleLineLimit.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 104);
}

uint64_t FullWidthStageViewLayout.captionLineLimit.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 112);
}

double FullWidthStageViewLayout.bottomPadding.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 120);
}

double FullWidthStageViewLayout.leadingPadding.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 128);
}

double FullWidthStageViewLayout.topPadding.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 136);
}

double FullWidthStageViewLayout.actionButtonMaxWidth.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 144);
}

__n128 FullWidthStageViewLayout.primaryButtonPadding.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 152);
  v3 = *(_OWORD *)(v1 + 168);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 FullWidthStageViewLayout.secondaryButtonPadding.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 184);
  v3 = *(_OWORD *)(v1 + 200);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 FullWidthStageViewLayout.init(titlePadding:subtitlePadding:captionPadding:titleLineLimit:subtitleLineLimit:captionLineLimit:bottomPadding:leadingPadding:topPadding:actionButtonMaxWidth:primaryButtonPadding:secondaryButtonPadding:)@<Q0>(_OWORD *a1@<X0>, _OWORD *a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _OWORD *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, double a12@<D2>, double a13@<D3>)
{
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __n128 result;
  __int128 v18;

  v13 = a1[1];
  *(_OWORD *)a9 = *a1;
  *(_OWORD *)(a9 + 16) = v13;
  v14 = a2[1];
  *(_OWORD *)(a9 + 32) = *a2;
  *(_OWORD *)(a9 + 48) = v14;
  v15 = a3[1];
  *(_OWORD *)(a9 + 64) = *a3;
  *(_OWORD *)(a9 + 80) = v15;
  *(_QWORD *)(a9 + 96) = a4;
  *(_QWORD *)(a9 + 104) = a5;
  *(_QWORD *)(a9 + 112) = a6;
  *(double *)(a9 + 120) = a10;
  *(double *)(a9 + 128) = a11;
  *(double *)(a9 + 136) = a12;
  *(double *)(a9 + 144) = a13;
  v16 = a7[1];
  *(_OWORD *)(a9 + 152) = *a7;
  *(_OWORD *)(a9 + 168) = v16;
  result = *(__n128 *)a8;
  v18 = *(_OWORD *)(a8 + 16);
  *(_OWORD *)(a9 + 184) = *(_OWORD *)a8;
  *(_OWORD *)(a9 + 200) = v18;
  return result;
}

uint64_t sub_23BFC5520(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23BFC555C + 4 * aM[a1]))(0x646150656C746974, 0xEC000000676E6964);
}

uint64_t sub_23BFC555C()
{
  return 0x656C746974627573;
}

uint64_t sub_23BFC5580()
{
  return 0x506E6F6974706163;
}

uint64_t sub_23BFC5630()
{
  return 0x6964646150706F74;
}

unint64_t sub_23BFC564C()
{
  return 0xD000000000000014;
}

void sub_23BFC5674()
{
  JUMPOUT(0x23BFC5688);
}

uint64_t sub_23BFC5694()
{
  unsigned __int8 *v0;

  return sub_23BFC5520(*v0);
}

uint64_t sub_23BFC569C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BFCF714(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BFC56C0()
{
  sub_23BFCCA74();
  return sub_23BFF9A30();
}

uint64_t sub_23BFC56E8()
{
  sub_23BFCCA74();
  return sub_23BFF9A3C();
}

double sub_23BFC5710()
{
  double result;

  result = 0.0;
  xmmword_256AE8338 = 0u;
  xmmword_256AE8348 = 0u;
  xmmword_256AE8328 = 0u;
  qword_256AE8358 = 0x4014000000000000;
  unk_256AE8360 = 0u;
  *(__int128 *)((char *)&xmmword_256AE8368 + 8) = 0u;
  qword_256AE8380 = 0;
  xmmword_256AE8388 = (__int128)vdupq_n_s64(3uLL);
  qword_256AE8398 = 1;
  unk_256AE83A0 = xmmword_23C007890;
  *(__int128 *)((char *)&xmmword_256AE83A8 + 8) = 0u;
  unk_256AE83C0 = 0u;
  *(__int128 *)((char *)&xmmword_256AE83C8 + 8) = 0u;
  unk_256AE83E0 = 0u;
  *(__int128 *)((char *)&xmmword_256AE83E8 + 8) = 0u;
  return result;
}

uint64_t FullWidthStageViewLayout.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  char v49;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE8400);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = *v1;
  v8 = *((_QWORD *)v1 + 2);
  v9 = *((_QWORD *)v1 + 3);
  v10 = *((_QWORD *)v1 + 4);
  v43 = *((_QWORD *)v1 + 5);
  v44 = v10;
  v11 = *((_QWORD *)v1 + 6);
  v41 = *((_QWORD *)v1 + 7);
  v42 = v11;
  v12 = *((_QWORD *)v1 + 8);
  v39 = *((_QWORD *)v1 + 9);
  v40 = v12;
  v34 = *((_QWORD *)v1 + 10);
  v33 = *((_QWORD *)v1 + 11);
  v38 = *((_QWORD *)v1 + 12);
  v37 = *((_QWORD *)v1 + 13);
  v32 = *((_QWORD *)v1 + 15);
  v31 = *((_QWORD *)v1 + 16);
  v30 = *((_QWORD *)v1 + 17);
  v29 = *((_QWORD *)v1 + 18);
  v36 = *((_QWORD *)v1 + 19);
  v13 = *((_QWORD *)v1 + 21);
  v35 = *((_QWORD *)v1 + 20);
  v14 = *((_QWORD *)v1 + 22);
  v15 = *((_QWORD *)v1 + 23);
  v17 = *((_QWORD *)v1 + 24);
  v16 = *((_QWORD *)v1 + 25);
  v18 = *((_QWORD *)v1 + 26);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BFCCA74();
  sub_23BFF9A18();
  v46 = v45;
  v47 = v8;
  v48 = v9;
  v49 = 0;
  sub_23BF3CBE0();
  sub_23BFF9940();
  if (v2)
  {
    v19 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
  }
  else
  {
    v21 = v39;
    v20 = v40;
    *(_QWORD *)&v45 = v5;
    v27 = v14;
    v28 = v13;
    v22 = v35;
    v23 = v36;
    v25 = v18;
    v26 = v16;
    *(_QWORD *)&v46 = v44;
    *((_QWORD *)&v46 + 1) = v43;
    v47 = v42;
    v48 = v41;
    v49 = 1;
    sub_23BFF9940();
    *(_QWORD *)&v46 = v20;
    *((_QWORD *)&v46 + 1) = v21;
    v47 = v34;
    v48 = v33;
    v49 = 2;
    sub_23BFF9940();
    LOBYTE(v46) = 3;
    sub_23BFF9934();
    LOBYTE(v46) = 4;
    sub_23BFF9934();
    LOBYTE(v46) = 5;
    sub_23BFF9934();
    *(_QWORD *)&v46 = v32;
    v49 = 6;
    sub_23BEBFC1C();
    sub_23BFF9940();
    *(_QWORD *)&v46 = v31;
    v49 = 7;
    sub_23BFF9940();
    *(_QWORD *)&v46 = v30;
    v49 = 8;
    sub_23BFF9940();
    *(_QWORD *)&v46 = v29;
    v49 = 9;
    sub_23BFF9940();
    *(_QWORD *)&v46 = v23;
    *((_QWORD *)&v46 + 1) = v22;
    v47 = v28;
    v48 = v27;
    v49 = 10;
    sub_23BFF9940();
    *(_QWORD *)&v46 = v15;
    *((_QWORD *)&v46 + 1) = v17;
    v47 = v26;
    v48 = v25;
    v49 = 11;
    sub_23BFF9940();
    v19 = *(uint64_t (**)(char *, uint64_t))(v45 + 8);
  }
  return v19(v7, v4);
}

uint64_t FullWidthStageViewLayout.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  char v45;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE8410);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BFCCA74();
  sub_23BFF9A0C();
  if (!v2)
  {
    v45 = 0;
    sub_23BF3CC68();
    sub_23BFF98C8();
    v9 = v43;
    v10 = v44;
    v45 = 1;
    sub_23BFF98C8();
    v11 = v43;
    v12 = v44;
    v45 = 2;
    sub_23BFF98C8();
    v39 = *((_QWORD *)&v12 + 1);
    v40 = v12;
    v41 = *((_QWORD *)&v11 + 1);
    v42 = v11;
    v13 = v43;
    v14 = v44;
    LOBYTE(v43) = 3;
    v15 = sub_23BFF98BC();
    v35 = *((_QWORD *)&v14 + 1);
    v36 = v14;
    v37 = *((_QWORD *)&v13 + 1);
    v38 = v13;
    LOBYTE(v43) = 4;
    v34 = sub_23BFF98BC();
    LOBYTE(v43) = 5;
    v32 = sub_23BFF98BC();
    v45 = 6;
    v33 = sub_23BEC0384();
    sub_23BFF98C8();
    v16 = v43;
    v45 = 7;
    sub_23BFF98C8();
    v17 = v43;
    v45 = 8;
    sub_23BFF98C8();
    v18 = v43;
    v45 = 9;
    sub_23BFF98C8();
    v19 = v43;
    v45 = 10;
    sub_23BFF98C8();
    v31 = *((_QWORD *)&v43 + 1);
    v33 = v43;
    v29 = *((_QWORD *)&v44 + 1);
    v30 = v44;
    v45 = 11;
    sub_23BFF98C8();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(_OWORD *)a2 = v9;
    *(_OWORD *)(a2 + 16) = v10;
    v21 = v41;
    *(_QWORD *)(a2 + 32) = v42;
    *(_QWORD *)(a2 + 40) = v21;
    v22 = v39;
    *(_QWORD *)(a2 + 48) = v40;
    *(_QWORD *)(a2 + 56) = v22;
    v23 = v37;
    *(_QWORD *)(a2 + 64) = v38;
    *(_QWORD *)(a2 + 72) = v23;
    v24 = v35;
    *(_QWORD *)(a2 + 80) = v36;
    *(_QWORD *)(a2 + 88) = v24;
    v25 = v34;
    *(_QWORD *)(a2 + 96) = v15;
    *(_QWORD *)(a2 + 104) = v25;
    *(_QWORD *)(a2 + 112) = v32;
    *(_QWORD *)(a2 + 120) = v16;
    *(_QWORD *)(a2 + 128) = v17;
    *(_QWORD *)(a2 + 136) = v18;
    *(_QWORD *)(a2 + 144) = v19;
    v26 = v31;
    *(_QWORD *)(a2 + 152) = v33;
    *(_QWORD *)(a2 + 160) = v26;
    v27 = v29;
    *(_QWORD *)(a2 + 168) = v30;
    *(_QWORD *)(a2 + 176) = v27;
    v28 = v44;
    *(_OWORD *)(a2 + 184) = v43;
    *(_OWORD *)(a2 + 200) = v28;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_23BFC611C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FullWidthStageViewLayout.init(from:)(a1, a2);
}

uint64_t sub_23BFC6130(_QWORD *a1)
{
  return FullWidthStageViewLayout.encode(to:)(a1);
}

uint64_t FullWidthStageViewLayout.hash(into:)()
{
  sub_23BFF99F4();
  sub_23BFF99F4();
  sub_23BFF99F4();
  sub_23BFF99F4();
  sub_23BFF99F4();
  sub_23BFF99F4();
  sub_23BFF99F4();
  sub_23BFF99F4();
  sub_23BFF99F4();
  sub_23BFF99F4();
  sub_23BFF99F4();
  sub_23BFF99F4();
  sub_23BFF99DC();
  sub_23BFF99DC();
  sub_23BFF99DC();
  sub_23BFF99F4();
  sub_23BFF99F4();
  sub_23BFF99F4();
  sub_23BFF99F4();
  sub_23BFF99F4();
  sub_23BFF99F4();
  sub_23BFF99F4();
  sub_23BFF99F4();
  sub_23BFF99F4();
  sub_23BFF99F4();
  sub_23BFF99F4();
  return sub_23BFF99F4();
}

uint64_t FullWidthStageViewLayout.hashValue.getter()
{
  sub_23BFF99D0();
  FullWidthStageViewLayout.hash(into:)();
  return sub_23BFF9A00();
}

uint64_t sub_23BFC63B0()
{
  sub_23BFF99D0();
  FullWidthStageViewLayout.hash(into:)();
  return sub_23BFF9A00();
}

uint64_t sub_23BFC63F0()
{
  sub_23BFF99D0();
  FullWidthStageViewLayout.hash(into:)();
  return sub_23BFF9A00();
}

uint64_t sub_23BFC642C(uint64_t a1)
{
  uint64_t v2;
  __int128 v4;
  _QWORD v5[2];
  _QWORD v6[7];

  sub_23BFF88A8();
  v4 = *(_OWORD *)(a1 + 64);
  v6[1] = sub_23BFF96A0();
  v6[2] = MEMORY[0x24BDF4638];
  v6[3] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE84C0);
  v6[4] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE84C8);
  v6[5] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE84D0);
  v6[0] = v4;
  v5[0] = sub_23BFF96A0();
  v5[1] = MEMORY[0x242615198](MEMORY[0x24BDF5578], v5[0], v6);
  v6[6] = MEMORY[0x24261512C](255, v5, MEMORY[0x24BDF30F0], 0);
  swift_getTupleTypeMetadata();
  v2 = sub_23BFF9220();
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v2);
  return sub_23BFF90A0();
}

void sub_23BFC6580(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, __int128 a9, uint64_t a10)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[3];
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;

  v39 = a1;
  v40 = a6;
  v43 = a4;
  v51 = a8;
  v41 = a9;
  v46 = sub_23BFF96A0();
  v71 = a7;
  v48 = MEMORY[0x242615198](MEMORY[0x24BDF5578], v46, &v71);
  v62 = v46;
  v63 = v48;
  v58 = MEMORY[0x24261512C](0, &v62, MEMORY[0x24BDF30F0], 0);
  v49 = *(_QWORD *)(v58 - 8);
  MEMORY[0x24BDAC7A8](v58);
  v60 = (char *)v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v47 = (char *)v33 - v16;
  v17 = sub_23BFF8890();
  v44 = *(_QWORD *)(v17 - 8);
  v45 = v17;
  MEMORY[0x24BDAC7A8](v17);
  v42 = (char *)v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE84C8);
  MEMORY[0x24BDAC7A8](v50);
  v53 = (char *)v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v54 = (char *)v33 - v21;
  v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5608);
  MEMORY[0x24BDAC7A8](v36);
  v35 = (char *)v33 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5638);
  MEMORY[0x24BDAC7A8](v23);
  v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE84E8);
  MEMORY[0x24BDAC7A8](v34);
  v33[2] = (char *)v33 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE84F0);
  MEMORY[0x24BDAC7A8](v38);
  v37 = (char *)v33 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE84C0);
  MEMORY[0x24BDAC7A8](v56);
  v59 = (char *)v33 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v27);
  v61 = (char *)v33 - v28;
  v29 = sub_23BFF96A0();
  v57 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v52 = (char *)v33 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v31);
  v55 = (char *)v33 - v32;
  v62 = v39;
  v63 = a2;
  v64 = a3;
  v65 = v43;
  v66 = a5;
  v67 = v40;
  v68 = a7;
  v69 = v41;
  v70 = a10;
  type metadata accessor for FullWidthStageView();
}

uint64_t sub_23BFC6904(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t KeyPath;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(uint64_t, uint64_t);
  void (*v79)(_QWORD, uint64_t);

  *(_QWORD *)(v1 + 80) = a1;
  v7 = (uint64_t)v5 + *(int *)(a1 + 124);
  v8 = MEMORY[0x24BDF5578];
  *(_QWORD *)(v1 + 96) = v2;
  *(_QWORD *)(v1 + 112) = MEMORY[0x242615198](v8, v2, v6 + 16);
  sub_23BEA72EC(v7, v2, v4);
  v9 = v5[36];
  v10 = v5[37];
  v11 = v5[38];
  v12 = v5[39];
  v13 = *MEMORY[0x24BDF1D90];
  v14 = sub_23BFF8C44();
  v15 = *(_QWORD *)(v14 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 104))(v3, v13, v14);
  v16 = v3;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(v3, 0, 1, v14);
  KeyPath = swift_getKeyPath();
  v18 = *(uint64_t **)(v1 + 32);
  sub_23BE9F190(v3, (uint64_t)v18 + *(int *)(*(_QWORD *)(v1 + 40) + 28), &qword_256AE5638);
  *v18 = KeyPath;
  v19 = *(uint64_t **)(v1 + 16);
  sub_23BE9F190((uint64_t)v18, (uint64_t)v19 + *(int *)(*(_QWORD *)(v1 + 24) + 36), &qword_256AE5608);
  *v19 = v9;
  v19[1] = v10;
  v19[2] = v11;
  v19[3] = v12;
  sub_23BEA1DC0(v9, v10, v11, v12);
  sub_23BEA1DC0(v9, v10, v11, v12);
  sub_23BE9F3A0((uint64_t)v18, &qword_256AE5608);
  sub_23BE9F3A0(v16, &qword_256AE5638);
  sub_23BEBF0A4(v9, v10, v11, v12);
  v20 = v5[14];
  v21 = swift_getKeyPath();
  v22 = *(_QWORD *)(v1 + 48);
  sub_23BE9F190((uint64_t)v19, v22, &qword_256AE84E8);
  v23 = v22 + *(int *)(*(_QWORD *)(v1 + 56) + 36);
  *(_QWORD *)v23 = v21;
  *(_QWORD *)(v23 + 8) = v20;
  *(_BYTE *)(v23 + 16) = 0;
  sub_23BE9F3A0((uint64_t)v19, &qword_256AE84E8);
  v24 = v5[8];
  v25 = v5[9];
  v26 = v5[10];
  v27 = v5[11];
  LOBYTE(v21) = sub_23BFF8B60();
  v28 = *(_QWORD *)(v1 + 240);
  sub_23BE9F190(v22, v28, &qword_256AE84F0);
  v29 = v28 + *(int *)(*(_QWORD *)(v1 + 216) + 36);
  *(_BYTE *)v29 = v21;
  *(_QWORD *)(v29 + 8) = v26;
  *(_QWORD *)(v29 + 16) = v25;
  *(_QWORD *)(v29 + 24) = v24;
  *(_QWORD *)(v29 + 32) = v27;
  *(_BYTE *)(v29 + 40) = 0;
  sub_23BE9F3A0(v22, &qword_256AE84F0);
  sub_23BEC42E0(v28, *(_QWORD *)(v1 + 256), &qword_256AE84C0);
  v30 = v5[28];
  v31 = v5[29];
  v32 = v5[30];
  v33 = v5[31];
  *(_QWORD *)(v1 + 72) = v5[12];
  v34 = swift_getKeyPath();
  v35 = v5[1];
  *(_QWORD *)(v1 + 64) = *v5;
  v36 = v5[2];
  v37 = v5[3];
  sub_23BEA1DC0(v30, v31, v32, v33);
  v38 = sub_23BFF8B60();
  *(_QWORD *)(v6 - 200) = v30;
  *(_QWORD *)(v6 - 192) = v31;
  *(_QWORD *)(v6 - 184) = v32;
  *(_QWORD *)(v6 - 176) = v33;
  v39 = *(_QWORD *)(v1 + 72);
  *(_QWORD *)(v6 - 168) = v34;
  *(_QWORD *)(v6 - 160) = v39;
  *(_BYTE *)(v6 - 152) = 0;
  *(_BYTE *)(v6 - 144) = v38;
  *(_QWORD *)(v6 - 136) = v36;
  *(_QWORD *)(v6 - 128) = v35;
  *(_QWORD *)(v6 - 120) = *(_QWORD *)(v1 + 64);
  *(_QWORD *)(v6 - 112) = v37;
  *(_BYTE *)(v6 - 104) = 0;
  v40 = *(_QWORD *)(v1 + 104);
  sub_23BFF8884();
  *(_QWORD *)(v1 + 64) = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE84D0);
  *(_QWORD *)(v1 + 72) = sub_23BFCF4A0();
  v41 = *(_QWORD *)(v1 + 192);
  sub_23BFF8E3C();
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 + 120) + 8))(v40, *(_QWORD *)(v1 + 128));
  sub_23BEBF0A4(*(_QWORD *)(v6 - 200), *(_QWORD *)(v6 - 192), *(_QWORD *)(v6 - 184), *(_QWORD *)(v6 - 176));
  swift_release();
  v42 = v41;
  v43 = v41;
  v44 = *(_QWORD *)(v1 + 200);
  sub_23BEC42E0(v42, v44, &qword_256AE84C8);
  v45 = v5[32];
  v46 = v5[33];
  *(_QWORD *)(v1 + 24) = v46;
  *(_QWORD *)(v1 + 32) = v45;
  v47 = v5[34];
  v48 = v5[35];
  *(_QWORD *)(v1 + 8) = v48;
  *(_QWORD *)(v1 + 16) = v47;
  *(_QWORD *)(v1 + 128) = v5[13];
  v49 = swift_getKeyPath();
  *(_QWORD *)(v1 + 120) = v5[4];
  *(_QWORD *)(v1 + 104) = v5[5];
  v50 = v5[6];
  *(_QWORD *)(v1 + 40) = v49;
  *(_QWORD *)(v1 + 48) = v50;
  *(_QWORD *)(v1 + 56) = v5[7];
  sub_23BEA1DC0(v45, v46, v47, v48);
  *(_DWORD *)(v1 + 4) = sub_23BFF8B60();
  sub_23BFF8B24();
  sub_23BFF91CC();
  v51 = swift_checkMetadataState();
  v52 = *(_QWORD *)(v1 + 248);
  v53 = *(_QWORD *)(v1 + 152);
  sub_23BFF8E48();
  *(_QWORD *)(v6 - 200) = v51;
  *(_QWORD *)(v6 - 192) = v53;
  *(_QWORD *)(v1 + 136) = swift_getOpaqueTypeConformance2();
  v54 = *(_QWORD *)(v1 + 144);
  v55 = *(_QWORD *)(v1 + 232);
  sub_23BEA72EC(v52, v55, v54);
  v56 = *(_QWORD *)(v1 + 160);
  v57 = *(void (**)(uint64_t, uint64_t))(v56 + 8);
  *(_QWORD *)(v1 + 152) = v57;
  v57(v52, v55);
  v58 = *(_QWORD *)(v1 + 184);
  v59 = *(_QWORD *)(v1 + 96);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v1 + 224) + 16))(v58, *(_QWORD *)(v1 + 208), v59);
  *(_QWORD *)(v1 + 360) = 0;
  *(_BYTE *)(v1 + 368) = 1;
  *(_QWORD *)(v6 - 248) = v58;
  *(_QWORD *)(v6 - 240) = v1 + 360;
  v60 = *(_QWORD *)(v1 + 240);
  sub_23BE9F190(*(_QWORD *)(v1 + 256), v60, &qword_256AE84C0);
  *(_QWORD *)(v6 - 232) = v60;
  v61 = v43;
  sub_23BE9F190(v44, v43, &qword_256AE84C8);
  v62 = *(_QWORD *)(v1 + 24);
  v63 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v6 - 200) = v63;
  *(_QWORD *)(v6 - 192) = v62;
  v64 = *(_QWORD *)(v1 + 8);
  v65 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v6 - 184) = v65;
  *(_QWORD *)(v6 - 176) = v64;
  v66 = *(_QWORD *)(v1 + 128);
  *(_QWORD *)(v6 - 168) = *(_QWORD *)(v1 + 40);
  *(_QWORD *)(v6 - 160) = v66;
  *(_BYTE *)(v6 - 152) = 0;
  *(_BYTE *)(v6 - 144) = *(_DWORD *)(v1 + 4);
  v67 = *(_QWORD *)(v1 + 104);
  *(_QWORD *)(v6 - 136) = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(v6 - 128) = v67;
  v68 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)(v6 - 120) = *(_QWORD *)(v1 + 120);
  *(_QWORD *)(v6 - 112) = v68;
  *(_BYTE *)(v6 - 104) = 0;
  *(_QWORD *)(v6 - 224) = v61;
  *(_QWORD *)(v6 - 216) = v6 - 200;
  v69 = *(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 16);
  v70 = *(_QWORD *)(v1 + 248);
  v71 = *(_QWORD *)(v1 + 232);
  v69(v70, v54, v71);
  *(_QWORD *)(v6 - 208) = v70;
  sub_23BEA1DC0(v63, v62, v65, v64);
  swift_retain();
  v72 = MEMORY[0x24BDF4638];
  *(_QWORD *)(v1 + 312) = v59;
  *(_QWORD *)(v1 + 320) = v72;
  v73 = *(_QWORD *)(v1 + 168);
  *(_QWORD *)(v1 + 328) = *(_QWORD *)(v1 + 216);
  *(_QWORD *)(v1 + 336) = v73;
  *(_QWORD *)(v1 + 344) = *(_QWORD *)(v1 + 64);
  *(_QWORD *)(v1 + 352) = v71;
  v74 = MEMORY[0x24BDF4610];
  *(_QWORD *)(v1 + 264) = *(_QWORD *)(v1 + 112);
  *(_QWORD *)(v1 + 272) = v74;
  *(_QWORD *)(v1 + 280) = sub_23BFCF524();
  v75 = sub_23BFCF62C();
  v76 = *(_QWORD *)(v1 + 72);
  *(_QWORD *)(v1 + 288) = v75;
  *(_QWORD *)(v1 + 296) = v76;
  *(_QWORD *)(v1 + 304) = *(_QWORD *)(v1 + 136);
  sub_23BF93EF0((uint64_t *)(v6 - 248), 6uLL, v1 + 312);
  v77 = v54;
  v78 = *(void (**)(uint64_t, uint64_t))(v1 + 152);
  v78(v77, v71);
  sub_23BEBF0A4(v63, v62, v65, v64);
  swift_release();
  sub_23BE9F3A0(*(_QWORD *)(v1 + 200), &qword_256AE84C8);
  sub_23BE9F3A0(*(_QWORD *)(v1 + 256), &qword_256AE84C0);
  v79 = *(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v1 + 224) + 8);
  v79(*(_QWORD *)(v1 + 208), v59);
  v78(*(_QWORD *)(v1 + 248), v71);
  sub_23BEBF0A4(*(_QWORD *)(v6 - 200), *(_QWORD *)(v6 - 192), *(_QWORD *)(v6 - 184), *(_QWORD *)(v6 - 176));
  swift_release();
  sub_23BE9F3A0(*(_QWORD *)(v1 + 192), &qword_256AE84C8);
  sub_23BE9F3A0(*(_QWORD *)(v1 + 240), &qword_256AE84C0);
  return ((uint64_t (*)(_QWORD, uint64_t))v79)(*(_QWORD *)(v1 + 184), v59);
}

uint64_t sub_23BFC6F28(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  __int128 v9;
  __int128 v10;
  _BYTE v12[16];
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v20 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE84C0);
  v21 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE84C8);
  v22 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE84D0);
  v3 = *(_QWORD *)(a1 + 24);
  sub_23BFF862C();
  v23 = sub_23BFF96A0();
  swift_getTupleTypeMetadata();
  v4 = sub_23BFF9220();
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v4);
  v5 = sub_23BFF90AC();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v12[-v7];
  v13 = *(_QWORD *)(a1 + 16);
  v14 = v3;
  v9 = *(_OWORD *)(a1 + 48);
  v15 = *(_OWORD *)(a1 + 32);
  v16 = v9;
  v10 = *(_OWORD *)(a1 + 80);
  v17 = *(_OWORD *)(a1 + 64);
  v18 = v10;
  v19 = v1;
  sub_23BFF889C();
  sub_23BFF90A0();
  MEMORY[0x242615198](MEMORY[0x24BDF4700], v5);
  sub_23BFF8E6C();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

void sub_23BFC70BC(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, __int128 a10, uint64_t a11)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t KeyPath;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _DWORD v71[2];
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;

  v86 = a8;
  v95 = a7;
  v94 = a6;
  v93 = a5;
  v90 = a4;
  v88 = a2;
  v102 = a9;
  v91 = a11;
  v89 = a10;
  v83 = a3;
  v85 = sub_23BFF96A0();
  v87 = *(_QWORD *)(v85 - 8);
  MEMORY[0x24BDAC7A8](v85);
  v84 = (char *)v71 - v12;
  v96 = sub_23BFF862C();
  v101 = sub_23BFF96A0();
  v98 = *(_QWORD *)(v101 - 8);
  MEMORY[0x24BDAC7A8](v101);
  v100 = (char *)v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v92 = (char *)v71 - v15;
  MEMORY[0x24BDAC7A8](v16);
  v99 = (char *)v71 - v17;
  v82 = sub_23BFF8890();
  v81 = *(_QWORD *)(v82 - 8);
  MEMORY[0x24BDAC7A8](v82);
  v80 = (char *)v71 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE84C8);
  MEMORY[0x24BDAC7A8](v97);
  v104 = (char *)v71 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v105 = (uint64_t)v71 - v21;
  v77 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5608);
  MEMORY[0x24BDAC7A8](v77);
  v76 = (uint64_t *)((char *)v71 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5638);
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)v71 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE84E8);
  MEMORY[0x24BDAC7A8](v75);
  v27 = (uint64_t *)((char *)v71 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  v79 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE84F0);
  MEMORY[0x24BDAC7A8](v79);
  v78 = (uint64_t)v71 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE84C0);
  MEMORY[0x24BDAC7A8](v103);
  v107 = (uint64_t)v71 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v30);
  v106 = (uint64_t)v71 - v31;
  v33 = a1[36];
  v32 = a1[37];
  v35 = a1[38];
  v34 = a1[39];
  v36 = *MEMORY[0x24BDF1D90];
  v37 = sub_23BFF8C44();
  v38 = *(_QWORD *)(v37 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 104))(v25, v36, v37);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v25, 0, 1, v37);
  KeyPath = swift_getKeyPath();
  v40 = v76;
  sub_23BE9F190((uint64_t)v25, (uint64_t)v76 + *(int *)(v77 + 28), &qword_256AE5638);
  *v40 = KeyPath;
  sub_23BE9F190((uint64_t)v40, (uint64_t)v27 + *(int *)(v75 + 36), &qword_256AE5608);
  *v27 = v33;
  v27[1] = v32;
  v27[2] = v35;
  v27[3] = v34;
  sub_23BEA1DC0(v33, v32, v35, v34);
  sub_23BEA1DC0(v33, v32, v35, v34);
  sub_23BE9F3A0((uint64_t)v40, &qword_256AE5608);
  sub_23BE9F3A0((uint64_t)v25, &qword_256AE5638);
  sub_23BEBF0A4(v33, v32, v35, v34);
  v41 = a1[14];
  v42 = swift_getKeyPath();
  v43 = v78;
  sub_23BE9F190((uint64_t)v27, v78, &qword_256AE84E8);
  v44 = v43 + *(int *)(v79 + 36);
  *(_QWORD *)v44 = v42;
  *(_QWORD *)(v44 + 8) = v41;
  *(_BYTE *)(v44 + 16) = 0;
  sub_23BE9F3A0((uint64_t)v27, &qword_256AE84E8);
  v45 = a1[8];
  v46 = a1[9];
  v47 = a1[10];
  v48 = a1[11];
  LOBYTE(v42) = sub_23BFF8B60();
  v49 = v107;
  sub_23BE9F190(v43, v107, &qword_256AE84F0);
  v50 = v49 + *(int *)(v103 + 36);
  *(_BYTE *)v50 = v42;
  *(_QWORD *)(v50 + 8) = v47;
  *(_QWORD *)(v50 + 16) = v46;
  *(_QWORD *)(v50 + 24) = v45;
  *(_QWORD *)(v50 + 32) = v48;
  *(_BYTE *)(v50 + 40) = 0;
  sub_23BE9F3A0(v43, &qword_256AE84F0);
  sub_23BEC42E0(v49, v106, &qword_256AE84C0);
  v51 = a1[28];
  v52 = a1[29];
  v53 = a1[30];
  v54 = a1[31];
  v79 = a1[12];
  v55 = swift_getKeyPath();
  v56 = *a1;
  v57 = a1[1];
  v59 = a1[2];
  v58 = a1[3];
  sub_23BEA1DC0(v51, v52, v53, v54);
  v60 = sub_23BFF8B60();
  v108 = v51;
  v109 = v52;
  v110 = v53;
  v111 = v54;
  v112 = v55;
  v113 = v79;
  LOBYTE(v114) = 0;
  LOBYTE(v115) = v60;
  *((_QWORD *)&v115 + 1) = v59;
  v116 = v57;
  v61 = v83;
  v117 = v56;
  v118 = v58;
  v62 = v86;
  v119 = 0;
  v63 = v80;
  sub_23BFF8884();
  v64 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE84D0);
  v65 = sub_23BFCF4A0();
  v66 = (uint64_t)v104;
  v78 = v64;
  v79 = v65;
  sub_23BFF8E3C();
  (*(void (**)(char *, uint64_t))(v81 + 8))(v63, v82);
  sub_23BEBF0A4(v108, v109, v110, v111);
  swift_release();
  sub_23BEC42E0(v66, v105, &qword_256AE84C8);
  v67 = a1[32];
  v68 = a1[33];
  v69 = a1[34];
  v70 = a1[35];
  v76 = (uint64_t *)a1[13];
  v77 = swift_getKeyPath();
  v75 = a1[4];
  v74 = a1[5];
  v72 = a1[6];
  v73 = a1[7];
  v80 = (char *)v67;
  v82 = v68;
  v81 = v69;
  sub_23BEA1DC0(v67, v68, v69, v70);
  v71[1] = sub_23BFF8B60();
  v108 = v88;
  v109 = v61;
  v110 = v90;
  v111 = v93;
  v112 = v94;
  v113 = v95;
  v114 = v62;
  v115 = v89;
  v116 = v91;
  type metadata accessor for FullWidthStageView();
}

uint64_t sub_23BFC7868(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v3, v4 + *(int *)(a1 + 120), v7);
  v9 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v3, 1, v6) == 1)
  {
    v6 = v7;
    v10 = *(_QWORD *)(v8 - 440);
    v11 = 1;
  }
  else
  {
    v12 = *(_QWORD *)(v8 - 440);
    sub_23BFF8EE4();
    v11 = 0;
    v2 = v9;
    v10 = v12;
  }
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v6);
  v13 = *(_QWORD *)(v8 - 408);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v10, v11, 1, v13);
  v14 = MEMORY[0x24BDECC60];
  *(_QWORD *)(v8 - 208) = v5;
  *(_QWORD *)(v8 - 200) = v14;
  *(_QWORD *)(v8 - 216) = MEMORY[0x242615198](MEMORY[0x24BDED308], v13, v8 - 208);
  v15 = *(_QWORD *)(v8 - 368);
  v16 = MEMORY[0x242615198](MEMORY[0x24BDF5578], v15, v8 - 216);
  v17 = *(_QWORD *)(v8 - 384);
  sub_23BEA72EC(v10, v15, v17);
  v18 = *(_QWORD *)(v8 - 392);
  v19 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
  *(_QWORD *)(v8 - 408) = v19;
  v19(v10, v15);
  v20 = *(_QWORD *)(v8 - 320);
  sub_23BE9F190(*(_QWORD *)(v8 - 328), v20, &qword_256AE84C0);
  *(_QWORD *)(v8 - 248) = v20;
  v21 = *(_QWORD *)(v8 - 344);
  sub_23BE9F190(*(_QWORD *)(v8 - 336), v21, &qword_256AE84C8);
  v22 = *(_QWORD *)(v8 - 552);
  v23 = *(_QWORD *)(v8 - 536);
  *(_QWORD *)(v8 - 192) = v22;
  *(_QWORD *)(v8 - 184) = v23;
  v24 = *(_QWORD *)(v8 - 544);
  *(_QWORD *)(v8 - 176) = v24;
  *(_QWORD *)(v8 - 168) = v1;
  v25 = *(_QWORD *)(v8 - 584);
  *(_QWORD *)(v8 - 160) = *(_QWORD *)(v8 - 576);
  *(_QWORD *)(v8 - 152) = v25;
  *(_BYTE *)(v8 - 144) = 0;
  *(_BYTE *)(v8 - 136) = *(_DWORD *)(v8 - 620);
  v26 = *(_QWORD *)(v8 - 600);
  *(_QWORD *)(v8 - 128) = *(_QWORD *)(v8 - 616);
  *(_QWORD *)(v8 - 120) = v26;
  v27 = *(_QWORD *)(v8 - 608);
  *(_QWORD *)(v8 - 112) = *(_QWORD *)(v8 - 592);
  *(_QWORD *)(v8 - 104) = v27;
  *(_BYTE *)(v8 - 96) = 0;
  *(_QWORD *)(v8 - 240) = v21;
  *(_QWORD *)(v8 - 232) = v8 - 192;
  v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16);
  v29 = *(_QWORD *)(v8 - 376);
  v28(v29, v17, v15);
  *(_QWORD *)(v8 - 224) = v29;
  sub_23BEA1DC0(v22, v23, v24, v1);
  swift_retain();
  *(_QWORD *)(v8 - 280) = *(_QWORD *)(v8 - 352);
  *(_QWORD *)(v8 - 272) = *(_QWORD *)(v8 - 400);
  *(_QWORD *)(v8 - 264) = *(_QWORD *)(v8 - 568);
  *(_QWORD *)(v8 - 256) = v15;
  *(_QWORD *)(v8 - 312) = sub_23BFCF524();
  *(_QWORD *)(v8 - 304) = sub_23BFCF62C();
  *(_QWORD *)(v8 - 296) = *(_QWORD *)(v8 - 560);
  *(_QWORD *)(v8 - 288) = v16;
  sub_23BF93EF0((uint64_t *)(v8 - 248), 4uLL, v8 - 280);
  v30 = *(void (**)(uint64_t, uint64_t))(v8 - 408);
  v30(v17, v15);
  sub_23BEBF0A4(v22, v23, v24, v1);
  swift_release();
  sub_23BE9F3A0(*(_QWORD *)(v8 - 336), &qword_256AE84C8);
  sub_23BE9F3A0(*(_QWORD *)(v8 - 328), &qword_256AE84C0);
  v30(v29, v15);
  sub_23BEBF0A4(*(_QWORD *)(v8 - 192), *(_QWORD *)(v8 - 184), *(_QWORD *)(v8 - 176), *(_QWORD *)(v8 - 168));
  swift_release();
  sub_23BE9F3A0(v21, &qword_256AE84C8);
  return sub_23BE9F3A0(*(_QWORD *)(v8 - 320), &qword_256AE84C0);
}

uint64_t sub_23BFC7BD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_23BFF889C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE84C0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE84C8);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE84D0);
  sub_23BFF96A0();
  sub_23BFF862C();
  swift_getTupleTypeMetadata();
  v0 = sub_23BFF9220();
  v1 = MEMORY[0x24BDF5428];
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v0);
  sub_23BFF90AC();
  sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE5160);
  sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3C28);
  sub_23BFF862C();
  swift_getTupleTypeMetadata2();
  v2 = sub_23BFF9220();
  MEMORY[0x242615198](v1, v2);
  return sub_23BFF90A0();
}

uint64_t sub_23BFC7D98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, __int128 a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD v83[2];
  uint64_t v84;
  char v85;
  _QWORD v86[2];
  _QWORD v87[2];
  _QWORD v88[2];
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;

  v65 = a8;
  v64 = a7;
  v61 = a6;
  v59 = a5;
  v57 = a4;
  v51 = a3;
  v54 = a2;
  v62 = a1;
  v70 = a9;
  v58 = a11;
  v56 = a10;
  v69 = sub_23BFF86BC();
  MEMORY[0x24BDAC7A8](v69);
  v68 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = sub_23BFF9184();
  v67 = *(_QWORD *)(v66 - 8);
  MEMORY[0x24BDAC7A8](v66);
  v63 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE84C0);
  v90 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE84C8);
  v91 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE84D0);
  sub_23BFF96A0();
  v92 = sub_23BFF862C();
  swift_getTupleTypeMetadata();
  v13 = sub_23BFF9220();
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v13);
  v14 = sub_23BFF90AC();
  v50 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v50 - v15;
  v17 = sub_23BFF862C();
  v52 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v50 - v18;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE5160);
  v20 = sub_23BFF862C();
  v55 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v50 - v21;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3C28);
  v23 = sub_23BFF862C();
  v60 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)&v50 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v26);
  v53 = (uint64_t)&v50 - v27;
  sub_23BFF88A8();
  v71 = v54;
  v72 = v51;
  v73 = v57;
  v74 = v59;
  v75 = v61;
  v76 = v64;
  v77 = v65;
  v78 = v56;
  v79 = v58;
  v80 = v62;
  sub_23BFF90A0();
  v28 = MEMORY[0x242615198](MEMORY[0x24BDF4700], v14);
  sub_23BFF8ED8();
  (*(void (**)(char *, uint64_t))(v50 + 8))(v16, v14);
  v29 = v63;
  sub_23BFF9178();
  sub_23BFF8B60();
  v88[0] = v28;
  v88[1] = MEMORY[0x24BDECC60];
  v30 = MEMORY[0x242615198](MEMORY[0x24BDED308], v17, v88);
  v31 = v66;
  sub_23BFF8CC8();
  (*(void (**)(char *, uint64_t))(v67 + 8))(v29, v31);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v19, v17);
  v32 = v68;
  v33 = &v68[*(int *)(v69 + 20)];
  v34 = *MEMORY[0x24BDEEB68];
  v35 = sub_23BFF8854();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 104))(v33, v34, v35);
  __asm { FMOV            V0.2D, #14.0 }
  *v32 = _Q0;
  v41 = sub_23BEA1F94(&qword_256AE78A8, &qword_256AE5160, MEMORY[0x24BDF06D0]);
  v87[0] = v30;
  v87[1] = v41;
  v42 = MEMORY[0x24BDED308];
  v43 = MEMORY[0x242615198](MEMORY[0x24BDED308], v20, v87);
  sub_23BEA1BB8(&qword_256AE3CB8, (uint64_t (*)(uint64_t))MEMORY[0x24BDED998], MEMORY[0x24BDED990]);
  sub_23BFF8F44();
  sub_23BEC4004((uint64_t)v32);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v22, v20);
  v44 = sub_23BEA1F94(qword_256AE3C30, &qword_256AE3C28, MEMORY[0x24BDEB950]);
  v86[0] = v43;
  v86[1] = v44;
  v45 = MEMORY[0x242615198](v42, v23, v86);
  v46 = v53;
  sub_23BEA72EC((uint64_t)v25, v23, v53);
  v47 = v60;
  v48 = *(void (**)(char *, uint64_t))(v60 + 8);
  v48(v25, v23);
  v84 = 0;
  v85 = 1;
  v89 = &v84;
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v25, v46, v23);
  v90 = (uint64_t)v25;
  v83[0] = MEMORY[0x24BDF4638];
  v83[1] = v23;
  v81 = MEMORY[0x24BDF4610];
  v82 = v45;
  sub_23BF93EF0((uint64_t *)&v89, 2uLL, (uint64_t)v83);
  v48((char *)v46, v23);
  return ((uint64_t (*)(char *, uint64_t))v48)(v25, v23);
}

void sub_23BFC8408(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, __int128 a10, uint64_t a11)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t KeyPath;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _DWORD v64[4];
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;

  v84 = a8;
  v82 = a7;
  v81 = a6;
  v80 = a5;
  v78 = a4;
  v74 = a3;
  v75 = a2;
  v89 = a9;
  v79 = a11;
  v77 = a10;
  v83 = sub_23BFF96A0();
  v86 = sub_23BFF862C();
  v87 = *(_QWORD *)(v86 - 8);
  MEMORY[0x24BDAC7A8](v86);
  v76 = (char *)v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v85 = (char *)v64 - v14;
  v73 = sub_23BFF8890();
  v72 = *(_QWORD *)(v73 - 8);
  MEMORY[0x24BDAC7A8](v73);
  v71 = (char *)v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE84C8);
  MEMORY[0x24BDAC7A8](v88);
  v93 = (char *)v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v90 = (uint64_t)v64 - v18;
  v68 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5608);
  MEMORY[0x24BDAC7A8](v68);
  v67 = (uint64_t *)((char *)v64 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5638);
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)v64 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE84E8);
  MEMORY[0x24BDAC7A8](v66);
  v24 = (uint64_t *)((char *)v64 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v70 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE84F0);
  MEMORY[0x24BDAC7A8](v70);
  v69 = (uint64_t)v64 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE84C0);
  MEMORY[0x24BDAC7A8](v91);
  v92 = (uint64_t)v64 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v27);
  v94 = (uint64_t)v64 - v28;
  v29 = a1[36];
  v30 = a1[37];
  v31 = a1[38];
  v32 = a1[39];
  v33 = *MEMORY[0x24BDF1D90];
  v34 = sub_23BFF8C44();
  v35 = *(_QWORD *)(v34 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 104))(v22, v33, v34);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v22, 0, 1, v34);
  KeyPath = swift_getKeyPath();
  v37 = v67;
  sub_23BE9F190((uint64_t)v22, (uint64_t)v67 + *(int *)(v68 + 28), &qword_256AE5638);
  *v37 = KeyPath;
  sub_23BE9F190((uint64_t)v37, (uint64_t)v24 + *(int *)(v66 + 36), &qword_256AE5608);
  *v24 = v29;
  v24[1] = v30;
  v24[2] = v31;
  v24[3] = v32;
  sub_23BEA1DC0(v29, v30, v31, v32);
  sub_23BEA1DC0(v29, v30, v31, v32);
  sub_23BE9F3A0((uint64_t)v37, &qword_256AE5608);
  sub_23BE9F3A0((uint64_t)v22, &qword_256AE5638);
  sub_23BEBF0A4(v29, v30, v31, v32);
  v38 = a1[14];
  v39 = swift_getKeyPath();
  v40 = v69;
  sub_23BE9F190((uint64_t)v24, v69, &qword_256AE84E8);
  v41 = v40 + *(int *)(v70 + 36);
  *(_QWORD *)v41 = v39;
  *(_QWORD *)(v41 + 8) = v38;
  *(_BYTE *)(v41 + 16) = 0;
  sub_23BE9F3A0((uint64_t)v24, &qword_256AE84E8);
  v42 = a1[8];
  v43 = a1[9];
  v44 = a1[10];
  v45 = a1[11];
  LOBYTE(v39) = sub_23BFF8B60();
  v46 = v92;
  sub_23BE9F190(v40, v92, &qword_256AE84F0);
  v47 = v46 + *(int *)(v91 + 36);
  *(_BYTE *)v47 = v39;
  *(_QWORD *)(v47 + 8) = v44;
  *(_QWORD *)(v47 + 16) = v43;
  *(_QWORD *)(v47 + 24) = v42;
  *(_QWORD *)(v47 + 32) = v45;
  *(_BYTE *)(v47 + 40) = 0;
  sub_23BE9F3A0(v40, &qword_256AE84F0);
  sub_23BEC42E0(v46, v94, &qword_256AE84C0);
  v48 = a1[28];
  v49 = a1[29];
  v50 = a1[30];
  v51 = a1[31];
  v70 = a1[12];
  v52 = swift_getKeyPath();
  v53 = *a1;
  v54 = a1[1];
  v56 = a1[2];
  v55 = a1[3];
  sub_23BEA1DC0(v48, v49, v50, v51);
  v57 = sub_23BFF8B60();
  v95 = v48;
  v96 = v49;
  v97 = v50;
  v98 = v51;
  v99 = v52;
  v100 = v70;
  LOBYTE(v101) = 0;
  LOBYTE(v102) = v57;
  *((_QWORD *)&v102 + 1) = v56;
  v103 = v54;
  v104 = v53;
  v105 = v55;
  v106 = 0;
  v58 = v71;
  sub_23BFF8884();
  v69 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE84D0);
  v70 = sub_23BFCF4A0();
  v59 = (uint64_t)v93;
  sub_23BFF8E3C();
  (*(void (**)(char *, uint64_t))(v72 + 8))(v58, v73);
  sub_23BEBF0A4(v95, v96, v97, v98);
  swift_release();
  sub_23BEC42E0(v59, v90, &qword_256AE84C8);
  v61 = a1[33];
  v65 = a1[32];
  v60 = v65;
  v63 = a1[34];
  v62 = a1[35];
  v73 = a1[13];
  v66 = swift_getKeyPath();
  v72 = a1[4];
  v71 = (char *)a1[5];
  v67 = (uint64_t *)a1[6];
  v68 = a1[7];
  sub_23BEA1DC0(v60, v61, v63, v62);
  v64[3] = sub_23BFF8B60();
  v95 = v75;
  v96 = v74;
  v97 = v78;
  v98 = v80;
  v99 = v81;
  v100 = v82;
  v101 = v84;
  v102 = v77;
  v103 = v79;
  type metadata accessor for FullWidthStageView();
}

uint64_t sub_23BFC8B24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);

  *(_QWORD *)(v5 - 232) = v0;
  v6 = MEMORY[0x242615198](MEMORY[0x24BDF5578], *(_QWORD *)(v5 - 440), v5 - 232);
  v7 = *(_QWORD *)(v5 - 504);
  sub_23BFF8EE4();
  v8 = MEMORY[0x24BDECC60];
  *(_QWORD *)(v5 - 248) = v6;
  *(_QWORD *)(v5 - 240) = v8;
  v9 = *(_QWORD *)(v5 - 416);
  *(_QWORD *)(v5 - 440) = MEMORY[0x242615198](MEMORY[0x24BDED308], v9, v5 - 248);
  v10 = *(_QWORD *)(v5 - 424);
  sub_23BEA72EC(v7, v9, v10);
  v11 = *(_QWORD *)(v5 - 408);
  v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  *(_QWORD *)(v5 - 432) = v12;
  v12(v7, v9);
  v13 = *(_QWORD *)(v5 - 368);
  sub_23BE9F190(*(_QWORD *)(v5 - 352), v13, &qword_256AE84C0);
  *(_QWORD *)(v5 - 280) = v13;
  v14 = v1;
  v15 = *(_QWORD *)(v5 - 360);
  sub_23BE9F190(v14, v15, &qword_256AE84C8);
  v16 = *(_QWORD *)(v5 - 592);
  *(_QWORD *)(v5 - 224) = v16;
  *(_QWORD *)(v5 - 216) = v2;
  *(_QWORD *)(v5 - 208) = v4;
  *(_QWORD *)(v5 - 200) = v3;
  v17 = *(_QWORD *)(v5 - 528);
  *(_QWORD *)(v5 - 192) = *(_QWORD *)(v5 - 584);
  *(_QWORD *)(v5 - 184) = v17;
  *(_BYTE *)(v5 - 176) = 0;
  *(_BYTE *)(v5 - 168) = *(_DWORD *)(v5 - 596);
  v18 = *(_QWORD *)(v5 - 544);
  *(_QWORD *)(v5 - 160) = *(_QWORD *)(v5 - 576);
  *(_QWORD *)(v5 - 152) = v18;
  v19 = *(_QWORD *)(v5 - 568);
  *(_QWORD *)(v5 - 144) = *(_QWORD *)(v5 - 536);
  *(_QWORD *)(v5 - 136) = v19;
  *(_BYTE *)(v5 - 128) = 0;
  *(_QWORD *)(v5 - 272) = v15;
  *(_QWORD *)(v5 - 264) = v5 - 224;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v7, v10, v9);
  *(_QWORD *)(v5 - 256) = v7;
  sub_23BEA1DC0(v16, v2, v4, v3);
  swift_retain();
  *(_QWORD *)(v5 - 312) = *(_QWORD *)(v5 - 376);
  *(_QWORD *)(v5 - 304) = *(_QWORD *)(v5 - 400);
  *(_QWORD *)(v5 - 296) = *(_QWORD *)(v5 - 560);
  *(_QWORD *)(v5 - 288) = v9;
  *(_QWORD *)(v5 - 344) = sub_23BFCF524();
  *(_QWORD *)(v5 - 336) = sub_23BFCF62C();
  *(_QWORD *)(v5 - 328) = *(_QWORD *)(v5 - 552);
  *(_QWORD *)(v5 - 320) = *(_QWORD *)(v5 - 440);
  sub_23BF93EF0((uint64_t *)(v5 - 280), 4uLL, v5 - 312);
  v20 = *(void (**)(uint64_t, uint64_t))(v5 - 432);
  v20(v10, v9);
  sub_23BEBF0A4(v16, v2, v4, v3);
  swift_release();
  sub_23BE9F3A0(*(_QWORD *)(v5 - 384), &qword_256AE84C8);
  sub_23BE9F3A0(*(_QWORD *)(v5 - 352), &qword_256AE84C0);
  v20(v7, v9);
  sub_23BEBF0A4(*(_QWORD *)(v5 - 224), *(_QWORD *)(v5 - 216), *(_QWORD *)(v5 - 208), *(_QWORD *)(v5 - 200));
  swift_release();
  sub_23BE9F3A0(*(_QWORD *)(v5 - 360), &qword_256AE84C8);
  return sub_23BE9F3A0(*(_QWORD *)(v5 - 368), &qword_256AE84C0);
}

double sub_23BFC8E3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  double v7;
  double v8;
  double v9;
  char v10;
  double v11;
  double v13;
  double v14;

  v3 = v1 + *(int *)(a1 + 136);
  v4 = *(_QWORD *)v3;
  v5 = *(_QWORD *)(v3 + 8);
  v6 = *(_BYTE *)(v3 + 16);
  sub_23BF1ECC0(*(_QWORD *)v3, v5, v6);
  v7 = sub_23BFCC4F8(v4, v5, v6);
  v9 = v8;
  sub_23BF1E5BC(v4, v5, v6);
  v10 = (*(uint64_t (**)(_QWORD, double, double))(*(_QWORD *)(a1 + 88) + 56))(*(_QWORD *)(a1 + 48), v7, v9);
  v11 = 0.0;
  if ((v10 & 1) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5640);
    sub_23BFF8FF8();
    sub_23BFF8FF8();
    sub_23BFF8FF8();
    v11 = v13 * (v14 / v13) * 0.2;
  }
  return *(double *)(v1 + 120) + v11;
}

uint64_t sub_23BFC8F7C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t OpaqueTypeConformance2;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD v81[2];
  _QWORD v82[2];
  _QWORD v83[2];
  _QWORD v84[2];
  _QWORD v85[2];
  _QWORD v86[2];
  _QWORD v87[2];
  _QWORD v88[2];
  _QWORD v89[2];
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD v98[2];
  _QWORD v99[3];
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;

  v69 = a2;
  v67 = a1[2];
  sub_23BFF8ADC();
  v99[2] = sub_23BFF862C();
  v100 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE84B8);
  v101 = v100;
  v91 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE84C0);
  v92 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE84C8);
  v93 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE84D0);
  v62 = a1[3];
  sub_23BFF862C();
  v94 = sub_23BFF96A0();
  swift_getTupleTypeMetadata();
  v3 = sub_23BFF9220();
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v3);
  v4 = sub_23BFF90AC();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE50D8);
  v5 = sub_23BFF862C();
  sub_23BFF8A4C();
  v6 = (uint64_t (*)(uint64_t))MEMORY[0x24BDF02F8];
  v7 = sub_23BFF862C();
  v99[0] = MEMORY[0x242615198](MEMORY[0x24BDF4700], v4);
  v99[1] = sub_23BEA1F94(&qword_256AE50D0, &qword_256AE50D8, MEMORY[0x24BDF1028]);
  v8 = MEMORY[0x24BDED308];
  v9 = MEMORY[0x242615198](MEMORY[0x24BDED308], v5, v99);
  v59 = v7;
  v60 = sub_23BEA1BB8((unint64_t *)&qword_256AE5188, v6, MEMORY[0x24BDF02F0]);
  v98[0] = v9;
  v98[1] = v60;
  v58 = MEMORY[0x242615198](v8, v7, v98);
  v91 = v7;
  v92 = v58;
  v10 = MEMORY[0x24BDF30F0];
  MEMORY[0x24261512C](255, &v91, MEMORY[0x24BDF30F0], 0);
  v55 = sub_23BFF862C();
  v65 = a1[5];
  v57 = sub_23BFF96A0();
  v66 = a1[10];
  v97 = v66;
  v11 = MEMORY[0x24BDF5578];
  v56 = MEMORY[0x242615198](MEMORY[0x24BDF5578], v57, &v97);
  v91 = v57;
  v92 = v56;
  MEMORY[0x24261512C](255, &v91, v10, 0);
  v54 = sub_23BFF8968();
  v64 = a1[4];
  v61 = a1;
  v91 = sub_23BFF96A0();
  v92 = MEMORY[0x24BDF4638];
  v93 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE84C0);
  v94 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE84C8);
  v95 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE84D0);
  v12 = sub_23BFF96A0();
  v63 = a1[8];
  v90 = v63;
  v89[0] = v12;
  v89[1] = MEMORY[0x242615198](v11, v12, &v90);
  v96 = MEMORY[0x24261512C](255, v89, v10, 0);
  swift_getTupleTypeMetadata();
  v13 = sub_23BFF9220();
  v14 = MEMORY[0x24BDF5428];
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v13);
  v53 = sub_23BFF90AC();
  v15 = MEMORY[0x24BDF4700];
  v52 = MEMORY[0x242615198](MEMORY[0x24BDF4700], v53);
  v91 = v53;
  v92 = v52;
  MEMORY[0x24261512C](255, &v91, v10, 0);
  v51 = sub_23BFF862C();
  v46 = sub_23BFF862C();
  v91 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE84C0);
  v92 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE84C8);
  v93 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE84D0);
  v94 = sub_23BFF862C();
  swift_getTupleTypeMetadata();
  v16 = sub_23BFF9220();
  MEMORY[0x242615198](v14, v16);
  sub_23BFF90AC();
  sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE5160);
  sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3C28);
  sub_23BFF862C();
  swift_getTupleTypeMetadata2();
  v17 = sub_23BFF9220();
  MEMORY[0x242615198](v14, v17);
  v18 = sub_23BFF90AC();
  v45 = MEMORY[0x242615198](v15, v18);
  v91 = v18;
  v92 = v45;
  MEMORY[0x24261512C](255, &v91, MEMORY[0x24BDF30F0], 0);
  v19 = sub_23BFF862C();
  v47 = sub_23BFF862C();
  v48 = sub_23BFF8968();
  v49 = sub_23BFF8968();
  v20 = sub_23BFF8FD4();
  v50 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE78E8);
  v91 = v7;
  v92 = v58;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v22 = MEMORY[0x24BDECC60];
  v88[0] = OpaqueTypeConformance2;
  v88[1] = MEMORY[0x24BDECC60];
  v23 = MEMORY[0x24BDED308];
  v24 = MEMORY[0x242615198](MEMORY[0x24BDED308], v55, v88);
  v91 = v57;
  v92 = v56;
  v87[0] = v24;
  v87[1] = swift_getOpaqueTypeConformance2();
  v25 = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v54, v87);
  v91 = v53;
  v92 = v52;
  v86[0] = swift_getOpaqueTypeConformance2();
  v86[1] = v60;
  v85[0] = MEMORY[0x242615198](v23, v51, v86);
  v85[1] = v22;
  v26 = MEMORY[0x242615198](v23, v46, v85);
  v91 = v18;
  v92 = v45;
  v84[0] = swift_getOpaqueTypeConformance2();
  v84[1] = v60;
  v83[0] = MEMORY[0x242615198](v23, v19, v84);
  v83[1] = v22;
  v82[0] = v26;
  v82[1] = MEMORY[0x242615198](v23, v47, v83);
  v27 = MEMORY[0x24BDEF3E0];
  v81[0] = v25;
  v81[1] = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v48, v82);
  v80 = MEMORY[0x242615198](v27, v49, v81);
  v28 = MEMORY[0x242615198](MEMORY[0x24BDF3F50], v20, &v80);
  v29 = sub_23BEA1F94(&qword_256AE7918, &qword_256AE78E8, MEMORY[0x24BEE30C8]);
  v91 = v20;
  v92 = v50;
  v93 = v28;
  v94 = v29;
  v30 = MEMORY[0x24261512C](255, &v91, MEMORY[0x24BDF2800], 0);
  v91 = v20;
  v92 = v50;
  v93 = v28;
  v94 = v29;
  v31 = swift_getOpaqueTypeConformance2();
  v91 = v30;
  v92 = v31;
  MEMORY[0x24261512C](255, &v91, MEMORY[0x24BDF2F10], 0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE54B8);
  sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE54C0);
  v102 = sub_23BFF862C();
  swift_getTupleTypeMetadata();
  v32 = sub_23BFF9220();
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v32);
  v33 = sub_23BFF90C4();
  v34 = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v36 = (char *)&v44 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v37);
  v39 = (char *)&v44 - v38;
  sub_23BFF919C();
  v70 = v67;
  v71 = v62;
  v72 = v64;
  v73 = v65;
  v74 = *((_OWORD *)v61 + 3);
  v40 = v61[9];
  v75 = v63;
  v76 = v40;
  v41 = v61[11];
  v77 = v66;
  v78 = v41;
  v79 = v68;
  sub_23BFF90B8();
  MEMORY[0x242615198](MEMORY[0x24BDF4750], v33);
  sub_23BEA72EC((uint64_t)v36, v33, (uint64_t)v39);
  v42 = *(void (**)(char *, uint64_t))(v34 + 8);
  v42(v36, v33);
  sub_23BEA5C0C((uint64_t)v39, v33, v69);
  return ((uint64_t (*)(char *, uint64_t))v42)(v39, v33);
}

void sub_23BFC989C()
{
  type metadata accessor for FullWidthStageView();
}

uint64_t sub_23BFC9938(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t OpaqueTypeConformance2;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t (*v69)(uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  uint64_t v74;
  uint64_t v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(_BYTE *, uint64_t);
  _BYTE *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t (*v96)(uint64_t);
  uint64_t v97;
  uint64_t result;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void (*v128)(uint64_t, uint64_t);
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  unint64_t v141;
  void (*v142)(uint64_t, uint64_t);
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  _BYTE v151[80];

  *(_QWORD *)(v1 + 288) = a1;
  v4 = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v1 + 128) = v4;
  *(_QWORD *)(v1 + 112) = *(_QWORD *)(v4 + 64);
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v1 + 120) = &v151[-v5];
  v6 = sub_23BFF8AA0();
  *(_QWORD *)(v1 + 96) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v1 + 104) = v6;
  MEMORY[0x24BDAC7A8](v6);
  *(_QWORD *)(v1 + 88) = &v151[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE78E8);
  *(_QWORD *)(v1 + 280) = v8;
  MEMORY[0x24BDAC7A8](v8);
  *(_QWORD *)(v1 + 264) = &v151[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *(_QWORD *)(v1 + 1680) = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE84C0);
  *(_QWORD *)(v1 + 1688) = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE84C8);
  *(_QWORD *)(v1 + 1696) = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE84D0);
  *(_QWORD *)(v1 + 296) = v2;
  sub_23BFF862C();
  *(_QWORD *)(v1 + 1704) = sub_23BFF96A0();
  swift_getTupleTypeMetadata();
  v10 = sub_23BFF9220();
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v10);
  v11 = sub_23BFF90AC();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE50D8);
  v12 = sub_23BFF862C();
  sub_23BFF8A4C();
  v13 = (uint64_t (*)(uint64_t))MEMORY[0x24BDF02F8];
  v14 = sub_23BFF862C();
  v15 = MEMORY[0x242615198](MEMORY[0x24BDF4700], v11);
  v16 = sub_23BEA1F94(&qword_256AE50D0, &qword_256AE50D8, MEMORY[0x24BDF1028]);
  *(_QWORD *)(v1 + 1120) = v15;
  *(_QWORD *)(v1 + 1128) = v16;
  v17 = MEMORY[0x24BDED308];
  v18 = MEMORY[0x242615198](MEMORY[0x24BDED308], v12, v1 + 1120);
  v19 = sub_23BEA1BB8((unint64_t *)&qword_256AE5188, v13, MEMORY[0x24BDF02F0]);
  *(_QWORD *)(v1 + 256) = v19;
  *(_QWORD *)(v1 + 1104) = v18;
  *(_QWORD *)(v1 + 1112) = v19;
  *(_QWORD *)(v1 + 240) = v14;
  v20 = MEMORY[0x242615198](v17, v14, v1 + 1104);
  *(_QWORD *)(v1 + 232) = v20;
  *(_QWORD *)(v1 + 1680) = v14;
  *(_QWORD *)(v1 + 1688) = v20;
  v21 = MEMORY[0x24BDF30F0];
  MEMORY[0x24261512C](255, v1 + 1680, MEMORY[0x24BDF30F0], 0);
  *(_QWORD *)(v1 + 208) = sub_23BFF862C();
  v22 = sub_23BFF96A0();
  *(_QWORD *)(v1 + 224) = v22;
  v23 = MEMORY[0x24BDF5578];
  v24 = MEMORY[0x242615198](MEMORY[0x24BDF5578], v22, v3 + 24);
  *(_QWORD *)(v1 + 216) = v24;
  *(_QWORD *)(v1 + 1680) = v22;
  *(_QWORD *)(v1 + 1688) = v24;
  MEMORY[0x24261512C](255, v1 + 1680, v21, 0);
  *(_QWORD *)(v1 + 192) = sub_23BFF8968();
  v25 = sub_23BFF96A0();
  v26 = MEMORY[0x24BDF4638];
  *(_QWORD *)(v1 + 1680) = v25;
  *(_QWORD *)(v1 + 1688) = v26;
  *(_QWORD *)(v1 + 1696) = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE84C0);
  *(_QWORD *)(v1 + 1704) = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE84C8);
  *(_QWORD *)(v1 + 1712) = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE84D0);
  v27 = sub_23BFF96A0();
  *(_QWORD *)(v1 + 1096) = *(_QWORD *)(v1 + 376);
  v28 = MEMORY[0x242615198](v23, v27, v1 + 1096);
  *(_QWORD *)(v1 + 1520) = v27;
  *(_QWORD *)(v1 + 1528) = v28;
  *(_QWORD *)(v1 + 1720) = MEMORY[0x24261512C](255, v1 + 1520, v21, 0);
  swift_getTupleTypeMetadata();
  v29 = sub_23BFF9220();
  v30 = MEMORY[0x24BDF5428];
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v29);
  v31 = sub_23BFF90AC();
  *(_QWORD *)(v1 + 184) = v31;
  v32 = MEMORY[0x24BDF4700];
  v33 = MEMORY[0x242615198](MEMORY[0x24BDF4700], v31);
  *(_QWORD *)(v1 + 176) = v33;
  *(_QWORD *)(v1 + 1680) = v31;
  *(_QWORD *)(v1 + 1688) = v33;
  MEMORY[0x24261512C](255, v1 + 1680, v21, 0);
  *(_QWORD *)(v1 + 168) = sub_23BFF862C();
  v34 = sub_23BFF862C();
  *(_QWORD *)(v1 + 1680) = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE84C0);
  *(_QWORD *)(v1 + 1688) = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE84C8);
  *(_QWORD *)(v1 + 1696) = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE84D0);
  *(_QWORD *)(v1 + 1704) = sub_23BFF862C();
  swift_getTupleTypeMetadata();
  v35 = sub_23BFF9220();
  MEMORY[0x242615198](v30, v35);
  sub_23BFF90AC();
  sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE5160);
  sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3C28);
  sub_23BFF862C();
  swift_getTupleTypeMetadata2();
  v36 = sub_23BFF9220();
  MEMORY[0x242615198](v30, v36);
  v37 = sub_23BFF90AC();
  v38 = MEMORY[0x242615198](v32, v37);
  *(_QWORD *)(v1 + 144) = v38;
  *(_QWORD *)(v1 + 1680) = v37;
  *(_QWORD *)(v1 + 1688) = v38;
  MEMORY[0x24261512C](255, v1 + 1680, MEMORY[0x24BDF30F0], 0);
  v39 = sub_23BFF862C();
  *(_QWORD *)(v1 + 152) = sub_23BFF862C();
  *(_QWORD *)(v1 + 160) = sub_23BFF8968();
  v40 = *(_QWORD *)(v1 + 192);
  *(_QWORD *)(v1 + 360) = sub_23BFF8968();
  v41 = sub_23BFF8FD4();
  *(_QWORD *)(v1 + 80) = *(_QWORD *)(v41 - 8);
  MEMORY[0x24BDAC7A8](v41);
  *(_QWORD *)(v1 + 200) = &v151[-v42];
  *(_QWORD *)(v1 + 1680) = *(_QWORD *)(v1 + 240);
  *(_QWORD *)(v1 + 1688) = *(_QWORD *)(v1 + 232);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v44 = MEMORY[0x24BDECC60];
  *(_QWORD *)(v1 + 1080) = OpaqueTypeConformance2;
  *(_QWORD *)(v1 + 1088) = v44;
  v45 = MEMORY[0x24BDED308];
  v46 = MEMORY[0x242615198](MEMORY[0x24BDED308], *(_QWORD *)(v1 + 208), v1 + 1080);
  *(_QWORD *)(v1 + 1680) = *(_QWORD *)(v1 + 224);
  *(_QWORD *)(v1 + 1688) = *(_QWORD *)(v1 + 216);
  v47 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v1 + 1064) = v46;
  *(_QWORD *)(v1 + 1072) = v47;
  v48 = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v40, v1 + 1064);
  *(_QWORD *)(v1 + 1680) = *(_QWORD *)(v1 + 184);
  *(_QWORD *)(v1 + 1688) = *(_QWORD *)(v1 + 176);
  *(_QWORD *)(v1 + 1048) = swift_getOpaqueTypeConformance2();
  v49 = *(_QWORD *)(v1 + 256);
  *(_QWORD *)(v1 + 1056) = v49;
  *(_QWORD *)(v1 + 1032) = MEMORY[0x242615198](v45, *(_QWORD *)(v1 + 168), v1 + 1048);
  *(_QWORD *)(v1 + 1040) = v44;
  v50 = MEMORY[0x242615198](v45, v34, v1 + 1032);
  *(_QWORD *)(v1 + 1680) = v37;
  *(_QWORD *)(v1 + 1688) = *(_QWORD *)(v1 + 144);
  *(_QWORD *)(v1 + 1016) = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v1 + 1024) = v49;
  v51 = v39;
  v52 = *(_QWORD *)(v1 + 280);
  *(_QWORD *)(v1 + 1000) = MEMORY[0x242615198](v45, v51, v1 + 1016);
  *(_QWORD *)(v1 + 1008) = v44;
  v53 = MEMORY[0x242615198](v45, *(_QWORD *)(v1 + 152), v1 + 1000);
  *(_QWORD *)(v1 + 984) = v50;
  *(_QWORD *)(v1 + 992) = v53;
  v54 = MEMORY[0x24BDEF3E0];
  v55 = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], *(_QWORD *)(v1 + 160), v1 + 984);
  *(_QWORD *)(v1 + 968) = v48;
  *(_QWORD *)(v1 + 976) = v55;
  v56 = MEMORY[0x242615198](v54, *(_QWORD *)(v1 + 360), v1 + 968);
  *(_QWORD *)(v1 + 256) = v56;
  *(_QWORD *)(v1 + 960) = v56;
  v57 = MEMORY[0x242615198](MEMORY[0x24BDF3F50], v41, v1 + 960);
  v58 = sub_23BEA1F94(&qword_256AE7918, &qword_256AE78E8, MEMORY[0x24BEE30C8]);
  *(_QWORD *)(v1 + 1680) = v41;
  *(_QWORD *)(v1 + 1688) = v52;
  *(_QWORD *)(v1 + 1696) = v57;
  *(_QWORD *)(v1 + 1704) = v58;
  v59 = MEMORY[0x24261512C](0, v1 + 1680, MEMORY[0x24BDF2800], 0);
  *(_QWORD *)(v1 + 24) = *(_QWORD *)(v59 - 8);
  MEMORY[0x24BDAC7A8](v59);
  *(_QWORD *)(v1 + 8) = v57;
  *(_QWORD *)(v1 + 16) = &v151[-v60];
  *(_QWORD *)(v1 + 224) = v41;
  *(_QWORD *)(v1 + 1680) = v41;
  *(_QWORD *)(v1 + 1688) = v52;
  *(_QWORD *)(v1 + 1696) = v57;
  *(_QWORD *)v1 = v58;
  *(_QWORD *)(v1 + 1704) = v58;
  v61 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v1 + 144) = v59;
  *(_QWORD *)(v1 + 1680) = v59;
  *(_QWORD *)(v1 + 32) = v61;
  *(_QWORD *)(v1 + 1688) = v61;
  v62 = MEMORY[0x24261512C](0, v1 + 1680, MEMORY[0x24BDF2F10], 0);
  *(_QWORD *)(v1 + 56) = *(_QWORD *)(v62 - 8);
  MEMORY[0x24BDAC7A8](v62);
  *(_QWORD *)(v1 + 48) = &v151[-v63];
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE54B8);
  *(_QWORD *)(v1 + 72) = v62;
  v64 = sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE54C0);
  *(_QWORD *)(v1 + 64) = v64;
  v65 = sub_23BFF862C();
  *(_QWORD *)(v1 + 168) = v65;
  *(_QWORD *)(v1 + 192) = *(_QWORD *)(v65 - 8);
  MEMORY[0x24BDAC7A8](v65);
  *(_QWORD *)(v1 + 160) = &v151[-((v66 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v67);
  *(_QWORD *)(v1 + 216) = &v151[-v68];
  sub_23BFF8ADC();
  v69 = (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088];
  v70 = sub_23BFF862C();
  v71 = *(_QWORD *)(v70 - 8);
  MEMORY[0x24BDAC7A8](v70);
  v73 = &v151[-((v72 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v74);
  v76 = &v151[-v75];
  v77 = *(_QWORD *)(v1 + 272);
  v78 = *(_QWORD *)(v1 + 352);
  sub_23BFF8E00();
  v79 = sub_23BEA1BB8((unint64_t *)&qword_256AE3908, v69, MEMORY[0x24BDF1078]);
  *(_QWORD *)(v1 + 944) = v78;
  *(_QWORD *)(v1 + 952) = v79;
  v80 = MEMORY[0x242615198](MEMORY[0x24BDED308], v70, v1 + 944);
  *(_QWORD *)(v1 + 184) = v76;
  *(_QWORD *)(v1 + 152) = v80;
  sub_23BEA72EC((uint64_t)v73, v70, (uint64_t)v76);
  *(_QWORD *)(v1 + 40) = v71;
  v81 = *(void (**)(_BYTE *, uint64_t))(v71 + 8);
  *(_QWORD *)(v1 + 232) = v73;
  v82 = v73;
  v83 = *(_QWORD *)(v1 + 200);
  *(_QWORD *)(v1 + 176) = v70;
  *(_QWORD *)(v1 + 208) = v81;
  v81(v82, v70);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5170);
  v84 = swift_allocObject();
  *(_OWORD *)(v1 + 240) = xmmword_23BFFF250;
  *(_OWORD *)(v84 + 16) = xmmword_23BFFF250;
  *(_QWORD *)(v84 + 32) = sub_23BFF8F80();
  *(_QWORD *)(v84 + 40) = sub_23BFF8F8C();
  *(_QWORD *)(v1 + 1680) = v84;
  sub_23BFF9478();
  v85 = *(_QWORD *)(v1 + 1680);
  sub_23BFF9250();
  sub_23BFF925C();
  MEMORY[0x2426144E4](v85);
  sub_23BFF85B4();
  sub_23BFF91C0();
  sub_23BF94F0C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v1 + 1216, 0.0, 1, 0.0, 1);
  sub_23BFCF0D8(v1 + 1136);
  v86 = swift_allocObject();
  *(_OWORD *)(v86 + 16) = *(_OWORD *)(v1 + 240);
  *(_QWORD *)(v86 + 32) = sub_23BFF8F8C();
  sub_23BFF8F80();
  v87 = sub_23BFF8FA4();
  swift_release();
  *(_QWORD *)(v86 + 40) = v87;
  *(_QWORD *)(v1 + 1680) = v86;
  sub_23BFF9478();
  v88 = *(_QWORD *)(v1 + 1680);
  sub_23BFF9244();
  sub_23BFF9238();
  MEMORY[0x2426144E4](v88);
  sub_23BFF85B4();
  sub_23BFF91C0();
  sub_23BF94F0C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v1 + 1368, 0.0, 1, 0.0, 1);
  sub_23BFCF0D8(v1 + 1176);
  v89 = *(_QWORD *)(v1 + 296);
  *(_QWORD *)(v1 + 400) = *(_QWORD *)(v1 + 368);
  *(_QWORD *)(v1 + 408) = v89;
  v90 = *(_QWORD *)(v1 + 320);
  *(_QWORD *)(v1 + 416) = *(_QWORD *)(v1 + 304);
  *(_QWORD *)(v1 + 424) = v90;
  *(_QWORD *)(v1 + 432) = *(_QWORD *)(v1 + 336);
  *(_QWORD *)(v1 + 440) = v78;
  v91 = *(_QWORD *)(v1 + 312);
  *(_QWORD *)(v1 + 448) = *(_QWORD *)(v1 + 376);
  *(_QWORD *)(v1 + 456) = v91;
  v92 = *(_QWORD *)(v1 + 344);
  *(_QWORD *)(v1 + 464) = *(_QWORD *)(v1 + 328);
  *(_QWORD *)(v1 + 472) = v92;
  v93 = v77;
  *(_QWORD *)(v1 + 480) = v77;
  sub_23BFF8FC8();
  v94 = *MEMORY[0x24BDECF38];
  v95 = sub_23BFF85F0();
  v96 = (uint64_t (*)(uint64_t))MEMORY[0x24BDECF50];
  v97 = *(_QWORD *)(v1 + 264);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v95 - 8) + 104))(v97, v94, v95);
  sub_23BEA1BB8((unint64_t *)&qword_256AE3740, v96, MEMORY[0x24BDECF78]);
  result = sub_23BFF93AC();
  if ((result & 1) != 0)
  {
    v99 = *(_QWORD *)(v1 + 16);
    v100 = v97;
    v101 = *(_QWORD *)(v1 + 224);
    sub_23BFF8D94();
    sub_23BE9F3A0(v100, &qword_256AE78E8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 80) + 8))(v83, v101);
    v102 = *(_QWORD *)(v1 + 88);
    sub_23BFF8A94();
    v103 = *(_QWORD *)(v1 + 48);
    v104 = *(_QWORD *)(v1 + 144);
    v105 = *(_QWORD *)(v1 + 32);
    sub_23BFF8E18();
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 + 96) + 8))(v102, *(_QWORD *)(v1 + 104));
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 24) + 8))(v99, v104);
    v106 = *(_QWORD *)(v1 + 120);
    v107 = *(_QWORD *)(v1 + 128);
    v108 = v93;
    v109 = *(_QWORD *)(v1 + 288);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v107 + 16))(v106, v108, v109);
    v110 = (*(unsigned __int8 *)(v107 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v107 + 80);
    v111 = (char *)swift_allocObject();
    v112 = *(_QWORD *)(v1 + 296);
    *((_QWORD *)v111 + 2) = *(_QWORD *)(v1 + 368);
    *((_QWORD *)v111 + 3) = v112;
    v113 = *(_QWORD *)(v1 + 320);
    *((_QWORD *)v111 + 4) = *(_QWORD *)(v1 + 304);
    *((_QWORD *)v111 + 5) = v113;
    v114 = *(_QWORD *)(v1 + 352);
    *((_QWORD *)v111 + 6) = *(_QWORD *)(v1 + 336);
    *((_QWORD *)v111 + 7) = v114;
    v115 = *(_QWORD *)(v1 + 312);
    *((_QWORD *)v111 + 8) = *(_QWORD *)(v1 + 376);
    *((_QWORD *)v111 + 9) = v115;
    v116 = *(_QWORD *)(v1 + 344);
    *((_QWORD *)v111 + 10) = *(_QWORD *)(v1 + 328);
    *((_QWORD *)v111 + 11) = v116;
    (*(void (**)(char *, uint64_t, uint64_t))(v107 + 32))(&v111[v110], v106, v109);
    *(_QWORD *)(v1 + 1680) = v104;
    *(_QWORD *)(v1 + 1688) = v105;
    v117 = swift_getOpaqueTypeConformance2();
    v118 = *(_QWORD *)(v1 + 160);
    v119 = *(_QWORD *)(v1 + 72);
    sub_23BFBC8B4((uint64_t)sub_23BFCF308, (uint64_t)v111, v117, v118);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 56) + 8))(v103, v119);
    v120 = sub_23BEA1F94(&qword_256AE54D0, &qword_256AE54B8, MEMORY[0x24BDEF370]);
    *(_QWORD *)(v1 + 928) = v117;
    *(_QWORD *)(v1 + 936) = v120;
    v121 = MEMORY[0x24BDED308];
    v122 = MEMORY[0x242615198](MEMORY[0x24BDED308], *(_QWORD *)(v1 + 64), v1 + 928);
    v123 = sub_23BEA1F94(&qword_256AE54D8, &qword_256AE54C0, MEMORY[0x24BDF09B0]);
    *(_QWORD *)(v1 + 912) = v122;
    *(_QWORD *)(v1 + 920) = v123;
    v124 = *(_QWORD *)(v1 + 168);
    v125 = MEMORY[0x242615198](v121, v124, v1 + 912);
    v126 = *(_QWORD *)(v1 + 216);
    sub_23BEA72EC(v118, v124, v126);
    v127 = *(_QWORD *)(v1 + 192);
    v128 = *(void (**)(uint64_t, uint64_t))(v127 + 8);
    v128(v118, v124);
    v129 = *(_QWORD *)(v1 + 232);
    v131 = *(_QWORD *)(v1 + 176);
    v130 = *(_QWORD *)(v1 + 184);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 + 40) + 16))(v129, v130, v131);
    v132 = *(_OWORD *)(v1 + 1328);
    *(_OWORD *)(v1 + 816) = *(_OWORD *)(v1 + 1312);
    *(_OWORD *)(v1 + 832) = v132;
    *(_OWORD *)(v1 + 848) = *(_OWORD *)(v1 + 1344);
    *(_QWORD *)(v1 + 864) = *(_QWORD *)(v1 + 1360);
    v133 = *(_OWORD *)(v1 + 1264);
    *(_OWORD *)(v1 + 752) = *(_OWORD *)(v1 + 1248);
    *(_OWORD *)(v1 + 768) = v133;
    v134 = *(_OWORD *)(v1 + 1296);
    *(_OWORD *)(v1 + 784) = *(_OWORD *)(v1 + 1280);
    *(_OWORD *)(v1 + 800) = v134;
    v135 = *(_OWORD *)(v1 + 1232);
    *(_OWORD *)(v1 + 720) = *(_OWORD *)(v1 + 1216);
    *(_OWORD *)(v1 + 736) = v135;
    *(_QWORD *)(v1 + 880) = v129;
    *(_QWORD *)(v1 + 888) = v1 + 720;
    v136 = *(_OWORD *)(v1 + 1480);
    *(_OWORD *)(v1 + 656) = *(_OWORD *)(v1 + 1464);
    *(_OWORD *)(v1 + 672) = v136;
    *(_OWORD *)(v1 + 688) = *(_OWORD *)(v1 + 1496);
    *(_QWORD *)(v1 + 704) = *(_QWORD *)(v1 + 1512);
    v137 = *(_OWORD *)(v1 + 1416);
    *(_OWORD *)(v1 + 592) = *(_OWORD *)(v1 + 1400);
    *(_OWORD *)(v1 + 608) = v137;
    v138 = *(_OWORD *)(v1 + 1448);
    *(_OWORD *)(v1 + 624) = *(_OWORD *)(v1 + 1432);
    *(_OWORD *)(v1 + 640) = v138;
    v139 = *(_OWORD *)(v1 + 1384);
    *(_OWORD *)(v1 + 560) = *(_OWORD *)(v1 + 1368);
    *(_OWORD *)(v1 + 576) = v139;
    *(_QWORD *)(v1 + 896) = v1 + 560;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v127 + 16))(v118, v126, v124);
    *(_QWORD *)(v1 + 904) = v118;
    *(_QWORD *)(v1 + 528) = v131;
    v140 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AE84B8);
    *(_QWORD *)(v1 + 536) = v140;
    *(_QWORD *)(v1 + 544) = v140;
    *(_QWORD *)(v1 + 552) = v124;
    *(_QWORD *)(v1 + 496) = *(_QWORD *)(v1 + 152);
    v141 = sub_23BFCF3D4();
    *(_QWORD *)(v1 + 504) = v141;
    *(_QWORD *)(v1 + 512) = v141;
    *(_QWORD *)(v1 + 520) = v125;
    sub_23BF93EF0((uint64_t *)(v1 + 880), 4uLL, v1 + 528);
    v128(v126, v124);
    v142 = *(void (**)(uint64_t, uint64_t))(v1 + 208);
    v142(v130, v131);
    v128(v118, v124);
    v143 = *(_OWORD *)(v1 + 672);
    *(_OWORD *)(v1 + 1616) = *(_OWORD *)(v1 + 656);
    *(_OWORD *)(v1 + 1632) = v143;
    *(_OWORD *)(v1 + 1648) = *(_OWORD *)(v1 + 688);
    *(_QWORD *)(v1 + 1664) = *(_QWORD *)(v1 + 704);
    v144 = *(_OWORD *)(v1 + 608);
    *(_OWORD *)(v1 + 1552) = *(_OWORD *)(v1 + 592);
    *(_OWORD *)(v1 + 1568) = v144;
    v145 = *(_OWORD *)(v1 + 640);
    *(_OWORD *)(v1 + 1584) = *(_OWORD *)(v1 + 624);
    *(_OWORD *)(v1 + 1600) = v145;
    v146 = *(_OWORD *)(v1 + 576);
    *(_OWORD *)(v1 + 1520) = *(_OWORD *)(v1 + 560);
    *(_OWORD *)(v1 + 1536) = v146;
    sub_23BFCF0D8(v1 + 1520);
    v147 = *(_OWORD *)(v1 + 832);
    *(_OWORD *)(v1 + 1776) = *(_OWORD *)(v1 + 816);
    *(_OWORD *)(v1 + 1792) = v147;
    *(_OWORD *)(v1 + 1808) = *(_OWORD *)(v1 + 848);
    *(_QWORD *)(v1 + 1824) = *(_QWORD *)(v1 + 864);
    v148 = *(_OWORD *)(v1 + 768);
    *(_OWORD *)(v1 + 1712) = *(_OWORD *)(v1 + 752);
    *(_OWORD *)(v1 + 1728) = v148;
    v149 = *(_OWORD *)(v1 + 800);
    *(_OWORD *)(v1 + 1744) = *(_OWORD *)(v1 + 784);
    *(_OWORD *)(v1 + 1760) = v149;
    v150 = *(_OWORD *)(v1 + 736);
    *(_OWORD *)(v1 + 1680) = *(_OWORD *)(v1 + 720);
    *(_OWORD *)(v1 + 1696) = v150;
    sub_23BFCF0D8(v1 + 1680);
    return ((uint64_t (*)(uint64_t, uint64_t))v142)(v129, v131);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_23BFCAA74(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD v84[52];
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD v105[2];
  _QWORD v106[2];
  _QWORD v107[2];
  uint64_t v108;

  v84[39] = a7;
  v84[37] = a6;
  v90 = a3;
  v91 = a5;
  v84[35] = a2;
  v98 = a1;
  v84[49] = a9;
  v84[42] = a12;
  v84[40] = a11;
  v84[38] = a10;
  v99 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE84C0);
  v100 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE84C8);
  v101 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE84D0);
  v14 = sub_23BFF96A0();
  v102 = sub_23BFF862C();
  swift_getTupleTypeMetadata();
  v15 = sub_23BFF9220();
  v16 = MEMORY[0x24BDF5428];
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v15);
  sub_23BFF90AC();
  sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE5160);
  sub_23BFF862C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE3C28);
  sub_23BFF862C();
  v17 = MEMORY[0x24BDF4638];
  swift_getTupleTypeMetadata2();
  v18 = sub_23BFF9220();
  MEMORY[0x242615198](v16, v18);
  v19 = sub_23BFF90AC();
  v84[18] = *(_QWORD *)(v19 - 8);
  v20 = MEMORY[0x24BDAC7A8](v19);
  v84[17] = (char *)v84 - v21;
  v22 = MEMORY[0x24BDF4700];
  v96 = MEMORY[0x242615198](MEMORY[0x24BDF4700], v19, v20);
  v97 = v19;
  v99 = v19;
  v100 = v96;
  v23 = MEMORY[0x24BDF30F0];
  v24 = MEMORY[0x24261512C](0, &v99);
  v84[20] = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v84[19] = (char *)v84 - v25;
  sub_23BFF8A4C();
  v84[22] = v24;
  v26 = sub_23BFF862C();
  v84[23] = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v84[21] = (char *)v84 - v27;
  v95 = v28;
  v29 = sub_23BFF862C();
  v84[24] = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v84[25] = (char *)v84 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v31);
  v84[34] = (char *)v84 - v32;
  v84[36] = a4;
  v99 = sub_23BFF96A0();
  v100 = v17;
  v101 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE84C0);
  v102 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE84C8);
  v103 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE84D0);
  v84[41] = a8;
  v108 = a8;
  v33 = MEMORY[0x24BDF5578];
  v34 = MEMORY[0x242615198](MEMORY[0x24BDF5578], v14, &v108);
  v107[0] = v14;
  v107[1] = v34;
  v104 = MEMORY[0x24261512C](255, v107, v23, 0);
  swift_getTupleTypeMetadata();
  v35 = sub_23BFF9220();
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v35);
  v36 = sub_23BFF90AC();
  v37 = MEMORY[0x242615198](v22, v36);
  v99 = v36;
  v100 = v37;
  v84[51] = v37;
  v38 = v23;
  v39 = MEMORY[0x24261512C](255, &v99, v23, 0);
  v40 = sub_23BFF862C();
  v41 = sub_23BFF862C();
  v94 = v29;
  v42 = sub_23BFF8968();
  v84[32] = *(_QWORD *)(v42 - 8);
  MEMORY[0x24BDAC7A8](v42);
  v84[31] = (char *)v84 - v43;
  v89 = swift_checkMetadataState();
  v84[9] = *(_QWORD *)(v89 - 8);
  MEMORY[0x24BDAC7A8](v89);
  v84[27] = (char *)v84 - v44;
  v84[5] = v39;
  v84[10] = *(_QWORD *)(v39 - 8);
  MEMORY[0x24BDAC7A8](v45);
  v84[4] = (char *)v84 - v46;
  v92 = v40;
  v84[12] = *(_QWORD *)(v40 - 8);
  MEMORY[0x24BDAC7A8](v47);
  v84[11] = (char *)v84 - v48;
  v93 = v41;
  v84[13] = *(_QWORD *)(v41 - 8);
  MEMORY[0x24BDAC7A8](v49);
  v84[14] = (char *)v84 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v51);
  v84[28] = (char *)v84 - v52;
  v53 = sub_23BFF96A0();
  v54 = MEMORY[0x242615198](v33, v53, &a11);
  v84[50] = v53;
  v99 = v53;
  v100 = v54;
  v88 = v54;
  v55 = MEMORY[0x24261512C](0, &v99, v38, 0);
  v84[15] = *(_QWORD *)(v55 - 8);
  MEMORY[0x24BDAC7A8](v55);
  v84[16] = (char *)v84 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v57);
  v84[33] = (char *)v84 - v58;
  v99 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE84C0);
  v100 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE84C8);
  v101 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE84D0);
  sub_23BFF862C();
  v102 = sub_23BFF96A0();
  swift_getTupleTypeMetadata();
  v59 = sub_23BFF9220();
  MEMORY[0x242615198](MEMORY[0x24BDF5428], v59);
  v60 = sub_23BFF90AC();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AE50D8);
  v61 = sub_23BFF862C();
  v62 = sub_23BFF862C();
  v63 = MEMORY[0x242615198](MEMORY[0x24BDF4700], v60);
  v64 = sub_23BEA1F94(&qword_256AE50D0, &qword_256AE50D8, MEMORY[0x24BDF1028]);
  v106[0] = v63;
  v106[1] = v64;
  v65 = MEMORY[0x24BDED308];
  v66 = MEMORY[0x242615198](MEMORY[0x24BDED308], v61, v106);
  v67 = sub_23BEA1BB8((unint64_t *)&qword_256AE5188, (uint64_t (*)(uint64_t))MEMORY[0x24BDF02F8], MEMORY[0x24BDF02F0]);
  v84[7] = v66;
  v105[0] = v66;
  v105[1] = v67;
  v87 = v67;
  v68 = MEMORY[0x242615198](v65, v62, v105);
  v99 = v62;
  v100 = v68;
  v86 = v68;
  v69 = v42;
  v70 = MEMORY[0x24261512C](255, &v99, v38, 0);
  v71 = sub_23BFF862C();
  v84[30] = v55;
  v72 = sub_23BFF8968();
  MEMORY[0x24BDAC7A8](v72);
  v84[29] = (char *)v84 - v73;
  v74 = swift_checkMetadataState();
  MEMORY[0x24BDAC7A8](v74);
  v85 = swift_checkMetadataState();
  v84[6] = *(_QWORD *)(v85 - 8);
  MEMORY[0x24BDAC7A8](v85);
  v84[2] = *(_QWORD *)(v70 - 8);
  v84[3] = v70;
  MEMORY[0x24BDAC7A8](v75);
  v84[44] = v71;
  v84[8] = *(_QWORD *)(v71 - 8);
  MEMORY[0x24BDAC7A8](v76);
  MEMORY[0x24BDAC7A8](v77);
  v84[26] = (char *)v84 - v78;
  v84[45] = v72;
  v79 = sub_23BFF8968();
  MEMORY[0x24BDAC7A8](v79);
  v80 = (char *)sub_23BFCB3B8 + 4 * byte_23C0074CC[*(unsigned __int8 *)(v98 + 216)];
  v84[46] = v69;
  v84[47] = v81;
  v84[48] = v82;
  v84[43] = (char *)v84 - v83;
  __asm { BR              X10 }
}

void sub_23BFCB3B8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = v0[57];
  *(_QWORD *)(v1 - 240) = v0[35];
  *(_QWORD *)(v1 - 232) = v2;
  v3 = v0[58];
  *(_QWORD *)(v1 - 224) = v0[36];
  *(_QWORD *)(v1 - 216) = v3;
  v4 = v0[39];
  *(_QWORD *)(v1 - 208) = v0[37];
  *(_QWORD *)(v1 - 200) = v4;
  v5 = v0[38];
  *(_QWORD *)(v1 - 192) = v0[41];
  *(_QWORD *)(v1 - 184) = v5;
  v6 = v0[42];
  *(_QWORD *)(v1 - 176) = v0[40];
  *(_QWORD *)(v1 - 168) = v6;
  type metadata accessor for FullWidthStageView();
}

uint64_t sub_23BFCB400(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  double v12;
  uint64_t OpaqueTypeConformance2;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v4 = v1[65];
  sub_23BFC642C(a1);
  sub_23BFF8B24();
  if (*(_BYTE *)(v4 + 216) == 1)
    sub_23BFF91C0();
  else
    sub_23BFF91CC();
  v5 = v1[51];
  v6 = v1[56];
  v7 = v1[54];
  v9 = v1[4];
  v8 = v1[5];
  v10 = 0.0;
  v11 = v1[27];
  sub_23BFF8E48();
  (*(void (**)(uint64_t, uint64_t))(v1[9] + 8))(v11, v6);
  v12 = 0.0;
  if (*(_BYTE *)(v4 + 216) != 2)
  {
    v12 = *(double *)(v4 + 128);
    v10 = *(double *)(v4 + 136) + 100.0;
  }
  *(_QWORD *)(v2 - 240) = v6;
  *(_QWORD *)(v2 - 232) = v5;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v14 = v1[11];
  sub_23BFCC348(v8, OpaqueTypeConformance2, v10, v12, 0.0, v12);
  (*(void (**)(uint64_t, uint64_t))(v1[10] + 8))(v9, v8);
  sub_23BFF8B78();
  sub_23BFC8E3C(a1);
  v1[106] = OpaqueTypeConformance2;
  v15 = v7;
  v1[107] = v7;
  v16 = MEMORY[0x24BDED308];
  v17 = v1[59];
  v18 = MEMORY[0x242615198](MEMORY[0x24BDED308], v17, v1 + 106);
  v19 = v1[14];
  sub_23BFF8EF0();
  (*(void (**)(uint64_t, uint64_t))(v1[12] + 8))(v14, v17);
  v1[104] = v18;
  v20 = MEMORY[0x24BDECC60];
  v1[105] = MEMORY[0x24BDECC60];
  v21 = v1[60];
  v22 = MEMORY[0x242615198](v16, v21, v1 + 104);
  v23 = v1[28];
  sub_23BEA72EC(v19, v21, v23);
  v24 = *(void (**)(uint64_t, uint64_t))(v1[13] + 8);
  v24(v19, v21);
  v1[65] = v24;
  sub_23BEA5C0C(v23, v21, v19);
  v25 = v1[63];
  *(_QWORD *)(v2 - 240) = v1[64];
  *(_QWORD *)(v2 - 232) = v25;
  v1[102] = swift_getOpaqueTypeConformance2();
  v1[103] = v15;
  v26 = MEMORY[0x24BDED308];
  v1[100] = MEMORY[0x242615198](MEMORY[0x24BDED308], v1[62], v1 + 102);
  v1[101] = v20;
  v27 = MEMORY[0x242615198](v26, v1[61], v1 + 100);
  v28 = v1[31];
  sub_23BEA5C24(v19, v21);
  v24(v19, v21);
  v29 = v1[53];
  *(_QWORD *)(v2 - 240) = v1[52];
  *(_QWORD *)(v2 - 232) = v29;
  v1[98] = swift_getOpaqueTypeConformance2();
  v1[99] = v20;
  v30 = v1[44];
  v31 = MEMORY[0x242615198](MEMORY[0x24BDED308], v30, v1 + 98);
  v32 = v1[50];
  v33 = v1[55];
  *(_QWORD *)(v2 - 240) = v32;
  *(_QWORD *)(v2 - 232) = v33;
  v34 = swift_getOpaqueTypeConformance2();
  v1[96] = v31;
  v1[97] = v34;
  v35 = MEMORY[0x24BDEF3E0];
  v36 = v1[45];
  MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v36, v1 + 96);
  v1[94] = v22;
  v1[95] = v27;
  v37 = v1[46];
  MEMORY[0x242615198](v35, v37, v1 + 94);
  v38 = v1[43];
  sub_23BEA5CE8(v28, v36, v37);
  (*(void (**)(uint64_t, uint64_t))(v1[32] + 8))(v28, v37);
  ((void (*)(_QWORD, uint64_t))v1[65])(v1[28], v21);
  v39 = v1[53];
  v40 = v1[51];
  *(_QWORD *)(v2 - 240) = v1[52];
  *(_QWORD *)(v2 - 232) = v39;
  v1[122] = swift_getOpaqueTypeConformance2();
  v41 = MEMORY[0x24BDECC60];
  v1[123] = MEMORY[0x24BDECC60];
  v42 = MEMORY[0x24BDED308];
  v43 = MEMORY[0x242615198](MEMORY[0x24BDED308], v30, v1 + 122);
  v44 = v1[55];
  *(_QWORD *)(v2 - 240) = v32;
  *(_QWORD *)(v2 - 232) = v44;
  v45 = swift_getOpaqueTypeConformance2();
  v1[120] = v43;
  v1[121] = v45;
  v46 = MEMORY[0x24BDEF3E0];
  v47 = MEMORY[0x242615198](MEMORY[0x24BDEF3E0], v36, v1 + 120);
  *(_QWORD *)(v2 - 240) = v1[56];
  *(_QWORD *)(v2 - 232) = v40;
  v1[118] = swift_getOpaqueTypeConformance2();
  v48 = v1[54];
  v1[119] = v48;
  v1[116] = MEMORY[0x242615198](v42, v1[59], v1 + 118);
  v1[117] = v41;
  v49 = MEMORY[0x242615198](v42, v1[60], v1 + 116);
  v50 = v1[63];
  *(_QWORD *)(v2 - 240) = v1[64];
  *(_QWORD *)(v2 - 232) = v50;
  v1[114] = swift_getOpaqueTypeConformance2();
  v1[115] = v48;
  v1[112] = MEMORY[0x242615198](v42, v1[62], v1 + 114);
  v1[113] = v41;
  v51 = MEMORY[0x242615198](v42, v1[61], v1 + 112);
  v1[110] = v49;
  v1[111] = v51;
  v52 = MEMORY[0x242615198](v46, v37, v1 + 110);
  v1[108] = v47;
  v1[109] = v52;
  v53 = v1[48];
  MEMORY[0x242615198](v46, v53, v1 + 108);
  sub_23BEA5C0C(v38, v53, v1[49]);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1[47] + 8))(v38, v53);
}

uint64_t sub_23BFCC348(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD v17[5];
  char v18;

  v12 = sub_23BFF8A4C();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v17 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BFF8B60();
  *(double *)&v17[1] = a3;
  *(double *)&v17[2] = a4;
  *(double *)&v17[3] = a5;
  *(double *)&v17[4] = a6;
  v18 = 0;
  sub_23BFF8A40();
  MEMORY[0x2426142A4](v15, a1, v12, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

void sub_23BFCC428()
{
  type metadata accessor for FullWidthStageView();
}

uint64_t sub_23BFCC474()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AE5640);
  return sub_23BFF9004();
}

uint64_t sub_23BFCC4C4@<X0>(uint64_t a1@<X8>)
{
  return sub_23BFCC6FC(&qword_256AE3728, (uint64_t (*)(_QWORD))MEMORY[0x24BDECF50], 0x5463696D616E7944, 0xEF657A6953657079, a1);
}

double sub_23BFCC4F8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  os_log_type_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];
  double v19;

  v6 = sub_23BFF87F4();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a3 & 1) != 0)
    return *(double *)&a1;
  swift_retain();
  v10 = sub_23BFF9688();
  v11 = sub_23BFF8B18();
  v12 = v10;
  if (os_log_type_enabled(v11, v10))
  {
    v13 = (uint8_t *)swift_slowAlloc();
    v14 = swift_slowAlloc();
    v18[0] = a2;
    v15 = v14;
    v19 = *(double *)&v14;
    *(_DWORD *)v13 = 136315138;
    v18[1] = sub_23BF89B80(0x657A69534743, 0xE600000000000000, (uint64_t *)&v19);
    sub_23BFF96B8();
    _os_log_impl(&dword_23BE9D000, v11, v12, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v13, 0xCu);
    swift_arrayDestroy();
    v16 = v15;
    a2 = v18[0];
    MEMORY[0x242615234](v16, -1, -1);
    MEMORY[0x242615234](v13, -1, -1);
  }

  sub_23BFF87E8();
  swift_getAtKeyPath();
  sub_23BF1E5BC(a1, a2, 0);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return v19;
}

uint64_t sub_23BFCC6C8@<X0>(uint64_t a1@<X8>)
{
  return sub_23BFCC6FC(&qword_256AE3960, (uint64_t (*)(_QWORD))MEMORY[0x24BDED130], 0x694474756F79614CLL, 0xEF6E6F6974636572, a1);
}

uint64_t sub_23BFCC6FC@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  os_log_type_t v20;
  NSObject *v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v28 = a3;
  v9 = v5;
  v11 = sub_23BFF87F4();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BE9F190(v9, (uint64_t)v17, a1);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v18 = a2(0);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(a5, v17, v18);
  }
  else
  {
    v20 = sub_23BFF9688();
    v21 = sub_23BFF8B18();
    if (os_log_type_enabled(v21, v20))
    {
      v26 = a4;
      v22 = swift_slowAlloc();
      v27 = a5;
      v23 = (uint8_t *)v22;
      v24 = swift_slowAlloc();
      v30 = v24;
      *(_DWORD *)v23 = 136315138;
      v29 = sub_23BF89B80(v28, v26, &v30);
      sub_23BFF96B8();
      _os_log_impl(&dword_23BE9D000, v21, v20, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v23, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242615234](v24, -1, -1);
      MEMORY[0x242615234](v23, -1, -1);
    }

    sub_23BFF87E8();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

uint64_t _s15FitnessCanvasUI24FullWidthStageViewLayoutV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  char v2;

  v2 = 0;
  if ((vminvq_u8((uint8x16_t)vcltzq_s8(vshlq_n_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64((float64x2_t)vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL), (float64x2_t)vextq_s8(*(int8x16_t *)a2, *(int8x16_t *)a2, 8uLL)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 16), *(float64x2_t *)(a2 + 16))), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 32),
                                                                           *(float64x2_t *)(a2 + 32)),
                                                              (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 48), *(float64x2_t *)(a2 + 48)))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 64), *(float64x2_t *)(a2 + 64)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 80), *(float64x2_t *)(a2 + 80))), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 120), *(float64x2_t *)(a2 + 120)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 136), *(float64x2_t *)(a2 + 136))))), 7uLL))) & 1) != 0&& (~vaddv_s16((int16x4_t)vand_s8(
                                                 (int8x8_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 152), *(float64x2_t *)(a2 + 152)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 168), *(float64x2_t *)(a2 + 168)))), 0xFuLL)), (int8x8_t)0x8000400020001)) & 0xF) == 0&& *(_QWORD *)(a1 + 96) == *(_QWORD *)(a2 + 96)&& *(_QWORD *)(a1 + 104) == *(_QWORD *)(a2 + 104)&& *(_QWORD *)(a1 + 112) == *(_QWORD *)(a2 + 112))
  {
    v2 = vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 184), *(float64x2_t *)(a2 + 184)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 200), *(float64x2_t *)(a2 + 200)))), 0xFuLL)));
  }
  return v2 & 1;
}

unint64_t sub_23BFCCA74()
{
  unint64_t result;

  result = qword_256AE8408;
  if (!qword_256AE8408)
  {
    result = MEMORY[0x242615198](&unk_23C007768, &type metadata for FullWidthStageViewLayout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AE8408);
  }
  return result;
}

unint64_t sub_23BFCCABC()
{
  unint64_t result;

  result = qword_256AE8418[0];
  if (!qword_256AE8418[0])
  {
    result = MEMORY[0x242615198](&protocol conformance descriptor for FullWidthStageViewLayout, &type metadata for FullWidthStageViewLayout);
    atomic_store(result, qword_256AE8418);
  }
  return result;
}

__n128 __swift_memcpy216_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  result = *(__n128 *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 176);
  v11 = *(_OWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 192) = v11;
  *(__n128 *)(a1 + 160) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for FullWidthStageViewLayout(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 216))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for FullWidthStageViewLayout(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 216) = v3;
  return result;
}

ValueMetadata *type metadata accessor for FullWidthStageViewLayout()
{
  return &type metadata for FullWidthStageViewLayout;
}

uint64_t storeEnumTagSinglePayload for FullWidthStageViewLayout.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_23BFCCC20 + 4 * byte_23C0074D5[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_23BFCCC54 + 4 * byte_23C0074D0[v4]))();
}

uint64_t sub_23BFCCC54(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BFCCC5C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BFCCC64);
  return result;
}

uint64_t sub_23BFCCC70(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BFCCC78);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_23BFCCC7C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BFCCC84(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FullWidthStageViewLayout.CodingKeys()
{
  return &type metadata for FullWidthStageViewLayout.CodingKeys;
}

uint64_t sub_23BFCCCA0()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_23BFCCCA8()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = sub_23BFF96A0();
    if (v2 <= 0x3F)
    {
      result = sub_23BFF96A0();
      if (v3 <= 0x3F)
      {
        result = sub_23BFF96A0();
        if (v4 <= 0x3F)
        {
          result = swift_checkMetadataState();
          if (v5 <= 0x3F)
          {
            swift_initStructMetadata();
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_23BFCCDCC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _OWORD *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  const void *v57;
  size_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  char *v63;
  size_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  void *v68;
  char *v69;
  size_t v70;
  char *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  size_t __n;
  uint64_t v89;
  uint64_t v90;
  size_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  size_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;

  v5 = a3[2];
  v4 = a3[3];
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v100 = v6;
  v8 = *(_QWORD *)(v4 - 8);
  v9 = *(_DWORD *)(v8 + 80);
  if (*(_DWORD *)(v8 + 84))
    v10 = *(_QWORD *)(v8 + 64);
  else
    v10 = *(_QWORD *)(v8 + 64) + 1;
  v12 = a3[4];
  v11 = a3[5];
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_DWORD *)(v13 + 80);
  if (*(_DWORD *)(v13 + 84))
    v15 = *(_QWORD *)(v13 + 64);
  else
    v15 = *(_QWORD *)(v13 + 64) + 1;
  v16 = *(_QWORD *)(v11 - 8);
  v17 = *(_DWORD *)(v16 + 80);
  if (*(_DWORD *)(v16 + 84))
    v18 = *(_QWORD *)(v16 + 64);
  else
    v18 = *(_QWORD *)(v16 + 64) + 1;
  v19 = a3[6];
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(_DWORD *)(v20 + 80);
  v22 = *(_QWORD *)(v20 + 64);
  v23 = v9 | v7 | v14 | v17 | v21;
  if (v23 > 7
    || ((*(_DWORD *)(v8 + 80) | *(_DWORD *)(v6 + 80) | *(_DWORD *)(v13 + 80) | *(_DWORD *)(v16 + 80) | *(_DWORD *)(v20 + 80)) & 0x100000) != 0
    || ((v22
       + ((v18
         + v21
         + ((v15 + v17 + ((v10 + v14 + ((*(_QWORD *)(v6 + 64) + v9 + ((v7 + 320) & ~v7)) & ~v9)) & ~v14)) & ~v17)) & ~v21)
       + 31) & 0xFFFFFFFFFFFFFFF8) != 0
    && ((v22
       + ((v18
         + v21
         + ((v15 + v17 + ((v10 + v14 + ((*(_QWORD *)(v6 + 64) + v9 + ((v7 + 320) & ~v7)) & ~v9)) & ~v14)) & ~v17)) & ~v21)
       + 31) & 0xFFFFFFFFFFFFFFF8) < 0xFFFFFFFFFFFFFFE8)
  {
    v26 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v26 + ((v23 & 0xF8 ^ 0x1F8) & (v23 + 16));
  }
  else
  {
    v85 = *(_QWORD *)(v6 + 64);
    v86 = *(_QWORD *)(v4 - 8);
    v87 = v4;
    __n = v10;
    v90 = *(_DWORD *)(v16 + 80);
    v27 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v27;
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    v28 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v28;
    v29 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v29;
    v30 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v30;
    v31 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v31;
    v32 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v32;
    v33 = (_OWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 224);
    v34 = a2 & 0xFFFFFFFFFFFFFFF8;
    *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
    v35 = (a2 & 0xFFFFFFFFFFFFFFF8) + 224;
    v98 = v20;
    v99 = v19;
    v96 = v18;
    v97 = v22;
    v94 = v21;
    v95 = v11;
    v92 = v12;
    v93 = v16;
    v91 = v15;
    v89 = v13;
    v84 = v14;
    if (*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 248) < 0xFFFFFFFFuLL)
    {
      v39 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 240);
      *v33 = *(_OWORD *)v35;
      *(_OWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 240) = v39;
    }
    else
    {
      v37 = *(_QWORD *)v35;
      v36 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 232);
      v38 = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 240);
      sub_23BEA0EAC(*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 224), v36, v38);
      *(_QWORD *)v33 = v37;
      *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 232) = v36;
      *(_BYTE *)((a1 & 0xFFFFFFFFFFFFFFF8) + 240) = v38;
      *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 248) = *(_QWORD *)(v35 + 24);
      swift_bridgeObjectRetain();
    }
    v40 = ((a1 & 0xFFFFFFFFFFFFFFF8) + 263) & 0xFFFFFFFFFFFFFFF8;
    v41 = (v34 + 263) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)(v41 + 24) < 0xFFFFFFFFuLL)
    {
      v45 = *(_OWORD *)(v41 + 16);
      *(_OWORD *)v40 = *(_OWORD *)v41;
      *(_OWORD *)(v40 + 16) = v45;
    }
    else
    {
      v42 = *(_QWORD *)v41;
      v43 = *(_QWORD *)(v41 + 8);
      v44 = *(_BYTE *)(v41 + 16);
      sub_23BEA0EAC(*(_QWORD *)v41, v43, v44);
      *(_QWORD *)v40 = v42;
      *(_QWORD *)(v40 + 8) = v43;
      *(_BYTE *)(v40 + 16) = v44;
      *(_QWORD *)(v40 + 24) = *(_QWORD *)(v41 + 24);
      swift_bridgeObjectRetain();
    }
    v46 = ~v7;
    v47 = ~v9;
    v48 = (v40 + 39) & 0xFFFFFFFFFFFFFFF8;
    v49 = (v41 + 39) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)(v49 + 24) < 0xFFFFFFFFuLL)
    {
      v53 = *(_OWORD *)(v49 + 16);
      *(_OWORD *)v48 = *(_OWORD *)v49;
      *(_OWORD *)(v48 + 16) = v53;
    }
    else
    {
      v50 = *(_QWORD *)v49;
      v51 = *(_QWORD *)(v49 + 8);
      v52 = *(_BYTE *)(v49 + 16);
      sub_23BEA0EAC(*(_QWORD *)v49, v51, v52);
      *(_QWORD *)v48 = v50;
      *(_QWORD *)(v48 + 8) = v51;
      *(_BYTE *)(v48 + 16) = v52;
      v47 = ~v9;
      *(_QWORD *)(v48 + 24) = *(_QWORD *)(v49 + 24);
      swift_bridgeObjectRetain();
    }
    v54 = v100;
    v101 = ~v84;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v54 + 16))((v48 + v7 + 32) & v46, (v49 + v7 + 32) & v46, v5);
    v55 = v85 + v9;
    v56 = (void *)((((v48 + v7 + 32) & v46) + v85 + v9) & v47);
    v57 = (const void *)((((v49 + v7 + 32) & v46) + v55) & v47);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v86 + 48))(v57, 1, v87))
    {
      v58 = __n;
      memcpy(v56, v57, __n);
      v59 = v94;
      v60 = v90;
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v86 + 16))(v56, v57, v87);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v86 + 56))(v56, 0, 1, v87);
      v59 = v94;
      v60 = v90;
      v58 = __n;
    }
    v61 = ~v60;
    v62 = (void *)(((unint64_t)v56 + v58 + v84) & v101);
    v63 = (char *)(((unint64_t)v57 + v58 + v84) & v101);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v89 + 48))(v63, 1, v92))
    {
      v64 = v91;
      memcpy(v62, v63, v91);
      v65 = v93;
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v89 + 16))(v62, v63, v92);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v89 + 56))(v62, 0, 1, v92);
      v65 = v93;
      v64 = v91;
    }
    v66 = ~v59;
    v67 = &v63[v64];
    v68 = (void *)(((unint64_t)v62 + v64 + v60) & v61);
    v69 = (char *)((unint64_t)&v67[v60] & v61);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48))(v69, 1, v95))
    {
      v70 = v96;
      memcpy(v68, v69, v96);
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v65 + 16))(v68, v69, v95);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v68, 0, 1, v95);
      v70 = v96;
    }
    v71 = &v69[v70];
    v72 = ((unint64_t)v68 + v70 + v59) & v66;
    v73 = (unint64_t)&v71[v59] & v66;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v98 + 16))(v72, v73, v99);
    v74 = v72 + v97;
    v75 = v73 + v97;
    v76 = (v72 + v97 + 7) & 0xFFFFFFFFFFFFFFF8;
    v77 = (v73 + v97 + 7) & 0xFFFFFFFFFFFFFFF8;
    v78 = *(_QWORD *)v77;
    v79 = *(_QWORD *)(v77 + 8);
    v80 = *(_BYTE *)(v77 + 16);
    sub_23BF1ECC0(*(_QWORD *)v77, v79, v80);
    *(_QWORD *)v76 = v78;
    *(_QWORD *)(v76 + 8) = v79;
    *(_BYTE *)(v76 + 16) = v80;
    v81 = (v74 + 31) & 0xFFFFFFFFFFFFFFF8;
    v82 = (v75 + 31) & 0xFFFFFFFFFFFFFFF8;
    *(_OWORD *)v81 = *(_OWORD *)v82;
    *(_QWORD *)(v81 + 16) = *(_QWORD *)(v82 + 16);
  }
  swift_retain();
  return a1;
}

uint64_t sub_23BFCD314(uint64_t a1, _QWORD *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;

  v3 = a1 & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 248) >= 0xFFFFFFFFuLL)
  {
    sub_23BEA0F64(*(_QWORD *)(v3 + 224), *(_QWORD *)(v3 + 232), *(_BYTE *)(v3 + 240));
    swift_bridgeObjectRelease();
  }
  v4 = (v3 + 263) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v4 + 24) >= 0xFFFFFFFFuLL)
  {
    sub_23BEA0F64(*(_QWORD *)v4, *(_QWORD *)(v4 + 8), *(_BYTE *)(v4 + 16));
    swift_bridgeObjectRelease();
  }
  v5 = (v4 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v5 + 24) >= 0xFFFFFFFFuLL)
  {
    sub_23BEA0F64(*(_QWORD *)v5, *(_QWORD *)(v5 + 8), *(_BYTE *)(v5 + 16));
    swift_bridgeObjectRelease();
  }
  v6 = *(_QWORD *)(a2[2] - 8);
  v7 = (v5 + *(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t))(v6 + 8))(v7);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a2[3];
  v10 = *(_QWORD *)(v9 - 8);
  v11 = (v7 + v8 + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v10 + 48))(v11, 1, v9))
    (*(void (**)(unint64_t, uint64_t))(v10 + 8))(v11, v9);
  v12 = *(_QWORD *)(v10 + 64);
  v13 = *(_DWORD *)(v10 + 84) == 0;
  v14 = a2[4];
  v15 = *(_QWORD *)(v14 - 8);
  v16 = v12 + v11;
  if (v13)
    ++v16;
  v17 = (v16 + *(unsigned __int8 *)(v15 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, _QWORD))(v15 + 48))(v17, 1, a2[4]))
    (*(void (**)(unint64_t, uint64_t))(v15 + 8))(v17, v14);
  v18 = *(_QWORD *)(v15 + 64);
  v13 = *(_DWORD *)(v15 + 84) == 0;
  v19 = a2[5];
  v20 = *(_QWORD *)(v19 - 8);
  v21 = v18 + v17;
  if (v13)
    ++v21;
  v22 = (v21 + *(unsigned __int8 *)(v20 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, _QWORD))(v20 + 48))(v22, 1, a2[5]))
    (*(void (**)(unint64_t, uint64_t))(v20 + 8))(v22, v19);
  v23 = *(_QWORD *)(a2[6] - 8);
  v24 = *(_QWORD *)(v20 + 64) + v22;
  if (!*(_DWORD *)(v20 + 84))
    ++v24;
  v25 = (v24 + *(unsigned __int8 *)(v23 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
  (*(void (**)(unint64_t))(v23 + 8))(v25);
  sub_23BF1E5BC(*(_QWORD *)((v25 + *(_QWORD *)(v23 + 64) + 7) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(((v25 + *(_QWORD *)(v23 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8), *(_BYTE *)(((v25 + *(_QWORD *)(v23 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16));
  return swift_release();
}

uint64_t sub_23BFCD51C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  const void *v41;
  int v42;
  size_t v43;
  size_t v44;
  size_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  const void *v51;
  int v52;
  size_t v53;
  size_t v54;
  size_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  const void *v61;
  int v62;
  size_t v63;
  size_t v64;
  size_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  unint64_t v79;
  unint64_t v80;

  v5 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v5;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  v6 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v6;
  v7 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v7;
  v8 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v8;
  v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v9;
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  v11 = a1 & 0xFFFFFFFFFFFFFFF8;
  v12 = (a1 & 0xFFFFFFFFFFFFFFF8) + 224;
  v13 = a2 & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  v14 = (a2 & 0xFFFFFFFFFFFFFFF8) + 224;
  if (*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 248) < 0xFFFFFFFFuLL)
  {
    v18 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 240);
    *(_OWORD *)v12 = *(_OWORD *)v14;
    *(_OWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 240) = v18;
  }
  else
  {
    v15 = *(_QWORD *)v14;
    v16 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 232);
    v17 = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 240);
    sub_23BEA0EAC(*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 224), v16, v17);
    *(_QWORD *)v12 = v15;
    *(_QWORD *)(v12 + 8) = v16;
    *(_BYTE *)(v12 + 16) = v17;
    *(_QWORD *)(v12 + 24) = *(_QWORD *)(v14 + 24);
    swift_bridgeObjectRetain();
  }
  v19 = (v11 + 263) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v13 + 263) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v20 + 24) < 0xFFFFFFFFuLL)
  {
    v24 = *(_OWORD *)(v20 + 16);
    *(_OWORD *)v19 = *(_OWORD *)v20;
    *(_OWORD *)(v19 + 16) = v24;
  }
  else
  {
    v21 = *(_QWORD *)v20;
    v22 = *(_QWORD *)(v20 + 8);
    v23 = *(_BYTE *)(v20 + 16);
    sub_23BEA0EAC(*(_QWORD *)v20, v22, v23);
    *(_QWORD *)v19 = v21;
    *(_QWORD *)(v19 + 8) = v22;
    *(_BYTE *)(v19 + 16) = v23;
    *(_QWORD *)(v19 + 24) = *(_QWORD *)(v20 + 24);
    swift_bridgeObjectRetain();
  }
  v25 = (v19 + 39) & 0xFFFFFFFFFFFFFFF8;
  v26 = (v20 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v26 + 24) < 0xFFFFFFFFuLL)
  {
    v30 = *(_OWORD *)(v26 + 16);
    *(_OWORD *)v25 = *(_OWORD *)v26;
    *(_OWORD *)(v25 + 16) = v30;
  }
  else
  {
    v27 = *(_QWORD *)v26;
    v28 = *(_QWORD *)(v26 + 8);
    v29 = *(_BYTE *)(v26 + 16);
    sub_23BEA0EAC(*(_QWORD *)v26, v28, v29);
    *(_QWORD *)v25 = v27;
    *(_QWORD *)(v25 + 8) = v28;
    *(_BYTE *)(v25 + 16) = v29;
    *(_QWORD *)(v25 + 24) = *(_QWORD *)(v26 + 24);
    swift_bridgeObjectRetain();
  }
  v31 = *(_QWORD *)(a3[2] - 8);
  v32 = *(unsigned __int8 *)(v31 + 80);
  v33 = (v25 + v32 + 32) & ~v32;
  v34 = (v26 + v32 + 32) & ~v32;
  (*(void (**)(uint64_t, uint64_t))(v31 + 16))(v33, v34);
  v35 = *(_QWORD *)(v31 + 64);
  v36 = a3[3];
  v37 = *(_QWORD *)(v36 - 8);
  v38 = *(unsigned __int8 *)(v37 + 80);
  v39 = v35 + v38;
  v40 = (void *)((v39 + v33) & ~v38);
  v41 = (const void *)((v39 + v34) & ~v38);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v37 + 48))(v41, 1, v36))
  {
    v42 = *(_DWORD *)(v37 + 84);
    v43 = *(_QWORD *)(v37 + 64);
    if (v42)
      v44 = v43;
    else
      v44 = v43 + 1;
    memcpy(v40, v41, v44);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v37 + 16))(v40, v41, v36);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v40, 0, 1, v36);
    v42 = *(_DWORD *)(v37 + 84);
    v43 = *(_QWORD *)(v37 + 64);
  }
  if (v42)
    v45 = v43;
  else
    v45 = v43 + 1;
  v46 = a3[4];
  v47 = *(_QWORD *)(v46 - 8);
  v48 = *(unsigned __int8 *)(v47 + 80);
  v49 = v45 + v48;
  v50 = (void *)(((unint64_t)v40 + v49) & ~v48);
  v51 = (const void *)(((unint64_t)v41 + v49) & ~v48);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v47 + 48))(v51, 1, v46))
  {
    v52 = *(_DWORD *)(v47 + 84);
    v53 = *(_QWORD *)(v47 + 64);
    if (v52)
      v54 = v53;
    else
      v54 = v53 + 1;
    memcpy(v50, v51, v54);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v47 + 16))(v50, v51, v46);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v50, 0, 1, v46);
    v52 = *(_DWORD *)(v47 + 84);
    v53 = *(_QWORD *)(v47 + 64);
  }
  if (v52)
    v55 = v53;
  else
    v55 = v53 + 1;
  v56 = a3[5];
  v57 = *(_QWORD *)(v56 - 8);
  v58 = *(unsigned __int8 *)(v57 + 80);
  v59 = v55 + v58;
  v60 = (void *)(((unint64_t)v50 + v59) & ~v58);
  v61 = (const void *)(((unint64_t)v51 + v59) & ~v58);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v57 + 48))(v61, 1, v56))
  {
    v62 = *(_DWORD *)(v57 + 84);
    v63 = *(_QWORD *)(v57 + 64);
    if (v62)
      v64 = v63;
    else
      v64 = v63 + 1;
    memcpy(v60, v61, v64);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v57 + 16))(v60, v61, v56);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v60, 0, 1, v56);
    v62 = *(_DWORD *)(v57 + 84);
    v63 = *(_QWORD *)(v57 + 64);
  }
  if (v62)
    v65 = v63;
  else
    v65 = v63 + 1;
  v66 = *(_QWORD *)(a3[6] - 8);
  v67 = *(unsigned __int8 *)(v66 + 80);
  v68 = v65 + v67;
  v69 = ((unint64_t)v60 + v68) & ~v67;
  v70 = ((unint64_t)v61 + v68) & ~v67;
  (*(void (**)(unint64_t, unint64_t))(v66 + 16))(v69, v70);
  v71 = *(_QWORD *)(v66 + 64);
  v72 = v69 + v71;
  v73 = v70 + v71;
  v74 = (v69 + v71 + 7) & 0xFFFFFFFFFFFFFFF8;
  v75 = (v70 + v71 + 7) & 0xFFFFFFFFFFFFFFF8;
  v76 = *(_QWORD *)v75;
  v77 = *(_QWORD *)(v75 + 8);
  v78 = *(_BYTE *)(v75 + 16);
  sub_23BF1ECC0(*(_QWORD *)v75, v77, v78);
  *(_QWORD *)v74 = v76;
  *(_QWORD *)(v74 + 8) = v77;
  *(_BYTE *)(v74 + 16) = v78;
  v79 = (v72 + 31) & 0xFFFFFFFFFFFFFFF8;
  v80 = (v73 + 31) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)v79 = *(_OWORD *)v80;
  *(_QWORD *)(v79 + 16) = *(_QWORD *)(v80 + 16);
  swift_retain();
  return a1;
}

uint64_t sub_23BFCD934(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void *v56;
  uint64_t (*v57)(void *, uint64_t, uint64_t);
  int v58;
  int v59;
  size_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  void *v67;
  uint64_t (*v68)(void *, uint64_t, uint64_t);
  int v69;
  int v70;
  size_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  void *v78;
  uint64_t (*v79)(void *, uint64_t, uint64_t);
  int v80;
  int v81;
  size_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  _QWORD *v100;
  _QWORD *v101;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  v6 = (a1 & 0xFFFFFFFFFFFFFFF8) + 224;
  v7 = a2 & 0xFFFFFFFFFFFFFFF8;
  v8 = (a2 & 0xFFFFFFFFFFFFFFF8) + 224;
  v9 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 248);
  if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 248) < 0xFFFFFFFFuLL)
  {
    if (v9 >= 0xFFFFFFFF)
    {
      v16 = *(_QWORD *)v8;
      v17 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 232);
      v18 = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 240);
      sub_23BEA0EAC(*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 224), v17, v18);
      *(_QWORD *)v6 = v16;
      *(_QWORD *)(v6 + 8) = v17;
      *(_BYTE *)(v6 + 16) = v18;
      *(_QWORD *)(v6 + 24) = *(_QWORD *)(v8 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
  }
  else
  {
    if (v9 >= 0xFFFFFFFF)
    {
      v10 = *(_QWORD *)v8;
      v11 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 232);
      v12 = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 240);
      sub_23BEA0EAC(*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 224), v11, v12);
      v13 = *(_QWORD *)v6;
      v14 = *(_QWORD *)(v6 + 8);
      v15 = *(_BYTE *)(v6 + 16);
      *(_QWORD *)v6 = v10;
      *(_QWORD *)(v6 + 8) = v11;
      *(_BYTE *)(v6 + 16) = v12;
      sub_23BEA0F64(v13, v14, v15);
      *(_QWORD *)(v6 + 24) = *(_QWORD *)(v8 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    sub_23BEA0F64(*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 224), *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 232), *(_BYTE *)((a1 & 0xFFFFFFFFFFFFFFF8) + 240));
    swift_bridgeObjectRelease();
  }
  v19 = *(_OWORD *)(v8 + 16);
  *(_OWORD *)v6 = *(_OWORD *)v8;
  *(_OWORD *)(v6 + 16) = v19;
LABEL_8:
  v20 = (v5 + 263) & 0xFFFFFFFFFFFFFFF8;
  v21 = (v7 + 263) & 0xFFFFFFFFFFFFFFF8;
  v22 = *(_QWORD *)(v21 + 24);
  if (*(_QWORD *)(v20 + 24) < 0xFFFFFFFFuLL)
  {
    if (v22 >= 0xFFFFFFFF)
    {
      v29 = *(_QWORD *)v21;
      v30 = *(_QWORD *)(v21 + 8);
      v31 = *(_BYTE *)(v21 + 16);
      sub_23BEA0EAC(*(_QWORD *)v21, v30, v31);
      *(_QWORD *)v20 = v29;
      *(_QWORD *)(v20 + 8) = v30;
      *(_BYTE *)(v20 + 16) = v31;
      *(_QWORD *)(v20 + 24) = *(_QWORD *)(v21 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_15;
    }
  }
  else
  {
    if (v22 >= 0xFFFFFFFF)
    {
      v23 = *(_QWORD *)v21;
      v24 = *(_QWORD *)(v21 + 8);
      v25 = *(_BYTE *)(v21 + 16);
      sub_23BEA0EAC(*(_QWORD *)v21, v24, v25);
      v26 = *(_QWORD *)v20;
      v27 = *(_QWORD *)(v20 + 8);
      v28 = *(_BYTE *)(v20 + 16);
      *(_QWORD *)v20 = v23;
      *(_QWORD *)(v20 + 8) = v24;
      *(_BYTE *)(v20 + 16) = v25;
      sub_23BEA0F64(v26, v27, v28);
      *(_QWORD *)(v20 + 24) = *(_QWORD *)(v21 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_15;
    }
    sub_23BEA0F64(*(_QWORD *)v20, *(_QWORD *)(v20 + 8), *(_BYTE *)(v20 + 16));
    swift_bridgeObjectRelease();
  }
  v32 = *(_OWORD *)(v21 + 16);
  *(_OWORD *)v20 = *(_OWORD *)v21;
  *(_OWORD *)(v20 + 16) = v32;
LABEL_15:
  v33 = (v20 + 39) & 0xFFFFFFFFFFFFFFF8;
  v34 = (v21 + 39) & 0xFFFFFFFFFFFFFFF8;
  v35 = *(_QWORD *)(v34 + 24);
  if (*(_QWORD *)(v33 + 24) < 0xFFFFFFFFuLL)
  {
    if (v35 >= 0xFFFFFFFF)
    {
      v42 = *(_QWORD *)v34;
      v43 = *(_QWORD *)(v34 + 8);
      v44 = *(_BYTE *)(v34 + 16);
      sub_23BEA0EAC(*(_QWORD *)v34, v43, v44);
      *(_QWORD *)v33 = v42;
      *(_QWORD *)(v33 + 8) = v43;
      *(_BYTE *)(v33 + 16) = v44;
      *(_QWORD *)(v33 + 24) = *(_QWORD *)(v34 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_22;
    }
  }
  else
  {
    if (v35 >= 0xFFFFFFFF)
    {
      v36 = *(_QWORD *)v34;
      v37 = *(_QWORD *)(v34 + 8);
      v38 = *(_BYTE *)(v34 + 16);
      sub_23BEA0EAC(*(_QWORD *)v34, v37, v38);
      v39 = *(_QWORD *)v33;
      v40 = *(_QWORD *)(v33 + 8);
      v41 = *(_BYTE *)(v33 + 16);
      *(_QWORD *)v33 = v36;
      *(_QWORD *)(v33 + 8) = v37;
      *(_BYTE *)(v33 + 16) = v38;
      sub_23BEA0F64(v39, v40, v41);
      *(_QWORD *)(v33 + 24) = *(_QWORD *)(v34 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_22;
    }
    sub_23BEA0F64(*(_QWORD *)v33, *(_QWORD *)(v33 + 8), *(_BYTE *)(v33 + 16));
    swift_bridgeObjectRelease();
  }
  v45 = *(_OWORD *)(v34 + 16);
  *(_OWORD *)v33 = *(_OWORD *)v34;
  *(_OWORD *)(v33 + 16) = v45;
LABEL_22:
  v46 = *(_QWORD *)(a3[2] - 8);
  v47 = *(unsigned __int8 *)(v46 + 80);
  v48 = (v33 + v47 + 32) & ~v47;
  v49 = (v34 + v47 + 32) & ~v47;
  (*(void (**)(uint64_t, uint64_t))(v46 + 24))(v48, v49);
  v50 = *(_QWORD *)(v46 + 64);
  v51 = a3[3];
  v52 = *(_QWORD *)(v51 - 8);
  v53 = *(unsigned __int8 *)(v52 + 80);
  v54 = v50 + v53;
  v55 = (void *)((v54 + v48) & ~v53);
  v56 = (void *)((v54 + v49) & ~v53);
  v57 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v52 + 48);
  v58 = v57(v55, 1, v51);
  v59 = v57(v56, 1, v51);
  if (v58)
  {
    if (!v59)
    {
      (*(void (**)(void *, void *, uint64_t))(v52 + 16))(v55, v56, v51);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v55, 0, 1, v51);
      goto LABEL_31;
    }
  }
  else
  {
    if (!v59)
    {
      (*(void (**)(void *, void *, uint64_t))(v52 + 24))(v55, v56, v51);
      goto LABEL_31;
    }
    (*(void (**)(void *, uint64_t))(v52 + 8))(v55, v51);
  }
  if (*(_DWORD *)(v52 + 84))
    v60 = *(_QWORD *)(v52 + 64);
  else
    v60 = *(_QWORD *)(v52 + 64) + 1;
  memcpy(v55, v56, v60);
LABEL_31:
  if (*(_DWORD *)(v52 + 84))
    v61 = *(_QWORD *)(v52 + 64);
  else
    v61 = *(_QWORD *)(v52 + 64) + 1;
  v62 = a3[4];
  v63 = *(_QWORD *)(v62 - 8);
  v64 = *(unsigned __int8 *)(v63 + 80);
  v65 = v61 + v64;
  v66 = (void *)(((unint64_t)v55 + v65) & ~v64);
  v67 = (void *)(((unint64_t)v56 + v65) & ~v64);
  v68 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v63 + 48);
  v69 = v68(v66, 1, v62);
  v70 = v68(v67, 1, v62);
  if (v69)
  {
    if (!v70)
    {
      (*(void (**)(void *, void *, uint64_t))(v63 + 16))(v66, v67, v62);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v66, 0, 1, v62);
      goto LABEL_43;
    }
  }
  else
  {
    if (!v70)
    {
      (*(void (**)(void *, void *, uint64_t))(v63 + 24))(v66, v67, v62);
      goto LABEL_43;
    }
    (*(void (**)(void *, uint64_t))(v63 + 8))(v66, v62);
  }
  if (*(_DWORD *)(v63 + 84))
    v71 = *(_QWORD *)(v63 + 64);
  else
    v71 = *(_QWORD *)(v63 + 64) + 1;
  memcpy(v66, v67, v71);
LABEL_43:
  if (*(_DWORD *)(v63 + 84))
    v72 = *(_QWORD *)(v63 + 64);
  else
    v72 = *(_QWORD *)(v63 + 64) + 1;
  v73 = a3[5];
  v74 = *(_QWORD *)(v73 - 8);
  v75 = *(unsigned __int8 *)(v74 + 80);
  v76 = v72 + v75;
  v77 = (void *)(((unint64_t)v66 + v76) & ~v75);
  v78 = (void *)(((unint64_t)v67 + v76) & ~v75);
  v79 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v74 + 48);
  v80 = v79(v77, 1, v73);
  v81 = v79(v78, 1, v73);
  if (v80)
  {
    if (!v81)
    {
      (*(void (**)(void *, void *, uint64_t))(v74 + 16))(v77, v78, v73);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v77, 0, 1, v73);
      goto LABEL_55;
    }
  }
  else
  {
    if (!v81)
    {
      (*(void (**)(void *, void *, uint64_t))(v74 + 24))(v77, v78, v73);
      goto LABEL_55;
    }
    (*(void (**)(void *, uint64_t))(v74 + 8))(v77, v73);
  }
  if (*(_DWORD *)(v74 + 84))
    v82 = *(_QWORD *)(v74 + 64);
  else
    v82 = *(_QWORD *)(v74 + 64) + 1;
  memcpy(v77, v78, v82);
LABEL_55:
  if (*(_DWORD *)(v74 + 84))
    v83 = *(_QWORD *)(v74 + 64);
  else
    v83 = *(_QWORD *)(v74 + 64) + 1;
  v84 = *(_QWORD *)(a3[6] - 8);
  v85 = *(unsigned __int8 *)(v84 + 80);
  v86 = v83 + v85;
  v87 = ((unint64_t)v77 + v86) & ~v85;
  v88 = ((unint64_t)v78 + v86) & ~v85;
  (*(void (**)(unint64_t, unint64_t))(v84 + 24))(v87, v88);
  v89 = *(_QWORD *)(v84 + 64);
  v90 = v87 + v89;
  v91 = v88 + v89;
  v92 = (v87 + v89 + 7) & 0xFFFFFFFFFFFFFFF8;
  v93 = (v88 + v89 + 7) & 0xFFFFFFFFFFFFFFF8;
  v94 = *(_QWORD *)v93;
  v95 = *(_QWORD *)(v93 + 8);
  v96 = *(_BYTE *)(v93 + 16);
  sub_23BF1ECC0(*(_QWORD *)v93, v95, v96);
  v97 = *(_QWORD *)v92;
  v98 = *(_QWORD *)(v92 + 8);
  v99 = *(_BYTE *)(v92 + 16);
  *(_QWORD *)v92 = v94;
  *(_QWORD *)(v92 + 8) = v95;
  *(_BYTE *)(v92 + 16) = v96;
  sub_23BF1E5BC(v97, v98, v99);
  v100 = (_QWORD *)((v90 + 31) & 0xFFFFFFFFFFFFFFF8);
  v101 = (_QWORD *)((v91 + 31) & 0xFFFFFFFFFFFFFFF8);
  *v100 = *v101;
  v100[1] = v101[1];
  v100[2] = v101[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_23BFCE038(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  unint64_t v11;
  __int128 v12;
  _OWORD *v13;
  _OWORD *v14;
  __int128 v15;
  _OWORD *v16;
  _OWORD *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const void *v29;
  int v30;
  size_t v31;
  size_t v32;
  size_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const void *v39;
  int v40;
  size_t v41;
  size_t v42;
  size_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const void *v49;
  int v50;
  size_t v51;
  size_t v52;
  size_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  __int128 v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;

  v5 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v5;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  v6 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v6;
  v7 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v7;
  v8 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v8;
  v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v9;
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  v11 = a1 & 0xFFFFFFFFFFFFFFF8;
  v12 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 240);
  *(_OWORD *)(v11 + 224) = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 224);
  *(_OWORD *)(v11 + 240) = v12;
  v13 = (_OWORD *)(((a1 & 0xFFFFFFFFFFFFFFF8) + 263) & 0xFFFFFFFFFFFFFFF8);
  v14 = (_OWORD *)(((a2 & 0xFFFFFFFFFFFFFFF8) + 263) & 0xFFFFFFFFFFFFFFF8);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  v16 = (_OWORD *)(((unint64_t)v13 + 39) & 0xFFFFFFFFFFFFFFF8);
  v17 = (_OWORD *)(((unint64_t)v14 + 39) & 0xFFFFFFFFFFFFFFF8);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  v19 = *(_QWORD *)(a3[2] - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  v21 = ((unint64_t)v16 + v20 + 32) & ~v20;
  v22 = ((unint64_t)v17 + v20 + 32) & ~v20;
  (*(void (**)(uint64_t, uint64_t))(v19 + 32))(v21, v22);
  v23 = *(_QWORD *)(v19 + 64);
  v24 = a3[3];
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(unsigned __int8 *)(v25 + 80);
  v27 = v23 + v26;
  v28 = (void *)((v27 + v21) & ~v26);
  v29 = (const void *)((v27 + v22) & ~v26);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v25 + 48))(v29, 1, v24))
  {
    v30 = *(_DWORD *)(v25 + 84);
    v31 = *(_QWORD *)(v25 + 64);
    if (v30)
      v32 = v31;
    else
      v32 = v31 + 1;
    memcpy(v28, v29, v32);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v25 + 32))(v28, v29, v24);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v28, 0, 1, v24);
    v30 = *(_DWORD *)(v25 + 84);
    v31 = *(_QWORD *)(v25 + 64);
  }
  if (v30)
    v33 = v31;
  else
    v33 = v31 + 1;
  v34 = a3[4];
  v35 = *(_QWORD *)(v34 - 8);
  v36 = *(unsigned __int8 *)(v35 + 80);
  v37 = v33 + v36;
  v38 = (void *)(((unint64_t)v28 + v37) & ~v36);
  v39 = (const void *)(((unint64_t)v29 + v37) & ~v36);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v35 + 48))(v39, 1, v34))
  {
    v40 = *(_DWORD *)(v35 + 84);
    v41 = *(_QWORD *)(v35 + 64);
    if (v40)
      v42 = v41;
    else
      v42 = v41 + 1;
    memcpy(v38, v39, v42);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v35 + 32))(v38, v39, v34);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v38, 0, 1, v34);
    v40 = *(_DWORD *)(v35 + 84);
    v41 = *(_QWORD *)(v35 + 64);
  }
  if (v40)
    v43 = v41;
  else
    v43 = v41 + 1;
  v44 = a3[5];
  v45 = *(_QWORD *)(v44 - 8);
  v46 = *(unsigned __int8 *)(v45 + 80);
  v47 = v43 + v46;
  v48 = (void *)(((unint64_t)v38 + v47) & ~v46);
  v49 = (const void *)(((unint64_t)v39 + v47) & ~v46);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v45 + 48))(v49, 1, v44))
  {
    v50 = *(_DWORD *)(v45 + 84);
    v51 = *(_QWORD *)(v45 + 64);
    if (v50)
      v52 = v51;
    else
      v52 = v51 + 1;
    memcpy(v48, v49, v52);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v45 + 32))(v48, v49, v44);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v48, 0, 1, v44);
    v50 = *(_DWORD *)(v45 + 84);
    v51 = *(_QWORD *)(v45 + 64);
  }
  if (v50)
    v53 = v51;
  else
    v53 = v51 + 1;
  v54 = *(_QWORD *)(a3[6] - 8);
  v55 = *(unsigned __int8 *)(v54 + 80);
  v56 = v53 + v55;
  v57 = ((unint64_t)v48 + v56) & ~v55;
  v58 = ((unint64_t)v49 + v56) & ~v55;
  (*(void (**)(unint64_t, unint64_t))(v54 + 32))(v57, v58);
  v59 = *(_QWORD *)(v54 + 64);
  v60 = v57 + v59;
  v61 = v58 + v59;
  v62 = (v60 + 7) & 0xFFFFFFFFFFFFFFF8;
  v63 = (v61 + 7) & 0xFFFFFFFFFFFFFFF8;
  v64 = *(_OWORD *)v63;
  *(_BYTE *)(v62 + 16) = *(_BYTE *)(v63 + 16);
  *(_OWORD *)v62 = v64;
  v65 = (v60 + 31) & 0xFFFFFFFFFFFFFFF8;
  v66 = (v61 + 31) & 0xFFFFFFFFFFFFFFF8;
  v67 = *(_QWORD *)(v66 + 16);
  *(_OWORD *)v65 = *(_OWORD *)v66;
  *(_QWORD *)(v65 + 16) = v67;
  return a1;
}

uint64_t sub_23BFCE364(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  uint64_t (*v42)(void *, uint64_t, uint64_t);
  int v43;
  int v44;
  size_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  uint64_t (*v53)(void *, uint64_t, uint64_t);
  int v54;
  int v55;
  size_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  void *v63;
  uint64_t (*v64)(void *, uint64_t, uint64_t);
  int v65;
  int v66;
  size_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  _QWORD *v83;
  _QWORD *v84;

  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  v8 = a1 & 0xFFFFFFFFFFFFFFF8;
  v9 = (a1 & 0xFFFFFFFFFFFFFFF8) + 224;
  v10 = a2 & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  v11 = (a2 & 0xFFFFFFFFFFFFFFF8) + 224;
  if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 248) >= 0xFFFFFFFFuLL)
  {
    if (*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 248) >= 0xFFFFFFFFuLL)
    {
      v12 = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 240);
      v13 = *(_QWORD *)v9;
      v14 = *(_QWORD *)(v9 + 8);
      v15 = *(_BYTE *)(v9 + 16);
      *(_OWORD *)v9 = *(_OWORD *)v11;
      *(_BYTE *)(v9 + 16) = v12;
      sub_23BEA0F64(v13, v14, v15);
      *(_QWORD *)(v9 + 24) = *(_QWORD *)(v11 + 24);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_23BEA0F64(*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 224), *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 232), *(_BYTE *)((a1 & 0xFFFFFFFFFFFFFFF8) + 240));
    swift_bridgeObjectRelease();
  }
  v16 = *(_OWORD *)(v11 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v11;
  *(_OWORD *)(v9 + 16) = v16;
LABEL_6:
  v17 = (v8 + 263) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v10 + 263) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v17 + 24) >= 0xFFFFFFFFuLL)
  {
    if (*(_QWORD *)(v18 + 24) >= 0xFFFFFFFFuLL)
    {
      v19 = *(_BYTE *)(v18 + 16);
      v20 = *(_QWORD *)v17;
      v21 = *(_QWORD *)(v17 + 8);
      v22 = *(_BYTE *)(v17 + 16);
      *(_OWORD *)v17 = *(_OWORD *)v18;
      *(_BYTE *)(v17 + 16) = v19;
      sub_23BEA0F64(v20, v21, v22);
      *(_QWORD *)(v17 + 24) = *(_QWORD *)(v18 + 24);
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    sub_23BEA0F64(*(_QWORD *)v17, *(_QWORD *)(v17 + 8), *(_BYTE *)(v17 + 16));
    swift_bridgeObjectRelease();
  }
  v23 = *(_OWORD *)(v18 + 16);
  *(_OWORD *)v17 = *(_OWORD *)v18;
  *(_OWORD *)(v17 + 16) = v23;
LABEL_11:
  v24 = (v17 + 39) & 0xFFFFFFFFFFFFFFF8;
  v25 = (v18 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v24 + 24) >= 0xFFFFFFFFuLL)
  {
    if (*(_QWORD *)(v25 + 24) >= 0xFFFFFFFFuLL)
    {
      v26 = *(_BYTE *)(v25 + 16);
      v27 = *(_QWORD *)v24;
      v28 = *(_QWORD *)(v24 + 8);
      v29 = *(_BYTE *)(v24 + 16);
      *(_OWORD *)v24 = *(_OWORD *)v25;
      *(_BYTE *)(v24 + 16) = v26;
      sub_23BEA0F64(v27, v28, v29);
      *(_QWORD *)(v24 + 24) = *(_QWORD *)(v25 + 24);
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
    sub_23BEA0F64(*(_QWORD *)v24, *(_QWORD *)(v24 + 8), *(_BYTE *)(v24 + 16));
    swift_bridgeObjectRelease();
  }
  v30 = *(_OWORD *)(v25 + 16);
  *(_OWORD *)v24 = *(_OWORD *)v25;
  *(_OWORD *)(v24 + 16) = v30;
LABEL_16:
  v31 = *(_QWORD *)(a3[2] - 8);
  v32 = *(unsigned __int8 *)(v31 + 80);
  v33 = (v24 + v32 + 32) & ~v32;
  v34 = (v25 + v32 + 32) & ~v32;
  (*(void (**)(uint64_t, uint64_t))(v31 + 40))(v33, v34);
  v35 = *(_QWORD *)(v31 + 64);
  v36 = a3[3];
  v37 = *(_QWORD *)(v36 - 8);
  v38 = *(unsigned __int8 *)(v37 + 80);
  v39 = v35 + v38;
  v40 = (void *)((v39 + v33) & ~v38);
  v41 = (void *)((v39 + v34) & ~v38);
  v42 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v37 + 48);
  v43 = v42(v40, 1, v36);
  v44 = v42(v41, 1, v36);
  if (v43)
  {
    if (!v44)
    {
      (*(void (**)(void *, void *, uint64_t))(v37 + 32))(v40, v41, v36);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v40, 0, 1, v36);
      goto LABEL_25;
    }
  }
  else
  {
    if (!v44)
    {
      (*(void (**)(void *, void *, uint64_t))(v37 + 40))(v40, v41, v36);
      goto LABEL_25;
    }
    (*(void (**)(void *, uint64_t))(v37 + 8))(v40, v36);
  }
  if (*(_DWORD *)(v37 + 84))
    v45 = *(_QWORD *)(v37 + 64);
  else
    v45 = *(_QWORD *)(v37 + 64) + 1;
  memcpy(v40, v41, v45);
LABEL_25:
  if (*(_DWORD *)(v37 + 84))
    v46 = *(_QWORD *)(v37 + 64);
  else
    v46 = *(_QWORD *)(v37 + 64) + 1;
  v47 = a3[4];
  v48 = *(_QWORD *)(v47 - 8);
  v49 = *(unsigned __int8 *)(v48 + 80);
  v50 = v46 + v49;
  v51 = (void *)(((unint64_t)v40 + v50) & ~v49);
  v52 = (void *)(((unint64_t)v41 + v50) & ~v49);
  v53 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v48 + 48);
  v54 = v53(v51, 1, v47);
  v55 = v53(v52, 1, v47);
  if (v54)
  {
    if (!v55)
    {
      (*(void (**)(void *, void *, uint64_t))(v48 + 32))(v51, v52, v47);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v51, 0, 1, v47);
      goto LABEL_37;
    }
  }
  else
  {
    if (!v55)
    {
      (*(void (**)(void *, void *, uint64_t))(v48 + 40))(v51, v52, v47);
      goto LABEL_37;
    }
    (*(void (**)(void *, uint64_t))(v48 + 8))(v51, v47);
  }
  if (*(_DWORD *)(v48 + 84))
    v56 = *(_QWORD *)(v48 + 64);
  else
    v56 = *(_QWORD *)(v48 + 64) + 1;
  memcpy(v51, v52, v56);
LABEL_37:
  if (*(_DWORD *)(v48 + 84))
    v57 = *(_QWORD *)(v48 + 64);
  else
    v57 = *(_QWORD *)(v48 + 64) + 1;
  v58 = a3[5];
  v59 = *(_QWORD *)(v58 - 8);
  v60 = *(unsigned __int8 *)(v59 + 80);
  v61 = v57 + v60;
  v62 = (void *)(((unint64_t)v51 + v61) & ~v60);
  v63 = (void *)(((unint64_t)v52 + v61) & ~v60);
  v64 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v59 + 48);
  v65 = v64(v62, 1, v58);
  v66 = v64(v63, 1, v58);
  if (v65)
  {
    if (!v66)
    {
      (*(void (**)(void *, void *, uint64_t))(v59 + 32))(v62, v63, v58);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v62, 0, 1, v58);
      goto LABEL_49;
    }
  }
  else
  {
    if (!v66)
    {
      (*(void (**)(void *, void *, uint64_t))(v59 + 40))(v62, v63, v58);
      goto LABEL_49;
    }
    (*(void (**)(void *, uint64_t))(v59 + 8))(v62, v58);
  }
  if (*(_DWORD *)(v59 + 84))
    v67 = *(_QWORD *)(v59 + 64);
  else
    v67 = *(_QWORD *)(v59 + 64) + 1;
  memcpy(v62, v63, v67);
LABEL_49:
  if (*(_DWORD *)(v59 + 84))
    v68 = *(_QWORD *)(v59 + 64);
  else
    v68 = *(_QWORD *)(v59 + 64) + 1;
  v69 = *(_QWORD *)(a3[6] - 8);
  v70 = *(unsigned __int8 *)(v69 + 80);
  v71 = v68 + v70;
  v72 = ((unint64_t)v62 + v71) & ~v70;
  v73 = ((unint64_t)v63 + v71) & ~v70;
  (*(void (**)(unint64_t, unint64_t))(v69 + 40))(v72, v73);
  v74 = *(_QWORD *)(v69 + 64);
  v75 = v72 + v74;
  v76 = v73 + v74;
  v77 = (v75 + 7) & 0xFFFFFFFFFFFFFFF8;
  v78 = (v76 + 7) & 0xFFFFFFFFFFFFFFF8;
  v79 = *(_BYTE *)(v78 + 16);
  v80 = *(_QWORD *)v77;
  v81 = *(_QWORD *)(v77 + 8);
  v82 = *(_BYTE *)(v77 + 16);
  *(_OWORD *)v77 = *(_OWORD *)v78;
  *(_BYTE *)(v77 + 16) = v79;
  sub_23BF1E5BC(v80, v81, v82);
  v83 = (_QWORD *)((v75 + 31) & 0xFFFFFFFFFFFFFFF8);
  v84 = (_QWORD *)((v76 + 31) & 0xFFFFFFFFFFFFFFF8);
  *v83 = *v84;
  v83[1] = v84[1];
  v83[2] = v84[2];
  swift_release();
  return a1;
}

